// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35947 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 44650 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 63618 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 63560 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1194
// begin unit := CreateCharacter ( prefix & ident ) ;
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
// if unit then
1171: LD_VAR 0 5
1175: IFFALSE 1192
// DeleteCharacters ( prefix & ident ) ;
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 1
1186: STR
1187: PPUSH
1188: CALL_OW 40
// end else
1192: GO 1209
// unit := NewCharacter ( ident ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_VAR 0 1
1203: PPUSH
1204: CALL_OW 25
1208: ST_TO_ADDR
// result := unit ;
1209: LD_ADDR_VAR 0 4
1213: PUSH
1214: LD_VAR 0 5
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 4
1223: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
// if exist_mode then
1228: LD_VAR 0 2
1232: IFFALSE 1257
// unit := CreateCharacter ( prefix & ident ) else
1234: LD_ADDR_VAR 0 5
1238: PUSH
1239: LD_VAR 0 3
1243: PUSH
1244: LD_VAR 0 1
1248: STR
1249: PPUSH
1250: CALL_OW 34
1254: ST_TO_ADDR
1255: GO 1272
// unit := NewCharacter ( ident ) ;
1257: LD_ADDR_VAR 0 5
1261: PUSH
1262: LD_VAR 0 1
1266: PPUSH
1267: CALL_OW 25
1271: ST_TO_ADDR
// result := unit ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_VAR 0 5
1281: ST_TO_ADDR
// end ;
1282: LD_VAR 0 4
1286: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1287: LD_INT 0
1289: PPUSH
1290: PPUSH
// if not side or not nation then
1291: LD_VAR 0 1
1295: NOT
1296: IFTRUE 1305
1298: PUSH
1299: LD_VAR 0 2
1303: NOT
1304: OR
1305: IFFALSE 1309
// exit ;
1307: GO 2103
// case nation of nation_american :
1309: LD_VAR 0 2
1313: PUSH
1314: LD_INT 1
1316: DOUBLE
1317: EQUAL
1318: IFTRUE 1322
1320: GO 1544
1322: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1323: LD_ADDR_VAR 0 4
1327: PUSH
1328: LD_INT 35
1330: PUSH
1331: LD_INT 45
1333: PUSH
1334: LD_INT 46
1336: PUSH
1337: LD_INT 47
1339: PUSH
1340: LD_INT 82
1342: PUSH
1343: LD_INT 83
1345: PUSH
1346: LD_INT 84
1348: PUSH
1349: LD_INT 85
1351: PUSH
1352: LD_INT 86
1354: PUSH
1355: LD_INT 1
1357: PUSH
1358: LD_INT 2
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 15
1366: PUSH
1367: LD_INT 16
1369: PUSH
1370: LD_INT 7
1372: PUSH
1373: LD_INT 12
1375: PUSH
1376: LD_INT 13
1378: PUSH
1379: LD_INT 10
1381: PUSH
1382: LD_INT 14
1384: PUSH
1385: LD_INT 20
1387: PUSH
1388: LD_INT 21
1390: PUSH
1391: LD_INT 22
1393: PUSH
1394: LD_INT 25
1396: PUSH
1397: LD_INT 32
1399: PUSH
1400: LD_INT 27
1402: PUSH
1403: LD_INT 36
1405: PUSH
1406: LD_INT 69
1408: PUSH
1409: LD_INT 39
1411: PUSH
1412: LD_INT 34
1414: PUSH
1415: LD_INT 40
1417: PUSH
1418: LD_INT 48
1420: PUSH
1421: LD_INT 49
1423: PUSH
1424: LD_INT 50
1426: PUSH
1427: LD_INT 51
1429: PUSH
1430: LD_INT 52
1432: PUSH
1433: LD_INT 53
1435: PUSH
1436: LD_INT 54
1438: PUSH
1439: LD_INT 55
1441: PUSH
1442: LD_INT 56
1444: PUSH
1445: LD_INT 57
1447: PUSH
1448: LD_INT 58
1450: PUSH
1451: LD_INT 59
1453: PUSH
1454: LD_INT 60
1456: PUSH
1457: LD_INT 61
1459: PUSH
1460: LD_INT 62
1462: PUSH
1463: LD_INT 80
1465: PUSH
1466: LD_INT 82
1468: PUSH
1469: LD_INT 83
1471: PUSH
1472: LD_INT 84
1474: PUSH
1475: LD_INT 85
1477: PUSH
1478: LD_INT 86
1480: PUSH
1481: LD_INT 90
1483: PUSH
1484: LD_INT 93
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: ST_TO_ADDR
1542: GO 2025
1544: LD_INT 2
1546: DOUBLE
1547: EQUAL
1548: IFTRUE 1552
1550: GO 1786
1552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 35
1560: PUSH
1561: LD_INT 45
1563: PUSH
1564: LD_INT 46
1566: PUSH
1567: LD_INT 47
1569: PUSH
1570: LD_INT 82
1572: PUSH
1573: LD_INT 83
1575: PUSH
1576: LD_INT 84
1578: PUSH
1579: LD_INT 85
1581: PUSH
1582: LD_INT 87
1584: PUSH
1585: LD_INT 70
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: LD_INT 11
1593: PUSH
1594: LD_INT 3
1596: PUSH
1597: LD_INT 4
1599: PUSH
1600: LD_INT 5
1602: PUSH
1603: LD_INT 6
1605: PUSH
1606: LD_INT 15
1608: PUSH
1609: LD_INT 18
1611: PUSH
1612: LD_INT 7
1614: PUSH
1615: LD_INT 17
1617: PUSH
1618: LD_INT 8
1620: PUSH
1621: LD_INT 20
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 22
1629: PUSH
1630: LD_INT 72
1632: PUSH
1633: LD_INT 26
1635: PUSH
1636: LD_INT 69
1638: PUSH
1639: LD_INT 39
1641: PUSH
1642: LD_INT 40
1644: PUSH
1645: LD_INT 41
1647: PUSH
1648: LD_INT 42
1650: PUSH
1651: LD_INT 43
1653: PUSH
1654: LD_INT 48
1656: PUSH
1657: LD_INT 49
1659: PUSH
1660: LD_INT 50
1662: PUSH
1663: LD_INT 51
1665: PUSH
1666: LD_INT 52
1668: PUSH
1669: LD_INT 53
1671: PUSH
1672: LD_INT 54
1674: PUSH
1675: LD_INT 55
1677: PUSH
1678: LD_INT 56
1680: PUSH
1681: LD_INT 60
1683: PUSH
1684: LD_INT 61
1686: PUSH
1687: LD_INT 62
1689: PUSH
1690: LD_INT 66
1692: PUSH
1693: LD_INT 67
1695: PUSH
1696: LD_INT 68
1698: PUSH
1699: LD_INT 81
1701: PUSH
1702: LD_INT 82
1704: PUSH
1705: LD_INT 83
1707: PUSH
1708: LD_INT 84
1710: PUSH
1711: LD_INT 85
1713: PUSH
1714: LD_INT 87
1716: PUSH
1717: LD_INT 88
1719: PUSH
1720: LD_INT 92
1722: PUSH
1723: LD_INT 94
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: ST_TO_ADDR
1784: GO 2025
1786: LD_INT 3
1788: DOUBLE
1789: EQUAL
1790: IFTRUE 1794
1792: GO 2024
1794: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1795: LD_ADDR_VAR 0 4
1799: PUSH
1800: LD_INT 46
1802: PUSH
1803: LD_INT 47
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 82
1814: PUSH
1815: LD_INT 83
1817: PUSH
1818: LD_INT 84
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 86
1826: PUSH
1827: LD_INT 11
1829: PUSH
1830: LD_INT 9
1832: PUSH
1833: LD_INT 20
1835: PUSH
1836: LD_INT 19
1838: PUSH
1839: LD_INT 21
1841: PUSH
1842: LD_INT 24
1844: PUSH
1845: LD_INT 22
1847: PUSH
1848: LD_INT 25
1850: PUSH
1851: LD_INT 28
1853: PUSH
1854: LD_INT 29
1856: PUSH
1857: LD_INT 30
1859: PUSH
1860: LD_INT 31
1862: PUSH
1863: LD_INT 37
1865: PUSH
1866: LD_INT 38
1868: PUSH
1869: LD_INT 32
1871: PUSH
1872: LD_INT 27
1874: PUSH
1875: LD_INT 33
1877: PUSH
1878: LD_INT 69
1880: PUSH
1881: LD_INT 39
1883: PUSH
1884: LD_INT 34
1886: PUSH
1887: LD_INT 40
1889: PUSH
1890: LD_INT 71
1892: PUSH
1893: LD_INT 23
1895: PUSH
1896: LD_INT 44
1898: PUSH
1899: LD_INT 48
1901: PUSH
1902: LD_INT 49
1904: PUSH
1905: LD_INT 50
1907: PUSH
1908: LD_INT 51
1910: PUSH
1911: LD_INT 52
1913: PUSH
1914: LD_INT 53
1916: PUSH
1917: LD_INT 54
1919: PUSH
1920: LD_INT 55
1922: PUSH
1923: LD_INT 56
1925: PUSH
1926: LD_INT 57
1928: PUSH
1929: LD_INT 58
1931: PUSH
1932: LD_INT 59
1934: PUSH
1935: LD_INT 63
1937: PUSH
1938: LD_INT 64
1940: PUSH
1941: LD_INT 65
1943: PUSH
1944: LD_INT 82
1946: PUSH
1947: LD_INT 83
1949: PUSH
1950: LD_INT 84
1952: PUSH
1953: LD_INT 85
1955: PUSH
1956: LD_INT 86
1958: PUSH
1959: LD_INT 89
1961: PUSH
1962: LD_INT 91
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: ST_TO_ADDR
2022: GO 2025
2024: POP
// if state > - 1 and state < 3 then
2025: LD_VAR 0 3
2029: PUSH
2030: LD_INT 1
2032: NEG
2033: GREATER
2034: IFFALSE 2046
2036: PUSH
2037: LD_VAR 0 3
2041: PUSH
2042: LD_INT 3
2044: LESS
2045: AND
2046: IFFALSE 2103
// for i in result do
2048: LD_ADDR_VAR 0 5
2052: PUSH
2053: LD_VAR 0 4
2057: PUSH
2058: FOR_IN
2059: IFFALSE 2101
// if GetTech ( i , side ) <> state then
2061: LD_VAR 0 5
2065: PPUSH
2066: LD_VAR 0 1
2070: PPUSH
2071: CALL_OW 321
2075: PUSH
2076: LD_VAR 0 3
2080: NONEQUAL
2081: IFFALSE 2099
// result := result diff i ;
2083: LD_ADDR_VAR 0 4
2087: PUSH
2088: LD_VAR 0 4
2092: PUSH
2093: LD_VAR 0 5
2097: DIFF
2098: ST_TO_ADDR
2099: GO 2058
2101: POP
2102: POP
// end ;
2103: LD_VAR 0 4
2107: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2108: LD_INT 0
2110: PPUSH
2111: PPUSH
2112: PPUSH
// result := true ;
2113: LD_ADDR_VAR 0 3
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2121: LD_ADDR_VAR 0 5
2125: PUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: CALL_OW 480
2135: ST_TO_ADDR
// if not tmp then
2136: LD_VAR 0 5
2140: NOT
2141: IFFALSE 2145
// exit ;
2143: GO 2194
// for i in tmp do
2145: LD_ADDR_VAR 0 4
2149: PUSH
2150: LD_VAR 0 5
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2192
// if GetTech ( i , side ) <> state_researched then
2158: LD_VAR 0 4
2162: PPUSH
2163: LD_VAR 0 1
2167: PPUSH
2168: CALL_OW 321
2172: PUSH
2173: LD_INT 2
2175: NONEQUAL
2176: IFFALSE 2190
// begin result := false ;
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_INT 0
2185: ST_TO_ADDR
// exit ;
2186: POP
2187: POP
2188: GO 2194
// end ;
2190: GO 2155
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 3
2198: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2214: LD_VAR 0 1
2218: NOT
2219: IFTRUE 2236
2221: PUSH
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 257
2231: PUSH
2232: LD_INT 9
2234: NONEQUAL
2235: OR
2236: IFFALSE 2240
// exit ;
2238: GO 2819
// side := GetSide ( unit ) ;
2240: LD_ADDR_VAR 0 9
2244: PUSH
2245: LD_VAR 0 1
2249: PPUSH
2250: CALL_OW 255
2254: ST_TO_ADDR
// tech_space := tech_spacanom ;
2255: LD_ADDR_VAR 0 12
2259: PUSH
2260: LD_INT 29
2262: ST_TO_ADDR
// tech_time := tech_taurad ;
2263: LD_ADDR_VAR 0 13
2267: PUSH
2268: LD_INT 28
2270: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2271: LD_ADDR_VAR 0 11
2275: PUSH
2276: LD_VAR 0 1
2280: PPUSH
2281: CALL_OW 310
2285: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2286: LD_VAR 0 11
2290: PPUSH
2291: CALL_OW 247
2295: PUSH
2296: LD_INT 2
2298: EQUAL
2299: IFFALSE 2303
// exit ;
2301: GO 2819
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2303: LD_ADDR_VAR 0 8
2307: PUSH
2308: LD_INT 81
2310: PUSH
2311: LD_VAR 0 9
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 21
2325: PUSH
2326: LD_INT 3
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: ST_TO_ADDR
// if not tmp then
2346: LD_VAR 0 8
2350: NOT
2351: IFFALSE 2355
// exit ;
2353: GO 2819
// if in_unit then
2355: LD_VAR 0 11
2359: IFFALSE 2383
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2361: LD_ADDR_VAR 0 10
2365: PUSH
2366: LD_VAR 0 8
2370: PPUSH
2371: LD_VAR 0 11
2375: PPUSH
2376: CALL_OW 74
2380: ST_TO_ADDR
2381: GO 2403
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2383: LD_ADDR_VAR 0 10
2387: PUSH
2388: LD_VAR 0 8
2392: PPUSH
2393: LD_VAR 0 1
2397: PPUSH
2398: CALL_OW 74
2402: ST_TO_ADDR
// if not enemy then
2403: LD_VAR 0 10
2407: NOT
2408: IFFALSE 2412
// exit ;
2410: GO 2819
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2412: LD_VAR 0 11
2416: IFFALSE 2438
2418: PUSH
2419: LD_VAR 0 11
2423: PPUSH
2424: LD_VAR 0 10
2428: PPUSH
2429: CALL_OW 296
2433: PUSH
2434: LD_INT 13
2436: GREATER
2437: AND
2438: IFTRUE 2460
2440: PUSH
2441: LD_VAR 0 1
2445: PPUSH
2446: LD_VAR 0 10
2450: PPUSH
2451: CALL_OW 296
2455: PUSH
2456: LD_INT 12
2458: GREATER
2459: OR
2460: IFFALSE 2464
// exit ;
2462: GO 2819
// missile := [ 1 ] ;
2464: LD_ADDR_VAR 0 14
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2475: LD_VAR 0 9
2479: PPUSH
2480: LD_VAR 0 12
2484: PPUSH
2485: CALL_OW 325
2489: IFFALSE 2518
// missile := Replace ( missile , missile + 1 , 2 ) ;
2491: LD_ADDR_VAR 0 14
2495: PUSH
2496: LD_VAR 0 14
2500: PPUSH
2501: LD_VAR 0 14
2505: PUSH
2506: LD_INT 1
2508: PLUS
2509: PPUSH
2510: LD_INT 2
2512: PPUSH
2513: CALL_OW 1
2517: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2518: LD_VAR 0 9
2522: PPUSH
2523: LD_VAR 0 13
2527: PPUSH
2528: CALL_OW 325
2532: IFFALSE 2556
2534: PUSH
2535: LD_VAR 0 10
2539: PPUSH
2540: CALL_OW 255
2544: PPUSH
2545: LD_VAR 0 13
2549: PPUSH
2550: CALL_OW 325
2554: NOT
2555: AND
2556: IFFALSE 2585
// missile := Replace ( missile , missile + 1 , 3 ) ;
2558: LD_ADDR_VAR 0 14
2562: PUSH
2563: LD_VAR 0 14
2567: PPUSH
2568: LD_VAR 0 14
2572: PUSH
2573: LD_INT 1
2575: PLUS
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 1
2584: ST_TO_ADDR
// if missile < 2 then
2585: LD_VAR 0 14
2589: PUSH
2590: LD_INT 2
2592: LESS
2593: IFFALSE 2597
// exit ;
2595: GO 2819
// x := GetX ( enemy ) ;
2597: LD_ADDR_VAR 0 4
2601: PUSH
2602: LD_VAR 0 10
2606: PPUSH
2607: CALL_OW 250
2611: ST_TO_ADDR
// y := GetY ( enemy ) ;
2612: LD_ADDR_VAR 0 5
2616: PUSH
2617: LD_VAR 0 10
2621: PPUSH
2622: CALL_OW 251
2626: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2627: LD_ADDR_VAR 0 6
2631: PUSH
2632: LD_VAR 0 4
2636: PUSH
2637: LD_INT 1
2639: NEG
2640: PPUSH
2641: LD_INT 1
2643: PPUSH
2644: CALL_OW 12
2648: PLUS
2649: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2650: LD_ADDR_VAR 0 7
2654: PUSH
2655: LD_VAR 0 5
2659: PUSH
2660: LD_INT 1
2662: NEG
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL_OW 12
2671: PLUS
2672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2673: LD_VAR 0 6
2677: PPUSH
2678: LD_VAR 0 7
2682: PPUSH
2683: CALL_OW 488
2687: NOT
2688: IFFALSE 2710
// begin _x := x ;
2690: LD_ADDR_VAR 0 6
2694: PUSH
2695: LD_VAR 0 4
2699: ST_TO_ADDR
// _y := y ;
2700: LD_ADDR_VAR 0 7
2704: PUSH
2705: LD_VAR 0 5
2709: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: LD_INT 1
2717: PPUSH
2718: LD_VAR 0 14
2722: PPUSH
2723: CALL_OW 12
2727: ST_TO_ADDR
// case i of 1 :
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 1
2735: DOUBLE
2736: EQUAL
2737: IFTRUE 2741
2739: GO 2758
2741: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_VAR 0 10
2751: PPUSH
2752: CALL_OW 115
2756: GO 2819
2758: LD_INT 2
2760: DOUBLE
2761: EQUAL
2762: IFTRUE 2766
2764: GO 2788
2766: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2767: LD_VAR 0 1
2771: PPUSH
2772: LD_VAR 0 6
2776: PPUSH
2777: LD_VAR 0 7
2781: PPUSH
2782: CALL_OW 153
2786: GO 2819
2788: LD_INT 3
2790: DOUBLE
2791: EQUAL
2792: IFTRUE 2796
2794: GO 2818
2796: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 7
2811: PPUSH
2812: CALL_OW 154
2816: GO 2819
2818: POP
// end ;
2819: LD_VAR 0 2
2823: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2824: LD_INT 0
2826: PPUSH
2827: PPUSH
2828: PPUSH
2829: PPUSH
2830: PPUSH
2831: PPUSH
// if not unit or not building then
2832: LD_VAR 0 1
2836: NOT
2837: IFTRUE 2846
2839: PUSH
2840: LD_VAR 0 2
2844: NOT
2845: OR
2846: IFFALSE 2850
// exit ;
2848: GO 3008
// x := GetX ( building ) ;
2850: LD_ADDR_VAR 0 5
2854: PUSH
2855: LD_VAR 0 2
2859: PPUSH
2860: CALL_OW 250
2864: ST_TO_ADDR
// y := GetY ( building ) ;
2865: LD_ADDR_VAR 0 6
2869: PUSH
2870: LD_VAR 0 2
2874: PPUSH
2875: CALL_OW 251
2879: ST_TO_ADDR
// for i := 0 to 5 do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 0
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 5
2892: PUSH
2893: FOR_TO
2894: IFFALSE 3006
// begin _x := ShiftX ( x , i , 3 ) ;
2896: LD_ADDR_VAR 0 7
2900: PUSH
2901: LD_VAR 0 5
2905: PPUSH
2906: LD_VAR 0 4
2910: PPUSH
2911: LD_INT 3
2913: PPUSH
2914: CALL_OW 272
2918: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2919: LD_ADDR_VAR 0 8
2923: PUSH
2924: LD_VAR 0 6
2928: PPUSH
2929: LD_VAR 0 4
2933: PPUSH
2934: LD_INT 3
2936: PPUSH
2937: CALL_OW 273
2941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2942: LD_VAR 0 7
2946: PPUSH
2947: LD_VAR 0 8
2951: PPUSH
2952: CALL_OW 488
2956: NOT
2957: IFFALSE 2961
// continue ;
2959: GO 2893
// if HexInfo ( _x , _y ) = 0 then
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_VAR 0 8
2970: PPUSH
2971: CALL_OW 428
2975: PUSH
2976: LD_INT 0
2978: EQUAL
2979: IFFALSE 3004
// begin ComMoveXY ( unit , _x , _y ) ;
2981: LD_VAR 0 1
2985: PPUSH
2986: LD_VAR 0 7
2990: PPUSH
2991: LD_VAR 0 8
2995: PPUSH
2996: CALL_OW 111
// exit ;
3000: POP
3001: POP
3002: GO 3008
// end ; end ;
3004: GO 2893
3006: POP
3007: POP
// end ;
3008: LD_VAR 0 3
3012: RET
// export function ScanBase ( side , base_area ) ; begin
3013: LD_INT 0
3015: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_INT 81
3028: PUSH
3029: LD_VAR 0 1
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PPUSH
3038: CALL_OW 70
3042: ST_TO_ADDR
// end ;
3043: LD_VAR 0 3
3047: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3048: LD_INT 0
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
// result := false ;
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: LD_INT 0
3061: ST_TO_ADDR
// side := GetSide ( unit ) ;
3062: LD_ADDR_VAR 0 3
3066: PUSH
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 255
3076: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3077: LD_ADDR_VAR 0 4
3081: PUSH
3082: LD_VAR 0 1
3086: PPUSH
3087: CALL_OW 248
3091: ST_TO_ADDR
// case nat of 1 :
3092: LD_VAR 0 4
3096: PUSH
3097: LD_INT 1
3099: DOUBLE
3100: EQUAL
3101: IFTRUE 3105
3103: GO 3116
3105: POP
// tech := tech_lassight ; 2 :
3106: LD_ADDR_VAR 0 5
3110: PUSH
3111: LD_INT 12
3113: ST_TO_ADDR
3114: GO 3155
3116: LD_INT 2
3118: DOUBLE
3119: EQUAL
3120: IFTRUE 3124
3122: GO 3135
3124: POP
// tech := tech_mortar ; 3 :
3125: LD_ADDR_VAR 0 5
3129: PUSH
3130: LD_INT 41
3132: ST_TO_ADDR
3133: GO 3155
3135: LD_INT 3
3137: DOUBLE
3138: EQUAL
3139: IFTRUE 3143
3141: GO 3154
3143: POP
// tech := tech_bazooka ; end ;
3144: LD_ADDR_VAR 0 5
3148: PUSH
3149: LD_INT 44
3151: ST_TO_ADDR
3152: GO 3155
3154: POP
// if Researched ( side , tech ) then
3155: LD_VAR 0 3
3159: PPUSH
3160: LD_VAR 0 5
3164: PPUSH
3165: CALL_OW 325
3169: IFFALSE 3196
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3171: LD_ADDR_VAR 0 2
3175: PUSH
3176: LD_INT 5
3178: PUSH
3179: LD_INT 8
3181: PUSH
3182: LD_INT 9
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_VAR 0 4
3194: ARRAY
3195: ST_TO_ADDR
// end ;
3196: LD_VAR 0 2
3200: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3201: LD_INT 0
3203: PPUSH
3204: PPUSH
3205: PPUSH
// if not mines then
3206: LD_VAR 0 2
3210: NOT
3211: IFFALSE 3215
// exit ;
3213: GO 3359
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3215: LD_ADDR_VAR 0 5
3219: PUSH
3220: LD_INT 81
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 3
3234: PUSH
3235: LD_INT 21
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PPUSH
3253: CALL_OW 69
3257: ST_TO_ADDR
// for i in mines do
3258: LD_ADDR_VAR 0 4
3262: PUSH
3263: LD_VAR 0 2
3267: PUSH
3268: FOR_IN
3269: IFFALSE 3357
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3271: LD_VAR 0 4
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: PPUSH
3280: LD_VAR 0 4
3284: PUSH
3285: LD_INT 2
3287: ARRAY
3288: PPUSH
3289: CALL_OW 458
3293: NOT
3294: IFFALSE 3298
// continue ;
3296: GO 3268
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3298: LD_VAR 0 4
3302: PUSH
3303: LD_INT 1
3305: ARRAY
3306: PPUSH
3307: LD_VAR 0 4
3311: PUSH
3312: LD_INT 2
3314: ARRAY
3315: PPUSH
3316: CALL_OW 428
3320: PUSH
3321: LD_VAR 0 5
3325: IN
3326: IFFALSE 3355
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3328: LD_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: ARRAY
3336: PPUSH
3337: LD_VAR 0 4
3341: PUSH
3342: LD_INT 2
3344: ARRAY
3345: PPUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 456
// end ;
3355: GO 3268
3357: POP
3358: POP
// end ;
3359: LD_VAR 0 3
3363: RET
// export function Count ( array ) ; begin
3364: LD_INT 0
3366: PPUSH
// result := array + 0 ;
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: LD_VAR 0 1
3376: PUSH
3377: LD_INT 0
3379: PLUS
3380: ST_TO_ADDR
// end ;
3381: LD_VAR 0 2
3385: RET
// export function IsEmpty ( building ) ; begin
3386: LD_INT 0
3388: PPUSH
// if not building then
3389: LD_VAR 0 1
3393: NOT
3394: IFFALSE 3398
// exit ;
3396: GO 3441
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: LD_VAR 0 1
3407: PUSH
3408: LD_INT 22
3410: PUSH
3411: LD_VAR 0 1
3415: PPUSH
3416: CALL_OW 255
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PUSH
3425: LD_INT 58
3427: PUSH
3428: EMPTY
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: IN
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 2
3445: RET
// export function IsNotFull ( building ) ; var places ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// if not building then
3450: LD_VAR 0 1
3454: NOT
3455: IFFALSE 3459
// exit ;
3457: GO 3487
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 3
3471: PUSH
3472: LD_INT 62
3474: PUSH
3475: EMPTY
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 72
3486: ST_TO_ADDR
// end ;
3487: LD_VAR 0 2
3491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3492: LD_INT 0
3494: PPUSH
3495: PPUSH
3496: PPUSH
3497: PPUSH
// tmp := [ ] ;
3498: LD_ADDR_VAR 0 3
3502: PUSH
3503: EMPTY
3504: ST_TO_ADDR
// list := [ ] ;
3505: LD_ADDR_VAR 0 5
3509: PUSH
3510: EMPTY
3511: ST_TO_ADDR
// for i = 16 to 25 do
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: DOUBLE
3518: LD_INT 16
3520: DEC
3521: ST_TO_ADDR
3522: LD_INT 25
3524: PUSH
3525: FOR_TO
3526: IFFALSE 3599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_INT 22
3540: PUSH
3541: LD_VAR 0 1
3545: PPUSH
3546: CALL_OW 255
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 91
3557: PUSH
3558: LD_VAR 0 1
3562: PUSH
3563: LD_INT 6
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 30
3573: PUSH
3574: LD_VAR 0 4
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: EMPTY
3589: LIST
3590: PPUSH
3591: CALL_OW 69
3595: ADD
3596: ST_TO_ADDR
3597: GO 3525
3599: POP
3600: POP
// for i = 1 to tmp do
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 3
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3619: LD_ADDR_VAR 0 5
3623: PUSH
3624: LD_VAR 0 5
3628: PUSH
3629: LD_VAR 0 3
3633: PUSH
3634: LD_VAR 0 4
3638: ARRAY
3639: PPUSH
3640: CALL_OW 266
3644: PUSH
3645: LD_VAR 0 3
3649: PUSH
3650: LD_VAR 0 4
3654: ARRAY
3655: PPUSH
3656: CALL_OW 250
3660: PUSH
3661: LD_VAR 0 3
3665: PUSH
3666: LD_VAR 0 4
3670: ARRAY
3671: PPUSH
3672: CALL_OW 251
3676: PUSH
3677: LD_VAR 0 3
3681: PUSH
3682: LD_VAR 0 4
3686: ARRAY
3687: PPUSH
3688: CALL_OW 254
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: EMPTY
3700: LIST
3701: ADD
3702: ST_TO_ADDR
3703: GO 3616
3705: POP
3706: POP
// result := list ;
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 5
3716: ST_TO_ADDR
// end ;
3717: LD_VAR 0 2
3721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3722: LD_INT 0
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
// if not factory then
3731: LD_VAR 0 1
3735: NOT
3736: IFFALSE 3740
// exit ;
3738: GO 4343
// if control = control_apeman then
3740: LD_VAR 0 4
3744: PUSH
3745: LD_INT 5
3747: EQUAL
3748: IFFALSE 3857
// begin tmp := UnitsInside ( factory ) ;
3750: LD_ADDR_VAR 0 8
3754: PUSH
3755: LD_VAR 0 1
3759: PPUSH
3760: CALL_OW 313
3764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3765: LD_VAR 0 8
3769: PPUSH
3770: LD_INT 25
3772: PUSH
3773: LD_INT 12
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 72
3784: NOT
3785: IFFALSE 3795
// control := control_manual ;
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3795: LD_ADDR_VAR 0 8
3799: PUSH
3800: LD_VAR 0 1
3804: PPUSH
3805: CALL 3492 0 1
3809: ST_TO_ADDR
// if tmp then
3810: LD_VAR 0 8
3814: IFFALSE 3857
// begin for i in tmp do
3816: LD_ADDR_VAR 0 7
3820: PUSH
3821: LD_VAR 0 8
3825: PUSH
3826: FOR_IN
3827: IFFALSE 3855
// if i [ 1 ] = b_ext_radio then
3829: LD_VAR 0 7
3833: PUSH
3834: LD_INT 1
3836: ARRAY
3837: PUSH
3838: LD_INT 22
3840: EQUAL
3841: IFFALSE 3853
// begin control := control_remote ;
3843: LD_ADDR_VAR 0 4
3847: PUSH
3848: LD_INT 2
3850: ST_TO_ADDR
// break ;
3851: GO 3855
// end ;
3853: GO 3826
3855: POP
3856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3857: LD_VAR 0 1
3861: PPUSH
3862: LD_VAR 0 2
3866: PPUSH
3867: LD_VAR 0 3
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: LD_VAR 0 5
3881: PPUSH
3882: CALL_OW 448
3886: IFFALSE 3921
// begin result := [ chassis , engine , control , weapon ] ;
3888: LD_ADDR_VAR 0 6
3892: PUSH
3893: LD_VAR 0 2
3897: PUSH
3898: LD_VAR 0 3
3902: PUSH
3903: LD_VAR 0 4
3907: PUSH
3908: LD_VAR 0 5
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: ST_TO_ADDR
// exit ;
3919: GO 4343
// end ; _chassis := AvailableChassisList ( factory ) ;
3921: LD_ADDR_VAR 0 9
3925: PUSH
3926: LD_VAR 0 1
3930: PPUSH
3931: CALL_OW 475
3935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3936: LD_ADDR_VAR 0 11
3940: PUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 476
3950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3951: LD_ADDR_VAR 0 12
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 477
3965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3966: LD_ADDR_VAR 0 10
3970: PUSH
3971: LD_VAR 0 1
3975: PPUSH
3976: CALL_OW 478
3980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3981: LD_VAR 0 9
3985: NOT
3986: IFTRUE 3995
3988: PUSH
3989: LD_VAR 0 11
3993: NOT
3994: OR
3995: IFTRUE 4004
3997: PUSH
3998: LD_VAR 0 12
4002: NOT
4003: OR
4004: IFTRUE 4013
4006: PUSH
4007: LD_VAR 0 10
4011: NOT
4012: OR
4013: IFFALSE 4048
// begin result := [ chassis , engine , control , weapon ] ;
4015: LD_ADDR_VAR 0 6
4019: PUSH
4020: LD_VAR 0 2
4024: PUSH
4025: LD_VAR 0 3
4029: PUSH
4030: LD_VAR 0 4
4034: PUSH
4035: LD_VAR 0 5
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: ST_TO_ADDR
// exit ;
4046: GO 4343
// end ; if not chassis in _chassis then
4048: LD_VAR 0 2
4052: PUSH
4053: LD_VAR 0 9
4057: IN
4058: NOT
4059: IFFALSE 4085
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4061: LD_ADDR_VAR 0 2
4065: PUSH
4066: LD_VAR 0 9
4070: PUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_VAR 0 9
4078: PPUSH
4079: CALL_OW 12
4083: ARRAY
4084: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4085: LD_VAR 0 2
4089: PPUSH
4090: LD_VAR 0 3
4094: PPUSH
4095: CALL 4348 0 2
4099: NOT
4100: IFFALSE 4161
// repeat engine := _engine [ 1 ] ;
4102: LD_ADDR_VAR 0 3
4106: PUSH
4107: LD_VAR 0 11
4111: PUSH
4112: LD_INT 1
4114: ARRAY
4115: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4116: LD_ADDR_VAR 0 11
4120: PUSH
4121: LD_VAR 0 11
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: CALL_OW 3
4133: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4134: LD_VAR 0 2
4138: PPUSH
4139: LD_VAR 0 3
4143: PPUSH
4144: CALL 4348 0 2
4148: IFTRUE 4159
4150: PUSH
4151: LD_VAR 0 11
4155: PUSH
4156: EMPTY
4157: EQUAL
4158: OR
4159: IFFALSE 4102
// if not control in _control then
4161: LD_VAR 0 4
4165: PUSH
4166: LD_VAR 0 12
4170: IN
4171: NOT
4172: IFFALSE 4198
// control := _control [ rand ( 1 , _control ) ] ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_VAR 0 12
4183: PUSH
4184: LD_INT 1
4186: PPUSH
4187: LD_VAR 0 12
4191: PPUSH
4192: CALL_OW 12
4196: ARRAY
4197: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4198: LD_VAR 0 2
4202: PPUSH
4203: LD_VAR 0 5
4207: PPUSH
4208: CALL 4570 0 2
4212: NOT
4213: IFFALSE 4274
// repeat weapon := _weapon [ 1 ] ;
4215: LD_ADDR_VAR 0 5
4219: PUSH
4220: LD_VAR 0 10
4224: PUSH
4225: LD_INT 1
4227: ARRAY
4228: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4229: LD_ADDR_VAR 0 10
4233: PUSH
4234: LD_VAR 0 10
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL_OW 3
4246: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4247: LD_VAR 0 2
4251: PPUSH
4252: LD_VAR 0 5
4256: PPUSH
4257: CALL 4570 0 2
4261: IFTRUE 4272
4263: PUSH
4264: LD_VAR 0 10
4268: PUSH
4269: EMPTY
4270: EQUAL
4271: OR
4272: IFFALSE 4215
// result := [ ] ;
4274: LD_ADDR_VAR 0 6
4278: PUSH
4279: EMPTY
4280: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_VAR 0 2
4290: PPUSH
4291: LD_VAR 0 3
4295: PPUSH
4296: LD_VAR 0 4
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: CALL_OW 448
4310: IFFALSE 4343
// result := [ chassis , engine , control , weapon ] ;
4312: LD_ADDR_VAR 0 6
4316: PUSH
4317: LD_VAR 0 2
4321: PUSH
4322: LD_VAR 0 3
4326: PUSH
4327: LD_VAR 0 4
4331: PUSH
4332: LD_VAR 0 5
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: ST_TO_ADDR
// end ;
4343: LD_VAR 0 6
4347: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4348: LD_INT 0
4350: PPUSH
// if not chassis or not engine then
4351: LD_VAR 0 1
4355: NOT
4356: IFTRUE 4365
4358: PUSH
4359: LD_VAR 0 2
4363: NOT
4364: OR
4365: IFFALSE 4369
// exit ;
4367: GO 4565
// case engine of engine_solar :
4369: LD_VAR 0 2
4373: PUSH
4374: LD_INT 2
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4420
4382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_INT 11
4390: PUSH
4391: LD_INT 12
4393: PUSH
4394: LD_INT 13
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: ST_TO_ADDR
4418: GO 4549
4420: LD_INT 1
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4490
4428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 11
4436: PUSH
4437: LD_INT 12
4439: PUSH
4440: LD_INT 13
4442: PUSH
4443: LD_INT 14
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 5
4460: PUSH
4461: LD_INT 21
4463: PUSH
4464: LD_INT 23
4466: PUSH
4467: LD_INT 22
4469: PUSH
4470: LD_INT 24
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: ST_TO_ADDR
4488: GO 4549
4490: LD_INT 3
4492: DOUBLE
4493: EQUAL
4494: IFTRUE 4498
4496: GO 4548
4498: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4499: LD_ADDR_VAR 0 3
4503: PUSH
4504: LD_INT 13
4506: PUSH
4507: LD_INT 14
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 3
4515: PUSH
4516: LD_INT 4
4518: PUSH
4519: LD_INT 5
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 23
4530: PUSH
4531: LD_INT 24
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
4546: GO 4549
4548: POP
// result := ( chassis in result ) ;
4549: LD_ADDR_VAR 0 3
4553: PUSH
4554: LD_VAR 0 1
4558: PUSH
4559: LD_VAR 0 3
4563: IN
4564: ST_TO_ADDR
// end ;
4565: LD_VAR 0 3
4569: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4570: LD_INT 0
4572: PPUSH
// if not chassis or not weapon then
4573: LD_VAR 0 1
4577: NOT
4578: IFTRUE 4587
4580: PUSH
4581: LD_VAR 0 2
4585: NOT
4586: OR
4587: IFFALSE 4591
// exit ;
4589: GO 5651
// case weapon of us_machine_gun :
4591: LD_VAR 0 2
4595: PUSH
4596: LD_INT 2
4598: DOUBLE
4599: EQUAL
4600: IFTRUE 4604
4602: GO 4634
4604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: LD_INT 1
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 3
4618: PUSH
4619: LD_INT 4
4621: PUSH
4622: LD_INT 5
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: ST_TO_ADDR
4632: GO 5635
4634: LD_INT 3
4636: DOUBLE
4637: EQUAL
4638: IFTRUE 4642
4640: GO 4672
4642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4643: LD_ADDR_VAR 0 3
4647: PUSH
4648: LD_INT 1
4650: PUSH
4651: LD_INT 2
4653: PUSH
4654: LD_INT 3
4656: PUSH
4657: LD_INT 4
4659: PUSH
4660: LD_INT 5
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: ST_TO_ADDR
4670: GO 5635
4672: LD_INT 11
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4680
4678: GO 4710
4680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4681: LD_ADDR_VAR 0 3
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 2
4691: PUSH
4692: LD_INT 3
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 5
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: ST_TO_ADDR
4708: GO 5635
4710: LD_INT 4
4712: DOUBLE
4713: EQUAL
4714: IFTRUE 4718
4716: GO 4744
4718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4719: LD_ADDR_VAR 0 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: ST_TO_ADDR
4742: GO 5635
4744: LD_INT 5
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4778
4752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 4
4766: PUSH
4767: LD_INT 5
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: ST_TO_ADDR
4776: GO 5635
4778: LD_INT 9
4780: DOUBLE
4781: EQUAL
4782: IFTRUE 4786
4784: GO 4812
4786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 2
4794: PUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 4
4800: PUSH
4801: LD_INT 5
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: ST_TO_ADDR
4810: GO 5635
4812: LD_INT 7
4814: DOUBLE
4815: EQUAL
4816: IFTRUE 4820
4818: GO 4846
4820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4821: LD_ADDR_VAR 0 3
4825: PUSH
4826: LD_INT 2
4828: PUSH
4829: LD_INT 3
4831: PUSH
4832: LD_INT 4
4834: PUSH
4835: LD_INT 5
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: ST_TO_ADDR
4844: GO 5635
4846: LD_INT 12
4848: DOUBLE
4849: EQUAL
4850: IFTRUE 4854
4852: GO 4880
4854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 2
4862: PUSH
4863: LD_INT 3
4865: PUSH
4866: LD_INT 4
4868: PUSH
4869: LD_INT 5
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: ST_TO_ADDR
4878: GO 5635
4880: LD_INT 13
4882: DOUBLE
4883: EQUAL
4884: IFTRUE 4888
4886: GO 4914
4888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_INT 2
4896: PUSH
4897: LD_INT 3
4899: PUSH
4900: LD_INT 4
4902: PUSH
4903: LD_INT 5
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: ST_TO_ADDR
4912: GO 5635
4914: LD_INT 14
4916: DOUBLE
4917: EQUAL
4918: IFTRUE 4922
4920: GO 4940
4922: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4923: LD_ADDR_VAR 0 3
4927: PUSH
4928: LD_INT 4
4930: PUSH
4931: LD_INT 5
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: ST_TO_ADDR
4938: GO 5635
4940: LD_INT 6
4942: DOUBLE
4943: EQUAL
4944: IFTRUE 4948
4946: GO 4966
4948: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: LD_INT 5
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: ST_TO_ADDR
4964: GO 5635
4966: LD_INT 10
4968: DOUBLE
4969: EQUAL
4970: IFTRUE 4974
4972: GO 4992
4974: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4975: LD_ADDR_VAR 0 3
4979: PUSH
4980: LD_INT 4
4982: PUSH
4983: LD_INT 5
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: ST_TO_ADDR
4990: GO 5635
4992: LD_INT 22
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5026
5000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: LD_INT 11
5008: PUSH
5009: LD_INT 12
5011: PUSH
5012: LD_INT 13
5014: PUSH
5015: LD_INT 14
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: ST_TO_ADDR
5024: GO 5635
5026: LD_INT 23
5028: DOUBLE
5029: EQUAL
5030: IFTRUE 5034
5032: GO 5060
5034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: LD_INT 11
5042: PUSH
5043: LD_INT 12
5045: PUSH
5046: LD_INT 13
5048: PUSH
5049: LD_INT 14
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: ST_TO_ADDR
5058: GO 5635
5060: LD_INT 24
5062: DOUBLE
5063: EQUAL
5064: IFTRUE 5068
5066: GO 5094
5068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_INT 11
5076: PUSH
5077: LD_INT 12
5079: PUSH
5080: LD_INT 13
5082: PUSH
5083: LD_INT 14
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: ST_TO_ADDR
5092: GO 5635
5094: LD_INT 30
5096: DOUBLE
5097: EQUAL
5098: IFTRUE 5102
5100: GO 5128
5102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5103: LD_ADDR_VAR 0 3
5107: PUSH
5108: LD_INT 11
5110: PUSH
5111: LD_INT 12
5113: PUSH
5114: LD_INT 13
5116: PUSH
5117: LD_INT 14
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: ST_TO_ADDR
5126: GO 5635
5128: LD_INT 25
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5136
5134: GO 5154
5136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5137: LD_ADDR_VAR 0 3
5141: PUSH
5142: LD_INT 13
5144: PUSH
5145: LD_INT 14
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: ST_TO_ADDR
5152: GO 5635
5154: LD_INT 27
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5162
5160: GO 5180
5162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_INT 13
5170: PUSH
5171: LD_INT 14
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: ST_TO_ADDR
5178: GO 5635
5180: LD_INT 92
5182: DOUBLE
5183: EQUAL
5184: IFTRUE 5188
5186: GO 5214
5188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: LD_INT 11
5196: PUSH
5197: LD_INT 12
5199: PUSH
5200: LD_INT 13
5202: PUSH
5203: LD_INT 14
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: ST_TO_ADDR
5212: GO 5635
5214: LD_INT 28
5216: DOUBLE
5217: EQUAL
5218: IFTRUE 5222
5220: GO 5240
5222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: LD_INT 13
5230: PUSH
5231: LD_INT 14
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: ST_TO_ADDR
5238: GO 5635
5240: LD_INT 29
5242: DOUBLE
5243: EQUAL
5244: IFTRUE 5248
5246: GO 5266
5248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5249: LD_ADDR_VAR 0 3
5253: PUSH
5254: LD_INT 13
5256: PUSH
5257: LD_INT 14
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: ST_TO_ADDR
5264: GO 5635
5266: LD_INT 31
5268: DOUBLE
5269: EQUAL
5270: IFTRUE 5274
5272: GO 5292
5274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5275: LD_ADDR_VAR 0 3
5279: PUSH
5280: LD_INT 13
5282: PUSH
5283: LD_INT 14
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: ST_TO_ADDR
5290: GO 5635
5292: LD_INT 26
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5300
5298: GO 5318
5300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5301: LD_ADDR_VAR 0 3
5305: PUSH
5306: LD_INT 13
5308: PUSH
5309: LD_INT 14
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: ST_TO_ADDR
5316: GO 5635
5318: LD_INT 42
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5352
5326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 22
5337: PUSH
5338: LD_INT 23
5340: PUSH
5341: LD_INT 24
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: ST_TO_ADDR
5350: GO 5635
5352: LD_INT 43
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5386
5360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 22
5371: PUSH
5372: LD_INT 23
5374: PUSH
5375: LD_INT 24
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: ST_TO_ADDR
5384: GO 5635
5386: LD_INT 44
5388: DOUBLE
5389: EQUAL
5390: IFTRUE 5394
5392: GO 5420
5394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 23
5408: PUSH
5409: LD_INT 24
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: ST_TO_ADDR
5418: GO 5635
5420: LD_INT 45
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5454
5428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_INT 21
5436: PUSH
5437: LD_INT 22
5439: PUSH
5440: LD_INT 23
5442: PUSH
5443: LD_INT 24
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: ST_TO_ADDR
5452: GO 5635
5454: LD_INT 49
5456: DOUBLE
5457: EQUAL
5458: IFTRUE 5462
5460: GO 5488
5462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_INT 21
5470: PUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 23
5476: PUSH
5477: LD_INT 24
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: ST_TO_ADDR
5486: GO 5635
5488: LD_INT 51
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5496
5494: GO 5522
5496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5497: LD_ADDR_VAR 0 3
5501: PUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 22
5507: PUSH
5508: LD_INT 23
5510: PUSH
5511: LD_INT 24
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: ST_TO_ADDR
5520: GO 5635
5522: LD_INT 52
5524: DOUBLE
5525: EQUAL
5526: IFTRUE 5530
5528: GO 5556
5530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5531: LD_ADDR_VAR 0 3
5535: PUSH
5536: LD_INT 21
5538: PUSH
5539: LD_INT 22
5541: PUSH
5542: LD_INT 23
5544: PUSH
5545: LD_INT 24
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
5554: GO 5635
5556: LD_INT 53
5558: DOUBLE
5559: EQUAL
5560: IFTRUE 5564
5562: GO 5582
5564: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5565: LD_ADDR_VAR 0 3
5569: PUSH
5570: LD_INT 23
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: ST_TO_ADDR
5580: GO 5635
5582: LD_INT 46
5584: DOUBLE
5585: EQUAL
5586: IFTRUE 5590
5588: GO 5608
5590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5591: LD_ADDR_VAR 0 3
5595: PUSH
5596: LD_INT 23
5598: PUSH
5599: LD_INT 24
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: ST_TO_ADDR
5606: GO 5635
5608: LD_INT 47
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5616
5614: GO 5634
5616: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_INT 23
5624: PUSH
5625: LD_INT 24
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: ST_TO_ADDR
5632: GO 5635
5634: POP
// result := ( chassis in result ) ;
5635: LD_ADDR_VAR 0 3
5639: PUSH
5640: LD_VAR 0 1
5644: PUSH
5645: LD_VAR 0 3
5649: IN
5650: ST_TO_ADDR
// end ;
5651: LD_VAR 0 3
5655: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5656: LD_INT 0
5658: PPUSH
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
5663: PPUSH
5664: PPUSH
// result := array ;
5665: LD_ADDR_VAR 0 5
5669: PUSH
5670: LD_VAR 0 1
5674: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5675: LD_VAR 0 1
5679: NOT
5680: IFTRUE 5689
5682: PUSH
5683: LD_VAR 0 2
5687: NOT
5688: OR
5689: IFTRUE 5698
5691: PUSH
5692: LD_VAR 0 3
5696: NOT
5697: OR
5698: IFTRUE 5712
5700: PUSH
5701: LD_VAR 0 2
5705: PUSH
5706: LD_VAR 0 1
5710: GREATER
5711: OR
5712: IFTRUE 5726
5714: PUSH
5715: LD_VAR 0 3
5719: PUSH
5720: LD_VAR 0 1
5724: GREATER
5725: OR
5726: IFFALSE 5730
// exit ;
5728: GO 6026
// if direction then
5730: LD_VAR 0 4
5734: IFFALSE 5798
// begin d := 1 ;
5736: LD_ADDR_VAR 0 9
5740: PUSH
5741: LD_INT 1
5743: ST_TO_ADDR
// if i_from > i_to then
5744: LD_VAR 0 2
5748: PUSH
5749: LD_VAR 0 3
5753: GREATER
5754: IFFALSE 5780
// length := ( array - i_from ) + i_to else
5756: LD_ADDR_VAR 0 11
5760: PUSH
5761: LD_VAR 0 1
5765: PUSH
5766: LD_VAR 0 2
5770: MINUS
5771: PUSH
5772: LD_VAR 0 3
5776: PLUS
5777: ST_TO_ADDR
5778: GO 5796
// length := i_to - i_from ;
5780: LD_ADDR_VAR 0 11
5784: PUSH
5785: LD_VAR 0 3
5789: PUSH
5790: LD_VAR 0 2
5794: MINUS
5795: ST_TO_ADDR
// end else
5796: GO 5859
// begin d := - 1 ;
5798: LD_ADDR_VAR 0 9
5802: PUSH
5803: LD_INT 1
5805: NEG
5806: ST_TO_ADDR
// if i_from > i_to then
5807: LD_VAR 0 2
5811: PUSH
5812: LD_VAR 0 3
5816: GREATER
5817: IFFALSE 5837
// length := i_from - i_to else
5819: LD_ADDR_VAR 0 11
5823: PUSH
5824: LD_VAR 0 2
5828: PUSH
5829: LD_VAR 0 3
5833: MINUS
5834: ST_TO_ADDR
5835: GO 5859
// length := ( array - i_to ) + i_from ;
5837: LD_ADDR_VAR 0 11
5841: PUSH
5842: LD_VAR 0 1
5846: PUSH
5847: LD_VAR 0 3
5851: MINUS
5852: PUSH
5853: LD_VAR 0 2
5857: PLUS
5858: ST_TO_ADDR
// end ; if not length then
5859: LD_VAR 0 11
5863: NOT
5864: IFFALSE 5868
// exit ;
5866: GO 6026
// tmp := array ;
5868: LD_ADDR_VAR 0 10
5872: PUSH
5873: LD_VAR 0 1
5877: ST_TO_ADDR
// for i = 1 to length do
5878: LD_ADDR_VAR 0 6
5882: PUSH
5883: DOUBLE
5884: LD_INT 1
5886: DEC
5887: ST_TO_ADDR
5888: LD_VAR 0 11
5892: PUSH
5893: FOR_TO
5894: IFFALSE 6014
// begin for j = 1 to array do
5896: LD_ADDR_VAR 0 7
5900: PUSH
5901: DOUBLE
5902: LD_INT 1
5904: DEC
5905: ST_TO_ADDR
5906: LD_VAR 0 1
5910: PUSH
5911: FOR_TO
5912: IFFALSE 6000
// begin k := j + d ;
5914: LD_ADDR_VAR 0 8
5918: PUSH
5919: LD_VAR 0 7
5923: PUSH
5924: LD_VAR 0 9
5928: PLUS
5929: ST_TO_ADDR
// if k > array then
5930: LD_VAR 0 8
5934: PUSH
5935: LD_VAR 0 1
5939: GREATER
5940: IFFALSE 5950
// k := 1 ;
5942: LD_ADDR_VAR 0 8
5946: PUSH
5947: LD_INT 1
5949: ST_TO_ADDR
// if not k then
5950: LD_VAR 0 8
5954: NOT
5955: IFFALSE 5967
// k := array ;
5957: LD_ADDR_VAR 0 8
5961: PUSH
5962: LD_VAR 0 1
5966: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5967: LD_ADDR_VAR 0 10
5971: PUSH
5972: LD_VAR 0 10
5976: PPUSH
5977: LD_VAR 0 8
5981: PPUSH
5982: LD_VAR 0 1
5986: PUSH
5987: LD_VAR 0 7
5991: ARRAY
5992: PPUSH
5993: CALL_OW 1
5997: ST_TO_ADDR
// end ;
5998: GO 5911
6000: POP
6001: POP
// array := tmp ;
6002: LD_ADDR_VAR 0 1
6006: PUSH
6007: LD_VAR 0 10
6011: ST_TO_ADDR
// end ;
6012: GO 5893
6014: POP
6015: POP
// result := array ;
6016: LD_ADDR_VAR 0 5
6020: PUSH
6021: LD_VAR 0 1
6025: ST_TO_ADDR
// end ;
6026: LD_VAR 0 5
6030: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6031: LD_INT 0
6033: PPUSH
6034: PPUSH
// result := 0 ;
6035: LD_ADDR_VAR 0 3
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// if not array or not value in array then
6043: LD_VAR 0 1
6047: NOT
6048: IFTRUE 6063
6050: PUSH
6051: LD_VAR 0 2
6055: PUSH
6056: LD_VAR 0 1
6060: IN
6061: NOT
6062: OR
6063: IFFALSE 6067
// exit ;
6065: GO 6121
// for i = 1 to array do
6067: LD_ADDR_VAR 0 4
6071: PUSH
6072: DOUBLE
6073: LD_INT 1
6075: DEC
6076: ST_TO_ADDR
6077: LD_VAR 0 1
6081: PUSH
6082: FOR_TO
6083: IFFALSE 6119
// if value = array [ i ] then
6085: LD_VAR 0 2
6089: PUSH
6090: LD_VAR 0 1
6094: PUSH
6095: LD_VAR 0 4
6099: ARRAY
6100: EQUAL
6101: IFFALSE 6117
// begin result := i ;
6103: LD_ADDR_VAR 0 3
6107: PUSH
6108: LD_VAR 0 4
6112: ST_TO_ADDR
// exit ;
6113: POP
6114: POP
6115: GO 6121
// end ;
6117: GO 6082
6119: POP
6120: POP
// end ;
6121: LD_VAR 0 3
6125: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6126: LD_INT 0
6128: PPUSH
// vc_chassis := chassis ;
6129: LD_ADDR_OWVAR 37
6133: PUSH
6134: LD_VAR 0 1
6138: ST_TO_ADDR
// vc_engine := engine ;
6139: LD_ADDR_OWVAR 39
6143: PUSH
6144: LD_VAR 0 2
6148: ST_TO_ADDR
// vc_control := control ;
6149: LD_ADDR_OWVAR 38
6153: PUSH
6154: LD_VAR 0 3
6158: ST_TO_ADDR
// vc_weapon := weapon ;
6159: LD_ADDR_OWVAR 40
6163: PUSH
6164: LD_VAR 0 4
6168: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6169: LD_ADDR_OWVAR 41
6173: PUSH
6174: LD_VAR 0 5
6178: ST_TO_ADDR
// end ;
6179: LD_VAR 0 6
6183: RET
// export function WantPlant ( unit ) ; var task ; begin
6184: LD_INT 0
6186: PPUSH
6187: PPUSH
// result := false ;
6188: LD_ADDR_VAR 0 2
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6196: LD_ADDR_VAR 0 3
6200: PUSH
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL_OW 437
6210: ST_TO_ADDR
// if task then
6211: LD_VAR 0 3
6215: IFFALSE 6243
// if task [ 1 ] [ 1 ] = p then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PUSH
6226: LD_INT 1
6228: ARRAY
6229: PUSH
6230: LD_STRING p
6232: EQUAL
6233: IFFALSE 6243
// result := true ;
6235: LD_ADDR_VAR 0 2
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// end ;
6243: LD_VAR 0 2
6247: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6248: LD_INT 0
6250: PPUSH
6251: PPUSH
6252: PPUSH
6253: PPUSH
// if pos < 1 then
6254: LD_VAR 0 2
6258: PUSH
6259: LD_INT 1
6261: LESS
6262: IFFALSE 6266
// exit ;
6264: GO 6569
// if pos = 1 then
6266: LD_VAR 0 2
6270: PUSH
6271: LD_INT 1
6273: EQUAL
6274: IFFALSE 6307
// result := Replace ( arr , pos [ 1 ] , value ) else
6276: LD_ADDR_VAR 0 4
6280: PUSH
6281: LD_VAR 0 1
6285: PPUSH
6286: LD_VAR 0 2
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: LD_VAR 0 3
6299: PPUSH
6300: CALL_OW 1
6304: ST_TO_ADDR
6305: GO 6569
// begin tmp := arr ;
6307: LD_ADDR_VAR 0 6
6311: PUSH
6312: LD_VAR 0 1
6316: ST_TO_ADDR
// s_arr := [ tmp ] ;
6317: LD_ADDR_VAR 0 7
6321: PUSH
6322: LD_VAR 0 6
6326: PUSH
6327: EMPTY
6328: LIST
6329: ST_TO_ADDR
// for i = 1 to pos - 1 do
6330: LD_ADDR_VAR 0 5
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_VAR 0 2
6344: PUSH
6345: LD_INT 1
6347: MINUS
6348: PUSH
6349: FOR_TO
6350: IFFALSE 6395
// begin tmp := tmp [ pos [ i ] ] ;
6352: LD_ADDR_VAR 0 6
6356: PUSH
6357: LD_VAR 0 6
6361: PUSH
6362: LD_VAR 0 2
6366: PUSH
6367: LD_VAR 0 5
6371: ARRAY
6372: ARRAY
6373: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6374: LD_ADDR_VAR 0 7
6378: PUSH
6379: LD_VAR 0 7
6383: PUSH
6384: LD_VAR 0 6
6388: PUSH
6389: EMPTY
6390: LIST
6391: ADD
6392: ST_TO_ADDR
// end ;
6393: GO 6349
6395: POP
6396: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6397: LD_ADDR_VAR 0 6
6401: PUSH
6402: LD_VAR 0 6
6406: PPUSH
6407: LD_VAR 0 2
6411: PUSH
6412: LD_VAR 0 2
6416: ARRAY
6417: PPUSH
6418: LD_VAR 0 3
6422: PPUSH
6423: CALL_OW 1
6427: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6428: LD_ADDR_VAR 0 7
6432: PUSH
6433: LD_VAR 0 7
6437: PPUSH
6438: LD_VAR 0 7
6442: PPUSH
6443: LD_VAR 0 6
6447: PPUSH
6448: CALL_OW 1
6452: ST_TO_ADDR
// for i = s_arr downto 2 do
6453: LD_ADDR_VAR 0 5
6457: PUSH
6458: DOUBLE
6459: LD_VAR 0 7
6463: INC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_DOWNTO
6469: IFFALSE 6553
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6471: LD_ADDR_VAR 0 6
6475: PUSH
6476: LD_VAR 0 7
6480: PUSH
6481: LD_VAR 0 5
6485: PUSH
6486: LD_INT 1
6488: MINUS
6489: ARRAY
6490: PPUSH
6491: LD_VAR 0 2
6495: PUSH
6496: LD_VAR 0 5
6500: PUSH
6501: LD_INT 1
6503: MINUS
6504: ARRAY
6505: PPUSH
6506: LD_VAR 0 7
6510: PUSH
6511: LD_VAR 0 5
6515: ARRAY
6516: PPUSH
6517: CALL_OW 1
6521: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6522: LD_ADDR_VAR 0 7
6526: PUSH
6527: LD_VAR 0 7
6531: PPUSH
6532: LD_VAR 0 5
6536: PUSH
6537: LD_INT 1
6539: MINUS
6540: PPUSH
6541: LD_VAR 0 6
6545: PPUSH
6546: CALL_OW 1
6550: ST_TO_ADDR
// end ;
6551: GO 6468
6553: POP
6554: POP
// result := s_arr [ 1 ] ;
6555: LD_ADDR_VAR 0 4
6559: PUSH
6560: LD_VAR 0 7
6564: PUSH
6565: LD_INT 1
6567: ARRAY
6568: ST_TO_ADDR
// end ; end ;
6569: LD_VAR 0 4
6573: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
// if not list then
6578: LD_VAR 0 1
6582: NOT
6583: IFFALSE 6587
// exit ;
6585: GO 6678
// i := list [ pos1 ] ;
6587: LD_ADDR_VAR 0 5
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: LD_VAR 0 2
6601: ARRAY
6602: ST_TO_ADDR
// if not i then
6603: LD_VAR 0 5
6607: NOT
6608: IFFALSE 6612
// exit ;
6610: GO 6678
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6612: LD_ADDR_VAR 0 1
6616: PUSH
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_VAR 0 2
6626: PPUSH
6627: LD_VAR 0 1
6631: PUSH
6632: LD_VAR 0 3
6636: ARRAY
6637: PPUSH
6638: CALL_OW 1
6642: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6643: LD_ADDR_VAR 0 1
6647: PUSH
6648: LD_VAR 0 1
6652: PPUSH
6653: LD_VAR 0 3
6657: PPUSH
6658: LD_VAR 0 5
6662: PPUSH
6663: CALL_OW 1
6667: ST_TO_ADDR
// result := list ;
6668: LD_ADDR_VAR 0 4
6672: PUSH
6673: LD_VAR 0 1
6677: ST_TO_ADDR
// end ;
6678: LD_VAR 0 4
6682: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6683: LD_INT 0
6685: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 250
6700: PPUSH
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL_OW 251
6710: PPUSH
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 3
6720: PPUSH
6721: LD_VAR 0 4
6725: PPUSH
6726: CALL 7108 0 5
6730: ST_TO_ADDR
// end ;
6731: LD_VAR 0 5
6735: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6736: LD_INT 0
6738: PPUSH
6739: PPUSH
6740: PPUSH
6741: PPUSH
// if not list or not unit then
6742: LD_VAR 0 2
6746: NOT
6747: IFTRUE 6756
6749: PUSH
6750: LD_VAR 0 1
6754: NOT
6755: OR
6756: IFFALSE 6760
// exit ;
6758: GO 7103
// result := [ ] ;
6760: LD_ADDR_VAR 0 5
6764: PUSH
6765: EMPTY
6766: ST_TO_ADDR
// for i in list do
6767: LD_ADDR_VAR 0 6
6771: PUSH
6772: LD_VAR 0 2
6776: PUSH
6777: FOR_IN
6778: IFFALSE 6996
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6780: LD_ADDR_VAR 0 8
6784: PUSH
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 6
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: LD_VAR 0 6
6803: PUSH
6804: LD_INT 2
6806: ARRAY
6807: PPUSH
6808: CALL_OW 297
6812: ST_TO_ADDR
// if not Count ( result ) then
6813: LD_VAR 0 5
6817: PPUSH
6818: CALL 3364 0 1
6822: NOT
6823: IFFALSE 6856
// begin result := Join ( result , [ i , tmp ] ) ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_VAR 0 6
6839: PUSH
6840: LD_VAR 0 8
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL 39296 0 2
6853: ST_TO_ADDR
// continue ;
6854: GO 6777
// end ; if result [ result ] [ 2 ] <= tmp then
6856: LD_VAR 0 5
6860: PUSH
6861: LD_VAR 0 5
6865: ARRAY
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PUSH
6871: LD_VAR 0 8
6875: LESSEQUAL
6876: IFFALSE 6909
// result := Join ( result , [ i , tmp ] ) else
6878: LD_ADDR_VAR 0 5
6882: PUSH
6883: LD_VAR 0 5
6887: PPUSH
6888: LD_VAR 0 6
6892: PUSH
6893: LD_VAR 0 8
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL 39296 0 2
6906: ST_TO_ADDR
6907: GO 6994
// begin for j := 1 to Count ( result ) do
6909: LD_ADDR_VAR 0 7
6913: PUSH
6914: DOUBLE
6915: LD_INT 1
6917: DEC
6918: ST_TO_ADDR
6919: LD_VAR 0 5
6923: PPUSH
6924: CALL 3364 0 1
6928: PUSH
6929: FOR_TO
6930: IFFALSE 6992
// begin if tmp < result [ j ] [ 2 ] then
6932: LD_VAR 0 8
6936: PUSH
6937: LD_VAR 0 5
6941: PUSH
6942: LD_VAR 0 7
6946: ARRAY
6947: PUSH
6948: LD_INT 2
6950: ARRAY
6951: LESS
6952: IFFALSE 6990
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6954: LD_ADDR_VAR 0 5
6958: PUSH
6959: LD_VAR 0 5
6963: PPUSH
6964: LD_VAR 0 7
6968: PPUSH
6969: LD_VAR 0 6
6973: PUSH
6974: LD_VAR 0 8
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 2
6987: ST_TO_ADDR
// break ;
6988: GO 6992
// end ; end ;
6990: GO 6929
6992: POP
6993: POP
// end ; end ;
6994: GO 6777
6996: POP
6997: POP
// if result and not asc then
6998: LD_VAR 0 5
7002: IFFALSE 7011
7004: PUSH
7005: LD_VAR 0 3
7009: NOT
7010: AND
7011: IFFALSE 7028
// result := ReverseArray ( result ) ;
7013: LD_ADDR_VAR 0 5
7017: PUSH
7018: LD_VAR 0 5
7022: PPUSH
7023: CALL 34386 0 1
7027: ST_TO_ADDR
// tmp := [ ] ;
7028: LD_ADDR_VAR 0 8
7032: PUSH
7033: EMPTY
7034: ST_TO_ADDR
// if mode then
7035: LD_VAR 0 4
7039: IFFALSE 7103
// begin for i := 1 to result do
7041: LD_ADDR_VAR 0 6
7045: PUSH
7046: DOUBLE
7047: LD_INT 1
7049: DEC
7050: ST_TO_ADDR
7051: LD_VAR 0 5
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7091
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7059: LD_ADDR_VAR 0 8
7063: PUSH
7064: LD_VAR 0 8
7068: PPUSH
7069: LD_VAR 0 5
7073: PUSH
7074: LD_VAR 0 6
7078: ARRAY
7079: PUSH
7080: LD_INT 1
7082: ARRAY
7083: PPUSH
7084: CALL 39296 0 2
7088: ST_TO_ADDR
7089: GO 7056
7091: POP
7092: POP
// result := tmp ;
7093: LD_ADDR_VAR 0 5
7097: PUSH
7098: LD_VAR 0 8
7102: ST_TO_ADDR
// end ; end ;
7103: LD_VAR 0 5
7107: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7108: LD_INT 0
7110: PPUSH
7111: PPUSH
7112: PPUSH
7113: PPUSH
// if not list then
7114: LD_VAR 0 3
7118: NOT
7119: IFFALSE 7123
// exit ;
7121: GO 7513
// result := [ ] ;
7123: LD_ADDR_VAR 0 6
7127: PUSH
7128: EMPTY
7129: ST_TO_ADDR
// for i in list do
7130: LD_ADDR_VAR 0 7
7134: PUSH
7135: LD_VAR 0 3
7139: PUSH
7140: FOR_IN
7141: IFFALSE 7343
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7143: LD_ADDR_VAR 0 9
7147: PUSH
7148: LD_VAR 0 7
7152: PPUSH
7153: LD_VAR 0 1
7157: PPUSH
7158: LD_VAR 0 2
7162: PPUSH
7163: CALL_OW 297
7167: ST_TO_ADDR
// if not result then
7168: LD_VAR 0 6
7172: NOT
7173: IFFALSE 7199
// result := [ [ i , tmp ] ] else
7175: LD_ADDR_VAR 0 6
7179: PUSH
7180: LD_VAR 0 7
7184: PUSH
7185: LD_VAR 0 9
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: ST_TO_ADDR
7197: GO 7341
// begin if result [ result ] [ 2 ] <= tmp then
7199: LD_VAR 0 6
7203: PUSH
7204: LD_VAR 0 6
7208: ARRAY
7209: PUSH
7210: LD_INT 2
7212: ARRAY
7213: PUSH
7214: LD_VAR 0 9
7218: LESSEQUAL
7219: IFFALSE 7261
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7221: LD_ADDR_VAR 0 6
7225: PUSH
7226: LD_VAR 0 6
7230: PPUSH
7231: LD_VAR 0 6
7235: PUSH
7236: LD_INT 1
7238: PLUS
7239: PPUSH
7240: LD_VAR 0 7
7244: PUSH
7245: LD_VAR 0 9
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 2
7258: ST_TO_ADDR
7259: GO 7341
// for j := 1 to result do
7261: LD_ADDR_VAR 0 8
7265: PUSH
7266: DOUBLE
7267: LD_INT 1
7269: DEC
7270: ST_TO_ADDR
7271: LD_VAR 0 6
7275: PUSH
7276: FOR_TO
7277: IFFALSE 7339
// begin if tmp < result [ j ] [ 2 ] then
7279: LD_VAR 0 9
7283: PUSH
7284: LD_VAR 0 6
7288: PUSH
7289: LD_VAR 0 8
7293: ARRAY
7294: PUSH
7295: LD_INT 2
7297: ARRAY
7298: LESS
7299: IFFALSE 7337
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7301: LD_ADDR_VAR 0 6
7305: PUSH
7306: LD_VAR 0 6
7310: PPUSH
7311: LD_VAR 0 8
7315: PPUSH
7316: LD_VAR 0 7
7320: PUSH
7321: LD_VAR 0 9
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PPUSH
7330: CALL_OW 2
7334: ST_TO_ADDR
// break ;
7335: GO 7339
// end ; end ;
7337: GO 7276
7339: POP
7340: POP
// end ; end ;
7341: GO 7140
7343: POP
7344: POP
// if result and not asc then
7345: LD_VAR 0 6
7349: IFFALSE 7358
7351: PUSH
7352: LD_VAR 0 4
7356: NOT
7357: AND
7358: IFFALSE 7433
// begin tmp := result ;
7360: LD_ADDR_VAR 0 9
7364: PUSH
7365: LD_VAR 0 6
7369: ST_TO_ADDR
// for i = tmp downto 1 do
7370: LD_ADDR_VAR 0 7
7374: PUSH
7375: DOUBLE
7376: LD_VAR 0 9
7380: INC
7381: ST_TO_ADDR
7382: LD_INT 1
7384: PUSH
7385: FOR_DOWNTO
7386: IFFALSE 7431
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7388: LD_ADDR_VAR 0 6
7392: PUSH
7393: LD_VAR 0 6
7397: PPUSH
7398: LD_VAR 0 9
7402: PUSH
7403: LD_VAR 0 7
7407: MINUS
7408: PUSH
7409: LD_INT 1
7411: PLUS
7412: PPUSH
7413: LD_VAR 0 9
7417: PUSH
7418: LD_VAR 0 7
7422: ARRAY
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
7429: GO 7385
7431: POP
7432: POP
// end ; tmp := [ ] ;
7433: LD_ADDR_VAR 0 9
7437: PUSH
7438: EMPTY
7439: ST_TO_ADDR
// if mode then
7440: LD_VAR 0 5
7444: IFFALSE 7513
// begin for i = 1 to result do
7446: LD_ADDR_VAR 0 7
7450: PUSH
7451: DOUBLE
7452: LD_INT 1
7454: DEC
7455: ST_TO_ADDR
7456: LD_VAR 0 6
7460: PUSH
7461: FOR_TO
7462: IFFALSE 7501
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7464: LD_ADDR_VAR 0 9
7468: PUSH
7469: LD_VAR 0 9
7473: PPUSH
7474: LD_VAR 0 7
7478: PPUSH
7479: LD_VAR 0 6
7483: PUSH
7484: LD_VAR 0 7
7488: ARRAY
7489: PUSH
7490: LD_INT 1
7492: ARRAY
7493: PPUSH
7494: CALL_OW 1
7498: ST_TO_ADDR
7499: GO 7461
7501: POP
7502: POP
// result := tmp ;
7503: LD_ADDR_VAR 0 6
7507: PUSH
7508: LD_VAR 0 9
7512: ST_TO_ADDR
// end ; end ;
7513: LD_VAR 0 6
7517: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7518: LD_INT 0
7520: PPUSH
7521: PPUSH
7522: PPUSH
7523: PPUSH
7524: PPUSH
7525: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7526: LD_ADDR_VAR 0 5
7530: PUSH
7531: LD_INT 0
7533: PUSH
7534: LD_INT 0
7536: PUSH
7537: LD_INT 0
7539: PUSH
7540: EMPTY
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: ST_TO_ADDR
// if not x or not y then
7548: LD_VAR 0 2
7552: NOT
7553: IFTRUE 7562
7555: PUSH
7556: LD_VAR 0 3
7560: NOT
7561: OR
7562: IFFALSE 7566
// exit ;
7564: GO 9222
// if not range then
7566: LD_VAR 0 4
7570: NOT
7571: IFFALSE 7581
// range := 10 ;
7573: LD_ADDR_VAR 0 4
7577: PUSH
7578: LD_INT 10
7580: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7581: LD_ADDR_VAR 0 8
7585: PUSH
7586: LD_INT 81
7588: PUSH
7589: LD_VAR 0 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 92
7600: PUSH
7601: LD_VAR 0 2
7605: PUSH
7606: LD_VAR 0 3
7610: PUSH
7611: LD_VAR 0 4
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 3
7624: PUSH
7625: LD_INT 21
7627: PUSH
7628: LD_INT 3
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: PPUSH
7644: CALL_OW 69
7648: ST_TO_ADDR
// if not tmp then
7649: LD_VAR 0 8
7653: NOT
7654: IFFALSE 7658
// exit ;
7656: GO 9222
// for i in tmp do
7658: LD_ADDR_VAR 0 6
7662: PUSH
7663: LD_VAR 0 8
7667: PUSH
7668: FOR_IN
7669: IFFALSE 9197
// begin points := [ 0 , 0 , 0 ] ;
7671: LD_ADDR_VAR 0 9
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: LD_INT 0
7681: PUSH
7682: LD_INT 0
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: ST_TO_ADDR
// bpoints := 1 ;
7690: LD_ADDR_VAR 0 10
7694: PUSH
7695: LD_INT 1
7697: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7698: LD_VAR 0 6
7702: PPUSH
7703: CALL_OW 247
7707: PUSH
7708: LD_INT 1
7710: DOUBLE
7711: EQUAL
7712: IFTRUE 7716
7714: GO 8298
7716: POP
// begin if GetClass ( i ) = 1 then
7717: LD_VAR 0 6
7721: PPUSH
7722: CALL_OW 257
7726: PUSH
7727: LD_INT 1
7729: EQUAL
7730: IFFALSE 7751
// points := [ 10 , 5 , 3 ] ;
7732: LD_ADDR_VAR 0 9
7736: PUSH
7737: LD_INT 10
7739: PUSH
7740: LD_INT 5
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7751: LD_VAR 0 6
7755: PPUSH
7756: CALL_OW 257
7760: PUSH
7761: LD_INT 2
7763: PUSH
7764: LD_INT 3
7766: PUSH
7767: LD_INT 4
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: IN
7775: IFFALSE 7796
// points := [ 3 , 2 , 1 ] ;
7777: LD_ADDR_VAR 0 9
7781: PUSH
7782: LD_INT 3
7784: PUSH
7785: LD_INT 2
7787: PUSH
7788: LD_INT 1
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7796: LD_VAR 0 6
7800: PPUSH
7801: CALL_OW 257
7805: PUSH
7806: LD_INT 5
7808: EQUAL
7809: IFFALSE 7830
// points := [ 130 , 5 , 2 ] ;
7811: LD_ADDR_VAR 0 9
7815: PUSH
7816: LD_INT 130
7818: PUSH
7819: LD_INT 5
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7830: LD_VAR 0 6
7834: PPUSH
7835: CALL_OW 257
7839: PUSH
7840: LD_INT 8
7842: EQUAL
7843: IFFALSE 7864
// points := [ 35 , 35 , 30 ] ;
7845: LD_ADDR_VAR 0 9
7849: PUSH
7850: LD_INT 35
7852: PUSH
7853: LD_INT 35
7855: PUSH
7856: LD_INT 30
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7864: LD_VAR 0 6
7868: PPUSH
7869: CALL_OW 257
7873: PUSH
7874: LD_INT 9
7876: EQUAL
7877: IFFALSE 7898
// points := [ 20 , 55 , 40 ] ;
7879: LD_ADDR_VAR 0 9
7883: PUSH
7884: LD_INT 20
7886: PUSH
7887: LD_INT 55
7889: PUSH
7890: LD_INT 40
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7898: LD_VAR 0 6
7902: PPUSH
7903: CALL_OW 257
7907: PUSH
7908: LD_INT 12
7910: PUSH
7911: LD_INT 16
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: IN
7918: IFFALSE 7939
// points := [ 5 , 3 , 2 ] ;
7920: LD_ADDR_VAR 0 9
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7939: LD_VAR 0 6
7943: PPUSH
7944: CALL_OW 257
7948: PUSH
7949: LD_INT 17
7951: EQUAL
7952: IFFALSE 7973
// points := [ 100 , 50 , 75 ] ;
7954: LD_ADDR_VAR 0 9
7958: PUSH
7959: LD_INT 100
7961: PUSH
7962: LD_INT 50
7964: PUSH
7965: LD_INT 75
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7973: LD_VAR 0 6
7977: PPUSH
7978: CALL_OW 257
7982: PUSH
7983: LD_INT 15
7985: EQUAL
7986: IFFALSE 8007
// points := [ 10 , 5 , 3 ] ;
7988: LD_ADDR_VAR 0 9
7992: PUSH
7993: LD_INT 10
7995: PUSH
7996: LD_INT 5
7998: PUSH
7999: LD_INT 3
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8007: LD_VAR 0 6
8011: PPUSH
8012: CALL_OW 257
8016: PUSH
8017: LD_INT 14
8019: EQUAL
8020: IFFALSE 8041
// points := [ 10 , 0 , 0 ] ;
8022: LD_ADDR_VAR 0 9
8026: PUSH
8027: LD_INT 10
8029: PUSH
8030: LD_INT 0
8032: PUSH
8033: LD_INT 0
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: LIST
8040: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8041: LD_VAR 0 6
8045: PPUSH
8046: CALL_OW 257
8050: PUSH
8051: LD_INT 11
8053: EQUAL
8054: IFFALSE 8075
// points := [ 30 , 10 , 5 ] ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_INT 30
8063: PUSH
8064: LD_INT 10
8066: PUSH
8067: LD_INT 5
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 5
8082: PPUSH
8083: CALL_OW 321
8087: PUSH
8088: LD_INT 2
8090: EQUAL
8091: IFFALSE 8108
// bpoints := bpoints * 1.8 ;
8093: LD_ADDR_VAR 0 10
8097: PUSH
8098: LD_VAR 0 10
8102: PUSH
8103: LD_REAL  1.80000000000000E+0000
8106: MUL
8107: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8108: LD_VAR 0 6
8112: PPUSH
8113: CALL_OW 257
8117: PUSH
8118: LD_INT 1
8120: PUSH
8121: LD_INT 2
8123: PUSH
8124: LD_INT 3
8126: PUSH
8127: LD_INT 4
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: IN
8136: IFFALSE 8156
8138: PUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_INT 51
8146: PPUSH
8147: CALL_OW 321
8151: PUSH
8152: LD_INT 2
8154: EQUAL
8155: AND
8156: IFFALSE 8173
// bpoints := bpoints * 1.2 ;
8158: LD_ADDR_VAR 0 10
8162: PUSH
8163: LD_VAR 0 10
8167: PUSH
8168: LD_REAL  1.20000000000000E+0000
8171: MUL
8172: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8173: LD_VAR 0 6
8177: PPUSH
8178: CALL_OW 257
8182: PUSH
8183: LD_INT 5
8185: PUSH
8186: LD_INT 7
8188: PUSH
8189: LD_INT 9
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: IN
8197: IFFALSE 8217
8199: PUSH
8200: LD_VAR 0 1
8204: PPUSH
8205: LD_INT 52
8207: PPUSH
8208: CALL_OW 321
8212: PUSH
8213: LD_INT 2
8215: EQUAL
8216: AND
8217: IFFALSE 8234
// bpoints := bpoints * 1.5 ;
8219: LD_ADDR_VAR 0 10
8223: PUSH
8224: LD_VAR 0 10
8228: PUSH
8229: LD_REAL  1.50000000000000E+0000
8232: MUL
8233: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 66
8241: PPUSH
8242: CALL_OW 321
8246: PUSH
8247: LD_INT 2
8249: EQUAL
8250: IFFALSE 8267
// bpoints := bpoints * 1.1 ;
8252: LD_ADDR_VAR 0 10
8256: PUSH
8257: LD_VAR 0 10
8261: PUSH
8262: LD_REAL  1.10000000000000E+0000
8265: MUL
8266: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8267: LD_ADDR_VAR 0 10
8271: PUSH
8272: LD_VAR 0 10
8276: PUSH
8277: LD_VAR 0 6
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: CALL_OW 259
8289: PUSH
8290: LD_REAL  1.15000000000000E+0000
8293: MUL
8294: MUL
8295: ST_TO_ADDR
// end ; unit_vehicle :
8296: GO 9126
8298: LD_INT 2
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8306
8304: GO 9114
8306: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8307: LD_VAR 0 6
8311: PPUSH
8312: CALL_OW 264
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 42
8322: PUSH
8323: LD_INT 24
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: IN
8331: IFFALSE 8352
// points := [ 25 , 5 , 3 ] ;
8333: LD_ADDR_VAR 0 9
8337: PUSH
8338: LD_INT 25
8340: PUSH
8341: LD_INT 5
8343: PUSH
8344: LD_INT 3
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8352: LD_VAR 0 6
8356: PPUSH
8357: CALL_OW 264
8361: PUSH
8362: LD_INT 4
8364: PUSH
8365: LD_INT 43
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: IN
8376: IFFALSE 8397
// points := [ 40 , 15 , 5 ] ;
8378: LD_ADDR_VAR 0 9
8382: PUSH
8383: LD_INT 40
8385: PUSH
8386: LD_INT 15
8388: PUSH
8389: LD_INT 5
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: LIST
8396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8397: LD_VAR 0 6
8401: PPUSH
8402: CALL_OW 264
8406: PUSH
8407: LD_INT 3
8409: PUSH
8410: LD_INT 23
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: IN
8417: IFFALSE 8438
// points := [ 7 , 25 , 8 ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 7
8426: PUSH
8427: LD_INT 25
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8438: LD_VAR 0 6
8442: PPUSH
8443: CALL_OW 264
8447: PUSH
8448: LD_INT 5
8450: PUSH
8451: LD_INT 27
8453: PUSH
8454: LD_INT 44
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: IN
8462: IFFALSE 8483
// points := [ 14 , 50 , 16 ] ;
8464: LD_ADDR_VAR 0 9
8468: PUSH
8469: LD_INT 14
8471: PUSH
8472: LD_INT 50
8474: PUSH
8475: LD_INT 16
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8483: LD_VAR 0 6
8487: PPUSH
8488: CALL_OW 264
8492: PUSH
8493: LD_INT 6
8495: PUSH
8496: LD_INT 46
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: IN
8503: IFFALSE 8524
// points := [ 32 , 120 , 70 ] ;
8505: LD_ADDR_VAR 0 9
8509: PUSH
8510: LD_INT 32
8512: PUSH
8513: LD_INT 120
8515: PUSH
8516: LD_INT 70
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8524: LD_VAR 0 6
8528: PPUSH
8529: CALL_OW 264
8533: PUSH
8534: LD_INT 7
8536: PUSH
8537: LD_INT 28
8539: PUSH
8540: LD_INT 45
8542: PUSH
8543: LD_INT 92
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: IN
8552: IFFALSE 8573
// points := [ 35 , 20 , 45 ] ;
8554: LD_ADDR_VAR 0 9
8558: PUSH
8559: LD_INT 35
8561: PUSH
8562: LD_INT 20
8564: PUSH
8565: LD_INT 45
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8573: LD_VAR 0 6
8577: PPUSH
8578: CALL_OW 264
8582: PUSH
8583: LD_INT 47
8585: PUSH
8586: EMPTY
8587: LIST
8588: IN
8589: IFFALSE 8610
// points := [ 67 , 45 , 75 ] ;
8591: LD_ADDR_VAR 0 9
8595: PUSH
8596: LD_INT 67
8598: PUSH
8599: LD_INT 45
8601: PUSH
8602: LD_INT 75
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8610: LD_VAR 0 6
8614: PPUSH
8615: CALL_OW 264
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: EMPTY
8624: LIST
8625: IN
8626: IFFALSE 8647
// points := [ 120 , 30 , 80 ] ;
8628: LD_ADDR_VAR 0 9
8632: PUSH
8633: LD_INT 120
8635: PUSH
8636: LD_INT 30
8638: PUSH
8639: LD_INT 80
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8647: LD_VAR 0 6
8651: PPUSH
8652: CALL_OW 264
8656: PUSH
8657: LD_INT 22
8659: PUSH
8660: EMPTY
8661: LIST
8662: IN
8663: IFFALSE 8684
// points := [ 40 , 1 , 1 ] ;
8665: LD_ADDR_VAR 0 9
8669: PUSH
8670: LD_INT 40
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 1
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8684: LD_VAR 0 6
8688: PPUSH
8689: CALL_OW 264
8693: PUSH
8694: LD_INT 29
8696: PUSH
8697: EMPTY
8698: LIST
8699: IN
8700: IFFALSE 8721
// points := [ 70 , 200 , 400 ] ;
8702: LD_ADDR_VAR 0 9
8706: PUSH
8707: LD_INT 70
8709: PUSH
8710: LD_INT 200
8712: PUSH
8713: LD_INT 400
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8721: LD_VAR 0 6
8725: PPUSH
8726: CALL_OW 264
8730: PUSH
8731: LD_INT 14
8733: PUSH
8734: LD_INT 53
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: IN
8741: IFFALSE 8762
// points := [ 40 , 10 , 20 ] ;
8743: LD_ADDR_VAR 0 9
8747: PUSH
8748: LD_INT 40
8750: PUSH
8751: LD_INT 10
8753: PUSH
8754: LD_INT 20
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8762: LD_VAR 0 6
8766: PPUSH
8767: CALL_OW 264
8771: PUSH
8772: LD_INT 9
8774: PUSH
8775: EMPTY
8776: LIST
8777: IN
8778: IFFALSE 8799
// points := [ 5 , 70 , 20 ] ;
8780: LD_ADDR_VAR 0 9
8784: PUSH
8785: LD_INT 5
8787: PUSH
8788: LD_INT 70
8790: PUSH
8791: LD_INT 20
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8799: LD_VAR 0 6
8803: PPUSH
8804: CALL_OW 264
8808: PUSH
8809: LD_INT 10
8811: PUSH
8812: EMPTY
8813: LIST
8814: IN
8815: IFFALSE 8836
// points := [ 35 , 110 , 70 ] ;
8817: LD_ADDR_VAR 0 9
8821: PUSH
8822: LD_INT 35
8824: PUSH
8825: LD_INT 110
8827: PUSH
8828: LD_INT 70
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8836: LD_VAR 0 6
8840: PPUSH
8841: CALL_OW 265
8845: PUSH
8846: LD_INT 25
8848: EQUAL
8849: IFFALSE 8870
// points := [ 80 , 65 , 100 ] ;
8851: LD_ADDR_VAR 0 9
8855: PUSH
8856: LD_INT 80
8858: PUSH
8859: LD_INT 65
8861: PUSH
8862: LD_INT 100
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8870: LD_VAR 0 6
8874: PPUSH
8875: CALL_OW 263
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 8918
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8885: LD_ADDR_VAR 0 10
8889: PUSH
8890: LD_VAR 0 10
8894: PUSH
8895: LD_VAR 0 6
8899: PPUSH
8900: CALL_OW 311
8904: PPUSH
8905: LD_INT 3
8907: PPUSH
8908: CALL_OW 259
8912: PUSH
8913: LD_INT 4
8915: MUL
8916: MUL
8917: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8918: LD_VAR 0 6
8922: PPUSH
8923: CALL_OW 263
8927: PUSH
8928: LD_INT 2
8930: EQUAL
8931: IFFALSE 8982
// begin j := IsControledBy ( i ) ;
8933: LD_ADDR_VAR 0 7
8937: PUSH
8938: LD_VAR 0 6
8942: PPUSH
8943: CALL_OW 312
8947: ST_TO_ADDR
// if j then
8948: LD_VAR 0 7
8952: IFFALSE 8982
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8954: LD_ADDR_VAR 0 10
8958: PUSH
8959: LD_VAR 0 10
8963: PUSH
8964: LD_VAR 0 7
8968: PPUSH
8969: LD_INT 3
8971: PPUSH
8972: CALL_OW 259
8976: PUSH
8977: LD_INT 3
8979: MUL
8980: MUL
8981: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8982: LD_VAR 0 6
8986: PPUSH
8987: CALL_OW 264
8991: PUSH
8992: LD_INT 5
8994: PUSH
8995: LD_INT 6
8997: PUSH
8998: LD_INT 46
9000: PUSH
9001: LD_INT 44
9003: PUSH
9004: LD_INT 47
9006: PUSH
9007: LD_INT 45
9009: PUSH
9010: LD_INT 28
9012: PUSH
9013: LD_INT 7
9015: PUSH
9016: LD_INT 27
9018: PUSH
9019: LD_INT 29
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: IN
9034: IFFALSE 9054
9036: PUSH
9037: LD_VAR 0 1
9041: PPUSH
9042: LD_INT 52
9044: PPUSH
9045: CALL_OW 321
9049: PUSH
9050: LD_INT 2
9052: EQUAL
9053: AND
9054: IFFALSE 9071
// bpoints := bpoints * 1.2 ;
9056: LD_ADDR_VAR 0 10
9060: PUSH
9061: LD_VAR 0 10
9065: PUSH
9066: LD_REAL  1.20000000000000E+0000
9069: MUL
9070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9071: LD_VAR 0 6
9075: PPUSH
9076: CALL_OW 264
9080: PUSH
9081: LD_INT 6
9083: PUSH
9084: LD_INT 46
9086: PUSH
9087: LD_INT 47
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: IN
9095: IFFALSE 9112
// bpoints := bpoints * 1.2 ;
9097: LD_ADDR_VAR 0 10
9101: PUSH
9102: LD_VAR 0 10
9106: PUSH
9107: LD_REAL  1.20000000000000E+0000
9110: MUL
9111: ST_TO_ADDR
// end ; unit_building :
9112: GO 9126
9114: LD_INT 3
9116: DOUBLE
9117: EQUAL
9118: IFTRUE 9122
9120: GO 9125
9122: POP
// ; end ;
9123: GO 9126
9125: POP
// for j = 1 to 3 do
9126: LD_ADDR_VAR 0 7
9130: PUSH
9131: DOUBLE
9132: LD_INT 1
9134: DEC
9135: ST_TO_ADDR
9136: LD_INT 3
9138: PUSH
9139: FOR_TO
9140: IFFALSE 9193
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_VAR 0 5
9151: PPUSH
9152: LD_VAR 0 7
9156: PPUSH
9157: LD_VAR 0 5
9161: PUSH
9162: LD_VAR 0 7
9166: ARRAY
9167: PUSH
9168: LD_VAR 0 9
9172: PUSH
9173: LD_VAR 0 7
9177: ARRAY
9178: PUSH
9179: LD_VAR 0 10
9183: MUL
9184: PLUS
9185: PPUSH
9186: CALL_OW 1
9190: ST_TO_ADDR
9191: GO 9139
9193: POP
9194: POP
// end ;
9195: GO 7668
9197: POP
9198: POP
// result := Replace ( result , 4 , tmp ) ;
9199: LD_ADDR_VAR 0 5
9203: PUSH
9204: LD_VAR 0 5
9208: PPUSH
9209: LD_INT 4
9211: PPUSH
9212: LD_VAR 0 8
9216: PPUSH
9217: CALL_OW 1
9221: ST_TO_ADDR
// end ;
9222: LD_VAR 0 5
9226: RET
// export function DangerAtRange ( unit , range ) ; begin
9227: LD_INT 0
9229: PPUSH
// if not unit then
9230: LD_VAR 0 1
9234: NOT
9235: IFFALSE 9239
// exit ;
9237: GO 9284
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9239: LD_ADDR_VAR 0 3
9243: PUSH
9244: LD_VAR 0 1
9248: PPUSH
9249: CALL_OW 255
9253: PPUSH
9254: LD_VAR 0 1
9258: PPUSH
9259: CALL_OW 250
9263: PPUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 251
9273: PPUSH
9274: LD_VAR 0 2
9278: PPUSH
9279: CALL 7518 0 4
9283: ST_TO_ADDR
// end ;
9284: LD_VAR 0 3
9288: RET
// export function DangerInArea ( side , area ) ; begin
9289: LD_INT 0
9291: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9292: LD_ADDR_VAR 0 3
9296: PUSH
9297: LD_VAR 0 2
9301: PPUSH
9302: LD_INT 81
9304: PUSH
9305: LD_VAR 0 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 70
9318: ST_TO_ADDR
// end ;
9319: LD_VAR 0 3
9323: RET
// export function IsExtension ( b ) ; begin
9324: LD_INT 0
9326: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9327: LD_ADDR_VAR 0 2
9331: PUSH
9332: LD_VAR 0 1
9336: PUSH
9337: LD_INT 23
9339: PUSH
9340: LD_INT 20
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 17
9348: PUSH
9349: LD_INT 24
9351: PUSH
9352: LD_INT 21
9354: PUSH
9355: LD_INT 19
9357: PUSH
9358: LD_INT 16
9360: PUSH
9361: LD_INT 25
9363: PUSH
9364: LD_INT 18
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: IN
9379: ST_TO_ADDR
// end ;
9380: LD_VAR 0 2
9384: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9385: LD_INT 0
9387: PPUSH
9388: PPUSH
9389: PPUSH
// result := [ ] ;
9390: LD_ADDR_VAR 0 4
9394: PUSH
9395: EMPTY
9396: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9397: LD_ADDR_VAR 0 5
9401: PUSH
9402: LD_VAR 0 2
9406: PPUSH
9407: LD_INT 21
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PPUSH
9417: CALL_OW 70
9421: ST_TO_ADDR
// if not tmp then
9422: LD_VAR 0 5
9426: NOT
9427: IFFALSE 9431
// exit ;
9429: GO 9495
// if checkLink then
9431: LD_VAR 0 3
9435: IFFALSE 9485
// begin for i in tmp do
9437: LD_ADDR_VAR 0 6
9441: PUSH
9442: LD_VAR 0 5
9446: PUSH
9447: FOR_IN
9448: IFFALSE 9483
// if GetBase ( i ) <> base then
9450: LD_VAR 0 6
9454: PPUSH
9455: CALL_OW 274
9459: PUSH
9460: LD_VAR 0 1
9464: NONEQUAL
9465: IFFALSE 9481
// ComLinkToBase ( base , i ) ;
9467: LD_VAR 0 1
9471: PPUSH
9472: LD_VAR 0 6
9476: PPUSH
9477: CALL_OW 169
9481: GO 9447
9483: POP
9484: POP
// end ; result := tmp ;
9485: LD_ADDR_VAR 0 4
9489: PUSH
9490: LD_VAR 0 5
9494: ST_TO_ADDR
// end ;
9495: LD_VAR 0 4
9499: RET
// export function ComComplete ( units , b ) ; var i ; begin
9500: LD_INT 0
9502: PPUSH
9503: PPUSH
// if not units then
9504: LD_VAR 0 1
9508: NOT
9509: IFFALSE 9513
// exit ;
9511: GO 9603
// for i in units do
9513: LD_ADDR_VAR 0 4
9517: PUSH
9518: LD_VAR 0 1
9522: PUSH
9523: FOR_IN
9524: IFFALSE 9601
// if BuildingStatus ( b ) = bs_build then
9526: LD_VAR 0 2
9530: PPUSH
9531: CALL_OW 461
9535: PUSH
9536: LD_INT 1
9538: EQUAL
9539: IFFALSE 9599
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9541: LD_VAR 0 4
9545: PPUSH
9546: LD_STRING h
9548: PUSH
9549: LD_VAR 0 2
9553: PPUSH
9554: CALL_OW 250
9558: PUSH
9559: LD_VAR 0 2
9563: PPUSH
9564: CALL_OW 251
9568: PUSH
9569: LD_VAR 0 2
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: LD_INT 0
9579: PUSH
9580: LD_INT 0
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: PUSH
9592: EMPTY
9593: LIST
9594: PPUSH
9595: CALL_OW 446
9599: GO 9523
9601: POP
9602: POP
// end ;
9603: LD_VAR 0 3
9607: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9608: LD_INT 0
9610: PPUSH
9611: PPUSH
9612: PPUSH
9613: PPUSH
9614: PPUSH
9615: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9616: LD_VAR 0 1
9620: NOT
9621: IFTRUE 9638
9623: PUSH
9624: LD_VAR 0 1
9628: PPUSH
9629: CALL_OW 263
9633: PUSH
9634: LD_INT 2
9636: NONEQUAL
9637: OR
9638: IFFALSE 9642
// exit ;
9640: GO 9958
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9642: LD_ADDR_VAR 0 6
9646: PUSH
9647: LD_INT 22
9649: PUSH
9650: LD_VAR 0 1
9654: PPUSH
9655: CALL_OW 255
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 30
9669: PUSH
9670: LD_INT 36
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 34
9679: PUSH
9680: LD_INT 31
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PPUSH
9696: CALL_OW 69
9700: ST_TO_ADDR
// if not tmp then
9701: LD_VAR 0 6
9705: NOT
9706: IFFALSE 9710
// exit ;
9708: GO 9958
// result := [ ] ;
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: EMPTY
9716: ST_TO_ADDR
// for i in tmp do
9717: LD_ADDR_VAR 0 3
9721: PUSH
9722: LD_VAR 0 6
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9799
// begin t := UnitsInside ( i ) ;
9730: LD_ADDR_VAR 0 4
9734: PUSH
9735: LD_VAR 0 3
9739: PPUSH
9740: CALL_OW 313
9744: ST_TO_ADDR
// if t then
9745: LD_VAR 0 4
9749: IFFALSE 9797
// for j in t do
9751: LD_ADDR_VAR 0 7
9755: PUSH
9756: LD_VAR 0 4
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9795
// result := Replace ( result , result + 1 , j ) ;
9764: LD_ADDR_VAR 0 2
9768: PUSH
9769: LD_VAR 0 2
9773: PPUSH
9774: LD_VAR 0 2
9778: PUSH
9779: LD_INT 1
9781: PLUS
9782: PPUSH
9783: LD_VAR 0 7
9787: PPUSH
9788: CALL_OW 1
9792: ST_TO_ADDR
9793: GO 9761
9795: POP
9796: POP
// end ;
9797: GO 9727
9799: POP
9800: POP
// if not result then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9810
// exit ;
9808: GO 9958
// mech := result [ 1 ] ;
9810: LD_ADDR_VAR 0 5
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: LD_INT 1
9822: ARRAY
9823: ST_TO_ADDR
// if result > 1 then
9824: LD_VAR 0 2
9828: PUSH
9829: LD_INT 1
9831: GREATER
9832: IFFALSE 9944
// begin for i = 2 to result do
9834: LD_ADDR_VAR 0 3
9838: PUSH
9839: DOUBLE
9840: LD_INT 2
9842: DEC
9843: ST_TO_ADDR
9844: LD_VAR 0 2
9848: PUSH
9849: FOR_TO
9850: IFFALSE 9942
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9852: LD_ADDR_VAR 0 4
9856: PUSH
9857: LD_VAR 0 2
9861: PUSH
9862: LD_VAR 0 3
9866: ARRAY
9867: PPUSH
9868: LD_INT 3
9870: PPUSH
9871: CALL_OW 259
9875: PUSH
9876: LD_VAR 0 2
9880: PUSH
9881: LD_VAR 0 3
9885: ARRAY
9886: PPUSH
9887: CALL_OW 432
9891: MINUS
9892: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9893: LD_VAR 0 4
9897: PUSH
9898: LD_VAR 0 5
9902: PPUSH
9903: LD_INT 3
9905: PPUSH
9906: CALL_OW 259
9910: PUSH
9911: LD_VAR 0 5
9915: PPUSH
9916: CALL_OW 432
9920: MINUS
9921: GREATEREQUAL
9922: IFFALSE 9940
// mech := result [ i ] ;
9924: LD_ADDR_VAR 0 5
9928: PUSH
9929: LD_VAR 0 2
9933: PUSH
9934: LD_VAR 0 3
9938: ARRAY
9939: ST_TO_ADDR
// end ;
9940: GO 9849
9942: POP
9943: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9944: LD_VAR 0 1
9948: PPUSH
9949: LD_VAR 0 5
9953: PPUSH
9954: CALL_OW 135
// end ;
9958: LD_VAR 0 2
9962: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9963: LD_INT 0
9965: PPUSH
9966: PPUSH
9967: PPUSH
9968: PPUSH
9969: PPUSH
9970: PPUSH
9971: PPUSH
9972: PPUSH
9973: PPUSH
9974: PPUSH
9975: PPUSH
9976: PPUSH
9977: PPUSH
// result := [ ] ;
9978: LD_ADDR_VAR 0 7
9982: PUSH
9983: EMPTY
9984: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9985: LD_VAR 0 1
9989: PPUSH
9990: CALL_OW 266
9994: PUSH
9995: LD_INT 0
9997: PUSH
9998: LD_INT 1
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: IN
10005: NOT
10006: IFFALSE 10010
// exit ;
10008: GO 11650
// if name then
10010: LD_VAR 0 3
10014: IFFALSE 10030
// SetBName ( base_dep , name ) ;
10016: LD_VAR 0 1
10020: PPUSH
10021: LD_VAR 0 3
10025: PPUSH
10026: CALL_OW 500
// base := GetBase ( base_dep ) ;
10030: LD_ADDR_VAR 0 15
10034: PUSH
10035: LD_VAR 0 1
10039: PPUSH
10040: CALL_OW 274
10044: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10045: LD_ADDR_VAR 0 16
10049: PUSH
10050: LD_VAR 0 1
10054: PPUSH
10055: CALL_OW 255
10059: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10060: LD_ADDR_VAR 0 17
10064: PUSH
10065: LD_VAR 0 1
10069: PPUSH
10070: CALL_OW 248
10074: ST_TO_ADDR
// if sources then
10075: LD_VAR 0 5
10079: IFFALSE 10126
// for i = 1 to 3 do
10081: LD_ADDR_VAR 0 8
10085: PUSH
10086: DOUBLE
10087: LD_INT 1
10089: DEC
10090: ST_TO_ADDR
10091: LD_INT 3
10093: PUSH
10094: FOR_TO
10095: IFFALSE 10124
// AddResourceType ( base , i , sources [ i ] ) ;
10097: LD_VAR 0 15
10101: PPUSH
10102: LD_VAR 0 8
10106: PPUSH
10107: LD_VAR 0 5
10111: PUSH
10112: LD_VAR 0 8
10116: ARRAY
10117: PPUSH
10118: CALL_OW 276
10122: GO 10094
10124: POP
10125: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10126: LD_ADDR_VAR 0 18
10130: PUSH
10131: LD_VAR 0 15
10135: PPUSH
10136: LD_VAR 0 2
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL 9385 0 3
10148: ST_TO_ADDR
// InitHc ;
10149: CALL_OW 19
// InitUc ;
10153: CALL_OW 18
// uc_side := side ;
10157: LD_ADDR_OWVAR 20
10161: PUSH
10162: LD_VAR 0 16
10166: ST_TO_ADDR
// uc_nation := nation ;
10167: LD_ADDR_OWVAR 21
10171: PUSH
10172: LD_VAR 0 17
10176: ST_TO_ADDR
// if buildings then
10177: LD_VAR 0 18
10181: IFFALSE 11509
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10183: LD_ADDR_VAR 0 19
10187: PUSH
10188: LD_VAR 0 18
10192: PPUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: LD_INT 29
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 30
10208: PUSH
10209: LD_INT 30
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PPUSH
10221: CALL_OW 72
10225: ST_TO_ADDR
// if tmp then
10226: LD_VAR 0 19
10230: IFFALSE 10278
// for i in tmp do
10232: LD_ADDR_VAR 0 8
10236: PUSH
10237: LD_VAR 0 19
10241: PUSH
10242: FOR_IN
10243: IFFALSE 10276
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10245: LD_VAR 0 8
10249: PPUSH
10250: CALL_OW 250
10254: PPUSH
10255: LD_VAR 0 8
10259: PPUSH
10260: CALL_OW 251
10264: PPUSH
10265: LD_VAR 0 16
10269: PPUSH
10270: CALL_OW 441
10274: GO 10242
10276: POP
10277: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10278: LD_VAR 0 18
10282: PPUSH
10283: LD_INT 2
10285: PUSH
10286: LD_INT 30
10288: PUSH
10289: LD_INT 32
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 30
10298: PUSH
10299: LD_INT 33
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: PPUSH
10311: CALL_OW 72
10315: IFFALSE 10403
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10317: LD_ADDR_VAR 0 8
10321: PUSH
10322: LD_VAR 0 18
10326: PPUSH
10327: LD_INT 2
10329: PUSH
10330: LD_INT 30
10332: PUSH
10333: LD_INT 32
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 30
10342: PUSH
10343: LD_INT 33
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: PPUSH
10355: CALL_OW 72
10359: PUSH
10360: FOR_IN
10361: IFFALSE 10401
// begin if not GetBWeapon ( i ) then
10363: LD_VAR 0 8
10367: PPUSH
10368: CALL_OW 269
10372: NOT
10373: IFFALSE 10399
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10375: LD_VAR 0 8
10379: PPUSH
10380: LD_VAR 0 8
10384: PPUSH
10385: LD_VAR 0 2
10389: PPUSH
10390: CALL 11655 0 2
10394: PPUSH
10395: CALL_OW 431
// end ;
10399: GO 10360
10401: POP
10402: POP
// end ; for i = 1 to personel do
10403: LD_ADDR_VAR 0 8
10407: PUSH
10408: DOUBLE
10409: LD_INT 1
10411: DEC
10412: ST_TO_ADDR
10413: LD_VAR 0 6
10417: PUSH
10418: FOR_TO
10419: IFFALSE 11489
// begin if i > 4 then
10421: LD_VAR 0 8
10425: PUSH
10426: LD_INT 4
10428: GREATER
10429: IFFALSE 10433
// break ;
10431: GO 11489
// case i of 1 :
10433: LD_VAR 0 8
10437: PUSH
10438: LD_INT 1
10440: DOUBLE
10441: EQUAL
10442: IFTRUE 10446
10444: GO 10526
10446: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10447: LD_ADDR_VAR 0 12
10451: PUSH
10452: LD_VAR 0 18
10456: PPUSH
10457: LD_INT 22
10459: PUSH
10460: LD_VAR 0 16
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 58
10471: PUSH
10472: EMPTY
10473: LIST
10474: PUSH
10475: LD_INT 2
10477: PUSH
10478: LD_INT 30
10480: PUSH
10481: LD_INT 32
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 30
10490: PUSH
10491: LD_INT 4
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 30
10500: PUSH
10501: LD_INT 5
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 72
10523: ST_TO_ADDR
10524: GO 10748
10526: LD_INT 2
10528: DOUBLE
10529: EQUAL
10530: IFTRUE 10534
10532: GO 10596
10534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10535: LD_ADDR_VAR 0 12
10539: PUSH
10540: LD_VAR 0 18
10544: PPUSH
10545: LD_INT 22
10547: PUSH
10548: LD_VAR 0 16
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: LD_INT 30
10562: PUSH
10563: LD_INT 0
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 30
10572: PUSH
10573: LD_INT 1
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 72
10593: ST_TO_ADDR
10594: GO 10748
10596: LD_INT 3
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10666
10604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10605: LD_ADDR_VAR 0 12
10609: PUSH
10610: LD_VAR 0 18
10614: PPUSH
10615: LD_INT 22
10617: PUSH
10618: LD_VAR 0 16
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 2
10629: PUSH
10630: LD_INT 30
10632: PUSH
10633: LD_INT 2
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 30
10642: PUSH
10643: LD_INT 3
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 72
10663: ST_TO_ADDR
10664: GO 10748
10666: LD_INT 4
10668: DOUBLE
10669: EQUAL
10670: IFTRUE 10674
10672: GO 10747
10674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10675: LD_ADDR_VAR 0 12
10679: PUSH
10680: LD_VAR 0 18
10684: PPUSH
10685: LD_INT 22
10687: PUSH
10688: LD_VAR 0 16
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 30
10702: PUSH
10703: LD_INT 6
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 30
10712: PUSH
10713: LD_INT 7
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 8
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 72
10744: ST_TO_ADDR
10745: GO 10748
10747: POP
// if i = 1 then
10748: LD_VAR 0 8
10752: PUSH
10753: LD_INT 1
10755: EQUAL
10756: IFFALSE 10867
// begin tmp := [ ] ;
10758: LD_ADDR_VAR 0 19
10762: PUSH
10763: EMPTY
10764: ST_TO_ADDR
// for j in f do
10765: LD_ADDR_VAR 0 9
10769: PUSH
10770: LD_VAR 0 12
10774: PUSH
10775: FOR_IN
10776: IFFALSE 10849
// if GetBType ( j ) = b_bunker then
10778: LD_VAR 0 9
10782: PPUSH
10783: CALL_OW 266
10787: PUSH
10788: LD_INT 32
10790: EQUAL
10791: IFFALSE 10818
// tmp := Insert ( tmp , 1 , j ) else
10793: LD_ADDR_VAR 0 19
10797: PUSH
10798: LD_VAR 0 19
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: LD_VAR 0 9
10810: PPUSH
10811: CALL_OW 2
10815: ST_TO_ADDR
10816: GO 10847
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10818: LD_ADDR_VAR 0 19
10822: PUSH
10823: LD_VAR 0 19
10827: PPUSH
10828: LD_VAR 0 19
10832: PUSH
10833: LD_INT 1
10835: PLUS
10836: PPUSH
10837: LD_VAR 0 9
10841: PPUSH
10842: CALL_OW 2
10846: ST_TO_ADDR
10847: GO 10775
10849: POP
10850: POP
// if tmp then
10851: LD_VAR 0 19
10855: IFFALSE 10867
// f := tmp ;
10857: LD_ADDR_VAR 0 12
10861: PUSH
10862: LD_VAR 0 19
10866: ST_TO_ADDR
// end ; x := personel [ i ] ;
10867: LD_ADDR_VAR 0 13
10871: PUSH
10872: LD_VAR 0 6
10876: PUSH
10877: LD_VAR 0 8
10881: ARRAY
10882: ST_TO_ADDR
// if x = - 1 then
10883: LD_VAR 0 13
10887: PUSH
10888: LD_INT 1
10890: NEG
10891: EQUAL
10892: IFFALSE 11103
// begin for j in f do
10894: LD_ADDR_VAR 0 9
10898: PUSH
10899: LD_VAR 0 12
10903: PUSH
10904: FOR_IN
10905: IFFALSE 11099
// repeat InitHc ;
10907: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10911: LD_VAR 0 9
10915: PPUSH
10916: CALL_OW 266
10920: PUSH
10921: LD_INT 5
10923: EQUAL
10924: IFFALSE 10994
// begin if UnitsInside ( j ) < 3 then
10926: LD_VAR 0 9
10930: PPUSH
10931: CALL_OW 313
10935: PUSH
10936: LD_INT 3
10938: LESS
10939: IFFALSE 10975
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10941: LD_INT 0
10943: PPUSH
10944: LD_INT 5
10946: PUSH
10947: LD_INT 8
10949: PUSH
10950: LD_INT 9
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: LD_VAR 0 17
10962: ARRAY
10963: PPUSH
10964: LD_VAR 0 4
10968: PPUSH
10969: CALL_OW 380
10973: GO 10992
// PrepareHuman ( false , i , skill ) ;
10975: LD_INT 0
10977: PPUSH
10978: LD_VAR 0 8
10982: PPUSH
10983: LD_VAR 0 4
10987: PPUSH
10988: CALL_OW 380
// end else
10992: GO 11011
// PrepareHuman ( false , i , skill ) ;
10994: LD_INT 0
10996: PPUSH
10997: LD_VAR 0 8
11001: PPUSH
11002: LD_VAR 0 4
11006: PPUSH
11007: CALL_OW 380
// un := CreateHuman ;
11011: LD_ADDR_VAR 0 14
11015: PUSH
11016: CALL_OW 44
11020: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11021: LD_ADDR_VAR 0 7
11025: PUSH
11026: LD_VAR 0 7
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: LD_VAR 0 14
11038: PPUSH
11039: CALL_OW 2
11043: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11044: LD_VAR 0 14
11048: PPUSH
11049: LD_VAR 0 9
11053: PPUSH
11054: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11058: LD_VAR 0 9
11062: PPUSH
11063: CALL_OW 313
11067: PUSH
11068: LD_INT 6
11070: EQUAL
11071: IFTRUE 11095
11073: PUSH
11074: LD_VAR 0 9
11078: PPUSH
11079: CALL_OW 266
11083: PUSH
11084: LD_INT 32
11086: PUSH
11087: LD_INT 31
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: IN
11094: OR
11095: IFFALSE 10907
11097: GO 10904
11099: POP
11100: POP
// end else
11101: GO 11487
// for j = 1 to x do
11103: LD_ADDR_VAR 0 9
11107: PUSH
11108: DOUBLE
11109: LD_INT 1
11111: DEC
11112: ST_TO_ADDR
11113: LD_VAR 0 13
11117: PUSH
11118: FOR_TO
11119: IFFALSE 11485
// begin InitHc ;
11121: CALL_OW 19
// if not f then
11125: LD_VAR 0 12
11129: NOT
11130: IFFALSE 11219
// begin PrepareHuman ( false , i , skill ) ;
11132: LD_INT 0
11134: PPUSH
11135: LD_VAR 0 8
11139: PPUSH
11140: LD_VAR 0 4
11144: PPUSH
11145: CALL_OW 380
// un := CreateHuman ;
11149: LD_ADDR_VAR 0 14
11153: PUSH
11154: CALL_OW 44
11158: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11159: LD_ADDR_VAR 0 7
11163: PUSH
11164: LD_VAR 0 7
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: LD_VAR 0 14
11176: PPUSH
11177: CALL_OW 2
11181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11182: LD_VAR 0 14
11186: PPUSH
11187: LD_VAR 0 1
11191: PPUSH
11192: CALL_OW 250
11196: PPUSH
11197: LD_VAR 0 1
11201: PPUSH
11202: CALL_OW 251
11206: PPUSH
11207: LD_INT 10
11209: PPUSH
11210: LD_INT 0
11212: PPUSH
11213: CALL_OW 50
// continue ;
11217: GO 11118
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11219: LD_VAR 0 12
11223: PUSH
11224: LD_INT 1
11226: ARRAY
11227: PPUSH
11228: CALL_OW 313
11232: IFFALSE 11260
11234: PUSH
11235: LD_VAR 0 12
11239: PUSH
11240: LD_INT 1
11242: ARRAY
11243: PPUSH
11244: CALL_OW 266
11248: PUSH
11249: LD_INT 32
11251: PUSH
11252: LD_INT 31
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: IN
11259: AND
11260: IFTRUE 11281
11262: PUSH
11263: LD_VAR 0 12
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: PPUSH
11272: CALL_OW 313
11276: PUSH
11277: LD_INT 6
11279: EQUAL
11280: OR
11281: IFFALSE 11301
// f := Delete ( f , 1 ) ;
11283: LD_ADDR_VAR 0 12
11287: PUSH
11288: LD_VAR 0 12
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 3
11300: ST_TO_ADDR
// if not f then
11301: LD_VAR 0 12
11305: NOT
11306: IFFALSE 11324
// begin x := x + 2 ;
11308: LD_ADDR_VAR 0 13
11312: PUSH
11313: LD_VAR 0 13
11317: PUSH
11318: LD_INT 2
11320: PLUS
11321: ST_TO_ADDR
// continue ;
11322: GO 11118
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11324: LD_VAR 0 12
11328: PUSH
11329: LD_INT 1
11331: ARRAY
11332: PPUSH
11333: CALL_OW 266
11337: PUSH
11338: LD_INT 5
11340: EQUAL
11341: IFFALSE 11415
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11343: LD_VAR 0 12
11347: PUSH
11348: LD_INT 1
11350: ARRAY
11351: PPUSH
11352: CALL_OW 313
11356: PUSH
11357: LD_INT 3
11359: LESS
11360: IFFALSE 11396
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11362: LD_INT 0
11364: PPUSH
11365: LD_INT 5
11367: PUSH
11368: LD_INT 8
11370: PUSH
11371: LD_INT 9
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: LIST
11378: PUSH
11379: LD_VAR 0 17
11383: ARRAY
11384: PPUSH
11385: LD_VAR 0 4
11389: PPUSH
11390: CALL_OW 380
11394: GO 11413
// PrepareHuman ( false , i , skill ) ;
11396: LD_INT 0
11398: PPUSH
11399: LD_VAR 0 8
11403: PPUSH
11404: LD_VAR 0 4
11408: PPUSH
11409: CALL_OW 380
// end else
11413: GO 11432
// PrepareHuman ( false , i , skill ) ;
11415: LD_INT 0
11417: PPUSH
11418: LD_VAR 0 8
11422: PPUSH
11423: LD_VAR 0 4
11427: PPUSH
11428: CALL_OW 380
// un := CreateHuman ;
11432: LD_ADDR_VAR 0 14
11436: PUSH
11437: CALL_OW 44
11441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11442: LD_ADDR_VAR 0 7
11446: PUSH
11447: LD_VAR 0 7
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: LD_VAR 0 14
11459: PPUSH
11460: CALL_OW 2
11464: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11465: LD_VAR 0 14
11469: PPUSH
11470: LD_VAR 0 12
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: CALL_OW 52
// end ;
11483: GO 11118
11485: POP
11486: POP
// end ;
11487: GO 10418
11489: POP
11490: POP
// result := result ^ buildings ;
11491: LD_ADDR_VAR 0 7
11495: PUSH
11496: LD_VAR 0 7
11500: PUSH
11501: LD_VAR 0 18
11505: ADD
11506: ST_TO_ADDR
// end else
11507: GO 11650
// begin for i = 1 to personel do
11509: LD_ADDR_VAR 0 8
11513: PUSH
11514: DOUBLE
11515: LD_INT 1
11517: DEC
11518: ST_TO_ADDR
11519: LD_VAR 0 6
11523: PUSH
11524: FOR_TO
11525: IFFALSE 11648
// begin if i > 4 then
11527: LD_VAR 0 8
11531: PUSH
11532: LD_INT 4
11534: GREATER
11535: IFFALSE 11539
// break ;
11537: GO 11648
// x := personel [ i ] ;
11539: LD_ADDR_VAR 0 13
11543: PUSH
11544: LD_VAR 0 6
11548: PUSH
11549: LD_VAR 0 8
11553: ARRAY
11554: ST_TO_ADDR
// if x = - 1 then
11555: LD_VAR 0 13
11559: PUSH
11560: LD_INT 1
11562: NEG
11563: EQUAL
11564: IFFALSE 11568
// continue ;
11566: GO 11524
// PrepareHuman ( false , i , skill ) ;
11568: LD_INT 0
11570: PPUSH
11571: LD_VAR 0 8
11575: PPUSH
11576: LD_VAR 0 4
11580: PPUSH
11581: CALL_OW 380
// un := CreateHuman ;
11585: LD_ADDR_VAR 0 14
11589: PUSH
11590: CALL_OW 44
11594: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11595: LD_VAR 0 14
11599: PPUSH
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 250
11609: PPUSH
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 251
11619: PPUSH
11620: LD_INT 10
11622: PPUSH
11623: LD_INT 0
11625: PPUSH
11626: CALL_OW 50
// result := result ^ un ;
11630: LD_ADDR_VAR 0 7
11634: PUSH
11635: LD_VAR 0 7
11639: PUSH
11640: LD_VAR 0 14
11644: ADD
11645: ST_TO_ADDR
// end ;
11646: GO 11524
11648: POP
11649: POP
// end ; end ;
11650: LD_VAR 0 7
11654: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11655: LD_INT 0
11657: PPUSH
11658: PPUSH
11659: PPUSH
11660: PPUSH
11661: PPUSH
11662: PPUSH
11663: PPUSH
11664: PPUSH
11665: PPUSH
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
11671: PPUSH
11672: PPUSH
// result := false ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_INT 0
11680: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11681: LD_VAR 0 1
11685: NOT
11686: IFTRUE 11711
11688: PUSH
11689: LD_VAR 0 1
11693: PPUSH
11694: CALL_OW 266
11698: PUSH
11699: LD_INT 32
11701: PUSH
11702: LD_INT 33
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: IN
11709: NOT
11710: OR
11711: IFFALSE 11715
// exit ;
11713: GO 12850
// nat := GetNation ( tower ) ;
11715: LD_ADDR_VAR 0 12
11719: PUSH
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 248
11729: ST_TO_ADDR
// side := GetSide ( tower ) ;
11730: LD_ADDR_VAR 0 16
11734: PUSH
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 255
11744: ST_TO_ADDR
// x := GetX ( tower ) ;
11745: LD_ADDR_VAR 0 10
11749: PUSH
11750: LD_VAR 0 1
11754: PPUSH
11755: CALL_OW 250
11759: ST_TO_ADDR
// y := GetY ( tower ) ;
11760: LD_ADDR_VAR 0 11
11764: PUSH
11765: LD_VAR 0 1
11769: PPUSH
11770: CALL_OW 251
11774: ST_TO_ADDR
// if not x or not y then
11775: LD_VAR 0 10
11779: NOT
11780: IFTRUE 11789
11782: PUSH
11783: LD_VAR 0 11
11787: NOT
11788: OR
11789: IFFALSE 11793
// exit ;
11791: GO 12850
// weapon := 0 ;
11793: LD_ADDR_VAR 0 18
11797: PUSH
11798: LD_INT 0
11800: ST_TO_ADDR
// fac_list := [ ] ;
11801: LD_ADDR_VAR 0 17
11805: PUSH
11806: EMPTY
11807: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11808: LD_ADDR_VAR 0 6
11812: PUSH
11813: LD_VAR 0 1
11817: PPUSH
11818: CALL_OW 274
11822: PPUSH
11823: LD_VAR 0 2
11827: PPUSH
11828: LD_INT 0
11830: PPUSH
11831: CALL 9385 0 3
11835: PPUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PPUSH
11846: CALL_OW 72
11850: ST_TO_ADDR
// if not factories then
11851: LD_VAR 0 6
11855: NOT
11856: IFFALSE 11860
// exit ;
11858: GO 12850
// for i in factories do
11860: LD_ADDR_VAR 0 8
11864: PUSH
11865: LD_VAR 0 6
11869: PUSH
11870: FOR_IN
11871: IFFALSE 11896
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11873: LD_ADDR_VAR 0 17
11877: PUSH
11878: LD_VAR 0 17
11882: PUSH
11883: LD_VAR 0 8
11887: PPUSH
11888: CALL_OW 478
11892: UNION
11893: ST_TO_ADDR
11894: GO 11870
11896: POP
11897: POP
// if not fac_list then
11898: LD_VAR 0 17
11902: NOT
11903: IFFALSE 11907
// exit ;
11905: GO 12850
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11907: LD_ADDR_VAR 0 5
11911: PUSH
11912: LD_INT 4
11914: PUSH
11915: LD_INT 5
11917: PUSH
11918: LD_INT 9
11920: PUSH
11921: LD_INT 10
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 7
11929: PUSH
11930: LD_INT 11
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 27
11944: PUSH
11945: LD_INT 28
11947: PUSH
11948: LD_INT 26
11950: PUSH
11951: LD_INT 30
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 43
11962: PUSH
11963: LD_INT 44
11965: PUSH
11966: LD_INT 46
11968: PUSH
11969: LD_INT 45
11971: PUSH
11972: LD_INT 47
11974: PUSH
11975: LD_INT 49
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_VAR 0 12
11995: ARRAY
11996: ST_TO_ADDR
// list := list isect fac_list ;
11997: LD_ADDR_VAR 0 5
12001: PUSH
12002: LD_VAR 0 5
12006: PUSH
12007: LD_VAR 0 17
12011: ISECT
12012: ST_TO_ADDR
// if not list then
12013: LD_VAR 0 5
12017: NOT
12018: IFFALSE 12022
// exit ;
12020: GO 12850
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12022: LD_VAR 0 12
12026: PUSH
12027: LD_INT 3
12029: EQUAL
12030: IFFALSE 12042
12032: PUSH
12033: LD_INT 49
12035: PUSH
12036: LD_VAR 0 5
12040: IN
12041: AND
12042: IFFALSE 12062
12044: PUSH
12045: LD_INT 31
12047: PPUSH
12048: LD_VAR 0 16
12052: PPUSH
12053: CALL_OW 321
12057: PUSH
12058: LD_INT 2
12060: EQUAL
12061: AND
12062: IFFALSE 12122
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12064: LD_INT 22
12066: PUSH
12067: LD_VAR 0 16
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 35
12078: PUSH
12079: LD_INT 49
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 91
12088: PUSH
12089: LD_VAR 0 1
12093: PUSH
12094: LD_INT 10
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 69
12111: NOT
12112: IFFALSE 12122
// weapon := ru_time_lapser ;
12114: LD_ADDR_VAR 0 18
12118: PUSH
12119: LD_INT 49
12121: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12122: LD_VAR 0 12
12126: PUSH
12127: LD_INT 1
12129: PUSH
12130: LD_INT 2
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: IN
12137: IFFALSE 12161
12139: PUSH
12140: LD_INT 11
12142: PUSH
12143: LD_VAR 0 5
12147: IN
12148: IFTRUE 12160
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: LD_VAR 0 5
12158: IN
12159: OR
12160: AND
12161: IFFALSE 12181
12163: PUSH
12164: LD_INT 6
12166: PPUSH
12167: LD_VAR 0 16
12171: PPUSH
12172: CALL_OW 321
12176: PUSH
12177: LD_INT 2
12179: EQUAL
12180: AND
12181: IFFALSE 12348
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12183: LD_INT 22
12185: PUSH
12186: LD_VAR 0 16
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 2
12197: PUSH
12198: LD_INT 35
12200: PUSH
12201: LD_INT 11
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 35
12210: PUSH
12211: LD_INT 30
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 91
12225: PUSH
12226: LD_VAR 0 1
12230: PUSH
12231: LD_INT 18
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: NOT
12249: IFFALSE 12325
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_VAR 0 16
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: LD_INT 30
12269: PUSH
12270: LD_INT 32
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 30
12279: PUSH
12280: LD_INT 33
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 91
12294: PUSH
12295: LD_VAR 0 1
12299: PUSH
12300: LD_INT 12
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: PPUSH
12316: CALL_OW 69
12320: PUSH
12321: LD_INT 2
12323: GREATER
12324: AND
12325: IFFALSE 12348
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12327: LD_ADDR_VAR 0 18
12331: PUSH
12332: LD_INT 11
12334: PUSH
12335: LD_INT 30
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_VAR 0 12
12346: ARRAY
12347: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12348: LD_VAR 0 18
12352: NOT
12353: IFFALSE 12373
12355: PUSH
12356: LD_INT 40
12358: PPUSH
12359: LD_VAR 0 16
12363: PPUSH
12364: CALL_OW 321
12368: PUSH
12369: LD_INT 2
12371: EQUAL
12372: AND
12373: IFFALSE 12409
12375: PUSH
12376: LD_INT 7
12378: PUSH
12379: LD_VAR 0 5
12383: IN
12384: IFTRUE 12396
12386: PUSH
12387: LD_INT 28
12389: PUSH
12390: LD_VAR 0 5
12394: IN
12395: OR
12396: IFTRUE 12408
12398: PUSH
12399: LD_INT 45
12401: PUSH
12402: LD_VAR 0 5
12406: IN
12407: OR
12408: AND
12409: IFFALSE 12663
// begin hex := GetHexInfo ( x , y ) ;
12411: LD_ADDR_VAR 0 4
12415: PUSH
12416: LD_VAR 0 10
12420: PPUSH
12421: LD_VAR 0 11
12425: PPUSH
12426: CALL_OW 546
12430: ST_TO_ADDR
// if hex [ 1 ] then
12431: LD_VAR 0 4
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: IFFALSE 12443
// exit ;
12441: GO 12850
// height := hex [ 2 ] ;
12443: LD_ADDR_VAR 0 15
12447: PUSH
12448: LD_VAR 0 4
12452: PUSH
12453: LD_INT 2
12455: ARRAY
12456: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12457: LD_ADDR_VAR 0 14
12461: PUSH
12462: LD_INT 0
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: LD_INT 3
12470: PUSH
12471: LD_INT 5
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: ST_TO_ADDR
// for i in tmp do
12480: LD_ADDR_VAR 0 8
12484: PUSH
12485: LD_VAR 0 14
12489: PUSH
12490: FOR_IN
12491: IFFALSE 12661
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12493: LD_ADDR_VAR 0 9
12497: PUSH
12498: LD_VAR 0 10
12502: PPUSH
12503: LD_VAR 0 8
12507: PPUSH
12508: LD_INT 5
12510: PPUSH
12511: CALL_OW 272
12515: PUSH
12516: LD_VAR 0 11
12520: PPUSH
12521: LD_VAR 0 8
12525: PPUSH
12526: LD_INT 5
12528: PPUSH
12529: CALL_OW 273
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12538: LD_VAR 0 9
12542: PUSH
12543: LD_INT 1
12545: ARRAY
12546: PPUSH
12547: LD_VAR 0 9
12551: PUSH
12552: LD_INT 2
12554: ARRAY
12555: PPUSH
12556: CALL_OW 488
12560: IFFALSE 12659
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12562: LD_ADDR_VAR 0 4
12566: PUSH
12567: LD_VAR 0 9
12571: PUSH
12572: LD_INT 1
12574: ARRAY
12575: PPUSH
12576: LD_VAR 0 9
12580: PUSH
12581: LD_INT 2
12583: ARRAY
12584: PPUSH
12585: CALL_OW 546
12589: ST_TO_ADDR
// if hex [ 1 ] then
12590: LD_VAR 0 4
12594: PUSH
12595: LD_INT 1
12597: ARRAY
12598: IFFALSE 12602
// continue ;
12600: GO 12490
// h := hex [ 2 ] ;
12602: LD_ADDR_VAR 0 13
12606: PUSH
12607: LD_VAR 0 4
12611: PUSH
12612: LD_INT 2
12614: ARRAY
12615: ST_TO_ADDR
// if h + 7 < height then
12616: LD_VAR 0 13
12620: PUSH
12621: LD_INT 7
12623: PLUS
12624: PUSH
12625: LD_VAR 0 15
12629: LESS
12630: IFFALSE 12659
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12632: LD_ADDR_VAR 0 18
12636: PUSH
12637: LD_INT 7
12639: PUSH
12640: LD_INT 28
12642: PUSH
12643: LD_INT 45
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: PUSH
12651: LD_VAR 0 12
12655: ARRAY
12656: ST_TO_ADDR
// break ;
12657: GO 12661
// end ; end ; end ;
12659: GO 12490
12661: POP
12662: POP
// end ; if not weapon then
12663: LD_VAR 0 18
12667: NOT
12668: IFFALSE 12728
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12670: LD_ADDR_VAR 0 5
12674: PUSH
12675: LD_VAR 0 5
12679: PUSH
12680: LD_INT 11
12682: PUSH
12683: LD_INT 30
12685: PUSH
12686: LD_INT 49
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: DIFF
12694: ST_TO_ADDR
// if not list then
12695: LD_VAR 0 5
12699: NOT
12700: IFFALSE 12704
// exit ;
12702: GO 12850
// weapon := list [ rand ( 1 , list ) ] ;
12704: LD_ADDR_VAR 0 18
12708: PUSH
12709: LD_VAR 0 5
12713: PUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_VAR 0 5
12721: PPUSH
12722: CALL_OW 12
12726: ARRAY
12727: ST_TO_ADDR
// end ; if weapon then
12728: LD_VAR 0 18
12732: IFFALSE 12850
// begin tmp := CostOfWeapon ( weapon ) ;
12734: LD_ADDR_VAR 0 14
12738: PUSH
12739: LD_VAR 0 18
12743: PPUSH
12744: CALL_OW 451
12748: ST_TO_ADDR
// j := GetBase ( tower ) ;
12749: LD_ADDR_VAR 0 9
12753: PUSH
12754: LD_VAR 0 1
12758: PPUSH
12759: CALL_OW 274
12763: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12764: LD_VAR 0 9
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 275
12776: PUSH
12777: LD_VAR 0 14
12781: PUSH
12782: LD_INT 1
12784: ARRAY
12785: GREATEREQUAL
12786: IFFALSE 12812
12788: PUSH
12789: LD_VAR 0 9
12793: PPUSH
12794: LD_INT 2
12796: PPUSH
12797: CALL_OW 275
12801: PUSH
12802: LD_VAR 0 14
12806: PUSH
12807: LD_INT 2
12809: ARRAY
12810: GREATEREQUAL
12811: AND
12812: IFFALSE 12838
12814: PUSH
12815: LD_VAR 0 9
12819: PPUSH
12820: LD_INT 3
12822: PPUSH
12823: CALL_OW 275
12827: PUSH
12828: LD_VAR 0 14
12832: PUSH
12833: LD_INT 3
12835: ARRAY
12836: GREATEREQUAL
12837: AND
12838: IFFALSE 12850
// result := weapon ;
12840: LD_ADDR_VAR 0 3
12844: PUSH
12845: LD_VAR 0 18
12849: ST_TO_ADDR
// end ; end ;
12850: LD_VAR 0 3
12854: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12855: LD_INT 0
12857: PPUSH
12858: PPUSH
// result := true ;
12859: LD_ADDR_VAR 0 3
12863: PUSH
12864: LD_INT 1
12866: ST_TO_ADDR
// if array1 = array2 then
12867: LD_VAR 0 1
12871: PUSH
12872: LD_VAR 0 2
12876: EQUAL
12877: IFFALSE 12937
// begin for i = 1 to array1 do
12879: LD_ADDR_VAR 0 4
12883: PUSH
12884: DOUBLE
12885: LD_INT 1
12887: DEC
12888: ST_TO_ADDR
12889: LD_VAR 0 1
12893: PUSH
12894: FOR_TO
12895: IFFALSE 12933
// if array1 [ i ] <> array2 [ i ] then
12897: LD_VAR 0 1
12901: PUSH
12902: LD_VAR 0 4
12906: ARRAY
12907: PUSH
12908: LD_VAR 0 2
12912: PUSH
12913: LD_VAR 0 4
12917: ARRAY
12918: NONEQUAL
12919: IFFALSE 12931
// begin result := false ;
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_INT 0
12928: ST_TO_ADDR
// break ;
12929: GO 12933
// end ;
12931: GO 12894
12933: POP
12934: POP
// end else
12935: GO 12945
// result := false ;
12937: LD_ADDR_VAR 0 3
12941: PUSH
12942: LD_INT 0
12944: ST_TO_ADDR
// end ;
12945: LD_VAR 0 3
12949: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12950: LD_INT 0
12952: PPUSH
12953: PPUSH
// if not array1 or not array2 then
12954: LD_VAR 0 1
12958: NOT
12959: IFTRUE 12968
12961: PUSH
12962: LD_VAR 0 2
12966: NOT
12967: OR
12968: IFFALSE 12972
// exit ;
12970: GO 13036
// result := true ;
12972: LD_ADDR_VAR 0 3
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// for i = 1 to array1 do
12980: LD_ADDR_VAR 0 4
12984: PUSH
12985: DOUBLE
12986: LD_INT 1
12988: DEC
12989: ST_TO_ADDR
12990: LD_VAR 0 1
12994: PUSH
12995: FOR_TO
12996: IFFALSE 13034
// if array1 [ i ] <> array2 [ i ] then
12998: LD_VAR 0 1
13002: PUSH
13003: LD_VAR 0 4
13007: ARRAY
13008: PUSH
13009: LD_VAR 0 2
13013: PUSH
13014: LD_VAR 0 4
13018: ARRAY
13019: NONEQUAL
13020: IFFALSE 13032
// begin result := false ;
13022: LD_ADDR_VAR 0 3
13026: PUSH
13027: LD_INT 0
13029: ST_TO_ADDR
// break ;
13030: GO 13034
// end ;
13032: GO 12995
13034: POP
13035: POP
// end ;
13036: LD_VAR 0 3
13040: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13041: LD_INT 0
13043: PPUSH
13044: PPUSH
13045: PPUSH
// pom := GetBase ( fac ) ;
13046: LD_ADDR_VAR 0 5
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 274
13060: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13061: LD_ADDR_VAR 0 4
13065: PUSH
13066: LD_VAR 0 2
13070: PUSH
13071: LD_INT 1
13073: ARRAY
13074: PPUSH
13075: LD_VAR 0 2
13079: PUSH
13080: LD_INT 2
13082: ARRAY
13083: PPUSH
13084: LD_VAR 0 2
13088: PUSH
13089: LD_INT 3
13091: ARRAY
13092: PPUSH
13093: LD_VAR 0 2
13097: PUSH
13098: LD_INT 4
13100: ARRAY
13101: PPUSH
13102: CALL_OW 449
13106: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13107: LD_ADDR_VAR 0 3
13111: PUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: LD_INT 1
13119: PPUSH
13120: CALL_OW 275
13124: PUSH
13125: LD_VAR 0 4
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: GREATEREQUAL
13134: IFFALSE 13160
13136: PUSH
13137: LD_VAR 0 5
13141: PPUSH
13142: LD_INT 2
13144: PPUSH
13145: CALL_OW 275
13149: PUSH
13150: LD_VAR 0 4
13154: PUSH
13155: LD_INT 2
13157: ARRAY
13158: GREATEREQUAL
13159: AND
13160: IFFALSE 13186
13162: PUSH
13163: LD_VAR 0 5
13167: PPUSH
13168: LD_INT 3
13170: PPUSH
13171: CALL_OW 275
13175: PUSH
13176: LD_VAR 0 4
13180: PUSH
13181: LD_INT 3
13183: ARRAY
13184: GREATEREQUAL
13185: AND
13186: ST_TO_ADDR
// end ;
13187: LD_VAR 0 3
13191: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
13196: PPUSH
13197: PPUSH
// pom := GetBase ( building ) ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_VAR 0 1
13207: PPUSH
13208: CALL_OW 274
13212: ST_TO_ADDR
// if not pom then
13213: LD_VAR 0 3
13217: NOT
13218: IFFALSE 13222
// exit ;
13220: GO 13396
// btype := GetBType ( building ) ;
13222: LD_ADDR_VAR 0 5
13226: PUSH
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 266
13236: ST_TO_ADDR
// if btype = b_armoury then
13237: LD_VAR 0 5
13241: PUSH
13242: LD_INT 4
13244: EQUAL
13245: IFFALSE 13255
// btype := b_barracks ;
13247: LD_ADDR_VAR 0 5
13251: PUSH
13252: LD_INT 5
13254: ST_TO_ADDR
// if btype = b_depot then
13255: LD_VAR 0 5
13259: PUSH
13260: LD_INT 0
13262: EQUAL
13263: IFFALSE 13273
// btype := b_warehouse ;
13265: LD_ADDR_VAR 0 5
13269: PUSH
13270: LD_INT 1
13272: ST_TO_ADDR
// if btype = b_workshop then
13273: LD_VAR 0 5
13277: PUSH
13278: LD_INT 2
13280: EQUAL
13281: IFFALSE 13291
// btype := b_factory ;
13283: LD_ADDR_VAR 0 5
13287: PUSH
13288: LD_INT 3
13290: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: LD_VAR 0 5
13300: PPUSH
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 248
13310: PPUSH
13311: CALL_OW 450
13315: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13316: LD_ADDR_VAR 0 2
13320: PUSH
13321: LD_VAR 0 3
13325: PPUSH
13326: LD_INT 1
13328: PPUSH
13329: CALL_OW 275
13333: PUSH
13334: LD_VAR 0 4
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: GREATEREQUAL
13343: IFFALSE 13369
13345: PUSH
13346: LD_VAR 0 3
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: CALL_OW 275
13358: PUSH
13359: LD_VAR 0 4
13363: PUSH
13364: LD_INT 2
13366: ARRAY
13367: GREATEREQUAL
13368: AND
13369: IFFALSE 13395
13371: PUSH
13372: LD_VAR 0 3
13376: PPUSH
13377: LD_INT 3
13379: PPUSH
13380: CALL_OW 275
13384: PUSH
13385: LD_VAR 0 4
13389: PUSH
13390: LD_INT 3
13392: ARRAY
13393: GREATEREQUAL
13394: AND
13395: ST_TO_ADDR
// end ;
13396: LD_VAR 0 2
13400: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13401: LD_INT 0
13403: PPUSH
13404: PPUSH
13405: PPUSH
// pom := GetBase ( building ) ;
13406: LD_ADDR_VAR 0 4
13410: PUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 274
13420: ST_TO_ADDR
// if not pom then
13421: LD_VAR 0 4
13425: NOT
13426: IFFALSE 13430
// exit ;
13428: GO 13535
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13430: LD_ADDR_VAR 0 5
13434: PUSH
13435: LD_VAR 0 2
13439: PPUSH
13440: LD_VAR 0 1
13444: PPUSH
13445: CALL_OW 248
13449: PPUSH
13450: CALL_OW 450
13454: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13455: LD_ADDR_VAR 0 3
13459: PUSH
13460: LD_VAR 0 4
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 275
13472: PUSH
13473: LD_VAR 0 5
13477: PUSH
13478: LD_INT 1
13480: ARRAY
13481: GREATEREQUAL
13482: IFFALSE 13508
13484: PUSH
13485: LD_VAR 0 4
13489: PPUSH
13490: LD_INT 2
13492: PPUSH
13493: CALL_OW 275
13497: PUSH
13498: LD_VAR 0 5
13502: PUSH
13503: LD_INT 2
13505: ARRAY
13506: GREATEREQUAL
13507: AND
13508: IFFALSE 13534
13510: PUSH
13511: LD_VAR 0 4
13515: PPUSH
13516: LD_INT 3
13518: PPUSH
13519: CALL_OW 275
13523: PUSH
13524: LD_VAR 0 5
13528: PUSH
13529: LD_INT 3
13531: ARRAY
13532: GREATEREQUAL
13533: AND
13534: ST_TO_ADDR
// end ;
13535: LD_VAR 0 3
13539: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13540: LD_INT 0
13542: PPUSH
13543: PPUSH
13544: PPUSH
13545: PPUSH
13546: PPUSH
13547: PPUSH
13548: PPUSH
13549: PPUSH
13550: PPUSH
13551: PPUSH
13552: PPUSH
// result := false ;
13553: LD_ADDR_VAR 0 8
13557: PUSH
13558: LD_INT 0
13560: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13561: LD_VAR 0 5
13565: NOT
13566: IFTRUE 13575
13568: PUSH
13569: LD_VAR 0 1
13573: NOT
13574: OR
13575: IFTRUE 13584
13577: PUSH
13578: LD_VAR 0 2
13582: NOT
13583: OR
13584: IFTRUE 13593
13586: PUSH
13587: LD_VAR 0 3
13591: NOT
13592: OR
13593: IFFALSE 13597
// exit ;
13595: GO 14423
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13597: LD_ADDR_VAR 0 14
13601: PUSH
13602: LD_VAR 0 1
13606: PPUSH
13607: LD_VAR 0 2
13611: PPUSH
13612: LD_VAR 0 3
13616: PPUSH
13617: LD_VAR 0 4
13621: PPUSH
13622: LD_VAR 0 5
13626: PUSH
13627: LD_INT 1
13629: ARRAY
13630: PPUSH
13631: CALL_OW 248
13635: PPUSH
13636: LD_INT 0
13638: PPUSH
13639: CALL 15704 0 6
13643: ST_TO_ADDR
// if not hexes then
13644: LD_VAR 0 14
13648: NOT
13649: IFFALSE 13653
// exit ;
13651: GO 14423
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13653: LD_ADDR_VAR 0 17
13657: PUSH
13658: LD_VAR 0 5
13662: PPUSH
13663: LD_INT 22
13665: PUSH
13666: LD_VAR 0 13
13670: PPUSH
13671: CALL_OW 255
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: LD_INT 30
13685: PUSH
13686: LD_INT 0
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 30
13695: PUSH
13696: LD_INT 1
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PPUSH
13712: CALL_OW 72
13716: ST_TO_ADDR
// for i = 1 to hexes do
13717: LD_ADDR_VAR 0 9
13721: PUSH
13722: DOUBLE
13723: LD_INT 1
13725: DEC
13726: ST_TO_ADDR
13727: LD_VAR 0 14
13731: PUSH
13732: FOR_TO
13733: IFFALSE 14421
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13735: LD_ADDR_VAR 0 13
13739: PUSH
13740: LD_VAR 0 14
13744: PUSH
13745: LD_VAR 0 9
13749: ARRAY
13750: PUSH
13751: LD_INT 1
13753: ARRAY
13754: PPUSH
13755: LD_VAR 0 14
13759: PUSH
13760: LD_VAR 0 9
13764: ARRAY
13765: PUSH
13766: LD_INT 2
13768: ARRAY
13769: PPUSH
13770: CALL_OW 428
13774: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13775: LD_VAR 0 14
13779: PUSH
13780: LD_VAR 0 9
13784: ARRAY
13785: PUSH
13786: LD_INT 1
13788: ARRAY
13789: PPUSH
13790: LD_VAR 0 14
13794: PUSH
13795: LD_VAR 0 9
13799: ARRAY
13800: PUSH
13801: LD_INT 2
13803: ARRAY
13804: PPUSH
13805: CALL_OW 351
13809: IFTRUE 13848
13811: PUSH
13812: LD_VAR 0 14
13816: PUSH
13817: LD_VAR 0 9
13821: ARRAY
13822: PUSH
13823: LD_INT 1
13825: ARRAY
13826: PPUSH
13827: LD_VAR 0 14
13831: PUSH
13832: LD_VAR 0 9
13836: ARRAY
13837: PUSH
13838: LD_INT 2
13840: ARRAY
13841: PPUSH
13842: CALL_OW 488
13846: NOT
13847: OR
13848: IFTRUE 13865
13850: PUSH
13851: LD_VAR 0 13
13855: PPUSH
13856: CALL_OW 247
13860: PUSH
13861: LD_INT 3
13863: EQUAL
13864: OR
13865: IFFALSE 13871
// exit ;
13867: POP
13868: POP
13869: GO 14423
// if not tmp then
13871: LD_VAR 0 13
13875: NOT
13876: IFFALSE 13880
// continue ;
13878: GO 13732
// result := true ;
13880: LD_ADDR_VAR 0 8
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13888: LD_VAR 0 6
13892: IFFALSE 13909
13894: PUSH
13895: LD_VAR 0 13
13899: PPUSH
13900: CALL_OW 247
13904: PUSH
13905: LD_INT 2
13907: EQUAL
13908: AND
13909: IFFALSE 13926
13911: PUSH
13912: LD_VAR 0 13
13916: PPUSH
13917: CALL_OW 263
13921: PUSH
13922: LD_INT 1
13924: EQUAL
13925: AND
13926: IFFALSE 14090
// begin if IsDrivenBy ( tmp ) then
13928: LD_VAR 0 13
13932: PPUSH
13933: CALL_OW 311
13937: IFFALSE 13941
// continue ;
13939: GO 13732
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13941: LD_VAR 0 6
13945: PPUSH
13946: LD_INT 3
13948: PUSH
13949: LD_INT 60
13951: PUSH
13952: EMPTY
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 3
13961: PUSH
13962: LD_INT 55
13964: PUSH
13965: EMPTY
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 72
13980: IFFALSE 14088
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13982: LD_ADDR_VAR 0 18
13986: PUSH
13987: LD_VAR 0 6
13991: PPUSH
13992: LD_INT 3
13994: PUSH
13995: LD_INT 60
13997: PUSH
13998: EMPTY
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 3
14007: PUSH
14008: LD_INT 55
14010: PUSH
14011: EMPTY
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 72
14026: PUSH
14027: LD_INT 1
14029: ARRAY
14030: ST_TO_ADDR
// if IsInUnit ( driver ) then
14031: LD_VAR 0 18
14035: PPUSH
14036: CALL_OW 310
14040: IFFALSE 14051
// ComExit ( driver ) ;
14042: LD_VAR 0 18
14046: PPUSH
14047: CALL 39694 0 1
// AddComEnterUnit ( driver , tmp ) ;
14051: LD_VAR 0 18
14055: PPUSH
14056: LD_VAR 0 13
14060: PPUSH
14061: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14065: LD_VAR 0 18
14069: PPUSH
14070: LD_VAR 0 7
14074: PPUSH
14075: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14079: LD_VAR 0 18
14083: PPUSH
14084: CALL_OW 181
// end ; continue ;
14088: GO 13732
// end ; if not cleaners or not tmp in cleaners then
14090: LD_VAR 0 6
14094: NOT
14095: IFTRUE 14110
14097: PUSH
14098: LD_VAR 0 13
14102: PUSH
14103: LD_VAR 0 6
14107: IN
14108: NOT
14109: OR
14110: IFFALSE 14419
// begin if dep then
14112: LD_VAR 0 17
14116: IFFALSE 14252
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14118: LD_ADDR_VAR 0 16
14122: PUSH
14123: LD_VAR 0 17
14127: PUSH
14128: LD_INT 1
14130: ARRAY
14131: PPUSH
14132: CALL_OW 250
14136: PPUSH
14137: LD_VAR 0 17
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: CALL_OW 254
14150: PPUSH
14151: LD_INT 5
14153: PPUSH
14154: CALL_OW 272
14158: PUSH
14159: LD_VAR 0 17
14163: PUSH
14164: LD_INT 1
14166: ARRAY
14167: PPUSH
14168: CALL_OW 251
14172: PPUSH
14173: LD_VAR 0 17
14177: PUSH
14178: LD_INT 1
14180: ARRAY
14181: PPUSH
14182: CALL_OW 254
14186: PPUSH
14187: LD_INT 5
14189: PPUSH
14190: CALL_OW 273
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14199: LD_VAR 0 16
14203: PUSH
14204: LD_INT 1
14206: ARRAY
14207: PPUSH
14208: LD_VAR 0 16
14212: PUSH
14213: LD_INT 2
14215: ARRAY
14216: PPUSH
14217: CALL_OW 488
14221: IFFALSE 14252
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14223: LD_VAR 0 13
14227: PPUSH
14228: LD_VAR 0 16
14232: PUSH
14233: LD_INT 1
14235: ARRAY
14236: PPUSH
14237: LD_VAR 0 16
14241: PUSH
14242: LD_INT 2
14244: ARRAY
14245: PPUSH
14246: CALL_OW 111
// continue ;
14250: GO 13732
// end ; end ; r := GetDir ( tmp ) ;
14252: LD_ADDR_VAR 0 15
14256: PUSH
14257: LD_VAR 0 13
14261: PPUSH
14262: CALL_OW 254
14266: ST_TO_ADDR
// if r = 5 then
14267: LD_VAR 0 15
14271: PUSH
14272: LD_INT 5
14274: EQUAL
14275: IFFALSE 14285
// r := 0 ;
14277: LD_ADDR_VAR 0 15
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// for j = r to 5 do
14285: LD_ADDR_VAR 0 10
14289: PUSH
14290: DOUBLE
14291: LD_VAR 0 15
14295: DEC
14296: ST_TO_ADDR
14297: LD_INT 5
14299: PUSH
14300: FOR_TO
14301: IFFALSE 14417
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14303: LD_ADDR_VAR 0 11
14307: PUSH
14308: LD_VAR 0 13
14312: PPUSH
14313: CALL_OW 250
14317: PPUSH
14318: LD_VAR 0 10
14322: PPUSH
14323: LD_INT 2
14325: PPUSH
14326: CALL_OW 272
14330: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14331: LD_ADDR_VAR 0 12
14335: PUSH
14336: LD_VAR 0 13
14340: PPUSH
14341: CALL_OW 251
14345: PPUSH
14346: LD_VAR 0 10
14350: PPUSH
14351: LD_INT 2
14353: PPUSH
14354: CALL_OW 273
14358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14359: LD_VAR 0 11
14363: PPUSH
14364: LD_VAR 0 12
14368: PPUSH
14369: CALL_OW 488
14373: IFFALSE 14392
14375: PUSH
14376: LD_VAR 0 11
14380: PPUSH
14381: LD_VAR 0 12
14385: PPUSH
14386: CALL_OW 428
14390: NOT
14391: AND
14392: IFFALSE 14415
// begin ComMoveXY ( tmp , _x , _y ) ;
14394: LD_VAR 0 13
14398: PPUSH
14399: LD_VAR 0 11
14403: PPUSH
14404: LD_VAR 0 12
14408: PPUSH
14409: CALL_OW 111
// break ;
14413: GO 14417
// end ; end ;
14415: GO 14300
14417: POP
14418: POP
// end ; end ;
14419: GO 13732
14421: POP
14422: POP
// end ;
14423: LD_VAR 0 8
14427: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14428: LD_INT 0
14430: PPUSH
// result := true ;
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: LD_INT 1
14438: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14439: LD_VAR 0 2
14443: PUSH
14444: LD_INT 24
14446: DOUBLE
14447: EQUAL
14448: IFTRUE 14458
14450: LD_INT 33
14452: DOUBLE
14453: EQUAL
14454: IFTRUE 14458
14456: GO 14483
14458: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: LD_INT 32
14466: PPUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 321
14476: PUSH
14477: LD_INT 2
14479: EQUAL
14480: ST_TO_ADDR
14481: GO 14799
14483: LD_INT 20
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14516
14491: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14492: LD_ADDR_VAR 0 3
14496: PUSH
14497: LD_INT 6
14499: PPUSH
14500: LD_VAR 0 1
14504: PPUSH
14505: CALL_OW 321
14509: PUSH
14510: LD_INT 2
14512: EQUAL
14513: ST_TO_ADDR
14514: GO 14799
14516: LD_INT 22
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14530
14522: LD_INT 36
14524: DOUBLE
14525: EQUAL
14526: IFTRUE 14530
14528: GO 14555
14530: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14531: LD_ADDR_VAR 0 3
14535: PUSH
14536: LD_INT 15
14538: PPUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 321
14548: PUSH
14549: LD_INT 2
14551: EQUAL
14552: ST_TO_ADDR
14553: GO 14799
14555: LD_INT 30
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14588
14563: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14564: LD_ADDR_VAR 0 3
14568: PUSH
14569: LD_INT 20
14571: PPUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: CALL_OW 321
14581: PUSH
14582: LD_INT 2
14584: EQUAL
14585: ST_TO_ADDR
14586: GO 14799
14588: LD_INT 28
14590: DOUBLE
14591: EQUAL
14592: IFTRUE 14602
14594: LD_INT 21
14596: DOUBLE
14597: EQUAL
14598: IFTRUE 14602
14600: GO 14627
14602: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14603: LD_ADDR_VAR 0 3
14607: PUSH
14608: LD_INT 21
14610: PPUSH
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 321
14620: PUSH
14621: LD_INT 2
14623: EQUAL
14624: ST_TO_ADDR
14625: GO 14799
14627: LD_INT 16
14629: DOUBLE
14630: EQUAL
14631: IFTRUE 14635
14633: GO 14660
14635: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14636: LD_ADDR_VAR 0 3
14640: PUSH
14641: LD_INT 84
14643: PPUSH
14644: LD_VAR 0 1
14648: PPUSH
14649: CALL_OW 321
14653: PUSH
14654: LD_INT 2
14656: EQUAL
14657: ST_TO_ADDR
14658: GO 14799
14660: LD_INT 19
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14674
14666: LD_INT 23
14668: DOUBLE
14669: EQUAL
14670: IFTRUE 14674
14672: GO 14699
14674: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14675: LD_ADDR_VAR 0 3
14679: PUSH
14680: LD_INT 83
14682: PPUSH
14683: LD_VAR 0 1
14687: PPUSH
14688: CALL_OW 321
14692: PUSH
14693: LD_INT 2
14695: EQUAL
14696: ST_TO_ADDR
14697: GO 14799
14699: LD_INT 17
14701: DOUBLE
14702: EQUAL
14703: IFTRUE 14707
14705: GO 14732
14707: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14708: LD_ADDR_VAR 0 3
14712: PUSH
14713: LD_INT 39
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 321
14725: PUSH
14726: LD_INT 2
14728: EQUAL
14729: ST_TO_ADDR
14730: GO 14799
14732: LD_INT 18
14734: DOUBLE
14735: EQUAL
14736: IFTRUE 14740
14738: GO 14765
14740: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14741: LD_ADDR_VAR 0 3
14745: PUSH
14746: LD_INT 40
14748: PPUSH
14749: LD_VAR 0 1
14753: PPUSH
14754: CALL_OW 321
14758: PUSH
14759: LD_INT 2
14761: EQUAL
14762: ST_TO_ADDR
14763: GO 14799
14765: LD_INT 27
14767: DOUBLE
14768: EQUAL
14769: IFTRUE 14773
14771: GO 14798
14773: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14774: LD_ADDR_VAR 0 3
14778: PUSH
14779: LD_INT 35
14781: PPUSH
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 321
14791: PUSH
14792: LD_INT 2
14794: EQUAL
14795: ST_TO_ADDR
14796: GO 14799
14798: POP
// end ;
14799: LD_VAR 0 3
14803: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14804: LD_INT 0
14806: PPUSH
14807: PPUSH
14808: PPUSH
14809: PPUSH
14810: PPUSH
14811: PPUSH
14812: PPUSH
14813: PPUSH
14814: PPUSH
14815: PPUSH
14816: PPUSH
// result := false ;
14817: LD_ADDR_VAR 0 6
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// if btype = b_depot then
14825: LD_VAR 0 2
14829: PUSH
14830: LD_INT 0
14832: EQUAL
14833: IFFALSE 14845
// begin result := true ;
14835: LD_ADDR_VAR 0 6
14839: PUSH
14840: LD_INT 1
14842: ST_TO_ADDR
// exit ;
14843: GO 15699
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14845: LD_VAR 0 1
14849: NOT
14850: IFTRUE 14875
14852: PUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 266
14862: PUSH
14863: LD_INT 0
14865: PUSH
14866: LD_INT 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: IN
14873: NOT
14874: OR
14875: IFTRUE 14884
14877: PUSH
14878: LD_VAR 0 2
14882: NOT
14883: OR
14884: IFTRUE 14920
14886: PUSH
14887: LD_VAR 0 5
14891: PUSH
14892: LD_INT 0
14894: PUSH
14895: LD_INT 1
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: LD_INT 3
14903: PUSH
14904: LD_INT 4
14906: PUSH
14907: LD_INT 5
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: IN
14918: NOT
14919: OR
14920: IFTRUE 14939
14922: PUSH
14923: LD_VAR 0 3
14927: PPUSH
14928: LD_VAR 0 4
14932: PPUSH
14933: CALL_OW 488
14937: NOT
14938: OR
14939: IFFALSE 14943
// exit ;
14941: GO 15699
// side := GetSide ( depot ) ;
14943: LD_ADDR_VAR 0 9
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 255
14957: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14958: LD_VAR 0 9
14962: PPUSH
14963: LD_VAR 0 2
14967: PPUSH
14968: CALL 14428 0 2
14972: NOT
14973: IFFALSE 14977
// exit ;
14975: GO 15699
// pom := GetBase ( depot ) ;
14977: LD_ADDR_VAR 0 10
14981: PUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 274
14991: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14992: LD_ADDR_VAR 0 11
14996: PUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 248
15011: PPUSH
15012: CALL_OW 450
15016: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15017: LD_VAR 0 10
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 275
15029: PUSH
15030: LD_VAR 0 11
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: GREATEREQUAL
15039: IFFALSE 15065
15041: PUSH
15042: LD_VAR 0 10
15046: PPUSH
15047: LD_INT 2
15049: PPUSH
15050: CALL_OW 275
15054: PUSH
15055: LD_VAR 0 11
15059: PUSH
15060: LD_INT 2
15062: ARRAY
15063: GREATEREQUAL
15064: AND
15065: IFFALSE 15091
15067: PUSH
15068: LD_VAR 0 10
15072: PPUSH
15073: LD_INT 3
15075: PPUSH
15076: CALL_OW 275
15080: PUSH
15081: LD_VAR 0 11
15085: PUSH
15086: LD_INT 3
15088: ARRAY
15089: GREATEREQUAL
15090: AND
15091: NOT
15092: IFFALSE 15096
// exit ;
15094: GO 15699
// if GetBType ( depot ) = b_depot then
15096: LD_VAR 0 1
15100: PPUSH
15101: CALL_OW 266
15105: PUSH
15106: LD_INT 0
15108: EQUAL
15109: IFFALSE 15121
// dist := 28 else
15111: LD_ADDR_VAR 0 14
15115: PUSH
15116: LD_INT 28
15118: ST_TO_ADDR
15119: GO 15129
// dist := 36 ;
15121: LD_ADDR_VAR 0 14
15125: PUSH
15126: LD_INT 36
15128: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15129: LD_VAR 0 1
15133: PPUSH
15134: LD_VAR 0 3
15138: PPUSH
15139: LD_VAR 0 4
15143: PPUSH
15144: CALL_OW 297
15148: PUSH
15149: LD_VAR 0 14
15153: GREATER
15154: IFFALSE 15158
// exit ;
15156: GO 15699
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15158: LD_ADDR_VAR 0 12
15162: PUSH
15163: LD_VAR 0 2
15167: PPUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: LD_VAR 0 4
15177: PPUSH
15178: LD_VAR 0 5
15182: PPUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 248
15192: PPUSH
15193: LD_INT 0
15195: PPUSH
15196: CALL 15704 0 6
15200: ST_TO_ADDR
// if not hexes then
15201: LD_VAR 0 12
15205: NOT
15206: IFFALSE 15210
// exit ;
15208: GO 15699
// hex := GetHexInfo ( x , y ) ;
15210: LD_ADDR_VAR 0 15
15214: PUSH
15215: LD_VAR 0 3
15219: PPUSH
15220: LD_VAR 0 4
15224: PPUSH
15225: CALL_OW 546
15229: ST_TO_ADDR
// if hex [ 1 ] then
15230: LD_VAR 0 15
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: IFFALSE 15242
// exit ;
15240: GO 15699
// height := hex [ 2 ] ;
15242: LD_ADDR_VAR 0 13
15246: PUSH
15247: LD_VAR 0 15
15251: PUSH
15252: LD_INT 2
15254: ARRAY
15255: ST_TO_ADDR
// for i = 1 to hexes do
15256: LD_ADDR_VAR 0 7
15260: PUSH
15261: DOUBLE
15262: LD_INT 1
15264: DEC
15265: ST_TO_ADDR
15266: LD_VAR 0 12
15270: PUSH
15271: FOR_TO
15272: IFFALSE 15616
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15274: LD_VAR 0 12
15278: PUSH
15279: LD_VAR 0 7
15283: ARRAY
15284: PUSH
15285: LD_INT 1
15287: ARRAY
15288: PPUSH
15289: LD_VAR 0 12
15293: PUSH
15294: LD_VAR 0 7
15298: ARRAY
15299: PUSH
15300: LD_INT 2
15302: ARRAY
15303: PPUSH
15304: CALL_OW 488
15308: NOT
15309: IFTRUE 15351
15311: PUSH
15312: LD_VAR 0 12
15316: PUSH
15317: LD_VAR 0 7
15321: ARRAY
15322: PUSH
15323: LD_INT 1
15325: ARRAY
15326: PPUSH
15327: LD_VAR 0 12
15331: PUSH
15332: LD_VAR 0 7
15336: ARRAY
15337: PUSH
15338: LD_INT 2
15340: ARRAY
15341: PPUSH
15342: CALL_OW 428
15346: PUSH
15347: LD_INT 0
15349: GREATER
15350: OR
15351: IFTRUE 15389
15353: PUSH
15354: LD_VAR 0 12
15358: PUSH
15359: LD_VAR 0 7
15363: ARRAY
15364: PUSH
15365: LD_INT 1
15367: ARRAY
15368: PPUSH
15369: LD_VAR 0 12
15373: PUSH
15374: LD_VAR 0 7
15378: ARRAY
15379: PUSH
15380: LD_INT 2
15382: ARRAY
15383: PPUSH
15384: CALL_OW 351
15388: OR
15389: IFFALSE 15395
// exit ;
15391: POP
15392: POP
15393: GO 15699
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15395: LD_ADDR_VAR 0 8
15399: PUSH
15400: LD_VAR 0 12
15404: PUSH
15405: LD_VAR 0 7
15409: ARRAY
15410: PUSH
15411: LD_INT 1
15413: ARRAY
15414: PPUSH
15415: LD_VAR 0 12
15419: PUSH
15420: LD_VAR 0 7
15424: ARRAY
15425: PUSH
15426: LD_INT 2
15428: ARRAY
15429: PPUSH
15430: CALL_OW 546
15434: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15435: LD_VAR 0 8
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: IFTRUE 15465
15445: PUSH
15446: LD_VAR 0 8
15450: PUSH
15451: LD_INT 2
15453: ARRAY
15454: PUSH
15455: LD_VAR 0 13
15459: PUSH
15460: LD_INT 2
15462: PLUS
15463: GREATER
15464: OR
15465: IFTRUE 15487
15467: PUSH
15468: LD_VAR 0 8
15472: PUSH
15473: LD_INT 2
15475: ARRAY
15476: PUSH
15477: LD_VAR 0 13
15481: PUSH
15482: LD_INT 2
15484: MINUS
15485: LESS
15486: OR
15487: IFTRUE 15555
15489: PUSH
15490: LD_VAR 0 8
15494: PUSH
15495: LD_INT 3
15497: ARRAY
15498: PUSH
15499: LD_INT 0
15501: PUSH
15502: LD_INT 8
15504: PUSH
15505: LD_INT 9
15507: PUSH
15508: LD_INT 10
15510: PUSH
15511: LD_INT 11
15513: PUSH
15514: LD_INT 12
15516: PUSH
15517: LD_INT 13
15519: PUSH
15520: LD_INT 16
15522: PUSH
15523: LD_INT 17
15525: PUSH
15526: LD_INT 18
15528: PUSH
15529: LD_INT 19
15531: PUSH
15532: LD_INT 20
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: IN
15553: NOT
15554: OR
15555: IFTRUE 15568
15557: PUSH
15558: LD_VAR 0 8
15562: PUSH
15563: LD_INT 5
15565: ARRAY
15566: NOT
15567: OR
15568: IFTRUE 15608
15570: PUSH
15571: LD_VAR 0 8
15575: PUSH
15576: LD_INT 6
15578: ARRAY
15579: PUSH
15580: LD_INT 1
15582: PUSH
15583: LD_INT 2
15585: PUSH
15586: LD_INT 7
15588: PUSH
15589: LD_INT 9
15591: PUSH
15592: LD_INT 10
15594: PUSH
15595: LD_INT 11
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: IN
15606: NOT
15607: OR
15608: IFFALSE 15614
// exit ;
15610: POP
15611: POP
15612: GO 15699
// end ;
15614: GO 15271
15616: POP
15617: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15618: LD_VAR 0 9
15622: PPUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_VAR 0 4
15632: PPUSH
15633: LD_INT 20
15635: PPUSH
15636: CALL 7518 0 4
15640: PUSH
15641: LD_INT 4
15643: ARRAY
15644: IFFALSE 15648
// exit ;
15646: GO 15699
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15648: LD_VAR 0 2
15652: PUSH
15653: LD_INT 29
15655: PUSH
15656: LD_INT 30
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: IN
15663: IFFALSE 15687
15665: PUSH
15666: LD_VAR 0 3
15670: PPUSH
15671: LD_VAR 0 4
15675: PPUSH
15676: LD_VAR 0 9
15680: PPUSH
15681: CALL_OW 440
15685: NOT
15686: AND
15687: IFFALSE 15691
// exit ;
15689: GO 15699
// result := true ;
15691: LD_ADDR_VAR 0 6
15695: PUSH
15696: LD_INT 1
15698: ST_TO_ADDR
// end ;
15699: LD_VAR 0 6
15703: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15704: LD_INT 0
15706: PPUSH
15707: PPUSH
15708: PPUSH
15709: PPUSH
15710: PPUSH
15711: PPUSH
15712: PPUSH
15713: PPUSH
15714: PPUSH
15715: PPUSH
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
15727: PPUSH
15728: PPUSH
15729: PPUSH
15730: PPUSH
15731: PPUSH
15732: PPUSH
15733: PPUSH
15734: PPUSH
15735: PPUSH
15736: PPUSH
15737: PPUSH
15738: PPUSH
15739: PPUSH
15740: PPUSH
15741: PPUSH
15742: PPUSH
15743: PPUSH
15744: PPUSH
15745: PPUSH
15746: PPUSH
15747: PPUSH
15748: PPUSH
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
15759: PPUSH
15760: PPUSH
15761: PPUSH
15762: PPUSH
15763: PPUSH
// result = [ ] ;
15764: LD_ADDR_VAR 0 7
15768: PUSH
15769: EMPTY
15770: ST_TO_ADDR
// temp_list = [ ] ;
15771: LD_ADDR_VAR 0 9
15775: PUSH
15776: EMPTY
15777: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15778: LD_VAR 0 4
15782: PUSH
15783: LD_INT 0
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: LD_INT 2
15791: PUSH
15792: LD_INT 3
15794: PUSH
15795: LD_INT 4
15797: PUSH
15798: LD_INT 5
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: IN
15809: NOT
15810: IFTRUE 15853
15812: PUSH
15813: LD_VAR 0 1
15817: PUSH
15818: LD_INT 0
15820: PUSH
15821: LD_INT 1
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: IN
15828: IFFALSE 15852
15830: PUSH
15831: LD_VAR 0 5
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: LD_INT 2
15841: PUSH
15842: LD_INT 3
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: IN
15850: NOT
15851: AND
15852: OR
15853: IFFALSE 15857
// exit ;
15855: GO 34256
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15857: LD_VAR 0 1
15861: PUSH
15862: LD_INT 6
15864: PUSH
15865: LD_INT 7
15867: PUSH
15868: LD_INT 8
15870: PUSH
15871: LD_INT 13
15873: PUSH
15874: LD_INT 12
15876: PUSH
15877: LD_INT 15
15879: PUSH
15880: LD_INT 11
15882: PUSH
15883: LD_INT 14
15885: PUSH
15886: LD_INT 10
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: IN
15900: IFFALSE 15910
// btype = b_lab ;
15902: LD_ADDR_VAR 0 1
15906: PUSH
15907: LD_INT 6
15909: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15910: LD_VAR 0 6
15914: PUSH
15915: LD_INT 0
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: LIST
15928: IN
15929: NOT
15930: IFTRUE 15998
15932: PUSH
15933: LD_VAR 0 1
15937: PUSH
15938: LD_INT 0
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: LD_INT 6
15952: PUSH
15953: LD_INT 36
15955: PUSH
15956: LD_INT 4
15958: PUSH
15959: LD_INT 5
15961: PUSH
15962: LD_INT 31
15964: PUSH
15965: LD_INT 32
15967: PUSH
15968: LD_INT 33
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: IN
15984: NOT
15985: IFFALSE 15997
15987: PUSH
15988: LD_VAR 0 6
15992: PUSH
15993: LD_INT 1
15995: EQUAL
15996: AND
15997: OR
15998: IFTRUE 16030
16000: PUSH
16001: LD_VAR 0 1
16005: PUSH
16006: LD_INT 2
16008: PUSH
16009: LD_INT 3
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: IN
16016: NOT
16017: IFFALSE 16029
16019: PUSH
16020: LD_VAR 0 6
16024: PUSH
16025: LD_INT 2
16027: EQUAL
16028: AND
16029: OR
16030: IFFALSE 16040
// mode = 0 ;
16032: LD_ADDR_VAR 0 6
16036: PUSH
16037: LD_INT 0
16039: ST_TO_ADDR
// case mode of 0 :
16040: LD_VAR 0 6
16044: PUSH
16045: LD_INT 0
16047: DOUBLE
16048: EQUAL
16049: IFTRUE 16053
16051: GO 27506
16053: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16054: LD_ADDR_VAR 0 11
16058: PUSH
16059: LD_INT 0
16061: PUSH
16062: LD_INT 0
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 0
16071: PUSH
16072: LD_INT 1
16074: NEG
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 0
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 1
16112: NEG
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 1
16123: NEG
16124: PUSH
16125: LD_INT 1
16127: NEG
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 1
16135: NEG
16136: PUSH
16137: LD_INT 2
16139: NEG
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: LD_INT 2
16150: NEG
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: PUSH
16159: LD_INT 1
16161: NEG
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: LD_INT 2
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 0
16179: PUSH
16180: LD_INT 2
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 1
16189: NEG
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: LD_INT 3
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: LD_INT 2
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16247: LD_ADDR_VAR 0 12
16251: PUSH
16252: LD_INT 0
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: LD_INT 1
16267: NEG
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: LD_INT 0
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 0
16295: PUSH
16296: LD_INT 1
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 1
16305: NEG
16306: PUSH
16307: LD_INT 0
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: NEG
16317: PUSH
16318: LD_INT 1
16320: NEG
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 1
16328: PUSH
16329: LD_INT 1
16331: NEG
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 2
16339: PUSH
16340: LD_INT 0
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 1
16359: NEG
16360: PUSH
16361: LD_INT 1
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 2
16370: NEG
16371: PUSH
16372: LD_INT 0
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 2
16381: NEG
16382: PUSH
16383: LD_INT 1
16385: NEG
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 2
16393: NEG
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 3
16404: NEG
16405: PUSH
16406: LD_INT 0
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 3
16415: NEG
16416: PUSH
16417: LD_INT 1
16419: NEG
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16443: LD_ADDR_VAR 0 13
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: LD_INT 0
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 0
16460: PUSH
16461: LD_INT 1
16463: NEG
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 0
16491: PUSH
16492: LD_INT 1
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 1
16512: NEG
16513: PUSH
16514: LD_INT 1
16516: NEG
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 1
16524: NEG
16525: PUSH
16526: LD_INT 2
16528: NEG
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 2
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 1
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 2
16566: NEG
16567: PUSH
16568: LD_INT 1
16570: NEG
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 2
16578: NEG
16579: PUSH
16580: LD_INT 2
16582: NEG
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 2
16590: NEG
16591: PUSH
16592: LD_INT 3
16594: NEG
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 3
16602: NEG
16603: PUSH
16604: LD_INT 2
16606: NEG
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 3
16614: NEG
16615: PUSH
16616: LD_INT 3
16618: NEG
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16642: LD_ADDR_VAR 0 14
16646: PUSH
16647: LD_INT 0
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: LD_INT 1
16662: NEG
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: LD_INT 0
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 0
16690: PUSH
16691: LD_INT 1
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 1
16700: NEG
16701: PUSH
16702: LD_INT 0
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 1
16711: NEG
16712: PUSH
16713: LD_INT 1
16715: NEG
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 1
16723: NEG
16724: PUSH
16725: LD_INT 2
16727: NEG
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 0
16735: PUSH
16736: LD_INT 2
16738: NEG
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 1
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 1
16777: NEG
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 1
16788: NEG
16789: PUSH
16790: LD_INT 3
16792: NEG
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 0
16800: PUSH
16801: LD_INT 3
16803: NEG
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 1
16811: PUSH
16812: LD_INT 2
16814: NEG
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16838: LD_ADDR_VAR 0 15
16842: PUSH
16843: LD_INT 0
16845: PUSH
16846: LD_INT 0
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 0
16855: PUSH
16856: LD_INT 1
16858: NEG
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: LD_INT 0
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 0
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 1
16896: NEG
16897: PUSH
16898: LD_INT 0
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: NEG
16908: PUSH
16909: LD_INT 1
16911: NEG
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 1
16919: PUSH
16920: LD_INT 1
16922: NEG
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 1
16950: NEG
16951: PUSH
16952: LD_INT 1
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 2
16961: NEG
16962: PUSH
16963: LD_INT 0
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: LD_INT 1
16976: NEG
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: LD_INT 1
16987: NEG
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 3
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17031: LD_ADDR_VAR 0 16
17035: PUSH
17036: LD_INT 0
17038: PUSH
17039: LD_INT 0
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 0
17048: PUSH
17049: LD_INT 1
17051: NEG
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 1
17059: PUSH
17060: LD_INT 0
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 1
17069: PUSH
17070: LD_INT 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: LD_INT 1
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: NEG
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: NEG
17101: PUSH
17102: LD_INT 1
17104: NEG
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 1
17112: NEG
17113: PUSH
17114: LD_INT 2
17116: NEG
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 1
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: LD_INT 2
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 2
17154: NEG
17155: PUSH
17156: LD_INT 1
17158: NEG
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 2
17166: NEG
17167: PUSH
17168: LD_INT 2
17170: NEG
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 3
17178: PUSH
17179: LD_INT 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 3
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17224: LD_ADDR_VAR 0 17
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: LD_INT 0
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: LD_INT 1
17244: NEG
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: LD_INT 1
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: NEG
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: LD_INT 1
17297: NEG
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 1
17305: NEG
17306: PUSH
17307: LD_INT 2
17309: NEG
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 0
17317: PUSH
17318: LD_INT 2
17320: NEG
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: LD_INT 1
17331: NEG
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 0
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 0
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 1
17389: NEG
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 2
17400: NEG
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 2
17411: NEG
17412: PUSH
17413: LD_INT 1
17415: NEG
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 2
17423: NEG
17424: PUSH
17425: LD_INT 2
17427: NEG
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17454: LD_ADDR_VAR 0 18
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 0
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 0
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 1
17512: NEG
17513: PUSH
17514: LD_INT 0
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: LD_INT 1
17527: NEG
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 1
17535: NEG
17536: PUSH
17537: LD_INT 2
17539: NEG
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 0
17547: PUSH
17548: LD_INT 2
17550: NEG
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 1
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 2
17589: PUSH
17590: LD_INT 2
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: LD_INT 2
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 1
17619: NEG
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 2
17630: NEG
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 2
17641: NEG
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 2
17653: NEG
17654: PUSH
17655: LD_INT 2
17657: NEG
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17684: LD_ADDR_VAR 0 19
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: LD_INT 0
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: LD_INT 1
17704: NEG
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 1
17742: NEG
17743: PUSH
17744: LD_INT 0
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: LD_INT 1
17757: NEG
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 1
17765: NEG
17766: PUSH
17767: LD_INT 2
17769: NEG
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: LD_INT 2
17780: NEG
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 2
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 2
17819: PUSH
17820: LD_INT 2
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: LD_INT 2
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 1
17849: NEG
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 2
17860: NEG
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 2
17871: NEG
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 2
17883: NEG
17884: PUSH
17885: LD_INT 2
17887: NEG
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17914: LD_ADDR_VAR 0 20
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 0
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 1
17972: NEG
17973: PUSH
17974: LD_INT 0
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 1
17983: NEG
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 1
17995: NEG
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 0
18007: PUSH
18008: LD_INT 2
18010: NEG
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 0
18069: PUSH
18070: LD_INT 2
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 1
18079: NEG
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: NEG
18091: PUSH
18092: LD_INT 0
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 2
18101: NEG
18102: PUSH
18103: LD_INT 1
18105: NEG
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 2
18113: NEG
18114: PUSH
18115: LD_INT 2
18117: NEG
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18144: LD_ADDR_VAR 0 21
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 0
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: NEG
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: LD_INT 2
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: LD_INT 2
18240: NEG
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 0
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 1
18309: NEG
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: NEG
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 2
18331: NEG
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 2
18343: NEG
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18374: LD_ADDR_VAR 0 22
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: NEG
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 1
18455: NEG
18456: PUSH
18457: LD_INT 2
18459: NEG
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: LD_INT 2
18470: NEG
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: LD_INT 1
18481: NEG
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 0
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 0
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: NEG
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 2
18550: NEG
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 2
18561: NEG
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 2
18573: NEG
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18604: LD_ADDR_VAR 0 23
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: LD_INT 1
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: NEG
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 2
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 2
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 1
18769: NEG
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 2
18780: NEG
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 2
18791: NEG
18792: PUSH
18793: LD_INT 1
18795: NEG
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 2
18803: NEG
18804: PUSH
18805: LD_INT 2
18807: NEG
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: LD_INT 3
18819: NEG
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: LD_INT 3
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: LD_INT 2
18842: NEG
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18884: LD_ADDR_VAR 0 24
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 1
18904: NEG
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 1
18942: NEG
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: LD_INT 2
18969: NEG
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: NEG
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 2
19083: NEG
19084: PUSH
19085: LD_INT 2
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 2
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 3
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19160: LD_ADDR_VAR 0 25
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 1
19180: NEG
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: NEG
19230: PUSH
19231: LD_INT 1
19233: NEG
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 1
19241: NEG
19242: PUSH
19243: LD_INT 2
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: LD_INT 2
19256: NEG
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 2
19347: NEG
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 2
19359: NEG
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 3
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 3
19381: PUSH
19382: LD_INT 2
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: LD_INT 3
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: LD_INT 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19434: LD_ADDR_VAR 0 26
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 0
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 0
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: LD_INT 1
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 1
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 2
19519: NEG
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 2
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: NEG
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 2
19633: NEG
19634: PUSH
19635: LD_INT 2
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 3
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19710: LD_ADDR_VAR 0 27
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: LD_INT 1
19730: NEG
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 1
19768: NEG
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: LD_INT 2
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: NEG
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: NEG
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: NEG
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 3
19943: NEG
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 3
19955: NEG
19956: PUSH
19957: LD_INT 2
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19990: LD_ADDR_VAR 0 28
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: LD_INT 0
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: LD_INT 2
20075: NEG
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 0
20083: PUSH
20084: LD_INT 2
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: LD_INT 0
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: LD_INT 1
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: LD_INT 2
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: NEG
20202: PUSH
20203: LD_INT 3
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: LD_INT 3
20217: NEG
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 3
20225: NEG
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 3
20237: NEG
20238: PUSH
20239: LD_INT 2
20241: NEG
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20272: LD_ADDR_VAR 0 29
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: PUSH
20301: LD_INT 0
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 0
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 1
20330: NEG
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: LD_INT 2
20357: NEG
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 2
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: LD_INT 1
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: NEG
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: LD_INT 3
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 2
20474: PUSH
20475: LD_INT 1
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 3
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: LD_INT 3
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 3
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20551: LD_ADDR_VAR 0 30
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: LD_INT 0
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: NEG
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: LD_INT 2
20636: NEG
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: LD_INT 2
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: LD_INT 2
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 2
20728: NEG
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: LD_INT 3
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 2
20755: NEG
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 3
20763: PUSH
20764: LD_INT 2
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: LD_INT 3
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 3
20794: NEG
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20829: LD_ADDR_VAR 0 31
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 0
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: LD_INT 2
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: NEG
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: NEG
21019: PUSH
21020: LD_INT 3
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: PUSH
21052: LD_INT 3
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 3
21072: NEG
21073: PUSH
21074: LD_INT 2
21076: NEG
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21107: LD_ADDR_VAR 0 32
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: LD_INT 1
21127: NEG
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: LD_INT 1
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: LD_INT 2
21192: NEG
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: LD_INT 2
21203: NEG
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: LD_INT 1
21214: NEG
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 1
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: LD_INT 3
21300: NEG
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 1
21308: PUSH
21309: LD_INT 2
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 3
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: LD_INT 3
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 2
21339: NEG
21340: PUSH
21341: LD_INT 1
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 3
21350: NEG
21351: PUSH
21352: LD_INT 1
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21385: LD_ADDR_VAR 0 33
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: LD_INT 1
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: LD_INT 2
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 2
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: LD_INT 0
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: LD_INT 2
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 2
21575: NEG
21576: PUSH
21577: LD_INT 3
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 3
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: LD_INT 3
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 3
21629: NEG
21630: PUSH
21631: LD_INT 2
21633: NEG
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21664: LD_ADDR_VAR 0 34
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 0
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 1
21722: NEG
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 2
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: LD_INT 2
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 2
21820: NEG
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 2
21831: NEG
21832: PUSH
21833: LD_INT 1
21835: NEG
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: LD_INT 3
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 2
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 3
21878: PUSH
21879: LD_INT 2
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 3
21909: NEG
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21944: LD_ADDR_VAR 0 35
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 2
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 2
22035: NEG
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22056: LD_ADDR_VAR 0 36
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: LD_INT 1
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 0
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: LD_INT 2
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22168: LD_ADDR_VAR 0 37
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 1
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22280: LD_ADDR_VAR 0 38
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 2
22371: NEG
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22392: LD_ADDR_VAR 0 39
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: LD_INT 2
22477: NEG
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22504: LD_ADDR_VAR 0 40
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: NEG
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22616: LD_ADDR_VAR 0 41
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 2
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 2
22782: NEG
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 2
22806: NEG
22807: PUSH
22808: LD_INT 3
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 3
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 3
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 3
22859: PUSH
22860: LD_INT 3
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: LD_INT 3
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 2
22879: NEG
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 3
22890: NEG
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 3
22901: NEG
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 3
22913: NEG
22914: PUSH
22915: LD_INT 2
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 3
22925: NEG
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22966: LD_ADDR_VAR 0 42
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: NEG
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: LD_INT 2
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: LD_INT 3
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: LD_INT 3
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: LD_INT 3
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 3
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: LD_INT 3
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: LD_INT 3
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: LD_INT 3
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: LD_INT 3
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: LD_INT 2
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 3
23263: NEG
23264: PUSH
23265: LD_INT 2
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 3
23275: NEG
23276: PUSH
23277: LD_INT 3
23279: NEG
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23316: LD_ADDR_VAR 0 43
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: LD_INT 2
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 2
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: LD_INT 2
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 2
23482: NEG
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: NEG
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: LD_INT 3
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: LD_INT 3
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: LD_INT 2
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: LD_INT 1
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 3
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 3
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 3
23612: NEG
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 3
23623: NEG
23624: PUSH
23625: LD_INT 1
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23664: LD_ADDR_VAR 0 44
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: LD_INT 1
23760: NEG
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 2
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 2
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 2
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 2
23854: NEG
23855: PUSH
23856: LD_INT 3
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 3
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 3
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 3
23907: PUSH
23908: LD_INT 3
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 3
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 3
23938: NEG
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 3
23949: NEG
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 3
23961: NEG
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 3
23973: NEG
23974: PUSH
23975: LD_INT 3
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24014: LD_ADDR_VAR 0 45
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: LD_INT 2
24099: NEG
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 2
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: LD_INT 1
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: NEG
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 2
24192: NEG
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: NEG
24205: PUSH
24206: LD_INT 3
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: LD_INT 3
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 3
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 3
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 2
24270: PUSH
24271: LD_INT 3
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 3
24311: NEG
24312: PUSH
24313: LD_INT 2
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 3
24323: NEG
24324: PUSH
24325: LD_INT 3
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24364: LD_ADDR_VAR 0 46
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: LD_INT 1
24384: NEG
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 2
24449: NEG
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 3
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: LD_INT 3
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: LD_INT 2
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: LD_INT 3
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: LD_INT 3
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: LD_INT 2
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 3
24660: NEG
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 3
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24712: LD_ADDR_VAR 0 47
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: LD_INT 0
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: LD_INT 2
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: LD_INT 2
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: NEG
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 2
24839: NEG
24840: PUSH
24841: LD_INT 2
24843: NEG
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24863: LD_ADDR_VAR 0 48
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: LD_INT 2
24948: NEG
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 2
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25010: LD_ADDR_VAR 0 49
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 2
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25154: LD_ADDR_VAR 0 50
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 1
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: LD_INT 1
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25298: LD_ADDR_VAR 0 51
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25445: LD_ADDR_VAR 0 52
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: LD_INT 1
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: LD_INT 2
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25596: LD_ADDR_VAR 0 53
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: NEG
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: NEG
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: LD_INT 2
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: LD_INT 2
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25826: LD_ADDR_VAR 0 54
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: LD_INT 2
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 2
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: NEG
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: LD_INT 2
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26056: LD_ADDR_VAR 0 55
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: LD_INT 2
26141: NEG
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: LD_INT 2
26152: NEG
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 2
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: LD_INT 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: NEG
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 2
26232: NEG
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: NEG
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26286: LD_ADDR_VAR 0 56
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: LD_INT 2
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 2
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: NEG
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: NEG
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: NEG
26486: PUSH
26487: LD_INT 2
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26516: LD_ADDR_VAR 0 57
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: LD_INT 2
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: LD_INT 2
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 2
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: LD_INT 2
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 2
26692: NEG
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 2
26703: NEG
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: NEG
26716: PUSH
26717: LD_INT 2
26719: NEG
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26746: LD_ADDR_VAR 0 58
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: NEG
26828: PUSH
26829: LD_INT 2
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: NEG
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26976: LD_ADDR_VAR 0 59
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: LD_INT 1
27049: NEG
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27064: LD_ADDR_VAR 0 60
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27152: LD_ADDR_VAR 0 61
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27240: LD_ADDR_VAR 0 62
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27328: LD_ADDR_VAR 0 63
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27416: LD_ADDR_VAR 0 64
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: LD_INT 1
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: ST_TO_ADDR
// end ; 1 :
27504: GO 33401
27506: LD_INT 1
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 30137
27514: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27515: LD_ADDR_VAR 0 11
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 3
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: LD_INT 3
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27559: LD_ADDR_VAR 0 12
27563: PUSH
27564: LD_INT 2
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27600: LD_ADDR_VAR 0 13
27604: PUSH
27605: LD_INT 3
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: LD_INT 3
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 3
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27640: LD_ADDR_VAR 0 14
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: LD_INT 3
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: LD_INT 3
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27681: LD_ADDR_VAR 0 15
27685: PUSH
27686: LD_INT 2
27688: NEG
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 3
27699: NEG
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 3
27710: NEG
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27725: LD_ADDR_VAR 0 16
27729: PUSH
27730: LD_INT 2
27732: NEG
27733: PUSH
27734: LD_INT 3
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 3
27744: NEG
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 3
27756: NEG
27757: PUSH
27758: LD_INT 3
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27771: LD_ADDR_VAR 0 17
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: LD_INT 3
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: LD_INT 3
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 2
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27815: LD_ADDR_VAR 0 18
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27856: LD_ADDR_VAR 0 19
27860: PUSH
27861: LD_INT 3
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: LD_INT 3
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27896: LD_ADDR_VAR 0 20
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: LD_INT 3
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 3
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27937: LD_ADDR_VAR 0 21
27941: PUSH
27942: LD_INT 2
27944: NEG
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 3
27955: NEG
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: NEG
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27981: LD_ADDR_VAR 0 22
27985: PUSH
27986: LD_INT 2
27988: NEG
27989: PUSH
27990: LD_INT 3
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 3
28000: NEG
28001: PUSH
28002: LD_INT 2
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 3
28012: NEG
28013: PUSH
28014: LD_INT 3
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28027: LD_ADDR_VAR 0 23
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: LD_INT 3
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: LD_INT 4
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 3
28060: NEG
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28071: LD_ADDR_VAR 0 24
28075: PUSH
28076: LD_INT 3
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 3
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 4
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28112: LD_ADDR_VAR 0 25
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: LD_INT 3
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 4
28129: PUSH
28130: LD_INT 3
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 4
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28152: LD_ADDR_VAR 0 26
28156: PUSH
28157: LD_INT 0
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 4
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28193: LD_ADDR_VAR 0 27
28197: PUSH
28198: LD_INT 3
28200: NEG
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 3
28211: NEG
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 4
28222: NEG
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28237: LD_ADDR_VAR 0 28
28241: PUSH
28242: LD_INT 3
28244: NEG
28245: PUSH
28246: LD_INT 3
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 3
28256: NEG
28257: PUSH
28258: LD_INT 4
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 4
28268: NEG
28269: PUSH
28270: LD_INT 3
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28283: LD_ADDR_VAR 0 29
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 3
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: LD_INT 3
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: LD_INT 2
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 4
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 4
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 3
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 5
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 5
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: LD_INT 4
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 6
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 6
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 5
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28438: LD_ADDR_VAR 0 30
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 3
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 3
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 4
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 4
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 4
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 5
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 5
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 5
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 6
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 6
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28581: LD_ADDR_VAR 0 31
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 3
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 4
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 4
28628: PUSH
28629: LD_INT 4
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: LD_INT 4
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 5
28648: PUSH
28649: LD_INT 4
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 5
28658: PUSH
28659: LD_INT 5
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 4
28668: PUSH
28669: LD_INT 5
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 6
28678: PUSH
28679: LD_INT 5
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 6
28688: PUSH
28689: LD_INT 6
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 5
28698: PUSH
28699: LD_INT 6
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28720: LD_ADDR_VAR 0 32
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: LD_INT 3
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: LD_INT 3
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: LD_INT 4
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: LD_INT 4
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: LD_INT 3
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 5
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: LD_INT 5
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: LD_INT 4
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: LD_INT 6
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: LD_INT 6
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: LD_INT 5
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28863: LD_ADDR_VAR 0 33
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 3
28881: NEG
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 3
28892: NEG
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 3
28904: NEG
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 4
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 4
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 4
28938: NEG
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 5
28949: NEG
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 5
28960: NEG
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 5
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 6
28983: NEG
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 6
28994: NEG
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29018: LD_ADDR_VAR 0 34
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 3
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 3
29037: NEG
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 3
29049: NEG
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: NEG
29062: PUSH
29063: LD_INT 4
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 4
29073: NEG
29074: PUSH
29075: LD_INT 3
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 4
29085: NEG
29086: PUSH
29087: LD_INT 4
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 4
29097: NEG
29098: PUSH
29099: LD_INT 5
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 5
29109: NEG
29110: PUSH
29111: LD_INT 4
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 5
29121: NEG
29122: PUSH
29123: LD_INT 5
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 5
29133: NEG
29134: PUSH
29135: LD_INT 6
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 6
29145: NEG
29146: PUSH
29147: LD_INT 5
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 6
29157: NEG
29158: PUSH
29159: LD_INT 6
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29181: LD_ADDR_VAR 0 41
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: LD_INT 3
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: LD_INT 2
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29225: LD_ADDR_VAR 0 42
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29266: LD_ADDR_VAR 0 43
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29306: LD_ADDR_VAR 0 44
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 3
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29347: LD_ADDR_VAR 0 45
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 2
29365: NEG
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 3
29376: NEG
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29391: LD_ADDR_VAR 0 46
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 2
29410: NEG
29411: PUSH
29412: LD_INT 3
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 3
29422: NEG
29423: PUSH
29424: LD_INT 2
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: LIST
29436: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29437: LD_ADDR_VAR 0 47
29441: PUSH
29442: LD_INT 2
29444: NEG
29445: PUSH
29446: LD_INT 3
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29470: LD_ADDR_VAR 0 48
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29501: LD_ADDR_VAR 0 49
29505: PUSH
29506: LD_INT 3
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 3
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29530: LD_ADDR_VAR 0 50
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29559: LD_ADDR_VAR 0 51
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29590: LD_ADDR_VAR 0 52
29594: PUSH
29595: LD_INT 3
29597: NEG
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 3
29609: NEG
29610: PUSH
29611: LD_INT 2
29613: NEG
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29623: LD_ADDR_VAR 0 53
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 0
29642: PUSH
29643: LD_INT 3
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PUSH
29654: LD_INT 2
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29667: LD_ADDR_VAR 0 54
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 3
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 3
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29708: LD_ADDR_VAR 0 55
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 3
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29748: LD_ADDR_VAR 0 56
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29789: LD_ADDR_VAR 0 57
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29833: LD_ADDR_VAR 0 58
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: NEG
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29879: LD_ADDR_VAR 0 59
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 2
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29923: LD_ADDR_VAR 0 60
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29964: LD_ADDR_VAR 0 61
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30004: LD_ADDR_VAR 0 62
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30045: LD_ADDR_VAR 0 63
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 2
30063: NEG
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30089: LD_ADDR_VAR 0 64
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: ST_TO_ADDR
// end ; 2 :
30135: GO 33401
30137: LD_INT 2
30139: DOUBLE
30140: EQUAL
30141: IFTRUE 30145
30143: GO 33400
30145: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30146: LD_ADDR_VAR 0 29
30150: PUSH
30151: LD_INT 4
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 4
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 5
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 5
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 4
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: LD_INT 2
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 5
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 3
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 4
30276: PUSH
30277: LD_INT 4
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 4
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 2
30296: PUSH
30297: LD_INT 3
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 4
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 4
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 0
30336: PUSH
30337: LD_INT 4
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 3
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 4
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 5
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: LD_INT 5
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 0
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: NEG
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 3
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 4
30485: NEG
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 4
30496: NEG
30497: PUSH
30498: LD_INT 1
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 4
30508: NEG
30509: PUSH
30510: LD_INT 2
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 4
30531: NEG
30532: PUSH
30533: LD_INT 4
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 4
30543: NEG
30544: PUSH
30545: LD_INT 5
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 3
30555: NEG
30556: PUSH
30557: LD_INT 4
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: NEG
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 4
30579: NEG
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 5
30591: NEG
30592: PUSH
30593: LD_INT 4
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 5
30603: NEG
30604: PUSH
30605: LD_INT 5
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: NEG
30616: PUSH
30617: LD_INT 5
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 5
30627: NEG
30628: PUSH
30629: LD_INT 3
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30684: LD_ADDR_VAR 0 30
30688: PUSH
30689: LD_INT 4
30691: PUSH
30692: LD_INT 4
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: LD_INT 3
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 5
30711: PUSH
30712: LD_INT 4
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 5
30721: PUSH
30722: LD_INT 5
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 5
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: LD_INT 4
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: LD_INT 3
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 5
30761: PUSH
30762: LD_INT 3
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 5
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: LD_INT 4
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 4
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 2
30863: NEG
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 4
30874: NEG
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 4
30885: NEG
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 3
30897: NEG
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 3
30908: NEG
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 4
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 5
30930: NEG
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 5
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 5
30953: NEG
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 3
30965: NEG
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: NEG
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: LD_INT 2
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: NEG
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 4
31036: NEG
31037: PUSH
31038: LD_INT 3
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 4
31048: NEG
31049: PUSH
31050: LD_INT 4
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 2
31060: NEG
31061: PUSH
31062: LD_INT 4
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 4
31072: NEG
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 4
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 5
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 4
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 3
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 4
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: LD_INT 5
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 3
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: LD_INT 5
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31231: LD_ADDR_VAR 0 31
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 4
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: LD_INT 3
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 4
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 5
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: LD_INT 5
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: LD_INT 4
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 5
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: LD_INT 3
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 3
31331: NEG
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: LD_INT 1
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 3
31376: NEG
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 4
31387: NEG
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 4
31398: NEG
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 4
31410: NEG
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 4
31433: NEG
31434: PUSH
31435: LD_INT 4
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 4
31445: NEG
31446: PUSH
31447: LD_INT 5
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 3
31457: NEG
31458: PUSH
31459: LD_INT 4
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 3
31469: NEG
31470: PUSH
31471: LD_INT 3
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 4
31481: NEG
31482: PUSH
31483: LD_INT 3
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 5
31493: NEG
31494: PUSH
31495: LD_INT 4
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 5
31505: NEG
31506: PUSH
31507: LD_INT 5
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 3
31517: NEG
31518: PUSH
31519: LD_INT 5
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 5
31529: NEG
31530: PUSH
31531: LD_INT 3
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 4
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: LD_INT 3
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 2
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: LD_INT 4
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 2
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 4
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 4
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 5
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 5
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 4
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 5
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31781: LD_ADDR_VAR 0 32
31785: PUSH
31786: LD_INT 4
31788: NEG
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 4
31799: NEG
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 3
31822: NEG
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 4
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 5
31844: NEG
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 5
31855: NEG
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 5
31867: NEG
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: NEG
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 3
31890: NEG
31891: PUSH
31892: LD_INT 3
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 3
31902: NEG
31903: PUSH
31904: LD_INT 4
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 3
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 4
31950: NEG
31951: PUSH
31952: LD_INT 3
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 4
31962: NEG
31963: PUSH
31964: LD_INT 4
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: LD_INT 4
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 4
31986: NEG
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 4
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 5
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 4
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 3
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 4
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 5
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 3
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: LD_INT 5
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 4
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 4
32193: PUSH
32194: LD_INT 4
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 3
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 5
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 5
32223: PUSH
32224: LD_INT 5
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 4
32233: PUSH
32234: LD_INT 5
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 3
32243: PUSH
32244: LD_INT 4
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 5
32263: PUSH
32264: LD_INT 3
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: LD_INT 5
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32328: LD_ADDR_VAR 0 33
32332: PUSH
32333: LD_INT 4
32335: NEG
32336: PUSH
32337: LD_INT 4
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 4
32347: NEG
32348: PUSH
32349: LD_INT 5
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: LD_INT 4
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: NEG
32372: PUSH
32373: LD_INT 3
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 4
32383: NEG
32384: PUSH
32385: LD_INT 3
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 5
32395: NEG
32396: PUSH
32397: LD_INT 4
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 5
32407: NEG
32408: PUSH
32409: LD_INT 5
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: LD_INT 5
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 5
32431: NEG
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: LD_INT 4
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: LD_INT 3
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: LD_INT 3
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 4
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: LD_INT 4
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 5
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 5
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 4
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 2
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 5
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 3
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 4
32658: PUSH
32659: LD_INT 3
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 4
32668: PUSH
32669: LD_INT 4
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 4
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: LD_INT 4
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 4
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: LD_INT 4
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: LD_INT 5
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: LD_INT 5
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: LD_INT 4
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 5
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32866: LD_ADDR_VAR 0 34
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 4
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 5
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: LD_INT 4
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 3
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: LD_INT 4
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 5
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 3
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: LD_INT 5
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 3
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 4
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 4
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 4
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 4
33068: PUSH
33069: LD_INT 4
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 4
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 5
33088: PUSH
33089: LD_INT 4
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 5
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 4
33108: PUSH
33109: LD_INT 5
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: LD_INT 4
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 5
33138: PUSH
33139: LD_INT 3
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 3
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: LD_INT 3
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 4
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: LD_INT 4
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 4
33251: NEG
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: NEG
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 3
33274: NEG
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 3
33285: NEG
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 4
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 5
33307: NEG
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 5
33318: NEG
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 5
33330: NEG
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 3
33342: NEG
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
// end ; end ;
33398: GO 33401
33400: POP
// case btype of b_depot , b_warehouse :
33401: LD_VAR 0 1
33405: PUSH
33406: LD_INT 0
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33420
33412: LD_INT 1
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33621
33420: POP
// case nation of nation_american :
33421: LD_VAR 0 5
33425: PUSH
33426: LD_INT 1
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33490
33434: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33435: LD_ADDR_VAR 0 9
33439: PUSH
33440: LD_VAR 0 11
33444: PUSH
33445: LD_VAR 0 12
33449: PUSH
33450: LD_VAR 0 13
33454: PUSH
33455: LD_VAR 0 14
33459: PUSH
33460: LD_VAR 0 15
33464: PUSH
33465: LD_VAR 0 16
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: PUSH
33478: LD_VAR 0 4
33482: PUSH
33483: LD_INT 1
33485: PLUS
33486: ARRAY
33487: ST_TO_ADDR
33488: GO 33619
33490: LD_INT 2
33492: DOUBLE
33493: EQUAL
33494: IFTRUE 33498
33496: GO 33554
33498: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33499: LD_ADDR_VAR 0 9
33503: PUSH
33504: LD_VAR 0 17
33508: PUSH
33509: LD_VAR 0 18
33513: PUSH
33514: LD_VAR 0 19
33518: PUSH
33519: LD_VAR 0 20
33523: PUSH
33524: LD_VAR 0 21
33528: PUSH
33529: LD_VAR 0 22
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: PUSH
33542: LD_VAR 0 4
33546: PUSH
33547: LD_INT 1
33549: PLUS
33550: ARRAY
33551: ST_TO_ADDR
33552: GO 33619
33554: LD_INT 3
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33618
33562: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33563: LD_ADDR_VAR 0 9
33567: PUSH
33568: LD_VAR 0 23
33572: PUSH
33573: LD_VAR 0 24
33577: PUSH
33578: LD_VAR 0 25
33582: PUSH
33583: LD_VAR 0 26
33587: PUSH
33588: LD_VAR 0 27
33592: PUSH
33593: LD_VAR 0 28
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: PUSH
33606: LD_VAR 0 4
33610: PUSH
33611: LD_INT 1
33613: PLUS
33614: ARRAY
33615: ST_TO_ADDR
33616: GO 33619
33618: POP
33619: GO 34174
33621: LD_INT 2
33623: DOUBLE
33624: EQUAL
33625: IFTRUE 33635
33627: LD_INT 3
33629: DOUBLE
33630: EQUAL
33631: IFTRUE 33635
33633: GO 33691
33635: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33636: LD_ADDR_VAR 0 9
33640: PUSH
33641: LD_VAR 0 29
33645: PUSH
33646: LD_VAR 0 30
33650: PUSH
33651: LD_VAR 0 31
33655: PUSH
33656: LD_VAR 0 32
33660: PUSH
33661: LD_VAR 0 33
33665: PUSH
33666: LD_VAR 0 34
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: PUSH
33679: LD_VAR 0 4
33683: PUSH
33684: LD_INT 1
33686: PLUS
33687: ARRAY
33688: ST_TO_ADDR
33689: GO 34174
33691: LD_INT 16
33693: DOUBLE
33694: EQUAL
33695: IFTRUE 33753
33697: LD_INT 17
33699: DOUBLE
33700: EQUAL
33701: IFTRUE 33753
33703: LD_INT 18
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33753
33709: LD_INT 19
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33753
33715: LD_INT 22
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33753
33721: LD_INT 20
33723: DOUBLE
33724: EQUAL
33725: IFTRUE 33753
33727: LD_INT 21
33729: DOUBLE
33730: EQUAL
33731: IFTRUE 33753
33733: LD_INT 23
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33753
33739: LD_INT 24
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33753
33745: LD_INT 25
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33753
33751: GO 33809
33753: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33754: LD_ADDR_VAR 0 9
33758: PUSH
33759: LD_VAR 0 35
33763: PUSH
33764: LD_VAR 0 36
33768: PUSH
33769: LD_VAR 0 37
33773: PUSH
33774: LD_VAR 0 38
33778: PUSH
33779: LD_VAR 0 39
33783: PUSH
33784: LD_VAR 0 40
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: PUSH
33797: LD_VAR 0 4
33801: PUSH
33802: LD_INT 1
33804: PLUS
33805: ARRAY
33806: ST_TO_ADDR
33807: GO 34174
33809: LD_INT 6
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33865
33815: LD_INT 7
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33865
33821: LD_INT 8
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33865
33827: LD_INT 13
33829: DOUBLE
33830: EQUAL
33831: IFTRUE 33865
33833: LD_INT 12
33835: DOUBLE
33836: EQUAL
33837: IFTRUE 33865
33839: LD_INT 15
33841: DOUBLE
33842: EQUAL
33843: IFTRUE 33865
33845: LD_INT 11
33847: DOUBLE
33848: EQUAL
33849: IFTRUE 33865
33851: LD_INT 14
33853: DOUBLE
33854: EQUAL
33855: IFTRUE 33865
33857: LD_INT 10
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33865
33863: GO 33921
33865: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33866: LD_ADDR_VAR 0 9
33870: PUSH
33871: LD_VAR 0 41
33875: PUSH
33876: LD_VAR 0 42
33880: PUSH
33881: LD_VAR 0 43
33885: PUSH
33886: LD_VAR 0 44
33890: PUSH
33891: LD_VAR 0 45
33895: PUSH
33896: LD_VAR 0 46
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: PUSH
33909: LD_VAR 0 4
33913: PUSH
33914: LD_INT 1
33916: PLUS
33917: ARRAY
33918: ST_TO_ADDR
33919: GO 34174
33921: LD_INT 36
33923: DOUBLE
33924: EQUAL
33925: IFTRUE 33929
33927: GO 33985
33929: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33930: LD_ADDR_VAR 0 9
33934: PUSH
33935: LD_VAR 0 47
33939: PUSH
33940: LD_VAR 0 48
33944: PUSH
33945: LD_VAR 0 49
33949: PUSH
33950: LD_VAR 0 50
33954: PUSH
33955: LD_VAR 0 51
33959: PUSH
33960: LD_VAR 0 52
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: PUSH
33973: LD_VAR 0 4
33977: PUSH
33978: LD_INT 1
33980: PLUS
33981: ARRAY
33982: ST_TO_ADDR
33983: GO 34174
33985: LD_INT 4
33987: DOUBLE
33988: EQUAL
33989: IFTRUE 34011
33991: LD_INT 5
33993: DOUBLE
33994: EQUAL
33995: IFTRUE 34011
33997: LD_INT 34
33999: DOUBLE
34000: EQUAL
34001: IFTRUE 34011
34003: LD_INT 37
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34067
34011: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34012: LD_ADDR_VAR 0 9
34016: PUSH
34017: LD_VAR 0 53
34021: PUSH
34022: LD_VAR 0 54
34026: PUSH
34027: LD_VAR 0 55
34031: PUSH
34032: LD_VAR 0 56
34036: PUSH
34037: LD_VAR 0 57
34041: PUSH
34042: LD_VAR 0 58
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: PUSH
34055: LD_VAR 0 4
34059: PUSH
34060: LD_INT 1
34062: PLUS
34063: ARRAY
34064: ST_TO_ADDR
34065: GO 34174
34067: LD_INT 31
34069: DOUBLE
34070: EQUAL
34071: IFTRUE 34117
34073: LD_INT 32
34075: DOUBLE
34076: EQUAL
34077: IFTRUE 34117
34079: LD_INT 33
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34117
34085: LD_INT 27
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34117
34091: LD_INT 26
34093: DOUBLE
34094: EQUAL
34095: IFTRUE 34117
34097: LD_INT 28
34099: DOUBLE
34100: EQUAL
34101: IFTRUE 34117
34103: LD_INT 29
34105: DOUBLE
34106: EQUAL
34107: IFTRUE 34117
34109: LD_INT 30
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34117
34115: GO 34173
34117: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34118: LD_ADDR_VAR 0 9
34122: PUSH
34123: LD_VAR 0 59
34127: PUSH
34128: LD_VAR 0 60
34132: PUSH
34133: LD_VAR 0 61
34137: PUSH
34138: LD_VAR 0 62
34142: PUSH
34143: LD_VAR 0 63
34147: PUSH
34148: LD_VAR 0 64
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: PUSH
34161: LD_VAR 0 4
34165: PUSH
34166: LD_INT 1
34168: PLUS
34169: ARRAY
34170: ST_TO_ADDR
34171: GO 34174
34173: POP
// temp_list2 = [ ] ;
34174: LD_ADDR_VAR 0 10
34178: PUSH
34179: EMPTY
34180: ST_TO_ADDR
// for i in temp_list do
34181: LD_ADDR_VAR 0 8
34185: PUSH
34186: LD_VAR 0 9
34190: PUSH
34191: FOR_IN
34192: IFFALSE 34244
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34194: LD_ADDR_VAR 0 10
34198: PUSH
34199: LD_VAR 0 10
34203: PUSH
34204: LD_VAR 0 8
34208: PUSH
34209: LD_INT 1
34211: ARRAY
34212: PUSH
34213: LD_VAR 0 2
34217: PLUS
34218: PUSH
34219: LD_VAR 0 8
34223: PUSH
34224: LD_INT 2
34226: ARRAY
34227: PUSH
34228: LD_VAR 0 3
34232: PLUS
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: EMPTY
34239: LIST
34240: ADD
34241: ST_TO_ADDR
34242: GO 34191
34244: POP
34245: POP
// result = temp_list2 ;
34246: LD_ADDR_VAR 0 7
34250: PUSH
34251: LD_VAR 0 10
34255: ST_TO_ADDR
// end ;
34256: LD_VAR 0 7
34260: RET
// export function EnemyInRange ( unit , dist ) ; begin
34261: LD_INT 0
34263: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34264: LD_ADDR_VAR 0 3
34268: PUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 255
34278: PPUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 250
34288: PPUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 251
34298: PPUSH
34299: LD_VAR 0 2
34303: PPUSH
34304: CALL 7518 0 4
34308: PUSH
34309: LD_INT 4
34311: ARRAY
34312: ST_TO_ADDR
// end ;
34313: LD_VAR 0 3
34317: RET
// export function PlayerSeeMe ( unit ) ; begin
34318: LD_INT 0
34320: PPUSH
// result := See ( your_side , unit ) ;
34321: LD_ADDR_VAR 0 2
34325: PUSH
34326: LD_OWVAR 2
34330: PPUSH
34331: LD_VAR 0 1
34335: PPUSH
34336: CALL_OW 292
34340: ST_TO_ADDR
// end ;
34341: LD_VAR 0 2
34345: RET
// export function ReverseDir ( unit ) ; begin
34346: LD_INT 0
34348: PPUSH
// if not unit then
34349: LD_VAR 0 1
34353: NOT
34354: IFFALSE 34358
// exit ;
34356: GO 34381
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34358: LD_ADDR_VAR 0 2
34362: PUSH
34363: LD_VAR 0 1
34367: PPUSH
34368: CALL_OW 254
34372: PUSH
34373: LD_INT 3
34375: PLUS
34376: PUSH
34377: LD_INT 6
34379: MOD
34380: ST_TO_ADDR
// end ;
34381: LD_VAR 0 2
34385: RET
// export function ReverseArray ( array ) ; var i ; begin
34386: LD_INT 0
34388: PPUSH
34389: PPUSH
// if not array then
34390: LD_VAR 0 1
34394: NOT
34395: IFFALSE 34399
// exit ;
34397: GO 34454
// result := [ ] ;
34399: LD_ADDR_VAR 0 2
34403: PUSH
34404: EMPTY
34405: ST_TO_ADDR
// for i := array downto 1 do
34406: LD_ADDR_VAR 0 3
34410: PUSH
34411: DOUBLE
34412: LD_VAR 0 1
34416: INC
34417: ST_TO_ADDR
34418: LD_INT 1
34420: PUSH
34421: FOR_DOWNTO
34422: IFFALSE 34452
// result := Join ( result , array [ i ] ) ;
34424: LD_ADDR_VAR 0 2
34428: PUSH
34429: LD_VAR 0 2
34433: PPUSH
34434: LD_VAR 0 1
34438: PUSH
34439: LD_VAR 0 3
34443: ARRAY
34444: PPUSH
34445: CALL 39296 0 2
34449: ST_TO_ADDR
34450: GO 34421
34452: POP
34453: POP
// end ;
34454: LD_VAR 0 2
34458: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34459: LD_INT 0
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
// if not unit or not hexes then
34467: LD_VAR 0 1
34471: NOT
34472: IFTRUE 34481
34474: PUSH
34475: LD_VAR 0 2
34479: NOT
34480: OR
34481: IFFALSE 34485
// exit ;
34483: GO 34608
// dist := 9999 ;
34485: LD_ADDR_VAR 0 5
34489: PUSH
34490: LD_INT 9999
34492: ST_TO_ADDR
// for i = 1 to hexes do
34493: LD_ADDR_VAR 0 4
34497: PUSH
34498: DOUBLE
34499: LD_INT 1
34501: DEC
34502: ST_TO_ADDR
34503: LD_VAR 0 2
34507: PUSH
34508: FOR_TO
34509: IFFALSE 34596
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34511: LD_ADDR_VAR 0 6
34515: PUSH
34516: LD_VAR 0 1
34520: PPUSH
34521: LD_VAR 0 2
34525: PUSH
34526: LD_VAR 0 4
34530: ARRAY
34531: PUSH
34532: LD_INT 1
34534: ARRAY
34535: PPUSH
34536: LD_VAR 0 2
34540: PUSH
34541: LD_VAR 0 4
34545: ARRAY
34546: PUSH
34547: LD_INT 2
34549: ARRAY
34550: PPUSH
34551: CALL_OW 297
34555: ST_TO_ADDR
// if tdist < dist then
34556: LD_VAR 0 6
34560: PUSH
34561: LD_VAR 0 5
34565: LESS
34566: IFFALSE 34594
// begin hex := hexes [ i ] ;
34568: LD_ADDR_VAR 0 8
34572: PUSH
34573: LD_VAR 0 2
34577: PUSH
34578: LD_VAR 0 4
34582: ARRAY
34583: ST_TO_ADDR
// dist := tdist ;
34584: LD_ADDR_VAR 0 5
34588: PUSH
34589: LD_VAR 0 6
34593: ST_TO_ADDR
// end ; end ;
34594: GO 34508
34596: POP
34597: POP
// result := hex ;
34598: LD_ADDR_VAR 0 3
34602: PUSH
34603: LD_VAR 0 8
34607: ST_TO_ADDR
// end ;
34608: LD_VAR 0 3
34612: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34613: LD_INT 0
34615: PPUSH
34616: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34617: LD_VAR 0 1
34621: NOT
34622: IFTRUE 34661
34624: PUSH
34625: LD_VAR 0 1
34629: PUSH
34630: LD_INT 21
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 23
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PPUSH
34654: CALL_OW 69
34658: IN
34659: NOT
34660: OR
34661: IFFALSE 34665
// exit ;
34663: GO 34712
// for i = 1 to 3 do
34665: LD_ADDR_VAR 0 3
34669: PUSH
34670: DOUBLE
34671: LD_INT 1
34673: DEC
34674: ST_TO_ADDR
34675: LD_INT 3
34677: PUSH
34678: FOR_TO
34679: IFFALSE 34710
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34681: LD_VAR 0 1
34685: PPUSH
34686: CALL_OW 250
34690: PPUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 251
34700: PPUSH
34701: LD_INT 1
34703: PPUSH
34704: CALL_OW 453
34708: GO 34678
34710: POP
34711: POP
// end ;
34712: LD_VAR 0 2
34716: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34717: LD_INT 0
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
// if not unit or not enemy_unit then
34725: LD_VAR 0 1
34729: NOT
34730: IFTRUE 34739
34732: PUSH
34733: LD_VAR 0 2
34737: NOT
34738: OR
34739: IFFALSE 34743
// exit ;
34741: GO 35214
// if GetLives ( i ) < 250 then
34743: LD_VAR 0 4
34747: PPUSH
34748: CALL_OW 256
34752: PUSH
34753: LD_INT 250
34755: LESS
34756: IFFALSE 34769
// begin ComAutodestruct ( i ) ;
34758: LD_VAR 0 4
34762: PPUSH
34763: CALL 34613 0 1
// exit ;
34767: GO 35214
// end ; x := GetX ( enemy_unit ) ;
34769: LD_ADDR_VAR 0 7
34773: PUSH
34774: LD_VAR 0 2
34778: PPUSH
34779: CALL_OW 250
34783: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34784: LD_ADDR_VAR 0 8
34788: PUSH
34789: LD_VAR 0 2
34793: PPUSH
34794: CALL_OW 251
34798: ST_TO_ADDR
// if not x or not y then
34799: LD_VAR 0 7
34803: NOT
34804: IFTRUE 34813
34806: PUSH
34807: LD_VAR 0 8
34811: NOT
34812: OR
34813: IFFALSE 34817
// exit ;
34815: GO 35214
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34817: LD_ADDR_VAR 0 6
34821: PUSH
34822: LD_VAR 0 7
34826: PPUSH
34827: LD_INT 0
34829: PPUSH
34830: LD_INT 4
34832: PPUSH
34833: CALL_OW 272
34837: PUSH
34838: LD_VAR 0 8
34842: PPUSH
34843: LD_INT 0
34845: PPUSH
34846: LD_INT 4
34848: PPUSH
34849: CALL_OW 273
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_VAR 0 7
34862: PPUSH
34863: LD_INT 1
34865: PPUSH
34866: LD_INT 4
34868: PPUSH
34869: CALL_OW 272
34873: PUSH
34874: LD_VAR 0 8
34878: PPUSH
34879: LD_INT 1
34881: PPUSH
34882: LD_INT 4
34884: PPUSH
34885: CALL_OW 273
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_VAR 0 7
34898: PPUSH
34899: LD_INT 2
34901: PPUSH
34902: LD_INT 4
34904: PPUSH
34905: CALL_OW 272
34909: PUSH
34910: LD_VAR 0 8
34914: PPUSH
34915: LD_INT 2
34917: PPUSH
34918: LD_INT 4
34920: PPUSH
34921: CALL_OW 273
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_VAR 0 7
34934: PPUSH
34935: LD_INT 3
34937: PPUSH
34938: LD_INT 4
34940: PPUSH
34941: CALL_OW 272
34945: PUSH
34946: LD_VAR 0 8
34950: PPUSH
34951: LD_INT 3
34953: PPUSH
34954: LD_INT 4
34956: PPUSH
34957: CALL_OW 273
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_VAR 0 7
34970: PPUSH
34971: LD_INT 4
34973: PPUSH
34974: LD_INT 4
34976: PPUSH
34977: CALL_OW 272
34981: PUSH
34982: LD_VAR 0 8
34986: PPUSH
34987: LD_INT 4
34989: PPUSH
34990: LD_INT 4
34992: PPUSH
34993: CALL_OW 273
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_VAR 0 7
35006: PPUSH
35007: LD_INT 5
35009: PPUSH
35010: LD_INT 4
35012: PPUSH
35013: CALL_OW 272
35017: PUSH
35018: LD_VAR 0 8
35022: PPUSH
35023: LD_INT 5
35025: PPUSH
35026: LD_INT 4
35028: PPUSH
35029: CALL_OW 273
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
// for i = tmp downto 1 do
35046: LD_ADDR_VAR 0 4
35050: PUSH
35051: DOUBLE
35052: LD_VAR 0 6
35056: INC
35057: ST_TO_ADDR
35058: LD_INT 1
35060: PUSH
35061: FOR_DOWNTO
35062: IFFALSE 35165
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35064: LD_VAR 0 6
35068: PUSH
35069: LD_VAR 0 4
35073: ARRAY
35074: PUSH
35075: LD_INT 1
35077: ARRAY
35078: PPUSH
35079: LD_VAR 0 6
35083: PUSH
35084: LD_VAR 0 4
35088: ARRAY
35089: PUSH
35090: LD_INT 2
35092: ARRAY
35093: PPUSH
35094: CALL_OW 488
35098: NOT
35099: IFTRUE 35141
35101: PUSH
35102: LD_VAR 0 6
35106: PUSH
35107: LD_VAR 0 4
35111: ARRAY
35112: PUSH
35113: LD_INT 1
35115: ARRAY
35116: PPUSH
35117: LD_VAR 0 6
35121: PUSH
35122: LD_VAR 0 4
35126: ARRAY
35127: PUSH
35128: LD_INT 2
35130: ARRAY
35131: PPUSH
35132: CALL_OW 428
35136: PUSH
35137: LD_INT 0
35139: NONEQUAL
35140: OR
35141: IFFALSE 35163
// tmp := Delete ( tmp , i ) ;
35143: LD_ADDR_VAR 0 6
35147: PUSH
35148: LD_VAR 0 6
35152: PPUSH
35153: LD_VAR 0 4
35157: PPUSH
35158: CALL_OW 3
35162: ST_TO_ADDR
35163: GO 35061
35165: POP
35166: POP
// j := GetClosestHex ( unit , tmp ) ;
35167: LD_ADDR_VAR 0 5
35171: PUSH
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_VAR 0 6
35181: PPUSH
35182: CALL 34459 0 2
35186: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35187: LD_VAR 0 1
35191: PPUSH
35192: LD_VAR 0 5
35196: PUSH
35197: LD_INT 1
35199: ARRAY
35200: PPUSH
35201: LD_VAR 0 5
35205: PUSH
35206: LD_INT 2
35208: ARRAY
35209: PPUSH
35210: CALL_OW 111
// end ;
35214: LD_VAR 0 3
35218: RET
// export function PrepareApemanSoldier ( ) ; begin
35219: LD_INT 0
35221: PPUSH
// uc_nation := 0 ;
35222: LD_ADDR_OWVAR 21
35226: PUSH
35227: LD_INT 0
35229: ST_TO_ADDR
// hc_sex := sex_male ;
35230: LD_ADDR_OWVAR 27
35234: PUSH
35235: LD_INT 1
35237: ST_TO_ADDR
// hc_name :=  ;
35238: LD_ADDR_OWVAR 26
35242: PUSH
35243: LD_STRING 
35245: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35246: LD_ADDR_OWVAR 28
35250: PUSH
35251: LD_INT 15
35253: ST_TO_ADDR
// hc_gallery :=  ;
35254: LD_ADDR_OWVAR 33
35258: PUSH
35259: LD_STRING 
35261: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35262: LD_ADDR_OWVAR 31
35266: PUSH
35267: LD_INT 0
35269: PPUSH
35270: LD_INT 3
35272: PPUSH
35273: CALL_OW 12
35277: PUSH
35278: LD_INT 0
35280: PPUSH
35281: LD_INT 3
35283: PPUSH
35284: CALL_OW 12
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35301: LD_ADDR_OWVAR 29
35305: PUSH
35306: LD_INT 12
35308: PUSH
35309: LD_INT 12
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: ST_TO_ADDR
// end ;
35316: LD_VAR 0 1
35320: RET
// export function PrepareApemanEngineer ( ) ; begin
35321: LD_INT 0
35323: PPUSH
// uc_nation := 0 ;
35324: LD_ADDR_OWVAR 21
35328: PUSH
35329: LD_INT 0
35331: ST_TO_ADDR
// hc_sex := sex_male ;
35332: LD_ADDR_OWVAR 27
35336: PUSH
35337: LD_INT 1
35339: ST_TO_ADDR
// hc_name :=  ;
35340: LD_ADDR_OWVAR 26
35344: PUSH
35345: LD_STRING 
35347: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35348: LD_ADDR_OWVAR 28
35352: PUSH
35353: LD_INT 16
35355: ST_TO_ADDR
// hc_gallery :=  ;
35356: LD_ADDR_OWVAR 33
35360: PUSH
35361: LD_STRING 
35363: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35364: LD_ADDR_OWVAR 31
35368: PUSH
35369: LD_INT 0
35371: PPUSH
35372: LD_INT 3
35374: PPUSH
35375: CALL_OW 12
35379: PUSH
35380: LD_INT 0
35382: PPUSH
35383: LD_INT 3
35385: PPUSH
35386: CALL_OW 12
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35403: LD_ADDR_OWVAR 29
35407: PUSH
35408: LD_INT 12
35410: PUSH
35411: LD_INT 12
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: ST_TO_ADDR
// end ;
35418: LD_VAR 0 1
35422: RET
// export function PrepareApeman ( agressivity ) ; begin
35423: LD_INT 0
35425: PPUSH
// uc_side := 0 ;
35426: LD_ADDR_OWVAR 20
35430: PUSH
35431: LD_INT 0
35433: ST_TO_ADDR
// uc_nation := 0 ;
35434: LD_ADDR_OWVAR 21
35438: PUSH
35439: LD_INT 0
35441: ST_TO_ADDR
// hc_sex := sex_male ;
35442: LD_ADDR_OWVAR 27
35446: PUSH
35447: LD_INT 1
35449: ST_TO_ADDR
// hc_class := class_apeman ;
35450: LD_ADDR_OWVAR 28
35454: PUSH
35455: LD_INT 12
35457: ST_TO_ADDR
// hc_gallery :=  ;
35458: LD_ADDR_OWVAR 33
35462: PUSH
35463: LD_STRING 
35465: ST_TO_ADDR
// hc_name :=  ;
35466: LD_ADDR_OWVAR 26
35470: PUSH
35471: LD_STRING 
35473: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35474: LD_ADDR_OWVAR 29
35478: PUSH
35479: LD_INT 12
35481: PUSH
35482: LD_INT 12
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: ST_TO_ADDR
// if agressivity = 0 then
35489: LD_VAR 0 1
35493: PUSH
35494: LD_INT 0
35496: EQUAL
35497: IFFALSE 35509
// hc_agressivity := 0 else
35499: LD_ADDR_OWVAR 35
35503: PUSH
35504: LD_INT 0
35506: ST_TO_ADDR
35507: GO 35530
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35509: LD_ADDR_OWVAR 35
35513: PUSH
35514: LD_VAR 0 1
35518: NEG
35519: PPUSH
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 12
35529: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35530: LD_ADDR_OWVAR 31
35534: PUSH
35535: LD_INT 0
35537: PPUSH
35538: LD_INT 3
35540: PPUSH
35541: CALL_OW 12
35545: PUSH
35546: LD_INT 0
35548: PPUSH
35549: LD_INT 3
35551: PPUSH
35552: CALL_OW 12
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// end ;
35569: LD_VAR 0 2
35573: RET
// export function PrepareTiger ( agressivity ) ; begin
35574: LD_INT 0
35576: PPUSH
// uc_side := 0 ;
35577: LD_ADDR_OWVAR 20
35581: PUSH
35582: LD_INT 0
35584: ST_TO_ADDR
// uc_nation := 0 ;
35585: LD_ADDR_OWVAR 21
35589: PUSH
35590: LD_INT 0
35592: ST_TO_ADDR
// InitHc ;
35593: CALL_OW 19
// hc_class := class_tiger ;
35597: LD_ADDR_OWVAR 28
35601: PUSH
35602: LD_INT 14
35604: ST_TO_ADDR
// hc_gallery :=  ;
35605: LD_ADDR_OWVAR 33
35609: PUSH
35610: LD_STRING 
35612: ST_TO_ADDR
// hc_name :=  ;
35613: LD_ADDR_OWVAR 26
35617: PUSH
35618: LD_STRING 
35620: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35621: LD_ADDR_OWVAR 35
35625: PUSH
35626: LD_VAR 0 1
35630: NEG
35631: PPUSH
35632: LD_VAR 0 1
35636: PPUSH
35637: CALL_OW 12
35641: ST_TO_ADDR
// end ;
35642: LD_VAR 0 2
35646: RET
// export function PrepareEnchidna ( ) ; begin
35647: LD_INT 0
35649: PPUSH
// uc_side := 0 ;
35650: LD_ADDR_OWVAR 20
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// uc_nation := 0 ;
35658: LD_ADDR_OWVAR 21
35662: PUSH
35663: LD_INT 0
35665: ST_TO_ADDR
// InitHc ;
35666: CALL_OW 19
// hc_class := class_baggie ;
35670: LD_ADDR_OWVAR 28
35674: PUSH
35675: LD_INT 13
35677: ST_TO_ADDR
// hc_gallery :=  ;
35678: LD_ADDR_OWVAR 33
35682: PUSH
35683: LD_STRING 
35685: ST_TO_ADDR
// hc_name :=  ;
35686: LD_ADDR_OWVAR 26
35690: PUSH
35691: LD_STRING 
35693: ST_TO_ADDR
// end ;
35694: LD_VAR 0 1
35698: RET
// export function PrepareFrog ( ) ; begin
35699: LD_INT 0
35701: PPUSH
// uc_side := 0 ;
35702: LD_ADDR_OWVAR 20
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// uc_nation := 0 ;
35710: LD_ADDR_OWVAR 21
35714: PUSH
35715: LD_INT 0
35717: ST_TO_ADDR
// InitHc ;
35718: CALL_OW 19
// hc_class := class_frog ;
35722: LD_ADDR_OWVAR 28
35726: PUSH
35727: LD_INT 19
35729: ST_TO_ADDR
// hc_gallery :=  ;
35730: LD_ADDR_OWVAR 33
35734: PUSH
35735: LD_STRING 
35737: ST_TO_ADDR
// hc_name :=  ;
35738: LD_ADDR_OWVAR 26
35742: PUSH
35743: LD_STRING 
35745: ST_TO_ADDR
// end ;
35746: LD_VAR 0 1
35750: RET
// export function PrepareFish ( ) ; begin
35751: LD_INT 0
35753: PPUSH
// uc_side := 0 ;
35754: LD_ADDR_OWVAR 20
35758: PUSH
35759: LD_INT 0
35761: ST_TO_ADDR
// uc_nation := 0 ;
35762: LD_ADDR_OWVAR 21
35766: PUSH
35767: LD_INT 0
35769: ST_TO_ADDR
// InitHc ;
35770: CALL_OW 19
// hc_class := class_fish ;
35774: LD_ADDR_OWVAR 28
35778: PUSH
35779: LD_INT 20
35781: ST_TO_ADDR
// hc_gallery :=  ;
35782: LD_ADDR_OWVAR 33
35786: PUSH
35787: LD_STRING 
35789: ST_TO_ADDR
// hc_name :=  ;
35790: LD_ADDR_OWVAR 26
35794: PUSH
35795: LD_STRING 
35797: ST_TO_ADDR
// end ;
35798: LD_VAR 0 1
35802: RET
// export function PrepareBird ( ) ; begin
35803: LD_INT 0
35805: PPUSH
// uc_side := 0 ;
35806: LD_ADDR_OWVAR 20
35810: PUSH
35811: LD_INT 0
35813: ST_TO_ADDR
// uc_nation := 0 ;
35814: LD_ADDR_OWVAR 21
35818: PUSH
35819: LD_INT 0
35821: ST_TO_ADDR
// InitHc ;
35822: CALL_OW 19
// hc_class := class_phororhacos ;
35826: LD_ADDR_OWVAR 28
35830: PUSH
35831: LD_INT 18
35833: ST_TO_ADDR
// hc_gallery :=  ;
35834: LD_ADDR_OWVAR 33
35838: PUSH
35839: LD_STRING 
35841: ST_TO_ADDR
// hc_name :=  ;
35842: LD_ADDR_OWVAR 26
35846: PUSH
35847: LD_STRING 
35849: ST_TO_ADDR
// end ;
35850: LD_VAR 0 1
35854: RET
// export function PrepareHorse ( ) ; begin
35855: LD_INT 0
35857: PPUSH
// uc_side := 0 ;
35858: LD_ADDR_OWVAR 20
35862: PUSH
35863: LD_INT 0
35865: ST_TO_ADDR
// uc_nation := 0 ;
35866: LD_ADDR_OWVAR 21
35870: PUSH
35871: LD_INT 0
35873: ST_TO_ADDR
// InitHc ;
35874: CALL_OW 19
// hc_class := class_horse ;
35878: LD_ADDR_OWVAR 28
35882: PUSH
35883: LD_INT 21
35885: ST_TO_ADDR
// hc_gallery :=  ;
35886: LD_ADDR_OWVAR 33
35890: PUSH
35891: LD_STRING 
35893: ST_TO_ADDR
// hc_name :=  ;
35894: LD_ADDR_OWVAR 26
35898: PUSH
35899: LD_STRING 
35901: ST_TO_ADDR
// end ;
35902: LD_VAR 0 1
35906: RET
// export function PrepareMastodont ( ) ; begin
35907: LD_INT 0
35909: PPUSH
// uc_side := 0 ;
35910: LD_ADDR_OWVAR 20
35914: PUSH
35915: LD_INT 0
35917: ST_TO_ADDR
// uc_nation := 0 ;
35918: LD_ADDR_OWVAR 21
35922: PUSH
35923: LD_INT 0
35925: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35926: LD_ADDR_OWVAR 37
35930: PUSH
35931: LD_INT 31
35933: ST_TO_ADDR
// vc_control := control_rider ;
35934: LD_ADDR_OWVAR 38
35938: PUSH
35939: LD_INT 4
35941: ST_TO_ADDR
// end ;
35942: LD_VAR 0 1
35946: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35947: LD_INT 0
35949: PPUSH
35950: PPUSH
35951: PPUSH
// uc_side = 0 ;
35952: LD_ADDR_OWVAR 20
35956: PUSH
35957: LD_INT 0
35959: ST_TO_ADDR
// uc_nation = 0 ;
35960: LD_ADDR_OWVAR 21
35964: PUSH
35965: LD_INT 0
35967: ST_TO_ADDR
// InitHc_All ( ) ;
35968: CALL_OW 584
// InitVc ;
35972: CALL_OW 20
// if mastodonts then
35976: LD_VAR 0 6
35980: IFFALSE 36047
// for i = 1 to mastodonts do
35982: LD_ADDR_VAR 0 11
35986: PUSH
35987: DOUBLE
35988: LD_INT 1
35990: DEC
35991: ST_TO_ADDR
35992: LD_VAR 0 6
35996: PUSH
35997: FOR_TO
35998: IFFALSE 36045
// begin vc_chassis := 31 ;
36000: LD_ADDR_OWVAR 37
36004: PUSH
36005: LD_INT 31
36007: ST_TO_ADDR
// vc_control := control_rider ;
36008: LD_ADDR_OWVAR 38
36012: PUSH
36013: LD_INT 4
36015: ST_TO_ADDR
// animal := CreateVehicle ;
36016: LD_ADDR_VAR 0 12
36020: PUSH
36021: CALL_OW 45
36025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36026: LD_VAR 0 12
36030: PPUSH
36031: LD_VAR 0 8
36035: PPUSH
36036: LD_INT 0
36038: PPUSH
36039: CALL 38189 0 3
// end ;
36043: GO 35997
36045: POP
36046: POP
// if horses then
36047: LD_VAR 0 5
36051: IFFALSE 36118
// for i = 1 to horses do
36053: LD_ADDR_VAR 0 11
36057: PUSH
36058: DOUBLE
36059: LD_INT 1
36061: DEC
36062: ST_TO_ADDR
36063: LD_VAR 0 5
36067: PUSH
36068: FOR_TO
36069: IFFALSE 36116
// begin hc_class := 21 ;
36071: LD_ADDR_OWVAR 28
36075: PUSH
36076: LD_INT 21
36078: ST_TO_ADDR
// hc_gallery :=  ;
36079: LD_ADDR_OWVAR 33
36083: PUSH
36084: LD_STRING 
36086: ST_TO_ADDR
// animal := CreateHuman ;
36087: LD_ADDR_VAR 0 12
36091: PUSH
36092: CALL_OW 44
36096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36097: LD_VAR 0 12
36101: PPUSH
36102: LD_VAR 0 8
36106: PPUSH
36107: LD_INT 0
36109: PPUSH
36110: CALL 38189 0 3
// end ;
36114: GO 36068
36116: POP
36117: POP
// if birds then
36118: LD_VAR 0 1
36122: IFFALSE 36189
// for i = 1 to birds do
36124: LD_ADDR_VAR 0 11
36128: PUSH
36129: DOUBLE
36130: LD_INT 1
36132: DEC
36133: ST_TO_ADDR
36134: LD_VAR 0 1
36138: PUSH
36139: FOR_TO
36140: IFFALSE 36187
// begin hc_class := 18 ;
36142: LD_ADDR_OWVAR 28
36146: PUSH
36147: LD_INT 18
36149: ST_TO_ADDR
// hc_gallery =  ;
36150: LD_ADDR_OWVAR 33
36154: PUSH
36155: LD_STRING 
36157: ST_TO_ADDR
// animal := CreateHuman ;
36158: LD_ADDR_VAR 0 12
36162: PUSH
36163: CALL_OW 44
36167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36168: LD_VAR 0 12
36172: PPUSH
36173: LD_VAR 0 8
36177: PPUSH
36178: LD_INT 0
36180: PPUSH
36181: CALL 38189 0 3
// end ;
36185: GO 36139
36187: POP
36188: POP
// if tigers then
36189: LD_VAR 0 2
36193: IFFALSE 36277
// for i = 1 to tigers do
36195: LD_ADDR_VAR 0 11
36199: PUSH
36200: DOUBLE
36201: LD_INT 1
36203: DEC
36204: ST_TO_ADDR
36205: LD_VAR 0 2
36209: PUSH
36210: FOR_TO
36211: IFFALSE 36275
// begin hc_class = class_tiger ;
36213: LD_ADDR_OWVAR 28
36217: PUSH
36218: LD_INT 14
36220: ST_TO_ADDR
// hc_gallery =  ;
36221: LD_ADDR_OWVAR 33
36225: PUSH
36226: LD_STRING 
36228: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36229: LD_ADDR_OWVAR 35
36233: PUSH
36234: LD_INT 7
36236: NEG
36237: PPUSH
36238: LD_INT 7
36240: PPUSH
36241: CALL_OW 12
36245: ST_TO_ADDR
// animal := CreateHuman ;
36246: LD_ADDR_VAR 0 12
36250: PUSH
36251: CALL_OW 44
36255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36256: LD_VAR 0 12
36260: PPUSH
36261: LD_VAR 0 8
36265: PPUSH
36266: LD_INT 0
36268: PPUSH
36269: CALL 38189 0 3
// end ;
36273: GO 36210
36275: POP
36276: POP
// if apemans then
36277: LD_VAR 0 3
36281: IFFALSE 36404
// for i = 1 to apemans do
36283: LD_ADDR_VAR 0 11
36287: PUSH
36288: DOUBLE
36289: LD_INT 1
36291: DEC
36292: ST_TO_ADDR
36293: LD_VAR 0 3
36297: PUSH
36298: FOR_TO
36299: IFFALSE 36402
// begin hc_class = class_apeman ;
36301: LD_ADDR_OWVAR 28
36305: PUSH
36306: LD_INT 12
36308: ST_TO_ADDR
// hc_gallery =  ;
36309: LD_ADDR_OWVAR 33
36313: PUSH
36314: LD_STRING 
36316: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36317: LD_ADDR_OWVAR 35
36321: PUSH
36322: LD_INT 2
36324: NEG
36325: PPUSH
36326: LD_INT 2
36328: PPUSH
36329: CALL_OW 12
36333: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36334: LD_ADDR_OWVAR 31
36338: PUSH
36339: LD_INT 1
36341: PPUSH
36342: LD_INT 3
36344: PPUSH
36345: CALL_OW 12
36349: PUSH
36350: LD_INT 1
36352: PPUSH
36353: LD_INT 3
36355: PPUSH
36356: CALL_OW 12
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: ST_TO_ADDR
// animal := CreateHuman ;
36373: LD_ADDR_VAR 0 12
36377: PUSH
36378: CALL_OW 44
36382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36383: LD_VAR 0 12
36387: PPUSH
36388: LD_VAR 0 8
36392: PPUSH
36393: LD_INT 0
36395: PPUSH
36396: CALL 38189 0 3
// end ;
36400: GO 36298
36402: POP
36403: POP
// if enchidnas then
36404: LD_VAR 0 4
36408: IFFALSE 36475
// for i = 1 to enchidnas do
36410: LD_ADDR_VAR 0 11
36414: PUSH
36415: DOUBLE
36416: LD_INT 1
36418: DEC
36419: ST_TO_ADDR
36420: LD_VAR 0 4
36424: PUSH
36425: FOR_TO
36426: IFFALSE 36473
// begin hc_class = 13 ;
36428: LD_ADDR_OWVAR 28
36432: PUSH
36433: LD_INT 13
36435: ST_TO_ADDR
// hc_gallery =  ;
36436: LD_ADDR_OWVAR 33
36440: PUSH
36441: LD_STRING 
36443: ST_TO_ADDR
// animal := CreateHuman ;
36444: LD_ADDR_VAR 0 12
36448: PUSH
36449: CALL_OW 44
36453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36454: LD_VAR 0 12
36458: PPUSH
36459: LD_VAR 0 8
36463: PPUSH
36464: LD_INT 0
36466: PPUSH
36467: CALL 38189 0 3
// end ;
36471: GO 36425
36473: POP
36474: POP
// if fishes then
36475: LD_VAR 0 7
36479: IFFALSE 36546
// for i = 1 to fishes do
36481: LD_ADDR_VAR 0 11
36485: PUSH
36486: DOUBLE
36487: LD_INT 1
36489: DEC
36490: ST_TO_ADDR
36491: LD_VAR 0 7
36495: PUSH
36496: FOR_TO
36497: IFFALSE 36544
// begin hc_class = 20 ;
36499: LD_ADDR_OWVAR 28
36503: PUSH
36504: LD_INT 20
36506: ST_TO_ADDR
// hc_gallery =  ;
36507: LD_ADDR_OWVAR 33
36511: PUSH
36512: LD_STRING 
36514: ST_TO_ADDR
// animal := CreateHuman ;
36515: LD_ADDR_VAR 0 12
36519: PUSH
36520: CALL_OW 44
36524: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36525: LD_VAR 0 12
36529: PPUSH
36530: LD_VAR 0 9
36534: PPUSH
36535: LD_INT 0
36537: PPUSH
36538: CALL 38189 0 3
// end ;
36542: GO 36496
36544: POP
36545: POP
// end ;
36546: LD_VAR 0 10
36550: RET
// export function WantHeal ( sci , unit ) ; begin
36551: LD_INT 0
36553: PPUSH
// if GetTaskList ( sci ) > 0 then
36554: LD_VAR 0 1
36558: PPUSH
36559: CALL_OW 437
36563: PUSH
36564: LD_INT 0
36566: GREATER
36567: IFFALSE 36639
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36569: LD_VAR 0 1
36573: PPUSH
36574: CALL_OW 437
36578: PUSH
36579: LD_INT 1
36581: ARRAY
36582: PUSH
36583: LD_INT 1
36585: ARRAY
36586: PUSH
36587: LD_STRING l
36589: EQUAL
36590: IFFALSE 36617
36592: PUSH
36593: LD_VAR 0 1
36597: PPUSH
36598: CALL_OW 437
36602: PUSH
36603: LD_INT 1
36605: ARRAY
36606: PUSH
36607: LD_INT 4
36609: ARRAY
36610: PUSH
36611: LD_VAR 0 2
36615: EQUAL
36616: AND
36617: IFFALSE 36629
// result := true else
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_INT 1
36626: ST_TO_ADDR
36627: GO 36637
// result := false ;
36629: LD_ADDR_VAR 0 3
36633: PUSH
36634: LD_INT 0
36636: ST_TO_ADDR
// end else
36637: GO 36647
// result := false ;
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: LD_INT 0
36646: ST_TO_ADDR
// end ;
36647: LD_VAR 0 3
36651: RET
// export function HealTarget ( sci ) ; begin
36652: LD_INT 0
36654: PPUSH
// if not sci then
36655: LD_VAR 0 1
36659: NOT
36660: IFFALSE 36664
// exit ;
36662: GO 36729
// result := 0 ;
36664: LD_ADDR_VAR 0 2
36668: PUSH
36669: LD_INT 0
36671: ST_TO_ADDR
// if GetTaskList ( sci ) then
36672: LD_VAR 0 1
36676: PPUSH
36677: CALL_OW 437
36681: IFFALSE 36729
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36683: LD_VAR 0 1
36687: PPUSH
36688: CALL_OW 437
36692: PUSH
36693: LD_INT 1
36695: ARRAY
36696: PUSH
36697: LD_INT 1
36699: ARRAY
36700: PUSH
36701: LD_STRING l
36703: EQUAL
36704: IFFALSE 36729
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36706: LD_ADDR_VAR 0 2
36710: PUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 437
36720: PUSH
36721: LD_INT 1
36723: ARRAY
36724: PUSH
36725: LD_INT 4
36727: ARRAY
36728: ST_TO_ADDR
// end ;
36729: LD_VAR 0 2
36733: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36734: LD_INT 0
36736: PPUSH
36737: PPUSH
36738: PPUSH
36739: PPUSH
// if not base_units then
36740: LD_VAR 0 1
36744: NOT
36745: IFFALSE 36749
// exit ;
36747: GO 36836
// result := false ;
36749: LD_ADDR_VAR 0 2
36753: PUSH
36754: LD_INT 0
36756: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36757: LD_ADDR_VAR 0 5
36761: PUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: LD_INT 21
36769: PUSH
36770: LD_INT 3
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PPUSH
36777: CALL_OW 72
36781: ST_TO_ADDR
// if not tmp then
36782: LD_VAR 0 5
36786: NOT
36787: IFFALSE 36791
// exit ;
36789: GO 36836
// for i in tmp do
36791: LD_ADDR_VAR 0 3
36795: PUSH
36796: LD_VAR 0 5
36800: PUSH
36801: FOR_IN
36802: IFFALSE 36834
// begin result := EnemyInRange ( i , 22 ) ;
36804: LD_ADDR_VAR 0 2
36808: PUSH
36809: LD_VAR 0 3
36813: PPUSH
36814: LD_INT 22
36816: PPUSH
36817: CALL 34261 0 2
36821: ST_TO_ADDR
// if result then
36822: LD_VAR 0 2
36826: IFFALSE 36832
// exit ;
36828: POP
36829: POP
36830: GO 36836
// end ;
36832: GO 36801
36834: POP
36835: POP
// end ;
36836: LD_VAR 0 2
36840: RET
// export function FilterByTag ( units , tag ) ; begin
36841: LD_INT 0
36843: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: LD_INT 120
36856: PUSH
36857: LD_VAR 0 2
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PPUSH
36866: CALL_OW 72
36870: ST_TO_ADDR
// end ;
36871: LD_VAR 0 3
36875: RET
// export function IsDriver ( un ) ; begin
36876: LD_INT 0
36878: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36879: LD_ADDR_VAR 0 2
36883: PUSH
36884: LD_VAR 0 1
36888: PUSH
36889: LD_INT 55
36891: PUSH
36892: EMPTY
36893: LIST
36894: PPUSH
36895: CALL_OW 69
36899: IN
36900: ST_TO_ADDR
// end ;
36901: LD_VAR 0 2
36905: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36906: LD_INT 0
36908: PPUSH
36909: PPUSH
// list := [ ] ;
36910: LD_ADDR_VAR 0 5
36914: PUSH
36915: EMPTY
36916: ST_TO_ADDR
// case d of 0 :
36917: LD_VAR 0 3
36921: PUSH
36922: LD_INT 0
36924: DOUBLE
36925: EQUAL
36926: IFTRUE 36930
36928: GO 37063
36930: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36931: LD_ADDR_VAR 0 5
36935: PUSH
36936: LD_VAR 0 1
36940: PUSH
36941: LD_INT 4
36943: MINUS
36944: PUSH
36945: LD_VAR 0 2
36949: PUSH
36950: LD_INT 4
36952: MINUS
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: PUSH
36962: LD_VAR 0 1
36966: PUSH
36967: LD_INT 3
36969: MINUS
36970: PUSH
36971: LD_VAR 0 2
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: PUSH
36984: LD_VAR 0 1
36988: PUSH
36989: LD_INT 4
36991: PLUS
36992: PUSH
36993: LD_VAR 0 2
36997: PUSH
36998: LD_INT 4
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: LD_INT 3
37013: PLUS
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 3
37022: PLUS
37023: PUSH
37024: LD_INT 5
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: LD_VAR 0 1
37036: PUSH
37037: LD_VAR 0 2
37041: PUSH
37042: LD_INT 4
37044: PLUS
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: ST_TO_ADDR
// end ; 1 :
37061: GO 37761
37063: LD_INT 1
37065: DOUBLE
37066: EQUAL
37067: IFTRUE 37071
37069: GO 37204
37071: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37072: LD_ADDR_VAR 0 5
37076: PUSH
37077: LD_VAR 0 1
37081: PUSH
37082: LD_VAR 0 2
37086: PUSH
37087: LD_INT 4
37089: MINUS
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: PUSH
37099: LD_VAR 0 1
37103: PUSH
37104: LD_INT 3
37106: MINUS
37107: PUSH
37108: LD_VAR 0 2
37112: PUSH
37113: LD_INT 3
37115: MINUS
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_INT 4
37132: MINUS
37133: PUSH
37134: LD_VAR 0 2
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: LD_VAR 0 2
37156: PUSH
37157: LD_INT 3
37159: PLUS
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: PUSH
37169: LD_VAR 0 1
37173: PUSH
37174: LD_INT 4
37176: PLUS
37177: PUSH
37178: LD_VAR 0 2
37182: PUSH
37183: LD_INT 4
37185: PLUS
37186: PUSH
37187: LD_INT 5
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// end ; 2 :
37202: GO 37761
37204: LD_INT 2
37206: DOUBLE
37207: EQUAL
37208: IFTRUE 37212
37210: GO 37341
37212: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37213: LD_ADDR_VAR 0 5
37217: PUSH
37218: LD_VAR 0 1
37222: PUSH
37223: LD_VAR 0 2
37227: PUSH
37228: LD_INT 3
37230: MINUS
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: LIST
37239: PUSH
37240: LD_VAR 0 1
37244: PUSH
37245: LD_INT 4
37247: PLUS
37248: PUSH
37249: LD_VAR 0 2
37253: PUSH
37254: LD_INT 4
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: PUSH
37262: LD_VAR 0 1
37266: PUSH
37267: LD_VAR 0 2
37271: PUSH
37272: LD_INT 4
37274: PLUS
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: PUSH
37284: LD_VAR 0 1
37288: PUSH
37289: LD_INT 3
37291: MINUS
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: PUSH
37306: LD_VAR 0 1
37310: PUSH
37311: LD_INT 4
37313: MINUS
37314: PUSH
37315: LD_VAR 0 2
37319: PUSH
37320: LD_INT 4
37322: MINUS
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
// end ; 3 :
37339: GO 37761
37341: LD_INT 3
37343: DOUBLE
37344: EQUAL
37345: IFTRUE 37349
37347: GO 37482
37349: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37350: LD_ADDR_VAR 0 5
37354: PUSH
37355: LD_VAR 0 1
37359: PUSH
37360: LD_INT 3
37362: PLUS
37363: PUSH
37364: LD_VAR 0 2
37368: PUSH
37369: LD_INT 4
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: PUSH
37377: LD_VAR 0 1
37381: PUSH
37382: LD_INT 4
37384: PLUS
37385: PUSH
37386: LD_VAR 0 2
37390: PUSH
37391: LD_INT 4
37393: PLUS
37394: PUSH
37395: LD_INT 5
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: PUSH
37403: LD_VAR 0 1
37407: PUSH
37408: LD_INT 4
37410: MINUS
37411: PUSH
37412: LD_VAR 0 2
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: PUSH
37425: LD_VAR 0 1
37429: PUSH
37430: LD_VAR 0 2
37434: PUSH
37435: LD_INT 4
37437: MINUS
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: PUSH
37447: LD_VAR 0 1
37451: PUSH
37452: LD_INT 3
37454: MINUS
37455: PUSH
37456: LD_VAR 0 2
37460: PUSH
37461: LD_INT 3
37463: MINUS
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// end ; 4 :
37480: GO 37761
37482: LD_INT 4
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37490
37488: GO 37623
37490: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37491: LD_ADDR_VAR 0 5
37495: PUSH
37496: LD_VAR 0 1
37500: PUSH
37501: LD_VAR 0 2
37505: PUSH
37506: LD_INT 4
37508: PLUS
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: PUSH
37518: LD_VAR 0 1
37522: PUSH
37523: LD_INT 3
37525: PLUS
37526: PUSH
37527: LD_VAR 0 2
37531: PUSH
37532: LD_INT 3
37534: PLUS
37535: PUSH
37536: LD_INT 5
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: PUSH
37544: LD_VAR 0 1
37548: PUSH
37549: LD_INT 4
37551: PLUS
37552: PUSH
37553: LD_VAR 0 2
37557: PUSH
37558: LD_INT 4
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: PUSH
37566: LD_VAR 0 1
37570: PUSH
37571: LD_VAR 0 2
37575: PUSH
37576: LD_INT 3
37578: MINUS
37579: PUSH
37580: LD_INT 3
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: LD_INT 4
37595: MINUS
37596: PUSH
37597: LD_VAR 0 2
37601: PUSH
37602: LD_INT 4
37604: MINUS
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: ST_TO_ADDR
// end ; 5 :
37621: GO 37761
37623: LD_INT 5
37625: DOUBLE
37626: EQUAL
37627: IFTRUE 37631
37629: GO 37760
37631: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37632: LD_ADDR_VAR 0 5
37636: PUSH
37637: LD_VAR 0 1
37641: PUSH
37642: LD_INT 4
37644: MINUS
37645: PUSH
37646: LD_VAR 0 2
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: PUSH
37659: LD_VAR 0 1
37663: PUSH
37664: LD_VAR 0 2
37668: PUSH
37669: LD_INT 4
37671: MINUS
37672: PUSH
37673: LD_INT 3
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_INT 4
37688: PLUS
37689: PUSH
37690: LD_VAR 0 2
37694: PUSH
37695: LD_INT 4
37697: PLUS
37698: PUSH
37699: LD_INT 5
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: PUSH
37707: LD_VAR 0 1
37711: PUSH
37712: LD_INT 3
37714: PLUS
37715: PUSH
37716: LD_VAR 0 2
37720: PUSH
37721: LD_INT 4
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: PUSH
37729: LD_VAR 0 1
37733: PUSH
37734: LD_VAR 0 2
37738: PUSH
37739: LD_INT 3
37741: PLUS
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: ST_TO_ADDR
// end ; end ;
37758: GO 37761
37760: POP
// result := list ;
37761: LD_ADDR_VAR 0 4
37765: PUSH
37766: LD_VAR 0 5
37770: ST_TO_ADDR
// end ;
37771: LD_VAR 0 4
37775: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37776: LD_INT 0
37778: PPUSH
37779: PPUSH
37780: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37781: LD_VAR 0 1
37785: NOT
37786: IFTRUE 37814
37788: PUSH
37789: LD_VAR 0 2
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: LD_INT 4
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: IN
37812: NOT
37813: OR
37814: IFFALSE 37818
// exit ;
37816: GO 37901
// tmp := [ ] ;
37818: LD_ADDR_VAR 0 5
37822: PUSH
37823: EMPTY
37824: ST_TO_ADDR
// for i in units do
37825: LD_ADDR_VAR 0 4
37829: PUSH
37830: LD_VAR 0 1
37834: PUSH
37835: FOR_IN
37836: IFFALSE 37870
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37838: LD_ADDR_VAR 0 5
37842: PUSH
37843: LD_VAR 0 5
37847: PPUSH
37848: LD_VAR 0 4
37852: PPUSH
37853: LD_VAR 0 2
37857: PPUSH
37858: CALL_OW 259
37862: PPUSH
37863: CALL 39296 0 2
37867: ST_TO_ADDR
37868: GO 37835
37870: POP
37871: POP
// if not tmp then
37872: LD_VAR 0 5
37876: NOT
37877: IFFALSE 37881
// exit ;
37879: GO 37901
// result := SortListByListDesc ( units , tmp ) ;
37881: LD_ADDR_VAR 0 3
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: LD_VAR 0 5
37895: PPUSH
37896: CALL_OW 77
37900: ST_TO_ADDR
// end ;
37901: LD_VAR 0 3
37905: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37906: LD_INT 0
37908: PPUSH
37909: PPUSH
37910: PPUSH
// result := false ;
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_INT 0
37918: ST_TO_ADDR
// if not building then
37919: LD_VAR 0 2
37923: NOT
37924: IFFALSE 37928
// exit ;
37926: GO 38072
// x := GetX ( building ) ;
37928: LD_ADDR_VAR 0 4
37932: PUSH
37933: LD_VAR 0 2
37937: PPUSH
37938: CALL_OW 250
37942: ST_TO_ADDR
// y := GetY ( building ) ;
37943: LD_ADDR_VAR 0 5
37947: PUSH
37948: LD_VAR 0 2
37952: PPUSH
37953: CALL_OW 251
37957: ST_TO_ADDR
// if not x or not y then
37958: LD_VAR 0 4
37962: NOT
37963: IFTRUE 37972
37965: PUSH
37966: LD_VAR 0 5
37970: NOT
37971: OR
37972: IFFALSE 37976
// exit ;
37974: GO 38072
// if GetTaskList ( unit ) then
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 437
37985: IFFALSE 38072
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37987: LD_STRING e
37989: PUSH
37990: LD_VAR 0 1
37994: PPUSH
37995: CALL_OW 437
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: EQUAL
38008: IFFALSE 38035
38010: PUSH
38011: LD_VAR 0 4
38015: PUSH
38016: LD_VAR 0 1
38020: PPUSH
38021: CALL_OW 437
38025: PUSH
38026: LD_INT 1
38028: ARRAY
38029: PUSH
38030: LD_INT 2
38032: ARRAY
38033: EQUAL
38034: AND
38035: IFFALSE 38062
38037: PUSH
38038: LD_VAR 0 5
38042: PUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL_OW 437
38052: PUSH
38053: LD_INT 1
38055: ARRAY
38056: PUSH
38057: LD_INT 3
38059: ARRAY
38060: EQUAL
38061: AND
38062: IFFALSE 38072
// result := true end ;
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_INT 1
38071: ST_TO_ADDR
// end ;
38072: LD_VAR 0 3
38076: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38077: LD_INT 0
38079: PPUSH
// result := false ;
38080: LD_ADDR_VAR 0 4
38084: PUSH
38085: LD_INT 0
38087: ST_TO_ADDR
// if GetTaskList ( unit ) then
38088: LD_VAR 0 1
38092: PPUSH
38093: CALL_OW 437
38097: IFFALSE 38184
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38099: LD_STRING M
38101: PUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 437
38111: PUSH
38112: LD_INT 1
38114: ARRAY
38115: PUSH
38116: LD_INT 1
38118: ARRAY
38119: EQUAL
38120: IFFALSE 38147
38122: PUSH
38123: LD_VAR 0 2
38127: PUSH
38128: LD_VAR 0 1
38132: PPUSH
38133: CALL_OW 437
38137: PUSH
38138: LD_INT 1
38140: ARRAY
38141: PUSH
38142: LD_INT 2
38144: ARRAY
38145: EQUAL
38146: AND
38147: IFFALSE 38174
38149: PUSH
38150: LD_VAR 0 3
38154: PUSH
38155: LD_VAR 0 1
38159: PPUSH
38160: CALL_OW 437
38164: PUSH
38165: LD_INT 1
38167: ARRAY
38168: PUSH
38169: LD_INT 3
38171: ARRAY
38172: EQUAL
38173: AND
38174: IFFALSE 38184
// result := true ;
38176: LD_ADDR_VAR 0 4
38180: PUSH
38181: LD_INT 1
38183: ST_TO_ADDR
// end ; end ;
38184: LD_VAR 0 4
38188: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
// if not unit or not area then
38195: LD_VAR 0 1
38199: NOT
38200: IFTRUE 38209
38202: PUSH
38203: LD_VAR 0 2
38207: NOT
38208: OR
38209: IFFALSE 38213
// exit ;
38211: GO 38389
// tmp := AreaToList ( area , i ) ;
38213: LD_ADDR_VAR 0 6
38217: PUSH
38218: LD_VAR 0 2
38222: PPUSH
38223: LD_VAR 0 5
38227: PPUSH
38228: CALL_OW 517
38232: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38233: LD_ADDR_VAR 0 5
38237: PUSH
38238: DOUBLE
38239: LD_INT 1
38241: DEC
38242: ST_TO_ADDR
38243: LD_VAR 0 6
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: PUSH
38252: FOR_TO
38253: IFFALSE 38387
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38255: LD_ADDR_VAR 0 7
38259: PUSH
38260: LD_VAR 0 6
38264: PUSH
38265: LD_INT 1
38267: ARRAY
38268: PUSH
38269: LD_VAR 0 5
38273: ARRAY
38274: PUSH
38275: LD_VAR 0 6
38279: PUSH
38280: LD_INT 2
38282: ARRAY
38283: PUSH
38284: LD_VAR 0 5
38288: ARRAY
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38294: LD_INT 92
38296: PUSH
38297: LD_VAR 0 7
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PUSH
38306: LD_VAR 0 7
38310: PUSH
38311: LD_INT 2
38313: ARRAY
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: PPUSH
38324: CALL_OW 69
38328: PUSH
38329: LD_INT 0
38331: EQUAL
38332: IFFALSE 38385
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38334: LD_VAR 0 1
38338: PPUSH
38339: LD_VAR 0 7
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: PPUSH
38348: LD_VAR 0 7
38352: PUSH
38353: LD_INT 2
38355: ARRAY
38356: PPUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: CALL_OW 48
// result := IsPlaced ( unit ) ;
38366: LD_ADDR_VAR 0 4
38370: PUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 305
38380: ST_TO_ADDR
// exit ;
38381: POP
38382: POP
38383: GO 38389
// end ; end ;
38385: GO 38252
38387: POP
38388: POP
// end ;
38389: LD_VAR 0 4
38393: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38394: LD_INT 0
38396: PPUSH
38397: PPUSH
38398: PPUSH
// if not side or side > 8 then
38399: LD_VAR 0 1
38403: NOT
38404: IFTRUE 38416
38406: PUSH
38407: LD_VAR 0 1
38411: PUSH
38412: LD_INT 8
38414: GREATER
38415: OR
38416: IFFALSE 38420
// exit ;
38418: GO 38607
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38420: LD_ADDR_VAR 0 4
38424: PUSH
38425: LD_INT 22
38427: PUSH
38428: LD_VAR 0 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 21
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PPUSH
38451: CALL_OW 69
38455: ST_TO_ADDR
// if not tmp then
38456: LD_VAR 0 4
38460: NOT
38461: IFFALSE 38465
// exit ;
38463: GO 38607
// enable_addtolog := true ;
38465: LD_ADDR_OWVAR 81
38469: PUSH
38470: LD_INT 1
38472: ST_TO_ADDR
// AddToLog ( [ ) ;
38473: LD_STRING [
38475: PPUSH
38476: CALL_OW 561
// for i in tmp do
38480: LD_ADDR_VAR 0 3
38484: PUSH
38485: LD_VAR 0 4
38489: PUSH
38490: FOR_IN
38491: IFFALSE 38598
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38493: LD_STRING [
38495: PUSH
38496: LD_VAR 0 3
38500: PPUSH
38501: CALL_OW 266
38505: STR
38506: PUSH
38507: LD_STRING , 
38509: STR
38510: PUSH
38511: LD_VAR 0 3
38515: PPUSH
38516: CALL_OW 250
38520: STR
38521: PUSH
38522: LD_STRING , 
38524: STR
38525: PUSH
38526: LD_VAR 0 3
38530: PPUSH
38531: CALL_OW 251
38535: STR
38536: PUSH
38537: LD_STRING , 
38539: STR
38540: PUSH
38541: LD_VAR 0 3
38545: PPUSH
38546: CALL_OW 254
38550: STR
38551: PUSH
38552: LD_STRING , 
38554: STR
38555: PUSH
38556: LD_VAR 0 3
38560: PPUSH
38561: LD_INT 1
38563: PPUSH
38564: CALL_OW 268
38568: STR
38569: PUSH
38570: LD_STRING , 
38572: STR
38573: PUSH
38574: LD_VAR 0 3
38578: PPUSH
38579: LD_INT 2
38581: PPUSH
38582: CALL_OW 268
38586: STR
38587: PUSH
38588: LD_STRING ],
38590: STR
38591: PPUSH
38592: CALL_OW 561
// end ;
38596: GO 38490
38598: POP
38599: POP
// AddToLog ( ]; ) ;
38600: LD_STRING ];
38602: PPUSH
38603: CALL_OW 561
// end ;
38607: LD_VAR 0 2
38611: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38612: LD_INT 0
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
// if not area or not rate or not max then
38619: LD_VAR 0 1
38623: NOT
38624: IFTRUE 38633
38626: PUSH
38627: LD_VAR 0 2
38631: NOT
38632: OR
38633: IFTRUE 38642
38635: PUSH
38636: LD_VAR 0 4
38640: NOT
38641: OR
38642: IFFALSE 38646
// exit ;
38644: GO 38835
// while 1 do
38646: LD_INT 1
38648: IFFALSE 38835
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38650: LD_ADDR_VAR 0 9
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_INT 1
38662: PPUSH
38663: CALL_OW 287
38667: PUSH
38668: LD_INT 10
38670: MUL
38671: ST_TO_ADDR
// r := rate / 10 ;
38672: LD_ADDR_VAR 0 7
38676: PUSH
38677: LD_VAR 0 2
38681: PUSH
38682: LD_INT 10
38684: DIVREAL
38685: ST_TO_ADDR
// time := 1 1$00 ;
38686: LD_ADDR_VAR 0 8
38690: PUSH
38691: LD_INT 2100
38693: ST_TO_ADDR
// if amount < min then
38694: LD_VAR 0 9
38698: PUSH
38699: LD_VAR 0 3
38703: LESS
38704: IFFALSE 38722
// r := r * 2 else
38706: LD_ADDR_VAR 0 7
38710: PUSH
38711: LD_VAR 0 7
38715: PUSH
38716: LD_INT 2
38718: MUL
38719: ST_TO_ADDR
38720: GO 38748
// if amount > max then
38722: LD_VAR 0 9
38726: PUSH
38727: LD_VAR 0 4
38731: GREATER
38732: IFFALSE 38748
// r := r / 2 ;
38734: LD_ADDR_VAR 0 7
38738: PUSH
38739: LD_VAR 0 7
38743: PUSH
38744: LD_INT 2
38746: DIVREAL
38747: ST_TO_ADDR
// time := time / r ;
38748: LD_ADDR_VAR 0 8
38752: PUSH
38753: LD_VAR 0 8
38757: PUSH
38758: LD_VAR 0 7
38762: DIVREAL
38763: ST_TO_ADDR
// if time < 0 then
38764: LD_VAR 0 8
38768: PUSH
38769: LD_INT 0
38771: LESS
38772: IFFALSE 38789
// time := time * - 1 ;
38774: LD_ADDR_VAR 0 8
38778: PUSH
38779: LD_VAR 0 8
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: MUL
38788: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38789: LD_VAR 0 8
38793: PUSH
38794: LD_INT 35
38796: PPUSH
38797: LD_INT 875
38799: PPUSH
38800: CALL_OW 12
38804: PLUS
38805: PPUSH
38806: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38810: LD_INT 1
38812: PPUSH
38813: LD_INT 5
38815: PPUSH
38816: CALL_OW 12
38820: PPUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: LD_INT 1
38828: PPUSH
38829: CALL_OW 55
// end ;
38833: GO 38646
// end ;
38835: LD_VAR 0 5
38839: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38840: LD_INT 0
38842: PPUSH
38843: PPUSH
38844: PPUSH
38845: PPUSH
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
// if not turrets or not factories then
38850: LD_VAR 0 1
38854: NOT
38855: IFTRUE 38864
38857: PUSH
38858: LD_VAR 0 2
38862: NOT
38863: OR
38864: IFFALSE 38868
// exit ;
38866: GO 39175
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38868: LD_ADDR_VAR 0 10
38872: PUSH
38873: LD_INT 5
38875: PUSH
38876: LD_INT 6
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 4
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 3
38895: PUSH
38896: LD_INT 5
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 24
38910: PUSH
38911: LD_INT 25
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 23
38920: PUSH
38921: LD_INT 27
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 42
38934: PUSH
38935: LD_INT 43
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 44
38944: PUSH
38945: LD_INT 46
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 45
38954: PUSH
38955: LD_INT 47
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: ST_TO_ADDR
// result := [ ] ;
38972: LD_ADDR_VAR 0 3
38976: PUSH
38977: EMPTY
38978: ST_TO_ADDR
// for i in turrets do
38979: LD_ADDR_VAR 0 4
38983: PUSH
38984: LD_VAR 0 1
38988: PUSH
38989: FOR_IN
38990: IFFALSE 39173
// begin nat := GetNation ( i ) ;
38992: LD_ADDR_VAR 0 7
38996: PUSH
38997: LD_VAR 0 4
39001: PPUSH
39002: CALL_OW 248
39006: ST_TO_ADDR
// weapon := 0 ;
39007: LD_ADDR_VAR 0 8
39011: PUSH
39012: LD_INT 0
39014: ST_TO_ADDR
// if not nat then
39015: LD_VAR 0 7
39019: NOT
39020: IFFALSE 39024
// continue ;
39022: GO 38989
// for j in list [ nat ] do
39024: LD_ADDR_VAR 0 5
39028: PUSH
39029: LD_VAR 0 10
39033: PUSH
39034: LD_VAR 0 7
39038: ARRAY
39039: PUSH
39040: FOR_IN
39041: IFFALSE 39082
// if GetBWeapon ( i ) = j [ 1 ] then
39043: LD_VAR 0 4
39047: PPUSH
39048: CALL_OW 269
39052: PUSH
39053: LD_VAR 0 5
39057: PUSH
39058: LD_INT 1
39060: ARRAY
39061: EQUAL
39062: IFFALSE 39080
// begin weapon := j [ 2 ] ;
39064: LD_ADDR_VAR 0 8
39068: PUSH
39069: LD_VAR 0 5
39073: PUSH
39074: LD_INT 2
39076: ARRAY
39077: ST_TO_ADDR
// break ;
39078: GO 39082
// end ;
39080: GO 39040
39082: POP
39083: POP
// if not weapon then
39084: LD_VAR 0 8
39088: NOT
39089: IFFALSE 39093
// continue ;
39091: GO 38989
// for k in factories do
39093: LD_ADDR_VAR 0 6
39097: PUSH
39098: LD_VAR 0 2
39102: PUSH
39103: FOR_IN
39104: IFFALSE 39169
// begin weapons := AvailableWeaponList ( k ) ;
39106: LD_ADDR_VAR 0 9
39110: PUSH
39111: LD_VAR 0 6
39115: PPUSH
39116: CALL_OW 478
39120: ST_TO_ADDR
// if not weapons then
39121: LD_VAR 0 9
39125: NOT
39126: IFFALSE 39130
// continue ;
39128: GO 39103
// if weapon in weapons then
39130: LD_VAR 0 8
39134: PUSH
39135: LD_VAR 0 9
39139: IN
39140: IFFALSE 39167
// begin result := [ i , weapon ] ;
39142: LD_ADDR_VAR 0 3
39146: PUSH
39147: LD_VAR 0 4
39151: PUSH
39152: LD_VAR 0 8
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: ST_TO_ADDR
// exit ;
39161: POP
39162: POP
39163: POP
39164: POP
39165: GO 39175
// end ; end ;
39167: GO 39103
39169: POP
39170: POP
// end ;
39171: GO 38989
39173: POP
39174: POP
// end ;
39175: LD_VAR 0 3
39179: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39180: LD_INT 0
39182: PPUSH
// if not side or side > 8 then
39183: LD_VAR 0 3
39187: NOT
39188: IFTRUE 39200
39190: PUSH
39191: LD_VAR 0 3
39195: PUSH
39196: LD_INT 8
39198: GREATER
39199: OR
39200: IFFALSE 39204
// exit ;
39202: GO 39263
// if not range then
39204: LD_VAR 0 4
39208: NOT
39209: IFFALSE 39220
// range := - 12 ;
39211: LD_ADDR_VAR 0 4
39215: PUSH
39216: LD_INT 12
39218: NEG
39219: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39220: LD_VAR 0 1
39224: PPUSH
39225: LD_VAR 0 2
39229: PPUSH
39230: LD_VAR 0 3
39234: PPUSH
39235: LD_VAR 0 4
39239: PPUSH
39240: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39244: LD_VAR 0 1
39248: PPUSH
39249: LD_VAR 0 2
39253: PPUSH
39254: LD_VAR 0 3
39258: PPUSH
39259: CALL_OW 331
// end ;
39263: LD_VAR 0 5
39267: RET
// export function Video ( mode ) ; begin
39268: LD_INT 0
39270: PPUSH
// ingame_video = mode ;
39271: LD_ADDR_OWVAR 52
39275: PUSH
39276: LD_VAR 0 1
39280: ST_TO_ADDR
// interface_hidden = mode ;
39281: LD_ADDR_OWVAR 54
39285: PUSH
39286: LD_VAR 0 1
39290: ST_TO_ADDR
// end ;
39291: LD_VAR 0 2
39295: RET
// export function Join ( array , element ) ; begin
39296: LD_INT 0
39298: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39299: LD_ADDR_VAR 0 3
39303: PUSH
39304: LD_VAR 0 1
39308: PPUSH
39309: LD_VAR 0 1
39313: PUSH
39314: LD_INT 1
39316: PLUS
39317: PPUSH
39318: LD_VAR 0 2
39322: PPUSH
39323: CALL_OW 1
39327: ST_TO_ADDR
// end ;
39328: LD_VAR 0 3
39332: RET
// export function JoinUnion ( array , element ) ; begin
39333: LD_INT 0
39335: PPUSH
// result := array union element ;
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_VAR 0 1
39345: PUSH
39346: LD_VAR 0 2
39350: UNION
39351: ST_TO_ADDR
// end ;
39352: LD_VAR 0 3
39356: RET
// export function GetBehemoths ( side ) ; begin
39357: LD_INT 0
39359: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39360: LD_ADDR_VAR 0 2
39364: PUSH
39365: LD_INT 22
39367: PUSH
39368: LD_VAR 0 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 31
39379: PUSH
39380: LD_INT 25
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PPUSH
39391: CALL_OW 69
39395: ST_TO_ADDR
// end ;
39396: LD_VAR 0 2
39400: RET
// export function Shuffle ( array ) ; var i , index ; begin
39401: LD_INT 0
39403: PPUSH
39404: PPUSH
39405: PPUSH
// result := [ ] ;
39406: LD_ADDR_VAR 0 2
39410: PUSH
39411: EMPTY
39412: ST_TO_ADDR
// if not array then
39413: LD_VAR 0 1
39417: NOT
39418: IFFALSE 39422
// exit ;
39420: GO 39521
// Randomize ;
39422: CALL_OW 10
// for i = array downto 1 do
39426: LD_ADDR_VAR 0 3
39430: PUSH
39431: DOUBLE
39432: LD_VAR 0 1
39436: INC
39437: ST_TO_ADDR
39438: LD_INT 1
39440: PUSH
39441: FOR_DOWNTO
39442: IFFALSE 39519
// begin index := rand ( 1 , array ) ;
39444: LD_ADDR_VAR 0 4
39448: PUSH
39449: LD_INT 1
39451: PPUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: CALL_OW 12
39461: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39462: LD_ADDR_VAR 0 2
39466: PUSH
39467: LD_VAR 0 2
39471: PPUSH
39472: LD_VAR 0 2
39476: PUSH
39477: LD_INT 1
39479: PLUS
39480: PPUSH
39481: LD_VAR 0 1
39485: PUSH
39486: LD_VAR 0 4
39490: ARRAY
39491: PPUSH
39492: CALL_OW 2
39496: ST_TO_ADDR
// array := Delete ( array , index ) ;
39497: LD_ADDR_VAR 0 1
39501: PUSH
39502: LD_VAR 0 1
39506: PPUSH
39507: LD_VAR 0 4
39511: PPUSH
39512: CALL_OW 3
39516: ST_TO_ADDR
// end ;
39517: GO 39441
39519: POP
39520: POP
// end ;
39521: LD_VAR 0 2
39525: RET
// export function GetBaseMaterials ( base ) ; begin
39526: LD_INT 0
39528: PPUSH
// result := [ 0 , 0 , 0 ] ;
39529: LD_ADDR_VAR 0 2
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
// if not base then
39548: LD_VAR 0 1
39552: NOT
39553: IFFALSE 39557
// exit ;
39555: GO 39606
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39557: LD_ADDR_VAR 0 2
39561: PUSH
39562: LD_VAR 0 1
39566: PPUSH
39567: LD_INT 1
39569: PPUSH
39570: CALL_OW 275
39574: PUSH
39575: LD_VAR 0 1
39579: PPUSH
39580: LD_INT 2
39582: PPUSH
39583: CALL_OW 275
39587: PUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: LD_INT 3
39595: PPUSH
39596: CALL_OW 275
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: ST_TO_ADDR
// end ;
39606: LD_VAR 0 2
39610: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39611: LD_INT 0
39613: PPUSH
39614: PPUSH
// result := array ;
39615: LD_ADDR_VAR 0 3
39619: PUSH
39620: LD_VAR 0 1
39624: ST_TO_ADDR
// if size >= result then
39625: LD_VAR 0 2
39629: PUSH
39630: LD_VAR 0 3
39634: GREATEREQUAL
39635: IFFALSE 39639
// exit ;
39637: GO 39689
// if size then
39639: LD_VAR 0 2
39643: IFFALSE 39689
// for i := array downto size do
39645: LD_ADDR_VAR 0 4
39649: PUSH
39650: DOUBLE
39651: LD_VAR 0 1
39655: INC
39656: ST_TO_ADDR
39657: LD_VAR 0 2
39661: PUSH
39662: FOR_DOWNTO
39663: IFFALSE 39687
// result := Delete ( result , result ) ;
39665: LD_ADDR_VAR 0 3
39669: PUSH
39670: LD_VAR 0 3
39674: PPUSH
39675: LD_VAR 0 3
39679: PPUSH
39680: CALL_OW 3
39684: ST_TO_ADDR
39685: GO 39662
39687: POP
39688: POP
// end ;
39689: LD_VAR 0 3
39693: RET
// export function ComExit ( unit ) ; var tmp ; begin
39694: LD_INT 0
39696: PPUSH
39697: PPUSH
// if not IsInUnit ( unit ) then
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 310
39707: NOT
39708: IFFALSE 39712
// exit ;
39710: GO 39772
// tmp := IsInUnit ( unit ) ;
39712: LD_ADDR_VAR 0 3
39716: PUSH
39717: LD_VAR 0 1
39721: PPUSH
39722: CALL_OW 310
39726: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39727: LD_VAR 0 3
39731: PPUSH
39732: CALL_OW 247
39736: PUSH
39737: LD_INT 2
39739: EQUAL
39740: IFFALSE 39753
// ComExitVehicle ( unit ) else
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 121
39751: GO 39762
// ComExitBuilding ( unit ) ;
39753: LD_VAR 0 1
39757: PPUSH
39758: CALL_OW 122
// result := tmp ;
39762: LD_ADDR_VAR 0 2
39766: PUSH
39767: LD_VAR 0 3
39771: ST_TO_ADDR
// end ;
39772: LD_VAR 0 2
39776: RET
// export function ComExitAll ( units ) ; var i ; begin
39777: LD_INT 0
39779: PPUSH
39780: PPUSH
// if not units then
39781: LD_VAR 0 1
39785: NOT
39786: IFFALSE 39790
// exit ;
39788: GO 39816
// for i in units do
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_VAR 0 1
39799: PUSH
39800: FOR_IN
39801: IFFALSE 39814
// ComExit ( i ) ;
39803: LD_VAR 0 3
39807: PPUSH
39808: CALL 39694 0 1
39812: GO 39800
39814: POP
39815: POP
// end ;
39816: LD_VAR 0 2
39820: RET
// export function ResetHc ; begin
39821: LD_INT 0
39823: PPUSH
// InitHc ;
39824: CALL_OW 19
// hc_importance := 0 ;
39828: LD_ADDR_OWVAR 32
39832: PUSH
39833: LD_INT 0
39835: ST_TO_ADDR
// end ;
39836: LD_VAR 0 1
39840: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39841: LD_INT 0
39843: PPUSH
39844: PPUSH
39845: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39846: LD_ADDR_VAR 0 6
39850: PUSH
39851: LD_VAR 0 1
39855: PUSH
39856: LD_VAR 0 3
39860: PLUS
39861: PUSH
39862: LD_INT 2
39864: DIV
39865: ST_TO_ADDR
// if _x < 0 then
39866: LD_VAR 0 6
39870: PUSH
39871: LD_INT 0
39873: LESS
39874: IFFALSE 39891
// _x := _x * - 1 ;
39876: LD_ADDR_VAR 0 6
39880: PUSH
39881: LD_VAR 0 6
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: MUL
39890: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39891: LD_ADDR_VAR 0 7
39895: PUSH
39896: LD_VAR 0 2
39900: PUSH
39901: LD_VAR 0 4
39905: PLUS
39906: PUSH
39907: LD_INT 2
39909: DIV
39910: ST_TO_ADDR
// if _y < 0 then
39911: LD_VAR 0 7
39915: PUSH
39916: LD_INT 0
39918: LESS
39919: IFFALSE 39936
// _y := _y * - 1 ;
39921: LD_ADDR_VAR 0 7
39925: PUSH
39926: LD_VAR 0 7
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: MUL
39935: ST_TO_ADDR
// result := [ _x , _y ] ;
39936: LD_ADDR_VAR 0 5
39940: PUSH
39941: LD_VAR 0 6
39945: PUSH
39946: LD_VAR 0 7
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: ST_TO_ADDR
// end ;
39955: LD_VAR 0 5
39959: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39960: LD_INT 0
39962: PPUSH
39963: PPUSH
39964: PPUSH
39965: PPUSH
// task := GetTaskList ( unit ) ;
39966: LD_ADDR_VAR 0 7
39970: PUSH
39971: LD_VAR 0 1
39975: PPUSH
39976: CALL_OW 437
39980: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39981: LD_VAR 0 7
39985: NOT
39986: IFFALSE 40005
39988: PUSH
39989: LD_VAR 0 1
39993: PPUSH
39994: LD_VAR 0 2
39998: PPUSH
39999: CALL_OW 308
40003: NOT
40004: AND
40005: IFFALSE 40009
// exit ;
40007: GO 40127
// if IsInArea ( unit , area ) then
40009: LD_VAR 0 1
40013: PPUSH
40014: LD_VAR 0 2
40018: PPUSH
40019: CALL_OW 308
40023: IFFALSE 40041
// begin ComMoveToArea ( unit , goAway ) ;
40025: LD_VAR 0 1
40029: PPUSH
40030: LD_VAR 0 3
40034: PPUSH
40035: CALL_OW 113
// exit ;
40039: GO 40127
// end ; if task [ 1 ] [ 1 ] <> M then
40041: LD_VAR 0 7
40045: PUSH
40046: LD_INT 1
40048: ARRAY
40049: PUSH
40050: LD_INT 1
40052: ARRAY
40053: PUSH
40054: LD_STRING M
40056: NONEQUAL
40057: IFFALSE 40061
// exit ;
40059: GO 40127
// x := task [ 1 ] [ 2 ] ;
40061: LD_ADDR_VAR 0 5
40065: PUSH
40066: LD_VAR 0 7
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: PUSH
40075: LD_INT 2
40077: ARRAY
40078: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40079: LD_ADDR_VAR 0 6
40083: PUSH
40084: LD_VAR 0 7
40088: PUSH
40089: LD_INT 1
40091: ARRAY
40092: PUSH
40093: LD_INT 3
40095: ARRAY
40096: ST_TO_ADDR
// if InArea ( x , y , area ) then
40097: LD_VAR 0 5
40101: PPUSH
40102: LD_VAR 0 6
40106: PPUSH
40107: LD_VAR 0 2
40111: PPUSH
40112: CALL_OW 309
40116: IFFALSE 40127
// ComStop ( unit ) ;
40118: LD_VAR 0 1
40122: PPUSH
40123: CALL_OW 141
// end ;
40127: LD_VAR 0 4
40131: RET
// export function Abs ( value ) ; begin
40132: LD_INT 0
40134: PPUSH
// result := value ;
40135: LD_ADDR_VAR 0 2
40139: PUSH
40140: LD_VAR 0 1
40144: ST_TO_ADDR
// if value < 0 then
40145: LD_VAR 0 1
40149: PUSH
40150: LD_INT 0
40152: LESS
40153: IFFALSE 40170
// result := value * - 1 ;
40155: LD_ADDR_VAR 0 2
40159: PUSH
40160: LD_VAR 0 1
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: MUL
40169: ST_TO_ADDR
// end ;
40170: LD_VAR 0 2
40174: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40175: LD_INT 0
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
// if not unit or not building then
40185: LD_VAR 0 1
40189: NOT
40190: IFTRUE 40199
40192: PUSH
40193: LD_VAR 0 2
40197: NOT
40198: OR
40199: IFFALSE 40203
// exit ;
40201: GO 40431
// x := GetX ( building ) ;
40203: LD_ADDR_VAR 0 4
40207: PUSH
40208: LD_VAR 0 2
40212: PPUSH
40213: CALL_OW 250
40217: ST_TO_ADDR
// y := GetY ( building ) ;
40218: LD_ADDR_VAR 0 6
40222: PUSH
40223: LD_VAR 0 2
40227: PPUSH
40228: CALL_OW 251
40232: ST_TO_ADDR
// d := GetDir ( building ) ;
40233: LD_ADDR_VAR 0 8
40237: PUSH
40238: LD_VAR 0 2
40242: PPUSH
40243: CALL_OW 254
40247: ST_TO_ADDR
// r := 4 ;
40248: LD_ADDR_VAR 0 9
40252: PUSH
40253: LD_INT 4
40255: ST_TO_ADDR
// for i := 1 to 5 do
40256: LD_ADDR_VAR 0 10
40260: PUSH
40261: DOUBLE
40262: LD_INT 1
40264: DEC
40265: ST_TO_ADDR
40266: LD_INT 5
40268: PUSH
40269: FOR_TO
40270: IFFALSE 40429
// begin _x := ShiftX ( x , d , r + i ) ;
40272: LD_ADDR_VAR 0 5
40276: PUSH
40277: LD_VAR 0 4
40281: PPUSH
40282: LD_VAR 0 8
40286: PPUSH
40287: LD_VAR 0 9
40291: PUSH
40292: LD_VAR 0 10
40296: PLUS
40297: PPUSH
40298: CALL_OW 272
40302: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40303: LD_ADDR_VAR 0 7
40307: PUSH
40308: LD_VAR 0 6
40312: PPUSH
40313: LD_VAR 0 8
40317: PPUSH
40318: LD_VAR 0 9
40322: PUSH
40323: LD_VAR 0 10
40327: PLUS
40328: PPUSH
40329: CALL_OW 273
40333: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40334: LD_VAR 0 5
40338: PPUSH
40339: LD_VAR 0 7
40343: PPUSH
40344: CALL_OW 488
40348: IFFALSE 40383
40350: PUSH
40351: LD_VAR 0 5
40355: PPUSH
40356: LD_VAR 0 7
40360: PPUSH
40361: CALL_OW 428
40365: PPUSH
40366: CALL_OW 247
40370: PUSH
40371: LD_INT 3
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: IN
40381: NOT
40382: AND
40383: IFFALSE 40427
// begin ComMoveXY ( unit , _x , _y ) ;
40385: LD_VAR 0 1
40389: PPUSH
40390: LD_VAR 0 5
40394: PPUSH
40395: LD_VAR 0 7
40399: PPUSH
40400: CALL_OW 111
// result := [ _x , _y ] ;
40404: LD_ADDR_VAR 0 3
40408: PUSH
40409: LD_VAR 0 5
40413: PUSH
40414: LD_VAR 0 7
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: ST_TO_ADDR
// exit ;
40423: POP
40424: POP
40425: GO 40431
// end ; end ;
40427: GO 40269
40429: POP
40430: POP
// end ;
40431: LD_VAR 0 3
40435: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40436: LD_INT 0
40438: PPUSH
40439: PPUSH
40440: PPUSH
// result := 0 ;
40441: LD_ADDR_VAR 0 3
40445: PUSH
40446: LD_INT 0
40448: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40449: LD_VAR 0 1
40453: PUSH
40454: LD_INT 0
40456: LESS
40457: IFTRUE 40469
40459: PUSH
40460: LD_VAR 0 1
40464: PUSH
40465: LD_INT 8
40467: GREATER
40468: OR
40469: IFTRUE 40481
40471: PUSH
40472: LD_VAR 0 2
40476: PUSH
40477: LD_INT 0
40479: LESS
40480: OR
40481: IFTRUE 40493
40483: PUSH
40484: LD_VAR 0 2
40488: PUSH
40489: LD_INT 8
40491: GREATER
40492: OR
40493: IFFALSE 40497
// exit ;
40495: GO 40572
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40497: LD_ADDR_VAR 0 4
40501: PUSH
40502: LD_INT 22
40504: PUSH
40505: LD_VAR 0 2
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PPUSH
40514: CALL_OW 69
40518: PUSH
40519: FOR_IN
40520: IFFALSE 40570
// begin un := UnitShoot ( i ) ;
40522: LD_ADDR_VAR 0 5
40526: PUSH
40527: LD_VAR 0 4
40531: PPUSH
40532: CALL_OW 504
40536: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40537: LD_VAR 0 5
40541: PPUSH
40542: CALL_OW 255
40546: PUSH
40547: LD_VAR 0 1
40551: EQUAL
40552: IFFALSE 40568
// begin result := un ;
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_VAR 0 5
40563: ST_TO_ADDR
// exit ;
40564: POP
40565: POP
40566: GO 40572
// end ; end ;
40568: GO 40519
40570: POP
40571: POP
// end ;
40572: LD_VAR 0 3
40576: RET
// export function GetCargoBay ( units ) ; begin
40577: LD_INT 0
40579: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40580: LD_ADDR_VAR 0 2
40584: PUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 34
40595: PUSH
40596: LD_INT 12
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 34
40605: PUSH
40606: LD_INT 51
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 34
40615: PUSH
40616: LD_INT 32
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 34
40625: PUSH
40626: LD_INT 89
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: PPUSH
40640: CALL_OW 72
40644: ST_TO_ADDR
// end ;
40645: LD_VAR 0 2
40649: RET
// export function Negate ( value ) ; begin
40650: LD_INT 0
40652: PPUSH
// result := not value ;
40653: LD_ADDR_VAR 0 2
40657: PUSH
40658: LD_VAR 0 1
40662: NOT
40663: ST_TO_ADDR
// end ;
40664: LD_VAR 0 2
40668: RET
// export function Inc ( value ) ; begin
40669: LD_INT 0
40671: PPUSH
// result := value + 1 ;
40672: LD_ADDR_VAR 0 2
40676: PUSH
40677: LD_VAR 0 1
40681: PUSH
40682: LD_INT 1
40684: PLUS
40685: ST_TO_ADDR
// end ;
40686: LD_VAR 0 2
40690: RET
// export function Dec ( value ) ; begin
40691: LD_INT 0
40693: PPUSH
// result := value - 1 ;
40694: LD_ADDR_VAR 0 2
40698: PUSH
40699: LD_VAR 0 1
40703: PUSH
40704: LD_INT 1
40706: MINUS
40707: ST_TO_ADDR
// end ;
40708: LD_VAR 0 2
40712: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40713: LD_INT 0
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40723: LD_VAR 0 1
40727: PPUSH
40728: LD_VAR 0 2
40732: PPUSH
40733: CALL_OW 488
40737: NOT
40738: IFTRUE 40757
40740: PUSH
40741: LD_VAR 0 3
40745: PPUSH
40746: LD_VAR 0 4
40750: PPUSH
40751: CALL_OW 488
40755: NOT
40756: OR
40757: IFFALSE 40770
// begin result := - 1 ;
40759: LD_ADDR_VAR 0 5
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: ST_TO_ADDR
// exit ;
40768: GO 41005
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40770: LD_ADDR_VAR 0 12
40774: PUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: LD_VAR 0 2
40784: PPUSH
40785: LD_VAR 0 3
40789: PPUSH
40790: LD_VAR 0 4
40794: PPUSH
40795: CALL 39841 0 4
40799: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40800: LD_ADDR_VAR 0 11
40804: PUSH
40805: LD_VAR 0 1
40809: PPUSH
40810: LD_VAR 0 2
40814: PPUSH
40815: LD_VAR 0 12
40819: PUSH
40820: LD_INT 1
40822: ARRAY
40823: PPUSH
40824: LD_VAR 0 12
40828: PUSH
40829: LD_INT 2
40831: ARRAY
40832: PPUSH
40833: CALL_OW 298
40837: ST_TO_ADDR
// distance := 9999 ;
40838: LD_ADDR_VAR 0 10
40842: PUSH
40843: LD_INT 9999
40845: ST_TO_ADDR
// for i := 0 to 5 do
40846: LD_ADDR_VAR 0 6
40850: PUSH
40851: DOUBLE
40852: LD_INT 0
40854: DEC
40855: ST_TO_ADDR
40856: LD_INT 5
40858: PUSH
40859: FOR_TO
40860: IFFALSE 41003
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40862: LD_ADDR_VAR 0 7
40866: PUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_VAR 0 6
40876: PPUSH
40877: LD_VAR 0 11
40881: PPUSH
40882: CALL_OW 272
40886: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40887: LD_ADDR_VAR 0 8
40891: PUSH
40892: LD_VAR 0 2
40896: PPUSH
40897: LD_VAR 0 6
40901: PPUSH
40902: LD_VAR 0 11
40906: PPUSH
40907: CALL_OW 273
40911: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40912: LD_VAR 0 7
40916: PPUSH
40917: LD_VAR 0 8
40921: PPUSH
40922: CALL_OW 488
40926: NOT
40927: IFFALSE 40931
// continue ;
40929: GO 40859
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40931: LD_ADDR_VAR 0 9
40935: PUSH
40936: LD_VAR 0 12
40940: PUSH
40941: LD_INT 1
40943: ARRAY
40944: PPUSH
40945: LD_VAR 0 12
40949: PUSH
40950: LD_INT 2
40952: ARRAY
40953: PPUSH
40954: LD_VAR 0 7
40958: PPUSH
40959: LD_VAR 0 8
40963: PPUSH
40964: CALL_OW 298
40968: ST_TO_ADDR
// if tmp < distance then
40969: LD_VAR 0 9
40973: PUSH
40974: LD_VAR 0 10
40978: LESS
40979: IFFALSE 41001
// begin result := i ;
40981: LD_ADDR_VAR 0 5
40985: PUSH
40986: LD_VAR 0 6
40990: ST_TO_ADDR
// distance := tmp ;
40991: LD_ADDR_VAR 0 10
40995: PUSH
40996: LD_VAR 0 9
41000: ST_TO_ADDR
// end ; end ;
41001: GO 40859
41003: POP
41004: POP
// end ;
41005: LD_VAR 0 5
41009: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41010: LD_INT 0
41012: PPUSH
41013: PPUSH
// if not driver or not IsInUnit ( driver ) then
41014: LD_VAR 0 1
41018: NOT
41019: IFTRUE 41033
41021: PUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 310
41031: NOT
41032: OR
41033: IFFALSE 41037
// exit ;
41035: GO 41127
// vehicle := IsInUnit ( driver ) ;
41037: LD_ADDR_VAR 0 3
41041: PUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 310
41051: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41052: LD_VAR 0 1
41056: PPUSH
41057: LD_STRING \
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: PUSH
41087: LD_STRING E
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_VAR 0 3
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PPUSH
41123: CALL_OW 446
// end ;
41127: LD_VAR 0 2
41131: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41132: LD_INT 0
41134: PPUSH
41135: PPUSH
// if not driver or not IsInUnit ( driver ) then
41136: LD_VAR 0 1
41140: NOT
41141: IFTRUE 41155
41143: PUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: CALL_OW 310
41153: NOT
41154: OR
41155: IFFALSE 41159
// exit ;
41157: GO 41249
// vehicle := IsInUnit ( driver ) ;
41159: LD_ADDR_VAR 0 3
41163: PUSH
41164: LD_VAR 0 1
41168: PPUSH
41169: CALL_OW 310
41173: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41174: LD_VAR 0 1
41178: PPUSH
41179: LD_STRING \
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: PUSH
41209: LD_STRING E
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_VAR 0 3
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PPUSH
41245: CALL_OW 447
// end ;
41249: LD_VAR 0 2
41253: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41254: LD_INT 0
41256: PPUSH
41257: PPUSH
41258: PPUSH
// tmp := [ ] ;
41259: LD_ADDR_VAR 0 5
41263: PUSH
41264: EMPTY
41265: ST_TO_ADDR
// for i in units do
41266: LD_ADDR_VAR 0 4
41270: PUSH
41271: LD_VAR 0 1
41275: PUSH
41276: FOR_IN
41277: IFFALSE 41315
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41279: LD_ADDR_VAR 0 5
41283: PUSH
41284: LD_VAR 0 5
41288: PPUSH
41289: LD_VAR 0 5
41293: PUSH
41294: LD_INT 1
41296: PLUS
41297: PPUSH
41298: LD_VAR 0 4
41302: PPUSH
41303: CALL_OW 256
41307: PPUSH
41308: CALL_OW 2
41312: ST_TO_ADDR
41313: GO 41276
41315: POP
41316: POP
// if not tmp then
41317: LD_VAR 0 5
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41374
// if asc then
41326: LD_VAR 0 2
41330: IFFALSE 41354
// result := SortListByListAsc ( units , tmp ) else
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: LD_VAR 0 1
41341: PPUSH
41342: LD_VAR 0 5
41346: PPUSH
41347: CALL_OW 76
41351: ST_TO_ADDR
41352: GO 41374
// result := SortListByListDesc ( units , tmp ) ;
41354: LD_ADDR_VAR 0 3
41358: PUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: LD_VAR 0 5
41368: PPUSH
41369: CALL_OW 77
41373: ST_TO_ADDR
// end ;
41374: LD_VAR 0 3
41378: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41379: LD_INT 0
41381: PPUSH
41382: PPUSH
// task := GetTaskList ( mech ) ;
41383: LD_ADDR_VAR 0 4
41387: PUSH
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 437
41397: ST_TO_ADDR
// if not task then
41398: LD_VAR 0 4
41402: NOT
41403: IFFALSE 41407
// exit ;
41405: GO 41451
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41407: LD_ADDR_VAR 0 3
41411: PUSH
41412: LD_VAR 0 4
41416: PUSH
41417: LD_INT 1
41419: ARRAY
41420: PUSH
41421: LD_INT 1
41423: ARRAY
41424: PUSH
41425: LD_STRING r
41427: EQUAL
41428: IFFALSE 41450
41430: PUSH
41431: LD_VAR 0 4
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PUSH
41440: LD_INT 4
41442: ARRAY
41443: PUSH
41444: LD_VAR 0 2
41448: EQUAL
41449: AND
41450: ST_TO_ADDR
// end ;
41451: LD_VAR 0 3
41455: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41456: LD_INT 0
41458: PPUSH
// SetDir ( unit , d ) ;
41459: LD_VAR 0 1
41463: PPUSH
41464: LD_VAR 0 4
41468: PPUSH
41469: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41473: LD_ADDR_VAR 0 6
41477: PUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: LD_VAR 0 2
41487: PPUSH
41488: LD_VAR 0 3
41492: PPUSH
41493: LD_VAR 0 5
41497: PPUSH
41498: CALL_OW 48
41502: ST_TO_ADDR
// end ;
41503: LD_VAR 0 6
41507: RET
// export function ToNaturalNumber ( number ) ; begin
41508: LD_INT 0
41510: PPUSH
// result := number div 1 ;
41511: LD_ADDR_VAR 0 2
41515: PUSH
41516: LD_VAR 0 1
41520: PUSH
41521: LD_INT 1
41523: DIV
41524: ST_TO_ADDR
// if number < 0 then
41525: LD_VAR 0 1
41529: PUSH
41530: LD_INT 0
41532: LESS
41533: IFFALSE 41543
// result := 0 ;
41535: LD_ADDR_VAR 0 2
41539: PUSH
41540: LD_INT 0
41542: ST_TO_ADDR
// end ;
41543: LD_VAR 0 2
41547: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
41548: LD_INT 0
41550: PPUSH
41551: PPUSH
41552: PPUSH
// if not buildings then
41553: LD_VAR 0 1
41557: NOT
41558: IFFALSE 41562
// exit ;
41560: GO 41677
// tmp := [ ] ;
41562: LD_ADDR_VAR 0 5
41566: PUSH
41567: EMPTY
41568: ST_TO_ADDR
// for b in buildings do
41569: LD_ADDR_VAR 0 4
41573: PUSH
41574: LD_VAR 0 1
41578: PUSH
41579: FOR_IN
41580: IFFALSE 41618
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41582: LD_ADDR_VAR 0 5
41586: PUSH
41587: LD_VAR 0 5
41591: PPUSH
41592: LD_VAR 0 5
41596: PUSH
41597: LD_INT 1
41599: PLUS
41600: PPUSH
41601: LD_VAR 0 4
41605: PPUSH
41606: CALL_OW 266
41610: PPUSH
41611: CALL_OW 1
41615: ST_TO_ADDR
41616: GO 41579
41618: POP
41619: POP
// if not tmp then
41620: LD_VAR 0 5
41624: NOT
41625: IFFALSE 41629
// exit ;
41627: GO 41677
// if asc then
41629: LD_VAR 0 2
41633: IFFALSE 41657
// result := SortListByListAsc ( buildings , tmp ) else
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_VAR 0 1
41644: PPUSH
41645: LD_VAR 0 5
41649: PPUSH
41650: CALL_OW 76
41654: ST_TO_ADDR
41655: GO 41677
// result := SortListByListDesc ( buildings , tmp ) ;
41657: LD_ADDR_VAR 0 3
41661: PUSH
41662: LD_VAR 0 1
41666: PPUSH
41667: LD_VAR 0 5
41671: PPUSH
41672: CALL_OW 77
41676: ST_TO_ADDR
// end ;
41677: LD_VAR 0 3
41681: RET
// export function SortByClass ( units , class ) ; var un ; begin
41682: LD_INT 0
41684: PPUSH
41685: PPUSH
// if not units or not class then
41686: LD_VAR 0 1
41690: NOT
41691: IFTRUE 41700
41693: PUSH
41694: LD_VAR 0 2
41698: NOT
41699: OR
41700: IFFALSE 41704
// exit ;
41702: GO 41799
// result := [ ] ;
41704: LD_ADDR_VAR 0 3
41708: PUSH
41709: EMPTY
41710: ST_TO_ADDR
// for un in units do
41711: LD_ADDR_VAR 0 4
41715: PUSH
41716: LD_VAR 0 1
41720: PUSH
41721: FOR_IN
41722: IFFALSE 41797
// if GetClass ( un ) = class then
41724: LD_VAR 0 4
41728: PPUSH
41729: CALL_OW 257
41733: PUSH
41734: LD_VAR 0 2
41738: EQUAL
41739: IFFALSE 41766
// result := Insert ( result , 1 , un ) else
41741: LD_ADDR_VAR 0 3
41745: PUSH
41746: LD_VAR 0 3
41750: PPUSH
41751: LD_INT 1
41753: PPUSH
41754: LD_VAR 0 4
41758: PPUSH
41759: CALL_OW 2
41763: ST_TO_ADDR
41764: GO 41795
// result := Replace ( result , result + 1 , un ) ;
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_VAR 0 3
41775: PPUSH
41776: LD_VAR 0 3
41780: PUSH
41781: LD_INT 1
41783: PLUS
41784: PPUSH
41785: LD_VAR 0 4
41789: PPUSH
41790: CALL_OW 1
41794: ST_TO_ADDR
41795: GO 41721
41797: POP
41798: POP
// end ;
41799: LD_VAR 0 3
41803: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41804: LD_INT 0
41806: PPUSH
41807: PPUSH
41808: PPUSH
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
// result := [ ] ;
41813: LD_ADDR_VAR 0 4
41817: PUSH
41818: EMPTY
41819: ST_TO_ADDR
// if x - r < 0 then
41820: LD_VAR 0 1
41824: PUSH
41825: LD_VAR 0 3
41829: MINUS
41830: PUSH
41831: LD_INT 0
41833: LESS
41834: IFFALSE 41846
// min_x := 0 else
41836: LD_ADDR_VAR 0 8
41840: PUSH
41841: LD_INT 0
41843: ST_TO_ADDR
41844: GO 41862
// min_x := x - r ;
41846: LD_ADDR_VAR 0 8
41850: PUSH
41851: LD_VAR 0 1
41855: PUSH
41856: LD_VAR 0 3
41860: MINUS
41861: ST_TO_ADDR
// if y - r < 0 then
41862: LD_VAR 0 2
41866: PUSH
41867: LD_VAR 0 3
41871: MINUS
41872: PUSH
41873: LD_INT 0
41875: LESS
41876: IFFALSE 41888
// min_y := 0 else
41878: LD_ADDR_VAR 0 7
41882: PUSH
41883: LD_INT 0
41885: ST_TO_ADDR
41886: GO 41904
// min_y := y - r ;
41888: LD_ADDR_VAR 0 7
41892: PUSH
41893: LD_VAR 0 2
41897: PUSH
41898: LD_VAR 0 3
41902: MINUS
41903: ST_TO_ADDR
// max_x := x + r ;
41904: LD_ADDR_VAR 0 9
41908: PUSH
41909: LD_VAR 0 1
41913: PUSH
41914: LD_VAR 0 3
41918: PLUS
41919: ST_TO_ADDR
// max_y := y + r ;
41920: LD_ADDR_VAR 0 10
41924: PUSH
41925: LD_VAR 0 2
41929: PUSH
41930: LD_VAR 0 3
41934: PLUS
41935: ST_TO_ADDR
// for _x = min_x to max_x do
41936: LD_ADDR_VAR 0 5
41940: PUSH
41941: DOUBLE
41942: LD_VAR 0 8
41946: DEC
41947: ST_TO_ADDR
41948: LD_VAR 0 9
41952: PUSH
41953: FOR_TO
41954: IFFALSE 42055
// for _y = min_y to max_y do
41956: LD_ADDR_VAR 0 6
41960: PUSH
41961: DOUBLE
41962: LD_VAR 0 7
41966: DEC
41967: ST_TO_ADDR
41968: LD_VAR 0 10
41972: PUSH
41973: FOR_TO
41974: IFFALSE 42051
// begin if not ValidHex ( _x , _y ) then
41976: LD_VAR 0 5
41980: PPUSH
41981: LD_VAR 0 6
41985: PPUSH
41986: CALL_OW 488
41990: NOT
41991: IFFALSE 41995
// continue ;
41993: GO 41973
// if GetResourceTypeXY ( _x , _y ) then
41995: LD_VAR 0 5
41999: PPUSH
42000: LD_VAR 0 6
42004: PPUSH
42005: CALL_OW 283
42009: IFFALSE 42049
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42011: LD_ADDR_VAR 0 4
42015: PUSH
42016: LD_VAR 0 4
42020: PPUSH
42021: LD_VAR 0 4
42025: PUSH
42026: LD_INT 1
42028: PLUS
42029: PPUSH
42030: LD_VAR 0 5
42034: PUSH
42035: LD_VAR 0 6
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PPUSH
42044: CALL_OW 1
42048: ST_TO_ADDR
// end ;
42049: GO 41973
42051: POP
42052: POP
42053: GO 41953
42055: POP
42056: POP
// end ;
42057: LD_VAR 0 4
42061: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42062: LD_INT 0
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
// if not units then
42072: LD_VAR 0 1
42076: NOT
42077: IFFALSE 42081
// exit ;
42079: GO 42613
// result := UnitFilter ( units , [ f_ok ] ) ;
42081: LD_ADDR_VAR 0 3
42085: PUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: LD_INT 50
42093: PUSH
42094: EMPTY
42095: LIST
42096: PPUSH
42097: CALL_OW 72
42101: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42102: LD_ADDR_VAR 0 8
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: LD_INT 1
42114: ARRAY
42115: PPUSH
42116: CALL_OW 255
42120: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42121: LD_ADDR_VAR 0 10
42125: PUSH
42126: LD_INT 29
42128: PUSH
42129: LD_INT 91
42131: PUSH
42132: LD_INT 49
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// if not result then
42140: LD_VAR 0 3
42144: NOT
42145: IFFALSE 42149
// exit ;
42147: GO 42613
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42149: LD_ADDR_VAR 0 5
42153: PUSH
42154: LD_INT 81
42156: PUSH
42157: LD_VAR 0 8
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PPUSH
42166: CALL_OW 69
42170: ST_TO_ADDR
// for i in result do
42171: LD_ADDR_VAR 0 4
42175: PUSH
42176: LD_VAR 0 3
42180: PUSH
42181: FOR_IN
42182: IFFALSE 42611
// begin tag := GetTag ( i ) + 1 ;
42184: LD_ADDR_VAR 0 9
42188: PUSH
42189: LD_VAR 0 4
42193: PPUSH
42194: CALL_OW 110
42198: PUSH
42199: LD_INT 1
42201: PLUS
42202: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42203: LD_ADDR_VAR 0 7
42207: PUSH
42208: LD_VAR 0 4
42212: PPUSH
42213: CALL_OW 250
42217: PPUSH
42218: LD_VAR 0 4
42222: PPUSH
42223: CALL_OW 251
42227: PPUSH
42228: LD_INT 4
42230: PPUSH
42231: CALL 41804 0 3
42235: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42236: LD_VAR 0 4
42240: PPUSH
42241: CALL_OW 247
42245: PUSH
42246: LD_INT 2
42248: EQUAL
42249: IFFALSE 42261
42251: PUSH
42252: LD_VAR 0 7
42256: PUSH
42257: LD_INT 2
42259: GREATER
42260: AND
42261: IFFALSE 42281
42263: PUSH
42264: LD_VAR 0 4
42268: PPUSH
42269: CALL_OW 264
42273: PUSH
42274: LD_VAR 0 10
42278: IN
42279: NOT
42280: AND
42281: IFFALSE 42320
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42283: LD_VAR 0 4
42287: PPUSH
42288: LD_VAR 0 7
42292: PUSH
42293: LD_INT 1
42295: ARRAY
42296: PUSH
42297: LD_INT 1
42299: ARRAY
42300: PPUSH
42301: LD_VAR 0 7
42305: PUSH
42306: LD_INT 1
42308: ARRAY
42309: PUSH
42310: LD_INT 2
42312: ARRAY
42313: PPUSH
42314: CALL_OW 116
42318: GO 42609
// if path > tag then
42320: LD_VAR 0 2
42324: PUSH
42325: LD_VAR 0 9
42329: GREATER
42330: IFFALSE 42538
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42332: LD_ADDR_VAR 0 6
42336: PUSH
42337: LD_VAR 0 5
42341: PPUSH
42342: LD_INT 91
42344: PUSH
42345: LD_VAR 0 4
42349: PUSH
42350: LD_INT 8
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: PPUSH
42358: CALL_OW 72
42362: ST_TO_ADDR
// if nearEnemy then
42363: LD_VAR 0 6
42367: IFFALSE 42436
// begin if GetWeapon ( i ) = ru_time_lapser then
42369: LD_VAR 0 4
42373: PPUSH
42374: CALL_OW 264
42378: PUSH
42379: LD_INT 49
42381: EQUAL
42382: IFFALSE 42410
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42384: LD_VAR 0 4
42388: PPUSH
42389: LD_VAR 0 6
42393: PPUSH
42394: LD_VAR 0 4
42398: PPUSH
42399: CALL_OW 74
42403: PPUSH
42404: CALL_OW 112
42408: GO 42434
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42410: LD_VAR 0 4
42414: PPUSH
42415: LD_VAR 0 6
42419: PPUSH
42420: LD_VAR 0 4
42424: PPUSH
42425: CALL_OW 74
42429: PPUSH
42430: CALL 43694 0 2
// end else
42434: GO 42536
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42436: LD_VAR 0 4
42440: PPUSH
42441: LD_VAR 0 2
42445: PUSH
42446: LD_VAR 0 9
42450: ARRAY
42451: PUSH
42452: LD_INT 1
42454: ARRAY
42455: PPUSH
42456: LD_VAR 0 2
42460: PUSH
42461: LD_VAR 0 9
42465: ARRAY
42466: PUSH
42467: LD_INT 2
42469: ARRAY
42470: PPUSH
42471: CALL_OW 297
42475: PUSH
42476: LD_INT 6
42478: GREATER
42479: IFFALSE 42522
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42481: LD_VAR 0 4
42485: PPUSH
42486: LD_VAR 0 2
42490: PUSH
42491: LD_VAR 0 9
42495: ARRAY
42496: PUSH
42497: LD_INT 1
42499: ARRAY
42500: PPUSH
42501: LD_VAR 0 2
42505: PUSH
42506: LD_VAR 0 9
42510: ARRAY
42511: PUSH
42512: LD_INT 2
42514: ARRAY
42515: PPUSH
42516: CALL_OW 114
42520: GO 42536
// SetTag ( i , tag ) ;
42522: LD_VAR 0 4
42526: PPUSH
42527: LD_VAR 0 9
42531: PPUSH
42532: CALL_OW 109
// end else
42536: GO 42609
// if enemy then
42538: LD_VAR 0 5
42542: IFFALSE 42609
// begin if GetWeapon ( i ) = ru_time_lapser then
42544: LD_VAR 0 4
42548: PPUSH
42549: CALL_OW 264
42553: PUSH
42554: LD_INT 49
42556: EQUAL
42557: IFFALSE 42585
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42559: LD_VAR 0 4
42563: PPUSH
42564: LD_VAR 0 5
42568: PPUSH
42569: LD_VAR 0 4
42573: PPUSH
42574: CALL_OW 74
42578: PPUSH
42579: CALL_OW 112
42583: GO 42609
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42585: LD_VAR 0 4
42589: PPUSH
42590: LD_VAR 0 5
42594: PPUSH
42595: LD_VAR 0 4
42599: PPUSH
42600: CALL_OW 74
42604: PPUSH
42605: CALL 43694 0 2
// end ; end ;
42609: GO 42181
42611: POP
42612: POP
// end ;
42613: LD_VAR 0 3
42617: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42618: LD_INT 0
42620: PPUSH
42621: PPUSH
42622: PPUSH
// if not unit or IsInUnit ( unit ) then
42623: LD_VAR 0 1
42627: NOT
42628: IFTRUE 42641
42630: PUSH
42631: LD_VAR 0 1
42635: PPUSH
42636: CALL_OW 310
42640: OR
42641: IFFALSE 42645
// exit ;
42643: GO 42736
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42645: LD_ADDR_VAR 0 4
42649: PUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: CALL_OW 250
42659: PPUSH
42660: LD_VAR 0 2
42664: PPUSH
42665: LD_INT 1
42667: PPUSH
42668: CALL_OW 272
42672: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42673: LD_ADDR_VAR 0 5
42677: PUSH
42678: LD_VAR 0 1
42682: PPUSH
42683: CALL_OW 251
42687: PPUSH
42688: LD_VAR 0 2
42692: PPUSH
42693: LD_INT 1
42695: PPUSH
42696: CALL_OW 273
42700: ST_TO_ADDR
// if ValidHex ( x , y ) then
42701: LD_VAR 0 4
42705: PPUSH
42706: LD_VAR 0 5
42710: PPUSH
42711: CALL_OW 488
42715: IFFALSE 42736
// ComTurnXY ( unit , x , y ) ;
42717: LD_VAR 0 1
42721: PPUSH
42722: LD_VAR 0 4
42726: PPUSH
42727: LD_VAR 0 5
42731: PPUSH
42732: CALL_OW 118
// end ;
42736: LD_VAR 0 3
42740: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42741: LD_INT 0
42743: PPUSH
42744: PPUSH
// result := false ;
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_INT 0
42752: ST_TO_ADDR
// if not units then
42753: LD_VAR 0 2
42757: NOT
42758: IFFALSE 42762
// exit ;
42760: GO 42807
// for i in units do
42762: LD_ADDR_VAR 0 4
42766: PUSH
42767: LD_VAR 0 2
42771: PUSH
42772: FOR_IN
42773: IFFALSE 42805
// if See ( side , i ) then
42775: LD_VAR 0 1
42779: PPUSH
42780: LD_VAR 0 4
42784: PPUSH
42785: CALL_OW 292
42789: IFFALSE 42803
// begin result := true ;
42791: LD_ADDR_VAR 0 3
42795: PUSH
42796: LD_INT 1
42798: ST_TO_ADDR
// exit ;
42799: POP
42800: POP
42801: GO 42807
// end ;
42803: GO 42772
42805: POP
42806: POP
// end ;
42807: LD_VAR 0 3
42811: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42812: LD_INT 0
42814: PPUSH
42815: PPUSH
42816: PPUSH
42817: PPUSH
// if not unit or not points then
42818: LD_VAR 0 1
42822: NOT
42823: IFTRUE 42832
42825: PUSH
42826: LD_VAR 0 2
42830: NOT
42831: OR
42832: IFFALSE 42836
// exit ;
42834: GO 42926
// dist := 99999 ;
42836: LD_ADDR_VAR 0 5
42840: PUSH
42841: LD_INT 99999
42843: ST_TO_ADDR
// for i in points do
42844: LD_ADDR_VAR 0 4
42848: PUSH
42849: LD_VAR 0 2
42853: PUSH
42854: FOR_IN
42855: IFFALSE 42924
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42857: LD_ADDR_VAR 0 6
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: LD_VAR 0 4
42871: PUSH
42872: LD_INT 1
42874: ARRAY
42875: PPUSH
42876: LD_VAR 0 4
42880: PUSH
42881: LD_INT 2
42883: ARRAY
42884: PPUSH
42885: CALL_OW 297
42889: ST_TO_ADDR
// if tmpDist < dist then
42890: LD_VAR 0 6
42894: PUSH
42895: LD_VAR 0 5
42899: LESS
42900: IFFALSE 42922
// begin result := i ;
42902: LD_ADDR_VAR 0 3
42906: PUSH
42907: LD_VAR 0 4
42911: ST_TO_ADDR
// dist := tmpDist ;
42912: LD_ADDR_VAR 0 5
42916: PUSH
42917: LD_VAR 0 6
42921: ST_TO_ADDR
// end ; end ;
42922: GO 42854
42924: POP
42925: POP
// end ;
42926: LD_VAR 0 3
42930: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42931: LD_INT 0
42933: PPUSH
// uc_side := side ;
42934: LD_ADDR_OWVAR 20
42938: PUSH
42939: LD_VAR 0 1
42943: ST_TO_ADDR
// uc_nation := 3 ;
42944: LD_ADDR_OWVAR 21
42948: PUSH
42949: LD_INT 3
42951: ST_TO_ADDR
// vc_chassis := 25 ;
42952: LD_ADDR_OWVAR 37
42956: PUSH
42957: LD_INT 25
42959: ST_TO_ADDR
// vc_engine := engine_siberite ;
42960: LD_ADDR_OWVAR 39
42964: PUSH
42965: LD_INT 3
42967: ST_TO_ADDR
// vc_control := control_computer ;
42968: LD_ADDR_OWVAR 38
42972: PUSH
42973: LD_INT 3
42975: ST_TO_ADDR
// vc_weapon := 59 ;
42976: LD_ADDR_OWVAR 40
42980: PUSH
42981: LD_INT 59
42983: ST_TO_ADDR
// result := CreateVehicle ;
42984: LD_ADDR_VAR 0 5
42988: PUSH
42989: CALL_OW 45
42993: ST_TO_ADDR
// SetDir ( result , d ) ;
42994: LD_VAR 0 5
42998: PPUSH
42999: LD_VAR 0 4
43003: PPUSH
43004: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43008: LD_VAR 0 5
43012: PPUSH
43013: LD_VAR 0 2
43017: PPUSH
43018: LD_VAR 0 3
43022: PPUSH
43023: LD_INT 0
43025: PPUSH
43026: CALL_OW 48
// end ;
43030: LD_VAR 0 5
43034: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43035: LD_INT 0
43037: PPUSH
43038: PPUSH
43039: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43040: LD_ADDR_VAR 0 2
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43063: LD_VAR 0 1
43067: NOT
43068: IFTRUE 43101
43070: PUSH
43071: LD_VAR 0 1
43075: PPUSH
43076: CALL_OW 264
43080: PUSH
43081: LD_INT 12
43083: PUSH
43084: LD_INT 51
43086: PUSH
43087: LD_INT 32
43089: PUSH
43090: LD_INT 89
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: IN
43099: NOT
43100: OR
43101: IFFALSE 43105
// exit ;
43103: GO 43203
// for i := 1 to 3 do
43105: LD_ADDR_VAR 0 3
43109: PUSH
43110: DOUBLE
43111: LD_INT 1
43113: DEC
43114: ST_TO_ADDR
43115: LD_INT 3
43117: PUSH
43118: FOR_TO
43119: IFFALSE 43201
// begin tmp := GetCargo ( cargo , i ) ;
43121: LD_ADDR_VAR 0 4
43125: PUSH
43126: LD_VAR 0 1
43130: PPUSH
43131: LD_VAR 0 3
43135: PPUSH
43136: CALL_OW 289
43140: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43141: LD_ADDR_VAR 0 2
43145: PUSH
43146: LD_VAR 0 2
43150: PPUSH
43151: LD_VAR 0 3
43155: PPUSH
43156: LD_VAR 0 4
43160: PPUSH
43161: CALL_OW 1
43165: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43166: LD_ADDR_VAR 0 2
43170: PUSH
43171: LD_VAR 0 2
43175: PPUSH
43176: LD_INT 4
43178: PPUSH
43179: LD_VAR 0 2
43183: PUSH
43184: LD_INT 4
43186: ARRAY
43187: PUSH
43188: LD_VAR 0 4
43192: PLUS
43193: PPUSH
43194: CALL_OW 1
43198: ST_TO_ADDR
// end ;
43199: GO 43118
43201: POP
43202: POP
// end ;
43203: LD_VAR 0 2
43207: RET
// export function Length ( array ) ; begin
43208: LD_INT 0
43210: PPUSH
// result := array + 0 ;
43211: LD_ADDR_VAR 0 2
43215: PUSH
43216: LD_VAR 0 1
43220: PUSH
43221: LD_INT 0
43223: PLUS
43224: ST_TO_ADDR
// end ;
43225: LD_VAR 0 2
43229: RET
// export function PrepareArray ( array ) ; begin
43230: LD_INT 0
43232: PPUSH
// result := array diff 0 ;
43233: LD_ADDR_VAR 0 2
43237: PUSH
43238: LD_VAR 0 1
43242: PUSH
43243: LD_INT 0
43245: DIFF
43246: ST_TO_ADDR
// if not result [ 1 ] then
43247: LD_VAR 0 2
43251: PUSH
43252: LD_INT 1
43254: ARRAY
43255: NOT
43256: IFFALSE 43276
// result := Delete ( result , 1 ) ;
43258: LD_ADDR_VAR 0 2
43262: PUSH
43263: LD_VAR 0 2
43267: PPUSH
43268: LD_INT 1
43270: PPUSH
43271: CALL_OW 3
43275: ST_TO_ADDR
// end ;
43276: LD_VAR 0 2
43280: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43281: LD_INT 0
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
// sibRocketRange := 25 ;
43287: LD_ADDR_VAR 0 6
43291: PUSH
43292: LD_INT 25
43294: ST_TO_ADDR
// result := false ;
43295: LD_ADDR_VAR 0 4
43299: PUSH
43300: LD_INT 0
43302: ST_TO_ADDR
// for i := 0 to 5 do
43303: LD_ADDR_VAR 0 5
43307: PUSH
43308: DOUBLE
43309: LD_INT 0
43311: DEC
43312: ST_TO_ADDR
43313: LD_INT 5
43315: PUSH
43316: FOR_TO
43317: IFFALSE 43384
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43319: LD_VAR 0 1
43323: PPUSH
43324: LD_VAR 0 5
43328: PPUSH
43329: LD_VAR 0 6
43333: PPUSH
43334: CALL_OW 272
43338: PPUSH
43339: LD_VAR 0 2
43343: PPUSH
43344: LD_VAR 0 5
43348: PPUSH
43349: LD_VAR 0 6
43353: PPUSH
43354: CALL_OW 273
43358: PPUSH
43359: LD_VAR 0 3
43363: PPUSH
43364: CALL_OW 309
43368: IFFALSE 43382
// begin result := true ;
43370: LD_ADDR_VAR 0 4
43374: PUSH
43375: LD_INT 1
43377: ST_TO_ADDR
// exit ;
43378: POP
43379: POP
43380: GO 43386
// end ;
43382: GO 43316
43384: POP
43385: POP
// end ;
43386: LD_VAR 0 4
43390: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43391: LD_INT 0
43393: PPUSH
43394: PPUSH
43395: PPUSH
// if btype = b_depot then
43396: LD_VAR 0 2
43400: PUSH
43401: LD_INT 0
43403: EQUAL
43404: IFFALSE 43416
// begin result := true ;
43406: LD_ADDR_VAR 0 3
43410: PUSH
43411: LD_INT 1
43413: ST_TO_ADDR
// exit ;
43414: GO 43536
// end ; pom := GetBase ( depot ) ;
43416: LD_ADDR_VAR 0 4
43420: PUSH
43421: LD_VAR 0 1
43425: PPUSH
43426: CALL_OW 274
43430: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43431: LD_ADDR_VAR 0 5
43435: PUSH
43436: LD_VAR 0 2
43440: PPUSH
43441: LD_VAR 0 1
43445: PPUSH
43446: CALL_OW 248
43450: PPUSH
43451: CALL_OW 450
43455: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43456: LD_ADDR_VAR 0 3
43460: PUSH
43461: LD_VAR 0 4
43465: PPUSH
43466: LD_INT 1
43468: PPUSH
43469: CALL_OW 275
43473: PUSH
43474: LD_VAR 0 5
43478: PUSH
43479: LD_INT 1
43481: ARRAY
43482: GREATEREQUAL
43483: IFFALSE 43509
43485: PUSH
43486: LD_VAR 0 4
43490: PPUSH
43491: LD_INT 2
43493: PPUSH
43494: CALL_OW 275
43498: PUSH
43499: LD_VAR 0 5
43503: PUSH
43504: LD_INT 2
43506: ARRAY
43507: GREATEREQUAL
43508: AND
43509: IFFALSE 43535
43511: PUSH
43512: LD_VAR 0 4
43516: PPUSH
43517: LD_INT 3
43519: PPUSH
43520: CALL_OW 275
43524: PUSH
43525: LD_VAR 0 5
43529: PUSH
43530: LD_INT 3
43532: ARRAY
43533: GREATEREQUAL
43534: AND
43535: ST_TO_ADDR
// end ;
43536: LD_VAR 0 3
43540: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43541: LD_INT 0
43543: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43544: LD_VAR 0 1
43548: PPUSH
43549: LD_VAR 0 2
43553: PPUSH
43554: LD_INT 0
43556: PPUSH
43557: LD_INT 0
43559: PPUSH
43560: LD_INT 1
43562: PPUSH
43563: LD_INT 0
43565: PPUSH
43566: CALL_OW 587
// end ;
43570: LD_VAR 0 3
43574: RET
// export function CenterOnNow ( unit ) ; begin
43575: LD_INT 0
43577: PPUSH
// result := IsInUnit ( unit ) ;
43578: LD_ADDR_VAR 0 2
43582: PUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: CALL_OW 310
43592: ST_TO_ADDR
// if not result then
43593: LD_VAR 0 2
43597: NOT
43598: IFFALSE 43610
// result := unit ;
43600: LD_ADDR_VAR 0 2
43604: PUSH
43605: LD_VAR 0 1
43609: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43610: LD_VAR 0 1
43614: PPUSH
43615: CALL_OW 87
// end ;
43619: LD_VAR 0 2
43623: RET
// export function ComMoveHex ( unit , hex ) ; begin
43624: LD_INT 0
43626: PPUSH
// if not hex then
43627: LD_VAR 0 2
43631: NOT
43632: IFFALSE 43636
// exit ;
43634: GO 43689
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43636: LD_VAR 0 2
43640: PUSH
43641: LD_INT 1
43643: ARRAY
43644: PPUSH
43645: LD_VAR 0 2
43649: PUSH
43650: LD_INT 2
43652: ARRAY
43653: PPUSH
43654: CALL_OW 428
43658: IFFALSE 43662
// exit ;
43660: GO 43689
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43662: LD_VAR 0 1
43666: PPUSH
43667: LD_VAR 0 2
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PPUSH
43676: LD_VAR 0 2
43680: PUSH
43681: LD_INT 2
43683: ARRAY
43684: PPUSH
43685: CALL_OW 111
// end ;
43689: LD_VAR 0 3
43693: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43694: LD_INT 0
43696: PPUSH
43697: PPUSH
43698: PPUSH
// if not unit or not enemy then
43699: LD_VAR 0 1
43703: NOT
43704: IFTRUE 43713
43706: PUSH
43707: LD_VAR 0 2
43711: NOT
43712: OR
43713: IFFALSE 43717
// exit ;
43715: GO 43843
// x := GetX ( enemy ) ;
43717: LD_ADDR_VAR 0 4
43721: PUSH
43722: LD_VAR 0 2
43726: PPUSH
43727: CALL_OW 250
43731: ST_TO_ADDR
// y := GetY ( enemy ) ;
43732: LD_ADDR_VAR 0 5
43736: PUSH
43737: LD_VAR 0 2
43741: PPUSH
43742: CALL_OW 251
43746: ST_TO_ADDR
// if ValidHex ( x , y ) then
43747: LD_VAR 0 4
43751: PPUSH
43752: LD_VAR 0 5
43756: PPUSH
43757: CALL_OW 488
43761: IFFALSE 43843
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43763: LD_VAR 0 2
43767: PPUSH
43768: CALL_OW 247
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: IN
43783: IFTRUE 43806
43785: PUSH
43786: LD_VAR 0 1
43790: PPUSH
43791: CALL_OW 255
43795: PPUSH
43796: LD_VAR 0 2
43800: PPUSH
43801: CALL_OW 292
43805: OR
43806: IFFALSE 43824
// ComAttackUnit ( unit , enemy ) else
43808: LD_VAR 0 1
43812: PPUSH
43813: LD_VAR 0 2
43817: PPUSH
43818: CALL_OW 115
43822: GO 43843
// ComAgressiveMove ( unit , x , y ) ;
43824: LD_VAR 0 1
43828: PPUSH
43829: LD_VAR 0 4
43833: PPUSH
43834: LD_VAR 0 5
43838: PPUSH
43839: CALL_OW 114
// end ;
43843: LD_VAR 0 3
43847: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43848: LD_INT 0
43850: PPUSH
43851: PPUSH
43852: PPUSH
// list := AreaToList ( area , 0 ) ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_VAR 0 1
43862: PPUSH
43863: LD_INT 0
43865: PPUSH
43866: CALL_OW 517
43870: ST_TO_ADDR
// if not list then
43871: LD_VAR 0 5
43875: NOT
43876: IFFALSE 43880
// exit ;
43878: GO 44010
// if all then
43880: LD_VAR 0 2
43884: IFFALSE 43972
// begin for i := 1 to list [ 1 ] do
43886: LD_ADDR_VAR 0 4
43890: PUSH
43891: DOUBLE
43892: LD_INT 1
43894: DEC
43895: ST_TO_ADDR
43896: LD_VAR 0 5
43900: PUSH
43901: LD_INT 1
43903: ARRAY
43904: PUSH
43905: FOR_TO
43906: IFFALSE 43968
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43908: LD_ADDR_VAR 0 3
43912: PUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: LD_VAR 0 3
43922: PUSH
43923: LD_INT 1
43925: PLUS
43926: PPUSH
43927: LD_VAR 0 5
43931: PUSH
43932: LD_INT 1
43934: ARRAY
43935: PUSH
43936: LD_VAR 0 4
43940: ARRAY
43941: PUSH
43942: LD_VAR 0 5
43946: PUSH
43947: LD_INT 2
43949: ARRAY
43950: PUSH
43951: LD_VAR 0 4
43955: ARRAY
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PPUSH
43961: CALL_OW 1
43965: ST_TO_ADDR
43966: GO 43905
43968: POP
43969: POP
// exit ;
43970: GO 44010
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43972: LD_ADDR_VAR 0 3
43976: PUSH
43977: LD_VAR 0 5
43981: PUSH
43982: LD_INT 1
43984: ARRAY
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: PUSH
43990: LD_VAR 0 5
43994: PUSH
43995: LD_INT 2
43997: ARRAY
43998: PUSH
43999: LD_INT 1
44001: ARRAY
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: EMPTY
44008: LIST
44009: ST_TO_ADDR
// end ;
44010: LD_VAR 0 3
44014: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44015: LD_INT 0
44017: PPUSH
44018: PPUSH
// list := AreaToList ( area , 0 ) ;
44019: LD_ADDR_VAR 0 4
44023: PUSH
44024: LD_VAR 0 1
44028: PPUSH
44029: LD_INT 0
44031: PPUSH
44032: CALL_OW 517
44036: ST_TO_ADDR
// if not list then
44037: LD_VAR 0 4
44041: NOT
44042: IFFALSE 44046
// exit ;
44044: GO 44087
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44046: LD_ADDR_VAR 0 3
44050: PUSH
44051: LD_VAR 0 4
44055: PUSH
44056: LD_INT 1
44058: ARRAY
44059: PUSH
44060: LD_INT 1
44062: ARRAY
44063: PUSH
44064: LD_VAR 0 4
44068: PUSH
44069: LD_INT 2
44071: ARRAY
44072: PUSH
44073: LD_INT 1
44075: ARRAY
44076: PUSH
44077: LD_VAR 0 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
// end ;
44087: LD_VAR 0 3
44091: RET
// export function First ( array ) ; begin
44092: LD_INT 0
44094: PPUSH
// if not array then
44095: LD_VAR 0 1
44099: NOT
44100: IFFALSE 44104
// exit ;
44102: GO 44118
// result := array [ 1 ] ;
44104: LD_ADDR_VAR 0 2
44108: PUSH
44109: LD_VAR 0 1
44113: PUSH
44114: LD_INT 1
44116: ARRAY
44117: ST_TO_ADDR
// end ;
44118: LD_VAR 0 2
44122: RET
// export function Last ( array ) ; begin
44123: LD_INT 0
44125: PPUSH
// if not array then
44126: LD_VAR 0 1
44130: NOT
44131: IFFALSE 44135
// exit ;
44133: GO 44151
// result := array [ array ] ;
44135: LD_ADDR_VAR 0 2
44139: PUSH
44140: LD_VAR 0 1
44144: PUSH
44145: LD_VAR 0 1
44149: ARRAY
44150: ST_TO_ADDR
// end ;
44151: LD_VAR 0 2
44155: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44156: LD_INT 0
44158: PPUSH
44159: PPUSH
// result := [ ] ;
44160: LD_ADDR_VAR 0 5
44164: PUSH
44165: EMPTY
44166: ST_TO_ADDR
// if not array then
44167: LD_VAR 0 1
44171: NOT
44172: IFFALSE 44176
// exit ;
44174: GO 44288
// for i := 1 to array do
44176: LD_ADDR_VAR 0 6
44180: PUSH
44181: DOUBLE
44182: LD_INT 1
44184: DEC
44185: ST_TO_ADDR
44186: LD_VAR 0 1
44190: PUSH
44191: FOR_TO
44192: IFFALSE 44286
// if array [ i ] [ index ] = value then
44194: LD_VAR 0 1
44198: PUSH
44199: LD_VAR 0 6
44203: ARRAY
44204: PUSH
44205: LD_VAR 0 2
44209: ARRAY
44210: PUSH
44211: LD_VAR 0 3
44215: EQUAL
44216: IFFALSE 44284
// begin if indexColumn then
44218: LD_VAR 0 4
44222: IFFALSE 44258
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44224: LD_ADDR_VAR 0 5
44228: PUSH
44229: LD_VAR 0 5
44233: PPUSH
44234: LD_VAR 0 1
44238: PUSH
44239: LD_VAR 0 6
44243: ARRAY
44244: PUSH
44245: LD_VAR 0 4
44249: ARRAY
44250: PPUSH
44251: CALL 39296 0 2
44255: ST_TO_ADDR
44256: GO 44284
// result := Join ( result , array [ i ] ) ;
44258: LD_ADDR_VAR 0 5
44262: PUSH
44263: LD_VAR 0 5
44267: PPUSH
44268: LD_VAR 0 1
44272: PUSH
44273: LD_VAR 0 6
44277: ARRAY
44278: PPUSH
44279: CALL 39296 0 2
44283: ST_TO_ADDR
// end ;
44284: GO 44191
44286: POP
44287: POP
// end ;
44288: LD_VAR 0 5
44292: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44293: LD_INT 0
44295: PPUSH
// if not vehicles or not parkingPoint then
44296: LD_VAR 0 1
44300: NOT
44301: IFTRUE 44310
44303: PUSH
44304: LD_VAR 0 2
44308: NOT
44309: OR
44310: IFFALSE 44314
// exit ;
44312: GO 44412
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44314: LD_ADDR_VAR 0 1
44318: PUSH
44319: LD_VAR 0 1
44323: PPUSH
44324: LD_INT 50
44326: PUSH
44327: EMPTY
44328: LIST
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: LD_INT 92
44335: PUSH
44336: LD_VAR 0 2
44340: PUSH
44341: LD_INT 1
44343: ARRAY
44344: PUSH
44345: LD_VAR 0 2
44349: PUSH
44350: LD_INT 2
44352: ARRAY
44353: PUSH
44354: LD_INT 8
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PPUSH
44371: CALL_OW 72
44375: ST_TO_ADDR
// if not vehicles then
44376: LD_VAR 0 1
44380: NOT
44381: IFFALSE 44385
// exit ;
44383: GO 44412
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44385: LD_VAR 0 1
44389: PPUSH
44390: LD_VAR 0 2
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: PPUSH
44399: LD_VAR 0 2
44403: PUSH
44404: LD_INT 2
44406: ARRAY
44407: PPUSH
44408: CALL_OW 111
// end ;
44412: LD_VAR 0 3
44416: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44417: LD_INT 0
44419: PPUSH
44420: PPUSH
44421: PPUSH
// if not side or not area then
44422: LD_VAR 0 1
44426: NOT
44427: IFTRUE 44436
44429: PUSH
44430: LD_VAR 0 2
44434: NOT
44435: OR
44436: IFFALSE 44440
// exit ;
44438: GO 44559
// tmp := AreaToList ( area , 0 ) ;
44440: LD_ADDR_VAR 0 5
44444: PUSH
44445: LD_VAR 0 2
44449: PPUSH
44450: LD_INT 0
44452: PPUSH
44453: CALL_OW 517
44457: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44458: LD_ADDR_VAR 0 4
44462: PUSH
44463: DOUBLE
44464: LD_INT 1
44466: DEC
44467: ST_TO_ADDR
44468: LD_VAR 0 5
44472: PUSH
44473: LD_INT 1
44475: ARRAY
44476: PUSH
44477: FOR_TO
44478: IFFALSE 44557
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44480: LD_VAR 0 5
44484: PUSH
44485: LD_INT 1
44487: ARRAY
44488: PUSH
44489: LD_VAR 0 4
44493: ARRAY
44494: PPUSH
44495: LD_VAR 0 5
44499: PUSH
44500: LD_INT 2
44502: ARRAY
44503: PUSH
44504: LD_VAR 0 4
44508: ARRAY
44509: PPUSH
44510: CALL_OW 351
44514: IFFALSE 44555
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44516: LD_VAR 0 5
44520: PUSH
44521: LD_INT 1
44523: ARRAY
44524: PUSH
44525: LD_VAR 0 4
44529: ARRAY
44530: PPUSH
44531: LD_VAR 0 5
44535: PUSH
44536: LD_INT 2
44538: ARRAY
44539: PUSH
44540: LD_VAR 0 4
44544: ARRAY
44545: PPUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: CALL_OW 244
// end ;
44555: GO 44477
44557: POP
44558: POP
// end ;
44559: LD_VAR 0 3
44563: RET
// export function UniqueArray ( array ) ; var i ; begin
44564: LD_INT 0
44566: PPUSH
44567: PPUSH
// result := [ ] ;
44568: LD_ADDR_VAR 0 2
44572: PUSH
44573: EMPTY
44574: ST_TO_ADDR
// if not array then
44575: LD_VAR 0 1
44579: NOT
44580: IFFALSE 44584
// exit ;
44582: GO 44645
// for i := 1 to array do
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: DOUBLE
44590: LD_INT 1
44592: DEC
44593: ST_TO_ADDR
44594: LD_VAR 0 1
44598: PUSH
44599: FOR_TO
44600: IFFALSE 44643
// if not array [ i ] in result then
44602: LD_VAR 0 1
44606: PUSH
44607: LD_VAR 0 3
44611: ARRAY
44612: PUSH
44613: LD_VAR 0 2
44617: IN
44618: NOT
44619: IFFALSE 44641
// result := Join ( result , i ) ;
44621: LD_ADDR_VAR 0 2
44625: PUSH
44626: LD_VAR 0 2
44630: PPUSH
44631: LD_VAR 0 3
44635: PPUSH
44636: CALL 39296 0 2
44640: ST_TO_ADDR
44641: GO 44599
44643: POP
44644: POP
// end ; end_of_file
44645: LD_VAR 0 2
44649: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
44650: LD_INT 0
44652: PPUSH
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
44658: PPUSH
// ecoStartPoint := startPoint ;
44659: LD_ADDR_EXP 6
44663: PUSH
44664: LD_VAR 0 1
44668: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44669: LD_EXP 6
44673: PUSH
44674: LD_INT 1
44676: ARRAY
44677: PPUSH
44678: LD_EXP 6
44682: PUSH
44683: LD_INT 2
44685: ARRAY
44686: PPUSH
44687: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
44691: LD_ADDR_EXP 8
44695: PUSH
44696: LD_VAR 0 2
44700: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
44701: LD_ADDR_EXP 12
44705: PUSH
44706: LD_VAR 0 3
44710: ST_TO_ADDR
// if debug then
44711: LD_EXP 1
44715: IFFALSE 44759
// begin side := 1 ;
44717: LD_ADDR_VAR 0 7
44721: PUSH
44722: LD_INT 1
44724: ST_TO_ADDR
// nation := 1 ;
44725: LD_ADDR_VAR 0 8
44729: PUSH
44730: LD_INT 1
44732: ST_TO_ADDR
// peopleAmount := 15 ;
44733: LD_ADDR_VAR 0 9
44737: PUSH
44738: LD_INT 15
44740: ST_TO_ADDR
// resourcesAmount := 2 ;
44741: LD_ADDR_VAR 0 10
44745: PUSH
44746: LD_INT 2
44748: ST_TO_ADDR
// ecoCratesDrop := 3 ;
44749: LD_ADDR_EXP 7
44753: PUSH
44754: LD_INT 3
44756: ST_TO_ADDR
// end else
44757: GO 44855
// begin side := GetMultiplayerSetting ( 0 ) ;
44759: LD_ADDR_VAR 0 7
44763: PUSH
44764: LD_INT 0
44766: PPUSH
44767: CALL_OW 426
44771: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
44772: LD_ADDR_VAR 0 8
44776: PUSH
44777: LD_INT 1
44779: PPUSH
44780: CALL_OW 426
44784: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
44785: LD_ADDR_VAR 0 9
44789: PUSH
44790: LD_INT 6
44792: PUSH
44793: LD_INT 9
44795: PUSH
44796: LD_INT 12
44798: PUSH
44799: LD_INT 15
44801: PUSH
44802: LD_INT 18
44804: PUSH
44805: LD_INT 21
44807: PUSH
44808: LD_INT 24
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PPUSH
44823: CALL_OW 426
44827: ARRAY
44828: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
44829: LD_ADDR_VAR 0 10
44833: PUSH
44834: LD_INT 3
44836: PPUSH
44837: CALL_OW 426
44841: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
44842: LD_ADDR_EXP 7
44846: PUSH
44847: LD_INT 4
44849: PPUSH
44850: CALL_OW 426
44854: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
44855: LD_ADDR_EXP 9
44859: PUSH
44860: LD_INT 1
44862: ST_TO_ADDR
// ecoEventsAllow := false ;
44863: LD_ADDR_EXP 11
44867: PUSH
44868: LD_INT 0
44870: ST_TO_ADDR
// ecoAttacksAllow := false ;
44871: LD_ADDR_EXP 10
44875: PUSH
44876: LD_INT 0
44878: ST_TO_ADDR
// ecoSide := side ;
44879: LD_ADDR_EXP 3
44883: PUSH
44884: LD_VAR 0 7
44888: ST_TO_ADDR
// your_side := side ;
44889: LD_ADDR_OWVAR 2
44893: PUSH
44894: LD_VAR 0 7
44898: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
44899: LD_INT 1
44901: PPUSH
44902: LD_VAR 0 7
44906: PPUSH
44907: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
44911: LD_INT 1
44913: PPUSH
44914: LD_INT 1
44916: PPUSH
44917: LD_VAR 0 7
44921: PPUSH
44922: LD_INT 32793
44924: NEG
44925: PPUSH
44926: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
44930: LD_INT 1
44932: PPUSH
44933: LD_INT 1
44935: PPUSH
44936: LD_VAR 0 7
44940: PPUSH
44941: CALL_OW 331
// ecoNation := nation ;
44945: LD_ADDR_EXP 4
44949: PUSH
44950: LD_VAR 0 8
44954: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
44955: LD_ADDR_EXP 5
44959: PUSH
44960: LD_VAR 0 9
44964: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
44965: LD_ADDR_VAR 0 5
44969: PUSH
44970: DOUBLE
44971: LD_INT 1
44973: DEC
44974: ST_TO_ADDR
44975: LD_VAR 0 10
44979: PUSH
44980: LD_INT 5
44982: MUL
44983: PUSH
44984: FOR_TO
44985: IFFALSE 45023
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
44987: LD_INT 1
44989: PPUSH
44990: LD_INT 5
44992: PPUSH
44993: LD_EXP 6
44997: PUSH
44998: LD_INT 1
45000: ARRAY
45001: PPUSH
45002: LD_EXP 6
45006: PUSH
45007: LD_INT 2
45009: ARRAY
45010: PPUSH
45011: LD_INT 6
45013: PPUSH
45014: LD_INT 0
45016: PPUSH
45017: CALL_OW 60
45021: GO 44984
45023: POP
45024: POP
// uc_side := side ;
45025: LD_ADDR_OWVAR 20
45029: PUSH
45030: LD_VAR 0 7
45034: ST_TO_ADDR
// uc_nation := nation ;
45035: LD_ADDR_OWVAR 21
45039: PUSH
45040: LD_VAR 0 8
45044: ST_TO_ADDR
// hc_importance := 100 ;
45045: LD_ADDR_OWVAR 32
45049: PUSH
45050: LD_INT 100
45052: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
45053: LD_INT 0
45055: PPUSH
45056: LD_INT 1
45058: PPUSH
45059: LD_INT 4
45061: PPUSH
45062: CALL_OW 380
// if side = 1 and nation = 1 then
45066: LD_VAR 0 7
45070: PUSH
45071: LD_INT 1
45073: EQUAL
45074: IFFALSE 45086
45076: PUSH
45077: LD_VAR 0 8
45081: PUSH
45082: LD_INT 1
45084: EQUAL
45085: AND
45086: IFFALSE 45120
// begin hc_name := John Macmilan ;
45088: LD_ADDR_OWVAR 26
45092: PUSH
45093: LD_STRING John Macmilan
45095: ST_TO_ADDR
// hc_gallery := us ;
45096: LD_ADDR_OWVAR 33
45100: PUSH
45101: LD_STRING us
45103: ST_TO_ADDR
// hc_face_number := 5 ;
45104: LD_ADDR_OWVAR 34
45108: PUSH
45109: LD_INT 5
45111: ST_TO_ADDR
// hc_sex := sex_male ;
45112: LD_ADDR_OWVAR 27
45116: PUSH
45117: LD_INT 1
45119: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
45120: LD_VAR 0 7
45124: PUSH
45125: LD_INT 2
45127: EQUAL
45128: IFFALSE 45140
45130: PUSH
45131: LD_VAR 0 8
45135: PUSH
45136: LD_INT 2
45138: EQUAL
45139: AND
45140: IFFALSE 45174
// begin hc_name := Heike Steyer ;
45142: LD_ADDR_OWVAR 26
45146: PUSH
45147: LD_STRING Heike Steyer
45149: ST_TO_ADDR
// hc_gallery := sandar ;
45150: LD_ADDR_OWVAR 33
45154: PUSH
45155: LD_STRING sandar
45157: ST_TO_ADDR
// hc_face_number := 14 ;
45158: LD_ADDR_OWVAR 34
45162: PUSH
45163: LD_INT 14
45165: ST_TO_ADDR
// hc_sex := sex_female ;
45166: LD_ADDR_OWVAR 27
45170: PUSH
45171: LD_INT 2
45173: ST_TO_ADDR
// end ; if side = 5 and nation = 2 then
45174: LD_VAR 0 7
45178: PUSH
45179: LD_INT 5
45181: EQUAL
45182: IFFALSE 45194
45184: PUSH
45185: LD_VAR 0 8
45189: PUSH
45190: LD_INT 2
45192: EQUAL
45193: AND
45194: IFFALSE 45236
// begin hc_name := Omar Ali ;
45196: LD_ADDR_OWVAR 26
45200: PUSH
45201: LD_STRING Omar Ali
45203: ST_TO_ADDR
// hc_gallery := sandar ;
45204: LD_ADDR_OWVAR 33
45208: PUSH
45209: LD_STRING sandar
45211: ST_TO_ADDR
// hc_face_number := 6 ;
45212: LD_ADDR_OWVAR 34
45216: PUSH
45217: LD_INT 6
45219: ST_TO_ADDR
// hc_sex := sex_male ;
45220: LD_ADDR_OWVAR 27
45224: PUSH
45225: LD_INT 1
45227: ST_TO_ADDR
// hc_class := class_desert_warior ;
45228: LD_ADDR_OWVAR 28
45232: PUSH
45233: LD_INT 11
45235: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
45236: LD_VAR 0 7
45240: PUSH
45241: LD_INT 6
45243: EQUAL
45244: IFFALSE 45256
45246: PUSH
45247: LD_VAR 0 8
45251: PUSH
45252: LD_INT 3
45254: EQUAL
45255: AND
45256: IFFALSE 45303
// begin PrepareHuman ( false , 3 , 4 ) ;
45258: LD_INT 0
45260: PPUSH
45261: LD_INT 3
45263: PPUSH
45264: LD_INT 4
45266: PPUSH
45267: CALL_OW 380
// hc_name := Yuri I. Burlak ;
45271: LD_ADDR_OWVAR 26
45275: PUSH
45276: LD_STRING Yuri I. Burlak
45278: ST_TO_ADDR
// hc_gallery := ru ;
45279: LD_ADDR_OWVAR 33
45283: PUSH
45284: LD_STRING ru
45286: ST_TO_ADDR
// hc_face_number := 1 ;
45287: LD_ADDR_OWVAR 34
45291: PUSH
45292: LD_INT 1
45294: ST_TO_ADDR
// hc_sex := sex_male ;
45295: LD_ADDR_OWVAR 27
45299: PUSH
45300: LD_INT 1
45302: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
45303: LD_VAR 0 7
45307: PUSH
45308: LD_INT 4
45310: EQUAL
45311: IFFALSE 45323
45313: PUSH
45314: LD_VAR 0 8
45318: PUSH
45319: LD_INT 1
45321: EQUAL
45322: AND
45323: IFFALSE 45357
// begin hc_name := Arthur Powell ;
45325: LD_ADDR_OWVAR 26
45329: PUSH
45330: LD_STRING Arthur Powell
45332: ST_TO_ADDR
// hc_gallery := us ;
45333: LD_ADDR_OWVAR 33
45337: PUSH
45338: LD_STRING us
45340: ST_TO_ADDR
// hc_face_number := 7 ;
45341: LD_ADDR_OWVAR 34
45345: PUSH
45346: LD_INT 7
45348: ST_TO_ADDR
// hc_sex := sex_male ;
45349: LD_ADDR_OWVAR 27
45353: PUSH
45354: LD_INT 1
45356: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
45357: LD_VAR 0 7
45361: PUSH
45362: LD_INT 3
45364: EQUAL
45365: IFFALSE 45377
45367: PUSH
45368: LD_VAR 0 8
45372: PUSH
45373: LD_INT 3
45375: EQUAL
45376: AND
45377: IFFALSE 45411
// begin hc_name := Mjr. Platonov ;
45379: LD_ADDR_OWVAR 26
45383: PUSH
45384: LD_STRING Mjr. Platonov
45386: ST_TO_ADDR
// hc_gallery := ru ;
45387: LD_ADDR_OWVAR 33
45391: PUSH
45392: LD_STRING ru
45394: ST_TO_ADDR
// hc_face_number := 60 ;
45395: LD_ADDR_OWVAR 34
45399: PUSH
45400: LD_INT 60
45402: ST_TO_ADDR
// hc_sex := sex_male ;
45403: LD_ADDR_OWVAR 27
45407: PUSH
45408: LD_INT 1
45410: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
45411: LD_VAR 0 7
45415: PUSH
45416: LD_INT 7
45418: EQUAL
45419: IFFALSE 45431
45421: PUSH
45422: LD_VAR 0 8
45426: PUSH
45427: LD_INT 1
45429: EQUAL
45430: AND
45431: IFFALSE 45478
// begin PrepareHuman ( false , 4 , 4 ) ;
45433: LD_INT 0
45435: PPUSH
45436: LD_INT 4
45438: PPUSH
45439: LD_INT 4
45441: PPUSH
45442: CALL_OW 380
// hc_name := Peter Roth ;
45446: LD_ADDR_OWVAR 26
45450: PUSH
45451: LD_STRING Peter Roth
45453: ST_TO_ADDR
// hc_gallery := us ;
45454: LD_ADDR_OWVAR 33
45458: PUSH
45459: LD_STRING us
45461: ST_TO_ADDR
// hc_face_number := 22 ;
45462: LD_ADDR_OWVAR 34
45466: PUSH
45467: LD_INT 22
45469: ST_TO_ADDR
// hc_sex := sex_male ;
45470: LD_ADDR_OWVAR 27
45474: PUSH
45475: LD_INT 1
45477: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
45478: LD_VAR 0 7
45482: PUSH
45483: LD_INT 7
45485: EQUAL
45486: IFFALSE 45498
45488: PUSH
45489: LD_VAR 0 8
45493: PUSH
45494: LD_INT 3
45496: EQUAL
45497: AND
45498: IFFALSE 45545
// begin PrepareHuman ( false , 4 , 4 ) ;
45500: LD_INT 0
45502: PPUSH
45503: LD_INT 4
45505: PPUSH
45506: LD_INT 4
45508: PPUSH
45509: CALL_OW 380
// hc_name := Prof. Gossudarov ;
45513: LD_ADDR_OWVAR 26
45517: PUSH
45518: LD_STRING Prof. Gossudarov
45520: ST_TO_ADDR
// hc_gallery := ru ;
45521: LD_ADDR_OWVAR 33
45525: PUSH
45526: LD_STRING ru
45528: ST_TO_ADDR
// hc_face_number := 61 ;
45529: LD_ADDR_OWVAR 34
45533: PUSH
45534: LD_INT 61
45536: ST_TO_ADDR
// hc_sex := sex_male ;
45537: LD_ADDR_OWVAR 27
45541: PUSH
45542: LD_INT 1
45544: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
45545: LD_VAR 0 7
45549: PUSH
45550: LD_INT 8
45552: EQUAL
45553: IFFALSE 45565
45555: PUSH
45556: LD_VAR 0 8
45560: PUSH
45561: LD_INT 1
45563: EQUAL
45564: AND
45565: IFFALSE 45599
// begin hc_name := Ron Harisson ;
45567: LD_ADDR_OWVAR 26
45571: PUSH
45572: LD_STRING Ron Harisson
45574: ST_TO_ADDR
// hc_gallery := us ;
45575: LD_ADDR_OWVAR 33
45579: PUSH
45580: LD_STRING us
45582: ST_TO_ADDR
// hc_face_number := 6 ;
45583: LD_ADDR_OWVAR 34
45587: PUSH
45588: LD_INT 6
45590: ST_TO_ADDR
// hc_sex := sex_male ;
45591: LD_ADDR_OWVAR 27
45595: PUSH
45596: LD_INT 1
45598: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
45599: LD_VAR 0 7
45603: PUSH
45604: LD_INT 8
45606: EQUAL
45607: IFFALSE 45619
45609: PUSH
45610: LD_VAR 0 8
45614: PUSH
45615: LD_INT 2
45617: EQUAL
45618: AND
45619: IFFALSE 45653
// begin hc_name := Louis Schulz ;
45621: LD_ADDR_OWVAR 26
45625: PUSH
45626: LD_STRING Louis Schulz
45628: ST_TO_ADDR
// hc_gallery := sandar ;
45629: LD_ADDR_OWVAR 33
45633: PUSH
45634: LD_STRING sandar
45636: ST_TO_ADDR
// hc_face_number := 1 ;
45637: LD_ADDR_OWVAR 34
45641: PUSH
45642: LD_INT 1
45644: ST_TO_ADDR
// hc_sex := sex_male ;
45645: LD_ADDR_OWVAR 27
45649: PUSH
45650: LD_INT 1
45652: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
45653: CALL_OW 44
45657: PPUSH
45658: LD_EXP 6
45662: PUSH
45663: LD_INT 1
45665: ARRAY
45666: PPUSH
45667: LD_EXP 6
45671: PUSH
45672: LD_INT 2
45674: ARRAY
45675: PPUSH
45676: LD_INT 12
45678: PPUSH
45679: LD_INT 0
45681: PPUSH
45682: CALL_OW 50
// InitHc_All ( ) ;
45686: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
45690: LD_ADDR_VAR 0 5
45694: PUSH
45695: DOUBLE
45696: LD_INT 1
45698: DEC
45699: ST_TO_ADDR
45700: LD_VAR 0 9
45704: PUSH
45705: LD_INT 1
45707: MINUS
45708: PUSH
45709: FOR_TO
45710: IFFALSE 45805
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
45712: LD_INT 0
45714: PPUSH
45715: LD_VAR 0 5
45719: PUSH
45720: LD_INT 4
45722: MOD
45723: PUSH
45724: LD_INT 1
45726: PLUS
45727: PPUSH
45728: LD_INT 3
45730: PPUSH
45731: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
45735: LD_ADDR_VAR 0 6
45739: PUSH
45740: LD_VAR 0 6
45744: PPUSH
45745: LD_VAR 0 6
45749: PUSH
45750: LD_INT 1
45752: PLUS
45753: PPUSH
45754: CALL_OW 44
45758: PPUSH
45759: CALL_OW 1
45763: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
45764: LD_VAR 0 6
45768: PUSH
45769: LD_VAR 0 6
45773: ARRAY
45774: PPUSH
45775: LD_EXP 6
45779: PUSH
45780: LD_INT 1
45782: ARRAY
45783: PPUSH
45784: LD_EXP 6
45788: PUSH
45789: LD_INT 2
45791: ARRAY
45792: PPUSH
45793: LD_INT 12
45795: PPUSH
45796: LD_INT 0
45798: PPUSH
45799: CALL_OW 50
// end ;
45803: GO 45709
45805: POP
45806: POP
// end ;
45807: LD_VAR 0 4
45811: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
45812: LD_EXP 7
45816: IFFALSE 45824
45818: PUSH
45819: LD_EXP 8
45823: AND
45824: IFFALSE 45994
45826: GO 45828
45828: DISABLE
45829: LD_INT 0
45831: PPUSH
45832: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
45833: LD_ADDR_VAR 0 1
45837: PUSH
45838: LD_INT 700
45840: PUSH
45841: LD_INT 350
45843: PUSH
45844: LD_INT 175
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: PUSH
45852: LD_EXP 7
45856: ARRAY
45857: ST_TO_ADDR
// while true do
45858: LD_INT 1
45860: IFFALSE 45994
// begin wait ( time ) ;
45862: LD_VAR 0 1
45866: PPUSH
45867: CALL_OW 67
// if not ecoCratesDropAllow then
45871: LD_EXP 9
45875: NOT
45876: IFFALSE 45880
// continue ;
45878: GO 45858
// time := time + 0 0$2 ;
45880: LD_ADDR_VAR 0 1
45884: PUSH
45885: LD_VAR 0 1
45889: PUSH
45890: LD_INT 70
45892: PLUS
45893: ST_TO_ADDR
// if time > 0 0$40 then
45894: LD_VAR 0 1
45898: PUSH
45899: LD_INT 1400
45901: GREATER
45902: IFFALSE 45929
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
45904: LD_ADDR_VAR 0 1
45908: PUSH
45909: LD_INT 700
45911: PUSH
45912: LD_INT 350
45914: PUSH
45915: LD_INT 175
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: PUSH
45923: LD_EXP 7
45927: ARRAY
45928: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
45929: LD_ADDR_VAR 0 2
45933: PUSH
45934: LD_EXP 8
45938: PUSH
45939: LD_INT 1
45941: PPUSH
45942: LD_EXP 8
45946: PPUSH
45947: CALL_OW 12
45951: ARRAY
45952: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
45953: LD_INT 1
45955: PPUSH
45956: LD_INT 5
45958: PPUSH
45959: CALL_OW 12
45963: PPUSH
45964: LD_VAR 0 2
45968: PUSH
45969: LD_INT 1
45971: ARRAY
45972: PPUSH
45973: LD_VAR 0 2
45977: PUSH
45978: LD_INT 2
45980: ARRAY
45981: PPUSH
45982: LD_INT 14
45984: PPUSH
45985: LD_INT 1
45987: PPUSH
45988: CALL_OW 56
// end ;
45992: GO 45858
// end ;
45994: PPOPN 2
45996: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
45997: LD_EXP 12
46001: IFFALSE 46009
46003: PUSH
46004: LD_EXP 10
46008: AND
46009: IFFALSE 46777
46011: GO 46013
46013: DISABLE
46014: LD_INT 0
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
46024: PPUSH
// begin time := 3 3$00 ;
46025: LD_ADDR_VAR 0 1
46029: PUSH
46030: LD_INT 6300
46032: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
46033: LD_ADDR_VAR 0 8
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 9
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PPUSH
46051: LD_INT 2
46053: PPUSH
46054: CALL_OW 12
46058: ARRAY
46059: ST_TO_ADDR
// waveBonus := 0 ;
46060: LD_ADDR_VAR 0 9
46064: PUSH
46065: LD_INT 0
46067: ST_TO_ADDR
// if ecoSide = enemySide then
46068: LD_EXP 3
46072: PUSH
46073: LD_VAR 0 8
46077: EQUAL
46078: IFFALSE 46088
// enemySide := 1 ;
46080: LD_ADDR_VAR 0 8
46084: PUSH
46085: LD_INT 1
46087: ST_TO_ADDR
// while true do
46088: LD_INT 1
46090: IFFALSE 46777
// begin wait ( time ) ;
46092: LD_VAR 0 1
46096: PPUSH
46097: CALL_OW 67
// if not ecoAttacksAllow then
46101: LD_EXP 10
46105: NOT
46106: IFFALSE 46110
// continue ;
46108: GO 46088
// waveBonus := waveBonus + 2 ;
46110: LD_ADDR_VAR 0 9
46114: PUSH
46115: LD_VAR 0 9
46119: PUSH
46120: LD_INT 2
46122: PLUS
46123: ST_TO_ADDR
// if waveBonus > 20 then
46124: LD_VAR 0 9
46128: PUSH
46129: LD_INT 20
46131: GREATER
46132: IFFALSE 46142
// waveBonus := 20 ;
46134: LD_ADDR_VAR 0 9
46138: PUSH
46139: LD_INT 20
46141: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
46142: LD_ADDR_VAR 0 2
46146: PUSH
46147: LD_EXP 12
46151: PUSH
46152: LD_INT 1
46154: PPUSH
46155: LD_EXP 12
46159: PPUSH
46160: CALL_OW 12
46164: ARRAY
46165: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
46166: LD_ADDR_VAR 0 3
46170: PUSH
46171: LD_VAR 0 2
46175: PPUSH
46176: LD_INT 0
46178: PPUSH
46179: CALL_OW 517
46183: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
46184: LD_ADDR_VAR 0 7
46188: PUSH
46189: LD_VAR 0 3
46193: PUSH
46194: LD_INT 1
46196: ARRAY
46197: PUSH
46198: LD_INT 1
46200: ARRAY
46201: PPUSH
46202: LD_VAR 0 3
46206: PUSH
46207: LD_INT 2
46209: ARRAY
46210: PUSH
46211: LD_INT 1
46213: ARRAY
46214: PPUSH
46215: LD_EXP 6
46219: PUSH
46220: LD_INT 1
46222: ARRAY
46223: PPUSH
46224: LD_EXP 6
46228: PUSH
46229: LD_INT 2
46231: ARRAY
46232: PPUSH
46233: CALL 40713 0 4
46237: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
46238: LD_ADDR_VAR 0 5
46242: PUSH
46243: LD_VAR 0 3
46247: PUSH
46248: LD_INT 1
46250: ARRAY
46251: PUSH
46252: LD_INT 1
46254: ARRAY
46255: PPUSH
46256: LD_VAR 0 3
46260: PUSH
46261: LD_INT 2
46263: ARRAY
46264: PUSH
46265: LD_INT 1
46267: ARRAY
46268: PPUSH
46269: LD_EXP 6
46273: PUSH
46274: LD_INT 1
46276: ARRAY
46277: PPUSH
46278: LD_EXP 6
46282: PUSH
46283: LD_INT 2
46285: ARRAY
46286: PPUSH
46287: CALL 39841 0 4
46291: ST_TO_ADDR
// tmp := [ ] ;
46292: LD_ADDR_VAR 0 3
46296: PUSH
46297: EMPTY
46298: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
46299: LD_ADDR_VAR 0 4
46303: PUSH
46304: DOUBLE
46305: LD_INT 1
46307: DEC
46308: ST_TO_ADDR
46309: LD_INT 6
46311: PUSH
46312: LD_VAR 0 9
46316: PLUS
46317: PUSH
46318: FOR_TO
46319: IFFALSE 46638
// begin uc_side := enemySide ;
46321: LD_ADDR_OWVAR 20
46325: PUSH
46326: LD_VAR 0 8
46330: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
46331: LD_ADDR_OWVAR 21
46335: PUSH
46336: LD_INT 1
46338: PPUSH
46339: LD_INT 3
46341: PPUSH
46342: CALL_OW 12
46346: ST_TO_ADDR
// case uc_nation of 1 :
46347: LD_OWVAR 21
46351: PUSH
46352: LD_INT 1
46354: DOUBLE
46355: EQUAL
46356: IFTRUE 46360
46358: GO 46401
46360: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
46361: LD_INT 5
46363: PPUSH
46364: LD_INT 3
46366: PPUSH
46367: LD_INT 3
46369: PPUSH
46370: LD_INT 6
46372: PUSH
46373: LD_INT 7
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PPUSH
46383: LD_INT 2
46385: PPUSH
46386: CALL_OW 12
46390: ARRAY
46391: PPUSH
46392: LD_INT 100
46394: PPUSH
46395: CALL 6126 0 5
46399: GO 46504
46401: LD_INT 2
46403: DOUBLE
46404: EQUAL
46405: IFTRUE 46409
46407: GO 46454
46409: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
46410: LD_INT 14
46412: PPUSH
46413: LD_INT 3
46415: PPUSH
46416: LD_INT 5
46418: PPUSH
46419: LD_INT 27
46421: PUSH
46422: LD_INT 28
46424: PUSH
46425: LD_INT 29
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PPUSH
46436: LD_INT 3
46438: PPUSH
46439: CALL_OW 12
46443: ARRAY
46444: PPUSH
46445: LD_INT 100
46447: PPUSH
46448: CALL 6126 0 5
46452: GO 46504
46454: LD_INT 3
46456: DOUBLE
46457: EQUAL
46458: IFTRUE 46462
46460: GO 46503
46462: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
46463: LD_INT 24
46465: PPUSH
46466: LD_INT 3
46468: PPUSH
46469: LD_INT 3
46471: PPUSH
46472: LD_INT 46
46474: PUSH
46475: LD_INT 47
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PPUSH
46485: LD_INT 2
46487: PPUSH
46488: CALL_OW 12
46492: ARRAY
46493: PPUSH
46494: LD_INT 100
46496: PPUSH
46497: CALL 6126 0 5
46501: GO 46504
46503: POP
// veh := CreateVehicle ;
46504: LD_ADDR_VAR 0 6
46508: PUSH
46509: CALL_OW 45
46513: ST_TO_ADDR
// SetDir ( veh , dir ) ;
46514: LD_VAR 0 6
46518: PPUSH
46519: LD_VAR 0 7
46523: PPUSH
46524: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
46528: LD_VAR 0 6
46532: PPUSH
46533: LD_VAR 0 2
46537: PPUSH
46538: LD_INT 0
46540: PPUSH
46541: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
46545: LD_ADDR_VAR 0 3
46549: PUSH
46550: LD_VAR 0 3
46554: PPUSH
46555: LD_VAR 0 3
46559: PUSH
46560: LD_INT 1
46562: PLUS
46563: PPUSH
46564: LD_VAR 0 6
46568: PPUSH
46569: CALL_OW 1
46573: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
46574: LD_VAR 0 5
46578: PUSH
46579: LD_INT 1
46581: ARRAY
46582: PPUSH
46583: LD_VAR 0 5
46587: PUSH
46588: LD_INT 2
46590: ARRAY
46591: PPUSH
46592: CALL_OW 428
46596: PUSH
46597: LD_INT 0
46599: EQUAL
46600: IFFALSE 46629
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
46602: LD_VAR 0 6
46606: PPUSH
46607: LD_VAR 0 5
46611: PUSH
46612: LD_INT 1
46614: ARRAY
46615: PPUSH
46616: LD_VAR 0 5
46620: PUSH
46621: LD_INT 2
46623: ARRAY
46624: PPUSH
46625: CALL_OW 111
// wait ( 0 0$0.5 ) ;
46629: LD_INT 18
46631: PPUSH
46632: CALL_OW 67
// end ;
46636: GO 46318
46638: POP
46639: POP
// if tmp then
46640: LD_VAR 0 3
46644: IFFALSE 46775
// begin repeat wait ( 0 0$2 ) ;
46646: LD_INT 70
46648: PPUSH
46649: CALL_OW 67
// for i in tmp do
46653: LD_ADDR_VAR 0 4
46657: PUSH
46658: LD_VAR 0 3
46662: PUSH
46663: FOR_IN
46664: IFFALSE 46766
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
46666: LD_VAR 0 4
46670: PPUSH
46671: CALL_OW 301
46675: IFTRUE 46689
46677: PUSH
46678: LD_VAR 0 4
46682: PPUSH
46683: CALL_OW 305
46687: NOT
46688: OR
46689: IFTRUE 46708
46691: PUSH
46692: LD_VAR 0 4
46696: PPUSH
46697: CALL_OW 255
46701: PUSH
46702: LD_VAR 0 8
46706: NONEQUAL
46707: OR
46708: IFFALSE 46728
// tmp := tmp diff i else
46710: LD_ADDR_VAR 0 3
46714: PUSH
46715: LD_VAR 0 3
46719: PUSH
46720: LD_VAR 0 4
46724: DIFF
46725: ST_TO_ADDR
46726: GO 46764
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
46728: LD_VAR 0 4
46732: PPUSH
46733: LD_INT 22
46735: PUSH
46736: LD_EXP 3
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PPUSH
46745: CALL_OW 69
46749: PPUSH
46750: LD_VAR 0 4
46754: PPUSH
46755: CALL_OW 74
46759: PPUSH
46760: CALL_OW 115
// end ;
46764: GO 46663
46766: POP
46767: POP
// until not tmp ;
46768: LD_VAR 0 3
46772: NOT
46773: IFFALSE 46646
// end ; end ;
46775: GO 46088
// end ;
46777: PPOPN 9
46779: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
46780: LD_EXP 11
46784: IFFALSE 46837
46786: GO 46788
46788: DISABLE
46789: LD_INT 0
46791: PPUSH
46792: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
46793: LD_ADDR_VAR 0 1
46797: PUSH
46798: LD_INT 2100
46800: PPUSH
46801: LD_INT 21000
46803: PPUSH
46804: CALL_OW 12
46808: ST_TO_ADDR
// while true do
46809: LD_INT 1
46811: IFFALSE 46837
// begin wait ( time ) ;
46813: LD_VAR 0 1
46817: PPUSH
46818: CALL_OW 67
// if not ecoEventsAllow then
46822: LD_EXP 11
46826: NOT
46827: IFFALSE 46831
// continue ;
46829: GO 46809
// EcoEvent ( ) ;
46831: CALL 46840 0 0
// end ;
46835: GO 46809
// end ;
46837: PPOPN 2
46839: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
46840: LD_INT 0
46842: PPUSH
46843: PPUSH
46844: PPUSH
46845: PPUSH
// event := rand ( 1 , 5 ) ;
46846: LD_ADDR_VAR 0 2
46850: PUSH
46851: LD_INT 1
46853: PPUSH
46854: LD_INT 5
46856: PPUSH
46857: CALL_OW 12
46861: ST_TO_ADDR
// case event of 1 :
46862: LD_VAR 0 2
46866: PUSH
46867: LD_INT 1
46869: DOUBLE
46870: EQUAL
46871: IFTRUE 46875
46873: GO 46961
46875: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
46876: LD_ADDR_VAR 0 3
46880: PUSH
46881: LD_INT 21
46883: PUSH
46884: LD_INT 3
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PPUSH
46891: CALL_OW 69
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: LD_INT 30
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 30
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: PPUSH
46924: CALL_OW 69
46928: DIFF
46929: ST_TO_ADDR
// if tmp then
46930: LD_VAR 0 3
46934: IFFALSE 46959
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
46936: LD_VAR 0 3
46940: PUSH
46941: LD_INT 1
46943: PPUSH
46944: LD_VAR 0 3
46948: PPUSH
46949: CALL_OW 12
46953: ARRAY
46954: PPUSH
46955: CALL_OW 65
// end ; 2 :
46959: GO 47160
46961: LD_INT 2
46963: DOUBLE
46964: EQUAL
46965: IFTRUE 46969
46967: GO 47025
46969: POP
// begin uc_side := ecoSide ;
46970: LD_ADDR_OWVAR 20
46974: PUSH
46975: LD_EXP 3
46979: ST_TO_ADDR
// uc_nation := ecoNation ;
46980: LD_ADDR_OWVAR 21
46984: PUSH
46985: LD_EXP 4
46989: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
46990: LD_INT 0
46992: PPUSH
46993: LD_INT 1
46995: PPUSH
46996: LD_INT 4
46998: PPUSH
46999: CALL_OW 12
47003: PPUSH
47004: LD_INT 8
47006: PPUSH
47007: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
47011: CALL_OW 44
47015: PPUSH
47016: LD_INT 1
47018: PPUSH
47019: CALL_OW 51
// end ; 3 :
47023: GO 47160
47025: LD_INT 3
47027: DOUBLE
47028: EQUAL
47029: IFTRUE 47033
47031: GO 47085
47033: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
47034: LD_ADDR_VAR 0 3
47038: PUSH
47039: LD_INT 21
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PPUSH
47049: CALL_OW 69
47053: ST_TO_ADDR
// if tmp then
47054: LD_VAR 0 3
47058: IFFALSE 47083
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
47060: LD_VAR 0 3
47064: PUSH
47065: LD_INT 1
47067: PPUSH
47068: LD_VAR 0 3
47072: PPUSH
47073: CALL_OW 12
47077: ARRAY
47078: PPUSH
47079: CALL_OW 65
// end ; 4 :
47083: GO 47160
47085: LD_INT 4
47087: DOUBLE
47088: EQUAL
47089: IFTRUE 47093
47091: GO 47148
47093: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
47094: LD_ADDR_VAR 0 3
47098: PUSH
47099: LD_INT 21
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PPUSH
47109: CALL_OW 69
47113: ST_TO_ADDR
// if tmp then
47114: LD_VAR 0 3
47118: IFFALSE 47146
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
47120: LD_VAR 0 3
47124: PUSH
47125: LD_INT 1
47127: PPUSH
47128: LD_VAR 0 3
47132: PPUSH
47133: CALL_OW 12
47137: ARRAY
47138: PPUSH
47139: LD_INT 190
47141: PPUSH
47142: CALL_OW 234
// end ; 5 :
47146: GO 47160
47148: LD_INT 5
47150: DOUBLE
47151: EQUAL
47152: IFTRUE 47156
47154: GO 47159
47156: POP
// begin end ; end ;
47157: GO 47160
47159: POP
// end ;
47160: LD_VAR 0 1
47164: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
47165: LD_INT 0
47167: PPUSH
47168: PPUSH
// for i := 1 to 100 do
47169: LD_ADDR_VAR 0 2
47173: PUSH
47174: DOUBLE
47175: LD_INT 1
47177: DEC
47178: ST_TO_ADDR
47179: LD_INT 100
47181: PUSH
47182: FOR_TO
47183: IFFALSE 47204
// SetTech ( i , ecoSide , state_researched ) ;
47185: LD_VAR 0 2
47189: PPUSH
47190: LD_EXP 3
47194: PPUSH
47195: LD_INT 2
47197: PPUSH
47198: CALL_OW 322
47202: GO 47182
47204: POP
47205: POP
// end ;
47206: LD_VAR 0 1
47210: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
47211: LD_VAR 0 2
47215: PUSH
47216: LD_INT 102
47218: EQUAL
47219: IFFALSE 47411
// begin case p3 of 1 :
47221: LD_VAR 0 3
47225: PUSH
47226: LD_INT 1
47228: DOUBLE
47229: EQUAL
47230: IFTRUE 47234
47232: GO 47252
47234: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
47235: LD_ADDR_EXP 11
47239: PUSH
47240: LD_EXP 11
47244: PPUSH
47245: CALL 40650 0 1
47249: ST_TO_ADDR
47250: GO 47409
47252: LD_INT 2
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 47278
47260: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
47261: LD_ADDR_EXP 10
47265: PUSH
47266: LD_EXP 10
47270: PPUSH
47271: CALL 40650 0 1
47275: ST_TO_ADDR
47276: GO 47409
47278: LD_INT 3
47280: DOUBLE
47281: EQUAL
47282: IFTRUE 47286
47284: GO 47304
47286: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
47287: LD_ADDR_EXP 9
47291: PUSH
47292: LD_EXP 9
47296: PPUSH
47297: CALL 40650 0 1
47301: ST_TO_ADDR
47302: GO 47409
47304: LD_INT 4
47306: DOUBLE
47307: EQUAL
47308: IFTRUE 47312
47310: GO 47319
47312: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
47313: CALL 47165 0 0
47317: GO 47409
47319: LD_INT 5
47321: DOUBLE
47322: GREATEREQUAL
47323: IFFALSE 47331
47325: LD_INT 8
47327: DOUBLE
47328: LESSEQUAL
47329: IFTRUE 47333
47331: GO 47408
47333: POP
// begin uc_side := ecoSide ;
47334: LD_ADDR_OWVAR 20
47338: PUSH
47339: LD_EXP 3
47343: ST_TO_ADDR
// uc_nation := ecoNation ;
47344: LD_ADDR_OWVAR 21
47348: PUSH
47349: LD_EXP 4
47353: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
47354: LD_INT 0
47356: PPUSH
47357: LD_VAR 0 3
47361: PUSH
47362: LD_INT 4
47364: MINUS
47365: PPUSH
47366: LD_INT 4
47368: PPUSH
47369: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
47373: CALL_OW 44
47377: PPUSH
47378: LD_EXP 6
47382: PUSH
47383: LD_INT 1
47385: ARRAY
47386: PPUSH
47387: LD_EXP 6
47391: PUSH
47392: LD_INT 2
47394: ARRAY
47395: PPUSH
47396: LD_INT 12
47398: PPUSH
47399: LD_INT 1
47401: PPUSH
47402: CALL_OW 50
// end ; end ;
47406: GO 47409
47408: POP
// end else
47409: GO 47445
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47411: LD_VAR 0 1
47415: PPUSH
47416: LD_VAR 0 2
47420: PPUSH
47421: LD_VAR 0 3
47425: PPUSH
47426: LD_VAR 0 4
47430: PPUSH
47431: LD_VAR 0 5
47435: PPUSH
47436: LD_VAR 0 6
47440: PPUSH
47441: CALL 47653 0 6
// end ;
47445: PPOPN 6
47447: END
// on MapStart ( p ) do begin if gameType = 1 then
47448: LD_EXP 2
47452: PUSH
47453: LD_INT 1
47455: EQUAL
47456: IFFALSE 47467
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
47458: LD_STRING SKIRMISH_GAME_TYPE = 1
47460: PPUSH
47461: CALL_OW 559
47465: GO 47474
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
47467: LD_STRING SKIRMISH_GAME_TYPE = 0
47469: PPUSH
47470: CALL_OW 559
// SOS_MapStart ( ) ;
47474: CALL 47540 0 0
// end ; end_of_file
47478: PPOPN 1
47480: END
// export globalGameSaveCounter ; every 0 0$1 do
47481: GO 47483
47483: DISABLE
// begin enable ;
47484: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47485: LD_STRING updateTimer(
47487: PUSH
47488: LD_OWVAR 1
47492: STR
47493: PUSH
47494: LD_STRING );
47496: STR
47497: PPUSH
47498: CALL_OW 559
// end ;
47502: END
// every 0 0$1 do
47503: GO 47505
47505: DISABLE
// begin globalGameSaveCounter := 0 ;
47506: LD_ADDR_EXP 14
47510: PUSH
47511: LD_INT 0
47513: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47514: LD_STRING setGameSaveCounter(0)
47516: PPUSH
47517: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47521: LD_STRING initStreamRollete();
47523: PPUSH
47524: CALL_OW 559
// InitStreamMode ;
47528: CALL 48873 0 0
// DefineStreamItems ( false ) ;
47532: LD_INT 0
47534: PPUSH
47535: CALL 49337 0 1
// end ;
47539: END
// export function SOS_MapStart ( ) ; begin
47540: LD_INT 0
47542: PPUSH
// if streamModeActive then
47543: LD_EXP 15
47547: IFFALSE 47556
// DefineStreamItems ( true ) ;
47549: LD_INT 1
47551: PPUSH
47552: CALL 49337 0 1
// UpdateLuaVariables ( ) ;
47556: CALL 47573 0 0
// UpdateFactoryWaypoints ( ) ;
47560: CALL 62459 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47564: CALL 62711 0 0
// end ;
47568: LD_VAR 0 1
47572: RET
// function UpdateLuaVariables ( ) ; begin
47573: LD_INT 0
47575: PPUSH
// if globalGameSaveCounter then
47576: LD_EXP 14
47580: IFFALSE 47614
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47582: LD_ADDR_EXP 14
47586: PUSH
47587: LD_EXP 14
47591: PPUSH
47592: CALL 40669 0 1
47596: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47597: LD_STRING setGameSaveCounter(
47599: PUSH
47600: LD_EXP 14
47604: STR
47605: PUSH
47606: LD_STRING )
47608: STR
47609: PPUSH
47610: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47614: LD_STRING setGameDifficulty(
47616: PUSH
47617: LD_OWVAR 67
47621: STR
47622: PUSH
47623: LD_STRING )
47625: STR
47626: PPUSH
47627: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
47631: LD_STRING displayDifficulty(
47633: PUSH
47634: LD_OWVAR 67
47638: STR
47639: PUSH
47640: LD_STRING )
47642: STR
47643: PPUSH
47644: CALL_OW 559
// end ;
47648: LD_VAR 0 1
47652: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47653: LD_INT 0
47655: PPUSH
// if p2 = stream_mode then
47656: LD_VAR 0 2
47660: PUSH
47661: LD_INT 100
47663: EQUAL
47664: IFFALSE 48667
// begin if not StreamModeActive then
47666: LD_EXP 15
47670: NOT
47671: IFFALSE 47681
// StreamModeActive := true ;
47673: LD_ADDR_EXP 15
47677: PUSH
47678: LD_INT 1
47680: ST_TO_ADDR
// if p3 = 0 then
47681: LD_VAR 0 3
47685: PUSH
47686: LD_INT 0
47688: EQUAL
47689: IFFALSE 47695
// InitStreamMode ;
47691: CALL 48873 0 0
// if p3 = 1 then
47695: LD_VAR 0 3
47699: PUSH
47700: LD_INT 1
47702: EQUAL
47703: IFFALSE 47713
// sRocket := true ;
47705: LD_ADDR_EXP 20
47709: PUSH
47710: LD_INT 1
47712: ST_TO_ADDR
// if p3 = 2 then
47713: LD_VAR 0 3
47717: PUSH
47718: LD_INT 2
47720: EQUAL
47721: IFFALSE 47731
// sSpeed := true ;
47723: LD_ADDR_EXP 19
47727: PUSH
47728: LD_INT 1
47730: ST_TO_ADDR
// if p3 = 3 then
47731: LD_VAR 0 3
47735: PUSH
47736: LD_INT 3
47738: EQUAL
47739: IFFALSE 47749
// sEngine := true ;
47741: LD_ADDR_EXP 21
47745: PUSH
47746: LD_INT 1
47748: ST_TO_ADDR
// if p3 = 4 then
47749: LD_VAR 0 3
47753: PUSH
47754: LD_INT 4
47756: EQUAL
47757: IFFALSE 47767
// sSpec := true ;
47759: LD_ADDR_EXP 18
47763: PUSH
47764: LD_INT 1
47766: ST_TO_ADDR
// if p3 = 5 then
47767: LD_VAR 0 3
47771: PUSH
47772: LD_INT 5
47774: EQUAL
47775: IFFALSE 47785
// sLevel := true ;
47777: LD_ADDR_EXP 22
47781: PUSH
47782: LD_INT 1
47784: ST_TO_ADDR
// if p3 = 6 then
47785: LD_VAR 0 3
47789: PUSH
47790: LD_INT 6
47792: EQUAL
47793: IFFALSE 47803
// sArmoury := true ;
47795: LD_ADDR_EXP 23
47799: PUSH
47800: LD_INT 1
47802: ST_TO_ADDR
// if p3 = 7 then
47803: LD_VAR 0 3
47807: PUSH
47808: LD_INT 7
47810: EQUAL
47811: IFFALSE 47821
// sRadar := true ;
47813: LD_ADDR_EXP 24
47817: PUSH
47818: LD_INT 1
47820: ST_TO_ADDR
// if p3 = 8 then
47821: LD_VAR 0 3
47825: PUSH
47826: LD_INT 8
47828: EQUAL
47829: IFFALSE 47839
// sBunker := true ;
47831: LD_ADDR_EXP 25
47835: PUSH
47836: LD_INT 1
47838: ST_TO_ADDR
// if p3 = 9 then
47839: LD_VAR 0 3
47843: PUSH
47844: LD_INT 9
47846: EQUAL
47847: IFFALSE 47857
// sHack := true ;
47849: LD_ADDR_EXP 26
47853: PUSH
47854: LD_INT 1
47856: ST_TO_ADDR
// if p3 = 10 then
47857: LD_VAR 0 3
47861: PUSH
47862: LD_INT 10
47864: EQUAL
47865: IFFALSE 47875
// sFire := true ;
47867: LD_ADDR_EXP 27
47871: PUSH
47872: LD_INT 1
47874: ST_TO_ADDR
// if p3 = 11 then
47875: LD_VAR 0 3
47879: PUSH
47880: LD_INT 11
47882: EQUAL
47883: IFFALSE 47893
// sRefresh := true ;
47885: LD_ADDR_EXP 28
47889: PUSH
47890: LD_INT 1
47892: ST_TO_ADDR
// if p3 = 12 then
47893: LD_VAR 0 3
47897: PUSH
47898: LD_INT 12
47900: EQUAL
47901: IFFALSE 47911
// sExp := true ;
47903: LD_ADDR_EXP 29
47907: PUSH
47908: LD_INT 1
47910: ST_TO_ADDR
// if p3 = 13 then
47911: LD_VAR 0 3
47915: PUSH
47916: LD_INT 13
47918: EQUAL
47919: IFFALSE 47929
// sDepot := true ;
47921: LD_ADDR_EXP 30
47925: PUSH
47926: LD_INT 1
47928: ST_TO_ADDR
// if p3 = 14 then
47929: LD_VAR 0 3
47933: PUSH
47934: LD_INT 14
47936: EQUAL
47937: IFFALSE 47947
// sFlag := true ;
47939: LD_ADDR_EXP 31
47943: PUSH
47944: LD_INT 1
47946: ST_TO_ADDR
// if p3 = 15 then
47947: LD_VAR 0 3
47951: PUSH
47952: LD_INT 15
47954: EQUAL
47955: IFFALSE 47965
// sKamikadze := true ;
47957: LD_ADDR_EXP 39
47961: PUSH
47962: LD_INT 1
47964: ST_TO_ADDR
// if p3 = 16 then
47965: LD_VAR 0 3
47969: PUSH
47970: LD_INT 16
47972: EQUAL
47973: IFFALSE 47983
// sTroll := true ;
47975: LD_ADDR_EXP 40
47979: PUSH
47980: LD_INT 1
47982: ST_TO_ADDR
// if p3 = 17 then
47983: LD_VAR 0 3
47987: PUSH
47988: LD_INT 17
47990: EQUAL
47991: IFFALSE 48001
// sSlow := true ;
47993: LD_ADDR_EXP 41
47997: PUSH
47998: LD_INT 1
48000: ST_TO_ADDR
// if p3 = 18 then
48001: LD_VAR 0 3
48005: PUSH
48006: LD_INT 18
48008: EQUAL
48009: IFFALSE 48019
// sLack := true ;
48011: LD_ADDR_EXP 42
48015: PUSH
48016: LD_INT 1
48018: ST_TO_ADDR
// if p3 = 19 then
48019: LD_VAR 0 3
48023: PUSH
48024: LD_INT 19
48026: EQUAL
48027: IFFALSE 48037
// sTank := true ;
48029: LD_ADDR_EXP 44
48033: PUSH
48034: LD_INT 1
48036: ST_TO_ADDR
// if p3 = 20 then
48037: LD_VAR 0 3
48041: PUSH
48042: LD_INT 20
48044: EQUAL
48045: IFFALSE 48055
// sRemote := true ;
48047: LD_ADDR_EXP 45
48051: PUSH
48052: LD_INT 1
48054: ST_TO_ADDR
// if p3 = 21 then
48055: LD_VAR 0 3
48059: PUSH
48060: LD_INT 21
48062: EQUAL
48063: IFFALSE 48073
// sPowell := true ;
48065: LD_ADDR_EXP 46
48069: PUSH
48070: LD_INT 1
48072: ST_TO_ADDR
// if p3 = 22 then
48073: LD_VAR 0 3
48077: PUSH
48078: LD_INT 22
48080: EQUAL
48081: IFFALSE 48091
// sTeleport := true ;
48083: LD_ADDR_EXP 49
48087: PUSH
48088: LD_INT 1
48090: ST_TO_ADDR
// if p3 = 23 then
48091: LD_VAR 0 3
48095: PUSH
48096: LD_INT 23
48098: EQUAL
48099: IFFALSE 48109
// sOilTower := true ;
48101: LD_ADDR_EXP 51
48105: PUSH
48106: LD_INT 1
48108: ST_TO_ADDR
// if p3 = 24 then
48109: LD_VAR 0 3
48113: PUSH
48114: LD_INT 24
48116: EQUAL
48117: IFFALSE 48127
// sShovel := true ;
48119: LD_ADDR_EXP 52
48123: PUSH
48124: LD_INT 1
48126: ST_TO_ADDR
// if p3 = 25 then
48127: LD_VAR 0 3
48131: PUSH
48132: LD_INT 25
48134: EQUAL
48135: IFFALSE 48145
// sSheik := true ;
48137: LD_ADDR_EXP 53
48141: PUSH
48142: LD_INT 1
48144: ST_TO_ADDR
// if p3 = 26 then
48145: LD_VAR 0 3
48149: PUSH
48150: LD_INT 26
48152: EQUAL
48153: IFFALSE 48163
// sEarthquake := true ;
48155: LD_ADDR_EXP 55
48159: PUSH
48160: LD_INT 1
48162: ST_TO_ADDR
// if p3 = 27 then
48163: LD_VAR 0 3
48167: PUSH
48168: LD_INT 27
48170: EQUAL
48171: IFFALSE 48181
// sAI := true ;
48173: LD_ADDR_EXP 56
48177: PUSH
48178: LD_INT 1
48180: ST_TO_ADDR
// if p3 = 28 then
48181: LD_VAR 0 3
48185: PUSH
48186: LD_INT 28
48188: EQUAL
48189: IFFALSE 48199
// sCargo := true ;
48191: LD_ADDR_EXP 59
48195: PUSH
48196: LD_INT 1
48198: ST_TO_ADDR
// if p3 = 29 then
48199: LD_VAR 0 3
48203: PUSH
48204: LD_INT 29
48206: EQUAL
48207: IFFALSE 48217
// sDLaser := true ;
48209: LD_ADDR_EXP 60
48213: PUSH
48214: LD_INT 1
48216: ST_TO_ADDR
// if p3 = 30 then
48217: LD_VAR 0 3
48221: PUSH
48222: LD_INT 30
48224: EQUAL
48225: IFFALSE 48235
// sExchange := true ;
48227: LD_ADDR_EXP 61
48231: PUSH
48232: LD_INT 1
48234: ST_TO_ADDR
// if p3 = 31 then
48235: LD_VAR 0 3
48239: PUSH
48240: LD_INT 31
48242: EQUAL
48243: IFFALSE 48253
// sFac := true ;
48245: LD_ADDR_EXP 62
48249: PUSH
48250: LD_INT 1
48252: ST_TO_ADDR
// if p3 = 32 then
48253: LD_VAR 0 3
48257: PUSH
48258: LD_INT 32
48260: EQUAL
48261: IFFALSE 48271
// sPower := true ;
48263: LD_ADDR_EXP 63
48267: PUSH
48268: LD_INT 1
48270: ST_TO_ADDR
// if p3 = 33 then
48271: LD_VAR 0 3
48275: PUSH
48276: LD_INT 33
48278: EQUAL
48279: IFFALSE 48289
// sRandom := true ;
48281: LD_ADDR_EXP 64
48285: PUSH
48286: LD_INT 1
48288: ST_TO_ADDR
// if p3 = 34 then
48289: LD_VAR 0 3
48293: PUSH
48294: LD_INT 34
48296: EQUAL
48297: IFFALSE 48307
// sShield := true ;
48299: LD_ADDR_EXP 65
48303: PUSH
48304: LD_INT 1
48306: ST_TO_ADDR
// if p3 = 35 then
48307: LD_VAR 0 3
48311: PUSH
48312: LD_INT 35
48314: EQUAL
48315: IFFALSE 48325
// sTime := true ;
48317: LD_ADDR_EXP 66
48321: PUSH
48322: LD_INT 1
48324: ST_TO_ADDR
// if p3 = 36 then
48325: LD_VAR 0 3
48329: PUSH
48330: LD_INT 36
48332: EQUAL
48333: IFFALSE 48343
// sTools := true ;
48335: LD_ADDR_EXP 67
48339: PUSH
48340: LD_INT 1
48342: ST_TO_ADDR
// if p3 = 101 then
48343: LD_VAR 0 3
48347: PUSH
48348: LD_INT 101
48350: EQUAL
48351: IFFALSE 48361
// sSold := true ;
48353: LD_ADDR_EXP 32
48357: PUSH
48358: LD_INT 1
48360: ST_TO_ADDR
// if p3 = 102 then
48361: LD_VAR 0 3
48365: PUSH
48366: LD_INT 102
48368: EQUAL
48369: IFFALSE 48379
// sDiff := true ;
48371: LD_ADDR_EXP 33
48375: PUSH
48376: LD_INT 1
48378: ST_TO_ADDR
// if p3 = 103 then
48379: LD_VAR 0 3
48383: PUSH
48384: LD_INT 103
48386: EQUAL
48387: IFFALSE 48397
// sFog := true ;
48389: LD_ADDR_EXP 36
48393: PUSH
48394: LD_INT 1
48396: ST_TO_ADDR
// if p3 = 104 then
48397: LD_VAR 0 3
48401: PUSH
48402: LD_INT 104
48404: EQUAL
48405: IFFALSE 48415
// sReset := true ;
48407: LD_ADDR_EXP 37
48411: PUSH
48412: LD_INT 1
48414: ST_TO_ADDR
// if p3 = 105 then
48415: LD_VAR 0 3
48419: PUSH
48420: LD_INT 105
48422: EQUAL
48423: IFFALSE 48433
// sSun := true ;
48425: LD_ADDR_EXP 38
48429: PUSH
48430: LD_INT 1
48432: ST_TO_ADDR
// if p3 = 106 then
48433: LD_VAR 0 3
48437: PUSH
48438: LD_INT 106
48440: EQUAL
48441: IFFALSE 48451
// sTiger := true ;
48443: LD_ADDR_EXP 34
48447: PUSH
48448: LD_INT 1
48450: ST_TO_ADDR
// if p3 = 107 then
48451: LD_VAR 0 3
48455: PUSH
48456: LD_INT 107
48458: EQUAL
48459: IFFALSE 48469
// sBomb := true ;
48461: LD_ADDR_EXP 35
48465: PUSH
48466: LD_INT 1
48468: ST_TO_ADDR
// if p3 = 108 then
48469: LD_VAR 0 3
48473: PUSH
48474: LD_INT 108
48476: EQUAL
48477: IFFALSE 48487
// sWound := true ;
48479: LD_ADDR_EXP 43
48483: PUSH
48484: LD_INT 1
48486: ST_TO_ADDR
// if p3 = 109 then
48487: LD_VAR 0 3
48491: PUSH
48492: LD_INT 109
48494: EQUAL
48495: IFFALSE 48505
// sBetray := true ;
48497: LD_ADDR_EXP 47
48501: PUSH
48502: LD_INT 1
48504: ST_TO_ADDR
// if p3 = 110 then
48505: LD_VAR 0 3
48509: PUSH
48510: LD_INT 110
48512: EQUAL
48513: IFFALSE 48523
// sContamin := true ;
48515: LD_ADDR_EXP 48
48519: PUSH
48520: LD_INT 1
48522: ST_TO_ADDR
// if p3 = 111 then
48523: LD_VAR 0 3
48527: PUSH
48528: LD_INT 111
48530: EQUAL
48531: IFFALSE 48541
// sOil := true ;
48533: LD_ADDR_EXP 50
48537: PUSH
48538: LD_INT 1
48540: ST_TO_ADDR
// if p3 = 112 then
48541: LD_VAR 0 3
48545: PUSH
48546: LD_INT 112
48548: EQUAL
48549: IFFALSE 48559
// sStu := true ;
48551: LD_ADDR_EXP 54
48555: PUSH
48556: LD_INT 1
48558: ST_TO_ADDR
// if p3 = 113 then
48559: LD_VAR 0 3
48563: PUSH
48564: LD_INT 113
48566: EQUAL
48567: IFFALSE 48577
// sBazooka := true ;
48569: LD_ADDR_EXP 57
48573: PUSH
48574: LD_INT 1
48576: ST_TO_ADDR
// if p3 = 114 then
48577: LD_VAR 0 3
48581: PUSH
48582: LD_INT 114
48584: EQUAL
48585: IFFALSE 48595
// sMortar := true ;
48587: LD_ADDR_EXP 58
48591: PUSH
48592: LD_INT 1
48594: ST_TO_ADDR
// if p3 = 115 then
48595: LD_VAR 0 3
48599: PUSH
48600: LD_INT 115
48602: EQUAL
48603: IFFALSE 48613
// sRanger := true ;
48605: LD_ADDR_EXP 68
48609: PUSH
48610: LD_INT 1
48612: ST_TO_ADDR
// if p3 = 116 then
48613: LD_VAR 0 3
48617: PUSH
48618: LD_INT 116
48620: EQUAL
48621: IFFALSE 48631
// sComputer := true ;
48623: LD_ADDR_EXP 69
48627: PUSH
48628: LD_INT 1
48630: ST_TO_ADDR
// if p3 = 117 then
48631: LD_VAR 0 3
48635: PUSH
48636: LD_INT 117
48638: EQUAL
48639: IFFALSE 48649
// s30 := true ;
48641: LD_ADDR_EXP 70
48645: PUSH
48646: LD_INT 1
48648: ST_TO_ADDR
// if p3 = 118 then
48649: LD_VAR 0 3
48653: PUSH
48654: LD_INT 118
48656: EQUAL
48657: IFFALSE 48667
// s60 := true ;
48659: LD_ADDR_EXP 71
48663: PUSH
48664: LD_INT 1
48666: ST_TO_ADDR
// end ; if p2 = hack_mode then
48667: LD_VAR 0 2
48671: PUSH
48672: LD_INT 101
48674: EQUAL
48675: IFFALSE 48803
// begin case p3 of 1 :
48677: LD_VAR 0 3
48681: PUSH
48682: LD_INT 1
48684: DOUBLE
48685: EQUAL
48686: IFTRUE 48690
48688: GO 48697
48690: POP
// hHackUnlimitedResources ; 2 :
48691: CALL 61066 0 0
48695: GO 48803
48697: LD_INT 2
48699: DOUBLE
48700: EQUAL
48701: IFTRUE 48705
48703: GO 48712
48705: POP
// hHackSetLevel10 ; 3 :
48706: CALL 61199 0 0
48710: GO 48803
48712: LD_INT 3
48714: DOUBLE
48715: EQUAL
48716: IFTRUE 48720
48718: GO 48727
48720: POP
// hHackSetLevel10YourUnits ; 4 :
48721: CALL 61284 0 0
48725: GO 48803
48727: LD_INT 4
48729: DOUBLE
48730: EQUAL
48731: IFTRUE 48735
48733: GO 48742
48735: POP
// hHackInvincible ; 5 :
48736: CALL 61732 0 0
48740: GO 48803
48742: LD_INT 5
48744: DOUBLE
48745: EQUAL
48746: IFTRUE 48750
48748: GO 48757
48750: POP
// hHackInvisible ; 6 :
48751: CALL 61843 0 0
48755: GO 48803
48757: LD_INT 6
48759: DOUBLE
48760: EQUAL
48761: IFTRUE 48765
48763: GO 48772
48765: POP
// hHackChangeYourSide ; 7 :
48766: CALL 61900 0 0
48770: GO 48803
48772: LD_INT 7
48774: DOUBLE
48775: EQUAL
48776: IFTRUE 48780
48778: GO 48787
48780: POP
// hHackChangeUnitSide ; 8 :
48781: CALL 61942 0 0
48785: GO 48803
48787: LD_INT 8
48789: DOUBLE
48790: EQUAL
48791: IFTRUE 48795
48793: GO 48802
48795: POP
// hHackFog ; end ;
48796: CALL 62043 0 0
48800: GO 48803
48802: POP
// end ; if p2 = game_save_mode then
48803: LD_VAR 0 2
48807: PUSH
48808: LD_INT 102
48810: EQUAL
48811: IFFALSE 48868
// begin if p3 = 1 then
48813: LD_VAR 0 3
48817: PUSH
48818: LD_INT 1
48820: EQUAL
48821: IFFALSE 48833
// globalGameSaveCounter := p4 ;
48823: LD_ADDR_EXP 14
48827: PUSH
48828: LD_VAR 0 4
48832: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48833: LD_VAR 0 3
48837: PUSH
48838: LD_INT 2
48840: EQUAL
48841: IFFALSE 48849
48843: PUSH
48844: LD_EXP 14
48848: AND
48849: IFFALSE 48868
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48851: LD_STRING setGameSaveCounter(
48853: PUSH
48854: LD_EXP 14
48858: STR
48859: PUSH
48860: LD_STRING )
48862: STR
48863: PPUSH
48864: CALL_OW 559
// end ; end ;
48868: LD_VAR 0 7
48872: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48873: LD_INT 0
48875: PPUSH
// streamModeActive := false ;
48876: LD_ADDR_EXP 15
48880: PUSH
48881: LD_INT 0
48883: ST_TO_ADDR
// normalCounter := 36 ;
48884: LD_ADDR_EXP 16
48888: PUSH
48889: LD_INT 36
48891: ST_TO_ADDR
// hardcoreCounter := 18 ;
48892: LD_ADDR_EXP 17
48896: PUSH
48897: LD_INT 18
48899: ST_TO_ADDR
// sRocket := false ;
48900: LD_ADDR_EXP 20
48904: PUSH
48905: LD_INT 0
48907: ST_TO_ADDR
// sSpeed := false ;
48908: LD_ADDR_EXP 19
48912: PUSH
48913: LD_INT 0
48915: ST_TO_ADDR
// sEngine := false ;
48916: LD_ADDR_EXP 21
48920: PUSH
48921: LD_INT 0
48923: ST_TO_ADDR
// sSpec := false ;
48924: LD_ADDR_EXP 18
48928: PUSH
48929: LD_INT 0
48931: ST_TO_ADDR
// sLevel := false ;
48932: LD_ADDR_EXP 22
48936: PUSH
48937: LD_INT 0
48939: ST_TO_ADDR
// sArmoury := false ;
48940: LD_ADDR_EXP 23
48944: PUSH
48945: LD_INT 0
48947: ST_TO_ADDR
// sRadar := false ;
48948: LD_ADDR_EXP 24
48952: PUSH
48953: LD_INT 0
48955: ST_TO_ADDR
// sBunker := false ;
48956: LD_ADDR_EXP 25
48960: PUSH
48961: LD_INT 0
48963: ST_TO_ADDR
// sHack := false ;
48964: LD_ADDR_EXP 26
48968: PUSH
48969: LD_INT 0
48971: ST_TO_ADDR
// sFire := false ;
48972: LD_ADDR_EXP 27
48976: PUSH
48977: LD_INT 0
48979: ST_TO_ADDR
// sRefresh := false ;
48980: LD_ADDR_EXP 28
48984: PUSH
48985: LD_INT 0
48987: ST_TO_ADDR
// sExp := false ;
48988: LD_ADDR_EXP 29
48992: PUSH
48993: LD_INT 0
48995: ST_TO_ADDR
// sDepot := false ;
48996: LD_ADDR_EXP 30
49000: PUSH
49001: LD_INT 0
49003: ST_TO_ADDR
// sFlag := false ;
49004: LD_ADDR_EXP 31
49008: PUSH
49009: LD_INT 0
49011: ST_TO_ADDR
// sKamikadze := false ;
49012: LD_ADDR_EXP 39
49016: PUSH
49017: LD_INT 0
49019: ST_TO_ADDR
// sTroll := false ;
49020: LD_ADDR_EXP 40
49024: PUSH
49025: LD_INT 0
49027: ST_TO_ADDR
// sSlow := false ;
49028: LD_ADDR_EXP 41
49032: PUSH
49033: LD_INT 0
49035: ST_TO_ADDR
// sLack := false ;
49036: LD_ADDR_EXP 42
49040: PUSH
49041: LD_INT 0
49043: ST_TO_ADDR
// sTank := false ;
49044: LD_ADDR_EXP 44
49048: PUSH
49049: LD_INT 0
49051: ST_TO_ADDR
// sRemote := false ;
49052: LD_ADDR_EXP 45
49056: PUSH
49057: LD_INT 0
49059: ST_TO_ADDR
// sPowell := false ;
49060: LD_ADDR_EXP 46
49064: PUSH
49065: LD_INT 0
49067: ST_TO_ADDR
// sTeleport := false ;
49068: LD_ADDR_EXP 49
49072: PUSH
49073: LD_INT 0
49075: ST_TO_ADDR
// sOilTower := false ;
49076: LD_ADDR_EXP 51
49080: PUSH
49081: LD_INT 0
49083: ST_TO_ADDR
// sShovel := false ;
49084: LD_ADDR_EXP 52
49088: PUSH
49089: LD_INT 0
49091: ST_TO_ADDR
// sSheik := false ;
49092: LD_ADDR_EXP 53
49096: PUSH
49097: LD_INT 0
49099: ST_TO_ADDR
// sEarthquake := false ;
49100: LD_ADDR_EXP 55
49104: PUSH
49105: LD_INT 0
49107: ST_TO_ADDR
// sAI := false ;
49108: LD_ADDR_EXP 56
49112: PUSH
49113: LD_INT 0
49115: ST_TO_ADDR
// sCargo := false ;
49116: LD_ADDR_EXP 59
49120: PUSH
49121: LD_INT 0
49123: ST_TO_ADDR
// sDLaser := false ;
49124: LD_ADDR_EXP 60
49128: PUSH
49129: LD_INT 0
49131: ST_TO_ADDR
// sExchange := false ;
49132: LD_ADDR_EXP 61
49136: PUSH
49137: LD_INT 0
49139: ST_TO_ADDR
// sFac := false ;
49140: LD_ADDR_EXP 62
49144: PUSH
49145: LD_INT 0
49147: ST_TO_ADDR
// sPower := false ;
49148: LD_ADDR_EXP 63
49152: PUSH
49153: LD_INT 0
49155: ST_TO_ADDR
// sRandom := false ;
49156: LD_ADDR_EXP 64
49160: PUSH
49161: LD_INT 0
49163: ST_TO_ADDR
// sShield := false ;
49164: LD_ADDR_EXP 65
49168: PUSH
49169: LD_INT 0
49171: ST_TO_ADDR
// sTime := false ;
49172: LD_ADDR_EXP 66
49176: PUSH
49177: LD_INT 0
49179: ST_TO_ADDR
// sTools := false ;
49180: LD_ADDR_EXP 67
49184: PUSH
49185: LD_INT 0
49187: ST_TO_ADDR
// sSold := false ;
49188: LD_ADDR_EXP 32
49192: PUSH
49193: LD_INT 0
49195: ST_TO_ADDR
// sDiff := false ;
49196: LD_ADDR_EXP 33
49200: PUSH
49201: LD_INT 0
49203: ST_TO_ADDR
// sFog := false ;
49204: LD_ADDR_EXP 36
49208: PUSH
49209: LD_INT 0
49211: ST_TO_ADDR
// sReset := false ;
49212: LD_ADDR_EXP 37
49216: PUSH
49217: LD_INT 0
49219: ST_TO_ADDR
// sSun := false ;
49220: LD_ADDR_EXP 38
49224: PUSH
49225: LD_INT 0
49227: ST_TO_ADDR
// sTiger := false ;
49228: LD_ADDR_EXP 34
49232: PUSH
49233: LD_INT 0
49235: ST_TO_ADDR
// sBomb := false ;
49236: LD_ADDR_EXP 35
49240: PUSH
49241: LD_INT 0
49243: ST_TO_ADDR
// sWound := false ;
49244: LD_ADDR_EXP 43
49248: PUSH
49249: LD_INT 0
49251: ST_TO_ADDR
// sBetray := false ;
49252: LD_ADDR_EXP 47
49256: PUSH
49257: LD_INT 0
49259: ST_TO_ADDR
// sContamin := false ;
49260: LD_ADDR_EXP 48
49264: PUSH
49265: LD_INT 0
49267: ST_TO_ADDR
// sOil := false ;
49268: LD_ADDR_EXP 50
49272: PUSH
49273: LD_INT 0
49275: ST_TO_ADDR
// sStu := false ;
49276: LD_ADDR_EXP 54
49280: PUSH
49281: LD_INT 0
49283: ST_TO_ADDR
// sBazooka := false ;
49284: LD_ADDR_EXP 57
49288: PUSH
49289: LD_INT 0
49291: ST_TO_ADDR
// sMortar := false ;
49292: LD_ADDR_EXP 58
49296: PUSH
49297: LD_INT 0
49299: ST_TO_ADDR
// sRanger := false ;
49300: LD_ADDR_EXP 68
49304: PUSH
49305: LD_INT 0
49307: ST_TO_ADDR
// sComputer := false ;
49308: LD_ADDR_EXP 69
49312: PUSH
49313: LD_INT 0
49315: ST_TO_ADDR
// s30 := false ;
49316: LD_ADDR_EXP 70
49320: PUSH
49321: LD_INT 0
49323: ST_TO_ADDR
// s60 := false ;
49324: LD_ADDR_EXP 71
49328: PUSH
49329: LD_INT 0
49331: ST_TO_ADDR
// end ;
49332: LD_VAR 0 1
49336: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49337: LD_INT 0
49339: PPUSH
49340: PPUSH
49341: PPUSH
49342: PPUSH
49343: PPUSH
49344: PPUSH
49345: PPUSH
// result := [ ] ;
49346: LD_ADDR_VAR 0 2
49350: PUSH
49351: EMPTY
49352: ST_TO_ADDR
// if campaign_id = 1 then
49353: LD_OWVAR 69
49357: PUSH
49358: LD_INT 1
49360: EQUAL
49361: IFFALSE 52527
// begin case mission_number of 1 :
49363: LD_OWVAR 70
49367: PUSH
49368: LD_INT 1
49370: DOUBLE
49371: EQUAL
49372: IFTRUE 49376
49374: GO 49452
49376: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49377: LD_ADDR_VAR 0 2
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 4
49387: PUSH
49388: LD_INT 11
49390: PUSH
49391: LD_INT 12
49393: PUSH
49394: LD_INT 15
49396: PUSH
49397: LD_INT 16
49399: PUSH
49400: LD_INT 22
49402: PUSH
49403: LD_INT 23
49405: PUSH
49406: LD_INT 26
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 101
49422: PUSH
49423: LD_INT 102
49425: PUSH
49426: LD_INT 106
49428: PUSH
49429: LD_INT 116
49431: PUSH
49432: LD_INT 117
49434: PUSH
49435: LD_INT 118
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: ST_TO_ADDR
49450: GO 52525
49452: LD_INT 2
49454: DOUBLE
49455: EQUAL
49456: IFTRUE 49460
49458: GO 49544
49460: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49461: LD_ADDR_VAR 0 2
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 4
49471: PUSH
49472: LD_INT 11
49474: PUSH
49475: LD_INT 12
49477: PUSH
49478: LD_INT 15
49480: PUSH
49481: LD_INT 16
49483: PUSH
49484: LD_INT 22
49486: PUSH
49487: LD_INT 23
49489: PUSH
49490: LD_INT 26
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 101
49506: PUSH
49507: LD_INT 102
49509: PUSH
49510: LD_INT 105
49512: PUSH
49513: LD_INT 106
49515: PUSH
49516: LD_INT 108
49518: PUSH
49519: LD_INT 116
49521: PUSH
49522: LD_INT 117
49524: PUSH
49525: LD_INT 118
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: ST_TO_ADDR
49542: GO 52525
49544: LD_INT 3
49546: DOUBLE
49547: EQUAL
49548: IFTRUE 49552
49550: GO 49640
49552: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49553: LD_ADDR_VAR 0 2
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 4
49563: PUSH
49564: LD_INT 5
49566: PUSH
49567: LD_INT 11
49569: PUSH
49570: LD_INT 12
49572: PUSH
49573: LD_INT 15
49575: PUSH
49576: LD_INT 16
49578: PUSH
49579: LD_INT 22
49581: PUSH
49582: LD_INT 26
49584: PUSH
49585: LD_INT 36
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 101
49602: PUSH
49603: LD_INT 102
49605: PUSH
49606: LD_INT 105
49608: PUSH
49609: LD_INT 106
49611: PUSH
49612: LD_INT 108
49614: PUSH
49615: LD_INT 116
49617: PUSH
49618: LD_INT 117
49620: PUSH
49621: LD_INT 118
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: ST_TO_ADDR
49638: GO 52525
49640: LD_INT 4
49642: DOUBLE
49643: EQUAL
49644: IFTRUE 49648
49646: GO 49744
49648: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49649: LD_ADDR_VAR 0 2
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 4
49659: PUSH
49660: LD_INT 5
49662: PUSH
49663: LD_INT 8
49665: PUSH
49666: LD_INT 11
49668: PUSH
49669: LD_INT 12
49671: PUSH
49672: LD_INT 15
49674: PUSH
49675: LD_INT 16
49677: PUSH
49678: LD_INT 22
49680: PUSH
49681: LD_INT 23
49683: PUSH
49684: LD_INT 26
49686: PUSH
49687: LD_INT 36
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 101
49706: PUSH
49707: LD_INT 102
49709: PUSH
49710: LD_INT 105
49712: PUSH
49713: LD_INT 106
49715: PUSH
49716: LD_INT 108
49718: PUSH
49719: LD_INT 116
49721: PUSH
49722: LD_INT 117
49724: PUSH
49725: LD_INT 118
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: ST_TO_ADDR
49742: GO 52525
49744: LD_INT 5
49746: DOUBLE
49747: EQUAL
49748: IFTRUE 49752
49750: GO 49864
49752: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49753: LD_ADDR_VAR 0 2
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 4
49763: PUSH
49764: LD_INT 5
49766: PUSH
49767: LD_INT 6
49769: PUSH
49770: LD_INT 8
49772: PUSH
49773: LD_INT 11
49775: PUSH
49776: LD_INT 12
49778: PUSH
49779: LD_INT 15
49781: PUSH
49782: LD_INT 16
49784: PUSH
49785: LD_INT 22
49787: PUSH
49788: LD_INT 23
49790: PUSH
49791: LD_INT 25
49793: PUSH
49794: LD_INT 26
49796: PUSH
49797: LD_INT 36
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 101
49818: PUSH
49819: LD_INT 102
49821: PUSH
49822: LD_INT 105
49824: PUSH
49825: LD_INT 106
49827: PUSH
49828: LD_INT 108
49830: PUSH
49831: LD_INT 109
49833: PUSH
49834: LD_INT 112
49836: PUSH
49837: LD_INT 116
49839: PUSH
49840: LD_INT 117
49842: PUSH
49843: LD_INT 118
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: ST_TO_ADDR
49862: GO 52525
49864: LD_INT 6
49866: DOUBLE
49867: EQUAL
49868: IFTRUE 49872
49870: GO 50004
49872: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49873: LD_ADDR_VAR 0 2
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 4
49883: PUSH
49884: LD_INT 5
49886: PUSH
49887: LD_INT 6
49889: PUSH
49890: LD_INT 8
49892: PUSH
49893: LD_INT 11
49895: PUSH
49896: LD_INT 12
49898: PUSH
49899: LD_INT 15
49901: PUSH
49902: LD_INT 16
49904: PUSH
49905: LD_INT 20
49907: PUSH
49908: LD_INT 21
49910: PUSH
49911: LD_INT 22
49913: PUSH
49914: LD_INT 23
49916: PUSH
49917: LD_INT 25
49919: PUSH
49920: LD_INT 26
49922: PUSH
49923: LD_INT 30
49925: PUSH
49926: LD_INT 31
49928: PUSH
49929: LD_INT 32
49931: PUSH
49932: LD_INT 36
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 101
49958: PUSH
49959: LD_INT 102
49961: PUSH
49962: LD_INT 105
49964: PUSH
49965: LD_INT 106
49967: PUSH
49968: LD_INT 108
49970: PUSH
49971: LD_INT 109
49973: PUSH
49974: LD_INT 112
49976: PUSH
49977: LD_INT 116
49979: PUSH
49980: LD_INT 117
49982: PUSH
49983: LD_INT 118
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: ST_TO_ADDR
50002: GO 52525
50004: LD_INT 7
50006: DOUBLE
50007: EQUAL
50008: IFTRUE 50012
50010: GO 50124
50012: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50013: LD_ADDR_VAR 0 2
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: LD_INT 5
50026: PUSH
50027: LD_INT 7
50029: PUSH
50030: LD_INT 11
50032: PUSH
50033: LD_INT 12
50035: PUSH
50036: LD_INT 15
50038: PUSH
50039: LD_INT 16
50041: PUSH
50042: LD_INT 20
50044: PUSH
50045: LD_INT 21
50047: PUSH
50048: LD_INT 22
50050: PUSH
50051: LD_INT 23
50053: PUSH
50054: LD_INT 25
50056: PUSH
50057: LD_INT 26
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 101
50078: PUSH
50079: LD_INT 102
50081: PUSH
50082: LD_INT 103
50084: PUSH
50085: LD_INT 105
50087: PUSH
50088: LD_INT 106
50090: PUSH
50091: LD_INT 108
50093: PUSH
50094: LD_INT 112
50096: PUSH
50097: LD_INT 116
50099: PUSH
50100: LD_INT 117
50102: PUSH
50103: LD_INT 118
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: ST_TO_ADDR
50122: GO 52525
50124: LD_INT 8
50126: DOUBLE
50127: EQUAL
50128: IFTRUE 50132
50130: GO 50272
50132: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50133: LD_ADDR_VAR 0 2
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: LD_INT 4
50143: PUSH
50144: LD_INT 5
50146: PUSH
50147: LD_INT 6
50149: PUSH
50150: LD_INT 7
50152: PUSH
50153: LD_INT 8
50155: PUSH
50156: LD_INT 11
50158: PUSH
50159: LD_INT 12
50161: PUSH
50162: LD_INT 15
50164: PUSH
50165: LD_INT 16
50167: PUSH
50168: LD_INT 20
50170: PUSH
50171: LD_INT 21
50173: PUSH
50174: LD_INT 22
50176: PUSH
50177: LD_INT 23
50179: PUSH
50180: LD_INT 25
50182: PUSH
50183: LD_INT 26
50185: PUSH
50186: LD_INT 30
50188: PUSH
50189: LD_INT 31
50191: PUSH
50192: LD_INT 32
50194: PUSH
50195: LD_INT 36
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 101
50222: PUSH
50223: LD_INT 102
50225: PUSH
50226: LD_INT 103
50228: PUSH
50229: LD_INT 105
50231: PUSH
50232: LD_INT 106
50234: PUSH
50235: LD_INT 108
50237: PUSH
50238: LD_INT 109
50240: PUSH
50241: LD_INT 112
50243: PUSH
50244: LD_INT 116
50246: PUSH
50247: LD_INT 117
50249: PUSH
50250: LD_INT 118
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: ST_TO_ADDR
50270: GO 52525
50272: LD_INT 9
50274: DOUBLE
50275: EQUAL
50276: IFTRUE 50280
50278: GO 50428
50280: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50281: LD_ADDR_VAR 0 2
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 4
50291: PUSH
50292: LD_INT 5
50294: PUSH
50295: LD_INT 6
50297: PUSH
50298: LD_INT 7
50300: PUSH
50301: LD_INT 8
50303: PUSH
50304: LD_INT 11
50306: PUSH
50307: LD_INT 12
50309: PUSH
50310: LD_INT 15
50312: PUSH
50313: LD_INT 16
50315: PUSH
50316: LD_INT 20
50318: PUSH
50319: LD_INT 21
50321: PUSH
50322: LD_INT 22
50324: PUSH
50325: LD_INT 23
50327: PUSH
50328: LD_INT 25
50330: PUSH
50331: LD_INT 26
50333: PUSH
50334: LD_INT 28
50336: PUSH
50337: LD_INT 30
50339: PUSH
50340: LD_INT 31
50342: PUSH
50343: LD_INT 32
50345: PUSH
50346: LD_INT 36
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 101
50374: PUSH
50375: LD_INT 102
50377: PUSH
50378: LD_INT 103
50380: PUSH
50381: LD_INT 105
50383: PUSH
50384: LD_INT 106
50386: PUSH
50387: LD_INT 108
50389: PUSH
50390: LD_INT 109
50392: PUSH
50393: LD_INT 112
50395: PUSH
50396: LD_INT 114
50398: PUSH
50399: LD_INT 116
50401: PUSH
50402: LD_INT 117
50404: PUSH
50405: LD_INT 118
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: ST_TO_ADDR
50426: GO 52525
50428: LD_INT 10
50430: DOUBLE
50431: EQUAL
50432: IFTRUE 50436
50434: GO 50632
50436: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50437: LD_ADDR_VAR 0 2
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 4
50447: PUSH
50448: LD_INT 5
50450: PUSH
50451: LD_INT 6
50453: PUSH
50454: LD_INT 7
50456: PUSH
50457: LD_INT 8
50459: PUSH
50460: LD_INT 9
50462: PUSH
50463: LD_INT 10
50465: PUSH
50466: LD_INT 11
50468: PUSH
50469: LD_INT 12
50471: PUSH
50472: LD_INT 13
50474: PUSH
50475: LD_INT 14
50477: PUSH
50478: LD_INT 15
50480: PUSH
50481: LD_INT 16
50483: PUSH
50484: LD_INT 17
50486: PUSH
50487: LD_INT 18
50489: PUSH
50490: LD_INT 19
50492: PUSH
50493: LD_INT 20
50495: PUSH
50496: LD_INT 21
50498: PUSH
50499: LD_INT 22
50501: PUSH
50502: LD_INT 23
50504: PUSH
50505: LD_INT 24
50507: PUSH
50508: LD_INT 25
50510: PUSH
50511: LD_INT 26
50513: PUSH
50514: LD_INT 28
50516: PUSH
50517: LD_INT 30
50519: PUSH
50520: LD_INT 31
50522: PUSH
50523: LD_INT 32
50525: PUSH
50526: LD_INT 36
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 101
50562: PUSH
50563: LD_INT 102
50565: PUSH
50566: LD_INT 103
50568: PUSH
50569: LD_INT 104
50571: PUSH
50572: LD_INT 105
50574: PUSH
50575: LD_INT 106
50577: PUSH
50578: LD_INT 107
50580: PUSH
50581: LD_INT 108
50583: PUSH
50584: LD_INT 109
50586: PUSH
50587: LD_INT 110
50589: PUSH
50590: LD_INT 111
50592: PUSH
50593: LD_INT 112
50595: PUSH
50596: LD_INT 114
50598: PUSH
50599: LD_INT 116
50601: PUSH
50602: LD_INT 117
50604: PUSH
50605: LD_INT 118
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: ST_TO_ADDR
50630: GO 52525
50632: LD_INT 11
50634: DOUBLE
50635: EQUAL
50636: IFTRUE 50640
50638: GO 50844
50640: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50641: LD_ADDR_VAR 0 2
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: LD_INT 5
50657: PUSH
50658: LD_INT 6
50660: PUSH
50661: LD_INT 7
50663: PUSH
50664: LD_INT 8
50666: PUSH
50667: LD_INT 9
50669: PUSH
50670: LD_INT 10
50672: PUSH
50673: LD_INT 11
50675: PUSH
50676: LD_INT 12
50678: PUSH
50679: LD_INT 13
50681: PUSH
50682: LD_INT 14
50684: PUSH
50685: LD_INT 15
50687: PUSH
50688: LD_INT 16
50690: PUSH
50691: LD_INT 17
50693: PUSH
50694: LD_INT 18
50696: PUSH
50697: LD_INT 19
50699: PUSH
50700: LD_INT 20
50702: PUSH
50703: LD_INT 21
50705: PUSH
50706: LD_INT 22
50708: PUSH
50709: LD_INT 23
50711: PUSH
50712: LD_INT 24
50714: PUSH
50715: LD_INT 25
50717: PUSH
50718: LD_INT 26
50720: PUSH
50721: LD_INT 28
50723: PUSH
50724: LD_INT 30
50726: PUSH
50727: LD_INT 31
50729: PUSH
50730: LD_INT 32
50732: PUSH
50733: LD_INT 34
50735: PUSH
50736: LD_INT 36
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 101
50774: PUSH
50775: LD_INT 102
50777: PUSH
50778: LD_INT 103
50780: PUSH
50781: LD_INT 104
50783: PUSH
50784: LD_INT 105
50786: PUSH
50787: LD_INT 106
50789: PUSH
50790: LD_INT 107
50792: PUSH
50793: LD_INT 108
50795: PUSH
50796: LD_INT 109
50798: PUSH
50799: LD_INT 110
50801: PUSH
50802: LD_INT 111
50804: PUSH
50805: LD_INT 112
50807: PUSH
50808: LD_INT 114
50810: PUSH
50811: LD_INT 116
50813: PUSH
50814: LD_INT 117
50816: PUSH
50817: LD_INT 118
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: ST_TO_ADDR
50842: GO 52525
50844: LD_INT 12
50846: DOUBLE
50847: EQUAL
50848: IFTRUE 50852
50850: GO 51072
50852: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50853: LD_ADDR_VAR 0 2
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 4
50869: PUSH
50870: LD_INT 5
50872: PUSH
50873: LD_INT 6
50875: PUSH
50876: LD_INT 7
50878: PUSH
50879: LD_INT 8
50881: PUSH
50882: LD_INT 9
50884: PUSH
50885: LD_INT 10
50887: PUSH
50888: LD_INT 11
50890: PUSH
50891: LD_INT 12
50893: PUSH
50894: LD_INT 13
50896: PUSH
50897: LD_INT 14
50899: PUSH
50900: LD_INT 15
50902: PUSH
50903: LD_INT 16
50905: PUSH
50906: LD_INT 17
50908: PUSH
50909: LD_INT 18
50911: PUSH
50912: LD_INT 19
50914: PUSH
50915: LD_INT 20
50917: PUSH
50918: LD_INT 21
50920: PUSH
50921: LD_INT 22
50923: PUSH
50924: LD_INT 23
50926: PUSH
50927: LD_INT 24
50929: PUSH
50930: LD_INT 25
50932: PUSH
50933: LD_INT 26
50935: PUSH
50936: LD_INT 27
50938: PUSH
50939: LD_INT 28
50941: PUSH
50942: LD_INT 30
50944: PUSH
50945: LD_INT 31
50947: PUSH
50948: LD_INT 32
50950: PUSH
50951: LD_INT 33
50953: PUSH
50954: LD_INT 34
50956: PUSH
50957: LD_INT 36
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 101
50998: PUSH
50999: LD_INT 102
51001: PUSH
51002: LD_INT 103
51004: PUSH
51005: LD_INT 104
51007: PUSH
51008: LD_INT 105
51010: PUSH
51011: LD_INT 106
51013: PUSH
51014: LD_INT 107
51016: PUSH
51017: LD_INT 108
51019: PUSH
51020: LD_INT 109
51022: PUSH
51023: LD_INT 110
51025: PUSH
51026: LD_INT 111
51028: PUSH
51029: LD_INT 112
51031: PUSH
51032: LD_INT 113
51034: PUSH
51035: LD_INT 114
51037: PUSH
51038: LD_INT 116
51040: PUSH
51041: LD_INT 117
51043: PUSH
51044: LD_INT 118
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: ST_TO_ADDR
51070: GO 52525
51072: LD_INT 13
51074: DOUBLE
51075: EQUAL
51076: IFTRUE 51080
51078: GO 51288
51080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51081: LD_ADDR_VAR 0 2
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: LD_INT 4
51097: PUSH
51098: LD_INT 5
51100: PUSH
51101: LD_INT 8
51103: PUSH
51104: LD_INT 9
51106: PUSH
51107: LD_INT 10
51109: PUSH
51110: LD_INT 11
51112: PUSH
51113: LD_INT 12
51115: PUSH
51116: LD_INT 14
51118: PUSH
51119: LD_INT 15
51121: PUSH
51122: LD_INT 16
51124: PUSH
51125: LD_INT 17
51127: PUSH
51128: LD_INT 18
51130: PUSH
51131: LD_INT 19
51133: PUSH
51134: LD_INT 20
51136: PUSH
51137: LD_INT 21
51139: PUSH
51140: LD_INT 22
51142: PUSH
51143: LD_INT 23
51145: PUSH
51146: LD_INT 24
51148: PUSH
51149: LD_INT 25
51151: PUSH
51152: LD_INT 26
51154: PUSH
51155: LD_INT 27
51157: PUSH
51158: LD_INT 28
51160: PUSH
51161: LD_INT 30
51163: PUSH
51164: LD_INT 31
51166: PUSH
51167: LD_INT 32
51169: PUSH
51170: LD_INT 33
51172: PUSH
51173: LD_INT 34
51175: PUSH
51176: LD_INT 36
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 101
51214: PUSH
51215: LD_INT 102
51217: PUSH
51218: LD_INT 103
51220: PUSH
51221: LD_INT 104
51223: PUSH
51224: LD_INT 105
51226: PUSH
51227: LD_INT 106
51229: PUSH
51230: LD_INT 107
51232: PUSH
51233: LD_INT 108
51235: PUSH
51236: LD_INT 109
51238: PUSH
51239: LD_INT 110
51241: PUSH
51242: LD_INT 111
51244: PUSH
51245: LD_INT 112
51247: PUSH
51248: LD_INT 113
51250: PUSH
51251: LD_INT 114
51253: PUSH
51254: LD_INT 116
51256: PUSH
51257: LD_INT 117
51259: PUSH
51260: LD_INT 118
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: ST_TO_ADDR
51286: GO 52525
51288: LD_INT 14
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51296
51294: GO 51520
51296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51297: LD_ADDR_VAR 0 2
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: LD_INT 4
51313: PUSH
51314: LD_INT 5
51316: PUSH
51317: LD_INT 6
51319: PUSH
51320: LD_INT 7
51322: PUSH
51323: LD_INT 8
51325: PUSH
51326: LD_INT 9
51328: PUSH
51329: LD_INT 10
51331: PUSH
51332: LD_INT 11
51334: PUSH
51335: LD_INT 12
51337: PUSH
51338: LD_INT 13
51340: PUSH
51341: LD_INT 14
51343: PUSH
51344: LD_INT 15
51346: PUSH
51347: LD_INT 16
51349: PUSH
51350: LD_INT 17
51352: PUSH
51353: LD_INT 18
51355: PUSH
51356: LD_INT 19
51358: PUSH
51359: LD_INT 20
51361: PUSH
51362: LD_INT 21
51364: PUSH
51365: LD_INT 22
51367: PUSH
51368: LD_INT 23
51370: PUSH
51371: LD_INT 24
51373: PUSH
51374: LD_INT 25
51376: PUSH
51377: LD_INT 26
51379: PUSH
51380: LD_INT 27
51382: PUSH
51383: LD_INT 28
51385: PUSH
51386: LD_INT 29
51388: PUSH
51389: LD_INT 30
51391: PUSH
51392: LD_INT 31
51394: PUSH
51395: LD_INT 32
51397: PUSH
51398: LD_INT 33
51400: PUSH
51401: LD_INT 34
51403: PUSH
51404: LD_INT 36
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 101
51446: PUSH
51447: LD_INT 102
51449: PUSH
51450: LD_INT 103
51452: PUSH
51453: LD_INT 104
51455: PUSH
51456: LD_INT 105
51458: PUSH
51459: LD_INT 106
51461: PUSH
51462: LD_INT 107
51464: PUSH
51465: LD_INT 108
51467: PUSH
51468: LD_INT 109
51470: PUSH
51471: LD_INT 110
51473: PUSH
51474: LD_INT 111
51476: PUSH
51477: LD_INT 112
51479: PUSH
51480: LD_INT 113
51482: PUSH
51483: LD_INT 114
51485: PUSH
51486: LD_INT 116
51488: PUSH
51489: LD_INT 117
51491: PUSH
51492: LD_INT 118
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: ST_TO_ADDR
51518: GO 52525
51520: LD_INT 15
51522: DOUBLE
51523: EQUAL
51524: IFTRUE 51528
51526: GO 51752
51528: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51529: LD_ADDR_VAR 0 2
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 3
51542: PUSH
51543: LD_INT 4
51545: PUSH
51546: LD_INT 5
51548: PUSH
51549: LD_INT 6
51551: PUSH
51552: LD_INT 7
51554: PUSH
51555: LD_INT 8
51557: PUSH
51558: LD_INT 9
51560: PUSH
51561: LD_INT 10
51563: PUSH
51564: LD_INT 11
51566: PUSH
51567: LD_INT 12
51569: PUSH
51570: LD_INT 13
51572: PUSH
51573: LD_INT 14
51575: PUSH
51576: LD_INT 15
51578: PUSH
51579: LD_INT 16
51581: PUSH
51582: LD_INT 17
51584: PUSH
51585: LD_INT 18
51587: PUSH
51588: LD_INT 19
51590: PUSH
51591: LD_INT 20
51593: PUSH
51594: LD_INT 21
51596: PUSH
51597: LD_INT 22
51599: PUSH
51600: LD_INT 23
51602: PUSH
51603: LD_INT 24
51605: PUSH
51606: LD_INT 25
51608: PUSH
51609: LD_INT 26
51611: PUSH
51612: LD_INT 27
51614: PUSH
51615: LD_INT 28
51617: PUSH
51618: LD_INT 29
51620: PUSH
51621: LD_INT 30
51623: PUSH
51624: LD_INT 31
51626: PUSH
51627: LD_INT 32
51629: PUSH
51630: LD_INT 33
51632: PUSH
51633: LD_INT 34
51635: PUSH
51636: LD_INT 36
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 101
51678: PUSH
51679: LD_INT 102
51681: PUSH
51682: LD_INT 103
51684: PUSH
51685: LD_INT 104
51687: PUSH
51688: LD_INT 105
51690: PUSH
51691: LD_INT 106
51693: PUSH
51694: LD_INT 107
51696: PUSH
51697: LD_INT 108
51699: PUSH
51700: LD_INT 109
51702: PUSH
51703: LD_INT 110
51705: PUSH
51706: LD_INT 111
51708: PUSH
51709: LD_INT 112
51711: PUSH
51712: LD_INT 113
51714: PUSH
51715: LD_INT 114
51717: PUSH
51718: LD_INT 116
51720: PUSH
51721: LD_INT 117
51723: PUSH
51724: LD_INT 118
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: ST_TO_ADDR
51750: GO 52525
51752: LD_INT 16
51754: DOUBLE
51755: EQUAL
51756: IFTRUE 51760
51758: GO 51896
51760: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51761: LD_ADDR_VAR 0 2
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 4
51771: PUSH
51772: LD_INT 5
51774: PUSH
51775: LD_INT 7
51777: PUSH
51778: LD_INT 11
51780: PUSH
51781: LD_INT 12
51783: PUSH
51784: LD_INT 15
51786: PUSH
51787: LD_INT 16
51789: PUSH
51790: LD_INT 20
51792: PUSH
51793: LD_INT 21
51795: PUSH
51796: LD_INT 22
51798: PUSH
51799: LD_INT 23
51801: PUSH
51802: LD_INT 25
51804: PUSH
51805: LD_INT 26
51807: PUSH
51808: LD_INT 30
51810: PUSH
51811: LD_INT 31
51813: PUSH
51814: LD_INT 32
51816: PUSH
51817: LD_INT 33
51819: PUSH
51820: LD_INT 34
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 101
51846: PUSH
51847: LD_INT 102
51849: PUSH
51850: LD_INT 103
51852: PUSH
51853: LD_INT 106
51855: PUSH
51856: LD_INT 108
51858: PUSH
51859: LD_INT 112
51861: PUSH
51862: LD_INT 113
51864: PUSH
51865: LD_INT 114
51867: PUSH
51868: LD_INT 116
51870: PUSH
51871: LD_INT 117
51873: PUSH
51874: LD_INT 118
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: ST_TO_ADDR
51894: GO 52525
51896: LD_INT 17
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51904
51902: GO 52128
51904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51905: LD_ADDR_VAR 0 2
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: LD_INT 5
51924: PUSH
51925: LD_INT 6
51927: PUSH
51928: LD_INT 7
51930: PUSH
51931: LD_INT 8
51933: PUSH
51934: LD_INT 9
51936: PUSH
51937: LD_INT 10
51939: PUSH
51940: LD_INT 11
51942: PUSH
51943: LD_INT 12
51945: PUSH
51946: LD_INT 13
51948: PUSH
51949: LD_INT 14
51951: PUSH
51952: LD_INT 15
51954: PUSH
51955: LD_INT 16
51957: PUSH
51958: LD_INT 17
51960: PUSH
51961: LD_INT 18
51963: PUSH
51964: LD_INT 19
51966: PUSH
51967: LD_INT 20
51969: PUSH
51970: LD_INT 21
51972: PUSH
51973: LD_INT 22
51975: PUSH
51976: LD_INT 23
51978: PUSH
51979: LD_INT 24
51981: PUSH
51982: LD_INT 25
51984: PUSH
51985: LD_INT 26
51987: PUSH
51988: LD_INT 27
51990: PUSH
51991: LD_INT 28
51993: PUSH
51994: LD_INT 29
51996: PUSH
51997: LD_INT 30
51999: PUSH
52000: LD_INT 31
52002: PUSH
52003: LD_INT 32
52005: PUSH
52006: LD_INT 33
52008: PUSH
52009: LD_INT 34
52011: PUSH
52012: LD_INT 36
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 101
52054: PUSH
52055: LD_INT 102
52057: PUSH
52058: LD_INT 103
52060: PUSH
52061: LD_INT 104
52063: PUSH
52064: LD_INT 105
52066: PUSH
52067: LD_INT 106
52069: PUSH
52070: LD_INT 107
52072: PUSH
52073: LD_INT 108
52075: PUSH
52076: LD_INT 109
52078: PUSH
52079: LD_INT 110
52081: PUSH
52082: LD_INT 111
52084: PUSH
52085: LD_INT 112
52087: PUSH
52088: LD_INT 113
52090: PUSH
52091: LD_INT 114
52093: PUSH
52094: LD_INT 116
52096: PUSH
52097: LD_INT 117
52099: PUSH
52100: LD_INT 118
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: ST_TO_ADDR
52126: GO 52525
52128: LD_INT 18
52130: DOUBLE
52131: EQUAL
52132: IFTRUE 52136
52134: GO 52284
52136: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52137: LD_ADDR_VAR 0 2
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 4
52147: PUSH
52148: LD_INT 5
52150: PUSH
52151: LD_INT 7
52153: PUSH
52154: LD_INT 11
52156: PUSH
52157: LD_INT 12
52159: PUSH
52160: LD_INT 15
52162: PUSH
52163: LD_INT 16
52165: PUSH
52166: LD_INT 20
52168: PUSH
52169: LD_INT 21
52171: PUSH
52172: LD_INT 22
52174: PUSH
52175: LD_INT 23
52177: PUSH
52178: LD_INT 25
52180: PUSH
52181: LD_INT 26
52183: PUSH
52184: LD_INT 30
52186: PUSH
52187: LD_INT 31
52189: PUSH
52190: LD_INT 32
52192: PUSH
52193: LD_INT 33
52195: PUSH
52196: LD_INT 34
52198: PUSH
52199: LD_INT 35
52201: PUSH
52202: LD_INT 36
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 101
52230: PUSH
52231: LD_INT 102
52233: PUSH
52234: LD_INT 103
52236: PUSH
52237: LD_INT 106
52239: PUSH
52240: LD_INT 108
52242: PUSH
52243: LD_INT 112
52245: PUSH
52246: LD_INT 113
52248: PUSH
52249: LD_INT 114
52251: PUSH
52252: LD_INT 115
52254: PUSH
52255: LD_INT 116
52257: PUSH
52258: LD_INT 117
52260: PUSH
52261: LD_INT 118
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: ST_TO_ADDR
52282: GO 52525
52284: LD_INT 19
52286: DOUBLE
52287: EQUAL
52288: IFTRUE 52292
52290: GO 52524
52292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52293: LD_ADDR_VAR 0 2
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: LD_INT 4
52309: PUSH
52310: LD_INT 5
52312: PUSH
52313: LD_INT 6
52315: PUSH
52316: LD_INT 7
52318: PUSH
52319: LD_INT 8
52321: PUSH
52322: LD_INT 9
52324: PUSH
52325: LD_INT 10
52327: PUSH
52328: LD_INT 11
52330: PUSH
52331: LD_INT 12
52333: PUSH
52334: LD_INT 13
52336: PUSH
52337: LD_INT 14
52339: PUSH
52340: LD_INT 15
52342: PUSH
52343: LD_INT 16
52345: PUSH
52346: LD_INT 17
52348: PUSH
52349: LD_INT 18
52351: PUSH
52352: LD_INT 19
52354: PUSH
52355: LD_INT 20
52357: PUSH
52358: LD_INT 21
52360: PUSH
52361: LD_INT 22
52363: PUSH
52364: LD_INT 23
52366: PUSH
52367: LD_INT 24
52369: PUSH
52370: LD_INT 25
52372: PUSH
52373: LD_INT 26
52375: PUSH
52376: LD_INT 27
52378: PUSH
52379: LD_INT 28
52381: PUSH
52382: LD_INT 29
52384: PUSH
52385: LD_INT 30
52387: PUSH
52388: LD_INT 31
52390: PUSH
52391: LD_INT 32
52393: PUSH
52394: LD_INT 33
52396: PUSH
52397: LD_INT 34
52399: PUSH
52400: LD_INT 35
52402: PUSH
52403: LD_INT 36
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 101
52446: PUSH
52447: LD_INT 102
52449: PUSH
52450: LD_INT 103
52452: PUSH
52453: LD_INT 104
52455: PUSH
52456: LD_INT 105
52458: PUSH
52459: LD_INT 106
52461: PUSH
52462: LD_INT 107
52464: PUSH
52465: LD_INT 108
52467: PUSH
52468: LD_INT 109
52470: PUSH
52471: LD_INT 110
52473: PUSH
52474: LD_INT 111
52476: PUSH
52477: LD_INT 112
52479: PUSH
52480: LD_INT 113
52482: PUSH
52483: LD_INT 114
52485: PUSH
52486: LD_INT 115
52488: PUSH
52489: LD_INT 116
52491: PUSH
52492: LD_INT 117
52494: PUSH
52495: LD_INT 118
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: ST_TO_ADDR
52522: GO 52525
52524: POP
// end else
52525: GO 52756
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52527: LD_ADDR_VAR 0 2
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: LD_INT 4
52543: PUSH
52544: LD_INT 5
52546: PUSH
52547: LD_INT 6
52549: PUSH
52550: LD_INT 7
52552: PUSH
52553: LD_INT 8
52555: PUSH
52556: LD_INT 9
52558: PUSH
52559: LD_INT 10
52561: PUSH
52562: LD_INT 11
52564: PUSH
52565: LD_INT 12
52567: PUSH
52568: LD_INT 13
52570: PUSH
52571: LD_INT 14
52573: PUSH
52574: LD_INT 15
52576: PUSH
52577: LD_INT 16
52579: PUSH
52580: LD_INT 17
52582: PUSH
52583: LD_INT 18
52585: PUSH
52586: LD_INT 19
52588: PUSH
52589: LD_INT 20
52591: PUSH
52592: LD_INT 21
52594: PUSH
52595: LD_INT 22
52597: PUSH
52598: LD_INT 23
52600: PUSH
52601: LD_INT 24
52603: PUSH
52604: LD_INT 25
52606: PUSH
52607: LD_INT 26
52609: PUSH
52610: LD_INT 27
52612: PUSH
52613: LD_INT 28
52615: PUSH
52616: LD_INT 29
52618: PUSH
52619: LD_INT 30
52621: PUSH
52622: LD_INT 31
52624: PUSH
52625: LD_INT 32
52627: PUSH
52628: LD_INT 33
52630: PUSH
52631: LD_INT 34
52633: PUSH
52634: LD_INT 35
52636: PUSH
52637: LD_INT 36
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 101
52680: PUSH
52681: LD_INT 102
52683: PUSH
52684: LD_INT 103
52686: PUSH
52687: LD_INT 104
52689: PUSH
52690: LD_INT 105
52692: PUSH
52693: LD_INT 106
52695: PUSH
52696: LD_INT 107
52698: PUSH
52699: LD_INT 108
52701: PUSH
52702: LD_INT 109
52704: PUSH
52705: LD_INT 110
52707: PUSH
52708: LD_INT 111
52710: PUSH
52711: LD_INT 112
52713: PUSH
52714: LD_INT 113
52716: PUSH
52717: LD_INT 114
52719: PUSH
52720: LD_INT 115
52722: PUSH
52723: LD_INT 116
52725: PUSH
52726: LD_INT 117
52728: PUSH
52729: LD_INT 118
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// if result then
52756: LD_VAR 0 2
52760: IFFALSE 53546
// begin normal :=  ;
52762: LD_ADDR_VAR 0 5
52766: PUSH
52767: LD_STRING 
52769: ST_TO_ADDR
// hardcore :=  ;
52770: LD_ADDR_VAR 0 6
52774: PUSH
52775: LD_STRING 
52777: ST_TO_ADDR
// active :=  ;
52778: LD_ADDR_VAR 0 7
52782: PUSH
52783: LD_STRING 
52785: ST_TO_ADDR
// for i = 1 to normalCounter do
52786: LD_ADDR_VAR 0 8
52790: PUSH
52791: DOUBLE
52792: LD_INT 1
52794: DEC
52795: ST_TO_ADDR
52796: LD_EXP 16
52800: PUSH
52801: FOR_TO
52802: IFFALSE 52903
// begin tmp := 0 ;
52804: LD_ADDR_VAR 0 3
52808: PUSH
52809: LD_STRING 0
52811: ST_TO_ADDR
// if result [ 1 ] then
52812: LD_VAR 0 2
52816: PUSH
52817: LD_INT 1
52819: ARRAY
52820: IFFALSE 52885
// if result [ 1 ] [ 1 ] = i then
52822: LD_VAR 0 2
52826: PUSH
52827: LD_INT 1
52829: ARRAY
52830: PUSH
52831: LD_INT 1
52833: ARRAY
52834: PUSH
52835: LD_VAR 0 8
52839: EQUAL
52840: IFFALSE 52885
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52842: LD_ADDR_VAR 0 2
52846: PUSH
52847: LD_VAR 0 2
52851: PPUSH
52852: LD_INT 1
52854: PPUSH
52855: LD_VAR 0 2
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PPUSH
52864: LD_INT 1
52866: PPUSH
52867: CALL_OW 3
52871: PPUSH
52872: CALL_OW 1
52876: ST_TO_ADDR
// tmp := 1 ;
52877: LD_ADDR_VAR 0 3
52881: PUSH
52882: LD_STRING 1
52884: ST_TO_ADDR
// end ; normal := normal & tmp ;
52885: LD_ADDR_VAR 0 5
52889: PUSH
52890: LD_VAR 0 5
52894: PUSH
52895: LD_VAR 0 3
52899: STR
52900: ST_TO_ADDR
// end ;
52901: GO 52801
52903: POP
52904: POP
// for i = 1 to hardcoreCounter do
52905: LD_ADDR_VAR 0 8
52909: PUSH
52910: DOUBLE
52911: LD_INT 1
52913: DEC
52914: ST_TO_ADDR
52915: LD_EXP 17
52919: PUSH
52920: FOR_TO
52921: IFFALSE 53026
// begin tmp := 0 ;
52923: LD_ADDR_VAR 0 3
52927: PUSH
52928: LD_STRING 0
52930: ST_TO_ADDR
// if result [ 2 ] then
52931: LD_VAR 0 2
52935: PUSH
52936: LD_INT 2
52938: ARRAY
52939: IFFALSE 53008
// if result [ 2 ] [ 1 ] = 100 + i then
52941: LD_VAR 0 2
52945: PUSH
52946: LD_INT 2
52948: ARRAY
52949: PUSH
52950: LD_INT 1
52952: ARRAY
52953: PUSH
52954: LD_INT 100
52956: PUSH
52957: LD_VAR 0 8
52961: PLUS
52962: EQUAL
52963: IFFALSE 53008
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52965: LD_ADDR_VAR 0 2
52969: PUSH
52970: LD_VAR 0 2
52974: PPUSH
52975: LD_INT 2
52977: PPUSH
52978: LD_VAR 0 2
52982: PUSH
52983: LD_INT 2
52985: ARRAY
52986: PPUSH
52987: LD_INT 1
52989: PPUSH
52990: CALL_OW 3
52994: PPUSH
52995: CALL_OW 1
52999: ST_TO_ADDR
// tmp := 1 ;
53000: LD_ADDR_VAR 0 3
53004: PUSH
53005: LD_STRING 1
53007: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53008: LD_ADDR_VAR 0 6
53012: PUSH
53013: LD_VAR 0 6
53017: PUSH
53018: LD_VAR 0 3
53022: STR
53023: ST_TO_ADDR
// end ;
53024: GO 52920
53026: POP
53027: POP
// if isGameLoad then
53028: LD_VAR 0 1
53032: IFFALSE 53507
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53034: LD_ADDR_VAR 0 4
53038: PUSH
53039: LD_EXP 20
53043: PUSH
53044: LD_EXP 19
53048: PUSH
53049: LD_EXP 21
53053: PUSH
53054: LD_EXP 18
53058: PUSH
53059: LD_EXP 22
53063: PUSH
53064: LD_EXP 23
53068: PUSH
53069: LD_EXP 24
53073: PUSH
53074: LD_EXP 25
53078: PUSH
53079: LD_EXP 26
53083: PUSH
53084: LD_EXP 27
53088: PUSH
53089: LD_EXP 28
53093: PUSH
53094: LD_EXP 29
53098: PUSH
53099: LD_EXP 30
53103: PUSH
53104: LD_EXP 31
53108: PUSH
53109: LD_EXP 39
53113: PUSH
53114: LD_EXP 40
53118: PUSH
53119: LD_EXP 41
53123: PUSH
53124: LD_EXP 42
53128: PUSH
53129: LD_EXP 44
53133: PUSH
53134: LD_EXP 45
53138: PUSH
53139: LD_EXP 46
53143: PUSH
53144: LD_EXP 49
53148: PUSH
53149: LD_EXP 51
53153: PUSH
53154: LD_EXP 52
53158: PUSH
53159: LD_EXP 53
53163: PUSH
53164: LD_EXP 55
53168: PUSH
53169: LD_EXP 56
53173: PUSH
53174: LD_EXP 59
53178: PUSH
53179: LD_EXP 60
53183: PUSH
53184: LD_EXP 61
53188: PUSH
53189: LD_EXP 62
53193: PUSH
53194: LD_EXP 63
53198: PUSH
53199: LD_EXP 64
53203: PUSH
53204: LD_EXP 65
53208: PUSH
53209: LD_EXP 66
53213: PUSH
53214: LD_EXP 67
53218: PUSH
53219: LD_EXP 32
53223: PUSH
53224: LD_EXP 33
53228: PUSH
53229: LD_EXP 36
53233: PUSH
53234: LD_EXP 37
53238: PUSH
53239: LD_EXP 38
53243: PUSH
53244: LD_EXP 34
53248: PUSH
53249: LD_EXP 35
53253: PUSH
53254: LD_EXP 43
53258: PUSH
53259: LD_EXP 47
53263: PUSH
53264: LD_EXP 48
53268: PUSH
53269: LD_EXP 50
53273: PUSH
53274: LD_EXP 54
53278: PUSH
53279: LD_EXP 57
53283: PUSH
53284: LD_EXP 58
53288: PUSH
53289: LD_EXP 68
53293: PUSH
53294: LD_EXP 69
53298: PUSH
53299: LD_EXP 70
53303: PUSH
53304: LD_EXP 71
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: ST_TO_ADDR
// tmp :=  ;
53365: LD_ADDR_VAR 0 3
53369: PUSH
53370: LD_STRING 
53372: ST_TO_ADDR
// for i = 1 to normalCounter do
53373: LD_ADDR_VAR 0 8
53377: PUSH
53378: DOUBLE
53379: LD_INT 1
53381: DEC
53382: ST_TO_ADDR
53383: LD_EXP 16
53387: PUSH
53388: FOR_TO
53389: IFFALSE 53425
// begin if flags [ i ] then
53391: LD_VAR 0 4
53395: PUSH
53396: LD_VAR 0 8
53400: ARRAY
53401: IFFALSE 53423
// tmp := tmp & i & ; ;
53403: LD_ADDR_VAR 0 3
53407: PUSH
53408: LD_VAR 0 3
53412: PUSH
53413: LD_VAR 0 8
53417: STR
53418: PUSH
53419: LD_STRING ;
53421: STR
53422: ST_TO_ADDR
// end ;
53423: GO 53388
53425: POP
53426: POP
// for i = 1 to hardcoreCounter do
53427: LD_ADDR_VAR 0 8
53431: PUSH
53432: DOUBLE
53433: LD_INT 1
53435: DEC
53436: ST_TO_ADDR
53437: LD_EXP 17
53441: PUSH
53442: FOR_TO
53443: IFFALSE 53489
// begin if flags [ normalCounter + i ] then
53445: LD_VAR 0 4
53449: PUSH
53450: LD_EXP 16
53454: PUSH
53455: LD_VAR 0 8
53459: PLUS
53460: ARRAY
53461: IFFALSE 53487
// tmp := tmp & ( 100 + i ) & ; ;
53463: LD_ADDR_VAR 0 3
53467: PUSH
53468: LD_VAR 0 3
53472: PUSH
53473: LD_INT 100
53475: PUSH
53476: LD_VAR 0 8
53480: PLUS
53481: STR
53482: PUSH
53483: LD_STRING ;
53485: STR
53486: ST_TO_ADDR
// end ;
53487: GO 53442
53489: POP
53490: POP
// if tmp then
53491: LD_VAR 0 3
53495: IFFALSE 53507
// active := tmp ;
53497: LD_ADDR_VAR 0 7
53501: PUSH
53502: LD_VAR 0 3
53506: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53507: LD_STRING getStreamItemsFromMission("
53509: PUSH
53510: LD_VAR 0 5
53514: STR
53515: PUSH
53516: LD_STRING ","
53518: STR
53519: PUSH
53520: LD_VAR 0 6
53524: STR
53525: PUSH
53526: LD_STRING ","
53528: STR
53529: PUSH
53530: LD_VAR 0 7
53534: STR
53535: PUSH
53536: LD_STRING ")
53538: STR
53539: PPUSH
53540: CALL_OW 559
// end else
53544: GO 53553
// ToLua ( getStreamItemsFromMission("","","") ) ;
53546: LD_STRING getStreamItemsFromMission("","","")
53548: PPUSH
53549: CALL_OW 559
// end ;
53553: LD_VAR 0 2
53557: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53558: LD_EXP 15
53562: IFFALSE 53570
53564: PUSH
53565: LD_EXP 20
53569: AND
53570: IFFALSE 53694
53572: GO 53574
53574: DISABLE
53575: LD_INT 0
53577: PPUSH
53578: PPUSH
// begin enable ;
53579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53580: LD_ADDR_VAR 0 2
53584: PUSH
53585: LD_INT 22
53587: PUSH
53588: LD_OWVAR 2
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 34
53602: PUSH
53603: LD_INT 7
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 34
53612: PUSH
53613: LD_INT 45
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 34
53622: PUSH
53623: LD_INT 28
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 34
53632: PUSH
53633: LD_INT 47
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PPUSH
53651: CALL_OW 69
53655: ST_TO_ADDR
// if not tmp then
53656: LD_VAR 0 2
53660: NOT
53661: IFFALSE 53665
// exit ;
53663: GO 53694
// for i in tmp do
53665: LD_ADDR_VAR 0 1
53669: PUSH
53670: LD_VAR 0 2
53674: PUSH
53675: FOR_IN
53676: IFFALSE 53692
// begin SetLives ( i , 0 ) ;
53678: LD_VAR 0 1
53682: PPUSH
53683: LD_INT 0
53685: PPUSH
53686: CALL_OW 234
// end ;
53690: GO 53675
53692: POP
53693: POP
// end ;
53694: PPOPN 2
53696: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53697: LD_EXP 15
53701: IFFALSE 53709
53703: PUSH
53704: LD_EXP 21
53708: AND
53709: IFFALSE 53793
53711: GO 53713
53713: DISABLE
53714: LD_INT 0
53716: PPUSH
53717: PPUSH
// begin enable ;
53718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53719: LD_ADDR_VAR 0 2
53723: PUSH
53724: LD_INT 22
53726: PUSH
53727: LD_OWVAR 2
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 32
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PPUSH
53750: CALL_OW 69
53754: ST_TO_ADDR
// if not tmp then
53755: LD_VAR 0 2
53759: NOT
53760: IFFALSE 53764
// exit ;
53762: GO 53793
// for i in tmp do
53764: LD_ADDR_VAR 0 1
53768: PUSH
53769: LD_VAR 0 2
53773: PUSH
53774: FOR_IN
53775: IFFALSE 53791
// begin SetLives ( i , 0 ) ;
53777: LD_VAR 0 1
53781: PPUSH
53782: LD_INT 0
53784: PPUSH
53785: CALL_OW 234
// end ;
53789: GO 53774
53791: POP
53792: POP
// end ;
53793: PPOPN 2
53795: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53796: LD_EXP 15
53800: IFFALSE 53808
53802: PUSH
53803: LD_EXP 18
53807: AND
53808: IFFALSE 53901
53810: GO 53812
53812: DISABLE
53813: LD_INT 0
53815: PPUSH
// begin enable ;
53816: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53817: LD_ADDR_VAR 0 1
53821: PUSH
53822: LD_INT 22
53824: PUSH
53825: LD_OWVAR 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 25
53839: PUSH
53840: LD_INT 5
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 25
53849: PUSH
53850: LD_INT 9
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 25
53859: PUSH
53860: LD_INT 8
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PPUSH
53877: CALL_OW 69
53881: PUSH
53882: FOR_IN
53883: IFFALSE 53899
// begin SetClass ( i , 1 ) ;
53885: LD_VAR 0 1
53889: PPUSH
53890: LD_INT 1
53892: PPUSH
53893: CALL_OW 336
// end ;
53897: GO 53882
53899: POP
53900: POP
// end ;
53901: PPOPN 1
53903: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53904: LD_EXP 15
53908: IFFALSE 53916
53910: PUSH
53911: LD_EXP 19
53915: AND
53916: IFFALSE 53928
53918: PUSH
53919: LD_OWVAR 65
53923: PUSH
53924: LD_INT 7
53926: LESS
53927: AND
53928: IFFALSE 53942
53930: GO 53932
53932: DISABLE
// begin enable ;
53933: ENABLE
// game_speed := 7 ;
53934: LD_ADDR_OWVAR 65
53938: PUSH
53939: LD_INT 7
53941: ST_TO_ADDR
// end ;
53942: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53943: LD_EXP 15
53947: IFFALSE 53955
53949: PUSH
53950: LD_EXP 22
53954: AND
53955: IFFALSE 54157
53957: GO 53959
53959: DISABLE
53960: LD_INT 0
53962: PPUSH
53963: PPUSH
53964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53965: LD_ADDR_VAR 0 3
53969: PUSH
53970: LD_INT 81
53972: PUSH
53973: LD_OWVAR 2
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 21
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PPUSH
53996: CALL_OW 69
54000: ST_TO_ADDR
// if not tmp then
54001: LD_VAR 0 3
54005: NOT
54006: IFFALSE 54010
// exit ;
54008: GO 54157
// if tmp > 5 then
54010: LD_VAR 0 3
54014: PUSH
54015: LD_INT 5
54017: GREATER
54018: IFFALSE 54030
// k := 5 else
54020: LD_ADDR_VAR 0 2
54024: PUSH
54025: LD_INT 5
54027: ST_TO_ADDR
54028: GO 54040
// k := tmp ;
54030: LD_ADDR_VAR 0 2
54034: PUSH
54035: LD_VAR 0 3
54039: ST_TO_ADDR
// for i := 1 to k do
54040: LD_ADDR_VAR 0 1
54044: PUSH
54045: DOUBLE
54046: LD_INT 1
54048: DEC
54049: ST_TO_ADDR
54050: LD_VAR 0 2
54054: PUSH
54055: FOR_TO
54056: IFFALSE 54155
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54058: LD_VAR 0 3
54062: PUSH
54063: LD_VAR 0 1
54067: ARRAY
54068: PPUSH
54069: LD_VAR 0 1
54073: PUSH
54074: LD_INT 4
54076: MOD
54077: PUSH
54078: LD_INT 1
54080: PLUS
54081: PPUSH
54082: CALL_OW 259
54086: PUSH
54087: LD_INT 10
54089: LESS
54090: IFFALSE 54153
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54092: LD_VAR 0 3
54096: PUSH
54097: LD_VAR 0 1
54101: ARRAY
54102: PPUSH
54103: LD_VAR 0 1
54107: PUSH
54108: LD_INT 4
54110: MOD
54111: PUSH
54112: LD_INT 1
54114: PLUS
54115: PPUSH
54116: LD_VAR 0 3
54120: PUSH
54121: LD_VAR 0 1
54125: ARRAY
54126: PPUSH
54127: LD_VAR 0 1
54131: PUSH
54132: LD_INT 4
54134: MOD
54135: PUSH
54136: LD_INT 1
54138: PLUS
54139: PPUSH
54140: CALL_OW 259
54144: PUSH
54145: LD_INT 1
54147: PLUS
54148: PPUSH
54149: CALL_OW 237
54153: GO 54055
54155: POP
54156: POP
// end ;
54157: PPOPN 3
54159: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54160: LD_EXP 15
54164: IFFALSE 54172
54166: PUSH
54167: LD_EXP 23
54171: AND
54172: IFFALSE 54192
54174: GO 54176
54176: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54177: LD_INT 4
54179: PPUSH
54180: LD_OWVAR 2
54184: PPUSH
54185: LD_INT 0
54187: PPUSH
54188: CALL_OW 324
54192: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54193: LD_EXP 15
54197: IFFALSE 54205
54199: PUSH
54200: LD_EXP 52
54204: AND
54205: IFFALSE 54225
54207: GO 54209
54209: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54210: LD_INT 19
54212: PPUSH
54213: LD_OWVAR 2
54217: PPUSH
54218: LD_INT 0
54220: PPUSH
54221: CALL_OW 324
54225: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54226: LD_EXP 15
54230: IFFALSE 54238
54232: PUSH
54233: LD_EXP 24
54237: AND
54238: IFFALSE 54340
54240: GO 54242
54242: DISABLE
54243: LD_INT 0
54245: PPUSH
54246: PPUSH
// begin enable ;
54247: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54248: LD_ADDR_VAR 0 2
54252: PUSH
54253: LD_INT 22
54255: PUSH
54256: LD_OWVAR 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 34
54270: PUSH
54271: LD_INT 11
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 34
54280: PUSH
54281: LD_INT 30
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PPUSH
54297: CALL_OW 69
54301: ST_TO_ADDR
// if not tmp then
54302: LD_VAR 0 2
54306: NOT
54307: IFFALSE 54311
// exit ;
54309: GO 54340
// for i in tmp do
54311: LD_ADDR_VAR 0 1
54315: PUSH
54316: LD_VAR 0 2
54320: PUSH
54321: FOR_IN
54322: IFFALSE 54338
// begin SetLives ( i , 0 ) ;
54324: LD_VAR 0 1
54328: PPUSH
54329: LD_INT 0
54331: PPUSH
54332: CALL_OW 234
// end ;
54336: GO 54321
54338: POP
54339: POP
// end ;
54340: PPOPN 2
54342: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54343: LD_EXP 15
54347: IFFALSE 54355
54349: PUSH
54350: LD_EXP 25
54354: AND
54355: IFFALSE 54375
54357: GO 54359
54359: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54360: LD_INT 32
54362: PPUSH
54363: LD_OWVAR 2
54367: PPUSH
54368: LD_INT 0
54370: PPUSH
54371: CALL_OW 324
54375: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54376: LD_EXP 15
54380: IFFALSE 54388
54382: PUSH
54383: LD_EXP 26
54387: AND
54388: IFFALSE 54571
54390: GO 54392
54392: DISABLE
54393: LD_INT 0
54395: PPUSH
54396: PPUSH
54397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54398: LD_ADDR_VAR 0 2
54402: PUSH
54403: LD_INT 22
54405: PUSH
54406: LD_OWVAR 2
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 33
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PPUSH
54429: CALL_OW 69
54433: ST_TO_ADDR
// if not tmp then
54434: LD_VAR 0 2
54438: NOT
54439: IFFALSE 54443
// exit ;
54441: GO 54571
// side := 0 ;
54443: LD_ADDR_VAR 0 3
54447: PUSH
54448: LD_INT 0
54450: ST_TO_ADDR
// for i := 1 to 8 do
54451: LD_ADDR_VAR 0 1
54455: PUSH
54456: DOUBLE
54457: LD_INT 1
54459: DEC
54460: ST_TO_ADDR
54461: LD_INT 8
54463: PUSH
54464: FOR_TO
54465: IFFALSE 54515
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54467: LD_OWVAR 2
54471: PUSH
54472: LD_VAR 0 1
54476: NONEQUAL
54477: IFFALSE 54499
54479: PUSH
54480: LD_OWVAR 2
54484: PPUSH
54485: LD_VAR 0 1
54489: PPUSH
54490: CALL_OW 81
54494: PUSH
54495: LD_INT 2
54497: EQUAL
54498: AND
54499: IFFALSE 54513
// begin side := i ;
54501: LD_ADDR_VAR 0 3
54505: PUSH
54506: LD_VAR 0 1
54510: ST_TO_ADDR
// break ;
54511: GO 54515
// end ;
54513: GO 54464
54515: POP
54516: POP
// if not side then
54517: LD_VAR 0 3
54521: NOT
54522: IFFALSE 54526
// exit ;
54524: GO 54571
// for i := 1 to tmp do
54526: LD_ADDR_VAR 0 1
54530: PUSH
54531: DOUBLE
54532: LD_INT 1
54534: DEC
54535: ST_TO_ADDR
54536: LD_VAR 0 2
54540: PUSH
54541: FOR_TO
54542: IFFALSE 54569
// if Prob ( 60 ) then
54544: LD_INT 60
54546: PPUSH
54547: CALL_OW 13
54551: IFFALSE 54567
// SetSide ( i , side ) ;
54553: LD_VAR 0 1
54557: PPUSH
54558: LD_VAR 0 3
54562: PPUSH
54563: CALL_OW 235
54567: GO 54541
54569: POP
54570: POP
// end ;
54571: PPOPN 3
54573: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54574: LD_EXP 15
54578: IFFALSE 54586
54580: PUSH
54581: LD_EXP 28
54585: AND
54586: IFFALSE 54705
54588: GO 54590
54590: DISABLE
54591: LD_INT 0
54593: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54594: LD_ADDR_VAR 0 1
54598: PUSH
54599: LD_INT 22
54601: PUSH
54602: LD_OWVAR 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 21
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: LD_INT 23
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: LIST
54642: PPUSH
54643: CALL_OW 69
54647: PUSH
54648: FOR_IN
54649: IFFALSE 54703
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54651: LD_VAR 0 1
54655: PPUSH
54656: CALL_OW 257
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: LD_INT 4
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: IN
54679: IFFALSE 54701
// SetClass ( un , rand ( 1 , 4 ) ) ;
54681: LD_VAR 0 1
54685: PPUSH
54686: LD_INT 1
54688: PPUSH
54689: LD_INT 4
54691: PPUSH
54692: CALL_OW 12
54696: PPUSH
54697: CALL_OW 336
54701: GO 54648
54703: POP
54704: POP
// end ;
54705: PPOPN 1
54707: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54708: LD_EXP 15
54712: IFFALSE 54720
54714: PUSH
54715: LD_EXP 27
54719: AND
54720: IFFALSE 54799
54722: GO 54724
54724: DISABLE
54725: LD_INT 0
54727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54728: LD_ADDR_VAR 0 1
54732: PUSH
54733: LD_INT 22
54735: PUSH
54736: LD_OWVAR 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 21
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PPUSH
54759: CALL_OW 69
54763: ST_TO_ADDR
// if not tmp then
54764: LD_VAR 0 1
54768: NOT
54769: IFFALSE 54773
// exit ;
54771: GO 54799
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54773: LD_VAR 0 1
54777: PUSH
54778: LD_INT 1
54780: PPUSH
54781: LD_VAR 0 1
54785: PPUSH
54786: CALL_OW 12
54790: ARRAY
54791: PPUSH
54792: LD_INT 100
54794: PPUSH
54795: CALL_OW 234
// end ;
54799: PPOPN 1
54801: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54802: LD_EXP 15
54806: IFFALSE 54814
54808: PUSH
54809: LD_EXP 29
54813: AND
54814: IFFALSE 54912
54816: GO 54818
54818: DISABLE
54819: LD_INT 0
54821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54822: LD_ADDR_VAR 0 1
54826: PUSH
54827: LD_INT 22
54829: PUSH
54830: LD_OWVAR 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 21
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PPUSH
54853: CALL_OW 69
54857: ST_TO_ADDR
// if not tmp then
54858: LD_VAR 0 1
54862: NOT
54863: IFFALSE 54867
// exit ;
54865: GO 54912
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54867: LD_VAR 0 1
54871: PUSH
54872: LD_INT 1
54874: PPUSH
54875: LD_VAR 0 1
54879: PPUSH
54880: CALL_OW 12
54884: ARRAY
54885: PPUSH
54886: LD_INT 1
54888: PPUSH
54889: LD_INT 4
54891: PPUSH
54892: CALL_OW 12
54896: PPUSH
54897: LD_INT 3000
54899: PPUSH
54900: LD_INT 9000
54902: PPUSH
54903: CALL_OW 12
54907: PPUSH
54908: CALL_OW 492
// end ;
54912: PPOPN 1
54914: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54915: LD_EXP 15
54919: IFFALSE 54927
54921: PUSH
54922: LD_EXP 30
54926: AND
54927: IFFALSE 54947
54929: GO 54931
54931: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54932: LD_INT 1
54934: PPUSH
54935: LD_OWVAR 2
54939: PPUSH
54940: LD_INT 0
54942: PPUSH
54943: CALL_OW 324
54947: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54948: LD_EXP 15
54952: IFFALSE 54960
54954: PUSH
54955: LD_EXP 31
54959: AND
54960: IFFALSE 55043
54962: GO 54964
54964: DISABLE
54965: LD_INT 0
54967: PPUSH
54968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54969: LD_ADDR_VAR 0 2
54973: PUSH
54974: LD_INT 22
54976: PUSH
54977: LD_OWVAR 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 21
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PPUSH
55000: CALL_OW 69
55004: ST_TO_ADDR
// if not tmp then
55005: LD_VAR 0 2
55009: NOT
55010: IFFALSE 55014
// exit ;
55012: GO 55043
// for i in tmp do
55014: LD_ADDR_VAR 0 1
55018: PUSH
55019: LD_VAR 0 2
55023: PUSH
55024: FOR_IN
55025: IFFALSE 55041
// SetBLevel ( i , 10 ) ;
55027: LD_VAR 0 1
55031: PPUSH
55032: LD_INT 10
55034: PPUSH
55035: CALL_OW 241
55039: GO 55024
55041: POP
55042: POP
// end ;
55043: PPOPN 2
55045: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55046: LD_EXP 15
55050: IFFALSE 55058
55052: PUSH
55053: LD_EXP 32
55057: AND
55058: IFFALSE 55169
55060: GO 55062
55062: DISABLE
55063: LD_INT 0
55065: PPUSH
55066: PPUSH
55067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55068: LD_ADDR_VAR 0 3
55072: PUSH
55073: LD_INT 22
55075: PUSH
55076: LD_OWVAR 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 25
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PPUSH
55099: CALL_OW 69
55103: ST_TO_ADDR
// if not tmp then
55104: LD_VAR 0 3
55108: NOT
55109: IFFALSE 55113
// exit ;
55111: GO 55169
// un := tmp [ rand ( 1 , tmp ) ] ;
55113: LD_ADDR_VAR 0 2
55117: PUSH
55118: LD_VAR 0 3
55122: PUSH
55123: LD_INT 1
55125: PPUSH
55126: LD_VAR 0 3
55130: PPUSH
55131: CALL_OW 12
55135: ARRAY
55136: ST_TO_ADDR
// if Crawls ( un ) then
55137: LD_VAR 0 2
55141: PPUSH
55142: CALL_OW 318
55146: IFFALSE 55157
// ComWalk ( un ) ;
55148: LD_VAR 0 2
55152: PPUSH
55153: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55157: LD_VAR 0 2
55161: PPUSH
55162: LD_INT 5
55164: PPUSH
55165: CALL_OW 336
// end ;
55169: PPOPN 3
55171: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55172: LD_EXP 15
55176: IFFALSE 55184
55178: PUSH
55179: LD_EXP 33
55183: AND
55184: IFFALSE 55196
55186: PUSH
55187: LD_OWVAR 67
55191: PUSH
55192: LD_INT 4
55194: LESS
55195: AND
55196: IFFALSE 55215
55198: GO 55200
55200: DISABLE
// begin Difficulty := Difficulty + 1 ;
55201: LD_ADDR_OWVAR 67
55205: PUSH
55206: LD_OWVAR 67
55210: PUSH
55211: LD_INT 1
55213: PLUS
55214: ST_TO_ADDR
// end ;
55215: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55216: LD_EXP 15
55220: IFFALSE 55228
55222: PUSH
55223: LD_EXP 34
55227: AND
55228: IFFALSE 55331
55230: GO 55232
55232: DISABLE
55233: LD_INT 0
55235: PPUSH
// begin for i := 1 to 5 do
55236: LD_ADDR_VAR 0 1
55240: PUSH
55241: DOUBLE
55242: LD_INT 1
55244: DEC
55245: ST_TO_ADDR
55246: LD_INT 5
55248: PUSH
55249: FOR_TO
55250: IFFALSE 55329
// begin uc_nation := nation_nature ;
55252: LD_ADDR_OWVAR 21
55256: PUSH
55257: LD_INT 0
55259: ST_TO_ADDR
// uc_side := 0 ;
55260: LD_ADDR_OWVAR 20
55264: PUSH
55265: LD_INT 0
55267: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55268: LD_ADDR_OWVAR 29
55272: PUSH
55273: LD_INT 12
55275: PUSH
55276: LD_INT 12
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// hc_agressivity := 20 ;
55283: LD_ADDR_OWVAR 35
55287: PUSH
55288: LD_INT 20
55290: ST_TO_ADDR
// hc_class := class_tiger ;
55291: LD_ADDR_OWVAR 28
55295: PUSH
55296: LD_INT 14
55298: ST_TO_ADDR
// hc_gallery :=  ;
55299: LD_ADDR_OWVAR 33
55303: PUSH
55304: LD_STRING 
55306: ST_TO_ADDR
// hc_name :=  ;
55307: LD_ADDR_OWVAR 26
55311: PUSH
55312: LD_STRING 
55314: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55315: CALL_OW 44
55319: PPUSH
55320: LD_INT 0
55322: PPUSH
55323: CALL_OW 51
// end ;
55327: GO 55249
55329: POP
55330: POP
// end ;
55331: PPOPN 1
55333: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55334: LD_EXP 15
55338: IFFALSE 55346
55340: PUSH
55341: LD_EXP 35
55345: AND
55346: IFFALSE 55355
55348: GO 55350
55350: DISABLE
// StreamSibBomb ;
55351: CALL 55356 0 0
55355: END
// export function StreamSibBomb ; var i , x , y ; begin
55356: LD_INT 0
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
// result := false ;
55362: LD_ADDR_VAR 0 1
55366: PUSH
55367: LD_INT 0
55369: ST_TO_ADDR
// for i := 1 to 16 do
55370: LD_ADDR_VAR 0 2
55374: PUSH
55375: DOUBLE
55376: LD_INT 1
55378: DEC
55379: ST_TO_ADDR
55380: LD_INT 16
55382: PUSH
55383: FOR_TO
55384: IFFALSE 55583
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55386: LD_ADDR_VAR 0 3
55390: PUSH
55391: LD_INT 10
55393: PUSH
55394: LD_INT 20
55396: PUSH
55397: LD_INT 30
55399: PUSH
55400: LD_INT 40
55402: PUSH
55403: LD_INT 50
55405: PUSH
55406: LD_INT 60
55408: PUSH
55409: LD_INT 70
55411: PUSH
55412: LD_INT 80
55414: PUSH
55415: LD_INT 90
55417: PUSH
55418: LD_INT 100
55420: PUSH
55421: LD_INT 110
55423: PUSH
55424: LD_INT 120
55426: PUSH
55427: LD_INT 130
55429: PUSH
55430: LD_INT 140
55432: PUSH
55433: LD_INT 150
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PPUSH
55456: LD_INT 15
55458: PPUSH
55459: CALL_OW 12
55463: ARRAY
55464: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55465: LD_ADDR_VAR 0 4
55469: PUSH
55470: LD_INT 10
55472: PUSH
55473: LD_INT 20
55475: PUSH
55476: LD_INT 30
55478: PUSH
55479: LD_INT 40
55481: PUSH
55482: LD_INT 50
55484: PUSH
55485: LD_INT 60
55487: PUSH
55488: LD_INT 70
55490: PUSH
55491: LD_INT 80
55493: PUSH
55494: LD_INT 90
55496: PUSH
55497: LD_INT 100
55499: PUSH
55500: LD_INT 110
55502: PUSH
55503: LD_INT 120
55505: PUSH
55506: LD_INT 130
55508: PUSH
55509: LD_INT 140
55511: PUSH
55512: LD_INT 150
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PPUSH
55535: LD_INT 15
55537: PPUSH
55538: CALL_OW 12
55542: ARRAY
55543: ST_TO_ADDR
// if ValidHex ( x , y ) then
55544: LD_VAR 0 3
55548: PPUSH
55549: LD_VAR 0 4
55553: PPUSH
55554: CALL_OW 488
55558: IFFALSE 55581
// begin result := [ x , y ] ;
55560: LD_ADDR_VAR 0 1
55564: PUSH
55565: LD_VAR 0 3
55569: PUSH
55570: LD_VAR 0 4
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// break ;
55579: GO 55583
// end ; end ;
55581: GO 55383
55583: POP
55584: POP
// if result then
55585: LD_VAR 0 1
55589: IFFALSE 55649
// begin ToLua ( playSibBomb() ) ;
55591: LD_STRING playSibBomb()
55593: PPUSH
55594: CALL_OW 559
// wait ( 0 0$14 ) ;
55598: LD_INT 490
55600: PPUSH
55601: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55605: LD_VAR 0 1
55609: PUSH
55610: LD_INT 1
55612: ARRAY
55613: PPUSH
55614: LD_VAR 0 1
55618: PUSH
55619: LD_INT 2
55621: ARRAY
55622: PPUSH
55623: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55627: LD_VAR 0 1
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PPUSH
55636: LD_VAR 0 1
55640: PUSH
55641: LD_INT 2
55643: ARRAY
55644: PPUSH
55645: CALL_OW 429
// end ; end ;
55649: LD_VAR 0 1
55653: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55654: LD_EXP 15
55658: IFFALSE 55666
55660: PUSH
55661: LD_EXP 37
55665: AND
55666: IFFALSE 55678
55668: GO 55670
55670: DISABLE
// YouLost (  ) ;
55671: LD_STRING 
55673: PPUSH
55674: CALL_OW 104
55678: END
// every 0 0$1 trigger StreamModeActive and sFog do
55679: LD_EXP 15
55683: IFFALSE 55691
55685: PUSH
55686: LD_EXP 36
55690: AND
55691: IFFALSE 55705
55693: GO 55695
55695: DISABLE
// FogOff ( your_side ) ;
55696: LD_OWVAR 2
55700: PPUSH
55701: CALL_OW 344
55705: END
// every 0 0$1 trigger StreamModeActive and sSun do
55706: LD_EXP 15
55710: IFFALSE 55718
55712: PUSH
55713: LD_EXP 38
55717: AND
55718: IFFALSE 55746
55720: GO 55722
55722: DISABLE
// begin solar_recharge_percent := 0 ;
55723: LD_ADDR_OWVAR 79
55727: PUSH
55728: LD_INT 0
55730: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55731: LD_INT 10500
55733: PPUSH
55734: CALL_OW 67
// solar_recharge_percent := 100 ;
55738: LD_ADDR_OWVAR 79
55742: PUSH
55743: LD_INT 100
55745: ST_TO_ADDR
// end ;
55746: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55747: LD_EXP 15
55751: IFFALSE 55759
55753: PUSH
55754: LD_EXP 39
55758: AND
55759: IFFALSE 55998
55761: GO 55763
55763: DISABLE
55764: LD_INT 0
55766: PPUSH
55767: PPUSH
55768: PPUSH
// begin tmp := [ ] ;
55769: LD_ADDR_VAR 0 3
55773: PUSH
55774: EMPTY
55775: ST_TO_ADDR
// for i := 1 to 6 do
55776: LD_ADDR_VAR 0 1
55780: PUSH
55781: DOUBLE
55782: LD_INT 1
55784: DEC
55785: ST_TO_ADDR
55786: LD_INT 6
55788: PUSH
55789: FOR_TO
55790: IFFALSE 55895
// begin uc_nation := nation_nature ;
55792: LD_ADDR_OWVAR 21
55796: PUSH
55797: LD_INT 0
55799: ST_TO_ADDR
// uc_side := 0 ;
55800: LD_ADDR_OWVAR 20
55804: PUSH
55805: LD_INT 0
55807: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55808: LD_ADDR_OWVAR 29
55812: PUSH
55813: LD_INT 12
55815: PUSH
55816: LD_INT 12
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: ST_TO_ADDR
// hc_agressivity := 20 ;
55823: LD_ADDR_OWVAR 35
55827: PUSH
55828: LD_INT 20
55830: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55831: LD_ADDR_OWVAR 28
55835: PUSH
55836: LD_INT 17
55838: ST_TO_ADDR
// hc_gallery :=  ;
55839: LD_ADDR_OWVAR 33
55843: PUSH
55844: LD_STRING 
55846: ST_TO_ADDR
// hc_name :=  ;
55847: LD_ADDR_OWVAR 26
55851: PUSH
55852: LD_STRING 
55854: ST_TO_ADDR
// un := CreateHuman ;
55855: LD_ADDR_VAR 0 2
55859: PUSH
55860: CALL_OW 44
55864: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55865: LD_VAR 0 2
55869: PPUSH
55870: LD_INT 1
55872: PPUSH
55873: CALL_OW 51
// tmp := tmp ^ un ;
55877: LD_ADDR_VAR 0 3
55881: PUSH
55882: LD_VAR 0 3
55886: PUSH
55887: LD_VAR 0 2
55891: ADD
55892: ST_TO_ADDR
// end ;
55893: GO 55789
55895: POP
55896: POP
// repeat wait ( 0 0$1 ) ;
55897: LD_INT 35
55899: PPUSH
55900: CALL_OW 67
// for un in tmp do
55904: LD_ADDR_VAR 0 2
55908: PUSH
55909: LD_VAR 0 3
55913: PUSH
55914: FOR_IN
55915: IFFALSE 55989
// begin if IsDead ( un ) then
55917: LD_VAR 0 2
55921: PPUSH
55922: CALL_OW 301
55926: IFFALSE 55946
// begin tmp := tmp diff un ;
55928: LD_ADDR_VAR 0 3
55932: PUSH
55933: LD_VAR 0 3
55937: PUSH
55938: LD_VAR 0 2
55942: DIFF
55943: ST_TO_ADDR
// continue ;
55944: GO 55914
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55946: LD_VAR 0 2
55950: PPUSH
55951: LD_INT 3
55953: PUSH
55954: LD_INT 22
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PPUSH
55968: CALL_OW 69
55972: PPUSH
55973: LD_VAR 0 2
55977: PPUSH
55978: CALL_OW 74
55982: PPUSH
55983: CALL_OW 115
// end ;
55987: GO 55914
55989: POP
55990: POP
// until not tmp ;
55991: LD_VAR 0 3
55995: NOT
55996: IFFALSE 55897
// end ;
55998: PPOPN 3
56000: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56001: LD_EXP 15
56005: IFFALSE 56013
56007: PUSH
56008: LD_EXP 40
56012: AND
56013: IFFALSE 56067
56015: GO 56017
56017: DISABLE
// begin ToLua ( displayTroll(); ) ;
56018: LD_STRING displayTroll();
56020: PPUSH
56021: CALL_OW 559
// wait ( 3 3$00 ) ;
56025: LD_INT 6300
56027: PPUSH
56028: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56032: LD_STRING hideTroll();
56034: PPUSH
56035: CALL_OW 559
// wait ( 1 1$00 ) ;
56039: LD_INT 2100
56041: PPUSH
56042: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56046: LD_STRING displayTroll();
56048: PPUSH
56049: CALL_OW 559
// wait ( 1 1$00 ) ;
56053: LD_INT 2100
56055: PPUSH
56056: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56060: LD_STRING hideTroll();
56062: PPUSH
56063: CALL_OW 559
// end ;
56067: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56068: LD_EXP 15
56072: IFFALSE 56080
56074: PUSH
56075: LD_EXP 41
56079: AND
56080: IFFALSE 56143
56082: GO 56084
56084: DISABLE
56085: LD_INT 0
56087: PPUSH
// begin p := 0 ;
56088: LD_ADDR_VAR 0 1
56092: PUSH
56093: LD_INT 0
56095: ST_TO_ADDR
// repeat game_speed := 1 ;
56096: LD_ADDR_OWVAR 65
56100: PUSH
56101: LD_INT 1
56103: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56104: LD_INT 35
56106: PPUSH
56107: CALL_OW 67
// p := p + 1 ;
56111: LD_ADDR_VAR 0 1
56115: PUSH
56116: LD_VAR 0 1
56120: PUSH
56121: LD_INT 1
56123: PLUS
56124: ST_TO_ADDR
// until p >= 60 ;
56125: LD_VAR 0 1
56129: PUSH
56130: LD_INT 60
56132: GREATEREQUAL
56133: IFFALSE 56096
// game_speed := 4 ;
56135: LD_ADDR_OWVAR 65
56139: PUSH
56140: LD_INT 4
56142: ST_TO_ADDR
// end ;
56143: PPOPN 1
56145: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56146: LD_EXP 15
56150: IFFALSE 56158
56152: PUSH
56153: LD_EXP 42
56157: AND
56158: IFFALSE 56304
56160: GO 56162
56162: DISABLE
56163: LD_INT 0
56165: PPUSH
56166: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56167: LD_ADDR_VAR 0 1
56171: PUSH
56172: LD_INT 22
56174: PUSH
56175: LD_OWVAR 2
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 30
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 30
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PPUSH
56216: CALL_OW 69
56220: ST_TO_ADDR
// if not depot then
56221: LD_VAR 0 1
56225: NOT
56226: IFFALSE 56230
// exit ;
56228: GO 56304
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56230: LD_ADDR_VAR 0 2
56234: PUSH
56235: LD_VAR 0 1
56239: PUSH
56240: LD_INT 1
56242: PPUSH
56243: LD_VAR 0 1
56247: PPUSH
56248: CALL_OW 12
56252: ARRAY
56253: PPUSH
56254: CALL_OW 274
56258: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56259: LD_VAR 0 2
56263: PPUSH
56264: LD_INT 1
56266: PPUSH
56267: LD_INT 0
56269: PPUSH
56270: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56274: LD_VAR 0 2
56278: PPUSH
56279: LD_INT 2
56281: PPUSH
56282: LD_INT 0
56284: PPUSH
56285: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56289: LD_VAR 0 2
56293: PPUSH
56294: LD_INT 3
56296: PPUSH
56297: LD_INT 0
56299: PPUSH
56300: CALL_OW 277
// end ;
56304: PPOPN 2
56306: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56307: LD_EXP 15
56311: IFFALSE 56319
56313: PUSH
56314: LD_EXP 43
56318: AND
56319: IFFALSE 56416
56321: GO 56323
56323: DISABLE
56324: LD_INT 0
56326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56327: LD_ADDR_VAR 0 1
56331: PUSH
56332: LD_INT 22
56334: PUSH
56335: LD_OWVAR 2
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 21
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 23
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: PPUSH
56376: CALL_OW 69
56380: ST_TO_ADDR
// if not tmp then
56381: LD_VAR 0 1
56385: NOT
56386: IFFALSE 56390
// exit ;
56388: GO 56416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56390: LD_VAR 0 1
56394: PUSH
56395: LD_INT 1
56397: PPUSH
56398: LD_VAR 0 1
56402: PPUSH
56403: CALL_OW 12
56407: ARRAY
56408: PPUSH
56409: LD_INT 200
56411: PPUSH
56412: CALL_OW 234
// end ;
56416: PPOPN 1
56418: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56419: LD_EXP 15
56423: IFFALSE 56431
56425: PUSH
56426: LD_EXP 44
56430: AND
56431: IFFALSE 56510
56433: GO 56435
56435: DISABLE
56436: LD_INT 0
56438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56439: LD_ADDR_VAR 0 1
56443: PUSH
56444: LD_INT 22
56446: PUSH
56447: LD_OWVAR 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 21
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PPUSH
56470: CALL_OW 69
56474: ST_TO_ADDR
// if not tmp then
56475: LD_VAR 0 1
56479: NOT
56480: IFFALSE 56484
// exit ;
56482: GO 56510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56484: LD_VAR 0 1
56488: PUSH
56489: LD_INT 1
56491: PPUSH
56492: LD_VAR 0 1
56496: PPUSH
56497: CALL_OW 12
56501: ARRAY
56502: PPUSH
56503: LD_INT 60
56505: PPUSH
56506: CALL_OW 234
// end ;
56510: PPOPN 1
56512: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56513: LD_EXP 15
56517: IFFALSE 56525
56519: PUSH
56520: LD_EXP 45
56524: AND
56525: IFFALSE 56624
56527: GO 56529
56529: DISABLE
56530: LD_INT 0
56532: PPUSH
56533: PPUSH
// begin enable ;
56534: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56535: LD_ADDR_VAR 0 1
56539: PUSH
56540: LD_INT 22
56542: PUSH
56543: LD_OWVAR 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 61
56554: PUSH
56555: EMPTY
56556: LIST
56557: PUSH
56558: LD_INT 33
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: LIST
56572: PPUSH
56573: CALL_OW 69
56577: ST_TO_ADDR
// if not tmp then
56578: LD_VAR 0 1
56582: NOT
56583: IFFALSE 56587
// exit ;
56585: GO 56624
// for i in tmp do
56587: LD_ADDR_VAR 0 2
56591: PUSH
56592: LD_VAR 0 1
56596: PUSH
56597: FOR_IN
56598: IFFALSE 56622
// if IsControledBy ( i ) then
56600: LD_VAR 0 2
56604: PPUSH
56605: CALL_OW 312
56609: IFFALSE 56620
// ComUnlink ( i ) ;
56611: LD_VAR 0 2
56615: PPUSH
56616: CALL_OW 136
56620: GO 56597
56622: POP
56623: POP
// end ;
56624: PPOPN 2
56626: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56627: LD_EXP 15
56631: IFFALSE 56639
56633: PUSH
56634: LD_EXP 46
56638: AND
56639: IFFALSE 56779
56641: GO 56643
56643: DISABLE
56644: LD_INT 0
56646: PPUSH
56647: PPUSH
// begin ToLua ( displayPowell(); ) ;
56648: LD_STRING displayPowell();
56650: PPUSH
56651: CALL_OW 559
// uc_side := 0 ;
56655: LD_ADDR_OWVAR 20
56659: PUSH
56660: LD_INT 0
56662: ST_TO_ADDR
// uc_nation := 2 ;
56663: LD_ADDR_OWVAR 21
56667: PUSH
56668: LD_INT 2
56670: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56671: LD_ADDR_OWVAR 37
56675: PUSH
56676: LD_INT 14
56678: ST_TO_ADDR
// vc_engine := engine_siberite ;
56679: LD_ADDR_OWVAR 39
56683: PUSH
56684: LD_INT 3
56686: ST_TO_ADDR
// vc_control := control_apeman ;
56687: LD_ADDR_OWVAR 38
56691: PUSH
56692: LD_INT 5
56694: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56695: LD_ADDR_OWVAR 40
56699: PUSH
56700: LD_INT 29
56702: ST_TO_ADDR
// un := CreateVehicle ;
56703: LD_ADDR_VAR 0 2
56707: PUSH
56708: CALL_OW 45
56712: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56713: LD_VAR 0 2
56717: PPUSH
56718: LD_INT 1
56720: PPUSH
56721: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56725: LD_INT 35
56727: PPUSH
56728: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56732: LD_VAR 0 2
56736: PPUSH
56737: LD_INT 22
56739: PUSH
56740: LD_OWVAR 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PPUSH
56749: CALL_OW 69
56753: PPUSH
56754: LD_VAR 0 2
56758: PPUSH
56759: CALL_OW 74
56763: PPUSH
56764: CALL_OW 115
// until IsDead ( un ) ;
56768: LD_VAR 0 2
56772: PPUSH
56773: CALL_OW 301
56777: IFFALSE 56725
// end ;
56779: PPOPN 2
56781: END
// every 0 0$1 trigger StreamModeActive and sStu do
56782: LD_EXP 15
56786: IFFALSE 56794
56788: PUSH
56789: LD_EXP 54
56793: AND
56794: IFFALSE 56810
56796: GO 56798
56798: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56799: LD_STRING displayStucuk();
56801: PPUSH
56802: CALL_OW 559
// ResetFog ;
56806: CALL_OW 335
// end ;
56810: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56811: LD_EXP 15
56815: IFFALSE 56823
56817: PUSH
56818: LD_EXP 47
56822: AND
56823: IFFALSE 56964
56825: GO 56827
56827: DISABLE
56828: LD_INT 0
56830: PPUSH
56831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56832: LD_ADDR_VAR 0 2
56836: PUSH
56837: LD_INT 22
56839: PUSH
56840: LD_OWVAR 2
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 21
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PPUSH
56863: CALL_OW 69
56867: ST_TO_ADDR
// if not tmp then
56868: LD_VAR 0 2
56872: NOT
56873: IFFALSE 56877
// exit ;
56875: GO 56964
// un := tmp [ rand ( 1 , tmp ) ] ;
56877: LD_ADDR_VAR 0 1
56881: PUSH
56882: LD_VAR 0 2
56886: PUSH
56887: LD_INT 1
56889: PPUSH
56890: LD_VAR 0 2
56894: PPUSH
56895: CALL_OW 12
56899: ARRAY
56900: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56901: LD_VAR 0 1
56905: PPUSH
56906: LD_INT 0
56908: PPUSH
56909: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56913: LD_VAR 0 1
56917: PPUSH
56918: LD_OWVAR 3
56922: PUSH
56923: LD_VAR 0 1
56927: DIFF
56928: PPUSH
56929: LD_VAR 0 1
56933: PPUSH
56934: CALL_OW 74
56938: PPUSH
56939: CALL_OW 115
// wait ( 0 0$20 ) ;
56943: LD_INT 700
56945: PPUSH
56946: CALL_OW 67
// SetSide ( un , your_side ) ;
56950: LD_VAR 0 1
56954: PPUSH
56955: LD_OWVAR 2
56959: PPUSH
56960: CALL_OW 235
// end ;
56964: PPOPN 2
56966: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56967: LD_EXP 15
56971: IFFALSE 56979
56973: PUSH
56974: LD_EXP 48
56978: AND
56979: IFFALSE 57085
56981: GO 56983
56983: DISABLE
56984: LD_INT 0
56986: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56987: LD_ADDR_VAR 0 1
56991: PUSH
56992: LD_INT 22
56994: PUSH
56995: LD_OWVAR 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 30
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 30
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PPUSH
57036: CALL_OW 69
57040: ST_TO_ADDR
// if not depot then
57041: LD_VAR 0 1
57045: NOT
57046: IFFALSE 57050
// exit ;
57048: GO 57085
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57050: LD_VAR 0 1
57054: PUSH
57055: LD_INT 1
57057: ARRAY
57058: PPUSH
57059: CALL_OW 250
57063: PPUSH
57064: LD_VAR 0 1
57068: PUSH
57069: LD_INT 1
57071: ARRAY
57072: PPUSH
57073: CALL_OW 251
57077: PPUSH
57078: LD_INT 70
57080: PPUSH
57081: CALL_OW 495
// end ;
57085: PPOPN 1
57087: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57088: LD_EXP 15
57092: IFFALSE 57100
57094: PUSH
57095: LD_EXP 49
57099: AND
57100: IFFALSE 57311
57102: GO 57104
57104: DISABLE
57105: LD_INT 0
57107: PPUSH
57108: PPUSH
57109: PPUSH
57110: PPUSH
57111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57112: LD_ADDR_VAR 0 5
57116: PUSH
57117: LD_INT 22
57119: PUSH
57120: LD_OWVAR 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 21
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PPUSH
57143: CALL_OW 69
57147: ST_TO_ADDR
// if not tmp then
57148: LD_VAR 0 5
57152: NOT
57153: IFFALSE 57157
// exit ;
57155: GO 57311
// for i in tmp do
57157: LD_ADDR_VAR 0 1
57161: PUSH
57162: LD_VAR 0 5
57166: PUSH
57167: FOR_IN
57168: IFFALSE 57309
// begin d := rand ( 0 , 5 ) ;
57170: LD_ADDR_VAR 0 4
57174: PUSH
57175: LD_INT 0
57177: PPUSH
57178: LD_INT 5
57180: PPUSH
57181: CALL_OW 12
57185: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57186: LD_ADDR_VAR 0 2
57190: PUSH
57191: LD_VAR 0 1
57195: PPUSH
57196: CALL_OW 250
57200: PPUSH
57201: LD_VAR 0 4
57205: PPUSH
57206: LD_INT 3
57208: PPUSH
57209: LD_INT 12
57211: PPUSH
57212: CALL_OW 12
57216: PPUSH
57217: CALL_OW 272
57221: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57222: LD_ADDR_VAR 0 3
57226: PUSH
57227: LD_VAR 0 1
57231: PPUSH
57232: CALL_OW 251
57236: PPUSH
57237: LD_VAR 0 4
57241: PPUSH
57242: LD_INT 3
57244: PPUSH
57245: LD_INT 12
57247: PPUSH
57248: CALL_OW 12
57252: PPUSH
57253: CALL_OW 273
57257: ST_TO_ADDR
// if ValidHex ( x , y ) then
57258: LD_VAR 0 2
57262: PPUSH
57263: LD_VAR 0 3
57267: PPUSH
57268: CALL_OW 488
57272: IFFALSE 57307
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57274: LD_VAR 0 1
57278: PPUSH
57279: LD_VAR 0 2
57283: PPUSH
57284: LD_VAR 0 3
57288: PPUSH
57289: LD_INT 3
57291: PPUSH
57292: LD_INT 6
57294: PPUSH
57295: CALL_OW 12
57299: PPUSH
57300: LD_INT 1
57302: PPUSH
57303: CALL_OW 483
// end ;
57307: GO 57167
57309: POP
57310: POP
// end ;
57311: PPOPN 5
57313: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57314: LD_EXP 15
57318: IFFALSE 57326
57320: PUSH
57321: LD_EXP 50
57325: AND
57326: IFFALSE 57420
57328: GO 57330
57330: DISABLE
57331: LD_INT 0
57333: PPUSH
57334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57335: LD_ADDR_VAR 0 2
57339: PUSH
57340: LD_INT 22
57342: PUSH
57343: LD_OWVAR 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 32
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 21
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: LIST
57376: PPUSH
57377: CALL_OW 69
57381: ST_TO_ADDR
// if not tmp then
57382: LD_VAR 0 2
57386: NOT
57387: IFFALSE 57391
// exit ;
57389: GO 57420
// for i in tmp do
57391: LD_ADDR_VAR 0 1
57395: PUSH
57396: LD_VAR 0 2
57400: PUSH
57401: FOR_IN
57402: IFFALSE 57418
// SetFuel ( i , 0 ) ;
57404: LD_VAR 0 1
57408: PPUSH
57409: LD_INT 0
57411: PPUSH
57412: CALL_OW 240
57416: GO 57401
57418: POP
57419: POP
// end ;
57420: PPOPN 2
57422: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57423: LD_EXP 15
57427: IFFALSE 57435
57429: PUSH
57430: LD_EXP 51
57434: AND
57435: IFFALSE 57501
57437: GO 57439
57439: DISABLE
57440: LD_INT 0
57442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57443: LD_ADDR_VAR 0 1
57447: PUSH
57448: LD_INT 22
57450: PUSH
57451: LD_OWVAR 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 30
57462: PUSH
57463: LD_INT 29
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PPUSH
57474: CALL_OW 69
57478: ST_TO_ADDR
// if not tmp then
57479: LD_VAR 0 1
57483: NOT
57484: IFFALSE 57488
// exit ;
57486: GO 57501
// DestroyUnit ( tmp [ 1 ] ) ;
57488: LD_VAR 0 1
57492: PUSH
57493: LD_INT 1
57495: ARRAY
57496: PPUSH
57497: CALL_OW 65
// end ;
57501: PPOPN 1
57503: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57504: LD_EXP 15
57508: IFFALSE 57516
57510: PUSH
57511: LD_EXP 53
57515: AND
57516: IFFALSE 57645
57518: GO 57520
57520: DISABLE
57521: LD_INT 0
57523: PPUSH
// begin uc_side := 0 ;
57524: LD_ADDR_OWVAR 20
57528: PUSH
57529: LD_INT 0
57531: ST_TO_ADDR
// uc_nation := nation_arabian ;
57532: LD_ADDR_OWVAR 21
57536: PUSH
57537: LD_INT 2
57539: ST_TO_ADDR
// hc_gallery :=  ;
57540: LD_ADDR_OWVAR 33
57544: PUSH
57545: LD_STRING 
57547: ST_TO_ADDR
// hc_name :=  ;
57548: LD_ADDR_OWVAR 26
57552: PUSH
57553: LD_STRING 
57555: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57556: LD_INT 1
57558: PPUSH
57559: LD_INT 11
57561: PPUSH
57562: LD_INT 10
57564: PPUSH
57565: CALL_OW 380
// un := CreateHuman ;
57569: LD_ADDR_VAR 0 1
57573: PUSH
57574: CALL_OW 44
57578: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57579: LD_VAR 0 1
57583: PPUSH
57584: LD_INT 1
57586: PPUSH
57587: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57591: LD_INT 35
57593: PPUSH
57594: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57598: LD_VAR 0 1
57602: PPUSH
57603: LD_INT 22
57605: PUSH
57606: LD_OWVAR 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PPUSH
57615: CALL_OW 69
57619: PPUSH
57620: LD_VAR 0 1
57624: PPUSH
57625: CALL_OW 74
57629: PPUSH
57630: CALL_OW 115
// until IsDead ( un ) ;
57634: LD_VAR 0 1
57638: PPUSH
57639: CALL_OW 301
57643: IFFALSE 57591
// end ;
57645: PPOPN 1
57647: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57648: LD_EXP 15
57652: IFFALSE 57660
57654: PUSH
57655: LD_EXP 55
57659: AND
57660: IFFALSE 57672
57662: GO 57664
57664: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57665: LD_STRING earthquake(getX(game), 0, 32)
57667: PPUSH
57668: CALL_OW 559
57672: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57673: LD_EXP 15
57677: IFFALSE 57685
57679: PUSH
57680: LD_EXP 56
57684: AND
57685: IFFALSE 57776
57687: GO 57689
57689: DISABLE
57690: LD_INT 0
57692: PPUSH
// begin enable ;
57693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57694: LD_ADDR_VAR 0 1
57698: PUSH
57699: LD_INT 22
57701: PUSH
57702: LD_OWVAR 2
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 21
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 33
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: PPUSH
57736: CALL_OW 69
57740: ST_TO_ADDR
// if not tmp then
57741: LD_VAR 0 1
57745: NOT
57746: IFFALSE 57750
// exit ;
57748: GO 57776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57750: LD_VAR 0 1
57754: PUSH
57755: LD_INT 1
57757: PPUSH
57758: LD_VAR 0 1
57762: PPUSH
57763: CALL_OW 12
57767: ARRAY
57768: PPUSH
57769: LD_INT 1
57771: PPUSH
57772: CALL_OW 234
// end ;
57776: PPOPN 1
57778: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57779: LD_EXP 15
57783: IFFALSE 57791
57785: PUSH
57786: LD_EXP 57
57790: AND
57791: IFFALSE 57932
57793: GO 57795
57795: DISABLE
57796: LD_INT 0
57798: PPUSH
57799: PPUSH
57800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57801: LD_ADDR_VAR 0 3
57805: PUSH
57806: LD_INT 22
57808: PUSH
57809: LD_OWVAR 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 25
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PPUSH
57832: CALL_OW 69
57836: ST_TO_ADDR
// if not tmp then
57837: LD_VAR 0 3
57841: NOT
57842: IFFALSE 57846
// exit ;
57844: GO 57932
// un := tmp [ rand ( 1 , tmp ) ] ;
57846: LD_ADDR_VAR 0 2
57850: PUSH
57851: LD_VAR 0 3
57855: PUSH
57856: LD_INT 1
57858: PPUSH
57859: LD_VAR 0 3
57863: PPUSH
57864: CALL_OW 12
57868: ARRAY
57869: ST_TO_ADDR
// if Crawls ( un ) then
57870: LD_VAR 0 2
57874: PPUSH
57875: CALL_OW 318
57879: IFFALSE 57890
// ComWalk ( un ) ;
57881: LD_VAR 0 2
57885: PPUSH
57886: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57890: LD_VAR 0 2
57894: PPUSH
57895: LD_INT 9
57897: PPUSH
57898: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57902: LD_INT 28
57904: PPUSH
57905: LD_OWVAR 2
57909: PPUSH
57910: LD_INT 2
57912: PPUSH
57913: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57917: LD_INT 29
57919: PPUSH
57920: LD_OWVAR 2
57924: PPUSH
57925: LD_INT 2
57927: PPUSH
57928: CALL_OW 322
// end ;
57932: PPOPN 3
57934: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57935: LD_EXP 15
57939: IFFALSE 57947
57941: PUSH
57942: LD_EXP 58
57946: AND
57947: IFFALSE 58058
57949: GO 57951
57951: DISABLE
57952: LD_INT 0
57954: PPUSH
57955: PPUSH
57956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57957: LD_ADDR_VAR 0 3
57961: PUSH
57962: LD_INT 22
57964: PUSH
57965: LD_OWVAR 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 25
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PPUSH
57988: CALL_OW 69
57992: ST_TO_ADDR
// if not tmp then
57993: LD_VAR 0 3
57997: NOT
57998: IFFALSE 58002
// exit ;
58000: GO 58058
// un := tmp [ rand ( 1 , tmp ) ] ;
58002: LD_ADDR_VAR 0 2
58006: PUSH
58007: LD_VAR 0 3
58011: PUSH
58012: LD_INT 1
58014: PPUSH
58015: LD_VAR 0 3
58019: PPUSH
58020: CALL_OW 12
58024: ARRAY
58025: ST_TO_ADDR
// if Crawls ( un ) then
58026: LD_VAR 0 2
58030: PPUSH
58031: CALL_OW 318
58035: IFFALSE 58046
// ComWalk ( un ) ;
58037: LD_VAR 0 2
58041: PPUSH
58042: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58046: LD_VAR 0 2
58050: PPUSH
58051: LD_INT 8
58053: PPUSH
58054: CALL_OW 336
// end ;
58058: PPOPN 3
58060: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58061: LD_EXP 15
58065: IFFALSE 58073
58067: PUSH
58068: LD_EXP 59
58072: AND
58073: IFFALSE 58217
58075: GO 58077
58077: DISABLE
58078: LD_INT 0
58080: PPUSH
58081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58082: LD_ADDR_VAR 0 2
58086: PUSH
58087: LD_INT 22
58089: PUSH
58090: LD_OWVAR 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 21
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 34
58114: PUSH
58115: LD_INT 12
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 34
58124: PUSH
58125: LD_INT 51
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 34
58134: PUSH
58135: LD_INT 32
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: LIST
58152: PPUSH
58153: CALL_OW 69
58157: ST_TO_ADDR
// if not tmp then
58158: LD_VAR 0 2
58162: NOT
58163: IFFALSE 58167
// exit ;
58165: GO 58217
// for i in tmp do
58167: LD_ADDR_VAR 0 1
58171: PUSH
58172: LD_VAR 0 2
58176: PUSH
58177: FOR_IN
58178: IFFALSE 58215
// if GetCargo ( i , mat_artifact ) = 0 then
58180: LD_VAR 0 1
58184: PPUSH
58185: LD_INT 4
58187: PPUSH
58188: CALL_OW 289
58192: PUSH
58193: LD_INT 0
58195: EQUAL
58196: IFFALSE 58213
// SetCargo ( i , mat_siberit , 100 ) ;
58198: LD_VAR 0 1
58202: PPUSH
58203: LD_INT 3
58205: PPUSH
58206: LD_INT 100
58208: PPUSH
58209: CALL_OW 290
58213: GO 58177
58215: POP
58216: POP
// end ;
58217: PPOPN 2
58219: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58220: LD_EXP 15
58224: IFFALSE 58232
58226: PUSH
58227: LD_EXP 60
58231: AND
58232: IFFALSE 58415
58234: GO 58236
58236: DISABLE
58237: LD_INT 0
58239: PPUSH
58240: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58241: LD_ADDR_VAR 0 2
58245: PUSH
58246: LD_INT 22
58248: PUSH
58249: LD_OWVAR 2
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PPUSH
58258: CALL_OW 69
58262: ST_TO_ADDR
// if not tmp then
58263: LD_VAR 0 2
58267: NOT
58268: IFFALSE 58272
// exit ;
58270: GO 58415
// for i := 1 to 2 do
58272: LD_ADDR_VAR 0 1
58276: PUSH
58277: DOUBLE
58278: LD_INT 1
58280: DEC
58281: ST_TO_ADDR
58282: LD_INT 2
58284: PUSH
58285: FOR_TO
58286: IFFALSE 58413
// begin uc_side := your_side ;
58288: LD_ADDR_OWVAR 20
58292: PUSH
58293: LD_OWVAR 2
58297: ST_TO_ADDR
// uc_nation := nation_american ;
58298: LD_ADDR_OWVAR 21
58302: PUSH
58303: LD_INT 1
58305: ST_TO_ADDR
// vc_chassis := us_morphling ;
58306: LD_ADDR_OWVAR 37
58310: PUSH
58311: LD_INT 5
58313: ST_TO_ADDR
// vc_engine := engine_siberite ;
58314: LD_ADDR_OWVAR 39
58318: PUSH
58319: LD_INT 3
58321: ST_TO_ADDR
// vc_control := control_computer ;
58322: LD_ADDR_OWVAR 38
58326: PUSH
58327: LD_INT 3
58329: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58330: LD_ADDR_OWVAR 40
58334: PUSH
58335: LD_INT 10
58337: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58338: LD_VAR 0 2
58342: PUSH
58343: LD_INT 1
58345: ARRAY
58346: PPUSH
58347: CALL_OW 310
58351: NOT
58352: IFFALSE 58399
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58354: CALL_OW 45
58358: PPUSH
58359: LD_VAR 0 2
58363: PUSH
58364: LD_INT 1
58366: ARRAY
58367: PPUSH
58368: CALL_OW 250
58372: PPUSH
58373: LD_VAR 0 2
58377: PUSH
58378: LD_INT 1
58380: ARRAY
58381: PPUSH
58382: CALL_OW 251
58386: PPUSH
58387: LD_INT 12
58389: PPUSH
58390: LD_INT 1
58392: PPUSH
58393: CALL_OW 50
58397: GO 58411
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58399: CALL_OW 45
58403: PPUSH
58404: LD_INT 1
58406: PPUSH
58407: CALL_OW 51
// end ;
58411: GO 58285
58413: POP
58414: POP
// end ;
58415: PPOPN 2
58417: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58418: LD_EXP 15
58422: IFFALSE 58430
58424: PUSH
58425: LD_EXP 61
58429: AND
58430: IFFALSE 58652
58432: GO 58434
58434: DISABLE
58435: LD_INT 0
58437: PPUSH
58438: PPUSH
58439: PPUSH
58440: PPUSH
58441: PPUSH
58442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58443: LD_ADDR_VAR 0 6
58447: PUSH
58448: LD_INT 22
58450: PUSH
58451: LD_OWVAR 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 21
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: LD_INT 23
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: PPUSH
58492: CALL_OW 69
58496: ST_TO_ADDR
// if not tmp then
58497: LD_VAR 0 6
58501: NOT
58502: IFFALSE 58506
// exit ;
58504: GO 58652
// s1 := rand ( 1 , 4 ) ;
58506: LD_ADDR_VAR 0 2
58510: PUSH
58511: LD_INT 1
58513: PPUSH
58514: LD_INT 4
58516: PPUSH
58517: CALL_OW 12
58521: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58522: LD_ADDR_VAR 0 4
58526: PUSH
58527: LD_VAR 0 6
58531: PUSH
58532: LD_INT 1
58534: ARRAY
58535: PPUSH
58536: LD_VAR 0 2
58540: PPUSH
58541: CALL_OW 259
58545: ST_TO_ADDR
// if s1 = 1 then
58546: LD_VAR 0 2
58550: PUSH
58551: LD_INT 1
58553: EQUAL
58554: IFFALSE 58574
// s2 := rand ( 2 , 4 ) else
58556: LD_ADDR_VAR 0 3
58560: PUSH
58561: LD_INT 2
58563: PPUSH
58564: LD_INT 4
58566: PPUSH
58567: CALL_OW 12
58571: ST_TO_ADDR
58572: GO 58582
// s2 := 1 ;
58574: LD_ADDR_VAR 0 3
58578: PUSH
58579: LD_INT 1
58581: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58582: LD_ADDR_VAR 0 5
58586: PUSH
58587: LD_VAR 0 6
58591: PUSH
58592: LD_INT 1
58594: ARRAY
58595: PPUSH
58596: LD_VAR 0 3
58600: PPUSH
58601: CALL_OW 259
58605: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58606: LD_VAR 0 6
58610: PUSH
58611: LD_INT 1
58613: ARRAY
58614: PPUSH
58615: LD_VAR 0 2
58619: PPUSH
58620: LD_VAR 0 5
58624: PPUSH
58625: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58629: LD_VAR 0 6
58633: PUSH
58634: LD_INT 1
58636: ARRAY
58637: PPUSH
58638: LD_VAR 0 3
58642: PPUSH
58643: LD_VAR 0 4
58647: PPUSH
58648: CALL_OW 237
// end ;
58652: PPOPN 6
58654: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58655: LD_EXP 15
58659: IFFALSE 58667
58661: PUSH
58662: LD_EXP 62
58666: AND
58667: IFFALSE 58746
58669: GO 58671
58671: DISABLE
58672: LD_INT 0
58674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58675: LD_ADDR_VAR 0 1
58679: PUSH
58680: LD_INT 22
58682: PUSH
58683: LD_OWVAR 2
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 30
58694: PUSH
58695: LD_INT 3
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PPUSH
58706: CALL_OW 69
58710: ST_TO_ADDR
// if not tmp then
58711: LD_VAR 0 1
58715: NOT
58716: IFFALSE 58720
// exit ;
58718: GO 58746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58720: LD_VAR 0 1
58724: PUSH
58725: LD_INT 1
58727: PPUSH
58728: LD_VAR 0 1
58732: PPUSH
58733: CALL_OW 12
58737: ARRAY
58738: PPUSH
58739: LD_INT 1
58741: PPUSH
58742: CALL_OW 234
// end ;
58746: PPOPN 1
58748: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58749: LD_EXP 15
58753: IFFALSE 58761
58755: PUSH
58756: LD_EXP 63
58760: AND
58761: IFFALSE 58873
58763: GO 58765
58765: DISABLE
58766: LD_INT 0
58768: PPUSH
58769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58770: LD_ADDR_VAR 0 2
58774: PUSH
58775: LD_INT 22
58777: PUSH
58778: LD_OWVAR 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 30
58792: PUSH
58793: LD_INT 27
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 30
58802: PUSH
58803: LD_INT 26
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 30
58812: PUSH
58813: LD_INT 28
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PPUSH
58830: CALL_OW 69
58834: ST_TO_ADDR
// if not tmp then
58835: LD_VAR 0 2
58839: NOT
58840: IFFALSE 58844
// exit ;
58842: GO 58873
// for i in tmp do
58844: LD_ADDR_VAR 0 1
58848: PUSH
58849: LD_VAR 0 2
58853: PUSH
58854: FOR_IN
58855: IFFALSE 58871
// SetLives ( i , 1 ) ;
58857: LD_VAR 0 1
58861: PPUSH
58862: LD_INT 1
58864: PPUSH
58865: CALL_OW 234
58869: GO 58854
58871: POP
58872: POP
// end ;
58873: PPOPN 2
58875: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58876: LD_EXP 15
58880: IFFALSE 58888
58882: PUSH
58883: LD_EXP 64
58887: AND
58888: IFFALSE 59175
58890: GO 58892
58892: DISABLE
58893: LD_INT 0
58895: PPUSH
58896: PPUSH
58897: PPUSH
// begin i := rand ( 1 , 7 ) ;
58898: LD_ADDR_VAR 0 1
58902: PUSH
58903: LD_INT 1
58905: PPUSH
58906: LD_INT 7
58908: PPUSH
58909: CALL_OW 12
58913: ST_TO_ADDR
// case i of 1 :
58914: LD_VAR 0 1
58918: PUSH
58919: LD_INT 1
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58927
58925: GO 58937
58927: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58928: LD_STRING earthquake(getX(game), 0, 32)
58930: PPUSH
58931: CALL_OW 559
58935: GO 59175
58937: LD_INT 2
58939: DOUBLE
58940: EQUAL
58941: IFTRUE 58945
58943: GO 58959
58945: POP
// begin ToLua ( displayStucuk(); ) ;
58946: LD_STRING displayStucuk();
58948: PPUSH
58949: CALL_OW 559
// ResetFog ;
58953: CALL_OW 335
// end ; 3 :
58957: GO 59175
58959: LD_INT 3
58961: DOUBLE
58962: EQUAL
58963: IFTRUE 58967
58965: GO 59071
58967: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58968: LD_ADDR_VAR 0 2
58972: PUSH
58973: LD_INT 22
58975: PUSH
58976: LD_OWVAR 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 25
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PPUSH
58999: CALL_OW 69
59003: ST_TO_ADDR
// if not tmp then
59004: LD_VAR 0 2
59008: NOT
59009: IFFALSE 59013
// exit ;
59011: GO 59175
// un := tmp [ rand ( 1 , tmp ) ] ;
59013: LD_ADDR_VAR 0 3
59017: PUSH
59018: LD_VAR 0 2
59022: PUSH
59023: LD_INT 1
59025: PPUSH
59026: LD_VAR 0 2
59030: PPUSH
59031: CALL_OW 12
59035: ARRAY
59036: ST_TO_ADDR
// if Crawls ( un ) then
59037: LD_VAR 0 3
59041: PPUSH
59042: CALL_OW 318
59046: IFFALSE 59057
// ComWalk ( un ) ;
59048: LD_VAR 0 3
59052: PPUSH
59053: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59057: LD_VAR 0 3
59061: PPUSH
59062: LD_INT 8
59064: PPUSH
59065: CALL_OW 336
// end ; 4 :
59069: GO 59175
59071: LD_INT 4
59073: DOUBLE
59074: EQUAL
59075: IFTRUE 59079
59077: GO 59153
59079: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59080: LD_ADDR_VAR 0 2
59084: PUSH
59085: LD_INT 22
59087: PUSH
59088: LD_OWVAR 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 30
59099: PUSH
59100: LD_INT 29
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PPUSH
59111: CALL_OW 69
59115: ST_TO_ADDR
// if not tmp then
59116: LD_VAR 0 2
59120: NOT
59121: IFFALSE 59125
// exit ;
59123: GO 59175
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59125: LD_VAR 0 2
59129: PUSH
59130: LD_INT 1
59132: ARRAY
59133: PPUSH
59134: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59138: LD_VAR 0 2
59142: PUSH
59143: LD_INT 1
59145: ARRAY
59146: PPUSH
59147: CALL_OW 65
// end ; 5 .. 7 :
59151: GO 59175
59153: LD_INT 5
59155: DOUBLE
59156: GREATEREQUAL
59157: IFFALSE 59165
59159: LD_INT 7
59161: DOUBLE
59162: LESSEQUAL
59163: IFTRUE 59167
59165: GO 59174
59167: POP
// StreamSibBomb ; end ;
59168: CALL 55356 0 0
59172: GO 59175
59174: POP
// end ;
59175: PPOPN 3
59177: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59178: LD_EXP 15
59182: IFFALSE 59190
59184: PUSH
59185: LD_EXP 65
59189: AND
59190: IFFALSE 59346
59192: GO 59194
59194: DISABLE
59195: LD_INT 0
59197: PPUSH
59198: PPUSH
59199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59200: LD_ADDR_VAR 0 2
59204: PUSH
59205: LD_INT 81
59207: PUSH
59208: LD_OWVAR 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 21
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 21
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PPUSH
59249: CALL_OW 69
59253: ST_TO_ADDR
// if not tmp then
59254: LD_VAR 0 2
59258: NOT
59259: IFFALSE 59263
// exit ;
59261: GO 59346
// p := 0 ;
59263: LD_ADDR_VAR 0 3
59267: PUSH
59268: LD_INT 0
59270: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59271: LD_INT 35
59273: PPUSH
59274: CALL_OW 67
// p := p + 1 ;
59278: LD_ADDR_VAR 0 3
59282: PUSH
59283: LD_VAR 0 3
59287: PUSH
59288: LD_INT 1
59290: PLUS
59291: ST_TO_ADDR
// for i in tmp do
59292: LD_ADDR_VAR 0 1
59296: PUSH
59297: LD_VAR 0 2
59301: PUSH
59302: FOR_IN
59303: IFFALSE 59334
// if GetLives ( i ) < 1000 then
59305: LD_VAR 0 1
59309: PPUSH
59310: CALL_OW 256
59314: PUSH
59315: LD_INT 1000
59317: LESS
59318: IFFALSE 59332
// SetLives ( i , 1000 ) ;
59320: LD_VAR 0 1
59324: PPUSH
59325: LD_INT 1000
59327: PPUSH
59328: CALL_OW 234
59332: GO 59302
59334: POP
59335: POP
// until p > 20 ;
59336: LD_VAR 0 3
59340: PUSH
59341: LD_INT 20
59343: GREATER
59344: IFFALSE 59271
// end ;
59346: PPOPN 3
59348: END
// every 0 0$1 trigger StreamModeActive and sTime do
59349: LD_EXP 15
59353: IFFALSE 59361
59355: PUSH
59356: LD_EXP 66
59360: AND
59361: IFFALSE 59396
59363: GO 59365
59365: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59366: LD_INT 28
59368: PPUSH
59369: LD_OWVAR 2
59373: PPUSH
59374: LD_INT 2
59376: PPUSH
59377: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59381: LD_INT 30
59383: PPUSH
59384: LD_OWVAR 2
59388: PPUSH
59389: LD_INT 2
59391: PPUSH
59392: CALL_OW 322
// end ;
59396: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59397: LD_EXP 15
59401: IFFALSE 59409
59403: PUSH
59404: LD_EXP 67
59408: AND
59409: IFFALSE 59530
59411: GO 59413
59413: DISABLE
59414: LD_INT 0
59416: PPUSH
59417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59418: LD_ADDR_VAR 0 2
59422: PUSH
59423: LD_INT 22
59425: PUSH
59426: LD_OWVAR 2
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 21
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 3
59447: PUSH
59448: LD_INT 23
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: LIST
59466: PPUSH
59467: CALL_OW 69
59471: ST_TO_ADDR
// if not tmp then
59472: LD_VAR 0 2
59476: NOT
59477: IFFALSE 59481
// exit ;
59479: GO 59530
// for i in tmp do
59481: LD_ADDR_VAR 0 1
59485: PUSH
59486: LD_VAR 0 2
59490: PUSH
59491: FOR_IN
59492: IFFALSE 59528
// begin if Crawls ( i ) then
59494: LD_VAR 0 1
59498: PPUSH
59499: CALL_OW 318
59503: IFFALSE 59514
// ComWalk ( i ) ;
59505: LD_VAR 0 1
59509: PPUSH
59510: CALL_OW 138
// SetClass ( i , 2 ) ;
59514: LD_VAR 0 1
59518: PPUSH
59519: LD_INT 2
59521: PPUSH
59522: CALL_OW 336
// end ;
59526: GO 59491
59528: POP
59529: POP
// end ;
59530: PPOPN 2
59532: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59533: LD_EXP 15
59537: IFFALSE 59545
59539: PUSH
59540: LD_EXP 68
59544: AND
59545: IFFALSE 59835
59547: GO 59549
59549: DISABLE
59550: LD_INT 0
59552: PPUSH
59553: PPUSH
59554: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59555: LD_OWVAR 2
59559: PPUSH
59560: LD_INT 9
59562: PPUSH
59563: LD_INT 1
59565: PPUSH
59566: LD_INT 1
59568: PPUSH
59569: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59573: LD_INT 9
59575: PPUSH
59576: LD_OWVAR 2
59580: PPUSH
59581: CALL_OW 343
// uc_side := 9 ;
59585: LD_ADDR_OWVAR 20
59589: PUSH
59590: LD_INT 9
59592: ST_TO_ADDR
// uc_nation := 2 ;
59593: LD_ADDR_OWVAR 21
59597: PUSH
59598: LD_INT 2
59600: ST_TO_ADDR
// hc_name := Dark Warrior ;
59601: LD_ADDR_OWVAR 26
59605: PUSH
59606: LD_STRING Dark Warrior
59608: ST_TO_ADDR
// hc_gallery :=  ;
59609: LD_ADDR_OWVAR 33
59613: PUSH
59614: LD_STRING 
59616: ST_TO_ADDR
// hc_noskilllimit := true ;
59617: LD_ADDR_OWVAR 76
59621: PUSH
59622: LD_INT 1
59624: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59625: LD_ADDR_OWVAR 31
59629: PUSH
59630: LD_INT 30
59632: PUSH
59633: LD_INT 30
59635: PUSH
59636: LD_INT 30
59638: PUSH
59639: LD_INT 30
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: ST_TO_ADDR
// un := CreateHuman ;
59648: LD_ADDR_VAR 0 3
59652: PUSH
59653: CALL_OW 44
59657: ST_TO_ADDR
// hc_noskilllimit := false ;
59658: LD_ADDR_OWVAR 76
59662: PUSH
59663: LD_INT 0
59665: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59666: LD_VAR 0 3
59670: PPUSH
59671: LD_INT 1
59673: PPUSH
59674: CALL_OW 51
// ToLua ( playRanger() ) ;
59678: LD_STRING playRanger()
59680: PPUSH
59681: CALL_OW 559
// p := 0 ;
59685: LD_ADDR_VAR 0 2
59689: PUSH
59690: LD_INT 0
59692: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59693: LD_INT 35
59695: PPUSH
59696: CALL_OW 67
// p := p + 1 ;
59700: LD_ADDR_VAR 0 2
59704: PUSH
59705: LD_VAR 0 2
59709: PUSH
59710: LD_INT 1
59712: PLUS
59713: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59714: LD_VAR 0 3
59718: PPUSH
59719: CALL_OW 256
59723: PUSH
59724: LD_INT 1000
59726: LESS
59727: IFFALSE 59741
// SetLives ( un , 1000 ) ;
59729: LD_VAR 0 3
59733: PPUSH
59734: LD_INT 1000
59736: PPUSH
59737: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59741: LD_VAR 0 3
59745: PPUSH
59746: LD_INT 81
59748: PUSH
59749: LD_OWVAR 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 91
59760: PUSH
59761: LD_VAR 0 3
59765: PUSH
59766: LD_INT 30
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PPUSH
59778: CALL_OW 69
59782: PPUSH
59783: LD_VAR 0 3
59787: PPUSH
59788: CALL_OW 74
59792: PPUSH
59793: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59797: LD_VAR 0 2
59801: PUSH
59802: LD_INT 80
59804: GREATER
59805: IFTRUE 59818
59807: PUSH
59808: LD_VAR 0 3
59812: PPUSH
59813: CALL_OW 301
59817: OR
59818: IFFALSE 59693
// if un then
59820: LD_VAR 0 3
59824: IFFALSE 59835
// RemoveUnit ( un ) ;
59826: LD_VAR 0 3
59830: PPUSH
59831: CALL_OW 64
// end ;
59835: PPOPN 3
59837: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59838: LD_EXP 69
59842: IFFALSE 59958
59844: GO 59846
59846: DISABLE
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
59851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59852: LD_ADDR_VAR 0 2
59856: PUSH
59857: LD_INT 81
59859: PUSH
59860: LD_OWVAR 2
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 21
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PPUSH
59883: CALL_OW 69
59887: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59888: LD_STRING playComputer()
59890: PPUSH
59891: CALL_OW 559
// if not tmp then
59895: LD_VAR 0 2
59899: NOT
59900: IFFALSE 59904
// exit ;
59902: GO 59958
// for i in tmp do
59904: LD_ADDR_VAR 0 1
59908: PUSH
59909: LD_VAR 0 2
59913: PUSH
59914: FOR_IN
59915: IFFALSE 59956
// for j := 1 to 4 do
59917: LD_ADDR_VAR 0 3
59921: PUSH
59922: DOUBLE
59923: LD_INT 1
59925: DEC
59926: ST_TO_ADDR
59927: LD_INT 4
59929: PUSH
59930: FOR_TO
59931: IFFALSE 59952
// SetSkill ( i , j , 10 ) ;
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_VAR 0 3
59942: PPUSH
59943: LD_INT 10
59945: PPUSH
59946: CALL_OW 237
59950: GO 59930
59952: POP
59953: POP
59954: GO 59914
59956: POP
59957: POP
// end ;
59958: PPOPN 3
59960: END
// every 0 0$1 trigger s30 do var i , tmp ;
59961: LD_EXP 70
59965: IFFALSE 60034
59967: GO 59969
59969: DISABLE
59970: LD_INT 0
59972: PPUSH
59973: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59974: LD_ADDR_VAR 0 2
59978: PUSH
59979: LD_INT 22
59981: PUSH
59982: LD_OWVAR 2
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PPUSH
59991: CALL_OW 69
59995: ST_TO_ADDR
// if not tmp then
59996: LD_VAR 0 2
60000: NOT
60001: IFFALSE 60005
// exit ;
60003: GO 60034
// for i in tmp do
60005: LD_ADDR_VAR 0 1
60009: PUSH
60010: LD_VAR 0 2
60014: PUSH
60015: FOR_IN
60016: IFFALSE 60032
// SetLives ( i , 300 ) ;
60018: LD_VAR 0 1
60022: PPUSH
60023: LD_INT 300
60025: PPUSH
60026: CALL_OW 234
60030: GO 60015
60032: POP
60033: POP
// end ;
60034: PPOPN 2
60036: END
// every 0 0$1 trigger s60 do var i , tmp ;
60037: LD_EXP 71
60041: IFFALSE 60110
60043: GO 60045
60045: DISABLE
60046: LD_INT 0
60048: PPUSH
60049: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60050: LD_ADDR_VAR 0 2
60054: PUSH
60055: LD_INT 22
60057: PUSH
60058: LD_OWVAR 2
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PPUSH
60067: CALL_OW 69
60071: ST_TO_ADDR
// if not tmp then
60072: LD_VAR 0 2
60076: NOT
60077: IFFALSE 60081
// exit ;
60079: GO 60110
// for i in tmp do
60081: LD_ADDR_VAR 0 1
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: FOR_IN
60092: IFFALSE 60108
// SetLives ( i , 600 ) ;
60094: LD_VAR 0 1
60098: PPUSH
60099: LD_INT 600
60101: PPUSH
60102: CALL_OW 234
60106: GO 60091
60108: POP
60109: POP
// end ;
60110: PPOPN 2
60112: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60113: LD_INT 0
60115: PPUSH
// case cmd of 301 :
60116: LD_VAR 0 1
60120: PUSH
60121: LD_INT 301
60123: DOUBLE
60124: EQUAL
60125: IFTRUE 60129
60127: GO 60161
60129: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60130: LD_VAR 0 6
60134: PPUSH
60135: LD_VAR 0 7
60139: PPUSH
60140: LD_VAR 0 8
60144: PPUSH
60145: LD_VAR 0 4
60149: PPUSH
60150: LD_VAR 0 5
60154: PPUSH
60155: CALL 61374 0 5
60159: GO 60282
60161: LD_INT 302
60163: DOUBLE
60164: EQUAL
60165: IFTRUE 60169
60167: GO 60206
60169: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60170: LD_VAR 0 6
60174: PPUSH
60175: LD_VAR 0 7
60179: PPUSH
60180: LD_VAR 0 8
60184: PPUSH
60185: LD_VAR 0 9
60189: PPUSH
60190: LD_VAR 0 4
60194: PPUSH
60195: LD_VAR 0 5
60199: PPUSH
60200: CALL 61465 0 6
60204: GO 60282
60206: LD_INT 303
60208: DOUBLE
60209: EQUAL
60210: IFTRUE 60214
60212: GO 60251
60214: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60215: LD_VAR 0 6
60219: PPUSH
60220: LD_VAR 0 7
60224: PPUSH
60225: LD_VAR 0 8
60229: PPUSH
60230: LD_VAR 0 9
60234: PPUSH
60235: LD_VAR 0 4
60239: PPUSH
60240: LD_VAR 0 5
60244: PPUSH
60245: CALL 60287 0 6
60249: GO 60282
60251: LD_INT 304
60253: DOUBLE
60254: EQUAL
60255: IFTRUE 60259
60257: GO 60281
60259: POP
// hHackTeleport ( unit , x , y ) ; end ;
60260: LD_VAR 0 2
60264: PPUSH
60265: LD_VAR 0 4
60269: PPUSH
60270: LD_VAR 0 5
60274: PPUSH
60275: CALL 62058 0 3
60279: GO 60282
60281: POP
// end ;
60282: LD_VAR 0 12
60286: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60287: LD_INT 0
60289: PPUSH
60290: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60291: LD_VAR 0 1
60295: PUSH
60296: LD_INT 1
60298: LESS
60299: IFTRUE 60311
60301: PUSH
60302: LD_VAR 0 1
60306: PUSH
60307: LD_INT 3
60309: GREATER
60310: OR
60311: IFTRUE 60329
60313: PUSH
60314: LD_VAR 0 5
60318: PPUSH
60319: LD_VAR 0 6
60323: PPUSH
60324: CALL_OW 428
60328: OR
60329: IFFALSE 60333
// exit ;
60331: GO 61061
// uc_side := your_side ;
60333: LD_ADDR_OWVAR 20
60337: PUSH
60338: LD_OWVAR 2
60342: ST_TO_ADDR
// uc_nation := nation ;
60343: LD_ADDR_OWVAR 21
60347: PUSH
60348: LD_VAR 0 1
60352: ST_TO_ADDR
// bc_level = 1 ;
60353: LD_ADDR_OWVAR 43
60357: PUSH
60358: LD_INT 1
60360: ST_TO_ADDR
// case btype of 1 :
60361: LD_VAR 0 2
60365: PUSH
60366: LD_INT 1
60368: DOUBLE
60369: EQUAL
60370: IFTRUE 60374
60372: GO 60385
60374: POP
// bc_type := b_depot ; 2 :
60375: LD_ADDR_OWVAR 42
60379: PUSH
60380: LD_INT 0
60382: ST_TO_ADDR
60383: GO 61005
60385: LD_INT 2
60387: DOUBLE
60388: EQUAL
60389: IFTRUE 60393
60391: GO 60404
60393: POP
// bc_type := b_warehouse ; 3 :
60394: LD_ADDR_OWVAR 42
60398: PUSH
60399: LD_INT 1
60401: ST_TO_ADDR
60402: GO 61005
60404: LD_INT 3
60406: DOUBLE
60407: EQUAL
60408: IFTRUE 60412
60410: GO 60423
60412: POP
// bc_type := b_lab ; 4 .. 9 :
60413: LD_ADDR_OWVAR 42
60417: PUSH
60418: LD_INT 6
60420: ST_TO_ADDR
60421: GO 61005
60423: LD_INT 4
60425: DOUBLE
60426: GREATEREQUAL
60427: IFFALSE 60435
60429: LD_INT 9
60431: DOUBLE
60432: LESSEQUAL
60433: IFTRUE 60437
60435: GO 60497
60437: POP
// begin bc_type := b_lab_half ;
60438: LD_ADDR_OWVAR 42
60442: PUSH
60443: LD_INT 7
60445: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60446: LD_ADDR_OWVAR 44
60450: PUSH
60451: LD_INT 10
60453: PUSH
60454: LD_INT 11
60456: PUSH
60457: LD_INT 12
60459: PUSH
60460: LD_INT 15
60462: PUSH
60463: LD_INT 14
60465: PUSH
60466: LD_INT 13
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: PUSH
60477: LD_VAR 0 2
60481: PUSH
60482: LD_INT 3
60484: MINUS
60485: ARRAY
60486: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60487: LD_ADDR_OWVAR 45
60491: PUSH
60492: LD_INT 9
60494: ST_TO_ADDR
// end ; 10 .. 13 :
60495: GO 61005
60497: LD_INT 10
60499: DOUBLE
60500: GREATEREQUAL
60501: IFFALSE 60509
60503: LD_INT 13
60505: DOUBLE
60506: LESSEQUAL
60507: IFTRUE 60511
60509: GO 60588
60511: POP
// begin bc_type := b_lab_full ;
60512: LD_ADDR_OWVAR 42
60516: PUSH
60517: LD_INT 8
60519: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60520: LD_ADDR_OWVAR 44
60524: PUSH
60525: LD_INT 10
60527: PUSH
60528: LD_INT 12
60530: PUSH
60531: LD_INT 14
60533: PUSH
60534: LD_INT 13
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: PUSH
60543: LD_VAR 0 2
60547: PUSH
60548: LD_INT 9
60550: MINUS
60551: ARRAY
60552: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60553: LD_ADDR_OWVAR 45
60557: PUSH
60558: LD_INT 11
60560: PUSH
60561: LD_INT 15
60563: PUSH
60564: LD_INT 12
60566: PUSH
60567: LD_INT 15
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: PUSH
60576: LD_VAR 0 2
60580: PUSH
60581: LD_INT 9
60583: MINUS
60584: ARRAY
60585: ST_TO_ADDR
// end ; 14 :
60586: GO 61005
60588: LD_INT 14
60590: DOUBLE
60591: EQUAL
60592: IFTRUE 60596
60594: GO 60607
60596: POP
// bc_type := b_workshop ; 15 :
60597: LD_ADDR_OWVAR 42
60601: PUSH
60602: LD_INT 2
60604: ST_TO_ADDR
60605: GO 61005
60607: LD_INT 15
60609: DOUBLE
60610: EQUAL
60611: IFTRUE 60615
60613: GO 60626
60615: POP
// bc_type := b_factory ; 16 :
60616: LD_ADDR_OWVAR 42
60620: PUSH
60621: LD_INT 3
60623: ST_TO_ADDR
60624: GO 61005
60626: LD_INT 16
60628: DOUBLE
60629: EQUAL
60630: IFTRUE 60634
60632: GO 60645
60634: POP
// bc_type := b_ext_gun ; 17 :
60635: LD_ADDR_OWVAR 42
60639: PUSH
60640: LD_INT 17
60642: ST_TO_ADDR
60643: GO 61005
60645: LD_INT 17
60647: DOUBLE
60648: EQUAL
60649: IFTRUE 60653
60651: GO 60681
60653: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60654: LD_ADDR_OWVAR 42
60658: PUSH
60659: LD_INT 19
60661: PUSH
60662: LD_INT 23
60664: PUSH
60665: LD_INT 19
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: LD_VAR 0 1
60677: ARRAY
60678: ST_TO_ADDR
60679: GO 61005
60681: LD_INT 18
60683: DOUBLE
60684: EQUAL
60685: IFTRUE 60689
60687: GO 60700
60689: POP
// bc_type := b_ext_radar ; 19 :
60690: LD_ADDR_OWVAR 42
60694: PUSH
60695: LD_INT 20
60697: ST_TO_ADDR
60698: GO 61005
60700: LD_INT 19
60702: DOUBLE
60703: EQUAL
60704: IFTRUE 60708
60706: GO 60719
60708: POP
// bc_type := b_ext_radio ; 20 :
60709: LD_ADDR_OWVAR 42
60713: PUSH
60714: LD_INT 22
60716: ST_TO_ADDR
60717: GO 61005
60719: LD_INT 20
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60727
60725: GO 60738
60727: POP
// bc_type := b_ext_siberium ; 21 :
60728: LD_ADDR_OWVAR 42
60732: PUSH
60733: LD_INT 21
60735: ST_TO_ADDR
60736: GO 61005
60738: LD_INT 21
60740: DOUBLE
60741: EQUAL
60742: IFTRUE 60746
60744: GO 60757
60746: POP
// bc_type := b_ext_computer ; 22 :
60747: LD_ADDR_OWVAR 42
60751: PUSH
60752: LD_INT 24
60754: ST_TO_ADDR
60755: GO 61005
60757: LD_INT 22
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60765
60763: GO 60776
60765: POP
// bc_type := b_ext_track ; 23 :
60766: LD_ADDR_OWVAR 42
60770: PUSH
60771: LD_INT 16
60773: ST_TO_ADDR
60774: GO 61005
60776: LD_INT 23
60778: DOUBLE
60779: EQUAL
60780: IFTRUE 60784
60782: GO 60795
60784: POP
// bc_type := b_ext_laser ; 24 :
60785: LD_ADDR_OWVAR 42
60789: PUSH
60790: LD_INT 25
60792: ST_TO_ADDR
60793: GO 61005
60795: LD_INT 24
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60803
60801: GO 60814
60803: POP
// bc_type := b_control_tower ; 25 :
60804: LD_ADDR_OWVAR 42
60808: PUSH
60809: LD_INT 36
60811: ST_TO_ADDR
60812: GO 61005
60814: LD_INT 25
60816: DOUBLE
60817: EQUAL
60818: IFTRUE 60822
60820: GO 60833
60822: POP
// bc_type := b_breastwork ; 26 :
60823: LD_ADDR_OWVAR 42
60827: PUSH
60828: LD_INT 31
60830: ST_TO_ADDR
60831: GO 61005
60833: LD_INT 26
60835: DOUBLE
60836: EQUAL
60837: IFTRUE 60841
60839: GO 60852
60841: POP
// bc_type := b_bunker ; 27 :
60842: LD_ADDR_OWVAR 42
60846: PUSH
60847: LD_INT 32
60849: ST_TO_ADDR
60850: GO 61005
60852: LD_INT 27
60854: DOUBLE
60855: EQUAL
60856: IFTRUE 60860
60858: GO 60871
60860: POP
// bc_type := b_turret ; 28 :
60861: LD_ADDR_OWVAR 42
60865: PUSH
60866: LD_INT 33
60868: ST_TO_ADDR
60869: GO 61005
60871: LD_INT 28
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60879
60877: GO 60890
60879: POP
// bc_type := b_armoury ; 29 :
60880: LD_ADDR_OWVAR 42
60884: PUSH
60885: LD_INT 4
60887: ST_TO_ADDR
60888: GO 61005
60890: LD_INT 29
60892: DOUBLE
60893: EQUAL
60894: IFTRUE 60898
60896: GO 60909
60898: POP
// bc_type := b_barracks ; 30 :
60899: LD_ADDR_OWVAR 42
60903: PUSH
60904: LD_INT 5
60906: ST_TO_ADDR
60907: GO 61005
60909: LD_INT 30
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60917
60915: GO 60928
60917: POP
// bc_type := b_solar_power ; 31 :
60918: LD_ADDR_OWVAR 42
60922: PUSH
60923: LD_INT 27
60925: ST_TO_ADDR
60926: GO 61005
60928: LD_INT 31
60930: DOUBLE
60931: EQUAL
60932: IFTRUE 60936
60934: GO 60947
60936: POP
// bc_type := b_oil_power ; 32 :
60937: LD_ADDR_OWVAR 42
60941: PUSH
60942: LD_INT 26
60944: ST_TO_ADDR
60945: GO 61005
60947: LD_INT 32
60949: DOUBLE
60950: EQUAL
60951: IFTRUE 60955
60953: GO 60966
60955: POP
// bc_type := b_siberite_power ; 33 :
60956: LD_ADDR_OWVAR 42
60960: PUSH
60961: LD_INT 28
60963: ST_TO_ADDR
60964: GO 61005
60966: LD_INT 33
60968: DOUBLE
60969: EQUAL
60970: IFTRUE 60974
60972: GO 60985
60974: POP
// bc_type := b_oil_mine ; 34 :
60975: LD_ADDR_OWVAR 42
60979: PUSH
60980: LD_INT 29
60982: ST_TO_ADDR
60983: GO 61005
60985: LD_INT 34
60987: DOUBLE
60988: EQUAL
60989: IFTRUE 60993
60991: GO 61004
60993: POP
// bc_type := b_siberite_mine ; end ;
60994: LD_ADDR_OWVAR 42
60998: PUSH
60999: LD_INT 30
61001: ST_TO_ADDR
61002: GO 61005
61004: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61005: LD_ADDR_VAR 0 8
61009: PUSH
61010: LD_VAR 0 5
61014: PPUSH
61015: LD_VAR 0 6
61019: PPUSH
61020: LD_VAR 0 3
61024: PPUSH
61025: CALL_OW 47
61029: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61030: LD_OWVAR 42
61034: PUSH
61035: LD_INT 32
61037: PUSH
61038: LD_INT 33
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: IN
61045: IFFALSE 61061
// PlaceWeaponTurret ( b , weapon ) ;
61047: LD_VAR 0 8
61051: PPUSH
61052: LD_VAR 0 4
61056: PPUSH
61057: CALL_OW 431
// end ;
61061: LD_VAR 0 7
61065: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61066: LD_INT 0
61068: PPUSH
61069: PPUSH
61070: PPUSH
61071: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61072: LD_ADDR_VAR 0 4
61076: PUSH
61077: LD_INT 22
61079: PUSH
61080: LD_OWVAR 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: LD_INT 30
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 30
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PPUSH
61121: CALL_OW 69
61125: ST_TO_ADDR
// if not tmp then
61126: LD_VAR 0 4
61130: NOT
61131: IFFALSE 61135
// exit ;
61133: GO 61194
// for i in tmp do
61135: LD_ADDR_VAR 0 2
61139: PUSH
61140: LD_VAR 0 4
61144: PUSH
61145: FOR_IN
61146: IFFALSE 61192
// for j = 1 to 3 do
61148: LD_ADDR_VAR 0 3
61152: PUSH
61153: DOUBLE
61154: LD_INT 1
61156: DEC
61157: ST_TO_ADDR
61158: LD_INT 3
61160: PUSH
61161: FOR_TO
61162: IFFALSE 61188
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61164: LD_VAR 0 2
61168: PPUSH
61169: CALL_OW 274
61173: PPUSH
61174: LD_VAR 0 3
61178: PPUSH
61179: LD_INT 99999
61181: PPUSH
61182: CALL_OW 277
61186: GO 61161
61188: POP
61189: POP
61190: GO 61145
61192: POP
61193: POP
// end ;
61194: LD_VAR 0 1
61198: RET
// export function hHackSetLevel10 ; var i , j ; begin
61199: LD_INT 0
61201: PPUSH
61202: PPUSH
61203: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61204: LD_ADDR_VAR 0 2
61208: PUSH
61209: LD_INT 21
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PPUSH
61219: CALL_OW 69
61223: PUSH
61224: FOR_IN
61225: IFFALSE 61277
// if IsSelected ( i ) then
61227: LD_VAR 0 2
61231: PPUSH
61232: CALL_OW 306
61236: IFFALSE 61275
// begin for j := 1 to 4 do
61238: LD_ADDR_VAR 0 3
61242: PUSH
61243: DOUBLE
61244: LD_INT 1
61246: DEC
61247: ST_TO_ADDR
61248: LD_INT 4
61250: PUSH
61251: FOR_TO
61252: IFFALSE 61273
// SetSkill ( i , j , 10 ) ;
61254: LD_VAR 0 2
61258: PPUSH
61259: LD_VAR 0 3
61263: PPUSH
61264: LD_INT 10
61266: PPUSH
61267: CALL_OW 237
61271: GO 61251
61273: POP
61274: POP
// end ;
61275: GO 61224
61277: POP
61278: POP
// end ;
61279: LD_VAR 0 1
61283: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61284: LD_INT 0
61286: PPUSH
61287: PPUSH
61288: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61289: LD_ADDR_VAR 0 2
61293: PUSH
61294: LD_INT 22
61296: PUSH
61297: LD_OWVAR 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 21
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PPUSH
61320: CALL_OW 69
61324: PUSH
61325: FOR_IN
61326: IFFALSE 61367
// begin for j := 1 to 4 do
61328: LD_ADDR_VAR 0 3
61332: PUSH
61333: DOUBLE
61334: LD_INT 1
61336: DEC
61337: ST_TO_ADDR
61338: LD_INT 4
61340: PUSH
61341: FOR_TO
61342: IFFALSE 61363
// SetSkill ( i , j , 10 ) ;
61344: LD_VAR 0 2
61348: PPUSH
61349: LD_VAR 0 3
61353: PPUSH
61354: LD_INT 10
61356: PPUSH
61357: CALL_OW 237
61361: GO 61341
61363: POP
61364: POP
// end ;
61365: GO 61325
61367: POP
61368: POP
// end ;
61369: LD_VAR 0 1
61373: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61374: LD_INT 0
61376: PPUSH
// uc_side := your_side ;
61377: LD_ADDR_OWVAR 20
61381: PUSH
61382: LD_OWVAR 2
61386: ST_TO_ADDR
// uc_nation := nation ;
61387: LD_ADDR_OWVAR 21
61391: PUSH
61392: LD_VAR 0 1
61396: ST_TO_ADDR
// InitHc ;
61397: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61401: LD_INT 0
61403: PPUSH
61404: LD_VAR 0 2
61408: PPUSH
61409: LD_VAR 0 3
61413: PPUSH
61414: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61418: LD_VAR 0 4
61422: PPUSH
61423: LD_VAR 0 5
61427: PPUSH
61428: CALL_OW 428
61432: PUSH
61433: LD_INT 0
61435: EQUAL
61436: IFFALSE 61460
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61438: CALL_OW 44
61442: PPUSH
61443: LD_VAR 0 4
61447: PPUSH
61448: LD_VAR 0 5
61452: PPUSH
61453: LD_INT 1
61455: PPUSH
61456: CALL_OW 48
// end ;
61460: LD_VAR 0 6
61464: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61465: LD_INT 0
61467: PPUSH
61468: PPUSH
// uc_side := your_side ;
61469: LD_ADDR_OWVAR 20
61473: PUSH
61474: LD_OWVAR 2
61478: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61479: LD_VAR 0 1
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 2
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: IN
61506: IFFALSE 61518
// uc_nation := nation_american else
61508: LD_ADDR_OWVAR 21
61512: PUSH
61513: LD_INT 1
61515: ST_TO_ADDR
61516: GO 61561
// if chassis in [ 11 , 12 , 13 , 14 ] then
61518: LD_VAR 0 1
61522: PUSH
61523: LD_INT 11
61525: PUSH
61526: LD_INT 12
61528: PUSH
61529: LD_INT 13
61531: PUSH
61532: LD_INT 14
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: IN
61541: IFFALSE 61553
// uc_nation := nation_arabian else
61543: LD_ADDR_OWVAR 21
61547: PUSH
61548: LD_INT 2
61550: ST_TO_ADDR
61551: GO 61561
// uc_nation := nation_russian ;
61553: LD_ADDR_OWVAR 21
61557: PUSH
61558: LD_INT 3
61560: ST_TO_ADDR
// vc_chassis := chassis ;
61561: LD_ADDR_OWVAR 37
61565: PUSH
61566: LD_VAR 0 1
61570: ST_TO_ADDR
// vc_engine := engine ;
61571: LD_ADDR_OWVAR 39
61575: PUSH
61576: LD_VAR 0 2
61580: ST_TO_ADDR
// vc_control := control ;
61581: LD_ADDR_OWVAR 38
61585: PUSH
61586: LD_VAR 0 3
61590: ST_TO_ADDR
// vc_weapon := weapon ;
61591: LD_ADDR_OWVAR 40
61595: PUSH
61596: LD_VAR 0 4
61600: ST_TO_ADDR
// un := CreateVehicle ;
61601: LD_ADDR_VAR 0 8
61605: PUSH
61606: CALL_OW 45
61610: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61611: LD_VAR 0 8
61615: PPUSH
61616: LD_INT 0
61618: PPUSH
61619: LD_INT 5
61621: PPUSH
61622: CALL_OW 12
61626: PPUSH
61627: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61631: LD_VAR 0 8
61635: PPUSH
61636: LD_VAR 0 5
61640: PPUSH
61641: LD_VAR 0 6
61645: PPUSH
61646: LD_INT 1
61648: PPUSH
61649: CALL_OW 48
// end ;
61653: LD_VAR 0 7
61657: RET
// export hInvincible ; every 1 do
61658: GO 61660
61660: DISABLE
// hInvincible := [ ] ;
61661: LD_ADDR_EXP 72
61665: PUSH
61666: EMPTY
61667: ST_TO_ADDR
61668: END
// every 10 do var i ;
61669: GO 61671
61671: DISABLE
61672: LD_INT 0
61674: PPUSH
// begin enable ;
61675: ENABLE
// if not hInvincible then
61676: LD_EXP 72
61680: NOT
61681: IFFALSE 61685
// exit ;
61683: GO 61729
// for i in hInvincible do
61685: LD_ADDR_VAR 0 1
61689: PUSH
61690: LD_EXP 72
61694: PUSH
61695: FOR_IN
61696: IFFALSE 61727
// if GetLives ( i ) < 1000 then
61698: LD_VAR 0 1
61702: PPUSH
61703: CALL_OW 256
61707: PUSH
61708: LD_INT 1000
61710: LESS
61711: IFFALSE 61725
// SetLives ( i , 1000 ) ;
61713: LD_VAR 0 1
61717: PPUSH
61718: LD_INT 1000
61720: PPUSH
61721: CALL_OW 234
61725: GO 61695
61727: POP
61728: POP
// end ;
61729: PPOPN 1
61731: END
// export function hHackInvincible ; var i ; begin
61732: LD_INT 0
61734: PPUSH
61735: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61736: LD_ADDR_VAR 0 2
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: LD_INT 21
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 21
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: PPUSH
61769: CALL_OW 69
61773: PUSH
61774: FOR_IN
61775: IFFALSE 61836
// if IsSelected ( i ) then
61777: LD_VAR 0 2
61781: PPUSH
61782: CALL_OW 306
61786: IFFALSE 61834
// begin if i in hInvincible then
61788: LD_VAR 0 2
61792: PUSH
61793: LD_EXP 72
61797: IN
61798: IFFALSE 61818
// hInvincible := hInvincible diff i else
61800: LD_ADDR_EXP 72
61804: PUSH
61805: LD_EXP 72
61809: PUSH
61810: LD_VAR 0 2
61814: DIFF
61815: ST_TO_ADDR
61816: GO 61834
// hInvincible := hInvincible union i ;
61818: LD_ADDR_EXP 72
61822: PUSH
61823: LD_EXP 72
61827: PUSH
61828: LD_VAR 0 2
61832: UNION
61833: ST_TO_ADDR
// end ;
61834: GO 61774
61836: POP
61837: POP
// end ;
61838: LD_VAR 0 1
61842: RET
// export function hHackInvisible ; var i , j ; begin
61843: LD_INT 0
61845: PPUSH
61846: PPUSH
61847: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61848: LD_ADDR_VAR 0 2
61852: PUSH
61853: LD_INT 21
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PPUSH
61863: CALL_OW 69
61867: PUSH
61868: FOR_IN
61869: IFFALSE 61893
// if IsSelected ( i ) then
61871: LD_VAR 0 2
61875: PPUSH
61876: CALL_OW 306
61880: IFFALSE 61891
// ComForceInvisible ( i ) ;
61882: LD_VAR 0 2
61886: PPUSH
61887: CALL_OW 496
61891: GO 61868
61893: POP
61894: POP
// end ;
61895: LD_VAR 0 1
61899: RET
// export function hHackChangeYourSide ; begin
61900: LD_INT 0
61902: PPUSH
// if your_side = 8 then
61903: LD_OWVAR 2
61907: PUSH
61908: LD_INT 8
61910: EQUAL
61911: IFFALSE 61923
// your_side := 0 else
61913: LD_ADDR_OWVAR 2
61917: PUSH
61918: LD_INT 0
61920: ST_TO_ADDR
61921: GO 61937
// your_side := your_side + 1 ;
61923: LD_ADDR_OWVAR 2
61927: PUSH
61928: LD_OWVAR 2
61932: PUSH
61933: LD_INT 1
61935: PLUS
61936: ST_TO_ADDR
// end ;
61937: LD_VAR 0 1
61941: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61942: LD_INT 0
61944: PPUSH
61945: PPUSH
61946: PPUSH
// for i in all_units do
61947: LD_ADDR_VAR 0 2
61951: PUSH
61952: LD_OWVAR 3
61956: PUSH
61957: FOR_IN
61958: IFFALSE 62036
// if IsSelected ( i ) then
61960: LD_VAR 0 2
61964: PPUSH
61965: CALL_OW 306
61969: IFFALSE 62034
// begin j := GetSide ( i ) ;
61971: LD_ADDR_VAR 0 3
61975: PUSH
61976: LD_VAR 0 2
61980: PPUSH
61981: CALL_OW 255
61985: ST_TO_ADDR
// if j = 8 then
61986: LD_VAR 0 3
61990: PUSH
61991: LD_INT 8
61993: EQUAL
61994: IFFALSE 62006
// j := 0 else
61996: LD_ADDR_VAR 0 3
62000: PUSH
62001: LD_INT 0
62003: ST_TO_ADDR
62004: GO 62020
// j := j + 1 ;
62006: LD_ADDR_VAR 0 3
62010: PUSH
62011: LD_VAR 0 3
62015: PUSH
62016: LD_INT 1
62018: PLUS
62019: ST_TO_ADDR
// SetSide ( i , j ) ;
62020: LD_VAR 0 2
62024: PPUSH
62025: LD_VAR 0 3
62029: PPUSH
62030: CALL_OW 235
// end ;
62034: GO 61957
62036: POP
62037: POP
// end ;
62038: LD_VAR 0 1
62042: RET
// export function hHackFog ; begin
62043: LD_INT 0
62045: PPUSH
// FogOff ( true ) ;
62046: LD_INT 1
62048: PPUSH
62049: CALL_OW 344
// end ;
62053: LD_VAR 0 1
62057: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62058: LD_INT 0
62060: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62061: LD_VAR 0 1
62065: PPUSH
62066: LD_VAR 0 2
62070: PPUSH
62071: LD_VAR 0 3
62075: PPUSH
62076: LD_INT 1
62078: PPUSH
62079: LD_INT 1
62081: PPUSH
62082: CALL_OW 483
// CenterOnXY ( x , y ) ;
62086: LD_VAR 0 2
62090: PPUSH
62091: LD_VAR 0 3
62095: PPUSH
62096: CALL_OW 84
// end ;
62100: LD_VAR 0 4
62104: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62105: LD_INT 0
62107: PPUSH
62108: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62109: LD_VAR 0 1
62113: NOT
62114: IFTRUE 62133
62116: PUSH
62117: LD_VAR 0 2
62121: PPUSH
62122: LD_VAR 0 3
62126: PPUSH
62127: CALL_OW 488
62131: NOT
62132: OR
62133: IFTRUE 62168
62135: PUSH
62136: LD_VAR 0 1
62140: PPUSH
62141: CALL_OW 266
62145: PUSH
62146: LD_INT 3
62148: NONEQUAL
62149: IFFALSE 62167
62151: PUSH
62152: LD_VAR 0 1
62156: PPUSH
62157: CALL_OW 247
62161: PUSH
62162: LD_INT 1
62164: EQUAL
62165: NOT
62166: AND
62167: OR
62168: IFFALSE 62172
// exit ;
62170: GO 62454
// if GetType ( factory ) = unit_human then
62172: LD_VAR 0 1
62176: PPUSH
62177: CALL_OW 247
62181: PUSH
62182: LD_INT 1
62184: EQUAL
62185: IFFALSE 62202
// factory := IsInUnit ( factory ) ;
62187: LD_ADDR_VAR 0 1
62191: PUSH
62192: LD_VAR 0 1
62196: PPUSH
62197: CALL_OW 310
62201: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 266
62211: PUSH
62212: LD_INT 3
62214: NONEQUAL
62215: IFFALSE 62219
// exit ;
62217: GO 62454
// for i := 1 to Count ( factoryWaypoints ) do
62219: LD_ADDR_VAR 0 5
62223: PUSH
62224: DOUBLE
62225: LD_INT 1
62227: DEC
62228: ST_TO_ADDR
62229: LD_EXP 73
62233: PPUSH
62234: CALL 3364 0 1
62238: PUSH
62239: FOR_TO
62240: IFFALSE 62402
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62242: LD_VAR 0 2
62246: PPUSH
62247: LD_VAR 0 3
62251: PPUSH
62252: CALL_OW 428
62256: PUSH
62257: LD_EXP 73
62261: PUSH
62262: LD_VAR 0 5
62266: ARRAY
62267: PUSH
62268: LD_INT 2
62270: ARRAY
62271: EQUAL
62272: IFFALSE 62304
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62274: LD_ADDR_EXP 73
62278: PUSH
62279: LD_EXP 73
62283: PPUSH
62284: LD_VAR 0 5
62288: PPUSH
62289: CALL_OW 3
62293: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62294: CALL 62459 0 0
// exit ;
62298: POP
62299: POP
62300: GO 62454
// end else
62302: GO 62400
// if factory = factoryWaypoints [ i ] [ 2 ] then
62304: LD_VAR 0 1
62308: PUSH
62309: LD_EXP 73
62313: PUSH
62314: LD_VAR 0 5
62318: ARRAY
62319: PUSH
62320: LD_INT 2
62322: ARRAY
62323: EQUAL
62324: IFFALSE 62400
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62326: LD_ADDR_EXP 73
62330: PUSH
62331: LD_EXP 73
62335: PPUSH
62336: LD_VAR 0 5
62340: PPUSH
62341: CALL_OW 3
62345: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62346: LD_ADDR_EXP 73
62350: PUSH
62351: LD_EXP 73
62355: PPUSH
62356: LD_VAR 0 1
62360: PPUSH
62361: CALL_OW 255
62365: PUSH
62366: LD_VAR 0 1
62370: PUSH
62371: LD_VAR 0 2
62375: PUSH
62376: LD_VAR 0 3
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: PPUSH
62387: CALL 39296 0 2
62391: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62392: CALL 62459 0 0
// exit ;
62396: POP
62397: POP
62398: GO 62454
// end ; end ;
62400: GO 62239
62402: POP
62403: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62404: LD_ADDR_EXP 73
62408: PUSH
62409: LD_EXP 73
62413: PPUSH
62414: LD_VAR 0 1
62418: PPUSH
62419: CALL_OW 255
62423: PUSH
62424: LD_VAR 0 1
62428: PUSH
62429: LD_VAR 0 2
62433: PUSH
62434: LD_VAR 0 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: PPUSH
62445: CALL 39296 0 2
62449: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62450: CALL 62459 0 0
// end ;
62454: LD_VAR 0 4
62458: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62459: LD_INT 0
62461: PPUSH
62462: PPUSH
62463: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62464: LD_STRING resetFactoryWaypoint();
62466: PPUSH
62467: CALL_OW 559
// if factoryWaypoints then
62471: LD_EXP 73
62475: IFFALSE 62596
// begin list := factoryWaypoints ;
62477: LD_ADDR_VAR 0 3
62481: PUSH
62482: LD_EXP 73
62486: ST_TO_ADDR
// for i := 1 to list do
62487: LD_ADDR_VAR 0 2
62491: PUSH
62492: DOUBLE
62493: LD_INT 1
62495: DEC
62496: ST_TO_ADDR
62497: LD_VAR 0 3
62501: PUSH
62502: FOR_TO
62503: IFFALSE 62594
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62505: LD_STRING setFactoryWaypointXY(
62507: PUSH
62508: LD_VAR 0 3
62512: PUSH
62513: LD_VAR 0 2
62517: ARRAY
62518: PUSH
62519: LD_INT 1
62521: ARRAY
62522: STR
62523: PUSH
62524: LD_STRING ,
62526: STR
62527: PUSH
62528: LD_VAR 0 3
62532: PUSH
62533: LD_VAR 0 2
62537: ARRAY
62538: PUSH
62539: LD_INT 2
62541: ARRAY
62542: STR
62543: PUSH
62544: LD_STRING ,
62546: STR
62547: PUSH
62548: LD_VAR 0 3
62552: PUSH
62553: LD_VAR 0 2
62557: ARRAY
62558: PUSH
62559: LD_INT 3
62561: ARRAY
62562: STR
62563: PUSH
62564: LD_STRING ,
62566: STR
62567: PUSH
62568: LD_VAR 0 3
62572: PUSH
62573: LD_VAR 0 2
62577: ARRAY
62578: PUSH
62579: LD_INT 4
62581: ARRAY
62582: STR
62583: PUSH
62584: LD_STRING )
62586: STR
62587: PPUSH
62588: CALL_OW 559
62592: GO 62502
62594: POP
62595: POP
// end ; end ;
62596: LD_VAR 0 1
62600: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62601: LD_INT 0
62603: PPUSH
// if HexInfo ( x , y ) = warehouse then
62604: LD_VAR 0 2
62608: PPUSH
62609: LD_VAR 0 3
62613: PPUSH
62614: CALL_OW 428
62618: PUSH
62619: LD_VAR 0 1
62623: EQUAL
62624: IFFALSE 62651
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62626: LD_ADDR_EXP 75
62630: PUSH
62631: LD_EXP 75
62635: PPUSH
62636: LD_VAR 0 1
62640: PPUSH
62641: LD_INT 0
62643: PPUSH
62644: CALL_OW 1
62648: ST_TO_ADDR
62649: GO 62702
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62651: LD_ADDR_EXP 75
62655: PUSH
62656: LD_EXP 75
62660: PPUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: LD_VAR 0 1
62670: PPUSH
62671: CALL_OW 255
62675: PUSH
62676: LD_VAR 0 1
62680: PUSH
62681: LD_VAR 0 2
62685: PUSH
62686: LD_VAR 0 3
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: PPUSH
62697: CALL_OW 1
62701: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62702: CALL 62711 0 0
// end ;
62706: LD_VAR 0 4
62710: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62711: LD_INT 0
62713: PPUSH
62714: PPUSH
62715: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62716: LD_STRING resetWarehouseGatheringPoints();
62718: PPUSH
62719: CALL_OW 559
// if warehouseGatheringPoints then
62723: LD_EXP 75
62727: IFFALSE 62853
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62729: LD_ADDR_VAR 0 3
62733: PUSH
62734: LD_EXP 75
62738: PPUSH
62739: CALL 43230 0 1
62743: ST_TO_ADDR
// for i := 1 to list do
62744: LD_ADDR_VAR 0 2
62748: PUSH
62749: DOUBLE
62750: LD_INT 1
62752: DEC
62753: ST_TO_ADDR
62754: LD_VAR 0 3
62758: PUSH
62759: FOR_TO
62760: IFFALSE 62851
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62762: LD_STRING setWarehouseGatheringPointXY(
62764: PUSH
62765: LD_VAR 0 3
62769: PUSH
62770: LD_VAR 0 2
62774: ARRAY
62775: PUSH
62776: LD_INT 1
62778: ARRAY
62779: STR
62780: PUSH
62781: LD_STRING ,
62783: STR
62784: PUSH
62785: LD_VAR 0 3
62789: PUSH
62790: LD_VAR 0 2
62794: ARRAY
62795: PUSH
62796: LD_INT 2
62798: ARRAY
62799: STR
62800: PUSH
62801: LD_STRING ,
62803: STR
62804: PUSH
62805: LD_VAR 0 3
62809: PUSH
62810: LD_VAR 0 2
62814: ARRAY
62815: PUSH
62816: LD_INT 3
62818: ARRAY
62819: STR
62820: PUSH
62821: LD_STRING ,
62823: STR
62824: PUSH
62825: LD_VAR 0 3
62829: PUSH
62830: LD_VAR 0 2
62834: ARRAY
62835: PUSH
62836: LD_INT 4
62838: ARRAY
62839: STR
62840: PUSH
62841: LD_STRING )
62843: STR
62844: PPUSH
62845: CALL_OW 559
62849: GO 62759
62851: POP
62852: POP
// end ; end ;
62853: LD_VAR 0 1
62857: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62858: LD_EXP 75
62862: IFFALSE 63557
62864: GO 62866
62866: DISABLE
62867: LD_INT 0
62869: PPUSH
62870: PPUSH
62871: PPUSH
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
// begin enable ;
62878: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62879: LD_ADDR_VAR 0 3
62883: PUSH
62884: LD_EXP 75
62888: PPUSH
62889: CALL 43230 0 1
62893: ST_TO_ADDR
// if not list then
62894: LD_VAR 0 3
62898: NOT
62899: IFFALSE 62903
// exit ;
62901: GO 63557
// for i := 1 to list do
62903: LD_ADDR_VAR 0 1
62907: PUSH
62908: DOUBLE
62909: LD_INT 1
62911: DEC
62912: ST_TO_ADDR
62913: LD_VAR 0 3
62917: PUSH
62918: FOR_TO
62919: IFFALSE 63555
// begin depot := list [ i ] [ 2 ] ;
62921: LD_ADDR_VAR 0 8
62925: PUSH
62926: LD_VAR 0 3
62930: PUSH
62931: LD_VAR 0 1
62935: ARRAY
62936: PUSH
62937: LD_INT 2
62939: ARRAY
62940: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62941: LD_ADDR_VAR 0 5
62945: PUSH
62946: LD_VAR 0 3
62950: PUSH
62951: LD_VAR 0 1
62955: ARRAY
62956: PUSH
62957: LD_INT 1
62959: ARRAY
62960: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
62961: LD_VAR 0 8
62965: PPUSH
62966: CALL_OW 301
62970: IFTRUE 62989
62972: PUSH
62973: LD_VAR 0 5
62977: PUSH
62978: LD_VAR 0 8
62982: PPUSH
62983: CALL_OW 255
62987: NONEQUAL
62988: OR
62989: IFFALSE 63018
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
62991: LD_ADDR_EXP 75
62995: PUSH
62996: LD_EXP 75
63000: PPUSH
63001: LD_VAR 0 8
63005: PPUSH
63006: LD_INT 0
63008: PPUSH
63009: CALL_OW 1
63013: ST_TO_ADDR
// exit ;
63014: POP
63015: POP
63016: GO 63557
// end ; x := list [ i ] [ 3 ] ;
63018: LD_ADDR_VAR 0 6
63022: PUSH
63023: LD_VAR 0 3
63027: PUSH
63028: LD_VAR 0 1
63032: ARRAY
63033: PUSH
63034: LD_INT 3
63036: ARRAY
63037: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63038: LD_ADDR_VAR 0 7
63042: PUSH
63043: LD_VAR 0 3
63047: PUSH
63048: LD_VAR 0 1
63052: ARRAY
63053: PUSH
63054: LD_INT 4
63056: ARRAY
63057: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63058: LD_ADDR_VAR 0 9
63062: PUSH
63063: LD_VAR 0 6
63067: PPUSH
63068: LD_VAR 0 7
63072: PPUSH
63073: LD_INT 16
63075: PPUSH
63076: CALL 41804 0 3
63080: ST_TO_ADDR
// if not cratesNearbyPoint then
63081: LD_VAR 0 9
63085: NOT
63086: IFFALSE 63092
// exit ;
63088: POP
63089: POP
63090: GO 63557
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63092: LD_ADDR_VAR 0 4
63096: PUSH
63097: LD_INT 22
63099: PUSH
63100: LD_VAR 0 5
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 60
63114: PUSH
63115: EMPTY
63116: LIST
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 91
63124: PUSH
63125: LD_VAR 0 8
63129: PUSH
63130: LD_INT 6
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: LD_INT 25
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 25
63153: PUSH
63154: LD_INT 16
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: PPUSH
63172: CALL_OW 69
63176: PUSH
63177: LD_VAR 0 8
63181: PPUSH
63182: CALL_OW 313
63186: PPUSH
63187: LD_INT 3
63189: PUSH
63190: LD_INT 60
63192: PUSH
63193: EMPTY
63194: LIST
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 25
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 25
63215: PUSH
63216: LD_INT 16
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: LIST
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PPUSH
63232: CALL_OW 72
63236: UNION
63237: ST_TO_ADDR
// if tmp then
63238: LD_VAR 0 4
63242: IFFALSE 63322
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63244: LD_ADDR_VAR 0 4
63248: PUSH
63249: LD_VAR 0 4
63253: PPUSH
63254: LD_INT 3
63256: PPUSH
63257: CALL 39611 0 2
63261: ST_TO_ADDR
// for j in tmp do
63262: LD_ADDR_VAR 0 2
63266: PUSH
63267: LD_VAR 0 4
63271: PUSH
63272: FOR_IN
63273: IFFALSE 63316
// begin if IsInUnit ( j ) then
63275: LD_VAR 0 2
63279: PPUSH
63280: CALL_OW 310
63284: IFFALSE 63295
// ComExit ( j ) ;
63286: LD_VAR 0 2
63290: PPUSH
63291: CALL 39694 0 1
// AddComCollect ( j , x , y ) ;
63295: LD_VAR 0 2
63299: PPUSH
63300: LD_VAR 0 6
63304: PPUSH
63305: LD_VAR 0 7
63309: PPUSH
63310: CALL_OW 177
// end ;
63314: GO 63272
63316: POP
63317: POP
// exit ;
63318: POP
63319: POP
63320: GO 63557
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63322: LD_ADDR_VAR 0 4
63326: PUSH
63327: LD_INT 22
63329: PUSH
63330: LD_VAR 0 5
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 91
63341: PUSH
63342: LD_VAR 0 8
63346: PUSH
63347: LD_INT 8
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 2
63357: PUSH
63358: LD_INT 34
63360: PUSH
63361: LD_INT 12
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 34
63370: PUSH
63371: LD_INT 51
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 34
63380: PUSH
63381: LD_INT 32
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 34
63390: PUSH
63391: LD_INT 89
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PPUSH
63410: CALL_OW 69
63414: ST_TO_ADDR
// if tmp then
63415: LD_VAR 0 4
63419: IFFALSE 63553
// begin for j in tmp do
63421: LD_ADDR_VAR 0 2
63425: PUSH
63426: LD_VAR 0 4
63430: PUSH
63431: FOR_IN
63432: IFFALSE 63551
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63434: LD_VAR 0 2
63438: PPUSH
63439: CALL_OW 262
63443: PUSH
63444: LD_INT 3
63446: EQUAL
63447: IFTRUE 63464
63449: PUSH
63450: LD_VAR 0 2
63454: PPUSH
63455: CALL_OW 261
63459: PUSH
63460: LD_INT 20
63462: GREATER
63463: OR
63464: IFFALSE 63478
63466: PUSH
63467: LD_VAR 0 2
63471: PPUSH
63472: CALL_OW 314
63476: NOT
63477: AND
63478: IFFALSE 63508
63480: PUSH
63481: LD_VAR 0 2
63485: PPUSH
63486: CALL_OW 263
63490: PUSH
63491: LD_INT 1
63493: NONEQUAL
63494: IFTRUE 63507
63496: PUSH
63497: LD_VAR 0 2
63501: PPUSH
63502: CALL_OW 311
63506: OR
63507: AND
63508: IFFALSE 63549
// begin ComCollect ( j , x , y ) ;
63510: LD_VAR 0 2
63514: PPUSH
63515: LD_VAR 0 6
63519: PPUSH
63520: LD_VAR 0 7
63524: PPUSH
63525: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63529: LD_VAR 0 2
63533: PPUSH
63534: LD_VAR 0 8
63538: PPUSH
63539: CALL_OW 172
// exit ;
63543: POP
63544: POP
63545: POP
63546: POP
63547: GO 63557
// end ;
63549: GO 63431
63551: POP
63552: POP
// end ; end ;
63553: GO 62918
63555: POP
63556: POP
// end ; end_of_file end_of_file
63557: PPOPN 9
63559: END
// export function SOS_UnitDestroyed ( un ) ; begin
63560: LD_INT 0
63562: PPUSH
// ComRadiation ( un ) ;
63563: LD_VAR 0 1
63567: PPUSH
63568: CALL 64649 0 1
// end ;
63572: LD_VAR 0 2
63576: RET
// export function SOS_UnitKamikazed ( un ) ; begin
63577: LD_INT 0
63579: PPUSH
// ComRadiation ( un ) ;
63580: LD_VAR 0 1
63584: PPUSH
63585: CALL 64649 0 1
// end ;
63589: LD_VAR 0 2
63593: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63594: LD_INT 0
63596: PPUSH
// end ;
63597: LD_VAR 0 4
63601: RET
// export function SOS_Command ( cmd ) ; begin
63602: LD_INT 0
63604: PPUSH
// end ;
63605: LD_VAR 0 2
63609: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63610: LD_INT 0
63612: PPUSH
// end ;
63613: LD_VAR 0 6
63617: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
63618: LD_INT 0
63620: PPUSH
63621: PPUSH
63622: PPUSH
63623: PPUSH
// if not vehicle or not factory then
63624: LD_VAR 0 1
63628: NOT
63629: IFTRUE 63638
63631: PUSH
63632: LD_VAR 0 2
63636: NOT
63637: OR
63638: IFFALSE 63642
// exit ;
63640: GO 64224
// if not factoryWaypoints then
63642: LD_EXP 73
63646: NOT
63647: IFFALSE 63651
// exit ;
63649: GO 64224
// for i := 1 to Count ( factoryWaypoints ) do
63651: LD_ADDR_VAR 0 4
63655: PUSH
63656: DOUBLE
63657: LD_INT 1
63659: DEC
63660: ST_TO_ADDR
63661: LD_EXP 73
63665: PPUSH
63666: CALL 3364 0 1
63670: PUSH
63671: FOR_TO
63672: IFFALSE 64222
// if factoryWaypoints [ i ] [ 2 ] = factory then
63674: LD_EXP 73
63678: PUSH
63679: LD_VAR 0 4
63683: ARRAY
63684: PUSH
63685: LD_INT 2
63687: ARRAY
63688: PUSH
63689: LD_VAR 0 2
63693: EQUAL
63694: IFFALSE 64220
// begin if GetControl ( vehicle ) = control_manual then
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 263
63705: PUSH
63706: LD_INT 1
63708: EQUAL
63709: IFFALSE 64073
// begin driver := IsDrivenBy ( vehicle ) ;
63711: LD_ADDR_VAR 0 5
63715: PUSH
63716: LD_VAR 0 1
63720: PPUSH
63721: CALL_OW 311
63725: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
63726: LD_VAR 0 5
63730: PUSH
63731: LD_EXP 74
63735: IN
63736: IFTRUE 63750
63738: PUSH
63739: LD_VAR 0 1
63743: PUSH
63744: LD_EXP 74
63748: IN
63749: OR
63750: IFFALSE 63756
// exit ;
63752: POP
63753: POP
63754: GO 64224
// if not HasTask ( driver ) then
63756: LD_VAR 0 5
63760: PPUSH
63761: CALL_OW 314
63765: NOT
63766: IFFALSE 64071
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
63768: LD_ADDR_EXP 74
63772: PUSH
63773: LD_EXP 74
63777: PPUSH
63778: LD_VAR 0 5
63782: PPUSH
63783: CALL 39296 0 2
63787: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
63788: LD_ADDR_EXP 74
63792: PUSH
63793: LD_EXP 74
63797: PPUSH
63798: LD_VAR 0 1
63802: PPUSH
63803: CALL 39296 0 2
63807: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
63808: LD_ADDR_VAR 0 6
63812: PUSH
63813: LD_EXP 73
63817: PUSH
63818: LD_VAR 0 4
63822: ARRAY
63823: PUSH
63824: LD_INT 3
63826: ARRAY
63827: PPUSH
63828: LD_EXP 73
63832: PUSH
63833: LD_VAR 0 4
63837: ARRAY
63838: PUSH
63839: LD_INT 4
63841: ARRAY
63842: PPUSH
63843: CALL_OW 428
63847: ST_TO_ADDR
// if hex then
63848: LD_VAR 0 6
63852: IFFALSE 63870
// ComMoveUnit ( driver , hex ) else
63854: LD_VAR 0 5
63858: PPUSH
63859: LD_VAR 0 6
63863: PPUSH
63864: CALL_OW 112
63868: GO 63954
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
63870: LD_VAR 0 1
63874: PPUSH
63875: LD_EXP 73
63879: PUSH
63880: LD_VAR 0 4
63884: ARRAY
63885: PUSH
63886: LD_INT 3
63888: ARRAY
63889: PPUSH
63890: LD_EXP 73
63894: PUSH
63895: LD_VAR 0 4
63899: ARRAY
63900: PUSH
63901: LD_INT 4
63903: ARRAY
63904: PPUSH
63905: CALL_OW 297
63909: PUSH
63910: LD_INT 0
63912: GREATER
63913: IFFALSE 63954
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
63915: LD_VAR 0 5
63919: PPUSH
63920: LD_EXP 73
63924: PUSH
63925: LD_VAR 0 4
63929: ARRAY
63930: PUSH
63931: LD_INT 3
63933: ARRAY
63934: PPUSH
63935: LD_EXP 73
63939: PUSH
63940: LD_VAR 0 4
63944: ARRAY
63945: PUSH
63946: LD_INT 4
63948: ARRAY
63949: PPUSH
63950: CALL_OW 111
// AddComExitVehicle ( driver ) ;
63954: LD_VAR 0 5
63958: PPUSH
63959: CALL_OW 181
// if Multiplayer then
63963: LD_OWVAR 4
63967: IFFALSE 64016
// begin repeat wait ( 10 ) ;
63969: LD_INT 10
63971: PPUSH
63972: CALL_OW 67
// until not IsInUnit ( driver ) ;
63976: LD_VAR 0 5
63980: PPUSH
63981: CALL_OW 310
63985: NOT
63986: IFFALSE 63969
// if not HasTask ( driver ) then
63988: LD_VAR 0 5
63992: PPUSH
63993: CALL_OW 314
63997: NOT
63998: IFFALSE 64014
// ComEnterUnit ( driver , factory ) ;
64000: LD_VAR 0 5
64004: PPUSH
64005: LD_VAR 0 2
64009: PPUSH
64010: CALL_OW 120
// end else
64014: GO 64030
// AddComEnterUnit ( driver , factory ) ;
64016: LD_VAR 0 5
64020: PPUSH
64021: LD_VAR 0 2
64025: PPUSH
64026: CALL_OW 180
// wait ( 0 0$1 ) ;
64030: LD_INT 35
64032: PPUSH
64033: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
64037: LD_ADDR_EXP 74
64041: PUSH
64042: LD_EXP 74
64046: PUSH
64047: LD_VAR 0 5
64051: DIFF
64052: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
64053: LD_ADDR_EXP 74
64057: PUSH
64058: LD_EXP 74
64062: PUSH
64063: LD_VAR 0 1
64067: DIFF
64068: ST_TO_ADDR
// break ;
64069: GO 64222
// end ; end else
64071: GO 64220
// if GetControl ( vehicle ) = control_remote then
64073: LD_VAR 0 1
64077: PPUSH
64078: CALL_OW 263
64082: PUSH
64083: LD_INT 2
64085: EQUAL
64086: IFFALSE 64172
// begin wait ( 0 0$2 ) ;
64088: LD_INT 70
64090: PPUSH
64091: CALL_OW 67
// repeat wait ( 10 ) ;
64095: LD_INT 10
64097: PPUSH
64098: CALL_OW 67
// Connect ( vehicle ) ;
64102: LD_VAR 0 1
64106: PPUSH
64107: CALL 9608 0 1
// until IsControledBy ( vehicle ) ;
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 312
64120: IFFALSE 64095
// wait ( 10 ) ;
64122: LD_INT 10
64124: PPUSH
64125: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64129: LD_VAR 0 1
64133: PPUSH
64134: LD_EXP 73
64138: PUSH
64139: LD_VAR 0 4
64143: ARRAY
64144: PUSH
64145: LD_INT 3
64147: ARRAY
64148: PPUSH
64149: LD_EXP 73
64153: PUSH
64154: LD_VAR 0 4
64158: ARRAY
64159: PUSH
64160: LD_INT 4
64162: ARRAY
64163: PPUSH
64164: CALL_OW 111
// break ;
64168: GO 64222
// end else
64170: GO 64220
// begin wait ( 0 0$3 ) ;
64172: LD_INT 105
64174: PPUSH
64175: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64179: LD_VAR 0 1
64183: PPUSH
64184: LD_EXP 73
64188: PUSH
64189: LD_VAR 0 4
64193: ARRAY
64194: PUSH
64195: LD_INT 3
64197: ARRAY
64198: PPUSH
64199: LD_EXP 73
64203: PUSH
64204: LD_VAR 0 4
64208: ARRAY
64209: PUSH
64210: LD_INT 4
64212: ARRAY
64213: PPUSH
64214: CALL_OW 111
// break ;
64218: GO 64222
// end ; end ;
64220: GO 63671
64222: POP
64223: POP
// end ;
64224: LD_VAR 0 3
64228: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64229: LD_INT 0
64231: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64232: LD_VAR 0 1
64236: PUSH
64237: LD_INT 250
64239: EQUAL
64240: IFFALSE 64257
64242: PUSH
64243: LD_VAR 0 2
64247: PPUSH
64248: CALL_OW 264
64252: PUSH
64253: LD_INT 81
64255: EQUAL
64256: AND
64257: IFFALSE 64278
// MinerPlaceMine ( unit , x , y ) ;
64259: LD_VAR 0 2
64263: PPUSH
64264: LD_VAR 0 4
64268: PPUSH
64269: LD_VAR 0 5
64273: PPUSH
64274: CALL 67410 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64278: LD_VAR 0 1
64282: PUSH
64283: LD_INT 251
64285: EQUAL
64286: IFFALSE 64303
64288: PUSH
64289: LD_VAR 0 2
64293: PPUSH
64294: CALL_OW 264
64298: PUSH
64299: LD_INT 81
64301: EQUAL
64302: AND
64303: IFFALSE 64324
// MinerDetonateMine ( unit , x , y ) ;
64305: LD_VAR 0 2
64309: PPUSH
64310: LD_VAR 0 4
64314: PPUSH
64315: LD_VAR 0 5
64319: PPUSH
64320: CALL 67689 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64324: LD_VAR 0 1
64328: PUSH
64329: LD_INT 252
64331: EQUAL
64332: IFFALSE 64349
64334: PUSH
64335: LD_VAR 0 2
64339: PPUSH
64340: CALL_OW 264
64344: PUSH
64345: LD_INT 81
64347: EQUAL
64348: AND
64349: IFFALSE 64370
// MinerCreateMinefield ( unit , x , y ) ;
64351: LD_VAR 0 2
64355: PPUSH
64356: LD_VAR 0 4
64360: PPUSH
64361: LD_VAR 0 5
64365: PPUSH
64366: CALL 68108 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64370: LD_VAR 0 1
64374: PUSH
64375: LD_INT 253
64377: EQUAL
64378: IFFALSE 64395
64380: PUSH
64381: LD_VAR 0 2
64385: PPUSH
64386: CALL_OW 257
64390: PUSH
64391: LD_INT 5
64393: EQUAL
64394: AND
64395: IFFALSE 64416
// ComBinocular ( unit , x , y ) ;
64397: LD_VAR 0 2
64401: PPUSH
64402: LD_VAR 0 4
64406: PPUSH
64407: LD_VAR 0 5
64411: PPUSH
64412: CALL 68483 0 3
// if selectedUnit then
64416: LD_VAR 0 3
64420: IFFALSE 64480
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64422: LD_VAR 0 1
64426: PUSH
64427: LD_INT 254
64429: EQUAL
64430: IFFALSE 64447
64432: PUSH
64433: LD_VAR 0 2
64437: PPUSH
64438: CALL_OW 264
64442: PUSH
64443: LD_INT 99
64445: EQUAL
64446: AND
64447: IFFALSE 64464
64449: PUSH
64450: LD_VAR 0 3
64454: PPUSH
64455: CALL_OW 263
64459: PUSH
64460: LD_INT 3
64462: EQUAL
64463: AND
64464: IFFALSE 64480
// HackDestroyVehicle ( unit , selectedUnit ) ;
64466: LD_VAR 0 2
64470: PPUSH
64471: LD_VAR 0 3
64475: PPUSH
64476: CALL 66770 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64480: LD_VAR 0 1
64484: PUSH
64485: LD_INT 255
64487: EQUAL
64488: IFFALSE 64512
64490: PUSH
64491: LD_VAR 0 2
64495: PPUSH
64496: CALL_OW 264
64500: PUSH
64501: LD_INT 14
64503: PUSH
64504: LD_INT 53
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: IN
64511: AND
64512: IFFALSE 64530
64514: PUSH
64515: LD_VAR 0 4
64519: PPUSH
64520: LD_VAR 0 5
64524: PPUSH
64525: CALL_OW 488
64529: AND
64530: IFFALSE 64554
// CutTreeXYR ( unit , x , y , 12 ) ;
64532: LD_VAR 0 2
64536: PPUSH
64537: LD_VAR 0 4
64541: PPUSH
64542: LD_VAR 0 5
64546: PPUSH
64547: LD_INT 12
64549: PPUSH
64550: CALL 64745 0 4
// if cmd = 256 then
64554: LD_VAR 0 1
64558: PUSH
64559: LD_INT 256
64561: EQUAL
64562: IFFALSE 64583
// SetFactoryWaypoint ( unit , x , y ) ;
64564: LD_VAR 0 2
64568: PPUSH
64569: LD_VAR 0 4
64573: PPUSH
64574: LD_VAR 0 5
64578: PPUSH
64579: CALL 62105 0 3
// if cmd = 257 then
64583: LD_VAR 0 1
64587: PUSH
64588: LD_INT 257
64590: EQUAL
64591: IFFALSE 64612
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64593: LD_VAR 0 2
64597: PPUSH
64598: LD_VAR 0 4
64602: PPUSH
64603: LD_VAR 0 5
64607: PPUSH
64608: CALL 62601 0 3
// if cmd = 258 then
64612: LD_VAR 0 1
64616: PUSH
64617: LD_INT 258
64619: EQUAL
64620: IFFALSE 64644
// BurnTreeXYR ( unit , x , y , 8 ) ;
64622: LD_VAR 0 2
64626: PPUSH
64627: LD_VAR 0 4
64631: PPUSH
64632: LD_VAR 0 5
64636: PPUSH
64637: LD_INT 8
64639: PPUSH
64640: CALL 65145 0 4
// end ;
64644: LD_VAR 0 6
64648: RET
// export function ComRadiation ( un ) ; var eff ; begin
64649: LD_INT 0
64651: PPUSH
64652: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
64653: LD_VAR 0 1
64657: PPUSH
64658: CALL_OW 264
64662: PUSH
64663: LD_INT 91
64665: NONEQUAL
64666: IFFALSE 64670
// exit ;
64668: GO 64740
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64670: LD_INT 68
64672: PPUSH
64673: LD_VAR 0 1
64677: PPUSH
64678: CALL_OW 255
64682: PPUSH
64683: CALL_OW 321
64687: PUSH
64688: LD_INT 2
64690: EQUAL
64691: IFFALSE 64703
// eff := 50 else
64693: LD_ADDR_VAR 0 3
64697: PUSH
64698: LD_INT 50
64700: ST_TO_ADDR
64701: GO 64711
// eff := 25 ;
64703: LD_ADDR_VAR 0 3
64707: PUSH
64708: LD_INT 25
64710: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64711: LD_VAR 0 1
64715: PPUSH
64716: CALL_OW 250
64720: PPUSH
64721: LD_VAR 0 1
64725: PPUSH
64726: CALL_OW 251
64730: PPUSH
64731: LD_VAR 0 3
64735: PPUSH
64736: CALL_OW 495
// end ;
64740: LD_VAR 0 2
64744: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64745: LD_INT 0
64747: PPUSH
64748: PPUSH
64749: PPUSH
64750: PPUSH
64751: PPUSH
64752: PPUSH
64753: PPUSH
64754: PPUSH
64755: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
64756: LD_VAR 0 1
64760: PPUSH
64761: CALL_OW 302
64765: NOT
64766: IFTRUE 64785
64768: PUSH
64769: LD_VAR 0 2
64773: PPUSH
64774: LD_VAR 0 3
64778: PPUSH
64779: CALL_OW 488
64783: NOT
64784: OR
64785: IFTRUE 64794
64787: PUSH
64788: LD_VAR 0 4
64792: NOT
64793: OR
64794: IFFALSE 64798
// exit ;
64796: GO 65140
// list := [ ] ;
64798: LD_ADDR_VAR 0 13
64802: PUSH
64803: EMPTY
64804: ST_TO_ADDR
// if x - r < 0 then
64805: LD_VAR 0 2
64809: PUSH
64810: LD_VAR 0 4
64814: MINUS
64815: PUSH
64816: LD_INT 0
64818: LESS
64819: IFFALSE 64831
// min_x := 0 else
64821: LD_ADDR_VAR 0 7
64825: PUSH
64826: LD_INT 0
64828: ST_TO_ADDR
64829: GO 64847
// min_x := x - r ;
64831: LD_ADDR_VAR 0 7
64835: PUSH
64836: LD_VAR 0 2
64840: PUSH
64841: LD_VAR 0 4
64845: MINUS
64846: ST_TO_ADDR
// if y - r < 0 then
64847: LD_VAR 0 3
64851: PUSH
64852: LD_VAR 0 4
64856: MINUS
64857: PUSH
64858: LD_INT 0
64860: LESS
64861: IFFALSE 64873
// min_y := 0 else
64863: LD_ADDR_VAR 0 8
64867: PUSH
64868: LD_INT 0
64870: ST_TO_ADDR
64871: GO 64889
// min_y := y - r ;
64873: LD_ADDR_VAR 0 8
64877: PUSH
64878: LD_VAR 0 3
64882: PUSH
64883: LD_VAR 0 4
64887: MINUS
64888: ST_TO_ADDR
// max_x := x + r ;
64889: LD_ADDR_VAR 0 9
64893: PUSH
64894: LD_VAR 0 2
64898: PUSH
64899: LD_VAR 0 4
64903: PLUS
64904: ST_TO_ADDR
// max_y := y + r ;
64905: LD_ADDR_VAR 0 10
64909: PUSH
64910: LD_VAR 0 3
64914: PUSH
64915: LD_VAR 0 4
64919: PLUS
64920: ST_TO_ADDR
// for _x = min_x to max_x do
64921: LD_ADDR_VAR 0 11
64925: PUSH
64926: DOUBLE
64927: LD_VAR 0 7
64931: DEC
64932: ST_TO_ADDR
64933: LD_VAR 0 9
64937: PUSH
64938: FOR_TO
64939: IFFALSE 65058
// for _y = min_y to max_y do
64941: LD_ADDR_VAR 0 12
64945: PUSH
64946: DOUBLE
64947: LD_VAR 0 8
64951: DEC
64952: ST_TO_ADDR
64953: LD_VAR 0 10
64957: PUSH
64958: FOR_TO
64959: IFFALSE 65054
// begin if not ValidHex ( _x , _y ) then
64961: LD_VAR 0 11
64965: PPUSH
64966: LD_VAR 0 12
64970: PPUSH
64971: CALL_OW 488
64975: NOT
64976: IFFALSE 64980
// continue ;
64978: GO 64958
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64980: LD_VAR 0 11
64984: PPUSH
64985: LD_VAR 0 12
64989: PPUSH
64990: CALL_OW 351
64994: IFFALSE 65012
64996: PUSH
64997: LD_VAR 0 11
65001: PPUSH
65002: LD_VAR 0 12
65006: PPUSH
65007: CALL_OW 554
65011: AND
65012: IFFALSE 65052
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65014: LD_ADDR_VAR 0 13
65018: PUSH
65019: LD_VAR 0 13
65023: PPUSH
65024: LD_VAR 0 13
65028: PUSH
65029: LD_INT 1
65031: PLUS
65032: PPUSH
65033: LD_VAR 0 11
65037: PUSH
65038: LD_VAR 0 12
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PPUSH
65047: CALL_OW 2
65051: ST_TO_ADDR
// end ;
65052: GO 64958
65054: POP
65055: POP
65056: GO 64938
65058: POP
65059: POP
// if not list then
65060: LD_VAR 0 13
65064: NOT
65065: IFFALSE 65069
// exit ;
65067: GO 65140
// for i in list do
65069: LD_ADDR_VAR 0 6
65073: PUSH
65074: LD_VAR 0 13
65078: PUSH
65079: FOR_IN
65080: IFFALSE 65138
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65082: LD_VAR 0 1
65086: PPUSH
65087: LD_STRING M
65089: PUSH
65090: LD_VAR 0 6
65094: PUSH
65095: LD_INT 1
65097: ARRAY
65098: PUSH
65099: LD_VAR 0 6
65103: PUSH
65104: LD_INT 2
65106: ARRAY
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: PUSH
65129: EMPTY
65130: LIST
65131: PPUSH
65132: CALL_OW 447
65136: GO 65079
65138: POP
65139: POP
// end ;
65140: LD_VAR 0 5
65144: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
65145: LD_INT 0
65147: PPUSH
65148: PPUSH
65149: PPUSH
65150: PPUSH
65151: PPUSH
65152: PPUSH
65153: PPUSH
65154: PPUSH
65155: PPUSH
65156: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
65157: LD_VAR 0 1
65161: PPUSH
65162: CALL_OW 302
65166: NOT
65167: IFTRUE 65186
65169: PUSH
65170: LD_VAR 0 2
65174: PPUSH
65175: LD_VAR 0 3
65179: PPUSH
65180: CALL_OW 488
65184: NOT
65185: OR
65186: IFTRUE 65195
65188: PUSH
65189: LD_VAR 0 4
65193: NOT
65194: OR
65195: IFFALSE 65199
// exit ;
65197: GO 65716
// list := [ ] ;
65199: LD_ADDR_VAR 0 13
65203: PUSH
65204: EMPTY
65205: ST_TO_ADDR
// if x - r < 0 then
65206: LD_VAR 0 2
65210: PUSH
65211: LD_VAR 0 4
65215: MINUS
65216: PUSH
65217: LD_INT 0
65219: LESS
65220: IFFALSE 65232
// min_x := 0 else
65222: LD_ADDR_VAR 0 7
65226: PUSH
65227: LD_INT 0
65229: ST_TO_ADDR
65230: GO 65248
// min_x := x - r ;
65232: LD_ADDR_VAR 0 7
65236: PUSH
65237: LD_VAR 0 2
65241: PUSH
65242: LD_VAR 0 4
65246: MINUS
65247: ST_TO_ADDR
// if y - r < 0 then
65248: LD_VAR 0 3
65252: PUSH
65253: LD_VAR 0 4
65257: MINUS
65258: PUSH
65259: LD_INT 0
65261: LESS
65262: IFFALSE 65274
// min_y := 0 else
65264: LD_ADDR_VAR 0 8
65268: PUSH
65269: LD_INT 0
65271: ST_TO_ADDR
65272: GO 65290
// min_y := y - r ;
65274: LD_ADDR_VAR 0 8
65278: PUSH
65279: LD_VAR 0 3
65283: PUSH
65284: LD_VAR 0 4
65288: MINUS
65289: ST_TO_ADDR
// max_x := x + r ;
65290: LD_ADDR_VAR 0 9
65294: PUSH
65295: LD_VAR 0 2
65299: PUSH
65300: LD_VAR 0 4
65304: PLUS
65305: ST_TO_ADDR
// max_y := y + r ;
65306: LD_ADDR_VAR 0 10
65310: PUSH
65311: LD_VAR 0 3
65315: PUSH
65316: LD_VAR 0 4
65320: PLUS
65321: ST_TO_ADDR
// for _x = min_x to max_x do
65322: LD_ADDR_VAR 0 11
65326: PUSH
65327: DOUBLE
65328: LD_VAR 0 7
65332: DEC
65333: ST_TO_ADDR
65334: LD_VAR 0 9
65338: PUSH
65339: FOR_TO
65340: IFFALSE 65459
// for _y = min_y to max_y do
65342: LD_ADDR_VAR 0 12
65346: PUSH
65347: DOUBLE
65348: LD_VAR 0 8
65352: DEC
65353: ST_TO_ADDR
65354: LD_VAR 0 10
65358: PUSH
65359: FOR_TO
65360: IFFALSE 65455
// begin if not ValidHex ( _x , _y ) then
65362: LD_VAR 0 11
65366: PPUSH
65367: LD_VAR 0 12
65371: PPUSH
65372: CALL_OW 488
65376: NOT
65377: IFFALSE 65381
// continue ;
65379: GO 65359
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65381: LD_VAR 0 11
65385: PPUSH
65386: LD_VAR 0 12
65390: PPUSH
65391: CALL_OW 351
65395: IFFALSE 65413
65397: PUSH
65398: LD_VAR 0 11
65402: PPUSH
65403: LD_VAR 0 12
65407: PPUSH
65408: CALL_OW 554
65412: AND
65413: IFFALSE 65453
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65415: LD_ADDR_VAR 0 13
65419: PUSH
65420: LD_VAR 0 13
65424: PPUSH
65425: LD_VAR 0 13
65429: PUSH
65430: LD_INT 1
65432: PLUS
65433: PPUSH
65434: LD_VAR 0 11
65438: PUSH
65439: LD_VAR 0 12
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PPUSH
65448: CALL_OW 2
65452: ST_TO_ADDR
// end ;
65453: GO 65359
65455: POP
65456: POP
65457: GO 65339
65459: POP
65460: POP
// if not list then
65461: LD_VAR 0 13
65465: NOT
65466: IFFALSE 65470
// exit ;
65468: GO 65716
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
65470: LD_ADDR_VAR 0 13
65474: PUSH
65475: LD_VAR 0 1
65479: PPUSH
65480: LD_VAR 0 13
65484: PPUSH
65485: LD_INT 1
65487: PPUSH
65488: LD_INT 1
65490: PPUSH
65491: CALL 6736 0 4
65495: ST_TO_ADDR
// ComStop ( flame ) ;
65496: LD_VAR 0 1
65500: PPUSH
65501: CALL_OW 141
// for i in list do
65505: LD_ADDR_VAR 0 6
65509: PUSH
65510: LD_VAR 0 13
65514: PUSH
65515: FOR_IN
65516: IFFALSE 65547
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
65518: LD_VAR 0 1
65522: PPUSH
65523: LD_VAR 0 6
65527: PUSH
65528: LD_INT 1
65530: ARRAY
65531: PPUSH
65532: LD_VAR 0 6
65536: PUSH
65537: LD_INT 2
65539: ARRAY
65540: PPUSH
65541: CALL_OW 176
65545: GO 65515
65547: POP
65548: POP
// repeat wait ( 0 0$1 ) ;
65549: LD_INT 35
65551: PPUSH
65552: CALL_OW 67
// task := GetTaskList ( flame ) ;
65556: LD_ADDR_VAR 0 14
65560: PUSH
65561: LD_VAR 0 1
65565: PPUSH
65566: CALL_OW 437
65570: ST_TO_ADDR
// if not task then
65571: LD_VAR 0 14
65575: NOT
65576: IFFALSE 65580
// exit ;
65578: GO 65716
// if task [ 1 ] [ 1 ] <> | then
65580: LD_VAR 0 14
65584: PUSH
65585: LD_INT 1
65587: ARRAY
65588: PUSH
65589: LD_INT 1
65591: ARRAY
65592: PUSH
65593: LD_STRING |
65595: NONEQUAL
65596: IFFALSE 65600
// exit ;
65598: GO 65716
// _x := task [ 1 ] [ 2 ] ;
65600: LD_ADDR_VAR 0 11
65604: PUSH
65605: LD_VAR 0 14
65609: PUSH
65610: LD_INT 1
65612: ARRAY
65613: PUSH
65614: LD_INT 2
65616: ARRAY
65617: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
65618: LD_ADDR_VAR 0 12
65622: PUSH
65623: LD_VAR 0 14
65627: PUSH
65628: LD_INT 1
65630: ARRAY
65631: PUSH
65632: LD_INT 3
65634: ARRAY
65635: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
65636: LD_VAR 0 11
65640: PPUSH
65641: LD_VAR 0 12
65645: PPUSH
65646: CALL_OW 351
65650: NOT
65651: IFTRUE 65670
65653: PUSH
65654: LD_VAR 0 11
65658: PPUSH
65659: LD_VAR 0 12
65663: PPUSH
65664: CALL_OW 554
65668: NOT
65669: OR
65670: IFFALSE 65704
// begin task := Delete ( task , 1 ) ;
65672: LD_ADDR_VAR 0 14
65676: PUSH
65677: LD_VAR 0 14
65681: PPUSH
65682: LD_INT 1
65684: PPUSH
65685: CALL_OW 3
65689: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
65690: LD_VAR 0 1
65694: PPUSH
65695: LD_VAR 0 14
65699: PPUSH
65700: CALL_OW 446
// end ; until not HasTask ( flame ) ;
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL_OW 314
65713: NOT
65714: IFFALSE 65549
// end ;
65716: LD_VAR 0 5
65720: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65721: LD_EXP 77
65725: NOT
65726: IFFALSE 65776
65728: GO 65730
65730: DISABLE
// begin initHack := true ;
65731: LD_ADDR_EXP 77
65735: PUSH
65736: LD_INT 1
65738: ST_TO_ADDR
// hackTanks := [ ] ;
65739: LD_ADDR_EXP 78
65743: PUSH
65744: EMPTY
65745: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65746: LD_ADDR_EXP 79
65750: PUSH
65751: EMPTY
65752: ST_TO_ADDR
// hackLimit := 3 ;
65753: LD_ADDR_EXP 80
65757: PUSH
65758: LD_INT 3
65760: ST_TO_ADDR
// hackDist := 12 ;
65761: LD_ADDR_EXP 81
65765: PUSH
65766: LD_INT 12
65768: ST_TO_ADDR
// hackCounter := [ ] ;
65769: LD_ADDR_EXP 82
65773: PUSH
65774: EMPTY
65775: ST_TO_ADDR
// end ;
65776: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65777: LD_EXP 77
65781: IFFALSE 65799
65783: PUSH
65784: LD_INT 34
65786: PUSH
65787: LD_INT 99
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PPUSH
65794: CALL_OW 69
65798: AND
65799: IFFALSE 66052
65801: GO 65803
65803: DISABLE
65804: LD_INT 0
65806: PPUSH
65807: PPUSH
// begin enable ;
65808: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65809: LD_ADDR_VAR 0 1
65813: PUSH
65814: LD_INT 34
65816: PUSH
65817: LD_INT 99
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PPUSH
65824: CALL_OW 69
65828: PUSH
65829: FOR_IN
65830: IFFALSE 66050
// begin if not i in hackTanks then
65832: LD_VAR 0 1
65836: PUSH
65837: LD_EXP 78
65841: IN
65842: NOT
65843: IFFALSE 65926
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65845: LD_ADDR_EXP 78
65849: PUSH
65850: LD_EXP 78
65854: PPUSH
65855: LD_EXP 78
65859: PUSH
65860: LD_INT 1
65862: PLUS
65863: PPUSH
65864: LD_VAR 0 1
65868: PPUSH
65869: CALL_OW 1
65873: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65874: LD_ADDR_EXP 79
65878: PUSH
65879: LD_EXP 79
65883: PPUSH
65884: LD_EXP 79
65888: PUSH
65889: LD_INT 1
65891: PLUS
65892: PPUSH
65893: EMPTY
65894: PPUSH
65895: CALL_OW 1
65899: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65900: LD_ADDR_EXP 82
65904: PUSH
65905: LD_EXP 82
65909: PPUSH
65910: LD_EXP 82
65914: PUSH
65915: LD_INT 1
65917: PLUS
65918: PPUSH
65919: EMPTY
65920: PPUSH
65921: CALL_OW 1
65925: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65926: LD_VAR 0 1
65930: PPUSH
65931: CALL_OW 302
65935: NOT
65936: IFFALSE 65949
// begin HackUnlinkAll ( i ) ;
65938: LD_VAR 0 1
65942: PPUSH
65943: CALL 66055 0 1
// continue ;
65947: GO 65829
// end ; HackCheckCapturedStatus ( i ) ;
65949: LD_VAR 0 1
65953: PPUSH
65954: CALL 66500 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65958: LD_ADDR_VAR 0 2
65962: PUSH
65963: LD_INT 81
65965: PUSH
65966: LD_VAR 0 1
65970: PPUSH
65971: CALL_OW 255
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 33
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 91
65992: PUSH
65993: LD_VAR 0 1
65997: PUSH
65998: LD_EXP 81
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 50
66010: PUSH
66011: EMPTY
66012: LIST
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: PPUSH
66020: CALL_OW 69
66024: ST_TO_ADDR
// if not tmp then
66025: LD_VAR 0 2
66029: NOT
66030: IFFALSE 66034
// continue ;
66032: GO 65829
// HackLink ( i , tmp ) ;
66034: LD_VAR 0 1
66038: PPUSH
66039: LD_VAR 0 2
66043: PPUSH
66044: CALL 66191 0 2
// end ;
66048: GO 65829
66050: POP
66051: POP
// end ;
66052: PPOPN 2
66054: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66055: LD_INT 0
66057: PPUSH
66058: PPUSH
66059: PPUSH
// if not hack in hackTanks then
66060: LD_VAR 0 1
66064: PUSH
66065: LD_EXP 78
66069: IN
66070: NOT
66071: IFFALSE 66075
// exit ;
66073: GO 66186
// index := GetElementIndex ( hackTanks , hack ) ;
66075: LD_ADDR_VAR 0 4
66079: PUSH
66080: LD_EXP 78
66084: PPUSH
66085: LD_VAR 0 1
66089: PPUSH
66090: CALL 6031 0 2
66094: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66095: LD_EXP 79
66099: PUSH
66100: LD_VAR 0 4
66104: ARRAY
66105: IFFALSE 66186
// begin for i in hackTanksCaptured [ index ] do
66107: LD_ADDR_VAR 0 3
66111: PUSH
66112: LD_EXP 79
66116: PUSH
66117: LD_VAR 0 4
66121: ARRAY
66122: PUSH
66123: FOR_IN
66124: IFFALSE 66150
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66126: LD_VAR 0 3
66130: PUSH
66131: LD_INT 1
66133: ARRAY
66134: PPUSH
66135: LD_VAR 0 3
66139: PUSH
66140: LD_INT 2
66142: ARRAY
66143: PPUSH
66144: CALL_OW 235
66148: GO 66123
66150: POP
66151: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66152: LD_ADDR_EXP 79
66156: PUSH
66157: LD_EXP 79
66161: PPUSH
66162: LD_VAR 0 4
66166: PPUSH
66167: EMPTY
66168: PPUSH
66169: CALL_OW 1
66173: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66174: LD_VAR 0 1
66178: PPUSH
66179: LD_INT 0
66181: PPUSH
66182: CALL_OW 505
// end ; end ;
66186: LD_VAR 0 2
66190: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66191: LD_INT 0
66193: PPUSH
66194: PPUSH
66195: PPUSH
// if not hack in hackTanks or not vehicles then
66196: LD_VAR 0 1
66200: PUSH
66201: LD_EXP 78
66205: IN
66206: NOT
66207: IFTRUE 66216
66209: PUSH
66210: LD_VAR 0 2
66214: NOT
66215: OR
66216: IFFALSE 66220
// exit ;
66218: GO 66495
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66220: LD_ADDR_VAR 0 2
66224: PUSH
66225: LD_VAR 0 1
66229: PPUSH
66230: LD_VAR 0 2
66234: PPUSH
66235: LD_INT 1
66237: PPUSH
66238: LD_INT 1
66240: PPUSH
66241: CALL 6683 0 4
66245: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66246: LD_ADDR_VAR 0 5
66250: PUSH
66251: LD_EXP 78
66255: PPUSH
66256: LD_VAR 0 1
66260: PPUSH
66261: CALL 6031 0 2
66265: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66266: LD_EXP 79
66270: PUSH
66271: LD_VAR 0 5
66275: ARRAY
66276: PUSH
66277: LD_EXP 80
66281: LESS
66282: IFFALSE 66471
// begin for i := 1 to vehicles do
66284: LD_ADDR_VAR 0 4
66288: PUSH
66289: DOUBLE
66290: LD_INT 1
66292: DEC
66293: ST_TO_ADDR
66294: LD_VAR 0 2
66298: PUSH
66299: FOR_TO
66300: IFFALSE 66469
// begin if hackTanksCaptured [ index ] = hackLimit then
66302: LD_EXP 79
66306: PUSH
66307: LD_VAR 0 5
66311: ARRAY
66312: PUSH
66313: LD_EXP 80
66317: EQUAL
66318: IFFALSE 66322
// break ;
66320: GO 66469
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66322: LD_ADDR_EXP 82
66326: PUSH
66327: LD_EXP 82
66331: PPUSH
66332: LD_VAR 0 5
66336: PPUSH
66337: LD_EXP 82
66341: PUSH
66342: LD_VAR 0 5
66346: ARRAY
66347: PUSH
66348: LD_INT 1
66350: PLUS
66351: PPUSH
66352: CALL_OW 1
66356: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66357: LD_ADDR_EXP 79
66361: PUSH
66362: LD_EXP 79
66366: PPUSH
66367: LD_VAR 0 5
66371: PUSH
66372: LD_EXP 79
66376: PUSH
66377: LD_VAR 0 5
66381: ARRAY
66382: PUSH
66383: LD_INT 1
66385: PLUS
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PPUSH
66391: LD_VAR 0 2
66395: PUSH
66396: LD_VAR 0 4
66400: ARRAY
66401: PUSH
66402: LD_VAR 0 2
66406: PUSH
66407: LD_VAR 0 4
66411: ARRAY
66412: PPUSH
66413: CALL_OW 255
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PPUSH
66422: CALL 6248 0 3
66426: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66427: LD_VAR 0 2
66431: PUSH
66432: LD_VAR 0 4
66436: ARRAY
66437: PPUSH
66438: LD_VAR 0 1
66442: PPUSH
66443: CALL_OW 255
66447: PPUSH
66448: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66452: LD_VAR 0 2
66456: PUSH
66457: LD_VAR 0 4
66461: ARRAY
66462: PPUSH
66463: CALL_OW 141
// end ;
66467: GO 66299
66469: POP
66470: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66471: LD_VAR 0 1
66475: PPUSH
66476: LD_EXP 79
66480: PUSH
66481: LD_VAR 0 5
66485: ARRAY
66486: PUSH
66487: LD_INT 0
66489: PLUS
66490: PPUSH
66491: CALL_OW 505
// end ;
66495: LD_VAR 0 3
66499: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66500: LD_INT 0
66502: PPUSH
66503: PPUSH
66504: PPUSH
66505: PPUSH
// if not hack in hackTanks then
66506: LD_VAR 0 1
66510: PUSH
66511: LD_EXP 78
66515: IN
66516: NOT
66517: IFFALSE 66521
// exit ;
66519: GO 66765
// index := GetElementIndex ( hackTanks , hack ) ;
66521: LD_ADDR_VAR 0 4
66525: PUSH
66526: LD_EXP 78
66530: PPUSH
66531: LD_VAR 0 1
66535: PPUSH
66536: CALL 6031 0 2
66540: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66541: LD_ADDR_VAR 0 3
66545: PUSH
66546: DOUBLE
66547: LD_EXP 79
66551: PUSH
66552: LD_VAR 0 4
66556: ARRAY
66557: INC
66558: ST_TO_ADDR
66559: LD_INT 1
66561: PUSH
66562: FOR_DOWNTO
66563: IFFALSE 66739
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66565: LD_ADDR_VAR 0 5
66569: PUSH
66570: LD_EXP 79
66574: PUSH
66575: LD_VAR 0 4
66579: ARRAY
66580: PUSH
66581: LD_VAR 0 3
66585: ARRAY
66586: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66587: LD_VAR 0 5
66591: PUSH
66592: LD_INT 1
66594: ARRAY
66595: PPUSH
66596: CALL_OW 302
66600: NOT
66601: IFTRUE 66629
66603: PUSH
66604: LD_VAR 0 5
66608: PUSH
66609: LD_INT 1
66611: ARRAY
66612: PPUSH
66613: CALL_OW 255
66617: PUSH
66618: LD_VAR 0 1
66622: PPUSH
66623: CALL_OW 255
66627: NONEQUAL
66628: OR
66629: IFFALSE 66737
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66631: LD_VAR 0 5
66635: PUSH
66636: LD_INT 1
66638: ARRAY
66639: PPUSH
66640: CALL_OW 305
66644: IFFALSE 66672
66646: PUSH
66647: LD_VAR 0 5
66651: PUSH
66652: LD_INT 1
66654: ARRAY
66655: PPUSH
66656: CALL_OW 255
66660: PUSH
66661: LD_VAR 0 1
66665: PPUSH
66666: CALL_OW 255
66670: EQUAL
66671: AND
66672: IFFALSE 66696
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66674: LD_VAR 0 5
66678: PUSH
66679: LD_INT 1
66681: ARRAY
66682: PPUSH
66683: LD_VAR 0 5
66687: PUSH
66688: LD_INT 2
66690: ARRAY
66691: PPUSH
66692: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66696: LD_ADDR_EXP 79
66700: PUSH
66701: LD_EXP 79
66705: PPUSH
66706: LD_VAR 0 4
66710: PPUSH
66711: LD_EXP 79
66715: PUSH
66716: LD_VAR 0 4
66720: ARRAY
66721: PPUSH
66722: LD_VAR 0 3
66726: PPUSH
66727: CALL_OW 3
66731: PPUSH
66732: CALL_OW 1
66736: ST_TO_ADDR
// end ; end ;
66737: GO 66562
66739: POP
66740: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66741: LD_VAR 0 1
66745: PPUSH
66746: LD_EXP 79
66750: PUSH
66751: LD_VAR 0 4
66755: ARRAY
66756: PUSH
66757: LD_INT 0
66759: PLUS
66760: PPUSH
66761: CALL_OW 505
// end ;
66765: LD_VAR 0 2
66769: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66770: LD_INT 0
66772: PPUSH
66773: PPUSH
66774: PPUSH
66775: PPUSH
// if not hack in hackTanks then
66776: LD_VAR 0 1
66780: PUSH
66781: LD_EXP 78
66785: IN
66786: NOT
66787: IFFALSE 66791
// exit ;
66789: GO 66876
// index := GetElementIndex ( hackTanks , hack ) ;
66791: LD_ADDR_VAR 0 5
66795: PUSH
66796: LD_EXP 78
66800: PPUSH
66801: LD_VAR 0 1
66805: PPUSH
66806: CALL 6031 0 2
66810: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66811: LD_ADDR_VAR 0 4
66815: PUSH
66816: DOUBLE
66817: LD_INT 1
66819: DEC
66820: ST_TO_ADDR
66821: LD_EXP 79
66825: PUSH
66826: LD_VAR 0 5
66830: ARRAY
66831: PUSH
66832: FOR_TO
66833: IFFALSE 66874
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66835: LD_EXP 79
66839: PUSH
66840: LD_VAR 0 5
66844: ARRAY
66845: PUSH
66846: LD_VAR 0 4
66850: ARRAY
66851: PUSH
66852: LD_INT 1
66854: ARRAY
66855: PUSH
66856: LD_VAR 0 2
66860: EQUAL
66861: IFFALSE 66872
// KillUnit ( vehicle ) ;
66863: LD_VAR 0 2
66867: PPUSH
66868: CALL_OW 66
66872: GO 66832
66874: POP
66875: POP
// end ;
66876: LD_VAR 0 3
66880: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66881: LD_EXP 83
66885: NOT
66886: IFFALSE 66921
66888: GO 66890
66890: DISABLE
// begin initMiner := true ;
66891: LD_ADDR_EXP 83
66895: PUSH
66896: LD_INT 1
66898: ST_TO_ADDR
// minersList := [ ] ;
66899: LD_ADDR_EXP 84
66903: PUSH
66904: EMPTY
66905: ST_TO_ADDR
// minerMinesList := [ ] ;
66906: LD_ADDR_EXP 85
66910: PUSH
66911: EMPTY
66912: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66913: LD_ADDR_EXP 86
66917: PUSH
66918: LD_INT 5
66920: ST_TO_ADDR
// end ;
66921: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66922: LD_EXP 83
66926: IFFALSE 66944
66928: PUSH
66929: LD_INT 34
66931: PUSH
66932: LD_INT 81
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PPUSH
66939: CALL_OW 69
66943: AND
66944: IFFALSE 67407
66946: GO 66948
66948: DISABLE
66949: LD_INT 0
66951: PPUSH
66952: PPUSH
66953: PPUSH
66954: PPUSH
// begin enable ;
66955: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66956: LD_ADDR_VAR 0 1
66960: PUSH
66961: LD_INT 34
66963: PUSH
66964: LD_INT 81
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PPUSH
66971: CALL_OW 69
66975: PUSH
66976: FOR_IN
66977: IFFALSE 67049
// begin if not i in minersList then
66979: LD_VAR 0 1
66983: PUSH
66984: LD_EXP 84
66988: IN
66989: NOT
66990: IFFALSE 67047
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66992: LD_ADDR_EXP 84
66996: PUSH
66997: LD_EXP 84
67001: PPUSH
67002: LD_EXP 84
67006: PUSH
67007: LD_INT 1
67009: PLUS
67010: PPUSH
67011: LD_VAR 0 1
67015: PPUSH
67016: CALL_OW 1
67020: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67021: LD_ADDR_EXP 85
67025: PUSH
67026: LD_EXP 85
67030: PPUSH
67031: LD_EXP 85
67035: PUSH
67036: LD_INT 1
67038: PLUS
67039: PPUSH
67040: EMPTY
67041: PPUSH
67042: CALL_OW 1
67046: ST_TO_ADDR
// end end ;
67047: GO 66976
67049: POP
67050: POP
// for i := minerMinesList downto 1 do
67051: LD_ADDR_VAR 0 1
67055: PUSH
67056: DOUBLE
67057: LD_EXP 85
67061: INC
67062: ST_TO_ADDR
67063: LD_INT 1
67065: PUSH
67066: FOR_DOWNTO
67067: IFFALSE 67405
// begin if IsLive ( minersList [ i ] ) then
67069: LD_EXP 84
67073: PUSH
67074: LD_VAR 0 1
67078: ARRAY
67079: PPUSH
67080: CALL_OW 300
67084: IFFALSE 67112
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67086: LD_EXP 84
67090: PUSH
67091: LD_VAR 0 1
67095: ARRAY
67096: PPUSH
67097: LD_EXP 85
67101: PUSH
67102: LD_VAR 0 1
67106: ARRAY
67107: PPUSH
67108: CALL_OW 505
// if not minerMinesList [ i ] then
67112: LD_EXP 85
67116: PUSH
67117: LD_VAR 0 1
67121: ARRAY
67122: NOT
67123: IFFALSE 67127
// continue ;
67125: GO 67066
// for j := minerMinesList [ i ] downto 1 do
67127: LD_ADDR_VAR 0 2
67131: PUSH
67132: DOUBLE
67133: LD_EXP 85
67137: PUSH
67138: LD_VAR 0 1
67142: ARRAY
67143: INC
67144: ST_TO_ADDR
67145: LD_INT 1
67147: PUSH
67148: FOR_DOWNTO
67149: IFFALSE 67401
// begin side := GetSide ( minersList [ i ] ) ;
67151: LD_ADDR_VAR 0 3
67155: PUSH
67156: LD_EXP 84
67160: PUSH
67161: LD_VAR 0 1
67165: ARRAY
67166: PPUSH
67167: CALL_OW 255
67171: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67172: LD_ADDR_VAR 0 4
67176: PUSH
67177: LD_EXP 85
67181: PUSH
67182: LD_VAR 0 1
67186: ARRAY
67187: PUSH
67188: LD_VAR 0 2
67192: ARRAY
67193: PUSH
67194: LD_INT 1
67196: ARRAY
67197: PPUSH
67198: LD_EXP 85
67202: PUSH
67203: LD_VAR 0 1
67207: ARRAY
67208: PUSH
67209: LD_VAR 0 2
67213: ARRAY
67214: PUSH
67215: LD_INT 2
67217: ARRAY
67218: PPUSH
67219: CALL_OW 428
67223: ST_TO_ADDR
// if not tmp then
67224: LD_VAR 0 4
67228: NOT
67229: IFFALSE 67233
// continue ;
67231: GO 67148
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67233: LD_VAR 0 4
67237: PUSH
67238: LD_INT 81
67240: PUSH
67241: LD_VAR 0 3
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PPUSH
67250: CALL_OW 69
67254: IN
67255: IFFALSE 67305
67257: PUSH
67258: LD_EXP 85
67262: PUSH
67263: LD_VAR 0 1
67267: ARRAY
67268: PUSH
67269: LD_VAR 0 2
67273: ARRAY
67274: PUSH
67275: LD_INT 1
67277: ARRAY
67278: PPUSH
67279: LD_EXP 85
67283: PUSH
67284: LD_VAR 0 1
67288: ARRAY
67289: PUSH
67290: LD_VAR 0 2
67294: ARRAY
67295: PUSH
67296: LD_INT 2
67298: ARRAY
67299: PPUSH
67300: CALL_OW 458
67304: AND
67305: IFFALSE 67399
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67307: LD_EXP 85
67311: PUSH
67312: LD_VAR 0 1
67316: ARRAY
67317: PUSH
67318: LD_VAR 0 2
67322: ARRAY
67323: PUSH
67324: LD_INT 1
67326: ARRAY
67327: PPUSH
67328: LD_EXP 85
67332: PUSH
67333: LD_VAR 0 1
67337: ARRAY
67338: PUSH
67339: LD_VAR 0 2
67343: ARRAY
67344: PUSH
67345: LD_INT 2
67347: ARRAY
67348: PPUSH
67349: LD_VAR 0 3
67353: PPUSH
67354: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67358: LD_ADDR_EXP 85
67362: PUSH
67363: LD_EXP 85
67367: PPUSH
67368: LD_VAR 0 1
67372: PPUSH
67373: LD_EXP 85
67377: PUSH
67378: LD_VAR 0 1
67382: ARRAY
67383: PPUSH
67384: LD_VAR 0 2
67388: PPUSH
67389: CALL_OW 3
67393: PPUSH
67394: CALL_OW 1
67398: ST_TO_ADDR
// end ; end ;
67399: GO 67148
67401: POP
67402: POP
// end ;
67403: GO 67066
67405: POP
67406: POP
// end ;
67407: PPOPN 4
67409: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67410: LD_INT 0
67412: PPUSH
67413: PPUSH
// result := false ;
67414: LD_ADDR_VAR 0 4
67418: PUSH
67419: LD_INT 0
67421: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67422: LD_VAR 0 1
67426: PPUSH
67427: CALL_OW 264
67431: PUSH
67432: LD_INT 81
67434: EQUAL
67435: NOT
67436: IFFALSE 67440
// exit ;
67438: GO 67684
// index := GetElementIndex ( minersList , unit ) ;
67440: LD_ADDR_VAR 0 5
67444: PUSH
67445: LD_EXP 84
67449: PPUSH
67450: LD_VAR 0 1
67454: PPUSH
67455: CALL 6031 0 2
67459: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67460: LD_EXP 85
67464: PUSH
67465: LD_VAR 0 5
67469: ARRAY
67470: PUSH
67471: LD_EXP 86
67475: GREATEREQUAL
67476: IFFALSE 67480
// exit ;
67478: GO 67684
// ComMoveXY ( unit , x , y ) ;
67480: LD_VAR 0 1
67484: PPUSH
67485: LD_VAR 0 2
67489: PPUSH
67490: LD_VAR 0 3
67494: PPUSH
67495: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67499: LD_INT 35
67501: PPUSH
67502: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67506: LD_VAR 0 1
67510: PPUSH
67511: LD_VAR 0 2
67515: PPUSH
67516: LD_VAR 0 3
67520: PPUSH
67521: CALL 38077 0 3
67525: NOT
67526: IFFALSE 67539
67528: PUSH
67529: LD_VAR 0 1
67533: PPUSH
67534: CALL_OW 314
67538: AND
67539: IFFALSE 67543
// exit ;
67541: GO 67684
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67543: LD_VAR 0 2
67547: PPUSH
67548: LD_VAR 0 3
67552: PPUSH
67553: CALL_OW 428
67557: PUSH
67558: LD_VAR 0 1
67562: EQUAL
67563: IFFALSE 67577
67565: PUSH
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 314
67575: NOT
67576: AND
67577: IFFALSE 67499
// PlaySoundXY ( x , y , PlantMine ) ;
67579: LD_VAR 0 2
67583: PPUSH
67584: LD_VAR 0 3
67588: PPUSH
67589: LD_STRING PlantMine
67591: PPUSH
67592: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67596: LD_VAR 0 2
67600: PPUSH
67601: LD_VAR 0 3
67605: PPUSH
67606: LD_VAR 0 1
67610: PPUSH
67611: CALL_OW 255
67615: PPUSH
67616: LD_INT 0
67618: PPUSH
67619: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67623: LD_ADDR_EXP 85
67627: PUSH
67628: LD_EXP 85
67632: PPUSH
67633: LD_VAR 0 5
67637: PUSH
67638: LD_EXP 85
67642: PUSH
67643: LD_VAR 0 5
67647: ARRAY
67648: PUSH
67649: LD_INT 1
67651: PLUS
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PPUSH
67657: LD_VAR 0 2
67661: PUSH
67662: LD_VAR 0 3
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PPUSH
67671: CALL 6248 0 3
67675: ST_TO_ADDR
// result := true ;
67676: LD_ADDR_VAR 0 4
67680: PUSH
67681: LD_INT 1
67683: ST_TO_ADDR
// end ;
67684: LD_VAR 0 4
67688: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67689: LD_INT 0
67691: PPUSH
67692: PPUSH
67693: PPUSH
// if not unit in minersList then
67694: LD_VAR 0 1
67698: PUSH
67699: LD_EXP 84
67703: IN
67704: NOT
67705: IFFALSE 67709
// exit ;
67707: GO 68103
// index := GetElementIndex ( minersList , unit ) ;
67709: LD_ADDR_VAR 0 6
67713: PUSH
67714: LD_EXP 84
67718: PPUSH
67719: LD_VAR 0 1
67723: PPUSH
67724: CALL 6031 0 2
67728: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67729: LD_ADDR_VAR 0 5
67733: PUSH
67734: DOUBLE
67735: LD_EXP 85
67739: PUSH
67740: LD_VAR 0 6
67744: ARRAY
67745: INC
67746: ST_TO_ADDR
67747: LD_INT 1
67749: PUSH
67750: FOR_DOWNTO
67751: IFFALSE 67914
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67753: LD_EXP 85
67757: PUSH
67758: LD_VAR 0 6
67762: ARRAY
67763: PUSH
67764: LD_VAR 0 5
67768: ARRAY
67769: PUSH
67770: LD_INT 1
67772: ARRAY
67773: PUSH
67774: LD_VAR 0 2
67778: EQUAL
67779: IFFALSE 67809
67781: PUSH
67782: LD_EXP 85
67786: PUSH
67787: LD_VAR 0 6
67791: ARRAY
67792: PUSH
67793: LD_VAR 0 5
67797: ARRAY
67798: PUSH
67799: LD_INT 2
67801: ARRAY
67802: PUSH
67803: LD_VAR 0 3
67807: EQUAL
67808: AND
67809: IFFALSE 67912
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67811: LD_EXP 85
67815: PUSH
67816: LD_VAR 0 6
67820: ARRAY
67821: PUSH
67822: LD_VAR 0 5
67826: ARRAY
67827: PUSH
67828: LD_INT 1
67830: ARRAY
67831: PPUSH
67832: LD_EXP 85
67836: PUSH
67837: LD_VAR 0 6
67841: ARRAY
67842: PUSH
67843: LD_VAR 0 5
67847: ARRAY
67848: PUSH
67849: LD_INT 2
67851: ARRAY
67852: PPUSH
67853: LD_VAR 0 1
67857: PPUSH
67858: CALL_OW 255
67862: PPUSH
67863: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67867: LD_ADDR_EXP 85
67871: PUSH
67872: LD_EXP 85
67876: PPUSH
67877: LD_VAR 0 6
67881: PPUSH
67882: LD_EXP 85
67886: PUSH
67887: LD_VAR 0 6
67891: ARRAY
67892: PPUSH
67893: LD_VAR 0 5
67897: PPUSH
67898: CALL_OW 3
67902: PPUSH
67903: CALL_OW 1
67907: ST_TO_ADDR
// exit ;
67908: POP
67909: POP
67910: GO 68103
// end ; end ;
67912: GO 67750
67914: POP
67915: POP
// for i := minerMinesList [ index ] downto 1 do
67916: LD_ADDR_VAR 0 5
67920: PUSH
67921: DOUBLE
67922: LD_EXP 85
67926: PUSH
67927: LD_VAR 0 6
67931: ARRAY
67932: INC
67933: ST_TO_ADDR
67934: LD_INT 1
67936: PUSH
67937: FOR_DOWNTO
67938: IFFALSE 68101
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67940: LD_EXP 85
67944: PUSH
67945: LD_VAR 0 6
67949: ARRAY
67950: PUSH
67951: LD_VAR 0 5
67955: ARRAY
67956: PUSH
67957: LD_INT 1
67959: ARRAY
67960: PPUSH
67961: LD_EXP 85
67965: PUSH
67966: LD_VAR 0 6
67970: ARRAY
67971: PUSH
67972: LD_VAR 0 5
67976: ARRAY
67977: PUSH
67978: LD_INT 2
67980: ARRAY
67981: PPUSH
67982: LD_VAR 0 2
67986: PPUSH
67987: LD_VAR 0 3
67991: PPUSH
67992: CALL_OW 298
67996: PUSH
67997: LD_INT 6
67999: LESS
68000: IFFALSE 68099
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68002: LD_EXP 85
68006: PUSH
68007: LD_VAR 0 6
68011: ARRAY
68012: PUSH
68013: LD_VAR 0 5
68017: ARRAY
68018: PUSH
68019: LD_INT 1
68021: ARRAY
68022: PPUSH
68023: LD_EXP 85
68027: PUSH
68028: LD_VAR 0 6
68032: ARRAY
68033: PUSH
68034: LD_VAR 0 5
68038: ARRAY
68039: PUSH
68040: LD_INT 2
68042: ARRAY
68043: PPUSH
68044: LD_VAR 0 1
68048: PPUSH
68049: CALL_OW 255
68053: PPUSH
68054: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68058: LD_ADDR_EXP 85
68062: PUSH
68063: LD_EXP 85
68067: PPUSH
68068: LD_VAR 0 6
68072: PPUSH
68073: LD_EXP 85
68077: PUSH
68078: LD_VAR 0 6
68082: ARRAY
68083: PPUSH
68084: LD_VAR 0 5
68088: PPUSH
68089: CALL_OW 3
68093: PPUSH
68094: CALL_OW 1
68098: ST_TO_ADDR
// end ; end ;
68099: GO 67937
68101: POP
68102: POP
// end ;
68103: LD_VAR 0 4
68107: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68108: LD_INT 0
68110: PPUSH
68111: PPUSH
68112: PPUSH
68113: PPUSH
68114: PPUSH
68115: PPUSH
68116: PPUSH
68117: PPUSH
68118: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68119: LD_VAR 0 1
68123: PPUSH
68124: CALL_OW 264
68128: PUSH
68129: LD_INT 81
68131: EQUAL
68132: NOT
68133: IFTRUE 68148
68135: PUSH
68136: LD_VAR 0 1
68140: PUSH
68141: LD_EXP 84
68145: IN
68146: NOT
68147: OR
68148: IFFALSE 68152
// exit ;
68150: GO 68478
// index := GetElementIndex ( minersList , unit ) ;
68152: LD_ADDR_VAR 0 6
68156: PUSH
68157: LD_EXP 84
68161: PPUSH
68162: LD_VAR 0 1
68166: PPUSH
68167: CALL 6031 0 2
68171: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68172: LD_ADDR_VAR 0 8
68176: PUSH
68177: LD_EXP 86
68181: PUSH
68182: LD_EXP 85
68186: PUSH
68187: LD_VAR 0 6
68191: ARRAY
68192: MINUS
68193: ST_TO_ADDR
// if not minesFreeAmount then
68194: LD_VAR 0 8
68198: NOT
68199: IFFALSE 68203
// exit ;
68201: GO 68478
// tmp := [ ] ;
68203: LD_ADDR_VAR 0 7
68207: PUSH
68208: EMPTY
68209: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68210: LD_ADDR_VAR 0 5
68214: PUSH
68215: DOUBLE
68216: LD_INT 1
68218: DEC
68219: ST_TO_ADDR
68220: LD_VAR 0 8
68224: PUSH
68225: FOR_TO
68226: IFFALSE 68425
// begin _d := rand ( 0 , 5 ) ;
68228: LD_ADDR_VAR 0 11
68232: PUSH
68233: LD_INT 0
68235: PPUSH
68236: LD_INT 5
68238: PPUSH
68239: CALL_OW 12
68243: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68244: LD_ADDR_VAR 0 12
68248: PUSH
68249: LD_INT 2
68251: PPUSH
68252: LD_INT 6
68254: PPUSH
68255: CALL_OW 12
68259: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68260: LD_ADDR_VAR 0 9
68264: PUSH
68265: LD_VAR 0 2
68269: PPUSH
68270: LD_VAR 0 11
68274: PPUSH
68275: LD_VAR 0 12
68279: PPUSH
68280: CALL_OW 272
68284: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68285: LD_ADDR_VAR 0 10
68289: PUSH
68290: LD_VAR 0 3
68294: PPUSH
68295: LD_VAR 0 11
68299: PPUSH
68300: LD_VAR 0 12
68304: PPUSH
68305: CALL_OW 273
68309: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68310: LD_VAR 0 9
68314: PPUSH
68315: LD_VAR 0 10
68319: PPUSH
68320: CALL_OW 488
68324: IFFALSE 68348
68326: PUSH
68327: LD_VAR 0 9
68331: PUSH
68332: LD_VAR 0 10
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_VAR 0 7
68345: IN
68346: NOT
68347: AND
68348: IFFALSE 68367
68350: PUSH
68351: LD_VAR 0 9
68355: PPUSH
68356: LD_VAR 0 10
68360: PPUSH
68361: CALL_OW 458
68365: NOT
68366: AND
68367: IFFALSE 68409
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68369: LD_ADDR_VAR 0 7
68373: PUSH
68374: LD_VAR 0 7
68378: PPUSH
68379: LD_VAR 0 7
68383: PUSH
68384: LD_INT 1
68386: PLUS
68387: PPUSH
68388: LD_VAR 0 9
68392: PUSH
68393: LD_VAR 0 10
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PPUSH
68402: CALL_OW 1
68406: ST_TO_ADDR
68407: GO 68423
// i := i - 1 ;
68409: LD_ADDR_VAR 0 5
68413: PUSH
68414: LD_VAR 0 5
68418: PUSH
68419: LD_INT 1
68421: MINUS
68422: ST_TO_ADDR
// end ;
68423: GO 68225
68425: POP
68426: POP
// for i in tmp do
68427: LD_ADDR_VAR 0 5
68431: PUSH
68432: LD_VAR 0 7
68436: PUSH
68437: FOR_IN
68438: IFFALSE 68476
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68440: LD_VAR 0 1
68444: PPUSH
68445: LD_VAR 0 5
68449: PUSH
68450: LD_INT 1
68452: ARRAY
68453: PPUSH
68454: LD_VAR 0 5
68458: PUSH
68459: LD_INT 2
68461: ARRAY
68462: PPUSH
68463: CALL 67410 0 3
68467: NOT
68468: IFFALSE 68474
// exit ;
68470: POP
68471: POP
68472: GO 68478
68474: GO 68437
68476: POP
68477: POP
// end ;
68478: LD_VAR 0 4
68482: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
68483: LD_INT 0
68485: PPUSH
68486: PPUSH
68487: PPUSH
68488: PPUSH
68489: PPUSH
68490: PPUSH
68491: PPUSH
68492: PPUSH
68493: PPUSH
// if GetClass ( unit ) <> class_sniper then
68494: LD_VAR 0 1
68498: PPUSH
68499: CALL_OW 257
68503: PUSH
68504: LD_INT 5
68506: NONEQUAL
68507: IFFALSE 68511
// exit ;
68509: GO 68981
// dist := 8 ;
68511: LD_ADDR_VAR 0 5
68515: PUSH
68516: LD_INT 8
68518: ST_TO_ADDR
// viewRange := 12 ;
68519: LD_ADDR_VAR 0 8
68523: PUSH
68524: LD_INT 12
68526: ST_TO_ADDR
// side := GetSide ( unit ) ;
68527: LD_ADDR_VAR 0 6
68531: PUSH
68532: LD_VAR 0 1
68536: PPUSH
68537: CALL_OW 255
68541: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68542: LD_INT 61
68544: PPUSH
68545: LD_VAR 0 6
68549: PPUSH
68550: CALL_OW 321
68554: PUSH
68555: LD_INT 2
68557: EQUAL
68558: IFFALSE 68568
// viewRange := 16 ;
68560: LD_ADDR_VAR 0 8
68564: PUSH
68565: LD_INT 16
68567: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68568: LD_VAR 0 1
68572: PPUSH
68573: LD_VAR 0 2
68577: PPUSH
68578: LD_VAR 0 3
68582: PPUSH
68583: CALL_OW 297
68587: PUSH
68588: LD_VAR 0 5
68592: GREATER
68593: IFFALSE 68672
// begin ComMoveXY ( unit , x , y ) ;
68595: LD_VAR 0 1
68599: PPUSH
68600: LD_VAR 0 2
68604: PPUSH
68605: LD_VAR 0 3
68609: PPUSH
68610: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68614: LD_INT 35
68616: PPUSH
68617: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68621: LD_VAR 0 1
68625: PPUSH
68626: LD_VAR 0 2
68630: PPUSH
68631: LD_VAR 0 3
68635: PPUSH
68636: CALL 38077 0 3
68640: NOT
68641: IFFALSE 68645
// exit ;
68643: GO 68981
// until GetDistUnitXY ( unit , x , y ) < dist ;
68645: LD_VAR 0 1
68649: PPUSH
68650: LD_VAR 0 2
68654: PPUSH
68655: LD_VAR 0 3
68659: PPUSH
68660: CALL_OW 297
68664: PUSH
68665: LD_VAR 0 5
68669: LESS
68670: IFFALSE 68614
// end ; ComTurnXY ( unit , x , y ) ;
68672: LD_VAR 0 1
68676: PPUSH
68677: LD_VAR 0 2
68681: PPUSH
68682: LD_VAR 0 3
68686: PPUSH
68687: CALL_OW 118
// repeat if Multiplayer then
68691: LD_OWVAR 4
68695: IFFALSE 68706
// wait ( 35 ) else
68697: LD_INT 35
68699: PPUSH
68700: CALL_OW 67
68704: GO 68713
// wait ( 5 ) ;
68706: LD_INT 5
68708: PPUSH
68709: CALL_OW 67
// _d := GetDir ( unit ) ;
68713: LD_ADDR_VAR 0 11
68717: PUSH
68718: LD_VAR 0 1
68722: PPUSH
68723: CALL_OW 254
68727: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
68728: LD_ADDR_VAR 0 7
68732: PUSH
68733: LD_VAR 0 1
68737: PPUSH
68738: CALL_OW 250
68742: PPUSH
68743: LD_VAR 0 1
68747: PPUSH
68748: CALL_OW 251
68752: PPUSH
68753: LD_VAR 0 2
68757: PPUSH
68758: LD_VAR 0 3
68762: PPUSH
68763: CALL 40713 0 4
68767: ST_TO_ADDR
// until dir = _d ;
68768: LD_VAR 0 7
68772: PUSH
68773: LD_VAR 0 11
68777: EQUAL
68778: IFFALSE 68691
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
68780: LD_ADDR_VAR 0 9
68784: PUSH
68785: LD_VAR 0 1
68789: PPUSH
68790: CALL_OW 250
68794: PPUSH
68795: LD_VAR 0 7
68799: PPUSH
68800: LD_VAR 0 5
68804: PPUSH
68805: CALL_OW 272
68809: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
68810: LD_ADDR_VAR 0 10
68814: PUSH
68815: LD_VAR 0 1
68819: PPUSH
68820: CALL_OW 251
68824: PPUSH
68825: LD_VAR 0 7
68829: PPUSH
68830: LD_VAR 0 5
68834: PPUSH
68835: CALL_OW 273
68839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68840: LD_VAR 0 9
68844: PPUSH
68845: LD_VAR 0 10
68849: PPUSH
68850: CALL_OW 488
68854: NOT
68855: IFFALSE 68859
// exit ;
68857: GO 68981
// ComAnimCustom ( unit , 1 ) ;
68859: LD_VAR 0 1
68863: PPUSH
68864: LD_INT 1
68866: PPUSH
68867: CALL_OW 592
// p := 0 ;
68871: LD_ADDR_VAR 0 12
68875: PUSH
68876: LD_INT 0
68878: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68879: LD_VAR 0 9
68883: PPUSH
68884: LD_VAR 0 10
68888: PPUSH
68889: LD_VAR 0 6
68893: PPUSH
68894: LD_VAR 0 8
68898: PPUSH
68899: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
68903: LD_INT 35
68905: PPUSH
68906: CALL_OW 67
// p := Inc ( p ) ;
68910: LD_ADDR_VAR 0 12
68914: PUSH
68915: LD_VAR 0 12
68919: PPUSH
68920: CALL 40669 0 1
68924: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
68925: LD_VAR 0 12
68929: PUSH
68930: LD_INT 3
68932: EQUAL
68933: IFTRUE 68947
68935: PUSH
68936: LD_VAR 0 1
68940: PPUSH
68941: CALL_OW 302
68945: NOT
68946: OR
68947: IFTRUE 68960
68949: PUSH
68950: LD_VAR 0 1
68954: PPUSH
68955: CALL_OW 301
68959: OR
68960: IFFALSE 68903
// RemoveSeeing ( _x , _y , side ) ;
68962: LD_VAR 0 9
68966: PPUSH
68967: LD_VAR 0 10
68971: PPUSH
68972: LD_VAR 0 6
68976: PPUSH
68977: CALL_OW 331
// end ;
68981: LD_VAR 0 4
68985: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
68986: LD_INT 0
68988: PPUSH
68989: PPUSH
68990: PPUSH
68991: PPUSH
68992: PPUSH
68993: PPUSH
68994: PPUSH
68995: PPUSH
68996: PPUSH
68997: PPUSH
68998: PPUSH
// if not unit then
68999: LD_VAR 0 1
69003: NOT
69004: IFFALSE 69008
// exit ;
69006: GO 69279
// side := GetSide ( unit ) ;
69008: LD_ADDR_VAR 0 3
69012: PUSH
69013: LD_VAR 0 1
69017: PPUSH
69018: CALL_OW 255
69022: ST_TO_ADDR
// x := GetX ( unit ) ;
69023: LD_ADDR_VAR 0 5
69027: PUSH
69028: LD_VAR 0 1
69032: PPUSH
69033: CALL_OW 250
69037: ST_TO_ADDR
// y := GetY ( unit ) ;
69038: LD_ADDR_VAR 0 6
69042: PUSH
69043: LD_VAR 0 1
69047: PPUSH
69048: CALL_OW 251
69052: ST_TO_ADDR
// r := 8 ;
69053: LD_ADDR_VAR 0 4
69057: PUSH
69058: LD_INT 8
69060: ST_TO_ADDR
// if x - r < 0 then
69061: LD_VAR 0 5
69065: PUSH
69066: LD_VAR 0 4
69070: MINUS
69071: PUSH
69072: LD_INT 0
69074: LESS
69075: IFFALSE 69087
// min_x := 0 else
69077: LD_ADDR_VAR 0 7
69081: PUSH
69082: LD_INT 0
69084: ST_TO_ADDR
69085: GO 69103
// min_x := x - r ;
69087: LD_ADDR_VAR 0 7
69091: PUSH
69092: LD_VAR 0 5
69096: PUSH
69097: LD_VAR 0 4
69101: MINUS
69102: ST_TO_ADDR
// if y - r < 0 then
69103: LD_VAR 0 6
69107: PUSH
69108: LD_VAR 0 4
69112: MINUS
69113: PUSH
69114: LD_INT 0
69116: LESS
69117: IFFALSE 69129
// min_y := 0 else
69119: LD_ADDR_VAR 0 8
69123: PUSH
69124: LD_INT 0
69126: ST_TO_ADDR
69127: GO 69145
// min_y := y - r ;
69129: LD_ADDR_VAR 0 8
69133: PUSH
69134: LD_VAR 0 6
69138: PUSH
69139: LD_VAR 0 4
69143: MINUS
69144: ST_TO_ADDR
// max_x := x + r ;
69145: LD_ADDR_VAR 0 9
69149: PUSH
69150: LD_VAR 0 5
69154: PUSH
69155: LD_VAR 0 4
69159: PLUS
69160: ST_TO_ADDR
// max_y := y + r ;
69161: LD_ADDR_VAR 0 10
69165: PUSH
69166: LD_VAR 0 6
69170: PUSH
69171: LD_VAR 0 4
69175: PLUS
69176: ST_TO_ADDR
// for _x = min_x to max_x do
69177: LD_ADDR_VAR 0 11
69181: PUSH
69182: DOUBLE
69183: LD_VAR 0 7
69187: DEC
69188: ST_TO_ADDR
69189: LD_VAR 0 9
69193: PUSH
69194: FOR_TO
69195: IFFALSE 69277
// for _y = min_y to max_y do
69197: LD_ADDR_VAR 0 12
69201: PUSH
69202: DOUBLE
69203: LD_VAR 0 8
69207: DEC
69208: ST_TO_ADDR
69209: LD_VAR 0 10
69213: PUSH
69214: FOR_TO
69215: IFFALSE 69273
// begin if not ValidHex ( _x , _y ) then
69217: LD_VAR 0 11
69221: PPUSH
69222: LD_VAR 0 12
69226: PPUSH
69227: CALL_OW 488
69231: NOT
69232: IFFALSE 69236
// continue ;
69234: GO 69214
// if MineAtPos ( _x , _y ) then
69236: LD_VAR 0 11
69240: PPUSH
69241: LD_VAR 0 12
69245: PPUSH
69246: CALL_OW 458
69250: IFFALSE 69271
// ViewMineAtPos ( _x , _y , side ) ;
69252: LD_VAR 0 11
69256: PPUSH
69257: LD_VAR 0 12
69261: PPUSH
69262: LD_VAR 0 3
69266: PPUSH
69267: CALL_OW 457
// end ;
69271: GO 69214
69273: POP
69274: POP
69275: GO 69194
69277: POP
69278: POP
// end ;
69279: LD_VAR 0 2
69283: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
69284: LD_INT 0
69286: PPUSH
69287: PPUSH
69288: PPUSH
69289: PPUSH
69290: PPUSH
69291: PPUSH
// if not units then
69292: LD_VAR 0 1
69296: NOT
69297: IFFALSE 69301
// exit ;
69299: GO 69731
// scaners := [ ] ;
69301: LD_ADDR_VAR 0 6
69305: PUSH
69306: EMPTY
69307: ST_TO_ADDR
// for i in units do
69308: LD_ADDR_VAR 0 3
69312: PUSH
69313: LD_VAR 0 1
69317: PUSH
69318: FOR_IN
69319: IFFALSE 69476
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
69321: LD_VAR 0 3
69325: PPUSH
69326: CALL_OW 264
69330: PUSH
69331: LD_INT 11
69333: NONEQUAL
69334: IFTRUE 69348
69336: PUSH
69337: LD_VAR 0 3
69341: PPUSH
69342: CALL_OW 302
69346: NOT
69347: OR
69348: IFTRUE 69365
69350: PUSH
69351: LD_VAR 0 3
69355: PPUSH
69356: CALL_OW 110
69360: PUSH
69361: LD_INT 502
69363: EQUAL
69364: OR
69365: IFFALSE 69369
// continue ;
69367: GO 69318
// ComStop ( i ) ;
69369: LD_VAR 0 3
69373: PPUSH
69374: CALL_OW 141
// x := GetX ( i ) ;
69378: LD_ADDR_VAR 0 4
69382: PUSH
69383: LD_VAR 0 3
69387: PPUSH
69388: CALL_OW 250
69392: ST_TO_ADDR
// y := GetY ( i ) ;
69393: LD_ADDR_VAR 0 5
69397: PUSH
69398: LD_VAR 0 3
69402: PPUSH
69403: CALL_OW 251
69407: ST_TO_ADDR
// if GetSide ( i ) = your_side then
69408: LD_VAR 0 3
69412: PPUSH
69413: CALL_OW 255
69417: PUSH
69418: LD_OWVAR 2
69422: EQUAL
69423: IFFALSE 69442
// PlaySoundXY ( x , y , mineDetector ) ;
69425: LD_VAR 0 4
69429: PPUSH
69430: LD_VAR 0 5
69434: PPUSH
69435: LD_STRING mineDetector
69437: PPUSH
69438: CALL_OW 366
// scaners := Join ( scaners , i ) ;
69442: LD_ADDR_VAR 0 6
69446: PUSH
69447: LD_VAR 0 6
69451: PPUSH
69452: LD_VAR 0 3
69456: PPUSH
69457: CALL 39296 0 2
69461: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
69462: LD_VAR 0 3
69466: PPUSH
69467: LD_INT 502
69469: PPUSH
69470: CALL_OW 109
// end ;
69474: GO 69318
69476: POP
69477: POP
// if not scaners then
69478: LD_VAR 0 6
69482: NOT
69483: IFFALSE 69487
// exit ;
69485: GO 69731
// wait ( 3 ) ;
69487: LD_INT 3
69489: PPUSH
69490: CALL_OW 67
// timer := 6 ;
69494: LD_ADDR_VAR 0 7
69498: PUSH
69499: LD_INT 6
69501: ST_TO_ADDR
// repeat for i in scaners do
69502: LD_ADDR_VAR 0 3
69506: PUSH
69507: LD_VAR 0 6
69511: PUSH
69512: FOR_IN
69513: IFFALSE 69629
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
69515: LD_VAR 0 3
69519: PPUSH
69520: CALL_OW 302
69524: NOT
69525: IFTRUE 69538
69527: PUSH
69528: LD_VAR 0 3
69532: PPUSH
69533: CALL_OW 314
69537: OR
69538: IFTRUE 69569
69540: PUSH
69541: LD_VAR 0 3
69545: PPUSH
69546: CALL_OW 263
69550: PUSH
69551: LD_INT 1
69553: EQUAL
69554: IFFALSE 69568
69556: PUSH
69557: LD_VAR 0 3
69561: PPUSH
69562: CALL_OW 311
69566: NOT
69567: AND
69568: OR
69569: IFFALSE 69613
// begin SetUnitDisplayNumber ( i , 0 ) ;
69571: LD_VAR 0 3
69575: PPUSH
69576: LD_INT 0
69578: PPUSH
69579: CALL_OW 505
// SetTag ( i , 0 ) ;
69583: LD_VAR 0 3
69587: PPUSH
69588: LD_INT 0
69590: PPUSH
69591: CALL_OW 109
// scaners := scaners diff i ;
69595: LD_ADDR_VAR 0 6
69599: PUSH
69600: LD_VAR 0 6
69604: PUSH
69605: LD_VAR 0 3
69609: DIFF
69610: ST_TO_ADDR
// continue ;
69611: GO 69512
// end ; SetUnitDisplayNumber ( i , timer ) ;
69613: LD_VAR 0 3
69617: PPUSH
69618: LD_VAR 0 7
69622: PPUSH
69623: CALL_OW 505
// end ;
69627: GO 69512
69629: POP
69630: POP
// if not scaners then
69631: LD_VAR 0 6
69635: NOT
69636: IFFALSE 69640
// exit ;
69638: GO 69731
// timer := Dec ( timer ) ;
69640: LD_ADDR_VAR 0 7
69644: PUSH
69645: LD_VAR 0 7
69649: PPUSH
69650: CALL 40691 0 1
69654: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69655: LD_INT 35
69657: PPUSH
69658: CALL_OW 67
// until timer = 0 ;
69662: LD_VAR 0 7
69666: PUSH
69667: LD_INT 0
69669: EQUAL
69670: IFFALSE 69502
// if not scaners then
69672: LD_VAR 0 6
69676: NOT
69677: IFFALSE 69681
// exit ;
69679: GO 69731
// for i in scaners do
69681: LD_ADDR_VAR 0 3
69685: PUSH
69686: LD_VAR 0 6
69690: PUSH
69691: FOR_IN
69692: IFFALSE 69729
// begin SetUnitDisplayNumber ( i , 0 ) ;
69694: LD_VAR 0 3
69698: PPUSH
69699: LD_INT 0
69701: PPUSH
69702: CALL_OW 505
// SetTag ( i , 0 ) ;
69706: LD_VAR 0 3
69710: PPUSH
69711: LD_INT 0
69713: PPUSH
69714: CALL_OW 109
// RevealDetectorMine ( i ) ;
69718: LD_VAR 0 3
69722: PPUSH
69723: CALL 68986 0 1
// end ;
69727: GO 69691
69729: POP
69730: POP
// end ;
69731: LD_VAR 0 2
69735: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
69736: LD_INT 0
69738: PPUSH
// if p1 = mine_detector_mode then
69739: LD_VAR 0 2
69743: PUSH
69744: LD_INT 103
69746: EQUAL
69747: IFFALSE 69758
// DetectMine ( units ) ;
69749: LD_VAR 0 1
69753: PPUSH
69754: CALL 69284 0 1
// end ; end_of_file
69758: LD_VAR 0 7
69762: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69763: LD_VAR 0 1
69767: PUSH
69768: LD_INT 200
69770: DOUBLE
69771: GREATEREQUAL
69772: IFFALSE 69780
69774: LD_INT 299
69776: DOUBLE
69777: LESSEQUAL
69778: IFTRUE 69782
69780: GO 69814
69782: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69783: LD_VAR 0 1
69787: PPUSH
69788: LD_VAR 0 2
69792: PPUSH
69793: LD_VAR 0 3
69797: PPUSH
69798: LD_VAR 0 4
69802: PPUSH
69803: LD_VAR 0 5
69807: PPUSH
69808: CALL 64229 0 5
69812: GO 69891
69814: LD_INT 300
69816: DOUBLE
69817: GREATEREQUAL
69818: IFFALSE 69826
69820: LD_INT 399
69822: DOUBLE
69823: LESSEQUAL
69824: IFTRUE 69828
69826: GO 69890
69828: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69829: LD_VAR 0 1
69833: PPUSH
69834: LD_VAR 0 2
69838: PPUSH
69839: LD_VAR 0 3
69843: PPUSH
69844: LD_VAR 0 4
69848: PPUSH
69849: LD_VAR 0 5
69853: PPUSH
69854: LD_VAR 0 6
69858: PPUSH
69859: LD_VAR 0 7
69863: PPUSH
69864: LD_VAR 0 8
69868: PPUSH
69869: LD_VAR 0 9
69873: PPUSH
69874: LD_VAR 0 10
69878: PPUSH
69879: LD_VAR 0 11
69883: PPUSH
69884: CALL 60113 0 11
69888: GO 69891
69890: POP
// end ;
69891: PPOPN 11
69893: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69894: LD_VAR 0 1
69898: PPUSH
69899: LD_VAR 0 2
69903: PPUSH
69904: LD_VAR 0 3
69908: PPUSH
69909: LD_VAR 0 4
69913: PPUSH
69914: LD_VAR 0 5
69918: PPUSH
69919: CALL 63610 0 5
// end ;
69923: PPOPN 5
69925: END
