// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35198 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 42325 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 60837 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 60717 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1173
// unit := CreateCharacter ( prefix & ident ) else
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
1171: GO 1188
// unit := NewCharacter ( ident ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_VAR 0 1
1182: PPUSH
1183: CALL_OW 25
1187: ST_TO_ADDR
// result := unit ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: LD_VAR 0 5
1197: ST_TO_ADDR
// end ;
1198: LD_VAR 0 4
1202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
// if not side or not nation then
1207: LD_VAR 0 1
1211: NOT
1212: PUSH
1213: LD_VAR 0 2
1217: NOT
1218: OR
1219: IFFALSE 1223
// exit ;
1221: GO 1991
// case nation of nation_american :
1223: LD_VAR 0 2
1227: PUSH
1228: LD_INT 1
1230: DOUBLE
1231: EQUAL
1232: IFTRUE 1236
1234: GO 1450
1236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1237: LD_ADDR_VAR 0 4
1241: PUSH
1242: LD_INT 35
1244: PUSH
1245: LD_INT 45
1247: PUSH
1248: LD_INT 46
1250: PUSH
1251: LD_INT 47
1253: PUSH
1254: LD_INT 82
1256: PUSH
1257: LD_INT 83
1259: PUSH
1260: LD_INT 84
1262: PUSH
1263: LD_INT 85
1265: PUSH
1266: LD_INT 86
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: LD_INT 2
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 15
1280: PUSH
1281: LD_INT 16
1283: PUSH
1284: LD_INT 7
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: LD_INT 10
1295: PUSH
1296: LD_INT 14
1298: PUSH
1299: LD_INT 20
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 22
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 32
1313: PUSH
1314: LD_INT 27
1316: PUSH
1317: LD_INT 36
1319: PUSH
1320: LD_INT 69
1322: PUSH
1323: LD_INT 39
1325: PUSH
1326: LD_INT 34
1328: PUSH
1329: LD_INT 40
1331: PUSH
1332: LD_INT 48
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: LD_INT 50
1340: PUSH
1341: LD_INT 51
1343: PUSH
1344: LD_INT 52
1346: PUSH
1347: LD_INT 53
1349: PUSH
1350: LD_INT 54
1352: PUSH
1353: LD_INT 55
1355: PUSH
1356: LD_INT 56
1358: PUSH
1359: LD_INT 57
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: LD_INT 59
1367: PUSH
1368: LD_INT 60
1370: PUSH
1371: LD_INT 61
1373: PUSH
1374: LD_INT 62
1376: PUSH
1377: LD_INT 80
1379: PUSH
1380: LD_INT 82
1382: PUSH
1383: LD_INT 83
1385: PUSH
1386: LD_INT 84
1388: PUSH
1389: LD_INT 85
1391: PUSH
1392: LD_INT 86
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
1448: GO 1915
1450: LD_INT 2
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1684
1458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 35
1466: PUSH
1467: LD_INT 45
1469: PUSH
1470: LD_INT 46
1472: PUSH
1473: LD_INT 47
1475: PUSH
1476: LD_INT 82
1478: PUSH
1479: LD_INT 83
1481: PUSH
1482: LD_INT 84
1484: PUSH
1485: LD_INT 85
1487: PUSH
1488: LD_INT 87
1490: PUSH
1491: LD_INT 70
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 11
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: LD_INT 6
1511: PUSH
1512: LD_INT 15
1514: PUSH
1515: LD_INT 18
1517: PUSH
1518: LD_INT 7
1520: PUSH
1521: LD_INT 17
1523: PUSH
1524: LD_INT 8
1526: PUSH
1527: LD_INT 20
1529: PUSH
1530: LD_INT 21
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_INT 72
1538: PUSH
1539: LD_INT 26
1541: PUSH
1542: LD_INT 69
1544: PUSH
1545: LD_INT 39
1547: PUSH
1548: LD_INT 40
1550: PUSH
1551: LD_INT 41
1553: PUSH
1554: LD_INT 42
1556: PUSH
1557: LD_INT 43
1559: PUSH
1560: LD_INT 48
1562: PUSH
1563: LD_INT 49
1565: PUSH
1566: LD_INT 50
1568: PUSH
1569: LD_INT 51
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 53
1577: PUSH
1578: LD_INT 54
1580: PUSH
1581: LD_INT 55
1583: PUSH
1584: LD_INT 56
1586: PUSH
1587: LD_INT 60
1589: PUSH
1590: LD_INT 61
1592: PUSH
1593: LD_INT 62
1595: PUSH
1596: LD_INT 66
1598: PUSH
1599: LD_INT 67
1601: PUSH
1602: LD_INT 68
1604: PUSH
1605: LD_INT 81
1607: PUSH
1608: LD_INT 82
1610: PUSH
1611: LD_INT 83
1613: PUSH
1614: LD_INT 84
1616: PUSH
1617: LD_INT 85
1619: PUSH
1620: LD_INT 87
1622: PUSH
1623: LD_INT 88
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: ST_TO_ADDR
1682: GO 1915
1684: LD_INT 3
1686: DOUBLE
1687: EQUAL
1688: IFTRUE 1692
1690: GO 1914
1692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1693: LD_ADDR_VAR 0 4
1697: PUSH
1698: LD_INT 46
1700: PUSH
1701: LD_INT 47
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 82
1712: PUSH
1713: LD_INT 83
1715: PUSH
1716: LD_INT 84
1718: PUSH
1719: LD_INT 85
1721: PUSH
1722: LD_INT 86
1724: PUSH
1725: LD_INT 11
1727: PUSH
1728: LD_INT 9
1730: PUSH
1731: LD_INT 20
1733: PUSH
1734: LD_INT 19
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 24
1742: PUSH
1743: LD_INT 22
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: LD_INT 28
1751: PUSH
1752: LD_INT 29
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 31
1760: PUSH
1761: LD_INT 37
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: LD_INT 27
1772: PUSH
1773: LD_INT 33
1775: PUSH
1776: LD_INT 69
1778: PUSH
1779: LD_INT 39
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 40
1787: PUSH
1788: LD_INT 71
1790: PUSH
1791: LD_INT 23
1793: PUSH
1794: LD_INT 44
1796: PUSH
1797: LD_INT 48
1799: PUSH
1800: LD_INT 49
1802: PUSH
1803: LD_INT 50
1805: PUSH
1806: LD_INT 51
1808: PUSH
1809: LD_INT 52
1811: PUSH
1812: LD_INT 53
1814: PUSH
1815: LD_INT 54
1817: PUSH
1818: LD_INT 55
1820: PUSH
1821: LD_INT 56
1823: PUSH
1824: LD_INT 57
1826: PUSH
1827: LD_INT 58
1829: PUSH
1830: LD_INT 59
1832: PUSH
1833: LD_INT 63
1835: PUSH
1836: LD_INT 64
1838: PUSH
1839: LD_INT 65
1841: PUSH
1842: LD_INT 82
1844: PUSH
1845: LD_INT 83
1847: PUSH
1848: LD_INT 84
1850: PUSH
1851: LD_INT 85
1853: PUSH
1854: LD_INT 86
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
1912: GO 1915
1914: POP
// if state > - 1 and state < 3 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 1
1922: NEG
1923: GREATER
1924: PUSH
1925: LD_VAR 0 3
1929: PUSH
1930: LD_INT 3
1932: LESS
1933: AND
1934: IFFALSE 1991
// for i in result do
1936: LD_ADDR_VAR 0 5
1940: PUSH
1941: LD_VAR 0 4
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1989
// if GetTech ( i , side ) <> state then
1949: LD_VAR 0 5
1953: PPUSH
1954: LD_VAR 0 1
1958: PPUSH
1959: CALL_OW 321
1963: PUSH
1964: LD_VAR 0 3
1968: NONEQUAL
1969: IFFALSE 1987
// result := result diff i ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_VAR 0 4
1980: PUSH
1981: LD_VAR 0 5
1985: DIFF
1986: ST_TO_ADDR
1987: GO 1946
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 4
1995: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1996: LD_INT 0
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := true ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 2
2018: PPUSH
2019: CALL_OW 480
2023: ST_TO_ADDR
// if not tmp then
2024: LD_VAR 0 5
2028: NOT
2029: IFFALSE 2033
// exit ;
2031: GO 2082
// for i in tmp do
2033: LD_ADDR_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2080
// if GetTech ( i , side ) <> state_researched then
2046: LD_VAR 0 4
2050: PPUSH
2051: LD_VAR 0 1
2055: PPUSH
2056: CALL_OW 321
2060: PUSH
2061: LD_INT 2
2063: NONEQUAL
2064: IFFALSE 2078
// begin result := false ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// exit ;
2074: POP
2075: POP
2076: GO 2082
// end ;
2078: GO 2043
2080: POP
2081: POP
// end ;
2082: LD_VAR 0 3
2086: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2087: LD_INT 0
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2102: LD_VAR 0 1
2106: NOT
2107: PUSH
2108: LD_VAR 0 1
2112: PPUSH
2113: CALL_OW 257
2117: PUSH
2118: LD_INT 9
2120: NONEQUAL
2121: OR
2122: IFFALSE 2126
// exit ;
2124: GO 2699
// side := GetSide ( unit ) ;
2126: LD_ADDR_VAR 0 9
2130: PUSH
2131: LD_VAR 0 1
2135: PPUSH
2136: CALL_OW 255
2140: ST_TO_ADDR
// tech_space := tech_spacanom ;
2141: LD_ADDR_VAR 0 12
2145: PUSH
2146: LD_INT 29
2148: ST_TO_ADDR
// tech_time := tech_taurad ;
2149: LD_ADDR_VAR 0 13
2153: PUSH
2154: LD_INT 28
2156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2157: LD_ADDR_VAR 0 11
2161: PUSH
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 310
2171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2172: LD_VAR 0 11
2176: PPUSH
2177: CALL_OW 247
2181: PUSH
2182: LD_INT 2
2184: EQUAL
2185: IFFALSE 2189
// exit ;
2187: GO 2699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2189: LD_ADDR_VAR 0 8
2193: PUSH
2194: LD_INT 81
2196: PUSH
2197: LD_VAR 0 9
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: LD_INT 21
2211: PUSH
2212: LD_INT 3
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 69
2231: ST_TO_ADDR
// if not tmp then
2232: LD_VAR 0 8
2236: NOT
2237: IFFALSE 2241
// exit ;
2239: GO 2699
// if in_unit then
2241: LD_VAR 0 11
2245: IFFALSE 2269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2247: LD_ADDR_VAR 0 10
2251: PUSH
2252: LD_VAR 0 8
2256: PPUSH
2257: LD_VAR 0 11
2261: PPUSH
2262: CALL_OW 74
2266: ST_TO_ADDR
2267: GO 2289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2269: LD_ADDR_VAR 0 10
2273: PUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: LD_VAR 0 1
2283: PPUSH
2284: CALL_OW 74
2288: ST_TO_ADDR
// if not enemy then
2289: LD_VAR 0 10
2293: NOT
2294: IFFALSE 2298
// exit ;
2296: GO 2699
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2298: LD_VAR 0 11
2302: PUSH
2303: LD_VAR 0 11
2307: PPUSH
2308: LD_VAR 0 10
2312: PPUSH
2313: CALL_OW 296
2317: PUSH
2318: LD_INT 13
2320: GREATER
2321: AND
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 296
2337: PUSH
2338: LD_INT 12
2340: GREATER
2341: OR
2342: IFFALSE 2346
// exit ;
2344: GO 2699
// missile := [ 1 ] ;
2346: LD_ADDR_VAR 0 14
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2357: LD_VAR 0 9
2361: PPUSH
2362: LD_VAR 0 12
2366: PPUSH
2367: CALL_OW 325
2371: IFFALSE 2400
// missile := Replace ( missile , missile + 1 , 2 ) ;
2373: LD_ADDR_VAR 0 14
2377: PUSH
2378: LD_VAR 0 14
2382: PPUSH
2383: LD_VAR 0 14
2387: PUSH
2388: LD_INT 1
2390: PLUS
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: CALL_OW 1
2399: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2400: LD_VAR 0 9
2404: PPUSH
2405: LD_VAR 0 13
2409: PPUSH
2410: CALL_OW 325
2414: PUSH
2415: LD_VAR 0 10
2419: PPUSH
2420: CALL_OW 255
2424: PPUSH
2425: LD_VAR 0 13
2429: PPUSH
2430: CALL_OW 325
2434: NOT
2435: AND
2436: IFFALSE 2465
// missile := Replace ( missile , missile + 1 , 3 ) ;
2438: LD_ADDR_VAR 0 14
2442: PUSH
2443: LD_VAR 0 14
2447: PPUSH
2448: LD_VAR 0 14
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 1
2464: ST_TO_ADDR
// if missile < 2 then
2465: LD_VAR 0 14
2469: PUSH
2470: LD_INT 2
2472: LESS
2473: IFFALSE 2477
// exit ;
2475: GO 2699
// x := GetX ( enemy ) ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 10
2486: PPUSH
2487: CALL_OW 250
2491: ST_TO_ADDR
// y := GetY ( enemy ) ;
2492: LD_ADDR_VAR 0 5
2496: PUSH
2497: LD_VAR 0 10
2501: PPUSH
2502: CALL_OW 251
2506: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2507: LD_ADDR_VAR 0 6
2511: PUSH
2512: LD_VAR 0 4
2516: PUSH
2517: LD_INT 1
2519: NEG
2520: PPUSH
2521: LD_INT 1
2523: PPUSH
2524: CALL_OW 12
2528: PLUS
2529: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_VAR 0 5
2539: PUSH
2540: LD_INT 1
2542: NEG
2543: PPUSH
2544: LD_INT 1
2546: PPUSH
2547: CALL_OW 12
2551: PLUS
2552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2553: LD_VAR 0 6
2557: PPUSH
2558: LD_VAR 0 7
2562: PPUSH
2563: CALL_OW 488
2567: NOT
2568: IFFALSE 2590
// begin _x := x ;
2570: LD_ADDR_VAR 0 6
2574: PUSH
2575: LD_VAR 0 4
2579: ST_TO_ADDR
// _y := y ;
2580: LD_ADDR_VAR 0 7
2584: PUSH
2585: LD_VAR 0 5
2589: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2590: LD_ADDR_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_VAR 0 14
2602: PPUSH
2603: CALL_OW 12
2607: ST_TO_ADDR
// case i of 1 :
2608: LD_VAR 0 3
2612: PUSH
2613: LD_INT 1
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2638
2621: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2622: LD_VAR 0 1
2626: PPUSH
2627: LD_VAR 0 10
2631: PPUSH
2632: CALL_OW 115
2636: GO 2699
2638: LD_INT 2
2640: DOUBLE
2641: EQUAL
2642: IFTRUE 2646
2644: GO 2668
2646: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_VAR 0 7
2661: PPUSH
2662: CALL_OW 153
2666: GO 2699
2668: LD_INT 3
2670: DOUBLE
2671: EQUAL
2672: IFTRUE 2676
2674: GO 2698
2676: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2677: LD_VAR 0 1
2681: PPUSH
2682: LD_VAR 0 6
2686: PPUSH
2687: LD_VAR 0 7
2691: PPUSH
2692: CALL_OW 154
2696: GO 2699
2698: POP
// end ;
2699: LD_VAR 0 2
2703: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
// if not unit or not building then
2712: LD_VAR 0 1
2716: NOT
2717: PUSH
2718: LD_VAR 0 2
2722: NOT
2723: OR
2724: IFFALSE 2728
// exit ;
2726: GO 2886
// x := GetX ( building ) ;
2728: LD_ADDR_VAR 0 5
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL_OW 250
2742: ST_TO_ADDR
// y := GetY ( building ) ;
2743: LD_ADDR_VAR 0 6
2747: PUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 251
2757: ST_TO_ADDR
// for i = 0 to 5 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 0
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 5
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2884
// begin _x := ShiftX ( x , i , 3 ) ;
2774: LD_ADDR_VAR 0 7
2778: PUSH
2779: LD_VAR 0 5
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: LD_INT 3
2791: PPUSH
2792: CALL_OW 272
2796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2797: LD_ADDR_VAR 0 8
2801: PUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: CALL_OW 273
2819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2820: LD_VAR 0 7
2824: PPUSH
2825: LD_VAR 0 8
2829: PPUSH
2830: CALL_OW 488
2834: NOT
2835: IFFALSE 2839
// continue ;
2837: GO 2771
// if HexInfo ( _x , _y ) = 0 then
2839: LD_VAR 0 7
2843: PPUSH
2844: LD_VAR 0 8
2848: PPUSH
2849: CALL_OW 428
2853: PUSH
2854: LD_INT 0
2856: EQUAL
2857: IFFALSE 2882
// begin ComMoveXY ( unit , _x , _y ) ;
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 7
2868: PPUSH
2869: LD_VAR 0 8
2873: PPUSH
2874: CALL_OW 111
// exit ;
2878: POP
2879: POP
2880: GO 2886
// end ; end ;
2882: GO 2771
2884: POP
2885: POP
// end ;
2886: LD_VAR 0 3
2890: RET
// export function ScanBase ( side , base_area ) ; begin
2891: LD_INT 0
2893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: LD_INT 81
2906: PUSH
2907: LD_VAR 0 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 70
2920: ST_TO_ADDR
// end ;
2921: LD_VAR 0 3
2925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
2930: PPUSH
2931: PPUSH
// result := false ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// side := GetSide ( unit ) ;
2940: LD_ADDR_VAR 0 3
2944: PUSH
2945: LD_VAR 0 1
2949: PPUSH
2950: CALL_OW 255
2954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 248
2969: ST_TO_ADDR
// case nat of 1 :
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: DOUBLE
2978: EQUAL
2979: IFTRUE 2983
2981: GO 2994
2983: POP
// tech := tech_lassight ; 2 :
2984: LD_ADDR_VAR 0 5
2988: PUSH
2989: LD_INT 12
2991: ST_TO_ADDR
2992: GO 3033
2994: LD_INT 2
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3013
3002: POP
// tech := tech_mortar ; 3 :
3003: LD_ADDR_VAR 0 5
3007: PUSH
3008: LD_INT 41
3010: ST_TO_ADDR
3011: GO 3033
3013: LD_INT 3
3015: DOUBLE
3016: EQUAL
3017: IFTRUE 3021
3019: GO 3032
3021: POP
// tech := tech_bazooka ; end ;
3022: LD_ADDR_VAR 0 5
3026: PUSH
3027: LD_INT 44
3029: ST_TO_ADDR
3030: GO 3033
3032: POP
// if Researched ( side , tech ) then
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_VAR 0 5
3042: PPUSH
3043: CALL_OW 325
3047: IFFALSE 3074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 8
3059: PUSH
3060: LD_INT 9
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_VAR 0 4
3072: ARRAY
3073: ST_TO_ADDR
// end ;
3074: LD_VAR 0 2
3078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// if not mines then
3084: LD_VAR 0 2
3088: NOT
3089: IFFALSE 3093
// exit ;
3091: GO 3237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3093: LD_ADDR_VAR 0 5
3097: PUSH
3098: LD_INT 81
3100: PUSH
3101: LD_VAR 0 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 21
3115: PUSH
3116: LD_INT 3
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// for i in mines do
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_VAR 0 2
3145: PUSH
3146: FOR_IN
3147: IFFALSE 3235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3149: LD_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_VAR 0 4
3162: PUSH
3163: LD_INT 2
3165: ARRAY
3166: PPUSH
3167: CALL_OW 458
3171: NOT
3172: IFFALSE 3176
// continue ;
3174: GO 3146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3176: LD_VAR 0 4
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: LD_VAR 0 5
3203: IN
3204: IFFALSE 3233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3206: LD_VAR 0 4
3210: PUSH
3211: LD_INT 1
3213: ARRAY
3214: PPUSH
3215: LD_VAR 0 4
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 1
3228: PPUSH
3229: CALL_OW 456
// end ;
3233: GO 3146
3235: POP
3236: POP
// end ;
3237: LD_VAR 0 3
3241: RET
// export function Count ( array ) ; var i ; begin
3242: LD_INT 0
3244: PPUSH
3245: PPUSH
// result := 0 ;
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// for i in array do
3254: LD_ADDR_VAR 0 3
3258: PUSH
3259: LD_VAR 0 1
3263: PUSH
3264: FOR_IN
3265: IFFALSE 3289
// if i then
3267: LD_VAR 0 3
3271: IFFALSE 3287
// result := result + 1 ;
3273: LD_ADDR_VAR 0 2
3277: PUSH
3278: LD_VAR 0 2
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: ST_TO_ADDR
3287: GO 3264
3289: POP
3290: POP
// end ;
3291: LD_VAR 0 2
3295: RET
// export function IsEmpty ( building ) ; begin
3296: LD_INT 0
3298: PPUSH
// if not building then
3299: LD_VAR 0 1
3303: NOT
3304: IFFALSE 3308
// exit ;
3306: GO 3351
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: LD_VAR 0 1
3317: PUSH
3318: LD_INT 22
3320: PUSH
3321: LD_VAR 0 1
3325: PPUSH
3326: CALL_OW 255
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 58
3337: PUSH
3338: EMPTY
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: IN
3350: ST_TO_ADDR
// end ;
3351: LD_VAR 0 2
3355: RET
// export function IsNotFull ( building ) ; var places ; begin
3356: LD_INT 0
3358: PPUSH
3359: PPUSH
// if not building then
3360: LD_VAR 0 1
3364: NOT
3365: IFFALSE 3369
// exit ;
3367: GO 3540
// result := false ;
3369: LD_ADDR_VAR 0 2
3373: PUSH
3374: LD_INT 0
3376: ST_TO_ADDR
// places := 0 ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_INT 0
3384: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 266
3394: PUSH
3395: LD_INT 0
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3457
3401: LD_INT 1
3403: DOUBLE
3404: EQUAL
3405: IFTRUE 3457
3407: LD_INT 6
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3457
3413: LD_INT 7
3415: DOUBLE
3416: EQUAL
3417: IFTRUE 3457
3419: LD_INT 8
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3457
3425: LD_INT 4
3427: DOUBLE
3428: EQUAL
3429: IFTRUE 3457
3431: LD_INT 5
3433: DOUBLE
3434: EQUAL
3435: IFTRUE 3457
3437: LD_INT 2
3439: DOUBLE
3440: EQUAL
3441: IFTRUE 3457
3443: LD_INT 3
3445: DOUBLE
3446: EQUAL
3447: IFTRUE 3457
3449: LD_INT 35
3451: DOUBLE
3452: EQUAL
3453: IFTRUE 3457
3455: GO 3468
3457: POP
// places := 6 ; b_bunker , b_breastwork :
3458: LD_ADDR_VAR 0 3
3462: PUSH
3463: LD_INT 6
3465: ST_TO_ADDR
3466: GO 3513
3468: LD_INT 32
3470: DOUBLE
3471: EQUAL
3472: IFTRUE 3482
3474: LD_INT 31
3476: DOUBLE
3477: EQUAL
3478: IFTRUE 3482
3480: GO 3493
3482: POP
// places := 1 ; b_control_tower :
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_INT 1
3490: ST_TO_ADDR
3491: GO 3513
3493: LD_INT 36
3495: DOUBLE
3496: EQUAL
3497: IFTRUE 3501
3499: GO 3512
3501: POP
// places := 3 ; end ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
3510: GO 3513
3512: POP
// if places then
3513: LD_VAR 0 3
3517: IFFALSE 3540
// result := UnitsInside ( building ) < places ;
3519: LD_ADDR_VAR 0 2
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: CALL_OW 313
3533: PUSH
3534: LD_VAR 0 3
3538: LESS
3539: ST_TO_ADDR
// end ;
3540: LD_VAR 0 2
3544: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3545: LD_INT 0
3547: PPUSH
3548: PPUSH
3549: PPUSH
3550: PPUSH
// tmp := [ ] ;
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: EMPTY
3557: ST_TO_ADDR
// list := [ ] ;
3558: LD_ADDR_VAR 0 5
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i = 16 to 25 do
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: DOUBLE
3571: LD_INT 16
3573: DEC
3574: ST_TO_ADDR
3575: LD_INT 25
3577: PUSH
3578: FOR_TO
3579: IFFALSE 3652
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: LD_VAR 0 3
3590: PUSH
3591: LD_INT 22
3593: PUSH
3594: LD_VAR 0 1
3598: PPUSH
3599: CALL_OW 255
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: LD_INT 91
3610: PUSH
3611: LD_VAR 0 1
3615: PUSH
3616: LD_INT 6
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_VAR 0 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: EMPTY
3642: LIST
3643: PPUSH
3644: CALL_OW 69
3648: ADD
3649: ST_TO_ADDR
3650: GO 3578
3652: POP
3653: POP
// for i = 1 to tmp do
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_VAR 0 3
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3758
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3672: LD_ADDR_VAR 0 5
3676: PUSH
3677: LD_VAR 0 5
3681: PUSH
3682: LD_VAR 0 3
3686: PUSH
3687: LD_VAR 0 4
3691: ARRAY
3692: PPUSH
3693: CALL_OW 266
3697: PUSH
3698: LD_VAR 0 3
3702: PUSH
3703: LD_VAR 0 4
3707: ARRAY
3708: PPUSH
3709: CALL_OW 250
3713: PUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_VAR 0 4
3723: ARRAY
3724: PPUSH
3725: CALL_OW 251
3729: PUSH
3730: LD_VAR 0 3
3734: PUSH
3735: LD_VAR 0 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 254
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: EMPTY
3753: LIST
3754: ADD
3755: ST_TO_ADDR
3756: GO 3669
3758: POP
3759: POP
// result := list ;
3760: LD_ADDR_VAR 0 2
3764: PUSH
3765: LD_VAR 0 5
3769: ST_TO_ADDR
// end ;
3770: LD_VAR 0 2
3774: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3775: LD_INT 0
3777: PPUSH
3778: PPUSH
3779: PPUSH
3780: PPUSH
3781: PPUSH
3782: PPUSH
3783: PPUSH
// if not factory then
3784: LD_VAR 0 1
3788: NOT
3789: IFFALSE 3793
// exit ;
3791: GO 4386
// if control = control_apeman then
3793: LD_VAR 0 4
3797: PUSH
3798: LD_INT 5
3800: EQUAL
3801: IFFALSE 3910
// begin tmp := UnitsInside ( factory ) ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 1
3812: PPUSH
3813: CALL_OW 313
3817: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3818: LD_VAR 0 8
3822: PPUSH
3823: LD_INT 25
3825: PUSH
3826: LD_INT 12
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PPUSH
3833: CALL_OW 72
3837: NOT
3838: IFFALSE 3848
// control := control_manual ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3848: LD_ADDR_VAR 0 8
3852: PUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL 3545 0 1
3862: ST_TO_ADDR
// if tmp then
3863: LD_VAR 0 8
3867: IFFALSE 3910
// begin for i in tmp do
3869: LD_ADDR_VAR 0 7
3873: PUSH
3874: LD_VAR 0 8
3878: PUSH
3879: FOR_IN
3880: IFFALSE 3908
// if i [ 1 ] = b_ext_radio then
3882: LD_VAR 0 7
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PUSH
3891: LD_INT 22
3893: EQUAL
3894: IFFALSE 3906
// begin control := control_remote ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_INT 2
3903: ST_TO_ADDR
// break ;
3904: GO 3908
// end ;
3906: GO 3879
3908: POP
3909: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_VAR 0 2
3919: PPUSH
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_VAR 0 5
3934: PPUSH
3935: CALL_OW 448
3939: IFFALSE 3974
// begin result := [ chassis , engine , control , weapon ] ;
3941: LD_ADDR_VAR 0 6
3945: PUSH
3946: LD_VAR 0 2
3950: PUSH
3951: LD_VAR 0 3
3955: PUSH
3956: LD_VAR 0 4
3960: PUSH
3961: LD_VAR 0 5
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: ST_TO_ADDR
// exit ;
3972: GO 4386
// end ; _chassis := AvailableChassisList ( factory ) ;
3974: LD_ADDR_VAR 0 9
3978: PUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 475
3988: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3989: LD_ADDR_VAR 0 11
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 476
4003: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4004: LD_ADDR_VAR 0 12
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 477
4018: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4019: LD_ADDR_VAR 0 10
4023: PUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 478
4033: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4034: LD_VAR 0 9
4038: NOT
4039: PUSH
4040: LD_VAR 0 11
4044: NOT
4045: OR
4046: PUSH
4047: LD_VAR 0 12
4051: NOT
4052: OR
4053: PUSH
4054: LD_VAR 0 10
4058: NOT
4059: OR
4060: IFFALSE 4095
// begin result := [ chassis , engine , control , weapon ] ;
4062: LD_ADDR_VAR 0 6
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
// exit ;
4093: GO 4386
// end ; if not chassis in _chassis then
4095: LD_VAR 0 2
4099: PUSH
4100: LD_VAR 0 9
4104: IN
4105: NOT
4106: IFFALSE 4132
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_VAR 0 9
4117: PUSH
4118: LD_INT 1
4120: PPUSH
4121: LD_VAR 0 9
4125: PPUSH
4126: CALL_OW 12
4130: ARRAY
4131: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4132: LD_VAR 0 2
4136: PPUSH
4137: LD_VAR 0 3
4141: PPUSH
4142: CALL 4391 0 2
4146: NOT
4147: IFFALSE 4206
// repeat engine := _engine [ 1 ] ;
4149: LD_ADDR_VAR 0 3
4153: PUSH
4154: LD_VAR 0 11
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4163: LD_ADDR_VAR 0 11
4167: PUSH
4168: LD_VAR 0 11
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: CALL_OW 3
4180: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4181: LD_VAR 0 2
4185: PPUSH
4186: LD_VAR 0 3
4190: PPUSH
4191: CALL 4391 0 2
4195: PUSH
4196: LD_VAR 0 11
4200: PUSH
4201: EMPTY
4202: EQUAL
4203: OR
4204: IFFALSE 4149
// if not control in _control then
4206: LD_VAR 0 4
4210: PUSH
4211: LD_VAR 0 12
4215: IN
4216: NOT
4217: IFFALSE 4243
// control := _control [ rand ( 1 , _control ) ] ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_VAR 0 12
4228: PUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_VAR 0 12
4236: PPUSH
4237: CALL_OW 12
4241: ARRAY
4242: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4243: LD_VAR 0 2
4247: PPUSH
4248: LD_VAR 0 5
4252: PPUSH
4253: CALL 4611 0 2
4257: NOT
4258: IFFALSE 4317
// repeat weapon := _weapon [ 1 ] ;
4260: LD_ADDR_VAR 0 5
4264: PUSH
4265: LD_VAR 0 10
4269: PUSH
4270: LD_INT 1
4272: ARRAY
4273: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4274: LD_ADDR_VAR 0 10
4278: PUSH
4279: LD_VAR 0 10
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL_OW 3
4291: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4292: LD_VAR 0 2
4296: PPUSH
4297: LD_VAR 0 5
4301: PPUSH
4302: CALL 4611 0 2
4306: PUSH
4307: LD_VAR 0 10
4311: PUSH
4312: EMPTY
4313: EQUAL
4314: OR
4315: IFFALSE 4260
// result := [ ] ;
4317: LD_ADDR_VAR 0 6
4321: PUSH
4322: EMPTY
4323: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4324: LD_VAR 0 1
4328: PPUSH
4329: LD_VAR 0 2
4333: PPUSH
4334: LD_VAR 0 3
4338: PPUSH
4339: LD_VAR 0 4
4343: PPUSH
4344: LD_VAR 0 5
4348: PPUSH
4349: CALL_OW 448
4353: IFFALSE 4386
// result := [ chassis , engine , control , weapon ] ;
4355: LD_ADDR_VAR 0 6
4359: PUSH
4360: LD_VAR 0 2
4364: PUSH
4365: LD_VAR 0 3
4369: PUSH
4370: LD_VAR 0 4
4374: PUSH
4375: LD_VAR 0 5
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: ST_TO_ADDR
// end ;
4386: LD_VAR 0 6
4390: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4391: LD_INT 0
4393: PPUSH
// if not chassis or not engine then
4394: LD_VAR 0 1
4398: NOT
4399: PUSH
4400: LD_VAR 0 2
4404: NOT
4405: OR
4406: IFFALSE 4410
// exit ;
4408: GO 4606
// case engine of engine_solar :
4410: LD_VAR 0 2
4414: PUSH
4415: LD_INT 2
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4461
4423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 11
4431: PUSH
4432: LD_INT 12
4434: PUSH
4435: LD_INT 13
4437: PUSH
4438: LD_INT 14
4440: PUSH
4441: LD_INT 1
4443: PUSH
4444: LD_INT 2
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: ST_TO_ADDR
4459: GO 4590
4461: LD_INT 1
4463: DOUBLE
4464: EQUAL
4465: IFTRUE 4469
4467: GO 4531
4469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: LD_INT 11
4477: PUSH
4478: LD_INT 12
4480: PUSH
4481: LD_INT 13
4483: PUSH
4484: LD_INT 14
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: LD_INT 2
4492: PUSH
4493: LD_INT 3
4495: PUSH
4496: LD_INT 4
4498: PUSH
4499: LD_INT 5
4501: PUSH
4502: LD_INT 21
4504: PUSH
4505: LD_INT 23
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 24
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
4529: GO 4590
4531: LD_INT 3
4533: DOUBLE
4534: EQUAL
4535: IFTRUE 4539
4537: GO 4589
4539: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: LD_INT 13
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: LD_INT 4
4559: PUSH
4560: LD_INT 5
4562: PUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 22
4568: PUSH
4569: LD_INT 23
4571: PUSH
4572: LD_INT 24
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: ST_TO_ADDR
4587: GO 4590
4589: POP
// result := ( chassis in result ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_VAR 0 1
4599: PUSH
4600: LD_VAR 0 3
4604: IN
4605: ST_TO_ADDR
// end ;
4606: LD_VAR 0 3
4610: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4611: LD_INT 0
4613: PPUSH
// if not chassis or not weapon then
4614: LD_VAR 0 1
4618: NOT
4619: PUSH
4620: LD_VAR 0 2
4624: NOT
4625: OR
4626: IFFALSE 4630
// exit ;
4628: GO 5690
// case weapon of us_machine_gun :
4630: LD_VAR 0 2
4634: PUSH
4635: LD_INT 2
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4673
4643: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: LD_INT 4
4660: PUSH
4661: LD_INT 5
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: ST_TO_ADDR
4671: GO 5674
4673: LD_INT 3
4675: DOUBLE
4676: EQUAL
4677: IFTRUE 4681
4679: GO 4711
4681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: LD_INT 2
4692: PUSH
4693: LD_INT 3
4695: PUSH
4696: LD_INT 4
4698: PUSH
4699: LD_INT 5
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 5674
4711: LD_INT 11
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4749
4719: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4720: LD_ADDR_VAR 0 3
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: LD_INT 5
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 5674
4749: LD_INT 4
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 4
4771: PUSH
4772: LD_INT 5
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5674
4783: LD_INT 5
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 5674
4817: LD_INT 9
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4851
4825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 2
4833: PUSH
4834: LD_INT 3
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: LD_INT 5
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 5674
4851: LD_INT 7
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4885
4859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_INT 2
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: LD_INT 4
4873: PUSH
4874: LD_INT 5
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
4883: GO 5674
4885: LD_INT 12
4887: DOUBLE
4888: EQUAL
4889: IFTRUE 4893
4891: GO 4919
4893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: LD_INT 2
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 5
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
4917: GO 5674
4919: LD_INT 13
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4953
4927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: LD_INT 2
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 5
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 5674
4953: LD_INT 14
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4979
4961: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 4
4969: PUSH
4970: LD_INT 5
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5674
4979: LD_INT 6
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5005
4987: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 4
4995: PUSH
4996: LD_INT 5
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: ST_TO_ADDR
5003: GO 5674
5005: LD_INT 10
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5031
5013: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5014: LD_ADDR_VAR 0 3
5018: PUSH
5019: LD_INT 4
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: ST_TO_ADDR
5029: GO 5674
5031: LD_INT 22
5033: DOUBLE
5034: EQUAL
5035: IFTRUE 5039
5037: GO 5065
5039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5040: LD_ADDR_VAR 0 3
5044: PUSH
5045: LD_INT 11
5047: PUSH
5048: LD_INT 12
5050: PUSH
5051: LD_INT 13
5053: PUSH
5054: LD_INT 14
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
5063: GO 5674
5065: LD_INT 23
5067: DOUBLE
5068: EQUAL
5069: IFTRUE 5073
5071: GO 5099
5073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5074: LD_ADDR_VAR 0 3
5078: PUSH
5079: LD_INT 11
5081: PUSH
5082: LD_INT 12
5084: PUSH
5085: LD_INT 13
5087: PUSH
5088: LD_INT 14
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: ST_TO_ADDR
5097: GO 5674
5099: LD_INT 24
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5133
5107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5108: LD_ADDR_VAR 0 3
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: LD_INT 12
5118: PUSH
5119: LD_INT 13
5121: PUSH
5122: LD_INT 14
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: ST_TO_ADDR
5131: GO 5674
5133: LD_INT 30
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5141
5139: GO 5167
5141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: LD_INT 11
5149: PUSH
5150: LD_INT 12
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: LD_INT 14
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: ST_TO_ADDR
5165: GO 5674
5167: LD_INT 25
5169: DOUBLE
5170: EQUAL
5171: IFTRUE 5175
5173: GO 5193
5175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5176: LD_ADDR_VAR 0 3
5180: PUSH
5181: LD_INT 13
5183: PUSH
5184: LD_INT 14
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: ST_TO_ADDR
5191: GO 5674
5193: LD_INT 27
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5219
5201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_INT 13
5209: PUSH
5210: LD_INT 14
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: ST_TO_ADDR
5217: GO 5674
5219: LD_INT 92
5221: DOUBLE
5222: EQUAL
5223: IFTRUE 5227
5225: GO 5253
5227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5228: LD_ADDR_VAR 0 3
5232: PUSH
5233: LD_INT 11
5235: PUSH
5236: LD_INT 12
5238: PUSH
5239: LD_INT 13
5241: PUSH
5242: LD_INT 14
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: ST_TO_ADDR
5251: GO 5674
5253: LD_INT 28
5255: DOUBLE
5256: EQUAL
5257: IFTRUE 5261
5259: GO 5279
5261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5262: LD_ADDR_VAR 0 3
5266: PUSH
5267: LD_INT 13
5269: PUSH
5270: LD_INT 14
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: ST_TO_ADDR
5277: GO 5674
5279: LD_INT 29
5281: DOUBLE
5282: EQUAL
5283: IFTRUE 5287
5285: GO 5305
5287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_INT 13
5295: PUSH
5296: LD_INT 14
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: ST_TO_ADDR
5303: GO 5674
5305: LD_INT 31
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5313
5311: GO 5331
5313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5314: LD_ADDR_VAR 0 3
5318: PUSH
5319: LD_INT 13
5321: PUSH
5322: LD_INT 14
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: ST_TO_ADDR
5329: GO 5674
5331: LD_INT 26
5333: DOUBLE
5334: EQUAL
5335: IFTRUE 5339
5337: GO 5357
5339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5340: LD_ADDR_VAR 0 3
5344: PUSH
5345: LD_INT 13
5347: PUSH
5348: LD_INT 14
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: ST_TO_ADDR
5355: GO 5674
5357: LD_INT 42
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5391
5365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5366: LD_ADDR_VAR 0 3
5370: PUSH
5371: LD_INT 21
5373: PUSH
5374: LD_INT 22
5376: PUSH
5377: LD_INT 23
5379: PUSH
5380: LD_INT 24
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: ST_TO_ADDR
5389: GO 5674
5391: LD_INT 43
5393: DOUBLE
5394: EQUAL
5395: IFTRUE 5399
5397: GO 5425
5399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5400: LD_ADDR_VAR 0 3
5404: PUSH
5405: LD_INT 21
5407: PUSH
5408: LD_INT 22
5410: PUSH
5411: LD_INT 23
5413: PUSH
5414: LD_INT 24
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: ST_TO_ADDR
5423: GO 5674
5425: LD_INT 44
5427: DOUBLE
5428: EQUAL
5429: IFTRUE 5433
5431: GO 5459
5433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5434: LD_ADDR_VAR 0 3
5438: PUSH
5439: LD_INT 21
5441: PUSH
5442: LD_INT 22
5444: PUSH
5445: LD_INT 23
5447: PUSH
5448: LD_INT 24
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: ST_TO_ADDR
5457: GO 5674
5459: LD_INT 45
5461: DOUBLE
5462: EQUAL
5463: IFTRUE 5467
5465: GO 5493
5467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5468: LD_ADDR_VAR 0 3
5472: PUSH
5473: LD_INT 21
5475: PUSH
5476: LD_INT 22
5478: PUSH
5479: LD_INT 23
5481: PUSH
5482: LD_INT 24
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: ST_TO_ADDR
5491: GO 5674
5493: LD_INT 49
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5501
5499: GO 5527
5501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5502: LD_ADDR_VAR 0 3
5506: PUSH
5507: LD_INT 21
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 23
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: ST_TO_ADDR
5525: GO 5674
5527: LD_INT 51
5529: DOUBLE
5530: EQUAL
5531: IFTRUE 5535
5533: GO 5561
5535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 21
5543: PUSH
5544: LD_INT 22
5546: PUSH
5547: LD_INT 23
5549: PUSH
5550: LD_INT 24
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 5674
5561: LD_INT 52
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5595
5569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 21
5577: PUSH
5578: LD_INT 22
5580: PUSH
5581: LD_INT 23
5583: PUSH
5584: LD_INT 24
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
5593: GO 5674
5595: LD_INT 53
5597: DOUBLE
5598: EQUAL
5599: IFTRUE 5603
5601: GO 5621
5603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_INT 23
5611: PUSH
5612: LD_INT 24
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 5674
5621: LD_INT 46
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5647
5629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 23
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
5645: GO 5674
5647: LD_INT 47
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5655
5653: GO 5673
5655: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_INT 23
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 5674
5673: POP
// result := ( chassis in result ) ;
5674: LD_ADDR_VAR 0 3
5678: PUSH
5679: LD_VAR 0 1
5683: PUSH
5684: LD_VAR 0 3
5688: IN
5689: ST_TO_ADDR
// end ;
5690: LD_VAR 0 3
5694: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5695: LD_INT 0
5697: PPUSH
5698: PPUSH
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
// result := array ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_VAR 0 1
5713: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5714: LD_VAR 0 1
5718: NOT
5719: PUSH
5720: LD_VAR 0 2
5724: NOT
5725: OR
5726: PUSH
5727: LD_VAR 0 3
5731: NOT
5732: OR
5733: PUSH
5734: LD_VAR 0 2
5738: PUSH
5739: LD_VAR 0 1
5743: GREATER
5744: OR
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_VAR 0 1
5755: GREATER
5756: OR
5757: IFFALSE 5761
// exit ;
5759: GO 6057
// if direction then
5761: LD_VAR 0 4
5765: IFFALSE 5829
// begin d := 1 ;
5767: LD_ADDR_VAR 0 9
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// if i_from > i_to then
5775: LD_VAR 0 2
5779: PUSH
5780: LD_VAR 0 3
5784: GREATER
5785: IFFALSE 5811
// length := ( array - i_from ) + i_to else
5787: LD_ADDR_VAR 0 11
5791: PUSH
5792: LD_VAR 0 1
5796: PUSH
5797: LD_VAR 0 2
5801: MINUS
5802: PUSH
5803: LD_VAR 0 3
5807: PLUS
5808: ST_TO_ADDR
5809: GO 5827
// length := i_to - i_from ;
5811: LD_ADDR_VAR 0 11
5815: PUSH
5816: LD_VAR 0 3
5820: PUSH
5821: LD_VAR 0 2
5825: MINUS
5826: ST_TO_ADDR
// end else
5827: GO 5890
// begin d := - 1 ;
5829: LD_ADDR_VAR 0 9
5833: PUSH
5834: LD_INT 1
5836: NEG
5837: ST_TO_ADDR
// if i_from > i_to then
5838: LD_VAR 0 2
5842: PUSH
5843: LD_VAR 0 3
5847: GREATER
5848: IFFALSE 5868
// length := i_from - i_to else
5850: LD_ADDR_VAR 0 11
5854: PUSH
5855: LD_VAR 0 2
5859: PUSH
5860: LD_VAR 0 3
5864: MINUS
5865: ST_TO_ADDR
5866: GO 5890
// length := ( array - i_to ) + i_from ;
5868: LD_ADDR_VAR 0 11
5872: PUSH
5873: LD_VAR 0 1
5877: PUSH
5878: LD_VAR 0 3
5882: MINUS
5883: PUSH
5884: LD_VAR 0 2
5888: PLUS
5889: ST_TO_ADDR
// end ; if not length then
5890: LD_VAR 0 11
5894: NOT
5895: IFFALSE 5899
// exit ;
5897: GO 6057
// tmp := array ;
5899: LD_ADDR_VAR 0 10
5903: PUSH
5904: LD_VAR 0 1
5908: ST_TO_ADDR
// for i = 1 to length do
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: DOUBLE
5915: LD_INT 1
5917: DEC
5918: ST_TO_ADDR
5919: LD_VAR 0 11
5923: PUSH
5924: FOR_TO
5925: IFFALSE 6045
// begin for j = 1 to array do
5927: LD_ADDR_VAR 0 7
5931: PUSH
5932: DOUBLE
5933: LD_INT 1
5935: DEC
5936: ST_TO_ADDR
5937: LD_VAR 0 1
5941: PUSH
5942: FOR_TO
5943: IFFALSE 6031
// begin k := j + d ;
5945: LD_ADDR_VAR 0 8
5949: PUSH
5950: LD_VAR 0 7
5954: PUSH
5955: LD_VAR 0 9
5959: PLUS
5960: ST_TO_ADDR
// if k > array then
5961: LD_VAR 0 8
5965: PUSH
5966: LD_VAR 0 1
5970: GREATER
5971: IFFALSE 5981
// k := 1 ;
5973: LD_ADDR_VAR 0 8
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if not k then
5981: LD_VAR 0 8
5985: NOT
5986: IFFALSE 5998
// k := array ;
5988: LD_ADDR_VAR 0 8
5992: PUSH
5993: LD_VAR 0 1
5997: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5998: LD_ADDR_VAR 0 10
6002: PUSH
6003: LD_VAR 0 10
6007: PPUSH
6008: LD_VAR 0 8
6012: PPUSH
6013: LD_VAR 0 1
6017: PUSH
6018: LD_VAR 0 7
6022: ARRAY
6023: PPUSH
6024: CALL_OW 1
6028: ST_TO_ADDR
// end ;
6029: GO 5942
6031: POP
6032: POP
// array := tmp ;
6033: LD_ADDR_VAR 0 1
6037: PUSH
6038: LD_VAR 0 10
6042: ST_TO_ADDR
// end ;
6043: GO 5924
6045: POP
6046: POP
// result := array ;
6047: LD_ADDR_VAR 0 5
6051: PUSH
6052: LD_VAR 0 1
6056: ST_TO_ADDR
// end ;
6057: LD_VAR 0 5
6061: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6062: LD_INT 0
6064: PPUSH
6065: PPUSH
// result := 0 ;
6066: LD_ADDR_VAR 0 3
6070: PUSH
6071: LD_INT 0
6073: ST_TO_ADDR
// if not array or not value in array then
6074: LD_VAR 0 1
6078: NOT
6079: PUSH
6080: LD_VAR 0 2
6084: PUSH
6085: LD_VAR 0 1
6089: IN
6090: NOT
6091: OR
6092: IFFALSE 6096
// exit ;
6094: GO 6150
// for i = 1 to array do
6096: LD_ADDR_VAR 0 4
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_VAR 0 1
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6148
// if value = array [ i ] then
6114: LD_VAR 0 2
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: LD_VAR 0 4
6128: ARRAY
6129: EQUAL
6130: IFFALSE 6146
// begin result := i ;
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_VAR 0 4
6141: ST_TO_ADDR
// exit ;
6142: POP
6143: POP
6144: GO 6150
// end ;
6146: GO 6111
6148: POP
6149: POP
// end ;
6150: LD_VAR 0 3
6154: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6155: LD_INT 0
6157: PPUSH
// vc_chassis := chassis ;
6158: LD_ADDR_OWVAR 37
6162: PUSH
6163: LD_VAR 0 1
6167: ST_TO_ADDR
// vc_engine := engine ;
6168: LD_ADDR_OWVAR 39
6172: PUSH
6173: LD_VAR 0 2
6177: ST_TO_ADDR
// vc_control := control ;
6178: LD_ADDR_OWVAR 38
6182: PUSH
6183: LD_VAR 0 3
6187: ST_TO_ADDR
// vc_weapon := weapon ;
6188: LD_ADDR_OWVAR 40
6192: PUSH
6193: LD_VAR 0 4
6197: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6198: LD_ADDR_OWVAR 41
6202: PUSH
6203: LD_VAR 0 5
6207: ST_TO_ADDR
// end ;
6208: LD_VAR 0 6
6212: RET
// export function WantPlant ( unit ) ; var task ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// result := false ;
6217: LD_ADDR_VAR 0 2
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6225: LD_ADDR_VAR 0 3
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 437
6239: ST_TO_ADDR
// if task then
6240: LD_VAR 0 3
6244: IFFALSE 6272
// if task [ 1 ] [ 1 ] = p then
6246: LD_VAR 0 3
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PUSH
6255: LD_INT 1
6257: ARRAY
6258: PUSH
6259: LD_STRING p
6261: EQUAL
6262: IFFALSE 6272
// result := true ;
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: LD_INT 1
6271: ST_TO_ADDR
// end ;
6272: LD_VAR 0 2
6276: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// if pos < 1 then
6283: LD_VAR 0 2
6287: PUSH
6288: LD_INT 1
6290: LESS
6291: IFFALSE 6295
// exit ;
6293: GO 6598
// if pos = 1 then
6295: LD_VAR 0 2
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6336
// result := Replace ( arr , pos [ 1 ] , value ) else
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: LD_VAR 0 1
6314: PPUSH
6315: LD_VAR 0 2
6319: PUSH
6320: LD_INT 1
6322: ARRAY
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL_OW 1
6333: ST_TO_ADDR
6334: GO 6598
// begin tmp := arr ;
6336: LD_ADDR_VAR 0 6
6340: PUSH
6341: LD_VAR 0 1
6345: ST_TO_ADDR
// s_arr := [ tmp ] ;
6346: LD_ADDR_VAR 0 7
6350: PUSH
6351: LD_VAR 0 6
6355: PUSH
6356: EMPTY
6357: LIST
6358: ST_TO_ADDR
// for i = 1 to pos - 1 do
6359: LD_ADDR_VAR 0 5
6363: PUSH
6364: DOUBLE
6365: LD_INT 1
6367: DEC
6368: ST_TO_ADDR
6369: LD_VAR 0 2
6373: PUSH
6374: LD_INT 1
6376: MINUS
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6424
// begin tmp := tmp [ pos [ i ] ] ;
6381: LD_ADDR_VAR 0 6
6385: PUSH
6386: LD_VAR 0 6
6390: PUSH
6391: LD_VAR 0 2
6395: PUSH
6396: LD_VAR 0 5
6400: ARRAY
6401: ARRAY
6402: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6403: LD_ADDR_VAR 0 7
6407: PUSH
6408: LD_VAR 0 7
6412: PUSH
6413: LD_VAR 0 6
6417: PUSH
6418: EMPTY
6419: LIST
6420: ADD
6421: ST_TO_ADDR
// end ;
6422: GO 6378
6424: POP
6425: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6426: LD_ADDR_VAR 0 6
6430: PUSH
6431: LD_VAR 0 6
6435: PPUSH
6436: LD_VAR 0 2
6440: PUSH
6441: LD_VAR 0 2
6445: ARRAY
6446: PPUSH
6447: LD_VAR 0 3
6451: PPUSH
6452: CALL_OW 1
6456: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6457: LD_ADDR_VAR 0 7
6461: PUSH
6462: LD_VAR 0 7
6466: PPUSH
6467: LD_VAR 0 7
6471: PPUSH
6472: LD_VAR 0 6
6476: PPUSH
6477: CALL_OW 1
6481: ST_TO_ADDR
// for i = s_arr downto 2 do
6482: LD_ADDR_VAR 0 5
6486: PUSH
6487: DOUBLE
6488: LD_VAR 0 7
6492: INC
6493: ST_TO_ADDR
6494: LD_INT 2
6496: PUSH
6497: FOR_DOWNTO
6498: IFFALSE 6582
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6500: LD_ADDR_VAR 0 6
6504: PUSH
6505: LD_VAR 0 7
6509: PUSH
6510: LD_VAR 0 5
6514: PUSH
6515: LD_INT 1
6517: MINUS
6518: ARRAY
6519: PPUSH
6520: LD_VAR 0 2
6524: PUSH
6525: LD_VAR 0 5
6529: PUSH
6530: LD_INT 1
6532: MINUS
6533: ARRAY
6534: PPUSH
6535: LD_VAR 0 7
6539: PUSH
6540: LD_VAR 0 5
6544: ARRAY
6545: PPUSH
6546: CALL_OW 1
6550: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6551: LD_ADDR_VAR 0 7
6555: PUSH
6556: LD_VAR 0 7
6560: PPUSH
6561: LD_VAR 0 5
6565: PUSH
6566: LD_INT 1
6568: MINUS
6569: PPUSH
6570: LD_VAR 0 6
6574: PPUSH
6575: CALL_OW 1
6579: ST_TO_ADDR
// end ;
6580: GO 6497
6582: POP
6583: POP
// result := s_arr [ 1 ] ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: LD_VAR 0 7
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: ST_TO_ADDR
// end ; end ;
6598: LD_VAR 0 4
6602: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
// if not list then
6607: LD_VAR 0 1
6611: NOT
6612: IFFALSE 6616
// exit ;
6614: GO 6707
// i := list [ pos1 ] ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_VAR 0 1
6625: PUSH
6626: LD_VAR 0 2
6630: ARRAY
6631: ST_TO_ADDR
// if not i then
6632: LD_VAR 0 5
6636: NOT
6637: IFFALSE 6641
// exit ;
6639: GO 6707
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6641: LD_ADDR_VAR 0 1
6645: PUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: LD_VAR 0 2
6655: PPUSH
6656: LD_VAR 0 1
6660: PUSH
6661: LD_VAR 0 3
6665: ARRAY
6666: PPUSH
6667: CALL_OW 1
6671: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6672: LD_ADDR_VAR 0 1
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_VAR 0 3
6686: PPUSH
6687: LD_VAR 0 5
6691: PPUSH
6692: CALL_OW 1
6696: ST_TO_ADDR
// result := list ;
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ST_TO_ADDR
// end ;
6707: LD_VAR 0 4
6711: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6712: LD_INT 0
6714: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6715: LD_ADDR_VAR 0 5
6719: PUSH
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 250
6729: PPUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: CALL_OW 251
6739: PPUSH
6740: LD_VAR 0 2
6744: PPUSH
6745: LD_VAR 0 3
6749: PPUSH
6750: LD_VAR 0 4
6754: PPUSH
6755: CALL 6765 0 5
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 5
6764: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
6769: PPUSH
6770: PPUSH
// if not list then
6771: LD_VAR 0 3
6775: NOT
6776: IFFALSE 6780
// exit ;
6778: GO 7168
// result := [ ] ;
6780: LD_ADDR_VAR 0 6
6784: PUSH
6785: EMPTY
6786: ST_TO_ADDR
// for i in list do
6787: LD_ADDR_VAR 0 7
6791: PUSH
6792: LD_VAR 0 3
6796: PUSH
6797: FOR_IN
6798: IFFALSE 7000
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6800: LD_ADDR_VAR 0 9
6804: PUSH
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: LD_VAR 0 2
6819: PPUSH
6820: CALL_OW 297
6824: ST_TO_ADDR
// if not result then
6825: LD_VAR 0 6
6829: NOT
6830: IFFALSE 6856
// result := [ [ i , tmp ] ] else
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: LD_VAR 0 7
6841: PUSH
6842: LD_VAR 0 9
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: ST_TO_ADDR
6854: GO 6998
// begin if result [ result ] [ 2 ] < tmp then
6856: LD_VAR 0 6
6860: PUSH
6861: LD_VAR 0 6
6865: ARRAY
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PUSH
6871: LD_VAR 0 9
6875: LESS
6876: IFFALSE 6918
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_VAR 0 6
6887: PPUSH
6888: LD_VAR 0 6
6892: PUSH
6893: LD_INT 1
6895: PLUS
6896: PPUSH
6897: LD_VAR 0 7
6901: PUSH
6902: LD_VAR 0 9
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 2
6915: ST_TO_ADDR
6916: GO 6998
// for j = 1 to result do
6918: LD_ADDR_VAR 0 8
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_VAR 0 6
6932: PUSH
6933: FOR_TO
6934: IFFALSE 6996
// begin if tmp < result [ j ] [ 2 ] then
6936: LD_VAR 0 9
6940: PUSH
6941: LD_VAR 0 6
6945: PUSH
6946: LD_VAR 0 8
6950: ARRAY
6951: PUSH
6952: LD_INT 2
6954: ARRAY
6955: LESS
6956: IFFALSE 6994
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6958: LD_ADDR_VAR 0 6
6962: PUSH
6963: LD_VAR 0 6
6967: PPUSH
6968: LD_VAR 0 8
6972: PPUSH
6973: LD_VAR 0 7
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 2
6991: ST_TO_ADDR
// break ;
6992: GO 6996
// end ; end ;
6994: GO 6933
6996: POP
6997: POP
// end ; end ;
6998: GO 6797
7000: POP
7001: POP
// if result and not asc then
7002: LD_VAR 0 6
7006: PUSH
7007: LD_VAR 0 4
7011: NOT
7012: AND
7013: IFFALSE 7088
// begin tmp := result ;
7015: LD_ADDR_VAR 0 9
7019: PUSH
7020: LD_VAR 0 6
7024: ST_TO_ADDR
// for i = tmp downto 1 do
7025: LD_ADDR_VAR 0 7
7029: PUSH
7030: DOUBLE
7031: LD_VAR 0 9
7035: INC
7036: ST_TO_ADDR
7037: LD_INT 1
7039: PUSH
7040: FOR_DOWNTO
7041: IFFALSE 7086
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7043: LD_ADDR_VAR 0 6
7047: PUSH
7048: LD_VAR 0 6
7052: PPUSH
7053: LD_VAR 0 9
7057: PUSH
7058: LD_VAR 0 7
7062: MINUS
7063: PUSH
7064: LD_INT 1
7066: PLUS
7067: PPUSH
7068: LD_VAR 0 9
7072: PUSH
7073: LD_VAR 0 7
7077: ARRAY
7078: PPUSH
7079: CALL_OW 1
7083: ST_TO_ADDR
7084: GO 7040
7086: POP
7087: POP
// end ; tmp := [ ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: EMPTY
7094: ST_TO_ADDR
// if mode then
7095: LD_VAR 0 5
7099: IFFALSE 7168
// begin for i = 1 to result do
7101: LD_ADDR_VAR 0 7
7105: PUSH
7106: DOUBLE
7107: LD_INT 1
7109: DEC
7110: ST_TO_ADDR
7111: LD_VAR 0 6
7115: PUSH
7116: FOR_TO
7117: IFFALSE 7156
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7119: LD_ADDR_VAR 0 9
7123: PUSH
7124: LD_VAR 0 9
7128: PPUSH
7129: LD_VAR 0 7
7133: PPUSH
7134: LD_VAR 0 6
7138: PUSH
7139: LD_VAR 0 7
7143: ARRAY
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 1
7153: ST_TO_ADDR
7154: GO 7116
7156: POP
7157: POP
// result := tmp ;
7158: LD_ADDR_VAR 0 6
7162: PUSH
7163: LD_VAR 0 9
7167: ST_TO_ADDR
// end ; end ;
7168: LD_VAR 0 6
7172: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7181: LD_ADDR_VAR 0 5
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: LD_INT 0
7191: PUSH
7192: LD_INT 0
7194: PUSH
7195: EMPTY
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
// if not x or not y then
7203: LD_VAR 0 2
7207: NOT
7208: PUSH
7209: LD_VAR 0 3
7213: NOT
7214: OR
7215: IFFALSE 7219
// exit ;
7217: GO 8869
// if not range then
7219: LD_VAR 0 4
7223: NOT
7224: IFFALSE 7234
// range := 10 ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_INT 10
7233: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7234: LD_ADDR_VAR 0 8
7238: PUSH
7239: LD_INT 81
7241: PUSH
7242: LD_VAR 0 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 92
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: LD_VAR 0 3
7263: PUSH
7264: LD_VAR 0 4
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 21
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: ST_TO_ADDR
// if not tmp then
7302: LD_VAR 0 8
7306: NOT
7307: IFFALSE 7311
// exit ;
7309: GO 8869
// for i in tmp do
7311: LD_ADDR_VAR 0 6
7315: PUSH
7316: LD_VAR 0 8
7320: PUSH
7321: FOR_IN
7322: IFFALSE 8844
// begin points := [ 0 , 0 , 0 ] ;
7324: LD_ADDR_VAR 0 9
7328: PUSH
7329: LD_INT 0
7331: PUSH
7332: LD_INT 0
7334: PUSH
7335: LD_INT 0
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: ST_TO_ADDR
// bpoints := 1 ;
7343: LD_ADDR_VAR 0 10
7347: PUSH
7348: LD_INT 1
7350: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7351: LD_VAR 0 6
7355: PPUSH
7356: CALL_OW 247
7360: PUSH
7361: LD_INT 1
7363: DOUBLE
7364: EQUAL
7365: IFTRUE 7369
7367: GO 7947
7369: POP
// begin if GetClass ( i ) = 1 then
7370: LD_VAR 0 6
7374: PPUSH
7375: CALL_OW 257
7379: PUSH
7380: LD_INT 1
7382: EQUAL
7383: IFFALSE 7404
// points := [ 10 , 5 , 3 ] ;
7385: LD_ADDR_VAR 0 9
7389: PUSH
7390: LD_INT 10
7392: PUSH
7393: LD_INT 5
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7404: LD_VAR 0 6
7408: PPUSH
7409: CALL_OW 257
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: LD_INT 4
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: IN
7428: IFFALSE 7449
// points := [ 3 , 2 , 1 ] ;
7430: LD_ADDR_VAR 0 9
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7449: LD_VAR 0 6
7453: PPUSH
7454: CALL_OW 257
7458: PUSH
7459: LD_INT 5
7461: EQUAL
7462: IFFALSE 7483
// points := [ 130 , 5 , 2 ] ;
7464: LD_ADDR_VAR 0 9
7468: PUSH
7469: LD_INT 130
7471: PUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 2
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7483: LD_VAR 0 6
7487: PPUSH
7488: CALL_OW 257
7492: PUSH
7493: LD_INT 8
7495: EQUAL
7496: IFFALSE 7517
// points := [ 35 , 35 , 30 ] ;
7498: LD_ADDR_VAR 0 9
7502: PUSH
7503: LD_INT 35
7505: PUSH
7506: LD_INT 35
7508: PUSH
7509: LD_INT 30
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7517: LD_VAR 0 6
7521: PPUSH
7522: CALL_OW 257
7526: PUSH
7527: LD_INT 9
7529: EQUAL
7530: IFFALSE 7551
// points := [ 20 , 55 , 40 ] ;
7532: LD_ADDR_VAR 0 9
7536: PUSH
7537: LD_INT 20
7539: PUSH
7540: LD_INT 55
7542: PUSH
7543: LD_INT 40
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7551: LD_VAR 0 6
7555: PPUSH
7556: CALL_OW 257
7560: PUSH
7561: LD_INT 12
7563: PUSH
7564: LD_INT 16
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: IN
7571: IFFALSE 7592
// points := [ 5 , 3 , 2 ] ;
7573: LD_ADDR_VAR 0 9
7577: PUSH
7578: LD_INT 5
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7592: LD_VAR 0 6
7596: PPUSH
7597: CALL_OW 257
7601: PUSH
7602: LD_INT 17
7604: EQUAL
7605: IFFALSE 7626
// points := [ 100 , 50 , 75 ] ;
7607: LD_ADDR_VAR 0 9
7611: PUSH
7612: LD_INT 100
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: LD_INT 75
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7626: LD_VAR 0 6
7630: PPUSH
7631: CALL_OW 257
7635: PUSH
7636: LD_INT 15
7638: EQUAL
7639: IFFALSE 7660
// points := [ 10 , 5 , 3 ] ;
7641: LD_ADDR_VAR 0 9
7645: PUSH
7646: LD_INT 10
7648: PUSH
7649: LD_INT 5
7651: PUSH
7652: LD_INT 3
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7660: LD_VAR 0 6
7664: PPUSH
7665: CALL_OW 257
7669: PUSH
7670: LD_INT 14
7672: EQUAL
7673: IFFALSE 7694
// points := [ 10 , 0 , 0 ] ;
7675: LD_ADDR_VAR 0 9
7679: PUSH
7680: LD_INT 10
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: LD_INT 0
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7694: LD_VAR 0 6
7698: PPUSH
7699: CALL_OW 257
7703: PUSH
7704: LD_INT 11
7706: EQUAL
7707: IFFALSE 7728
// points := [ 30 , 10 , 5 ] ;
7709: LD_ADDR_VAR 0 9
7713: PUSH
7714: LD_INT 30
7716: PUSH
7717: LD_INT 10
7719: PUSH
7720: LD_INT 5
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7728: LD_VAR 0 1
7732: PPUSH
7733: LD_INT 5
7735: PPUSH
7736: CALL_OW 321
7740: PUSH
7741: LD_INT 2
7743: EQUAL
7744: IFFALSE 7761
// bpoints := bpoints * 1.8 ;
7746: LD_ADDR_VAR 0 10
7750: PUSH
7751: LD_VAR 0 10
7755: PUSH
7756: LD_REAL  1.80000000000000E+0000
7759: MUL
7760: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7761: LD_VAR 0 6
7765: PPUSH
7766: CALL_OW 257
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: LD_INT 2
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_INT 4
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: IN
7789: PUSH
7790: LD_VAR 0 1
7794: PPUSH
7795: LD_INT 51
7797: PPUSH
7798: CALL_OW 321
7802: PUSH
7803: LD_INT 2
7805: EQUAL
7806: AND
7807: IFFALSE 7824
// bpoints := bpoints * 1.2 ;
7809: LD_ADDR_VAR 0 10
7813: PUSH
7814: LD_VAR 0 10
7818: PUSH
7819: LD_REAL  1.20000000000000E+0000
7822: MUL
7823: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7824: LD_VAR 0 6
7828: PPUSH
7829: CALL_OW 257
7833: PUSH
7834: LD_INT 5
7836: PUSH
7837: LD_INT 7
7839: PUSH
7840: LD_INT 9
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: IN
7848: PUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_INT 52
7856: PPUSH
7857: CALL_OW 321
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: AND
7866: IFFALSE 7883
// bpoints := bpoints * 1.5 ;
7868: LD_ADDR_VAR 0 10
7872: PUSH
7873: LD_VAR 0 10
7877: PUSH
7878: LD_REAL  1.50000000000000E+0000
7881: MUL
7882: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7883: LD_VAR 0 1
7887: PPUSH
7888: LD_INT 66
7890: PPUSH
7891: CALL_OW 321
7895: PUSH
7896: LD_INT 2
7898: EQUAL
7899: IFFALSE 7916
// bpoints := bpoints * 1.1 ;
7901: LD_ADDR_VAR 0 10
7905: PUSH
7906: LD_VAR 0 10
7910: PUSH
7911: LD_REAL  1.10000000000000E+0000
7914: MUL
7915: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7916: LD_ADDR_VAR 0 10
7920: PUSH
7921: LD_VAR 0 10
7925: PUSH
7926: LD_VAR 0 6
7930: PPUSH
7931: LD_INT 1
7933: PPUSH
7934: CALL_OW 259
7938: PUSH
7939: LD_REAL  1.15000000000000E+0000
7942: MUL
7943: MUL
7944: ST_TO_ADDR
// end ; unit_vehicle :
7945: GO 8773
7947: LD_INT 2
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 8761
7955: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7956: LD_VAR 0 6
7960: PPUSH
7961: CALL_OW 264
7965: PUSH
7966: LD_INT 2
7968: PUSH
7969: LD_INT 42
7971: PUSH
7972: LD_INT 24
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: IN
7980: IFFALSE 8001
// points := [ 25 , 5 , 3 ] ;
7982: LD_ADDR_VAR 0 9
7986: PUSH
7987: LD_INT 25
7989: PUSH
7990: LD_INT 5
7992: PUSH
7993: LD_INT 3
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 264
8010: PUSH
8011: LD_INT 4
8013: PUSH
8014: LD_INT 43
8016: PUSH
8017: LD_INT 25
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: IN
8025: IFFALSE 8046
// points := [ 40 , 15 , 5 ] ;
8027: LD_ADDR_VAR 0 9
8031: PUSH
8032: LD_INT 40
8034: PUSH
8035: LD_INT 15
8037: PUSH
8038: LD_INT 5
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8046: LD_VAR 0 6
8050: PPUSH
8051: CALL_OW 264
8055: PUSH
8056: LD_INT 3
8058: PUSH
8059: LD_INT 23
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: IN
8066: IFFALSE 8087
// points := [ 7 , 25 , 8 ] ;
8068: LD_ADDR_VAR 0 9
8072: PUSH
8073: LD_INT 7
8075: PUSH
8076: LD_INT 25
8078: PUSH
8079: LD_INT 8
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 264
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: LD_INT 27
8102: PUSH
8103: LD_INT 44
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: IN
8111: IFFALSE 8132
// points := [ 14 , 50 , 16 ] ;
8113: LD_ADDR_VAR 0 9
8117: PUSH
8118: LD_INT 14
8120: PUSH
8121: LD_INT 50
8123: PUSH
8124: LD_INT 16
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8132: LD_VAR 0 6
8136: PPUSH
8137: CALL_OW 264
8141: PUSH
8142: LD_INT 6
8144: PUSH
8145: LD_INT 46
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: IN
8152: IFFALSE 8173
// points := [ 32 , 120 , 70 ] ;
8154: LD_ADDR_VAR 0 9
8158: PUSH
8159: LD_INT 32
8161: PUSH
8162: LD_INT 120
8164: PUSH
8165: LD_INT 70
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8173: LD_VAR 0 6
8177: PPUSH
8178: CALL_OW 264
8182: PUSH
8183: LD_INT 7
8185: PUSH
8186: LD_INT 28
8188: PUSH
8189: LD_INT 45
8191: PUSH
8192: LD_INT 92
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: IN
8201: IFFALSE 8222
// points := [ 35 , 20 , 45 ] ;
8203: LD_ADDR_VAR 0 9
8207: PUSH
8208: LD_INT 35
8210: PUSH
8211: LD_INT 20
8213: PUSH
8214: LD_INT 45
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8222: LD_VAR 0 6
8226: PPUSH
8227: CALL_OW 264
8231: PUSH
8232: LD_INT 47
8234: PUSH
8235: EMPTY
8236: LIST
8237: IN
8238: IFFALSE 8259
// points := [ 67 , 45 , 75 ] ;
8240: LD_ADDR_VAR 0 9
8244: PUSH
8245: LD_INT 67
8247: PUSH
8248: LD_INT 45
8250: PUSH
8251: LD_INT 75
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8259: LD_VAR 0 6
8263: PPUSH
8264: CALL_OW 264
8268: PUSH
8269: LD_INT 26
8271: PUSH
8272: EMPTY
8273: LIST
8274: IN
8275: IFFALSE 8296
// points := [ 120 , 30 , 80 ] ;
8277: LD_ADDR_VAR 0 9
8281: PUSH
8282: LD_INT 120
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 80
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8296: LD_VAR 0 6
8300: PPUSH
8301: CALL_OW 264
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: EMPTY
8310: LIST
8311: IN
8312: IFFALSE 8333
// points := [ 40 , 1 , 1 ] ;
8314: LD_ADDR_VAR 0 9
8318: PUSH
8319: LD_INT 40
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8333: LD_VAR 0 6
8337: PPUSH
8338: CALL_OW 264
8342: PUSH
8343: LD_INT 29
8345: PUSH
8346: EMPTY
8347: LIST
8348: IN
8349: IFFALSE 8370
// points := [ 70 , 200 , 400 ] ;
8351: LD_ADDR_VAR 0 9
8355: PUSH
8356: LD_INT 70
8358: PUSH
8359: LD_INT 200
8361: PUSH
8362: LD_INT 400
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8370: LD_VAR 0 6
8374: PPUSH
8375: CALL_OW 264
8379: PUSH
8380: LD_INT 14
8382: PUSH
8383: LD_INT 53
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: IN
8390: IFFALSE 8411
// points := [ 40 , 10 , 20 ] ;
8392: LD_ADDR_VAR 0 9
8396: PUSH
8397: LD_INT 40
8399: PUSH
8400: LD_INT 10
8402: PUSH
8403: LD_INT 20
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8411: LD_VAR 0 6
8415: PPUSH
8416: CALL_OW 264
8420: PUSH
8421: LD_INT 9
8423: PUSH
8424: EMPTY
8425: LIST
8426: IN
8427: IFFALSE 8448
// points := [ 5 , 70 , 20 ] ;
8429: LD_ADDR_VAR 0 9
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 70
8439: PUSH
8440: LD_INT 20
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8448: LD_VAR 0 6
8452: PPUSH
8453: CALL_OW 264
8457: PUSH
8458: LD_INT 10
8460: PUSH
8461: EMPTY
8462: LIST
8463: IN
8464: IFFALSE 8485
// points := [ 35 , 110 , 70 ] ;
8466: LD_ADDR_VAR 0 9
8470: PUSH
8471: LD_INT 35
8473: PUSH
8474: LD_INT 110
8476: PUSH
8477: LD_INT 70
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8485: LD_VAR 0 6
8489: PPUSH
8490: CALL_OW 265
8494: PUSH
8495: LD_INT 25
8497: EQUAL
8498: IFFALSE 8519
// points := [ 80 , 65 , 100 ] ;
8500: LD_ADDR_VAR 0 9
8504: PUSH
8505: LD_INT 80
8507: PUSH
8508: LD_INT 65
8510: PUSH
8511: LD_INT 100
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8519: LD_VAR 0 6
8523: PPUSH
8524: CALL_OW 263
8528: PUSH
8529: LD_INT 1
8531: EQUAL
8532: IFFALSE 8567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8534: LD_ADDR_VAR 0 10
8538: PUSH
8539: LD_VAR 0 10
8543: PUSH
8544: LD_VAR 0 6
8548: PPUSH
8549: CALL_OW 311
8553: PPUSH
8554: LD_INT 3
8556: PPUSH
8557: CALL_OW 259
8561: PUSH
8562: LD_INT 4
8564: MUL
8565: MUL
8566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8567: LD_VAR 0 6
8571: PPUSH
8572: CALL_OW 263
8576: PUSH
8577: LD_INT 2
8579: EQUAL
8580: IFFALSE 8631
// begin j := IsControledBy ( i ) ;
8582: LD_ADDR_VAR 0 7
8586: PUSH
8587: LD_VAR 0 6
8591: PPUSH
8592: CALL_OW 312
8596: ST_TO_ADDR
// if j then
8597: LD_VAR 0 7
8601: IFFALSE 8631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8603: LD_ADDR_VAR 0 10
8607: PUSH
8608: LD_VAR 0 10
8612: PUSH
8613: LD_VAR 0 7
8617: PPUSH
8618: LD_INT 3
8620: PPUSH
8621: CALL_OW 259
8625: PUSH
8626: LD_INT 3
8628: MUL
8629: MUL
8630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8631: LD_VAR 0 6
8635: PPUSH
8636: CALL_OW 264
8640: PUSH
8641: LD_INT 5
8643: PUSH
8644: LD_INT 6
8646: PUSH
8647: LD_INT 46
8649: PUSH
8650: LD_INT 44
8652: PUSH
8653: LD_INT 47
8655: PUSH
8656: LD_INT 45
8658: PUSH
8659: LD_INT 28
8661: PUSH
8662: LD_INT 7
8664: PUSH
8665: LD_INT 27
8667: PUSH
8668: LD_INT 29
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: IN
8683: PUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 52
8691: PPUSH
8692: CALL_OW 321
8696: PUSH
8697: LD_INT 2
8699: EQUAL
8700: AND
8701: IFFALSE 8718
// bpoints := bpoints * 1.2 ;
8703: LD_ADDR_VAR 0 10
8707: PUSH
8708: LD_VAR 0 10
8712: PUSH
8713: LD_REAL  1.20000000000000E+0000
8716: MUL
8717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8718: LD_VAR 0 6
8722: PPUSH
8723: CALL_OW 264
8727: PUSH
8728: LD_INT 6
8730: PUSH
8731: LD_INT 46
8733: PUSH
8734: LD_INT 47
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: IN
8742: IFFALSE 8759
// bpoints := bpoints * 1.2 ;
8744: LD_ADDR_VAR 0 10
8748: PUSH
8749: LD_VAR 0 10
8753: PUSH
8754: LD_REAL  1.20000000000000E+0000
8757: MUL
8758: ST_TO_ADDR
// end ; unit_building :
8759: GO 8773
8761: LD_INT 3
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8772
8769: POP
// ; end ;
8770: GO 8773
8772: POP
// for j = 1 to 3 do
8773: LD_ADDR_VAR 0 7
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 3
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8840
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8789: LD_ADDR_VAR 0 5
8793: PUSH
8794: LD_VAR 0 5
8798: PPUSH
8799: LD_VAR 0 7
8803: PPUSH
8804: LD_VAR 0 5
8808: PUSH
8809: LD_VAR 0 7
8813: ARRAY
8814: PUSH
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 7
8824: ARRAY
8825: PUSH
8826: LD_VAR 0 10
8830: MUL
8831: PLUS
8832: PPUSH
8833: CALL_OW 1
8837: ST_TO_ADDR
8838: GO 8786
8840: POP
8841: POP
// end ;
8842: GO 7321
8844: POP
8845: POP
// result := Replace ( result , 4 , tmp ) ;
8846: LD_ADDR_VAR 0 5
8850: PUSH
8851: LD_VAR 0 5
8855: PPUSH
8856: LD_INT 4
8858: PPUSH
8859: LD_VAR 0 8
8863: PPUSH
8864: CALL_OW 1
8868: ST_TO_ADDR
// end ;
8869: LD_VAR 0 5
8873: RET
// export function DangerAtRange ( unit , range ) ; begin
8874: LD_INT 0
8876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 255
8891: PPUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 250
8901: PPUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 251
8911: PPUSH
8912: LD_VAR 0 2
8916: PPUSH
8917: CALL 7173 0 4
8921: ST_TO_ADDR
// end ;
8922: LD_VAR 0 3
8926: RET
// export function DangerInArea ( side , area ) ; begin
8927: LD_INT 0
8929: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: LD_INT 81
8942: PUSH
8943: LD_VAR 0 1
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 70
8956: ST_TO_ADDR
// end ;
8957: LD_VAR 0 3
8961: RET
// export function IsExtension ( b ) ; begin
8962: LD_INT 0
8964: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_VAR 0 1
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 20
8980: PUSH
8981: LD_INT 22
8983: PUSH
8984: LD_INT 17
8986: PUSH
8987: LD_INT 24
8989: PUSH
8990: LD_INT 21
8992: PUSH
8993: LD_INT 19
8995: PUSH
8996: LD_INT 16
8998: PUSH
8999: LD_INT 25
9001: PUSH
9002: LD_INT 18
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: IN
9017: ST_TO_ADDR
// end ;
9018: LD_VAR 0 2
9022: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9023: LD_INT 0
9025: PPUSH
9026: PPUSH
9027: PPUSH
// result := [ ] ;
9028: LD_ADDR_VAR 0 4
9032: PUSH
9033: EMPTY
9034: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9035: LD_ADDR_VAR 0 5
9039: PUSH
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 21
9047: PUSH
9048: LD_INT 3
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 70
9059: ST_TO_ADDR
// if not tmp then
9060: LD_VAR 0 5
9064: NOT
9065: IFFALSE 9069
// exit ;
9067: GO 9133
// if checkLink then
9069: LD_VAR 0 3
9073: IFFALSE 9123
// begin for i in tmp do
9075: LD_ADDR_VAR 0 6
9079: PUSH
9080: LD_VAR 0 5
9084: PUSH
9085: FOR_IN
9086: IFFALSE 9121
// if GetBase ( i ) <> base then
9088: LD_VAR 0 6
9092: PPUSH
9093: CALL_OW 274
9097: PUSH
9098: LD_VAR 0 1
9102: NONEQUAL
9103: IFFALSE 9119
// ComLinkToBase ( base , i ) ;
9105: LD_VAR 0 1
9109: PPUSH
9110: LD_VAR 0 6
9114: PPUSH
9115: CALL_OW 169
9119: GO 9085
9121: POP
9122: POP
// end ; result := tmp ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: LD_VAR 0 5
9132: ST_TO_ADDR
// end ;
9133: LD_VAR 0 4
9137: RET
// export function ComComplete ( units , b ) ; var i ; begin
9138: LD_INT 0
9140: PPUSH
9141: PPUSH
// if not units then
9142: LD_VAR 0 1
9146: NOT
9147: IFFALSE 9151
// exit ;
9149: GO 9241
// for i in units do
9151: LD_ADDR_VAR 0 4
9155: PUSH
9156: LD_VAR 0 1
9160: PUSH
9161: FOR_IN
9162: IFFALSE 9239
// if BuildingStatus ( b ) = bs_build then
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 461
9173: PUSH
9174: LD_INT 1
9176: EQUAL
9177: IFFALSE 9237
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9179: LD_VAR 0 4
9183: PPUSH
9184: LD_STRING h
9186: PUSH
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 250
9196: PUSH
9197: LD_VAR 0 2
9201: PPUSH
9202: CALL_OW 251
9206: PUSH
9207: LD_VAR 0 2
9211: PUSH
9212: LD_INT 0
9214: PUSH
9215: LD_INT 0
9217: PUSH
9218: LD_INT 0
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: PPUSH
9233: CALL_OW 446
9237: GO 9161
9239: POP
9240: POP
// end ;
9241: LD_VAR 0 3
9245: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9246: LD_INT 0
9248: PPUSH
9249: PPUSH
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9254: LD_VAR 0 1
9258: NOT
9259: PUSH
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 263
9269: PUSH
9270: LD_INT 2
9272: NONEQUAL
9273: OR
9274: IFFALSE 9278
// exit ;
9276: GO 9594
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9278: LD_ADDR_VAR 0 6
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_VAR 0 1
9290: PPUSH
9291: CALL_OW 255
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 30
9305: PUSH
9306: LD_INT 36
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 34
9315: PUSH
9316: LD_INT 31
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: ST_TO_ADDR
// if not tmp then
9337: LD_VAR 0 6
9341: NOT
9342: IFFALSE 9346
// exit ;
9344: GO 9594
// result := [ ] ;
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: EMPTY
9352: ST_TO_ADDR
// for i in tmp do
9353: LD_ADDR_VAR 0 3
9357: PUSH
9358: LD_VAR 0 6
9362: PUSH
9363: FOR_IN
9364: IFFALSE 9435
// begin t := UnitsInside ( i ) ;
9366: LD_ADDR_VAR 0 4
9370: PUSH
9371: LD_VAR 0 3
9375: PPUSH
9376: CALL_OW 313
9380: ST_TO_ADDR
// if t then
9381: LD_VAR 0 4
9385: IFFALSE 9433
// for j in t do
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_VAR 0 4
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9431
// result := Replace ( result , result + 1 , j ) ;
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: LD_VAR 0 2
9414: PUSH
9415: LD_INT 1
9417: PLUS
9418: PPUSH
9419: LD_VAR 0 7
9423: PPUSH
9424: CALL_OW 1
9428: ST_TO_ADDR
9429: GO 9397
9431: POP
9432: POP
// end ;
9433: GO 9363
9435: POP
9436: POP
// if not result then
9437: LD_VAR 0 2
9441: NOT
9442: IFFALSE 9446
// exit ;
9444: GO 9594
// mech := result [ 1 ] ;
9446: LD_ADDR_VAR 0 5
9450: PUSH
9451: LD_VAR 0 2
9455: PUSH
9456: LD_INT 1
9458: ARRAY
9459: ST_TO_ADDR
// if result > 1 then
9460: LD_VAR 0 2
9464: PUSH
9465: LD_INT 1
9467: GREATER
9468: IFFALSE 9580
// begin for i = 2 to result do
9470: LD_ADDR_VAR 0 3
9474: PUSH
9475: DOUBLE
9476: LD_INT 2
9478: DEC
9479: ST_TO_ADDR
9480: LD_VAR 0 2
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9578
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: LD_VAR 0 2
9497: PUSH
9498: LD_VAR 0 3
9502: ARRAY
9503: PPUSH
9504: LD_INT 3
9506: PPUSH
9507: CALL_OW 259
9511: PUSH
9512: LD_VAR 0 2
9516: PUSH
9517: LD_VAR 0 3
9521: ARRAY
9522: PPUSH
9523: CALL_OW 432
9527: MINUS
9528: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9529: LD_VAR 0 4
9533: PUSH
9534: LD_VAR 0 5
9538: PPUSH
9539: LD_INT 3
9541: PPUSH
9542: CALL_OW 259
9546: PUSH
9547: LD_VAR 0 5
9551: PPUSH
9552: CALL_OW 432
9556: MINUS
9557: GREATEREQUAL
9558: IFFALSE 9576
// mech := result [ i ] ;
9560: LD_ADDR_VAR 0 5
9564: PUSH
9565: LD_VAR 0 2
9569: PUSH
9570: LD_VAR 0 3
9574: ARRAY
9575: ST_TO_ADDR
// end ;
9576: GO 9485
9578: POP
9579: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 5
9589: PPUSH
9590: CALL_OW 135
// end ;
9594: LD_VAR 0 2
9598: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9599: LD_INT 0
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
9605: PPUSH
9606: PPUSH
9607: PPUSH
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
9612: PPUSH
9613: PPUSH
// result := [ ] ;
9614: LD_ADDR_VAR 0 7
9618: PUSH
9619: EMPTY
9620: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9621: LD_VAR 0 1
9625: PPUSH
9626: CALL_OW 266
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: LD_INT 1
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 11280
// if name then
9646: LD_VAR 0 3
9650: IFFALSE 9666
// SetBName ( base_dep , name ) ;
9652: LD_VAR 0 1
9656: PPUSH
9657: LD_VAR 0 3
9661: PPUSH
9662: CALL_OW 500
// base := GetBase ( base_dep ) ;
9666: LD_ADDR_VAR 0 15
9670: PUSH
9671: LD_VAR 0 1
9675: PPUSH
9676: CALL_OW 274
9680: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9681: LD_ADDR_VAR 0 16
9685: PUSH
9686: LD_VAR 0 1
9690: PPUSH
9691: CALL_OW 255
9695: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9696: LD_ADDR_VAR 0 17
9700: PUSH
9701: LD_VAR 0 1
9705: PPUSH
9706: CALL_OW 248
9710: ST_TO_ADDR
// if sources then
9711: LD_VAR 0 5
9715: IFFALSE 9762
// for i = 1 to 3 do
9717: LD_ADDR_VAR 0 8
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_INT 3
9729: PUSH
9730: FOR_TO
9731: IFFALSE 9760
// AddResourceType ( base , i , sources [ i ] ) ;
9733: LD_VAR 0 15
9737: PPUSH
9738: LD_VAR 0 8
9742: PPUSH
9743: LD_VAR 0 5
9747: PUSH
9748: LD_VAR 0 8
9752: ARRAY
9753: PPUSH
9754: CALL_OW 276
9758: GO 9730
9760: POP
9761: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9762: LD_ADDR_VAR 0 18
9766: PUSH
9767: LD_VAR 0 15
9771: PPUSH
9772: LD_VAR 0 2
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL 9023 0 3
9784: ST_TO_ADDR
// InitHc ;
9785: CALL_OW 19
// InitUc ;
9789: CALL_OW 18
// uc_side := side ;
9793: LD_ADDR_OWVAR 20
9797: PUSH
9798: LD_VAR 0 16
9802: ST_TO_ADDR
// uc_nation := nation ;
9803: LD_ADDR_OWVAR 21
9807: PUSH
9808: LD_VAR 0 17
9812: ST_TO_ADDR
// if buildings then
9813: LD_VAR 0 18
9817: IFFALSE 11139
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9819: LD_ADDR_VAR 0 19
9823: PUSH
9824: LD_VAR 0 18
9828: PPUSH
9829: LD_INT 2
9831: PUSH
9832: LD_INT 30
9834: PUSH
9835: LD_INT 29
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 72
9861: ST_TO_ADDR
// if tmp then
9862: LD_VAR 0 19
9866: IFFALSE 9914
// for i in tmp do
9868: LD_ADDR_VAR 0 8
9872: PUSH
9873: LD_VAR 0 19
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9881: LD_VAR 0 8
9885: PPUSH
9886: CALL_OW 250
9890: PPUSH
9891: LD_VAR 0 8
9895: PPUSH
9896: CALL_OW 251
9900: PPUSH
9901: LD_VAR 0 16
9905: PPUSH
9906: CALL_OW 441
9910: GO 9878
9912: POP
9913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9914: LD_VAR 0 18
9918: PPUSH
9919: LD_INT 2
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 32
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 30
9934: PUSH
9935: LD_INT 33
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 72
9951: IFFALSE 10039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9953: LD_ADDR_VAR 0 8
9957: PUSH
9958: LD_VAR 0 18
9962: PPUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 32
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 30
9978: PUSH
9979: LD_INT 33
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 72
9995: PUSH
9996: FOR_IN
9997: IFFALSE 10037
// begin if not GetBWeapon ( i ) then
9999: LD_VAR 0 8
10003: PPUSH
10004: CALL_OW 269
10008: NOT
10009: IFFALSE 10035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10011: LD_VAR 0 8
10015: PPUSH
10016: LD_VAR 0 8
10020: PPUSH
10021: LD_VAR 0 2
10025: PPUSH
10026: CALL 11285 0 2
10030: PPUSH
10031: CALL_OW 431
// end ;
10035: GO 9996
10037: POP
10038: POP
// end ; for i = 1 to personel do
10039: LD_ADDR_VAR 0 8
10043: PUSH
10044: DOUBLE
10045: LD_INT 1
10047: DEC
10048: ST_TO_ADDR
10049: LD_VAR 0 6
10053: PUSH
10054: FOR_TO
10055: IFFALSE 11119
// begin if i > 4 then
10057: LD_VAR 0 8
10061: PUSH
10062: LD_INT 4
10064: GREATER
10065: IFFALSE 10069
// break ;
10067: GO 11119
// case i of 1 :
10069: LD_VAR 0 8
10073: PUSH
10074: LD_INT 1
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10162
10082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10083: LD_ADDR_VAR 0 12
10087: PUSH
10088: LD_VAR 0 18
10092: PPUSH
10093: LD_INT 22
10095: PUSH
10096: LD_VAR 0 16
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 58
10107: PUSH
10108: EMPTY
10109: LIST
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: LD_INT 30
10116: PUSH
10117: LD_INT 32
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 4
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 30
10136: PUSH
10137: LD_INT 5
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: PPUSH
10155: CALL_OW 72
10159: ST_TO_ADDR
10160: GO 10384
10162: LD_INT 2
10164: DOUBLE
10165: EQUAL
10166: IFTRUE 10170
10168: GO 10232
10170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10171: LD_ADDR_VAR 0 12
10175: PUSH
10176: LD_VAR 0 18
10180: PPUSH
10181: LD_INT 22
10183: PUSH
10184: LD_VAR 0 16
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: LD_INT 0
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 30
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 72
10229: ST_TO_ADDR
10230: GO 10384
10232: LD_INT 3
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10302
10240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10241: LD_ADDR_VAR 0 12
10245: PUSH
10246: LD_VAR 0 18
10250: PPUSH
10251: LD_INT 22
10253: PUSH
10254: LD_VAR 0 16
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 2
10265: PUSH
10266: LD_INT 30
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 3
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 72
10299: ST_TO_ADDR
10300: GO 10384
10302: LD_INT 4
10304: DOUBLE
10305: EQUAL
10306: IFTRUE 10310
10308: GO 10383
10310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10311: LD_ADDR_VAR 0 12
10315: PUSH
10316: LD_VAR 0 18
10320: PPUSH
10321: LD_INT 22
10323: PUSH
10324: LD_VAR 0 16
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 2
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: LD_INT 6
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 30
10348: PUSH
10349: LD_INT 7
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 30
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 72
10380: ST_TO_ADDR
10381: GO 10384
10383: POP
// if i = 1 then
10384: LD_VAR 0 8
10388: PUSH
10389: LD_INT 1
10391: EQUAL
10392: IFFALSE 10503
// begin tmp := [ ] ;
10394: LD_ADDR_VAR 0 19
10398: PUSH
10399: EMPTY
10400: ST_TO_ADDR
// for j in f do
10401: LD_ADDR_VAR 0 9
10405: PUSH
10406: LD_VAR 0 12
10410: PUSH
10411: FOR_IN
10412: IFFALSE 10485
// if GetBType ( j ) = b_bunker then
10414: LD_VAR 0 9
10418: PPUSH
10419: CALL_OW 266
10423: PUSH
10424: LD_INT 32
10426: EQUAL
10427: IFFALSE 10454
// tmp := Insert ( tmp , 1 , j ) else
10429: LD_ADDR_VAR 0 19
10433: PUSH
10434: LD_VAR 0 19
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: LD_VAR 0 9
10446: PPUSH
10447: CALL_OW 2
10451: ST_TO_ADDR
10452: GO 10483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10454: LD_ADDR_VAR 0 19
10458: PUSH
10459: LD_VAR 0 19
10463: PPUSH
10464: LD_VAR 0 19
10468: PUSH
10469: LD_INT 1
10471: PLUS
10472: PPUSH
10473: LD_VAR 0 9
10477: PPUSH
10478: CALL_OW 2
10482: ST_TO_ADDR
10483: GO 10411
10485: POP
10486: POP
// if tmp then
10487: LD_VAR 0 19
10491: IFFALSE 10503
// f := tmp ;
10493: LD_ADDR_VAR 0 12
10497: PUSH
10498: LD_VAR 0 19
10502: ST_TO_ADDR
// end ; x := personel [ i ] ;
10503: LD_ADDR_VAR 0 13
10507: PUSH
10508: LD_VAR 0 6
10512: PUSH
10513: LD_VAR 0 8
10517: ARRAY
10518: ST_TO_ADDR
// if x = - 1 then
10519: LD_VAR 0 13
10523: PUSH
10524: LD_INT 1
10526: NEG
10527: EQUAL
10528: IFFALSE 10737
// begin for j in f do
10530: LD_ADDR_VAR 0 9
10534: PUSH
10535: LD_VAR 0 12
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10733
// repeat InitHc ;
10543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10547: LD_VAR 0 9
10551: PPUSH
10552: CALL_OW 266
10556: PUSH
10557: LD_INT 5
10559: EQUAL
10560: IFFALSE 10630
// begin if UnitsInside ( j ) < 3 then
10562: LD_VAR 0 9
10566: PPUSH
10567: CALL_OW 313
10571: PUSH
10572: LD_INT 3
10574: LESS
10575: IFFALSE 10611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10577: LD_INT 0
10579: PPUSH
10580: LD_INT 5
10582: PUSH
10583: LD_INT 8
10585: PUSH
10586: LD_INT 9
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_VAR 0 17
10598: ARRAY
10599: PPUSH
10600: LD_VAR 0 4
10604: PPUSH
10605: CALL_OW 380
10609: GO 10628
// PrepareHuman ( false , i , skill ) ;
10611: LD_INT 0
10613: PPUSH
10614: LD_VAR 0 8
10618: PPUSH
10619: LD_VAR 0 4
10623: PPUSH
10624: CALL_OW 380
// end else
10628: GO 10647
// PrepareHuman ( false , i , skill ) ;
10630: LD_INT 0
10632: PPUSH
10633: LD_VAR 0 8
10637: PPUSH
10638: LD_VAR 0 4
10642: PPUSH
10643: CALL_OW 380
// un := CreateHuman ;
10647: LD_ADDR_VAR 0 14
10651: PUSH
10652: CALL_OW 44
10656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10657: LD_ADDR_VAR 0 7
10661: PUSH
10662: LD_VAR 0 7
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: LD_VAR 0 14
10674: PPUSH
10675: CALL_OW 2
10679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10680: LD_VAR 0 14
10684: PPUSH
10685: LD_VAR 0 9
10689: PPUSH
10690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10694: LD_VAR 0 9
10698: PPUSH
10699: CALL_OW 313
10703: PUSH
10704: LD_INT 6
10706: EQUAL
10707: PUSH
10708: LD_VAR 0 9
10712: PPUSH
10713: CALL_OW 266
10717: PUSH
10718: LD_INT 32
10720: PUSH
10721: LD_INT 31
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: IN
10728: OR
10729: IFFALSE 10543
10731: GO 10540
10733: POP
10734: POP
// end else
10735: GO 11117
// for j = 1 to x do
10737: LD_ADDR_VAR 0 9
10741: PUSH
10742: DOUBLE
10743: LD_INT 1
10745: DEC
10746: ST_TO_ADDR
10747: LD_VAR 0 13
10751: PUSH
10752: FOR_TO
10753: IFFALSE 11115
// begin InitHc ;
10755: CALL_OW 19
// if not f then
10759: LD_VAR 0 12
10763: NOT
10764: IFFALSE 10853
// begin PrepareHuman ( false , i , skill ) ;
10766: LD_INT 0
10768: PPUSH
10769: LD_VAR 0 8
10773: PPUSH
10774: LD_VAR 0 4
10778: PPUSH
10779: CALL_OW 380
// un := CreateHuman ;
10783: LD_ADDR_VAR 0 14
10787: PUSH
10788: CALL_OW 44
10792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10793: LD_ADDR_VAR 0 7
10797: PUSH
10798: LD_VAR 0 7
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: LD_VAR 0 14
10810: PPUSH
10811: CALL_OW 2
10815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10816: LD_VAR 0 14
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 250
10830: PPUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 251
10840: PPUSH
10841: LD_INT 10
10843: PPUSH
10844: LD_INT 0
10846: PPUSH
10847: CALL_OW 50
// continue ;
10851: GO 10752
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10853: LD_VAR 0 12
10857: PUSH
10858: LD_INT 1
10860: ARRAY
10861: PPUSH
10862: CALL_OW 313
10866: PUSH
10867: LD_VAR 0 12
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: CALL_OW 266
10880: PUSH
10881: LD_INT 32
10883: PUSH
10884: LD_INT 31
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: IN
10891: AND
10892: PUSH
10893: LD_VAR 0 12
10897: PUSH
10898: LD_INT 1
10900: ARRAY
10901: PPUSH
10902: CALL_OW 313
10906: PUSH
10907: LD_INT 6
10909: EQUAL
10910: OR
10911: IFFALSE 10931
// f := Delete ( f , 1 ) ;
10913: LD_ADDR_VAR 0 12
10917: PUSH
10918: LD_VAR 0 12
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 3
10930: ST_TO_ADDR
// if not f then
10931: LD_VAR 0 12
10935: NOT
10936: IFFALSE 10954
// begin x := x + 2 ;
10938: LD_ADDR_VAR 0 13
10942: PUSH
10943: LD_VAR 0 13
10947: PUSH
10948: LD_INT 2
10950: PLUS
10951: ST_TO_ADDR
// continue ;
10952: GO 10752
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10954: LD_VAR 0 12
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PPUSH
10963: CALL_OW 266
10967: PUSH
10968: LD_INT 5
10970: EQUAL
10971: IFFALSE 11045
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10973: LD_VAR 0 12
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: PPUSH
10982: CALL_OW 313
10986: PUSH
10987: LD_INT 3
10989: LESS
10990: IFFALSE 11026
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10992: LD_INT 0
10994: PPUSH
10995: LD_INT 5
10997: PUSH
10998: LD_INT 8
11000: PUSH
11001: LD_INT 9
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_VAR 0 17
11013: ARRAY
11014: PPUSH
11015: LD_VAR 0 4
11019: PPUSH
11020: CALL_OW 380
11024: GO 11043
// PrepareHuman ( false , i , skill ) ;
11026: LD_INT 0
11028: PPUSH
11029: LD_VAR 0 8
11033: PPUSH
11034: LD_VAR 0 4
11038: PPUSH
11039: CALL_OW 380
// end else
11043: GO 11062
// PrepareHuman ( false , i , skill ) ;
11045: LD_INT 0
11047: PPUSH
11048: LD_VAR 0 8
11052: PPUSH
11053: LD_VAR 0 4
11057: PPUSH
11058: CALL_OW 380
// un := CreateHuman ;
11062: LD_ADDR_VAR 0 14
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11072: LD_ADDR_VAR 0 7
11076: PUSH
11077: LD_VAR 0 7
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: LD_VAR 0 14
11089: PPUSH
11090: CALL_OW 2
11094: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11095: LD_VAR 0 14
11099: PPUSH
11100: LD_VAR 0 12
11104: PUSH
11105: LD_INT 1
11107: ARRAY
11108: PPUSH
11109: CALL_OW 52
// end ;
11113: GO 10752
11115: POP
11116: POP
// end ;
11117: GO 10054
11119: POP
11120: POP
// result := result ^ buildings ;
11121: LD_ADDR_VAR 0 7
11125: PUSH
11126: LD_VAR 0 7
11130: PUSH
11131: LD_VAR 0 18
11135: ADD
11136: ST_TO_ADDR
// end else
11137: GO 11280
// begin for i = 1 to personel do
11139: LD_ADDR_VAR 0 8
11143: PUSH
11144: DOUBLE
11145: LD_INT 1
11147: DEC
11148: ST_TO_ADDR
11149: LD_VAR 0 6
11153: PUSH
11154: FOR_TO
11155: IFFALSE 11278
// begin if i > 4 then
11157: LD_VAR 0 8
11161: PUSH
11162: LD_INT 4
11164: GREATER
11165: IFFALSE 11169
// break ;
11167: GO 11278
// x := personel [ i ] ;
11169: LD_ADDR_VAR 0 13
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_VAR 0 8
11183: ARRAY
11184: ST_TO_ADDR
// if x = - 1 then
11185: LD_VAR 0 13
11189: PUSH
11190: LD_INT 1
11192: NEG
11193: EQUAL
11194: IFFALSE 11198
// continue ;
11196: GO 11154
// PrepareHuman ( false , i , skill ) ;
11198: LD_INT 0
11200: PPUSH
11201: LD_VAR 0 8
11205: PPUSH
11206: LD_VAR 0 4
11210: PPUSH
11211: CALL_OW 380
// un := CreateHuman ;
11215: LD_ADDR_VAR 0 14
11219: PUSH
11220: CALL_OW 44
11224: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11225: LD_VAR 0 14
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 250
11239: PPUSH
11240: LD_VAR 0 1
11244: PPUSH
11245: CALL_OW 251
11249: PPUSH
11250: LD_INT 10
11252: PPUSH
11253: LD_INT 0
11255: PPUSH
11256: CALL_OW 50
// result := result ^ un ;
11260: LD_ADDR_VAR 0 7
11264: PUSH
11265: LD_VAR 0 7
11269: PUSH
11270: LD_VAR 0 14
11274: ADD
11275: ST_TO_ADDR
// end ;
11276: GO 11154
11278: POP
11279: POP
// end ; end ;
11280: LD_VAR 0 7
11284: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
11295: PPUSH
11296: PPUSH
11297: PPUSH
11298: PPUSH
11299: PPUSH
11300: PPUSH
11301: PPUSH
11302: PPUSH
// result := false ;
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_INT 0
11310: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11311: LD_VAR 0 1
11315: NOT
11316: PUSH
11317: LD_VAR 0 1
11321: PPUSH
11322: CALL_OW 266
11326: PUSH
11327: LD_INT 32
11329: PUSH
11330: LD_INT 33
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: IN
11337: NOT
11338: OR
11339: IFFALSE 11343
// exit ;
11341: GO 12452
// nat := GetNation ( tower ) ;
11343: LD_ADDR_VAR 0 12
11347: PUSH
11348: LD_VAR 0 1
11352: PPUSH
11353: CALL_OW 248
11357: ST_TO_ADDR
// side := GetSide ( tower ) ;
11358: LD_ADDR_VAR 0 16
11362: PUSH
11363: LD_VAR 0 1
11367: PPUSH
11368: CALL_OW 255
11372: ST_TO_ADDR
// x := GetX ( tower ) ;
11373: LD_ADDR_VAR 0 10
11377: PUSH
11378: LD_VAR 0 1
11382: PPUSH
11383: CALL_OW 250
11387: ST_TO_ADDR
// y := GetY ( tower ) ;
11388: LD_ADDR_VAR 0 11
11392: PUSH
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL_OW 251
11402: ST_TO_ADDR
// if not x or not y then
11403: LD_VAR 0 10
11407: NOT
11408: PUSH
11409: LD_VAR 0 11
11413: NOT
11414: OR
11415: IFFALSE 11419
// exit ;
11417: GO 12452
// weapon := 0 ;
11419: LD_ADDR_VAR 0 18
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// fac_list := [ ] ;
11427: LD_ADDR_VAR 0 17
11431: PUSH
11432: EMPTY
11433: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11434: LD_ADDR_VAR 0 6
11438: PUSH
11439: LD_VAR 0 1
11443: PPUSH
11444: CALL_OW 274
11448: PPUSH
11449: LD_VAR 0 2
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: CALL 9023 0 3
11461: PPUSH
11462: LD_INT 30
11464: PUSH
11465: LD_INT 3
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PPUSH
11472: CALL_OW 72
11476: ST_TO_ADDR
// if not factories then
11477: LD_VAR 0 6
11481: NOT
11482: IFFALSE 11486
// exit ;
11484: GO 12452
// for i in factories do
11486: LD_ADDR_VAR 0 8
11490: PUSH
11491: LD_VAR 0 6
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11522
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11499: LD_ADDR_VAR 0 17
11503: PUSH
11504: LD_VAR 0 17
11508: PUSH
11509: LD_VAR 0 8
11513: PPUSH
11514: CALL_OW 478
11518: UNION
11519: ST_TO_ADDR
11520: GO 11496
11522: POP
11523: POP
// if not fac_list then
11524: LD_VAR 0 17
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 12452
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11533: LD_ADDR_VAR 0 5
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: LD_INT 5
11543: PUSH
11544: LD_INT 9
11546: PUSH
11547: LD_INT 10
11549: PUSH
11550: LD_INT 6
11552: PUSH
11553: LD_INT 7
11555: PUSH
11556: LD_INT 11
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 27
11570: PUSH
11571: LD_INT 28
11573: PUSH
11574: LD_INT 26
11576: PUSH
11577: LD_INT 30
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 43
11588: PUSH
11589: LD_INT 44
11591: PUSH
11592: LD_INT 46
11594: PUSH
11595: LD_INT 45
11597: PUSH
11598: LD_INT 47
11600: PUSH
11601: LD_INT 49
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_VAR 0 12
11621: ARRAY
11622: ST_TO_ADDR
// list := list isect fac_list ;
11623: LD_ADDR_VAR 0 5
11627: PUSH
11628: LD_VAR 0 5
11632: PUSH
11633: LD_VAR 0 17
11637: ISECT
11638: ST_TO_ADDR
// if not list then
11639: LD_VAR 0 5
11643: NOT
11644: IFFALSE 11648
// exit ;
11646: GO 12452
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11648: LD_VAR 0 12
11652: PUSH
11653: LD_INT 3
11655: EQUAL
11656: PUSH
11657: LD_INT 49
11659: PUSH
11660: LD_VAR 0 5
11664: IN
11665: AND
11666: PUSH
11667: LD_INT 31
11669: PPUSH
11670: LD_VAR 0 16
11674: PPUSH
11675: CALL_OW 321
11679: PUSH
11680: LD_INT 2
11682: EQUAL
11683: AND
11684: IFFALSE 11744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11686: LD_INT 22
11688: PUSH
11689: LD_VAR 0 16
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 35
11700: PUSH
11701: LD_INT 49
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 91
11710: PUSH
11711: LD_VAR 0 1
11715: PUSH
11716: LD_INT 10
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: NOT
11734: IFFALSE 11744
// weapon := ru_time_lapser ;
11736: LD_ADDR_VAR 0 18
11740: PUSH
11741: LD_INT 49
11743: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11744: LD_VAR 0 12
11748: PUSH
11749: LD_INT 1
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: IN
11759: PUSH
11760: LD_INT 11
11762: PUSH
11763: LD_VAR 0 5
11767: IN
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_VAR 0 5
11776: IN
11777: OR
11778: AND
11779: PUSH
11780: LD_INT 6
11782: PPUSH
11783: LD_VAR 0 16
11787: PPUSH
11788: CALL_OW 321
11792: PUSH
11793: LD_INT 2
11795: EQUAL
11796: AND
11797: IFFALSE 11962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11799: LD_INT 22
11801: PUSH
11802: LD_VAR 0 16
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 2
11813: PUSH
11814: LD_INT 35
11816: PUSH
11817: LD_INT 11
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 35
11826: PUSH
11827: LD_INT 30
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 91
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 18
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: NOT
11865: PUSH
11866: LD_INT 22
11868: PUSH
11869: LD_VAR 0 16
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 32
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 30
11893: PUSH
11894: LD_INT 33
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 91
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: LD_INT 12
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: PUSH
11935: LD_INT 2
11937: GREATER
11938: AND
11939: IFFALSE 11962
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11941: LD_ADDR_VAR 0 18
11945: PUSH
11946: LD_INT 11
11948: PUSH
11949: LD_INT 30
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_VAR 0 12
11960: ARRAY
11961: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11962: LD_VAR 0 18
11966: NOT
11967: PUSH
11968: LD_INT 40
11970: PPUSH
11971: LD_VAR 0 16
11975: PPUSH
11976: CALL_OW 321
11980: PUSH
11981: LD_INT 2
11983: EQUAL
11984: AND
11985: PUSH
11986: LD_INT 7
11988: PUSH
11989: LD_VAR 0 5
11993: IN
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: LD_VAR 0 5
12002: IN
12003: OR
12004: PUSH
12005: LD_INT 45
12007: PUSH
12008: LD_VAR 0 5
12012: IN
12013: OR
12014: AND
12015: IFFALSE 12269
// begin hex := GetHexInfo ( x , y ) ;
12017: LD_ADDR_VAR 0 4
12021: PUSH
12022: LD_VAR 0 10
12026: PPUSH
12027: LD_VAR 0 11
12031: PPUSH
12032: CALL_OW 546
12036: ST_TO_ADDR
// if hex [ 1 ] then
12037: LD_VAR 0 4
12041: PUSH
12042: LD_INT 1
12044: ARRAY
12045: IFFALSE 12049
// exit ;
12047: GO 12452
// height := hex [ 2 ] ;
12049: LD_ADDR_VAR 0 15
12053: PUSH
12054: LD_VAR 0 4
12058: PUSH
12059: LD_INT 2
12061: ARRAY
12062: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12063: LD_ADDR_VAR 0 14
12067: PUSH
12068: LD_INT 0
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 5
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: ST_TO_ADDR
// for i in tmp do
12086: LD_ADDR_VAR 0 8
12090: PUSH
12091: LD_VAR 0 14
12095: PUSH
12096: FOR_IN
12097: IFFALSE 12267
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12099: LD_ADDR_VAR 0 9
12103: PUSH
12104: LD_VAR 0 10
12108: PPUSH
12109: LD_VAR 0 8
12113: PPUSH
12114: LD_INT 5
12116: PPUSH
12117: CALL_OW 272
12121: PUSH
12122: LD_VAR 0 11
12126: PPUSH
12127: LD_VAR 0 8
12131: PPUSH
12132: LD_INT 5
12134: PPUSH
12135: CALL_OW 273
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12144: LD_VAR 0 9
12148: PUSH
12149: LD_INT 1
12151: ARRAY
12152: PPUSH
12153: LD_VAR 0 9
12157: PUSH
12158: LD_INT 2
12160: ARRAY
12161: PPUSH
12162: CALL_OW 488
12166: IFFALSE 12265
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12168: LD_ADDR_VAR 0 4
12172: PUSH
12173: LD_VAR 0 9
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PPUSH
12182: LD_VAR 0 9
12186: PUSH
12187: LD_INT 2
12189: ARRAY
12190: PPUSH
12191: CALL_OW 546
12195: ST_TO_ADDR
// if hex [ 1 ] then
12196: LD_VAR 0 4
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: IFFALSE 12208
// continue ;
12206: GO 12096
// h := hex [ 2 ] ;
12208: LD_ADDR_VAR 0 13
12212: PUSH
12213: LD_VAR 0 4
12217: PUSH
12218: LD_INT 2
12220: ARRAY
12221: ST_TO_ADDR
// if h + 7 < height then
12222: LD_VAR 0 13
12226: PUSH
12227: LD_INT 7
12229: PLUS
12230: PUSH
12231: LD_VAR 0 15
12235: LESS
12236: IFFALSE 12265
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12238: LD_ADDR_VAR 0 18
12242: PUSH
12243: LD_INT 7
12245: PUSH
12246: LD_INT 28
12248: PUSH
12249: LD_INT 45
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_VAR 0 12
12261: ARRAY
12262: ST_TO_ADDR
// break ;
12263: GO 12267
// end ; end ; end ;
12265: GO 12096
12267: POP
12268: POP
// end ; if not weapon then
12269: LD_VAR 0 18
12273: NOT
12274: IFFALSE 12334
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12276: LD_ADDR_VAR 0 5
12280: PUSH
12281: LD_VAR 0 5
12285: PUSH
12286: LD_INT 11
12288: PUSH
12289: LD_INT 30
12291: PUSH
12292: LD_INT 49
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: DIFF
12300: ST_TO_ADDR
// if not list then
12301: LD_VAR 0 5
12305: NOT
12306: IFFALSE 12310
// exit ;
12308: GO 12452
// weapon := list [ rand ( 1 , list ) ] ;
12310: LD_ADDR_VAR 0 18
12314: PUSH
12315: LD_VAR 0 5
12319: PUSH
12320: LD_INT 1
12322: PPUSH
12323: LD_VAR 0 5
12327: PPUSH
12328: CALL_OW 12
12332: ARRAY
12333: ST_TO_ADDR
// end ; if weapon then
12334: LD_VAR 0 18
12338: IFFALSE 12452
// begin tmp := CostOfWeapon ( weapon ) ;
12340: LD_ADDR_VAR 0 14
12344: PUSH
12345: LD_VAR 0 18
12349: PPUSH
12350: CALL_OW 451
12354: ST_TO_ADDR
// j := GetBase ( tower ) ;
12355: LD_ADDR_VAR 0 9
12359: PUSH
12360: LD_VAR 0 1
12364: PPUSH
12365: CALL_OW 274
12369: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12370: LD_VAR 0 9
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 275
12382: PUSH
12383: LD_VAR 0 14
12387: PUSH
12388: LD_INT 1
12390: ARRAY
12391: GREATEREQUAL
12392: PUSH
12393: LD_VAR 0 9
12397: PPUSH
12398: LD_INT 2
12400: PPUSH
12401: CALL_OW 275
12405: PUSH
12406: LD_VAR 0 14
12410: PUSH
12411: LD_INT 2
12413: ARRAY
12414: GREATEREQUAL
12415: AND
12416: PUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: LD_INT 3
12424: PPUSH
12425: CALL_OW 275
12429: PUSH
12430: LD_VAR 0 14
12434: PUSH
12435: LD_INT 3
12437: ARRAY
12438: GREATEREQUAL
12439: AND
12440: IFFALSE 12452
// result := weapon ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_VAR 0 18
12451: ST_TO_ADDR
// end ; end ;
12452: LD_VAR 0 3
12456: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12457: LD_INT 0
12459: PPUSH
12460: PPUSH
// result := true ;
12461: LD_ADDR_VAR 0 3
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if array1 = array2 then
12469: LD_VAR 0 1
12473: PUSH
12474: LD_VAR 0 2
12478: EQUAL
12479: IFFALSE 12539
// begin for i = 1 to array1 do
12481: LD_ADDR_VAR 0 4
12485: PUSH
12486: DOUBLE
12487: LD_INT 1
12489: DEC
12490: ST_TO_ADDR
12491: LD_VAR 0 1
12495: PUSH
12496: FOR_TO
12497: IFFALSE 12535
// if array1 [ i ] <> array2 [ i ] then
12499: LD_VAR 0 1
12503: PUSH
12504: LD_VAR 0 4
12508: ARRAY
12509: PUSH
12510: LD_VAR 0 2
12514: PUSH
12515: LD_VAR 0 4
12519: ARRAY
12520: NONEQUAL
12521: IFFALSE 12533
// begin result := false ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// break ;
12531: GO 12535
// end ;
12533: GO 12496
12535: POP
12536: POP
// end else
12537: GO 12547
// result := false ;
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// end ;
12547: LD_VAR 0 3
12551: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// if not array1 or not array2 then
12556: LD_VAR 0 1
12560: NOT
12561: PUSH
12562: LD_VAR 0 2
12566: NOT
12567: OR
12568: IFFALSE 12572
// exit ;
12570: GO 12636
// result := true ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_INT 1
12579: ST_TO_ADDR
// for i = 1 to array1 do
12580: LD_ADDR_VAR 0 4
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_VAR 0 1
12594: PUSH
12595: FOR_TO
12596: IFFALSE 12634
// if array1 [ i ] <> array2 [ i ] then
12598: LD_VAR 0 1
12602: PUSH
12603: LD_VAR 0 4
12607: ARRAY
12608: PUSH
12609: LD_VAR 0 2
12613: PUSH
12614: LD_VAR 0 4
12618: ARRAY
12619: NONEQUAL
12620: IFFALSE 12632
// begin result := false ;
12622: LD_ADDR_VAR 0 3
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// break ;
12630: GO 12634
// end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: LD_VAR 0 3
12640: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12641: LD_INT 0
12643: PPUSH
12644: PPUSH
12645: PPUSH
// pom := GetBase ( fac ) ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 274
12660: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_VAR 0 2
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: PPUSH
12675: LD_VAR 0 2
12679: PUSH
12680: LD_INT 2
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 2
12688: PUSH
12689: LD_INT 3
12691: ARRAY
12692: PPUSH
12693: LD_VAR 0 2
12697: PUSH
12698: LD_INT 4
12700: ARRAY
12701: PPUSH
12702: CALL_OW 449
12706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_VAR 0 5
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 275
12724: PUSH
12725: LD_VAR 0 4
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: GREATEREQUAL
12734: PUSH
12735: LD_VAR 0 5
12739: PPUSH
12740: LD_INT 2
12742: PPUSH
12743: CALL_OW 275
12747: PUSH
12748: LD_VAR 0 4
12752: PUSH
12753: LD_INT 2
12755: ARRAY
12756: GREATEREQUAL
12757: AND
12758: PUSH
12759: LD_VAR 0 5
12763: PPUSH
12764: LD_INT 3
12766: PPUSH
12767: CALL_OW 275
12771: PUSH
12772: LD_VAR 0 4
12776: PUSH
12777: LD_INT 3
12779: ARRAY
12780: GREATEREQUAL
12781: AND
12782: ST_TO_ADDR
// end ;
12783: LD_VAR 0 3
12787: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12788: LD_INT 0
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
// pom := GetBase ( building ) ;
12794: LD_ADDR_VAR 0 3
12798: PUSH
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 274
12808: ST_TO_ADDR
// if not pom then
12809: LD_VAR 0 3
12813: NOT
12814: IFFALSE 12818
// exit ;
12816: GO 12988
// btype := GetBType ( building ) ;
12818: LD_ADDR_VAR 0 5
12822: PUSH
12823: LD_VAR 0 1
12827: PPUSH
12828: CALL_OW 266
12832: ST_TO_ADDR
// if btype = b_armoury then
12833: LD_VAR 0 5
12837: PUSH
12838: LD_INT 4
12840: EQUAL
12841: IFFALSE 12851
// btype := b_barracks ;
12843: LD_ADDR_VAR 0 5
12847: PUSH
12848: LD_INT 5
12850: ST_TO_ADDR
// if btype = b_depot then
12851: LD_VAR 0 5
12855: PUSH
12856: LD_INT 0
12858: EQUAL
12859: IFFALSE 12869
// btype := b_warehouse ;
12861: LD_ADDR_VAR 0 5
12865: PUSH
12866: LD_INT 1
12868: ST_TO_ADDR
// if btype = b_workshop then
12869: LD_VAR 0 5
12873: PUSH
12874: LD_INT 2
12876: EQUAL
12877: IFFALSE 12887
// btype := b_factory ;
12879: LD_ADDR_VAR 0 5
12883: PUSH
12884: LD_INT 3
12886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12887: LD_ADDR_VAR 0 4
12891: PUSH
12892: LD_VAR 0 5
12896: PPUSH
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 248
12906: PPUSH
12907: CALL_OW 450
12911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12912: LD_ADDR_VAR 0 2
12916: PUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 275
12929: PUSH
12930: LD_VAR 0 4
12934: PUSH
12935: LD_INT 1
12937: ARRAY
12938: GREATEREQUAL
12939: PUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 2
12947: PPUSH
12948: CALL_OW 275
12952: PUSH
12953: LD_VAR 0 4
12957: PUSH
12958: LD_INT 2
12960: ARRAY
12961: GREATEREQUAL
12962: AND
12963: PUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 3
12971: PPUSH
12972: CALL_OW 275
12976: PUSH
12977: LD_VAR 0 4
12981: PUSH
12982: LD_INT 3
12984: ARRAY
12985: GREATEREQUAL
12986: AND
12987: ST_TO_ADDR
// end ;
12988: LD_VAR 0 2
12992: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12993: LD_INT 0
12995: PPUSH
12996: PPUSH
12997: PPUSH
// pom := GetBase ( building ) ;
12998: LD_ADDR_VAR 0 4
13002: PUSH
13003: LD_VAR 0 1
13007: PPUSH
13008: CALL_OW 274
13012: ST_TO_ADDR
// if not pom then
13013: LD_VAR 0 4
13017: NOT
13018: IFFALSE 13022
// exit ;
13020: GO 13123
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13022: LD_ADDR_VAR 0 5
13026: PUSH
13027: LD_VAR 0 2
13031: PPUSH
13032: LD_VAR 0 1
13036: PPUSH
13037: CALL_OW 248
13041: PPUSH
13042: CALL_OW 450
13046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: LD_VAR 0 4
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 275
13064: PUSH
13065: LD_VAR 0 5
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: GREATEREQUAL
13074: PUSH
13075: LD_VAR 0 4
13079: PPUSH
13080: LD_INT 2
13082: PPUSH
13083: CALL_OW 275
13087: PUSH
13088: LD_VAR 0 5
13092: PUSH
13093: LD_INT 2
13095: ARRAY
13096: GREATEREQUAL
13097: AND
13098: PUSH
13099: LD_VAR 0 4
13103: PPUSH
13104: LD_INT 3
13106: PPUSH
13107: CALL_OW 275
13111: PUSH
13112: LD_VAR 0 5
13116: PUSH
13117: LD_INT 3
13119: ARRAY
13120: GREATEREQUAL
13121: AND
13122: ST_TO_ADDR
// end ;
13123: LD_VAR 0 3
13127: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
// result := false ;
13141: LD_ADDR_VAR 0 8
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13149: LD_VAR 0 5
13153: NOT
13154: PUSH
13155: LD_VAR 0 1
13159: NOT
13160: OR
13161: PUSH
13162: LD_VAR 0 2
13166: NOT
13167: OR
13168: PUSH
13169: LD_VAR 0 3
13173: NOT
13174: OR
13175: IFFALSE 13179
// exit ;
13177: GO 13993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13179: LD_ADDR_VAR 0 14
13183: PUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: LD_VAR 0 2
13193: PPUSH
13194: LD_VAR 0 3
13198: PPUSH
13199: LD_VAR 0 4
13203: PPUSH
13204: LD_VAR 0 5
13208: PUSH
13209: LD_INT 1
13211: ARRAY
13212: PPUSH
13213: CALL_OW 248
13217: PPUSH
13218: LD_INT 0
13220: PPUSH
13221: CALL 15226 0 6
13225: ST_TO_ADDR
// if not hexes then
13226: LD_VAR 0 14
13230: NOT
13231: IFFALSE 13235
// exit ;
13233: GO 13993
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13235: LD_ADDR_VAR 0 17
13239: PUSH
13240: LD_VAR 0 5
13244: PPUSH
13245: LD_INT 22
13247: PUSH
13248: LD_VAR 0 13
13252: PPUSH
13253: CALL_OW 255
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 30
13267: PUSH
13268: LD_INT 0
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 30
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 72
13298: ST_TO_ADDR
// for i = 1 to hexes do
13299: LD_ADDR_VAR 0 9
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_VAR 0 14
13313: PUSH
13314: FOR_TO
13315: IFFALSE 13991
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13317: LD_ADDR_VAR 0 13
13321: PUSH
13322: LD_VAR 0 14
13326: PUSH
13327: LD_VAR 0 9
13331: ARRAY
13332: PUSH
13333: LD_INT 1
13335: ARRAY
13336: PPUSH
13337: LD_VAR 0 14
13341: PUSH
13342: LD_VAR 0 9
13346: ARRAY
13347: PUSH
13348: LD_INT 2
13350: ARRAY
13351: PPUSH
13352: CALL_OW 428
13356: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13357: LD_VAR 0 14
13361: PUSH
13362: LD_VAR 0 9
13366: ARRAY
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_VAR 0 14
13376: PUSH
13377: LD_VAR 0 9
13381: ARRAY
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: CALL_OW 351
13391: PUSH
13392: LD_VAR 0 14
13396: PUSH
13397: LD_VAR 0 9
13401: ARRAY
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 14
13411: PUSH
13412: LD_VAR 0 9
13416: ARRAY
13417: PUSH
13418: LD_INT 2
13420: ARRAY
13421: PPUSH
13422: CALL_OW 488
13426: NOT
13427: OR
13428: PUSH
13429: LD_VAR 0 13
13433: PPUSH
13434: CALL_OW 247
13438: PUSH
13439: LD_INT 3
13441: EQUAL
13442: OR
13443: IFFALSE 13449
// exit ;
13445: POP
13446: POP
13447: GO 13993
// if not tmp then
13449: LD_VAR 0 13
13453: NOT
13454: IFFALSE 13458
// continue ;
13456: GO 13314
// result := true ;
13458: LD_ADDR_VAR 0 8
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13466: LD_VAR 0 6
13470: PUSH
13471: LD_VAR 0 13
13475: PPUSH
13476: CALL_OW 247
13480: PUSH
13481: LD_INT 2
13483: EQUAL
13484: AND
13485: PUSH
13486: LD_VAR 0 13
13490: PPUSH
13491: CALL_OW 263
13495: PUSH
13496: LD_INT 1
13498: EQUAL
13499: AND
13500: IFFALSE 13664
// begin if IsDrivenBy ( tmp ) then
13502: LD_VAR 0 13
13506: PPUSH
13507: CALL_OW 311
13511: IFFALSE 13515
// continue ;
13513: GO 13314
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13515: LD_VAR 0 6
13519: PPUSH
13520: LD_INT 3
13522: PUSH
13523: LD_INT 60
13525: PUSH
13526: EMPTY
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 3
13535: PUSH
13536: LD_INT 55
13538: PUSH
13539: EMPTY
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 72
13554: IFFALSE 13662
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13556: LD_ADDR_VAR 0 18
13560: PUSH
13561: LD_VAR 0 6
13565: PPUSH
13566: LD_INT 3
13568: PUSH
13569: LD_INT 60
13571: PUSH
13572: EMPTY
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 3
13581: PUSH
13582: LD_INT 55
13584: PUSH
13585: EMPTY
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 72
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: ST_TO_ADDR
// if IsInUnit ( driver ) then
13605: LD_VAR 0 18
13609: PPUSH
13610: CALL_OW 310
13614: IFFALSE 13625
// ComExit ( driver ) ;
13616: LD_VAR 0 18
13620: PPUSH
13621: CALL 38914 0 1
// AddComEnterUnit ( driver , tmp ) ;
13625: LD_VAR 0 18
13629: PPUSH
13630: LD_VAR 0 13
13634: PPUSH
13635: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13639: LD_VAR 0 18
13643: PPUSH
13644: LD_VAR 0 7
13648: PPUSH
13649: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13653: LD_VAR 0 18
13657: PPUSH
13658: CALL_OW 181
// end ; continue ;
13662: GO 13314
// end ; if not cleaners or not tmp in cleaners then
13664: LD_VAR 0 6
13668: NOT
13669: PUSH
13670: LD_VAR 0 13
13674: PUSH
13675: LD_VAR 0 6
13679: IN
13680: NOT
13681: OR
13682: IFFALSE 13989
// begin if dep then
13684: LD_VAR 0 17
13688: IFFALSE 13824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13690: LD_ADDR_VAR 0 16
13694: PUSH
13695: LD_VAR 0 17
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 250
13708: PPUSH
13709: LD_VAR 0 17
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: PPUSH
13718: CALL_OW 254
13722: PPUSH
13723: LD_INT 5
13725: PPUSH
13726: CALL_OW 272
13730: PUSH
13731: LD_VAR 0 17
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: PPUSH
13740: CALL_OW 251
13744: PPUSH
13745: LD_VAR 0 17
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: CALL_OW 254
13758: PPUSH
13759: LD_INT 5
13761: PPUSH
13762: CALL_OW 273
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13771: LD_VAR 0 16
13775: PUSH
13776: LD_INT 1
13778: ARRAY
13779: PPUSH
13780: LD_VAR 0 16
13784: PUSH
13785: LD_INT 2
13787: ARRAY
13788: PPUSH
13789: CALL_OW 488
13793: IFFALSE 13824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13795: LD_VAR 0 13
13799: PPUSH
13800: LD_VAR 0 16
13804: PUSH
13805: LD_INT 1
13807: ARRAY
13808: PPUSH
13809: LD_VAR 0 16
13813: PUSH
13814: LD_INT 2
13816: ARRAY
13817: PPUSH
13818: CALL_OW 111
// continue ;
13822: GO 13314
// end ; end ; r := GetDir ( tmp ) ;
13824: LD_ADDR_VAR 0 15
13828: PUSH
13829: LD_VAR 0 13
13833: PPUSH
13834: CALL_OW 254
13838: ST_TO_ADDR
// if r = 5 then
13839: LD_VAR 0 15
13843: PUSH
13844: LD_INT 5
13846: EQUAL
13847: IFFALSE 13857
// r := 0 ;
13849: LD_ADDR_VAR 0 15
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// for j = r to 5 do
13857: LD_ADDR_VAR 0 10
13861: PUSH
13862: DOUBLE
13863: LD_VAR 0 15
13867: DEC
13868: ST_TO_ADDR
13869: LD_INT 5
13871: PUSH
13872: FOR_TO
13873: IFFALSE 13987
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13875: LD_ADDR_VAR 0 11
13879: PUSH
13880: LD_VAR 0 13
13884: PPUSH
13885: CALL_OW 250
13889: PPUSH
13890: LD_VAR 0 10
13894: PPUSH
13895: LD_INT 2
13897: PPUSH
13898: CALL_OW 272
13902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13903: LD_ADDR_VAR 0 12
13907: PUSH
13908: LD_VAR 0 13
13912: PPUSH
13913: CALL_OW 251
13917: PPUSH
13918: LD_VAR 0 10
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 273
13930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13931: LD_VAR 0 11
13935: PPUSH
13936: LD_VAR 0 12
13940: PPUSH
13941: CALL_OW 488
13945: PUSH
13946: LD_VAR 0 11
13950: PPUSH
13951: LD_VAR 0 12
13955: PPUSH
13956: CALL_OW 428
13960: NOT
13961: AND
13962: IFFALSE 13985
// begin ComMoveXY ( tmp , _x , _y ) ;
13964: LD_VAR 0 13
13968: PPUSH
13969: LD_VAR 0 11
13973: PPUSH
13974: LD_VAR 0 12
13978: PPUSH
13979: CALL_OW 111
// break ;
13983: GO 13987
// end ; end ;
13985: GO 13872
13987: POP
13988: POP
// end ; end ;
13989: GO 13314
13991: POP
13992: POP
// end ;
13993: LD_VAR 0 8
13997: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13998: LD_INT 0
14000: PPUSH
// result := true ;
14001: LD_ADDR_VAR 0 3
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14009: LD_VAR 0 2
14013: PUSH
14014: LD_INT 24
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14028
14020: LD_INT 33
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14053
14028: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 32
14036: PPUSH
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 321
14046: PUSH
14047: LD_INT 2
14049: EQUAL
14050: ST_TO_ADDR
14051: GO 14369
14053: LD_INT 20
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14086
14061: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14062: LD_ADDR_VAR 0 3
14066: PUSH
14067: LD_INT 6
14069: PPUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 321
14079: PUSH
14080: LD_INT 2
14082: EQUAL
14083: ST_TO_ADDR
14084: GO 14369
14086: LD_INT 22
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14100
14092: LD_INT 36
14094: DOUBLE
14095: EQUAL
14096: IFTRUE 14100
14098: GO 14125
14100: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14101: LD_ADDR_VAR 0 3
14105: PUSH
14106: LD_INT 15
14108: PPUSH
14109: LD_VAR 0 1
14113: PPUSH
14114: CALL_OW 321
14118: PUSH
14119: LD_INT 2
14121: EQUAL
14122: ST_TO_ADDR
14123: GO 14369
14125: LD_INT 30
14127: DOUBLE
14128: EQUAL
14129: IFTRUE 14133
14131: GO 14158
14133: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14134: LD_ADDR_VAR 0 3
14138: PUSH
14139: LD_INT 20
14141: PPUSH
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 321
14151: PUSH
14152: LD_INT 2
14154: EQUAL
14155: ST_TO_ADDR
14156: GO 14369
14158: LD_INT 28
14160: DOUBLE
14161: EQUAL
14162: IFTRUE 14172
14164: LD_INT 21
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14197
14172: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_INT 21
14180: PPUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 321
14190: PUSH
14191: LD_INT 2
14193: EQUAL
14194: ST_TO_ADDR
14195: GO 14369
14197: LD_INT 16
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14230
14205: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14206: LD_ADDR_VAR 0 3
14210: PUSH
14211: LD_INT 84
14213: PPUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 321
14223: PUSH
14224: LD_INT 2
14226: EQUAL
14227: ST_TO_ADDR
14228: GO 14369
14230: LD_INT 19
14232: DOUBLE
14233: EQUAL
14234: IFTRUE 14244
14236: LD_INT 23
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14269
14244: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14245: LD_ADDR_VAR 0 3
14249: PUSH
14250: LD_INT 83
14252: PPUSH
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 321
14262: PUSH
14263: LD_INT 2
14265: EQUAL
14266: ST_TO_ADDR
14267: GO 14369
14269: LD_INT 17
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14302
14277: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14278: LD_ADDR_VAR 0 3
14282: PUSH
14283: LD_INT 39
14285: PPUSH
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 321
14295: PUSH
14296: LD_INT 2
14298: EQUAL
14299: ST_TO_ADDR
14300: GO 14369
14302: LD_INT 18
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14335
14310: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 40
14318: PPUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL_OW 321
14328: PUSH
14329: LD_INT 2
14331: EQUAL
14332: ST_TO_ADDR
14333: GO 14369
14335: LD_INT 27
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14368
14343: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_INT 35
14351: PPUSH
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 321
14361: PUSH
14362: LD_INT 2
14364: EQUAL
14365: ST_TO_ADDR
14366: GO 14369
14368: POP
// end ;
14369: LD_VAR 0 3
14373: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
// result := false ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_INT 0
14394: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14395: LD_VAR 0 1
14399: NOT
14400: PUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 266
14410: PUSH
14411: LD_INT 0
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: IN
14421: NOT
14422: OR
14423: PUSH
14424: LD_VAR 0 2
14428: NOT
14429: OR
14430: PUSH
14431: LD_VAR 0 5
14435: PUSH
14436: LD_INT 0
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: LD_INT 4
14450: PUSH
14451: LD_INT 5
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: IN
14462: NOT
14463: OR
14464: PUSH
14465: LD_VAR 0 3
14469: PPUSH
14470: LD_VAR 0 4
14474: PPUSH
14475: CALL_OW 488
14479: NOT
14480: OR
14481: IFFALSE 14485
// exit ;
14483: GO 15221
// side := GetSide ( depot ) ;
14485: LD_ADDR_VAR 0 9
14489: PUSH
14490: LD_VAR 0 1
14494: PPUSH
14495: CALL_OW 255
14499: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14500: LD_VAR 0 9
14504: PPUSH
14505: LD_VAR 0 2
14509: PPUSH
14510: CALL 13998 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 15221
// pom := GetBase ( depot ) ;
14519: LD_ADDR_VAR 0 10
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 274
14533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14534: LD_ADDR_VAR 0 11
14538: PUSH
14539: LD_VAR 0 2
14543: PPUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 248
14553: PPUSH
14554: CALL_OW 450
14558: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14559: LD_VAR 0 10
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 275
14571: PUSH
14572: LD_VAR 0 11
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: GREATEREQUAL
14581: PUSH
14582: LD_VAR 0 10
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 275
14594: PUSH
14595: LD_VAR 0 11
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: GREATEREQUAL
14604: AND
14605: PUSH
14606: LD_VAR 0 10
14610: PPUSH
14611: LD_INT 3
14613: PPUSH
14614: CALL_OW 275
14618: PUSH
14619: LD_VAR 0 11
14623: PUSH
14624: LD_INT 3
14626: ARRAY
14627: GREATEREQUAL
14628: AND
14629: NOT
14630: IFFALSE 14634
// exit ;
14632: GO 15221
// if GetBType ( depot ) = b_depot then
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 266
14643: PUSH
14644: LD_INT 0
14646: EQUAL
14647: IFFALSE 14659
// dist := 28 else
14649: LD_ADDR_VAR 0 14
14653: PUSH
14654: LD_INT 28
14656: ST_TO_ADDR
14657: GO 14667
// dist := 36 ;
14659: LD_ADDR_VAR 0 14
14663: PUSH
14664: LD_INT 36
14666: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14667: LD_VAR 0 1
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_VAR 0 4
14681: PPUSH
14682: CALL_OW 297
14686: PUSH
14687: LD_VAR 0 14
14691: GREATER
14692: IFFALSE 14696
// exit ;
14694: GO 15221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14696: LD_ADDR_VAR 0 12
14700: PUSH
14701: LD_VAR 0 2
14705: PPUSH
14706: LD_VAR 0 3
14710: PPUSH
14711: LD_VAR 0 4
14715: PPUSH
14716: LD_VAR 0 5
14720: PPUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 248
14730: PPUSH
14731: LD_INT 0
14733: PPUSH
14734: CALL 15226 0 6
14738: ST_TO_ADDR
// if not hexes then
14739: LD_VAR 0 12
14743: NOT
14744: IFFALSE 14748
// exit ;
14746: GO 15221
// hex := GetHexInfo ( x , y ) ;
14748: LD_ADDR_VAR 0 15
14752: PUSH
14753: LD_VAR 0 3
14757: PPUSH
14758: LD_VAR 0 4
14762: PPUSH
14763: CALL_OW 546
14767: ST_TO_ADDR
// if hex [ 1 ] then
14768: LD_VAR 0 15
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: IFFALSE 14780
// exit ;
14778: GO 15221
// height := hex [ 2 ] ;
14780: LD_ADDR_VAR 0 13
14784: PUSH
14785: LD_VAR 0 15
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: ST_TO_ADDR
// for i = 1 to hexes do
14794: LD_ADDR_VAR 0 7
14798: PUSH
14799: DOUBLE
14800: LD_INT 1
14802: DEC
14803: ST_TO_ADDR
14804: LD_VAR 0 12
14808: PUSH
14809: FOR_TO
14810: IFFALSE 15140
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14812: LD_VAR 0 12
14816: PUSH
14817: LD_VAR 0 7
14821: ARRAY
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: LD_VAR 0 12
14831: PUSH
14832: LD_VAR 0 7
14836: ARRAY
14837: PUSH
14838: LD_INT 2
14840: ARRAY
14841: PPUSH
14842: CALL_OW 488
14846: NOT
14847: PUSH
14848: LD_VAR 0 12
14852: PUSH
14853: LD_VAR 0 7
14857: ARRAY
14858: PUSH
14859: LD_INT 1
14861: ARRAY
14862: PPUSH
14863: LD_VAR 0 12
14867: PUSH
14868: LD_VAR 0 7
14872: ARRAY
14873: PUSH
14874: LD_INT 2
14876: ARRAY
14877: PPUSH
14878: CALL_OW 428
14882: PUSH
14883: LD_INT 0
14885: GREATER
14886: OR
14887: PUSH
14888: LD_VAR 0 12
14892: PUSH
14893: LD_VAR 0 7
14897: ARRAY
14898: PUSH
14899: LD_INT 1
14901: ARRAY
14902: PPUSH
14903: LD_VAR 0 12
14907: PUSH
14908: LD_VAR 0 7
14912: ARRAY
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: PPUSH
14918: CALL_OW 351
14922: OR
14923: IFFALSE 14929
// exit ;
14925: POP
14926: POP
14927: GO 15221
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14929: LD_ADDR_VAR 0 8
14933: PUSH
14934: LD_VAR 0 12
14938: PUSH
14939: LD_VAR 0 7
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_VAR 0 12
14953: PUSH
14954: LD_VAR 0 7
14958: ARRAY
14959: PUSH
14960: LD_INT 2
14962: ARRAY
14963: PPUSH
14964: CALL_OW 546
14968: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14969: LD_VAR 0 8
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PUSH
14978: LD_VAR 0 8
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: PUSH
14987: LD_VAR 0 13
14991: PUSH
14992: LD_INT 2
14994: PLUS
14995: GREATER
14996: OR
14997: PUSH
14998: LD_VAR 0 8
15002: PUSH
15003: LD_INT 2
15005: ARRAY
15006: PUSH
15007: LD_VAR 0 13
15011: PUSH
15012: LD_INT 2
15014: MINUS
15015: LESS
15016: OR
15017: PUSH
15018: LD_VAR 0 8
15022: PUSH
15023: LD_INT 3
15025: ARRAY
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: LD_INT 8
15032: PUSH
15033: LD_INT 9
15035: PUSH
15036: LD_INT 10
15038: PUSH
15039: LD_INT 11
15041: PUSH
15042: LD_INT 12
15044: PUSH
15045: LD_INT 13
15047: PUSH
15048: LD_INT 16
15050: PUSH
15051: LD_INT 17
15053: PUSH
15054: LD_INT 18
15056: PUSH
15057: LD_INT 19
15059: PUSH
15060: LD_INT 20
15062: PUSH
15063: LD_INT 21
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: IN
15081: NOT
15082: OR
15083: PUSH
15084: LD_VAR 0 8
15088: PUSH
15089: LD_INT 5
15091: ARRAY
15092: NOT
15093: OR
15094: PUSH
15095: LD_VAR 0 8
15099: PUSH
15100: LD_INT 6
15102: ARRAY
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: LD_INT 2
15109: PUSH
15110: LD_INT 7
15112: PUSH
15113: LD_INT 9
15115: PUSH
15116: LD_INT 10
15118: PUSH
15119: LD_INT 11
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: IN
15130: NOT
15131: OR
15132: IFFALSE 15138
// exit ;
15134: POP
15135: POP
15136: GO 15221
// end ;
15138: GO 14809
15140: POP
15141: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15142: LD_VAR 0 9
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_VAR 0 4
15156: PPUSH
15157: LD_INT 20
15159: PPUSH
15160: CALL 7173 0 4
15164: PUSH
15165: LD_INT 4
15167: ARRAY
15168: IFFALSE 15172
// exit ;
15170: GO 15221
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15172: LD_VAR 0 2
15176: PUSH
15177: LD_INT 29
15179: PUSH
15180: LD_INT 30
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: IN
15187: PUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_VAR 0 4
15197: PPUSH
15198: LD_VAR 0 9
15202: PPUSH
15203: CALL_OW 440
15207: NOT
15208: AND
15209: IFFALSE 15213
// exit ;
15211: GO 15221
// result := true ;
15213: LD_ADDR_VAR 0 6
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// end ;
15221: LD_VAR 0 6
15225: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15226: LD_INT 0
15228: PPUSH
15229: PPUSH
15230: PPUSH
15231: PPUSH
15232: PPUSH
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
15285: PPUSH
// result = [ ] ;
15286: LD_ADDR_VAR 0 7
15290: PUSH
15291: EMPTY
15292: ST_TO_ADDR
// temp_list = [ ] ;
15293: LD_ADDR_VAR 0 9
15297: PUSH
15298: EMPTY
15299: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15300: LD_VAR 0 4
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: LD_INT 4
15319: PUSH
15320: LD_INT 5
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: IN
15331: NOT
15332: PUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_INT 0
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: IN
15348: PUSH
15349: LD_VAR 0 5
15353: PUSH
15354: LD_INT 1
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: IN
15368: NOT
15369: AND
15370: OR
15371: IFFALSE 15375
// exit ;
15373: GO 33766
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 6
15382: PUSH
15383: LD_INT 7
15385: PUSH
15386: LD_INT 8
15388: PUSH
15389: LD_INT 13
15391: PUSH
15392: LD_INT 12
15394: PUSH
15395: LD_INT 15
15397: PUSH
15398: LD_INT 11
15400: PUSH
15401: LD_INT 14
15403: PUSH
15404: LD_INT 10
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: IN
15418: IFFALSE 15428
// btype = b_lab ;
15420: LD_ADDR_VAR 0 1
15424: PUSH
15425: LD_INT 6
15427: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15428: LD_VAR 0 6
15432: PUSH
15433: LD_INT 0
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: IN
15447: NOT
15448: PUSH
15449: LD_VAR 0 1
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: LD_INT 2
15462: PUSH
15463: LD_INT 3
15465: PUSH
15466: LD_INT 6
15468: PUSH
15469: LD_INT 36
15471: PUSH
15472: LD_INT 4
15474: PUSH
15475: LD_INT 5
15477: PUSH
15478: LD_INT 31
15480: PUSH
15481: LD_INT 32
15483: PUSH
15484: LD_INT 33
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: IN
15500: NOT
15501: PUSH
15502: LD_VAR 0 6
15506: PUSH
15507: LD_INT 1
15509: EQUAL
15510: AND
15511: OR
15512: PUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: IN
15528: NOT
15529: PUSH
15530: LD_VAR 0 6
15534: PUSH
15535: LD_INT 2
15537: EQUAL
15538: AND
15539: OR
15540: IFFALSE 15550
// mode = 0 ;
15542: LD_ADDR_VAR 0 6
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// case mode of 0 :
15550: LD_VAR 0 6
15554: PUSH
15555: LD_INT 0
15557: DOUBLE
15558: EQUAL
15559: IFTRUE 15563
15561: GO 27016
15563: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15564: LD_ADDR_VAR 0 11
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 1
15584: NEG
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 0
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 1
15622: NEG
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: NEG
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: LD_INT 2
15649: NEG
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 2
15660: NEG
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: LD_INT 1
15671: NEG
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 1
15699: NEG
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: LD_INT 3
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: NEG
15731: PUSH
15732: LD_INT 2
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15757: LD_ADDR_VAR 0 12
15761: PUSH
15762: LD_INT 0
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: LD_INT 1
15777: NEG
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: LD_INT 0
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 1
15815: NEG
15816: PUSH
15817: LD_INT 0
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 1
15826: NEG
15827: PUSH
15828: LD_INT 1
15830: NEG
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: LD_INT 1
15841: NEG
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 2
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: NEG
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 2
15880: NEG
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 2
15891: NEG
15892: PUSH
15893: LD_INT 1
15895: NEG
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 2
15903: NEG
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 3
15914: NEG
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 3
15925: NEG
15926: PUSH
15927: LD_INT 1
15929: NEG
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15953: LD_ADDR_VAR 0 13
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: PUSH
15992: LD_INT 1
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: NEG
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 1
16022: NEG
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: NEG
16035: PUSH
16036: LD_INT 2
16038: NEG
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 2
16076: NEG
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 2
16088: NEG
16089: PUSH
16090: LD_INT 2
16092: NEG
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 2
16100: NEG
16101: PUSH
16102: LD_INT 3
16104: NEG
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 3
16112: NEG
16113: PUSH
16114: LD_INT 2
16116: NEG
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 3
16124: NEG
16125: PUSH
16126: LD_INT 3
16128: NEG
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16152: LD_ADDR_VAR 0 14
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: NEG
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 1
16221: NEG
16222: PUSH
16223: LD_INT 1
16225: NEG
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: LD_INT 2
16237: NEG
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: LD_INT 2
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: LD_INT 1
16259: NEG
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 0
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 1
16298: NEG
16299: PUSH
16300: LD_INT 3
16302: NEG
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 0
16310: PUSH
16311: LD_INT 3
16313: NEG
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 1
16321: PUSH
16322: LD_INT 2
16324: NEG
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16348: LD_ADDR_VAR 0 15
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: LD_INT 0
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 1
16406: NEG
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: LD_INT 1
16421: NEG
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: NEG
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: NEG
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 3
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16541: LD_ADDR_VAR 0 16
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: LD_INT 1
16561: NEG
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 1
16599: NEG
16600: PUSH
16601: LD_INT 0
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: LD_INT 2
16626: NEG
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 2
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 2
16664: NEG
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: NEG
16677: PUSH
16678: LD_INT 2
16680: NEG
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 3
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 2
16708: PUSH
16709: LD_INT 3
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16734: LD_ADDR_VAR 0 17
16738: PUSH
16739: LD_INT 0
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 1
16754: NEG
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: LD_INT 0
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: NEG
16793: PUSH
16794: LD_INT 0
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: NEG
16804: PUSH
16805: LD_INT 1
16807: NEG
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: LD_INT 2
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: LD_INT 2
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: LD_INT 1
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 0
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: LD_INT 1
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: NEG
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 2
16921: NEG
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 2
16933: NEG
16934: PUSH
16935: LD_INT 2
16937: NEG
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16964: LD_ADDR_VAR 0 18
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: LD_INT 1
16984: NEG
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 0
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 1
17022: NEG
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 1
17033: NEG
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: NEG
17046: PUSH
17047: LD_INT 2
17049: NEG
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: LD_INT 2
17060: NEG
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 1
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 1
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: LD_INT 2
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 1
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 2
17140: NEG
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: NEG
17164: PUSH
17165: LD_INT 2
17167: NEG
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17194: LD_ADDR_VAR 0 19
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 1
17275: NEG
17276: PUSH
17277: LD_INT 2
17279: NEG
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 2
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 2
17370: NEG
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 2
17381: NEG
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 2
17393: NEG
17394: PUSH
17395: LD_INT 2
17397: NEG
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17424: LD_ADDR_VAR 0 20
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 0
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: NEG
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: NEG
17506: PUSH
17507: LD_INT 2
17509: NEG
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: LD_INT 2
17520: NEG
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 2
17600: NEG
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: LD_INT 2
17627: NEG
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17654: LD_ADDR_VAR 0 21
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: LD_INT 1
17674: NEG
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 0
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 1
17712: NEG
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: NEG
17736: PUSH
17737: LD_INT 2
17739: NEG
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: LD_INT 2
17750: NEG
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 2
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 2
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 2
17830: NEG
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: NEG
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: NEG
17854: PUSH
17855: LD_INT 2
17857: NEG
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17884: LD_ADDR_VAR 0 22
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 1
17942: NEG
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 2
18060: NEG
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: NEG
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: LD_INT 2
18087: NEG
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18114: LD_ADDR_VAR 0 23
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: LD_INT 1
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 2
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: NEG
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: NEG
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: NEG
18314: PUSH
18315: LD_INT 2
18317: NEG
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 2
18325: NEG
18326: PUSH
18327: LD_INT 3
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 3
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18394: LD_ADDR_VAR 0 24
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 2
18593: NEG
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 2
18608: NEG
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 3
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18670: LD_ADDR_VAR 0 25
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 2
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 2
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: NEG
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: NEG
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: NEG
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: LD_INT 2
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 3
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18944: LD_ADDR_VAR 0 26
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 3
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19220: LD_ADDR_VAR 0 27
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 3
19453: NEG
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 3
19465: NEG
19466: PUSH
19467: LD_INT 2
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19500: LD_ADDR_VAR 0 28
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: NEG
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 2
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 2
19699: NEG
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 2
19711: NEG
19712: PUSH
19713: LD_INT 3
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 3
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 3
19735: NEG
19736: PUSH
19737: LD_INT 1
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 3
19747: NEG
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19782: LD_ADDR_VAR 0 29
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: NEG
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 2
19972: NEG
19973: PUSH
19974: LD_INT 3
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 3
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 3
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 3
20026: NEG
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20061: LD_ADDR_VAR 0 30
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: LD_INT 1
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: LD_INT 2
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 3
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 3
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 3
20304: NEG
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20339: LD_ADDR_VAR 0 31
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 2
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 2
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: LD_INT 3
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: LD_INT 3
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: NEG
20583: PUSH
20584: LD_INT 2
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20617: LD_ADDR_VAR 0 32
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 2
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 2
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 2
20794: NEG
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 3
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 3
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 3
20860: NEG
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20895: LD_ADDR_VAR 0 33
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: LD_INT 1
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: NEG
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: NEG
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: NEG
21086: PUSH
21087: LD_INT 3
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 3
21139: NEG
21140: PUSH
21141: LD_INT 2
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21174: LD_ADDR_VAR 0 34
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: NEG
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: LD_INT 3
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 3
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: LD_INT 3
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 3
21419: NEG
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21454: LD_ADDR_VAR 0 35
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21566: LD_ADDR_VAR 0 36
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21678: LD_ADDR_VAR 0 37
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 1
21698: NEG
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: LD_INT 1
21762: NEG
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21790: LD_ADDR_VAR 0 38
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21902: LD_ADDR_VAR 0 39
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22014: LD_ADDR_VAR 0 40
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22126: LD_ADDR_VAR 0 41
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 2
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: LD_INT 2
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: LD_INT 3
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 3
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 3
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 3
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 3
22400: NEG
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 3
22411: NEG
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 3
22423: NEG
22424: PUSH
22425: LD_INT 2
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 3
22435: NEG
22436: PUSH
22437: LD_INT 3
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22476: LD_ADDR_VAR 0 42
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 2
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: NEG
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: LD_INT 3
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: LD_INT 3
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: PUSH
22702: LD_INT 2
22704: NEG
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 0
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 3
22773: NEG
22774: PUSH
22775: LD_INT 2
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 3
22785: NEG
22786: PUSH
22787: LD_INT 3
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22826: LD_ADDR_VAR 0 43
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 2
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 2
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: LD_INT 3
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 3
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 3
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 3
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 3
23122: NEG
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 3
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23174: LD_ADDR_VAR 0 44
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: LD_INT 3
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 3
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 3
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 3
23459: NEG
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 3
23471: NEG
23472: PUSH
23473: LD_INT 2
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 3
23483: NEG
23484: PUSH
23485: LD_INT 3
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23524: LD_ADDR_VAR 0 45
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: NEG
23715: PUSH
23716: LD_INT 3
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: LD_INT 3
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 3
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 3
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 3
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 3
23833: NEG
23834: PUSH
23835: LD_INT 3
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23874: LD_ADDR_VAR 0 46
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 2
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: NEG
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 2
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: LD_INT 3
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 3
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 2
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 3
24170: NEG
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 3
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24222: LD_ADDR_VAR 0 47
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 2
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24373: LD_ADDR_VAR 0 48
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24520: LD_ADDR_VAR 0 49
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24664: LD_ADDR_VAR 0 50
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24808: LD_ADDR_VAR 0 51
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24955: LD_ADDR_VAR 0 52
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: NEG
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25106: LD_ADDR_VAR 0 53
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 2
25282: NEG
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: NEG
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25336: LD_ADDR_VAR 0 54
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: LD_INT 2
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25566: LD_ADDR_VAR 0 55
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: NEG
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: NEG
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25796: LD_ADDR_VAR 0 56
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: LD_INT 2
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26026: LD_ADDR_VAR 0 57
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26256: LD_ADDR_VAR 0 58
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26486: LD_ADDR_VAR 0 59
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26574: LD_ADDR_VAR 0 60
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26662: LD_ADDR_VAR 0 61
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26750: LD_ADDR_VAR 0 62
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26838: LD_ADDR_VAR 0 63
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26926: LD_ADDR_VAR 0 64
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: ST_TO_ADDR
// end ; 1 :
27014: GO 32911
27016: LD_INT 1
27018: DOUBLE
27019: EQUAL
27020: IFTRUE 27024
27022: GO 29647
27024: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27025: LD_ADDR_VAR 0 11
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 3
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27069: LD_ADDR_VAR 0 12
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27110: LD_ADDR_VAR 0 13
27114: PUSH
27115: LD_INT 3
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 3
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27150: LD_ADDR_VAR 0 14
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27191: LD_ADDR_VAR 0 15
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 3
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 3
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27235: LD_ADDR_VAR 0 16
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: LD_INT 3
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: LD_INT 2
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: LD_INT 3
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27281: LD_ADDR_VAR 0 17
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 3
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 3
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 2
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27325: LD_ADDR_VAR 0 18
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 3
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27366: LD_ADDR_VAR 0 19
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 3
27383: PUSH
27384: LD_INT 3
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27406: LD_ADDR_VAR 0 20
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 3
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27447: LD_ADDR_VAR 0 21
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: NEG
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: NEG
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27491: LD_ADDR_VAR 0 22
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: LD_INT 3
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 3
27510: NEG
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: NEG
27523: PUSH
27524: LD_INT 3
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27537: LD_ADDR_VAR 0 23
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 3
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 4
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 3
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27581: LD_ADDR_VAR 0 24
27585: PUSH
27586: LD_INT 3
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 4
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27622: LD_ADDR_VAR 0 25
27626: PUSH
27627: LD_INT 3
27629: PUSH
27630: LD_INT 3
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 4
27639: PUSH
27640: LD_INT 3
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 3
27649: PUSH
27650: LD_INT 4
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27662: LD_ADDR_VAR 0 26
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 3
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 4
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27703: LD_ADDR_VAR 0 27
27707: PUSH
27708: LD_INT 3
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 3
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 4
27732: NEG
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27747: LD_ADDR_VAR 0 28
27751: PUSH
27752: LD_INT 3
27754: NEG
27755: PUSH
27756: LD_INT 3
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: NEG
27767: PUSH
27768: LD_INT 4
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 4
27778: NEG
27779: PUSH
27780: LD_INT 3
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27793: LD_ADDR_VAR 0 29
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 3
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: LD_INT 3
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: LD_INT 2
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 4
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 4
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 3
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 5
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 5
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 4
27894: NEG
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: LD_INT 6
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: LD_INT 6
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 5
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27948: LD_ADDR_VAR 0 30
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 3
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 4
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 4
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 4
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 5
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 5
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 5
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 6
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 6
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28091: LD_ADDR_VAR 0 31
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: LD_INT 3
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 4
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 4
28138: PUSH
28139: LD_INT 4
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: LD_INT 4
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 5
28158: PUSH
28159: LD_INT 4
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 5
28168: PUSH
28169: LD_INT 5
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 4
28178: PUSH
28179: LD_INT 5
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 6
28188: PUSH
28189: LD_INT 5
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 6
28198: PUSH
28199: LD_INT 6
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 5
28208: PUSH
28209: LD_INT 6
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28230: LD_ADDR_VAR 0 32
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 4
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 4
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 3
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 5
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 5
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 4
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 6
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 6
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 5
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28373: LD_ADDR_VAR 0 33
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 3
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 3
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 3
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 4
28425: NEG
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 4
28436: NEG
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 4
28448: NEG
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 5
28459: NEG
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 5
28470: NEG
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 5
28482: NEG
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 6
28493: NEG
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 6
28504: NEG
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28528: LD_ADDR_VAR 0 34
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 3
28547: NEG
28548: PUSH
28549: LD_INT 2
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: LD_INT 3
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: NEG
28572: PUSH
28573: LD_INT 4
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 4
28583: NEG
28584: PUSH
28585: LD_INT 3
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 4
28595: NEG
28596: PUSH
28597: LD_INT 4
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 4
28607: NEG
28608: PUSH
28609: LD_INT 5
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 5
28619: NEG
28620: PUSH
28621: LD_INT 4
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 5
28631: NEG
28632: PUSH
28633: LD_INT 5
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 5
28643: NEG
28644: PUSH
28645: LD_INT 6
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 6
28655: NEG
28656: PUSH
28657: LD_INT 5
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 6
28667: NEG
28668: PUSH
28669: LD_INT 6
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28691: LD_ADDR_VAR 0 41
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 3
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28735: LD_ADDR_VAR 0 42
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28776: LD_ADDR_VAR 0 43
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 2
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28816: LD_ADDR_VAR 0 44
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28857: LD_ADDR_VAR 0 45
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 3
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28901: LD_ADDR_VAR 0 46
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: LD_INT 3
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 3
28932: NEG
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28947: LD_ADDR_VAR 0 47
28951: PUSH
28952: LD_INT 2
28954: NEG
28955: PUSH
28956: LD_INT 3
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 3
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28980: LD_ADDR_VAR 0 48
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29011: LD_ADDR_VAR 0 49
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29040: LD_ADDR_VAR 0 50
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29069: LD_ADDR_VAR 0 51
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29100: LD_ADDR_VAR 0 52
29104: PUSH
29105: LD_INT 3
29107: NEG
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 3
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29133: LD_ADDR_VAR 0 53
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29177: LD_ADDR_VAR 0 54
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29218: LD_ADDR_VAR 0 55
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29258: LD_ADDR_VAR 0 56
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29299: LD_ADDR_VAR 0 57
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29343: LD_ADDR_VAR 0 58
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29389: LD_ADDR_VAR 0 59
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29433: LD_ADDR_VAR 0 60
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29474: LD_ADDR_VAR 0 61
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29514: LD_ADDR_VAR 0 62
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 63
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29599: LD_ADDR_VAR 0 64
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: LD_INT 2
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// end ; 2 :
29645: GO 32911
29647: LD_INT 2
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 32910
29655: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29656: LD_ADDR_VAR 0 29
29660: PUSH
29661: LD_INT 4
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 4
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 5
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 5
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 4
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 5
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 4
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 4
29786: PUSH
29787: LD_INT 4
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 4
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: LD_INT 4
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: LD_INT 4
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 5
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 5
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 4
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 5
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: NEG
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 4
29995: NEG
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 4
30006: NEG
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 4
30018: NEG
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: NEG
30042: PUSH
30043: LD_INT 4
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 4
30053: NEG
30054: PUSH
30055: LD_INT 5
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: LD_INT 4
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: NEG
30078: PUSH
30079: LD_INT 3
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 4
30089: NEG
30090: PUSH
30091: LD_INT 3
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 5
30101: NEG
30102: PUSH
30103: LD_INT 4
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 5
30113: NEG
30114: PUSH
30115: LD_INT 5
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: NEG
30126: PUSH
30127: LD_INT 5
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 5
30137: NEG
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30194: LD_ADDR_VAR 0 30
30198: PUSH
30199: LD_INT 4
30201: PUSH
30202: LD_INT 4
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 5
30221: PUSH
30222: LD_INT 4
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: LD_INT 5
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 3
30251: PUSH
30252: LD_INT 4
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 5
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: LD_INT 5
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 4
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 4
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 4
30384: NEG
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 4
30395: NEG
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: NEG
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 5
30440: NEG
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 5
30451: NEG
30452: PUSH
30453: LD_INT 1
30455: NEG
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 5
30463: NEG
30464: PUSH
30465: LD_INT 2
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 3
30486: NEG
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: LD_INT 4
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 4
30546: NEG
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 4
30558: NEG
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: NEG
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 5
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 4
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 3
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 4
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 5
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30741: LD_ADDR_VAR 0 31
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 4
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 4
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 2
30830: NEG
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 4
30897: NEG
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 4
30920: NEG
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 4
30943: NEG
30944: PUSH
30945: LD_INT 4
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 4
30955: NEG
30956: PUSH
30957: LD_INT 5
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: LD_INT 4
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 3
30979: NEG
30980: PUSH
30981: LD_INT 3
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 4
30991: NEG
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 5
31003: NEG
31004: PUSH
31005: LD_INT 4
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 5
31015: NEG
31016: PUSH
31017: LD_INT 5
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: LD_INT 5
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 5
31039: NEG
31040: PUSH
31041: LD_INT 3
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: LD_INT 3
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 4
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: LD_INT 4
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 4
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 4
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 5
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 4
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 5
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31291: LD_ADDR_VAR 0 32
31295: PUSH
31296: LD_INT 4
31298: NEG
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 4
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 3
31332: NEG
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 4
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 5
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 5
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 5
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 3
31400: NEG
31401: PUSH
31402: LD_INT 3
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: LD_INT 4
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: LD_INT 3
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 3
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 4
31460: NEG
31461: PUSH
31462: LD_INT 3
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 4
31472: NEG
31473: PUSH
31474: LD_INT 4
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 4
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 4
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 5
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 4
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 4
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 5
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: LD_INT 5
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 4
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 4
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 4
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 4
31703: PUSH
31704: LD_INT 4
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 5
31723: PUSH
31724: LD_INT 4
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 5
31733: PUSH
31734: LD_INT 5
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 4
31743: PUSH
31744: LD_INT 5
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 4
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 5
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 5
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31838: LD_ADDR_VAR 0 33
31842: PUSH
31843: LD_INT 4
31845: NEG
31846: PUSH
31847: LD_INT 4
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 4
31857: NEG
31858: PUSH
31859: LD_INT 5
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 4
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 3
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: NEG
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 5
31905: NEG
31906: PUSH
31907: LD_INT 4
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 5
31917: NEG
31918: PUSH
31919: LD_INT 5
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: LD_INT 5
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 5
31941: NEG
31942: PUSH
31943: LD_INT 3
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 3
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 3
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 4
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: LD_INT 4
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 4
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 5
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: LD_INT 4
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 4
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 5
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 3
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 5
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32376: LD_ADDR_VAR 0 34
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 4
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 5
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 4
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 3
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 4
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 5
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 3
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 5
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 4
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 4
32578: PUSH
32579: LD_INT 4
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 4
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 5
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 5
32608: PUSH
32609: LD_INT 5
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: LD_INT 4
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 4
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 4
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: LD_INT 3
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 4
32772: NEG
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 3
32784: NEG
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 3
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 4
32806: NEG
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 5
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 5
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 5
32840: NEG
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// end ; end ;
32908: GO 32911
32910: POP
// case btype of b_depot , b_warehouse :
32911: LD_VAR 0 1
32915: PUSH
32916: LD_INT 0
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32930
32922: LD_INT 1
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 33131
32930: POP
// case nation of nation_american :
32931: LD_VAR 0 5
32935: PUSH
32936: LD_INT 1
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 33000
32944: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32945: LD_ADDR_VAR 0 9
32949: PUSH
32950: LD_VAR 0 11
32954: PUSH
32955: LD_VAR 0 12
32959: PUSH
32960: LD_VAR 0 13
32964: PUSH
32965: LD_VAR 0 14
32969: PUSH
32970: LD_VAR 0 15
32974: PUSH
32975: LD_VAR 0 16
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: LD_VAR 0 4
32992: PUSH
32993: LD_INT 1
32995: PLUS
32996: ARRAY
32997: ST_TO_ADDR
32998: GO 33129
33000: LD_INT 2
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33064
33008: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33009: LD_ADDR_VAR 0 9
33013: PUSH
33014: LD_VAR 0 17
33018: PUSH
33019: LD_VAR 0 18
33023: PUSH
33024: LD_VAR 0 19
33028: PUSH
33029: LD_VAR 0 20
33033: PUSH
33034: LD_VAR 0 21
33038: PUSH
33039: LD_VAR 0 22
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: PUSH
33052: LD_VAR 0 4
33056: PUSH
33057: LD_INT 1
33059: PLUS
33060: ARRAY
33061: ST_TO_ADDR
33062: GO 33129
33064: LD_INT 3
33066: DOUBLE
33067: EQUAL
33068: IFTRUE 33072
33070: GO 33128
33072: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33073: LD_ADDR_VAR 0 9
33077: PUSH
33078: LD_VAR 0 23
33082: PUSH
33083: LD_VAR 0 24
33087: PUSH
33088: LD_VAR 0 25
33092: PUSH
33093: LD_VAR 0 26
33097: PUSH
33098: LD_VAR 0 27
33102: PUSH
33103: LD_VAR 0 28
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: LD_VAR 0 4
33120: PUSH
33121: LD_INT 1
33123: PLUS
33124: ARRAY
33125: ST_TO_ADDR
33126: GO 33129
33128: POP
33129: GO 33684
33131: LD_INT 2
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33145
33137: LD_INT 3
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33201
33145: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33146: LD_ADDR_VAR 0 9
33150: PUSH
33151: LD_VAR 0 29
33155: PUSH
33156: LD_VAR 0 30
33160: PUSH
33161: LD_VAR 0 31
33165: PUSH
33166: LD_VAR 0 32
33170: PUSH
33171: LD_VAR 0 33
33175: PUSH
33176: LD_VAR 0 34
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: PUSH
33189: LD_VAR 0 4
33193: PUSH
33194: LD_INT 1
33196: PLUS
33197: ARRAY
33198: ST_TO_ADDR
33199: GO 33684
33201: LD_INT 16
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33263
33207: LD_INT 17
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33263
33213: LD_INT 18
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33263
33219: LD_INT 19
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33263
33225: LD_INT 22
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33263
33231: LD_INT 20
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33263
33237: LD_INT 21
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33263
33243: LD_INT 23
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33263
33249: LD_INT 24
33251: DOUBLE
33252: EQUAL
33253: IFTRUE 33263
33255: LD_INT 25
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33319
33263: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33264: LD_ADDR_VAR 0 9
33268: PUSH
33269: LD_VAR 0 35
33273: PUSH
33274: LD_VAR 0 36
33278: PUSH
33279: LD_VAR 0 37
33283: PUSH
33284: LD_VAR 0 38
33288: PUSH
33289: LD_VAR 0 39
33293: PUSH
33294: LD_VAR 0 40
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: PUSH
33307: LD_VAR 0 4
33311: PUSH
33312: LD_INT 1
33314: PLUS
33315: ARRAY
33316: ST_TO_ADDR
33317: GO 33684
33319: LD_INT 6
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33375
33325: LD_INT 7
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33375
33331: LD_INT 8
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33375
33337: LD_INT 13
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33375
33343: LD_INT 12
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33375
33349: LD_INT 15
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33375
33355: LD_INT 11
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33375
33361: LD_INT 14
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33375
33367: LD_INT 10
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33431
33375: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33376: LD_ADDR_VAR 0 9
33380: PUSH
33381: LD_VAR 0 41
33385: PUSH
33386: LD_VAR 0 42
33390: PUSH
33391: LD_VAR 0 43
33395: PUSH
33396: LD_VAR 0 44
33400: PUSH
33401: LD_VAR 0 45
33405: PUSH
33406: LD_VAR 0 46
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: PUSH
33419: LD_VAR 0 4
33423: PUSH
33424: LD_INT 1
33426: PLUS
33427: ARRAY
33428: ST_TO_ADDR
33429: GO 33684
33431: LD_INT 36
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33439
33437: GO 33495
33439: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33440: LD_ADDR_VAR 0 9
33444: PUSH
33445: LD_VAR 0 47
33449: PUSH
33450: LD_VAR 0 48
33454: PUSH
33455: LD_VAR 0 49
33459: PUSH
33460: LD_VAR 0 50
33464: PUSH
33465: LD_VAR 0 51
33469: PUSH
33470: LD_VAR 0 52
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: PUSH
33483: LD_VAR 0 4
33487: PUSH
33488: LD_INT 1
33490: PLUS
33491: ARRAY
33492: ST_TO_ADDR
33493: GO 33684
33495: LD_INT 4
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33521
33501: LD_INT 5
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33521
33507: LD_INT 34
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33521
33513: LD_INT 37
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33577
33521: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_VAR 0 53
33531: PUSH
33532: LD_VAR 0 54
33536: PUSH
33537: LD_VAR 0 55
33541: PUSH
33542: LD_VAR 0 56
33546: PUSH
33547: LD_VAR 0 57
33551: PUSH
33552: LD_VAR 0 58
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: PUSH
33565: LD_VAR 0 4
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: ARRAY
33574: ST_TO_ADDR
33575: GO 33684
33577: LD_INT 31
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33627
33583: LD_INT 32
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33627
33589: LD_INT 33
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33627
33595: LD_INT 27
33597: DOUBLE
33598: EQUAL
33599: IFTRUE 33627
33601: LD_INT 26
33603: DOUBLE
33604: EQUAL
33605: IFTRUE 33627
33607: LD_INT 28
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33627
33613: LD_INT 29
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33627
33619: LD_INT 30
33621: DOUBLE
33622: EQUAL
33623: IFTRUE 33627
33625: GO 33683
33627: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_VAR 0 59
33637: PUSH
33638: LD_VAR 0 60
33642: PUSH
33643: LD_VAR 0 61
33647: PUSH
33648: LD_VAR 0 62
33652: PUSH
33653: LD_VAR 0 63
33657: PUSH
33658: LD_VAR 0 64
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: PUSH
33671: LD_VAR 0 4
33675: PUSH
33676: LD_INT 1
33678: PLUS
33679: ARRAY
33680: ST_TO_ADDR
33681: GO 33684
33683: POP
// temp_list2 = [ ] ;
33684: LD_ADDR_VAR 0 10
33688: PUSH
33689: EMPTY
33690: ST_TO_ADDR
// for i in temp_list do
33691: LD_ADDR_VAR 0 8
33695: PUSH
33696: LD_VAR 0 9
33700: PUSH
33701: FOR_IN
33702: IFFALSE 33754
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33704: LD_ADDR_VAR 0 10
33708: PUSH
33709: LD_VAR 0 10
33713: PUSH
33714: LD_VAR 0 8
33718: PUSH
33719: LD_INT 1
33721: ARRAY
33722: PUSH
33723: LD_VAR 0 2
33727: PLUS
33728: PUSH
33729: LD_VAR 0 8
33733: PUSH
33734: LD_INT 2
33736: ARRAY
33737: PUSH
33738: LD_VAR 0 3
33742: PLUS
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: ADD
33751: ST_TO_ADDR
33752: GO 33701
33754: POP
33755: POP
// result = temp_list2 ;
33756: LD_ADDR_VAR 0 7
33760: PUSH
33761: LD_VAR 0 10
33765: ST_TO_ADDR
// end ;
33766: LD_VAR 0 7
33770: RET
// export function EnemyInRange ( unit , dist ) ; begin
33771: LD_INT 0
33773: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33774: LD_ADDR_VAR 0 3
33778: PUSH
33779: LD_VAR 0 1
33783: PPUSH
33784: CALL_OW 255
33788: PPUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 250
33798: PPUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 251
33808: PPUSH
33809: LD_VAR 0 2
33813: PPUSH
33814: CALL 7173 0 4
33818: PUSH
33819: LD_INT 4
33821: ARRAY
33822: ST_TO_ADDR
// end ;
33823: LD_VAR 0 3
33827: RET
// export function PlayerSeeMe ( unit ) ; begin
33828: LD_INT 0
33830: PPUSH
// result := See ( your_side , unit ) ;
33831: LD_ADDR_VAR 0 2
33835: PUSH
33836: LD_OWVAR 2
33840: PPUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 292
33850: ST_TO_ADDR
// end ;
33851: LD_VAR 0 2
33855: RET
// export function ReverseDir ( unit ) ; begin
33856: LD_INT 0
33858: PPUSH
// if not unit then
33859: LD_VAR 0 1
33863: NOT
33864: IFFALSE 33868
// exit ;
33866: GO 33891
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33868: LD_ADDR_VAR 0 2
33872: PUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL_OW 254
33882: PUSH
33883: LD_INT 3
33885: PLUS
33886: PUSH
33887: LD_INT 6
33889: MOD
33890: ST_TO_ADDR
// end ;
33891: LD_VAR 0 2
33895: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33896: LD_INT 0
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
// if not unit or not hexes then
33904: LD_VAR 0 1
33908: NOT
33909: PUSH
33910: LD_VAR 0 2
33914: NOT
33915: OR
33916: IFFALSE 33920
// exit ;
33918: GO 34043
// dist := 9999 ;
33920: LD_ADDR_VAR 0 5
33924: PUSH
33925: LD_INT 9999
33927: ST_TO_ADDR
// for i = 1 to hexes do
33928: LD_ADDR_VAR 0 4
33932: PUSH
33933: DOUBLE
33934: LD_INT 1
33936: DEC
33937: ST_TO_ADDR
33938: LD_VAR 0 2
33942: PUSH
33943: FOR_TO
33944: IFFALSE 34031
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33946: LD_ADDR_VAR 0 6
33950: PUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: LD_VAR 0 2
33960: PUSH
33961: LD_VAR 0 4
33965: ARRAY
33966: PUSH
33967: LD_INT 1
33969: ARRAY
33970: PPUSH
33971: LD_VAR 0 2
33975: PUSH
33976: LD_VAR 0 4
33980: ARRAY
33981: PUSH
33982: LD_INT 2
33984: ARRAY
33985: PPUSH
33986: CALL_OW 297
33990: ST_TO_ADDR
// if tdist < dist then
33991: LD_VAR 0 6
33995: PUSH
33996: LD_VAR 0 5
34000: LESS
34001: IFFALSE 34029
// begin hex := hexes [ i ] ;
34003: LD_ADDR_VAR 0 8
34007: PUSH
34008: LD_VAR 0 2
34012: PUSH
34013: LD_VAR 0 4
34017: ARRAY
34018: ST_TO_ADDR
// dist := tdist ;
34019: LD_ADDR_VAR 0 5
34023: PUSH
34024: LD_VAR 0 6
34028: ST_TO_ADDR
// end ; end ;
34029: GO 33943
34031: POP
34032: POP
// result := hex ;
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: LD_VAR 0 8
34042: ST_TO_ADDR
// end ;
34043: LD_VAR 0 3
34047: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34048: LD_INT 0
34050: PPUSH
34051: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34052: LD_VAR 0 1
34056: NOT
34057: PUSH
34058: LD_VAR 0 1
34062: PUSH
34063: LD_INT 21
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 23
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PPUSH
34087: CALL_OW 69
34091: IN
34092: NOT
34093: OR
34094: IFFALSE 34098
// exit ;
34096: GO 34145
// for i = 1 to 3 do
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: DOUBLE
34104: LD_INT 1
34106: DEC
34107: ST_TO_ADDR
34108: LD_INT 3
34110: PUSH
34111: FOR_TO
34112: IFFALSE 34143
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34114: LD_VAR 0 1
34118: PPUSH
34119: CALL_OW 250
34123: PPUSH
34124: LD_VAR 0 1
34128: PPUSH
34129: CALL_OW 251
34133: PPUSH
34134: LD_INT 1
34136: PPUSH
34137: CALL_OW 453
34141: GO 34111
34143: POP
34144: POP
// end ;
34145: LD_VAR 0 2
34149: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34158: LD_VAR 0 1
34162: NOT
34163: PUSH
34164: LD_VAR 0 2
34168: NOT
34169: OR
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: CALL_OW 314
34180: OR
34181: IFFALSE 34185
// exit ;
34183: GO 34626
// x := GetX ( enemy_unit ) ;
34185: LD_ADDR_VAR 0 7
34189: PUSH
34190: LD_VAR 0 2
34194: PPUSH
34195: CALL_OW 250
34199: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34200: LD_ADDR_VAR 0 8
34204: PUSH
34205: LD_VAR 0 2
34209: PPUSH
34210: CALL_OW 251
34214: ST_TO_ADDR
// if not x or not y then
34215: LD_VAR 0 7
34219: NOT
34220: PUSH
34221: LD_VAR 0 8
34225: NOT
34226: OR
34227: IFFALSE 34231
// exit ;
34229: GO 34626
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34231: LD_ADDR_VAR 0 6
34235: PUSH
34236: LD_VAR 0 7
34240: PPUSH
34241: LD_INT 0
34243: PPUSH
34244: LD_INT 4
34246: PPUSH
34247: CALL_OW 272
34251: PUSH
34252: LD_VAR 0 8
34256: PPUSH
34257: LD_INT 0
34259: PPUSH
34260: LD_INT 4
34262: PPUSH
34263: CALL_OW 273
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_VAR 0 7
34276: PPUSH
34277: LD_INT 1
34279: PPUSH
34280: LD_INT 4
34282: PPUSH
34283: CALL_OW 272
34287: PUSH
34288: LD_VAR 0 8
34292: PPUSH
34293: LD_INT 1
34295: PPUSH
34296: LD_INT 4
34298: PPUSH
34299: CALL_OW 273
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_VAR 0 7
34312: PPUSH
34313: LD_INT 2
34315: PPUSH
34316: LD_INT 4
34318: PPUSH
34319: CALL_OW 272
34323: PUSH
34324: LD_VAR 0 8
34328: PPUSH
34329: LD_INT 2
34331: PPUSH
34332: LD_INT 4
34334: PPUSH
34335: CALL_OW 273
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_VAR 0 7
34348: PPUSH
34349: LD_INT 3
34351: PPUSH
34352: LD_INT 4
34354: PPUSH
34355: CALL_OW 272
34359: PUSH
34360: LD_VAR 0 8
34364: PPUSH
34365: LD_INT 3
34367: PPUSH
34368: LD_INT 4
34370: PPUSH
34371: CALL_OW 273
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_VAR 0 7
34384: PPUSH
34385: LD_INT 4
34387: PPUSH
34388: LD_INT 4
34390: PPUSH
34391: CALL_OW 272
34395: PUSH
34396: LD_VAR 0 8
34400: PPUSH
34401: LD_INT 4
34403: PPUSH
34404: LD_INT 4
34406: PPUSH
34407: CALL_OW 273
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_VAR 0 7
34420: PPUSH
34421: LD_INT 5
34423: PPUSH
34424: LD_INT 4
34426: PPUSH
34427: CALL_OW 272
34431: PUSH
34432: LD_VAR 0 8
34436: PPUSH
34437: LD_INT 5
34439: PPUSH
34440: LD_INT 4
34442: PPUSH
34443: CALL_OW 273
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
// for i = tmp downto 1 do
34460: LD_ADDR_VAR 0 4
34464: PUSH
34465: DOUBLE
34466: LD_VAR 0 6
34470: INC
34471: ST_TO_ADDR
34472: LD_INT 1
34474: PUSH
34475: FOR_DOWNTO
34476: IFFALSE 34577
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34478: LD_VAR 0 6
34482: PUSH
34483: LD_VAR 0 4
34487: ARRAY
34488: PUSH
34489: LD_INT 1
34491: ARRAY
34492: PPUSH
34493: LD_VAR 0 6
34497: PUSH
34498: LD_VAR 0 4
34502: ARRAY
34503: PUSH
34504: LD_INT 2
34506: ARRAY
34507: PPUSH
34508: CALL_OW 488
34512: NOT
34513: PUSH
34514: LD_VAR 0 6
34518: PUSH
34519: LD_VAR 0 4
34523: ARRAY
34524: PUSH
34525: LD_INT 1
34527: ARRAY
34528: PPUSH
34529: LD_VAR 0 6
34533: PUSH
34534: LD_VAR 0 4
34538: ARRAY
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: PPUSH
34544: CALL_OW 428
34548: PUSH
34549: LD_INT 0
34551: NONEQUAL
34552: OR
34553: IFFALSE 34575
// tmp := Delete ( tmp , i ) ;
34555: LD_ADDR_VAR 0 6
34559: PUSH
34560: LD_VAR 0 6
34564: PPUSH
34565: LD_VAR 0 4
34569: PPUSH
34570: CALL_OW 3
34574: ST_TO_ADDR
34575: GO 34475
34577: POP
34578: POP
// j := GetClosestHex ( unit , tmp ) ;
34579: LD_ADDR_VAR 0 5
34583: PUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: LD_VAR 0 6
34593: PPUSH
34594: CALL 33896 0 2
34598: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34599: LD_VAR 0 1
34603: PPUSH
34604: LD_VAR 0 5
34608: PUSH
34609: LD_INT 1
34611: ARRAY
34612: PPUSH
34613: LD_VAR 0 5
34617: PUSH
34618: LD_INT 2
34620: ARRAY
34621: PPUSH
34622: CALL_OW 111
// end ;
34626: LD_VAR 0 3
34630: RET
// export function PrepareApemanSoldier ( ) ; begin
34631: LD_INT 0
34633: PPUSH
// uc_nation := 0 ;
34634: LD_ADDR_OWVAR 21
34638: PUSH
34639: LD_INT 0
34641: ST_TO_ADDR
// hc_sex := sex_male ;
34642: LD_ADDR_OWVAR 27
34646: PUSH
34647: LD_INT 1
34649: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34650: LD_ADDR_OWVAR 28
34654: PUSH
34655: LD_INT 15
34657: ST_TO_ADDR
// hc_gallery :=  ;
34658: LD_ADDR_OWVAR 33
34662: PUSH
34663: LD_STRING 
34665: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34666: LD_ADDR_OWVAR 31
34670: PUSH
34671: LD_INT 0
34673: PPUSH
34674: LD_INT 3
34676: PPUSH
34677: CALL_OW 12
34681: PUSH
34682: LD_INT 0
34684: PPUSH
34685: LD_INT 3
34687: PPUSH
34688: CALL_OW 12
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// end ;
34705: LD_VAR 0 1
34709: RET
// export function PrepareApemanEngineer ( ) ; begin
34710: LD_INT 0
34712: PPUSH
// uc_nation := 0 ;
34713: LD_ADDR_OWVAR 21
34717: PUSH
34718: LD_INT 0
34720: ST_TO_ADDR
// hc_sex := sex_male ;
34721: LD_ADDR_OWVAR 27
34725: PUSH
34726: LD_INT 1
34728: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34729: LD_ADDR_OWVAR 28
34733: PUSH
34734: LD_INT 16
34736: ST_TO_ADDR
// hc_gallery :=  ;
34737: LD_ADDR_OWVAR 33
34741: PUSH
34742: LD_STRING 
34744: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34745: LD_ADDR_OWVAR 31
34749: PUSH
34750: LD_INT 0
34752: PPUSH
34753: LD_INT 3
34755: PPUSH
34756: CALL_OW 12
34760: PUSH
34761: LD_INT 0
34763: PPUSH
34764: LD_INT 3
34766: PPUSH
34767: CALL_OW 12
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: ST_TO_ADDR
// end ;
34784: LD_VAR 0 1
34788: RET
// export function PrepareApeman ( agressivity ) ; begin
34789: LD_INT 0
34791: PPUSH
// uc_side := 0 ;
34792: LD_ADDR_OWVAR 20
34796: PUSH
34797: LD_INT 0
34799: ST_TO_ADDR
// uc_nation := 0 ;
34800: LD_ADDR_OWVAR 21
34804: PUSH
34805: LD_INT 0
34807: ST_TO_ADDR
// hc_sex := sex_male ;
34808: LD_ADDR_OWVAR 27
34812: PUSH
34813: LD_INT 1
34815: ST_TO_ADDR
// hc_class := class_apeman ;
34816: LD_ADDR_OWVAR 28
34820: PUSH
34821: LD_INT 12
34823: ST_TO_ADDR
// hc_gallery :=  ;
34824: LD_ADDR_OWVAR 33
34828: PUSH
34829: LD_STRING 
34831: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34832: LD_ADDR_OWVAR 35
34836: PUSH
34837: LD_VAR 0 1
34841: NEG
34842: PPUSH
34843: LD_VAR 0 1
34847: PPUSH
34848: CALL_OW 12
34852: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34853: LD_ADDR_OWVAR 31
34857: PUSH
34858: LD_INT 0
34860: PPUSH
34861: LD_INT 3
34863: PPUSH
34864: CALL_OW 12
34868: PUSH
34869: LD_INT 0
34871: PPUSH
34872: LD_INT 3
34874: PPUSH
34875: CALL_OW 12
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: ST_TO_ADDR
// end ;
34892: LD_VAR 0 2
34896: RET
// export function PrepareTiger ( agressivity ) ; begin
34897: LD_INT 0
34899: PPUSH
// uc_side := 0 ;
34900: LD_ADDR_OWVAR 20
34904: PUSH
34905: LD_INT 0
34907: ST_TO_ADDR
// uc_nation := 0 ;
34908: LD_ADDR_OWVAR 21
34912: PUSH
34913: LD_INT 0
34915: ST_TO_ADDR
// hc_class := class_tiger ;
34916: LD_ADDR_OWVAR 28
34920: PUSH
34921: LD_INT 14
34923: ST_TO_ADDR
// hc_gallery :=  ;
34924: LD_ADDR_OWVAR 33
34928: PUSH
34929: LD_STRING 
34931: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34932: LD_ADDR_OWVAR 35
34936: PUSH
34937: LD_VAR 0 1
34941: NEG
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 12
34952: ST_TO_ADDR
// end ;
34953: LD_VAR 0 2
34957: RET
// export function PrepareEnchidna ( ) ; begin
34958: LD_INT 0
34960: PPUSH
// uc_side := 0 ;
34961: LD_ADDR_OWVAR 20
34965: PUSH
34966: LD_INT 0
34968: ST_TO_ADDR
// uc_nation := 0 ;
34969: LD_ADDR_OWVAR 21
34973: PUSH
34974: LD_INT 0
34976: ST_TO_ADDR
// hc_class := class_baggie ;
34977: LD_ADDR_OWVAR 28
34981: PUSH
34982: LD_INT 13
34984: ST_TO_ADDR
// hc_gallery :=  ;
34985: LD_ADDR_OWVAR 33
34989: PUSH
34990: LD_STRING 
34992: ST_TO_ADDR
// end ;
34993: LD_VAR 0 1
34997: RET
// export function PrepareFrog ( ) ; begin
34998: LD_INT 0
35000: PPUSH
// uc_side := 0 ;
35001: LD_ADDR_OWVAR 20
35005: PUSH
35006: LD_INT 0
35008: ST_TO_ADDR
// uc_nation := 0 ;
35009: LD_ADDR_OWVAR 21
35013: PUSH
35014: LD_INT 0
35016: ST_TO_ADDR
// hc_class := class_frog ;
35017: LD_ADDR_OWVAR 28
35021: PUSH
35022: LD_INT 19
35024: ST_TO_ADDR
// hc_gallery :=  ;
35025: LD_ADDR_OWVAR 33
35029: PUSH
35030: LD_STRING 
35032: ST_TO_ADDR
// end ;
35033: LD_VAR 0 1
35037: RET
// export function PrepareFish ( ) ; begin
35038: LD_INT 0
35040: PPUSH
// uc_side := 0 ;
35041: LD_ADDR_OWVAR 20
35045: PUSH
35046: LD_INT 0
35048: ST_TO_ADDR
// uc_nation := 0 ;
35049: LD_ADDR_OWVAR 21
35053: PUSH
35054: LD_INT 0
35056: ST_TO_ADDR
// hc_class := class_fish ;
35057: LD_ADDR_OWVAR 28
35061: PUSH
35062: LD_INT 20
35064: ST_TO_ADDR
// hc_gallery :=  ;
35065: LD_ADDR_OWVAR 33
35069: PUSH
35070: LD_STRING 
35072: ST_TO_ADDR
// end ;
35073: LD_VAR 0 1
35077: RET
// export function PrepareBird ( ) ; begin
35078: LD_INT 0
35080: PPUSH
// uc_side := 0 ;
35081: LD_ADDR_OWVAR 20
35085: PUSH
35086: LD_INT 0
35088: ST_TO_ADDR
// uc_nation := 0 ;
35089: LD_ADDR_OWVAR 21
35093: PUSH
35094: LD_INT 0
35096: ST_TO_ADDR
// hc_class := class_phororhacos ;
35097: LD_ADDR_OWVAR 28
35101: PUSH
35102: LD_INT 18
35104: ST_TO_ADDR
// hc_gallery :=  ;
35105: LD_ADDR_OWVAR 33
35109: PUSH
35110: LD_STRING 
35112: ST_TO_ADDR
// end ;
35113: LD_VAR 0 1
35117: RET
// export function PrepareHorse ( ) ; begin
35118: LD_INT 0
35120: PPUSH
// uc_side := 0 ;
35121: LD_ADDR_OWVAR 20
35125: PUSH
35126: LD_INT 0
35128: ST_TO_ADDR
// uc_nation := 0 ;
35129: LD_ADDR_OWVAR 21
35133: PUSH
35134: LD_INT 0
35136: ST_TO_ADDR
// hc_class := class_horse ;
35137: LD_ADDR_OWVAR 28
35141: PUSH
35142: LD_INT 21
35144: ST_TO_ADDR
// hc_gallery :=  ;
35145: LD_ADDR_OWVAR 33
35149: PUSH
35150: LD_STRING 
35152: ST_TO_ADDR
// end ;
35153: LD_VAR 0 1
35157: RET
// export function PrepareMastodont ( ) ; begin
35158: LD_INT 0
35160: PPUSH
// uc_side := 0 ;
35161: LD_ADDR_OWVAR 20
35165: PUSH
35166: LD_INT 0
35168: ST_TO_ADDR
// uc_nation := 0 ;
35169: LD_ADDR_OWVAR 21
35173: PUSH
35174: LD_INT 0
35176: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35177: LD_ADDR_OWVAR 37
35181: PUSH
35182: LD_INT 31
35184: ST_TO_ADDR
// vc_control := control_rider ;
35185: LD_ADDR_OWVAR 38
35189: PUSH
35190: LD_INT 4
35192: ST_TO_ADDR
// end ;
35193: LD_VAR 0 1
35197: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35198: LD_INT 0
35200: PPUSH
35201: PPUSH
35202: PPUSH
// uc_side = 0 ;
35203: LD_ADDR_OWVAR 20
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
// uc_nation = 0 ;
35211: LD_ADDR_OWVAR 21
35215: PUSH
35216: LD_INT 0
35218: ST_TO_ADDR
// InitHc_All ( ) ;
35219: CALL_OW 584
// InitVc ;
35223: CALL_OW 20
// if mastodonts then
35227: LD_VAR 0 6
35231: IFFALSE 35298
// for i = 1 to mastodonts do
35233: LD_ADDR_VAR 0 11
35237: PUSH
35238: DOUBLE
35239: LD_INT 1
35241: DEC
35242: ST_TO_ADDR
35243: LD_VAR 0 6
35247: PUSH
35248: FOR_TO
35249: IFFALSE 35296
// begin vc_chassis := 31 ;
35251: LD_ADDR_OWVAR 37
35255: PUSH
35256: LD_INT 31
35258: ST_TO_ADDR
// vc_control := control_rider ;
35259: LD_ADDR_OWVAR 38
35263: PUSH
35264: LD_INT 4
35266: ST_TO_ADDR
// animal := CreateVehicle ;
35267: LD_ADDR_VAR 0 12
35271: PUSH
35272: CALL_OW 45
35276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35277: LD_VAR 0 12
35281: PPUSH
35282: LD_VAR 0 8
35286: PPUSH
35287: LD_INT 0
35289: PPUSH
35290: CALL 37433 0 3
// end ;
35294: GO 35248
35296: POP
35297: POP
// if horses then
35298: LD_VAR 0 5
35302: IFFALSE 35369
// for i = 1 to horses do
35304: LD_ADDR_VAR 0 11
35308: PUSH
35309: DOUBLE
35310: LD_INT 1
35312: DEC
35313: ST_TO_ADDR
35314: LD_VAR 0 5
35318: PUSH
35319: FOR_TO
35320: IFFALSE 35367
// begin hc_class := 21 ;
35322: LD_ADDR_OWVAR 28
35326: PUSH
35327: LD_INT 21
35329: ST_TO_ADDR
// hc_gallery :=  ;
35330: LD_ADDR_OWVAR 33
35334: PUSH
35335: LD_STRING 
35337: ST_TO_ADDR
// animal := CreateHuman ;
35338: LD_ADDR_VAR 0 12
35342: PUSH
35343: CALL_OW 44
35347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35348: LD_VAR 0 12
35352: PPUSH
35353: LD_VAR 0 8
35357: PPUSH
35358: LD_INT 0
35360: PPUSH
35361: CALL 37433 0 3
// end ;
35365: GO 35319
35367: POP
35368: POP
// if birds then
35369: LD_VAR 0 1
35373: IFFALSE 35440
// for i = 1 to birds do
35375: LD_ADDR_VAR 0 11
35379: PUSH
35380: DOUBLE
35381: LD_INT 1
35383: DEC
35384: ST_TO_ADDR
35385: LD_VAR 0 1
35389: PUSH
35390: FOR_TO
35391: IFFALSE 35438
// begin hc_class = 18 ;
35393: LD_ADDR_OWVAR 28
35397: PUSH
35398: LD_INT 18
35400: ST_TO_ADDR
// hc_gallery =  ;
35401: LD_ADDR_OWVAR 33
35405: PUSH
35406: LD_STRING 
35408: ST_TO_ADDR
// animal := CreateHuman ;
35409: LD_ADDR_VAR 0 12
35413: PUSH
35414: CALL_OW 44
35418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35419: LD_VAR 0 12
35423: PPUSH
35424: LD_VAR 0 8
35428: PPUSH
35429: LD_INT 0
35431: PPUSH
35432: CALL 37433 0 3
// end ;
35436: GO 35390
35438: POP
35439: POP
// if tigers then
35440: LD_VAR 0 2
35444: IFFALSE 35528
// for i = 1 to tigers do
35446: LD_ADDR_VAR 0 11
35450: PUSH
35451: DOUBLE
35452: LD_INT 1
35454: DEC
35455: ST_TO_ADDR
35456: LD_VAR 0 2
35460: PUSH
35461: FOR_TO
35462: IFFALSE 35526
// begin hc_class = class_tiger ;
35464: LD_ADDR_OWVAR 28
35468: PUSH
35469: LD_INT 14
35471: ST_TO_ADDR
// hc_gallery =  ;
35472: LD_ADDR_OWVAR 33
35476: PUSH
35477: LD_STRING 
35479: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35480: LD_ADDR_OWVAR 35
35484: PUSH
35485: LD_INT 7
35487: NEG
35488: PPUSH
35489: LD_INT 7
35491: PPUSH
35492: CALL_OW 12
35496: ST_TO_ADDR
// animal := CreateHuman ;
35497: LD_ADDR_VAR 0 12
35501: PUSH
35502: CALL_OW 44
35506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35507: LD_VAR 0 12
35511: PPUSH
35512: LD_VAR 0 8
35516: PPUSH
35517: LD_INT 0
35519: PPUSH
35520: CALL 37433 0 3
// end ;
35524: GO 35461
35526: POP
35527: POP
// if apemans then
35528: LD_VAR 0 3
35532: IFFALSE 35655
// for i = 1 to apemans do
35534: LD_ADDR_VAR 0 11
35538: PUSH
35539: DOUBLE
35540: LD_INT 1
35542: DEC
35543: ST_TO_ADDR
35544: LD_VAR 0 3
35548: PUSH
35549: FOR_TO
35550: IFFALSE 35653
// begin hc_class = class_apeman ;
35552: LD_ADDR_OWVAR 28
35556: PUSH
35557: LD_INT 12
35559: ST_TO_ADDR
// hc_gallery =  ;
35560: LD_ADDR_OWVAR 33
35564: PUSH
35565: LD_STRING 
35567: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35568: LD_ADDR_OWVAR 35
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PPUSH
35577: LD_INT 2
35579: PPUSH
35580: CALL_OW 12
35584: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35585: LD_ADDR_OWVAR 31
35589: PUSH
35590: LD_INT 1
35592: PPUSH
35593: LD_INT 3
35595: PPUSH
35596: CALL_OW 12
35600: PUSH
35601: LD_INT 1
35603: PPUSH
35604: LD_INT 3
35606: PPUSH
35607: CALL_OW 12
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: ST_TO_ADDR
// animal := CreateHuman ;
35624: LD_ADDR_VAR 0 12
35628: PUSH
35629: CALL_OW 44
35633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35634: LD_VAR 0 12
35638: PPUSH
35639: LD_VAR 0 8
35643: PPUSH
35644: LD_INT 0
35646: PPUSH
35647: CALL 37433 0 3
// end ;
35651: GO 35549
35653: POP
35654: POP
// if enchidnas then
35655: LD_VAR 0 4
35659: IFFALSE 35726
// for i = 1 to enchidnas do
35661: LD_ADDR_VAR 0 11
35665: PUSH
35666: DOUBLE
35667: LD_INT 1
35669: DEC
35670: ST_TO_ADDR
35671: LD_VAR 0 4
35675: PUSH
35676: FOR_TO
35677: IFFALSE 35724
// begin hc_class = 13 ;
35679: LD_ADDR_OWVAR 28
35683: PUSH
35684: LD_INT 13
35686: ST_TO_ADDR
// hc_gallery =  ;
35687: LD_ADDR_OWVAR 33
35691: PUSH
35692: LD_STRING 
35694: ST_TO_ADDR
// animal := CreateHuman ;
35695: LD_ADDR_VAR 0 12
35699: PUSH
35700: CALL_OW 44
35704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35705: LD_VAR 0 12
35709: PPUSH
35710: LD_VAR 0 8
35714: PPUSH
35715: LD_INT 0
35717: PPUSH
35718: CALL 37433 0 3
// end ;
35722: GO 35676
35724: POP
35725: POP
// if fishes then
35726: LD_VAR 0 7
35730: IFFALSE 35797
// for i = 1 to fishes do
35732: LD_ADDR_VAR 0 11
35736: PUSH
35737: DOUBLE
35738: LD_INT 1
35740: DEC
35741: ST_TO_ADDR
35742: LD_VAR 0 7
35746: PUSH
35747: FOR_TO
35748: IFFALSE 35795
// begin hc_class = 20 ;
35750: LD_ADDR_OWVAR 28
35754: PUSH
35755: LD_INT 20
35757: ST_TO_ADDR
// hc_gallery =  ;
35758: LD_ADDR_OWVAR 33
35762: PUSH
35763: LD_STRING 
35765: ST_TO_ADDR
// animal := CreateHuman ;
35766: LD_ADDR_VAR 0 12
35770: PUSH
35771: CALL_OW 44
35775: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35776: LD_VAR 0 12
35780: PPUSH
35781: LD_VAR 0 9
35785: PPUSH
35786: LD_INT 0
35788: PPUSH
35789: CALL 37433 0 3
// end ;
35793: GO 35747
35795: POP
35796: POP
// end ;
35797: LD_VAR 0 10
35801: RET
// export function WantHeal ( sci , unit ) ; begin
35802: LD_INT 0
35804: PPUSH
// if GetTaskList ( sci ) > 0 then
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 437
35814: PUSH
35815: LD_INT 0
35817: GREATER
35818: IFFALSE 35888
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35820: LD_VAR 0 1
35824: PPUSH
35825: CALL_OW 437
35829: PUSH
35830: LD_INT 1
35832: ARRAY
35833: PUSH
35834: LD_INT 1
35836: ARRAY
35837: PUSH
35838: LD_STRING l
35840: EQUAL
35841: PUSH
35842: LD_VAR 0 1
35846: PPUSH
35847: CALL_OW 437
35851: PUSH
35852: LD_INT 1
35854: ARRAY
35855: PUSH
35856: LD_INT 4
35858: ARRAY
35859: PUSH
35860: LD_VAR 0 2
35864: EQUAL
35865: AND
35866: IFFALSE 35878
// result := true else
35868: LD_ADDR_VAR 0 3
35872: PUSH
35873: LD_INT 1
35875: ST_TO_ADDR
35876: GO 35886
// result := false ;
35878: LD_ADDR_VAR 0 3
35882: PUSH
35883: LD_INT 0
35885: ST_TO_ADDR
// end else
35886: GO 35896
// result := false ;
35888: LD_ADDR_VAR 0 3
35892: PUSH
35893: LD_INT 0
35895: ST_TO_ADDR
// end ;
35896: LD_VAR 0 3
35900: RET
// export function HealTarget ( sci ) ; begin
35901: LD_INT 0
35903: PPUSH
// if not sci then
35904: LD_VAR 0 1
35908: NOT
35909: IFFALSE 35913
// exit ;
35911: GO 35978
// result := 0 ;
35913: LD_ADDR_VAR 0 2
35917: PUSH
35918: LD_INT 0
35920: ST_TO_ADDR
// if GetTaskList ( sci ) then
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL_OW 437
35930: IFFALSE 35978
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35932: LD_VAR 0 1
35936: PPUSH
35937: CALL_OW 437
35941: PUSH
35942: LD_INT 1
35944: ARRAY
35945: PUSH
35946: LD_INT 1
35948: ARRAY
35949: PUSH
35950: LD_STRING l
35952: EQUAL
35953: IFFALSE 35978
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35955: LD_ADDR_VAR 0 2
35959: PUSH
35960: LD_VAR 0 1
35964: PPUSH
35965: CALL_OW 437
35969: PUSH
35970: LD_INT 1
35972: ARRAY
35973: PUSH
35974: LD_INT 4
35976: ARRAY
35977: ST_TO_ADDR
// end ;
35978: LD_VAR 0 2
35982: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35983: LD_INT 0
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
// if not base_units then
35989: LD_VAR 0 1
35993: NOT
35994: IFFALSE 35998
// exit ;
35996: GO 36085
// result := false ;
35998: LD_ADDR_VAR 0 2
36002: PUSH
36003: LD_INT 0
36005: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36006: LD_ADDR_VAR 0 5
36010: PUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: LD_INT 21
36018: PUSH
36019: LD_INT 3
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: CALL_OW 72
36030: ST_TO_ADDR
// if not tmp then
36031: LD_VAR 0 5
36035: NOT
36036: IFFALSE 36040
// exit ;
36038: GO 36085
// for i in tmp do
36040: LD_ADDR_VAR 0 3
36044: PUSH
36045: LD_VAR 0 5
36049: PUSH
36050: FOR_IN
36051: IFFALSE 36083
// begin result := EnemyInRange ( i , 22 ) ;
36053: LD_ADDR_VAR 0 2
36057: PUSH
36058: LD_VAR 0 3
36062: PPUSH
36063: LD_INT 22
36065: PPUSH
36066: CALL 33771 0 2
36070: ST_TO_ADDR
// if result then
36071: LD_VAR 0 2
36075: IFFALSE 36081
// exit ;
36077: POP
36078: POP
36079: GO 36085
// end ;
36081: GO 36050
36083: POP
36084: POP
// end ;
36085: LD_VAR 0 2
36089: RET
// export function FilterByTag ( units , tag ) ; begin
36090: LD_INT 0
36092: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36093: LD_ADDR_VAR 0 3
36097: PUSH
36098: LD_VAR 0 1
36102: PPUSH
36103: LD_INT 120
36105: PUSH
36106: LD_VAR 0 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PPUSH
36115: CALL_OW 72
36119: ST_TO_ADDR
// end ;
36120: LD_VAR 0 3
36124: RET
// export function IsDriver ( un ) ; begin
36125: LD_INT 0
36127: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36128: LD_ADDR_VAR 0 2
36132: PUSH
36133: LD_VAR 0 1
36137: PUSH
36138: LD_INT 55
36140: PUSH
36141: EMPTY
36142: LIST
36143: PPUSH
36144: CALL_OW 69
36148: IN
36149: ST_TO_ADDR
// end ;
36150: LD_VAR 0 2
36154: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36155: LD_INT 0
36157: PPUSH
36158: PPUSH
// list := [ ] ;
36159: LD_ADDR_VAR 0 5
36163: PUSH
36164: EMPTY
36165: ST_TO_ADDR
// case d of 0 :
36166: LD_VAR 0 3
36170: PUSH
36171: LD_INT 0
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36179
36177: GO 36312
36179: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36180: LD_ADDR_VAR 0 5
36184: PUSH
36185: LD_VAR 0 1
36189: PUSH
36190: LD_INT 4
36192: MINUS
36193: PUSH
36194: LD_VAR 0 2
36198: PUSH
36199: LD_INT 4
36201: MINUS
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: PUSH
36211: LD_VAR 0 1
36215: PUSH
36216: LD_INT 3
36218: MINUS
36219: PUSH
36220: LD_VAR 0 2
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: PUSH
36233: LD_VAR 0 1
36237: PUSH
36238: LD_INT 4
36240: PLUS
36241: PUSH
36242: LD_VAR 0 2
36246: PUSH
36247: LD_INT 4
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: LIST
36254: PUSH
36255: LD_VAR 0 1
36259: PUSH
36260: LD_INT 3
36262: PLUS
36263: PUSH
36264: LD_VAR 0 2
36268: PUSH
36269: LD_INT 3
36271: PLUS
36272: PUSH
36273: LD_INT 5
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: PUSH
36281: LD_VAR 0 1
36285: PUSH
36286: LD_VAR 0 2
36290: PUSH
36291: LD_INT 4
36293: PLUS
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: ST_TO_ADDR
// end ; 1 :
36310: GO 37010
36312: LD_INT 1
36314: DOUBLE
36315: EQUAL
36316: IFTRUE 36320
36318: GO 36453
36320: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36321: LD_ADDR_VAR 0 5
36325: PUSH
36326: LD_VAR 0 1
36330: PUSH
36331: LD_VAR 0 2
36335: PUSH
36336: LD_INT 4
36338: MINUS
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: PUSH
36348: LD_VAR 0 1
36352: PUSH
36353: LD_INT 3
36355: MINUS
36356: PUSH
36357: LD_VAR 0 2
36361: PUSH
36362: LD_INT 3
36364: MINUS
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: PUSH
36374: LD_VAR 0 1
36378: PUSH
36379: LD_INT 4
36381: MINUS
36382: PUSH
36383: LD_VAR 0 2
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: LD_VAR 0 1
36400: PUSH
36401: LD_VAR 0 2
36405: PUSH
36406: LD_INT 3
36408: PLUS
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: PUSH
36418: LD_VAR 0 1
36422: PUSH
36423: LD_INT 4
36425: PLUS
36426: PUSH
36427: LD_VAR 0 2
36431: PUSH
36432: LD_INT 4
36434: PLUS
36435: PUSH
36436: LD_INT 5
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// end ; 2 :
36451: GO 37010
36453: LD_INT 2
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36461
36459: GO 36590
36461: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36462: LD_ADDR_VAR 0 5
36466: PUSH
36467: LD_VAR 0 1
36471: PUSH
36472: LD_VAR 0 2
36476: PUSH
36477: LD_INT 3
36479: MINUS
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: PUSH
36489: LD_VAR 0 1
36493: PUSH
36494: LD_INT 4
36496: PLUS
36497: PUSH
36498: LD_VAR 0 2
36502: PUSH
36503: LD_INT 4
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: LIST
36510: PUSH
36511: LD_VAR 0 1
36515: PUSH
36516: LD_VAR 0 2
36520: PUSH
36521: LD_INT 4
36523: PLUS
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: PUSH
36533: LD_VAR 0 1
36537: PUSH
36538: LD_INT 3
36540: MINUS
36541: PUSH
36542: LD_VAR 0 2
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: PUSH
36555: LD_VAR 0 1
36559: PUSH
36560: LD_INT 4
36562: MINUS
36563: PUSH
36564: LD_VAR 0 2
36568: PUSH
36569: LD_INT 4
36571: MINUS
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// end ; 3 :
36588: GO 37010
36590: LD_INT 3
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36598
36596: GO 36731
36598: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36599: LD_ADDR_VAR 0 5
36603: PUSH
36604: LD_VAR 0 1
36608: PUSH
36609: LD_INT 3
36611: PLUS
36612: PUSH
36613: LD_VAR 0 2
36617: PUSH
36618: LD_INT 4
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: PUSH
36626: LD_VAR 0 1
36630: PUSH
36631: LD_INT 4
36633: PLUS
36634: PUSH
36635: LD_VAR 0 2
36639: PUSH
36640: LD_INT 4
36642: PLUS
36643: PUSH
36644: LD_INT 5
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: LIST
36651: PUSH
36652: LD_VAR 0 1
36656: PUSH
36657: LD_INT 4
36659: MINUS
36660: PUSH
36661: LD_VAR 0 2
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PUSH
36674: LD_VAR 0 1
36678: PUSH
36679: LD_VAR 0 2
36683: PUSH
36684: LD_INT 4
36686: MINUS
36687: PUSH
36688: LD_INT 3
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: PUSH
36696: LD_VAR 0 1
36700: PUSH
36701: LD_INT 3
36703: MINUS
36704: PUSH
36705: LD_VAR 0 2
36709: PUSH
36710: LD_INT 3
36712: MINUS
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: ST_TO_ADDR
// end ; 4 :
36729: GO 37010
36731: LD_INT 4
36733: DOUBLE
36734: EQUAL
36735: IFTRUE 36739
36737: GO 36872
36739: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36740: LD_ADDR_VAR 0 5
36744: PUSH
36745: LD_VAR 0 1
36749: PUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_INT 4
36757: PLUS
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PUSH
36767: LD_VAR 0 1
36771: PUSH
36772: LD_INT 3
36774: PLUS
36775: PUSH
36776: LD_VAR 0 2
36780: PUSH
36781: LD_INT 3
36783: PLUS
36784: PUSH
36785: LD_INT 5
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: PUSH
36793: LD_VAR 0 1
36797: PUSH
36798: LD_INT 4
36800: PLUS
36801: PUSH
36802: LD_VAR 0 2
36806: PUSH
36807: LD_INT 4
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: PUSH
36815: LD_VAR 0 1
36819: PUSH
36820: LD_VAR 0 2
36824: PUSH
36825: LD_INT 3
36827: MINUS
36828: PUSH
36829: LD_INT 3
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: PUSH
36837: LD_VAR 0 1
36841: PUSH
36842: LD_INT 4
36844: MINUS
36845: PUSH
36846: LD_VAR 0 2
36850: PUSH
36851: LD_INT 4
36853: MINUS
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: ST_TO_ADDR
// end ; 5 :
36870: GO 37010
36872: LD_INT 5
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36880
36878: GO 37009
36880: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36881: LD_ADDR_VAR 0 5
36885: PUSH
36886: LD_VAR 0 1
36890: PUSH
36891: LD_INT 4
36893: MINUS
36894: PUSH
36895: LD_VAR 0 2
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: PUSH
36908: LD_VAR 0 1
36912: PUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_INT 4
36920: MINUS
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: PUSH
36930: LD_VAR 0 1
36934: PUSH
36935: LD_INT 4
36937: PLUS
36938: PUSH
36939: LD_VAR 0 2
36943: PUSH
36944: LD_INT 4
36946: PLUS
36947: PUSH
36948: LD_INT 5
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: PUSH
36956: LD_VAR 0 1
36960: PUSH
36961: LD_INT 3
36963: PLUS
36964: PUSH
36965: LD_VAR 0 2
36969: PUSH
36970: LD_INT 4
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: PUSH
36978: LD_VAR 0 1
36982: PUSH
36983: LD_VAR 0 2
36987: PUSH
36988: LD_INT 3
36990: PLUS
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// end ; end ;
37007: GO 37010
37009: POP
// result := list ;
37010: LD_ADDR_VAR 0 4
37014: PUSH
37015: LD_VAR 0 5
37019: ST_TO_ADDR
// end ;
37020: LD_VAR 0 4
37024: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37025: LD_INT 0
37027: PPUSH
37028: PPUSH
37029: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37030: LD_VAR 0 1
37034: NOT
37035: PUSH
37036: LD_VAR 0 2
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: LD_INT 3
37049: PUSH
37050: LD_INT 4
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: IN
37059: NOT
37060: OR
37061: IFFALSE 37065
// exit ;
37063: GO 37157
// tmp := [ ] ;
37065: LD_ADDR_VAR 0 5
37069: PUSH
37070: EMPTY
37071: ST_TO_ADDR
// for i in units do
37072: LD_ADDR_VAR 0 4
37076: PUSH
37077: LD_VAR 0 1
37081: PUSH
37082: FOR_IN
37083: IFFALSE 37126
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37085: LD_ADDR_VAR 0 5
37089: PUSH
37090: LD_VAR 0 5
37094: PPUSH
37095: LD_VAR 0 5
37099: PUSH
37100: LD_INT 1
37102: PLUS
37103: PPUSH
37104: LD_VAR 0 4
37108: PPUSH
37109: LD_VAR 0 2
37113: PPUSH
37114: CALL_OW 259
37118: PPUSH
37119: CALL_OW 2
37123: ST_TO_ADDR
37124: GO 37082
37126: POP
37127: POP
// if not tmp then
37128: LD_VAR 0 5
37132: NOT
37133: IFFALSE 37137
// exit ;
37135: GO 37157
// result := SortListByListDesc ( units , tmp ) ;
37137: LD_ADDR_VAR 0 3
37141: PUSH
37142: LD_VAR 0 1
37146: PPUSH
37147: LD_VAR 0 5
37151: PPUSH
37152: CALL_OW 77
37156: ST_TO_ADDR
// end ;
37157: LD_VAR 0 3
37161: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37162: LD_INT 0
37164: PPUSH
37165: PPUSH
37166: PPUSH
// result := false ;
37167: LD_ADDR_VAR 0 3
37171: PUSH
37172: LD_INT 0
37174: ST_TO_ADDR
// x := GetX ( building ) ;
37175: LD_ADDR_VAR 0 4
37179: PUSH
37180: LD_VAR 0 2
37184: PPUSH
37185: CALL_OW 250
37189: ST_TO_ADDR
// y := GetY ( building ) ;
37190: LD_ADDR_VAR 0 5
37194: PUSH
37195: LD_VAR 0 2
37199: PPUSH
37200: CALL_OW 251
37204: ST_TO_ADDR
// if not building or not x or not y then
37205: LD_VAR 0 2
37209: NOT
37210: PUSH
37211: LD_VAR 0 4
37215: NOT
37216: OR
37217: PUSH
37218: LD_VAR 0 5
37222: NOT
37223: OR
37224: IFFALSE 37228
// exit ;
37226: GO 37320
// if GetTaskList ( unit ) then
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL_OW 437
37237: IFFALSE 37320
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37239: LD_STRING e
37241: PUSH
37242: LD_VAR 0 1
37246: PPUSH
37247: CALL_OW 437
37251: PUSH
37252: LD_INT 1
37254: ARRAY
37255: PUSH
37256: LD_INT 1
37258: ARRAY
37259: EQUAL
37260: PUSH
37261: LD_VAR 0 4
37265: PUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 437
37275: PUSH
37276: LD_INT 1
37278: ARRAY
37279: PUSH
37280: LD_INT 2
37282: ARRAY
37283: EQUAL
37284: AND
37285: PUSH
37286: LD_VAR 0 5
37290: PUSH
37291: LD_VAR 0 1
37295: PPUSH
37296: CALL_OW 437
37300: PUSH
37301: LD_INT 1
37303: ARRAY
37304: PUSH
37305: LD_INT 3
37307: ARRAY
37308: EQUAL
37309: AND
37310: IFFALSE 37320
// result := true end ;
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_INT 1
37319: ST_TO_ADDR
// end ;
37320: LD_VAR 0 3
37324: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37325: LD_INT 0
37327: PPUSH
// result := false ;
37328: LD_ADDR_VAR 0 4
37332: PUSH
37333: LD_INT 0
37335: ST_TO_ADDR
// if GetTaskList ( unit ) then
37336: LD_VAR 0 1
37340: PPUSH
37341: CALL_OW 437
37345: IFFALSE 37428
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37347: LD_STRING M
37349: PUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 437
37359: PUSH
37360: LD_INT 1
37362: ARRAY
37363: PUSH
37364: LD_INT 1
37366: ARRAY
37367: EQUAL
37368: PUSH
37369: LD_VAR 0 2
37373: PUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: CALL_OW 437
37383: PUSH
37384: LD_INT 1
37386: ARRAY
37387: PUSH
37388: LD_INT 2
37390: ARRAY
37391: EQUAL
37392: AND
37393: PUSH
37394: LD_VAR 0 3
37398: PUSH
37399: LD_VAR 0 1
37403: PPUSH
37404: CALL_OW 437
37408: PUSH
37409: LD_INT 1
37411: ARRAY
37412: PUSH
37413: LD_INT 3
37415: ARRAY
37416: EQUAL
37417: AND
37418: IFFALSE 37428
// result := true ;
37420: LD_ADDR_VAR 0 4
37424: PUSH
37425: LD_INT 1
37427: ST_TO_ADDR
// end ; end ;
37428: LD_VAR 0 4
37432: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37433: LD_INT 0
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
// if not unit or not area then
37439: LD_VAR 0 1
37443: NOT
37444: PUSH
37445: LD_VAR 0 2
37449: NOT
37450: OR
37451: IFFALSE 37455
// exit ;
37453: GO 37619
// tmp := AreaToList ( area , i ) ;
37455: LD_ADDR_VAR 0 6
37459: PUSH
37460: LD_VAR 0 2
37464: PPUSH
37465: LD_VAR 0 5
37469: PPUSH
37470: CALL_OW 517
37474: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37475: LD_ADDR_VAR 0 5
37479: PUSH
37480: DOUBLE
37481: LD_INT 1
37483: DEC
37484: ST_TO_ADDR
37485: LD_VAR 0 6
37489: PUSH
37490: LD_INT 1
37492: ARRAY
37493: PUSH
37494: FOR_TO
37495: IFFALSE 37617
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37497: LD_ADDR_VAR 0 7
37501: PUSH
37502: LD_VAR 0 6
37506: PUSH
37507: LD_INT 1
37509: ARRAY
37510: PUSH
37511: LD_VAR 0 5
37515: ARRAY
37516: PUSH
37517: LD_VAR 0 6
37521: PUSH
37522: LD_INT 2
37524: ARRAY
37525: PUSH
37526: LD_VAR 0 5
37530: ARRAY
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37536: LD_VAR 0 7
37540: PUSH
37541: LD_INT 1
37543: ARRAY
37544: PPUSH
37545: LD_VAR 0 7
37549: PUSH
37550: LD_INT 2
37552: ARRAY
37553: PPUSH
37554: CALL_OW 428
37558: PUSH
37559: LD_INT 0
37561: EQUAL
37562: IFFALSE 37615
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37564: LD_VAR 0 1
37568: PPUSH
37569: LD_VAR 0 7
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: LD_VAR 0 7
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: PPUSH
37587: LD_VAR 0 3
37591: PPUSH
37592: CALL_OW 48
// result := IsPlaced ( unit ) ;
37596: LD_ADDR_VAR 0 4
37600: PUSH
37601: LD_VAR 0 1
37605: PPUSH
37606: CALL_OW 305
37610: ST_TO_ADDR
// exit ;
37611: POP
37612: POP
37613: GO 37619
// end ; end ;
37615: GO 37494
37617: POP
37618: POP
// end ;
37619: LD_VAR 0 4
37623: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37624: LD_INT 0
37626: PPUSH
37627: PPUSH
37628: PPUSH
// if not side or side > 8 then
37629: LD_VAR 0 1
37633: NOT
37634: PUSH
37635: LD_VAR 0 1
37639: PUSH
37640: LD_INT 8
37642: GREATER
37643: OR
37644: IFFALSE 37648
// exit ;
37646: GO 37835
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37648: LD_ADDR_VAR 0 4
37652: PUSH
37653: LD_INT 22
37655: PUSH
37656: LD_VAR 0 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 21
37667: PUSH
37668: LD_INT 3
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PPUSH
37679: CALL_OW 69
37683: ST_TO_ADDR
// if not tmp then
37684: LD_VAR 0 4
37688: NOT
37689: IFFALSE 37693
// exit ;
37691: GO 37835
// enable_addtolog := true ;
37693: LD_ADDR_OWVAR 81
37697: PUSH
37698: LD_INT 1
37700: ST_TO_ADDR
// AddToLog ( [ ) ;
37701: LD_STRING [
37703: PPUSH
37704: CALL_OW 561
// for i in tmp do
37708: LD_ADDR_VAR 0 3
37712: PUSH
37713: LD_VAR 0 4
37717: PUSH
37718: FOR_IN
37719: IFFALSE 37826
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37721: LD_STRING [
37723: PUSH
37724: LD_VAR 0 3
37728: PPUSH
37729: CALL_OW 266
37733: STR
37734: PUSH
37735: LD_STRING , 
37737: STR
37738: PUSH
37739: LD_VAR 0 3
37743: PPUSH
37744: CALL_OW 250
37748: STR
37749: PUSH
37750: LD_STRING , 
37752: STR
37753: PUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: CALL_OW 251
37763: STR
37764: PUSH
37765: LD_STRING , 
37767: STR
37768: PUSH
37769: LD_VAR 0 3
37773: PPUSH
37774: CALL_OW 254
37778: STR
37779: PUSH
37780: LD_STRING , 
37782: STR
37783: PUSH
37784: LD_VAR 0 3
37788: PPUSH
37789: LD_INT 1
37791: PPUSH
37792: CALL_OW 268
37796: STR
37797: PUSH
37798: LD_STRING , 
37800: STR
37801: PUSH
37802: LD_VAR 0 3
37806: PPUSH
37807: LD_INT 2
37809: PPUSH
37810: CALL_OW 268
37814: STR
37815: PUSH
37816: LD_STRING ],
37818: STR
37819: PPUSH
37820: CALL_OW 561
// end ;
37824: GO 37718
37826: POP
37827: POP
// AddToLog ( ]; ) ;
37828: LD_STRING ];
37830: PPUSH
37831: CALL_OW 561
// end ;
37835: LD_VAR 0 2
37839: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37840: LD_INT 0
37842: PPUSH
37843: PPUSH
37844: PPUSH
37845: PPUSH
37846: PPUSH
// if not area or not rate or not max then
37847: LD_VAR 0 1
37851: NOT
37852: PUSH
37853: LD_VAR 0 2
37857: NOT
37858: OR
37859: PUSH
37860: LD_VAR 0 4
37864: NOT
37865: OR
37866: IFFALSE 37870
// exit ;
37868: GO 38059
// while 1 do
37870: LD_INT 1
37872: IFFALSE 38059
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37874: LD_ADDR_VAR 0 9
37878: PUSH
37879: LD_VAR 0 1
37883: PPUSH
37884: LD_INT 1
37886: PPUSH
37887: CALL_OW 287
37891: PUSH
37892: LD_INT 10
37894: MUL
37895: ST_TO_ADDR
// r := rate / 10 ;
37896: LD_ADDR_VAR 0 7
37900: PUSH
37901: LD_VAR 0 2
37905: PUSH
37906: LD_INT 10
37908: DIVREAL
37909: ST_TO_ADDR
// time := 1 1$00 ;
37910: LD_ADDR_VAR 0 8
37914: PUSH
37915: LD_INT 2100
37917: ST_TO_ADDR
// if amount < min then
37918: LD_VAR 0 9
37922: PUSH
37923: LD_VAR 0 3
37927: LESS
37928: IFFALSE 37946
// r := r * 2 else
37930: LD_ADDR_VAR 0 7
37934: PUSH
37935: LD_VAR 0 7
37939: PUSH
37940: LD_INT 2
37942: MUL
37943: ST_TO_ADDR
37944: GO 37972
// if amount > max then
37946: LD_VAR 0 9
37950: PUSH
37951: LD_VAR 0 4
37955: GREATER
37956: IFFALSE 37972
// r := r / 2 ;
37958: LD_ADDR_VAR 0 7
37962: PUSH
37963: LD_VAR 0 7
37967: PUSH
37968: LD_INT 2
37970: DIVREAL
37971: ST_TO_ADDR
// time := time / r ;
37972: LD_ADDR_VAR 0 8
37976: PUSH
37977: LD_VAR 0 8
37981: PUSH
37982: LD_VAR 0 7
37986: DIVREAL
37987: ST_TO_ADDR
// if time < 0 then
37988: LD_VAR 0 8
37992: PUSH
37993: LD_INT 0
37995: LESS
37996: IFFALSE 38013
// time := time * - 1 ;
37998: LD_ADDR_VAR 0 8
38002: PUSH
38003: LD_VAR 0 8
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: MUL
38012: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38013: LD_VAR 0 8
38017: PUSH
38018: LD_INT 35
38020: PPUSH
38021: LD_INT 875
38023: PPUSH
38024: CALL_OW 12
38028: PLUS
38029: PPUSH
38030: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38034: LD_INT 1
38036: PPUSH
38037: LD_INT 5
38039: PPUSH
38040: CALL_OW 12
38044: PPUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: LD_INT 1
38052: PPUSH
38053: CALL_OW 55
// end ;
38057: GO 37870
// end ;
38059: LD_VAR 0 5
38063: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38064: LD_INT 0
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
// if not turrets or not factories then
38074: LD_VAR 0 1
38078: NOT
38079: PUSH
38080: LD_VAR 0 2
38084: NOT
38085: OR
38086: IFFALSE 38090
// exit ;
38088: GO 38397
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38090: LD_ADDR_VAR 0 10
38094: PUSH
38095: LD_INT 5
38097: PUSH
38098: LD_INT 6
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: LD_INT 4
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: LD_INT 5
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 24
38132: PUSH
38133: LD_INT 25
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 23
38142: PUSH
38143: LD_INT 27
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 42
38156: PUSH
38157: LD_INT 43
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 44
38166: PUSH
38167: LD_INT 46
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 45
38176: PUSH
38177: LD_INT 47
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// result := [ ] ;
38194: LD_ADDR_VAR 0 3
38198: PUSH
38199: EMPTY
38200: ST_TO_ADDR
// for i in turrets do
38201: LD_ADDR_VAR 0 4
38205: PUSH
38206: LD_VAR 0 1
38210: PUSH
38211: FOR_IN
38212: IFFALSE 38395
// begin nat := GetNation ( i ) ;
38214: LD_ADDR_VAR 0 7
38218: PUSH
38219: LD_VAR 0 4
38223: PPUSH
38224: CALL_OW 248
38228: ST_TO_ADDR
// weapon := 0 ;
38229: LD_ADDR_VAR 0 8
38233: PUSH
38234: LD_INT 0
38236: ST_TO_ADDR
// if not nat then
38237: LD_VAR 0 7
38241: NOT
38242: IFFALSE 38246
// continue ;
38244: GO 38211
// for j in list [ nat ] do
38246: LD_ADDR_VAR 0 5
38250: PUSH
38251: LD_VAR 0 10
38255: PUSH
38256: LD_VAR 0 7
38260: ARRAY
38261: PUSH
38262: FOR_IN
38263: IFFALSE 38304
// if GetBWeapon ( i ) = j [ 1 ] then
38265: LD_VAR 0 4
38269: PPUSH
38270: CALL_OW 269
38274: PUSH
38275: LD_VAR 0 5
38279: PUSH
38280: LD_INT 1
38282: ARRAY
38283: EQUAL
38284: IFFALSE 38302
// begin weapon := j [ 2 ] ;
38286: LD_ADDR_VAR 0 8
38290: PUSH
38291: LD_VAR 0 5
38295: PUSH
38296: LD_INT 2
38298: ARRAY
38299: ST_TO_ADDR
// break ;
38300: GO 38304
// end ;
38302: GO 38262
38304: POP
38305: POP
// if not weapon then
38306: LD_VAR 0 8
38310: NOT
38311: IFFALSE 38315
// continue ;
38313: GO 38211
// for k in factories do
38315: LD_ADDR_VAR 0 6
38319: PUSH
38320: LD_VAR 0 2
38324: PUSH
38325: FOR_IN
38326: IFFALSE 38391
// begin weapons := AvailableWeaponList ( k ) ;
38328: LD_ADDR_VAR 0 9
38332: PUSH
38333: LD_VAR 0 6
38337: PPUSH
38338: CALL_OW 478
38342: ST_TO_ADDR
// if not weapons then
38343: LD_VAR 0 9
38347: NOT
38348: IFFALSE 38352
// continue ;
38350: GO 38325
// if weapon in weapons then
38352: LD_VAR 0 8
38356: PUSH
38357: LD_VAR 0 9
38361: IN
38362: IFFALSE 38389
// begin result := [ i , weapon ] ;
38364: LD_ADDR_VAR 0 3
38368: PUSH
38369: LD_VAR 0 4
38373: PUSH
38374: LD_VAR 0 8
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: ST_TO_ADDR
// exit ;
38383: POP
38384: POP
38385: POP
38386: POP
38387: GO 38397
// end ; end ;
38389: GO 38325
38391: POP
38392: POP
// end ;
38393: GO 38211
38395: POP
38396: POP
// end ;
38397: LD_VAR 0 3
38401: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38402: LD_INT 0
38404: PPUSH
// if not side or side > 8 then
38405: LD_VAR 0 3
38409: NOT
38410: PUSH
38411: LD_VAR 0 3
38415: PUSH
38416: LD_INT 8
38418: GREATER
38419: OR
38420: IFFALSE 38424
// exit ;
38422: GO 38483
// if not range then
38424: LD_VAR 0 4
38428: NOT
38429: IFFALSE 38440
// range := - 12 ;
38431: LD_ADDR_VAR 0 4
38435: PUSH
38436: LD_INT 12
38438: NEG
38439: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38440: LD_VAR 0 1
38444: PPUSH
38445: LD_VAR 0 2
38449: PPUSH
38450: LD_VAR 0 3
38454: PPUSH
38455: LD_VAR 0 4
38459: PPUSH
38460: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38464: LD_VAR 0 1
38468: PPUSH
38469: LD_VAR 0 2
38473: PPUSH
38474: LD_VAR 0 3
38478: PPUSH
38479: CALL_OW 331
// end ;
38483: LD_VAR 0 5
38487: RET
// export function Video ( mode ) ; begin
38488: LD_INT 0
38490: PPUSH
// ingame_video = mode ;
38491: LD_ADDR_OWVAR 52
38495: PUSH
38496: LD_VAR 0 1
38500: ST_TO_ADDR
// interface_hidden = mode ;
38501: LD_ADDR_OWVAR 54
38505: PUSH
38506: LD_VAR 0 1
38510: ST_TO_ADDR
// end ;
38511: LD_VAR 0 2
38515: RET
// export function Join ( array , element ) ; begin
38516: LD_INT 0
38518: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38519: LD_ADDR_VAR 0 3
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_VAR 0 1
38533: PUSH
38534: LD_INT 1
38536: PLUS
38537: PPUSH
38538: LD_VAR 0 2
38542: PPUSH
38543: CALL_OW 1
38547: ST_TO_ADDR
// end ;
38548: LD_VAR 0 3
38552: RET
// export function JoinUnion ( array , element ) ; begin
38553: LD_INT 0
38555: PPUSH
// result := array union element ;
38556: LD_ADDR_VAR 0 3
38560: PUSH
38561: LD_VAR 0 1
38565: PUSH
38566: LD_VAR 0 2
38570: UNION
38571: ST_TO_ADDR
// end ;
38572: LD_VAR 0 3
38576: RET
// export function GetBehemoths ( side ) ; begin
38577: LD_INT 0
38579: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38580: LD_ADDR_VAR 0 2
38584: PUSH
38585: LD_INT 22
38587: PUSH
38588: LD_VAR 0 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 31
38599: PUSH
38600: LD_INT 25
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PPUSH
38611: CALL_OW 69
38615: ST_TO_ADDR
// end ;
38616: LD_VAR 0 2
38620: RET
// export function Shuffle ( array ) ; var i , index ; begin
38621: LD_INT 0
38623: PPUSH
38624: PPUSH
38625: PPUSH
// result := [ ] ;
38626: LD_ADDR_VAR 0 2
38630: PUSH
38631: EMPTY
38632: ST_TO_ADDR
// if not array then
38633: LD_VAR 0 1
38637: NOT
38638: IFFALSE 38642
// exit ;
38640: GO 38741
// Randomize ;
38642: CALL_OW 10
// for i = array downto 1 do
38646: LD_ADDR_VAR 0 3
38650: PUSH
38651: DOUBLE
38652: LD_VAR 0 1
38656: INC
38657: ST_TO_ADDR
38658: LD_INT 1
38660: PUSH
38661: FOR_DOWNTO
38662: IFFALSE 38739
// begin index := rand ( 1 , array ) ;
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: LD_INT 1
38671: PPUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 12
38681: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38682: LD_ADDR_VAR 0 2
38686: PUSH
38687: LD_VAR 0 2
38691: PPUSH
38692: LD_VAR 0 2
38696: PUSH
38697: LD_INT 1
38699: PLUS
38700: PPUSH
38701: LD_VAR 0 1
38705: PUSH
38706: LD_VAR 0 4
38710: ARRAY
38711: PPUSH
38712: CALL_OW 2
38716: ST_TO_ADDR
// array := Delete ( array , index ) ;
38717: LD_ADDR_VAR 0 1
38721: PUSH
38722: LD_VAR 0 1
38726: PPUSH
38727: LD_VAR 0 4
38731: PPUSH
38732: CALL_OW 3
38736: ST_TO_ADDR
// end ;
38737: GO 38661
38739: POP
38740: POP
// end ;
38741: LD_VAR 0 2
38745: RET
// export function GetBaseMaterials ( base ) ; begin
38746: LD_INT 0
38748: PPUSH
// result := [ 0 , 0 , 0 ] ;
38749: LD_ADDR_VAR 0 2
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: ST_TO_ADDR
// if not base then
38768: LD_VAR 0 1
38772: NOT
38773: IFFALSE 38777
// exit ;
38775: GO 38826
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38777: LD_ADDR_VAR 0 2
38781: PUSH
38782: LD_VAR 0 1
38786: PPUSH
38787: LD_INT 1
38789: PPUSH
38790: CALL_OW 275
38794: PUSH
38795: LD_VAR 0 1
38799: PPUSH
38800: LD_INT 2
38802: PPUSH
38803: CALL_OW 275
38807: PUSH
38808: LD_VAR 0 1
38812: PPUSH
38813: LD_INT 3
38815: PPUSH
38816: CALL_OW 275
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: ST_TO_ADDR
// end ;
38826: LD_VAR 0 2
38830: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38831: LD_INT 0
38833: PPUSH
38834: PPUSH
// result := array ;
38835: LD_ADDR_VAR 0 3
38839: PUSH
38840: LD_VAR 0 1
38844: ST_TO_ADDR
// if size >= result then
38845: LD_VAR 0 2
38849: PUSH
38850: LD_VAR 0 3
38854: GREATEREQUAL
38855: IFFALSE 38859
// exit ;
38857: GO 38909
// if size then
38859: LD_VAR 0 2
38863: IFFALSE 38909
// for i := array downto size do
38865: LD_ADDR_VAR 0 4
38869: PUSH
38870: DOUBLE
38871: LD_VAR 0 1
38875: INC
38876: ST_TO_ADDR
38877: LD_VAR 0 2
38881: PUSH
38882: FOR_DOWNTO
38883: IFFALSE 38907
// result := Delete ( result , result ) ;
38885: LD_ADDR_VAR 0 3
38889: PUSH
38890: LD_VAR 0 3
38894: PPUSH
38895: LD_VAR 0 3
38899: PPUSH
38900: CALL_OW 3
38904: ST_TO_ADDR
38905: GO 38882
38907: POP
38908: POP
// end ;
38909: LD_VAR 0 3
38913: RET
// export function ComExit ( unit ) ; var tmp ; begin
38914: LD_INT 0
38916: PPUSH
38917: PPUSH
// if not IsInUnit ( unit ) then
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 310
38927: NOT
38928: IFFALSE 38932
// exit ;
38930: GO 38992
// tmp := IsInUnit ( unit ) ;
38932: LD_ADDR_VAR 0 3
38936: PUSH
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 310
38946: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38947: LD_VAR 0 3
38951: PPUSH
38952: CALL_OW 247
38956: PUSH
38957: LD_INT 2
38959: EQUAL
38960: IFFALSE 38973
// ComExitVehicle ( unit ) else
38962: LD_VAR 0 1
38966: PPUSH
38967: CALL_OW 121
38971: GO 38982
// ComExitBuilding ( unit ) ;
38973: LD_VAR 0 1
38977: PPUSH
38978: CALL_OW 122
// result := tmp ;
38982: LD_ADDR_VAR 0 2
38986: PUSH
38987: LD_VAR 0 3
38991: ST_TO_ADDR
// end ;
38992: LD_VAR 0 2
38996: RET
// export function ComExitAll ( units ) ; var i ; begin
38997: LD_INT 0
38999: PPUSH
39000: PPUSH
// if not units then
39001: LD_VAR 0 1
39005: NOT
39006: IFFALSE 39010
// exit ;
39008: GO 39036
// for i in units do
39010: LD_ADDR_VAR 0 3
39014: PUSH
39015: LD_VAR 0 1
39019: PUSH
39020: FOR_IN
39021: IFFALSE 39034
// ComExit ( i ) ;
39023: LD_VAR 0 3
39027: PPUSH
39028: CALL 38914 0 1
39032: GO 39020
39034: POP
39035: POP
// end ;
39036: LD_VAR 0 2
39040: RET
// export function ResetHc ; begin
39041: LD_INT 0
39043: PPUSH
// InitHc ;
39044: CALL_OW 19
// hc_importance := 0 ;
39048: LD_ADDR_OWVAR 32
39052: PUSH
39053: LD_INT 0
39055: ST_TO_ADDR
// end ;
39056: LD_VAR 0 1
39060: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39061: LD_INT 0
39063: PPUSH
39064: PPUSH
39065: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39066: LD_ADDR_VAR 0 6
39070: PUSH
39071: LD_VAR 0 1
39075: PUSH
39076: LD_VAR 0 3
39080: PLUS
39081: PUSH
39082: LD_INT 2
39084: DIV
39085: ST_TO_ADDR
// if _x < 0 then
39086: LD_VAR 0 6
39090: PUSH
39091: LD_INT 0
39093: LESS
39094: IFFALSE 39111
// _x := _x * - 1 ;
39096: LD_ADDR_VAR 0 6
39100: PUSH
39101: LD_VAR 0 6
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: MUL
39110: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39111: LD_ADDR_VAR 0 7
39115: PUSH
39116: LD_VAR 0 2
39120: PUSH
39121: LD_VAR 0 4
39125: PLUS
39126: PUSH
39127: LD_INT 2
39129: DIV
39130: ST_TO_ADDR
// if _y < 0 then
39131: LD_VAR 0 7
39135: PUSH
39136: LD_INT 0
39138: LESS
39139: IFFALSE 39156
// _y := _y * - 1 ;
39141: LD_ADDR_VAR 0 7
39145: PUSH
39146: LD_VAR 0 7
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: MUL
39155: ST_TO_ADDR
// result := [ _x , _y ] ;
39156: LD_ADDR_VAR 0 5
39160: PUSH
39161: LD_VAR 0 6
39165: PUSH
39166: LD_VAR 0 7
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// end ;
39175: LD_VAR 0 5
39179: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39180: LD_INT 0
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
// task := GetTaskList ( unit ) ;
39186: LD_ADDR_VAR 0 7
39190: PUSH
39191: LD_VAR 0 1
39195: PPUSH
39196: CALL_OW 437
39200: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39201: LD_VAR 0 7
39205: NOT
39206: PUSH
39207: LD_VAR 0 1
39211: PPUSH
39212: LD_VAR 0 2
39216: PPUSH
39217: CALL_OW 308
39221: NOT
39222: AND
39223: IFFALSE 39227
// exit ;
39225: GO 39345
// if IsInArea ( unit , area ) then
39227: LD_VAR 0 1
39231: PPUSH
39232: LD_VAR 0 2
39236: PPUSH
39237: CALL_OW 308
39241: IFFALSE 39259
// begin ComMoveToArea ( unit , goAway ) ;
39243: LD_VAR 0 1
39247: PPUSH
39248: LD_VAR 0 3
39252: PPUSH
39253: CALL_OW 113
// exit ;
39257: GO 39345
// end ; if task [ 1 ] [ 1 ] <> M then
39259: LD_VAR 0 7
39263: PUSH
39264: LD_INT 1
39266: ARRAY
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PUSH
39272: LD_STRING M
39274: NONEQUAL
39275: IFFALSE 39279
// exit ;
39277: GO 39345
// x := task [ 1 ] [ 2 ] ;
39279: LD_ADDR_VAR 0 5
39283: PUSH
39284: LD_VAR 0 7
39288: PUSH
39289: LD_INT 1
39291: ARRAY
39292: PUSH
39293: LD_INT 2
39295: ARRAY
39296: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39297: LD_ADDR_VAR 0 6
39301: PUSH
39302: LD_VAR 0 7
39306: PUSH
39307: LD_INT 1
39309: ARRAY
39310: PUSH
39311: LD_INT 3
39313: ARRAY
39314: ST_TO_ADDR
// if InArea ( x , y , area ) then
39315: LD_VAR 0 5
39319: PPUSH
39320: LD_VAR 0 6
39324: PPUSH
39325: LD_VAR 0 2
39329: PPUSH
39330: CALL_OW 309
39334: IFFALSE 39345
// ComStop ( unit ) ;
39336: LD_VAR 0 1
39340: PPUSH
39341: CALL_OW 141
// end ;
39345: LD_VAR 0 4
39349: RET
// export function Abs ( value ) ; begin
39350: LD_INT 0
39352: PPUSH
// result := value ;
39353: LD_ADDR_VAR 0 2
39357: PUSH
39358: LD_VAR 0 1
39362: ST_TO_ADDR
// if value < 0 then
39363: LD_VAR 0 1
39367: PUSH
39368: LD_INT 0
39370: LESS
39371: IFFALSE 39388
// result := value * - 1 ;
39373: LD_ADDR_VAR 0 2
39377: PUSH
39378: LD_VAR 0 1
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: MUL
39387: ST_TO_ADDR
// end ;
39388: LD_VAR 0 2
39392: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39393: LD_INT 0
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
// if not unit or not building then
39403: LD_VAR 0 1
39407: NOT
39408: PUSH
39409: LD_VAR 0 2
39413: NOT
39414: OR
39415: IFFALSE 39419
// exit ;
39417: GO 39645
// x := GetX ( building ) ;
39419: LD_ADDR_VAR 0 4
39423: PUSH
39424: LD_VAR 0 2
39428: PPUSH
39429: CALL_OW 250
39433: ST_TO_ADDR
// y := GetY ( building ) ;
39434: LD_ADDR_VAR 0 6
39438: PUSH
39439: LD_VAR 0 2
39443: PPUSH
39444: CALL_OW 251
39448: ST_TO_ADDR
// d := GetDir ( building ) ;
39449: LD_ADDR_VAR 0 8
39453: PUSH
39454: LD_VAR 0 2
39458: PPUSH
39459: CALL_OW 254
39463: ST_TO_ADDR
// r := 4 ;
39464: LD_ADDR_VAR 0 9
39468: PUSH
39469: LD_INT 4
39471: ST_TO_ADDR
// for i := 1 to 5 do
39472: LD_ADDR_VAR 0 10
39476: PUSH
39477: DOUBLE
39478: LD_INT 1
39480: DEC
39481: ST_TO_ADDR
39482: LD_INT 5
39484: PUSH
39485: FOR_TO
39486: IFFALSE 39643
// begin _x := ShiftX ( x , d , r + i ) ;
39488: LD_ADDR_VAR 0 5
39492: PUSH
39493: LD_VAR 0 4
39497: PPUSH
39498: LD_VAR 0 8
39502: PPUSH
39503: LD_VAR 0 9
39507: PUSH
39508: LD_VAR 0 10
39512: PLUS
39513: PPUSH
39514: CALL_OW 272
39518: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39519: LD_ADDR_VAR 0 7
39523: PUSH
39524: LD_VAR 0 6
39528: PPUSH
39529: LD_VAR 0 8
39533: PPUSH
39534: LD_VAR 0 9
39538: PUSH
39539: LD_VAR 0 10
39543: PLUS
39544: PPUSH
39545: CALL_OW 273
39549: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39550: LD_VAR 0 5
39554: PPUSH
39555: LD_VAR 0 7
39559: PPUSH
39560: CALL_OW 488
39564: PUSH
39565: LD_VAR 0 5
39569: PPUSH
39570: LD_VAR 0 7
39574: PPUSH
39575: CALL_OW 428
39579: PPUSH
39580: CALL_OW 247
39584: PUSH
39585: LD_INT 3
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: IN
39595: NOT
39596: AND
39597: IFFALSE 39641
// begin ComMoveXY ( unit , _x , _y ) ;
39599: LD_VAR 0 1
39603: PPUSH
39604: LD_VAR 0 5
39608: PPUSH
39609: LD_VAR 0 7
39613: PPUSH
39614: CALL_OW 111
// result := [ _x , _y ] ;
39618: LD_ADDR_VAR 0 3
39622: PUSH
39623: LD_VAR 0 5
39627: PUSH
39628: LD_VAR 0 7
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: ST_TO_ADDR
// exit ;
39637: POP
39638: POP
39639: GO 39645
// end ; end ;
39641: GO 39485
39643: POP
39644: POP
// end ;
39645: LD_VAR 0 3
39649: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39650: LD_INT 0
39652: PPUSH
39653: PPUSH
39654: PPUSH
// result := 0 ;
39655: LD_ADDR_VAR 0 3
39659: PUSH
39660: LD_INT 0
39662: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39663: LD_VAR 0 1
39667: PUSH
39668: LD_INT 0
39670: LESS
39671: PUSH
39672: LD_VAR 0 1
39676: PUSH
39677: LD_INT 8
39679: GREATER
39680: OR
39681: PUSH
39682: LD_VAR 0 2
39686: PUSH
39687: LD_INT 0
39689: LESS
39690: OR
39691: PUSH
39692: LD_VAR 0 2
39696: PUSH
39697: LD_INT 8
39699: GREATER
39700: OR
39701: IFFALSE 39705
// exit ;
39703: GO 39780
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39705: LD_ADDR_VAR 0 4
39709: PUSH
39710: LD_INT 22
39712: PUSH
39713: LD_VAR 0 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PPUSH
39722: CALL_OW 69
39726: PUSH
39727: FOR_IN
39728: IFFALSE 39778
// begin un := UnitShoot ( i ) ;
39730: LD_ADDR_VAR 0 5
39734: PUSH
39735: LD_VAR 0 4
39739: PPUSH
39740: CALL_OW 504
39744: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39745: LD_VAR 0 5
39749: PPUSH
39750: CALL_OW 255
39754: PUSH
39755: LD_VAR 0 1
39759: EQUAL
39760: IFFALSE 39776
// begin result := un ;
39762: LD_ADDR_VAR 0 3
39766: PUSH
39767: LD_VAR 0 5
39771: ST_TO_ADDR
// exit ;
39772: POP
39773: POP
39774: GO 39780
// end ; end ;
39776: GO 39727
39778: POP
39779: POP
// end ;
39780: LD_VAR 0 3
39784: RET
// export function GetCargoBay ( units ) ; begin
39785: LD_INT 0
39787: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39788: LD_ADDR_VAR 0 2
39792: PUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: LD_INT 2
39800: PUSH
39801: LD_INT 34
39803: PUSH
39804: LD_INT 12
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 34
39813: PUSH
39814: LD_INT 51
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 34
39823: PUSH
39824: LD_INT 32
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 34
39833: PUSH
39834: LD_INT 89
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: PPUSH
39848: CALL_OW 72
39852: ST_TO_ADDR
// end ;
39853: LD_VAR 0 2
39857: RET
// export function Negate ( value ) ; begin
39858: LD_INT 0
39860: PPUSH
// result := not value ;
39861: LD_ADDR_VAR 0 2
39865: PUSH
39866: LD_VAR 0 1
39870: NOT
39871: ST_TO_ADDR
// end ;
39872: LD_VAR 0 2
39876: RET
// export function Inc ( value ) ; begin
39877: LD_INT 0
39879: PPUSH
// result := value + 1 ;
39880: LD_ADDR_VAR 0 2
39884: PUSH
39885: LD_VAR 0 1
39889: PUSH
39890: LD_INT 1
39892: PLUS
39893: ST_TO_ADDR
// end ;
39894: LD_VAR 0 2
39898: RET
// export function Dec ( value ) ; begin
39899: LD_INT 0
39901: PPUSH
// result := value - 1 ;
39902: LD_ADDR_VAR 0 2
39906: PUSH
39907: LD_VAR 0 1
39911: PUSH
39912: LD_INT 1
39914: MINUS
39915: ST_TO_ADDR
// end ;
39916: LD_VAR 0 2
39920: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39921: LD_INT 0
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
39928: PPUSH
39929: PPUSH
39930: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39931: LD_VAR 0 1
39935: PPUSH
39936: LD_VAR 0 2
39940: PPUSH
39941: CALL_OW 488
39945: NOT
39946: PUSH
39947: LD_VAR 0 3
39951: PPUSH
39952: LD_VAR 0 4
39956: PPUSH
39957: CALL_OW 488
39961: NOT
39962: OR
39963: IFFALSE 39976
// begin result := - 1 ;
39965: LD_ADDR_VAR 0 5
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: ST_TO_ADDR
// exit ;
39974: GO 40211
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39976: LD_ADDR_VAR 0 12
39980: PUSH
39981: LD_VAR 0 1
39985: PPUSH
39986: LD_VAR 0 2
39990: PPUSH
39991: LD_VAR 0 3
39995: PPUSH
39996: LD_VAR 0 4
40000: PPUSH
40001: CALL 39061 0 4
40005: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40006: LD_ADDR_VAR 0 11
40010: PUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: LD_VAR 0 2
40020: PPUSH
40021: LD_VAR 0 12
40025: PUSH
40026: LD_INT 1
40028: ARRAY
40029: PPUSH
40030: LD_VAR 0 12
40034: PUSH
40035: LD_INT 2
40037: ARRAY
40038: PPUSH
40039: CALL_OW 298
40043: ST_TO_ADDR
// distance := 9999 ;
40044: LD_ADDR_VAR 0 10
40048: PUSH
40049: LD_INT 9999
40051: ST_TO_ADDR
// for i := 0 to 5 do
40052: LD_ADDR_VAR 0 6
40056: PUSH
40057: DOUBLE
40058: LD_INT 0
40060: DEC
40061: ST_TO_ADDR
40062: LD_INT 5
40064: PUSH
40065: FOR_TO
40066: IFFALSE 40209
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40068: LD_ADDR_VAR 0 7
40072: PUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: LD_VAR 0 6
40082: PPUSH
40083: LD_VAR 0 11
40087: PPUSH
40088: CALL_OW 272
40092: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40093: LD_ADDR_VAR 0 8
40097: PUSH
40098: LD_VAR 0 2
40102: PPUSH
40103: LD_VAR 0 6
40107: PPUSH
40108: LD_VAR 0 11
40112: PPUSH
40113: CALL_OW 273
40117: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40118: LD_VAR 0 7
40122: PPUSH
40123: LD_VAR 0 8
40127: PPUSH
40128: CALL_OW 488
40132: NOT
40133: IFFALSE 40137
// continue ;
40135: GO 40065
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40137: LD_ADDR_VAR 0 9
40141: PUSH
40142: LD_VAR 0 12
40146: PUSH
40147: LD_INT 1
40149: ARRAY
40150: PPUSH
40151: LD_VAR 0 12
40155: PUSH
40156: LD_INT 2
40158: ARRAY
40159: PPUSH
40160: LD_VAR 0 7
40164: PPUSH
40165: LD_VAR 0 8
40169: PPUSH
40170: CALL_OW 298
40174: ST_TO_ADDR
// if tmp < distance then
40175: LD_VAR 0 9
40179: PUSH
40180: LD_VAR 0 10
40184: LESS
40185: IFFALSE 40207
// begin result := i ;
40187: LD_ADDR_VAR 0 5
40191: PUSH
40192: LD_VAR 0 6
40196: ST_TO_ADDR
// distance := tmp ;
40197: LD_ADDR_VAR 0 10
40201: PUSH
40202: LD_VAR 0 9
40206: ST_TO_ADDR
// end ; end ;
40207: GO 40065
40209: POP
40210: POP
// end ;
40211: LD_VAR 0 5
40215: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40216: LD_INT 0
40218: PPUSH
40219: PPUSH
// if not driver or not IsInUnit ( driver ) then
40220: LD_VAR 0 1
40224: NOT
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 310
40235: NOT
40236: OR
40237: IFFALSE 40241
// exit ;
40239: GO 40331
// vehicle := IsInUnit ( driver ) ;
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 310
40255: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40256: LD_VAR 0 1
40260: PPUSH
40261: LD_STRING \
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: PUSH
40291: LD_STRING E
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_VAR 0 3
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PPUSH
40327: CALL_OW 446
// end ;
40331: LD_VAR 0 2
40335: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40336: LD_INT 0
40338: PPUSH
40339: PPUSH
// if not driver or not IsInUnit ( driver ) then
40340: LD_VAR 0 1
40344: NOT
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 310
40355: NOT
40356: OR
40357: IFFALSE 40361
// exit ;
40359: GO 40451
// vehicle := IsInUnit ( driver ) ;
40361: LD_ADDR_VAR 0 3
40365: PUSH
40366: LD_VAR 0 1
40370: PPUSH
40371: CALL_OW 310
40375: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40376: LD_VAR 0 1
40380: PPUSH
40381: LD_STRING \
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: PUSH
40411: LD_STRING E
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_VAR 0 3
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PPUSH
40447: CALL_OW 447
// end ;
40451: LD_VAR 0 2
40455: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40456: LD_INT 0
40458: PPUSH
40459: PPUSH
40460: PPUSH
// tmp := [ ] ;
40461: LD_ADDR_VAR 0 5
40465: PUSH
40466: EMPTY
40467: ST_TO_ADDR
// for i in units do
40468: LD_ADDR_VAR 0 4
40472: PUSH
40473: LD_VAR 0 1
40477: PUSH
40478: FOR_IN
40479: IFFALSE 40517
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40481: LD_ADDR_VAR 0 5
40485: PUSH
40486: LD_VAR 0 5
40490: PPUSH
40491: LD_VAR 0 5
40495: PUSH
40496: LD_INT 1
40498: PLUS
40499: PPUSH
40500: LD_VAR 0 4
40504: PPUSH
40505: CALL_OW 256
40509: PPUSH
40510: CALL_OW 2
40514: ST_TO_ADDR
40515: GO 40478
40517: POP
40518: POP
// if not tmp then
40519: LD_VAR 0 5
40523: NOT
40524: IFFALSE 40528
// exit ;
40526: GO 40576
// if asc then
40528: LD_VAR 0 2
40532: IFFALSE 40556
// result := SortListByListAsc ( units , tmp ) else
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_VAR 0 1
40543: PPUSH
40544: LD_VAR 0 5
40548: PPUSH
40549: CALL_OW 76
40553: ST_TO_ADDR
40554: GO 40576
// result := SortListByListDesc ( units , tmp ) ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_VAR 0 5
40570: PPUSH
40571: CALL_OW 77
40575: ST_TO_ADDR
// end ;
40576: LD_VAR 0 3
40580: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40581: LD_INT 0
40583: PPUSH
40584: PPUSH
// task := GetTaskList ( mech ) ;
40585: LD_ADDR_VAR 0 4
40589: PUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 437
40599: ST_TO_ADDR
// if not task then
40600: LD_VAR 0 4
40604: NOT
40605: IFFALSE 40609
// exit ;
40607: GO 40651
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_VAR 0 4
40618: PUSH
40619: LD_INT 1
40621: ARRAY
40622: PUSH
40623: LD_INT 1
40625: ARRAY
40626: PUSH
40627: LD_STRING r
40629: EQUAL
40630: PUSH
40631: LD_VAR 0 4
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: PUSH
40640: LD_INT 4
40642: ARRAY
40643: PUSH
40644: LD_VAR 0 2
40648: EQUAL
40649: AND
40650: ST_TO_ADDR
// end ;
40651: LD_VAR 0 3
40655: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40656: LD_INT 0
40658: PPUSH
// SetDir ( unit , d ) ;
40659: LD_VAR 0 1
40663: PPUSH
40664: LD_VAR 0 4
40668: PPUSH
40669: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40673: LD_VAR 0 1
40677: PPUSH
40678: LD_VAR 0 2
40682: PPUSH
40683: LD_VAR 0 3
40687: PPUSH
40688: LD_VAR 0 5
40692: PPUSH
40693: CALL_OW 48
// end ;
40697: LD_VAR 0 6
40701: RET
// export function ToNaturalNumber ( number ) ; begin
40702: LD_INT 0
40704: PPUSH
// result := number div 1 ;
40705: LD_ADDR_VAR 0 2
40709: PUSH
40710: LD_VAR 0 1
40714: PUSH
40715: LD_INT 1
40717: DIV
40718: ST_TO_ADDR
// if number < 0 then
40719: LD_VAR 0 1
40723: PUSH
40724: LD_INT 0
40726: LESS
40727: IFFALSE 40737
// result := 0 ;
40729: LD_ADDR_VAR 0 2
40733: PUSH
40734: LD_INT 0
40736: ST_TO_ADDR
// end ;
40737: LD_VAR 0 2
40741: RET
// export function SortByClass ( units , class ) ; var un ; begin
40742: LD_INT 0
40744: PPUSH
40745: PPUSH
// if not units or not class then
40746: LD_VAR 0 1
40750: NOT
40751: PUSH
40752: LD_VAR 0 2
40756: NOT
40757: OR
40758: IFFALSE 40762
// exit ;
40760: GO 40857
// result := [ ] ;
40762: LD_ADDR_VAR 0 3
40766: PUSH
40767: EMPTY
40768: ST_TO_ADDR
// for un in units do
40769: LD_ADDR_VAR 0 4
40773: PUSH
40774: LD_VAR 0 1
40778: PUSH
40779: FOR_IN
40780: IFFALSE 40855
// if GetClass ( un ) = class then
40782: LD_VAR 0 4
40786: PPUSH
40787: CALL_OW 257
40791: PUSH
40792: LD_VAR 0 2
40796: EQUAL
40797: IFFALSE 40824
// result := Insert ( result , 1 , un ) else
40799: LD_ADDR_VAR 0 3
40803: PUSH
40804: LD_VAR 0 3
40808: PPUSH
40809: LD_INT 1
40811: PPUSH
40812: LD_VAR 0 4
40816: PPUSH
40817: CALL_OW 2
40821: ST_TO_ADDR
40822: GO 40853
// result := Replace ( result , result + 1 , un ) ;
40824: LD_ADDR_VAR 0 3
40828: PUSH
40829: LD_VAR 0 3
40833: PPUSH
40834: LD_VAR 0 3
40838: PUSH
40839: LD_INT 1
40841: PLUS
40842: PPUSH
40843: LD_VAR 0 4
40847: PPUSH
40848: CALL_OW 1
40852: ST_TO_ADDR
40853: GO 40779
40855: POP
40856: POP
// end ;
40857: LD_VAR 0 3
40861: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40862: LD_INT 0
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
// result := [ ] ;
40871: LD_ADDR_VAR 0 4
40875: PUSH
40876: EMPTY
40877: ST_TO_ADDR
// if x - r < 0 then
40878: LD_VAR 0 1
40882: PUSH
40883: LD_VAR 0 3
40887: MINUS
40888: PUSH
40889: LD_INT 0
40891: LESS
40892: IFFALSE 40904
// min_x := 0 else
40894: LD_ADDR_VAR 0 8
40898: PUSH
40899: LD_INT 0
40901: ST_TO_ADDR
40902: GO 40920
// min_x := x - r ;
40904: LD_ADDR_VAR 0 8
40908: PUSH
40909: LD_VAR 0 1
40913: PUSH
40914: LD_VAR 0 3
40918: MINUS
40919: ST_TO_ADDR
// if y - r < 0 then
40920: LD_VAR 0 2
40924: PUSH
40925: LD_VAR 0 3
40929: MINUS
40930: PUSH
40931: LD_INT 0
40933: LESS
40934: IFFALSE 40946
// min_y := 0 else
40936: LD_ADDR_VAR 0 7
40940: PUSH
40941: LD_INT 0
40943: ST_TO_ADDR
40944: GO 40962
// min_y := y - r ;
40946: LD_ADDR_VAR 0 7
40950: PUSH
40951: LD_VAR 0 2
40955: PUSH
40956: LD_VAR 0 3
40960: MINUS
40961: ST_TO_ADDR
// max_x := x + r ;
40962: LD_ADDR_VAR 0 9
40966: PUSH
40967: LD_VAR 0 1
40971: PUSH
40972: LD_VAR 0 3
40976: PLUS
40977: ST_TO_ADDR
// max_y := y + r ;
40978: LD_ADDR_VAR 0 10
40982: PUSH
40983: LD_VAR 0 2
40987: PUSH
40988: LD_VAR 0 3
40992: PLUS
40993: ST_TO_ADDR
// for _x = min_x to max_x do
40994: LD_ADDR_VAR 0 5
40998: PUSH
40999: DOUBLE
41000: LD_VAR 0 8
41004: DEC
41005: ST_TO_ADDR
41006: LD_VAR 0 9
41010: PUSH
41011: FOR_TO
41012: IFFALSE 41113
// for _y = min_y to max_y do
41014: LD_ADDR_VAR 0 6
41018: PUSH
41019: DOUBLE
41020: LD_VAR 0 7
41024: DEC
41025: ST_TO_ADDR
41026: LD_VAR 0 10
41030: PUSH
41031: FOR_TO
41032: IFFALSE 41109
// begin if not ValidHex ( _x , _y ) then
41034: LD_VAR 0 5
41038: PPUSH
41039: LD_VAR 0 6
41043: PPUSH
41044: CALL_OW 488
41048: NOT
41049: IFFALSE 41053
// continue ;
41051: GO 41031
// if GetResourceTypeXY ( _x , _y ) then
41053: LD_VAR 0 5
41057: PPUSH
41058: LD_VAR 0 6
41062: PPUSH
41063: CALL_OW 283
41067: IFFALSE 41107
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41069: LD_ADDR_VAR 0 4
41073: PUSH
41074: LD_VAR 0 4
41078: PPUSH
41079: LD_VAR 0 4
41083: PUSH
41084: LD_INT 1
41086: PLUS
41087: PPUSH
41088: LD_VAR 0 5
41092: PUSH
41093: LD_VAR 0 6
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PPUSH
41102: CALL_OW 1
41106: ST_TO_ADDR
// end ;
41107: GO 41031
41109: POP
41110: POP
41111: GO 41011
41113: POP
41114: POP
// end ;
41115: LD_VAR 0 4
41119: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41120: LD_INT 0
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
41128: PPUSH
41129: PPUSH
// if not units then
41130: LD_VAR 0 1
41134: NOT
41135: IFFALSE 41139
// exit ;
41137: GO 41663
// result := UnitFilter ( units , [ f_ok ] ) ;
41139: LD_ADDR_VAR 0 3
41143: PUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: LD_INT 50
41151: PUSH
41152: EMPTY
41153: LIST
41154: PPUSH
41155: CALL_OW 72
41159: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41160: LD_ADDR_VAR 0 8
41164: PUSH
41165: LD_VAR 0 1
41169: PUSH
41170: LD_INT 1
41172: ARRAY
41173: PPUSH
41174: CALL_OW 255
41178: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41179: LD_ADDR_VAR 0 10
41183: PUSH
41184: LD_INT 29
41186: PUSH
41187: LD_INT 91
41189: PUSH
41190: LD_INT 49
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: ST_TO_ADDR
// if not result then
41198: LD_VAR 0 3
41202: NOT
41203: IFFALSE 41207
// exit ;
41205: GO 41663
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41207: LD_ADDR_VAR 0 5
41211: PUSH
41212: LD_INT 81
41214: PUSH
41215: LD_VAR 0 8
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PPUSH
41224: CALL_OW 69
41228: ST_TO_ADDR
// for i in result do
41229: LD_ADDR_VAR 0 4
41233: PUSH
41234: LD_VAR 0 3
41238: PUSH
41239: FOR_IN
41240: IFFALSE 41661
// begin tag := GetTag ( i ) + 1 ;
41242: LD_ADDR_VAR 0 9
41246: PUSH
41247: LD_VAR 0 4
41251: PPUSH
41252: CALL_OW 110
41256: PUSH
41257: LD_INT 1
41259: PLUS
41260: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41261: LD_ADDR_VAR 0 7
41265: PUSH
41266: LD_VAR 0 4
41270: PPUSH
41271: CALL_OW 250
41275: PPUSH
41276: LD_VAR 0 4
41280: PPUSH
41281: CALL_OW 251
41285: PPUSH
41286: LD_INT 6
41288: PPUSH
41289: CALL 40862 0 3
41293: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41294: LD_VAR 0 4
41298: PPUSH
41299: CALL_OW 247
41303: PUSH
41304: LD_INT 2
41306: EQUAL
41307: PUSH
41308: LD_VAR 0 7
41312: AND
41313: PUSH
41314: LD_VAR 0 4
41318: PPUSH
41319: CALL_OW 264
41323: PUSH
41324: LD_VAR 0 10
41328: IN
41329: NOT
41330: AND
41331: IFFALSE 41370
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41333: LD_VAR 0 4
41337: PPUSH
41338: LD_VAR 0 7
41342: PUSH
41343: LD_INT 1
41345: ARRAY
41346: PUSH
41347: LD_INT 1
41349: ARRAY
41350: PPUSH
41351: LD_VAR 0 7
41355: PUSH
41356: LD_INT 1
41358: ARRAY
41359: PUSH
41360: LD_INT 2
41362: ARRAY
41363: PPUSH
41364: CALL_OW 116
41368: GO 41659
// if path > tag then
41370: LD_VAR 0 2
41374: PUSH
41375: LD_VAR 0 9
41379: GREATER
41380: IFFALSE 41588
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41382: LD_ADDR_VAR 0 6
41386: PUSH
41387: LD_VAR 0 5
41391: PPUSH
41392: LD_INT 91
41394: PUSH
41395: LD_VAR 0 4
41399: PUSH
41400: LD_INT 8
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: LIST
41407: PPUSH
41408: CALL_OW 72
41412: ST_TO_ADDR
// if nearEnemy then
41413: LD_VAR 0 6
41417: IFFALSE 41486
// begin if GetWeapon ( i ) = ru_time_lapser then
41419: LD_VAR 0 4
41423: PPUSH
41424: CALL_OW 264
41428: PUSH
41429: LD_INT 49
41431: EQUAL
41432: IFFALSE 41460
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41434: LD_VAR 0 4
41438: PPUSH
41439: LD_VAR 0 6
41443: PPUSH
41444: LD_VAR 0 4
41448: PPUSH
41449: CALL_OW 74
41453: PPUSH
41454: CALL_OW 112
41458: GO 41484
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41460: LD_VAR 0 4
41464: PPUSH
41465: LD_VAR 0 6
41469: PPUSH
41470: LD_VAR 0 4
41474: PPUSH
41475: CALL_OW 74
41479: PPUSH
41480: CALL_OW 115
// end else
41484: GO 41586
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41486: LD_VAR 0 4
41490: PPUSH
41491: LD_VAR 0 2
41495: PUSH
41496: LD_VAR 0 9
41500: ARRAY
41501: PUSH
41502: LD_INT 1
41504: ARRAY
41505: PPUSH
41506: LD_VAR 0 2
41510: PUSH
41511: LD_VAR 0 9
41515: ARRAY
41516: PUSH
41517: LD_INT 2
41519: ARRAY
41520: PPUSH
41521: CALL_OW 297
41525: PUSH
41526: LD_INT 6
41528: GREATER
41529: IFFALSE 41572
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41531: LD_VAR 0 4
41535: PPUSH
41536: LD_VAR 0 2
41540: PUSH
41541: LD_VAR 0 9
41545: ARRAY
41546: PUSH
41547: LD_INT 1
41549: ARRAY
41550: PPUSH
41551: LD_VAR 0 2
41555: PUSH
41556: LD_VAR 0 9
41560: ARRAY
41561: PUSH
41562: LD_INT 2
41564: ARRAY
41565: PPUSH
41566: CALL_OW 114
41570: GO 41586
// SetTag ( i , tag ) ;
41572: LD_VAR 0 4
41576: PPUSH
41577: LD_VAR 0 9
41581: PPUSH
41582: CALL_OW 109
// end else
41586: GO 41659
// if enemy then
41588: LD_VAR 0 5
41592: IFFALSE 41659
// begin if GetWeapon ( i ) = ru_time_lapser then
41594: LD_VAR 0 4
41598: PPUSH
41599: CALL_OW 264
41603: PUSH
41604: LD_INT 49
41606: EQUAL
41607: IFFALSE 41635
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41609: LD_VAR 0 4
41613: PPUSH
41614: LD_VAR 0 5
41618: PPUSH
41619: LD_VAR 0 4
41623: PPUSH
41624: CALL_OW 74
41628: PPUSH
41629: CALL_OW 112
41633: GO 41659
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41635: LD_VAR 0 4
41639: PPUSH
41640: LD_VAR 0 5
41644: PPUSH
41645: LD_VAR 0 4
41649: PPUSH
41650: CALL_OW 74
41654: PPUSH
41655: CALL_OW 115
// end ; end ;
41659: GO 41239
41661: POP
41662: POP
// end ;
41663: LD_VAR 0 3
41667: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41668: LD_INT 0
41670: PPUSH
41671: PPUSH
41672: PPUSH
// if not unit or IsInUnit ( unit ) then
41673: LD_VAR 0 1
41677: NOT
41678: PUSH
41679: LD_VAR 0 1
41683: PPUSH
41684: CALL_OW 310
41688: OR
41689: IFFALSE 41693
// exit ;
41691: GO 41784
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41693: LD_ADDR_VAR 0 4
41697: PUSH
41698: LD_VAR 0 1
41702: PPUSH
41703: CALL_OW 250
41707: PPUSH
41708: LD_VAR 0 2
41712: PPUSH
41713: LD_INT 1
41715: PPUSH
41716: CALL_OW 272
41720: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41721: LD_ADDR_VAR 0 5
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 251
41735: PPUSH
41736: LD_VAR 0 2
41740: PPUSH
41741: LD_INT 1
41743: PPUSH
41744: CALL_OW 273
41748: ST_TO_ADDR
// if ValidHex ( x , y ) then
41749: LD_VAR 0 4
41753: PPUSH
41754: LD_VAR 0 5
41758: PPUSH
41759: CALL_OW 488
41763: IFFALSE 41784
// ComTurnXY ( unit , x , y ) ;
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_VAR 0 4
41774: PPUSH
41775: LD_VAR 0 5
41779: PPUSH
41780: CALL_OW 118
// end ;
41784: LD_VAR 0 3
41788: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41789: LD_INT 0
41791: PPUSH
41792: PPUSH
// result := false ;
41793: LD_ADDR_VAR 0 3
41797: PUSH
41798: LD_INT 0
41800: ST_TO_ADDR
// if not units then
41801: LD_VAR 0 2
41805: NOT
41806: IFFALSE 41810
// exit ;
41808: GO 41855
// for i in units do
41810: LD_ADDR_VAR 0 4
41814: PUSH
41815: LD_VAR 0 2
41819: PUSH
41820: FOR_IN
41821: IFFALSE 41853
// if See ( side , i ) then
41823: LD_VAR 0 1
41827: PPUSH
41828: LD_VAR 0 4
41832: PPUSH
41833: CALL_OW 292
41837: IFFALSE 41851
// begin result := true ;
41839: LD_ADDR_VAR 0 3
41843: PUSH
41844: LD_INT 1
41846: ST_TO_ADDR
// exit ;
41847: POP
41848: POP
41849: GO 41855
// end ;
41851: GO 41820
41853: POP
41854: POP
// end ;
41855: LD_VAR 0 3
41859: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41860: LD_INT 0
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
// if not unit or not points then
41866: LD_VAR 0 1
41870: NOT
41871: PUSH
41872: LD_VAR 0 2
41876: NOT
41877: OR
41878: IFFALSE 41882
// exit ;
41880: GO 41972
// dist := 99999 ;
41882: LD_ADDR_VAR 0 5
41886: PUSH
41887: LD_INT 99999
41889: ST_TO_ADDR
// for i in points do
41890: LD_ADDR_VAR 0 4
41894: PUSH
41895: LD_VAR 0 2
41899: PUSH
41900: FOR_IN
41901: IFFALSE 41970
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41903: LD_ADDR_VAR 0 6
41907: PUSH
41908: LD_VAR 0 1
41912: PPUSH
41913: LD_VAR 0 4
41917: PUSH
41918: LD_INT 1
41920: ARRAY
41921: PPUSH
41922: LD_VAR 0 4
41926: PUSH
41927: LD_INT 2
41929: ARRAY
41930: PPUSH
41931: CALL_OW 297
41935: ST_TO_ADDR
// if tmpDist < dist then
41936: LD_VAR 0 6
41940: PUSH
41941: LD_VAR 0 5
41945: LESS
41946: IFFALSE 41968
// begin result := i ;
41948: LD_ADDR_VAR 0 3
41952: PUSH
41953: LD_VAR 0 4
41957: ST_TO_ADDR
// dist := tmpDist ;
41958: LD_ADDR_VAR 0 5
41962: PUSH
41963: LD_VAR 0 6
41967: ST_TO_ADDR
// end ; end ;
41968: GO 41900
41970: POP
41971: POP
// end ;
41972: LD_VAR 0 3
41976: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41977: LD_INT 0
41979: PPUSH
// uc_side := side ;
41980: LD_ADDR_OWVAR 20
41984: PUSH
41985: LD_VAR 0 1
41989: ST_TO_ADDR
// uc_nation := 3 ;
41990: LD_ADDR_OWVAR 21
41994: PUSH
41995: LD_INT 3
41997: ST_TO_ADDR
// vc_chassis := 25 ;
41998: LD_ADDR_OWVAR 37
42002: PUSH
42003: LD_INT 25
42005: ST_TO_ADDR
// vc_engine := engine_siberite ;
42006: LD_ADDR_OWVAR 39
42010: PUSH
42011: LD_INT 3
42013: ST_TO_ADDR
// vc_control := control_computer ;
42014: LD_ADDR_OWVAR 38
42018: PUSH
42019: LD_INT 3
42021: ST_TO_ADDR
// vc_weapon := 59 ;
42022: LD_ADDR_OWVAR 40
42026: PUSH
42027: LD_INT 59
42029: ST_TO_ADDR
// result := CreateVehicle ;
42030: LD_ADDR_VAR 0 5
42034: PUSH
42035: CALL_OW 45
42039: ST_TO_ADDR
// SetDir ( result , d ) ;
42040: LD_VAR 0 5
42044: PPUSH
42045: LD_VAR 0 4
42049: PPUSH
42050: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42054: LD_VAR 0 5
42058: PPUSH
42059: LD_VAR 0 2
42063: PPUSH
42064: LD_VAR 0 3
42068: PPUSH
42069: LD_INT 0
42071: PPUSH
42072: CALL_OW 48
// end ;
42076: LD_VAR 0 5
42080: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42081: LD_INT 0
42083: PPUSH
42084: PPUSH
42085: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42086: LD_ADDR_VAR 0 2
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42109: LD_VAR 0 1
42113: NOT
42114: PUSH
42115: LD_VAR 0 1
42119: PPUSH
42120: CALL_OW 264
42124: PUSH
42125: LD_INT 12
42127: PUSH
42128: LD_INT 51
42130: PUSH
42131: LD_INT 32
42133: PUSH
42134: LD_INT 89
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: IN
42143: NOT
42144: OR
42145: IFFALSE 42149
// exit ;
42147: GO 42247
// for i := 1 to 3 do
42149: LD_ADDR_VAR 0 3
42153: PUSH
42154: DOUBLE
42155: LD_INT 1
42157: DEC
42158: ST_TO_ADDR
42159: LD_INT 3
42161: PUSH
42162: FOR_TO
42163: IFFALSE 42245
// begin tmp := GetCargo ( cargo , i ) ;
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: LD_VAR 0 1
42174: PPUSH
42175: LD_VAR 0 3
42179: PPUSH
42180: CALL_OW 289
42184: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42185: LD_ADDR_VAR 0 2
42189: PUSH
42190: LD_VAR 0 2
42194: PPUSH
42195: LD_VAR 0 3
42199: PPUSH
42200: LD_VAR 0 4
42204: PPUSH
42205: CALL_OW 1
42209: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42210: LD_ADDR_VAR 0 2
42214: PUSH
42215: LD_VAR 0 2
42219: PPUSH
42220: LD_INT 4
42222: PPUSH
42223: LD_VAR 0 2
42227: PUSH
42228: LD_INT 4
42230: ARRAY
42231: PUSH
42232: LD_VAR 0 4
42236: PLUS
42237: PPUSH
42238: CALL_OW 1
42242: ST_TO_ADDR
// end ;
42243: GO 42162
42245: POP
42246: POP
// end ;
42247: LD_VAR 0 2
42251: RET
// export function Length ( array ) ; begin
42252: LD_INT 0
42254: PPUSH
// result := array + 0 ;
42255: LD_ADDR_VAR 0 2
42259: PUSH
42260: LD_VAR 0 1
42264: PUSH
42265: LD_INT 0
42267: PLUS
42268: ST_TO_ADDR
// end ;
42269: LD_VAR 0 2
42273: RET
// export function PrepareArray ( array ) ; begin
42274: LD_INT 0
42276: PPUSH
// result := array diff 0 ;
42277: LD_ADDR_VAR 0 2
42281: PUSH
42282: LD_VAR 0 1
42286: PUSH
42287: LD_INT 0
42289: DIFF
42290: ST_TO_ADDR
// if not result [ 1 ] then
42291: LD_VAR 0 2
42295: PUSH
42296: LD_INT 1
42298: ARRAY
42299: NOT
42300: IFFALSE 42320
// result := Delete ( result , 1 ) ;
42302: LD_ADDR_VAR 0 2
42306: PUSH
42307: LD_VAR 0 2
42311: PPUSH
42312: LD_INT 1
42314: PPUSH
42315: CALL_OW 3
42319: ST_TO_ADDR
// end ; end_of_file
42320: LD_VAR 0 2
42324: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
42325: LD_INT 0
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
// ecoStartPoint := startPoint ;
42334: LD_ADDR_EXP 6
42338: PUSH
42339: LD_VAR 0 1
42343: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42344: LD_EXP 6
42348: PUSH
42349: LD_INT 1
42351: ARRAY
42352: PPUSH
42353: LD_EXP 6
42357: PUSH
42358: LD_INT 2
42360: ARRAY
42361: PPUSH
42362: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
42366: LD_ADDR_EXP 8
42370: PUSH
42371: LD_VAR 0 2
42375: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
42376: LD_ADDR_EXP 12
42380: PUSH
42381: LD_VAR 0 3
42385: ST_TO_ADDR
// if debug then
42386: LD_EXP 1
42390: IFFALSE 42434
// begin side := 1 ;
42392: LD_ADDR_VAR 0 7
42396: PUSH
42397: LD_INT 1
42399: ST_TO_ADDR
// nation := 1 ;
42400: LD_ADDR_VAR 0 8
42404: PUSH
42405: LD_INT 1
42407: ST_TO_ADDR
// peopleAmount := 15 ;
42408: LD_ADDR_VAR 0 9
42412: PUSH
42413: LD_INT 15
42415: ST_TO_ADDR
// resourcesAmount := 2 ;
42416: LD_ADDR_VAR 0 10
42420: PUSH
42421: LD_INT 2
42423: ST_TO_ADDR
// ecoCratesDrop := 3 ;
42424: LD_ADDR_EXP 7
42428: PUSH
42429: LD_INT 3
42431: ST_TO_ADDR
// end else
42432: GO 42530
// begin side := GetMultiplayerSetting ( 0 ) ;
42434: LD_ADDR_VAR 0 7
42438: PUSH
42439: LD_INT 0
42441: PPUSH
42442: CALL_OW 426
42446: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
42447: LD_ADDR_VAR 0 8
42451: PUSH
42452: LD_INT 1
42454: PPUSH
42455: CALL_OW 426
42459: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
42460: LD_ADDR_VAR 0 9
42464: PUSH
42465: LD_INT 6
42467: PUSH
42468: LD_INT 9
42470: PUSH
42471: LD_INT 12
42473: PUSH
42474: LD_INT 15
42476: PUSH
42477: LD_INT 18
42479: PUSH
42480: LD_INT 21
42482: PUSH
42483: LD_INT 24
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PPUSH
42498: CALL_OW 426
42502: ARRAY
42503: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
42504: LD_ADDR_VAR 0 10
42508: PUSH
42509: LD_INT 3
42511: PPUSH
42512: CALL_OW 426
42516: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
42517: LD_ADDR_EXP 7
42521: PUSH
42522: LD_INT 4
42524: PPUSH
42525: CALL_OW 426
42529: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
42530: LD_ADDR_EXP 9
42534: PUSH
42535: LD_INT 1
42537: ST_TO_ADDR
// ecoEventsAllow := false ;
42538: LD_ADDR_EXP 11
42542: PUSH
42543: LD_INT 0
42545: ST_TO_ADDR
// ecoAttacksAllow := false ;
42546: LD_ADDR_EXP 10
42550: PUSH
42551: LD_INT 0
42553: ST_TO_ADDR
// ecoSide := side ;
42554: LD_ADDR_EXP 3
42558: PUSH
42559: LD_VAR 0 7
42563: ST_TO_ADDR
// your_side := side ;
42564: LD_ADDR_OWVAR 2
42568: PUSH
42569: LD_VAR 0 7
42573: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
42574: LD_INT 1
42576: PPUSH
42577: LD_VAR 0 7
42581: PPUSH
42582: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
42586: LD_INT 1
42588: PPUSH
42589: LD_INT 1
42591: PPUSH
42592: LD_VAR 0 7
42596: PPUSH
42597: LD_INT 32793
42599: NEG
42600: PPUSH
42601: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
42605: LD_INT 1
42607: PPUSH
42608: LD_INT 1
42610: PPUSH
42611: LD_VAR 0 7
42615: PPUSH
42616: CALL_OW 331
// ecoNation := nation ;
42620: LD_ADDR_EXP 4
42624: PUSH
42625: LD_VAR 0 8
42629: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
42630: LD_ADDR_EXP 5
42634: PUSH
42635: LD_VAR 0 9
42639: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
42640: LD_ADDR_VAR 0 5
42644: PUSH
42645: DOUBLE
42646: LD_INT 1
42648: DEC
42649: ST_TO_ADDR
42650: LD_VAR 0 10
42654: PUSH
42655: LD_INT 5
42657: MUL
42658: PUSH
42659: FOR_TO
42660: IFFALSE 42698
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
42662: LD_INT 1
42664: PPUSH
42665: LD_INT 5
42667: PPUSH
42668: LD_EXP 6
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: PPUSH
42677: LD_EXP 6
42681: PUSH
42682: LD_INT 2
42684: ARRAY
42685: PPUSH
42686: LD_INT 6
42688: PPUSH
42689: LD_INT 0
42691: PPUSH
42692: CALL_OW 60
42696: GO 42659
42698: POP
42699: POP
// uc_side := side ;
42700: LD_ADDR_OWVAR 20
42704: PUSH
42705: LD_VAR 0 7
42709: ST_TO_ADDR
// uc_nation := nation ;
42710: LD_ADDR_OWVAR 21
42714: PUSH
42715: LD_VAR 0 8
42719: ST_TO_ADDR
// hc_importance := 100 ;
42720: LD_ADDR_OWVAR 32
42724: PUSH
42725: LD_INT 100
42727: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
42728: LD_INT 0
42730: PPUSH
42731: LD_INT 1
42733: PPUSH
42734: LD_INT 4
42736: PPUSH
42737: CALL_OW 380
// if side = 1 and nation = 1 then
42741: LD_VAR 0 7
42745: PUSH
42746: LD_INT 1
42748: EQUAL
42749: PUSH
42750: LD_VAR 0 8
42754: PUSH
42755: LD_INT 1
42757: EQUAL
42758: AND
42759: IFFALSE 42793
// begin hc_name := John Macmilan ;
42761: LD_ADDR_OWVAR 26
42765: PUSH
42766: LD_STRING John Macmilan
42768: ST_TO_ADDR
// hc_gallery := us ;
42769: LD_ADDR_OWVAR 33
42773: PUSH
42774: LD_STRING us
42776: ST_TO_ADDR
// hc_face_number := 5 ;
42777: LD_ADDR_OWVAR 34
42781: PUSH
42782: LD_INT 5
42784: ST_TO_ADDR
// hc_sex := sex_male ;
42785: LD_ADDR_OWVAR 27
42789: PUSH
42790: LD_INT 1
42792: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
42793: LD_VAR 0 7
42797: PUSH
42798: LD_INT 2
42800: EQUAL
42801: PUSH
42802: LD_VAR 0 8
42806: PUSH
42807: LD_INT 2
42809: EQUAL
42810: AND
42811: IFFALSE 42845
// begin hc_name := Heike Steyer ;
42813: LD_ADDR_OWVAR 26
42817: PUSH
42818: LD_STRING Heike Steyer
42820: ST_TO_ADDR
// hc_gallery := sandar ;
42821: LD_ADDR_OWVAR 33
42825: PUSH
42826: LD_STRING sandar
42828: ST_TO_ADDR
// hc_face_number := 14 ;
42829: LD_ADDR_OWVAR 34
42833: PUSH
42834: LD_INT 14
42836: ST_TO_ADDR
// hc_sex := sex_female ;
42837: LD_ADDR_OWVAR 27
42841: PUSH
42842: LD_INT 2
42844: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
42845: LD_VAR 0 7
42849: PUSH
42850: LD_INT 6
42852: EQUAL
42853: PUSH
42854: LD_VAR 0 8
42858: PUSH
42859: LD_INT 3
42861: EQUAL
42862: AND
42863: IFFALSE 42910
// begin PrepareHuman ( false , 3 , 4 ) ;
42865: LD_INT 0
42867: PPUSH
42868: LD_INT 3
42870: PPUSH
42871: LD_INT 4
42873: PPUSH
42874: CALL_OW 380
// hc_name := Yuri I. Burlak ;
42878: LD_ADDR_OWVAR 26
42882: PUSH
42883: LD_STRING Yuri I. Burlak
42885: ST_TO_ADDR
// hc_gallery := ru ;
42886: LD_ADDR_OWVAR 33
42890: PUSH
42891: LD_STRING ru
42893: ST_TO_ADDR
// hc_face_number := 1 ;
42894: LD_ADDR_OWVAR 34
42898: PUSH
42899: LD_INT 1
42901: ST_TO_ADDR
// hc_sex := sex_male ;
42902: LD_ADDR_OWVAR 27
42906: PUSH
42907: LD_INT 1
42909: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
42910: LD_VAR 0 7
42914: PUSH
42915: LD_INT 4
42917: EQUAL
42918: PUSH
42919: LD_VAR 0 8
42923: PUSH
42924: LD_INT 1
42926: EQUAL
42927: AND
42928: IFFALSE 42962
// begin hc_name := Arthur Powell ;
42930: LD_ADDR_OWVAR 26
42934: PUSH
42935: LD_STRING Arthur Powell
42937: ST_TO_ADDR
// hc_gallery := us ;
42938: LD_ADDR_OWVAR 33
42942: PUSH
42943: LD_STRING us
42945: ST_TO_ADDR
// hc_face_number := 7 ;
42946: LD_ADDR_OWVAR 34
42950: PUSH
42951: LD_INT 7
42953: ST_TO_ADDR
// hc_sex := sex_male ;
42954: LD_ADDR_OWVAR 27
42958: PUSH
42959: LD_INT 1
42961: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
42962: LD_VAR 0 7
42966: PUSH
42967: LD_INT 3
42969: EQUAL
42970: PUSH
42971: LD_VAR 0 8
42975: PUSH
42976: LD_INT 3
42978: EQUAL
42979: AND
42980: IFFALSE 43014
// begin hc_name := Mjr. Platonov ;
42982: LD_ADDR_OWVAR 26
42986: PUSH
42987: LD_STRING Mjr. Platonov
42989: ST_TO_ADDR
// hc_gallery := ru ;
42990: LD_ADDR_OWVAR 33
42994: PUSH
42995: LD_STRING ru
42997: ST_TO_ADDR
// hc_face_number := 60 ;
42998: LD_ADDR_OWVAR 34
43002: PUSH
43003: LD_INT 60
43005: ST_TO_ADDR
// hc_sex := sex_male ;
43006: LD_ADDR_OWVAR 27
43010: PUSH
43011: LD_INT 1
43013: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
43014: LD_VAR 0 7
43018: PUSH
43019: LD_INT 7
43021: EQUAL
43022: PUSH
43023: LD_VAR 0 8
43027: PUSH
43028: LD_INT 1
43030: EQUAL
43031: AND
43032: IFFALSE 43079
// begin PrepareHuman ( false , 4 , 4 ) ;
43034: LD_INT 0
43036: PPUSH
43037: LD_INT 4
43039: PPUSH
43040: LD_INT 4
43042: PPUSH
43043: CALL_OW 380
// hc_name := Peter Roth ;
43047: LD_ADDR_OWVAR 26
43051: PUSH
43052: LD_STRING Peter Roth
43054: ST_TO_ADDR
// hc_gallery := us ;
43055: LD_ADDR_OWVAR 33
43059: PUSH
43060: LD_STRING us
43062: ST_TO_ADDR
// hc_face_number := 22 ;
43063: LD_ADDR_OWVAR 34
43067: PUSH
43068: LD_INT 22
43070: ST_TO_ADDR
// hc_sex := sex_male ;
43071: LD_ADDR_OWVAR 27
43075: PUSH
43076: LD_INT 1
43078: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
43079: LD_VAR 0 7
43083: PUSH
43084: LD_INT 7
43086: EQUAL
43087: PUSH
43088: LD_VAR 0 8
43092: PUSH
43093: LD_INT 3
43095: EQUAL
43096: AND
43097: IFFALSE 43144
// begin PrepareHuman ( false , 4 , 4 ) ;
43099: LD_INT 0
43101: PPUSH
43102: LD_INT 4
43104: PPUSH
43105: LD_INT 4
43107: PPUSH
43108: CALL_OW 380
// hc_name := Prof. Gossudarov ;
43112: LD_ADDR_OWVAR 26
43116: PUSH
43117: LD_STRING Prof. Gossudarov
43119: ST_TO_ADDR
// hc_gallery := ru ;
43120: LD_ADDR_OWVAR 33
43124: PUSH
43125: LD_STRING ru
43127: ST_TO_ADDR
// hc_face_number := 61 ;
43128: LD_ADDR_OWVAR 34
43132: PUSH
43133: LD_INT 61
43135: ST_TO_ADDR
// hc_sex := sex_male ;
43136: LD_ADDR_OWVAR 27
43140: PUSH
43141: LD_INT 1
43143: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
43144: LD_VAR 0 7
43148: PUSH
43149: LD_INT 8
43151: EQUAL
43152: PUSH
43153: LD_VAR 0 8
43157: PUSH
43158: LD_INT 1
43160: EQUAL
43161: AND
43162: IFFALSE 43196
// begin hc_name := Ron Harisson ;
43164: LD_ADDR_OWVAR 26
43168: PUSH
43169: LD_STRING Ron Harisson
43171: ST_TO_ADDR
// hc_gallery := us ;
43172: LD_ADDR_OWVAR 33
43176: PUSH
43177: LD_STRING us
43179: ST_TO_ADDR
// hc_face_number := 6 ;
43180: LD_ADDR_OWVAR 34
43184: PUSH
43185: LD_INT 6
43187: ST_TO_ADDR
// hc_sex := sex_male ;
43188: LD_ADDR_OWVAR 27
43192: PUSH
43193: LD_INT 1
43195: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
43196: LD_VAR 0 7
43200: PUSH
43201: LD_INT 8
43203: EQUAL
43204: PUSH
43205: LD_VAR 0 8
43209: PUSH
43210: LD_INT 2
43212: EQUAL
43213: AND
43214: IFFALSE 43248
// begin hc_name := Louis Schulz ;
43216: LD_ADDR_OWVAR 26
43220: PUSH
43221: LD_STRING Louis Schulz
43223: ST_TO_ADDR
// hc_gallery := sandar ;
43224: LD_ADDR_OWVAR 33
43228: PUSH
43229: LD_STRING sandar
43231: ST_TO_ADDR
// hc_face_number := 1 ;
43232: LD_ADDR_OWVAR 34
43236: PUSH
43237: LD_INT 1
43239: ST_TO_ADDR
// hc_sex := sex_male ;
43240: LD_ADDR_OWVAR 27
43244: PUSH
43245: LD_INT 1
43247: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43248: CALL_OW 44
43252: PPUSH
43253: LD_EXP 6
43257: PUSH
43258: LD_INT 1
43260: ARRAY
43261: PPUSH
43262: LD_EXP 6
43266: PUSH
43267: LD_INT 2
43269: ARRAY
43270: PPUSH
43271: LD_INT 12
43273: PPUSH
43274: LD_INT 0
43276: PPUSH
43277: CALL_OW 50
// InitHc_All ( ) ;
43281: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
43285: LD_ADDR_VAR 0 5
43289: PUSH
43290: DOUBLE
43291: LD_INT 1
43293: DEC
43294: ST_TO_ADDR
43295: LD_VAR 0 9
43299: PUSH
43300: LD_INT 1
43302: MINUS
43303: PUSH
43304: FOR_TO
43305: IFFALSE 43400
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
43307: LD_INT 0
43309: PPUSH
43310: LD_VAR 0 5
43314: PUSH
43315: LD_INT 4
43317: MOD
43318: PUSH
43319: LD_INT 1
43321: PLUS
43322: PPUSH
43323: LD_INT 3
43325: PPUSH
43326: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
43330: LD_ADDR_VAR 0 6
43334: PUSH
43335: LD_VAR 0 6
43339: PPUSH
43340: LD_VAR 0 6
43344: PUSH
43345: LD_INT 1
43347: PLUS
43348: PPUSH
43349: CALL_OW 44
43353: PPUSH
43354: CALL_OW 1
43358: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43359: LD_VAR 0 6
43363: PUSH
43364: LD_VAR 0 6
43368: ARRAY
43369: PPUSH
43370: LD_EXP 6
43374: PUSH
43375: LD_INT 1
43377: ARRAY
43378: PPUSH
43379: LD_EXP 6
43383: PUSH
43384: LD_INT 2
43386: ARRAY
43387: PPUSH
43388: LD_INT 12
43390: PPUSH
43391: LD_INT 0
43393: PPUSH
43394: CALL_OW 50
// end ;
43398: GO 43304
43400: POP
43401: POP
// end ;
43402: LD_VAR 0 4
43406: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
43407: LD_EXP 7
43411: PUSH
43412: LD_EXP 8
43416: AND
43417: IFFALSE 43587
43419: GO 43421
43421: DISABLE
43422: LD_INT 0
43424: PPUSH
43425: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43426: LD_ADDR_VAR 0 1
43430: PUSH
43431: LD_INT 700
43433: PUSH
43434: LD_INT 350
43436: PUSH
43437: LD_INT 175
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: PUSH
43445: LD_EXP 7
43449: ARRAY
43450: ST_TO_ADDR
// while true do
43451: LD_INT 1
43453: IFFALSE 43587
// begin wait ( time ) ;
43455: LD_VAR 0 1
43459: PPUSH
43460: CALL_OW 67
// if not ecoCratesDropAllow then
43464: LD_EXP 9
43468: NOT
43469: IFFALSE 43473
// continue ;
43471: GO 43451
// time := time + 0 0$2 ;
43473: LD_ADDR_VAR 0 1
43477: PUSH
43478: LD_VAR 0 1
43482: PUSH
43483: LD_INT 70
43485: PLUS
43486: ST_TO_ADDR
// if time > 0 0$40 then
43487: LD_VAR 0 1
43491: PUSH
43492: LD_INT 1400
43494: GREATER
43495: IFFALSE 43522
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43497: LD_ADDR_VAR 0 1
43501: PUSH
43502: LD_INT 700
43504: PUSH
43505: LD_INT 350
43507: PUSH
43508: LD_INT 175
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: LIST
43515: PUSH
43516: LD_EXP 7
43520: ARRAY
43521: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
43522: LD_ADDR_VAR 0 2
43526: PUSH
43527: LD_EXP 8
43531: PUSH
43532: LD_INT 1
43534: PPUSH
43535: LD_EXP 8
43539: PPUSH
43540: CALL_OW 12
43544: ARRAY
43545: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
43546: LD_INT 1
43548: PPUSH
43549: LD_INT 5
43551: PPUSH
43552: CALL_OW 12
43556: PPUSH
43557: LD_VAR 0 2
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: PPUSH
43566: LD_VAR 0 2
43570: PUSH
43571: LD_INT 2
43573: ARRAY
43574: PPUSH
43575: LD_INT 14
43577: PPUSH
43578: LD_INT 1
43580: PPUSH
43581: CALL_OW 56
// end ;
43585: GO 43451
// end ;
43587: PPOPN 2
43589: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
43590: LD_EXP 12
43594: PUSH
43595: LD_EXP 10
43599: AND
43600: IFFALSE 44364
43602: GO 43604
43604: DISABLE
43605: LD_INT 0
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
// begin time := 3 3$00 ;
43616: LD_ADDR_VAR 0 1
43620: PUSH
43621: LD_INT 6300
43623: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
43624: LD_ADDR_VAR 0 8
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: LD_INT 9
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PPUSH
43642: LD_INT 2
43644: PPUSH
43645: CALL_OW 12
43649: ARRAY
43650: ST_TO_ADDR
// waveBonus := 0 ;
43651: LD_ADDR_VAR 0 9
43655: PUSH
43656: LD_INT 0
43658: ST_TO_ADDR
// if ecoSide = enemySide then
43659: LD_EXP 3
43663: PUSH
43664: LD_VAR 0 8
43668: EQUAL
43669: IFFALSE 43679
// enemySide := 1 ;
43671: LD_ADDR_VAR 0 8
43675: PUSH
43676: LD_INT 1
43678: ST_TO_ADDR
// while true do
43679: LD_INT 1
43681: IFFALSE 44364
// begin wait ( time ) ;
43683: LD_VAR 0 1
43687: PPUSH
43688: CALL_OW 67
// if not ecoAttacksAllow then
43692: LD_EXP 10
43696: NOT
43697: IFFALSE 43701
// continue ;
43699: GO 43679
// waveBonus := waveBonus + 2 ;
43701: LD_ADDR_VAR 0 9
43705: PUSH
43706: LD_VAR 0 9
43710: PUSH
43711: LD_INT 2
43713: PLUS
43714: ST_TO_ADDR
// if waveBonus > 20 then
43715: LD_VAR 0 9
43719: PUSH
43720: LD_INT 20
43722: GREATER
43723: IFFALSE 43733
// waveBonus := 20 ;
43725: LD_ADDR_VAR 0 9
43729: PUSH
43730: LD_INT 20
43732: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
43733: LD_ADDR_VAR 0 2
43737: PUSH
43738: LD_EXP 12
43742: PUSH
43743: LD_INT 1
43745: PPUSH
43746: LD_EXP 12
43750: PPUSH
43751: CALL_OW 12
43755: ARRAY
43756: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
43757: LD_ADDR_VAR 0 3
43761: PUSH
43762: LD_VAR 0 2
43766: PPUSH
43767: LD_INT 0
43769: PPUSH
43770: CALL_OW 517
43774: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
43775: LD_ADDR_VAR 0 7
43779: PUSH
43780: LD_VAR 0 3
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: PUSH
43789: LD_INT 1
43791: ARRAY
43792: PPUSH
43793: LD_VAR 0 3
43797: PUSH
43798: LD_INT 2
43800: ARRAY
43801: PUSH
43802: LD_INT 1
43804: ARRAY
43805: PPUSH
43806: LD_EXP 6
43810: PUSH
43811: LD_INT 1
43813: ARRAY
43814: PPUSH
43815: LD_EXP 6
43819: PUSH
43820: LD_INT 2
43822: ARRAY
43823: PPUSH
43824: CALL 39921 0 4
43828: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
43829: LD_ADDR_VAR 0 5
43833: PUSH
43834: LD_VAR 0 3
43838: PUSH
43839: LD_INT 1
43841: ARRAY
43842: PUSH
43843: LD_INT 1
43845: ARRAY
43846: PPUSH
43847: LD_VAR 0 3
43851: PUSH
43852: LD_INT 2
43854: ARRAY
43855: PUSH
43856: LD_INT 1
43858: ARRAY
43859: PPUSH
43860: LD_EXP 6
43864: PUSH
43865: LD_INT 1
43867: ARRAY
43868: PPUSH
43869: LD_EXP 6
43873: PUSH
43874: LD_INT 2
43876: ARRAY
43877: PPUSH
43878: CALL 39061 0 4
43882: ST_TO_ADDR
// tmp := [ ] ;
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: EMPTY
43889: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
43890: LD_ADDR_VAR 0 4
43894: PUSH
43895: DOUBLE
43896: LD_INT 1
43898: DEC
43899: ST_TO_ADDR
43900: LD_INT 6
43902: PUSH
43903: LD_VAR 0 9
43907: PLUS
43908: PUSH
43909: FOR_TO
43910: IFFALSE 44229
// begin uc_side := enemySide ;
43912: LD_ADDR_OWVAR 20
43916: PUSH
43917: LD_VAR 0 8
43921: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
43922: LD_ADDR_OWVAR 21
43926: PUSH
43927: LD_INT 1
43929: PPUSH
43930: LD_INT 3
43932: PPUSH
43933: CALL_OW 12
43937: ST_TO_ADDR
// case uc_nation of 1 :
43938: LD_OWVAR 21
43942: PUSH
43943: LD_INT 1
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 43951
43949: GO 43992
43951: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
43952: LD_INT 5
43954: PPUSH
43955: LD_INT 3
43957: PPUSH
43958: LD_INT 3
43960: PPUSH
43961: LD_INT 6
43963: PUSH
43964: LD_INT 7
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: PPUSH
43974: LD_INT 2
43976: PPUSH
43977: CALL_OW 12
43981: ARRAY
43982: PPUSH
43983: LD_INT 100
43985: PPUSH
43986: CALL 6155 0 5
43990: GO 44095
43992: LD_INT 2
43994: DOUBLE
43995: EQUAL
43996: IFTRUE 44000
43998: GO 44045
44000: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
44001: LD_INT 14
44003: PPUSH
44004: LD_INT 3
44006: PPUSH
44007: LD_INT 5
44009: PPUSH
44010: LD_INT 27
44012: PUSH
44013: LD_INT 28
44015: PUSH
44016: LD_INT 29
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PPUSH
44027: LD_INT 3
44029: PPUSH
44030: CALL_OW 12
44034: ARRAY
44035: PPUSH
44036: LD_INT 100
44038: PPUSH
44039: CALL 6155 0 5
44043: GO 44095
44045: LD_INT 3
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 44094
44053: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
44054: LD_INT 24
44056: PPUSH
44057: LD_INT 3
44059: PPUSH
44060: LD_INT 3
44062: PPUSH
44063: LD_INT 46
44065: PUSH
44066: LD_INT 47
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PPUSH
44076: LD_INT 2
44078: PPUSH
44079: CALL_OW 12
44083: ARRAY
44084: PPUSH
44085: LD_INT 100
44087: PPUSH
44088: CALL 6155 0 5
44092: GO 44095
44094: POP
// veh := CreateVehicle ;
44095: LD_ADDR_VAR 0 6
44099: PUSH
44100: CALL_OW 45
44104: ST_TO_ADDR
// SetDir ( veh , dir ) ;
44105: LD_VAR 0 6
44109: PPUSH
44110: LD_VAR 0 7
44114: PPUSH
44115: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
44119: LD_VAR 0 6
44123: PPUSH
44124: LD_VAR 0 2
44128: PPUSH
44129: LD_INT 0
44131: PPUSH
44132: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
44136: LD_ADDR_VAR 0 3
44140: PUSH
44141: LD_VAR 0 3
44145: PPUSH
44146: LD_VAR 0 3
44150: PUSH
44151: LD_INT 1
44153: PLUS
44154: PPUSH
44155: LD_VAR 0 6
44159: PPUSH
44160: CALL_OW 1
44164: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
44165: LD_VAR 0 5
44169: PUSH
44170: LD_INT 1
44172: ARRAY
44173: PPUSH
44174: LD_VAR 0 5
44178: PUSH
44179: LD_INT 2
44181: ARRAY
44182: PPUSH
44183: CALL_OW 428
44187: PUSH
44188: LD_INT 0
44190: EQUAL
44191: IFFALSE 44220
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
44193: LD_VAR 0 6
44197: PPUSH
44198: LD_VAR 0 5
44202: PUSH
44203: LD_INT 1
44205: ARRAY
44206: PPUSH
44207: LD_VAR 0 5
44211: PUSH
44212: LD_INT 2
44214: ARRAY
44215: PPUSH
44216: CALL_OW 111
// wait ( 0 0$0.5 ) ;
44220: LD_INT 18
44222: PPUSH
44223: CALL_OW 67
// end ;
44227: GO 43909
44229: POP
44230: POP
// if tmp then
44231: LD_VAR 0 3
44235: IFFALSE 44362
// begin repeat wait ( 0 0$2 ) ;
44237: LD_INT 70
44239: PPUSH
44240: CALL_OW 67
// for i in tmp do
44244: LD_ADDR_VAR 0 4
44248: PUSH
44249: LD_VAR 0 3
44253: PUSH
44254: FOR_IN
44255: IFFALSE 44353
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
44257: LD_VAR 0 4
44261: PPUSH
44262: CALL_OW 301
44266: PUSH
44267: LD_VAR 0 4
44271: PPUSH
44272: CALL_OW 305
44276: NOT
44277: OR
44278: PUSH
44279: LD_VAR 0 4
44283: PPUSH
44284: CALL_OW 255
44288: PUSH
44289: LD_VAR 0 8
44293: NONEQUAL
44294: OR
44295: IFFALSE 44315
// tmp := tmp diff i else
44297: LD_ADDR_VAR 0 3
44301: PUSH
44302: LD_VAR 0 3
44306: PUSH
44307: LD_VAR 0 4
44311: DIFF
44312: ST_TO_ADDR
44313: GO 44351
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
44315: LD_VAR 0 4
44319: PPUSH
44320: LD_INT 22
44322: PUSH
44323: LD_EXP 3
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PPUSH
44332: CALL_OW 69
44336: PPUSH
44337: LD_VAR 0 4
44341: PPUSH
44342: CALL_OW 74
44346: PPUSH
44347: CALL_OW 115
// end ;
44351: GO 44254
44353: POP
44354: POP
// until not tmp ;
44355: LD_VAR 0 3
44359: NOT
44360: IFFALSE 44237
// end ; end ;
44362: GO 43679
// end ;
44364: PPOPN 9
44366: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
44367: LD_EXP 11
44371: IFFALSE 44424
44373: GO 44375
44375: DISABLE
44376: LD_INT 0
44378: PPUSH
44379: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
44380: LD_ADDR_VAR 0 1
44384: PUSH
44385: LD_INT 2100
44387: PPUSH
44388: LD_INT 21000
44390: PPUSH
44391: CALL_OW 12
44395: ST_TO_ADDR
// while true do
44396: LD_INT 1
44398: IFFALSE 44424
// begin wait ( time ) ;
44400: LD_VAR 0 1
44404: PPUSH
44405: CALL_OW 67
// if not ecoEventsAllow then
44409: LD_EXP 11
44413: NOT
44414: IFFALSE 44418
// continue ;
44416: GO 44396
// EcoEvent ( ) ;
44418: CALL 44427 0 0
// end ;
44422: GO 44396
// end ;
44424: PPOPN 2
44426: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
44427: LD_INT 0
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
// event := rand ( 1 , 5 ) ;
44433: LD_ADDR_VAR 0 2
44437: PUSH
44438: LD_INT 1
44440: PPUSH
44441: LD_INT 5
44443: PPUSH
44444: CALL_OW 12
44448: ST_TO_ADDR
// case event of 1 :
44449: LD_VAR 0 2
44453: PUSH
44454: LD_INT 1
44456: DOUBLE
44457: EQUAL
44458: IFTRUE 44462
44460: GO 44548
44462: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44463: LD_ADDR_VAR 0 3
44467: PUSH
44468: LD_INT 21
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PPUSH
44478: CALL_OW 69
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 30
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 30
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: LIST
44510: PPUSH
44511: CALL_OW 69
44515: DIFF
44516: ST_TO_ADDR
// if tmp then
44517: LD_VAR 0 3
44521: IFFALSE 44546
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44523: LD_VAR 0 3
44527: PUSH
44528: LD_INT 1
44530: PPUSH
44531: LD_VAR 0 3
44535: PPUSH
44536: CALL_OW 12
44540: ARRAY
44541: PPUSH
44542: CALL_OW 65
// end ; 2 :
44546: GO 44747
44548: LD_INT 2
44550: DOUBLE
44551: EQUAL
44552: IFTRUE 44556
44554: GO 44612
44556: POP
// begin uc_side := ecoSide ;
44557: LD_ADDR_OWVAR 20
44561: PUSH
44562: LD_EXP 3
44566: ST_TO_ADDR
// uc_nation := ecoNation ;
44567: LD_ADDR_OWVAR 21
44571: PUSH
44572: LD_EXP 4
44576: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
44577: LD_INT 0
44579: PPUSH
44580: LD_INT 1
44582: PPUSH
44583: LD_INT 4
44585: PPUSH
44586: CALL_OW 12
44590: PPUSH
44591: LD_INT 8
44593: PPUSH
44594: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
44598: CALL_OW 44
44602: PPUSH
44603: LD_INT 1
44605: PPUSH
44606: CALL_OW 51
// end ; 3 :
44610: GO 44747
44612: LD_INT 3
44614: DOUBLE
44615: EQUAL
44616: IFTRUE 44620
44618: GO 44672
44620: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_INT 21
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PPUSH
44636: CALL_OW 69
44640: ST_TO_ADDR
// if tmp then
44641: LD_VAR 0 3
44645: IFFALSE 44670
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44647: LD_VAR 0 3
44651: PUSH
44652: LD_INT 1
44654: PPUSH
44655: LD_VAR 0 3
44659: PPUSH
44660: CALL_OW 12
44664: ARRAY
44665: PPUSH
44666: CALL_OW 65
// end ; 4 :
44670: GO 44747
44672: LD_INT 4
44674: DOUBLE
44675: EQUAL
44676: IFTRUE 44680
44678: GO 44735
44680: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
44681: LD_ADDR_VAR 0 3
44685: PUSH
44686: LD_INT 21
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PPUSH
44696: CALL_OW 69
44700: ST_TO_ADDR
// if tmp then
44701: LD_VAR 0 3
44705: IFFALSE 44733
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
44707: LD_VAR 0 3
44711: PUSH
44712: LD_INT 1
44714: PPUSH
44715: LD_VAR 0 3
44719: PPUSH
44720: CALL_OW 12
44724: ARRAY
44725: PPUSH
44726: LD_INT 190
44728: PPUSH
44729: CALL_OW 234
// end ; 5 :
44733: GO 44747
44735: LD_INT 5
44737: DOUBLE
44738: EQUAL
44739: IFTRUE 44743
44741: GO 44746
44743: POP
// begin end ; end ;
44744: GO 44747
44746: POP
// end ;
44747: LD_VAR 0 1
44751: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
44752: LD_INT 0
44754: PPUSH
44755: PPUSH
// for i := 1 to 100 do
44756: LD_ADDR_VAR 0 2
44760: PUSH
44761: DOUBLE
44762: LD_INT 1
44764: DEC
44765: ST_TO_ADDR
44766: LD_INT 100
44768: PUSH
44769: FOR_TO
44770: IFFALSE 44791
// SetTech ( i , ecoSide , state_researched ) ;
44772: LD_VAR 0 2
44776: PPUSH
44777: LD_EXP 3
44781: PPUSH
44782: LD_INT 2
44784: PPUSH
44785: CALL_OW 322
44789: GO 44769
44791: POP
44792: POP
// end ;
44793: LD_VAR 0 1
44797: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
44798: LD_VAR 0 2
44802: PUSH
44803: LD_INT 102
44805: EQUAL
44806: IFFALSE 44998
// begin case p3 of 1 :
44808: LD_VAR 0 3
44812: PUSH
44813: LD_INT 1
44815: DOUBLE
44816: EQUAL
44817: IFTRUE 44821
44819: GO 44839
44821: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
44822: LD_ADDR_EXP 11
44826: PUSH
44827: LD_EXP 11
44831: PPUSH
44832: CALL 39858 0 1
44836: ST_TO_ADDR
44837: GO 44996
44839: LD_INT 2
44841: DOUBLE
44842: EQUAL
44843: IFTRUE 44847
44845: GO 44865
44847: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
44848: LD_ADDR_EXP 10
44852: PUSH
44853: LD_EXP 10
44857: PPUSH
44858: CALL 39858 0 1
44862: ST_TO_ADDR
44863: GO 44996
44865: LD_INT 3
44867: DOUBLE
44868: EQUAL
44869: IFTRUE 44873
44871: GO 44891
44873: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
44874: LD_ADDR_EXP 9
44878: PUSH
44879: LD_EXP 9
44883: PPUSH
44884: CALL 39858 0 1
44888: ST_TO_ADDR
44889: GO 44996
44891: LD_INT 4
44893: DOUBLE
44894: EQUAL
44895: IFTRUE 44899
44897: GO 44906
44899: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
44900: CALL 44752 0 0
44904: GO 44996
44906: LD_INT 5
44908: DOUBLE
44909: GREATEREQUAL
44910: IFFALSE 44918
44912: LD_INT 8
44914: DOUBLE
44915: LESSEQUAL
44916: IFTRUE 44920
44918: GO 44995
44920: POP
// begin uc_side := ecoSide ;
44921: LD_ADDR_OWVAR 20
44925: PUSH
44926: LD_EXP 3
44930: ST_TO_ADDR
// uc_nation := ecoNation ;
44931: LD_ADDR_OWVAR 21
44935: PUSH
44936: LD_EXP 4
44940: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
44941: LD_INT 0
44943: PPUSH
44944: LD_VAR 0 3
44948: PUSH
44949: LD_INT 4
44951: MINUS
44952: PPUSH
44953: LD_INT 4
44955: PPUSH
44956: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
44960: CALL_OW 44
44964: PPUSH
44965: LD_EXP 6
44969: PUSH
44970: LD_INT 1
44972: ARRAY
44973: PPUSH
44974: LD_EXP 6
44978: PUSH
44979: LD_INT 2
44981: ARRAY
44982: PPUSH
44983: LD_INT 12
44985: PPUSH
44986: LD_INT 1
44988: PPUSH
44989: CALL_OW 50
// end ; end ;
44993: GO 44996
44995: POP
// end else
44996: GO 45032
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44998: LD_VAR 0 1
45002: PPUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: LD_VAR 0 3
45012: PPUSH
45013: LD_VAR 0 4
45017: PPUSH
45018: LD_VAR 0 5
45022: PPUSH
45023: LD_VAR 0 6
45027: PPUSH
45028: CALL 45119 0 6
// end ;
45032: PPOPN 6
45034: END
// on MapStart ( p ) do begin if gameType = 1 then
45035: LD_EXP 2
45039: PUSH
45040: LD_INT 1
45042: EQUAL
45043: IFFALSE 45054
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
45045: LD_STRING SKIRMISH_GAME_TYPE = 1
45047: PPUSH
45048: CALL_OW 559
45052: GO 45061
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
45054: LD_STRING SKIRMISH_GAME_TYPE = 0
45056: PPUSH
45057: CALL_OW 559
// SOS_MapStart ( ) ;
45061: CALL 45090 0 0
// end ; end_of_file
45065: PPOPN 1
45067: END
// every 0 0$1 do
45068: GO 45070
45070: DISABLE
// begin enable ;
45071: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45072: LD_STRING updateTimer(
45074: PUSH
45075: LD_OWVAR 1
45079: STR
45080: PUSH
45081: LD_STRING );
45083: STR
45084: PPUSH
45085: CALL_OW 559
// end ;
45089: END
// export function SOS_MapStart ( ) ; begin
45090: LD_INT 0
45092: PPUSH
// if streamModeActive then
45093: LD_EXP 14
45097: IFFALSE 45106
// DefineStreamItems ( true ) ;
45099: LD_INT 1
45101: PPUSH
45102: CALL 46760 0 1
// UpdateFactoryWaypoints ( ) ;
45106: CALL 59621 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45110: CALL 59878 0 0
// end ;
45114: LD_VAR 0 1
45118: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45119: LD_INT 0
45121: PPUSH
// if p2 = 100 then
45122: LD_VAR 0 2
45126: PUSH
45127: LD_INT 100
45129: EQUAL
45130: IFFALSE 46133
// begin if not StreamModeActive then
45132: LD_EXP 14
45136: NOT
45137: IFFALSE 45147
// StreamModeActive := true ;
45139: LD_ADDR_EXP 14
45143: PUSH
45144: LD_INT 1
45146: ST_TO_ADDR
// if p3 = 0 then
45147: LD_VAR 0 3
45151: PUSH
45152: LD_INT 0
45154: EQUAL
45155: IFFALSE 45161
// InitStreamMode ;
45157: CALL 46296 0 0
// if p3 = 1 then
45161: LD_VAR 0 3
45165: PUSH
45166: LD_INT 1
45168: EQUAL
45169: IFFALSE 45179
// sRocket := true ;
45171: LD_ADDR_EXP 19
45175: PUSH
45176: LD_INT 1
45178: ST_TO_ADDR
// if p3 = 2 then
45179: LD_VAR 0 3
45183: PUSH
45184: LD_INT 2
45186: EQUAL
45187: IFFALSE 45197
// sSpeed := true ;
45189: LD_ADDR_EXP 18
45193: PUSH
45194: LD_INT 1
45196: ST_TO_ADDR
// if p3 = 3 then
45197: LD_VAR 0 3
45201: PUSH
45202: LD_INT 3
45204: EQUAL
45205: IFFALSE 45215
// sEngine := true ;
45207: LD_ADDR_EXP 20
45211: PUSH
45212: LD_INT 1
45214: ST_TO_ADDR
// if p3 = 4 then
45215: LD_VAR 0 3
45219: PUSH
45220: LD_INT 4
45222: EQUAL
45223: IFFALSE 45233
// sSpec := true ;
45225: LD_ADDR_EXP 17
45229: PUSH
45230: LD_INT 1
45232: ST_TO_ADDR
// if p3 = 5 then
45233: LD_VAR 0 3
45237: PUSH
45238: LD_INT 5
45240: EQUAL
45241: IFFALSE 45251
// sLevel := true ;
45243: LD_ADDR_EXP 21
45247: PUSH
45248: LD_INT 1
45250: ST_TO_ADDR
// if p3 = 6 then
45251: LD_VAR 0 3
45255: PUSH
45256: LD_INT 6
45258: EQUAL
45259: IFFALSE 45269
// sArmoury := true ;
45261: LD_ADDR_EXP 22
45265: PUSH
45266: LD_INT 1
45268: ST_TO_ADDR
// if p3 = 7 then
45269: LD_VAR 0 3
45273: PUSH
45274: LD_INT 7
45276: EQUAL
45277: IFFALSE 45287
// sRadar := true ;
45279: LD_ADDR_EXP 23
45283: PUSH
45284: LD_INT 1
45286: ST_TO_ADDR
// if p3 = 8 then
45287: LD_VAR 0 3
45291: PUSH
45292: LD_INT 8
45294: EQUAL
45295: IFFALSE 45305
// sBunker := true ;
45297: LD_ADDR_EXP 24
45301: PUSH
45302: LD_INT 1
45304: ST_TO_ADDR
// if p3 = 9 then
45305: LD_VAR 0 3
45309: PUSH
45310: LD_INT 9
45312: EQUAL
45313: IFFALSE 45323
// sHack := true ;
45315: LD_ADDR_EXP 25
45319: PUSH
45320: LD_INT 1
45322: ST_TO_ADDR
// if p3 = 10 then
45323: LD_VAR 0 3
45327: PUSH
45328: LD_INT 10
45330: EQUAL
45331: IFFALSE 45341
// sFire := true ;
45333: LD_ADDR_EXP 26
45337: PUSH
45338: LD_INT 1
45340: ST_TO_ADDR
// if p3 = 11 then
45341: LD_VAR 0 3
45345: PUSH
45346: LD_INT 11
45348: EQUAL
45349: IFFALSE 45359
// sRefresh := true ;
45351: LD_ADDR_EXP 27
45355: PUSH
45356: LD_INT 1
45358: ST_TO_ADDR
// if p3 = 12 then
45359: LD_VAR 0 3
45363: PUSH
45364: LD_INT 12
45366: EQUAL
45367: IFFALSE 45377
// sExp := true ;
45369: LD_ADDR_EXP 28
45373: PUSH
45374: LD_INT 1
45376: ST_TO_ADDR
// if p3 = 13 then
45377: LD_VAR 0 3
45381: PUSH
45382: LD_INT 13
45384: EQUAL
45385: IFFALSE 45395
// sDepot := true ;
45387: LD_ADDR_EXP 29
45391: PUSH
45392: LD_INT 1
45394: ST_TO_ADDR
// if p3 = 14 then
45395: LD_VAR 0 3
45399: PUSH
45400: LD_INT 14
45402: EQUAL
45403: IFFALSE 45413
// sFlag := true ;
45405: LD_ADDR_EXP 30
45409: PUSH
45410: LD_INT 1
45412: ST_TO_ADDR
// if p3 = 15 then
45413: LD_VAR 0 3
45417: PUSH
45418: LD_INT 15
45420: EQUAL
45421: IFFALSE 45431
// sKamikadze := true ;
45423: LD_ADDR_EXP 38
45427: PUSH
45428: LD_INT 1
45430: ST_TO_ADDR
// if p3 = 16 then
45431: LD_VAR 0 3
45435: PUSH
45436: LD_INT 16
45438: EQUAL
45439: IFFALSE 45449
// sTroll := true ;
45441: LD_ADDR_EXP 39
45445: PUSH
45446: LD_INT 1
45448: ST_TO_ADDR
// if p3 = 17 then
45449: LD_VAR 0 3
45453: PUSH
45454: LD_INT 17
45456: EQUAL
45457: IFFALSE 45467
// sSlow := true ;
45459: LD_ADDR_EXP 40
45463: PUSH
45464: LD_INT 1
45466: ST_TO_ADDR
// if p3 = 18 then
45467: LD_VAR 0 3
45471: PUSH
45472: LD_INT 18
45474: EQUAL
45475: IFFALSE 45485
// sLack := true ;
45477: LD_ADDR_EXP 41
45481: PUSH
45482: LD_INT 1
45484: ST_TO_ADDR
// if p3 = 19 then
45485: LD_VAR 0 3
45489: PUSH
45490: LD_INT 19
45492: EQUAL
45493: IFFALSE 45503
// sTank := true ;
45495: LD_ADDR_EXP 43
45499: PUSH
45500: LD_INT 1
45502: ST_TO_ADDR
// if p3 = 20 then
45503: LD_VAR 0 3
45507: PUSH
45508: LD_INT 20
45510: EQUAL
45511: IFFALSE 45521
// sRemote := true ;
45513: LD_ADDR_EXP 44
45517: PUSH
45518: LD_INT 1
45520: ST_TO_ADDR
// if p3 = 21 then
45521: LD_VAR 0 3
45525: PUSH
45526: LD_INT 21
45528: EQUAL
45529: IFFALSE 45539
// sPowell := true ;
45531: LD_ADDR_EXP 45
45535: PUSH
45536: LD_INT 1
45538: ST_TO_ADDR
// if p3 = 22 then
45539: LD_VAR 0 3
45543: PUSH
45544: LD_INT 22
45546: EQUAL
45547: IFFALSE 45557
// sTeleport := true ;
45549: LD_ADDR_EXP 48
45553: PUSH
45554: LD_INT 1
45556: ST_TO_ADDR
// if p3 = 23 then
45557: LD_VAR 0 3
45561: PUSH
45562: LD_INT 23
45564: EQUAL
45565: IFFALSE 45575
// sOilTower := true ;
45567: LD_ADDR_EXP 50
45571: PUSH
45572: LD_INT 1
45574: ST_TO_ADDR
// if p3 = 24 then
45575: LD_VAR 0 3
45579: PUSH
45580: LD_INT 24
45582: EQUAL
45583: IFFALSE 45593
// sShovel := true ;
45585: LD_ADDR_EXP 51
45589: PUSH
45590: LD_INT 1
45592: ST_TO_ADDR
// if p3 = 25 then
45593: LD_VAR 0 3
45597: PUSH
45598: LD_INT 25
45600: EQUAL
45601: IFFALSE 45611
// sSheik := true ;
45603: LD_ADDR_EXP 52
45607: PUSH
45608: LD_INT 1
45610: ST_TO_ADDR
// if p3 = 26 then
45611: LD_VAR 0 3
45615: PUSH
45616: LD_INT 26
45618: EQUAL
45619: IFFALSE 45629
// sEarthquake := true ;
45621: LD_ADDR_EXP 54
45625: PUSH
45626: LD_INT 1
45628: ST_TO_ADDR
// if p3 = 27 then
45629: LD_VAR 0 3
45633: PUSH
45634: LD_INT 27
45636: EQUAL
45637: IFFALSE 45647
// sAI := true ;
45639: LD_ADDR_EXP 55
45643: PUSH
45644: LD_INT 1
45646: ST_TO_ADDR
// if p3 = 28 then
45647: LD_VAR 0 3
45651: PUSH
45652: LD_INT 28
45654: EQUAL
45655: IFFALSE 45665
// sCargo := true ;
45657: LD_ADDR_EXP 58
45661: PUSH
45662: LD_INT 1
45664: ST_TO_ADDR
// if p3 = 29 then
45665: LD_VAR 0 3
45669: PUSH
45670: LD_INT 29
45672: EQUAL
45673: IFFALSE 45683
// sDLaser := true ;
45675: LD_ADDR_EXP 59
45679: PUSH
45680: LD_INT 1
45682: ST_TO_ADDR
// if p3 = 30 then
45683: LD_VAR 0 3
45687: PUSH
45688: LD_INT 30
45690: EQUAL
45691: IFFALSE 45701
// sExchange := true ;
45693: LD_ADDR_EXP 60
45697: PUSH
45698: LD_INT 1
45700: ST_TO_ADDR
// if p3 = 31 then
45701: LD_VAR 0 3
45705: PUSH
45706: LD_INT 31
45708: EQUAL
45709: IFFALSE 45719
// sFac := true ;
45711: LD_ADDR_EXP 61
45715: PUSH
45716: LD_INT 1
45718: ST_TO_ADDR
// if p3 = 32 then
45719: LD_VAR 0 3
45723: PUSH
45724: LD_INT 32
45726: EQUAL
45727: IFFALSE 45737
// sPower := true ;
45729: LD_ADDR_EXP 62
45733: PUSH
45734: LD_INT 1
45736: ST_TO_ADDR
// if p3 = 33 then
45737: LD_VAR 0 3
45741: PUSH
45742: LD_INT 33
45744: EQUAL
45745: IFFALSE 45755
// sRandom := true ;
45747: LD_ADDR_EXP 63
45751: PUSH
45752: LD_INT 1
45754: ST_TO_ADDR
// if p3 = 34 then
45755: LD_VAR 0 3
45759: PUSH
45760: LD_INT 34
45762: EQUAL
45763: IFFALSE 45773
// sShield := true ;
45765: LD_ADDR_EXP 64
45769: PUSH
45770: LD_INT 1
45772: ST_TO_ADDR
// if p3 = 35 then
45773: LD_VAR 0 3
45777: PUSH
45778: LD_INT 35
45780: EQUAL
45781: IFFALSE 45791
// sTime := true ;
45783: LD_ADDR_EXP 65
45787: PUSH
45788: LD_INT 1
45790: ST_TO_ADDR
// if p3 = 36 then
45791: LD_VAR 0 3
45795: PUSH
45796: LD_INT 36
45798: EQUAL
45799: IFFALSE 45809
// sTools := true ;
45801: LD_ADDR_EXP 66
45805: PUSH
45806: LD_INT 1
45808: ST_TO_ADDR
// if p3 = 101 then
45809: LD_VAR 0 3
45813: PUSH
45814: LD_INT 101
45816: EQUAL
45817: IFFALSE 45827
// sSold := true ;
45819: LD_ADDR_EXP 31
45823: PUSH
45824: LD_INT 1
45826: ST_TO_ADDR
// if p3 = 102 then
45827: LD_VAR 0 3
45831: PUSH
45832: LD_INT 102
45834: EQUAL
45835: IFFALSE 45845
// sDiff := true ;
45837: LD_ADDR_EXP 32
45841: PUSH
45842: LD_INT 1
45844: ST_TO_ADDR
// if p3 = 103 then
45845: LD_VAR 0 3
45849: PUSH
45850: LD_INT 103
45852: EQUAL
45853: IFFALSE 45863
// sFog := true ;
45855: LD_ADDR_EXP 35
45859: PUSH
45860: LD_INT 1
45862: ST_TO_ADDR
// if p3 = 104 then
45863: LD_VAR 0 3
45867: PUSH
45868: LD_INT 104
45870: EQUAL
45871: IFFALSE 45881
// sReset := true ;
45873: LD_ADDR_EXP 36
45877: PUSH
45878: LD_INT 1
45880: ST_TO_ADDR
// if p3 = 105 then
45881: LD_VAR 0 3
45885: PUSH
45886: LD_INT 105
45888: EQUAL
45889: IFFALSE 45899
// sSun := true ;
45891: LD_ADDR_EXP 37
45895: PUSH
45896: LD_INT 1
45898: ST_TO_ADDR
// if p3 = 106 then
45899: LD_VAR 0 3
45903: PUSH
45904: LD_INT 106
45906: EQUAL
45907: IFFALSE 45917
// sTiger := true ;
45909: LD_ADDR_EXP 33
45913: PUSH
45914: LD_INT 1
45916: ST_TO_ADDR
// if p3 = 107 then
45917: LD_VAR 0 3
45921: PUSH
45922: LD_INT 107
45924: EQUAL
45925: IFFALSE 45935
// sBomb := true ;
45927: LD_ADDR_EXP 34
45931: PUSH
45932: LD_INT 1
45934: ST_TO_ADDR
// if p3 = 108 then
45935: LD_VAR 0 3
45939: PUSH
45940: LD_INT 108
45942: EQUAL
45943: IFFALSE 45953
// sWound := true ;
45945: LD_ADDR_EXP 42
45949: PUSH
45950: LD_INT 1
45952: ST_TO_ADDR
// if p3 = 109 then
45953: LD_VAR 0 3
45957: PUSH
45958: LD_INT 109
45960: EQUAL
45961: IFFALSE 45971
// sBetray := true ;
45963: LD_ADDR_EXP 46
45967: PUSH
45968: LD_INT 1
45970: ST_TO_ADDR
// if p3 = 110 then
45971: LD_VAR 0 3
45975: PUSH
45976: LD_INT 110
45978: EQUAL
45979: IFFALSE 45989
// sContamin := true ;
45981: LD_ADDR_EXP 47
45985: PUSH
45986: LD_INT 1
45988: ST_TO_ADDR
// if p3 = 111 then
45989: LD_VAR 0 3
45993: PUSH
45994: LD_INT 111
45996: EQUAL
45997: IFFALSE 46007
// sOil := true ;
45999: LD_ADDR_EXP 49
46003: PUSH
46004: LD_INT 1
46006: ST_TO_ADDR
// if p3 = 112 then
46007: LD_VAR 0 3
46011: PUSH
46012: LD_INT 112
46014: EQUAL
46015: IFFALSE 46025
// sStu := true ;
46017: LD_ADDR_EXP 53
46021: PUSH
46022: LD_INT 1
46024: ST_TO_ADDR
// if p3 = 113 then
46025: LD_VAR 0 3
46029: PUSH
46030: LD_INT 113
46032: EQUAL
46033: IFFALSE 46043
// sBazooka := true ;
46035: LD_ADDR_EXP 56
46039: PUSH
46040: LD_INT 1
46042: ST_TO_ADDR
// if p3 = 114 then
46043: LD_VAR 0 3
46047: PUSH
46048: LD_INT 114
46050: EQUAL
46051: IFFALSE 46061
// sMortar := true ;
46053: LD_ADDR_EXP 57
46057: PUSH
46058: LD_INT 1
46060: ST_TO_ADDR
// if p3 = 115 then
46061: LD_VAR 0 3
46065: PUSH
46066: LD_INT 115
46068: EQUAL
46069: IFFALSE 46079
// sRanger := true ;
46071: LD_ADDR_EXP 67
46075: PUSH
46076: LD_INT 1
46078: ST_TO_ADDR
// if p3 = 116 then
46079: LD_VAR 0 3
46083: PUSH
46084: LD_INT 116
46086: EQUAL
46087: IFFALSE 46097
// sComputer := true ;
46089: LD_ADDR_EXP 68
46093: PUSH
46094: LD_INT 1
46096: ST_TO_ADDR
// if p3 = 117 then
46097: LD_VAR 0 3
46101: PUSH
46102: LD_INT 117
46104: EQUAL
46105: IFFALSE 46115
// s30 := true ;
46107: LD_ADDR_EXP 69
46111: PUSH
46112: LD_INT 1
46114: ST_TO_ADDR
// if p3 = 118 then
46115: LD_VAR 0 3
46119: PUSH
46120: LD_INT 118
46122: EQUAL
46123: IFFALSE 46133
// s60 := true ;
46125: LD_ADDR_EXP 70
46129: PUSH
46130: LD_INT 1
46132: ST_TO_ADDR
// end ; if p2 = 101 then
46133: LD_VAR 0 2
46137: PUSH
46138: LD_INT 101
46140: EQUAL
46141: IFFALSE 46269
// begin case p3 of 1 :
46143: LD_VAR 0 3
46147: PUSH
46148: LD_INT 1
46150: DOUBLE
46151: EQUAL
46152: IFTRUE 46156
46154: GO 46163
46156: POP
// hHackUnlimitedResources ; 2 :
46157: CALL 58367 0 0
46161: GO 46269
46163: LD_INT 2
46165: DOUBLE
46166: EQUAL
46167: IFTRUE 46171
46169: GO 46178
46171: POP
// hHackSetLevel10 ; 3 :
46172: CALL 58500 0 0
46176: GO 46269
46178: LD_INT 3
46180: DOUBLE
46181: EQUAL
46182: IFTRUE 46186
46184: GO 46193
46186: POP
// hHackSetLevel10YourUnits ; 4 :
46187: CALL 58585 0 0
46191: GO 46269
46193: LD_INT 4
46195: DOUBLE
46196: EQUAL
46197: IFTRUE 46201
46199: GO 46208
46201: POP
// hHackInvincible ; 5 :
46202: CALL 59033 0 0
46206: GO 46269
46208: LD_INT 5
46210: DOUBLE
46211: EQUAL
46212: IFTRUE 46216
46214: GO 46223
46216: POP
// hHackInvisible ; 6 :
46217: CALL 59144 0 0
46221: GO 46269
46223: LD_INT 6
46225: DOUBLE
46226: EQUAL
46227: IFTRUE 46231
46229: GO 46238
46231: POP
// hHackChangeYourSide ; 7 :
46232: CALL 59201 0 0
46236: GO 46269
46238: LD_INT 7
46240: DOUBLE
46241: EQUAL
46242: IFTRUE 46246
46244: GO 46253
46246: POP
// hHackChangeUnitSide ; 8 :
46247: CALL 59243 0 0
46251: GO 46269
46253: LD_INT 8
46255: DOUBLE
46256: EQUAL
46257: IFTRUE 46261
46259: GO 46268
46261: POP
// hHackFog ; end ;
46262: CALL 59344 0 0
46266: GO 46269
46268: POP
// end ; end ;
46269: LD_VAR 0 7
46273: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
46274: GO 46276
46276: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
46277: LD_STRING initStreamRollete();
46279: PPUSH
46280: CALL_OW 559
// InitStreamMode ;
46284: CALL 46296 0 0
// DefineStreamItems ( false ) ;
46288: LD_INT 0
46290: PPUSH
46291: CALL 46760 0 1
// end ;
46295: END
// function InitStreamMode ; begin
46296: LD_INT 0
46298: PPUSH
// streamModeActive := false ;
46299: LD_ADDR_EXP 14
46303: PUSH
46304: LD_INT 0
46306: ST_TO_ADDR
// normalCounter := 36 ;
46307: LD_ADDR_EXP 15
46311: PUSH
46312: LD_INT 36
46314: ST_TO_ADDR
// hardcoreCounter := 18 ;
46315: LD_ADDR_EXP 16
46319: PUSH
46320: LD_INT 18
46322: ST_TO_ADDR
// sRocket := false ;
46323: LD_ADDR_EXP 19
46327: PUSH
46328: LD_INT 0
46330: ST_TO_ADDR
// sSpeed := false ;
46331: LD_ADDR_EXP 18
46335: PUSH
46336: LD_INT 0
46338: ST_TO_ADDR
// sEngine := false ;
46339: LD_ADDR_EXP 20
46343: PUSH
46344: LD_INT 0
46346: ST_TO_ADDR
// sSpec := false ;
46347: LD_ADDR_EXP 17
46351: PUSH
46352: LD_INT 0
46354: ST_TO_ADDR
// sLevel := false ;
46355: LD_ADDR_EXP 21
46359: PUSH
46360: LD_INT 0
46362: ST_TO_ADDR
// sArmoury := false ;
46363: LD_ADDR_EXP 22
46367: PUSH
46368: LD_INT 0
46370: ST_TO_ADDR
// sRadar := false ;
46371: LD_ADDR_EXP 23
46375: PUSH
46376: LD_INT 0
46378: ST_TO_ADDR
// sBunker := false ;
46379: LD_ADDR_EXP 24
46383: PUSH
46384: LD_INT 0
46386: ST_TO_ADDR
// sHack := false ;
46387: LD_ADDR_EXP 25
46391: PUSH
46392: LD_INT 0
46394: ST_TO_ADDR
// sFire := false ;
46395: LD_ADDR_EXP 26
46399: PUSH
46400: LD_INT 0
46402: ST_TO_ADDR
// sRefresh := false ;
46403: LD_ADDR_EXP 27
46407: PUSH
46408: LD_INT 0
46410: ST_TO_ADDR
// sExp := false ;
46411: LD_ADDR_EXP 28
46415: PUSH
46416: LD_INT 0
46418: ST_TO_ADDR
// sDepot := false ;
46419: LD_ADDR_EXP 29
46423: PUSH
46424: LD_INT 0
46426: ST_TO_ADDR
// sFlag := false ;
46427: LD_ADDR_EXP 30
46431: PUSH
46432: LD_INT 0
46434: ST_TO_ADDR
// sKamikadze := false ;
46435: LD_ADDR_EXP 38
46439: PUSH
46440: LD_INT 0
46442: ST_TO_ADDR
// sTroll := false ;
46443: LD_ADDR_EXP 39
46447: PUSH
46448: LD_INT 0
46450: ST_TO_ADDR
// sSlow := false ;
46451: LD_ADDR_EXP 40
46455: PUSH
46456: LD_INT 0
46458: ST_TO_ADDR
// sLack := false ;
46459: LD_ADDR_EXP 41
46463: PUSH
46464: LD_INT 0
46466: ST_TO_ADDR
// sTank := false ;
46467: LD_ADDR_EXP 43
46471: PUSH
46472: LD_INT 0
46474: ST_TO_ADDR
// sRemote := false ;
46475: LD_ADDR_EXP 44
46479: PUSH
46480: LD_INT 0
46482: ST_TO_ADDR
// sPowell := false ;
46483: LD_ADDR_EXP 45
46487: PUSH
46488: LD_INT 0
46490: ST_TO_ADDR
// sTeleport := false ;
46491: LD_ADDR_EXP 48
46495: PUSH
46496: LD_INT 0
46498: ST_TO_ADDR
// sOilTower := false ;
46499: LD_ADDR_EXP 50
46503: PUSH
46504: LD_INT 0
46506: ST_TO_ADDR
// sShovel := false ;
46507: LD_ADDR_EXP 51
46511: PUSH
46512: LD_INT 0
46514: ST_TO_ADDR
// sSheik := false ;
46515: LD_ADDR_EXP 52
46519: PUSH
46520: LD_INT 0
46522: ST_TO_ADDR
// sEarthquake := false ;
46523: LD_ADDR_EXP 54
46527: PUSH
46528: LD_INT 0
46530: ST_TO_ADDR
// sAI := false ;
46531: LD_ADDR_EXP 55
46535: PUSH
46536: LD_INT 0
46538: ST_TO_ADDR
// sCargo := false ;
46539: LD_ADDR_EXP 58
46543: PUSH
46544: LD_INT 0
46546: ST_TO_ADDR
// sDLaser := false ;
46547: LD_ADDR_EXP 59
46551: PUSH
46552: LD_INT 0
46554: ST_TO_ADDR
// sExchange := false ;
46555: LD_ADDR_EXP 60
46559: PUSH
46560: LD_INT 0
46562: ST_TO_ADDR
// sFac := false ;
46563: LD_ADDR_EXP 61
46567: PUSH
46568: LD_INT 0
46570: ST_TO_ADDR
// sPower := false ;
46571: LD_ADDR_EXP 62
46575: PUSH
46576: LD_INT 0
46578: ST_TO_ADDR
// sRandom := false ;
46579: LD_ADDR_EXP 63
46583: PUSH
46584: LD_INT 0
46586: ST_TO_ADDR
// sShield := false ;
46587: LD_ADDR_EXP 64
46591: PUSH
46592: LD_INT 0
46594: ST_TO_ADDR
// sTime := false ;
46595: LD_ADDR_EXP 65
46599: PUSH
46600: LD_INT 0
46602: ST_TO_ADDR
// sTools := false ;
46603: LD_ADDR_EXP 66
46607: PUSH
46608: LD_INT 0
46610: ST_TO_ADDR
// sSold := false ;
46611: LD_ADDR_EXP 31
46615: PUSH
46616: LD_INT 0
46618: ST_TO_ADDR
// sDiff := false ;
46619: LD_ADDR_EXP 32
46623: PUSH
46624: LD_INT 0
46626: ST_TO_ADDR
// sFog := false ;
46627: LD_ADDR_EXP 35
46631: PUSH
46632: LD_INT 0
46634: ST_TO_ADDR
// sReset := false ;
46635: LD_ADDR_EXP 36
46639: PUSH
46640: LD_INT 0
46642: ST_TO_ADDR
// sSun := false ;
46643: LD_ADDR_EXP 37
46647: PUSH
46648: LD_INT 0
46650: ST_TO_ADDR
// sTiger := false ;
46651: LD_ADDR_EXP 33
46655: PUSH
46656: LD_INT 0
46658: ST_TO_ADDR
// sBomb := false ;
46659: LD_ADDR_EXP 34
46663: PUSH
46664: LD_INT 0
46666: ST_TO_ADDR
// sWound := false ;
46667: LD_ADDR_EXP 42
46671: PUSH
46672: LD_INT 0
46674: ST_TO_ADDR
// sBetray := false ;
46675: LD_ADDR_EXP 46
46679: PUSH
46680: LD_INT 0
46682: ST_TO_ADDR
// sContamin := false ;
46683: LD_ADDR_EXP 47
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// sOil := false ;
46691: LD_ADDR_EXP 49
46695: PUSH
46696: LD_INT 0
46698: ST_TO_ADDR
// sStu := false ;
46699: LD_ADDR_EXP 53
46703: PUSH
46704: LD_INT 0
46706: ST_TO_ADDR
// sBazooka := false ;
46707: LD_ADDR_EXP 56
46711: PUSH
46712: LD_INT 0
46714: ST_TO_ADDR
// sMortar := false ;
46715: LD_ADDR_EXP 57
46719: PUSH
46720: LD_INT 0
46722: ST_TO_ADDR
// sRanger := false ;
46723: LD_ADDR_EXP 67
46727: PUSH
46728: LD_INT 0
46730: ST_TO_ADDR
// sComputer := false ;
46731: LD_ADDR_EXP 68
46735: PUSH
46736: LD_INT 0
46738: ST_TO_ADDR
// s30 := false ;
46739: LD_ADDR_EXP 69
46743: PUSH
46744: LD_INT 0
46746: ST_TO_ADDR
// s60 := false ;
46747: LD_ADDR_EXP 70
46751: PUSH
46752: LD_INT 0
46754: ST_TO_ADDR
// end ;
46755: LD_VAR 0 1
46759: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
46760: LD_INT 0
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
// result := [ ] ;
46769: LD_ADDR_VAR 0 2
46773: PUSH
46774: EMPTY
46775: ST_TO_ADDR
// if campaign_id = 1 then
46776: LD_OWVAR 69
46780: PUSH
46781: LD_INT 1
46783: EQUAL
46784: IFFALSE 49950
// begin case mission_number of 1 :
46786: LD_OWVAR 70
46790: PUSH
46791: LD_INT 1
46793: DOUBLE
46794: EQUAL
46795: IFTRUE 46799
46797: GO 46875
46799: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
46800: LD_ADDR_VAR 0 2
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 4
46810: PUSH
46811: LD_INT 11
46813: PUSH
46814: LD_INT 12
46816: PUSH
46817: LD_INT 15
46819: PUSH
46820: LD_INT 16
46822: PUSH
46823: LD_INT 22
46825: PUSH
46826: LD_INT 23
46828: PUSH
46829: LD_INT 26
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 101
46845: PUSH
46846: LD_INT 102
46848: PUSH
46849: LD_INT 106
46851: PUSH
46852: LD_INT 116
46854: PUSH
46855: LD_INT 117
46857: PUSH
46858: LD_INT 118
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: ST_TO_ADDR
46873: GO 49948
46875: LD_INT 2
46877: DOUBLE
46878: EQUAL
46879: IFTRUE 46883
46881: GO 46967
46883: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
46884: LD_ADDR_VAR 0 2
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 4
46894: PUSH
46895: LD_INT 11
46897: PUSH
46898: LD_INT 12
46900: PUSH
46901: LD_INT 15
46903: PUSH
46904: LD_INT 16
46906: PUSH
46907: LD_INT 22
46909: PUSH
46910: LD_INT 23
46912: PUSH
46913: LD_INT 26
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 101
46929: PUSH
46930: LD_INT 102
46932: PUSH
46933: LD_INT 105
46935: PUSH
46936: LD_INT 106
46938: PUSH
46939: LD_INT 108
46941: PUSH
46942: LD_INT 116
46944: PUSH
46945: LD_INT 117
46947: PUSH
46948: LD_INT 118
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: ST_TO_ADDR
46965: GO 49948
46967: LD_INT 3
46969: DOUBLE
46970: EQUAL
46971: IFTRUE 46975
46973: GO 47063
46975: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46976: LD_ADDR_VAR 0 2
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 4
46986: PUSH
46987: LD_INT 5
46989: PUSH
46990: LD_INT 11
46992: PUSH
46993: LD_INT 12
46995: PUSH
46996: LD_INT 15
46998: PUSH
46999: LD_INT 16
47001: PUSH
47002: LD_INT 22
47004: PUSH
47005: LD_INT 26
47007: PUSH
47008: LD_INT 36
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 101
47025: PUSH
47026: LD_INT 102
47028: PUSH
47029: LD_INT 105
47031: PUSH
47032: LD_INT 106
47034: PUSH
47035: LD_INT 108
47037: PUSH
47038: LD_INT 116
47040: PUSH
47041: LD_INT 117
47043: PUSH
47044: LD_INT 118
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: ST_TO_ADDR
47061: GO 49948
47063: LD_INT 4
47065: DOUBLE
47066: EQUAL
47067: IFTRUE 47071
47069: GO 47167
47071: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47072: LD_ADDR_VAR 0 2
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 4
47082: PUSH
47083: LD_INT 5
47085: PUSH
47086: LD_INT 8
47088: PUSH
47089: LD_INT 11
47091: PUSH
47092: LD_INT 12
47094: PUSH
47095: LD_INT 15
47097: PUSH
47098: LD_INT 16
47100: PUSH
47101: LD_INT 22
47103: PUSH
47104: LD_INT 23
47106: PUSH
47107: LD_INT 26
47109: PUSH
47110: LD_INT 36
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 101
47129: PUSH
47130: LD_INT 102
47132: PUSH
47133: LD_INT 105
47135: PUSH
47136: LD_INT 106
47138: PUSH
47139: LD_INT 108
47141: PUSH
47142: LD_INT 116
47144: PUSH
47145: LD_INT 117
47147: PUSH
47148: LD_INT 118
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: ST_TO_ADDR
47165: GO 49948
47167: LD_INT 5
47169: DOUBLE
47170: EQUAL
47171: IFTRUE 47175
47173: GO 47287
47175: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47176: LD_ADDR_VAR 0 2
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: LD_INT 4
47186: PUSH
47187: LD_INT 5
47189: PUSH
47190: LD_INT 6
47192: PUSH
47193: LD_INT 8
47195: PUSH
47196: LD_INT 11
47198: PUSH
47199: LD_INT 12
47201: PUSH
47202: LD_INT 15
47204: PUSH
47205: LD_INT 16
47207: PUSH
47208: LD_INT 22
47210: PUSH
47211: LD_INT 23
47213: PUSH
47214: LD_INT 25
47216: PUSH
47217: LD_INT 26
47219: PUSH
47220: LD_INT 36
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 101
47241: PUSH
47242: LD_INT 102
47244: PUSH
47245: LD_INT 105
47247: PUSH
47248: LD_INT 106
47250: PUSH
47251: LD_INT 108
47253: PUSH
47254: LD_INT 109
47256: PUSH
47257: LD_INT 112
47259: PUSH
47260: LD_INT 116
47262: PUSH
47263: LD_INT 117
47265: PUSH
47266: LD_INT 118
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: ST_TO_ADDR
47285: GO 49948
47287: LD_INT 6
47289: DOUBLE
47290: EQUAL
47291: IFTRUE 47295
47293: GO 47427
47295: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47296: LD_ADDR_VAR 0 2
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 4
47306: PUSH
47307: LD_INT 5
47309: PUSH
47310: LD_INT 6
47312: PUSH
47313: LD_INT 8
47315: PUSH
47316: LD_INT 11
47318: PUSH
47319: LD_INT 12
47321: PUSH
47322: LD_INT 15
47324: PUSH
47325: LD_INT 16
47327: PUSH
47328: LD_INT 20
47330: PUSH
47331: LD_INT 21
47333: PUSH
47334: LD_INT 22
47336: PUSH
47337: LD_INT 23
47339: PUSH
47340: LD_INT 25
47342: PUSH
47343: LD_INT 26
47345: PUSH
47346: LD_INT 30
47348: PUSH
47349: LD_INT 31
47351: PUSH
47352: LD_INT 32
47354: PUSH
47355: LD_INT 36
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 101
47381: PUSH
47382: LD_INT 102
47384: PUSH
47385: LD_INT 105
47387: PUSH
47388: LD_INT 106
47390: PUSH
47391: LD_INT 108
47393: PUSH
47394: LD_INT 109
47396: PUSH
47397: LD_INT 112
47399: PUSH
47400: LD_INT 116
47402: PUSH
47403: LD_INT 117
47405: PUSH
47406: LD_INT 118
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: ST_TO_ADDR
47425: GO 49948
47427: LD_INT 7
47429: DOUBLE
47430: EQUAL
47431: IFTRUE 47435
47433: GO 47547
47435: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47436: LD_ADDR_VAR 0 2
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 4
47446: PUSH
47447: LD_INT 5
47449: PUSH
47450: LD_INT 7
47452: PUSH
47453: LD_INT 11
47455: PUSH
47456: LD_INT 12
47458: PUSH
47459: LD_INT 15
47461: PUSH
47462: LD_INT 16
47464: PUSH
47465: LD_INT 20
47467: PUSH
47468: LD_INT 21
47470: PUSH
47471: LD_INT 22
47473: PUSH
47474: LD_INT 23
47476: PUSH
47477: LD_INT 25
47479: PUSH
47480: LD_INT 26
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 101
47501: PUSH
47502: LD_INT 102
47504: PUSH
47505: LD_INT 103
47507: PUSH
47508: LD_INT 105
47510: PUSH
47511: LD_INT 106
47513: PUSH
47514: LD_INT 108
47516: PUSH
47517: LD_INT 112
47519: PUSH
47520: LD_INT 116
47522: PUSH
47523: LD_INT 117
47525: PUSH
47526: LD_INT 118
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: ST_TO_ADDR
47545: GO 49948
47547: LD_INT 8
47549: DOUBLE
47550: EQUAL
47551: IFTRUE 47555
47553: GO 47695
47555: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47556: LD_ADDR_VAR 0 2
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 4
47566: PUSH
47567: LD_INT 5
47569: PUSH
47570: LD_INT 6
47572: PUSH
47573: LD_INT 7
47575: PUSH
47576: LD_INT 8
47578: PUSH
47579: LD_INT 11
47581: PUSH
47582: LD_INT 12
47584: PUSH
47585: LD_INT 15
47587: PUSH
47588: LD_INT 16
47590: PUSH
47591: LD_INT 20
47593: PUSH
47594: LD_INT 21
47596: PUSH
47597: LD_INT 22
47599: PUSH
47600: LD_INT 23
47602: PUSH
47603: LD_INT 25
47605: PUSH
47606: LD_INT 26
47608: PUSH
47609: LD_INT 30
47611: PUSH
47612: LD_INT 31
47614: PUSH
47615: LD_INT 32
47617: PUSH
47618: LD_INT 36
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 101
47645: PUSH
47646: LD_INT 102
47648: PUSH
47649: LD_INT 103
47651: PUSH
47652: LD_INT 105
47654: PUSH
47655: LD_INT 106
47657: PUSH
47658: LD_INT 108
47660: PUSH
47661: LD_INT 109
47663: PUSH
47664: LD_INT 112
47666: PUSH
47667: LD_INT 116
47669: PUSH
47670: LD_INT 117
47672: PUSH
47673: LD_INT 118
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: ST_TO_ADDR
47693: GO 49948
47695: LD_INT 9
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47703
47701: GO 47851
47703: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47704: LD_ADDR_VAR 0 2
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 4
47714: PUSH
47715: LD_INT 5
47717: PUSH
47718: LD_INT 6
47720: PUSH
47721: LD_INT 7
47723: PUSH
47724: LD_INT 8
47726: PUSH
47727: LD_INT 11
47729: PUSH
47730: LD_INT 12
47732: PUSH
47733: LD_INT 15
47735: PUSH
47736: LD_INT 16
47738: PUSH
47739: LD_INT 20
47741: PUSH
47742: LD_INT 21
47744: PUSH
47745: LD_INT 22
47747: PUSH
47748: LD_INT 23
47750: PUSH
47751: LD_INT 25
47753: PUSH
47754: LD_INT 26
47756: PUSH
47757: LD_INT 28
47759: PUSH
47760: LD_INT 30
47762: PUSH
47763: LD_INT 31
47765: PUSH
47766: LD_INT 32
47768: PUSH
47769: LD_INT 36
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 101
47797: PUSH
47798: LD_INT 102
47800: PUSH
47801: LD_INT 103
47803: PUSH
47804: LD_INT 105
47806: PUSH
47807: LD_INT 106
47809: PUSH
47810: LD_INT 108
47812: PUSH
47813: LD_INT 109
47815: PUSH
47816: LD_INT 112
47818: PUSH
47819: LD_INT 114
47821: PUSH
47822: LD_INT 116
47824: PUSH
47825: LD_INT 117
47827: PUSH
47828: LD_INT 118
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: ST_TO_ADDR
47849: GO 49948
47851: LD_INT 10
47853: DOUBLE
47854: EQUAL
47855: IFTRUE 47859
47857: GO 48055
47859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
47860: LD_ADDR_VAR 0 2
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 4
47870: PUSH
47871: LD_INT 5
47873: PUSH
47874: LD_INT 6
47876: PUSH
47877: LD_INT 7
47879: PUSH
47880: LD_INT 8
47882: PUSH
47883: LD_INT 9
47885: PUSH
47886: LD_INT 10
47888: PUSH
47889: LD_INT 11
47891: PUSH
47892: LD_INT 12
47894: PUSH
47895: LD_INT 13
47897: PUSH
47898: LD_INT 14
47900: PUSH
47901: LD_INT 15
47903: PUSH
47904: LD_INT 16
47906: PUSH
47907: LD_INT 17
47909: PUSH
47910: LD_INT 18
47912: PUSH
47913: LD_INT 19
47915: PUSH
47916: LD_INT 20
47918: PUSH
47919: LD_INT 21
47921: PUSH
47922: LD_INT 22
47924: PUSH
47925: LD_INT 23
47927: PUSH
47928: LD_INT 24
47930: PUSH
47931: LD_INT 25
47933: PUSH
47934: LD_INT 26
47936: PUSH
47937: LD_INT 28
47939: PUSH
47940: LD_INT 30
47942: PUSH
47943: LD_INT 31
47945: PUSH
47946: LD_INT 32
47948: PUSH
47949: LD_INT 36
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 101
47985: PUSH
47986: LD_INT 102
47988: PUSH
47989: LD_INT 103
47991: PUSH
47992: LD_INT 104
47994: PUSH
47995: LD_INT 105
47997: PUSH
47998: LD_INT 106
48000: PUSH
48001: LD_INT 107
48003: PUSH
48004: LD_INT 108
48006: PUSH
48007: LD_INT 109
48009: PUSH
48010: LD_INT 110
48012: PUSH
48013: LD_INT 111
48015: PUSH
48016: LD_INT 112
48018: PUSH
48019: LD_INT 114
48021: PUSH
48022: LD_INT 116
48024: PUSH
48025: LD_INT 117
48027: PUSH
48028: LD_INT 118
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: ST_TO_ADDR
48053: GO 49948
48055: LD_INT 11
48057: DOUBLE
48058: EQUAL
48059: IFTRUE 48063
48061: GO 48267
48063: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48064: LD_ADDR_VAR 0 2
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 4
48077: PUSH
48078: LD_INT 5
48080: PUSH
48081: LD_INT 6
48083: PUSH
48084: LD_INT 7
48086: PUSH
48087: LD_INT 8
48089: PUSH
48090: LD_INT 9
48092: PUSH
48093: LD_INT 10
48095: PUSH
48096: LD_INT 11
48098: PUSH
48099: LD_INT 12
48101: PUSH
48102: LD_INT 13
48104: PUSH
48105: LD_INT 14
48107: PUSH
48108: LD_INT 15
48110: PUSH
48111: LD_INT 16
48113: PUSH
48114: LD_INT 17
48116: PUSH
48117: LD_INT 18
48119: PUSH
48120: LD_INT 19
48122: PUSH
48123: LD_INT 20
48125: PUSH
48126: LD_INT 21
48128: PUSH
48129: LD_INT 22
48131: PUSH
48132: LD_INT 23
48134: PUSH
48135: LD_INT 24
48137: PUSH
48138: LD_INT 25
48140: PUSH
48141: LD_INT 26
48143: PUSH
48144: LD_INT 28
48146: PUSH
48147: LD_INT 30
48149: PUSH
48150: LD_INT 31
48152: PUSH
48153: LD_INT 32
48155: PUSH
48156: LD_INT 34
48158: PUSH
48159: LD_INT 36
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 101
48197: PUSH
48198: LD_INT 102
48200: PUSH
48201: LD_INT 103
48203: PUSH
48204: LD_INT 104
48206: PUSH
48207: LD_INT 105
48209: PUSH
48210: LD_INT 106
48212: PUSH
48213: LD_INT 107
48215: PUSH
48216: LD_INT 108
48218: PUSH
48219: LD_INT 109
48221: PUSH
48222: LD_INT 110
48224: PUSH
48225: LD_INT 111
48227: PUSH
48228: LD_INT 112
48230: PUSH
48231: LD_INT 114
48233: PUSH
48234: LD_INT 116
48236: PUSH
48237: LD_INT 117
48239: PUSH
48240: LD_INT 118
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: ST_TO_ADDR
48265: GO 49948
48267: LD_INT 12
48269: DOUBLE
48270: EQUAL
48271: IFTRUE 48275
48273: GO 48495
48275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48276: LD_ADDR_VAR 0 2
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: LD_INT 4
48292: PUSH
48293: LD_INT 5
48295: PUSH
48296: LD_INT 6
48298: PUSH
48299: LD_INT 7
48301: PUSH
48302: LD_INT 8
48304: PUSH
48305: LD_INT 9
48307: PUSH
48308: LD_INT 10
48310: PUSH
48311: LD_INT 11
48313: PUSH
48314: LD_INT 12
48316: PUSH
48317: LD_INT 13
48319: PUSH
48320: LD_INT 14
48322: PUSH
48323: LD_INT 15
48325: PUSH
48326: LD_INT 16
48328: PUSH
48329: LD_INT 17
48331: PUSH
48332: LD_INT 18
48334: PUSH
48335: LD_INT 19
48337: PUSH
48338: LD_INT 20
48340: PUSH
48341: LD_INT 21
48343: PUSH
48344: LD_INT 22
48346: PUSH
48347: LD_INT 23
48349: PUSH
48350: LD_INT 24
48352: PUSH
48353: LD_INT 25
48355: PUSH
48356: LD_INT 26
48358: PUSH
48359: LD_INT 27
48361: PUSH
48362: LD_INT 28
48364: PUSH
48365: LD_INT 30
48367: PUSH
48368: LD_INT 31
48370: PUSH
48371: LD_INT 32
48373: PUSH
48374: LD_INT 33
48376: PUSH
48377: LD_INT 34
48379: PUSH
48380: LD_INT 36
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 101
48421: PUSH
48422: LD_INT 102
48424: PUSH
48425: LD_INT 103
48427: PUSH
48428: LD_INT 104
48430: PUSH
48431: LD_INT 105
48433: PUSH
48434: LD_INT 106
48436: PUSH
48437: LD_INT 107
48439: PUSH
48440: LD_INT 108
48442: PUSH
48443: LD_INT 109
48445: PUSH
48446: LD_INT 110
48448: PUSH
48449: LD_INT 111
48451: PUSH
48452: LD_INT 112
48454: PUSH
48455: LD_INT 113
48457: PUSH
48458: LD_INT 114
48460: PUSH
48461: LD_INT 116
48463: PUSH
48464: LD_INT 117
48466: PUSH
48467: LD_INT 118
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: ST_TO_ADDR
48493: GO 49948
48495: LD_INT 13
48497: DOUBLE
48498: EQUAL
48499: IFTRUE 48503
48501: GO 48711
48503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48504: LD_ADDR_VAR 0 2
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: LD_INT 4
48520: PUSH
48521: LD_INT 5
48523: PUSH
48524: LD_INT 8
48526: PUSH
48527: LD_INT 9
48529: PUSH
48530: LD_INT 10
48532: PUSH
48533: LD_INT 11
48535: PUSH
48536: LD_INT 12
48538: PUSH
48539: LD_INT 14
48541: PUSH
48542: LD_INT 15
48544: PUSH
48545: LD_INT 16
48547: PUSH
48548: LD_INT 17
48550: PUSH
48551: LD_INT 18
48553: PUSH
48554: LD_INT 19
48556: PUSH
48557: LD_INT 20
48559: PUSH
48560: LD_INT 21
48562: PUSH
48563: LD_INT 22
48565: PUSH
48566: LD_INT 23
48568: PUSH
48569: LD_INT 24
48571: PUSH
48572: LD_INT 25
48574: PUSH
48575: LD_INT 26
48577: PUSH
48578: LD_INT 27
48580: PUSH
48581: LD_INT 28
48583: PUSH
48584: LD_INT 30
48586: PUSH
48587: LD_INT 31
48589: PUSH
48590: LD_INT 32
48592: PUSH
48593: LD_INT 33
48595: PUSH
48596: LD_INT 34
48598: PUSH
48599: LD_INT 36
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 101
48637: PUSH
48638: LD_INT 102
48640: PUSH
48641: LD_INT 103
48643: PUSH
48644: LD_INT 104
48646: PUSH
48647: LD_INT 105
48649: PUSH
48650: LD_INT 106
48652: PUSH
48653: LD_INT 107
48655: PUSH
48656: LD_INT 108
48658: PUSH
48659: LD_INT 109
48661: PUSH
48662: LD_INT 110
48664: PUSH
48665: LD_INT 111
48667: PUSH
48668: LD_INT 112
48670: PUSH
48671: LD_INT 113
48673: PUSH
48674: LD_INT 114
48676: PUSH
48677: LD_INT 116
48679: PUSH
48680: LD_INT 117
48682: PUSH
48683: LD_INT 118
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: ST_TO_ADDR
48709: GO 49948
48711: LD_INT 14
48713: DOUBLE
48714: EQUAL
48715: IFTRUE 48719
48717: GO 48943
48719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48720: LD_ADDR_VAR 0 2
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: LD_INT 4
48736: PUSH
48737: LD_INT 5
48739: PUSH
48740: LD_INT 6
48742: PUSH
48743: LD_INT 7
48745: PUSH
48746: LD_INT 8
48748: PUSH
48749: LD_INT 9
48751: PUSH
48752: LD_INT 10
48754: PUSH
48755: LD_INT 11
48757: PUSH
48758: LD_INT 12
48760: PUSH
48761: LD_INT 13
48763: PUSH
48764: LD_INT 14
48766: PUSH
48767: LD_INT 15
48769: PUSH
48770: LD_INT 16
48772: PUSH
48773: LD_INT 17
48775: PUSH
48776: LD_INT 18
48778: PUSH
48779: LD_INT 19
48781: PUSH
48782: LD_INT 20
48784: PUSH
48785: LD_INT 21
48787: PUSH
48788: LD_INT 22
48790: PUSH
48791: LD_INT 23
48793: PUSH
48794: LD_INT 24
48796: PUSH
48797: LD_INT 25
48799: PUSH
48800: LD_INT 26
48802: PUSH
48803: LD_INT 27
48805: PUSH
48806: LD_INT 28
48808: PUSH
48809: LD_INT 29
48811: PUSH
48812: LD_INT 30
48814: PUSH
48815: LD_INT 31
48817: PUSH
48818: LD_INT 32
48820: PUSH
48821: LD_INT 33
48823: PUSH
48824: LD_INT 34
48826: PUSH
48827: LD_INT 36
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 101
48869: PUSH
48870: LD_INT 102
48872: PUSH
48873: LD_INT 103
48875: PUSH
48876: LD_INT 104
48878: PUSH
48879: LD_INT 105
48881: PUSH
48882: LD_INT 106
48884: PUSH
48885: LD_INT 107
48887: PUSH
48888: LD_INT 108
48890: PUSH
48891: LD_INT 109
48893: PUSH
48894: LD_INT 110
48896: PUSH
48897: LD_INT 111
48899: PUSH
48900: LD_INT 112
48902: PUSH
48903: LD_INT 113
48905: PUSH
48906: LD_INT 114
48908: PUSH
48909: LD_INT 116
48911: PUSH
48912: LD_INT 117
48914: PUSH
48915: LD_INT 118
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: ST_TO_ADDR
48941: GO 49948
48943: LD_INT 15
48945: DOUBLE
48946: EQUAL
48947: IFTRUE 48951
48949: GO 49175
48951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48952: LD_ADDR_VAR 0 2
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 3
48965: PUSH
48966: LD_INT 4
48968: PUSH
48969: LD_INT 5
48971: PUSH
48972: LD_INT 6
48974: PUSH
48975: LD_INT 7
48977: PUSH
48978: LD_INT 8
48980: PUSH
48981: LD_INT 9
48983: PUSH
48984: LD_INT 10
48986: PUSH
48987: LD_INT 11
48989: PUSH
48990: LD_INT 12
48992: PUSH
48993: LD_INT 13
48995: PUSH
48996: LD_INT 14
48998: PUSH
48999: LD_INT 15
49001: PUSH
49002: LD_INT 16
49004: PUSH
49005: LD_INT 17
49007: PUSH
49008: LD_INT 18
49010: PUSH
49011: LD_INT 19
49013: PUSH
49014: LD_INT 20
49016: PUSH
49017: LD_INT 21
49019: PUSH
49020: LD_INT 22
49022: PUSH
49023: LD_INT 23
49025: PUSH
49026: LD_INT 24
49028: PUSH
49029: LD_INT 25
49031: PUSH
49032: LD_INT 26
49034: PUSH
49035: LD_INT 27
49037: PUSH
49038: LD_INT 28
49040: PUSH
49041: LD_INT 29
49043: PUSH
49044: LD_INT 30
49046: PUSH
49047: LD_INT 31
49049: PUSH
49050: LD_INT 32
49052: PUSH
49053: LD_INT 33
49055: PUSH
49056: LD_INT 34
49058: PUSH
49059: LD_INT 36
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 101
49101: PUSH
49102: LD_INT 102
49104: PUSH
49105: LD_INT 103
49107: PUSH
49108: LD_INT 104
49110: PUSH
49111: LD_INT 105
49113: PUSH
49114: LD_INT 106
49116: PUSH
49117: LD_INT 107
49119: PUSH
49120: LD_INT 108
49122: PUSH
49123: LD_INT 109
49125: PUSH
49126: LD_INT 110
49128: PUSH
49129: LD_INT 111
49131: PUSH
49132: LD_INT 112
49134: PUSH
49135: LD_INT 113
49137: PUSH
49138: LD_INT 114
49140: PUSH
49141: LD_INT 116
49143: PUSH
49144: LD_INT 117
49146: PUSH
49147: LD_INT 118
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: ST_TO_ADDR
49173: GO 49948
49175: LD_INT 16
49177: DOUBLE
49178: EQUAL
49179: IFTRUE 49183
49181: GO 49319
49183: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49184: LD_ADDR_VAR 0 2
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 4
49194: PUSH
49195: LD_INT 5
49197: PUSH
49198: LD_INT 7
49200: PUSH
49201: LD_INT 11
49203: PUSH
49204: LD_INT 12
49206: PUSH
49207: LD_INT 15
49209: PUSH
49210: LD_INT 16
49212: PUSH
49213: LD_INT 20
49215: PUSH
49216: LD_INT 21
49218: PUSH
49219: LD_INT 22
49221: PUSH
49222: LD_INT 23
49224: PUSH
49225: LD_INT 25
49227: PUSH
49228: LD_INT 26
49230: PUSH
49231: LD_INT 30
49233: PUSH
49234: LD_INT 31
49236: PUSH
49237: LD_INT 32
49239: PUSH
49240: LD_INT 33
49242: PUSH
49243: LD_INT 34
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 101
49269: PUSH
49270: LD_INT 102
49272: PUSH
49273: LD_INT 103
49275: PUSH
49276: LD_INT 106
49278: PUSH
49279: LD_INT 108
49281: PUSH
49282: LD_INT 112
49284: PUSH
49285: LD_INT 113
49287: PUSH
49288: LD_INT 114
49290: PUSH
49291: LD_INT 116
49293: PUSH
49294: LD_INT 117
49296: PUSH
49297: LD_INT 118
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: ST_TO_ADDR
49317: GO 49948
49319: LD_INT 17
49321: DOUBLE
49322: EQUAL
49323: IFTRUE 49327
49325: GO 49551
49327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49328: LD_ADDR_VAR 0 2
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: LD_INT 4
49344: PUSH
49345: LD_INT 5
49347: PUSH
49348: LD_INT 6
49350: PUSH
49351: LD_INT 7
49353: PUSH
49354: LD_INT 8
49356: PUSH
49357: LD_INT 9
49359: PUSH
49360: LD_INT 10
49362: PUSH
49363: LD_INT 11
49365: PUSH
49366: LD_INT 12
49368: PUSH
49369: LD_INT 13
49371: PUSH
49372: LD_INT 14
49374: PUSH
49375: LD_INT 15
49377: PUSH
49378: LD_INT 16
49380: PUSH
49381: LD_INT 17
49383: PUSH
49384: LD_INT 18
49386: PUSH
49387: LD_INT 19
49389: PUSH
49390: LD_INT 20
49392: PUSH
49393: LD_INT 21
49395: PUSH
49396: LD_INT 22
49398: PUSH
49399: LD_INT 23
49401: PUSH
49402: LD_INT 24
49404: PUSH
49405: LD_INT 25
49407: PUSH
49408: LD_INT 26
49410: PUSH
49411: LD_INT 27
49413: PUSH
49414: LD_INT 28
49416: PUSH
49417: LD_INT 29
49419: PUSH
49420: LD_INT 30
49422: PUSH
49423: LD_INT 31
49425: PUSH
49426: LD_INT 32
49428: PUSH
49429: LD_INT 33
49431: PUSH
49432: LD_INT 34
49434: PUSH
49435: LD_INT 36
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 101
49477: PUSH
49478: LD_INT 102
49480: PUSH
49481: LD_INT 103
49483: PUSH
49484: LD_INT 104
49486: PUSH
49487: LD_INT 105
49489: PUSH
49490: LD_INT 106
49492: PUSH
49493: LD_INT 107
49495: PUSH
49496: LD_INT 108
49498: PUSH
49499: LD_INT 109
49501: PUSH
49502: LD_INT 110
49504: PUSH
49505: LD_INT 111
49507: PUSH
49508: LD_INT 112
49510: PUSH
49511: LD_INT 113
49513: PUSH
49514: LD_INT 114
49516: PUSH
49517: LD_INT 116
49519: PUSH
49520: LD_INT 117
49522: PUSH
49523: LD_INT 118
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: ST_TO_ADDR
49549: GO 49948
49551: LD_INT 18
49553: DOUBLE
49554: EQUAL
49555: IFTRUE 49559
49557: GO 49707
49559: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49560: LD_ADDR_VAR 0 2
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 4
49570: PUSH
49571: LD_INT 5
49573: PUSH
49574: LD_INT 7
49576: PUSH
49577: LD_INT 11
49579: PUSH
49580: LD_INT 12
49582: PUSH
49583: LD_INT 15
49585: PUSH
49586: LD_INT 16
49588: PUSH
49589: LD_INT 20
49591: PUSH
49592: LD_INT 21
49594: PUSH
49595: LD_INT 22
49597: PUSH
49598: LD_INT 23
49600: PUSH
49601: LD_INT 25
49603: PUSH
49604: LD_INT 26
49606: PUSH
49607: LD_INT 30
49609: PUSH
49610: LD_INT 31
49612: PUSH
49613: LD_INT 32
49615: PUSH
49616: LD_INT 33
49618: PUSH
49619: LD_INT 34
49621: PUSH
49622: LD_INT 35
49624: PUSH
49625: LD_INT 36
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 101
49653: PUSH
49654: LD_INT 102
49656: PUSH
49657: LD_INT 103
49659: PUSH
49660: LD_INT 106
49662: PUSH
49663: LD_INT 108
49665: PUSH
49666: LD_INT 112
49668: PUSH
49669: LD_INT 113
49671: PUSH
49672: LD_INT 114
49674: PUSH
49675: LD_INT 115
49677: PUSH
49678: LD_INT 116
49680: PUSH
49681: LD_INT 117
49683: PUSH
49684: LD_INT 118
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: ST_TO_ADDR
49705: GO 49948
49707: LD_INT 19
49709: DOUBLE
49710: EQUAL
49711: IFTRUE 49715
49713: GO 49947
49715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49716: LD_ADDR_VAR 0 2
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 4
49732: PUSH
49733: LD_INT 5
49735: PUSH
49736: LD_INT 6
49738: PUSH
49739: LD_INT 7
49741: PUSH
49742: LD_INT 8
49744: PUSH
49745: LD_INT 9
49747: PUSH
49748: LD_INT 10
49750: PUSH
49751: LD_INT 11
49753: PUSH
49754: LD_INT 12
49756: PUSH
49757: LD_INT 13
49759: PUSH
49760: LD_INT 14
49762: PUSH
49763: LD_INT 15
49765: PUSH
49766: LD_INT 16
49768: PUSH
49769: LD_INT 17
49771: PUSH
49772: LD_INT 18
49774: PUSH
49775: LD_INT 19
49777: PUSH
49778: LD_INT 20
49780: PUSH
49781: LD_INT 21
49783: PUSH
49784: LD_INT 22
49786: PUSH
49787: LD_INT 23
49789: PUSH
49790: LD_INT 24
49792: PUSH
49793: LD_INT 25
49795: PUSH
49796: LD_INT 26
49798: PUSH
49799: LD_INT 27
49801: PUSH
49802: LD_INT 28
49804: PUSH
49805: LD_INT 29
49807: PUSH
49808: LD_INT 30
49810: PUSH
49811: LD_INT 31
49813: PUSH
49814: LD_INT 32
49816: PUSH
49817: LD_INT 33
49819: PUSH
49820: LD_INT 34
49822: PUSH
49823: LD_INT 35
49825: PUSH
49826: LD_INT 36
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 101
49869: PUSH
49870: LD_INT 102
49872: PUSH
49873: LD_INT 103
49875: PUSH
49876: LD_INT 104
49878: PUSH
49879: LD_INT 105
49881: PUSH
49882: LD_INT 106
49884: PUSH
49885: LD_INT 107
49887: PUSH
49888: LD_INT 108
49890: PUSH
49891: LD_INT 109
49893: PUSH
49894: LD_INT 110
49896: PUSH
49897: LD_INT 111
49899: PUSH
49900: LD_INT 112
49902: PUSH
49903: LD_INT 113
49905: PUSH
49906: LD_INT 114
49908: PUSH
49909: LD_INT 115
49911: PUSH
49912: LD_INT 116
49914: PUSH
49915: LD_INT 117
49917: PUSH
49918: LD_INT 118
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: ST_TO_ADDR
49945: GO 49948
49947: POP
// end else
49948: GO 50179
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49950: LD_ADDR_VAR 0 2
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: LD_INT 4
49966: PUSH
49967: LD_INT 5
49969: PUSH
49970: LD_INT 6
49972: PUSH
49973: LD_INT 7
49975: PUSH
49976: LD_INT 8
49978: PUSH
49979: LD_INT 9
49981: PUSH
49982: LD_INT 10
49984: PUSH
49985: LD_INT 11
49987: PUSH
49988: LD_INT 12
49990: PUSH
49991: LD_INT 13
49993: PUSH
49994: LD_INT 14
49996: PUSH
49997: LD_INT 15
49999: PUSH
50000: LD_INT 16
50002: PUSH
50003: LD_INT 17
50005: PUSH
50006: LD_INT 18
50008: PUSH
50009: LD_INT 19
50011: PUSH
50012: LD_INT 20
50014: PUSH
50015: LD_INT 21
50017: PUSH
50018: LD_INT 22
50020: PUSH
50021: LD_INT 23
50023: PUSH
50024: LD_INT 24
50026: PUSH
50027: LD_INT 25
50029: PUSH
50030: LD_INT 26
50032: PUSH
50033: LD_INT 27
50035: PUSH
50036: LD_INT 28
50038: PUSH
50039: LD_INT 29
50041: PUSH
50042: LD_INT 30
50044: PUSH
50045: LD_INT 31
50047: PUSH
50048: LD_INT 32
50050: PUSH
50051: LD_INT 33
50053: PUSH
50054: LD_INT 34
50056: PUSH
50057: LD_INT 35
50059: PUSH
50060: LD_INT 36
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 101
50103: PUSH
50104: LD_INT 102
50106: PUSH
50107: LD_INT 103
50109: PUSH
50110: LD_INT 104
50112: PUSH
50113: LD_INT 105
50115: PUSH
50116: LD_INT 106
50118: PUSH
50119: LD_INT 107
50121: PUSH
50122: LD_INT 108
50124: PUSH
50125: LD_INT 109
50127: PUSH
50128: LD_INT 110
50130: PUSH
50131: LD_INT 111
50133: PUSH
50134: LD_INT 112
50136: PUSH
50137: LD_INT 113
50139: PUSH
50140: LD_INT 114
50142: PUSH
50143: LD_INT 115
50145: PUSH
50146: LD_INT 116
50148: PUSH
50149: LD_INT 117
50151: PUSH
50152: LD_INT 118
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// if result then
50179: LD_VAR 0 2
50183: IFFALSE 50969
// begin normal :=  ;
50185: LD_ADDR_VAR 0 5
50189: PUSH
50190: LD_STRING 
50192: ST_TO_ADDR
// hardcore :=  ;
50193: LD_ADDR_VAR 0 6
50197: PUSH
50198: LD_STRING 
50200: ST_TO_ADDR
// active :=  ;
50201: LD_ADDR_VAR 0 7
50205: PUSH
50206: LD_STRING 
50208: ST_TO_ADDR
// for i = 1 to normalCounter do
50209: LD_ADDR_VAR 0 8
50213: PUSH
50214: DOUBLE
50215: LD_INT 1
50217: DEC
50218: ST_TO_ADDR
50219: LD_EXP 15
50223: PUSH
50224: FOR_TO
50225: IFFALSE 50326
// begin tmp := 0 ;
50227: LD_ADDR_VAR 0 3
50231: PUSH
50232: LD_STRING 0
50234: ST_TO_ADDR
// if result [ 1 ] then
50235: LD_VAR 0 2
50239: PUSH
50240: LD_INT 1
50242: ARRAY
50243: IFFALSE 50308
// if result [ 1 ] [ 1 ] = i then
50245: LD_VAR 0 2
50249: PUSH
50250: LD_INT 1
50252: ARRAY
50253: PUSH
50254: LD_INT 1
50256: ARRAY
50257: PUSH
50258: LD_VAR 0 8
50262: EQUAL
50263: IFFALSE 50308
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50265: LD_ADDR_VAR 0 2
50269: PUSH
50270: LD_VAR 0 2
50274: PPUSH
50275: LD_INT 1
50277: PPUSH
50278: LD_VAR 0 2
50282: PUSH
50283: LD_INT 1
50285: ARRAY
50286: PPUSH
50287: LD_INT 1
50289: PPUSH
50290: CALL_OW 3
50294: PPUSH
50295: CALL_OW 1
50299: ST_TO_ADDR
// tmp := 1 ;
50300: LD_ADDR_VAR 0 3
50304: PUSH
50305: LD_STRING 1
50307: ST_TO_ADDR
// end ; normal := normal & tmp ;
50308: LD_ADDR_VAR 0 5
50312: PUSH
50313: LD_VAR 0 5
50317: PUSH
50318: LD_VAR 0 3
50322: STR
50323: ST_TO_ADDR
// end ;
50324: GO 50224
50326: POP
50327: POP
// for i = 1 to hardcoreCounter do
50328: LD_ADDR_VAR 0 8
50332: PUSH
50333: DOUBLE
50334: LD_INT 1
50336: DEC
50337: ST_TO_ADDR
50338: LD_EXP 16
50342: PUSH
50343: FOR_TO
50344: IFFALSE 50449
// begin tmp := 0 ;
50346: LD_ADDR_VAR 0 3
50350: PUSH
50351: LD_STRING 0
50353: ST_TO_ADDR
// if result [ 2 ] then
50354: LD_VAR 0 2
50358: PUSH
50359: LD_INT 2
50361: ARRAY
50362: IFFALSE 50431
// if result [ 2 ] [ 1 ] = 100 + i then
50364: LD_VAR 0 2
50368: PUSH
50369: LD_INT 2
50371: ARRAY
50372: PUSH
50373: LD_INT 1
50375: ARRAY
50376: PUSH
50377: LD_INT 100
50379: PUSH
50380: LD_VAR 0 8
50384: PLUS
50385: EQUAL
50386: IFFALSE 50431
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50388: LD_ADDR_VAR 0 2
50392: PUSH
50393: LD_VAR 0 2
50397: PPUSH
50398: LD_INT 2
50400: PPUSH
50401: LD_VAR 0 2
50405: PUSH
50406: LD_INT 2
50408: ARRAY
50409: PPUSH
50410: LD_INT 1
50412: PPUSH
50413: CALL_OW 3
50417: PPUSH
50418: CALL_OW 1
50422: ST_TO_ADDR
// tmp := 1 ;
50423: LD_ADDR_VAR 0 3
50427: PUSH
50428: LD_STRING 1
50430: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50431: LD_ADDR_VAR 0 6
50435: PUSH
50436: LD_VAR 0 6
50440: PUSH
50441: LD_VAR 0 3
50445: STR
50446: ST_TO_ADDR
// end ;
50447: GO 50343
50449: POP
50450: POP
// if isGameLoad then
50451: LD_VAR 0 1
50455: IFFALSE 50930
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50457: LD_ADDR_VAR 0 4
50461: PUSH
50462: LD_EXP 19
50466: PUSH
50467: LD_EXP 18
50471: PUSH
50472: LD_EXP 20
50476: PUSH
50477: LD_EXP 17
50481: PUSH
50482: LD_EXP 21
50486: PUSH
50487: LD_EXP 22
50491: PUSH
50492: LD_EXP 23
50496: PUSH
50497: LD_EXP 24
50501: PUSH
50502: LD_EXP 25
50506: PUSH
50507: LD_EXP 26
50511: PUSH
50512: LD_EXP 27
50516: PUSH
50517: LD_EXP 28
50521: PUSH
50522: LD_EXP 29
50526: PUSH
50527: LD_EXP 30
50531: PUSH
50532: LD_EXP 38
50536: PUSH
50537: LD_EXP 39
50541: PUSH
50542: LD_EXP 40
50546: PUSH
50547: LD_EXP 41
50551: PUSH
50552: LD_EXP 43
50556: PUSH
50557: LD_EXP 44
50561: PUSH
50562: LD_EXP 45
50566: PUSH
50567: LD_EXP 48
50571: PUSH
50572: LD_EXP 50
50576: PUSH
50577: LD_EXP 51
50581: PUSH
50582: LD_EXP 52
50586: PUSH
50587: LD_EXP 54
50591: PUSH
50592: LD_EXP 55
50596: PUSH
50597: LD_EXP 58
50601: PUSH
50602: LD_EXP 59
50606: PUSH
50607: LD_EXP 60
50611: PUSH
50612: LD_EXP 61
50616: PUSH
50617: LD_EXP 62
50621: PUSH
50622: LD_EXP 63
50626: PUSH
50627: LD_EXP 64
50631: PUSH
50632: LD_EXP 65
50636: PUSH
50637: LD_EXP 66
50641: PUSH
50642: LD_EXP 31
50646: PUSH
50647: LD_EXP 32
50651: PUSH
50652: LD_EXP 35
50656: PUSH
50657: LD_EXP 36
50661: PUSH
50662: LD_EXP 37
50666: PUSH
50667: LD_EXP 33
50671: PUSH
50672: LD_EXP 34
50676: PUSH
50677: LD_EXP 42
50681: PUSH
50682: LD_EXP 46
50686: PUSH
50687: LD_EXP 47
50691: PUSH
50692: LD_EXP 49
50696: PUSH
50697: LD_EXP 53
50701: PUSH
50702: LD_EXP 56
50706: PUSH
50707: LD_EXP 57
50711: PUSH
50712: LD_EXP 67
50716: PUSH
50717: LD_EXP 68
50721: PUSH
50722: LD_EXP 69
50726: PUSH
50727: LD_EXP 70
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: ST_TO_ADDR
// tmp :=  ;
50788: LD_ADDR_VAR 0 3
50792: PUSH
50793: LD_STRING 
50795: ST_TO_ADDR
// for i = 1 to normalCounter do
50796: LD_ADDR_VAR 0 8
50800: PUSH
50801: DOUBLE
50802: LD_INT 1
50804: DEC
50805: ST_TO_ADDR
50806: LD_EXP 15
50810: PUSH
50811: FOR_TO
50812: IFFALSE 50848
// begin if flags [ i ] then
50814: LD_VAR 0 4
50818: PUSH
50819: LD_VAR 0 8
50823: ARRAY
50824: IFFALSE 50846
// tmp := tmp & i & ; ;
50826: LD_ADDR_VAR 0 3
50830: PUSH
50831: LD_VAR 0 3
50835: PUSH
50836: LD_VAR 0 8
50840: STR
50841: PUSH
50842: LD_STRING ;
50844: STR
50845: ST_TO_ADDR
// end ;
50846: GO 50811
50848: POP
50849: POP
// for i = 1 to hardcoreCounter do
50850: LD_ADDR_VAR 0 8
50854: PUSH
50855: DOUBLE
50856: LD_INT 1
50858: DEC
50859: ST_TO_ADDR
50860: LD_EXP 16
50864: PUSH
50865: FOR_TO
50866: IFFALSE 50912
// begin if flags [ normalCounter + i ] then
50868: LD_VAR 0 4
50872: PUSH
50873: LD_EXP 15
50877: PUSH
50878: LD_VAR 0 8
50882: PLUS
50883: ARRAY
50884: IFFALSE 50910
// tmp := tmp & ( 100 + i ) & ; ;
50886: LD_ADDR_VAR 0 3
50890: PUSH
50891: LD_VAR 0 3
50895: PUSH
50896: LD_INT 100
50898: PUSH
50899: LD_VAR 0 8
50903: PLUS
50904: STR
50905: PUSH
50906: LD_STRING ;
50908: STR
50909: ST_TO_ADDR
// end ;
50910: GO 50865
50912: POP
50913: POP
// if tmp then
50914: LD_VAR 0 3
50918: IFFALSE 50930
// active := tmp ;
50920: LD_ADDR_VAR 0 7
50924: PUSH
50925: LD_VAR 0 3
50929: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
50930: LD_STRING getStreamItemsFromMission("
50932: PUSH
50933: LD_VAR 0 5
50937: STR
50938: PUSH
50939: LD_STRING ","
50941: STR
50942: PUSH
50943: LD_VAR 0 6
50947: STR
50948: PUSH
50949: LD_STRING ","
50951: STR
50952: PUSH
50953: LD_VAR 0 7
50957: STR
50958: PUSH
50959: LD_STRING ")
50961: STR
50962: PPUSH
50963: CALL_OW 559
// end else
50967: GO 50976
// ToLua ( getStreamItemsFromMission("","","") ) ;
50969: LD_STRING getStreamItemsFromMission("","","")
50971: PPUSH
50972: CALL_OW 559
// end ;
50976: LD_VAR 0 2
50980: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50981: LD_EXP 14
50985: PUSH
50986: LD_EXP 19
50990: AND
50991: IFFALSE 51115
50993: GO 50995
50995: DISABLE
50996: LD_INT 0
50998: PPUSH
50999: PPUSH
// begin enable ;
51000: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51001: LD_ADDR_VAR 0 2
51005: PUSH
51006: LD_INT 22
51008: PUSH
51009: LD_OWVAR 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 34
51023: PUSH
51024: LD_INT 7
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 34
51033: PUSH
51034: LD_INT 45
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 34
51043: PUSH
51044: LD_INT 28
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 34
51053: PUSH
51054: LD_INT 47
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PPUSH
51072: CALL_OW 69
51076: ST_TO_ADDR
// if not tmp then
51077: LD_VAR 0 2
51081: NOT
51082: IFFALSE 51086
// exit ;
51084: GO 51115
// for i in tmp do
51086: LD_ADDR_VAR 0 1
51090: PUSH
51091: LD_VAR 0 2
51095: PUSH
51096: FOR_IN
51097: IFFALSE 51113
// begin SetLives ( i , 0 ) ;
51099: LD_VAR 0 1
51103: PPUSH
51104: LD_INT 0
51106: PPUSH
51107: CALL_OW 234
// end ;
51111: GO 51096
51113: POP
51114: POP
// end ;
51115: PPOPN 2
51117: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51118: LD_EXP 14
51122: PUSH
51123: LD_EXP 20
51127: AND
51128: IFFALSE 51212
51130: GO 51132
51132: DISABLE
51133: LD_INT 0
51135: PPUSH
51136: PPUSH
// begin enable ;
51137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51138: LD_ADDR_VAR 0 2
51142: PUSH
51143: LD_INT 22
51145: PUSH
51146: LD_OWVAR 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 32
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PPUSH
51169: CALL_OW 69
51173: ST_TO_ADDR
// if not tmp then
51174: LD_VAR 0 2
51178: NOT
51179: IFFALSE 51183
// exit ;
51181: GO 51212
// for i in tmp do
51183: LD_ADDR_VAR 0 1
51187: PUSH
51188: LD_VAR 0 2
51192: PUSH
51193: FOR_IN
51194: IFFALSE 51210
// begin SetLives ( i , 0 ) ;
51196: LD_VAR 0 1
51200: PPUSH
51201: LD_INT 0
51203: PPUSH
51204: CALL_OW 234
// end ;
51208: GO 51193
51210: POP
51211: POP
// end ;
51212: PPOPN 2
51214: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51215: LD_EXP 14
51219: PUSH
51220: LD_EXP 17
51224: AND
51225: IFFALSE 51318
51227: GO 51229
51229: DISABLE
51230: LD_INT 0
51232: PPUSH
// begin enable ;
51233: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51234: LD_ADDR_VAR 0 1
51238: PUSH
51239: LD_INT 22
51241: PUSH
51242: LD_OWVAR 2
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 25
51256: PUSH
51257: LD_INT 5
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 25
51266: PUSH
51267: LD_INT 9
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 25
51276: PUSH
51277: LD_INT 8
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PPUSH
51294: CALL_OW 69
51298: PUSH
51299: FOR_IN
51300: IFFALSE 51316
// begin SetClass ( i , 1 ) ;
51302: LD_VAR 0 1
51306: PPUSH
51307: LD_INT 1
51309: PPUSH
51310: CALL_OW 336
// end ;
51314: GO 51299
51316: POP
51317: POP
// end ;
51318: PPOPN 1
51320: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51321: LD_EXP 14
51325: PUSH
51326: LD_EXP 18
51330: AND
51331: PUSH
51332: LD_OWVAR 65
51336: PUSH
51337: LD_INT 7
51339: LESS
51340: AND
51341: IFFALSE 51355
51343: GO 51345
51345: DISABLE
// begin enable ;
51346: ENABLE
// game_speed := 7 ;
51347: LD_ADDR_OWVAR 65
51351: PUSH
51352: LD_INT 7
51354: ST_TO_ADDR
// end ;
51355: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51356: LD_EXP 14
51360: PUSH
51361: LD_EXP 21
51365: AND
51366: IFFALSE 51568
51368: GO 51370
51370: DISABLE
51371: LD_INT 0
51373: PPUSH
51374: PPUSH
51375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51376: LD_ADDR_VAR 0 3
51380: PUSH
51381: LD_INT 81
51383: PUSH
51384: LD_OWVAR 2
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 21
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PPUSH
51407: CALL_OW 69
51411: ST_TO_ADDR
// if not tmp then
51412: LD_VAR 0 3
51416: NOT
51417: IFFALSE 51421
// exit ;
51419: GO 51568
// if tmp > 5 then
51421: LD_VAR 0 3
51425: PUSH
51426: LD_INT 5
51428: GREATER
51429: IFFALSE 51441
// k := 5 else
51431: LD_ADDR_VAR 0 2
51435: PUSH
51436: LD_INT 5
51438: ST_TO_ADDR
51439: GO 51451
// k := tmp ;
51441: LD_ADDR_VAR 0 2
51445: PUSH
51446: LD_VAR 0 3
51450: ST_TO_ADDR
// for i := 1 to k do
51451: LD_ADDR_VAR 0 1
51455: PUSH
51456: DOUBLE
51457: LD_INT 1
51459: DEC
51460: ST_TO_ADDR
51461: LD_VAR 0 2
51465: PUSH
51466: FOR_TO
51467: IFFALSE 51566
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51469: LD_VAR 0 3
51473: PUSH
51474: LD_VAR 0 1
51478: ARRAY
51479: PPUSH
51480: LD_VAR 0 1
51484: PUSH
51485: LD_INT 4
51487: MOD
51488: PUSH
51489: LD_INT 1
51491: PLUS
51492: PPUSH
51493: CALL_OW 259
51497: PUSH
51498: LD_INT 10
51500: LESS
51501: IFFALSE 51564
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51503: LD_VAR 0 3
51507: PUSH
51508: LD_VAR 0 1
51512: ARRAY
51513: PPUSH
51514: LD_VAR 0 1
51518: PUSH
51519: LD_INT 4
51521: MOD
51522: PUSH
51523: LD_INT 1
51525: PLUS
51526: PPUSH
51527: LD_VAR 0 3
51531: PUSH
51532: LD_VAR 0 1
51536: ARRAY
51537: PPUSH
51538: LD_VAR 0 1
51542: PUSH
51543: LD_INT 4
51545: MOD
51546: PUSH
51547: LD_INT 1
51549: PLUS
51550: PPUSH
51551: CALL_OW 259
51555: PUSH
51556: LD_INT 1
51558: PLUS
51559: PPUSH
51560: CALL_OW 237
51564: GO 51466
51566: POP
51567: POP
// end ;
51568: PPOPN 3
51570: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51571: LD_EXP 14
51575: PUSH
51576: LD_EXP 22
51580: AND
51581: IFFALSE 51601
51583: GO 51585
51585: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51586: LD_INT 4
51588: PPUSH
51589: LD_OWVAR 2
51593: PPUSH
51594: LD_INT 0
51596: PPUSH
51597: CALL_OW 324
51601: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51602: LD_EXP 14
51606: PUSH
51607: LD_EXP 51
51611: AND
51612: IFFALSE 51632
51614: GO 51616
51616: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51617: LD_INT 19
51619: PPUSH
51620: LD_OWVAR 2
51624: PPUSH
51625: LD_INT 0
51627: PPUSH
51628: CALL_OW 324
51632: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51633: LD_EXP 14
51637: PUSH
51638: LD_EXP 23
51642: AND
51643: IFFALSE 51745
51645: GO 51647
51647: DISABLE
51648: LD_INT 0
51650: PPUSH
51651: PPUSH
// begin enable ;
51652: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51653: LD_ADDR_VAR 0 2
51657: PUSH
51658: LD_INT 22
51660: PUSH
51661: LD_OWVAR 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 34
51675: PUSH
51676: LD_INT 11
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 34
51685: PUSH
51686: LD_INT 30
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PPUSH
51702: CALL_OW 69
51706: ST_TO_ADDR
// if not tmp then
51707: LD_VAR 0 2
51711: NOT
51712: IFFALSE 51716
// exit ;
51714: GO 51745
// for i in tmp do
51716: LD_ADDR_VAR 0 1
51720: PUSH
51721: LD_VAR 0 2
51725: PUSH
51726: FOR_IN
51727: IFFALSE 51743
// begin SetLives ( i , 0 ) ;
51729: LD_VAR 0 1
51733: PPUSH
51734: LD_INT 0
51736: PPUSH
51737: CALL_OW 234
// end ;
51741: GO 51726
51743: POP
51744: POP
// end ;
51745: PPOPN 2
51747: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51748: LD_EXP 14
51752: PUSH
51753: LD_EXP 24
51757: AND
51758: IFFALSE 51778
51760: GO 51762
51762: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51763: LD_INT 32
51765: PPUSH
51766: LD_OWVAR 2
51770: PPUSH
51771: LD_INT 0
51773: PPUSH
51774: CALL_OW 324
51778: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51779: LD_EXP 14
51783: PUSH
51784: LD_EXP 25
51788: AND
51789: IFFALSE 51970
51791: GO 51793
51793: DISABLE
51794: LD_INT 0
51796: PPUSH
51797: PPUSH
51798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51799: LD_ADDR_VAR 0 2
51803: PUSH
51804: LD_INT 22
51806: PUSH
51807: LD_OWVAR 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 33
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PPUSH
51830: CALL_OW 69
51834: ST_TO_ADDR
// if not tmp then
51835: LD_VAR 0 2
51839: NOT
51840: IFFALSE 51844
// exit ;
51842: GO 51970
// side := 0 ;
51844: LD_ADDR_VAR 0 3
51848: PUSH
51849: LD_INT 0
51851: ST_TO_ADDR
// for i := 1 to 8 do
51852: LD_ADDR_VAR 0 1
51856: PUSH
51857: DOUBLE
51858: LD_INT 1
51860: DEC
51861: ST_TO_ADDR
51862: LD_INT 8
51864: PUSH
51865: FOR_TO
51866: IFFALSE 51914
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
51868: LD_OWVAR 2
51872: PUSH
51873: LD_VAR 0 1
51877: NONEQUAL
51878: PUSH
51879: LD_OWVAR 2
51883: PPUSH
51884: LD_VAR 0 1
51888: PPUSH
51889: CALL_OW 81
51893: PUSH
51894: LD_INT 2
51896: EQUAL
51897: AND
51898: IFFALSE 51912
// begin side := i ;
51900: LD_ADDR_VAR 0 3
51904: PUSH
51905: LD_VAR 0 1
51909: ST_TO_ADDR
// break ;
51910: GO 51914
// end ;
51912: GO 51865
51914: POP
51915: POP
// if not side then
51916: LD_VAR 0 3
51920: NOT
51921: IFFALSE 51925
// exit ;
51923: GO 51970
// for i := 1 to tmp do
51925: LD_ADDR_VAR 0 1
51929: PUSH
51930: DOUBLE
51931: LD_INT 1
51933: DEC
51934: ST_TO_ADDR
51935: LD_VAR 0 2
51939: PUSH
51940: FOR_TO
51941: IFFALSE 51968
// if Prob ( 60 ) then
51943: LD_INT 60
51945: PPUSH
51946: CALL_OW 13
51950: IFFALSE 51966
// SetSide ( i , side ) ;
51952: LD_VAR 0 1
51956: PPUSH
51957: LD_VAR 0 3
51961: PPUSH
51962: CALL_OW 235
51966: GO 51940
51968: POP
51969: POP
// end ;
51970: PPOPN 3
51972: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51973: LD_EXP 14
51977: PUSH
51978: LD_EXP 27
51982: AND
51983: IFFALSE 52102
51985: GO 51987
51987: DISABLE
51988: LD_INT 0
51990: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51991: LD_ADDR_VAR 0 1
51995: PUSH
51996: LD_INT 22
51998: PUSH
51999: LD_OWVAR 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 21
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 23
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: PPUSH
52040: CALL_OW 69
52044: PUSH
52045: FOR_IN
52046: IFFALSE 52100
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52048: LD_VAR 0 1
52052: PPUSH
52053: CALL_OW 257
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: IN
52076: IFFALSE 52098
// SetClass ( un , rand ( 1 , 4 ) ) ;
52078: LD_VAR 0 1
52082: PPUSH
52083: LD_INT 1
52085: PPUSH
52086: LD_INT 4
52088: PPUSH
52089: CALL_OW 12
52093: PPUSH
52094: CALL_OW 336
52098: GO 52045
52100: POP
52101: POP
// end ;
52102: PPOPN 1
52104: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52105: LD_EXP 14
52109: PUSH
52110: LD_EXP 26
52114: AND
52115: IFFALSE 52194
52117: GO 52119
52119: DISABLE
52120: LD_INT 0
52122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52123: LD_ADDR_VAR 0 1
52127: PUSH
52128: LD_INT 22
52130: PUSH
52131: LD_OWVAR 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 21
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PPUSH
52154: CALL_OW 69
52158: ST_TO_ADDR
// if not tmp then
52159: LD_VAR 0 1
52163: NOT
52164: IFFALSE 52168
// exit ;
52166: GO 52194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52168: LD_VAR 0 1
52172: PUSH
52173: LD_INT 1
52175: PPUSH
52176: LD_VAR 0 1
52180: PPUSH
52181: CALL_OW 12
52185: ARRAY
52186: PPUSH
52187: LD_INT 100
52189: PPUSH
52190: CALL_OW 234
// end ;
52194: PPOPN 1
52196: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52197: LD_EXP 14
52201: PUSH
52202: LD_EXP 28
52206: AND
52207: IFFALSE 52305
52209: GO 52211
52211: DISABLE
52212: LD_INT 0
52214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52215: LD_ADDR_VAR 0 1
52219: PUSH
52220: LD_INT 22
52222: PUSH
52223: LD_OWVAR 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 21
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PPUSH
52246: CALL_OW 69
52250: ST_TO_ADDR
// if not tmp then
52251: LD_VAR 0 1
52255: NOT
52256: IFFALSE 52260
// exit ;
52258: GO 52305
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52260: LD_VAR 0 1
52264: PUSH
52265: LD_INT 1
52267: PPUSH
52268: LD_VAR 0 1
52272: PPUSH
52273: CALL_OW 12
52277: ARRAY
52278: PPUSH
52279: LD_INT 1
52281: PPUSH
52282: LD_INT 4
52284: PPUSH
52285: CALL_OW 12
52289: PPUSH
52290: LD_INT 3000
52292: PPUSH
52293: LD_INT 9000
52295: PPUSH
52296: CALL_OW 12
52300: PPUSH
52301: CALL_OW 492
// end ;
52305: PPOPN 1
52307: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52308: LD_EXP 14
52312: PUSH
52313: LD_EXP 29
52317: AND
52318: IFFALSE 52338
52320: GO 52322
52322: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52323: LD_INT 1
52325: PPUSH
52326: LD_OWVAR 2
52330: PPUSH
52331: LD_INT 0
52333: PPUSH
52334: CALL_OW 324
52338: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52339: LD_EXP 14
52343: PUSH
52344: LD_EXP 30
52348: AND
52349: IFFALSE 52432
52351: GO 52353
52353: DISABLE
52354: LD_INT 0
52356: PPUSH
52357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52358: LD_ADDR_VAR 0 2
52362: PUSH
52363: LD_INT 22
52365: PUSH
52366: LD_OWVAR 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 21
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PPUSH
52389: CALL_OW 69
52393: ST_TO_ADDR
// if not tmp then
52394: LD_VAR 0 2
52398: NOT
52399: IFFALSE 52403
// exit ;
52401: GO 52432
// for i in tmp do
52403: LD_ADDR_VAR 0 1
52407: PUSH
52408: LD_VAR 0 2
52412: PUSH
52413: FOR_IN
52414: IFFALSE 52430
// SetBLevel ( i , 10 ) ;
52416: LD_VAR 0 1
52420: PPUSH
52421: LD_INT 10
52423: PPUSH
52424: CALL_OW 241
52428: GO 52413
52430: POP
52431: POP
// end ;
52432: PPOPN 2
52434: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52435: LD_EXP 14
52439: PUSH
52440: LD_EXP 31
52444: AND
52445: IFFALSE 52556
52447: GO 52449
52449: DISABLE
52450: LD_INT 0
52452: PPUSH
52453: PPUSH
52454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52455: LD_ADDR_VAR 0 3
52459: PUSH
52460: LD_INT 22
52462: PUSH
52463: LD_OWVAR 2
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 25
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PPUSH
52486: CALL_OW 69
52490: ST_TO_ADDR
// if not tmp then
52491: LD_VAR 0 3
52495: NOT
52496: IFFALSE 52500
// exit ;
52498: GO 52556
// un := tmp [ rand ( 1 , tmp ) ] ;
52500: LD_ADDR_VAR 0 2
52504: PUSH
52505: LD_VAR 0 3
52509: PUSH
52510: LD_INT 1
52512: PPUSH
52513: LD_VAR 0 3
52517: PPUSH
52518: CALL_OW 12
52522: ARRAY
52523: ST_TO_ADDR
// if Crawls ( un ) then
52524: LD_VAR 0 2
52528: PPUSH
52529: CALL_OW 318
52533: IFFALSE 52544
// ComWalk ( un ) ;
52535: LD_VAR 0 2
52539: PPUSH
52540: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52544: LD_VAR 0 2
52548: PPUSH
52549: LD_INT 5
52551: PPUSH
52552: CALL_OW 336
// end ;
52556: PPOPN 3
52558: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52559: LD_EXP 14
52563: PUSH
52564: LD_EXP 32
52568: AND
52569: PUSH
52570: LD_OWVAR 67
52574: PUSH
52575: LD_INT 4
52577: LESS
52578: AND
52579: IFFALSE 52598
52581: GO 52583
52583: DISABLE
// begin Difficulty := Difficulty + 1 ;
52584: LD_ADDR_OWVAR 67
52588: PUSH
52589: LD_OWVAR 67
52593: PUSH
52594: LD_INT 1
52596: PLUS
52597: ST_TO_ADDR
// end ;
52598: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52599: LD_EXP 14
52603: PUSH
52604: LD_EXP 33
52608: AND
52609: IFFALSE 52712
52611: GO 52613
52613: DISABLE
52614: LD_INT 0
52616: PPUSH
// begin for i := 1 to 5 do
52617: LD_ADDR_VAR 0 1
52621: PUSH
52622: DOUBLE
52623: LD_INT 1
52625: DEC
52626: ST_TO_ADDR
52627: LD_INT 5
52629: PUSH
52630: FOR_TO
52631: IFFALSE 52710
// begin uc_nation := nation_nature ;
52633: LD_ADDR_OWVAR 21
52637: PUSH
52638: LD_INT 0
52640: ST_TO_ADDR
// uc_side := 0 ;
52641: LD_ADDR_OWVAR 20
52645: PUSH
52646: LD_INT 0
52648: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52649: LD_ADDR_OWVAR 29
52653: PUSH
52654: LD_INT 12
52656: PUSH
52657: LD_INT 12
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// hc_agressivity := 20 ;
52664: LD_ADDR_OWVAR 35
52668: PUSH
52669: LD_INT 20
52671: ST_TO_ADDR
// hc_class := class_tiger ;
52672: LD_ADDR_OWVAR 28
52676: PUSH
52677: LD_INT 14
52679: ST_TO_ADDR
// hc_gallery :=  ;
52680: LD_ADDR_OWVAR 33
52684: PUSH
52685: LD_STRING 
52687: ST_TO_ADDR
// hc_name :=  ;
52688: LD_ADDR_OWVAR 26
52692: PUSH
52693: LD_STRING 
52695: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52696: CALL_OW 44
52700: PPUSH
52701: LD_INT 0
52703: PPUSH
52704: CALL_OW 51
// end ;
52708: GO 52630
52710: POP
52711: POP
// end ;
52712: PPOPN 1
52714: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52715: LD_EXP 14
52719: PUSH
52720: LD_EXP 34
52724: AND
52725: IFFALSE 52734
52727: GO 52729
52729: DISABLE
// StreamSibBomb ;
52730: CALL 52735 0 0
52734: END
// export function StreamSibBomb ; var i , x , y ; begin
52735: LD_INT 0
52737: PPUSH
52738: PPUSH
52739: PPUSH
52740: PPUSH
// result := false ;
52741: LD_ADDR_VAR 0 1
52745: PUSH
52746: LD_INT 0
52748: ST_TO_ADDR
// for i := 1 to 16 do
52749: LD_ADDR_VAR 0 2
52753: PUSH
52754: DOUBLE
52755: LD_INT 1
52757: DEC
52758: ST_TO_ADDR
52759: LD_INT 16
52761: PUSH
52762: FOR_TO
52763: IFFALSE 52962
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52765: LD_ADDR_VAR 0 3
52769: PUSH
52770: LD_INT 10
52772: PUSH
52773: LD_INT 20
52775: PUSH
52776: LD_INT 30
52778: PUSH
52779: LD_INT 40
52781: PUSH
52782: LD_INT 50
52784: PUSH
52785: LD_INT 60
52787: PUSH
52788: LD_INT 70
52790: PUSH
52791: LD_INT 80
52793: PUSH
52794: LD_INT 90
52796: PUSH
52797: LD_INT 100
52799: PUSH
52800: LD_INT 110
52802: PUSH
52803: LD_INT 120
52805: PUSH
52806: LD_INT 130
52808: PUSH
52809: LD_INT 140
52811: PUSH
52812: LD_INT 150
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PPUSH
52835: LD_INT 15
52837: PPUSH
52838: CALL_OW 12
52842: ARRAY
52843: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52844: LD_ADDR_VAR 0 4
52848: PUSH
52849: LD_INT 10
52851: PUSH
52852: LD_INT 20
52854: PUSH
52855: LD_INT 30
52857: PUSH
52858: LD_INT 40
52860: PUSH
52861: LD_INT 50
52863: PUSH
52864: LD_INT 60
52866: PUSH
52867: LD_INT 70
52869: PUSH
52870: LD_INT 80
52872: PUSH
52873: LD_INT 90
52875: PUSH
52876: LD_INT 100
52878: PUSH
52879: LD_INT 110
52881: PUSH
52882: LD_INT 120
52884: PUSH
52885: LD_INT 130
52887: PUSH
52888: LD_INT 140
52890: PUSH
52891: LD_INT 150
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: PPUSH
52914: LD_INT 15
52916: PPUSH
52917: CALL_OW 12
52921: ARRAY
52922: ST_TO_ADDR
// if ValidHex ( x , y ) then
52923: LD_VAR 0 3
52927: PPUSH
52928: LD_VAR 0 4
52932: PPUSH
52933: CALL_OW 488
52937: IFFALSE 52960
// begin result := [ x , y ] ;
52939: LD_ADDR_VAR 0 1
52943: PUSH
52944: LD_VAR 0 3
52948: PUSH
52949: LD_VAR 0 4
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// break ;
52958: GO 52962
// end ; end ;
52960: GO 52762
52962: POP
52963: POP
// if result then
52964: LD_VAR 0 1
52968: IFFALSE 53028
// begin ToLua ( playSibBomb() ) ;
52970: LD_STRING playSibBomb()
52972: PPUSH
52973: CALL_OW 559
// wait ( 0 0$14 ) ;
52977: LD_INT 490
52979: PPUSH
52980: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52984: LD_VAR 0 1
52988: PUSH
52989: LD_INT 1
52991: ARRAY
52992: PPUSH
52993: LD_VAR 0 1
52997: PUSH
52998: LD_INT 2
53000: ARRAY
53001: PPUSH
53002: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53006: LD_VAR 0 1
53010: PUSH
53011: LD_INT 1
53013: ARRAY
53014: PPUSH
53015: LD_VAR 0 1
53019: PUSH
53020: LD_INT 2
53022: ARRAY
53023: PPUSH
53024: CALL_OW 429
// end ; end ;
53028: LD_VAR 0 1
53032: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53033: LD_EXP 14
53037: PUSH
53038: LD_EXP 36
53042: AND
53043: IFFALSE 53055
53045: GO 53047
53047: DISABLE
// YouLost (  ) ;
53048: LD_STRING 
53050: PPUSH
53051: CALL_OW 104
53055: END
// every 0 0$1 trigger StreamModeActive and sFog do
53056: LD_EXP 14
53060: PUSH
53061: LD_EXP 35
53065: AND
53066: IFFALSE 53080
53068: GO 53070
53070: DISABLE
// FogOff ( your_side ) ;
53071: LD_OWVAR 2
53075: PPUSH
53076: CALL_OW 344
53080: END
// every 0 0$1 trigger StreamModeActive and sSun do
53081: LD_EXP 14
53085: PUSH
53086: LD_EXP 37
53090: AND
53091: IFFALSE 53119
53093: GO 53095
53095: DISABLE
// begin solar_recharge_percent := 0 ;
53096: LD_ADDR_OWVAR 79
53100: PUSH
53101: LD_INT 0
53103: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53104: LD_INT 10500
53106: PPUSH
53107: CALL_OW 67
// solar_recharge_percent := 100 ;
53111: LD_ADDR_OWVAR 79
53115: PUSH
53116: LD_INT 100
53118: ST_TO_ADDR
// end ;
53119: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53120: LD_EXP 14
53124: PUSH
53125: LD_EXP 38
53129: AND
53130: IFFALSE 53369
53132: GO 53134
53134: DISABLE
53135: LD_INT 0
53137: PPUSH
53138: PPUSH
53139: PPUSH
// begin tmp := [ ] ;
53140: LD_ADDR_VAR 0 3
53144: PUSH
53145: EMPTY
53146: ST_TO_ADDR
// for i := 1 to 6 do
53147: LD_ADDR_VAR 0 1
53151: PUSH
53152: DOUBLE
53153: LD_INT 1
53155: DEC
53156: ST_TO_ADDR
53157: LD_INT 6
53159: PUSH
53160: FOR_TO
53161: IFFALSE 53266
// begin uc_nation := nation_nature ;
53163: LD_ADDR_OWVAR 21
53167: PUSH
53168: LD_INT 0
53170: ST_TO_ADDR
// uc_side := 0 ;
53171: LD_ADDR_OWVAR 20
53175: PUSH
53176: LD_INT 0
53178: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53179: LD_ADDR_OWVAR 29
53183: PUSH
53184: LD_INT 12
53186: PUSH
53187: LD_INT 12
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// hc_agressivity := 20 ;
53194: LD_ADDR_OWVAR 35
53198: PUSH
53199: LD_INT 20
53201: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53202: LD_ADDR_OWVAR 28
53206: PUSH
53207: LD_INT 17
53209: ST_TO_ADDR
// hc_gallery :=  ;
53210: LD_ADDR_OWVAR 33
53214: PUSH
53215: LD_STRING 
53217: ST_TO_ADDR
// hc_name :=  ;
53218: LD_ADDR_OWVAR 26
53222: PUSH
53223: LD_STRING 
53225: ST_TO_ADDR
// un := CreateHuman ;
53226: LD_ADDR_VAR 0 2
53230: PUSH
53231: CALL_OW 44
53235: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53236: LD_VAR 0 2
53240: PPUSH
53241: LD_INT 1
53243: PPUSH
53244: CALL_OW 51
// tmp := tmp ^ un ;
53248: LD_ADDR_VAR 0 3
53252: PUSH
53253: LD_VAR 0 3
53257: PUSH
53258: LD_VAR 0 2
53262: ADD
53263: ST_TO_ADDR
// end ;
53264: GO 53160
53266: POP
53267: POP
// repeat wait ( 0 0$1 ) ;
53268: LD_INT 35
53270: PPUSH
53271: CALL_OW 67
// for un in tmp do
53275: LD_ADDR_VAR 0 2
53279: PUSH
53280: LD_VAR 0 3
53284: PUSH
53285: FOR_IN
53286: IFFALSE 53360
// begin if IsDead ( un ) then
53288: LD_VAR 0 2
53292: PPUSH
53293: CALL_OW 301
53297: IFFALSE 53317
// begin tmp := tmp diff un ;
53299: LD_ADDR_VAR 0 3
53303: PUSH
53304: LD_VAR 0 3
53308: PUSH
53309: LD_VAR 0 2
53313: DIFF
53314: ST_TO_ADDR
// continue ;
53315: GO 53285
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53317: LD_VAR 0 2
53321: PPUSH
53322: LD_INT 3
53324: PUSH
53325: LD_INT 22
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PPUSH
53339: CALL_OW 69
53343: PPUSH
53344: LD_VAR 0 2
53348: PPUSH
53349: CALL_OW 74
53353: PPUSH
53354: CALL_OW 115
// end ;
53358: GO 53285
53360: POP
53361: POP
// until not tmp ;
53362: LD_VAR 0 3
53366: NOT
53367: IFFALSE 53268
// end ;
53369: PPOPN 3
53371: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53372: LD_EXP 14
53376: PUSH
53377: LD_EXP 39
53381: AND
53382: IFFALSE 53436
53384: GO 53386
53386: DISABLE
// begin ToLua ( displayTroll(); ) ;
53387: LD_STRING displayTroll();
53389: PPUSH
53390: CALL_OW 559
// wait ( 3 3$00 ) ;
53394: LD_INT 6300
53396: PPUSH
53397: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53401: LD_STRING hideTroll();
53403: PPUSH
53404: CALL_OW 559
// wait ( 1 1$00 ) ;
53408: LD_INT 2100
53410: PPUSH
53411: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53415: LD_STRING displayTroll();
53417: PPUSH
53418: CALL_OW 559
// wait ( 1 1$00 ) ;
53422: LD_INT 2100
53424: PPUSH
53425: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53429: LD_STRING hideTroll();
53431: PPUSH
53432: CALL_OW 559
// end ;
53436: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53437: LD_EXP 14
53441: PUSH
53442: LD_EXP 40
53446: AND
53447: IFFALSE 53510
53449: GO 53451
53451: DISABLE
53452: LD_INT 0
53454: PPUSH
// begin p := 0 ;
53455: LD_ADDR_VAR 0 1
53459: PUSH
53460: LD_INT 0
53462: ST_TO_ADDR
// repeat game_speed := 1 ;
53463: LD_ADDR_OWVAR 65
53467: PUSH
53468: LD_INT 1
53470: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53471: LD_INT 35
53473: PPUSH
53474: CALL_OW 67
// p := p + 1 ;
53478: LD_ADDR_VAR 0 1
53482: PUSH
53483: LD_VAR 0 1
53487: PUSH
53488: LD_INT 1
53490: PLUS
53491: ST_TO_ADDR
// until p >= 60 ;
53492: LD_VAR 0 1
53496: PUSH
53497: LD_INT 60
53499: GREATEREQUAL
53500: IFFALSE 53463
// game_speed := 4 ;
53502: LD_ADDR_OWVAR 65
53506: PUSH
53507: LD_INT 4
53509: ST_TO_ADDR
// end ;
53510: PPOPN 1
53512: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53513: LD_EXP 14
53517: PUSH
53518: LD_EXP 41
53522: AND
53523: IFFALSE 53669
53525: GO 53527
53527: DISABLE
53528: LD_INT 0
53530: PPUSH
53531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53532: LD_ADDR_VAR 0 1
53536: PUSH
53537: LD_INT 22
53539: PUSH
53540: LD_OWVAR 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: LD_INT 30
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 30
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PPUSH
53581: CALL_OW 69
53585: ST_TO_ADDR
// if not depot then
53586: LD_VAR 0 1
53590: NOT
53591: IFFALSE 53595
// exit ;
53593: GO 53669
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53595: LD_ADDR_VAR 0 2
53599: PUSH
53600: LD_VAR 0 1
53604: PUSH
53605: LD_INT 1
53607: PPUSH
53608: LD_VAR 0 1
53612: PPUSH
53613: CALL_OW 12
53617: ARRAY
53618: PPUSH
53619: CALL_OW 274
53623: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53624: LD_VAR 0 2
53628: PPUSH
53629: LD_INT 1
53631: PPUSH
53632: LD_INT 0
53634: PPUSH
53635: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53639: LD_VAR 0 2
53643: PPUSH
53644: LD_INT 2
53646: PPUSH
53647: LD_INT 0
53649: PPUSH
53650: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53654: LD_VAR 0 2
53658: PPUSH
53659: LD_INT 3
53661: PPUSH
53662: LD_INT 0
53664: PPUSH
53665: CALL_OW 277
// end ;
53669: PPOPN 2
53671: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53672: LD_EXP 14
53676: PUSH
53677: LD_EXP 42
53681: AND
53682: IFFALSE 53779
53684: GO 53686
53686: DISABLE
53687: LD_INT 0
53689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53690: LD_ADDR_VAR 0 1
53694: PUSH
53695: LD_INT 22
53697: PUSH
53698: LD_OWVAR 2
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 21
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: LD_INT 23
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: PPUSH
53739: CALL_OW 69
53743: ST_TO_ADDR
// if not tmp then
53744: LD_VAR 0 1
53748: NOT
53749: IFFALSE 53753
// exit ;
53751: GO 53779
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53753: LD_VAR 0 1
53757: PUSH
53758: LD_INT 1
53760: PPUSH
53761: LD_VAR 0 1
53765: PPUSH
53766: CALL_OW 12
53770: ARRAY
53771: PPUSH
53772: LD_INT 200
53774: PPUSH
53775: CALL_OW 234
// end ;
53779: PPOPN 1
53781: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53782: LD_EXP 14
53786: PUSH
53787: LD_EXP 43
53791: AND
53792: IFFALSE 53871
53794: GO 53796
53796: DISABLE
53797: LD_INT 0
53799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53800: LD_ADDR_VAR 0 1
53804: PUSH
53805: LD_INT 22
53807: PUSH
53808: LD_OWVAR 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 21
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PPUSH
53831: CALL_OW 69
53835: ST_TO_ADDR
// if not tmp then
53836: LD_VAR 0 1
53840: NOT
53841: IFFALSE 53845
// exit ;
53843: GO 53871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53845: LD_VAR 0 1
53849: PUSH
53850: LD_INT 1
53852: PPUSH
53853: LD_VAR 0 1
53857: PPUSH
53858: CALL_OW 12
53862: ARRAY
53863: PPUSH
53864: LD_INT 60
53866: PPUSH
53867: CALL_OW 234
// end ;
53871: PPOPN 1
53873: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53874: LD_EXP 14
53878: PUSH
53879: LD_EXP 44
53883: AND
53884: IFFALSE 53983
53886: GO 53888
53888: DISABLE
53889: LD_INT 0
53891: PPUSH
53892: PPUSH
// begin enable ;
53893: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
53894: LD_ADDR_VAR 0 1
53898: PUSH
53899: LD_INT 22
53901: PUSH
53902: LD_OWVAR 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 61
53913: PUSH
53914: EMPTY
53915: LIST
53916: PUSH
53917: LD_INT 33
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: PPUSH
53932: CALL_OW 69
53936: ST_TO_ADDR
// if not tmp then
53937: LD_VAR 0 1
53941: NOT
53942: IFFALSE 53946
// exit ;
53944: GO 53983
// for i in tmp do
53946: LD_ADDR_VAR 0 2
53950: PUSH
53951: LD_VAR 0 1
53955: PUSH
53956: FOR_IN
53957: IFFALSE 53981
// if IsControledBy ( i ) then
53959: LD_VAR 0 2
53963: PPUSH
53964: CALL_OW 312
53968: IFFALSE 53979
// ComUnlink ( i ) ;
53970: LD_VAR 0 2
53974: PPUSH
53975: CALL_OW 136
53979: GO 53956
53981: POP
53982: POP
// end ;
53983: PPOPN 2
53985: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53986: LD_EXP 14
53990: PUSH
53991: LD_EXP 45
53995: AND
53996: IFFALSE 54136
53998: GO 54000
54000: DISABLE
54001: LD_INT 0
54003: PPUSH
54004: PPUSH
// begin ToLua ( displayPowell(); ) ;
54005: LD_STRING displayPowell();
54007: PPUSH
54008: CALL_OW 559
// uc_side := 0 ;
54012: LD_ADDR_OWVAR 20
54016: PUSH
54017: LD_INT 0
54019: ST_TO_ADDR
// uc_nation := 2 ;
54020: LD_ADDR_OWVAR 21
54024: PUSH
54025: LD_INT 2
54027: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54028: LD_ADDR_OWVAR 37
54032: PUSH
54033: LD_INT 14
54035: ST_TO_ADDR
// vc_engine := engine_siberite ;
54036: LD_ADDR_OWVAR 39
54040: PUSH
54041: LD_INT 3
54043: ST_TO_ADDR
// vc_control := control_apeman ;
54044: LD_ADDR_OWVAR 38
54048: PUSH
54049: LD_INT 5
54051: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54052: LD_ADDR_OWVAR 40
54056: PUSH
54057: LD_INT 29
54059: ST_TO_ADDR
// un := CreateVehicle ;
54060: LD_ADDR_VAR 0 2
54064: PUSH
54065: CALL_OW 45
54069: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54070: LD_VAR 0 2
54074: PPUSH
54075: LD_INT 1
54077: PPUSH
54078: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54082: LD_INT 35
54084: PPUSH
54085: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54089: LD_VAR 0 2
54093: PPUSH
54094: LD_INT 22
54096: PUSH
54097: LD_OWVAR 2
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PPUSH
54106: CALL_OW 69
54110: PPUSH
54111: LD_VAR 0 2
54115: PPUSH
54116: CALL_OW 74
54120: PPUSH
54121: CALL_OW 115
// until IsDead ( un ) ;
54125: LD_VAR 0 2
54129: PPUSH
54130: CALL_OW 301
54134: IFFALSE 54082
// end ;
54136: PPOPN 2
54138: END
// every 0 0$1 trigger StreamModeActive and sStu do
54139: LD_EXP 14
54143: PUSH
54144: LD_EXP 53
54148: AND
54149: IFFALSE 54165
54151: GO 54153
54153: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54154: LD_STRING displayStucuk();
54156: PPUSH
54157: CALL_OW 559
// ResetFog ;
54161: CALL_OW 335
// end ;
54165: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54166: LD_EXP 14
54170: PUSH
54171: LD_EXP 46
54175: AND
54176: IFFALSE 54317
54178: GO 54180
54180: DISABLE
54181: LD_INT 0
54183: PPUSH
54184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54185: LD_ADDR_VAR 0 2
54189: PUSH
54190: LD_INT 22
54192: PUSH
54193: LD_OWVAR 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 21
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PPUSH
54216: CALL_OW 69
54220: ST_TO_ADDR
// if not tmp then
54221: LD_VAR 0 2
54225: NOT
54226: IFFALSE 54230
// exit ;
54228: GO 54317
// un := tmp [ rand ( 1 , tmp ) ] ;
54230: LD_ADDR_VAR 0 1
54234: PUSH
54235: LD_VAR 0 2
54239: PUSH
54240: LD_INT 1
54242: PPUSH
54243: LD_VAR 0 2
54247: PPUSH
54248: CALL_OW 12
54252: ARRAY
54253: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54254: LD_VAR 0 1
54258: PPUSH
54259: LD_INT 0
54261: PPUSH
54262: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54266: LD_VAR 0 1
54270: PPUSH
54271: LD_OWVAR 3
54275: PUSH
54276: LD_VAR 0 1
54280: DIFF
54281: PPUSH
54282: LD_VAR 0 1
54286: PPUSH
54287: CALL_OW 74
54291: PPUSH
54292: CALL_OW 115
// wait ( 0 0$20 ) ;
54296: LD_INT 700
54298: PPUSH
54299: CALL_OW 67
// SetSide ( un , your_side ) ;
54303: LD_VAR 0 1
54307: PPUSH
54308: LD_OWVAR 2
54312: PPUSH
54313: CALL_OW 235
// end ;
54317: PPOPN 2
54319: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54320: LD_EXP 14
54324: PUSH
54325: LD_EXP 47
54329: AND
54330: IFFALSE 54436
54332: GO 54334
54334: DISABLE
54335: LD_INT 0
54337: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54338: LD_ADDR_VAR 0 1
54342: PUSH
54343: LD_INT 22
54345: PUSH
54346: LD_OWVAR 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 30
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 30
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PPUSH
54387: CALL_OW 69
54391: ST_TO_ADDR
// if not depot then
54392: LD_VAR 0 1
54396: NOT
54397: IFFALSE 54401
// exit ;
54399: GO 54436
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54401: LD_VAR 0 1
54405: PUSH
54406: LD_INT 1
54408: ARRAY
54409: PPUSH
54410: CALL_OW 250
54414: PPUSH
54415: LD_VAR 0 1
54419: PUSH
54420: LD_INT 1
54422: ARRAY
54423: PPUSH
54424: CALL_OW 251
54428: PPUSH
54429: LD_INT 70
54431: PPUSH
54432: CALL_OW 495
// end ;
54436: PPOPN 1
54438: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54439: LD_EXP 14
54443: PUSH
54444: LD_EXP 48
54448: AND
54449: IFFALSE 54660
54451: GO 54453
54453: DISABLE
54454: LD_INT 0
54456: PPUSH
54457: PPUSH
54458: PPUSH
54459: PPUSH
54460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54461: LD_ADDR_VAR 0 5
54465: PUSH
54466: LD_INT 22
54468: PUSH
54469: LD_OWVAR 2
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 21
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PPUSH
54492: CALL_OW 69
54496: ST_TO_ADDR
// if not tmp then
54497: LD_VAR 0 5
54501: NOT
54502: IFFALSE 54506
// exit ;
54504: GO 54660
// for i in tmp do
54506: LD_ADDR_VAR 0 1
54510: PUSH
54511: LD_VAR 0 5
54515: PUSH
54516: FOR_IN
54517: IFFALSE 54658
// begin d := rand ( 0 , 5 ) ;
54519: LD_ADDR_VAR 0 4
54523: PUSH
54524: LD_INT 0
54526: PPUSH
54527: LD_INT 5
54529: PPUSH
54530: CALL_OW 12
54534: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54535: LD_ADDR_VAR 0 2
54539: PUSH
54540: LD_VAR 0 1
54544: PPUSH
54545: CALL_OW 250
54549: PPUSH
54550: LD_VAR 0 4
54554: PPUSH
54555: LD_INT 3
54557: PPUSH
54558: LD_INT 12
54560: PPUSH
54561: CALL_OW 12
54565: PPUSH
54566: CALL_OW 272
54570: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54571: LD_ADDR_VAR 0 3
54575: PUSH
54576: LD_VAR 0 1
54580: PPUSH
54581: CALL_OW 251
54585: PPUSH
54586: LD_VAR 0 4
54590: PPUSH
54591: LD_INT 3
54593: PPUSH
54594: LD_INT 12
54596: PPUSH
54597: CALL_OW 12
54601: PPUSH
54602: CALL_OW 273
54606: ST_TO_ADDR
// if ValidHex ( x , y ) then
54607: LD_VAR 0 2
54611: PPUSH
54612: LD_VAR 0 3
54616: PPUSH
54617: CALL_OW 488
54621: IFFALSE 54656
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54623: LD_VAR 0 1
54627: PPUSH
54628: LD_VAR 0 2
54632: PPUSH
54633: LD_VAR 0 3
54637: PPUSH
54638: LD_INT 3
54640: PPUSH
54641: LD_INT 6
54643: PPUSH
54644: CALL_OW 12
54648: PPUSH
54649: LD_INT 1
54651: PPUSH
54652: CALL_OW 483
// end ;
54656: GO 54516
54658: POP
54659: POP
// end ;
54660: PPOPN 5
54662: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54663: LD_EXP 14
54667: PUSH
54668: LD_EXP 49
54672: AND
54673: IFFALSE 54767
54675: GO 54677
54677: DISABLE
54678: LD_INT 0
54680: PPUSH
54681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54682: LD_ADDR_VAR 0 2
54686: PUSH
54687: LD_INT 22
54689: PUSH
54690: LD_OWVAR 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 32
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 21
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: PPUSH
54724: CALL_OW 69
54728: ST_TO_ADDR
// if not tmp then
54729: LD_VAR 0 2
54733: NOT
54734: IFFALSE 54738
// exit ;
54736: GO 54767
// for i in tmp do
54738: LD_ADDR_VAR 0 1
54742: PUSH
54743: LD_VAR 0 2
54747: PUSH
54748: FOR_IN
54749: IFFALSE 54765
// SetFuel ( i , 0 ) ;
54751: LD_VAR 0 1
54755: PPUSH
54756: LD_INT 0
54758: PPUSH
54759: CALL_OW 240
54763: GO 54748
54765: POP
54766: POP
// end ;
54767: PPOPN 2
54769: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54770: LD_EXP 14
54774: PUSH
54775: LD_EXP 50
54779: AND
54780: IFFALSE 54846
54782: GO 54784
54784: DISABLE
54785: LD_INT 0
54787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54788: LD_ADDR_VAR 0 1
54792: PUSH
54793: LD_INT 22
54795: PUSH
54796: LD_OWVAR 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 30
54807: PUSH
54808: LD_INT 29
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PPUSH
54819: CALL_OW 69
54823: ST_TO_ADDR
// if not tmp then
54824: LD_VAR 0 1
54828: NOT
54829: IFFALSE 54833
// exit ;
54831: GO 54846
// DestroyUnit ( tmp [ 1 ] ) ;
54833: LD_VAR 0 1
54837: PUSH
54838: LD_INT 1
54840: ARRAY
54841: PPUSH
54842: CALL_OW 65
// end ;
54846: PPOPN 1
54848: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54849: LD_EXP 14
54853: PUSH
54854: LD_EXP 52
54858: AND
54859: IFFALSE 54988
54861: GO 54863
54863: DISABLE
54864: LD_INT 0
54866: PPUSH
// begin uc_side := 0 ;
54867: LD_ADDR_OWVAR 20
54871: PUSH
54872: LD_INT 0
54874: ST_TO_ADDR
// uc_nation := nation_arabian ;
54875: LD_ADDR_OWVAR 21
54879: PUSH
54880: LD_INT 2
54882: ST_TO_ADDR
// hc_gallery :=  ;
54883: LD_ADDR_OWVAR 33
54887: PUSH
54888: LD_STRING 
54890: ST_TO_ADDR
// hc_name :=  ;
54891: LD_ADDR_OWVAR 26
54895: PUSH
54896: LD_STRING 
54898: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
54899: LD_INT 1
54901: PPUSH
54902: LD_INT 11
54904: PPUSH
54905: LD_INT 10
54907: PPUSH
54908: CALL_OW 380
// un := CreateHuman ;
54912: LD_ADDR_VAR 0 1
54916: PUSH
54917: CALL_OW 44
54921: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54922: LD_VAR 0 1
54926: PPUSH
54927: LD_INT 1
54929: PPUSH
54930: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54934: LD_INT 35
54936: PPUSH
54937: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54941: LD_VAR 0 1
54945: PPUSH
54946: LD_INT 22
54948: PUSH
54949: LD_OWVAR 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PPUSH
54958: CALL_OW 69
54962: PPUSH
54963: LD_VAR 0 1
54967: PPUSH
54968: CALL_OW 74
54972: PPUSH
54973: CALL_OW 115
// until IsDead ( un ) ;
54977: LD_VAR 0 1
54981: PPUSH
54982: CALL_OW 301
54986: IFFALSE 54934
// end ;
54988: PPOPN 1
54990: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54991: LD_EXP 14
54995: PUSH
54996: LD_EXP 54
55000: AND
55001: IFFALSE 55013
55003: GO 55005
55005: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55006: LD_STRING earthquake(getX(game), 0, 32)
55008: PPUSH
55009: CALL_OW 559
55013: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55014: LD_EXP 14
55018: PUSH
55019: LD_EXP 55
55023: AND
55024: IFFALSE 55115
55026: GO 55028
55028: DISABLE
55029: LD_INT 0
55031: PPUSH
// begin enable ;
55032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55033: LD_ADDR_VAR 0 1
55037: PUSH
55038: LD_INT 22
55040: PUSH
55041: LD_OWVAR 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 21
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 33
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: PPUSH
55075: CALL_OW 69
55079: ST_TO_ADDR
// if not tmp then
55080: LD_VAR 0 1
55084: NOT
55085: IFFALSE 55089
// exit ;
55087: GO 55115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55089: LD_VAR 0 1
55093: PUSH
55094: LD_INT 1
55096: PPUSH
55097: LD_VAR 0 1
55101: PPUSH
55102: CALL_OW 12
55106: ARRAY
55107: PPUSH
55108: LD_INT 1
55110: PPUSH
55111: CALL_OW 234
// end ;
55115: PPOPN 1
55117: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55118: LD_EXP 14
55122: PUSH
55123: LD_EXP 56
55127: AND
55128: IFFALSE 55269
55130: GO 55132
55132: DISABLE
55133: LD_INT 0
55135: PPUSH
55136: PPUSH
55137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55138: LD_ADDR_VAR 0 3
55142: PUSH
55143: LD_INT 22
55145: PUSH
55146: LD_OWVAR 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 25
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PPUSH
55169: CALL_OW 69
55173: ST_TO_ADDR
// if not tmp then
55174: LD_VAR 0 3
55178: NOT
55179: IFFALSE 55183
// exit ;
55181: GO 55269
// un := tmp [ rand ( 1 , tmp ) ] ;
55183: LD_ADDR_VAR 0 2
55187: PUSH
55188: LD_VAR 0 3
55192: PUSH
55193: LD_INT 1
55195: PPUSH
55196: LD_VAR 0 3
55200: PPUSH
55201: CALL_OW 12
55205: ARRAY
55206: ST_TO_ADDR
// if Crawls ( un ) then
55207: LD_VAR 0 2
55211: PPUSH
55212: CALL_OW 318
55216: IFFALSE 55227
// ComWalk ( un ) ;
55218: LD_VAR 0 2
55222: PPUSH
55223: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55227: LD_VAR 0 2
55231: PPUSH
55232: LD_INT 9
55234: PPUSH
55235: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55239: LD_INT 28
55241: PPUSH
55242: LD_OWVAR 2
55246: PPUSH
55247: LD_INT 2
55249: PPUSH
55250: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55254: LD_INT 29
55256: PPUSH
55257: LD_OWVAR 2
55261: PPUSH
55262: LD_INT 2
55264: PPUSH
55265: CALL_OW 322
// end ;
55269: PPOPN 3
55271: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55272: LD_EXP 14
55276: PUSH
55277: LD_EXP 57
55281: AND
55282: IFFALSE 55393
55284: GO 55286
55286: DISABLE
55287: LD_INT 0
55289: PPUSH
55290: PPUSH
55291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55292: LD_ADDR_VAR 0 3
55296: PUSH
55297: LD_INT 22
55299: PUSH
55300: LD_OWVAR 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 25
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PPUSH
55323: CALL_OW 69
55327: ST_TO_ADDR
// if not tmp then
55328: LD_VAR 0 3
55332: NOT
55333: IFFALSE 55337
// exit ;
55335: GO 55393
// un := tmp [ rand ( 1 , tmp ) ] ;
55337: LD_ADDR_VAR 0 2
55341: PUSH
55342: LD_VAR 0 3
55346: PUSH
55347: LD_INT 1
55349: PPUSH
55350: LD_VAR 0 3
55354: PPUSH
55355: CALL_OW 12
55359: ARRAY
55360: ST_TO_ADDR
// if Crawls ( un ) then
55361: LD_VAR 0 2
55365: PPUSH
55366: CALL_OW 318
55370: IFFALSE 55381
// ComWalk ( un ) ;
55372: LD_VAR 0 2
55376: PPUSH
55377: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55381: LD_VAR 0 2
55385: PPUSH
55386: LD_INT 8
55388: PPUSH
55389: CALL_OW 336
// end ;
55393: PPOPN 3
55395: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55396: LD_EXP 14
55400: PUSH
55401: LD_EXP 58
55405: AND
55406: IFFALSE 55550
55408: GO 55410
55410: DISABLE
55411: LD_INT 0
55413: PPUSH
55414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55415: LD_ADDR_VAR 0 2
55419: PUSH
55420: LD_INT 22
55422: PUSH
55423: LD_OWVAR 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 21
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 34
55447: PUSH
55448: LD_INT 12
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 34
55457: PUSH
55458: LD_INT 51
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 34
55467: PUSH
55468: LD_INT 32
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: PPUSH
55486: CALL_OW 69
55490: ST_TO_ADDR
// if not tmp then
55491: LD_VAR 0 2
55495: NOT
55496: IFFALSE 55500
// exit ;
55498: GO 55550
// for i in tmp do
55500: LD_ADDR_VAR 0 1
55504: PUSH
55505: LD_VAR 0 2
55509: PUSH
55510: FOR_IN
55511: IFFALSE 55548
// if GetCargo ( i , mat_artifact ) = 0 then
55513: LD_VAR 0 1
55517: PPUSH
55518: LD_INT 4
55520: PPUSH
55521: CALL_OW 289
55525: PUSH
55526: LD_INT 0
55528: EQUAL
55529: IFFALSE 55546
// SetCargo ( i , mat_siberit , 100 ) ;
55531: LD_VAR 0 1
55535: PPUSH
55536: LD_INT 3
55538: PPUSH
55539: LD_INT 100
55541: PPUSH
55542: CALL_OW 290
55546: GO 55510
55548: POP
55549: POP
// end ;
55550: PPOPN 2
55552: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55553: LD_EXP 14
55557: PUSH
55558: LD_EXP 59
55562: AND
55563: IFFALSE 55746
55565: GO 55567
55567: DISABLE
55568: LD_INT 0
55570: PPUSH
55571: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55572: LD_ADDR_VAR 0 2
55576: PUSH
55577: LD_INT 22
55579: PUSH
55580: LD_OWVAR 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PPUSH
55589: CALL_OW 69
55593: ST_TO_ADDR
// if not tmp then
55594: LD_VAR 0 2
55598: NOT
55599: IFFALSE 55603
// exit ;
55601: GO 55746
// for i := 1 to 2 do
55603: LD_ADDR_VAR 0 1
55607: PUSH
55608: DOUBLE
55609: LD_INT 1
55611: DEC
55612: ST_TO_ADDR
55613: LD_INT 2
55615: PUSH
55616: FOR_TO
55617: IFFALSE 55744
// begin uc_side := your_side ;
55619: LD_ADDR_OWVAR 20
55623: PUSH
55624: LD_OWVAR 2
55628: ST_TO_ADDR
// uc_nation := nation_american ;
55629: LD_ADDR_OWVAR 21
55633: PUSH
55634: LD_INT 1
55636: ST_TO_ADDR
// vc_chassis := us_morphling ;
55637: LD_ADDR_OWVAR 37
55641: PUSH
55642: LD_INT 5
55644: ST_TO_ADDR
// vc_engine := engine_siberite ;
55645: LD_ADDR_OWVAR 39
55649: PUSH
55650: LD_INT 3
55652: ST_TO_ADDR
// vc_control := control_computer ;
55653: LD_ADDR_OWVAR 38
55657: PUSH
55658: LD_INT 3
55660: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55661: LD_ADDR_OWVAR 40
55665: PUSH
55666: LD_INT 10
55668: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55669: LD_VAR 0 2
55673: PUSH
55674: LD_INT 1
55676: ARRAY
55677: PPUSH
55678: CALL_OW 310
55682: NOT
55683: IFFALSE 55730
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55685: CALL_OW 45
55689: PPUSH
55690: LD_VAR 0 2
55694: PUSH
55695: LD_INT 1
55697: ARRAY
55698: PPUSH
55699: CALL_OW 250
55703: PPUSH
55704: LD_VAR 0 2
55708: PUSH
55709: LD_INT 1
55711: ARRAY
55712: PPUSH
55713: CALL_OW 251
55717: PPUSH
55718: LD_INT 12
55720: PPUSH
55721: LD_INT 1
55723: PPUSH
55724: CALL_OW 50
55728: GO 55742
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55730: CALL_OW 45
55734: PPUSH
55735: LD_INT 1
55737: PPUSH
55738: CALL_OW 51
// end ;
55742: GO 55616
55744: POP
55745: POP
// end ;
55746: PPOPN 2
55748: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55749: LD_EXP 14
55753: PUSH
55754: LD_EXP 60
55758: AND
55759: IFFALSE 55981
55761: GO 55763
55763: DISABLE
55764: LD_INT 0
55766: PPUSH
55767: PPUSH
55768: PPUSH
55769: PPUSH
55770: PPUSH
55771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55772: LD_ADDR_VAR 0 6
55776: PUSH
55777: LD_INT 22
55779: PUSH
55780: LD_OWVAR 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 21
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: LD_INT 23
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: PPUSH
55821: CALL_OW 69
55825: ST_TO_ADDR
// if not tmp then
55826: LD_VAR 0 6
55830: NOT
55831: IFFALSE 55835
// exit ;
55833: GO 55981
// s1 := rand ( 1 , 4 ) ;
55835: LD_ADDR_VAR 0 2
55839: PUSH
55840: LD_INT 1
55842: PPUSH
55843: LD_INT 4
55845: PPUSH
55846: CALL_OW 12
55850: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
55851: LD_ADDR_VAR 0 4
55855: PUSH
55856: LD_VAR 0 6
55860: PUSH
55861: LD_INT 1
55863: ARRAY
55864: PPUSH
55865: LD_VAR 0 2
55869: PPUSH
55870: CALL_OW 259
55874: ST_TO_ADDR
// if s1 = 1 then
55875: LD_VAR 0 2
55879: PUSH
55880: LD_INT 1
55882: EQUAL
55883: IFFALSE 55903
// s2 := rand ( 2 , 4 ) else
55885: LD_ADDR_VAR 0 3
55889: PUSH
55890: LD_INT 2
55892: PPUSH
55893: LD_INT 4
55895: PPUSH
55896: CALL_OW 12
55900: ST_TO_ADDR
55901: GO 55911
// s2 := 1 ;
55903: LD_ADDR_VAR 0 3
55907: PUSH
55908: LD_INT 1
55910: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
55911: LD_ADDR_VAR 0 5
55915: PUSH
55916: LD_VAR 0 6
55920: PUSH
55921: LD_INT 1
55923: ARRAY
55924: PPUSH
55925: LD_VAR 0 3
55929: PPUSH
55930: CALL_OW 259
55934: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
55935: LD_VAR 0 6
55939: PUSH
55940: LD_INT 1
55942: ARRAY
55943: PPUSH
55944: LD_VAR 0 2
55948: PPUSH
55949: LD_VAR 0 5
55953: PPUSH
55954: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55958: LD_VAR 0 6
55962: PUSH
55963: LD_INT 1
55965: ARRAY
55966: PPUSH
55967: LD_VAR 0 3
55971: PPUSH
55972: LD_VAR 0 4
55976: PPUSH
55977: CALL_OW 237
// end ;
55981: PPOPN 6
55983: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55984: LD_EXP 14
55988: PUSH
55989: LD_EXP 61
55993: AND
55994: IFFALSE 56073
55996: GO 55998
55998: DISABLE
55999: LD_INT 0
56001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56002: LD_ADDR_VAR 0 1
56006: PUSH
56007: LD_INT 22
56009: PUSH
56010: LD_OWVAR 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 30
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PPUSH
56033: CALL_OW 69
56037: ST_TO_ADDR
// if not tmp then
56038: LD_VAR 0 1
56042: NOT
56043: IFFALSE 56047
// exit ;
56045: GO 56073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56047: LD_VAR 0 1
56051: PUSH
56052: LD_INT 1
56054: PPUSH
56055: LD_VAR 0 1
56059: PPUSH
56060: CALL_OW 12
56064: ARRAY
56065: PPUSH
56066: LD_INT 1
56068: PPUSH
56069: CALL_OW 234
// end ;
56073: PPOPN 1
56075: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56076: LD_EXP 14
56080: PUSH
56081: LD_EXP 62
56085: AND
56086: IFFALSE 56198
56088: GO 56090
56090: DISABLE
56091: LD_INT 0
56093: PPUSH
56094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56095: LD_ADDR_VAR 0 2
56099: PUSH
56100: LD_INT 22
56102: PUSH
56103: LD_OWVAR 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 30
56117: PUSH
56118: LD_INT 27
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 30
56127: PUSH
56128: LD_INT 26
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 30
56137: PUSH
56138: LD_INT 28
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PPUSH
56155: CALL_OW 69
56159: ST_TO_ADDR
// if not tmp then
56160: LD_VAR 0 2
56164: NOT
56165: IFFALSE 56169
// exit ;
56167: GO 56198
// for i in tmp do
56169: LD_ADDR_VAR 0 1
56173: PUSH
56174: LD_VAR 0 2
56178: PUSH
56179: FOR_IN
56180: IFFALSE 56196
// SetLives ( i , 1 ) ;
56182: LD_VAR 0 1
56186: PPUSH
56187: LD_INT 1
56189: PPUSH
56190: CALL_OW 234
56194: GO 56179
56196: POP
56197: POP
// end ;
56198: PPOPN 2
56200: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56201: LD_EXP 14
56205: PUSH
56206: LD_EXP 63
56210: AND
56211: IFFALSE 56498
56213: GO 56215
56215: DISABLE
56216: LD_INT 0
56218: PPUSH
56219: PPUSH
56220: PPUSH
// begin i := rand ( 1 , 7 ) ;
56221: LD_ADDR_VAR 0 1
56225: PUSH
56226: LD_INT 1
56228: PPUSH
56229: LD_INT 7
56231: PPUSH
56232: CALL_OW 12
56236: ST_TO_ADDR
// case i of 1 :
56237: LD_VAR 0 1
56241: PUSH
56242: LD_INT 1
56244: DOUBLE
56245: EQUAL
56246: IFTRUE 56250
56248: GO 56260
56250: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56251: LD_STRING earthquake(getX(game), 0, 32)
56253: PPUSH
56254: CALL_OW 559
56258: GO 56498
56260: LD_INT 2
56262: DOUBLE
56263: EQUAL
56264: IFTRUE 56268
56266: GO 56282
56268: POP
// begin ToLua ( displayStucuk(); ) ;
56269: LD_STRING displayStucuk();
56271: PPUSH
56272: CALL_OW 559
// ResetFog ;
56276: CALL_OW 335
// end ; 3 :
56280: GO 56498
56282: LD_INT 3
56284: DOUBLE
56285: EQUAL
56286: IFTRUE 56290
56288: GO 56394
56290: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56291: LD_ADDR_VAR 0 2
56295: PUSH
56296: LD_INT 22
56298: PUSH
56299: LD_OWVAR 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 25
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PPUSH
56322: CALL_OW 69
56326: ST_TO_ADDR
// if not tmp then
56327: LD_VAR 0 2
56331: NOT
56332: IFFALSE 56336
// exit ;
56334: GO 56498
// un := tmp [ rand ( 1 , tmp ) ] ;
56336: LD_ADDR_VAR 0 3
56340: PUSH
56341: LD_VAR 0 2
56345: PUSH
56346: LD_INT 1
56348: PPUSH
56349: LD_VAR 0 2
56353: PPUSH
56354: CALL_OW 12
56358: ARRAY
56359: ST_TO_ADDR
// if Crawls ( un ) then
56360: LD_VAR 0 3
56364: PPUSH
56365: CALL_OW 318
56369: IFFALSE 56380
// ComWalk ( un ) ;
56371: LD_VAR 0 3
56375: PPUSH
56376: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56380: LD_VAR 0 3
56384: PPUSH
56385: LD_INT 8
56387: PPUSH
56388: CALL_OW 336
// end ; 4 :
56392: GO 56498
56394: LD_INT 4
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56402
56400: GO 56476
56402: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56403: LD_ADDR_VAR 0 2
56407: PUSH
56408: LD_INT 22
56410: PUSH
56411: LD_OWVAR 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 30
56422: PUSH
56423: LD_INT 29
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PPUSH
56434: CALL_OW 69
56438: ST_TO_ADDR
// if not tmp then
56439: LD_VAR 0 2
56443: NOT
56444: IFFALSE 56448
// exit ;
56446: GO 56498
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56448: LD_VAR 0 2
56452: PUSH
56453: LD_INT 1
56455: ARRAY
56456: PPUSH
56457: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56461: LD_VAR 0 2
56465: PUSH
56466: LD_INT 1
56468: ARRAY
56469: PPUSH
56470: CALL_OW 65
// end ; 5 .. 7 :
56474: GO 56498
56476: LD_INT 5
56478: DOUBLE
56479: GREATEREQUAL
56480: IFFALSE 56488
56482: LD_INT 7
56484: DOUBLE
56485: LESSEQUAL
56486: IFTRUE 56490
56488: GO 56497
56490: POP
// StreamSibBomb ; end ;
56491: CALL 52735 0 0
56495: GO 56498
56497: POP
// end ;
56498: PPOPN 3
56500: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56501: LD_EXP 14
56505: PUSH
56506: LD_EXP 64
56510: AND
56511: IFFALSE 56667
56513: GO 56515
56515: DISABLE
56516: LD_INT 0
56518: PPUSH
56519: PPUSH
56520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56521: LD_ADDR_VAR 0 2
56525: PUSH
56526: LD_INT 81
56528: PUSH
56529: LD_OWVAR 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 21
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 21
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PPUSH
56570: CALL_OW 69
56574: ST_TO_ADDR
// if not tmp then
56575: LD_VAR 0 2
56579: NOT
56580: IFFALSE 56584
// exit ;
56582: GO 56667
// p := 0 ;
56584: LD_ADDR_VAR 0 3
56588: PUSH
56589: LD_INT 0
56591: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56592: LD_INT 35
56594: PPUSH
56595: CALL_OW 67
// p := p + 1 ;
56599: LD_ADDR_VAR 0 3
56603: PUSH
56604: LD_VAR 0 3
56608: PUSH
56609: LD_INT 1
56611: PLUS
56612: ST_TO_ADDR
// for i in tmp do
56613: LD_ADDR_VAR 0 1
56617: PUSH
56618: LD_VAR 0 2
56622: PUSH
56623: FOR_IN
56624: IFFALSE 56655
// if GetLives ( i ) < 1000 then
56626: LD_VAR 0 1
56630: PPUSH
56631: CALL_OW 256
56635: PUSH
56636: LD_INT 1000
56638: LESS
56639: IFFALSE 56653
// SetLives ( i , 1000 ) ;
56641: LD_VAR 0 1
56645: PPUSH
56646: LD_INT 1000
56648: PPUSH
56649: CALL_OW 234
56653: GO 56623
56655: POP
56656: POP
// until p > 20 ;
56657: LD_VAR 0 3
56661: PUSH
56662: LD_INT 20
56664: GREATER
56665: IFFALSE 56592
// end ;
56667: PPOPN 3
56669: END
// every 0 0$1 trigger StreamModeActive and sTime do
56670: LD_EXP 14
56674: PUSH
56675: LD_EXP 65
56679: AND
56680: IFFALSE 56715
56682: GO 56684
56684: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56685: LD_INT 28
56687: PPUSH
56688: LD_OWVAR 2
56692: PPUSH
56693: LD_INT 2
56695: PPUSH
56696: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56700: LD_INT 30
56702: PPUSH
56703: LD_OWVAR 2
56707: PPUSH
56708: LD_INT 2
56710: PPUSH
56711: CALL_OW 322
// end ;
56715: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56716: LD_EXP 14
56720: PUSH
56721: LD_EXP 66
56725: AND
56726: IFFALSE 56847
56728: GO 56730
56730: DISABLE
56731: LD_INT 0
56733: PPUSH
56734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56735: LD_ADDR_VAR 0 2
56739: PUSH
56740: LD_INT 22
56742: PUSH
56743: LD_OWVAR 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 21
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: LD_INT 23
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: PPUSH
56784: CALL_OW 69
56788: ST_TO_ADDR
// if not tmp then
56789: LD_VAR 0 2
56793: NOT
56794: IFFALSE 56798
// exit ;
56796: GO 56847
// for i in tmp do
56798: LD_ADDR_VAR 0 1
56802: PUSH
56803: LD_VAR 0 2
56807: PUSH
56808: FOR_IN
56809: IFFALSE 56845
// begin if Crawls ( i ) then
56811: LD_VAR 0 1
56815: PPUSH
56816: CALL_OW 318
56820: IFFALSE 56831
// ComWalk ( i ) ;
56822: LD_VAR 0 1
56826: PPUSH
56827: CALL_OW 138
// SetClass ( i , 2 ) ;
56831: LD_VAR 0 1
56835: PPUSH
56836: LD_INT 2
56838: PPUSH
56839: CALL_OW 336
// end ;
56843: GO 56808
56845: POP
56846: POP
// end ;
56847: PPOPN 2
56849: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56850: LD_EXP 14
56854: PUSH
56855: LD_EXP 67
56859: AND
56860: IFFALSE 57148
56862: GO 56864
56864: DISABLE
56865: LD_INT 0
56867: PPUSH
56868: PPUSH
56869: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
56870: LD_OWVAR 2
56874: PPUSH
56875: LD_INT 9
56877: PPUSH
56878: LD_INT 1
56880: PPUSH
56881: LD_INT 1
56883: PPUSH
56884: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56888: LD_INT 9
56890: PPUSH
56891: LD_OWVAR 2
56895: PPUSH
56896: CALL_OW 343
// uc_side := 9 ;
56900: LD_ADDR_OWVAR 20
56904: PUSH
56905: LD_INT 9
56907: ST_TO_ADDR
// uc_nation := 2 ;
56908: LD_ADDR_OWVAR 21
56912: PUSH
56913: LD_INT 2
56915: ST_TO_ADDR
// hc_name := Dark Warrior ;
56916: LD_ADDR_OWVAR 26
56920: PUSH
56921: LD_STRING Dark Warrior
56923: ST_TO_ADDR
// hc_gallery :=  ;
56924: LD_ADDR_OWVAR 33
56928: PUSH
56929: LD_STRING 
56931: ST_TO_ADDR
// hc_noskilllimit := true ;
56932: LD_ADDR_OWVAR 76
56936: PUSH
56937: LD_INT 1
56939: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56940: LD_ADDR_OWVAR 31
56944: PUSH
56945: LD_INT 30
56947: PUSH
56948: LD_INT 30
56950: PUSH
56951: LD_INT 30
56953: PUSH
56954: LD_INT 30
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// un := CreateHuman ;
56963: LD_ADDR_VAR 0 3
56967: PUSH
56968: CALL_OW 44
56972: ST_TO_ADDR
// hc_noskilllimit := false ;
56973: LD_ADDR_OWVAR 76
56977: PUSH
56978: LD_INT 0
56980: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56981: LD_VAR 0 3
56985: PPUSH
56986: LD_INT 1
56988: PPUSH
56989: CALL_OW 51
// ToLua ( playRanger() ) ;
56993: LD_STRING playRanger()
56995: PPUSH
56996: CALL_OW 559
// p := 0 ;
57000: LD_ADDR_VAR 0 2
57004: PUSH
57005: LD_INT 0
57007: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57008: LD_INT 35
57010: PPUSH
57011: CALL_OW 67
// p := p + 1 ;
57015: LD_ADDR_VAR 0 2
57019: PUSH
57020: LD_VAR 0 2
57024: PUSH
57025: LD_INT 1
57027: PLUS
57028: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57029: LD_VAR 0 3
57033: PPUSH
57034: CALL_OW 256
57038: PUSH
57039: LD_INT 1000
57041: LESS
57042: IFFALSE 57056
// SetLives ( un , 1000 ) ;
57044: LD_VAR 0 3
57048: PPUSH
57049: LD_INT 1000
57051: PPUSH
57052: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57056: LD_VAR 0 3
57060: PPUSH
57061: LD_INT 81
57063: PUSH
57064: LD_OWVAR 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 91
57075: PUSH
57076: LD_VAR 0 3
57080: PUSH
57081: LD_INT 30
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PPUSH
57093: CALL_OW 69
57097: PPUSH
57098: LD_VAR 0 3
57102: PPUSH
57103: CALL_OW 74
57107: PPUSH
57108: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57112: LD_VAR 0 2
57116: PUSH
57117: LD_INT 80
57119: GREATER
57120: PUSH
57121: LD_VAR 0 3
57125: PPUSH
57126: CALL_OW 301
57130: OR
57131: IFFALSE 57008
// if un then
57133: LD_VAR 0 3
57137: IFFALSE 57148
// RemoveUnit ( un ) ;
57139: LD_VAR 0 3
57143: PPUSH
57144: CALL_OW 64
// end ;
57148: PPOPN 3
57150: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57151: LD_EXP 68
57155: IFFALSE 57271
57157: GO 57159
57159: DISABLE
57160: LD_INT 0
57162: PPUSH
57163: PPUSH
57164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57165: LD_ADDR_VAR 0 2
57169: PUSH
57170: LD_INT 81
57172: PUSH
57173: LD_OWVAR 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 21
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PPUSH
57196: CALL_OW 69
57200: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57201: LD_STRING playComputer()
57203: PPUSH
57204: CALL_OW 559
// if not tmp then
57208: LD_VAR 0 2
57212: NOT
57213: IFFALSE 57217
// exit ;
57215: GO 57271
// for i in tmp do
57217: LD_ADDR_VAR 0 1
57221: PUSH
57222: LD_VAR 0 2
57226: PUSH
57227: FOR_IN
57228: IFFALSE 57269
// for j := 1 to 4 do
57230: LD_ADDR_VAR 0 3
57234: PUSH
57235: DOUBLE
57236: LD_INT 1
57238: DEC
57239: ST_TO_ADDR
57240: LD_INT 4
57242: PUSH
57243: FOR_TO
57244: IFFALSE 57265
// SetSkill ( i , j , 10 ) ;
57246: LD_VAR 0 1
57250: PPUSH
57251: LD_VAR 0 3
57255: PPUSH
57256: LD_INT 10
57258: PPUSH
57259: CALL_OW 237
57263: GO 57243
57265: POP
57266: POP
57267: GO 57227
57269: POP
57270: POP
// end ;
57271: PPOPN 3
57273: END
// every 0 0$1 trigger s30 do var i , tmp ;
57274: LD_EXP 69
57278: IFFALSE 57347
57280: GO 57282
57282: DISABLE
57283: LD_INT 0
57285: PPUSH
57286: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57287: LD_ADDR_VAR 0 2
57291: PUSH
57292: LD_INT 22
57294: PUSH
57295: LD_OWVAR 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PPUSH
57304: CALL_OW 69
57308: ST_TO_ADDR
// if not tmp then
57309: LD_VAR 0 2
57313: NOT
57314: IFFALSE 57318
// exit ;
57316: GO 57347
// for i in tmp do
57318: LD_ADDR_VAR 0 1
57322: PUSH
57323: LD_VAR 0 2
57327: PUSH
57328: FOR_IN
57329: IFFALSE 57345
// SetLives ( i , 300 ) ;
57331: LD_VAR 0 1
57335: PPUSH
57336: LD_INT 300
57338: PPUSH
57339: CALL_OW 234
57343: GO 57328
57345: POP
57346: POP
// end ;
57347: PPOPN 2
57349: END
// every 0 0$1 trigger s60 do var i , tmp ;
57350: LD_EXP 70
57354: IFFALSE 57423
57356: GO 57358
57358: DISABLE
57359: LD_INT 0
57361: PPUSH
57362: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57363: LD_ADDR_VAR 0 2
57367: PUSH
57368: LD_INT 22
57370: PUSH
57371: LD_OWVAR 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PPUSH
57380: CALL_OW 69
57384: ST_TO_ADDR
// if not tmp then
57385: LD_VAR 0 2
57389: NOT
57390: IFFALSE 57394
// exit ;
57392: GO 57423
// for i in tmp do
57394: LD_ADDR_VAR 0 1
57398: PUSH
57399: LD_VAR 0 2
57403: PUSH
57404: FOR_IN
57405: IFFALSE 57421
// SetLives ( i , 600 ) ;
57407: LD_VAR 0 1
57411: PPUSH
57412: LD_INT 600
57414: PPUSH
57415: CALL_OW 234
57419: GO 57404
57421: POP
57422: POP
// end ;
57423: PPOPN 2
57425: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57426: LD_INT 0
57428: PPUSH
// case cmd of 301 :
57429: LD_VAR 0 1
57433: PUSH
57434: LD_INT 301
57436: DOUBLE
57437: EQUAL
57438: IFTRUE 57442
57440: GO 57474
57442: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57443: LD_VAR 0 6
57447: PPUSH
57448: LD_VAR 0 7
57452: PPUSH
57453: LD_VAR 0 8
57457: PPUSH
57458: LD_VAR 0 4
57462: PPUSH
57463: LD_VAR 0 5
57467: PPUSH
57468: CALL 58675 0 5
57472: GO 57595
57474: LD_INT 302
57476: DOUBLE
57477: EQUAL
57478: IFTRUE 57482
57480: GO 57519
57482: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57483: LD_VAR 0 6
57487: PPUSH
57488: LD_VAR 0 7
57492: PPUSH
57493: LD_VAR 0 8
57497: PPUSH
57498: LD_VAR 0 9
57502: PPUSH
57503: LD_VAR 0 4
57507: PPUSH
57508: LD_VAR 0 5
57512: PPUSH
57513: CALL 58766 0 6
57517: GO 57595
57519: LD_INT 303
57521: DOUBLE
57522: EQUAL
57523: IFTRUE 57527
57525: GO 57564
57527: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57528: LD_VAR 0 6
57532: PPUSH
57533: LD_VAR 0 7
57537: PPUSH
57538: LD_VAR 0 8
57542: PPUSH
57543: LD_VAR 0 9
57547: PPUSH
57548: LD_VAR 0 4
57552: PPUSH
57553: LD_VAR 0 5
57557: PPUSH
57558: CALL 57600 0 6
57562: GO 57595
57564: LD_INT 304
57566: DOUBLE
57567: EQUAL
57568: IFTRUE 57572
57570: GO 57594
57572: POP
// hHackTeleport ( unit , x , y ) ; end ;
57573: LD_VAR 0 2
57577: PPUSH
57578: LD_VAR 0 4
57582: PPUSH
57583: LD_VAR 0 5
57587: PPUSH
57588: CALL 59359 0 3
57592: GO 57595
57594: POP
// end ;
57595: LD_VAR 0 12
57599: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57600: LD_INT 0
57602: PPUSH
57603: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57604: LD_VAR 0 1
57608: PUSH
57609: LD_INT 1
57611: LESS
57612: PUSH
57613: LD_VAR 0 1
57617: PUSH
57618: LD_INT 3
57620: GREATER
57621: OR
57622: PUSH
57623: LD_VAR 0 5
57627: PPUSH
57628: LD_VAR 0 6
57632: PPUSH
57633: CALL_OW 428
57637: OR
57638: IFFALSE 57642
// exit ;
57640: GO 58362
// uc_side := your_side ;
57642: LD_ADDR_OWVAR 20
57646: PUSH
57647: LD_OWVAR 2
57651: ST_TO_ADDR
// uc_nation := nation ;
57652: LD_ADDR_OWVAR 21
57656: PUSH
57657: LD_VAR 0 1
57661: ST_TO_ADDR
// bc_level = 1 ;
57662: LD_ADDR_OWVAR 43
57666: PUSH
57667: LD_INT 1
57669: ST_TO_ADDR
// case btype of 1 :
57670: LD_VAR 0 2
57674: PUSH
57675: LD_INT 1
57677: DOUBLE
57678: EQUAL
57679: IFTRUE 57683
57681: GO 57694
57683: POP
// bc_type := b_depot ; 2 :
57684: LD_ADDR_OWVAR 42
57688: PUSH
57689: LD_INT 0
57691: ST_TO_ADDR
57692: GO 58306
57694: LD_INT 2
57696: DOUBLE
57697: EQUAL
57698: IFTRUE 57702
57700: GO 57713
57702: POP
// bc_type := b_warehouse ; 3 :
57703: LD_ADDR_OWVAR 42
57707: PUSH
57708: LD_INT 1
57710: ST_TO_ADDR
57711: GO 58306
57713: LD_INT 3
57715: DOUBLE
57716: EQUAL
57717: IFTRUE 57721
57719: GO 57732
57721: POP
// bc_type := b_lab ; 4 .. 9 :
57722: LD_ADDR_OWVAR 42
57726: PUSH
57727: LD_INT 6
57729: ST_TO_ADDR
57730: GO 58306
57732: LD_INT 4
57734: DOUBLE
57735: GREATEREQUAL
57736: IFFALSE 57744
57738: LD_INT 9
57740: DOUBLE
57741: LESSEQUAL
57742: IFTRUE 57746
57744: GO 57798
57746: POP
// begin bc_type := b_lab_half ;
57747: LD_ADDR_OWVAR 42
57751: PUSH
57752: LD_INT 7
57754: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57755: LD_ADDR_OWVAR 44
57759: PUSH
57760: LD_INT 10
57762: PUSH
57763: LD_INT 11
57765: PUSH
57766: LD_INT 12
57768: PUSH
57769: LD_INT 15
57771: PUSH
57772: LD_INT 14
57774: PUSH
57775: LD_INT 13
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: PUSH
57786: LD_VAR 0 2
57790: PUSH
57791: LD_INT 3
57793: MINUS
57794: ARRAY
57795: ST_TO_ADDR
// end ; 10 .. 13 :
57796: GO 58306
57798: LD_INT 10
57800: DOUBLE
57801: GREATEREQUAL
57802: IFFALSE 57810
57804: LD_INT 13
57806: DOUBLE
57807: LESSEQUAL
57808: IFTRUE 57812
57810: GO 57889
57812: POP
// begin bc_type := b_lab_full ;
57813: LD_ADDR_OWVAR 42
57817: PUSH
57818: LD_INT 8
57820: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57821: LD_ADDR_OWVAR 44
57825: PUSH
57826: LD_INT 10
57828: PUSH
57829: LD_INT 12
57831: PUSH
57832: LD_INT 14
57834: PUSH
57835: LD_INT 13
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: PUSH
57844: LD_VAR 0 2
57848: PUSH
57849: LD_INT 9
57851: MINUS
57852: ARRAY
57853: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57854: LD_ADDR_OWVAR 45
57858: PUSH
57859: LD_INT 11
57861: PUSH
57862: LD_INT 15
57864: PUSH
57865: LD_INT 12
57867: PUSH
57868: LD_INT 15
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: PUSH
57877: LD_VAR 0 2
57881: PUSH
57882: LD_INT 9
57884: MINUS
57885: ARRAY
57886: ST_TO_ADDR
// end ; 14 :
57887: GO 58306
57889: LD_INT 14
57891: DOUBLE
57892: EQUAL
57893: IFTRUE 57897
57895: GO 57908
57897: POP
// bc_type := b_workshop ; 15 :
57898: LD_ADDR_OWVAR 42
57902: PUSH
57903: LD_INT 2
57905: ST_TO_ADDR
57906: GO 58306
57908: LD_INT 15
57910: DOUBLE
57911: EQUAL
57912: IFTRUE 57916
57914: GO 57927
57916: POP
// bc_type := b_factory ; 16 :
57917: LD_ADDR_OWVAR 42
57921: PUSH
57922: LD_INT 3
57924: ST_TO_ADDR
57925: GO 58306
57927: LD_INT 16
57929: DOUBLE
57930: EQUAL
57931: IFTRUE 57935
57933: GO 57946
57935: POP
// bc_type := b_ext_gun ; 17 :
57936: LD_ADDR_OWVAR 42
57940: PUSH
57941: LD_INT 17
57943: ST_TO_ADDR
57944: GO 58306
57946: LD_INT 17
57948: DOUBLE
57949: EQUAL
57950: IFTRUE 57954
57952: GO 57982
57954: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57955: LD_ADDR_OWVAR 42
57959: PUSH
57960: LD_INT 19
57962: PUSH
57963: LD_INT 23
57965: PUSH
57966: LD_INT 19
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: PUSH
57974: LD_VAR 0 1
57978: ARRAY
57979: ST_TO_ADDR
57980: GO 58306
57982: LD_INT 18
57984: DOUBLE
57985: EQUAL
57986: IFTRUE 57990
57988: GO 58001
57990: POP
// bc_type := b_ext_radar ; 19 :
57991: LD_ADDR_OWVAR 42
57995: PUSH
57996: LD_INT 20
57998: ST_TO_ADDR
57999: GO 58306
58001: LD_INT 19
58003: DOUBLE
58004: EQUAL
58005: IFTRUE 58009
58007: GO 58020
58009: POP
// bc_type := b_ext_radio ; 20 :
58010: LD_ADDR_OWVAR 42
58014: PUSH
58015: LD_INT 22
58017: ST_TO_ADDR
58018: GO 58306
58020: LD_INT 20
58022: DOUBLE
58023: EQUAL
58024: IFTRUE 58028
58026: GO 58039
58028: POP
// bc_type := b_ext_siberium ; 21 :
58029: LD_ADDR_OWVAR 42
58033: PUSH
58034: LD_INT 21
58036: ST_TO_ADDR
58037: GO 58306
58039: LD_INT 21
58041: DOUBLE
58042: EQUAL
58043: IFTRUE 58047
58045: GO 58058
58047: POP
// bc_type := b_ext_computer ; 22 :
58048: LD_ADDR_OWVAR 42
58052: PUSH
58053: LD_INT 24
58055: ST_TO_ADDR
58056: GO 58306
58058: LD_INT 22
58060: DOUBLE
58061: EQUAL
58062: IFTRUE 58066
58064: GO 58077
58066: POP
// bc_type := b_ext_track ; 23 :
58067: LD_ADDR_OWVAR 42
58071: PUSH
58072: LD_INT 16
58074: ST_TO_ADDR
58075: GO 58306
58077: LD_INT 23
58079: DOUBLE
58080: EQUAL
58081: IFTRUE 58085
58083: GO 58096
58085: POP
// bc_type := b_ext_laser ; 24 :
58086: LD_ADDR_OWVAR 42
58090: PUSH
58091: LD_INT 25
58093: ST_TO_ADDR
58094: GO 58306
58096: LD_INT 24
58098: DOUBLE
58099: EQUAL
58100: IFTRUE 58104
58102: GO 58115
58104: POP
// bc_type := b_control_tower ; 25 :
58105: LD_ADDR_OWVAR 42
58109: PUSH
58110: LD_INT 36
58112: ST_TO_ADDR
58113: GO 58306
58115: LD_INT 25
58117: DOUBLE
58118: EQUAL
58119: IFTRUE 58123
58121: GO 58134
58123: POP
// bc_type := b_breastwork ; 26 :
58124: LD_ADDR_OWVAR 42
58128: PUSH
58129: LD_INT 31
58131: ST_TO_ADDR
58132: GO 58306
58134: LD_INT 26
58136: DOUBLE
58137: EQUAL
58138: IFTRUE 58142
58140: GO 58153
58142: POP
// bc_type := b_bunker ; 27 :
58143: LD_ADDR_OWVAR 42
58147: PUSH
58148: LD_INT 32
58150: ST_TO_ADDR
58151: GO 58306
58153: LD_INT 27
58155: DOUBLE
58156: EQUAL
58157: IFTRUE 58161
58159: GO 58172
58161: POP
// bc_type := b_turret ; 28 :
58162: LD_ADDR_OWVAR 42
58166: PUSH
58167: LD_INT 33
58169: ST_TO_ADDR
58170: GO 58306
58172: LD_INT 28
58174: DOUBLE
58175: EQUAL
58176: IFTRUE 58180
58178: GO 58191
58180: POP
// bc_type := b_armoury ; 29 :
58181: LD_ADDR_OWVAR 42
58185: PUSH
58186: LD_INT 4
58188: ST_TO_ADDR
58189: GO 58306
58191: LD_INT 29
58193: DOUBLE
58194: EQUAL
58195: IFTRUE 58199
58197: GO 58210
58199: POP
// bc_type := b_barracks ; 30 :
58200: LD_ADDR_OWVAR 42
58204: PUSH
58205: LD_INT 5
58207: ST_TO_ADDR
58208: GO 58306
58210: LD_INT 30
58212: DOUBLE
58213: EQUAL
58214: IFTRUE 58218
58216: GO 58229
58218: POP
// bc_type := b_solar_power ; 31 :
58219: LD_ADDR_OWVAR 42
58223: PUSH
58224: LD_INT 27
58226: ST_TO_ADDR
58227: GO 58306
58229: LD_INT 31
58231: DOUBLE
58232: EQUAL
58233: IFTRUE 58237
58235: GO 58248
58237: POP
// bc_type := b_oil_power ; 32 :
58238: LD_ADDR_OWVAR 42
58242: PUSH
58243: LD_INT 26
58245: ST_TO_ADDR
58246: GO 58306
58248: LD_INT 32
58250: DOUBLE
58251: EQUAL
58252: IFTRUE 58256
58254: GO 58267
58256: POP
// bc_type := b_siberite_power ; 33 :
58257: LD_ADDR_OWVAR 42
58261: PUSH
58262: LD_INT 28
58264: ST_TO_ADDR
58265: GO 58306
58267: LD_INT 33
58269: DOUBLE
58270: EQUAL
58271: IFTRUE 58275
58273: GO 58286
58275: POP
// bc_type := b_oil_mine ; 34 :
58276: LD_ADDR_OWVAR 42
58280: PUSH
58281: LD_INT 29
58283: ST_TO_ADDR
58284: GO 58306
58286: LD_INT 34
58288: DOUBLE
58289: EQUAL
58290: IFTRUE 58294
58292: GO 58305
58294: POP
// bc_type := b_siberite_mine ; end ;
58295: LD_ADDR_OWVAR 42
58299: PUSH
58300: LD_INT 30
58302: ST_TO_ADDR
58303: GO 58306
58305: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58306: LD_ADDR_VAR 0 8
58310: PUSH
58311: LD_VAR 0 5
58315: PPUSH
58316: LD_VAR 0 6
58320: PPUSH
58321: LD_VAR 0 3
58325: PPUSH
58326: CALL_OW 47
58330: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58331: LD_OWVAR 42
58335: PUSH
58336: LD_INT 32
58338: PUSH
58339: LD_INT 33
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: IN
58346: IFFALSE 58362
// PlaceWeaponTurret ( b , weapon ) ;
58348: LD_VAR 0 8
58352: PPUSH
58353: LD_VAR 0 4
58357: PPUSH
58358: CALL_OW 431
// end ;
58362: LD_VAR 0 7
58366: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58367: LD_INT 0
58369: PPUSH
58370: PPUSH
58371: PPUSH
58372: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58373: LD_ADDR_VAR 0 4
58377: PUSH
58378: LD_INT 22
58380: PUSH
58381: LD_OWVAR 2
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 30
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 30
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: LIST
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PPUSH
58422: CALL_OW 69
58426: ST_TO_ADDR
// if not tmp then
58427: LD_VAR 0 4
58431: NOT
58432: IFFALSE 58436
// exit ;
58434: GO 58495
// for i in tmp do
58436: LD_ADDR_VAR 0 2
58440: PUSH
58441: LD_VAR 0 4
58445: PUSH
58446: FOR_IN
58447: IFFALSE 58493
// for j = 1 to 3 do
58449: LD_ADDR_VAR 0 3
58453: PUSH
58454: DOUBLE
58455: LD_INT 1
58457: DEC
58458: ST_TO_ADDR
58459: LD_INT 3
58461: PUSH
58462: FOR_TO
58463: IFFALSE 58489
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58465: LD_VAR 0 2
58469: PPUSH
58470: CALL_OW 274
58474: PPUSH
58475: LD_VAR 0 3
58479: PPUSH
58480: LD_INT 99999
58482: PPUSH
58483: CALL_OW 277
58487: GO 58462
58489: POP
58490: POP
58491: GO 58446
58493: POP
58494: POP
// end ;
58495: LD_VAR 0 1
58499: RET
// export function hHackSetLevel10 ; var i , j ; begin
58500: LD_INT 0
58502: PPUSH
58503: PPUSH
58504: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58505: LD_ADDR_VAR 0 2
58509: PUSH
58510: LD_INT 21
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PPUSH
58520: CALL_OW 69
58524: PUSH
58525: FOR_IN
58526: IFFALSE 58578
// if IsSelected ( i ) then
58528: LD_VAR 0 2
58532: PPUSH
58533: CALL_OW 306
58537: IFFALSE 58576
// begin for j := 1 to 4 do
58539: LD_ADDR_VAR 0 3
58543: PUSH
58544: DOUBLE
58545: LD_INT 1
58547: DEC
58548: ST_TO_ADDR
58549: LD_INT 4
58551: PUSH
58552: FOR_TO
58553: IFFALSE 58574
// SetSkill ( i , j , 10 ) ;
58555: LD_VAR 0 2
58559: PPUSH
58560: LD_VAR 0 3
58564: PPUSH
58565: LD_INT 10
58567: PPUSH
58568: CALL_OW 237
58572: GO 58552
58574: POP
58575: POP
// end ;
58576: GO 58525
58578: POP
58579: POP
// end ;
58580: LD_VAR 0 1
58584: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58585: LD_INT 0
58587: PPUSH
58588: PPUSH
58589: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58590: LD_ADDR_VAR 0 2
58594: PUSH
58595: LD_INT 22
58597: PUSH
58598: LD_OWVAR 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 21
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PPUSH
58621: CALL_OW 69
58625: PUSH
58626: FOR_IN
58627: IFFALSE 58668
// begin for j := 1 to 4 do
58629: LD_ADDR_VAR 0 3
58633: PUSH
58634: DOUBLE
58635: LD_INT 1
58637: DEC
58638: ST_TO_ADDR
58639: LD_INT 4
58641: PUSH
58642: FOR_TO
58643: IFFALSE 58664
// SetSkill ( i , j , 10 ) ;
58645: LD_VAR 0 2
58649: PPUSH
58650: LD_VAR 0 3
58654: PPUSH
58655: LD_INT 10
58657: PPUSH
58658: CALL_OW 237
58662: GO 58642
58664: POP
58665: POP
// end ;
58666: GO 58626
58668: POP
58669: POP
// end ;
58670: LD_VAR 0 1
58674: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58675: LD_INT 0
58677: PPUSH
// uc_side := your_side ;
58678: LD_ADDR_OWVAR 20
58682: PUSH
58683: LD_OWVAR 2
58687: ST_TO_ADDR
// uc_nation := nation ;
58688: LD_ADDR_OWVAR 21
58692: PUSH
58693: LD_VAR 0 1
58697: ST_TO_ADDR
// InitHc ;
58698: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58702: LD_INT 0
58704: PPUSH
58705: LD_VAR 0 2
58709: PPUSH
58710: LD_VAR 0 3
58714: PPUSH
58715: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58719: LD_VAR 0 4
58723: PPUSH
58724: LD_VAR 0 5
58728: PPUSH
58729: CALL_OW 428
58733: PUSH
58734: LD_INT 0
58736: EQUAL
58737: IFFALSE 58761
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58739: CALL_OW 44
58743: PPUSH
58744: LD_VAR 0 4
58748: PPUSH
58749: LD_VAR 0 5
58753: PPUSH
58754: LD_INT 1
58756: PPUSH
58757: CALL_OW 48
// end ;
58761: LD_VAR 0 6
58765: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58766: LD_INT 0
58768: PPUSH
58769: PPUSH
// uc_side := your_side ;
58770: LD_ADDR_OWVAR 20
58774: PUSH
58775: LD_OWVAR 2
58779: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58780: LD_VAR 0 1
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: LD_INT 5
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: IN
58807: IFFALSE 58819
// uc_nation := nation_american else
58809: LD_ADDR_OWVAR 21
58813: PUSH
58814: LD_INT 1
58816: ST_TO_ADDR
58817: GO 58862
// if chassis in [ 11 , 12 , 13 , 14 ] then
58819: LD_VAR 0 1
58823: PUSH
58824: LD_INT 11
58826: PUSH
58827: LD_INT 12
58829: PUSH
58830: LD_INT 13
58832: PUSH
58833: LD_INT 14
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: IN
58842: IFFALSE 58854
// uc_nation := nation_arabian else
58844: LD_ADDR_OWVAR 21
58848: PUSH
58849: LD_INT 2
58851: ST_TO_ADDR
58852: GO 58862
// uc_nation := nation_russian ;
58854: LD_ADDR_OWVAR 21
58858: PUSH
58859: LD_INT 3
58861: ST_TO_ADDR
// vc_chassis := chassis ;
58862: LD_ADDR_OWVAR 37
58866: PUSH
58867: LD_VAR 0 1
58871: ST_TO_ADDR
// vc_engine := engine ;
58872: LD_ADDR_OWVAR 39
58876: PUSH
58877: LD_VAR 0 2
58881: ST_TO_ADDR
// vc_control := control ;
58882: LD_ADDR_OWVAR 38
58886: PUSH
58887: LD_VAR 0 3
58891: ST_TO_ADDR
// vc_weapon := weapon ;
58892: LD_ADDR_OWVAR 40
58896: PUSH
58897: LD_VAR 0 4
58901: ST_TO_ADDR
// un := CreateVehicle ;
58902: LD_ADDR_VAR 0 8
58906: PUSH
58907: CALL_OW 45
58911: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58912: LD_VAR 0 8
58916: PPUSH
58917: LD_INT 0
58919: PPUSH
58920: LD_INT 5
58922: PPUSH
58923: CALL_OW 12
58927: PPUSH
58928: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58932: LD_VAR 0 8
58936: PPUSH
58937: LD_VAR 0 5
58941: PPUSH
58942: LD_VAR 0 6
58946: PPUSH
58947: LD_INT 1
58949: PPUSH
58950: CALL_OW 48
// end ;
58954: LD_VAR 0 7
58958: RET
// export hInvincible ; every 1 do
58959: GO 58961
58961: DISABLE
// hInvincible := [ ] ;
58962: LD_ADDR_EXP 71
58966: PUSH
58967: EMPTY
58968: ST_TO_ADDR
58969: END
// every 10 do var i ;
58970: GO 58972
58972: DISABLE
58973: LD_INT 0
58975: PPUSH
// begin enable ;
58976: ENABLE
// if not hInvincible then
58977: LD_EXP 71
58981: NOT
58982: IFFALSE 58986
// exit ;
58984: GO 59030
// for i in hInvincible do
58986: LD_ADDR_VAR 0 1
58990: PUSH
58991: LD_EXP 71
58995: PUSH
58996: FOR_IN
58997: IFFALSE 59028
// if GetLives ( i ) < 1000 then
58999: LD_VAR 0 1
59003: PPUSH
59004: CALL_OW 256
59008: PUSH
59009: LD_INT 1000
59011: LESS
59012: IFFALSE 59026
// SetLives ( i , 1000 ) ;
59014: LD_VAR 0 1
59018: PPUSH
59019: LD_INT 1000
59021: PPUSH
59022: CALL_OW 234
59026: GO 58996
59028: POP
59029: POP
// end ;
59030: PPOPN 1
59032: END
// export function hHackInvincible ; var i ; begin
59033: LD_INT 0
59035: PPUSH
59036: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59037: LD_ADDR_VAR 0 2
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 21
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 21
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: PPUSH
59070: CALL_OW 69
59074: PUSH
59075: FOR_IN
59076: IFFALSE 59137
// if IsSelected ( i ) then
59078: LD_VAR 0 2
59082: PPUSH
59083: CALL_OW 306
59087: IFFALSE 59135
// begin if i in hInvincible then
59089: LD_VAR 0 2
59093: PUSH
59094: LD_EXP 71
59098: IN
59099: IFFALSE 59119
// hInvincible := hInvincible diff i else
59101: LD_ADDR_EXP 71
59105: PUSH
59106: LD_EXP 71
59110: PUSH
59111: LD_VAR 0 2
59115: DIFF
59116: ST_TO_ADDR
59117: GO 59135
// hInvincible := hInvincible union i ;
59119: LD_ADDR_EXP 71
59123: PUSH
59124: LD_EXP 71
59128: PUSH
59129: LD_VAR 0 2
59133: UNION
59134: ST_TO_ADDR
// end ;
59135: GO 59075
59137: POP
59138: POP
// end ;
59139: LD_VAR 0 1
59143: RET
// export function hHackInvisible ; var i , j ; begin
59144: LD_INT 0
59146: PPUSH
59147: PPUSH
59148: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59149: LD_ADDR_VAR 0 2
59153: PUSH
59154: LD_INT 21
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PPUSH
59164: CALL_OW 69
59168: PUSH
59169: FOR_IN
59170: IFFALSE 59194
// if IsSelected ( i ) then
59172: LD_VAR 0 2
59176: PPUSH
59177: CALL_OW 306
59181: IFFALSE 59192
// ComForceInvisible ( i ) ;
59183: LD_VAR 0 2
59187: PPUSH
59188: CALL_OW 496
59192: GO 59169
59194: POP
59195: POP
// end ;
59196: LD_VAR 0 1
59200: RET
// export function hHackChangeYourSide ; begin
59201: LD_INT 0
59203: PPUSH
// if your_side = 8 then
59204: LD_OWVAR 2
59208: PUSH
59209: LD_INT 8
59211: EQUAL
59212: IFFALSE 59224
// your_side := 0 else
59214: LD_ADDR_OWVAR 2
59218: PUSH
59219: LD_INT 0
59221: ST_TO_ADDR
59222: GO 59238
// your_side := your_side + 1 ;
59224: LD_ADDR_OWVAR 2
59228: PUSH
59229: LD_OWVAR 2
59233: PUSH
59234: LD_INT 1
59236: PLUS
59237: ST_TO_ADDR
// end ;
59238: LD_VAR 0 1
59242: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59243: LD_INT 0
59245: PPUSH
59246: PPUSH
59247: PPUSH
// for i in all_units do
59248: LD_ADDR_VAR 0 2
59252: PUSH
59253: LD_OWVAR 3
59257: PUSH
59258: FOR_IN
59259: IFFALSE 59337
// if IsSelected ( i ) then
59261: LD_VAR 0 2
59265: PPUSH
59266: CALL_OW 306
59270: IFFALSE 59335
// begin j := GetSide ( i ) ;
59272: LD_ADDR_VAR 0 3
59276: PUSH
59277: LD_VAR 0 2
59281: PPUSH
59282: CALL_OW 255
59286: ST_TO_ADDR
// if j = 8 then
59287: LD_VAR 0 3
59291: PUSH
59292: LD_INT 8
59294: EQUAL
59295: IFFALSE 59307
// j := 0 else
59297: LD_ADDR_VAR 0 3
59301: PUSH
59302: LD_INT 0
59304: ST_TO_ADDR
59305: GO 59321
// j := j + 1 ;
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_VAR 0 3
59316: PUSH
59317: LD_INT 1
59319: PLUS
59320: ST_TO_ADDR
// SetSide ( i , j ) ;
59321: LD_VAR 0 2
59325: PPUSH
59326: LD_VAR 0 3
59330: PPUSH
59331: CALL_OW 235
// end ;
59335: GO 59258
59337: POP
59338: POP
// end ;
59339: LD_VAR 0 1
59343: RET
// export function hHackFog ; begin
59344: LD_INT 0
59346: PPUSH
// FogOff ( true ) ;
59347: LD_INT 1
59349: PPUSH
59350: CALL_OW 344
// end ;
59354: LD_VAR 0 1
59358: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59359: LD_INT 0
59361: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59362: LD_VAR 0 1
59366: PPUSH
59367: LD_VAR 0 2
59371: PPUSH
59372: LD_VAR 0 3
59376: PPUSH
59377: LD_INT 1
59379: PPUSH
59380: LD_INT 1
59382: PPUSH
59383: CALL_OW 483
// CenterOnXY ( x , y ) ;
59387: LD_VAR 0 2
59391: PPUSH
59392: LD_VAR 0 3
59396: PPUSH
59397: CALL_OW 84
// end ;
59401: LD_VAR 0 4
59405: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59406: LD_INT 0
59408: PPUSH
59409: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59410: LD_VAR 0 1
59414: NOT
59415: PUSH
59416: LD_VAR 0 2
59420: PPUSH
59421: LD_VAR 0 3
59425: PPUSH
59426: CALL_OW 488
59430: NOT
59431: OR
59432: PUSH
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 266
59442: PUSH
59443: LD_INT 3
59445: NONEQUAL
59446: PUSH
59447: LD_VAR 0 1
59451: PPUSH
59452: CALL_OW 247
59456: PUSH
59457: LD_INT 1
59459: EQUAL
59460: NOT
59461: AND
59462: OR
59463: IFFALSE 59467
// exit ;
59465: GO 59616
// if GetType ( factory ) = unit_human then
59467: LD_VAR 0 1
59471: PPUSH
59472: CALL_OW 247
59476: PUSH
59477: LD_INT 1
59479: EQUAL
59480: IFFALSE 59497
// factory := IsInUnit ( factory ) ;
59482: LD_ADDR_VAR 0 1
59486: PUSH
59487: LD_VAR 0 1
59491: PPUSH
59492: CALL_OW 310
59496: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59497: LD_VAR 0 1
59501: PPUSH
59502: CALL_OW 266
59506: PUSH
59507: LD_INT 3
59509: NONEQUAL
59510: IFFALSE 59514
// exit ;
59512: GO 59616
// if HexInfo ( x , y ) = factory then
59514: LD_VAR 0 2
59518: PPUSH
59519: LD_VAR 0 3
59523: PPUSH
59524: CALL_OW 428
59528: PUSH
59529: LD_VAR 0 1
59533: EQUAL
59534: IFFALSE 59561
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59536: LD_ADDR_EXP 72
59540: PUSH
59541: LD_EXP 72
59545: PPUSH
59546: LD_VAR 0 1
59550: PPUSH
59551: LD_INT 0
59553: PPUSH
59554: CALL_OW 1
59558: ST_TO_ADDR
59559: GO 59612
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59561: LD_ADDR_EXP 72
59565: PUSH
59566: LD_EXP 72
59570: PPUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: LD_VAR 0 1
59580: PPUSH
59581: CALL_OW 255
59585: PUSH
59586: LD_VAR 0 1
59590: PUSH
59591: LD_VAR 0 2
59595: PUSH
59596: LD_VAR 0 3
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: PPUSH
59607: CALL_OW 1
59611: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59612: CALL 59621 0 0
// end ;
59616: LD_VAR 0 4
59620: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59621: LD_INT 0
59623: PPUSH
59624: PPUSH
59625: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59626: LD_STRING resetFactoryWaypoint();
59628: PPUSH
59629: CALL_OW 559
// if factoryWaypoints then
59633: LD_EXP 72
59637: IFFALSE 59763
// begin list := PrepareArray ( factoryWaypoints ) ;
59639: LD_ADDR_VAR 0 3
59643: PUSH
59644: LD_EXP 72
59648: PPUSH
59649: CALL 42274 0 1
59653: ST_TO_ADDR
// for i := 1 to list do
59654: LD_ADDR_VAR 0 2
59658: PUSH
59659: DOUBLE
59660: LD_INT 1
59662: DEC
59663: ST_TO_ADDR
59664: LD_VAR 0 3
59668: PUSH
59669: FOR_TO
59670: IFFALSE 59761
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59672: LD_STRING setFactoryWaypointXY(
59674: PUSH
59675: LD_VAR 0 3
59679: PUSH
59680: LD_VAR 0 2
59684: ARRAY
59685: PUSH
59686: LD_INT 1
59688: ARRAY
59689: STR
59690: PUSH
59691: LD_STRING ,
59693: STR
59694: PUSH
59695: LD_VAR 0 3
59699: PUSH
59700: LD_VAR 0 2
59704: ARRAY
59705: PUSH
59706: LD_INT 2
59708: ARRAY
59709: STR
59710: PUSH
59711: LD_STRING ,
59713: STR
59714: PUSH
59715: LD_VAR 0 3
59719: PUSH
59720: LD_VAR 0 2
59724: ARRAY
59725: PUSH
59726: LD_INT 3
59728: ARRAY
59729: STR
59730: PUSH
59731: LD_STRING ,
59733: STR
59734: PUSH
59735: LD_VAR 0 3
59739: PUSH
59740: LD_VAR 0 2
59744: ARRAY
59745: PUSH
59746: LD_INT 4
59748: ARRAY
59749: STR
59750: PUSH
59751: LD_STRING )
59753: STR
59754: PPUSH
59755: CALL_OW 559
59759: GO 59669
59761: POP
59762: POP
// end ; end ;
59763: LD_VAR 0 1
59767: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59768: LD_INT 0
59770: PPUSH
// if HexInfo ( x , y ) = warehouse then
59771: LD_VAR 0 2
59775: PPUSH
59776: LD_VAR 0 3
59780: PPUSH
59781: CALL_OW 428
59785: PUSH
59786: LD_VAR 0 1
59790: EQUAL
59791: IFFALSE 59818
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59793: LD_ADDR_EXP 73
59797: PUSH
59798: LD_EXP 73
59802: PPUSH
59803: LD_VAR 0 1
59807: PPUSH
59808: LD_INT 0
59810: PPUSH
59811: CALL_OW 1
59815: ST_TO_ADDR
59816: GO 59869
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59818: LD_ADDR_EXP 73
59822: PUSH
59823: LD_EXP 73
59827: PPUSH
59828: LD_VAR 0 1
59832: PPUSH
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 255
59842: PUSH
59843: LD_VAR 0 1
59847: PUSH
59848: LD_VAR 0 2
59852: PUSH
59853: LD_VAR 0 3
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: PPUSH
59864: CALL_OW 1
59868: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59869: CALL 59878 0 0
// end ;
59873: LD_VAR 0 4
59877: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59878: LD_INT 0
59880: PPUSH
59881: PPUSH
59882: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59883: LD_STRING resetWarehouseGatheringPoints();
59885: PPUSH
59886: CALL_OW 559
// if warehouseGatheringPoints then
59890: LD_EXP 73
59894: IFFALSE 60020
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59896: LD_ADDR_VAR 0 3
59900: PUSH
59901: LD_EXP 73
59905: PPUSH
59906: CALL 42274 0 1
59910: ST_TO_ADDR
// for i := 1 to list do
59911: LD_ADDR_VAR 0 2
59915: PUSH
59916: DOUBLE
59917: LD_INT 1
59919: DEC
59920: ST_TO_ADDR
59921: LD_VAR 0 3
59925: PUSH
59926: FOR_TO
59927: IFFALSE 60018
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59929: LD_STRING setWarehouseGatheringPointXY(
59931: PUSH
59932: LD_VAR 0 3
59936: PUSH
59937: LD_VAR 0 2
59941: ARRAY
59942: PUSH
59943: LD_INT 1
59945: ARRAY
59946: STR
59947: PUSH
59948: LD_STRING ,
59950: STR
59951: PUSH
59952: LD_VAR 0 3
59956: PUSH
59957: LD_VAR 0 2
59961: ARRAY
59962: PUSH
59963: LD_INT 2
59965: ARRAY
59966: STR
59967: PUSH
59968: LD_STRING ,
59970: STR
59971: PUSH
59972: LD_VAR 0 3
59976: PUSH
59977: LD_VAR 0 2
59981: ARRAY
59982: PUSH
59983: LD_INT 3
59985: ARRAY
59986: STR
59987: PUSH
59988: LD_STRING ,
59990: STR
59991: PUSH
59992: LD_VAR 0 3
59996: PUSH
59997: LD_VAR 0 2
60001: ARRAY
60002: PUSH
60003: LD_INT 4
60005: ARRAY
60006: STR
60007: PUSH
60008: LD_STRING )
60010: STR
60011: PPUSH
60012: CALL_OW 559
60016: GO 59926
60018: POP
60019: POP
// end ; end ;
60020: LD_VAR 0 1
60024: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60025: LD_EXP 73
60029: IFFALSE 60714
60031: GO 60033
60033: DISABLE
60034: LD_INT 0
60036: PPUSH
60037: PPUSH
60038: PPUSH
60039: PPUSH
60040: PPUSH
60041: PPUSH
60042: PPUSH
60043: PPUSH
60044: PPUSH
// begin enable ;
60045: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
60046: LD_ADDR_VAR 0 3
60050: PUSH
60051: LD_EXP 73
60055: PPUSH
60056: CALL 42274 0 1
60060: ST_TO_ADDR
// if not list then
60061: LD_VAR 0 3
60065: NOT
60066: IFFALSE 60070
// exit ;
60068: GO 60714
// for i := 1 to list do
60070: LD_ADDR_VAR 0 1
60074: PUSH
60075: DOUBLE
60076: LD_INT 1
60078: DEC
60079: ST_TO_ADDR
60080: LD_VAR 0 3
60084: PUSH
60085: FOR_TO
60086: IFFALSE 60712
// begin depot := list [ i ] [ 2 ] ;
60088: LD_ADDR_VAR 0 8
60092: PUSH
60093: LD_VAR 0 3
60097: PUSH
60098: LD_VAR 0 1
60102: ARRAY
60103: PUSH
60104: LD_INT 2
60106: ARRAY
60107: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60108: LD_ADDR_VAR 0 5
60112: PUSH
60113: LD_VAR 0 3
60117: PUSH
60118: LD_VAR 0 1
60122: ARRAY
60123: PUSH
60124: LD_INT 1
60126: ARRAY
60127: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60128: LD_VAR 0 8
60132: PPUSH
60133: CALL_OW 301
60137: PUSH
60138: LD_VAR 0 5
60142: PUSH
60143: LD_VAR 0 8
60147: PPUSH
60148: CALL_OW 255
60152: NONEQUAL
60153: OR
60154: IFFALSE 60183
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60156: LD_ADDR_EXP 73
60160: PUSH
60161: LD_EXP 73
60165: PPUSH
60166: LD_VAR 0 8
60170: PPUSH
60171: LD_INT 0
60173: PPUSH
60174: CALL_OW 1
60178: ST_TO_ADDR
// exit ;
60179: POP
60180: POP
60181: GO 60714
// end ; x := list [ i ] [ 3 ] ;
60183: LD_ADDR_VAR 0 6
60187: PUSH
60188: LD_VAR 0 3
60192: PUSH
60193: LD_VAR 0 1
60197: ARRAY
60198: PUSH
60199: LD_INT 3
60201: ARRAY
60202: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60203: LD_ADDR_VAR 0 7
60207: PUSH
60208: LD_VAR 0 3
60212: PUSH
60213: LD_VAR 0 1
60217: ARRAY
60218: PUSH
60219: LD_INT 4
60221: ARRAY
60222: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60223: LD_ADDR_VAR 0 9
60227: PUSH
60228: LD_VAR 0 6
60232: PPUSH
60233: LD_VAR 0 7
60237: PPUSH
60238: LD_INT 16
60240: PPUSH
60241: CALL 40862 0 3
60245: ST_TO_ADDR
// if not cratesNearbyPoint then
60246: LD_VAR 0 9
60250: NOT
60251: IFFALSE 60257
// exit ;
60253: POP
60254: POP
60255: GO 60714
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60257: LD_ADDR_VAR 0 4
60261: PUSH
60262: LD_INT 22
60264: PUSH
60265: LD_VAR 0 5
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: PUSH
60277: LD_INT 60
60279: PUSH
60280: EMPTY
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 91
60289: PUSH
60290: LD_VAR 0 8
60294: PUSH
60295: LD_INT 6
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: LD_INT 25
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 25
60318: PUSH
60319: LD_INT 16
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: LIST
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: PPUSH
60337: CALL_OW 69
60341: PUSH
60342: LD_VAR 0 8
60346: PPUSH
60347: CALL_OW 313
60351: PPUSH
60352: LD_INT 3
60354: PUSH
60355: LD_INT 60
60357: PUSH
60358: EMPTY
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: LD_INT 25
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 25
60380: PUSH
60381: LD_INT 16
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: LIST
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PPUSH
60397: CALL_OW 72
60401: UNION
60402: ST_TO_ADDR
// if tmp then
60403: LD_VAR 0 4
60407: IFFALSE 60487
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60409: LD_ADDR_VAR 0 4
60413: PUSH
60414: LD_VAR 0 4
60418: PPUSH
60419: LD_INT 3
60421: PPUSH
60422: CALL 38831 0 2
60426: ST_TO_ADDR
// for j in tmp do
60427: LD_ADDR_VAR 0 2
60431: PUSH
60432: LD_VAR 0 4
60436: PUSH
60437: FOR_IN
60438: IFFALSE 60481
// begin if IsInUnit ( j ) then
60440: LD_VAR 0 2
60444: PPUSH
60445: CALL_OW 310
60449: IFFALSE 60460
// ComExit ( j ) ;
60451: LD_VAR 0 2
60455: PPUSH
60456: CALL 38914 0 1
// AddComCollect ( j , x , y ) ;
60460: LD_VAR 0 2
60464: PPUSH
60465: LD_VAR 0 6
60469: PPUSH
60470: LD_VAR 0 7
60474: PPUSH
60475: CALL_OW 177
// end ;
60479: GO 60437
60481: POP
60482: POP
// exit ;
60483: POP
60484: POP
60485: GO 60714
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60487: LD_ADDR_VAR 0 4
60491: PUSH
60492: LD_INT 22
60494: PUSH
60495: LD_VAR 0 5
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 91
60506: PUSH
60507: LD_VAR 0 8
60511: PUSH
60512: LD_INT 8
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 34
60525: PUSH
60526: LD_INT 12
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 34
60535: PUSH
60536: LD_INT 51
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 34
60545: PUSH
60546: LD_INT 32
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 34
60555: PUSH
60556: LD_INT 89
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: PPUSH
60575: CALL_OW 69
60579: ST_TO_ADDR
// if tmp then
60580: LD_VAR 0 4
60584: IFFALSE 60710
// begin for j in tmp do
60586: LD_ADDR_VAR 0 2
60590: PUSH
60591: LD_VAR 0 4
60595: PUSH
60596: FOR_IN
60597: IFFALSE 60708
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
60599: LD_VAR 0 2
60603: PPUSH
60604: CALL_OW 262
60608: PUSH
60609: LD_INT 3
60611: EQUAL
60612: PUSH
60613: LD_VAR 0 2
60617: PPUSH
60618: CALL_OW 261
60622: PUSH
60623: LD_INT 20
60625: GREATER
60626: OR
60627: PUSH
60628: LD_VAR 0 2
60632: PPUSH
60633: CALL_OW 314
60637: NOT
60638: AND
60639: PUSH
60640: LD_VAR 0 2
60644: PPUSH
60645: CALL_OW 263
60649: PUSH
60650: LD_INT 1
60652: NONEQUAL
60653: PUSH
60654: LD_VAR 0 2
60658: PPUSH
60659: CALL_OW 311
60663: OR
60664: AND
60665: IFFALSE 60706
// begin ComCollect ( j , x , y ) ;
60667: LD_VAR 0 2
60671: PPUSH
60672: LD_VAR 0 6
60676: PPUSH
60677: LD_VAR 0 7
60681: PPUSH
60682: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
60686: LD_VAR 0 2
60690: PPUSH
60691: LD_VAR 0 8
60695: PPUSH
60696: CALL_OW 172
// exit ;
60700: POP
60701: POP
60702: POP
60703: POP
60704: GO 60714
// end ;
60706: GO 60596
60708: POP
60709: POP
// end ; end ;
60710: GO 60085
60712: POP
60713: POP
// end ; end_of_file end_of_file
60714: PPOPN 9
60716: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60717: LD_INT 0
60719: PPUSH
60720: PPUSH
60721: PPUSH
60722: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60723: LD_VAR 0 1
60727: PPUSH
60728: CALL_OW 264
60732: PUSH
60733: LD_INT 91
60735: EQUAL
60736: IFFALSE 60808
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60738: LD_INT 68
60740: PPUSH
60741: LD_VAR 0 1
60745: PPUSH
60746: CALL_OW 255
60750: PPUSH
60751: CALL_OW 321
60755: PUSH
60756: LD_INT 2
60758: EQUAL
60759: IFFALSE 60771
// eff := 70 else
60761: LD_ADDR_VAR 0 4
60765: PUSH
60766: LD_INT 70
60768: ST_TO_ADDR
60769: GO 60779
// eff := 30 ;
60771: LD_ADDR_VAR 0 4
60775: PUSH
60776: LD_INT 30
60778: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60779: LD_VAR 0 1
60783: PPUSH
60784: CALL_OW 250
60788: PPUSH
60789: LD_VAR 0 1
60793: PPUSH
60794: CALL_OW 251
60798: PPUSH
60799: LD_VAR 0 4
60803: PPUSH
60804: CALL_OW 495
// end ; end ;
60808: LD_VAR 0 2
60812: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60813: LD_INT 0
60815: PPUSH
// end ;
60816: LD_VAR 0 4
60820: RET
// export function SOS_Command ( cmd ) ; begin
60821: LD_INT 0
60823: PPUSH
// end ;
60824: LD_VAR 0 2
60828: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60829: LD_INT 0
60831: PPUSH
// end ;
60832: LD_VAR 0 6
60836: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
60837: LD_INT 0
60839: PPUSH
60840: PPUSH
// if not vehicle or not factory then
60841: LD_VAR 0 1
60845: NOT
60846: PUSH
60847: LD_VAR 0 2
60851: NOT
60852: OR
60853: IFFALSE 60857
// exit ;
60855: GO 61088
// if factoryWaypoints >= factory then
60857: LD_EXP 72
60861: PUSH
60862: LD_VAR 0 2
60866: GREATEREQUAL
60867: IFFALSE 61088
// if factoryWaypoints [ factory ] then
60869: LD_EXP 72
60873: PUSH
60874: LD_VAR 0 2
60878: ARRAY
60879: IFFALSE 61088
// begin if GetControl ( vehicle ) = control_manual then
60881: LD_VAR 0 1
60885: PPUSH
60886: CALL_OW 263
60890: PUSH
60891: LD_INT 1
60893: EQUAL
60894: IFFALSE 60975
// begin driver := IsDrivenBy ( vehicle ) ;
60896: LD_ADDR_VAR 0 4
60900: PUSH
60901: LD_VAR 0 1
60905: PPUSH
60906: CALL_OW 311
60910: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60911: LD_VAR 0 4
60915: PPUSH
60916: LD_EXP 72
60920: PUSH
60921: LD_VAR 0 2
60925: ARRAY
60926: PUSH
60927: LD_INT 3
60929: ARRAY
60930: PPUSH
60931: LD_EXP 72
60935: PUSH
60936: LD_VAR 0 2
60940: ARRAY
60941: PUSH
60942: LD_INT 4
60944: ARRAY
60945: PPUSH
60946: CALL_OW 171
// AddComExitVehicle ( driver ) ;
60950: LD_VAR 0 4
60954: PPUSH
60955: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
60959: LD_VAR 0 4
60963: PPUSH
60964: LD_VAR 0 2
60968: PPUSH
60969: CALL_OW 180
// end else
60973: GO 61088
// if GetControl ( vehicle ) = control_remote then
60975: LD_VAR 0 1
60979: PPUSH
60980: CALL_OW 263
60984: PUSH
60985: LD_INT 2
60987: EQUAL
60988: IFFALSE 61049
// begin wait ( 0 0$2 ) ;
60990: LD_INT 70
60992: PPUSH
60993: CALL_OW 67
// if Connect ( vehicle ) then
60997: LD_VAR 0 1
61001: PPUSH
61002: CALL 9246 0 1
61006: IFFALSE 61047
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61008: LD_VAR 0 1
61012: PPUSH
61013: LD_EXP 72
61017: PUSH
61018: LD_VAR 0 2
61022: ARRAY
61023: PUSH
61024: LD_INT 3
61026: ARRAY
61027: PPUSH
61028: LD_EXP 72
61032: PUSH
61033: LD_VAR 0 2
61037: ARRAY
61038: PUSH
61039: LD_INT 4
61041: ARRAY
61042: PPUSH
61043: CALL_OW 171
// end else
61047: GO 61088
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61049: LD_VAR 0 1
61053: PPUSH
61054: LD_EXP 72
61058: PUSH
61059: LD_VAR 0 2
61063: ARRAY
61064: PUSH
61065: LD_INT 3
61067: ARRAY
61068: PPUSH
61069: LD_EXP 72
61073: PUSH
61074: LD_VAR 0 2
61078: ARRAY
61079: PUSH
61080: LD_INT 4
61082: ARRAY
61083: PPUSH
61084: CALL_OW 171
// end ; end ;
61088: LD_VAR 0 3
61092: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61093: LD_INT 0
61095: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61096: LD_VAR 0 1
61100: PUSH
61101: LD_INT 250
61103: EQUAL
61104: PUSH
61105: LD_VAR 0 2
61109: PPUSH
61110: CALL_OW 264
61114: PUSH
61115: LD_INT 81
61117: EQUAL
61118: AND
61119: IFFALSE 61140
// MinerPlaceMine ( unit , x , y ) ;
61121: LD_VAR 0 2
61125: PPUSH
61126: LD_VAR 0 4
61130: PPUSH
61131: LD_VAR 0 5
61135: PPUSH
61136: CALL 63525 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61140: LD_VAR 0 1
61144: PUSH
61145: LD_INT 251
61147: EQUAL
61148: PUSH
61149: LD_VAR 0 2
61153: PPUSH
61154: CALL_OW 264
61158: PUSH
61159: LD_INT 81
61161: EQUAL
61162: AND
61163: IFFALSE 61184
// MinerDetonateMine ( unit , x , y ) ;
61165: LD_VAR 0 2
61169: PPUSH
61170: LD_VAR 0 4
61174: PPUSH
61175: LD_VAR 0 5
61179: PPUSH
61180: CALL 63800 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61184: LD_VAR 0 1
61188: PUSH
61189: LD_INT 252
61191: EQUAL
61192: PUSH
61193: LD_VAR 0 2
61197: PPUSH
61198: CALL_OW 264
61202: PUSH
61203: LD_INT 81
61205: EQUAL
61206: AND
61207: IFFALSE 61228
// MinerCreateMinefield ( unit , x , y ) ;
61209: LD_VAR 0 2
61213: PPUSH
61214: LD_VAR 0 4
61218: PPUSH
61219: LD_VAR 0 5
61223: PPUSH
61224: CALL 64217 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61228: LD_VAR 0 1
61232: PUSH
61233: LD_INT 253
61235: EQUAL
61236: PUSH
61237: LD_VAR 0 2
61241: PPUSH
61242: CALL_OW 257
61246: PUSH
61247: LD_INT 5
61249: EQUAL
61250: AND
61251: IFFALSE 61272
// ComBinocular ( unit , x , y ) ;
61253: LD_VAR 0 2
61257: PPUSH
61258: LD_VAR 0 4
61262: PPUSH
61263: LD_VAR 0 5
61267: PPUSH
61268: CALL 64586 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61272: LD_VAR 0 1
61276: PUSH
61277: LD_INT 254
61279: EQUAL
61280: PUSH
61281: LD_VAR 0 2
61285: PPUSH
61286: CALL_OW 264
61290: PUSH
61291: LD_INT 99
61293: EQUAL
61294: AND
61295: PUSH
61296: LD_VAR 0 3
61300: PPUSH
61301: CALL_OW 263
61305: PUSH
61306: LD_INT 3
61308: EQUAL
61309: AND
61310: IFFALSE 61326
// HackDestroyVehicle ( unit , selectedUnit ) ;
61312: LD_VAR 0 2
61316: PPUSH
61317: LD_VAR 0 3
61321: PPUSH
61322: CALL 62889 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61326: LD_VAR 0 1
61330: PUSH
61331: LD_INT 255
61333: EQUAL
61334: PUSH
61335: LD_VAR 0 2
61339: PPUSH
61340: CALL_OW 264
61344: PUSH
61345: LD_INT 14
61347: PUSH
61348: LD_INT 53
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: IN
61355: AND
61356: PUSH
61357: LD_VAR 0 4
61361: PPUSH
61362: LD_VAR 0 5
61366: PPUSH
61367: CALL_OW 488
61371: AND
61372: IFFALSE 61396
// CutTreeXYR ( unit , x , y , 12 ) ;
61374: LD_VAR 0 2
61378: PPUSH
61379: LD_VAR 0 4
61383: PPUSH
61384: LD_VAR 0 5
61388: PPUSH
61389: LD_INT 12
61391: PPUSH
61392: CALL 61459 0 4
// if cmd = 256 then
61396: LD_VAR 0 1
61400: PUSH
61401: LD_INT 256
61403: EQUAL
61404: IFFALSE 61425
// SetFactoryWaypoint ( unit , x , y ) ;
61406: LD_VAR 0 2
61410: PPUSH
61411: LD_VAR 0 4
61415: PPUSH
61416: LD_VAR 0 5
61420: PPUSH
61421: CALL 59406 0 3
// if cmd = 257 then
61425: LD_VAR 0 1
61429: PUSH
61430: LD_INT 257
61432: EQUAL
61433: IFFALSE 61454
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61435: LD_VAR 0 2
61439: PPUSH
61440: LD_VAR 0 4
61444: PPUSH
61445: LD_VAR 0 5
61449: PPUSH
61450: CALL 59768 0 3
// end ;
61454: LD_VAR 0 6
61458: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61459: LD_INT 0
61461: PPUSH
61462: PPUSH
61463: PPUSH
61464: PPUSH
61465: PPUSH
61466: PPUSH
61467: PPUSH
61468: PPUSH
61469: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61470: LD_VAR 0 1
61474: NOT
61475: PUSH
61476: LD_VAR 0 2
61480: PPUSH
61481: LD_VAR 0 3
61485: PPUSH
61486: CALL_OW 488
61490: NOT
61491: OR
61492: PUSH
61493: LD_VAR 0 4
61497: NOT
61498: OR
61499: IFFALSE 61503
// exit ;
61501: GO 61843
// list := [ ] ;
61503: LD_ADDR_VAR 0 13
61507: PUSH
61508: EMPTY
61509: ST_TO_ADDR
// if x - r < 0 then
61510: LD_VAR 0 2
61514: PUSH
61515: LD_VAR 0 4
61519: MINUS
61520: PUSH
61521: LD_INT 0
61523: LESS
61524: IFFALSE 61536
// min_x := 0 else
61526: LD_ADDR_VAR 0 7
61530: PUSH
61531: LD_INT 0
61533: ST_TO_ADDR
61534: GO 61552
// min_x := x - r ;
61536: LD_ADDR_VAR 0 7
61540: PUSH
61541: LD_VAR 0 2
61545: PUSH
61546: LD_VAR 0 4
61550: MINUS
61551: ST_TO_ADDR
// if y - r < 0 then
61552: LD_VAR 0 3
61556: PUSH
61557: LD_VAR 0 4
61561: MINUS
61562: PUSH
61563: LD_INT 0
61565: LESS
61566: IFFALSE 61578
// min_y := 0 else
61568: LD_ADDR_VAR 0 8
61572: PUSH
61573: LD_INT 0
61575: ST_TO_ADDR
61576: GO 61594
// min_y := y - r ;
61578: LD_ADDR_VAR 0 8
61582: PUSH
61583: LD_VAR 0 3
61587: PUSH
61588: LD_VAR 0 4
61592: MINUS
61593: ST_TO_ADDR
// max_x := x + r ;
61594: LD_ADDR_VAR 0 9
61598: PUSH
61599: LD_VAR 0 2
61603: PUSH
61604: LD_VAR 0 4
61608: PLUS
61609: ST_TO_ADDR
// max_y := y + r ;
61610: LD_ADDR_VAR 0 10
61614: PUSH
61615: LD_VAR 0 3
61619: PUSH
61620: LD_VAR 0 4
61624: PLUS
61625: ST_TO_ADDR
// for _x = min_x to max_x do
61626: LD_ADDR_VAR 0 11
61630: PUSH
61631: DOUBLE
61632: LD_VAR 0 7
61636: DEC
61637: ST_TO_ADDR
61638: LD_VAR 0 9
61642: PUSH
61643: FOR_TO
61644: IFFALSE 61761
// for _y = min_y to max_y do
61646: LD_ADDR_VAR 0 12
61650: PUSH
61651: DOUBLE
61652: LD_VAR 0 8
61656: DEC
61657: ST_TO_ADDR
61658: LD_VAR 0 10
61662: PUSH
61663: FOR_TO
61664: IFFALSE 61757
// begin if not ValidHex ( _x , _y ) then
61666: LD_VAR 0 11
61670: PPUSH
61671: LD_VAR 0 12
61675: PPUSH
61676: CALL_OW 488
61680: NOT
61681: IFFALSE 61685
// continue ;
61683: GO 61663
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61685: LD_VAR 0 11
61689: PPUSH
61690: LD_VAR 0 12
61694: PPUSH
61695: CALL_OW 351
61699: PUSH
61700: LD_VAR 0 11
61704: PPUSH
61705: LD_VAR 0 12
61709: PPUSH
61710: CALL_OW 554
61714: AND
61715: IFFALSE 61755
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61717: LD_ADDR_VAR 0 13
61721: PUSH
61722: LD_VAR 0 13
61726: PPUSH
61727: LD_VAR 0 13
61731: PUSH
61732: LD_INT 1
61734: PLUS
61735: PPUSH
61736: LD_VAR 0 11
61740: PUSH
61741: LD_VAR 0 12
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PPUSH
61750: CALL_OW 2
61754: ST_TO_ADDR
// end ;
61755: GO 61663
61757: POP
61758: POP
61759: GO 61643
61761: POP
61762: POP
// if not list then
61763: LD_VAR 0 13
61767: NOT
61768: IFFALSE 61772
// exit ;
61770: GO 61843
// for i in list do
61772: LD_ADDR_VAR 0 6
61776: PUSH
61777: LD_VAR 0 13
61781: PUSH
61782: FOR_IN
61783: IFFALSE 61841
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61785: LD_VAR 0 1
61789: PPUSH
61790: LD_STRING M
61792: PUSH
61793: LD_VAR 0 6
61797: PUSH
61798: LD_INT 1
61800: ARRAY
61801: PUSH
61802: LD_VAR 0 6
61806: PUSH
61807: LD_INT 2
61809: ARRAY
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: PPUSH
61835: CALL_OW 447
61839: GO 61782
61841: POP
61842: POP
// end ;
61843: LD_VAR 0 5
61847: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61848: LD_EXP 75
61852: NOT
61853: IFFALSE 61903
61855: GO 61857
61857: DISABLE
// begin initHack := true ;
61858: LD_ADDR_EXP 75
61862: PUSH
61863: LD_INT 1
61865: ST_TO_ADDR
// hackTanks := [ ] ;
61866: LD_ADDR_EXP 76
61870: PUSH
61871: EMPTY
61872: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61873: LD_ADDR_EXP 77
61877: PUSH
61878: EMPTY
61879: ST_TO_ADDR
// hackLimit := 3 ;
61880: LD_ADDR_EXP 78
61884: PUSH
61885: LD_INT 3
61887: ST_TO_ADDR
// hackDist := 12 ;
61888: LD_ADDR_EXP 79
61892: PUSH
61893: LD_INT 12
61895: ST_TO_ADDR
// hackCounter := [ ] ;
61896: LD_ADDR_EXP 80
61900: PUSH
61901: EMPTY
61902: ST_TO_ADDR
// end ;
61903: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61904: LD_EXP 75
61908: PUSH
61909: LD_INT 34
61911: PUSH
61912: LD_INT 99
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PPUSH
61919: CALL_OW 69
61923: AND
61924: IFFALSE 62177
61926: GO 61928
61928: DISABLE
61929: LD_INT 0
61931: PPUSH
61932: PPUSH
// begin enable ;
61933: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61934: LD_ADDR_VAR 0 1
61938: PUSH
61939: LD_INT 34
61941: PUSH
61942: LD_INT 99
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PPUSH
61949: CALL_OW 69
61953: PUSH
61954: FOR_IN
61955: IFFALSE 62175
// begin if not i in hackTanks then
61957: LD_VAR 0 1
61961: PUSH
61962: LD_EXP 76
61966: IN
61967: NOT
61968: IFFALSE 62051
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61970: LD_ADDR_EXP 76
61974: PUSH
61975: LD_EXP 76
61979: PPUSH
61980: LD_EXP 76
61984: PUSH
61985: LD_INT 1
61987: PLUS
61988: PPUSH
61989: LD_VAR 0 1
61993: PPUSH
61994: CALL_OW 1
61998: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61999: LD_ADDR_EXP 77
62003: PUSH
62004: LD_EXP 77
62008: PPUSH
62009: LD_EXP 77
62013: PUSH
62014: LD_INT 1
62016: PLUS
62017: PPUSH
62018: EMPTY
62019: PPUSH
62020: CALL_OW 1
62024: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62025: LD_ADDR_EXP 80
62029: PUSH
62030: LD_EXP 80
62034: PPUSH
62035: LD_EXP 80
62039: PUSH
62040: LD_INT 1
62042: PLUS
62043: PPUSH
62044: EMPTY
62045: PPUSH
62046: CALL_OW 1
62050: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62051: LD_VAR 0 1
62055: PPUSH
62056: CALL_OW 302
62060: NOT
62061: IFFALSE 62074
// begin HackUnlinkAll ( i ) ;
62063: LD_VAR 0 1
62067: PPUSH
62068: CALL 62180 0 1
// continue ;
62072: GO 61954
// end ; HackCheckCapturedStatus ( i ) ;
62074: LD_VAR 0 1
62078: PPUSH
62079: CALL 62623 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62083: LD_ADDR_VAR 0 2
62087: PUSH
62088: LD_INT 81
62090: PUSH
62091: LD_VAR 0 1
62095: PPUSH
62096: CALL_OW 255
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 33
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 91
62117: PUSH
62118: LD_VAR 0 1
62122: PUSH
62123: LD_EXP 79
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 50
62135: PUSH
62136: EMPTY
62137: LIST
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: PPUSH
62145: CALL_OW 69
62149: ST_TO_ADDR
// if not tmp then
62150: LD_VAR 0 2
62154: NOT
62155: IFFALSE 62159
// continue ;
62157: GO 61954
// HackLink ( i , tmp ) ;
62159: LD_VAR 0 1
62163: PPUSH
62164: LD_VAR 0 2
62168: PPUSH
62169: CALL 62316 0 2
// end ;
62173: GO 61954
62175: POP
62176: POP
// end ;
62177: PPOPN 2
62179: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62180: LD_INT 0
62182: PPUSH
62183: PPUSH
62184: PPUSH
// if not hack in hackTanks then
62185: LD_VAR 0 1
62189: PUSH
62190: LD_EXP 76
62194: IN
62195: NOT
62196: IFFALSE 62200
// exit ;
62198: GO 62311
// index := GetElementIndex ( hackTanks , hack ) ;
62200: LD_ADDR_VAR 0 4
62204: PUSH
62205: LD_EXP 76
62209: PPUSH
62210: LD_VAR 0 1
62214: PPUSH
62215: CALL 6062 0 2
62219: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62220: LD_EXP 77
62224: PUSH
62225: LD_VAR 0 4
62229: ARRAY
62230: IFFALSE 62311
// begin for i in hackTanksCaptured [ index ] do
62232: LD_ADDR_VAR 0 3
62236: PUSH
62237: LD_EXP 77
62241: PUSH
62242: LD_VAR 0 4
62246: ARRAY
62247: PUSH
62248: FOR_IN
62249: IFFALSE 62275
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62251: LD_VAR 0 3
62255: PUSH
62256: LD_INT 1
62258: ARRAY
62259: PPUSH
62260: LD_VAR 0 3
62264: PUSH
62265: LD_INT 2
62267: ARRAY
62268: PPUSH
62269: CALL_OW 235
62273: GO 62248
62275: POP
62276: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62277: LD_ADDR_EXP 77
62281: PUSH
62282: LD_EXP 77
62286: PPUSH
62287: LD_VAR 0 4
62291: PPUSH
62292: EMPTY
62293: PPUSH
62294: CALL_OW 1
62298: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62299: LD_VAR 0 1
62303: PPUSH
62304: LD_INT 0
62306: PPUSH
62307: CALL_OW 505
// end ; end ;
62311: LD_VAR 0 2
62315: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62316: LD_INT 0
62318: PPUSH
62319: PPUSH
62320: PPUSH
// if not hack in hackTanks or not vehicles then
62321: LD_VAR 0 1
62325: PUSH
62326: LD_EXP 76
62330: IN
62331: NOT
62332: PUSH
62333: LD_VAR 0 2
62337: NOT
62338: OR
62339: IFFALSE 62343
// exit ;
62341: GO 62618
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62343: LD_ADDR_VAR 0 2
62347: PUSH
62348: LD_VAR 0 1
62352: PPUSH
62353: LD_VAR 0 2
62357: PPUSH
62358: LD_INT 1
62360: PPUSH
62361: LD_INT 1
62363: PPUSH
62364: CALL 6712 0 4
62368: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62369: LD_ADDR_VAR 0 5
62373: PUSH
62374: LD_EXP 76
62378: PPUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL 6062 0 2
62388: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62389: LD_EXP 77
62393: PUSH
62394: LD_VAR 0 5
62398: ARRAY
62399: PUSH
62400: LD_EXP 78
62404: LESS
62405: IFFALSE 62594
// begin for i := 1 to vehicles do
62407: LD_ADDR_VAR 0 4
62411: PUSH
62412: DOUBLE
62413: LD_INT 1
62415: DEC
62416: ST_TO_ADDR
62417: LD_VAR 0 2
62421: PUSH
62422: FOR_TO
62423: IFFALSE 62592
// begin if hackTanksCaptured [ index ] = hackLimit then
62425: LD_EXP 77
62429: PUSH
62430: LD_VAR 0 5
62434: ARRAY
62435: PUSH
62436: LD_EXP 78
62440: EQUAL
62441: IFFALSE 62445
// break ;
62443: GO 62592
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62445: LD_ADDR_EXP 80
62449: PUSH
62450: LD_EXP 80
62454: PPUSH
62455: LD_VAR 0 5
62459: PPUSH
62460: LD_EXP 80
62464: PUSH
62465: LD_VAR 0 5
62469: ARRAY
62470: PUSH
62471: LD_INT 1
62473: PLUS
62474: PPUSH
62475: CALL_OW 1
62479: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62480: LD_ADDR_EXP 77
62484: PUSH
62485: LD_EXP 77
62489: PPUSH
62490: LD_VAR 0 5
62494: PUSH
62495: LD_EXP 77
62499: PUSH
62500: LD_VAR 0 5
62504: ARRAY
62505: PUSH
62506: LD_INT 1
62508: PLUS
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PPUSH
62514: LD_VAR 0 2
62518: PUSH
62519: LD_VAR 0 4
62523: ARRAY
62524: PUSH
62525: LD_VAR 0 2
62529: PUSH
62530: LD_VAR 0 4
62534: ARRAY
62535: PPUSH
62536: CALL_OW 255
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PPUSH
62545: CALL 6277 0 3
62549: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62550: LD_VAR 0 2
62554: PUSH
62555: LD_VAR 0 4
62559: ARRAY
62560: PPUSH
62561: LD_VAR 0 1
62565: PPUSH
62566: CALL_OW 255
62570: PPUSH
62571: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62575: LD_VAR 0 2
62579: PUSH
62580: LD_VAR 0 4
62584: ARRAY
62585: PPUSH
62586: CALL_OW 141
// end ;
62590: GO 62422
62592: POP
62593: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62594: LD_VAR 0 1
62598: PPUSH
62599: LD_EXP 77
62603: PUSH
62604: LD_VAR 0 5
62608: ARRAY
62609: PUSH
62610: LD_INT 0
62612: PLUS
62613: PPUSH
62614: CALL_OW 505
// end ;
62618: LD_VAR 0 3
62622: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62623: LD_INT 0
62625: PPUSH
62626: PPUSH
62627: PPUSH
62628: PPUSH
// if not hack in hackTanks then
62629: LD_VAR 0 1
62633: PUSH
62634: LD_EXP 76
62638: IN
62639: NOT
62640: IFFALSE 62644
// exit ;
62642: GO 62884
// index := GetElementIndex ( hackTanks , hack ) ;
62644: LD_ADDR_VAR 0 4
62648: PUSH
62649: LD_EXP 76
62653: PPUSH
62654: LD_VAR 0 1
62658: PPUSH
62659: CALL 6062 0 2
62663: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62664: LD_ADDR_VAR 0 3
62668: PUSH
62669: DOUBLE
62670: LD_EXP 77
62674: PUSH
62675: LD_VAR 0 4
62679: ARRAY
62680: INC
62681: ST_TO_ADDR
62682: LD_INT 1
62684: PUSH
62685: FOR_DOWNTO
62686: IFFALSE 62858
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62688: LD_ADDR_VAR 0 5
62692: PUSH
62693: LD_EXP 77
62697: PUSH
62698: LD_VAR 0 4
62702: ARRAY
62703: PUSH
62704: LD_VAR 0 3
62708: ARRAY
62709: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62710: LD_VAR 0 5
62714: PUSH
62715: LD_INT 1
62717: ARRAY
62718: PPUSH
62719: CALL_OW 302
62723: NOT
62724: PUSH
62725: LD_VAR 0 5
62729: PUSH
62730: LD_INT 1
62732: ARRAY
62733: PPUSH
62734: CALL_OW 255
62738: PUSH
62739: LD_VAR 0 1
62743: PPUSH
62744: CALL_OW 255
62748: NONEQUAL
62749: OR
62750: IFFALSE 62856
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62752: LD_VAR 0 5
62756: PUSH
62757: LD_INT 1
62759: ARRAY
62760: PPUSH
62761: CALL_OW 305
62765: PUSH
62766: LD_VAR 0 5
62770: PUSH
62771: LD_INT 1
62773: ARRAY
62774: PPUSH
62775: CALL_OW 255
62779: PUSH
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 255
62789: EQUAL
62790: AND
62791: IFFALSE 62815
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62793: LD_VAR 0 5
62797: PUSH
62798: LD_INT 1
62800: ARRAY
62801: PPUSH
62802: LD_VAR 0 5
62806: PUSH
62807: LD_INT 2
62809: ARRAY
62810: PPUSH
62811: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62815: LD_ADDR_EXP 77
62819: PUSH
62820: LD_EXP 77
62824: PPUSH
62825: LD_VAR 0 4
62829: PPUSH
62830: LD_EXP 77
62834: PUSH
62835: LD_VAR 0 4
62839: ARRAY
62840: PPUSH
62841: LD_VAR 0 3
62845: PPUSH
62846: CALL_OW 3
62850: PPUSH
62851: CALL_OW 1
62855: ST_TO_ADDR
// end ; end ;
62856: GO 62685
62858: POP
62859: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62860: LD_VAR 0 1
62864: PPUSH
62865: LD_EXP 77
62869: PUSH
62870: LD_VAR 0 4
62874: ARRAY
62875: PUSH
62876: LD_INT 0
62878: PLUS
62879: PPUSH
62880: CALL_OW 505
// end ;
62884: LD_VAR 0 2
62888: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62889: LD_INT 0
62891: PPUSH
62892: PPUSH
62893: PPUSH
62894: PPUSH
// if not hack in hackTanks then
62895: LD_VAR 0 1
62899: PUSH
62900: LD_EXP 76
62904: IN
62905: NOT
62906: IFFALSE 62910
// exit ;
62908: GO 62995
// index := GetElementIndex ( hackTanks , hack ) ;
62910: LD_ADDR_VAR 0 5
62914: PUSH
62915: LD_EXP 76
62919: PPUSH
62920: LD_VAR 0 1
62924: PPUSH
62925: CALL 6062 0 2
62929: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62930: LD_ADDR_VAR 0 4
62934: PUSH
62935: DOUBLE
62936: LD_INT 1
62938: DEC
62939: ST_TO_ADDR
62940: LD_EXP 77
62944: PUSH
62945: LD_VAR 0 5
62949: ARRAY
62950: PUSH
62951: FOR_TO
62952: IFFALSE 62993
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62954: LD_EXP 77
62958: PUSH
62959: LD_VAR 0 5
62963: ARRAY
62964: PUSH
62965: LD_VAR 0 4
62969: ARRAY
62970: PUSH
62971: LD_INT 1
62973: ARRAY
62974: PUSH
62975: LD_VAR 0 2
62979: EQUAL
62980: IFFALSE 62991
// KillUnit ( vehicle ) ;
62982: LD_VAR 0 2
62986: PPUSH
62987: CALL_OW 66
62991: GO 62951
62993: POP
62994: POP
// end ;
62995: LD_VAR 0 3
62999: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63000: LD_EXP 81
63004: NOT
63005: IFFALSE 63040
63007: GO 63009
63009: DISABLE
// begin initMiner := true ;
63010: LD_ADDR_EXP 81
63014: PUSH
63015: LD_INT 1
63017: ST_TO_ADDR
// minersList := [ ] ;
63018: LD_ADDR_EXP 82
63022: PUSH
63023: EMPTY
63024: ST_TO_ADDR
// minerMinesList := [ ] ;
63025: LD_ADDR_EXP 83
63029: PUSH
63030: EMPTY
63031: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63032: LD_ADDR_EXP 84
63036: PUSH
63037: LD_INT 5
63039: ST_TO_ADDR
// end ;
63040: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63041: LD_EXP 81
63045: PUSH
63046: LD_INT 34
63048: PUSH
63049: LD_INT 81
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PPUSH
63056: CALL_OW 69
63060: AND
63061: IFFALSE 63522
63063: GO 63065
63065: DISABLE
63066: LD_INT 0
63068: PPUSH
63069: PPUSH
63070: PPUSH
63071: PPUSH
// begin enable ;
63072: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63073: LD_ADDR_VAR 0 1
63077: PUSH
63078: LD_INT 34
63080: PUSH
63081: LD_INT 81
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PPUSH
63088: CALL_OW 69
63092: PUSH
63093: FOR_IN
63094: IFFALSE 63166
// begin if not i in minersList then
63096: LD_VAR 0 1
63100: PUSH
63101: LD_EXP 82
63105: IN
63106: NOT
63107: IFFALSE 63164
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63109: LD_ADDR_EXP 82
63113: PUSH
63114: LD_EXP 82
63118: PPUSH
63119: LD_EXP 82
63123: PUSH
63124: LD_INT 1
63126: PLUS
63127: PPUSH
63128: LD_VAR 0 1
63132: PPUSH
63133: CALL_OW 1
63137: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63138: LD_ADDR_EXP 83
63142: PUSH
63143: LD_EXP 83
63147: PPUSH
63148: LD_EXP 83
63152: PUSH
63153: LD_INT 1
63155: PLUS
63156: PPUSH
63157: EMPTY
63158: PPUSH
63159: CALL_OW 1
63163: ST_TO_ADDR
// end end ;
63164: GO 63093
63166: POP
63167: POP
// for i := minerMinesList downto 1 do
63168: LD_ADDR_VAR 0 1
63172: PUSH
63173: DOUBLE
63174: LD_EXP 83
63178: INC
63179: ST_TO_ADDR
63180: LD_INT 1
63182: PUSH
63183: FOR_DOWNTO
63184: IFFALSE 63520
// begin if IsLive ( minersList [ i ] ) then
63186: LD_EXP 82
63190: PUSH
63191: LD_VAR 0 1
63195: ARRAY
63196: PPUSH
63197: CALL_OW 300
63201: IFFALSE 63229
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63203: LD_EXP 82
63207: PUSH
63208: LD_VAR 0 1
63212: ARRAY
63213: PPUSH
63214: LD_EXP 83
63218: PUSH
63219: LD_VAR 0 1
63223: ARRAY
63224: PPUSH
63225: CALL_OW 505
// if not minerMinesList [ i ] then
63229: LD_EXP 83
63233: PUSH
63234: LD_VAR 0 1
63238: ARRAY
63239: NOT
63240: IFFALSE 63244
// continue ;
63242: GO 63183
// for j := minerMinesList [ i ] downto 1 do
63244: LD_ADDR_VAR 0 2
63248: PUSH
63249: DOUBLE
63250: LD_EXP 83
63254: PUSH
63255: LD_VAR 0 1
63259: ARRAY
63260: INC
63261: ST_TO_ADDR
63262: LD_INT 1
63264: PUSH
63265: FOR_DOWNTO
63266: IFFALSE 63516
// begin side := GetSide ( minersList [ i ] ) ;
63268: LD_ADDR_VAR 0 3
63272: PUSH
63273: LD_EXP 82
63277: PUSH
63278: LD_VAR 0 1
63282: ARRAY
63283: PPUSH
63284: CALL_OW 255
63288: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63289: LD_ADDR_VAR 0 4
63293: PUSH
63294: LD_EXP 83
63298: PUSH
63299: LD_VAR 0 1
63303: ARRAY
63304: PUSH
63305: LD_VAR 0 2
63309: ARRAY
63310: PUSH
63311: LD_INT 1
63313: ARRAY
63314: PPUSH
63315: LD_EXP 83
63319: PUSH
63320: LD_VAR 0 1
63324: ARRAY
63325: PUSH
63326: LD_VAR 0 2
63330: ARRAY
63331: PUSH
63332: LD_INT 2
63334: ARRAY
63335: PPUSH
63336: CALL_OW 428
63340: ST_TO_ADDR
// if not tmp then
63341: LD_VAR 0 4
63345: NOT
63346: IFFALSE 63350
// continue ;
63348: GO 63265
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63350: LD_VAR 0 4
63354: PUSH
63355: LD_INT 81
63357: PUSH
63358: LD_VAR 0 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PPUSH
63367: CALL_OW 69
63371: IN
63372: PUSH
63373: LD_EXP 83
63377: PUSH
63378: LD_VAR 0 1
63382: ARRAY
63383: PUSH
63384: LD_VAR 0 2
63388: ARRAY
63389: PUSH
63390: LD_INT 1
63392: ARRAY
63393: PPUSH
63394: LD_EXP 83
63398: PUSH
63399: LD_VAR 0 1
63403: ARRAY
63404: PUSH
63405: LD_VAR 0 2
63409: ARRAY
63410: PUSH
63411: LD_INT 2
63413: ARRAY
63414: PPUSH
63415: CALL_OW 458
63419: AND
63420: IFFALSE 63514
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63422: LD_EXP 83
63426: PUSH
63427: LD_VAR 0 1
63431: ARRAY
63432: PUSH
63433: LD_VAR 0 2
63437: ARRAY
63438: PUSH
63439: LD_INT 1
63441: ARRAY
63442: PPUSH
63443: LD_EXP 83
63447: PUSH
63448: LD_VAR 0 1
63452: ARRAY
63453: PUSH
63454: LD_VAR 0 2
63458: ARRAY
63459: PUSH
63460: LD_INT 2
63462: ARRAY
63463: PPUSH
63464: LD_VAR 0 3
63468: PPUSH
63469: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63473: LD_ADDR_EXP 83
63477: PUSH
63478: LD_EXP 83
63482: PPUSH
63483: LD_VAR 0 1
63487: PPUSH
63488: LD_EXP 83
63492: PUSH
63493: LD_VAR 0 1
63497: ARRAY
63498: PPUSH
63499: LD_VAR 0 2
63503: PPUSH
63504: CALL_OW 3
63508: PPUSH
63509: CALL_OW 1
63513: ST_TO_ADDR
// end ; end ;
63514: GO 63265
63516: POP
63517: POP
// end ;
63518: GO 63183
63520: POP
63521: POP
// end ;
63522: PPOPN 4
63524: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63525: LD_INT 0
63527: PPUSH
63528: PPUSH
// result := false ;
63529: LD_ADDR_VAR 0 4
63533: PUSH
63534: LD_INT 0
63536: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63537: LD_VAR 0 1
63541: PPUSH
63542: CALL_OW 264
63546: PUSH
63547: LD_INT 81
63549: EQUAL
63550: NOT
63551: IFFALSE 63555
// exit ;
63553: GO 63795
// index := GetElementIndex ( minersList , unit ) ;
63555: LD_ADDR_VAR 0 5
63559: PUSH
63560: LD_EXP 82
63564: PPUSH
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL 6062 0 2
63574: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63575: LD_EXP 83
63579: PUSH
63580: LD_VAR 0 5
63584: ARRAY
63585: PUSH
63586: LD_EXP 84
63590: GREATEREQUAL
63591: IFFALSE 63595
// exit ;
63593: GO 63795
// ComMoveXY ( unit , x , y ) ;
63595: LD_VAR 0 1
63599: PPUSH
63600: LD_VAR 0 2
63604: PPUSH
63605: LD_VAR 0 3
63609: PPUSH
63610: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63614: LD_INT 35
63616: PPUSH
63617: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63621: LD_VAR 0 1
63625: PPUSH
63626: LD_VAR 0 2
63630: PPUSH
63631: LD_VAR 0 3
63635: PPUSH
63636: CALL 37325 0 3
63640: NOT
63641: PUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 314
63651: AND
63652: IFFALSE 63656
// exit ;
63654: GO 63795
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63656: LD_VAR 0 2
63660: PPUSH
63661: LD_VAR 0 3
63665: PPUSH
63666: CALL_OW 428
63670: PUSH
63671: LD_VAR 0 1
63675: EQUAL
63676: PUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: CALL_OW 314
63686: NOT
63687: AND
63688: IFFALSE 63614
// PlaySoundXY ( x , y , PlantMine ) ;
63690: LD_VAR 0 2
63694: PPUSH
63695: LD_VAR 0 3
63699: PPUSH
63700: LD_STRING PlantMine
63702: PPUSH
63703: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63707: LD_VAR 0 2
63711: PPUSH
63712: LD_VAR 0 3
63716: PPUSH
63717: LD_VAR 0 1
63721: PPUSH
63722: CALL_OW 255
63726: PPUSH
63727: LD_INT 0
63729: PPUSH
63730: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63734: LD_ADDR_EXP 83
63738: PUSH
63739: LD_EXP 83
63743: PPUSH
63744: LD_VAR 0 5
63748: PUSH
63749: LD_EXP 83
63753: PUSH
63754: LD_VAR 0 5
63758: ARRAY
63759: PUSH
63760: LD_INT 1
63762: PLUS
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PPUSH
63768: LD_VAR 0 2
63772: PUSH
63773: LD_VAR 0 3
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PPUSH
63782: CALL 6277 0 3
63786: ST_TO_ADDR
// result := true ;
63787: LD_ADDR_VAR 0 4
63791: PUSH
63792: LD_INT 1
63794: ST_TO_ADDR
// end ;
63795: LD_VAR 0 4
63799: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63800: LD_INT 0
63802: PPUSH
63803: PPUSH
63804: PPUSH
// if not unit in minersList then
63805: LD_VAR 0 1
63809: PUSH
63810: LD_EXP 82
63814: IN
63815: NOT
63816: IFFALSE 63820
// exit ;
63818: GO 64212
// index := GetElementIndex ( minersList , unit ) ;
63820: LD_ADDR_VAR 0 6
63824: PUSH
63825: LD_EXP 82
63829: PPUSH
63830: LD_VAR 0 1
63834: PPUSH
63835: CALL 6062 0 2
63839: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63840: LD_ADDR_VAR 0 5
63844: PUSH
63845: DOUBLE
63846: LD_EXP 83
63850: PUSH
63851: LD_VAR 0 6
63855: ARRAY
63856: INC
63857: ST_TO_ADDR
63858: LD_INT 1
63860: PUSH
63861: FOR_DOWNTO
63862: IFFALSE 64023
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63864: LD_EXP 83
63868: PUSH
63869: LD_VAR 0 6
63873: ARRAY
63874: PUSH
63875: LD_VAR 0 5
63879: ARRAY
63880: PUSH
63881: LD_INT 1
63883: ARRAY
63884: PUSH
63885: LD_VAR 0 2
63889: EQUAL
63890: PUSH
63891: LD_EXP 83
63895: PUSH
63896: LD_VAR 0 6
63900: ARRAY
63901: PUSH
63902: LD_VAR 0 5
63906: ARRAY
63907: PUSH
63908: LD_INT 2
63910: ARRAY
63911: PUSH
63912: LD_VAR 0 3
63916: EQUAL
63917: AND
63918: IFFALSE 64021
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63920: LD_EXP 83
63924: PUSH
63925: LD_VAR 0 6
63929: ARRAY
63930: PUSH
63931: LD_VAR 0 5
63935: ARRAY
63936: PUSH
63937: LD_INT 1
63939: ARRAY
63940: PPUSH
63941: LD_EXP 83
63945: PUSH
63946: LD_VAR 0 6
63950: ARRAY
63951: PUSH
63952: LD_VAR 0 5
63956: ARRAY
63957: PUSH
63958: LD_INT 2
63960: ARRAY
63961: PPUSH
63962: LD_VAR 0 1
63966: PPUSH
63967: CALL_OW 255
63971: PPUSH
63972: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63976: LD_ADDR_EXP 83
63980: PUSH
63981: LD_EXP 83
63985: PPUSH
63986: LD_VAR 0 6
63990: PPUSH
63991: LD_EXP 83
63995: PUSH
63996: LD_VAR 0 6
64000: ARRAY
64001: PPUSH
64002: LD_VAR 0 5
64006: PPUSH
64007: CALL_OW 3
64011: PPUSH
64012: CALL_OW 1
64016: ST_TO_ADDR
// exit ;
64017: POP
64018: POP
64019: GO 64212
// end ; end ;
64021: GO 63861
64023: POP
64024: POP
// for i := minerMinesList [ index ] downto 1 do
64025: LD_ADDR_VAR 0 5
64029: PUSH
64030: DOUBLE
64031: LD_EXP 83
64035: PUSH
64036: LD_VAR 0 6
64040: ARRAY
64041: INC
64042: ST_TO_ADDR
64043: LD_INT 1
64045: PUSH
64046: FOR_DOWNTO
64047: IFFALSE 64210
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64049: LD_EXP 83
64053: PUSH
64054: LD_VAR 0 6
64058: ARRAY
64059: PUSH
64060: LD_VAR 0 5
64064: ARRAY
64065: PUSH
64066: LD_INT 1
64068: ARRAY
64069: PPUSH
64070: LD_EXP 83
64074: PUSH
64075: LD_VAR 0 6
64079: ARRAY
64080: PUSH
64081: LD_VAR 0 5
64085: ARRAY
64086: PUSH
64087: LD_INT 2
64089: ARRAY
64090: PPUSH
64091: LD_VAR 0 2
64095: PPUSH
64096: LD_VAR 0 3
64100: PPUSH
64101: CALL_OW 298
64105: PUSH
64106: LD_INT 6
64108: LESS
64109: IFFALSE 64208
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64111: LD_EXP 83
64115: PUSH
64116: LD_VAR 0 6
64120: ARRAY
64121: PUSH
64122: LD_VAR 0 5
64126: ARRAY
64127: PUSH
64128: LD_INT 1
64130: ARRAY
64131: PPUSH
64132: LD_EXP 83
64136: PUSH
64137: LD_VAR 0 6
64141: ARRAY
64142: PUSH
64143: LD_VAR 0 5
64147: ARRAY
64148: PUSH
64149: LD_INT 2
64151: ARRAY
64152: PPUSH
64153: LD_VAR 0 1
64157: PPUSH
64158: CALL_OW 255
64162: PPUSH
64163: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64167: LD_ADDR_EXP 83
64171: PUSH
64172: LD_EXP 83
64176: PPUSH
64177: LD_VAR 0 6
64181: PPUSH
64182: LD_EXP 83
64186: PUSH
64187: LD_VAR 0 6
64191: ARRAY
64192: PPUSH
64193: LD_VAR 0 5
64197: PPUSH
64198: CALL_OW 3
64202: PPUSH
64203: CALL_OW 1
64207: ST_TO_ADDR
// end ; end ;
64208: GO 64046
64210: POP
64211: POP
// end ;
64212: LD_VAR 0 4
64216: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64217: LD_INT 0
64219: PPUSH
64220: PPUSH
64221: PPUSH
64222: PPUSH
64223: PPUSH
64224: PPUSH
64225: PPUSH
64226: PPUSH
64227: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64228: LD_VAR 0 1
64232: PPUSH
64233: CALL_OW 264
64237: PUSH
64238: LD_INT 81
64240: EQUAL
64241: NOT
64242: PUSH
64243: LD_VAR 0 1
64247: PUSH
64248: LD_EXP 82
64252: IN
64253: NOT
64254: OR
64255: IFFALSE 64259
// exit ;
64257: GO 64581
// index := GetElementIndex ( minersList , unit ) ;
64259: LD_ADDR_VAR 0 6
64263: PUSH
64264: LD_EXP 82
64268: PPUSH
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL 6062 0 2
64278: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64279: LD_ADDR_VAR 0 8
64283: PUSH
64284: LD_EXP 84
64288: PUSH
64289: LD_EXP 83
64293: PUSH
64294: LD_VAR 0 6
64298: ARRAY
64299: MINUS
64300: ST_TO_ADDR
// if not minesFreeAmount then
64301: LD_VAR 0 8
64305: NOT
64306: IFFALSE 64310
// exit ;
64308: GO 64581
// tmp := [ ] ;
64310: LD_ADDR_VAR 0 7
64314: PUSH
64315: EMPTY
64316: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64317: LD_ADDR_VAR 0 5
64321: PUSH
64322: DOUBLE
64323: LD_INT 1
64325: DEC
64326: ST_TO_ADDR
64327: LD_VAR 0 8
64331: PUSH
64332: FOR_TO
64333: IFFALSE 64528
// begin _d := rand ( 0 , 5 ) ;
64335: LD_ADDR_VAR 0 11
64339: PUSH
64340: LD_INT 0
64342: PPUSH
64343: LD_INT 5
64345: PPUSH
64346: CALL_OW 12
64350: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64351: LD_ADDR_VAR 0 12
64355: PUSH
64356: LD_INT 2
64358: PPUSH
64359: LD_INT 6
64361: PPUSH
64362: CALL_OW 12
64366: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64367: LD_ADDR_VAR 0 9
64371: PUSH
64372: LD_VAR 0 2
64376: PPUSH
64377: LD_VAR 0 11
64381: PPUSH
64382: LD_VAR 0 12
64386: PPUSH
64387: CALL_OW 272
64391: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64392: LD_ADDR_VAR 0 10
64396: PUSH
64397: LD_VAR 0 3
64401: PPUSH
64402: LD_VAR 0 11
64406: PPUSH
64407: LD_VAR 0 12
64411: PPUSH
64412: CALL_OW 273
64416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64417: LD_VAR 0 9
64421: PPUSH
64422: LD_VAR 0 10
64426: PPUSH
64427: CALL_OW 488
64431: PUSH
64432: LD_VAR 0 9
64436: PUSH
64437: LD_VAR 0 10
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_VAR 0 7
64450: IN
64451: NOT
64452: AND
64453: PUSH
64454: LD_VAR 0 9
64458: PPUSH
64459: LD_VAR 0 10
64463: PPUSH
64464: CALL_OW 458
64468: NOT
64469: AND
64470: IFFALSE 64512
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64472: LD_ADDR_VAR 0 7
64476: PUSH
64477: LD_VAR 0 7
64481: PPUSH
64482: LD_VAR 0 7
64486: PUSH
64487: LD_INT 1
64489: PLUS
64490: PPUSH
64491: LD_VAR 0 9
64495: PUSH
64496: LD_VAR 0 10
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PPUSH
64505: CALL_OW 1
64509: ST_TO_ADDR
64510: GO 64526
// i := i - 1 ;
64512: LD_ADDR_VAR 0 5
64516: PUSH
64517: LD_VAR 0 5
64521: PUSH
64522: LD_INT 1
64524: MINUS
64525: ST_TO_ADDR
// end ;
64526: GO 64332
64528: POP
64529: POP
// for i in tmp do
64530: LD_ADDR_VAR 0 5
64534: PUSH
64535: LD_VAR 0 7
64539: PUSH
64540: FOR_IN
64541: IFFALSE 64579
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64543: LD_VAR 0 1
64547: PPUSH
64548: LD_VAR 0 5
64552: PUSH
64553: LD_INT 1
64555: ARRAY
64556: PPUSH
64557: LD_VAR 0 5
64561: PUSH
64562: LD_INT 2
64564: ARRAY
64565: PPUSH
64566: CALL 63525 0 3
64570: NOT
64571: IFFALSE 64577
// exit ;
64573: POP
64574: POP
64575: GO 64581
64577: GO 64540
64579: POP
64580: POP
// end ;
64581: LD_VAR 0 4
64585: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64586: LD_INT 0
64588: PPUSH
64589: PPUSH
64590: PPUSH
64591: PPUSH
64592: PPUSH
64593: PPUSH
64594: PPUSH
// if not GetClass ( unit ) = class_sniper then
64595: LD_VAR 0 1
64599: PPUSH
64600: CALL_OW 257
64604: PUSH
64605: LD_INT 5
64607: EQUAL
64608: NOT
64609: IFFALSE 64613
// exit ;
64611: GO 65001
// dist := 8 ;
64613: LD_ADDR_VAR 0 5
64617: PUSH
64618: LD_INT 8
64620: ST_TO_ADDR
// viewRange := 12 ;
64621: LD_ADDR_VAR 0 7
64625: PUSH
64626: LD_INT 12
64628: ST_TO_ADDR
// side := GetSide ( unit ) ;
64629: LD_ADDR_VAR 0 6
64633: PUSH
64634: LD_VAR 0 1
64638: PPUSH
64639: CALL_OW 255
64643: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64644: LD_INT 61
64646: PPUSH
64647: LD_VAR 0 6
64651: PPUSH
64652: CALL_OW 321
64656: PUSH
64657: LD_INT 2
64659: EQUAL
64660: IFFALSE 64670
// viewRange := 16 ;
64662: LD_ADDR_VAR 0 7
64666: PUSH
64667: LD_INT 16
64669: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64670: LD_VAR 0 1
64674: PPUSH
64675: LD_VAR 0 2
64679: PPUSH
64680: LD_VAR 0 3
64684: PPUSH
64685: CALL_OW 297
64689: PUSH
64690: LD_VAR 0 5
64694: GREATER
64695: IFFALSE 64774
// begin ComMoveXY ( unit , x , y ) ;
64697: LD_VAR 0 1
64701: PPUSH
64702: LD_VAR 0 2
64706: PPUSH
64707: LD_VAR 0 3
64711: PPUSH
64712: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64716: LD_INT 35
64718: PPUSH
64719: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64723: LD_VAR 0 1
64727: PPUSH
64728: LD_VAR 0 2
64732: PPUSH
64733: LD_VAR 0 3
64737: PPUSH
64738: CALL 37325 0 3
64742: NOT
64743: IFFALSE 64747
// exit ;
64745: GO 65001
// until GetDistUnitXY ( unit , x , y ) < dist ;
64747: LD_VAR 0 1
64751: PPUSH
64752: LD_VAR 0 2
64756: PPUSH
64757: LD_VAR 0 3
64761: PPUSH
64762: CALL_OW 297
64766: PUSH
64767: LD_VAR 0 5
64771: LESS
64772: IFFALSE 64716
// end ; ComTurnXY ( unit , x , y ) ;
64774: LD_VAR 0 1
64778: PPUSH
64779: LD_VAR 0 2
64783: PPUSH
64784: LD_VAR 0 3
64788: PPUSH
64789: CALL_OW 118
// wait ( 5 ) ;
64793: LD_INT 5
64795: PPUSH
64796: CALL_OW 67
// _d := GetDir ( unit ) ;
64800: LD_ADDR_VAR 0 10
64804: PUSH
64805: LD_VAR 0 1
64809: PPUSH
64810: CALL_OW 254
64814: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
64815: LD_ADDR_VAR 0 8
64819: PUSH
64820: LD_VAR 0 1
64824: PPUSH
64825: CALL_OW 250
64829: PPUSH
64830: LD_VAR 0 10
64834: PPUSH
64835: LD_VAR 0 5
64839: PPUSH
64840: CALL_OW 272
64844: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64845: LD_ADDR_VAR 0 9
64849: PUSH
64850: LD_VAR 0 1
64854: PPUSH
64855: CALL_OW 251
64859: PPUSH
64860: LD_VAR 0 10
64864: PPUSH
64865: LD_VAR 0 5
64869: PPUSH
64870: CALL_OW 273
64874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64875: LD_VAR 0 8
64879: PPUSH
64880: LD_VAR 0 9
64884: PPUSH
64885: CALL_OW 488
64889: NOT
64890: IFFALSE 64894
// exit ;
64892: GO 65001
// ComAnimCustom ( unit , 1 ) ;
64894: LD_VAR 0 1
64898: PPUSH
64899: LD_INT 1
64901: PPUSH
64902: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64906: LD_VAR 0 8
64910: PPUSH
64911: LD_VAR 0 9
64915: PPUSH
64916: LD_VAR 0 6
64920: PPUSH
64921: LD_VAR 0 7
64925: PPUSH
64926: CALL_OW 330
// repeat wait ( 1 ) ;
64930: LD_INT 1
64932: PPUSH
64933: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64937: LD_VAR 0 1
64941: PPUSH
64942: CALL_OW 316
64946: PUSH
64947: LD_VAR 0 1
64951: PPUSH
64952: CALL_OW 314
64956: OR
64957: PUSH
64958: LD_VAR 0 1
64962: PPUSH
64963: CALL_OW 302
64967: NOT
64968: OR
64969: PUSH
64970: LD_VAR 0 1
64974: PPUSH
64975: CALL_OW 301
64979: OR
64980: IFFALSE 64930
// RemoveSeeing ( _x , _y , side ) ;
64982: LD_VAR 0 8
64986: PPUSH
64987: LD_VAR 0 9
64991: PPUSH
64992: LD_VAR 0 6
64996: PPUSH
64997: CALL_OW 331
// end ; end_of_file
65001: LD_VAR 0 4
65005: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65006: LD_VAR 0 1
65010: PUSH
65011: LD_INT 200
65013: DOUBLE
65014: GREATEREQUAL
65015: IFFALSE 65023
65017: LD_INT 299
65019: DOUBLE
65020: LESSEQUAL
65021: IFTRUE 65025
65023: GO 65057
65025: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65026: LD_VAR 0 1
65030: PPUSH
65031: LD_VAR 0 2
65035: PPUSH
65036: LD_VAR 0 3
65040: PPUSH
65041: LD_VAR 0 4
65045: PPUSH
65046: LD_VAR 0 5
65050: PPUSH
65051: CALL 61093 0 5
65055: GO 65134
65057: LD_INT 300
65059: DOUBLE
65060: GREATEREQUAL
65061: IFFALSE 65069
65063: LD_INT 399
65065: DOUBLE
65066: LESSEQUAL
65067: IFTRUE 65071
65069: GO 65133
65071: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65072: LD_VAR 0 1
65076: PPUSH
65077: LD_VAR 0 2
65081: PPUSH
65082: LD_VAR 0 3
65086: PPUSH
65087: LD_VAR 0 4
65091: PPUSH
65092: LD_VAR 0 5
65096: PPUSH
65097: LD_VAR 0 6
65101: PPUSH
65102: LD_VAR 0 7
65106: PPUSH
65107: LD_VAR 0 8
65111: PPUSH
65112: LD_VAR 0 9
65116: PPUSH
65117: LD_VAR 0 10
65121: PPUSH
65122: LD_VAR 0 11
65126: PPUSH
65127: CALL 57426 0 11
65131: GO 65134
65133: POP
// end ;
65134: PPOPN 11
65136: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65137: LD_VAR 0 1
65141: PPUSH
65142: LD_VAR 0 2
65146: PPUSH
65147: LD_VAR 0 3
65151: PPUSH
65152: LD_VAR 0 4
65156: PPUSH
65157: LD_VAR 0 5
65161: PPUSH
65162: CALL 60829 0 5
// end ;
65166: PPOPN 5
65168: END
