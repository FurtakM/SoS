// Arabian Forces
Export gensher;

// main module AI
Every 0$01 do
var i, p, sold, eng, mech, sci,
    b, veh, filter, side, pom, vehicles, tmp, en, enemy_xy,
    depot_xy, lab_xy, fac_xy, turret_xy, lab_kind, fac_ext, arm_xy,
    crates_area, tech_list, oil_xy, sib_xy, want_more_oil, want_more_sib,
    sol_pow_list, oil_pow_list, sib_pow_list, turret_weapon, not_turret_weapon, veh_list, cargo_allow, cargo_chassis, cargo_type,
    allow_ct, ct_xy, ct_chassis, xy_back, enemy_list, modernize_cargo_allow, crane_allow, crane_type, crane_engine, crane_chassis, crane_num, modernize_crane_allow,
    bulldozer_allow, bulldozer_chassis, bulldozer_engine, bulldozer_type, tree_area, parking_area,
    second_base_allow, second_base_xy, transport_from_second_base, build_second_base_after,
    lab, base_status, sec_points, scout_near_base, repair_xy, vehicle_def, attack_info;
begin
Enable; // ~~~
// side
   side := 2;
// enemy
   enemy_list := [1, 4];
   enemy_xy := [[114,8], [161,100]];
// filters
   sold := FilterAllUnits([[f_side, side], [f_class, 1]]);
   eng  := FilterAllUnits([[f_side, side], [f_class, 2]]);
   mech := FilterAllUnits([[f_side, side], [f_class, 3]]);
   sci  := FilterAllUnits([[f_side, side], [f_class, 4]]);
   vehicles := FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]);
// coords
   sec_points := [33, 56, 52, 67, 61, 40, 45, 9];
   depot_xy := [8, 10, 1];
   lab_xy   := [12, 5, 3, 12, 18, 1];
   lab_kind := [b_lab_weapon, b_lab_opto, b_lab_siberium, b_lab_biological];
   fac_xy   := [31, 39, 1];
   arm_xy   := [22, 12, 5];
   xy_back  := [15, 10];
// turrets
   turret_xy := [b_bunker, 19,  27, 5,
                 b_bunker, 42, 26, 5];
   not_turret_weapon := [ar_crane, ar_cargo_bay, ar_control_tower, ar_multimissile_ballista, ar_double_machine_gun, ar_light_gun];
// factory extension
   fac_ext  := [b_ext_stitch, b_ext_track, b_ext_gun, b_ext_rocket, b_ext_radar];
// powers
   sol_pow_list := [16, 25, 0];
   oil_pow_list := [17, 3, 2, 20, 3, 2];
   sib_pow_list := [];
// control tower (US AR)
   allow_ct := true;
   ct_xy := [29, 40, 4];
   ct_chassis := ar_half_tracked;
// second base
   second_base_allow := false;
   second_base_xy := [0, 0, 0];
   transport_from_second_base := [false, 30]; // [mode(on,off), minimum source each type in second depot allow]
   build_second_base_after := [11$00, tech_SibDet];  // [time in tick, tech]
// deposits
   oil_xy   := [5, 4];
   sib_xy   := [46, 64];
   want_more_oil := false;
   want_more_sib := false;
// techs
   tech_list := [35, 45, 46, 47, 1, 48, 49, 50, 51, 52, 53, 69, 39, 60, 61, 6, 18, 62];
// crates area
   crates_area := gensher_crates;
// vehicle list
   veh_list := FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]);
   repair_xy := [32, 27];
   vehicle_def := [3, ['after_CARGO', control_remote], [ar_half_tracked, engine_combustion, control_remote], [ar_gatling_gun, ar_gun]];
   parking_area := gensher_parking;
// cargo bay
   cargo_allow := true;
   cargo_chassis := ar_half_tracked;
   cargo_type := [ar_cargo_bay];
   modernize_cargo_allow := true;
// crane
   crane_allow := true;
   crane_chassis := ar_half_tracked;
   crane_engine := engine_solar;
   crane_type := [ar_crane];
   crane_num := 1;
   modernize_crane_allow := false;
// bulldozer
   bulldozer_allow := false;
   bulldozer_chassis := ar_half_tracked;
   bulldozer_engine := engine_combustion;
   bulldozer_type := 0;
   tree_area := gensher_tree;
// attack
   attack_info := [3, 8$00, 1, 4, ['electro']]; // min value, mod attack, increment, max_value, orders]



// scout near base xy
   scout_near_base := [sold[2], [28, 44, 55, 50, 69, 51, xy_back[1], xy_back[2]],
                       sold[3], [71, 10, 75, 40, xy_back[1], xy_back[2]]];

// base_status
   if EnemyInRange(side, sec_points) then
      base_status := true
       else
        base_status := false;

   if base_status then
      begin
      VehicleMove(side, parking_area, 83, 'defend', []);
      if eng then
         RepairBase(side, enemy_list, xy_back[1], xy_back[2]);
      if sci then
         HealPersonel(side, 99);
      if sold and not NeedBuilding(side, b_barracks) then
              for i = 1 to sold do
                  if not IsInUnit(sold[i]) and not HasTask(sold[i]) and GetTag(sold[i]) = 0 and FilterAllUnits([[[f_side, side], [f_btype, b_bunker], [f_empty]]]) = 0 then
                     ComEnterUnit(sold[i], GetBuilding(side, b_barracks)[1]);
      
      end;

// scout near base
   if tick = 105 then
      begin
      ScoutArea(scout_near_base[1], scout_near_base[2]);
      ScoutArea(scout_near_base[3], scout_near_base[4]);
      end;

// scan vehicle
   ScanVehicleStatus(side, repair_xy[1], repair_xy[2]);

// attack
   if Tag_List(vehicles, 84) >= NumAtt(attack_info[1], attack_info[2], attack_info[3], attack_info[4]) then
      begin
      en := SelectEnemy(side, enemy_list);
      tmp := Tag_List(vehicles, 84);

      for i = 1 to tmp do
          Attack(tmp[i], enemy_list[en], enemy_xy[en], attack_info[5]);
      end;

// base building
   if eng and base_status = false then  // engs > 0
      begin
      VehicleMove(side, parking_area, 83, 'back', []);

      if FilterAllUnits([[f_side, side], [f_type, unit_human], [f_not, [f_lives, 1000]]]) then
         HealPersonel(side, 99);
      if FilterAllUnits([[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]) then
         RepairBase(side, enemy_list, xy_back[1], xy_back[2])
      else
      if NeedBase(side) then
         ComBuildDepot(eng, depot_xy[1], depot_xy[2], depot_xy[3])
          else
           begin
        // finish all unfinished builds
           FinishAllBuilds(side);

        // build second base
           if second_base_allow and tick >= build_second_base_after[1] and GetTech(build_second_base_after[2], side) = state_researched and HexInfo(second_base_xy[1], second_base_xy[2]) = 0 then
              ComBuildDepot(eng, second_base_xy[1], second_base_xy[2], second_base_xy[3]);
           if second_base_allow and GetBType(HexInfo(second_base_xy[1], second_base_xy[2])) = b_depot and transport_from_second_base[1] then
              begin
              for i = 1 to 3 do
                  if GetBaseSource(HexInfo(second_base_xy[1], second_base_xy[2]))[i] > transport_from_second_base[2] then
                     begin
                     Transport(eng[1], HexInfo(second_base_xy[1], second_base_xy[2]), HexInfo(depot_xy[1], depot_xy[2]), i);
                     break;
                     end;
              end;

           if NeedBuilding(side, GetBuilding(side, b_depot)) then
              ComBuildWarehouse(eng, GetBuilding(side, b_depot)[1]);

        // lab
           ComBuildLabList(eng, [[lab_xy[1], lab_xy[2], lab_xy[3], lab_kind[1], lab_kind[2]],
                                 [lab_xy[4], lab_xy[5], lab_xy[6], lab_kind[3], lab_kind[4]]]);

           if GetBuilding(side, b_lab_full) and sci then
              begin
              for p = 1 to GetLabs(side) do
                  if BuildingStatus(GetLabs(side)[p]) = bs_working or BuildingStatus(GetLabs(side)[p]) = bs_need_people then
                     begin
                     lab := GetLabs(side)[p];
                     break;
                     end;

              if not lab then
                 lab := GetLabs(side)[1];

              if Tag_List(sold^eng^mech^sci, 99) = 0 then
                 for i = 1 to sci do
                     if not IsInUnit(sci[i]) = lab and not HasTask(sci[i]) and GetTag(sci[i]) = 0 and BuildingStatus(lab) <> bs_build then
                        if IsInUnit(sci[i]) then
                           ComExitBuilding(sci[i])
                            else
                             ComEnterUnit(sci[i], lab);

              if not BuildingStatus(lab) = bs_build then
                 ResearchTechList(side, tech_list);
              end;

        // factory
           BuildFactory(eng, fac_xy[1], fac_xy[2], fac_xy[3], fac_ext);

           if mech and GetBuilding(side, b_factory) then
              begin
              // mechanic enter
              for i = 1 to mech do
                  if not IsInUnit(mech[i]) and not HasTask(mech[i]) and GetTag(mech[i]) = 0 and FilterAllUnits([[[f_side, side], [f_type, unit_vehicle], [f_not, [f_lives, 450]], [f_distxy, repair_xy[1], repair_xy[2], 10]]]) = 0 then
                     ComEnterUnit(mech[i], GetBuilding(side, b_factory)[1]);

              // turret list
                 CheckTowersStatus(eng, turret_xy);
                 turret_weapon := AvailableWeaponList(GetBuilding(side, b_factory)[1]) diff not_turret_weapon;

                 if (GetBuilding(side, b_bunker) > 0 or GetBuilding(side, b_turret) > 0) and turret_weapon > 1 then
                     CheckWeaponOnTowers(side, turret_weapon);

              // produce vehicle
                 // cargo bay
                 if GetVehicle(side, cargo_chassis, cargo_type[1]) = 0 and (GetBuilding(side, b_ext_noncombat) or GetBuilding(side, b_ext_stitch)) and cargo_allow then
                    IntConstruct(side, cargo_chassis, engine_combustion, control_manual, cargo_type);
                 // modernize cargo bay
                 if FilterAllUnits([[[f_side, side], [f_control, control_manual], [f_weapon, cargo_type[1]]]]) = 1 and modernize_cargo_allow and ((GetBuilding(side, b_ext_radar) and (GetBuilding(side, b_control_tower) or FilterAllUnits([[f_side, side], [f_weapon, ar_control_tower]]))) or GetBuilding(side, b_ext_computer)) then
                    begin
                    SetTag(GetVehicle(side, cargo_chassis, cargo_type[1])[1], 51);
                    ComRecycle(GetVehicle(side, cargo_chassis, cargo_type[1])[1], GetBuilding(side, b_factory)[1]);
                    end;
                 // crane
                 if GetVehicle(side, crane_chassis, crane_type[1]) < crane_num and (GetBuilding(side, b_ext_noncombat) or GetBuilding(side, b_ext_stitch)) and crane_allow then
                    IntConstruct(side, crane_chassis, crane_engine, control_manual, crane_type);
                 // modernize crane
                 if FilterAllUnits([[[f_side, side], [f_control, control_manual], [f_weapon, crane_type[1]]]]) and modernize_crane_allow and ((GetBuilding(side, b_ext_radar) and (GetBuilding(side, b_control_tower) or FilterAllUnits([[f_side, side], [f_weapon, ar_control_tower]]))) or GetBuilding(side, b_ext_computer)) then
                    begin
                    SetTag(GetVehicle(side, crane_chassis, crane_type[1])[1], 51);
                    ComRecycle(GetVehicle(side, crane_chassis, crane_type[1])[1], GetBuilding(side, b_factory)[1]);
                    end;
                 // bulldozer
                 if GetVehicle(side, bulldozer_chassis, bulldozer_type[1]) = 0 and bulldozer_allow and ListEnvironmentArea(tree_area) > 0 then
                    IntConstruct(side, bulldozer_chassis, bulldozer_engine, control_manual, bulldozer_type)
                     else
                      if GetVehicle(side, bulldozer_chassis, bulldozer_type[1]) then
                         begin
                         if ListEnvironmentArea(tree_area) then
                            CutTreeInArea(GetVehicle(side, bulldozer_chassis, bulldozer_type[1])[1], tree_area)
                             else
                              ComRecycle(GetVehicle(side, bulldozer_chassis, bulldozer_type[1])[1], GetBuilding(side, b_factory)[1]);
                         end;
                 // tanks
                 if (vehicles diff FilterNonCombatVehicle(side)) < NumAtt(attack_info[1], attack_info[2], attack_info[3], attack_info[4]) then
                    begin
                    Case vehicle_def[2][1] of
                    '-': IntConstruct(side, vehicle_def[3][1], vehicle_def[3][2], vehicle_def[3][3], vehicle_def[4]);
                    'after_CARGO': if FilterAllUnits([[f_side, side], [f_weapon, cargo_type[1]], [f_control, vehicle_def[2][2]]]) then
                                      IntConstruct(side, vehicle_def[3][1], vehicle_def[3][2], vehicle_def[3][3], vehicle_def[4]);
                    'after_CRANE': if FilterAllUnits([[f_side, side], [f_weapon, crane_type[1]], [f_control, vehicle_def[2][2]]]) then
                                      IntConstruct(side, vehicle_def[3][1], vehicle_def[3][2], vehicle_def[3][3], vehicle_def[4]);
                    'after_BULL' : if FilterAllUnits([[f_side, side], [f_weapon, bulldozer_type[1]], [f_control, vehicle_def[2][2]]]) then
                                      IntConstruct(side, vehicle_def[3][1], vehicle_def[3][2], vehicle_def[3][3], vehicle_def[4]);
                    'after_TICK' : if vehicle_def[2][2] > tick then
                                      IntConstruct(side, vehicle_def[3][1], vehicle_def[3][2], vehicle_def[3][3], vehicle_def[4]);
                    'after_TECH' : if GetTech(vehicle_def[2][2], side) = state_researched then
                                      IntConstruct(side, vehicle_def[3][1], vehicle_def[3][2], vehicle_def[3][3], vehicle_def[4]);
                    End;
                    end;

              // control_tower
                 ControlTower(side, GetNation(mech[1]), ct_xy[1], ct_xy[2], ct_xy[3], ct_chassis);

              // additional mechanic's
                 if GetVehicle(side, crane_chassis, crane_type[1]) then
                    AddMechanic(eng, 1);
              end;

        // vehicles filter
           if vehicles then
              begin
              tmp := vehicles diff FilterNonCombatVehicle(side);
              if Tag_List(tmp, 0) then
                 for i = 1 to tmp  do
                     if GetTag(tmp[i]) = 0 then
                        begin
                        if Tag_List(vehicles, 83) < vehicle_def[1] then
                           SetTag(tmp[i], 83)
                            else
                             SetTag(tmp[i], 82);
                        end;
              // launch attack
              if tick mod attack_info[3] = 0 then
                 begin
                 for i = 1 to tmp do
                     if GetTag(tmp[i]) = 83 or GetTag(tmp[i]) = 82 then
                        SetTag(tmp[i], 84);
                 end;

              end;

        // armoury
           if NeedBuilding(side, b_barracks) and GetBaseSource(MyBase(side)[1])[1] > 30 and GetBuilding(side, b_lab_full) then
              if NeedBuilding(side, b_armoury) then
                 Build(eng, b_armoury, arm_xy[1], arm_xy[2], arm_xy[3])
                  else
                   if GetBaseSource(MyBase(side)[1])[1] > 30 then
                      ComUpgrade(GetBuilding(side, b_armoury)[1]);

           if sold and not NeedBuilding(side, b_barracks) then
              for i = 1 to sold do
                  if not IsInUnit(sold[i]) and not HasTask(sold[i]) and GetTag(sold[i]) = 0 and FilterAllUnits([[[f_side, side], [f_btype, b_bunker], [f_empty]]]) = 0 then
                     ComEnterUnit(sold[i], GetBuilding(side, b_barracks)[1]);

        // towers squad
           GoToTower(Tag_List(sold, 0));

        // oil deposits
           if NeedBuilding(side, b_oil_mine) then
              begin
              if GetResourceVisibility(oil_xy[1], oil_xy[2], side) = false then
                 ComFindDeposit(sci[sci], oil_xy[1], oil_xy[2])
                  else
                   begin
                   if GetTag(sci[sci]) = 42 then SetTag(sci[sci], 0);
                      Build(eng, b_oil_mine, oil_xy[1], oil_xy[2], Rand(0,5));
                   end
              end
               else
        // extra oil
                if want_more_oil and GetBuilding(side, b_oil_mine) < 2 then
                   if GetResourceVisibility(oil_xy[3], oil_xy[4], side) = false then
                      ComFindDeposit(sci[sci], oil_xy[3], oil_xy[4])
                       else
                        begin
                        if GetTag(sci[sci]) = 42 then SetTag(sci[sci], 0);
                           Build(eng, b_oil_mine, oil_xy[3], oil_xy[4], Rand(0,5));
                        end;
        // sib mine
           if NeedBuilding(side, b_siberite_mine) and GetTech(tech_SibDet, side) = state_researched then
              begin
              if GetResourceVisibility(sib_xy[1], sib_xy[2], side) = false then
                 ComFindDeposit(sci[sci], sib_xy[1], sib_xy[2])
                  else
                   if GetResourceVisibility(sib_xy[1], sib_xy[2], side) then
                      begin
                      if GetTag(sci[sci]) = 42 then SetTag(sci[sci], 0);
                         Build(eng, b_siberite_mine, sib_xy[1], sib_xy[2], Rand(0,5));
                      end;
              end
               else
        // extra sib
                if want_more_sib and GetBuilding(side, b_siberite_mine) < 2 and GetTech(tech_SibDet, side) = state_researched then
                   if GetResourceVisibility(sib_xy[3], sib_xy[4], side) = false then
                      ComFindDeposit(sci[sci], sib_xy[3], sib_xy[4])
                       else
                        begin
                        if GetTag(sci[sci]) = 42 then SetTag(sci[sci], 0);
                        if GetResourceVisibility(sib_xy[3], sib_xy[4], side) then
                           Build(eng, b_siberite_mine, sib_xy[3], sib_xy[4], Rand(0,5));
                       end;

        // solar powers
           if GetTech(tech_solpow, side) = state_researched and sol_pow_list and
              GetBuilding(side, b_solar_power) < (sol_pow_list/3) then
              BuildPowerFromList(eng, sol_pow_list, b_solar_power);

        // oil powers
           if GetTech(tech_oilpow, side) = state_researched and oil_pow_list and
              GetBuilding(side, b_oil_power) < (oil_pow_list/3) then
              BuildPowerFromList(eng, oil_pow_list, b_oil_power);

        // sib powers
           if GetTech(tech_sibpow, side) = state_researched and sib_pow_list and
              GetBuilding(side, b_siberite_power) < (sib_pow_list/3) then
              BuildPowerFromList(eng, sib_pow_list, b_siberite_power);

        // collect crates  //
           if GetListOfCratesInArea(crates_area) then
              CollectCrates(side, crates_area);
           end;
      end;

End;


