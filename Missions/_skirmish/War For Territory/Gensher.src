Export Gensher, gensher_side, gensherAttackGroup;
Export Function PrepareGensher;
var i, tmp, un;
begin
gensher_side := 2;

uc_side := gensher_side;
uc_nation := 2;

tmp := PrepareBase(ar_depot, gensher_base, '', [8, 7, 6][Difficulty], [11500, 1100, 60], [6, 6, 6, 6]);
mc_bases := Replace(mc_bases, 2, tmp);

// hill
tmp := FilterAllUnits([[f_side, 2], [f_btype, b_breastwork]]);

for i in tmp do
    begin
    PrepareHuman(false, 1, [4, 3, 3][Difficulty]);
    un := CreateHuman;
    SetDir(un, 1);
    PlaceHumanInUnit(un, i);
    end;

// mines
tmp := AreaToList(gensher_mines, 0);

for i = 1 to tmp[1] do
    begin
    PlaceMine(tmp[1][i], tmp[2][i], 2, 0);
    staticMines := Insert(staticMines, staticMines + 1, [tmp[1][i], tmp[2][i]]);
    end;

if Difficulty > 1 then
   begin
   tmp := AreaToList(gensher_mines2, 0);

   for i = 1 to tmp[1] do
       begin
       PlaceMine(tmp[1][i], tmp[2][i], 2, 0);
       staticMines := Insert(staticMines, staticMines + 1, [tmp[1][i], tmp[2][i]]);
       end;
   end;

gensherAttackGroup := [];
End;


Export Function InitMC_Gensher();
begin
MC_SetScanArea(2, gensher_base);
MC_SetParkingArea(2, gensher_parking);

MC_SetDepositsXY(2, [
   [ 56, 23, 0],
   [ 52, 40, 1]
]);

MC_SetAllowedTurretWeapons(2, [ar_gun, ar_rocket_launcher]);
MC_SetCratesArea(2, gensher_crates);
MC_SetTame(2, gensher_ape);
MC_SetDefenderLimit(2, 4);

MC_SetProduceList(2, [
   [ar_medium_trike, engine_solar, control_manual, ar_control_tower],
   [ar_medium_trike, engine_solar, control_manual, ar_control_tower],
   [ar_half_tracked, engine_combustion, control_remote, ar_gun],
   [ar_half_tracked, engine_combustion, control_remote, ar_gun],
   [ar_half_tracked, engine_combustion, control_remote, ar_rocket_launcher],
   [ar_half_tracked, engine_combustion, control_remote, ar_flame_thrower]
]);

MC_SetBuildingList(2, [
   [b_armoury, 42, 29, 5],
   [b_armoury, 36, 40, 5],
   [b_lab, 13, 18, 1],
   [b_solar_power, 17, 3, 0],
   [b_oil_mine, 56, 23, 0],
   [b_workshop, 11, 7, 2],
   [b_solar_power, 20, 3, 0],
   [b_solar_power, 23, 3, 0],
   [b_solar_power, 26, 3, 0],
   [b_lab, 17, 27, 1],
   [b_bunker, 27, 44, 5],
   [b_bunker, 41, 41, 5],
   [b_bunker, 45, 24, 5],
   [b_bunker, 48, 19, 5],
   [b_bunker, 41,  3, 4],
   [b_armoury, 44, 9, 4],
   [b_siberite_mine, 52, 40, 3]
]);

MC_SetLabKind(2, [b_lab_weapon, b_lab_opto, b_lab_biological, b_lab_siberium]);
MC_SetFactoryExtension(2, 11, 7, 2, [b_ext_stitch, b_ext_track, b_ext_gun, b_ext_rocket, b_ext_radio]);
MC_SetUpgradeBuilding(2, b_depot);
End;

// Trigger explosion of static mines
Every 2 trigger staticMines and FilterUnitsInArea(gensher_mines, [f_enemy, 2]) do
var i, j, tmp, x, y;
begin
enable;

tmp := FilterUnitsInArea(gensher_mines, [f_enemy, 2]);

if not tmp then
   exit;

for i in tmp do
    begin
    x := GetX(i);
    y := GetY(i);

    if MineAtPos(x, y) then
       begin
       LaunchMineAtPos(x, y, 2);

       for j = 1 to staticMines do
           if staticMines[j][1] = x and staticMines[j][2] = y then
              begin
              staticMines := Delete(staticMines, j);
              break;
              end;
       end;
    end;
End;

Every 8$00 + 2$00 trigger IsOk(ar_depot) and not arDestroyed do
var i, base, tmp, attackers, amount;
begin
enable;

base := 2;
tmp := [
         [ar_half_tracked, engine_combustion, control_remote, ar_gun],
         [ar_half_tracked, engine_combustion, control_remote, ar_gun],
         [ar_half_tracked, engine_combustion, control_remote, ar_mortar],
         [ar_half_tracked, engine_combustion, control_remote, ar_flame_thrower]
       ];

amount := amount + tick div 10$00;

if amount > 8 then
   amount := 8;

for i = 1 to amount do
    tmp := Insert(tmp, tmp + 1, [[ar_half_tracked, ar_medium_trike][rand(1,2)], engine_combustion, control_remote, [ar_rocket_launcher, ar_gatling_gun, ar_gun][rand(1,3)]]);

MC_InsertProduceList(base, tmp);

repeat
 wait(0$1);
until MC_GetVehicles(base, true) >= amount;

wait(0$30);

attackers := mc_vehicles[base] diff UnitFilter(mc_vehicles[base], [f_or, [f_weapon, ar_control_tower], [f_weapon, ar_cargo_bay], [f_weapon, ar_crane]]);

if not attackers then
   exit;

mc_vehicles := Replace(mc_vehicles, base, mc_vehicles[base] diff attackers);

ComAgressiveMove(attackers, 107, 74);

wait(0$5);

repeat
 wait(0$1);
until not UnitFilter(attackers, [f_hastask]);

if rand(0, 1) then
   ComAgressiveMove(attackers, 155, 108)
else
   ComAgressiveMove(attackers, 149, 55);

wait(0$10);

repeat
 wait(0$1);

 for i in attackers do
     if not HasTask(i) then
        ComAttackUnit(i, NearestUnitToUnit(FilterAllUnits([f_enemy, 2]), i));

until not UnitFilter(attackers, [f_ok]);
End;

Every 8$00 + 9$00 trigger not arDestroyed and tick < 91$00 do
var i, un, tmp;
begin
enable;

tmp := [];

if tick < 35$00 then
   begin
   for i := 1 to [4, 5, 5][Difficulty] do
       begin
       uc_side := 2;
       uc_nation := 2;

       InitHC_All();

       PrepareHuman(false, 1, [5, 6, 7][Difficulty]);
       un := CreateHuman;
       PlaceUnitArea(un, gensher_spawn, false);

       SetClass(un, [class_soldier, class_mortar][rand(1, 2)]);

       ComAgressiveMove(un, 111, 34);
       wait(0$2);

       tmp := Replace(tmp, tmp + 1, un);
       end;
    end
else
    begin
    for i := 1 to [4, 5, 5][Difficulty] do
       begin
       uc_side := 2;
       uc_nation := 0;

       InitHC_All();

       hc_class := class_apeman_kamikaze;
       un := CreateHuman;
       PlaceUnitArea(un, gensher_spawn, false);

       ComAgressiveMove(un, 110, 33);
       wait(0$2);

       tmp := Replace(tmp, tmp + 1, un);
       end;
    end;

for i := 1 to [3, 4, 5][Difficulty] do
    begin
    uc_side := 2;
    uc_nation := 2;

    PrepareVehicle(ar_half_tracked, engine_siberite, control_apeman, [ar_selfpropelled_bomb, ar_rocket_launcher, ar_gun][rand(1, 3)], 90);
    un := CreateVehicle;
    SetDir(un, 2);
    PlaceUnitArea(un, gensher_spawn, false);

    ComMoveXY(un, 66, 23);

    wait(0$3);

    AddComAgressiveMove(un, 147, 103);

    tmp := Replace(tmp, tmp + 1, un);
    end;

if not tmp then
   exit;

wait(0$5);

repeat
 wait(0$2);

 for i in tmp do
     begin
     if not IsOk(i) then
        tmp := tmp diff i;

     ComAttackUnit(i, NearestUnitToUnit(FilterAllUnits([f_enemy, 2]), i));
     end;
until not tmp;

End;

Every 9$00 trigger Difficulty > 1 do
var un;
begin
uc_side := 2;
uc_nation := 2;

PrepareHuman(false, 4, 6);
un := CreateHuman;
PlaceUnitXYD(un, 88, 1, 2, false);

ComMoveXY(un, 130, 35);
AddComContaminate(un, 132, 39);
End;