// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 170 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// begin FogOff ( 1 ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 344
// end ; PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , gensher_ape , 0 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 3
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: LD_INT 7
  44: PPUSH
  45: LD_INT 0
  47: PPUSH
  48: CALL 37065 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , powell_ape , 0 ) ;
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 3
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 0
  69: PPUSH
  70: LD_INT 0
  72: PPUSH
  73: LD_INT 4
  75: PPUSH
  76: LD_INT 0
  78: PPUSH
  79: CALL 37065 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , popov_ape , 0 ) ;
  83: LD_INT 0
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: LD_INT 3
  91: PPUSH
  92: LD_INT 0
  94: PPUSH
  95: LD_INT 0
  97: PPUSH
  98: LD_INT 0
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: LD_INT 11
 106: PPUSH
 107: LD_INT 0
 109: PPUSH
 110: CALL 37065 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , sikorski_ape , 0 ) ;
 114: LD_INT 0
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 3
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: LD_INT 0
 131: PPUSH
 132: LD_INT 0
 134: PPUSH
 135: LD_INT 14
 137: PPUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL 37065 0 9
// PrepareGensher ;
 145: CALL 1321 0 0
// PreparePopov ;
 149: CALL 2571 0 0
// PreparePowell ;
 153: CALL 384 0 0
// PrepareSikorski ;
 157: CALL 3695 0 0
// MC_Start ( ) ;
 161: CALL 42923 0 0
// Action ;
 165: CALL 4102 0 0
// end ;
 169: END
// export debug , game , staticMines ; function InitVariables ; begin
 170: LD_INT 0
 172: PPUSH
// debug := 1 ;
 173: LD_ADDR_EXP 1
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// game := true ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_INT 1
 188: ST_TO_ADDR
// staticMines := [ ] ;
 189: LD_ADDR_EXP 3
 193: PUSH
 194: EMPTY
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// export function CustomInitMacro ; begin
 201: LD_INT 0
 203: PPUSH
// InitMC_Gensher ( ) ;
 204: CALL 1709 0 0
// InitMC_Powell ( ) ;
 208: CALL 599 0 0
// InitMC_Popov ( ) ;
 212: CALL 2897 0 0
// end ;
 216: LD_VAR 0 1
 220: RET
// every 0 0$10 do var cr , time , i ;
 221: GO 223
 223: DISABLE
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
 228: PPUSH
// begin time := 0 0$30 ;
 229: LD_ADDR_VAR 0 2
 233: PUSH
 234: LD_INT 1050
 236: ST_TO_ADDR
// repeat wait ( time ) ;
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
 246: LD_ADDR_VAR 0 1
 250: PUSH
 251: LD_INT 1
 253: PPUSH
 254: LD_INT 5
 256: PPUSH
 257: CALL_OW 12
 261: ST_TO_ADDR
// for i in [ powell_crates , gensher_crates , popov_crates , sikorski_crates ] do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: LD_INT 5
 269: PUSH
 270: LD_INT 8
 272: PUSH
 273: LD_INT 12
 275: PUSH
 276: LD_INT 13
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: PUSH
 285: FOR_IN
 286: IFFALSE 340
// begin if GetResourceArea ( i , mat_cans ) < 20 then
 288: LD_VAR 0 3
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: CALL_OW 287
 300: PUSH
 301: LD_INT 20
 303: LESS
 304: IFFALSE 323
// CreateCratesArea ( cr , i , true ) ;
 306: LD_VAR 0 1
 310: PPUSH
 311: LD_VAR 0 3
 315: PPUSH
 316: LD_INT 1
 318: PPUSH
 319: CALL_OW 55
// wait ( rand ( 0 0$5 , 0 0$20 ) ) ;
 323: LD_INT 175
 325: PPUSH
 326: LD_INT 700
 328: PPUSH
 329: CALL_OW 12
 333: PPUSH
 334: CALL_OW 67
// end ;
 338: GO 285
 340: POP
 341: POP
// time := time + 0 0$2 ;
 342: LD_ADDR_VAR 0 2
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: LD_INT 70
 354: PLUS
 355: ST_TO_ADDR
// if time > 1 1$00 then
 356: LD_VAR 0 2
 360: PUSH
 361: LD_INT 2100
 363: GREATER
 364: IFFALSE 374
// time := 0 0$25 ;
 366: LD_ADDR_VAR 0 2
 370: PUSH
 371: LD_INT 875
 373: ST_TO_ADDR
// until not game ;
 374: LD_EXP 2
 378: NOT
 379: IFFALSE 237
// end ; end_of_file
 381: PPOPN 3
 383: END
// export Powell , powell_side ; export function PreparePowell ; var i , tmp ; begin
 384: LD_INT 0
 386: PPUSH
 387: PPUSH
 388: PPUSH
// powell_side := 4 ;
 389: LD_ADDR_EXP 5
 393: PUSH
 394: LD_INT 4
 396: ST_TO_ADDR
// uc_side := powell_side ;
 397: LD_ADDR_OWVAR 20
 401: PUSH
 402: LD_EXP 5
 406: ST_TO_ADDR
// uc_nation := 1 ;
 407: LD_ADDR_OWVAR 21
 411: PUSH
 412: LD_INT 1
 414: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 415: LD_ADDR_EXP 4
 419: PUSH
 420: LD_STRING Powell
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// SetSkill ( Powell , 1 , 7 ) ;
 428: LD_EXP 4
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 7
 438: PPUSH
 439: CALL_OW 237
// SetSkill ( Powell , 2 , 5 ) ;
 443: LD_EXP 4
 447: PPUSH
 448: LD_INT 2
 450: PPUSH
 451: LD_INT 5
 453: PPUSH
 454: CALL_OW 237
// SetSkill ( Powell , 3 , 6 ) ;
 458: LD_EXP 4
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: LD_INT 6
 468: PPUSH
 469: CALL_OW 237
// SetSkill ( Powell , 4 , 4 ) ;
 473: LD_EXP 4
 477: PPUSH
 478: LD_INT 4
 480: PPUSH
 481: LD_INT 4
 483: PPUSH
 484: CALL_OW 237
// PlaceHumanInUnit ( Powell , us_depot ) ;
 488: LD_EXP 4
 492: PPUSH
 493: LD_INT 4
 495: PPUSH
 496: CALL_OW 52
// tmp := PrepareBase ( us_depot , powell_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1000 , 100 , 0 ] , [ 4 , 4 , 4 , 4 ] ) ;
 500: LD_ADDR_VAR 0 3
 504: PUSH
 505: LD_INT 4
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_STRING 
 513: PPUSH
 514: LD_INT 8
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: LD_INT 6
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: LD_OWVAR 67
 532: ARRAY
 533: PPUSH
 534: LD_INT 1000
 536: PUSH
 537: LD_INT 100
 539: PUSH
 540: LD_INT 0
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: PPUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: LD_INT 4
 556: PUSH
 557: LD_INT 4
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: PPUSH
 566: CALL 12683 0 6
 570: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , tmp ) ;
 571: LD_ADDR_EXP 14
 575: PUSH
 576: LD_EXP 14
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: LD_VAR 0 3
 588: PPUSH
 589: CALL_OW 1
 593: ST_TO_ADDR
// end ;
 594: LD_VAR 0 1
 598: RET
// export function InitMC_Powell ( ) ; begin
 599: LD_INT 0
 601: PPUSH
// MC_SetScanArea ( 1 , powell_base ) ;
 602: LD_INT 1
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: CALL 65763 0 2
// MC_SetParkingArea ( 1 , powell_parking ) ;
 612: LD_INT 1
 614: PPUSH
 615: LD_INT 6
 617: PPUSH
 618: CALL 65707 0 2
// MC_SetDepositsXY ( 1 , [ [ 167 , 102 , 0 ] , [ 173 , 83 , 1 ] , [ 171 , 141 , 0 ] , [ 178 , 148 , 1 ] ] ) ;
 622: LD_INT 1
 624: PPUSH
 625: LD_INT 167
 627: PUSH
 628: LD_INT 102
 630: PUSH
 631: LD_INT 0
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 173
 641: PUSH
 642: LD_INT 83
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 171
 655: PUSH
 656: LD_INT 141
 658: PUSH
 659: LD_INT 0
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: PUSH
 667: LD_INT 178
 669: PUSH
 670: LD_INT 148
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: PPUSH
 687: CALL 64766 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
 691: LD_INT 1
 693: PPUSH
 694: LD_INT 11
 696: PUSH
 697: LD_INT 6
 699: PUSH
 700: LD_INT 7
 702: PUSH
 703: LD_INT 9
 705: PUSH
 706: LD_INT 10
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL 65595 0 2
// MC_SetCratesArea ( 1 , powell_crates ) ;
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 5
 725: PPUSH
 726: CALL 65277 0 2
// MC_SetTame ( 1 , powell_ape ) ;
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 4
 735: PPUSH
 736: CALL 65008 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 4
 745: PPUSH
 746: CALL 64627 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] ] ) ;
 750: LD_INT 1
 752: PPUSH
 753: LD_INT 3
 755: PUSH
 756: LD_INT 1
 758: PUSH
 759: LD_INT 2
 761: PUSH
 762: LD_INT 5
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 4
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: LD_INT 6
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 4
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: LD_INT 2
 797: PUSH
 798: LD_INT 7
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 4
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 2
 815: PUSH
 816: LD_INT 6
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: PUSH
 825: LD_INT 5
 827: PUSH
 828: LD_INT 1
 830: PUSH
 831: LD_INT 2
 833: PUSH
 834: LD_INT 6
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL 64442 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 200 , 111 , 4 ] , [ b_oil_mine , 167 , 102 , 0 ] , [ b_armoury , 178 , 117 , 2 ] , [ b_workshop , 197 , 144 , 4 ] , [ b_solar_power , 206 , 124 , 3 ] , [ b_solar_power , 209 , 128 , 3 ] , [ b_solar_power , 211 , 132 , 3 ] , [ b_siberite_mine , 173 , 83 , 3 ] , [ b_lab , 186 , 103 , 2 ] , [ b_turret , 173 , 99 , 2 ] , [ b_bunker , 174 , 102 , 2 ] , [ b_bunker , 178 , 100 , 2 ] , [ b_turret , 174 , 108 , 1 ] , [ b_turret , 182 , 122 , 1 ] , [ b_control_tower , 194 , 124 , 5 ] , [ b_siberite_power , 204 , 133 , 3 ] , [ b_solar_power , 201 , 133 , 3 ] , [ b_siberite_power , 199 , 119 , 5 ] , [ b_turret , 184 , 141 , 1 ] , [ b_turret , 183 , 131 , 2 ] ] ) ;
 854: LD_INT 1
 856: PPUSH
 857: LD_INT 6
 859: PUSH
 860: LD_INT 200
 862: PUSH
 863: LD_INT 111
 865: PUSH
 866: LD_INT 4
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: PUSH
 875: LD_INT 29
 877: PUSH
 878: LD_INT 167
 880: PUSH
 881: LD_INT 102
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 4
 895: PUSH
 896: LD_INT 178
 898: PUSH
 899: LD_INT 117
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 2
 913: PUSH
 914: LD_INT 197
 916: PUSH
 917: LD_INT 144
 919: PUSH
 920: LD_INT 4
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 27
 931: PUSH
 932: LD_INT 206
 934: PUSH
 935: LD_INT 124
 937: PUSH
 938: LD_INT 3
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_INT 27
 949: PUSH
 950: LD_INT 209
 952: PUSH
 953: LD_INT 128
 955: PUSH
 956: LD_INT 3
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 27
 967: PUSH
 968: LD_INT 211
 970: PUSH
 971: LD_INT 132
 973: PUSH
 974: LD_INT 3
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: PUSH
 983: LD_INT 30
 985: PUSH
 986: LD_INT 173
 988: PUSH
 989: LD_INT 83
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 6
1003: PUSH
1004: LD_INT 186
1006: PUSH
1007: LD_INT 103
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 33
1021: PUSH
1022: LD_INT 173
1024: PUSH
1025: LD_INT 99
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 32
1039: PUSH
1040: LD_INT 174
1042: PUSH
1043: LD_INT 102
1045: PUSH
1046: LD_INT 2
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 32
1057: PUSH
1058: LD_INT 178
1060: PUSH
1061: LD_INT 100
1063: PUSH
1064: LD_INT 2
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_INT 33
1075: PUSH
1076: LD_INT 174
1078: PUSH
1079: LD_INT 108
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 33
1093: PUSH
1094: LD_INT 182
1096: PUSH
1097: LD_INT 122
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 36
1111: PUSH
1112: LD_INT 194
1114: PUSH
1115: LD_INT 124
1117: PUSH
1118: LD_INT 5
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 28
1129: PUSH
1130: LD_INT 204
1132: PUSH
1133: LD_INT 133
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 27
1147: PUSH
1148: LD_INT 201
1150: PUSH
1151: LD_INT 133
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 28
1165: PUSH
1166: LD_INT 199
1168: PUSH
1169: LD_INT 119
1171: PUSH
1172: LD_INT 5
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 33
1183: PUSH
1184: LD_INT 184
1186: PUSH
1187: LD_INT 141
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 33
1201: PUSH
1202: LD_INT 183
1204: PUSH
1205: LD_INT 131
1207: PUSH
1208: LD_INT 2
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: PPUSH
1239: CALL 64334 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1243: LD_INT 1
1245: PPUSH
1246: LD_INT 10
1248: PUSH
1249: LD_INT 15
1251: PUSH
1252: LD_INT 12
1254: PUSH
1255: LD_INT 11
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL 65184 0 2
// MC_SetFactoryExtension ( 1 , 197 , 144 , 4 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 197
1273: PPUSH
1274: LD_INT 144
1276: PPUSH
1277: LD_INT 4
1279: PPUSH
1280: LD_INT 19
1282: PUSH
1283: LD_INT 16
1285: PUSH
1286: LD_INT 17
1288: PUSH
1289: LD_INT 18
1291: PUSH
1292: LD_INT 22
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL 65389 0 5
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
1306: LD_INT 1
1308: PPUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL 65057 0 2
// end ; end_of_file
1316: LD_VAR 0 1
1320: RET
// export Gensher , gensher_side ; export function PrepareGensher ; var i , tmp , un ; begin
1321: LD_INT 0
1323: PPUSH
1324: PPUSH
1325: PPUSH
1326: PPUSH
// gensher_side := 2 ;
1327: LD_ADDR_EXP 7
1331: PUSH
1332: LD_INT 2
1334: ST_TO_ADDR
// uc_side := gensher_side ;
1335: LD_ADDR_OWVAR 20
1339: PUSH
1340: LD_EXP 7
1344: ST_TO_ADDR
// uc_nation := 2 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// tmp := PrepareBase ( ar_depot , gensher_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_INT 7
1360: PPUSH
1361: LD_INT 2
1363: PPUSH
1364: LD_STRING 
1366: PPUSH
1367: LD_INT 8
1369: PUSH
1370: LD_INT 7
1372: PUSH
1373: LD_INT 6
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PUSH
1381: LD_OWVAR 67
1385: ARRAY
1386: PPUSH
1387: LD_INT 1500
1389: PUSH
1390: LD_INT 300
1392: PUSH
1393: LD_INT 30
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: LIST
1400: PPUSH
1401: LD_INT 4
1403: PUSH
1404: LD_INT 4
1406: PUSH
1407: LD_INT 4
1409: PUSH
1410: LD_INT 4
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PPUSH
1419: CALL 12683 0 6
1423: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp ) ;
1424: LD_ADDR_EXP 14
1428: PUSH
1429: LD_EXP 14
1433: PPUSH
1434: LD_INT 2
1436: PPUSH
1437: LD_VAR 0 3
1441: PPUSH
1442: CALL_OW 1
1446: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: LD_INT 22
1454: PUSH
1455: LD_INT 2
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 30
1464: PUSH
1465: LD_INT 31
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PPUSH
1476: CALL_OW 69
1480: ST_TO_ADDR
// for i in tmp do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1562
// begin PrepareHuman ( false , 1 , [ 4 , 3 , 3 ] [ Difficulty ] ) ;
1494: LD_INT 0
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_INT 4
1502: PUSH
1503: LD_INT 3
1505: PUSH
1506: LD_INT 3
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_OWVAR 67
1518: ARRAY
1519: PPUSH
1520: CALL_OW 380
// un := CreateHuman ;
1524: LD_ADDR_VAR 0 4
1528: PUSH
1529: CALL_OW 44
1533: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: LD_INT 1
1541: PPUSH
1542: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 2
1555: PPUSH
1556: CALL_OW 52
// end ;
1560: GO 1491
1562: POP
1563: POP
// tmp := AreaToList ( gensher_mines , 0 ) ;
1564: LD_ADDR_VAR 0 3
1568: PUSH
1569: LD_INT 15
1571: PPUSH
1572: LD_INT 0
1574: PPUSH
1575: CALL_OW 517
1579: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_VAR 0 3
1594: PUSH
1595: LD_INT 1
1597: ARRAY
1598: PUSH
1599: FOR_TO
1600: IFFALSE 1702
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 , 0 ) ;
1602: LD_VAR 0 3
1606: PUSH
1607: LD_INT 1
1609: ARRAY
1610: PUSH
1611: LD_VAR 0 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 3
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: PUSH
1626: LD_VAR 0 2
1630: ARRAY
1631: PPUSH
1632: LD_INT 2
1634: PPUSH
1635: LD_INT 0
1637: PPUSH
1638: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
1642: LD_ADDR_EXP 3
1646: PUSH
1647: LD_EXP 3
1651: PPUSH
1652: LD_EXP 3
1656: PUSH
1657: LD_INT 1
1659: PLUS
1660: PPUSH
1661: LD_VAR 0 3
1665: PUSH
1666: LD_INT 1
1668: ARRAY
1669: PUSH
1670: LD_VAR 0 2
1674: ARRAY
1675: PUSH
1676: LD_VAR 0 3
1680: PUSH
1681: LD_INT 2
1683: ARRAY
1684: PUSH
1685: LD_VAR 0 2
1689: ARRAY
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: PPUSH
1695: CALL_OW 2
1699: ST_TO_ADDR
// end ;
1700: GO 1599
1702: POP
1703: POP
// end ;
1704: LD_VAR 0 1
1708: RET
// export function InitMC_Gensher ( ) ; begin
1709: LD_INT 0
1711: PPUSH
// MC_SetScanArea ( 2 , gensher_base ) ;
1712: LD_INT 2
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: CALL 65763 0 2
// MC_SetParkingArea ( 2 , gensher_parking ) ;
1722: LD_INT 2
1724: PPUSH
1725: LD_INT 9
1727: PPUSH
1728: CALL 65707 0 2
// MC_SetDepositsXY ( 2 , [ [ 56 , 23 , 0 ] , [ 52 , 40 , 1 ] ] ) ;
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 56
1737: PUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 52
1751: PUSH
1752: LD_INT 40
1754: PUSH
1755: LD_INT 1
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PPUSH
1767: CALL 64766 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ar_gun , ar_rocket_launcher ] ) ;
1771: LD_INT 2
1773: PPUSH
1774: LD_INT 27
1776: PUSH
1777: LD_INT 28
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL 65595 0 2
// MC_SetCratesArea ( 2 , gensher_crates ) ;
1788: LD_INT 2
1790: PPUSH
1791: LD_INT 8
1793: PPUSH
1794: CALL 65277 0 2
// MC_SetTame ( 2 , gensher_ape ) ;
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 7
1803: PPUSH
1804: CALL 65008 0 2
// MC_SetDefenderLimit ( 2 , 4 ) ;
1808: LD_INT 2
1810: PPUSH
1811: LD_INT 4
1813: PPUSH
1814: CALL 64627 0 2
// MC_SetProduceList ( 2 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ) ;
1818: LD_INT 2
1820: PPUSH
1821: LD_INT 13
1823: PUSH
1824: LD_INT 2
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: LD_INT 31
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 13
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: LD_INT 1
1847: PUSH
1848: LD_INT 31
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 14
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: LD_INT 27
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 14
1877: PUSH
1878: LD_INT 1
1880: PUSH
1881: LD_INT 2
1883: PUSH
1884: LD_INT 27
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 14
1895: PUSH
1896: LD_INT 1
1898: PUSH
1899: LD_INT 2
1901: PUSH
1902: LD_INT 28
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 14
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 26
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: PPUSH
1937: CALL 64442 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 13 , 18 , 1 ] , [ b_lab , 17 , 27 , 1 ] , [ b_solar_power , 17 , 3 , 0 ] , [ b_oil_mine , 56 , 23 , 0 ] , [ b_armoury , 42 , 29 , 5 ] , [ b_workshop , 11 , 7 , 2 ] , [ b_solar_power , 20 , 3 , 0 ] , [ b_solar_power , 23 , 3 , 0 ] , [ b_solar_power , 26 , 3 , 0 ] , [ b_bunker , 27 , 44 , 5 ] , [ b_bunker , 41 , 41 , 5 ] , [ b_bunker , 45 , 24 , 5 ] , [ b_bunker , 48 , 19 , 5 ] , [ b_bunker , 41 , 3 , 4 ] , [ b_armoury , 44 , 9 , 4 ] , [ b_siberite_mine , 52 , 40 , 3 ] ] ) ;
1941: LD_INT 2
1943: PPUSH
1944: LD_INT 6
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 18
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 6
1964: PUSH
1965: LD_INT 17
1967: PUSH
1968: LD_INT 27
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 27
1982: PUSH
1983: LD_INT 17
1985: PUSH
1986: LD_INT 3
1988: PUSH
1989: LD_INT 0
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 29
2000: PUSH
2001: LD_INT 56
2003: PUSH
2004: LD_INT 23
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 4
2018: PUSH
2019: LD_INT 42
2021: PUSH
2022: LD_INT 29
2024: PUSH
2025: LD_INT 5
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 2
2036: PUSH
2037: LD_INT 11
2039: PUSH
2040: LD_INT 7
2042: PUSH
2043: LD_INT 2
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 27
2054: PUSH
2055: LD_INT 20
2057: PUSH
2058: LD_INT 3
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 27
2072: PUSH
2073: LD_INT 23
2075: PUSH
2076: LD_INT 3
2078: PUSH
2079: LD_INT 0
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 27
2090: PUSH
2091: LD_INT 26
2093: PUSH
2094: LD_INT 3
2096: PUSH
2097: LD_INT 0
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 32
2108: PUSH
2109: LD_INT 27
2111: PUSH
2112: LD_INT 44
2114: PUSH
2115: LD_INT 5
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 32
2126: PUSH
2127: LD_INT 41
2129: PUSH
2130: LD_INT 41
2132: PUSH
2133: LD_INT 5
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 32
2144: PUSH
2145: LD_INT 45
2147: PUSH
2148: LD_INT 24
2150: PUSH
2151: LD_INT 5
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 32
2162: PUSH
2163: LD_INT 48
2165: PUSH
2166: LD_INT 19
2168: PUSH
2169: LD_INT 5
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 32
2180: PUSH
2181: LD_INT 41
2183: PUSH
2184: LD_INT 3
2186: PUSH
2187: LD_INT 4
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: LD_INT 44
2201: PUSH
2202: LD_INT 9
2204: PUSH
2205: LD_INT 4
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 30
2216: PUSH
2217: LD_INT 52
2219: PUSH
2220: LD_INT 40
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL 64334 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_opto , b_lab_biological , b_lab_siberium ] ) ;
2254: LD_INT 2
2256: PPUSH
2257: LD_INT 10
2259: PUSH
2260: LD_INT 15
2262: PUSH
2263: LD_INT 13
2265: PUSH
2266: LD_INT 11
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL 65184 0 2
// MC_SetFactoryExtension ( 2 , 11 , 7 , 2 , [ b_ext_stitch , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
2279: LD_INT 2
2281: PPUSH
2282: LD_INT 11
2284: PPUSH
2285: LD_INT 7
2287: PPUSH
2288: LD_INT 2
2290: PPUSH
2291: LD_INT 23
2293: PUSH
2294: LD_INT 16
2296: PUSH
2297: LD_INT 17
2299: PUSH
2300: LD_INT 18
2302: PUSH
2303: LD_INT 22
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL 65389 0 5
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
2317: LD_INT 2
2319: PPUSH
2320: LD_INT 0
2322: PPUSH
2323: CALL 65057 0 2
// end ;
2327: LD_VAR 0 1
2331: RET
// every 10 trigger staticMines and FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) do var i , j , tmp , x , y ;
2332: LD_EXP 3
2336: PUSH
2337: LD_INT 15
2339: PPUSH
2340: LD_INT 81
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PPUSH
2350: CALL_OW 70
2354: AND
2355: IFFALSE 2568
2357: GO 2359
2359: DISABLE
2360: LD_INT 0
2362: PPUSH
2363: PPUSH
2364: PPUSH
2365: PPUSH
2366: PPUSH
// begin enable ;
2367: ENABLE
// tmp := FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: LD_INT 15
2375: PPUSH
2376: LD_INT 81
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PPUSH
2386: CALL_OW 70
2390: ST_TO_ADDR
// if not tmp then
2391: LD_VAR 0 3
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2568
// for i in tmp do
2400: LD_ADDR_VAR 0 1
2404: PUSH
2405: LD_VAR 0 3
2409: PUSH
2410: FOR_IN
2411: IFFALSE 2566
// begin x := GetX ( i ) ;
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: LD_VAR 0 1
2422: PPUSH
2423: CALL_OW 250
2427: ST_TO_ADDR
// y := GetY ( i ) ;
2428: LD_ADDR_VAR 0 5
2432: PUSH
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 251
2442: ST_TO_ADDR
// if MineAtPos ( x , y ) then
2443: LD_VAR 0 4
2447: PPUSH
2448: LD_VAR 0 5
2452: PPUSH
2453: CALL_OW 458
2457: IFFALSE 2564
// begin LaunchMineAtPos ( x , y , 2 ) ;
2459: LD_VAR 0 4
2463: PPUSH
2464: LD_VAR 0 5
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 456
// for j = 1 to staticMines do
2476: LD_ADDR_VAR 0 2
2480: PUSH
2481: DOUBLE
2482: LD_INT 1
2484: DEC
2485: ST_TO_ADDR
2486: LD_EXP 3
2490: PUSH
2491: FOR_TO
2492: IFFALSE 2562
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
2494: LD_EXP 3
2498: PUSH
2499: LD_VAR 0 2
2503: ARRAY
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PUSH
2509: LD_VAR 0 4
2513: EQUAL
2514: PUSH
2515: LD_EXP 3
2519: PUSH
2520: LD_VAR 0 2
2524: ARRAY
2525: PUSH
2526: LD_INT 2
2528: ARRAY
2529: PUSH
2530: LD_VAR 0 5
2534: EQUAL
2535: AND
2536: IFFALSE 2560
// begin staticMines := Delete ( staticMines , j ) ;
2538: LD_ADDR_EXP 3
2542: PUSH
2543: LD_EXP 3
2547: PPUSH
2548: LD_VAR 0 2
2552: PPUSH
2553: CALL_OW 3
2557: ST_TO_ADDR
// break ;
2558: GO 2562
// end ;
2560: GO 2491
2562: POP
2563: POP
// end ; end ;
2564: GO 2410
2566: POP
2567: POP
// end ; end_of_file
2568: PPOPN 5
2570: END
// export Popov , popov_side , extraPopovForces ; export function PreparePopov ; var i , un , tmp ; begin
2571: LD_INT 0
2573: PPUSH
2574: PPUSH
2575: PPUSH
2576: PPUSH
// popov_side := 3 ;
2577: LD_ADDR_EXP 9
2581: PUSH
2582: LD_INT 3
2584: ST_TO_ADDR
// uc_side := popov_side ;
2585: LD_ADDR_OWVAR 20
2589: PUSH
2590: LD_EXP 9
2594: ST_TO_ADDR
// uc_nation := 3 ;
2595: LD_ADDR_OWVAR 21
2599: PUSH
2600: LD_INT 3
2602: ST_TO_ADDR
// tmp := PrepareBase ( ru_depot , popov_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
2603: LD_ADDR_VAR 0 4
2607: PUSH
2608: LD_INT 9
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: LD_STRING 
2616: PPUSH
2617: LD_INT 8
2619: PUSH
2620: LD_INT 7
2622: PUSH
2623: LD_INT 6
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_OWVAR 67
2635: ARRAY
2636: PPUSH
2637: LD_INT 1500
2639: PUSH
2640: LD_INT 300
2642: PUSH
2643: LD_INT 30
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PPUSH
2651: LD_INT 4
2653: PUSH
2654: LD_INT 4
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: LD_INT 4
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: PPUSH
2669: CALL 12683 0 6
2673: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 3 , tmp ) ;
2674: LD_ADDR_EXP 14
2678: PUSH
2679: LD_EXP 14
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: CALL_OW 1
2696: ST_TO_ADDR
// extraPopovForces := [ ] ;
2697: LD_ADDR_EXP 10
2701: PUSH
2702: EMPTY
2703: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: DOUBLE
2710: LD_INT 1
2712: DEC
2713: ST_TO_ADDR
2714: LD_INT 4
2716: PUSH
2717: LD_INT 5
2719: PUSH
2720: LD_INT 6
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PUSH
2728: LD_OWVAR 67
2732: ARRAY
2733: PUSH
2734: FOR_TO
2735: IFFALSE 2838
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
2737: LD_INT 0
2739: PPUSH
2740: LD_INT 1
2742: PPUSH
2743: LD_INT 4
2745: PUSH
2746: LD_INT 5
2748: PUSH
2749: LD_INT 6
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: LIST
2756: PUSH
2757: LD_OWVAR 67
2761: ARRAY
2762: PPUSH
2763: CALL_OW 380
// un := CreateHuman ;
2767: LD_ADDR_VAR 0 3
2771: PUSH
2772: CALL_OW 44
2776: ST_TO_ADDR
// PlaceUnitXYR ( un , 131 , 110 , 8 , false ) ;
2777: LD_VAR 0 3
2781: PPUSH
2782: LD_INT 131
2784: PPUSH
2785: LD_INT 110
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 50
// ComHold ( un ) ;
2798: LD_VAR 0 3
2802: PPUSH
2803: CALL_OW 140
// extraPopovForces := Replace ( extraPopovForces , extraPopovForces + 1 , un ) ;
2807: LD_ADDR_EXP 10
2811: PUSH
2812: LD_EXP 10
2816: PPUSH
2817: LD_EXP 10
2821: PUSH
2822: LD_INT 1
2824: PLUS
2825: PPUSH
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL_OW 1
2835: ST_TO_ADDR
// end ;
2836: GO 2734
2838: POP
2839: POP
// PrepareSoldier ( false , 6 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 6
2845: PPUSH
2846: CALL_OW 381
// un := CreateHuman ;
2850: LD_ADDR_VAR 0 3
2854: PUSH
2855: CALL_OW 44
2859: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2860: LD_VAR 0 3
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 150 , 158 ) ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_INT 150
2879: PPUSH
2880: LD_INT 158
2882: PPUSH
2883: CALL_OW 428
2887: PPUSH
2888: CALL_OW 52
// end ;
2892: LD_VAR 0 1
2896: RET
// export function InitMC_Popov ( ) ; begin
2897: LD_INT 0
2899: PPUSH
// MC_SetScanArea ( 3 , popov_base ) ;
2900: LD_INT 3
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL 65763 0 2
// MC_SetParkingArea ( 3 , popov_parking ) ;
2910: LD_INT 3
2912: PPUSH
2913: LD_INT 10
2915: PPUSH
2916: CALL 65707 0 2
// MC_SetDepositsXY ( 3 , [ [ 86 , 118 , 0 ] , [ 123 , 151 , 1 ] , [ 106 , 113 , 0 ] ] ) ;
2920: LD_INT 3
2922: PPUSH
2923: LD_INT 86
2925: PUSH
2926: LD_INT 118
2928: PUSH
2929: LD_INT 0
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 123
2939: PUSH
2940: LD_INT 151
2942: PUSH
2943: LD_INT 1
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 106
2953: PUSH
2954: LD_INT 113
2956: PUSH
2957: LD_INT 0
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL 64766 0 2
// MC_SetAllowedTurretWeapons ( 3 , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ) ;
2974: LD_INT 3
2976: PPUSH
2977: LD_INT 46
2979: PUSH
2980: LD_INT 45
2982: PUSH
2983: LD_INT 47
2985: PUSH
2986: LD_INT 49
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL 65595 0 2
// MC_SetCratesArea ( 3 , popov_crates ) ;
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 12
3004: PPUSH
3005: CALL 65277 0 2
// MC_SetTame ( 3 , popov_ape ) ;
3009: LD_INT 3
3011: PPUSH
3012: LD_INT 11
3014: PPUSH
3015: CALL 65008 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
3019: LD_INT 3
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL 64627 0 2
// MC_SetProduceList ( 3 , [ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] ] ) ;
3029: LD_INT 3
3031: PPUSH
3032: LD_INT 23
3034: PUSH
3035: LD_INT 1
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: LD_INT 44
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 23
3052: PUSH
3053: LD_INT 1
3055: PUSH
3056: LD_INT 3
3058: PUSH
3059: LD_INT 45
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 21
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: LD_INT 3
3076: PUSH
3077: LD_INT 43
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 21
3088: PUSH
3089: LD_INT 1
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: LD_INT 45
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL 64442 0 2
// MC_SetBuildingList ( 3 , [ [ b_lab , 76 , 145 , 1 ] , [ b_oil_power , 87 , 144 , 0 ] , [ b_oil_mine , 86 , 118 , 0 ] , [ b_oil_mine , 106 , 113 , 0 ] , [ b_oil_power , 87 , 147 , 1 ] , [ b_workshop , 94 , 161 , 0 ] , [ b_lab , 81 , 155 , 1 ] , [ b_armoury , 103 , 147 , 3 ] , [ b_oil_power , 96 , 152 , 0 ] , [ b_oil_power , 96 , 149 , 3 ] , [ b_bunker , 109 , 142 , 3 ] , [ b_bunker , 112 , 148 , 3 ] , [ b_turret , 120 , 159 , 4 ] , [ b_turret , 122 , 163 , 4 ] , [ b_turret , 123 , 167 , 4 ] , [ b_turret , 59 , 111 , 3 ] , [ b_turret , 65 , 111 , 3 ] , [ b_turret , 76 , 117 , 3 ] , [ b_turret , 80 , 119 , 3 ] , [ b_turret , 87 , 125 , 3 ] , [ b_armoury , 92 , 129 , 3 ] , [ b_siberite_power , 85 , 165 , 0 ] , [ b_siberite_power , 83 , 161 , 4 ] , [ b_siberite_power , 91 , 166 , 3 ] , [ b_siberite_power , 102 , 166 , 2 ] , [ b_teleport , 91 , 147 , 3 ] ] ) ;
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 6
3119: PUSH
3120: LD_INT 76
3122: PUSH
3123: LD_INT 145
3125: PUSH
3126: LD_INT 1
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: PUSH
3135: LD_INT 26
3137: PUSH
3138: LD_INT 87
3140: PUSH
3141: LD_INT 144
3143: PUSH
3144: LD_INT 0
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 29
3155: PUSH
3156: LD_INT 86
3158: PUSH
3159: LD_INT 118
3161: PUSH
3162: LD_INT 0
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 29
3173: PUSH
3174: LD_INT 106
3176: PUSH
3177: LD_INT 113
3179: PUSH
3180: LD_INT 0
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 26
3191: PUSH
3192: LD_INT 87
3194: PUSH
3195: LD_INT 147
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 94
3212: PUSH
3213: LD_INT 161
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 6
3227: PUSH
3228: LD_INT 81
3230: PUSH
3231: LD_INT 155
3233: PUSH
3234: LD_INT 1
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 4
3245: PUSH
3246: LD_INT 103
3248: PUSH
3249: LD_INT 147
3251: PUSH
3252: LD_INT 3
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 26
3263: PUSH
3264: LD_INT 96
3266: PUSH
3267: LD_INT 152
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 26
3281: PUSH
3282: LD_INT 96
3284: PUSH
3285: LD_INT 149
3287: PUSH
3288: LD_INT 3
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 32
3299: PUSH
3300: LD_INT 109
3302: PUSH
3303: LD_INT 142
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 32
3317: PUSH
3318: LD_INT 112
3320: PUSH
3321: LD_INT 148
3323: PUSH
3324: LD_INT 3
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 33
3335: PUSH
3336: LD_INT 120
3338: PUSH
3339: LD_INT 159
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 33
3353: PUSH
3354: LD_INT 122
3356: PUSH
3357: LD_INT 163
3359: PUSH
3360: LD_INT 4
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 33
3371: PUSH
3372: LD_INT 123
3374: PUSH
3375: LD_INT 167
3377: PUSH
3378: LD_INT 4
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 33
3389: PUSH
3390: LD_INT 59
3392: PUSH
3393: LD_INT 111
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 33
3407: PUSH
3408: LD_INT 65
3410: PUSH
3411: LD_INT 111
3413: PUSH
3414: LD_INT 3
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 33
3425: PUSH
3426: LD_INT 76
3428: PUSH
3429: LD_INT 117
3431: PUSH
3432: LD_INT 3
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 33
3443: PUSH
3444: LD_INT 80
3446: PUSH
3447: LD_INT 119
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: PUSH
3459: LD_INT 33
3461: PUSH
3462: LD_INT 87
3464: PUSH
3465: LD_INT 125
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 4
3479: PUSH
3480: LD_INT 92
3482: PUSH
3483: LD_INT 129
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 28
3497: PUSH
3498: LD_INT 85
3500: PUSH
3501: LD_INT 165
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 28
3515: PUSH
3516: LD_INT 83
3518: PUSH
3519: LD_INT 161
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 28
3533: PUSH
3534: LD_INT 91
3536: PUSH
3537: LD_INT 166
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 28
3551: PUSH
3552: LD_INT 102
3554: PUSH
3555: LD_INT 166
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 34
3569: PUSH
3570: LD_INT 91
3572: PUSH
3573: LD_INT 147
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL 64334 0 2
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
3617: LD_INT 3
3619: PPUSH
3620: LD_INT 10
3622: PUSH
3623: LD_INT 12
3625: PUSH
3626: LD_INT 14
3628: PUSH
3629: LD_INT 11
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 65184 0 2
// MC_SetFactoryExtension ( 3 , 94 , 161 , 0 , [ b_ext_noncombat , b_ext_gun , b_ext_rocket , b_ext_computer , b_ext_siberium ] ) ;
3642: LD_INT 3
3644: PPUSH
3645: LD_INT 94
3647: PPUSH
3648: LD_INT 161
3650: PPUSH
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 19
3656: PUSH
3657: LD_INT 17
3659: PUSH
3660: LD_INT 18
3662: PUSH
3663: LD_INT 24
3665: PUSH
3666: LD_INT 21
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: PPUSH
3676: CALL 65389 0 5
// MC_SetUpgradeBuilding ( 3 , b_depot ) ;
3680: LD_INT 3
3682: PPUSH
3683: LD_INT 0
3685: PPUSH
3686: CALL 65057 0 2
// end ; end_of_file
3690: LD_VAR 0 1
3694: RET
// export Sikorski ; export function PrepareSikorski ; var i , j , un ; begin
3695: LD_INT 0
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
// uc_side := 1 ;
3701: LD_ADDR_OWVAR 20
3705: PUSH
3706: LD_INT 1
3708: ST_TO_ADDR
// uc_nation := 1 ;
3709: LD_ADDR_OWVAR 21
3713: PUSH
3714: LD_INT 1
3716: ST_TO_ADDR
// hc_importance := 100 ;
3717: LD_ADDR_OWVAR 32
3721: PUSH
3722: LD_INT 100
3724: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
3725: LD_ADDR_OWVAR 26
3729: PUSH
3730: LD_STRING Jeremy Sikorski
3732: ST_TO_ADDR
// hc_gallery := us ;
3733: LD_ADDR_OWVAR 33
3737: PUSH
3738: LD_STRING us
3740: ST_TO_ADDR
// hc_face_number := 19 ;
3741: LD_ADDR_OWVAR 34
3745: PUSH
3746: LD_INT 19
3748: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 1
3754: PPUSH
3755: LD_INT 4
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_OWVAR 67
3773: ARRAY
3774: PPUSH
3775: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3779: LD_ADDR_OWVAR 29
3783: PUSH
3784: LD_INT 10
3786: PUSH
3787: LD_INT 12
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: ST_TO_ADDR
// Sikorski := CreateHuman ;
3794: LD_ADDR_EXP 11
3798: PUSH
3799: CALL_OW 44
3803: ST_TO_ADDR
// PlaceUnitXYR ( Sikorski , 133 , 19 , 2 , false ) ;
3804: LD_EXP 11
3808: PPUSH
3809: LD_INT 133
3811: PPUSH
3812: LD_INT 19
3814: PPUSH
3815: LD_INT 2
3817: PPUSH
3818: LD_INT 0
3820: PPUSH
3821: CALL_OW 50
// InitHc_All ( ) ;
3825: CALL_OW 584
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3829: LD_ADDR_VAR 0 2
3833: PUSH
3834: DOUBLE
3835: LD_INT 1
3837: DEC
3838: ST_TO_ADDR
3839: LD_INT 4
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_OWVAR 67
3857: ARRAY
3858: PUSH
3859: FOR_TO
3860: IFFALSE 3976
// for j := 1 to 4 do
3862: LD_ADDR_VAR 0 3
3866: PUSH
3867: DOUBLE
3868: LD_INT 1
3870: DEC
3871: ST_TO_ADDR
3872: LD_INT 4
3874: PUSH
3875: FOR_TO
3876: IFFALSE 3972
// begin PrepareHuman ( false , j , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
3878: LD_INT 0
3880: PPUSH
3881: LD_VAR 0 3
3885: PPUSH
3886: LD_INT 5
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 3
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_OWVAR 67
3904: ARRAY
3905: PPUSH
3906: CALL_OW 380
// un := CreateHuman ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3920: LD_VAR 0 4
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 5
3930: PPUSH
3931: CALL_OW 12
3935: PPUSH
3936: CALL_OW 233
// PlaceUnitXYR ( un , 133 , 19 , 6 , false ) ;
3940: LD_VAR 0 4
3944: PPUSH
3945: LD_INT 133
3947: PPUSH
3948: LD_INT 19
3950: PPUSH
3951: LD_INT 6
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 50
// ComHold ( un ) ;
3961: LD_VAR 0 4
3965: PPUSH
3966: CALL_OW 140
// end ;
3970: GO 3875
3972: POP
3973: POP
3974: GO 3859
3976: POP
3977: POP
// vc_chassis := us_heavy_tracked ;
3978: LD_ADDR_OWVAR 37
3982: PUSH
3983: LD_INT 4
3985: ST_TO_ADDR
// vc_engine := engine_combustion ;
3986: LD_ADDR_OWVAR 39
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// vc_control := control_manual ;
3994: LD_ADDR_OWVAR 38
3998: PUSH
3999: LD_INT 1
4001: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
4002: LD_ADDR_OWVAR 40
4006: PUSH
4007: LD_INT 14
4009: ST_TO_ADDR
// vc_fuel_battery := 60 ;
4010: LD_ADDR_OWVAR 41
4014: PUSH
4015: LD_INT 60
4017: ST_TO_ADDR
// un := CreateVehicle ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: CALL_OW 45
4027: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4028: LD_VAR 0 4
4032: PPUSH
4033: LD_INT 2
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( un , 128 , 12 , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_INT 128
4047: PPUSH
4048: LD_INT 12
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// for i := 1 to 3 do
4058: LD_ADDR_VAR 0 2
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_INT 3
4070: PUSH
4071: FOR_TO
4072: IFFALSE 4095
// CreateCratesXYR ( 5 , 133 , 19 , 3 , false ) ;
4074: LD_INT 5
4076: PPUSH
4077: LD_INT 133
4079: PPUSH
4080: LD_INT 19
4082: PPUSH
4083: LD_INT 3
4085: PPUSH
4086: LD_INT 0
4088: PPUSH
4089: CALL_OW 56
4093: GO 4071
4095: POP
4096: POP
// end ; end_of_file
4097: LD_VAR 0 1
4101: RET
// export function Action ; begin
4102: LD_INT 0
4104: PPUSH
// InGameOn ;
4105: CALL_OW 8
// CenterNowOnXY ( 133 , 19 ) ;
4109: LD_INT 133
4111: PPUSH
4112: LD_INT 19
4114: PPUSH
4115: CALL_OW 86
// Say ( Sikorski , WT-DS-1 ) ;
4119: LD_EXP 11
4123: PPUSH
4124: LD_STRING WT-DS-1
4126: PPUSH
4127: CALL_OW 88
// InGameOff ;
4131: CALL_OW 9
// ChangeMissionObjectives ( DestroyEnemy ) ;
4135: LD_STRING DestroyEnemy
4137: PPUSH
4138: CALL_OW 337
// end ; end_of_file
4142: LD_VAR 0 1
4146: RET
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
4147: LD_VAR 0 1
4151: PPUSH
4152: CALL 67882 0 1
// if un = Powell then
4156: LD_VAR 0 1
4160: PUSH
4161: LD_EXP 4
4165: EQUAL
4166: IFFALSE 4175
// YouLost ( Powell ) ;
4168: LD_STRING Powell
4170: PPUSH
4171: CALL_OW 104
// end ;
4175: PPOPN 1
4177: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: CALL 70216 0 2
// end ;
4192: PPOPN 2
4194: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL 69284 0 1
// end ;
4204: PPOPN 1
4206: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
4207: LD_VAR 0 1
4211: PPUSH
4212: CALL 69525 0 1
// end ;
4216: PPOPN 1
4218: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL 67578 0 2
// end ;
4233: PPOPN 2
4235: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_VAR 0 2
4245: PPUSH
4246: LD_VAR 0 3
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: LD_VAR 0 5
4260: PPUSH
4261: CALL 67198 0 5
// end ;
4265: PPOPN 5
4267: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL 66794 0 2
// end ;
4282: PPOPN 2
4284: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
4285: LD_VAR 0 1
4289: PPUSH
4290: LD_VAR 0 2
4294: PPUSH
4295: LD_VAR 0 3
4299: PPUSH
4300: LD_VAR 0 4
4304: PPUSH
4305: CALL 66632 0 4
// end ;
4309: PPOPN 4
4311: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
4312: LD_VAR 0 1
4316: PPUSH
4317: LD_VAR 0 2
4321: PPUSH
4322: LD_VAR 0 3
4326: PPUSH
4327: CALL 66407 0 3
// end ;
4331: PPOPN 3
4333: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
4334: LD_VAR 0 1
4338: PPUSH
4339: LD_VAR 0 2
4343: PPUSH
4344: CALL 66292 0 2
// end ;
4348: PPOPN 2
4350: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_VAR 0 2
4360: PPUSH
4361: CALL 70477 0 2
// end ;
4365: PPOPN 2
4367: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_VAR 0 2
4377: PPUSH
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL 70693 0 4
// end ;
4392: PPOPN 4
4394: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_VAR 0 2
4404: PPUSH
4405: CALL 66101 0 2
// end ;
4409: PPOPN 2
4411: END
// export function CustomEvent ( event ) ; begin
4412: LD_INT 0
4414: PPUSH
// end ;
4415: LD_VAR 0 2
4419: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
4420: LD_VAR 0 1
4424: PUSH
4425: LD_INT 1
4427: EQUAL
4428: PUSH
4429: LD_VAR 0 2
4433: PUSH
4434: LD_INT 4
4436: EQUAL
4437: AND
4438: IFFALSE 4447
// YouLost ( FriendlyFire ) ;
4440: LD_STRING FriendlyFire
4442: PPUSH
4443: CALL_OW 104
// end ; end_of_file
4447: PPOPN 2
4449: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
// if exist_mode then
4454: LD_VAR 0 2
4458: IFFALSE 4483
// unit := CreateCharacter ( prefix & ident ) else
4460: LD_ADDR_VAR 0 5
4464: PUSH
4465: LD_VAR 0 3
4469: PUSH
4470: LD_VAR 0 1
4474: STR
4475: PPUSH
4476: CALL_OW 34
4480: ST_TO_ADDR
4481: GO 4498
// unit := NewCharacter ( ident ) ;
4483: LD_ADDR_VAR 0 5
4487: PUSH
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 25
4497: ST_TO_ADDR
// result := unit ;
4498: LD_ADDR_VAR 0 4
4502: PUSH
4503: LD_VAR 0 5
4507: ST_TO_ADDR
// end ;
4508: LD_VAR 0 4
4512: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4513: LD_INT 0
4515: PPUSH
4516: PPUSH
// if not side or not nation then
4517: LD_VAR 0 1
4521: NOT
4522: PUSH
4523: LD_VAR 0 2
4527: NOT
4528: OR
4529: IFFALSE 4533
// exit ;
4531: GO 5297
// case nation of nation_american :
4533: LD_VAR 0 2
4537: PUSH
4538: LD_INT 1
4540: DOUBLE
4541: EQUAL
4542: IFTRUE 4546
4544: GO 4760
4546: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4547: LD_ADDR_VAR 0 4
4551: PUSH
4552: LD_INT 35
4554: PUSH
4555: LD_INT 45
4557: PUSH
4558: LD_INT 46
4560: PUSH
4561: LD_INT 47
4563: PUSH
4564: LD_INT 82
4566: PUSH
4567: LD_INT 83
4569: PUSH
4570: LD_INT 84
4572: PUSH
4573: LD_INT 85
4575: PUSH
4576: LD_INT 86
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: LD_INT 6
4587: PUSH
4588: LD_INT 15
4590: PUSH
4591: LD_INT 16
4593: PUSH
4594: LD_INT 7
4596: PUSH
4597: LD_INT 12
4599: PUSH
4600: LD_INT 13
4602: PUSH
4603: LD_INT 10
4605: PUSH
4606: LD_INT 14
4608: PUSH
4609: LD_INT 20
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 22
4617: PUSH
4618: LD_INT 25
4620: PUSH
4621: LD_INT 32
4623: PUSH
4624: LD_INT 27
4626: PUSH
4627: LD_INT 36
4629: PUSH
4630: LD_INT 69
4632: PUSH
4633: LD_INT 39
4635: PUSH
4636: LD_INT 34
4638: PUSH
4639: LD_INT 40
4641: PUSH
4642: LD_INT 48
4644: PUSH
4645: LD_INT 49
4647: PUSH
4648: LD_INT 50
4650: PUSH
4651: LD_INT 51
4653: PUSH
4654: LD_INT 52
4656: PUSH
4657: LD_INT 53
4659: PUSH
4660: LD_INT 54
4662: PUSH
4663: LD_INT 55
4665: PUSH
4666: LD_INT 56
4668: PUSH
4669: LD_INT 57
4671: PUSH
4672: LD_INT 58
4674: PUSH
4675: LD_INT 59
4677: PUSH
4678: LD_INT 60
4680: PUSH
4681: LD_INT 61
4683: PUSH
4684: LD_INT 62
4686: PUSH
4687: LD_INT 80
4689: PUSH
4690: LD_INT 82
4692: PUSH
4693: LD_INT 83
4695: PUSH
4696: LD_INT 84
4698: PUSH
4699: LD_INT 85
4701: PUSH
4702: LD_INT 86
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
4758: GO 5221
4760: LD_INT 2
4762: DOUBLE
4763: EQUAL
4764: IFTRUE 4768
4766: GO 4990
4768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_INT 35
4776: PUSH
4777: LD_INT 45
4779: PUSH
4780: LD_INT 46
4782: PUSH
4783: LD_INT 47
4785: PUSH
4786: LD_INT 82
4788: PUSH
4789: LD_INT 83
4791: PUSH
4792: LD_INT 84
4794: PUSH
4795: LD_INT 85
4797: PUSH
4798: LD_INT 87
4800: PUSH
4801: LD_INT 70
4803: PUSH
4804: LD_INT 1
4806: PUSH
4807: LD_INT 11
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 4
4815: PUSH
4816: LD_INT 5
4818: PUSH
4819: LD_INT 6
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 18
4827: PUSH
4828: LD_INT 7
4830: PUSH
4831: LD_INT 17
4833: PUSH
4834: LD_INT 8
4836: PUSH
4837: LD_INT 20
4839: PUSH
4840: LD_INT 21
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 72
4848: PUSH
4849: LD_INT 26
4851: PUSH
4852: LD_INT 69
4854: PUSH
4855: LD_INT 39
4857: PUSH
4858: LD_INT 40
4860: PUSH
4861: LD_INT 41
4863: PUSH
4864: LD_INT 42
4866: PUSH
4867: LD_INT 43
4869: PUSH
4870: LD_INT 48
4872: PUSH
4873: LD_INT 49
4875: PUSH
4876: LD_INT 50
4878: PUSH
4879: LD_INT 51
4881: PUSH
4882: LD_INT 52
4884: PUSH
4885: LD_INT 53
4887: PUSH
4888: LD_INT 54
4890: PUSH
4891: LD_INT 55
4893: PUSH
4894: LD_INT 56
4896: PUSH
4897: LD_INT 60
4899: PUSH
4900: LD_INT 61
4902: PUSH
4903: LD_INT 62
4905: PUSH
4906: LD_INT 66
4908: PUSH
4909: LD_INT 67
4911: PUSH
4912: LD_INT 68
4914: PUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 82
4920: PUSH
4921: LD_INT 83
4923: PUSH
4924: LD_INT 84
4926: PUSH
4927: LD_INT 85
4929: PUSH
4930: LD_INT 87
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: ST_TO_ADDR
4988: GO 5221
4990: LD_INT 3
4992: DOUBLE
4993: EQUAL
4994: IFTRUE 4998
4996: GO 5220
4998: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: LD_INT 46
5006: PUSH
5007: LD_INT 47
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: LD_INT 2
5015: PUSH
5016: LD_INT 82
5018: PUSH
5019: LD_INT 83
5021: PUSH
5022: LD_INT 84
5024: PUSH
5025: LD_INT 85
5027: PUSH
5028: LD_INT 86
5030: PUSH
5031: LD_INT 11
5033: PUSH
5034: LD_INT 9
5036: PUSH
5037: LD_INT 20
5039: PUSH
5040: LD_INT 19
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 24
5048: PUSH
5049: LD_INT 22
5051: PUSH
5052: LD_INT 25
5054: PUSH
5055: LD_INT 28
5057: PUSH
5058: LD_INT 29
5060: PUSH
5061: LD_INT 30
5063: PUSH
5064: LD_INT 31
5066: PUSH
5067: LD_INT 37
5069: PUSH
5070: LD_INT 38
5072: PUSH
5073: LD_INT 32
5075: PUSH
5076: LD_INT 27
5078: PUSH
5079: LD_INT 33
5081: PUSH
5082: LD_INT 69
5084: PUSH
5085: LD_INT 39
5087: PUSH
5088: LD_INT 34
5090: PUSH
5091: LD_INT 40
5093: PUSH
5094: LD_INT 71
5096: PUSH
5097: LD_INT 23
5099: PUSH
5100: LD_INT 44
5102: PUSH
5103: LD_INT 48
5105: PUSH
5106: LD_INT 49
5108: PUSH
5109: LD_INT 50
5111: PUSH
5112: LD_INT 51
5114: PUSH
5115: LD_INT 52
5117: PUSH
5118: LD_INT 53
5120: PUSH
5121: LD_INT 54
5123: PUSH
5124: LD_INT 55
5126: PUSH
5127: LD_INT 56
5129: PUSH
5130: LD_INT 57
5132: PUSH
5133: LD_INT 58
5135: PUSH
5136: LD_INT 59
5138: PUSH
5139: LD_INT 63
5141: PUSH
5142: LD_INT 64
5144: PUSH
5145: LD_INT 65
5147: PUSH
5148: LD_INT 82
5150: PUSH
5151: LD_INT 83
5153: PUSH
5154: LD_INT 84
5156: PUSH
5157: LD_INT 85
5159: PUSH
5160: LD_INT 86
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: ST_TO_ADDR
5218: GO 5221
5220: POP
// if state > - 1 and state < 3 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 1
5228: NEG
5229: GREATER
5230: PUSH
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 3
5238: LESS
5239: AND
5240: IFFALSE 5297
// for i in result do
5242: LD_ADDR_VAR 0 5
5246: PUSH
5247: LD_VAR 0 4
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5295
// if GetTech ( i , side ) <> state then
5255: LD_VAR 0 5
5259: PPUSH
5260: LD_VAR 0 1
5264: PPUSH
5265: CALL_OW 321
5269: PUSH
5270: LD_VAR 0 3
5274: NONEQUAL
5275: IFFALSE 5293
// result := result diff i ;
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_VAR 0 5
5291: DIFF
5292: ST_TO_ADDR
5293: GO 5252
5295: POP
5296: POP
// end ;
5297: LD_VAR 0 4
5301: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5302: LD_INT 0
5304: PPUSH
5305: PPUSH
5306: PPUSH
// result := true ;
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_INT 1
5314: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5315: LD_ADDR_VAR 0 5
5319: PUSH
5320: LD_VAR 0 2
5324: PPUSH
5325: CALL_OW 480
5329: ST_TO_ADDR
// if not tmp then
5330: LD_VAR 0 5
5334: NOT
5335: IFFALSE 5339
// exit ;
5337: GO 5388
// for i in tmp do
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_VAR 0 5
5348: PUSH
5349: FOR_IN
5350: IFFALSE 5386
// if GetTech ( i , side ) <> state_researched then
5352: LD_VAR 0 4
5356: PPUSH
5357: LD_VAR 0 1
5361: PPUSH
5362: CALL_OW 321
5366: PUSH
5367: LD_INT 2
5369: NONEQUAL
5370: IFFALSE 5384
// begin result := false ;
5372: LD_ADDR_VAR 0 3
5376: PUSH
5377: LD_INT 0
5379: ST_TO_ADDR
// exit ;
5380: POP
5381: POP
5382: GO 5388
// end ;
5384: GO 5349
5386: POP
5387: POP
// end ;
5388: LD_VAR 0 3
5392: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5393: LD_INT 0
5395: PPUSH
5396: PPUSH
5397: PPUSH
5398: PPUSH
5399: PPUSH
5400: PPUSH
5401: PPUSH
5402: PPUSH
5403: PPUSH
5404: PPUSH
5405: PPUSH
5406: PPUSH
5407: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5408: LD_VAR 0 1
5412: NOT
5413: PUSH
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 257
5423: PUSH
5424: LD_INT 9
5426: NONEQUAL
5427: OR
5428: IFFALSE 5432
// exit ;
5430: GO 6005
// side := GetSide ( unit ) ;
5432: LD_ADDR_VAR 0 9
5436: PUSH
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 255
5446: ST_TO_ADDR
// tech_space := tech_spacanom ;
5447: LD_ADDR_VAR 0 12
5451: PUSH
5452: LD_INT 29
5454: ST_TO_ADDR
// tech_time := tech_taurad ;
5455: LD_ADDR_VAR 0 13
5459: PUSH
5460: LD_INT 28
5462: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5463: LD_ADDR_VAR 0 11
5467: PUSH
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 310
5477: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5478: LD_VAR 0 11
5482: PPUSH
5483: CALL_OW 247
5487: PUSH
5488: LD_INT 2
5490: EQUAL
5491: IFFALSE 5495
// exit ;
5493: GO 6005
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5495: LD_ADDR_VAR 0 8
5499: PUSH
5500: LD_INT 81
5502: PUSH
5503: LD_VAR 0 9
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 21
5517: PUSH
5518: LD_INT 3
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: ST_TO_ADDR
// if not tmp then
5538: LD_VAR 0 8
5542: NOT
5543: IFFALSE 5547
// exit ;
5545: GO 6005
// if in_unit then
5547: LD_VAR 0 11
5551: IFFALSE 5575
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5553: LD_ADDR_VAR 0 10
5557: PUSH
5558: LD_VAR 0 8
5562: PPUSH
5563: LD_VAR 0 11
5567: PPUSH
5568: CALL_OW 74
5572: ST_TO_ADDR
5573: GO 5595
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5575: LD_ADDR_VAR 0 10
5579: PUSH
5580: LD_VAR 0 8
5584: PPUSH
5585: LD_VAR 0 1
5589: PPUSH
5590: CALL_OW 74
5594: ST_TO_ADDR
// if not enemy then
5595: LD_VAR 0 10
5599: NOT
5600: IFFALSE 5604
// exit ;
5602: GO 6005
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5604: LD_VAR 0 11
5608: PUSH
5609: LD_VAR 0 11
5613: PPUSH
5614: LD_VAR 0 10
5618: PPUSH
5619: CALL_OW 296
5623: PUSH
5624: LD_INT 13
5626: GREATER
5627: AND
5628: PUSH
5629: LD_VAR 0 1
5633: PPUSH
5634: LD_VAR 0 10
5638: PPUSH
5639: CALL_OW 296
5643: PUSH
5644: LD_INT 12
5646: GREATER
5647: OR
5648: IFFALSE 5652
// exit ;
5650: GO 6005
// missile := [ 1 ] ;
5652: LD_ADDR_VAR 0 14
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5663: LD_VAR 0 9
5667: PPUSH
5668: LD_VAR 0 12
5672: PPUSH
5673: CALL_OW 325
5677: IFFALSE 5706
// missile := Insert ( missile , missile + 1 , 2 ) ;
5679: LD_ADDR_VAR 0 14
5683: PUSH
5684: LD_VAR 0 14
5688: PPUSH
5689: LD_VAR 0 14
5693: PUSH
5694: LD_INT 1
5696: PLUS
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: CALL_OW 2
5705: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5706: LD_VAR 0 9
5710: PPUSH
5711: LD_VAR 0 13
5715: PPUSH
5716: CALL_OW 325
5720: PUSH
5721: LD_VAR 0 10
5725: PPUSH
5726: CALL_OW 255
5730: PPUSH
5731: LD_VAR 0 13
5735: PPUSH
5736: CALL_OW 325
5740: NOT
5741: AND
5742: IFFALSE 5771
// missile := Insert ( missile , missile + 1 , 3 ) ;
5744: LD_ADDR_VAR 0 14
5748: PUSH
5749: LD_VAR 0 14
5753: PPUSH
5754: LD_VAR 0 14
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PPUSH
5763: LD_INT 3
5765: PPUSH
5766: CALL_OW 2
5770: ST_TO_ADDR
// if missile < 2 then
5771: LD_VAR 0 14
5775: PUSH
5776: LD_INT 2
5778: LESS
5779: IFFALSE 5783
// exit ;
5781: GO 6005
// x := GetX ( enemy ) ;
5783: LD_ADDR_VAR 0 4
5787: PUSH
5788: LD_VAR 0 10
5792: PPUSH
5793: CALL_OW 250
5797: ST_TO_ADDR
// y := GetY ( enemy ) ;
5798: LD_ADDR_VAR 0 5
5802: PUSH
5803: LD_VAR 0 10
5807: PPUSH
5808: CALL_OW 251
5812: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5813: LD_ADDR_VAR 0 6
5817: PUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 1
5825: NEG
5826: PPUSH
5827: LD_INT 1
5829: PPUSH
5830: CALL_OW 12
5834: PLUS
5835: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: LD_VAR 0 5
5845: PUSH
5846: LD_INT 1
5848: NEG
5849: PPUSH
5850: LD_INT 1
5852: PPUSH
5853: CALL_OW 12
5857: PLUS
5858: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5859: LD_VAR 0 6
5863: PPUSH
5864: LD_VAR 0 7
5868: PPUSH
5869: CALL_OW 488
5873: NOT
5874: IFFALSE 5896
// begin _x := x ;
5876: LD_ADDR_VAR 0 6
5880: PUSH
5881: LD_VAR 0 4
5885: ST_TO_ADDR
// _y := y ;
5886: LD_ADDR_VAR 0 7
5890: PUSH
5891: LD_VAR 0 5
5895: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5896: LD_ADDR_VAR 0 3
5900: PUSH
5901: LD_INT 1
5903: PPUSH
5904: LD_VAR 0 14
5908: PPUSH
5909: CALL_OW 12
5913: ST_TO_ADDR
// case i of 1 :
5914: LD_VAR 0 3
5918: PUSH
5919: LD_INT 1
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5944
5927: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5928: LD_VAR 0 1
5932: PPUSH
5933: LD_VAR 0 10
5937: PPUSH
5938: CALL_OW 115
5942: GO 6005
5944: LD_INT 2
5946: DOUBLE
5947: EQUAL
5948: IFTRUE 5952
5950: GO 5974
5952: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5953: LD_VAR 0 1
5957: PPUSH
5958: LD_VAR 0 6
5962: PPUSH
5963: LD_VAR 0 7
5967: PPUSH
5968: CALL_OW 153
5972: GO 6005
5974: LD_INT 3
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 5982
5980: GO 6004
5982: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_VAR 0 6
5992: PPUSH
5993: LD_VAR 0 7
5997: PPUSH
5998: CALL_OW 154
6002: GO 6005
6004: POP
// end ;
6005: LD_VAR 0 2
6009: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6010: LD_INT 0
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
6017: PPUSH
// if not unit or not building then
6018: LD_VAR 0 1
6022: NOT
6023: PUSH
6024: LD_VAR 0 2
6028: NOT
6029: OR
6030: IFFALSE 6034
// exit ;
6032: GO 6192
// x := GetX ( building ) ;
6034: LD_ADDR_VAR 0 5
6038: PUSH
6039: LD_VAR 0 2
6043: PPUSH
6044: CALL_OW 250
6048: ST_TO_ADDR
// y := GetY ( building ) ;
6049: LD_ADDR_VAR 0 6
6053: PUSH
6054: LD_VAR 0 2
6058: PPUSH
6059: CALL_OW 251
6063: ST_TO_ADDR
// for i = 0 to 5 do
6064: LD_ADDR_VAR 0 4
6068: PUSH
6069: DOUBLE
6070: LD_INT 0
6072: DEC
6073: ST_TO_ADDR
6074: LD_INT 5
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6190
// begin _x := ShiftX ( x , i , 3 ) ;
6080: LD_ADDR_VAR 0 7
6084: PUSH
6085: LD_VAR 0 5
6089: PPUSH
6090: LD_VAR 0 4
6094: PPUSH
6095: LD_INT 3
6097: PPUSH
6098: CALL_OW 272
6102: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6103: LD_ADDR_VAR 0 8
6107: PUSH
6108: LD_VAR 0 6
6112: PPUSH
6113: LD_VAR 0 4
6117: PPUSH
6118: LD_INT 3
6120: PPUSH
6121: CALL_OW 273
6125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6126: LD_VAR 0 7
6130: PPUSH
6131: LD_VAR 0 8
6135: PPUSH
6136: CALL_OW 488
6140: NOT
6141: IFFALSE 6145
// continue ;
6143: GO 6077
// if HexInfo ( _x , _y ) = 0 then
6145: LD_VAR 0 7
6149: PPUSH
6150: LD_VAR 0 8
6154: PPUSH
6155: CALL_OW 428
6159: PUSH
6160: LD_INT 0
6162: EQUAL
6163: IFFALSE 6188
// begin ComMoveXY ( unit , _x , _y ) ;
6165: LD_VAR 0 1
6169: PPUSH
6170: LD_VAR 0 7
6174: PPUSH
6175: LD_VAR 0 8
6179: PPUSH
6180: CALL_OW 111
// exit ;
6184: POP
6185: POP
6186: GO 6192
// end ; end ;
6188: GO 6077
6190: POP
6191: POP
// end ;
6192: LD_VAR 0 3
6196: RET
// export function ScanBase ( side , base_area ) ; begin
6197: LD_INT 0
6199: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6200: LD_ADDR_VAR 0 3
6204: PUSH
6205: LD_VAR 0 2
6209: PPUSH
6210: LD_INT 81
6212: PUSH
6213: LD_VAR 0 1
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 70
6226: ST_TO_ADDR
// end ;
6227: LD_VAR 0 3
6231: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6232: LD_INT 0
6234: PPUSH
6235: PPUSH
6236: PPUSH
6237: PPUSH
// result := false ;
6238: LD_ADDR_VAR 0 2
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// side := GetSide ( unit ) ;
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_VAR 0 1
6255: PPUSH
6256: CALL_OW 255
6260: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6261: LD_ADDR_VAR 0 4
6265: PUSH
6266: LD_VAR 0 1
6270: PPUSH
6271: CALL_OW 248
6275: ST_TO_ADDR
// case nat of 1 :
6276: LD_VAR 0 4
6280: PUSH
6281: LD_INT 1
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6300
6289: POP
// tech := tech_lassight ; 2 :
6290: LD_ADDR_VAR 0 5
6294: PUSH
6295: LD_INT 12
6297: ST_TO_ADDR
6298: GO 6339
6300: LD_INT 2
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6319
6308: POP
// tech := tech_mortar ; 3 :
6309: LD_ADDR_VAR 0 5
6313: PUSH
6314: LD_INT 41
6316: ST_TO_ADDR
6317: GO 6339
6319: LD_INT 3
6321: DOUBLE
6322: EQUAL
6323: IFTRUE 6327
6325: GO 6338
6327: POP
// tech := tech_bazooka ; end ;
6328: LD_ADDR_VAR 0 5
6332: PUSH
6333: LD_INT 44
6335: ST_TO_ADDR
6336: GO 6339
6338: POP
// if Researched ( side , tech ) then
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_VAR 0 5
6348: PPUSH
6349: CALL_OW 325
6353: IFFALSE 6380
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6355: LD_ADDR_VAR 0 2
6359: PUSH
6360: LD_INT 5
6362: PUSH
6363: LD_INT 8
6365: PUSH
6366: LD_INT 9
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_VAR 0 4
6378: ARRAY
6379: ST_TO_ADDR
// end ;
6380: LD_VAR 0 2
6384: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6385: LD_INT 0
6387: PPUSH
6388: PPUSH
6389: PPUSH
// if not mines then
6390: LD_VAR 0 2
6394: NOT
6395: IFFALSE 6399
// exit ;
6397: GO 6543
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6399: LD_ADDR_VAR 0 5
6403: PUSH
6404: LD_INT 81
6406: PUSH
6407: LD_VAR 0 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 21
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 69
6441: ST_TO_ADDR
// for i in mines do
6442: LD_ADDR_VAR 0 4
6446: PUSH
6447: LD_VAR 0 2
6451: PUSH
6452: FOR_IN
6453: IFFALSE 6541
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6455: LD_VAR 0 4
6459: PUSH
6460: LD_INT 1
6462: ARRAY
6463: PPUSH
6464: LD_VAR 0 4
6468: PUSH
6469: LD_INT 2
6471: ARRAY
6472: PPUSH
6473: CALL_OW 458
6477: NOT
6478: IFFALSE 6482
// continue ;
6480: GO 6452
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6482: LD_VAR 0 4
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: LD_VAR 0 4
6495: PUSH
6496: LD_INT 2
6498: ARRAY
6499: PPUSH
6500: CALL_OW 428
6504: PUSH
6505: LD_VAR 0 5
6509: IN
6510: IFFALSE 6539
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6512: LD_VAR 0 4
6516: PUSH
6517: LD_INT 1
6519: ARRAY
6520: PPUSH
6521: LD_VAR 0 4
6525: PUSH
6526: LD_INT 2
6528: ARRAY
6529: PPUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: CALL_OW 456
// end ;
6539: GO 6452
6541: POP
6542: POP
// end ;
6543: LD_VAR 0 3
6547: RET
// export function Count ( array ) ; var i ; begin
6548: LD_INT 0
6550: PPUSH
6551: PPUSH
// result := 0 ;
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 0
6559: ST_TO_ADDR
// for i in array do
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: LD_VAR 0 1
6569: PUSH
6570: FOR_IN
6571: IFFALSE 6595
// if i then
6573: LD_VAR 0 3
6577: IFFALSE 6593
// result := result + 1 ;
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: LD_VAR 0 2
6588: PUSH
6589: LD_INT 1
6591: PLUS
6592: ST_TO_ADDR
6593: GO 6570
6595: POP
6596: POP
// end ;
6597: LD_VAR 0 2
6601: RET
// export function IsEmpty ( building ) ; begin
6602: LD_INT 0
6604: PPUSH
// if not building then
6605: LD_VAR 0 1
6609: NOT
6610: IFFALSE 6614
// exit ;
6612: GO 6657
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_VAR 0 1
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 255
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 58
6643: PUSH
6644: EMPTY
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: CALL_OW 69
6655: IN
6656: ST_TO_ADDR
// end ;
6657: LD_VAR 0 2
6661: RET
// export function IsNotFull ( building ) ; begin
6662: LD_INT 0
6664: PPUSH
// if not building then
6665: LD_VAR 0 1
6669: NOT
6670: IFFALSE 6674
// exit ;
6672: GO 6693
// result := UnitsInside ( building ) < 6 ;
6674: LD_ADDR_VAR 0 2
6678: PUSH
6679: LD_VAR 0 1
6683: PPUSH
6684: CALL_OW 313
6688: PUSH
6689: LD_INT 6
6691: LESS
6692: ST_TO_ADDR
// end ;
6693: LD_VAR 0 2
6697: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
// tmp := [ ] ;
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: EMPTY
6710: ST_TO_ADDR
// list := [ ] ;
6711: LD_ADDR_VAR 0 5
6715: PUSH
6716: EMPTY
6717: ST_TO_ADDR
// for i = 16 to 25 do
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: DOUBLE
6724: LD_INT 16
6726: DEC
6727: ST_TO_ADDR
6728: LD_INT 25
6730: PUSH
6731: FOR_TO
6732: IFFALSE 6805
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6734: LD_ADDR_VAR 0 3
6738: PUSH
6739: LD_VAR 0 3
6743: PUSH
6744: LD_INT 22
6746: PUSH
6747: LD_VAR 0 1
6751: PPUSH
6752: CALL_OW 255
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 91
6763: PUSH
6764: LD_VAR 0 1
6768: PUSH
6769: LD_INT 6
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_VAR 0 4
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ADD
6802: ST_TO_ADDR
6803: GO 6731
6805: POP
6806: POP
// for i = 1 to tmp do
6807: LD_ADDR_VAR 0 4
6811: PUSH
6812: DOUBLE
6813: LD_INT 1
6815: DEC
6816: ST_TO_ADDR
6817: LD_VAR 0 3
6821: PUSH
6822: FOR_TO
6823: IFFALSE 6911
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: LD_VAR 0 5
6834: PUSH
6835: LD_VAR 0 3
6839: PUSH
6840: LD_VAR 0 4
6844: ARRAY
6845: PPUSH
6846: CALL_OW 266
6850: PUSH
6851: LD_VAR 0 3
6855: PUSH
6856: LD_VAR 0 4
6860: ARRAY
6861: PPUSH
6862: CALL_OW 250
6866: PUSH
6867: LD_VAR 0 3
6871: PUSH
6872: LD_VAR 0 4
6876: ARRAY
6877: PPUSH
6878: CALL_OW 251
6882: PUSH
6883: LD_VAR 0 3
6887: PUSH
6888: LD_VAR 0 4
6892: ARRAY
6893: PPUSH
6894: CALL_OW 254
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: ADD
6908: ST_TO_ADDR
6909: GO 6822
6911: POP
6912: POP
// result := list ;
6913: LD_ADDR_VAR 0 2
6917: PUSH
6918: LD_VAR 0 5
6922: ST_TO_ADDR
// end ;
6923: LD_VAR 0 2
6927: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
6933: PPUSH
6934: PPUSH
6935: PPUSH
6936: PPUSH
// if not factory then
6937: LD_VAR 0 1
6941: NOT
6942: IFFALSE 6946
// exit ;
6944: GO 7539
// if control = control_apeman then
6946: LD_VAR 0 4
6950: PUSH
6951: LD_INT 5
6953: EQUAL
6954: IFFALSE 7063
// begin tmp := UnitsInside ( factory ) ;
6956: LD_ADDR_VAR 0 8
6960: PUSH
6961: LD_VAR 0 1
6965: PPUSH
6966: CALL_OW 313
6970: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6971: LD_VAR 0 8
6975: PPUSH
6976: LD_INT 25
6978: PUSH
6979: LD_INT 12
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: NOT
6991: IFFALSE 7001
// control := control_manual ;
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_INT 1
7000: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7001: LD_ADDR_VAR 0 8
7005: PUSH
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL 6698 0 1
7015: ST_TO_ADDR
// if tmp then
7016: LD_VAR 0 8
7020: IFFALSE 7063
// begin for i in tmp do
7022: LD_ADDR_VAR 0 7
7026: PUSH
7027: LD_VAR 0 8
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7061
// if i [ 1 ] = b_ext_radio then
7035: LD_VAR 0 7
7039: PUSH
7040: LD_INT 1
7042: ARRAY
7043: PUSH
7044: LD_INT 22
7046: EQUAL
7047: IFFALSE 7059
// begin control := control_remote ;
7049: LD_ADDR_VAR 0 4
7053: PUSH
7054: LD_INT 2
7056: ST_TO_ADDR
// break ;
7057: GO 7061
// end ;
7059: GO 7032
7061: POP
7062: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7063: LD_VAR 0 1
7067: PPUSH
7068: LD_VAR 0 2
7072: PPUSH
7073: LD_VAR 0 3
7077: PPUSH
7078: LD_VAR 0 4
7082: PPUSH
7083: LD_VAR 0 5
7087: PPUSH
7088: CALL_OW 448
7092: IFFALSE 7127
// begin result := [ chassis , engine , control , weapon ] ;
7094: LD_ADDR_VAR 0 6
7098: PUSH
7099: LD_VAR 0 2
7103: PUSH
7104: LD_VAR 0 3
7108: PUSH
7109: LD_VAR 0 4
7113: PUSH
7114: LD_VAR 0 5
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: ST_TO_ADDR
// exit ;
7125: GO 7539
// end ; _chassis := AvailableChassisList ( factory ) ;
7127: LD_ADDR_VAR 0 9
7131: PUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 475
7141: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7142: LD_ADDR_VAR 0 11
7146: PUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 476
7156: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7157: LD_ADDR_VAR 0 12
7161: PUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 477
7171: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7172: LD_ADDR_VAR 0 10
7176: PUSH
7177: LD_VAR 0 1
7181: PPUSH
7182: CALL_OW 478
7186: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7187: LD_VAR 0 9
7191: NOT
7192: PUSH
7193: LD_VAR 0 11
7197: NOT
7198: OR
7199: PUSH
7200: LD_VAR 0 12
7204: NOT
7205: OR
7206: PUSH
7207: LD_VAR 0 10
7211: NOT
7212: OR
7213: IFFALSE 7248
// begin result := [ chassis , engine , control , weapon ] ;
7215: LD_ADDR_VAR 0 6
7219: PUSH
7220: LD_VAR 0 2
7224: PUSH
7225: LD_VAR 0 3
7229: PUSH
7230: LD_VAR 0 4
7234: PUSH
7235: LD_VAR 0 5
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
// exit ;
7246: GO 7539
// end ; if not chassis in _chassis then
7248: LD_VAR 0 2
7252: PUSH
7253: LD_VAR 0 9
7257: IN
7258: NOT
7259: IFFALSE 7285
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7261: LD_ADDR_VAR 0 2
7265: PUSH
7266: LD_VAR 0 9
7270: PUSH
7271: LD_INT 1
7273: PPUSH
7274: LD_VAR 0 9
7278: PPUSH
7279: CALL_OW 12
7283: ARRAY
7284: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7285: LD_VAR 0 2
7289: PPUSH
7290: LD_VAR 0 3
7294: PPUSH
7295: CALL 7544 0 2
7299: NOT
7300: IFFALSE 7359
// repeat engine := _engine [ 1 ] ;
7302: LD_ADDR_VAR 0 3
7306: PUSH
7307: LD_VAR 0 11
7311: PUSH
7312: LD_INT 1
7314: ARRAY
7315: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7316: LD_ADDR_VAR 0 11
7320: PUSH
7321: LD_VAR 0 11
7325: PPUSH
7326: LD_INT 1
7328: PPUSH
7329: CALL_OW 3
7333: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7334: LD_VAR 0 2
7338: PPUSH
7339: LD_VAR 0 3
7343: PPUSH
7344: CALL 7544 0 2
7348: PUSH
7349: LD_VAR 0 11
7353: PUSH
7354: EMPTY
7355: EQUAL
7356: OR
7357: IFFALSE 7302
// if not control in _control then
7359: LD_VAR 0 4
7363: PUSH
7364: LD_VAR 0 12
7368: IN
7369: NOT
7370: IFFALSE 7396
// control := _control [ rand ( 1 , _control ) ] ;
7372: LD_ADDR_VAR 0 4
7376: PUSH
7377: LD_VAR 0 12
7381: PUSH
7382: LD_INT 1
7384: PPUSH
7385: LD_VAR 0 12
7389: PPUSH
7390: CALL_OW 12
7394: ARRAY
7395: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7396: LD_VAR 0 2
7400: PPUSH
7401: LD_VAR 0 5
7405: PPUSH
7406: CALL 7764 0 2
7410: NOT
7411: IFFALSE 7470
// repeat weapon := _weapon [ 1 ] ;
7413: LD_ADDR_VAR 0 5
7417: PUSH
7418: LD_VAR 0 10
7422: PUSH
7423: LD_INT 1
7425: ARRAY
7426: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7427: LD_ADDR_VAR 0 10
7431: PUSH
7432: LD_VAR 0 10
7436: PPUSH
7437: LD_INT 1
7439: PPUSH
7440: CALL_OW 3
7444: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7445: LD_VAR 0 2
7449: PPUSH
7450: LD_VAR 0 5
7454: PPUSH
7455: CALL 7764 0 2
7459: PUSH
7460: LD_VAR 0 10
7464: PUSH
7465: EMPTY
7466: EQUAL
7467: OR
7468: IFFALSE 7413
// result := [ ] ;
7470: LD_ADDR_VAR 0 6
7474: PUSH
7475: EMPTY
7476: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7477: LD_VAR 0 1
7481: PPUSH
7482: LD_VAR 0 2
7486: PPUSH
7487: LD_VAR 0 3
7491: PPUSH
7492: LD_VAR 0 4
7496: PPUSH
7497: LD_VAR 0 5
7501: PPUSH
7502: CALL_OW 448
7506: IFFALSE 7539
// result := [ chassis , engine , control , weapon ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_VAR 0 3
7522: PUSH
7523: LD_VAR 0 4
7527: PUSH
7528: LD_VAR 0 5
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: ST_TO_ADDR
// end ;
7539: LD_VAR 0 6
7543: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7544: LD_INT 0
7546: PPUSH
// if not chassis or not engine then
7547: LD_VAR 0 1
7551: NOT
7552: PUSH
7553: LD_VAR 0 2
7557: NOT
7558: OR
7559: IFFALSE 7563
// exit ;
7561: GO 7759
// case engine of engine_solar :
7563: LD_VAR 0 2
7567: PUSH
7568: LD_INT 2
7570: DOUBLE
7571: EQUAL
7572: IFTRUE 7576
7574: GO 7614
7576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7577: LD_ADDR_VAR 0 3
7581: PUSH
7582: LD_INT 11
7584: PUSH
7585: LD_INT 12
7587: PUSH
7588: LD_INT 13
7590: PUSH
7591: LD_INT 14
7593: PUSH
7594: LD_INT 1
7596: PUSH
7597: LD_INT 2
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: ST_TO_ADDR
7612: GO 7743
7614: LD_INT 1
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7684
7622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 11
7630: PUSH
7631: LD_INT 12
7633: PUSH
7634: LD_INT 13
7636: PUSH
7637: LD_INT 14
7639: PUSH
7640: LD_INT 1
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: LD_INT 3
7648: PUSH
7649: LD_INT 4
7651: PUSH
7652: LD_INT 5
7654: PUSH
7655: LD_INT 21
7657: PUSH
7658: LD_INT 23
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 24
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: ST_TO_ADDR
7682: GO 7743
7684: LD_INT 3
7686: DOUBLE
7687: EQUAL
7688: IFTRUE 7692
7690: GO 7742
7692: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7693: LD_ADDR_VAR 0 3
7697: PUSH
7698: LD_INT 13
7700: PUSH
7701: LD_INT 14
7703: PUSH
7704: LD_INT 2
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 4
7712: PUSH
7713: LD_INT 5
7715: PUSH
7716: LD_INT 21
7718: PUSH
7719: LD_INT 22
7721: PUSH
7722: LD_INT 23
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: ST_TO_ADDR
7740: GO 7743
7742: POP
// result := ( chassis in result ) ;
7743: LD_ADDR_VAR 0 3
7747: PUSH
7748: LD_VAR 0 1
7752: PUSH
7753: LD_VAR 0 3
7757: IN
7758: ST_TO_ADDR
// end ;
7759: LD_VAR 0 3
7763: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7764: LD_INT 0
7766: PPUSH
// if not chassis or not weapon then
7767: LD_VAR 0 1
7771: NOT
7772: PUSH
7773: LD_VAR 0 2
7777: NOT
7778: OR
7779: IFFALSE 7783
// exit ;
7781: GO 8809
// case weapon of us_machine_gun :
7783: LD_VAR 0 2
7787: PUSH
7788: LD_INT 2
7790: DOUBLE
7791: EQUAL
7792: IFTRUE 7796
7794: GO 7826
7796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 1
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_INT 4
7813: PUSH
7814: LD_INT 5
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: ST_TO_ADDR
7824: GO 8793
7826: LD_INT 3
7828: DOUBLE
7829: EQUAL
7830: IFTRUE 7834
7832: GO 7864
7834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7835: LD_ADDR_VAR 0 3
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: LD_INT 3
7848: PUSH
7849: LD_INT 4
7851: PUSH
7852: LD_INT 5
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: ST_TO_ADDR
7862: GO 8793
7864: LD_INT 11
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7902
7872: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7873: LD_ADDR_VAR 0 3
7877: PUSH
7878: LD_INT 1
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 3
7886: PUSH
7887: LD_INT 4
7889: PUSH
7890: LD_INT 5
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: ST_TO_ADDR
7900: GO 8793
7902: LD_INT 4
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 7936
7910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7911: LD_ADDR_VAR 0 3
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: ST_TO_ADDR
7934: GO 8793
7936: LD_INT 5
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 7970
7944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7945: LD_ADDR_VAR 0 3
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: LD_INT 4
7958: PUSH
7959: LD_INT 5
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
7968: GO 8793
7970: LD_INT 9
7972: DOUBLE
7973: EQUAL
7974: IFTRUE 7978
7976: GO 8004
7978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7979: LD_ADDR_VAR 0 3
7983: PUSH
7984: LD_INT 2
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: LD_INT 5
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
8002: GO 8793
8004: LD_INT 7
8006: DOUBLE
8007: EQUAL
8008: IFTRUE 8012
8010: GO 8038
8012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: LD_INT 3
8023: PUSH
8024: LD_INT 4
8026: PUSH
8027: LD_INT 5
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: ST_TO_ADDR
8036: GO 8793
8038: LD_INT 12
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8072
8046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8047: LD_ADDR_VAR 0 3
8051: PUSH
8052: LD_INT 2
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: LD_INT 4
8060: PUSH
8061: LD_INT 5
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: ST_TO_ADDR
8070: GO 8793
8072: LD_INT 13
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8106
8080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_INT 2
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: LD_INT 4
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: ST_TO_ADDR
8104: GO 8793
8106: LD_INT 14
8108: DOUBLE
8109: EQUAL
8110: IFTRUE 8114
8112: GO 8132
8114: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8115: LD_ADDR_VAR 0 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: LD_INT 5
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: ST_TO_ADDR
8130: GO 8793
8132: LD_INT 6
8134: DOUBLE
8135: EQUAL
8136: IFTRUE 8140
8138: GO 8158
8140: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8141: LD_ADDR_VAR 0 3
8145: PUSH
8146: LD_INT 4
8148: PUSH
8149: LD_INT 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
8156: GO 8793
8158: LD_INT 10
8160: DOUBLE
8161: EQUAL
8162: IFTRUE 8166
8164: GO 8184
8166: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8167: LD_ADDR_VAR 0 3
8171: PUSH
8172: LD_INT 4
8174: PUSH
8175: LD_INT 5
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: ST_TO_ADDR
8182: GO 8793
8184: LD_INT 22
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8218
8192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_INT 11
8200: PUSH
8201: LD_INT 12
8203: PUSH
8204: LD_INT 13
8206: PUSH
8207: LD_INT 14
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: ST_TO_ADDR
8216: GO 8793
8218: LD_INT 23
8220: DOUBLE
8221: EQUAL
8222: IFTRUE 8226
8224: GO 8252
8226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8227: LD_ADDR_VAR 0 3
8231: PUSH
8232: LD_INT 11
8234: PUSH
8235: LD_INT 12
8237: PUSH
8238: LD_INT 13
8240: PUSH
8241: LD_INT 14
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
8250: GO 8793
8252: LD_INT 24
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8286
8260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 11
8268: PUSH
8269: LD_INT 12
8271: PUSH
8272: LD_INT 13
8274: PUSH
8275: LD_INT 14
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: ST_TO_ADDR
8284: GO 8793
8286: LD_INT 30
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 8320
8294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 11
8302: PUSH
8303: LD_INT 12
8305: PUSH
8306: LD_INT 13
8308: PUSH
8309: LD_INT 14
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: ST_TO_ADDR
8318: GO 8793
8320: LD_INT 25
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8346
8328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8329: LD_ADDR_VAR 0 3
8333: PUSH
8334: LD_INT 13
8336: PUSH
8337: LD_INT 14
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
8344: GO 8793
8346: LD_INT 27
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8372
8354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_INT 13
8362: PUSH
8363: LD_INT 14
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
8370: GO 8793
8372: LD_INT 28
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8398
8380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8381: LD_ADDR_VAR 0 3
8385: PUSH
8386: LD_INT 13
8388: PUSH
8389: LD_INT 14
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: ST_TO_ADDR
8396: GO 8793
8398: LD_INT 29
8400: DOUBLE
8401: EQUAL
8402: IFTRUE 8406
8404: GO 8424
8406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8407: LD_ADDR_VAR 0 3
8411: PUSH
8412: LD_INT 13
8414: PUSH
8415: LD_INT 14
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: ST_TO_ADDR
8422: GO 8793
8424: LD_INT 31
8426: DOUBLE
8427: EQUAL
8428: IFTRUE 8432
8430: GO 8450
8432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8433: LD_ADDR_VAR 0 3
8437: PUSH
8438: LD_INT 13
8440: PUSH
8441: LD_INT 14
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: ST_TO_ADDR
8448: GO 8793
8450: LD_INT 26
8452: DOUBLE
8453: EQUAL
8454: IFTRUE 8458
8456: GO 8476
8458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8459: LD_ADDR_VAR 0 3
8463: PUSH
8464: LD_INT 13
8466: PUSH
8467: LD_INT 14
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: ST_TO_ADDR
8474: GO 8793
8476: LD_INT 42
8478: DOUBLE
8479: EQUAL
8480: IFTRUE 8484
8482: GO 8510
8484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8485: LD_ADDR_VAR 0 3
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 22
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 24
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: ST_TO_ADDR
8508: GO 8793
8510: LD_INT 43
8512: DOUBLE
8513: EQUAL
8514: IFTRUE 8518
8516: GO 8544
8518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8519: LD_ADDR_VAR 0 3
8523: PUSH
8524: LD_INT 21
8526: PUSH
8527: LD_INT 22
8529: PUSH
8530: LD_INT 23
8532: PUSH
8533: LD_INT 24
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: ST_TO_ADDR
8542: GO 8793
8544: LD_INT 44
8546: DOUBLE
8547: EQUAL
8548: IFTRUE 8552
8550: GO 8578
8552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8553: LD_ADDR_VAR 0 3
8557: PUSH
8558: LD_INT 21
8560: PUSH
8561: LD_INT 22
8563: PUSH
8564: LD_INT 23
8566: PUSH
8567: LD_INT 24
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: ST_TO_ADDR
8576: GO 8793
8578: LD_INT 45
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8612
8586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8587: LD_ADDR_VAR 0 3
8591: PUSH
8592: LD_INT 21
8594: PUSH
8595: LD_INT 22
8597: PUSH
8598: LD_INT 23
8600: PUSH
8601: LD_INT 24
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: ST_TO_ADDR
8610: GO 8793
8612: LD_INT 49
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8646
8620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8621: LD_ADDR_VAR 0 3
8625: PUSH
8626: LD_INT 21
8628: PUSH
8629: LD_INT 22
8631: PUSH
8632: LD_INT 23
8634: PUSH
8635: LD_INT 24
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
8644: GO 8793
8646: LD_INT 51
8648: DOUBLE
8649: EQUAL
8650: IFTRUE 8654
8652: GO 8680
8654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8655: LD_ADDR_VAR 0 3
8659: PUSH
8660: LD_INT 21
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_INT 23
8668: PUSH
8669: LD_INT 24
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: ST_TO_ADDR
8678: GO 8793
8680: LD_INT 52
8682: DOUBLE
8683: EQUAL
8684: IFTRUE 8688
8686: GO 8714
8688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8689: LD_ADDR_VAR 0 3
8693: PUSH
8694: LD_INT 21
8696: PUSH
8697: LD_INT 22
8699: PUSH
8700: LD_INT 23
8702: PUSH
8703: LD_INT 24
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: ST_TO_ADDR
8712: GO 8793
8714: LD_INT 53
8716: DOUBLE
8717: EQUAL
8718: IFTRUE 8722
8720: GO 8740
8722: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8723: LD_ADDR_VAR 0 3
8727: PUSH
8728: LD_INT 23
8730: PUSH
8731: LD_INT 24
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: ST_TO_ADDR
8738: GO 8793
8740: LD_INT 46
8742: DOUBLE
8743: EQUAL
8744: IFTRUE 8748
8746: GO 8766
8748: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8749: LD_ADDR_VAR 0 3
8753: PUSH
8754: LD_INT 23
8756: PUSH
8757: LD_INT 24
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: ST_TO_ADDR
8764: GO 8793
8766: LD_INT 47
8768: DOUBLE
8769: EQUAL
8770: IFTRUE 8774
8772: GO 8792
8774: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8775: LD_ADDR_VAR 0 3
8779: PUSH
8780: LD_INT 23
8782: PUSH
8783: LD_INT 24
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: ST_TO_ADDR
8790: GO 8793
8792: POP
// result := ( chassis in result ) ;
8793: LD_ADDR_VAR 0 3
8797: PUSH
8798: LD_VAR 0 1
8802: PUSH
8803: LD_VAR 0 3
8807: IN
8808: ST_TO_ADDR
// end ;
8809: LD_VAR 0 3
8813: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8814: LD_INT 0
8816: PPUSH
8817: PPUSH
8818: PPUSH
8819: PPUSH
8820: PPUSH
8821: PPUSH
8822: PPUSH
// result := array ;
8823: LD_ADDR_VAR 0 5
8827: PUSH
8828: LD_VAR 0 1
8832: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8833: LD_VAR 0 1
8837: NOT
8838: PUSH
8839: LD_VAR 0 2
8843: NOT
8844: OR
8845: PUSH
8846: LD_VAR 0 3
8850: NOT
8851: OR
8852: PUSH
8853: LD_VAR 0 2
8857: PUSH
8858: LD_VAR 0 1
8862: GREATER
8863: OR
8864: PUSH
8865: LD_VAR 0 3
8869: PUSH
8870: LD_VAR 0 1
8874: GREATER
8875: OR
8876: IFFALSE 8880
// exit ;
8878: GO 9176
// if direction then
8880: LD_VAR 0 4
8884: IFFALSE 8948
// begin d := 1 ;
8886: LD_ADDR_VAR 0 9
8890: PUSH
8891: LD_INT 1
8893: ST_TO_ADDR
// if i_from > i_to then
8894: LD_VAR 0 2
8898: PUSH
8899: LD_VAR 0 3
8903: GREATER
8904: IFFALSE 8930
// length := ( array - i_from ) + i_to else
8906: LD_ADDR_VAR 0 11
8910: PUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_VAR 0 2
8920: MINUS
8921: PUSH
8922: LD_VAR 0 3
8926: PLUS
8927: ST_TO_ADDR
8928: GO 8946
// length := i_to - i_from ;
8930: LD_ADDR_VAR 0 11
8934: PUSH
8935: LD_VAR 0 3
8939: PUSH
8940: LD_VAR 0 2
8944: MINUS
8945: ST_TO_ADDR
// end else
8946: GO 9009
// begin d := - 1 ;
8948: LD_ADDR_VAR 0 9
8952: PUSH
8953: LD_INT 1
8955: NEG
8956: ST_TO_ADDR
// if i_from > i_to then
8957: LD_VAR 0 2
8961: PUSH
8962: LD_VAR 0 3
8966: GREATER
8967: IFFALSE 8987
// length := i_from - i_to else
8969: LD_ADDR_VAR 0 11
8973: PUSH
8974: LD_VAR 0 2
8978: PUSH
8979: LD_VAR 0 3
8983: MINUS
8984: ST_TO_ADDR
8985: GO 9009
// length := ( array - i_to ) + i_from ;
8987: LD_ADDR_VAR 0 11
8991: PUSH
8992: LD_VAR 0 1
8996: PUSH
8997: LD_VAR 0 3
9001: MINUS
9002: PUSH
9003: LD_VAR 0 2
9007: PLUS
9008: ST_TO_ADDR
// end ; if not length then
9009: LD_VAR 0 11
9013: NOT
9014: IFFALSE 9018
// exit ;
9016: GO 9176
// tmp := array ;
9018: LD_ADDR_VAR 0 10
9022: PUSH
9023: LD_VAR 0 1
9027: ST_TO_ADDR
// for i = 1 to length do
9028: LD_ADDR_VAR 0 6
9032: PUSH
9033: DOUBLE
9034: LD_INT 1
9036: DEC
9037: ST_TO_ADDR
9038: LD_VAR 0 11
9042: PUSH
9043: FOR_TO
9044: IFFALSE 9164
// begin for j = 1 to array do
9046: LD_ADDR_VAR 0 7
9050: PUSH
9051: DOUBLE
9052: LD_INT 1
9054: DEC
9055: ST_TO_ADDR
9056: LD_VAR 0 1
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9150
// begin k := j + d ;
9064: LD_ADDR_VAR 0 8
9068: PUSH
9069: LD_VAR 0 7
9073: PUSH
9074: LD_VAR 0 9
9078: PLUS
9079: ST_TO_ADDR
// if k > array then
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 1
9089: GREATER
9090: IFFALSE 9100
// k := 1 ;
9092: LD_ADDR_VAR 0 8
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// if not k then
9100: LD_VAR 0 8
9104: NOT
9105: IFFALSE 9117
// k := array ;
9107: LD_ADDR_VAR 0 8
9111: PUSH
9112: LD_VAR 0 1
9116: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9117: LD_ADDR_VAR 0 10
9121: PUSH
9122: LD_VAR 0 10
9126: PPUSH
9127: LD_VAR 0 8
9131: PPUSH
9132: LD_VAR 0 1
9136: PUSH
9137: LD_VAR 0 7
9141: ARRAY
9142: PPUSH
9143: CALL_OW 1
9147: ST_TO_ADDR
// end ;
9148: GO 9061
9150: POP
9151: POP
// array := tmp ;
9152: LD_ADDR_VAR 0 1
9156: PUSH
9157: LD_VAR 0 10
9161: ST_TO_ADDR
// end ;
9162: GO 9043
9164: POP
9165: POP
// result := array ;
9166: LD_ADDR_VAR 0 5
9170: PUSH
9171: LD_VAR 0 1
9175: ST_TO_ADDR
// end ;
9176: LD_VAR 0 5
9180: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9181: LD_INT 0
9183: PPUSH
9184: PPUSH
// result := 0 ;
9185: LD_ADDR_VAR 0 3
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// if not array or not value in array then
9193: LD_VAR 0 1
9197: NOT
9198: PUSH
9199: LD_VAR 0 2
9203: PUSH
9204: LD_VAR 0 1
9208: IN
9209: NOT
9210: OR
9211: IFFALSE 9215
// exit ;
9213: GO 9269
// for i = 1 to array do
9215: LD_ADDR_VAR 0 4
9219: PUSH
9220: DOUBLE
9221: LD_INT 1
9223: DEC
9224: ST_TO_ADDR
9225: LD_VAR 0 1
9229: PUSH
9230: FOR_TO
9231: IFFALSE 9267
// if value = array [ i ] then
9233: LD_VAR 0 2
9237: PUSH
9238: LD_VAR 0 1
9242: PUSH
9243: LD_VAR 0 4
9247: ARRAY
9248: EQUAL
9249: IFFALSE 9265
// begin result := i ;
9251: LD_ADDR_VAR 0 3
9255: PUSH
9256: LD_VAR 0 4
9260: ST_TO_ADDR
// exit ;
9261: POP
9262: POP
9263: GO 9269
// end ;
9265: GO 9230
9267: POP
9268: POP
// end ;
9269: LD_VAR 0 3
9273: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9274: LD_INT 0
9276: PPUSH
// vc_chassis := chassis ;
9277: LD_ADDR_OWVAR 37
9281: PUSH
9282: LD_VAR 0 1
9286: ST_TO_ADDR
// vc_engine := engine ;
9287: LD_ADDR_OWVAR 39
9291: PUSH
9292: LD_VAR 0 2
9296: ST_TO_ADDR
// vc_control := control ;
9297: LD_ADDR_OWVAR 38
9301: PUSH
9302: LD_VAR 0 3
9306: ST_TO_ADDR
// vc_weapon := weapon ;
9307: LD_ADDR_OWVAR 40
9311: PUSH
9312: LD_VAR 0 4
9316: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9317: LD_ADDR_OWVAR 41
9321: PUSH
9322: LD_VAR 0 5
9326: ST_TO_ADDR
// end ;
9327: LD_VAR 0 6
9331: RET
// export function WantPlant ( unit ) ; var task ; begin
9332: LD_INT 0
9334: PPUSH
9335: PPUSH
// result := false ;
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9344: LD_ADDR_VAR 0 3
9348: PUSH
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 437
9358: ST_TO_ADDR
// if task then
9359: LD_VAR 0 3
9363: IFFALSE 9391
// if task [ 1 ] [ 1 ] = p then
9365: LD_VAR 0 3
9369: PUSH
9370: LD_INT 1
9372: ARRAY
9373: PUSH
9374: LD_INT 1
9376: ARRAY
9377: PUSH
9378: LD_STRING p
9380: EQUAL
9381: IFFALSE 9391
// result := true ;
9383: LD_ADDR_VAR 0 2
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// end ;
9391: LD_VAR 0 2
9395: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9396: LD_INT 0
9398: PPUSH
9399: PPUSH
9400: PPUSH
9401: PPUSH
// if pos < 1 then
9402: LD_VAR 0 2
9406: PUSH
9407: LD_INT 1
9409: LESS
9410: IFFALSE 9414
// exit ;
9412: GO 9717
// if pos = 1 then
9414: LD_VAR 0 2
9418: PUSH
9419: LD_INT 1
9421: EQUAL
9422: IFFALSE 9455
// result := Replace ( arr , pos [ 1 ] , value ) else
9424: LD_ADDR_VAR 0 4
9428: PUSH
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: PPUSH
9443: LD_VAR 0 3
9447: PPUSH
9448: CALL_OW 1
9452: ST_TO_ADDR
9453: GO 9717
// begin tmp := arr ;
9455: LD_ADDR_VAR 0 6
9459: PUSH
9460: LD_VAR 0 1
9464: ST_TO_ADDR
// s_arr := [ tmp ] ;
9465: LD_ADDR_VAR 0 7
9469: PUSH
9470: LD_VAR 0 6
9474: PUSH
9475: EMPTY
9476: LIST
9477: ST_TO_ADDR
// for i = 1 to pos - 1 do
9478: LD_ADDR_VAR 0 5
9482: PUSH
9483: DOUBLE
9484: LD_INT 1
9486: DEC
9487: ST_TO_ADDR
9488: LD_VAR 0 2
9492: PUSH
9493: LD_INT 1
9495: MINUS
9496: PUSH
9497: FOR_TO
9498: IFFALSE 9543
// begin tmp := tmp [ pos [ i ] ] ;
9500: LD_ADDR_VAR 0 6
9504: PUSH
9505: LD_VAR 0 6
9509: PUSH
9510: LD_VAR 0 2
9514: PUSH
9515: LD_VAR 0 5
9519: ARRAY
9520: ARRAY
9521: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9522: LD_ADDR_VAR 0 7
9526: PUSH
9527: LD_VAR 0 7
9531: PUSH
9532: LD_VAR 0 6
9536: PUSH
9537: EMPTY
9538: LIST
9539: ADD
9540: ST_TO_ADDR
// end ;
9541: GO 9497
9543: POP
9544: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9545: LD_ADDR_VAR 0 6
9549: PUSH
9550: LD_VAR 0 6
9554: PPUSH
9555: LD_VAR 0 2
9559: PUSH
9560: LD_VAR 0 2
9564: ARRAY
9565: PPUSH
9566: LD_VAR 0 3
9570: PPUSH
9571: CALL_OW 1
9575: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9576: LD_ADDR_VAR 0 7
9580: PUSH
9581: LD_VAR 0 7
9585: PPUSH
9586: LD_VAR 0 7
9590: PPUSH
9591: LD_VAR 0 6
9595: PPUSH
9596: CALL_OW 1
9600: ST_TO_ADDR
// for i = s_arr downto 2 do
9601: LD_ADDR_VAR 0 5
9605: PUSH
9606: DOUBLE
9607: LD_VAR 0 7
9611: INC
9612: ST_TO_ADDR
9613: LD_INT 2
9615: PUSH
9616: FOR_DOWNTO
9617: IFFALSE 9701
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9619: LD_ADDR_VAR 0 6
9623: PUSH
9624: LD_VAR 0 7
9628: PUSH
9629: LD_VAR 0 5
9633: PUSH
9634: LD_INT 1
9636: MINUS
9637: ARRAY
9638: PPUSH
9639: LD_VAR 0 2
9643: PUSH
9644: LD_VAR 0 5
9648: PUSH
9649: LD_INT 1
9651: MINUS
9652: ARRAY
9653: PPUSH
9654: LD_VAR 0 7
9658: PUSH
9659: LD_VAR 0 5
9663: ARRAY
9664: PPUSH
9665: CALL_OW 1
9669: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9670: LD_ADDR_VAR 0 7
9674: PUSH
9675: LD_VAR 0 7
9679: PPUSH
9680: LD_VAR 0 5
9684: PUSH
9685: LD_INT 1
9687: MINUS
9688: PPUSH
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 1
9698: ST_TO_ADDR
// end ;
9699: GO 9616
9701: POP
9702: POP
// result := s_arr [ 1 ] ;
9703: LD_ADDR_VAR 0 4
9707: PUSH
9708: LD_VAR 0 7
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: ST_TO_ADDR
// end ; end ;
9717: LD_VAR 0 4
9721: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9722: LD_INT 0
9724: PPUSH
9725: PPUSH
// if not list then
9726: LD_VAR 0 1
9730: NOT
9731: IFFALSE 9735
// exit ;
9733: GO 9826
// i := list [ pos1 ] ;
9735: LD_ADDR_VAR 0 5
9739: PUSH
9740: LD_VAR 0 1
9744: PUSH
9745: LD_VAR 0 2
9749: ARRAY
9750: ST_TO_ADDR
// if not i then
9751: LD_VAR 0 5
9755: NOT
9756: IFFALSE 9760
// exit ;
9758: GO 9826
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9760: LD_ADDR_VAR 0 1
9764: PUSH
9765: LD_VAR 0 1
9769: PPUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: LD_VAR 0 1
9779: PUSH
9780: LD_VAR 0 3
9784: ARRAY
9785: PPUSH
9786: CALL_OW 1
9790: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9791: LD_ADDR_VAR 0 1
9795: PUSH
9796: LD_VAR 0 1
9800: PPUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_VAR 0 5
9810: PPUSH
9811: CALL_OW 1
9815: ST_TO_ADDR
// result := list ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_VAR 0 1
9825: ST_TO_ADDR
// end ;
9826: LD_VAR 0 4
9830: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9831: LD_INT 0
9833: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9834: LD_ADDR_VAR 0 5
9838: PUSH
9839: LD_VAR 0 1
9843: PPUSH
9844: CALL_OW 250
9848: PPUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 251
9858: PPUSH
9859: LD_VAR 0 2
9863: PPUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_VAR 0 4
9873: PPUSH
9874: CALL 9884 0 5
9878: ST_TO_ADDR
// end ;
9879: LD_VAR 0 5
9883: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9884: LD_INT 0
9886: PPUSH
9887: PPUSH
9888: PPUSH
9889: PPUSH
// if not list then
9890: LD_VAR 0 3
9894: NOT
9895: IFFALSE 9899
// exit ;
9897: GO 10287
// result := [ ] ;
9899: LD_ADDR_VAR 0 6
9903: PUSH
9904: EMPTY
9905: ST_TO_ADDR
// for i in list do
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_VAR 0 3
9915: PUSH
9916: FOR_IN
9917: IFFALSE 10119
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9919: LD_ADDR_VAR 0 9
9923: PUSH
9924: LD_VAR 0 7
9928: PPUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: LD_VAR 0 2
9938: PPUSH
9939: CALL_OW 297
9943: ST_TO_ADDR
// if not result then
9944: LD_VAR 0 6
9948: NOT
9949: IFFALSE 9975
// result := [ [ i , tmp ] ] else
9951: LD_ADDR_VAR 0 6
9955: PUSH
9956: LD_VAR 0 7
9960: PUSH
9961: LD_VAR 0 9
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: ST_TO_ADDR
9973: GO 10117
// begin if result [ result ] [ 2 ] < tmp then
9975: LD_VAR 0 6
9979: PUSH
9980: LD_VAR 0 6
9984: ARRAY
9985: PUSH
9986: LD_INT 2
9988: ARRAY
9989: PUSH
9990: LD_VAR 0 9
9994: LESS
9995: IFFALSE 10037
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9997: LD_ADDR_VAR 0 6
10001: PUSH
10002: LD_VAR 0 6
10006: PPUSH
10007: LD_VAR 0 6
10011: PUSH
10012: LD_INT 1
10014: PLUS
10015: PPUSH
10016: LD_VAR 0 7
10020: PUSH
10021: LD_VAR 0 9
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PPUSH
10030: CALL_OW 2
10034: ST_TO_ADDR
10035: GO 10117
// for j = 1 to result do
10037: LD_ADDR_VAR 0 8
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_VAR 0 6
10051: PUSH
10052: FOR_TO
10053: IFFALSE 10115
// begin if tmp < result [ j ] [ 2 ] then
10055: LD_VAR 0 9
10059: PUSH
10060: LD_VAR 0 6
10064: PUSH
10065: LD_VAR 0 8
10069: ARRAY
10070: PUSH
10071: LD_INT 2
10073: ARRAY
10074: LESS
10075: IFFALSE 10113
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10077: LD_ADDR_VAR 0 6
10081: PUSH
10082: LD_VAR 0 6
10086: PPUSH
10087: LD_VAR 0 8
10091: PPUSH
10092: LD_VAR 0 7
10096: PUSH
10097: LD_VAR 0 9
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL_OW 2
10110: ST_TO_ADDR
// break ;
10111: GO 10115
// end ; end ;
10113: GO 10052
10115: POP
10116: POP
// end ; end ;
10117: GO 9916
10119: POP
10120: POP
// if result and not asc then
10121: LD_VAR 0 6
10125: PUSH
10126: LD_VAR 0 4
10130: NOT
10131: AND
10132: IFFALSE 10207
// begin tmp := result ;
10134: LD_ADDR_VAR 0 9
10138: PUSH
10139: LD_VAR 0 6
10143: ST_TO_ADDR
// for i = tmp downto 1 do
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: DOUBLE
10150: LD_VAR 0 9
10154: INC
10155: ST_TO_ADDR
10156: LD_INT 1
10158: PUSH
10159: FOR_DOWNTO
10160: IFFALSE 10205
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10162: LD_ADDR_VAR 0 6
10166: PUSH
10167: LD_VAR 0 6
10171: PPUSH
10172: LD_VAR 0 9
10176: PUSH
10177: LD_VAR 0 7
10181: MINUS
10182: PUSH
10183: LD_INT 1
10185: PLUS
10186: PPUSH
10187: LD_VAR 0 9
10191: PUSH
10192: LD_VAR 0 7
10196: ARRAY
10197: PPUSH
10198: CALL_OW 1
10202: ST_TO_ADDR
10203: GO 10159
10205: POP
10206: POP
// end ; tmp := [ ] ;
10207: LD_ADDR_VAR 0 9
10211: PUSH
10212: EMPTY
10213: ST_TO_ADDR
// if mode then
10214: LD_VAR 0 5
10218: IFFALSE 10287
// begin for i = 1 to result do
10220: LD_ADDR_VAR 0 7
10224: PUSH
10225: DOUBLE
10226: LD_INT 1
10228: DEC
10229: ST_TO_ADDR
10230: LD_VAR 0 6
10234: PUSH
10235: FOR_TO
10236: IFFALSE 10275
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10238: LD_ADDR_VAR 0 9
10242: PUSH
10243: LD_VAR 0 9
10247: PPUSH
10248: LD_VAR 0 7
10252: PPUSH
10253: LD_VAR 0 6
10257: PUSH
10258: LD_VAR 0 7
10262: ARRAY
10263: PUSH
10264: LD_INT 1
10266: ARRAY
10267: PPUSH
10268: CALL_OW 1
10272: ST_TO_ADDR
10273: GO 10235
10275: POP
10276: POP
// result := tmp ;
10277: LD_ADDR_VAR 0 6
10281: PUSH
10282: LD_VAR 0 9
10286: ST_TO_ADDR
// end ; end ;
10287: LD_VAR 0 6
10291: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10292: LD_INT 0
10294: PPUSH
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
10299: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10300: LD_ADDR_VAR 0 5
10304: PUSH
10305: LD_INT 0
10307: PUSH
10308: LD_INT 0
10310: PUSH
10311: LD_INT 0
10313: PUSH
10314: EMPTY
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: ST_TO_ADDR
// if not x or not y then
10322: LD_VAR 0 2
10326: NOT
10327: PUSH
10328: LD_VAR 0 3
10332: NOT
10333: OR
10334: IFFALSE 10338
// exit ;
10336: GO 11984
// if not range then
10338: LD_VAR 0 4
10342: NOT
10343: IFFALSE 10353
// range := 10 ;
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: LD_INT 10
10352: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10353: LD_ADDR_VAR 0 8
10357: PUSH
10358: LD_INT 81
10360: PUSH
10361: LD_VAR 0 1
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 92
10372: PUSH
10373: LD_VAR 0 2
10377: PUSH
10378: LD_VAR 0 3
10382: PUSH
10383: LD_VAR 0 4
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 3
10396: PUSH
10397: LD_INT 21
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: PPUSH
10416: CALL_OW 69
10420: ST_TO_ADDR
// if not tmp then
10421: LD_VAR 0 8
10425: NOT
10426: IFFALSE 10430
// exit ;
10428: GO 11984
// for i in tmp do
10430: LD_ADDR_VAR 0 6
10434: PUSH
10435: LD_VAR 0 8
10439: PUSH
10440: FOR_IN
10441: IFFALSE 11959
// begin points := [ 0 , 0 , 0 ] ;
10443: LD_ADDR_VAR 0 9
10447: PUSH
10448: LD_INT 0
10450: PUSH
10451: LD_INT 0
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: ST_TO_ADDR
// bpoints := 1 ;
10462: LD_ADDR_VAR 0 10
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10470: LD_VAR 0 6
10474: PPUSH
10475: CALL_OW 247
10479: PUSH
10480: LD_INT 1
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 11066
10488: POP
// begin if GetClass ( i ) = 1 then
10489: LD_VAR 0 6
10493: PPUSH
10494: CALL_OW 257
10498: PUSH
10499: LD_INT 1
10501: EQUAL
10502: IFFALSE 10523
// points := [ 10 , 5 , 3 ] ;
10504: LD_ADDR_VAR 0 9
10508: PUSH
10509: LD_INT 10
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 257
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: LD_INT 3
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: IN
10547: IFFALSE 10568
// points := [ 3 , 2 , 1 ] ;
10549: LD_ADDR_VAR 0 9
10553: PUSH
10554: LD_INT 3
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10568: LD_VAR 0 6
10572: PPUSH
10573: CALL_OW 257
10577: PUSH
10578: LD_INT 5
10580: EQUAL
10581: IFFALSE 10602
// points := [ 130 , 5 , 2 ] ;
10583: LD_ADDR_VAR 0 9
10587: PUSH
10588: LD_INT 130
10590: PUSH
10591: LD_INT 5
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10602: LD_VAR 0 6
10606: PPUSH
10607: CALL_OW 257
10611: PUSH
10612: LD_INT 8
10614: EQUAL
10615: IFFALSE 10636
// points := [ 35 , 35 , 30 ] ;
10617: LD_ADDR_VAR 0 9
10621: PUSH
10622: LD_INT 35
10624: PUSH
10625: LD_INT 35
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10636: LD_VAR 0 6
10640: PPUSH
10641: CALL_OW 257
10645: PUSH
10646: LD_INT 9
10648: EQUAL
10649: IFFALSE 10670
// points := [ 20 , 55 , 40 ] ;
10651: LD_ADDR_VAR 0 9
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 55
10661: PUSH
10662: LD_INT 40
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10670: LD_VAR 0 6
10674: PPUSH
10675: CALL_OW 257
10679: PUSH
10680: LD_INT 12
10682: PUSH
10683: LD_INT 16
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: IN
10690: IFFALSE 10711
// points := [ 5 , 3 , 2 ] ;
10692: LD_ADDR_VAR 0 9
10696: PUSH
10697: LD_INT 5
10699: PUSH
10700: LD_INT 3
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10711: LD_VAR 0 6
10715: PPUSH
10716: CALL_OW 257
10720: PUSH
10721: LD_INT 17
10723: EQUAL
10724: IFFALSE 10745
// points := [ 100 , 50 , 75 ] ;
10726: LD_ADDR_VAR 0 9
10730: PUSH
10731: LD_INT 100
10733: PUSH
10734: LD_INT 50
10736: PUSH
10737: LD_INT 75
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10745: LD_VAR 0 6
10749: PPUSH
10750: CALL_OW 257
10754: PUSH
10755: LD_INT 15
10757: EQUAL
10758: IFFALSE 10779
// points := [ 10 , 5 , 3 ] ;
10760: LD_ADDR_VAR 0 9
10764: PUSH
10765: LD_INT 10
10767: PUSH
10768: LD_INT 5
10770: PUSH
10771: LD_INT 3
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10779: LD_VAR 0 6
10783: PPUSH
10784: CALL_OW 257
10788: PUSH
10789: LD_INT 14
10791: EQUAL
10792: IFFALSE 10813
// points := [ 10 , 0 , 0 ] ;
10794: LD_ADDR_VAR 0 9
10798: PUSH
10799: LD_INT 10
10801: PUSH
10802: LD_INT 0
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10813: LD_VAR 0 6
10817: PPUSH
10818: CALL_OW 257
10822: PUSH
10823: LD_INT 11
10825: EQUAL
10826: IFFALSE 10847
// points := [ 30 , 10 , 5 ] ;
10828: LD_ADDR_VAR 0 9
10832: PUSH
10833: LD_INT 30
10835: PUSH
10836: LD_INT 10
10838: PUSH
10839: LD_INT 5
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10847: LD_VAR 0 1
10851: PPUSH
10852: LD_INT 5
10854: PPUSH
10855: CALL_OW 321
10859: PUSH
10860: LD_INT 2
10862: EQUAL
10863: IFFALSE 10880
// bpoints := bpoints * 1.8 ;
10865: LD_ADDR_VAR 0 10
10869: PUSH
10870: LD_VAR 0 10
10874: PUSH
10875: LD_REAL  1.80000000000000E+0000
10878: MUL
10879: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10880: LD_VAR 0 6
10884: PPUSH
10885: CALL_OW 257
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: LD_INT 2
10895: PUSH
10896: LD_INT 3
10898: PUSH
10899: LD_INT 4
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: IN
10908: PUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: LD_INT 51
10916: PPUSH
10917: CALL_OW 321
10921: PUSH
10922: LD_INT 2
10924: EQUAL
10925: AND
10926: IFFALSE 10943
// bpoints := bpoints * 1.2 ;
10928: LD_ADDR_VAR 0 10
10932: PUSH
10933: LD_VAR 0 10
10937: PUSH
10938: LD_REAL  1.20000000000000E+0000
10941: MUL
10942: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10943: LD_VAR 0 6
10947: PPUSH
10948: CALL_OW 257
10952: PUSH
10953: LD_INT 5
10955: PUSH
10956: LD_INT 7
10958: PUSH
10959: LD_INT 9
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: IN
10967: PUSH
10968: LD_VAR 0 1
10972: PPUSH
10973: LD_INT 52
10975: PPUSH
10976: CALL_OW 321
10980: PUSH
10981: LD_INT 2
10983: EQUAL
10984: AND
10985: IFFALSE 11002
// bpoints := bpoints * 1.5 ;
10987: LD_ADDR_VAR 0 10
10991: PUSH
10992: LD_VAR 0 10
10996: PUSH
10997: LD_REAL  1.50000000000000E+0000
11000: MUL
11001: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_INT 66
11009: PPUSH
11010: CALL_OW 321
11014: PUSH
11015: LD_INT 2
11017: EQUAL
11018: IFFALSE 11035
// bpoints := bpoints * 1.1 ;
11020: LD_ADDR_VAR 0 10
11024: PUSH
11025: LD_VAR 0 10
11029: PUSH
11030: LD_REAL  1.10000000000000E+0000
11033: MUL
11034: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11035: LD_ADDR_VAR 0 10
11039: PUSH
11040: LD_VAR 0 10
11044: PUSH
11045: LD_VAR 0 6
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 259
11057: PUSH
11058: LD_REAL  1.15000000000000E+0000
11061: MUL
11062: MUL
11063: ST_TO_ADDR
// end ; unit_vehicle :
11064: GO 11888
11066: LD_INT 2
11068: DOUBLE
11069: EQUAL
11070: IFTRUE 11074
11072: GO 11876
11074: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11075: LD_VAR 0 6
11079: PPUSH
11080: CALL_OW 264
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 42
11090: PUSH
11091: LD_INT 24
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: IN
11099: IFFALSE 11120
// points := [ 25 , 5 , 3 ] ;
11101: LD_ADDR_VAR 0 9
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11120: LD_VAR 0 6
11124: PPUSH
11125: CALL_OW 264
11129: PUSH
11130: LD_INT 4
11132: PUSH
11133: LD_INT 43
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: IN
11144: IFFALSE 11165
// points := [ 40 , 15 , 5 ] ;
11146: LD_ADDR_VAR 0 9
11150: PUSH
11151: LD_INT 40
11153: PUSH
11154: LD_INT 15
11156: PUSH
11157: LD_INT 5
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11165: LD_VAR 0 6
11169: PPUSH
11170: CALL_OW 264
11174: PUSH
11175: LD_INT 3
11177: PUSH
11178: LD_INT 23
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: IN
11185: IFFALSE 11206
// points := [ 7 , 25 , 8 ] ;
11187: LD_ADDR_VAR 0 9
11191: PUSH
11192: LD_INT 7
11194: PUSH
11195: LD_INT 25
11197: PUSH
11198: LD_INT 8
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11206: LD_VAR 0 6
11210: PPUSH
11211: CALL_OW 264
11215: PUSH
11216: LD_INT 5
11218: PUSH
11219: LD_INT 27
11221: PUSH
11222: LD_INT 44
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: IN
11230: IFFALSE 11251
// points := [ 14 , 50 , 16 ] ;
11232: LD_ADDR_VAR 0 9
11236: PUSH
11237: LD_INT 14
11239: PUSH
11240: LD_INT 50
11242: PUSH
11243: LD_INT 16
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11251: LD_VAR 0 6
11255: PPUSH
11256: CALL_OW 264
11260: PUSH
11261: LD_INT 6
11263: PUSH
11264: LD_INT 46
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: IN
11271: IFFALSE 11292
// points := [ 32 , 120 , 70 ] ;
11273: LD_ADDR_VAR 0 9
11277: PUSH
11278: LD_INT 32
11280: PUSH
11281: LD_INT 120
11283: PUSH
11284: LD_INT 70
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
11292: LD_VAR 0 6
11296: PPUSH
11297: CALL_OW 264
11301: PUSH
11302: LD_INT 7
11304: PUSH
11305: LD_INT 28
11307: PUSH
11308: LD_INT 45
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: IN
11316: IFFALSE 11337
// points := [ 35 , 20 , 45 ] ;
11318: LD_ADDR_VAR 0 9
11322: PUSH
11323: LD_INT 35
11325: PUSH
11326: LD_INT 20
11328: PUSH
11329: LD_INT 45
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11337: LD_VAR 0 6
11341: PPUSH
11342: CALL_OW 264
11346: PUSH
11347: LD_INT 47
11349: PUSH
11350: EMPTY
11351: LIST
11352: IN
11353: IFFALSE 11374
// points := [ 67 , 45 , 75 ] ;
11355: LD_ADDR_VAR 0 9
11359: PUSH
11360: LD_INT 67
11362: PUSH
11363: LD_INT 45
11365: PUSH
11366: LD_INT 75
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11374: LD_VAR 0 6
11378: PPUSH
11379: CALL_OW 264
11383: PUSH
11384: LD_INT 26
11386: PUSH
11387: EMPTY
11388: LIST
11389: IN
11390: IFFALSE 11411
// points := [ 120 , 30 , 80 ] ;
11392: LD_ADDR_VAR 0 9
11396: PUSH
11397: LD_INT 120
11399: PUSH
11400: LD_INT 30
11402: PUSH
11403: LD_INT 80
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11411: LD_VAR 0 6
11415: PPUSH
11416: CALL_OW 264
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: EMPTY
11425: LIST
11426: IN
11427: IFFALSE 11448
// points := [ 40 , 1 , 1 ] ;
11429: LD_ADDR_VAR 0 9
11433: PUSH
11434: LD_INT 40
11436: PUSH
11437: LD_INT 1
11439: PUSH
11440: LD_INT 1
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11448: LD_VAR 0 6
11452: PPUSH
11453: CALL_OW 264
11457: PUSH
11458: LD_INT 29
11460: PUSH
11461: EMPTY
11462: LIST
11463: IN
11464: IFFALSE 11485
// points := [ 70 , 200 , 400 ] ;
11466: LD_ADDR_VAR 0 9
11470: PUSH
11471: LD_INT 70
11473: PUSH
11474: LD_INT 200
11476: PUSH
11477: LD_INT 400
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11485: LD_VAR 0 6
11489: PPUSH
11490: CALL_OW 264
11494: PUSH
11495: LD_INT 14
11497: PUSH
11498: LD_INT 53
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: IN
11505: IFFALSE 11526
// points := [ 40 , 10 , 20 ] ;
11507: LD_ADDR_VAR 0 9
11511: PUSH
11512: LD_INT 40
11514: PUSH
11515: LD_INT 10
11517: PUSH
11518: LD_INT 20
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11526: LD_VAR 0 6
11530: PPUSH
11531: CALL_OW 264
11535: PUSH
11536: LD_INT 9
11538: PUSH
11539: EMPTY
11540: LIST
11541: IN
11542: IFFALSE 11563
// points := [ 5 , 70 , 20 ] ;
11544: LD_ADDR_VAR 0 9
11548: PUSH
11549: LD_INT 5
11551: PUSH
11552: LD_INT 70
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11563: LD_VAR 0 6
11567: PPUSH
11568: CALL_OW 264
11572: PUSH
11573: LD_INT 10
11575: PUSH
11576: EMPTY
11577: LIST
11578: IN
11579: IFFALSE 11600
// points := [ 35 , 110 , 70 ] ;
11581: LD_ADDR_VAR 0 9
11585: PUSH
11586: LD_INT 35
11588: PUSH
11589: LD_INT 110
11591: PUSH
11592: LD_INT 70
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11600: LD_VAR 0 6
11604: PPUSH
11605: CALL_OW 265
11609: PUSH
11610: LD_INT 25
11612: EQUAL
11613: IFFALSE 11634
// points := [ 80 , 65 , 100 ] ;
11615: LD_ADDR_VAR 0 9
11619: PUSH
11620: LD_INT 80
11622: PUSH
11623: LD_INT 65
11625: PUSH
11626: LD_INT 100
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11634: LD_VAR 0 6
11638: PPUSH
11639: CALL_OW 263
11643: PUSH
11644: LD_INT 1
11646: EQUAL
11647: IFFALSE 11682
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11649: LD_ADDR_VAR 0 10
11653: PUSH
11654: LD_VAR 0 10
11658: PUSH
11659: LD_VAR 0 6
11663: PPUSH
11664: CALL_OW 311
11668: PPUSH
11669: LD_INT 3
11671: PPUSH
11672: CALL_OW 259
11676: PUSH
11677: LD_INT 4
11679: MUL
11680: MUL
11681: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11682: LD_VAR 0 6
11686: PPUSH
11687: CALL_OW 263
11691: PUSH
11692: LD_INT 2
11694: EQUAL
11695: IFFALSE 11746
// begin j := IsControledBy ( i ) ;
11697: LD_ADDR_VAR 0 7
11701: PUSH
11702: LD_VAR 0 6
11706: PPUSH
11707: CALL_OW 312
11711: ST_TO_ADDR
// if j then
11712: LD_VAR 0 7
11716: IFFALSE 11746
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11718: LD_ADDR_VAR 0 10
11722: PUSH
11723: LD_VAR 0 10
11727: PUSH
11728: LD_VAR 0 7
11732: PPUSH
11733: LD_INT 3
11735: PPUSH
11736: CALL_OW 259
11740: PUSH
11741: LD_INT 3
11743: MUL
11744: MUL
11745: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11746: LD_VAR 0 6
11750: PPUSH
11751: CALL_OW 264
11755: PUSH
11756: LD_INT 5
11758: PUSH
11759: LD_INT 6
11761: PUSH
11762: LD_INT 46
11764: PUSH
11765: LD_INT 44
11767: PUSH
11768: LD_INT 47
11770: PUSH
11771: LD_INT 45
11773: PUSH
11774: LD_INT 28
11776: PUSH
11777: LD_INT 7
11779: PUSH
11780: LD_INT 27
11782: PUSH
11783: LD_INT 29
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: IN
11798: PUSH
11799: LD_VAR 0 1
11803: PPUSH
11804: LD_INT 52
11806: PPUSH
11807: CALL_OW 321
11811: PUSH
11812: LD_INT 2
11814: EQUAL
11815: AND
11816: IFFALSE 11833
// bpoints := bpoints * 1.2 ;
11818: LD_ADDR_VAR 0 10
11822: PUSH
11823: LD_VAR 0 10
11827: PUSH
11828: LD_REAL  1.20000000000000E+0000
11831: MUL
11832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11833: LD_VAR 0 6
11837: PPUSH
11838: CALL_OW 264
11842: PUSH
11843: LD_INT 6
11845: PUSH
11846: LD_INT 46
11848: PUSH
11849: LD_INT 47
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: IN
11857: IFFALSE 11874
// bpoints := bpoints * 1.2 ;
11859: LD_ADDR_VAR 0 10
11863: PUSH
11864: LD_VAR 0 10
11868: PUSH
11869: LD_REAL  1.20000000000000E+0000
11872: MUL
11873: ST_TO_ADDR
// end ; unit_building :
11874: GO 11888
11876: LD_INT 3
11878: DOUBLE
11879: EQUAL
11880: IFTRUE 11884
11882: GO 11887
11884: POP
// ; end ;
11885: GO 11888
11887: POP
// for j = 1 to 3 do
11888: LD_ADDR_VAR 0 7
11892: PUSH
11893: DOUBLE
11894: LD_INT 1
11896: DEC
11897: ST_TO_ADDR
11898: LD_INT 3
11900: PUSH
11901: FOR_TO
11902: IFFALSE 11955
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11904: LD_ADDR_VAR 0 5
11908: PUSH
11909: LD_VAR 0 5
11913: PPUSH
11914: LD_VAR 0 7
11918: PPUSH
11919: LD_VAR 0 5
11923: PUSH
11924: LD_VAR 0 7
11928: ARRAY
11929: PUSH
11930: LD_VAR 0 9
11934: PUSH
11935: LD_VAR 0 7
11939: ARRAY
11940: PUSH
11941: LD_VAR 0 10
11945: MUL
11946: PLUS
11947: PPUSH
11948: CALL_OW 1
11952: ST_TO_ADDR
11953: GO 11901
11955: POP
11956: POP
// end ;
11957: GO 10440
11959: POP
11960: POP
// result := Replace ( result , 4 , tmp ) ;
11961: LD_ADDR_VAR 0 5
11965: PUSH
11966: LD_VAR 0 5
11970: PPUSH
11971: LD_INT 4
11973: PPUSH
11974: LD_VAR 0 8
11978: PPUSH
11979: CALL_OW 1
11983: ST_TO_ADDR
// end ;
11984: LD_VAR 0 5
11988: RET
// export function DangerAtRange ( unit , range ) ; begin
11989: LD_INT 0
11991: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11992: LD_ADDR_VAR 0 3
11996: PUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 255
12006: PPUSH
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 250
12016: PPUSH
12017: LD_VAR 0 1
12021: PPUSH
12022: CALL_OW 251
12026: PPUSH
12027: LD_VAR 0 2
12031: PPUSH
12032: CALL 10292 0 4
12036: ST_TO_ADDR
// end ;
12037: LD_VAR 0 3
12041: RET
// export function DangerInArea ( side , area ) ; begin
12042: LD_INT 0
12044: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: LD_INT 81
12057: PUSH
12058: LD_VAR 0 1
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 70
12071: ST_TO_ADDR
// end ;
12072: LD_VAR 0 3
12076: RET
// export function IsExtension ( b ) ; begin
12077: LD_INT 0
12079: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 23
12092: PUSH
12093: LD_INT 20
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_INT 17
12101: PUSH
12102: LD_INT 24
12104: PUSH
12105: LD_INT 21
12107: PUSH
12108: LD_INT 19
12110: PUSH
12111: LD_INT 16
12113: PUSH
12114: LD_INT 25
12116: PUSH
12117: LD_INT 18
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: IN
12132: ST_TO_ADDR
// end ;
12133: LD_VAR 0 2
12137: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
12138: LD_INT 0
12140: PPUSH
12141: PPUSH
12142: PPUSH
// result := [ ] ;
12143: LD_ADDR_VAR 0 3
12147: PUSH
12148: EMPTY
12149: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12150: LD_ADDR_VAR 0 4
12154: PUSH
12155: LD_VAR 0 2
12159: PPUSH
12160: LD_INT 21
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 70
12174: ST_TO_ADDR
// if not tmp then
12175: LD_VAR 0 4
12179: NOT
12180: IFFALSE 12184
// exit ;
12182: GO 12242
// for i in tmp do
12184: LD_ADDR_VAR 0 5
12188: PUSH
12189: LD_VAR 0 4
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12230
// if GetBase ( i ) <> base then
12197: LD_VAR 0 5
12201: PPUSH
12202: CALL_OW 274
12206: PUSH
12207: LD_VAR 0 1
12211: NONEQUAL
12212: IFFALSE 12228
// ComLinkToBase ( base , i ) ;
12214: LD_VAR 0 1
12218: PPUSH
12219: LD_VAR 0 5
12223: PPUSH
12224: CALL_OW 169
12228: GO 12194
12230: POP
12231: POP
// result := tmp ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: LD_VAR 0 4
12241: ST_TO_ADDR
// end ;
12242: LD_VAR 0 3
12246: RET
// export function ComComplete ( unit , b ) ; var i ; begin
12247: LD_INT 0
12249: PPUSH
12250: PPUSH
// if BuildingStatus ( b ) = bs_build then
12251: LD_VAR 0 2
12255: PPUSH
12256: CALL_OW 461
12260: PUSH
12261: LD_INT 1
12263: EQUAL
12264: IFFALSE 12324
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12266: LD_VAR 0 1
12270: PPUSH
12271: LD_STRING h
12273: PUSH
12274: LD_VAR 0 2
12278: PPUSH
12279: CALL_OW 250
12283: PUSH
12284: LD_VAR 0 2
12288: PPUSH
12289: CALL_OW 251
12293: PUSH
12294: LD_VAR 0 2
12298: PUSH
12299: LD_INT 0
12301: PUSH
12302: LD_INT 0
12304: PUSH
12305: LD_INT 0
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: PPUSH
12320: CALL_OW 446
// end ;
12324: LD_VAR 0 3
12328: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12329: LD_INT 0
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
12337: LD_VAR 0 1
12341: NOT
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 263
12352: PUSH
12353: LD_INT 2
12355: EQUAL
12356: NOT
12357: OR
12358: IFFALSE 12362
// exit ;
12360: GO 12678
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: LD_INT 22
12369: PUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 255
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: LD_INT 30
12389: PUSH
12390: LD_INT 36
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 34
12399: PUSH
12400: LD_INT 31
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PPUSH
12416: CALL_OW 69
12420: ST_TO_ADDR
// if not tmp then
12421: LD_VAR 0 6
12425: NOT
12426: IFFALSE 12430
// exit ;
12428: GO 12678
// result := [ ] ;
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: EMPTY
12436: ST_TO_ADDR
// for i in tmp do
12437: LD_ADDR_VAR 0 3
12441: PUSH
12442: LD_VAR 0 6
12446: PUSH
12447: FOR_IN
12448: IFFALSE 12519
// begin t := UnitsInside ( i ) ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: CALL_OW 313
12464: ST_TO_ADDR
// if t then
12465: LD_VAR 0 4
12469: IFFALSE 12517
// for j in t do
12471: LD_ADDR_VAR 0 7
12475: PUSH
12476: LD_VAR 0 4
12480: PUSH
12481: FOR_IN
12482: IFFALSE 12515
// result := Insert ( result , result + 1 , j ) ;
12484: LD_ADDR_VAR 0 2
12488: PUSH
12489: LD_VAR 0 2
12493: PPUSH
12494: LD_VAR 0 2
12498: PUSH
12499: LD_INT 1
12501: PLUS
12502: PPUSH
12503: LD_VAR 0 7
12507: PPUSH
12508: CALL_OW 2
12512: ST_TO_ADDR
12513: GO 12481
12515: POP
12516: POP
// end ;
12517: GO 12447
12519: POP
12520: POP
// if not result then
12521: LD_VAR 0 2
12525: NOT
12526: IFFALSE 12530
// exit ;
12528: GO 12678
// mech := result [ 1 ] ;
12530: LD_ADDR_VAR 0 5
12534: PUSH
12535: LD_VAR 0 2
12539: PUSH
12540: LD_INT 1
12542: ARRAY
12543: ST_TO_ADDR
// if result > 1 then
12544: LD_VAR 0 2
12548: PUSH
12549: LD_INT 1
12551: GREATER
12552: IFFALSE 12664
// for i = 2 to result do
12554: LD_ADDR_VAR 0 3
12558: PUSH
12559: DOUBLE
12560: LD_INT 2
12562: DEC
12563: ST_TO_ADDR
12564: LD_VAR 0 2
12568: PUSH
12569: FOR_TO
12570: IFFALSE 12662
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 2
12581: PUSH
12582: LD_VAR 0 3
12586: ARRAY
12587: PPUSH
12588: LD_INT 3
12590: PPUSH
12591: CALL_OW 259
12595: PUSH
12596: LD_VAR 0 2
12600: PUSH
12601: LD_VAR 0 3
12605: ARRAY
12606: PPUSH
12607: CALL_OW 432
12611: MINUS
12612: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12613: LD_VAR 0 4
12617: PUSH
12618: LD_VAR 0 5
12622: PPUSH
12623: LD_INT 3
12625: PPUSH
12626: CALL_OW 259
12630: PUSH
12631: LD_VAR 0 5
12635: PPUSH
12636: CALL_OW 432
12640: MINUS
12641: GREATEREQUAL
12642: IFFALSE 12660
// mech := result [ i ] ;
12644: LD_ADDR_VAR 0 5
12648: PUSH
12649: LD_VAR 0 2
12653: PUSH
12654: LD_VAR 0 3
12658: ARRAY
12659: ST_TO_ADDR
// end ;
12660: GO 12569
12662: POP
12663: POP
// ComLinkTo ( vehicle , mech ) ;
12664: LD_VAR 0 1
12668: PPUSH
12669: LD_VAR 0 5
12673: PPUSH
12674: CALL_OW 135
// end ;
12678: LD_VAR 0 2
12682: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12683: LD_INT 0
12685: PPUSH
12686: PPUSH
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
// result := [ ] ;
12698: LD_ADDR_VAR 0 7
12702: PUSH
12703: EMPTY
12704: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 266
12714: PUSH
12715: LD_INT 0
12717: PUSH
12718: LD_INT 1
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: IN
12725: NOT
12726: IFFALSE 12730
// exit ;
12728: GO 14361
// if name then
12730: LD_VAR 0 3
12734: IFFALSE 12750
// SetBName ( base_dep , name ) ;
12736: LD_VAR 0 1
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: CALL_OW 500
// base := GetBase ( base_dep ) ;
12750: LD_ADDR_VAR 0 15
12754: PUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 274
12764: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12765: LD_ADDR_VAR 0 16
12769: PUSH
12770: LD_VAR 0 1
12774: PPUSH
12775: CALL_OW 255
12779: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12780: LD_ADDR_VAR 0 17
12784: PUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 248
12794: ST_TO_ADDR
// if sources then
12795: LD_VAR 0 5
12799: IFFALSE 12846
// for i = 1 to 3 do
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: DOUBLE
12807: LD_INT 1
12809: DEC
12810: ST_TO_ADDR
12811: LD_INT 3
12813: PUSH
12814: FOR_TO
12815: IFFALSE 12844
// AddResourceType ( base , i , sources [ i ] ) ;
12817: LD_VAR 0 15
12821: PPUSH
12822: LD_VAR 0 8
12826: PPUSH
12827: LD_VAR 0 5
12831: PUSH
12832: LD_VAR 0 8
12836: ARRAY
12837: PPUSH
12838: CALL_OW 276
12842: GO 12814
12844: POP
12845: POP
// buildings := GetBaseBuildings ( base , area ) ;
12846: LD_ADDR_VAR 0 18
12850: PUSH
12851: LD_VAR 0 15
12855: PPUSH
12856: LD_VAR 0 2
12860: PPUSH
12861: CALL 12138 0 2
12865: ST_TO_ADDR
// InitHc ;
12866: CALL_OW 19
// InitUc ;
12870: CALL_OW 18
// uc_side := side ;
12874: LD_ADDR_OWVAR 20
12878: PUSH
12879: LD_VAR 0 16
12883: ST_TO_ADDR
// uc_nation := nation ;
12884: LD_ADDR_OWVAR 21
12888: PUSH
12889: LD_VAR 0 17
12893: ST_TO_ADDR
// if buildings then
12894: LD_VAR 0 18
12898: IFFALSE 14220
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12900: LD_ADDR_VAR 0 19
12904: PUSH
12905: LD_VAR 0 18
12909: PPUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 29
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 30
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 72
12942: ST_TO_ADDR
// if tmp then
12943: LD_VAR 0 19
12947: IFFALSE 12995
// for i in tmp do
12949: LD_ADDR_VAR 0 8
12953: PUSH
12954: LD_VAR 0 19
12958: PUSH
12959: FOR_IN
12960: IFFALSE 12993
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12962: LD_VAR 0 8
12966: PPUSH
12967: CALL_OW 250
12971: PPUSH
12972: LD_VAR 0 8
12976: PPUSH
12977: CALL_OW 251
12981: PPUSH
12982: LD_VAR 0 16
12986: PPUSH
12987: CALL_OW 441
12991: GO 12959
12993: POP
12994: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12995: LD_VAR 0 18
12999: PPUSH
13000: LD_INT 2
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: PPUSH
13028: CALL_OW 72
13032: IFFALSE 13120
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13034: LD_ADDR_VAR 0 8
13038: PUSH
13039: LD_VAR 0 18
13043: PPUSH
13044: LD_INT 2
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 32
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 30
13059: PUSH
13060: LD_INT 33
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 72
13076: PUSH
13077: FOR_IN
13078: IFFALSE 13118
// begin if not GetBWeapon ( i ) then
13080: LD_VAR 0 8
13084: PPUSH
13085: CALL_OW 269
13089: NOT
13090: IFFALSE 13116
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13092: LD_VAR 0 8
13096: PPUSH
13097: LD_VAR 0 8
13101: PPUSH
13102: LD_VAR 0 2
13106: PPUSH
13107: CALL 14366 0 2
13111: PPUSH
13112: CALL_OW 431
// end ;
13116: GO 13077
13118: POP
13119: POP
// end ; for i = 1 to personel do
13120: LD_ADDR_VAR 0 8
13124: PUSH
13125: DOUBLE
13126: LD_INT 1
13128: DEC
13129: ST_TO_ADDR
13130: LD_VAR 0 6
13134: PUSH
13135: FOR_TO
13136: IFFALSE 14200
// begin if i > 4 then
13138: LD_VAR 0 8
13142: PUSH
13143: LD_INT 4
13145: GREATER
13146: IFFALSE 13150
// break ;
13148: GO 14200
// case i of 1 :
13150: LD_VAR 0 8
13154: PUSH
13155: LD_INT 1
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13243
13163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13164: LD_ADDR_VAR 0 12
13168: PUSH
13169: LD_VAR 0 18
13173: PPUSH
13174: LD_INT 22
13176: PUSH
13177: LD_VAR 0 16
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 58
13188: PUSH
13189: EMPTY
13190: LIST
13191: PUSH
13192: LD_INT 2
13194: PUSH
13195: LD_INT 30
13197: PUSH
13198: LD_INT 32
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 30
13207: PUSH
13208: LD_INT 4
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 30
13217: PUSH
13218: LD_INT 5
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 72
13240: ST_TO_ADDR
13241: GO 13465
13243: LD_INT 2
13245: DOUBLE
13246: EQUAL
13247: IFTRUE 13251
13249: GO 13313
13251: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13252: LD_ADDR_VAR 0 12
13256: PUSH
13257: LD_VAR 0 18
13261: PPUSH
13262: LD_INT 22
13264: PUSH
13265: LD_VAR 0 16
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 30
13279: PUSH
13280: LD_INT 0
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PPUSH
13306: CALL_OW 72
13310: ST_TO_ADDR
13311: GO 13465
13313: LD_INT 3
13315: DOUBLE
13316: EQUAL
13317: IFTRUE 13321
13319: GO 13383
13321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13322: LD_ADDR_VAR 0 12
13326: PUSH
13327: LD_VAR 0 18
13331: PPUSH
13332: LD_INT 22
13334: PUSH
13335: LD_VAR 0 16
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: LD_INT 30
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 30
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: ST_TO_ADDR
13381: GO 13465
13383: LD_INT 4
13385: DOUBLE
13386: EQUAL
13387: IFTRUE 13391
13389: GO 13464
13391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13392: LD_ADDR_VAR 0 12
13396: PUSH
13397: LD_VAR 0 18
13401: PPUSH
13402: LD_INT 22
13404: PUSH
13405: LD_VAR 0 16
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: LD_INT 30
13419: PUSH
13420: LD_INT 6
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 30
13429: PUSH
13430: LD_INT 7
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 30
13439: PUSH
13440: LD_INT 8
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
13462: GO 13465
13464: POP
// if i = 1 then
13465: LD_VAR 0 8
13469: PUSH
13470: LD_INT 1
13472: EQUAL
13473: IFFALSE 13584
// begin tmp := [ ] ;
13475: LD_ADDR_VAR 0 19
13479: PUSH
13480: EMPTY
13481: ST_TO_ADDR
// for j in f do
13482: LD_ADDR_VAR 0 9
13486: PUSH
13487: LD_VAR 0 12
13491: PUSH
13492: FOR_IN
13493: IFFALSE 13566
// if GetBType ( j ) = b_bunker then
13495: LD_VAR 0 9
13499: PPUSH
13500: CALL_OW 266
13504: PUSH
13505: LD_INT 32
13507: EQUAL
13508: IFFALSE 13535
// tmp := Insert ( tmp , 1 , j ) else
13510: LD_ADDR_VAR 0 19
13514: PUSH
13515: LD_VAR 0 19
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: LD_VAR 0 9
13527: PPUSH
13528: CALL_OW 2
13532: ST_TO_ADDR
13533: GO 13564
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13535: LD_ADDR_VAR 0 19
13539: PUSH
13540: LD_VAR 0 19
13544: PPUSH
13545: LD_VAR 0 19
13549: PUSH
13550: LD_INT 1
13552: PLUS
13553: PPUSH
13554: LD_VAR 0 9
13558: PPUSH
13559: CALL_OW 2
13563: ST_TO_ADDR
13564: GO 13492
13566: POP
13567: POP
// if tmp then
13568: LD_VAR 0 19
13572: IFFALSE 13584
// f := tmp ;
13574: LD_ADDR_VAR 0 12
13578: PUSH
13579: LD_VAR 0 19
13583: ST_TO_ADDR
// end ; x := personel [ i ] ;
13584: LD_ADDR_VAR 0 13
13588: PUSH
13589: LD_VAR 0 6
13593: PUSH
13594: LD_VAR 0 8
13598: ARRAY
13599: ST_TO_ADDR
// if x = - 1 then
13600: LD_VAR 0 13
13604: PUSH
13605: LD_INT 1
13607: NEG
13608: EQUAL
13609: IFFALSE 13818
// begin for j in f do
13611: LD_ADDR_VAR 0 9
13615: PUSH
13616: LD_VAR 0 12
13620: PUSH
13621: FOR_IN
13622: IFFALSE 13814
// repeat InitHc ;
13624: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13628: LD_VAR 0 9
13632: PPUSH
13633: CALL_OW 266
13637: PUSH
13638: LD_INT 5
13640: EQUAL
13641: IFFALSE 13711
// begin if UnitsInside ( j ) < 3 then
13643: LD_VAR 0 9
13647: PPUSH
13648: CALL_OW 313
13652: PUSH
13653: LD_INT 3
13655: LESS
13656: IFFALSE 13692
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13658: LD_INT 0
13660: PPUSH
13661: LD_INT 5
13663: PUSH
13664: LD_INT 8
13666: PUSH
13667: LD_INT 9
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_VAR 0 17
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 4
13685: PPUSH
13686: CALL_OW 380
13690: GO 13709
// PrepareHuman ( false , i , skill ) ;
13692: LD_INT 0
13694: PPUSH
13695: LD_VAR 0 8
13699: PPUSH
13700: LD_VAR 0 4
13704: PPUSH
13705: CALL_OW 380
// end else
13709: GO 13728
// PrepareHuman ( false , i , skill ) ;
13711: LD_INT 0
13713: PPUSH
13714: LD_VAR 0 8
13718: PPUSH
13719: LD_VAR 0 4
13723: PPUSH
13724: CALL_OW 380
// un := CreateHuman ;
13728: LD_ADDR_VAR 0 14
13732: PUSH
13733: CALL_OW 44
13737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13738: LD_ADDR_VAR 0 7
13742: PUSH
13743: LD_VAR 0 7
13747: PPUSH
13748: LD_INT 1
13750: PPUSH
13751: LD_VAR 0 14
13755: PPUSH
13756: CALL_OW 2
13760: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13761: LD_VAR 0 14
13765: PPUSH
13766: LD_VAR 0 9
13770: PPUSH
13771: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13775: LD_VAR 0 9
13779: PPUSH
13780: CALL_OW 313
13784: PUSH
13785: LD_INT 6
13787: EQUAL
13788: PUSH
13789: LD_VAR 0 9
13793: PPUSH
13794: CALL_OW 266
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: LD_INT 31
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: IN
13809: OR
13810: IFFALSE 13624
13812: GO 13621
13814: POP
13815: POP
// end else
13816: GO 14198
// for j = 1 to x do
13818: LD_ADDR_VAR 0 9
13822: PUSH
13823: DOUBLE
13824: LD_INT 1
13826: DEC
13827: ST_TO_ADDR
13828: LD_VAR 0 13
13832: PUSH
13833: FOR_TO
13834: IFFALSE 14196
// begin InitHc ;
13836: CALL_OW 19
// if not f then
13840: LD_VAR 0 12
13844: NOT
13845: IFFALSE 13934
// begin PrepareHuman ( false , i , skill ) ;
13847: LD_INT 0
13849: PPUSH
13850: LD_VAR 0 8
13854: PPUSH
13855: LD_VAR 0 4
13859: PPUSH
13860: CALL_OW 380
// un := CreateHuman ;
13864: LD_ADDR_VAR 0 14
13868: PUSH
13869: CALL_OW 44
13873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13874: LD_ADDR_VAR 0 7
13878: PUSH
13879: LD_VAR 0 7
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: LD_VAR 0 14
13891: PPUSH
13892: CALL_OW 2
13896: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13897: LD_VAR 0 14
13901: PPUSH
13902: LD_VAR 0 1
13906: PPUSH
13907: CALL_OW 250
13911: PPUSH
13912: LD_VAR 0 1
13916: PPUSH
13917: CALL_OW 251
13921: PPUSH
13922: LD_INT 10
13924: PPUSH
13925: LD_INT 0
13927: PPUSH
13928: CALL_OW 50
// continue ;
13932: GO 13833
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13934: LD_VAR 0 12
13938: PUSH
13939: LD_INT 1
13941: ARRAY
13942: PPUSH
13943: CALL_OW 313
13947: PUSH
13948: LD_VAR 0 12
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: CALL_OW 266
13961: PUSH
13962: LD_INT 32
13964: PUSH
13965: LD_INT 31
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: IN
13972: AND
13973: PUSH
13974: LD_VAR 0 12
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 313
13987: PUSH
13988: LD_INT 6
13990: EQUAL
13991: OR
13992: IFFALSE 14012
// f := Delete ( f , 1 ) ;
13994: LD_ADDR_VAR 0 12
13998: PUSH
13999: LD_VAR 0 12
14003: PPUSH
14004: LD_INT 1
14006: PPUSH
14007: CALL_OW 3
14011: ST_TO_ADDR
// if not f then
14012: LD_VAR 0 12
14016: NOT
14017: IFFALSE 14035
// begin x := x + 2 ;
14019: LD_ADDR_VAR 0 13
14023: PUSH
14024: LD_VAR 0 13
14028: PUSH
14029: LD_INT 2
14031: PLUS
14032: ST_TO_ADDR
// continue ;
14033: GO 13833
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14035: LD_VAR 0 12
14039: PUSH
14040: LD_INT 1
14042: ARRAY
14043: PPUSH
14044: CALL_OW 266
14048: PUSH
14049: LD_INT 5
14051: EQUAL
14052: IFFALSE 14126
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14054: LD_VAR 0 12
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PPUSH
14063: CALL_OW 313
14067: PUSH
14068: LD_INT 3
14070: LESS
14071: IFFALSE 14107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14073: LD_INT 0
14075: PPUSH
14076: LD_INT 5
14078: PUSH
14079: LD_INT 8
14081: PUSH
14082: LD_INT 9
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: LD_VAR 0 17
14094: ARRAY
14095: PPUSH
14096: LD_VAR 0 4
14100: PPUSH
14101: CALL_OW 380
14105: GO 14124
// PrepareHuman ( false , i , skill ) ;
14107: LD_INT 0
14109: PPUSH
14110: LD_VAR 0 8
14114: PPUSH
14115: LD_VAR 0 4
14119: PPUSH
14120: CALL_OW 380
// end else
14124: GO 14143
// PrepareHuman ( false , i , skill ) ;
14126: LD_INT 0
14128: PPUSH
14129: LD_VAR 0 8
14133: PPUSH
14134: LD_VAR 0 4
14138: PPUSH
14139: CALL_OW 380
// un := CreateHuman ;
14143: LD_ADDR_VAR 0 14
14147: PUSH
14148: CALL_OW 44
14152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14153: LD_ADDR_VAR 0 7
14157: PUSH
14158: LD_VAR 0 7
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: LD_VAR 0 14
14170: PPUSH
14171: CALL_OW 2
14175: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14176: LD_VAR 0 14
14180: PPUSH
14181: LD_VAR 0 12
14185: PUSH
14186: LD_INT 1
14188: ARRAY
14189: PPUSH
14190: CALL_OW 52
// end ;
14194: GO 13833
14196: POP
14197: POP
// end ;
14198: GO 13135
14200: POP
14201: POP
// result := result ^ buildings ;
14202: LD_ADDR_VAR 0 7
14206: PUSH
14207: LD_VAR 0 7
14211: PUSH
14212: LD_VAR 0 18
14216: ADD
14217: ST_TO_ADDR
// end else
14218: GO 14361
// begin for i = 1 to personel do
14220: LD_ADDR_VAR 0 8
14224: PUSH
14225: DOUBLE
14226: LD_INT 1
14228: DEC
14229: ST_TO_ADDR
14230: LD_VAR 0 6
14234: PUSH
14235: FOR_TO
14236: IFFALSE 14359
// begin if i > 4 then
14238: LD_VAR 0 8
14242: PUSH
14243: LD_INT 4
14245: GREATER
14246: IFFALSE 14250
// break ;
14248: GO 14359
// x := personel [ i ] ;
14250: LD_ADDR_VAR 0 13
14254: PUSH
14255: LD_VAR 0 6
14259: PUSH
14260: LD_VAR 0 8
14264: ARRAY
14265: ST_TO_ADDR
// if x = - 1 then
14266: LD_VAR 0 13
14270: PUSH
14271: LD_INT 1
14273: NEG
14274: EQUAL
14275: IFFALSE 14279
// continue ;
14277: GO 14235
// PrepareHuman ( false , i , skill ) ;
14279: LD_INT 0
14281: PPUSH
14282: LD_VAR 0 8
14286: PPUSH
14287: LD_VAR 0 4
14291: PPUSH
14292: CALL_OW 380
// un := CreateHuman ;
14296: LD_ADDR_VAR 0 14
14300: PUSH
14301: CALL_OW 44
14305: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14306: LD_VAR 0 14
14310: PPUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 250
14320: PPUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL_OW 251
14330: PPUSH
14331: LD_INT 10
14333: PPUSH
14334: LD_INT 0
14336: PPUSH
14337: CALL_OW 50
// result := result ^ un ;
14341: LD_ADDR_VAR 0 7
14345: PUSH
14346: LD_VAR 0 7
14350: PUSH
14351: LD_VAR 0 14
14355: ADD
14356: ST_TO_ADDR
// end ;
14357: GO 14235
14359: POP
14360: POP
// end ; end ;
14361: LD_VAR 0 7
14365: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14366: LD_INT 0
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
// result := false ;
14384: LD_ADDR_VAR 0 3
14388: PUSH
14389: LD_INT 0
14391: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14392: LD_VAR 0 1
14396: NOT
14397: PUSH
14398: LD_VAR 0 1
14402: PPUSH
14403: CALL_OW 266
14407: PUSH
14408: LD_INT 32
14410: PUSH
14411: LD_INT 33
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: IN
14418: NOT
14419: OR
14420: IFFALSE 14424
// exit ;
14422: GO 15560
// nat := GetNation ( tower ) ;
14424: LD_ADDR_VAR 0 12
14428: PUSH
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 248
14438: ST_TO_ADDR
// side := GetSide ( tower ) ;
14439: LD_ADDR_VAR 0 16
14443: PUSH
14444: LD_VAR 0 1
14448: PPUSH
14449: CALL_OW 255
14453: ST_TO_ADDR
// x := GetX ( tower ) ;
14454: LD_ADDR_VAR 0 10
14458: PUSH
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 250
14468: ST_TO_ADDR
// y := GetY ( tower ) ;
14469: LD_ADDR_VAR 0 11
14473: PUSH
14474: LD_VAR 0 1
14478: PPUSH
14479: CALL_OW 251
14483: ST_TO_ADDR
// if not x or not y then
14484: LD_VAR 0 10
14488: NOT
14489: PUSH
14490: LD_VAR 0 11
14494: NOT
14495: OR
14496: IFFALSE 14500
// exit ;
14498: GO 15560
// weapon := 0 ;
14500: LD_ADDR_VAR 0 18
14504: PUSH
14505: LD_INT 0
14507: ST_TO_ADDR
// fac_list := [ ] ;
14508: LD_ADDR_VAR 0 17
14512: PUSH
14513: EMPTY
14514: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
14515: LD_ADDR_VAR 0 6
14519: PUSH
14520: LD_VAR 0 1
14524: PPUSH
14525: CALL_OW 274
14529: PPUSH
14530: LD_VAR 0 2
14534: PPUSH
14535: CALL 12138 0 2
14539: PPUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 3
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PPUSH
14550: CALL_OW 72
14554: ST_TO_ADDR
// if not factories then
14555: LD_VAR 0 6
14559: NOT
14560: IFFALSE 14564
// exit ;
14562: GO 15560
// for i in factories do
14564: LD_ADDR_VAR 0 8
14568: PUSH
14569: LD_VAR 0 6
14573: PUSH
14574: FOR_IN
14575: IFFALSE 14600
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14577: LD_ADDR_VAR 0 17
14581: PUSH
14582: LD_VAR 0 17
14586: PUSH
14587: LD_VAR 0 8
14591: PPUSH
14592: CALL_OW 478
14596: UNION
14597: ST_TO_ADDR
14598: GO 14574
14600: POP
14601: POP
// if not fac_list then
14602: LD_VAR 0 17
14606: NOT
14607: IFFALSE 14611
// exit ;
14609: GO 15560
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14611: LD_ADDR_VAR 0 5
14615: PUSH
14616: LD_INT 4
14618: PUSH
14619: LD_INT 5
14621: PUSH
14622: LD_INT 9
14624: PUSH
14625: LD_INT 10
14627: PUSH
14628: LD_INT 6
14630: PUSH
14631: LD_INT 7
14633: PUSH
14634: LD_INT 11
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 27
14648: PUSH
14649: LD_INT 28
14651: PUSH
14652: LD_INT 26
14654: PUSH
14655: LD_INT 30
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 43
14666: PUSH
14667: LD_INT 44
14669: PUSH
14670: LD_INT 46
14672: PUSH
14673: LD_INT 45
14675: PUSH
14676: LD_INT 47
14678: PUSH
14679: LD_INT 49
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: LD_VAR 0 12
14699: ARRAY
14700: ST_TO_ADDR
// for i in list do
14701: LD_ADDR_VAR 0 8
14705: PUSH
14706: LD_VAR 0 5
14710: PUSH
14711: FOR_IN
14712: IFFALSE 14745
// if not i in fac_list then
14714: LD_VAR 0 8
14718: PUSH
14719: LD_VAR 0 17
14723: IN
14724: NOT
14725: IFFALSE 14743
// list := list diff i ;
14727: LD_ADDR_VAR 0 5
14731: PUSH
14732: LD_VAR 0 5
14736: PUSH
14737: LD_VAR 0 8
14741: DIFF
14742: ST_TO_ADDR
14743: GO 14711
14745: POP
14746: POP
// if not list then
14747: LD_VAR 0 5
14751: NOT
14752: IFFALSE 14756
// exit ;
14754: GO 15560
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14756: LD_VAR 0 12
14760: PUSH
14761: LD_INT 3
14763: EQUAL
14764: PUSH
14765: LD_INT 49
14767: PUSH
14768: LD_VAR 0 5
14772: IN
14773: AND
14774: PUSH
14775: LD_INT 31
14777: PPUSH
14778: LD_VAR 0 16
14782: PPUSH
14783: CALL_OW 321
14787: PUSH
14788: LD_INT 2
14790: EQUAL
14791: AND
14792: IFFALSE 14852
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14794: LD_INT 22
14796: PUSH
14797: LD_VAR 0 16
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 35
14808: PUSH
14809: LD_INT 49
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 91
14818: PUSH
14819: LD_VAR 0 1
14823: PUSH
14824: LD_INT 10
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: NOT
14842: IFFALSE 14852
// weapon := ru_time_lapser ;
14844: LD_ADDR_VAR 0 18
14848: PUSH
14849: LD_INT 49
14851: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14852: LD_VAR 0 12
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: IN
14867: PUSH
14868: LD_INT 11
14870: PUSH
14871: LD_VAR 0 5
14875: IN
14876: PUSH
14877: LD_INT 30
14879: PUSH
14880: LD_VAR 0 5
14884: IN
14885: OR
14886: AND
14887: PUSH
14888: LD_INT 6
14890: PPUSH
14891: LD_VAR 0 16
14895: PPUSH
14896: CALL_OW 321
14900: PUSH
14901: LD_INT 2
14903: EQUAL
14904: AND
14905: IFFALSE 15070
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14907: LD_INT 22
14909: PUSH
14910: LD_VAR 0 16
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: LD_INT 35
14924: PUSH
14925: LD_INT 11
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 35
14934: PUSH
14935: LD_INT 30
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 91
14949: PUSH
14950: LD_VAR 0 1
14954: PUSH
14955: LD_INT 18
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 69
14972: NOT
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_VAR 0 16
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 30
14991: PUSH
14992: LD_INT 32
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 33
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 91
15016: PUSH
15017: LD_VAR 0 1
15021: PUSH
15022: LD_INT 12
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: PPUSH
15038: CALL_OW 69
15042: PUSH
15043: LD_INT 2
15045: GREATER
15046: AND
15047: IFFALSE 15070
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15049: LD_ADDR_VAR 0 18
15053: PUSH
15054: LD_INT 11
15056: PUSH
15057: LD_INT 30
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_VAR 0 12
15068: ARRAY
15069: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15070: LD_VAR 0 18
15074: NOT
15075: PUSH
15076: LD_INT 40
15078: PPUSH
15079: LD_VAR 0 16
15083: PPUSH
15084: CALL_OW 321
15088: PUSH
15089: LD_INT 2
15091: EQUAL
15092: AND
15093: PUSH
15094: LD_INT 7
15096: PUSH
15097: LD_VAR 0 5
15101: IN
15102: PUSH
15103: LD_INT 28
15105: PUSH
15106: LD_VAR 0 5
15110: IN
15111: OR
15112: PUSH
15113: LD_INT 45
15115: PUSH
15116: LD_VAR 0 5
15120: IN
15121: OR
15122: AND
15123: IFFALSE 15377
// begin hex := GetHexInfo ( x , y ) ;
15125: LD_ADDR_VAR 0 4
15129: PUSH
15130: LD_VAR 0 10
15134: PPUSH
15135: LD_VAR 0 11
15139: PPUSH
15140: CALL_OW 546
15144: ST_TO_ADDR
// if hex [ 1 ] then
15145: LD_VAR 0 4
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: IFFALSE 15157
// exit ;
15155: GO 15560
// height := hex [ 2 ] ;
15157: LD_ADDR_VAR 0 15
15161: PUSH
15162: LD_VAR 0 4
15166: PUSH
15167: LD_INT 2
15169: ARRAY
15170: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15171: LD_ADDR_VAR 0 14
15175: PUSH
15176: LD_INT 0
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: LD_INT 3
15184: PUSH
15185: LD_INT 5
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: ST_TO_ADDR
// for i in tmp do
15194: LD_ADDR_VAR 0 8
15198: PUSH
15199: LD_VAR 0 14
15203: PUSH
15204: FOR_IN
15205: IFFALSE 15375
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15207: LD_ADDR_VAR 0 9
15211: PUSH
15212: LD_VAR 0 10
15216: PPUSH
15217: LD_VAR 0 8
15221: PPUSH
15222: LD_INT 5
15224: PPUSH
15225: CALL_OW 272
15229: PUSH
15230: LD_VAR 0 11
15234: PPUSH
15235: LD_VAR 0 8
15239: PPUSH
15240: LD_INT 5
15242: PPUSH
15243: CALL_OW 273
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15252: LD_VAR 0 9
15256: PUSH
15257: LD_INT 1
15259: ARRAY
15260: PPUSH
15261: LD_VAR 0 9
15265: PUSH
15266: LD_INT 2
15268: ARRAY
15269: PPUSH
15270: CALL_OW 488
15274: IFFALSE 15373
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15276: LD_ADDR_VAR 0 4
15280: PUSH
15281: LD_VAR 0 9
15285: PUSH
15286: LD_INT 1
15288: ARRAY
15289: PPUSH
15290: LD_VAR 0 9
15294: PUSH
15295: LD_INT 2
15297: ARRAY
15298: PPUSH
15299: CALL_OW 546
15303: ST_TO_ADDR
// if hex [ 1 ] then
15304: LD_VAR 0 4
15308: PUSH
15309: LD_INT 1
15311: ARRAY
15312: IFFALSE 15316
// continue ;
15314: GO 15204
// h := hex [ 2 ] ;
15316: LD_ADDR_VAR 0 13
15320: PUSH
15321: LD_VAR 0 4
15325: PUSH
15326: LD_INT 2
15328: ARRAY
15329: ST_TO_ADDR
// if h + 7 < height then
15330: LD_VAR 0 13
15334: PUSH
15335: LD_INT 7
15337: PLUS
15338: PUSH
15339: LD_VAR 0 15
15343: LESS
15344: IFFALSE 15373
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15346: LD_ADDR_VAR 0 18
15350: PUSH
15351: LD_INT 7
15353: PUSH
15354: LD_INT 28
15356: PUSH
15357: LD_INT 45
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: PUSH
15365: LD_VAR 0 12
15369: ARRAY
15370: ST_TO_ADDR
// break ;
15371: GO 15375
// end ; end ; end ;
15373: GO 15204
15375: POP
15376: POP
// end ; if not weapon then
15377: LD_VAR 0 18
15381: NOT
15382: IFFALSE 15442
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15384: LD_ADDR_VAR 0 5
15388: PUSH
15389: LD_VAR 0 5
15393: PUSH
15394: LD_INT 11
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: LD_INT 49
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: DIFF
15408: ST_TO_ADDR
// if not list then
15409: LD_VAR 0 5
15413: NOT
15414: IFFALSE 15418
// exit ;
15416: GO 15560
// weapon := list [ rand ( 1 , list ) ] ;
15418: LD_ADDR_VAR 0 18
15422: PUSH
15423: LD_VAR 0 5
15427: PUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_VAR 0 5
15435: PPUSH
15436: CALL_OW 12
15440: ARRAY
15441: ST_TO_ADDR
// end ; if weapon then
15442: LD_VAR 0 18
15446: IFFALSE 15560
// begin tmp := CostOfWeapon ( weapon ) ;
15448: LD_ADDR_VAR 0 14
15452: PUSH
15453: LD_VAR 0 18
15457: PPUSH
15458: CALL_OW 451
15462: ST_TO_ADDR
// j := GetBase ( tower ) ;
15463: LD_ADDR_VAR 0 9
15467: PUSH
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 274
15477: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15478: LD_VAR 0 9
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: CALL_OW 275
15490: PUSH
15491: LD_VAR 0 14
15495: PUSH
15496: LD_INT 1
15498: ARRAY
15499: GREATEREQUAL
15500: PUSH
15501: LD_VAR 0 9
15505: PPUSH
15506: LD_INT 2
15508: PPUSH
15509: CALL_OW 275
15513: PUSH
15514: LD_VAR 0 14
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: GREATEREQUAL
15523: AND
15524: PUSH
15525: LD_VAR 0 9
15529: PPUSH
15530: LD_INT 3
15532: PPUSH
15533: CALL_OW 275
15537: PUSH
15538: LD_VAR 0 14
15542: PUSH
15543: LD_INT 3
15545: ARRAY
15546: GREATEREQUAL
15547: AND
15548: IFFALSE 15560
// result := weapon ;
15550: LD_ADDR_VAR 0 3
15554: PUSH
15555: LD_VAR 0 18
15559: ST_TO_ADDR
// end ; end ;
15560: LD_VAR 0 3
15564: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15565: LD_INT 0
15567: PPUSH
15568: PPUSH
// result := true ;
15569: LD_ADDR_VAR 0 3
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if array1 = array2 then
15577: LD_VAR 0 1
15581: PUSH
15582: LD_VAR 0 2
15586: EQUAL
15587: IFFALSE 15647
// begin for i = 1 to array1 do
15589: LD_ADDR_VAR 0 4
15593: PUSH
15594: DOUBLE
15595: LD_INT 1
15597: DEC
15598: ST_TO_ADDR
15599: LD_VAR 0 1
15603: PUSH
15604: FOR_TO
15605: IFFALSE 15643
// if array1 [ i ] <> array2 [ i ] then
15607: LD_VAR 0 1
15611: PUSH
15612: LD_VAR 0 4
15616: ARRAY
15617: PUSH
15618: LD_VAR 0 2
15622: PUSH
15623: LD_VAR 0 4
15627: ARRAY
15628: NONEQUAL
15629: IFFALSE 15641
// begin result := false ;
15631: LD_ADDR_VAR 0 3
15635: PUSH
15636: LD_INT 0
15638: ST_TO_ADDR
// break ;
15639: GO 15643
// end ;
15641: GO 15604
15643: POP
15644: POP
// end else
15645: GO 15655
// result := false ;
15647: LD_ADDR_VAR 0 3
15651: PUSH
15652: LD_INT 0
15654: ST_TO_ADDR
// end ;
15655: LD_VAR 0 3
15659: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15660: LD_INT 0
15662: PPUSH
15663: PPUSH
15664: PPUSH
// pom := GetBase ( fac ) ;
15665: LD_ADDR_VAR 0 5
15669: PUSH
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 274
15679: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15680: LD_ADDR_VAR 0 4
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: LD_VAR 0 2
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 3
15710: ARRAY
15711: PPUSH
15712: LD_VAR 0 2
15716: PUSH
15717: LD_INT 4
15719: ARRAY
15720: PPUSH
15721: CALL_OW 449
15725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15726: LD_ADDR_VAR 0 3
15730: PUSH
15731: LD_VAR 0 5
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 275
15743: PUSH
15744: LD_VAR 0 4
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: GREATEREQUAL
15753: PUSH
15754: LD_VAR 0 5
15758: PPUSH
15759: LD_INT 2
15761: PPUSH
15762: CALL_OW 275
15766: PUSH
15767: LD_VAR 0 4
15771: PUSH
15772: LD_INT 2
15774: ARRAY
15775: GREATEREQUAL
15776: AND
15777: PUSH
15778: LD_VAR 0 5
15782: PPUSH
15783: LD_INT 3
15785: PPUSH
15786: CALL_OW 275
15790: PUSH
15791: LD_VAR 0 4
15795: PUSH
15796: LD_INT 3
15798: ARRAY
15799: GREATEREQUAL
15800: AND
15801: ST_TO_ADDR
// end ;
15802: LD_VAR 0 3
15806: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15807: LD_INT 0
15809: PPUSH
15810: PPUSH
15811: PPUSH
15812: PPUSH
// pom := GetBase ( building ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 274
15827: ST_TO_ADDR
// if not pom then
15828: LD_VAR 0 3
15832: NOT
15833: IFFALSE 15837
// exit ;
15835: GO 16007
// btype := GetBType ( building ) ;
15837: LD_ADDR_VAR 0 5
15841: PUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 266
15851: ST_TO_ADDR
// if btype = b_armoury then
15852: LD_VAR 0 5
15856: PUSH
15857: LD_INT 4
15859: EQUAL
15860: IFFALSE 15870
// btype := b_barracks ;
15862: LD_ADDR_VAR 0 5
15866: PUSH
15867: LD_INT 5
15869: ST_TO_ADDR
// if btype = b_depot then
15870: LD_VAR 0 5
15874: PUSH
15875: LD_INT 0
15877: EQUAL
15878: IFFALSE 15888
// btype := b_warehouse ;
15880: LD_ADDR_VAR 0 5
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// if btype = b_workshop then
15888: LD_VAR 0 5
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: IFFALSE 15906
// btype := b_factory ;
15898: LD_ADDR_VAR 0 5
15902: PUSH
15903: LD_INT 3
15905: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15906: LD_ADDR_VAR 0 4
15910: PUSH
15911: LD_VAR 0 5
15915: PPUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 248
15925: PPUSH
15926: CALL_OW 450
15930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15931: LD_ADDR_VAR 0 2
15935: PUSH
15936: LD_VAR 0 3
15940: PPUSH
15941: LD_INT 1
15943: PPUSH
15944: CALL_OW 275
15948: PUSH
15949: LD_VAR 0 4
15953: PUSH
15954: LD_INT 1
15956: ARRAY
15957: GREATEREQUAL
15958: PUSH
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 2
15966: PPUSH
15967: CALL_OW 275
15971: PUSH
15972: LD_VAR 0 4
15976: PUSH
15977: LD_INT 2
15979: ARRAY
15980: GREATEREQUAL
15981: AND
15982: PUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: LD_INT 3
15990: PPUSH
15991: CALL_OW 275
15995: PUSH
15996: LD_VAR 0 4
16000: PUSH
16001: LD_INT 3
16003: ARRAY
16004: GREATEREQUAL
16005: AND
16006: ST_TO_ADDR
// end ;
16007: LD_VAR 0 2
16011: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16012: LD_INT 0
16014: PPUSH
16015: PPUSH
16016: PPUSH
// pom := GetBase ( building ) ;
16017: LD_ADDR_VAR 0 4
16021: PUSH
16022: LD_VAR 0 1
16026: PPUSH
16027: CALL_OW 274
16031: ST_TO_ADDR
// if not pom then
16032: LD_VAR 0 4
16036: NOT
16037: IFFALSE 16041
// exit ;
16039: GO 16142
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16041: LD_ADDR_VAR 0 5
16045: PUSH
16046: LD_VAR 0 2
16050: PPUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 248
16060: PPUSH
16061: CALL_OW 450
16065: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16066: LD_ADDR_VAR 0 3
16070: PUSH
16071: LD_VAR 0 4
16075: PPUSH
16076: LD_INT 1
16078: PPUSH
16079: CALL_OW 275
16083: PUSH
16084: LD_VAR 0 5
16088: PUSH
16089: LD_INT 1
16091: ARRAY
16092: GREATEREQUAL
16093: PUSH
16094: LD_VAR 0 4
16098: PPUSH
16099: LD_INT 2
16101: PPUSH
16102: CALL_OW 275
16106: PUSH
16107: LD_VAR 0 5
16111: PUSH
16112: LD_INT 2
16114: ARRAY
16115: GREATEREQUAL
16116: AND
16117: PUSH
16118: LD_VAR 0 4
16122: PPUSH
16123: LD_INT 3
16125: PPUSH
16126: CALL_OW 275
16130: PUSH
16131: LD_VAR 0 5
16135: PUSH
16136: LD_INT 3
16138: ARRAY
16139: GREATEREQUAL
16140: AND
16141: ST_TO_ADDR
// end ;
16142: LD_VAR 0 3
16146: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
16147: LD_INT 0
16149: PPUSH
16150: PPUSH
16151: PPUSH
16152: PPUSH
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
// result := false ;
16159: LD_ADDR_VAR 0 6
16163: PUSH
16164: LD_INT 0
16166: ST_TO_ADDR
// if not base or not btype or not x or not y then
16167: LD_VAR 0 1
16171: NOT
16172: PUSH
16173: LD_VAR 0 2
16177: NOT
16178: OR
16179: PUSH
16180: LD_VAR 0 3
16184: NOT
16185: OR
16186: PUSH
16187: LD_VAR 0 4
16191: NOT
16192: OR
16193: IFFALSE 16197
// exit ;
16195: GO 16806
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
16197: LD_ADDR_VAR 0 12
16201: PUSH
16202: LD_VAR 0 2
16206: PPUSH
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_VAR 0 4
16216: PPUSH
16217: LD_VAR 0 5
16221: PPUSH
16222: LD_VAR 0 1
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: PPUSH
16231: CALL_OW 248
16235: PPUSH
16236: LD_INT 0
16238: PPUSH
16239: CALL 17643 0 6
16243: ST_TO_ADDR
// if not hexes then
16244: LD_VAR 0 12
16248: NOT
16249: IFFALSE 16253
// exit ;
16251: GO 16806
// for i = 1 to hexes do
16253: LD_ADDR_VAR 0 7
16257: PUSH
16258: DOUBLE
16259: LD_INT 1
16261: DEC
16262: ST_TO_ADDR
16263: LD_VAR 0 12
16267: PUSH
16268: FOR_TO
16269: IFFALSE 16804
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16271: LD_ADDR_VAR 0 11
16275: PUSH
16276: LD_VAR 0 12
16280: PUSH
16281: LD_VAR 0 7
16285: ARRAY
16286: PUSH
16287: LD_INT 1
16289: ARRAY
16290: PPUSH
16291: LD_VAR 0 12
16295: PUSH
16296: LD_VAR 0 7
16300: ARRAY
16301: PUSH
16302: LD_INT 2
16304: ARRAY
16305: PPUSH
16306: CALL_OW 428
16310: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16311: LD_VAR 0 12
16315: PUSH
16316: LD_VAR 0 7
16320: ARRAY
16321: PUSH
16322: LD_INT 1
16324: ARRAY
16325: PPUSH
16326: LD_VAR 0 12
16330: PUSH
16331: LD_VAR 0 7
16335: ARRAY
16336: PUSH
16337: LD_INT 2
16339: ARRAY
16340: PPUSH
16341: CALL_OW 351
16345: PUSH
16346: LD_VAR 0 12
16350: PUSH
16351: LD_VAR 0 7
16355: ARRAY
16356: PUSH
16357: LD_INT 1
16359: ARRAY
16360: PPUSH
16361: LD_VAR 0 12
16365: PUSH
16366: LD_VAR 0 7
16370: ARRAY
16371: PUSH
16372: LD_INT 2
16374: ARRAY
16375: PPUSH
16376: CALL_OW 488
16380: NOT
16381: OR
16382: PUSH
16383: LD_VAR 0 11
16387: PPUSH
16388: CALL_OW 247
16392: PUSH
16393: LD_INT 3
16395: EQUAL
16396: OR
16397: IFFALSE 16403
// exit ;
16399: POP
16400: POP
16401: GO 16806
// if not tmp or not tmp in base then
16403: LD_VAR 0 11
16407: NOT
16408: PUSH
16409: LD_VAR 0 11
16413: PUSH
16414: LD_VAR 0 1
16418: IN
16419: NOT
16420: OR
16421: IFFALSE 16425
// continue ;
16423: GO 16268
// result := true ;
16425: LD_ADDR_VAR 0 6
16429: PUSH
16430: LD_INT 1
16432: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16433: LD_ADDR_VAR 0 15
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 22
16445: PUSH
16446: LD_VAR 0 11
16450: PPUSH
16451: CALL_OW 255
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 30
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 72
16496: ST_TO_ADDR
// if dep then
16497: LD_VAR 0 15
16501: IFFALSE 16637
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16503: LD_ADDR_VAR 0 14
16507: PUSH
16508: LD_VAR 0 15
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: CALL_OW 250
16521: PPUSH
16522: LD_VAR 0 15
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: PPUSH
16531: CALL_OW 254
16535: PPUSH
16536: LD_INT 5
16538: PPUSH
16539: CALL_OW 272
16543: PUSH
16544: LD_VAR 0 15
16548: PUSH
16549: LD_INT 1
16551: ARRAY
16552: PPUSH
16553: CALL_OW 251
16557: PPUSH
16558: LD_VAR 0 15
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 254
16571: PPUSH
16572: LD_INT 5
16574: PPUSH
16575: CALL_OW 273
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16584: LD_VAR 0 14
16588: PUSH
16589: LD_INT 1
16591: ARRAY
16592: PPUSH
16593: LD_VAR 0 14
16597: PUSH
16598: LD_INT 2
16600: ARRAY
16601: PPUSH
16602: CALL_OW 488
16606: IFFALSE 16637
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16608: LD_VAR 0 11
16612: PPUSH
16613: LD_VAR 0 14
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: LD_VAR 0 14
16626: PUSH
16627: LD_INT 2
16629: ARRAY
16630: PPUSH
16631: CALL_OW 111
// continue ;
16635: GO 16268
// end ; end ; r := GetDir ( tmp ) ;
16637: LD_ADDR_VAR 0 13
16641: PUSH
16642: LD_VAR 0 11
16646: PPUSH
16647: CALL_OW 254
16651: ST_TO_ADDR
// if r = 5 then
16652: LD_VAR 0 13
16656: PUSH
16657: LD_INT 5
16659: EQUAL
16660: IFFALSE 16670
// r := 0 ;
16662: LD_ADDR_VAR 0 13
16666: PUSH
16667: LD_INT 0
16669: ST_TO_ADDR
// for j = r to 5 do
16670: LD_ADDR_VAR 0 8
16674: PUSH
16675: DOUBLE
16676: LD_VAR 0 13
16680: DEC
16681: ST_TO_ADDR
16682: LD_INT 5
16684: PUSH
16685: FOR_TO
16686: IFFALSE 16800
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16688: LD_ADDR_VAR 0 9
16692: PUSH
16693: LD_VAR 0 11
16697: PPUSH
16698: CALL_OW 250
16702: PPUSH
16703: LD_VAR 0 8
16707: PPUSH
16708: LD_INT 2
16710: PPUSH
16711: CALL_OW 272
16715: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16716: LD_ADDR_VAR 0 10
16720: PUSH
16721: LD_VAR 0 11
16725: PPUSH
16726: CALL_OW 251
16730: PPUSH
16731: LD_VAR 0 8
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 273
16743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16744: LD_VAR 0 9
16748: PPUSH
16749: LD_VAR 0 10
16753: PPUSH
16754: CALL_OW 488
16758: PUSH
16759: LD_VAR 0 9
16763: PPUSH
16764: LD_VAR 0 10
16768: PPUSH
16769: CALL_OW 428
16773: NOT
16774: AND
16775: IFFALSE 16798
// begin ComMoveXY ( tmp , _x , _y ) ;
16777: LD_VAR 0 11
16781: PPUSH
16782: LD_VAR 0 9
16786: PPUSH
16787: LD_VAR 0 10
16791: PPUSH
16792: CALL_OW 111
// break ;
16796: GO 16800
// end ; end ;
16798: GO 16685
16800: POP
16801: POP
// end ;
16802: GO 16268
16804: POP
16805: POP
// end ;
16806: LD_VAR 0 6
16810: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
16811: LD_INT 0
16813: PPUSH
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// result := false ;
16823: LD_ADDR_VAR 0 6
16827: PUSH
16828: LD_INT 0
16830: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16831: LD_VAR 0 1
16835: NOT
16836: PUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 266
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: IN
16857: NOT
16858: OR
16859: PUSH
16860: LD_VAR 0 2
16864: NOT
16865: OR
16866: PUSH
16867: LD_VAR 0 5
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: LD_INT 1
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 4
16886: PUSH
16887: LD_INT 5
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: IN
16898: NOT
16899: OR
16900: PUSH
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_VAR 0 4
16910: PPUSH
16911: CALL_OW 488
16915: NOT
16916: OR
16917: IFFALSE 16921
// exit ;
16919: GO 17638
// pom := GetBase ( depot ) ;
16921: LD_ADDR_VAR 0 10
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 274
16935: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16936: LD_ADDR_VAR 0 11
16940: PUSH
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 248
16955: PPUSH
16956: CALL_OW 450
16960: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16961: LD_VAR 0 10
16965: PPUSH
16966: LD_INT 1
16968: PPUSH
16969: CALL_OW 275
16973: PUSH
16974: LD_VAR 0 11
16978: PUSH
16979: LD_INT 1
16981: ARRAY
16982: GREATEREQUAL
16983: PUSH
16984: LD_VAR 0 10
16988: PPUSH
16989: LD_INT 2
16991: PPUSH
16992: CALL_OW 275
16996: PUSH
16997: LD_VAR 0 11
17001: PUSH
17002: LD_INT 2
17004: ARRAY
17005: GREATEREQUAL
17006: AND
17007: PUSH
17008: LD_VAR 0 10
17012: PPUSH
17013: LD_INT 3
17015: PPUSH
17016: CALL_OW 275
17020: PUSH
17021: LD_VAR 0 11
17025: PUSH
17026: LD_INT 3
17028: ARRAY
17029: GREATEREQUAL
17030: AND
17031: NOT
17032: IFFALSE 17036
// exit ;
17034: GO 17638
// if GetBType ( depot ) = b_depot then
17036: LD_VAR 0 1
17040: PPUSH
17041: CALL_OW 266
17045: PUSH
17046: LD_INT 0
17048: EQUAL
17049: IFFALSE 17061
// dist := 28 else
17051: LD_ADDR_VAR 0 14
17055: PUSH
17056: LD_INT 28
17058: ST_TO_ADDR
17059: GO 17069
// dist := 36 ;
17061: LD_ADDR_VAR 0 14
17065: PUSH
17066: LD_INT 36
17068: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17069: LD_VAR 0 1
17073: PPUSH
17074: LD_VAR 0 3
17078: PPUSH
17079: LD_VAR 0 4
17083: PPUSH
17084: CALL_OW 297
17088: PUSH
17089: LD_VAR 0 14
17093: GREATER
17094: IFFALSE 17098
// exit ;
17096: GO 17638
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17098: LD_ADDR_VAR 0 12
17102: PUSH
17103: LD_VAR 0 2
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: LD_VAR 0 4
17117: PPUSH
17118: LD_VAR 0 5
17122: PPUSH
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 248
17132: PPUSH
17133: LD_INT 0
17135: PPUSH
17136: CALL 17643 0 6
17140: ST_TO_ADDR
// if not hexes then
17141: LD_VAR 0 12
17145: NOT
17146: IFFALSE 17150
// exit ;
17148: GO 17638
// hex := GetHexInfo ( x , y ) ;
17150: LD_ADDR_VAR 0 15
17154: PUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_VAR 0 4
17164: PPUSH
17165: CALL_OW 546
17169: ST_TO_ADDR
// if hex [ 1 ] then
17170: LD_VAR 0 15
17174: PUSH
17175: LD_INT 1
17177: ARRAY
17178: IFFALSE 17182
// exit ;
17180: GO 17638
// height := hex [ 2 ] ;
17182: LD_ADDR_VAR 0 13
17186: PUSH
17187: LD_VAR 0 15
17191: PUSH
17192: LD_INT 2
17194: ARRAY
17195: ST_TO_ADDR
// for i = 1 to hexes do
17196: LD_ADDR_VAR 0 7
17200: PUSH
17201: DOUBLE
17202: LD_INT 1
17204: DEC
17205: ST_TO_ADDR
17206: LD_VAR 0 12
17210: PUSH
17211: FOR_TO
17212: IFFALSE 17542
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17214: LD_VAR 0 12
17218: PUSH
17219: LD_VAR 0 7
17223: ARRAY
17224: PUSH
17225: LD_INT 1
17227: ARRAY
17228: PPUSH
17229: LD_VAR 0 12
17233: PUSH
17234: LD_VAR 0 7
17238: ARRAY
17239: PUSH
17240: LD_INT 2
17242: ARRAY
17243: PPUSH
17244: CALL_OW 488
17248: NOT
17249: PUSH
17250: LD_VAR 0 12
17254: PUSH
17255: LD_VAR 0 7
17259: ARRAY
17260: PUSH
17261: LD_INT 1
17263: ARRAY
17264: PPUSH
17265: LD_VAR 0 12
17269: PUSH
17270: LD_VAR 0 7
17274: ARRAY
17275: PUSH
17276: LD_INT 2
17278: ARRAY
17279: PPUSH
17280: CALL_OW 428
17284: PUSH
17285: LD_INT 0
17287: GREATER
17288: OR
17289: PUSH
17290: LD_VAR 0 12
17294: PUSH
17295: LD_VAR 0 7
17299: ARRAY
17300: PUSH
17301: LD_INT 1
17303: ARRAY
17304: PPUSH
17305: LD_VAR 0 12
17309: PUSH
17310: LD_VAR 0 7
17314: ARRAY
17315: PUSH
17316: LD_INT 2
17318: ARRAY
17319: PPUSH
17320: CALL_OW 351
17324: OR
17325: IFFALSE 17331
// exit ;
17327: POP
17328: POP
17329: GO 17638
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17331: LD_ADDR_VAR 0 8
17335: PUSH
17336: LD_VAR 0 12
17340: PUSH
17341: LD_VAR 0 7
17345: ARRAY
17346: PUSH
17347: LD_INT 1
17349: ARRAY
17350: PPUSH
17351: LD_VAR 0 12
17355: PUSH
17356: LD_VAR 0 7
17360: ARRAY
17361: PUSH
17362: LD_INT 2
17364: ARRAY
17365: PPUSH
17366: CALL_OW 546
17370: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17371: LD_VAR 0 8
17375: PUSH
17376: LD_INT 1
17378: ARRAY
17379: PUSH
17380: LD_VAR 0 8
17384: PUSH
17385: LD_INT 2
17387: ARRAY
17388: PUSH
17389: LD_VAR 0 13
17393: PUSH
17394: LD_INT 2
17396: PLUS
17397: GREATER
17398: OR
17399: PUSH
17400: LD_VAR 0 8
17404: PUSH
17405: LD_INT 2
17407: ARRAY
17408: PUSH
17409: LD_VAR 0 13
17413: PUSH
17414: LD_INT 2
17416: MINUS
17417: LESS
17418: OR
17419: PUSH
17420: LD_VAR 0 8
17424: PUSH
17425: LD_INT 3
17427: ARRAY
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: LD_INT 8
17434: PUSH
17435: LD_INT 9
17437: PUSH
17438: LD_INT 10
17440: PUSH
17441: LD_INT 11
17443: PUSH
17444: LD_INT 12
17446: PUSH
17447: LD_INT 13
17449: PUSH
17450: LD_INT 16
17452: PUSH
17453: LD_INT 17
17455: PUSH
17456: LD_INT 18
17458: PUSH
17459: LD_INT 19
17461: PUSH
17462: LD_INT 20
17464: PUSH
17465: LD_INT 21
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: IN
17483: NOT
17484: OR
17485: PUSH
17486: LD_VAR 0 8
17490: PUSH
17491: LD_INT 5
17493: ARRAY
17494: NOT
17495: OR
17496: PUSH
17497: LD_VAR 0 8
17501: PUSH
17502: LD_INT 6
17504: ARRAY
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: LD_INT 7
17514: PUSH
17515: LD_INT 9
17517: PUSH
17518: LD_INT 10
17520: PUSH
17521: LD_INT 11
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: IN
17532: NOT
17533: OR
17534: IFFALSE 17540
// exit ;
17536: POP
17537: POP
17538: GO 17638
// end ;
17540: GO 17211
17542: POP
17543: POP
// side := GetSide ( depot ) ;
17544: LD_ADDR_VAR 0 9
17548: PUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 255
17558: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17559: LD_VAR 0 9
17563: PPUSH
17564: LD_VAR 0 3
17568: PPUSH
17569: LD_VAR 0 4
17573: PPUSH
17574: LD_INT 20
17576: PPUSH
17577: CALL 10292 0 4
17581: PUSH
17582: LD_INT 4
17584: ARRAY
17585: IFFALSE 17589
// exit ;
17587: GO 17638
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17589: LD_VAR 0 2
17593: PUSH
17594: LD_INT 29
17596: PUSH
17597: LD_INT 30
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: IN
17604: PUSH
17605: LD_VAR 0 3
17609: PPUSH
17610: LD_VAR 0 4
17614: PPUSH
17615: LD_VAR 0 9
17619: PPUSH
17620: CALL_OW 440
17624: NOT
17625: AND
17626: IFFALSE 17630
// exit ;
17628: GO 17638
// result := true ;
17630: LD_ADDR_VAR 0 6
17634: PUSH
17635: LD_INT 1
17637: ST_TO_ADDR
// end ;
17638: LD_VAR 0 6
17642: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
17643: LD_INT 0
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
// result = [ ] ;
17703: LD_ADDR_VAR 0 7
17707: PUSH
17708: EMPTY
17709: ST_TO_ADDR
// temp_list = [ ] ;
17710: LD_ADDR_VAR 0 9
17714: PUSH
17715: EMPTY
17716: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17717: LD_VAR 0 4
17721: PUSH
17722: LD_INT 0
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 3
17733: PUSH
17734: LD_INT 4
17736: PUSH
17737: LD_INT 5
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: IN
17748: NOT
17749: PUSH
17750: LD_VAR 0 1
17754: PUSH
17755: LD_INT 0
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: IN
17765: PUSH
17766: LD_VAR 0 5
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 3
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: IN
17785: NOT
17786: AND
17787: OR
17788: IFFALSE 17792
// exit ;
17790: GO 36183
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17792: LD_VAR 0 1
17796: PUSH
17797: LD_INT 6
17799: PUSH
17800: LD_INT 7
17802: PUSH
17803: LD_INT 8
17805: PUSH
17806: LD_INT 13
17808: PUSH
17809: LD_INT 12
17811: PUSH
17812: LD_INT 15
17814: PUSH
17815: LD_INT 11
17817: PUSH
17818: LD_INT 14
17820: PUSH
17821: LD_INT 10
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: IN
17835: IFFALSE 17845
// btype = b_lab ;
17837: LD_ADDR_VAR 0 1
17841: PUSH
17842: LD_INT 6
17844: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17845: LD_VAR 0 6
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: IN
17864: NOT
17865: PUSH
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 0
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: LD_INT 6
17885: PUSH
17886: LD_INT 36
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: LD_INT 5
17894: PUSH
17895: LD_INT 31
17897: PUSH
17898: LD_INT 32
17900: PUSH
17901: LD_INT 33
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: IN
17917: NOT
17918: PUSH
17919: LD_VAR 0 6
17923: PUSH
17924: LD_INT 1
17926: EQUAL
17927: AND
17928: OR
17929: PUSH
17930: LD_VAR 0 1
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: LD_INT 3
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: IN
17945: NOT
17946: PUSH
17947: LD_VAR 0 6
17951: PUSH
17952: LD_INT 2
17954: EQUAL
17955: AND
17956: OR
17957: IFFALSE 17967
// mode = 0 ;
17959: LD_ADDR_VAR 0 6
17963: PUSH
17964: LD_INT 0
17966: ST_TO_ADDR
// case mode of 0 :
17967: LD_VAR 0 6
17971: PUSH
17972: LD_INT 0
17974: DOUBLE
17975: EQUAL
17976: IFTRUE 17980
17978: GO 29433
17980: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17981: LD_ADDR_VAR 0 11
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 0
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: LD_INT 3
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18174: LD_ADDR_VAR 0 12
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: NEG
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: NEG
18298: PUSH
18299: LD_INT 0
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: LD_INT 1
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: NEG
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 3
18331: NEG
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 3
18342: NEG
18343: PUSH
18344: LD_INT 1
18346: NEG
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18370: LD_ADDR_VAR 0 13
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: NEG
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: NEG
18518: PUSH
18519: LD_INT 3
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 3
18529: NEG
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 3
18541: NEG
18542: PUSH
18543: LD_INT 3
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18569: LD_ADDR_VAR 0 14
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 1
18627: NEG
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: LD_INT 2
18654: NEG
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: LD_INT 2
18665: NEG
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: LD_INT 1
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 1
18715: NEG
18716: PUSH
18717: LD_INT 3
18719: NEG
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: LD_INT 3
18730: NEG
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18765: LD_ADDR_VAR 0 15
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: NEG
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 2
18899: NEG
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 2
18911: PUSH
18912: LD_INT 1
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 3
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 3
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18958: LD_ADDR_VAR 0 16
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: LD_INT 1
19031: NEG
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: NEG
19040: PUSH
19041: LD_INT 2
19043: NEG
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: NEG
19094: PUSH
19095: LD_INT 2
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 3
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 3
19115: PUSH
19116: LD_INT 3
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: LD_INT 3
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19151: LD_ADDR_VAR 0 17
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: NEG
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 0
19244: PUSH
19245: LD_INT 2
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: LD_INT 1
19258: NEG
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 0
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: NEG
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: NEG
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: NEG
19351: PUSH
19352: LD_INT 2
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19381: LD_ADDR_VAR 0 18
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 1
19450: NEG
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: LD_INT 2
19466: NEG
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 1
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: LD_INT 1
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: NEG
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 2
19580: NEG
19581: PUSH
19582: LD_INT 2
19584: NEG
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19611: LD_ADDR_VAR 0 19
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: LD_INT 2
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: LD_INT 2
19707: NEG
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 2
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: NEG
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: NEG
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: NEG
19811: PUSH
19812: LD_INT 2
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19841: LD_ADDR_VAR 0 20
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 0
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 1
19922: NEG
19923: PUSH
19924: LD_INT 2
19926: NEG
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 0
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 0
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: LD_INT 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 2
20017: NEG
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: NEG
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: NEG
20041: PUSH
20042: LD_INT 2
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20071: LD_ADDR_VAR 0 21
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: LD_INT 2
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: LD_INT 2
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: LD_INT 1
20178: NEG
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 0
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: NEG
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: NEG
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: NEG
20271: PUSH
20272: LD_INT 2
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20301: LD_ADDR_VAR 0 22
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: LD_INT 1
20374: NEG
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: LD_INT 2
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: LD_INT 2
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: NEG
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20531: LD_ADDR_VAR 0 23
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: LD_INT 2
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 2
20707: NEG
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: LD_INT 2
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: LD_INT 3
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: LD_INT 3
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20811: LD_ADDR_VAR 0 24
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: NEG
20881: PUSH
20882: LD_INT 1
20884: NEG
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: LD_INT 2
20896: NEG
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: LD_INT 1
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 2
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: NEG
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 2
20998: NEG
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 2
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 3
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 3
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21087: LD_ADDR_VAR 0 25
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: LD_INT 1
21160: NEG
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: LD_INT 2
21172: NEG
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 2
21263: NEG
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 3
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 3
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 3
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 3
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21361: LD_ADDR_VAR 0 26
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: LD_INT 1
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: NEG
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: LD_INT 2
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: LD_INT 2
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 2
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: NEG
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 2
21537: NEG
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: NEG
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: LD_INT 2
21564: NEG
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21637: LD_ADDR_VAR 0 27
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: NEG
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 2
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 2
21824: NEG
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: LD_INT 2
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 3
21870: NEG
21871: PUSH
21872: LD_INT 1
21874: NEG
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 3
21882: NEG
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21917: LD_ADDR_VAR 0 28
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 0
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: NEG
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: LD_INT 2
22013: NEG
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: LD_INT 1
22024: NEG
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: NEG
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 2
22116: NEG
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: LD_INT 3
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 3
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 3
22152: NEG
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 3
22164: NEG
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22199: LD_ADDR_VAR 0 29
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 2
22377: NEG
22378: PUSH
22379: LD_INT 2
22381: NEG
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: LD_INT 3
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: LD_INT 3
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 3
22443: NEG
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22478: LD_ADDR_VAR 0 30
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 0
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 1
22536: NEG
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 1
22547: NEG
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: NEG
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: LD_INT 2
22574: NEG
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 2
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 2
22644: NEG
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 2
22655: NEG
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 3
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 3
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 3
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 3
22721: NEG
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22756: LD_ADDR_VAR 0 31
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: LD_INT 0
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: NEG
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: LD_INT 2
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 2
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: NEG
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 2
22945: NEG
22946: PUSH
22947: LD_INT 3
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 3
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 3
22999: NEG
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23034: LD_ADDR_VAR 0 32
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: LD_INT 2
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: LD_INT 3
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 2
23238: NEG
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 2
23256: PUSH
23257: LD_INT 3
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: NEG
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23312: LD_ADDR_VAR 0 33
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 2
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 2
23502: NEG
23503: PUSH
23504: LD_INT 3
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 3
23556: NEG
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23591: LD_ADDR_VAR 0 34
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: LD_INT 2
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 2
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 2
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 2
23747: NEG
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 2
23758: NEG
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: NEG
23771: PUSH
23772: LD_INT 2
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 3
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 3
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 3
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 3
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23871: LD_ADDR_VAR 0 35
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 2
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 2
23962: NEG
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23983: LD_ADDR_VAR 0 36
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: NEG
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: NEG
24065: PUSH
24066: LD_INT 2
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24095: LD_ADDR_VAR 0 37
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24207: LD_ADDR_VAR 0 38
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 0
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: NEG
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24319: LD_ADDR_VAR 0 39
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: LD_INT 2
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24431: LD_ADDR_VAR 0 40
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24543: LD_ADDR_VAR 0 41
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: NEG
24722: PUSH
24723: LD_INT 2
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 2
24733: NEG
24734: PUSH
24735: LD_INT 3
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 3
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 3
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: PUSH
24797: LD_INT 3
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 2
24806: NEG
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 3
24817: NEG
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 3
24828: NEG
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 3
24840: NEG
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 3
24852: NEG
24853: PUSH
24854: LD_INT 3
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24893: LD_ADDR_VAR 0 42
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 2
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: LD_INT 2
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 2
25083: NEG
25084: PUSH
25085: LD_INT 3
25087: NEG
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 3
25099: NEG
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 3
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 3
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 3
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 3
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: LD_INT 3
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 3
25190: NEG
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 3
25202: NEG
25203: PUSH
25204: LD_INT 3
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25243: LD_ADDR_VAR 0 43
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: LD_INT 2
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 2
25420: NEG
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: LD_INT 3
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: LD_INT 3
25447: NEG
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 2
25528: NEG
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 3
25539: NEG
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 3
25550: NEG
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25591: LD_ADDR_VAR 0 44
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 2
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: NEG
25782: PUSH
25783: LD_INT 3
25785: NEG
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 3
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 3
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 3
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 3
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 3
25865: NEG
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: NEG
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 3
25888: NEG
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 3
25900: NEG
25901: PUSH
25902: LD_INT 3
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25941: LD_ADDR_VAR 0 45
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: LD_INT 2
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 2
26131: NEG
26132: PUSH
26133: LD_INT 3
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 3
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 3
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 3
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 3
26187: PUSH
26188: LD_INT 3
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 3
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: LD_INT 3
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 3
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 3
26238: NEG
26239: PUSH
26240: LD_INT 2
26242: NEG
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 3
26250: NEG
26251: PUSH
26252: LD_INT 3
26254: NEG
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26291: LD_ADDR_VAR 0 46
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 3
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: LD_INT 3
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 3
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: LD_INT 2
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 3
26587: NEG
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 3
26598: NEG
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26639: LD_ADDR_VAR 0 47
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: LD_INT 2
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26790: LD_ADDR_VAR 0 48
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 2
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26937: LD_ADDR_VAR 0 49
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27081: LD_ADDR_VAR 0 50
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27225: LD_ADDR_VAR 0 51
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27372: LD_ADDR_VAR 0 52
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 2
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27523: LD_ADDR_VAR 0 53
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: LD_INT 2
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: NEG
27723: PUSH
27724: LD_INT 2
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27753: LD_ADDR_VAR 0 54
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 1
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 2
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: NEG
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: NEG
27953: PUSH
27954: LD_INT 2
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27983: LD_ADDR_VAR 0 55
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: NEG
28183: PUSH
28184: LD_INT 2
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28213: LD_ADDR_VAR 0 56
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 1
28286: NEG
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: LD_INT 2
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 2
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: NEG
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: NEG
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28443: LD_ADDR_VAR 0 57
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: LD_INT 2
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: LD_INT 2
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 2
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: NEG
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: NEG
28643: PUSH
28644: LD_INT 2
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28673: LD_ADDR_VAR 0 58
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: LD_INT 2
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: NEG
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: LD_INT 2
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28903: LD_ADDR_VAR 0 59
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28991: LD_ADDR_VAR 0 60
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29079: LD_ADDR_VAR 0 61
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29167: LD_ADDR_VAR 0 62
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29255: LD_ADDR_VAR 0 63
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29343: LD_ADDR_VAR 0 64
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: ST_TO_ADDR
// end ; 1 :
29431: GO 35328
29433: LD_INT 1
29435: DOUBLE
29436: EQUAL
29437: IFTRUE 29441
29439: GO 32064
29441: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29442: LD_ADDR_VAR 0 11
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 3
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: LD_INT 3
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: LD_INT 2
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29486: LD_ADDR_VAR 0 12
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29527: LD_ADDR_VAR 0 13
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 3
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29567: LD_ADDR_VAR 0 14
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29608: LD_ADDR_VAR 0 15
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 3
29626: NEG
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 3
29637: NEG
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29652: LD_ADDR_VAR 0 16
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 3
29671: NEG
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: NEG
29684: PUSH
29685: LD_INT 3
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29698: LD_ADDR_VAR 0 17
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: LD_INT 3
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29742: LD_ADDR_VAR 0 18
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29783: LD_ADDR_VAR 0 19
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 3
29800: PUSH
29801: LD_INT 3
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 3
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29823: LD_ADDR_VAR 0 20
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29864: LD_ADDR_VAR 0 21
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: NEG
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 3
29893: NEG
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29908: LD_ADDR_VAR 0 22
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: LD_INT 3
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 3
29927: NEG
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29954: LD_ADDR_VAR 0 23
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 4
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 3
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29998: LD_ADDR_VAR 0 24
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 4
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30039: LD_ADDR_VAR 0 25
30043: PUSH
30044: LD_INT 3
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 4
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 4
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30079: LD_ADDR_VAR 0 26
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: LD_INT 4
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30120: LD_ADDR_VAR 0 27
30124: PUSH
30125: LD_INT 3
30127: NEG
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: NEG
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 4
30149: NEG
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30164: LD_ADDR_VAR 0 28
30168: PUSH
30169: LD_INT 3
30171: NEG
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: LD_INT 4
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 4
30195: NEG
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30210: LD_ADDR_VAR 0 29
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: LD_INT 3
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 3
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 4
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 4
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 3
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: LD_INT 5
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 5
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: LD_INT 4
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: LD_INT 6
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 6
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 5
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30365: LD_ADDR_VAR 0 30
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 4
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 4
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 5
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 5
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 5
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 6
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 6
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30508: LD_ADDR_VAR 0 31
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 3
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 4
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 4
30555: PUSH
30556: LD_INT 4
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 5
30575: PUSH
30576: LD_INT 4
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 5
30585: PUSH
30586: LD_INT 5
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: LD_INT 5
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 6
30605: PUSH
30606: LD_INT 5
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 6
30615: PUSH
30616: LD_INT 6
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 5
30625: PUSH
30626: LD_INT 6
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30647: LD_ADDR_VAR 0 32
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 3
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 4
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: LD_INT 4
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: LD_INT 5
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: LD_INT 4
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: LD_INT 6
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: LD_INT 6
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: LD_INT 5
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30790: LD_ADDR_VAR 0 33
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 3
30808: NEG
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 3
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 4
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 4
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 4
30865: NEG
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 5
30876: NEG
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 5
30899: NEG
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 6
30910: NEG
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 6
30921: NEG
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30945: LD_ADDR_VAR 0 34
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 2
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: NEG
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: NEG
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 4
31012: NEG
31013: PUSH
31014: LD_INT 4
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 4
31024: NEG
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 5
31036: NEG
31037: PUSH
31038: LD_INT 4
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 5
31048: NEG
31049: PUSH
31050: LD_INT 5
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 5
31060: NEG
31061: PUSH
31062: LD_INT 6
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 6
31072: NEG
31073: PUSH
31074: LD_INT 5
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 6
31084: NEG
31085: PUSH
31086: LD_INT 6
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31108: LD_ADDR_VAR 0 41
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31152: LD_ADDR_VAR 0 42
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31193: LD_ADDR_VAR 0 43
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 3
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31233: LD_ADDR_VAR 0 44
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: LD_INT 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31274: LD_ADDR_VAR 0 45
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: NEG
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 3
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31318: LD_ADDR_VAR 0 46
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31364: LD_ADDR_VAR 0 47
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31397: LD_ADDR_VAR 0 48
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31428: LD_ADDR_VAR 0 49
31432: PUSH
31433: LD_INT 3
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31457: LD_ADDR_VAR 0 50
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31486: LD_ADDR_VAR 0 51
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31517: LD_ADDR_VAR 0 52
31521: PUSH
31522: LD_INT 3
31524: NEG
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: NEG
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31550: LD_ADDR_VAR 0 53
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: LD_INT 3
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31594: LD_ADDR_VAR 0 54
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31635: LD_ADDR_VAR 0 55
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: LD_INT 3
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31675: LD_ADDR_VAR 0 56
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 3
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: LD_INT 3
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31716: LD_ADDR_VAR 0 57
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31760: LD_ADDR_VAR 0 58
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: LD_INT 3
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31806: LD_ADDR_VAR 0 59
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 2
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31850: LD_ADDR_VAR 0 60
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31891: LD_ADDR_VAR 0 61
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31931: LD_ADDR_VAR 0 62
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31972: LD_ADDR_VAR 0 63
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32016: LD_ADDR_VAR 0 64
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// end ; 2 :
32062: GO 35328
32064: LD_INT 2
32066: DOUBLE
32067: EQUAL
32068: IFTRUE 32072
32070: GO 35327
32072: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32073: LD_ADDR_VAR 0 29
32077: PUSH
32078: LD_INT 4
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 5
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 5
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 2
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 5
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 3
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 4
32193: PUSH
32194: LD_INT 3
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 2
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: LD_INT 4
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 5
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: PUSH
32315: LD_INT 4
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: NEG
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 5
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: NEG
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 3
32356: NEG
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 3
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 4
32412: NEG
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 4
32423: NEG
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 4
32435: NEG
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 4
32458: NEG
32459: PUSH
32460: LD_INT 4
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 4
32470: NEG
32471: PUSH
32472: LD_INT 5
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: LD_INT 4
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 5
32518: NEG
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 5
32530: NEG
32531: PUSH
32532: LD_INT 5
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: LD_INT 5
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 5
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32611: LD_ADDR_VAR 0 30
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 4
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 4
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 5
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: LD_INT 5
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 4
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: LD_INT 4
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 3
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 5
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 4
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 4
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 4
32801: NEG
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 4
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 3
32824: NEG
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 3
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 4
32846: NEG
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 5
32857: NEG
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 5
32868: NEG
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 5
32880: NEG
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 3
32903: NEG
32904: PUSH
32905: LD_INT 3
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 3
32915: NEG
32916: PUSH
32917: LD_INT 4
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 4
32963: NEG
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 4
32975: NEG
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: LD_INT 4
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 4
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 4
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 5
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 3
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 4
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: LD_INT 5
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: NEG
33102: PUSH
33103: LD_INT 5
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33158: LD_ADDR_VAR 0 31
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 4
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 5
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 4
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: LD_INT 3
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 3
33258: NEG
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 3
33269: NEG
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 4
33314: NEG
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 4
33325: NEG
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 4
33337: NEG
33338: PUSH
33339: LD_INT 2
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 4
33360: NEG
33361: PUSH
33362: LD_INT 4
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 4
33372: NEG
33373: PUSH
33374: LD_INT 5
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 3
33384: NEG
33385: PUSH
33386: LD_INT 4
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 3
33396: NEG
33397: PUSH
33398: LD_INT 3
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 4
33408: NEG
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 5
33420: NEG
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 5
33432: NEG
33433: PUSH
33434: LD_INT 5
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 3
33444: NEG
33445: PUSH
33446: LD_INT 5
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 5
33456: NEG
33457: PUSH
33458: LD_INT 3
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: LD_INT 3
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: LD_INT 3
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 4
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: NEG
33559: PUSH
33560: LD_INT 4
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 4
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 5
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 5
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 4
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 3
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 3
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 5
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33708: LD_ADDR_VAR 0 32
33712: PUSH
33713: LD_INT 4
33715: NEG
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 4
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: NEG
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 5
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 5
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 5
33794: NEG
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: NEG
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 3
33817: NEG
33818: PUSH
33819: LD_INT 3
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 3
33829: NEG
33830: PUSH
33831: LD_INT 4
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: LD_INT 3
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 4
33877: NEG
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 4
33889: NEG
33890: PUSH
33891: LD_INT 4
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: LD_INT 4
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 4
33913: NEG
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 4
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 5
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 4
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 3
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: LD_INT 4
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 5
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: LD_INT 5
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 4
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 3
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 4
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: LD_INT 4
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 4
34130: PUSH
34131: LD_INT 3
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 5
34140: PUSH
34141: LD_INT 4
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 5
34150: PUSH
34151: LD_INT 5
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 4
34160: PUSH
34161: LD_INT 5
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 5
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 3
34200: PUSH
34201: LD_INT 5
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34255: LD_ADDR_VAR 0 33
34259: PUSH
34260: LD_INT 4
34262: NEG
34263: PUSH
34264: LD_INT 4
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 4
34274: NEG
34275: PUSH
34276: LD_INT 5
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: LD_INT 4
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: LD_INT 3
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 4
34310: NEG
34311: PUSH
34312: LD_INT 3
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 5
34322: NEG
34323: PUSH
34324: LD_INT 4
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 5
34334: NEG
34335: PUSH
34336: LD_INT 5
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 3
34346: NEG
34347: PUSH
34348: LD_INT 5
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 5
34358: NEG
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 3
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 3
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 4
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: LD_INT 4
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 4
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 4
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 5
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 5
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: LD_INT 2
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 5
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: LD_INT 3
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 4
34585: PUSH
34586: LD_INT 3
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: LD_INT 4
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: LD_INT 4
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 3
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 4
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 4
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 4
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 5
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 5
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 5
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34793: LD_ADDR_VAR 0 34
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 4
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 5
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 4
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 3
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 3
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 4
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 5
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: LD_INT 3
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: LD_INT 5
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 4
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 3
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 4
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: LD_INT 4
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 5
35015: PUSH
35016: LD_INT 4
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: LD_INT 5
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: LD_INT 4
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: LD_INT 3
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 3
35075: PUSH
35076: LD_INT 5
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 3
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 4
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: LD_INT 4
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 4
35178: NEG
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 4
35189: NEG
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 3
35201: NEG
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 4
35223: NEG
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 5
35234: NEG
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 5
35245: NEG
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 5
35257: NEG
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 3
35269: NEG
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
// end ; end ;
35325: GO 35328
35327: POP
// case btype of b_depot , b_warehouse :
35328: LD_VAR 0 1
35332: PUSH
35333: LD_INT 0
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35347
35339: LD_INT 1
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35347
35345: GO 35548
35347: POP
// case nation of nation_american :
35348: LD_VAR 0 5
35352: PUSH
35353: LD_INT 1
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35361
35359: GO 35417
35361: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
35362: LD_ADDR_VAR 0 9
35366: PUSH
35367: LD_VAR 0 11
35371: PUSH
35372: LD_VAR 0 12
35376: PUSH
35377: LD_VAR 0 13
35381: PUSH
35382: LD_VAR 0 14
35386: PUSH
35387: LD_VAR 0 15
35391: PUSH
35392: LD_VAR 0 16
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: PUSH
35405: LD_VAR 0 4
35409: PUSH
35410: LD_INT 1
35412: PLUS
35413: ARRAY
35414: ST_TO_ADDR
35415: GO 35546
35417: LD_INT 2
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35481
35425: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
35426: LD_ADDR_VAR 0 9
35430: PUSH
35431: LD_VAR 0 17
35435: PUSH
35436: LD_VAR 0 18
35440: PUSH
35441: LD_VAR 0 19
35445: PUSH
35446: LD_VAR 0 20
35450: PUSH
35451: LD_VAR 0 21
35455: PUSH
35456: LD_VAR 0 22
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: PUSH
35469: LD_VAR 0 4
35473: PUSH
35474: LD_INT 1
35476: PLUS
35477: ARRAY
35478: ST_TO_ADDR
35479: GO 35546
35481: LD_INT 3
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35489
35487: GO 35545
35489: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35490: LD_ADDR_VAR 0 9
35494: PUSH
35495: LD_VAR 0 23
35499: PUSH
35500: LD_VAR 0 24
35504: PUSH
35505: LD_VAR 0 25
35509: PUSH
35510: LD_VAR 0 26
35514: PUSH
35515: LD_VAR 0 27
35519: PUSH
35520: LD_VAR 0 28
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: PUSH
35533: LD_VAR 0 4
35537: PUSH
35538: LD_INT 1
35540: PLUS
35541: ARRAY
35542: ST_TO_ADDR
35543: GO 35546
35545: POP
35546: GO 36101
35548: LD_INT 2
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35562
35554: LD_INT 3
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 35618
35562: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35563: LD_ADDR_VAR 0 9
35567: PUSH
35568: LD_VAR 0 29
35572: PUSH
35573: LD_VAR 0 30
35577: PUSH
35578: LD_VAR 0 31
35582: PUSH
35583: LD_VAR 0 32
35587: PUSH
35588: LD_VAR 0 33
35592: PUSH
35593: LD_VAR 0 34
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: PUSH
35606: LD_VAR 0 4
35610: PUSH
35611: LD_INT 1
35613: PLUS
35614: ARRAY
35615: ST_TO_ADDR
35616: GO 36101
35618: LD_INT 16
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35680
35624: LD_INT 17
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35680
35630: LD_INT 18
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35680
35636: LD_INT 19
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35680
35642: LD_INT 22
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35680
35648: LD_INT 20
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35680
35654: LD_INT 21
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35680
35660: LD_INT 23
35662: DOUBLE
35663: EQUAL
35664: IFTRUE 35680
35666: LD_INT 24
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35680
35672: LD_INT 25
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35680
35678: GO 35736
35680: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35681: LD_ADDR_VAR 0 9
35685: PUSH
35686: LD_VAR 0 35
35690: PUSH
35691: LD_VAR 0 36
35695: PUSH
35696: LD_VAR 0 37
35700: PUSH
35701: LD_VAR 0 38
35705: PUSH
35706: LD_VAR 0 39
35710: PUSH
35711: LD_VAR 0 40
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: PUSH
35724: LD_VAR 0 4
35728: PUSH
35729: LD_INT 1
35731: PLUS
35732: ARRAY
35733: ST_TO_ADDR
35734: GO 36101
35736: LD_INT 6
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35792
35742: LD_INT 7
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35792
35748: LD_INT 8
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35792
35754: LD_INT 13
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35792
35760: LD_INT 12
35762: DOUBLE
35763: EQUAL
35764: IFTRUE 35792
35766: LD_INT 15
35768: DOUBLE
35769: EQUAL
35770: IFTRUE 35792
35772: LD_INT 11
35774: DOUBLE
35775: EQUAL
35776: IFTRUE 35792
35778: LD_INT 14
35780: DOUBLE
35781: EQUAL
35782: IFTRUE 35792
35784: LD_INT 10
35786: DOUBLE
35787: EQUAL
35788: IFTRUE 35792
35790: GO 35848
35792: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
35793: LD_ADDR_VAR 0 9
35797: PUSH
35798: LD_VAR 0 41
35802: PUSH
35803: LD_VAR 0 42
35807: PUSH
35808: LD_VAR 0 43
35812: PUSH
35813: LD_VAR 0 44
35817: PUSH
35818: LD_VAR 0 45
35822: PUSH
35823: LD_VAR 0 46
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: PUSH
35836: LD_VAR 0 4
35840: PUSH
35841: LD_INT 1
35843: PLUS
35844: ARRAY
35845: ST_TO_ADDR
35846: GO 36101
35848: LD_INT 36
35850: DOUBLE
35851: EQUAL
35852: IFTRUE 35856
35854: GO 35912
35856: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35857: LD_ADDR_VAR 0 9
35861: PUSH
35862: LD_VAR 0 47
35866: PUSH
35867: LD_VAR 0 48
35871: PUSH
35872: LD_VAR 0 49
35876: PUSH
35877: LD_VAR 0 50
35881: PUSH
35882: LD_VAR 0 51
35886: PUSH
35887: LD_VAR 0 52
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: PUSH
35900: LD_VAR 0 4
35904: PUSH
35905: LD_INT 1
35907: PLUS
35908: ARRAY
35909: ST_TO_ADDR
35910: GO 36101
35912: LD_INT 4
35914: DOUBLE
35915: EQUAL
35916: IFTRUE 35938
35918: LD_INT 5
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35938
35924: LD_INT 34
35926: DOUBLE
35927: EQUAL
35928: IFTRUE 35938
35930: LD_INT 37
35932: DOUBLE
35933: EQUAL
35934: IFTRUE 35938
35936: GO 35994
35938: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35939: LD_ADDR_VAR 0 9
35943: PUSH
35944: LD_VAR 0 53
35948: PUSH
35949: LD_VAR 0 54
35953: PUSH
35954: LD_VAR 0 55
35958: PUSH
35959: LD_VAR 0 56
35963: PUSH
35964: LD_VAR 0 57
35968: PUSH
35969: LD_VAR 0 58
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: PUSH
35982: LD_VAR 0 4
35986: PUSH
35987: LD_INT 1
35989: PLUS
35990: ARRAY
35991: ST_TO_ADDR
35992: GO 36101
35994: LD_INT 31
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36044
36000: LD_INT 32
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36044
36006: LD_INT 33
36008: DOUBLE
36009: EQUAL
36010: IFTRUE 36044
36012: LD_INT 27
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36044
36018: LD_INT 26
36020: DOUBLE
36021: EQUAL
36022: IFTRUE 36044
36024: LD_INT 28
36026: DOUBLE
36027: EQUAL
36028: IFTRUE 36044
36030: LD_INT 29
36032: DOUBLE
36033: EQUAL
36034: IFTRUE 36044
36036: LD_INT 30
36038: DOUBLE
36039: EQUAL
36040: IFTRUE 36044
36042: GO 36100
36044: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36045: LD_ADDR_VAR 0 9
36049: PUSH
36050: LD_VAR 0 59
36054: PUSH
36055: LD_VAR 0 60
36059: PUSH
36060: LD_VAR 0 61
36064: PUSH
36065: LD_VAR 0 62
36069: PUSH
36070: LD_VAR 0 63
36074: PUSH
36075: LD_VAR 0 64
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: PUSH
36088: LD_VAR 0 4
36092: PUSH
36093: LD_INT 1
36095: PLUS
36096: ARRAY
36097: ST_TO_ADDR
36098: GO 36101
36100: POP
// temp_list2 = [ ] ;
36101: LD_ADDR_VAR 0 10
36105: PUSH
36106: EMPTY
36107: ST_TO_ADDR
// for i in temp_list do
36108: LD_ADDR_VAR 0 8
36112: PUSH
36113: LD_VAR 0 9
36117: PUSH
36118: FOR_IN
36119: IFFALSE 36171
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36121: LD_ADDR_VAR 0 10
36125: PUSH
36126: LD_VAR 0 10
36130: PUSH
36131: LD_VAR 0 8
36135: PUSH
36136: LD_INT 1
36138: ARRAY
36139: PUSH
36140: LD_VAR 0 2
36144: PLUS
36145: PUSH
36146: LD_VAR 0 8
36150: PUSH
36151: LD_INT 2
36153: ARRAY
36154: PUSH
36155: LD_VAR 0 3
36159: PLUS
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: ADD
36168: ST_TO_ADDR
36169: GO 36118
36171: POP
36172: POP
// result = temp_list2 ;
36173: LD_ADDR_VAR 0 7
36177: PUSH
36178: LD_VAR 0 10
36182: ST_TO_ADDR
// end ;
36183: LD_VAR 0 7
36187: RET
// export function EnemyInRange ( unit , dist ) ; begin
36188: LD_INT 0
36190: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36191: LD_ADDR_VAR 0 3
36195: PUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: CALL_OW 255
36205: PPUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 250
36215: PPUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 251
36225: PPUSH
36226: LD_VAR 0 2
36230: PPUSH
36231: CALL 10292 0 4
36235: PUSH
36236: LD_INT 4
36238: ARRAY
36239: ST_TO_ADDR
// end ;
36240: LD_VAR 0 3
36244: RET
// export function PlayerSeeMe ( unit ) ; begin
36245: LD_INT 0
36247: PPUSH
// result := See ( your_side , unit ) ;
36248: LD_ADDR_VAR 0 2
36252: PUSH
36253: LD_OWVAR 2
36257: PPUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 292
36267: ST_TO_ADDR
// end ;
36268: LD_VAR 0 2
36272: RET
// export function ReverseDir ( unit ) ; begin
36273: LD_INT 0
36275: PPUSH
// if not unit then
36276: LD_VAR 0 1
36280: NOT
36281: IFFALSE 36285
// exit ;
36283: GO 36308
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36285: LD_ADDR_VAR 0 2
36289: PUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 254
36299: PUSH
36300: LD_INT 3
36302: PLUS
36303: PUSH
36304: LD_INT 6
36306: MOD
36307: ST_TO_ADDR
// end ;
36308: LD_VAR 0 2
36312: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36313: LD_INT 0
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
// if not hexes then
36320: LD_VAR 0 2
36324: NOT
36325: IFFALSE 36329
// exit ;
36327: GO 36477
// dist := 9999 ;
36329: LD_ADDR_VAR 0 5
36333: PUSH
36334: LD_INT 9999
36336: ST_TO_ADDR
// for i = 1 to hexes do
36337: LD_ADDR_VAR 0 4
36341: PUSH
36342: DOUBLE
36343: LD_INT 1
36345: DEC
36346: ST_TO_ADDR
36347: LD_VAR 0 2
36351: PUSH
36352: FOR_TO
36353: IFFALSE 36465
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36355: LD_VAR 0 1
36359: PPUSH
36360: LD_VAR 0 2
36364: PUSH
36365: LD_VAR 0 4
36369: ARRAY
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: PPUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_VAR 0 4
36384: ARRAY
36385: PUSH
36386: LD_INT 2
36388: ARRAY
36389: PPUSH
36390: CALL_OW 297
36394: PUSH
36395: LD_VAR 0 5
36399: LESS
36400: IFFALSE 36463
// begin hex := hexes [ i ] ;
36402: LD_ADDR_VAR 0 7
36406: PUSH
36407: LD_VAR 0 2
36411: PUSH
36412: LD_VAR 0 4
36416: ARRAY
36417: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36418: LD_ADDR_VAR 0 5
36422: PUSH
36423: LD_VAR 0 1
36427: PPUSH
36428: LD_VAR 0 2
36432: PUSH
36433: LD_VAR 0 4
36437: ARRAY
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PPUSH
36443: LD_VAR 0 2
36447: PUSH
36448: LD_VAR 0 4
36452: ARRAY
36453: PUSH
36454: LD_INT 2
36456: ARRAY
36457: PPUSH
36458: CALL_OW 297
36462: ST_TO_ADDR
// end ; end ;
36463: GO 36352
36465: POP
36466: POP
// result := hex ;
36467: LD_ADDR_VAR 0 3
36471: PUSH
36472: LD_VAR 0 7
36476: ST_TO_ADDR
// end ;
36477: LD_VAR 0 3
36481: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36482: LD_INT 0
36484: PPUSH
36485: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36486: LD_VAR 0 1
36490: NOT
36491: PUSH
36492: LD_VAR 0 1
36496: PUSH
36497: LD_INT 21
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 23
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PPUSH
36521: CALL_OW 69
36525: IN
36526: NOT
36527: OR
36528: IFFALSE 36532
// exit ;
36530: GO 36579
// for i = 1 to 3 do
36532: LD_ADDR_VAR 0 3
36536: PUSH
36537: DOUBLE
36538: LD_INT 1
36540: DEC
36541: ST_TO_ADDR
36542: LD_INT 3
36544: PUSH
36545: FOR_TO
36546: IFFALSE 36577
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL_OW 250
36557: PPUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 251
36567: PPUSH
36568: LD_INT 1
36570: PPUSH
36571: CALL_OW 453
36575: GO 36545
36577: POP
36578: POP
// end ;
36579: LD_VAR 0 2
36583: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36584: LD_INT 0
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36592: LD_VAR 0 1
36596: NOT
36597: PUSH
36598: LD_VAR 0 2
36602: NOT
36603: OR
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 314
36614: OR
36615: IFFALSE 36619
// exit ;
36617: GO 37060
// x := GetX ( enemy_unit ) ;
36619: LD_ADDR_VAR 0 7
36623: PUSH
36624: LD_VAR 0 2
36628: PPUSH
36629: CALL_OW 250
36633: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36634: LD_ADDR_VAR 0 8
36638: PUSH
36639: LD_VAR 0 2
36643: PPUSH
36644: CALL_OW 251
36648: ST_TO_ADDR
// if not x or not y then
36649: LD_VAR 0 7
36653: NOT
36654: PUSH
36655: LD_VAR 0 8
36659: NOT
36660: OR
36661: IFFALSE 36665
// exit ;
36663: GO 37060
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36665: LD_ADDR_VAR 0 6
36669: PUSH
36670: LD_VAR 0 7
36674: PPUSH
36675: LD_INT 0
36677: PPUSH
36678: LD_INT 4
36680: PPUSH
36681: CALL_OW 272
36685: PUSH
36686: LD_VAR 0 8
36690: PPUSH
36691: LD_INT 0
36693: PPUSH
36694: LD_INT 4
36696: PPUSH
36697: CALL_OW 273
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_VAR 0 7
36710: PPUSH
36711: LD_INT 1
36713: PPUSH
36714: LD_INT 4
36716: PPUSH
36717: CALL_OW 272
36721: PUSH
36722: LD_VAR 0 8
36726: PPUSH
36727: LD_INT 1
36729: PPUSH
36730: LD_INT 4
36732: PPUSH
36733: CALL_OW 273
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_VAR 0 7
36746: PPUSH
36747: LD_INT 2
36749: PPUSH
36750: LD_INT 4
36752: PPUSH
36753: CALL_OW 272
36757: PUSH
36758: LD_VAR 0 8
36762: PPUSH
36763: LD_INT 2
36765: PPUSH
36766: LD_INT 4
36768: PPUSH
36769: CALL_OW 273
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 7
36782: PPUSH
36783: LD_INT 3
36785: PPUSH
36786: LD_INT 4
36788: PPUSH
36789: CALL_OW 272
36793: PUSH
36794: LD_VAR 0 8
36798: PPUSH
36799: LD_INT 3
36801: PPUSH
36802: LD_INT 4
36804: PPUSH
36805: CALL_OW 273
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_VAR 0 7
36818: PPUSH
36819: LD_INT 4
36821: PPUSH
36822: LD_INT 4
36824: PPUSH
36825: CALL_OW 272
36829: PUSH
36830: LD_VAR 0 8
36834: PPUSH
36835: LD_INT 4
36837: PPUSH
36838: LD_INT 4
36840: PPUSH
36841: CALL_OW 273
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_VAR 0 7
36854: PPUSH
36855: LD_INT 5
36857: PPUSH
36858: LD_INT 4
36860: PPUSH
36861: CALL_OW 272
36865: PUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_INT 5
36873: PPUSH
36874: LD_INT 4
36876: PPUSH
36877: CALL_OW 273
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// for i = tmp downto 1 do
36894: LD_ADDR_VAR 0 4
36898: PUSH
36899: DOUBLE
36900: LD_VAR 0 6
36904: INC
36905: ST_TO_ADDR
36906: LD_INT 1
36908: PUSH
36909: FOR_DOWNTO
36910: IFFALSE 37011
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36912: LD_VAR 0 6
36916: PUSH
36917: LD_VAR 0 4
36921: ARRAY
36922: PUSH
36923: LD_INT 1
36925: ARRAY
36926: PPUSH
36927: LD_VAR 0 6
36931: PUSH
36932: LD_VAR 0 4
36936: ARRAY
36937: PUSH
36938: LD_INT 2
36940: ARRAY
36941: PPUSH
36942: CALL_OW 488
36946: NOT
36947: PUSH
36948: LD_VAR 0 6
36952: PUSH
36953: LD_VAR 0 4
36957: ARRAY
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 6
36967: PUSH
36968: LD_VAR 0 4
36972: ARRAY
36973: PUSH
36974: LD_INT 2
36976: ARRAY
36977: PPUSH
36978: CALL_OW 428
36982: PUSH
36983: LD_INT 0
36985: NONEQUAL
36986: OR
36987: IFFALSE 37009
// tmp := Delete ( tmp , i ) ;
36989: LD_ADDR_VAR 0 6
36993: PUSH
36994: LD_VAR 0 6
36998: PPUSH
36999: LD_VAR 0 4
37003: PPUSH
37004: CALL_OW 3
37008: ST_TO_ADDR
37009: GO 36909
37011: POP
37012: POP
// j := GetClosestHex ( unit , tmp ) ;
37013: LD_ADDR_VAR 0 5
37017: PUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: LD_VAR 0 6
37027: PPUSH
37028: CALL 36313 0 2
37032: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37033: LD_VAR 0 1
37037: PPUSH
37038: LD_VAR 0 5
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: PPUSH
37047: LD_VAR 0 5
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: PPUSH
37056: CALL_OW 111
// end ;
37060: LD_VAR 0 3
37064: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37065: LD_INT 0
37067: PPUSH
37068: PPUSH
37069: PPUSH
// uc_side = 0 ;
37070: LD_ADDR_OWVAR 20
37074: PUSH
37075: LD_INT 0
37077: ST_TO_ADDR
// uc_nation = 0 ;
37078: LD_ADDR_OWVAR 21
37082: PUSH
37083: LD_INT 0
37085: ST_TO_ADDR
// InitHc ;
37086: CALL_OW 19
// InitVc ;
37090: CALL_OW 20
// if mastodonts then
37094: LD_VAR 0 6
37098: IFFALSE 37165
// for i = 1 to mastodonts do
37100: LD_ADDR_VAR 0 11
37104: PUSH
37105: DOUBLE
37106: LD_INT 1
37108: DEC
37109: ST_TO_ADDR
37110: LD_VAR 0 6
37114: PUSH
37115: FOR_TO
37116: IFFALSE 37163
// begin vc_chassis := 31 ;
37118: LD_ADDR_OWVAR 37
37122: PUSH
37123: LD_INT 31
37125: ST_TO_ADDR
// vc_control := control_rider ;
37126: LD_ADDR_OWVAR 38
37130: PUSH
37131: LD_INT 4
37133: ST_TO_ADDR
// animal := CreateVehicle ;
37134: LD_ADDR_VAR 0 12
37138: PUSH
37139: CALL_OW 45
37143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37144: LD_VAR 0 12
37148: PPUSH
37149: LD_VAR 0 8
37153: PPUSH
37154: LD_INT 0
37156: PPUSH
37157: CALL 39234 0 3
// end ;
37161: GO 37115
37163: POP
37164: POP
// if horses then
37165: LD_VAR 0 5
37169: IFFALSE 37236
// for i = 1 to horses do
37171: LD_ADDR_VAR 0 11
37175: PUSH
37176: DOUBLE
37177: LD_INT 1
37179: DEC
37180: ST_TO_ADDR
37181: LD_VAR 0 5
37185: PUSH
37186: FOR_TO
37187: IFFALSE 37234
// begin hc_class := 21 ;
37189: LD_ADDR_OWVAR 28
37193: PUSH
37194: LD_INT 21
37196: ST_TO_ADDR
// hc_gallery :=  ;
37197: LD_ADDR_OWVAR 33
37201: PUSH
37202: LD_STRING 
37204: ST_TO_ADDR
// animal := CreateHuman ;
37205: LD_ADDR_VAR 0 12
37209: PUSH
37210: CALL_OW 44
37214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37215: LD_VAR 0 12
37219: PPUSH
37220: LD_VAR 0 8
37224: PPUSH
37225: LD_INT 0
37227: PPUSH
37228: CALL 39234 0 3
// end ;
37232: GO 37186
37234: POP
37235: POP
// if birds then
37236: LD_VAR 0 1
37240: IFFALSE 37307
// for i = 1 to birds do
37242: LD_ADDR_VAR 0 11
37246: PUSH
37247: DOUBLE
37248: LD_INT 1
37250: DEC
37251: ST_TO_ADDR
37252: LD_VAR 0 1
37256: PUSH
37257: FOR_TO
37258: IFFALSE 37305
// begin hc_class = 18 ;
37260: LD_ADDR_OWVAR 28
37264: PUSH
37265: LD_INT 18
37267: ST_TO_ADDR
// hc_gallery =  ;
37268: LD_ADDR_OWVAR 33
37272: PUSH
37273: LD_STRING 
37275: ST_TO_ADDR
// animal := CreateHuman ;
37276: LD_ADDR_VAR 0 12
37280: PUSH
37281: CALL_OW 44
37285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37286: LD_VAR 0 12
37290: PPUSH
37291: LD_VAR 0 8
37295: PPUSH
37296: LD_INT 0
37298: PPUSH
37299: CALL 39234 0 3
// end ;
37303: GO 37257
37305: POP
37306: POP
// if tigers then
37307: LD_VAR 0 2
37311: IFFALSE 37395
// for i = 1 to tigers do
37313: LD_ADDR_VAR 0 11
37317: PUSH
37318: DOUBLE
37319: LD_INT 1
37321: DEC
37322: ST_TO_ADDR
37323: LD_VAR 0 2
37327: PUSH
37328: FOR_TO
37329: IFFALSE 37393
// begin hc_class = class_tiger ;
37331: LD_ADDR_OWVAR 28
37335: PUSH
37336: LD_INT 14
37338: ST_TO_ADDR
// hc_gallery =  ;
37339: LD_ADDR_OWVAR 33
37343: PUSH
37344: LD_STRING 
37346: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37347: LD_ADDR_OWVAR 35
37351: PUSH
37352: LD_INT 7
37354: NEG
37355: PPUSH
37356: LD_INT 7
37358: PPUSH
37359: CALL_OW 12
37363: ST_TO_ADDR
// animal := CreateHuman ;
37364: LD_ADDR_VAR 0 12
37368: PUSH
37369: CALL_OW 44
37373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37374: LD_VAR 0 12
37378: PPUSH
37379: LD_VAR 0 8
37383: PPUSH
37384: LD_INT 0
37386: PPUSH
37387: CALL 39234 0 3
// end ;
37391: GO 37328
37393: POP
37394: POP
// if apemans then
37395: LD_VAR 0 3
37399: IFFALSE 37522
// for i = 1 to apemans do
37401: LD_ADDR_VAR 0 11
37405: PUSH
37406: DOUBLE
37407: LD_INT 1
37409: DEC
37410: ST_TO_ADDR
37411: LD_VAR 0 3
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37520
// begin hc_class = class_apeman ;
37419: LD_ADDR_OWVAR 28
37423: PUSH
37424: LD_INT 12
37426: ST_TO_ADDR
// hc_gallery =  ;
37427: LD_ADDR_OWVAR 33
37431: PUSH
37432: LD_STRING 
37434: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
37435: LD_ADDR_OWVAR 35
37439: PUSH
37440: LD_INT 5
37442: NEG
37443: PPUSH
37444: LD_INT 5
37446: PPUSH
37447: CALL_OW 12
37451: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37452: LD_ADDR_OWVAR 31
37456: PUSH
37457: LD_INT 1
37459: PPUSH
37460: LD_INT 3
37462: PPUSH
37463: CALL_OW 12
37467: PUSH
37468: LD_INT 1
37470: PPUSH
37471: LD_INT 3
37473: PPUSH
37474: CALL_OW 12
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// animal := CreateHuman ;
37491: LD_ADDR_VAR 0 12
37495: PUSH
37496: CALL_OW 44
37500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37501: LD_VAR 0 12
37505: PPUSH
37506: LD_VAR 0 8
37510: PPUSH
37511: LD_INT 0
37513: PPUSH
37514: CALL 39234 0 3
// end ;
37518: GO 37416
37520: POP
37521: POP
// if enchidnas then
37522: LD_VAR 0 4
37526: IFFALSE 37593
// for i = 1 to enchidnas do
37528: LD_ADDR_VAR 0 11
37532: PUSH
37533: DOUBLE
37534: LD_INT 1
37536: DEC
37537: ST_TO_ADDR
37538: LD_VAR 0 4
37542: PUSH
37543: FOR_TO
37544: IFFALSE 37591
// begin hc_class = 13 ;
37546: LD_ADDR_OWVAR 28
37550: PUSH
37551: LD_INT 13
37553: ST_TO_ADDR
// hc_gallery =  ;
37554: LD_ADDR_OWVAR 33
37558: PUSH
37559: LD_STRING 
37561: ST_TO_ADDR
// animal := CreateHuman ;
37562: LD_ADDR_VAR 0 12
37566: PUSH
37567: CALL_OW 44
37571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37572: LD_VAR 0 12
37576: PPUSH
37577: LD_VAR 0 8
37581: PPUSH
37582: LD_INT 0
37584: PPUSH
37585: CALL 39234 0 3
// end ;
37589: GO 37543
37591: POP
37592: POP
// if fishes then
37593: LD_VAR 0 7
37597: IFFALSE 37664
// for i = 1 to fishes do
37599: LD_ADDR_VAR 0 11
37603: PUSH
37604: DOUBLE
37605: LD_INT 1
37607: DEC
37608: ST_TO_ADDR
37609: LD_VAR 0 7
37613: PUSH
37614: FOR_TO
37615: IFFALSE 37662
// begin hc_class = 20 ;
37617: LD_ADDR_OWVAR 28
37621: PUSH
37622: LD_INT 20
37624: ST_TO_ADDR
// hc_gallery =  ;
37625: LD_ADDR_OWVAR 33
37629: PUSH
37630: LD_STRING 
37632: ST_TO_ADDR
// animal := CreateHuman ;
37633: LD_ADDR_VAR 0 12
37637: PUSH
37638: CALL_OW 44
37642: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37643: LD_VAR 0 12
37647: PPUSH
37648: LD_VAR 0 9
37652: PPUSH
37653: LD_INT 0
37655: PPUSH
37656: CALL 39234 0 3
// end ;
37660: GO 37614
37662: POP
37663: POP
// end ;
37664: LD_VAR 0 10
37668: RET
// export function WantHeal ( sci , unit ) ; begin
37669: LD_INT 0
37671: PPUSH
// if GetTaskList ( sci ) > 0 then
37672: LD_VAR 0 1
37676: PPUSH
37677: CALL_OW 437
37681: PUSH
37682: LD_INT 0
37684: GREATER
37685: IFFALSE 37755
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37687: LD_VAR 0 1
37691: PPUSH
37692: CALL_OW 437
37696: PUSH
37697: LD_INT 1
37699: ARRAY
37700: PUSH
37701: LD_INT 1
37703: ARRAY
37704: PUSH
37705: LD_STRING l
37707: EQUAL
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 437
37718: PUSH
37719: LD_INT 1
37721: ARRAY
37722: PUSH
37723: LD_INT 4
37725: ARRAY
37726: PUSH
37727: LD_VAR 0 2
37731: EQUAL
37732: AND
37733: IFFALSE 37745
// result := true else
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_INT 1
37742: ST_TO_ADDR
37743: GO 37753
// result := false ;
37745: LD_ADDR_VAR 0 3
37749: PUSH
37750: LD_INT 0
37752: ST_TO_ADDR
// end else
37753: GO 37763
// result := false ;
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 0
37762: ST_TO_ADDR
// end ;
37763: LD_VAR 0 3
37767: RET
// export function HealTarget ( sci ) ; begin
37768: LD_INT 0
37770: PPUSH
// if not sci then
37771: LD_VAR 0 1
37775: NOT
37776: IFFALSE 37780
// exit ;
37778: GO 37845
// result := 0 ;
37780: LD_ADDR_VAR 0 2
37784: PUSH
37785: LD_INT 0
37787: ST_TO_ADDR
// if GetTaskList ( sci ) then
37788: LD_VAR 0 1
37792: PPUSH
37793: CALL_OW 437
37797: IFFALSE 37845
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 437
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: PUSH
37817: LD_STRING l
37819: EQUAL
37820: IFFALSE 37845
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37822: LD_ADDR_VAR 0 2
37826: PUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 437
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PUSH
37841: LD_INT 4
37843: ARRAY
37844: ST_TO_ADDR
// end ;
37845: LD_VAR 0 2
37849: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37850: LD_INT 0
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
// if not base_units then
37856: LD_VAR 0 1
37860: NOT
37861: IFFALSE 37865
// exit ;
37863: GO 37952
// result := false ;
37865: LD_ADDR_VAR 0 2
37869: PUSH
37870: LD_INT 0
37872: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37873: LD_ADDR_VAR 0 5
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: LD_INT 21
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PPUSH
37893: CALL_OW 72
37897: ST_TO_ADDR
// if not tmp then
37898: LD_VAR 0 5
37902: NOT
37903: IFFALSE 37907
// exit ;
37905: GO 37952
// for i in tmp do
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_VAR 0 5
37916: PUSH
37917: FOR_IN
37918: IFFALSE 37950
// begin result := EnemyInRange ( i , 22 ) ;
37920: LD_ADDR_VAR 0 2
37924: PUSH
37925: LD_VAR 0 3
37929: PPUSH
37930: LD_INT 22
37932: PPUSH
37933: CALL 36188 0 2
37937: ST_TO_ADDR
// if result then
37938: LD_VAR 0 2
37942: IFFALSE 37948
// exit ;
37944: POP
37945: POP
37946: GO 37952
// end ;
37948: GO 37917
37950: POP
37951: POP
// end ;
37952: LD_VAR 0 2
37956: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37957: LD_INT 0
37959: PPUSH
37960: PPUSH
// if not units then
37961: LD_VAR 0 1
37965: NOT
37966: IFFALSE 37970
// exit ;
37968: GO 38040
// result := [ ] ;
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: EMPTY
37976: ST_TO_ADDR
// for i in units do
37977: LD_ADDR_VAR 0 4
37981: PUSH
37982: LD_VAR 0 1
37986: PUSH
37987: FOR_IN
37988: IFFALSE 38038
// if GetTag ( i ) = tag then
37990: LD_VAR 0 4
37994: PPUSH
37995: CALL_OW 110
37999: PUSH
38000: LD_VAR 0 2
38004: EQUAL
38005: IFFALSE 38036
// result := Insert ( result , result + 1 , i ) ;
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_VAR 0 3
38016: PPUSH
38017: LD_VAR 0 3
38021: PUSH
38022: LD_INT 1
38024: PLUS
38025: PPUSH
38026: LD_VAR 0 4
38030: PPUSH
38031: CALL_OW 2
38035: ST_TO_ADDR
38036: GO 37987
38038: POP
38039: POP
// end ;
38040: LD_VAR 0 3
38044: RET
// export function IsDriver ( un ) ; begin
38045: LD_INT 0
38047: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38048: LD_ADDR_VAR 0 2
38052: PUSH
38053: LD_VAR 0 1
38057: PUSH
38058: LD_INT 55
38060: PUSH
38061: EMPTY
38062: LIST
38063: PPUSH
38064: CALL_OW 69
38068: IN
38069: ST_TO_ADDR
// end ;
38070: LD_VAR 0 2
38074: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38075: LD_INT 0
38077: PPUSH
38078: PPUSH
// list := [ ] ;
38079: LD_ADDR_VAR 0 5
38083: PUSH
38084: EMPTY
38085: ST_TO_ADDR
// case d of 0 :
38086: LD_VAR 0 3
38090: PUSH
38091: LD_INT 0
38093: DOUBLE
38094: EQUAL
38095: IFTRUE 38099
38097: GO 38232
38099: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38100: LD_ADDR_VAR 0 5
38104: PUSH
38105: LD_VAR 0 1
38109: PUSH
38110: LD_INT 4
38112: MINUS
38113: PUSH
38114: LD_VAR 0 2
38118: PUSH
38119: LD_INT 4
38121: MINUS
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: PUSH
38131: LD_VAR 0 1
38135: PUSH
38136: LD_INT 3
38138: MINUS
38139: PUSH
38140: LD_VAR 0 2
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: PUSH
38153: LD_VAR 0 1
38157: PUSH
38158: LD_INT 4
38160: PLUS
38161: PUSH
38162: LD_VAR 0 2
38166: PUSH
38167: LD_INT 4
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: PUSH
38175: LD_VAR 0 1
38179: PUSH
38180: LD_INT 3
38182: PLUS
38183: PUSH
38184: LD_VAR 0 2
38188: PUSH
38189: LD_INT 3
38191: PLUS
38192: PUSH
38193: LD_INT 5
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: PUSH
38201: LD_VAR 0 1
38205: PUSH
38206: LD_VAR 0 2
38210: PUSH
38211: LD_INT 4
38213: PLUS
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// end ; 1 :
38230: GO 38930
38232: LD_INT 1
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38240
38238: GO 38373
38240: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38241: LD_ADDR_VAR 0 5
38245: PUSH
38246: LD_VAR 0 1
38250: PUSH
38251: LD_VAR 0 2
38255: PUSH
38256: LD_INT 4
38258: MINUS
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: PUSH
38268: LD_VAR 0 1
38272: PUSH
38273: LD_INT 3
38275: MINUS
38276: PUSH
38277: LD_VAR 0 2
38281: PUSH
38282: LD_INT 3
38284: MINUS
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: PUSH
38294: LD_VAR 0 1
38298: PUSH
38299: LD_INT 4
38301: MINUS
38302: PUSH
38303: LD_VAR 0 2
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: LIST
38315: PUSH
38316: LD_VAR 0 1
38320: PUSH
38321: LD_VAR 0 2
38325: PUSH
38326: LD_INT 3
38328: PLUS
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: PUSH
38338: LD_VAR 0 1
38342: PUSH
38343: LD_INT 4
38345: PLUS
38346: PUSH
38347: LD_VAR 0 2
38351: PUSH
38352: LD_INT 4
38354: PLUS
38355: PUSH
38356: LD_INT 5
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: ST_TO_ADDR
// end ; 2 :
38371: GO 38930
38373: LD_INT 2
38375: DOUBLE
38376: EQUAL
38377: IFTRUE 38381
38379: GO 38510
38381: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38382: LD_ADDR_VAR 0 5
38386: PUSH
38387: LD_VAR 0 1
38391: PUSH
38392: LD_VAR 0 2
38396: PUSH
38397: LD_INT 3
38399: MINUS
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: PUSH
38409: LD_VAR 0 1
38413: PUSH
38414: LD_INT 4
38416: PLUS
38417: PUSH
38418: LD_VAR 0 2
38422: PUSH
38423: LD_INT 4
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: PUSH
38431: LD_VAR 0 1
38435: PUSH
38436: LD_VAR 0 2
38440: PUSH
38441: LD_INT 4
38443: PLUS
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: PUSH
38453: LD_VAR 0 1
38457: PUSH
38458: LD_INT 3
38460: MINUS
38461: PUSH
38462: LD_VAR 0 2
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: PUSH
38475: LD_VAR 0 1
38479: PUSH
38480: LD_INT 4
38482: MINUS
38483: PUSH
38484: LD_VAR 0 2
38488: PUSH
38489: LD_INT 4
38491: MINUS
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// end ; 3 :
38508: GO 38930
38510: LD_INT 3
38512: DOUBLE
38513: EQUAL
38514: IFTRUE 38518
38516: GO 38651
38518: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38519: LD_ADDR_VAR 0 5
38523: PUSH
38524: LD_VAR 0 1
38528: PUSH
38529: LD_INT 3
38531: PLUS
38532: PUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_INT 4
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: PUSH
38546: LD_VAR 0 1
38550: PUSH
38551: LD_INT 4
38553: PLUS
38554: PUSH
38555: LD_VAR 0 2
38559: PUSH
38560: LD_INT 4
38562: PLUS
38563: PUSH
38564: LD_INT 5
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PUSH
38572: LD_VAR 0 1
38576: PUSH
38577: LD_INT 4
38579: MINUS
38580: PUSH
38581: LD_VAR 0 2
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: PUSH
38594: LD_VAR 0 1
38598: PUSH
38599: LD_VAR 0 2
38603: PUSH
38604: LD_INT 4
38606: MINUS
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: PUSH
38616: LD_VAR 0 1
38620: PUSH
38621: LD_INT 3
38623: MINUS
38624: PUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_INT 3
38632: MINUS
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: ST_TO_ADDR
// end ; 4 :
38649: GO 38930
38651: LD_INT 4
38653: DOUBLE
38654: EQUAL
38655: IFTRUE 38659
38657: GO 38792
38659: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38660: LD_ADDR_VAR 0 5
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: LD_VAR 0 2
38674: PUSH
38675: LD_INT 4
38677: PLUS
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: PUSH
38687: LD_VAR 0 1
38691: PUSH
38692: LD_INT 3
38694: PLUS
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 3
38703: PLUS
38704: PUSH
38705: LD_INT 5
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: PUSH
38713: LD_VAR 0 1
38717: PUSH
38718: LD_INT 4
38720: PLUS
38721: PUSH
38722: LD_VAR 0 2
38726: PUSH
38727: LD_INT 4
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: PUSH
38735: LD_VAR 0 1
38739: PUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 3
38747: MINUS
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: PUSH
38757: LD_VAR 0 1
38761: PUSH
38762: LD_INT 4
38764: MINUS
38765: PUSH
38766: LD_VAR 0 2
38770: PUSH
38771: LD_INT 4
38773: MINUS
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: ST_TO_ADDR
// end ; 5 :
38790: GO 38930
38792: LD_INT 5
38794: DOUBLE
38795: EQUAL
38796: IFTRUE 38800
38798: GO 38929
38800: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: LD_INT 4
38813: MINUS
38814: PUSH
38815: LD_VAR 0 2
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: PUSH
38828: LD_VAR 0 1
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: LD_INT 4
38840: MINUS
38841: PUSH
38842: LD_INT 3
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: PUSH
38850: LD_VAR 0 1
38854: PUSH
38855: LD_INT 4
38857: PLUS
38858: PUSH
38859: LD_VAR 0 2
38863: PUSH
38864: LD_INT 4
38866: PLUS
38867: PUSH
38868: LD_INT 5
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: PUSH
38876: LD_VAR 0 1
38880: PUSH
38881: LD_INT 3
38883: PLUS
38884: PUSH
38885: LD_VAR 0 2
38889: PUSH
38890: LD_INT 4
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: PUSH
38898: LD_VAR 0 1
38902: PUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 3
38910: PLUS
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: ST_TO_ADDR
// end ; end ;
38927: GO 38930
38929: POP
// result := list ;
38930: LD_ADDR_VAR 0 4
38934: PUSH
38935: LD_VAR 0 5
38939: ST_TO_ADDR
// end ;
38940: LD_VAR 0 4
38944: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38945: LD_INT 0
38947: PPUSH
38948: PPUSH
38949: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38950: LD_VAR 0 1
38954: NOT
38955: PUSH
38956: LD_VAR 0 2
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: LD_INT 4
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: IN
38979: NOT
38980: OR
38981: IFFALSE 38985
// exit ;
38983: GO 39077
// tmp := [ ] ;
38985: LD_ADDR_VAR 0 5
38989: PUSH
38990: EMPTY
38991: ST_TO_ADDR
// for i in units do
38992: LD_ADDR_VAR 0 4
38996: PUSH
38997: LD_VAR 0 1
39001: PUSH
39002: FOR_IN
39003: IFFALSE 39046
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39005: LD_ADDR_VAR 0 5
39009: PUSH
39010: LD_VAR 0 5
39014: PPUSH
39015: LD_VAR 0 5
39019: PUSH
39020: LD_INT 1
39022: PLUS
39023: PPUSH
39024: LD_VAR 0 4
39028: PPUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: CALL_OW 259
39038: PPUSH
39039: CALL_OW 2
39043: ST_TO_ADDR
39044: GO 39002
39046: POP
39047: POP
// if not tmp then
39048: LD_VAR 0 5
39052: NOT
39053: IFFALSE 39057
// exit ;
39055: GO 39077
// result := SortListByListDesc ( units , tmp ) ;
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_VAR 0 1
39066: PPUSH
39067: LD_VAR 0 5
39071: PPUSH
39072: CALL_OW 77
39076: ST_TO_ADDR
// end ;
39077: LD_VAR 0 3
39081: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39082: LD_INT 0
39084: PPUSH
39085: PPUSH
39086: PPUSH
// x := GetX ( building ) ;
39087: LD_ADDR_VAR 0 4
39091: PUSH
39092: LD_VAR 0 2
39096: PPUSH
39097: CALL_OW 250
39101: ST_TO_ADDR
// y := GetY ( building ) ;
39102: LD_ADDR_VAR 0 5
39106: PUSH
39107: LD_VAR 0 2
39111: PPUSH
39112: CALL_OW 251
39116: ST_TO_ADDR
// if GetTaskList ( unit ) then
39117: LD_VAR 0 1
39121: PPUSH
39122: CALL_OW 437
39126: IFFALSE 39221
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39128: LD_STRING e
39130: PUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 437
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PUSH
39145: LD_INT 1
39147: ARRAY
39148: EQUAL
39149: PUSH
39150: LD_VAR 0 4
39154: PUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: CALL_OW 437
39164: PUSH
39165: LD_INT 1
39167: ARRAY
39168: PUSH
39169: LD_INT 2
39171: ARRAY
39172: EQUAL
39173: AND
39174: PUSH
39175: LD_VAR 0 5
39179: PUSH
39180: LD_VAR 0 1
39184: PPUSH
39185: CALL_OW 437
39189: PUSH
39190: LD_INT 1
39192: ARRAY
39193: PUSH
39194: LD_INT 3
39196: ARRAY
39197: EQUAL
39198: AND
39199: IFFALSE 39211
// result := true else
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 1
39208: ST_TO_ADDR
39209: GO 39219
// result := false ;
39211: LD_ADDR_VAR 0 3
39215: PUSH
39216: LD_INT 0
39218: ST_TO_ADDR
// end else
39219: GO 39229
// result := false ;
39221: LD_ADDR_VAR 0 3
39225: PUSH
39226: LD_INT 0
39228: ST_TO_ADDR
// end ;
39229: LD_VAR 0 3
39233: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39234: LD_INT 0
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
// if not unit or not area then
39240: LD_VAR 0 1
39244: NOT
39245: PUSH
39246: LD_VAR 0 2
39250: NOT
39251: OR
39252: IFFALSE 39256
// exit ;
39254: GO 39420
// tmp := AreaToList ( area , i ) ;
39256: LD_ADDR_VAR 0 6
39260: PUSH
39261: LD_VAR 0 2
39265: PPUSH
39266: LD_VAR 0 5
39270: PPUSH
39271: CALL_OW 517
39275: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39276: LD_ADDR_VAR 0 5
39280: PUSH
39281: DOUBLE
39282: LD_INT 1
39284: DEC
39285: ST_TO_ADDR
39286: LD_VAR 0 6
39290: PUSH
39291: LD_INT 1
39293: ARRAY
39294: PUSH
39295: FOR_TO
39296: IFFALSE 39418
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39298: LD_ADDR_VAR 0 7
39302: PUSH
39303: LD_VAR 0 6
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PUSH
39312: LD_VAR 0 5
39316: ARRAY
39317: PUSH
39318: LD_VAR 0 6
39322: PUSH
39323: LD_INT 2
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 5
39331: ARRAY
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39337: LD_VAR 0 7
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PPUSH
39346: LD_VAR 0 7
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL_OW 428
39359: PUSH
39360: LD_INT 0
39362: EQUAL
39363: IFFALSE 39416
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39365: LD_VAR 0 1
39369: PPUSH
39370: LD_VAR 0 7
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 7
39383: PUSH
39384: LD_INT 2
39386: ARRAY
39387: PPUSH
39388: LD_VAR 0 3
39392: PPUSH
39393: CALL_OW 48
// result := IsPlaced ( unit ) ;
39397: LD_ADDR_VAR 0 4
39401: PUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 305
39411: ST_TO_ADDR
// exit ;
39412: POP
39413: POP
39414: GO 39420
// end ; end ;
39416: GO 39295
39418: POP
39419: POP
// end ;
39420: LD_VAR 0 4
39424: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39425: LD_INT 0
39427: PPUSH
39428: PPUSH
39429: PPUSH
// if not side or side > 8 then
39430: LD_VAR 0 1
39434: NOT
39435: PUSH
39436: LD_VAR 0 1
39440: PUSH
39441: LD_INT 8
39443: GREATER
39444: OR
39445: IFFALSE 39449
// exit ;
39447: GO 39636
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39449: LD_ADDR_VAR 0 4
39453: PUSH
39454: LD_INT 22
39456: PUSH
39457: LD_VAR 0 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 21
39468: PUSH
39469: LD_INT 3
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 69
39484: ST_TO_ADDR
// if not tmp then
39485: LD_VAR 0 4
39489: NOT
39490: IFFALSE 39494
// exit ;
39492: GO 39636
// enable_addtolog := true ;
39494: LD_ADDR_OWVAR 81
39498: PUSH
39499: LD_INT 1
39501: ST_TO_ADDR
// AddToLog ( [ ) ;
39502: LD_STRING [
39504: PPUSH
39505: CALL_OW 561
// for i in tmp do
39509: LD_ADDR_VAR 0 3
39513: PUSH
39514: LD_VAR 0 4
39518: PUSH
39519: FOR_IN
39520: IFFALSE 39627
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39522: LD_STRING [
39524: PUSH
39525: LD_VAR 0 3
39529: PPUSH
39530: CALL_OW 266
39534: STR
39535: PUSH
39536: LD_STRING , 
39538: STR
39539: PUSH
39540: LD_VAR 0 3
39544: PPUSH
39545: CALL_OW 250
39549: STR
39550: PUSH
39551: LD_STRING , 
39553: STR
39554: PUSH
39555: LD_VAR 0 3
39559: PPUSH
39560: CALL_OW 251
39564: STR
39565: PUSH
39566: LD_STRING , 
39568: STR
39569: PUSH
39570: LD_VAR 0 3
39574: PPUSH
39575: CALL_OW 254
39579: STR
39580: PUSH
39581: LD_STRING , 
39583: STR
39584: PUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: LD_INT 1
39592: PPUSH
39593: CALL_OW 268
39597: STR
39598: PUSH
39599: LD_STRING , 
39601: STR
39602: PUSH
39603: LD_VAR 0 3
39607: PPUSH
39608: LD_INT 2
39610: PPUSH
39611: CALL_OW 268
39615: STR
39616: PUSH
39617: LD_STRING ],
39619: STR
39620: PPUSH
39621: CALL_OW 561
// end ;
39625: GO 39519
39627: POP
39628: POP
// AddToLog ( ]; ) ;
39629: LD_STRING ];
39631: PPUSH
39632: CALL_OW 561
// end ;
39636: LD_VAR 0 2
39640: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39641: LD_INT 0
39643: PPUSH
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
// if not area or not rate or not max then
39648: LD_VAR 0 1
39652: NOT
39653: PUSH
39654: LD_VAR 0 2
39658: NOT
39659: OR
39660: PUSH
39661: LD_VAR 0 4
39665: NOT
39666: OR
39667: IFFALSE 39671
// exit ;
39669: GO 39863
// while 1 do
39671: LD_INT 1
39673: IFFALSE 39863
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39675: LD_ADDR_VAR 0 9
39679: PUSH
39680: LD_VAR 0 1
39684: PPUSH
39685: LD_INT 1
39687: PPUSH
39688: CALL_OW 287
39692: PUSH
39693: LD_INT 10
39695: MUL
39696: ST_TO_ADDR
// r := rate / 10 ;
39697: LD_ADDR_VAR 0 7
39701: PUSH
39702: LD_VAR 0 2
39706: PUSH
39707: LD_INT 10
39709: DIVREAL
39710: ST_TO_ADDR
// time := 1 1$00 ;
39711: LD_ADDR_VAR 0 8
39715: PUSH
39716: LD_INT 2100
39718: ST_TO_ADDR
// if amount < min then
39719: LD_VAR 0 9
39723: PUSH
39724: LD_VAR 0 3
39728: LESS
39729: IFFALSE 39747
// r := r * 2 else
39731: LD_ADDR_VAR 0 7
39735: PUSH
39736: LD_VAR 0 7
39740: PUSH
39741: LD_INT 2
39743: MUL
39744: ST_TO_ADDR
39745: GO 39773
// if amount > max then
39747: LD_VAR 0 9
39751: PUSH
39752: LD_VAR 0 4
39756: GREATER
39757: IFFALSE 39773
// r := r / 2 ;
39759: LD_ADDR_VAR 0 7
39763: PUSH
39764: LD_VAR 0 7
39768: PUSH
39769: LD_INT 2
39771: DIVREAL
39772: ST_TO_ADDR
// time := time / r ;
39773: LD_ADDR_VAR 0 8
39777: PUSH
39778: LD_VAR 0 8
39782: PUSH
39783: LD_VAR 0 7
39787: DIVREAL
39788: ST_TO_ADDR
// if time < 0 then
39789: LD_VAR 0 8
39793: PUSH
39794: LD_INT 0
39796: LESS
39797: IFFALSE 39814
// time := time * - 1 ;
39799: LD_ADDR_VAR 0 8
39803: PUSH
39804: LD_VAR 0 8
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: MUL
39813: ST_TO_ADDR
// wait ( time ) ;
39814: LD_VAR 0 8
39818: PPUSH
39819: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39823: LD_INT 35
39825: PPUSH
39826: LD_INT 875
39828: PPUSH
39829: CALL_OW 12
39833: PPUSH
39834: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39838: LD_INT 1
39840: PPUSH
39841: LD_INT 5
39843: PPUSH
39844: CALL_OW 12
39848: PPUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_INT 1
39856: PPUSH
39857: CALL_OW 55
// end ;
39861: GO 39671
// end ;
39863: LD_VAR 0 5
39867: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39868: LD_INT 0
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
// if not turrets or not factories then
39878: LD_VAR 0 1
39882: NOT
39883: PUSH
39884: LD_VAR 0 2
39888: NOT
39889: OR
39890: IFFALSE 39894
// exit ;
39892: GO 40201
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39894: LD_ADDR_VAR 0 10
39898: PUSH
39899: LD_INT 5
39901: PUSH
39902: LD_INT 6
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 4
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 3
39921: PUSH
39922: LD_INT 5
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 24
39936: PUSH
39937: LD_INT 25
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 23
39946: PUSH
39947: LD_INT 27
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 42
39960: PUSH
39961: LD_INT 43
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 44
39970: PUSH
39971: LD_INT 46
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 45
39980: PUSH
39981: LD_INT 47
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// result := [ ] ;
39998: LD_ADDR_VAR 0 3
40002: PUSH
40003: EMPTY
40004: ST_TO_ADDR
// for i in turrets do
40005: LD_ADDR_VAR 0 4
40009: PUSH
40010: LD_VAR 0 1
40014: PUSH
40015: FOR_IN
40016: IFFALSE 40199
// begin nat := GetNation ( i ) ;
40018: LD_ADDR_VAR 0 7
40022: PUSH
40023: LD_VAR 0 4
40027: PPUSH
40028: CALL_OW 248
40032: ST_TO_ADDR
// weapon := 0 ;
40033: LD_ADDR_VAR 0 8
40037: PUSH
40038: LD_INT 0
40040: ST_TO_ADDR
// if not nat then
40041: LD_VAR 0 7
40045: NOT
40046: IFFALSE 40050
// continue ;
40048: GO 40015
// for j in list [ nat ] do
40050: LD_ADDR_VAR 0 5
40054: PUSH
40055: LD_VAR 0 10
40059: PUSH
40060: LD_VAR 0 7
40064: ARRAY
40065: PUSH
40066: FOR_IN
40067: IFFALSE 40108
// if GetBWeapon ( i ) = j [ 1 ] then
40069: LD_VAR 0 4
40073: PPUSH
40074: CALL_OW 269
40078: PUSH
40079: LD_VAR 0 5
40083: PUSH
40084: LD_INT 1
40086: ARRAY
40087: EQUAL
40088: IFFALSE 40106
// begin weapon := j [ 2 ] ;
40090: LD_ADDR_VAR 0 8
40094: PUSH
40095: LD_VAR 0 5
40099: PUSH
40100: LD_INT 2
40102: ARRAY
40103: ST_TO_ADDR
// break ;
40104: GO 40108
// end ;
40106: GO 40066
40108: POP
40109: POP
// if not weapon then
40110: LD_VAR 0 8
40114: NOT
40115: IFFALSE 40119
// continue ;
40117: GO 40015
// for k in factories do
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: LD_VAR 0 2
40128: PUSH
40129: FOR_IN
40130: IFFALSE 40195
// begin weapons := AvailableWeaponList ( k ) ;
40132: LD_ADDR_VAR 0 9
40136: PUSH
40137: LD_VAR 0 6
40141: PPUSH
40142: CALL_OW 478
40146: ST_TO_ADDR
// if not weapons then
40147: LD_VAR 0 9
40151: NOT
40152: IFFALSE 40156
// continue ;
40154: GO 40129
// if weapon in weapons then
40156: LD_VAR 0 8
40160: PUSH
40161: LD_VAR 0 9
40165: IN
40166: IFFALSE 40193
// begin result := [ i , weapon ] ;
40168: LD_ADDR_VAR 0 3
40172: PUSH
40173: LD_VAR 0 4
40177: PUSH
40178: LD_VAR 0 8
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: ST_TO_ADDR
// exit ;
40187: POP
40188: POP
40189: POP
40190: POP
40191: GO 40201
// end ; end ;
40193: GO 40129
40195: POP
40196: POP
// end ;
40197: GO 40015
40199: POP
40200: POP
// end ;
40201: LD_VAR 0 3
40205: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40206: LD_INT 0
40208: PPUSH
// if not side or side > 8 then
40209: LD_VAR 0 3
40213: NOT
40214: PUSH
40215: LD_VAR 0 3
40219: PUSH
40220: LD_INT 8
40222: GREATER
40223: OR
40224: IFFALSE 40228
// exit ;
40226: GO 40287
// if not range then
40228: LD_VAR 0 4
40232: NOT
40233: IFFALSE 40244
// range := - 12 ;
40235: LD_ADDR_VAR 0 4
40239: PUSH
40240: LD_INT 12
40242: NEG
40243: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40244: LD_VAR 0 1
40248: PPUSH
40249: LD_VAR 0 2
40253: PPUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: LD_VAR 0 4
40263: PPUSH
40264: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40268: LD_VAR 0 1
40272: PPUSH
40273: LD_VAR 0 2
40277: PPUSH
40278: LD_VAR 0 3
40282: PPUSH
40283: CALL_OW 331
// end ;
40287: LD_VAR 0 5
40291: RET
// export function Video ( mode ) ; begin
40292: LD_INT 0
40294: PPUSH
// ingame_video = mode ;
40295: LD_ADDR_OWVAR 52
40299: PUSH
40300: LD_VAR 0 1
40304: ST_TO_ADDR
// interface_hidden = mode ;
40305: LD_ADDR_OWVAR 54
40309: PUSH
40310: LD_VAR 0 1
40314: ST_TO_ADDR
// end ;
40315: LD_VAR 0 2
40319: RET
// export function Join ( array , element ) ; begin
40320: LD_INT 0
40322: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_VAR 0 1
40332: PPUSH
40333: LD_VAR 0 1
40337: PUSH
40338: LD_INT 1
40340: PLUS
40341: PPUSH
40342: LD_VAR 0 2
40346: PPUSH
40347: CALL_OW 1
40351: ST_TO_ADDR
// end ;
40352: LD_VAR 0 3
40356: RET
// export function JoinUnion ( array , element ) ; begin
40357: LD_INT 0
40359: PPUSH
// result := array union element ;
40360: LD_ADDR_VAR 0 3
40364: PUSH
40365: LD_VAR 0 1
40369: PUSH
40370: LD_VAR 0 2
40374: UNION
40375: ST_TO_ADDR
// end ;
40376: LD_VAR 0 3
40380: RET
// export function GetBehemoths ( side ) ; begin
40381: LD_INT 0
40383: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40384: LD_ADDR_VAR 0 2
40388: PUSH
40389: LD_INT 22
40391: PUSH
40392: LD_VAR 0 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 31
40403: PUSH
40404: LD_INT 25
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PPUSH
40415: CALL_OW 69
40419: ST_TO_ADDR
// end ;
40420: LD_VAR 0 2
40424: RET
// export function Shuffle ( array ) ; var i , index ; begin
40425: LD_INT 0
40427: PPUSH
40428: PPUSH
40429: PPUSH
// result := [ ] ;
40430: LD_ADDR_VAR 0 2
40434: PUSH
40435: EMPTY
40436: ST_TO_ADDR
// if not array then
40437: LD_VAR 0 1
40441: NOT
40442: IFFALSE 40446
// exit ;
40444: GO 40545
// Randomize ;
40446: CALL_OW 10
// for i = array downto 1 do
40450: LD_ADDR_VAR 0 3
40454: PUSH
40455: DOUBLE
40456: LD_VAR 0 1
40460: INC
40461: ST_TO_ADDR
40462: LD_INT 1
40464: PUSH
40465: FOR_DOWNTO
40466: IFFALSE 40543
// begin index := rand ( 1 , array ) ;
40468: LD_ADDR_VAR 0 4
40472: PUSH
40473: LD_INT 1
40475: PPUSH
40476: LD_VAR 0 1
40480: PPUSH
40481: CALL_OW 12
40485: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40486: LD_ADDR_VAR 0 2
40490: PUSH
40491: LD_VAR 0 2
40495: PPUSH
40496: LD_VAR 0 2
40500: PUSH
40501: LD_INT 1
40503: PLUS
40504: PPUSH
40505: LD_VAR 0 1
40509: PUSH
40510: LD_VAR 0 4
40514: ARRAY
40515: PPUSH
40516: CALL_OW 2
40520: ST_TO_ADDR
// array := Delete ( array , index ) ;
40521: LD_ADDR_VAR 0 1
40525: PUSH
40526: LD_VAR 0 1
40530: PPUSH
40531: LD_VAR 0 4
40535: PPUSH
40536: CALL_OW 3
40540: ST_TO_ADDR
// end ;
40541: GO 40465
40543: POP
40544: POP
// end ;
40545: LD_VAR 0 2
40549: RET
// export function GetBaseMaterials ( base ) ; begin
40550: LD_INT 0
40552: PPUSH
// result := [ 0 , 0 , 0 ] ;
40553: LD_ADDR_VAR 0 2
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: ST_TO_ADDR
// if not base then
40572: LD_VAR 0 1
40576: NOT
40577: IFFALSE 40581
// exit ;
40579: GO 40630
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40581: LD_ADDR_VAR 0 2
40585: PUSH
40586: LD_VAR 0 1
40590: PPUSH
40591: LD_INT 1
40593: PPUSH
40594: CALL_OW 275
40598: PUSH
40599: LD_VAR 0 1
40603: PPUSH
40604: LD_INT 2
40606: PPUSH
40607: CALL_OW 275
40611: PUSH
40612: LD_VAR 0 1
40616: PPUSH
40617: LD_INT 3
40619: PPUSH
40620: CALL_OW 275
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: LIST
40629: ST_TO_ADDR
// end ;
40630: LD_VAR 0 2
40634: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40635: LD_INT 0
40637: PPUSH
40638: PPUSH
// result := array ;
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_VAR 0 1
40648: ST_TO_ADDR
// if size > 0 then
40649: LD_VAR 0 2
40653: PUSH
40654: LD_INT 0
40656: GREATER
40657: IFFALSE 40703
// for i := array downto size do
40659: LD_ADDR_VAR 0 4
40663: PUSH
40664: DOUBLE
40665: LD_VAR 0 1
40669: INC
40670: ST_TO_ADDR
40671: LD_VAR 0 2
40675: PUSH
40676: FOR_DOWNTO
40677: IFFALSE 40701
// result := Delete ( result , result ) ;
40679: LD_ADDR_VAR 0 3
40683: PUSH
40684: LD_VAR 0 3
40688: PPUSH
40689: LD_VAR 0 3
40693: PPUSH
40694: CALL_OW 3
40698: ST_TO_ADDR
40699: GO 40676
40701: POP
40702: POP
// end ;
40703: LD_VAR 0 3
40707: RET
// export function ComExit ( unit ) ; var tmp ; begin
40708: LD_INT 0
40710: PPUSH
40711: PPUSH
// if not IsInUnit ( unit ) then
40712: LD_VAR 0 1
40716: PPUSH
40717: CALL_OW 310
40721: NOT
40722: IFFALSE 40726
// exit ;
40724: GO 40786
// tmp := IsInUnit ( unit ) ;
40726: LD_ADDR_VAR 0 3
40730: PUSH
40731: LD_VAR 0 1
40735: PPUSH
40736: CALL_OW 310
40740: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40741: LD_VAR 0 3
40745: PPUSH
40746: CALL_OW 247
40750: PUSH
40751: LD_INT 2
40753: EQUAL
40754: IFFALSE 40767
// ComExitVehicle ( unit ) else
40756: LD_VAR 0 1
40760: PPUSH
40761: CALL_OW 121
40765: GO 40776
// ComExitBuilding ( unit ) ;
40767: LD_VAR 0 1
40771: PPUSH
40772: CALL_OW 122
// result := tmp ;
40776: LD_ADDR_VAR 0 2
40780: PUSH
40781: LD_VAR 0 3
40785: ST_TO_ADDR
// end ;
40786: LD_VAR 0 2
40790: RET
// export function ResetHc ; begin
40791: LD_INT 0
40793: PPUSH
// InitHc ;
40794: CALL_OW 19
// hc_importance := 0 ;
40798: LD_ADDR_OWVAR 32
40802: PUSH
40803: LD_INT 0
40805: ST_TO_ADDR
// end ; end_of_file
40806: LD_VAR 0 1
40810: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
40811: LD_INT 0
40813: PPUSH
40814: PPUSH
// skirmish := false ;
40815: LD_ADDR_EXP 12
40819: PUSH
40820: LD_INT 0
40822: ST_TO_ADDR
// debug_mc := false ;
40823: LD_ADDR_EXP 13
40827: PUSH
40828: LD_INT 0
40830: ST_TO_ADDR
// mc_bases := [ ] ;
40831: LD_ADDR_EXP 14
40835: PUSH
40836: EMPTY
40837: ST_TO_ADDR
// mc_sides := [ ] ;
40838: LD_ADDR_EXP 40
40842: PUSH
40843: EMPTY
40844: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
40845: LD_ADDR_EXP 15
40849: PUSH
40850: EMPTY
40851: ST_TO_ADDR
// mc_building_repairs := [ ] ;
40852: LD_ADDR_EXP 16
40856: PUSH
40857: EMPTY
40858: ST_TO_ADDR
// mc_need_heal := [ ] ;
40859: LD_ADDR_EXP 17
40863: PUSH
40864: EMPTY
40865: ST_TO_ADDR
// mc_healers := [ ] ;
40866: LD_ADDR_EXP 18
40870: PUSH
40871: EMPTY
40872: ST_TO_ADDR
// mc_build_list := [ ] ;
40873: LD_ADDR_EXP 19
40877: PUSH
40878: EMPTY
40879: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
40880: LD_ADDR_EXP 46
40884: PUSH
40885: EMPTY
40886: ST_TO_ADDR
// mc_builders := [ ] ;
40887: LD_ADDR_EXP 20
40891: PUSH
40892: EMPTY
40893: ST_TO_ADDR
// mc_construct_list := [ ] ;
40894: LD_ADDR_EXP 21
40898: PUSH
40899: EMPTY
40900: ST_TO_ADDR
// mc_turret_list := [ ] ;
40901: LD_ADDR_EXP 22
40905: PUSH
40906: EMPTY
40907: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
40908: LD_ADDR_EXP 23
40912: PUSH
40913: EMPTY
40914: ST_TO_ADDR
// mc_miners := [ ] ;
40915: LD_ADDR_EXP 28
40919: PUSH
40920: EMPTY
40921: ST_TO_ADDR
// mc_mines := [ ] ;
40922: LD_ADDR_EXP 27
40926: PUSH
40927: EMPTY
40928: ST_TO_ADDR
// mc_minefields := [ ] ;
40929: LD_ADDR_EXP 29
40933: PUSH
40934: EMPTY
40935: ST_TO_ADDR
// mc_crates := [ ] ;
40936: LD_ADDR_EXP 30
40940: PUSH
40941: EMPTY
40942: ST_TO_ADDR
// mc_crates_collector := [ ] ;
40943: LD_ADDR_EXP 31
40947: PUSH
40948: EMPTY
40949: ST_TO_ADDR
// mc_crates_area := [ ] ;
40950: LD_ADDR_EXP 32
40954: PUSH
40955: EMPTY
40956: ST_TO_ADDR
// mc_vehicles := [ ] ;
40957: LD_ADDR_EXP 33
40961: PUSH
40962: EMPTY
40963: ST_TO_ADDR
// mc_attack := [ ] ;
40964: LD_ADDR_EXP 34
40968: PUSH
40969: EMPTY
40970: ST_TO_ADDR
// mc_produce := [ ] ;
40971: LD_ADDR_EXP 35
40975: PUSH
40976: EMPTY
40977: ST_TO_ADDR
// mc_defender := [ ] ;
40978: LD_ADDR_EXP 36
40982: PUSH
40983: EMPTY
40984: ST_TO_ADDR
// mc_parking := [ ] ;
40985: LD_ADDR_EXP 38
40989: PUSH
40990: EMPTY
40991: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
40992: LD_ADDR_EXP 24
40996: PUSH
40997: EMPTY
40998: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
40999: LD_ADDR_EXP 26
41003: PUSH
41004: EMPTY
41005: ST_TO_ADDR
// mc_scan := [ ] ;
41006: LD_ADDR_EXP 37
41010: PUSH
41011: EMPTY
41012: ST_TO_ADDR
// mc_scan_area := [ ] ;
41013: LD_ADDR_EXP 39
41017: PUSH
41018: EMPTY
41019: ST_TO_ADDR
// mc_tech := [ ] ;
41020: LD_ADDR_EXP 41
41024: PUSH
41025: EMPTY
41026: ST_TO_ADDR
// mc_class := [ ] ;
41027: LD_ADDR_EXP 55
41031: PUSH
41032: EMPTY
41033: ST_TO_ADDR
// mc_class_case_use := [ ] ;
41034: LD_ADDR_EXP 56
41038: PUSH
41039: EMPTY
41040: ST_TO_ADDR
// end ;
41041: LD_VAR 0 1
41045: RET
// export function MC_Kill ( base ) ; begin
41046: LD_INT 0
41048: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
41049: LD_ADDR_EXP 14
41053: PUSH
41054: LD_EXP 14
41058: PPUSH
41059: LD_VAR 0 1
41063: PPUSH
41064: EMPTY
41065: PPUSH
41066: CALL_OW 1
41070: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
41071: LD_ADDR_EXP 15
41075: PUSH
41076: LD_EXP 15
41080: PPUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: EMPTY
41087: PPUSH
41088: CALL_OW 1
41092: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
41093: LD_ADDR_EXP 16
41097: PUSH
41098: LD_EXP 16
41102: PPUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: EMPTY
41109: PPUSH
41110: CALL_OW 1
41114: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
41115: LD_ADDR_EXP 17
41119: PUSH
41120: LD_EXP 17
41124: PPUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: EMPTY
41131: PPUSH
41132: CALL_OW 1
41136: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
41137: LD_ADDR_EXP 18
41141: PUSH
41142: LD_EXP 18
41146: PPUSH
41147: LD_VAR 0 1
41151: PPUSH
41152: EMPTY
41153: PPUSH
41154: CALL_OW 1
41158: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
41159: LD_ADDR_EXP 19
41163: PUSH
41164: LD_EXP 19
41168: PPUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: EMPTY
41175: PPUSH
41176: CALL_OW 1
41180: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
41181: LD_ADDR_EXP 20
41185: PUSH
41186: LD_EXP 20
41190: PPUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: EMPTY
41197: PPUSH
41198: CALL_OW 1
41202: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
41203: LD_ADDR_EXP 21
41207: PUSH
41208: LD_EXP 21
41212: PPUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: EMPTY
41219: PPUSH
41220: CALL_OW 1
41224: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
41225: LD_ADDR_EXP 22
41229: PUSH
41230: LD_EXP 22
41234: PPUSH
41235: LD_VAR 0 1
41239: PPUSH
41240: EMPTY
41241: PPUSH
41242: CALL_OW 1
41246: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
41247: LD_ADDR_EXP 23
41251: PUSH
41252: LD_EXP 23
41256: PPUSH
41257: LD_VAR 0 1
41261: PPUSH
41262: EMPTY
41263: PPUSH
41264: CALL_OW 1
41268: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
41269: LD_ADDR_EXP 24
41273: PUSH
41274: LD_EXP 24
41278: PPUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: EMPTY
41285: PPUSH
41286: CALL_OW 1
41290: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
41291: LD_ADDR_EXP 25
41295: PUSH
41296: LD_EXP 25
41300: PPUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: LD_INT 0
41308: PPUSH
41309: CALL_OW 1
41313: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
41314: LD_ADDR_EXP 26
41318: PUSH
41319: LD_EXP 26
41323: PPUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: EMPTY
41330: PPUSH
41331: CALL_OW 1
41335: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
41336: LD_ADDR_EXP 27
41340: PUSH
41341: LD_EXP 27
41345: PPUSH
41346: LD_VAR 0 1
41350: PPUSH
41351: EMPTY
41352: PPUSH
41353: CALL_OW 1
41357: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
41358: LD_ADDR_EXP 28
41362: PUSH
41363: LD_EXP 28
41367: PPUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: EMPTY
41374: PPUSH
41375: CALL_OW 1
41379: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
41380: LD_ADDR_EXP 29
41384: PUSH
41385: LD_EXP 29
41389: PPUSH
41390: LD_VAR 0 1
41394: PPUSH
41395: EMPTY
41396: PPUSH
41397: CALL_OW 1
41401: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
41402: LD_ADDR_EXP 30
41406: PUSH
41407: LD_EXP 30
41411: PPUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: EMPTY
41418: PPUSH
41419: CALL_OW 1
41423: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
41424: LD_ADDR_EXP 31
41428: PUSH
41429: LD_EXP 31
41433: PPUSH
41434: LD_VAR 0 1
41438: PPUSH
41439: EMPTY
41440: PPUSH
41441: CALL_OW 1
41445: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
41446: LD_ADDR_EXP 32
41450: PUSH
41451: LD_EXP 32
41455: PPUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: EMPTY
41462: PPUSH
41463: CALL_OW 1
41467: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
41468: LD_ADDR_EXP 33
41472: PUSH
41473: LD_EXP 33
41477: PPUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: EMPTY
41484: PPUSH
41485: CALL_OW 1
41489: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
41490: LD_ADDR_EXP 34
41494: PUSH
41495: LD_EXP 34
41499: PPUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: EMPTY
41506: PPUSH
41507: CALL_OW 1
41511: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
41512: LD_ADDR_EXP 35
41516: PUSH
41517: LD_EXP 35
41521: PPUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: EMPTY
41528: PPUSH
41529: CALL_OW 1
41533: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
41534: LD_ADDR_EXP 36
41538: PUSH
41539: LD_EXP 36
41543: PPUSH
41544: LD_VAR 0 1
41548: PPUSH
41549: EMPTY
41550: PPUSH
41551: CALL_OW 1
41555: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
41556: LD_ADDR_EXP 37
41560: PUSH
41561: LD_EXP 37
41565: PPUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: EMPTY
41572: PPUSH
41573: CALL_OW 1
41577: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
41578: LD_ADDR_EXP 38
41582: PUSH
41583: LD_EXP 38
41587: PPUSH
41588: LD_VAR 0 1
41592: PPUSH
41593: EMPTY
41594: PPUSH
41595: CALL_OW 1
41599: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
41600: LD_ADDR_EXP 39
41604: PUSH
41605: LD_EXP 39
41609: PPUSH
41610: LD_VAR 0 1
41614: PPUSH
41615: EMPTY
41616: PPUSH
41617: CALL_OW 1
41621: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
41622: LD_ADDR_EXP 41
41626: PUSH
41627: LD_EXP 41
41631: PPUSH
41632: LD_VAR 0 1
41636: PPUSH
41637: EMPTY
41638: PPUSH
41639: CALL_OW 1
41643: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
41644: LD_ADDR_EXP 43
41648: PUSH
41649: LD_EXP 43
41653: PPUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: EMPTY
41660: PPUSH
41661: CALL_OW 1
41665: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
41666: LD_ADDR_EXP 44
41670: PUSH
41671: LD_EXP 44
41675: PPUSH
41676: LD_VAR 0 1
41680: PPUSH
41681: EMPTY
41682: PPUSH
41683: CALL_OW 1
41687: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
41688: LD_ADDR_EXP 45
41692: PUSH
41693: LD_EXP 45
41697: PPUSH
41698: LD_VAR 0 1
41702: PPUSH
41703: EMPTY
41704: PPUSH
41705: CALL_OW 1
41709: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
41710: LD_ADDR_EXP 46
41714: PUSH
41715: LD_EXP 46
41719: PPUSH
41720: LD_VAR 0 1
41724: PPUSH
41725: EMPTY
41726: PPUSH
41727: CALL_OW 1
41731: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
41732: LD_ADDR_EXP 47
41736: PUSH
41737: LD_EXP 47
41741: PPUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: EMPTY
41748: PPUSH
41749: CALL_OW 1
41753: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
41754: LD_ADDR_EXP 48
41758: PUSH
41759: LD_EXP 48
41763: PPUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: EMPTY
41770: PPUSH
41771: CALL_OW 1
41775: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
41776: LD_ADDR_EXP 49
41780: PUSH
41781: LD_EXP 49
41785: PPUSH
41786: LD_VAR 0 1
41790: PPUSH
41791: EMPTY
41792: PPUSH
41793: CALL_OW 1
41797: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
41798: LD_ADDR_EXP 50
41802: PUSH
41803: LD_EXP 50
41807: PPUSH
41808: LD_VAR 0 1
41812: PPUSH
41813: EMPTY
41814: PPUSH
41815: CALL_OW 1
41819: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
41820: LD_ADDR_EXP 51
41824: PUSH
41825: LD_EXP 51
41829: PPUSH
41830: LD_VAR 0 1
41834: PPUSH
41835: EMPTY
41836: PPUSH
41837: CALL_OW 1
41841: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
41842: LD_ADDR_EXP 52
41846: PUSH
41847: LD_EXP 52
41851: PPUSH
41852: LD_VAR 0 1
41856: PPUSH
41857: EMPTY
41858: PPUSH
41859: CALL_OW 1
41863: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
41864: LD_ADDR_EXP 53
41868: PUSH
41869: LD_EXP 53
41873: PPUSH
41874: LD_VAR 0 1
41878: PPUSH
41879: EMPTY
41880: PPUSH
41881: CALL_OW 1
41885: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
41886: LD_ADDR_EXP 54
41890: PUSH
41891: LD_EXP 54
41895: PPUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: EMPTY
41902: PPUSH
41903: CALL_OW 1
41907: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
41908: LD_ADDR_EXP 55
41912: PUSH
41913: LD_EXP 55
41917: PPUSH
41918: LD_VAR 0 1
41922: PPUSH
41923: EMPTY
41924: PPUSH
41925: CALL_OW 1
41929: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
41930: LD_ADDR_EXP 56
41934: PUSH
41935: LD_EXP 56
41939: PPUSH
41940: LD_VAR 0 1
41944: PPUSH
41945: LD_INT 0
41947: PPUSH
41948: CALL_OW 1
41952: ST_TO_ADDR
// end ;
41953: LD_VAR 0 2
41957: RET
// export function MC_Add ( side , units ) ; var base ; begin
41958: LD_INT 0
41960: PPUSH
41961: PPUSH
// base := mc_bases + 1 ;
41962: LD_ADDR_VAR 0 4
41966: PUSH
41967: LD_EXP 14
41971: PUSH
41972: LD_INT 1
41974: PLUS
41975: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
41976: LD_ADDR_EXP 40
41980: PUSH
41981: LD_EXP 40
41985: PPUSH
41986: LD_VAR 0 4
41990: PPUSH
41991: LD_VAR 0 1
41995: PPUSH
41996: CALL_OW 1
42000: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
42001: LD_ADDR_EXP 14
42005: PUSH
42006: LD_EXP 14
42010: PPUSH
42011: LD_VAR 0 4
42015: PPUSH
42016: LD_VAR 0 2
42020: PPUSH
42021: CALL_OW 1
42025: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
42026: LD_ADDR_EXP 15
42030: PUSH
42031: LD_EXP 15
42035: PPUSH
42036: LD_VAR 0 4
42040: PPUSH
42041: EMPTY
42042: PPUSH
42043: CALL_OW 1
42047: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
42048: LD_ADDR_EXP 16
42052: PUSH
42053: LD_EXP 16
42057: PPUSH
42058: LD_VAR 0 4
42062: PPUSH
42063: EMPTY
42064: PPUSH
42065: CALL_OW 1
42069: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
42070: LD_ADDR_EXP 17
42074: PUSH
42075: LD_EXP 17
42079: PPUSH
42080: LD_VAR 0 4
42084: PPUSH
42085: EMPTY
42086: PPUSH
42087: CALL_OW 1
42091: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
42092: LD_ADDR_EXP 18
42096: PUSH
42097: LD_EXP 18
42101: PPUSH
42102: LD_VAR 0 4
42106: PPUSH
42107: EMPTY
42108: PPUSH
42109: CALL_OW 1
42113: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
42114: LD_ADDR_EXP 19
42118: PUSH
42119: LD_EXP 19
42123: PPUSH
42124: LD_VAR 0 4
42128: PPUSH
42129: EMPTY
42130: PPUSH
42131: CALL_OW 1
42135: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
42136: LD_ADDR_EXP 20
42140: PUSH
42141: LD_EXP 20
42145: PPUSH
42146: LD_VAR 0 4
42150: PPUSH
42151: EMPTY
42152: PPUSH
42153: CALL_OW 1
42157: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
42158: LD_ADDR_EXP 21
42162: PUSH
42163: LD_EXP 21
42167: PPUSH
42168: LD_VAR 0 4
42172: PPUSH
42173: EMPTY
42174: PPUSH
42175: CALL_OW 1
42179: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
42180: LD_ADDR_EXP 22
42184: PUSH
42185: LD_EXP 22
42189: PPUSH
42190: LD_VAR 0 4
42194: PPUSH
42195: EMPTY
42196: PPUSH
42197: CALL_OW 1
42201: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
42202: LD_ADDR_EXP 23
42206: PUSH
42207: LD_EXP 23
42211: PPUSH
42212: LD_VAR 0 4
42216: PPUSH
42217: EMPTY
42218: PPUSH
42219: CALL_OW 1
42223: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
42224: LD_ADDR_EXP 24
42228: PUSH
42229: LD_EXP 24
42233: PPUSH
42234: LD_VAR 0 4
42238: PPUSH
42239: EMPTY
42240: PPUSH
42241: CALL_OW 1
42245: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
42246: LD_ADDR_EXP 25
42250: PUSH
42251: LD_EXP 25
42255: PPUSH
42256: LD_VAR 0 4
42260: PPUSH
42261: LD_INT 0
42263: PPUSH
42264: CALL_OW 1
42268: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
42269: LD_ADDR_EXP 26
42273: PUSH
42274: LD_EXP 26
42278: PPUSH
42279: LD_VAR 0 4
42283: PPUSH
42284: EMPTY
42285: PPUSH
42286: CALL_OW 1
42290: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
42291: LD_ADDR_EXP 27
42295: PUSH
42296: LD_EXP 27
42300: PPUSH
42301: LD_VAR 0 4
42305: PPUSH
42306: EMPTY
42307: PPUSH
42308: CALL_OW 1
42312: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
42313: LD_ADDR_EXP 28
42317: PUSH
42318: LD_EXP 28
42322: PPUSH
42323: LD_VAR 0 4
42327: PPUSH
42328: EMPTY
42329: PPUSH
42330: CALL_OW 1
42334: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
42335: LD_ADDR_EXP 29
42339: PUSH
42340: LD_EXP 29
42344: PPUSH
42345: LD_VAR 0 4
42349: PPUSH
42350: EMPTY
42351: PPUSH
42352: CALL_OW 1
42356: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
42357: LD_ADDR_EXP 30
42361: PUSH
42362: LD_EXP 30
42366: PPUSH
42367: LD_VAR 0 4
42371: PPUSH
42372: EMPTY
42373: PPUSH
42374: CALL_OW 1
42378: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
42379: LD_ADDR_EXP 31
42383: PUSH
42384: LD_EXP 31
42388: PPUSH
42389: LD_VAR 0 4
42393: PPUSH
42394: EMPTY
42395: PPUSH
42396: CALL_OW 1
42400: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
42401: LD_ADDR_EXP 32
42405: PUSH
42406: LD_EXP 32
42410: PPUSH
42411: LD_VAR 0 4
42415: PPUSH
42416: EMPTY
42417: PPUSH
42418: CALL_OW 1
42422: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
42423: LD_ADDR_EXP 33
42427: PUSH
42428: LD_EXP 33
42432: PPUSH
42433: LD_VAR 0 4
42437: PPUSH
42438: EMPTY
42439: PPUSH
42440: CALL_OW 1
42444: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
42445: LD_ADDR_EXP 34
42449: PUSH
42450: LD_EXP 34
42454: PPUSH
42455: LD_VAR 0 4
42459: PPUSH
42460: EMPTY
42461: PPUSH
42462: CALL_OW 1
42466: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
42467: LD_ADDR_EXP 35
42471: PUSH
42472: LD_EXP 35
42476: PPUSH
42477: LD_VAR 0 4
42481: PPUSH
42482: EMPTY
42483: PPUSH
42484: CALL_OW 1
42488: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
42489: LD_ADDR_EXP 36
42493: PUSH
42494: LD_EXP 36
42498: PPUSH
42499: LD_VAR 0 4
42503: PPUSH
42504: EMPTY
42505: PPUSH
42506: CALL_OW 1
42510: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
42511: LD_ADDR_EXP 37
42515: PUSH
42516: LD_EXP 37
42520: PPUSH
42521: LD_VAR 0 4
42525: PPUSH
42526: EMPTY
42527: PPUSH
42528: CALL_OW 1
42532: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
42533: LD_ADDR_EXP 38
42537: PUSH
42538: LD_EXP 38
42542: PPUSH
42543: LD_VAR 0 4
42547: PPUSH
42548: EMPTY
42549: PPUSH
42550: CALL_OW 1
42554: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
42555: LD_ADDR_EXP 39
42559: PUSH
42560: LD_EXP 39
42564: PPUSH
42565: LD_VAR 0 4
42569: PPUSH
42570: EMPTY
42571: PPUSH
42572: CALL_OW 1
42576: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
42577: LD_ADDR_EXP 41
42581: PUSH
42582: LD_EXP 41
42586: PPUSH
42587: LD_VAR 0 4
42591: PPUSH
42592: EMPTY
42593: PPUSH
42594: CALL_OW 1
42598: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
42599: LD_ADDR_EXP 43
42603: PUSH
42604: LD_EXP 43
42608: PPUSH
42609: LD_VAR 0 4
42613: PPUSH
42614: EMPTY
42615: PPUSH
42616: CALL_OW 1
42620: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
42621: LD_ADDR_EXP 44
42625: PUSH
42626: LD_EXP 44
42630: PPUSH
42631: LD_VAR 0 4
42635: PPUSH
42636: EMPTY
42637: PPUSH
42638: CALL_OW 1
42642: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
42643: LD_ADDR_EXP 45
42647: PUSH
42648: LD_EXP 45
42652: PPUSH
42653: LD_VAR 0 4
42657: PPUSH
42658: EMPTY
42659: PPUSH
42660: CALL_OW 1
42664: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
42665: LD_ADDR_EXP 46
42669: PUSH
42670: LD_EXP 46
42674: PPUSH
42675: LD_VAR 0 4
42679: PPUSH
42680: EMPTY
42681: PPUSH
42682: CALL_OW 1
42686: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
42687: LD_ADDR_EXP 47
42691: PUSH
42692: LD_EXP 47
42696: PPUSH
42697: LD_VAR 0 4
42701: PPUSH
42702: EMPTY
42703: PPUSH
42704: CALL_OW 1
42708: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
42709: LD_ADDR_EXP 48
42713: PUSH
42714: LD_EXP 48
42718: PPUSH
42719: LD_VAR 0 4
42723: PPUSH
42724: EMPTY
42725: PPUSH
42726: CALL_OW 1
42730: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
42731: LD_ADDR_EXP 49
42735: PUSH
42736: LD_EXP 49
42740: PPUSH
42741: LD_VAR 0 4
42745: PPUSH
42746: EMPTY
42747: PPUSH
42748: CALL_OW 1
42752: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
42753: LD_ADDR_EXP 50
42757: PUSH
42758: LD_EXP 50
42762: PPUSH
42763: LD_VAR 0 4
42767: PPUSH
42768: EMPTY
42769: PPUSH
42770: CALL_OW 1
42774: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
42775: LD_ADDR_EXP 51
42779: PUSH
42780: LD_EXP 51
42784: PPUSH
42785: LD_VAR 0 4
42789: PPUSH
42790: EMPTY
42791: PPUSH
42792: CALL_OW 1
42796: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
42797: LD_ADDR_EXP 52
42801: PUSH
42802: LD_EXP 52
42806: PPUSH
42807: LD_VAR 0 4
42811: PPUSH
42812: EMPTY
42813: PPUSH
42814: CALL_OW 1
42818: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
42819: LD_ADDR_EXP 53
42823: PUSH
42824: LD_EXP 53
42828: PPUSH
42829: LD_VAR 0 4
42833: PPUSH
42834: EMPTY
42835: PPUSH
42836: CALL_OW 1
42840: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
42841: LD_ADDR_EXP 54
42845: PUSH
42846: LD_EXP 54
42850: PPUSH
42851: LD_VAR 0 4
42855: PPUSH
42856: EMPTY
42857: PPUSH
42858: CALL_OW 1
42862: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
42863: LD_ADDR_EXP 55
42867: PUSH
42868: LD_EXP 55
42872: PPUSH
42873: LD_VAR 0 4
42877: PPUSH
42878: EMPTY
42879: PPUSH
42880: CALL_OW 1
42884: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
42885: LD_ADDR_EXP 56
42889: PUSH
42890: LD_EXP 56
42894: PPUSH
42895: LD_VAR 0 4
42899: PPUSH
42900: LD_INT 0
42902: PPUSH
42903: CALL_OW 1
42907: ST_TO_ADDR
// result := base ;
42908: LD_ADDR_VAR 0 3
42912: PUSH
42913: LD_VAR 0 4
42917: ST_TO_ADDR
// end ;
42918: LD_VAR 0 3
42922: RET
// export function MC_Start ( ) ; var i ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
// for i = 1 to mc_bases do
42927: LD_ADDR_VAR 0 2
42931: PUSH
42932: DOUBLE
42933: LD_INT 1
42935: DEC
42936: ST_TO_ADDR
42937: LD_EXP 14
42941: PUSH
42942: FOR_TO
42943: IFFALSE 44020
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
42945: LD_ADDR_EXP 14
42949: PUSH
42950: LD_EXP 14
42954: PPUSH
42955: LD_VAR 0 2
42959: PPUSH
42960: LD_EXP 14
42964: PUSH
42965: LD_VAR 0 2
42969: ARRAY
42970: PUSH
42971: LD_INT 0
42973: DIFF
42974: PPUSH
42975: CALL_OW 1
42979: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
42980: LD_ADDR_EXP 15
42984: PUSH
42985: LD_EXP 15
42989: PPUSH
42990: LD_VAR 0 2
42994: PPUSH
42995: EMPTY
42996: PPUSH
42997: CALL_OW 1
43001: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
43002: LD_ADDR_EXP 16
43006: PUSH
43007: LD_EXP 16
43011: PPUSH
43012: LD_VAR 0 2
43016: PPUSH
43017: EMPTY
43018: PPUSH
43019: CALL_OW 1
43023: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
43024: LD_ADDR_EXP 17
43028: PUSH
43029: LD_EXP 17
43033: PPUSH
43034: LD_VAR 0 2
43038: PPUSH
43039: EMPTY
43040: PPUSH
43041: CALL_OW 1
43045: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
43046: LD_ADDR_EXP 18
43050: PUSH
43051: LD_EXP 18
43055: PPUSH
43056: LD_VAR 0 2
43060: PPUSH
43061: EMPTY
43062: PUSH
43063: EMPTY
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PPUSH
43069: CALL_OW 1
43073: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
43074: LD_ADDR_EXP 19
43078: PUSH
43079: LD_EXP 19
43083: PPUSH
43084: LD_VAR 0 2
43088: PPUSH
43089: EMPTY
43090: PPUSH
43091: CALL_OW 1
43095: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
43096: LD_ADDR_EXP 46
43100: PUSH
43101: LD_EXP 46
43105: PPUSH
43106: LD_VAR 0 2
43110: PPUSH
43111: EMPTY
43112: PPUSH
43113: CALL_OW 1
43117: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
43118: LD_ADDR_EXP 20
43122: PUSH
43123: LD_EXP 20
43127: PPUSH
43128: LD_VAR 0 2
43132: PPUSH
43133: EMPTY
43134: PPUSH
43135: CALL_OW 1
43139: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
43140: LD_ADDR_EXP 21
43144: PUSH
43145: LD_EXP 21
43149: PPUSH
43150: LD_VAR 0 2
43154: PPUSH
43155: EMPTY
43156: PPUSH
43157: CALL_OW 1
43161: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
43162: LD_ADDR_EXP 22
43166: PUSH
43167: LD_EXP 22
43171: PPUSH
43172: LD_VAR 0 2
43176: PPUSH
43177: LD_EXP 14
43181: PUSH
43182: LD_VAR 0 2
43186: ARRAY
43187: PPUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 30
43193: PUSH
43194: LD_INT 32
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 30
43203: PUSH
43204: LD_INT 33
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: LIST
43215: PPUSH
43216: CALL_OW 72
43220: PPUSH
43221: CALL_OW 1
43225: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
43226: LD_ADDR_EXP 23
43230: PUSH
43231: LD_EXP 23
43235: PPUSH
43236: LD_VAR 0 2
43240: PPUSH
43241: LD_EXP 14
43245: PUSH
43246: LD_VAR 0 2
43250: ARRAY
43251: PPUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 30
43257: PUSH
43258: LD_INT 32
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 30
43267: PUSH
43268: LD_INT 31
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 58
43282: PUSH
43283: EMPTY
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PPUSH
43290: CALL_OW 72
43294: PPUSH
43295: CALL_OW 1
43299: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
43300: LD_ADDR_EXP 24
43304: PUSH
43305: LD_EXP 24
43309: PPUSH
43310: LD_VAR 0 2
43314: PPUSH
43315: EMPTY
43316: PPUSH
43317: CALL_OW 1
43321: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
43322: LD_ADDR_EXP 28
43326: PUSH
43327: LD_EXP 28
43331: PPUSH
43332: LD_VAR 0 2
43336: PPUSH
43337: EMPTY
43338: PPUSH
43339: CALL_OW 1
43343: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
43344: LD_ADDR_EXP 27
43348: PUSH
43349: LD_EXP 27
43353: PPUSH
43354: LD_VAR 0 2
43358: PPUSH
43359: EMPTY
43360: PPUSH
43361: CALL_OW 1
43365: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
43366: LD_ADDR_EXP 29
43370: PUSH
43371: LD_EXP 29
43375: PPUSH
43376: LD_VAR 0 2
43380: PPUSH
43381: EMPTY
43382: PPUSH
43383: CALL_OW 1
43387: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
43388: LD_ADDR_EXP 30
43392: PUSH
43393: LD_EXP 30
43397: PPUSH
43398: LD_VAR 0 2
43402: PPUSH
43403: EMPTY
43404: PPUSH
43405: CALL_OW 1
43409: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
43410: LD_ADDR_EXP 31
43414: PUSH
43415: LD_EXP 31
43419: PPUSH
43420: LD_VAR 0 2
43424: PPUSH
43425: EMPTY
43426: PPUSH
43427: CALL_OW 1
43431: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
43432: LD_ADDR_EXP 32
43436: PUSH
43437: LD_EXP 32
43441: PPUSH
43442: LD_VAR 0 2
43446: PPUSH
43447: EMPTY
43448: PPUSH
43449: CALL_OW 1
43453: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
43454: LD_ADDR_EXP 33
43458: PUSH
43459: LD_EXP 33
43463: PPUSH
43464: LD_VAR 0 2
43468: PPUSH
43469: EMPTY
43470: PPUSH
43471: CALL_OW 1
43475: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
43476: LD_ADDR_EXP 34
43480: PUSH
43481: LD_EXP 34
43485: PPUSH
43486: LD_VAR 0 2
43490: PPUSH
43491: EMPTY
43492: PPUSH
43493: CALL_OW 1
43497: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
43498: LD_ADDR_EXP 35
43502: PUSH
43503: LD_EXP 35
43507: PPUSH
43508: LD_VAR 0 2
43512: PPUSH
43513: EMPTY
43514: PPUSH
43515: CALL_OW 1
43519: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43520: LD_ADDR_EXP 36
43524: PUSH
43525: LD_EXP 36
43529: PPUSH
43530: LD_VAR 0 2
43534: PPUSH
43535: EMPTY
43536: PPUSH
43537: CALL_OW 1
43541: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
43542: LD_ADDR_EXP 25
43546: PUSH
43547: LD_EXP 25
43551: PPUSH
43552: LD_VAR 0 2
43556: PPUSH
43557: LD_INT 0
43559: PPUSH
43560: CALL_OW 1
43564: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
43565: LD_ADDR_EXP 38
43569: PUSH
43570: LD_EXP 38
43574: PPUSH
43575: LD_VAR 0 2
43579: PPUSH
43580: LD_INT 0
43582: PPUSH
43583: CALL_OW 1
43587: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
43588: LD_ADDR_EXP 26
43592: PUSH
43593: LD_EXP 26
43597: PPUSH
43598: LD_VAR 0 2
43602: PPUSH
43603: EMPTY
43604: PPUSH
43605: CALL_OW 1
43609: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
43610: LD_ADDR_EXP 37
43614: PUSH
43615: LD_EXP 37
43619: PPUSH
43620: LD_VAR 0 2
43624: PPUSH
43625: LD_INT 0
43627: PPUSH
43628: CALL_OW 1
43632: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
43633: LD_ADDR_EXP 39
43637: PUSH
43638: LD_EXP 39
43642: PPUSH
43643: LD_VAR 0 2
43647: PPUSH
43648: EMPTY
43649: PPUSH
43650: CALL_OW 1
43654: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
43655: LD_ADDR_EXP 42
43659: PUSH
43660: LD_EXP 42
43664: PPUSH
43665: LD_VAR 0 2
43669: PPUSH
43670: LD_INT 0
43672: PPUSH
43673: CALL_OW 1
43677: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
43678: LD_ADDR_EXP 43
43682: PUSH
43683: LD_EXP 43
43687: PPUSH
43688: LD_VAR 0 2
43692: PPUSH
43693: EMPTY
43694: PPUSH
43695: CALL_OW 1
43699: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43700: LD_ADDR_EXP 44
43704: PUSH
43705: LD_EXP 44
43709: PPUSH
43710: LD_VAR 0 2
43714: PPUSH
43715: EMPTY
43716: PPUSH
43717: CALL_OW 1
43721: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
43722: LD_ADDR_EXP 45
43726: PUSH
43727: LD_EXP 45
43731: PPUSH
43732: LD_VAR 0 2
43736: PPUSH
43737: EMPTY
43738: PPUSH
43739: CALL_OW 1
43743: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
43744: LD_ADDR_EXP 47
43748: PUSH
43749: LD_EXP 47
43753: PPUSH
43754: LD_VAR 0 2
43758: PPUSH
43759: LD_EXP 14
43763: PUSH
43764: LD_VAR 0 2
43768: ARRAY
43769: PPUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 30
43775: PUSH
43776: LD_INT 6
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 30
43785: PUSH
43786: LD_INT 7
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 30
43795: PUSH
43796: LD_INT 8
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: PPUSH
43809: CALL_OW 72
43813: PPUSH
43814: CALL_OW 1
43818: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
43819: LD_ADDR_EXP 48
43823: PUSH
43824: LD_EXP 48
43828: PPUSH
43829: LD_VAR 0 2
43833: PPUSH
43834: EMPTY
43835: PPUSH
43836: CALL_OW 1
43840: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
43841: LD_ADDR_EXP 49
43845: PUSH
43846: LD_EXP 49
43850: PPUSH
43851: LD_VAR 0 2
43855: PPUSH
43856: EMPTY
43857: PPUSH
43858: CALL_OW 1
43862: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
43863: LD_ADDR_EXP 50
43867: PUSH
43868: LD_EXP 50
43872: PPUSH
43873: LD_VAR 0 2
43877: PPUSH
43878: EMPTY
43879: PPUSH
43880: CALL_OW 1
43884: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
43885: LD_ADDR_EXP 51
43889: PUSH
43890: LD_EXP 51
43894: PPUSH
43895: LD_VAR 0 2
43899: PPUSH
43900: EMPTY
43901: PPUSH
43902: CALL_OW 1
43906: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
43907: LD_ADDR_EXP 52
43911: PUSH
43912: LD_EXP 52
43916: PPUSH
43917: LD_VAR 0 2
43921: PPUSH
43922: EMPTY
43923: PPUSH
43924: CALL_OW 1
43928: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
43929: LD_ADDR_EXP 53
43933: PUSH
43934: LD_EXP 53
43938: PPUSH
43939: LD_VAR 0 2
43943: PPUSH
43944: EMPTY
43945: PPUSH
43946: CALL_OW 1
43950: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
43951: LD_ADDR_EXP 54
43955: PUSH
43956: LD_EXP 54
43960: PPUSH
43961: LD_VAR 0 2
43965: PPUSH
43966: EMPTY
43967: PPUSH
43968: CALL_OW 1
43972: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
43973: LD_ADDR_EXP 55
43977: PUSH
43978: LD_EXP 55
43982: PPUSH
43983: LD_VAR 0 2
43987: PPUSH
43988: EMPTY
43989: PPUSH
43990: CALL_OW 1
43994: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
43995: LD_ADDR_EXP 56
43999: PUSH
44000: LD_EXP 56
44004: PPUSH
44005: LD_VAR 0 2
44009: PPUSH
44010: LD_INT 0
44012: PPUSH
44013: CALL_OW 1
44017: ST_TO_ADDR
// end ;
44018: GO 42942
44020: POP
44021: POP
// MC_InitSides ( ) ;
44022: CALL 44308 0 0
// MC_InitResearch ( ) ;
44026: CALL 44047 0 0
// CustomInitMacro ( ) ;
44030: CALL 201 0 0
// skirmish := true ;
44034: LD_ADDR_EXP 12
44038: PUSH
44039: LD_INT 1
44041: ST_TO_ADDR
// end ;
44042: LD_VAR 0 1
44046: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
44047: LD_INT 0
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
// if not mc_bases then
44055: LD_EXP 14
44059: NOT
44060: IFFALSE 44064
// exit ;
44062: GO 44303
// for i = 1 to 8 do
44064: LD_ADDR_VAR 0 2
44068: PUSH
44069: DOUBLE
44070: LD_INT 1
44072: DEC
44073: ST_TO_ADDR
44074: LD_INT 8
44076: PUSH
44077: FOR_TO
44078: IFFALSE 44104
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
44080: LD_ADDR_EXP 41
44084: PUSH
44085: LD_EXP 41
44089: PPUSH
44090: LD_VAR 0 2
44094: PPUSH
44095: EMPTY
44096: PPUSH
44097: CALL_OW 1
44101: ST_TO_ADDR
44102: GO 44077
44104: POP
44105: POP
// tmp := [ ] ;
44106: LD_ADDR_VAR 0 5
44110: PUSH
44111: EMPTY
44112: ST_TO_ADDR
// for i = 1 to mc_sides do
44113: LD_ADDR_VAR 0 2
44117: PUSH
44118: DOUBLE
44119: LD_INT 1
44121: DEC
44122: ST_TO_ADDR
44123: LD_EXP 40
44127: PUSH
44128: FOR_TO
44129: IFFALSE 44187
// if not mc_sides [ i ] in tmp then
44131: LD_EXP 40
44135: PUSH
44136: LD_VAR 0 2
44140: ARRAY
44141: PUSH
44142: LD_VAR 0 5
44146: IN
44147: NOT
44148: IFFALSE 44185
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
44150: LD_ADDR_VAR 0 5
44154: PUSH
44155: LD_VAR 0 5
44159: PPUSH
44160: LD_VAR 0 5
44164: PUSH
44165: LD_INT 1
44167: PLUS
44168: PPUSH
44169: LD_EXP 40
44173: PUSH
44174: LD_VAR 0 2
44178: ARRAY
44179: PPUSH
44180: CALL_OW 2
44184: ST_TO_ADDR
44185: GO 44128
44187: POP
44188: POP
// if not tmp then
44189: LD_VAR 0 5
44193: NOT
44194: IFFALSE 44198
// exit ;
44196: GO 44303
// for j in tmp do
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_VAR 0 5
44207: PUSH
44208: FOR_IN
44209: IFFALSE 44301
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
44211: LD_ADDR_VAR 0 6
44215: PUSH
44216: LD_INT 22
44218: PUSH
44219: LD_VAR 0 3
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PPUSH
44228: CALL_OW 69
44232: ST_TO_ADDR
// if not un then
44233: LD_VAR 0 6
44237: NOT
44238: IFFALSE 44242
// continue ;
44240: GO 44208
// nation := GetNation ( un [ 1 ] ) ;
44242: LD_ADDR_VAR 0 4
44246: PUSH
44247: LD_VAR 0 6
44251: PUSH
44252: LD_INT 1
44254: ARRAY
44255: PPUSH
44256: CALL_OW 248
44260: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
44261: LD_ADDR_EXP 41
44265: PUSH
44266: LD_EXP 41
44270: PPUSH
44271: LD_VAR 0 3
44275: PPUSH
44276: LD_VAR 0 3
44280: PPUSH
44281: LD_VAR 0 4
44285: PPUSH
44286: LD_INT 1
44288: PPUSH
44289: CALL 4513 0 3
44293: PPUSH
44294: CALL_OW 1
44298: ST_TO_ADDR
// end ;
44299: GO 44208
44301: POP
44302: POP
// end ;
44303: LD_VAR 0 1
44307: RET
// export function MC_InitSides ( ) ; var i ; begin
44308: LD_INT 0
44310: PPUSH
44311: PPUSH
// if not mc_bases then
44312: LD_EXP 14
44316: NOT
44317: IFFALSE 44321
// exit ;
44319: GO 44395
// for i = 1 to mc_bases do
44321: LD_ADDR_VAR 0 2
44325: PUSH
44326: DOUBLE
44327: LD_INT 1
44329: DEC
44330: ST_TO_ADDR
44331: LD_EXP 14
44335: PUSH
44336: FOR_TO
44337: IFFALSE 44393
// if mc_bases [ i ] then
44339: LD_EXP 14
44343: PUSH
44344: LD_VAR 0 2
44348: ARRAY
44349: IFFALSE 44391
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
44351: LD_ADDR_EXP 40
44355: PUSH
44356: LD_EXP 40
44360: PPUSH
44361: LD_VAR 0 2
44365: PPUSH
44366: LD_EXP 14
44370: PUSH
44371: LD_VAR 0 2
44375: ARRAY
44376: PUSH
44377: LD_INT 1
44379: ARRAY
44380: PPUSH
44381: CALL_OW 255
44385: PPUSH
44386: CALL_OW 1
44390: ST_TO_ADDR
44391: GO 44336
44393: POP
44394: POP
// end ;
44395: LD_VAR 0 1
44399: RET
// every 0 0$01 trigger skirmish do
44400: LD_EXP 12
44404: IFFALSE 44558
44406: GO 44408
44408: DISABLE
// begin enable ;
44409: ENABLE
// MC_CheckBuildings ( ) ;
44410: CALL 49056 0 0
// MC_CheckPeopleLife ( ) ;
44414: CALL 49181 0 0
// RaiseSailEvent ( 100 ) ;
44418: LD_INT 100
44420: PPUSH
44421: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
44425: LD_INT 103
44427: PPUSH
44428: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
44432: LD_INT 104
44434: PPUSH
44435: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
44439: LD_INT 105
44441: PPUSH
44442: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
44446: LD_INT 106
44448: PPUSH
44449: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
44453: LD_INT 107
44455: PPUSH
44456: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
44460: LD_INT 108
44462: PPUSH
44463: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
44467: LD_INT 109
44469: PPUSH
44470: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
44474: LD_INT 110
44476: PPUSH
44477: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
44481: LD_INT 111
44483: PPUSH
44484: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
44488: LD_INT 112
44490: PPUSH
44491: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
44495: LD_INT 113
44497: PPUSH
44498: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
44502: LD_INT 120
44504: PPUSH
44505: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
44509: LD_INT 121
44511: PPUSH
44512: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
44516: LD_INT 122
44518: PPUSH
44519: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
44523: LD_INT 123
44525: PPUSH
44526: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
44530: LD_INT 124
44532: PPUSH
44533: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
44537: LD_INT 125
44539: PPUSH
44540: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
44544: LD_INT 126
44546: PPUSH
44547: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
44551: LD_INT 200
44553: PPUSH
44554: CALL_OW 427
// end ;
44558: END
// on SailEvent ( event ) do begin if event < 100 then
44559: LD_VAR 0 1
44563: PUSH
44564: LD_INT 100
44566: LESS
44567: IFFALSE 44578
// CustomEvent ( event ) ;
44569: LD_VAR 0 1
44573: PPUSH
44574: CALL 4412 0 1
// if event = 100 then
44578: LD_VAR 0 1
44582: PUSH
44583: LD_INT 100
44585: EQUAL
44586: IFFALSE 44592
// MC_ClassManager ( ) ;
44588: CALL 44984 0 0
// if event = 101 then
44592: LD_VAR 0 1
44596: PUSH
44597: LD_INT 101
44599: EQUAL
44600: IFFALSE 44606
// MC_RepairBuildings ( ) ;
44602: CALL 49766 0 0
// if event = 102 then
44606: LD_VAR 0 1
44610: PUSH
44611: LD_INT 102
44613: EQUAL
44614: IFFALSE 44620
// MC_Heal ( ) ;
44616: CALL 50625 0 0
// if event = 103 then
44620: LD_VAR 0 1
44624: PUSH
44625: LD_INT 103
44627: EQUAL
44628: IFFALSE 44634
// MC_Build ( ) ;
44630: CALL 51047 0 0
// if event = 104 then
44634: LD_VAR 0 1
44638: PUSH
44639: LD_INT 104
44641: EQUAL
44642: IFFALSE 44648
// MC_TurretWeapon ( ) ;
44644: CALL 52660 0 0
// if event = 105 then
44648: LD_VAR 0 1
44652: PUSH
44653: LD_INT 105
44655: EQUAL
44656: IFFALSE 44662
// MC_BuildUpgrade ( ) ;
44658: CALL 52211 0 0
// if event = 106 then
44662: LD_VAR 0 1
44666: PUSH
44667: LD_INT 106
44669: EQUAL
44670: IFFALSE 44676
// MC_PlantMines ( ) ;
44672: CALL 53090 0 0
// if event = 107 then
44676: LD_VAR 0 1
44680: PUSH
44681: LD_INT 107
44683: EQUAL
44684: IFFALSE 44690
// MC_CollectCrates ( ) ;
44686: CALL 53888 0 0
// if event = 108 then
44690: LD_VAR 0 1
44694: PUSH
44695: LD_INT 108
44697: EQUAL
44698: IFFALSE 44704
// MC_LinkRemoteControl ( ) ;
44700: CALL 55664 0 0
// if event = 109 then
44704: LD_VAR 0 1
44708: PUSH
44709: LD_INT 109
44711: EQUAL
44712: IFFALSE 44718
// MC_ProduceVehicle ( ) ;
44714: CALL 55845 0 0
// if event = 110 then
44718: LD_VAR 0 1
44722: PUSH
44723: LD_INT 110
44725: EQUAL
44726: IFFALSE 44732
// MC_SendAttack ( ) ;
44728: CALL 56311 0 0
// if event = 111 then
44732: LD_VAR 0 1
44736: PUSH
44737: LD_INT 111
44739: EQUAL
44740: IFFALSE 44746
// MC_Defend ( ) ;
44742: CALL 56419 0 0
// if event = 112 then
44746: LD_VAR 0 1
44750: PUSH
44751: LD_INT 112
44753: EQUAL
44754: IFFALSE 44760
// MC_Research ( ) ;
44756: CALL 57024 0 0
// if event = 113 then
44760: LD_VAR 0 1
44764: PUSH
44765: LD_INT 113
44767: EQUAL
44768: IFFALSE 44774
// MC_MinesTrigger ( ) ;
44770: CALL 58138 0 0
// if event = 120 then
44774: LD_VAR 0 1
44778: PUSH
44779: LD_INT 120
44781: EQUAL
44782: IFFALSE 44788
// MC_RepairVehicle ( ) ;
44784: CALL 58237 0 0
// if event = 121 then
44788: LD_VAR 0 1
44792: PUSH
44793: LD_INT 121
44795: EQUAL
44796: IFFALSE 44802
// MC_TameApe ( ) ;
44798: CALL 58967 0 0
// if event = 122 then
44802: LD_VAR 0 1
44806: PUSH
44807: LD_INT 122
44809: EQUAL
44810: IFFALSE 44816
// MC_ChangeApeClass ( ) ;
44812: CALL 59796 0 0
// if event = 123 then
44816: LD_VAR 0 1
44820: PUSH
44821: LD_INT 123
44823: EQUAL
44824: IFFALSE 44830
// MC_Bazooka ( ) ;
44826: CALL 60446 0 0
// if event = 124 then
44830: LD_VAR 0 1
44834: PUSH
44835: LD_INT 124
44837: EQUAL
44838: IFFALSE 44844
// MC_TeleportExit ( ) ;
44840: CALL 60644 0 0
// if event = 125 then
44844: LD_VAR 0 1
44848: PUSH
44849: LD_INT 125
44851: EQUAL
44852: IFFALSE 44858
// MC_Deposits ( ) ;
44854: CALL 61291 0 0
// if event = 126 then
44858: LD_VAR 0 1
44862: PUSH
44863: LD_INT 126
44865: EQUAL
44866: IFFALSE 44872
// MC_RemoteDriver ( ) ;
44868: CALL 61916 0 0
// if event = 200 then
44872: LD_VAR 0 1
44876: PUSH
44877: LD_INT 200
44879: EQUAL
44880: IFFALSE 44886
// MC_Idle ( ) ;
44882: CALL 63865 0 0
// end ;
44886: PPOPN 1
44888: END
// export function MC_Reset ( base , tag ) ; var i ; begin
44889: LD_INT 0
44891: PPUSH
44892: PPUSH
// if not mc_bases [ base ] or not tag then
44893: LD_EXP 14
44897: PUSH
44898: LD_VAR 0 1
44902: ARRAY
44903: NOT
44904: PUSH
44905: LD_VAR 0 2
44909: NOT
44910: OR
44911: IFFALSE 44915
// exit ;
44913: GO 44979
// for i in mc_bases [ base ] union mc_ape [ base ] do
44915: LD_ADDR_VAR 0 4
44919: PUSH
44920: LD_EXP 14
44924: PUSH
44925: LD_VAR 0 1
44929: ARRAY
44930: PUSH
44931: LD_EXP 43
44935: PUSH
44936: LD_VAR 0 1
44940: ARRAY
44941: UNION
44942: PUSH
44943: FOR_IN
44944: IFFALSE 44977
// if GetTag ( i ) = tag then
44946: LD_VAR 0 4
44950: PPUSH
44951: CALL_OW 110
44955: PUSH
44956: LD_VAR 0 2
44960: EQUAL
44961: IFFALSE 44975
// SetTag ( i , 0 ) ;
44963: LD_VAR 0 4
44967: PPUSH
44968: LD_INT 0
44970: PPUSH
44971: CALL_OW 109
44975: GO 44943
44977: POP
44978: POP
// end ;
44979: LD_VAR 0 3
44983: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
44984: LD_INT 0
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
// if not mc_bases then
44994: LD_EXP 14
44998: NOT
44999: IFFALSE 45003
// exit ;
45001: GO 45461
// for i = 1 to mc_bases do
45003: LD_ADDR_VAR 0 2
45007: PUSH
45008: DOUBLE
45009: LD_INT 1
45011: DEC
45012: ST_TO_ADDR
45013: LD_EXP 14
45017: PUSH
45018: FOR_TO
45019: IFFALSE 45459
// begin tmp := MC_ClassCheckReq ( i ) ;
45021: LD_ADDR_VAR 0 4
45025: PUSH
45026: LD_VAR 0 2
45030: PPUSH
45031: CALL 45466 0 1
45035: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
45036: LD_ADDR_EXP 55
45040: PUSH
45041: LD_EXP 55
45045: PPUSH
45046: LD_VAR 0 2
45050: PPUSH
45051: LD_VAR 0 4
45055: PPUSH
45056: CALL_OW 1
45060: ST_TO_ADDR
// if not tmp then
45061: LD_VAR 0 4
45065: NOT
45066: IFFALSE 45070
// continue ;
45068: GO 45018
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
45070: LD_ADDR_VAR 0 6
45074: PUSH
45075: LD_EXP 14
45079: PUSH
45080: LD_VAR 0 2
45084: ARRAY
45085: PPUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 30
45091: PUSH
45092: LD_INT 4
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 30
45101: PUSH
45102: LD_INT 5
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: PPUSH
45114: CALL_OW 72
45118: PUSH
45119: LD_EXP 14
45123: PUSH
45124: LD_VAR 0 2
45128: ARRAY
45129: PPUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 30
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 30
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: PPUSH
45158: CALL_OW 72
45162: PUSH
45163: LD_EXP 14
45167: PUSH
45168: LD_VAR 0 2
45172: ARRAY
45173: PPUSH
45174: LD_INT 30
45176: PUSH
45177: LD_INT 3
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PPUSH
45184: CALL_OW 72
45188: PUSH
45189: LD_EXP 14
45193: PUSH
45194: LD_VAR 0 2
45198: ARRAY
45199: PPUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 30
45205: PUSH
45206: LD_INT 6
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 30
45215: PUSH
45216: LD_INT 7
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 30
45225: PUSH
45226: LD_INT 8
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: PPUSH
45239: CALL_OW 72
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: ST_TO_ADDR
// for j = 1 to 4 do
45250: LD_ADDR_VAR 0 3
45254: PUSH
45255: DOUBLE
45256: LD_INT 1
45258: DEC
45259: ST_TO_ADDR
45260: LD_INT 4
45262: PUSH
45263: FOR_TO
45264: IFFALSE 45455
// begin if not tmp [ j ] then
45266: LD_VAR 0 4
45270: PUSH
45271: LD_VAR 0 3
45275: ARRAY
45276: NOT
45277: IFFALSE 45281
// continue ;
45279: GO 45263
// for p in tmp [ j ] do
45281: LD_ADDR_VAR 0 5
45285: PUSH
45286: LD_VAR 0 4
45290: PUSH
45291: LD_VAR 0 3
45295: ARRAY
45296: PUSH
45297: FOR_IN
45298: IFFALSE 45451
// begin if not b [ j ] then
45300: LD_VAR 0 6
45304: PUSH
45305: LD_VAR 0 3
45309: ARRAY
45310: NOT
45311: IFFALSE 45315
// break ;
45313: GO 45451
// e := 0 ;
45315: LD_ADDR_VAR 0 7
45319: PUSH
45320: LD_INT 0
45322: ST_TO_ADDR
// for k in b [ j ] do
45323: LD_ADDR_VAR 0 8
45327: PUSH
45328: LD_VAR 0 6
45332: PUSH
45333: LD_VAR 0 3
45337: ARRAY
45338: PUSH
45339: FOR_IN
45340: IFFALSE 45367
// if IsNotFull ( k ) then
45342: LD_VAR 0 8
45346: PPUSH
45347: CALL 6662 0 1
45351: IFFALSE 45365
// begin e := k ;
45353: LD_ADDR_VAR 0 7
45357: PUSH
45358: LD_VAR 0 8
45362: ST_TO_ADDR
// break ;
45363: GO 45367
// end ;
45365: GO 45339
45367: POP
45368: POP
// if e and not UnitGoingToBuilding ( p , e ) then
45369: LD_VAR 0 7
45373: PUSH
45374: LD_VAR 0 5
45378: PPUSH
45379: LD_VAR 0 7
45383: PPUSH
45384: CALL 39082 0 2
45388: NOT
45389: AND
45390: IFFALSE 45449
// begin if IsInUnit ( p ) then
45392: LD_VAR 0 5
45396: PPUSH
45397: CALL_OW 310
45401: IFFALSE 45412
// ComExitBuilding ( p ) ;
45403: LD_VAR 0 5
45407: PPUSH
45408: CALL_OW 122
// ComEnterUnit ( p , e ) ;
45412: LD_VAR 0 5
45416: PPUSH
45417: LD_VAR 0 7
45421: PPUSH
45422: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
45426: LD_VAR 0 5
45430: PPUSH
45431: LD_VAR 0 3
45435: PPUSH
45436: CALL_OW 183
// AddComExitBuilding ( p ) ;
45440: LD_VAR 0 5
45444: PPUSH
45445: CALL_OW 182
// end ; end ;
45449: GO 45297
45451: POP
45452: POP
// end ;
45453: GO 45263
45455: POP
45456: POP
// end ;
45457: GO 45018
45459: POP
45460: POP
// end ;
45461: LD_VAR 0 1
45465: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
45466: LD_INT 0
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45480: LD_VAR 0 1
45484: NOT
45485: PUSH
45486: LD_EXP 14
45490: PUSH
45491: LD_VAR 0 1
45495: ARRAY
45496: NOT
45497: OR
45498: PUSH
45499: LD_EXP 14
45503: PUSH
45504: LD_VAR 0 1
45508: ARRAY
45509: PPUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 30
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 30
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: PPUSH
45538: CALL_OW 72
45542: NOT
45543: OR
45544: IFFALSE 45548
// exit ;
45546: GO 49051
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45548: LD_ADDR_VAR 0 4
45552: PUSH
45553: LD_EXP 14
45557: PUSH
45558: LD_VAR 0 1
45562: ARRAY
45563: PPUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 25
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 25
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 25
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 25
45599: PUSH
45600: LD_INT 4
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 25
45609: PUSH
45610: LD_INT 5
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 25
45619: PUSH
45620: LD_INT 8
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 25
45629: PUSH
45630: LD_INT 9
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: PPUSH
45647: CALL_OW 72
45651: ST_TO_ADDR
// if not tmp then
45652: LD_VAR 0 4
45656: NOT
45657: IFFALSE 45661
// exit ;
45659: GO 49051
// for i in tmp do
45661: LD_ADDR_VAR 0 3
45665: PUSH
45666: LD_VAR 0 4
45670: PUSH
45671: FOR_IN
45672: IFFALSE 45703
// if GetTag ( i ) then
45674: LD_VAR 0 3
45678: PPUSH
45679: CALL_OW 110
45683: IFFALSE 45701
// tmp := tmp diff i ;
45685: LD_ADDR_VAR 0 4
45689: PUSH
45690: LD_VAR 0 4
45694: PUSH
45695: LD_VAR 0 3
45699: DIFF
45700: ST_TO_ADDR
45701: GO 45671
45703: POP
45704: POP
// if not tmp then
45705: LD_VAR 0 4
45709: NOT
45710: IFFALSE 45714
// exit ;
45712: GO 49051
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45714: LD_ADDR_VAR 0 5
45718: PUSH
45719: LD_EXP 14
45723: PUSH
45724: LD_VAR 0 1
45728: ARRAY
45729: PPUSH
45730: LD_INT 2
45732: PUSH
45733: LD_INT 25
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 25
45745: PUSH
45746: LD_INT 5
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 25
45755: PUSH
45756: LD_INT 8
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 25
45765: PUSH
45766: LD_INT 9
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: PPUSH
45780: CALL_OW 72
45784: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
45785: LD_ADDR_VAR 0 6
45789: PUSH
45790: LD_EXP 14
45794: PUSH
45795: LD_VAR 0 1
45799: ARRAY
45800: PPUSH
45801: LD_INT 25
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PPUSH
45811: CALL_OW 72
45815: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
45816: LD_ADDR_VAR 0 7
45820: PUSH
45821: LD_EXP 14
45825: PUSH
45826: LD_VAR 0 1
45830: ARRAY
45831: PPUSH
45832: LD_INT 25
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PPUSH
45842: CALL_OW 72
45846: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
45847: LD_ADDR_VAR 0 8
45851: PUSH
45852: LD_EXP 14
45856: PUSH
45857: LD_VAR 0 1
45861: ARRAY
45862: PPUSH
45863: LD_INT 25
45865: PUSH
45866: LD_INT 4
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 24
45875: PUSH
45876: LD_INT 251
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PPUSH
45887: CALL_OW 72
45891: ST_TO_ADDR
// if mc_scan [ base ] then
45892: LD_EXP 37
45896: PUSH
45897: LD_VAR 0 1
45901: ARRAY
45902: IFFALSE 46363
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
45904: LD_ADDR_EXP 56
45908: PUSH
45909: LD_EXP 56
45913: PPUSH
45914: LD_VAR 0 1
45918: PPUSH
45919: LD_INT 4
45921: PPUSH
45922: CALL_OW 1
45926: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45927: LD_ADDR_VAR 0 12
45931: PUSH
45932: LD_EXP 14
45936: PUSH
45937: LD_VAR 0 1
45941: ARRAY
45942: PPUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 30
45948: PUSH
45949: LD_INT 4
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 30
45958: PUSH
45959: LD_INT 5
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: PPUSH
45971: CALL_OW 72
45975: ST_TO_ADDR
// if not b then
45976: LD_VAR 0 12
45980: NOT
45981: IFFALSE 45985
// exit ;
45983: GO 49051
// p := [ ] ;
45985: LD_ADDR_VAR 0 11
45989: PUSH
45990: EMPTY
45991: ST_TO_ADDR
// if sci >= 2 then
45992: LD_VAR 0 8
45996: PUSH
45997: LD_INT 2
45999: GREATEREQUAL
46000: IFFALSE 46031
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
46002: LD_ADDR_VAR 0 8
46006: PUSH
46007: LD_VAR 0 8
46011: PUSH
46012: LD_INT 1
46014: ARRAY
46015: PUSH
46016: LD_VAR 0 8
46020: PUSH
46021: LD_INT 2
46023: ARRAY
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: ST_TO_ADDR
46029: GO 46092
// if sci = 1 then
46031: LD_VAR 0 8
46035: PUSH
46036: LD_INT 1
46038: EQUAL
46039: IFFALSE 46060
// sci := [ sci [ 1 ] ] else
46041: LD_ADDR_VAR 0 8
46045: PUSH
46046: LD_VAR 0 8
46050: PUSH
46051: LD_INT 1
46053: ARRAY
46054: PUSH
46055: EMPTY
46056: LIST
46057: ST_TO_ADDR
46058: GO 46092
// if sci = 0 then
46060: LD_VAR 0 8
46064: PUSH
46065: LD_INT 0
46067: EQUAL
46068: IFFALSE 46092
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
46070: LD_ADDR_VAR 0 11
46074: PUSH
46075: LD_VAR 0 4
46079: PPUSH
46080: LD_INT 4
46082: PPUSH
46083: CALL 38945 0 2
46087: PUSH
46088: LD_INT 1
46090: ARRAY
46091: ST_TO_ADDR
// if eng > 4 then
46092: LD_VAR 0 6
46096: PUSH
46097: LD_INT 4
46099: GREATER
46100: IFFALSE 46146
// for i = eng downto 4 do
46102: LD_ADDR_VAR 0 3
46106: PUSH
46107: DOUBLE
46108: LD_VAR 0 6
46112: INC
46113: ST_TO_ADDR
46114: LD_INT 4
46116: PUSH
46117: FOR_DOWNTO
46118: IFFALSE 46144
// eng := eng diff eng [ i ] ;
46120: LD_ADDR_VAR 0 6
46124: PUSH
46125: LD_VAR 0 6
46129: PUSH
46130: LD_VAR 0 6
46134: PUSH
46135: LD_VAR 0 3
46139: ARRAY
46140: DIFF
46141: ST_TO_ADDR
46142: GO 46117
46144: POP
46145: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
46146: LD_ADDR_VAR 0 4
46150: PUSH
46151: LD_VAR 0 4
46155: PUSH
46156: LD_VAR 0 5
46160: PUSH
46161: LD_VAR 0 6
46165: UNION
46166: PUSH
46167: LD_VAR 0 7
46171: UNION
46172: PUSH
46173: LD_VAR 0 8
46177: UNION
46178: DIFF
46179: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
46180: LD_ADDR_VAR 0 13
46184: PUSH
46185: LD_EXP 14
46189: PUSH
46190: LD_VAR 0 1
46194: ARRAY
46195: PPUSH
46196: LD_INT 2
46198: PUSH
46199: LD_INT 30
46201: PUSH
46202: LD_INT 32
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 30
46211: PUSH
46212: LD_INT 31
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: PPUSH
46224: CALL_OW 72
46228: PUSH
46229: LD_EXP 14
46233: PUSH
46234: LD_VAR 0 1
46238: ARRAY
46239: PPUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 30
46245: PUSH
46246: LD_INT 4
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 30
46255: PUSH
46256: LD_INT 5
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: PPUSH
46268: CALL_OW 72
46272: PUSH
46273: LD_INT 6
46275: MUL
46276: PLUS
46277: ST_TO_ADDR
// if bcount < tmp then
46278: LD_VAR 0 13
46282: PUSH
46283: LD_VAR 0 4
46287: LESS
46288: IFFALSE 46334
// for i = tmp downto bcount do
46290: LD_ADDR_VAR 0 3
46294: PUSH
46295: DOUBLE
46296: LD_VAR 0 4
46300: INC
46301: ST_TO_ADDR
46302: LD_VAR 0 13
46306: PUSH
46307: FOR_DOWNTO
46308: IFFALSE 46332
// tmp := Delete ( tmp , tmp ) ;
46310: LD_ADDR_VAR 0 4
46314: PUSH
46315: LD_VAR 0 4
46319: PPUSH
46320: LD_VAR 0 4
46324: PPUSH
46325: CALL_OW 3
46329: ST_TO_ADDR
46330: GO 46307
46332: POP
46333: POP
// result := [ tmp , 0 , 0 , p ] ;
46334: LD_ADDR_VAR 0 2
46338: PUSH
46339: LD_VAR 0 4
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_VAR 0 11
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: ST_TO_ADDR
// exit ;
46361: GO 49051
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46363: LD_EXP 14
46367: PUSH
46368: LD_VAR 0 1
46372: ARRAY
46373: PPUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 30
46379: PUSH
46380: LD_INT 6
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 30
46389: PUSH
46390: LD_INT 7
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 30
46399: PUSH
46400: LD_INT 8
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: PPUSH
46413: CALL_OW 72
46417: NOT
46418: PUSH
46419: LD_EXP 14
46423: PUSH
46424: LD_VAR 0 1
46428: ARRAY
46429: PPUSH
46430: LD_INT 30
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PPUSH
46440: CALL_OW 72
46444: NOT
46445: AND
46446: IFFALSE 46518
// begin if eng = tmp then
46448: LD_VAR 0 6
46452: PUSH
46453: LD_VAR 0 4
46457: EQUAL
46458: IFFALSE 46462
// exit ;
46460: GO 49051
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
46462: LD_ADDR_EXP 56
46466: PUSH
46467: LD_EXP 56
46471: PPUSH
46472: LD_VAR 0 1
46476: PPUSH
46477: LD_INT 1
46479: PPUSH
46480: CALL_OW 1
46484: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
46485: LD_ADDR_VAR 0 2
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_VAR 0 4
46497: PUSH
46498: LD_VAR 0 6
46502: DIFF
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: ST_TO_ADDR
// exit ;
46516: GO 49051
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46518: LD_EXP 41
46522: PUSH
46523: LD_EXP 40
46527: PUSH
46528: LD_VAR 0 1
46532: ARRAY
46533: ARRAY
46534: PUSH
46535: LD_EXP 14
46539: PUSH
46540: LD_VAR 0 1
46544: ARRAY
46545: PPUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 30
46551: PUSH
46552: LD_INT 6
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 30
46561: PUSH
46562: LD_INT 7
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 30
46571: PUSH
46572: LD_INT 8
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: PPUSH
46585: CALL_OW 72
46589: AND
46590: PUSH
46591: LD_EXP 14
46595: PUSH
46596: LD_VAR 0 1
46600: ARRAY
46601: PPUSH
46602: LD_INT 30
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PPUSH
46612: CALL_OW 72
46616: NOT
46617: AND
46618: IFFALSE 46832
// begin if sci >= 6 then
46620: LD_VAR 0 8
46624: PUSH
46625: LD_INT 6
46627: GREATEREQUAL
46628: IFFALSE 46632
// exit ;
46630: GO 49051
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
46632: LD_ADDR_EXP 56
46636: PUSH
46637: LD_EXP 56
46641: PPUSH
46642: LD_VAR 0 1
46646: PPUSH
46647: LD_INT 2
46649: PPUSH
46650: CALL_OW 1
46654: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
46655: LD_ADDR_VAR 0 9
46659: PUSH
46660: LD_VAR 0 4
46664: PUSH
46665: LD_VAR 0 8
46669: DIFF
46670: PPUSH
46671: LD_INT 4
46673: PPUSH
46674: CALL 38945 0 2
46678: ST_TO_ADDR
// p := [ ] ;
46679: LD_ADDR_VAR 0 11
46683: PUSH
46684: EMPTY
46685: ST_TO_ADDR
// if sci < 6 and sort > 6 then
46686: LD_VAR 0 8
46690: PUSH
46691: LD_INT 6
46693: LESS
46694: PUSH
46695: LD_VAR 0 9
46699: PUSH
46700: LD_INT 6
46702: GREATER
46703: AND
46704: IFFALSE 46785
// begin for i = 1 to 6 - sci do
46706: LD_ADDR_VAR 0 3
46710: PUSH
46711: DOUBLE
46712: LD_INT 1
46714: DEC
46715: ST_TO_ADDR
46716: LD_INT 6
46718: PUSH
46719: LD_VAR 0 8
46723: MINUS
46724: PUSH
46725: FOR_TO
46726: IFFALSE 46781
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
46728: LD_ADDR_VAR 0 11
46732: PUSH
46733: LD_VAR 0 11
46737: PPUSH
46738: LD_VAR 0 11
46742: PUSH
46743: LD_INT 1
46745: PLUS
46746: PPUSH
46747: LD_VAR 0 9
46751: PUSH
46752: LD_INT 1
46754: ARRAY
46755: PPUSH
46756: CALL_OW 2
46760: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
46761: LD_ADDR_VAR 0 9
46765: PUSH
46766: LD_VAR 0 9
46770: PPUSH
46771: LD_INT 1
46773: PPUSH
46774: CALL_OW 3
46778: ST_TO_ADDR
// end ;
46779: GO 46725
46781: POP
46782: POP
// end else
46783: GO 46805
// if sort then
46785: LD_VAR 0 9
46789: IFFALSE 46805
// p := sort [ 1 ] ;
46791: LD_ADDR_VAR 0 11
46795: PUSH
46796: LD_VAR 0 9
46800: PUSH
46801: LD_INT 1
46803: ARRAY
46804: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
46805: LD_ADDR_VAR 0 2
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_VAR 0 11
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: ST_TO_ADDR
// exit ;
46830: GO 49051
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46832: LD_EXP 41
46836: PUSH
46837: LD_EXP 40
46841: PUSH
46842: LD_VAR 0 1
46846: ARRAY
46847: ARRAY
46848: PUSH
46849: LD_EXP 14
46853: PUSH
46854: LD_VAR 0 1
46858: ARRAY
46859: PPUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 30
46865: PUSH
46866: LD_INT 6
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 30
46875: PUSH
46876: LD_INT 7
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 30
46885: PUSH
46886: LD_INT 8
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: PPUSH
46899: CALL_OW 72
46903: AND
46904: PUSH
46905: LD_EXP 14
46909: PUSH
46910: LD_VAR 0 1
46914: ARRAY
46915: PPUSH
46916: LD_INT 30
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PPUSH
46926: CALL_OW 72
46930: AND
46931: IFFALSE 47665
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
46933: LD_ADDR_EXP 56
46937: PUSH
46938: LD_EXP 56
46942: PPUSH
46943: LD_VAR 0 1
46947: PPUSH
46948: LD_INT 3
46950: PPUSH
46951: CALL_OW 1
46955: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
46956: LD_ADDR_VAR 0 2
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// if not eng then
46979: LD_VAR 0 6
46983: NOT
46984: IFFALSE 47047
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
46986: LD_ADDR_VAR 0 11
46990: PUSH
46991: LD_VAR 0 4
46995: PPUSH
46996: LD_INT 2
46998: PPUSH
46999: CALL 38945 0 2
47003: PUSH
47004: LD_INT 1
47006: ARRAY
47007: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
47008: LD_ADDR_VAR 0 2
47012: PUSH
47013: LD_VAR 0 2
47017: PPUSH
47018: LD_INT 2
47020: PPUSH
47021: LD_VAR 0 11
47025: PPUSH
47026: CALL_OW 1
47030: ST_TO_ADDR
// tmp := tmp diff p ;
47031: LD_ADDR_VAR 0 4
47035: PUSH
47036: LD_VAR 0 4
47040: PUSH
47041: LD_VAR 0 11
47045: DIFF
47046: ST_TO_ADDR
// end ; if tmp and sci < 6 then
47047: LD_VAR 0 4
47051: PUSH
47052: LD_VAR 0 8
47056: PUSH
47057: LD_INT 6
47059: LESS
47060: AND
47061: IFFALSE 47249
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
47063: LD_ADDR_VAR 0 9
47067: PUSH
47068: LD_VAR 0 4
47072: PUSH
47073: LD_VAR 0 8
47077: PUSH
47078: LD_VAR 0 7
47082: UNION
47083: DIFF
47084: PPUSH
47085: LD_INT 4
47087: PPUSH
47088: CALL 38945 0 2
47092: ST_TO_ADDR
// p := [ ] ;
47093: LD_ADDR_VAR 0 11
47097: PUSH
47098: EMPTY
47099: ST_TO_ADDR
// if sort then
47100: LD_VAR 0 9
47104: IFFALSE 47220
// for i = 1 to 6 - sci do
47106: LD_ADDR_VAR 0 3
47110: PUSH
47111: DOUBLE
47112: LD_INT 1
47114: DEC
47115: ST_TO_ADDR
47116: LD_INT 6
47118: PUSH
47119: LD_VAR 0 8
47123: MINUS
47124: PUSH
47125: FOR_TO
47126: IFFALSE 47218
// begin if i = sort then
47128: LD_VAR 0 3
47132: PUSH
47133: LD_VAR 0 9
47137: EQUAL
47138: IFFALSE 47142
// break ;
47140: GO 47218
// if GetClass ( i ) = 4 then
47142: LD_VAR 0 3
47146: PPUSH
47147: CALL_OW 257
47151: PUSH
47152: LD_INT 4
47154: EQUAL
47155: IFFALSE 47159
// continue ;
47157: GO 47125
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47159: LD_ADDR_VAR 0 11
47163: PUSH
47164: LD_VAR 0 11
47168: PPUSH
47169: LD_VAR 0 11
47173: PUSH
47174: LD_INT 1
47176: PLUS
47177: PPUSH
47178: LD_VAR 0 9
47182: PUSH
47183: LD_VAR 0 3
47187: ARRAY
47188: PPUSH
47189: CALL_OW 2
47193: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47194: LD_ADDR_VAR 0 4
47198: PUSH
47199: LD_VAR 0 4
47203: PUSH
47204: LD_VAR 0 9
47208: PUSH
47209: LD_VAR 0 3
47213: ARRAY
47214: DIFF
47215: ST_TO_ADDR
// end ;
47216: GO 47125
47218: POP
47219: POP
// if p then
47220: LD_VAR 0 11
47224: IFFALSE 47249
// result := Replace ( result , 4 , p ) ;
47226: LD_ADDR_VAR 0 2
47230: PUSH
47231: LD_VAR 0 2
47235: PPUSH
47236: LD_INT 4
47238: PPUSH
47239: LD_VAR 0 11
47243: PPUSH
47244: CALL_OW 1
47248: ST_TO_ADDR
// end ; if tmp and mech < 6 then
47249: LD_VAR 0 4
47253: PUSH
47254: LD_VAR 0 7
47258: PUSH
47259: LD_INT 6
47261: LESS
47262: AND
47263: IFFALSE 47451
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
47265: LD_ADDR_VAR 0 9
47269: PUSH
47270: LD_VAR 0 4
47274: PUSH
47275: LD_VAR 0 8
47279: PUSH
47280: LD_VAR 0 7
47284: UNION
47285: DIFF
47286: PPUSH
47287: LD_INT 3
47289: PPUSH
47290: CALL 38945 0 2
47294: ST_TO_ADDR
// p := [ ] ;
47295: LD_ADDR_VAR 0 11
47299: PUSH
47300: EMPTY
47301: ST_TO_ADDR
// if sort then
47302: LD_VAR 0 9
47306: IFFALSE 47422
// for i = 1 to 6 - mech do
47308: LD_ADDR_VAR 0 3
47312: PUSH
47313: DOUBLE
47314: LD_INT 1
47316: DEC
47317: ST_TO_ADDR
47318: LD_INT 6
47320: PUSH
47321: LD_VAR 0 7
47325: MINUS
47326: PUSH
47327: FOR_TO
47328: IFFALSE 47420
// begin if i = sort then
47330: LD_VAR 0 3
47334: PUSH
47335: LD_VAR 0 9
47339: EQUAL
47340: IFFALSE 47344
// break ;
47342: GO 47420
// if GetClass ( i ) = 3 then
47344: LD_VAR 0 3
47348: PPUSH
47349: CALL_OW 257
47353: PUSH
47354: LD_INT 3
47356: EQUAL
47357: IFFALSE 47361
// continue ;
47359: GO 47327
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47361: LD_ADDR_VAR 0 11
47365: PUSH
47366: LD_VAR 0 11
47370: PPUSH
47371: LD_VAR 0 11
47375: PUSH
47376: LD_INT 1
47378: PLUS
47379: PPUSH
47380: LD_VAR 0 9
47384: PUSH
47385: LD_VAR 0 3
47389: ARRAY
47390: PPUSH
47391: CALL_OW 2
47395: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47396: LD_ADDR_VAR 0 4
47400: PUSH
47401: LD_VAR 0 4
47405: PUSH
47406: LD_VAR 0 9
47410: PUSH
47411: LD_VAR 0 3
47415: ARRAY
47416: DIFF
47417: ST_TO_ADDR
// end ;
47418: GO 47327
47420: POP
47421: POP
// if p then
47422: LD_VAR 0 11
47426: IFFALSE 47451
// result := Replace ( result , 3 , p ) ;
47428: LD_ADDR_VAR 0 2
47432: PUSH
47433: LD_VAR 0 2
47437: PPUSH
47438: LD_INT 3
47440: PPUSH
47441: LD_VAR 0 11
47445: PPUSH
47446: CALL_OW 1
47450: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
47451: LD_VAR 0 4
47455: PUSH
47456: LD_INT 6
47458: GREATER
47459: PUSH
47460: LD_VAR 0 6
47464: PUSH
47465: LD_INT 6
47467: LESS
47468: AND
47469: IFFALSE 47663
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
47471: LD_ADDR_VAR 0 9
47475: PUSH
47476: LD_VAR 0 4
47480: PUSH
47481: LD_VAR 0 8
47485: PUSH
47486: LD_VAR 0 7
47490: UNION
47491: PUSH
47492: LD_VAR 0 6
47496: UNION
47497: DIFF
47498: PPUSH
47499: LD_INT 2
47501: PPUSH
47502: CALL 38945 0 2
47506: ST_TO_ADDR
// p := [ ] ;
47507: LD_ADDR_VAR 0 11
47511: PUSH
47512: EMPTY
47513: ST_TO_ADDR
// if sort then
47514: LD_VAR 0 9
47518: IFFALSE 47634
// for i = 1 to 6 - eng do
47520: LD_ADDR_VAR 0 3
47524: PUSH
47525: DOUBLE
47526: LD_INT 1
47528: DEC
47529: ST_TO_ADDR
47530: LD_INT 6
47532: PUSH
47533: LD_VAR 0 6
47537: MINUS
47538: PUSH
47539: FOR_TO
47540: IFFALSE 47632
// begin if i = sort then
47542: LD_VAR 0 3
47546: PUSH
47547: LD_VAR 0 9
47551: EQUAL
47552: IFFALSE 47556
// break ;
47554: GO 47632
// if GetClass ( i ) = 2 then
47556: LD_VAR 0 3
47560: PPUSH
47561: CALL_OW 257
47565: PUSH
47566: LD_INT 2
47568: EQUAL
47569: IFFALSE 47573
// continue ;
47571: GO 47539
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47573: LD_ADDR_VAR 0 11
47577: PUSH
47578: LD_VAR 0 11
47582: PPUSH
47583: LD_VAR 0 11
47587: PUSH
47588: LD_INT 1
47590: PLUS
47591: PPUSH
47592: LD_VAR 0 9
47596: PUSH
47597: LD_VAR 0 3
47601: ARRAY
47602: PPUSH
47603: CALL_OW 2
47607: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47608: LD_ADDR_VAR 0 4
47612: PUSH
47613: LD_VAR 0 4
47617: PUSH
47618: LD_VAR 0 9
47622: PUSH
47623: LD_VAR 0 3
47627: ARRAY
47628: DIFF
47629: ST_TO_ADDR
// end ;
47630: GO 47539
47632: POP
47633: POP
// if p then
47634: LD_VAR 0 11
47638: IFFALSE 47663
// result := Replace ( result , 2 , p ) ;
47640: LD_ADDR_VAR 0 2
47644: PUSH
47645: LD_VAR 0 2
47649: PPUSH
47650: LD_INT 2
47652: PPUSH
47653: LD_VAR 0 11
47657: PPUSH
47658: CALL_OW 1
47662: ST_TO_ADDR
// end ; exit ;
47663: GO 49051
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
47665: LD_EXP 41
47669: PUSH
47670: LD_EXP 40
47674: PUSH
47675: LD_VAR 0 1
47679: ARRAY
47680: ARRAY
47681: NOT
47682: PUSH
47683: LD_EXP 14
47687: PUSH
47688: LD_VAR 0 1
47692: ARRAY
47693: PPUSH
47694: LD_INT 30
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PPUSH
47704: CALL_OW 72
47708: AND
47709: PUSH
47710: LD_EXP 19
47714: PUSH
47715: LD_VAR 0 1
47719: ARRAY
47720: AND
47721: IFFALSE 48329
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
47723: LD_ADDR_EXP 56
47727: PUSH
47728: LD_EXP 56
47732: PPUSH
47733: LD_VAR 0 1
47737: PPUSH
47738: LD_INT 5
47740: PPUSH
47741: CALL_OW 1
47745: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
47746: LD_ADDR_VAR 0 2
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// if sci > 1 then
47769: LD_VAR 0 8
47773: PUSH
47774: LD_INT 1
47776: GREATER
47777: IFFALSE 47805
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
47779: LD_ADDR_VAR 0 4
47783: PUSH
47784: LD_VAR 0 4
47788: PUSH
47789: LD_VAR 0 8
47793: PUSH
47794: LD_VAR 0 8
47798: PUSH
47799: LD_INT 1
47801: ARRAY
47802: DIFF
47803: DIFF
47804: ST_TO_ADDR
// if tmp and not sci then
47805: LD_VAR 0 4
47809: PUSH
47810: LD_VAR 0 8
47814: NOT
47815: AND
47816: IFFALSE 47885
// begin sort := SortBySkill ( tmp , 4 ) ;
47818: LD_ADDR_VAR 0 9
47822: PUSH
47823: LD_VAR 0 4
47827: PPUSH
47828: LD_INT 4
47830: PPUSH
47831: CALL 38945 0 2
47835: ST_TO_ADDR
// if sort then
47836: LD_VAR 0 9
47840: IFFALSE 47856
// p := sort [ 1 ] ;
47842: LD_ADDR_VAR 0 11
47846: PUSH
47847: LD_VAR 0 9
47851: PUSH
47852: LD_INT 1
47854: ARRAY
47855: ST_TO_ADDR
// if p then
47856: LD_VAR 0 11
47860: IFFALSE 47885
// result := Replace ( result , 4 , p ) ;
47862: LD_ADDR_VAR 0 2
47866: PUSH
47867: LD_VAR 0 2
47871: PPUSH
47872: LD_INT 4
47874: PPUSH
47875: LD_VAR 0 11
47879: PPUSH
47880: CALL_OW 1
47884: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
47885: LD_ADDR_VAR 0 4
47889: PUSH
47890: LD_VAR 0 4
47894: PUSH
47895: LD_VAR 0 7
47899: DIFF
47900: ST_TO_ADDR
// if tmp and mech < 6 then
47901: LD_VAR 0 4
47905: PUSH
47906: LD_VAR 0 7
47910: PUSH
47911: LD_INT 6
47913: LESS
47914: AND
47915: IFFALSE 48103
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
47917: LD_ADDR_VAR 0 9
47921: PUSH
47922: LD_VAR 0 4
47926: PUSH
47927: LD_VAR 0 8
47931: PUSH
47932: LD_VAR 0 7
47936: UNION
47937: DIFF
47938: PPUSH
47939: LD_INT 3
47941: PPUSH
47942: CALL 38945 0 2
47946: ST_TO_ADDR
// p := [ ] ;
47947: LD_ADDR_VAR 0 11
47951: PUSH
47952: EMPTY
47953: ST_TO_ADDR
// if sort then
47954: LD_VAR 0 9
47958: IFFALSE 48074
// for i = 1 to 6 - mech do
47960: LD_ADDR_VAR 0 3
47964: PUSH
47965: DOUBLE
47966: LD_INT 1
47968: DEC
47969: ST_TO_ADDR
47970: LD_INT 6
47972: PUSH
47973: LD_VAR 0 7
47977: MINUS
47978: PUSH
47979: FOR_TO
47980: IFFALSE 48072
// begin if i = sort then
47982: LD_VAR 0 3
47986: PUSH
47987: LD_VAR 0 9
47991: EQUAL
47992: IFFALSE 47996
// break ;
47994: GO 48072
// if GetClass ( i ) = 3 then
47996: LD_VAR 0 3
48000: PPUSH
48001: CALL_OW 257
48005: PUSH
48006: LD_INT 3
48008: EQUAL
48009: IFFALSE 48013
// continue ;
48011: GO 47979
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48013: LD_ADDR_VAR 0 11
48017: PUSH
48018: LD_VAR 0 11
48022: PPUSH
48023: LD_VAR 0 11
48027: PUSH
48028: LD_INT 1
48030: PLUS
48031: PPUSH
48032: LD_VAR 0 9
48036: PUSH
48037: LD_VAR 0 3
48041: ARRAY
48042: PPUSH
48043: CALL_OW 2
48047: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48048: LD_ADDR_VAR 0 4
48052: PUSH
48053: LD_VAR 0 4
48057: PUSH
48058: LD_VAR 0 9
48062: PUSH
48063: LD_VAR 0 3
48067: ARRAY
48068: DIFF
48069: ST_TO_ADDR
// end ;
48070: GO 47979
48072: POP
48073: POP
// if p then
48074: LD_VAR 0 11
48078: IFFALSE 48103
// result := Replace ( result , 3 , p ) ;
48080: LD_ADDR_VAR 0 2
48084: PUSH
48085: LD_VAR 0 2
48089: PPUSH
48090: LD_INT 3
48092: PPUSH
48093: LD_VAR 0 11
48097: PPUSH
48098: CALL_OW 1
48102: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
48103: LD_ADDR_VAR 0 4
48107: PUSH
48108: LD_VAR 0 4
48112: PUSH
48113: LD_VAR 0 6
48117: DIFF
48118: ST_TO_ADDR
// if tmp and eng < 6 then
48119: LD_VAR 0 4
48123: PUSH
48124: LD_VAR 0 6
48128: PUSH
48129: LD_INT 6
48131: LESS
48132: AND
48133: IFFALSE 48327
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
48135: LD_ADDR_VAR 0 9
48139: PUSH
48140: LD_VAR 0 4
48144: PUSH
48145: LD_VAR 0 8
48149: PUSH
48150: LD_VAR 0 7
48154: UNION
48155: PUSH
48156: LD_VAR 0 6
48160: UNION
48161: DIFF
48162: PPUSH
48163: LD_INT 2
48165: PPUSH
48166: CALL 38945 0 2
48170: ST_TO_ADDR
// p := [ ] ;
48171: LD_ADDR_VAR 0 11
48175: PUSH
48176: EMPTY
48177: ST_TO_ADDR
// if sort then
48178: LD_VAR 0 9
48182: IFFALSE 48298
// for i = 1 to 6 - eng do
48184: LD_ADDR_VAR 0 3
48188: PUSH
48189: DOUBLE
48190: LD_INT 1
48192: DEC
48193: ST_TO_ADDR
48194: LD_INT 6
48196: PUSH
48197: LD_VAR 0 6
48201: MINUS
48202: PUSH
48203: FOR_TO
48204: IFFALSE 48296
// begin if i = sort then
48206: LD_VAR 0 3
48210: PUSH
48211: LD_VAR 0 9
48215: EQUAL
48216: IFFALSE 48220
// break ;
48218: GO 48296
// if GetClass ( i ) = 2 then
48220: LD_VAR 0 3
48224: PPUSH
48225: CALL_OW 257
48229: PUSH
48230: LD_INT 2
48232: EQUAL
48233: IFFALSE 48237
// continue ;
48235: GO 48203
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48237: LD_ADDR_VAR 0 11
48241: PUSH
48242: LD_VAR 0 11
48246: PPUSH
48247: LD_VAR 0 11
48251: PUSH
48252: LD_INT 1
48254: PLUS
48255: PPUSH
48256: LD_VAR 0 9
48260: PUSH
48261: LD_VAR 0 3
48265: ARRAY
48266: PPUSH
48267: CALL_OW 2
48271: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48272: LD_ADDR_VAR 0 4
48276: PUSH
48277: LD_VAR 0 4
48281: PUSH
48282: LD_VAR 0 9
48286: PUSH
48287: LD_VAR 0 3
48291: ARRAY
48292: DIFF
48293: ST_TO_ADDR
// end ;
48294: GO 48203
48296: POP
48297: POP
// if p then
48298: LD_VAR 0 11
48302: IFFALSE 48327
// result := Replace ( result , 2 , p ) ;
48304: LD_ADDR_VAR 0 2
48308: PUSH
48309: LD_VAR 0 2
48313: PPUSH
48314: LD_INT 2
48316: PPUSH
48317: LD_VAR 0 11
48321: PPUSH
48322: CALL_OW 1
48326: ST_TO_ADDR
// end ; exit ;
48327: GO 49051
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
48329: LD_EXP 41
48333: PUSH
48334: LD_EXP 40
48338: PUSH
48339: LD_VAR 0 1
48343: ARRAY
48344: ARRAY
48345: NOT
48346: PUSH
48347: LD_EXP 14
48351: PUSH
48352: LD_VAR 0 1
48356: ARRAY
48357: PPUSH
48358: LD_INT 30
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PPUSH
48368: CALL_OW 72
48372: AND
48373: PUSH
48374: LD_EXP 19
48378: PUSH
48379: LD_VAR 0 1
48383: ARRAY
48384: NOT
48385: AND
48386: IFFALSE 49051
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
48388: LD_ADDR_EXP 56
48392: PUSH
48393: LD_EXP 56
48397: PPUSH
48398: LD_VAR 0 1
48402: PPUSH
48403: LD_INT 6
48405: PPUSH
48406: CALL_OW 1
48410: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
48411: LD_ADDR_VAR 0 2
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: ST_TO_ADDR
// if sci >= 1 then
48434: LD_VAR 0 8
48438: PUSH
48439: LD_INT 1
48441: GREATEREQUAL
48442: IFFALSE 48464
// tmp := tmp diff sci [ 1 ] ;
48444: LD_ADDR_VAR 0 4
48448: PUSH
48449: LD_VAR 0 4
48453: PUSH
48454: LD_VAR 0 8
48458: PUSH
48459: LD_INT 1
48461: ARRAY
48462: DIFF
48463: ST_TO_ADDR
// if tmp and not sci then
48464: LD_VAR 0 4
48468: PUSH
48469: LD_VAR 0 8
48473: NOT
48474: AND
48475: IFFALSE 48544
// begin sort := SortBySkill ( tmp , 4 ) ;
48477: LD_ADDR_VAR 0 9
48481: PUSH
48482: LD_VAR 0 4
48486: PPUSH
48487: LD_INT 4
48489: PPUSH
48490: CALL 38945 0 2
48494: ST_TO_ADDR
// if sort then
48495: LD_VAR 0 9
48499: IFFALSE 48515
// p := sort [ 1 ] ;
48501: LD_ADDR_VAR 0 11
48505: PUSH
48506: LD_VAR 0 9
48510: PUSH
48511: LD_INT 1
48513: ARRAY
48514: ST_TO_ADDR
// if p then
48515: LD_VAR 0 11
48519: IFFALSE 48544
// result := Replace ( result , 4 , p ) ;
48521: LD_ADDR_VAR 0 2
48525: PUSH
48526: LD_VAR 0 2
48530: PPUSH
48531: LD_INT 4
48533: PPUSH
48534: LD_VAR 0 11
48538: PPUSH
48539: CALL_OW 1
48543: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
48544: LD_ADDR_VAR 0 4
48548: PUSH
48549: LD_VAR 0 4
48553: PUSH
48554: LD_VAR 0 7
48558: DIFF
48559: ST_TO_ADDR
// if tmp and mech < 6 then
48560: LD_VAR 0 4
48564: PUSH
48565: LD_VAR 0 7
48569: PUSH
48570: LD_INT 6
48572: LESS
48573: AND
48574: IFFALSE 48756
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: LD_VAR 0 4
48585: PUSH
48586: LD_VAR 0 7
48590: DIFF
48591: PPUSH
48592: LD_INT 3
48594: PPUSH
48595: CALL 38945 0 2
48599: ST_TO_ADDR
// p := [ ] ;
48600: LD_ADDR_VAR 0 11
48604: PUSH
48605: EMPTY
48606: ST_TO_ADDR
// if sort then
48607: LD_VAR 0 9
48611: IFFALSE 48727
// for i = 1 to 6 - mech do
48613: LD_ADDR_VAR 0 3
48617: PUSH
48618: DOUBLE
48619: LD_INT 1
48621: DEC
48622: ST_TO_ADDR
48623: LD_INT 6
48625: PUSH
48626: LD_VAR 0 7
48630: MINUS
48631: PUSH
48632: FOR_TO
48633: IFFALSE 48725
// begin if i = sort then
48635: LD_VAR 0 3
48639: PUSH
48640: LD_VAR 0 9
48644: EQUAL
48645: IFFALSE 48649
// break ;
48647: GO 48725
// if GetClass ( i ) = 3 then
48649: LD_VAR 0 3
48653: PPUSH
48654: CALL_OW 257
48658: PUSH
48659: LD_INT 3
48661: EQUAL
48662: IFFALSE 48666
// continue ;
48664: GO 48632
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48666: LD_ADDR_VAR 0 11
48670: PUSH
48671: LD_VAR 0 11
48675: PPUSH
48676: LD_VAR 0 11
48680: PUSH
48681: LD_INT 1
48683: PLUS
48684: PPUSH
48685: LD_VAR 0 9
48689: PUSH
48690: LD_VAR 0 3
48694: ARRAY
48695: PPUSH
48696: CALL_OW 2
48700: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48701: LD_ADDR_VAR 0 4
48705: PUSH
48706: LD_VAR 0 4
48710: PUSH
48711: LD_VAR 0 9
48715: PUSH
48716: LD_VAR 0 3
48720: ARRAY
48721: DIFF
48722: ST_TO_ADDR
// end ;
48723: GO 48632
48725: POP
48726: POP
// if p then
48727: LD_VAR 0 11
48731: IFFALSE 48756
// result := Replace ( result , 3 , p ) ;
48733: LD_ADDR_VAR 0 2
48737: PUSH
48738: LD_VAR 0 2
48742: PPUSH
48743: LD_INT 3
48745: PPUSH
48746: LD_VAR 0 11
48750: PPUSH
48751: CALL_OW 1
48755: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
48756: LD_ADDR_VAR 0 4
48760: PUSH
48761: LD_VAR 0 4
48765: PUSH
48766: LD_VAR 0 6
48770: DIFF
48771: ST_TO_ADDR
// if tmp and eng < 4 then
48772: LD_VAR 0 4
48776: PUSH
48777: LD_VAR 0 6
48781: PUSH
48782: LD_INT 4
48784: LESS
48785: AND
48786: IFFALSE 48976
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
48788: LD_ADDR_VAR 0 9
48792: PUSH
48793: LD_VAR 0 4
48797: PUSH
48798: LD_VAR 0 7
48802: PUSH
48803: LD_VAR 0 6
48807: UNION
48808: DIFF
48809: PPUSH
48810: LD_INT 2
48812: PPUSH
48813: CALL 38945 0 2
48817: ST_TO_ADDR
// p := [ ] ;
48818: LD_ADDR_VAR 0 11
48822: PUSH
48823: EMPTY
48824: ST_TO_ADDR
// if sort then
48825: LD_VAR 0 9
48829: IFFALSE 48945
// for i = 1 to 4 - eng do
48831: LD_ADDR_VAR 0 3
48835: PUSH
48836: DOUBLE
48837: LD_INT 1
48839: DEC
48840: ST_TO_ADDR
48841: LD_INT 4
48843: PUSH
48844: LD_VAR 0 6
48848: MINUS
48849: PUSH
48850: FOR_TO
48851: IFFALSE 48943
// begin if i = sort then
48853: LD_VAR 0 3
48857: PUSH
48858: LD_VAR 0 9
48862: EQUAL
48863: IFFALSE 48867
// break ;
48865: GO 48943
// if GetClass ( i ) = 2 then
48867: LD_VAR 0 3
48871: PPUSH
48872: CALL_OW 257
48876: PUSH
48877: LD_INT 2
48879: EQUAL
48880: IFFALSE 48884
// continue ;
48882: GO 48850
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48884: LD_ADDR_VAR 0 11
48888: PUSH
48889: LD_VAR 0 11
48893: PPUSH
48894: LD_VAR 0 11
48898: PUSH
48899: LD_INT 1
48901: PLUS
48902: PPUSH
48903: LD_VAR 0 9
48907: PUSH
48908: LD_VAR 0 3
48912: ARRAY
48913: PPUSH
48914: CALL_OW 2
48918: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48919: LD_ADDR_VAR 0 4
48923: PUSH
48924: LD_VAR 0 4
48928: PUSH
48929: LD_VAR 0 9
48933: PUSH
48934: LD_VAR 0 3
48938: ARRAY
48939: DIFF
48940: ST_TO_ADDR
// end ;
48941: GO 48850
48943: POP
48944: POP
// if p then
48945: LD_VAR 0 11
48949: IFFALSE 48974
// result := Replace ( result , 2 , p ) ;
48951: LD_ADDR_VAR 0 2
48955: PUSH
48956: LD_VAR 0 2
48960: PPUSH
48961: LD_INT 2
48963: PPUSH
48964: LD_VAR 0 11
48968: PPUSH
48969: CALL_OW 1
48973: ST_TO_ADDR
// end else
48974: GO 49020
// for i = eng downto 5 do
48976: LD_ADDR_VAR 0 3
48980: PUSH
48981: DOUBLE
48982: LD_VAR 0 6
48986: INC
48987: ST_TO_ADDR
48988: LD_INT 5
48990: PUSH
48991: FOR_DOWNTO
48992: IFFALSE 49018
// tmp := tmp union eng [ i ] ;
48994: LD_ADDR_VAR 0 4
48998: PUSH
48999: LD_VAR 0 4
49003: PUSH
49004: LD_VAR 0 6
49008: PUSH
49009: LD_VAR 0 3
49013: ARRAY
49014: UNION
49015: ST_TO_ADDR
49016: GO 48991
49018: POP
49019: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
49020: LD_ADDR_VAR 0 2
49024: PUSH
49025: LD_VAR 0 2
49029: PPUSH
49030: LD_INT 1
49032: PPUSH
49033: LD_VAR 0 4
49037: PUSH
49038: LD_VAR 0 5
49042: DIFF
49043: PPUSH
49044: CALL_OW 1
49048: ST_TO_ADDR
// exit ;
49049: GO 49051
// end ; end ;
49051: LD_VAR 0 2
49055: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
49056: LD_INT 0
49058: PPUSH
49059: PPUSH
49060: PPUSH
// if not mc_bases then
49061: LD_EXP 14
49065: NOT
49066: IFFALSE 49070
// exit ;
49068: GO 49176
// for i = 1 to mc_bases do
49070: LD_ADDR_VAR 0 2
49074: PUSH
49075: DOUBLE
49076: LD_INT 1
49078: DEC
49079: ST_TO_ADDR
49080: LD_EXP 14
49084: PUSH
49085: FOR_TO
49086: IFFALSE 49167
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
49088: LD_ADDR_VAR 0 3
49092: PUSH
49093: LD_EXP 14
49097: PUSH
49098: LD_VAR 0 2
49102: ARRAY
49103: PPUSH
49104: LD_INT 21
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: LD_INT 24
49119: PUSH
49120: LD_INT 1000
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PPUSH
49135: CALL_OW 72
49139: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
49140: LD_ADDR_EXP 15
49144: PUSH
49145: LD_EXP 15
49149: PPUSH
49150: LD_VAR 0 2
49154: PPUSH
49155: LD_VAR 0 3
49159: PPUSH
49160: CALL_OW 1
49164: ST_TO_ADDR
// end ;
49165: GO 49085
49167: POP
49168: POP
// RaiseSailEvent ( 101 ) ;
49169: LD_INT 101
49171: PPUSH
49172: CALL_OW 427
// end ;
49176: LD_VAR 0 1
49180: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
49181: LD_INT 0
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
49189: PPUSH
// if not mc_bases then
49190: LD_EXP 14
49194: NOT
49195: IFFALSE 49199
// exit ;
49197: GO 49761
// for i = 1 to mc_bases do
49199: LD_ADDR_VAR 0 2
49203: PUSH
49204: DOUBLE
49205: LD_INT 1
49207: DEC
49208: ST_TO_ADDR
49209: LD_EXP 14
49213: PUSH
49214: FOR_TO
49215: IFFALSE 49752
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
49217: LD_ADDR_VAR 0 5
49221: PUSH
49222: LD_EXP 14
49226: PUSH
49227: LD_VAR 0 2
49231: ARRAY
49232: PUSH
49233: LD_EXP 43
49237: PUSH
49238: LD_VAR 0 2
49242: ARRAY
49243: UNION
49244: PPUSH
49245: LD_INT 21
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: LD_INT 54
49263: PUSH
49264: EMPTY
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: PUSH
49274: LD_INT 24
49276: PUSH
49277: LD_INT 800
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PPUSH
49297: CALL_OW 72
49301: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
49302: LD_ADDR_VAR 0 6
49306: PUSH
49307: LD_EXP 14
49311: PUSH
49312: LD_VAR 0 2
49316: ARRAY
49317: PPUSH
49318: LD_INT 21
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: LD_INT 54
49336: PUSH
49337: EMPTY
49338: LIST
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 3
49346: PUSH
49347: LD_INT 24
49349: PUSH
49350: LD_INT 250
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PPUSH
49370: CALL_OW 72
49374: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
49375: LD_ADDR_VAR 0 7
49379: PUSH
49380: LD_VAR 0 5
49384: PUSH
49385: LD_VAR 0 6
49389: DIFF
49390: ST_TO_ADDR
// if not need_heal_1 then
49391: LD_VAR 0 6
49395: NOT
49396: IFFALSE 49429
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
49398: LD_ADDR_EXP 17
49402: PUSH
49403: LD_EXP 17
49407: PPUSH
49408: LD_VAR 0 2
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PPUSH
49420: EMPTY
49421: PPUSH
49422: CALL 9396 0 3
49426: ST_TO_ADDR
49427: GO 49499
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
49429: LD_ADDR_EXP 17
49433: PUSH
49434: LD_EXP 17
49438: PPUSH
49439: LD_VAR 0 2
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PPUSH
49451: LD_EXP 17
49455: PUSH
49456: LD_VAR 0 2
49460: ARRAY
49461: PUSH
49462: LD_INT 1
49464: ARRAY
49465: PPUSH
49466: LD_INT 3
49468: PUSH
49469: LD_INT 24
49471: PUSH
49472: LD_INT 1000
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PPUSH
49483: CALL_OW 72
49487: PUSH
49488: LD_VAR 0 6
49492: UNION
49493: PPUSH
49494: CALL 9396 0 3
49498: ST_TO_ADDR
// if not need_heal_2 then
49499: LD_VAR 0 7
49503: NOT
49504: IFFALSE 49537
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
49506: LD_ADDR_EXP 17
49510: PUSH
49511: LD_EXP 17
49515: PPUSH
49516: LD_VAR 0 2
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PPUSH
49528: EMPTY
49529: PPUSH
49530: CALL 9396 0 3
49534: ST_TO_ADDR
49535: GO 49569
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
49537: LD_ADDR_EXP 17
49541: PUSH
49542: LD_EXP 17
49546: PPUSH
49547: LD_VAR 0 2
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PPUSH
49559: LD_VAR 0 7
49563: PPUSH
49564: CALL 9396 0 3
49568: ST_TO_ADDR
// if need_heal_2 then
49569: LD_VAR 0 7
49573: IFFALSE 49734
// for j in need_heal_2 do
49575: LD_ADDR_VAR 0 3
49579: PUSH
49580: LD_VAR 0 7
49584: PUSH
49585: FOR_IN
49586: IFFALSE 49732
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49588: LD_ADDR_VAR 0 5
49592: PUSH
49593: LD_EXP 14
49597: PUSH
49598: LD_VAR 0 2
49602: ARRAY
49603: PPUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 30
49609: PUSH
49610: LD_INT 6
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 30
49619: PUSH
49620: LD_INT 7
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 30
49629: PUSH
49630: LD_INT 8
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 30
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 30
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: PPUSH
49665: CALL_OW 72
49669: ST_TO_ADDR
// if tmp then
49670: LD_VAR 0 5
49674: IFFALSE 49730
// begin k := NearestUnitToUnit ( tmp , j ) ;
49676: LD_ADDR_VAR 0 4
49680: PUSH
49681: LD_VAR 0 5
49685: PPUSH
49686: LD_VAR 0 3
49690: PPUSH
49691: CALL_OW 74
49695: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
49696: LD_VAR 0 3
49700: PPUSH
49701: LD_VAR 0 4
49705: PPUSH
49706: CALL_OW 296
49710: PUSH
49711: LD_INT 5
49713: GREATER
49714: IFFALSE 49730
// ComMoveUnit ( j , k ) ;
49716: LD_VAR 0 3
49720: PPUSH
49721: LD_VAR 0 4
49725: PPUSH
49726: CALL_OW 112
// end ; end ;
49730: GO 49585
49732: POP
49733: POP
// if not need_heal_1 and not need_heal_2 then
49734: LD_VAR 0 6
49738: NOT
49739: PUSH
49740: LD_VAR 0 7
49744: NOT
49745: AND
49746: IFFALSE 49750
// continue ;
49748: GO 49214
// end ;
49750: GO 49214
49752: POP
49753: POP
// RaiseSailEvent ( 102 ) ;
49754: LD_INT 102
49756: PPUSH
49757: CALL_OW 427
// end ;
49761: LD_VAR 0 1
49765: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
49766: LD_INT 0
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
49774: PPUSH
49775: PPUSH
// if not mc_bases then
49776: LD_EXP 14
49780: NOT
49781: IFFALSE 49785
// exit ;
49783: GO 50620
// for i = 1 to mc_bases do
49785: LD_ADDR_VAR 0 2
49789: PUSH
49790: DOUBLE
49791: LD_INT 1
49793: DEC
49794: ST_TO_ADDR
49795: LD_EXP 14
49799: PUSH
49800: FOR_TO
49801: IFFALSE 50618
// begin if not mc_building_need_repair [ i ] then
49803: LD_EXP 15
49807: PUSH
49808: LD_VAR 0 2
49812: ARRAY
49813: NOT
49814: IFFALSE 49988
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
49816: LD_ADDR_VAR 0 6
49820: PUSH
49821: LD_EXP 33
49825: PUSH
49826: LD_VAR 0 2
49830: ARRAY
49831: PPUSH
49832: LD_INT 3
49834: PUSH
49835: LD_INT 24
49837: PUSH
49838: LD_INT 1000
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 34
49854: PUSH
49855: LD_INT 13
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 34
49864: PUSH
49865: LD_INT 52
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PPUSH
49881: CALL_OW 72
49885: ST_TO_ADDR
// if cranes then
49886: LD_VAR 0 6
49890: IFFALSE 49952
// for j in cranes do
49892: LD_ADDR_VAR 0 3
49896: PUSH
49897: LD_VAR 0 6
49901: PUSH
49902: FOR_IN
49903: IFFALSE 49950
// if not IsInArea ( j , mc_parking [ i ] ) then
49905: LD_VAR 0 3
49909: PPUSH
49910: LD_EXP 38
49914: PUSH
49915: LD_VAR 0 2
49919: ARRAY
49920: PPUSH
49921: CALL_OW 308
49925: NOT
49926: IFFALSE 49948
// ComMoveToArea ( j , mc_parking [ i ] ) ;
49928: LD_VAR 0 3
49932: PPUSH
49933: LD_EXP 38
49937: PUSH
49938: LD_VAR 0 2
49942: ARRAY
49943: PPUSH
49944: CALL_OW 113
49948: GO 49902
49950: POP
49951: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49952: LD_ADDR_EXP 16
49956: PUSH
49957: LD_EXP 16
49961: PPUSH
49962: LD_VAR 0 2
49966: PPUSH
49967: EMPTY
49968: PPUSH
49969: CALL_OW 1
49973: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
49974: LD_VAR 0 2
49978: PPUSH
49979: LD_INT 101
49981: PPUSH
49982: CALL 44889 0 2
// continue ;
49986: GO 49800
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
49988: LD_ADDR_EXP 20
49992: PUSH
49993: LD_EXP 20
49997: PPUSH
49998: LD_VAR 0 2
50002: PPUSH
50003: EMPTY
50004: PPUSH
50005: CALL_OW 1
50009: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
50010: LD_VAR 0 2
50014: PPUSH
50015: LD_INT 103
50017: PPUSH
50018: CALL 44889 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
50022: LD_ADDR_VAR 0 5
50026: PUSH
50027: LD_EXP 14
50031: PUSH
50032: LD_VAR 0 2
50036: ARRAY
50037: PUSH
50038: LD_EXP 43
50042: PUSH
50043: LD_VAR 0 2
50047: ARRAY
50048: UNION
50049: PPUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 25
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 25
50065: PUSH
50066: LD_INT 16
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: PPUSH
50081: CALL_OW 72
50085: PUSH
50086: LD_EXP 17
50090: PUSH
50091: LD_VAR 0 2
50095: ARRAY
50096: PUSH
50097: LD_INT 1
50099: ARRAY
50100: PUSH
50101: LD_EXP 17
50105: PUSH
50106: LD_VAR 0 2
50110: ARRAY
50111: PUSH
50112: LD_INT 2
50114: ARRAY
50115: UNION
50116: DIFF
50117: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
50118: LD_ADDR_VAR 0 6
50122: PUSH
50123: LD_EXP 33
50127: PUSH
50128: LD_VAR 0 2
50132: ARRAY
50133: PPUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 34
50139: PUSH
50140: LD_INT 13
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 34
50149: PUSH
50150: LD_INT 52
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: PPUSH
50162: CALL_OW 72
50166: ST_TO_ADDR
// if cranes then
50167: LD_VAR 0 6
50171: IFFALSE 50307
// begin for j in cranes do
50173: LD_ADDR_VAR 0 3
50177: PUSH
50178: LD_VAR 0 6
50182: PUSH
50183: FOR_IN
50184: IFFALSE 50305
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
50186: LD_VAR 0 3
50190: PPUSH
50191: CALL_OW 256
50195: PUSH
50196: LD_INT 500
50198: GREATEREQUAL
50199: PUSH
50200: LD_VAR 0 3
50204: PPUSH
50205: CALL_OW 314
50209: NOT
50210: AND
50211: IFFALSE 50245
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
50213: LD_VAR 0 3
50217: PPUSH
50218: LD_EXP 15
50222: PUSH
50223: LD_VAR 0 2
50227: ARRAY
50228: PPUSH
50229: LD_VAR 0 3
50233: PPUSH
50234: CALL_OW 74
50238: PPUSH
50239: CALL_OW 130
50243: GO 50303
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
50245: LD_VAR 0 3
50249: PPUSH
50250: CALL_OW 256
50254: PUSH
50255: LD_INT 500
50257: LESS
50258: PUSH
50259: LD_VAR 0 3
50263: PPUSH
50264: LD_EXP 38
50268: PUSH
50269: LD_VAR 0 2
50273: ARRAY
50274: PPUSH
50275: CALL_OW 308
50279: NOT
50280: AND
50281: IFFALSE 50303
// ComMoveToArea ( j , mc_parking [ i ] ) ;
50283: LD_VAR 0 3
50287: PPUSH
50288: LD_EXP 38
50292: PUSH
50293: LD_VAR 0 2
50297: ARRAY
50298: PPUSH
50299: CALL_OW 113
50303: GO 50183
50305: POP
50306: POP
// end ; if tmp > 3 then
50307: LD_VAR 0 5
50311: PUSH
50312: LD_INT 3
50314: GREATER
50315: IFFALSE 50335
// tmp := ShrinkArray ( tmp , 4 ) ;
50317: LD_ADDR_VAR 0 5
50321: PUSH
50322: LD_VAR 0 5
50326: PPUSH
50327: LD_INT 4
50329: PPUSH
50330: CALL 40635 0 2
50334: ST_TO_ADDR
// if not tmp then
50335: LD_VAR 0 5
50339: NOT
50340: IFFALSE 50344
// continue ;
50342: GO 49800
// for j in tmp do
50344: LD_ADDR_VAR 0 3
50348: PUSH
50349: LD_VAR 0 5
50353: PUSH
50354: FOR_IN
50355: IFFALSE 50614
// begin if IsInUnit ( j ) then
50357: LD_VAR 0 3
50361: PPUSH
50362: CALL_OW 310
50366: IFFALSE 50377
// ComExitBuilding ( j ) ;
50368: LD_VAR 0 3
50372: PPUSH
50373: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
50377: LD_VAR 0 3
50381: PUSH
50382: LD_EXP 16
50386: PUSH
50387: LD_VAR 0 2
50391: ARRAY
50392: IN
50393: NOT
50394: IFFALSE 50452
// begin SetTag ( j , 101 ) ;
50396: LD_VAR 0 3
50400: PPUSH
50401: LD_INT 101
50403: PPUSH
50404: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
50408: LD_ADDR_EXP 16
50412: PUSH
50413: LD_EXP 16
50417: PPUSH
50418: LD_VAR 0 2
50422: PUSH
50423: LD_EXP 16
50427: PUSH
50428: LD_VAR 0 2
50432: ARRAY
50433: PUSH
50434: LD_INT 1
50436: PLUS
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PPUSH
50442: LD_VAR 0 3
50446: PPUSH
50447: CALL 9396 0 3
50451: ST_TO_ADDR
// end ; wait ( 1 ) ;
50452: LD_INT 1
50454: PPUSH
50455: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
50459: LD_ADDR_VAR 0 7
50463: PUSH
50464: LD_EXP 15
50468: PUSH
50469: LD_VAR 0 2
50473: ARRAY
50474: ST_TO_ADDR
// if mc_scan [ i ] then
50475: LD_EXP 37
50479: PUSH
50480: LD_VAR 0 2
50484: ARRAY
50485: IFFALSE 50547
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
50487: LD_ADDR_VAR 0 7
50491: PUSH
50492: LD_EXP 15
50496: PUSH
50497: LD_VAR 0 2
50501: ARRAY
50502: PPUSH
50503: LD_INT 3
50505: PUSH
50506: LD_INT 30
50508: PUSH
50509: LD_INT 32
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 30
50518: PUSH
50519: LD_INT 33
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 30
50528: PUSH
50529: LD_INT 31
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: PPUSH
50542: CALL_OW 72
50546: ST_TO_ADDR
// if not to_repair_tmp then
50547: LD_VAR 0 7
50551: NOT
50552: IFFALSE 50556
// continue ;
50554: GO 50354
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
50556: LD_ADDR_VAR 0 8
50560: PUSH
50561: LD_VAR 0 7
50565: PPUSH
50566: LD_VAR 0 3
50570: PPUSH
50571: CALL_OW 74
50575: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
50576: LD_VAR 0 8
50580: PPUSH
50581: LD_INT 16
50583: PPUSH
50584: CALL 11989 0 2
50588: PUSH
50589: LD_INT 4
50591: ARRAY
50592: PUSH
50593: LD_INT 5
50595: LESS
50596: IFFALSE 50612
// ComRepairBuilding ( j , to_repair ) ;
50598: LD_VAR 0 3
50602: PPUSH
50603: LD_VAR 0 8
50607: PPUSH
50608: CALL_OW 130
// end ;
50612: GO 50354
50614: POP
50615: POP
// end ;
50616: GO 49800
50618: POP
50619: POP
// end ;
50620: LD_VAR 0 1
50624: RET
// export function MC_Heal ; var i , j , tmp ; begin
50625: LD_INT 0
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
// if not mc_bases then
50631: LD_EXP 14
50635: NOT
50636: IFFALSE 50640
// exit ;
50638: GO 51042
// for i = 1 to mc_bases do
50640: LD_ADDR_VAR 0 2
50644: PUSH
50645: DOUBLE
50646: LD_INT 1
50648: DEC
50649: ST_TO_ADDR
50650: LD_EXP 14
50654: PUSH
50655: FOR_TO
50656: IFFALSE 51040
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
50658: LD_EXP 17
50662: PUSH
50663: LD_VAR 0 2
50667: ARRAY
50668: PUSH
50669: LD_INT 1
50671: ARRAY
50672: NOT
50673: PUSH
50674: LD_EXP 17
50678: PUSH
50679: LD_VAR 0 2
50683: ARRAY
50684: PUSH
50685: LD_INT 2
50687: ARRAY
50688: NOT
50689: AND
50690: IFFALSE 50728
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
50692: LD_ADDR_EXP 18
50696: PUSH
50697: LD_EXP 18
50701: PPUSH
50702: LD_VAR 0 2
50706: PPUSH
50707: EMPTY
50708: PPUSH
50709: CALL_OW 1
50713: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
50714: LD_VAR 0 2
50718: PPUSH
50719: LD_INT 102
50721: PPUSH
50722: CALL 44889 0 2
// continue ;
50726: GO 50655
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
50728: LD_ADDR_VAR 0 4
50732: PUSH
50733: LD_EXP 14
50737: PUSH
50738: LD_VAR 0 2
50742: ARRAY
50743: PPUSH
50744: LD_INT 25
50746: PUSH
50747: LD_INT 4
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PPUSH
50754: CALL_OW 72
50758: ST_TO_ADDR
// if not tmp then
50759: LD_VAR 0 4
50763: NOT
50764: IFFALSE 50768
// continue ;
50766: GO 50655
// if mc_taming [ i ] then
50768: LD_EXP 45
50772: PUSH
50773: LD_VAR 0 2
50777: ARRAY
50778: IFFALSE 50802
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50780: LD_ADDR_EXP 45
50784: PUSH
50785: LD_EXP 45
50789: PPUSH
50790: LD_VAR 0 2
50794: PPUSH
50795: EMPTY
50796: PPUSH
50797: CALL_OW 1
50801: ST_TO_ADDR
// for j in tmp do
50802: LD_ADDR_VAR 0 3
50806: PUSH
50807: LD_VAR 0 4
50811: PUSH
50812: FOR_IN
50813: IFFALSE 51036
// begin if IsInUnit ( j ) then
50815: LD_VAR 0 3
50819: PPUSH
50820: CALL_OW 310
50824: IFFALSE 50835
// ComExitBuilding ( j ) ;
50826: LD_VAR 0 3
50830: PPUSH
50831: CALL_OW 122
// if not j in mc_healers [ i ] then
50835: LD_VAR 0 3
50839: PUSH
50840: LD_EXP 18
50844: PUSH
50845: LD_VAR 0 2
50849: ARRAY
50850: IN
50851: NOT
50852: IFFALSE 50898
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
50854: LD_ADDR_EXP 18
50858: PUSH
50859: LD_EXP 18
50863: PPUSH
50864: LD_VAR 0 2
50868: PUSH
50869: LD_EXP 18
50873: PUSH
50874: LD_VAR 0 2
50878: ARRAY
50879: PUSH
50880: LD_INT 1
50882: PLUS
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PPUSH
50888: LD_VAR 0 3
50892: PPUSH
50893: CALL 9396 0 3
50897: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
50898: LD_VAR 0 3
50902: PPUSH
50903: CALL_OW 110
50907: PUSH
50908: LD_INT 102
50910: NONEQUAL
50911: IFFALSE 50925
// SetTag ( j , 102 ) ;
50913: LD_VAR 0 3
50917: PPUSH
50918: LD_INT 102
50920: PPUSH
50921: CALL_OW 109
// Wait ( 3 ) ;
50925: LD_INT 3
50927: PPUSH
50928: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
50932: LD_EXP 17
50936: PUSH
50937: LD_VAR 0 2
50941: ARRAY
50942: PUSH
50943: LD_INT 1
50945: ARRAY
50946: IFFALSE 50978
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
50948: LD_VAR 0 3
50952: PPUSH
50953: LD_EXP 17
50957: PUSH
50958: LD_VAR 0 2
50962: ARRAY
50963: PUSH
50964: LD_INT 1
50966: ARRAY
50967: PUSH
50968: LD_INT 1
50970: ARRAY
50971: PPUSH
50972: CALL_OW 128
50976: GO 51034
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
50978: LD_VAR 0 3
50982: PPUSH
50983: CALL_OW 314
50987: NOT
50988: PUSH
50989: LD_EXP 17
50993: PUSH
50994: LD_VAR 0 2
50998: ARRAY
50999: PUSH
51000: LD_INT 2
51002: ARRAY
51003: AND
51004: IFFALSE 51034
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
51006: LD_VAR 0 3
51010: PPUSH
51011: LD_EXP 17
51015: PUSH
51016: LD_VAR 0 2
51020: ARRAY
51021: PUSH
51022: LD_INT 2
51024: ARRAY
51025: PUSH
51026: LD_INT 1
51028: ARRAY
51029: PPUSH
51030: CALL_OW 128
// end ;
51034: GO 50812
51036: POP
51037: POP
// end ;
51038: GO 50655
51040: POP
51041: POP
// end ;
51042: LD_VAR 0 1
51046: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
51047: LD_INT 0
51049: PPUSH
51050: PPUSH
51051: PPUSH
51052: PPUSH
51053: PPUSH
// if not mc_bases then
51054: LD_EXP 14
51058: NOT
51059: IFFALSE 51063
// exit ;
51061: GO 52206
// for i = 1 to mc_bases do
51063: LD_ADDR_VAR 0 2
51067: PUSH
51068: DOUBLE
51069: LD_INT 1
51071: DEC
51072: ST_TO_ADDR
51073: LD_EXP 14
51077: PUSH
51078: FOR_TO
51079: IFFALSE 52204
// begin if mc_scan [ i ] then
51081: LD_EXP 37
51085: PUSH
51086: LD_VAR 0 2
51090: ARRAY
51091: IFFALSE 51095
// continue ;
51093: GO 51078
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
51095: LD_EXP 19
51099: PUSH
51100: LD_VAR 0 2
51104: ARRAY
51105: NOT
51106: PUSH
51107: LD_EXP 21
51111: PUSH
51112: LD_VAR 0 2
51116: ARRAY
51117: NOT
51118: AND
51119: PUSH
51120: LD_EXP 20
51124: PUSH
51125: LD_VAR 0 2
51129: ARRAY
51130: AND
51131: IFFALSE 51169
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
51133: LD_ADDR_EXP 20
51137: PUSH
51138: LD_EXP 20
51142: PPUSH
51143: LD_VAR 0 2
51147: PPUSH
51148: EMPTY
51149: PPUSH
51150: CALL_OW 1
51154: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
51155: LD_VAR 0 2
51159: PPUSH
51160: LD_INT 103
51162: PPUSH
51163: CALL 44889 0 2
// continue ;
51167: GO 51078
// end ; if mc_construct_list [ i ] then
51169: LD_EXP 21
51173: PUSH
51174: LD_VAR 0 2
51178: ARRAY
51179: IFFALSE 51399
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
51181: LD_ADDR_VAR 0 4
51185: PUSH
51186: LD_EXP 14
51190: PUSH
51191: LD_VAR 0 2
51195: ARRAY
51196: PPUSH
51197: LD_INT 25
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PPUSH
51207: CALL_OW 72
51211: PUSH
51212: LD_EXP 16
51216: PUSH
51217: LD_VAR 0 2
51221: ARRAY
51222: DIFF
51223: ST_TO_ADDR
// if not tmp then
51224: LD_VAR 0 4
51228: NOT
51229: IFFALSE 51233
// continue ;
51231: GO 51078
// for j in tmp do
51233: LD_ADDR_VAR 0 3
51237: PUSH
51238: LD_VAR 0 4
51242: PUSH
51243: FOR_IN
51244: IFFALSE 51395
// begin if not mc_builders [ i ] then
51246: LD_EXP 20
51250: PUSH
51251: LD_VAR 0 2
51255: ARRAY
51256: NOT
51257: IFFALSE 51315
// begin SetTag ( j , 103 ) ;
51259: LD_VAR 0 3
51263: PPUSH
51264: LD_INT 103
51266: PPUSH
51267: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
51271: LD_ADDR_EXP 20
51275: PUSH
51276: LD_EXP 20
51280: PPUSH
51281: LD_VAR 0 2
51285: PUSH
51286: LD_EXP 20
51290: PUSH
51291: LD_VAR 0 2
51295: ARRAY
51296: PUSH
51297: LD_INT 1
51299: PLUS
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PPUSH
51305: LD_VAR 0 3
51309: PPUSH
51310: CALL 9396 0 3
51314: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
51315: LD_VAR 0 3
51319: PPUSH
51320: CALL_OW 310
51324: IFFALSE 51335
// ComExitBuilding ( j ) ;
51326: LD_VAR 0 3
51330: PPUSH
51331: CALL_OW 122
// wait ( 3 ) ;
51335: LD_INT 3
51337: PPUSH
51338: CALL_OW 67
// if not mc_construct_list [ i ] then
51342: LD_EXP 21
51346: PUSH
51347: LD_VAR 0 2
51351: ARRAY
51352: NOT
51353: IFFALSE 51357
// break ;
51355: GO 51395
// if not HasTask ( j ) then
51357: LD_VAR 0 3
51361: PPUSH
51362: CALL_OW 314
51366: NOT
51367: IFFALSE 51393
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
51369: LD_VAR 0 3
51373: PPUSH
51374: LD_EXP 21
51378: PUSH
51379: LD_VAR 0 2
51383: ARRAY
51384: PUSH
51385: LD_INT 1
51387: ARRAY
51388: PPUSH
51389: CALL 12247 0 2
// end ;
51393: GO 51243
51395: POP
51396: POP
// end else
51397: GO 52202
// if mc_build_list [ i ] then
51399: LD_EXP 19
51403: PUSH
51404: LD_VAR 0 2
51408: ARRAY
51409: IFFALSE 52202
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51411: LD_ADDR_VAR 0 5
51415: PUSH
51416: LD_EXP 14
51420: PUSH
51421: LD_VAR 0 2
51425: ARRAY
51426: PPUSH
51427: LD_INT 2
51429: PUSH
51430: LD_INT 30
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 30
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: PPUSH
51455: CALL_OW 72
51459: ST_TO_ADDR
// if depot then
51460: LD_VAR 0 5
51464: IFFALSE 51482
// depot := depot [ 1 ] else
51466: LD_ADDR_VAR 0 5
51470: PUSH
51471: LD_VAR 0 5
51475: PUSH
51476: LD_INT 1
51478: ARRAY
51479: ST_TO_ADDR
51480: GO 51490
// depot := 0 ;
51482: LD_ADDR_VAR 0 5
51486: PUSH
51487: LD_INT 0
51489: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
51490: LD_EXP 19
51494: PUSH
51495: LD_VAR 0 2
51499: ARRAY
51500: PUSH
51501: LD_INT 1
51503: ARRAY
51504: PUSH
51505: LD_INT 1
51507: ARRAY
51508: PPUSH
51509: CALL 12077 0 1
51513: PUSH
51514: LD_EXP 14
51518: PUSH
51519: LD_VAR 0 2
51523: ARRAY
51524: PPUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 30
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 30
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: PPUSH
51553: CALL_OW 72
51557: NOT
51558: AND
51559: IFFALSE 51664
// begin for j = 1 to mc_build_list [ i ] do
51561: LD_ADDR_VAR 0 3
51565: PUSH
51566: DOUBLE
51567: LD_INT 1
51569: DEC
51570: ST_TO_ADDR
51571: LD_EXP 19
51575: PUSH
51576: LD_VAR 0 2
51580: ARRAY
51581: PUSH
51582: FOR_TO
51583: IFFALSE 51662
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
51585: LD_EXP 19
51589: PUSH
51590: LD_VAR 0 2
51594: ARRAY
51595: PUSH
51596: LD_VAR 0 3
51600: ARRAY
51601: PUSH
51602: LD_INT 1
51604: ARRAY
51605: PUSH
51606: LD_INT 2
51608: EQUAL
51609: IFFALSE 51660
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
51611: LD_ADDR_EXP 19
51615: PUSH
51616: LD_EXP 19
51620: PPUSH
51621: LD_VAR 0 2
51625: PPUSH
51626: LD_EXP 19
51630: PUSH
51631: LD_VAR 0 2
51635: ARRAY
51636: PPUSH
51637: LD_VAR 0 3
51641: PPUSH
51642: LD_INT 1
51644: PPUSH
51645: LD_INT 0
51647: PPUSH
51648: CALL 8814 0 4
51652: PPUSH
51653: CALL_OW 1
51657: ST_TO_ADDR
// break ;
51658: GO 51662
// end ;
51660: GO 51582
51662: POP
51663: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
51664: LD_EXP 19
51668: PUSH
51669: LD_VAR 0 2
51673: ARRAY
51674: PUSH
51675: LD_INT 1
51677: ARRAY
51678: PUSH
51679: LD_INT 1
51681: ARRAY
51682: PUSH
51683: LD_INT 0
51685: EQUAL
51686: PUSH
51687: LD_VAR 0 5
51691: PUSH
51692: LD_VAR 0 5
51696: PPUSH
51697: LD_EXP 19
51701: PUSH
51702: LD_VAR 0 2
51706: ARRAY
51707: PUSH
51708: LD_INT 1
51710: ARRAY
51711: PUSH
51712: LD_INT 1
51714: ARRAY
51715: PPUSH
51716: LD_EXP 19
51720: PUSH
51721: LD_VAR 0 2
51725: ARRAY
51726: PUSH
51727: LD_INT 1
51729: ARRAY
51730: PUSH
51731: LD_INT 2
51733: ARRAY
51734: PPUSH
51735: LD_EXP 19
51739: PUSH
51740: LD_VAR 0 2
51744: ARRAY
51745: PUSH
51746: LD_INT 1
51748: ARRAY
51749: PUSH
51750: LD_INT 3
51752: ARRAY
51753: PPUSH
51754: LD_EXP 19
51758: PUSH
51759: LD_VAR 0 2
51763: ARRAY
51764: PUSH
51765: LD_INT 1
51767: ARRAY
51768: PUSH
51769: LD_INT 4
51771: ARRAY
51772: PPUSH
51773: CALL 16811 0 5
51777: AND
51778: OR
51779: IFFALSE 52060
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
51781: LD_ADDR_VAR 0 4
51785: PUSH
51786: LD_EXP 14
51790: PUSH
51791: LD_VAR 0 2
51795: ARRAY
51796: PPUSH
51797: LD_INT 25
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PPUSH
51807: CALL_OW 72
51811: PUSH
51812: LD_EXP 16
51816: PUSH
51817: LD_VAR 0 2
51821: ARRAY
51822: DIFF
51823: ST_TO_ADDR
// if not tmp then
51824: LD_VAR 0 4
51828: NOT
51829: IFFALSE 51833
// continue ;
51831: GO 51078
// for j in tmp do
51833: LD_ADDR_VAR 0 3
51837: PUSH
51838: LD_VAR 0 4
51842: PUSH
51843: FOR_IN
51844: IFFALSE 52056
// begin if not mc_builders [ i ] then
51846: LD_EXP 20
51850: PUSH
51851: LD_VAR 0 2
51855: ARRAY
51856: NOT
51857: IFFALSE 51915
// begin SetTag ( j , 103 ) ;
51859: LD_VAR 0 3
51863: PPUSH
51864: LD_INT 103
51866: PPUSH
51867: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
51871: LD_ADDR_EXP 20
51875: PUSH
51876: LD_EXP 20
51880: PPUSH
51881: LD_VAR 0 2
51885: PUSH
51886: LD_EXP 20
51890: PUSH
51891: LD_VAR 0 2
51895: ARRAY
51896: PUSH
51897: LD_INT 1
51899: PLUS
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PPUSH
51905: LD_VAR 0 3
51909: PPUSH
51910: CALL 9396 0 3
51914: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
51915: LD_VAR 0 3
51919: PPUSH
51920: CALL_OW 310
51924: IFFALSE 51935
// ComExitBuilding ( j ) ;
51926: LD_VAR 0 3
51930: PPUSH
51931: CALL_OW 122
// wait ( 3 ) ;
51935: LD_INT 3
51937: PPUSH
51938: CALL_OW 67
// if not mc_build_list [ i ] then
51942: LD_EXP 19
51946: PUSH
51947: LD_VAR 0 2
51951: ARRAY
51952: NOT
51953: IFFALSE 51957
// break ;
51955: GO 52056
// if not HasTask ( j ) then
51957: LD_VAR 0 3
51961: PPUSH
51962: CALL_OW 314
51966: NOT
51967: IFFALSE 52054
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
51969: LD_VAR 0 3
51973: PPUSH
51974: LD_EXP 19
51978: PUSH
51979: LD_VAR 0 2
51983: ARRAY
51984: PUSH
51985: LD_INT 1
51987: ARRAY
51988: PUSH
51989: LD_INT 1
51991: ARRAY
51992: PPUSH
51993: LD_EXP 19
51997: PUSH
51998: LD_VAR 0 2
52002: ARRAY
52003: PUSH
52004: LD_INT 1
52006: ARRAY
52007: PUSH
52008: LD_INT 2
52010: ARRAY
52011: PPUSH
52012: LD_EXP 19
52016: PUSH
52017: LD_VAR 0 2
52021: ARRAY
52022: PUSH
52023: LD_INT 1
52025: ARRAY
52026: PUSH
52027: LD_INT 3
52029: ARRAY
52030: PPUSH
52031: LD_EXP 19
52035: PUSH
52036: LD_VAR 0 2
52040: ARRAY
52041: PUSH
52042: LD_INT 1
52044: ARRAY
52045: PUSH
52046: LD_INT 4
52048: ARRAY
52049: PPUSH
52050: CALL_OW 145
// end ;
52054: GO 51843
52056: POP
52057: POP
// end else
52058: GO 52202
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
52060: LD_EXP 14
52064: PUSH
52065: LD_VAR 0 2
52069: ARRAY
52070: PPUSH
52071: LD_EXP 19
52075: PUSH
52076: LD_VAR 0 2
52080: ARRAY
52081: PUSH
52082: LD_INT 1
52084: ARRAY
52085: PUSH
52086: LD_INT 1
52088: ARRAY
52089: PPUSH
52090: LD_EXP 19
52094: PUSH
52095: LD_VAR 0 2
52099: ARRAY
52100: PUSH
52101: LD_INT 1
52103: ARRAY
52104: PUSH
52105: LD_INT 2
52107: ARRAY
52108: PPUSH
52109: LD_EXP 19
52113: PUSH
52114: LD_VAR 0 2
52118: ARRAY
52119: PUSH
52120: LD_INT 1
52122: ARRAY
52123: PUSH
52124: LD_INT 3
52126: ARRAY
52127: PPUSH
52128: LD_EXP 19
52132: PUSH
52133: LD_VAR 0 2
52137: ARRAY
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PUSH
52143: LD_INT 4
52145: ARRAY
52146: PPUSH
52147: CALL 16147 0 5
52151: NOT
52152: IFFALSE 52202
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
52154: LD_ADDR_EXP 19
52158: PUSH
52159: LD_EXP 19
52163: PPUSH
52164: LD_VAR 0 2
52168: PPUSH
52169: LD_EXP 19
52173: PUSH
52174: LD_VAR 0 2
52178: ARRAY
52179: PPUSH
52180: LD_INT 1
52182: PPUSH
52183: LD_INT 1
52185: NEG
52186: PPUSH
52187: LD_INT 0
52189: PPUSH
52190: CALL 8814 0 4
52194: PPUSH
52195: CALL_OW 1
52199: ST_TO_ADDR
// continue ;
52200: GO 51078
// end ; end ; end ;
52202: GO 51078
52204: POP
52205: POP
// end ;
52206: LD_VAR 0 1
52210: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
52211: LD_INT 0
52213: PPUSH
52214: PPUSH
52215: PPUSH
52216: PPUSH
52217: PPUSH
52218: PPUSH
// if not mc_bases then
52219: LD_EXP 14
52223: NOT
52224: IFFALSE 52228
// exit ;
52226: GO 52655
// for i = 1 to mc_bases do
52228: LD_ADDR_VAR 0 2
52232: PUSH
52233: DOUBLE
52234: LD_INT 1
52236: DEC
52237: ST_TO_ADDR
52238: LD_EXP 14
52242: PUSH
52243: FOR_TO
52244: IFFALSE 52653
// begin tmp := mc_build_upgrade [ i ] ;
52246: LD_ADDR_VAR 0 4
52250: PUSH
52251: LD_EXP 46
52255: PUSH
52256: LD_VAR 0 2
52260: ARRAY
52261: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
52262: LD_ADDR_VAR 0 6
52266: PUSH
52267: LD_EXP 47
52271: PUSH
52272: LD_VAR 0 2
52276: ARRAY
52277: PPUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 30
52283: PUSH
52284: LD_INT 6
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 30
52293: PUSH
52294: LD_INT 7
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: PPUSH
52306: CALL_OW 72
52310: ST_TO_ADDR
// if not tmp and not lab then
52311: LD_VAR 0 4
52315: NOT
52316: PUSH
52317: LD_VAR 0 6
52321: NOT
52322: AND
52323: IFFALSE 52327
// continue ;
52325: GO 52243
// if tmp then
52327: LD_VAR 0 4
52331: IFFALSE 52451
// for j in tmp do
52333: LD_ADDR_VAR 0 3
52337: PUSH
52338: LD_VAR 0 4
52342: PUSH
52343: FOR_IN
52344: IFFALSE 52449
// begin if UpgradeCost ( j ) then
52346: LD_VAR 0 3
52350: PPUSH
52351: CALL 15807 0 1
52355: IFFALSE 52447
// begin ComUpgrade ( j ) ;
52357: LD_VAR 0 3
52361: PPUSH
52362: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
52366: LD_ADDR_EXP 46
52370: PUSH
52371: LD_EXP 46
52375: PPUSH
52376: LD_VAR 0 2
52380: PPUSH
52381: LD_EXP 46
52385: PUSH
52386: LD_VAR 0 2
52390: ARRAY
52391: PUSH
52392: LD_VAR 0 3
52396: DIFF
52397: PPUSH
52398: CALL_OW 1
52402: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
52403: LD_ADDR_EXP 21
52407: PUSH
52408: LD_EXP 21
52412: PPUSH
52413: LD_VAR 0 2
52417: PUSH
52418: LD_EXP 21
52422: PUSH
52423: LD_VAR 0 2
52427: ARRAY
52428: PUSH
52429: LD_INT 1
52431: PLUS
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PPUSH
52437: LD_VAR 0 3
52441: PPUSH
52442: CALL 9396 0 3
52446: ST_TO_ADDR
// end ; end ;
52447: GO 52343
52449: POP
52450: POP
// if not lab or not mc_lab_upgrade [ i ] then
52451: LD_VAR 0 6
52455: NOT
52456: PUSH
52457: LD_EXP 48
52461: PUSH
52462: LD_VAR 0 2
52466: ARRAY
52467: NOT
52468: OR
52469: IFFALSE 52473
// continue ;
52471: GO 52243
// for j in lab do
52473: LD_ADDR_VAR 0 3
52477: PUSH
52478: LD_VAR 0 6
52482: PUSH
52483: FOR_IN
52484: IFFALSE 52649
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
52486: LD_VAR 0 3
52490: PPUSH
52491: CALL_OW 266
52495: PUSH
52496: LD_INT 6
52498: PUSH
52499: LD_INT 7
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: IN
52506: PUSH
52507: LD_VAR 0 3
52511: PPUSH
52512: CALL_OW 461
52516: PUSH
52517: LD_INT 1
52519: NONEQUAL
52520: AND
52521: IFFALSE 52647
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
52523: LD_VAR 0 3
52527: PPUSH
52528: LD_EXP 48
52532: PUSH
52533: LD_VAR 0 2
52537: ARRAY
52538: PUSH
52539: LD_INT 1
52541: ARRAY
52542: PPUSH
52543: CALL 16012 0 2
52547: IFFALSE 52647
// begin ComCancel ( j ) ;
52549: LD_VAR 0 3
52553: PPUSH
52554: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
52558: LD_VAR 0 3
52562: PPUSH
52563: LD_EXP 48
52567: PUSH
52568: LD_VAR 0 2
52572: ARRAY
52573: PUSH
52574: LD_INT 1
52576: ARRAY
52577: PPUSH
52578: CALL_OW 207
// if not j in mc_construct_list [ i ] then
52582: LD_VAR 0 3
52586: PUSH
52587: LD_EXP 21
52591: PUSH
52592: LD_VAR 0 2
52596: ARRAY
52597: IN
52598: NOT
52599: IFFALSE 52645
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
52601: LD_ADDR_EXP 21
52605: PUSH
52606: LD_EXP 21
52610: PPUSH
52611: LD_VAR 0 2
52615: PUSH
52616: LD_EXP 21
52620: PUSH
52621: LD_VAR 0 2
52625: ARRAY
52626: PUSH
52627: LD_INT 1
52629: PLUS
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PPUSH
52635: LD_VAR 0 3
52639: PPUSH
52640: CALL 9396 0 3
52644: ST_TO_ADDR
// break ;
52645: GO 52649
// end ; end ; end ;
52647: GO 52483
52649: POP
52650: POP
// end ;
52651: GO 52243
52653: POP
52654: POP
// end ;
52655: LD_VAR 0 1
52659: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
52660: LD_INT 0
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
// if not mc_bases then
52671: LD_EXP 14
52675: NOT
52676: IFFALSE 52680
// exit ;
52678: GO 53085
// for i = 1 to mc_bases do
52680: LD_ADDR_VAR 0 2
52684: PUSH
52685: DOUBLE
52686: LD_INT 1
52688: DEC
52689: ST_TO_ADDR
52690: LD_EXP 14
52694: PUSH
52695: FOR_TO
52696: IFFALSE 53083
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
52698: LD_EXP 22
52702: PUSH
52703: LD_VAR 0 2
52707: ARRAY
52708: NOT
52709: PUSH
52710: LD_EXP 14
52714: PUSH
52715: LD_VAR 0 2
52719: ARRAY
52720: PPUSH
52721: LD_INT 30
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PPUSH
52731: CALL_OW 72
52735: NOT
52736: OR
52737: IFFALSE 52741
// continue ;
52739: GO 52695
// busy := false ;
52741: LD_ADDR_VAR 0 8
52745: PUSH
52746: LD_INT 0
52748: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52749: LD_ADDR_VAR 0 4
52753: PUSH
52754: LD_EXP 14
52758: PUSH
52759: LD_VAR 0 2
52763: ARRAY
52764: PPUSH
52765: LD_INT 30
52767: PUSH
52768: LD_INT 3
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PPUSH
52775: CALL_OW 72
52779: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
52780: LD_ADDR_VAR 0 6
52784: PUSH
52785: LD_EXP 22
52789: PUSH
52790: LD_VAR 0 2
52794: ARRAY
52795: PPUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 30
52801: PUSH
52802: LD_INT 32
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 30
52811: PUSH
52812: LD_INT 33
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: PPUSH
52824: CALL_OW 72
52828: ST_TO_ADDR
// if not t then
52829: LD_VAR 0 6
52833: NOT
52834: IFFALSE 52838
// continue ;
52836: GO 52695
// for j in tmp do
52838: LD_ADDR_VAR 0 3
52842: PUSH
52843: LD_VAR 0 4
52847: PUSH
52848: FOR_IN
52849: IFFALSE 52879
// if not BuildingStatus ( j ) = bs_idle then
52851: LD_VAR 0 3
52855: PPUSH
52856: CALL_OW 461
52860: PUSH
52861: LD_INT 2
52863: EQUAL
52864: NOT
52865: IFFALSE 52877
// begin busy := true ;
52867: LD_ADDR_VAR 0 8
52871: PUSH
52872: LD_INT 1
52874: ST_TO_ADDR
// break ;
52875: GO 52879
// end ;
52877: GO 52848
52879: POP
52880: POP
// if busy then
52881: LD_VAR 0 8
52885: IFFALSE 52889
// continue ;
52887: GO 52695
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
52889: LD_ADDR_VAR 0 7
52893: PUSH
52894: LD_VAR 0 6
52898: PPUSH
52899: LD_INT 35
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PPUSH
52909: CALL_OW 72
52913: ST_TO_ADDR
// if tw then
52914: LD_VAR 0 7
52918: IFFALSE 52995
// begin tw := tw [ 1 ] ;
52920: LD_ADDR_VAR 0 7
52924: PUSH
52925: LD_VAR 0 7
52929: PUSH
52930: LD_INT 1
52932: ARRAY
52933: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
52934: LD_ADDR_VAR 0 9
52938: PUSH
52939: LD_VAR 0 7
52943: PPUSH
52944: LD_EXP 39
52948: PUSH
52949: LD_VAR 0 2
52953: ARRAY
52954: PPUSH
52955: CALL 14366 0 2
52959: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
52960: LD_EXP 53
52964: PUSH
52965: LD_VAR 0 2
52969: ARRAY
52970: IFFALSE 52993
// if not weapon in mc_allowed_tower_weapons [ i ] then
52972: LD_VAR 0 9
52976: PUSH
52977: LD_EXP 53
52981: PUSH
52982: LD_VAR 0 2
52986: ARRAY
52987: IN
52988: NOT
52989: IFFALSE 52993
// continue ;
52991: GO 52695
// end else
52993: GO 53058
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
52995: LD_ADDR_VAR 0 5
52999: PUSH
53000: LD_EXP 22
53004: PUSH
53005: LD_VAR 0 2
53009: ARRAY
53010: PPUSH
53011: LD_VAR 0 4
53015: PPUSH
53016: CALL 39868 0 2
53020: ST_TO_ADDR
// if not tmp2 then
53021: LD_VAR 0 5
53025: NOT
53026: IFFALSE 53030
// continue ;
53028: GO 52695
// tw := tmp2 [ 1 ] ;
53030: LD_ADDR_VAR 0 7
53034: PUSH
53035: LD_VAR 0 5
53039: PUSH
53040: LD_INT 1
53042: ARRAY
53043: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
53044: LD_ADDR_VAR 0 9
53048: PUSH
53049: LD_VAR 0 5
53053: PUSH
53054: LD_INT 2
53056: ARRAY
53057: ST_TO_ADDR
// end ; if not weapon then
53058: LD_VAR 0 9
53062: NOT
53063: IFFALSE 53067
// continue ;
53065: GO 52695
// ComPlaceWeapon ( tw , weapon ) ;
53067: LD_VAR 0 7
53071: PPUSH
53072: LD_VAR 0 9
53076: PPUSH
53077: CALL_OW 148
// end ;
53081: GO 52695
53083: POP
53084: POP
// end ;
53085: LD_VAR 0 1
53089: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
53090: LD_INT 0
53092: PPUSH
53093: PPUSH
53094: PPUSH
53095: PPUSH
53096: PPUSH
53097: PPUSH
// if not mc_bases then
53098: LD_EXP 14
53102: NOT
53103: IFFALSE 53107
// exit ;
53105: GO 53883
// for i = 1 to mc_bases do
53107: LD_ADDR_VAR 0 2
53111: PUSH
53112: DOUBLE
53113: LD_INT 1
53115: DEC
53116: ST_TO_ADDR
53117: LD_EXP 14
53121: PUSH
53122: FOR_TO
53123: IFFALSE 53881
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
53125: LD_EXP 27
53129: PUSH
53130: LD_VAR 0 2
53134: ARRAY
53135: NOT
53136: PUSH
53137: LD_EXP 27
53141: PUSH
53142: LD_VAR 0 2
53146: ARRAY
53147: PUSH
53148: LD_EXP 28
53152: PUSH
53153: LD_VAR 0 2
53157: ARRAY
53158: EQUAL
53159: OR
53160: PUSH
53161: LD_EXP 37
53165: PUSH
53166: LD_VAR 0 2
53170: ARRAY
53171: OR
53172: IFFALSE 53176
// continue ;
53174: GO 53122
// if mc_miners [ i ] then
53176: LD_EXP 28
53180: PUSH
53181: LD_VAR 0 2
53185: ARRAY
53186: IFFALSE 53568
// begin for j = mc_miners [ i ] downto 1 do
53188: LD_ADDR_VAR 0 3
53192: PUSH
53193: DOUBLE
53194: LD_EXP 28
53198: PUSH
53199: LD_VAR 0 2
53203: ARRAY
53204: INC
53205: ST_TO_ADDR
53206: LD_INT 1
53208: PUSH
53209: FOR_DOWNTO
53210: IFFALSE 53566
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
53212: LD_EXP 28
53216: PUSH
53217: LD_VAR 0 2
53221: ARRAY
53222: PUSH
53223: LD_VAR 0 3
53227: ARRAY
53228: PPUSH
53229: CALL_OW 301
53233: PUSH
53234: LD_EXP 28
53238: PUSH
53239: LD_VAR 0 2
53243: ARRAY
53244: PUSH
53245: LD_VAR 0 3
53249: ARRAY
53250: PPUSH
53251: CALL_OW 257
53255: PUSH
53256: LD_INT 1
53258: NONEQUAL
53259: OR
53260: IFFALSE 53323
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
53262: LD_ADDR_VAR 0 5
53266: PUSH
53267: LD_EXP 28
53271: PUSH
53272: LD_VAR 0 2
53276: ARRAY
53277: PUSH
53278: LD_EXP 28
53282: PUSH
53283: LD_VAR 0 2
53287: ARRAY
53288: PUSH
53289: LD_VAR 0 3
53293: ARRAY
53294: DIFF
53295: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
53296: LD_ADDR_EXP 28
53300: PUSH
53301: LD_EXP 28
53305: PPUSH
53306: LD_VAR 0 2
53310: PPUSH
53311: LD_VAR 0 5
53315: PPUSH
53316: CALL_OW 1
53320: ST_TO_ADDR
// continue ;
53321: GO 53209
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
53323: LD_EXP 28
53327: PUSH
53328: LD_VAR 0 2
53332: ARRAY
53333: PUSH
53334: LD_VAR 0 3
53338: ARRAY
53339: PPUSH
53340: CALL_OW 257
53344: PUSH
53345: LD_INT 1
53347: EQUAL
53348: PUSH
53349: LD_EXP 28
53353: PUSH
53354: LD_VAR 0 2
53358: ARRAY
53359: PUSH
53360: LD_VAR 0 3
53364: ARRAY
53365: PPUSH
53366: CALL_OW 459
53370: NOT
53371: AND
53372: PUSH
53373: LD_EXP 28
53377: PUSH
53378: LD_VAR 0 2
53382: ARRAY
53383: PUSH
53384: LD_VAR 0 3
53388: ARRAY
53389: PPUSH
53390: CALL_OW 314
53394: NOT
53395: AND
53396: IFFALSE 53564
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
53398: LD_EXP 28
53402: PUSH
53403: LD_VAR 0 2
53407: ARRAY
53408: PUSH
53409: LD_VAR 0 3
53413: ARRAY
53414: PPUSH
53415: CALL_OW 310
53419: IFFALSE 53442
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
53421: LD_EXP 28
53425: PUSH
53426: LD_VAR 0 2
53430: ARRAY
53431: PUSH
53432: LD_VAR 0 3
53436: ARRAY
53437: PPUSH
53438: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
53442: LD_EXP 28
53446: PUSH
53447: LD_VAR 0 2
53451: ARRAY
53452: PUSH
53453: LD_VAR 0 3
53457: ARRAY
53458: PPUSH
53459: CALL_OW 314
53463: NOT
53464: IFFALSE 53564
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
53466: LD_EXP 28
53470: PUSH
53471: LD_VAR 0 2
53475: ARRAY
53476: PUSH
53477: LD_VAR 0 3
53481: ARRAY
53482: PPUSH
53483: LD_EXP 27
53487: PUSH
53488: LD_VAR 0 2
53492: ARRAY
53493: PUSH
53494: LD_VAR 0 3
53498: PUSH
53499: LD_EXP 27
53503: PUSH
53504: LD_VAR 0 2
53508: ARRAY
53509: MOD
53510: PUSH
53511: LD_INT 1
53513: PLUS
53514: ARRAY
53515: PUSH
53516: LD_INT 1
53518: ARRAY
53519: PPUSH
53520: LD_EXP 27
53524: PUSH
53525: LD_VAR 0 2
53529: ARRAY
53530: PUSH
53531: LD_VAR 0 3
53535: PUSH
53536: LD_EXP 27
53540: PUSH
53541: LD_VAR 0 2
53545: ARRAY
53546: MOD
53547: PUSH
53548: LD_INT 1
53550: PLUS
53551: ARRAY
53552: PUSH
53553: LD_INT 2
53555: ARRAY
53556: PPUSH
53557: LD_INT 0
53559: PPUSH
53560: CALL_OW 193
// end ; end ;
53564: GO 53209
53566: POP
53567: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
53568: LD_ADDR_VAR 0 5
53572: PUSH
53573: LD_EXP 14
53577: PUSH
53578: LD_VAR 0 2
53582: ARRAY
53583: PPUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 30
53589: PUSH
53590: LD_INT 4
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 30
53599: PUSH
53600: LD_INT 5
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 30
53609: PUSH
53610: LD_INT 32
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: PPUSH
53623: CALL_OW 72
53627: ST_TO_ADDR
// if not tmp then
53628: LD_VAR 0 5
53632: NOT
53633: IFFALSE 53637
// continue ;
53635: GO 53122
// list := [ ] ;
53637: LD_ADDR_VAR 0 6
53641: PUSH
53642: EMPTY
53643: ST_TO_ADDR
// for j in tmp do
53644: LD_ADDR_VAR 0 3
53648: PUSH
53649: LD_VAR 0 5
53653: PUSH
53654: FOR_IN
53655: IFFALSE 53724
// begin for k in UnitsInside ( j ) do
53657: LD_ADDR_VAR 0 4
53661: PUSH
53662: LD_VAR 0 3
53666: PPUSH
53667: CALL_OW 313
53671: PUSH
53672: FOR_IN
53673: IFFALSE 53720
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
53675: LD_VAR 0 4
53679: PPUSH
53680: CALL_OW 257
53684: PUSH
53685: LD_INT 1
53687: EQUAL
53688: PUSH
53689: LD_VAR 0 4
53693: PPUSH
53694: CALL_OW 459
53698: NOT
53699: AND
53700: IFFALSE 53718
// list := list ^ k ;
53702: LD_ADDR_VAR 0 6
53706: PUSH
53707: LD_VAR 0 6
53711: PUSH
53712: LD_VAR 0 4
53716: ADD
53717: ST_TO_ADDR
53718: GO 53672
53720: POP
53721: POP
// end ;
53722: GO 53654
53724: POP
53725: POP
// list := list diff mc_miners [ i ] ;
53726: LD_ADDR_VAR 0 6
53730: PUSH
53731: LD_VAR 0 6
53735: PUSH
53736: LD_EXP 28
53740: PUSH
53741: LD_VAR 0 2
53745: ARRAY
53746: DIFF
53747: ST_TO_ADDR
// if not list then
53748: LD_VAR 0 6
53752: NOT
53753: IFFALSE 53757
// continue ;
53755: GO 53122
// k := mc_mines [ i ] - mc_miners [ i ] ;
53757: LD_ADDR_VAR 0 4
53761: PUSH
53762: LD_EXP 27
53766: PUSH
53767: LD_VAR 0 2
53771: ARRAY
53772: PUSH
53773: LD_EXP 28
53777: PUSH
53778: LD_VAR 0 2
53782: ARRAY
53783: MINUS
53784: ST_TO_ADDR
// if k > list then
53785: LD_VAR 0 4
53789: PUSH
53790: LD_VAR 0 6
53794: GREATER
53795: IFFALSE 53807
// k := list ;
53797: LD_ADDR_VAR 0 4
53801: PUSH
53802: LD_VAR 0 6
53806: ST_TO_ADDR
// for j = 1 to k do
53807: LD_ADDR_VAR 0 3
53811: PUSH
53812: DOUBLE
53813: LD_INT 1
53815: DEC
53816: ST_TO_ADDR
53817: LD_VAR 0 4
53821: PUSH
53822: FOR_TO
53823: IFFALSE 53877
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
53825: LD_ADDR_EXP 28
53829: PUSH
53830: LD_EXP 28
53834: PPUSH
53835: LD_VAR 0 2
53839: PUSH
53840: LD_EXP 28
53844: PUSH
53845: LD_VAR 0 2
53849: ARRAY
53850: PUSH
53851: LD_INT 1
53853: PLUS
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PPUSH
53859: LD_VAR 0 6
53863: PUSH
53864: LD_VAR 0 3
53868: ARRAY
53869: PPUSH
53870: CALL 9396 0 3
53874: ST_TO_ADDR
53875: GO 53822
53877: POP
53878: POP
// end ;
53879: GO 53122
53881: POP
53882: POP
// end ;
53883: LD_VAR 0 1
53887: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
53888: LD_INT 0
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
// if not mc_bases then
53900: LD_EXP 14
53904: NOT
53905: IFFALSE 53909
// exit ;
53907: GO 55659
// for i = 1 to mc_bases do
53909: LD_ADDR_VAR 0 2
53913: PUSH
53914: DOUBLE
53915: LD_INT 1
53917: DEC
53918: ST_TO_ADDR
53919: LD_EXP 14
53923: PUSH
53924: FOR_TO
53925: IFFALSE 55657
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
53927: LD_EXP 14
53931: PUSH
53932: LD_VAR 0 2
53936: ARRAY
53937: NOT
53938: PUSH
53939: LD_EXP 21
53943: PUSH
53944: LD_VAR 0 2
53948: ARRAY
53949: OR
53950: IFFALSE 53954
// continue ;
53952: GO 53924
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
53954: LD_EXP 30
53958: PUSH
53959: LD_VAR 0 2
53963: ARRAY
53964: NOT
53965: PUSH
53966: LD_EXP 31
53970: PUSH
53971: LD_VAR 0 2
53975: ARRAY
53976: AND
53977: IFFALSE 54015
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53979: LD_ADDR_EXP 31
53983: PUSH
53984: LD_EXP 31
53988: PPUSH
53989: LD_VAR 0 2
53993: PPUSH
53994: EMPTY
53995: PPUSH
53996: CALL_OW 1
54000: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
54001: LD_VAR 0 2
54005: PPUSH
54006: LD_INT 107
54008: PPUSH
54009: CALL 44889 0 2
// continue ;
54013: GO 53924
// end ; target := [ ] ;
54015: LD_ADDR_VAR 0 6
54019: PUSH
54020: EMPTY
54021: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
54022: LD_ADDR_VAR 0 3
54026: PUSH
54027: DOUBLE
54028: LD_EXP 30
54032: PUSH
54033: LD_VAR 0 2
54037: ARRAY
54038: INC
54039: ST_TO_ADDR
54040: LD_INT 1
54042: PUSH
54043: FOR_DOWNTO
54044: IFFALSE 54304
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
54046: LD_EXP 30
54050: PUSH
54051: LD_VAR 0 2
54055: ARRAY
54056: PUSH
54057: LD_VAR 0 3
54061: ARRAY
54062: PUSH
54063: LD_INT 2
54065: ARRAY
54066: PPUSH
54067: LD_EXP 30
54071: PUSH
54072: LD_VAR 0 2
54076: ARRAY
54077: PUSH
54078: LD_VAR 0 3
54082: ARRAY
54083: PUSH
54084: LD_INT 3
54086: ARRAY
54087: PPUSH
54088: CALL_OW 488
54092: PUSH
54093: LD_EXP 30
54097: PUSH
54098: LD_VAR 0 2
54102: ARRAY
54103: PUSH
54104: LD_VAR 0 3
54108: ARRAY
54109: PUSH
54110: LD_INT 2
54112: ARRAY
54113: PPUSH
54114: LD_EXP 30
54118: PUSH
54119: LD_VAR 0 2
54123: ARRAY
54124: PUSH
54125: LD_VAR 0 3
54129: ARRAY
54130: PUSH
54131: LD_INT 3
54133: ARRAY
54134: PPUSH
54135: CALL_OW 284
54139: PUSH
54140: LD_INT 0
54142: EQUAL
54143: AND
54144: IFFALSE 54199
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
54146: LD_ADDR_VAR 0 5
54150: PUSH
54151: LD_EXP 30
54155: PUSH
54156: LD_VAR 0 2
54160: ARRAY
54161: PPUSH
54162: LD_VAR 0 3
54166: PPUSH
54167: CALL_OW 3
54171: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
54172: LD_ADDR_EXP 30
54176: PUSH
54177: LD_EXP 30
54181: PPUSH
54182: LD_VAR 0 2
54186: PPUSH
54187: LD_VAR 0 5
54191: PPUSH
54192: CALL_OW 1
54196: ST_TO_ADDR
// continue ;
54197: GO 54043
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
54199: LD_EXP 14
54203: PUSH
54204: LD_VAR 0 2
54208: ARRAY
54209: PUSH
54210: LD_INT 1
54212: ARRAY
54213: PPUSH
54214: CALL_OW 255
54218: PPUSH
54219: LD_EXP 30
54223: PUSH
54224: LD_VAR 0 2
54228: ARRAY
54229: PUSH
54230: LD_VAR 0 3
54234: ARRAY
54235: PUSH
54236: LD_INT 2
54238: ARRAY
54239: PPUSH
54240: LD_EXP 30
54244: PUSH
54245: LD_VAR 0 2
54249: ARRAY
54250: PUSH
54251: LD_VAR 0 3
54255: ARRAY
54256: PUSH
54257: LD_INT 3
54259: ARRAY
54260: PPUSH
54261: LD_INT 30
54263: PPUSH
54264: CALL 10292 0 4
54268: PUSH
54269: LD_INT 4
54271: ARRAY
54272: PUSH
54273: LD_INT 0
54275: EQUAL
54276: IFFALSE 54302
// begin target := mc_crates [ i ] [ j ] ;
54278: LD_ADDR_VAR 0 6
54282: PUSH
54283: LD_EXP 30
54287: PUSH
54288: LD_VAR 0 2
54292: ARRAY
54293: PUSH
54294: LD_VAR 0 3
54298: ARRAY
54299: ST_TO_ADDR
// break ;
54300: GO 54304
// end ; end ;
54302: GO 54043
54304: POP
54305: POP
// if not target then
54306: LD_VAR 0 6
54310: NOT
54311: IFFALSE 54315
// continue ;
54313: GO 53924
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
54315: LD_ADDR_VAR 0 7
54319: PUSH
54320: LD_EXP 33
54324: PUSH
54325: LD_VAR 0 2
54329: ARRAY
54330: PPUSH
54331: LD_INT 2
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: LD_INT 58
54339: PUSH
54340: EMPTY
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 61
54349: PUSH
54350: EMPTY
54351: LIST
54352: PUSH
54353: LD_INT 33
54355: PUSH
54356: LD_INT 5
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 33
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 34
54385: PUSH
54386: LD_INT 32
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 34
54395: PUSH
54396: LD_INT 51
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 34
54405: PUSH
54406: LD_INT 12
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PPUSH
54423: CALL_OW 72
54427: ST_TO_ADDR
// if not cargo then
54428: LD_VAR 0 7
54432: NOT
54433: IFFALSE 55076
// begin if mc_crates_collector [ i ] < 5 then
54435: LD_EXP 31
54439: PUSH
54440: LD_VAR 0 2
54444: ARRAY
54445: PUSH
54446: LD_INT 5
54448: LESS
54449: IFFALSE 54815
// begin if mc_ape [ i ] then
54451: LD_EXP 43
54455: PUSH
54456: LD_VAR 0 2
54460: ARRAY
54461: IFFALSE 54508
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
54463: LD_ADDR_VAR 0 5
54467: PUSH
54468: LD_EXP 43
54472: PUSH
54473: LD_VAR 0 2
54477: ARRAY
54478: PPUSH
54479: LD_INT 25
54481: PUSH
54482: LD_INT 16
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 24
54491: PUSH
54492: LD_INT 750
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PPUSH
54503: CALL_OW 72
54507: ST_TO_ADDR
// if not tmp then
54508: LD_VAR 0 5
54512: NOT
54513: IFFALSE 54560
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
54515: LD_ADDR_VAR 0 5
54519: PUSH
54520: LD_EXP 14
54524: PUSH
54525: LD_VAR 0 2
54529: ARRAY
54530: PPUSH
54531: LD_INT 25
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 24
54543: PUSH
54544: LD_INT 750
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PPUSH
54555: CALL_OW 72
54559: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
54560: LD_EXP 43
54564: PUSH
54565: LD_VAR 0 2
54569: ARRAY
54570: PUSH
54571: LD_EXP 14
54575: PUSH
54576: LD_VAR 0 2
54580: ARRAY
54581: PPUSH
54582: LD_INT 25
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 24
54594: PUSH
54595: LD_INT 750
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PPUSH
54606: CALL_OW 72
54610: AND
54611: PUSH
54612: LD_VAR 0 5
54616: PUSH
54617: LD_INT 5
54619: LESS
54620: AND
54621: IFFALSE 54703
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
54623: LD_ADDR_VAR 0 3
54627: PUSH
54628: LD_EXP 14
54632: PUSH
54633: LD_VAR 0 2
54637: ARRAY
54638: PPUSH
54639: LD_INT 25
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 24
54651: PUSH
54652: LD_INT 750
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PPUSH
54663: CALL_OW 72
54667: PUSH
54668: FOR_IN
54669: IFFALSE 54701
// begin tmp := tmp union j ;
54671: LD_ADDR_VAR 0 5
54675: PUSH
54676: LD_VAR 0 5
54680: PUSH
54681: LD_VAR 0 3
54685: UNION
54686: ST_TO_ADDR
// if tmp >= 5 then
54687: LD_VAR 0 5
54691: PUSH
54692: LD_INT 5
54694: GREATEREQUAL
54695: IFFALSE 54699
// break ;
54697: GO 54701
// end ;
54699: GO 54668
54701: POP
54702: POP
// end ; if not tmp then
54703: LD_VAR 0 5
54707: NOT
54708: IFFALSE 54712
// continue ;
54710: GO 53924
// for j in tmp do
54712: LD_ADDR_VAR 0 3
54716: PUSH
54717: LD_VAR 0 5
54721: PUSH
54722: FOR_IN
54723: IFFALSE 54813
// if not GetTag ( j ) then
54725: LD_VAR 0 3
54729: PPUSH
54730: CALL_OW 110
54734: NOT
54735: IFFALSE 54811
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
54737: LD_ADDR_EXP 31
54741: PUSH
54742: LD_EXP 31
54746: PPUSH
54747: LD_VAR 0 2
54751: PUSH
54752: LD_EXP 31
54756: PUSH
54757: LD_VAR 0 2
54761: ARRAY
54762: PUSH
54763: LD_INT 1
54765: PLUS
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PPUSH
54771: LD_VAR 0 3
54775: PPUSH
54776: CALL 9396 0 3
54780: ST_TO_ADDR
// SetTag ( j , 107 ) ;
54781: LD_VAR 0 3
54785: PPUSH
54786: LD_INT 107
54788: PPUSH
54789: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
54793: LD_EXP 31
54797: PUSH
54798: LD_VAR 0 2
54802: ARRAY
54803: PUSH
54804: LD_INT 5
54806: GREATEREQUAL
54807: IFFALSE 54811
// break ;
54809: GO 54813
// end ;
54811: GO 54722
54813: POP
54814: POP
// end ; if mc_crates_collector [ i ] and target then
54815: LD_EXP 31
54819: PUSH
54820: LD_VAR 0 2
54824: ARRAY
54825: PUSH
54826: LD_VAR 0 6
54830: AND
54831: IFFALSE 55074
// begin if mc_crates_collector [ i ] < target [ 1 ] then
54833: LD_EXP 31
54837: PUSH
54838: LD_VAR 0 2
54842: ARRAY
54843: PUSH
54844: LD_VAR 0 6
54848: PUSH
54849: LD_INT 1
54851: ARRAY
54852: LESS
54853: IFFALSE 54873
// tmp := mc_crates_collector [ i ] else
54855: LD_ADDR_VAR 0 5
54859: PUSH
54860: LD_EXP 31
54864: PUSH
54865: LD_VAR 0 2
54869: ARRAY
54870: ST_TO_ADDR
54871: GO 54887
// tmp := target [ 1 ] ;
54873: LD_ADDR_VAR 0 5
54877: PUSH
54878: LD_VAR 0 6
54882: PUSH
54883: LD_INT 1
54885: ARRAY
54886: ST_TO_ADDR
// k := 0 ;
54887: LD_ADDR_VAR 0 4
54891: PUSH
54892: LD_INT 0
54894: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
54895: LD_ADDR_VAR 0 3
54899: PUSH
54900: LD_EXP 31
54904: PUSH
54905: LD_VAR 0 2
54909: ARRAY
54910: PUSH
54911: FOR_IN
54912: IFFALSE 55072
// begin k := k + 1 ;
54914: LD_ADDR_VAR 0 4
54918: PUSH
54919: LD_VAR 0 4
54923: PUSH
54924: LD_INT 1
54926: PLUS
54927: ST_TO_ADDR
// if k > tmp then
54928: LD_VAR 0 4
54932: PUSH
54933: LD_VAR 0 5
54937: GREATER
54938: IFFALSE 54942
// break ;
54940: GO 55072
// if not GetClass ( j ) in [ 2 , 16 ] then
54942: LD_VAR 0 3
54946: PPUSH
54947: CALL_OW 257
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: LD_INT 16
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: IN
54962: NOT
54963: IFFALSE 55016
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
54965: LD_ADDR_EXP 31
54969: PUSH
54970: LD_EXP 31
54974: PPUSH
54975: LD_VAR 0 2
54979: PPUSH
54980: LD_EXP 31
54984: PUSH
54985: LD_VAR 0 2
54989: ARRAY
54990: PUSH
54991: LD_VAR 0 3
54995: DIFF
54996: PPUSH
54997: CALL_OW 1
55001: ST_TO_ADDR
// SetTag ( j , 0 ) ;
55002: LD_VAR 0 3
55006: PPUSH
55007: LD_INT 0
55009: PPUSH
55010: CALL_OW 109
// continue ;
55014: GO 54911
// end ; if IsInUnit ( j ) then
55016: LD_VAR 0 3
55020: PPUSH
55021: CALL_OW 310
55025: IFFALSE 55036
// ComExitBuilding ( j ) ;
55027: LD_VAR 0 3
55031: PPUSH
55032: CALL_OW 122
// wait ( 3 ) ;
55036: LD_INT 3
55038: PPUSH
55039: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
55043: LD_VAR 0 3
55047: PPUSH
55048: LD_VAR 0 6
55052: PUSH
55053: LD_INT 2
55055: ARRAY
55056: PPUSH
55057: LD_VAR 0 6
55061: PUSH
55062: LD_INT 3
55064: ARRAY
55065: PPUSH
55066: CALL_OW 117
// end ;
55070: GO 54911
55072: POP
55073: POP
// end ; end else
55074: GO 55655
// begin for j in cargo do
55076: LD_ADDR_VAR 0 3
55080: PUSH
55081: LD_VAR 0 7
55085: PUSH
55086: FOR_IN
55087: IFFALSE 55653
// begin if GetTag ( j ) <> 0 then
55089: LD_VAR 0 3
55093: PPUSH
55094: CALL_OW 110
55098: PUSH
55099: LD_INT 0
55101: NONEQUAL
55102: IFFALSE 55106
// continue ;
55104: GO 55086
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
55106: LD_VAR 0 3
55110: PPUSH
55111: CALL_OW 256
55115: PUSH
55116: LD_INT 1000
55118: LESS
55119: PUSH
55120: LD_VAR 0 3
55124: PPUSH
55125: LD_EXP 38
55129: PUSH
55130: LD_VAR 0 2
55134: ARRAY
55135: PPUSH
55136: CALL_OW 308
55140: NOT
55141: AND
55142: IFFALSE 55164
// ComMoveToArea ( j , mc_parking [ i ] ) ;
55144: LD_VAR 0 3
55148: PPUSH
55149: LD_EXP 38
55153: PUSH
55154: LD_VAR 0 2
55158: ARRAY
55159: PPUSH
55160: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
55164: LD_VAR 0 3
55168: PPUSH
55169: CALL_OW 256
55173: PUSH
55174: LD_INT 1000
55176: LESS
55177: PUSH
55178: LD_VAR 0 3
55182: PPUSH
55183: LD_EXP 38
55187: PUSH
55188: LD_VAR 0 2
55192: ARRAY
55193: PPUSH
55194: CALL_OW 308
55198: AND
55199: IFFALSE 55203
// continue ;
55201: GO 55086
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
55203: LD_VAR 0 3
55207: PPUSH
55208: CALL_OW 262
55212: PUSH
55213: LD_INT 2
55215: EQUAL
55216: PUSH
55217: LD_VAR 0 3
55221: PPUSH
55222: CALL_OW 261
55226: PUSH
55227: LD_INT 15
55229: LESS
55230: AND
55231: IFFALSE 55235
// continue ;
55233: GO 55086
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
55235: LD_VAR 0 3
55239: PPUSH
55240: CALL_OW 262
55244: PUSH
55245: LD_INT 1
55247: EQUAL
55248: PUSH
55249: LD_VAR 0 3
55253: PPUSH
55254: CALL_OW 261
55258: PUSH
55259: LD_INT 10
55261: LESS
55262: AND
55263: IFFALSE 55592
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55265: LD_ADDR_VAR 0 8
55269: PUSH
55270: LD_EXP 14
55274: PUSH
55275: LD_VAR 0 2
55279: ARRAY
55280: PPUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 30
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 30
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: PPUSH
55309: CALL_OW 72
55313: ST_TO_ADDR
// if not depot then
55314: LD_VAR 0 8
55318: NOT
55319: IFFALSE 55323
// continue ;
55321: GO 55086
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
55323: LD_VAR 0 3
55327: PPUSH
55328: LD_VAR 0 8
55332: PPUSH
55333: LD_VAR 0 3
55337: PPUSH
55338: CALL_OW 74
55342: PPUSH
55343: CALL_OW 296
55347: PUSH
55348: LD_INT 6
55350: LESS
55351: IFFALSE 55367
// SetFuel ( j , 100 ) else
55353: LD_VAR 0 3
55357: PPUSH
55358: LD_INT 100
55360: PPUSH
55361: CALL_OW 240
55365: GO 55592
// if GetFuel ( j ) = 0 then
55367: LD_VAR 0 3
55371: PPUSH
55372: CALL_OW 261
55376: PUSH
55377: LD_INT 0
55379: EQUAL
55380: IFFALSE 55592
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
55382: LD_ADDR_EXP 33
55386: PUSH
55387: LD_EXP 33
55391: PPUSH
55392: LD_VAR 0 2
55396: PPUSH
55397: LD_EXP 33
55401: PUSH
55402: LD_VAR 0 2
55406: ARRAY
55407: PUSH
55408: LD_VAR 0 3
55412: DIFF
55413: PPUSH
55414: CALL_OW 1
55418: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
55419: LD_VAR 0 3
55423: PPUSH
55424: CALL_OW 263
55428: PUSH
55429: LD_INT 1
55431: EQUAL
55432: IFFALSE 55448
// ComExitVehicle ( IsInUnit ( j ) ) ;
55434: LD_VAR 0 3
55438: PPUSH
55439: CALL_OW 310
55443: PPUSH
55444: CALL_OW 121
// if GetControl ( j ) = control_remote then
55448: LD_VAR 0 3
55452: PPUSH
55453: CALL_OW 263
55457: PUSH
55458: LD_INT 2
55460: EQUAL
55461: IFFALSE 55472
// ComUnlink ( j ) ;
55463: LD_VAR 0 3
55467: PPUSH
55468: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
55472: LD_ADDR_VAR 0 9
55476: PUSH
55477: LD_VAR 0 2
55481: PPUSH
55482: LD_INT 3
55484: PPUSH
55485: CALL 64945 0 2
55489: ST_TO_ADDR
// if fac then
55490: LD_VAR 0 9
55494: IFFALSE 55590
// begin for k in fac do
55496: LD_ADDR_VAR 0 4
55500: PUSH
55501: LD_VAR 0 9
55505: PUSH
55506: FOR_IN
55507: IFFALSE 55588
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
55509: LD_ADDR_VAR 0 10
55513: PUSH
55514: LD_VAR 0 9
55518: PPUSH
55519: LD_VAR 0 3
55523: PPUSH
55524: CALL_OW 265
55528: PPUSH
55529: LD_VAR 0 3
55533: PPUSH
55534: CALL_OW 262
55538: PPUSH
55539: LD_VAR 0 3
55543: PPUSH
55544: CALL_OW 263
55548: PPUSH
55549: LD_VAR 0 3
55553: PPUSH
55554: CALL_OW 264
55558: PPUSH
55559: CALL 6928 0 5
55563: ST_TO_ADDR
// if components then
55564: LD_VAR 0 10
55568: IFFALSE 55586
// begin MC_InsertProduceList ( i , components ) ;
55570: LD_VAR 0 2
55574: PPUSH
55575: LD_VAR 0 10
55579: PPUSH
55580: CALL 64490 0 2
// break ;
55584: GO 55588
// end ; end ;
55586: GO 55506
55588: POP
55589: POP
// end ; continue ;
55590: GO 55086
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
55592: LD_VAR 0 3
55596: PPUSH
55597: LD_INT 1
55599: PPUSH
55600: CALL_OW 289
55604: PUSH
55605: LD_INT 100
55607: LESS
55608: PUSH
55609: LD_VAR 0 3
55613: PPUSH
55614: CALL_OW 314
55618: NOT
55619: AND
55620: IFFALSE 55649
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
55622: LD_VAR 0 3
55626: PPUSH
55627: LD_VAR 0 6
55631: PUSH
55632: LD_INT 2
55634: ARRAY
55635: PPUSH
55636: LD_VAR 0 6
55640: PUSH
55641: LD_INT 3
55643: ARRAY
55644: PPUSH
55645: CALL_OW 117
// break ;
55649: GO 55653
// end ;
55651: GO 55086
55653: POP
55654: POP
// end ; end ;
55655: GO 53924
55657: POP
55658: POP
// end ;
55659: LD_VAR 0 1
55663: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
55664: LD_INT 0
55666: PPUSH
55667: PPUSH
55668: PPUSH
55669: PPUSH
// if not mc_bases then
55670: LD_EXP 14
55674: NOT
55675: IFFALSE 55679
// exit ;
55677: GO 55840
// for i = 1 to mc_bases do
55679: LD_ADDR_VAR 0 2
55683: PUSH
55684: DOUBLE
55685: LD_INT 1
55687: DEC
55688: ST_TO_ADDR
55689: LD_EXP 14
55693: PUSH
55694: FOR_TO
55695: IFFALSE 55838
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
55697: LD_ADDR_VAR 0 4
55701: PUSH
55702: LD_EXP 33
55706: PUSH
55707: LD_VAR 0 2
55711: ARRAY
55712: PUSH
55713: LD_EXP 36
55717: PUSH
55718: LD_VAR 0 2
55722: ARRAY
55723: UNION
55724: PPUSH
55725: LD_INT 33
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PPUSH
55735: CALL_OW 72
55739: ST_TO_ADDR
// if tmp then
55740: LD_VAR 0 4
55744: IFFALSE 55836
// for j in tmp do
55746: LD_ADDR_VAR 0 3
55750: PUSH
55751: LD_VAR 0 4
55755: PUSH
55756: FOR_IN
55757: IFFALSE 55834
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
55759: LD_VAR 0 3
55763: PPUSH
55764: CALL_OW 312
55768: NOT
55769: PUSH
55770: LD_VAR 0 3
55774: PPUSH
55775: CALL_OW 256
55779: PUSH
55780: LD_INT 250
55782: GREATEREQUAL
55783: AND
55784: IFFALSE 55797
// Connect ( j ) else
55786: LD_VAR 0 3
55790: PPUSH
55791: CALL 12329 0 1
55795: GO 55832
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
55797: LD_VAR 0 3
55801: PPUSH
55802: CALL_OW 256
55806: PUSH
55807: LD_INT 250
55809: LESS
55810: PUSH
55811: LD_VAR 0 3
55815: PPUSH
55816: CALL_OW 312
55820: AND
55821: IFFALSE 55832
// ComUnlink ( j ) ;
55823: LD_VAR 0 3
55827: PPUSH
55828: CALL_OW 136
55832: GO 55756
55834: POP
55835: POP
// end ;
55836: GO 55694
55838: POP
55839: POP
// end ;
55840: LD_VAR 0 1
55844: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
55845: LD_INT 0
55847: PPUSH
55848: PPUSH
55849: PPUSH
55850: PPUSH
55851: PPUSH
// if not mc_bases then
55852: LD_EXP 14
55856: NOT
55857: IFFALSE 55861
// exit ;
55859: GO 56306
// for i = 1 to mc_bases do
55861: LD_ADDR_VAR 0 2
55865: PUSH
55866: DOUBLE
55867: LD_INT 1
55869: DEC
55870: ST_TO_ADDR
55871: LD_EXP 14
55875: PUSH
55876: FOR_TO
55877: IFFALSE 56304
// begin if not mc_produce [ i ] then
55879: LD_EXP 35
55883: PUSH
55884: LD_VAR 0 2
55888: ARRAY
55889: NOT
55890: IFFALSE 55894
// continue ;
55892: GO 55876
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
55894: LD_ADDR_VAR 0 5
55898: PUSH
55899: LD_EXP 14
55903: PUSH
55904: LD_VAR 0 2
55908: ARRAY
55909: PPUSH
55910: LD_INT 30
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PPUSH
55920: CALL_OW 72
55924: ST_TO_ADDR
// if not fac then
55925: LD_VAR 0 5
55929: NOT
55930: IFFALSE 55934
// continue ;
55932: GO 55876
// for j in fac do
55934: LD_ADDR_VAR 0 3
55938: PUSH
55939: LD_VAR 0 5
55943: PUSH
55944: FOR_IN
55945: IFFALSE 56300
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
55947: LD_VAR 0 3
55951: PPUSH
55952: CALL_OW 461
55956: PUSH
55957: LD_INT 2
55959: NONEQUAL
55960: PUSH
55961: LD_VAR 0 3
55965: PPUSH
55966: LD_INT 15
55968: PPUSH
55969: CALL 11989 0 2
55973: PUSH
55974: LD_INT 4
55976: ARRAY
55977: OR
55978: IFFALSE 55982
// continue ;
55980: GO 55944
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
55982: LD_VAR 0 3
55986: PPUSH
55987: LD_EXP 35
55991: PUSH
55992: LD_VAR 0 2
55996: ARRAY
55997: PUSH
55998: LD_INT 1
56000: ARRAY
56001: PUSH
56002: LD_INT 1
56004: ARRAY
56005: PPUSH
56006: LD_EXP 35
56010: PUSH
56011: LD_VAR 0 2
56015: ARRAY
56016: PUSH
56017: LD_INT 1
56019: ARRAY
56020: PUSH
56021: LD_INT 2
56023: ARRAY
56024: PPUSH
56025: LD_EXP 35
56029: PUSH
56030: LD_VAR 0 2
56034: ARRAY
56035: PUSH
56036: LD_INT 1
56038: ARRAY
56039: PUSH
56040: LD_INT 3
56042: ARRAY
56043: PPUSH
56044: LD_EXP 35
56048: PUSH
56049: LD_VAR 0 2
56053: ARRAY
56054: PUSH
56055: LD_INT 1
56057: ARRAY
56058: PUSH
56059: LD_INT 4
56061: ARRAY
56062: PPUSH
56063: CALL_OW 448
56067: PUSH
56068: LD_VAR 0 3
56072: PPUSH
56073: LD_EXP 35
56077: PUSH
56078: LD_VAR 0 2
56082: ARRAY
56083: PUSH
56084: LD_INT 1
56086: ARRAY
56087: PUSH
56088: LD_INT 1
56090: ARRAY
56091: PUSH
56092: LD_EXP 35
56096: PUSH
56097: LD_VAR 0 2
56101: ARRAY
56102: PUSH
56103: LD_INT 1
56105: ARRAY
56106: PUSH
56107: LD_INT 2
56109: ARRAY
56110: PUSH
56111: LD_EXP 35
56115: PUSH
56116: LD_VAR 0 2
56120: ARRAY
56121: PUSH
56122: LD_INT 1
56124: ARRAY
56125: PUSH
56126: LD_INT 3
56128: ARRAY
56129: PUSH
56130: LD_EXP 35
56134: PUSH
56135: LD_VAR 0 2
56139: ARRAY
56140: PUSH
56141: LD_INT 1
56143: ARRAY
56144: PUSH
56145: LD_INT 4
56147: ARRAY
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: PPUSH
56155: CALL 15660 0 2
56159: AND
56160: IFFALSE 56298
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
56162: LD_VAR 0 3
56166: PPUSH
56167: LD_EXP 35
56171: PUSH
56172: LD_VAR 0 2
56176: ARRAY
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: PUSH
56182: LD_INT 1
56184: ARRAY
56185: PPUSH
56186: LD_EXP 35
56190: PUSH
56191: LD_VAR 0 2
56195: ARRAY
56196: PUSH
56197: LD_INT 1
56199: ARRAY
56200: PUSH
56201: LD_INT 2
56203: ARRAY
56204: PPUSH
56205: LD_EXP 35
56209: PUSH
56210: LD_VAR 0 2
56214: ARRAY
56215: PUSH
56216: LD_INT 1
56218: ARRAY
56219: PUSH
56220: LD_INT 3
56222: ARRAY
56223: PPUSH
56224: LD_EXP 35
56228: PUSH
56229: LD_VAR 0 2
56233: ARRAY
56234: PUSH
56235: LD_INT 1
56237: ARRAY
56238: PUSH
56239: LD_INT 4
56241: ARRAY
56242: PPUSH
56243: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
56247: LD_ADDR_VAR 0 4
56251: PUSH
56252: LD_EXP 35
56256: PUSH
56257: LD_VAR 0 2
56261: ARRAY
56262: PPUSH
56263: LD_INT 1
56265: PPUSH
56266: CALL_OW 3
56270: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
56271: LD_ADDR_EXP 35
56275: PUSH
56276: LD_EXP 35
56280: PPUSH
56281: LD_VAR 0 2
56285: PPUSH
56286: LD_VAR 0 4
56290: PPUSH
56291: CALL_OW 1
56295: ST_TO_ADDR
// break ;
56296: GO 56300
// end ; end ;
56298: GO 55944
56300: POP
56301: POP
// end ;
56302: GO 55876
56304: POP
56305: POP
// end ;
56306: LD_VAR 0 1
56310: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
56311: LD_INT 0
56313: PPUSH
56314: PPUSH
56315: PPUSH
// if not mc_bases then
56316: LD_EXP 14
56320: NOT
56321: IFFALSE 56325
// exit ;
56323: GO 56414
// for i = 1 to mc_bases do
56325: LD_ADDR_VAR 0 2
56329: PUSH
56330: DOUBLE
56331: LD_INT 1
56333: DEC
56334: ST_TO_ADDR
56335: LD_EXP 14
56339: PUSH
56340: FOR_TO
56341: IFFALSE 56412
// begin if mc_attack [ i ] then
56343: LD_EXP 34
56347: PUSH
56348: LD_VAR 0 2
56352: ARRAY
56353: IFFALSE 56410
// begin tmp := mc_attack [ i ] [ 1 ] ;
56355: LD_ADDR_VAR 0 3
56359: PUSH
56360: LD_EXP 34
56364: PUSH
56365: LD_VAR 0 2
56369: ARRAY
56370: PUSH
56371: LD_INT 1
56373: ARRAY
56374: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
56375: LD_ADDR_EXP 34
56379: PUSH
56380: LD_EXP 34
56384: PPUSH
56385: LD_VAR 0 2
56389: PPUSH
56390: EMPTY
56391: PPUSH
56392: CALL_OW 1
56396: ST_TO_ADDR
// Attack ( tmp ) ;
56397: LD_VAR 0 3
56401: PPUSH
56402: CALL 70962 0 1
// exit ;
56406: POP
56407: POP
56408: GO 56414
// end ; end ;
56410: GO 56340
56412: POP
56413: POP
// end ;
56414: LD_VAR 0 1
56418: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
56419: LD_INT 0
56421: PPUSH
56422: PPUSH
56423: PPUSH
56424: PPUSH
56425: PPUSH
56426: PPUSH
56427: PPUSH
// if not mc_bases then
56428: LD_EXP 14
56432: NOT
56433: IFFALSE 56437
// exit ;
56435: GO 57019
// for i = 1 to mc_bases do
56437: LD_ADDR_VAR 0 2
56441: PUSH
56442: DOUBLE
56443: LD_INT 1
56445: DEC
56446: ST_TO_ADDR
56447: LD_EXP 14
56451: PUSH
56452: FOR_TO
56453: IFFALSE 57017
// begin if not mc_bases [ i ] then
56455: LD_EXP 14
56459: PUSH
56460: LD_VAR 0 2
56464: ARRAY
56465: NOT
56466: IFFALSE 56470
// continue ;
56468: GO 56452
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
56470: LD_ADDR_VAR 0 7
56474: PUSH
56475: LD_EXP 14
56479: PUSH
56480: LD_VAR 0 2
56484: ARRAY
56485: PUSH
56486: LD_INT 1
56488: ARRAY
56489: PPUSH
56490: CALL 6232 0 1
56494: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
56495: LD_ADDR_EXP 37
56499: PUSH
56500: LD_EXP 37
56504: PPUSH
56505: LD_VAR 0 2
56509: PPUSH
56510: LD_EXP 14
56514: PUSH
56515: LD_VAR 0 2
56519: ARRAY
56520: PUSH
56521: LD_INT 1
56523: ARRAY
56524: PPUSH
56525: CALL_OW 255
56529: PPUSH
56530: LD_EXP 39
56534: PUSH
56535: LD_VAR 0 2
56539: ARRAY
56540: PPUSH
56541: CALL 6197 0 2
56545: PPUSH
56546: CALL_OW 1
56550: ST_TO_ADDR
// if not mc_scan [ i ] then
56551: LD_EXP 37
56555: PUSH
56556: LD_VAR 0 2
56560: ARRAY
56561: NOT
56562: IFFALSE 56717
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
56564: LD_ADDR_VAR 0 4
56568: PUSH
56569: LD_EXP 14
56573: PUSH
56574: LD_VAR 0 2
56578: ARRAY
56579: PPUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 25
56585: PUSH
56586: LD_INT 5
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 25
56595: PUSH
56596: LD_INT 8
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 25
56605: PUSH
56606: LD_INT 9
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: PPUSH
56619: CALL_OW 72
56623: ST_TO_ADDR
// if not tmp then
56624: LD_VAR 0 4
56628: NOT
56629: IFFALSE 56633
// continue ;
56631: GO 56452
// for j in tmp do
56633: LD_ADDR_VAR 0 3
56637: PUSH
56638: LD_VAR 0 4
56642: PUSH
56643: FOR_IN
56644: IFFALSE 56715
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
56646: LD_VAR 0 3
56650: PPUSH
56651: CALL_OW 310
56655: PPUSH
56656: CALL_OW 266
56660: PUSH
56661: LD_INT 5
56663: EQUAL
56664: PUSH
56665: LD_VAR 0 3
56669: PPUSH
56670: CALL_OW 257
56674: PUSH
56675: LD_INT 1
56677: EQUAL
56678: AND
56679: PUSH
56680: LD_VAR 0 3
56684: PPUSH
56685: CALL_OW 459
56689: NOT
56690: AND
56691: PUSH
56692: LD_VAR 0 7
56696: AND
56697: IFFALSE 56713
// ComChangeProfession ( j , class ) ;
56699: LD_VAR 0 3
56703: PPUSH
56704: LD_VAR 0 7
56708: PPUSH
56709: CALL_OW 123
56713: GO 56643
56715: POP
56716: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
56717: LD_EXP 37
56721: PUSH
56722: LD_VAR 0 2
56726: ARRAY
56727: PUSH
56728: LD_EXP 36
56732: PUSH
56733: LD_VAR 0 2
56737: ARRAY
56738: NOT
56739: AND
56740: PUSH
56741: LD_EXP 14
56745: PUSH
56746: LD_VAR 0 2
56750: ARRAY
56751: PPUSH
56752: LD_INT 30
56754: PUSH
56755: LD_INT 32
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PPUSH
56762: CALL_OW 72
56766: NOT
56767: AND
56768: PUSH
56769: LD_EXP 14
56773: PUSH
56774: LD_VAR 0 2
56778: ARRAY
56779: PPUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 30
56785: PUSH
56786: LD_INT 4
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 30
56795: PUSH
56796: LD_INT 5
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: PPUSH
56808: CALL_OW 72
56812: NOT
56813: AND
56814: IFFALSE 56946
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
56816: LD_ADDR_VAR 0 4
56820: PUSH
56821: LD_EXP 14
56825: PUSH
56826: LD_VAR 0 2
56830: ARRAY
56831: PPUSH
56832: LD_INT 2
56834: PUSH
56835: LD_INT 25
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 25
56847: PUSH
56848: LD_INT 5
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 25
56857: PUSH
56858: LD_INT 8
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 25
56867: PUSH
56868: LD_INT 9
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: PPUSH
56882: CALL_OW 72
56886: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
56887: LD_ADDR_VAR 0 4
56891: PUSH
56892: LD_VAR 0 4
56896: PUSH
56897: LD_VAR 0 4
56901: PPUSH
56902: LD_INT 18
56904: PPUSH
56905: CALL 37957 0 2
56909: DIFF
56910: ST_TO_ADDR
// if tmp then
56911: LD_VAR 0 4
56915: IFFALSE 56946
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
56917: LD_VAR 0 2
56921: PPUSH
56922: LD_VAR 0 4
56926: PPUSH
56927: LD_EXP 39
56931: PUSH
56932: LD_VAR 0 2
56936: ARRAY
56937: PPUSH
56938: CALL 75671 0 3
// exit ;
56942: POP
56943: POP
56944: GO 57019
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
56946: LD_EXP 37
56950: PUSH
56951: LD_VAR 0 2
56955: ARRAY
56956: PUSH
56957: LD_EXP 36
56961: PUSH
56962: LD_VAR 0 2
56966: ARRAY
56967: AND
56968: IFFALSE 57015
// begin tmp := mc_defender [ i ] ;
56970: LD_ADDR_VAR 0 4
56974: PUSH
56975: LD_EXP 36
56979: PUSH
56980: LD_VAR 0 2
56984: ARRAY
56985: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
56986: LD_VAR 0 2
56990: PPUSH
56991: LD_VAR 0 4
56995: PPUSH
56996: LD_EXP 37
57000: PUSH
57001: LD_VAR 0 2
57005: ARRAY
57006: PPUSH
57007: CALL 76232 0 3
// exit ;
57011: POP
57012: POP
57013: GO 57019
// end ; end ;
57015: GO 56452
57017: POP
57018: POP
// end ;
57019: LD_VAR 0 1
57023: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
57024: LD_INT 0
57026: PPUSH
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
57035: PPUSH
57036: PPUSH
// if not mc_bases then
57037: LD_EXP 14
57041: NOT
57042: IFFALSE 57046
// exit ;
57044: GO 58133
// for i = 1 to mc_bases do
57046: LD_ADDR_VAR 0 2
57050: PUSH
57051: DOUBLE
57052: LD_INT 1
57054: DEC
57055: ST_TO_ADDR
57056: LD_EXP 14
57060: PUSH
57061: FOR_TO
57062: IFFALSE 58131
// begin tmp := mc_lab [ i ] ;
57064: LD_ADDR_VAR 0 6
57068: PUSH
57069: LD_EXP 47
57073: PUSH
57074: LD_VAR 0 2
57078: ARRAY
57079: ST_TO_ADDR
// if not tmp then
57080: LD_VAR 0 6
57084: NOT
57085: IFFALSE 57089
// continue ;
57087: GO 57061
// idle_lab := 0 ;
57089: LD_ADDR_VAR 0 11
57093: PUSH
57094: LD_INT 0
57096: ST_TO_ADDR
// for j in tmp do
57097: LD_ADDR_VAR 0 3
57101: PUSH
57102: LD_VAR 0 6
57106: PUSH
57107: FOR_IN
57108: IFFALSE 58127
// begin researching := false ;
57110: LD_ADDR_VAR 0 10
57114: PUSH
57115: LD_INT 0
57117: ST_TO_ADDR
// side := GetSide ( j ) ;
57118: LD_ADDR_VAR 0 4
57122: PUSH
57123: LD_VAR 0 3
57127: PPUSH
57128: CALL_OW 255
57132: ST_TO_ADDR
// if not mc_tech [ side ] then
57133: LD_EXP 41
57137: PUSH
57138: LD_VAR 0 4
57142: ARRAY
57143: NOT
57144: IFFALSE 57148
// continue ;
57146: GO 57107
// if BuildingStatus ( j ) = bs_idle then
57148: LD_VAR 0 3
57152: PPUSH
57153: CALL_OW 461
57157: PUSH
57158: LD_INT 2
57160: EQUAL
57161: IFFALSE 57349
// begin if idle_lab and UnitsInside ( j ) < 6 then
57163: LD_VAR 0 11
57167: PUSH
57168: LD_VAR 0 3
57172: PPUSH
57173: CALL_OW 313
57177: PUSH
57178: LD_INT 6
57180: LESS
57181: AND
57182: IFFALSE 57253
// begin tmp2 := UnitsInside ( idle_lab ) ;
57184: LD_ADDR_VAR 0 9
57188: PUSH
57189: LD_VAR 0 11
57193: PPUSH
57194: CALL_OW 313
57198: ST_TO_ADDR
// if tmp2 then
57199: LD_VAR 0 9
57203: IFFALSE 57245
// for x in tmp2 do
57205: LD_ADDR_VAR 0 7
57209: PUSH
57210: LD_VAR 0 9
57214: PUSH
57215: FOR_IN
57216: IFFALSE 57243
// begin ComExitBuilding ( x ) ;
57218: LD_VAR 0 7
57222: PPUSH
57223: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
57227: LD_VAR 0 7
57231: PPUSH
57232: LD_VAR 0 3
57236: PPUSH
57237: CALL_OW 180
// end ;
57241: GO 57215
57243: POP
57244: POP
// idle_lab := 0 ;
57245: LD_ADDR_VAR 0 11
57249: PUSH
57250: LD_INT 0
57252: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
57253: LD_ADDR_VAR 0 5
57257: PUSH
57258: LD_EXP 41
57262: PUSH
57263: LD_VAR 0 4
57267: ARRAY
57268: PUSH
57269: FOR_IN
57270: IFFALSE 57330
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
57272: LD_VAR 0 3
57276: PPUSH
57277: LD_VAR 0 5
57281: PPUSH
57282: CALL_OW 430
57286: PUSH
57287: LD_VAR 0 4
57291: PPUSH
57292: LD_VAR 0 5
57296: PPUSH
57297: CALL 5302 0 2
57301: AND
57302: IFFALSE 57328
// begin researching := true ;
57304: LD_ADDR_VAR 0 10
57308: PUSH
57309: LD_INT 1
57311: ST_TO_ADDR
// ComResearch ( j , t ) ;
57312: LD_VAR 0 3
57316: PPUSH
57317: LD_VAR 0 5
57321: PPUSH
57322: CALL_OW 124
// break ;
57326: GO 57330
// end ;
57328: GO 57269
57330: POP
57331: POP
// if not researching then
57332: LD_VAR 0 10
57336: NOT
57337: IFFALSE 57349
// idle_lab := j ;
57339: LD_ADDR_VAR 0 11
57343: PUSH
57344: LD_VAR 0 3
57348: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
57349: LD_VAR 0 3
57353: PPUSH
57354: CALL_OW 461
57358: PUSH
57359: LD_INT 10
57361: EQUAL
57362: IFFALSE 57950
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
57364: LD_EXP 43
57368: PUSH
57369: LD_VAR 0 2
57373: ARRAY
57374: NOT
57375: PUSH
57376: LD_EXP 44
57380: PUSH
57381: LD_VAR 0 2
57385: ARRAY
57386: NOT
57387: AND
57388: PUSH
57389: LD_EXP 41
57393: PUSH
57394: LD_VAR 0 4
57398: ARRAY
57399: PUSH
57400: LD_INT 1
57402: GREATER
57403: AND
57404: IFFALSE 57535
// begin ComCancel ( j ) ;
57406: LD_VAR 0 3
57410: PPUSH
57411: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
57415: LD_ADDR_EXP 41
57419: PUSH
57420: LD_EXP 41
57424: PPUSH
57425: LD_VAR 0 4
57429: PPUSH
57430: LD_EXP 41
57434: PUSH
57435: LD_VAR 0 4
57439: ARRAY
57440: PPUSH
57441: LD_EXP 41
57445: PUSH
57446: LD_VAR 0 4
57450: ARRAY
57451: PUSH
57452: LD_INT 1
57454: MINUS
57455: PPUSH
57456: LD_EXP 41
57460: PUSH
57461: LD_VAR 0 4
57465: ARRAY
57466: PPUSH
57467: LD_INT 0
57469: PPUSH
57470: CALL 8814 0 4
57474: PPUSH
57475: CALL_OW 1
57479: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
57480: LD_ADDR_EXP 41
57484: PUSH
57485: LD_EXP 41
57489: PPUSH
57490: LD_VAR 0 4
57494: PPUSH
57495: LD_EXP 41
57499: PUSH
57500: LD_VAR 0 4
57504: ARRAY
57505: PPUSH
57506: LD_EXP 41
57510: PUSH
57511: LD_VAR 0 4
57515: ARRAY
57516: PPUSH
57517: LD_INT 1
57519: PPUSH
57520: LD_INT 0
57522: PPUSH
57523: CALL 8814 0 4
57527: PPUSH
57528: CALL_OW 1
57532: ST_TO_ADDR
// continue ;
57533: GO 57107
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
57535: LD_EXP 43
57539: PUSH
57540: LD_VAR 0 2
57544: ARRAY
57545: PUSH
57546: LD_EXP 44
57550: PUSH
57551: LD_VAR 0 2
57555: ARRAY
57556: NOT
57557: AND
57558: IFFALSE 57685
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
57560: LD_ADDR_EXP 44
57564: PUSH
57565: LD_EXP 44
57569: PPUSH
57570: LD_VAR 0 2
57574: PUSH
57575: LD_EXP 44
57579: PUSH
57580: LD_VAR 0 2
57584: ARRAY
57585: PUSH
57586: LD_INT 1
57588: PLUS
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PPUSH
57594: LD_EXP 43
57598: PUSH
57599: LD_VAR 0 2
57603: ARRAY
57604: PUSH
57605: LD_INT 1
57607: ARRAY
57608: PPUSH
57609: CALL 9396 0 3
57613: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
57614: LD_EXP 43
57618: PUSH
57619: LD_VAR 0 2
57623: ARRAY
57624: PUSH
57625: LD_INT 1
57627: ARRAY
57628: PPUSH
57629: LD_INT 112
57631: PPUSH
57632: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
57636: LD_ADDR_VAR 0 9
57640: PUSH
57641: LD_EXP 43
57645: PUSH
57646: LD_VAR 0 2
57650: ARRAY
57651: PPUSH
57652: LD_INT 1
57654: PPUSH
57655: CALL_OW 3
57659: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
57660: LD_ADDR_EXP 43
57664: PUSH
57665: LD_EXP 43
57669: PPUSH
57670: LD_VAR 0 2
57674: PPUSH
57675: LD_VAR 0 9
57679: PPUSH
57680: CALL_OW 1
57684: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
57685: LD_EXP 43
57689: PUSH
57690: LD_VAR 0 2
57694: ARRAY
57695: PUSH
57696: LD_EXP 44
57700: PUSH
57701: LD_VAR 0 2
57705: ARRAY
57706: AND
57707: PUSH
57708: LD_EXP 44
57712: PUSH
57713: LD_VAR 0 2
57717: ARRAY
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: PPUSH
57723: CALL_OW 310
57727: NOT
57728: AND
57729: PUSH
57730: LD_VAR 0 3
57734: PPUSH
57735: CALL_OW 313
57739: PUSH
57740: LD_INT 6
57742: EQUAL
57743: AND
57744: IFFALSE 57800
// begin tmp2 := UnitsInside ( j ) ;
57746: LD_ADDR_VAR 0 9
57750: PUSH
57751: LD_VAR 0 3
57755: PPUSH
57756: CALL_OW 313
57760: ST_TO_ADDR
// if tmp2 = 6 then
57761: LD_VAR 0 9
57765: PUSH
57766: LD_INT 6
57768: EQUAL
57769: IFFALSE 57800
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
57771: LD_VAR 0 9
57775: PUSH
57776: LD_INT 1
57778: ARRAY
57779: PPUSH
57780: LD_INT 112
57782: PPUSH
57783: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
57787: LD_VAR 0 9
57791: PUSH
57792: LD_INT 1
57794: ARRAY
57795: PPUSH
57796: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
57800: LD_EXP 44
57804: PUSH
57805: LD_VAR 0 2
57809: ARRAY
57810: PUSH
57811: LD_EXP 44
57815: PUSH
57816: LD_VAR 0 2
57820: ARRAY
57821: PUSH
57822: LD_INT 1
57824: ARRAY
57825: PPUSH
57826: CALL_OW 314
57830: NOT
57831: AND
57832: PUSH
57833: LD_EXP 44
57837: PUSH
57838: LD_VAR 0 2
57842: ARRAY
57843: PUSH
57844: LD_INT 1
57846: ARRAY
57847: PPUSH
57848: CALL_OW 310
57852: NOT
57853: AND
57854: IFFALSE 57880
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
57856: LD_EXP 44
57860: PUSH
57861: LD_VAR 0 2
57865: ARRAY
57866: PUSH
57867: LD_INT 1
57869: ARRAY
57870: PPUSH
57871: LD_VAR 0 3
57875: PPUSH
57876: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
57880: LD_EXP 44
57884: PUSH
57885: LD_VAR 0 2
57889: ARRAY
57890: PUSH
57891: LD_INT 1
57893: ARRAY
57894: PPUSH
57895: CALL_OW 310
57899: PUSH
57900: LD_EXP 44
57904: PUSH
57905: LD_VAR 0 2
57909: ARRAY
57910: PUSH
57911: LD_INT 1
57913: ARRAY
57914: PPUSH
57915: CALL_OW 310
57919: PPUSH
57920: CALL_OW 461
57924: PUSH
57925: LD_INT 3
57927: NONEQUAL
57928: AND
57929: IFFALSE 57950
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
57931: LD_EXP 44
57935: PUSH
57936: LD_VAR 0 2
57940: ARRAY
57941: PUSH
57942: LD_INT 1
57944: ARRAY
57945: PPUSH
57946: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
57950: LD_VAR 0 3
57954: PPUSH
57955: CALL_OW 461
57959: PUSH
57960: LD_INT 6
57962: EQUAL
57963: PUSH
57964: LD_VAR 0 6
57968: PUSH
57969: LD_INT 1
57971: GREATER
57972: AND
57973: IFFALSE 58125
// begin sci := [ ] ;
57975: LD_ADDR_VAR 0 8
57979: PUSH
57980: EMPTY
57981: ST_TO_ADDR
// for x in ( tmp diff j ) do
57982: LD_ADDR_VAR 0 7
57986: PUSH
57987: LD_VAR 0 6
57991: PUSH
57992: LD_VAR 0 3
57996: DIFF
57997: PUSH
57998: FOR_IN
57999: IFFALSE 58051
// begin if sci = 6 then
58001: LD_VAR 0 8
58005: PUSH
58006: LD_INT 6
58008: EQUAL
58009: IFFALSE 58013
// break ;
58011: GO 58051
// if BuildingStatus ( x ) = bs_idle then
58013: LD_VAR 0 7
58017: PPUSH
58018: CALL_OW 461
58022: PUSH
58023: LD_INT 2
58025: EQUAL
58026: IFFALSE 58049
// sci := sci ^ UnitsInside ( x ) ;
58028: LD_ADDR_VAR 0 8
58032: PUSH
58033: LD_VAR 0 8
58037: PUSH
58038: LD_VAR 0 7
58042: PPUSH
58043: CALL_OW 313
58047: ADD
58048: ST_TO_ADDR
// end ;
58049: GO 57998
58051: POP
58052: POP
// if not sci then
58053: LD_VAR 0 8
58057: NOT
58058: IFFALSE 58062
// continue ;
58060: GO 57107
// for x in sci do
58062: LD_ADDR_VAR 0 7
58066: PUSH
58067: LD_VAR 0 8
58071: PUSH
58072: FOR_IN
58073: IFFALSE 58123
// if IsInUnit ( x ) and not HasTask ( x ) then
58075: LD_VAR 0 7
58079: PPUSH
58080: CALL_OW 310
58084: PUSH
58085: LD_VAR 0 7
58089: PPUSH
58090: CALL_OW 314
58094: NOT
58095: AND
58096: IFFALSE 58121
// begin ComExitBuilding ( x ) ;
58098: LD_VAR 0 7
58102: PPUSH
58103: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
58107: LD_VAR 0 7
58111: PPUSH
58112: LD_VAR 0 3
58116: PPUSH
58117: CALL_OW 180
// end ;
58121: GO 58072
58123: POP
58124: POP
// end ; end ;
58125: GO 57107
58127: POP
58128: POP
// end ;
58129: GO 57061
58131: POP
58132: POP
// end ;
58133: LD_VAR 0 1
58137: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
58138: LD_INT 0
58140: PPUSH
58141: PPUSH
// if not mc_bases then
58142: LD_EXP 14
58146: NOT
58147: IFFALSE 58151
// exit ;
58149: GO 58232
// for i = 1 to mc_bases do
58151: LD_ADDR_VAR 0 2
58155: PUSH
58156: DOUBLE
58157: LD_INT 1
58159: DEC
58160: ST_TO_ADDR
58161: LD_EXP 14
58165: PUSH
58166: FOR_TO
58167: IFFALSE 58230
// if mc_mines [ i ] and mc_miners [ i ] then
58169: LD_EXP 27
58173: PUSH
58174: LD_VAR 0 2
58178: ARRAY
58179: PUSH
58180: LD_EXP 28
58184: PUSH
58185: LD_VAR 0 2
58189: ARRAY
58190: AND
58191: IFFALSE 58228
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
58193: LD_EXP 28
58197: PUSH
58198: LD_VAR 0 2
58202: ARRAY
58203: PUSH
58204: LD_INT 1
58206: ARRAY
58207: PPUSH
58208: CALL_OW 255
58212: PPUSH
58213: LD_EXP 27
58217: PUSH
58218: LD_VAR 0 2
58222: ARRAY
58223: PPUSH
58224: CALL 6385 0 2
58228: GO 58166
58230: POP
58231: POP
// end ;
58232: LD_VAR 0 1
58236: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
58237: LD_INT 0
58239: PPUSH
58240: PPUSH
58241: PPUSH
58242: PPUSH
58243: PPUSH
58244: PPUSH
58245: PPUSH
58246: PPUSH
// if not mc_bases or not mc_parking then
58247: LD_EXP 14
58251: NOT
58252: PUSH
58253: LD_EXP 38
58257: NOT
58258: OR
58259: IFFALSE 58263
// exit ;
58261: GO 58962
// for i = 1 to mc_bases do
58263: LD_ADDR_VAR 0 2
58267: PUSH
58268: DOUBLE
58269: LD_INT 1
58271: DEC
58272: ST_TO_ADDR
58273: LD_EXP 14
58277: PUSH
58278: FOR_TO
58279: IFFALSE 58960
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
58281: LD_EXP 14
58285: PUSH
58286: LD_VAR 0 2
58290: ARRAY
58291: NOT
58292: PUSH
58293: LD_EXP 38
58297: PUSH
58298: LD_VAR 0 2
58302: ARRAY
58303: NOT
58304: OR
58305: IFFALSE 58309
// continue ;
58307: GO 58278
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
58309: LD_ADDR_VAR 0 5
58313: PUSH
58314: LD_EXP 14
58318: PUSH
58319: LD_VAR 0 2
58323: ARRAY
58324: PUSH
58325: LD_INT 1
58327: ARRAY
58328: PPUSH
58329: CALL_OW 255
58333: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58334: LD_ADDR_VAR 0 6
58338: PUSH
58339: LD_EXP 14
58343: PUSH
58344: LD_VAR 0 2
58348: ARRAY
58349: PPUSH
58350: LD_INT 30
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PPUSH
58360: CALL_OW 72
58364: ST_TO_ADDR
// if not fac then
58365: LD_VAR 0 6
58369: NOT
58370: IFFALSE 58421
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58372: LD_ADDR_VAR 0 6
58376: PUSH
58377: LD_EXP 14
58381: PUSH
58382: LD_VAR 0 2
58386: ARRAY
58387: PPUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 30
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 30
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: LIST
58415: PPUSH
58416: CALL_OW 72
58420: ST_TO_ADDR
// if not fac then
58421: LD_VAR 0 6
58425: NOT
58426: IFFALSE 58430
// continue ;
58428: GO 58278
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58430: LD_ADDR_VAR 0 7
58434: PUSH
58435: LD_EXP 38
58439: PUSH
58440: LD_VAR 0 2
58444: ARRAY
58445: PPUSH
58446: LD_INT 22
58448: PUSH
58449: LD_VAR 0 5
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 21
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: LD_INT 24
58473: PUSH
58474: LD_INT 1000
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: PPUSH
58490: CALL_OW 70
58494: ST_TO_ADDR
// for j in fac do
58495: LD_ADDR_VAR 0 3
58499: PUSH
58500: LD_VAR 0 6
58504: PUSH
58505: FOR_IN
58506: IFFALSE 58587
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58508: LD_ADDR_VAR 0 7
58512: PUSH
58513: LD_VAR 0 7
58517: PUSH
58518: LD_INT 22
58520: PUSH
58521: LD_VAR 0 5
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 91
58532: PUSH
58533: LD_VAR 0 3
58537: PUSH
58538: LD_INT 15
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 21
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: PUSH
58559: LD_INT 24
58561: PUSH
58562: LD_INT 1000
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: PPUSH
58579: CALL_OW 69
58583: UNION
58584: ST_TO_ADDR
58585: GO 58505
58587: POP
58588: POP
// if not vehs then
58589: LD_VAR 0 7
58593: NOT
58594: IFFALSE 58620
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58596: LD_ADDR_EXP 26
58600: PUSH
58601: LD_EXP 26
58605: PPUSH
58606: LD_VAR 0 2
58610: PPUSH
58611: EMPTY
58612: PPUSH
58613: CALL_OW 1
58617: ST_TO_ADDR
// continue ;
58618: GO 58278
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58620: LD_ADDR_VAR 0 8
58624: PUSH
58625: LD_EXP 14
58629: PUSH
58630: LD_VAR 0 2
58634: ARRAY
58635: PPUSH
58636: LD_INT 30
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PPUSH
58646: CALL_OW 72
58650: ST_TO_ADDR
// if tmp then
58651: LD_VAR 0 8
58655: IFFALSE 58758
// begin for j in tmp do
58657: LD_ADDR_VAR 0 3
58661: PUSH
58662: LD_VAR 0 8
58666: PUSH
58667: FOR_IN
58668: IFFALSE 58756
// for k in UnitsInside ( j ) do
58670: LD_ADDR_VAR 0 4
58674: PUSH
58675: LD_VAR 0 3
58679: PPUSH
58680: CALL_OW 313
58684: PUSH
58685: FOR_IN
58686: IFFALSE 58752
// if k then
58688: LD_VAR 0 4
58692: IFFALSE 58750
// if not k in mc_repair_vehicle [ i ] then
58694: LD_VAR 0 4
58698: PUSH
58699: LD_EXP 26
58703: PUSH
58704: LD_VAR 0 2
58708: ARRAY
58709: IN
58710: NOT
58711: IFFALSE 58750
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
58713: LD_ADDR_EXP 26
58717: PUSH
58718: LD_EXP 26
58722: PPUSH
58723: LD_VAR 0 2
58727: PPUSH
58728: LD_EXP 26
58732: PUSH
58733: LD_VAR 0 2
58737: ARRAY
58738: PUSH
58739: LD_VAR 0 4
58743: UNION
58744: PPUSH
58745: CALL_OW 1
58749: ST_TO_ADDR
58750: GO 58685
58752: POP
58753: POP
58754: GO 58667
58756: POP
58757: POP
// end ; if not mc_repair_vehicle [ i ] then
58758: LD_EXP 26
58762: PUSH
58763: LD_VAR 0 2
58767: ARRAY
58768: NOT
58769: IFFALSE 58773
// continue ;
58771: GO 58278
// for j in mc_repair_vehicle [ i ] do
58773: LD_ADDR_VAR 0 3
58777: PUSH
58778: LD_EXP 26
58782: PUSH
58783: LD_VAR 0 2
58787: ARRAY
58788: PUSH
58789: FOR_IN
58790: IFFALSE 58956
// begin if GetClass ( j ) <> 3 then
58792: LD_VAR 0 3
58796: PPUSH
58797: CALL_OW 257
58801: PUSH
58802: LD_INT 3
58804: NONEQUAL
58805: IFFALSE 58846
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
58807: LD_ADDR_EXP 26
58811: PUSH
58812: LD_EXP 26
58816: PPUSH
58817: LD_VAR 0 2
58821: PPUSH
58822: LD_EXP 26
58826: PUSH
58827: LD_VAR 0 2
58831: ARRAY
58832: PUSH
58833: LD_VAR 0 3
58837: DIFF
58838: PPUSH
58839: CALL_OW 1
58843: ST_TO_ADDR
// continue ;
58844: GO 58789
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
58846: LD_VAR 0 3
58850: PPUSH
58851: CALL_OW 311
58855: NOT
58856: PUSH
58857: LD_VAR 0 3
58861: PUSH
58862: LD_EXP 17
58866: PUSH
58867: LD_VAR 0 2
58871: ARRAY
58872: PUSH
58873: LD_INT 1
58875: ARRAY
58876: IN
58877: NOT
58878: AND
58879: PUSH
58880: LD_VAR 0 3
58884: PUSH
58885: LD_EXP 17
58889: PUSH
58890: LD_VAR 0 2
58894: ARRAY
58895: PUSH
58896: LD_INT 2
58898: ARRAY
58899: IN
58900: NOT
58901: AND
58902: IFFALSE 58954
// begin if IsInUnit ( j ) then
58904: LD_VAR 0 3
58908: PPUSH
58909: CALL_OW 310
58913: IFFALSE 58924
// ComExitBuilding ( j ) ;
58915: LD_VAR 0 3
58919: PPUSH
58920: CALL_OW 122
// if not HasTask ( j ) then
58924: LD_VAR 0 3
58928: PPUSH
58929: CALL_OW 314
58933: NOT
58934: IFFALSE 58954
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
58936: LD_VAR 0 3
58940: PPUSH
58941: LD_VAR 0 7
58945: PUSH
58946: LD_INT 1
58948: ARRAY
58949: PPUSH
58950: CALL_OW 189
// end ; end ;
58954: GO 58789
58956: POP
58957: POP
// end ;
58958: GO 58278
58960: POP
58961: POP
// end ;
58962: LD_VAR 0 1
58966: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
58967: LD_INT 0
58969: PPUSH
58970: PPUSH
58971: PPUSH
58972: PPUSH
58973: PPUSH
58974: PPUSH
58975: PPUSH
58976: PPUSH
58977: PPUSH
58978: PPUSH
58979: PPUSH
// if not mc_bases then
58980: LD_EXP 14
58984: NOT
58985: IFFALSE 58989
// exit ;
58987: GO 59791
// for i = 1 to mc_bases do
58989: LD_ADDR_VAR 0 2
58993: PUSH
58994: DOUBLE
58995: LD_INT 1
58997: DEC
58998: ST_TO_ADDR
58999: LD_EXP 14
59003: PUSH
59004: FOR_TO
59005: IFFALSE 59789
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
59007: LD_EXP 42
59011: PUSH
59012: LD_VAR 0 2
59016: ARRAY
59017: NOT
59018: PUSH
59019: LD_EXP 17
59023: PUSH
59024: LD_VAR 0 2
59028: ARRAY
59029: PUSH
59030: LD_INT 1
59032: ARRAY
59033: OR
59034: PUSH
59035: LD_EXP 17
59039: PUSH
59040: LD_VAR 0 2
59044: ARRAY
59045: PUSH
59046: LD_INT 2
59048: ARRAY
59049: OR
59050: PUSH
59051: LD_EXP 40
59055: PUSH
59056: LD_VAR 0 2
59060: ARRAY
59061: PPUSH
59062: LD_INT 1
59064: PPUSH
59065: CALL_OW 325
59069: NOT
59070: OR
59071: PUSH
59072: LD_EXP 37
59076: PUSH
59077: LD_VAR 0 2
59081: ARRAY
59082: OR
59083: IFFALSE 59087
// continue ;
59085: GO 59004
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
59087: LD_ADDR_VAR 0 8
59091: PUSH
59092: LD_EXP 14
59096: PUSH
59097: LD_VAR 0 2
59101: ARRAY
59102: PPUSH
59103: LD_INT 25
59105: PUSH
59106: LD_INT 4
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 50
59115: PUSH
59116: EMPTY
59117: LIST
59118: PUSH
59119: LD_INT 3
59121: PUSH
59122: LD_INT 60
59124: PUSH
59125: EMPTY
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: PPUSH
59137: CALL_OW 72
59141: PUSH
59142: LD_EXP 18
59146: PUSH
59147: LD_VAR 0 2
59151: ARRAY
59152: DIFF
59153: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59154: LD_ADDR_VAR 0 9
59158: PUSH
59159: LD_EXP 14
59163: PUSH
59164: LD_VAR 0 2
59168: ARRAY
59169: PPUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 30
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 30
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: PPUSH
59198: CALL_OW 72
59202: ST_TO_ADDR
// if not tmp or not dep then
59203: LD_VAR 0 8
59207: NOT
59208: PUSH
59209: LD_VAR 0 9
59213: NOT
59214: OR
59215: IFFALSE 59219
// continue ;
59217: GO 59004
// side := GetSide ( tmp [ 1 ] ) ;
59219: LD_ADDR_VAR 0 11
59223: PUSH
59224: LD_VAR 0 8
59228: PUSH
59229: LD_INT 1
59231: ARRAY
59232: PPUSH
59233: CALL_OW 255
59237: ST_TO_ADDR
// dep := dep [ 1 ] ;
59238: LD_ADDR_VAR 0 9
59242: PUSH
59243: LD_VAR 0 9
59247: PUSH
59248: LD_INT 1
59250: ARRAY
59251: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
59252: LD_ADDR_VAR 0 7
59256: PUSH
59257: LD_EXP 42
59261: PUSH
59262: LD_VAR 0 2
59266: ARRAY
59267: PPUSH
59268: LD_INT 22
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 25
59280: PUSH
59281: LD_INT 12
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PPUSH
59292: CALL_OW 70
59296: PUSH
59297: LD_INT 22
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 25
59309: PUSH
59310: LD_INT 12
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 91
59319: PUSH
59320: LD_VAR 0 9
59324: PUSH
59325: LD_INT 20
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: PPUSH
59338: CALL_OW 69
59342: UNION
59343: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
59344: LD_ADDR_VAR 0 10
59348: PUSH
59349: LD_EXP 42
59353: PUSH
59354: LD_VAR 0 2
59358: ARRAY
59359: PPUSH
59360: LD_INT 81
59362: PUSH
59363: LD_VAR 0 11
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PPUSH
59372: CALL_OW 70
59376: ST_TO_ADDR
// if not apes or danger_at_area then
59377: LD_VAR 0 7
59381: NOT
59382: PUSH
59383: LD_VAR 0 10
59387: OR
59388: IFFALSE 59438
// begin if mc_taming [ i ] then
59390: LD_EXP 45
59394: PUSH
59395: LD_VAR 0 2
59399: ARRAY
59400: IFFALSE 59436
// begin MC_Reset ( i , 121 ) ;
59402: LD_VAR 0 2
59406: PPUSH
59407: LD_INT 121
59409: PPUSH
59410: CALL 44889 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59414: LD_ADDR_EXP 45
59418: PUSH
59419: LD_EXP 45
59423: PPUSH
59424: LD_VAR 0 2
59428: PPUSH
59429: EMPTY
59430: PPUSH
59431: CALL_OW 1
59435: ST_TO_ADDR
// end ; continue ;
59436: GO 59004
// end ; for j in tmp do
59438: LD_ADDR_VAR 0 3
59442: PUSH
59443: LD_VAR 0 8
59447: PUSH
59448: FOR_IN
59449: IFFALSE 59785
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
59451: LD_VAR 0 3
59455: PUSH
59456: LD_EXP 45
59460: PUSH
59461: LD_VAR 0 2
59465: ARRAY
59466: IN
59467: NOT
59468: PUSH
59469: LD_EXP 45
59473: PUSH
59474: LD_VAR 0 2
59478: ARRAY
59479: PUSH
59480: LD_INT 3
59482: LESS
59483: AND
59484: IFFALSE 59542
// begin SetTag ( j , 121 ) ;
59486: LD_VAR 0 3
59490: PPUSH
59491: LD_INT 121
59493: PPUSH
59494: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
59498: LD_ADDR_EXP 45
59502: PUSH
59503: LD_EXP 45
59507: PPUSH
59508: LD_VAR 0 2
59512: PUSH
59513: LD_EXP 45
59517: PUSH
59518: LD_VAR 0 2
59522: ARRAY
59523: PUSH
59524: LD_INT 1
59526: PLUS
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PPUSH
59532: LD_VAR 0 3
59536: PPUSH
59537: CALL 9396 0 3
59541: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
59542: LD_VAR 0 3
59546: PUSH
59547: LD_EXP 45
59551: PUSH
59552: LD_VAR 0 2
59556: ARRAY
59557: IN
59558: IFFALSE 59783
// begin if GetClass ( j ) <> 4 then
59560: LD_VAR 0 3
59564: PPUSH
59565: CALL_OW 257
59569: PUSH
59570: LD_INT 4
59572: NONEQUAL
59573: IFFALSE 59626
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
59575: LD_ADDR_EXP 45
59579: PUSH
59580: LD_EXP 45
59584: PPUSH
59585: LD_VAR 0 2
59589: PPUSH
59590: LD_EXP 45
59594: PUSH
59595: LD_VAR 0 2
59599: ARRAY
59600: PUSH
59601: LD_VAR 0 3
59605: DIFF
59606: PPUSH
59607: CALL_OW 1
59611: ST_TO_ADDR
// SetTag ( j , 0 ) ;
59612: LD_VAR 0 3
59616: PPUSH
59617: LD_INT 0
59619: PPUSH
59620: CALL_OW 109
// continue ;
59624: GO 59448
// end ; if IsInUnit ( j ) then
59626: LD_VAR 0 3
59630: PPUSH
59631: CALL_OW 310
59635: IFFALSE 59646
// ComExitBuilding ( j ) ;
59637: LD_VAR 0 3
59641: PPUSH
59642: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
59646: LD_ADDR_VAR 0 6
59650: PUSH
59651: LD_VAR 0 7
59655: PPUSH
59656: LD_VAR 0 3
59660: PPUSH
59661: CALL_OW 74
59665: ST_TO_ADDR
// if not ape then
59666: LD_VAR 0 6
59670: NOT
59671: IFFALSE 59675
// break ;
59673: GO 59785
// x := GetX ( ape ) ;
59675: LD_ADDR_VAR 0 4
59679: PUSH
59680: LD_VAR 0 6
59684: PPUSH
59685: CALL_OW 250
59689: ST_TO_ADDR
// y := GetY ( ape ) ;
59690: LD_ADDR_VAR 0 5
59694: PUSH
59695: LD_VAR 0 6
59699: PPUSH
59700: CALL_OW 251
59704: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59705: LD_VAR 0 4
59709: PPUSH
59710: LD_VAR 0 5
59714: PPUSH
59715: CALL_OW 488
59719: NOT
59720: PUSH
59721: LD_VAR 0 11
59725: PPUSH
59726: LD_VAR 0 4
59730: PPUSH
59731: LD_VAR 0 5
59735: PPUSH
59736: LD_INT 20
59738: PPUSH
59739: CALL 10292 0 4
59743: PUSH
59744: LD_INT 4
59746: ARRAY
59747: OR
59748: IFFALSE 59752
// break ;
59750: GO 59785
// if not HasTask ( j ) then
59752: LD_VAR 0 3
59756: PPUSH
59757: CALL_OW 314
59761: NOT
59762: IFFALSE 59783
// ComTameXY ( j , x , y ) ;
59764: LD_VAR 0 3
59768: PPUSH
59769: LD_VAR 0 4
59773: PPUSH
59774: LD_VAR 0 5
59778: PPUSH
59779: CALL_OW 131
// end ; end ;
59783: GO 59448
59785: POP
59786: POP
// end ;
59787: GO 59004
59789: POP
59790: POP
// end ;
59791: LD_VAR 0 1
59795: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
59796: LD_INT 0
59798: PPUSH
59799: PPUSH
59800: PPUSH
59801: PPUSH
59802: PPUSH
59803: PPUSH
59804: PPUSH
59805: PPUSH
// if not mc_bases then
59806: LD_EXP 14
59810: NOT
59811: IFFALSE 59815
// exit ;
59813: GO 60441
// for i = 1 to mc_bases do
59815: LD_ADDR_VAR 0 2
59819: PUSH
59820: DOUBLE
59821: LD_INT 1
59823: DEC
59824: ST_TO_ADDR
59825: LD_EXP 14
59829: PUSH
59830: FOR_TO
59831: IFFALSE 60439
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
59833: LD_EXP 43
59837: PUSH
59838: LD_VAR 0 2
59842: ARRAY
59843: NOT
59844: PUSH
59845: LD_EXP 43
59849: PUSH
59850: LD_VAR 0 2
59854: ARRAY
59855: PPUSH
59856: LD_INT 25
59858: PUSH
59859: LD_INT 12
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PPUSH
59866: CALL_OW 72
59870: NOT
59871: OR
59872: IFFALSE 59876
// continue ;
59874: GO 59830
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
59876: LD_ADDR_VAR 0 5
59880: PUSH
59881: LD_EXP 43
59885: PUSH
59886: LD_VAR 0 2
59890: ARRAY
59891: PUSH
59892: LD_INT 1
59894: ARRAY
59895: PPUSH
59896: CALL_OW 255
59900: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
59901: LD_VAR 0 5
59905: PPUSH
59906: LD_INT 2
59908: PPUSH
59909: CALL_OW 325
59913: IFFALSE 60166
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
59915: LD_ADDR_VAR 0 4
59919: PUSH
59920: LD_EXP 43
59924: PUSH
59925: LD_VAR 0 2
59929: ARRAY
59930: PPUSH
59931: LD_INT 25
59933: PUSH
59934: LD_INT 16
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PPUSH
59941: CALL_OW 72
59945: ST_TO_ADDR
// if tmp < 6 then
59946: LD_VAR 0 4
59950: PUSH
59951: LD_INT 6
59953: LESS
59954: IFFALSE 60166
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59956: LD_ADDR_VAR 0 6
59960: PUSH
59961: LD_EXP 14
59965: PUSH
59966: LD_VAR 0 2
59970: ARRAY
59971: PPUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 30
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 30
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: PPUSH
60000: CALL_OW 72
60004: ST_TO_ADDR
// if depot then
60005: LD_VAR 0 6
60009: IFFALSE 60166
// begin selected := 0 ;
60011: LD_ADDR_VAR 0 7
60015: PUSH
60016: LD_INT 0
60018: ST_TO_ADDR
// for j in depot do
60019: LD_ADDR_VAR 0 3
60023: PUSH
60024: LD_VAR 0 6
60028: PUSH
60029: FOR_IN
60030: IFFALSE 60061
// begin if UnitsInside ( j ) < 6 then
60032: LD_VAR 0 3
60036: PPUSH
60037: CALL_OW 313
60041: PUSH
60042: LD_INT 6
60044: LESS
60045: IFFALSE 60059
// begin selected := j ;
60047: LD_ADDR_VAR 0 7
60051: PUSH
60052: LD_VAR 0 3
60056: ST_TO_ADDR
// break ;
60057: GO 60061
// end ; end ;
60059: GO 60029
60061: POP
60062: POP
// if selected then
60063: LD_VAR 0 7
60067: IFFALSE 60166
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60069: LD_ADDR_VAR 0 3
60073: PUSH
60074: LD_EXP 43
60078: PUSH
60079: LD_VAR 0 2
60083: ARRAY
60084: PPUSH
60085: LD_INT 25
60087: PUSH
60088: LD_INT 12
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PPUSH
60095: CALL_OW 72
60099: PUSH
60100: FOR_IN
60101: IFFALSE 60164
// if not HasTask ( j ) then
60103: LD_VAR 0 3
60107: PPUSH
60108: CALL_OW 314
60112: NOT
60113: IFFALSE 60162
// begin if not IsInUnit ( j ) then
60115: LD_VAR 0 3
60119: PPUSH
60120: CALL_OW 310
60124: NOT
60125: IFFALSE 60141
// ComEnterUnit ( j , selected ) ;
60127: LD_VAR 0 3
60131: PPUSH
60132: LD_VAR 0 7
60136: PPUSH
60137: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
60141: LD_VAR 0 3
60145: PPUSH
60146: LD_INT 16
60148: PPUSH
60149: CALL_OW 183
// AddComExitBuilding ( j ) ;
60153: LD_VAR 0 3
60157: PPUSH
60158: CALL_OW 182
// end ;
60162: GO 60100
60164: POP
60165: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
60166: LD_VAR 0 5
60170: PPUSH
60171: LD_INT 11
60173: PPUSH
60174: CALL_OW 325
60178: IFFALSE 60437
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60180: LD_ADDR_VAR 0 4
60184: PUSH
60185: LD_EXP 43
60189: PUSH
60190: LD_VAR 0 2
60194: ARRAY
60195: PPUSH
60196: LD_INT 25
60198: PUSH
60199: LD_INT 16
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PPUSH
60206: CALL_OW 72
60210: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
60211: LD_VAR 0 4
60215: PUSH
60216: LD_INT 6
60218: GREATEREQUAL
60219: PUSH
60220: LD_VAR 0 5
60224: PPUSH
60225: LD_INT 2
60227: PPUSH
60228: CALL_OW 325
60232: NOT
60233: OR
60234: IFFALSE 60437
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60236: LD_ADDR_VAR 0 8
60240: PUSH
60241: LD_EXP 14
60245: PUSH
60246: LD_VAR 0 2
60250: ARRAY
60251: PPUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 30
60257: PUSH
60258: LD_INT 4
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 30
60267: PUSH
60268: LD_INT 5
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: PPUSH
60280: CALL_OW 72
60284: ST_TO_ADDR
// if barracks then
60285: LD_VAR 0 8
60289: IFFALSE 60437
// begin selected := 0 ;
60291: LD_ADDR_VAR 0 7
60295: PUSH
60296: LD_INT 0
60298: ST_TO_ADDR
// for j in barracks do
60299: LD_ADDR_VAR 0 3
60303: PUSH
60304: LD_VAR 0 8
60308: PUSH
60309: FOR_IN
60310: IFFALSE 60341
// begin if UnitsInside ( j ) < 6 then
60312: LD_VAR 0 3
60316: PPUSH
60317: CALL_OW 313
60321: PUSH
60322: LD_INT 6
60324: LESS
60325: IFFALSE 60339
// begin selected := j ;
60327: LD_ADDR_VAR 0 7
60331: PUSH
60332: LD_VAR 0 3
60336: ST_TO_ADDR
// break ;
60337: GO 60341
// end ; end ;
60339: GO 60309
60341: POP
60342: POP
// if selected then
60343: LD_VAR 0 7
60347: IFFALSE 60437
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60349: LD_ADDR_VAR 0 3
60353: PUSH
60354: LD_EXP 43
60358: PUSH
60359: LD_VAR 0 2
60363: ARRAY
60364: PPUSH
60365: LD_INT 25
60367: PUSH
60368: LD_INT 12
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PPUSH
60375: CALL_OW 72
60379: PUSH
60380: FOR_IN
60381: IFFALSE 60435
// if not IsInUnit ( j ) and not HasTask ( j ) then
60383: LD_VAR 0 3
60387: PPUSH
60388: CALL_OW 310
60392: NOT
60393: PUSH
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 314
60403: NOT
60404: AND
60405: IFFALSE 60433
// begin ComEnterUnit ( j , selected ) ;
60407: LD_VAR 0 3
60411: PPUSH
60412: LD_VAR 0 7
60416: PPUSH
60417: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
60421: LD_VAR 0 3
60425: PPUSH
60426: LD_INT 15
60428: PPUSH
60429: CALL_OW 183
// end ;
60433: GO 60380
60435: POP
60436: POP
// end ; end ; end ; end ; end ;
60437: GO 59830
60439: POP
60440: POP
// end ;
60441: LD_VAR 0 1
60445: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
60446: LD_INT 0
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
// if not mc_bases then
60452: LD_EXP 14
60456: NOT
60457: IFFALSE 60461
// exit ;
60459: GO 60639
// for i = 1 to mc_bases do
60461: LD_ADDR_VAR 0 2
60465: PUSH
60466: DOUBLE
60467: LD_INT 1
60469: DEC
60470: ST_TO_ADDR
60471: LD_EXP 14
60475: PUSH
60476: FOR_TO
60477: IFFALSE 60637
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
60479: LD_ADDR_VAR 0 4
60483: PUSH
60484: LD_EXP 14
60488: PUSH
60489: LD_VAR 0 2
60493: ARRAY
60494: PPUSH
60495: LD_INT 25
60497: PUSH
60498: LD_INT 9
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PPUSH
60505: CALL_OW 72
60509: ST_TO_ADDR
// if not tmp then
60510: LD_VAR 0 4
60514: NOT
60515: IFFALSE 60519
// continue ;
60517: GO 60476
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
60519: LD_EXP 40
60523: PUSH
60524: LD_VAR 0 2
60528: ARRAY
60529: PPUSH
60530: LD_INT 29
60532: PPUSH
60533: CALL_OW 325
60537: NOT
60538: PUSH
60539: LD_EXP 40
60543: PUSH
60544: LD_VAR 0 2
60548: ARRAY
60549: PPUSH
60550: LD_INT 28
60552: PPUSH
60553: CALL_OW 325
60557: NOT
60558: AND
60559: IFFALSE 60563
// continue ;
60561: GO 60476
// for j in tmp do
60563: LD_ADDR_VAR 0 3
60567: PUSH
60568: LD_VAR 0 4
60572: PUSH
60573: FOR_IN
60574: IFFALSE 60633
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
60576: LD_VAR 0 3
60580: PUSH
60581: LD_EXP 17
60585: PUSH
60586: LD_VAR 0 2
60590: ARRAY
60591: PUSH
60592: LD_INT 1
60594: ARRAY
60595: IN
60596: NOT
60597: PUSH
60598: LD_VAR 0 3
60602: PUSH
60603: LD_EXP 17
60607: PUSH
60608: LD_VAR 0 2
60612: ARRAY
60613: PUSH
60614: LD_INT 2
60616: ARRAY
60617: IN
60618: NOT
60619: AND
60620: IFFALSE 60631
// ComSpaceTimeShoot ( j ) ;
60622: LD_VAR 0 3
60626: PPUSH
60627: CALL 5393 0 1
60631: GO 60573
60633: POP
60634: POP
// end ;
60635: GO 60476
60637: POP
60638: POP
// end ;
60639: LD_VAR 0 1
60643: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
60644: LD_INT 0
60646: PPUSH
60647: PPUSH
60648: PPUSH
60649: PPUSH
60650: PPUSH
60651: PPUSH
60652: PPUSH
60653: PPUSH
60654: PPUSH
// if not mc_bases then
60655: LD_EXP 14
60659: NOT
60660: IFFALSE 60664
// exit ;
60662: GO 61286
// for i = 1 to mc_bases do
60664: LD_ADDR_VAR 0 2
60668: PUSH
60669: DOUBLE
60670: LD_INT 1
60672: DEC
60673: ST_TO_ADDR
60674: LD_EXP 14
60678: PUSH
60679: FOR_TO
60680: IFFALSE 61284
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
60682: LD_EXP 49
60686: PUSH
60687: LD_VAR 0 2
60691: ARRAY
60692: NOT
60693: PUSH
60694: LD_INT 38
60696: PPUSH
60697: LD_EXP 40
60701: PUSH
60702: LD_VAR 0 2
60706: ARRAY
60707: PPUSH
60708: CALL_OW 321
60712: PUSH
60713: LD_INT 2
60715: NONEQUAL
60716: OR
60717: IFFALSE 60721
// continue ;
60719: GO 60679
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
60721: LD_ADDR_VAR 0 8
60725: PUSH
60726: LD_EXP 14
60730: PUSH
60731: LD_VAR 0 2
60735: ARRAY
60736: PPUSH
60737: LD_INT 30
60739: PUSH
60740: LD_INT 34
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PPUSH
60747: CALL_OW 72
60751: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
60752: LD_ADDR_VAR 0 9
60756: PUSH
60757: LD_EXP 14
60761: PUSH
60762: LD_VAR 0 2
60766: ARRAY
60767: PPUSH
60768: LD_INT 25
60770: PUSH
60771: LD_INT 4
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PPUSH
60778: CALL_OW 72
60782: PPUSH
60783: LD_INT 0
60785: PPUSH
60786: CALL 37957 0 2
60790: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
60791: LD_VAR 0 9
60795: NOT
60796: PUSH
60797: LD_VAR 0 8
60801: NOT
60802: OR
60803: PUSH
60804: LD_EXP 14
60808: PUSH
60809: LD_VAR 0 2
60813: ARRAY
60814: PPUSH
60815: LD_INT 124
60817: PPUSH
60818: CALL 37957 0 2
60822: OR
60823: IFFALSE 60827
// continue ;
60825: GO 60679
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
60827: LD_EXP 50
60831: PUSH
60832: LD_VAR 0 2
60836: ARRAY
60837: PUSH
60838: LD_EXP 49
60842: PUSH
60843: LD_VAR 0 2
60847: ARRAY
60848: LESS
60849: PUSH
60850: LD_EXP 50
60854: PUSH
60855: LD_VAR 0 2
60859: ARRAY
60860: PUSH
60861: LD_VAR 0 8
60865: LESS
60866: AND
60867: IFFALSE 61282
// begin tmp := sci [ 1 ] ;
60869: LD_ADDR_VAR 0 7
60873: PUSH
60874: LD_VAR 0 9
60878: PUSH
60879: LD_INT 1
60881: ARRAY
60882: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
60883: LD_VAR 0 7
60887: PPUSH
60888: LD_INT 124
60890: PPUSH
60891: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
60895: LD_ADDR_VAR 0 3
60899: PUSH
60900: DOUBLE
60901: LD_EXP 49
60905: PUSH
60906: LD_VAR 0 2
60910: ARRAY
60911: INC
60912: ST_TO_ADDR
60913: LD_EXP 49
60917: PUSH
60918: LD_VAR 0 2
60922: ARRAY
60923: PUSH
60924: FOR_DOWNTO
60925: IFFALSE 61268
// begin if IsInUnit ( tmp ) then
60927: LD_VAR 0 7
60931: PPUSH
60932: CALL_OW 310
60936: IFFALSE 60947
// ComExitBuilding ( tmp ) ;
60938: LD_VAR 0 7
60942: PPUSH
60943: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
60947: LD_INT 35
60949: PPUSH
60950: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
60954: LD_VAR 0 7
60958: PPUSH
60959: CALL_OW 310
60963: NOT
60964: PUSH
60965: LD_VAR 0 7
60969: PPUSH
60970: CALL_OW 314
60974: NOT
60975: AND
60976: IFFALSE 60947
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
60978: LD_ADDR_VAR 0 6
60982: PUSH
60983: LD_VAR 0 7
60987: PPUSH
60988: CALL_OW 250
60992: PUSH
60993: LD_VAR 0 7
60997: PPUSH
60998: CALL_OW 251
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61007: LD_INT 35
61009: PPUSH
61010: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
61014: LD_ADDR_VAR 0 4
61018: PUSH
61019: LD_EXP 49
61023: PUSH
61024: LD_VAR 0 2
61028: ARRAY
61029: PUSH
61030: LD_VAR 0 3
61034: ARRAY
61035: PUSH
61036: LD_INT 1
61038: ARRAY
61039: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
61040: LD_ADDR_VAR 0 5
61044: PUSH
61045: LD_EXP 49
61049: PUSH
61050: LD_VAR 0 2
61054: ARRAY
61055: PUSH
61056: LD_VAR 0 3
61060: ARRAY
61061: PUSH
61062: LD_INT 2
61064: ARRAY
61065: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
61066: LD_VAR 0 7
61070: PPUSH
61071: LD_INT 10
61073: PPUSH
61074: CALL 11989 0 2
61078: PUSH
61079: LD_INT 4
61081: ARRAY
61082: IFFALSE 61120
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
61084: LD_VAR 0 7
61088: PPUSH
61089: LD_VAR 0 6
61093: PUSH
61094: LD_INT 1
61096: ARRAY
61097: PPUSH
61098: LD_VAR 0 6
61102: PUSH
61103: LD_INT 2
61105: ARRAY
61106: PPUSH
61107: CALL_OW 111
// wait ( 0 0$10 ) ;
61111: LD_INT 350
61113: PPUSH
61114: CALL_OW 67
// end else
61118: GO 61146
// begin ComMoveXY ( tmp , x , y ) ;
61120: LD_VAR 0 7
61124: PPUSH
61125: LD_VAR 0 4
61129: PPUSH
61130: LD_VAR 0 5
61134: PPUSH
61135: CALL_OW 111
// wait ( 0 0$3 ) ;
61139: LD_INT 105
61141: PPUSH
61142: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
61146: LD_VAR 0 7
61150: PPUSH
61151: LD_VAR 0 4
61155: PPUSH
61156: LD_VAR 0 5
61160: PPUSH
61161: CALL_OW 307
61165: IFFALSE 61007
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
61167: LD_VAR 0 7
61171: PPUSH
61172: LD_VAR 0 4
61176: PPUSH
61177: LD_VAR 0 5
61181: PPUSH
61182: LD_VAR 0 8
61186: PUSH
61187: LD_VAR 0 3
61191: ARRAY
61192: PPUSH
61193: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
61197: LD_INT 35
61199: PPUSH
61200: CALL_OW 67
// until not HasTask ( tmp ) ;
61204: LD_VAR 0 7
61208: PPUSH
61209: CALL_OW 314
61213: NOT
61214: IFFALSE 61197
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
61216: LD_ADDR_EXP 50
61220: PUSH
61221: LD_EXP 50
61225: PPUSH
61226: LD_VAR 0 2
61230: PUSH
61231: LD_EXP 50
61235: PUSH
61236: LD_VAR 0 2
61240: ARRAY
61241: PUSH
61242: LD_INT 1
61244: PLUS
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PPUSH
61250: LD_VAR 0 8
61254: PUSH
61255: LD_VAR 0 3
61259: ARRAY
61260: PPUSH
61261: CALL 9396 0 3
61265: ST_TO_ADDR
// end ;
61266: GO 60924
61268: POP
61269: POP
// MC_Reset ( i , 124 ) ;
61270: LD_VAR 0 2
61274: PPUSH
61275: LD_INT 124
61277: PPUSH
61278: CALL 44889 0 2
// end ; end ;
61282: GO 60679
61284: POP
61285: POP
// end ;
61286: LD_VAR 0 1
61290: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
61291: LD_INT 0
61293: PPUSH
61294: PPUSH
61295: PPUSH
// if not mc_bases then
61296: LD_EXP 14
61300: NOT
61301: IFFALSE 61305
// exit ;
61303: GO 61911
// for i = 1 to mc_bases do
61305: LD_ADDR_VAR 0 2
61309: PUSH
61310: DOUBLE
61311: LD_INT 1
61313: DEC
61314: ST_TO_ADDR
61315: LD_EXP 14
61319: PUSH
61320: FOR_TO
61321: IFFALSE 61909
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
61323: LD_ADDR_VAR 0 3
61327: PUSH
61328: LD_EXP 14
61332: PUSH
61333: LD_VAR 0 2
61337: ARRAY
61338: PPUSH
61339: LD_INT 25
61341: PUSH
61342: LD_INT 4
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PPUSH
61349: CALL_OW 72
61353: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
61354: LD_VAR 0 3
61358: NOT
61359: PUSH
61360: LD_EXP 51
61364: PUSH
61365: LD_VAR 0 2
61369: ARRAY
61370: NOT
61371: OR
61372: PUSH
61373: LD_EXP 14
61377: PUSH
61378: LD_VAR 0 2
61382: ARRAY
61383: PPUSH
61384: LD_INT 2
61386: PUSH
61387: LD_INT 30
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 30
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: PPUSH
61412: CALL_OW 72
61416: NOT
61417: OR
61418: IFFALSE 61468
// begin if mc_deposits_finder [ i ] then
61420: LD_EXP 52
61424: PUSH
61425: LD_VAR 0 2
61429: ARRAY
61430: IFFALSE 61466
// begin MC_Reset ( i , 125 ) ;
61432: LD_VAR 0 2
61436: PPUSH
61437: LD_INT 125
61439: PPUSH
61440: CALL 44889 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61444: LD_ADDR_EXP 52
61448: PUSH
61449: LD_EXP 52
61453: PPUSH
61454: LD_VAR 0 2
61458: PPUSH
61459: EMPTY
61460: PPUSH
61461: CALL_OW 1
61465: ST_TO_ADDR
// end ; continue ;
61466: GO 61320
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
61468: LD_EXP 51
61472: PUSH
61473: LD_VAR 0 2
61477: ARRAY
61478: PUSH
61479: LD_INT 1
61481: ARRAY
61482: PUSH
61483: LD_INT 3
61485: ARRAY
61486: PUSH
61487: LD_INT 1
61489: EQUAL
61490: PUSH
61491: LD_INT 20
61493: PPUSH
61494: LD_EXP 40
61498: PUSH
61499: LD_VAR 0 2
61503: ARRAY
61504: PPUSH
61505: CALL_OW 321
61509: PUSH
61510: LD_INT 2
61512: NONEQUAL
61513: AND
61514: IFFALSE 61564
// begin if mc_deposits_finder [ i ] then
61516: LD_EXP 52
61520: PUSH
61521: LD_VAR 0 2
61525: ARRAY
61526: IFFALSE 61562
// begin MC_Reset ( i , 125 ) ;
61528: LD_VAR 0 2
61532: PPUSH
61533: LD_INT 125
61535: PPUSH
61536: CALL 44889 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61540: LD_ADDR_EXP 52
61544: PUSH
61545: LD_EXP 52
61549: PPUSH
61550: LD_VAR 0 2
61554: PPUSH
61555: EMPTY
61556: PPUSH
61557: CALL_OW 1
61561: ST_TO_ADDR
// end ; continue ;
61562: GO 61320
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
61564: LD_EXP 51
61568: PUSH
61569: LD_VAR 0 2
61573: ARRAY
61574: PUSH
61575: LD_INT 1
61577: ARRAY
61578: PUSH
61579: LD_INT 1
61581: ARRAY
61582: PPUSH
61583: LD_EXP 51
61587: PUSH
61588: LD_VAR 0 2
61592: ARRAY
61593: PUSH
61594: LD_INT 1
61596: ARRAY
61597: PUSH
61598: LD_INT 2
61600: ARRAY
61601: PPUSH
61602: LD_EXP 40
61606: PUSH
61607: LD_VAR 0 2
61611: ARRAY
61612: PPUSH
61613: CALL_OW 440
61617: IFFALSE 61660
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
61619: LD_ADDR_EXP 51
61623: PUSH
61624: LD_EXP 51
61628: PPUSH
61629: LD_VAR 0 2
61633: PPUSH
61634: LD_EXP 51
61638: PUSH
61639: LD_VAR 0 2
61643: ARRAY
61644: PPUSH
61645: LD_INT 1
61647: PPUSH
61648: CALL_OW 3
61652: PPUSH
61653: CALL_OW 1
61657: ST_TO_ADDR
61658: GO 61907
// begin if not mc_deposits_finder [ i ] then
61660: LD_EXP 52
61664: PUSH
61665: LD_VAR 0 2
61669: ARRAY
61670: NOT
61671: IFFALSE 61723
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
61673: LD_ADDR_EXP 52
61677: PUSH
61678: LD_EXP 52
61682: PPUSH
61683: LD_VAR 0 2
61687: PPUSH
61688: LD_VAR 0 3
61692: PUSH
61693: LD_INT 1
61695: ARRAY
61696: PUSH
61697: EMPTY
61698: LIST
61699: PPUSH
61700: CALL_OW 1
61704: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
61705: LD_VAR 0 3
61709: PUSH
61710: LD_INT 1
61712: ARRAY
61713: PPUSH
61714: LD_INT 125
61716: PPUSH
61717: CALL_OW 109
// end else
61721: GO 61907
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
61723: LD_EXP 52
61727: PUSH
61728: LD_VAR 0 2
61732: ARRAY
61733: PUSH
61734: LD_INT 1
61736: ARRAY
61737: PPUSH
61738: CALL_OW 310
61742: IFFALSE 61765
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
61744: LD_EXP 52
61748: PUSH
61749: LD_VAR 0 2
61753: ARRAY
61754: PUSH
61755: LD_INT 1
61757: ARRAY
61758: PPUSH
61759: CALL_OW 122
61763: GO 61907
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
61765: LD_EXP 52
61769: PUSH
61770: LD_VAR 0 2
61774: ARRAY
61775: PUSH
61776: LD_INT 1
61778: ARRAY
61779: PPUSH
61780: CALL_OW 314
61784: NOT
61785: PUSH
61786: LD_EXP 52
61790: PUSH
61791: LD_VAR 0 2
61795: ARRAY
61796: PUSH
61797: LD_INT 1
61799: ARRAY
61800: PPUSH
61801: LD_EXP 51
61805: PUSH
61806: LD_VAR 0 2
61810: ARRAY
61811: PUSH
61812: LD_INT 1
61814: ARRAY
61815: PUSH
61816: LD_INT 1
61818: ARRAY
61819: PPUSH
61820: LD_EXP 51
61824: PUSH
61825: LD_VAR 0 2
61829: ARRAY
61830: PUSH
61831: LD_INT 1
61833: ARRAY
61834: PUSH
61835: LD_INT 2
61837: ARRAY
61838: PPUSH
61839: CALL_OW 297
61843: PUSH
61844: LD_INT 6
61846: GREATER
61847: AND
61848: IFFALSE 61907
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
61850: LD_EXP 52
61854: PUSH
61855: LD_VAR 0 2
61859: ARRAY
61860: PUSH
61861: LD_INT 1
61863: ARRAY
61864: PPUSH
61865: LD_EXP 51
61869: PUSH
61870: LD_VAR 0 2
61874: ARRAY
61875: PUSH
61876: LD_INT 1
61878: ARRAY
61879: PUSH
61880: LD_INT 1
61882: ARRAY
61883: PPUSH
61884: LD_EXP 51
61888: PUSH
61889: LD_VAR 0 2
61893: ARRAY
61894: PUSH
61895: LD_INT 1
61897: ARRAY
61898: PUSH
61899: LD_INT 2
61901: ARRAY
61902: PPUSH
61903: CALL_OW 111
// end ; end ; end ;
61907: GO 61320
61909: POP
61910: POP
// end ;
61911: LD_VAR 0 1
61915: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
61916: LD_INT 0
61918: PPUSH
61919: PPUSH
61920: PPUSH
61921: PPUSH
61922: PPUSH
61923: PPUSH
61924: PPUSH
61925: PPUSH
61926: PPUSH
61927: PPUSH
61928: PPUSH
// if not mc_bases then
61929: LD_EXP 14
61933: NOT
61934: IFFALSE 61938
// exit ;
61936: GO 62878
// for i = 1 to mc_bases do
61938: LD_ADDR_VAR 0 2
61942: PUSH
61943: DOUBLE
61944: LD_INT 1
61946: DEC
61947: ST_TO_ADDR
61948: LD_EXP 14
61952: PUSH
61953: FOR_TO
61954: IFFALSE 62876
// begin if not mc_bases [ i ] or mc_scan [ i ] then
61956: LD_EXP 14
61960: PUSH
61961: LD_VAR 0 2
61965: ARRAY
61966: NOT
61967: PUSH
61968: LD_EXP 37
61972: PUSH
61973: LD_VAR 0 2
61977: ARRAY
61978: OR
61979: IFFALSE 61983
// continue ;
61981: GO 61953
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
61983: LD_ADDR_VAR 0 7
61987: PUSH
61988: LD_EXP 14
61992: PUSH
61993: LD_VAR 0 2
61997: ARRAY
61998: PUSH
61999: LD_INT 1
62001: ARRAY
62002: PPUSH
62003: CALL_OW 248
62007: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
62008: LD_VAR 0 7
62012: PUSH
62013: LD_INT 3
62015: EQUAL
62016: PUSH
62017: LD_EXP 33
62021: PUSH
62022: LD_VAR 0 2
62026: ARRAY
62027: PUSH
62028: LD_EXP 36
62032: PUSH
62033: LD_VAR 0 2
62037: ARRAY
62038: UNION
62039: PPUSH
62040: LD_INT 33
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PPUSH
62050: CALL_OW 72
62054: NOT
62055: OR
62056: IFFALSE 62060
// continue ;
62058: GO 61953
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
62060: LD_ADDR_VAR 0 9
62064: PUSH
62065: LD_EXP 14
62069: PUSH
62070: LD_VAR 0 2
62074: ARRAY
62075: PPUSH
62076: LD_INT 30
62078: PUSH
62079: LD_INT 36
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PPUSH
62086: CALL_OW 72
62090: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
62091: LD_ADDR_VAR 0 10
62095: PUSH
62096: LD_EXP 33
62100: PUSH
62101: LD_VAR 0 2
62105: ARRAY
62106: PPUSH
62107: LD_INT 34
62109: PUSH
62110: LD_INT 31
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PPUSH
62117: CALL_OW 72
62121: ST_TO_ADDR
// if not cts and not mcts then
62122: LD_VAR 0 9
62126: NOT
62127: PUSH
62128: LD_VAR 0 10
62132: NOT
62133: AND
62134: IFFALSE 62138
// continue ;
62136: GO 61953
// x := cts ;
62138: LD_ADDR_VAR 0 11
62142: PUSH
62143: LD_VAR 0 9
62147: ST_TO_ADDR
// if not x then
62148: LD_VAR 0 11
62152: NOT
62153: IFFALSE 62165
// x := mcts ;
62155: LD_ADDR_VAR 0 11
62159: PUSH
62160: LD_VAR 0 10
62164: ST_TO_ADDR
// if not x then
62165: LD_VAR 0 11
62169: NOT
62170: IFFALSE 62174
// continue ;
62172: GO 61953
// if mc_remote_driver [ i ] then
62174: LD_EXP 54
62178: PUSH
62179: LD_VAR 0 2
62183: ARRAY
62184: IFFALSE 62571
// for j in mc_remote_driver [ i ] do
62186: LD_ADDR_VAR 0 3
62190: PUSH
62191: LD_EXP 54
62195: PUSH
62196: LD_VAR 0 2
62200: ARRAY
62201: PUSH
62202: FOR_IN
62203: IFFALSE 62569
// begin if GetClass ( j ) <> 3 then
62205: LD_VAR 0 3
62209: PPUSH
62210: CALL_OW 257
62214: PUSH
62215: LD_INT 3
62217: NONEQUAL
62218: IFFALSE 62271
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
62220: LD_ADDR_EXP 54
62224: PUSH
62225: LD_EXP 54
62229: PPUSH
62230: LD_VAR 0 2
62234: PPUSH
62235: LD_EXP 54
62239: PUSH
62240: LD_VAR 0 2
62244: ARRAY
62245: PUSH
62246: LD_VAR 0 3
62250: DIFF
62251: PPUSH
62252: CALL_OW 1
62256: ST_TO_ADDR
// SetTag ( j , 0 ) ;
62257: LD_VAR 0 3
62261: PPUSH
62262: LD_INT 0
62264: PPUSH
62265: CALL_OW 109
// continue ;
62269: GO 62202
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
62271: LD_EXP 33
62275: PUSH
62276: LD_VAR 0 2
62280: ARRAY
62281: PPUSH
62282: LD_INT 34
62284: PUSH
62285: LD_INT 31
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 58
62294: PUSH
62295: EMPTY
62296: LIST
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PPUSH
62302: CALL_OW 72
62306: PUSH
62307: LD_VAR 0 3
62311: PPUSH
62312: CALL 38045 0 1
62316: NOT
62317: AND
62318: IFFALSE 62389
// begin if IsInUnit ( j ) then
62320: LD_VAR 0 3
62324: PPUSH
62325: CALL_OW 310
62329: IFFALSE 62340
// ComExitBuilding ( j ) ;
62331: LD_VAR 0 3
62335: PPUSH
62336: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
62340: LD_VAR 0 3
62344: PPUSH
62345: LD_EXP 33
62349: PUSH
62350: LD_VAR 0 2
62354: ARRAY
62355: PPUSH
62356: LD_INT 34
62358: PUSH
62359: LD_INT 31
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 58
62368: PUSH
62369: EMPTY
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PPUSH
62376: CALL_OW 72
62380: PUSH
62381: LD_INT 1
62383: ARRAY
62384: PPUSH
62385: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
62389: LD_VAR 0 3
62393: PPUSH
62394: CALL_OW 310
62398: NOT
62399: PUSH
62400: LD_VAR 0 3
62404: PPUSH
62405: CALL_OW 310
62409: PPUSH
62410: CALL_OW 266
62414: PUSH
62415: LD_INT 36
62417: NONEQUAL
62418: PUSH
62419: LD_VAR 0 3
62423: PPUSH
62424: CALL 38045 0 1
62428: NOT
62429: AND
62430: OR
62431: IFFALSE 62567
// begin if IsInUnit ( j ) then
62433: LD_VAR 0 3
62437: PPUSH
62438: CALL_OW 310
62442: IFFALSE 62453
// ComExitBuilding ( j ) ;
62444: LD_VAR 0 3
62448: PPUSH
62449: CALL_OW 122
// ct := 0 ;
62453: LD_ADDR_VAR 0 8
62457: PUSH
62458: LD_INT 0
62460: ST_TO_ADDR
// for k in x do
62461: LD_ADDR_VAR 0 4
62465: PUSH
62466: LD_VAR 0 11
62470: PUSH
62471: FOR_IN
62472: IFFALSE 62545
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
62474: LD_VAR 0 4
62478: PPUSH
62479: CALL_OW 264
62483: PUSH
62484: LD_INT 31
62486: EQUAL
62487: PUSH
62488: LD_VAR 0 4
62492: PPUSH
62493: CALL_OW 311
62497: NOT
62498: AND
62499: PUSH
62500: LD_VAR 0 4
62504: PPUSH
62505: CALL_OW 266
62509: PUSH
62510: LD_INT 36
62512: EQUAL
62513: PUSH
62514: LD_VAR 0 4
62518: PPUSH
62519: CALL_OW 313
62523: PUSH
62524: LD_INT 3
62526: LESS
62527: AND
62528: OR
62529: IFFALSE 62543
// begin ct := k ;
62531: LD_ADDR_VAR 0 8
62535: PUSH
62536: LD_VAR 0 4
62540: ST_TO_ADDR
// break ;
62541: GO 62545
// end ;
62543: GO 62471
62545: POP
62546: POP
// if ct then
62547: LD_VAR 0 8
62551: IFFALSE 62567
// ComEnterUnit ( j , ct ) ;
62553: LD_VAR 0 3
62557: PPUSH
62558: LD_VAR 0 8
62562: PPUSH
62563: CALL_OW 120
// end ; end ;
62567: GO 62202
62569: POP
62570: POP
// places := 0 ;
62571: LD_ADDR_VAR 0 5
62575: PUSH
62576: LD_INT 0
62578: ST_TO_ADDR
// for j = 1 to x do
62579: LD_ADDR_VAR 0 3
62583: PUSH
62584: DOUBLE
62585: LD_INT 1
62587: DEC
62588: ST_TO_ADDR
62589: LD_VAR 0 11
62593: PUSH
62594: FOR_TO
62595: IFFALSE 62671
// if GetWeapon ( x [ j ] ) = ar_control_tower then
62597: LD_VAR 0 11
62601: PUSH
62602: LD_VAR 0 3
62606: ARRAY
62607: PPUSH
62608: CALL_OW 264
62612: PUSH
62613: LD_INT 31
62615: EQUAL
62616: IFFALSE 62634
// places := places + 1 else
62618: LD_ADDR_VAR 0 5
62622: PUSH
62623: LD_VAR 0 5
62627: PUSH
62628: LD_INT 1
62630: PLUS
62631: ST_TO_ADDR
62632: GO 62669
// if GetBType ( x [ j ] ) = b_control_tower then
62634: LD_VAR 0 11
62638: PUSH
62639: LD_VAR 0 3
62643: ARRAY
62644: PPUSH
62645: CALL_OW 266
62649: PUSH
62650: LD_INT 36
62652: EQUAL
62653: IFFALSE 62669
// places := places + 3 ;
62655: LD_ADDR_VAR 0 5
62659: PUSH
62660: LD_VAR 0 5
62664: PUSH
62665: LD_INT 3
62667: PLUS
62668: ST_TO_ADDR
62669: GO 62594
62671: POP
62672: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
62673: LD_VAR 0 5
62677: PUSH
62678: LD_INT 0
62680: EQUAL
62681: PUSH
62682: LD_VAR 0 5
62686: PUSH
62687: LD_EXP 54
62691: PUSH
62692: LD_VAR 0 2
62696: ARRAY
62697: LESSEQUAL
62698: OR
62699: IFFALSE 62703
// continue ;
62701: GO 61953
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
62703: LD_ADDR_VAR 0 6
62707: PUSH
62708: LD_EXP 14
62712: PUSH
62713: LD_VAR 0 2
62717: ARRAY
62718: PPUSH
62719: LD_INT 25
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PPUSH
62729: CALL_OW 72
62733: PUSH
62734: LD_EXP 54
62738: PUSH
62739: LD_VAR 0 2
62743: ARRAY
62744: DIFF
62745: PPUSH
62746: LD_INT 3
62748: PPUSH
62749: CALL 38945 0 2
62753: ST_TO_ADDR
// for j in tmp do
62754: LD_ADDR_VAR 0 3
62758: PUSH
62759: LD_VAR 0 6
62763: PUSH
62764: FOR_IN
62765: IFFALSE 62800
// if GetTag ( j ) > 0 then
62767: LD_VAR 0 3
62771: PPUSH
62772: CALL_OW 110
62776: PUSH
62777: LD_INT 0
62779: GREATER
62780: IFFALSE 62798
// tmp := tmp diff j ;
62782: LD_ADDR_VAR 0 6
62786: PUSH
62787: LD_VAR 0 6
62791: PUSH
62792: LD_VAR 0 3
62796: DIFF
62797: ST_TO_ADDR
62798: GO 62764
62800: POP
62801: POP
// if not tmp then
62802: LD_VAR 0 6
62806: NOT
62807: IFFALSE 62811
// continue ;
62809: GO 61953
// if places then
62811: LD_VAR 0 5
62815: IFFALSE 62874
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
62817: LD_ADDR_EXP 54
62821: PUSH
62822: LD_EXP 54
62826: PPUSH
62827: LD_VAR 0 2
62831: PPUSH
62832: LD_EXP 54
62836: PUSH
62837: LD_VAR 0 2
62841: ARRAY
62842: PUSH
62843: LD_VAR 0 6
62847: PUSH
62848: LD_INT 1
62850: ARRAY
62851: UNION
62852: PPUSH
62853: CALL_OW 1
62857: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
62858: LD_VAR 0 6
62862: PUSH
62863: LD_INT 1
62865: ARRAY
62866: PPUSH
62867: LD_INT 126
62869: PPUSH
62870: CALL_OW 109
// end ; end ;
62874: GO 61953
62876: POP
62877: POP
// end ;
62878: LD_VAR 0 1
62882: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
62883: LD_INT 0
62885: PPUSH
62886: PPUSH
62887: PPUSH
62888: PPUSH
62889: PPUSH
62890: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
62891: LD_VAR 0 1
62895: NOT
62896: PUSH
62897: LD_VAR 0 2
62901: NOT
62902: OR
62903: PUSH
62904: LD_VAR 0 3
62908: NOT
62909: OR
62910: PUSH
62911: LD_VAR 0 4
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: LD_INT 3
62924: PUSH
62925: LD_INT 4
62927: PUSH
62928: LD_INT 5
62930: PUSH
62931: LD_INT 8
62933: PUSH
62934: LD_INT 9
62936: PUSH
62937: LD_INT 15
62939: PUSH
62940: LD_INT 16
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: IN
62954: NOT
62955: OR
62956: IFFALSE 62960
// exit ;
62958: GO 63860
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
62960: LD_ADDR_VAR 0 2
62964: PUSH
62965: LD_VAR 0 2
62969: PPUSH
62970: LD_INT 21
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 24
62982: PUSH
62983: LD_INT 250
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PPUSH
62994: CALL_OW 72
62998: ST_TO_ADDR
// case class of 1 , 15 :
62999: LD_VAR 0 4
63003: PUSH
63004: LD_INT 1
63006: DOUBLE
63007: EQUAL
63008: IFTRUE 63018
63010: LD_INT 15
63012: DOUBLE
63013: EQUAL
63014: IFTRUE 63018
63016: GO 63103
63018: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
63019: LD_ADDR_VAR 0 8
63023: PUSH
63024: LD_VAR 0 2
63028: PPUSH
63029: LD_INT 2
63031: PUSH
63032: LD_INT 30
63034: PUSH
63035: LD_INT 32
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 30
63044: PUSH
63045: LD_INT 31
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: PPUSH
63057: CALL_OW 72
63061: PUSH
63062: LD_VAR 0 2
63066: PPUSH
63067: LD_INT 2
63069: PUSH
63070: LD_INT 30
63072: PUSH
63073: LD_INT 4
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 30
63082: PUSH
63083: LD_INT 5
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: LIST
63094: PPUSH
63095: CALL_OW 72
63099: ADD
63100: ST_TO_ADDR
63101: GO 63349
63103: LD_INT 2
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63117
63109: LD_INT 16
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63117
63115: GO 63163
63117: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
63118: LD_ADDR_VAR 0 8
63122: PUSH
63123: LD_VAR 0 2
63127: PPUSH
63128: LD_INT 2
63130: PUSH
63131: LD_INT 30
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 30
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: PPUSH
63156: CALL_OW 72
63160: ST_TO_ADDR
63161: GO 63349
63163: LD_INT 3
63165: DOUBLE
63166: EQUAL
63167: IFTRUE 63171
63169: GO 63217
63171: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
63172: LD_ADDR_VAR 0 8
63176: PUSH
63177: LD_VAR 0 2
63181: PPUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 30
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 30
63197: PUSH
63198: LD_INT 3
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: LIST
63209: PPUSH
63210: CALL_OW 72
63214: ST_TO_ADDR
63215: GO 63349
63217: LD_INT 4
63219: DOUBLE
63220: EQUAL
63221: IFTRUE 63225
63223: GO 63282
63225: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
63226: LD_ADDR_VAR 0 8
63230: PUSH
63231: LD_VAR 0 2
63235: PPUSH
63236: LD_INT 2
63238: PUSH
63239: LD_INT 30
63241: PUSH
63242: LD_INT 6
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 30
63251: PUSH
63252: LD_INT 7
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 30
63261: PUSH
63262: LD_INT 8
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: PPUSH
63275: CALL_OW 72
63279: ST_TO_ADDR
63280: GO 63349
63282: LD_INT 5
63284: DOUBLE
63285: EQUAL
63286: IFTRUE 63302
63288: LD_INT 8
63290: DOUBLE
63291: EQUAL
63292: IFTRUE 63302
63294: LD_INT 9
63296: DOUBLE
63297: EQUAL
63298: IFTRUE 63302
63300: GO 63348
63302: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
63303: LD_ADDR_VAR 0 8
63307: PUSH
63308: LD_VAR 0 2
63312: PPUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 30
63318: PUSH
63319: LD_INT 4
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 30
63328: PUSH
63329: LD_INT 5
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: PPUSH
63341: CALL_OW 72
63345: ST_TO_ADDR
63346: GO 63349
63348: POP
// if not tmp then
63349: LD_VAR 0 8
63353: NOT
63354: IFFALSE 63358
// exit ;
63356: GO 63860
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
63358: LD_VAR 0 4
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: LD_INT 15
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: IN
63373: PUSH
63374: LD_EXP 23
63378: PUSH
63379: LD_VAR 0 1
63383: ARRAY
63384: AND
63385: IFFALSE 63541
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
63387: LD_ADDR_VAR 0 9
63391: PUSH
63392: LD_EXP 23
63396: PUSH
63397: LD_VAR 0 1
63401: ARRAY
63402: PUSH
63403: LD_INT 1
63405: ARRAY
63406: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
63407: LD_VAR 0 9
63411: PUSH
63412: LD_EXP 24
63416: PUSH
63417: LD_VAR 0 1
63421: ARRAY
63422: IN
63423: NOT
63424: IFFALSE 63539
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
63426: LD_ADDR_EXP 24
63430: PUSH
63431: LD_EXP 24
63435: PPUSH
63436: LD_VAR 0 1
63440: PUSH
63441: LD_EXP 24
63445: PUSH
63446: LD_VAR 0 1
63450: ARRAY
63451: PUSH
63452: LD_INT 1
63454: PLUS
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PPUSH
63460: LD_VAR 0 9
63464: PPUSH
63465: CALL 9396 0 3
63469: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
63470: LD_ADDR_EXP 23
63474: PUSH
63475: LD_EXP 23
63479: PPUSH
63480: LD_VAR 0 1
63484: PPUSH
63485: LD_EXP 23
63489: PUSH
63490: LD_VAR 0 1
63494: ARRAY
63495: PUSH
63496: LD_VAR 0 9
63500: DIFF
63501: PPUSH
63502: CALL_OW 1
63506: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
63507: LD_VAR 0 3
63511: PPUSH
63512: LD_EXP 24
63516: PUSH
63517: LD_VAR 0 1
63521: ARRAY
63522: PUSH
63523: LD_EXP 24
63527: PUSH
63528: LD_VAR 0 1
63532: ARRAY
63533: ARRAY
63534: PPUSH
63535: CALL_OW 120
// end ; exit ;
63539: GO 63860
// end ; if tmp > 1 then
63541: LD_VAR 0 8
63545: PUSH
63546: LD_INT 1
63548: GREATER
63549: IFFALSE 63653
// for i = 2 to tmp do
63551: LD_ADDR_VAR 0 6
63555: PUSH
63556: DOUBLE
63557: LD_INT 2
63559: DEC
63560: ST_TO_ADDR
63561: LD_VAR 0 8
63565: PUSH
63566: FOR_TO
63567: IFFALSE 63651
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
63569: LD_VAR 0 8
63573: PUSH
63574: LD_VAR 0 6
63578: ARRAY
63579: PPUSH
63580: CALL_OW 461
63584: PUSH
63585: LD_INT 6
63587: EQUAL
63588: IFFALSE 63649
// begin x := tmp [ i ] ;
63590: LD_ADDR_VAR 0 9
63594: PUSH
63595: LD_VAR 0 8
63599: PUSH
63600: LD_VAR 0 6
63604: ARRAY
63605: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
63606: LD_ADDR_VAR 0 8
63610: PUSH
63611: LD_VAR 0 8
63615: PPUSH
63616: LD_VAR 0 6
63620: PPUSH
63621: CALL_OW 3
63625: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
63626: LD_ADDR_VAR 0 8
63630: PUSH
63631: LD_VAR 0 8
63635: PPUSH
63636: LD_INT 1
63638: PPUSH
63639: LD_VAR 0 9
63643: PPUSH
63644: CALL_OW 2
63648: ST_TO_ADDR
// end ;
63649: GO 63566
63651: POP
63652: POP
// for i in tmp do
63653: LD_ADDR_VAR 0 6
63657: PUSH
63658: LD_VAR 0 8
63662: PUSH
63663: FOR_IN
63664: IFFALSE 63733
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
63666: LD_VAR 0 6
63670: PPUSH
63671: CALL_OW 313
63675: PUSH
63676: LD_INT 6
63678: LESS
63679: PUSH
63680: LD_VAR 0 6
63684: PPUSH
63685: CALL_OW 266
63689: PUSH
63690: LD_INT 31
63692: PUSH
63693: LD_INT 32
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: IN
63700: NOT
63701: AND
63702: PUSH
63703: LD_VAR 0 6
63707: PPUSH
63708: CALL_OW 313
63712: PUSH
63713: LD_INT 0
63715: EQUAL
63716: OR
63717: IFFALSE 63731
// begin j := i ;
63719: LD_ADDR_VAR 0 7
63723: PUSH
63724: LD_VAR 0 6
63728: ST_TO_ADDR
// break ;
63729: GO 63733
// end ; end ;
63731: GO 63663
63733: POP
63734: POP
// if j then
63735: LD_VAR 0 7
63739: IFFALSE 63757
// ComEnterUnit ( unit , j ) else
63741: LD_VAR 0 3
63745: PPUSH
63746: LD_VAR 0 7
63750: PPUSH
63751: CALL_OW 120
63755: GO 63860
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63757: LD_ADDR_VAR 0 10
63761: PUSH
63762: LD_VAR 0 2
63766: PPUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 30
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 30
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: PPUSH
63795: CALL_OW 72
63799: ST_TO_ADDR
// if depot then
63800: LD_VAR 0 10
63804: IFFALSE 63860
// begin depot := NearestUnitToUnit ( depot , unit ) ;
63806: LD_ADDR_VAR 0 10
63810: PUSH
63811: LD_VAR 0 10
63815: PPUSH
63816: LD_VAR 0 3
63820: PPUSH
63821: CALL_OW 74
63825: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
63826: LD_VAR 0 3
63830: PPUSH
63831: LD_VAR 0 10
63835: PPUSH
63836: CALL_OW 296
63840: PUSH
63841: LD_INT 10
63843: GREATER
63844: IFFALSE 63860
// ComStandNearbyBuilding ( unit , depot ) ;
63846: LD_VAR 0 3
63850: PPUSH
63851: LD_VAR 0 10
63855: PPUSH
63856: CALL 6010 0 2
// end ; end ; end ;
63860: LD_VAR 0 5
63864: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
63865: LD_INT 0
63867: PPUSH
63868: PPUSH
63869: PPUSH
63870: PPUSH
// if not mc_bases then
63871: LD_EXP 14
63875: NOT
63876: IFFALSE 63880
// exit ;
63878: GO 64119
// for i = 1 to mc_bases do
63880: LD_ADDR_VAR 0 2
63884: PUSH
63885: DOUBLE
63886: LD_INT 1
63888: DEC
63889: ST_TO_ADDR
63890: LD_EXP 14
63894: PUSH
63895: FOR_TO
63896: IFFALSE 64117
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
63898: LD_ADDR_VAR 0 4
63902: PUSH
63903: LD_EXP 14
63907: PUSH
63908: LD_VAR 0 2
63912: ARRAY
63913: PPUSH
63914: LD_INT 21
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PPUSH
63924: CALL_OW 72
63928: PUSH
63929: LD_EXP 43
63933: PUSH
63934: LD_VAR 0 2
63938: ARRAY
63939: UNION
63940: ST_TO_ADDR
// if not tmp then
63941: LD_VAR 0 4
63945: NOT
63946: IFFALSE 63950
// continue ;
63948: GO 63895
// for j in tmp do
63950: LD_ADDR_VAR 0 3
63954: PUSH
63955: LD_VAR 0 4
63959: PUSH
63960: FOR_IN
63961: IFFALSE 64113
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
63963: LD_VAR 0 3
63967: PPUSH
63968: CALL_OW 110
63972: NOT
63973: PUSH
63974: LD_VAR 0 3
63978: PPUSH
63979: CALL_OW 314
63983: NOT
63984: AND
63985: PUSH
63986: LD_VAR 0 3
63990: PPUSH
63991: CALL_OW 311
63995: NOT
63996: AND
63997: PUSH
63998: LD_VAR 0 3
64002: PPUSH
64003: CALL_OW 310
64007: NOT
64008: AND
64009: PUSH
64010: LD_VAR 0 3
64014: PUSH
64015: LD_EXP 17
64019: PUSH
64020: LD_VAR 0 2
64024: ARRAY
64025: PUSH
64026: LD_INT 1
64028: ARRAY
64029: IN
64030: NOT
64031: AND
64032: PUSH
64033: LD_VAR 0 3
64037: PUSH
64038: LD_EXP 17
64042: PUSH
64043: LD_VAR 0 2
64047: ARRAY
64048: PUSH
64049: LD_INT 2
64051: ARRAY
64052: IN
64053: NOT
64054: AND
64055: PUSH
64056: LD_VAR 0 3
64060: PUSH
64061: LD_EXP 26
64065: PUSH
64066: LD_VAR 0 2
64070: ARRAY
64071: IN
64072: NOT
64073: AND
64074: IFFALSE 64111
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
64076: LD_VAR 0 2
64080: PPUSH
64081: LD_EXP 14
64085: PUSH
64086: LD_VAR 0 2
64090: ARRAY
64091: PPUSH
64092: LD_VAR 0 3
64096: PPUSH
64097: LD_VAR 0 3
64101: PPUSH
64102: CALL_OW 257
64106: PPUSH
64107: CALL 62883 0 4
// end ;
64111: GO 63960
64113: POP
64114: POP
// end ;
64115: GO 63895
64117: POP
64118: POP
// end ;
64119: LD_VAR 0 1
64123: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
64124: LD_INT 0
64126: PPUSH
64127: PPUSH
64128: PPUSH
64129: PPUSH
64130: PPUSH
64131: PPUSH
// if not mc_bases [ base ] then
64132: LD_EXP 14
64136: PUSH
64137: LD_VAR 0 1
64141: ARRAY
64142: NOT
64143: IFFALSE 64147
// exit ;
64145: GO 64329
// tmp := [ ] ;
64147: LD_ADDR_VAR 0 6
64151: PUSH
64152: EMPTY
64153: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
64154: LD_ADDR_VAR 0 7
64158: PUSH
64159: LD_VAR 0 3
64163: PPUSH
64164: LD_INT 0
64166: PPUSH
64167: CALL_OW 517
64171: ST_TO_ADDR
// if not list then
64172: LD_VAR 0 7
64176: NOT
64177: IFFALSE 64181
// exit ;
64179: GO 64329
// for i = 1 to amount do
64181: LD_ADDR_VAR 0 5
64185: PUSH
64186: DOUBLE
64187: LD_INT 1
64189: DEC
64190: ST_TO_ADDR
64191: LD_VAR 0 2
64195: PUSH
64196: FOR_TO
64197: IFFALSE 64277
// begin x := rand ( 1 , list [ 1 ] ) ;
64199: LD_ADDR_VAR 0 8
64203: PUSH
64204: LD_INT 1
64206: PPUSH
64207: LD_VAR 0 7
64211: PUSH
64212: LD_INT 1
64214: ARRAY
64215: PPUSH
64216: CALL_OW 12
64220: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
64221: LD_ADDR_VAR 0 6
64225: PUSH
64226: LD_VAR 0 6
64230: PPUSH
64231: LD_VAR 0 5
64235: PPUSH
64236: LD_VAR 0 7
64240: PUSH
64241: LD_INT 1
64243: ARRAY
64244: PUSH
64245: LD_VAR 0 8
64249: ARRAY
64250: PUSH
64251: LD_VAR 0 7
64255: PUSH
64256: LD_INT 2
64258: ARRAY
64259: PUSH
64260: LD_VAR 0 8
64264: ARRAY
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PPUSH
64270: CALL_OW 1
64274: ST_TO_ADDR
// end ;
64275: GO 64196
64277: POP
64278: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
64279: LD_ADDR_EXP 27
64283: PUSH
64284: LD_EXP 27
64288: PPUSH
64289: LD_VAR 0 1
64293: PPUSH
64294: LD_VAR 0 6
64298: PPUSH
64299: CALL_OW 1
64303: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
64304: LD_ADDR_EXP 29
64308: PUSH
64309: LD_EXP 29
64313: PPUSH
64314: LD_VAR 0 1
64318: PPUSH
64319: LD_VAR 0 3
64323: PPUSH
64324: CALL_OW 1
64328: ST_TO_ADDR
// end ;
64329: LD_VAR 0 4
64333: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
64334: LD_INT 0
64336: PPUSH
// if not mc_bases [ base ] then
64337: LD_EXP 14
64341: PUSH
64342: LD_VAR 0 1
64346: ARRAY
64347: NOT
64348: IFFALSE 64352
// exit ;
64350: GO 64377
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
64352: LD_ADDR_EXP 19
64356: PUSH
64357: LD_EXP 19
64361: PPUSH
64362: LD_VAR 0 1
64366: PPUSH
64367: LD_VAR 0 2
64371: PPUSH
64372: CALL_OW 1
64376: ST_TO_ADDR
// end ;
64377: LD_VAR 0 3
64381: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
64382: LD_INT 0
64384: PPUSH
// if not mc_bases [ base ] then
64385: LD_EXP 14
64389: PUSH
64390: LD_VAR 0 1
64394: ARRAY
64395: NOT
64396: IFFALSE 64400
// exit ;
64398: GO 64437
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
64400: LD_ADDR_EXP 19
64404: PUSH
64405: LD_EXP 19
64409: PPUSH
64410: LD_VAR 0 1
64414: PPUSH
64415: LD_EXP 19
64419: PUSH
64420: LD_VAR 0 1
64424: ARRAY
64425: PUSH
64426: LD_VAR 0 2
64430: UNION
64431: PPUSH
64432: CALL_OW 1
64436: ST_TO_ADDR
// end ;
64437: LD_VAR 0 3
64441: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
64442: LD_INT 0
64444: PPUSH
// if not mc_bases [ base ] then
64445: LD_EXP 14
64449: PUSH
64450: LD_VAR 0 1
64454: ARRAY
64455: NOT
64456: IFFALSE 64460
// exit ;
64458: GO 64485
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
64460: LD_ADDR_EXP 35
64464: PUSH
64465: LD_EXP 35
64469: PPUSH
64470: LD_VAR 0 1
64474: PPUSH
64475: LD_VAR 0 2
64479: PPUSH
64480: CALL_OW 1
64484: ST_TO_ADDR
// end ;
64485: LD_VAR 0 3
64489: RET
// export function MC_InsertProduceList ( base , components ) ; begin
64490: LD_INT 0
64492: PPUSH
// if not mc_bases [ base ] then
64493: LD_EXP 14
64497: PUSH
64498: LD_VAR 0 1
64502: ARRAY
64503: NOT
64504: IFFALSE 64508
// exit ;
64506: GO 64545
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
64508: LD_ADDR_EXP 35
64512: PUSH
64513: LD_EXP 35
64517: PPUSH
64518: LD_VAR 0 1
64522: PPUSH
64523: LD_EXP 35
64527: PUSH
64528: LD_VAR 0 1
64532: ARRAY
64533: PUSH
64534: LD_VAR 0 2
64538: ADD
64539: PPUSH
64540: CALL_OW 1
64544: ST_TO_ADDR
// end ;
64545: LD_VAR 0 3
64549: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
64550: LD_INT 0
64552: PPUSH
// if not mc_bases [ base ] then
64553: LD_EXP 14
64557: PUSH
64558: LD_VAR 0 1
64562: ARRAY
64563: NOT
64564: IFFALSE 64568
// exit ;
64566: GO 64622
// mc_defender := Replace ( mc_defender , base , deflist ) ;
64568: LD_ADDR_EXP 36
64572: PUSH
64573: LD_EXP 36
64577: PPUSH
64578: LD_VAR 0 1
64582: PPUSH
64583: LD_VAR 0 2
64587: PPUSH
64588: CALL_OW 1
64592: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
64593: LD_ADDR_EXP 25
64597: PUSH
64598: LD_EXP 25
64602: PPUSH
64603: LD_VAR 0 1
64607: PPUSH
64608: LD_VAR 0 2
64612: PUSH
64613: LD_INT 0
64615: PLUS
64616: PPUSH
64617: CALL_OW 1
64621: ST_TO_ADDR
// end ;
64622: LD_VAR 0 3
64626: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
64627: LD_INT 0
64629: PPUSH
// if not mc_bases [ base ] then
64630: LD_EXP 14
64634: PUSH
64635: LD_VAR 0 1
64639: ARRAY
64640: NOT
64641: IFFALSE 64645
// exit ;
64643: GO 64670
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
64645: LD_ADDR_EXP 25
64649: PUSH
64650: LD_EXP 25
64654: PPUSH
64655: LD_VAR 0 1
64659: PPUSH
64660: LD_VAR 0 2
64664: PPUSH
64665: CALL_OW 1
64669: ST_TO_ADDR
// end ;
64670: LD_VAR 0 3
64674: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
64675: LD_INT 0
64677: PPUSH
64678: PPUSH
64679: PPUSH
64680: PPUSH
// if not mc_bases [ base ] then
64681: LD_EXP 14
64685: PUSH
64686: LD_VAR 0 1
64690: ARRAY
64691: NOT
64692: IFFALSE 64696
// exit ;
64694: GO 64761
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
64696: LD_ADDR_EXP 34
64700: PUSH
64701: LD_EXP 34
64705: PPUSH
64706: LD_VAR 0 1
64710: PUSH
64711: LD_EXP 34
64715: PUSH
64716: LD_VAR 0 1
64720: ARRAY
64721: PUSH
64722: LD_INT 1
64724: PLUS
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PPUSH
64730: LD_VAR 0 1
64734: PUSH
64735: LD_VAR 0 2
64739: PUSH
64740: LD_VAR 0 3
64744: PUSH
64745: LD_VAR 0 4
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: PPUSH
64756: CALL 9396 0 3
64760: ST_TO_ADDR
// end ;
64761: LD_VAR 0 5
64765: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
64766: LD_INT 0
64768: PPUSH
// if not mc_bases [ base ] then
64769: LD_EXP 14
64773: PUSH
64774: LD_VAR 0 1
64778: ARRAY
64779: NOT
64780: IFFALSE 64784
// exit ;
64782: GO 64809
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
64784: LD_ADDR_EXP 51
64788: PUSH
64789: LD_EXP 51
64793: PPUSH
64794: LD_VAR 0 1
64798: PPUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: CALL_OW 1
64808: ST_TO_ADDR
// end ;
64809: LD_VAR 0 3
64813: RET
// export function MC_GetMinesField ( base ) ; begin
64814: LD_INT 0
64816: PPUSH
// result := mc_mines [ base ] ;
64817: LD_ADDR_VAR 0 2
64821: PUSH
64822: LD_EXP 27
64826: PUSH
64827: LD_VAR 0 1
64831: ARRAY
64832: ST_TO_ADDR
// end ;
64833: LD_VAR 0 2
64837: RET
// export function MC_GetProduceList ( base ) ; begin
64838: LD_INT 0
64840: PPUSH
// result := mc_produce [ base ] ;
64841: LD_ADDR_VAR 0 2
64845: PUSH
64846: LD_EXP 35
64850: PUSH
64851: LD_VAR 0 1
64855: ARRAY
64856: ST_TO_ADDR
// end ;
64857: LD_VAR 0 2
64861: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
64862: LD_INT 0
64864: PPUSH
64865: PPUSH
// if not mc_bases then
64866: LD_EXP 14
64870: NOT
64871: IFFALSE 64875
// exit ;
64873: GO 64940
// if mc_bases [ base ] then
64875: LD_EXP 14
64879: PUSH
64880: LD_VAR 0 1
64884: ARRAY
64885: IFFALSE 64940
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64887: LD_ADDR_VAR 0 3
64891: PUSH
64892: LD_EXP 14
64896: PUSH
64897: LD_VAR 0 1
64901: ARRAY
64902: PPUSH
64903: LD_INT 30
64905: PUSH
64906: LD_VAR 0 2
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PPUSH
64915: CALL_OW 72
64919: ST_TO_ADDR
// if result then
64920: LD_VAR 0 3
64924: IFFALSE 64940
// result := result [ 1 ] ;
64926: LD_ADDR_VAR 0 3
64930: PUSH
64931: LD_VAR 0 3
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: ST_TO_ADDR
// end ; end ;
64940: LD_VAR 0 3
64944: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
64945: LD_INT 0
64947: PPUSH
64948: PPUSH
// if not mc_bases then
64949: LD_EXP 14
64953: NOT
64954: IFFALSE 64958
// exit ;
64956: GO 65003
// if mc_bases [ base ] then
64958: LD_EXP 14
64962: PUSH
64963: LD_VAR 0 1
64967: ARRAY
64968: IFFALSE 65003
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64970: LD_ADDR_VAR 0 3
64974: PUSH
64975: LD_EXP 14
64979: PUSH
64980: LD_VAR 0 1
64984: ARRAY
64985: PPUSH
64986: LD_INT 30
64988: PUSH
64989: LD_VAR 0 2
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PPUSH
64998: CALL_OW 72
65002: ST_TO_ADDR
// end ;
65003: LD_VAR 0 3
65007: RET
// export function MC_SetTame ( base , area ) ; begin
65008: LD_INT 0
65010: PPUSH
// if not mc_bases or not base then
65011: LD_EXP 14
65015: NOT
65016: PUSH
65017: LD_VAR 0 1
65021: NOT
65022: OR
65023: IFFALSE 65027
// exit ;
65025: GO 65052
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
65027: LD_ADDR_EXP 42
65031: PUSH
65032: LD_EXP 42
65036: PPUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: LD_VAR 0 2
65046: PPUSH
65047: CALL_OW 1
65051: ST_TO_ADDR
// end ;
65052: LD_VAR 0 3
65056: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
65057: LD_INT 0
65059: PPUSH
65060: PPUSH
// if not mc_bases or not base then
65061: LD_EXP 14
65065: NOT
65066: PUSH
65067: LD_VAR 0 1
65071: NOT
65072: OR
65073: IFFALSE 65077
// exit ;
65075: GO 65179
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
65077: LD_ADDR_VAR 0 4
65081: PUSH
65082: LD_EXP 14
65086: PUSH
65087: LD_VAR 0 1
65091: ARRAY
65092: PPUSH
65093: LD_INT 30
65095: PUSH
65096: LD_VAR 0 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PPUSH
65105: CALL_OW 72
65109: ST_TO_ADDR
// if not tmp then
65110: LD_VAR 0 4
65114: NOT
65115: IFFALSE 65119
// exit ;
65117: GO 65179
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
65119: LD_ADDR_EXP 46
65123: PUSH
65124: LD_EXP 46
65128: PPUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: LD_EXP 46
65138: PUSH
65139: LD_VAR 0 1
65143: ARRAY
65144: PPUSH
65145: LD_EXP 46
65149: PUSH
65150: LD_VAR 0 1
65154: ARRAY
65155: PUSH
65156: LD_INT 1
65158: PLUS
65159: PPUSH
65160: LD_VAR 0 4
65164: PUSH
65165: LD_INT 1
65167: ARRAY
65168: PPUSH
65169: CALL_OW 2
65173: PPUSH
65174: CALL_OW 1
65178: ST_TO_ADDR
// end ;
65179: LD_VAR 0 3
65183: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
65184: LD_INT 0
65186: PPUSH
65187: PPUSH
// if not mc_bases or not base or not kinds then
65188: LD_EXP 14
65192: NOT
65193: PUSH
65194: LD_VAR 0 1
65198: NOT
65199: OR
65200: PUSH
65201: LD_VAR 0 2
65205: NOT
65206: OR
65207: IFFALSE 65211
// exit ;
65209: GO 65272
// for i in kinds do
65211: LD_ADDR_VAR 0 4
65215: PUSH
65216: LD_VAR 0 2
65220: PUSH
65221: FOR_IN
65222: IFFALSE 65270
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
65224: LD_ADDR_EXP 48
65228: PUSH
65229: LD_EXP 48
65233: PPUSH
65234: LD_VAR 0 1
65238: PUSH
65239: LD_EXP 48
65243: PUSH
65244: LD_VAR 0 1
65248: ARRAY
65249: PUSH
65250: LD_INT 1
65252: PLUS
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PPUSH
65258: LD_VAR 0 4
65262: PPUSH
65263: CALL 9396 0 3
65267: ST_TO_ADDR
65268: GO 65221
65270: POP
65271: POP
// end ;
65272: LD_VAR 0 3
65276: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
65277: LD_INT 0
65279: PPUSH
// if not mc_bases or not base or not areas then
65280: LD_EXP 14
65284: NOT
65285: PUSH
65286: LD_VAR 0 1
65290: NOT
65291: OR
65292: PUSH
65293: LD_VAR 0 2
65297: NOT
65298: OR
65299: IFFALSE 65303
// exit ;
65301: GO 65328
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
65303: LD_ADDR_EXP 32
65307: PUSH
65308: LD_EXP 32
65312: PPUSH
65313: LD_VAR 0 1
65317: PPUSH
65318: LD_VAR 0 2
65322: PPUSH
65323: CALL_OW 1
65327: ST_TO_ADDR
// end ;
65328: LD_VAR 0 3
65332: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
65333: LD_INT 0
65335: PPUSH
// if not mc_bases or not base or not teleports_exit then
65336: LD_EXP 14
65340: NOT
65341: PUSH
65342: LD_VAR 0 1
65346: NOT
65347: OR
65348: PUSH
65349: LD_VAR 0 2
65353: NOT
65354: OR
65355: IFFALSE 65359
// exit ;
65357: GO 65384
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
65359: LD_ADDR_EXP 49
65363: PUSH
65364: LD_EXP 49
65368: PPUSH
65369: LD_VAR 0 1
65373: PPUSH
65374: LD_VAR 0 2
65378: PPUSH
65379: CALL_OW 1
65383: ST_TO_ADDR
// end ;
65384: LD_VAR 0 3
65388: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
65389: LD_INT 0
65391: PPUSH
65392: PPUSH
65393: PPUSH
// if not mc_bases or not base or not ext_list then
65394: LD_EXP 14
65398: NOT
65399: PUSH
65400: LD_VAR 0 1
65404: NOT
65405: OR
65406: PUSH
65407: LD_VAR 0 5
65411: NOT
65412: OR
65413: IFFALSE 65417
// exit ;
65415: GO 65590
// tmp := GetFacExtXYD ( x , y , d ) ;
65417: LD_ADDR_VAR 0 8
65421: PUSH
65422: LD_VAR 0 2
65426: PPUSH
65427: LD_VAR 0 3
65431: PPUSH
65432: LD_VAR 0 4
65436: PPUSH
65437: CALL 38075 0 3
65441: ST_TO_ADDR
// if not tmp then
65442: LD_VAR 0 8
65446: NOT
65447: IFFALSE 65451
// exit ;
65449: GO 65590
// for i in tmp do
65451: LD_ADDR_VAR 0 7
65455: PUSH
65456: LD_VAR 0 8
65460: PUSH
65461: FOR_IN
65462: IFFALSE 65588
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
65464: LD_ADDR_EXP 19
65468: PUSH
65469: LD_EXP 19
65473: PPUSH
65474: LD_VAR 0 1
65478: PPUSH
65479: LD_EXP 19
65483: PUSH
65484: LD_VAR 0 1
65488: ARRAY
65489: PPUSH
65490: LD_EXP 19
65494: PUSH
65495: LD_VAR 0 1
65499: ARRAY
65500: PUSH
65501: LD_INT 1
65503: PLUS
65504: PPUSH
65505: LD_VAR 0 5
65509: PUSH
65510: LD_INT 1
65512: ARRAY
65513: PUSH
65514: LD_VAR 0 7
65518: PUSH
65519: LD_INT 1
65521: ARRAY
65522: PUSH
65523: LD_VAR 0 7
65527: PUSH
65528: LD_INT 2
65530: ARRAY
65531: PUSH
65532: LD_VAR 0 7
65536: PUSH
65537: LD_INT 3
65539: ARRAY
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: PPUSH
65547: CALL_OW 2
65551: PPUSH
65552: CALL_OW 1
65556: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
65557: LD_ADDR_VAR 0 5
65561: PUSH
65562: LD_VAR 0 5
65566: PPUSH
65567: LD_INT 1
65569: PPUSH
65570: CALL_OW 3
65574: ST_TO_ADDR
// if not ext_list then
65575: LD_VAR 0 5
65579: NOT
65580: IFFALSE 65586
// exit ;
65582: POP
65583: POP
65584: GO 65590
// end ;
65586: GO 65461
65588: POP
65589: POP
// end ;
65590: LD_VAR 0 6
65594: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
65595: LD_INT 0
65597: PPUSH
// if not mc_bases or not base or not weapon_list then
65598: LD_EXP 14
65602: NOT
65603: PUSH
65604: LD_VAR 0 1
65608: NOT
65609: OR
65610: PUSH
65611: LD_VAR 0 2
65615: NOT
65616: OR
65617: IFFALSE 65621
// exit ;
65619: GO 65646
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
65621: LD_ADDR_EXP 53
65625: PUSH
65626: LD_EXP 53
65630: PPUSH
65631: LD_VAR 0 1
65635: PPUSH
65636: LD_VAR 0 2
65640: PPUSH
65641: CALL_OW 1
65645: ST_TO_ADDR
// end ;
65646: LD_VAR 0 3
65650: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
65651: LD_INT 0
65653: PPUSH
// if not mc_bases or not base or not tech_list then
65654: LD_EXP 14
65658: NOT
65659: PUSH
65660: LD_VAR 0 1
65664: NOT
65665: OR
65666: PUSH
65667: LD_VAR 0 2
65671: NOT
65672: OR
65673: IFFALSE 65677
// exit ;
65675: GO 65702
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
65677: LD_ADDR_EXP 41
65681: PUSH
65682: LD_EXP 41
65686: PPUSH
65687: LD_VAR 0 1
65691: PPUSH
65692: LD_VAR 0 2
65696: PPUSH
65697: CALL_OW 1
65701: ST_TO_ADDR
// end ;
65702: LD_VAR 0 3
65706: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
65707: LD_INT 0
65709: PPUSH
// if not mc_bases or not parking_area or not base then
65710: LD_EXP 14
65714: NOT
65715: PUSH
65716: LD_VAR 0 2
65720: NOT
65721: OR
65722: PUSH
65723: LD_VAR 0 1
65727: NOT
65728: OR
65729: IFFALSE 65733
// exit ;
65731: GO 65758
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
65733: LD_ADDR_EXP 38
65737: PUSH
65738: LD_EXP 38
65742: PPUSH
65743: LD_VAR 0 1
65747: PPUSH
65748: LD_VAR 0 2
65752: PPUSH
65753: CALL_OW 1
65757: ST_TO_ADDR
// end ;
65758: LD_VAR 0 3
65762: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
65763: LD_INT 0
65765: PPUSH
// if not mc_bases or not base or not scan_area then
65766: LD_EXP 14
65770: NOT
65771: PUSH
65772: LD_VAR 0 1
65776: NOT
65777: OR
65778: PUSH
65779: LD_VAR 0 2
65783: NOT
65784: OR
65785: IFFALSE 65789
// exit ;
65787: GO 65814
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
65789: LD_ADDR_EXP 39
65793: PUSH
65794: LD_EXP 39
65798: PPUSH
65799: LD_VAR 0 1
65803: PPUSH
65804: LD_VAR 0 2
65808: PPUSH
65809: CALL_OW 1
65813: ST_TO_ADDR
// end ;
65814: LD_VAR 0 3
65818: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
65819: LD_INT 0
65821: PPUSH
65822: PPUSH
// if not mc_bases or not base then
65823: LD_EXP 14
65827: NOT
65828: PUSH
65829: LD_VAR 0 1
65833: NOT
65834: OR
65835: IFFALSE 65839
// exit ;
65837: GO 65903
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
65839: LD_ADDR_VAR 0 3
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: LD_INT 3
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: LD_INT 11
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
65866: LD_ADDR_EXP 41
65870: PUSH
65871: LD_EXP 41
65875: PPUSH
65876: LD_VAR 0 1
65880: PPUSH
65881: LD_EXP 41
65885: PUSH
65886: LD_VAR 0 1
65890: ARRAY
65891: PUSH
65892: LD_VAR 0 3
65896: DIFF
65897: PPUSH
65898: CALL_OW 1
65902: ST_TO_ADDR
// end ;
65903: LD_VAR 0 2
65907: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
65908: LD_INT 0
65910: PPUSH
// result := mc_vehicles [ base ] ;
65911: LD_ADDR_VAR 0 3
65915: PUSH
65916: LD_EXP 33
65920: PUSH
65921: LD_VAR 0 1
65925: ARRAY
65926: ST_TO_ADDR
// if onlyCombat then
65927: LD_VAR 0 2
65931: IFFALSE 66096
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
65933: LD_ADDR_VAR 0 3
65937: PUSH
65938: LD_VAR 0 3
65942: PUSH
65943: LD_VAR 0 3
65947: PPUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 34
65953: PUSH
65954: LD_INT 12
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 34
65963: PUSH
65964: LD_INT 51
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 34
65973: PUSH
65974: LD_EXP 58
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 34
65985: PUSH
65986: LD_INT 32
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 34
65995: PUSH
65996: LD_INT 13
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 34
66005: PUSH
66006: LD_INT 52
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 34
66015: PUSH
66016: LD_INT 14
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 34
66025: PUSH
66026: LD_INT 53
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 34
66035: PUSH
66036: LD_EXP 57
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 34
66047: PUSH
66048: LD_INT 31
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 34
66057: PUSH
66058: LD_INT 48
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 34
66067: PUSH
66068: LD_INT 8
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: PPUSH
66090: CALL_OW 72
66094: DIFF
66095: ST_TO_ADDR
// end ; end_of_file
66096: LD_VAR 0 3
66100: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
66101: LD_INT 0
66103: PPUSH
66104: PPUSH
66105: PPUSH
// if not mc_bases or not skirmish then
66106: LD_EXP 14
66110: NOT
66111: PUSH
66112: LD_EXP 12
66116: NOT
66117: OR
66118: IFFALSE 66122
// exit ;
66120: GO 66287
// for i = 1 to mc_bases do
66122: LD_ADDR_VAR 0 4
66126: PUSH
66127: DOUBLE
66128: LD_INT 1
66130: DEC
66131: ST_TO_ADDR
66132: LD_EXP 14
66136: PUSH
66137: FOR_TO
66138: IFFALSE 66285
// begin if sci in mc_bases [ i ] then
66140: LD_VAR 0 2
66144: PUSH
66145: LD_EXP 14
66149: PUSH
66150: LD_VAR 0 4
66154: ARRAY
66155: IN
66156: IFFALSE 66283
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
66158: LD_ADDR_EXP 43
66162: PUSH
66163: LD_EXP 43
66167: PPUSH
66168: LD_VAR 0 4
66172: PUSH
66173: LD_EXP 43
66177: PUSH
66178: LD_VAR 0 4
66182: ARRAY
66183: PUSH
66184: LD_INT 1
66186: PLUS
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PPUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: CALL 9396 0 3
66201: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
66202: LD_ADDR_VAR 0 5
66206: PUSH
66207: LD_EXP 14
66211: PUSH
66212: LD_VAR 0 4
66216: ARRAY
66217: PPUSH
66218: LD_INT 2
66220: PUSH
66221: LD_INT 30
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 30
66233: PUSH
66234: LD_INT 1
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: LIST
66245: PPUSH
66246: CALL_OW 72
66250: PPUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL_OW 74
66260: ST_TO_ADDR
// if tmp then
66261: LD_VAR 0 5
66265: IFFALSE 66281
// ComStandNearbyBuilding ( ape , tmp ) ;
66267: LD_VAR 0 1
66271: PPUSH
66272: LD_VAR 0 5
66276: PPUSH
66277: CALL 6010 0 2
// break ;
66281: GO 66285
// end ; end ;
66283: GO 66137
66285: POP
66286: POP
// end ;
66287: LD_VAR 0 3
66291: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
66292: LD_INT 0
66294: PPUSH
66295: PPUSH
66296: PPUSH
// if not mc_bases or not skirmish then
66297: LD_EXP 14
66301: NOT
66302: PUSH
66303: LD_EXP 12
66307: NOT
66308: OR
66309: IFFALSE 66313
// exit ;
66311: GO 66402
// for i = 1 to mc_bases do
66313: LD_ADDR_VAR 0 4
66317: PUSH
66318: DOUBLE
66319: LD_INT 1
66321: DEC
66322: ST_TO_ADDR
66323: LD_EXP 14
66327: PUSH
66328: FOR_TO
66329: IFFALSE 66400
// begin if building in mc_busy_turret_list [ i ] then
66331: LD_VAR 0 1
66335: PUSH
66336: LD_EXP 24
66340: PUSH
66341: LD_VAR 0 4
66345: ARRAY
66346: IN
66347: IFFALSE 66398
// begin tmp := mc_busy_turret_list [ i ] diff building ;
66349: LD_ADDR_VAR 0 5
66353: PUSH
66354: LD_EXP 24
66358: PUSH
66359: LD_VAR 0 4
66363: ARRAY
66364: PUSH
66365: LD_VAR 0 1
66369: DIFF
66370: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
66371: LD_ADDR_EXP 24
66375: PUSH
66376: LD_EXP 24
66380: PPUSH
66381: LD_VAR 0 4
66385: PPUSH
66386: LD_VAR 0 5
66390: PPUSH
66391: CALL_OW 1
66395: ST_TO_ADDR
// break ;
66396: GO 66400
// end ; end ;
66398: GO 66328
66400: POP
66401: POP
// end ;
66402: LD_VAR 0 3
66406: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
66407: LD_INT 0
66409: PPUSH
66410: PPUSH
66411: PPUSH
// if not mc_bases or not skirmish then
66412: LD_EXP 14
66416: NOT
66417: PUSH
66418: LD_EXP 12
66422: NOT
66423: OR
66424: IFFALSE 66428
// exit ;
66426: GO 66627
// for i = 1 to mc_bases do
66428: LD_ADDR_VAR 0 5
66432: PUSH
66433: DOUBLE
66434: LD_INT 1
66436: DEC
66437: ST_TO_ADDR
66438: LD_EXP 14
66442: PUSH
66443: FOR_TO
66444: IFFALSE 66625
// if building in mc_bases [ i ] then
66446: LD_VAR 0 1
66450: PUSH
66451: LD_EXP 14
66455: PUSH
66456: LD_VAR 0 5
66460: ARRAY
66461: IN
66462: IFFALSE 66623
// begin tmp := mc_bases [ i ] diff building ;
66464: LD_ADDR_VAR 0 6
66468: PUSH
66469: LD_EXP 14
66473: PUSH
66474: LD_VAR 0 5
66478: ARRAY
66479: PUSH
66480: LD_VAR 0 1
66484: DIFF
66485: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
66486: LD_ADDR_EXP 14
66490: PUSH
66491: LD_EXP 14
66495: PPUSH
66496: LD_VAR 0 5
66500: PPUSH
66501: LD_VAR 0 6
66505: PPUSH
66506: CALL_OW 1
66510: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
66511: LD_VAR 0 1
66515: PUSH
66516: LD_EXP 22
66520: PUSH
66521: LD_VAR 0 5
66525: ARRAY
66526: IN
66527: IFFALSE 66566
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
66529: LD_ADDR_EXP 22
66533: PUSH
66534: LD_EXP 22
66538: PPUSH
66539: LD_VAR 0 5
66543: PPUSH
66544: LD_EXP 22
66548: PUSH
66549: LD_VAR 0 5
66553: ARRAY
66554: PUSH
66555: LD_VAR 0 1
66559: DIFF
66560: PPUSH
66561: CALL_OW 1
66565: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
66566: LD_VAR 0 1
66570: PUSH
66571: LD_EXP 23
66575: PUSH
66576: LD_VAR 0 5
66580: ARRAY
66581: IN
66582: IFFALSE 66621
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
66584: LD_ADDR_EXP 23
66588: PUSH
66589: LD_EXP 23
66593: PPUSH
66594: LD_VAR 0 5
66598: PPUSH
66599: LD_EXP 23
66603: PUSH
66604: LD_VAR 0 5
66608: ARRAY
66609: PUSH
66610: LD_VAR 0 1
66614: DIFF
66615: PPUSH
66616: CALL_OW 1
66620: ST_TO_ADDR
// break ;
66621: GO 66625
// end ;
66623: GO 66443
66625: POP
66626: POP
// end ;
66627: LD_VAR 0 4
66631: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
66632: LD_INT 0
66634: PPUSH
66635: PPUSH
66636: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
66637: LD_EXP 14
66641: NOT
66642: PUSH
66643: LD_EXP 12
66647: NOT
66648: OR
66649: PUSH
66650: LD_VAR 0 3
66654: PUSH
66655: LD_EXP 40
66659: IN
66660: NOT
66661: OR
66662: IFFALSE 66666
// exit ;
66664: GO 66789
// for i = 1 to mc_vehicles do
66666: LD_ADDR_VAR 0 6
66670: PUSH
66671: DOUBLE
66672: LD_INT 1
66674: DEC
66675: ST_TO_ADDR
66676: LD_EXP 33
66680: PUSH
66681: FOR_TO
66682: IFFALSE 66787
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
66684: LD_VAR 0 2
66688: PUSH
66689: LD_EXP 33
66693: PUSH
66694: LD_VAR 0 6
66698: ARRAY
66699: IN
66700: PUSH
66701: LD_VAR 0 1
66705: PUSH
66706: LD_EXP 33
66710: PUSH
66711: LD_VAR 0 6
66715: ARRAY
66716: IN
66717: OR
66718: IFFALSE 66785
// begin tmp := mc_vehicles [ i ] diff old ;
66720: LD_ADDR_VAR 0 7
66724: PUSH
66725: LD_EXP 33
66729: PUSH
66730: LD_VAR 0 6
66734: ARRAY
66735: PUSH
66736: LD_VAR 0 2
66740: DIFF
66741: ST_TO_ADDR
// tmp := tmp diff new ;
66742: LD_ADDR_VAR 0 7
66746: PUSH
66747: LD_VAR 0 7
66751: PUSH
66752: LD_VAR 0 1
66756: DIFF
66757: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
66758: LD_ADDR_EXP 33
66762: PUSH
66763: LD_EXP 33
66767: PPUSH
66768: LD_VAR 0 6
66772: PPUSH
66773: LD_VAR 0 7
66777: PPUSH
66778: CALL_OW 1
66782: ST_TO_ADDR
// break ;
66783: GO 66787
// end ;
66785: GO 66681
66787: POP
66788: POP
// end ;
66789: LD_VAR 0 5
66793: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
66794: LD_INT 0
66796: PPUSH
66797: PPUSH
66798: PPUSH
66799: PPUSH
// if not mc_bases or not skirmish then
66800: LD_EXP 14
66804: NOT
66805: PUSH
66806: LD_EXP 12
66810: NOT
66811: OR
66812: IFFALSE 66816
// exit ;
66814: GO 67193
// side := GetSide ( vehicle ) ;
66816: LD_ADDR_VAR 0 5
66820: PUSH
66821: LD_VAR 0 1
66825: PPUSH
66826: CALL_OW 255
66830: ST_TO_ADDR
// for i = 1 to mc_bases do
66831: LD_ADDR_VAR 0 4
66835: PUSH
66836: DOUBLE
66837: LD_INT 1
66839: DEC
66840: ST_TO_ADDR
66841: LD_EXP 14
66845: PUSH
66846: FOR_TO
66847: IFFALSE 67191
// begin if factory in mc_bases [ i ] then
66849: LD_VAR 0 2
66853: PUSH
66854: LD_EXP 14
66858: PUSH
66859: LD_VAR 0 4
66863: ARRAY
66864: IN
66865: IFFALSE 67189
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
66867: LD_EXP 36
66871: PUSH
66872: LD_VAR 0 4
66876: ARRAY
66877: PUSH
66878: LD_EXP 25
66882: PUSH
66883: LD_VAR 0 4
66887: ARRAY
66888: LESS
66889: PUSH
66890: LD_VAR 0 1
66894: PPUSH
66895: CALL_OW 264
66899: PUSH
66900: LD_INT 31
66902: PUSH
66903: LD_INT 32
66905: PUSH
66906: LD_INT 51
66908: PUSH
66909: LD_EXP 58
66913: PUSH
66914: LD_INT 12
66916: PUSH
66917: LD_INT 30
66919: PUSH
66920: LD_EXP 57
66924: PUSH
66925: LD_INT 11
66927: PUSH
66928: LD_INT 53
66930: PUSH
66931: LD_INT 14
66933: PUSH
66934: LD_EXP 61
66938: PUSH
66939: LD_INT 29
66941: PUSH
66942: LD_EXP 59
66946: PUSH
66947: LD_INT 13
66949: PUSH
66950: LD_INT 52
66952: PUSH
66953: LD_INT 48
66955: PUSH
66956: LD_INT 8
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: IN
66978: NOT
66979: AND
66980: IFFALSE 67028
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
66982: LD_ADDR_EXP 36
66986: PUSH
66987: LD_EXP 36
66991: PPUSH
66992: LD_VAR 0 4
66996: PUSH
66997: LD_EXP 36
67001: PUSH
67002: LD_VAR 0 4
67006: ARRAY
67007: PUSH
67008: LD_INT 1
67010: PLUS
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PPUSH
67016: LD_VAR 0 1
67020: PPUSH
67021: CALL 9396 0 3
67025: ST_TO_ADDR
67026: GO 67072
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
67028: LD_ADDR_EXP 33
67032: PUSH
67033: LD_EXP 33
67037: PPUSH
67038: LD_VAR 0 4
67042: PUSH
67043: LD_EXP 33
67047: PUSH
67048: LD_VAR 0 4
67052: ARRAY
67053: PUSH
67054: LD_INT 1
67056: PLUS
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PPUSH
67062: LD_VAR 0 1
67066: PPUSH
67067: CALL 9396 0 3
67071: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
67072: LD_VAR 0 1
67076: PPUSH
67077: CALL_OW 263
67081: PUSH
67082: LD_INT 2
67084: EQUAL
67085: IFFALSE 67105
// begin repeat wait ( 0 0$1 ) ;
67087: LD_INT 35
67089: PPUSH
67090: CALL_OW 67
// until IsControledBy ( vehicle ) ;
67094: LD_VAR 0 1
67098: PPUSH
67099: CALL_OW 312
67103: IFFALSE 67087
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
67105: LD_VAR 0 1
67109: PPUSH
67110: LD_EXP 38
67114: PUSH
67115: LD_VAR 0 4
67119: ARRAY
67120: PPUSH
67121: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
67125: LD_VAR 0 1
67129: PPUSH
67130: CALL_OW 263
67134: PUSH
67135: LD_INT 1
67137: NONEQUAL
67138: IFFALSE 67142
// break ;
67140: GO 67191
// repeat wait ( 0 0$1 ) ;
67142: LD_INT 35
67144: PPUSH
67145: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
67149: LD_VAR 0 1
67153: PPUSH
67154: LD_EXP 38
67158: PUSH
67159: LD_VAR 0 4
67163: ARRAY
67164: PPUSH
67165: CALL_OW 308
67169: IFFALSE 67142
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
67171: LD_VAR 0 1
67175: PPUSH
67176: CALL_OW 311
67180: PPUSH
67181: CALL_OW 121
// exit ;
67185: POP
67186: POP
67187: GO 67193
// end ; end ;
67189: GO 66846
67191: POP
67192: POP
// end ;
67193: LD_VAR 0 3
67197: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
67198: LD_INT 0
67200: PPUSH
67201: PPUSH
67202: PPUSH
67203: PPUSH
// if not mc_bases or not skirmish then
67204: LD_EXP 14
67208: NOT
67209: PUSH
67210: LD_EXP 12
67214: NOT
67215: OR
67216: IFFALSE 67220
// exit ;
67218: GO 67573
// repeat wait ( 0 0$1 ) ;
67220: LD_INT 35
67222: PPUSH
67223: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
67227: LD_VAR 0 2
67231: PPUSH
67232: LD_VAR 0 3
67236: PPUSH
67237: CALL_OW 284
67241: IFFALSE 67220
// if GetResourceTypeXY ( x , y ) = mat_artefact then
67243: LD_VAR 0 2
67247: PPUSH
67248: LD_VAR 0 3
67252: PPUSH
67253: CALL_OW 283
67257: PUSH
67258: LD_INT 4
67260: EQUAL
67261: IFFALSE 67265
// exit ;
67263: GO 67573
// for i = 1 to mc_bases do
67265: LD_ADDR_VAR 0 7
67269: PUSH
67270: DOUBLE
67271: LD_INT 1
67273: DEC
67274: ST_TO_ADDR
67275: LD_EXP 14
67279: PUSH
67280: FOR_TO
67281: IFFALSE 67571
// begin if mc_crates_area [ i ] then
67283: LD_EXP 32
67287: PUSH
67288: LD_VAR 0 7
67292: ARRAY
67293: IFFALSE 67404
// for j in mc_crates_area [ i ] do
67295: LD_ADDR_VAR 0 8
67299: PUSH
67300: LD_EXP 32
67304: PUSH
67305: LD_VAR 0 7
67309: ARRAY
67310: PUSH
67311: FOR_IN
67312: IFFALSE 67402
// if InArea ( x , y , j ) then
67314: LD_VAR 0 2
67318: PPUSH
67319: LD_VAR 0 3
67323: PPUSH
67324: LD_VAR 0 8
67328: PPUSH
67329: CALL_OW 309
67333: IFFALSE 67400
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
67335: LD_ADDR_EXP 30
67339: PUSH
67340: LD_EXP 30
67344: PPUSH
67345: LD_VAR 0 7
67349: PUSH
67350: LD_EXP 30
67354: PUSH
67355: LD_VAR 0 7
67359: ARRAY
67360: PUSH
67361: LD_INT 1
67363: PLUS
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PPUSH
67369: LD_VAR 0 4
67373: PUSH
67374: LD_VAR 0 2
67378: PUSH
67379: LD_VAR 0 3
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: PPUSH
67389: CALL 9396 0 3
67393: ST_TO_ADDR
// exit ;
67394: POP
67395: POP
67396: POP
67397: POP
67398: GO 67573
// end ;
67400: GO 67311
67402: POP
67403: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67404: LD_ADDR_VAR 0 9
67408: PUSH
67409: LD_EXP 14
67413: PUSH
67414: LD_VAR 0 7
67418: ARRAY
67419: PPUSH
67420: LD_INT 2
67422: PUSH
67423: LD_INT 30
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 30
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: LIST
67447: PPUSH
67448: CALL_OW 72
67452: ST_TO_ADDR
// if not depot then
67453: LD_VAR 0 9
67457: NOT
67458: IFFALSE 67462
// continue ;
67460: GO 67280
// for j in depot do
67462: LD_ADDR_VAR 0 8
67466: PUSH
67467: LD_VAR 0 9
67471: PUSH
67472: FOR_IN
67473: IFFALSE 67567
// if GetDistUnitXY ( j , x , y ) < 30 then
67475: LD_VAR 0 8
67479: PPUSH
67480: LD_VAR 0 2
67484: PPUSH
67485: LD_VAR 0 3
67489: PPUSH
67490: CALL_OW 297
67494: PUSH
67495: LD_INT 30
67497: LESS
67498: IFFALSE 67565
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
67500: LD_ADDR_EXP 30
67504: PUSH
67505: LD_EXP 30
67509: PPUSH
67510: LD_VAR 0 7
67514: PUSH
67515: LD_EXP 30
67519: PUSH
67520: LD_VAR 0 7
67524: ARRAY
67525: PUSH
67526: LD_INT 1
67528: PLUS
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PPUSH
67534: LD_VAR 0 4
67538: PUSH
67539: LD_VAR 0 2
67543: PUSH
67544: LD_VAR 0 3
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: PPUSH
67554: CALL 9396 0 3
67558: ST_TO_ADDR
// exit ;
67559: POP
67560: POP
67561: POP
67562: POP
67563: GO 67573
// end ;
67565: GO 67472
67567: POP
67568: POP
// end ;
67569: GO 67280
67571: POP
67572: POP
// end ;
67573: LD_VAR 0 6
67577: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
67578: LD_INT 0
67580: PPUSH
67581: PPUSH
67582: PPUSH
67583: PPUSH
// if not mc_bases or not skirmish then
67584: LD_EXP 14
67588: NOT
67589: PUSH
67590: LD_EXP 12
67594: NOT
67595: OR
67596: IFFALSE 67600
// exit ;
67598: GO 67877
// side := GetSide ( lab ) ;
67600: LD_ADDR_VAR 0 4
67604: PUSH
67605: LD_VAR 0 2
67609: PPUSH
67610: CALL_OW 255
67614: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
67615: LD_VAR 0 4
67619: PUSH
67620: LD_EXP 40
67624: IN
67625: NOT
67626: PUSH
67627: LD_EXP 41
67631: NOT
67632: OR
67633: PUSH
67634: LD_EXP 14
67638: NOT
67639: OR
67640: IFFALSE 67644
// exit ;
67642: GO 67877
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
67644: LD_ADDR_EXP 41
67648: PUSH
67649: LD_EXP 41
67653: PPUSH
67654: LD_VAR 0 4
67658: PPUSH
67659: LD_EXP 41
67663: PUSH
67664: LD_VAR 0 4
67668: ARRAY
67669: PUSH
67670: LD_VAR 0 1
67674: DIFF
67675: PPUSH
67676: CALL_OW 1
67680: ST_TO_ADDR
// for i = 1 to mc_bases do
67681: LD_ADDR_VAR 0 5
67685: PUSH
67686: DOUBLE
67687: LD_INT 1
67689: DEC
67690: ST_TO_ADDR
67691: LD_EXP 14
67695: PUSH
67696: FOR_TO
67697: IFFALSE 67875
// begin if lab in mc_bases [ i ] then
67699: LD_VAR 0 2
67703: PUSH
67704: LD_EXP 14
67708: PUSH
67709: LD_VAR 0 5
67713: ARRAY
67714: IN
67715: IFFALSE 67873
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
67717: LD_VAR 0 1
67721: PUSH
67722: LD_INT 11
67724: PUSH
67725: LD_INT 4
67727: PUSH
67728: LD_INT 3
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: IN
67740: PUSH
67741: LD_EXP 44
67745: PUSH
67746: LD_VAR 0 5
67750: ARRAY
67751: AND
67752: IFFALSE 67873
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
67754: LD_ADDR_VAR 0 6
67758: PUSH
67759: LD_EXP 44
67763: PUSH
67764: LD_VAR 0 5
67768: ARRAY
67769: PUSH
67770: LD_INT 1
67772: ARRAY
67773: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
67774: LD_ADDR_EXP 44
67778: PUSH
67779: LD_EXP 44
67783: PPUSH
67784: LD_VAR 0 5
67788: PPUSH
67789: EMPTY
67790: PPUSH
67791: CALL_OW 1
67795: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
67796: LD_VAR 0 6
67800: PPUSH
67801: LD_INT 0
67803: PPUSH
67804: CALL_OW 109
// ComExitBuilding ( tmp ) ;
67808: LD_VAR 0 6
67812: PPUSH
67813: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
67817: LD_ADDR_EXP 43
67821: PUSH
67822: LD_EXP 43
67826: PPUSH
67827: LD_VAR 0 5
67831: PPUSH
67832: LD_EXP 43
67836: PUSH
67837: LD_VAR 0 5
67841: ARRAY
67842: PPUSH
67843: LD_INT 1
67845: PPUSH
67846: LD_VAR 0 6
67850: PPUSH
67851: CALL_OW 2
67855: PPUSH
67856: CALL_OW 1
67860: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
67861: LD_VAR 0 5
67865: PPUSH
67866: LD_INT 112
67868: PPUSH
67869: CALL 44889 0 2
// end ; end ; end ;
67873: GO 67696
67875: POP
67876: POP
// end ;
67877: LD_VAR 0 3
67881: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
67882: LD_INT 0
67884: PPUSH
67885: PPUSH
67886: PPUSH
67887: PPUSH
67888: PPUSH
67889: PPUSH
67890: PPUSH
67891: PPUSH
// if not mc_bases or not skirmish then
67892: LD_EXP 14
67896: NOT
67897: PUSH
67898: LD_EXP 12
67902: NOT
67903: OR
67904: IFFALSE 67908
// exit ;
67906: GO 69279
// for i = 1 to mc_bases do
67908: LD_ADDR_VAR 0 3
67912: PUSH
67913: DOUBLE
67914: LD_INT 1
67916: DEC
67917: ST_TO_ADDR
67918: LD_EXP 14
67922: PUSH
67923: FOR_TO
67924: IFFALSE 69277
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
67926: LD_VAR 0 1
67930: PUSH
67931: LD_EXP 14
67935: PUSH
67936: LD_VAR 0 3
67940: ARRAY
67941: IN
67942: PUSH
67943: LD_VAR 0 1
67947: PUSH
67948: LD_EXP 21
67952: PUSH
67953: LD_VAR 0 3
67957: ARRAY
67958: IN
67959: OR
67960: PUSH
67961: LD_VAR 0 1
67965: PUSH
67966: LD_EXP 36
67970: PUSH
67971: LD_VAR 0 3
67975: ARRAY
67976: IN
67977: OR
67978: PUSH
67979: LD_VAR 0 1
67983: PUSH
67984: LD_EXP 33
67988: PUSH
67989: LD_VAR 0 3
67993: ARRAY
67994: IN
67995: OR
67996: PUSH
67997: LD_VAR 0 1
68001: PUSH
68002: LD_EXP 43
68006: PUSH
68007: LD_VAR 0 3
68011: ARRAY
68012: IN
68013: OR
68014: PUSH
68015: LD_VAR 0 1
68019: PUSH
68020: LD_EXP 44
68024: PUSH
68025: LD_VAR 0 3
68029: ARRAY
68030: IN
68031: OR
68032: IFFALSE 69275
// begin if un in mc_ape [ i ] then
68034: LD_VAR 0 1
68038: PUSH
68039: LD_EXP 43
68043: PUSH
68044: LD_VAR 0 3
68048: ARRAY
68049: IN
68050: IFFALSE 68089
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
68052: LD_ADDR_EXP 43
68056: PUSH
68057: LD_EXP 43
68061: PPUSH
68062: LD_VAR 0 3
68066: PPUSH
68067: LD_EXP 43
68071: PUSH
68072: LD_VAR 0 3
68076: ARRAY
68077: PUSH
68078: LD_VAR 0 1
68082: DIFF
68083: PPUSH
68084: CALL_OW 1
68088: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
68089: LD_VAR 0 1
68093: PUSH
68094: LD_EXP 44
68098: PUSH
68099: LD_VAR 0 3
68103: ARRAY
68104: IN
68105: IFFALSE 68129
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
68107: LD_ADDR_EXP 44
68111: PUSH
68112: LD_EXP 44
68116: PPUSH
68117: LD_VAR 0 3
68121: PPUSH
68122: EMPTY
68123: PPUSH
68124: CALL_OW 1
68128: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
68129: LD_VAR 0 1
68133: PPUSH
68134: CALL_OW 247
68138: PUSH
68139: LD_INT 2
68141: EQUAL
68142: PUSH
68143: LD_VAR 0 1
68147: PPUSH
68148: CALL_OW 110
68152: PUSH
68153: LD_INT 20
68155: EQUAL
68156: PUSH
68157: LD_VAR 0 1
68161: PUSH
68162: LD_EXP 36
68166: PUSH
68167: LD_VAR 0 3
68171: ARRAY
68172: IN
68173: OR
68174: PUSH
68175: LD_VAR 0 1
68179: PPUSH
68180: CALL_OW 264
68184: PUSH
68185: LD_INT 12
68187: PUSH
68188: LD_INT 51
68190: PUSH
68191: LD_EXP 58
68195: PUSH
68196: LD_INT 32
68198: PUSH
68199: LD_INT 13
68201: PUSH
68202: LD_INT 52
68204: PUSH
68205: LD_INT 31
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: IN
68217: OR
68218: AND
68219: IFFALSE 68527
// begin if un in mc_defender [ i ] then
68221: LD_VAR 0 1
68225: PUSH
68226: LD_EXP 36
68230: PUSH
68231: LD_VAR 0 3
68235: ARRAY
68236: IN
68237: IFFALSE 68276
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
68239: LD_ADDR_EXP 36
68243: PUSH
68244: LD_EXP 36
68248: PPUSH
68249: LD_VAR 0 3
68253: PPUSH
68254: LD_EXP 36
68258: PUSH
68259: LD_VAR 0 3
68263: ARRAY
68264: PUSH
68265: LD_VAR 0 1
68269: DIFF
68270: PPUSH
68271: CALL_OW 1
68275: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
68276: LD_ADDR_VAR 0 8
68280: PUSH
68281: LD_VAR 0 3
68285: PPUSH
68286: LD_INT 3
68288: PPUSH
68289: CALL 64945 0 2
68293: ST_TO_ADDR
// if fac then
68294: LD_VAR 0 8
68298: IFFALSE 68527
// begin for j in fac do
68300: LD_ADDR_VAR 0 4
68304: PUSH
68305: LD_VAR 0 8
68309: PUSH
68310: FOR_IN
68311: IFFALSE 68525
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
68313: LD_ADDR_VAR 0 9
68317: PUSH
68318: LD_VAR 0 8
68322: PPUSH
68323: LD_VAR 0 1
68327: PPUSH
68328: CALL_OW 265
68332: PPUSH
68333: LD_VAR 0 1
68337: PPUSH
68338: CALL_OW 262
68342: PPUSH
68343: LD_VAR 0 1
68347: PPUSH
68348: CALL_OW 263
68352: PPUSH
68353: LD_VAR 0 1
68357: PPUSH
68358: CALL_OW 264
68362: PPUSH
68363: CALL 6928 0 5
68367: ST_TO_ADDR
// if components then
68368: LD_VAR 0 9
68372: IFFALSE 68523
// begin if GetWeapon ( un ) = ar_control_tower then
68374: LD_VAR 0 1
68378: PPUSH
68379: CALL_OW 264
68383: PUSH
68384: LD_INT 31
68386: EQUAL
68387: IFFALSE 68504
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
68389: LD_VAR 0 1
68393: PPUSH
68394: CALL_OW 311
68398: PPUSH
68399: LD_INT 0
68401: PPUSH
68402: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
68406: LD_ADDR_EXP 54
68410: PUSH
68411: LD_EXP 54
68415: PPUSH
68416: LD_VAR 0 3
68420: PPUSH
68421: LD_EXP 54
68425: PUSH
68426: LD_VAR 0 3
68430: ARRAY
68431: PUSH
68432: LD_VAR 0 1
68436: PPUSH
68437: CALL_OW 311
68441: DIFF
68442: PPUSH
68443: CALL_OW 1
68447: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
68448: LD_ADDR_VAR 0 7
68452: PUSH
68453: LD_EXP 35
68457: PUSH
68458: LD_VAR 0 3
68462: ARRAY
68463: PPUSH
68464: LD_INT 1
68466: PPUSH
68467: LD_VAR 0 9
68471: PPUSH
68472: CALL_OW 2
68476: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68477: LD_ADDR_EXP 35
68481: PUSH
68482: LD_EXP 35
68486: PPUSH
68487: LD_VAR 0 3
68491: PPUSH
68492: LD_VAR 0 7
68496: PPUSH
68497: CALL_OW 1
68501: ST_TO_ADDR
// end else
68502: GO 68521
// MC_InsertProduceList ( i , [ components ] ) ;
68504: LD_VAR 0 3
68508: PPUSH
68509: LD_VAR 0 9
68513: PUSH
68514: EMPTY
68515: LIST
68516: PPUSH
68517: CALL 64490 0 2
// break ;
68521: GO 68525
// end ; end ;
68523: GO 68310
68525: POP
68526: POP
// end ; end ; if GetType ( un ) = unit_building then
68527: LD_VAR 0 1
68531: PPUSH
68532: CALL_OW 247
68536: PUSH
68537: LD_INT 3
68539: EQUAL
68540: IFFALSE 68943
// begin btype := GetBType ( un ) ;
68542: LD_ADDR_VAR 0 5
68546: PUSH
68547: LD_VAR 0 1
68551: PPUSH
68552: CALL_OW 266
68556: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
68557: LD_VAR 0 5
68561: PUSH
68562: LD_INT 29
68564: PUSH
68565: LD_INT 30
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: IN
68572: IFFALSE 68645
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
68574: LD_VAR 0 1
68578: PPUSH
68579: CALL_OW 250
68583: PPUSH
68584: LD_VAR 0 1
68588: PPUSH
68589: CALL_OW 251
68593: PPUSH
68594: LD_VAR 0 1
68598: PPUSH
68599: CALL_OW 255
68603: PPUSH
68604: CALL_OW 440
68608: NOT
68609: IFFALSE 68645
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
68611: LD_VAR 0 1
68615: PPUSH
68616: CALL_OW 250
68620: PPUSH
68621: LD_VAR 0 1
68625: PPUSH
68626: CALL_OW 251
68630: PPUSH
68631: LD_VAR 0 1
68635: PPUSH
68636: CALL_OW 255
68640: PPUSH
68641: CALL_OW 441
// end ; if btype = b_warehouse then
68645: LD_VAR 0 5
68649: PUSH
68650: LD_INT 1
68652: EQUAL
68653: IFFALSE 68671
// begin btype := b_depot ;
68655: LD_ADDR_VAR 0 5
68659: PUSH
68660: LD_INT 0
68662: ST_TO_ADDR
// pos := 1 ;
68663: LD_ADDR_VAR 0 6
68667: PUSH
68668: LD_INT 1
68670: ST_TO_ADDR
// end ; if btype = b_factory then
68671: LD_VAR 0 5
68675: PUSH
68676: LD_INT 3
68678: EQUAL
68679: IFFALSE 68697
// begin btype := b_workshop ;
68681: LD_ADDR_VAR 0 5
68685: PUSH
68686: LD_INT 2
68688: ST_TO_ADDR
// pos := 1 ;
68689: LD_ADDR_VAR 0 6
68693: PUSH
68694: LD_INT 1
68696: ST_TO_ADDR
// end ; if btype = b_barracks then
68697: LD_VAR 0 5
68701: PUSH
68702: LD_INT 5
68704: EQUAL
68705: IFFALSE 68715
// btype := b_armoury ;
68707: LD_ADDR_VAR 0 5
68711: PUSH
68712: LD_INT 4
68714: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
68715: LD_VAR 0 5
68719: PUSH
68720: LD_INT 7
68722: PUSH
68723: LD_INT 8
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: IN
68730: IFFALSE 68740
// btype := b_lab ;
68732: LD_ADDR_VAR 0 5
68736: PUSH
68737: LD_INT 6
68739: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
68740: LD_ADDR_EXP 19
68744: PUSH
68745: LD_EXP 19
68749: PPUSH
68750: LD_VAR 0 3
68754: PUSH
68755: LD_EXP 19
68759: PUSH
68760: LD_VAR 0 3
68764: ARRAY
68765: PUSH
68766: LD_INT 1
68768: PLUS
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PPUSH
68774: LD_VAR 0 5
68778: PUSH
68779: LD_VAR 0 1
68783: PPUSH
68784: CALL_OW 250
68788: PUSH
68789: LD_VAR 0 1
68793: PPUSH
68794: CALL_OW 251
68798: PUSH
68799: LD_VAR 0 1
68803: PPUSH
68804: CALL_OW 254
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: PPUSH
68815: CALL 9396 0 3
68819: ST_TO_ADDR
// if pos = 1 then
68820: LD_VAR 0 6
68824: PUSH
68825: LD_INT 1
68827: EQUAL
68828: IFFALSE 68943
// begin tmp := mc_build_list [ i ] ;
68830: LD_ADDR_VAR 0 7
68834: PUSH
68835: LD_EXP 19
68839: PUSH
68840: LD_VAR 0 3
68844: ARRAY
68845: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
68846: LD_VAR 0 7
68850: PPUSH
68851: LD_INT 2
68853: PUSH
68854: LD_INT 30
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 30
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: PPUSH
68879: CALL_OW 72
68883: IFFALSE 68893
// pos := 2 ;
68885: LD_ADDR_VAR 0 6
68889: PUSH
68890: LD_INT 2
68892: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
68893: LD_ADDR_VAR 0 7
68897: PUSH
68898: LD_VAR 0 7
68902: PPUSH
68903: LD_VAR 0 6
68907: PPUSH
68908: LD_VAR 0 7
68912: PPUSH
68913: CALL 9722 0 3
68917: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
68918: LD_ADDR_EXP 19
68922: PUSH
68923: LD_EXP 19
68927: PPUSH
68928: LD_VAR 0 3
68932: PPUSH
68933: LD_VAR 0 7
68937: PPUSH
68938: CALL_OW 1
68942: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
68943: LD_VAR 0 1
68947: PUSH
68948: LD_EXP 14
68952: PUSH
68953: LD_VAR 0 3
68957: ARRAY
68958: IN
68959: IFFALSE 68998
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
68961: LD_ADDR_EXP 14
68965: PUSH
68966: LD_EXP 14
68970: PPUSH
68971: LD_VAR 0 3
68975: PPUSH
68976: LD_EXP 14
68980: PUSH
68981: LD_VAR 0 3
68985: ARRAY
68986: PUSH
68987: LD_VAR 0 1
68991: DIFF
68992: PPUSH
68993: CALL_OW 1
68997: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
68998: LD_VAR 0 1
69002: PUSH
69003: LD_EXP 21
69007: PUSH
69008: LD_VAR 0 3
69012: ARRAY
69013: IN
69014: IFFALSE 69053
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
69016: LD_ADDR_EXP 21
69020: PUSH
69021: LD_EXP 21
69025: PPUSH
69026: LD_VAR 0 3
69030: PPUSH
69031: LD_EXP 21
69035: PUSH
69036: LD_VAR 0 3
69040: ARRAY
69041: PUSH
69042: LD_VAR 0 1
69046: DIFF
69047: PPUSH
69048: CALL_OW 1
69052: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
69053: LD_VAR 0 1
69057: PUSH
69058: LD_EXP 33
69062: PUSH
69063: LD_VAR 0 3
69067: ARRAY
69068: IN
69069: IFFALSE 69108
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
69071: LD_ADDR_EXP 33
69075: PUSH
69076: LD_EXP 33
69080: PPUSH
69081: LD_VAR 0 3
69085: PPUSH
69086: LD_EXP 33
69090: PUSH
69091: LD_VAR 0 3
69095: ARRAY
69096: PUSH
69097: LD_VAR 0 1
69101: DIFF
69102: PPUSH
69103: CALL_OW 1
69107: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
69108: LD_VAR 0 1
69112: PUSH
69113: LD_EXP 36
69117: PUSH
69118: LD_VAR 0 3
69122: ARRAY
69123: IN
69124: IFFALSE 69163
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
69126: LD_ADDR_EXP 36
69130: PUSH
69131: LD_EXP 36
69135: PPUSH
69136: LD_VAR 0 3
69140: PPUSH
69141: LD_EXP 36
69145: PUSH
69146: LD_VAR 0 3
69150: ARRAY
69151: PUSH
69152: LD_VAR 0 1
69156: DIFF
69157: PPUSH
69158: CALL_OW 1
69162: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
69163: LD_VAR 0 1
69167: PUSH
69168: LD_EXP 23
69172: PUSH
69173: LD_VAR 0 3
69177: ARRAY
69178: IN
69179: IFFALSE 69218
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
69181: LD_ADDR_EXP 23
69185: PUSH
69186: LD_EXP 23
69190: PPUSH
69191: LD_VAR 0 3
69195: PPUSH
69196: LD_EXP 23
69200: PUSH
69201: LD_VAR 0 3
69205: ARRAY
69206: PUSH
69207: LD_VAR 0 1
69211: DIFF
69212: PPUSH
69213: CALL_OW 1
69217: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
69218: LD_VAR 0 1
69222: PUSH
69223: LD_EXP 22
69227: PUSH
69228: LD_VAR 0 3
69232: ARRAY
69233: IN
69234: IFFALSE 69273
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
69236: LD_ADDR_EXP 22
69240: PUSH
69241: LD_EXP 22
69245: PPUSH
69246: LD_VAR 0 3
69250: PPUSH
69251: LD_EXP 22
69255: PUSH
69256: LD_VAR 0 3
69260: ARRAY
69261: PUSH
69262: LD_VAR 0 1
69266: DIFF
69267: PPUSH
69268: CALL_OW 1
69272: ST_TO_ADDR
// end ; break ;
69273: GO 69277
// end ;
69275: GO 67923
69277: POP
69278: POP
// end ;
69279: LD_VAR 0 2
69283: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
69284: LD_INT 0
69286: PPUSH
69287: PPUSH
69288: PPUSH
// if not mc_bases or not skirmish then
69289: LD_EXP 14
69293: NOT
69294: PUSH
69295: LD_EXP 12
69299: NOT
69300: OR
69301: IFFALSE 69305
// exit ;
69303: GO 69520
// for i = 1 to mc_bases do
69305: LD_ADDR_VAR 0 3
69309: PUSH
69310: DOUBLE
69311: LD_INT 1
69313: DEC
69314: ST_TO_ADDR
69315: LD_EXP 14
69319: PUSH
69320: FOR_TO
69321: IFFALSE 69518
// begin if building in mc_construct_list [ i ] then
69323: LD_VAR 0 1
69327: PUSH
69328: LD_EXP 21
69332: PUSH
69333: LD_VAR 0 3
69337: ARRAY
69338: IN
69339: IFFALSE 69516
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
69341: LD_ADDR_EXP 21
69345: PUSH
69346: LD_EXP 21
69350: PPUSH
69351: LD_VAR 0 3
69355: PPUSH
69356: LD_EXP 21
69360: PUSH
69361: LD_VAR 0 3
69365: ARRAY
69366: PUSH
69367: LD_VAR 0 1
69371: DIFF
69372: PPUSH
69373: CALL_OW 1
69377: ST_TO_ADDR
// if building in mc_lab [ i ] then
69378: LD_VAR 0 1
69382: PUSH
69383: LD_EXP 47
69387: PUSH
69388: LD_VAR 0 3
69392: ARRAY
69393: IN
69394: IFFALSE 69449
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
69396: LD_ADDR_EXP 48
69400: PUSH
69401: LD_EXP 48
69405: PPUSH
69406: LD_VAR 0 3
69410: PPUSH
69411: LD_EXP 48
69415: PUSH
69416: LD_VAR 0 3
69420: ARRAY
69421: PPUSH
69422: LD_INT 1
69424: PPUSH
69425: LD_EXP 48
69429: PUSH
69430: LD_VAR 0 3
69434: ARRAY
69435: PPUSH
69436: LD_INT 0
69438: PPUSH
69439: CALL 8814 0 4
69443: PPUSH
69444: CALL_OW 1
69448: ST_TO_ADDR
// if not building in mc_bases [ i ] then
69449: LD_VAR 0 1
69453: PUSH
69454: LD_EXP 14
69458: PUSH
69459: LD_VAR 0 3
69463: ARRAY
69464: IN
69465: NOT
69466: IFFALSE 69512
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
69468: LD_ADDR_EXP 14
69472: PUSH
69473: LD_EXP 14
69477: PPUSH
69478: LD_VAR 0 3
69482: PUSH
69483: LD_EXP 14
69487: PUSH
69488: LD_VAR 0 3
69492: ARRAY
69493: PUSH
69494: LD_INT 1
69496: PLUS
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PPUSH
69502: LD_VAR 0 1
69506: PPUSH
69507: CALL 9396 0 3
69511: ST_TO_ADDR
// exit ;
69512: POP
69513: POP
69514: GO 69520
// end ; end ;
69516: GO 69320
69518: POP
69519: POP
// end ;
69520: LD_VAR 0 2
69524: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
69525: LD_INT 0
69527: PPUSH
69528: PPUSH
69529: PPUSH
69530: PPUSH
69531: PPUSH
69532: PPUSH
69533: PPUSH
// if not mc_bases or not skirmish then
69534: LD_EXP 14
69538: NOT
69539: PUSH
69540: LD_EXP 12
69544: NOT
69545: OR
69546: IFFALSE 69550
// exit ;
69548: GO 70211
// for i = 1 to mc_bases do
69550: LD_ADDR_VAR 0 3
69554: PUSH
69555: DOUBLE
69556: LD_INT 1
69558: DEC
69559: ST_TO_ADDR
69560: LD_EXP 14
69564: PUSH
69565: FOR_TO
69566: IFFALSE 70209
// begin if building in mc_construct_list [ i ] then
69568: LD_VAR 0 1
69572: PUSH
69573: LD_EXP 21
69577: PUSH
69578: LD_VAR 0 3
69582: ARRAY
69583: IN
69584: IFFALSE 70207
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
69586: LD_ADDR_EXP 21
69590: PUSH
69591: LD_EXP 21
69595: PPUSH
69596: LD_VAR 0 3
69600: PPUSH
69601: LD_EXP 21
69605: PUSH
69606: LD_VAR 0 3
69610: ARRAY
69611: PUSH
69612: LD_VAR 0 1
69616: DIFF
69617: PPUSH
69618: CALL_OW 1
69622: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
69623: LD_ADDR_EXP 14
69627: PUSH
69628: LD_EXP 14
69632: PPUSH
69633: LD_VAR 0 3
69637: PUSH
69638: LD_EXP 14
69642: PUSH
69643: LD_VAR 0 3
69647: ARRAY
69648: PUSH
69649: LD_INT 1
69651: PLUS
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PPUSH
69657: LD_VAR 0 1
69661: PPUSH
69662: CALL 9396 0 3
69666: ST_TO_ADDR
// btype := GetBType ( building ) ;
69667: LD_ADDR_VAR 0 5
69671: PUSH
69672: LD_VAR 0 1
69676: PPUSH
69677: CALL_OW 266
69681: ST_TO_ADDR
// side := GetSide ( building ) ;
69682: LD_ADDR_VAR 0 8
69686: PUSH
69687: LD_VAR 0 1
69691: PPUSH
69692: CALL_OW 255
69696: ST_TO_ADDR
// if btype = b_lab then
69697: LD_VAR 0 5
69701: PUSH
69702: LD_INT 6
69704: EQUAL
69705: IFFALSE 69755
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
69707: LD_ADDR_EXP 47
69711: PUSH
69712: LD_EXP 47
69716: PPUSH
69717: LD_VAR 0 3
69721: PUSH
69722: LD_EXP 47
69726: PUSH
69727: LD_VAR 0 3
69731: ARRAY
69732: PUSH
69733: LD_INT 1
69735: PLUS
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PPUSH
69741: LD_VAR 0 1
69745: PPUSH
69746: CALL 9396 0 3
69750: ST_TO_ADDR
// exit ;
69751: POP
69752: POP
69753: GO 70211
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
69755: LD_VAR 0 5
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: LD_INT 2
69765: PUSH
69766: LD_INT 4
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: LIST
69773: IN
69774: IFFALSE 69898
// begin if btype = b_armoury then
69776: LD_VAR 0 5
69780: PUSH
69781: LD_INT 4
69783: EQUAL
69784: IFFALSE 69794
// btype := b_barracks ;
69786: LD_ADDR_VAR 0 5
69790: PUSH
69791: LD_INT 5
69793: ST_TO_ADDR
// if btype = b_depot then
69794: LD_VAR 0 5
69798: PUSH
69799: LD_INT 0
69801: EQUAL
69802: IFFALSE 69812
// btype := b_warehouse ;
69804: LD_ADDR_VAR 0 5
69808: PUSH
69809: LD_INT 1
69811: ST_TO_ADDR
// if btype = b_workshop then
69812: LD_VAR 0 5
69816: PUSH
69817: LD_INT 2
69819: EQUAL
69820: IFFALSE 69830
// btype := b_factory ;
69822: LD_ADDR_VAR 0 5
69826: PUSH
69827: LD_INT 3
69829: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
69830: LD_VAR 0 5
69834: PPUSH
69835: LD_VAR 0 8
69839: PPUSH
69840: CALL_OW 323
69844: PUSH
69845: LD_INT 1
69847: EQUAL
69848: IFFALSE 69894
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
69850: LD_ADDR_EXP 46
69854: PUSH
69855: LD_EXP 46
69859: PPUSH
69860: LD_VAR 0 3
69864: PUSH
69865: LD_EXP 46
69869: PUSH
69870: LD_VAR 0 3
69874: ARRAY
69875: PUSH
69876: LD_INT 1
69878: PLUS
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PPUSH
69884: LD_VAR 0 1
69888: PPUSH
69889: CALL 9396 0 3
69893: ST_TO_ADDR
// exit ;
69894: POP
69895: POP
69896: GO 70211
// end ; if btype in [ b_bunker , b_turret ] then
69898: LD_VAR 0 5
69902: PUSH
69903: LD_INT 32
69905: PUSH
69906: LD_INT 33
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: IN
69913: IFFALSE 70203
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
69915: LD_ADDR_EXP 22
69919: PUSH
69920: LD_EXP 22
69924: PPUSH
69925: LD_VAR 0 3
69929: PUSH
69930: LD_EXP 22
69934: PUSH
69935: LD_VAR 0 3
69939: ARRAY
69940: PUSH
69941: LD_INT 1
69943: PLUS
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PPUSH
69949: LD_VAR 0 1
69953: PPUSH
69954: CALL 9396 0 3
69958: ST_TO_ADDR
// if btype = b_bunker then
69959: LD_VAR 0 5
69963: PUSH
69964: LD_INT 32
69966: EQUAL
69967: IFFALSE 70203
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
69969: LD_ADDR_EXP 23
69973: PUSH
69974: LD_EXP 23
69978: PPUSH
69979: LD_VAR 0 3
69983: PUSH
69984: LD_EXP 23
69988: PUSH
69989: LD_VAR 0 3
69993: ARRAY
69994: PUSH
69995: LD_INT 1
69997: PLUS
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PPUSH
70003: LD_VAR 0 1
70007: PPUSH
70008: CALL 9396 0 3
70012: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
70013: LD_ADDR_VAR 0 6
70017: PUSH
70018: LD_EXP 14
70022: PUSH
70023: LD_VAR 0 3
70027: ARRAY
70028: PPUSH
70029: LD_INT 25
70031: PUSH
70032: LD_INT 1
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: LD_INT 54
70044: PUSH
70045: EMPTY
70046: LIST
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PPUSH
70056: CALL_OW 72
70060: ST_TO_ADDR
// if tmp then
70061: LD_VAR 0 6
70065: IFFALSE 70071
// exit ;
70067: POP
70068: POP
70069: GO 70211
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
70071: LD_ADDR_VAR 0 6
70075: PUSH
70076: LD_EXP 14
70080: PUSH
70081: LD_VAR 0 3
70085: ARRAY
70086: PPUSH
70087: LD_INT 2
70089: PUSH
70090: LD_INT 30
70092: PUSH
70093: LD_INT 4
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 30
70102: PUSH
70103: LD_INT 5
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: LIST
70114: PPUSH
70115: CALL_OW 72
70119: ST_TO_ADDR
// if not tmp then
70120: LD_VAR 0 6
70124: NOT
70125: IFFALSE 70131
// exit ;
70127: POP
70128: POP
70129: GO 70211
// for j in tmp do
70131: LD_ADDR_VAR 0 4
70135: PUSH
70136: LD_VAR 0 6
70140: PUSH
70141: FOR_IN
70142: IFFALSE 70201
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
70144: LD_ADDR_VAR 0 7
70148: PUSH
70149: LD_VAR 0 4
70153: PPUSH
70154: CALL_OW 313
70158: PPUSH
70159: LD_INT 25
70161: PUSH
70162: LD_INT 1
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PPUSH
70169: CALL_OW 72
70173: ST_TO_ADDR
// if units then
70174: LD_VAR 0 7
70178: IFFALSE 70199
// begin ComExitBuilding ( units [ 1 ] ) ;
70180: LD_VAR 0 7
70184: PUSH
70185: LD_INT 1
70187: ARRAY
70188: PPUSH
70189: CALL_OW 122
// exit ;
70193: POP
70194: POP
70195: POP
70196: POP
70197: GO 70211
// end ; end ;
70199: GO 70141
70201: POP
70202: POP
// end ; end ; exit ;
70203: POP
70204: POP
70205: GO 70211
// end ; end ;
70207: GO 69565
70209: POP
70210: POP
// end ;
70211: LD_VAR 0 2
70215: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
70216: LD_INT 0
70218: PPUSH
70219: PPUSH
70220: PPUSH
70221: PPUSH
70222: PPUSH
70223: PPUSH
70224: PPUSH
// if not mc_bases or not skirmish then
70225: LD_EXP 14
70229: NOT
70230: PUSH
70231: LD_EXP 12
70235: NOT
70236: OR
70237: IFFALSE 70241
// exit ;
70239: GO 70472
// btype := GetBType ( building ) ;
70241: LD_ADDR_VAR 0 6
70245: PUSH
70246: LD_VAR 0 1
70250: PPUSH
70251: CALL_OW 266
70255: ST_TO_ADDR
// x := GetX ( building ) ;
70256: LD_ADDR_VAR 0 7
70260: PUSH
70261: LD_VAR 0 1
70265: PPUSH
70266: CALL_OW 250
70270: ST_TO_ADDR
// y := GetY ( building ) ;
70271: LD_ADDR_VAR 0 8
70275: PUSH
70276: LD_VAR 0 1
70280: PPUSH
70281: CALL_OW 251
70285: ST_TO_ADDR
// d := GetDir ( building ) ;
70286: LD_ADDR_VAR 0 9
70290: PUSH
70291: LD_VAR 0 1
70295: PPUSH
70296: CALL_OW 254
70300: ST_TO_ADDR
// for i = 1 to mc_bases do
70301: LD_ADDR_VAR 0 4
70305: PUSH
70306: DOUBLE
70307: LD_INT 1
70309: DEC
70310: ST_TO_ADDR
70311: LD_EXP 14
70315: PUSH
70316: FOR_TO
70317: IFFALSE 70470
// begin if not mc_build_list [ i ] then
70319: LD_EXP 19
70323: PUSH
70324: LD_VAR 0 4
70328: ARRAY
70329: NOT
70330: IFFALSE 70334
// continue ;
70332: GO 70316
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
70334: LD_VAR 0 6
70338: PUSH
70339: LD_VAR 0 7
70343: PUSH
70344: LD_VAR 0 8
70348: PUSH
70349: LD_VAR 0 9
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: PPUSH
70360: LD_EXP 19
70364: PUSH
70365: LD_VAR 0 4
70369: ARRAY
70370: PUSH
70371: LD_INT 1
70373: ARRAY
70374: PPUSH
70375: CALL 15565 0 2
70379: IFFALSE 70468
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
70381: LD_ADDR_EXP 19
70385: PUSH
70386: LD_EXP 19
70390: PPUSH
70391: LD_VAR 0 4
70395: PPUSH
70396: LD_EXP 19
70400: PUSH
70401: LD_VAR 0 4
70405: ARRAY
70406: PPUSH
70407: LD_INT 1
70409: PPUSH
70410: CALL_OW 3
70414: PPUSH
70415: CALL_OW 1
70419: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
70420: LD_ADDR_EXP 21
70424: PUSH
70425: LD_EXP 21
70429: PPUSH
70430: LD_VAR 0 4
70434: PUSH
70435: LD_EXP 21
70439: PUSH
70440: LD_VAR 0 4
70444: ARRAY
70445: PUSH
70446: LD_INT 1
70448: PLUS
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PPUSH
70454: LD_VAR 0 1
70458: PPUSH
70459: CALL 9396 0 3
70463: ST_TO_ADDR
// exit ;
70464: POP
70465: POP
70466: GO 70472
// end ; end ;
70468: GO 70316
70470: POP
70471: POP
// end ;
70472: LD_VAR 0 3
70476: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
70477: LD_INT 0
70479: PPUSH
70480: PPUSH
70481: PPUSH
// if not mc_bases or not skirmish then
70482: LD_EXP 14
70486: NOT
70487: PUSH
70488: LD_EXP 12
70492: NOT
70493: OR
70494: IFFALSE 70498
// exit ;
70496: GO 70688
// for i = 1 to mc_bases do
70498: LD_ADDR_VAR 0 4
70502: PUSH
70503: DOUBLE
70504: LD_INT 1
70506: DEC
70507: ST_TO_ADDR
70508: LD_EXP 14
70512: PUSH
70513: FOR_TO
70514: IFFALSE 70601
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
70516: LD_VAR 0 1
70520: PUSH
70521: LD_EXP 22
70525: PUSH
70526: LD_VAR 0 4
70530: ARRAY
70531: IN
70532: PUSH
70533: LD_VAR 0 1
70537: PUSH
70538: LD_EXP 23
70542: PUSH
70543: LD_VAR 0 4
70547: ARRAY
70548: IN
70549: NOT
70550: AND
70551: IFFALSE 70599
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
70553: LD_ADDR_EXP 23
70557: PUSH
70558: LD_EXP 23
70562: PPUSH
70563: LD_VAR 0 4
70567: PUSH
70568: LD_EXP 23
70572: PUSH
70573: LD_VAR 0 4
70577: ARRAY
70578: PUSH
70579: LD_INT 1
70581: PLUS
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PPUSH
70587: LD_VAR 0 1
70591: PPUSH
70592: CALL 9396 0 3
70596: ST_TO_ADDR
// break ;
70597: GO 70601
// end ; end ;
70599: GO 70513
70601: POP
70602: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
70603: LD_VAR 0 1
70607: PPUSH
70608: CALL_OW 257
70612: PUSH
70613: LD_EXP 40
70617: IN
70618: PUSH
70619: LD_VAR 0 1
70623: PPUSH
70624: CALL_OW 266
70628: PUSH
70629: LD_INT 5
70631: EQUAL
70632: AND
70633: PUSH
70634: LD_VAR 0 2
70638: PPUSH
70639: CALL_OW 110
70643: PUSH
70644: LD_INT 18
70646: NONEQUAL
70647: AND
70648: IFFALSE 70688
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
70650: LD_VAR 0 2
70654: PPUSH
70655: CALL_OW 257
70659: PUSH
70660: LD_INT 5
70662: PUSH
70663: LD_INT 8
70665: PUSH
70666: LD_INT 9
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: LIST
70673: IN
70674: IFFALSE 70688
// SetClass ( unit , 1 ) ;
70676: LD_VAR 0 2
70680: PPUSH
70681: LD_INT 1
70683: PPUSH
70684: CALL_OW 336
// end ;
70688: LD_VAR 0 3
70692: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
70693: LD_INT 0
70695: PPUSH
70696: PPUSH
// if not mc_bases or not skirmish then
70697: LD_EXP 14
70701: NOT
70702: PUSH
70703: LD_EXP 12
70707: NOT
70708: OR
70709: IFFALSE 70713
// exit ;
70711: GO 70829
// if GetLives ( abandoned_vehicle ) > 250 then
70713: LD_VAR 0 2
70717: PPUSH
70718: CALL_OW 256
70722: PUSH
70723: LD_INT 250
70725: GREATER
70726: IFFALSE 70730
// exit ;
70728: GO 70829
// for i = 1 to mc_bases do
70730: LD_ADDR_VAR 0 6
70734: PUSH
70735: DOUBLE
70736: LD_INT 1
70738: DEC
70739: ST_TO_ADDR
70740: LD_EXP 14
70744: PUSH
70745: FOR_TO
70746: IFFALSE 70827
// begin if driver in mc_bases [ i ] then
70748: LD_VAR 0 1
70752: PUSH
70753: LD_EXP 14
70757: PUSH
70758: LD_VAR 0 6
70762: ARRAY
70763: IN
70764: IFFALSE 70825
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
70766: LD_VAR 0 1
70770: PPUSH
70771: LD_EXP 14
70775: PUSH
70776: LD_VAR 0 6
70780: ARRAY
70781: PPUSH
70782: LD_INT 2
70784: PUSH
70785: LD_INT 30
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 30
70797: PUSH
70798: LD_INT 1
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: PPUSH
70810: CALL_OW 72
70814: PUSH
70815: LD_INT 1
70817: ARRAY
70818: PPUSH
70819: CALL_OW 112
// break ;
70823: GO 70827
// end ; end ;
70825: GO 70745
70827: POP
70828: POP
// end ; end_of_file
70829: LD_VAR 0 5
70833: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
70834: LD_INT 0
70836: PPUSH
// ru_radar := 98 ;
70837: LD_ADDR_EXP 57
70841: PUSH
70842: LD_INT 98
70844: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
70845: LD_ADDR_EXP 58
70849: PUSH
70850: LD_INT 89
70852: ST_TO_ADDR
// us_hack := 99 ;
70853: LD_ADDR_EXP 59
70857: PUSH
70858: LD_INT 99
70860: ST_TO_ADDR
// us_artillery := 97 ;
70861: LD_ADDR_EXP 60
70865: PUSH
70866: LD_INT 97
70868: ST_TO_ADDR
// ar_bio_bomb := 91 ;
70869: LD_ADDR_EXP 61
70873: PUSH
70874: LD_INT 91
70876: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
70877: LD_ADDR_EXP 62
70881: PUSH
70882: LD_INT 92
70884: ST_TO_ADDR
// tech_Artillery := 80 ;
70885: LD_ADDR_EXP 63
70889: PUSH
70890: LD_INT 80
70892: ST_TO_ADDR
// tech_RadMat := 81 ;
70893: LD_ADDR_EXP 64
70897: PUSH
70898: LD_INT 81
70900: ST_TO_ADDR
// tech_BasicTools := 82 ;
70901: LD_ADDR_EXP 65
70905: PUSH
70906: LD_INT 82
70908: ST_TO_ADDR
// tech_Cargo := 83 ;
70909: LD_ADDR_EXP 66
70913: PUSH
70914: LD_INT 83
70916: ST_TO_ADDR
// tech_Track := 84 ;
70917: LD_ADDR_EXP 67
70921: PUSH
70922: LD_INT 84
70924: ST_TO_ADDR
// tech_Crane := 85 ;
70925: LD_ADDR_EXP 68
70929: PUSH
70930: LD_INT 85
70932: ST_TO_ADDR
// tech_Bulldozer := 86 ;
70933: LD_ADDR_EXP 69
70937: PUSH
70938: LD_INT 86
70940: ST_TO_ADDR
// tech_Hovercraft := 87 ;
70941: LD_ADDR_EXP 70
70945: PUSH
70946: LD_INT 87
70948: ST_TO_ADDR
// end ;
70949: LD_VAR 0 1
70953: RET
// every 1 do
70954: GO 70956
70956: DISABLE
// InitGlobalVariables ; end_of_file
70957: CALL 70834 0 0
70961: END
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
70962: LD_INT 0
70964: PPUSH
70965: PPUSH
70966: PPUSH
70967: PPUSH
70968: PPUSH
70969: PPUSH
70970: PPUSH
70971: PPUSH
70972: PPUSH
70973: PPUSH
70974: PPUSH
70975: PPUSH
70976: PPUSH
70977: PPUSH
70978: PPUSH
70979: PPUSH
70980: PPUSH
70981: PPUSH
70982: PPUSH
70983: PPUSH
70984: PPUSH
70985: PPUSH
70986: PPUSH
70987: PPUSH
70988: PPUSH
70989: PPUSH
70990: PPUSH
70991: PPUSH
70992: PPUSH
70993: PPUSH
70994: PPUSH
70995: PPUSH
70996: PPUSH
70997: PPUSH
// if not list then
70998: LD_VAR 0 1
71002: NOT
71003: IFFALSE 71007
// exit ;
71005: GO 75666
// base := list [ 1 ] ;
71007: LD_ADDR_VAR 0 3
71011: PUSH
71012: LD_VAR 0 1
71016: PUSH
71017: LD_INT 1
71019: ARRAY
71020: ST_TO_ADDR
// group := list [ 2 ] ;
71021: LD_ADDR_VAR 0 4
71025: PUSH
71026: LD_VAR 0 1
71030: PUSH
71031: LD_INT 2
71033: ARRAY
71034: ST_TO_ADDR
// path := list [ 3 ] ;
71035: LD_ADDR_VAR 0 5
71039: PUSH
71040: LD_VAR 0 1
71044: PUSH
71045: LD_INT 3
71047: ARRAY
71048: ST_TO_ADDR
// flags := list [ 4 ] ;
71049: LD_ADDR_VAR 0 6
71053: PUSH
71054: LD_VAR 0 1
71058: PUSH
71059: LD_INT 4
71061: ARRAY
71062: ST_TO_ADDR
// mined := [ ] ;
71063: LD_ADDR_VAR 0 27
71067: PUSH
71068: EMPTY
71069: ST_TO_ADDR
// bombed := [ ] ;
71070: LD_ADDR_VAR 0 28
71074: PUSH
71075: EMPTY
71076: ST_TO_ADDR
// healers := [ ] ;
71077: LD_ADDR_VAR 0 31
71081: PUSH
71082: EMPTY
71083: ST_TO_ADDR
// to_heal := [ ] ;
71084: LD_ADDR_VAR 0 30
71088: PUSH
71089: EMPTY
71090: ST_TO_ADDR
// repairs := [ ] ;
71091: LD_ADDR_VAR 0 33
71095: PUSH
71096: EMPTY
71097: ST_TO_ADDR
// to_repair := [ ] ;
71098: LD_ADDR_VAR 0 32
71102: PUSH
71103: EMPTY
71104: ST_TO_ADDR
// if not group or not path then
71105: LD_VAR 0 4
71109: NOT
71110: PUSH
71111: LD_VAR 0 5
71115: NOT
71116: OR
71117: IFFALSE 71121
// exit ;
71119: GO 75666
// side := GetSide ( group [ 1 ] ) ;
71121: LD_ADDR_VAR 0 35
71125: PUSH
71126: LD_VAR 0 4
71130: PUSH
71131: LD_INT 1
71133: ARRAY
71134: PPUSH
71135: CALL_OW 255
71139: ST_TO_ADDR
// if flags then
71140: LD_VAR 0 6
71144: IFFALSE 71288
// begin f_ignore_area := flags [ 1 ] ;
71146: LD_ADDR_VAR 0 17
71150: PUSH
71151: LD_VAR 0 6
71155: PUSH
71156: LD_INT 1
71158: ARRAY
71159: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
71160: LD_ADDR_VAR 0 18
71164: PUSH
71165: LD_VAR 0 6
71169: PUSH
71170: LD_INT 2
71172: ARRAY
71173: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
71174: LD_ADDR_VAR 0 19
71178: PUSH
71179: LD_VAR 0 6
71183: PUSH
71184: LD_INT 3
71186: ARRAY
71187: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
71188: LD_ADDR_VAR 0 20
71192: PUSH
71193: LD_VAR 0 6
71197: PUSH
71198: LD_INT 4
71200: ARRAY
71201: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
71202: LD_ADDR_VAR 0 21
71206: PUSH
71207: LD_VAR 0 6
71211: PUSH
71212: LD_INT 5
71214: ARRAY
71215: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
71216: LD_ADDR_VAR 0 22
71220: PUSH
71221: LD_VAR 0 6
71225: PUSH
71226: LD_INT 6
71228: ARRAY
71229: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
71230: LD_ADDR_VAR 0 23
71234: PUSH
71235: LD_VAR 0 6
71239: PUSH
71240: LD_INT 7
71242: ARRAY
71243: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
71244: LD_ADDR_VAR 0 24
71248: PUSH
71249: LD_VAR 0 6
71253: PUSH
71254: LD_INT 8
71256: ARRAY
71257: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
71258: LD_ADDR_VAR 0 25
71262: PUSH
71263: LD_VAR 0 6
71267: PUSH
71268: LD_INT 9
71270: ARRAY
71271: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
71272: LD_ADDR_VAR 0 26
71276: PUSH
71277: LD_VAR 0 6
71281: PUSH
71282: LD_INT 10
71284: ARRAY
71285: ST_TO_ADDR
// end else
71286: GO 71368
// begin f_ignore_area := false ;
71288: LD_ADDR_VAR 0 17
71292: PUSH
71293: LD_INT 0
71295: ST_TO_ADDR
// f_capture := false ;
71296: LD_ADDR_VAR 0 18
71300: PUSH
71301: LD_INT 0
71303: ST_TO_ADDR
// f_ignore_civ := false ;
71304: LD_ADDR_VAR 0 19
71308: PUSH
71309: LD_INT 0
71311: ST_TO_ADDR
// f_murder := false ;
71312: LD_ADDR_VAR 0 20
71316: PUSH
71317: LD_INT 0
71319: ST_TO_ADDR
// f_mines := false ;
71320: LD_ADDR_VAR 0 21
71324: PUSH
71325: LD_INT 0
71327: ST_TO_ADDR
// f_repair := false ;
71328: LD_ADDR_VAR 0 22
71332: PUSH
71333: LD_INT 0
71335: ST_TO_ADDR
// f_heal := false ;
71336: LD_ADDR_VAR 0 23
71340: PUSH
71341: LD_INT 0
71343: ST_TO_ADDR
// f_spacetime := false ;
71344: LD_ADDR_VAR 0 24
71348: PUSH
71349: LD_INT 0
71351: ST_TO_ADDR
// f_attack_depot := false ;
71352: LD_ADDR_VAR 0 25
71356: PUSH
71357: LD_INT 0
71359: ST_TO_ADDR
// f_crawl := false ;
71360: LD_ADDR_VAR 0 26
71364: PUSH
71365: LD_INT 0
71367: ST_TO_ADDR
// end ; if f_heal then
71368: LD_VAR 0 23
71372: IFFALSE 71399
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
71374: LD_ADDR_VAR 0 31
71378: PUSH
71379: LD_VAR 0 4
71383: PPUSH
71384: LD_INT 25
71386: PUSH
71387: LD_INT 4
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PPUSH
71394: CALL_OW 72
71398: ST_TO_ADDR
// if f_repair then
71399: LD_VAR 0 22
71403: IFFALSE 71430
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
71405: LD_ADDR_VAR 0 33
71409: PUSH
71410: LD_VAR 0 4
71414: PPUSH
71415: LD_INT 25
71417: PUSH
71418: LD_INT 3
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PPUSH
71425: CALL_OW 72
71429: ST_TO_ADDR
// units_path := [ ] ;
71430: LD_ADDR_VAR 0 16
71434: PUSH
71435: EMPTY
71436: ST_TO_ADDR
// for i = 1 to group do
71437: LD_ADDR_VAR 0 7
71441: PUSH
71442: DOUBLE
71443: LD_INT 1
71445: DEC
71446: ST_TO_ADDR
71447: LD_VAR 0 4
71451: PUSH
71452: FOR_TO
71453: IFFALSE 71482
// units_path := Replace ( units_path , i , path ) ;
71455: LD_ADDR_VAR 0 16
71459: PUSH
71460: LD_VAR 0 16
71464: PPUSH
71465: LD_VAR 0 7
71469: PPUSH
71470: LD_VAR 0 5
71474: PPUSH
71475: CALL_OW 1
71479: ST_TO_ADDR
71480: GO 71452
71482: POP
71483: POP
// repeat for i = group downto 1 do
71484: LD_ADDR_VAR 0 7
71488: PUSH
71489: DOUBLE
71490: LD_VAR 0 4
71494: INC
71495: ST_TO_ADDR
71496: LD_INT 1
71498: PUSH
71499: FOR_DOWNTO
71500: IFFALSE 75622
// begin wait ( 5 ) ;
71502: LD_INT 5
71504: PPUSH
71505: CALL_OW 67
// tmp := [ ] ;
71509: LD_ADDR_VAR 0 14
71513: PUSH
71514: EMPTY
71515: ST_TO_ADDR
// attacking := false ;
71516: LD_ADDR_VAR 0 29
71520: PUSH
71521: LD_INT 0
71523: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
71524: LD_VAR 0 4
71528: PUSH
71529: LD_VAR 0 7
71533: ARRAY
71534: PPUSH
71535: CALL_OW 301
71539: PUSH
71540: LD_VAR 0 4
71544: PUSH
71545: LD_VAR 0 7
71549: ARRAY
71550: NOT
71551: OR
71552: IFFALSE 71661
// begin if GetType ( group [ i ] ) = unit_human then
71554: LD_VAR 0 4
71558: PUSH
71559: LD_VAR 0 7
71563: ARRAY
71564: PPUSH
71565: CALL_OW 247
71569: PUSH
71570: LD_INT 1
71572: EQUAL
71573: IFFALSE 71619
// begin to_heal := to_heal diff group [ i ] ;
71575: LD_ADDR_VAR 0 30
71579: PUSH
71580: LD_VAR 0 30
71584: PUSH
71585: LD_VAR 0 4
71589: PUSH
71590: LD_VAR 0 7
71594: ARRAY
71595: DIFF
71596: ST_TO_ADDR
// healers := healers diff group [ i ] ;
71597: LD_ADDR_VAR 0 31
71601: PUSH
71602: LD_VAR 0 31
71606: PUSH
71607: LD_VAR 0 4
71611: PUSH
71612: LD_VAR 0 7
71616: ARRAY
71617: DIFF
71618: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
71619: LD_ADDR_VAR 0 4
71623: PUSH
71624: LD_VAR 0 4
71628: PPUSH
71629: LD_VAR 0 7
71633: PPUSH
71634: CALL_OW 3
71638: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
71639: LD_ADDR_VAR 0 16
71643: PUSH
71644: LD_VAR 0 16
71648: PPUSH
71649: LD_VAR 0 7
71653: PPUSH
71654: CALL_OW 3
71658: ST_TO_ADDR
// continue ;
71659: GO 71499
// end ; if f_repair then
71661: LD_VAR 0 22
71665: IFFALSE 72154
// begin if GetType ( group [ i ] ) = unit_vehicle then
71667: LD_VAR 0 4
71671: PUSH
71672: LD_VAR 0 7
71676: ARRAY
71677: PPUSH
71678: CALL_OW 247
71682: PUSH
71683: LD_INT 2
71685: EQUAL
71686: IFFALSE 71876
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
71688: LD_VAR 0 4
71692: PUSH
71693: LD_VAR 0 7
71697: ARRAY
71698: PPUSH
71699: CALL_OW 256
71703: PUSH
71704: LD_INT 700
71706: LESS
71707: PUSH
71708: LD_VAR 0 4
71712: PUSH
71713: LD_VAR 0 7
71717: ARRAY
71718: PUSH
71719: LD_VAR 0 32
71723: IN
71724: NOT
71725: AND
71726: IFFALSE 71750
// to_repair := to_repair union group [ i ] ;
71728: LD_ADDR_VAR 0 32
71732: PUSH
71733: LD_VAR 0 32
71737: PUSH
71738: LD_VAR 0 4
71742: PUSH
71743: LD_VAR 0 7
71747: ARRAY
71748: UNION
71749: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
71750: LD_VAR 0 4
71754: PUSH
71755: LD_VAR 0 7
71759: ARRAY
71760: PPUSH
71761: CALL_OW 256
71765: PUSH
71766: LD_INT 1000
71768: EQUAL
71769: PUSH
71770: LD_VAR 0 4
71774: PUSH
71775: LD_VAR 0 7
71779: ARRAY
71780: PUSH
71781: LD_VAR 0 32
71785: IN
71786: AND
71787: IFFALSE 71811
// to_repair := to_repair diff group [ i ] ;
71789: LD_ADDR_VAR 0 32
71793: PUSH
71794: LD_VAR 0 32
71798: PUSH
71799: LD_VAR 0 4
71803: PUSH
71804: LD_VAR 0 7
71808: ARRAY
71809: DIFF
71810: ST_TO_ADDR
// if group [ i ] in to_repair then
71811: LD_VAR 0 4
71815: PUSH
71816: LD_VAR 0 7
71820: ARRAY
71821: PUSH
71822: LD_VAR 0 32
71826: IN
71827: IFFALSE 71874
// begin if not IsInArea ( group [ i ] , f_repair ) then
71829: LD_VAR 0 4
71833: PUSH
71834: LD_VAR 0 7
71838: ARRAY
71839: PPUSH
71840: LD_VAR 0 22
71844: PPUSH
71845: CALL_OW 308
71849: NOT
71850: IFFALSE 71872
// ComMoveToArea ( group [ i ] , f_repair ) ;
71852: LD_VAR 0 4
71856: PUSH
71857: LD_VAR 0 7
71861: ARRAY
71862: PPUSH
71863: LD_VAR 0 22
71867: PPUSH
71868: CALL_OW 113
// continue ;
71872: GO 71499
// end ; end else
71874: GO 72154
// if group [ i ] in repairs then
71876: LD_VAR 0 4
71880: PUSH
71881: LD_VAR 0 7
71885: ARRAY
71886: PUSH
71887: LD_VAR 0 33
71891: IN
71892: IFFALSE 72154
// begin if IsInUnit ( group [ i ] ) then
71894: LD_VAR 0 4
71898: PUSH
71899: LD_VAR 0 7
71903: ARRAY
71904: PPUSH
71905: CALL_OW 310
71909: IFFALSE 71977
// begin z := IsInUnit ( group [ i ] ) ;
71911: LD_ADDR_VAR 0 13
71915: PUSH
71916: LD_VAR 0 4
71920: PUSH
71921: LD_VAR 0 7
71925: ARRAY
71926: PPUSH
71927: CALL_OW 310
71931: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
71932: LD_VAR 0 13
71936: PUSH
71937: LD_VAR 0 32
71941: IN
71942: PUSH
71943: LD_VAR 0 13
71947: PPUSH
71948: LD_VAR 0 22
71952: PPUSH
71953: CALL_OW 308
71957: AND
71958: IFFALSE 71975
// ComExitVehicle ( group [ i ] ) ;
71960: LD_VAR 0 4
71964: PUSH
71965: LD_VAR 0 7
71969: ARRAY
71970: PPUSH
71971: CALL_OW 121
// end else
71975: GO 72154
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
71977: LD_ADDR_VAR 0 13
71981: PUSH
71982: LD_VAR 0 4
71986: PPUSH
71987: LD_INT 95
71989: PUSH
71990: LD_VAR 0 22
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 58
72001: PUSH
72002: EMPTY
72003: LIST
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PPUSH
72009: CALL_OW 72
72013: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
72014: LD_VAR 0 4
72018: PUSH
72019: LD_VAR 0 7
72023: ARRAY
72024: PPUSH
72025: CALL_OW 314
72029: NOT
72030: IFFALSE 72152
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
72032: LD_ADDR_VAR 0 10
72036: PUSH
72037: LD_VAR 0 13
72041: PPUSH
72042: LD_VAR 0 4
72046: PUSH
72047: LD_VAR 0 7
72051: ARRAY
72052: PPUSH
72053: CALL_OW 74
72057: ST_TO_ADDR
// if not x then
72058: LD_VAR 0 10
72062: NOT
72063: IFFALSE 72067
// continue ;
72065: GO 71499
// if GetLives ( x ) < 1000 then
72067: LD_VAR 0 10
72071: PPUSH
72072: CALL_OW 256
72076: PUSH
72077: LD_INT 1000
72079: LESS
72080: IFFALSE 72104
// ComRepairVehicle ( group [ i ] , x ) else
72082: LD_VAR 0 4
72086: PUSH
72087: LD_VAR 0 7
72091: ARRAY
72092: PPUSH
72093: LD_VAR 0 10
72097: PPUSH
72098: CALL_OW 129
72102: GO 72152
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
72104: LD_VAR 0 23
72108: PUSH
72109: LD_VAR 0 4
72113: PUSH
72114: LD_VAR 0 7
72118: ARRAY
72119: PPUSH
72120: CALL_OW 256
72124: PUSH
72125: LD_INT 1000
72127: LESS
72128: AND
72129: NOT
72130: IFFALSE 72152
// ComEnterUnit ( group [ i ] , x ) ;
72132: LD_VAR 0 4
72136: PUSH
72137: LD_VAR 0 7
72141: ARRAY
72142: PPUSH
72143: LD_VAR 0 10
72147: PPUSH
72148: CALL_OW 120
// end ; continue ;
72152: GO 71499
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
72154: LD_VAR 0 23
72158: PUSH
72159: LD_VAR 0 4
72163: PUSH
72164: LD_VAR 0 7
72168: ARRAY
72169: PPUSH
72170: CALL_OW 247
72174: PUSH
72175: LD_INT 1
72177: EQUAL
72178: AND
72179: IFFALSE 72657
// begin if group [ i ] in healers then
72181: LD_VAR 0 4
72185: PUSH
72186: LD_VAR 0 7
72190: ARRAY
72191: PUSH
72192: LD_VAR 0 31
72196: IN
72197: IFFALSE 72470
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
72199: LD_VAR 0 4
72203: PUSH
72204: LD_VAR 0 7
72208: ARRAY
72209: PPUSH
72210: LD_VAR 0 23
72214: PPUSH
72215: CALL_OW 308
72219: NOT
72220: PUSH
72221: LD_VAR 0 4
72225: PUSH
72226: LD_VAR 0 7
72230: ARRAY
72231: PPUSH
72232: CALL_OW 314
72236: NOT
72237: AND
72238: IFFALSE 72262
// ComMoveToArea ( group [ i ] , f_heal ) else
72240: LD_VAR 0 4
72244: PUSH
72245: LD_VAR 0 7
72249: ARRAY
72250: PPUSH
72251: LD_VAR 0 23
72255: PPUSH
72256: CALL_OW 113
72260: GO 72468
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
72262: LD_VAR 0 4
72266: PUSH
72267: LD_VAR 0 7
72271: ARRAY
72272: PPUSH
72273: CALL 37768 0 1
72277: PPUSH
72278: CALL_OW 256
72282: PUSH
72283: LD_INT 1000
72285: EQUAL
72286: IFFALSE 72305
// ComStop ( group [ i ] ) else
72288: LD_VAR 0 4
72292: PUSH
72293: LD_VAR 0 7
72297: ARRAY
72298: PPUSH
72299: CALL_OW 141
72303: GO 72468
// if not HasTask ( group [ i ] ) and to_heal then
72305: LD_VAR 0 4
72309: PUSH
72310: LD_VAR 0 7
72314: ARRAY
72315: PPUSH
72316: CALL_OW 314
72320: NOT
72321: PUSH
72322: LD_VAR 0 30
72326: AND
72327: IFFALSE 72468
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
72329: LD_ADDR_VAR 0 13
72333: PUSH
72334: LD_VAR 0 30
72338: PPUSH
72339: LD_INT 3
72341: PUSH
72342: LD_INT 54
72344: PUSH
72345: EMPTY
72346: LIST
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: PPUSH
72352: CALL_OW 72
72356: PPUSH
72357: LD_VAR 0 4
72361: PUSH
72362: LD_VAR 0 7
72366: ARRAY
72367: PPUSH
72368: CALL_OW 74
72372: ST_TO_ADDR
// if z then
72373: LD_VAR 0 13
72377: IFFALSE 72468
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
72379: LD_INT 91
72381: PUSH
72382: LD_VAR 0 13
72386: PUSH
72387: LD_INT 10
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 81
72397: PUSH
72398: LD_VAR 0 13
72402: PPUSH
72403: CALL_OW 255
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PPUSH
72416: CALL_OW 69
72420: PUSH
72421: LD_INT 0
72423: EQUAL
72424: IFFALSE 72448
// ComHeal ( group [ i ] , z ) else
72426: LD_VAR 0 4
72430: PUSH
72431: LD_VAR 0 7
72435: ARRAY
72436: PPUSH
72437: LD_VAR 0 13
72441: PPUSH
72442: CALL_OW 128
72446: GO 72468
// ComMoveToArea ( group [ i ] , f_heal ) ;
72448: LD_VAR 0 4
72452: PUSH
72453: LD_VAR 0 7
72457: ARRAY
72458: PPUSH
72459: LD_VAR 0 23
72463: PPUSH
72464: CALL_OW 113
// end ; continue ;
72468: GO 71499
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
72470: LD_VAR 0 4
72474: PUSH
72475: LD_VAR 0 7
72479: ARRAY
72480: PPUSH
72481: CALL_OW 256
72485: PUSH
72486: LD_INT 700
72488: LESS
72489: PUSH
72490: LD_VAR 0 4
72494: PUSH
72495: LD_VAR 0 7
72499: ARRAY
72500: PUSH
72501: LD_VAR 0 30
72505: IN
72506: NOT
72507: AND
72508: IFFALSE 72532
// to_heal := to_heal union group [ i ] ;
72510: LD_ADDR_VAR 0 30
72514: PUSH
72515: LD_VAR 0 30
72519: PUSH
72520: LD_VAR 0 4
72524: PUSH
72525: LD_VAR 0 7
72529: ARRAY
72530: UNION
72531: ST_TO_ADDR
// if group [ i ] in to_heal then
72532: LD_VAR 0 4
72536: PUSH
72537: LD_VAR 0 7
72541: ARRAY
72542: PUSH
72543: LD_VAR 0 30
72547: IN
72548: IFFALSE 72657
// begin if GetLives ( group [ i ] ) = 1000 then
72550: LD_VAR 0 4
72554: PUSH
72555: LD_VAR 0 7
72559: ARRAY
72560: PPUSH
72561: CALL_OW 256
72565: PUSH
72566: LD_INT 1000
72568: EQUAL
72569: IFFALSE 72595
// to_heal := to_heal diff group [ i ] else
72571: LD_ADDR_VAR 0 30
72575: PUSH
72576: LD_VAR 0 30
72580: PUSH
72581: LD_VAR 0 4
72585: PUSH
72586: LD_VAR 0 7
72590: ARRAY
72591: DIFF
72592: ST_TO_ADDR
72593: GO 72657
// begin if not IsInArea ( group [ i ] , to_heal ) then
72595: LD_VAR 0 4
72599: PUSH
72600: LD_VAR 0 7
72604: ARRAY
72605: PPUSH
72606: LD_VAR 0 30
72610: PPUSH
72611: CALL_OW 308
72615: NOT
72616: IFFALSE 72640
// ComMoveToArea ( group [ i ] , f_heal ) else
72618: LD_VAR 0 4
72622: PUSH
72623: LD_VAR 0 7
72627: ARRAY
72628: PPUSH
72629: LD_VAR 0 23
72633: PPUSH
72634: CALL_OW 113
72638: GO 72655
// ComHold ( group [ i ] ) ;
72640: LD_VAR 0 4
72644: PUSH
72645: LD_VAR 0 7
72649: ARRAY
72650: PPUSH
72651: CALL_OW 140
// continue ;
72655: GO 71499
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
72657: LD_VAR 0 4
72661: PUSH
72662: LD_VAR 0 7
72666: ARRAY
72667: PPUSH
72668: LD_INT 10
72670: PPUSH
72671: CALL 36188 0 2
72675: NOT
72676: PUSH
72677: LD_VAR 0 16
72681: PUSH
72682: LD_VAR 0 7
72686: ARRAY
72687: PUSH
72688: EMPTY
72689: EQUAL
72690: NOT
72691: AND
72692: IFFALSE 72958
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
72694: LD_VAR 0 4
72698: PUSH
72699: LD_VAR 0 7
72703: ARRAY
72704: PPUSH
72705: CALL_OW 262
72709: PUSH
72710: LD_INT 1
72712: PUSH
72713: LD_INT 2
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: IN
72720: IFFALSE 72761
// if GetFuel ( group [ i ] ) < 10 then
72722: LD_VAR 0 4
72726: PUSH
72727: LD_VAR 0 7
72731: ARRAY
72732: PPUSH
72733: CALL_OW 261
72737: PUSH
72738: LD_INT 10
72740: LESS
72741: IFFALSE 72761
// SetFuel ( group [ i ] , 12 ) ;
72743: LD_VAR 0 4
72747: PUSH
72748: LD_VAR 0 7
72752: ARRAY
72753: PPUSH
72754: LD_INT 12
72756: PPUSH
72757: CALL_OW 240
// if units_path [ i ] then
72761: LD_VAR 0 16
72765: PUSH
72766: LD_VAR 0 7
72770: ARRAY
72771: IFFALSE 72956
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
72773: LD_VAR 0 4
72777: PUSH
72778: LD_VAR 0 7
72782: ARRAY
72783: PPUSH
72784: LD_VAR 0 16
72788: PUSH
72789: LD_VAR 0 7
72793: ARRAY
72794: PUSH
72795: LD_INT 1
72797: ARRAY
72798: PUSH
72799: LD_INT 1
72801: ARRAY
72802: PPUSH
72803: LD_VAR 0 16
72807: PUSH
72808: LD_VAR 0 7
72812: ARRAY
72813: PUSH
72814: LD_INT 1
72816: ARRAY
72817: PUSH
72818: LD_INT 2
72820: ARRAY
72821: PPUSH
72822: CALL_OW 297
72826: PUSH
72827: LD_INT 6
72829: GREATER
72830: IFFALSE 72905
// begin if not HasTask ( group [ i ] ) then
72832: LD_VAR 0 4
72836: PUSH
72837: LD_VAR 0 7
72841: ARRAY
72842: PPUSH
72843: CALL_OW 314
72847: NOT
72848: IFFALSE 72903
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
72850: LD_VAR 0 4
72854: PUSH
72855: LD_VAR 0 7
72859: ARRAY
72860: PPUSH
72861: LD_VAR 0 16
72865: PUSH
72866: LD_VAR 0 7
72870: ARRAY
72871: PUSH
72872: LD_INT 1
72874: ARRAY
72875: PUSH
72876: LD_INT 1
72878: ARRAY
72879: PPUSH
72880: LD_VAR 0 16
72884: PUSH
72885: LD_VAR 0 7
72889: ARRAY
72890: PUSH
72891: LD_INT 1
72893: ARRAY
72894: PUSH
72895: LD_INT 2
72897: ARRAY
72898: PPUSH
72899: CALL_OW 114
// end else
72903: GO 72956
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
72905: LD_ADDR_VAR 0 15
72909: PUSH
72910: LD_VAR 0 16
72914: PUSH
72915: LD_VAR 0 7
72919: ARRAY
72920: PPUSH
72921: LD_INT 1
72923: PPUSH
72924: CALL_OW 3
72928: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
72929: LD_ADDR_VAR 0 16
72933: PUSH
72934: LD_VAR 0 16
72938: PPUSH
72939: LD_VAR 0 7
72943: PPUSH
72944: LD_VAR 0 15
72948: PPUSH
72949: CALL_OW 1
72953: ST_TO_ADDR
// continue ;
72954: GO 71499
// end ; end ; end else
72956: GO 75620
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
72958: LD_ADDR_VAR 0 14
72962: PUSH
72963: LD_INT 81
72965: PUSH
72966: LD_VAR 0 4
72970: PUSH
72971: LD_VAR 0 7
72975: ARRAY
72976: PPUSH
72977: CALL_OW 255
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: PPUSH
72986: CALL_OW 69
72990: ST_TO_ADDR
// if not tmp then
72991: LD_VAR 0 14
72995: NOT
72996: IFFALSE 73000
// continue ;
72998: GO 71499
// if f_ignore_area then
73000: LD_VAR 0 17
73004: IFFALSE 73092
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
73006: LD_ADDR_VAR 0 15
73010: PUSH
73011: LD_VAR 0 14
73015: PPUSH
73016: LD_INT 3
73018: PUSH
73019: LD_INT 92
73021: PUSH
73022: LD_VAR 0 17
73026: PUSH
73027: LD_INT 1
73029: ARRAY
73030: PUSH
73031: LD_VAR 0 17
73035: PUSH
73036: LD_INT 2
73038: ARRAY
73039: PUSH
73040: LD_VAR 0 17
73044: PUSH
73045: LD_INT 3
73047: ARRAY
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PPUSH
73059: CALL_OW 72
73063: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
73064: LD_VAR 0 14
73068: PUSH
73069: LD_VAR 0 15
73073: DIFF
73074: IFFALSE 73092
// tmp := tmp diff tmp2 ;
73076: LD_ADDR_VAR 0 14
73080: PUSH
73081: LD_VAR 0 14
73085: PUSH
73086: LD_VAR 0 15
73090: DIFF
73091: ST_TO_ADDR
// end ; if not f_murder then
73092: LD_VAR 0 20
73096: NOT
73097: IFFALSE 73155
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
73099: LD_ADDR_VAR 0 15
73103: PUSH
73104: LD_VAR 0 14
73108: PPUSH
73109: LD_INT 3
73111: PUSH
73112: LD_INT 50
73114: PUSH
73115: EMPTY
73116: LIST
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PPUSH
73122: CALL_OW 72
73126: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
73127: LD_VAR 0 14
73131: PUSH
73132: LD_VAR 0 15
73136: DIFF
73137: IFFALSE 73155
// tmp := tmp diff tmp2 ;
73139: LD_ADDR_VAR 0 14
73143: PUSH
73144: LD_VAR 0 14
73148: PUSH
73149: LD_VAR 0 15
73153: DIFF
73154: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
73155: LD_ADDR_VAR 0 14
73159: PUSH
73160: LD_VAR 0 4
73164: PUSH
73165: LD_VAR 0 7
73169: ARRAY
73170: PPUSH
73171: LD_VAR 0 14
73175: PPUSH
73176: LD_INT 1
73178: PPUSH
73179: LD_INT 1
73181: PPUSH
73182: CALL 9831 0 4
73186: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
73187: LD_VAR 0 4
73191: PUSH
73192: LD_VAR 0 7
73196: ARRAY
73197: PPUSH
73198: CALL_OW 257
73202: PUSH
73203: LD_INT 1
73205: EQUAL
73206: IFFALSE 73654
// begin if WantPlant ( group [ i ] ) then
73208: LD_VAR 0 4
73212: PUSH
73213: LD_VAR 0 7
73217: ARRAY
73218: PPUSH
73219: CALL 9332 0 1
73223: IFFALSE 73227
// continue ;
73225: GO 71499
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
73227: LD_VAR 0 18
73231: PUSH
73232: LD_VAR 0 4
73236: PUSH
73237: LD_VAR 0 7
73241: ARRAY
73242: PPUSH
73243: CALL_OW 310
73247: NOT
73248: AND
73249: PUSH
73250: LD_VAR 0 14
73254: PUSH
73255: LD_INT 1
73257: ARRAY
73258: PUSH
73259: LD_VAR 0 14
73263: PPUSH
73264: LD_INT 21
73266: PUSH
73267: LD_INT 2
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 58
73276: PUSH
73277: EMPTY
73278: LIST
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PPUSH
73284: CALL_OW 72
73288: IN
73289: AND
73290: IFFALSE 73326
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
73292: LD_VAR 0 4
73296: PUSH
73297: LD_VAR 0 7
73301: ARRAY
73302: PPUSH
73303: LD_VAR 0 14
73307: PUSH
73308: LD_INT 1
73310: ARRAY
73311: PPUSH
73312: CALL_OW 120
// attacking := true ;
73316: LD_ADDR_VAR 0 29
73320: PUSH
73321: LD_INT 1
73323: ST_TO_ADDR
// continue ;
73324: GO 71499
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
73326: LD_VAR 0 26
73330: PUSH
73331: LD_VAR 0 4
73335: PUSH
73336: LD_VAR 0 7
73340: ARRAY
73341: PPUSH
73342: CALL_OW 257
73346: PUSH
73347: LD_INT 1
73349: EQUAL
73350: AND
73351: PUSH
73352: LD_VAR 0 4
73356: PUSH
73357: LD_VAR 0 7
73361: ARRAY
73362: PPUSH
73363: CALL_OW 256
73367: PUSH
73368: LD_INT 800
73370: LESS
73371: AND
73372: PUSH
73373: LD_VAR 0 4
73377: PUSH
73378: LD_VAR 0 7
73382: ARRAY
73383: PPUSH
73384: CALL_OW 318
73388: NOT
73389: AND
73390: IFFALSE 73407
// ComCrawl ( group [ i ] ) ;
73392: LD_VAR 0 4
73396: PUSH
73397: LD_VAR 0 7
73401: ARRAY
73402: PPUSH
73403: CALL_OW 137
// if f_mines then
73407: LD_VAR 0 21
73411: IFFALSE 73654
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
73413: LD_VAR 0 14
73417: PUSH
73418: LD_INT 1
73420: ARRAY
73421: PPUSH
73422: CALL_OW 247
73426: PUSH
73427: LD_INT 3
73429: EQUAL
73430: PUSH
73431: LD_VAR 0 14
73435: PUSH
73436: LD_INT 1
73438: ARRAY
73439: PUSH
73440: LD_VAR 0 27
73444: IN
73445: NOT
73446: AND
73447: IFFALSE 73654
// begin x := GetX ( tmp [ 1 ] ) ;
73449: LD_ADDR_VAR 0 10
73453: PUSH
73454: LD_VAR 0 14
73458: PUSH
73459: LD_INT 1
73461: ARRAY
73462: PPUSH
73463: CALL_OW 250
73467: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
73468: LD_ADDR_VAR 0 11
73472: PUSH
73473: LD_VAR 0 14
73477: PUSH
73478: LD_INT 1
73480: ARRAY
73481: PPUSH
73482: CALL_OW 251
73486: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
73487: LD_ADDR_VAR 0 12
73491: PUSH
73492: LD_VAR 0 4
73496: PUSH
73497: LD_VAR 0 7
73501: ARRAY
73502: PPUSH
73503: CALL 36273 0 1
73507: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
73508: LD_VAR 0 4
73512: PUSH
73513: LD_VAR 0 7
73517: ARRAY
73518: PPUSH
73519: LD_VAR 0 10
73523: PPUSH
73524: LD_VAR 0 11
73528: PPUSH
73529: LD_VAR 0 14
73533: PUSH
73534: LD_INT 1
73536: ARRAY
73537: PPUSH
73538: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
73542: LD_VAR 0 4
73546: PUSH
73547: LD_VAR 0 7
73551: ARRAY
73552: PPUSH
73553: LD_VAR 0 10
73557: PPUSH
73558: LD_VAR 0 12
73562: PPUSH
73563: LD_INT 7
73565: PPUSH
73566: CALL_OW 272
73570: PPUSH
73571: LD_VAR 0 11
73575: PPUSH
73576: LD_VAR 0 12
73580: PPUSH
73581: LD_INT 7
73583: PPUSH
73584: CALL_OW 273
73588: PPUSH
73589: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
73593: LD_VAR 0 4
73597: PUSH
73598: LD_VAR 0 7
73602: ARRAY
73603: PPUSH
73604: LD_INT 71
73606: PPUSH
73607: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
73611: LD_ADDR_VAR 0 27
73615: PUSH
73616: LD_VAR 0 27
73620: PPUSH
73621: LD_VAR 0 27
73625: PUSH
73626: LD_INT 1
73628: PLUS
73629: PPUSH
73630: LD_VAR 0 14
73634: PUSH
73635: LD_INT 1
73637: ARRAY
73638: PPUSH
73639: CALL_OW 1
73643: ST_TO_ADDR
// attacking := true ;
73644: LD_ADDR_VAR 0 29
73648: PUSH
73649: LD_INT 1
73651: ST_TO_ADDR
// continue ;
73652: GO 71499
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
73654: LD_VAR 0 4
73658: PUSH
73659: LD_VAR 0 7
73663: ARRAY
73664: PPUSH
73665: CALL_OW 257
73669: PUSH
73670: LD_INT 17
73672: EQUAL
73673: PUSH
73674: LD_VAR 0 4
73678: PUSH
73679: LD_VAR 0 7
73683: ARRAY
73684: PPUSH
73685: CALL_OW 110
73689: PUSH
73690: LD_INT 71
73692: EQUAL
73693: NOT
73694: AND
73695: IFFALSE 73841
// begin attacking := false ;
73697: LD_ADDR_VAR 0 29
73701: PUSH
73702: LD_INT 0
73704: ST_TO_ADDR
// k := 5 ;
73705: LD_ADDR_VAR 0 9
73709: PUSH
73710: LD_INT 5
73712: ST_TO_ADDR
// if tmp < k then
73713: LD_VAR 0 14
73717: PUSH
73718: LD_VAR 0 9
73722: LESS
73723: IFFALSE 73735
// k := tmp ;
73725: LD_ADDR_VAR 0 9
73729: PUSH
73730: LD_VAR 0 14
73734: ST_TO_ADDR
// for j = 1 to k do
73735: LD_ADDR_VAR 0 8
73739: PUSH
73740: DOUBLE
73741: LD_INT 1
73743: DEC
73744: ST_TO_ADDR
73745: LD_VAR 0 9
73749: PUSH
73750: FOR_TO
73751: IFFALSE 73839
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
73753: LD_VAR 0 14
73757: PUSH
73758: LD_VAR 0 8
73762: ARRAY
73763: PUSH
73764: LD_VAR 0 14
73768: PPUSH
73769: LD_INT 58
73771: PUSH
73772: EMPTY
73773: LIST
73774: PPUSH
73775: CALL_OW 72
73779: IN
73780: NOT
73781: IFFALSE 73837
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
73783: LD_VAR 0 4
73787: PUSH
73788: LD_VAR 0 7
73792: ARRAY
73793: PPUSH
73794: LD_VAR 0 14
73798: PUSH
73799: LD_VAR 0 8
73803: ARRAY
73804: PPUSH
73805: CALL_OW 115
// attacking := true ;
73809: LD_ADDR_VAR 0 29
73813: PUSH
73814: LD_INT 1
73816: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
73817: LD_VAR 0 4
73821: PUSH
73822: LD_VAR 0 7
73826: ARRAY
73827: PPUSH
73828: LD_INT 71
73830: PPUSH
73831: CALL_OW 109
// continue ;
73835: GO 73750
// end ; end ;
73837: GO 73750
73839: POP
73840: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
73841: LD_VAR 0 4
73845: PUSH
73846: LD_VAR 0 7
73850: ARRAY
73851: PPUSH
73852: CALL_OW 257
73856: PUSH
73857: LD_INT 8
73859: EQUAL
73860: PUSH
73861: LD_VAR 0 4
73865: PUSH
73866: LD_VAR 0 7
73870: ARRAY
73871: PPUSH
73872: CALL_OW 264
73876: PUSH
73877: LD_INT 28
73879: PUSH
73880: LD_INT 45
73882: PUSH
73883: LD_INT 7
73885: PUSH
73886: LD_INT 47
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: IN
73895: OR
73896: IFFALSE 74152
// begin attacking := false ;
73898: LD_ADDR_VAR 0 29
73902: PUSH
73903: LD_INT 0
73905: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
73906: LD_VAR 0 14
73910: PUSH
73911: LD_INT 1
73913: ARRAY
73914: PPUSH
73915: CALL_OW 266
73919: PUSH
73920: LD_INT 32
73922: PUSH
73923: LD_INT 31
73925: PUSH
73926: LD_INT 33
73928: PUSH
73929: LD_INT 4
73931: PUSH
73932: LD_INT 5
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: IN
73942: IFFALSE 74128
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
73944: LD_ADDR_VAR 0 9
73948: PUSH
73949: LD_VAR 0 14
73953: PUSH
73954: LD_INT 1
73956: ARRAY
73957: PPUSH
73958: CALL_OW 266
73962: PPUSH
73963: LD_VAR 0 14
73967: PUSH
73968: LD_INT 1
73970: ARRAY
73971: PPUSH
73972: CALL_OW 250
73976: PPUSH
73977: LD_VAR 0 14
73981: PUSH
73982: LD_INT 1
73984: ARRAY
73985: PPUSH
73986: CALL_OW 251
73990: PPUSH
73991: LD_VAR 0 14
73995: PUSH
73996: LD_INT 1
73998: ARRAY
73999: PPUSH
74000: CALL_OW 254
74004: PPUSH
74005: LD_VAR 0 14
74009: PUSH
74010: LD_INT 1
74012: ARRAY
74013: PPUSH
74014: CALL_OW 248
74018: PPUSH
74019: LD_INT 0
74021: PPUSH
74022: CALL 17643 0 6
74026: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
74027: LD_ADDR_VAR 0 8
74031: PUSH
74032: LD_VAR 0 4
74036: PUSH
74037: LD_VAR 0 7
74041: ARRAY
74042: PPUSH
74043: LD_VAR 0 9
74047: PPUSH
74048: CALL 36313 0 2
74052: ST_TO_ADDR
// if j then
74053: LD_VAR 0 8
74057: IFFALSE 74126
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
74059: LD_VAR 0 8
74063: PUSH
74064: LD_INT 1
74066: ARRAY
74067: PPUSH
74068: LD_VAR 0 8
74072: PUSH
74073: LD_INT 2
74075: ARRAY
74076: PPUSH
74077: CALL_OW 488
74081: IFFALSE 74126
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
74083: LD_VAR 0 4
74087: PUSH
74088: LD_VAR 0 7
74092: ARRAY
74093: PPUSH
74094: LD_VAR 0 8
74098: PUSH
74099: LD_INT 1
74101: ARRAY
74102: PPUSH
74103: LD_VAR 0 8
74107: PUSH
74108: LD_INT 2
74110: ARRAY
74111: PPUSH
74112: CALL_OW 116
// attacking := true ;
74116: LD_ADDR_VAR 0 29
74120: PUSH
74121: LD_INT 1
74123: ST_TO_ADDR
// continue ;
74124: GO 71499
// end ; end else
74126: GO 74152
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74128: LD_VAR 0 4
74132: PUSH
74133: LD_VAR 0 7
74137: ARRAY
74138: PPUSH
74139: LD_VAR 0 14
74143: PUSH
74144: LD_INT 1
74146: ARRAY
74147: PPUSH
74148: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
74152: LD_VAR 0 4
74156: PUSH
74157: LD_VAR 0 7
74161: ARRAY
74162: PPUSH
74163: CALL_OW 265
74167: PUSH
74168: LD_INT 11
74170: EQUAL
74171: IFFALSE 74449
// begin k := 10 ;
74173: LD_ADDR_VAR 0 9
74177: PUSH
74178: LD_INT 10
74180: ST_TO_ADDR
// x := 0 ;
74181: LD_ADDR_VAR 0 10
74185: PUSH
74186: LD_INT 0
74188: ST_TO_ADDR
// if tmp < k then
74189: LD_VAR 0 14
74193: PUSH
74194: LD_VAR 0 9
74198: LESS
74199: IFFALSE 74211
// k := tmp ;
74201: LD_ADDR_VAR 0 9
74205: PUSH
74206: LD_VAR 0 14
74210: ST_TO_ADDR
// for j = k downto 1 do
74211: LD_ADDR_VAR 0 8
74215: PUSH
74216: DOUBLE
74217: LD_VAR 0 9
74221: INC
74222: ST_TO_ADDR
74223: LD_INT 1
74225: PUSH
74226: FOR_DOWNTO
74227: IFFALSE 74302
// begin if GetType ( tmp [ j ] ) = unit_human then
74229: LD_VAR 0 14
74233: PUSH
74234: LD_VAR 0 8
74238: ARRAY
74239: PPUSH
74240: CALL_OW 247
74244: PUSH
74245: LD_INT 1
74247: EQUAL
74248: IFFALSE 74300
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
74250: LD_VAR 0 4
74254: PUSH
74255: LD_VAR 0 7
74259: ARRAY
74260: PPUSH
74261: LD_VAR 0 14
74265: PUSH
74266: LD_VAR 0 8
74270: ARRAY
74271: PPUSH
74272: CALL 36584 0 2
// x := tmp [ j ] ;
74276: LD_ADDR_VAR 0 10
74280: PUSH
74281: LD_VAR 0 14
74285: PUSH
74286: LD_VAR 0 8
74290: ARRAY
74291: ST_TO_ADDR
// attacking := true ;
74292: LD_ADDR_VAR 0 29
74296: PUSH
74297: LD_INT 1
74299: ST_TO_ADDR
// end ; end ;
74300: GO 74226
74302: POP
74303: POP
// if not x then
74304: LD_VAR 0 10
74308: NOT
74309: IFFALSE 74449
// begin attacking := true ;
74311: LD_ADDR_VAR 0 29
74315: PUSH
74316: LD_INT 1
74318: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
74319: LD_VAR 0 4
74323: PUSH
74324: LD_VAR 0 7
74328: ARRAY
74329: PPUSH
74330: CALL_OW 250
74334: PPUSH
74335: LD_VAR 0 4
74339: PUSH
74340: LD_VAR 0 7
74344: ARRAY
74345: PPUSH
74346: CALL_OW 251
74350: PPUSH
74351: CALL_OW 546
74355: PUSH
74356: LD_INT 2
74358: ARRAY
74359: PUSH
74360: LD_VAR 0 14
74364: PUSH
74365: LD_INT 1
74367: ARRAY
74368: PPUSH
74369: CALL_OW 250
74373: PPUSH
74374: LD_VAR 0 14
74378: PUSH
74379: LD_INT 1
74381: ARRAY
74382: PPUSH
74383: CALL_OW 251
74387: PPUSH
74388: CALL_OW 546
74392: PUSH
74393: LD_INT 2
74395: ARRAY
74396: EQUAL
74397: IFFALSE 74425
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
74399: LD_VAR 0 4
74403: PUSH
74404: LD_VAR 0 7
74408: ARRAY
74409: PPUSH
74410: LD_VAR 0 14
74414: PUSH
74415: LD_INT 1
74417: ARRAY
74418: PPUSH
74419: CALL 36584 0 2
74423: GO 74449
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74425: LD_VAR 0 4
74429: PUSH
74430: LD_VAR 0 7
74434: ARRAY
74435: PPUSH
74436: LD_VAR 0 14
74440: PUSH
74441: LD_INT 1
74443: ARRAY
74444: PPUSH
74445: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
74449: LD_VAR 0 4
74453: PUSH
74454: LD_VAR 0 7
74458: ARRAY
74459: PPUSH
74460: CALL_OW 264
74464: PUSH
74465: LD_INT 29
74467: EQUAL
74468: IFFALSE 74834
// begin if WantsToAttack ( group [ i ] ) in bombed then
74470: LD_VAR 0 4
74474: PUSH
74475: LD_VAR 0 7
74479: ARRAY
74480: PPUSH
74481: CALL_OW 319
74485: PUSH
74486: LD_VAR 0 28
74490: IN
74491: IFFALSE 74495
// continue ;
74493: GO 71499
// k := 8 ;
74495: LD_ADDR_VAR 0 9
74499: PUSH
74500: LD_INT 8
74502: ST_TO_ADDR
// x := 0 ;
74503: LD_ADDR_VAR 0 10
74507: PUSH
74508: LD_INT 0
74510: ST_TO_ADDR
// if tmp < k then
74511: LD_VAR 0 14
74515: PUSH
74516: LD_VAR 0 9
74520: LESS
74521: IFFALSE 74533
// k := tmp ;
74523: LD_ADDR_VAR 0 9
74527: PUSH
74528: LD_VAR 0 14
74532: ST_TO_ADDR
// for j = 1 to k do
74533: LD_ADDR_VAR 0 8
74537: PUSH
74538: DOUBLE
74539: LD_INT 1
74541: DEC
74542: ST_TO_ADDR
74543: LD_VAR 0 9
74547: PUSH
74548: FOR_TO
74549: IFFALSE 74681
// begin if GetType ( tmp [ j ] ) = unit_building then
74551: LD_VAR 0 14
74555: PUSH
74556: LD_VAR 0 8
74560: ARRAY
74561: PPUSH
74562: CALL_OW 247
74566: PUSH
74567: LD_INT 3
74569: EQUAL
74570: IFFALSE 74679
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
74572: LD_VAR 0 14
74576: PUSH
74577: LD_VAR 0 8
74581: ARRAY
74582: PUSH
74583: LD_VAR 0 28
74587: IN
74588: NOT
74589: PUSH
74590: LD_VAR 0 14
74594: PUSH
74595: LD_VAR 0 8
74599: ARRAY
74600: PPUSH
74601: CALL_OW 313
74605: AND
74606: IFFALSE 74679
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74608: LD_VAR 0 4
74612: PUSH
74613: LD_VAR 0 7
74617: ARRAY
74618: PPUSH
74619: LD_VAR 0 14
74623: PUSH
74624: LD_VAR 0 8
74628: ARRAY
74629: PPUSH
74630: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
74634: LD_ADDR_VAR 0 28
74638: PUSH
74639: LD_VAR 0 28
74643: PPUSH
74644: LD_VAR 0 28
74648: PUSH
74649: LD_INT 1
74651: PLUS
74652: PPUSH
74653: LD_VAR 0 14
74657: PUSH
74658: LD_VAR 0 8
74662: ARRAY
74663: PPUSH
74664: CALL_OW 1
74668: ST_TO_ADDR
// attacking := true ;
74669: LD_ADDR_VAR 0 29
74673: PUSH
74674: LD_INT 1
74676: ST_TO_ADDR
// break ;
74677: GO 74681
// end ; end ;
74679: GO 74548
74681: POP
74682: POP
// if not attacking and f_attack_depot then
74683: LD_VAR 0 29
74687: NOT
74688: PUSH
74689: LD_VAR 0 25
74693: AND
74694: IFFALSE 74789
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74696: LD_ADDR_VAR 0 13
74700: PUSH
74701: LD_VAR 0 14
74705: PPUSH
74706: LD_INT 2
74708: PUSH
74709: LD_INT 30
74711: PUSH
74712: LD_INT 0
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 30
74721: PUSH
74722: LD_INT 1
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: LIST
74733: PPUSH
74734: CALL_OW 72
74738: ST_TO_ADDR
// if z then
74739: LD_VAR 0 13
74743: IFFALSE 74789
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
74745: LD_VAR 0 4
74749: PUSH
74750: LD_VAR 0 7
74754: ARRAY
74755: PPUSH
74756: LD_VAR 0 13
74760: PPUSH
74761: LD_VAR 0 4
74765: PUSH
74766: LD_VAR 0 7
74770: ARRAY
74771: PPUSH
74772: CALL_OW 74
74776: PPUSH
74777: CALL_OW 115
// attacking := true ;
74781: LD_ADDR_VAR 0 29
74785: PUSH
74786: LD_INT 1
74788: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
74789: LD_VAR 0 4
74793: PUSH
74794: LD_VAR 0 7
74798: ARRAY
74799: PPUSH
74800: CALL_OW 256
74804: PUSH
74805: LD_INT 500
74807: LESS
74808: IFFALSE 74834
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74810: LD_VAR 0 4
74814: PUSH
74815: LD_VAR 0 7
74819: ARRAY
74820: PPUSH
74821: LD_VAR 0 14
74825: PUSH
74826: LD_INT 1
74828: ARRAY
74829: PPUSH
74830: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
74834: LD_VAR 0 4
74838: PUSH
74839: LD_VAR 0 7
74843: ARRAY
74844: PPUSH
74845: CALL_OW 264
74849: PUSH
74850: LD_INT 49
74852: EQUAL
74853: IFFALSE 74974
// begin if not HasTask ( group [ i ] ) then
74855: LD_VAR 0 4
74859: PUSH
74860: LD_VAR 0 7
74864: ARRAY
74865: PPUSH
74866: CALL_OW 314
74870: NOT
74871: IFFALSE 74974
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
74873: LD_ADDR_VAR 0 9
74877: PUSH
74878: LD_INT 81
74880: PUSH
74881: LD_VAR 0 4
74885: PUSH
74886: LD_VAR 0 7
74890: ARRAY
74891: PPUSH
74892: CALL_OW 255
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: PPUSH
74901: CALL_OW 69
74905: PPUSH
74906: LD_VAR 0 4
74910: PUSH
74911: LD_VAR 0 7
74915: ARRAY
74916: PPUSH
74917: CALL_OW 74
74921: ST_TO_ADDR
// if k then
74922: LD_VAR 0 9
74926: IFFALSE 74974
// if GetDistUnits ( group [ i ] , k ) > 10 then
74928: LD_VAR 0 4
74932: PUSH
74933: LD_VAR 0 7
74937: ARRAY
74938: PPUSH
74939: LD_VAR 0 9
74943: PPUSH
74944: CALL_OW 296
74948: PUSH
74949: LD_INT 10
74951: GREATER
74952: IFFALSE 74974
// ComMoveUnit ( group [ i ] , k ) ;
74954: LD_VAR 0 4
74958: PUSH
74959: LD_VAR 0 7
74963: ARRAY
74964: PPUSH
74965: LD_VAR 0 9
74969: PPUSH
74970: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74974: LD_VAR 0 4
74978: PUSH
74979: LD_VAR 0 7
74983: ARRAY
74984: PPUSH
74985: CALL_OW 256
74989: PUSH
74990: LD_INT 250
74992: LESS
74993: PUSH
74994: LD_VAR 0 4
74998: PUSH
74999: LD_VAR 0 7
75003: ARRAY
75004: PUSH
75005: LD_INT 21
75007: PUSH
75008: LD_INT 2
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: LD_INT 23
75017: PUSH
75018: LD_INT 2
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PPUSH
75029: CALL_OW 69
75033: IN
75034: AND
75035: IFFALSE 75160
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
75037: LD_ADDR_VAR 0 9
75041: PUSH
75042: LD_OWVAR 3
75046: PUSH
75047: LD_VAR 0 4
75051: PUSH
75052: LD_VAR 0 7
75056: ARRAY
75057: DIFF
75058: PPUSH
75059: LD_VAR 0 4
75063: PUSH
75064: LD_VAR 0 7
75068: ARRAY
75069: PPUSH
75070: CALL_OW 74
75074: ST_TO_ADDR
// if not k then
75075: LD_VAR 0 9
75079: NOT
75080: IFFALSE 75084
// continue ;
75082: GO 71499
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
75084: LD_VAR 0 9
75088: PUSH
75089: LD_INT 81
75091: PUSH
75092: LD_VAR 0 4
75096: PUSH
75097: LD_VAR 0 7
75101: ARRAY
75102: PPUSH
75103: CALL_OW 255
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PPUSH
75112: CALL_OW 69
75116: IN
75117: PUSH
75118: LD_VAR 0 9
75122: PPUSH
75123: LD_VAR 0 4
75127: PUSH
75128: LD_VAR 0 7
75132: ARRAY
75133: PPUSH
75134: CALL_OW 296
75138: PUSH
75139: LD_INT 5
75141: LESS
75142: AND
75143: IFFALSE 75160
// ComAutodestruct ( group [ i ] ) ;
75145: LD_VAR 0 4
75149: PUSH
75150: LD_VAR 0 7
75154: ARRAY
75155: PPUSH
75156: CALL 36482 0 1
// end ; if f_attack_depot then
75160: LD_VAR 0 25
75164: IFFALSE 75276
// begin k := 6 ;
75166: LD_ADDR_VAR 0 9
75170: PUSH
75171: LD_INT 6
75173: ST_TO_ADDR
// if tmp < k then
75174: LD_VAR 0 14
75178: PUSH
75179: LD_VAR 0 9
75183: LESS
75184: IFFALSE 75196
// k := tmp ;
75186: LD_ADDR_VAR 0 9
75190: PUSH
75191: LD_VAR 0 14
75195: ST_TO_ADDR
// for j = 1 to k do
75196: LD_ADDR_VAR 0 8
75200: PUSH
75201: DOUBLE
75202: LD_INT 1
75204: DEC
75205: ST_TO_ADDR
75206: LD_VAR 0 9
75210: PUSH
75211: FOR_TO
75212: IFFALSE 75274
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
75214: LD_VAR 0 8
75218: PPUSH
75219: CALL_OW 266
75223: PUSH
75224: LD_INT 0
75226: PUSH
75227: LD_INT 1
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: IN
75234: IFFALSE 75272
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
75236: LD_VAR 0 4
75240: PUSH
75241: LD_VAR 0 7
75245: ARRAY
75246: PPUSH
75247: LD_VAR 0 14
75251: PUSH
75252: LD_VAR 0 8
75256: ARRAY
75257: PPUSH
75258: CALL_OW 115
// attacking := true ;
75262: LD_ADDR_VAR 0 29
75266: PUSH
75267: LD_INT 1
75269: ST_TO_ADDR
// break ;
75270: GO 75274
// end ;
75272: GO 75211
75274: POP
75275: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
75276: LD_VAR 0 4
75280: PUSH
75281: LD_VAR 0 7
75285: ARRAY
75286: PPUSH
75287: CALL_OW 302
75291: PUSH
75292: LD_VAR 0 29
75296: NOT
75297: AND
75298: IFFALSE 75620
// begin if GetTag ( group [ i ] ) = 71 then
75300: LD_VAR 0 4
75304: PUSH
75305: LD_VAR 0 7
75309: ARRAY
75310: PPUSH
75311: CALL_OW 110
75315: PUSH
75316: LD_INT 71
75318: EQUAL
75319: IFFALSE 75360
// begin if HasTask ( group [ i ] ) then
75321: LD_VAR 0 4
75325: PUSH
75326: LD_VAR 0 7
75330: ARRAY
75331: PPUSH
75332: CALL_OW 314
75336: IFFALSE 75342
// continue else
75338: GO 71499
75340: GO 75360
// SetTag ( group [ i ] , 0 ) ;
75342: LD_VAR 0 4
75346: PUSH
75347: LD_VAR 0 7
75351: ARRAY
75352: PPUSH
75353: LD_INT 0
75355: PPUSH
75356: CALL_OW 109
// end ; k := 8 ;
75360: LD_ADDR_VAR 0 9
75364: PUSH
75365: LD_INT 8
75367: ST_TO_ADDR
// x := 0 ;
75368: LD_ADDR_VAR 0 10
75372: PUSH
75373: LD_INT 0
75375: ST_TO_ADDR
// if tmp < k then
75376: LD_VAR 0 14
75380: PUSH
75381: LD_VAR 0 9
75385: LESS
75386: IFFALSE 75398
// k := tmp ;
75388: LD_ADDR_VAR 0 9
75392: PUSH
75393: LD_VAR 0 14
75397: ST_TO_ADDR
// for j = 1 to k do
75398: LD_ADDR_VAR 0 8
75402: PUSH
75403: DOUBLE
75404: LD_INT 1
75406: DEC
75407: ST_TO_ADDR
75408: LD_VAR 0 9
75412: PUSH
75413: FOR_TO
75414: IFFALSE 75512
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
75416: LD_VAR 0 14
75420: PUSH
75421: LD_VAR 0 8
75425: ARRAY
75426: PPUSH
75427: CALL_OW 247
75431: PUSH
75432: LD_INT 1
75434: EQUAL
75435: PUSH
75436: LD_VAR 0 14
75440: PUSH
75441: LD_VAR 0 8
75445: ARRAY
75446: PPUSH
75447: CALL_OW 256
75451: PUSH
75452: LD_INT 250
75454: LESS
75455: PUSH
75456: LD_VAR 0 20
75460: AND
75461: PUSH
75462: LD_VAR 0 20
75466: NOT
75467: PUSH
75468: LD_VAR 0 14
75472: PUSH
75473: LD_VAR 0 8
75477: ARRAY
75478: PPUSH
75479: CALL_OW 256
75483: PUSH
75484: LD_INT 250
75486: GREATEREQUAL
75487: AND
75488: OR
75489: AND
75490: IFFALSE 75510
// begin x := tmp [ j ] ;
75492: LD_ADDR_VAR 0 10
75496: PUSH
75497: LD_VAR 0 14
75501: PUSH
75502: LD_VAR 0 8
75506: ARRAY
75507: ST_TO_ADDR
// break ;
75508: GO 75512
// end ;
75510: GO 75413
75512: POP
75513: POP
// if x then
75514: LD_VAR 0 10
75518: IFFALSE 75542
// ComAttackUnit ( group [ i ] , x ) else
75520: LD_VAR 0 4
75524: PUSH
75525: LD_VAR 0 7
75529: ARRAY
75530: PPUSH
75531: LD_VAR 0 10
75535: PPUSH
75536: CALL_OW 115
75540: GO 75566
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
75542: LD_VAR 0 4
75546: PUSH
75547: LD_VAR 0 7
75551: ARRAY
75552: PPUSH
75553: LD_VAR 0 14
75557: PUSH
75558: LD_INT 1
75560: ARRAY
75561: PPUSH
75562: CALL_OW 115
// if not HasTask ( group [ i ] ) then
75566: LD_VAR 0 4
75570: PUSH
75571: LD_VAR 0 7
75575: ARRAY
75576: PPUSH
75577: CALL_OW 314
75581: NOT
75582: IFFALSE 75620
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
75584: LD_VAR 0 4
75588: PUSH
75589: LD_VAR 0 7
75593: ARRAY
75594: PPUSH
75595: LD_VAR 0 14
75599: PPUSH
75600: LD_VAR 0 4
75604: PUSH
75605: LD_VAR 0 7
75609: ARRAY
75610: PPUSH
75611: CALL_OW 74
75615: PPUSH
75616: CALL_OW 115
// end ; end ; end ;
75620: GO 71499
75622: POP
75623: POP
// wait ( 0 0$2 ) ;
75624: LD_INT 70
75626: PPUSH
75627: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
75631: LD_VAR 0 4
75635: NOT
75636: PUSH
75637: LD_VAR 0 4
75641: PUSH
75642: EMPTY
75643: EQUAL
75644: OR
75645: PUSH
75646: LD_INT 81
75648: PUSH
75649: LD_VAR 0 35
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PPUSH
75658: CALL_OW 69
75662: NOT
75663: OR
75664: IFFALSE 71484
// end ;
75666: LD_VAR 0 2
75670: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
75671: LD_INT 0
75673: PPUSH
75674: PPUSH
75675: PPUSH
75676: PPUSH
75677: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
75678: LD_VAR 0 1
75682: NOT
75683: PUSH
75684: LD_EXP 14
75688: PUSH
75689: LD_VAR 0 1
75693: ARRAY
75694: NOT
75695: OR
75696: PUSH
75697: LD_VAR 0 2
75701: NOT
75702: OR
75703: PUSH
75704: LD_VAR 0 3
75708: NOT
75709: OR
75710: IFFALSE 75714
// exit ;
75712: GO 76227
// side := mc_sides [ base ] ;
75714: LD_ADDR_VAR 0 6
75718: PUSH
75719: LD_EXP 40
75723: PUSH
75724: LD_VAR 0 1
75728: ARRAY
75729: ST_TO_ADDR
// if not side then
75730: LD_VAR 0 6
75734: NOT
75735: IFFALSE 75739
// exit ;
75737: GO 76227
// for i in solds do
75739: LD_ADDR_VAR 0 7
75743: PUSH
75744: LD_VAR 0 2
75748: PUSH
75749: FOR_IN
75750: IFFALSE 75811
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
75752: LD_VAR 0 7
75756: PPUSH
75757: CALL_OW 310
75761: PPUSH
75762: CALL_OW 266
75766: PUSH
75767: LD_INT 32
75769: PUSH
75770: LD_INT 31
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: IN
75777: IFFALSE 75797
// solds := solds diff i else
75779: LD_ADDR_VAR 0 2
75783: PUSH
75784: LD_VAR 0 2
75788: PUSH
75789: LD_VAR 0 7
75793: DIFF
75794: ST_TO_ADDR
75795: GO 75809
// SetTag ( i , 18 ) ;
75797: LD_VAR 0 7
75801: PPUSH
75802: LD_INT 18
75804: PPUSH
75805: CALL_OW 109
75809: GO 75749
75811: POP
75812: POP
// if not solds then
75813: LD_VAR 0 2
75817: NOT
75818: IFFALSE 75822
// exit ;
75820: GO 76227
// repeat wait ( 0 0$1 ) ;
75822: LD_INT 35
75824: PPUSH
75825: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
75829: LD_ADDR_VAR 0 5
75833: PUSH
75834: LD_VAR 0 6
75838: PPUSH
75839: LD_VAR 0 3
75843: PPUSH
75844: CALL 6197 0 2
75848: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
75849: LD_EXP 14
75853: PUSH
75854: LD_VAR 0 1
75858: ARRAY
75859: NOT
75860: PUSH
75861: LD_EXP 14
75865: PUSH
75866: LD_VAR 0 1
75870: ARRAY
75871: PUSH
75872: EMPTY
75873: EQUAL
75874: OR
75875: IFFALSE 75912
// begin for i in solds do
75877: LD_ADDR_VAR 0 7
75881: PUSH
75882: LD_VAR 0 2
75886: PUSH
75887: FOR_IN
75888: IFFALSE 75901
// ComStop ( i ) ;
75890: LD_VAR 0 7
75894: PPUSH
75895: CALL_OW 141
75899: GO 75887
75901: POP
75902: POP
// solds := [ ] ;
75903: LD_ADDR_VAR 0 2
75907: PUSH
75908: EMPTY
75909: ST_TO_ADDR
// exit ;
75910: GO 76227
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
75912: LD_VAR 0 5
75916: NOT
75917: PUSH
75918: LD_VAR 0 5
75922: PUSH
75923: LD_INT 3
75925: GREATER
75926: OR
75927: PUSH
75928: LD_EXP 36
75932: PUSH
75933: LD_VAR 0 1
75937: ARRAY
75938: OR
75939: IFFALSE 75980
// begin for i in solds do
75941: LD_ADDR_VAR 0 7
75945: PUSH
75946: LD_VAR 0 2
75950: PUSH
75951: FOR_IN
75952: IFFALSE 75976
// if HasTask ( i ) then
75954: LD_VAR 0 7
75958: PPUSH
75959: CALL_OW 314
75963: IFFALSE 75974
// ComStop ( i ) ;
75965: LD_VAR 0 7
75969: PPUSH
75970: CALL_OW 141
75974: GO 75951
75976: POP
75977: POP
// break ;
75978: GO 76215
// end ; for i in solds do
75980: LD_ADDR_VAR 0 7
75984: PUSH
75985: LD_VAR 0 2
75989: PUSH
75990: FOR_IN
75991: IFFALSE 76207
// begin if IsInUnit ( i ) then
75993: LD_VAR 0 7
75997: PPUSH
75998: CALL_OW 310
76002: IFFALSE 76013
// ComExitBuilding ( i ) ;
76004: LD_VAR 0 7
76008: PPUSH
76009: CALL_OW 122
// if GetLives ( i ) > 333 then
76013: LD_VAR 0 7
76017: PPUSH
76018: CALL_OW 256
76022: PUSH
76023: LD_INT 333
76025: GREATER
76026: IFFALSE 76054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76028: LD_VAR 0 7
76032: PPUSH
76033: LD_VAR 0 5
76037: PPUSH
76038: LD_VAR 0 7
76042: PPUSH
76043: CALL_OW 74
76047: PPUSH
76048: CALL_OW 115
76052: GO 76205
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
76054: LD_ADDR_VAR 0 8
76058: PUSH
76059: LD_EXP 14
76063: PUSH
76064: LD_VAR 0 1
76068: ARRAY
76069: PPUSH
76070: LD_INT 2
76072: PUSH
76073: LD_INT 30
76075: PUSH
76076: LD_INT 0
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: PUSH
76083: LD_INT 30
76085: PUSH
76086: LD_INT 1
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 30
76095: PUSH
76096: LD_INT 6
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: PPUSH
76109: CALL_OW 72
76113: PPUSH
76114: LD_VAR 0 7
76118: PPUSH
76119: CALL_OW 74
76123: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
76124: LD_VAR 0 7
76128: PPUSH
76129: LD_VAR 0 8
76133: PPUSH
76134: CALL_OW 250
76138: PPUSH
76139: LD_INT 3
76141: PPUSH
76142: LD_INT 5
76144: PPUSH
76145: CALL_OW 272
76149: PPUSH
76150: LD_VAR 0 8
76154: PPUSH
76155: CALL_OW 251
76159: PPUSH
76160: LD_INT 3
76162: PPUSH
76163: LD_INT 5
76165: PPUSH
76166: CALL_OW 273
76170: PPUSH
76171: CALL_OW 111
// SetTag ( i , 0 ) ;
76175: LD_VAR 0 7
76179: PPUSH
76180: LD_INT 0
76182: PPUSH
76183: CALL_OW 109
// solds := solds diff i ;
76187: LD_ADDR_VAR 0 2
76191: PUSH
76192: LD_VAR 0 2
76196: PUSH
76197: LD_VAR 0 7
76201: DIFF
76202: ST_TO_ADDR
// continue ;
76203: GO 75990
// end ; end ;
76205: GO 75990
76207: POP
76208: POP
// until solds ;
76209: LD_VAR 0 2
76213: IFFALSE 75822
// MC_Reset ( base , 18 ) ;
76215: LD_VAR 0 1
76219: PPUSH
76220: LD_INT 18
76222: PPUSH
76223: CALL 44889 0 2
// end ;
76227: LD_VAR 0 4
76231: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
76232: LD_INT 0
76234: PPUSH
76235: PPUSH
76236: PPUSH
76237: PPUSH
76238: PPUSH
76239: PPUSH
76240: PPUSH
76241: PPUSH
76242: PPUSH
76243: PPUSH
76244: PPUSH
76245: PPUSH
76246: PPUSH
76247: PPUSH
76248: PPUSH
76249: PPUSH
76250: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
76251: LD_ADDR_VAR 0 13
76255: PUSH
76256: LD_EXP 14
76260: PUSH
76261: LD_VAR 0 1
76265: ARRAY
76266: PPUSH
76267: LD_INT 25
76269: PUSH
76270: LD_INT 3
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PPUSH
76277: CALL_OW 72
76281: ST_TO_ADDR
// if mc_remote_driver [ base ] then
76282: LD_EXP 54
76286: PUSH
76287: LD_VAR 0 1
76291: ARRAY
76292: IFFALSE 76316
// mechs := mechs diff mc_remote_driver [ base ] ;
76294: LD_ADDR_VAR 0 13
76298: PUSH
76299: LD_VAR 0 13
76303: PUSH
76304: LD_EXP 54
76308: PUSH
76309: LD_VAR 0 1
76313: ARRAY
76314: DIFF
76315: ST_TO_ADDR
// for i in mechs do
76316: LD_ADDR_VAR 0 5
76320: PUSH
76321: LD_VAR 0 13
76325: PUSH
76326: FOR_IN
76327: IFFALSE 76362
// if GetTag ( i ) > 0 then
76329: LD_VAR 0 5
76333: PPUSH
76334: CALL_OW 110
76338: PUSH
76339: LD_INT 0
76341: GREATER
76342: IFFALSE 76360
// mechs := mechs diff i ;
76344: LD_ADDR_VAR 0 13
76348: PUSH
76349: LD_VAR 0 13
76353: PUSH
76354: LD_VAR 0 5
76358: DIFF
76359: ST_TO_ADDR
76360: GO 76326
76362: POP
76363: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
76364: LD_ADDR_VAR 0 9
76368: PUSH
76369: LD_EXP 14
76373: PUSH
76374: LD_VAR 0 1
76378: ARRAY
76379: PPUSH
76380: LD_INT 2
76382: PUSH
76383: LD_INT 25
76385: PUSH
76386: LD_INT 1
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 25
76395: PUSH
76396: LD_INT 5
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 25
76405: PUSH
76406: LD_INT 8
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 25
76415: PUSH
76416: LD_INT 9
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: PPUSH
76430: CALL_OW 72
76434: ST_TO_ADDR
// if not defenders and not solds then
76435: LD_VAR 0 2
76439: NOT
76440: PUSH
76441: LD_VAR 0 9
76445: NOT
76446: AND
76447: IFFALSE 76451
// exit ;
76449: GO 78077
// depot_under_attack := false ;
76451: LD_ADDR_VAR 0 17
76455: PUSH
76456: LD_INT 0
76458: ST_TO_ADDR
// sold_defenders := [ ] ;
76459: LD_ADDR_VAR 0 18
76463: PUSH
76464: EMPTY
76465: ST_TO_ADDR
// if mechs then
76466: LD_VAR 0 13
76470: IFFALSE 76599
// for i in defenders do
76472: LD_ADDR_VAR 0 5
76476: PUSH
76477: LD_VAR 0 2
76481: PUSH
76482: FOR_IN
76483: IFFALSE 76597
// begin SetTag ( i , 20 ) ;
76485: LD_VAR 0 5
76489: PPUSH
76490: LD_INT 20
76492: PPUSH
76493: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
76497: LD_VAR 0 5
76501: PPUSH
76502: CALL_OW 263
76506: PUSH
76507: LD_INT 1
76509: EQUAL
76510: PUSH
76511: LD_VAR 0 5
76515: PPUSH
76516: CALL_OW 311
76520: NOT
76521: AND
76522: PUSH
76523: LD_VAR 0 13
76527: AND
76528: IFFALSE 76595
// begin un := mechs [ 1 ] ;
76530: LD_ADDR_VAR 0 11
76534: PUSH
76535: LD_VAR 0 13
76539: PUSH
76540: LD_INT 1
76542: ARRAY
76543: ST_TO_ADDR
// ComExitBuilding ( un ) ;
76544: LD_VAR 0 11
76548: PPUSH
76549: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
76553: LD_VAR 0 11
76557: PPUSH
76558: LD_VAR 0 5
76562: PPUSH
76563: CALL_OW 180
// SetTag ( un , 19 ) ;
76567: LD_VAR 0 11
76571: PPUSH
76572: LD_INT 19
76574: PPUSH
76575: CALL_OW 109
// mechs := mechs diff un ;
76579: LD_ADDR_VAR 0 13
76583: PUSH
76584: LD_VAR 0 13
76588: PUSH
76589: LD_VAR 0 11
76593: DIFF
76594: ST_TO_ADDR
// end ; end ;
76595: GO 76482
76597: POP
76598: POP
// if solds then
76599: LD_VAR 0 9
76603: IFFALSE 76662
// for i in solds do
76605: LD_ADDR_VAR 0 5
76609: PUSH
76610: LD_VAR 0 9
76614: PUSH
76615: FOR_IN
76616: IFFALSE 76660
// if not GetTag ( i ) then
76618: LD_VAR 0 5
76622: PPUSH
76623: CALL_OW 110
76627: NOT
76628: IFFALSE 76658
// begin defenders := defenders union i ;
76630: LD_ADDR_VAR 0 2
76634: PUSH
76635: LD_VAR 0 2
76639: PUSH
76640: LD_VAR 0 5
76644: UNION
76645: ST_TO_ADDR
// SetTag ( i , 18 ) ;
76646: LD_VAR 0 5
76650: PPUSH
76651: LD_INT 18
76653: PPUSH
76654: CALL_OW 109
// end ;
76658: GO 76615
76660: POP
76661: POP
// repeat wait ( 0 0$1 ) ;
76662: LD_INT 35
76664: PPUSH
76665: CALL_OW 67
// enemy := mc_scan [ base ] ;
76669: LD_ADDR_VAR 0 3
76673: PUSH
76674: LD_EXP 37
76678: PUSH
76679: LD_VAR 0 1
76683: ARRAY
76684: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
76685: LD_EXP 14
76689: PUSH
76690: LD_VAR 0 1
76694: ARRAY
76695: NOT
76696: PUSH
76697: LD_EXP 14
76701: PUSH
76702: LD_VAR 0 1
76706: ARRAY
76707: PUSH
76708: EMPTY
76709: EQUAL
76710: OR
76711: IFFALSE 76748
// begin for i in defenders do
76713: LD_ADDR_VAR 0 5
76717: PUSH
76718: LD_VAR 0 2
76722: PUSH
76723: FOR_IN
76724: IFFALSE 76737
// ComStop ( i ) ;
76726: LD_VAR 0 5
76730: PPUSH
76731: CALL_OW 141
76735: GO 76723
76737: POP
76738: POP
// defenders := [ ] ;
76739: LD_ADDR_VAR 0 2
76743: PUSH
76744: EMPTY
76745: ST_TO_ADDR
// exit ;
76746: GO 78077
// end ; for i in defenders do
76748: LD_ADDR_VAR 0 5
76752: PUSH
76753: LD_VAR 0 2
76757: PUSH
76758: FOR_IN
76759: IFFALSE 77577
// begin e := NearestUnitToUnit ( enemy , i ) ;
76761: LD_ADDR_VAR 0 14
76765: PUSH
76766: LD_VAR 0 3
76770: PPUSH
76771: LD_VAR 0 5
76775: PPUSH
76776: CALL_OW 74
76780: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76781: LD_ADDR_VAR 0 8
76785: PUSH
76786: LD_EXP 14
76790: PUSH
76791: LD_VAR 0 1
76795: ARRAY
76796: PPUSH
76797: LD_INT 2
76799: PUSH
76800: LD_INT 30
76802: PUSH
76803: LD_INT 0
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 30
76812: PUSH
76813: LD_INT 1
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: LIST
76824: PPUSH
76825: CALL_OW 72
76829: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
76830: LD_ADDR_VAR 0 17
76834: PUSH
76835: LD_VAR 0 8
76839: NOT
76840: PUSH
76841: LD_VAR 0 8
76845: PPUSH
76846: LD_INT 3
76848: PUSH
76849: LD_INT 24
76851: PUSH
76852: LD_INT 600
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PPUSH
76863: CALL_OW 72
76867: OR
76868: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
76869: LD_VAR 0 5
76873: PPUSH
76874: CALL_OW 247
76878: PUSH
76879: LD_INT 2
76881: DOUBLE
76882: EQUAL
76883: IFTRUE 76887
76885: GO 77283
76887: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
76888: LD_VAR 0 5
76892: PPUSH
76893: CALL_OW 256
76897: PUSH
76898: LD_INT 650
76900: GREATER
76901: PUSH
76902: LD_VAR 0 5
76906: PPUSH
76907: LD_VAR 0 14
76911: PPUSH
76912: CALL_OW 296
76916: PUSH
76917: LD_INT 40
76919: LESS
76920: PUSH
76921: LD_VAR 0 14
76925: PPUSH
76926: LD_EXP 39
76930: PUSH
76931: LD_VAR 0 1
76935: ARRAY
76936: PPUSH
76937: CALL_OW 308
76941: OR
76942: AND
76943: IFFALSE 77065
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
76945: LD_VAR 0 5
76949: PPUSH
76950: CALL_OW 262
76954: PUSH
76955: LD_INT 1
76957: EQUAL
76958: PUSH
76959: LD_VAR 0 5
76963: PPUSH
76964: CALL_OW 261
76968: PUSH
76969: LD_INT 30
76971: LESS
76972: AND
76973: PUSH
76974: LD_VAR 0 8
76978: AND
76979: IFFALSE 77049
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
76981: LD_VAR 0 5
76985: PPUSH
76986: LD_VAR 0 8
76990: PPUSH
76991: LD_VAR 0 5
76995: PPUSH
76996: CALL_OW 74
77000: PPUSH
77001: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
77005: LD_VAR 0 5
77009: PPUSH
77010: LD_VAR 0 8
77014: PPUSH
77015: LD_VAR 0 5
77019: PPUSH
77020: CALL_OW 74
77024: PPUSH
77025: CALL_OW 296
77029: PUSH
77030: LD_INT 6
77032: LESS
77033: IFFALSE 77047
// SetFuel ( i , 100 ) ;
77035: LD_VAR 0 5
77039: PPUSH
77040: LD_INT 100
77042: PPUSH
77043: CALL_OW 240
// end else
77047: GO 77063
// ComAttackUnit ( i , e ) ;
77049: LD_VAR 0 5
77053: PPUSH
77054: LD_VAR 0 14
77058: PPUSH
77059: CALL_OW 115
// end else
77063: GO 77166
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
77065: LD_VAR 0 14
77069: PPUSH
77070: LD_EXP 39
77074: PUSH
77075: LD_VAR 0 1
77079: ARRAY
77080: PPUSH
77081: CALL_OW 308
77085: NOT
77086: PUSH
77087: LD_VAR 0 5
77091: PPUSH
77092: LD_VAR 0 14
77096: PPUSH
77097: CALL_OW 296
77101: PUSH
77102: LD_INT 40
77104: GREATEREQUAL
77105: AND
77106: PUSH
77107: LD_VAR 0 5
77111: PPUSH
77112: CALL_OW 256
77116: PUSH
77117: LD_INT 650
77119: LESSEQUAL
77120: OR
77121: PUSH
77122: LD_VAR 0 5
77126: PPUSH
77127: LD_EXP 38
77131: PUSH
77132: LD_VAR 0 1
77136: ARRAY
77137: PPUSH
77138: CALL_OW 308
77142: NOT
77143: AND
77144: IFFALSE 77166
// ComMoveToArea ( i , mc_parking [ base ] ) ;
77146: LD_VAR 0 5
77150: PPUSH
77151: LD_EXP 38
77155: PUSH
77156: LD_VAR 0 1
77160: ARRAY
77161: PPUSH
77162: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
77166: LD_VAR 0 5
77170: PPUSH
77171: CALL_OW 256
77175: PUSH
77176: LD_INT 998
77178: LESS
77179: PUSH
77180: LD_VAR 0 5
77184: PPUSH
77185: CALL_OW 263
77189: PUSH
77190: LD_INT 1
77192: EQUAL
77193: AND
77194: PUSH
77195: LD_VAR 0 5
77199: PPUSH
77200: CALL_OW 311
77204: AND
77205: PUSH
77206: LD_VAR 0 5
77210: PPUSH
77211: LD_EXP 38
77215: PUSH
77216: LD_VAR 0 1
77220: ARRAY
77221: PPUSH
77222: CALL_OW 308
77226: AND
77227: IFFALSE 77281
// begin mech := IsDrivenBy ( i ) ;
77229: LD_ADDR_VAR 0 10
77233: PUSH
77234: LD_VAR 0 5
77238: PPUSH
77239: CALL_OW 311
77243: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
77244: LD_VAR 0 10
77248: PPUSH
77249: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
77253: LD_VAR 0 10
77257: PPUSH
77258: LD_VAR 0 5
77262: PPUSH
77263: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
77267: LD_VAR 0 10
77271: PPUSH
77272: LD_VAR 0 5
77276: PPUSH
77277: CALL_OW 180
// end ; end ; unit_human :
77281: GO 77548
77283: LD_INT 1
77285: DOUBLE
77286: EQUAL
77287: IFTRUE 77291
77289: GO 77547
77291: POP
// begin b := IsInUnit ( i ) ;
77292: LD_ADDR_VAR 0 19
77296: PUSH
77297: LD_VAR 0 5
77301: PPUSH
77302: CALL_OW 310
77306: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
77307: LD_ADDR_VAR 0 20
77311: PUSH
77312: LD_VAR 0 19
77316: NOT
77317: PUSH
77318: LD_VAR 0 19
77322: PPUSH
77323: CALL_OW 266
77327: PUSH
77328: LD_INT 32
77330: PUSH
77331: LD_INT 31
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: IN
77338: OR
77339: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
77340: LD_VAR 0 17
77344: PUSH
77345: LD_VAR 0 2
77349: PPUSH
77350: LD_INT 21
77352: PUSH
77353: LD_INT 2
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PPUSH
77360: CALL_OW 72
77364: PUSH
77365: LD_INT 1
77367: LESSEQUAL
77368: OR
77369: PUSH
77370: LD_VAR 0 20
77374: AND
77375: PUSH
77376: LD_VAR 0 5
77380: PUSH
77381: LD_VAR 0 18
77385: IN
77386: NOT
77387: AND
77388: IFFALSE 77481
// begin if b then
77390: LD_VAR 0 19
77394: IFFALSE 77443
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
77396: LD_VAR 0 19
77400: PPUSH
77401: LD_VAR 0 3
77405: PPUSH
77406: LD_VAR 0 19
77410: PPUSH
77411: CALL_OW 74
77415: PPUSH
77416: CALL_OW 296
77420: PUSH
77421: LD_INT 10
77423: LESS
77424: PUSH
77425: LD_VAR 0 19
77429: PPUSH
77430: CALL_OW 461
77434: PUSH
77435: LD_INT 7
77437: NONEQUAL
77438: AND
77439: IFFALSE 77443
// continue ;
77441: GO 76758
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
77443: LD_ADDR_VAR 0 18
77447: PUSH
77448: LD_VAR 0 18
77452: PPUSH
77453: LD_VAR 0 18
77457: PUSH
77458: LD_INT 1
77460: PLUS
77461: PPUSH
77462: LD_VAR 0 5
77466: PPUSH
77467: CALL_OW 1
77471: ST_TO_ADDR
// ComExitBuilding ( i ) ;
77472: LD_VAR 0 5
77476: PPUSH
77477: CALL_OW 122
// end ; if sold_defenders then
77481: LD_VAR 0 18
77485: IFFALSE 77545
// if i in sold_defenders then
77487: LD_VAR 0 5
77491: PUSH
77492: LD_VAR 0 18
77496: IN
77497: IFFALSE 77545
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
77499: LD_VAR 0 5
77503: PPUSH
77504: CALL_OW 314
77508: NOT
77509: PUSH
77510: LD_VAR 0 5
77514: PPUSH
77515: LD_VAR 0 14
77519: PPUSH
77520: CALL_OW 296
77524: PUSH
77525: LD_INT 30
77527: LESS
77528: AND
77529: IFFALSE 77545
// ComAttackUnit ( i , e ) ;
77531: LD_VAR 0 5
77535: PPUSH
77536: LD_VAR 0 14
77540: PPUSH
77541: CALL_OW 115
// end ; end ; end ;
77545: GO 77548
77547: POP
// if IsDead ( i ) then
77548: LD_VAR 0 5
77552: PPUSH
77553: CALL_OW 301
77557: IFFALSE 77575
// defenders := defenders diff i ;
77559: LD_ADDR_VAR 0 2
77563: PUSH
77564: LD_VAR 0 2
77568: PUSH
77569: LD_VAR 0 5
77573: DIFF
77574: ST_TO_ADDR
// end ;
77575: GO 76758
77577: POP
77578: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
77579: LD_VAR 0 3
77583: NOT
77584: PUSH
77585: LD_VAR 0 2
77589: NOT
77590: OR
77591: PUSH
77592: LD_EXP 14
77596: PUSH
77597: LD_VAR 0 1
77601: ARRAY
77602: NOT
77603: OR
77604: IFFALSE 76662
// MC_Reset ( base , 18 ) ;
77606: LD_VAR 0 1
77610: PPUSH
77611: LD_INT 18
77613: PPUSH
77614: CALL 44889 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77618: LD_ADDR_VAR 0 2
77622: PUSH
77623: LD_VAR 0 2
77627: PUSH
77628: LD_VAR 0 2
77632: PPUSH
77633: LD_INT 2
77635: PUSH
77636: LD_INT 25
77638: PUSH
77639: LD_INT 1
77641: PUSH
77642: EMPTY
77643: LIST
77644: LIST
77645: PUSH
77646: LD_INT 25
77648: PUSH
77649: LD_INT 5
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: PUSH
77656: LD_INT 25
77658: PUSH
77659: LD_INT 8
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: PUSH
77666: LD_INT 25
77668: PUSH
77669: LD_INT 9
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: LIST
77680: LIST
77681: LIST
77682: PPUSH
77683: CALL_OW 72
77687: DIFF
77688: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
77689: LD_VAR 0 3
77693: NOT
77694: PUSH
77695: LD_VAR 0 2
77699: PPUSH
77700: LD_INT 21
77702: PUSH
77703: LD_INT 2
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: PPUSH
77710: CALL_OW 72
77714: AND
77715: IFFALSE 78053
// begin tmp := FilterByTag ( defenders , 19 ) ;
77717: LD_ADDR_VAR 0 12
77721: PUSH
77722: LD_VAR 0 2
77726: PPUSH
77727: LD_INT 19
77729: PPUSH
77730: CALL 37957 0 2
77734: ST_TO_ADDR
// if tmp then
77735: LD_VAR 0 12
77739: IFFALSE 77809
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
77741: LD_ADDR_VAR 0 12
77745: PUSH
77746: LD_VAR 0 12
77750: PPUSH
77751: LD_INT 25
77753: PUSH
77754: LD_INT 3
77756: PUSH
77757: EMPTY
77758: LIST
77759: LIST
77760: PPUSH
77761: CALL_OW 72
77765: ST_TO_ADDR
// if tmp then
77766: LD_VAR 0 12
77770: IFFALSE 77809
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
77772: LD_ADDR_EXP 26
77776: PUSH
77777: LD_EXP 26
77781: PPUSH
77782: LD_VAR 0 1
77786: PPUSH
77787: LD_EXP 26
77791: PUSH
77792: LD_VAR 0 1
77796: ARRAY
77797: PUSH
77798: LD_VAR 0 12
77802: UNION
77803: PPUSH
77804: CALL_OW 1
77808: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
77809: LD_VAR 0 1
77813: PPUSH
77814: LD_INT 19
77816: PPUSH
77817: CALL 44889 0 2
// repeat wait ( 0 0$1 ) ;
77821: LD_INT 35
77823: PPUSH
77824: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
77828: LD_EXP 14
77832: PUSH
77833: LD_VAR 0 1
77837: ARRAY
77838: NOT
77839: PUSH
77840: LD_EXP 14
77844: PUSH
77845: LD_VAR 0 1
77849: ARRAY
77850: PUSH
77851: EMPTY
77852: EQUAL
77853: OR
77854: IFFALSE 77891
// begin for i in defenders do
77856: LD_ADDR_VAR 0 5
77860: PUSH
77861: LD_VAR 0 2
77865: PUSH
77866: FOR_IN
77867: IFFALSE 77880
// ComStop ( i ) ;
77869: LD_VAR 0 5
77873: PPUSH
77874: CALL_OW 141
77878: GO 77866
77880: POP
77881: POP
// defenders := [ ] ;
77882: LD_ADDR_VAR 0 2
77886: PUSH
77887: EMPTY
77888: ST_TO_ADDR
// exit ;
77889: GO 78077
// end ; for i in defenders do
77891: LD_ADDR_VAR 0 5
77895: PUSH
77896: LD_VAR 0 2
77900: PUSH
77901: FOR_IN
77902: IFFALSE 77991
// begin if not IsInArea ( i , mc_parking [ base ] ) then
77904: LD_VAR 0 5
77908: PPUSH
77909: LD_EXP 38
77913: PUSH
77914: LD_VAR 0 1
77918: ARRAY
77919: PPUSH
77920: CALL_OW 308
77924: NOT
77925: IFFALSE 77949
// ComMoveToArea ( i , mc_parking [ base ] ) else
77927: LD_VAR 0 5
77931: PPUSH
77932: LD_EXP 38
77936: PUSH
77937: LD_VAR 0 1
77941: ARRAY
77942: PPUSH
77943: CALL_OW 113
77947: GO 77989
// if GetControl ( i ) = control_manual then
77949: LD_VAR 0 5
77953: PPUSH
77954: CALL_OW 263
77958: PUSH
77959: LD_INT 1
77961: EQUAL
77962: IFFALSE 77989
// if IsDrivenBy ( i ) then
77964: LD_VAR 0 5
77968: PPUSH
77969: CALL_OW 311
77973: IFFALSE 77989
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
77975: LD_VAR 0 5
77979: PPUSH
77980: CALL_OW 311
77984: PPUSH
77985: CALL_OW 121
// end ;
77989: GO 77901
77991: POP
77992: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
77993: LD_VAR 0 2
77997: PPUSH
77998: LD_INT 95
78000: PUSH
78001: LD_EXP 38
78005: PUSH
78006: LD_VAR 0 1
78010: ARRAY
78011: PUSH
78012: EMPTY
78013: LIST
78014: LIST
78015: PPUSH
78016: CALL_OW 72
78020: PUSH
78021: LD_VAR 0 2
78025: EQUAL
78026: PUSH
78027: LD_EXP 37
78031: PUSH
78032: LD_VAR 0 1
78036: ARRAY
78037: OR
78038: PUSH
78039: LD_EXP 14
78043: PUSH
78044: LD_VAR 0 1
78048: ARRAY
78049: NOT
78050: OR
78051: IFFALSE 77821
// end ; MC_Reset ( base , 19 ) ;
78053: LD_VAR 0 1
78057: PPUSH
78058: LD_INT 19
78060: PPUSH
78061: CALL 44889 0 2
// MC_Reset ( base , 20 ) ;
78065: LD_VAR 0 1
78069: PPUSH
78070: LD_INT 20
78072: PPUSH
78073: CALL 44889 0 2
// end ; end_of_file
78077: LD_VAR 0 4
78081: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78082: LD_INT 0
78084: PPUSH
78085: PPUSH
78086: PPUSH
78087: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78088: LD_VAR 0 1
78092: PPUSH
78093: CALL_OW 264
78097: PUSH
78098: LD_EXP 61
78102: EQUAL
78103: IFFALSE 78175
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78105: LD_INT 68
78107: PPUSH
78108: LD_VAR 0 1
78112: PPUSH
78113: CALL_OW 255
78117: PPUSH
78118: CALL_OW 321
78122: PUSH
78123: LD_INT 2
78125: EQUAL
78126: IFFALSE 78138
// eff := 70 else
78128: LD_ADDR_VAR 0 4
78132: PUSH
78133: LD_INT 70
78135: ST_TO_ADDR
78136: GO 78146
// eff := 30 ;
78138: LD_ADDR_VAR 0 4
78142: PUSH
78143: LD_INT 30
78145: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78146: LD_VAR 0 1
78150: PPUSH
78151: CALL_OW 250
78155: PPUSH
78156: LD_VAR 0 1
78160: PPUSH
78161: CALL_OW 251
78165: PPUSH
78166: LD_VAR 0 4
78170: PPUSH
78171: CALL_OW 495
// end ; end ;
78175: LD_VAR 0 2
78179: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78180: LD_INT 0
78182: PPUSH
// end ;
78183: LD_VAR 0 4
78187: RET
// export function SOS_Command ( cmd ) ; begin
78188: LD_INT 0
78190: PPUSH
// end ;
78191: LD_VAR 0 2
78195: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78196: LD_VAR 0 1
78200: PUSH
78201: LD_INT 254
78203: EQUAL
78204: PUSH
78205: LD_VAR 0 2
78209: PPUSH
78210: CALL_OW 264
78214: PUSH
78215: LD_EXP 59
78219: EQUAL
78220: AND
78221: PUSH
78222: LD_VAR 0 3
78226: PPUSH
78227: CALL_OW 263
78231: PUSH
78232: LD_INT 3
78234: EQUAL
78235: AND
78236: IFFALSE 78247
// DestroyUnit ( selectedUnit ) ;
78238: LD_VAR 0 3
78242: PPUSH
78243: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78247: LD_VAR 0 1
78251: PUSH
78252: LD_INT 255
78254: EQUAL
78255: PUSH
78256: LD_VAR 0 2
78260: PPUSH
78261: CALL_OW 264
78265: PUSH
78266: LD_INT 14
78268: PUSH
78269: LD_INT 53
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: IN
78276: AND
78277: PUSH
78278: LD_VAR 0 4
78282: PPUSH
78283: LD_VAR 0 5
78287: PPUSH
78288: CALL_OW 488
78292: AND
78293: IFFALSE 78317
// CutTreeXYR ( unit , x , y , 12 ) ;
78295: LD_VAR 0 2
78299: PPUSH
78300: LD_VAR 0 4
78304: PPUSH
78305: LD_VAR 0 5
78309: PPUSH
78310: LD_INT 12
78312: PPUSH
78313: CALL 78320 0 4
// end ;
78317: PPOPN 5
78319: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78320: LD_INT 0
78322: PPUSH
78323: PPUSH
78324: PPUSH
78325: PPUSH
78326: PPUSH
78327: PPUSH
78328: PPUSH
78329: PPUSH
78330: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
78331: LD_VAR 0 1
78335: NOT
78336: PUSH
78337: LD_VAR 0 2
78341: PPUSH
78342: LD_VAR 0 3
78346: PPUSH
78347: CALL_OW 488
78351: NOT
78352: OR
78353: PUSH
78354: LD_VAR 0 4
78358: NOT
78359: OR
78360: IFFALSE 78364
// exit ;
78362: GO 78704
// list := [ ] ;
78364: LD_ADDR_VAR 0 13
78368: PUSH
78369: EMPTY
78370: ST_TO_ADDR
// if x - r < 0 then
78371: LD_VAR 0 2
78375: PUSH
78376: LD_VAR 0 4
78380: MINUS
78381: PUSH
78382: LD_INT 0
78384: LESS
78385: IFFALSE 78397
// min_x := 0 else
78387: LD_ADDR_VAR 0 7
78391: PUSH
78392: LD_INT 0
78394: ST_TO_ADDR
78395: GO 78413
// min_x := x - r ;
78397: LD_ADDR_VAR 0 7
78401: PUSH
78402: LD_VAR 0 2
78406: PUSH
78407: LD_VAR 0 4
78411: MINUS
78412: ST_TO_ADDR
// if y - r < 0 then
78413: LD_VAR 0 3
78417: PUSH
78418: LD_VAR 0 4
78422: MINUS
78423: PUSH
78424: LD_INT 0
78426: LESS
78427: IFFALSE 78439
// min_y := 0 else
78429: LD_ADDR_VAR 0 8
78433: PUSH
78434: LD_INT 0
78436: ST_TO_ADDR
78437: GO 78455
// min_y := y - r ;
78439: LD_ADDR_VAR 0 8
78443: PUSH
78444: LD_VAR 0 3
78448: PUSH
78449: LD_VAR 0 4
78453: MINUS
78454: ST_TO_ADDR
// max_x := x + r ;
78455: LD_ADDR_VAR 0 9
78459: PUSH
78460: LD_VAR 0 2
78464: PUSH
78465: LD_VAR 0 4
78469: PLUS
78470: ST_TO_ADDR
// max_y := y + r ;
78471: LD_ADDR_VAR 0 10
78475: PUSH
78476: LD_VAR 0 3
78480: PUSH
78481: LD_VAR 0 4
78485: PLUS
78486: ST_TO_ADDR
// for _x = min_x to max_x do
78487: LD_ADDR_VAR 0 11
78491: PUSH
78492: DOUBLE
78493: LD_VAR 0 7
78497: DEC
78498: ST_TO_ADDR
78499: LD_VAR 0 9
78503: PUSH
78504: FOR_TO
78505: IFFALSE 78622
// for _y = min_y to max_y do
78507: LD_ADDR_VAR 0 12
78511: PUSH
78512: DOUBLE
78513: LD_VAR 0 8
78517: DEC
78518: ST_TO_ADDR
78519: LD_VAR 0 10
78523: PUSH
78524: FOR_TO
78525: IFFALSE 78618
// begin if not ValidHex ( _x , _y ) then
78527: LD_VAR 0 11
78531: PPUSH
78532: LD_VAR 0 12
78536: PPUSH
78537: CALL_OW 488
78541: NOT
78542: IFFALSE 78546
// continue ;
78544: GO 78524
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78546: LD_VAR 0 11
78550: PPUSH
78551: LD_VAR 0 12
78555: PPUSH
78556: CALL_OW 351
78560: PUSH
78561: LD_VAR 0 11
78565: PPUSH
78566: LD_VAR 0 12
78570: PPUSH
78571: CALL_OW 554
78575: AND
78576: IFFALSE 78616
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78578: LD_ADDR_VAR 0 13
78582: PUSH
78583: LD_VAR 0 13
78587: PPUSH
78588: LD_VAR 0 13
78592: PUSH
78593: LD_INT 1
78595: PLUS
78596: PPUSH
78597: LD_VAR 0 11
78601: PUSH
78602: LD_VAR 0 12
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PPUSH
78611: CALL_OW 2
78615: ST_TO_ADDR
// end ;
78616: GO 78524
78618: POP
78619: POP
78620: GO 78504
78622: POP
78623: POP
// if not list then
78624: LD_VAR 0 13
78628: NOT
78629: IFFALSE 78633
// exit ;
78631: GO 78704
// for i in list do
78633: LD_ADDR_VAR 0 6
78637: PUSH
78638: LD_VAR 0 13
78642: PUSH
78643: FOR_IN
78644: IFFALSE 78702
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78646: LD_VAR 0 1
78650: PPUSH
78651: LD_STRING M
78653: PUSH
78654: LD_VAR 0 6
78658: PUSH
78659: LD_INT 1
78661: ARRAY
78662: PUSH
78663: LD_VAR 0 6
78667: PUSH
78668: LD_INT 2
78670: ARRAY
78671: PUSH
78672: LD_INT 0
78674: PUSH
78675: LD_INT 0
78677: PUSH
78678: LD_INT 0
78680: PUSH
78681: LD_INT 0
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: LIST
78688: LIST
78689: LIST
78690: LIST
78691: LIST
78692: PUSH
78693: EMPTY
78694: LIST
78695: PPUSH
78696: CALL_OW 447
78700: GO 78643
78702: POP
78703: POP
// end ;
78704: LD_VAR 0 5
78708: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78709: LD_EXP 71
78713: NOT
78714: IFFALSE 78764
78716: GO 78718
78718: DISABLE
// begin initHack := true ;
78719: LD_ADDR_EXP 71
78723: PUSH
78724: LD_INT 1
78726: ST_TO_ADDR
// hackTanks := [ ] ;
78727: LD_ADDR_EXP 72
78731: PUSH
78732: EMPTY
78733: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78734: LD_ADDR_EXP 73
78738: PUSH
78739: EMPTY
78740: ST_TO_ADDR
// hackLimit := 3 ;
78741: LD_ADDR_EXP 74
78745: PUSH
78746: LD_INT 3
78748: ST_TO_ADDR
// hackDist := 12 ;
78749: LD_ADDR_EXP 75
78753: PUSH
78754: LD_INT 12
78756: ST_TO_ADDR
// hackCounter := [ ] ;
78757: LD_ADDR_EXP 76
78761: PUSH
78762: EMPTY
78763: ST_TO_ADDR
// end ;
78764: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78765: LD_EXP 71
78769: PUSH
78770: LD_INT 34
78772: PUSH
78773: LD_EXP 59
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: PPUSH
78782: CALL_OW 69
78786: AND
78787: IFFALSE 79042
78789: GO 78791
78791: DISABLE
78792: LD_INT 0
78794: PPUSH
78795: PPUSH
// begin enable ;
78796: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78797: LD_ADDR_VAR 0 1
78801: PUSH
78802: LD_INT 34
78804: PUSH
78805: LD_EXP 59
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PPUSH
78814: CALL_OW 69
78818: PUSH
78819: FOR_IN
78820: IFFALSE 79040
// begin if not i in hackTanks then
78822: LD_VAR 0 1
78826: PUSH
78827: LD_EXP 72
78831: IN
78832: NOT
78833: IFFALSE 78916
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78835: LD_ADDR_EXP 72
78839: PUSH
78840: LD_EXP 72
78844: PPUSH
78845: LD_EXP 72
78849: PUSH
78850: LD_INT 1
78852: PLUS
78853: PPUSH
78854: LD_VAR 0 1
78858: PPUSH
78859: CALL_OW 1
78863: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78864: LD_ADDR_EXP 73
78868: PUSH
78869: LD_EXP 73
78873: PPUSH
78874: LD_EXP 73
78878: PUSH
78879: LD_INT 1
78881: PLUS
78882: PPUSH
78883: EMPTY
78884: PPUSH
78885: CALL_OW 1
78889: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78890: LD_ADDR_EXP 76
78894: PUSH
78895: LD_EXP 76
78899: PPUSH
78900: LD_EXP 76
78904: PUSH
78905: LD_INT 1
78907: PLUS
78908: PPUSH
78909: EMPTY
78910: PPUSH
78911: CALL_OW 1
78915: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78916: LD_VAR 0 1
78920: PPUSH
78921: CALL_OW 302
78925: NOT
78926: IFFALSE 78939
// begin HackUnlinkAll ( i ) ;
78928: LD_VAR 0 1
78932: PPUSH
78933: CALL 79045 0 1
// continue ;
78937: GO 78819
// end ; HackCheckCapturedStatus ( i ) ;
78939: LD_VAR 0 1
78943: PPUSH
78944: CALL 79488 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78948: LD_ADDR_VAR 0 2
78952: PUSH
78953: LD_INT 81
78955: PUSH
78956: LD_VAR 0 1
78960: PPUSH
78961: CALL_OW 255
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 33
78972: PUSH
78973: LD_INT 3
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PUSH
78980: LD_INT 91
78982: PUSH
78983: LD_VAR 0 1
78987: PUSH
78988: LD_EXP 75
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 50
79000: PUSH
79001: EMPTY
79002: LIST
79003: PUSH
79004: EMPTY
79005: LIST
79006: LIST
79007: LIST
79008: LIST
79009: PPUSH
79010: CALL_OW 69
79014: ST_TO_ADDR
// if not tmp then
79015: LD_VAR 0 2
79019: NOT
79020: IFFALSE 79024
// continue ;
79022: GO 78819
// HackLink ( i , tmp ) ;
79024: LD_VAR 0 1
79028: PPUSH
79029: LD_VAR 0 2
79033: PPUSH
79034: CALL 79181 0 2
// end ;
79038: GO 78819
79040: POP
79041: POP
// end ;
79042: PPOPN 2
79044: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79045: LD_INT 0
79047: PPUSH
79048: PPUSH
79049: PPUSH
// if not hack in hackTanks then
79050: LD_VAR 0 1
79054: PUSH
79055: LD_EXP 72
79059: IN
79060: NOT
79061: IFFALSE 79065
// exit ;
79063: GO 79176
// index := GetElementIndex ( hackTanks , hack ) ;
79065: LD_ADDR_VAR 0 4
79069: PUSH
79070: LD_EXP 72
79074: PPUSH
79075: LD_VAR 0 1
79079: PPUSH
79080: CALL 9181 0 2
79084: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79085: LD_EXP 73
79089: PUSH
79090: LD_VAR 0 4
79094: ARRAY
79095: IFFALSE 79176
// begin for i in hackTanksCaptured [ index ] do
79097: LD_ADDR_VAR 0 3
79101: PUSH
79102: LD_EXP 73
79106: PUSH
79107: LD_VAR 0 4
79111: ARRAY
79112: PUSH
79113: FOR_IN
79114: IFFALSE 79140
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79116: LD_VAR 0 3
79120: PUSH
79121: LD_INT 1
79123: ARRAY
79124: PPUSH
79125: LD_VAR 0 3
79129: PUSH
79130: LD_INT 2
79132: ARRAY
79133: PPUSH
79134: CALL_OW 235
79138: GO 79113
79140: POP
79141: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79142: LD_ADDR_EXP 73
79146: PUSH
79147: LD_EXP 73
79151: PPUSH
79152: LD_VAR 0 4
79156: PPUSH
79157: EMPTY
79158: PPUSH
79159: CALL_OW 1
79163: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79164: LD_VAR 0 1
79168: PPUSH
79169: LD_INT 0
79171: PPUSH
79172: CALL_OW 505
// end ; end ;
79176: LD_VAR 0 2
79180: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79181: LD_INT 0
79183: PPUSH
79184: PPUSH
79185: PPUSH
// if not hack in hackTanks or not vehicles then
79186: LD_VAR 0 1
79190: PUSH
79191: LD_EXP 72
79195: IN
79196: NOT
79197: PUSH
79198: LD_VAR 0 2
79202: NOT
79203: OR
79204: IFFALSE 79208
// exit ;
79206: GO 79483
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79208: LD_ADDR_VAR 0 2
79212: PUSH
79213: LD_VAR 0 1
79217: PPUSH
79218: LD_VAR 0 2
79222: PPUSH
79223: LD_INT 1
79225: PPUSH
79226: LD_INT 1
79228: PPUSH
79229: CALL 9831 0 4
79233: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79234: LD_ADDR_VAR 0 5
79238: PUSH
79239: LD_EXP 72
79243: PPUSH
79244: LD_VAR 0 1
79248: PPUSH
79249: CALL 9181 0 2
79253: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79254: LD_EXP 73
79258: PUSH
79259: LD_VAR 0 5
79263: ARRAY
79264: PUSH
79265: LD_EXP 74
79269: LESS
79270: IFFALSE 79459
// begin for i := 1 to vehicles do
79272: LD_ADDR_VAR 0 4
79276: PUSH
79277: DOUBLE
79278: LD_INT 1
79280: DEC
79281: ST_TO_ADDR
79282: LD_VAR 0 2
79286: PUSH
79287: FOR_TO
79288: IFFALSE 79457
// begin if hackTanksCaptured [ index ] = hackLimit then
79290: LD_EXP 73
79294: PUSH
79295: LD_VAR 0 5
79299: ARRAY
79300: PUSH
79301: LD_EXP 74
79305: EQUAL
79306: IFFALSE 79310
// break ;
79308: GO 79457
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79310: LD_ADDR_EXP 76
79314: PUSH
79315: LD_EXP 76
79319: PPUSH
79320: LD_VAR 0 5
79324: PPUSH
79325: LD_EXP 76
79329: PUSH
79330: LD_VAR 0 5
79334: ARRAY
79335: PUSH
79336: LD_INT 1
79338: PLUS
79339: PPUSH
79340: CALL_OW 1
79344: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79345: LD_ADDR_EXP 73
79349: PUSH
79350: LD_EXP 73
79354: PPUSH
79355: LD_VAR 0 5
79359: PUSH
79360: LD_EXP 73
79364: PUSH
79365: LD_VAR 0 5
79369: ARRAY
79370: PUSH
79371: LD_INT 1
79373: PLUS
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: PPUSH
79379: LD_VAR 0 2
79383: PUSH
79384: LD_VAR 0 4
79388: ARRAY
79389: PUSH
79390: LD_VAR 0 2
79394: PUSH
79395: LD_VAR 0 4
79399: ARRAY
79400: PPUSH
79401: CALL_OW 255
79405: PUSH
79406: EMPTY
79407: LIST
79408: LIST
79409: PPUSH
79410: CALL 9396 0 3
79414: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79415: LD_VAR 0 2
79419: PUSH
79420: LD_VAR 0 4
79424: ARRAY
79425: PPUSH
79426: LD_VAR 0 1
79430: PPUSH
79431: CALL_OW 255
79435: PPUSH
79436: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79440: LD_VAR 0 2
79444: PUSH
79445: LD_VAR 0 4
79449: ARRAY
79450: PPUSH
79451: CALL_OW 141
// end ;
79455: GO 79287
79457: POP
79458: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79459: LD_VAR 0 1
79463: PPUSH
79464: LD_EXP 73
79468: PUSH
79469: LD_VAR 0 5
79473: ARRAY
79474: PUSH
79475: LD_INT 0
79477: PLUS
79478: PPUSH
79479: CALL_OW 505
// end ;
79483: LD_VAR 0 3
79487: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79488: LD_INT 0
79490: PPUSH
79491: PPUSH
79492: PPUSH
79493: PPUSH
// if not hack in hackTanks then
79494: LD_VAR 0 1
79498: PUSH
79499: LD_EXP 72
79503: IN
79504: NOT
79505: IFFALSE 79509
// exit ;
79507: GO 79749
// index := GetElementIndex ( hackTanks , hack ) ;
79509: LD_ADDR_VAR 0 4
79513: PUSH
79514: LD_EXP 72
79518: PPUSH
79519: LD_VAR 0 1
79523: PPUSH
79524: CALL 9181 0 2
79528: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79529: LD_ADDR_VAR 0 3
79533: PUSH
79534: DOUBLE
79535: LD_EXP 73
79539: PUSH
79540: LD_VAR 0 4
79544: ARRAY
79545: INC
79546: ST_TO_ADDR
79547: LD_INT 1
79549: PUSH
79550: FOR_DOWNTO
79551: IFFALSE 79723
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79553: LD_ADDR_VAR 0 5
79557: PUSH
79558: LD_EXP 73
79562: PUSH
79563: LD_VAR 0 4
79567: ARRAY
79568: PUSH
79569: LD_VAR 0 3
79573: ARRAY
79574: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79575: LD_VAR 0 5
79579: PUSH
79580: LD_INT 1
79582: ARRAY
79583: PPUSH
79584: CALL_OW 302
79588: NOT
79589: PUSH
79590: LD_VAR 0 5
79594: PUSH
79595: LD_INT 1
79597: ARRAY
79598: PPUSH
79599: CALL_OW 255
79603: PUSH
79604: LD_VAR 0 1
79608: PPUSH
79609: CALL_OW 255
79613: NONEQUAL
79614: OR
79615: IFFALSE 79721
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79617: LD_VAR 0 5
79621: PUSH
79622: LD_INT 1
79624: ARRAY
79625: PPUSH
79626: CALL_OW 305
79630: PUSH
79631: LD_VAR 0 5
79635: PUSH
79636: LD_INT 1
79638: ARRAY
79639: PPUSH
79640: CALL_OW 255
79644: PUSH
79645: LD_VAR 0 1
79649: PPUSH
79650: CALL_OW 255
79654: EQUAL
79655: AND
79656: IFFALSE 79680
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79658: LD_VAR 0 5
79662: PUSH
79663: LD_INT 1
79665: ARRAY
79666: PPUSH
79667: LD_VAR 0 5
79671: PUSH
79672: LD_INT 2
79674: ARRAY
79675: PPUSH
79676: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79680: LD_ADDR_EXP 73
79684: PUSH
79685: LD_EXP 73
79689: PPUSH
79690: LD_VAR 0 4
79694: PPUSH
79695: LD_EXP 73
79699: PUSH
79700: LD_VAR 0 4
79704: ARRAY
79705: PPUSH
79706: LD_VAR 0 3
79710: PPUSH
79711: CALL_OW 3
79715: PPUSH
79716: CALL_OW 1
79720: ST_TO_ADDR
// end ; end ;
79721: GO 79550
79723: POP
79724: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79725: LD_VAR 0 1
79729: PPUSH
79730: LD_EXP 73
79734: PUSH
79735: LD_VAR 0 4
79739: ARRAY
79740: PUSH
79741: LD_INT 0
79743: PLUS
79744: PPUSH
79745: CALL_OW 505
// end ; end_of_file
79749: LD_VAR 0 2
79753: RET
