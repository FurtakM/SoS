// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 96 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 1 ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 344
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , gensher_ape , 0 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 5
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: LD_INT 7
  44: PPUSH
  45: LD_INT 0
  47: PPUSH
  48: CALL 35287 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , powell_ape , 0 ) ;
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 5
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 0
  69: PPUSH
  70: LD_INT 0
  72: PPUSH
  73: LD_INT 4
  75: PPUSH
  76: LD_INT 0
  78: PPUSH
  79: CALL 35287 0 9
// PrepareGensher ;
  83: CALL 1019 0 0
// PreparePowell ;
  87: CALL 265 0 0
// MC_Start ( ) ;
  91: CALL 40549 0 0
// end ;
  95: END
// export debug , game ; function InitVariables ; begin
  96: LD_INT 0
  98: PPUSH
// debug := 1 ;
  99: LD_ADDR_EXP 1
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// game := true ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 1
 114: ST_TO_ADDR
// end ;
 115: LD_VAR 0 1
 119: RET
// export function CustomInitMacro ; begin
 120: LD_INT 0
 122: PPUSH
// InitMC_Gensher ( ) ;
 123: CALL 1146 0 0
// InitMC_Powell ( ) ;
 127: CALL 392 0 0
// end ;
 131: LD_VAR 0 1
 135: RET
// every 0 0$10 do var cr , time , i ;
 136: GO 138
 138: DISABLE
 139: LD_INT 0
 141: PPUSH
 142: PPUSH
 143: PPUSH
// begin time := 0 0$30 ;
 144: LD_ADDR_VAR 0 2
 148: PUSH
 149: LD_INT 1050
 151: ST_TO_ADDR
// repeat wait ( time ) ;
 152: LD_VAR 0 2
 156: PPUSH
 157: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
 161: LD_ADDR_VAR 0 1
 165: PUSH
 166: LD_INT 1
 168: PPUSH
 169: LD_INT 5
 171: PPUSH
 172: CALL_OW 12
 176: ST_TO_ADDR
// for i in [ powell_crates , gensher_crates ] do
 177: LD_ADDR_VAR 0 3
 181: PUSH
 182: LD_INT 5
 184: PUSH
 185: LD_INT 8
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: FOR_IN
 193: IFFALSE 221
// begin CreateCratesArea ( cr , i , true ) ;
 195: LD_VAR 0 1
 199: PPUSH
 200: LD_VAR 0 3
 204: PPUSH
 205: LD_INT 1
 207: PPUSH
 208: CALL_OW 55
// wait ( 0 0$5 ) ;
 212: LD_INT 175
 214: PPUSH
 215: CALL_OW 67
// end ;
 219: GO 192
 221: POP
 222: POP
// time := time + 0 0$2 ;
 223: LD_ADDR_VAR 0 2
 227: PUSH
 228: LD_VAR 0 2
 232: PUSH
 233: LD_INT 70
 235: PLUS
 236: ST_TO_ADDR
// if time > 1 1$00 then
 237: LD_VAR 0 2
 241: PUSH
 242: LD_INT 2100
 244: GREATER
 245: IFFALSE 255
// time := 0 0$25 ;
 247: LD_ADDR_VAR 0 2
 251: PUSH
 252: LD_INT 875
 254: ST_TO_ADDR
// until not game ;
 255: LD_EXP 2
 259: NOT
 260: IFFALSE 152
// end ; end_of_file
 262: PPOPN 3
 264: END
// export Powell , powell_side ; export function PreparePowell ; var i , tmp ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
 269: PPUSH
// powell_side := 4 ;
 270: LD_ADDR_EXP 4
 274: PUSH
 275: LD_INT 4
 277: ST_TO_ADDR
// uc_side := powell_side ;
 278: LD_ADDR_OWVAR 20
 282: PUSH
 283: LD_EXP 4
 287: ST_TO_ADDR
// uc_nation := 1 ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// tmp := PrepareBase ( us_depot ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1000 , 100 , 0 ] , [ 5 , 6 , 6 , 6 ] ) ;
 296: LD_ADDR_VAR 0 3
 300: PUSH
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING 
 306: PPUSH
 307: LD_INT 8
 309: PUSH
 310: LD_INT 7
 312: PUSH
 313: LD_INT 6
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_OWVAR 67
 325: ARRAY
 326: PPUSH
 327: LD_INT 1000
 329: PUSH
 330: LD_INT 100
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: LIST
 340: PPUSH
 341: LD_INT 5
 343: PUSH
 344: LD_INT 6
 346: PUSH
 347: LD_INT 6
 349: PUSH
 350: LD_INT 6
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL 11228 0 5
 363: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , tmp ) ;
 364: LD_ADDR_EXP 8
 368: PUSH
 369: LD_EXP 8
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_VAR 0 3
 381: PPUSH
 382: CALL_OW 1
 386: ST_TO_ADDR
// end ;
 387: LD_VAR 0 1
 391: RET
// export function InitMC_Powell ( ) ; begin
 392: LD_INT 0
 394: PPUSH
// MC_SetScanArea ( 1 , powell_base ) ;
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: CALL 56744 0 2
// MC_SetParkingArea ( 1 , powell_parking ) ;
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 6
 410: PPUSH
 411: CALL 56688 0 2
// MC_SetDepositsXY ( 1 , [ [ 146 , 88 , 0 ] , [ 152 , 69 , 1 ] , [ 150 , 127 , 0 ] , [ 157 , 134 , 1 ] ] ) ;
 415: LD_INT 1
 417: PPUSH
 418: LD_INT 146
 420: PUSH
 421: LD_INT 88
 423: PUSH
 424: LD_INT 0
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: PUSH
 432: LD_INT 152
 434: PUSH
 435: LD_INT 69
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 150
 448: PUSH
 449: LD_INT 127
 451: PUSH
 452: LD_INT 0
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 157
 462: PUSH
 463: LD_INT 134
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: PPUSH
 480: CALL 55808 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
 484: LD_INT 1
 486: PPUSH
 487: LD_INT 11
 489: PUSH
 490: LD_INT 6
 492: PUSH
 493: LD_INT 7
 495: PUSH
 496: LD_INT 9
 498: PUSH
 499: LD_INT 10
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: PPUSH
 509: CALL 56576 0 2
// MC_SetCratesArea ( 1 , powell_crates ) ;
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 5
 518: PPUSH
 519: CALL 56256 0 2
// MC_SetTame ( 1 , powell_ape ) ;
 523: LD_INT 1
 525: PPUSH
 526: LD_INT 4
 528: PPUSH
 529: CALL 55987 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 533: LD_INT 1
 535: PPUSH
 536: LD_INT 4
 538: PPUSH
 539: CALL 55669 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] ] ) ;
 543: LD_INT 1
 545: PPUSH
 546: LD_INT 3
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: LD_INT 2
 554: PUSH
 555: LD_INT 5
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 4
 566: PUSH
 567: LD_INT 1
 569: PUSH
 570: LD_INT 2
 572: PUSH
 573: LD_INT 6
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_INT 4
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 2
 590: PUSH
 591: LD_INT 7
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: LD_INT 2
 608: PUSH
 609: LD_INT 6
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 5
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 2
 626: PUSH
 627: LD_INT 6
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: PPUSH
 643: CALL 55423 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 169 , 107 , 4 ] , [ b_oil_mine , 146 , 88 , 0 ] , [ b_armoury , 132 , 81 , 2 ] , [ b_workshop , 177 , 128 , 4 ] , [ b_solar_power , 157 , 110 , 3 ] , [ b_solar_power , 152 , 105 , 3 ] , [ b_solar_power , 153 , 108 , 3 ] , [ b_siberite_mine , 152 , 69 , 3 ] , [ b_lab , 160 , 105 , 1 ] , [ b_turret , 151 , 85 , 2 ] , [ b_bunker , 135 , 79 , 2 ] , [ b_bunker , 130 , 84 , 2 ] , [ b_turret , 138 , 102 , 1 ] , [ b_turret , 143 , 114 , 1 ] , [ b_control_tower , 186 , 137 , 5 ] , ] ) ;
 647: LD_INT 1
 649: PPUSH
 650: LD_INT 6
 652: PUSH
 653: LD_INT 169
 655: PUSH
 656: LD_INT 107
 658: PUSH
 659: LD_INT 4
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_INT 29
 670: PUSH
 671: LD_INT 146
 673: PUSH
 674: LD_INT 88
 676: PUSH
 677: LD_INT 0
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 4
 688: PUSH
 689: LD_INT 132
 691: PUSH
 692: LD_INT 81
 694: PUSH
 695: LD_INT 2
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: PUSH
 704: LD_INT 2
 706: PUSH
 707: LD_INT 177
 709: PUSH
 710: LD_INT 128
 712: PUSH
 713: LD_INT 4
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: PUSH
 722: LD_INT 27
 724: PUSH
 725: LD_INT 157
 727: PUSH
 728: LD_INT 110
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 27
 742: PUSH
 743: LD_INT 152
 745: PUSH
 746: LD_INT 105
 748: PUSH
 749: LD_INT 3
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_INT 27
 760: PUSH
 761: LD_INT 153
 763: PUSH
 764: LD_INT 108
 766: PUSH
 767: LD_INT 3
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 30
 778: PUSH
 779: LD_INT 152
 781: PUSH
 782: LD_INT 69
 784: PUSH
 785: LD_INT 3
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 6
 796: PUSH
 797: LD_INT 160
 799: PUSH
 800: LD_INT 105
 802: PUSH
 803: LD_INT 1
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 33
 814: PUSH
 815: LD_INT 151
 817: PUSH
 818: LD_INT 85
 820: PUSH
 821: LD_INT 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 32
 832: PUSH
 833: LD_INT 135
 835: PUSH
 836: LD_INT 79
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: PUSH
 848: LD_INT 32
 850: PUSH
 851: LD_INT 130
 853: PUSH
 854: LD_INT 84
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 33
 868: PUSH
 869: LD_INT 138
 871: PUSH
 872: LD_INT 102
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: LD_INT 143
 889: PUSH
 890: LD_INT 114
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 36
 904: PUSH
 905: LD_INT 186
 907: PUSH
 908: LD_INT 137
 910: PUSH
 911: LD_INT 5
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL 55296 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
 941: LD_INT 1
 943: PPUSH
 944: LD_INT 10
 946: PUSH
 947: LD_INT 15
 949: PUSH
 950: LD_INT 12
 952: PUSH
 953: LD_INT 11
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL 56163 0 2
// MC_SetFactoryExtension ( 1 , 177 , 128 , 4 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radar ] ) ;
 966: LD_INT 1
 968: PPUSH
 969: LD_INT 177
 971: PPUSH
 972: LD_INT 128
 974: PPUSH
 975: LD_INT 4
 977: PPUSH
 978: LD_INT 19
 980: PUSH
 981: LD_INT 16
 983: PUSH
 984: LD_INT 17
 986: PUSH
 987: LD_INT 18
 989: PUSH
 990: LD_INT 20
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL 56370 0 5
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
1004: LD_INT 1
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: CALL 56036 0 2
// end ; end_of_file
1014: LD_VAR 0 1
1018: RET
// export Gensher , gensher_side ; export function PrepareGensher ; var i , tmp ; begin
1019: LD_INT 0
1021: PPUSH
1022: PPUSH
1023: PPUSH
// powell_side := 2 ;
1024: LD_ADDR_EXP 4
1028: PUSH
1029: LD_INT 2
1031: ST_TO_ADDR
// uc_side := powell_side ;
1032: LD_ADDR_OWVAR 20
1036: PUSH
1037: LD_EXP 4
1041: ST_TO_ADDR
// uc_nation := 2 ;
1042: LD_ADDR_OWVAR 21
1046: PUSH
1047: LD_INT 2
1049: ST_TO_ADDR
// tmp := PrepareBase ( ar_depot ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 12 , 6 , 6 , 6 ] ) ;
1050: LD_ADDR_VAR 0 3
1054: PUSH
1055: LD_INT 7
1057: PPUSH
1058: LD_STRING 
1060: PPUSH
1061: LD_INT 8
1063: PUSH
1064: LD_INT 7
1066: PUSH
1067: LD_INT 6
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: PUSH
1075: LD_OWVAR 67
1079: ARRAY
1080: PPUSH
1081: LD_INT 1500
1083: PUSH
1084: LD_INT 300
1086: PUSH
1087: LD_INT 30
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: PPUSH
1095: LD_INT 12
1097: PUSH
1098: LD_INT 6
1100: PUSH
1101: LD_INT 6
1103: PUSH
1104: LD_INT 6
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PPUSH
1113: CALL 11228 0 5
1117: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp ) ;
1118: LD_ADDR_EXP 8
1122: PUSH
1123: LD_EXP 8
1127: PPUSH
1128: LD_INT 2
1130: PPUSH
1131: LD_VAR 0 3
1135: PPUSH
1136: CALL_OW 1
1140: ST_TO_ADDR
// end ;
1141: LD_VAR 0 1
1145: RET
// export function InitMC_Gensher ( ) ; begin
1146: LD_INT 0
1148: PPUSH
// MC_SetScanArea ( 2 , gensher_base ) ;
1149: LD_INT 2
1151: PPUSH
1152: LD_INT 2
1154: PPUSH
1155: CALL 56744 0 2
// MC_SetParkingArea ( 2 , gensher_parking ) ;
1159: LD_INT 2
1161: PPUSH
1162: LD_INT 9
1164: PPUSH
1165: CALL 56688 0 2
// MC_SetDepositsXY ( 2 , [ [ 35 , 9 , 0 ] , [ 31 , 26 , 1 ] ] ) ;
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 35
1174: PUSH
1175: LD_INT 9
1177: PUSH
1178: LD_INT 0
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 31
1188: PUSH
1189: LD_INT 26
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PPUSH
1204: CALL 55808 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ar_gun , ar_rocket_launcher ] ) ;
1208: LD_INT 2
1210: PPUSH
1211: LD_INT 27
1213: PUSH
1214: LD_INT 28
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PPUSH
1221: CALL 56576 0 2
// MC_SetCratesArea ( 2 , gensher_crates ) ;
1225: LD_INT 2
1227: PPUSH
1228: LD_INT 8
1230: PPUSH
1231: CALL 56256 0 2
// MC_SetTame ( 2 , gensher_ape ) ;
1235: LD_INT 2
1237: PPUSH
1238: LD_INT 7
1240: PPUSH
1241: CALL 55987 0 2
// MC_SetDefenderLimit ( 2 , 4 ) ;
1245: LD_INT 2
1247: PPUSH
1248: LD_INT 4
1250: PPUSH
1251: CALL 55669 0 2
// MC_SetProduceList ( 2 , [ ] ) ;
1255: LD_INT 2
1257: PPUSH
1258: EMPTY
1259: PPUSH
1260: CALL 55423 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 20 , 6 , 4 ] , [ b_oil_mine , 35 , 9 , 0 ] , [ b_armoury , 18 , 27 , 5 ] , [ b_workshop , 13 , 13 , 1 ] , [ b_solar_power , 9 , 3 , 0 ] , [ b_solar_power , 32 , 16 , 1 ] , [ b_bunker , 27 , 8 , 5 ] , [ b_siberite_mine , 31 , 26 , 3 ] ] ) ;
1264: LD_INT 2
1266: PPUSH
1267: LD_INT 6
1269: PUSH
1270: LD_INT 20
1272: PUSH
1273: LD_INT 6
1275: PUSH
1276: LD_INT 4
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 29
1287: PUSH
1288: LD_INT 35
1290: PUSH
1291: LD_INT 9
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 4
1305: PUSH
1306: LD_INT 18
1308: PUSH
1309: LD_INT 27
1311: PUSH
1312: LD_INT 5
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 13
1326: PUSH
1327: LD_INT 13
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 27
1341: PUSH
1342: LD_INT 9
1344: PUSH
1345: LD_INT 3
1347: PUSH
1348: LD_INT 0
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 27
1359: PUSH
1360: LD_INT 32
1362: PUSH
1363: LD_INT 16
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: PUSH
1375: LD_INT 32
1377: PUSH
1378: LD_INT 27
1380: PUSH
1381: LD_INT 8
1383: PUSH
1384: LD_INT 5
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 30
1395: PUSH
1396: LD_INT 31
1398: PUSH
1399: LD_INT 26
1401: PUSH
1402: LD_INT 3
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL 55296 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1425: LD_INT 2
1427: PPUSH
1428: LD_INT 10
1430: PUSH
1431: LD_INT 15
1433: PUSH
1434: LD_INT 12
1436: PUSH
1437: LD_INT 11
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL 56163 0 2
// MC_SetFactoryExtension ( 2 , 13 , 13 , 1 , [ b_ext_stitch , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radar ] ) ;
1450: LD_INT 2
1452: PPUSH
1453: LD_INT 13
1455: PPUSH
1456: LD_INT 13
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: LD_INT 23
1464: PUSH
1465: LD_INT 16
1467: PUSH
1468: LD_INT 17
1470: PUSH
1471: LD_INT 18
1473: PUSH
1474: LD_INT 20
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: PPUSH
1484: CALL 56370 0 5
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
1488: LD_INT 2
1490: PPUSH
1491: LD_INT 0
1493: PPUSH
1494: CALL 56036 0 2
// end ; end_of_file end_of_file end_of_file end_of_file
1498: LD_VAR 0 1
1502: RET
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
1503: LD_VAR 0 1
1507: PPUSH
1508: CALL 58438 0 1
// end ;
1512: PPOPN 1
1514: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
1515: LD_VAR 0 1
1519: PPUSH
1520: LD_VAR 0 2
1524: PPUSH
1525: CALL 60305 0 2
// end ;
1529: PPOPN 2
1531: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
1532: LD_VAR 0 1
1536: PPUSH
1537: CALL 59387 0 1
// end ;
1541: PPOPN 1
1543: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
1544: LD_VAR 0 1
1548: PPUSH
1549: CALL 59621 0 1
// end ;
1553: PPOPN 1
1555: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
1556: LD_VAR 0 1
1560: PPUSH
1561: LD_VAR 0 2
1565: PPUSH
1566: CALL 58150 0 2
// end ;
1570: PPOPN 2
1572: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
1573: LD_VAR 0 1
1577: PPUSH
1578: LD_VAR 0 2
1582: PPUSH
1583: LD_VAR 0 3
1587: PPUSH
1588: LD_VAR 0 4
1592: PPUSH
1593: LD_VAR 0 5
1597: PPUSH
1598: CALL 57777 0 5
// end ;
1602: PPOPN 5
1604: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
1605: LD_VAR 0 1
1609: PPUSH
1610: LD_VAR 0 2
1614: PPUSH
1615: CALL 57465 0 2
// end ;
1619: PPOPN 2
1621: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
1622: LD_VAR 0 1
1626: PPUSH
1627: LD_VAR 0 2
1631: PPUSH
1632: LD_VAR 0 3
1636: PPUSH
1637: LD_VAR 0 4
1641: PPUSH
1642: CALL 57310 0 4
// end ;
1646: PPOPN 4
1648: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
1649: LD_VAR 0 1
1653: PPUSH
1654: LD_VAR 0 2
1658: PPUSH
1659: LD_VAR 0 3
1663: PPUSH
1664: CALL 57092 0 3
// end ;
1668: PPOPN 3
1670: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
1671: LD_VAR 0 1
1675: PPUSH
1676: LD_VAR 0 2
1680: PPUSH
1681: CALL 56984 0 2
// end ;
1685: PPOPN 2
1687: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
1688: LD_VAR 0 1
1692: PPUSH
1693: LD_VAR 0 2
1697: PPUSH
1698: CALL 60559 0 2
// end ;
1702: PPOPN 2
1704: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
1705: LD_VAR 0 1
1709: PPUSH
1710: LD_VAR 0 2
1714: PPUSH
1715: LD_VAR 0 3
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL 60768 0 4
// end ;
1729: PPOPN 4
1731: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
1732: LD_VAR 0 1
1736: PPUSH
1737: LD_VAR 0 2
1741: PPUSH
1742: CALL 56800 0 2
// end ; end_of_file
1746: PPOPN 2
1748: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
// if exist_mode then
1753: LD_VAR 0 2
1757: IFFALSE 1782
// unit := CreateCharacter ( prefix & ident ) else
1759: LD_ADDR_VAR 0 5
1763: PUSH
1764: LD_VAR 0 3
1768: PUSH
1769: LD_VAR 0 1
1773: STR
1774: PPUSH
1775: CALL_OW 34
1779: ST_TO_ADDR
1780: GO 1797
// unit := NewCharacter ( ident ) ;
1782: LD_ADDR_VAR 0 5
1786: PUSH
1787: LD_VAR 0 1
1791: PPUSH
1792: CALL_OW 25
1796: ST_TO_ADDR
// result := unit ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_VAR 0 5
1806: ST_TO_ADDR
// end ;
1807: LD_VAR 0 4
1811: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1812: LD_INT 0
1814: PPUSH
1815: PPUSH
// if not side or not nation then
1816: LD_VAR 0 1
1820: NOT
1821: PUSH
1822: LD_VAR 0 2
1826: NOT
1827: OR
1828: IFFALSE 1832
// exit ;
1830: GO 2452
// case nation of nation_american :
1832: LD_VAR 0 2
1836: PUSH
1837: LD_INT 1
1839: DOUBLE
1840: EQUAL
1841: IFTRUE 1845
1843: GO 2011
1845: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
1846: LD_ADDR_VAR 0 4
1850: PUSH
1851: LD_INT 35
1853: PUSH
1854: LD_INT 45
1856: PUSH
1857: LD_INT 46
1859: PUSH
1860: LD_INT 47
1862: PUSH
1863: LD_INT 1
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 6
1871: PUSH
1872: LD_INT 15
1874: PUSH
1875: LD_INT 16
1877: PUSH
1878: LD_INT 7
1880: PUSH
1881: LD_INT 12
1883: PUSH
1884: LD_INT 13
1886: PUSH
1887: LD_INT 10
1889: PUSH
1890: LD_INT 14
1892: PUSH
1893: LD_INT 20
1895: PUSH
1896: LD_INT 25
1898: PUSH
1899: LD_INT 32
1901: PUSH
1902: LD_INT 27
1904: PUSH
1905: LD_INT 36
1907: PUSH
1908: LD_INT 69
1910: PUSH
1911: LD_INT 39
1913: PUSH
1914: LD_INT 34
1916: PUSH
1917: LD_INT 40
1919: PUSH
1920: LD_INT 48
1922: PUSH
1923: LD_INT 49
1925: PUSH
1926: LD_INT 50
1928: PUSH
1929: LD_INT 51
1931: PUSH
1932: LD_INT 52
1934: PUSH
1935: LD_INT 53
1937: PUSH
1938: LD_INT 54
1940: PUSH
1941: LD_INT 55
1943: PUSH
1944: LD_INT 56
1946: PUSH
1947: LD_INT 57
1949: PUSH
1950: LD_INT 58
1952: PUSH
1953: LD_INT 59
1955: PUSH
1956: LD_INT 60
1958: PUSH
1959: LD_INT 61
1961: PUSH
1962: LD_INT 62
1964: PUSH
1965: LD_INT 80
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: ST_TO_ADDR
2009: GO 2376
2011: LD_INT 2
2013: DOUBLE
2014: EQUAL
2015: IFTRUE 2019
2017: GO 2189
2019: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
2020: LD_ADDR_VAR 0 4
2024: PUSH
2025: LD_INT 35
2027: PUSH
2028: LD_INT 45
2030: PUSH
2031: LD_INT 46
2033: PUSH
2034: LD_INT 47
2036: PUSH
2037: LD_INT 70
2039: PUSH
2040: LD_INT 1
2042: PUSH
2043: LD_INT 11
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: LD_INT 4
2051: PUSH
2052: LD_INT 5
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: LD_INT 15
2060: PUSH
2061: LD_INT 18
2063: PUSH
2064: LD_INT 7
2066: PUSH
2067: LD_INT 17
2069: PUSH
2070: LD_INT 8
2072: PUSH
2073: LD_INT 20
2075: PUSH
2076: LD_INT 72
2078: PUSH
2079: LD_INT 26
2081: PUSH
2082: LD_INT 69
2084: PUSH
2085: LD_INT 39
2087: PUSH
2088: LD_INT 40
2090: PUSH
2091: LD_INT 41
2093: PUSH
2094: LD_INT 42
2096: PUSH
2097: LD_INT 43
2099: PUSH
2100: LD_INT 48
2102: PUSH
2103: LD_INT 49
2105: PUSH
2106: LD_INT 50
2108: PUSH
2109: LD_INT 51
2111: PUSH
2112: LD_INT 52
2114: PUSH
2115: LD_INT 53
2117: PUSH
2118: LD_INT 54
2120: PUSH
2121: LD_INT 55
2123: PUSH
2124: LD_INT 56
2126: PUSH
2127: LD_INT 60
2129: PUSH
2130: LD_INT 61
2132: PUSH
2133: LD_INT 62
2135: PUSH
2136: LD_INT 66
2138: PUSH
2139: LD_INT 67
2141: PUSH
2142: LD_INT 68
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: ST_TO_ADDR
2187: GO 2376
2189: LD_INT 3
2191: DOUBLE
2192: EQUAL
2193: IFTRUE 2197
2195: GO 2375
2197: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
2198: LD_ADDR_VAR 0 4
2202: PUSH
2203: LD_INT 46
2205: PUSH
2206: LD_INT 47
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: LD_INT 2
2214: PUSH
2215: LD_INT 11
2217: PUSH
2218: LD_INT 9
2220: PUSH
2221: LD_INT 20
2223: PUSH
2224: LD_INT 19
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 24
2232: PUSH
2233: LD_INT 22
2235: PUSH
2236: LD_INT 25
2238: PUSH
2239: LD_INT 28
2241: PUSH
2242: LD_INT 29
2244: PUSH
2245: LD_INT 31
2247: PUSH
2248: LD_INT 37
2250: PUSH
2251: LD_INT 38
2253: PUSH
2254: LD_INT 32
2256: PUSH
2257: LD_INT 27
2259: PUSH
2260: LD_INT 33
2262: PUSH
2263: LD_INT 69
2265: PUSH
2266: LD_INT 39
2268: PUSH
2269: LD_INT 34
2271: PUSH
2272: LD_INT 40
2274: PUSH
2275: LD_INT 71
2277: PUSH
2278: LD_INT 23
2280: PUSH
2281: LD_INT 44
2283: PUSH
2284: LD_INT 48
2286: PUSH
2287: LD_INT 49
2289: PUSH
2290: LD_INT 50
2292: PUSH
2293: LD_INT 51
2295: PUSH
2296: LD_INT 52
2298: PUSH
2299: LD_INT 53
2301: PUSH
2302: LD_INT 54
2304: PUSH
2305: LD_INT 55
2307: PUSH
2308: LD_INT 56
2310: PUSH
2311: LD_INT 57
2313: PUSH
2314: LD_INT 58
2316: PUSH
2317: LD_INT 59
2319: PUSH
2320: LD_INT 63
2322: PUSH
2323: LD_INT 64
2325: PUSH
2326: LD_INT 65
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
2373: GO 2376
2375: POP
// if state > - 1 and state < 3 then
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 1
2383: NEG
2384: GREATER
2385: PUSH
2386: LD_VAR 0 3
2390: PUSH
2391: LD_INT 3
2393: LESS
2394: AND
2395: IFFALSE 2452
// for i in result do
2397: LD_ADDR_VAR 0 5
2401: PUSH
2402: LD_VAR 0 4
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2450
// if GetTech ( i , side ) <> state then
2410: LD_VAR 0 5
2414: PPUSH
2415: LD_VAR 0 1
2419: PPUSH
2420: CALL_OW 321
2424: PUSH
2425: LD_VAR 0 3
2429: NONEQUAL
2430: IFFALSE 2448
// result := result diff i ;
2432: LD_ADDR_VAR 0 4
2436: PUSH
2437: LD_VAR 0 4
2441: PUSH
2442: LD_VAR 0 5
2446: DIFF
2447: ST_TO_ADDR
2448: GO 2407
2450: POP
2451: POP
// end ;
2452: LD_VAR 0 4
2456: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2457: LD_INT 0
2459: PPUSH
2460: PPUSH
2461: PPUSH
// result := true ;
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2470: LD_ADDR_VAR 0 5
2474: PUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: CALL_OW 480
2484: ST_TO_ADDR
// if not tmp then
2485: LD_VAR 0 5
2489: NOT
2490: IFFALSE 2494
// exit ;
2492: GO 2543
// for i in tmp do
2494: LD_ADDR_VAR 0 4
2498: PUSH
2499: LD_VAR 0 5
2503: PUSH
2504: FOR_IN
2505: IFFALSE 2541
// if GetTech ( i , side ) <> state_researched then
2507: LD_VAR 0 4
2511: PPUSH
2512: LD_VAR 0 1
2516: PPUSH
2517: CALL_OW 321
2521: PUSH
2522: LD_INT 2
2524: NONEQUAL
2525: IFFALSE 2539
// begin result := false ;
2527: LD_ADDR_VAR 0 3
2531: PUSH
2532: LD_INT 0
2534: ST_TO_ADDR
// exit ;
2535: POP
2536: POP
2537: GO 2543
// end ;
2539: GO 2504
2541: POP
2542: POP
// end ;
2543: LD_VAR 0 3
2547: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2548: LD_INT 0
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
2554: PPUSH
2555: PPUSH
2556: PPUSH
2557: PPUSH
2558: PPUSH
2559: PPUSH
2560: PPUSH
2561: PPUSH
2562: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2563: LD_VAR 0 1
2567: NOT
2568: PUSH
2569: LD_VAR 0 1
2573: PPUSH
2574: CALL_OW 257
2578: PUSH
2579: LD_INT 9
2581: NONEQUAL
2582: OR
2583: IFFALSE 2587
// exit ;
2585: GO 3160
// side := GetSide ( unit ) ;
2587: LD_ADDR_VAR 0 9
2591: PUSH
2592: LD_VAR 0 1
2596: PPUSH
2597: CALL_OW 255
2601: ST_TO_ADDR
// tech_space := tech_spacanom ;
2602: LD_ADDR_VAR 0 12
2606: PUSH
2607: LD_INT 29
2609: ST_TO_ADDR
// tech_time := tech_taurad ;
2610: LD_ADDR_VAR 0 13
2614: PUSH
2615: LD_INT 28
2617: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2618: LD_ADDR_VAR 0 11
2622: PUSH
2623: LD_VAR 0 1
2627: PPUSH
2628: CALL_OW 310
2632: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2633: LD_VAR 0 11
2637: PPUSH
2638: CALL_OW 247
2642: PUSH
2643: LD_INT 2
2645: EQUAL
2646: IFFALSE 2650
// exit ;
2648: GO 3160
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2650: LD_ADDR_VAR 0 8
2654: PUSH
2655: LD_INT 81
2657: PUSH
2658: LD_VAR 0 9
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 21
2672: PUSH
2673: LD_INT 3
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: ST_TO_ADDR
// if not tmp then
2693: LD_VAR 0 8
2697: NOT
2698: IFFALSE 2702
// exit ;
2700: GO 3160
// if in_unit then
2702: LD_VAR 0 11
2706: IFFALSE 2730
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2708: LD_ADDR_VAR 0 10
2712: PUSH
2713: LD_VAR 0 8
2717: PPUSH
2718: LD_VAR 0 11
2722: PPUSH
2723: CALL_OW 74
2727: ST_TO_ADDR
2728: GO 2750
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2730: LD_ADDR_VAR 0 10
2734: PUSH
2735: LD_VAR 0 8
2739: PPUSH
2740: LD_VAR 0 1
2744: PPUSH
2745: CALL_OW 74
2749: ST_TO_ADDR
// if not enemy then
2750: LD_VAR 0 10
2754: NOT
2755: IFFALSE 2759
// exit ;
2757: GO 3160
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2759: LD_VAR 0 11
2763: PUSH
2764: LD_VAR 0 11
2768: PPUSH
2769: LD_VAR 0 10
2773: PPUSH
2774: CALL_OW 296
2778: PUSH
2779: LD_INT 13
2781: GREATER
2782: AND
2783: PUSH
2784: LD_VAR 0 1
2788: PPUSH
2789: LD_VAR 0 10
2793: PPUSH
2794: CALL_OW 296
2798: PUSH
2799: LD_INT 12
2801: GREATER
2802: OR
2803: IFFALSE 2807
// exit ;
2805: GO 3160
// missile := [ 1 ] ;
2807: LD_ADDR_VAR 0 14
2811: PUSH
2812: LD_INT 1
2814: PUSH
2815: EMPTY
2816: LIST
2817: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2818: LD_VAR 0 9
2822: PPUSH
2823: LD_VAR 0 12
2827: PPUSH
2828: CALL_OW 325
2832: IFFALSE 2861
// missile := Insert ( missile , missile + 1 , 2 ) ;
2834: LD_ADDR_VAR 0 14
2838: PUSH
2839: LD_VAR 0 14
2843: PPUSH
2844: LD_VAR 0 14
2848: PUSH
2849: LD_INT 1
2851: PLUS
2852: PPUSH
2853: LD_INT 2
2855: PPUSH
2856: CALL_OW 2
2860: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2861: LD_VAR 0 9
2865: PPUSH
2866: LD_VAR 0 13
2870: PPUSH
2871: CALL_OW 325
2875: PUSH
2876: LD_VAR 0 10
2880: PPUSH
2881: CALL_OW 255
2885: PPUSH
2886: LD_VAR 0 13
2890: PPUSH
2891: CALL_OW 325
2895: NOT
2896: AND
2897: IFFALSE 2926
// missile := Insert ( missile , missile + 1 , 3 ) ;
2899: LD_ADDR_VAR 0 14
2903: PUSH
2904: LD_VAR 0 14
2908: PPUSH
2909: LD_VAR 0 14
2913: PUSH
2914: LD_INT 1
2916: PLUS
2917: PPUSH
2918: LD_INT 3
2920: PPUSH
2921: CALL_OW 2
2925: ST_TO_ADDR
// if missile < 2 then
2926: LD_VAR 0 14
2930: PUSH
2931: LD_INT 2
2933: LESS
2934: IFFALSE 2938
// exit ;
2936: GO 3160
// x := GetX ( enemy ) ;
2938: LD_ADDR_VAR 0 4
2942: PUSH
2943: LD_VAR 0 10
2947: PPUSH
2948: CALL_OW 250
2952: ST_TO_ADDR
// y := GetY ( enemy ) ;
2953: LD_ADDR_VAR 0 5
2957: PUSH
2958: LD_VAR 0 10
2962: PPUSH
2963: CALL_OW 251
2967: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2968: LD_ADDR_VAR 0 6
2972: PUSH
2973: LD_VAR 0 4
2977: PUSH
2978: LD_INT 1
2980: NEG
2981: PPUSH
2982: LD_INT 1
2984: PPUSH
2985: CALL_OW 12
2989: PLUS
2990: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2991: LD_ADDR_VAR 0 7
2995: PUSH
2996: LD_VAR 0 5
3000: PUSH
3001: LD_INT 1
3003: NEG
3004: PPUSH
3005: LD_INT 1
3007: PPUSH
3008: CALL_OW 12
3012: PLUS
3013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3014: LD_VAR 0 6
3018: PPUSH
3019: LD_VAR 0 7
3023: PPUSH
3024: CALL_OW 488
3028: NOT
3029: IFFALSE 3051
// begin _x := x ;
3031: LD_ADDR_VAR 0 6
3035: PUSH
3036: LD_VAR 0 4
3040: ST_TO_ADDR
// _y := y ;
3041: LD_ADDR_VAR 0 7
3045: PUSH
3046: LD_VAR 0 5
3050: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3051: LD_ADDR_VAR 0 3
3055: PUSH
3056: LD_INT 1
3058: PPUSH
3059: LD_VAR 0 14
3063: PPUSH
3064: CALL_OW 12
3068: ST_TO_ADDR
// case i of 1 :
3069: LD_VAR 0 3
3073: PUSH
3074: LD_INT 1
3076: DOUBLE
3077: EQUAL
3078: IFTRUE 3082
3080: GO 3099
3082: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3083: LD_VAR 0 1
3087: PPUSH
3088: LD_VAR 0 10
3092: PPUSH
3093: CALL_OW 115
3097: GO 3160
3099: LD_INT 2
3101: DOUBLE
3102: EQUAL
3103: IFTRUE 3107
3105: GO 3129
3107: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_VAR 0 6
3117: PPUSH
3118: LD_VAR 0 7
3122: PPUSH
3123: CALL_OW 153
3127: GO 3160
3129: LD_INT 3
3131: DOUBLE
3132: EQUAL
3133: IFTRUE 3137
3135: GO 3159
3137: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3138: LD_VAR 0 1
3142: PPUSH
3143: LD_VAR 0 6
3147: PPUSH
3148: LD_VAR 0 7
3152: PPUSH
3153: CALL_OW 154
3157: GO 3160
3159: POP
// end ;
3160: LD_VAR 0 2
3164: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3165: LD_INT 0
3167: PPUSH
3168: PPUSH
3169: PPUSH
3170: PPUSH
3171: PPUSH
3172: PPUSH
// if not unit or not building then
3173: LD_VAR 0 1
3177: NOT
3178: PUSH
3179: LD_VAR 0 2
3183: NOT
3184: OR
3185: IFFALSE 3189
// exit ;
3187: GO 3344
// x := GetX ( building ) ;
3189: LD_ADDR_VAR 0 5
3193: PUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: CALL_OW 250
3203: ST_TO_ADDR
// y := GetY ( building ) ;
3204: LD_ADDR_VAR 0 6
3208: PUSH
3209: LD_VAR 0 2
3213: PPUSH
3214: CALL_OW 251
3218: ST_TO_ADDR
// for i = 0 to 5 do
3219: LD_ADDR_VAR 0 4
3223: PUSH
3224: DOUBLE
3225: LD_INT 0
3227: DEC
3228: ST_TO_ADDR
3229: LD_INT 5
3231: PUSH
3232: FOR_TO
3233: IFFALSE 3342
// begin _x := ShiftX ( x , i , 3 ) ;
3235: LD_ADDR_VAR 0 7
3239: PUSH
3240: LD_VAR 0 5
3244: PPUSH
3245: LD_VAR 0 4
3249: PPUSH
3250: LD_INT 3
3252: PPUSH
3253: CALL_OW 272
3257: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3258: LD_ADDR_VAR 0 8
3262: PUSH
3263: LD_VAR 0 6
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: CALL_OW 273
3280: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
3281: LD_VAR 0 7
3285: PPUSH
3286: LD_VAR 0 8
3290: PPUSH
3291: CALL_OW 428
3295: PUSH
3296: LD_INT 0
3298: EQUAL
3299: PUSH
3300: LD_VAR 0 7
3304: PPUSH
3305: LD_VAR 0 8
3309: PPUSH
3310: CALL_OW 488
3314: AND
3315: IFFALSE 3340
// begin ComMoveXY ( unit , _x , _y ) ;
3317: LD_VAR 0 1
3321: PPUSH
3322: LD_VAR 0 7
3326: PPUSH
3327: LD_VAR 0 8
3331: PPUSH
3332: CALL_OW 111
// exit ;
3336: POP
3337: POP
3338: GO 3344
// end ; end ;
3340: GO 3232
3342: POP
3343: POP
// end ;
3344: LD_VAR 0 3
3348: RET
// export function ScanBase ( side , base_area ) ; begin
3349: LD_INT 0
3351: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3352: LD_ADDR_VAR 0 3
3356: PUSH
3357: LD_VAR 0 2
3361: PPUSH
3362: LD_INT 81
3364: PUSH
3365: LD_VAR 0 1
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PPUSH
3374: CALL_OW 70
3378: ST_TO_ADDR
// end ;
3379: LD_VAR 0 3
3383: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
3384: LD_INT 0
3386: PPUSH
3387: PPUSH
3388: PPUSH
3389: PPUSH
3390: PPUSH
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
3400: PPUSH
3401: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
3402: LD_ADDR_VAR 0 12
3406: PUSH
3407: LD_EXP 8
3411: PUSH
3412: LD_VAR 0 1
3416: ARRAY
3417: PPUSH
3418: LD_INT 25
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PPUSH
3428: CALL_OW 72
3432: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
3433: LD_ADDR_VAR 0 8
3437: PUSH
3438: LD_EXP 8
3442: PUSH
3443: LD_VAR 0 1
3447: ARRAY
3448: PPUSH
3449: LD_INT 2
3451: PUSH
3452: LD_INT 25
3454: PUSH
3455: LD_INT 1
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 5
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 25
3474: PUSH
3475: LD_INT 8
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 25
3484: PUSH
3485: LD_INT 9
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PPUSH
3499: CALL_OW 72
3503: ST_TO_ADDR
// if not defenders and not solds then
3504: LD_VAR 0 2
3508: NOT
3509: PUSH
3510: LD_VAR 0 8
3514: NOT
3515: AND
3516: IFFALSE 3520
// exit ;
3518: GO 4886
// depot_under_attack := false ;
3520: LD_ADDR_VAR 0 16
3524: PUSH
3525: LD_INT 0
3527: ST_TO_ADDR
// sold_defenders := [ ] ;
3528: LD_ADDR_VAR 0 17
3532: PUSH
3533: EMPTY
3534: ST_TO_ADDR
// if mechs then
3535: LD_VAR 0 12
3539: IFFALSE 3668
// for i in defenders do
3541: LD_ADDR_VAR 0 5
3545: PUSH
3546: LD_VAR 0 2
3550: PUSH
3551: FOR_IN
3552: IFFALSE 3666
// begin SetTag ( i , 20 ) ;
3554: LD_VAR 0 5
3558: PPUSH
3559: LD_INT 20
3561: PPUSH
3562: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
3566: LD_VAR 0 5
3570: PPUSH
3571: CALL_OW 263
3575: PUSH
3576: LD_INT 1
3578: EQUAL
3579: PUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: CALL_OW 311
3589: NOT
3590: AND
3591: PUSH
3592: LD_VAR 0 12
3596: AND
3597: IFFALSE 3664
// begin un := mechs [ 1 ] ;
3599: LD_ADDR_VAR 0 10
3603: PUSH
3604: LD_VAR 0 12
3608: PUSH
3609: LD_INT 1
3611: ARRAY
3612: ST_TO_ADDR
// ComExitBuilding ( un ) ;
3613: LD_VAR 0 10
3617: PPUSH
3618: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
3622: LD_VAR 0 10
3626: PPUSH
3627: LD_VAR 0 5
3631: PPUSH
3632: CALL_OW 180
// SetTag ( un , 19 ) ;
3636: LD_VAR 0 10
3640: PPUSH
3641: LD_INT 19
3643: PPUSH
3644: CALL_OW 109
// mechs := mechs diff un ;
3648: LD_ADDR_VAR 0 12
3652: PUSH
3653: LD_VAR 0 12
3657: PUSH
3658: LD_VAR 0 10
3662: DIFF
3663: ST_TO_ADDR
// end ; end ;
3664: GO 3551
3666: POP
3667: POP
// if solds then
3668: LD_VAR 0 8
3672: IFFALSE 3731
// for i in solds do
3674: LD_ADDR_VAR 0 5
3678: PUSH
3679: LD_VAR 0 8
3683: PUSH
3684: FOR_IN
3685: IFFALSE 3729
// if not GetTag ( i ) then
3687: LD_VAR 0 5
3691: PPUSH
3692: CALL_OW 110
3696: NOT
3697: IFFALSE 3727
// begin defenders := defenders union i ;
3699: LD_ADDR_VAR 0 2
3703: PUSH
3704: LD_VAR 0 2
3708: PUSH
3709: LD_VAR 0 5
3713: UNION
3714: ST_TO_ADDR
// SetTag ( i , 18 ) ;
3715: LD_VAR 0 5
3719: PPUSH
3720: LD_INT 18
3722: PPUSH
3723: CALL_OW 109
// end ;
3727: GO 3684
3729: POP
3730: POP
// repeat wait ( 0 0$1 ) ;
3731: LD_INT 35
3733: PPUSH
3734: CALL_OW 67
// enemy := mc_scan [ base ] ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_EXP 31
3747: PUSH
3748: LD_VAR 0 1
3752: ARRAY
3753: ST_TO_ADDR
// for i in defenders do
3754: LD_ADDR_VAR 0 5
3758: PUSH
3759: LD_VAR 0 2
3763: PUSH
3764: FOR_IN
3765: IFFALSE 4450
// begin e := NearestUnitToUnit ( enemy , i ) ;
3767: LD_ADDR_VAR 0 13
3771: PUSH
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_VAR 0 5
3781: PPUSH
3782: CALL_OW 74
3786: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
3787: LD_ADDR_VAR 0 16
3791: PUSH
3792: LD_EXP 8
3796: PUSH
3797: LD_VAR 0 1
3801: ARRAY
3802: PPUSH
3803: LD_INT 2
3805: PUSH
3806: LD_INT 30
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 30
3818: PUSH
3819: LD_INT 1
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: PPUSH
3831: CALL_OW 72
3835: NOT
3836: PUSH
3837: LD_EXP 8
3841: PUSH
3842: LD_VAR 0 1
3846: ARRAY
3847: PPUSH
3848: LD_INT 2
3850: PUSH
3851: LD_INT 30
3853: PUSH
3854: LD_INT 0
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: LD_INT 30
3863: PUSH
3864: LD_INT 1
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: PPUSH
3876: CALL_OW 72
3880: PPUSH
3881: CALL_OW 256
3885: PUSH
3886: LD_INT 600
3888: LESS
3889: OR
3890: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
3891: LD_VAR 0 5
3895: PPUSH
3896: CALL_OW 247
3900: PUSH
3901: LD_INT 2
3903: DOUBLE
3904: EQUAL
3905: IFTRUE 3909
3907: GO 4156
3909: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
3910: LD_VAR 0 5
3914: PPUSH
3915: CALL_OW 256
3919: PUSH
3920: LD_INT 650
3922: GREATER
3923: PUSH
3924: LD_VAR 0 5
3928: PPUSH
3929: LD_VAR 0 13
3933: PPUSH
3934: CALL_OW 296
3938: PUSH
3939: LD_INT 40
3941: LESS
3942: AND
3943: IFFALSE 3961
// ComAttackUnit ( i , e ) else
3945: LD_VAR 0 5
3949: PPUSH
3950: LD_VAR 0 13
3954: PPUSH
3955: CALL_OW 115
3959: GO 4039
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
3961: LD_VAR 0 5
3965: PPUSH
3966: LD_VAR 0 13
3970: PPUSH
3971: CALL_OW 296
3975: PUSH
3976: LD_INT 30
3978: GREATEREQUAL
3979: PUSH
3980: LD_VAR 0 5
3984: PPUSH
3985: CALL_OW 256
3989: PUSH
3990: LD_INT 650
3992: LESSEQUAL
3993: OR
3994: PUSH
3995: LD_VAR 0 5
3999: PPUSH
4000: LD_EXP 32
4004: PUSH
4005: LD_VAR 0 1
4009: ARRAY
4010: PPUSH
4011: CALL_OW 308
4015: NOT
4016: AND
4017: IFFALSE 4039
// ComMoveToArea ( i , mc_parking [ base ] ) ;
4019: LD_VAR 0 5
4023: PPUSH
4024: LD_EXP 32
4028: PUSH
4029: LD_VAR 0 1
4033: ARRAY
4034: PPUSH
4035: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
4039: LD_VAR 0 5
4043: PPUSH
4044: CALL_OW 256
4048: PUSH
4049: LD_INT 998
4051: LESS
4052: PUSH
4053: LD_VAR 0 5
4057: PPUSH
4058: CALL_OW 263
4062: PUSH
4063: LD_INT 1
4065: EQUAL
4066: AND
4067: PUSH
4068: LD_VAR 0 5
4072: PPUSH
4073: CALL_OW 311
4077: AND
4078: PUSH
4079: LD_VAR 0 5
4083: PPUSH
4084: LD_EXP 32
4088: PUSH
4089: LD_VAR 0 1
4093: ARRAY
4094: PPUSH
4095: CALL_OW 308
4099: AND
4100: IFFALSE 4154
// begin mech := IsDrivenBy ( i ) ;
4102: LD_ADDR_VAR 0 9
4106: PUSH
4107: LD_VAR 0 5
4111: PPUSH
4112: CALL_OW 311
4116: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4117: LD_VAR 0 9
4121: PPUSH
4122: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
4126: LD_VAR 0 9
4130: PPUSH
4131: LD_VAR 0 5
4135: PPUSH
4136: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
4140: LD_VAR 0 9
4144: PPUSH
4145: LD_VAR 0 5
4149: PPUSH
4150: CALL_OW 180
// end ; end ; unit_human :
4154: GO 4421
4156: LD_INT 1
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4420
4164: POP
// begin b := IsInUnit ( i ) ;
4165: LD_ADDR_VAR 0 18
4169: PUSH
4170: LD_VAR 0 5
4174: PPUSH
4175: CALL_OW 310
4179: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
4180: LD_ADDR_VAR 0 19
4184: PUSH
4185: LD_VAR 0 18
4189: NOT
4190: PUSH
4191: LD_VAR 0 18
4195: PPUSH
4196: CALL_OW 266
4200: PUSH
4201: LD_INT 32
4203: PUSH
4204: LD_INT 31
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: IN
4211: OR
4212: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
4213: LD_VAR 0 16
4217: PUSH
4218: LD_VAR 0 2
4222: PPUSH
4223: LD_INT 21
4225: PUSH
4226: LD_INT 2
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 72
4237: PUSH
4238: LD_INT 1
4240: LESSEQUAL
4241: OR
4242: PUSH
4243: LD_VAR 0 19
4247: AND
4248: PUSH
4249: LD_VAR 0 5
4253: PUSH
4254: LD_VAR 0 17
4258: IN
4259: NOT
4260: AND
4261: IFFALSE 4354
// begin if b then
4263: LD_VAR 0 18
4267: IFFALSE 4316
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
4269: LD_VAR 0 18
4273: PPUSH
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_VAR 0 18
4283: PPUSH
4284: CALL_OW 74
4288: PPUSH
4289: CALL_OW 296
4293: PUSH
4294: LD_INT 10
4296: LESS
4297: PUSH
4298: LD_VAR 0 18
4302: PPUSH
4303: CALL_OW 461
4307: PUSH
4308: LD_INT 7
4310: NONEQUAL
4311: AND
4312: IFFALSE 4316
// continue ;
4314: GO 3764
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
4316: LD_ADDR_VAR 0 17
4320: PUSH
4321: LD_VAR 0 17
4325: PPUSH
4326: LD_VAR 0 17
4330: PUSH
4331: LD_INT 1
4333: PLUS
4334: PPUSH
4335: LD_VAR 0 5
4339: PPUSH
4340: CALL_OW 1
4344: ST_TO_ADDR
// ComExitBuilding ( i ) ;
4345: LD_VAR 0 5
4349: PPUSH
4350: CALL_OW 122
// end ; if sold_defenders then
4354: LD_VAR 0 17
4358: IFFALSE 4418
// if i in sold_defenders then
4360: LD_VAR 0 5
4364: PUSH
4365: LD_VAR 0 17
4369: IN
4370: IFFALSE 4418
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
4372: LD_VAR 0 5
4376: PPUSH
4377: CALL_OW 314
4381: NOT
4382: PUSH
4383: LD_VAR 0 5
4387: PPUSH
4388: LD_VAR 0 13
4392: PPUSH
4393: CALL_OW 296
4397: PUSH
4398: LD_INT 30
4400: LESS
4401: AND
4402: IFFALSE 4418
// ComAttackUnit ( i , e ) ;
4404: LD_VAR 0 5
4408: PPUSH
4409: LD_VAR 0 13
4413: PPUSH
4414: CALL_OW 115
// end ; end ; end ;
4418: GO 4421
4420: POP
// if IsDead ( i ) then
4421: LD_VAR 0 5
4425: PPUSH
4426: CALL_OW 301
4430: IFFALSE 4448
// defenders := defenders diff i ;
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_VAR 0 2
4441: PUSH
4442: LD_VAR 0 5
4446: DIFF
4447: ST_TO_ADDR
// end ;
4448: GO 3764
4450: POP
4451: POP
// until not enemy or not defenders ;
4452: LD_VAR 0 3
4456: NOT
4457: PUSH
4458: LD_VAR 0 2
4462: NOT
4463: OR
4464: IFFALSE 3731
// MC_Reset ( base , 18 ) ;
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_INT 18
4473: PPUSH
4474: CALL 42409 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
4478: LD_ADDR_VAR 0 2
4482: PUSH
4483: LD_VAR 0 2
4487: PUSH
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 2
4495: PUSH
4496: LD_INT 25
4498: PUSH
4499: LD_INT 1
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 25
4508: PUSH
4509: LD_INT 5
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 25
4518: PUSH
4519: LD_INT 8
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PUSH
4526: LD_INT 25
4528: PUSH
4529: LD_INT 9
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 72
4547: DIFF
4548: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
4549: LD_VAR 0 3
4553: NOT
4554: PUSH
4555: LD_VAR 0 2
4559: PPUSH
4560: LD_INT 21
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 72
4574: AND
4575: IFFALSE 4837
// begin tmp := FilterByTag ( defenders , 19 ) ;
4577: LD_ADDR_VAR 0 11
4581: PUSH
4582: LD_VAR 0 2
4586: PPUSH
4587: LD_INT 19
4589: PPUSH
4590: CALL 39348 0 2
4594: ST_TO_ADDR
// if tmp then
4595: LD_VAR 0 11
4599: IFFALSE 4669
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
4601: LD_ADDR_VAR 0 11
4605: PUSH
4606: LD_VAR 0 11
4610: PPUSH
4611: LD_INT 25
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PPUSH
4621: CALL_OW 72
4625: ST_TO_ADDR
// if tmp then
4626: LD_VAR 0 11
4630: IFFALSE 4669
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
4632: LD_ADDR_EXP 20
4636: PUSH
4637: LD_EXP 20
4641: PPUSH
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_EXP 20
4651: PUSH
4652: LD_VAR 0 1
4656: ARRAY
4657: PUSH
4658: LD_VAR 0 11
4662: UNION
4663: PPUSH
4664: CALL_OW 1
4668: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
4669: LD_VAR 0 1
4673: PPUSH
4674: LD_INT 19
4676: PPUSH
4677: CALL 42409 0 2
// repeat wait ( 0 0$1 ) ;
4681: LD_INT 35
4683: PPUSH
4684: CALL_OW 67
// for i in defenders do
4688: LD_ADDR_VAR 0 5
4692: PUSH
4693: LD_VAR 0 2
4697: PUSH
4698: FOR_IN
4699: IFFALSE 4788
// begin if not IsInArea ( i , mc_parking [ base ] ) then
4701: LD_VAR 0 5
4705: PPUSH
4706: LD_EXP 32
4710: PUSH
4711: LD_VAR 0 1
4715: ARRAY
4716: PPUSH
4717: CALL_OW 308
4721: NOT
4722: IFFALSE 4746
// ComMoveToArea ( i , mc_parking [ base ] ) else
4724: LD_VAR 0 5
4728: PPUSH
4729: LD_EXP 32
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 113
4744: GO 4786
// if GetControl ( i ) = control_manual then
4746: LD_VAR 0 5
4750: PPUSH
4751: CALL_OW 263
4755: PUSH
4756: LD_INT 1
4758: EQUAL
4759: IFFALSE 4786
// if IsDrivenBy ( i ) then
4761: LD_VAR 0 5
4765: PPUSH
4766: CALL_OW 311
4770: IFFALSE 4786
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
4772: LD_VAR 0 5
4776: PPUSH
4777: CALL_OW 311
4781: PPUSH
4782: CALL_OW 121
// end ;
4786: GO 4698
4788: POP
4789: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
4790: LD_VAR 0 2
4794: PPUSH
4795: LD_INT 95
4797: PUSH
4798: LD_EXP 32
4802: PUSH
4803: LD_VAR 0 1
4807: ARRAY
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PPUSH
4813: CALL_OW 72
4817: PUSH
4818: LD_VAR 0 2
4822: EQUAL
4823: PUSH
4824: LD_EXP 31
4828: PUSH
4829: LD_VAR 0 1
4833: ARRAY
4834: OR
4835: IFFALSE 4681
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
4837: LD_ADDR_EXP 30
4841: PUSH
4842: LD_EXP 30
4846: PPUSH
4847: LD_VAR 0 1
4851: PPUSH
4852: LD_EXP 30
4856: PUSH
4857: LD_VAR 0 1
4861: ARRAY
4862: PUSH
4863: LD_VAR 0 2
4867: UNION
4868: PPUSH
4869: CALL_OW 1
4873: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
4874: LD_VAR 0 1
4878: PPUSH
4879: LD_INT 20
4881: PPUSH
4882: CALL 42409 0 2
// end ;
4886: LD_VAR 0 4
4890: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4891: LD_INT 0
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
// result := false ;
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: LD_INT 0
4904: ST_TO_ADDR
// side := GetSide ( unit ) ;
4905: LD_ADDR_VAR 0 3
4909: PUSH
4910: LD_VAR 0 1
4914: PPUSH
4915: CALL_OW 255
4919: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4920: LD_ADDR_VAR 0 4
4924: PUSH
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 248
4934: ST_TO_ADDR
// case nat of 1 :
4935: LD_VAR 0 4
4939: PUSH
4940: LD_INT 1
4942: DOUBLE
4943: EQUAL
4944: IFTRUE 4948
4946: GO 4959
4948: POP
// tech := tech_lassight ; 2 :
4949: LD_ADDR_VAR 0 5
4953: PUSH
4954: LD_INT 12
4956: ST_TO_ADDR
4957: GO 4998
4959: LD_INT 2
4961: DOUBLE
4962: EQUAL
4963: IFTRUE 4967
4965: GO 4978
4967: POP
// tech := tech_mortar ; 3 :
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: LD_INT 41
4975: ST_TO_ADDR
4976: GO 4998
4978: LD_INT 3
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 4997
4986: POP
// tech := tech_bazooka ; end ;
4987: LD_ADDR_VAR 0 5
4991: PUSH
4992: LD_INT 44
4994: ST_TO_ADDR
4995: GO 4998
4997: POP
// if Researched ( side , tech ) then
4998: LD_VAR 0 3
5002: PPUSH
5003: LD_VAR 0 5
5007: PPUSH
5008: CALL_OW 325
5012: IFFALSE 5039
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5014: LD_ADDR_VAR 0 2
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: LD_INT 8
5024: PUSH
5025: LD_INT 9
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PUSH
5033: LD_VAR 0 4
5037: ARRAY
5038: ST_TO_ADDR
// end ;
5039: LD_VAR 0 2
5043: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5044: LD_INT 0
5046: PPUSH
5047: PPUSH
5048: PPUSH
// if not mines then
5049: LD_VAR 0 2
5053: NOT
5054: IFFALSE 5058
// exit ;
5056: GO 5202
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5058: LD_ADDR_VAR 0 5
5062: PUSH
5063: LD_INT 81
5065: PUSH
5066: LD_VAR 0 1
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: LD_INT 21
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 69
5100: ST_TO_ADDR
// for i in mines do
5101: LD_ADDR_VAR 0 4
5105: PUSH
5106: LD_VAR 0 2
5110: PUSH
5111: FOR_IN
5112: IFFALSE 5200
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5114: LD_VAR 0 4
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_VAR 0 4
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: CALL_OW 458
5136: NOT
5137: IFFALSE 5141
// continue ;
5139: GO 5111
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5141: LD_VAR 0 4
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PPUSH
5150: LD_VAR 0 4
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: CALL_OW 428
5163: PUSH
5164: LD_VAR 0 5
5168: IN
5169: IFFALSE 5198
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5171: LD_VAR 0 4
5175: PUSH
5176: LD_INT 1
5178: ARRAY
5179: PPUSH
5180: LD_VAR 0 4
5184: PUSH
5185: LD_INT 2
5187: ARRAY
5188: PPUSH
5189: LD_VAR 0 1
5193: PPUSH
5194: CALL_OW 456
// end ;
5198: GO 5111
5200: POP
5201: POP
// end ;
5202: LD_VAR 0 3
5206: RET
// export function Count ( array ) ; var i ; begin
5207: LD_INT 0
5209: PPUSH
5210: PPUSH
// result := 0 ;
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_INT 0
5218: ST_TO_ADDR
// for i in array do
5219: LD_ADDR_VAR 0 3
5223: PUSH
5224: LD_VAR 0 1
5228: PUSH
5229: FOR_IN
5230: IFFALSE 5254
// if i then
5232: LD_VAR 0 3
5236: IFFALSE 5252
// result := result + 1 ;
5238: LD_ADDR_VAR 0 2
5242: PUSH
5243: LD_VAR 0 2
5247: PUSH
5248: LD_INT 1
5250: PLUS
5251: ST_TO_ADDR
5252: GO 5229
5254: POP
5255: POP
// end ;
5256: LD_VAR 0 2
5260: RET
// export function IsEmpty ( building ) ; begin
5261: LD_INT 0
5263: PPUSH
// if not building then
5264: LD_VAR 0 1
5268: NOT
5269: IFFALSE 5273
// exit ;
5271: GO 5316
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: LD_VAR 0 1
5282: PUSH
5283: LD_INT 22
5285: PUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 255
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 58
5302: PUSH
5303: EMPTY
5304: LIST
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PPUSH
5310: CALL_OW 69
5314: IN
5315: ST_TO_ADDR
// end ;
5316: LD_VAR 0 2
5320: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5321: LD_INT 0
5323: PPUSH
5324: PPUSH
5325: PPUSH
5326: PPUSH
// tmp := [ ] ;
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: EMPTY
5333: ST_TO_ADDR
// list := [ ] ;
5334: LD_ADDR_VAR 0 5
5338: PUSH
5339: EMPTY
5340: ST_TO_ADDR
// for i = 16 to 25 do
5341: LD_ADDR_VAR 0 4
5345: PUSH
5346: DOUBLE
5347: LD_INT 16
5349: DEC
5350: ST_TO_ADDR
5351: LD_INT 25
5353: PUSH
5354: FOR_TO
5355: IFFALSE 5428
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5357: LD_ADDR_VAR 0 3
5361: PUSH
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 22
5369: PUSH
5370: LD_VAR 0 1
5374: PPUSH
5375: CALL_OW 255
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PUSH
5384: LD_INT 91
5386: PUSH
5387: LD_VAR 0 1
5391: PUSH
5392: LD_INT 6
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 30
5402: PUSH
5403: LD_VAR 0 4
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: PPUSH
5420: CALL_OW 69
5424: ADD
5425: ST_TO_ADDR
5426: GO 5354
5428: POP
5429: POP
// for i = 1 to tmp do
5430: LD_ADDR_VAR 0 4
5434: PUSH
5435: DOUBLE
5436: LD_INT 1
5438: DEC
5439: ST_TO_ADDR
5440: LD_VAR 0 3
5444: PUSH
5445: FOR_TO
5446: IFFALSE 5534
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5448: LD_ADDR_VAR 0 5
5452: PUSH
5453: LD_VAR 0 5
5457: PUSH
5458: LD_VAR 0 3
5462: PUSH
5463: LD_VAR 0 4
5467: ARRAY
5468: PPUSH
5469: CALL_OW 266
5473: PUSH
5474: LD_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: ARRAY
5484: PPUSH
5485: CALL_OW 250
5489: PUSH
5490: LD_VAR 0 3
5494: PUSH
5495: LD_VAR 0 4
5499: ARRAY
5500: PPUSH
5501: CALL_OW 251
5505: PUSH
5506: LD_VAR 0 3
5510: PUSH
5511: LD_VAR 0 4
5515: ARRAY
5516: PPUSH
5517: CALL_OW 254
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: EMPTY
5529: LIST
5530: ADD
5531: ST_TO_ADDR
5532: GO 5445
5534: POP
5535: POP
// result := list ;
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: LD_VAR 0 5
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 2
5550: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
5555: PPUSH
5556: PPUSH
5557: PPUSH
5558: PPUSH
5559: PPUSH
// if not factory then
5560: LD_VAR 0 1
5564: NOT
5565: IFFALSE 5569
// exit ;
5567: GO 6094
// if control = control_apeman then
5569: LD_VAR 0 4
5573: PUSH
5574: LD_INT 5
5576: EQUAL
5577: IFFALSE 5686
// begin tmp := UnitsInside ( factory ) ;
5579: LD_ADDR_VAR 0 8
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 313
5593: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5594: LD_VAR 0 8
5598: PPUSH
5599: LD_INT 25
5601: PUSH
5602: LD_INT 12
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 72
5613: NOT
5614: IFFALSE 5624
// control := control_manual ;
5616: LD_ADDR_VAR 0 4
5620: PUSH
5621: LD_INT 1
5623: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5624: LD_ADDR_VAR 0 8
5628: PUSH
5629: LD_VAR 0 1
5633: PPUSH
5634: CALL 5321 0 1
5638: ST_TO_ADDR
// if tmp then
5639: LD_VAR 0 8
5643: IFFALSE 5686
// begin for i in tmp do
5645: LD_ADDR_VAR 0 7
5649: PUSH
5650: LD_VAR 0 8
5654: PUSH
5655: FOR_IN
5656: IFFALSE 5684
// if i [ 1 ] = b_ext_radar then
5658: LD_VAR 0 7
5662: PUSH
5663: LD_INT 1
5665: ARRAY
5666: PUSH
5667: LD_INT 20
5669: EQUAL
5670: IFFALSE 5682
// begin control := control_remote ;
5672: LD_ADDR_VAR 0 4
5676: PUSH
5677: LD_INT 2
5679: ST_TO_ADDR
// break ;
5680: GO 5684
// end ;
5682: GO 5655
5684: POP
5685: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: LD_VAR 0 2
5695: PPUSH
5696: LD_VAR 0 3
5700: PPUSH
5701: LD_VAR 0 4
5705: PPUSH
5706: LD_VAR 0 5
5710: PPUSH
5711: CALL_OW 448
5715: IFFALSE 5750
// begin result := [ chassis , engine , control , weapon ] ;
5717: LD_ADDR_VAR 0 6
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_VAR 0 4
5736: PUSH
5737: LD_VAR 0 5
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: ST_TO_ADDR
// exit ;
5748: GO 6094
// end ; _chassis := AvailableChassisList ( factory ) ;
5750: LD_ADDR_VAR 0 9
5754: PUSH
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 475
5764: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5765: LD_ADDR_VAR 0 11
5769: PUSH
5770: LD_VAR 0 1
5774: PPUSH
5775: CALL_OW 476
5779: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5780: LD_ADDR_VAR 0 12
5784: PUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 477
5794: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5795: LD_ADDR_VAR 0 10
5799: PUSH
5800: LD_VAR 0 1
5804: PPUSH
5805: CALL_OW 478
5809: ST_TO_ADDR
// if not chassis in _chassis then
5810: LD_VAR 0 2
5814: PUSH
5815: LD_VAR 0 9
5819: IN
5820: NOT
5821: IFFALSE 5847
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5823: LD_ADDR_VAR 0 2
5827: PUSH
5828: LD_VAR 0 9
5832: PUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_VAR 0 9
5840: PPUSH
5841: CALL_OW 12
5845: ARRAY
5846: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5847: LD_VAR 0 2
5851: PPUSH
5852: LD_VAR 0 3
5856: PPUSH
5857: CALL 6099 0 2
5861: NOT
5862: IFFALSE 5921
// repeat engine := _engine [ 1 ] ;
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_VAR 0 11
5873: PUSH
5874: LD_INT 1
5876: ARRAY
5877: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5878: LD_ADDR_VAR 0 11
5882: PUSH
5883: LD_VAR 0 11
5887: PPUSH
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 3
5895: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5896: LD_VAR 0 2
5900: PPUSH
5901: LD_VAR 0 3
5905: PPUSH
5906: CALL 6099 0 2
5910: PUSH
5911: LD_VAR 0 11
5915: PUSH
5916: EMPTY
5917: EQUAL
5918: OR
5919: IFFALSE 5864
// if not control in _control then
5921: LD_VAR 0 4
5925: PUSH
5926: LD_VAR 0 12
5930: IN
5931: NOT
5932: IFFALSE 5958
// control := _control [ rand ( 1 , _control ) ] ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_VAR 0 12
5943: PUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_VAR 0 12
5951: PPUSH
5952: CALL_OW 12
5956: ARRAY
5957: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_VAR 0 5
5967: PPUSH
5968: CALL 6319 0 2
5972: NOT
5973: IFFALSE 6032
// repeat weapon := _weapon [ 1 ] ;
5975: LD_ADDR_VAR 0 5
5979: PUSH
5980: LD_VAR 0 10
5984: PUSH
5985: LD_INT 1
5987: ARRAY
5988: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5989: LD_ADDR_VAR 0 10
5993: PUSH
5994: LD_VAR 0 10
5998: PPUSH
5999: LD_INT 1
6001: PPUSH
6002: CALL_OW 3
6006: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL 6319 0 2
6021: PUSH
6022: LD_VAR 0 10
6026: PUSH
6027: EMPTY
6028: EQUAL
6029: OR
6030: IFFALSE 5975
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6032: LD_VAR 0 1
6036: PPUSH
6037: LD_VAR 0 2
6041: PPUSH
6042: LD_VAR 0 3
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: LD_VAR 0 5
6056: PPUSH
6057: CALL_OW 448
6061: IFFALSE 6094
// result := [ chassis , engine , control , weapon ] ;
6063: LD_ADDR_VAR 0 6
6067: PUSH
6068: LD_VAR 0 2
6072: PUSH
6073: LD_VAR 0 3
6077: PUSH
6078: LD_VAR 0 4
6082: PUSH
6083: LD_VAR 0 5
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: ST_TO_ADDR
// end ;
6094: LD_VAR 0 6
6098: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6099: LD_INT 0
6101: PPUSH
// if not chassis or not engine then
6102: LD_VAR 0 1
6106: NOT
6107: PUSH
6108: LD_VAR 0 2
6112: NOT
6113: OR
6114: IFFALSE 6118
// exit ;
6116: GO 6314
// case engine of engine_solar :
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 2
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6169
6131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_INT 11
6139: PUSH
6140: LD_INT 12
6142: PUSH
6143: LD_INT 13
6145: PUSH
6146: LD_INT 14
6148: PUSH
6149: LD_INT 1
6151: PUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: ST_TO_ADDR
6167: GO 6298
6169: LD_INT 1
6171: DOUBLE
6172: EQUAL
6173: IFTRUE 6177
6175: GO 6239
6177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6178: LD_ADDR_VAR 0 3
6182: PUSH
6183: LD_INT 11
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: LD_INT 13
6191: PUSH
6192: LD_INT 14
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: LD_INT 2
6200: PUSH
6201: LD_INT 3
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: LD_INT 5
6209: PUSH
6210: LD_INT 21
6212: PUSH
6213: LD_INT 23
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_INT 24
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: ST_TO_ADDR
6237: GO 6298
6239: LD_INT 3
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6297
6247: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6248: LD_ADDR_VAR 0 3
6252: PUSH
6253: LD_INT 13
6255: PUSH
6256: LD_INT 14
6258: PUSH
6259: LD_INT 2
6261: PUSH
6262: LD_INT 3
6264: PUSH
6265: LD_INT 4
6267: PUSH
6268: LD_INT 5
6270: PUSH
6271: LD_INT 21
6273: PUSH
6274: LD_INT 22
6276: PUSH
6277: LD_INT 23
6279: PUSH
6280: LD_INT 24
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: ST_TO_ADDR
6295: GO 6298
6297: POP
// result := ( chassis in result ) ;
6298: LD_ADDR_VAR 0 3
6302: PUSH
6303: LD_VAR 0 1
6307: PUSH
6308: LD_VAR 0 3
6312: IN
6313: ST_TO_ADDR
// end ;
6314: LD_VAR 0 3
6318: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6319: LD_INT 0
6321: PPUSH
// if not chassis or not weapon then
6322: LD_VAR 0 1
6326: NOT
6327: PUSH
6328: LD_VAR 0 2
6332: NOT
6333: OR
6334: IFFALSE 6338
// exit ;
6336: GO 7364
// case weapon of us_machine_gun :
6338: LD_VAR 0 2
6342: PUSH
6343: LD_INT 2
6345: DOUBLE
6346: EQUAL
6347: IFTRUE 6351
6349: GO 6381
6351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6352: LD_ADDR_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: PUSH
6360: LD_INT 2
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: ST_TO_ADDR
6379: GO 7348
6381: LD_INT 3
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6389
6387: GO 6419
6389: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6390: LD_ADDR_VAR 0 3
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 5
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: ST_TO_ADDR
6417: GO 7348
6419: LD_INT 11
6421: DOUBLE
6422: EQUAL
6423: IFTRUE 6427
6425: GO 6457
6427: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6428: LD_ADDR_VAR 0 3
6432: PUSH
6433: LD_INT 1
6435: PUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 3
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: LD_INT 5
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: ST_TO_ADDR
6455: GO 7348
6457: LD_INT 4
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6491
6465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6466: LD_ADDR_VAR 0 3
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: LD_INT 4
6479: PUSH
6480: LD_INT 5
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: ST_TO_ADDR
6489: GO 7348
6491: LD_INT 5
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6525
6499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: LD_INT 2
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: LD_INT 4
6513: PUSH
6514: LD_INT 5
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: ST_TO_ADDR
6523: GO 7348
6525: LD_INT 9
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6533
6531: GO 6559
6533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6534: LD_ADDR_VAR 0 3
6538: PUSH
6539: LD_INT 2
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 4
6547: PUSH
6548: LD_INT 5
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: ST_TO_ADDR
6557: GO 7348
6559: LD_INT 7
6561: DOUBLE
6562: EQUAL
6563: IFTRUE 6567
6565: GO 6593
6567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6568: LD_ADDR_VAR 0 3
6572: PUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 3
6578: PUSH
6579: LD_INT 4
6581: PUSH
6582: LD_INT 5
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: ST_TO_ADDR
6591: GO 7348
6593: LD_INT 12
6595: DOUBLE
6596: EQUAL
6597: IFTRUE 6601
6599: GO 6627
6601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: LD_INT 3
6612: PUSH
6613: LD_INT 4
6615: PUSH
6616: LD_INT 5
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: ST_TO_ADDR
6625: GO 7348
6627: LD_INT 13
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6661
6635: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6636: LD_ADDR_VAR 0 3
6640: PUSH
6641: LD_INT 2
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: ST_TO_ADDR
6659: GO 7348
6661: LD_INT 14
6663: DOUBLE
6664: EQUAL
6665: IFTRUE 6669
6667: GO 6687
6669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6670: LD_ADDR_VAR 0 3
6674: PUSH
6675: LD_INT 4
6677: PUSH
6678: LD_INT 5
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 7348
6687: LD_INT 6
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6713
6695: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: ST_TO_ADDR
6711: GO 7348
6713: LD_INT 10
6715: DOUBLE
6716: EQUAL
6717: IFTRUE 6721
6719: GO 6739
6721: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_INT 4
6729: PUSH
6730: LD_INT 5
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 7348
6739: LD_INT 22
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6773
6747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6748: LD_ADDR_VAR 0 3
6752: PUSH
6753: LD_INT 11
6755: PUSH
6756: LD_INT 12
6758: PUSH
6759: LD_INT 13
6761: PUSH
6762: LD_INT 14
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: ST_TO_ADDR
6771: GO 7348
6773: LD_INT 23
6775: DOUBLE
6776: EQUAL
6777: IFTRUE 6781
6779: GO 6807
6781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 11
6789: PUSH
6790: LD_INT 12
6792: PUSH
6793: LD_INT 13
6795: PUSH
6796: LD_INT 14
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
6805: GO 7348
6807: LD_INT 24
6809: DOUBLE
6810: EQUAL
6811: IFTRUE 6815
6813: GO 6841
6815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6816: LD_ADDR_VAR 0 3
6820: PUSH
6821: LD_INT 11
6823: PUSH
6824: LD_INT 12
6826: PUSH
6827: LD_INT 13
6829: PUSH
6830: LD_INT 14
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: ST_TO_ADDR
6839: GO 7348
6841: LD_INT 30
6843: DOUBLE
6844: EQUAL
6845: IFTRUE 6849
6847: GO 6875
6849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6850: LD_ADDR_VAR 0 3
6854: PUSH
6855: LD_INT 11
6857: PUSH
6858: LD_INT 12
6860: PUSH
6861: LD_INT 13
6863: PUSH
6864: LD_INT 14
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: ST_TO_ADDR
6873: GO 7348
6875: LD_INT 25
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6901
6883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6884: LD_ADDR_VAR 0 3
6888: PUSH
6889: LD_INT 13
6891: PUSH
6892: LD_INT 14
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: ST_TO_ADDR
6899: GO 7348
6901: LD_INT 27
6903: DOUBLE
6904: EQUAL
6905: IFTRUE 6909
6907: GO 6927
6909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6910: LD_ADDR_VAR 0 3
6914: PUSH
6915: LD_INT 13
6917: PUSH
6918: LD_INT 14
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: ST_TO_ADDR
6925: GO 7348
6927: LD_INT 28
6929: DOUBLE
6930: EQUAL
6931: IFTRUE 6935
6933: GO 6953
6935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_INT 13
6943: PUSH
6944: LD_INT 14
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: ST_TO_ADDR
6951: GO 7348
6953: LD_INT 29
6955: DOUBLE
6956: EQUAL
6957: IFTRUE 6961
6959: GO 6979
6961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6962: LD_ADDR_VAR 0 3
6966: PUSH
6967: LD_INT 13
6969: PUSH
6970: LD_INT 14
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: ST_TO_ADDR
6977: GO 7348
6979: LD_INT 31
6981: DOUBLE
6982: EQUAL
6983: IFTRUE 6987
6985: GO 7005
6987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6988: LD_ADDR_VAR 0 3
6992: PUSH
6993: LD_INT 13
6995: PUSH
6996: LD_INT 14
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: ST_TO_ADDR
7003: GO 7348
7005: LD_INT 26
7007: DOUBLE
7008: EQUAL
7009: IFTRUE 7013
7011: GO 7031
7013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_INT 13
7021: PUSH
7022: LD_INT 14
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: ST_TO_ADDR
7029: GO 7348
7031: LD_INT 42
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7065
7039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: LD_INT 21
7047: PUSH
7048: LD_INT 22
7050: PUSH
7051: LD_INT 23
7053: PUSH
7054: LD_INT 24
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: ST_TO_ADDR
7063: GO 7348
7065: LD_INT 43
7067: DOUBLE
7068: EQUAL
7069: IFTRUE 7073
7071: GO 7099
7073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7074: LD_ADDR_VAR 0 3
7078: PUSH
7079: LD_INT 21
7081: PUSH
7082: LD_INT 22
7084: PUSH
7085: LD_INT 23
7087: PUSH
7088: LD_INT 24
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: ST_TO_ADDR
7097: GO 7348
7099: LD_INT 44
7101: DOUBLE
7102: EQUAL
7103: IFTRUE 7107
7105: GO 7133
7107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7108: LD_ADDR_VAR 0 3
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_INT 23
7121: PUSH
7122: LD_INT 24
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: ST_TO_ADDR
7131: GO 7348
7133: LD_INT 45
7135: DOUBLE
7136: EQUAL
7137: IFTRUE 7141
7139: GO 7167
7141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7142: LD_ADDR_VAR 0 3
7146: PUSH
7147: LD_INT 21
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 23
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: ST_TO_ADDR
7165: GO 7348
7167: LD_INT 49
7169: DOUBLE
7170: EQUAL
7171: IFTRUE 7175
7173: GO 7201
7175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7176: LD_ADDR_VAR 0 3
7180: PUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 23
7189: PUSH
7190: LD_INT 24
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: ST_TO_ADDR
7199: GO 7348
7201: LD_INT 51
7203: DOUBLE
7204: EQUAL
7205: IFTRUE 7209
7207: GO 7235
7209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7210: LD_ADDR_VAR 0 3
7214: PUSH
7215: LD_INT 21
7217: PUSH
7218: LD_INT 22
7220: PUSH
7221: LD_INT 23
7223: PUSH
7224: LD_INT 24
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: ST_TO_ADDR
7233: GO 7348
7235: LD_INT 52
7237: DOUBLE
7238: EQUAL
7239: IFTRUE 7243
7241: GO 7269
7243: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: LD_INT 21
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 23
7257: PUSH
7258: LD_INT 24
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: ST_TO_ADDR
7267: GO 7348
7269: LD_INT 53
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7295
7277: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_INT 23
7285: PUSH
7286: LD_INT 24
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: ST_TO_ADDR
7293: GO 7348
7295: LD_INT 46
7297: DOUBLE
7298: EQUAL
7299: IFTRUE 7303
7301: GO 7321
7303: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7304: LD_ADDR_VAR 0 3
7308: PUSH
7309: LD_INT 23
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: ST_TO_ADDR
7319: GO 7348
7321: LD_INT 47
7323: DOUBLE
7324: EQUAL
7325: IFTRUE 7329
7327: GO 7347
7329: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_INT 23
7337: PUSH
7338: LD_INT 24
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: ST_TO_ADDR
7345: GO 7348
7347: POP
// result := ( chassis in result ) ;
7348: LD_ADDR_VAR 0 3
7352: PUSH
7353: LD_VAR 0 1
7357: PUSH
7358: LD_VAR 0 3
7362: IN
7363: ST_TO_ADDR
// end ;
7364: LD_VAR 0 3
7368: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7369: LD_INT 0
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
// result := array ;
7378: LD_ADDR_VAR 0 5
7382: PUSH
7383: LD_VAR 0 1
7387: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7388: LD_VAR 0 1
7392: NOT
7393: PUSH
7394: LD_VAR 0 2
7398: NOT
7399: OR
7400: PUSH
7401: LD_VAR 0 3
7405: NOT
7406: OR
7407: PUSH
7408: LD_VAR 0 2
7412: PUSH
7413: LD_VAR 0 1
7417: GREATER
7418: OR
7419: PUSH
7420: LD_VAR 0 3
7424: PUSH
7425: LD_VAR 0 1
7429: GREATER
7430: OR
7431: IFFALSE 7435
// exit ;
7433: GO 7731
// if direction then
7435: LD_VAR 0 4
7439: IFFALSE 7503
// begin d := 1 ;
7441: LD_ADDR_VAR 0 9
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// if i_from > i_to then
7449: LD_VAR 0 2
7453: PUSH
7454: LD_VAR 0 3
7458: GREATER
7459: IFFALSE 7485
// length := ( array - i_from ) + i_to else
7461: LD_ADDR_VAR 0 11
7465: PUSH
7466: LD_VAR 0 1
7470: PUSH
7471: LD_VAR 0 2
7475: MINUS
7476: PUSH
7477: LD_VAR 0 3
7481: PLUS
7482: ST_TO_ADDR
7483: GO 7501
// length := i_to - i_from ;
7485: LD_ADDR_VAR 0 11
7489: PUSH
7490: LD_VAR 0 3
7494: PUSH
7495: LD_VAR 0 2
7499: MINUS
7500: ST_TO_ADDR
// end else
7501: GO 7564
// begin d := - 1 ;
7503: LD_ADDR_VAR 0 9
7507: PUSH
7508: LD_INT 1
7510: NEG
7511: ST_TO_ADDR
// if i_from > i_to then
7512: LD_VAR 0 2
7516: PUSH
7517: LD_VAR 0 3
7521: GREATER
7522: IFFALSE 7542
// length := i_from - i_to else
7524: LD_ADDR_VAR 0 11
7528: PUSH
7529: LD_VAR 0 2
7533: PUSH
7534: LD_VAR 0 3
7538: MINUS
7539: ST_TO_ADDR
7540: GO 7564
// length := ( array - i_to ) + i_from ;
7542: LD_ADDR_VAR 0 11
7546: PUSH
7547: LD_VAR 0 1
7551: PUSH
7552: LD_VAR 0 3
7556: MINUS
7557: PUSH
7558: LD_VAR 0 2
7562: PLUS
7563: ST_TO_ADDR
// end ; if not length then
7564: LD_VAR 0 11
7568: NOT
7569: IFFALSE 7573
// exit ;
7571: GO 7731
// tmp := array ;
7573: LD_ADDR_VAR 0 10
7577: PUSH
7578: LD_VAR 0 1
7582: ST_TO_ADDR
// for i = 1 to length do
7583: LD_ADDR_VAR 0 6
7587: PUSH
7588: DOUBLE
7589: LD_INT 1
7591: DEC
7592: ST_TO_ADDR
7593: LD_VAR 0 11
7597: PUSH
7598: FOR_TO
7599: IFFALSE 7719
// begin for j = 1 to array do
7601: LD_ADDR_VAR 0 7
7605: PUSH
7606: DOUBLE
7607: LD_INT 1
7609: DEC
7610: ST_TO_ADDR
7611: LD_VAR 0 1
7615: PUSH
7616: FOR_TO
7617: IFFALSE 7705
// begin k := j + d ;
7619: LD_ADDR_VAR 0 8
7623: PUSH
7624: LD_VAR 0 7
7628: PUSH
7629: LD_VAR 0 9
7633: PLUS
7634: ST_TO_ADDR
// if k > array then
7635: LD_VAR 0 8
7639: PUSH
7640: LD_VAR 0 1
7644: GREATER
7645: IFFALSE 7655
// k := 1 ;
7647: LD_ADDR_VAR 0 8
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if not k then
7655: LD_VAR 0 8
7659: NOT
7660: IFFALSE 7672
// k := array ;
7662: LD_ADDR_VAR 0 8
7666: PUSH
7667: LD_VAR 0 1
7671: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7672: LD_ADDR_VAR 0 10
7676: PUSH
7677: LD_VAR 0 10
7681: PPUSH
7682: LD_VAR 0 8
7686: PPUSH
7687: LD_VAR 0 1
7691: PUSH
7692: LD_VAR 0 7
7696: ARRAY
7697: PPUSH
7698: CALL_OW 1
7702: ST_TO_ADDR
// end ;
7703: GO 7616
7705: POP
7706: POP
// array := tmp ;
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 10
7716: ST_TO_ADDR
// end ;
7717: GO 7598
7719: POP
7720: POP
// result := array ;
7721: LD_ADDR_VAR 0 5
7725: PUSH
7726: LD_VAR 0 1
7730: ST_TO_ADDR
// end ;
7731: LD_VAR 0 5
7735: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7736: LD_INT 0
7738: PPUSH
7739: PPUSH
// result := 0 ;
7740: LD_ADDR_VAR 0 3
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// if not array or not value in array then
7748: LD_VAR 0 1
7752: NOT
7753: PUSH
7754: LD_VAR 0 2
7758: PUSH
7759: LD_VAR 0 1
7763: IN
7764: NOT
7765: OR
7766: IFFALSE 7770
// exit ;
7768: GO 7824
// for i = 1 to array do
7770: LD_ADDR_VAR 0 4
7774: PUSH
7775: DOUBLE
7776: LD_INT 1
7778: DEC
7779: ST_TO_ADDR
7780: LD_VAR 0 1
7784: PUSH
7785: FOR_TO
7786: IFFALSE 7822
// if value = array [ i ] then
7788: LD_VAR 0 2
7792: PUSH
7793: LD_VAR 0 1
7797: PUSH
7798: LD_VAR 0 4
7802: ARRAY
7803: EQUAL
7804: IFFALSE 7820
// begin result := i ;
7806: LD_ADDR_VAR 0 3
7810: PUSH
7811: LD_VAR 0 4
7815: ST_TO_ADDR
// exit ;
7816: POP
7817: POP
7818: GO 7824
// end ;
7820: GO 7785
7822: POP
7823: POP
// end ;
7824: LD_VAR 0 3
7828: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7829: LD_INT 0
7831: PPUSH
// vc_chassis := chassis ;
7832: LD_ADDR_OWVAR 37
7836: PUSH
7837: LD_VAR 0 1
7841: ST_TO_ADDR
// vc_engine := engine ;
7842: LD_ADDR_OWVAR 39
7846: PUSH
7847: LD_VAR 0 2
7851: ST_TO_ADDR
// vc_control := control ;
7852: LD_ADDR_OWVAR 38
7856: PUSH
7857: LD_VAR 0 3
7861: ST_TO_ADDR
// vc_weapon := weapon ;
7862: LD_ADDR_OWVAR 40
7866: PUSH
7867: LD_VAR 0 4
7871: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7872: LD_ADDR_OWVAR 41
7876: PUSH
7877: LD_VAR 0 5
7881: ST_TO_ADDR
// end ;
7882: LD_VAR 0 6
7886: RET
// export function WantPlant ( unit ) ; var task ; begin
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// result := false ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_INT 0
7898: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 437
7913: ST_TO_ADDR
// if task then
7914: LD_VAR 0 3
7918: IFFALSE 7946
// if task [ 1 ] [ 1 ] = p then
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: PUSH
7929: LD_INT 1
7931: ARRAY
7932: PUSH
7933: LD_STRING p
7935: EQUAL
7936: IFFALSE 7946
// result := true ;
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// end ;
7946: LD_VAR 0 2
7950: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7951: LD_INT 0
7953: PPUSH
7954: PPUSH
7955: PPUSH
7956: PPUSH
// if pos < 1 then
7957: LD_VAR 0 2
7961: PUSH
7962: LD_INT 1
7964: LESS
7965: IFFALSE 7969
// exit ;
7967: GO 8272
// if pos = 1 then
7969: LD_VAR 0 2
7973: PUSH
7974: LD_INT 1
7976: EQUAL
7977: IFFALSE 8010
// result := Replace ( arr , pos [ 1 ] , value ) else
7979: LD_ADDR_VAR 0 4
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: LD_VAR 0 2
7993: PUSH
7994: LD_INT 1
7996: ARRAY
7997: PPUSH
7998: LD_VAR 0 3
8002: PPUSH
8003: CALL_OW 1
8007: ST_TO_ADDR
8008: GO 8272
// begin tmp := arr ;
8010: LD_ADDR_VAR 0 6
8014: PUSH
8015: LD_VAR 0 1
8019: ST_TO_ADDR
// s_arr := [ tmp ] ;
8020: LD_ADDR_VAR 0 7
8024: PUSH
8025: LD_VAR 0 6
8029: PUSH
8030: EMPTY
8031: LIST
8032: ST_TO_ADDR
// for i = 1 to pos - 1 do
8033: LD_ADDR_VAR 0 5
8037: PUSH
8038: DOUBLE
8039: LD_INT 1
8041: DEC
8042: ST_TO_ADDR
8043: LD_VAR 0 2
8047: PUSH
8048: LD_INT 1
8050: MINUS
8051: PUSH
8052: FOR_TO
8053: IFFALSE 8098
// begin tmp := tmp [ pos [ i ] ] ;
8055: LD_ADDR_VAR 0 6
8059: PUSH
8060: LD_VAR 0 6
8064: PUSH
8065: LD_VAR 0 2
8069: PUSH
8070: LD_VAR 0 5
8074: ARRAY
8075: ARRAY
8076: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8077: LD_ADDR_VAR 0 7
8081: PUSH
8082: LD_VAR 0 7
8086: PUSH
8087: LD_VAR 0 6
8091: PUSH
8092: EMPTY
8093: LIST
8094: ADD
8095: ST_TO_ADDR
// end ;
8096: GO 8052
8098: POP
8099: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8100: LD_ADDR_VAR 0 6
8104: PUSH
8105: LD_VAR 0 6
8109: PPUSH
8110: LD_VAR 0 2
8114: PUSH
8115: LD_VAR 0 2
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 3
8125: PPUSH
8126: CALL_OW 1
8130: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8131: LD_ADDR_VAR 0 7
8135: PUSH
8136: LD_VAR 0 7
8140: PPUSH
8141: LD_VAR 0 7
8145: PPUSH
8146: LD_VAR 0 6
8150: PPUSH
8151: CALL_OW 1
8155: ST_TO_ADDR
// for i = s_arr downto 2 do
8156: LD_ADDR_VAR 0 5
8160: PUSH
8161: DOUBLE
8162: LD_VAR 0 7
8166: INC
8167: ST_TO_ADDR
8168: LD_INT 2
8170: PUSH
8171: FOR_DOWNTO
8172: IFFALSE 8256
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8174: LD_ADDR_VAR 0 6
8178: PUSH
8179: LD_VAR 0 7
8183: PUSH
8184: LD_VAR 0 5
8188: PUSH
8189: LD_INT 1
8191: MINUS
8192: ARRAY
8193: PPUSH
8194: LD_VAR 0 2
8198: PUSH
8199: LD_VAR 0 5
8203: PUSH
8204: LD_INT 1
8206: MINUS
8207: ARRAY
8208: PPUSH
8209: LD_VAR 0 7
8213: PUSH
8214: LD_VAR 0 5
8218: ARRAY
8219: PPUSH
8220: CALL_OW 1
8224: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8225: LD_ADDR_VAR 0 7
8229: PUSH
8230: LD_VAR 0 7
8234: PPUSH
8235: LD_VAR 0 5
8239: PUSH
8240: LD_INT 1
8242: MINUS
8243: PPUSH
8244: LD_VAR 0 6
8248: PPUSH
8249: CALL_OW 1
8253: ST_TO_ADDR
// end ;
8254: GO 8171
8256: POP
8257: POP
// result := s_arr [ 1 ] ;
8258: LD_ADDR_VAR 0 4
8262: PUSH
8263: LD_VAR 0 7
8267: PUSH
8268: LD_INT 1
8270: ARRAY
8271: ST_TO_ADDR
// end ; end ;
8272: LD_VAR 0 4
8276: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8277: LD_INT 0
8279: PPUSH
8280: PPUSH
// if not list then
8281: LD_VAR 0 1
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8381
// i := list [ pos1 ] ;
8290: LD_ADDR_VAR 0 5
8294: PUSH
8295: LD_VAR 0 1
8299: PUSH
8300: LD_VAR 0 2
8304: ARRAY
8305: ST_TO_ADDR
// if not i then
8306: LD_VAR 0 5
8310: NOT
8311: IFFALSE 8315
// exit ;
8313: GO 8381
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8315: LD_ADDR_VAR 0 1
8319: PUSH
8320: LD_VAR 0 1
8324: PPUSH
8325: LD_VAR 0 2
8329: PPUSH
8330: LD_VAR 0 1
8334: PUSH
8335: LD_VAR 0 3
8339: ARRAY
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8346: LD_ADDR_VAR 0 1
8350: PUSH
8351: LD_VAR 0 1
8355: PPUSH
8356: LD_VAR 0 3
8360: PPUSH
8361: LD_VAR 0 5
8365: PPUSH
8366: CALL_OW 1
8370: ST_TO_ADDR
// result := list ;
8371: LD_ADDR_VAR 0 4
8375: PUSH
8376: LD_VAR 0 1
8380: ST_TO_ADDR
// end ;
8381: LD_VAR 0 4
8385: RET
// export function Add ( list , pos , val ) ; begin
8386: LD_INT 0
8388: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
8389: LD_ADDR_VAR 0 4
8393: PUSH
8394: LD_VAR 0 1
8398: PPUSH
8399: LD_VAR 0 2
8403: PPUSH
8404: LD_VAR 0 3
8408: PPUSH
8409: CALL 7951 0 3
8413: ST_TO_ADDR
8414: LD_VAR 0 4
8418: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8419: LD_INT 0
8421: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8422: LD_ADDR_VAR 0 5
8426: PUSH
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL_OW 250
8436: PPUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: CALL_OW 251
8446: PPUSH
8447: LD_VAR 0 2
8451: PPUSH
8452: LD_VAR 0 3
8456: PPUSH
8457: LD_VAR 0 4
8461: PPUSH
8462: CALL 8472 0 5
8466: ST_TO_ADDR
// end ;
8467: LD_VAR 0 5
8471: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8472: LD_INT 0
8474: PPUSH
8475: PPUSH
8476: PPUSH
8477: PPUSH
// if not list then
8478: LD_VAR 0 3
8482: NOT
8483: IFFALSE 8487
// exit ;
8485: GO 8875
// result := [ ] ;
8487: LD_ADDR_VAR 0 6
8491: PUSH
8492: EMPTY
8493: ST_TO_ADDR
// for i in list do
8494: LD_ADDR_VAR 0 7
8498: PUSH
8499: LD_VAR 0 3
8503: PUSH
8504: FOR_IN
8505: IFFALSE 8707
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8507: LD_ADDR_VAR 0 9
8511: PUSH
8512: LD_VAR 0 7
8516: PPUSH
8517: LD_VAR 0 1
8521: PPUSH
8522: LD_VAR 0 2
8526: PPUSH
8527: CALL_OW 297
8531: ST_TO_ADDR
// if not result then
8532: LD_VAR 0 6
8536: NOT
8537: IFFALSE 8563
// result := [ [ i , tmp ] ] else
8539: LD_ADDR_VAR 0 6
8543: PUSH
8544: LD_VAR 0 7
8548: PUSH
8549: LD_VAR 0 9
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: ST_TO_ADDR
8561: GO 8705
// begin if result [ result ] [ 2 ] < tmp then
8563: LD_VAR 0 6
8567: PUSH
8568: LD_VAR 0 6
8572: ARRAY
8573: PUSH
8574: LD_INT 2
8576: ARRAY
8577: PUSH
8578: LD_VAR 0 9
8582: LESS
8583: IFFALSE 8625
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8585: LD_ADDR_VAR 0 6
8589: PUSH
8590: LD_VAR 0 6
8594: PPUSH
8595: LD_VAR 0 6
8599: PUSH
8600: LD_INT 1
8602: PLUS
8603: PPUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_VAR 0 9
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 2
8622: ST_TO_ADDR
8623: GO 8705
// for j = 1 to result do
8625: LD_ADDR_VAR 0 8
8629: PUSH
8630: DOUBLE
8631: LD_INT 1
8633: DEC
8634: ST_TO_ADDR
8635: LD_VAR 0 6
8639: PUSH
8640: FOR_TO
8641: IFFALSE 8703
// begin if tmp < result [ j ] [ 2 ] then
8643: LD_VAR 0 9
8647: PUSH
8648: LD_VAR 0 6
8652: PUSH
8653: LD_VAR 0 8
8657: ARRAY
8658: PUSH
8659: LD_INT 2
8661: ARRAY
8662: LESS
8663: IFFALSE 8701
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8665: LD_ADDR_VAR 0 6
8669: PUSH
8670: LD_VAR 0 6
8674: PPUSH
8675: LD_VAR 0 8
8679: PPUSH
8680: LD_VAR 0 7
8684: PUSH
8685: LD_VAR 0 9
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PPUSH
8694: CALL_OW 2
8698: ST_TO_ADDR
// break ;
8699: GO 8703
// end ; end ;
8701: GO 8640
8703: POP
8704: POP
// end ; end ;
8705: GO 8504
8707: POP
8708: POP
// if result and not asc then
8709: LD_VAR 0 6
8713: PUSH
8714: LD_VAR 0 4
8718: NOT
8719: AND
8720: IFFALSE 8795
// begin tmp := result ;
8722: LD_ADDR_VAR 0 9
8726: PUSH
8727: LD_VAR 0 6
8731: ST_TO_ADDR
// for i = tmp downto 1 do
8732: LD_ADDR_VAR 0 7
8736: PUSH
8737: DOUBLE
8738: LD_VAR 0 9
8742: INC
8743: ST_TO_ADDR
8744: LD_INT 1
8746: PUSH
8747: FOR_DOWNTO
8748: IFFALSE 8793
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8750: LD_ADDR_VAR 0 6
8754: PUSH
8755: LD_VAR 0 6
8759: PPUSH
8760: LD_VAR 0 9
8764: PUSH
8765: LD_VAR 0 7
8769: MINUS
8770: PUSH
8771: LD_INT 1
8773: PLUS
8774: PPUSH
8775: LD_VAR 0 9
8779: PUSH
8780: LD_VAR 0 7
8784: ARRAY
8785: PPUSH
8786: CALL_OW 1
8790: ST_TO_ADDR
8791: GO 8747
8793: POP
8794: POP
// end ; tmp := [ ] ;
8795: LD_ADDR_VAR 0 9
8799: PUSH
8800: EMPTY
8801: ST_TO_ADDR
// if mode then
8802: LD_VAR 0 5
8806: IFFALSE 8875
// begin for i = 1 to result do
8808: LD_ADDR_VAR 0 7
8812: PUSH
8813: DOUBLE
8814: LD_INT 1
8816: DEC
8817: ST_TO_ADDR
8818: LD_VAR 0 6
8822: PUSH
8823: FOR_TO
8824: IFFALSE 8863
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8826: LD_ADDR_VAR 0 9
8830: PUSH
8831: LD_VAR 0 9
8835: PPUSH
8836: LD_VAR 0 7
8840: PPUSH
8841: LD_VAR 0 6
8845: PUSH
8846: LD_VAR 0 7
8850: ARRAY
8851: PUSH
8852: LD_INT 1
8854: ARRAY
8855: PPUSH
8856: CALL_OW 1
8860: ST_TO_ADDR
8861: GO 8823
8863: POP
8864: POP
// result := tmp ;
8865: LD_ADDR_VAR 0 6
8869: PUSH
8870: LD_VAR 0 9
8874: ST_TO_ADDR
// end ; end ;
8875: LD_VAR 0 6
8879: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8880: LD_INT 0
8882: PPUSH
8883: PPUSH
8884: PPUSH
8885: PPUSH
8886: PPUSH
8887: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8888: LD_ADDR_VAR 0 5
8892: PUSH
8893: LD_INT 0
8895: PUSH
8896: LD_INT 0
8898: PUSH
8899: LD_INT 0
8901: PUSH
8902: EMPTY
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: ST_TO_ADDR
// if not x or not y then
8910: LD_VAR 0 2
8914: NOT
8915: PUSH
8916: LD_VAR 0 3
8920: NOT
8921: OR
8922: IFFALSE 8926
// exit ;
8924: GO 10572
// if not range then
8926: LD_VAR 0 4
8930: NOT
8931: IFFALSE 8941
// range := 10 ;
8933: LD_ADDR_VAR 0 4
8937: PUSH
8938: LD_INT 10
8940: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8941: LD_ADDR_VAR 0 8
8945: PUSH
8946: LD_INT 81
8948: PUSH
8949: LD_VAR 0 1
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 92
8960: PUSH
8961: LD_VAR 0 2
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_VAR 0 4
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 3
8984: PUSH
8985: LD_INT 21
8987: PUSH
8988: LD_INT 3
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: PPUSH
9004: CALL_OW 69
9008: ST_TO_ADDR
// if not tmp then
9009: LD_VAR 0 8
9013: NOT
9014: IFFALSE 9018
// exit ;
9016: GO 10572
// for i in tmp do
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: LD_VAR 0 8
9027: PUSH
9028: FOR_IN
9029: IFFALSE 10547
// begin points := [ 0 , 0 , 0 ] ;
9031: LD_ADDR_VAR 0 9
9035: PUSH
9036: LD_INT 0
9038: PUSH
9039: LD_INT 0
9041: PUSH
9042: LD_INT 0
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: ST_TO_ADDR
// bpoints := 1 ;
9050: LD_ADDR_VAR 0 10
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9058: LD_VAR 0 6
9062: PPUSH
9063: CALL_OW 247
9067: PUSH
9068: LD_INT 1
9070: DOUBLE
9071: EQUAL
9072: IFTRUE 9076
9074: GO 9654
9076: POP
// begin if GetClass ( i ) = 1 then
9077: LD_VAR 0 6
9081: PPUSH
9082: CALL_OW 257
9086: PUSH
9087: LD_INT 1
9089: EQUAL
9090: IFFALSE 9111
// points := [ 10 , 5 , 3 ] ;
9092: LD_ADDR_VAR 0 9
9096: PUSH
9097: LD_INT 10
9099: PUSH
9100: LD_INT 5
9102: PUSH
9103: LD_INT 3
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9111: LD_VAR 0 6
9115: PPUSH
9116: CALL_OW 257
9120: PUSH
9121: LD_INT 2
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: IN
9135: IFFALSE 9156
// points := [ 3 , 2 , 1 ] ;
9137: LD_ADDR_VAR 0 9
9141: PUSH
9142: LD_INT 3
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: LIST
9155: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9156: LD_VAR 0 6
9160: PPUSH
9161: CALL_OW 257
9165: PUSH
9166: LD_INT 5
9168: EQUAL
9169: IFFALSE 9190
// points := [ 130 , 5 , 2 ] ;
9171: LD_ADDR_VAR 0 9
9175: PUSH
9176: LD_INT 130
9178: PUSH
9179: LD_INT 5
9181: PUSH
9182: LD_INT 2
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9190: LD_VAR 0 6
9194: PPUSH
9195: CALL_OW 257
9199: PUSH
9200: LD_INT 8
9202: EQUAL
9203: IFFALSE 9224
// points := [ 35 , 35 , 30 ] ;
9205: LD_ADDR_VAR 0 9
9209: PUSH
9210: LD_INT 35
9212: PUSH
9213: LD_INT 35
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: LIST
9223: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9224: LD_VAR 0 6
9228: PPUSH
9229: CALL_OW 257
9233: PUSH
9234: LD_INT 9
9236: EQUAL
9237: IFFALSE 9258
// points := [ 20 , 55 , 40 ] ;
9239: LD_ADDR_VAR 0 9
9243: PUSH
9244: LD_INT 20
9246: PUSH
9247: LD_INT 55
9249: PUSH
9250: LD_INT 40
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9258: LD_VAR 0 6
9262: PPUSH
9263: CALL_OW 257
9267: PUSH
9268: LD_INT 12
9270: PUSH
9271: LD_INT 16
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: IN
9278: IFFALSE 9299
// points := [ 5 , 3 , 2 ] ;
9280: LD_ADDR_VAR 0 9
9284: PUSH
9285: LD_INT 5
9287: PUSH
9288: LD_INT 3
9290: PUSH
9291: LD_INT 2
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9299: LD_VAR 0 6
9303: PPUSH
9304: CALL_OW 257
9308: PUSH
9309: LD_INT 17
9311: EQUAL
9312: IFFALSE 9333
// points := [ 100 , 50 , 75 ] ;
9314: LD_ADDR_VAR 0 9
9318: PUSH
9319: LD_INT 100
9321: PUSH
9322: LD_INT 50
9324: PUSH
9325: LD_INT 75
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9333: LD_VAR 0 6
9337: PPUSH
9338: CALL_OW 257
9342: PUSH
9343: LD_INT 15
9345: EQUAL
9346: IFFALSE 9367
// points := [ 10 , 5 , 3 ] ;
9348: LD_ADDR_VAR 0 9
9352: PUSH
9353: LD_INT 10
9355: PUSH
9356: LD_INT 5
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9367: LD_VAR 0 6
9371: PPUSH
9372: CALL_OW 257
9376: PUSH
9377: LD_INT 14
9379: EQUAL
9380: IFFALSE 9401
// points := [ 10 , 0 , 0 ] ;
9382: LD_ADDR_VAR 0 9
9386: PUSH
9387: LD_INT 10
9389: PUSH
9390: LD_INT 0
9392: PUSH
9393: LD_INT 0
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9401: LD_VAR 0 6
9405: PPUSH
9406: CALL_OW 257
9410: PUSH
9411: LD_INT 11
9413: EQUAL
9414: IFFALSE 9435
// points := [ 30 , 10 , 5 ] ;
9416: LD_ADDR_VAR 0 9
9420: PUSH
9421: LD_INT 30
9423: PUSH
9424: LD_INT 10
9426: PUSH
9427: LD_INT 5
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9435: LD_VAR 0 1
9439: PPUSH
9440: LD_INT 5
9442: PPUSH
9443: CALL_OW 321
9447: PUSH
9448: LD_INT 2
9450: EQUAL
9451: IFFALSE 9468
// bpoints := bpoints * 1.8 ;
9453: LD_ADDR_VAR 0 10
9457: PUSH
9458: LD_VAR 0 10
9462: PUSH
9463: LD_REAL  1.80000000000000E+0000
9466: MUL
9467: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9468: LD_VAR 0 6
9472: PPUSH
9473: CALL_OW 257
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: IN
9496: PUSH
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_INT 51
9504: PPUSH
9505: CALL_OW 321
9509: PUSH
9510: LD_INT 2
9512: EQUAL
9513: AND
9514: IFFALSE 9531
// bpoints := bpoints * 1.2 ;
9516: LD_ADDR_VAR 0 10
9520: PUSH
9521: LD_VAR 0 10
9525: PUSH
9526: LD_REAL  1.20000000000000E+0000
9529: MUL
9530: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9531: LD_VAR 0 6
9535: PPUSH
9536: CALL_OW 257
9540: PUSH
9541: LD_INT 5
9543: PUSH
9544: LD_INT 7
9546: PUSH
9547: LD_INT 9
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: IN
9555: PUSH
9556: LD_VAR 0 1
9560: PPUSH
9561: LD_INT 52
9563: PPUSH
9564: CALL_OW 321
9568: PUSH
9569: LD_INT 2
9571: EQUAL
9572: AND
9573: IFFALSE 9590
// bpoints := bpoints * 1.5 ;
9575: LD_ADDR_VAR 0 10
9579: PUSH
9580: LD_VAR 0 10
9584: PUSH
9585: LD_REAL  1.50000000000000E+0000
9588: MUL
9589: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9590: LD_VAR 0 1
9594: PPUSH
9595: LD_INT 66
9597: PPUSH
9598: CALL_OW 321
9602: PUSH
9603: LD_INT 2
9605: EQUAL
9606: IFFALSE 9623
// bpoints := bpoints * 1.1 ;
9608: LD_ADDR_VAR 0 10
9612: PUSH
9613: LD_VAR 0 10
9617: PUSH
9618: LD_REAL  1.10000000000000E+0000
9621: MUL
9622: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9623: LD_ADDR_VAR 0 10
9627: PUSH
9628: LD_VAR 0 10
9632: PUSH
9633: LD_VAR 0 6
9637: PPUSH
9638: LD_INT 1
9640: PPUSH
9641: CALL_OW 259
9645: PUSH
9646: LD_REAL  1.15000000000000E+0000
9649: MUL
9650: MUL
9651: ST_TO_ADDR
// end ; unit_vehicle :
9652: GO 10476
9654: LD_INT 2
9656: DOUBLE
9657: EQUAL
9658: IFTRUE 9662
9660: GO 10464
9662: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9663: LD_VAR 0 6
9667: PPUSH
9668: CALL_OW 264
9672: PUSH
9673: LD_INT 2
9675: PUSH
9676: LD_INT 42
9678: PUSH
9679: LD_INT 24
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: IN
9687: IFFALSE 9708
// points := [ 25 , 5 , 3 ] ;
9689: LD_ADDR_VAR 0 9
9693: PUSH
9694: LD_INT 25
9696: PUSH
9697: LD_INT 5
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 264
9717: PUSH
9718: LD_INT 4
9720: PUSH
9721: LD_INT 43
9723: PUSH
9724: LD_INT 25
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: LIST
9731: IN
9732: IFFALSE 9753
// points := [ 40 , 15 , 5 ] ;
9734: LD_ADDR_VAR 0 9
9738: PUSH
9739: LD_INT 40
9741: PUSH
9742: LD_INT 15
9744: PUSH
9745: LD_INT 5
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9753: LD_VAR 0 6
9757: PPUSH
9758: CALL_OW 264
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: LD_INT 23
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: IN
9773: IFFALSE 9794
// points := [ 7 , 25 , 8 ] ;
9775: LD_ADDR_VAR 0 9
9779: PUSH
9780: LD_INT 7
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 8
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9794: LD_VAR 0 6
9798: PPUSH
9799: CALL_OW 264
9803: PUSH
9804: LD_INT 5
9806: PUSH
9807: LD_INT 27
9809: PUSH
9810: LD_INT 44
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: IN
9818: IFFALSE 9839
// points := [ 14 , 50 , 16 ] ;
9820: LD_ADDR_VAR 0 9
9824: PUSH
9825: LD_INT 14
9827: PUSH
9828: LD_INT 50
9830: PUSH
9831: LD_INT 16
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: LIST
9838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9839: LD_VAR 0 6
9843: PPUSH
9844: CALL_OW 264
9848: PUSH
9849: LD_INT 6
9851: PUSH
9852: LD_INT 46
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: IN
9859: IFFALSE 9880
// points := [ 32 , 120 , 70 ] ;
9861: LD_ADDR_VAR 0 9
9865: PUSH
9866: LD_INT 32
9868: PUSH
9869: LD_INT 120
9871: PUSH
9872: LD_INT 70
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9880: LD_VAR 0 6
9884: PPUSH
9885: CALL_OW 264
9889: PUSH
9890: LD_INT 7
9892: PUSH
9893: LD_INT 28
9895: PUSH
9896: LD_INT 45
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: IN
9904: IFFALSE 9925
// points := [ 35 , 20 , 45 ] ;
9906: LD_ADDR_VAR 0 9
9910: PUSH
9911: LD_INT 35
9913: PUSH
9914: LD_INT 20
9916: PUSH
9917: LD_INT 45
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9925: LD_VAR 0 6
9929: PPUSH
9930: CALL_OW 264
9934: PUSH
9935: LD_INT 47
9937: PUSH
9938: EMPTY
9939: LIST
9940: IN
9941: IFFALSE 9962
// points := [ 67 , 45 , 75 ] ;
9943: LD_ADDR_VAR 0 9
9947: PUSH
9948: LD_INT 67
9950: PUSH
9951: LD_INT 45
9953: PUSH
9954: LD_INT 75
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9962: LD_VAR 0 6
9966: PPUSH
9967: CALL_OW 264
9971: PUSH
9972: LD_INT 26
9974: PUSH
9975: EMPTY
9976: LIST
9977: IN
9978: IFFALSE 9999
// points := [ 120 , 30 , 80 ] ;
9980: LD_ADDR_VAR 0 9
9984: PUSH
9985: LD_INT 120
9987: PUSH
9988: LD_INT 30
9990: PUSH
9991: LD_INT 80
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9999: LD_VAR 0 6
10003: PPUSH
10004: CALL_OW 264
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: EMPTY
10013: LIST
10014: IN
10015: IFFALSE 10036
// points := [ 40 , 1 , 1 ] ;
10017: LD_ADDR_VAR 0 9
10021: PUSH
10022: LD_INT 40
10024: PUSH
10025: LD_INT 1
10027: PUSH
10028: LD_INT 1
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10036: LD_VAR 0 6
10040: PPUSH
10041: CALL_OW 264
10045: PUSH
10046: LD_INT 29
10048: PUSH
10049: EMPTY
10050: LIST
10051: IN
10052: IFFALSE 10073
// points := [ 70 , 200 , 400 ] ;
10054: LD_ADDR_VAR 0 9
10058: PUSH
10059: LD_INT 70
10061: PUSH
10062: LD_INT 200
10064: PUSH
10065: LD_INT 400
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10073: LD_VAR 0 6
10077: PPUSH
10078: CALL_OW 264
10082: PUSH
10083: LD_INT 14
10085: PUSH
10086: LD_INT 53
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: IN
10093: IFFALSE 10114
// points := [ 40 , 10 , 20 ] ;
10095: LD_ADDR_VAR 0 9
10099: PUSH
10100: LD_INT 40
10102: PUSH
10103: LD_INT 10
10105: PUSH
10106: LD_INT 20
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10114: LD_VAR 0 6
10118: PPUSH
10119: CALL_OW 264
10123: PUSH
10124: LD_INT 9
10126: PUSH
10127: EMPTY
10128: LIST
10129: IN
10130: IFFALSE 10151
// points := [ 5 , 70 , 20 ] ;
10132: LD_ADDR_VAR 0 9
10136: PUSH
10137: LD_INT 5
10139: PUSH
10140: LD_INT 70
10142: PUSH
10143: LD_INT 20
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10151: LD_VAR 0 6
10155: PPUSH
10156: CALL_OW 264
10160: PUSH
10161: LD_INT 10
10163: PUSH
10164: EMPTY
10165: LIST
10166: IN
10167: IFFALSE 10188
// points := [ 35 , 110 , 70 ] ;
10169: LD_ADDR_VAR 0 9
10173: PUSH
10174: LD_INT 35
10176: PUSH
10177: LD_INT 110
10179: PUSH
10180: LD_INT 70
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10188: LD_VAR 0 6
10192: PPUSH
10193: CALL_OW 265
10197: PUSH
10198: LD_INT 25
10200: EQUAL
10201: IFFALSE 10222
// points := [ 80 , 65 , 100 ] ;
10203: LD_ADDR_VAR 0 9
10207: PUSH
10208: LD_INT 80
10210: PUSH
10211: LD_INT 65
10213: PUSH
10214: LD_INT 100
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10222: LD_VAR 0 6
10226: PPUSH
10227: CALL_OW 263
10231: PUSH
10232: LD_INT 1
10234: EQUAL
10235: IFFALSE 10270
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10237: LD_ADDR_VAR 0 10
10241: PUSH
10242: LD_VAR 0 10
10246: PUSH
10247: LD_VAR 0 6
10251: PPUSH
10252: CALL_OW 311
10256: PPUSH
10257: LD_INT 3
10259: PPUSH
10260: CALL_OW 259
10264: PUSH
10265: LD_INT 4
10267: MUL
10268: MUL
10269: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10270: LD_VAR 0 6
10274: PPUSH
10275: CALL_OW 263
10279: PUSH
10280: LD_INT 2
10282: EQUAL
10283: IFFALSE 10334
// begin j := IsControledBy ( i ) ;
10285: LD_ADDR_VAR 0 7
10289: PUSH
10290: LD_VAR 0 6
10294: PPUSH
10295: CALL_OW 312
10299: ST_TO_ADDR
// if j then
10300: LD_VAR 0 7
10304: IFFALSE 10334
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10306: LD_ADDR_VAR 0 10
10310: PUSH
10311: LD_VAR 0 10
10315: PUSH
10316: LD_VAR 0 7
10320: PPUSH
10321: LD_INT 3
10323: PPUSH
10324: CALL_OW 259
10328: PUSH
10329: LD_INT 3
10331: MUL
10332: MUL
10333: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10334: LD_VAR 0 6
10338: PPUSH
10339: CALL_OW 264
10343: PUSH
10344: LD_INT 5
10346: PUSH
10347: LD_INT 6
10349: PUSH
10350: LD_INT 46
10352: PUSH
10353: LD_INT 44
10355: PUSH
10356: LD_INT 47
10358: PUSH
10359: LD_INT 45
10361: PUSH
10362: LD_INT 28
10364: PUSH
10365: LD_INT 7
10367: PUSH
10368: LD_INT 27
10370: PUSH
10371: LD_INT 29
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: IN
10386: PUSH
10387: LD_VAR 0 1
10391: PPUSH
10392: LD_INT 52
10394: PPUSH
10395: CALL_OW 321
10399: PUSH
10400: LD_INT 2
10402: EQUAL
10403: AND
10404: IFFALSE 10421
// bpoints := bpoints * 1.2 ;
10406: LD_ADDR_VAR 0 10
10410: PUSH
10411: LD_VAR 0 10
10415: PUSH
10416: LD_REAL  1.20000000000000E+0000
10419: MUL
10420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10421: LD_VAR 0 6
10425: PPUSH
10426: CALL_OW 264
10430: PUSH
10431: LD_INT 6
10433: PUSH
10434: LD_INT 46
10436: PUSH
10437: LD_INT 47
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: IN
10445: IFFALSE 10462
// bpoints := bpoints * 1.2 ;
10447: LD_ADDR_VAR 0 10
10451: PUSH
10452: LD_VAR 0 10
10456: PUSH
10457: LD_REAL  1.20000000000000E+0000
10460: MUL
10461: ST_TO_ADDR
// end ; unit_building :
10462: GO 10476
10464: LD_INT 3
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10475
10472: POP
// ; end ;
10473: GO 10476
10475: POP
// for j = 1 to 3 do
10476: LD_ADDR_VAR 0 7
10480: PUSH
10481: DOUBLE
10482: LD_INT 1
10484: DEC
10485: ST_TO_ADDR
10486: LD_INT 3
10488: PUSH
10489: FOR_TO
10490: IFFALSE 10543
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_VAR 0 5
10501: PPUSH
10502: LD_VAR 0 7
10506: PPUSH
10507: LD_VAR 0 5
10511: PUSH
10512: LD_VAR 0 7
10516: ARRAY
10517: PUSH
10518: LD_VAR 0 9
10522: PUSH
10523: LD_VAR 0 7
10527: ARRAY
10528: PUSH
10529: LD_VAR 0 10
10533: MUL
10534: PLUS
10535: PPUSH
10536: CALL_OW 1
10540: ST_TO_ADDR
10541: GO 10489
10543: POP
10544: POP
// end ;
10545: GO 9028
10547: POP
10548: POP
// result := Replace ( result , 4 , tmp ) ;
10549: LD_ADDR_VAR 0 5
10553: PUSH
10554: LD_VAR 0 5
10558: PPUSH
10559: LD_INT 4
10561: PPUSH
10562: LD_VAR 0 8
10566: PPUSH
10567: CALL_OW 1
10571: ST_TO_ADDR
// end ;
10572: LD_VAR 0 5
10576: RET
// export function DangerAtRange ( unit , range ) ; begin
10577: LD_INT 0
10579: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_VAR 0 1
10589: PPUSH
10590: CALL_OW 255
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 250
10604: PPUSH
10605: LD_VAR 0 1
10609: PPUSH
10610: CALL_OW 251
10614: PPUSH
10615: LD_VAR 0 2
10619: PPUSH
10620: CALL 8880 0 4
10624: ST_TO_ADDR
// end ;
10625: LD_VAR 0 3
10629: RET
// export function IsExtension ( b ) ; begin
10630: LD_INT 0
10632: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: LD_VAR 0 1
10642: PPUSH
10643: CALL_OW 266
10647: PUSH
10648: LD_INT 23
10650: PUSH
10651: LD_INT 20
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_INT 17
10659: PUSH
10660: LD_INT 24
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 19
10668: PUSH
10669: LD_INT 16
10671: PUSH
10672: LD_INT 25
10674: PUSH
10675: LD_INT 18
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: IN
10690: ST_TO_ADDR
// end ;
10691: LD_VAR 0 2
10695: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
10696: LD_INT 0
10698: PPUSH
10699: PPUSH
10700: PPUSH
// result := [ ] ;
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
10708: LD_ADDR_VAR 0 3
10712: PUSH
10713: LD_INT 21
10715: PUSH
10716: LD_INT 3
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PPUSH
10723: CALL_OW 69
10727: ST_TO_ADDR
// if not tmp then
10728: LD_VAR 0 3
10732: NOT
10733: IFFALSE 10737
// exit ;
10735: GO 10787
// for i in tmp do
10737: LD_ADDR_VAR 0 4
10741: PUSH
10742: LD_VAR 0 3
10746: PUSH
10747: FOR_IN
10748: IFFALSE 10785
// if GetBase ( i ) = base then
10750: LD_VAR 0 4
10754: PPUSH
10755: CALL_OW 274
10759: PUSH
10760: LD_VAR 0 1
10764: EQUAL
10765: IFFALSE 10783
// result := result ^ i ;
10767: LD_ADDR_VAR 0 2
10771: PUSH
10772: LD_VAR 0 2
10776: PUSH
10777: LD_VAR 0 4
10781: ADD
10782: ST_TO_ADDR
10783: GO 10747
10785: POP
10786: POP
// end ;
10787: LD_VAR 0 2
10791: RET
// export function ComComplete ( unit , b ) ; var i ; begin
10792: LD_INT 0
10794: PPUSH
10795: PPUSH
// if BuildingStatus ( b ) = bs_build then
10796: LD_VAR 0 2
10800: PPUSH
10801: CALL_OW 461
10805: PUSH
10806: LD_INT 1
10808: EQUAL
10809: IFFALSE 10869
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10811: LD_VAR 0 1
10815: PPUSH
10816: LD_STRING h
10818: PUSH
10819: LD_VAR 0 2
10823: PPUSH
10824: CALL_OW 250
10828: PUSH
10829: LD_VAR 0 2
10833: PPUSH
10834: CALL_OW 251
10838: PUSH
10839: LD_VAR 0 2
10843: PUSH
10844: LD_INT 0
10846: PUSH
10847: LD_INT 0
10849: PUSH
10850: LD_INT 0
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: PUSH
10862: EMPTY
10863: LIST
10864: PPUSH
10865: CALL_OW 446
// end ;
10869: LD_VAR 0 3
10873: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10874: LD_INT 0
10876: PPUSH
10877: PPUSH
10878: PPUSH
10879: PPUSH
10880: PPUSH
10881: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10882: LD_VAR 0 1
10886: NOT
10887: PUSH
10888: LD_VAR 0 1
10892: PPUSH
10893: CALL_OW 263
10897: PUSH
10898: LD_INT 2
10900: EQUAL
10901: NOT
10902: OR
10903: IFFALSE 10907
// exit ;
10905: GO 11223
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10907: LD_ADDR_VAR 0 6
10911: PUSH
10912: LD_INT 22
10914: PUSH
10915: LD_VAR 0 1
10919: PPUSH
10920: CALL_OW 255
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PUSH
10929: LD_INT 2
10931: PUSH
10932: LD_INT 30
10934: PUSH
10935: LD_INT 36
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 34
10944: PUSH
10945: LD_INT 31
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: LIST
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PPUSH
10961: CALL_OW 69
10965: ST_TO_ADDR
// if not tmp then
10966: LD_VAR 0 6
10970: NOT
10971: IFFALSE 10975
// exit ;
10973: GO 11223
// result := [ ] ;
10975: LD_ADDR_VAR 0 2
10979: PUSH
10980: EMPTY
10981: ST_TO_ADDR
// for i in tmp do
10982: LD_ADDR_VAR 0 3
10986: PUSH
10987: LD_VAR 0 6
10991: PUSH
10992: FOR_IN
10993: IFFALSE 11064
// begin t := UnitsInside ( i ) ;
10995: LD_ADDR_VAR 0 4
10999: PUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: CALL_OW 313
11009: ST_TO_ADDR
// if t then
11010: LD_VAR 0 4
11014: IFFALSE 11062
// for j in t do
11016: LD_ADDR_VAR 0 7
11020: PUSH
11021: LD_VAR 0 4
11025: PUSH
11026: FOR_IN
11027: IFFALSE 11060
// result := Insert ( result , result + 1 , j ) ;
11029: LD_ADDR_VAR 0 2
11033: PUSH
11034: LD_VAR 0 2
11038: PPUSH
11039: LD_VAR 0 2
11043: PUSH
11044: LD_INT 1
11046: PLUS
11047: PPUSH
11048: LD_VAR 0 7
11052: PPUSH
11053: CALL_OW 2
11057: ST_TO_ADDR
11058: GO 11026
11060: POP
11061: POP
// end ;
11062: GO 10992
11064: POP
11065: POP
// if not result then
11066: LD_VAR 0 2
11070: NOT
11071: IFFALSE 11075
// exit ;
11073: GO 11223
// mech := result [ 1 ] ;
11075: LD_ADDR_VAR 0 5
11079: PUSH
11080: LD_VAR 0 2
11084: PUSH
11085: LD_INT 1
11087: ARRAY
11088: ST_TO_ADDR
// if result > 1 then
11089: LD_VAR 0 2
11093: PUSH
11094: LD_INT 1
11096: GREATER
11097: IFFALSE 11209
// for i = 2 to result do
11099: LD_ADDR_VAR 0 3
11103: PUSH
11104: DOUBLE
11105: LD_INT 2
11107: DEC
11108: ST_TO_ADDR
11109: LD_VAR 0 2
11113: PUSH
11114: FOR_TO
11115: IFFALSE 11207
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11117: LD_ADDR_VAR 0 4
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: LD_VAR 0 3
11131: ARRAY
11132: PPUSH
11133: LD_INT 3
11135: PPUSH
11136: CALL_OW 259
11140: PUSH
11141: LD_VAR 0 2
11145: PUSH
11146: LD_VAR 0 3
11150: ARRAY
11151: PPUSH
11152: CALL_OW 432
11156: MINUS
11157: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11158: LD_VAR 0 4
11162: PUSH
11163: LD_VAR 0 5
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: CALL_OW 259
11175: PUSH
11176: LD_VAR 0 5
11180: PPUSH
11181: CALL_OW 432
11185: MINUS
11186: GREATEREQUAL
11187: IFFALSE 11205
// mech := result [ i ] ;
11189: LD_ADDR_VAR 0 5
11193: PUSH
11194: LD_VAR 0 2
11198: PUSH
11199: LD_VAR 0 3
11203: ARRAY
11204: ST_TO_ADDR
// end ;
11205: GO 11114
11207: POP
11208: POP
// ComLinkTo ( vehicle , mech ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: LD_VAR 0 5
11218: PPUSH
11219: CALL_OW 135
// end ;
11223: LD_VAR 0 2
11227: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
11228: LD_INT 0
11230: PPUSH
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
// result := [ ] ;
11242: LD_ADDR_VAR 0 6
11246: PUSH
11247: EMPTY
11248: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11249: LD_VAR 0 1
11253: PPUSH
11254: CALL_OW 266
11258: PUSH
11259: LD_INT 0
11261: PUSH
11262: LD_INT 1
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: IN
11269: NOT
11270: IFFALSE 11274
// exit ;
11272: GO 12674
// if name then
11274: LD_VAR 0 2
11278: IFFALSE 11294
// SetBName ( base_dep , name ) ;
11280: LD_VAR 0 1
11284: PPUSH
11285: LD_VAR 0 2
11289: PPUSH
11290: CALL_OW 500
// base := GetBase ( base_dep ) ;
11294: LD_ADDR_VAR 0 14
11298: PUSH
11299: LD_VAR 0 1
11303: PPUSH
11304: CALL_OW 274
11308: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11309: LD_ADDR_VAR 0 15
11313: PUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 255
11323: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11324: LD_ADDR_VAR 0 16
11328: PUSH
11329: LD_VAR 0 1
11333: PPUSH
11334: CALL_OW 248
11338: ST_TO_ADDR
// if sources then
11339: LD_VAR 0 4
11343: IFFALSE 11390
// for i = 1 to 3 do
11345: LD_ADDR_VAR 0 7
11349: PUSH
11350: DOUBLE
11351: LD_INT 1
11353: DEC
11354: ST_TO_ADDR
11355: LD_INT 3
11357: PUSH
11358: FOR_TO
11359: IFFALSE 11388
// AddResourceType ( base , i , sources [ i ] ) ;
11361: LD_VAR 0 14
11365: PPUSH
11366: LD_VAR 0 7
11370: PPUSH
11371: LD_VAR 0 4
11375: PUSH
11376: LD_VAR 0 7
11380: ARRAY
11381: PPUSH
11382: CALL_OW 276
11386: GO 11358
11388: POP
11389: POP
// buildings := GetBaseBuildings ( base ) ;
11390: LD_ADDR_VAR 0 17
11394: PUSH
11395: LD_VAR 0 14
11399: PPUSH
11400: CALL 10696 0 1
11404: ST_TO_ADDR
// InitHc ;
11405: CALL_OW 19
// InitUc ;
11409: CALL_OW 18
// uc_side := side ;
11413: LD_ADDR_OWVAR 20
11417: PUSH
11418: LD_VAR 0 15
11422: ST_TO_ADDR
// uc_nation := nation ;
11423: LD_ADDR_OWVAR 21
11427: PUSH
11428: LD_VAR 0 16
11432: ST_TO_ADDR
// if buildings then
11433: LD_VAR 0 17
11437: IFFALSE 12533
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11439: LD_VAR 0 17
11443: PPUSH
11444: LD_INT 2
11446: PUSH
11447: LD_INT 30
11449: PUSH
11450: LD_INT 32
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 30
11459: PUSH
11460: LD_INT 33
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: PPUSH
11472: CALL_OW 72
11476: IFFALSE 11559
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11478: LD_ADDR_VAR 0 7
11482: PUSH
11483: LD_VAR 0 17
11487: PPUSH
11488: LD_INT 2
11490: PUSH
11491: LD_INT 30
11493: PUSH
11494: LD_INT 32
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 30
11503: PUSH
11504: LD_INT 33
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: PPUSH
11516: CALL_OW 72
11520: PUSH
11521: FOR_IN
11522: IFFALSE 11557
// begin if not GetBWeapon ( i ) then
11524: LD_VAR 0 7
11528: PPUSH
11529: CALL_OW 269
11533: NOT
11534: IFFALSE 11555
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
11536: LD_VAR 0 7
11540: PPUSH
11541: LD_VAR 0 7
11545: PPUSH
11546: CALL 12679 0 1
11550: PPUSH
11551: CALL_OW 431
// end ;
11555: GO 11521
11557: POP
11558: POP
// end ; for i = 1 to personel do
11559: LD_ADDR_VAR 0 7
11563: PUSH
11564: DOUBLE
11565: LD_INT 1
11567: DEC
11568: ST_TO_ADDR
11569: LD_VAR 0 5
11573: PUSH
11574: FOR_TO
11575: IFFALSE 12513
// begin if i > 4 then
11577: LD_VAR 0 7
11581: PUSH
11582: LD_INT 4
11584: GREATER
11585: IFFALSE 11589
// break ;
11587: GO 12513
// case i of 1 :
11589: LD_VAR 0 7
11593: PUSH
11594: LD_INT 1
11596: DOUBLE
11597: EQUAL
11598: IFTRUE 11602
11600: GO 11675
11602: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11603: LD_ADDR_VAR 0 11
11607: PUSH
11608: LD_VAR 0 17
11612: PPUSH
11613: LD_INT 22
11615: PUSH
11616: LD_VAR 0 15
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: LD_INT 30
11630: PUSH
11631: LD_INT 32
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 30
11640: PUSH
11641: LD_INT 4
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 30
11650: PUSH
11651: LD_INT 5
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
11673: GO 11897
11675: LD_INT 2
11677: DOUBLE
11678: EQUAL
11679: IFTRUE 11683
11681: GO 11745
11683: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11684: LD_ADDR_VAR 0 11
11688: PUSH
11689: LD_VAR 0 17
11693: PPUSH
11694: LD_INT 22
11696: PUSH
11697: LD_VAR 0 15
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 2
11708: PUSH
11709: LD_INT 30
11711: PUSH
11712: LD_INT 0
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 30
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PPUSH
11738: CALL_OW 72
11742: ST_TO_ADDR
11743: GO 11897
11745: LD_INT 3
11747: DOUBLE
11748: EQUAL
11749: IFTRUE 11753
11751: GO 11815
11753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11754: LD_ADDR_VAR 0 11
11758: PUSH
11759: LD_VAR 0 17
11763: PPUSH
11764: LD_INT 22
11766: PUSH
11767: LD_VAR 0 15
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: LD_INT 30
11781: PUSH
11782: LD_INT 2
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 30
11791: PUSH
11792: LD_INT 3
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PPUSH
11808: CALL_OW 72
11812: ST_TO_ADDR
11813: GO 11897
11815: LD_INT 4
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 11896
11823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11824: LD_ADDR_VAR 0 11
11828: PUSH
11829: LD_VAR 0 17
11833: PPUSH
11834: LD_INT 22
11836: PUSH
11837: LD_VAR 0 15
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 2
11848: PUSH
11849: LD_INT 30
11851: PUSH
11852: LD_INT 6
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 30
11861: PUSH
11862: LD_INT 7
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 30
11871: PUSH
11872: LD_INT 8
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PPUSH
11889: CALL_OW 72
11893: ST_TO_ADDR
11894: GO 11897
11896: POP
// x := personel [ i ] ;
11897: LD_ADDR_VAR 0 12
11901: PUSH
11902: LD_VAR 0 5
11906: PUSH
11907: LD_VAR 0 7
11911: ARRAY
11912: ST_TO_ADDR
// if x = - 1 then
11913: LD_VAR 0 12
11917: PUSH
11918: LD_INT 1
11920: NEG
11921: EQUAL
11922: IFFALSE 12131
// begin for j in f do
11924: LD_ADDR_VAR 0 8
11928: PUSH
11929: LD_VAR 0 11
11933: PUSH
11934: FOR_IN
11935: IFFALSE 12127
// repeat InitHc ;
11937: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11941: LD_VAR 0 8
11945: PPUSH
11946: CALL_OW 266
11950: PUSH
11951: LD_INT 5
11953: EQUAL
11954: IFFALSE 12024
// begin if UnitsInside ( j ) < 3 then
11956: LD_VAR 0 8
11960: PPUSH
11961: CALL_OW 313
11965: PUSH
11966: LD_INT 3
11968: LESS
11969: IFFALSE 12005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11971: LD_INT 0
11973: PPUSH
11974: LD_INT 5
11976: PUSH
11977: LD_INT 8
11979: PUSH
11980: LD_INT 9
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_VAR 0 16
11992: ARRAY
11993: PPUSH
11994: LD_VAR 0 3
11998: PPUSH
11999: CALL_OW 380
12003: GO 12022
// PrepareHuman ( false , i , skill ) ;
12005: LD_INT 0
12007: PPUSH
12008: LD_VAR 0 7
12012: PPUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: CALL_OW 380
// end else
12022: GO 12041
// PrepareHuman ( false , i , skill ) ;
12024: LD_INT 0
12026: PPUSH
12027: LD_VAR 0 7
12031: PPUSH
12032: LD_VAR 0 3
12036: PPUSH
12037: CALL_OW 380
// un := CreateHuman ;
12041: LD_ADDR_VAR 0 13
12045: PUSH
12046: CALL_OW 44
12050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12051: LD_ADDR_VAR 0 6
12055: PUSH
12056: LD_VAR 0 6
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: LD_VAR 0 13
12068: PPUSH
12069: CALL_OW 2
12073: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12074: LD_VAR 0 13
12078: PPUSH
12079: LD_VAR 0 8
12083: PPUSH
12084: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12088: LD_VAR 0 8
12092: PPUSH
12093: CALL_OW 313
12097: PUSH
12098: LD_INT 6
12100: EQUAL
12101: PUSH
12102: LD_VAR 0 8
12106: PPUSH
12107: CALL_OW 266
12111: PUSH
12112: LD_INT 32
12114: PUSH
12115: LD_INT 31
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: IN
12122: OR
12123: IFFALSE 11937
12125: GO 11934
12127: POP
12128: POP
// end else
12129: GO 12511
// for j = 1 to x do
12131: LD_ADDR_VAR 0 8
12135: PUSH
12136: DOUBLE
12137: LD_INT 1
12139: DEC
12140: ST_TO_ADDR
12141: LD_VAR 0 12
12145: PUSH
12146: FOR_TO
12147: IFFALSE 12509
// begin InitHc ;
12149: CALL_OW 19
// if not f then
12153: LD_VAR 0 11
12157: NOT
12158: IFFALSE 12247
// begin PrepareHuman ( false , i , skill ) ;
12160: LD_INT 0
12162: PPUSH
12163: LD_VAR 0 7
12167: PPUSH
12168: LD_VAR 0 3
12172: PPUSH
12173: CALL_OW 380
// un := CreateHuman ;
12177: LD_ADDR_VAR 0 13
12181: PUSH
12182: CALL_OW 44
12186: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12187: LD_ADDR_VAR 0 6
12191: PUSH
12192: LD_VAR 0 6
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: LD_VAR 0 13
12204: PPUSH
12205: CALL_OW 2
12209: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12210: LD_VAR 0 13
12214: PPUSH
12215: LD_VAR 0 1
12219: PPUSH
12220: CALL_OW 250
12224: PPUSH
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL_OW 251
12234: PPUSH
12235: LD_INT 10
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL_OW 50
// continue ;
12245: GO 12146
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12247: LD_VAR 0 11
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: PPUSH
12256: CALL_OW 313
12260: PUSH
12261: LD_VAR 0 11
12265: PUSH
12266: LD_INT 1
12268: ARRAY
12269: PPUSH
12270: CALL_OW 266
12274: PUSH
12275: LD_INT 32
12277: PUSH
12278: LD_INT 31
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: IN
12285: AND
12286: PUSH
12287: LD_VAR 0 11
12291: PUSH
12292: LD_INT 1
12294: ARRAY
12295: PPUSH
12296: CALL_OW 313
12300: PUSH
12301: LD_INT 6
12303: EQUAL
12304: OR
12305: IFFALSE 12325
// f := Delete ( f , 1 ) ;
12307: LD_ADDR_VAR 0 11
12311: PUSH
12312: LD_VAR 0 11
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 3
12324: ST_TO_ADDR
// if not f then
12325: LD_VAR 0 11
12329: NOT
12330: IFFALSE 12348
// begin x := x + 2 ;
12332: LD_ADDR_VAR 0 12
12336: PUSH
12337: LD_VAR 0 12
12341: PUSH
12342: LD_INT 2
12344: PLUS
12345: ST_TO_ADDR
// continue ;
12346: GO 12146
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12348: LD_VAR 0 11
12352: PUSH
12353: LD_INT 1
12355: ARRAY
12356: PPUSH
12357: CALL_OW 266
12361: PUSH
12362: LD_INT 5
12364: EQUAL
12365: IFFALSE 12439
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12367: LD_VAR 0 11
12371: PUSH
12372: LD_INT 1
12374: ARRAY
12375: PPUSH
12376: CALL_OW 313
12380: PUSH
12381: LD_INT 3
12383: LESS
12384: IFFALSE 12420
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12386: LD_INT 0
12388: PPUSH
12389: LD_INT 5
12391: PUSH
12392: LD_INT 8
12394: PUSH
12395: LD_INT 9
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: PUSH
12403: LD_VAR 0 16
12407: ARRAY
12408: PPUSH
12409: LD_VAR 0 3
12413: PPUSH
12414: CALL_OW 380
12418: GO 12437
// PrepareHuman ( false , i , skill ) ;
12420: LD_INT 0
12422: PPUSH
12423: LD_VAR 0 7
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: CALL_OW 380
// end else
12437: GO 12456
// PrepareHuman ( false , i , skill ) ;
12439: LD_INT 0
12441: PPUSH
12442: LD_VAR 0 7
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: CALL_OW 380
// un := CreateHuman ;
12456: LD_ADDR_VAR 0 13
12460: PUSH
12461: CALL_OW 44
12465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12466: LD_ADDR_VAR 0 6
12470: PUSH
12471: LD_VAR 0 6
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: LD_VAR 0 13
12483: PPUSH
12484: CALL_OW 2
12488: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12489: LD_VAR 0 13
12493: PPUSH
12494: LD_VAR 0 11
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: CALL_OW 52
// end ;
12507: GO 12146
12509: POP
12510: POP
// end ;
12511: GO 11574
12513: POP
12514: POP
// result := result ^ buildings ;
12515: LD_ADDR_VAR 0 6
12519: PUSH
12520: LD_VAR 0 6
12524: PUSH
12525: LD_VAR 0 17
12529: ADD
12530: ST_TO_ADDR
// end else
12531: GO 12674
// begin for i = 1 to personel do
12533: LD_ADDR_VAR 0 7
12537: PUSH
12538: DOUBLE
12539: LD_INT 1
12541: DEC
12542: ST_TO_ADDR
12543: LD_VAR 0 5
12547: PUSH
12548: FOR_TO
12549: IFFALSE 12672
// begin if i > 4 then
12551: LD_VAR 0 7
12555: PUSH
12556: LD_INT 4
12558: GREATER
12559: IFFALSE 12563
// break ;
12561: GO 12672
// x := personel [ i ] ;
12563: LD_ADDR_VAR 0 12
12567: PUSH
12568: LD_VAR 0 5
12572: PUSH
12573: LD_VAR 0 7
12577: ARRAY
12578: ST_TO_ADDR
// if x = - 1 then
12579: LD_VAR 0 12
12583: PUSH
12584: LD_INT 1
12586: NEG
12587: EQUAL
12588: IFFALSE 12592
// continue ;
12590: GO 12548
// PrepareHuman ( false , i , skill ) ;
12592: LD_INT 0
12594: PPUSH
12595: LD_VAR 0 7
12599: PPUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: CALL_OW 380
// un := CreateHuman ;
12609: LD_ADDR_VAR 0 13
12613: PUSH
12614: CALL_OW 44
12618: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12619: LD_VAR 0 13
12623: PPUSH
12624: LD_VAR 0 1
12628: PPUSH
12629: CALL_OW 250
12633: PPUSH
12634: LD_VAR 0 1
12638: PPUSH
12639: CALL_OW 251
12643: PPUSH
12644: LD_INT 10
12646: PPUSH
12647: LD_INT 0
12649: PPUSH
12650: CALL_OW 50
// result := result ^ un ;
12654: LD_ADDR_VAR 0 6
12658: PUSH
12659: LD_VAR 0 6
12663: PUSH
12664: LD_VAR 0 13
12668: ADD
12669: ST_TO_ADDR
// end ;
12670: GO 12548
12672: POP
12673: POP
// end ; end ;
12674: LD_VAR 0 6
12678: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12679: LD_INT 0
12681: PPUSH
12682: PPUSH
12683: PPUSH
12684: PPUSH
12685: PPUSH
12686: PPUSH
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
// result := false ;
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12705: LD_VAR 0 1
12709: NOT
12710: PUSH
12711: LD_VAR 0 1
12715: PPUSH
12716: CALL_OW 266
12720: PUSH
12721: LD_INT 32
12723: PUSH
12724: LD_INT 33
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: IN
12731: NOT
12732: OR
12733: IFFALSE 12737
// exit ;
12735: GO 13868
// nat := GetNation ( tower ) ;
12737: LD_ADDR_VAR 0 11
12741: PUSH
12742: LD_VAR 0 1
12746: PPUSH
12747: CALL_OW 248
12751: ST_TO_ADDR
// side := GetSide ( tower ) ;
12752: LD_ADDR_VAR 0 15
12756: PUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 255
12766: ST_TO_ADDR
// x := GetX ( tower ) ;
12767: LD_ADDR_VAR 0 9
12771: PUSH
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 250
12781: ST_TO_ADDR
// y := GetY ( tower ) ;
12782: LD_ADDR_VAR 0 10
12786: PUSH
12787: LD_VAR 0 1
12791: PPUSH
12792: CALL_OW 251
12796: ST_TO_ADDR
// if not x or not y then
12797: LD_VAR 0 9
12801: NOT
12802: PUSH
12803: LD_VAR 0 10
12807: NOT
12808: OR
12809: IFFALSE 12813
// exit ;
12811: GO 13868
// weapon := 0 ;
12813: LD_ADDR_VAR 0 17
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// fac_list := [ ] ;
12821: LD_ADDR_VAR 0 16
12825: PUSH
12826: EMPTY
12827: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
12828: LD_ADDR_VAR 0 5
12832: PUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 274
12842: PPUSH
12843: CALL 10696 0 1
12847: PPUSH
12848: LD_INT 30
12850: PUSH
12851: LD_INT 3
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PPUSH
12858: CALL_OW 72
12862: ST_TO_ADDR
// if not factories then
12863: LD_VAR 0 5
12867: NOT
12868: IFFALSE 12872
// exit ;
12870: GO 13868
// for i in factories do
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_VAR 0 5
12881: PUSH
12882: FOR_IN
12883: IFFALSE 12908
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12885: LD_ADDR_VAR 0 16
12889: PUSH
12890: LD_VAR 0 16
12894: PUSH
12895: LD_VAR 0 7
12899: PPUSH
12900: CALL_OW 478
12904: UNION
12905: ST_TO_ADDR
12906: GO 12882
12908: POP
12909: POP
// if not fac_list then
12910: LD_VAR 0 16
12914: NOT
12915: IFFALSE 12919
// exit ;
12917: GO 13868
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12919: LD_ADDR_VAR 0 4
12923: PUSH
12924: LD_INT 4
12926: PUSH
12927: LD_INT 5
12929: PUSH
12930: LD_INT 9
12932: PUSH
12933: LD_INT 10
12935: PUSH
12936: LD_INT 6
12938: PUSH
12939: LD_INT 7
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 27
12956: PUSH
12957: LD_INT 28
12959: PUSH
12960: LD_INT 26
12962: PUSH
12963: LD_INT 30
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 43
12974: PUSH
12975: LD_INT 44
12977: PUSH
12978: LD_INT 46
12980: PUSH
12981: LD_INT 45
12983: PUSH
12984: LD_INT 47
12986: PUSH
12987: LD_INT 49
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: PUSH
13003: LD_VAR 0 11
13007: ARRAY
13008: ST_TO_ADDR
// for i in list do
13009: LD_ADDR_VAR 0 7
13013: PUSH
13014: LD_VAR 0 4
13018: PUSH
13019: FOR_IN
13020: IFFALSE 13053
// if not i in fac_list then
13022: LD_VAR 0 7
13026: PUSH
13027: LD_VAR 0 16
13031: IN
13032: NOT
13033: IFFALSE 13051
// list := list diff i ;
13035: LD_ADDR_VAR 0 4
13039: PUSH
13040: LD_VAR 0 4
13044: PUSH
13045: LD_VAR 0 7
13049: DIFF
13050: ST_TO_ADDR
13051: GO 13019
13053: POP
13054: POP
// if not list then
13055: LD_VAR 0 4
13059: NOT
13060: IFFALSE 13064
// exit ;
13062: GO 13868
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13064: LD_VAR 0 11
13068: PUSH
13069: LD_INT 3
13071: EQUAL
13072: PUSH
13073: LD_INT 49
13075: PUSH
13076: LD_VAR 0 4
13080: IN
13081: AND
13082: PUSH
13083: LD_INT 31
13085: PPUSH
13086: LD_VAR 0 15
13090: PPUSH
13091: CALL_OW 321
13095: PUSH
13096: LD_INT 2
13098: EQUAL
13099: AND
13100: IFFALSE 13160
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13102: LD_INT 22
13104: PUSH
13105: LD_VAR 0 15
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 35
13116: PUSH
13117: LD_INT 49
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 91
13126: PUSH
13127: LD_VAR 0 1
13131: PUSH
13132: LD_INT 10
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: PPUSH
13145: CALL_OW 69
13149: NOT
13150: IFFALSE 13160
// weapon := ru_time_lapser ;
13152: LD_ADDR_VAR 0 17
13156: PUSH
13157: LD_INT 49
13159: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13160: LD_VAR 0 11
13164: PUSH
13165: LD_INT 1
13167: PUSH
13168: LD_INT 2
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: IN
13175: PUSH
13176: LD_INT 11
13178: PUSH
13179: LD_VAR 0 4
13183: IN
13184: PUSH
13185: LD_INT 30
13187: PUSH
13188: LD_VAR 0 4
13192: IN
13193: OR
13194: AND
13195: PUSH
13196: LD_INT 6
13198: PPUSH
13199: LD_VAR 0 15
13203: PPUSH
13204: CALL_OW 321
13208: PUSH
13209: LD_INT 2
13211: EQUAL
13212: AND
13213: IFFALSE 13378
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13215: LD_INT 22
13217: PUSH
13218: LD_VAR 0 15
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: LD_INT 35
13232: PUSH
13233: LD_INT 11
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 35
13242: PUSH
13243: LD_INT 30
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 91
13257: PUSH
13258: LD_VAR 0 1
13262: PUSH
13263: LD_INT 18
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: PPUSH
13276: CALL_OW 69
13280: NOT
13281: PUSH
13282: LD_INT 22
13284: PUSH
13285: LD_VAR 0 15
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 2
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 32
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 30
13309: PUSH
13310: LD_INT 33
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 91
13324: PUSH
13325: LD_VAR 0 1
13329: PUSH
13330: LD_INT 12
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PUSH
13351: LD_INT 2
13353: GREATER
13354: AND
13355: IFFALSE 13378
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13357: LD_ADDR_VAR 0 17
13361: PUSH
13362: LD_INT 11
13364: PUSH
13365: LD_INT 30
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_VAR 0 11
13376: ARRAY
13377: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13378: LD_VAR 0 17
13382: NOT
13383: PUSH
13384: LD_INT 40
13386: PPUSH
13387: LD_VAR 0 15
13391: PPUSH
13392: CALL_OW 321
13396: PUSH
13397: LD_INT 2
13399: EQUAL
13400: AND
13401: PUSH
13402: LD_INT 7
13404: PUSH
13405: LD_VAR 0 4
13409: IN
13410: PUSH
13411: LD_INT 28
13413: PUSH
13414: LD_VAR 0 4
13418: IN
13419: OR
13420: PUSH
13421: LD_INT 45
13423: PUSH
13424: LD_VAR 0 4
13428: IN
13429: OR
13430: AND
13431: IFFALSE 13685
// begin hex := GetHexInfo ( x , y ) ;
13433: LD_ADDR_VAR 0 3
13437: PUSH
13438: LD_VAR 0 9
13442: PPUSH
13443: LD_VAR 0 10
13447: PPUSH
13448: CALL_OW 546
13452: ST_TO_ADDR
// if hex [ 1 ] then
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 1
13460: ARRAY
13461: IFFALSE 13465
// exit ;
13463: GO 13868
// height := hex [ 2 ] ;
13465: LD_ADDR_VAR 0 14
13469: PUSH
13470: LD_VAR 0 3
13474: PUSH
13475: LD_INT 2
13477: ARRAY
13478: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13479: LD_ADDR_VAR 0 13
13483: PUSH
13484: LD_INT 0
13486: PUSH
13487: LD_INT 2
13489: PUSH
13490: LD_INT 3
13492: PUSH
13493: LD_INT 5
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: ST_TO_ADDR
// for i in tmp do
13502: LD_ADDR_VAR 0 7
13506: PUSH
13507: LD_VAR 0 13
13511: PUSH
13512: FOR_IN
13513: IFFALSE 13683
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13515: LD_ADDR_VAR 0 8
13519: PUSH
13520: LD_VAR 0 9
13524: PPUSH
13525: LD_VAR 0 7
13529: PPUSH
13530: LD_INT 5
13532: PPUSH
13533: CALL_OW 272
13537: PUSH
13538: LD_VAR 0 10
13542: PPUSH
13543: LD_VAR 0 7
13547: PPUSH
13548: LD_INT 5
13550: PPUSH
13551: CALL_OW 273
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13560: LD_VAR 0 8
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PPUSH
13569: LD_VAR 0 8
13573: PUSH
13574: LD_INT 2
13576: ARRAY
13577: PPUSH
13578: CALL_OW 488
13582: IFFALSE 13681
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13584: LD_ADDR_VAR 0 3
13588: PUSH
13589: LD_VAR 0 8
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_VAR 0 8
13602: PUSH
13603: LD_INT 2
13605: ARRAY
13606: PPUSH
13607: CALL_OW 546
13611: ST_TO_ADDR
// if hex [ 1 ] then
13612: LD_VAR 0 3
13616: PUSH
13617: LD_INT 1
13619: ARRAY
13620: IFFALSE 13624
// continue ;
13622: GO 13512
// h := hex [ 2 ] ;
13624: LD_ADDR_VAR 0 12
13628: PUSH
13629: LD_VAR 0 3
13633: PUSH
13634: LD_INT 2
13636: ARRAY
13637: ST_TO_ADDR
// if h + 7 < height then
13638: LD_VAR 0 12
13642: PUSH
13643: LD_INT 7
13645: PLUS
13646: PUSH
13647: LD_VAR 0 14
13651: LESS
13652: IFFALSE 13681
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13654: LD_ADDR_VAR 0 17
13658: PUSH
13659: LD_INT 7
13661: PUSH
13662: LD_INT 28
13664: PUSH
13665: LD_INT 45
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_VAR 0 11
13677: ARRAY
13678: ST_TO_ADDR
// break ;
13679: GO 13683
// end ; end ; end ;
13681: GO 13512
13683: POP
13684: POP
// end ; if not weapon then
13685: LD_VAR 0 17
13689: NOT
13690: IFFALSE 13750
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13692: LD_ADDR_VAR 0 4
13696: PUSH
13697: LD_VAR 0 4
13701: PUSH
13702: LD_INT 11
13704: PUSH
13705: LD_INT 30
13707: PUSH
13708: LD_INT 49
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: DIFF
13716: ST_TO_ADDR
// if not list then
13717: LD_VAR 0 4
13721: NOT
13722: IFFALSE 13726
// exit ;
13724: GO 13868
// weapon := list [ rand ( 1 , list ) ] ;
13726: LD_ADDR_VAR 0 17
13730: PUSH
13731: LD_VAR 0 4
13735: PUSH
13736: LD_INT 1
13738: PPUSH
13739: LD_VAR 0 4
13743: PPUSH
13744: CALL_OW 12
13748: ARRAY
13749: ST_TO_ADDR
// end ; if weapon then
13750: LD_VAR 0 17
13754: IFFALSE 13868
// begin tmp := CostOfWeapon ( weapon ) ;
13756: LD_ADDR_VAR 0 13
13760: PUSH
13761: LD_VAR 0 17
13765: PPUSH
13766: CALL_OW 451
13770: ST_TO_ADDR
// j := GetBase ( tower ) ;
13771: LD_ADDR_VAR 0 8
13775: PUSH
13776: LD_VAR 0 1
13780: PPUSH
13781: CALL_OW 274
13785: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13786: LD_VAR 0 8
13790: PPUSH
13791: LD_INT 1
13793: PPUSH
13794: CALL_OW 275
13798: PUSH
13799: LD_VAR 0 13
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: GREATEREQUAL
13808: PUSH
13809: LD_VAR 0 8
13813: PPUSH
13814: LD_INT 2
13816: PPUSH
13817: CALL_OW 275
13821: PUSH
13822: LD_VAR 0 13
13826: PUSH
13827: LD_INT 2
13829: ARRAY
13830: GREATEREQUAL
13831: AND
13832: PUSH
13833: LD_VAR 0 8
13837: PPUSH
13838: LD_INT 3
13840: PPUSH
13841: CALL_OW 275
13845: PUSH
13846: LD_VAR 0 13
13850: PUSH
13851: LD_INT 3
13853: ARRAY
13854: GREATEREQUAL
13855: AND
13856: IFFALSE 13868
// result := weapon ;
13858: LD_ADDR_VAR 0 2
13862: PUSH
13863: LD_VAR 0 17
13867: ST_TO_ADDR
// end ; end ;
13868: LD_VAR 0 2
13872: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13873: LD_INT 0
13875: PPUSH
13876: PPUSH
// result := true ;
13877: LD_ADDR_VAR 0 3
13881: PUSH
13882: LD_INT 1
13884: ST_TO_ADDR
// if array1 = array2 then
13885: LD_VAR 0 1
13889: PUSH
13890: LD_VAR 0 2
13894: EQUAL
13895: IFFALSE 13955
// begin for i = 1 to array1 do
13897: LD_ADDR_VAR 0 4
13901: PUSH
13902: DOUBLE
13903: LD_INT 1
13905: DEC
13906: ST_TO_ADDR
13907: LD_VAR 0 1
13911: PUSH
13912: FOR_TO
13913: IFFALSE 13951
// if array1 [ i ] <> array2 [ i ] then
13915: LD_VAR 0 1
13919: PUSH
13920: LD_VAR 0 4
13924: ARRAY
13925: PUSH
13926: LD_VAR 0 2
13930: PUSH
13931: LD_VAR 0 4
13935: ARRAY
13936: NONEQUAL
13937: IFFALSE 13949
// begin result := false ;
13939: LD_ADDR_VAR 0 3
13943: PUSH
13944: LD_INT 0
13946: ST_TO_ADDR
// break ;
13947: GO 13951
// end ;
13949: GO 13912
13951: POP
13952: POP
// end else
13953: GO 13963
// result := false ;
13955: LD_ADDR_VAR 0 3
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// end ;
13963: LD_VAR 0 3
13967: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13968: LD_INT 0
13970: PPUSH
13971: PPUSH
13972: PPUSH
// pom := GetBase ( fac ) ;
13973: LD_ADDR_VAR 0 5
13977: PUSH
13978: LD_VAR 0 1
13982: PPUSH
13983: CALL_OW 274
13987: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13988: LD_ADDR_VAR 0 4
13992: PUSH
13993: LD_VAR 0 2
13997: PUSH
13998: LD_INT 1
14000: ARRAY
14001: PPUSH
14002: LD_VAR 0 2
14006: PUSH
14007: LD_INT 2
14009: ARRAY
14010: PPUSH
14011: LD_VAR 0 2
14015: PUSH
14016: LD_INT 3
14018: ARRAY
14019: PPUSH
14020: LD_VAR 0 2
14024: PUSH
14025: LD_INT 4
14027: ARRAY
14028: PPUSH
14029: CALL_OW 449
14033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_VAR 0 5
14043: PPUSH
14044: LD_INT 1
14046: PPUSH
14047: CALL_OW 275
14051: PUSH
14052: LD_VAR 0 4
14056: PUSH
14057: LD_INT 1
14059: ARRAY
14060: GREATEREQUAL
14061: PUSH
14062: LD_VAR 0 5
14066: PPUSH
14067: LD_INT 2
14069: PPUSH
14070: CALL_OW 275
14074: PUSH
14075: LD_VAR 0 4
14079: PUSH
14080: LD_INT 2
14082: ARRAY
14083: GREATEREQUAL
14084: AND
14085: PUSH
14086: LD_VAR 0 5
14090: PPUSH
14091: LD_INT 3
14093: PPUSH
14094: CALL_OW 275
14098: PUSH
14099: LD_VAR 0 4
14103: PUSH
14104: LD_INT 3
14106: ARRAY
14107: GREATEREQUAL
14108: AND
14109: ST_TO_ADDR
// end ;
14110: LD_VAR 0 3
14114: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
// pom := GetBase ( building ) ;
14121: LD_ADDR_VAR 0 3
14125: PUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 274
14135: ST_TO_ADDR
// if not pom then
14136: LD_VAR 0 3
14140: NOT
14141: IFFALSE 14145
// exit ;
14143: GO 14315
// btype := GetBType ( building ) ;
14145: LD_ADDR_VAR 0 5
14149: PUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 266
14159: ST_TO_ADDR
// if btype = b_armoury then
14160: LD_VAR 0 5
14164: PUSH
14165: LD_INT 4
14167: EQUAL
14168: IFFALSE 14178
// btype := b_barracks ;
14170: LD_ADDR_VAR 0 5
14174: PUSH
14175: LD_INT 5
14177: ST_TO_ADDR
// if btype = b_depot then
14178: LD_VAR 0 5
14182: PUSH
14183: LD_INT 0
14185: EQUAL
14186: IFFALSE 14196
// btype := b_warehouse ;
14188: LD_ADDR_VAR 0 5
14192: PUSH
14193: LD_INT 1
14195: ST_TO_ADDR
// if btype = b_workshop then
14196: LD_VAR 0 5
14200: PUSH
14201: LD_INT 2
14203: EQUAL
14204: IFFALSE 14214
// btype := b_factory ;
14206: LD_ADDR_VAR 0 5
14210: PUSH
14211: LD_INT 3
14213: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14214: LD_ADDR_VAR 0 4
14218: PUSH
14219: LD_VAR 0 5
14223: PPUSH
14224: LD_VAR 0 1
14228: PPUSH
14229: CALL_OW 248
14233: PPUSH
14234: CALL_OW 450
14238: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14239: LD_ADDR_VAR 0 2
14243: PUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: CALL_OW 275
14256: PUSH
14257: LD_VAR 0 4
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: GREATEREQUAL
14266: PUSH
14267: LD_VAR 0 3
14271: PPUSH
14272: LD_INT 2
14274: PPUSH
14275: CALL_OW 275
14279: PUSH
14280: LD_VAR 0 4
14284: PUSH
14285: LD_INT 2
14287: ARRAY
14288: GREATEREQUAL
14289: AND
14290: PUSH
14291: LD_VAR 0 3
14295: PPUSH
14296: LD_INT 3
14298: PPUSH
14299: CALL_OW 275
14303: PUSH
14304: LD_VAR 0 4
14308: PUSH
14309: LD_INT 3
14311: ARRAY
14312: GREATEREQUAL
14313: AND
14314: ST_TO_ADDR
// end ;
14315: LD_VAR 0 2
14319: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14320: LD_INT 0
14322: PPUSH
14323: PPUSH
14324: PPUSH
// pom := GetBase ( building ) ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_VAR 0 1
14334: PPUSH
14335: CALL_OW 274
14339: ST_TO_ADDR
// if not pom then
14340: LD_VAR 0 4
14344: NOT
14345: IFFALSE 14349
// exit ;
14347: GO 14450
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14349: LD_ADDR_VAR 0 5
14353: PUSH
14354: LD_VAR 0 2
14358: PPUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 248
14368: PPUSH
14369: CALL_OW 450
14373: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_VAR 0 4
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: CALL_OW 275
14391: PUSH
14392: LD_VAR 0 5
14396: PUSH
14397: LD_INT 1
14399: ARRAY
14400: GREATEREQUAL
14401: PUSH
14402: LD_VAR 0 4
14406: PPUSH
14407: LD_INT 2
14409: PPUSH
14410: CALL_OW 275
14414: PUSH
14415: LD_VAR 0 5
14419: PUSH
14420: LD_INT 2
14422: ARRAY
14423: GREATEREQUAL
14424: AND
14425: PUSH
14426: LD_VAR 0 4
14430: PPUSH
14431: LD_INT 3
14433: PPUSH
14434: CALL_OW 275
14438: PUSH
14439: LD_VAR 0 5
14443: PUSH
14444: LD_INT 3
14446: ARRAY
14447: GREATEREQUAL
14448: AND
14449: ST_TO_ADDR
// end ;
14450: LD_VAR 0 3
14454: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
14455: LD_INT 0
14457: PPUSH
14458: PPUSH
14459: PPUSH
14460: PPUSH
14461: PPUSH
14462: PPUSH
14463: PPUSH
14464: PPUSH
14465: PPUSH
14466: PPUSH
// result := false ;
14467: LD_ADDR_VAR 0 6
14471: PUSH
14472: LD_INT 0
14474: ST_TO_ADDR
// if not base or not btype or not x or not y then
14475: LD_VAR 0 1
14479: NOT
14480: PUSH
14481: LD_VAR 0 2
14485: NOT
14486: OR
14487: PUSH
14488: LD_VAR 0 3
14492: NOT
14493: OR
14494: PUSH
14495: LD_VAR 0 4
14499: NOT
14500: OR
14501: IFFALSE 14505
// exit ;
14503: GO 15019
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
14505: LD_ADDR_VAR 0 12
14509: PUSH
14510: LD_VAR 0 2
14514: PPUSH
14515: LD_VAR 0 3
14519: PPUSH
14520: LD_VAR 0 4
14524: PPUSH
14525: LD_VAR 0 5
14529: PPUSH
14530: LD_VAR 0 1
14534: PUSH
14535: LD_INT 1
14537: ARRAY
14538: PPUSH
14539: CALL_OW 248
14543: PPUSH
14544: LD_INT 0
14546: PPUSH
14547: CALL 15848 0 6
14551: ST_TO_ADDR
// if not hexes then
14552: LD_VAR 0 12
14556: NOT
14557: IFFALSE 14561
// exit ;
14559: GO 15019
// for i = 1 to hexes do
14561: LD_ADDR_VAR 0 7
14565: PUSH
14566: DOUBLE
14567: LD_INT 1
14569: DEC
14570: ST_TO_ADDR
14571: LD_VAR 0 12
14575: PUSH
14576: FOR_TO
14577: IFFALSE 15017
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14579: LD_ADDR_VAR 0 11
14583: PUSH
14584: LD_VAR 0 12
14588: PUSH
14589: LD_VAR 0 7
14593: ARRAY
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 12
14603: PUSH
14604: LD_VAR 0 7
14608: ARRAY
14609: PUSH
14610: LD_INT 2
14612: ARRAY
14613: PPUSH
14614: CALL_OW 428
14618: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
14619: LD_VAR 0 11
14623: NOT
14624: PUSH
14625: LD_VAR 0 11
14629: PPUSH
14630: CALL_OW 247
14634: PUSH
14635: LD_INT 3
14637: EQUAL
14638: OR
14639: IFFALSE 14643
// continue ;
14641: GO 14576
// result := true ;
14643: LD_ADDR_VAR 0 6
14647: PUSH
14648: LD_INT 1
14650: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14651: LD_ADDR_VAR 0 15
14655: PUSH
14656: LD_INT 22
14658: PUSH
14659: LD_VAR 0 11
14663: PPUSH
14664: CALL_OW 255
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: LD_INT 30
14678: PUSH
14679: LD_INT 0
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 30
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: ST_TO_ADDR
// if dep then
14710: LD_VAR 0 15
14714: IFFALSE 14850
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14716: LD_ADDR_VAR 0 14
14720: PUSH
14721: LD_VAR 0 15
14725: PUSH
14726: LD_INT 1
14728: ARRAY
14729: PPUSH
14730: CALL_OW 250
14734: PPUSH
14735: LD_VAR 0 15
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PPUSH
14744: CALL_OW 254
14748: PPUSH
14749: LD_INT 5
14751: PPUSH
14752: CALL_OW 272
14756: PUSH
14757: LD_VAR 0 15
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: PPUSH
14766: CALL_OW 251
14770: PPUSH
14771: LD_VAR 0 15
14775: PUSH
14776: LD_INT 1
14778: ARRAY
14779: PPUSH
14780: CALL_OW 254
14784: PPUSH
14785: LD_INT 5
14787: PPUSH
14788: CALL_OW 273
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14797: LD_VAR 0 14
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: LD_VAR 0 14
14810: PUSH
14811: LD_INT 2
14813: ARRAY
14814: PPUSH
14815: CALL_OW 488
14819: IFFALSE 14850
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14821: LD_VAR 0 11
14825: PPUSH
14826: LD_VAR 0 14
14830: PUSH
14831: LD_INT 1
14833: ARRAY
14834: PPUSH
14835: LD_VAR 0 14
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: PPUSH
14844: CALL_OW 111
// continue ;
14848: GO 14576
// end ; end ; r := GetDir ( tmp ) ;
14850: LD_ADDR_VAR 0 13
14854: PUSH
14855: LD_VAR 0 11
14859: PPUSH
14860: CALL_OW 254
14864: ST_TO_ADDR
// if r = 5 then
14865: LD_VAR 0 13
14869: PUSH
14870: LD_INT 5
14872: EQUAL
14873: IFFALSE 14883
// r := 0 ;
14875: LD_ADDR_VAR 0 13
14879: PUSH
14880: LD_INT 0
14882: ST_TO_ADDR
// for j = r to 5 do
14883: LD_ADDR_VAR 0 8
14887: PUSH
14888: DOUBLE
14889: LD_VAR 0 13
14893: DEC
14894: ST_TO_ADDR
14895: LD_INT 5
14897: PUSH
14898: FOR_TO
14899: IFFALSE 15013
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14901: LD_ADDR_VAR 0 9
14905: PUSH
14906: LD_VAR 0 11
14910: PPUSH
14911: CALL_OW 250
14915: PPUSH
14916: LD_VAR 0 8
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: CALL_OW 272
14928: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14929: LD_ADDR_VAR 0 10
14933: PUSH
14934: LD_VAR 0 11
14938: PPUSH
14939: CALL_OW 251
14943: PPUSH
14944: LD_VAR 0 8
14948: PPUSH
14949: LD_INT 2
14951: PPUSH
14952: CALL_OW 273
14956: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14957: LD_VAR 0 9
14961: PPUSH
14962: LD_VAR 0 10
14966: PPUSH
14967: CALL_OW 488
14971: PUSH
14972: LD_VAR 0 9
14976: PPUSH
14977: LD_VAR 0 10
14981: PPUSH
14982: CALL_OW 428
14986: NOT
14987: AND
14988: IFFALSE 15011
// begin ComMoveXY ( tmp , _x , _y ) ;
14990: LD_VAR 0 11
14994: PPUSH
14995: LD_VAR 0 9
14999: PPUSH
15000: LD_VAR 0 10
15004: PPUSH
15005: CALL_OW 111
// break ;
15009: GO 15013
// end ; end ;
15011: GO 14898
15013: POP
15014: POP
// end ;
15015: GO 14576
15017: POP
15018: POP
// end ;
15019: LD_VAR 0 6
15023: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
15033: PPUSH
15034: PPUSH
// result := false ;
15035: LD_ADDR_VAR 0 6
15039: PUSH
15040: LD_INT 0
15042: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15043: LD_VAR 0 1
15047: NOT
15048: PUSH
15049: LD_VAR 0 1
15053: PPUSH
15054: CALL_OW 266
15058: PUSH
15059: LD_INT 0
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: IN
15069: NOT
15070: OR
15071: PUSH
15072: LD_VAR 0 2
15076: NOT
15077: OR
15078: PUSH
15079: LD_VAR 0 5
15083: PUSH
15084: LD_INT 0
15086: PUSH
15087: LD_INT 1
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: LD_INT 4
15098: PUSH
15099: LD_INT 5
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: IN
15110: NOT
15111: OR
15112: PUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: LD_VAR 0 4
15122: PPUSH
15123: CALL_OW 488
15127: NOT
15128: OR
15129: IFFALSE 15133
// exit ;
15131: GO 15843
// pom := GetBase ( bdepot ) ;
15133: LD_ADDR_VAR 0 9
15137: PUSH
15138: LD_VAR 0 1
15142: PPUSH
15143: CALL_OW 274
15147: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
15148: LD_ADDR_VAR 0 10
15152: PUSH
15153: LD_VAR 0 2
15157: PPUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 248
15167: PPUSH
15168: CALL_OW 450
15172: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15173: LD_VAR 0 9
15177: PPUSH
15178: LD_INT 1
15180: PPUSH
15181: CALL_OW 275
15185: PUSH
15186: LD_VAR 0 10
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: GREATEREQUAL
15195: PUSH
15196: LD_VAR 0 9
15200: PPUSH
15201: LD_INT 2
15203: PPUSH
15204: CALL_OW 275
15208: PUSH
15209: LD_VAR 0 10
15213: PUSH
15214: LD_INT 2
15216: ARRAY
15217: GREATEREQUAL
15218: AND
15219: PUSH
15220: LD_VAR 0 9
15224: PPUSH
15225: LD_INT 3
15227: PPUSH
15228: CALL_OW 275
15232: PUSH
15233: LD_VAR 0 10
15237: PUSH
15238: LD_INT 3
15240: ARRAY
15241: GREATEREQUAL
15242: AND
15243: NOT
15244: IFFALSE 15248
// exit ;
15246: GO 15843
// if GetBType ( bdepot ) = b_depot then
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 266
15257: PUSH
15258: LD_INT 0
15260: EQUAL
15261: IFFALSE 15273
// dist := 28 else
15263: LD_ADDR_VAR 0 13
15267: PUSH
15268: LD_INT 28
15270: ST_TO_ADDR
15271: GO 15281
// dist := 36 ;
15273: LD_ADDR_VAR 0 13
15277: PUSH
15278: LD_INT 36
15280: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_VAR 0 3
15290: PPUSH
15291: LD_VAR 0 4
15295: PPUSH
15296: CALL_OW 297
15300: PUSH
15301: LD_VAR 0 13
15305: GREATER
15306: IFFALSE 15310
// exit ;
15308: GO 15843
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
15310: LD_ADDR_VAR 0 11
15314: PUSH
15315: LD_VAR 0 2
15319: PPUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: LD_VAR 0 4
15329: PPUSH
15330: LD_VAR 0 5
15334: PPUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 248
15344: PPUSH
15345: LD_INT 0
15347: PPUSH
15348: CALL 15848 0 6
15352: ST_TO_ADDR
// if not hexes then
15353: LD_VAR 0 11
15357: NOT
15358: IFFALSE 15362
// exit ;
15360: GO 15843
// hex := GetHexInfo ( x , y ) ;
15362: LD_ADDR_VAR 0 14
15366: PUSH
15367: LD_VAR 0 3
15371: PPUSH
15372: LD_VAR 0 4
15376: PPUSH
15377: CALL_OW 546
15381: ST_TO_ADDR
// if hex [ 1 ] then
15382: LD_VAR 0 14
15386: PUSH
15387: LD_INT 1
15389: ARRAY
15390: IFFALSE 15394
// exit ;
15392: GO 15843
// height := hex [ 2 ] ;
15394: LD_ADDR_VAR 0 12
15398: PUSH
15399: LD_VAR 0 14
15403: PUSH
15404: LD_INT 2
15406: ARRAY
15407: ST_TO_ADDR
// for i = 1 to hexes do
15408: LD_ADDR_VAR 0 7
15412: PUSH
15413: DOUBLE
15414: LD_INT 1
15416: DEC
15417: ST_TO_ADDR
15418: LD_VAR 0 11
15422: PUSH
15423: FOR_TO
15424: IFFALSE 15752
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15426: LD_VAR 0 11
15430: PUSH
15431: LD_VAR 0 7
15435: ARRAY
15436: PUSH
15437: LD_INT 1
15439: ARRAY
15440: PPUSH
15441: LD_VAR 0 11
15445: PUSH
15446: LD_VAR 0 7
15450: ARRAY
15451: PUSH
15452: LD_INT 2
15454: ARRAY
15455: PPUSH
15456: CALL_OW 488
15460: NOT
15461: IFFALSE 15465
// continue ;
15463: GO 15423
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15465: LD_ADDR_VAR 0 8
15469: PUSH
15470: LD_VAR 0 11
15474: PUSH
15475: LD_VAR 0 7
15479: ARRAY
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: PPUSH
15485: LD_VAR 0 11
15489: PUSH
15490: LD_VAR 0 7
15494: ARRAY
15495: PUSH
15496: LD_INT 2
15498: ARRAY
15499: PPUSH
15500: CALL_OW 546
15504: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15505: LD_VAR 0 8
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PUSH
15514: LD_VAR 0 8
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PUSH
15523: LD_VAR 0 12
15527: PUSH
15528: LD_INT 2
15530: PLUS
15531: GREATER
15532: OR
15533: PUSH
15534: LD_VAR 0 8
15538: PUSH
15539: LD_INT 2
15541: ARRAY
15542: PUSH
15543: LD_VAR 0 12
15547: PUSH
15548: LD_INT 2
15550: MINUS
15551: LESS
15552: OR
15553: PUSH
15554: LD_VAR 0 8
15558: PUSH
15559: LD_INT 3
15561: ARRAY
15562: PUSH
15563: LD_INT 0
15565: PUSH
15566: LD_INT 8
15568: PUSH
15569: LD_INT 9
15571: PUSH
15572: LD_INT 10
15574: PUSH
15575: LD_INT 11
15577: PUSH
15578: LD_INT 12
15580: PUSH
15581: LD_INT 13
15583: PUSH
15584: LD_INT 16
15586: PUSH
15587: LD_INT 17
15589: PUSH
15590: LD_INT 18
15592: PUSH
15593: LD_INT 19
15595: PUSH
15596: LD_INT 20
15598: PUSH
15599: LD_INT 21
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: IN
15617: NOT
15618: OR
15619: PUSH
15620: LD_VAR 0 8
15624: PUSH
15625: LD_INT 5
15627: ARRAY
15628: NOT
15629: OR
15630: PUSH
15631: LD_VAR 0 8
15635: PUSH
15636: LD_INT 6
15638: ARRAY
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 7
15648: PUSH
15649: LD_INT 9
15651: PUSH
15652: LD_INT 10
15654: PUSH
15655: LD_INT 11
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: IN
15666: NOT
15667: OR
15668: PUSH
15669: LD_VAR 0 11
15673: PUSH
15674: LD_VAR 0 7
15678: ARRAY
15679: PUSH
15680: LD_INT 1
15682: ARRAY
15683: PPUSH
15684: LD_VAR 0 11
15688: PUSH
15689: LD_VAR 0 7
15693: ARRAY
15694: PUSH
15695: LD_INT 2
15697: ARRAY
15698: PPUSH
15699: CALL_OW 428
15703: PUSH
15704: LD_INT 0
15706: GREATER
15707: OR
15708: PUSH
15709: LD_VAR 0 11
15713: PUSH
15714: LD_VAR 0 7
15718: ARRAY
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: PPUSH
15724: LD_VAR 0 11
15728: PUSH
15729: LD_VAR 0 7
15733: ARRAY
15734: PUSH
15735: LD_INT 2
15737: ARRAY
15738: PPUSH
15739: CALL_OW 351
15743: OR
15744: IFFALSE 15750
// exit ;
15746: POP
15747: POP
15748: GO 15843
// end ;
15750: GO 15423
15752: POP
15753: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
15754: LD_VAR 0 1
15758: PPUSH
15759: CALL_OW 255
15763: PPUSH
15764: LD_VAR 0 3
15768: PPUSH
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_INT 20
15776: PPUSH
15777: CALL 8880 0 4
15781: PUSH
15782: LD_INT 4
15784: ARRAY
15785: IFFALSE 15789
// exit ;
15787: GO 15843
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 29
15796: PUSH
15797: LD_INT 30
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: IN
15804: PUSH
15805: LD_VAR 0 3
15809: PPUSH
15810: LD_VAR 0 4
15814: PPUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 255
15824: PPUSH
15825: CALL_OW 440
15829: NOT
15830: AND
15831: IFFALSE 15835
// exit ;
15833: GO 15843
// result := true ;
15835: LD_ADDR_VAR 0 6
15839: PUSH
15840: LD_INT 1
15842: ST_TO_ADDR
// end ;
15843: LD_VAR 0 6
15847: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
15848: LD_INT 0
15850: PPUSH
15851: PPUSH
15852: PPUSH
15853: PPUSH
15854: PPUSH
15855: PPUSH
15856: PPUSH
15857: PPUSH
15858: PPUSH
15859: PPUSH
15860: PPUSH
15861: PPUSH
15862: PPUSH
15863: PPUSH
15864: PPUSH
15865: PPUSH
15866: PPUSH
15867: PPUSH
15868: PPUSH
15869: PPUSH
15870: PPUSH
15871: PPUSH
15872: PPUSH
15873: PPUSH
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
15879: PPUSH
15880: PPUSH
15881: PPUSH
15882: PPUSH
15883: PPUSH
15884: PPUSH
15885: PPUSH
15886: PPUSH
15887: PPUSH
15888: PPUSH
15889: PPUSH
15890: PPUSH
15891: PPUSH
15892: PPUSH
15893: PPUSH
15894: PPUSH
15895: PPUSH
15896: PPUSH
15897: PPUSH
15898: PPUSH
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
// result = [ ] ;
15908: LD_ADDR_VAR 0 7
15912: PUSH
15913: EMPTY
15914: ST_TO_ADDR
// temp_list = [ ] ;
15915: LD_ADDR_VAR 0 9
15919: PUSH
15920: EMPTY
15921: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15922: LD_VAR 0 4
15926: PUSH
15927: LD_INT 0
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: LD_INT 2
15935: PUSH
15936: LD_INT 3
15938: PUSH
15939: LD_INT 4
15941: PUSH
15942: LD_INT 5
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: IN
15953: NOT
15954: PUSH
15955: LD_VAR 0 1
15959: PUSH
15960: LD_INT 0
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: IN
15970: PUSH
15971: LD_VAR 0 5
15975: PUSH
15976: LD_INT 1
15978: PUSH
15979: LD_INT 2
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: IN
15990: NOT
15991: AND
15992: OR
15993: IFFALSE 15997
// exit ;
15995: GO 34382
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15997: LD_VAR 0 1
16001: PUSH
16002: LD_INT 6
16004: PUSH
16005: LD_INT 7
16007: PUSH
16008: LD_INT 8
16010: PUSH
16011: LD_INT 13
16013: PUSH
16014: LD_INT 12
16016: PUSH
16017: LD_INT 15
16019: PUSH
16020: LD_INT 11
16022: PUSH
16023: LD_INT 14
16025: PUSH
16026: LD_INT 10
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: IN
16040: IFFALSE 16050
// btype = b_lab ;
16042: LD_ADDR_VAR 0 1
16046: PUSH
16047: LD_INT 6
16049: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16050: LD_VAR 0 6
16054: PUSH
16055: LD_INT 0
16057: PUSH
16058: LD_INT 1
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: IN
16069: NOT
16070: PUSH
16071: LD_VAR 0 1
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: LD_INT 6
16090: PUSH
16091: LD_INT 36
16093: PUSH
16094: LD_INT 4
16096: PUSH
16097: LD_INT 5
16099: PUSH
16100: LD_INT 31
16102: PUSH
16103: LD_INT 32
16105: PUSH
16106: LD_INT 33
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: IN
16122: NOT
16123: PUSH
16124: LD_VAR 0 6
16128: PUSH
16129: LD_INT 1
16131: EQUAL
16132: AND
16133: OR
16134: PUSH
16135: LD_VAR 0 1
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: LD_INT 3
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: IN
16150: NOT
16151: PUSH
16152: LD_VAR 0 6
16156: PUSH
16157: LD_INT 2
16159: EQUAL
16160: AND
16161: OR
16162: IFFALSE 16172
// mode = 0 ;
16164: LD_ADDR_VAR 0 6
16168: PUSH
16169: LD_INT 0
16171: ST_TO_ADDR
// case mode of 0 :
16172: LD_VAR 0 6
16176: PUSH
16177: LD_INT 0
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 27638
16185: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16186: LD_ADDR_VAR 0 11
16190: PUSH
16191: LD_INT 0
16193: PUSH
16194: LD_INT 0
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 1
16206: NEG
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 1
16214: PUSH
16215: LD_INT 0
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 0
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 1
16244: NEG
16245: PUSH
16246: LD_INT 0
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 1
16255: NEG
16256: PUSH
16257: LD_INT 1
16259: NEG
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: NEG
16268: PUSH
16269: LD_INT 2
16271: NEG
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: LD_INT 2
16282: NEG
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: LD_INT 1
16293: NEG
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: LD_INT 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 0
16311: PUSH
16312: LD_INT 2
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 1
16321: NEG
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: LD_INT 3
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 0
16342: PUSH
16343: LD_INT 3
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 1
16352: NEG
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16379: LD_ADDR_VAR 0 12
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: LD_INT 0
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 1
16399: NEG
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: LD_INT 1
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 1
16437: NEG
16438: PUSH
16439: LD_INT 0
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: LD_INT 1
16452: NEG
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: LD_INT 1
16463: NEG
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 1
16491: NEG
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 2
16502: NEG
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 2
16513: NEG
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 2
16525: NEG
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 3
16536: NEG
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 3
16547: NEG
16548: PUSH
16549: LD_INT 1
16551: NEG
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16575: LD_ADDR_VAR 0 13
16579: PUSH
16580: LD_INT 0
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 0
16592: PUSH
16593: LD_INT 1
16595: NEG
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: LD_INT 0
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: LD_INT 1
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 1
16644: NEG
16645: PUSH
16646: LD_INT 1
16648: NEG
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 1
16656: NEG
16657: PUSH
16658: LD_INT 2
16660: NEG
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 2
16668: PUSH
16669: LD_INT 1
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 2
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 2
16698: NEG
16699: PUSH
16700: LD_INT 1
16702: NEG
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 2
16710: NEG
16711: PUSH
16712: LD_INT 2
16714: NEG
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 2
16722: NEG
16723: PUSH
16724: LD_INT 3
16726: NEG
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 3
16734: NEG
16735: PUSH
16736: LD_INT 2
16738: NEG
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 3
16746: NEG
16747: PUSH
16748: LD_INT 3
16750: NEG
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16774: LD_ADDR_VAR 0 14
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: LD_INT 0
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: LD_INT 1
16794: NEG
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 1
16802: PUSH
16803: LD_INT 0
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 0
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: NEG
16833: PUSH
16834: LD_INT 0
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 1
16843: NEG
16844: PUSH
16845: LD_INT 1
16847: NEG
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: NEG
16856: PUSH
16857: LD_INT 2
16859: NEG
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 0
16867: PUSH
16868: LD_INT 2
16870: NEG
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 1
16878: PUSH
16879: LD_INT 1
16881: NEG
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 0
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 1
16909: NEG
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: LD_INT 3
16924: NEG
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 0
16932: PUSH
16933: LD_INT 3
16935: NEG
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: LD_INT 2
16946: NEG
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16970: LD_ADDR_VAR 0 15
16974: PUSH
16975: LD_INT 0
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: LD_INT 1
16990: NEG
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: LD_INT 1
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: LD_INT 1
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 1
17028: NEG
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: LD_INT 1
17054: NEG
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: LD_INT 1
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 1
17082: NEG
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 2
17093: NEG
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 2
17104: NEG
17105: PUSH
17106: LD_INT 1
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 1
17119: NEG
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 3
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 3
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17163: LD_ADDR_VAR 0 16
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: LD_INT 0
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: LD_INT 1
17183: NEG
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 1
17221: NEG
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: NEG
17233: PUSH
17234: LD_INT 1
17236: NEG
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 1
17244: NEG
17245: PUSH
17246: LD_INT 2
17248: NEG
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 2
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: LD_INT 2
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 2
17286: NEG
17287: PUSH
17288: LD_INT 1
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 2
17298: NEG
17299: PUSH
17300: LD_INT 2
17302: NEG
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 3
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 3
17320: PUSH
17321: LD_INT 3
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17356: LD_ADDR_VAR 0 17
17360: PUSH
17361: LD_INT 0
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: LD_INT 1
17376: NEG
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 1
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 1
17414: NEG
17415: PUSH
17416: LD_INT 0
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 1
17425: NEG
17426: PUSH
17427: LD_INT 1
17429: NEG
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 1
17437: NEG
17438: PUSH
17439: LD_INT 2
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: LD_INT 2
17452: NEG
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: LD_INT 1
17463: NEG
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 2
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 2
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 1
17521: NEG
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 2
17532: NEG
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 2
17543: NEG
17544: PUSH
17545: LD_INT 1
17547: NEG
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 2
17555: NEG
17556: PUSH
17557: LD_INT 2
17559: NEG
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17586: LD_ADDR_VAR 0 18
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: LD_INT 1
17606: NEG
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 1
17644: NEG
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: NEG
17656: PUSH
17657: LD_INT 1
17659: NEG
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: LD_INT 2
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 2
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: NEG
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 2
17762: NEG
17763: PUSH
17764: LD_INT 0
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 2
17773: NEG
17774: PUSH
17775: LD_INT 1
17777: NEG
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 2
17785: NEG
17786: PUSH
17787: LD_INT 2
17789: NEG
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17816: LD_ADDR_VAR 0 19
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 1
17836: NEG
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 0
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: NEG
17898: PUSH
17899: LD_INT 2
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 2
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: LD_INT 1
17923: NEG
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: LD_INT 0
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: LD_INT 2
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: LD_INT 1
18007: NEG
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 2
18015: NEG
18016: PUSH
18017: LD_INT 2
18019: NEG
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18046: LD_ADDR_VAR 0 20
18050: PUSH
18051: LD_INT 0
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 0
18063: PUSH
18064: LD_INT 1
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 0
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: LD_INT 0
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 0
18139: PUSH
18140: LD_INT 2
18142: NEG
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: LD_INT 1
18153: NEG
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 2
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 2
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 0
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 1
18211: NEG
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: LD_INT 1
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: LD_INT 2
18249: NEG
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18276: LD_ADDR_VAR 0 21
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: LD_INT 1
18296: NEG
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: LD_INT 2
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: LD_INT 2
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: LD_INT 1
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 2
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: NEG
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: NEG
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 2
18475: NEG
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18506: LD_ADDR_VAR 0 22
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: LD_INT 1
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: LD_INT 0
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 1
18564: NEG
18565: PUSH
18566: LD_INT 0
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: LD_INT 2
18591: NEG
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: LD_INT 2
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: LD_INT 1
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: LD_INT 2
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: NEG
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18736: LD_ADDR_VAR 0 23
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: LD_INT 2
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: LD_INT 2
18832: NEG
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 1
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: LD_INT 0
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 2
18947: NEG
18948: PUSH
18949: LD_INT 3
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: LD_INT 3
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 2
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 2
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19016: LD_ADDR_VAR 0 24
19020: PUSH
19021: LD_INT 0
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: LD_INT 1
19089: NEG
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: NEG
19098: PUSH
19099: LD_INT 2
19101: NEG
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: LD_INT 1
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 2
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 2
19192: NEG
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: NEG
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: LD_INT 2
19219: NEG
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: LD_INT 2
19230: NEG
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: LD_INT 1
19241: NEG
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 3
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 3
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19292: LD_ADDR_VAR 0 25
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 1
19312: NEG
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: NEG
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 1
19373: NEG
19374: PUSH
19375: LD_INT 2
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: LD_INT 2
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 1
19399: NEG
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 2
19468: NEG
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 2
19479: NEG
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: NEG
19492: PUSH
19493: LD_INT 2
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 3
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 3
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 3
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19566: LD_ADDR_VAR 0 26
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: LD_INT 2
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 1
19673: NEG
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 2
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 2
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: LD_INT 2
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: NEG
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 2
19742: NEG
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: LD_INT 2
19769: NEG
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 3
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19842: LD_ADDR_VAR 0 27
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 0
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: NEG
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 2
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: NEG
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: NEG
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 1
20053: NEG
20054: PUSH
20055: LD_INT 2
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: NEG
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 3
20075: NEG
20076: PUSH
20077: LD_INT 1
20079: NEG
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 3
20087: NEG
20088: PUSH
20089: LD_INT 2
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20122: LD_ADDR_VAR 0 28
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 2
20218: NEG
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: NEG
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: NEG
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: LD_INT 3
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: LD_INT 3
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 3
20357: NEG
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 3
20369: NEG
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20404: LD_ADDR_VAR 0 29
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: LD_INT 1
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 1
20473: NEG
20474: PUSH
20475: LD_INT 1
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: LD_INT 2
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 2
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: NEG
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 2
20570: NEG
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 2
20582: NEG
20583: PUSH
20584: LD_INT 2
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 2
20594: NEG
20595: PUSH
20596: LD_INT 3
20598: NEG
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 3
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: LD_INT 3
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 3
20648: NEG
20649: PUSH
20650: LD_INT 2
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20683: LD_ADDR_VAR 0 30
20687: PUSH
20688: LD_INT 0
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 0
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 0
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: NEG
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: NEG
20765: PUSH
20766: LD_INT 2
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 0
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: LD_INT 1
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 2
20798: PUSH
20799: LD_INT 0
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 2
20808: PUSH
20809: LD_INT 1
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: LD_INT 0
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: NEG
20873: PUSH
20874: LD_INT 3
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 2
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 3
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: LD_INT 3
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 3
20926: NEG
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20961: LD_ADDR_VAR 0 31
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: LD_INT 1
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 2
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 2
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: LD_INT 2
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 2
21126: NEG
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 2
21138: NEG
21139: PUSH
21140: LD_INT 2
21142: NEG
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 2
21150: NEG
21151: PUSH
21152: LD_INT 3
21154: NEG
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 3
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: LD_INT 3
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 3
21204: NEG
21205: PUSH
21206: LD_INT 2
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21239: LD_ADDR_VAR 0 32
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 1
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 1
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: NEG
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: LD_INT 2
21324: NEG
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: NEG
21395: PUSH
21396: LD_INT 1
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 2
21405: NEG
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 2
21416: NEG
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: NEG
21429: PUSH
21430: LD_INT 3
21432: NEG
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 3
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 3
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 3
21482: NEG
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21517: LD_ADDR_VAR 0 33
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: LD_INT 0
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: NEG
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: NEG
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 2
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: NEG
21708: PUSH
21709: LD_INT 3
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 1
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 1
21740: PUSH
21741: LD_INT 3
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 1
21750: NEG
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 3
21761: NEG
21762: PUSH
21763: LD_INT 2
21765: NEG
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21796: LD_ADDR_VAR 0 34
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 1
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: LD_INT 2
21892: NEG
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 1
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: NEG
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 2
21963: NEG
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: NEG
21976: PUSH
21977: LD_INT 2
21979: NEG
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: LD_INT 3
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 3
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: LD_INT 3
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 2
22030: NEG
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 3
22041: NEG
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22076: LD_ADDR_VAR 0 35
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 1
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 1
22134: NEG
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22188: LD_ADDR_VAR 0 36
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: LD_INT 1
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22300: LD_ADDR_VAR 0 37
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: LD_INT 0
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: LD_INT 1
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: NEG
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22412: LD_ADDR_VAR 0 38
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: LD_INT 0
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22524: LD_ADDR_VAR 0 39
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: LD_INT 2
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22636: LD_ADDR_VAR 0 40
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22748: LD_ADDR_VAR 0 41
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: LD_INT 2
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: NEG
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: LD_INT 2
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: LD_INT 3
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: LD_INT 3
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 2
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 2
23011: NEG
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 3
23022: NEG
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 3
23033: NEG
23034: PUSH
23035: LD_INT 1
23037: NEG
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 3
23045: NEG
23046: PUSH
23047: LD_INT 2
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: NEG
23058: PUSH
23059: LD_INT 3
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23098: LD_ADDR_VAR 0 42
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 1
23156: NEG
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 1
23205: NEG
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 2
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 2
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: LD_INT 2
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 1
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: LD_INT 3
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: LD_INT 3
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 3
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: LD_INT 2
23326: NEG
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 3
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 3
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: LD_INT 3
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: LD_INT 3
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 3
23395: NEG
23396: PUSH
23397: LD_INT 2
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: NEG
23408: PUSH
23409: LD_INT 3
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23448: LD_ADDR_VAR 0 43
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: LD_INT 3
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 3
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 2
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 3
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 3
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 3
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 3
23744: NEG
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 3
23755: NEG
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23796: LD_ADDR_VAR 0 44
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 2
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 2
23962: NEG
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: LD_INT 2
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 2
23986: NEG
23987: PUSH
23988: LD_INT 3
23990: NEG
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 3
24009: PUSH
24010: LD_INT 0
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 2
24059: NEG
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 3
24070: NEG
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 3
24081: NEG
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 3
24093: NEG
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 3
24105: NEG
24106: PUSH
24107: LD_INT 3
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24146: LD_ADDR_VAR 0 45
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 2
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: LD_INT 2
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: NEG
24337: PUSH
24338: LD_INT 3
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: LD_INT 3
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 3
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 2
24374: NEG
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 3
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 3
24392: PUSH
24393: LD_INT 3
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: LD_INT 3
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: LD_INT 2
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 3
24443: NEG
24444: PUSH
24445: LD_INT 2
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 3
24455: NEG
24456: PUSH
24457: LD_INT 3
24459: NEG
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24496: LD_ADDR_VAR 0 46
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: NEG
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: LD_INT 2
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: NEG
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: LD_INT 3
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: LD_INT 3
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: LD_INT 2
24711: NEG
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 2
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 3
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 3
24792: NEG
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 3
24803: NEG
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24844: LD_ADDR_VAR 0 47
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: NEG
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: LD_INT 2
24929: NEG
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: LD_INT 2
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 2
24959: NEG
24960: PUSH
24961: LD_INT 1
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 2
24971: NEG
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24995: LD_ADDR_VAR 0 48
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 2
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: LD_INT 2
25091: NEG
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 2
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25142: LD_ADDR_VAR 0 49
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 1
25211: NEG
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25286: LD_ADDR_VAR 0 50
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 2
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25430: LD_ADDR_VAR 0 51
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: NEG
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25577: LD_ADDR_VAR 0 52
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 2
25692: NEG
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: NEG
25705: PUSH
25706: LD_INT 2
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25728: LD_ADDR_VAR 0 53
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 2
25927: NEG
25928: PUSH
25929: LD_INT 2
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25958: LD_ADDR_VAR 0 54
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: LD_INT 2
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 2
26157: NEG
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26188: LD_ADDR_VAR 0 55
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: LD_INT 1
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: LD_INT 2
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26418: LD_ADDR_VAR 0 56
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26648: LD_ADDR_VAR 0 57
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: NEG
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26878: LD_ADDR_VAR 0 58
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 2
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 2
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 2
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27108: LD_ADDR_VAR 0 59
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27196: LD_ADDR_VAR 0 60
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27284: LD_ADDR_VAR 0 61
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27372: LD_ADDR_VAR 0 62
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27460: LD_ADDR_VAR 0 63
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27548: LD_ADDR_VAR 0 64
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: ST_TO_ADDR
// end ; 1 :
27636: GO 33533
27638: LD_INT 1
27640: DOUBLE
27641: EQUAL
27642: IFTRUE 27646
27644: GO 30269
27646: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27647: LD_ADDR_VAR 0 11
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: LD_INT 3
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27691: LD_ADDR_VAR 0 12
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 3
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27732: LD_ADDR_VAR 0 13
27736: PUSH
27737: LD_INT 3
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 3
27749: PUSH
27750: LD_INT 3
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27772: LD_ADDR_VAR 0 14
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27813: LD_ADDR_VAR 0 15
27817: PUSH
27818: LD_INT 2
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 3
27831: NEG
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 3
27842: NEG
27843: PUSH
27844: LD_INT 1
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27857: LD_ADDR_VAR 0 16
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: LD_INT 3
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 3
27876: NEG
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 3
27888: NEG
27889: PUSH
27890: LD_INT 3
27892: NEG
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27903: LD_ADDR_VAR 0 17
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 3
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 3
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 2
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27947: LD_ADDR_VAR 0 18
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27988: LD_ADDR_VAR 0 19
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: LD_INT 3
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 2
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28028: LD_ADDR_VAR 0 20
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 3
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 3
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28069: LD_ADDR_VAR 0 21
28073: PUSH
28074: LD_INT 2
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 3
28087: NEG
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 3
28098: NEG
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28113: LD_ADDR_VAR 0 22
28117: PUSH
28118: LD_INT 2
28120: NEG
28121: PUSH
28122: LD_INT 3
28124: NEG
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 3
28132: NEG
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 3
28144: NEG
28145: PUSH
28146: LD_INT 3
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28159: LD_ADDR_VAR 0 23
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: LD_INT 3
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 4
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 3
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: LIST
28202: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28203: LD_ADDR_VAR 0 24
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 4
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28244: LD_ADDR_VAR 0 25
28248: PUSH
28249: LD_INT 3
28251: PUSH
28252: LD_INT 3
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 4
28261: PUSH
28262: LD_INT 3
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 3
28271: PUSH
28272: LD_INT 4
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28284: LD_ADDR_VAR 0 26
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 3
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: LD_INT 4
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28325: LD_ADDR_VAR 0 27
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 3
28343: NEG
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 4
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28369: LD_ADDR_VAR 0 28
28373: PUSH
28374: LD_INT 3
28376: NEG
28377: PUSH
28378: LD_INT 3
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 3
28388: NEG
28389: PUSH
28390: LD_INT 4
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 4
28400: NEG
28401: PUSH
28402: LD_INT 3
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28415: LD_ADDR_VAR 0 29
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: LD_INT 3
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 3
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: LD_INT 4
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: LD_INT 4
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: LD_INT 3
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: LD_INT 5
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 5
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: LD_INT 4
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: LD_INT 6
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: LD_INT 6
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 5
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28570: LD_ADDR_VAR 0 30
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 3
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 3
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 4
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 4
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 4
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 5
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 5
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 5
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 6
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 6
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28713: LD_ADDR_VAR 0 31
28717: PUSH
28718: LD_INT 3
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 3
28730: PUSH
28731: LD_INT 3
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 4
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 4
28760: PUSH
28761: LD_INT 4
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: LD_INT 4
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 5
28780: PUSH
28781: LD_INT 4
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 5
28790: PUSH
28791: LD_INT 5
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 4
28800: PUSH
28801: LD_INT 5
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 6
28810: PUSH
28811: LD_INT 5
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 6
28820: PUSH
28821: LD_INT 6
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 5
28830: PUSH
28831: LD_INT 6
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28852: LD_ADDR_VAR 0 32
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: LD_INT 3
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 3
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 4
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 4
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 5
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 5
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 4
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 6
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 6
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 5
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28995: LD_ADDR_VAR 0 33
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 3
29013: NEG
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 3
29024: NEG
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: NEG
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 4
29047: NEG
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 4
29058: NEG
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 4
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 5
29081: NEG
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 5
29092: NEG
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 5
29104: NEG
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 6
29115: NEG
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 6
29126: NEG
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29150: LD_ADDR_VAR 0 34
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: LD_INT 3
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 3
29169: NEG
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: NEG
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 3
29193: NEG
29194: PUSH
29195: LD_INT 4
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 4
29205: NEG
29206: PUSH
29207: LD_INT 3
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 4
29217: NEG
29218: PUSH
29219: LD_INT 4
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 4
29229: NEG
29230: PUSH
29231: LD_INT 5
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 5
29241: NEG
29242: PUSH
29243: LD_INT 4
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 5
29253: NEG
29254: PUSH
29255: LD_INT 5
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 5
29265: NEG
29266: PUSH
29267: LD_INT 6
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 6
29277: NEG
29278: PUSH
29279: LD_INT 5
29281: NEG
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 6
29289: NEG
29290: PUSH
29291: LD_INT 6
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29313: LD_ADDR_VAR 0 41
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 3
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29357: LD_ADDR_VAR 0 42
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29398: LD_ADDR_VAR 0 43
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29438: LD_ADDR_VAR 0 44
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: PUSH
29456: LD_INT 3
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29479: LD_ADDR_VAR 0 45
29483: PUSH
29484: LD_INT 2
29486: NEG
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 3
29508: NEG
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29523: LD_ADDR_VAR 0 46
29527: PUSH
29528: LD_INT 2
29530: NEG
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 2
29542: NEG
29543: PUSH
29544: LD_INT 3
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 3
29554: NEG
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29569: LD_ADDR_VAR 0 47
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 3
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: LD_INT 3
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29602: LD_ADDR_VAR 0 48
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: LD_INT 2
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29633: LD_ADDR_VAR 0 49
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: LD_INT 1
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29662: LD_ADDR_VAR 0 50
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 3
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29691: LD_ADDR_VAR 0 51
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 2
29709: NEG
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29722: LD_ADDR_VAR 0 52
29726: PUSH
29727: LD_INT 3
29729: NEG
29730: PUSH
29731: LD_INT 1
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 3
29741: NEG
29742: PUSH
29743: LD_INT 2
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29755: LD_ADDR_VAR 0 53
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 3
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: LD_INT 2
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29799: LD_ADDR_VAR 0 54
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 3
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29840: LD_ADDR_VAR 0 55
29844: PUSH
29845: LD_INT 3
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: LD_INT 3
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29880: LD_ADDR_VAR 0 56
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 3
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29921: LD_ADDR_VAR 0 57
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: NEG
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: LIST
29964: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29965: LD_ADDR_VAR 0 58
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: LD_INT 3
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: LD_INT 2
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 3
29996: NEG
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30011: LD_ADDR_VAR 0 59
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30055: LD_ADDR_VAR 0 60
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30096: LD_ADDR_VAR 0 61
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30136: LD_ADDR_VAR 0 62
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 2
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30177: LD_ADDR_VAR 0 63
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 2
30206: NEG
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30221: LD_ADDR_VAR 0 64
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 2
30240: NEG
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 2
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
// end ; 2 :
30267: GO 33533
30269: LD_INT 2
30271: DOUBLE
30272: EQUAL
30273: IFTRUE 30277
30275: GO 33532
30277: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30278: LD_ADDR_VAR 0 29
30282: PUSH
30283: LD_INT 4
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 5
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 5
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 4
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 3
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 3
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 5
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 4
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 4
30408: PUSH
30409: LD_INT 4
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 3
30418: PUSH
30419: LD_INT 4
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 4
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 4
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 4
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: LD_INT 4
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: LD_INT 5
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: LD_INT 5
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 1
30518: NEG
30519: PUSH
30520: LD_INT 4
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 5
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 2
30550: NEG
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 3
30561: NEG
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 3
30572: NEG
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 2
30595: NEG
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 3
30606: NEG
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 4
30617: NEG
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: NEG
30641: PUSH
30642: LD_INT 2
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 2
30652: NEG
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 4
30663: NEG
30664: PUSH
30665: LD_INT 4
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 4
30675: NEG
30676: PUSH
30677: LD_INT 5
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 3
30687: NEG
30688: PUSH
30689: LD_INT 4
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: LD_INT 3
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 4
30711: NEG
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 5
30723: NEG
30724: PUSH
30725: LD_INT 4
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 5
30735: NEG
30736: PUSH
30737: LD_INT 5
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 3
30747: NEG
30748: PUSH
30749: LD_INT 5
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 5
30759: NEG
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30816: LD_ADDR_VAR 0 30
30820: PUSH
30821: LD_INT 4
30823: PUSH
30824: LD_INT 4
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 3
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 5
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 5
30853: PUSH
30854: LD_INT 5
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 4
30863: PUSH
30864: LD_INT 5
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: LD_INT 4
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 3
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 5
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: LD_INT 5
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 4
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 4
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: LD_INT 4
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 4
31006: NEG
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 4
31017: NEG
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 3
31040: NEG
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 4
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 5
31062: NEG
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 5
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 5
31085: NEG
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 3
31097: NEG
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 3
31108: NEG
31109: PUSH
31110: LD_INT 3
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: NEG
31121: PUSH
31122: LD_INT 4
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 3
31156: NEG
31157: PUSH
31158: LD_INT 2
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: NEG
31169: PUSH
31170: LD_INT 3
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 4
31180: NEG
31181: PUSH
31182: LD_INT 4
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: LD_INT 4
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 4
31204: NEG
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 5
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 4
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 4
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: LD_INT 5
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 3
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: NEG
31307: PUSH
31308: LD_INT 5
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31363: LD_ADDR_VAR 0 31
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: LD_INT 4
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 3
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 4
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: PUSH
31401: LD_INT 5
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 5
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 4
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 3
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 5
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: NEG
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 3
31474: NEG
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 4
31519: NEG
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 4
31530: NEG
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 4
31542: NEG
31543: PUSH
31544: LD_INT 2
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: LD_INT 4
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 4
31577: NEG
31578: PUSH
31579: LD_INT 5
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 3
31589: NEG
31590: PUSH
31591: LD_INT 4
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 3
31601: NEG
31602: PUSH
31603: LD_INT 3
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 4
31613: NEG
31614: PUSH
31615: LD_INT 3
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 5
31625: NEG
31626: PUSH
31627: LD_INT 4
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 5
31637: NEG
31638: PUSH
31639: LD_INT 5
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: NEG
31650: PUSH
31651: LD_INT 5
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 5
31661: NEG
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 3
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: LD_INT 4
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 3
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 1
31728: NEG
31729: PUSH
31730: LD_INT 3
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: LD_INT 4
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: LD_INT 2
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: NEG
31764: PUSH
31765: LD_INT 4
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 4
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 4
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 5
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 5
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 4
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 3
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 3
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 5
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31913: LD_ADDR_VAR 0 32
31917: PUSH
31918: LD_INT 4
31920: NEG
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 4
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 3
31943: NEG
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 3
31954: NEG
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 4
31965: NEG
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 5
31976: NEG
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 5
31987: NEG
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 5
31999: NEG
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 3
32011: NEG
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 3
32022: NEG
32023: PUSH
32024: LD_INT 3
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 3
32034: NEG
32035: PUSH
32036: LD_INT 4
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: LD_INT 3
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 4
32082: NEG
32083: PUSH
32084: LD_INT 3
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 4
32094: NEG
32095: PUSH
32096: LD_INT 4
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: LD_INT 4
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 4
32118: NEG
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: LD_INT 4
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 5
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: LD_INT 4
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 3
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: LD_INT 3
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: LD_INT 4
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: LD_INT 5
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 3
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 2
32220: NEG
32221: PUSH
32222: LD_INT 5
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 3
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 4
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 4
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 2
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 4
32325: PUSH
32326: LD_INT 4
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 4
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 5
32345: PUSH
32346: LD_INT 4
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 5
32355: PUSH
32356: LD_INT 5
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 4
32365: PUSH
32366: LD_INT 5
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 3
32375: PUSH
32376: LD_INT 4
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: LD_INT 3
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 5
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: LD_INT 5
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32460: LD_ADDR_VAR 0 33
32464: PUSH
32465: LD_INT 4
32467: NEG
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 4
32479: NEG
32480: PUSH
32481: LD_INT 5
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: LD_INT 4
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 3
32503: NEG
32504: PUSH
32505: LD_INT 3
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 4
32515: NEG
32516: PUSH
32517: LD_INT 3
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 5
32527: NEG
32528: PUSH
32529: LD_INT 4
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 5
32539: NEG
32540: PUSH
32541: LD_INT 5
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: NEG
32552: PUSH
32553: LD_INT 5
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 5
32563: NEG
32564: PUSH
32565: LD_INT 3
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 3
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 4
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 3
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: LD_INT 2
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: LD_INT 3
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: LD_INT 4
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: LD_INT 4
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 4
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 5
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 5
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 4
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 3
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 5
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 3
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 4
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: LD_INT 4
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: PUSH
32811: LD_INT 4
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 4
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: LD_INT 4
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 4
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 5
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 5
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 4
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 5
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32998: LD_ADDR_VAR 0 34
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 4
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 5
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 4
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: LD_INT 3
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: LD_INT 3
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 4
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 5
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 3
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: LD_INT 5
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 3
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 4
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 3
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 4
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 4
33200: PUSH
33201: LD_INT 4
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 4
33210: PUSH
33211: LD_INT 3
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 5
33220: PUSH
33221: LD_INT 4
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 5
33230: PUSH
33231: LD_INT 5
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: LD_INT 5
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 4
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 3
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 5
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 3
33280: PUSH
33281: LD_INT 5
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 3
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 2
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: LD_INT 4
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: LD_INT 4
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: LD_INT 3
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 4
33383: NEG
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 4
33394: NEG
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 3
33406: NEG
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 3
33417: NEG
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 4
33428: NEG
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 5
33439: NEG
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 5
33450: NEG
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 5
33462: NEG
33463: PUSH
33464: LD_INT 2
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 3
33474: NEG
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: ST_TO_ADDR
// end ; end ;
33530: GO 33533
33532: POP
// case btype of b_depot , b_warehouse :
33533: LD_VAR 0 1
33537: PUSH
33538: LD_INT 0
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33552
33544: LD_INT 1
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33552
33550: GO 33753
33552: POP
// case nation of nation_american :
33553: LD_VAR 0 5
33557: PUSH
33558: LD_INT 1
33560: DOUBLE
33561: EQUAL
33562: IFTRUE 33566
33564: GO 33622
33566: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
33567: LD_ADDR_VAR 0 9
33571: PUSH
33572: LD_VAR 0 11
33576: PUSH
33577: LD_VAR 0 12
33581: PUSH
33582: LD_VAR 0 13
33586: PUSH
33587: LD_VAR 0 14
33591: PUSH
33592: LD_VAR 0 15
33596: PUSH
33597: LD_VAR 0 16
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: PUSH
33610: LD_VAR 0 4
33614: PUSH
33615: LD_INT 1
33617: PLUS
33618: ARRAY
33619: ST_TO_ADDR
33620: GO 33751
33622: LD_INT 2
33624: DOUBLE
33625: EQUAL
33626: IFTRUE 33630
33628: GO 33686
33630: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
33631: LD_ADDR_VAR 0 9
33635: PUSH
33636: LD_VAR 0 17
33640: PUSH
33641: LD_VAR 0 18
33645: PUSH
33646: LD_VAR 0 19
33650: PUSH
33651: LD_VAR 0 20
33655: PUSH
33656: LD_VAR 0 21
33660: PUSH
33661: LD_VAR 0 22
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: PUSH
33674: LD_VAR 0 4
33678: PUSH
33679: LD_INT 1
33681: PLUS
33682: ARRAY
33683: ST_TO_ADDR
33684: GO 33751
33686: LD_INT 3
33688: DOUBLE
33689: EQUAL
33690: IFTRUE 33694
33692: GO 33750
33694: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33695: LD_ADDR_VAR 0 9
33699: PUSH
33700: LD_VAR 0 23
33704: PUSH
33705: LD_VAR 0 24
33709: PUSH
33710: LD_VAR 0 25
33714: PUSH
33715: LD_VAR 0 26
33719: PUSH
33720: LD_VAR 0 27
33724: PUSH
33725: LD_VAR 0 28
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: PUSH
33738: LD_VAR 0 4
33742: PUSH
33743: LD_INT 1
33745: PLUS
33746: ARRAY
33747: ST_TO_ADDR
33748: GO 33751
33750: POP
33751: GO 34300
33753: LD_INT 2
33755: DOUBLE
33756: EQUAL
33757: IFTRUE 33767
33759: LD_INT 3
33761: DOUBLE
33762: EQUAL
33763: IFTRUE 33767
33765: GO 33823
33767: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33768: LD_ADDR_VAR 0 9
33772: PUSH
33773: LD_VAR 0 29
33777: PUSH
33778: LD_VAR 0 30
33782: PUSH
33783: LD_VAR 0 31
33787: PUSH
33788: LD_VAR 0 32
33792: PUSH
33793: LD_VAR 0 33
33797: PUSH
33798: LD_VAR 0 34
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: PUSH
33811: LD_VAR 0 4
33815: PUSH
33816: LD_INT 1
33818: PLUS
33819: ARRAY
33820: ST_TO_ADDR
33821: GO 34300
33823: LD_INT 16
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33879
33829: LD_INT 17
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33879
33835: LD_INT 18
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33879
33841: LD_INT 19
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33879
33847: LD_INT 20
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33879
33853: LD_INT 21
33855: DOUBLE
33856: EQUAL
33857: IFTRUE 33879
33859: LD_INT 23
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33879
33865: LD_INT 24
33867: DOUBLE
33868: EQUAL
33869: IFTRUE 33879
33871: LD_INT 25
33873: DOUBLE
33874: EQUAL
33875: IFTRUE 33879
33877: GO 33935
33879: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33880: LD_ADDR_VAR 0 9
33884: PUSH
33885: LD_VAR 0 35
33889: PUSH
33890: LD_VAR 0 36
33894: PUSH
33895: LD_VAR 0 37
33899: PUSH
33900: LD_VAR 0 38
33904: PUSH
33905: LD_VAR 0 39
33909: PUSH
33910: LD_VAR 0 40
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: PUSH
33923: LD_VAR 0 4
33927: PUSH
33928: LD_INT 1
33930: PLUS
33931: ARRAY
33932: ST_TO_ADDR
33933: GO 34300
33935: LD_INT 6
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33991
33941: LD_INT 7
33943: DOUBLE
33944: EQUAL
33945: IFTRUE 33991
33947: LD_INT 8
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33991
33953: LD_INT 13
33955: DOUBLE
33956: EQUAL
33957: IFTRUE 33991
33959: LD_INT 12
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33991
33965: LD_INT 15
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33991
33971: LD_INT 11
33973: DOUBLE
33974: EQUAL
33975: IFTRUE 33991
33977: LD_INT 14
33979: DOUBLE
33980: EQUAL
33981: IFTRUE 33991
33983: LD_INT 10
33985: DOUBLE
33986: EQUAL
33987: IFTRUE 33991
33989: GO 34047
33991: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
33992: LD_ADDR_VAR 0 9
33996: PUSH
33997: LD_VAR 0 41
34001: PUSH
34002: LD_VAR 0 42
34006: PUSH
34007: LD_VAR 0 43
34011: PUSH
34012: LD_VAR 0 44
34016: PUSH
34017: LD_VAR 0 45
34021: PUSH
34022: LD_VAR 0 46
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: PUSH
34035: LD_VAR 0 4
34039: PUSH
34040: LD_INT 1
34042: PLUS
34043: ARRAY
34044: ST_TO_ADDR
34045: GO 34300
34047: LD_INT 36
34049: DOUBLE
34050: EQUAL
34051: IFTRUE 34055
34053: GO 34111
34055: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34056: LD_ADDR_VAR 0 9
34060: PUSH
34061: LD_VAR 0 47
34065: PUSH
34066: LD_VAR 0 48
34070: PUSH
34071: LD_VAR 0 49
34075: PUSH
34076: LD_VAR 0 50
34080: PUSH
34081: LD_VAR 0 51
34085: PUSH
34086: LD_VAR 0 52
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: PUSH
34099: LD_VAR 0 4
34103: PUSH
34104: LD_INT 1
34106: PLUS
34107: ARRAY
34108: ST_TO_ADDR
34109: GO 34300
34111: LD_INT 4
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34137
34117: LD_INT 5
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34137
34123: LD_INT 34
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34137
34129: LD_INT 37
34131: DOUBLE
34132: EQUAL
34133: IFTRUE 34137
34135: GO 34193
34137: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34138: LD_ADDR_VAR 0 9
34142: PUSH
34143: LD_VAR 0 53
34147: PUSH
34148: LD_VAR 0 54
34152: PUSH
34153: LD_VAR 0 55
34157: PUSH
34158: LD_VAR 0 56
34162: PUSH
34163: LD_VAR 0 57
34167: PUSH
34168: LD_VAR 0 58
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: PUSH
34181: LD_VAR 0 4
34185: PUSH
34186: LD_INT 1
34188: PLUS
34189: ARRAY
34190: ST_TO_ADDR
34191: GO 34300
34193: LD_INT 31
34195: DOUBLE
34196: EQUAL
34197: IFTRUE 34243
34199: LD_INT 32
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34243
34205: LD_INT 33
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34243
34211: LD_INT 27
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34243
34217: LD_INT 26
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34243
34223: LD_INT 28
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34243
34229: LD_INT 29
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34243
34235: LD_INT 30
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34243
34241: GO 34299
34243: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
34244: LD_ADDR_VAR 0 9
34248: PUSH
34249: LD_VAR 0 59
34253: PUSH
34254: LD_VAR 0 60
34258: PUSH
34259: LD_VAR 0 61
34263: PUSH
34264: LD_VAR 0 62
34268: PUSH
34269: LD_VAR 0 63
34273: PUSH
34274: LD_VAR 0 64
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: PUSH
34287: LD_VAR 0 4
34291: PUSH
34292: LD_INT 1
34294: PLUS
34295: ARRAY
34296: ST_TO_ADDR
34297: GO 34300
34299: POP
// temp_list2 = [ ] ;
34300: LD_ADDR_VAR 0 10
34304: PUSH
34305: EMPTY
34306: ST_TO_ADDR
// for i in temp_list do
34307: LD_ADDR_VAR 0 8
34311: PUSH
34312: LD_VAR 0 9
34316: PUSH
34317: FOR_IN
34318: IFFALSE 34370
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34320: LD_ADDR_VAR 0 10
34324: PUSH
34325: LD_VAR 0 10
34329: PUSH
34330: LD_VAR 0 8
34334: PUSH
34335: LD_INT 1
34337: ARRAY
34338: PUSH
34339: LD_VAR 0 2
34343: PLUS
34344: PUSH
34345: LD_VAR 0 8
34349: PUSH
34350: LD_INT 2
34352: ARRAY
34353: PUSH
34354: LD_VAR 0 3
34358: PLUS
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: ADD
34367: ST_TO_ADDR
34368: GO 34317
34370: POP
34371: POP
// result = temp_list2 ;
34372: LD_ADDR_VAR 0 7
34376: PUSH
34377: LD_VAR 0 10
34381: ST_TO_ADDR
// end ;
34382: LD_VAR 0 7
34386: RET
// export function EnemyInRange ( unit , dist ) ; begin
34387: LD_INT 0
34389: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_VAR 0 1
34399: PPUSH
34400: CALL_OW 255
34404: PPUSH
34405: LD_VAR 0 1
34409: PPUSH
34410: CALL_OW 250
34414: PPUSH
34415: LD_VAR 0 1
34419: PPUSH
34420: CALL_OW 251
34424: PPUSH
34425: LD_VAR 0 2
34429: PPUSH
34430: CALL 8880 0 4
34434: PUSH
34435: LD_INT 4
34437: ARRAY
34438: ST_TO_ADDR
// end ;
34439: LD_VAR 0 3
34443: RET
// export function PlayerSeeMe ( unit ) ; begin
34444: LD_INT 0
34446: PPUSH
// result := See ( your_side , unit ) ;
34447: LD_ADDR_VAR 0 2
34451: PUSH
34452: LD_OWVAR 2
34456: PPUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: CALL_OW 292
34466: ST_TO_ADDR
// end ;
34467: LD_VAR 0 2
34471: RET
// export function ReverseDir ( unit ) ; begin
34472: LD_INT 0
34474: PPUSH
// if not unit then
34475: LD_VAR 0 1
34479: NOT
34480: IFFALSE 34484
// exit ;
34482: GO 34530
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
34484: LD_ADDR_VAR 0 2
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 4
34494: PUSH
34495: LD_INT 5
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 2
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: PUSH
34515: LD_VAR 0 1
34519: PPUSH
34520: CALL_OW 254
34524: PUSH
34525: LD_INT 1
34527: PLUS
34528: ARRAY
34529: ST_TO_ADDR
// end ;
34530: LD_VAR 0 2
34534: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
34535: LD_INT 0
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
// if not hexes then
34542: LD_VAR 0 2
34546: NOT
34547: IFFALSE 34551
// exit ;
34549: GO 34699
// dist := 9999 ;
34551: LD_ADDR_VAR 0 5
34555: PUSH
34556: LD_INT 9999
34558: ST_TO_ADDR
// for i = 1 to hexes do
34559: LD_ADDR_VAR 0 4
34563: PUSH
34564: DOUBLE
34565: LD_INT 1
34567: DEC
34568: ST_TO_ADDR
34569: LD_VAR 0 2
34573: PUSH
34574: FOR_TO
34575: IFFALSE 34687
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
34577: LD_VAR 0 1
34581: PPUSH
34582: LD_VAR 0 2
34586: PUSH
34587: LD_VAR 0 4
34591: ARRAY
34592: PUSH
34593: LD_INT 1
34595: ARRAY
34596: PPUSH
34597: LD_VAR 0 2
34601: PUSH
34602: LD_VAR 0 4
34606: ARRAY
34607: PUSH
34608: LD_INT 2
34610: ARRAY
34611: PPUSH
34612: CALL_OW 297
34616: PUSH
34617: LD_VAR 0 5
34621: LESS
34622: IFFALSE 34685
// begin hex := hexes [ i ] ;
34624: LD_ADDR_VAR 0 7
34628: PUSH
34629: LD_VAR 0 2
34633: PUSH
34634: LD_VAR 0 4
34638: ARRAY
34639: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34640: LD_ADDR_VAR 0 5
34644: PUSH
34645: LD_VAR 0 1
34649: PPUSH
34650: LD_VAR 0 2
34654: PUSH
34655: LD_VAR 0 4
34659: ARRAY
34660: PUSH
34661: LD_INT 1
34663: ARRAY
34664: PPUSH
34665: LD_VAR 0 2
34669: PUSH
34670: LD_VAR 0 4
34674: ARRAY
34675: PUSH
34676: LD_INT 2
34678: ARRAY
34679: PPUSH
34680: CALL_OW 297
34684: ST_TO_ADDR
// end ; end ;
34685: GO 34574
34687: POP
34688: POP
// result := hex ;
34689: LD_ADDR_VAR 0 3
34693: PUSH
34694: LD_VAR 0 7
34698: ST_TO_ADDR
// end ;
34699: LD_VAR 0 3
34703: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34704: LD_INT 0
34706: PPUSH
34707: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34708: LD_VAR 0 1
34712: NOT
34713: PUSH
34714: LD_VAR 0 1
34718: PUSH
34719: LD_INT 21
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 23
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PPUSH
34743: CALL_OW 69
34747: IN
34748: NOT
34749: OR
34750: IFFALSE 34754
// exit ;
34752: GO 34801
// for i = 1 to 3 do
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: DOUBLE
34760: LD_INT 1
34762: DEC
34763: ST_TO_ADDR
34764: LD_INT 3
34766: PUSH
34767: FOR_TO
34768: IFFALSE 34799
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 250
34779: PPUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: CALL_OW 251
34789: PPUSH
34790: LD_INT 1
34792: PPUSH
34793: CALL_OW 453
34797: GO 34767
34799: POP
34800: POP
// end ;
34801: LD_VAR 0 2
34805: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34814: LD_VAR 0 1
34818: NOT
34819: PUSH
34820: LD_VAR 0 2
34824: NOT
34825: OR
34826: PUSH
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL_OW 314
34836: OR
34837: IFFALSE 34841
// exit ;
34839: GO 35282
// x := GetX ( enemy_unit ) ;
34841: LD_ADDR_VAR 0 7
34845: PUSH
34846: LD_VAR 0 2
34850: PPUSH
34851: CALL_OW 250
34855: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34856: LD_ADDR_VAR 0 8
34860: PUSH
34861: LD_VAR 0 2
34865: PPUSH
34866: CALL_OW 251
34870: ST_TO_ADDR
// if not x or not y then
34871: LD_VAR 0 7
34875: NOT
34876: PUSH
34877: LD_VAR 0 8
34881: NOT
34882: OR
34883: IFFALSE 34887
// exit ;
34885: GO 35282
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34887: LD_ADDR_VAR 0 6
34891: PUSH
34892: LD_VAR 0 7
34896: PPUSH
34897: LD_INT 0
34899: PPUSH
34900: LD_INT 4
34902: PPUSH
34903: CALL_OW 272
34907: PUSH
34908: LD_VAR 0 8
34912: PPUSH
34913: LD_INT 0
34915: PPUSH
34916: LD_INT 4
34918: PPUSH
34919: CALL_OW 273
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_VAR 0 7
34932: PPUSH
34933: LD_INT 1
34935: PPUSH
34936: LD_INT 4
34938: PPUSH
34939: CALL_OW 272
34943: PUSH
34944: LD_VAR 0 8
34948: PPUSH
34949: LD_INT 1
34951: PPUSH
34952: LD_INT 4
34954: PPUSH
34955: CALL_OW 273
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_VAR 0 7
34968: PPUSH
34969: LD_INT 2
34971: PPUSH
34972: LD_INT 4
34974: PPUSH
34975: CALL_OW 272
34979: PUSH
34980: LD_VAR 0 8
34984: PPUSH
34985: LD_INT 2
34987: PPUSH
34988: LD_INT 4
34990: PPUSH
34991: CALL_OW 273
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_VAR 0 7
35004: PPUSH
35005: LD_INT 3
35007: PPUSH
35008: LD_INT 4
35010: PPUSH
35011: CALL_OW 272
35015: PUSH
35016: LD_VAR 0 8
35020: PPUSH
35021: LD_INT 3
35023: PPUSH
35024: LD_INT 4
35026: PPUSH
35027: CALL_OW 273
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_VAR 0 7
35040: PPUSH
35041: LD_INT 4
35043: PPUSH
35044: LD_INT 4
35046: PPUSH
35047: CALL_OW 272
35051: PUSH
35052: LD_VAR 0 8
35056: PPUSH
35057: LD_INT 4
35059: PPUSH
35060: LD_INT 4
35062: PPUSH
35063: CALL_OW 273
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_VAR 0 7
35076: PPUSH
35077: LD_INT 5
35079: PPUSH
35080: LD_INT 4
35082: PPUSH
35083: CALL_OW 272
35087: PUSH
35088: LD_VAR 0 8
35092: PPUSH
35093: LD_INT 5
35095: PPUSH
35096: LD_INT 4
35098: PPUSH
35099: CALL_OW 273
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// for i = tmp downto 1 do
35116: LD_ADDR_VAR 0 4
35120: PUSH
35121: DOUBLE
35122: LD_VAR 0 6
35126: INC
35127: ST_TO_ADDR
35128: LD_INT 1
35130: PUSH
35131: FOR_DOWNTO
35132: IFFALSE 35233
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35134: LD_VAR 0 6
35138: PUSH
35139: LD_VAR 0 4
35143: ARRAY
35144: PUSH
35145: LD_INT 1
35147: ARRAY
35148: PPUSH
35149: LD_VAR 0 6
35153: PUSH
35154: LD_VAR 0 4
35158: ARRAY
35159: PUSH
35160: LD_INT 2
35162: ARRAY
35163: PPUSH
35164: CALL_OW 488
35168: NOT
35169: PUSH
35170: LD_VAR 0 6
35174: PUSH
35175: LD_VAR 0 4
35179: ARRAY
35180: PUSH
35181: LD_INT 1
35183: ARRAY
35184: PPUSH
35185: LD_VAR 0 6
35189: PUSH
35190: LD_VAR 0 4
35194: ARRAY
35195: PUSH
35196: LD_INT 2
35198: ARRAY
35199: PPUSH
35200: CALL_OW 428
35204: PUSH
35205: LD_INT 0
35207: NONEQUAL
35208: OR
35209: IFFALSE 35231
// tmp := Delete ( tmp , i ) ;
35211: LD_ADDR_VAR 0 6
35215: PUSH
35216: LD_VAR 0 6
35220: PPUSH
35221: LD_VAR 0 4
35225: PPUSH
35226: CALL_OW 3
35230: ST_TO_ADDR
35231: GO 35131
35233: POP
35234: POP
// j := GetClosestHex ( unit , tmp ) ;
35235: LD_ADDR_VAR 0 5
35239: PUSH
35240: LD_VAR 0 1
35244: PPUSH
35245: LD_VAR 0 6
35249: PPUSH
35250: CALL 34535 0 2
35254: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35255: LD_VAR 0 1
35259: PPUSH
35260: LD_VAR 0 5
35264: PUSH
35265: LD_INT 1
35267: ARRAY
35268: PPUSH
35269: LD_VAR 0 5
35273: PUSH
35274: LD_INT 2
35276: ARRAY
35277: PPUSH
35278: CALL_OW 111
// end ;
35282: LD_VAR 0 3
35286: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35287: LD_INT 0
35289: PPUSH
35290: PPUSH
35291: PPUSH
// uc_side = 0 ;
35292: LD_ADDR_OWVAR 20
35296: PUSH
35297: LD_INT 0
35299: ST_TO_ADDR
// uc_nation = 0 ;
35300: LD_ADDR_OWVAR 21
35304: PUSH
35305: LD_INT 0
35307: ST_TO_ADDR
// InitHc ;
35308: CALL_OW 19
// InitVc ;
35312: CALL_OW 20
// if mastodonts then
35316: LD_VAR 0 6
35320: IFFALSE 35387
// for i = 1 to mastodonts do
35322: LD_ADDR_VAR 0 11
35326: PUSH
35327: DOUBLE
35328: LD_INT 1
35330: DEC
35331: ST_TO_ADDR
35332: LD_VAR 0 6
35336: PUSH
35337: FOR_TO
35338: IFFALSE 35385
// begin vc_chassis := 31 ;
35340: LD_ADDR_OWVAR 37
35344: PUSH
35345: LD_INT 31
35347: ST_TO_ADDR
// vc_control := control_rider ;
35348: LD_ADDR_OWVAR 38
35352: PUSH
35353: LD_INT 4
35355: ST_TO_ADDR
// animal := CreateVehicle ;
35356: LD_ADDR_VAR 0 12
35360: PUSH
35361: CALL_OW 45
35365: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35366: LD_VAR 0 12
35370: PPUSH
35371: LD_VAR 0 8
35375: PPUSH
35376: LD_INT 0
35378: PPUSH
35379: CALL_OW 49
// end ;
35383: GO 35337
35385: POP
35386: POP
// if horses then
35387: LD_VAR 0 5
35391: IFFALSE 35458
// for i = 1 to horses do
35393: LD_ADDR_VAR 0 11
35397: PUSH
35398: DOUBLE
35399: LD_INT 1
35401: DEC
35402: ST_TO_ADDR
35403: LD_VAR 0 5
35407: PUSH
35408: FOR_TO
35409: IFFALSE 35456
// begin hc_class := 21 ;
35411: LD_ADDR_OWVAR 28
35415: PUSH
35416: LD_INT 21
35418: ST_TO_ADDR
// hc_gallery :=  ;
35419: LD_ADDR_OWVAR 33
35423: PUSH
35424: LD_STRING 
35426: ST_TO_ADDR
// animal := CreateHuman ;
35427: LD_ADDR_VAR 0 12
35431: PUSH
35432: CALL_OW 44
35436: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35437: LD_VAR 0 12
35441: PPUSH
35442: LD_VAR 0 8
35446: PPUSH
35447: LD_INT 0
35449: PPUSH
35450: CALL_OW 49
// end ;
35454: GO 35408
35456: POP
35457: POP
// if birds then
35458: LD_VAR 0 1
35462: IFFALSE 35529
// for i = 1 to birds do
35464: LD_ADDR_VAR 0 11
35468: PUSH
35469: DOUBLE
35470: LD_INT 1
35472: DEC
35473: ST_TO_ADDR
35474: LD_VAR 0 1
35478: PUSH
35479: FOR_TO
35480: IFFALSE 35527
// begin hc_class = 18 ;
35482: LD_ADDR_OWVAR 28
35486: PUSH
35487: LD_INT 18
35489: ST_TO_ADDR
// hc_gallery =  ;
35490: LD_ADDR_OWVAR 33
35494: PUSH
35495: LD_STRING 
35497: ST_TO_ADDR
// animal := CreateHuman ;
35498: LD_ADDR_VAR 0 12
35502: PUSH
35503: CALL_OW 44
35507: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35508: LD_VAR 0 12
35512: PPUSH
35513: LD_VAR 0 8
35517: PPUSH
35518: LD_INT 0
35520: PPUSH
35521: CALL_OW 49
// end ;
35525: GO 35479
35527: POP
35528: POP
// if tigers then
35529: LD_VAR 0 2
35533: IFFALSE 35617
// for i = 1 to tigers do
35535: LD_ADDR_VAR 0 11
35539: PUSH
35540: DOUBLE
35541: LD_INT 1
35543: DEC
35544: ST_TO_ADDR
35545: LD_VAR 0 2
35549: PUSH
35550: FOR_TO
35551: IFFALSE 35615
// begin hc_class = class_tiger ;
35553: LD_ADDR_OWVAR 28
35557: PUSH
35558: LD_INT 14
35560: ST_TO_ADDR
// hc_gallery =  ;
35561: LD_ADDR_OWVAR 33
35565: PUSH
35566: LD_STRING 
35568: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35569: LD_ADDR_OWVAR 35
35573: PUSH
35574: LD_INT 7
35576: NEG
35577: PPUSH
35578: LD_INT 7
35580: PPUSH
35581: CALL_OW 12
35585: ST_TO_ADDR
// animal := CreateHuman ;
35586: LD_ADDR_VAR 0 12
35590: PUSH
35591: CALL_OW 44
35595: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35596: LD_VAR 0 12
35600: PPUSH
35601: LD_VAR 0 8
35605: PPUSH
35606: LD_INT 0
35608: PPUSH
35609: CALL_OW 49
// end ;
35613: GO 35550
35615: POP
35616: POP
// if apemans then
35617: LD_VAR 0 3
35621: IFFALSE 35744
// for i = 1 to apemans do
35623: LD_ADDR_VAR 0 11
35627: PUSH
35628: DOUBLE
35629: LD_INT 1
35631: DEC
35632: ST_TO_ADDR
35633: LD_VAR 0 3
35637: PUSH
35638: FOR_TO
35639: IFFALSE 35742
// begin hc_class = class_apeman ;
35641: LD_ADDR_OWVAR 28
35645: PUSH
35646: LD_INT 12
35648: ST_TO_ADDR
// hc_gallery =  ;
35649: LD_ADDR_OWVAR 33
35653: PUSH
35654: LD_STRING 
35656: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
35657: LD_ADDR_OWVAR 35
35661: PUSH
35662: LD_INT 5
35664: NEG
35665: PPUSH
35666: LD_INT 5
35668: PPUSH
35669: CALL_OW 12
35673: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35674: LD_ADDR_OWVAR 31
35678: PUSH
35679: LD_INT 1
35681: PPUSH
35682: LD_INT 3
35684: PPUSH
35685: CALL_OW 12
35689: PUSH
35690: LD_INT 1
35692: PPUSH
35693: LD_INT 3
35695: PPUSH
35696: CALL_OW 12
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// animal := CreateHuman ;
35713: LD_ADDR_VAR 0 12
35717: PUSH
35718: CALL_OW 44
35722: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35723: LD_VAR 0 12
35727: PPUSH
35728: LD_VAR 0 8
35732: PPUSH
35733: LD_INT 0
35735: PPUSH
35736: CALL_OW 49
// end ;
35740: GO 35638
35742: POP
35743: POP
// if enchidnas then
35744: LD_VAR 0 4
35748: IFFALSE 35815
// for i = 1 to enchidnas do
35750: LD_ADDR_VAR 0 11
35754: PUSH
35755: DOUBLE
35756: LD_INT 1
35758: DEC
35759: ST_TO_ADDR
35760: LD_VAR 0 4
35764: PUSH
35765: FOR_TO
35766: IFFALSE 35813
// begin hc_class = 13 ;
35768: LD_ADDR_OWVAR 28
35772: PUSH
35773: LD_INT 13
35775: ST_TO_ADDR
// hc_gallery =  ;
35776: LD_ADDR_OWVAR 33
35780: PUSH
35781: LD_STRING 
35783: ST_TO_ADDR
// animal := CreateHuman ;
35784: LD_ADDR_VAR 0 12
35788: PUSH
35789: CALL_OW 44
35793: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
35794: LD_VAR 0 12
35798: PPUSH
35799: LD_VAR 0 8
35803: PPUSH
35804: LD_INT 0
35806: PPUSH
35807: CALL_OW 49
// end ;
35811: GO 35765
35813: POP
35814: POP
// if not wat_area then
35815: LD_VAR 0 9
35819: NOT
35820: IFFALSE 35824
// exit ;
35822: GO 35895
// if fishes then
35824: LD_VAR 0 7
35828: IFFALSE 35895
// for i = 1 to fishes do
35830: LD_ADDR_VAR 0 11
35834: PUSH
35835: DOUBLE
35836: LD_INT 1
35838: DEC
35839: ST_TO_ADDR
35840: LD_VAR 0 7
35844: PUSH
35845: FOR_TO
35846: IFFALSE 35893
// begin hc_class = 20 ;
35848: LD_ADDR_OWVAR 28
35852: PUSH
35853: LD_INT 20
35855: ST_TO_ADDR
// hc_gallery =  ;
35856: LD_ADDR_OWVAR 33
35860: PUSH
35861: LD_STRING 
35863: ST_TO_ADDR
// animal := CreateHuman ;
35864: LD_ADDR_VAR 0 12
35868: PUSH
35869: CALL_OW 44
35873: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
35874: LD_VAR 0 12
35878: PPUSH
35879: LD_VAR 0 9
35883: PPUSH
35884: LD_INT 0
35886: PPUSH
35887: CALL_OW 49
// end ;
35891: GO 35845
35893: POP
35894: POP
// end ;
35895: LD_VAR 0 10
35899: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
35900: LD_INT 0
35902: PPUSH
35903: PPUSH
35904: PPUSH
35905: PPUSH
35906: PPUSH
35907: PPUSH
35908: PPUSH
35909: PPUSH
35910: PPUSH
35911: PPUSH
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
35919: PPUSH
35920: PPUSH
35921: PPUSH
35922: PPUSH
35923: PPUSH
35924: PPUSH
35925: PPUSH
35926: PPUSH
35927: PPUSH
35928: PPUSH
35929: PPUSH
// if not list then
35930: LD_VAR 0 1
35934: NOT
35935: IFFALSE 35939
// exit ;
35937: GO 39236
// base := list [ 1 ] ;
35939: LD_ADDR_VAR 0 3
35943: PUSH
35944: LD_VAR 0 1
35948: PUSH
35949: LD_INT 1
35951: ARRAY
35952: ST_TO_ADDR
// group := list [ 2 ] ;
35953: LD_ADDR_VAR 0 4
35957: PUSH
35958: LD_VAR 0 1
35962: PUSH
35963: LD_INT 2
35965: ARRAY
35966: ST_TO_ADDR
// path := list [ 3 ] ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_VAR 0 1
35976: PUSH
35977: LD_INT 3
35979: ARRAY
35980: ST_TO_ADDR
// flags := list [ 4 ] ;
35981: LD_ADDR_VAR 0 6
35985: PUSH
35986: LD_VAR 0 1
35990: PUSH
35991: LD_INT 4
35993: ARRAY
35994: ST_TO_ADDR
// mined := [ ] ;
35995: LD_ADDR_VAR 0 27
35999: PUSH
36000: EMPTY
36001: ST_TO_ADDR
// bombed := [ ] ;
36002: LD_ADDR_VAR 0 28
36006: PUSH
36007: EMPTY
36008: ST_TO_ADDR
// if not group or not path then
36009: LD_VAR 0 4
36013: NOT
36014: PUSH
36015: LD_VAR 0 5
36019: NOT
36020: OR
36021: IFFALSE 36025
// exit ;
36023: GO 39236
// if flags then
36025: LD_VAR 0 6
36029: IFFALSE 36173
// begin f_ignore_area := flags [ 1 ] ;
36031: LD_ADDR_VAR 0 17
36035: PUSH
36036: LD_VAR 0 6
36040: PUSH
36041: LD_INT 1
36043: ARRAY
36044: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
36045: LD_ADDR_VAR 0 18
36049: PUSH
36050: LD_VAR 0 6
36054: PUSH
36055: LD_INT 2
36057: ARRAY
36058: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
36059: LD_ADDR_VAR 0 19
36063: PUSH
36064: LD_VAR 0 6
36068: PUSH
36069: LD_INT 3
36071: ARRAY
36072: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
36073: LD_ADDR_VAR 0 20
36077: PUSH
36078: LD_VAR 0 6
36082: PUSH
36083: LD_INT 4
36085: ARRAY
36086: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
36087: LD_ADDR_VAR 0 21
36091: PUSH
36092: LD_VAR 0 6
36096: PUSH
36097: LD_INT 5
36099: ARRAY
36100: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
36101: LD_ADDR_VAR 0 22
36105: PUSH
36106: LD_VAR 0 6
36110: PUSH
36111: LD_INT 6
36113: ARRAY
36114: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
36115: LD_ADDR_VAR 0 23
36119: PUSH
36120: LD_VAR 0 6
36124: PUSH
36125: LD_INT 7
36127: ARRAY
36128: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
36129: LD_ADDR_VAR 0 24
36133: PUSH
36134: LD_VAR 0 6
36138: PUSH
36139: LD_INT 8
36141: ARRAY
36142: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
36143: LD_ADDR_VAR 0 25
36147: PUSH
36148: LD_VAR 0 6
36152: PUSH
36153: LD_INT 9
36155: ARRAY
36156: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
36157: LD_ADDR_VAR 0 26
36161: PUSH
36162: LD_VAR 0 6
36166: PUSH
36167: LD_INT 10
36169: ARRAY
36170: ST_TO_ADDR
// end else
36171: GO 36253
// begin f_ignore_area := false ;
36173: LD_ADDR_VAR 0 17
36177: PUSH
36178: LD_INT 0
36180: ST_TO_ADDR
// f_capture := false ;
36181: LD_ADDR_VAR 0 18
36185: PUSH
36186: LD_INT 0
36188: ST_TO_ADDR
// f_ignore_civ := false ;
36189: LD_ADDR_VAR 0 19
36193: PUSH
36194: LD_INT 0
36196: ST_TO_ADDR
// f_murder := false ;
36197: LD_ADDR_VAR 0 20
36201: PUSH
36202: LD_INT 0
36204: ST_TO_ADDR
// f_mines := false ;
36205: LD_ADDR_VAR 0 21
36209: PUSH
36210: LD_INT 0
36212: ST_TO_ADDR
// f_repair := false ;
36213: LD_ADDR_VAR 0 22
36217: PUSH
36218: LD_INT 0
36220: ST_TO_ADDR
// f_heal := false ;
36221: LD_ADDR_VAR 0 23
36225: PUSH
36226: LD_INT 0
36228: ST_TO_ADDR
// f_spacetime := false ;
36229: LD_ADDR_VAR 0 24
36233: PUSH
36234: LD_INT 0
36236: ST_TO_ADDR
// f_attack_depot := false ;
36237: LD_ADDR_VAR 0 25
36241: PUSH
36242: LD_INT 0
36244: ST_TO_ADDR
// f_crawl := false ;
36245: LD_ADDR_VAR 0 26
36249: PUSH
36250: LD_INT 0
36252: ST_TO_ADDR
// end ; units_path := [ ] ;
36253: LD_ADDR_VAR 0 16
36257: PUSH
36258: EMPTY
36259: ST_TO_ADDR
// for i = 1 to group do
36260: LD_ADDR_VAR 0 7
36264: PUSH
36265: DOUBLE
36266: LD_INT 1
36268: DEC
36269: ST_TO_ADDR
36270: LD_VAR 0 4
36274: PUSH
36275: FOR_TO
36276: IFFALSE 36305
// begin units_path := Replace ( units_path , i , path ) ;
36278: LD_ADDR_VAR 0 16
36282: PUSH
36283: LD_VAR 0 16
36287: PPUSH
36288: LD_VAR 0 7
36292: PPUSH
36293: LD_VAR 0 5
36297: PPUSH
36298: CALL_OW 1
36302: ST_TO_ADDR
// end ;
36303: GO 36275
36305: POP
36306: POP
// repeat for i = group downto 1 do
36307: LD_ADDR_VAR 0 7
36311: PUSH
36312: DOUBLE
36313: LD_VAR 0 4
36317: INC
36318: ST_TO_ADDR
36319: LD_INT 1
36321: PUSH
36322: FOR_DOWNTO
36323: IFFALSE 39218
// begin wait ( 0 0$1 ) ;
36325: LD_INT 35
36327: PPUSH
36328: CALL_OW 67
// tmp := [ ] ;
36332: LD_ADDR_VAR 0 14
36336: PUSH
36337: EMPTY
36338: ST_TO_ADDR
// attacking := false ;
36339: LD_ADDR_VAR 0 29
36343: PUSH
36344: LD_INT 0
36346: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
36347: LD_VAR 0 4
36351: PUSH
36352: LD_VAR 0 7
36356: ARRAY
36357: PPUSH
36358: CALL_OW 301
36362: PUSH
36363: LD_VAR 0 4
36367: PUSH
36368: LD_VAR 0 7
36372: ARRAY
36373: NOT
36374: OR
36375: IFFALSE 36419
// begin group := Delete ( group , i ) ;
36377: LD_ADDR_VAR 0 4
36381: PUSH
36382: LD_VAR 0 4
36386: PPUSH
36387: LD_VAR 0 7
36391: PPUSH
36392: CALL_OW 3
36396: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
36397: LD_ADDR_VAR 0 16
36401: PUSH
36402: LD_VAR 0 16
36406: PPUSH
36407: LD_VAR 0 7
36411: PPUSH
36412: CALL_OW 3
36416: ST_TO_ADDR
// continue ;
36417: GO 36322
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
36419: LD_VAR 0 4
36423: PUSH
36424: LD_VAR 0 7
36428: ARRAY
36429: PPUSH
36430: LD_INT 10
36432: PPUSH
36433: CALL 34387 0 2
36437: NOT
36438: PUSH
36439: LD_VAR 0 16
36443: PUSH
36444: LD_VAR 0 7
36448: ARRAY
36449: PUSH
36450: EMPTY
36451: EQUAL
36452: NOT
36453: AND
36454: IFFALSE 36720
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
36456: LD_VAR 0 4
36460: PUSH
36461: LD_VAR 0 7
36465: ARRAY
36466: PPUSH
36467: CALL_OW 262
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: IN
36482: IFFALSE 36523
// if GetFuel ( group [ i ] ) < 10 then
36484: LD_VAR 0 4
36488: PUSH
36489: LD_VAR 0 7
36493: ARRAY
36494: PPUSH
36495: CALL_OW 261
36499: PUSH
36500: LD_INT 10
36502: LESS
36503: IFFALSE 36523
// SetFuel ( group [ i ] , 12 ) ;
36505: LD_VAR 0 4
36509: PUSH
36510: LD_VAR 0 7
36514: ARRAY
36515: PPUSH
36516: LD_INT 12
36518: PPUSH
36519: CALL_OW 240
// if units_path [ i ] then
36523: LD_VAR 0 16
36527: PUSH
36528: LD_VAR 0 7
36532: ARRAY
36533: IFFALSE 36718
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
36535: LD_VAR 0 4
36539: PUSH
36540: LD_VAR 0 7
36544: ARRAY
36545: PPUSH
36546: LD_VAR 0 16
36550: PUSH
36551: LD_VAR 0 7
36555: ARRAY
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: PUSH
36561: LD_INT 1
36563: ARRAY
36564: PPUSH
36565: LD_VAR 0 16
36569: PUSH
36570: LD_VAR 0 7
36574: ARRAY
36575: PUSH
36576: LD_INT 1
36578: ARRAY
36579: PUSH
36580: LD_INT 2
36582: ARRAY
36583: PPUSH
36584: CALL_OW 297
36588: PUSH
36589: LD_INT 6
36591: GREATER
36592: IFFALSE 36667
// begin if not HasTask ( group [ i ] ) then
36594: LD_VAR 0 4
36598: PUSH
36599: LD_VAR 0 7
36603: ARRAY
36604: PPUSH
36605: CALL_OW 314
36609: NOT
36610: IFFALSE 36665
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
36612: LD_VAR 0 4
36616: PUSH
36617: LD_VAR 0 7
36621: ARRAY
36622: PPUSH
36623: LD_VAR 0 16
36627: PUSH
36628: LD_VAR 0 7
36632: ARRAY
36633: PUSH
36634: LD_INT 1
36636: ARRAY
36637: PUSH
36638: LD_INT 1
36640: ARRAY
36641: PPUSH
36642: LD_VAR 0 16
36646: PUSH
36647: LD_VAR 0 7
36651: ARRAY
36652: PUSH
36653: LD_INT 1
36655: ARRAY
36656: PUSH
36657: LD_INT 2
36659: ARRAY
36660: PPUSH
36661: CALL_OW 114
// end else
36665: GO 36718
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
36667: LD_ADDR_VAR 0 15
36671: PUSH
36672: LD_VAR 0 16
36676: PUSH
36677: LD_VAR 0 7
36681: ARRAY
36682: PPUSH
36683: LD_INT 1
36685: PPUSH
36686: CALL_OW 3
36690: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
36691: LD_ADDR_VAR 0 16
36695: PUSH
36696: LD_VAR 0 16
36700: PPUSH
36701: LD_VAR 0 7
36705: PPUSH
36706: LD_VAR 0 15
36710: PPUSH
36711: CALL_OW 1
36715: ST_TO_ADDR
// continue ;
36716: GO 36322
// end ; end ; end else
36718: GO 39216
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
36720: LD_ADDR_VAR 0 14
36724: PUSH
36725: LD_INT 81
36727: PUSH
36728: LD_VAR 0 4
36732: PUSH
36733: LD_VAR 0 7
36737: ARRAY
36738: PPUSH
36739: CALL_OW 255
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PPUSH
36748: CALL_OW 69
36752: ST_TO_ADDR
// if not tmp then
36753: LD_VAR 0 14
36757: NOT
36758: IFFALSE 36762
// continue ;
36760: GO 36322
// if f_ignore_area then
36762: LD_VAR 0 17
36766: IFFALSE 36854
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
36768: LD_ADDR_VAR 0 15
36772: PUSH
36773: LD_VAR 0 14
36777: PPUSH
36778: LD_INT 3
36780: PUSH
36781: LD_INT 92
36783: PUSH
36784: LD_VAR 0 17
36788: PUSH
36789: LD_INT 1
36791: ARRAY
36792: PUSH
36793: LD_VAR 0 17
36797: PUSH
36798: LD_INT 2
36800: ARRAY
36801: PUSH
36802: LD_VAR 0 17
36806: PUSH
36807: LD_INT 3
36809: ARRAY
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PPUSH
36821: CALL_OW 72
36825: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
36826: LD_VAR 0 14
36830: PUSH
36831: LD_VAR 0 15
36835: DIFF
36836: IFFALSE 36854
// tmp := tmp diff tmp2 ;
36838: LD_ADDR_VAR 0 14
36842: PUSH
36843: LD_VAR 0 14
36847: PUSH
36848: LD_VAR 0 15
36852: DIFF
36853: ST_TO_ADDR
// end ; if not f_murder then
36854: LD_VAR 0 20
36858: NOT
36859: IFFALSE 36917
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
36861: LD_ADDR_VAR 0 15
36865: PUSH
36866: LD_VAR 0 14
36870: PPUSH
36871: LD_INT 3
36873: PUSH
36874: LD_INT 50
36876: PUSH
36877: EMPTY
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PPUSH
36884: CALL_OW 72
36888: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
36889: LD_VAR 0 14
36893: PUSH
36894: LD_VAR 0 15
36898: DIFF
36899: IFFALSE 36917
// tmp := tmp diff tmp2 ;
36901: LD_ADDR_VAR 0 14
36905: PUSH
36906: LD_VAR 0 14
36910: PUSH
36911: LD_VAR 0 15
36915: DIFF
36916: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
36917: LD_ADDR_VAR 0 14
36921: PUSH
36922: LD_VAR 0 4
36926: PUSH
36927: LD_VAR 0 7
36931: ARRAY
36932: PPUSH
36933: LD_VAR 0 14
36937: PPUSH
36938: LD_INT 1
36940: PPUSH
36941: LD_INT 1
36943: PPUSH
36944: CALL 8419 0 4
36948: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
36949: LD_VAR 0 4
36953: PUSH
36954: LD_VAR 0 7
36958: ARRAY
36959: PPUSH
36960: CALL_OW 257
36964: PUSH
36965: LD_INT 1
36967: EQUAL
36968: IFFALSE 37416
// begin if WantPlant ( group [ i ] ) then
36970: LD_VAR 0 4
36974: PUSH
36975: LD_VAR 0 7
36979: ARRAY
36980: PPUSH
36981: CALL 7887 0 1
36985: IFFALSE 36989
// continue ;
36987: GO 36322
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
36989: LD_VAR 0 18
36993: PUSH
36994: LD_VAR 0 4
36998: PUSH
36999: LD_VAR 0 7
37003: ARRAY
37004: PPUSH
37005: CALL_OW 310
37009: NOT
37010: AND
37011: PUSH
37012: LD_VAR 0 14
37016: PUSH
37017: LD_INT 1
37019: ARRAY
37020: PUSH
37021: LD_VAR 0 14
37025: PPUSH
37026: LD_INT 21
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 58
37038: PUSH
37039: EMPTY
37040: LIST
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PPUSH
37046: CALL_OW 72
37050: IN
37051: AND
37052: IFFALSE 37088
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
37054: LD_VAR 0 4
37058: PUSH
37059: LD_VAR 0 7
37063: ARRAY
37064: PPUSH
37065: LD_VAR 0 14
37069: PUSH
37070: LD_INT 1
37072: ARRAY
37073: PPUSH
37074: CALL_OW 120
// attacking := true ;
37078: LD_ADDR_VAR 0 29
37082: PUSH
37083: LD_INT 1
37085: ST_TO_ADDR
// continue ;
37086: GO 36322
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
37088: LD_VAR 0 26
37092: PUSH
37093: LD_VAR 0 4
37097: PUSH
37098: LD_VAR 0 7
37102: ARRAY
37103: PPUSH
37104: CALL_OW 257
37108: PUSH
37109: LD_INT 1
37111: EQUAL
37112: AND
37113: PUSH
37114: LD_VAR 0 4
37118: PUSH
37119: LD_VAR 0 7
37123: ARRAY
37124: PPUSH
37125: CALL_OW 256
37129: PUSH
37130: LD_INT 800
37132: LESS
37133: AND
37134: PUSH
37135: LD_VAR 0 4
37139: PUSH
37140: LD_VAR 0 7
37144: ARRAY
37145: PPUSH
37146: CALL_OW 318
37150: NOT
37151: AND
37152: IFFALSE 37169
// ComCrawl ( group [ i ] ) ;
37154: LD_VAR 0 4
37158: PUSH
37159: LD_VAR 0 7
37163: ARRAY
37164: PPUSH
37165: CALL_OW 137
// if f_mines then
37169: LD_VAR 0 21
37173: IFFALSE 37416
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
37175: LD_VAR 0 14
37179: PUSH
37180: LD_INT 1
37182: ARRAY
37183: PPUSH
37184: CALL_OW 247
37188: PUSH
37189: LD_INT 3
37191: EQUAL
37192: PUSH
37193: LD_VAR 0 14
37197: PUSH
37198: LD_INT 1
37200: ARRAY
37201: PUSH
37202: LD_VAR 0 27
37206: IN
37207: NOT
37208: AND
37209: IFFALSE 37416
// begin x := GetX ( tmp [ 1 ] ) ;
37211: LD_ADDR_VAR 0 10
37215: PUSH
37216: LD_VAR 0 14
37220: PUSH
37221: LD_INT 1
37223: ARRAY
37224: PPUSH
37225: CALL_OW 250
37229: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
37230: LD_ADDR_VAR 0 11
37234: PUSH
37235: LD_VAR 0 14
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PPUSH
37244: CALL_OW 251
37248: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
37249: LD_ADDR_VAR 0 12
37253: PUSH
37254: LD_VAR 0 4
37258: PUSH
37259: LD_VAR 0 7
37263: ARRAY
37264: PPUSH
37265: CALL 34472 0 1
37269: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
37270: LD_VAR 0 4
37274: PUSH
37275: LD_VAR 0 7
37279: ARRAY
37280: PPUSH
37281: LD_VAR 0 10
37285: PPUSH
37286: LD_VAR 0 11
37290: PPUSH
37291: LD_VAR 0 14
37295: PUSH
37296: LD_INT 1
37298: ARRAY
37299: PPUSH
37300: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
37304: LD_VAR 0 4
37308: PUSH
37309: LD_VAR 0 7
37313: ARRAY
37314: PPUSH
37315: LD_VAR 0 10
37319: PPUSH
37320: LD_VAR 0 12
37324: PPUSH
37325: LD_INT 7
37327: PPUSH
37328: CALL_OW 272
37332: PPUSH
37333: LD_VAR 0 11
37337: PPUSH
37338: LD_VAR 0 12
37342: PPUSH
37343: LD_INT 7
37345: PPUSH
37346: CALL_OW 273
37350: PPUSH
37351: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
37355: LD_VAR 0 4
37359: PUSH
37360: LD_VAR 0 7
37364: ARRAY
37365: PPUSH
37366: LD_INT 71
37368: PPUSH
37369: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
37373: LD_ADDR_VAR 0 27
37377: PUSH
37378: LD_VAR 0 27
37382: PPUSH
37383: LD_VAR 0 27
37387: PUSH
37388: LD_INT 1
37390: PLUS
37391: PPUSH
37392: LD_VAR 0 14
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: PPUSH
37401: CALL_OW 1
37405: ST_TO_ADDR
// attacking := true ;
37406: LD_ADDR_VAR 0 29
37410: PUSH
37411: LD_INT 1
37413: ST_TO_ADDR
// continue ;
37414: GO 36322
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
37416: LD_VAR 0 4
37420: PUSH
37421: LD_VAR 0 7
37425: ARRAY
37426: PPUSH
37427: CALL_OW 257
37431: PUSH
37432: LD_INT 17
37434: EQUAL
37435: PUSH
37436: LD_VAR 0 4
37440: PUSH
37441: LD_VAR 0 7
37445: ARRAY
37446: PPUSH
37447: CALL_OW 110
37451: PUSH
37452: LD_INT 71
37454: EQUAL
37455: NOT
37456: AND
37457: IFFALSE 37603
// begin attacking := false ;
37459: LD_ADDR_VAR 0 29
37463: PUSH
37464: LD_INT 0
37466: ST_TO_ADDR
// k := 5 ;
37467: LD_ADDR_VAR 0 9
37471: PUSH
37472: LD_INT 5
37474: ST_TO_ADDR
// if tmp < k then
37475: LD_VAR 0 14
37479: PUSH
37480: LD_VAR 0 9
37484: LESS
37485: IFFALSE 37497
// k := tmp ;
37487: LD_ADDR_VAR 0 9
37491: PUSH
37492: LD_VAR 0 14
37496: ST_TO_ADDR
// for j = 1 to k do
37497: LD_ADDR_VAR 0 8
37501: PUSH
37502: DOUBLE
37503: LD_INT 1
37505: DEC
37506: ST_TO_ADDR
37507: LD_VAR 0 9
37511: PUSH
37512: FOR_TO
37513: IFFALSE 37601
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
37515: LD_VAR 0 14
37519: PUSH
37520: LD_VAR 0 8
37524: ARRAY
37525: PUSH
37526: LD_VAR 0 14
37530: PPUSH
37531: LD_INT 58
37533: PUSH
37534: EMPTY
37535: LIST
37536: PPUSH
37537: CALL_OW 72
37541: IN
37542: NOT
37543: IFFALSE 37599
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
37545: LD_VAR 0 4
37549: PUSH
37550: LD_VAR 0 7
37554: ARRAY
37555: PPUSH
37556: LD_VAR 0 14
37560: PUSH
37561: LD_VAR 0 8
37565: ARRAY
37566: PPUSH
37567: CALL_OW 115
// attacking := true ;
37571: LD_ADDR_VAR 0 29
37575: PUSH
37576: LD_INT 1
37578: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
37579: LD_VAR 0 4
37583: PUSH
37584: LD_VAR 0 7
37588: ARRAY
37589: PPUSH
37590: LD_INT 71
37592: PPUSH
37593: CALL_OW 109
// continue ;
37597: GO 37512
// end ; end ;
37599: GO 37512
37601: POP
37602: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
37603: LD_VAR 0 4
37607: PUSH
37608: LD_VAR 0 7
37612: ARRAY
37613: PPUSH
37614: CALL_OW 257
37618: PUSH
37619: LD_INT 8
37621: EQUAL
37622: PUSH
37623: LD_VAR 0 4
37627: PUSH
37628: LD_VAR 0 7
37632: ARRAY
37633: PPUSH
37634: CALL_OW 264
37638: PUSH
37639: LD_INT 28
37641: PUSH
37642: LD_INT 45
37644: PUSH
37645: LD_INT 7
37647: PUSH
37648: LD_INT 47
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: IN
37657: OR
37658: IFFALSE 37888
// begin attacking := false ;
37660: LD_ADDR_VAR 0 29
37664: PUSH
37665: LD_INT 0
37667: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
37668: LD_VAR 0 14
37672: PUSH
37673: LD_INT 1
37675: ARRAY
37676: PPUSH
37677: CALL_OW 266
37681: PUSH
37682: LD_INT 32
37684: PUSH
37685: LD_INT 31
37687: PUSH
37688: LD_INT 33
37690: PUSH
37691: LD_INT 4
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: IN
37704: IFFALSE 37888
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
37706: LD_ADDR_VAR 0 9
37710: PUSH
37711: LD_VAR 0 14
37715: PUSH
37716: LD_INT 1
37718: ARRAY
37719: PPUSH
37720: CALL_OW 266
37724: PPUSH
37725: LD_VAR 0 14
37729: PUSH
37730: LD_INT 1
37732: ARRAY
37733: PPUSH
37734: CALL_OW 250
37738: PPUSH
37739: LD_VAR 0 14
37743: PUSH
37744: LD_INT 1
37746: ARRAY
37747: PPUSH
37748: CALL_OW 251
37752: PPUSH
37753: LD_VAR 0 14
37757: PUSH
37758: LD_INT 1
37760: ARRAY
37761: PPUSH
37762: CALL_OW 254
37766: PPUSH
37767: LD_VAR 0 14
37771: PUSH
37772: LD_INT 1
37774: ARRAY
37775: PPUSH
37776: CALL_OW 248
37780: PPUSH
37781: LD_INT 0
37783: PPUSH
37784: CALL 15848 0 6
37788: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
37789: LD_ADDR_VAR 0 8
37793: PUSH
37794: LD_VAR 0 4
37798: PUSH
37799: LD_VAR 0 7
37803: ARRAY
37804: PPUSH
37805: LD_VAR 0 9
37809: PPUSH
37810: CALL 34535 0 2
37814: ST_TO_ADDR
// if j then
37815: LD_VAR 0 8
37819: IFFALSE 37888
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37821: LD_VAR 0 8
37825: PUSH
37826: LD_INT 1
37828: ARRAY
37829: PPUSH
37830: LD_VAR 0 8
37834: PUSH
37835: LD_INT 2
37837: ARRAY
37838: PPUSH
37839: CALL_OW 488
37843: IFFALSE 37888
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
37845: LD_VAR 0 4
37849: PUSH
37850: LD_VAR 0 7
37854: ARRAY
37855: PPUSH
37856: LD_VAR 0 8
37860: PUSH
37861: LD_INT 1
37863: ARRAY
37864: PPUSH
37865: LD_VAR 0 8
37869: PUSH
37870: LD_INT 2
37872: ARRAY
37873: PPUSH
37874: CALL_OW 116
// attacking := true ;
37878: LD_ADDR_VAR 0 29
37882: PUSH
37883: LD_INT 1
37885: ST_TO_ADDR
// continue ;
37886: GO 36322
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
37888: LD_VAR 0 4
37892: PUSH
37893: LD_VAR 0 7
37897: ARRAY
37898: PPUSH
37899: CALL_OW 265
37903: PUSH
37904: LD_INT 11
37906: EQUAL
37907: IFFALSE 38185
// begin k := 10 ;
37909: LD_ADDR_VAR 0 9
37913: PUSH
37914: LD_INT 10
37916: ST_TO_ADDR
// x := 0 ;
37917: LD_ADDR_VAR 0 10
37921: PUSH
37922: LD_INT 0
37924: ST_TO_ADDR
// if tmp < k then
37925: LD_VAR 0 14
37929: PUSH
37930: LD_VAR 0 9
37934: LESS
37935: IFFALSE 37947
// k := tmp ;
37937: LD_ADDR_VAR 0 9
37941: PUSH
37942: LD_VAR 0 14
37946: ST_TO_ADDR
// for j = k downto 1 do
37947: LD_ADDR_VAR 0 8
37951: PUSH
37952: DOUBLE
37953: LD_VAR 0 9
37957: INC
37958: ST_TO_ADDR
37959: LD_INT 1
37961: PUSH
37962: FOR_DOWNTO
37963: IFFALSE 38038
// begin if GetType ( tmp [ j ] ) = unit_human then
37965: LD_VAR 0 14
37969: PUSH
37970: LD_VAR 0 8
37974: ARRAY
37975: PPUSH
37976: CALL_OW 247
37980: PUSH
37981: LD_INT 1
37983: EQUAL
37984: IFFALSE 38036
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
37986: LD_VAR 0 4
37990: PUSH
37991: LD_VAR 0 7
37995: ARRAY
37996: PPUSH
37997: LD_VAR 0 14
38001: PUSH
38002: LD_VAR 0 8
38006: ARRAY
38007: PPUSH
38008: CALL 34806 0 2
// x := tmp [ j ] ;
38012: LD_ADDR_VAR 0 10
38016: PUSH
38017: LD_VAR 0 14
38021: PUSH
38022: LD_VAR 0 8
38026: ARRAY
38027: ST_TO_ADDR
// attacking := true ;
38028: LD_ADDR_VAR 0 29
38032: PUSH
38033: LD_INT 1
38035: ST_TO_ADDR
// end ; end ;
38036: GO 37962
38038: POP
38039: POP
// if not x then
38040: LD_VAR 0 10
38044: NOT
38045: IFFALSE 38185
// begin attacking := true ;
38047: LD_ADDR_VAR 0 29
38051: PUSH
38052: LD_INT 1
38054: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
38055: LD_VAR 0 4
38059: PUSH
38060: LD_VAR 0 7
38064: ARRAY
38065: PPUSH
38066: CALL_OW 250
38070: PPUSH
38071: LD_VAR 0 4
38075: PUSH
38076: LD_VAR 0 7
38080: ARRAY
38081: PPUSH
38082: CALL_OW 251
38086: PPUSH
38087: CALL_OW 546
38091: PUSH
38092: LD_INT 2
38094: ARRAY
38095: PUSH
38096: LD_VAR 0 14
38100: PUSH
38101: LD_INT 1
38103: ARRAY
38104: PPUSH
38105: CALL_OW 250
38109: PPUSH
38110: LD_VAR 0 14
38114: PUSH
38115: LD_INT 1
38117: ARRAY
38118: PPUSH
38119: CALL_OW 251
38123: PPUSH
38124: CALL_OW 546
38128: PUSH
38129: LD_INT 2
38131: ARRAY
38132: EQUAL
38133: IFFALSE 38161
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
38135: LD_VAR 0 4
38139: PUSH
38140: LD_VAR 0 7
38144: ARRAY
38145: PPUSH
38146: LD_VAR 0 14
38150: PUSH
38151: LD_INT 1
38153: ARRAY
38154: PPUSH
38155: CALL 34806 0 2
38159: GO 38185
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
38161: LD_VAR 0 4
38165: PUSH
38166: LD_VAR 0 7
38170: ARRAY
38171: PPUSH
38172: LD_VAR 0 14
38176: PUSH
38177: LD_INT 1
38179: ARRAY
38180: PPUSH
38181: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
38185: LD_VAR 0 4
38189: PUSH
38190: LD_VAR 0 7
38194: ARRAY
38195: PPUSH
38196: CALL_OW 264
38200: PUSH
38201: LD_INT 29
38203: EQUAL
38204: IFFALSE 38570
// begin if WantsToAttack ( group [ i ] ) in bombed then
38206: LD_VAR 0 4
38210: PUSH
38211: LD_VAR 0 7
38215: ARRAY
38216: PPUSH
38217: CALL_OW 319
38221: PUSH
38222: LD_VAR 0 28
38226: IN
38227: IFFALSE 38231
// continue ;
38229: GO 36322
// k := 8 ;
38231: LD_ADDR_VAR 0 9
38235: PUSH
38236: LD_INT 8
38238: ST_TO_ADDR
// x := 0 ;
38239: LD_ADDR_VAR 0 10
38243: PUSH
38244: LD_INT 0
38246: ST_TO_ADDR
// if tmp < k then
38247: LD_VAR 0 14
38251: PUSH
38252: LD_VAR 0 9
38256: LESS
38257: IFFALSE 38269
// k := tmp ;
38259: LD_ADDR_VAR 0 9
38263: PUSH
38264: LD_VAR 0 14
38268: ST_TO_ADDR
// for j = 1 to k do
38269: LD_ADDR_VAR 0 8
38273: PUSH
38274: DOUBLE
38275: LD_INT 1
38277: DEC
38278: ST_TO_ADDR
38279: LD_VAR 0 9
38283: PUSH
38284: FOR_TO
38285: IFFALSE 38417
// begin if GetType ( tmp [ j ] ) = unit_building then
38287: LD_VAR 0 14
38291: PUSH
38292: LD_VAR 0 8
38296: ARRAY
38297: PPUSH
38298: CALL_OW 247
38302: PUSH
38303: LD_INT 3
38305: EQUAL
38306: IFFALSE 38415
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
38308: LD_VAR 0 14
38312: PUSH
38313: LD_VAR 0 8
38317: ARRAY
38318: PUSH
38319: LD_VAR 0 28
38323: IN
38324: NOT
38325: PUSH
38326: LD_VAR 0 14
38330: PUSH
38331: LD_VAR 0 8
38335: ARRAY
38336: PPUSH
38337: CALL_OW 313
38341: AND
38342: IFFALSE 38415
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
38344: LD_VAR 0 4
38348: PUSH
38349: LD_VAR 0 7
38353: ARRAY
38354: PPUSH
38355: LD_VAR 0 14
38359: PUSH
38360: LD_VAR 0 8
38364: ARRAY
38365: PPUSH
38366: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
38370: LD_ADDR_VAR 0 28
38374: PUSH
38375: LD_VAR 0 28
38379: PPUSH
38380: LD_VAR 0 28
38384: PUSH
38385: LD_INT 1
38387: PLUS
38388: PPUSH
38389: LD_VAR 0 14
38393: PUSH
38394: LD_VAR 0 8
38398: ARRAY
38399: PPUSH
38400: CALL_OW 1
38404: ST_TO_ADDR
// attacking := true ;
38405: LD_ADDR_VAR 0 29
38409: PUSH
38410: LD_INT 1
38412: ST_TO_ADDR
// break ;
38413: GO 38417
// end ; end ;
38415: GO 38284
38417: POP
38418: POP
// if not attacking and f_attack_depot then
38419: LD_VAR 0 29
38423: NOT
38424: PUSH
38425: LD_VAR 0 25
38429: AND
38430: IFFALSE 38525
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38432: LD_ADDR_VAR 0 13
38436: PUSH
38437: LD_VAR 0 14
38441: PPUSH
38442: LD_INT 2
38444: PUSH
38445: LD_INT 30
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 30
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: PPUSH
38470: CALL_OW 72
38474: ST_TO_ADDR
// if z then
38475: LD_VAR 0 13
38479: IFFALSE 38525
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
38481: LD_VAR 0 4
38485: PUSH
38486: LD_VAR 0 7
38490: ARRAY
38491: PPUSH
38492: LD_VAR 0 13
38496: PPUSH
38497: LD_VAR 0 4
38501: PUSH
38502: LD_VAR 0 7
38506: ARRAY
38507: PPUSH
38508: CALL_OW 74
38512: PPUSH
38513: CALL_OW 115
// attacking := true ;
38517: LD_ADDR_VAR 0 29
38521: PUSH
38522: LD_INT 1
38524: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
38525: LD_VAR 0 4
38529: PUSH
38530: LD_VAR 0 7
38534: ARRAY
38535: PPUSH
38536: CALL_OW 256
38540: PUSH
38541: LD_INT 500
38543: LESS
38544: IFFALSE 38570
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
38546: LD_VAR 0 4
38550: PUSH
38551: LD_VAR 0 7
38555: ARRAY
38556: PPUSH
38557: LD_VAR 0 14
38561: PUSH
38562: LD_INT 1
38564: ARRAY
38565: PPUSH
38566: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
38570: LD_VAR 0 4
38574: PUSH
38575: LD_VAR 0 7
38579: ARRAY
38580: PPUSH
38581: CALL_OW 256
38585: PUSH
38586: LD_INT 250
38588: LESS
38589: PUSH
38590: LD_VAR 0 4
38594: PUSH
38595: LD_VAR 0 7
38599: ARRAY
38600: PUSH
38601: LD_INT 21
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 23
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PPUSH
38625: CALL_OW 69
38629: IN
38630: AND
38631: IFFALSE 38756
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
38633: LD_ADDR_VAR 0 9
38637: PUSH
38638: LD_OWVAR 3
38642: PUSH
38643: LD_VAR 0 4
38647: PUSH
38648: LD_VAR 0 7
38652: ARRAY
38653: DIFF
38654: PPUSH
38655: LD_VAR 0 4
38659: PUSH
38660: LD_VAR 0 7
38664: ARRAY
38665: PPUSH
38666: CALL_OW 74
38670: ST_TO_ADDR
// if not k then
38671: LD_VAR 0 9
38675: NOT
38676: IFFALSE 38680
// continue ;
38678: GO 36322
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
38680: LD_VAR 0 9
38684: PUSH
38685: LD_INT 81
38687: PUSH
38688: LD_VAR 0 4
38692: PUSH
38693: LD_VAR 0 7
38697: ARRAY
38698: PPUSH
38699: CALL_OW 255
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PPUSH
38708: CALL_OW 69
38712: IN
38713: PUSH
38714: LD_VAR 0 9
38718: PPUSH
38719: LD_VAR 0 4
38723: PUSH
38724: LD_VAR 0 7
38728: ARRAY
38729: PPUSH
38730: CALL_OW 296
38734: PUSH
38735: LD_INT 5
38737: LESS
38738: AND
38739: IFFALSE 38756
// ComAutodestruct ( group [ i ] ) ;
38741: LD_VAR 0 4
38745: PUSH
38746: LD_VAR 0 7
38750: ARRAY
38751: PPUSH
38752: CALL 34704 0 1
// end ; if f_attack_depot then
38756: LD_VAR 0 25
38760: IFFALSE 38872
// begin k := 6 ;
38762: LD_ADDR_VAR 0 9
38766: PUSH
38767: LD_INT 6
38769: ST_TO_ADDR
// if tmp < k then
38770: LD_VAR 0 14
38774: PUSH
38775: LD_VAR 0 9
38779: LESS
38780: IFFALSE 38792
// k := tmp ;
38782: LD_ADDR_VAR 0 9
38786: PUSH
38787: LD_VAR 0 14
38791: ST_TO_ADDR
// for j = 1 to k do
38792: LD_ADDR_VAR 0 8
38796: PUSH
38797: DOUBLE
38798: LD_INT 1
38800: DEC
38801: ST_TO_ADDR
38802: LD_VAR 0 9
38806: PUSH
38807: FOR_TO
38808: IFFALSE 38870
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
38810: LD_VAR 0 8
38814: PPUSH
38815: CALL_OW 266
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: IN
38830: IFFALSE 38868
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
38832: LD_VAR 0 4
38836: PUSH
38837: LD_VAR 0 7
38841: ARRAY
38842: PPUSH
38843: LD_VAR 0 14
38847: PUSH
38848: LD_VAR 0 8
38852: ARRAY
38853: PPUSH
38854: CALL_OW 115
// attacking := true ;
38858: LD_ADDR_VAR 0 29
38862: PUSH
38863: LD_INT 1
38865: ST_TO_ADDR
// break ;
38866: GO 38870
// end ;
38868: GO 38807
38870: POP
38871: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
38872: LD_VAR 0 4
38876: PUSH
38877: LD_VAR 0 7
38881: ARRAY
38882: PPUSH
38883: CALL_OW 302
38887: PUSH
38888: LD_VAR 0 29
38892: NOT
38893: AND
38894: IFFALSE 39216
// begin if GetTag ( group [ i ] ) = 71 then
38896: LD_VAR 0 4
38900: PUSH
38901: LD_VAR 0 7
38905: ARRAY
38906: PPUSH
38907: CALL_OW 110
38911: PUSH
38912: LD_INT 71
38914: EQUAL
38915: IFFALSE 38956
// begin if HasTask ( group [ i ] ) then
38917: LD_VAR 0 4
38921: PUSH
38922: LD_VAR 0 7
38926: ARRAY
38927: PPUSH
38928: CALL_OW 314
38932: IFFALSE 38938
// continue else
38934: GO 36322
38936: GO 38956
// SetTag ( group [ i ] , 0 ) ;
38938: LD_VAR 0 4
38942: PUSH
38943: LD_VAR 0 7
38947: ARRAY
38948: PPUSH
38949: LD_INT 0
38951: PPUSH
38952: CALL_OW 109
// end ; k := 8 ;
38956: LD_ADDR_VAR 0 9
38960: PUSH
38961: LD_INT 8
38963: ST_TO_ADDR
// x := 0 ;
38964: LD_ADDR_VAR 0 10
38968: PUSH
38969: LD_INT 0
38971: ST_TO_ADDR
// if tmp < k then
38972: LD_VAR 0 14
38976: PUSH
38977: LD_VAR 0 9
38981: LESS
38982: IFFALSE 38994
// k := tmp ;
38984: LD_ADDR_VAR 0 9
38988: PUSH
38989: LD_VAR 0 14
38993: ST_TO_ADDR
// for j = 1 to k do
38994: LD_ADDR_VAR 0 8
38998: PUSH
38999: DOUBLE
39000: LD_INT 1
39002: DEC
39003: ST_TO_ADDR
39004: LD_VAR 0 9
39008: PUSH
39009: FOR_TO
39010: IFFALSE 39108
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
39012: LD_VAR 0 14
39016: PUSH
39017: LD_VAR 0 8
39021: ARRAY
39022: PPUSH
39023: CALL_OW 247
39027: PUSH
39028: LD_INT 1
39030: EQUAL
39031: PUSH
39032: LD_VAR 0 14
39036: PUSH
39037: LD_VAR 0 8
39041: ARRAY
39042: PPUSH
39043: CALL_OW 256
39047: PUSH
39048: LD_INT 250
39050: LESS
39051: PUSH
39052: LD_VAR 0 20
39056: AND
39057: PUSH
39058: LD_VAR 0 20
39062: NOT
39063: PUSH
39064: LD_VAR 0 14
39068: PUSH
39069: LD_VAR 0 8
39073: ARRAY
39074: PPUSH
39075: CALL_OW 256
39079: PUSH
39080: LD_INT 250
39082: GREATEREQUAL
39083: AND
39084: OR
39085: AND
39086: IFFALSE 39106
// begin x := tmp [ j ] ;
39088: LD_ADDR_VAR 0 10
39092: PUSH
39093: LD_VAR 0 14
39097: PUSH
39098: LD_VAR 0 8
39102: ARRAY
39103: ST_TO_ADDR
// break ;
39104: GO 39108
// end ;
39106: GO 39009
39108: POP
39109: POP
// if x then
39110: LD_VAR 0 10
39114: IFFALSE 39138
// ComAttackUnit ( group [ i ] , x ) else
39116: LD_VAR 0 4
39120: PUSH
39121: LD_VAR 0 7
39125: ARRAY
39126: PPUSH
39127: LD_VAR 0 10
39131: PPUSH
39132: CALL_OW 115
39136: GO 39162
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
39138: LD_VAR 0 4
39142: PUSH
39143: LD_VAR 0 7
39147: ARRAY
39148: PPUSH
39149: LD_VAR 0 14
39153: PUSH
39154: LD_INT 1
39156: ARRAY
39157: PPUSH
39158: CALL_OW 115
// if not HasTask ( group [ i ] ) then
39162: LD_VAR 0 4
39166: PUSH
39167: LD_VAR 0 7
39171: ARRAY
39172: PPUSH
39173: CALL_OW 314
39177: NOT
39178: IFFALSE 39216
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
39180: LD_VAR 0 4
39184: PUSH
39185: LD_VAR 0 7
39189: ARRAY
39190: PPUSH
39191: LD_VAR 0 14
39195: PPUSH
39196: LD_VAR 0 4
39200: PUSH
39201: LD_VAR 0 7
39205: ARRAY
39206: PPUSH
39207: CALL_OW 74
39211: PPUSH
39212: CALL_OW 115
// end ; end ; end ;
39216: GO 36322
39218: POP
39219: POP
// wait ( 0 0$1 ) ;
39220: LD_INT 35
39222: PPUSH
39223: CALL_OW 67
// until group = [ ] ;
39227: LD_VAR 0 4
39231: PUSH
39232: EMPTY
39233: EQUAL
39234: IFFALSE 36307
// end ;
39236: LD_VAR 0 2
39240: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
// if not base_units then
39247: LD_VAR 0 1
39251: NOT
39252: IFFALSE 39256
// exit ;
39254: GO 39343
// result := false ;
39256: LD_ADDR_VAR 0 2
39260: PUSH
39261: LD_INT 0
39263: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39264: LD_ADDR_VAR 0 5
39268: PUSH
39269: LD_VAR 0 1
39273: PPUSH
39274: LD_INT 21
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PPUSH
39284: CALL_OW 72
39288: ST_TO_ADDR
// if not tmp then
39289: LD_VAR 0 5
39293: NOT
39294: IFFALSE 39298
// exit ;
39296: GO 39343
// for i in tmp do
39298: LD_ADDR_VAR 0 3
39302: PUSH
39303: LD_VAR 0 5
39307: PUSH
39308: FOR_IN
39309: IFFALSE 39341
// begin result := EnemyInRange ( i , 22 ) ;
39311: LD_ADDR_VAR 0 2
39315: PUSH
39316: LD_VAR 0 3
39320: PPUSH
39321: LD_INT 22
39323: PPUSH
39324: CALL 34387 0 2
39328: ST_TO_ADDR
// if result then
39329: LD_VAR 0 2
39333: IFFALSE 39339
// exit ;
39335: POP
39336: POP
39337: GO 39343
// end ;
39339: GO 39308
39341: POP
39342: POP
// end ;
39343: LD_VAR 0 2
39347: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
39348: LD_INT 0
39350: PPUSH
39351: PPUSH
// if not units then
39352: LD_VAR 0 1
39356: NOT
39357: IFFALSE 39361
// exit ;
39359: GO 39431
// result := [ ] ;
39361: LD_ADDR_VAR 0 3
39365: PUSH
39366: EMPTY
39367: ST_TO_ADDR
// for i in units do
39368: LD_ADDR_VAR 0 4
39372: PUSH
39373: LD_VAR 0 1
39377: PUSH
39378: FOR_IN
39379: IFFALSE 39429
// if GetTag ( i ) = tag then
39381: LD_VAR 0 4
39385: PPUSH
39386: CALL_OW 110
39390: PUSH
39391: LD_VAR 0 2
39395: EQUAL
39396: IFFALSE 39427
// result := Insert ( result , result + 1 , i ) ;
39398: LD_ADDR_VAR 0 3
39402: PUSH
39403: LD_VAR 0 3
39407: PPUSH
39408: LD_VAR 0 3
39412: PUSH
39413: LD_INT 1
39415: PLUS
39416: PPUSH
39417: LD_VAR 0 4
39421: PPUSH
39422: CALL_OW 2
39426: ST_TO_ADDR
39427: GO 39378
39429: POP
39430: POP
// end ;
39431: LD_VAR 0 3
39435: RET
// export function IsDriver ( un ) ; begin
39436: LD_INT 0
39438: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39439: LD_ADDR_VAR 0 2
39443: PUSH
39444: LD_VAR 0 1
39448: PUSH
39449: LD_INT 55
39451: PUSH
39452: EMPTY
39453: LIST
39454: PPUSH
39455: CALL_OW 69
39459: IN
39460: ST_TO_ADDR
// end ;
39461: LD_VAR 0 2
39465: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39466: LD_INT 0
39468: PPUSH
39469: PPUSH
// list := [ ] ;
39470: LD_ADDR_VAR 0 5
39474: PUSH
39475: EMPTY
39476: ST_TO_ADDR
// case d of 0 :
39477: LD_VAR 0 3
39481: PUSH
39482: LD_INT 0
39484: DOUBLE
39485: EQUAL
39486: IFTRUE 39490
39488: GO 39623
39490: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: LD_VAR 0 1
39500: PUSH
39501: LD_INT 4
39503: MINUS
39504: PUSH
39505: LD_VAR 0 2
39509: PUSH
39510: LD_INT 4
39512: MINUS
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: PUSH
39522: LD_VAR 0 1
39526: PUSH
39527: LD_INT 3
39529: MINUS
39530: PUSH
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: PUSH
39544: LD_VAR 0 1
39548: PUSH
39549: LD_INT 4
39551: PLUS
39552: PUSH
39553: LD_VAR 0 2
39557: PUSH
39558: LD_INT 4
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: PUSH
39566: LD_VAR 0 1
39570: PUSH
39571: LD_INT 3
39573: PLUS
39574: PUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_INT 3
39582: PLUS
39583: PUSH
39584: LD_INT 5
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: LD_VAR 0 2
39601: PUSH
39602: LD_INT 4
39604: PLUS
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// end ; 1 :
39621: GO 40321
39623: LD_INT 1
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39764
39631: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39632: LD_ADDR_VAR 0 5
39636: PUSH
39637: LD_VAR 0 1
39641: PUSH
39642: LD_VAR 0 2
39646: PUSH
39647: LD_INT 4
39649: MINUS
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: PUSH
39659: LD_VAR 0 1
39663: PUSH
39664: LD_INT 3
39666: MINUS
39667: PUSH
39668: LD_VAR 0 2
39672: PUSH
39673: LD_INT 3
39675: MINUS
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: PUSH
39685: LD_VAR 0 1
39689: PUSH
39690: LD_INT 4
39692: MINUS
39693: PUSH
39694: LD_VAR 0 2
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: PUSH
39707: LD_VAR 0 1
39711: PUSH
39712: LD_VAR 0 2
39716: PUSH
39717: LD_INT 3
39719: PLUS
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: PUSH
39729: LD_VAR 0 1
39733: PUSH
39734: LD_INT 4
39736: PLUS
39737: PUSH
39738: LD_VAR 0 2
39742: PUSH
39743: LD_INT 4
39745: PLUS
39746: PUSH
39747: LD_INT 5
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: ST_TO_ADDR
// end ; 2 :
39762: GO 40321
39764: LD_INT 2
39766: DOUBLE
39767: EQUAL
39768: IFTRUE 39772
39770: GO 39901
39772: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39773: LD_ADDR_VAR 0 5
39777: PUSH
39778: LD_VAR 0 1
39782: PUSH
39783: LD_VAR 0 2
39787: PUSH
39788: LD_INT 3
39790: MINUS
39791: PUSH
39792: LD_INT 3
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: PUSH
39800: LD_VAR 0 1
39804: PUSH
39805: LD_INT 4
39807: PLUS
39808: PUSH
39809: LD_VAR 0 2
39813: PUSH
39814: LD_INT 4
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: PUSH
39822: LD_VAR 0 1
39826: PUSH
39827: LD_VAR 0 2
39831: PUSH
39832: LD_INT 4
39834: PLUS
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: LIST
39843: PUSH
39844: LD_VAR 0 1
39848: PUSH
39849: LD_INT 3
39851: MINUS
39852: PUSH
39853: LD_VAR 0 2
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: PUSH
39866: LD_VAR 0 1
39870: PUSH
39871: LD_INT 4
39873: MINUS
39874: PUSH
39875: LD_VAR 0 2
39879: PUSH
39880: LD_INT 4
39882: MINUS
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
// end ; 3 :
39899: GO 40321
39901: LD_INT 3
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 40042
39909: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39910: LD_ADDR_VAR 0 5
39914: PUSH
39915: LD_VAR 0 1
39919: PUSH
39920: LD_INT 3
39922: PLUS
39923: PUSH
39924: LD_VAR 0 2
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: PUSH
39937: LD_VAR 0 1
39941: PUSH
39942: LD_INT 4
39944: PLUS
39945: PUSH
39946: LD_VAR 0 2
39950: PUSH
39951: LD_INT 4
39953: PLUS
39954: PUSH
39955: LD_INT 5
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: PUSH
39963: LD_VAR 0 1
39967: PUSH
39968: LD_INT 4
39970: MINUS
39971: PUSH
39972: LD_VAR 0 2
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: PUSH
39985: LD_VAR 0 1
39989: PUSH
39990: LD_VAR 0 2
39994: PUSH
39995: LD_INT 4
39997: MINUS
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: PUSH
40007: LD_VAR 0 1
40011: PUSH
40012: LD_INT 3
40014: MINUS
40015: PUSH
40016: LD_VAR 0 2
40020: PUSH
40021: LD_INT 3
40023: MINUS
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: ST_TO_ADDR
// end ; 4 :
40040: GO 40321
40042: LD_INT 4
40044: DOUBLE
40045: EQUAL
40046: IFTRUE 40050
40048: GO 40183
40050: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: LD_VAR 0 1
40060: PUSH
40061: LD_VAR 0 2
40065: PUSH
40066: LD_INT 4
40068: PLUS
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: PUSH
40078: LD_VAR 0 1
40082: PUSH
40083: LD_INT 3
40085: PLUS
40086: PUSH
40087: LD_VAR 0 2
40091: PUSH
40092: LD_INT 3
40094: PLUS
40095: PUSH
40096: LD_INT 5
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: PUSH
40104: LD_VAR 0 1
40108: PUSH
40109: LD_INT 4
40111: PLUS
40112: PUSH
40113: LD_VAR 0 2
40117: PUSH
40118: LD_INT 4
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: PUSH
40126: LD_VAR 0 1
40130: PUSH
40131: LD_VAR 0 2
40135: PUSH
40136: LD_INT 3
40138: MINUS
40139: PUSH
40140: LD_INT 3
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: LIST
40147: PUSH
40148: LD_VAR 0 1
40152: PUSH
40153: LD_INT 4
40155: MINUS
40156: PUSH
40157: LD_VAR 0 2
40161: PUSH
40162: LD_INT 4
40164: MINUS
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
// end ; 5 :
40181: GO 40321
40183: LD_INT 5
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40320
40191: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40192: LD_ADDR_VAR 0 5
40196: PUSH
40197: LD_VAR 0 1
40201: PUSH
40202: LD_INT 4
40204: MINUS
40205: PUSH
40206: LD_VAR 0 2
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: PUSH
40219: LD_VAR 0 1
40223: PUSH
40224: LD_VAR 0 2
40228: PUSH
40229: LD_INT 4
40231: MINUS
40232: PUSH
40233: LD_INT 3
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: PUSH
40241: LD_VAR 0 1
40245: PUSH
40246: LD_INT 4
40248: PLUS
40249: PUSH
40250: LD_VAR 0 2
40254: PUSH
40255: LD_INT 4
40257: PLUS
40258: PUSH
40259: LD_INT 5
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: PUSH
40267: LD_VAR 0 1
40271: PUSH
40272: LD_INT 3
40274: PLUS
40275: PUSH
40276: LD_VAR 0 2
40280: PUSH
40281: LD_INT 4
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: PUSH
40289: LD_VAR 0 1
40293: PUSH
40294: LD_VAR 0 2
40298: PUSH
40299: LD_INT 3
40301: PLUS
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: LIST
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// end ; end ;
40318: GO 40321
40320: POP
// result := list ;
40321: LD_ADDR_VAR 0 4
40325: PUSH
40326: LD_VAR 0 5
40330: ST_TO_ADDR
// end ; end_of_file
40331: LD_VAR 0 4
40335: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
40336: LD_INT 0
40338: PPUSH
40339: PPUSH
// skirmish := false ;
40340: LD_ADDR_EXP 7
40344: PUSH
40345: LD_INT 0
40347: ST_TO_ADDR
// mc_bases := [ ] ;
40348: LD_ADDR_EXP 8
40352: PUSH
40353: EMPTY
40354: ST_TO_ADDR
// mc_sides := [ ] ;
40355: LD_ADDR_EXP 34
40359: PUSH
40360: EMPTY
40361: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
40362: LD_ADDR_EXP 9
40366: PUSH
40367: EMPTY
40368: ST_TO_ADDR
// mc_building_repairs := [ ] ;
40369: LD_ADDR_EXP 10
40373: PUSH
40374: EMPTY
40375: ST_TO_ADDR
// mc_need_heal := [ ] ;
40376: LD_ADDR_EXP 11
40380: PUSH
40381: EMPTY
40382: ST_TO_ADDR
// mc_healers := [ ] ;
40383: LD_ADDR_EXP 12
40387: PUSH
40388: EMPTY
40389: ST_TO_ADDR
// mc_build_list := [ ] ;
40390: LD_ADDR_EXP 13
40394: PUSH
40395: EMPTY
40396: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
40397: LD_ADDR_EXP 40
40401: PUSH
40402: EMPTY
40403: ST_TO_ADDR
// mc_builders := [ ] ;
40404: LD_ADDR_EXP 14
40408: PUSH
40409: EMPTY
40410: ST_TO_ADDR
// mc_construct_list := [ ] ;
40411: LD_ADDR_EXP 15
40415: PUSH
40416: EMPTY
40417: ST_TO_ADDR
// mc_turret_list := [ ] ;
40418: LD_ADDR_EXP 16
40422: PUSH
40423: EMPTY
40424: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
40425: LD_ADDR_EXP 17
40429: PUSH
40430: EMPTY
40431: ST_TO_ADDR
// mc_miners := [ ] ;
40432: LD_ADDR_EXP 22
40436: PUSH
40437: EMPTY
40438: ST_TO_ADDR
// mc_mines := [ ] ;
40439: LD_ADDR_EXP 21
40443: PUSH
40444: EMPTY
40445: ST_TO_ADDR
// mc_minefields := [ ] ;
40446: LD_ADDR_EXP 23
40450: PUSH
40451: EMPTY
40452: ST_TO_ADDR
// mc_crates := [ ] ;
40453: LD_ADDR_EXP 24
40457: PUSH
40458: EMPTY
40459: ST_TO_ADDR
// mc_crates_collector := [ ] ;
40460: LD_ADDR_EXP 25
40464: PUSH
40465: EMPTY
40466: ST_TO_ADDR
// mc_crates_area := [ ] ;
40467: LD_ADDR_EXP 26
40471: PUSH
40472: EMPTY
40473: ST_TO_ADDR
// mc_vehicles := [ ] ;
40474: LD_ADDR_EXP 27
40478: PUSH
40479: EMPTY
40480: ST_TO_ADDR
// mc_attack := [ ] ;
40481: LD_ADDR_EXP 28
40485: PUSH
40486: EMPTY
40487: ST_TO_ADDR
// mc_produce := [ ] ;
40488: LD_ADDR_EXP 29
40492: PUSH
40493: EMPTY
40494: ST_TO_ADDR
// mc_defender := [ ] ;
40495: LD_ADDR_EXP 30
40499: PUSH
40500: EMPTY
40501: ST_TO_ADDR
// mc_parking := [ ] ;
40502: LD_ADDR_EXP 32
40506: PUSH
40507: EMPTY
40508: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
40509: LD_ADDR_EXP 18
40513: PUSH
40514: EMPTY
40515: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
40516: LD_ADDR_EXP 20
40520: PUSH
40521: EMPTY
40522: ST_TO_ADDR
// mc_scan := [ ] ;
40523: LD_ADDR_EXP 31
40527: PUSH
40528: EMPTY
40529: ST_TO_ADDR
// mc_scan_area := [ ] ;
40530: LD_ADDR_EXP 33
40534: PUSH
40535: EMPTY
40536: ST_TO_ADDR
// mc_tech := [ ] ;
40537: LD_ADDR_EXP 35
40541: PUSH
40542: EMPTY
40543: ST_TO_ADDR
// end ;
40544: LD_VAR 0 1
40548: RET
// export function MC_Start ( ) ; var i ; begin
40549: LD_INT 0
40551: PPUSH
40552: PPUSH
// for i = 1 to mc_bases do
40553: LD_ADDR_VAR 0 2
40557: PUSH
40558: DOUBLE
40559: LD_INT 1
40561: DEC
40562: ST_TO_ADDR
40563: LD_EXP 8
40567: PUSH
40568: FOR_TO
40569: IFFALSE 41502
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
40571: LD_ADDR_EXP 9
40575: PUSH
40576: LD_EXP 9
40580: PPUSH
40581: LD_VAR 0 2
40585: PPUSH
40586: EMPTY
40587: PPUSH
40588: CALL_OW 1
40592: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
40593: LD_ADDR_EXP 10
40597: PUSH
40598: LD_EXP 10
40602: PPUSH
40603: LD_VAR 0 2
40607: PPUSH
40608: EMPTY
40609: PPUSH
40610: CALL_OW 1
40614: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
40615: LD_ADDR_EXP 11
40619: PUSH
40620: LD_EXP 11
40624: PPUSH
40625: LD_VAR 0 2
40629: PPUSH
40630: EMPTY
40631: PPUSH
40632: CALL_OW 1
40636: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
40637: LD_ADDR_EXP 12
40641: PUSH
40642: LD_EXP 12
40646: PPUSH
40647: LD_VAR 0 2
40651: PPUSH
40652: EMPTY
40653: PUSH
40654: EMPTY
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PPUSH
40660: CALL_OW 1
40664: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
40665: LD_ADDR_EXP 13
40669: PUSH
40670: LD_EXP 13
40674: PPUSH
40675: LD_VAR 0 2
40679: PPUSH
40680: EMPTY
40681: PPUSH
40682: CALL_OW 1
40686: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
40687: LD_ADDR_EXP 40
40691: PUSH
40692: LD_EXP 40
40696: PPUSH
40697: LD_VAR 0 2
40701: PPUSH
40702: EMPTY
40703: PPUSH
40704: CALL_OW 1
40708: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
40709: LD_ADDR_EXP 14
40713: PUSH
40714: LD_EXP 14
40718: PPUSH
40719: LD_VAR 0 2
40723: PPUSH
40724: EMPTY
40725: PPUSH
40726: CALL_OW 1
40730: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
40731: LD_ADDR_EXP 15
40735: PUSH
40736: LD_EXP 15
40740: PPUSH
40741: LD_VAR 0 2
40745: PPUSH
40746: EMPTY
40747: PPUSH
40748: CALL_OW 1
40752: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
40753: LD_ADDR_EXP 16
40757: PUSH
40758: LD_EXP 16
40762: PPUSH
40763: LD_VAR 0 2
40767: PPUSH
40768: EMPTY
40769: PPUSH
40770: CALL_OW 1
40774: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
40775: LD_ADDR_EXP 17
40779: PUSH
40780: LD_EXP 17
40784: PPUSH
40785: LD_VAR 0 2
40789: PPUSH
40790: LD_EXP 8
40794: PUSH
40795: LD_VAR 0 2
40799: ARRAY
40800: PPUSH
40801: LD_INT 2
40803: PUSH
40804: LD_INT 30
40806: PUSH
40807: LD_INT 32
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 30
40816: PUSH
40817: LD_INT 31
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 58
40831: PUSH
40832: EMPTY
40833: LIST
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PPUSH
40839: CALL_OW 72
40843: PPUSH
40844: CALL_OW 1
40848: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
40849: LD_ADDR_EXP 18
40853: PUSH
40854: LD_EXP 18
40858: PPUSH
40859: LD_VAR 0 2
40863: PPUSH
40864: EMPTY
40865: PPUSH
40866: CALL_OW 1
40870: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
40871: LD_ADDR_EXP 22
40875: PUSH
40876: LD_EXP 22
40880: PPUSH
40881: LD_VAR 0 2
40885: PPUSH
40886: EMPTY
40887: PPUSH
40888: CALL_OW 1
40892: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
40893: LD_ADDR_EXP 21
40897: PUSH
40898: LD_EXP 21
40902: PPUSH
40903: LD_VAR 0 2
40907: PPUSH
40908: EMPTY
40909: PPUSH
40910: CALL_OW 1
40914: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
40915: LD_ADDR_EXP 23
40919: PUSH
40920: LD_EXP 23
40924: PPUSH
40925: LD_VAR 0 2
40929: PPUSH
40930: EMPTY
40931: PPUSH
40932: CALL_OW 1
40936: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
40937: LD_ADDR_EXP 24
40941: PUSH
40942: LD_EXP 24
40946: PPUSH
40947: LD_VAR 0 2
40951: PPUSH
40952: EMPTY
40953: PPUSH
40954: CALL_OW 1
40958: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
40959: LD_ADDR_EXP 25
40963: PUSH
40964: LD_EXP 25
40968: PPUSH
40969: LD_VAR 0 2
40973: PPUSH
40974: EMPTY
40975: PPUSH
40976: CALL_OW 1
40980: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
40981: LD_ADDR_EXP 26
40985: PUSH
40986: LD_EXP 26
40990: PPUSH
40991: LD_VAR 0 2
40995: PPUSH
40996: EMPTY
40997: PPUSH
40998: CALL_OW 1
41002: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
41003: LD_ADDR_EXP 27
41007: PUSH
41008: LD_EXP 27
41012: PPUSH
41013: LD_VAR 0 2
41017: PPUSH
41018: EMPTY
41019: PPUSH
41020: CALL_OW 1
41024: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
41025: LD_ADDR_EXP 28
41029: PUSH
41030: LD_EXP 28
41034: PPUSH
41035: LD_VAR 0 2
41039: PPUSH
41040: EMPTY
41041: PPUSH
41042: CALL_OW 1
41046: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
41047: LD_ADDR_EXP 29
41051: PUSH
41052: LD_EXP 29
41056: PPUSH
41057: LD_VAR 0 2
41061: PPUSH
41062: EMPTY
41063: PPUSH
41064: CALL_OW 1
41068: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
41069: LD_ADDR_EXP 30
41073: PUSH
41074: LD_EXP 30
41078: PPUSH
41079: LD_VAR 0 2
41083: PPUSH
41084: EMPTY
41085: PPUSH
41086: CALL_OW 1
41090: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
41091: LD_ADDR_EXP 19
41095: PUSH
41096: LD_EXP 19
41100: PPUSH
41101: LD_VAR 0 2
41105: PPUSH
41106: LD_INT 0
41108: PPUSH
41109: CALL_OW 1
41113: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
41114: LD_ADDR_EXP 32
41118: PUSH
41119: LD_EXP 32
41123: PPUSH
41124: LD_VAR 0 2
41128: PPUSH
41129: LD_INT 0
41131: PPUSH
41132: CALL_OW 1
41136: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
41137: LD_ADDR_EXP 20
41141: PUSH
41142: LD_EXP 20
41146: PPUSH
41147: LD_VAR 0 2
41151: PPUSH
41152: EMPTY
41153: PPUSH
41154: CALL_OW 1
41158: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
41159: LD_ADDR_EXP 31
41163: PUSH
41164: LD_EXP 31
41168: PPUSH
41169: LD_VAR 0 2
41173: PPUSH
41174: LD_INT 0
41176: PPUSH
41177: CALL_OW 1
41181: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
41182: LD_ADDR_EXP 33
41186: PUSH
41187: LD_EXP 33
41191: PPUSH
41192: LD_VAR 0 2
41196: PPUSH
41197: EMPTY
41198: PPUSH
41199: CALL_OW 1
41203: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
41204: LD_ADDR_EXP 36
41208: PUSH
41209: LD_EXP 36
41213: PPUSH
41214: LD_VAR 0 2
41218: PPUSH
41219: LD_INT 0
41221: PPUSH
41222: CALL_OW 1
41226: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
41227: LD_ADDR_EXP 37
41231: PUSH
41232: LD_EXP 37
41236: PPUSH
41237: LD_VAR 0 2
41241: PPUSH
41242: EMPTY
41243: PPUSH
41244: CALL_OW 1
41248: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41249: LD_ADDR_EXP 38
41253: PUSH
41254: LD_EXP 38
41258: PPUSH
41259: LD_VAR 0 2
41263: PPUSH
41264: EMPTY
41265: PPUSH
41266: CALL_OW 1
41270: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
41271: LD_ADDR_EXP 39
41275: PUSH
41276: LD_EXP 39
41280: PPUSH
41281: LD_VAR 0 2
41285: PPUSH
41286: EMPTY
41287: PPUSH
41288: CALL_OW 1
41292: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
41293: LD_ADDR_EXP 41
41297: PUSH
41298: LD_EXP 41
41302: PPUSH
41303: LD_VAR 0 2
41307: PPUSH
41308: LD_EXP 8
41312: PUSH
41313: LD_VAR 0 2
41317: ARRAY
41318: PPUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 30
41324: PUSH
41325: LD_INT 6
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 30
41334: PUSH
41335: LD_INT 7
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 30
41344: PUSH
41345: LD_INT 8
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: PPUSH
41358: CALL_OW 72
41362: PPUSH
41363: CALL_OW 1
41367: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
41368: LD_ADDR_EXP 42
41372: PUSH
41373: LD_EXP 42
41377: PPUSH
41378: LD_VAR 0 2
41382: PPUSH
41383: EMPTY
41384: PPUSH
41385: CALL_OW 1
41389: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
41390: LD_ADDR_EXP 43
41394: PUSH
41395: LD_EXP 43
41399: PPUSH
41400: LD_VAR 0 2
41404: PPUSH
41405: EMPTY
41406: PPUSH
41407: CALL_OW 1
41411: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
41412: LD_ADDR_EXP 44
41416: PUSH
41417: LD_EXP 44
41421: PPUSH
41422: LD_VAR 0 2
41426: PPUSH
41427: EMPTY
41428: PPUSH
41429: CALL_OW 1
41433: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
41434: LD_ADDR_EXP 45
41438: PUSH
41439: LD_EXP 45
41443: PPUSH
41444: LD_VAR 0 2
41448: PPUSH
41449: EMPTY
41450: PPUSH
41451: CALL_OW 1
41455: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
41456: LD_ADDR_EXP 46
41460: PUSH
41461: LD_EXP 46
41465: PPUSH
41466: LD_VAR 0 2
41470: PPUSH
41471: EMPTY
41472: PPUSH
41473: CALL_OW 1
41477: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
41478: LD_ADDR_EXP 47
41482: PUSH
41483: LD_EXP 47
41487: PPUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: EMPTY
41494: PPUSH
41495: CALL_OW 1
41499: ST_TO_ADDR
// end ;
41500: GO 40568
41502: POP
41503: POP
// MC_InitSides ( ) ;
41504: CALL 41790 0 0
// MC_InitResearch ( ) ;
41508: CALL 41529 0 0
// CustomInitMacro ( ) ;
41512: CALL 120 0 0
// skirmish := true ;
41516: LD_ADDR_EXP 7
41520: PUSH
41521: LD_INT 1
41523: ST_TO_ADDR
// end ;
41524: LD_VAR 0 1
41528: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
41529: LD_INT 0
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
// if not mc_bases then
41537: LD_EXP 8
41541: NOT
41542: IFFALSE 41546
// exit ;
41544: GO 41785
// for i = 1 to 8 do
41546: LD_ADDR_VAR 0 2
41550: PUSH
41551: DOUBLE
41552: LD_INT 1
41554: DEC
41555: ST_TO_ADDR
41556: LD_INT 8
41558: PUSH
41559: FOR_TO
41560: IFFALSE 41586
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
41562: LD_ADDR_EXP 35
41566: PUSH
41567: LD_EXP 35
41571: PPUSH
41572: LD_VAR 0 2
41576: PPUSH
41577: EMPTY
41578: PPUSH
41579: CALL_OW 1
41583: ST_TO_ADDR
41584: GO 41559
41586: POP
41587: POP
// tmp := [ ] ;
41588: LD_ADDR_VAR 0 5
41592: PUSH
41593: EMPTY
41594: ST_TO_ADDR
// for i = 1 to mc_sides do
41595: LD_ADDR_VAR 0 2
41599: PUSH
41600: DOUBLE
41601: LD_INT 1
41603: DEC
41604: ST_TO_ADDR
41605: LD_EXP 34
41609: PUSH
41610: FOR_TO
41611: IFFALSE 41669
// if not mc_sides [ i ] in tmp then
41613: LD_EXP 34
41617: PUSH
41618: LD_VAR 0 2
41622: ARRAY
41623: PUSH
41624: LD_VAR 0 5
41628: IN
41629: NOT
41630: IFFALSE 41667
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
41632: LD_ADDR_VAR 0 5
41636: PUSH
41637: LD_VAR 0 5
41641: PPUSH
41642: LD_VAR 0 5
41646: PUSH
41647: LD_INT 1
41649: PLUS
41650: PPUSH
41651: LD_EXP 34
41655: PUSH
41656: LD_VAR 0 2
41660: ARRAY
41661: PPUSH
41662: CALL_OW 2
41666: ST_TO_ADDR
41667: GO 41610
41669: POP
41670: POP
// if not tmp then
41671: LD_VAR 0 5
41675: NOT
41676: IFFALSE 41680
// exit ;
41678: GO 41785
// for j in tmp do
41680: LD_ADDR_VAR 0 3
41684: PUSH
41685: LD_VAR 0 5
41689: PUSH
41690: FOR_IN
41691: IFFALSE 41783
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
41693: LD_ADDR_VAR 0 6
41697: PUSH
41698: LD_INT 22
41700: PUSH
41701: LD_VAR 0 3
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PPUSH
41710: CALL_OW 69
41714: ST_TO_ADDR
// if not un then
41715: LD_VAR 0 6
41719: NOT
41720: IFFALSE 41724
// continue ;
41722: GO 41690
// nation := GetNation ( un [ 1 ] ) ;
41724: LD_ADDR_VAR 0 4
41728: PUSH
41729: LD_VAR 0 6
41733: PUSH
41734: LD_INT 1
41736: ARRAY
41737: PPUSH
41738: CALL_OW 248
41742: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
41743: LD_ADDR_EXP 35
41747: PUSH
41748: LD_EXP 35
41752: PPUSH
41753: LD_VAR 0 3
41757: PPUSH
41758: LD_VAR 0 3
41762: PPUSH
41763: LD_VAR 0 4
41767: PPUSH
41768: LD_INT 1
41770: PPUSH
41771: CALL 1812 0 3
41775: PPUSH
41776: CALL_OW 1
41780: ST_TO_ADDR
// end ;
41781: GO 41690
41783: POP
41784: POP
// end ;
41785: LD_VAR 0 1
41789: RET
// export function MC_InitSides ( ) ; var i ; begin
41790: LD_INT 0
41792: PPUSH
41793: PPUSH
// if not mc_bases then
41794: LD_EXP 8
41798: NOT
41799: IFFALSE 41803
// exit ;
41801: GO 41877
// for i = 1 to mc_bases do
41803: LD_ADDR_VAR 0 2
41807: PUSH
41808: DOUBLE
41809: LD_INT 1
41811: DEC
41812: ST_TO_ADDR
41813: LD_EXP 8
41817: PUSH
41818: FOR_TO
41819: IFFALSE 41875
// if mc_bases [ i ] then
41821: LD_EXP 8
41825: PUSH
41826: LD_VAR 0 2
41830: ARRAY
41831: IFFALSE 41873
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
41833: LD_ADDR_EXP 34
41837: PUSH
41838: LD_EXP 34
41842: PPUSH
41843: LD_VAR 0 2
41847: PPUSH
41848: LD_EXP 8
41852: PUSH
41853: LD_VAR 0 2
41857: ARRAY
41858: PUSH
41859: LD_INT 1
41861: ARRAY
41862: PPUSH
41863: CALL_OW 255
41867: PPUSH
41868: CALL_OW 1
41872: ST_TO_ADDR
41873: GO 41818
41875: POP
41876: POP
// end ;
41877: LD_VAR 0 1
41881: RET
// every 0 0$01 trigger skirmish do
41882: LD_EXP 7
41886: IFFALSE 42019
41888: GO 41890
41890: DISABLE
// begin enable ;
41891: ENABLE
// MC_CheckBuildings ( ) ;
41892: CALL 42504 0 0
// MC_CheckPeopleLife ( ) ;
41896: CALL 42629 0 0
// RaiseSailEvent ( 103 ) ;
41900: LD_INT 103
41902: PPUSH
41903: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
41907: LD_INT 104
41909: PPUSH
41910: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
41914: LD_INT 105
41916: PPUSH
41917: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
41921: LD_INT 106
41923: PPUSH
41924: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
41928: LD_INT 107
41930: PPUSH
41931: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
41935: LD_INT 108
41937: PPUSH
41938: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
41942: LD_INT 109
41944: PPUSH
41945: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
41949: LD_INT 110
41951: PPUSH
41952: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
41956: LD_INT 111
41958: PPUSH
41959: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
41963: LD_INT 112
41965: PPUSH
41966: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
41970: LD_INT 120
41972: PPUSH
41973: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
41977: LD_INT 121
41979: PPUSH
41980: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
41984: LD_INT 122
41986: PPUSH
41987: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
41991: LD_INT 123
41993: PPUSH
41994: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
41998: LD_INT 125
42000: PPUSH
42001: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
42005: LD_INT 126
42007: PPUSH
42008: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
42012: LD_INT 200
42014: PPUSH
42015: CALL_OW 427
// end ;
42019: END
// every 10 trigger skirmish do var i ;
42020: LD_EXP 7
42024: IFFALSE 42123
42026: GO 42028
42028: DISABLE
42029: LD_INT 0
42031: PPUSH
// begin enable ;
42032: ENABLE
// if not mc_bases then
42033: LD_EXP 8
42037: NOT
42038: IFFALSE 42042
// exit ;
42040: GO 42123
// for i = 1 to mc_bases do
42042: LD_ADDR_VAR 0 1
42046: PUSH
42047: DOUBLE
42048: LD_INT 1
42050: DEC
42051: ST_TO_ADDR
42052: LD_EXP 8
42056: PUSH
42057: FOR_TO
42058: IFFALSE 42121
// if mc_mines [ i ] and mc_miners [ i ] then
42060: LD_EXP 21
42064: PUSH
42065: LD_VAR 0 1
42069: ARRAY
42070: PUSH
42071: LD_EXP 22
42075: PUSH
42076: LD_VAR 0 1
42080: ARRAY
42081: AND
42082: IFFALSE 42119
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
42084: LD_EXP 22
42088: PUSH
42089: LD_VAR 0 1
42093: ARRAY
42094: PUSH
42095: LD_INT 1
42097: ARRAY
42098: PPUSH
42099: CALL_OW 255
42103: PPUSH
42104: LD_EXP 21
42108: PUSH
42109: LD_VAR 0 1
42113: ARRAY
42114: PPUSH
42115: CALL 5044 0 2
42119: GO 42057
42121: POP
42122: POP
// end ;
42123: PPOPN 1
42125: END
// on SailEvent ( event ) do begin if event = 101 then
42126: LD_VAR 0 1
42130: PUSH
42131: LD_INT 101
42133: EQUAL
42134: IFFALSE 42140
// MC_RepairBuildings ( ) ;
42136: CALL 43187 0 0
// if event = 102 then
42140: LD_VAR 0 1
42144: PUSH
42145: LD_INT 102
42147: EQUAL
42148: IFFALSE 42154
// MC_Heal ( ) ;
42150: CALL 43593 0 0
// if event = 103 then
42154: LD_VAR 0 1
42158: PUSH
42159: LD_INT 103
42161: EQUAL
42162: IFFALSE 42168
// MC_Build ( ) ;
42164: CALL 44015 0 0
// if event = 104 then
42168: LD_VAR 0 1
42172: PUSH
42173: LD_INT 104
42175: EQUAL
42176: IFFALSE 42182
// MC_TurretWeapon ( ) ;
42178: CALL 45432 0 0
// if event = 105 then
42182: LD_VAR 0 1
42186: PUSH
42187: LD_INT 105
42189: EQUAL
42190: IFFALSE 42196
// MC_BuildUpgrade ( ) ;
42192: CALL 44983 0 0
// if event = 106 then
42196: LD_VAR 0 1
42200: PUSH
42201: LD_INT 106
42203: EQUAL
42204: IFFALSE 42210
// MC_PlantMines ( ) ;
42206: CALL 45784 0 0
// if event = 107 then
42210: LD_VAR 0 1
42214: PUSH
42215: LD_INT 107
42217: EQUAL
42218: IFFALSE 42224
// MC_CollectCrates ( ) ;
42220: CALL 46791 0 0
// if event = 108 then
42224: LD_VAR 0 1
42228: PUSH
42229: LD_INT 108
42231: EQUAL
42232: IFFALSE 42238
// MC_LinkRemoteControl ( ) ;
42234: CALL 48295 0 0
// if event = 109 then
42238: LD_VAR 0 1
42242: PUSH
42243: LD_INT 109
42245: EQUAL
42246: IFFALSE 42252
// MC_ProduceVehicle ( ) ;
42248: CALL 48476 0 0
// if event = 110 then
42252: LD_VAR 0 1
42256: PUSH
42257: LD_INT 110
42259: EQUAL
42260: IFFALSE 42266
// MC_SendAttack ( ) ;
42262: CALL 48957 0 0
// if event = 111 then
42266: LD_VAR 0 1
42270: PUSH
42271: LD_INT 111
42273: EQUAL
42274: IFFALSE 42280
// MC_Defend ( ) ;
42276: CALL 49065 0 0
// if event = 112 then
42280: LD_VAR 0 1
42284: PUSH
42285: LD_INT 112
42287: EQUAL
42288: IFFALSE 42294
// MC_Research ( ) ;
42290: CALL 49463 0 0
// if event = 120 then
42294: LD_VAR 0 1
42298: PUSH
42299: LD_INT 120
42301: EQUAL
42302: IFFALSE 42308
// MC_RepairVehicle ( ) ;
42304: CALL 50432 0 0
// if event = 121 then
42308: LD_VAR 0 1
42312: PUSH
42313: LD_INT 121
42315: EQUAL
42316: IFFALSE 42322
// MC_TameApe ( ) ;
42318: CALL 51121 0 0
// if event = 122 then
42322: LD_VAR 0 1
42326: PUSH
42327: LD_INT 122
42329: EQUAL
42330: IFFALSE 42336
// MC_ChangeApeClass ( ) ;
42332: CALL 51884 0 0
// if event = 123 then
42336: LD_VAR 0 1
42340: PUSH
42341: LD_INT 123
42343: EQUAL
42344: IFFALSE 42350
// MC_Bazooka ( ) ;
42346: CALL 52518 0 0
// if event = 124 then
42350: LD_VAR 0 1
42354: PUSH
42355: LD_INT 124
42357: EQUAL
42358: IFFALSE 42364
// MC_TeleportExit ( ) ;
42360: CALL 52716 0 0
// if event = 125 then
42364: LD_VAR 0 1
42368: PUSH
42369: LD_INT 125
42371: EQUAL
42372: IFFALSE 42378
// MC_Deposits ( ) ;
42374: CALL 52758 0 0
// if event = 126 then
42378: LD_VAR 0 1
42382: PUSH
42383: LD_INT 126
42385: EQUAL
42386: IFFALSE 42392
// MC_RemoteDriver ( ) ;
42388: CALL 53337 0 0
// if event = 200 then
42392: LD_VAR 0 1
42396: PUSH
42397: LD_INT 200
42399: EQUAL
42400: IFFALSE 42406
// MC_Idle ( ) ;
42402: CALL 54827 0 0
// end ;
42406: PPOPN 1
42408: END
// export function MC_Reset ( base , tag ) ; var i ; begin
42409: LD_INT 0
42411: PPUSH
42412: PPUSH
// if not mc_bases [ base ] or not tag then
42413: LD_EXP 8
42417: PUSH
42418: LD_VAR 0 1
42422: ARRAY
42423: NOT
42424: PUSH
42425: LD_VAR 0 2
42429: NOT
42430: OR
42431: IFFALSE 42435
// exit ;
42433: GO 42499
// for i in mc_bases [ base ] union mc_ape [ base ] do
42435: LD_ADDR_VAR 0 4
42439: PUSH
42440: LD_EXP 8
42444: PUSH
42445: LD_VAR 0 1
42449: ARRAY
42450: PUSH
42451: LD_EXP 37
42455: PUSH
42456: LD_VAR 0 1
42460: ARRAY
42461: UNION
42462: PUSH
42463: FOR_IN
42464: IFFALSE 42497
// if GetTag ( i ) = tag then
42466: LD_VAR 0 4
42470: PPUSH
42471: CALL_OW 110
42475: PUSH
42476: LD_VAR 0 2
42480: EQUAL
42481: IFFALSE 42495
// SetTag ( i , 0 ) ;
42483: LD_VAR 0 4
42487: PPUSH
42488: LD_INT 0
42490: PPUSH
42491: CALL_OW 109
42495: GO 42463
42497: POP
42498: POP
// end ;
42499: LD_VAR 0 3
42503: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
42504: LD_INT 0
42506: PPUSH
42507: PPUSH
42508: PPUSH
// if not mc_bases then
42509: LD_EXP 8
42513: NOT
42514: IFFALSE 42518
// exit ;
42516: GO 42624
// for i = 1 to mc_bases do
42518: LD_ADDR_VAR 0 2
42522: PUSH
42523: DOUBLE
42524: LD_INT 1
42526: DEC
42527: ST_TO_ADDR
42528: LD_EXP 8
42532: PUSH
42533: FOR_TO
42534: IFFALSE 42615
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
42536: LD_ADDR_VAR 0 3
42540: PUSH
42541: LD_EXP 8
42545: PUSH
42546: LD_VAR 0 2
42550: ARRAY
42551: PPUSH
42552: LD_INT 21
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 3
42564: PUSH
42565: LD_INT 24
42567: PUSH
42568: LD_INT 1000
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PPUSH
42583: CALL_OW 72
42587: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
42588: LD_ADDR_EXP 9
42592: PUSH
42593: LD_EXP 9
42597: PPUSH
42598: LD_VAR 0 2
42602: PPUSH
42603: LD_VAR 0 3
42607: PPUSH
42608: CALL_OW 1
42612: ST_TO_ADDR
// end ;
42613: GO 42533
42615: POP
42616: POP
// RaiseSailEvent ( 101 ) ;
42617: LD_INT 101
42619: PPUSH
42620: CALL_OW 427
// end ;
42624: LD_VAR 0 1
42628: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
42629: LD_INT 0
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
// if not mc_bases then
42638: LD_EXP 8
42642: NOT
42643: IFFALSE 42647
// exit ;
42645: GO 43182
// for i = 1 to mc_bases do
42647: LD_ADDR_VAR 0 2
42651: PUSH
42652: DOUBLE
42653: LD_INT 1
42655: DEC
42656: ST_TO_ADDR
42657: LD_EXP 8
42661: PUSH
42662: FOR_TO
42663: IFFALSE 43173
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
42665: LD_ADDR_VAR 0 5
42669: PUSH
42670: LD_EXP 8
42674: PUSH
42675: LD_VAR 0 2
42679: ARRAY
42680: PUSH
42681: LD_EXP 37
42685: PUSH
42686: LD_VAR 0 2
42690: ARRAY
42691: UNION
42692: PPUSH
42693: LD_INT 21
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: LD_INT 54
42711: PUSH
42712: EMPTY
42713: LIST
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 24
42724: PUSH
42725: LD_INT 700
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PPUSH
42745: CALL_OW 72
42749: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
42750: LD_ADDR_VAR 0 6
42754: PUSH
42755: LD_EXP 8
42759: PUSH
42760: LD_VAR 0 2
42764: ARRAY
42765: PPUSH
42766: LD_INT 21
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 54
42784: PUSH
42785: EMPTY
42786: LIST
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: LD_INT 24
42797: PUSH
42798: LD_INT 250
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PPUSH
42818: CALL_OW 72
42822: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
42823: LD_ADDR_VAR 0 7
42827: PUSH
42828: LD_VAR 0 5
42832: PUSH
42833: LD_VAR 0 6
42837: DIFF
42838: ST_TO_ADDR
// if not need_heal_1 then
42839: LD_VAR 0 6
42843: NOT
42844: IFFALSE 42877
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
42846: LD_ADDR_EXP 11
42850: PUSH
42851: LD_EXP 11
42855: PPUSH
42856: LD_VAR 0 2
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PPUSH
42868: EMPTY
42869: PPUSH
42870: CALL 8386 0 3
42874: ST_TO_ADDR
42875: GO 42909
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
42877: LD_ADDR_EXP 11
42881: PUSH
42882: LD_EXP 11
42886: PPUSH
42887: LD_VAR 0 2
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PPUSH
42899: LD_VAR 0 6
42903: PPUSH
42904: CALL 8386 0 3
42908: ST_TO_ADDR
// if not need_heal_2 then
42909: LD_VAR 0 7
42913: NOT
42914: IFFALSE 42947
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
42916: LD_ADDR_EXP 11
42920: PUSH
42921: LD_EXP 11
42925: PPUSH
42926: LD_VAR 0 2
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PPUSH
42938: EMPTY
42939: PPUSH
42940: CALL 8386 0 3
42944: ST_TO_ADDR
42945: GO 42979
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
42947: LD_ADDR_EXP 11
42951: PUSH
42952: LD_EXP 11
42956: PPUSH
42957: LD_VAR 0 2
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PPUSH
42969: LD_VAR 0 7
42973: PPUSH
42974: CALL 8386 0 3
42978: ST_TO_ADDR
// if need_heal_2 then
42979: LD_VAR 0 7
42983: IFFALSE 43155
// for j in need_heal_2 do
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_VAR 0 7
42994: PUSH
42995: FOR_IN
42996: IFFALSE 43153
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
42998: LD_ADDR_VAR 0 5
43002: PUSH
43003: LD_EXP 8
43007: PUSH
43008: LD_VAR 0 2
43012: ARRAY
43013: PPUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 30
43019: PUSH
43020: LD_INT 6
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 30
43029: PUSH
43030: LD_INT 7
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 30
43039: PUSH
43040: LD_INT 8
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 30
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 30
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 25
43069: PUSH
43070: LD_INT 4
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: PPUSH
43086: CALL_OW 72
43090: ST_TO_ADDR
// if tmp then
43091: LD_VAR 0 5
43095: IFFALSE 43151
// begin k := NearestUnitToUnit ( tmp , j ) ;
43097: LD_ADDR_VAR 0 4
43101: PUSH
43102: LD_VAR 0 5
43106: PPUSH
43107: LD_VAR 0 3
43111: PPUSH
43112: CALL_OW 74
43116: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
43117: LD_VAR 0 3
43121: PPUSH
43122: LD_VAR 0 4
43126: PPUSH
43127: CALL_OW 296
43131: PUSH
43132: LD_INT 7
43134: GREATER
43135: IFFALSE 43151
// ComMoveUnit ( j , k ) ;
43137: LD_VAR 0 3
43141: PPUSH
43142: LD_VAR 0 4
43146: PPUSH
43147: CALL_OW 112
// end ; end ;
43151: GO 42995
43153: POP
43154: POP
// if not need_heal_1 and not need_heal_2 then
43155: LD_VAR 0 6
43159: NOT
43160: PUSH
43161: LD_VAR 0 7
43165: NOT
43166: AND
43167: IFFALSE 43171
// continue ;
43169: GO 42662
// end ;
43171: GO 42662
43173: POP
43174: POP
// RaiseSailEvent ( 102 ) ;
43175: LD_INT 102
43177: PPUSH
43178: CALL_OW 427
// end ;
43182: LD_VAR 0 1
43186: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
43187: LD_INT 0
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
// if not mc_bases then
43194: LD_EXP 8
43198: NOT
43199: IFFALSE 43203
// exit ;
43201: GO 43588
// for i = 1 to mc_bases do
43203: LD_ADDR_VAR 0 2
43207: PUSH
43208: DOUBLE
43209: LD_INT 1
43211: DEC
43212: ST_TO_ADDR
43213: LD_EXP 8
43217: PUSH
43218: FOR_TO
43219: IFFALSE 43586
// begin if not mc_building_need_repair [ i ] then
43221: LD_EXP 9
43225: PUSH
43226: LD_VAR 0 2
43230: ARRAY
43231: NOT
43232: IFFALSE 43270
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
43234: LD_ADDR_EXP 10
43238: PUSH
43239: LD_EXP 10
43243: PPUSH
43244: LD_VAR 0 2
43248: PPUSH
43249: EMPTY
43250: PPUSH
43251: CALL_OW 1
43255: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
43256: LD_VAR 0 2
43260: PPUSH
43261: LD_INT 101
43263: PPUSH
43264: CALL 42409 0 2
// continue ;
43268: GO 43218
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
43270: LD_ADDR_EXP 14
43274: PUSH
43275: LD_EXP 14
43279: PPUSH
43280: LD_VAR 0 2
43284: PPUSH
43285: EMPTY
43286: PPUSH
43287: CALL_OW 1
43291: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
43292: LD_VAR 0 2
43296: PPUSH
43297: LD_INT 103
43299: PPUSH
43300: CALL 42409 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
43304: LD_ADDR_VAR 0 5
43308: PUSH
43309: LD_EXP 8
43313: PUSH
43314: LD_VAR 0 2
43318: ARRAY
43319: PUSH
43320: LD_EXP 37
43324: PUSH
43325: LD_VAR 0 2
43329: ARRAY
43330: UNION
43331: PPUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 25
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 25
43347: PUSH
43348: LD_INT 16
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: PPUSH
43363: CALL_OW 72
43367: ST_TO_ADDR
// if not tmp then
43368: LD_VAR 0 5
43372: NOT
43373: IFFALSE 43377
// continue ;
43375: GO 43218
// for j in tmp do
43377: LD_ADDR_VAR 0 3
43381: PUSH
43382: LD_VAR 0 5
43386: PUSH
43387: FOR_IN
43388: IFFALSE 43582
// begin if mc_need_heal [ i ] then
43390: LD_EXP 11
43394: PUSH
43395: LD_VAR 0 2
43399: ARRAY
43400: IFFALSE 43448
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
43402: LD_VAR 0 3
43406: PUSH
43407: LD_EXP 11
43411: PUSH
43412: LD_VAR 0 2
43416: ARRAY
43417: PUSH
43418: LD_INT 1
43420: ARRAY
43421: IN
43422: PUSH
43423: LD_VAR 0 3
43427: PUSH
43428: LD_EXP 11
43432: PUSH
43433: LD_VAR 0 2
43437: ARRAY
43438: PUSH
43439: LD_INT 2
43441: ARRAY
43442: IN
43443: OR
43444: IFFALSE 43448
// continue ;
43446: GO 43387
// if IsInUnit ( j ) then
43448: LD_VAR 0 3
43452: PPUSH
43453: CALL_OW 310
43457: IFFALSE 43468
// ComExitBuilding ( j ) ;
43459: LD_VAR 0 3
43463: PPUSH
43464: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
43468: LD_VAR 0 3
43472: PUSH
43473: LD_EXP 10
43477: PUSH
43478: LD_VAR 0 2
43482: ARRAY
43483: IN
43484: NOT
43485: IFFALSE 43543
// begin SetTag ( j , 101 ) ;
43487: LD_VAR 0 3
43491: PPUSH
43492: LD_INT 101
43494: PPUSH
43495: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
43499: LD_ADDR_EXP 10
43503: PUSH
43504: LD_EXP 10
43508: PPUSH
43509: LD_VAR 0 2
43513: PUSH
43514: LD_EXP 10
43518: PUSH
43519: LD_VAR 0 2
43523: ARRAY
43524: PUSH
43525: LD_INT 1
43527: PLUS
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PPUSH
43533: LD_VAR 0 3
43537: PPUSH
43538: CALL 8386 0 3
43542: ST_TO_ADDR
// end ; Wait ( 3 ) ;
43543: LD_INT 3
43545: PPUSH
43546: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
43550: LD_VAR 0 3
43554: PPUSH
43555: LD_EXP 9
43559: PUSH
43560: LD_VAR 0 2
43564: ARRAY
43565: PPUSH
43566: LD_VAR 0 3
43570: PPUSH
43571: CALL_OW 74
43575: PPUSH
43576: CALL_OW 130
// end ;
43580: GO 43387
43582: POP
43583: POP
// end ;
43584: GO 43218
43586: POP
43587: POP
// end ;
43588: LD_VAR 0 1
43592: RET
// export function MC_Heal ; var i , j , tmp ; begin
43593: LD_INT 0
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
// if not mc_bases then
43599: LD_EXP 8
43603: NOT
43604: IFFALSE 43608
// exit ;
43606: GO 44010
// for i = 1 to mc_bases do
43608: LD_ADDR_VAR 0 2
43612: PUSH
43613: DOUBLE
43614: LD_INT 1
43616: DEC
43617: ST_TO_ADDR
43618: LD_EXP 8
43622: PUSH
43623: FOR_TO
43624: IFFALSE 44008
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
43626: LD_EXP 11
43630: PUSH
43631: LD_VAR 0 2
43635: ARRAY
43636: PUSH
43637: LD_INT 1
43639: ARRAY
43640: NOT
43641: PUSH
43642: LD_EXP 11
43646: PUSH
43647: LD_VAR 0 2
43651: ARRAY
43652: PUSH
43653: LD_INT 2
43655: ARRAY
43656: NOT
43657: AND
43658: IFFALSE 43696
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
43660: LD_ADDR_EXP 12
43664: PUSH
43665: LD_EXP 12
43669: PPUSH
43670: LD_VAR 0 2
43674: PPUSH
43675: EMPTY
43676: PPUSH
43677: CALL_OW 1
43681: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
43682: LD_VAR 0 2
43686: PPUSH
43687: LD_INT 102
43689: PPUSH
43690: CALL 42409 0 2
// continue ;
43694: GO 43623
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
43696: LD_ADDR_VAR 0 4
43700: PUSH
43701: LD_EXP 8
43705: PUSH
43706: LD_VAR 0 2
43710: ARRAY
43711: PPUSH
43712: LD_INT 25
43714: PUSH
43715: LD_INT 4
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PPUSH
43722: CALL_OW 72
43726: ST_TO_ADDR
// if not tmp then
43727: LD_VAR 0 4
43731: NOT
43732: IFFALSE 43736
// continue ;
43734: GO 43623
// if mc_taming [ i ] then
43736: LD_EXP 39
43740: PUSH
43741: LD_VAR 0 2
43745: ARRAY
43746: IFFALSE 43770
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
43748: LD_ADDR_EXP 39
43752: PUSH
43753: LD_EXP 39
43757: PPUSH
43758: LD_VAR 0 2
43762: PPUSH
43763: EMPTY
43764: PPUSH
43765: CALL_OW 1
43769: ST_TO_ADDR
// for j in tmp do
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_VAR 0 4
43779: PUSH
43780: FOR_IN
43781: IFFALSE 44004
// begin if IsInUnit ( j ) then
43783: LD_VAR 0 3
43787: PPUSH
43788: CALL_OW 310
43792: IFFALSE 43803
// ComExitBuilding ( j ) ;
43794: LD_VAR 0 3
43798: PPUSH
43799: CALL_OW 122
// if not j in mc_healers [ i ] then
43803: LD_VAR 0 3
43807: PUSH
43808: LD_EXP 12
43812: PUSH
43813: LD_VAR 0 2
43817: ARRAY
43818: IN
43819: NOT
43820: IFFALSE 43866
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
43822: LD_ADDR_EXP 12
43826: PUSH
43827: LD_EXP 12
43831: PPUSH
43832: LD_VAR 0 2
43836: PUSH
43837: LD_EXP 12
43841: PUSH
43842: LD_VAR 0 2
43846: ARRAY
43847: PUSH
43848: LD_INT 1
43850: PLUS
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PPUSH
43856: LD_VAR 0 3
43860: PPUSH
43861: CALL 8386 0 3
43865: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
43866: LD_VAR 0 3
43870: PPUSH
43871: CALL_OW 110
43875: PUSH
43876: LD_INT 102
43878: NONEQUAL
43879: IFFALSE 43893
// SetTag ( j , 102 ) ;
43881: LD_VAR 0 3
43885: PPUSH
43886: LD_INT 102
43888: PPUSH
43889: CALL_OW 109
// Wait ( 3 ) ;
43893: LD_INT 3
43895: PPUSH
43896: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
43900: LD_EXP 11
43904: PUSH
43905: LD_VAR 0 2
43909: ARRAY
43910: PUSH
43911: LD_INT 1
43913: ARRAY
43914: IFFALSE 43946
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
43916: LD_VAR 0 3
43920: PPUSH
43921: LD_EXP 11
43925: PUSH
43926: LD_VAR 0 2
43930: ARRAY
43931: PUSH
43932: LD_INT 1
43934: ARRAY
43935: PUSH
43936: LD_INT 1
43938: ARRAY
43939: PPUSH
43940: CALL_OW 128
43944: GO 44002
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
43946: LD_VAR 0 3
43950: PPUSH
43951: CALL_OW 314
43955: NOT
43956: PUSH
43957: LD_EXP 11
43961: PUSH
43962: LD_VAR 0 2
43966: ARRAY
43967: PUSH
43968: LD_INT 2
43970: ARRAY
43971: AND
43972: IFFALSE 44002
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
43974: LD_VAR 0 3
43978: PPUSH
43979: LD_EXP 11
43983: PUSH
43984: LD_VAR 0 2
43988: ARRAY
43989: PUSH
43990: LD_INT 2
43992: ARRAY
43993: PUSH
43994: LD_INT 1
43996: ARRAY
43997: PPUSH
43998: CALL_OW 128
// end ;
44002: GO 43780
44004: POP
44005: POP
// end ;
44006: GO 43623
44008: POP
44009: POP
// end ;
44010: LD_VAR 0 1
44014: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
44015: LD_INT 0
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
// if not mc_bases then
44021: LD_EXP 8
44025: NOT
44026: IFFALSE 44030
// exit ;
44028: GO 44978
// for i = 1 to mc_bases do
44030: LD_ADDR_VAR 0 2
44034: PUSH
44035: DOUBLE
44036: LD_INT 1
44038: DEC
44039: ST_TO_ADDR
44040: LD_EXP 8
44044: PUSH
44045: FOR_TO
44046: IFFALSE 44976
// begin if mc_scan [ i ] then
44048: LD_EXP 31
44052: PUSH
44053: LD_VAR 0 2
44057: ARRAY
44058: IFFALSE 44062
// continue ;
44060: GO 44045
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
44062: LD_EXP 13
44066: PUSH
44067: LD_VAR 0 2
44071: ARRAY
44072: NOT
44073: PUSH
44074: LD_EXP 15
44078: PUSH
44079: LD_VAR 0 2
44083: ARRAY
44084: NOT
44085: AND
44086: PUSH
44087: LD_EXP 14
44091: PUSH
44092: LD_VAR 0 2
44096: ARRAY
44097: AND
44098: IFFALSE 44136
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
44100: LD_ADDR_EXP 14
44104: PUSH
44105: LD_EXP 14
44109: PPUSH
44110: LD_VAR 0 2
44114: PPUSH
44115: EMPTY
44116: PPUSH
44117: CALL_OW 1
44121: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
44122: LD_VAR 0 2
44126: PPUSH
44127: LD_INT 103
44129: PPUSH
44130: CALL 42409 0 2
// continue ;
44134: GO 44045
// end ; if mc_construct_list [ i ] then
44136: LD_EXP 15
44140: PUSH
44141: LD_VAR 0 2
44145: ARRAY
44146: IFFALSE 44366
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
44148: LD_ADDR_VAR 0 4
44152: PUSH
44153: LD_EXP 8
44157: PUSH
44158: LD_VAR 0 2
44162: ARRAY
44163: PPUSH
44164: LD_INT 25
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PPUSH
44174: CALL_OW 72
44178: PUSH
44179: LD_EXP 10
44183: PUSH
44184: LD_VAR 0 2
44188: ARRAY
44189: DIFF
44190: ST_TO_ADDR
// if not tmp then
44191: LD_VAR 0 4
44195: NOT
44196: IFFALSE 44200
// continue ;
44198: GO 44045
// for j in tmp do
44200: LD_ADDR_VAR 0 3
44204: PUSH
44205: LD_VAR 0 4
44209: PUSH
44210: FOR_IN
44211: IFFALSE 44362
// begin if not mc_builders [ i ] then
44213: LD_EXP 14
44217: PUSH
44218: LD_VAR 0 2
44222: ARRAY
44223: NOT
44224: IFFALSE 44282
// begin SetTag ( j , 103 ) ;
44226: LD_VAR 0 3
44230: PPUSH
44231: LD_INT 103
44233: PPUSH
44234: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
44238: LD_ADDR_EXP 14
44242: PUSH
44243: LD_EXP 14
44247: PPUSH
44248: LD_VAR 0 2
44252: PUSH
44253: LD_EXP 14
44257: PUSH
44258: LD_VAR 0 2
44262: ARRAY
44263: PUSH
44264: LD_INT 1
44266: PLUS
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PPUSH
44272: LD_VAR 0 3
44276: PPUSH
44277: CALL 8386 0 3
44281: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
44282: LD_VAR 0 3
44286: PPUSH
44287: CALL_OW 310
44291: IFFALSE 44302
// ComExitBuilding ( j ) ;
44293: LD_VAR 0 3
44297: PPUSH
44298: CALL_OW 122
// wait ( 3 ) ;
44302: LD_INT 3
44304: PPUSH
44305: CALL_OW 67
// if not mc_construct_list [ i ] then
44309: LD_EXP 15
44313: PUSH
44314: LD_VAR 0 2
44318: ARRAY
44319: NOT
44320: IFFALSE 44324
// break ;
44322: GO 44362
// if not HasTask ( j ) then
44324: LD_VAR 0 3
44328: PPUSH
44329: CALL_OW 314
44333: NOT
44334: IFFALSE 44360
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
44336: LD_VAR 0 3
44340: PPUSH
44341: LD_EXP 15
44345: PUSH
44346: LD_VAR 0 2
44350: ARRAY
44351: PUSH
44352: LD_INT 1
44354: ARRAY
44355: PPUSH
44356: CALL 10792 0 2
// end ;
44360: GO 44210
44362: POP
44363: POP
// end else
44364: GO 44974
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
44366: LD_EXP 13
44370: PUSH
44371: LD_VAR 0 2
44375: ARRAY
44376: PUSH
44377: LD_EXP 8
44381: PUSH
44382: LD_VAR 0 2
44386: ARRAY
44387: PPUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 30
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 30
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: PPUSH
44416: CALL_OW 72
44420: AND
44421: IFFALSE 44974
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
44423: LD_EXP 8
44427: PUSH
44428: LD_VAR 0 2
44432: ARRAY
44433: PPUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 30
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 30
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: PPUSH
44462: CALL_OW 72
44466: PUSH
44467: LD_INT 1
44469: ARRAY
44470: PPUSH
44471: LD_EXP 13
44475: PUSH
44476: LD_VAR 0 2
44480: ARRAY
44481: PUSH
44482: LD_INT 1
44484: ARRAY
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: PPUSH
44490: LD_EXP 13
44494: PUSH
44495: LD_VAR 0 2
44499: ARRAY
44500: PUSH
44501: LD_INT 1
44503: ARRAY
44504: PUSH
44505: LD_INT 2
44507: ARRAY
44508: PPUSH
44509: LD_EXP 13
44513: PUSH
44514: LD_VAR 0 2
44518: ARRAY
44519: PUSH
44520: LD_INT 1
44522: ARRAY
44523: PUSH
44524: LD_INT 3
44526: ARRAY
44527: PPUSH
44528: LD_EXP 13
44532: PUSH
44533: LD_VAR 0 2
44537: ARRAY
44538: PUSH
44539: LD_INT 1
44541: ARRAY
44542: PUSH
44543: LD_INT 4
44545: ARRAY
44546: PPUSH
44547: CALL 15024 0 5
44551: IFFALSE 44832
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
44553: LD_ADDR_VAR 0 4
44557: PUSH
44558: LD_EXP 8
44562: PUSH
44563: LD_VAR 0 2
44567: ARRAY
44568: PPUSH
44569: LD_INT 25
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PPUSH
44579: CALL_OW 72
44583: PUSH
44584: LD_EXP 10
44588: PUSH
44589: LD_VAR 0 2
44593: ARRAY
44594: DIFF
44595: ST_TO_ADDR
// if not tmp then
44596: LD_VAR 0 4
44600: NOT
44601: IFFALSE 44605
// continue ;
44603: GO 44045
// for j in tmp do
44605: LD_ADDR_VAR 0 3
44609: PUSH
44610: LD_VAR 0 4
44614: PUSH
44615: FOR_IN
44616: IFFALSE 44828
// begin if not mc_builders [ i ] then
44618: LD_EXP 14
44622: PUSH
44623: LD_VAR 0 2
44627: ARRAY
44628: NOT
44629: IFFALSE 44687
// begin SetTag ( j , 103 ) ;
44631: LD_VAR 0 3
44635: PPUSH
44636: LD_INT 103
44638: PPUSH
44639: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
44643: LD_ADDR_EXP 14
44647: PUSH
44648: LD_EXP 14
44652: PPUSH
44653: LD_VAR 0 2
44657: PUSH
44658: LD_EXP 14
44662: PUSH
44663: LD_VAR 0 2
44667: ARRAY
44668: PUSH
44669: LD_INT 1
44671: PLUS
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PPUSH
44677: LD_VAR 0 3
44681: PPUSH
44682: CALL 8386 0 3
44686: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
44687: LD_VAR 0 3
44691: PPUSH
44692: CALL_OW 310
44696: IFFALSE 44707
// ComExitBuilding ( j ) ;
44698: LD_VAR 0 3
44702: PPUSH
44703: CALL_OW 122
// wait ( 3 ) ;
44707: LD_INT 3
44709: PPUSH
44710: CALL_OW 67
// if not mc_build_list [ i ] then
44714: LD_EXP 13
44718: PUSH
44719: LD_VAR 0 2
44723: ARRAY
44724: NOT
44725: IFFALSE 44729
// break ;
44727: GO 44828
// if not HasTask ( j ) then
44729: LD_VAR 0 3
44733: PPUSH
44734: CALL_OW 314
44738: NOT
44739: IFFALSE 44826
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
44741: LD_VAR 0 3
44745: PPUSH
44746: LD_EXP 13
44750: PUSH
44751: LD_VAR 0 2
44755: ARRAY
44756: PUSH
44757: LD_INT 1
44759: ARRAY
44760: PUSH
44761: LD_INT 1
44763: ARRAY
44764: PPUSH
44765: LD_EXP 13
44769: PUSH
44770: LD_VAR 0 2
44774: ARRAY
44775: PUSH
44776: LD_INT 1
44778: ARRAY
44779: PUSH
44780: LD_INT 2
44782: ARRAY
44783: PPUSH
44784: LD_EXP 13
44788: PUSH
44789: LD_VAR 0 2
44793: ARRAY
44794: PUSH
44795: LD_INT 1
44797: ARRAY
44798: PUSH
44799: LD_INT 3
44801: ARRAY
44802: PPUSH
44803: LD_EXP 13
44807: PUSH
44808: LD_VAR 0 2
44812: ARRAY
44813: PUSH
44814: LD_INT 1
44816: ARRAY
44817: PUSH
44818: LD_INT 4
44820: ARRAY
44821: PPUSH
44822: CALL_OW 145
// end ;
44826: GO 44615
44828: POP
44829: POP
// end else
44830: GO 44974
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
44832: LD_EXP 8
44836: PUSH
44837: LD_VAR 0 2
44841: ARRAY
44842: PPUSH
44843: LD_EXP 13
44847: PUSH
44848: LD_VAR 0 2
44852: ARRAY
44853: PUSH
44854: LD_INT 1
44856: ARRAY
44857: PUSH
44858: LD_INT 1
44860: ARRAY
44861: PPUSH
44862: LD_EXP 13
44866: PUSH
44867: LD_VAR 0 2
44871: ARRAY
44872: PUSH
44873: LD_INT 1
44875: ARRAY
44876: PUSH
44877: LD_INT 2
44879: ARRAY
44880: PPUSH
44881: LD_EXP 13
44885: PUSH
44886: LD_VAR 0 2
44890: ARRAY
44891: PUSH
44892: LD_INT 1
44894: ARRAY
44895: PUSH
44896: LD_INT 3
44898: ARRAY
44899: PPUSH
44900: LD_EXP 13
44904: PUSH
44905: LD_VAR 0 2
44909: ARRAY
44910: PUSH
44911: LD_INT 1
44913: ARRAY
44914: PUSH
44915: LD_INT 4
44917: ARRAY
44918: PPUSH
44919: CALL 14455 0 5
44923: NOT
44924: IFFALSE 44974
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
44926: LD_ADDR_EXP 13
44930: PUSH
44931: LD_EXP 13
44935: PPUSH
44936: LD_VAR 0 2
44940: PPUSH
44941: LD_EXP 13
44945: PUSH
44946: LD_VAR 0 2
44950: ARRAY
44951: PPUSH
44952: LD_INT 1
44954: PPUSH
44955: LD_INT 1
44957: NEG
44958: PPUSH
44959: LD_INT 0
44961: PPUSH
44962: CALL 7369 0 4
44966: PPUSH
44967: CALL_OW 1
44971: ST_TO_ADDR
// continue ;
44972: GO 44045
// end ; end ;
44974: GO 44045
44976: POP
44977: POP
// end ;
44978: LD_VAR 0 1
44982: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
44983: LD_INT 0
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
// if not mc_bases then
44991: LD_EXP 8
44995: NOT
44996: IFFALSE 45000
// exit ;
44998: GO 45427
// for i = 1 to mc_bases do
45000: LD_ADDR_VAR 0 2
45004: PUSH
45005: DOUBLE
45006: LD_INT 1
45008: DEC
45009: ST_TO_ADDR
45010: LD_EXP 8
45014: PUSH
45015: FOR_TO
45016: IFFALSE 45425
// begin tmp := mc_build_upgrade [ i ] ;
45018: LD_ADDR_VAR 0 4
45022: PUSH
45023: LD_EXP 40
45027: PUSH
45028: LD_VAR 0 2
45032: ARRAY
45033: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
45034: LD_ADDR_VAR 0 6
45038: PUSH
45039: LD_EXP 41
45043: PUSH
45044: LD_VAR 0 2
45048: ARRAY
45049: PPUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 30
45055: PUSH
45056: LD_INT 6
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 30
45065: PUSH
45066: LD_INT 7
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: PPUSH
45078: CALL_OW 72
45082: ST_TO_ADDR
// if not tmp and not lab then
45083: LD_VAR 0 4
45087: NOT
45088: PUSH
45089: LD_VAR 0 6
45093: NOT
45094: AND
45095: IFFALSE 45099
// continue ;
45097: GO 45015
// if tmp then
45099: LD_VAR 0 4
45103: IFFALSE 45223
// for j in tmp do
45105: LD_ADDR_VAR 0 3
45109: PUSH
45110: LD_VAR 0 4
45114: PUSH
45115: FOR_IN
45116: IFFALSE 45221
// begin if UpgradeCost ( j ) then
45118: LD_VAR 0 3
45122: PPUSH
45123: CALL 14115 0 1
45127: IFFALSE 45219
// begin ComUpgrade ( j ) ;
45129: LD_VAR 0 3
45133: PPUSH
45134: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
45138: LD_ADDR_EXP 40
45142: PUSH
45143: LD_EXP 40
45147: PPUSH
45148: LD_VAR 0 2
45152: PPUSH
45153: LD_EXP 40
45157: PUSH
45158: LD_VAR 0 2
45162: ARRAY
45163: PUSH
45164: LD_VAR 0 3
45168: DIFF
45169: PPUSH
45170: CALL_OW 1
45174: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
45175: LD_ADDR_EXP 15
45179: PUSH
45180: LD_EXP 15
45184: PPUSH
45185: LD_VAR 0 2
45189: PUSH
45190: LD_EXP 15
45194: PUSH
45195: LD_VAR 0 2
45199: ARRAY
45200: PUSH
45201: LD_INT 1
45203: PLUS
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PPUSH
45209: LD_VAR 0 3
45213: PPUSH
45214: CALL 8386 0 3
45218: ST_TO_ADDR
// end ; end ;
45219: GO 45115
45221: POP
45222: POP
// if not lab or not mc_lab_upgrade [ i ] then
45223: LD_VAR 0 6
45227: NOT
45228: PUSH
45229: LD_EXP 42
45233: PUSH
45234: LD_VAR 0 2
45238: ARRAY
45239: NOT
45240: OR
45241: IFFALSE 45245
// continue ;
45243: GO 45015
// for j in lab do
45245: LD_ADDR_VAR 0 3
45249: PUSH
45250: LD_VAR 0 6
45254: PUSH
45255: FOR_IN
45256: IFFALSE 45421
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
45258: LD_VAR 0 3
45262: PPUSH
45263: CALL_OW 266
45267: PUSH
45268: LD_INT 6
45270: PUSH
45271: LD_INT 7
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: IN
45278: PUSH
45279: LD_VAR 0 3
45283: PPUSH
45284: CALL_OW 461
45288: PUSH
45289: LD_INT 1
45291: NONEQUAL
45292: AND
45293: IFFALSE 45419
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
45295: LD_VAR 0 3
45299: PPUSH
45300: LD_EXP 42
45304: PUSH
45305: LD_VAR 0 2
45309: ARRAY
45310: PUSH
45311: LD_INT 1
45313: ARRAY
45314: PPUSH
45315: CALL 14320 0 2
45319: IFFALSE 45419
// begin ComCancel ( j ) ;
45321: LD_VAR 0 3
45325: PPUSH
45326: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
45330: LD_VAR 0 3
45334: PPUSH
45335: LD_EXP 42
45339: PUSH
45340: LD_VAR 0 2
45344: ARRAY
45345: PUSH
45346: LD_INT 1
45348: ARRAY
45349: PPUSH
45350: CALL_OW 207
// if not j in mc_construct_list [ i ] then
45354: LD_VAR 0 3
45358: PUSH
45359: LD_EXP 15
45363: PUSH
45364: LD_VAR 0 2
45368: ARRAY
45369: IN
45370: NOT
45371: IFFALSE 45417
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
45373: LD_ADDR_EXP 15
45377: PUSH
45378: LD_EXP 15
45382: PPUSH
45383: LD_VAR 0 2
45387: PUSH
45388: LD_EXP 15
45392: PUSH
45393: LD_VAR 0 2
45397: ARRAY
45398: PUSH
45399: LD_INT 1
45401: PLUS
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PPUSH
45407: LD_VAR 0 3
45411: PPUSH
45412: CALL 8386 0 3
45416: ST_TO_ADDR
// break ;
45417: GO 45421
// end ; end ; end ;
45419: GO 45255
45421: POP
45422: POP
// end ;
45423: GO 45015
45425: POP
45426: POP
// end ;
45427: LD_VAR 0 1
45431: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
45432: LD_INT 0
45434: PPUSH
45435: PPUSH
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
// if not mc_bases then
45441: LD_EXP 8
45445: NOT
45446: IFFALSE 45450
// exit ;
45448: GO 45779
// for i = 1 to mc_bases do
45450: LD_ADDR_VAR 0 2
45454: PUSH
45455: DOUBLE
45456: LD_INT 1
45458: DEC
45459: ST_TO_ADDR
45460: LD_EXP 8
45464: PUSH
45465: FOR_TO
45466: IFFALSE 45777
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
45468: LD_EXP 16
45472: PUSH
45473: LD_VAR 0 2
45477: ARRAY
45478: NOT
45479: PUSH
45480: LD_EXP 8
45484: PUSH
45485: LD_VAR 0 2
45489: ARRAY
45490: PPUSH
45491: LD_INT 30
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PPUSH
45501: CALL_OW 72
45505: NOT
45506: OR
45507: IFFALSE 45511
// continue ;
45509: GO 45465
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
45511: LD_EXP 16
45515: PUSH
45516: LD_VAR 0 2
45520: ARRAY
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: PPUSH
45526: CALL_OW 269
45530: IFFALSE 45596
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
45532: LD_ADDR_VAR 0 4
45536: PUSH
45537: LD_EXP 16
45541: PUSH
45542: LD_VAR 0 2
45546: ARRAY
45547: PPUSH
45548: LD_INT 1
45550: PPUSH
45551: CALL_OW 3
45555: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
45556: LD_ADDR_EXP 16
45560: PUSH
45561: LD_EXP 16
45565: PPUSH
45566: LD_VAR 0 2
45570: PPUSH
45571: LD_VAR 0 4
45575: PPUSH
45576: CALL_OW 1
45580: ST_TO_ADDR
// if not mc_turret_list [ i ] then
45581: LD_EXP 16
45585: PUSH
45586: LD_VAR 0 2
45590: ARRAY
45591: NOT
45592: IFFALSE 45596
// continue ;
45594: GO 45465
// end ; busy := false ;
45596: LD_ADDR_VAR 0 6
45600: PUSH
45601: LD_INT 0
45603: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
45604: LD_ADDR_VAR 0 4
45608: PUSH
45609: LD_EXP 8
45613: PUSH
45614: LD_VAR 0 2
45618: ARRAY
45619: PPUSH
45620: LD_INT 30
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PPUSH
45630: CALL_OW 72
45634: ST_TO_ADDR
// for j in tmp do
45635: LD_ADDR_VAR 0 3
45639: PUSH
45640: LD_VAR 0 4
45644: PUSH
45645: FOR_IN
45646: IFFALSE 45674
// if not BuildingStatus ( j ) = bs_idle then
45648: LD_VAR 0 3
45652: PPUSH
45653: CALL_OW 461
45657: PUSH
45658: LD_INT 2
45660: EQUAL
45661: NOT
45662: IFFALSE 45672
// busy := true ;
45664: LD_ADDR_VAR 0 6
45668: PUSH
45669: LD_INT 1
45671: ST_TO_ADDR
45672: GO 45645
45674: POP
45675: POP
// if busy then
45676: LD_VAR 0 6
45680: IFFALSE 45684
// continue ;
45682: GO 45465
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
45684: LD_ADDR_VAR 0 7
45688: PUSH
45689: LD_EXP 16
45693: PUSH
45694: LD_VAR 0 2
45698: ARRAY
45699: PUSH
45700: LD_INT 1
45702: ARRAY
45703: PPUSH
45704: CALL 12679 0 1
45708: ST_TO_ADDR
// if not weapon then
45709: LD_VAR 0 7
45713: NOT
45714: IFFALSE 45718
// continue ;
45716: GO 45465
// if mc_allowed_tower_weapons [ i ] then
45718: LD_EXP 46
45722: PUSH
45723: LD_VAR 0 2
45727: ARRAY
45728: IFFALSE 45751
// if not weapon in mc_allowed_tower_weapons [ i ] then
45730: LD_VAR 0 7
45734: PUSH
45735: LD_EXP 46
45739: PUSH
45740: LD_VAR 0 2
45744: ARRAY
45745: IN
45746: NOT
45747: IFFALSE 45751
// continue ;
45749: GO 45465
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
45751: LD_EXP 16
45755: PUSH
45756: LD_VAR 0 2
45760: ARRAY
45761: PUSH
45762: LD_INT 1
45764: ARRAY
45765: PPUSH
45766: LD_VAR 0 7
45770: PPUSH
45771: CALL_OW 148
// end ;
45775: GO 45465
45777: POP
45778: POP
// end ;
45779: LD_VAR 0 1
45783: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
45784: LD_INT 0
45786: PPUSH
45787: PPUSH
45788: PPUSH
45789: PPUSH
45790: PPUSH
45791: PPUSH
// if not mc_bases then
45792: LD_EXP 8
45796: NOT
45797: IFFALSE 45801
// exit ;
45799: GO 46786
// for i = 1 to mc_bases do
45801: LD_ADDR_VAR 0 2
45805: PUSH
45806: DOUBLE
45807: LD_INT 1
45809: DEC
45810: ST_TO_ADDR
45811: LD_EXP 8
45815: PUSH
45816: FOR_TO
45817: IFFALSE 46784
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
45819: LD_EXP 21
45823: PUSH
45824: LD_VAR 0 2
45828: ARRAY
45829: NOT
45830: PUSH
45831: LD_EXP 21
45835: PUSH
45836: LD_VAR 0 2
45840: ARRAY
45841: PUSH
45842: LD_EXP 22
45846: PUSH
45847: LD_VAR 0 2
45851: ARRAY
45852: EQUAL
45853: OR
45854: IFFALSE 45858
// continue ;
45856: GO 45816
// if mc_miners [ i ] then
45858: LD_EXP 22
45862: PUSH
45863: LD_VAR 0 2
45867: ARRAY
45868: IFFALSE 46471
// begin k := 1 ;
45870: LD_ADDR_VAR 0 4
45874: PUSH
45875: LD_INT 1
45877: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
45878: LD_ADDR_VAR 0 3
45882: PUSH
45883: DOUBLE
45884: LD_EXP 22
45888: PUSH
45889: LD_VAR 0 2
45893: ARRAY
45894: INC
45895: ST_TO_ADDR
45896: LD_INT 1
45898: PUSH
45899: FOR_DOWNTO
45900: IFFALSE 46469
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
45902: LD_EXP 22
45906: PUSH
45907: LD_VAR 0 2
45911: ARRAY
45912: PUSH
45913: LD_VAR 0 3
45917: ARRAY
45918: PPUSH
45919: CALL_OW 301
45923: IFFALSE 45986
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
45925: LD_ADDR_VAR 0 5
45929: PUSH
45930: LD_EXP 22
45934: PUSH
45935: LD_VAR 0 2
45939: ARRAY
45940: PUSH
45941: LD_EXP 22
45945: PUSH
45946: LD_VAR 0 2
45950: ARRAY
45951: PUSH
45952: LD_VAR 0 3
45956: ARRAY
45957: DIFF
45958: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
45959: LD_ADDR_EXP 22
45963: PUSH
45964: LD_EXP 22
45968: PPUSH
45969: LD_VAR 0 2
45973: PPUSH
45974: LD_VAR 0 5
45978: PPUSH
45979: CALL_OW 1
45983: ST_TO_ADDR
// continue ;
45984: GO 45899
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
45986: LD_EXP 22
45990: PUSH
45991: LD_VAR 0 2
45995: ARRAY
45996: PUSH
45997: LD_VAR 0 3
46001: ARRAY
46002: PPUSH
46003: CALL 7887 0 1
46007: PUSH
46008: LD_EXP 22
46012: PUSH
46013: LD_VAR 0 2
46017: ARRAY
46018: PUSH
46019: LD_VAR 0 3
46023: ARRAY
46024: PPUSH
46025: CALL_OW 255
46029: PPUSH
46030: LD_EXP 21
46034: PUSH
46035: LD_VAR 0 2
46039: ARRAY
46040: PUSH
46041: LD_VAR 0 4
46045: ARRAY
46046: PUSH
46047: LD_INT 1
46049: ARRAY
46050: PPUSH
46051: LD_EXP 21
46055: PUSH
46056: LD_VAR 0 2
46060: ARRAY
46061: PUSH
46062: LD_VAR 0 4
46066: ARRAY
46067: PUSH
46068: LD_INT 2
46070: ARRAY
46071: PPUSH
46072: LD_INT 15
46074: PPUSH
46075: CALL 8880 0 4
46079: PUSH
46080: LD_INT 4
46082: ARRAY
46083: PUSH
46084: LD_EXP 22
46088: PUSH
46089: LD_VAR 0 2
46093: ARRAY
46094: PUSH
46095: LD_VAR 0 3
46099: ARRAY
46100: PPUSH
46101: LD_INT 10
46103: PPUSH
46104: CALL 10577 0 2
46108: PUSH
46109: LD_INT 4
46111: ARRAY
46112: OR
46113: AND
46114: IFFALSE 46137
// ComStop ( mc_miners [ i ] [ j ] ) ;
46116: LD_EXP 22
46120: PUSH
46121: LD_VAR 0 2
46125: ARRAY
46126: PUSH
46127: LD_VAR 0 3
46131: ARRAY
46132: PPUSH
46133: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
46137: LD_EXP 22
46141: PUSH
46142: LD_VAR 0 2
46146: ARRAY
46147: PUSH
46148: LD_VAR 0 3
46152: ARRAY
46153: PPUSH
46154: CALL_OW 257
46158: PUSH
46159: LD_INT 1
46161: EQUAL
46162: PUSH
46163: LD_EXP 22
46167: PUSH
46168: LD_VAR 0 2
46172: ARRAY
46173: PUSH
46174: LD_VAR 0 3
46178: ARRAY
46179: PPUSH
46180: CALL_OW 459
46184: NOT
46185: AND
46186: PUSH
46187: LD_EXP 22
46191: PUSH
46192: LD_VAR 0 2
46196: ARRAY
46197: PUSH
46198: LD_VAR 0 3
46202: ARRAY
46203: PPUSH
46204: CALL_OW 255
46208: PPUSH
46209: LD_EXP 21
46213: PUSH
46214: LD_VAR 0 2
46218: ARRAY
46219: PUSH
46220: LD_VAR 0 4
46224: ARRAY
46225: PUSH
46226: LD_INT 1
46228: ARRAY
46229: PPUSH
46230: LD_EXP 21
46234: PUSH
46235: LD_VAR 0 2
46239: ARRAY
46240: PUSH
46241: LD_VAR 0 4
46245: ARRAY
46246: PUSH
46247: LD_INT 2
46249: ARRAY
46250: PPUSH
46251: LD_INT 15
46253: PPUSH
46254: CALL 8880 0 4
46258: PUSH
46259: LD_INT 4
46261: ARRAY
46262: PUSH
46263: LD_INT 0
46265: EQUAL
46266: AND
46267: PUSH
46268: LD_EXP 22
46272: PUSH
46273: LD_VAR 0 2
46277: ARRAY
46278: PUSH
46279: LD_VAR 0 3
46283: ARRAY
46284: PPUSH
46285: CALL_OW 314
46289: NOT
46290: AND
46291: IFFALSE 46467
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
46293: LD_EXP 22
46297: PUSH
46298: LD_VAR 0 2
46302: ARRAY
46303: PUSH
46304: LD_VAR 0 3
46308: ARRAY
46309: PPUSH
46310: CALL_OW 310
46314: IFFALSE 46337
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
46316: LD_EXP 22
46320: PUSH
46321: LD_VAR 0 2
46325: ARRAY
46326: PUSH
46327: LD_VAR 0 3
46331: ARRAY
46332: PPUSH
46333: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
46337: LD_EXP 22
46341: PUSH
46342: LD_VAR 0 2
46346: ARRAY
46347: PUSH
46348: LD_VAR 0 3
46352: ARRAY
46353: PPUSH
46354: CALL_OW 314
46358: NOT
46359: IFFALSE 46427
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
46361: LD_EXP 22
46365: PUSH
46366: LD_VAR 0 2
46370: ARRAY
46371: PUSH
46372: LD_VAR 0 3
46376: ARRAY
46377: PPUSH
46378: LD_EXP 21
46382: PUSH
46383: LD_VAR 0 2
46387: ARRAY
46388: PUSH
46389: LD_VAR 0 4
46393: ARRAY
46394: PUSH
46395: LD_INT 1
46397: ARRAY
46398: PPUSH
46399: LD_EXP 21
46403: PUSH
46404: LD_VAR 0 2
46408: ARRAY
46409: PUSH
46410: LD_VAR 0 4
46414: ARRAY
46415: PUSH
46416: LD_INT 2
46418: ARRAY
46419: PPUSH
46420: LD_INT 0
46422: PPUSH
46423: CALL_OW 193
// k := k + 1 ;
46427: LD_ADDR_VAR 0 4
46431: PUSH
46432: LD_VAR 0 4
46436: PUSH
46437: LD_INT 1
46439: PLUS
46440: ST_TO_ADDR
// if k > mc_mines [ i ] then
46441: LD_VAR 0 4
46445: PUSH
46446: LD_EXP 21
46450: PUSH
46451: LD_VAR 0 2
46455: ARRAY
46456: GREATER
46457: IFFALSE 46467
// k := 1 ;
46459: LD_ADDR_VAR 0 4
46463: PUSH
46464: LD_INT 1
46466: ST_TO_ADDR
// end ; end ;
46467: GO 45899
46469: POP
46470: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
46471: LD_ADDR_VAR 0 5
46475: PUSH
46476: LD_EXP 8
46480: PUSH
46481: LD_VAR 0 2
46485: ARRAY
46486: PPUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 30
46492: PUSH
46493: LD_INT 4
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 30
46502: PUSH
46503: LD_INT 5
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 30
46512: PUSH
46513: LD_INT 32
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: PPUSH
46526: CALL_OW 72
46530: ST_TO_ADDR
// if not tmp then
46531: LD_VAR 0 5
46535: NOT
46536: IFFALSE 46540
// continue ;
46538: GO 45816
// list := [ ] ;
46540: LD_ADDR_VAR 0 6
46544: PUSH
46545: EMPTY
46546: ST_TO_ADDR
// for j in tmp do
46547: LD_ADDR_VAR 0 3
46551: PUSH
46552: LD_VAR 0 5
46556: PUSH
46557: FOR_IN
46558: IFFALSE 46627
// begin for k in UnitsInside ( j ) do
46560: LD_ADDR_VAR 0 4
46564: PUSH
46565: LD_VAR 0 3
46569: PPUSH
46570: CALL_OW 313
46574: PUSH
46575: FOR_IN
46576: IFFALSE 46623
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
46578: LD_VAR 0 4
46582: PPUSH
46583: CALL_OW 257
46587: PUSH
46588: LD_INT 1
46590: EQUAL
46591: PUSH
46592: LD_VAR 0 4
46596: PPUSH
46597: CALL_OW 459
46601: NOT
46602: AND
46603: IFFALSE 46621
// list := list ^ k ;
46605: LD_ADDR_VAR 0 6
46609: PUSH
46610: LD_VAR 0 6
46614: PUSH
46615: LD_VAR 0 4
46619: ADD
46620: ST_TO_ADDR
46621: GO 46575
46623: POP
46624: POP
// end ;
46625: GO 46557
46627: POP
46628: POP
// list := list diff mc_miners [ i ] ;
46629: LD_ADDR_VAR 0 6
46633: PUSH
46634: LD_VAR 0 6
46638: PUSH
46639: LD_EXP 22
46643: PUSH
46644: LD_VAR 0 2
46648: ARRAY
46649: DIFF
46650: ST_TO_ADDR
// if not list then
46651: LD_VAR 0 6
46655: NOT
46656: IFFALSE 46660
// continue ;
46658: GO 45816
// k := mc_mines [ i ] - mc_miners [ i ] ;
46660: LD_ADDR_VAR 0 4
46664: PUSH
46665: LD_EXP 21
46669: PUSH
46670: LD_VAR 0 2
46674: ARRAY
46675: PUSH
46676: LD_EXP 22
46680: PUSH
46681: LD_VAR 0 2
46685: ARRAY
46686: MINUS
46687: ST_TO_ADDR
// if k > list then
46688: LD_VAR 0 4
46692: PUSH
46693: LD_VAR 0 6
46697: GREATER
46698: IFFALSE 46710
// k := list ;
46700: LD_ADDR_VAR 0 4
46704: PUSH
46705: LD_VAR 0 6
46709: ST_TO_ADDR
// for j = 1 to k do
46710: LD_ADDR_VAR 0 3
46714: PUSH
46715: DOUBLE
46716: LD_INT 1
46718: DEC
46719: ST_TO_ADDR
46720: LD_VAR 0 4
46724: PUSH
46725: FOR_TO
46726: IFFALSE 46780
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
46728: LD_ADDR_EXP 22
46732: PUSH
46733: LD_EXP 22
46737: PPUSH
46738: LD_VAR 0 2
46742: PUSH
46743: LD_EXP 22
46747: PUSH
46748: LD_VAR 0 2
46752: ARRAY
46753: PUSH
46754: LD_INT 1
46756: PLUS
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PPUSH
46762: LD_VAR 0 6
46766: PUSH
46767: LD_VAR 0 3
46771: ARRAY
46772: PPUSH
46773: CALL 8386 0 3
46777: ST_TO_ADDR
46778: GO 46725
46780: POP
46781: POP
// end ;
46782: GO 45816
46784: POP
46785: POP
// end ;
46786: LD_VAR 0 1
46790: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
46791: LD_INT 0
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
// if not mc_bases then
46802: LD_EXP 8
46806: NOT
46807: IFFALSE 46811
// exit ;
46809: GO 48290
// for i = 1 to mc_bases do
46811: LD_ADDR_VAR 0 2
46815: PUSH
46816: DOUBLE
46817: LD_INT 1
46819: DEC
46820: ST_TO_ADDR
46821: LD_EXP 8
46825: PUSH
46826: FOR_TO
46827: IFFALSE 48288
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
46829: LD_EXP 8
46833: PUSH
46834: LD_VAR 0 2
46838: ARRAY
46839: NOT
46840: PUSH
46841: LD_EXP 15
46845: PUSH
46846: LD_VAR 0 2
46850: ARRAY
46851: OR
46852: IFFALSE 46856
// continue ;
46854: GO 46826
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
46856: LD_EXP 24
46860: PUSH
46861: LD_VAR 0 2
46865: ARRAY
46866: NOT
46867: PUSH
46868: LD_EXP 25
46872: PUSH
46873: LD_VAR 0 2
46877: ARRAY
46878: AND
46879: IFFALSE 46917
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
46881: LD_ADDR_EXP 25
46885: PUSH
46886: LD_EXP 25
46890: PPUSH
46891: LD_VAR 0 2
46895: PPUSH
46896: EMPTY
46897: PPUSH
46898: CALL_OW 1
46902: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
46903: LD_VAR 0 2
46907: PPUSH
46908: LD_INT 107
46910: PPUSH
46911: CALL 42409 0 2
// continue ;
46915: GO 46826
// end ; target := [ ] ;
46917: LD_ADDR_VAR 0 5
46921: PUSH
46922: EMPTY
46923: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
46924: LD_ADDR_VAR 0 3
46928: PUSH
46929: DOUBLE
46930: LD_EXP 24
46934: PUSH
46935: LD_VAR 0 2
46939: ARRAY
46940: INC
46941: ST_TO_ADDR
46942: LD_INT 1
46944: PUSH
46945: FOR_DOWNTO
46946: IFFALSE 47206
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
46948: LD_EXP 24
46952: PUSH
46953: LD_VAR 0 2
46957: ARRAY
46958: PUSH
46959: LD_VAR 0 3
46963: ARRAY
46964: PUSH
46965: LD_INT 2
46967: ARRAY
46968: PPUSH
46969: LD_EXP 24
46973: PUSH
46974: LD_VAR 0 2
46978: ARRAY
46979: PUSH
46980: LD_VAR 0 3
46984: ARRAY
46985: PUSH
46986: LD_INT 3
46988: ARRAY
46989: PPUSH
46990: CALL_OW 488
46994: PUSH
46995: LD_EXP 24
46999: PUSH
47000: LD_VAR 0 2
47004: ARRAY
47005: PUSH
47006: LD_VAR 0 3
47010: ARRAY
47011: PUSH
47012: LD_INT 2
47014: ARRAY
47015: PPUSH
47016: LD_EXP 24
47020: PUSH
47021: LD_VAR 0 2
47025: ARRAY
47026: PUSH
47027: LD_VAR 0 3
47031: ARRAY
47032: PUSH
47033: LD_INT 3
47035: ARRAY
47036: PPUSH
47037: CALL_OW 284
47041: PUSH
47042: LD_INT 0
47044: EQUAL
47045: AND
47046: IFFALSE 47101
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
47048: LD_ADDR_VAR 0 4
47052: PUSH
47053: LD_EXP 24
47057: PUSH
47058: LD_VAR 0 2
47062: ARRAY
47063: PPUSH
47064: LD_VAR 0 3
47068: PPUSH
47069: CALL_OW 3
47073: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
47074: LD_ADDR_EXP 24
47078: PUSH
47079: LD_EXP 24
47083: PPUSH
47084: LD_VAR 0 2
47088: PPUSH
47089: LD_VAR 0 4
47093: PPUSH
47094: CALL_OW 1
47098: ST_TO_ADDR
// continue ;
47099: GO 46945
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
47101: LD_EXP 8
47105: PUSH
47106: LD_VAR 0 2
47110: ARRAY
47111: PUSH
47112: LD_INT 1
47114: ARRAY
47115: PPUSH
47116: CALL_OW 255
47120: PPUSH
47121: LD_EXP 24
47125: PUSH
47126: LD_VAR 0 2
47130: ARRAY
47131: PUSH
47132: LD_VAR 0 3
47136: ARRAY
47137: PUSH
47138: LD_INT 2
47140: ARRAY
47141: PPUSH
47142: LD_EXP 24
47146: PUSH
47147: LD_VAR 0 2
47151: ARRAY
47152: PUSH
47153: LD_VAR 0 3
47157: ARRAY
47158: PUSH
47159: LD_INT 3
47161: ARRAY
47162: PPUSH
47163: LD_INT 20
47165: PPUSH
47166: CALL 8880 0 4
47170: PUSH
47171: LD_INT 4
47173: ARRAY
47174: PUSH
47175: LD_INT 0
47177: EQUAL
47178: IFFALSE 47204
// begin target := mc_crates [ i ] [ j ] ;
47180: LD_ADDR_VAR 0 5
47184: PUSH
47185: LD_EXP 24
47189: PUSH
47190: LD_VAR 0 2
47194: ARRAY
47195: PUSH
47196: LD_VAR 0 3
47200: ARRAY
47201: ST_TO_ADDR
// break ;
47202: GO 47206
// end ; end ;
47204: GO 46945
47206: POP
47207: POP
// if not target then
47208: LD_VAR 0 5
47212: NOT
47213: IFFALSE 47217
// continue ;
47215: GO 46826
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
47217: LD_ADDR_VAR 0 6
47221: PUSH
47222: LD_EXP 27
47226: PUSH
47227: LD_VAR 0 2
47231: ARRAY
47232: PPUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 58
47241: PUSH
47242: EMPTY
47243: LIST
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 61
47251: PUSH
47252: EMPTY
47253: LIST
47254: PUSH
47255: LD_INT 33
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 33
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 34
47287: PUSH
47288: LD_INT 32
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 34
47297: PUSH
47298: LD_INT 51
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 34
47307: PUSH
47308: LD_INT 12
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PPUSH
47325: CALL_OW 72
47329: ST_TO_ADDR
// if not cargo then
47330: LD_VAR 0 6
47334: NOT
47335: IFFALSE 47823
// begin if mc_crates_collector [ i ] < 5 then
47337: LD_EXP 25
47341: PUSH
47342: LD_VAR 0 2
47346: ARRAY
47347: PUSH
47348: LD_INT 5
47350: LESS
47351: IFFALSE 47637
// begin if mc_ape [ i ] then
47353: LD_EXP 37
47357: PUSH
47358: LD_VAR 0 2
47362: ARRAY
47363: IFFALSE 47410
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
47365: LD_ADDR_VAR 0 4
47369: PUSH
47370: LD_EXP 37
47374: PUSH
47375: LD_VAR 0 2
47379: ARRAY
47380: PPUSH
47381: LD_INT 25
47383: PUSH
47384: LD_INT 16
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 24
47393: PUSH
47394: LD_INT 750
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PPUSH
47405: CALL_OW 72
47409: ST_TO_ADDR
// if not tmp then
47410: LD_VAR 0 4
47414: NOT
47415: IFFALSE 47464
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
47417: LD_ADDR_VAR 0 4
47421: PUSH
47422: LD_EXP 8
47426: PUSH
47427: LD_VAR 0 2
47431: ARRAY
47432: PPUSH
47433: LD_INT 25
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 24
47445: PUSH
47446: LD_INT 750
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PPUSH
47457: CALL_OW 72
47461: ST_TO_ADDR
47462: GO 47525
// if tmp < 5 then
47464: LD_VAR 0 4
47468: PUSH
47469: LD_INT 5
47471: LESS
47472: IFFALSE 47525
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
47474: LD_ADDR_VAR 0 4
47478: PUSH
47479: LD_VAR 0 4
47483: PUSH
47484: LD_EXP 8
47488: PUSH
47489: LD_VAR 0 2
47493: ARRAY
47494: PPUSH
47495: LD_INT 25
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 24
47507: PUSH
47508: LD_INT 750
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PPUSH
47519: CALL_OW 72
47523: UNION
47524: ST_TO_ADDR
// if not tmp then
47525: LD_VAR 0 4
47529: NOT
47530: IFFALSE 47534
// continue ;
47532: GO 46826
// for j in tmp do
47534: LD_ADDR_VAR 0 3
47538: PUSH
47539: LD_VAR 0 4
47543: PUSH
47544: FOR_IN
47545: IFFALSE 47635
// if not GetTag ( j ) then
47547: LD_VAR 0 3
47551: PPUSH
47552: CALL_OW 110
47556: NOT
47557: IFFALSE 47633
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
47559: LD_ADDR_EXP 25
47563: PUSH
47564: LD_EXP 25
47568: PPUSH
47569: LD_VAR 0 2
47573: PUSH
47574: LD_EXP 25
47578: PUSH
47579: LD_VAR 0 2
47583: ARRAY
47584: PUSH
47585: LD_INT 1
47587: PLUS
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PPUSH
47593: LD_VAR 0 3
47597: PPUSH
47598: CALL 8386 0 3
47602: ST_TO_ADDR
// SetTag ( j , 107 ) ;
47603: LD_VAR 0 3
47607: PPUSH
47608: LD_INT 107
47610: PPUSH
47611: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
47615: LD_EXP 25
47619: PUSH
47620: LD_VAR 0 2
47624: ARRAY
47625: PUSH
47626: LD_INT 5
47628: GREATEREQUAL
47629: IFFALSE 47633
// break ;
47631: GO 47635
// end ;
47633: GO 47544
47635: POP
47636: POP
// end ; if mc_crates_collector [ i ] and target then
47637: LD_EXP 25
47641: PUSH
47642: LD_VAR 0 2
47646: ARRAY
47647: PUSH
47648: LD_VAR 0 5
47652: AND
47653: IFFALSE 47821
// begin if mc_crates_collector [ i ] < target [ 1 ] then
47655: LD_EXP 25
47659: PUSH
47660: LD_VAR 0 2
47664: ARRAY
47665: PUSH
47666: LD_VAR 0 5
47670: PUSH
47671: LD_INT 1
47673: ARRAY
47674: LESS
47675: IFFALSE 47695
// tmp := mc_crates_collector [ i ] else
47677: LD_ADDR_VAR 0 4
47681: PUSH
47682: LD_EXP 25
47686: PUSH
47687: LD_VAR 0 2
47691: ARRAY
47692: ST_TO_ADDR
47693: GO 47709
// tmp := target [ 1 ] ;
47695: LD_ADDR_VAR 0 4
47699: PUSH
47700: LD_VAR 0 5
47704: PUSH
47705: LD_INT 1
47707: ARRAY
47708: ST_TO_ADDR
// for j = 1 to tmp do
47709: LD_ADDR_VAR 0 3
47713: PUSH
47714: DOUBLE
47715: LD_INT 1
47717: DEC
47718: ST_TO_ADDR
47719: LD_VAR 0 4
47723: PUSH
47724: FOR_TO
47725: IFFALSE 47819
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
47727: LD_EXP 25
47731: PUSH
47732: LD_VAR 0 2
47736: ARRAY
47737: PUSH
47738: LD_VAR 0 3
47742: ARRAY
47743: PPUSH
47744: CALL_OW 310
47748: IFFALSE 47771
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
47750: LD_EXP 25
47754: PUSH
47755: LD_VAR 0 2
47759: ARRAY
47760: PUSH
47761: LD_VAR 0 3
47765: ARRAY
47766: PPUSH
47767: CALL_OW 122
// wait ( 3 ) ;
47771: LD_INT 3
47773: PPUSH
47774: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
47778: LD_EXP 25
47782: PUSH
47783: LD_VAR 0 2
47787: ARRAY
47788: PUSH
47789: LD_VAR 0 3
47793: ARRAY
47794: PPUSH
47795: LD_VAR 0 5
47799: PUSH
47800: LD_INT 2
47802: ARRAY
47803: PPUSH
47804: LD_VAR 0 5
47808: PUSH
47809: LD_INT 3
47811: ARRAY
47812: PPUSH
47813: CALL_OW 117
// end ;
47817: GO 47724
47819: POP
47820: POP
// end ; end else
47821: GO 48286
// begin for j in cargo do
47823: LD_ADDR_VAR 0 3
47827: PUSH
47828: LD_VAR 0 6
47832: PUSH
47833: FOR_IN
47834: IFFALSE 48284
// begin if GetTag ( j ) <> 0 then
47836: LD_VAR 0 3
47840: PPUSH
47841: CALL_OW 110
47845: PUSH
47846: LD_INT 0
47848: NONEQUAL
47849: IFFALSE 47853
// continue ;
47851: GO 47833
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
47853: LD_VAR 0 3
47857: PPUSH
47858: CALL_OW 262
47862: PUSH
47863: LD_INT 2
47865: EQUAL
47866: PUSH
47867: LD_VAR 0 3
47871: PPUSH
47872: CALL_OW 261
47876: PUSH
47877: LD_INT 15
47879: LESS
47880: AND
47881: IFFALSE 47885
// continue ;
47883: GO 47833
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
47885: LD_VAR 0 3
47889: PPUSH
47890: CALL_OW 262
47894: PUSH
47895: LD_INT 1
47897: EQUAL
47898: PUSH
47899: LD_VAR 0 3
47903: PPUSH
47904: CALL_OW 261
47908: PUSH
47909: LD_INT 10
47911: LESS
47912: AND
47913: IFFALSE 48223
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
47915: LD_ADDR_VAR 0 7
47919: PUSH
47920: LD_EXP 8
47924: PUSH
47925: LD_VAR 0 2
47929: ARRAY
47930: PPUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 30
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 30
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: PPUSH
47959: CALL_OW 72
47963: ST_TO_ADDR
// if not depot then
47964: LD_VAR 0 7
47968: NOT
47969: IFFALSE 47973
// continue ;
47971: GO 47833
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
47973: LD_VAR 0 3
47977: PPUSH
47978: LD_VAR 0 7
47982: PPUSH
47983: LD_VAR 0 3
47987: PPUSH
47988: CALL_OW 74
47992: PPUSH
47993: CALL_OW 296
47997: PUSH
47998: LD_INT 6
48000: LESS
48001: IFFALSE 48017
// SetFuel ( j , 100 ) else
48003: LD_VAR 0 3
48007: PPUSH
48008: LD_INT 100
48010: PPUSH
48011: CALL_OW 240
48015: GO 48223
// if GetFuel ( j ) = 0 then
48017: LD_VAR 0 3
48021: PPUSH
48022: CALL_OW 261
48026: PUSH
48027: LD_INT 0
48029: EQUAL
48030: IFFALSE 48223
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
48032: LD_ADDR_EXP 27
48036: PUSH
48037: LD_EXP 27
48041: PPUSH
48042: LD_VAR 0 2
48046: PPUSH
48047: LD_EXP 27
48051: PUSH
48052: LD_VAR 0 2
48056: ARRAY
48057: PUSH
48058: LD_VAR 0 3
48062: DIFF
48063: PPUSH
48064: CALL_OW 1
48068: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
48069: LD_VAR 0 3
48073: PPUSH
48074: CALL_OW 263
48078: PUSH
48079: LD_INT 1
48081: EQUAL
48082: IFFALSE 48098
// ComExitVehicle ( IsInUnit ( j ) ) ;
48084: LD_VAR 0 3
48088: PPUSH
48089: CALL_OW 310
48093: PPUSH
48094: CALL_OW 121
// if GetControl ( j ) = control_remote then
48098: LD_VAR 0 3
48102: PPUSH
48103: CALL_OW 263
48107: PUSH
48108: LD_INT 2
48110: EQUAL
48111: IFFALSE 48122
// ComUnlink ( j ) ;
48113: LD_VAR 0 3
48117: PPUSH
48118: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
48122: LD_ADDR_VAR 0 8
48126: PUSH
48127: LD_VAR 0 2
48131: PPUSH
48132: LD_INT 3
48134: PPUSH
48135: CALL 55904 0 2
48139: ST_TO_ADDR
// if fac then
48140: LD_VAR 0 8
48144: IFFALSE 48221
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
48146: LD_ADDR_VAR 0 9
48150: PUSH
48151: LD_VAR 0 8
48155: PPUSH
48156: LD_VAR 0 3
48160: PPUSH
48161: CALL_OW 265
48165: PPUSH
48166: LD_VAR 0 3
48170: PPUSH
48171: CALL_OW 262
48175: PPUSH
48176: LD_VAR 0 3
48180: PPUSH
48181: CALL_OW 263
48185: PPUSH
48186: LD_VAR 0 3
48190: PPUSH
48191: CALL_OW 264
48195: PPUSH
48196: CALL 5551 0 5
48200: ST_TO_ADDR
// if components then
48201: LD_VAR 0 9
48205: IFFALSE 48221
// MC_InsertProduceList ( i , components ) ;
48207: LD_VAR 0 2
48211: PPUSH
48212: LD_VAR 0 9
48216: PPUSH
48217: CALL 55471 0 2
// end ; continue ;
48221: GO 47833
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
48223: LD_VAR 0 3
48227: PPUSH
48228: LD_INT 1
48230: PPUSH
48231: CALL_OW 289
48235: PUSH
48236: LD_INT 100
48238: LESS
48239: PUSH
48240: LD_VAR 0 3
48244: PPUSH
48245: CALL_OW 314
48249: NOT
48250: AND
48251: IFFALSE 48280
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
48253: LD_VAR 0 3
48257: PPUSH
48258: LD_VAR 0 5
48262: PUSH
48263: LD_INT 2
48265: ARRAY
48266: PPUSH
48267: LD_VAR 0 5
48271: PUSH
48272: LD_INT 3
48274: ARRAY
48275: PPUSH
48276: CALL_OW 117
// break ;
48280: GO 48284
// end ;
48282: GO 47833
48284: POP
48285: POP
// end ; end ;
48286: GO 46826
48288: POP
48289: POP
// end ;
48290: LD_VAR 0 1
48294: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
48295: LD_INT 0
48297: PPUSH
48298: PPUSH
48299: PPUSH
48300: PPUSH
// if not mc_bases then
48301: LD_EXP 8
48305: NOT
48306: IFFALSE 48310
// exit ;
48308: GO 48471
// for i = 1 to mc_bases do
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: DOUBLE
48316: LD_INT 1
48318: DEC
48319: ST_TO_ADDR
48320: LD_EXP 8
48324: PUSH
48325: FOR_TO
48326: IFFALSE 48469
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
48328: LD_ADDR_VAR 0 4
48332: PUSH
48333: LD_EXP 27
48337: PUSH
48338: LD_VAR 0 2
48342: ARRAY
48343: PUSH
48344: LD_EXP 30
48348: PUSH
48349: LD_VAR 0 2
48353: ARRAY
48354: ADD
48355: PPUSH
48356: LD_INT 33
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PPUSH
48366: CALL_OW 72
48370: ST_TO_ADDR
// if tmp then
48371: LD_VAR 0 4
48375: IFFALSE 48467
// for j in tmp do
48377: LD_ADDR_VAR 0 3
48381: PUSH
48382: LD_VAR 0 4
48386: PUSH
48387: FOR_IN
48388: IFFALSE 48465
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
48390: LD_VAR 0 3
48394: PPUSH
48395: CALL_OW 312
48399: NOT
48400: PUSH
48401: LD_VAR 0 3
48405: PPUSH
48406: CALL_OW 256
48410: PUSH
48411: LD_INT 250
48413: GREATEREQUAL
48414: AND
48415: IFFALSE 48428
// Connect ( j ) else
48417: LD_VAR 0 3
48421: PPUSH
48422: CALL 10874 0 1
48426: GO 48463
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
48428: LD_VAR 0 3
48432: PPUSH
48433: CALL_OW 256
48437: PUSH
48438: LD_INT 250
48440: LESS
48441: PUSH
48442: LD_VAR 0 3
48446: PPUSH
48447: CALL_OW 312
48451: AND
48452: IFFALSE 48463
// ComUnlink ( j ) ;
48454: LD_VAR 0 3
48458: PPUSH
48459: CALL_OW 136
48463: GO 48387
48465: POP
48466: POP
// end ;
48467: GO 48325
48469: POP
48470: POP
// end ;
48471: LD_VAR 0 1
48475: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
48476: LD_INT 0
48478: PPUSH
48479: PPUSH
48480: PPUSH
48481: PPUSH
48482: PPUSH
// if not mc_bases then
48483: LD_EXP 8
48487: NOT
48488: IFFALSE 48492
// exit ;
48490: GO 48952
// for i = 1 to mc_bases do
48492: LD_ADDR_VAR 0 2
48496: PUSH
48497: DOUBLE
48498: LD_INT 1
48500: DEC
48501: ST_TO_ADDR
48502: LD_EXP 8
48506: PUSH
48507: FOR_TO
48508: IFFALSE 48950
// begin if not mc_produce [ i ] then
48510: LD_EXP 29
48514: PUSH
48515: LD_VAR 0 2
48519: ARRAY
48520: NOT
48521: IFFALSE 48525
// continue ;
48523: GO 48507
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
48525: LD_ADDR_VAR 0 5
48529: PUSH
48530: LD_EXP 8
48534: PUSH
48535: LD_VAR 0 2
48539: ARRAY
48540: PPUSH
48541: LD_INT 30
48543: PUSH
48544: LD_INT 3
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PPUSH
48551: CALL_OW 72
48555: ST_TO_ADDR
// if not fac then
48556: LD_VAR 0 5
48560: NOT
48561: IFFALSE 48565
// continue ;
48563: GO 48507
// for j in fac do
48565: LD_ADDR_VAR 0 3
48569: PUSH
48570: LD_VAR 0 5
48574: PUSH
48575: FOR_IN
48576: IFFALSE 48946
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
48578: LD_VAR 0 3
48582: PPUSH
48583: CALL_OW 461
48587: PUSH
48588: LD_INT 2
48590: NONEQUAL
48591: PUSH
48592: LD_VAR 0 3
48596: PPUSH
48597: LD_INT 15
48599: PPUSH
48600: CALL 10577 0 2
48604: PUSH
48605: LD_INT 4
48607: ARRAY
48608: OR
48609: PUSH
48610: LD_VAR 0 3
48614: PPUSH
48615: CALL_OW 313
48619: PUSH
48620: LD_INT 0
48622: EQUAL
48623: OR
48624: IFFALSE 48628
// continue ;
48626: GO 48575
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
48628: LD_VAR 0 3
48632: PPUSH
48633: LD_EXP 29
48637: PUSH
48638: LD_VAR 0 2
48642: ARRAY
48643: PUSH
48644: LD_INT 1
48646: ARRAY
48647: PUSH
48648: LD_INT 1
48650: ARRAY
48651: PPUSH
48652: LD_EXP 29
48656: PUSH
48657: LD_VAR 0 2
48661: ARRAY
48662: PUSH
48663: LD_INT 1
48665: ARRAY
48666: PUSH
48667: LD_INT 2
48669: ARRAY
48670: PPUSH
48671: LD_EXP 29
48675: PUSH
48676: LD_VAR 0 2
48680: ARRAY
48681: PUSH
48682: LD_INT 1
48684: ARRAY
48685: PUSH
48686: LD_INT 3
48688: ARRAY
48689: PPUSH
48690: LD_EXP 29
48694: PUSH
48695: LD_VAR 0 2
48699: ARRAY
48700: PUSH
48701: LD_INT 1
48703: ARRAY
48704: PUSH
48705: LD_INT 4
48707: ARRAY
48708: PPUSH
48709: CALL_OW 448
48713: PUSH
48714: LD_VAR 0 3
48718: PPUSH
48719: LD_EXP 29
48723: PUSH
48724: LD_VAR 0 2
48728: ARRAY
48729: PUSH
48730: LD_INT 1
48732: ARRAY
48733: PUSH
48734: LD_INT 1
48736: ARRAY
48737: PUSH
48738: LD_EXP 29
48742: PUSH
48743: LD_VAR 0 2
48747: ARRAY
48748: PUSH
48749: LD_INT 1
48751: ARRAY
48752: PUSH
48753: LD_INT 2
48755: ARRAY
48756: PUSH
48757: LD_EXP 29
48761: PUSH
48762: LD_VAR 0 2
48766: ARRAY
48767: PUSH
48768: LD_INT 1
48770: ARRAY
48771: PUSH
48772: LD_INT 3
48774: ARRAY
48775: PUSH
48776: LD_EXP 29
48780: PUSH
48781: LD_VAR 0 2
48785: ARRAY
48786: PUSH
48787: LD_INT 1
48789: ARRAY
48790: PUSH
48791: LD_INT 4
48793: ARRAY
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: PPUSH
48801: CALL 13968 0 2
48805: AND
48806: IFFALSE 48944
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
48808: LD_VAR 0 3
48812: PPUSH
48813: LD_EXP 29
48817: PUSH
48818: LD_VAR 0 2
48822: ARRAY
48823: PUSH
48824: LD_INT 1
48826: ARRAY
48827: PUSH
48828: LD_INT 1
48830: ARRAY
48831: PPUSH
48832: LD_EXP 29
48836: PUSH
48837: LD_VAR 0 2
48841: ARRAY
48842: PUSH
48843: LD_INT 1
48845: ARRAY
48846: PUSH
48847: LD_INT 2
48849: ARRAY
48850: PPUSH
48851: LD_EXP 29
48855: PUSH
48856: LD_VAR 0 2
48860: ARRAY
48861: PUSH
48862: LD_INT 1
48864: ARRAY
48865: PUSH
48866: LD_INT 3
48868: ARRAY
48869: PPUSH
48870: LD_EXP 29
48874: PUSH
48875: LD_VAR 0 2
48879: ARRAY
48880: PUSH
48881: LD_INT 1
48883: ARRAY
48884: PUSH
48885: LD_INT 4
48887: ARRAY
48888: PPUSH
48889: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
48893: LD_ADDR_VAR 0 4
48897: PUSH
48898: LD_EXP 29
48902: PUSH
48903: LD_VAR 0 2
48907: ARRAY
48908: PPUSH
48909: LD_INT 1
48911: PPUSH
48912: CALL_OW 3
48916: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
48917: LD_ADDR_EXP 29
48921: PUSH
48922: LD_EXP 29
48926: PPUSH
48927: LD_VAR 0 2
48931: PPUSH
48932: LD_VAR 0 4
48936: PPUSH
48937: CALL_OW 1
48941: ST_TO_ADDR
// break ;
48942: GO 48946
// end ; end ;
48944: GO 48575
48946: POP
48947: POP
// end ;
48948: GO 48507
48950: POP
48951: POP
// end ;
48952: LD_VAR 0 1
48956: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
48957: LD_INT 0
48959: PPUSH
48960: PPUSH
48961: PPUSH
// if not mc_bases then
48962: LD_EXP 8
48966: NOT
48967: IFFALSE 48971
// exit ;
48969: GO 49060
// for i = 1 to mc_bases do
48971: LD_ADDR_VAR 0 2
48975: PUSH
48976: DOUBLE
48977: LD_INT 1
48979: DEC
48980: ST_TO_ADDR
48981: LD_EXP 8
48985: PUSH
48986: FOR_TO
48987: IFFALSE 49058
// begin if mc_attack [ i ] then
48989: LD_EXP 28
48993: PUSH
48994: LD_VAR 0 2
48998: ARRAY
48999: IFFALSE 49056
// begin tmp := mc_attack [ i ] [ 1 ] ;
49001: LD_ADDR_VAR 0 3
49005: PUSH
49006: LD_EXP 28
49010: PUSH
49011: LD_VAR 0 2
49015: ARRAY
49016: PUSH
49017: LD_INT 1
49019: ARRAY
49020: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
49021: LD_ADDR_EXP 28
49025: PUSH
49026: LD_EXP 28
49030: PPUSH
49031: LD_VAR 0 2
49035: PPUSH
49036: EMPTY
49037: PPUSH
49038: CALL_OW 1
49042: ST_TO_ADDR
// Attack ( tmp ) ;
49043: LD_VAR 0 3
49047: PPUSH
49048: CALL 35900 0 1
// exit ;
49052: POP
49053: POP
49054: GO 49060
// end ; end ;
49056: GO 48986
49058: POP
49059: POP
// end ;
49060: LD_VAR 0 1
49064: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
49065: LD_INT 0
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
// if not mc_bases then
49074: LD_EXP 8
49078: NOT
49079: IFFALSE 49083
// exit ;
49081: GO 49458
// for i = 1 to mc_bases do
49083: LD_ADDR_VAR 0 2
49087: PUSH
49088: DOUBLE
49089: LD_INT 1
49091: DEC
49092: ST_TO_ADDR
49093: LD_EXP 8
49097: PUSH
49098: FOR_TO
49099: IFFALSE 49456
// begin if not mc_bases [ i ] then
49101: LD_EXP 8
49105: PUSH
49106: LD_VAR 0 2
49110: ARRAY
49111: NOT
49112: IFFALSE 49116
// continue ;
49114: GO 49098
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
49116: LD_ADDR_VAR 0 7
49120: PUSH
49121: LD_EXP 8
49125: PUSH
49126: LD_VAR 0 2
49130: ARRAY
49131: PUSH
49132: LD_INT 1
49134: ARRAY
49135: PPUSH
49136: CALL 4891 0 1
49140: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
49141: LD_ADDR_EXP 31
49145: PUSH
49146: LD_EXP 31
49150: PPUSH
49151: LD_VAR 0 2
49155: PPUSH
49156: LD_EXP 8
49160: PUSH
49161: LD_VAR 0 2
49165: ARRAY
49166: PUSH
49167: LD_INT 1
49169: ARRAY
49170: PPUSH
49171: CALL_OW 255
49175: PPUSH
49176: LD_EXP 33
49180: PUSH
49181: LD_VAR 0 2
49185: ARRAY
49186: PPUSH
49187: CALL 3349 0 2
49191: PPUSH
49192: CALL_OW 1
49196: ST_TO_ADDR
// if not mc_scan [ i ] then
49197: LD_EXP 31
49201: PUSH
49202: LD_VAR 0 2
49206: ARRAY
49207: NOT
49208: IFFALSE 49363
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49210: LD_ADDR_VAR 0 4
49214: PUSH
49215: LD_EXP 8
49219: PUSH
49220: LD_VAR 0 2
49224: ARRAY
49225: PPUSH
49226: LD_INT 2
49228: PUSH
49229: LD_INT 25
49231: PUSH
49232: LD_INT 5
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 25
49241: PUSH
49242: LD_INT 8
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 25
49251: PUSH
49252: LD_INT 9
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: PPUSH
49265: CALL_OW 72
49269: ST_TO_ADDR
// if not tmp then
49270: LD_VAR 0 4
49274: NOT
49275: IFFALSE 49279
// continue ;
49277: GO 49098
// for j in tmp do
49279: LD_ADDR_VAR 0 3
49283: PUSH
49284: LD_VAR 0 4
49288: PUSH
49289: FOR_IN
49290: IFFALSE 49361
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
49292: LD_VAR 0 3
49296: PPUSH
49297: CALL_OW 310
49301: PPUSH
49302: CALL_OW 266
49306: PUSH
49307: LD_INT 5
49309: EQUAL
49310: PUSH
49311: LD_VAR 0 3
49315: PPUSH
49316: CALL_OW 257
49320: PUSH
49321: LD_INT 1
49323: EQUAL
49324: AND
49325: PUSH
49326: LD_VAR 0 3
49330: PPUSH
49331: CALL_OW 459
49335: NOT
49336: AND
49337: PUSH
49338: LD_VAR 0 7
49342: AND
49343: IFFALSE 49359
// ComChangeProfession ( j , class ) ;
49345: LD_VAR 0 3
49349: PPUSH
49350: LD_VAR 0 7
49354: PPUSH
49355: CALL_OW 123
49359: GO 49289
49361: POP
49362: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
49363: LD_EXP 31
49367: PUSH
49368: LD_VAR 0 2
49372: ARRAY
49373: PUSH
49374: LD_EXP 30
49378: PUSH
49379: LD_VAR 0 2
49383: ARRAY
49384: AND
49385: IFFALSE 49454
// begin tmp := mc_defender [ i ] ;
49387: LD_ADDR_VAR 0 4
49391: PUSH
49392: LD_EXP 30
49396: PUSH
49397: LD_VAR 0 2
49401: ARRAY
49402: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
49403: LD_ADDR_EXP 30
49407: PUSH
49408: LD_EXP 30
49412: PPUSH
49413: LD_VAR 0 2
49417: PPUSH
49418: EMPTY
49419: PPUSH
49420: CALL_OW 1
49424: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
49425: LD_VAR 0 2
49429: PPUSH
49430: LD_VAR 0 4
49434: PPUSH
49435: LD_EXP 31
49439: PUSH
49440: LD_VAR 0 2
49444: ARRAY
49445: PPUSH
49446: CALL 3384 0 3
// exit ;
49450: POP
49451: POP
49452: GO 49458
// end ; end ;
49454: GO 49098
49456: POP
49457: POP
// end ;
49458: LD_VAR 0 1
49462: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
49463: LD_INT 0
49465: PPUSH
49466: PPUSH
49467: PPUSH
49468: PPUSH
49469: PPUSH
49470: PPUSH
49471: PPUSH
49472: PPUSH
49473: PPUSH
// if not mc_bases then
49474: LD_EXP 8
49478: NOT
49479: IFFALSE 49483
// exit ;
49481: GO 50427
// for i = 1 to mc_bases do
49483: LD_ADDR_VAR 0 2
49487: PUSH
49488: DOUBLE
49489: LD_INT 1
49491: DEC
49492: ST_TO_ADDR
49493: LD_EXP 8
49497: PUSH
49498: FOR_TO
49499: IFFALSE 50425
// begin tmp := mc_lab [ i ] ;
49501: LD_ADDR_VAR 0 6
49505: PUSH
49506: LD_EXP 41
49510: PUSH
49511: LD_VAR 0 2
49515: ARRAY
49516: ST_TO_ADDR
// if not tmp then
49517: LD_VAR 0 6
49521: NOT
49522: IFFALSE 49526
// continue ;
49524: GO 49498
// for j in tmp do
49526: LD_ADDR_VAR 0 3
49530: PUSH
49531: LD_VAR 0 6
49535: PUSH
49536: FOR_IN
49537: IFFALSE 50421
// begin side := GetSide ( j ) ;
49539: LD_ADDR_VAR 0 4
49543: PUSH
49544: LD_VAR 0 3
49548: PPUSH
49549: CALL_OW 255
49553: ST_TO_ADDR
// if not mc_tech [ side ] then
49554: LD_EXP 35
49558: PUSH
49559: LD_VAR 0 4
49563: ARRAY
49564: NOT
49565: IFFALSE 49569
// continue ;
49567: GO 49536
// if BuildingStatus ( j ) = bs_idle then
49569: LD_VAR 0 3
49573: PPUSH
49574: CALL_OW 461
49578: PUSH
49579: LD_INT 2
49581: EQUAL
49582: IFFALSE 49655
// for t in mc_tech [ side ] do
49584: LD_ADDR_VAR 0 5
49588: PUSH
49589: LD_EXP 35
49593: PUSH
49594: LD_VAR 0 4
49598: ARRAY
49599: PUSH
49600: FOR_IN
49601: IFFALSE 49653
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
49603: LD_VAR 0 3
49607: PPUSH
49608: LD_VAR 0 5
49612: PPUSH
49613: CALL_OW 430
49617: PUSH
49618: LD_VAR 0 4
49622: PPUSH
49623: LD_VAR 0 5
49627: PPUSH
49628: CALL 2457 0 2
49632: AND
49633: IFFALSE 49651
// begin ComResearch ( j , t ) ;
49635: LD_VAR 0 3
49639: PPUSH
49640: LD_VAR 0 5
49644: PPUSH
49645: CALL_OW 124
// break ;
49649: GO 49653
// end ;
49651: GO 49600
49653: POP
49654: POP
// if BuildingStatus ( j ) = bs_need_ape then
49655: LD_VAR 0 3
49659: PPUSH
49660: CALL_OW 461
49664: PUSH
49665: LD_INT 10
49667: EQUAL
49668: IFFALSE 50256
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
49670: LD_EXP 37
49674: PUSH
49675: LD_VAR 0 2
49679: ARRAY
49680: NOT
49681: PUSH
49682: LD_EXP 38
49686: PUSH
49687: LD_VAR 0 2
49691: ARRAY
49692: NOT
49693: AND
49694: PUSH
49695: LD_EXP 35
49699: PUSH
49700: LD_VAR 0 4
49704: ARRAY
49705: PUSH
49706: LD_INT 1
49708: GREATER
49709: AND
49710: IFFALSE 49841
// begin ComCancel ( j ) ;
49712: LD_VAR 0 3
49716: PPUSH
49717: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
49721: LD_ADDR_EXP 35
49725: PUSH
49726: LD_EXP 35
49730: PPUSH
49731: LD_VAR 0 4
49735: PPUSH
49736: LD_EXP 35
49740: PUSH
49741: LD_VAR 0 4
49745: ARRAY
49746: PPUSH
49747: LD_EXP 35
49751: PUSH
49752: LD_VAR 0 4
49756: ARRAY
49757: PUSH
49758: LD_INT 1
49760: MINUS
49761: PPUSH
49762: LD_EXP 35
49766: PUSH
49767: LD_VAR 0 4
49771: ARRAY
49772: PPUSH
49773: LD_INT 0
49775: PPUSH
49776: CALL 7369 0 4
49780: PPUSH
49781: CALL_OW 1
49785: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
49786: LD_ADDR_EXP 35
49790: PUSH
49791: LD_EXP 35
49795: PPUSH
49796: LD_VAR 0 4
49800: PPUSH
49801: LD_EXP 35
49805: PUSH
49806: LD_VAR 0 4
49810: ARRAY
49811: PPUSH
49812: LD_EXP 35
49816: PUSH
49817: LD_VAR 0 4
49821: ARRAY
49822: PPUSH
49823: LD_INT 1
49825: PPUSH
49826: LD_INT 0
49828: PPUSH
49829: CALL 7369 0 4
49833: PPUSH
49834: CALL_OW 1
49838: ST_TO_ADDR
// continue ;
49839: GO 49536
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
49841: LD_EXP 37
49845: PUSH
49846: LD_VAR 0 2
49850: ARRAY
49851: PUSH
49852: LD_EXP 38
49856: PUSH
49857: LD_VAR 0 2
49861: ARRAY
49862: NOT
49863: AND
49864: IFFALSE 49991
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
49866: LD_ADDR_EXP 38
49870: PUSH
49871: LD_EXP 38
49875: PPUSH
49876: LD_VAR 0 2
49880: PUSH
49881: LD_EXP 38
49885: PUSH
49886: LD_VAR 0 2
49890: ARRAY
49891: PUSH
49892: LD_INT 1
49894: PLUS
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PPUSH
49900: LD_EXP 37
49904: PUSH
49905: LD_VAR 0 2
49909: ARRAY
49910: PUSH
49911: LD_INT 1
49913: ARRAY
49914: PPUSH
49915: CALL 8386 0 3
49919: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
49920: LD_EXP 37
49924: PUSH
49925: LD_VAR 0 2
49929: ARRAY
49930: PUSH
49931: LD_INT 1
49933: ARRAY
49934: PPUSH
49935: LD_INT 112
49937: PPUSH
49938: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
49942: LD_ADDR_VAR 0 9
49946: PUSH
49947: LD_EXP 37
49951: PUSH
49952: LD_VAR 0 2
49956: ARRAY
49957: PPUSH
49958: LD_INT 1
49960: PPUSH
49961: CALL_OW 3
49965: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
49966: LD_ADDR_EXP 37
49970: PUSH
49971: LD_EXP 37
49975: PPUSH
49976: LD_VAR 0 2
49980: PPUSH
49981: LD_VAR 0 9
49985: PPUSH
49986: CALL_OW 1
49990: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
49991: LD_EXP 37
49995: PUSH
49996: LD_VAR 0 2
50000: ARRAY
50001: PUSH
50002: LD_EXP 38
50006: PUSH
50007: LD_VAR 0 2
50011: ARRAY
50012: AND
50013: PUSH
50014: LD_EXP 38
50018: PUSH
50019: LD_VAR 0 2
50023: ARRAY
50024: PUSH
50025: LD_INT 1
50027: ARRAY
50028: PPUSH
50029: CALL_OW 310
50033: NOT
50034: AND
50035: PUSH
50036: LD_VAR 0 3
50040: PPUSH
50041: CALL_OW 313
50045: PUSH
50046: LD_INT 6
50048: EQUAL
50049: AND
50050: IFFALSE 50106
// begin tmp2 := UnitsInside ( j ) ;
50052: LD_ADDR_VAR 0 9
50056: PUSH
50057: LD_VAR 0 3
50061: PPUSH
50062: CALL_OW 313
50066: ST_TO_ADDR
// if tmp2 = 6 then
50067: LD_VAR 0 9
50071: PUSH
50072: LD_INT 6
50074: EQUAL
50075: IFFALSE 50106
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
50077: LD_VAR 0 9
50081: PUSH
50082: LD_INT 1
50084: ARRAY
50085: PPUSH
50086: LD_INT 112
50088: PPUSH
50089: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
50093: LD_VAR 0 9
50097: PUSH
50098: LD_INT 1
50100: ARRAY
50101: PPUSH
50102: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
50106: LD_EXP 38
50110: PUSH
50111: LD_VAR 0 2
50115: ARRAY
50116: PUSH
50117: LD_EXP 38
50121: PUSH
50122: LD_VAR 0 2
50126: ARRAY
50127: PUSH
50128: LD_INT 1
50130: ARRAY
50131: PPUSH
50132: CALL_OW 314
50136: NOT
50137: AND
50138: PUSH
50139: LD_EXP 38
50143: PUSH
50144: LD_VAR 0 2
50148: ARRAY
50149: PUSH
50150: LD_INT 1
50152: ARRAY
50153: PPUSH
50154: CALL_OW 310
50158: NOT
50159: AND
50160: IFFALSE 50186
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
50162: LD_EXP 38
50166: PUSH
50167: LD_VAR 0 2
50171: ARRAY
50172: PUSH
50173: LD_INT 1
50175: ARRAY
50176: PPUSH
50177: LD_VAR 0 3
50181: PPUSH
50182: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
50186: LD_EXP 38
50190: PUSH
50191: LD_VAR 0 2
50195: ARRAY
50196: PUSH
50197: LD_INT 1
50199: ARRAY
50200: PPUSH
50201: CALL_OW 310
50205: PUSH
50206: LD_EXP 38
50210: PUSH
50211: LD_VAR 0 2
50215: ARRAY
50216: PUSH
50217: LD_INT 1
50219: ARRAY
50220: PPUSH
50221: CALL_OW 310
50225: PPUSH
50226: CALL_OW 461
50230: PUSH
50231: LD_INT 3
50233: NONEQUAL
50234: AND
50235: IFFALSE 50256
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
50237: LD_EXP 38
50241: PUSH
50242: LD_VAR 0 2
50246: ARRAY
50247: PUSH
50248: LD_INT 1
50250: ARRAY
50251: PPUSH
50252: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
50256: LD_VAR 0 3
50260: PPUSH
50261: CALL_OW 461
50265: PUSH
50266: LD_INT 6
50268: EQUAL
50269: PUSH
50270: LD_VAR 0 6
50274: PUSH
50275: LD_INT 1
50277: GREATER
50278: AND
50279: IFFALSE 50419
// begin sci := [ ] ;
50281: LD_ADDR_VAR 0 8
50285: PUSH
50286: EMPTY
50287: ST_TO_ADDR
// for x in tmp diff j do
50288: LD_ADDR_VAR 0 7
50292: PUSH
50293: LD_VAR 0 6
50297: PUSH
50298: LD_VAR 0 3
50302: DIFF
50303: PUSH
50304: FOR_IN
50305: IFFALSE 50345
// begin if BuildingStatus ( x ) = bs_idle then
50307: LD_VAR 0 7
50311: PPUSH
50312: CALL_OW 461
50316: PUSH
50317: LD_INT 2
50319: EQUAL
50320: IFFALSE 50343
// sci := sci ^ UnitsInside ( x ) ;
50322: LD_ADDR_VAR 0 8
50326: PUSH
50327: LD_VAR 0 8
50331: PUSH
50332: LD_VAR 0 7
50336: PPUSH
50337: CALL_OW 313
50341: ADD
50342: ST_TO_ADDR
// end ;
50343: GO 50304
50345: POP
50346: POP
// if not sci then
50347: LD_VAR 0 8
50351: NOT
50352: IFFALSE 50356
// continue ;
50354: GO 49536
// for x in sci do
50356: LD_ADDR_VAR 0 7
50360: PUSH
50361: LD_VAR 0 8
50365: PUSH
50366: FOR_IN
50367: IFFALSE 50417
// if IsInUnit ( x ) and not HasTask ( x ) then
50369: LD_VAR 0 7
50373: PPUSH
50374: CALL_OW 310
50378: PUSH
50379: LD_VAR 0 7
50383: PPUSH
50384: CALL_OW 314
50388: NOT
50389: AND
50390: IFFALSE 50415
// begin ComExitBuilding ( x ) ;
50392: LD_VAR 0 7
50396: PPUSH
50397: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
50401: LD_VAR 0 7
50405: PPUSH
50406: LD_VAR 0 3
50410: PPUSH
50411: CALL_OW 180
// end ;
50415: GO 50366
50417: POP
50418: POP
// end ; end ;
50419: GO 49536
50421: POP
50422: POP
// end ;
50423: GO 49498
50425: POP
50426: POP
// end ;
50427: LD_VAR 0 1
50431: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
50432: LD_INT 0
50434: PPUSH
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
50440: PPUSH
50441: PPUSH
// if not mc_bases or not mc_parking then
50442: LD_EXP 8
50446: NOT
50447: PUSH
50448: LD_EXP 32
50452: NOT
50453: OR
50454: IFFALSE 50458
// exit ;
50456: GO 51116
// for i = 1 to mc_bases do
50458: LD_ADDR_VAR 0 2
50462: PUSH
50463: DOUBLE
50464: LD_INT 1
50466: DEC
50467: ST_TO_ADDR
50468: LD_EXP 8
50472: PUSH
50473: FOR_TO
50474: IFFALSE 51114
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
50476: LD_EXP 8
50480: PUSH
50481: LD_VAR 0 2
50485: ARRAY
50486: NOT
50487: PUSH
50488: LD_EXP 32
50492: PUSH
50493: LD_VAR 0 2
50497: ARRAY
50498: NOT
50499: OR
50500: IFFALSE 50504
// continue ;
50502: GO 50473
// if mc_scan [ i ] then
50504: LD_EXP 31
50508: PUSH
50509: LD_VAR 0 2
50513: ARRAY
50514: IFFALSE 50540
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
50516: LD_ADDR_EXP 20
50520: PUSH
50521: LD_EXP 20
50525: PPUSH
50526: LD_VAR 0 2
50530: PPUSH
50531: EMPTY
50532: PPUSH
50533: CALL_OW 1
50537: ST_TO_ADDR
// continue ;
50538: GO 50473
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
50540: LD_ADDR_VAR 0 5
50544: PUSH
50545: LD_EXP 8
50549: PUSH
50550: LD_VAR 0 2
50554: ARRAY
50555: PUSH
50556: LD_INT 1
50558: ARRAY
50559: PPUSH
50560: CALL_OW 255
50564: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50565: LD_ADDR_VAR 0 6
50569: PUSH
50570: LD_EXP 8
50574: PUSH
50575: LD_VAR 0 2
50579: ARRAY
50580: PPUSH
50581: LD_INT 30
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PPUSH
50591: CALL_OW 72
50595: ST_TO_ADDR
// if not fac then
50596: LD_VAR 0 6
50600: NOT
50601: IFFALSE 50652
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50603: LD_ADDR_VAR 0 6
50607: PUSH
50608: LD_EXP 8
50612: PUSH
50613: LD_VAR 0 2
50617: ARRAY
50618: PPUSH
50619: LD_INT 2
50621: PUSH
50622: LD_INT 30
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 30
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: PPUSH
50647: CALL_OW 72
50651: ST_TO_ADDR
// if not fac then
50652: LD_VAR 0 6
50656: NOT
50657: IFFALSE 50661
// continue ;
50659: GO 50473
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
50661: LD_ADDR_VAR 0 7
50665: PUSH
50666: LD_EXP 32
50670: PUSH
50671: LD_VAR 0 2
50675: ARRAY
50676: PPUSH
50677: LD_INT 22
50679: PUSH
50680: LD_VAR 0 5
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 21
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 24
50704: PUSH
50705: LD_INT 1000
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: LIST
50720: PPUSH
50721: CALL_OW 70
50725: PUSH
50726: LD_INT 22
50728: PUSH
50729: LD_VAR 0 5
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 91
50740: PUSH
50741: LD_VAR 0 6
50745: PUSH
50746: LD_INT 1
50748: ARRAY
50749: PUSH
50750: LD_INT 25
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 21
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: LD_INT 24
50773: PUSH
50774: LD_INT 1000
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: PPUSH
50791: CALL_OW 69
50795: UNION
50796: ST_TO_ADDR
// if not vehs then
50797: LD_VAR 0 7
50801: NOT
50802: IFFALSE 50828
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
50804: LD_ADDR_EXP 20
50808: PUSH
50809: LD_EXP 20
50813: PPUSH
50814: LD_VAR 0 2
50818: PPUSH
50819: EMPTY
50820: PPUSH
50821: CALL_OW 1
50825: ST_TO_ADDR
// continue ;
50826: GO 50473
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50828: LD_ADDR_VAR 0 8
50832: PUSH
50833: LD_EXP 8
50837: PUSH
50838: LD_VAR 0 2
50842: ARRAY
50843: PPUSH
50844: LD_INT 30
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PPUSH
50854: CALL_OW 72
50858: ST_TO_ADDR
// if tmp then
50859: LD_VAR 0 8
50863: IFFALSE 50966
// begin for j in tmp do
50865: LD_ADDR_VAR 0 3
50869: PUSH
50870: LD_VAR 0 8
50874: PUSH
50875: FOR_IN
50876: IFFALSE 50964
// for k in UnitsInside ( j ) do
50878: LD_ADDR_VAR 0 4
50882: PUSH
50883: LD_VAR 0 3
50887: PPUSH
50888: CALL_OW 313
50892: PUSH
50893: FOR_IN
50894: IFFALSE 50960
// if k then
50896: LD_VAR 0 4
50900: IFFALSE 50958
// if not k in mc_repair_vehicle [ i ] then
50902: LD_VAR 0 4
50906: PUSH
50907: LD_EXP 20
50911: PUSH
50912: LD_VAR 0 2
50916: ARRAY
50917: IN
50918: NOT
50919: IFFALSE 50958
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
50921: LD_ADDR_EXP 20
50925: PUSH
50926: LD_EXP 20
50930: PPUSH
50931: LD_VAR 0 2
50935: PPUSH
50936: LD_EXP 20
50940: PUSH
50941: LD_VAR 0 2
50945: ARRAY
50946: PUSH
50947: LD_VAR 0 4
50951: UNION
50952: PPUSH
50953: CALL_OW 1
50957: ST_TO_ADDR
50958: GO 50893
50960: POP
50961: POP
50962: GO 50875
50964: POP
50965: POP
// end ; if not mc_repair_vehicle [ i ] then
50966: LD_EXP 20
50970: PUSH
50971: LD_VAR 0 2
50975: ARRAY
50976: NOT
50977: IFFALSE 50981
// continue ;
50979: GO 50473
// for j in mc_repair_vehicle [ i ] do
50981: LD_ADDR_VAR 0 3
50985: PUSH
50986: LD_EXP 20
50990: PUSH
50991: LD_VAR 0 2
50995: ARRAY
50996: PUSH
50997: FOR_IN
50998: IFFALSE 51110
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
51000: LD_VAR 0 3
51004: PPUSH
51005: CALL_OW 311
51009: NOT
51010: PUSH
51011: LD_VAR 0 3
51015: PUSH
51016: LD_EXP 11
51020: PUSH
51021: LD_VAR 0 2
51025: ARRAY
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: IN
51031: NOT
51032: AND
51033: PUSH
51034: LD_VAR 0 3
51038: PUSH
51039: LD_EXP 11
51043: PUSH
51044: LD_VAR 0 2
51048: ARRAY
51049: PUSH
51050: LD_INT 2
51052: ARRAY
51053: IN
51054: NOT
51055: AND
51056: IFFALSE 51108
// begin if IsInUnit ( j ) then
51058: LD_VAR 0 3
51062: PPUSH
51063: CALL_OW 310
51067: IFFALSE 51078
// ComExitBuilding ( j ) ;
51069: LD_VAR 0 3
51073: PPUSH
51074: CALL_OW 122
// if not HasTask ( j ) then
51078: LD_VAR 0 3
51082: PPUSH
51083: CALL_OW 314
51087: NOT
51088: IFFALSE 51108
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
51090: LD_VAR 0 3
51094: PPUSH
51095: LD_VAR 0 7
51099: PUSH
51100: LD_INT 1
51102: ARRAY
51103: PPUSH
51104: CALL_OW 189
// end ; end ;
51108: GO 50997
51110: POP
51111: POP
// end ;
51112: GO 50473
51114: POP
51115: POP
// end ;
51116: LD_VAR 0 1
51120: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
51121: LD_INT 0
51123: PPUSH
51124: PPUSH
51125: PPUSH
51126: PPUSH
51127: PPUSH
51128: PPUSH
51129: PPUSH
51130: PPUSH
51131: PPUSH
51132: PPUSH
51133: PPUSH
// if not mc_bases then
51134: LD_EXP 8
51138: NOT
51139: IFFALSE 51143
// exit ;
51141: GO 51879
// for i = 1 to mc_bases do
51143: LD_ADDR_VAR 0 2
51147: PUSH
51148: DOUBLE
51149: LD_INT 1
51151: DEC
51152: ST_TO_ADDR
51153: LD_EXP 8
51157: PUSH
51158: FOR_TO
51159: IFFALSE 51877
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
51161: LD_EXP 36
51165: PUSH
51166: LD_VAR 0 2
51170: ARRAY
51171: NOT
51172: PUSH
51173: LD_EXP 11
51177: PUSH
51178: LD_VAR 0 2
51182: ARRAY
51183: PUSH
51184: LD_INT 1
51186: ARRAY
51187: OR
51188: PUSH
51189: LD_EXP 11
51193: PUSH
51194: LD_VAR 0 2
51198: ARRAY
51199: PUSH
51200: LD_INT 2
51202: ARRAY
51203: OR
51204: PUSH
51205: LD_EXP 34
51209: PUSH
51210: LD_VAR 0 2
51214: ARRAY
51215: PPUSH
51216: LD_INT 1
51218: PPUSH
51219: CALL_OW 325
51223: NOT
51224: OR
51225: PUSH
51226: LD_EXP 31
51230: PUSH
51231: LD_VAR 0 2
51235: ARRAY
51236: OR
51237: IFFALSE 51241
// continue ;
51239: GO 51158
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
51241: LD_ADDR_VAR 0 8
51245: PUSH
51246: LD_EXP 8
51250: PUSH
51251: LD_VAR 0 2
51255: ARRAY
51256: PPUSH
51257: LD_INT 25
51259: PUSH
51260: LD_INT 4
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 50
51269: PUSH
51270: EMPTY
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: LD_INT 60
51278: PUSH
51279: EMPTY
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: PPUSH
51291: CALL_OW 72
51295: PUSH
51296: LD_EXP 12
51300: PUSH
51301: LD_VAR 0 2
51305: ARRAY
51306: DIFF
51307: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51308: LD_ADDR_VAR 0 9
51312: PUSH
51313: LD_EXP 8
51317: PUSH
51318: LD_VAR 0 2
51322: ARRAY
51323: PPUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 30
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 30
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: PPUSH
51352: CALL_OW 72
51356: ST_TO_ADDR
// if not tmp or not dep then
51357: LD_VAR 0 8
51361: NOT
51362: PUSH
51363: LD_VAR 0 9
51367: NOT
51368: OR
51369: IFFALSE 51373
// continue ;
51371: GO 51158
// side := GetSide ( tmp [ 1 ] ) ;
51373: LD_ADDR_VAR 0 11
51377: PUSH
51378: LD_VAR 0 8
51382: PUSH
51383: LD_INT 1
51385: ARRAY
51386: PPUSH
51387: CALL_OW 255
51391: ST_TO_ADDR
// dep := dep [ 1 ] ;
51392: LD_ADDR_VAR 0 9
51396: PUSH
51397: LD_VAR 0 9
51401: PUSH
51402: LD_INT 1
51404: ARRAY
51405: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
51406: LD_ADDR_VAR 0 7
51410: PUSH
51411: LD_EXP 36
51415: PUSH
51416: LD_VAR 0 2
51420: ARRAY
51421: PPUSH
51422: LD_INT 22
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 25
51434: PUSH
51435: LD_INT 12
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PPUSH
51446: CALL_OW 70
51450: PUSH
51451: LD_INT 22
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 25
51463: PUSH
51464: LD_INT 12
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 91
51473: PUSH
51474: LD_VAR 0 9
51478: PUSH
51479: LD_INT 20
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: PPUSH
51492: CALL_OW 69
51496: UNION
51497: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
51498: LD_ADDR_VAR 0 10
51502: PUSH
51503: LD_EXP 36
51507: PUSH
51508: LD_VAR 0 2
51512: ARRAY
51513: PPUSH
51514: LD_INT 81
51516: PUSH
51517: LD_VAR 0 11
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PPUSH
51526: CALL_OW 70
51530: ST_TO_ADDR
// if not apes or danger_at_area then
51531: LD_VAR 0 7
51535: NOT
51536: PUSH
51537: LD_VAR 0 10
51541: OR
51542: IFFALSE 51592
// begin if mc_taming [ i ] then
51544: LD_EXP 39
51548: PUSH
51549: LD_VAR 0 2
51553: ARRAY
51554: IFFALSE 51590
// begin MC_Reset ( i , 121 ) ;
51556: LD_VAR 0 2
51560: PPUSH
51561: LD_INT 121
51563: PPUSH
51564: CALL 42409 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
51568: LD_ADDR_EXP 39
51572: PUSH
51573: LD_EXP 39
51577: PPUSH
51578: LD_VAR 0 2
51582: PPUSH
51583: EMPTY
51584: PPUSH
51585: CALL_OW 1
51589: ST_TO_ADDR
// end ; continue ;
51590: GO 51158
// end ; for j in tmp do
51592: LD_ADDR_VAR 0 3
51596: PUSH
51597: LD_VAR 0 8
51601: PUSH
51602: FOR_IN
51603: IFFALSE 51873
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
51605: LD_VAR 0 3
51609: PUSH
51610: LD_EXP 39
51614: PUSH
51615: LD_VAR 0 2
51619: ARRAY
51620: IN
51621: NOT
51622: PUSH
51623: LD_EXP 39
51627: PUSH
51628: LD_VAR 0 2
51632: ARRAY
51633: PUSH
51634: LD_INT 3
51636: LESS
51637: AND
51638: IFFALSE 51696
// begin SetTag ( j , 121 ) ;
51640: LD_VAR 0 3
51644: PPUSH
51645: LD_INT 121
51647: PPUSH
51648: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
51652: LD_ADDR_EXP 39
51656: PUSH
51657: LD_EXP 39
51661: PPUSH
51662: LD_VAR 0 2
51666: PUSH
51667: LD_EXP 39
51671: PUSH
51672: LD_VAR 0 2
51676: ARRAY
51677: PUSH
51678: LD_INT 1
51680: PLUS
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PPUSH
51686: LD_VAR 0 3
51690: PPUSH
51691: CALL 8386 0 3
51695: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
51696: LD_VAR 0 3
51700: PUSH
51701: LD_EXP 39
51705: PUSH
51706: LD_VAR 0 2
51710: ARRAY
51711: IN
51712: IFFALSE 51871
// begin if IsInUnit ( j ) then
51714: LD_VAR 0 3
51718: PPUSH
51719: CALL_OW 310
51723: IFFALSE 51734
// ComExitBuilding ( j ) ;
51725: LD_VAR 0 3
51729: PPUSH
51730: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
51734: LD_ADDR_VAR 0 6
51738: PUSH
51739: LD_VAR 0 7
51743: PPUSH
51744: LD_VAR 0 3
51748: PPUSH
51749: CALL_OW 74
51753: ST_TO_ADDR
// if not ape then
51754: LD_VAR 0 6
51758: NOT
51759: IFFALSE 51763
// break ;
51761: GO 51873
// x := GetX ( ape ) ;
51763: LD_ADDR_VAR 0 4
51767: PUSH
51768: LD_VAR 0 6
51772: PPUSH
51773: CALL_OW 250
51777: ST_TO_ADDR
// y := GetY ( ape ) ;
51778: LD_ADDR_VAR 0 5
51782: PUSH
51783: LD_VAR 0 6
51787: PPUSH
51788: CALL_OW 251
51792: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51793: LD_VAR 0 4
51797: PPUSH
51798: LD_VAR 0 5
51802: PPUSH
51803: CALL_OW 488
51807: NOT
51808: PUSH
51809: LD_VAR 0 11
51813: PPUSH
51814: LD_VAR 0 4
51818: PPUSH
51819: LD_VAR 0 5
51823: PPUSH
51824: LD_INT 20
51826: PPUSH
51827: CALL 8880 0 4
51831: PUSH
51832: LD_INT 4
51834: ARRAY
51835: OR
51836: IFFALSE 51840
// break ;
51838: GO 51873
// if not HasTask ( j ) then
51840: LD_VAR 0 3
51844: PPUSH
51845: CALL_OW 314
51849: NOT
51850: IFFALSE 51871
// ComTameXY ( j , x , y ) ;
51852: LD_VAR 0 3
51856: PPUSH
51857: LD_VAR 0 4
51861: PPUSH
51862: LD_VAR 0 5
51866: PPUSH
51867: CALL_OW 131
// end ; end ;
51871: GO 51602
51873: POP
51874: POP
// end ;
51875: GO 51158
51877: POP
51878: POP
// end ;
51879: LD_VAR 0 1
51883: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
51884: LD_INT 0
51886: PPUSH
51887: PPUSH
51888: PPUSH
51889: PPUSH
51890: PPUSH
51891: PPUSH
51892: PPUSH
51893: PPUSH
// if not mc_bases then
51894: LD_EXP 8
51898: NOT
51899: IFFALSE 51903
// exit ;
51901: GO 52513
// for i = 1 to mc_bases do
51903: LD_ADDR_VAR 0 2
51907: PUSH
51908: DOUBLE
51909: LD_INT 1
51911: DEC
51912: ST_TO_ADDR
51913: LD_EXP 8
51917: PUSH
51918: FOR_TO
51919: IFFALSE 52511
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
51921: LD_EXP 37
51925: PUSH
51926: LD_VAR 0 2
51930: ARRAY
51931: NOT
51932: PUSH
51933: LD_EXP 37
51937: PUSH
51938: LD_VAR 0 2
51942: ARRAY
51943: PPUSH
51944: LD_INT 25
51946: PUSH
51947: LD_INT 12
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PPUSH
51954: CALL_OW 72
51958: NOT
51959: OR
51960: IFFALSE 51964
// continue ;
51962: GO 51918
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
51964: LD_ADDR_VAR 0 5
51968: PUSH
51969: LD_EXP 37
51973: PUSH
51974: LD_VAR 0 2
51978: ARRAY
51979: PUSH
51980: LD_INT 1
51982: ARRAY
51983: PPUSH
51984: CALL_OW 255
51988: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
51989: LD_VAR 0 5
51993: PPUSH
51994: LD_INT 2
51996: PPUSH
51997: CALL_OW 325
52001: IFFALSE 52246
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
52003: LD_ADDR_VAR 0 4
52007: PUSH
52008: LD_EXP 37
52012: PUSH
52013: LD_VAR 0 2
52017: ARRAY
52018: PPUSH
52019: LD_INT 25
52021: PUSH
52022: LD_INT 16
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PPUSH
52029: CALL_OW 72
52033: ST_TO_ADDR
// if tmp < 6 then
52034: LD_VAR 0 4
52038: PUSH
52039: LD_INT 6
52041: LESS
52042: IFFALSE 52246
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
52044: LD_ADDR_VAR 0 6
52048: PUSH
52049: LD_EXP 8
52053: PUSH
52054: LD_VAR 0 2
52058: ARRAY
52059: PPUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 30
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 30
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: PPUSH
52088: CALL_OW 72
52092: ST_TO_ADDR
// if depot then
52093: LD_VAR 0 6
52097: IFFALSE 52246
// begin for j in depot do
52099: LD_ADDR_VAR 0 3
52103: PUSH
52104: LD_VAR 0 6
52108: PUSH
52109: FOR_IN
52110: IFFALSE 52141
// begin if UnitsInside ( j ) < 6 then
52112: LD_VAR 0 3
52116: PPUSH
52117: CALL_OW 313
52121: PUSH
52122: LD_INT 6
52124: LESS
52125: IFFALSE 52139
// begin selected := j ;
52127: LD_ADDR_VAR 0 7
52131: PUSH
52132: LD_VAR 0 3
52136: ST_TO_ADDR
// break ;
52137: GO 52141
// end ; end ;
52139: GO 52109
52141: POP
52142: POP
// if selected then
52143: LD_VAR 0 7
52147: IFFALSE 52246
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
52149: LD_ADDR_VAR 0 3
52153: PUSH
52154: LD_EXP 37
52158: PUSH
52159: LD_VAR 0 2
52163: ARRAY
52164: PPUSH
52165: LD_INT 25
52167: PUSH
52168: LD_INT 12
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PPUSH
52175: CALL_OW 72
52179: PUSH
52180: FOR_IN
52181: IFFALSE 52244
// if not HasTask ( j ) then
52183: LD_VAR 0 3
52187: PPUSH
52188: CALL_OW 314
52192: NOT
52193: IFFALSE 52242
// begin if not IsInUnit ( j ) then
52195: LD_VAR 0 3
52199: PPUSH
52200: CALL_OW 310
52204: NOT
52205: IFFALSE 52221
// ComEnterUnit ( j , selected ) ;
52207: LD_VAR 0 3
52211: PPUSH
52212: LD_VAR 0 7
52216: PPUSH
52217: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
52221: LD_VAR 0 3
52225: PPUSH
52226: LD_INT 16
52228: PPUSH
52229: CALL_OW 183
// AddComExitBuilding ( j ) ;
52233: LD_VAR 0 3
52237: PPUSH
52238: CALL_OW 182
// end ;
52242: GO 52180
52244: POP
52245: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
52246: LD_VAR 0 5
52250: PPUSH
52251: LD_INT 11
52253: PPUSH
52254: CALL_OW 325
52258: IFFALSE 52509
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
52260: LD_ADDR_VAR 0 4
52264: PUSH
52265: LD_EXP 37
52269: PUSH
52270: LD_VAR 0 2
52274: ARRAY
52275: PPUSH
52276: LD_INT 25
52278: PUSH
52279: LD_INT 16
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PPUSH
52286: CALL_OW 72
52290: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
52291: LD_VAR 0 4
52295: PUSH
52296: LD_INT 6
52298: GREATEREQUAL
52299: PUSH
52300: LD_VAR 0 5
52304: PPUSH
52305: LD_INT 2
52307: PPUSH
52308: CALL_OW 325
52312: NOT
52313: OR
52314: IFFALSE 52509
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
52316: LD_ADDR_VAR 0 8
52320: PUSH
52321: LD_EXP 8
52325: PUSH
52326: LD_VAR 0 2
52330: ARRAY
52331: PPUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 30
52337: PUSH
52338: LD_INT 4
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 30
52347: PUSH
52348: LD_INT 5
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: PPUSH
52360: CALL_OW 72
52364: ST_TO_ADDR
// if barracks then
52365: LD_VAR 0 8
52369: IFFALSE 52509
// begin for j in barracks do
52371: LD_ADDR_VAR 0 3
52375: PUSH
52376: LD_VAR 0 8
52380: PUSH
52381: FOR_IN
52382: IFFALSE 52413
// begin if UnitsInside ( j ) < 6 then
52384: LD_VAR 0 3
52388: PPUSH
52389: CALL_OW 313
52393: PUSH
52394: LD_INT 6
52396: LESS
52397: IFFALSE 52411
// begin selected := j ;
52399: LD_ADDR_VAR 0 7
52403: PUSH
52404: LD_VAR 0 3
52408: ST_TO_ADDR
// break ;
52409: GO 52413
// end ; end ;
52411: GO 52381
52413: POP
52414: POP
// if selected then
52415: LD_VAR 0 7
52419: IFFALSE 52509
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
52421: LD_ADDR_VAR 0 3
52425: PUSH
52426: LD_EXP 37
52430: PUSH
52431: LD_VAR 0 2
52435: ARRAY
52436: PPUSH
52437: LD_INT 25
52439: PUSH
52440: LD_INT 12
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PPUSH
52447: CALL_OW 72
52451: PUSH
52452: FOR_IN
52453: IFFALSE 52507
// if not IsInUnit ( j ) and not HasTask ( j ) then
52455: LD_VAR 0 3
52459: PPUSH
52460: CALL_OW 310
52464: NOT
52465: PUSH
52466: LD_VAR 0 3
52470: PPUSH
52471: CALL_OW 314
52475: NOT
52476: AND
52477: IFFALSE 52505
// begin ComEnterUnit ( j , selected ) ;
52479: LD_VAR 0 3
52483: PPUSH
52484: LD_VAR 0 7
52488: PPUSH
52489: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
52493: LD_VAR 0 3
52497: PPUSH
52498: LD_INT 15
52500: PPUSH
52501: CALL_OW 183
// end ;
52505: GO 52452
52507: POP
52508: POP
// end ; end ; end ; end ; end ;
52509: GO 51918
52511: POP
52512: POP
// end ;
52513: LD_VAR 0 1
52517: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
52518: LD_INT 0
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
// if not mc_bases then
52524: LD_EXP 8
52528: NOT
52529: IFFALSE 52533
// exit ;
52531: GO 52711
// for i = 1 to mc_bases do
52533: LD_ADDR_VAR 0 2
52537: PUSH
52538: DOUBLE
52539: LD_INT 1
52541: DEC
52542: ST_TO_ADDR
52543: LD_EXP 8
52547: PUSH
52548: FOR_TO
52549: IFFALSE 52709
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
52551: LD_ADDR_VAR 0 4
52555: PUSH
52556: LD_EXP 8
52560: PUSH
52561: LD_VAR 0 2
52565: ARRAY
52566: PPUSH
52567: LD_INT 25
52569: PUSH
52570: LD_INT 9
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PPUSH
52577: CALL_OW 72
52581: ST_TO_ADDR
// if not tmp then
52582: LD_VAR 0 4
52586: NOT
52587: IFFALSE 52591
// continue ;
52589: GO 52548
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
52591: LD_EXP 34
52595: PUSH
52596: LD_VAR 0 2
52600: ARRAY
52601: PPUSH
52602: LD_INT 29
52604: PPUSH
52605: CALL_OW 325
52609: NOT
52610: PUSH
52611: LD_EXP 34
52615: PUSH
52616: LD_VAR 0 2
52620: ARRAY
52621: PPUSH
52622: LD_INT 28
52624: PPUSH
52625: CALL_OW 325
52629: NOT
52630: AND
52631: IFFALSE 52635
// continue ;
52633: GO 52548
// for j in tmp do
52635: LD_ADDR_VAR 0 3
52639: PUSH
52640: LD_VAR 0 4
52644: PUSH
52645: FOR_IN
52646: IFFALSE 52705
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
52648: LD_VAR 0 3
52652: PUSH
52653: LD_EXP 11
52657: PUSH
52658: LD_VAR 0 2
52662: ARRAY
52663: PUSH
52664: LD_INT 1
52666: ARRAY
52667: IN
52668: NOT
52669: PUSH
52670: LD_VAR 0 3
52674: PUSH
52675: LD_EXP 11
52679: PUSH
52680: LD_VAR 0 2
52684: ARRAY
52685: PUSH
52686: LD_INT 2
52688: ARRAY
52689: IN
52690: NOT
52691: AND
52692: IFFALSE 52703
// ComSpaceTimeShoot ( j ) ;
52694: LD_VAR 0 3
52698: PPUSH
52699: CALL 2548 0 1
52703: GO 52645
52705: POP
52706: POP
// end ;
52707: GO 52548
52709: POP
52710: POP
// end ;
52711: LD_VAR 0 1
52715: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
52716: LD_INT 0
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
// if not mc_bases then
52722: LD_EXP 8
52726: NOT
52727: IFFALSE 52731
// exit ;
52729: GO 52753
// for i = 1 to mc_bases do
52731: LD_ADDR_VAR 0 2
52735: PUSH
52736: DOUBLE
52737: LD_INT 1
52739: DEC
52740: ST_TO_ADDR
52741: LD_EXP 8
52745: PUSH
52746: FOR_TO
52747: IFFALSE 52751
// begin end ;
52749: GO 52746
52751: POP
52752: POP
// end ;
52753: LD_VAR 0 1
52757: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
52758: LD_INT 0
52760: PPUSH
52761: PPUSH
52762: PPUSH
// if not mc_bases then
52763: LD_EXP 8
52767: NOT
52768: IFFALSE 52772
// exit ;
52770: GO 53332
// for i = 1 to mc_bases do
52772: LD_ADDR_VAR 0 2
52776: PUSH
52777: DOUBLE
52778: LD_INT 1
52780: DEC
52781: ST_TO_ADDR
52782: LD_EXP 8
52786: PUSH
52787: FOR_TO
52788: IFFALSE 53330
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
52790: LD_ADDR_VAR 0 3
52794: PUSH
52795: LD_EXP 8
52799: PUSH
52800: LD_VAR 0 2
52804: ARRAY
52805: PPUSH
52806: LD_INT 25
52808: PUSH
52809: LD_INT 4
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PPUSH
52816: CALL_OW 72
52820: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
52821: LD_VAR 0 3
52825: NOT
52826: PUSH
52827: LD_EXP 44
52831: PUSH
52832: LD_VAR 0 2
52836: ARRAY
52837: NOT
52838: OR
52839: IFFALSE 52889
// begin if mc_deposits_finder [ i ] then
52841: LD_EXP 45
52845: PUSH
52846: LD_VAR 0 2
52850: ARRAY
52851: IFFALSE 52887
// begin MC_Reset ( i , 125 ) ;
52853: LD_VAR 0 2
52857: PPUSH
52858: LD_INT 125
52860: PPUSH
52861: CALL 42409 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
52865: LD_ADDR_EXP 45
52869: PUSH
52870: LD_EXP 45
52874: PPUSH
52875: LD_VAR 0 2
52879: PPUSH
52880: EMPTY
52881: PPUSH
52882: CALL_OW 1
52886: ST_TO_ADDR
// end ; continue ;
52887: GO 52787
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
52889: LD_EXP 44
52893: PUSH
52894: LD_VAR 0 2
52898: ARRAY
52899: PUSH
52900: LD_INT 1
52902: ARRAY
52903: PUSH
52904: LD_INT 3
52906: ARRAY
52907: PUSH
52908: LD_INT 1
52910: EQUAL
52911: PUSH
52912: LD_INT 20
52914: PPUSH
52915: LD_EXP 34
52919: PUSH
52920: LD_VAR 0 2
52924: ARRAY
52925: PPUSH
52926: CALL_OW 321
52930: PUSH
52931: LD_INT 2
52933: NONEQUAL
52934: AND
52935: IFFALSE 52985
// begin if mc_deposits_finder [ i ] then
52937: LD_EXP 45
52941: PUSH
52942: LD_VAR 0 2
52946: ARRAY
52947: IFFALSE 52983
// begin MC_Reset ( i , 125 ) ;
52949: LD_VAR 0 2
52953: PPUSH
52954: LD_INT 125
52956: PPUSH
52957: CALL 42409 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
52961: LD_ADDR_EXP 45
52965: PUSH
52966: LD_EXP 45
52970: PPUSH
52971: LD_VAR 0 2
52975: PPUSH
52976: EMPTY
52977: PPUSH
52978: CALL_OW 1
52982: ST_TO_ADDR
// end ; continue ;
52983: GO 52787
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
52985: LD_EXP 44
52989: PUSH
52990: LD_VAR 0 2
52994: ARRAY
52995: PUSH
52996: LD_INT 1
52998: ARRAY
52999: PUSH
53000: LD_INT 1
53002: ARRAY
53003: PPUSH
53004: LD_EXP 44
53008: PUSH
53009: LD_VAR 0 2
53013: ARRAY
53014: PUSH
53015: LD_INT 1
53017: ARRAY
53018: PUSH
53019: LD_INT 2
53021: ARRAY
53022: PPUSH
53023: LD_EXP 34
53027: PUSH
53028: LD_VAR 0 2
53032: ARRAY
53033: PPUSH
53034: CALL_OW 440
53038: IFFALSE 53081
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
53040: LD_ADDR_EXP 44
53044: PUSH
53045: LD_EXP 44
53049: PPUSH
53050: LD_VAR 0 2
53054: PPUSH
53055: LD_EXP 44
53059: PUSH
53060: LD_VAR 0 2
53064: ARRAY
53065: PPUSH
53066: LD_INT 1
53068: PPUSH
53069: CALL_OW 3
53073: PPUSH
53074: CALL_OW 1
53078: ST_TO_ADDR
53079: GO 53328
// begin if not mc_deposits_finder [ i ] then
53081: LD_EXP 45
53085: PUSH
53086: LD_VAR 0 2
53090: ARRAY
53091: NOT
53092: IFFALSE 53144
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
53094: LD_ADDR_EXP 45
53098: PUSH
53099: LD_EXP 45
53103: PPUSH
53104: LD_VAR 0 2
53108: PPUSH
53109: LD_VAR 0 3
53113: PUSH
53114: LD_INT 1
53116: ARRAY
53117: PUSH
53118: EMPTY
53119: LIST
53120: PPUSH
53121: CALL_OW 1
53125: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
53126: LD_VAR 0 3
53130: PUSH
53131: LD_INT 1
53133: ARRAY
53134: PPUSH
53135: LD_INT 125
53137: PPUSH
53138: CALL_OW 109
// end else
53142: GO 53328
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
53144: LD_EXP 45
53148: PUSH
53149: LD_VAR 0 2
53153: ARRAY
53154: PUSH
53155: LD_INT 1
53157: ARRAY
53158: PPUSH
53159: CALL_OW 310
53163: IFFALSE 53186
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
53165: LD_EXP 45
53169: PUSH
53170: LD_VAR 0 2
53174: ARRAY
53175: PUSH
53176: LD_INT 1
53178: ARRAY
53179: PPUSH
53180: CALL_OW 122
53184: GO 53328
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
53186: LD_EXP 45
53190: PUSH
53191: LD_VAR 0 2
53195: ARRAY
53196: PUSH
53197: LD_INT 1
53199: ARRAY
53200: PPUSH
53201: CALL_OW 314
53205: NOT
53206: PUSH
53207: LD_EXP 45
53211: PUSH
53212: LD_VAR 0 2
53216: ARRAY
53217: PUSH
53218: LD_INT 1
53220: ARRAY
53221: PPUSH
53222: LD_EXP 44
53226: PUSH
53227: LD_VAR 0 2
53231: ARRAY
53232: PUSH
53233: LD_INT 1
53235: ARRAY
53236: PUSH
53237: LD_INT 1
53239: ARRAY
53240: PPUSH
53241: LD_EXP 44
53245: PUSH
53246: LD_VAR 0 2
53250: ARRAY
53251: PUSH
53252: LD_INT 1
53254: ARRAY
53255: PUSH
53256: LD_INT 2
53258: ARRAY
53259: PPUSH
53260: CALL_OW 297
53264: PUSH
53265: LD_INT 6
53267: GREATER
53268: AND
53269: IFFALSE 53328
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
53271: LD_EXP 45
53275: PUSH
53276: LD_VAR 0 2
53280: ARRAY
53281: PUSH
53282: LD_INT 1
53284: ARRAY
53285: PPUSH
53286: LD_EXP 44
53290: PUSH
53291: LD_VAR 0 2
53295: ARRAY
53296: PUSH
53297: LD_INT 1
53299: ARRAY
53300: PUSH
53301: LD_INT 1
53303: ARRAY
53304: PPUSH
53305: LD_EXP 44
53309: PUSH
53310: LD_VAR 0 2
53314: ARRAY
53315: PUSH
53316: LD_INT 1
53318: ARRAY
53319: PUSH
53320: LD_INT 2
53322: ARRAY
53323: PPUSH
53324: CALL_OW 111
// end ; end ; end ;
53328: GO 52787
53330: POP
53331: POP
// end ;
53332: LD_VAR 0 1
53336: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
53337: LD_INT 0
53339: PPUSH
53340: PPUSH
53341: PPUSH
53342: PPUSH
53343: PPUSH
53344: PPUSH
53345: PPUSH
53346: PPUSH
53347: PPUSH
// if not mc_bases then
53348: LD_EXP 8
53352: NOT
53353: IFFALSE 53357
// exit ;
53355: GO 53840
// for i = 1 to mc_bases do
53357: LD_ADDR_VAR 0 2
53361: PUSH
53362: DOUBLE
53363: LD_INT 1
53365: DEC
53366: ST_TO_ADDR
53367: LD_EXP 8
53371: PUSH
53372: FOR_TO
53373: IFFALSE 53838
// begin nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
53375: LD_ADDR_VAR 0 7
53379: PUSH
53380: LD_EXP 8
53384: PUSH
53385: LD_VAR 0 2
53389: ARRAY
53390: PUSH
53391: LD_INT 1
53393: ARRAY
53394: PPUSH
53395: CALL_OW 248
53399: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
53400: LD_VAR 0 7
53404: PUSH
53405: LD_INT 1
53407: NONEQUAL
53408: PUSH
53409: LD_EXP 27
53413: PUSH
53414: LD_VAR 0 2
53418: ARRAY
53419: PUSH
53420: LD_EXP 30
53424: PUSH
53425: LD_VAR 0 2
53429: ARRAY
53430: UNION
53431: PPUSH
53432: LD_INT 33
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PPUSH
53442: CALL_OW 72
53446: NOT
53447: OR
53448: IFFALSE 53452
// continue ;
53450: GO 53372
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
53452: LD_ADDR_VAR 0 9
53456: PUSH
53457: LD_EXP 8
53461: PUSH
53462: LD_VAR 0 2
53466: ARRAY
53467: PPUSH
53468: LD_INT 30
53470: PUSH
53471: LD_INT 36
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PPUSH
53478: CALL_OW 72
53482: ST_TO_ADDR
// if not cts then
53483: LD_VAR 0 9
53487: NOT
53488: IFFALSE 53492
// continue ;
53490: GO 53372
// if mc_remote_driver [ i ] then
53492: LD_EXP 47
53496: PUSH
53497: LD_VAR 0 2
53501: ARRAY
53502: IFFALSE 53651
// for j in mc_remote_driver [ i ] do
53504: LD_ADDR_VAR 0 3
53508: PUSH
53509: LD_EXP 47
53513: PUSH
53514: LD_VAR 0 2
53518: ARRAY
53519: PUSH
53520: FOR_IN
53521: IFFALSE 53649
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
53523: LD_VAR 0 3
53527: PPUSH
53528: CALL_OW 310
53532: NOT
53533: PUSH
53534: LD_VAR 0 3
53538: PPUSH
53539: CALL_OW 310
53543: PPUSH
53544: CALL_OW 266
53548: PUSH
53549: LD_INT 36
53551: NONEQUAL
53552: OR
53553: IFFALSE 53647
// begin if IsInUnit ( j ) then
53555: LD_VAR 0 3
53559: PPUSH
53560: CALL_OW 310
53564: IFFALSE 53575
// ComExitBuilding ( j ) ;
53566: LD_VAR 0 3
53570: PPUSH
53571: CALL_OW 122
// ct := 0 ;
53575: LD_ADDR_VAR 0 8
53579: PUSH
53580: LD_INT 0
53582: ST_TO_ADDR
// for k in cts do
53583: LD_ADDR_VAR 0 4
53587: PUSH
53588: LD_VAR 0 9
53592: PUSH
53593: FOR_IN
53594: IFFALSE 53625
// if UnitsInside ( k ) < 3 then
53596: LD_VAR 0 4
53600: PPUSH
53601: CALL_OW 313
53605: PUSH
53606: LD_INT 3
53608: LESS
53609: IFFALSE 53623
// begin ct := k ;
53611: LD_ADDR_VAR 0 8
53615: PUSH
53616: LD_VAR 0 4
53620: ST_TO_ADDR
// break ;
53621: GO 53625
// end ;
53623: GO 53593
53625: POP
53626: POP
// if ct then
53627: LD_VAR 0 8
53631: IFFALSE 53647
// AddComEnterUnit ( j , ct ) ;
53633: LD_VAR 0 3
53637: PPUSH
53638: LD_VAR 0 8
53642: PPUSH
53643: CALL_OW 180
// end ;
53647: GO 53520
53649: POP
53650: POP
// places := 0 ;
53651: LD_ADDR_VAR 0 5
53655: PUSH
53656: LD_INT 0
53658: ST_TO_ADDR
// for j = 1 to cts do
53659: LD_ADDR_VAR 0 3
53663: PUSH
53664: DOUBLE
53665: LD_INT 1
53667: DEC
53668: ST_TO_ADDR
53669: LD_VAR 0 9
53673: PUSH
53674: FOR_TO
53675: IFFALSE 53693
// places := places + 3 ;
53677: LD_ADDR_VAR 0 5
53681: PUSH
53682: LD_VAR 0 5
53686: PUSH
53687: LD_INT 3
53689: PLUS
53690: ST_TO_ADDR
53691: GO 53674
53693: POP
53694: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
53695: LD_ADDR_VAR 0 6
53699: PUSH
53700: LD_EXP 8
53704: PUSH
53705: LD_VAR 0 2
53709: ARRAY
53710: PPUSH
53711: LD_INT 25
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PPUSH
53721: CALL_OW 72
53725: PUSH
53726: LD_EXP 47
53730: PUSH
53731: LD_VAR 0 2
53735: ARRAY
53736: DIFF
53737: ST_TO_ADDR
// if not tmp then
53738: LD_VAR 0 6
53742: NOT
53743: IFFALSE 53747
// continue ;
53745: GO 53372
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
53747: LD_ADDR_VAR 0 5
53751: PUSH
53752: LD_VAR 0 5
53756: PUSH
53757: LD_EXP 47
53761: PUSH
53762: LD_VAR 0 2
53766: ARRAY
53767: PUSH
53768: LD_INT 1
53770: PLUS
53771: MINUS
53772: ST_TO_ADDR
// if places then
53773: LD_VAR 0 5
53777: IFFALSE 53836
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
53779: LD_ADDR_EXP 47
53783: PUSH
53784: LD_EXP 47
53788: PPUSH
53789: LD_VAR 0 2
53793: PPUSH
53794: LD_EXP 47
53798: PUSH
53799: LD_VAR 0 2
53803: ARRAY
53804: PUSH
53805: LD_VAR 0 6
53809: PUSH
53810: LD_INT 1
53812: ARRAY
53813: UNION
53814: PPUSH
53815: CALL_OW 1
53819: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
53820: LD_VAR 0 6
53824: PUSH
53825: LD_INT 1
53827: ARRAY
53828: PPUSH
53829: LD_INT 126
53831: PPUSH
53832: CALL_OW 109
// end ; end ;
53836: GO 53372
53838: POP
53839: POP
// end ;
53840: LD_VAR 0 1
53844: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
53845: LD_INT 0
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
53853: LD_VAR 0 1
53857: NOT
53858: PUSH
53859: LD_VAR 0 2
53863: NOT
53864: OR
53865: PUSH
53866: LD_VAR 0 3
53870: NOT
53871: OR
53872: PUSH
53873: LD_VAR 0 4
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: LD_INT 5
53892: PUSH
53893: LD_INT 8
53895: PUSH
53896: LD_INT 9
53898: PUSH
53899: LD_INT 15
53901: PUSH
53902: LD_INT 16
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: IN
53916: NOT
53917: OR
53918: IFFALSE 53922
// exit ;
53920: GO 54822
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
53922: LD_ADDR_VAR 0 2
53926: PUSH
53927: LD_VAR 0 2
53931: PPUSH
53932: LD_INT 21
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 24
53944: PUSH
53945: LD_INT 250
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PPUSH
53956: CALL_OW 72
53960: ST_TO_ADDR
// case class of 1 , 15 :
53961: LD_VAR 0 4
53965: PUSH
53966: LD_INT 1
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 53980
53972: LD_INT 15
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 53980
53978: GO 54065
53980: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
53981: LD_ADDR_VAR 0 8
53985: PUSH
53986: LD_VAR 0 2
53990: PPUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 30
53996: PUSH
53997: LD_INT 32
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 30
54006: PUSH
54007: LD_INT 31
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: PPUSH
54019: CALL_OW 72
54023: PUSH
54024: LD_VAR 0 2
54028: PPUSH
54029: LD_INT 2
54031: PUSH
54032: LD_INT 30
54034: PUSH
54035: LD_INT 4
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 30
54044: PUSH
54045: LD_INT 5
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: PPUSH
54057: CALL_OW 72
54061: ADD
54062: ST_TO_ADDR
54063: GO 54311
54065: LD_INT 2
54067: DOUBLE
54068: EQUAL
54069: IFTRUE 54079
54071: LD_INT 16
54073: DOUBLE
54074: EQUAL
54075: IFTRUE 54079
54077: GO 54125
54079: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
54080: LD_ADDR_VAR 0 8
54084: PUSH
54085: LD_VAR 0 2
54089: PPUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 30
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 30
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: PPUSH
54118: CALL_OW 72
54122: ST_TO_ADDR
54123: GO 54311
54125: LD_INT 3
54127: DOUBLE
54128: EQUAL
54129: IFTRUE 54133
54131: GO 54179
54133: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
54134: LD_ADDR_VAR 0 8
54138: PUSH
54139: LD_VAR 0 2
54143: PPUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 30
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 30
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: PPUSH
54172: CALL_OW 72
54176: ST_TO_ADDR
54177: GO 54311
54179: LD_INT 4
54181: DOUBLE
54182: EQUAL
54183: IFTRUE 54187
54185: GO 54244
54187: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
54188: LD_ADDR_VAR 0 8
54192: PUSH
54193: LD_VAR 0 2
54197: PPUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 30
54203: PUSH
54204: LD_INT 6
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 30
54213: PUSH
54214: LD_INT 7
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 30
54223: PUSH
54224: LD_INT 8
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: PPUSH
54237: CALL_OW 72
54241: ST_TO_ADDR
54242: GO 54311
54244: LD_INT 5
54246: DOUBLE
54247: EQUAL
54248: IFTRUE 54264
54250: LD_INT 8
54252: DOUBLE
54253: EQUAL
54254: IFTRUE 54264
54256: LD_INT 9
54258: DOUBLE
54259: EQUAL
54260: IFTRUE 54264
54262: GO 54310
54264: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
54265: LD_ADDR_VAR 0 8
54269: PUSH
54270: LD_VAR 0 2
54274: PPUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 30
54280: PUSH
54281: LD_INT 4
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 30
54290: PUSH
54291: LD_INT 5
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: PPUSH
54303: CALL_OW 72
54307: ST_TO_ADDR
54308: GO 54311
54310: POP
// if not tmp then
54311: LD_VAR 0 8
54315: NOT
54316: IFFALSE 54320
// exit ;
54318: GO 54822
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
54320: LD_VAR 0 4
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 15
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: IN
54335: PUSH
54336: LD_EXP 17
54340: PUSH
54341: LD_VAR 0 1
54345: ARRAY
54346: AND
54347: IFFALSE 54503
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
54349: LD_ADDR_VAR 0 9
54353: PUSH
54354: LD_EXP 17
54358: PUSH
54359: LD_VAR 0 1
54363: ARRAY
54364: PUSH
54365: LD_INT 1
54367: ARRAY
54368: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
54369: LD_VAR 0 9
54373: PUSH
54374: LD_EXP 18
54378: PUSH
54379: LD_VAR 0 1
54383: ARRAY
54384: IN
54385: NOT
54386: IFFALSE 54501
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
54388: LD_ADDR_EXP 18
54392: PUSH
54393: LD_EXP 18
54397: PPUSH
54398: LD_VAR 0 1
54402: PUSH
54403: LD_EXP 18
54407: PUSH
54408: LD_VAR 0 1
54412: ARRAY
54413: PUSH
54414: LD_INT 1
54416: PLUS
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PPUSH
54422: LD_VAR 0 9
54426: PPUSH
54427: CALL 8386 0 3
54431: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
54432: LD_ADDR_EXP 17
54436: PUSH
54437: LD_EXP 17
54441: PPUSH
54442: LD_VAR 0 1
54446: PPUSH
54447: LD_EXP 17
54451: PUSH
54452: LD_VAR 0 1
54456: ARRAY
54457: PUSH
54458: LD_VAR 0 9
54462: DIFF
54463: PPUSH
54464: CALL_OW 1
54468: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
54469: LD_VAR 0 3
54473: PPUSH
54474: LD_EXP 18
54478: PUSH
54479: LD_VAR 0 1
54483: ARRAY
54484: PUSH
54485: LD_EXP 18
54489: PUSH
54490: LD_VAR 0 1
54494: ARRAY
54495: ARRAY
54496: PPUSH
54497: CALL_OW 120
// end ; exit ;
54501: GO 54822
// end ; if tmp > 1 then
54503: LD_VAR 0 8
54507: PUSH
54508: LD_INT 1
54510: GREATER
54511: IFFALSE 54615
// for i = 2 to tmp do
54513: LD_ADDR_VAR 0 6
54517: PUSH
54518: DOUBLE
54519: LD_INT 2
54521: DEC
54522: ST_TO_ADDR
54523: LD_VAR 0 8
54527: PUSH
54528: FOR_TO
54529: IFFALSE 54613
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
54531: LD_VAR 0 8
54535: PUSH
54536: LD_VAR 0 6
54540: ARRAY
54541: PPUSH
54542: CALL_OW 461
54546: PUSH
54547: LD_INT 6
54549: EQUAL
54550: IFFALSE 54611
// begin x := tmp [ i ] ;
54552: LD_ADDR_VAR 0 9
54556: PUSH
54557: LD_VAR 0 8
54561: PUSH
54562: LD_VAR 0 6
54566: ARRAY
54567: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
54568: LD_ADDR_VAR 0 8
54572: PUSH
54573: LD_VAR 0 8
54577: PPUSH
54578: LD_VAR 0 6
54582: PPUSH
54583: CALL_OW 3
54587: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
54588: LD_ADDR_VAR 0 8
54592: PUSH
54593: LD_VAR 0 8
54597: PPUSH
54598: LD_INT 1
54600: PPUSH
54601: LD_VAR 0 9
54605: PPUSH
54606: CALL_OW 2
54610: ST_TO_ADDR
// end ;
54611: GO 54528
54613: POP
54614: POP
// for i in tmp do
54615: LD_ADDR_VAR 0 6
54619: PUSH
54620: LD_VAR 0 8
54624: PUSH
54625: FOR_IN
54626: IFFALSE 54695
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
54628: LD_VAR 0 6
54632: PPUSH
54633: CALL_OW 313
54637: PUSH
54638: LD_INT 6
54640: LESS
54641: PUSH
54642: LD_VAR 0 6
54646: PPUSH
54647: CALL_OW 266
54651: PUSH
54652: LD_INT 31
54654: PUSH
54655: LD_INT 32
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: IN
54662: NOT
54663: AND
54664: PUSH
54665: LD_VAR 0 6
54669: PPUSH
54670: CALL_OW 313
54674: PUSH
54675: LD_INT 0
54677: EQUAL
54678: OR
54679: IFFALSE 54693
// begin j := i ;
54681: LD_ADDR_VAR 0 7
54685: PUSH
54686: LD_VAR 0 6
54690: ST_TO_ADDR
// break ;
54691: GO 54695
// end ; end ;
54693: GO 54625
54695: POP
54696: POP
// if j then
54697: LD_VAR 0 7
54701: IFFALSE 54719
// ComEnterUnit ( unit , j ) else
54703: LD_VAR 0 3
54707: PPUSH
54708: LD_VAR 0 7
54712: PPUSH
54713: CALL_OW 120
54717: GO 54822
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54719: LD_ADDR_VAR 0 10
54723: PUSH
54724: LD_VAR 0 2
54728: PPUSH
54729: LD_INT 2
54731: PUSH
54732: LD_INT 30
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 30
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: PPUSH
54757: CALL_OW 72
54761: ST_TO_ADDR
// if depot then
54762: LD_VAR 0 10
54766: IFFALSE 54822
// begin depot := NearestUnitToUnit ( depot , unit ) ;
54768: LD_ADDR_VAR 0 10
54772: PUSH
54773: LD_VAR 0 10
54777: PPUSH
54778: LD_VAR 0 3
54782: PPUSH
54783: CALL_OW 74
54787: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
54788: LD_VAR 0 3
54792: PPUSH
54793: LD_VAR 0 10
54797: PPUSH
54798: CALL_OW 296
54802: PUSH
54803: LD_INT 10
54805: GREATER
54806: IFFALSE 54822
// ComStandNearbyBuilding ( unit , depot ) ;
54808: LD_VAR 0 3
54812: PPUSH
54813: LD_VAR 0 10
54817: PPUSH
54818: CALL 3165 0 2
// end ; end ; end ;
54822: LD_VAR 0 5
54826: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
54827: LD_INT 0
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
// if not mc_bases then
54833: LD_EXP 8
54837: NOT
54838: IFFALSE 54842
// exit ;
54840: GO 55081
// for i = 1 to mc_bases do
54842: LD_ADDR_VAR 0 2
54846: PUSH
54847: DOUBLE
54848: LD_INT 1
54850: DEC
54851: ST_TO_ADDR
54852: LD_EXP 8
54856: PUSH
54857: FOR_TO
54858: IFFALSE 55079
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
54860: LD_ADDR_VAR 0 4
54864: PUSH
54865: LD_EXP 8
54869: PUSH
54870: LD_VAR 0 2
54874: ARRAY
54875: PPUSH
54876: LD_INT 21
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PPUSH
54886: CALL_OW 72
54890: PUSH
54891: LD_EXP 37
54895: PUSH
54896: LD_VAR 0 2
54900: ARRAY
54901: UNION
54902: ST_TO_ADDR
// if not tmp then
54903: LD_VAR 0 4
54907: NOT
54908: IFFALSE 54912
// continue ;
54910: GO 54857
// for j in tmp do
54912: LD_ADDR_VAR 0 3
54916: PUSH
54917: LD_VAR 0 4
54921: PUSH
54922: FOR_IN
54923: IFFALSE 55075
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
54925: LD_VAR 0 3
54929: PPUSH
54930: CALL_OW 110
54934: NOT
54935: PUSH
54936: LD_VAR 0 3
54940: PPUSH
54941: CALL_OW 314
54945: NOT
54946: AND
54947: PUSH
54948: LD_VAR 0 3
54952: PPUSH
54953: CALL_OW 311
54957: NOT
54958: AND
54959: PUSH
54960: LD_VAR 0 3
54964: PPUSH
54965: CALL_OW 310
54969: NOT
54970: AND
54971: PUSH
54972: LD_VAR 0 3
54976: PUSH
54977: LD_EXP 11
54981: PUSH
54982: LD_VAR 0 2
54986: ARRAY
54987: PUSH
54988: LD_INT 1
54990: ARRAY
54991: IN
54992: NOT
54993: AND
54994: PUSH
54995: LD_VAR 0 3
54999: PUSH
55000: LD_EXP 11
55004: PUSH
55005: LD_VAR 0 2
55009: ARRAY
55010: PUSH
55011: LD_INT 2
55013: ARRAY
55014: IN
55015: NOT
55016: AND
55017: PUSH
55018: LD_VAR 0 3
55022: PUSH
55023: LD_EXP 20
55027: PUSH
55028: LD_VAR 0 2
55032: ARRAY
55033: IN
55034: NOT
55035: AND
55036: IFFALSE 55073
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
55038: LD_VAR 0 2
55042: PPUSH
55043: LD_EXP 8
55047: PUSH
55048: LD_VAR 0 2
55052: ARRAY
55053: PPUSH
55054: LD_VAR 0 3
55058: PPUSH
55059: LD_VAR 0 3
55063: PPUSH
55064: CALL_OW 257
55068: PPUSH
55069: CALL 53845 0 4
// end ;
55073: GO 54922
55075: POP
55076: POP
// end ;
55077: GO 54857
55079: POP
55080: POP
// end ;
55081: LD_VAR 0 1
55085: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
55086: LD_INT 0
55088: PPUSH
55089: PPUSH
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
// if not mc_bases [ base ] then
55094: LD_EXP 8
55098: PUSH
55099: LD_VAR 0 1
55103: ARRAY
55104: NOT
55105: IFFALSE 55109
// exit ;
55107: GO 55291
// tmp := [ ] ;
55109: LD_ADDR_VAR 0 6
55113: PUSH
55114: EMPTY
55115: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
55116: LD_ADDR_VAR 0 7
55120: PUSH
55121: LD_VAR 0 3
55125: PPUSH
55126: LD_INT 0
55128: PPUSH
55129: CALL_OW 517
55133: ST_TO_ADDR
// if not list then
55134: LD_VAR 0 7
55138: NOT
55139: IFFALSE 55143
// exit ;
55141: GO 55291
// for i = 1 to amount do
55143: LD_ADDR_VAR 0 5
55147: PUSH
55148: DOUBLE
55149: LD_INT 1
55151: DEC
55152: ST_TO_ADDR
55153: LD_VAR 0 2
55157: PUSH
55158: FOR_TO
55159: IFFALSE 55239
// begin x := rand ( 1 , list [ 1 ] ) ;
55161: LD_ADDR_VAR 0 8
55165: PUSH
55166: LD_INT 1
55168: PPUSH
55169: LD_VAR 0 7
55173: PUSH
55174: LD_INT 1
55176: ARRAY
55177: PPUSH
55178: CALL_OW 12
55182: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
55183: LD_ADDR_VAR 0 6
55187: PUSH
55188: LD_VAR 0 6
55192: PPUSH
55193: LD_VAR 0 5
55197: PPUSH
55198: LD_VAR 0 7
55202: PUSH
55203: LD_INT 1
55205: ARRAY
55206: PUSH
55207: LD_VAR 0 8
55211: ARRAY
55212: PUSH
55213: LD_VAR 0 7
55217: PUSH
55218: LD_INT 2
55220: ARRAY
55221: PUSH
55222: LD_VAR 0 8
55226: ARRAY
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PPUSH
55232: CALL_OW 1
55236: ST_TO_ADDR
// end ;
55237: GO 55158
55239: POP
55240: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
55241: LD_ADDR_EXP 21
55245: PUSH
55246: LD_EXP 21
55250: PPUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: LD_VAR 0 6
55260: PPUSH
55261: CALL_OW 1
55265: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
55266: LD_ADDR_EXP 23
55270: PUSH
55271: LD_EXP 23
55275: PPUSH
55276: LD_VAR 0 1
55280: PPUSH
55281: LD_VAR 0 3
55285: PPUSH
55286: CALL_OW 1
55290: ST_TO_ADDR
// end ;
55291: LD_VAR 0 4
55295: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
55296: LD_INT 0
55298: PPUSH
// if not mc_bases [ base ] then
55299: LD_EXP 8
55303: PUSH
55304: LD_VAR 0 1
55308: ARRAY
55309: NOT
55310: IFFALSE 55314
// exit ;
55312: GO 55339
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
55314: LD_ADDR_EXP 13
55318: PUSH
55319: LD_EXP 13
55323: PPUSH
55324: LD_VAR 0 1
55328: PPUSH
55329: LD_VAR 0 2
55333: PPUSH
55334: CALL_OW 1
55338: ST_TO_ADDR
// end ;
55339: LD_VAR 0 3
55343: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
55344: LD_INT 0
55346: PPUSH
// if not mc_bases [ base ] then
55347: LD_EXP 8
55351: PUSH
55352: LD_VAR 0 1
55356: ARRAY
55357: NOT
55358: IFFALSE 55362
// exit ;
55360: GO 55418
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
55362: LD_ADDR_EXP 13
55366: PUSH
55367: LD_EXP 13
55371: PPUSH
55372: LD_VAR 0 1
55376: PPUSH
55377: LD_EXP 13
55381: PUSH
55382: LD_VAR 0 1
55386: ARRAY
55387: PPUSH
55388: LD_EXP 13
55392: PUSH
55393: LD_VAR 0 1
55397: ARRAY
55398: PUSH
55399: LD_INT 1
55401: PLUS
55402: PPUSH
55403: LD_VAR 0 2
55407: PPUSH
55408: CALL_OW 2
55412: PPUSH
55413: CALL_OW 1
55417: ST_TO_ADDR
// end ;
55418: LD_VAR 0 3
55422: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
55423: LD_INT 0
55425: PPUSH
// if not mc_bases [ base ] then
55426: LD_EXP 8
55430: PUSH
55431: LD_VAR 0 1
55435: ARRAY
55436: NOT
55437: IFFALSE 55441
// exit ;
55439: GO 55466
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
55441: LD_ADDR_EXP 29
55445: PUSH
55446: LD_EXP 29
55450: PPUSH
55451: LD_VAR 0 1
55455: PPUSH
55456: LD_VAR 0 2
55460: PPUSH
55461: CALL_OW 1
55465: ST_TO_ADDR
// end ;
55466: LD_VAR 0 3
55470: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
55471: LD_INT 0
55473: PPUSH
// if not mc_bases [ base ] then
55474: LD_EXP 8
55478: PUSH
55479: LD_VAR 0 1
55483: ARRAY
55484: NOT
55485: IFFALSE 55489
// exit ;
55487: GO 55529
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
55489: LD_ADDR_EXP 29
55493: PUSH
55494: LD_EXP 29
55498: PPUSH
55499: LD_VAR 0 1
55503: PPUSH
55504: LD_EXP 29
55508: PUSH
55509: LD_VAR 0 1
55513: ARRAY
55514: PUSH
55515: LD_VAR 0 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: ADD
55523: PPUSH
55524: CALL_OW 1
55528: ST_TO_ADDR
// end ;
55529: LD_VAR 0 3
55533: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
55534: LD_INT 0
55536: PPUSH
// if not mc_bases [ base ] then
55537: LD_EXP 8
55541: PUSH
55542: LD_VAR 0 1
55546: ARRAY
55547: NOT
55548: IFFALSE 55552
// exit ;
55550: GO 55664
// mc_defender := Replace ( mc_defender , base , deflist ) ;
55552: LD_ADDR_EXP 30
55556: PUSH
55557: LD_EXP 30
55561: PPUSH
55562: LD_VAR 0 1
55566: PPUSH
55567: LD_VAR 0 2
55571: PPUSH
55572: CALL_OW 1
55576: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
55577: LD_ADDR_EXP 19
55581: PUSH
55582: LD_EXP 19
55586: PPUSH
55587: LD_VAR 0 1
55591: PPUSH
55592: LD_VAR 0 2
55596: PUSH
55597: LD_INT 0
55599: PLUS
55600: PPUSH
55601: CALL_OW 1
55605: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
55606: LD_ADDR_EXP 27
55610: PUSH
55611: LD_EXP 27
55615: PPUSH
55616: LD_VAR 0 1
55620: PPUSH
55621: LD_EXP 27
55625: PUSH
55626: LD_VAR 0 1
55630: ARRAY
55631: PUSH
55632: LD_EXP 30
55636: PUSH
55637: LD_VAR 0 1
55641: ARRAY
55642: PPUSH
55643: LD_INT 21
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PPUSH
55653: CALL_OW 72
55657: UNION
55658: PPUSH
55659: CALL_OW 1
55663: ST_TO_ADDR
// end ;
55664: LD_VAR 0 3
55668: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
55669: LD_INT 0
55671: PPUSH
// if not mc_bases [ base ] then
55672: LD_EXP 8
55676: PUSH
55677: LD_VAR 0 1
55681: ARRAY
55682: NOT
55683: IFFALSE 55687
// exit ;
55685: GO 55712
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
55687: LD_ADDR_EXP 19
55691: PUSH
55692: LD_EXP 19
55696: PPUSH
55697: LD_VAR 0 1
55701: PPUSH
55702: LD_VAR 0 2
55706: PPUSH
55707: CALL_OW 1
55711: ST_TO_ADDR
// end ;
55712: LD_VAR 0 3
55716: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
55717: LD_INT 0
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
// if not mc_bases [ base ] then
55723: LD_EXP 8
55727: PUSH
55728: LD_VAR 0 1
55732: ARRAY
55733: NOT
55734: IFFALSE 55738
// exit ;
55736: GO 55803
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
55738: LD_ADDR_EXP 28
55742: PUSH
55743: LD_EXP 28
55747: PPUSH
55748: LD_VAR 0 1
55752: PUSH
55753: LD_EXP 28
55757: PUSH
55758: LD_VAR 0 1
55762: ARRAY
55763: PUSH
55764: LD_INT 1
55766: PLUS
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PPUSH
55772: LD_VAR 0 1
55776: PUSH
55777: LD_VAR 0 2
55781: PUSH
55782: LD_VAR 0 3
55786: PUSH
55787: LD_VAR 0 4
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: PPUSH
55798: CALL 8386 0 3
55802: ST_TO_ADDR
// end ;
55803: LD_VAR 0 5
55807: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
55808: LD_INT 0
55810: PPUSH
// if not mc_bases [ base ] then
55811: LD_EXP 8
55815: PUSH
55816: LD_VAR 0 1
55820: ARRAY
55821: NOT
55822: IFFALSE 55826
// exit ;
55824: GO 55851
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
55826: LD_ADDR_EXP 44
55830: PUSH
55831: LD_EXP 44
55835: PPUSH
55836: LD_VAR 0 1
55840: PPUSH
55841: LD_VAR 0 2
55845: PPUSH
55846: CALL_OW 1
55850: ST_TO_ADDR
// end ;
55851: LD_VAR 0 3
55855: RET
// export function MC_GetMinesField ( base ) ; begin
55856: LD_INT 0
55858: PPUSH
// result := mc_mines [ base ] ;
55859: LD_ADDR_VAR 0 2
55863: PUSH
55864: LD_EXP 21
55868: PUSH
55869: LD_VAR 0 1
55873: ARRAY
55874: ST_TO_ADDR
// end ;
55875: LD_VAR 0 2
55879: RET
// export function MC_GetProduceList ( base ) ; begin
55880: LD_INT 0
55882: PPUSH
// result := mc_produce [ base ] ;
55883: LD_ADDR_VAR 0 2
55887: PUSH
55888: LD_EXP 29
55892: PUSH
55893: LD_VAR 0 1
55897: ARRAY
55898: ST_TO_ADDR
// end ;
55899: LD_VAR 0 2
55903: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
55904: LD_INT 0
55906: PPUSH
55907: PPUSH
// if not mc_bases then
55908: LD_EXP 8
55912: NOT
55913: IFFALSE 55917
// exit ;
55915: GO 55982
// if mc_bases [ base ] then
55917: LD_EXP 8
55921: PUSH
55922: LD_VAR 0 1
55926: ARRAY
55927: IFFALSE 55982
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
55929: LD_ADDR_VAR 0 3
55933: PUSH
55934: LD_EXP 8
55938: PUSH
55939: LD_VAR 0 1
55943: ARRAY
55944: PPUSH
55945: LD_INT 30
55947: PUSH
55948: LD_VAR 0 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PPUSH
55957: CALL_OW 72
55961: ST_TO_ADDR
// if result then
55962: LD_VAR 0 3
55966: IFFALSE 55982
// result := result [ 1 ] ;
55968: LD_ADDR_VAR 0 3
55972: PUSH
55973: LD_VAR 0 3
55977: PUSH
55978: LD_INT 1
55980: ARRAY
55981: ST_TO_ADDR
// end ; end ;
55982: LD_VAR 0 3
55986: RET
// export function MC_SetTame ( base , area ) ; begin
55987: LD_INT 0
55989: PPUSH
// if not mc_bases or not base then
55990: LD_EXP 8
55994: NOT
55995: PUSH
55996: LD_VAR 0 1
56000: NOT
56001: OR
56002: IFFALSE 56006
// exit ;
56004: GO 56031
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
56006: LD_ADDR_EXP 36
56010: PUSH
56011: LD_EXP 36
56015: PPUSH
56016: LD_VAR 0 1
56020: PPUSH
56021: LD_VAR 0 2
56025: PPUSH
56026: CALL_OW 1
56030: ST_TO_ADDR
// end ;
56031: LD_VAR 0 3
56035: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
56036: LD_INT 0
56038: PPUSH
56039: PPUSH
// if not mc_bases or not base then
56040: LD_EXP 8
56044: NOT
56045: PUSH
56046: LD_VAR 0 1
56050: NOT
56051: OR
56052: IFFALSE 56056
// exit ;
56054: GO 56158
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
56056: LD_ADDR_VAR 0 4
56060: PUSH
56061: LD_EXP 8
56065: PUSH
56066: LD_VAR 0 1
56070: ARRAY
56071: PPUSH
56072: LD_INT 30
56074: PUSH
56075: LD_VAR 0 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PPUSH
56084: CALL_OW 72
56088: ST_TO_ADDR
// if not tmp then
56089: LD_VAR 0 4
56093: NOT
56094: IFFALSE 56098
// exit ;
56096: GO 56158
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
56098: LD_ADDR_EXP 40
56102: PUSH
56103: LD_EXP 40
56107: PPUSH
56108: LD_VAR 0 1
56112: PPUSH
56113: LD_EXP 40
56117: PUSH
56118: LD_VAR 0 1
56122: ARRAY
56123: PPUSH
56124: LD_EXP 40
56128: PUSH
56129: LD_VAR 0 1
56133: ARRAY
56134: PUSH
56135: LD_INT 1
56137: PLUS
56138: PPUSH
56139: LD_VAR 0 4
56143: PUSH
56144: LD_INT 1
56146: ARRAY
56147: PPUSH
56148: CALL_OW 2
56152: PPUSH
56153: CALL_OW 1
56157: ST_TO_ADDR
// end ;
56158: LD_VAR 0 3
56162: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
56163: LD_INT 0
56165: PPUSH
56166: PPUSH
// if not mc_bases or not base or not kinds then
56167: LD_EXP 8
56171: NOT
56172: PUSH
56173: LD_VAR 0 1
56177: NOT
56178: OR
56179: PUSH
56180: LD_VAR 0 2
56184: NOT
56185: OR
56186: IFFALSE 56190
// exit ;
56188: GO 56251
// for i in kinds do
56190: LD_ADDR_VAR 0 4
56194: PUSH
56195: LD_VAR 0 2
56199: PUSH
56200: FOR_IN
56201: IFFALSE 56249
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
56203: LD_ADDR_EXP 42
56207: PUSH
56208: LD_EXP 42
56212: PPUSH
56213: LD_VAR 0 1
56217: PUSH
56218: LD_EXP 42
56222: PUSH
56223: LD_VAR 0 1
56227: ARRAY
56228: PUSH
56229: LD_INT 1
56231: PLUS
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PPUSH
56237: LD_VAR 0 4
56241: PPUSH
56242: CALL 8386 0 3
56246: ST_TO_ADDR
56247: GO 56200
56249: POP
56250: POP
// end ;
56251: LD_VAR 0 3
56255: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
56256: LD_INT 0
56258: PPUSH
// if not mc_bases or not base or not areas then
56259: LD_EXP 8
56263: NOT
56264: PUSH
56265: LD_VAR 0 1
56269: NOT
56270: OR
56271: PUSH
56272: LD_VAR 0 2
56276: NOT
56277: OR
56278: IFFALSE 56282
// exit ;
56280: GO 56307
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
56282: LD_ADDR_EXP 26
56286: PUSH
56287: LD_EXP 26
56291: PPUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: LD_VAR 0 2
56301: PPUSH
56302: CALL_OW 1
56306: ST_TO_ADDR
// end ;
56307: LD_VAR 0 3
56311: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
56312: LD_INT 0
56314: PPUSH
// if not mc_bases or not base then
56315: LD_EXP 8
56319: NOT
56320: PUSH
56321: LD_VAR 0 1
56325: NOT
56326: OR
56327: IFFALSE 56331
// exit ;
56329: GO 56365
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
56331: LD_ADDR_EXP 43
56335: PUSH
56336: LD_EXP 43
56340: PPUSH
56341: LD_VAR 0 1
56345: PPUSH
56346: LD_VAR 0 2
56350: PUSH
56351: LD_VAR 0 3
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PPUSH
56360: CALL_OW 1
56364: ST_TO_ADDR
// end ;
56365: LD_VAR 0 4
56369: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
56370: LD_INT 0
56372: PPUSH
56373: PPUSH
56374: PPUSH
// if not mc_bases or not base or not ext_list then
56375: LD_EXP 8
56379: NOT
56380: PUSH
56381: LD_VAR 0 1
56385: NOT
56386: OR
56387: PUSH
56388: LD_VAR 0 5
56392: NOT
56393: OR
56394: IFFALSE 56398
// exit ;
56396: GO 56571
// tmp := GetFacExtXYD ( x , y , d ) ;
56398: LD_ADDR_VAR 0 8
56402: PUSH
56403: LD_VAR 0 2
56407: PPUSH
56408: LD_VAR 0 3
56412: PPUSH
56413: LD_VAR 0 4
56417: PPUSH
56418: CALL 39466 0 3
56422: ST_TO_ADDR
// if not tmp then
56423: LD_VAR 0 8
56427: NOT
56428: IFFALSE 56432
// exit ;
56430: GO 56571
// for i in tmp do
56432: LD_ADDR_VAR 0 7
56436: PUSH
56437: LD_VAR 0 8
56441: PUSH
56442: FOR_IN
56443: IFFALSE 56569
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
56445: LD_ADDR_EXP 13
56449: PUSH
56450: LD_EXP 13
56454: PPUSH
56455: LD_VAR 0 1
56459: PPUSH
56460: LD_EXP 13
56464: PUSH
56465: LD_VAR 0 1
56469: ARRAY
56470: PPUSH
56471: LD_EXP 13
56475: PUSH
56476: LD_VAR 0 1
56480: ARRAY
56481: PUSH
56482: LD_INT 1
56484: PLUS
56485: PPUSH
56486: LD_VAR 0 5
56490: PUSH
56491: LD_INT 1
56493: ARRAY
56494: PUSH
56495: LD_VAR 0 7
56499: PUSH
56500: LD_INT 1
56502: ARRAY
56503: PUSH
56504: LD_VAR 0 7
56508: PUSH
56509: LD_INT 2
56511: ARRAY
56512: PUSH
56513: LD_VAR 0 7
56517: PUSH
56518: LD_INT 3
56520: ARRAY
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: PPUSH
56528: CALL_OW 2
56532: PPUSH
56533: CALL_OW 1
56537: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
56538: LD_ADDR_VAR 0 5
56542: PUSH
56543: LD_VAR 0 5
56547: PPUSH
56548: LD_INT 1
56550: PPUSH
56551: CALL_OW 3
56555: ST_TO_ADDR
// if not ext_list then
56556: LD_VAR 0 5
56560: NOT
56561: IFFALSE 56567
// exit ;
56563: POP
56564: POP
56565: GO 56571
// end ;
56567: GO 56442
56569: POP
56570: POP
// end ;
56571: LD_VAR 0 6
56575: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
56576: LD_INT 0
56578: PPUSH
// if not mc_bases or not base or not weapon_list then
56579: LD_EXP 8
56583: NOT
56584: PUSH
56585: LD_VAR 0 1
56589: NOT
56590: OR
56591: PUSH
56592: LD_VAR 0 2
56596: NOT
56597: OR
56598: IFFALSE 56602
// exit ;
56600: GO 56627
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
56602: LD_ADDR_EXP 46
56606: PUSH
56607: LD_EXP 46
56611: PPUSH
56612: LD_VAR 0 1
56616: PPUSH
56617: LD_VAR 0 2
56621: PPUSH
56622: CALL_OW 1
56626: ST_TO_ADDR
// end ;
56627: LD_VAR 0 3
56631: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
56632: LD_INT 0
56634: PPUSH
// if not mc_bases or not base or not tech_list then
56635: LD_EXP 8
56639: NOT
56640: PUSH
56641: LD_VAR 0 1
56645: NOT
56646: OR
56647: PUSH
56648: LD_VAR 0 2
56652: NOT
56653: OR
56654: IFFALSE 56658
// exit ;
56656: GO 56683
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
56658: LD_ADDR_EXP 35
56662: PUSH
56663: LD_EXP 35
56667: PPUSH
56668: LD_VAR 0 1
56672: PPUSH
56673: LD_VAR 0 2
56677: PPUSH
56678: CALL_OW 1
56682: ST_TO_ADDR
// end ;
56683: LD_VAR 0 3
56687: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
56688: LD_INT 0
56690: PPUSH
// if not mc_bases or not parking_area or not base then
56691: LD_EXP 8
56695: NOT
56696: PUSH
56697: LD_VAR 0 2
56701: NOT
56702: OR
56703: PUSH
56704: LD_VAR 0 1
56708: NOT
56709: OR
56710: IFFALSE 56714
// exit ;
56712: GO 56739
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
56714: LD_ADDR_EXP 32
56718: PUSH
56719: LD_EXP 32
56723: PPUSH
56724: LD_VAR 0 1
56728: PPUSH
56729: LD_VAR 0 2
56733: PPUSH
56734: CALL_OW 1
56738: ST_TO_ADDR
// end ;
56739: LD_VAR 0 3
56743: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
56744: LD_INT 0
56746: PPUSH
// if not mc_bases or not base or not scan_area then
56747: LD_EXP 8
56751: NOT
56752: PUSH
56753: LD_VAR 0 1
56757: NOT
56758: OR
56759: PUSH
56760: LD_VAR 0 2
56764: NOT
56765: OR
56766: IFFALSE 56770
// exit ;
56768: GO 56795
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
56770: LD_ADDR_EXP 33
56774: PUSH
56775: LD_EXP 33
56779: PPUSH
56780: LD_VAR 0 1
56784: PPUSH
56785: LD_VAR 0 2
56789: PPUSH
56790: CALL_OW 1
56794: ST_TO_ADDR
// end ; end_of_file
56795: LD_VAR 0 3
56799: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
56800: LD_INT 0
56802: PPUSH
56803: PPUSH
56804: PPUSH
// if not mc_bases then
56805: LD_EXP 8
56809: NOT
56810: IFFALSE 56814
// exit ;
56812: GO 56979
// for i = 1 to mc_bases do
56814: LD_ADDR_VAR 0 4
56818: PUSH
56819: DOUBLE
56820: LD_INT 1
56822: DEC
56823: ST_TO_ADDR
56824: LD_EXP 8
56828: PUSH
56829: FOR_TO
56830: IFFALSE 56977
// begin if sci in mc_bases [ i ] then
56832: LD_VAR 0 2
56836: PUSH
56837: LD_EXP 8
56841: PUSH
56842: LD_VAR 0 4
56846: ARRAY
56847: IN
56848: IFFALSE 56975
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
56850: LD_ADDR_EXP 37
56854: PUSH
56855: LD_EXP 37
56859: PPUSH
56860: LD_VAR 0 4
56864: PUSH
56865: LD_EXP 37
56869: PUSH
56870: LD_VAR 0 4
56874: ARRAY
56875: PUSH
56876: LD_INT 1
56878: PLUS
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PPUSH
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL 8386 0 3
56893: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
56894: LD_ADDR_VAR 0 5
56898: PUSH
56899: LD_EXP 8
56903: PUSH
56904: LD_VAR 0 4
56908: ARRAY
56909: PPUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 30
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 30
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: PPUSH
56938: CALL_OW 72
56942: PPUSH
56943: LD_VAR 0 1
56947: PPUSH
56948: CALL_OW 74
56952: ST_TO_ADDR
// if tmp then
56953: LD_VAR 0 5
56957: IFFALSE 56973
// ComStandNearbyBuilding ( ape , tmp ) ;
56959: LD_VAR 0 1
56963: PPUSH
56964: LD_VAR 0 5
56968: PPUSH
56969: CALL 3165 0 2
// break ;
56973: GO 56977
// end ; end ;
56975: GO 56829
56977: POP
56978: POP
// end ;
56979: LD_VAR 0 3
56983: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
56984: LD_INT 0
56986: PPUSH
56987: PPUSH
56988: PPUSH
// if not mc_bases then
56989: LD_EXP 8
56993: NOT
56994: IFFALSE 56998
// exit ;
56996: GO 57087
// for i = 1 to mc_bases do
56998: LD_ADDR_VAR 0 4
57002: PUSH
57003: DOUBLE
57004: LD_INT 1
57006: DEC
57007: ST_TO_ADDR
57008: LD_EXP 8
57012: PUSH
57013: FOR_TO
57014: IFFALSE 57085
// begin if building in mc_busy_turret_list [ i ] then
57016: LD_VAR 0 1
57020: PUSH
57021: LD_EXP 18
57025: PUSH
57026: LD_VAR 0 4
57030: ARRAY
57031: IN
57032: IFFALSE 57083
// begin tmp := mc_busy_turret_list [ i ] diff building ;
57034: LD_ADDR_VAR 0 5
57038: PUSH
57039: LD_EXP 18
57043: PUSH
57044: LD_VAR 0 4
57048: ARRAY
57049: PUSH
57050: LD_VAR 0 1
57054: DIFF
57055: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
57056: LD_ADDR_EXP 18
57060: PUSH
57061: LD_EXP 18
57065: PPUSH
57066: LD_VAR 0 4
57070: PPUSH
57071: LD_VAR 0 5
57075: PPUSH
57076: CALL_OW 1
57080: ST_TO_ADDR
// break ;
57081: GO 57085
// end ; end ;
57083: GO 57013
57085: POP
57086: POP
// end ;
57087: LD_VAR 0 3
57091: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
57092: LD_INT 0
57094: PPUSH
57095: PPUSH
57096: PPUSH
// if not mc_bases then
57097: LD_EXP 8
57101: NOT
57102: IFFALSE 57106
// exit ;
57104: GO 57305
// for i = 1 to mc_bases do
57106: LD_ADDR_VAR 0 5
57110: PUSH
57111: DOUBLE
57112: LD_INT 1
57114: DEC
57115: ST_TO_ADDR
57116: LD_EXP 8
57120: PUSH
57121: FOR_TO
57122: IFFALSE 57303
// if building in mc_bases [ i ] then
57124: LD_VAR 0 1
57128: PUSH
57129: LD_EXP 8
57133: PUSH
57134: LD_VAR 0 5
57138: ARRAY
57139: IN
57140: IFFALSE 57301
// begin tmp := mc_bases [ i ] diff building ;
57142: LD_ADDR_VAR 0 6
57146: PUSH
57147: LD_EXP 8
57151: PUSH
57152: LD_VAR 0 5
57156: ARRAY
57157: PUSH
57158: LD_VAR 0 1
57162: DIFF
57163: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
57164: LD_ADDR_EXP 8
57168: PUSH
57169: LD_EXP 8
57173: PPUSH
57174: LD_VAR 0 5
57178: PPUSH
57179: LD_VAR 0 6
57183: PPUSH
57184: CALL_OW 1
57188: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
57189: LD_VAR 0 1
57193: PUSH
57194: LD_EXP 16
57198: PUSH
57199: LD_VAR 0 5
57203: ARRAY
57204: IN
57205: IFFALSE 57244
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
57207: LD_ADDR_EXP 16
57211: PUSH
57212: LD_EXP 16
57216: PPUSH
57217: LD_VAR 0 5
57221: PPUSH
57222: LD_EXP 16
57226: PUSH
57227: LD_VAR 0 5
57231: ARRAY
57232: PUSH
57233: LD_VAR 0 1
57237: DIFF
57238: PPUSH
57239: CALL_OW 1
57243: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
57244: LD_VAR 0 1
57248: PUSH
57249: LD_EXP 17
57253: PUSH
57254: LD_VAR 0 5
57258: ARRAY
57259: IN
57260: IFFALSE 57299
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
57262: LD_ADDR_EXP 17
57266: PUSH
57267: LD_EXP 17
57271: PPUSH
57272: LD_VAR 0 5
57276: PPUSH
57277: LD_EXP 17
57281: PUSH
57282: LD_VAR 0 5
57286: ARRAY
57287: PUSH
57288: LD_VAR 0 1
57292: DIFF
57293: PPUSH
57294: CALL_OW 1
57298: ST_TO_ADDR
// break ;
57299: GO 57303
// end ;
57301: GO 57121
57303: POP
57304: POP
// end ;
57305: LD_VAR 0 4
57309: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
57310: LD_INT 0
57312: PPUSH
57313: PPUSH
57314: PPUSH
// if not mc_bases or not side in mc_sides then
57315: LD_EXP 8
57319: NOT
57320: PUSH
57321: LD_VAR 0 3
57325: PUSH
57326: LD_EXP 34
57330: IN
57331: NOT
57332: OR
57333: IFFALSE 57337
// exit ;
57335: GO 57460
// for i = 1 to mc_vehicles do
57337: LD_ADDR_VAR 0 6
57341: PUSH
57342: DOUBLE
57343: LD_INT 1
57345: DEC
57346: ST_TO_ADDR
57347: LD_EXP 27
57351: PUSH
57352: FOR_TO
57353: IFFALSE 57458
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
57355: LD_VAR 0 2
57359: PUSH
57360: LD_EXP 27
57364: PUSH
57365: LD_VAR 0 6
57369: ARRAY
57370: IN
57371: PUSH
57372: LD_VAR 0 1
57376: PUSH
57377: LD_EXP 27
57381: PUSH
57382: LD_VAR 0 6
57386: ARRAY
57387: IN
57388: OR
57389: IFFALSE 57456
// begin tmp := mc_vehicles [ i ] diff old ;
57391: LD_ADDR_VAR 0 7
57395: PUSH
57396: LD_EXP 27
57400: PUSH
57401: LD_VAR 0 6
57405: ARRAY
57406: PUSH
57407: LD_VAR 0 2
57411: DIFF
57412: ST_TO_ADDR
// tmp := tmp diff new ;
57413: LD_ADDR_VAR 0 7
57417: PUSH
57418: LD_VAR 0 7
57422: PUSH
57423: LD_VAR 0 1
57427: DIFF
57428: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
57429: LD_ADDR_EXP 27
57433: PUSH
57434: LD_EXP 27
57438: PPUSH
57439: LD_VAR 0 6
57443: PPUSH
57444: LD_VAR 0 7
57448: PPUSH
57449: CALL_OW 1
57453: ST_TO_ADDR
// break ;
57454: GO 57458
// end ;
57456: GO 57352
57458: POP
57459: POP
// end ;
57460: LD_VAR 0 5
57464: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
57465: LD_INT 0
57467: PPUSH
57468: PPUSH
57469: PPUSH
57470: PPUSH
// if not mc_bases then
57471: LD_EXP 8
57475: NOT
57476: IFFALSE 57480
// exit ;
57478: GO 57772
// side := GetSide ( vehicle ) ;
57480: LD_ADDR_VAR 0 5
57484: PUSH
57485: LD_VAR 0 1
57489: PPUSH
57490: CALL_OW 255
57494: ST_TO_ADDR
// for i = 1 to mc_bases do
57495: LD_ADDR_VAR 0 4
57499: PUSH
57500: DOUBLE
57501: LD_INT 1
57503: DEC
57504: ST_TO_ADDR
57505: LD_EXP 8
57509: PUSH
57510: FOR_TO
57511: IFFALSE 57770
// begin if factory in mc_bases [ i ] then
57513: LD_VAR 0 2
57517: PUSH
57518: LD_EXP 8
57522: PUSH
57523: LD_VAR 0 4
57527: ARRAY
57528: IN
57529: IFFALSE 57768
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
57531: LD_EXP 30
57535: PUSH
57536: LD_VAR 0 4
57540: ARRAY
57541: PUSH
57542: LD_EXP 19
57546: PUSH
57547: LD_VAR 0 4
57551: ARRAY
57552: LESS
57553: IFFALSE 57724
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
57555: LD_ADDR_EXP 30
57559: PUSH
57560: LD_EXP 30
57564: PPUSH
57565: LD_VAR 0 4
57569: PPUSH
57570: LD_EXP 30
57574: PUSH
57575: LD_VAR 0 4
57579: ARRAY
57580: PUSH
57581: LD_VAR 0 1
57585: ADD
57586: PPUSH
57587: CALL_OW 1
57591: ST_TO_ADDR
// if not mc_scan [ i ] then
57592: LD_EXP 31
57596: PUSH
57597: LD_VAR 0 4
57601: ARRAY
57602: NOT
57603: IFFALSE 57722
// begin if GetControl ( vehicle ) = control_remote then
57605: LD_VAR 0 1
57609: PPUSH
57610: CALL_OW 263
57614: PUSH
57615: LD_INT 2
57617: EQUAL
57618: IFFALSE 57638
// repeat wait ( 0 0$1 ) ;
57620: LD_INT 35
57622: PPUSH
57623: CALL_OW 67
// until IsControledBy ( vehicle ) ;
57627: LD_VAR 0 1
57631: PPUSH
57632: CALL_OW 312
57636: IFFALSE 57620
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
57638: LD_VAR 0 1
57642: PPUSH
57643: LD_EXP 32
57647: PUSH
57648: LD_VAR 0 4
57652: ARRAY
57653: PPUSH
57654: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
57658: LD_VAR 0 1
57662: PPUSH
57663: CALL_OW 263
57667: PUSH
57668: LD_INT 1
57670: NONEQUAL
57671: IFFALSE 57675
// break ;
57673: GO 57770
// repeat wait ( 0 0$1 ) ;
57675: LD_INT 35
57677: PPUSH
57678: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
57682: LD_VAR 0 1
57686: PPUSH
57687: LD_EXP 32
57691: PUSH
57692: LD_VAR 0 4
57696: ARRAY
57697: PPUSH
57698: CALL_OW 308
57702: IFFALSE 57675
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
57704: LD_VAR 0 1
57708: PPUSH
57709: CALL_OW 311
57713: PPUSH
57714: CALL_OW 121
// exit ;
57718: POP
57719: POP
57720: GO 57772
// end ; end else
57722: GO 57768
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
57724: LD_ADDR_EXP 27
57728: PUSH
57729: LD_EXP 27
57733: PPUSH
57734: LD_VAR 0 4
57738: PUSH
57739: LD_EXP 27
57743: PUSH
57744: LD_VAR 0 4
57748: ARRAY
57749: PUSH
57750: LD_INT 1
57752: PLUS
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PPUSH
57758: LD_VAR 0 1
57762: PPUSH
57763: CALL 8386 0 3
57767: ST_TO_ADDR
// end ; end ;
57768: GO 57510
57770: POP
57771: POP
// end ;
57772: LD_VAR 0 3
57776: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
57777: LD_INT 0
57779: PPUSH
57780: PPUSH
57781: PPUSH
57782: PPUSH
// if not mc_bases then
57783: LD_EXP 8
57787: NOT
57788: IFFALSE 57792
// exit ;
57790: GO 58145
// repeat wait ( 0 0$1 ) ;
57792: LD_INT 35
57794: PPUSH
57795: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
57799: LD_VAR 0 2
57803: PPUSH
57804: LD_VAR 0 3
57808: PPUSH
57809: CALL_OW 284
57813: IFFALSE 57792
// if GetResourceTypeXY ( x , y ) = mat_artefact then
57815: LD_VAR 0 2
57819: PPUSH
57820: LD_VAR 0 3
57824: PPUSH
57825: CALL_OW 283
57829: PUSH
57830: LD_INT 4
57832: EQUAL
57833: IFFALSE 57837
// exit ;
57835: GO 58145
// for i = 1 to mc_bases do
57837: LD_ADDR_VAR 0 7
57841: PUSH
57842: DOUBLE
57843: LD_INT 1
57845: DEC
57846: ST_TO_ADDR
57847: LD_EXP 8
57851: PUSH
57852: FOR_TO
57853: IFFALSE 58143
// begin if mc_crates_area [ i ] then
57855: LD_EXP 26
57859: PUSH
57860: LD_VAR 0 7
57864: ARRAY
57865: IFFALSE 57976
// for j in mc_crates_area [ i ] do
57867: LD_ADDR_VAR 0 8
57871: PUSH
57872: LD_EXP 26
57876: PUSH
57877: LD_VAR 0 7
57881: ARRAY
57882: PUSH
57883: FOR_IN
57884: IFFALSE 57974
// if InArea ( x , y , j ) then
57886: LD_VAR 0 2
57890: PPUSH
57891: LD_VAR 0 3
57895: PPUSH
57896: LD_VAR 0 8
57900: PPUSH
57901: CALL_OW 309
57905: IFFALSE 57972
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
57907: LD_ADDR_EXP 24
57911: PUSH
57912: LD_EXP 24
57916: PPUSH
57917: LD_VAR 0 7
57921: PUSH
57922: LD_EXP 24
57926: PUSH
57927: LD_VAR 0 7
57931: ARRAY
57932: PUSH
57933: LD_INT 1
57935: PLUS
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PPUSH
57941: LD_VAR 0 4
57945: PUSH
57946: LD_VAR 0 2
57950: PUSH
57951: LD_VAR 0 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: PPUSH
57961: CALL 8386 0 3
57965: ST_TO_ADDR
// exit ;
57966: POP
57967: POP
57968: POP
57969: POP
57970: GO 58145
// end ;
57972: GO 57883
57974: POP
57975: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57976: LD_ADDR_VAR 0 9
57980: PUSH
57981: LD_EXP 8
57985: PUSH
57986: LD_VAR 0 7
57990: ARRAY
57991: PPUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 30
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 30
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: PPUSH
58020: CALL_OW 72
58024: ST_TO_ADDR
// if not depot then
58025: LD_VAR 0 9
58029: NOT
58030: IFFALSE 58034
// continue ;
58032: GO 57852
// for j in depot do
58034: LD_ADDR_VAR 0 8
58038: PUSH
58039: LD_VAR 0 9
58043: PUSH
58044: FOR_IN
58045: IFFALSE 58139
// if GetDistUnitXY ( j , x , y ) < 30 then
58047: LD_VAR 0 8
58051: PPUSH
58052: LD_VAR 0 2
58056: PPUSH
58057: LD_VAR 0 3
58061: PPUSH
58062: CALL_OW 297
58066: PUSH
58067: LD_INT 30
58069: LESS
58070: IFFALSE 58137
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
58072: LD_ADDR_EXP 24
58076: PUSH
58077: LD_EXP 24
58081: PPUSH
58082: LD_VAR 0 7
58086: PUSH
58087: LD_EXP 24
58091: PUSH
58092: LD_VAR 0 7
58096: ARRAY
58097: PUSH
58098: LD_INT 1
58100: PLUS
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PPUSH
58106: LD_VAR 0 4
58110: PUSH
58111: LD_VAR 0 2
58115: PUSH
58116: LD_VAR 0 3
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: LIST
58125: PPUSH
58126: CALL 8386 0 3
58130: ST_TO_ADDR
// exit ;
58131: POP
58132: POP
58133: POP
58134: POP
58135: GO 58145
// end ;
58137: GO 58044
58139: POP
58140: POP
// end ;
58141: GO 57852
58143: POP
58144: POP
// end ;
58145: LD_VAR 0 6
58149: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
58150: LD_INT 0
58152: PPUSH
58153: PPUSH
58154: PPUSH
58155: PPUSH
// side := GetSide ( lab ) ;
58156: LD_ADDR_VAR 0 4
58160: PUSH
58161: LD_VAR 0 2
58165: PPUSH
58166: CALL_OW 255
58170: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
58171: LD_VAR 0 4
58175: PUSH
58176: LD_EXP 34
58180: IN
58181: NOT
58182: PUSH
58183: LD_EXP 35
58187: NOT
58188: OR
58189: PUSH
58190: LD_EXP 8
58194: NOT
58195: OR
58196: IFFALSE 58200
// exit ;
58198: GO 58433
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
58200: LD_ADDR_EXP 35
58204: PUSH
58205: LD_EXP 35
58209: PPUSH
58210: LD_VAR 0 4
58214: PPUSH
58215: LD_EXP 35
58219: PUSH
58220: LD_VAR 0 4
58224: ARRAY
58225: PUSH
58226: LD_VAR 0 1
58230: DIFF
58231: PPUSH
58232: CALL_OW 1
58236: ST_TO_ADDR
// for i = 1 to mc_bases do
58237: LD_ADDR_VAR 0 5
58241: PUSH
58242: DOUBLE
58243: LD_INT 1
58245: DEC
58246: ST_TO_ADDR
58247: LD_EXP 8
58251: PUSH
58252: FOR_TO
58253: IFFALSE 58431
// begin if lab in mc_bases [ i ] then
58255: LD_VAR 0 2
58259: PUSH
58260: LD_EXP 8
58264: PUSH
58265: LD_VAR 0 5
58269: ARRAY
58270: IN
58271: IFFALSE 58429
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
58273: LD_VAR 0 1
58277: PUSH
58278: LD_INT 11
58280: PUSH
58281: LD_INT 4
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: IN
58296: PUSH
58297: LD_EXP 38
58301: PUSH
58302: LD_VAR 0 5
58306: ARRAY
58307: AND
58308: IFFALSE 58429
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
58310: LD_ADDR_VAR 0 6
58314: PUSH
58315: LD_EXP 38
58319: PUSH
58320: LD_VAR 0 5
58324: ARRAY
58325: PUSH
58326: LD_INT 1
58328: ARRAY
58329: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58330: LD_ADDR_EXP 38
58334: PUSH
58335: LD_EXP 38
58339: PPUSH
58340: LD_VAR 0 5
58344: PPUSH
58345: EMPTY
58346: PPUSH
58347: CALL_OW 1
58351: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
58352: LD_VAR 0 6
58356: PPUSH
58357: LD_INT 0
58359: PPUSH
58360: CALL_OW 109
// ComExitBuilding ( tmp ) ;
58364: LD_VAR 0 6
58368: PPUSH
58369: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
58373: LD_ADDR_EXP 37
58377: PUSH
58378: LD_EXP 37
58382: PPUSH
58383: LD_VAR 0 5
58387: PPUSH
58388: LD_EXP 37
58392: PUSH
58393: LD_VAR 0 5
58397: ARRAY
58398: PPUSH
58399: LD_INT 1
58401: PPUSH
58402: LD_VAR 0 6
58406: PPUSH
58407: CALL_OW 2
58411: PPUSH
58412: CALL_OW 1
58416: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
58417: LD_VAR 0 5
58421: PPUSH
58422: LD_INT 112
58424: PPUSH
58425: CALL 42409 0 2
// end ; end ; end ;
58429: GO 58252
58431: POP
58432: POP
// end ;
58433: LD_VAR 0 3
58437: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
58438: LD_INT 0
58440: PPUSH
58441: PPUSH
58442: PPUSH
58443: PPUSH
58444: PPUSH
58445: PPUSH
58446: PPUSH
58447: PPUSH
// if not mc_bases then
58448: LD_EXP 8
58452: NOT
58453: IFFALSE 58457
// exit ;
58455: GO 59382
// for i = 1 to mc_bases do
58457: LD_ADDR_VAR 0 3
58461: PUSH
58462: DOUBLE
58463: LD_INT 1
58465: DEC
58466: ST_TO_ADDR
58467: LD_EXP 8
58471: PUSH
58472: FOR_TO
58473: IFFALSE 59380
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
58475: LD_VAR 0 1
58479: PUSH
58480: LD_EXP 8
58484: PUSH
58485: LD_VAR 0 3
58489: ARRAY
58490: IN
58491: PUSH
58492: LD_VAR 0 1
58496: PUSH
58497: LD_EXP 15
58501: PUSH
58502: LD_VAR 0 3
58506: ARRAY
58507: IN
58508: OR
58509: PUSH
58510: LD_VAR 0 1
58514: PUSH
58515: LD_EXP 27
58519: PUSH
58520: LD_VAR 0 3
58524: ARRAY
58525: IN
58526: OR
58527: PUSH
58528: LD_VAR 0 1
58532: PUSH
58533: LD_EXP 37
58537: PUSH
58538: LD_VAR 0 3
58542: ARRAY
58543: IN
58544: OR
58545: PUSH
58546: LD_VAR 0 1
58550: PUSH
58551: LD_EXP 38
58555: PUSH
58556: LD_VAR 0 3
58560: ARRAY
58561: IN
58562: OR
58563: IFFALSE 59378
// begin if un in mc_ape [ i ] then
58565: LD_VAR 0 1
58569: PUSH
58570: LD_EXP 37
58574: PUSH
58575: LD_VAR 0 3
58579: ARRAY
58580: IN
58581: IFFALSE 58620
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
58583: LD_ADDR_EXP 37
58587: PUSH
58588: LD_EXP 37
58592: PPUSH
58593: LD_VAR 0 3
58597: PPUSH
58598: LD_EXP 37
58602: PUSH
58603: LD_VAR 0 3
58607: ARRAY
58608: PUSH
58609: LD_VAR 0 1
58613: DIFF
58614: PPUSH
58615: CALL_OW 1
58619: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
58620: LD_VAR 0 1
58624: PUSH
58625: LD_EXP 38
58629: PUSH
58630: LD_VAR 0 3
58634: ARRAY
58635: IN
58636: IFFALSE 58660
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58638: LD_ADDR_EXP 38
58642: PUSH
58643: LD_EXP 38
58647: PPUSH
58648: LD_VAR 0 3
58652: PPUSH
58653: EMPTY
58654: PPUSH
58655: CALL_OW 1
58659: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
58660: LD_VAR 0 1
58664: PPUSH
58665: CALL_OW 247
58669: PUSH
58670: LD_INT 2
58672: EQUAL
58673: PUSH
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 110
58683: PUSH
58684: LD_INT 20
58686: EQUAL
58687: AND
58688: IFFALSE 58791
// begin fac := MC_GetBuilding ( i , b_factory ) ;
58690: LD_ADDR_VAR 0 8
58694: PUSH
58695: LD_VAR 0 3
58699: PPUSH
58700: LD_INT 3
58702: PPUSH
58703: CALL 55904 0 2
58707: ST_TO_ADDR
// if fac then
58708: LD_VAR 0 8
58712: IFFALSE 58791
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
58714: LD_ADDR_VAR 0 9
58718: PUSH
58719: LD_VAR 0 8
58723: PPUSH
58724: LD_VAR 0 1
58728: PPUSH
58729: CALL_OW 265
58733: PPUSH
58734: LD_VAR 0 1
58738: PPUSH
58739: CALL_OW 262
58743: PPUSH
58744: LD_VAR 0 1
58748: PPUSH
58749: CALL_OW 263
58753: PPUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: CALL_OW 264
58763: PPUSH
58764: CALL 5551 0 5
58768: ST_TO_ADDR
// if components then
58769: LD_VAR 0 9
58773: IFFALSE 58789
// MC_InsertProduceList ( i , components ) ;
58775: LD_VAR 0 3
58779: PPUSH
58780: LD_VAR 0 9
58784: PPUSH
58785: CALL 55471 0 2
// break ;
58789: GO 59380
// end ; end ; if GetType ( un ) = unit_building then
58791: LD_VAR 0 1
58795: PPUSH
58796: CALL_OW 247
58800: PUSH
58801: LD_INT 3
58803: EQUAL
58804: IFFALSE 59101
// begin btype := GetBType ( un ) ;
58806: LD_ADDR_VAR 0 5
58810: PUSH
58811: LD_VAR 0 1
58815: PPUSH
58816: CALL_OW 266
58820: ST_TO_ADDR
// if btype = b_warehouse then
58821: LD_VAR 0 5
58825: PUSH
58826: LD_INT 1
58828: EQUAL
58829: IFFALSE 58847
// begin btype := b_depot ;
58831: LD_ADDR_VAR 0 5
58835: PUSH
58836: LD_INT 0
58838: ST_TO_ADDR
// pos := 1 ;
58839: LD_ADDR_VAR 0 6
58843: PUSH
58844: LD_INT 1
58846: ST_TO_ADDR
// end ; if btype = b_factory then
58847: LD_VAR 0 5
58851: PUSH
58852: LD_INT 3
58854: EQUAL
58855: IFFALSE 58873
// begin btype := b_workshop ;
58857: LD_ADDR_VAR 0 5
58861: PUSH
58862: LD_INT 2
58864: ST_TO_ADDR
// pos := 1 ;
58865: LD_ADDR_VAR 0 6
58869: PUSH
58870: LD_INT 1
58872: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
58873: LD_VAR 0 5
58877: PUSH
58878: LD_INT 7
58880: PUSH
58881: LD_INT 8
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: IN
58888: IFFALSE 58898
// btype := b_lab ;
58890: LD_ADDR_VAR 0 5
58894: PUSH
58895: LD_INT 6
58897: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
58898: LD_ADDR_EXP 13
58902: PUSH
58903: LD_EXP 13
58907: PPUSH
58908: LD_VAR 0 3
58912: PUSH
58913: LD_EXP 13
58917: PUSH
58918: LD_VAR 0 3
58922: ARRAY
58923: PUSH
58924: LD_INT 1
58926: PLUS
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PPUSH
58932: LD_VAR 0 5
58936: PUSH
58937: LD_VAR 0 1
58941: PPUSH
58942: CALL_OW 250
58946: PUSH
58947: LD_VAR 0 1
58951: PPUSH
58952: CALL_OW 251
58956: PUSH
58957: LD_VAR 0 1
58961: PPUSH
58962: CALL_OW 254
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: PPUSH
58973: CALL 8386 0 3
58977: ST_TO_ADDR
// if pos = 1 then
58978: LD_VAR 0 6
58982: PUSH
58983: LD_INT 1
58985: EQUAL
58986: IFFALSE 59101
// begin tmp := mc_build_list [ i ] ;
58988: LD_ADDR_VAR 0 7
58992: PUSH
58993: LD_EXP 13
58997: PUSH
58998: LD_VAR 0 3
59002: ARRAY
59003: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
59004: LD_VAR 0 7
59008: PPUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 30
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 30
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: PPUSH
59037: CALL_OW 72
59041: IFFALSE 59051
// pos := 2 ;
59043: LD_ADDR_VAR 0 6
59047: PUSH
59048: LD_INT 2
59050: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
59051: LD_ADDR_VAR 0 7
59055: PUSH
59056: LD_VAR 0 7
59060: PPUSH
59061: LD_VAR 0 6
59065: PPUSH
59066: LD_VAR 0 7
59070: PPUSH
59071: CALL 8277 0 3
59075: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
59076: LD_ADDR_EXP 13
59080: PUSH
59081: LD_EXP 13
59085: PPUSH
59086: LD_VAR 0 3
59090: PPUSH
59091: LD_VAR 0 7
59095: PPUSH
59096: CALL_OW 1
59100: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
59101: LD_VAR 0 1
59105: PUSH
59106: LD_EXP 8
59110: PUSH
59111: LD_VAR 0 3
59115: ARRAY
59116: IN
59117: IFFALSE 59156
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
59119: LD_ADDR_EXP 8
59123: PUSH
59124: LD_EXP 8
59128: PPUSH
59129: LD_VAR 0 3
59133: PPUSH
59134: LD_EXP 8
59138: PUSH
59139: LD_VAR 0 3
59143: ARRAY
59144: PUSH
59145: LD_VAR 0 1
59149: DIFF
59150: PPUSH
59151: CALL_OW 1
59155: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
59156: LD_VAR 0 1
59160: PUSH
59161: LD_EXP 15
59165: PUSH
59166: LD_VAR 0 3
59170: ARRAY
59171: IN
59172: IFFALSE 59211
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
59174: LD_ADDR_EXP 15
59178: PUSH
59179: LD_EXP 15
59183: PPUSH
59184: LD_VAR 0 3
59188: PPUSH
59189: LD_EXP 15
59193: PUSH
59194: LD_VAR 0 3
59198: ARRAY
59199: PUSH
59200: LD_VAR 0 1
59204: DIFF
59205: PPUSH
59206: CALL_OW 1
59210: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
59211: LD_VAR 0 1
59215: PUSH
59216: LD_EXP 27
59220: PUSH
59221: LD_VAR 0 3
59225: ARRAY
59226: IN
59227: IFFALSE 59266
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
59229: LD_ADDR_EXP 27
59233: PUSH
59234: LD_EXP 27
59238: PPUSH
59239: LD_VAR 0 3
59243: PPUSH
59244: LD_EXP 27
59248: PUSH
59249: LD_VAR 0 3
59253: ARRAY
59254: PUSH
59255: LD_VAR 0 1
59259: DIFF
59260: PPUSH
59261: CALL_OW 1
59265: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
59266: LD_VAR 0 1
59270: PUSH
59271: LD_EXP 17
59275: PUSH
59276: LD_VAR 0 3
59280: ARRAY
59281: IN
59282: IFFALSE 59321
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
59284: LD_ADDR_EXP 17
59288: PUSH
59289: LD_EXP 17
59293: PPUSH
59294: LD_VAR 0 3
59298: PPUSH
59299: LD_EXP 17
59303: PUSH
59304: LD_VAR 0 3
59308: ARRAY
59309: PUSH
59310: LD_VAR 0 1
59314: DIFF
59315: PPUSH
59316: CALL_OW 1
59320: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
59321: LD_VAR 0 1
59325: PUSH
59326: LD_EXP 16
59330: PUSH
59331: LD_VAR 0 3
59335: ARRAY
59336: IN
59337: IFFALSE 59376
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
59339: LD_ADDR_EXP 16
59343: PUSH
59344: LD_EXP 16
59348: PPUSH
59349: LD_VAR 0 3
59353: PPUSH
59354: LD_EXP 16
59358: PUSH
59359: LD_VAR 0 3
59363: ARRAY
59364: PUSH
59365: LD_VAR 0 1
59369: DIFF
59370: PPUSH
59371: CALL_OW 1
59375: ST_TO_ADDR
// end ; break ;
59376: GO 59380
// end ;
59378: GO 58472
59380: POP
59381: POP
// end ;
59382: LD_VAR 0 2
59386: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
59387: LD_INT 0
59389: PPUSH
59390: PPUSH
59391: PPUSH
// if not mc_bases then
59392: LD_EXP 8
59396: NOT
59397: IFFALSE 59401
// exit ;
59399: GO 59616
// for i = 1 to mc_bases do
59401: LD_ADDR_VAR 0 3
59405: PUSH
59406: DOUBLE
59407: LD_INT 1
59409: DEC
59410: ST_TO_ADDR
59411: LD_EXP 8
59415: PUSH
59416: FOR_TO
59417: IFFALSE 59614
// begin if building in mc_construct_list [ i ] then
59419: LD_VAR 0 1
59423: PUSH
59424: LD_EXP 15
59428: PUSH
59429: LD_VAR 0 3
59433: ARRAY
59434: IN
59435: IFFALSE 59612
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
59437: LD_ADDR_EXP 15
59441: PUSH
59442: LD_EXP 15
59446: PPUSH
59447: LD_VAR 0 3
59451: PPUSH
59452: LD_EXP 15
59456: PUSH
59457: LD_VAR 0 3
59461: ARRAY
59462: PUSH
59463: LD_VAR 0 1
59467: DIFF
59468: PPUSH
59469: CALL_OW 1
59473: ST_TO_ADDR
// if building in mc_lab [ i ] then
59474: LD_VAR 0 1
59478: PUSH
59479: LD_EXP 41
59483: PUSH
59484: LD_VAR 0 3
59488: ARRAY
59489: IN
59490: IFFALSE 59545
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
59492: LD_ADDR_EXP 42
59496: PUSH
59497: LD_EXP 42
59501: PPUSH
59502: LD_VAR 0 3
59506: PPUSH
59507: LD_EXP 42
59511: PUSH
59512: LD_VAR 0 3
59516: ARRAY
59517: PPUSH
59518: LD_INT 1
59520: PPUSH
59521: LD_EXP 42
59525: PUSH
59526: LD_VAR 0 3
59530: ARRAY
59531: PPUSH
59532: LD_INT 0
59534: PPUSH
59535: CALL 7369 0 4
59539: PPUSH
59540: CALL_OW 1
59544: ST_TO_ADDR
// if not building in mc_bases [ i ] then
59545: LD_VAR 0 1
59549: PUSH
59550: LD_EXP 8
59554: PUSH
59555: LD_VAR 0 3
59559: ARRAY
59560: IN
59561: NOT
59562: IFFALSE 59608
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
59564: LD_ADDR_EXP 8
59568: PUSH
59569: LD_EXP 8
59573: PPUSH
59574: LD_VAR 0 3
59578: PUSH
59579: LD_EXP 8
59583: PUSH
59584: LD_VAR 0 3
59588: ARRAY
59589: PUSH
59590: LD_INT 1
59592: PLUS
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PPUSH
59598: LD_VAR 0 1
59602: PPUSH
59603: CALL 8386 0 3
59607: ST_TO_ADDR
// exit ;
59608: POP
59609: POP
59610: GO 59616
// end ; end ;
59612: GO 59416
59614: POP
59615: POP
// end ;
59616: LD_VAR 0 2
59620: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
59621: LD_INT 0
59623: PPUSH
59624: PPUSH
59625: PPUSH
59626: PPUSH
59627: PPUSH
59628: PPUSH
59629: PPUSH
// if not mc_bases then
59630: LD_EXP 8
59634: NOT
59635: IFFALSE 59639
// exit ;
59637: GO 60300
// for i = 1 to mc_bases do
59639: LD_ADDR_VAR 0 3
59643: PUSH
59644: DOUBLE
59645: LD_INT 1
59647: DEC
59648: ST_TO_ADDR
59649: LD_EXP 8
59653: PUSH
59654: FOR_TO
59655: IFFALSE 60298
// begin if building in mc_construct_list [ i ] then
59657: LD_VAR 0 1
59661: PUSH
59662: LD_EXP 15
59666: PUSH
59667: LD_VAR 0 3
59671: ARRAY
59672: IN
59673: IFFALSE 60296
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
59675: LD_ADDR_EXP 15
59679: PUSH
59680: LD_EXP 15
59684: PPUSH
59685: LD_VAR 0 3
59689: PPUSH
59690: LD_EXP 15
59694: PUSH
59695: LD_VAR 0 3
59699: ARRAY
59700: PUSH
59701: LD_VAR 0 1
59705: DIFF
59706: PPUSH
59707: CALL_OW 1
59711: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
59712: LD_ADDR_EXP 8
59716: PUSH
59717: LD_EXP 8
59721: PPUSH
59722: LD_VAR 0 3
59726: PUSH
59727: LD_EXP 8
59731: PUSH
59732: LD_VAR 0 3
59736: ARRAY
59737: PUSH
59738: LD_INT 1
59740: PLUS
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PPUSH
59746: LD_VAR 0 1
59750: PPUSH
59751: CALL 8386 0 3
59755: ST_TO_ADDR
// btype := GetBType ( building ) ;
59756: LD_ADDR_VAR 0 5
59760: PUSH
59761: LD_VAR 0 1
59765: PPUSH
59766: CALL_OW 266
59770: ST_TO_ADDR
// side := GetSide ( building ) ;
59771: LD_ADDR_VAR 0 8
59775: PUSH
59776: LD_VAR 0 1
59780: PPUSH
59781: CALL_OW 255
59785: ST_TO_ADDR
// if btype = b_lab then
59786: LD_VAR 0 5
59790: PUSH
59791: LD_INT 6
59793: EQUAL
59794: IFFALSE 59844
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
59796: LD_ADDR_EXP 41
59800: PUSH
59801: LD_EXP 41
59805: PPUSH
59806: LD_VAR 0 3
59810: PUSH
59811: LD_EXP 41
59815: PUSH
59816: LD_VAR 0 3
59820: ARRAY
59821: PUSH
59822: LD_INT 1
59824: PLUS
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PPUSH
59830: LD_VAR 0 1
59834: PPUSH
59835: CALL 8386 0 3
59839: ST_TO_ADDR
// exit ;
59840: POP
59841: POP
59842: GO 60300
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
59844: LD_VAR 0 5
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 4
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: IN
59863: IFFALSE 59987
// begin if btype = b_armoury then
59865: LD_VAR 0 5
59869: PUSH
59870: LD_INT 4
59872: EQUAL
59873: IFFALSE 59883
// btype := b_barracks ;
59875: LD_ADDR_VAR 0 5
59879: PUSH
59880: LD_INT 5
59882: ST_TO_ADDR
// if btype = b_depot then
59883: LD_VAR 0 5
59887: PUSH
59888: LD_INT 0
59890: EQUAL
59891: IFFALSE 59901
// btype := b_warehouse ;
59893: LD_ADDR_VAR 0 5
59897: PUSH
59898: LD_INT 1
59900: ST_TO_ADDR
// if btype = b_workshop then
59901: LD_VAR 0 5
59905: PUSH
59906: LD_INT 2
59908: EQUAL
59909: IFFALSE 59919
// btype := b_factory ;
59911: LD_ADDR_VAR 0 5
59915: PUSH
59916: LD_INT 3
59918: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
59919: LD_VAR 0 5
59923: PPUSH
59924: LD_VAR 0 8
59928: PPUSH
59929: CALL_OW 323
59933: PUSH
59934: LD_INT 1
59936: EQUAL
59937: IFFALSE 59983
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
59939: LD_ADDR_EXP 40
59943: PUSH
59944: LD_EXP 40
59948: PPUSH
59949: LD_VAR 0 3
59953: PUSH
59954: LD_EXP 40
59958: PUSH
59959: LD_VAR 0 3
59963: ARRAY
59964: PUSH
59965: LD_INT 1
59967: PLUS
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PPUSH
59973: LD_VAR 0 1
59977: PPUSH
59978: CALL 8386 0 3
59982: ST_TO_ADDR
// exit ;
59983: POP
59984: POP
59985: GO 60300
// end ; if btype in [ b_bunker , b_turret ] then
59987: LD_VAR 0 5
59991: PUSH
59992: LD_INT 32
59994: PUSH
59995: LD_INT 33
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: IN
60002: IFFALSE 60292
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
60004: LD_ADDR_EXP 16
60008: PUSH
60009: LD_EXP 16
60013: PPUSH
60014: LD_VAR 0 3
60018: PUSH
60019: LD_EXP 16
60023: PUSH
60024: LD_VAR 0 3
60028: ARRAY
60029: PUSH
60030: LD_INT 1
60032: PLUS
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PPUSH
60038: LD_VAR 0 1
60042: PPUSH
60043: CALL 8386 0 3
60047: ST_TO_ADDR
// if btype = b_bunker then
60048: LD_VAR 0 5
60052: PUSH
60053: LD_INT 32
60055: EQUAL
60056: IFFALSE 60292
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
60058: LD_ADDR_EXP 17
60062: PUSH
60063: LD_EXP 17
60067: PPUSH
60068: LD_VAR 0 3
60072: PUSH
60073: LD_EXP 17
60077: PUSH
60078: LD_VAR 0 3
60082: ARRAY
60083: PUSH
60084: LD_INT 1
60086: PLUS
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PPUSH
60092: LD_VAR 0 1
60096: PPUSH
60097: CALL 8386 0 3
60101: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
60102: LD_ADDR_VAR 0 6
60106: PUSH
60107: LD_EXP 8
60111: PUSH
60112: LD_VAR 0 3
60116: ARRAY
60117: PPUSH
60118: LD_INT 25
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 3
60130: PUSH
60131: LD_INT 54
60133: PUSH
60134: EMPTY
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PPUSH
60145: CALL_OW 72
60149: ST_TO_ADDR
// if tmp then
60150: LD_VAR 0 6
60154: IFFALSE 60160
// exit ;
60156: POP
60157: POP
60158: GO 60300
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60160: LD_ADDR_VAR 0 6
60164: PUSH
60165: LD_EXP 8
60169: PUSH
60170: LD_VAR 0 3
60174: ARRAY
60175: PPUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 30
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 30
60191: PUSH
60192: LD_INT 5
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: PPUSH
60204: CALL_OW 72
60208: ST_TO_ADDR
// if not tmp then
60209: LD_VAR 0 6
60213: NOT
60214: IFFALSE 60220
// exit ;
60216: POP
60217: POP
60218: GO 60300
// for j in tmp do
60220: LD_ADDR_VAR 0 4
60224: PUSH
60225: LD_VAR 0 6
60229: PUSH
60230: FOR_IN
60231: IFFALSE 60290
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
60233: LD_ADDR_VAR 0 7
60237: PUSH
60238: LD_VAR 0 4
60242: PPUSH
60243: CALL_OW 313
60247: PPUSH
60248: LD_INT 25
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PPUSH
60258: CALL_OW 72
60262: ST_TO_ADDR
// if units then
60263: LD_VAR 0 7
60267: IFFALSE 60288
// begin ComExitBuilding ( units [ 1 ] ) ;
60269: LD_VAR 0 7
60273: PUSH
60274: LD_INT 1
60276: ARRAY
60277: PPUSH
60278: CALL_OW 122
// exit ;
60282: POP
60283: POP
60284: POP
60285: POP
60286: GO 60300
// end ; end ;
60288: GO 60230
60290: POP
60291: POP
// end ; end ; exit ;
60292: POP
60293: POP
60294: GO 60300
// end ; end ;
60296: GO 59654
60298: POP
60299: POP
// end ;
60300: LD_VAR 0 2
60304: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
60305: LD_INT 0
60307: PPUSH
60308: PPUSH
60309: PPUSH
60310: PPUSH
60311: PPUSH
60312: PPUSH
60313: PPUSH
// if not mc_bases then
60314: LD_EXP 8
60318: NOT
60319: IFFALSE 60323
// exit ;
60321: GO 60554
// btype := GetBType ( building ) ;
60323: LD_ADDR_VAR 0 6
60327: PUSH
60328: LD_VAR 0 1
60332: PPUSH
60333: CALL_OW 266
60337: ST_TO_ADDR
// x := GetX ( building ) ;
60338: LD_ADDR_VAR 0 7
60342: PUSH
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL_OW 250
60352: ST_TO_ADDR
// y := GetY ( building ) ;
60353: LD_ADDR_VAR 0 8
60357: PUSH
60358: LD_VAR 0 1
60362: PPUSH
60363: CALL_OW 251
60367: ST_TO_ADDR
// d := GetDir ( building ) ;
60368: LD_ADDR_VAR 0 9
60372: PUSH
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 254
60382: ST_TO_ADDR
// for i = 1 to mc_bases do
60383: LD_ADDR_VAR 0 4
60387: PUSH
60388: DOUBLE
60389: LD_INT 1
60391: DEC
60392: ST_TO_ADDR
60393: LD_EXP 8
60397: PUSH
60398: FOR_TO
60399: IFFALSE 60552
// begin if not mc_build_list [ i ] then
60401: LD_EXP 13
60405: PUSH
60406: LD_VAR 0 4
60410: ARRAY
60411: NOT
60412: IFFALSE 60416
// continue ;
60414: GO 60398
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
60416: LD_VAR 0 6
60420: PUSH
60421: LD_VAR 0 7
60425: PUSH
60426: LD_VAR 0 8
60430: PUSH
60431: LD_VAR 0 9
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: PPUSH
60442: LD_EXP 13
60446: PUSH
60447: LD_VAR 0 4
60451: ARRAY
60452: PUSH
60453: LD_INT 1
60455: ARRAY
60456: PPUSH
60457: CALL 13873 0 2
60461: IFFALSE 60550
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
60463: LD_ADDR_EXP 13
60467: PUSH
60468: LD_EXP 13
60472: PPUSH
60473: LD_VAR 0 4
60477: PPUSH
60478: LD_EXP 13
60482: PUSH
60483: LD_VAR 0 4
60487: ARRAY
60488: PPUSH
60489: LD_INT 1
60491: PPUSH
60492: CALL_OW 3
60496: PPUSH
60497: CALL_OW 1
60501: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
60502: LD_ADDR_EXP 15
60506: PUSH
60507: LD_EXP 15
60511: PPUSH
60512: LD_VAR 0 4
60516: PUSH
60517: LD_EXP 15
60521: PUSH
60522: LD_VAR 0 4
60526: ARRAY
60527: PUSH
60528: LD_INT 1
60530: PLUS
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PPUSH
60536: LD_VAR 0 1
60540: PPUSH
60541: CALL 8386 0 3
60545: ST_TO_ADDR
// exit ;
60546: POP
60547: POP
60548: GO 60554
// end ; end ;
60550: GO 60398
60552: POP
60553: POP
// end ;
60554: LD_VAR 0 3
60558: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
60559: LD_INT 0
60561: PPUSH
60562: PPUSH
60563: PPUSH
// if not mc_bases then
60564: LD_EXP 8
60568: NOT
60569: IFFALSE 60573
// exit ;
60571: GO 60763
// for i = 1 to mc_bases do
60573: LD_ADDR_VAR 0 4
60577: PUSH
60578: DOUBLE
60579: LD_INT 1
60581: DEC
60582: ST_TO_ADDR
60583: LD_EXP 8
60587: PUSH
60588: FOR_TO
60589: IFFALSE 60676
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
60591: LD_VAR 0 1
60595: PUSH
60596: LD_EXP 16
60600: PUSH
60601: LD_VAR 0 4
60605: ARRAY
60606: IN
60607: PUSH
60608: LD_VAR 0 1
60612: PUSH
60613: LD_EXP 17
60617: PUSH
60618: LD_VAR 0 4
60622: ARRAY
60623: IN
60624: NOT
60625: AND
60626: IFFALSE 60674
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
60628: LD_ADDR_EXP 17
60632: PUSH
60633: LD_EXP 17
60637: PPUSH
60638: LD_VAR 0 4
60642: PUSH
60643: LD_EXP 17
60647: PUSH
60648: LD_VAR 0 4
60652: ARRAY
60653: PUSH
60654: LD_INT 1
60656: PLUS
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PPUSH
60662: LD_VAR 0 1
60666: PPUSH
60667: CALL 8386 0 3
60671: ST_TO_ADDR
// break ;
60672: GO 60676
// end ; end ;
60674: GO 60588
60676: POP
60677: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
60678: LD_VAR 0 1
60682: PPUSH
60683: CALL_OW 257
60687: PUSH
60688: LD_EXP 34
60692: IN
60693: PUSH
60694: LD_VAR 0 1
60698: PPUSH
60699: CALL_OW 266
60703: PUSH
60704: LD_INT 5
60706: EQUAL
60707: AND
60708: PUSH
60709: LD_VAR 0 2
60713: PPUSH
60714: CALL_OW 110
60718: PUSH
60719: LD_INT 18
60721: NONEQUAL
60722: AND
60723: IFFALSE 60763
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
60725: LD_VAR 0 2
60729: PPUSH
60730: CALL_OW 257
60734: PUSH
60735: LD_INT 5
60737: PUSH
60738: LD_INT 8
60740: PUSH
60741: LD_INT 9
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: LIST
60748: IN
60749: IFFALSE 60763
// SetClass ( unit , 1 ) ;
60751: LD_VAR 0 2
60755: PPUSH
60756: LD_INT 1
60758: PPUSH
60759: CALL_OW 336
// end ;
60763: LD_VAR 0 3
60767: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
60768: LD_INT 0
60770: PPUSH
60771: PPUSH
// if not mc_bases then
60772: LD_EXP 8
60776: NOT
60777: IFFALSE 60781
// exit ;
60779: GO 60897
// if GetLives ( abandoned_vehicle ) > 250 then
60781: LD_VAR 0 2
60785: PPUSH
60786: CALL_OW 256
60790: PUSH
60791: LD_INT 250
60793: GREATER
60794: IFFALSE 60798
// exit ;
60796: GO 60897
// for i = 1 to mc_bases do
60798: LD_ADDR_VAR 0 6
60802: PUSH
60803: DOUBLE
60804: LD_INT 1
60806: DEC
60807: ST_TO_ADDR
60808: LD_EXP 8
60812: PUSH
60813: FOR_TO
60814: IFFALSE 60895
// begin if driver in mc_bases [ i ] then
60816: LD_VAR 0 1
60820: PUSH
60821: LD_EXP 8
60825: PUSH
60826: LD_VAR 0 6
60830: ARRAY
60831: IN
60832: IFFALSE 60893
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
60834: LD_VAR 0 1
60838: PPUSH
60839: LD_EXP 8
60843: PUSH
60844: LD_VAR 0 6
60848: ARRAY
60849: PPUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 30
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 30
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: PPUSH
60878: CALL_OW 72
60882: PUSH
60883: LD_INT 1
60885: ARRAY
60886: PPUSH
60887: CALL_OW 112
// break ;
60891: GO 60895
// end ; end ;
60893: GO 60813
60895: POP
60896: POP
// end ;
60897: LD_VAR 0 5
60901: RET
