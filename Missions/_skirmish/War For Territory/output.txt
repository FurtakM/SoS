// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 170 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// begin FogOff ( 1 ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 344
// end ; PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , gensher_ape , 0 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 5
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: LD_INT 7
  44: PPUSH
  45: LD_INT 0
  47: PPUSH
  48: CALL 36579 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , powell_ape , 0 ) ;
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 5
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 0
  69: PPUSH
  70: LD_INT 0
  72: PPUSH
  73: LD_INT 4
  75: PPUSH
  76: LD_INT 0
  78: PPUSH
  79: CALL 36579 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , popov_ape , 0 ) ;
  83: LD_INT 0
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: LD_INT 5
  91: PPUSH
  92: LD_INT 0
  94: PPUSH
  95: LD_INT 0
  97: PPUSH
  98: LD_INT 0
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: LD_INT 11
 106: PPUSH
 107: LD_INT 0
 109: PPUSH
 110: CALL 36579 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , sikorski_ape , 0 ) ;
 114: LD_INT 0
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 5
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: LD_INT 0
 131: PPUSH
 132: LD_INT 0
 134: PPUSH
 135: LD_INT 14
 137: PPUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL 36579 0 9
// PrepareGensher ;
 145: CALL 1228 0 0
// PreparePopov ;
 149: CALL 2478 0 0
// PreparePowell ;
 153: CALL 376 0 0
// PrepareSikorski ;
 157: CALL 3406 0 0
// MC_Start ( ) ;
 161: CALL 42424 0 0
// Action ;
 165: CALL 3665 0 0
// end ;
 169: END
// export debug , game , staticMines ; function InitVariables ; begin
 170: LD_INT 0
 172: PPUSH
// debug := 1 ;
 173: LD_ADDR_EXP 1
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// game := true ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_INT 1
 188: ST_TO_ADDR
// staticMines := [ ] ;
 189: LD_ADDR_EXP 3
 193: PUSH
 194: EMPTY
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// export function CustomInitMacro ; begin
 201: LD_INT 0
 203: PPUSH
// InitMC_Gensher ( ) ;
 204: CALL 1616 0 0
// InitMC_Powell ( ) ;
 208: CALL 506 0 0
// InitMC_Popov ( ) ;
 212: CALL 2608 0 0
// end ;
 216: LD_VAR 0 1
 220: RET
// every 0 0$10 do var cr , time , i ;
 221: GO 223
 223: DISABLE
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
 228: PPUSH
// begin time := 0 0$30 ;
 229: LD_ADDR_VAR 0 2
 233: PUSH
 234: LD_INT 1050
 236: ST_TO_ADDR
// repeat wait ( time ) ;
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
 246: LD_ADDR_VAR 0 1
 250: PUSH
 251: LD_INT 1
 253: PPUSH
 254: LD_INT 5
 256: PPUSH
 257: CALL_OW 12
 261: ST_TO_ADDR
// for i in [ powell_crates , gensher_crates , popov_crates , sikorski_crates ] do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: LD_INT 5
 269: PUSH
 270: LD_INT 8
 272: PUSH
 273: LD_INT 12
 275: PUSH
 276: LD_INT 13
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: PUSH
 285: FOR_IN
 286: IFFALSE 332
// begin if GetResourceArea ( i , mat_cans ) < 20 then
 288: LD_VAR 0 3
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: CALL_OW 287
 300: PUSH
 301: LD_INT 20
 303: LESS
 304: IFFALSE 323
// CreateCratesArea ( cr , i , true ) ;
 306: LD_VAR 0 1
 310: PPUSH
 311: LD_VAR 0 3
 315: PPUSH
 316: LD_INT 1
 318: PPUSH
 319: CALL_OW 55
// wait ( 0 0$5 ) ;
 323: LD_INT 175
 325: PPUSH
 326: CALL_OW 67
// end ;
 330: GO 285
 332: POP
 333: POP
// time := time + 0 0$2 ;
 334: LD_ADDR_VAR 0 2
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 70
 346: PLUS
 347: ST_TO_ADDR
// if time > 1 1$00 then
 348: LD_VAR 0 2
 352: PUSH
 353: LD_INT 2100
 355: GREATER
 356: IFFALSE 366
// time := 0 0$25 ;
 358: LD_ADDR_VAR 0 2
 362: PUSH
 363: LD_INT 875
 365: ST_TO_ADDR
// until not game ;
 366: LD_EXP 2
 370: NOT
 371: IFFALSE 237
// end ; end_of_file
 373: PPOPN 3
 375: END
// export Powell , powell_side ; export function PreparePowell ; var i , tmp ; begin
 376: LD_INT 0
 378: PPUSH
 379: PPUSH
 380: PPUSH
// powell_side := 4 ;
 381: LD_ADDR_EXP 5
 385: PUSH
 386: LD_INT 4
 388: ST_TO_ADDR
// uc_side := powell_side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_EXP 5
 398: ST_TO_ADDR
// uc_nation := 1 ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_INT 1
 406: ST_TO_ADDR
// tmp := PrepareBase ( us_depot , powell_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1000 , 100 , 0 ] , [ 4 , 4 , 4 , 4 ] ) ;
 407: LD_ADDR_VAR 0 3
 411: PUSH
 412: LD_INT 4
 414: PPUSH
 415: LD_INT 1
 417: PPUSH
 418: LD_STRING 
 420: PPUSH
 421: LD_INT 8
 423: PUSH
 424: LD_INT 7
 426: PUSH
 427: LD_INT 6
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 1000
 443: PUSH
 444: LD_INT 100
 446: PUSH
 447: LD_INT 0
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: LIST
 454: PPUSH
 455: LD_INT 4
 457: PUSH
 458: LD_INT 4
 460: PUSH
 461: LD_INT 4
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PPUSH
 473: CALL 12197 0 6
 477: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , tmp ) ;
 478: LD_ADDR_EXP 13
 482: PUSH
 483: LD_EXP 13
 487: PPUSH
 488: LD_INT 1
 490: PPUSH
 491: LD_VAR 0 3
 495: PPUSH
 496: CALL_OW 1
 500: ST_TO_ADDR
// end ;
 501: LD_VAR 0 1
 505: RET
// export function InitMC_Powell ( ) ; begin
 506: LD_INT 0
 508: PPUSH
// MC_SetScanArea ( 1 , powell_base ) ;
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: CALL 65264 0 2
// MC_SetParkingArea ( 1 , powell_parking ) ;
 519: LD_INT 1
 521: PPUSH
 522: LD_INT 6
 524: PPUSH
 525: CALL 65208 0 2
// MC_SetDepositsXY ( 1 , [ [ 167 , 102 , 0 ] , [ 173 , 83 , 1 ] , [ 171 , 141 , 0 ] , [ 178 , 148 , 1 ] ] ) ;
 529: LD_INT 1
 531: PPUSH
 532: LD_INT 167
 534: PUSH
 535: LD_INT 102
 537: PUSH
 538: LD_INT 0
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 173
 548: PUSH
 549: LD_INT 83
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 171
 562: PUSH
 563: LD_INT 141
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_INT 178
 576: PUSH
 577: LD_INT 148
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PPUSH
 594: CALL 64267 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
 598: LD_INT 1
 600: PPUSH
 601: LD_INT 11
 603: PUSH
 604: LD_INT 6
 606: PUSH
 607: LD_INT 7
 609: PUSH
 610: LD_INT 9
 612: PUSH
 613: LD_INT 10
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL 65096 0 2
// MC_SetCratesArea ( 1 , powell_crates ) ;
 627: LD_INT 1
 629: PPUSH
 630: LD_INT 5
 632: PPUSH
 633: CALL 64778 0 2
// MC_SetTame ( 1 , powell_ape ) ;
 637: LD_INT 1
 639: PPUSH
 640: LD_INT 4
 642: PPUSH
 643: CALL 64509 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 647: LD_INT 1
 649: PPUSH
 650: LD_INT 4
 652: PPUSH
 653: CALL 64128 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] ] ) ;
 657: LD_INT 1
 659: PPUSH
 660: LD_INT 3
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: LD_INT 2
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: PUSH
 678: LD_INT 4
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: LD_INT 2
 686: PUSH
 687: LD_INT 6
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 4
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 7
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 4
 716: PUSH
 717: LD_INT 1
 719: PUSH
 720: LD_INT 2
 722: PUSH
 723: LD_INT 6
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: PUSH
 732: LD_INT 5
 734: PUSH
 735: LD_INT 1
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 6
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PPUSH
 757: CALL 63943 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 200 , 111 , 4 ] , [ b_oil_mine , 167 , 102 , 0 ] , [ b_armoury , 178 , 117 , 2 ] , [ b_workshop , 197 , 144 , 4 ] , [ b_solar_power , 206 , 124 , 3 ] , [ b_solar_power , 209 , 128 , 3 ] , [ b_solar_power , 211 , 132 , 3 ] , [ b_siberite_mine , 173 , 83 , 3 ] , [ b_lab , 186 , 103 , 2 ] , [ b_turret , 173 , 99 , 2 ] , [ b_bunker , 174 , 102 , 2 ] , [ b_bunker , 178 , 100 , 2 ] , [ b_turret , 174 , 108 , 1 ] , [ b_turret , 182 , 122 , 1 ] , [ b_control_tower , 194 , 124 , 5 ] , [ b_siberite_power , 204 , 133 , 3 ] , [ b_solar_power , 201 , 133 , 3 ] , [ b_siberite_power , 199 , 119 , 5 ] , [ b_turret , 184 , 141 , 1 ] , [ b_turret , 183 , 131 , 2 ] ] ) ;
 761: LD_INT 1
 763: PPUSH
 764: LD_INT 6
 766: PUSH
 767: LD_INT 200
 769: PUSH
 770: LD_INT 111
 772: PUSH
 773: LD_INT 4
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 29
 784: PUSH
 785: LD_INT 167
 787: PUSH
 788: LD_INT 102
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 4
 802: PUSH
 803: LD_INT 178
 805: PUSH
 806: LD_INT 117
 808: PUSH
 809: LD_INT 2
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 2
 820: PUSH
 821: LD_INT 197
 823: PUSH
 824: LD_INT 144
 826: PUSH
 827: LD_INT 4
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: PUSH
 836: LD_INT 27
 838: PUSH
 839: LD_INT 206
 841: PUSH
 842: LD_INT 124
 844: PUSH
 845: LD_INT 3
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 27
 856: PUSH
 857: LD_INT 209
 859: PUSH
 860: LD_INT 128
 862: PUSH
 863: LD_INT 3
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 27
 874: PUSH
 875: LD_INT 211
 877: PUSH
 878: LD_INT 132
 880: PUSH
 881: LD_INT 3
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 173
 895: PUSH
 896: LD_INT 83
 898: PUSH
 899: LD_INT 3
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 6
 910: PUSH
 911: LD_INT 186
 913: PUSH
 914: LD_INT 103
 916: PUSH
 917: LD_INT 2
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 33
 928: PUSH
 929: LD_INT 173
 931: PUSH
 932: LD_INT 99
 934: PUSH
 935: LD_INT 2
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_INT 32
 946: PUSH
 947: LD_INT 174
 949: PUSH
 950: LD_INT 102
 952: PUSH
 953: LD_INT 2
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_INT 32
 964: PUSH
 965: LD_INT 178
 967: PUSH
 968: LD_INT 100
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 33
 982: PUSH
 983: LD_INT 174
 985: PUSH
 986: LD_INT 108
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 33
1000: PUSH
1001: LD_INT 182
1003: PUSH
1004: LD_INT 122
1006: PUSH
1007: LD_INT 1
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: PUSH
1016: LD_INT 36
1018: PUSH
1019: LD_INT 194
1021: PUSH
1022: LD_INT 124
1024: PUSH
1025: LD_INT 5
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 28
1036: PUSH
1037: LD_INT 204
1039: PUSH
1040: LD_INT 133
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 27
1054: PUSH
1055: LD_INT 201
1057: PUSH
1058: LD_INT 133
1060: PUSH
1061: LD_INT 3
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 28
1072: PUSH
1073: LD_INT 199
1075: PUSH
1076: LD_INT 119
1078: PUSH
1079: LD_INT 5
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 33
1090: PUSH
1091: LD_INT 184
1093: PUSH
1094: LD_INT 141
1096: PUSH
1097: LD_INT 1
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 33
1108: PUSH
1109: LD_INT 183
1111: PUSH
1112: LD_INT 131
1114: PUSH
1115: LD_INT 2
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PPUSH
1146: CALL 63835 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1150: LD_INT 1
1152: PPUSH
1153: LD_INT 10
1155: PUSH
1156: LD_INT 15
1158: PUSH
1159: LD_INT 12
1161: PUSH
1162: LD_INT 11
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL 64685 0 2
// MC_SetFactoryExtension ( 1 , 197 , 144 , 4 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 197
1180: PPUSH
1181: LD_INT 144
1183: PPUSH
1184: LD_INT 4
1186: PPUSH
1187: LD_INT 19
1189: PUSH
1190: LD_INT 16
1192: PUSH
1193: LD_INT 17
1195: PUSH
1196: LD_INT 18
1198: PUSH
1199: LD_INT 22
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PPUSH
1209: CALL 64890 0 5
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
1213: LD_INT 1
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL 64558 0 2
// end ; end_of_file
1223: LD_VAR 0 1
1227: RET
// export Gensher , gensher_side ; export function PrepareGensher ; var i , tmp , un ; begin
1228: LD_INT 0
1230: PPUSH
1231: PPUSH
1232: PPUSH
1233: PPUSH
// gensher_side := 2 ;
1234: LD_ADDR_EXP 7
1238: PUSH
1239: LD_INT 2
1241: ST_TO_ADDR
// uc_side := gensher_side ;
1242: LD_ADDR_OWVAR 20
1246: PUSH
1247: LD_EXP 7
1251: ST_TO_ADDR
// uc_nation := 2 ;
1252: LD_ADDR_OWVAR 21
1256: PUSH
1257: LD_INT 2
1259: ST_TO_ADDR
// tmp := PrepareBase ( ar_depot , gensher_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
1260: LD_ADDR_VAR 0 3
1264: PUSH
1265: LD_INT 7
1267: PPUSH
1268: LD_INT 2
1270: PPUSH
1271: LD_STRING 
1273: PPUSH
1274: LD_INT 8
1276: PUSH
1277: LD_INT 7
1279: PUSH
1280: LD_INT 6
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_OWVAR 67
1292: ARRAY
1293: PPUSH
1294: LD_INT 1500
1296: PUSH
1297: LD_INT 300
1299: PUSH
1300: LD_INT 30
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: PPUSH
1308: LD_INT 4
1310: PUSH
1311: LD_INT 4
1313: PUSH
1314: LD_INT 4
1316: PUSH
1317: LD_INT 4
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PPUSH
1326: CALL 12197 0 6
1330: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp ) ;
1331: LD_ADDR_EXP 13
1335: PUSH
1336: LD_EXP 13
1340: PPUSH
1341: LD_INT 2
1343: PPUSH
1344: LD_VAR 0 3
1348: PPUSH
1349: CALL_OW 1
1353: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) ;
1354: LD_ADDR_VAR 0 3
1358: PUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 2
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 30
1371: PUSH
1372: LD_INT 31
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 69
1387: ST_TO_ADDR
// for i in tmp do
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_VAR 0 3
1397: PUSH
1398: FOR_IN
1399: IFFALSE 1469
// begin PrepareHuman ( false , 1 , [ 4 , 3 , 3 ] [ Difficulty ] ) ;
1401: LD_INT 0
1403: PPUSH
1404: LD_INT 1
1406: PPUSH
1407: LD_INT 4
1409: PUSH
1410: LD_INT 3
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_OWVAR 67
1425: ARRAY
1426: PPUSH
1427: CALL_OW 380
// un := CreateHuman ;
1431: LD_ADDR_VAR 0 4
1435: PUSH
1436: CALL_OW 44
1440: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1441: LD_VAR 0 4
1445: PPUSH
1446: LD_INT 1
1448: PPUSH
1449: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1453: LD_VAR 0 4
1457: PPUSH
1458: LD_VAR 0 2
1462: PPUSH
1463: CALL_OW 52
// end ;
1467: GO 1398
1469: POP
1470: POP
// tmp := AreaToList ( gensher_mines , 0 ) ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: LD_INT 15
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 517
1486: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
1487: LD_ADDR_VAR 0 2
1491: PUSH
1492: DOUBLE
1493: LD_INT 1
1495: DEC
1496: ST_TO_ADDR
1497: LD_VAR 0 3
1501: PUSH
1502: LD_INT 1
1504: ARRAY
1505: PUSH
1506: FOR_TO
1507: IFFALSE 1609
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 , 0 ) ;
1509: LD_VAR 0 3
1513: PUSH
1514: LD_INT 1
1516: ARRAY
1517: PUSH
1518: LD_VAR 0 2
1522: ARRAY
1523: PPUSH
1524: LD_VAR 0 3
1528: PUSH
1529: LD_INT 2
1531: ARRAY
1532: PUSH
1533: LD_VAR 0 2
1537: ARRAY
1538: PPUSH
1539: LD_INT 2
1541: PPUSH
1542: LD_INT 0
1544: PPUSH
1545: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
1549: LD_ADDR_EXP 3
1553: PUSH
1554: LD_EXP 3
1558: PPUSH
1559: LD_EXP 3
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: PPUSH
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 1
1575: ARRAY
1576: PUSH
1577: LD_VAR 0 2
1581: ARRAY
1582: PUSH
1583: LD_VAR 0 3
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: PUSH
1592: LD_VAR 0 2
1596: ARRAY
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PPUSH
1602: CALL_OW 2
1606: ST_TO_ADDR
// end ;
1607: GO 1506
1609: POP
1610: POP
// end ;
1611: LD_VAR 0 1
1615: RET
// export function InitMC_Gensher ( ) ; begin
1616: LD_INT 0
1618: PPUSH
// MC_SetScanArea ( 2 , gensher_base ) ;
1619: LD_INT 2
1621: PPUSH
1622: LD_INT 2
1624: PPUSH
1625: CALL 65264 0 2
// MC_SetParkingArea ( 2 , gensher_parking ) ;
1629: LD_INT 2
1631: PPUSH
1632: LD_INT 9
1634: PPUSH
1635: CALL 65208 0 2
// MC_SetDepositsXY ( 2 , [ [ 56 , 23 , 0 ] , [ 52 , 40 , 1 ] ] ) ;
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 56
1644: PUSH
1645: LD_INT 23
1647: PUSH
1648: LD_INT 0
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 52
1658: PUSH
1659: LD_INT 40
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PPUSH
1674: CALL 64267 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ar_gun , ar_rocket_launcher ] ) ;
1678: LD_INT 2
1680: PPUSH
1681: LD_INT 27
1683: PUSH
1684: LD_INT 28
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL 65096 0 2
// MC_SetCratesArea ( 2 , gensher_crates ) ;
1695: LD_INT 2
1697: PPUSH
1698: LD_INT 8
1700: PPUSH
1701: CALL 64778 0 2
// MC_SetTame ( 2 , gensher_ape ) ;
1705: LD_INT 2
1707: PPUSH
1708: LD_INT 7
1710: PPUSH
1711: CALL 64509 0 2
// MC_SetDefenderLimit ( 2 , 4 ) ;
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL 64128 0 2
// MC_SetProduceList ( 2 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ) ;
1725: LD_INT 2
1727: PPUSH
1728: LD_INT 13
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: LD_INT 31
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 13
1748: PUSH
1749: LD_INT 2
1751: PUSH
1752: LD_INT 1
1754: PUSH
1755: LD_INT 31
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 14
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 2
1772: PUSH
1773: LD_INT 27
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 14
1784: PUSH
1785: LD_INT 1
1787: PUSH
1788: LD_INT 2
1790: PUSH
1791: LD_INT 27
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 14
1802: PUSH
1803: LD_INT 1
1805: PUSH
1806: LD_INT 2
1808: PUSH
1809: LD_INT 28
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 14
1820: PUSH
1821: LD_INT 1
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: LD_INT 26
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL 63943 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 13 , 18 , 1 ] , [ b_lab , 17 , 27 , 1 ] , [ b_solar_power , 17 , 3 , 0 ] , [ b_oil_mine , 56 , 23 , 0 ] , [ b_armoury , 42 , 29 , 5 ] , [ b_workshop , 11 , 7 , 2 ] , [ b_solar_power , 20 , 3 , 0 ] , [ b_solar_power , 23 , 3 , 0 ] , [ b_solar_power , 26 , 3 , 0 ] , [ b_bunker , 27 , 44 , 5 ] , [ b_bunker , 41 , 41 , 5 ] , [ b_bunker , 45 , 24 , 5 ] , [ b_bunker , 48 , 19 , 5 ] , [ b_bunker , 41 , 3 , 4 ] , [ b_armoury , 44 , 9 , 4 ] , [ b_siberite_mine , 52 , 40 , 3 ] ] ) ;
1848: LD_INT 2
1850: PPUSH
1851: LD_INT 6
1853: PUSH
1854: LD_INT 13
1856: PUSH
1857: LD_INT 18
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 6
1871: PUSH
1872: LD_INT 17
1874: PUSH
1875: LD_INT 27
1877: PUSH
1878: LD_INT 1
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 27
1889: PUSH
1890: LD_INT 17
1892: PUSH
1893: LD_INT 3
1895: PUSH
1896: LD_INT 0
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 29
1907: PUSH
1908: LD_INT 56
1910: PUSH
1911: LD_INT 23
1913: PUSH
1914: LD_INT 0
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 42
1928: PUSH
1929: LD_INT 29
1931: PUSH
1932: LD_INT 5
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: LD_INT 11
1946: PUSH
1947: LD_INT 7
1949: PUSH
1950: LD_INT 2
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 27
1961: PUSH
1962: LD_INT 20
1964: PUSH
1965: LD_INT 3
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 27
1979: PUSH
1980: LD_INT 23
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: LD_INT 0
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 27
1997: PUSH
1998: LD_INT 26
2000: PUSH
2001: LD_INT 3
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 32
2015: PUSH
2016: LD_INT 27
2018: PUSH
2019: LD_INT 44
2021: PUSH
2022: LD_INT 5
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 32
2033: PUSH
2034: LD_INT 41
2036: PUSH
2037: LD_INT 41
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 32
2051: PUSH
2052: LD_INT 45
2054: PUSH
2055: LD_INT 24
2057: PUSH
2058: LD_INT 5
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 48
2072: PUSH
2073: LD_INT 19
2075: PUSH
2076: LD_INT 5
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: LD_INT 41
2090: PUSH
2091: LD_INT 3
2093: PUSH
2094: LD_INT 4
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 4
2105: PUSH
2106: LD_INT 44
2108: PUSH
2109: LD_INT 9
2111: PUSH
2112: LD_INT 4
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 52
2126: PUSH
2127: LD_INT 40
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PPUSH
2157: CALL 63835 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_opto , b_lab_biological , b_lab_siberium ] ) ;
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 10
2166: PUSH
2167: LD_INT 15
2169: PUSH
2170: LD_INT 13
2172: PUSH
2173: LD_INT 11
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL 64685 0 2
// MC_SetFactoryExtension ( 2 , 11 , 7 , 2 , [ b_ext_stitch , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
2186: LD_INT 2
2188: PPUSH
2189: LD_INT 11
2191: PPUSH
2192: LD_INT 7
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: LD_INT 23
2200: PUSH
2201: LD_INT 16
2203: PUSH
2204: LD_INT 17
2206: PUSH
2207: LD_INT 18
2209: PUSH
2210: LD_INT 22
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: PPUSH
2220: CALL 64890 0 5
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
2224: LD_INT 2
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL 64558 0 2
// end ;
2234: LD_VAR 0 1
2238: RET
// every 10 trigger staticMines and FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) do var i , j , tmp , x , y ;
2239: LD_EXP 3
2243: PUSH
2244: LD_INT 15
2246: PPUSH
2247: LD_INT 81
2249: PUSH
2250: LD_INT 2
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PPUSH
2257: CALL_OW 70
2261: AND
2262: IFFALSE 2475
2264: GO 2266
2266: DISABLE
2267: LD_INT 0
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
2273: PPUSH
// begin enable ;
2274: ENABLE
// tmp := FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) ;
2275: LD_ADDR_VAR 0 3
2279: PUSH
2280: LD_INT 15
2282: PPUSH
2283: LD_INT 81
2285: PUSH
2286: LD_INT 2
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PPUSH
2293: CALL_OW 70
2297: ST_TO_ADDR
// if not tmp then
2298: LD_VAR 0 3
2302: NOT
2303: IFFALSE 2307
// exit ;
2305: GO 2475
// for i in tmp do
2307: LD_ADDR_VAR 0 1
2311: PUSH
2312: LD_VAR 0 3
2316: PUSH
2317: FOR_IN
2318: IFFALSE 2473
// begin x := GetX ( i ) ;
2320: LD_ADDR_VAR 0 4
2324: PUSH
2325: LD_VAR 0 1
2329: PPUSH
2330: CALL_OW 250
2334: ST_TO_ADDR
// y := GetY ( i ) ;
2335: LD_ADDR_VAR 0 5
2339: PUSH
2340: LD_VAR 0 1
2344: PPUSH
2345: CALL_OW 251
2349: ST_TO_ADDR
// if MineAtPos ( x , y ) then
2350: LD_VAR 0 4
2354: PPUSH
2355: LD_VAR 0 5
2359: PPUSH
2360: CALL_OW 458
2364: IFFALSE 2471
// begin LaunchMineAtPos ( x , y , 8 ) ;
2366: LD_VAR 0 4
2370: PPUSH
2371: LD_VAR 0 5
2375: PPUSH
2376: LD_INT 8
2378: PPUSH
2379: CALL_OW 456
// for j = 1 to staticMines do
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: DOUBLE
2389: LD_INT 1
2391: DEC
2392: ST_TO_ADDR
2393: LD_EXP 3
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2469
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
2401: LD_EXP 3
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: PUSH
2416: LD_VAR 0 4
2420: EQUAL
2421: PUSH
2422: LD_EXP 3
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_INT 2
2435: ARRAY
2436: PUSH
2437: LD_VAR 0 5
2441: EQUAL
2442: AND
2443: IFFALSE 2467
// begin staticMines := Delete ( staticMines , j ) ;
2445: LD_ADDR_EXP 3
2449: PUSH
2450: LD_EXP 3
2454: PPUSH
2455: LD_VAR 0 2
2459: PPUSH
2460: CALL_OW 3
2464: ST_TO_ADDR
// break ;
2465: GO 2469
// end ;
2467: GO 2398
2469: POP
2470: POP
// end ; end ;
2471: GO 2317
2473: POP
2474: POP
// end ; end_of_file
2475: PPOPN 5
2477: END
// export Popov , popov_side ; export function PreparePopov ; var i , tmp ; begin
2478: LD_INT 0
2480: PPUSH
2481: PPUSH
2482: PPUSH
// popov_side := 3 ;
2483: LD_ADDR_EXP 9
2487: PUSH
2488: LD_INT 3
2490: ST_TO_ADDR
// uc_side := popov_side ;
2491: LD_ADDR_OWVAR 20
2495: PUSH
2496: LD_EXP 9
2500: ST_TO_ADDR
// uc_nation := 3 ;
2501: LD_ADDR_OWVAR 21
2505: PUSH
2506: LD_INT 3
2508: ST_TO_ADDR
// tmp := PrepareBase ( ru_depot , popov_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
2509: LD_ADDR_VAR 0 3
2513: PUSH
2514: LD_INT 9
2516: PPUSH
2517: LD_INT 3
2519: PPUSH
2520: LD_STRING 
2522: PPUSH
2523: LD_INT 8
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: LD_INT 6
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: LD_OWVAR 67
2541: ARRAY
2542: PPUSH
2543: LD_INT 1500
2545: PUSH
2546: LD_INT 300
2548: PUSH
2549: LD_INT 30
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: PPUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 4
2562: PUSH
2563: LD_INT 4
2565: PUSH
2566: LD_INT 4
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: PPUSH
2575: CALL 12197 0 6
2579: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 3 , tmp ) ;
2580: LD_ADDR_EXP 13
2584: PUSH
2585: LD_EXP 13
2589: PPUSH
2590: LD_INT 3
2592: PPUSH
2593: LD_VAR 0 3
2597: PPUSH
2598: CALL_OW 1
2602: ST_TO_ADDR
// end ;
2603: LD_VAR 0 1
2607: RET
// export function InitMC_Popov ( ) ; begin
2608: LD_INT 0
2610: PPUSH
// MC_SetScanArea ( 3 , popov_base ) ;
2611: LD_INT 3
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: CALL 65264 0 2
// MC_SetParkingArea ( 3 , popov_parking ) ;
2621: LD_INT 3
2623: PPUSH
2624: LD_INT 10
2626: PPUSH
2627: CALL 65208 0 2
// MC_SetDepositsXY ( 3 , [ [ 86 , 118 , 0 ] , [ 123 , 151 , 1 ] , [ 106 , 113 , 0 ] ] ) ;
2631: LD_INT 3
2633: PPUSH
2634: LD_INT 86
2636: PUSH
2637: LD_INT 118
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 123
2650: PUSH
2651: LD_INT 151
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 106
2664: PUSH
2665: LD_INT 113
2667: PUSH
2668: LD_INT 0
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PPUSH
2681: CALL 64267 0 2
// MC_SetAllowedTurretWeapons ( 3 , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ) ;
2685: LD_INT 3
2687: PPUSH
2688: LD_INT 46
2690: PUSH
2691: LD_INT 45
2693: PUSH
2694: LD_INT 47
2696: PUSH
2697: LD_INT 49
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL 65096 0 2
// MC_SetCratesArea ( 3 , popov_crates ) ;
2710: LD_INT 3
2712: PPUSH
2713: LD_INT 12
2715: PPUSH
2716: CALL 64778 0 2
// MC_SetTame ( 3 , popov_ape ) ;
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 11
2725: PPUSH
2726: CALL 64509 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
2730: LD_INT 3
2732: PPUSH
2733: LD_INT 4
2735: PPUSH
2736: CALL 64128 0 2
// MC_SetProduceList ( 3 , [ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] ] ) ;
2740: LD_INT 3
2742: PPUSH
2743: LD_INT 23
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: LD_INT 1
2751: PUSH
2752: LD_INT 44
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 23
2763: PUSH
2764: LD_INT 1
2766: PUSH
2767: LD_INT 3
2769: PUSH
2770: LD_INT 45
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 21
2781: PUSH
2782: LD_INT 1
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: LD_INT 43
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 21
2799: PUSH
2800: LD_INT 1
2802: PUSH
2803: LD_INT 3
2805: PUSH
2806: LD_INT 45
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: PPUSH
2821: CALL 63943 0 2
// MC_SetBuildingList ( 3 , [ [ b_lab , 76 , 145 , 1 ] , [ b_oil_power , 87 , 144 , 0 ] , [ b_oil_mine , 86 , 118 , 0 ] , [ b_oil_mine , 106 , 113 , 0 ] , [ b_oil_power , 87 , 147 , 1 ] , [ b_workshop , 94 , 161 , 0 ] , [ b_lab , 81 , 155 , 1 ] , [ b_armoury , 103 , 147 , 3 ] , [ b_oil_power , 96 , 152 , 0 ] , [ b_oil_power , 96 , 149 , 3 ] , [ b_bunker , 109 , 142 , 3 ] , [ b_bunker , 112 , 148 , 3 ] , [ b_turret , 120 , 159 , 4 ] , [ b_turret , 122 , 163 , 4 ] , [ b_turret , 123 , 167 , 4 ] , [ b_turret , 59 , 111 , 3 ] , [ b_turret , 65 , 111 , 3 ] , [ b_turret , 76 , 117 , 3 ] , [ b_turret , 80 , 119 , 3 ] , [ b_turret , 87 , 125 , 3 ] , [ b_armoury , 92 , 129 , 3 ] , [ b_siberite_power , 85 , 165 , 0 ] , [ b_siberite_power , 83 , 161 , 4 ] , [ b_siberite_power , 91 , 166 , 3 ] , [ b_siberite_power , 102 , 166 , 2 ] , [ b_teleport , 91 , 147 , 3 ] ] ) ;
2825: LD_INT 3
2827: PPUSH
2828: LD_INT 6
2830: PUSH
2831: LD_INT 76
2833: PUSH
2834: LD_INT 145
2836: PUSH
2837: LD_INT 1
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 26
2848: PUSH
2849: LD_INT 87
2851: PUSH
2852: LD_INT 144
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 29
2866: PUSH
2867: LD_INT 86
2869: PUSH
2870: LD_INT 118
2872: PUSH
2873: LD_INT 0
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 29
2884: PUSH
2885: LD_INT 106
2887: PUSH
2888: LD_INT 113
2890: PUSH
2891: LD_INT 0
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 26
2902: PUSH
2903: LD_INT 87
2905: PUSH
2906: LD_INT 147
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 2
2920: PUSH
2921: LD_INT 94
2923: PUSH
2924: LD_INT 161
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 6
2938: PUSH
2939: LD_INT 81
2941: PUSH
2942: LD_INT 155
2944: PUSH
2945: LD_INT 1
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 4
2956: PUSH
2957: LD_INT 103
2959: PUSH
2960: LD_INT 147
2962: PUSH
2963: LD_INT 3
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 26
2974: PUSH
2975: LD_INT 96
2977: PUSH
2978: LD_INT 152
2980: PUSH
2981: LD_INT 0
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 26
2992: PUSH
2993: LD_INT 96
2995: PUSH
2996: LD_INT 149
2998: PUSH
2999: LD_INT 3
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_INT 32
3010: PUSH
3011: LD_INT 109
3013: PUSH
3014: LD_INT 142
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_INT 32
3028: PUSH
3029: LD_INT 112
3031: PUSH
3032: LD_INT 148
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 33
3046: PUSH
3047: LD_INT 120
3049: PUSH
3050: LD_INT 159
3052: PUSH
3053: LD_INT 4
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 33
3064: PUSH
3065: LD_INT 122
3067: PUSH
3068: LD_INT 163
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: PUSH
3080: LD_INT 33
3082: PUSH
3083: LD_INT 123
3085: PUSH
3086: LD_INT 167
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 33
3100: PUSH
3101: LD_INT 59
3103: PUSH
3104: LD_INT 111
3106: PUSH
3107: LD_INT 3
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 33
3118: PUSH
3119: LD_INT 65
3121: PUSH
3122: LD_INT 111
3124: PUSH
3125: LD_INT 3
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 33
3136: PUSH
3137: LD_INT 76
3139: PUSH
3140: LD_INT 117
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 33
3154: PUSH
3155: LD_INT 80
3157: PUSH
3158: LD_INT 119
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 33
3172: PUSH
3173: LD_INT 87
3175: PUSH
3176: LD_INT 125
3178: PUSH
3179: LD_INT 3
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 4
3190: PUSH
3191: LD_INT 92
3193: PUSH
3194: LD_INT 129
3196: PUSH
3197: LD_INT 3
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 28
3208: PUSH
3209: LD_INT 85
3211: PUSH
3212: LD_INT 165
3214: PUSH
3215: LD_INT 0
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 28
3226: PUSH
3227: LD_INT 83
3229: PUSH
3230: LD_INT 161
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 28
3244: PUSH
3245: LD_INT 91
3247: PUSH
3248: LD_INT 166
3250: PUSH
3251: LD_INT 3
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: PUSH
3260: LD_INT 28
3262: PUSH
3263: LD_INT 102
3265: PUSH
3266: LD_INT 166
3268: PUSH
3269: LD_INT 2
3271: PUSH
3272: EMPTY
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 34
3280: PUSH
3281: LD_INT 91
3283: PUSH
3284: LD_INT 147
3286: PUSH
3287: LD_INT 3
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PPUSH
3324: CALL 63835 0 2
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
3328: LD_INT 3
3330: PPUSH
3331: LD_INT 10
3333: PUSH
3334: LD_INT 12
3336: PUSH
3337: LD_INT 14
3339: PUSH
3340: LD_INT 11
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL 64685 0 2
// MC_SetFactoryExtension ( 3 , 94 , 161 , 0 , [ b_ext_noncombat , b_ext_gun , b_ext_rocket , b_ext_computer , b_ext_siberium ] ) ;
3353: LD_INT 3
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 161
3361: PPUSH
3362: LD_INT 0
3364: PPUSH
3365: LD_INT 19
3367: PUSH
3368: LD_INT 17
3370: PUSH
3371: LD_INT 18
3373: PUSH
3374: LD_INT 24
3376: PUSH
3377: LD_INT 21
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: PPUSH
3387: CALL 64890 0 5
// MC_SetUpgradeBuilding ( 3 , b_depot ) ;
3391: LD_INT 3
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL 64558 0 2
// end ; end_of_file
3401: LD_VAR 0 1
3405: RET
// export Sikorski ; export function PrepareSikorski ; var i , j , un ; begin
3406: LD_INT 0
3408: PPUSH
3409: PPUSH
3410: PPUSH
3411: PPUSH
// uc_side := 1 ;
3412: LD_ADDR_OWVAR 20
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// uc_nation := 1 ;
3420: LD_ADDR_OWVAR 21
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// hc_importance := 100 ;
3428: LD_ADDR_OWVAR 32
3432: PUSH
3433: LD_INT 100
3435: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
3436: LD_ADDR_OWVAR 26
3440: PUSH
3441: LD_STRING Jeremy Sikorski
3443: ST_TO_ADDR
// hc_gallery := us ;
3444: LD_ADDR_OWVAR 33
3448: PUSH
3449: LD_STRING us
3451: ST_TO_ADDR
// hc_face_number := 19 ;
3452: LD_ADDR_OWVAR 34
3456: PUSH
3457: LD_INT 19
3459: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 1
3465: PPUSH
3466: LD_INT 4
3468: PUSH
3469: LD_INT 4
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: PUSH
3480: LD_OWVAR 67
3484: ARRAY
3485: PPUSH
3486: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3490: LD_ADDR_OWVAR 29
3494: PUSH
3495: LD_INT 10
3497: PUSH
3498: LD_INT 12
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// Sikorski := CreateHuman ;
3505: LD_ADDR_EXP 10
3509: PUSH
3510: CALL_OW 44
3514: ST_TO_ADDR
// PlaceUnitXYR ( Sikorski , 133 , 15 , 2 , false ) ;
3515: LD_EXP 10
3519: PPUSH
3520: LD_INT 133
3522: PPUSH
3523: LD_INT 15
3525: PPUSH
3526: LD_INT 2
3528: PPUSH
3529: LD_INT 0
3531: PPUSH
3532: CALL_OW 50
// InitHc_All ( ) ;
3536: CALL_OW 584
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3540: LD_ADDR_VAR 0 2
3544: PUSH
3545: DOUBLE
3546: LD_INT 1
3548: DEC
3549: ST_TO_ADDR
3550: LD_INT 4
3552: PUSH
3553: LD_INT 3
3555: PUSH
3556: LD_INT 3
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: PUSH
3570: FOR_TO
3571: IFFALSE 3658
// for j := 1 to 4 do
3573: LD_ADDR_VAR 0 3
3577: PUSH
3578: DOUBLE
3579: LD_INT 1
3581: DEC
3582: ST_TO_ADDR
3583: LD_INT 4
3585: PUSH
3586: FOR_TO
3587: IFFALSE 3654
// begin PrepareHuman ( false , j , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
3589: LD_INT 0
3591: PPUSH
3592: LD_VAR 0 3
3596: PPUSH
3597: LD_INT 5
3599: PUSH
3600: LD_INT 4
3602: PUSH
3603: LD_INT 3
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: PUSH
3611: LD_OWVAR 67
3615: ARRAY
3616: PPUSH
3617: CALL_OW 380
// un := CreateHuman ;
3621: LD_ADDR_VAR 0 4
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceUnitXYR ( un , 133 , 15 , 6 , false ) ;
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_INT 133
3638: PPUSH
3639: LD_INT 15
3641: PPUSH
3642: LD_INT 6
3644: PPUSH
3645: LD_INT 0
3647: PPUSH
3648: CALL_OW 50
// end ;
3652: GO 3586
3654: POP
3655: POP
3656: GO 3570
3658: POP
3659: POP
// end ; end_of_file
3660: LD_VAR 0 1
3664: RET
// export function Action ; begin
3665: LD_INT 0
3667: PPUSH
// InGameOn ;
3668: CALL_OW 8
// CenterNowOnXY ( 133 , 19 ) ;
3672: LD_INT 133
3674: PPUSH
3675: LD_INT 19
3677: PPUSH
3678: CALL_OW 86
// Say ( Sikorski , WT-DS-1 ) ;
3682: LD_EXP 10
3686: PPUSH
3687: LD_STRING WT-DS-1
3689: PPUSH
3690: CALL_OW 88
// InGameOff ;
3694: CALL_OW 9
// ChangeMissionObjectives ( DestroyEnemy ) ;
3698: LD_STRING DestroyEnemy
3700: PPUSH
3701: CALL_OW 337
// end ; end_of_file
3705: LD_VAR 0 1
3709: RET
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
3710: LD_VAR 0 1
3714: PPUSH
3715: CALL 67383 0 1
// end ;
3719: PPOPN 1
3721: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_VAR 0 2
3731: PPUSH
3732: CALL 69717 0 2
// end ;
3736: PPOPN 2
3738: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
3739: LD_VAR 0 1
3743: PPUSH
3744: CALL 68785 0 1
// end ;
3748: PPOPN 1
3750: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
3751: LD_VAR 0 1
3755: PPUSH
3756: CALL 69026 0 1
// end ;
3760: PPOPN 1
3762: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_VAR 0 2
3772: PPUSH
3773: CALL 67079 0 2
// end ;
3777: PPOPN 2
3779: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
3780: LD_VAR 0 1
3784: PPUSH
3785: LD_VAR 0 2
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: LD_VAR 0 4
3799: PPUSH
3800: LD_VAR 0 5
3804: PPUSH
3805: CALL 66699 0 5
// end ;
3809: PPOPN 5
3811: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
3812: LD_VAR 0 1
3816: PPUSH
3817: LD_VAR 0 2
3821: PPUSH
3822: CALL 66295 0 2
// end ;
3826: PPOPN 2
3828: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
3829: LD_VAR 0 1
3833: PPUSH
3834: LD_VAR 0 2
3838: PPUSH
3839: LD_VAR 0 3
3843: PPUSH
3844: LD_VAR 0 4
3848: PPUSH
3849: CALL 66133 0 4
// end ;
3853: PPOPN 4
3855: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
3856: LD_VAR 0 1
3860: PPUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: LD_VAR 0 3
3870: PPUSH
3871: CALL 65908 0 3
// end ;
3875: PPOPN 3
3877: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
3878: LD_VAR 0 1
3882: PPUSH
3883: LD_VAR 0 2
3887: PPUSH
3888: CALL 65793 0 2
// end ;
3892: PPOPN 2
3894: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_VAR 0 2
3904: PPUSH
3905: CALL 69978 0 2
// end ;
3909: PPOPN 2
3911: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
3912: LD_VAR 0 1
3916: PPUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_VAR 0 3
3926: PPUSH
3927: LD_VAR 0 4
3931: PPUSH
3932: CALL 70194 0 4
// end ;
3936: PPOPN 4
3938: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
3939: LD_VAR 0 1
3943: PPUSH
3944: LD_VAR 0 2
3948: PPUSH
3949: CALL 65602 0 2
// end ;
3953: PPOPN 2
3955: END
// export function CustomEvent ( event ) ; begin
3956: LD_INT 0
3958: PPUSH
// end ; end_of_file
3959: LD_VAR 0 2
3963: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3964: LD_INT 0
3966: PPUSH
3967: PPUSH
// if exist_mode then
3968: LD_VAR 0 2
3972: IFFALSE 3997
// unit := CreateCharacter ( prefix & ident ) else
3974: LD_ADDR_VAR 0 5
3978: PUSH
3979: LD_VAR 0 3
3983: PUSH
3984: LD_VAR 0 1
3988: STR
3989: PPUSH
3990: CALL_OW 34
3994: ST_TO_ADDR
3995: GO 4012
// unit := NewCharacter ( ident ) ;
3997: LD_ADDR_VAR 0 5
4001: PUSH
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 25
4011: ST_TO_ADDR
// result := unit ;
4012: LD_ADDR_VAR 0 4
4016: PUSH
4017: LD_VAR 0 5
4021: ST_TO_ADDR
// end ;
4022: LD_VAR 0 4
4026: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4027: LD_INT 0
4029: PPUSH
4030: PPUSH
// if not side or not nation then
4031: LD_VAR 0 1
4035: NOT
4036: PUSH
4037: LD_VAR 0 2
4041: NOT
4042: OR
4043: IFFALSE 4047
// exit ;
4045: GO 4811
// case nation of nation_american :
4047: LD_VAR 0 2
4051: PUSH
4052: LD_INT 1
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4274
4060: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4061: LD_ADDR_VAR 0 4
4065: PUSH
4066: LD_INT 35
4068: PUSH
4069: LD_INT 45
4071: PUSH
4072: LD_INT 46
4074: PUSH
4075: LD_INT 47
4077: PUSH
4078: LD_INT 82
4080: PUSH
4081: LD_INT 83
4083: PUSH
4084: LD_INT 84
4086: PUSH
4087: LD_INT 85
4089: PUSH
4090: LD_INT 86
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: LD_INT 6
4101: PUSH
4102: LD_INT 15
4104: PUSH
4105: LD_INT 16
4107: PUSH
4108: LD_INT 7
4110: PUSH
4111: LD_INT 12
4113: PUSH
4114: LD_INT 13
4116: PUSH
4117: LD_INT 10
4119: PUSH
4120: LD_INT 14
4122: PUSH
4123: LD_INT 20
4125: PUSH
4126: LD_INT 21
4128: PUSH
4129: LD_INT 22
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 32
4137: PUSH
4138: LD_INT 27
4140: PUSH
4141: LD_INT 36
4143: PUSH
4144: LD_INT 69
4146: PUSH
4147: LD_INT 39
4149: PUSH
4150: LD_INT 34
4152: PUSH
4153: LD_INT 40
4155: PUSH
4156: LD_INT 48
4158: PUSH
4159: LD_INT 49
4161: PUSH
4162: LD_INT 50
4164: PUSH
4165: LD_INT 51
4167: PUSH
4168: LD_INT 52
4170: PUSH
4171: LD_INT 53
4173: PUSH
4174: LD_INT 54
4176: PUSH
4177: LD_INT 55
4179: PUSH
4180: LD_INT 56
4182: PUSH
4183: LD_INT 57
4185: PUSH
4186: LD_INT 58
4188: PUSH
4189: LD_INT 59
4191: PUSH
4192: LD_INT 60
4194: PUSH
4195: LD_INT 61
4197: PUSH
4198: LD_INT 62
4200: PUSH
4201: LD_INT 80
4203: PUSH
4204: LD_INT 82
4206: PUSH
4207: LD_INT 83
4209: PUSH
4210: LD_INT 84
4212: PUSH
4213: LD_INT 85
4215: PUSH
4216: LD_INT 86
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: ST_TO_ADDR
4272: GO 4735
4274: LD_INT 2
4276: DOUBLE
4277: EQUAL
4278: IFTRUE 4282
4280: GO 4504
4282: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
4283: LD_ADDR_VAR 0 4
4287: PUSH
4288: LD_INT 35
4290: PUSH
4291: LD_INT 45
4293: PUSH
4294: LD_INT 46
4296: PUSH
4297: LD_INT 47
4299: PUSH
4300: LD_INT 82
4302: PUSH
4303: LD_INT 83
4305: PUSH
4306: LD_INT 84
4308: PUSH
4309: LD_INT 85
4311: PUSH
4312: LD_INT 87
4314: PUSH
4315: LD_INT 70
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: LD_INT 11
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: LD_INT 4
4329: PUSH
4330: LD_INT 5
4332: PUSH
4333: LD_INT 6
4335: PUSH
4336: LD_INT 15
4338: PUSH
4339: LD_INT 18
4341: PUSH
4342: LD_INT 7
4344: PUSH
4345: LD_INT 17
4347: PUSH
4348: LD_INT 8
4350: PUSH
4351: LD_INT 20
4353: PUSH
4354: LD_INT 21
4356: PUSH
4357: LD_INT 22
4359: PUSH
4360: LD_INT 72
4362: PUSH
4363: LD_INT 26
4365: PUSH
4366: LD_INT 69
4368: PUSH
4369: LD_INT 39
4371: PUSH
4372: LD_INT 40
4374: PUSH
4375: LD_INT 41
4377: PUSH
4378: LD_INT 42
4380: PUSH
4381: LD_INT 43
4383: PUSH
4384: LD_INT 48
4386: PUSH
4387: LD_INT 49
4389: PUSH
4390: LD_INT 50
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: LD_INT 52
4398: PUSH
4399: LD_INT 53
4401: PUSH
4402: LD_INT 54
4404: PUSH
4405: LD_INT 55
4407: PUSH
4408: LD_INT 56
4410: PUSH
4411: LD_INT 60
4413: PUSH
4414: LD_INT 61
4416: PUSH
4417: LD_INT 62
4419: PUSH
4420: LD_INT 66
4422: PUSH
4423: LD_INT 67
4425: PUSH
4426: LD_INT 68
4428: PUSH
4429: LD_INT 81
4431: PUSH
4432: LD_INT 82
4434: PUSH
4435: LD_INT 83
4437: PUSH
4438: LD_INT 84
4440: PUSH
4441: LD_INT 85
4443: PUSH
4444: LD_INT 87
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: ST_TO_ADDR
4502: GO 4735
4504: LD_INT 3
4506: DOUBLE
4507: EQUAL
4508: IFTRUE 4512
4510: GO 4734
4512: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4513: LD_ADDR_VAR 0 4
4517: PUSH
4518: LD_INT 46
4520: PUSH
4521: LD_INT 47
4523: PUSH
4524: LD_INT 1
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 82
4532: PUSH
4533: LD_INT 83
4535: PUSH
4536: LD_INT 84
4538: PUSH
4539: LD_INT 85
4541: PUSH
4542: LD_INT 86
4544: PUSH
4545: LD_INT 11
4547: PUSH
4548: LD_INT 9
4550: PUSH
4551: LD_INT 20
4553: PUSH
4554: LD_INT 19
4556: PUSH
4557: LD_INT 21
4559: PUSH
4560: LD_INT 24
4562: PUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 25
4568: PUSH
4569: LD_INT 28
4571: PUSH
4572: LD_INT 29
4574: PUSH
4575: LD_INT 30
4577: PUSH
4578: LD_INT 31
4580: PUSH
4581: LD_INT 37
4583: PUSH
4584: LD_INT 38
4586: PUSH
4587: LD_INT 32
4589: PUSH
4590: LD_INT 27
4592: PUSH
4593: LD_INT 33
4595: PUSH
4596: LD_INT 69
4598: PUSH
4599: LD_INT 39
4601: PUSH
4602: LD_INT 34
4604: PUSH
4605: LD_INT 40
4607: PUSH
4608: LD_INT 71
4610: PUSH
4611: LD_INT 23
4613: PUSH
4614: LD_INT 44
4616: PUSH
4617: LD_INT 48
4619: PUSH
4620: LD_INT 49
4622: PUSH
4623: LD_INT 50
4625: PUSH
4626: LD_INT 51
4628: PUSH
4629: LD_INT 52
4631: PUSH
4632: LD_INT 53
4634: PUSH
4635: LD_INT 54
4637: PUSH
4638: LD_INT 55
4640: PUSH
4641: LD_INT 56
4643: PUSH
4644: LD_INT 57
4646: PUSH
4647: LD_INT 58
4649: PUSH
4650: LD_INT 59
4652: PUSH
4653: LD_INT 63
4655: PUSH
4656: LD_INT 64
4658: PUSH
4659: LD_INT 65
4661: PUSH
4662: LD_INT 82
4664: PUSH
4665: LD_INT 83
4667: PUSH
4668: LD_INT 84
4670: PUSH
4671: LD_INT 85
4673: PUSH
4674: LD_INT 86
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: ST_TO_ADDR
4732: GO 4735
4734: POP
// if state > - 1 and state < 3 then
4735: LD_VAR 0 3
4739: PUSH
4740: LD_INT 1
4742: NEG
4743: GREATER
4744: PUSH
4745: LD_VAR 0 3
4749: PUSH
4750: LD_INT 3
4752: LESS
4753: AND
4754: IFFALSE 4811
// for i in result do
4756: LD_ADDR_VAR 0 5
4760: PUSH
4761: LD_VAR 0 4
4765: PUSH
4766: FOR_IN
4767: IFFALSE 4809
// if GetTech ( i , side ) <> state then
4769: LD_VAR 0 5
4773: PPUSH
4774: LD_VAR 0 1
4778: PPUSH
4779: CALL_OW 321
4783: PUSH
4784: LD_VAR 0 3
4788: NONEQUAL
4789: IFFALSE 4807
// result := result diff i ;
4791: LD_ADDR_VAR 0 4
4795: PUSH
4796: LD_VAR 0 4
4800: PUSH
4801: LD_VAR 0 5
4805: DIFF
4806: ST_TO_ADDR
4807: GO 4766
4809: POP
4810: POP
// end ;
4811: LD_VAR 0 4
4815: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
4820: PPUSH
// result := true ;
4821: LD_ADDR_VAR 0 3
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4829: LD_ADDR_VAR 0 5
4833: PUSH
4834: LD_VAR 0 2
4838: PPUSH
4839: CALL_OW 480
4843: ST_TO_ADDR
// if not tmp then
4844: LD_VAR 0 5
4848: NOT
4849: IFFALSE 4853
// exit ;
4851: GO 4902
// for i in tmp do
4853: LD_ADDR_VAR 0 4
4857: PUSH
4858: LD_VAR 0 5
4862: PUSH
4863: FOR_IN
4864: IFFALSE 4900
// if GetTech ( i , side ) <> state_researched then
4866: LD_VAR 0 4
4870: PPUSH
4871: LD_VAR 0 1
4875: PPUSH
4876: CALL_OW 321
4880: PUSH
4881: LD_INT 2
4883: NONEQUAL
4884: IFFALSE 4898
// begin result := false ;
4886: LD_ADDR_VAR 0 3
4890: PUSH
4891: LD_INT 0
4893: ST_TO_ADDR
// exit ;
4894: POP
4895: POP
4896: GO 4902
// end ;
4898: GO 4863
4900: POP
4901: POP
// end ;
4902: LD_VAR 0 3
4906: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4907: LD_INT 0
4909: PPUSH
4910: PPUSH
4911: PPUSH
4912: PPUSH
4913: PPUSH
4914: PPUSH
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
4920: PPUSH
4921: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4922: LD_VAR 0 1
4926: NOT
4927: PUSH
4928: LD_VAR 0 1
4932: PPUSH
4933: CALL_OW 257
4937: PUSH
4938: LD_INT 9
4940: NONEQUAL
4941: OR
4942: IFFALSE 4946
// exit ;
4944: GO 5519
// side := GetSide ( unit ) ;
4946: LD_ADDR_VAR 0 9
4950: PUSH
4951: LD_VAR 0 1
4955: PPUSH
4956: CALL_OW 255
4960: ST_TO_ADDR
// tech_space := tech_spacanom ;
4961: LD_ADDR_VAR 0 12
4965: PUSH
4966: LD_INT 29
4968: ST_TO_ADDR
// tech_time := tech_taurad ;
4969: LD_ADDR_VAR 0 13
4973: PUSH
4974: LD_INT 28
4976: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4977: LD_ADDR_VAR 0 11
4981: PUSH
4982: LD_VAR 0 1
4986: PPUSH
4987: CALL_OW 310
4991: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4992: LD_VAR 0 11
4996: PPUSH
4997: CALL_OW 247
5001: PUSH
5002: LD_INT 2
5004: EQUAL
5005: IFFALSE 5009
// exit ;
5007: GO 5519
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5009: LD_ADDR_VAR 0 8
5013: PUSH
5014: LD_INT 81
5016: PUSH
5017: LD_VAR 0 9
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 3
5028: PUSH
5029: LD_INT 21
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 69
5051: ST_TO_ADDR
// if not tmp then
5052: LD_VAR 0 8
5056: NOT
5057: IFFALSE 5061
// exit ;
5059: GO 5519
// if in_unit then
5061: LD_VAR 0 11
5065: IFFALSE 5089
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5067: LD_ADDR_VAR 0 10
5071: PUSH
5072: LD_VAR 0 8
5076: PPUSH
5077: LD_VAR 0 11
5081: PPUSH
5082: CALL_OW 74
5086: ST_TO_ADDR
5087: GO 5109
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5089: LD_ADDR_VAR 0 10
5093: PUSH
5094: LD_VAR 0 8
5098: PPUSH
5099: LD_VAR 0 1
5103: PPUSH
5104: CALL_OW 74
5108: ST_TO_ADDR
// if not enemy then
5109: LD_VAR 0 10
5113: NOT
5114: IFFALSE 5118
// exit ;
5116: GO 5519
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5118: LD_VAR 0 11
5122: PUSH
5123: LD_VAR 0 11
5127: PPUSH
5128: LD_VAR 0 10
5132: PPUSH
5133: CALL_OW 296
5137: PUSH
5138: LD_INT 13
5140: GREATER
5141: AND
5142: PUSH
5143: LD_VAR 0 1
5147: PPUSH
5148: LD_VAR 0 10
5152: PPUSH
5153: CALL_OW 296
5157: PUSH
5158: LD_INT 12
5160: GREATER
5161: OR
5162: IFFALSE 5166
// exit ;
5164: GO 5519
// missile := [ 1 ] ;
5166: LD_ADDR_VAR 0 14
5170: PUSH
5171: LD_INT 1
5173: PUSH
5174: EMPTY
5175: LIST
5176: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5177: LD_VAR 0 9
5181: PPUSH
5182: LD_VAR 0 12
5186: PPUSH
5187: CALL_OW 325
5191: IFFALSE 5220
// missile := Insert ( missile , missile + 1 , 2 ) ;
5193: LD_ADDR_VAR 0 14
5197: PUSH
5198: LD_VAR 0 14
5202: PPUSH
5203: LD_VAR 0 14
5207: PUSH
5208: LD_INT 1
5210: PLUS
5211: PPUSH
5212: LD_INT 2
5214: PPUSH
5215: CALL_OW 2
5219: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5220: LD_VAR 0 9
5224: PPUSH
5225: LD_VAR 0 13
5229: PPUSH
5230: CALL_OW 325
5234: PUSH
5235: LD_VAR 0 10
5239: PPUSH
5240: CALL_OW 255
5244: PPUSH
5245: LD_VAR 0 13
5249: PPUSH
5250: CALL_OW 325
5254: NOT
5255: AND
5256: IFFALSE 5285
// missile := Insert ( missile , missile + 1 , 3 ) ;
5258: LD_ADDR_VAR 0 14
5262: PUSH
5263: LD_VAR 0 14
5267: PPUSH
5268: LD_VAR 0 14
5272: PUSH
5273: LD_INT 1
5275: PLUS
5276: PPUSH
5277: LD_INT 3
5279: PPUSH
5280: CALL_OW 2
5284: ST_TO_ADDR
// if missile < 2 then
5285: LD_VAR 0 14
5289: PUSH
5290: LD_INT 2
5292: LESS
5293: IFFALSE 5297
// exit ;
5295: GO 5519
// x := GetX ( enemy ) ;
5297: LD_ADDR_VAR 0 4
5301: PUSH
5302: LD_VAR 0 10
5306: PPUSH
5307: CALL_OW 250
5311: ST_TO_ADDR
// y := GetY ( enemy ) ;
5312: LD_ADDR_VAR 0 5
5316: PUSH
5317: LD_VAR 0 10
5321: PPUSH
5322: CALL_OW 251
5326: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5327: LD_ADDR_VAR 0 6
5331: PUSH
5332: LD_VAR 0 4
5336: PUSH
5337: LD_INT 1
5339: NEG
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: CALL_OW 12
5348: PLUS
5349: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5350: LD_ADDR_VAR 0 7
5354: PUSH
5355: LD_VAR 0 5
5359: PUSH
5360: LD_INT 1
5362: NEG
5363: PPUSH
5364: LD_INT 1
5366: PPUSH
5367: CALL_OW 12
5371: PLUS
5372: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5373: LD_VAR 0 6
5377: PPUSH
5378: LD_VAR 0 7
5382: PPUSH
5383: CALL_OW 488
5387: NOT
5388: IFFALSE 5410
// begin _x := x ;
5390: LD_ADDR_VAR 0 6
5394: PUSH
5395: LD_VAR 0 4
5399: ST_TO_ADDR
// _y := y ;
5400: LD_ADDR_VAR 0 7
5404: PUSH
5405: LD_VAR 0 5
5409: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5410: LD_ADDR_VAR 0 3
5414: PUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 14
5422: PPUSH
5423: CALL_OW 12
5427: ST_TO_ADDR
// case i of 1 :
5428: LD_VAR 0 3
5432: PUSH
5433: LD_INT 1
5435: DOUBLE
5436: EQUAL
5437: IFTRUE 5441
5439: GO 5458
5441: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_VAR 0 10
5451: PPUSH
5452: CALL_OW 115
5456: GO 5519
5458: LD_INT 2
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5466
5464: GO 5488
5466: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_VAR 0 6
5476: PPUSH
5477: LD_VAR 0 7
5481: PPUSH
5482: CALL_OW 153
5486: GO 5519
5488: LD_INT 3
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5496
5494: GO 5518
5496: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5497: LD_VAR 0 1
5501: PPUSH
5502: LD_VAR 0 6
5506: PPUSH
5507: LD_VAR 0 7
5511: PPUSH
5512: CALL_OW 154
5516: GO 5519
5518: POP
// end ;
5519: LD_VAR 0 2
5523: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
// if not unit or not building then
5532: LD_VAR 0 1
5536: NOT
5537: PUSH
5538: LD_VAR 0 2
5542: NOT
5543: OR
5544: IFFALSE 5548
// exit ;
5546: GO 5706
// x := GetX ( building ) ;
5548: LD_ADDR_VAR 0 5
5552: PUSH
5553: LD_VAR 0 2
5557: PPUSH
5558: CALL_OW 250
5562: ST_TO_ADDR
// y := GetY ( building ) ;
5563: LD_ADDR_VAR 0 6
5567: PUSH
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 251
5577: ST_TO_ADDR
// for i = 0 to 5 do
5578: LD_ADDR_VAR 0 4
5582: PUSH
5583: DOUBLE
5584: LD_INT 0
5586: DEC
5587: ST_TO_ADDR
5588: LD_INT 5
5590: PUSH
5591: FOR_TO
5592: IFFALSE 5704
// begin _x := ShiftX ( x , i , 3 ) ;
5594: LD_ADDR_VAR 0 7
5598: PUSH
5599: LD_VAR 0 5
5603: PPUSH
5604: LD_VAR 0 4
5608: PPUSH
5609: LD_INT 3
5611: PPUSH
5612: CALL_OW 272
5616: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5617: LD_ADDR_VAR 0 8
5621: PUSH
5622: LD_VAR 0 6
5626: PPUSH
5627: LD_VAR 0 4
5631: PPUSH
5632: LD_INT 3
5634: PPUSH
5635: CALL_OW 273
5639: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5640: LD_VAR 0 7
5644: PPUSH
5645: LD_VAR 0 8
5649: PPUSH
5650: CALL_OW 488
5654: NOT
5655: IFFALSE 5659
// continue ;
5657: GO 5591
// if HexInfo ( _x , _y ) = 0 then
5659: LD_VAR 0 7
5663: PPUSH
5664: LD_VAR 0 8
5668: PPUSH
5669: CALL_OW 428
5673: PUSH
5674: LD_INT 0
5676: EQUAL
5677: IFFALSE 5702
// begin ComMoveXY ( unit , _x , _y ) ;
5679: LD_VAR 0 1
5683: PPUSH
5684: LD_VAR 0 7
5688: PPUSH
5689: LD_VAR 0 8
5693: PPUSH
5694: CALL_OW 111
// exit ;
5698: POP
5699: POP
5700: GO 5706
// end ; end ;
5702: GO 5591
5704: POP
5705: POP
// end ;
5706: LD_VAR 0 3
5710: RET
// export function ScanBase ( side , base_area ) ; begin
5711: LD_INT 0
5713: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_INT 81
5726: PUSH
5727: LD_VAR 0 1
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: CALL_OW 70
5740: ST_TO_ADDR
// end ;
5741: LD_VAR 0 3
5745: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5746: LD_INT 0
5748: PPUSH
5749: PPUSH
5750: PPUSH
5751: PPUSH
// result := false ;
5752: LD_ADDR_VAR 0 2
5756: PUSH
5757: LD_INT 0
5759: ST_TO_ADDR
// side := GetSide ( unit ) ;
5760: LD_ADDR_VAR 0 3
5764: PUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 255
5774: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5775: LD_ADDR_VAR 0 4
5779: PUSH
5780: LD_VAR 0 1
5784: PPUSH
5785: CALL_OW 248
5789: ST_TO_ADDR
// case nat of 1 :
5790: LD_VAR 0 4
5794: PUSH
5795: LD_INT 1
5797: DOUBLE
5798: EQUAL
5799: IFTRUE 5803
5801: GO 5814
5803: POP
// tech := tech_lassight ; 2 :
5804: LD_ADDR_VAR 0 5
5808: PUSH
5809: LD_INT 12
5811: ST_TO_ADDR
5812: GO 5853
5814: LD_INT 2
5816: DOUBLE
5817: EQUAL
5818: IFTRUE 5822
5820: GO 5833
5822: POP
// tech := tech_mortar ; 3 :
5823: LD_ADDR_VAR 0 5
5827: PUSH
5828: LD_INT 41
5830: ST_TO_ADDR
5831: GO 5853
5833: LD_INT 3
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5841
5839: GO 5852
5841: POP
// tech := tech_bazooka ; end ;
5842: LD_ADDR_VAR 0 5
5846: PUSH
5847: LD_INT 44
5849: ST_TO_ADDR
5850: GO 5853
5852: POP
// if Researched ( side , tech ) then
5853: LD_VAR 0 3
5857: PPUSH
5858: LD_VAR 0 5
5862: PPUSH
5863: CALL_OW 325
5867: IFFALSE 5894
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5869: LD_ADDR_VAR 0 2
5873: PUSH
5874: LD_INT 5
5876: PUSH
5877: LD_INT 8
5879: PUSH
5880: LD_INT 9
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: LD_VAR 0 4
5892: ARRAY
5893: ST_TO_ADDR
// end ;
5894: LD_VAR 0 2
5898: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5899: LD_INT 0
5901: PPUSH
5902: PPUSH
5903: PPUSH
// if not mines then
5904: LD_VAR 0 2
5908: NOT
5909: IFFALSE 5913
// exit ;
5911: GO 6057
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5913: LD_ADDR_VAR 0 5
5917: PUSH
5918: LD_INT 81
5920: PUSH
5921: LD_VAR 0 1
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 3
5932: PUSH
5933: LD_INT 21
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// for i in mines do
5956: LD_ADDR_VAR 0 4
5960: PUSH
5961: LD_VAR 0 2
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6055
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_VAR 0 4
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: CALL_OW 458
5991: NOT
5992: IFFALSE 5996
// continue ;
5994: GO 5966
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5996: LD_VAR 0 4
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: PPUSH
6005: LD_VAR 0 4
6009: PUSH
6010: LD_INT 2
6012: ARRAY
6013: PPUSH
6014: CALL_OW 428
6018: PUSH
6019: LD_VAR 0 5
6023: IN
6024: IFFALSE 6053
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6026: LD_VAR 0 4
6030: PUSH
6031: LD_INT 1
6033: ARRAY
6034: PPUSH
6035: LD_VAR 0 4
6039: PUSH
6040: LD_INT 2
6042: ARRAY
6043: PPUSH
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 456
// end ;
6053: GO 5966
6055: POP
6056: POP
// end ;
6057: LD_VAR 0 3
6061: RET
// export function Count ( array ) ; var i ; begin
6062: LD_INT 0
6064: PPUSH
6065: PPUSH
// result := 0 ;
6066: LD_ADDR_VAR 0 2
6070: PUSH
6071: LD_INT 0
6073: ST_TO_ADDR
// for i in array do
6074: LD_ADDR_VAR 0 3
6078: PUSH
6079: LD_VAR 0 1
6083: PUSH
6084: FOR_IN
6085: IFFALSE 6109
// if i then
6087: LD_VAR 0 3
6091: IFFALSE 6107
// result := result + 1 ;
6093: LD_ADDR_VAR 0 2
6097: PUSH
6098: LD_VAR 0 2
6102: PUSH
6103: LD_INT 1
6105: PLUS
6106: ST_TO_ADDR
6107: GO 6084
6109: POP
6110: POP
// end ;
6111: LD_VAR 0 2
6115: RET
// export function IsEmpty ( building ) ; begin
6116: LD_INT 0
6118: PPUSH
// if not building then
6119: LD_VAR 0 1
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6171
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6128: LD_ADDR_VAR 0 2
6132: PUSH
6133: LD_VAR 0 1
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PPUSH
6146: CALL_OW 255
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 58
6157: PUSH
6158: EMPTY
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PPUSH
6165: CALL_OW 69
6169: IN
6170: ST_TO_ADDR
// end ;
6171: LD_VAR 0 2
6175: RET
// export function IsNotFull ( building ) ; begin
6176: LD_INT 0
6178: PPUSH
// if not building then
6179: LD_VAR 0 1
6183: NOT
6184: IFFALSE 6188
// exit ;
6186: GO 6207
// result := UnitsInside ( building ) < 6 ;
6188: LD_ADDR_VAR 0 2
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 313
6202: PUSH
6203: LD_INT 6
6205: LESS
6206: ST_TO_ADDR
// end ;
6207: LD_VAR 0 2
6211: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// tmp := [ ] ;
6218: LD_ADDR_VAR 0 3
6222: PUSH
6223: EMPTY
6224: ST_TO_ADDR
// list := [ ] ;
6225: LD_ADDR_VAR 0 5
6229: PUSH
6230: EMPTY
6231: ST_TO_ADDR
// for i = 16 to 25 do
6232: LD_ADDR_VAR 0 4
6236: PUSH
6237: DOUBLE
6238: LD_INT 16
6240: DEC
6241: ST_TO_ADDR
6242: LD_INT 25
6244: PUSH
6245: FOR_TO
6246: IFFALSE 6319
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6248: LD_ADDR_VAR 0 3
6252: PUSH
6253: LD_VAR 0 3
6257: PUSH
6258: LD_INT 22
6260: PUSH
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 255
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 91
6277: PUSH
6278: LD_VAR 0 1
6282: PUSH
6283: LD_INT 6
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 30
6293: PUSH
6294: LD_VAR 0 4
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: ADD
6316: ST_TO_ADDR
6317: GO 6245
6319: POP
6320: POP
// for i = 1 to tmp do
6321: LD_ADDR_VAR 0 4
6325: PUSH
6326: DOUBLE
6327: LD_INT 1
6329: DEC
6330: ST_TO_ADDR
6331: LD_VAR 0 3
6335: PUSH
6336: FOR_TO
6337: IFFALSE 6425
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6339: LD_ADDR_VAR 0 5
6343: PUSH
6344: LD_VAR 0 5
6348: PUSH
6349: LD_VAR 0 3
6353: PUSH
6354: LD_VAR 0 4
6358: ARRAY
6359: PPUSH
6360: CALL_OW 266
6364: PUSH
6365: LD_VAR 0 3
6369: PUSH
6370: LD_VAR 0 4
6374: ARRAY
6375: PPUSH
6376: CALL_OW 250
6380: PUSH
6381: LD_VAR 0 3
6385: PUSH
6386: LD_VAR 0 4
6390: ARRAY
6391: PPUSH
6392: CALL_OW 251
6396: PUSH
6397: LD_VAR 0 3
6401: PUSH
6402: LD_VAR 0 4
6406: ARRAY
6407: PPUSH
6408: CALL_OW 254
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: EMPTY
6420: LIST
6421: ADD
6422: ST_TO_ADDR
6423: GO 6336
6425: POP
6426: POP
// result := list ;
6427: LD_ADDR_VAR 0 2
6431: PUSH
6432: LD_VAR 0 5
6436: ST_TO_ADDR
// end ;
6437: LD_VAR 0 2
6441: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6442: LD_INT 0
6444: PPUSH
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
// if not factory then
6451: LD_VAR 0 1
6455: NOT
6456: IFFALSE 6460
// exit ;
6458: GO 7053
// if control = control_apeman then
6460: LD_VAR 0 4
6464: PUSH
6465: LD_INT 5
6467: EQUAL
6468: IFFALSE 6577
// begin tmp := UnitsInside ( factory ) ;
6470: LD_ADDR_VAR 0 8
6474: PUSH
6475: LD_VAR 0 1
6479: PPUSH
6480: CALL_OW 313
6484: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6485: LD_VAR 0 8
6489: PPUSH
6490: LD_INT 25
6492: PUSH
6493: LD_INT 12
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PPUSH
6500: CALL_OW 72
6504: NOT
6505: IFFALSE 6515
// control := control_manual ;
6507: LD_ADDR_VAR 0 4
6511: PUSH
6512: LD_INT 1
6514: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6515: LD_ADDR_VAR 0 8
6519: PUSH
6520: LD_VAR 0 1
6524: PPUSH
6525: CALL 6212 0 1
6529: ST_TO_ADDR
// if tmp then
6530: LD_VAR 0 8
6534: IFFALSE 6577
// begin for i in tmp do
6536: LD_ADDR_VAR 0 7
6540: PUSH
6541: LD_VAR 0 8
6545: PUSH
6546: FOR_IN
6547: IFFALSE 6575
// if i [ 1 ] = b_ext_radio then
6549: LD_VAR 0 7
6553: PUSH
6554: LD_INT 1
6556: ARRAY
6557: PUSH
6558: LD_INT 22
6560: EQUAL
6561: IFFALSE 6573
// begin control := control_remote ;
6563: LD_ADDR_VAR 0 4
6567: PUSH
6568: LD_INT 2
6570: ST_TO_ADDR
// break ;
6571: GO 6575
// end ;
6573: GO 6546
6575: POP
6576: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6577: LD_VAR 0 1
6581: PPUSH
6582: LD_VAR 0 2
6586: PPUSH
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_VAR 0 4
6596: PPUSH
6597: LD_VAR 0 5
6601: PPUSH
6602: CALL_OW 448
6606: IFFALSE 6641
// begin result := [ chassis , engine , control , weapon ] ;
6608: LD_ADDR_VAR 0 6
6612: PUSH
6613: LD_VAR 0 2
6617: PUSH
6618: LD_VAR 0 3
6622: PUSH
6623: LD_VAR 0 4
6627: PUSH
6628: LD_VAR 0 5
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: ST_TO_ADDR
// exit ;
6639: GO 7053
// end ; _chassis := AvailableChassisList ( factory ) ;
6641: LD_ADDR_VAR 0 9
6645: PUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: CALL_OW 475
6655: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6656: LD_ADDR_VAR 0 11
6660: PUSH
6661: LD_VAR 0 1
6665: PPUSH
6666: CALL_OW 476
6670: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6671: LD_ADDR_VAR 0 12
6675: PUSH
6676: LD_VAR 0 1
6680: PPUSH
6681: CALL_OW 477
6685: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6686: LD_ADDR_VAR 0 10
6690: PUSH
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 478
6700: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6701: LD_VAR 0 9
6705: NOT
6706: PUSH
6707: LD_VAR 0 11
6711: NOT
6712: OR
6713: PUSH
6714: LD_VAR 0 12
6718: NOT
6719: OR
6720: PUSH
6721: LD_VAR 0 10
6725: NOT
6726: OR
6727: IFFALSE 6762
// begin result := [ chassis , engine , control , weapon ] ;
6729: LD_ADDR_VAR 0 6
6733: PUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_VAR 0 3
6743: PUSH
6744: LD_VAR 0 4
6748: PUSH
6749: LD_VAR 0 5
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: ST_TO_ADDR
// exit ;
6760: GO 7053
// end ; if not chassis in _chassis then
6762: LD_VAR 0 2
6766: PUSH
6767: LD_VAR 0 9
6771: IN
6772: NOT
6773: IFFALSE 6799
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6775: LD_ADDR_VAR 0 2
6779: PUSH
6780: LD_VAR 0 9
6784: PUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_VAR 0 9
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6799: LD_VAR 0 2
6803: PPUSH
6804: LD_VAR 0 3
6808: PPUSH
6809: CALL 7058 0 2
6813: NOT
6814: IFFALSE 6873
// repeat engine := _engine [ 1 ] ;
6816: LD_ADDR_VAR 0 3
6820: PUSH
6821: LD_VAR 0 11
6825: PUSH
6826: LD_INT 1
6828: ARRAY
6829: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6830: LD_ADDR_VAR 0 11
6834: PUSH
6835: LD_VAR 0 11
6839: PPUSH
6840: LD_INT 1
6842: PPUSH
6843: CALL_OW 3
6847: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6848: LD_VAR 0 2
6852: PPUSH
6853: LD_VAR 0 3
6857: PPUSH
6858: CALL 7058 0 2
6862: PUSH
6863: LD_VAR 0 11
6867: PUSH
6868: EMPTY
6869: EQUAL
6870: OR
6871: IFFALSE 6816
// if not control in _control then
6873: LD_VAR 0 4
6877: PUSH
6878: LD_VAR 0 12
6882: IN
6883: NOT
6884: IFFALSE 6910
// control := _control [ rand ( 1 , _control ) ] ;
6886: LD_ADDR_VAR 0 4
6890: PUSH
6891: LD_VAR 0 12
6895: PUSH
6896: LD_INT 1
6898: PPUSH
6899: LD_VAR 0 12
6903: PPUSH
6904: CALL_OW 12
6908: ARRAY
6909: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6910: LD_VAR 0 2
6914: PPUSH
6915: LD_VAR 0 5
6919: PPUSH
6920: CALL 7278 0 2
6924: NOT
6925: IFFALSE 6984
// repeat weapon := _weapon [ 1 ] ;
6927: LD_ADDR_VAR 0 5
6931: PUSH
6932: LD_VAR 0 10
6936: PUSH
6937: LD_INT 1
6939: ARRAY
6940: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6941: LD_ADDR_VAR 0 10
6945: PUSH
6946: LD_VAR 0 10
6950: PPUSH
6951: LD_INT 1
6953: PPUSH
6954: CALL_OW 3
6958: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6959: LD_VAR 0 2
6963: PPUSH
6964: LD_VAR 0 5
6968: PPUSH
6969: CALL 7278 0 2
6973: PUSH
6974: LD_VAR 0 10
6978: PUSH
6979: EMPTY
6980: EQUAL
6981: OR
6982: IFFALSE 6927
// result := [ ] ;
6984: LD_ADDR_VAR 0 6
6988: PUSH
6989: EMPTY
6990: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6991: LD_VAR 0 1
6995: PPUSH
6996: LD_VAR 0 2
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_VAR 0 5
7015: PPUSH
7016: CALL_OW 448
7020: IFFALSE 7053
// result := [ chassis , engine , control , weapon ] ;
7022: LD_ADDR_VAR 0 6
7026: PUSH
7027: LD_VAR 0 2
7031: PUSH
7032: LD_VAR 0 3
7036: PUSH
7037: LD_VAR 0 4
7041: PUSH
7042: LD_VAR 0 5
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: ST_TO_ADDR
// end ;
7053: LD_VAR 0 6
7057: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7058: LD_INT 0
7060: PPUSH
// if not chassis or not engine then
7061: LD_VAR 0 1
7065: NOT
7066: PUSH
7067: LD_VAR 0 2
7071: NOT
7072: OR
7073: IFFALSE 7077
// exit ;
7075: GO 7273
// case engine of engine_solar :
7077: LD_VAR 0 2
7081: PUSH
7082: LD_INT 2
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7128
7090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7091: LD_ADDR_VAR 0 3
7095: PUSH
7096: LD_INT 11
7098: PUSH
7099: LD_INT 12
7101: PUSH
7102: LD_INT 13
7104: PUSH
7105: LD_INT 14
7107: PUSH
7108: LD_INT 1
7110: PUSH
7111: LD_INT 2
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7257
7128: LD_INT 1
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7198
7136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_INT 11
7144: PUSH
7145: LD_INT 12
7147: PUSH
7148: LD_INT 13
7150: PUSH
7151: LD_INT 14
7153: PUSH
7154: LD_INT 1
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: LD_INT 4
7165: PUSH
7166: LD_INT 5
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 23
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: ST_TO_ADDR
7196: GO 7257
7198: LD_INT 3
7200: DOUBLE
7201: EQUAL
7202: IFTRUE 7206
7204: GO 7256
7206: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 13
7214: PUSH
7215: LD_INT 14
7217: PUSH
7218: LD_INT 2
7220: PUSH
7221: LD_INT 3
7223: PUSH
7224: LD_INT 4
7226: PUSH
7227: LD_INT 5
7229: PUSH
7230: LD_INT 21
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_INT 23
7238: PUSH
7239: LD_INT 24
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: ST_TO_ADDR
7254: GO 7257
7256: POP
// result := ( chassis in result ) ;
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_VAR 0 1
7266: PUSH
7267: LD_VAR 0 3
7271: IN
7272: ST_TO_ADDR
// end ;
7273: LD_VAR 0 3
7277: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7278: LD_INT 0
7280: PPUSH
// if not chassis or not weapon then
7281: LD_VAR 0 1
7285: NOT
7286: PUSH
7287: LD_VAR 0 2
7291: NOT
7292: OR
7293: IFFALSE 7297
// exit ;
7295: GO 8323
// case weapon of us_machine_gun :
7297: LD_VAR 0 2
7301: PUSH
7302: LD_INT 2
7304: DOUBLE
7305: EQUAL
7306: IFTRUE 7310
7308: GO 7340
7310: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7311: LD_ADDR_VAR 0 3
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 8307
7340: LD_INT 3
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7378
7348: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 1
7356: PUSH
7357: LD_INT 2
7359: PUSH
7360: LD_INT 3
7362: PUSH
7363: LD_INT 4
7365: PUSH
7366: LD_INT 5
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: ST_TO_ADDR
7376: GO 8307
7378: LD_INT 11
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7416
7386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7387: LD_ADDR_VAR 0 3
7391: PUSH
7392: LD_INT 1
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: LD_INT 3
7400: PUSH
7401: LD_INT 4
7403: PUSH
7404: LD_INT 5
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: ST_TO_ADDR
7414: GO 8307
7416: LD_INT 4
7418: DOUBLE
7419: EQUAL
7420: IFTRUE 7424
7422: GO 7450
7424: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7425: LD_ADDR_VAR 0 3
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: LD_INT 3
7435: PUSH
7436: LD_INT 4
7438: PUSH
7439: LD_INT 5
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: ST_TO_ADDR
7448: GO 8307
7450: LD_INT 5
7452: DOUBLE
7453: EQUAL
7454: IFTRUE 7458
7456: GO 7484
7458: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7459: LD_ADDR_VAR 0 3
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: LD_INT 3
7469: PUSH
7470: LD_INT 4
7472: PUSH
7473: LD_INT 5
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: ST_TO_ADDR
7482: GO 8307
7484: LD_INT 9
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7518
7492: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7493: LD_ADDR_VAR 0 3
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 4
7506: PUSH
7507: LD_INT 5
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: ST_TO_ADDR
7516: GO 8307
7518: LD_INT 7
7520: DOUBLE
7521: EQUAL
7522: IFTRUE 7526
7524: GO 7552
7526: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7527: LD_ADDR_VAR 0 3
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: LD_INT 3
7537: PUSH
7538: LD_INT 4
7540: PUSH
7541: LD_INT 5
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: ST_TO_ADDR
7550: GO 8307
7552: LD_INT 12
7554: DOUBLE
7555: EQUAL
7556: IFTRUE 7560
7558: GO 7586
7560: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7561: LD_ADDR_VAR 0 3
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: LD_INT 4
7574: PUSH
7575: LD_INT 5
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: ST_TO_ADDR
7584: GO 8307
7586: LD_INT 13
7588: DOUBLE
7589: EQUAL
7590: IFTRUE 7594
7592: GO 7620
7594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7595: LD_ADDR_VAR 0 3
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 5
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: ST_TO_ADDR
7618: GO 8307
7620: LD_INT 14
7622: DOUBLE
7623: EQUAL
7624: IFTRUE 7628
7626: GO 7646
7628: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: ST_TO_ADDR
7644: GO 8307
7646: LD_INT 6
7648: DOUBLE
7649: EQUAL
7650: IFTRUE 7654
7652: GO 7672
7654: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7655: LD_ADDR_VAR 0 3
7659: PUSH
7660: LD_INT 4
7662: PUSH
7663: LD_INT 5
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: ST_TO_ADDR
7670: GO 8307
7672: LD_INT 10
7674: DOUBLE
7675: EQUAL
7676: IFTRUE 7680
7678: GO 7698
7680: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7681: LD_ADDR_VAR 0 3
7685: PUSH
7686: LD_INT 4
7688: PUSH
7689: LD_INT 5
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: ST_TO_ADDR
7696: GO 8307
7698: LD_INT 22
7700: DOUBLE
7701: EQUAL
7702: IFTRUE 7706
7704: GO 7732
7706: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 11
7714: PUSH
7715: LD_INT 12
7717: PUSH
7718: LD_INT 13
7720: PUSH
7721: LD_INT 14
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: ST_TO_ADDR
7730: GO 8307
7732: LD_INT 23
7734: DOUBLE
7735: EQUAL
7736: IFTRUE 7740
7738: GO 7766
7740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7741: LD_ADDR_VAR 0 3
7745: PUSH
7746: LD_INT 11
7748: PUSH
7749: LD_INT 12
7751: PUSH
7752: LD_INT 13
7754: PUSH
7755: LD_INT 14
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: ST_TO_ADDR
7764: GO 8307
7766: LD_INT 24
7768: DOUBLE
7769: EQUAL
7770: IFTRUE 7774
7772: GO 7800
7774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7775: LD_ADDR_VAR 0 3
7779: PUSH
7780: LD_INT 11
7782: PUSH
7783: LD_INT 12
7785: PUSH
7786: LD_INT 13
7788: PUSH
7789: LD_INT 14
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: ST_TO_ADDR
7798: GO 8307
7800: LD_INT 30
7802: DOUBLE
7803: EQUAL
7804: IFTRUE 7808
7806: GO 7834
7808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7809: LD_ADDR_VAR 0 3
7813: PUSH
7814: LD_INT 11
7816: PUSH
7817: LD_INT 12
7819: PUSH
7820: LD_INT 13
7822: PUSH
7823: LD_INT 14
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: ST_TO_ADDR
7832: GO 8307
7834: LD_INT 25
7836: DOUBLE
7837: EQUAL
7838: IFTRUE 7842
7840: GO 7860
7842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7843: LD_ADDR_VAR 0 3
7847: PUSH
7848: LD_INT 13
7850: PUSH
7851: LD_INT 14
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: ST_TO_ADDR
7858: GO 8307
7860: LD_INT 27
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 7886
7868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7869: LD_ADDR_VAR 0 3
7873: PUSH
7874: LD_INT 13
7876: PUSH
7877: LD_INT 14
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: ST_TO_ADDR
7884: GO 8307
7886: LD_INT 28
7888: DOUBLE
7889: EQUAL
7890: IFTRUE 7894
7892: GO 7912
7894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7895: LD_ADDR_VAR 0 3
7899: PUSH
7900: LD_INT 13
7902: PUSH
7903: LD_INT 14
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: ST_TO_ADDR
7910: GO 8307
7912: LD_INT 29
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7938
7920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7921: LD_ADDR_VAR 0 3
7925: PUSH
7926: LD_INT 13
7928: PUSH
7929: LD_INT 14
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: ST_TO_ADDR
7936: GO 8307
7938: LD_INT 31
7940: DOUBLE
7941: EQUAL
7942: IFTRUE 7946
7944: GO 7964
7946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7947: LD_ADDR_VAR 0 3
7951: PUSH
7952: LD_INT 13
7954: PUSH
7955: LD_INT 14
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: ST_TO_ADDR
7962: GO 8307
7964: LD_INT 26
7966: DOUBLE
7967: EQUAL
7968: IFTRUE 7972
7970: GO 7990
7972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7973: LD_ADDR_VAR 0 3
7977: PUSH
7978: LD_INT 13
7980: PUSH
7981: LD_INT 14
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: ST_TO_ADDR
7988: GO 8307
7990: LD_INT 42
7992: DOUBLE
7993: EQUAL
7994: IFTRUE 7998
7996: GO 8024
7998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: LD_INT 21
8006: PUSH
8007: LD_INT 22
8009: PUSH
8010: LD_INT 23
8012: PUSH
8013: LD_INT 24
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: ST_TO_ADDR
8022: GO 8307
8024: LD_INT 43
8026: DOUBLE
8027: EQUAL
8028: IFTRUE 8032
8030: GO 8058
8032: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8033: LD_ADDR_VAR 0 3
8037: PUSH
8038: LD_INT 21
8040: PUSH
8041: LD_INT 22
8043: PUSH
8044: LD_INT 23
8046: PUSH
8047: LD_INT 24
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: ST_TO_ADDR
8056: GO 8307
8058: LD_INT 44
8060: DOUBLE
8061: EQUAL
8062: IFTRUE 8066
8064: GO 8092
8066: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8067: LD_ADDR_VAR 0 3
8071: PUSH
8072: LD_INT 21
8074: PUSH
8075: LD_INT 22
8077: PUSH
8078: LD_INT 23
8080: PUSH
8081: LD_INT 24
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: ST_TO_ADDR
8090: GO 8307
8092: LD_INT 45
8094: DOUBLE
8095: EQUAL
8096: IFTRUE 8100
8098: GO 8126
8100: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8101: LD_ADDR_VAR 0 3
8105: PUSH
8106: LD_INT 21
8108: PUSH
8109: LD_INT 22
8111: PUSH
8112: LD_INT 23
8114: PUSH
8115: LD_INT 24
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: ST_TO_ADDR
8124: GO 8307
8126: LD_INT 49
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8160
8134: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8135: LD_ADDR_VAR 0 3
8139: PUSH
8140: LD_INT 21
8142: PUSH
8143: LD_INT 22
8145: PUSH
8146: LD_INT 23
8148: PUSH
8149: LD_INT 24
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: ST_TO_ADDR
8158: GO 8307
8160: LD_INT 51
8162: DOUBLE
8163: EQUAL
8164: IFTRUE 8168
8166: GO 8194
8168: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8169: LD_ADDR_VAR 0 3
8173: PUSH
8174: LD_INT 21
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 23
8182: PUSH
8183: LD_INT 24
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: ST_TO_ADDR
8192: GO 8307
8194: LD_INT 52
8196: DOUBLE
8197: EQUAL
8198: IFTRUE 8202
8200: GO 8228
8202: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8203: LD_ADDR_VAR 0 3
8207: PUSH
8208: LD_INT 21
8210: PUSH
8211: LD_INT 22
8213: PUSH
8214: LD_INT 23
8216: PUSH
8217: LD_INT 24
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: ST_TO_ADDR
8226: GO 8307
8228: LD_INT 53
8230: DOUBLE
8231: EQUAL
8232: IFTRUE 8236
8234: GO 8254
8236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8237: LD_ADDR_VAR 0 3
8241: PUSH
8242: LD_INT 23
8244: PUSH
8245: LD_INT 24
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: ST_TO_ADDR
8252: GO 8307
8254: LD_INT 46
8256: DOUBLE
8257: EQUAL
8258: IFTRUE 8262
8260: GO 8280
8262: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8263: LD_ADDR_VAR 0 3
8267: PUSH
8268: LD_INT 23
8270: PUSH
8271: LD_INT 24
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: ST_TO_ADDR
8278: GO 8307
8280: LD_INT 47
8282: DOUBLE
8283: EQUAL
8284: IFTRUE 8288
8286: GO 8306
8288: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8289: LD_ADDR_VAR 0 3
8293: PUSH
8294: LD_INT 23
8296: PUSH
8297: LD_INT 24
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: ST_TO_ADDR
8304: GO 8307
8306: POP
// result := ( chassis in result ) ;
8307: LD_ADDR_VAR 0 3
8311: PUSH
8312: LD_VAR 0 1
8316: PUSH
8317: LD_VAR 0 3
8321: IN
8322: ST_TO_ADDR
// end ;
8323: LD_VAR 0 3
8327: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8328: LD_INT 0
8330: PPUSH
8331: PPUSH
8332: PPUSH
8333: PPUSH
8334: PPUSH
8335: PPUSH
8336: PPUSH
// result := array ;
8337: LD_ADDR_VAR 0 5
8341: PUSH
8342: LD_VAR 0 1
8346: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8347: LD_VAR 0 1
8351: NOT
8352: PUSH
8353: LD_VAR 0 2
8357: NOT
8358: OR
8359: PUSH
8360: LD_VAR 0 3
8364: NOT
8365: OR
8366: PUSH
8367: LD_VAR 0 2
8371: PUSH
8372: LD_VAR 0 1
8376: GREATER
8377: OR
8378: PUSH
8379: LD_VAR 0 3
8383: PUSH
8384: LD_VAR 0 1
8388: GREATER
8389: OR
8390: IFFALSE 8394
// exit ;
8392: GO 8690
// if direction then
8394: LD_VAR 0 4
8398: IFFALSE 8462
// begin d := 1 ;
8400: LD_ADDR_VAR 0 9
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// if i_from > i_to then
8408: LD_VAR 0 2
8412: PUSH
8413: LD_VAR 0 3
8417: GREATER
8418: IFFALSE 8444
// length := ( array - i_from ) + i_to else
8420: LD_ADDR_VAR 0 11
8424: PUSH
8425: LD_VAR 0 1
8429: PUSH
8430: LD_VAR 0 2
8434: MINUS
8435: PUSH
8436: LD_VAR 0 3
8440: PLUS
8441: ST_TO_ADDR
8442: GO 8460
// length := i_to - i_from ;
8444: LD_ADDR_VAR 0 11
8448: PUSH
8449: LD_VAR 0 3
8453: PUSH
8454: LD_VAR 0 2
8458: MINUS
8459: ST_TO_ADDR
// end else
8460: GO 8523
// begin d := - 1 ;
8462: LD_ADDR_VAR 0 9
8466: PUSH
8467: LD_INT 1
8469: NEG
8470: ST_TO_ADDR
// if i_from > i_to then
8471: LD_VAR 0 2
8475: PUSH
8476: LD_VAR 0 3
8480: GREATER
8481: IFFALSE 8501
// length := i_from - i_to else
8483: LD_ADDR_VAR 0 11
8487: PUSH
8488: LD_VAR 0 2
8492: PUSH
8493: LD_VAR 0 3
8497: MINUS
8498: ST_TO_ADDR
8499: GO 8523
// length := ( array - i_to ) + i_from ;
8501: LD_ADDR_VAR 0 11
8505: PUSH
8506: LD_VAR 0 1
8510: PUSH
8511: LD_VAR 0 3
8515: MINUS
8516: PUSH
8517: LD_VAR 0 2
8521: PLUS
8522: ST_TO_ADDR
// end ; if not length then
8523: LD_VAR 0 11
8527: NOT
8528: IFFALSE 8532
// exit ;
8530: GO 8690
// tmp := array ;
8532: LD_ADDR_VAR 0 10
8536: PUSH
8537: LD_VAR 0 1
8541: ST_TO_ADDR
// for i = 1 to length do
8542: LD_ADDR_VAR 0 6
8546: PUSH
8547: DOUBLE
8548: LD_INT 1
8550: DEC
8551: ST_TO_ADDR
8552: LD_VAR 0 11
8556: PUSH
8557: FOR_TO
8558: IFFALSE 8678
// begin for j = 1 to array do
8560: LD_ADDR_VAR 0 7
8564: PUSH
8565: DOUBLE
8566: LD_INT 1
8568: DEC
8569: ST_TO_ADDR
8570: LD_VAR 0 1
8574: PUSH
8575: FOR_TO
8576: IFFALSE 8664
// begin k := j + d ;
8578: LD_ADDR_VAR 0 8
8582: PUSH
8583: LD_VAR 0 7
8587: PUSH
8588: LD_VAR 0 9
8592: PLUS
8593: ST_TO_ADDR
// if k > array then
8594: LD_VAR 0 8
8598: PUSH
8599: LD_VAR 0 1
8603: GREATER
8604: IFFALSE 8614
// k := 1 ;
8606: LD_ADDR_VAR 0 8
8610: PUSH
8611: LD_INT 1
8613: ST_TO_ADDR
// if not k then
8614: LD_VAR 0 8
8618: NOT
8619: IFFALSE 8631
// k := array ;
8621: LD_ADDR_VAR 0 8
8625: PUSH
8626: LD_VAR 0 1
8630: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8631: LD_ADDR_VAR 0 10
8635: PUSH
8636: LD_VAR 0 10
8640: PPUSH
8641: LD_VAR 0 8
8645: PPUSH
8646: LD_VAR 0 1
8650: PUSH
8651: LD_VAR 0 7
8655: ARRAY
8656: PPUSH
8657: CALL_OW 1
8661: ST_TO_ADDR
// end ;
8662: GO 8575
8664: POP
8665: POP
// array := tmp ;
8666: LD_ADDR_VAR 0 1
8670: PUSH
8671: LD_VAR 0 10
8675: ST_TO_ADDR
// end ;
8676: GO 8557
8678: POP
8679: POP
// result := array ;
8680: LD_ADDR_VAR 0 5
8684: PUSH
8685: LD_VAR 0 1
8689: ST_TO_ADDR
// end ;
8690: LD_VAR 0 5
8694: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8695: LD_INT 0
8697: PPUSH
8698: PPUSH
// result := 0 ;
8699: LD_ADDR_VAR 0 3
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// if not array or not value in array then
8707: LD_VAR 0 1
8711: NOT
8712: PUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 1
8722: IN
8723: NOT
8724: OR
8725: IFFALSE 8729
// exit ;
8727: GO 8783
// for i = 1 to array do
8729: LD_ADDR_VAR 0 4
8733: PUSH
8734: DOUBLE
8735: LD_INT 1
8737: DEC
8738: ST_TO_ADDR
8739: LD_VAR 0 1
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8781
// if value = array [ i ] then
8747: LD_VAR 0 2
8751: PUSH
8752: LD_VAR 0 1
8756: PUSH
8757: LD_VAR 0 4
8761: ARRAY
8762: EQUAL
8763: IFFALSE 8779
// begin result := i ;
8765: LD_ADDR_VAR 0 3
8769: PUSH
8770: LD_VAR 0 4
8774: ST_TO_ADDR
// exit ;
8775: POP
8776: POP
8777: GO 8783
// end ;
8779: GO 8744
8781: POP
8782: POP
// end ;
8783: LD_VAR 0 3
8787: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8788: LD_INT 0
8790: PPUSH
// vc_chassis := chassis ;
8791: LD_ADDR_OWVAR 37
8795: PUSH
8796: LD_VAR 0 1
8800: ST_TO_ADDR
// vc_engine := engine ;
8801: LD_ADDR_OWVAR 39
8805: PUSH
8806: LD_VAR 0 2
8810: ST_TO_ADDR
// vc_control := control ;
8811: LD_ADDR_OWVAR 38
8815: PUSH
8816: LD_VAR 0 3
8820: ST_TO_ADDR
// vc_weapon := weapon ;
8821: LD_ADDR_OWVAR 40
8825: PUSH
8826: LD_VAR 0 4
8830: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8831: LD_ADDR_OWVAR 41
8835: PUSH
8836: LD_VAR 0 5
8840: ST_TO_ADDR
// end ;
8841: LD_VAR 0 6
8845: RET
// export function WantPlant ( unit ) ; var task ; begin
8846: LD_INT 0
8848: PPUSH
8849: PPUSH
// result := false ;
8850: LD_ADDR_VAR 0 2
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8858: LD_ADDR_VAR 0 3
8862: PUSH
8863: LD_VAR 0 1
8867: PPUSH
8868: CALL_OW 437
8872: ST_TO_ADDR
// if task then
8873: LD_VAR 0 3
8877: IFFALSE 8905
// if task [ 1 ] [ 1 ] = p then
8879: LD_VAR 0 3
8883: PUSH
8884: LD_INT 1
8886: ARRAY
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: PUSH
8892: LD_STRING p
8894: EQUAL
8895: IFFALSE 8905
// result := true ;
8897: LD_ADDR_VAR 0 2
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// end ;
8905: LD_VAR 0 2
8909: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8910: LD_INT 0
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
// if pos < 1 then
8916: LD_VAR 0 2
8920: PUSH
8921: LD_INT 1
8923: LESS
8924: IFFALSE 8928
// exit ;
8926: GO 9231
// if pos = 1 then
8928: LD_VAR 0 2
8932: PUSH
8933: LD_INT 1
8935: EQUAL
8936: IFFALSE 8969
// result := Replace ( arr , pos [ 1 ] , value ) else
8938: LD_ADDR_VAR 0 4
8942: PUSH
8943: LD_VAR 0 1
8947: PPUSH
8948: LD_VAR 0 2
8952: PUSH
8953: LD_INT 1
8955: ARRAY
8956: PPUSH
8957: LD_VAR 0 3
8961: PPUSH
8962: CALL_OW 1
8966: ST_TO_ADDR
8967: GO 9231
// begin tmp := arr ;
8969: LD_ADDR_VAR 0 6
8973: PUSH
8974: LD_VAR 0 1
8978: ST_TO_ADDR
// s_arr := [ tmp ] ;
8979: LD_ADDR_VAR 0 7
8983: PUSH
8984: LD_VAR 0 6
8988: PUSH
8989: EMPTY
8990: LIST
8991: ST_TO_ADDR
// for i = 1 to pos - 1 do
8992: LD_ADDR_VAR 0 5
8996: PUSH
8997: DOUBLE
8998: LD_INT 1
9000: DEC
9001: ST_TO_ADDR
9002: LD_VAR 0 2
9006: PUSH
9007: LD_INT 1
9009: MINUS
9010: PUSH
9011: FOR_TO
9012: IFFALSE 9057
// begin tmp := tmp [ pos [ i ] ] ;
9014: LD_ADDR_VAR 0 6
9018: PUSH
9019: LD_VAR 0 6
9023: PUSH
9024: LD_VAR 0 2
9028: PUSH
9029: LD_VAR 0 5
9033: ARRAY
9034: ARRAY
9035: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9036: LD_ADDR_VAR 0 7
9040: PUSH
9041: LD_VAR 0 7
9045: PUSH
9046: LD_VAR 0 6
9050: PUSH
9051: EMPTY
9052: LIST
9053: ADD
9054: ST_TO_ADDR
// end ;
9055: GO 9011
9057: POP
9058: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9059: LD_ADDR_VAR 0 6
9063: PUSH
9064: LD_VAR 0 6
9068: PPUSH
9069: LD_VAR 0 2
9073: PUSH
9074: LD_VAR 0 2
9078: ARRAY
9079: PPUSH
9080: LD_VAR 0 3
9084: PPUSH
9085: CALL_OW 1
9089: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9090: LD_ADDR_VAR 0 7
9094: PUSH
9095: LD_VAR 0 7
9099: PPUSH
9100: LD_VAR 0 7
9104: PPUSH
9105: LD_VAR 0 6
9109: PPUSH
9110: CALL_OW 1
9114: ST_TO_ADDR
// for i = s_arr downto 2 do
9115: LD_ADDR_VAR 0 5
9119: PUSH
9120: DOUBLE
9121: LD_VAR 0 7
9125: INC
9126: ST_TO_ADDR
9127: LD_INT 2
9129: PUSH
9130: FOR_DOWNTO
9131: IFFALSE 9215
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9133: LD_ADDR_VAR 0 6
9137: PUSH
9138: LD_VAR 0 7
9142: PUSH
9143: LD_VAR 0 5
9147: PUSH
9148: LD_INT 1
9150: MINUS
9151: ARRAY
9152: PPUSH
9153: LD_VAR 0 2
9157: PUSH
9158: LD_VAR 0 5
9162: PUSH
9163: LD_INT 1
9165: MINUS
9166: ARRAY
9167: PPUSH
9168: LD_VAR 0 7
9172: PUSH
9173: LD_VAR 0 5
9177: ARRAY
9178: PPUSH
9179: CALL_OW 1
9183: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9184: LD_ADDR_VAR 0 7
9188: PUSH
9189: LD_VAR 0 7
9193: PPUSH
9194: LD_VAR 0 5
9198: PUSH
9199: LD_INT 1
9201: MINUS
9202: PPUSH
9203: LD_VAR 0 6
9207: PPUSH
9208: CALL_OW 1
9212: ST_TO_ADDR
// end ;
9213: GO 9130
9215: POP
9216: POP
// result := s_arr [ 1 ] ;
9217: LD_ADDR_VAR 0 4
9221: PUSH
9222: LD_VAR 0 7
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: ST_TO_ADDR
// end ; end ;
9231: LD_VAR 0 4
9235: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
// if not list then
9240: LD_VAR 0 1
9244: NOT
9245: IFFALSE 9249
// exit ;
9247: GO 9340
// i := list [ pos1 ] ;
9249: LD_ADDR_VAR 0 5
9253: PUSH
9254: LD_VAR 0 1
9258: PUSH
9259: LD_VAR 0 2
9263: ARRAY
9264: ST_TO_ADDR
// if not i then
9265: LD_VAR 0 5
9269: NOT
9270: IFFALSE 9274
// exit ;
9272: GO 9340
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9274: LD_ADDR_VAR 0 1
9278: PUSH
9279: LD_VAR 0 1
9283: PPUSH
9284: LD_VAR 0 2
9288: PPUSH
9289: LD_VAR 0 1
9293: PUSH
9294: LD_VAR 0 3
9298: ARRAY
9299: PPUSH
9300: CALL_OW 1
9304: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9305: LD_ADDR_VAR 0 1
9309: PUSH
9310: LD_VAR 0 1
9314: PPUSH
9315: LD_VAR 0 3
9319: PPUSH
9320: LD_VAR 0 5
9324: PPUSH
9325: CALL_OW 1
9329: ST_TO_ADDR
// result := list ;
9330: LD_ADDR_VAR 0 4
9334: PUSH
9335: LD_VAR 0 1
9339: ST_TO_ADDR
// end ;
9340: LD_VAR 0 4
9344: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9345: LD_INT 0
9347: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9348: LD_ADDR_VAR 0 5
9352: PUSH
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 250
9362: PPUSH
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 251
9372: PPUSH
9373: LD_VAR 0 2
9377: PPUSH
9378: LD_VAR 0 3
9382: PPUSH
9383: LD_VAR 0 4
9387: PPUSH
9388: CALL 9398 0 5
9392: ST_TO_ADDR
// end ;
9393: LD_VAR 0 5
9397: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9398: LD_INT 0
9400: PPUSH
9401: PPUSH
9402: PPUSH
9403: PPUSH
// if not list then
9404: LD_VAR 0 3
9408: NOT
9409: IFFALSE 9413
// exit ;
9411: GO 9801
// result := [ ] ;
9413: LD_ADDR_VAR 0 6
9417: PUSH
9418: EMPTY
9419: ST_TO_ADDR
// for i in list do
9420: LD_ADDR_VAR 0 7
9424: PUSH
9425: LD_VAR 0 3
9429: PUSH
9430: FOR_IN
9431: IFFALSE 9633
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9433: LD_ADDR_VAR 0 9
9437: PUSH
9438: LD_VAR 0 7
9442: PPUSH
9443: LD_VAR 0 1
9447: PPUSH
9448: LD_VAR 0 2
9452: PPUSH
9453: CALL_OW 297
9457: ST_TO_ADDR
// if not result then
9458: LD_VAR 0 6
9462: NOT
9463: IFFALSE 9489
// result := [ [ i , tmp ] ] else
9465: LD_ADDR_VAR 0 6
9469: PUSH
9470: LD_VAR 0 7
9474: PUSH
9475: LD_VAR 0 9
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: ST_TO_ADDR
9487: GO 9631
// begin if result [ result ] [ 2 ] < tmp then
9489: LD_VAR 0 6
9493: PUSH
9494: LD_VAR 0 6
9498: ARRAY
9499: PUSH
9500: LD_INT 2
9502: ARRAY
9503: PUSH
9504: LD_VAR 0 9
9508: LESS
9509: IFFALSE 9551
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9511: LD_ADDR_VAR 0 6
9515: PUSH
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_VAR 0 6
9525: PUSH
9526: LD_INT 1
9528: PLUS
9529: PPUSH
9530: LD_VAR 0 7
9534: PUSH
9535: LD_VAR 0 9
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PPUSH
9544: CALL_OW 2
9548: ST_TO_ADDR
9549: GO 9631
// for j = 1 to result do
9551: LD_ADDR_VAR 0 8
9555: PUSH
9556: DOUBLE
9557: LD_INT 1
9559: DEC
9560: ST_TO_ADDR
9561: LD_VAR 0 6
9565: PUSH
9566: FOR_TO
9567: IFFALSE 9629
// begin if tmp < result [ j ] [ 2 ] then
9569: LD_VAR 0 9
9573: PUSH
9574: LD_VAR 0 6
9578: PUSH
9579: LD_VAR 0 8
9583: ARRAY
9584: PUSH
9585: LD_INT 2
9587: ARRAY
9588: LESS
9589: IFFALSE 9627
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9591: LD_ADDR_VAR 0 6
9595: PUSH
9596: LD_VAR 0 6
9600: PPUSH
9601: LD_VAR 0 8
9605: PPUSH
9606: LD_VAR 0 7
9610: PUSH
9611: LD_VAR 0 9
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 2
9624: ST_TO_ADDR
// break ;
9625: GO 9629
// end ; end ;
9627: GO 9566
9629: POP
9630: POP
// end ; end ;
9631: GO 9430
9633: POP
9634: POP
// if result and not asc then
9635: LD_VAR 0 6
9639: PUSH
9640: LD_VAR 0 4
9644: NOT
9645: AND
9646: IFFALSE 9721
// begin tmp := result ;
9648: LD_ADDR_VAR 0 9
9652: PUSH
9653: LD_VAR 0 6
9657: ST_TO_ADDR
// for i = tmp downto 1 do
9658: LD_ADDR_VAR 0 7
9662: PUSH
9663: DOUBLE
9664: LD_VAR 0 9
9668: INC
9669: ST_TO_ADDR
9670: LD_INT 1
9672: PUSH
9673: FOR_DOWNTO
9674: IFFALSE 9719
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9676: LD_ADDR_VAR 0 6
9680: PUSH
9681: LD_VAR 0 6
9685: PPUSH
9686: LD_VAR 0 9
9690: PUSH
9691: LD_VAR 0 7
9695: MINUS
9696: PUSH
9697: LD_INT 1
9699: PLUS
9700: PPUSH
9701: LD_VAR 0 9
9705: PUSH
9706: LD_VAR 0 7
9710: ARRAY
9711: PPUSH
9712: CALL_OW 1
9716: ST_TO_ADDR
9717: GO 9673
9719: POP
9720: POP
// end ; tmp := [ ] ;
9721: LD_ADDR_VAR 0 9
9725: PUSH
9726: EMPTY
9727: ST_TO_ADDR
// if mode then
9728: LD_VAR 0 5
9732: IFFALSE 9801
// begin for i = 1 to result do
9734: LD_ADDR_VAR 0 7
9738: PUSH
9739: DOUBLE
9740: LD_INT 1
9742: DEC
9743: ST_TO_ADDR
9744: LD_VAR 0 6
9748: PUSH
9749: FOR_TO
9750: IFFALSE 9789
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9752: LD_ADDR_VAR 0 9
9756: PUSH
9757: LD_VAR 0 9
9761: PPUSH
9762: LD_VAR 0 7
9766: PPUSH
9767: LD_VAR 0 6
9771: PUSH
9772: LD_VAR 0 7
9776: ARRAY
9777: PUSH
9778: LD_INT 1
9780: ARRAY
9781: PPUSH
9782: CALL_OW 1
9786: ST_TO_ADDR
9787: GO 9749
9789: POP
9790: POP
// result := tmp ;
9791: LD_ADDR_VAR 0 6
9795: PUSH
9796: LD_VAR 0 9
9800: ST_TO_ADDR
// end ; end ;
9801: LD_VAR 0 6
9805: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9806: LD_INT 0
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9814: LD_ADDR_VAR 0 5
9818: PUSH
9819: LD_INT 0
9821: PUSH
9822: LD_INT 0
9824: PUSH
9825: LD_INT 0
9827: PUSH
9828: EMPTY
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: ST_TO_ADDR
// if not x or not y then
9836: LD_VAR 0 2
9840: NOT
9841: PUSH
9842: LD_VAR 0 3
9846: NOT
9847: OR
9848: IFFALSE 9852
// exit ;
9850: GO 11498
// if not range then
9852: LD_VAR 0 4
9856: NOT
9857: IFFALSE 9867
// range := 10 ;
9859: LD_ADDR_VAR 0 4
9863: PUSH
9864: LD_INT 10
9866: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9867: LD_ADDR_VAR 0 8
9871: PUSH
9872: LD_INT 81
9874: PUSH
9875: LD_VAR 0 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 92
9886: PUSH
9887: LD_VAR 0 2
9891: PUSH
9892: LD_VAR 0 3
9896: PUSH
9897: LD_VAR 0 4
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 3
9910: PUSH
9911: LD_INT 21
9913: PUSH
9914: LD_INT 3
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: PPUSH
9930: CALL_OW 69
9934: ST_TO_ADDR
// if not tmp then
9935: LD_VAR 0 8
9939: NOT
9940: IFFALSE 9944
// exit ;
9942: GO 11498
// for i in tmp do
9944: LD_ADDR_VAR 0 6
9948: PUSH
9949: LD_VAR 0 8
9953: PUSH
9954: FOR_IN
9955: IFFALSE 11473
// begin points := [ 0 , 0 , 0 ] ;
9957: LD_ADDR_VAR 0 9
9961: PUSH
9962: LD_INT 0
9964: PUSH
9965: LD_INT 0
9967: PUSH
9968: LD_INT 0
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: ST_TO_ADDR
// bpoints := 1 ;
9976: LD_ADDR_VAR 0 10
9980: PUSH
9981: LD_INT 1
9983: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9984: LD_VAR 0 6
9988: PPUSH
9989: CALL_OW 247
9993: PUSH
9994: LD_INT 1
9996: DOUBLE
9997: EQUAL
9998: IFTRUE 10002
10000: GO 10580
10002: POP
// begin if GetClass ( i ) = 1 then
10003: LD_VAR 0 6
10007: PPUSH
10008: CALL_OW 257
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: IFFALSE 10037
// points := [ 10 , 5 , 3 ] ;
10018: LD_ADDR_VAR 0 9
10022: PUSH
10023: LD_INT 10
10025: PUSH
10026: LD_INT 5
10028: PUSH
10029: LD_INT 3
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10037: LD_VAR 0 6
10041: PPUSH
10042: CALL_OW 257
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: LD_INT 3
10052: PUSH
10053: LD_INT 4
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: IN
10061: IFFALSE 10082
// points := [ 3 , 2 , 1 ] ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 3
10070: PUSH
10071: LD_INT 2
10073: PUSH
10074: LD_INT 1
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10082: LD_VAR 0 6
10086: PPUSH
10087: CALL_OW 257
10091: PUSH
10092: LD_INT 5
10094: EQUAL
10095: IFFALSE 10116
// points := [ 130 , 5 , 2 ] ;
10097: LD_ADDR_VAR 0 9
10101: PUSH
10102: LD_INT 130
10104: PUSH
10105: LD_INT 5
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: LIST
10115: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10116: LD_VAR 0 6
10120: PPUSH
10121: CALL_OW 257
10125: PUSH
10126: LD_INT 8
10128: EQUAL
10129: IFFALSE 10150
// points := [ 35 , 35 , 30 ] ;
10131: LD_ADDR_VAR 0 9
10135: PUSH
10136: LD_INT 35
10138: PUSH
10139: LD_INT 35
10141: PUSH
10142: LD_INT 30
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: LIST
10149: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL_OW 257
10159: PUSH
10160: LD_INT 9
10162: EQUAL
10163: IFFALSE 10184
// points := [ 20 , 55 , 40 ] ;
10165: LD_ADDR_VAR 0 9
10169: PUSH
10170: LD_INT 20
10172: PUSH
10173: LD_INT 55
10175: PUSH
10176: LD_INT 40
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10184: LD_VAR 0 6
10188: PPUSH
10189: CALL_OW 257
10193: PUSH
10194: LD_INT 12
10196: PUSH
10197: LD_INT 16
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: IN
10204: IFFALSE 10225
// points := [ 5 , 3 , 2 ] ;
10206: LD_ADDR_VAR 0 9
10210: PUSH
10211: LD_INT 5
10213: PUSH
10214: LD_INT 3
10216: PUSH
10217: LD_INT 2
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10225: LD_VAR 0 6
10229: PPUSH
10230: CALL_OW 257
10234: PUSH
10235: LD_INT 17
10237: EQUAL
10238: IFFALSE 10259
// points := [ 100 , 50 , 75 ] ;
10240: LD_ADDR_VAR 0 9
10244: PUSH
10245: LD_INT 100
10247: PUSH
10248: LD_INT 50
10250: PUSH
10251: LD_INT 75
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10259: LD_VAR 0 6
10263: PPUSH
10264: CALL_OW 257
10268: PUSH
10269: LD_INT 15
10271: EQUAL
10272: IFFALSE 10293
// points := [ 10 , 5 , 3 ] ;
10274: LD_ADDR_VAR 0 9
10278: PUSH
10279: LD_INT 10
10281: PUSH
10282: LD_INT 5
10284: PUSH
10285: LD_INT 3
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10293: LD_VAR 0 6
10297: PPUSH
10298: CALL_OW 257
10302: PUSH
10303: LD_INT 14
10305: EQUAL
10306: IFFALSE 10327
// points := [ 10 , 0 , 0 ] ;
10308: LD_ADDR_VAR 0 9
10312: PUSH
10313: LD_INT 10
10315: PUSH
10316: LD_INT 0
10318: PUSH
10319: LD_INT 0
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10327: LD_VAR 0 6
10331: PPUSH
10332: CALL_OW 257
10336: PUSH
10337: LD_INT 11
10339: EQUAL
10340: IFFALSE 10361
// points := [ 30 , 10 , 5 ] ;
10342: LD_ADDR_VAR 0 9
10346: PUSH
10347: LD_INT 30
10349: PUSH
10350: LD_INT 10
10352: PUSH
10353: LD_INT 5
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_INT 5
10368: PPUSH
10369: CALL_OW 321
10373: PUSH
10374: LD_INT 2
10376: EQUAL
10377: IFFALSE 10394
// bpoints := bpoints * 1.8 ;
10379: LD_ADDR_VAR 0 10
10383: PUSH
10384: LD_VAR 0 10
10388: PUSH
10389: LD_REAL  1.80000000000000E+0000
10392: MUL
10393: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10394: LD_VAR 0 6
10398: PPUSH
10399: CALL_OW 257
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: LD_INT 3
10412: PUSH
10413: LD_INT 4
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: IN
10422: PUSH
10423: LD_VAR 0 1
10427: PPUSH
10428: LD_INT 51
10430: PPUSH
10431: CALL_OW 321
10435: PUSH
10436: LD_INT 2
10438: EQUAL
10439: AND
10440: IFFALSE 10457
// bpoints := bpoints * 1.2 ;
10442: LD_ADDR_VAR 0 10
10446: PUSH
10447: LD_VAR 0 10
10451: PUSH
10452: LD_REAL  1.20000000000000E+0000
10455: MUL
10456: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10457: LD_VAR 0 6
10461: PPUSH
10462: CALL_OW 257
10466: PUSH
10467: LD_INT 5
10469: PUSH
10470: LD_INT 7
10472: PUSH
10473: LD_INT 9
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: IN
10481: PUSH
10482: LD_VAR 0 1
10486: PPUSH
10487: LD_INT 52
10489: PPUSH
10490: CALL_OW 321
10494: PUSH
10495: LD_INT 2
10497: EQUAL
10498: AND
10499: IFFALSE 10516
// bpoints := bpoints * 1.5 ;
10501: LD_ADDR_VAR 0 10
10505: PUSH
10506: LD_VAR 0 10
10510: PUSH
10511: LD_REAL  1.50000000000000E+0000
10514: MUL
10515: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10516: LD_VAR 0 1
10520: PPUSH
10521: LD_INT 66
10523: PPUSH
10524: CALL_OW 321
10528: PUSH
10529: LD_INT 2
10531: EQUAL
10532: IFFALSE 10549
// bpoints := bpoints * 1.1 ;
10534: LD_ADDR_VAR 0 10
10538: PUSH
10539: LD_VAR 0 10
10543: PUSH
10544: LD_REAL  1.10000000000000E+0000
10547: MUL
10548: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10549: LD_ADDR_VAR 0 10
10553: PUSH
10554: LD_VAR 0 10
10558: PUSH
10559: LD_VAR 0 6
10563: PPUSH
10564: LD_INT 1
10566: PPUSH
10567: CALL_OW 259
10571: PUSH
10572: LD_REAL  1.15000000000000E+0000
10575: MUL
10576: MUL
10577: ST_TO_ADDR
// end ; unit_vehicle :
10578: GO 11402
10580: LD_INT 2
10582: DOUBLE
10583: EQUAL
10584: IFTRUE 10588
10586: GO 11390
10588: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10589: LD_VAR 0 6
10593: PPUSH
10594: CALL_OW 264
10598: PUSH
10599: LD_INT 2
10601: PUSH
10602: LD_INT 42
10604: PUSH
10605: LD_INT 24
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: LIST
10612: IN
10613: IFFALSE 10634
// points := [ 25 , 5 , 3 ] ;
10615: LD_ADDR_VAR 0 9
10619: PUSH
10620: LD_INT 25
10622: PUSH
10623: LD_INT 5
10625: PUSH
10626: LD_INT 3
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10634: LD_VAR 0 6
10638: PPUSH
10639: CALL_OW 264
10643: PUSH
10644: LD_INT 4
10646: PUSH
10647: LD_INT 43
10649: PUSH
10650: LD_INT 25
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: IN
10658: IFFALSE 10679
// points := [ 40 , 15 , 5 ] ;
10660: LD_ADDR_VAR 0 9
10664: PUSH
10665: LD_INT 40
10667: PUSH
10668: LD_INT 15
10670: PUSH
10671: LD_INT 5
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10679: LD_VAR 0 6
10683: PPUSH
10684: CALL_OW 264
10688: PUSH
10689: LD_INT 3
10691: PUSH
10692: LD_INT 23
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: IN
10699: IFFALSE 10720
// points := [ 7 , 25 , 8 ] ;
10701: LD_ADDR_VAR 0 9
10705: PUSH
10706: LD_INT 7
10708: PUSH
10709: LD_INT 25
10711: PUSH
10712: LD_INT 8
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10720: LD_VAR 0 6
10724: PPUSH
10725: CALL_OW 264
10729: PUSH
10730: LD_INT 5
10732: PUSH
10733: LD_INT 27
10735: PUSH
10736: LD_INT 44
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: IN
10744: IFFALSE 10765
// points := [ 14 , 50 , 16 ] ;
10746: LD_ADDR_VAR 0 9
10750: PUSH
10751: LD_INT 14
10753: PUSH
10754: LD_INT 50
10756: PUSH
10757: LD_INT 16
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10765: LD_VAR 0 6
10769: PPUSH
10770: CALL_OW 264
10774: PUSH
10775: LD_INT 6
10777: PUSH
10778: LD_INT 46
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: IN
10785: IFFALSE 10806
// points := [ 32 , 120 , 70 ] ;
10787: LD_ADDR_VAR 0 9
10791: PUSH
10792: LD_INT 32
10794: PUSH
10795: LD_INT 120
10797: PUSH
10798: LD_INT 70
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
10806: LD_VAR 0 6
10810: PPUSH
10811: CALL_OW 264
10815: PUSH
10816: LD_INT 7
10818: PUSH
10819: LD_INT 28
10821: PUSH
10822: LD_INT 45
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: IN
10830: IFFALSE 10851
// points := [ 35 , 20 , 45 ] ;
10832: LD_ADDR_VAR 0 9
10836: PUSH
10837: LD_INT 35
10839: PUSH
10840: LD_INT 20
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10851: LD_VAR 0 6
10855: PPUSH
10856: CALL_OW 264
10860: PUSH
10861: LD_INT 47
10863: PUSH
10864: EMPTY
10865: LIST
10866: IN
10867: IFFALSE 10888
// points := [ 67 , 45 , 75 ] ;
10869: LD_ADDR_VAR 0 9
10873: PUSH
10874: LD_INT 67
10876: PUSH
10877: LD_INT 45
10879: PUSH
10880: LD_INT 75
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10888: LD_VAR 0 6
10892: PPUSH
10893: CALL_OW 264
10897: PUSH
10898: LD_INT 26
10900: PUSH
10901: EMPTY
10902: LIST
10903: IN
10904: IFFALSE 10925
// points := [ 120 , 30 , 80 ] ;
10906: LD_ADDR_VAR 0 9
10910: PUSH
10911: LD_INT 120
10913: PUSH
10914: LD_INT 30
10916: PUSH
10917: LD_INT 80
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10925: LD_VAR 0 6
10929: PPUSH
10930: CALL_OW 264
10934: PUSH
10935: LD_INT 22
10937: PUSH
10938: EMPTY
10939: LIST
10940: IN
10941: IFFALSE 10962
// points := [ 40 , 1 , 1 ] ;
10943: LD_ADDR_VAR 0 9
10947: PUSH
10948: LD_INT 40
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: LD_INT 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10962: LD_VAR 0 6
10966: PPUSH
10967: CALL_OW 264
10971: PUSH
10972: LD_INT 29
10974: PUSH
10975: EMPTY
10976: LIST
10977: IN
10978: IFFALSE 10999
// points := [ 70 , 200 , 400 ] ;
10980: LD_ADDR_VAR 0 9
10984: PUSH
10985: LD_INT 70
10987: PUSH
10988: LD_INT 200
10990: PUSH
10991: LD_INT 400
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10999: LD_VAR 0 6
11003: PPUSH
11004: CALL_OW 264
11008: PUSH
11009: LD_INT 14
11011: PUSH
11012: LD_INT 53
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: IN
11019: IFFALSE 11040
// points := [ 40 , 10 , 20 ] ;
11021: LD_ADDR_VAR 0 9
11025: PUSH
11026: LD_INT 40
11028: PUSH
11029: LD_INT 10
11031: PUSH
11032: LD_INT 20
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11040: LD_VAR 0 6
11044: PPUSH
11045: CALL_OW 264
11049: PUSH
11050: LD_INT 9
11052: PUSH
11053: EMPTY
11054: LIST
11055: IN
11056: IFFALSE 11077
// points := [ 5 , 70 , 20 ] ;
11058: LD_ADDR_VAR 0 9
11062: PUSH
11063: LD_INT 5
11065: PUSH
11066: LD_INT 70
11068: PUSH
11069: LD_INT 20
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11077: LD_VAR 0 6
11081: PPUSH
11082: CALL_OW 264
11086: PUSH
11087: LD_INT 10
11089: PUSH
11090: EMPTY
11091: LIST
11092: IN
11093: IFFALSE 11114
// points := [ 35 , 110 , 70 ] ;
11095: LD_ADDR_VAR 0 9
11099: PUSH
11100: LD_INT 35
11102: PUSH
11103: LD_INT 110
11105: PUSH
11106: LD_INT 70
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11114: LD_VAR 0 6
11118: PPUSH
11119: CALL_OW 265
11123: PUSH
11124: LD_INT 25
11126: EQUAL
11127: IFFALSE 11148
// points := [ 80 , 65 , 100 ] ;
11129: LD_ADDR_VAR 0 9
11133: PUSH
11134: LD_INT 80
11136: PUSH
11137: LD_INT 65
11139: PUSH
11140: LD_INT 100
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11148: LD_VAR 0 6
11152: PPUSH
11153: CALL_OW 263
11157: PUSH
11158: LD_INT 1
11160: EQUAL
11161: IFFALSE 11196
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11163: LD_ADDR_VAR 0 10
11167: PUSH
11168: LD_VAR 0 10
11172: PUSH
11173: LD_VAR 0 6
11177: PPUSH
11178: CALL_OW 311
11182: PPUSH
11183: LD_INT 3
11185: PPUSH
11186: CALL_OW 259
11190: PUSH
11191: LD_INT 4
11193: MUL
11194: MUL
11195: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11196: LD_VAR 0 6
11200: PPUSH
11201: CALL_OW 263
11205: PUSH
11206: LD_INT 2
11208: EQUAL
11209: IFFALSE 11260
// begin j := IsControledBy ( i ) ;
11211: LD_ADDR_VAR 0 7
11215: PUSH
11216: LD_VAR 0 6
11220: PPUSH
11221: CALL_OW 312
11225: ST_TO_ADDR
// if j then
11226: LD_VAR 0 7
11230: IFFALSE 11260
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11232: LD_ADDR_VAR 0 10
11236: PUSH
11237: LD_VAR 0 10
11241: PUSH
11242: LD_VAR 0 7
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: CALL_OW 259
11254: PUSH
11255: LD_INT 3
11257: MUL
11258: MUL
11259: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11260: LD_VAR 0 6
11264: PPUSH
11265: CALL_OW 264
11269: PUSH
11270: LD_INT 5
11272: PUSH
11273: LD_INT 6
11275: PUSH
11276: LD_INT 46
11278: PUSH
11279: LD_INT 44
11281: PUSH
11282: LD_INT 47
11284: PUSH
11285: LD_INT 45
11287: PUSH
11288: LD_INT 28
11290: PUSH
11291: LD_INT 7
11293: PUSH
11294: LD_INT 27
11296: PUSH
11297: LD_INT 29
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: IN
11312: PUSH
11313: LD_VAR 0 1
11317: PPUSH
11318: LD_INT 52
11320: PPUSH
11321: CALL_OW 321
11325: PUSH
11326: LD_INT 2
11328: EQUAL
11329: AND
11330: IFFALSE 11347
// bpoints := bpoints * 1.2 ;
11332: LD_ADDR_VAR 0 10
11336: PUSH
11337: LD_VAR 0 10
11341: PUSH
11342: LD_REAL  1.20000000000000E+0000
11345: MUL
11346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11347: LD_VAR 0 6
11351: PPUSH
11352: CALL_OW 264
11356: PUSH
11357: LD_INT 6
11359: PUSH
11360: LD_INT 46
11362: PUSH
11363: LD_INT 47
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: IN
11371: IFFALSE 11388
// bpoints := bpoints * 1.2 ;
11373: LD_ADDR_VAR 0 10
11377: PUSH
11378: LD_VAR 0 10
11382: PUSH
11383: LD_REAL  1.20000000000000E+0000
11386: MUL
11387: ST_TO_ADDR
// end ; unit_building :
11388: GO 11402
11390: LD_INT 3
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11401
11398: POP
// ; end ;
11399: GO 11402
11401: POP
// for j = 1 to 3 do
11402: LD_ADDR_VAR 0 7
11406: PUSH
11407: DOUBLE
11408: LD_INT 1
11410: DEC
11411: ST_TO_ADDR
11412: LD_INT 3
11414: PUSH
11415: FOR_TO
11416: IFFALSE 11469
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11418: LD_ADDR_VAR 0 5
11422: PUSH
11423: LD_VAR 0 5
11427: PPUSH
11428: LD_VAR 0 7
11432: PPUSH
11433: LD_VAR 0 5
11437: PUSH
11438: LD_VAR 0 7
11442: ARRAY
11443: PUSH
11444: LD_VAR 0 9
11448: PUSH
11449: LD_VAR 0 7
11453: ARRAY
11454: PUSH
11455: LD_VAR 0 10
11459: MUL
11460: PLUS
11461: PPUSH
11462: CALL_OW 1
11466: ST_TO_ADDR
11467: GO 11415
11469: POP
11470: POP
// end ;
11471: GO 9954
11473: POP
11474: POP
// result := Replace ( result , 4 , tmp ) ;
11475: LD_ADDR_VAR 0 5
11479: PUSH
11480: LD_VAR 0 5
11484: PPUSH
11485: LD_INT 4
11487: PPUSH
11488: LD_VAR 0 8
11492: PPUSH
11493: CALL_OW 1
11497: ST_TO_ADDR
// end ;
11498: LD_VAR 0 5
11502: RET
// export function DangerAtRange ( unit , range ) ; begin
11503: LD_INT 0
11505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11506: LD_ADDR_VAR 0 3
11510: PUSH
11511: LD_VAR 0 1
11515: PPUSH
11516: CALL_OW 255
11520: PPUSH
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 250
11530: PPUSH
11531: LD_VAR 0 1
11535: PPUSH
11536: CALL_OW 251
11540: PPUSH
11541: LD_VAR 0 2
11545: PPUSH
11546: CALL 9806 0 4
11550: ST_TO_ADDR
// end ;
11551: LD_VAR 0 3
11555: RET
// export function DangerInArea ( side , area ) ; begin
11556: LD_INT 0
11558: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11559: LD_ADDR_VAR 0 3
11563: PUSH
11564: LD_VAR 0 2
11568: PPUSH
11569: LD_INT 81
11571: PUSH
11572: LD_VAR 0 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 70
11585: ST_TO_ADDR
// end ;
11586: LD_VAR 0 3
11590: RET
// export function IsExtension ( b ) ; begin
11591: LD_INT 0
11593: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_VAR 0 1
11603: PUSH
11604: LD_INT 23
11606: PUSH
11607: LD_INT 20
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 17
11615: PUSH
11616: LD_INT 24
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 19
11624: PUSH
11625: LD_INT 16
11627: PUSH
11628: LD_INT 25
11630: PUSH
11631: LD_INT 18
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: IN
11646: ST_TO_ADDR
// end ;
11647: LD_VAR 0 2
11651: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
11652: LD_INT 0
11654: PPUSH
11655: PPUSH
11656: PPUSH
// result := [ ] ;
11657: LD_ADDR_VAR 0 3
11661: PUSH
11662: EMPTY
11663: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11664: LD_ADDR_VAR 0 4
11668: PUSH
11669: LD_VAR 0 2
11673: PPUSH
11674: LD_INT 21
11676: PUSH
11677: LD_INT 3
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PPUSH
11684: CALL_OW 70
11688: ST_TO_ADDR
// if not tmp then
11689: LD_VAR 0 4
11693: NOT
11694: IFFALSE 11698
// exit ;
11696: GO 11756
// for i in tmp do
11698: LD_ADDR_VAR 0 5
11702: PUSH
11703: LD_VAR 0 4
11707: PUSH
11708: FOR_IN
11709: IFFALSE 11744
// if GetBase ( i ) <> base then
11711: LD_VAR 0 5
11715: PPUSH
11716: CALL_OW 274
11720: PUSH
11721: LD_VAR 0 1
11725: NONEQUAL
11726: IFFALSE 11742
// ComLinkToBase ( base , i ) ;
11728: LD_VAR 0 1
11732: PPUSH
11733: LD_VAR 0 5
11737: PPUSH
11738: CALL_OW 169
11742: GO 11708
11744: POP
11745: POP
// result := tmp ;
11746: LD_ADDR_VAR 0 3
11750: PUSH
11751: LD_VAR 0 4
11755: ST_TO_ADDR
// end ;
11756: LD_VAR 0 3
11760: RET
// export function ComComplete ( unit , b ) ; var i ; begin
11761: LD_INT 0
11763: PPUSH
11764: PPUSH
// if BuildingStatus ( b ) = bs_build then
11765: LD_VAR 0 2
11769: PPUSH
11770: CALL_OW 461
11774: PUSH
11775: LD_INT 1
11777: EQUAL
11778: IFFALSE 11838
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11780: LD_VAR 0 1
11784: PPUSH
11785: LD_STRING h
11787: PUSH
11788: LD_VAR 0 2
11792: PPUSH
11793: CALL_OW 250
11797: PUSH
11798: LD_VAR 0 2
11802: PPUSH
11803: CALL_OW 251
11807: PUSH
11808: LD_VAR 0 2
11812: PUSH
11813: LD_INT 0
11815: PUSH
11816: LD_INT 0
11818: PUSH
11819: LD_INT 0
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: PPUSH
11834: CALL_OW 446
// end ;
11838: LD_VAR 0 3
11842: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11843: LD_INT 0
11845: PPUSH
11846: PPUSH
11847: PPUSH
11848: PPUSH
11849: PPUSH
11850: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
11851: LD_VAR 0 1
11855: NOT
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 263
11866: PUSH
11867: LD_INT 2
11869: EQUAL
11870: NOT
11871: OR
11872: IFFALSE 11876
// exit ;
11874: GO 12192
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11876: LD_ADDR_VAR 0 6
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 1
11888: PPUSH
11889: CALL_OW 255
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 2
11900: PUSH
11901: LD_INT 30
11903: PUSH
11904: LD_INT 36
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 34
11913: PUSH
11914: LD_INT 31
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 6
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 12192
// result := [ ] ;
11944: LD_ADDR_VAR 0 2
11948: PUSH
11949: EMPTY
11950: ST_TO_ADDR
// for i in tmp do
11951: LD_ADDR_VAR 0 3
11955: PUSH
11956: LD_VAR 0 6
11960: PUSH
11961: FOR_IN
11962: IFFALSE 12033
// begin t := UnitsInside ( i ) ;
11964: LD_ADDR_VAR 0 4
11968: PUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: CALL_OW 313
11978: ST_TO_ADDR
// if t then
11979: LD_VAR 0 4
11983: IFFALSE 12031
// for j in t do
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_VAR 0 4
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12029
// result := Insert ( result , result + 1 , j ) ;
11998: LD_ADDR_VAR 0 2
12002: PUSH
12003: LD_VAR 0 2
12007: PPUSH
12008: LD_VAR 0 2
12012: PUSH
12013: LD_INT 1
12015: PLUS
12016: PPUSH
12017: LD_VAR 0 7
12021: PPUSH
12022: CALL_OW 2
12026: ST_TO_ADDR
12027: GO 11995
12029: POP
12030: POP
// end ;
12031: GO 11961
12033: POP
12034: POP
// if not result then
12035: LD_VAR 0 2
12039: NOT
12040: IFFALSE 12044
// exit ;
12042: GO 12192
// mech := result [ 1 ] ;
12044: LD_ADDR_VAR 0 5
12048: PUSH
12049: LD_VAR 0 2
12053: PUSH
12054: LD_INT 1
12056: ARRAY
12057: ST_TO_ADDR
// if result > 1 then
12058: LD_VAR 0 2
12062: PUSH
12063: LD_INT 1
12065: GREATER
12066: IFFALSE 12178
// for i = 2 to result do
12068: LD_ADDR_VAR 0 3
12072: PUSH
12073: DOUBLE
12074: LD_INT 2
12076: DEC
12077: ST_TO_ADDR
12078: LD_VAR 0 2
12082: PUSH
12083: FOR_TO
12084: IFFALSE 12176
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12086: LD_ADDR_VAR 0 4
12090: PUSH
12091: LD_VAR 0 2
12095: PUSH
12096: LD_VAR 0 3
12100: ARRAY
12101: PPUSH
12102: LD_INT 3
12104: PPUSH
12105: CALL_OW 259
12109: PUSH
12110: LD_VAR 0 2
12114: PUSH
12115: LD_VAR 0 3
12119: ARRAY
12120: PPUSH
12121: CALL_OW 432
12125: MINUS
12126: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12127: LD_VAR 0 4
12131: PUSH
12132: LD_VAR 0 5
12136: PPUSH
12137: LD_INT 3
12139: PPUSH
12140: CALL_OW 259
12144: PUSH
12145: LD_VAR 0 5
12149: PPUSH
12150: CALL_OW 432
12154: MINUS
12155: GREATEREQUAL
12156: IFFALSE 12174
// mech := result [ i ] ;
12158: LD_ADDR_VAR 0 5
12162: PUSH
12163: LD_VAR 0 2
12167: PUSH
12168: LD_VAR 0 3
12172: ARRAY
12173: ST_TO_ADDR
// end ;
12174: GO 12083
12176: POP
12177: POP
// ComLinkTo ( vehicle , mech ) ;
12178: LD_VAR 0 1
12182: PPUSH
12183: LD_VAR 0 5
12187: PPUSH
12188: CALL_OW 135
// end ;
12192: LD_VAR 0 2
12196: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12197: LD_INT 0
12199: PPUSH
12200: PPUSH
12201: PPUSH
12202: PPUSH
12203: PPUSH
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
12211: PPUSH
// result := [ ] ;
12212: LD_ADDR_VAR 0 7
12216: PUSH
12217: EMPTY
12218: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12219: LD_VAR 0 1
12223: PPUSH
12224: CALL_OW 266
12228: PUSH
12229: LD_INT 0
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: IN
12239: NOT
12240: IFFALSE 12244
// exit ;
12242: GO 13875
// if name then
12244: LD_VAR 0 3
12248: IFFALSE 12264
// SetBName ( base_dep , name ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_VAR 0 3
12259: PPUSH
12260: CALL_OW 500
// base := GetBase ( base_dep ) ;
12264: LD_ADDR_VAR 0 15
12268: PUSH
12269: LD_VAR 0 1
12273: PPUSH
12274: CALL_OW 274
12278: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12279: LD_ADDR_VAR 0 16
12283: PUSH
12284: LD_VAR 0 1
12288: PPUSH
12289: CALL_OW 255
12293: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12294: LD_ADDR_VAR 0 17
12298: PUSH
12299: LD_VAR 0 1
12303: PPUSH
12304: CALL_OW 248
12308: ST_TO_ADDR
// if sources then
12309: LD_VAR 0 5
12313: IFFALSE 12360
// for i = 1 to 3 do
12315: LD_ADDR_VAR 0 8
12319: PUSH
12320: DOUBLE
12321: LD_INT 1
12323: DEC
12324: ST_TO_ADDR
12325: LD_INT 3
12327: PUSH
12328: FOR_TO
12329: IFFALSE 12358
// AddResourceType ( base , i , sources [ i ] ) ;
12331: LD_VAR 0 15
12335: PPUSH
12336: LD_VAR 0 8
12340: PPUSH
12341: LD_VAR 0 5
12345: PUSH
12346: LD_VAR 0 8
12350: ARRAY
12351: PPUSH
12352: CALL_OW 276
12356: GO 12328
12358: POP
12359: POP
// buildings := GetBaseBuildings ( base , area ) ;
12360: LD_ADDR_VAR 0 18
12364: PUSH
12365: LD_VAR 0 15
12369: PPUSH
12370: LD_VAR 0 2
12374: PPUSH
12375: CALL 11652 0 2
12379: ST_TO_ADDR
// InitHc ;
12380: CALL_OW 19
// InitUc ;
12384: CALL_OW 18
// uc_side := side ;
12388: LD_ADDR_OWVAR 20
12392: PUSH
12393: LD_VAR 0 16
12397: ST_TO_ADDR
// uc_nation := nation ;
12398: LD_ADDR_OWVAR 21
12402: PUSH
12403: LD_VAR 0 17
12407: ST_TO_ADDR
// if buildings then
12408: LD_VAR 0 18
12412: IFFALSE 13734
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12414: LD_ADDR_VAR 0 19
12418: PUSH
12419: LD_VAR 0 18
12423: PPUSH
12424: LD_INT 2
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_INT 29
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 30
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: PPUSH
12452: CALL_OW 72
12456: ST_TO_ADDR
// if tmp then
12457: LD_VAR 0 19
12461: IFFALSE 12509
// for i in tmp do
12463: LD_ADDR_VAR 0 8
12467: PUSH
12468: LD_VAR 0 19
12472: PUSH
12473: FOR_IN
12474: IFFALSE 12507
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12476: LD_VAR 0 8
12480: PPUSH
12481: CALL_OW 250
12485: PPUSH
12486: LD_VAR 0 8
12490: PPUSH
12491: CALL_OW 251
12495: PPUSH
12496: LD_VAR 0 16
12500: PPUSH
12501: CALL_OW 441
12505: GO 12473
12507: POP
12508: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12509: LD_VAR 0 18
12513: PPUSH
12514: LD_INT 2
12516: PUSH
12517: LD_INT 30
12519: PUSH
12520: LD_INT 32
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 30
12529: PUSH
12530: LD_INT 33
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 72
12546: IFFALSE 12634
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12548: LD_ADDR_VAR 0 8
12552: PUSH
12553: LD_VAR 0 18
12557: PPUSH
12558: LD_INT 2
12560: PUSH
12561: LD_INT 30
12563: PUSH
12564: LD_INT 32
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 33
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 72
12590: PUSH
12591: FOR_IN
12592: IFFALSE 12632
// begin if not GetBWeapon ( i ) then
12594: LD_VAR 0 8
12598: PPUSH
12599: CALL_OW 269
12603: NOT
12604: IFFALSE 12630
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12606: LD_VAR 0 8
12610: PPUSH
12611: LD_VAR 0 8
12615: PPUSH
12616: LD_VAR 0 2
12620: PPUSH
12621: CALL 13880 0 2
12625: PPUSH
12626: CALL_OW 431
// end ;
12630: GO 12591
12632: POP
12633: POP
// end ; for i = 1 to personel do
12634: LD_ADDR_VAR 0 8
12638: PUSH
12639: DOUBLE
12640: LD_INT 1
12642: DEC
12643: ST_TO_ADDR
12644: LD_VAR 0 6
12648: PUSH
12649: FOR_TO
12650: IFFALSE 13714
// begin if i > 4 then
12652: LD_VAR 0 8
12656: PUSH
12657: LD_INT 4
12659: GREATER
12660: IFFALSE 12664
// break ;
12662: GO 13714
// case i of 1 :
12664: LD_VAR 0 8
12668: PUSH
12669: LD_INT 1
12671: DOUBLE
12672: EQUAL
12673: IFTRUE 12677
12675: GO 12757
12677: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12678: LD_ADDR_VAR 0 12
12682: PUSH
12683: LD_VAR 0 18
12687: PPUSH
12688: LD_INT 22
12690: PUSH
12691: LD_VAR 0 16
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 58
12702: PUSH
12703: EMPTY
12704: LIST
12705: PUSH
12706: LD_INT 2
12708: PUSH
12709: LD_INT 30
12711: PUSH
12712: LD_INT 32
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 30
12721: PUSH
12722: LD_INT 4
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 30
12731: PUSH
12732: LD_INT 5
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 72
12754: ST_TO_ADDR
12755: GO 12979
12757: LD_INT 2
12759: DOUBLE
12760: EQUAL
12761: IFTRUE 12765
12763: GO 12827
12765: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12766: LD_ADDR_VAR 0 12
12770: PUSH
12771: LD_VAR 0 18
12775: PPUSH
12776: LD_INT 22
12778: PUSH
12779: LD_VAR 0 16
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: LD_INT 30
12793: PUSH
12794: LD_INT 0
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 30
12803: PUSH
12804: LD_INT 1
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PPUSH
12820: CALL_OW 72
12824: ST_TO_ADDR
12825: GO 12979
12827: LD_INT 3
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12897
12835: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12836: LD_ADDR_VAR 0 12
12840: PUSH
12841: LD_VAR 0 18
12845: PPUSH
12846: LD_INT 22
12848: PUSH
12849: LD_VAR 0 16
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 2
12860: PUSH
12861: LD_INT 30
12863: PUSH
12864: LD_INT 2
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 30
12873: PUSH
12874: LD_INT 3
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PPUSH
12890: CALL_OW 72
12894: ST_TO_ADDR
12895: GO 12979
12897: LD_INT 4
12899: DOUBLE
12900: EQUAL
12901: IFTRUE 12905
12903: GO 12978
12905: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12906: LD_ADDR_VAR 0 12
12910: PUSH
12911: LD_VAR 0 18
12915: PPUSH
12916: LD_INT 22
12918: PUSH
12919: LD_VAR 0 16
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 2
12930: PUSH
12931: LD_INT 30
12933: PUSH
12934: LD_INT 6
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 30
12943: PUSH
12944: LD_INT 7
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 8
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 72
12975: ST_TO_ADDR
12976: GO 12979
12978: POP
// if i = 1 then
12979: LD_VAR 0 8
12983: PUSH
12984: LD_INT 1
12986: EQUAL
12987: IFFALSE 13098
// begin tmp := [ ] ;
12989: LD_ADDR_VAR 0 19
12993: PUSH
12994: EMPTY
12995: ST_TO_ADDR
// for j in f do
12996: LD_ADDR_VAR 0 9
13000: PUSH
13001: LD_VAR 0 12
13005: PUSH
13006: FOR_IN
13007: IFFALSE 13080
// if GetBType ( j ) = b_bunker then
13009: LD_VAR 0 9
13013: PPUSH
13014: CALL_OW 266
13018: PUSH
13019: LD_INT 32
13021: EQUAL
13022: IFFALSE 13049
// tmp := Insert ( tmp , 1 , j ) else
13024: LD_ADDR_VAR 0 19
13028: PUSH
13029: LD_VAR 0 19
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_VAR 0 9
13041: PPUSH
13042: CALL_OW 2
13046: ST_TO_ADDR
13047: GO 13078
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13049: LD_ADDR_VAR 0 19
13053: PUSH
13054: LD_VAR 0 19
13058: PPUSH
13059: LD_VAR 0 19
13063: PUSH
13064: LD_INT 1
13066: PLUS
13067: PPUSH
13068: LD_VAR 0 9
13072: PPUSH
13073: CALL_OW 2
13077: ST_TO_ADDR
13078: GO 13006
13080: POP
13081: POP
// if tmp then
13082: LD_VAR 0 19
13086: IFFALSE 13098
// f := tmp ;
13088: LD_ADDR_VAR 0 12
13092: PUSH
13093: LD_VAR 0 19
13097: ST_TO_ADDR
// end ; x := personel [ i ] ;
13098: LD_ADDR_VAR 0 13
13102: PUSH
13103: LD_VAR 0 6
13107: PUSH
13108: LD_VAR 0 8
13112: ARRAY
13113: ST_TO_ADDR
// if x = - 1 then
13114: LD_VAR 0 13
13118: PUSH
13119: LD_INT 1
13121: NEG
13122: EQUAL
13123: IFFALSE 13332
// begin for j in f do
13125: LD_ADDR_VAR 0 9
13129: PUSH
13130: LD_VAR 0 12
13134: PUSH
13135: FOR_IN
13136: IFFALSE 13328
// repeat InitHc ;
13138: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13142: LD_VAR 0 9
13146: PPUSH
13147: CALL_OW 266
13151: PUSH
13152: LD_INT 5
13154: EQUAL
13155: IFFALSE 13225
// begin if UnitsInside ( j ) < 3 then
13157: LD_VAR 0 9
13161: PPUSH
13162: CALL_OW 313
13166: PUSH
13167: LD_INT 3
13169: LESS
13170: IFFALSE 13206
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13172: LD_INT 0
13174: PPUSH
13175: LD_INT 5
13177: PUSH
13178: LD_INT 8
13180: PUSH
13181: LD_INT 9
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: PUSH
13189: LD_VAR 0 17
13193: ARRAY
13194: PPUSH
13195: LD_VAR 0 4
13199: PPUSH
13200: CALL_OW 380
13204: GO 13223
// PrepareHuman ( false , i , skill ) ;
13206: LD_INT 0
13208: PPUSH
13209: LD_VAR 0 8
13213: PPUSH
13214: LD_VAR 0 4
13218: PPUSH
13219: CALL_OW 380
// end else
13223: GO 13242
// PrepareHuman ( false , i , skill ) ;
13225: LD_INT 0
13227: PPUSH
13228: LD_VAR 0 8
13232: PPUSH
13233: LD_VAR 0 4
13237: PPUSH
13238: CALL_OW 380
// un := CreateHuman ;
13242: LD_ADDR_VAR 0 14
13246: PUSH
13247: CALL_OW 44
13251: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13252: LD_ADDR_VAR 0 7
13256: PUSH
13257: LD_VAR 0 7
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: LD_VAR 0 14
13269: PPUSH
13270: CALL_OW 2
13274: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13275: LD_VAR 0 14
13279: PPUSH
13280: LD_VAR 0 9
13284: PPUSH
13285: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13289: LD_VAR 0 9
13293: PPUSH
13294: CALL_OW 313
13298: PUSH
13299: LD_INT 6
13301: EQUAL
13302: PUSH
13303: LD_VAR 0 9
13307: PPUSH
13308: CALL_OW 266
13312: PUSH
13313: LD_INT 32
13315: PUSH
13316: LD_INT 31
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: IN
13323: OR
13324: IFFALSE 13138
13326: GO 13135
13328: POP
13329: POP
// end else
13330: GO 13712
// for j = 1 to x do
13332: LD_ADDR_VAR 0 9
13336: PUSH
13337: DOUBLE
13338: LD_INT 1
13340: DEC
13341: ST_TO_ADDR
13342: LD_VAR 0 13
13346: PUSH
13347: FOR_TO
13348: IFFALSE 13710
// begin InitHc ;
13350: CALL_OW 19
// if not f then
13354: LD_VAR 0 12
13358: NOT
13359: IFFALSE 13448
// begin PrepareHuman ( false , i , skill ) ;
13361: LD_INT 0
13363: PPUSH
13364: LD_VAR 0 8
13368: PPUSH
13369: LD_VAR 0 4
13373: PPUSH
13374: CALL_OW 380
// un := CreateHuman ;
13378: LD_ADDR_VAR 0 14
13382: PUSH
13383: CALL_OW 44
13387: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13388: LD_ADDR_VAR 0 7
13392: PUSH
13393: LD_VAR 0 7
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: LD_VAR 0 14
13405: PPUSH
13406: CALL_OW 2
13410: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13411: LD_VAR 0 14
13415: PPUSH
13416: LD_VAR 0 1
13420: PPUSH
13421: CALL_OW 250
13425: PPUSH
13426: LD_VAR 0 1
13430: PPUSH
13431: CALL_OW 251
13435: PPUSH
13436: LD_INT 10
13438: PPUSH
13439: LD_INT 0
13441: PPUSH
13442: CALL_OW 50
// continue ;
13446: GO 13347
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13448: LD_VAR 0 12
13452: PUSH
13453: LD_INT 1
13455: ARRAY
13456: PPUSH
13457: CALL_OW 313
13461: PUSH
13462: LD_VAR 0 12
13466: PUSH
13467: LD_INT 1
13469: ARRAY
13470: PPUSH
13471: CALL_OW 266
13475: PUSH
13476: LD_INT 32
13478: PUSH
13479: LD_INT 31
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: IN
13486: AND
13487: PUSH
13488: LD_VAR 0 12
13492: PUSH
13493: LD_INT 1
13495: ARRAY
13496: PPUSH
13497: CALL_OW 313
13501: PUSH
13502: LD_INT 6
13504: EQUAL
13505: OR
13506: IFFALSE 13526
// f := Delete ( f , 1 ) ;
13508: LD_ADDR_VAR 0 12
13512: PUSH
13513: LD_VAR 0 12
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: CALL_OW 3
13525: ST_TO_ADDR
// if not f then
13526: LD_VAR 0 12
13530: NOT
13531: IFFALSE 13549
// begin x := x + 2 ;
13533: LD_ADDR_VAR 0 13
13537: PUSH
13538: LD_VAR 0 13
13542: PUSH
13543: LD_INT 2
13545: PLUS
13546: ST_TO_ADDR
// continue ;
13547: GO 13347
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13549: LD_VAR 0 12
13553: PUSH
13554: LD_INT 1
13556: ARRAY
13557: PPUSH
13558: CALL_OW 266
13562: PUSH
13563: LD_INT 5
13565: EQUAL
13566: IFFALSE 13640
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13568: LD_VAR 0 12
13572: PUSH
13573: LD_INT 1
13575: ARRAY
13576: PPUSH
13577: CALL_OW 313
13581: PUSH
13582: LD_INT 3
13584: LESS
13585: IFFALSE 13621
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13587: LD_INT 0
13589: PPUSH
13590: LD_INT 5
13592: PUSH
13593: LD_INT 8
13595: PUSH
13596: LD_INT 9
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: PUSH
13604: LD_VAR 0 17
13608: ARRAY
13609: PPUSH
13610: LD_VAR 0 4
13614: PPUSH
13615: CALL_OW 380
13619: GO 13638
// PrepareHuman ( false , i , skill ) ;
13621: LD_INT 0
13623: PPUSH
13624: LD_VAR 0 8
13628: PPUSH
13629: LD_VAR 0 4
13633: PPUSH
13634: CALL_OW 380
// end else
13638: GO 13657
// PrepareHuman ( false , i , skill ) ;
13640: LD_INT 0
13642: PPUSH
13643: LD_VAR 0 8
13647: PPUSH
13648: LD_VAR 0 4
13652: PPUSH
13653: CALL_OW 380
// un := CreateHuman ;
13657: LD_ADDR_VAR 0 14
13661: PUSH
13662: CALL_OW 44
13666: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13667: LD_ADDR_VAR 0 7
13671: PUSH
13672: LD_VAR 0 7
13676: PPUSH
13677: LD_INT 1
13679: PPUSH
13680: LD_VAR 0 14
13684: PPUSH
13685: CALL_OW 2
13689: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13690: LD_VAR 0 14
13694: PPUSH
13695: LD_VAR 0 12
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 52
// end ;
13708: GO 13347
13710: POP
13711: POP
// end ;
13712: GO 12649
13714: POP
13715: POP
// result := result ^ buildings ;
13716: LD_ADDR_VAR 0 7
13720: PUSH
13721: LD_VAR 0 7
13725: PUSH
13726: LD_VAR 0 18
13730: ADD
13731: ST_TO_ADDR
// end else
13732: GO 13875
// begin for i = 1 to personel do
13734: LD_ADDR_VAR 0 8
13738: PUSH
13739: DOUBLE
13740: LD_INT 1
13742: DEC
13743: ST_TO_ADDR
13744: LD_VAR 0 6
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13873
// begin if i > 4 then
13752: LD_VAR 0 8
13756: PUSH
13757: LD_INT 4
13759: GREATER
13760: IFFALSE 13764
// break ;
13762: GO 13873
// x := personel [ i ] ;
13764: LD_ADDR_VAR 0 13
13768: PUSH
13769: LD_VAR 0 6
13773: PUSH
13774: LD_VAR 0 8
13778: ARRAY
13779: ST_TO_ADDR
// if x = - 1 then
13780: LD_VAR 0 13
13784: PUSH
13785: LD_INT 1
13787: NEG
13788: EQUAL
13789: IFFALSE 13793
// continue ;
13791: GO 13749
// PrepareHuman ( false , i , skill ) ;
13793: LD_INT 0
13795: PPUSH
13796: LD_VAR 0 8
13800: PPUSH
13801: LD_VAR 0 4
13805: PPUSH
13806: CALL_OW 380
// un := CreateHuman ;
13810: LD_ADDR_VAR 0 14
13814: PUSH
13815: CALL_OW 44
13819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13820: LD_VAR 0 14
13824: PPUSH
13825: LD_VAR 0 1
13829: PPUSH
13830: CALL_OW 250
13834: PPUSH
13835: LD_VAR 0 1
13839: PPUSH
13840: CALL_OW 251
13844: PPUSH
13845: LD_INT 10
13847: PPUSH
13848: LD_INT 0
13850: PPUSH
13851: CALL_OW 50
// result := result ^ un ;
13855: LD_ADDR_VAR 0 7
13859: PUSH
13860: LD_VAR 0 7
13864: PUSH
13865: LD_VAR 0 14
13869: ADD
13870: ST_TO_ADDR
// end ;
13871: GO 13749
13873: POP
13874: POP
// end ; end ;
13875: LD_VAR 0 7
13879: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13880: LD_INT 0
13882: PPUSH
13883: PPUSH
13884: PPUSH
13885: PPUSH
13886: PPUSH
13887: PPUSH
13888: PPUSH
13889: PPUSH
13890: PPUSH
13891: PPUSH
13892: PPUSH
13893: PPUSH
13894: PPUSH
13895: PPUSH
13896: PPUSH
13897: PPUSH
// result := false ;
13898: LD_ADDR_VAR 0 3
13902: PUSH
13903: LD_INT 0
13905: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13906: LD_VAR 0 1
13910: NOT
13911: PUSH
13912: LD_VAR 0 1
13916: PPUSH
13917: CALL_OW 266
13921: PUSH
13922: LD_INT 32
13924: PUSH
13925: LD_INT 33
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: IN
13932: NOT
13933: OR
13934: IFFALSE 13938
// exit ;
13936: GO 15074
// nat := GetNation ( tower ) ;
13938: LD_ADDR_VAR 0 12
13942: PUSH
13943: LD_VAR 0 1
13947: PPUSH
13948: CALL_OW 248
13952: ST_TO_ADDR
// side := GetSide ( tower ) ;
13953: LD_ADDR_VAR 0 16
13957: PUSH
13958: LD_VAR 0 1
13962: PPUSH
13963: CALL_OW 255
13967: ST_TO_ADDR
// x := GetX ( tower ) ;
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 250
13982: ST_TO_ADDR
// y := GetY ( tower ) ;
13983: LD_ADDR_VAR 0 11
13987: PUSH
13988: LD_VAR 0 1
13992: PPUSH
13993: CALL_OW 251
13997: ST_TO_ADDR
// if not x or not y then
13998: LD_VAR 0 10
14002: NOT
14003: PUSH
14004: LD_VAR 0 11
14008: NOT
14009: OR
14010: IFFALSE 14014
// exit ;
14012: GO 15074
// weapon := 0 ;
14014: LD_ADDR_VAR 0 18
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// fac_list := [ ] ;
14022: LD_ADDR_VAR 0 17
14026: PUSH
14027: EMPTY
14028: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
14029: LD_ADDR_VAR 0 6
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 274
14043: PPUSH
14044: LD_VAR 0 2
14048: PPUSH
14049: CALL 11652 0 2
14053: PPUSH
14054: LD_INT 30
14056: PUSH
14057: LD_INT 3
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PPUSH
14064: CALL_OW 72
14068: ST_TO_ADDR
// if not factories then
14069: LD_VAR 0 6
14073: NOT
14074: IFFALSE 14078
// exit ;
14076: GO 15074
// for i in factories do
14078: LD_ADDR_VAR 0 8
14082: PUSH
14083: LD_VAR 0 6
14087: PUSH
14088: FOR_IN
14089: IFFALSE 14114
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14091: LD_ADDR_VAR 0 17
14095: PUSH
14096: LD_VAR 0 17
14100: PUSH
14101: LD_VAR 0 8
14105: PPUSH
14106: CALL_OW 478
14110: UNION
14111: ST_TO_ADDR
14112: GO 14088
14114: POP
14115: POP
// if not fac_list then
14116: LD_VAR 0 17
14120: NOT
14121: IFFALSE 14125
// exit ;
14123: GO 15074
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14125: LD_ADDR_VAR 0 5
14129: PUSH
14130: LD_INT 4
14132: PUSH
14133: LD_INT 5
14135: PUSH
14136: LD_INT 9
14138: PUSH
14139: LD_INT 10
14141: PUSH
14142: LD_INT 6
14144: PUSH
14145: LD_INT 7
14147: PUSH
14148: LD_INT 11
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 27
14162: PUSH
14163: LD_INT 28
14165: PUSH
14166: LD_INT 26
14168: PUSH
14169: LD_INT 30
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 43
14180: PUSH
14181: LD_INT 44
14183: PUSH
14184: LD_INT 46
14186: PUSH
14187: LD_INT 45
14189: PUSH
14190: LD_INT 47
14192: PUSH
14193: LD_INT 49
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: PUSH
14209: LD_VAR 0 12
14213: ARRAY
14214: ST_TO_ADDR
// for i in list do
14215: LD_ADDR_VAR 0 8
14219: PUSH
14220: LD_VAR 0 5
14224: PUSH
14225: FOR_IN
14226: IFFALSE 14259
// if not i in fac_list then
14228: LD_VAR 0 8
14232: PUSH
14233: LD_VAR 0 17
14237: IN
14238: NOT
14239: IFFALSE 14257
// list := list diff i ;
14241: LD_ADDR_VAR 0 5
14245: PUSH
14246: LD_VAR 0 5
14250: PUSH
14251: LD_VAR 0 8
14255: DIFF
14256: ST_TO_ADDR
14257: GO 14225
14259: POP
14260: POP
// if not list then
14261: LD_VAR 0 5
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 15074
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14270: LD_VAR 0 12
14274: PUSH
14275: LD_INT 3
14277: EQUAL
14278: PUSH
14279: LD_INT 49
14281: PUSH
14282: LD_VAR 0 5
14286: IN
14287: AND
14288: PUSH
14289: LD_INT 31
14291: PPUSH
14292: LD_VAR 0 16
14296: PPUSH
14297: CALL_OW 321
14301: PUSH
14302: LD_INT 2
14304: EQUAL
14305: AND
14306: IFFALSE 14366
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14308: LD_INT 22
14310: PUSH
14311: LD_VAR 0 16
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 35
14322: PUSH
14323: LD_INT 49
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 91
14332: PUSH
14333: LD_VAR 0 1
14337: PUSH
14338: LD_INT 10
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PPUSH
14351: CALL_OW 69
14355: NOT
14356: IFFALSE 14366
// weapon := ru_time_lapser ;
14358: LD_ADDR_VAR 0 18
14362: PUSH
14363: LD_INT 49
14365: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14366: LD_VAR 0 12
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: IN
14381: PUSH
14382: LD_INT 11
14384: PUSH
14385: LD_VAR 0 5
14389: IN
14390: PUSH
14391: LD_INT 30
14393: PUSH
14394: LD_VAR 0 5
14398: IN
14399: OR
14400: AND
14401: PUSH
14402: LD_INT 6
14404: PPUSH
14405: LD_VAR 0 16
14409: PPUSH
14410: CALL_OW 321
14414: PUSH
14415: LD_INT 2
14417: EQUAL
14418: AND
14419: IFFALSE 14584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14421: LD_INT 22
14423: PUSH
14424: LD_VAR 0 16
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: LD_INT 35
14438: PUSH
14439: LD_INT 11
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 35
14448: PUSH
14449: LD_INT 30
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 91
14463: PUSH
14464: LD_VAR 0 1
14468: PUSH
14469: LD_INT 18
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: NOT
14487: PUSH
14488: LD_INT 22
14490: PUSH
14491: LD_VAR 0 16
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: LD_INT 30
14505: PUSH
14506: LD_INT 32
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 30
14515: PUSH
14516: LD_INT 33
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 91
14530: PUSH
14531: LD_VAR 0 1
14535: PUSH
14536: LD_INT 12
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: PUSH
14549: EMPTY
14550: LIST
14551: PPUSH
14552: CALL_OW 69
14556: PUSH
14557: LD_INT 2
14559: GREATER
14560: AND
14561: IFFALSE 14584
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14563: LD_ADDR_VAR 0 18
14567: PUSH
14568: LD_INT 11
14570: PUSH
14571: LD_INT 30
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_VAR 0 12
14582: ARRAY
14583: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14584: LD_VAR 0 18
14588: NOT
14589: PUSH
14590: LD_INT 40
14592: PPUSH
14593: LD_VAR 0 16
14597: PPUSH
14598: CALL_OW 321
14602: PUSH
14603: LD_INT 2
14605: EQUAL
14606: AND
14607: PUSH
14608: LD_INT 7
14610: PUSH
14611: LD_VAR 0 5
14615: IN
14616: PUSH
14617: LD_INT 28
14619: PUSH
14620: LD_VAR 0 5
14624: IN
14625: OR
14626: PUSH
14627: LD_INT 45
14629: PUSH
14630: LD_VAR 0 5
14634: IN
14635: OR
14636: AND
14637: IFFALSE 14891
// begin hex := GetHexInfo ( x , y ) ;
14639: LD_ADDR_VAR 0 4
14643: PUSH
14644: LD_VAR 0 10
14648: PPUSH
14649: LD_VAR 0 11
14653: PPUSH
14654: CALL_OW 546
14658: ST_TO_ADDR
// if hex [ 1 ] then
14659: LD_VAR 0 4
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: IFFALSE 14671
// exit ;
14669: GO 15074
// height := hex [ 2 ] ;
14671: LD_ADDR_VAR 0 15
14675: PUSH
14676: LD_VAR 0 4
14680: PUSH
14681: LD_INT 2
14683: ARRAY
14684: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14685: LD_ADDR_VAR 0 14
14689: PUSH
14690: LD_INT 0
14692: PUSH
14693: LD_INT 2
14695: PUSH
14696: LD_INT 3
14698: PUSH
14699: LD_INT 5
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: ST_TO_ADDR
// for i in tmp do
14708: LD_ADDR_VAR 0 8
14712: PUSH
14713: LD_VAR 0 14
14717: PUSH
14718: FOR_IN
14719: IFFALSE 14889
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14721: LD_ADDR_VAR 0 9
14725: PUSH
14726: LD_VAR 0 10
14730: PPUSH
14731: LD_VAR 0 8
14735: PPUSH
14736: LD_INT 5
14738: PPUSH
14739: CALL_OW 272
14743: PUSH
14744: LD_VAR 0 11
14748: PPUSH
14749: LD_VAR 0 8
14753: PPUSH
14754: LD_INT 5
14756: PPUSH
14757: CALL_OW 273
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14766: LD_VAR 0 9
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PPUSH
14775: LD_VAR 0 9
14779: PUSH
14780: LD_INT 2
14782: ARRAY
14783: PPUSH
14784: CALL_OW 488
14788: IFFALSE 14887
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14790: LD_ADDR_VAR 0 4
14794: PUSH
14795: LD_VAR 0 9
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PPUSH
14804: LD_VAR 0 9
14808: PUSH
14809: LD_INT 2
14811: ARRAY
14812: PPUSH
14813: CALL_OW 546
14817: ST_TO_ADDR
// if hex [ 1 ] then
14818: LD_VAR 0 4
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: IFFALSE 14830
// continue ;
14828: GO 14718
// h := hex [ 2 ] ;
14830: LD_ADDR_VAR 0 13
14834: PUSH
14835: LD_VAR 0 4
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: ST_TO_ADDR
// if h + 7 < height then
14844: LD_VAR 0 13
14848: PUSH
14849: LD_INT 7
14851: PLUS
14852: PUSH
14853: LD_VAR 0 15
14857: LESS
14858: IFFALSE 14887
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14860: LD_ADDR_VAR 0 18
14864: PUSH
14865: LD_INT 7
14867: PUSH
14868: LD_INT 28
14870: PUSH
14871: LD_INT 45
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: PUSH
14879: LD_VAR 0 12
14883: ARRAY
14884: ST_TO_ADDR
// break ;
14885: GO 14889
// end ; end ; end ;
14887: GO 14718
14889: POP
14890: POP
// end ; if not weapon then
14891: LD_VAR 0 18
14895: NOT
14896: IFFALSE 14956
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14898: LD_ADDR_VAR 0 5
14902: PUSH
14903: LD_VAR 0 5
14907: PUSH
14908: LD_INT 11
14910: PUSH
14911: LD_INT 30
14913: PUSH
14914: LD_INT 49
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: DIFF
14922: ST_TO_ADDR
// if not list then
14923: LD_VAR 0 5
14927: NOT
14928: IFFALSE 14932
// exit ;
14930: GO 15074
// weapon := list [ rand ( 1 , list ) ] ;
14932: LD_ADDR_VAR 0 18
14936: PUSH
14937: LD_VAR 0 5
14941: PUSH
14942: LD_INT 1
14944: PPUSH
14945: LD_VAR 0 5
14949: PPUSH
14950: CALL_OW 12
14954: ARRAY
14955: ST_TO_ADDR
// end ; if weapon then
14956: LD_VAR 0 18
14960: IFFALSE 15074
// begin tmp := CostOfWeapon ( weapon ) ;
14962: LD_ADDR_VAR 0 14
14966: PUSH
14967: LD_VAR 0 18
14971: PPUSH
14972: CALL_OW 451
14976: ST_TO_ADDR
// j := GetBase ( tower ) ;
14977: LD_ADDR_VAR 0 9
14981: PUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 274
14991: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14992: LD_VAR 0 9
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 275
15004: PUSH
15005: LD_VAR 0 14
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: GREATEREQUAL
15014: PUSH
15015: LD_VAR 0 9
15019: PPUSH
15020: LD_INT 2
15022: PPUSH
15023: CALL_OW 275
15027: PUSH
15028: LD_VAR 0 14
15032: PUSH
15033: LD_INT 2
15035: ARRAY
15036: GREATEREQUAL
15037: AND
15038: PUSH
15039: LD_VAR 0 9
15043: PPUSH
15044: LD_INT 3
15046: PPUSH
15047: CALL_OW 275
15051: PUSH
15052: LD_VAR 0 14
15056: PUSH
15057: LD_INT 3
15059: ARRAY
15060: GREATEREQUAL
15061: AND
15062: IFFALSE 15074
// result := weapon ;
15064: LD_ADDR_VAR 0 3
15068: PUSH
15069: LD_VAR 0 18
15073: ST_TO_ADDR
// end ; end ;
15074: LD_VAR 0 3
15078: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15079: LD_INT 0
15081: PPUSH
15082: PPUSH
// result := true ;
15083: LD_ADDR_VAR 0 3
15087: PUSH
15088: LD_INT 1
15090: ST_TO_ADDR
// if array1 = array2 then
15091: LD_VAR 0 1
15095: PUSH
15096: LD_VAR 0 2
15100: EQUAL
15101: IFFALSE 15161
// begin for i = 1 to array1 do
15103: LD_ADDR_VAR 0 4
15107: PUSH
15108: DOUBLE
15109: LD_INT 1
15111: DEC
15112: ST_TO_ADDR
15113: LD_VAR 0 1
15117: PUSH
15118: FOR_TO
15119: IFFALSE 15157
// if array1 [ i ] <> array2 [ i ] then
15121: LD_VAR 0 1
15125: PUSH
15126: LD_VAR 0 4
15130: ARRAY
15131: PUSH
15132: LD_VAR 0 2
15136: PUSH
15137: LD_VAR 0 4
15141: ARRAY
15142: NONEQUAL
15143: IFFALSE 15155
// begin result := false ;
15145: LD_ADDR_VAR 0 3
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// break ;
15153: GO 15157
// end ;
15155: GO 15118
15157: POP
15158: POP
// end else
15159: GO 15169
// result := false ;
15161: LD_ADDR_VAR 0 3
15165: PUSH
15166: LD_INT 0
15168: ST_TO_ADDR
// end ;
15169: LD_VAR 0 3
15173: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15174: LD_INT 0
15176: PPUSH
15177: PPUSH
15178: PPUSH
// pom := GetBase ( fac ) ;
15179: LD_ADDR_VAR 0 5
15183: PUSH
15184: LD_VAR 0 1
15188: PPUSH
15189: CALL_OW 274
15193: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15194: LD_ADDR_VAR 0 4
15198: PUSH
15199: LD_VAR 0 2
15203: PUSH
15204: LD_INT 1
15206: ARRAY
15207: PPUSH
15208: LD_VAR 0 2
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_VAR 0 2
15221: PUSH
15222: LD_INT 3
15224: ARRAY
15225: PPUSH
15226: LD_VAR 0 2
15230: PUSH
15231: LD_INT 4
15233: ARRAY
15234: PPUSH
15235: CALL_OW 449
15239: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15240: LD_ADDR_VAR 0 3
15244: PUSH
15245: LD_VAR 0 5
15249: PPUSH
15250: LD_INT 1
15252: PPUSH
15253: CALL_OW 275
15257: PUSH
15258: LD_VAR 0 4
15262: PUSH
15263: LD_INT 1
15265: ARRAY
15266: GREATEREQUAL
15267: PUSH
15268: LD_VAR 0 5
15272: PPUSH
15273: LD_INT 2
15275: PPUSH
15276: CALL_OW 275
15280: PUSH
15281: LD_VAR 0 4
15285: PUSH
15286: LD_INT 2
15288: ARRAY
15289: GREATEREQUAL
15290: AND
15291: PUSH
15292: LD_VAR 0 5
15296: PPUSH
15297: LD_INT 3
15299: PPUSH
15300: CALL_OW 275
15304: PUSH
15305: LD_VAR 0 4
15309: PUSH
15310: LD_INT 3
15312: ARRAY
15313: GREATEREQUAL
15314: AND
15315: ST_TO_ADDR
// end ;
15316: LD_VAR 0 3
15320: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15321: LD_INT 0
15323: PPUSH
15324: PPUSH
15325: PPUSH
15326: PPUSH
// pom := GetBase ( building ) ;
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 274
15341: ST_TO_ADDR
// if not pom then
15342: LD_VAR 0 3
15346: NOT
15347: IFFALSE 15351
// exit ;
15349: GO 15521
// btype := GetBType ( building ) ;
15351: LD_ADDR_VAR 0 5
15355: PUSH
15356: LD_VAR 0 1
15360: PPUSH
15361: CALL_OW 266
15365: ST_TO_ADDR
// if btype = b_armoury then
15366: LD_VAR 0 5
15370: PUSH
15371: LD_INT 4
15373: EQUAL
15374: IFFALSE 15384
// btype := b_barracks ;
15376: LD_ADDR_VAR 0 5
15380: PUSH
15381: LD_INT 5
15383: ST_TO_ADDR
// if btype = b_depot then
15384: LD_VAR 0 5
15388: PUSH
15389: LD_INT 0
15391: EQUAL
15392: IFFALSE 15402
// btype := b_warehouse ;
15394: LD_ADDR_VAR 0 5
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// if btype = b_workshop then
15402: LD_VAR 0 5
15406: PUSH
15407: LD_INT 2
15409: EQUAL
15410: IFFALSE 15420
// btype := b_factory ;
15412: LD_ADDR_VAR 0 5
15416: PUSH
15417: LD_INT 3
15419: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15420: LD_ADDR_VAR 0 4
15424: PUSH
15425: LD_VAR 0 5
15429: PPUSH
15430: LD_VAR 0 1
15434: PPUSH
15435: CALL_OW 248
15439: PPUSH
15440: CALL_OW 450
15444: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15445: LD_ADDR_VAR 0 2
15449: PUSH
15450: LD_VAR 0 3
15454: PPUSH
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 275
15462: PUSH
15463: LD_VAR 0 4
15467: PUSH
15468: LD_INT 1
15470: ARRAY
15471: GREATEREQUAL
15472: PUSH
15473: LD_VAR 0 3
15477: PPUSH
15478: LD_INT 2
15480: PPUSH
15481: CALL_OW 275
15485: PUSH
15486: LD_VAR 0 4
15490: PUSH
15491: LD_INT 2
15493: ARRAY
15494: GREATEREQUAL
15495: AND
15496: PUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: LD_INT 3
15504: PPUSH
15505: CALL_OW 275
15509: PUSH
15510: LD_VAR 0 4
15514: PUSH
15515: LD_INT 3
15517: ARRAY
15518: GREATEREQUAL
15519: AND
15520: ST_TO_ADDR
// end ;
15521: LD_VAR 0 2
15525: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
15530: PPUSH
// pom := GetBase ( building ) ;
15531: LD_ADDR_VAR 0 4
15535: PUSH
15536: LD_VAR 0 1
15540: PPUSH
15541: CALL_OW 274
15545: ST_TO_ADDR
// if not pom then
15546: LD_VAR 0 4
15550: NOT
15551: IFFALSE 15555
// exit ;
15553: GO 15656
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15555: LD_ADDR_VAR 0 5
15559: PUSH
15560: LD_VAR 0 2
15564: PPUSH
15565: LD_VAR 0 1
15569: PPUSH
15570: CALL_OW 248
15574: PPUSH
15575: CALL_OW 450
15579: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15580: LD_ADDR_VAR 0 3
15584: PUSH
15585: LD_VAR 0 4
15589: PPUSH
15590: LD_INT 1
15592: PPUSH
15593: CALL_OW 275
15597: PUSH
15598: LD_VAR 0 5
15602: PUSH
15603: LD_INT 1
15605: ARRAY
15606: GREATEREQUAL
15607: PUSH
15608: LD_VAR 0 4
15612: PPUSH
15613: LD_INT 2
15615: PPUSH
15616: CALL_OW 275
15620: PUSH
15621: LD_VAR 0 5
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: GREATEREQUAL
15630: AND
15631: PUSH
15632: LD_VAR 0 4
15636: PPUSH
15637: LD_INT 3
15639: PPUSH
15640: CALL_OW 275
15644: PUSH
15645: LD_VAR 0 5
15649: PUSH
15650: LD_INT 3
15652: ARRAY
15653: GREATEREQUAL
15654: AND
15655: ST_TO_ADDR
// end ;
15656: LD_VAR 0 3
15660: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
15661: LD_INT 0
15663: PPUSH
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
15668: PPUSH
15669: PPUSH
15670: PPUSH
15671: PPUSH
15672: PPUSH
// result := false ;
15673: LD_ADDR_VAR 0 6
15677: PUSH
15678: LD_INT 0
15680: ST_TO_ADDR
// if not base or not btype or not x or not y then
15681: LD_VAR 0 1
15685: NOT
15686: PUSH
15687: LD_VAR 0 2
15691: NOT
15692: OR
15693: PUSH
15694: LD_VAR 0 3
15698: NOT
15699: OR
15700: PUSH
15701: LD_VAR 0 4
15705: NOT
15706: OR
15707: IFFALSE 15711
// exit ;
15709: GO 16320
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
15711: LD_ADDR_VAR 0 12
15715: PUSH
15716: LD_VAR 0 2
15720: PPUSH
15721: LD_VAR 0 3
15725: PPUSH
15726: LD_VAR 0 4
15730: PPUSH
15731: LD_VAR 0 5
15735: PPUSH
15736: LD_VAR 0 1
15740: PUSH
15741: LD_INT 1
15743: ARRAY
15744: PPUSH
15745: CALL_OW 248
15749: PPUSH
15750: LD_INT 0
15752: PPUSH
15753: CALL 17157 0 6
15757: ST_TO_ADDR
// if not hexes then
15758: LD_VAR 0 12
15762: NOT
15763: IFFALSE 15767
// exit ;
15765: GO 16320
// for i = 1 to hexes do
15767: LD_ADDR_VAR 0 7
15771: PUSH
15772: DOUBLE
15773: LD_INT 1
15775: DEC
15776: ST_TO_ADDR
15777: LD_VAR 0 12
15781: PUSH
15782: FOR_TO
15783: IFFALSE 16318
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15785: LD_ADDR_VAR 0 11
15789: PUSH
15790: LD_VAR 0 12
15794: PUSH
15795: LD_VAR 0 7
15799: ARRAY
15800: PUSH
15801: LD_INT 1
15803: ARRAY
15804: PPUSH
15805: LD_VAR 0 12
15809: PUSH
15810: LD_VAR 0 7
15814: ARRAY
15815: PUSH
15816: LD_INT 2
15818: ARRAY
15819: PPUSH
15820: CALL_OW 428
15824: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15825: LD_VAR 0 12
15829: PUSH
15830: LD_VAR 0 7
15834: ARRAY
15835: PUSH
15836: LD_INT 1
15838: ARRAY
15839: PPUSH
15840: LD_VAR 0 12
15844: PUSH
15845: LD_VAR 0 7
15849: ARRAY
15850: PUSH
15851: LD_INT 2
15853: ARRAY
15854: PPUSH
15855: CALL_OW 351
15859: PUSH
15860: LD_VAR 0 12
15864: PUSH
15865: LD_VAR 0 7
15869: ARRAY
15870: PUSH
15871: LD_INT 1
15873: ARRAY
15874: PPUSH
15875: LD_VAR 0 12
15879: PUSH
15880: LD_VAR 0 7
15884: ARRAY
15885: PUSH
15886: LD_INT 2
15888: ARRAY
15889: PPUSH
15890: CALL_OW 488
15894: NOT
15895: OR
15896: PUSH
15897: LD_VAR 0 11
15901: PPUSH
15902: CALL_OW 247
15906: PUSH
15907: LD_INT 3
15909: EQUAL
15910: OR
15911: IFFALSE 15917
// exit ;
15913: POP
15914: POP
15915: GO 16320
// if not tmp or not tmp in base then
15917: LD_VAR 0 11
15921: NOT
15922: PUSH
15923: LD_VAR 0 11
15927: PUSH
15928: LD_VAR 0 1
15932: IN
15933: NOT
15934: OR
15935: IFFALSE 15939
// continue ;
15937: GO 15782
// result := true ;
15939: LD_ADDR_VAR 0 6
15943: PUSH
15944: LD_INT 1
15946: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15947: LD_ADDR_VAR 0 15
15951: PUSH
15952: LD_VAR 0 1
15956: PPUSH
15957: LD_INT 22
15959: PUSH
15960: LD_VAR 0 11
15964: PPUSH
15965: CALL_OW 255
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: LD_INT 30
15979: PUSH
15980: LD_INT 0
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 30
15989: PUSH
15990: LD_INT 1
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 72
16010: ST_TO_ADDR
// if dep then
16011: LD_VAR 0 15
16015: IFFALSE 16151
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16017: LD_ADDR_VAR 0 14
16021: PUSH
16022: LD_VAR 0 15
16026: PUSH
16027: LD_INT 1
16029: ARRAY
16030: PPUSH
16031: CALL_OW 250
16035: PPUSH
16036: LD_VAR 0 15
16040: PUSH
16041: LD_INT 1
16043: ARRAY
16044: PPUSH
16045: CALL_OW 254
16049: PPUSH
16050: LD_INT 5
16052: PPUSH
16053: CALL_OW 272
16057: PUSH
16058: LD_VAR 0 15
16062: PUSH
16063: LD_INT 1
16065: ARRAY
16066: PPUSH
16067: CALL_OW 251
16071: PPUSH
16072: LD_VAR 0 15
16076: PUSH
16077: LD_INT 1
16079: ARRAY
16080: PPUSH
16081: CALL_OW 254
16085: PPUSH
16086: LD_INT 5
16088: PPUSH
16089: CALL_OW 273
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16098: LD_VAR 0 14
16102: PUSH
16103: LD_INT 1
16105: ARRAY
16106: PPUSH
16107: LD_VAR 0 14
16111: PUSH
16112: LD_INT 2
16114: ARRAY
16115: PPUSH
16116: CALL_OW 488
16120: IFFALSE 16151
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16122: LD_VAR 0 11
16126: PPUSH
16127: LD_VAR 0 14
16131: PUSH
16132: LD_INT 1
16134: ARRAY
16135: PPUSH
16136: LD_VAR 0 14
16140: PUSH
16141: LD_INT 2
16143: ARRAY
16144: PPUSH
16145: CALL_OW 111
// continue ;
16149: GO 15782
// end ; end ; r := GetDir ( tmp ) ;
16151: LD_ADDR_VAR 0 13
16155: PUSH
16156: LD_VAR 0 11
16160: PPUSH
16161: CALL_OW 254
16165: ST_TO_ADDR
// if r = 5 then
16166: LD_VAR 0 13
16170: PUSH
16171: LD_INT 5
16173: EQUAL
16174: IFFALSE 16184
// r := 0 ;
16176: LD_ADDR_VAR 0 13
16180: PUSH
16181: LD_INT 0
16183: ST_TO_ADDR
// for j = r to 5 do
16184: LD_ADDR_VAR 0 8
16188: PUSH
16189: DOUBLE
16190: LD_VAR 0 13
16194: DEC
16195: ST_TO_ADDR
16196: LD_INT 5
16198: PUSH
16199: FOR_TO
16200: IFFALSE 16314
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16202: LD_ADDR_VAR 0 9
16206: PUSH
16207: LD_VAR 0 11
16211: PPUSH
16212: CALL_OW 250
16216: PPUSH
16217: LD_VAR 0 8
16221: PPUSH
16222: LD_INT 2
16224: PPUSH
16225: CALL_OW 272
16229: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16230: LD_ADDR_VAR 0 10
16234: PUSH
16235: LD_VAR 0 11
16239: PPUSH
16240: CALL_OW 251
16244: PPUSH
16245: LD_VAR 0 8
16249: PPUSH
16250: LD_INT 2
16252: PPUSH
16253: CALL_OW 273
16257: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16258: LD_VAR 0 9
16262: PPUSH
16263: LD_VAR 0 10
16267: PPUSH
16268: CALL_OW 488
16272: PUSH
16273: LD_VAR 0 9
16277: PPUSH
16278: LD_VAR 0 10
16282: PPUSH
16283: CALL_OW 428
16287: NOT
16288: AND
16289: IFFALSE 16312
// begin ComMoveXY ( tmp , _x , _y ) ;
16291: LD_VAR 0 11
16295: PPUSH
16296: LD_VAR 0 9
16300: PPUSH
16301: LD_VAR 0 10
16305: PPUSH
16306: CALL_OW 111
// break ;
16310: GO 16314
// end ; end ;
16312: GO 16199
16314: POP
16315: POP
// end ;
16316: GO 15782
16318: POP
16319: POP
// end ;
16320: LD_VAR 0 6
16324: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
16325: LD_INT 0
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
16336: PPUSH
// result := false ;
16337: LD_ADDR_VAR 0 6
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16345: LD_VAR 0 1
16349: NOT
16350: PUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 266
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: LD_INT 1
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: IN
16371: NOT
16372: OR
16373: PUSH
16374: LD_VAR 0 2
16378: NOT
16379: OR
16380: PUSH
16381: LD_VAR 0 5
16385: PUSH
16386: LD_INT 0
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 3
16397: PUSH
16398: LD_INT 4
16400: PUSH
16401: LD_INT 5
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: IN
16412: NOT
16413: OR
16414: PUSH
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_VAR 0 4
16424: PPUSH
16425: CALL_OW 488
16429: NOT
16430: OR
16431: IFFALSE 16435
// exit ;
16433: GO 17152
// pom := GetBase ( depot ) ;
16435: LD_ADDR_VAR 0 10
16439: PUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: CALL_OW 274
16449: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16450: LD_ADDR_VAR 0 11
16454: PUSH
16455: LD_VAR 0 2
16459: PPUSH
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 248
16469: PPUSH
16470: CALL_OW 450
16474: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16475: LD_VAR 0 10
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 275
16487: PUSH
16488: LD_VAR 0 11
16492: PUSH
16493: LD_INT 1
16495: ARRAY
16496: GREATEREQUAL
16497: PUSH
16498: LD_VAR 0 10
16502: PPUSH
16503: LD_INT 2
16505: PPUSH
16506: CALL_OW 275
16510: PUSH
16511: LD_VAR 0 11
16515: PUSH
16516: LD_INT 2
16518: ARRAY
16519: GREATEREQUAL
16520: AND
16521: PUSH
16522: LD_VAR 0 10
16526: PPUSH
16527: LD_INT 3
16529: PPUSH
16530: CALL_OW 275
16534: PUSH
16535: LD_VAR 0 11
16539: PUSH
16540: LD_INT 3
16542: ARRAY
16543: GREATEREQUAL
16544: AND
16545: NOT
16546: IFFALSE 16550
// exit ;
16548: GO 17152
// if GetBType ( depot ) = b_depot then
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 266
16559: PUSH
16560: LD_INT 0
16562: EQUAL
16563: IFFALSE 16575
// dist := 28 else
16565: LD_ADDR_VAR 0 14
16569: PUSH
16570: LD_INT 28
16572: ST_TO_ADDR
16573: GO 16583
// dist := 36 ;
16575: LD_ADDR_VAR 0 14
16579: PUSH
16580: LD_INT 36
16582: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_VAR 0 3
16592: PPUSH
16593: LD_VAR 0 4
16597: PPUSH
16598: CALL_OW 297
16602: PUSH
16603: LD_VAR 0 14
16607: GREATER
16608: IFFALSE 16612
// exit ;
16610: GO 17152
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16612: LD_ADDR_VAR 0 12
16616: PUSH
16617: LD_VAR 0 2
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: LD_VAR 0 4
16631: PPUSH
16632: LD_VAR 0 5
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 248
16646: PPUSH
16647: LD_INT 0
16649: PPUSH
16650: CALL 17157 0 6
16654: ST_TO_ADDR
// if not hexes then
16655: LD_VAR 0 12
16659: NOT
16660: IFFALSE 16664
// exit ;
16662: GO 17152
// hex := GetHexInfo ( x , y ) ;
16664: LD_ADDR_VAR 0 15
16668: PUSH
16669: LD_VAR 0 3
16673: PPUSH
16674: LD_VAR 0 4
16678: PPUSH
16679: CALL_OW 546
16683: ST_TO_ADDR
// if hex [ 1 ] then
16684: LD_VAR 0 15
16688: PUSH
16689: LD_INT 1
16691: ARRAY
16692: IFFALSE 16696
// exit ;
16694: GO 17152
// height := hex [ 2 ] ;
16696: LD_ADDR_VAR 0 13
16700: PUSH
16701: LD_VAR 0 15
16705: PUSH
16706: LD_INT 2
16708: ARRAY
16709: ST_TO_ADDR
// for i = 1 to hexes do
16710: LD_ADDR_VAR 0 7
16714: PUSH
16715: DOUBLE
16716: LD_INT 1
16718: DEC
16719: ST_TO_ADDR
16720: LD_VAR 0 12
16724: PUSH
16725: FOR_TO
16726: IFFALSE 17056
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16728: LD_VAR 0 12
16732: PUSH
16733: LD_VAR 0 7
16737: ARRAY
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_VAR 0 12
16747: PUSH
16748: LD_VAR 0 7
16752: ARRAY
16753: PUSH
16754: LD_INT 2
16756: ARRAY
16757: PPUSH
16758: CALL_OW 488
16762: NOT
16763: PUSH
16764: LD_VAR 0 12
16768: PUSH
16769: LD_VAR 0 7
16773: ARRAY
16774: PUSH
16775: LD_INT 1
16777: ARRAY
16778: PPUSH
16779: LD_VAR 0 12
16783: PUSH
16784: LD_VAR 0 7
16788: ARRAY
16789: PUSH
16790: LD_INT 2
16792: ARRAY
16793: PPUSH
16794: CALL_OW 428
16798: PUSH
16799: LD_INT 0
16801: GREATER
16802: OR
16803: PUSH
16804: LD_VAR 0 12
16808: PUSH
16809: LD_VAR 0 7
16813: ARRAY
16814: PUSH
16815: LD_INT 1
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 12
16823: PUSH
16824: LD_VAR 0 7
16828: ARRAY
16829: PUSH
16830: LD_INT 2
16832: ARRAY
16833: PPUSH
16834: CALL_OW 351
16838: OR
16839: IFFALSE 16845
// exit ;
16841: POP
16842: POP
16843: GO 17152
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16845: LD_ADDR_VAR 0 8
16849: PUSH
16850: LD_VAR 0 12
16854: PUSH
16855: LD_VAR 0 7
16859: ARRAY
16860: PUSH
16861: LD_INT 1
16863: ARRAY
16864: PPUSH
16865: LD_VAR 0 12
16869: PUSH
16870: LD_VAR 0 7
16874: ARRAY
16875: PUSH
16876: LD_INT 2
16878: ARRAY
16879: PPUSH
16880: CALL_OW 546
16884: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16885: LD_VAR 0 8
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: PUSH
16894: LD_VAR 0 8
16898: PUSH
16899: LD_INT 2
16901: ARRAY
16902: PUSH
16903: LD_VAR 0 13
16907: PUSH
16908: LD_INT 2
16910: PLUS
16911: GREATER
16912: OR
16913: PUSH
16914: LD_VAR 0 8
16918: PUSH
16919: LD_INT 2
16921: ARRAY
16922: PUSH
16923: LD_VAR 0 13
16927: PUSH
16928: LD_INT 2
16930: MINUS
16931: LESS
16932: OR
16933: PUSH
16934: LD_VAR 0 8
16938: PUSH
16939: LD_INT 3
16941: ARRAY
16942: PUSH
16943: LD_INT 0
16945: PUSH
16946: LD_INT 8
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: LD_INT 10
16954: PUSH
16955: LD_INT 11
16957: PUSH
16958: LD_INT 12
16960: PUSH
16961: LD_INT 13
16963: PUSH
16964: LD_INT 16
16966: PUSH
16967: LD_INT 17
16969: PUSH
16970: LD_INT 18
16972: PUSH
16973: LD_INT 19
16975: PUSH
16976: LD_INT 20
16978: PUSH
16979: LD_INT 21
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: IN
16997: NOT
16998: OR
16999: PUSH
17000: LD_VAR 0 8
17004: PUSH
17005: LD_INT 5
17007: ARRAY
17008: NOT
17009: OR
17010: PUSH
17011: LD_VAR 0 8
17015: PUSH
17016: LD_INT 6
17018: ARRAY
17019: PUSH
17020: LD_INT 1
17022: PUSH
17023: LD_INT 2
17025: PUSH
17026: LD_INT 7
17028: PUSH
17029: LD_INT 9
17031: PUSH
17032: LD_INT 10
17034: PUSH
17035: LD_INT 11
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: IN
17046: NOT
17047: OR
17048: IFFALSE 17054
// exit ;
17050: POP
17051: POP
17052: GO 17152
// end ;
17054: GO 16725
17056: POP
17057: POP
// side := GetSide ( depot ) ;
17058: LD_ADDR_VAR 0 9
17062: PUSH
17063: LD_VAR 0 1
17067: PPUSH
17068: CALL_OW 255
17072: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17073: LD_VAR 0 9
17077: PPUSH
17078: LD_VAR 0 3
17082: PPUSH
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_INT 20
17090: PPUSH
17091: CALL 9806 0 4
17095: PUSH
17096: LD_INT 4
17098: ARRAY
17099: IFFALSE 17103
// exit ;
17101: GO 17152
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17103: LD_VAR 0 2
17107: PUSH
17108: LD_INT 29
17110: PUSH
17111: LD_INT 30
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: IN
17118: PUSH
17119: LD_VAR 0 3
17123: PPUSH
17124: LD_VAR 0 4
17128: PPUSH
17129: LD_VAR 0 9
17133: PPUSH
17134: CALL_OW 440
17138: NOT
17139: AND
17140: IFFALSE 17144
// exit ;
17142: GO 17152
// result := true ;
17144: LD_ADDR_VAR 0 6
17148: PUSH
17149: LD_INT 1
17151: ST_TO_ADDR
// end ;
17152: LD_VAR 0 6
17156: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
17157: LD_INT 0
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
// result = [ ] ;
17217: LD_ADDR_VAR 0 7
17221: PUSH
17222: EMPTY
17223: ST_TO_ADDR
// temp_list = [ ] ;
17224: LD_ADDR_VAR 0 9
17228: PUSH
17229: EMPTY
17230: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17231: LD_VAR 0 4
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: LD_INT 1
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 3
17247: PUSH
17248: LD_INT 4
17250: PUSH
17251: LD_INT 5
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: IN
17262: NOT
17263: PUSH
17264: LD_VAR 0 1
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: IN
17279: PUSH
17280: LD_VAR 0 5
17284: PUSH
17285: LD_INT 1
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: IN
17299: NOT
17300: AND
17301: OR
17302: IFFALSE 17306
// exit ;
17304: GO 35697
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17306: LD_VAR 0 1
17310: PUSH
17311: LD_INT 6
17313: PUSH
17314: LD_INT 7
17316: PUSH
17317: LD_INT 8
17319: PUSH
17320: LD_INT 13
17322: PUSH
17323: LD_INT 12
17325: PUSH
17326: LD_INT 15
17328: PUSH
17329: LD_INT 11
17331: PUSH
17332: LD_INT 14
17334: PUSH
17335: LD_INT 10
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: IN
17349: IFFALSE 17359
// btype = b_lab ;
17351: LD_ADDR_VAR 0 1
17355: PUSH
17356: LD_INT 6
17358: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17359: LD_VAR 0 6
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: IN
17378: NOT
17379: PUSH
17380: LD_VAR 0 1
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 3
17396: PUSH
17397: LD_INT 6
17399: PUSH
17400: LD_INT 36
17402: PUSH
17403: LD_INT 4
17405: PUSH
17406: LD_INT 5
17408: PUSH
17409: LD_INT 31
17411: PUSH
17412: LD_INT 32
17414: PUSH
17415: LD_INT 33
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: IN
17431: NOT
17432: PUSH
17433: LD_VAR 0 6
17437: PUSH
17438: LD_INT 1
17440: EQUAL
17441: AND
17442: OR
17443: PUSH
17444: LD_VAR 0 1
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: IN
17459: NOT
17460: PUSH
17461: LD_VAR 0 6
17465: PUSH
17466: LD_INT 2
17468: EQUAL
17469: AND
17470: OR
17471: IFFALSE 17481
// mode = 0 ;
17473: LD_ADDR_VAR 0 6
17477: PUSH
17478: LD_INT 0
17480: ST_TO_ADDR
// case mode of 0 :
17481: LD_VAR 0 6
17485: PUSH
17486: LD_INT 0
17488: DOUBLE
17489: EQUAL
17490: IFTRUE 17494
17492: GO 28947
17494: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17495: LD_ADDR_VAR 0 11
17499: PUSH
17500: LD_INT 0
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: LD_INT 1
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 0
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 1
17553: NEG
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: LD_INT 1
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: LD_INT 2
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 0
17588: PUSH
17589: LD_INT 2
17591: NEG
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 1
17602: NEG
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: LD_INT 3
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: LD_INT 3
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: NEG
17662: PUSH
17663: LD_INT 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17688: LD_ADDR_VAR 0 12
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: LD_INT 1
17708: NEG
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 0
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 1
17746: NEG
17747: PUSH
17748: LD_INT 0
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 1
17757: NEG
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 2
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 1
17800: NEG
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 2
17811: NEG
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 2
17822: NEG
17823: PUSH
17824: LD_INT 1
17826: NEG
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 2
17834: NEG
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 3
17845: NEG
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 3
17856: NEG
17857: PUSH
17858: LD_INT 1
17860: NEG
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17884: LD_ADDR_VAR 0 13
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 1
17942: NEG
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 2
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 2
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: LD_INT 2
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: NEG
18020: PUSH
18021: LD_INT 2
18023: NEG
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: NEG
18032: PUSH
18033: LD_INT 3
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 3
18043: NEG
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 3
18055: NEG
18056: PUSH
18057: LD_INT 3
18059: NEG
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18083: LD_ADDR_VAR 0 14
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 1
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: LD_INT 1
18156: NEG
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: LD_INT 2
18168: NEG
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: LD_INT 2
18179: NEG
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: LD_INT 2
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: LD_INT 2
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 3
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 3
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 2
18255: NEG
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18279: LD_ADDR_VAR 0 15
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: LD_INT 1
18299: NEG
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: LD_INT 0
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: LD_INT 1
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 2
18402: NEG
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: NEG
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 3
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 3
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18472: LD_ADDR_VAR 0 16
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: LD_INT 1
18492: NEG
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 1
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 1
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 1
18541: NEG
18542: PUSH
18543: LD_INT 1
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 1
18553: NEG
18554: PUSH
18555: LD_INT 2
18557: NEG
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: LD_INT 2
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: LD_INT 2
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 2
18595: NEG
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 2
18607: NEG
18608: PUSH
18609: LD_INT 2
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 3
18619: PUSH
18620: LD_INT 2
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 3
18629: PUSH
18630: LD_INT 3
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: LD_INT 3
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18665: LD_ADDR_VAR 0 17
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: PUSH
18736: LD_INT 1
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: NEG
18747: PUSH
18748: LD_INT 2
18750: NEG
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: LD_INT 2
18761: NEG
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: LD_INT 1
18772: NEG
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 2
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: LD_INT 1
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: LD_INT 2
18868: NEG
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18895: LD_ADDR_VAR 0 18
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: LD_INT 2
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: NEG
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: LD_INT 1
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19125: LD_ADDR_VAR 0 19
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: LD_INT 0
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 0
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: NEG
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: NEG
19207: PUSH
19208: LD_INT 2
19210: NEG
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: LD_INT 2
19221: NEG
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: NEG
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 2
19324: NEG
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19355: LD_ADDR_VAR 0 20
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 0
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: LD_INT 0
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 1
19428: NEG
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 1
19436: NEG
19437: PUSH
19438: LD_INT 2
19440: NEG
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: LD_INT 2
19451: NEG
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19585: LD_ADDR_VAR 0 21
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: LD_INT 0
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: LD_INT 1
19605: NEG
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: LD_INT 1
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 0
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: NEG
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: LD_INT 2
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: NEG
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: NEG
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19815: LD_ADDR_VAR 0 22
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 0
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: PUSH
19844: LD_INT 0
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: NEG
19897: PUSH
19898: LD_INT 2
19900: NEG
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 1
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 2
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: PUSH
19982: LD_INT 1
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: NEG
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 2
20014: NEG
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20045: LD_ADDR_VAR 0 23
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: LD_INT 1
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: LD_INT 1
20118: NEG
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 1
20126: NEG
20127: PUSH
20128: LD_INT 2
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: LD_INT 2
20141: NEG
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 2
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: LD_INT 2
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: NEG
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 2
20244: NEG
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 2
20256: NEG
20257: PUSH
20258: LD_INT 3
20260: NEG
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 1
20268: NEG
20269: PUSH
20270: LD_INT 3
20272: NEG
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_INT 2
20283: NEG
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: LD_INT 1
20294: NEG
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20325: LD_ADDR_VAR 0 24
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 0
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: NEG
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: LD_INT 2
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 2
20421: NEG
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: LD_INT 1
20432: NEG
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 0
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: NEG
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 2
20501: NEG
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 2
20512: NEG
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 2
20524: NEG
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: LD_INT 2
20539: NEG
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: LD_INT 1
20550: NEG
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 3
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 3
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20601: LD_ADDR_VAR 0 25
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: LD_INT 0
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: LD_INT 2
20686: NEG
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: LD_INT 2
20697: NEG
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: LD_INT 0
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: LD_INT 2
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: NEG
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: NEG
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 2
20800: NEG
20801: PUSH
20802: LD_INT 2
20804: NEG
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 3
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 3
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20875: LD_ADDR_VAR 0 26
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: LD_INT 0
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: NEG
20957: PUSH
20958: LD_INT 2
20960: NEG
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 0
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: LD_INT 2
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: NEG
21052: PUSH
21053: LD_INT 0
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 2
21062: NEG
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 2
21074: NEG
21075: PUSH
21076: LD_INT 2
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 3
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: NEG
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21151: LD_ADDR_VAR 0 27
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: LD_INT 0
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 0
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: NEG
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: LD_INT 1
21224: NEG
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: LD_INT 2
21236: NEG
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 2
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: NEG
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 2
21338: NEG
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: LD_INT 2
21354: NEG
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 2
21373: NEG
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 3
21384: NEG
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 3
21396: NEG
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21431: LD_ADDR_VAR 0 28
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: LD_INT 2
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 1
21538: NEG
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 2
21618: NEG
21619: PUSH
21620: LD_INT 1
21622: NEG
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: LD_INT 2
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 2
21642: NEG
21643: PUSH
21644: LD_INT 3
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: LD_INT 3
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 3
21666: NEG
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 3
21678: NEG
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21713: LD_ADDR_VAR 0 29
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: LD_INT 1
21786: NEG
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: LD_INT 2
21798: NEG
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 2
21891: NEG
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: NEG
21904: PUSH
21905: LD_INT 3
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 3
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 3
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 3
21957: NEG
21958: PUSH
21959: LD_INT 2
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21992: LD_ADDR_VAR 0 30
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: LD_INT 1
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: LD_INT 1
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PUSH
22075: LD_INT 2
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 2
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 1
22099: NEG
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: LD_INT 2
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 2
22169: NEG
22170: PUSH
22171: LD_INT 1
22173: NEG
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: LD_INT 3
22185: NEG
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: PUSH
22194: LD_INT 2
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 3
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 2
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: NEG
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 3
22235: NEG
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22270: LD_ADDR_VAR 0 31
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: NEG
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: LD_INT 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: NEG
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: LD_INT 2
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 2
22459: NEG
22460: PUSH
22461: LD_INT 3
22463: NEG
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 3
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: LD_INT 3
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: NEG
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 3
22513: NEG
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22548: LD_ADDR_VAR 0 32
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: LD_INT 1
22568: NEG
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: NEG
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: LD_INT 2
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: LD_INT 2
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 2
22714: NEG
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 2
22725: NEG
22726: PUSH
22727: LD_INT 1
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: LD_INT 3
22741: NEG
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: LD_INT 2
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 3
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 2
22770: PUSH
22771: LD_INT 3
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 2
22780: NEG
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 3
22791: NEG
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22826: LD_ADDR_VAR 0 33
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 2
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: LD_INT 1
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 2
23004: NEG
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: LD_INT 3
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 1
23031: NEG
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 3
23070: NEG
23071: PUSH
23072: LD_INT 2
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23105: LD_ADDR_VAR 0 34
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: LD_INT 1
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: LD_INT 2
23201: NEG
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: NEG
23262: PUSH
23263: LD_INT 0
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 2
23284: NEG
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: LD_INT 3
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 3
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: LD_INT 3
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 2
23339: NEG
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 3
23350: NEG
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23385: LD_ADDR_VAR 0 35
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 2
23476: NEG
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23497: LD_ADDR_VAR 0 36
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 2
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23609: LD_ADDR_VAR 0 37
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 0
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 1
23693: NEG
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23721: LD_ADDR_VAR 0 38
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: NEG
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: NEG
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23833: LD_ADDR_VAR 0 39
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: LD_INT 2
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 2
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23945: LD_ADDR_VAR 0 40
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24057: LD_ADDR_VAR 0 41
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: LD_INT 2
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: PUSH
24182: LD_INT 2
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 2
24212: NEG
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: NEG
24248: PUSH
24249: LD_INT 3
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 3
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 3
24300: PUSH
24301: LD_INT 3
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: LD_INT 3
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 2
24320: NEG
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 3
24331: NEG
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 3
24342: NEG
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 3
24354: NEG
24355: PUSH
24356: LD_INT 2
24358: NEG
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 3
24366: NEG
24367: PUSH
24368: LD_INT 3
24370: NEG
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24407: LD_ADDR_VAR 0 42
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: LD_INT 2
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 2
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: NEG
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: NEG
24586: PUSH
24587: LD_INT 2
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: LD_INT 3
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: LD_INT 3
24613: NEG
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 3
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 2
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 3
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: LD_INT 3
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 3
24704: NEG
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 3
24716: NEG
24717: PUSH
24718: LD_INT 3
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24757: LD_ADDR_VAR 0 43
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: LD_INT 2
24853: NEG
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: LD_INT 2
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: NEG
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: NEG
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 3
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 3
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 3
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 0
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 3
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 3
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25105: LD_ADDR_VAR 0 44
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: NEG
25296: PUSH
25297: LD_INT 3
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 3
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 3
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 3
25379: NEG
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: NEG
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 3
25402: NEG
25403: PUSH
25404: LD_INT 2
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 3
25414: NEG
25415: PUSH
25416: LD_INT 3
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25455: LD_ADDR_VAR 0 45
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 2
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 2
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: LD_INT 3
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: LD_INT 3
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 3
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 2
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 3
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 3
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 3
25752: NEG
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 3
25764: NEG
25765: PUSH
25766: LD_INT 3
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25805: LD_ADDR_VAR 0 46
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: LD_INT 2
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 2
25901: NEG
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: LD_INT 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 2
25971: NEG
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: LD_INT 3
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 3
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 3
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 2
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 3
26101: NEG
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 3
26112: NEG
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26153: LD_ADDR_VAR 0 47
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 0
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: LD_INT 2
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: NEG
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26304: LD_ADDR_VAR 0 48
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: LD_INT 2
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 2
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26451: LD_ADDR_VAR 0 49
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26595: LD_ADDR_VAR 0 50
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 2
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 2
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26739: LD_ADDR_VAR 0 51
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 2
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26886: LD_ADDR_VAR 0 52
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: LD_INT 2
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27037: LD_ADDR_VAR 0 53
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 2
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 2
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 1
27144: NEG
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: NEG
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 1
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: LD_INT 2
27240: NEG
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27267: LD_ADDR_VAR 0 54
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 2
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 2
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 2
27443: NEG
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: LD_INT 2
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27497: LD_ADDR_VAR 0 55
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: LD_INT 0
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 2
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 2
27696: NEG
27697: PUSH
27698: LD_INT 2
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27727: LD_ADDR_VAR 0 56
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: LD_INT 2
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: LD_INT 2
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27957: LD_ADDR_VAR 0 57
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 2
28156: NEG
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28187: LD_ADDR_VAR 0 58
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: LD_INT 2
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: LD_INT 2
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 2
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 2
28386: NEG
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28417: LD_ADDR_VAR 0 59
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28505: LD_ADDR_VAR 0 60
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28593: LD_ADDR_VAR 0 61
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28681: LD_ADDR_VAR 0 62
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28769: LD_ADDR_VAR 0 63
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28857: LD_ADDR_VAR 0 64
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: ST_TO_ADDR
// end ; 1 :
28945: GO 34842
28947: LD_INT 1
28949: DOUBLE
28950: EQUAL
28951: IFTRUE 28955
28953: GO 31578
28955: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28956: LD_ADDR_VAR 0 11
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 3
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 3
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 2
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29000: LD_ADDR_VAR 0 12
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29041: LD_ADDR_VAR 0 13
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29081: LD_ADDR_VAR 0 14
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 3
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: LD_INT 2
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29122: LD_ADDR_VAR 0 15
29126: PUSH
29127: LD_INT 2
29129: NEG
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 3
29140: NEG
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 3
29151: NEG
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: LIST
29165: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29166: LD_ADDR_VAR 0 16
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: LD_INT 2
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 3
29197: NEG
29198: PUSH
29199: LD_INT 3
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29212: LD_ADDR_VAR 0 17
29216: PUSH
29217: LD_INT 1
29219: NEG
29220: PUSH
29221: LD_INT 3
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: LD_INT 3
29234: NEG
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: LD_INT 2
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29256: LD_ADDR_VAR 0 18
29260: PUSH
29261: LD_INT 2
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 3
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29297: LD_ADDR_VAR 0 19
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: LD_INT 2
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 3
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29337: LD_ADDR_VAR 0 20
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: LD_INT 3
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29378: LD_ADDR_VAR 0 21
29382: PUSH
29383: LD_INT 2
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 3
29407: NEG
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29422: LD_ADDR_VAR 0 22
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: LD_INT 3
29433: NEG
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 3
29441: NEG
29442: PUSH
29443: LD_INT 2
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 3
29453: NEG
29454: PUSH
29455: LD_INT 3
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29468: LD_ADDR_VAR 0 23
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 3
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 4
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: LD_INT 3
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29512: LD_ADDR_VAR 0 24
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 4
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29553: LD_ADDR_VAR 0 25
29557: PUSH
29558: LD_INT 3
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 4
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 3
29580: PUSH
29581: LD_INT 4
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29593: LD_ADDR_VAR 0 26
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 4
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29634: LD_ADDR_VAR 0 27
29638: PUSH
29639: LD_INT 3
29641: NEG
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 3
29652: NEG
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 4
29663: NEG
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29678: LD_ADDR_VAR 0 28
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: LD_INT 3
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: LD_INT 4
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 4
29709: NEG
29710: PUSH
29711: LD_INT 3
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29724: LD_ADDR_VAR 0 29
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: LD_INT 3
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: LD_INT 4
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 4
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 3
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: LD_INT 5
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 5
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 4
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 6
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: LD_INT 6
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: LD_INT 5
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29879: LD_ADDR_VAR 0 30
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 0
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 4
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 4
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 4
29948: PUSH
29949: LD_INT 1
29951: NEG
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 5
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 5
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 5
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 6
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 6
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30022: LD_ADDR_VAR 0 31
30026: PUSH
30027: LD_INT 3
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 3
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 3
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 4
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 4
30069: PUSH
30070: LD_INT 4
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: LD_INT 4
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 5
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: LD_INT 5
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 4
30109: PUSH
30110: LD_INT 5
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 6
30119: PUSH
30120: LD_INT 5
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 6
30129: PUSH
30130: LD_INT 6
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 5
30139: PUSH
30140: LD_INT 6
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30161: LD_ADDR_VAR 0 32
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 3
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: LD_INT 4
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: LD_INT 4
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: LD_INT 5
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 5
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: LD_INT 4
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: LD_INT 6
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: LD_INT 6
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: NEG
30282: PUSH
30283: LD_INT 5
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30304: LD_ADDR_VAR 0 33
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 3
30322: NEG
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 3
30333: NEG
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 3
30345: NEG
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 4
30356: NEG
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 4
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 4
30379: NEG
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 5
30390: NEG
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 5
30401: NEG
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 5
30413: NEG
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 6
30424: NEG
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 6
30435: NEG
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30459: LD_ADDR_VAR 0 34
30463: PUSH
30464: LD_INT 2
30466: NEG
30467: PUSH
30468: LD_INT 3
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 3
30478: NEG
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 4
30514: NEG
30515: PUSH
30516: LD_INT 3
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 4
30526: NEG
30527: PUSH
30528: LD_INT 4
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 4
30538: NEG
30539: PUSH
30540: LD_INT 5
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 5
30550: NEG
30551: PUSH
30552: LD_INT 4
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 5
30562: NEG
30563: PUSH
30564: LD_INT 5
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 5
30574: NEG
30575: PUSH
30576: LD_INT 6
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 6
30586: NEG
30587: PUSH
30588: LD_INT 5
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 6
30598: NEG
30599: PUSH
30600: LD_INT 6
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30622: LD_ADDR_VAR 0 41
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: LD_INT 3
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: LD_INT 2
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30666: LD_ADDR_VAR 0 42
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 3
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30707: LD_ADDR_VAR 0 43
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 3
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 2
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30747: LD_ADDR_VAR 0 44
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30788: LD_ADDR_VAR 0 45
30792: PUSH
30793: LD_INT 2
30795: NEG
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 3
30817: NEG
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30832: LD_ADDR_VAR 0 46
30836: PUSH
30837: LD_INT 2
30839: NEG
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 2
30851: NEG
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 3
30863: NEG
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30878: LD_ADDR_VAR 0 47
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 3
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30911: LD_ADDR_VAR 0 48
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30942: LD_ADDR_VAR 0 49
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30971: LD_ADDR_VAR 0 50
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: LD_INT 3
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31000: LD_ADDR_VAR 0 51
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31031: LD_ADDR_VAR 0 52
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 3
31050: NEG
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31064: LD_ADDR_VAR 0 53
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 3
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31108: LD_ADDR_VAR 0 54
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 3
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31149: LD_ADDR_VAR 0 55
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31189: LD_ADDR_VAR 0 56
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31230: LD_ADDR_VAR 0 57
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: NEG
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31274: LD_ADDR_VAR 0 58
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 3
31305: NEG
31306: PUSH
31307: LD_INT 3
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31320: LD_ADDR_VAR 0 59
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: LD_INT 2
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31364: LD_ADDR_VAR 0 60
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31405: LD_ADDR_VAR 0 61
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31445: LD_ADDR_VAR 0 62
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31486: LD_ADDR_VAR 0 63
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31530: LD_ADDR_VAR 0 64
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 2
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
// end ; 2 :
31576: GO 34842
31578: LD_INT 2
31580: DOUBLE
31581: EQUAL
31582: IFTRUE 31586
31584: GO 34841
31586: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31587: LD_ADDR_VAR 0 29
31591: PUSH
31592: LD_INT 4
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 4
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 5
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 5
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 4
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 5
31677: PUSH
31678: LD_INT 2
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 4
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 4
31717: PUSH
31718: LD_INT 4
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 3
31727: PUSH
31728: LD_INT 4
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: LD_INT 3
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 2
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 4
31757: PUSH
31758: LD_INT 2
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 4
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 4
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: LD_INT 3
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: LD_INT 5
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 0
31817: PUSH
31818: LD_INT 5
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 4
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: LD_INT 5
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 3
31870: NEG
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 4
31926: NEG
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 4
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 4
31949: NEG
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 4
31972: NEG
31973: PUSH
31974: LD_INT 4
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 4
31984: NEG
31985: PUSH
31986: LD_INT 5
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 3
31996: NEG
31997: PUSH
31998: LD_INT 4
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 4
32020: NEG
32021: PUSH
32022: LD_INT 3
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 5
32032: NEG
32033: PUSH
32034: LD_INT 4
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 5
32044: NEG
32045: PUSH
32046: LD_INT 5
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: LD_INT 5
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 5
32068: NEG
32069: PUSH
32070: LD_INT 3
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32125: LD_ADDR_VAR 0 30
32129: PUSH
32130: LD_INT 4
32132: PUSH
32133: LD_INT 4
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 4
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 5
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 5
32162: PUSH
32163: LD_INT 5
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 5
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: LD_INT 4
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: LD_INT 5
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 4
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 4
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 4
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 4
32315: NEG
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 4
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: NEG
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: NEG
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 5
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 5
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 5
32394: NEG
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 3
32406: NEG
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 3
32417: NEG
32418: PUSH
32419: LD_INT 3
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 3
32429: NEG
32430: PUSH
32431: LD_INT 4
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: LD_INT 3
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 3
32465: NEG
32466: PUSH
32467: LD_INT 2
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 4
32477: NEG
32478: PUSH
32479: LD_INT 3
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 4
32489: NEG
32490: PUSH
32491: LD_INT 4
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: LD_INT 4
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 4
32513: NEG
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: LD_INT 4
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 5
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 4
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 4
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: LD_INT 5
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: LD_INT 3
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: LD_INT 5
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32672: LD_ADDR_VAR 0 31
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 4
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 4
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: LD_INT 5
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: LD_INT 5
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: LD_INT 4
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 3
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 5
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: LD_INT 3
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 3
32772: NEG
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: NEG
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: NEG
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 4
32828: NEG
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 4
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 4
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 4
32874: NEG
32875: PUSH
32876: LD_INT 4
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 4
32886: NEG
32887: PUSH
32888: LD_INT 5
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: LD_INT 4
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: NEG
32911: PUSH
32912: LD_INT 3
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 4
32922: NEG
32923: PUSH
32924: LD_INT 3
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 5
32934: NEG
32935: PUSH
32936: LD_INT 4
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 5
32946: NEG
32947: PUSH
32948: LD_INT 5
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 3
32958: NEG
32959: PUSH
32960: LD_INT 5
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 5
32970: NEG
32971: PUSH
32972: LD_INT 3
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: LD_INT 3
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 4
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 3
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 2
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 3
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 4
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 4
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 4
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 4
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 5
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 5
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 5
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33222: LD_ADDR_VAR 0 32
33226: PUSH
33227: LD_INT 4
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 4
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 4
33274: NEG
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 5
33285: NEG
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 5
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 5
33308: NEG
33309: PUSH
33310: LD_INT 2
33312: NEG
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 3
33320: NEG
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: NEG
33332: PUSH
33333: LD_INT 3
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: LD_INT 4
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 2
33367: NEG
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 3
33379: NEG
33380: PUSH
33381: LD_INT 2
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 4
33391: NEG
33392: PUSH
33393: LD_INT 3
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 4
33403: NEG
33404: PUSH
33405: LD_INT 4
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 4
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 4
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 4
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 5
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 4
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 3
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 3
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 4
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 5
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: LD_INT 5
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: LD_INT 1
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 4
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 4
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 3
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: LD_INT 2
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 4
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 4
33634: PUSH
33635: LD_INT 4
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 4
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 5
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 5
33664: PUSH
33665: LD_INT 5
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 4
33674: PUSH
33675: LD_INT 5
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: LD_INT 4
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 3
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 5
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33769: LD_ADDR_VAR 0 33
33773: PUSH
33774: LD_INT 4
33776: NEG
33777: PUSH
33778: LD_INT 4
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 4
33788: NEG
33789: PUSH
33790: LD_INT 5
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 3
33800: NEG
33801: PUSH
33802: LD_INT 4
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 3
33812: NEG
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 4
33824: NEG
33825: PUSH
33826: LD_INT 3
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 5
33836: NEG
33837: PUSH
33838: LD_INT 4
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 5
33848: NEG
33849: PUSH
33850: LD_INT 5
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 3
33860: NEG
33861: PUSH
33862: LD_INT 5
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 5
33872: NEG
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 3
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 4
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: LD_INT 3
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: LD_INT 4
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: LD_INT 2
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: LD_INT 4
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 4
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 4
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 5
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 5
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 4
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 3
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 5
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 3
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 4
34099: PUSH
34100: LD_INT 3
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 4
34109: PUSH
34110: LD_INT 4
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 3
34119: PUSH
34120: LD_INT 4
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 4
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 4
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 4
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: LD_INT 5
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 5
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 4
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: NEG
34231: PUSH
34232: LD_INT 3
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 5
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: LD_INT 3
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34307: LD_ADDR_VAR 0 34
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 4
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 5
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 4
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 3
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: LD_INT 4
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 5
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 3
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: LD_INT 5
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 4
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 4
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 3
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 2
34488: PUSH
34489: LD_INT 2
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 4
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 4
34519: PUSH
34520: LD_INT 3
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 5
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: LD_INT 5
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 4
34549: PUSH
34550: LD_INT 5
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 3
34559: PUSH
34560: LD_INT 4
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 3
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 5
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 5
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 3
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 3
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 4
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 4
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: NEG
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 4
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 4
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 3
34726: NEG
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 4
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 5
34748: NEG
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 5
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 5
34771: NEG
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 3
34783: NEG
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: ST_TO_ADDR
// end ; end ;
34839: GO 34842
34841: POP
// case btype of b_depot , b_warehouse :
34842: LD_VAR 0 1
34846: PUSH
34847: LD_INT 0
34849: DOUBLE
34850: EQUAL
34851: IFTRUE 34861
34853: LD_INT 1
34855: DOUBLE
34856: EQUAL
34857: IFTRUE 34861
34859: GO 35062
34861: POP
// case nation of nation_american :
34862: LD_VAR 0 5
34866: PUSH
34867: LD_INT 1
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34875
34873: GO 34931
34875: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
34876: LD_ADDR_VAR 0 9
34880: PUSH
34881: LD_VAR 0 11
34885: PUSH
34886: LD_VAR 0 12
34890: PUSH
34891: LD_VAR 0 13
34895: PUSH
34896: LD_VAR 0 14
34900: PUSH
34901: LD_VAR 0 15
34905: PUSH
34906: LD_VAR 0 16
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: PUSH
34919: LD_VAR 0 4
34923: PUSH
34924: LD_INT 1
34926: PLUS
34927: ARRAY
34928: ST_TO_ADDR
34929: GO 35060
34931: LD_INT 2
34933: DOUBLE
34934: EQUAL
34935: IFTRUE 34939
34937: GO 34995
34939: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
34940: LD_ADDR_VAR 0 9
34944: PUSH
34945: LD_VAR 0 17
34949: PUSH
34950: LD_VAR 0 18
34954: PUSH
34955: LD_VAR 0 19
34959: PUSH
34960: LD_VAR 0 20
34964: PUSH
34965: LD_VAR 0 21
34969: PUSH
34970: LD_VAR 0 22
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: PUSH
34983: LD_VAR 0 4
34987: PUSH
34988: LD_INT 1
34990: PLUS
34991: ARRAY
34992: ST_TO_ADDR
34993: GO 35060
34995: LD_INT 3
34997: DOUBLE
34998: EQUAL
34999: IFTRUE 35003
35001: GO 35059
35003: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35004: LD_ADDR_VAR 0 9
35008: PUSH
35009: LD_VAR 0 23
35013: PUSH
35014: LD_VAR 0 24
35018: PUSH
35019: LD_VAR 0 25
35023: PUSH
35024: LD_VAR 0 26
35028: PUSH
35029: LD_VAR 0 27
35033: PUSH
35034: LD_VAR 0 28
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: PUSH
35047: LD_VAR 0 4
35051: PUSH
35052: LD_INT 1
35054: PLUS
35055: ARRAY
35056: ST_TO_ADDR
35057: GO 35060
35059: POP
35060: GO 35615
35062: LD_INT 2
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35076
35068: LD_INT 3
35070: DOUBLE
35071: EQUAL
35072: IFTRUE 35076
35074: GO 35132
35076: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35077: LD_ADDR_VAR 0 9
35081: PUSH
35082: LD_VAR 0 29
35086: PUSH
35087: LD_VAR 0 30
35091: PUSH
35092: LD_VAR 0 31
35096: PUSH
35097: LD_VAR 0 32
35101: PUSH
35102: LD_VAR 0 33
35106: PUSH
35107: LD_VAR 0 34
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: PUSH
35120: LD_VAR 0 4
35124: PUSH
35125: LD_INT 1
35127: PLUS
35128: ARRAY
35129: ST_TO_ADDR
35130: GO 35615
35132: LD_INT 16
35134: DOUBLE
35135: EQUAL
35136: IFTRUE 35194
35138: LD_INT 17
35140: DOUBLE
35141: EQUAL
35142: IFTRUE 35194
35144: LD_INT 18
35146: DOUBLE
35147: EQUAL
35148: IFTRUE 35194
35150: LD_INT 19
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35194
35156: LD_INT 22
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35194
35162: LD_INT 20
35164: DOUBLE
35165: EQUAL
35166: IFTRUE 35194
35168: LD_INT 21
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35194
35174: LD_INT 23
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35194
35180: LD_INT 24
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35194
35186: LD_INT 25
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35250
35194: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35195: LD_ADDR_VAR 0 9
35199: PUSH
35200: LD_VAR 0 35
35204: PUSH
35205: LD_VAR 0 36
35209: PUSH
35210: LD_VAR 0 37
35214: PUSH
35215: LD_VAR 0 38
35219: PUSH
35220: LD_VAR 0 39
35224: PUSH
35225: LD_VAR 0 40
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: PUSH
35238: LD_VAR 0 4
35242: PUSH
35243: LD_INT 1
35245: PLUS
35246: ARRAY
35247: ST_TO_ADDR
35248: GO 35615
35250: LD_INT 6
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35306
35256: LD_INT 7
35258: DOUBLE
35259: EQUAL
35260: IFTRUE 35306
35262: LD_INT 8
35264: DOUBLE
35265: EQUAL
35266: IFTRUE 35306
35268: LD_INT 13
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35306
35274: LD_INT 12
35276: DOUBLE
35277: EQUAL
35278: IFTRUE 35306
35280: LD_INT 15
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35306
35286: LD_INT 11
35288: DOUBLE
35289: EQUAL
35290: IFTRUE 35306
35292: LD_INT 14
35294: DOUBLE
35295: EQUAL
35296: IFTRUE 35306
35298: LD_INT 10
35300: DOUBLE
35301: EQUAL
35302: IFTRUE 35306
35304: GO 35362
35306: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
35307: LD_ADDR_VAR 0 9
35311: PUSH
35312: LD_VAR 0 41
35316: PUSH
35317: LD_VAR 0 42
35321: PUSH
35322: LD_VAR 0 43
35326: PUSH
35327: LD_VAR 0 44
35331: PUSH
35332: LD_VAR 0 45
35336: PUSH
35337: LD_VAR 0 46
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: PUSH
35350: LD_VAR 0 4
35354: PUSH
35355: LD_INT 1
35357: PLUS
35358: ARRAY
35359: ST_TO_ADDR
35360: GO 35615
35362: LD_INT 36
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35370
35368: GO 35426
35370: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35371: LD_ADDR_VAR 0 9
35375: PUSH
35376: LD_VAR 0 47
35380: PUSH
35381: LD_VAR 0 48
35385: PUSH
35386: LD_VAR 0 49
35390: PUSH
35391: LD_VAR 0 50
35395: PUSH
35396: LD_VAR 0 51
35400: PUSH
35401: LD_VAR 0 52
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: PUSH
35414: LD_VAR 0 4
35418: PUSH
35419: LD_INT 1
35421: PLUS
35422: ARRAY
35423: ST_TO_ADDR
35424: GO 35615
35426: LD_INT 4
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35452
35432: LD_INT 5
35434: DOUBLE
35435: EQUAL
35436: IFTRUE 35452
35438: LD_INT 34
35440: DOUBLE
35441: EQUAL
35442: IFTRUE 35452
35444: LD_INT 37
35446: DOUBLE
35447: EQUAL
35448: IFTRUE 35452
35450: GO 35508
35452: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35453: LD_ADDR_VAR 0 9
35457: PUSH
35458: LD_VAR 0 53
35462: PUSH
35463: LD_VAR 0 54
35467: PUSH
35468: LD_VAR 0 55
35472: PUSH
35473: LD_VAR 0 56
35477: PUSH
35478: LD_VAR 0 57
35482: PUSH
35483: LD_VAR 0 58
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: PUSH
35496: LD_VAR 0 4
35500: PUSH
35501: LD_INT 1
35503: PLUS
35504: ARRAY
35505: ST_TO_ADDR
35506: GO 35615
35508: LD_INT 31
35510: DOUBLE
35511: EQUAL
35512: IFTRUE 35558
35514: LD_INT 32
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35558
35520: LD_INT 33
35522: DOUBLE
35523: EQUAL
35524: IFTRUE 35558
35526: LD_INT 27
35528: DOUBLE
35529: EQUAL
35530: IFTRUE 35558
35532: LD_INT 26
35534: DOUBLE
35535: EQUAL
35536: IFTRUE 35558
35538: LD_INT 28
35540: DOUBLE
35541: EQUAL
35542: IFTRUE 35558
35544: LD_INT 29
35546: DOUBLE
35547: EQUAL
35548: IFTRUE 35558
35550: LD_INT 30
35552: DOUBLE
35553: EQUAL
35554: IFTRUE 35558
35556: GO 35614
35558: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
35559: LD_ADDR_VAR 0 9
35563: PUSH
35564: LD_VAR 0 59
35568: PUSH
35569: LD_VAR 0 60
35573: PUSH
35574: LD_VAR 0 61
35578: PUSH
35579: LD_VAR 0 62
35583: PUSH
35584: LD_VAR 0 63
35588: PUSH
35589: LD_VAR 0 64
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: PUSH
35602: LD_VAR 0 4
35606: PUSH
35607: LD_INT 1
35609: PLUS
35610: ARRAY
35611: ST_TO_ADDR
35612: GO 35615
35614: POP
// temp_list2 = [ ] ;
35615: LD_ADDR_VAR 0 10
35619: PUSH
35620: EMPTY
35621: ST_TO_ADDR
// for i in temp_list do
35622: LD_ADDR_VAR 0 8
35626: PUSH
35627: LD_VAR 0 9
35631: PUSH
35632: FOR_IN
35633: IFFALSE 35685
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35635: LD_ADDR_VAR 0 10
35639: PUSH
35640: LD_VAR 0 10
35644: PUSH
35645: LD_VAR 0 8
35649: PUSH
35650: LD_INT 1
35652: ARRAY
35653: PUSH
35654: LD_VAR 0 2
35658: PLUS
35659: PUSH
35660: LD_VAR 0 8
35664: PUSH
35665: LD_INT 2
35667: ARRAY
35668: PUSH
35669: LD_VAR 0 3
35673: PLUS
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: ADD
35682: ST_TO_ADDR
35683: GO 35632
35685: POP
35686: POP
// result = temp_list2 ;
35687: LD_ADDR_VAR 0 7
35691: PUSH
35692: LD_VAR 0 10
35696: ST_TO_ADDR
// end ;
35697: LD_VAR 0 7
35701: RET
// export function EnemyInRange ( unit , dist ) ; begin
35702: LD_INT 0
35704: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35705: LD_ADDR_VAR 0 3
35709: PUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: CALL_OW 255
35719: PPUSH
35720: LD_VAR 0 1
35724: PPUSH
35725: CALL_OW 250
35729: PPUSH
35730: LD_VAR 0 1
35734: PPUSH
35735: CALL_OW 251
35739: PPUSH
35740: LD_VAR 0 2
35744: PPUSH
35745: CALL 9806 0 4
35749: PUSH
35750: LD_INT 4
35752: ARRAY
35753: ST_TO_ADDR
// end ;
35754: LD_VAR 0 3
35758: RET
// export function PlayerSeeMe ( unit ) ; begin
35759: LD_INT 0
35761: PPUSH
// result := See ( your_side , unit ) ;
35762: LD_ADDR_VAR 0 2
35766: PUSH
35767: LD_OWVAR 2
35771: PPUSH
35772: LD_VAR 0 1
35776: PPUSH
35777: CALL_OW 292
35781: ST_TO_ADDR
// end ;
35782: LD_VAR 0 2
35786: RET
// export function ReverseDir ( unit ) ; begin
35787: LD_INT 0
35789: PPUSH
// if not unit then
35790: LD_VAR 0 1
35794: NOT
35795: IFFALSE 35799
// exit ;
35797: GO 35822
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35799: LD_ADDR_VAR 0 2
35803: PUSH
35804: LD_VAR 0 1
35808: PPUSH
35809: CALL_OW 254
35813: PUSH
35814: LD_INT 3
35816: PLUS
35817: PUSH
35818: LD_INT 6
35820: MOD
35821: ST_TO_ADDR
// end ;
35822: LD_VAR 0 2
35826: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35827: LD_INT 0
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
35833: PPUSH
// if not hexes then
35834: LD_VAR 0 2
35838: NOT
35839: IFFALSE 35843
// exit ;
35841: GO 35991
// dist := 9999 ;
35843: LD_ADDR_VAR 0 5
35847: PUSH
35848: LD_INT 9999
35850: ST_TO_ADDR
// for i = 1 to hexes do
35851: LD_ADDR_VAR 0 4
35855: PUSH
35856: DOUBLE
35857: LD_INT 1
35859: DEC
35860: ST_TO_ADDR
35861: LD_VAR 0 2
35865: PUSH
35866: FOR_TO
35867: IFFALSE 35979
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35869: LD_VAR 0 1
35873: PPUSH
35874: LD_VAR 0 2
35878: PUSH
35879: LD_VAR 0 4
35883: ARRAY
35884: PUSH
35885: LD_INT 1
35887: ARRAY
35888: PPUSH
35889: LD_VAR 0 2
35893: PUSH
35894: LD_VAR 0 4
35898: ARRAY
35899: PUSH
35900: LD_INT 2
35902: ARRAY
35903: PPUSH
35904: CALL_OW 297
35908: PUSH
35909: LD_VAR 0 5
35913: LESS
35914: IFFALSE 35977
// begin hex := hexes [ i ] ;
35916: LD_ADDR_VAR 0 7
35920: PUSH
35921: LD_VAR 0 2
35925: PUSH
35926: LD_VAR 0 4
35930: ARRAY
35931: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35932: LD_ADDR_VAR 0 5
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: LD_VAR 0 2
35946: PUSH
35947: LD_VAR 0 4
35951: ARRAY
35952: PUSH
35953: LD_INT 1
35955: ARRAY
35956: PPUSH
35957: LD_VAR 0 2
35961: PUSH
35962: LD_VAR 0 4
35966: ARRAY
35967: PUSH
35968: LD_INT 2
35970: ARRAY
35971: PPUSH
35972: CALL_OW 297
35976: ST_TO_ADDR
// end ; end ;
35977: GO 35866
35979: POP
35980: POP
// result := hex ;
35981: LD_ADDR_VAR 0 3
35985: PUSH
35986: LD_VAR 0 7
35990: ST_TO_ADDR
// end ;
35991: LD_VAR 0 3
35995: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35996: LD_INT 0
35998: PPUSH
35999: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36000: LD_VAR 0 1
36004: NOT
36005: PUSH
36006: LD_VAR 0 1
36010: PUSH
36011: LD_INT 21
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 23
36023: PUSH
36024: LD_INT 2
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PPUSH
36035: CALL_OW 69
36039: IN
36040: NOT
36041: OR
36042: IFFALSE 36046
// exit ;
36044: GO 36093
// for i = 1 to 3 do
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: DOUBLE
36052: LD_INT 1
36054: DEC
36055: ST_TO_ADDR
36056: LD_INT 3
36058: PUSH
36059: FOR_TO
36060: IFFALSE 36091
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36062: LD_VAR 0 1
36066: PPUSH
36067: CALL_OW 250
36071: PPUSH
36072: LD_VAR 0 1
36076: PPUSH
36077: CALL_OW 251
36081: PPUSH
36082: LD_INT 1
36084: PPUSH
36085: CALL_OW 453
36089: GO 36059
36091: POP
36092: POP
// end ;
36093: LD_VAR 0 2
36097: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36098: LD_INT 0
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36106: LD_VAR 0 1
36110: NOT
36111: PUSH
36112: LD_VAR 0 2
36116: NOT
36117: OR
36118: PUSH
36119: LD_VAR 0 1
36123: PPUSH
36124: CALL_OW 314
36128: OR
36129: IFFALSE 36133
// exit ;
36131: GO 36574
// x := GetX ( enemy_unit ) ;
36133: LD_ADDR_VAR 0 7
36137: PUSH
36138: LD_VAR 0 2
36142: PPUSH
36143: CALL_OW 250
36147: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36148: LD_ADDR_VAR 0 8
36152: PUSH
36153: LD_VAR 0 2
36157: PPUSH
36158: CALL_OW 251
36162: ST_TO_ADDR
// if not x or not y then
36163: LD_VAR 0 7
36167: NOT
36168: PUSH
36169: LD_VAR 0 8
36173: NOT
36174: OR
36175: IFFALSE 36179
// exit ;
36177: GO 36574
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36179: LD_ADDR_VAR 0 6
36183: PUSH
36184: LD_VAR 0 7
36188: PPUSH
36189: LD_INT 0
36191: PPUSH
36192: LD_INT 4
36194: PPUSH
36195: CALL_OW 272
36199: PUSH
36200: LD_VAR 0 8
36204: PPUSH
36205: LD_INT 0
36207: PPUSH
36208: LD_INT 4
36210: PPUSH
36211: CALL_OW 273
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_VAR 0 7
36224: PPUSH
36225: LD_INT 1
36227: PPUSH
36228: LD_INT 4
36230: PPUSH
36231: CALL_OW 272
36235: PUSH
36236: LD_VAR 0 8
36240: PPUSH
36241: LD_INT 1
36243: PPUSH
36244: LD_INT 4
36246: PPUSH
36247: CALL_OW 273
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_VAR 0 7
36260: PPUSH
36261: LD_INT 2
36263: PPUSH
36264: LD_INT 4
36266: PPUSH
36267: CALL_OW 272
36271: PUSH
36272: LD_VAR 0 8
36276: PPUSH
36277: LD_INT 2
36279: PPUSH
36280: LD_INT 4
36282: PPUSH
36283: CALL_OW 273
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_VAR 0 7
36296: PPUSH
36297: LD_INT 3
36299: PPUSH
36300: LD_INT 4
36302: PPUSH
36303: CALL_OW 272
36307: PUSH
36308: LD_VAR 0 8
36312: PPUSH
36313: LD_INT 3
36315: PPUSH
36316: LD_INT 4
36318: PPUSH
36319: CALL_OW 273
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_VAR 0 7
36332: PPUSH
36333: LD_INT 4
36335: PPUSH
36336: LD_INT 4
36338: PPUSH
36339: CALL_OW 272
36343: PUSH
36344: LD_VAR 0 8
36348: PPUSH
36349: LD_INT 4
36351: PPUSH
36352: LD_INT 4
36354: PPUSH
36355: CALL_OW 273
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_VAR 0 7
36368: PPUSH
36369: LD_INT 5
36371: PPUSH
36372: LD_INT 4
36374: PPUSH
36375: CALL_OW 272
36379: PUSH
36380: LD_VAR 0 8
36384: PPUSH
36385: LD_INT 5
36387: PPUSH
36388: LD_INT 4
36390: PPUSH
36391: CALL_OW 273
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// for i = tmp downto 1 do
36408: LD_ADDR_VAR 0 4
36412: PUSH
36413: DOUBLE
36414: LD_VAR 0 6
36418: INC
36419: ST_TO_ADDR
36420: LD_INT 1
36422: PUSH
36423: FOR_DOWNTO
36424: IFFALSE 36525
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36426: LD_VAR 0 6
36430: PUSH
36431: LD_VAR 0 4
36435: ARRAY
36436: PUSH
36437: LD_INT 1
36439: ARRAY
36440: PPUSH
36441: LD_VAR 0 6
36445: PUSH
36446: LD_VAR 0 4
36450: ARRAY
36451: PUSH
36452: LD_INT 2
36454: ARRAY
36455: PPUSH
36456: CALL_OW 488
36460: NOT
36461: PUSH
36462: LD_VAR 0 6
36466: PUSH
36467: LD_VAR 0 4
36471: ARRAY
36472: PUSH
36473: LD_INT 1
36475: ARRAY
36476: PPUSH
36477: LD_VAR 0 6
36481: PUSH
36482: LD_VAR 0 4
36486: ARRAY
36487: PUSH
36488: LD_INT 2
36490: ARRAY
36491: PPUSH
36492: CALL_OW 428
36496: PUSH
36497: LD_INT 0
36499: NONEQUAL
36500: OR
36501: IFFALSE 36523
// tmp := Delete ( tmp , i ) ;
36503: LD_ADDR_VAR 0 6
36507: PUSH
36508: LD_VAR 0 6
36512: PPUSH
36513: LD_VAR 0 4
36517: PPUSH
36518: CALL_OW 3
36522: ST_TO_ADDR
36523: GO 36423
36525: POP
36526: POP
// j := GetClosestHex ( unit , tmp ) ;
36527: LD_ADDR_VAR 0 5
36531: PUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: LD_VAR 0 6
36541: PPUSH
36542: CALL 35827 0 2
36546: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36547: LD_VAR 0 1
36551: PPUSH
36552: LD_VAR 0 5
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: PPUSH
36561: LD_VAR 0 5
36565: PUSH
36566: LD_INT 2
36568: ARRAY
36569: PPUSH
36570: CALL_OW 111
// end ;
36574: LD_VAR 0 3
36578: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36579: LD_INT 0
36581: PPUSH
36582: PPUSH
36583: PPUSH
// uc_side = 0 ;
36584: LD_ADDR_OWVAR 20
36588: PUSH
36589: LD_INT 0
36591: ST_TO_ADDR
// uc_nation = 0 ;
36592: LD_ADDR_OWVAR 21
36596: PUSH
36597: LD_INT 0
36599: ST_TO_ADDR
// InitHc ;
36600: CALL_OW 19
// InitVc ;
36604: CALL_OW 20
// if mastodonts then
36608: LD_VAR 0 6
36612: IFFALSE 36679
// for i = 1 to mastodonts do
36614: LD_ADDR_VAR 0 11
36618: PUSH
36619: DOUBLE
36620: LD_INT 1
36622: DEC
36623: ST_TO_ADDR
36624: LD_VAR 0 6
36628: PUSH
36629: FOR_TO
36630: IFFALSE 36677
// begin vc_chassis := 31 ;
36632: LD_ADDR_OWVAR 37
36636: PUSH
36637: LD_INT 31
36639: ST_TO_ADDR
// vc_control := control_rider ;
36640: LD_ADDR_OWVAR 38
36644: PUSH
36645: LD_INT 4
36647: ST_TO_ADDR
// animal := CreateVehicle ;
36648: LD_ADDR_VAR 0 12
36652: PUSH
36653: CALL_OW 45
36657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36658: LD_VAR 0 12
36662: PPUSH
36663: LD_VAR 0 8
36667: PPUSH
36668: LD_INT 0
36670: PPUSH
36671: CALL 38748 0 3
// end ;
36675: GO 36629
36677: POP
36678: POP
// if horses then
36679: LD_VAR 0 5
36683: IFFALSE 36750
// for i = 1 to horses do
36685: LD_ADDR_VAR 0 11
36689: PUSH
36690: DOUBLE
36691: LD_INT 1
36693: DEC
36694: ST_TO_ADDR
36695: LD_VAR 0 5
36699: PUSH
36700: FOR_TO
36701: IFFALSE 36748
// begin hc_class := 21 ;
36703: LD_ADDR_OWVAR 28
36707: PUSH
36708: LD_INT 21
36710: ST_TO_ADDR
// hc_gallery :=  ;
36711: LD_ADDR_OWVAR 33
36715: PUSH
36716: LD_STRING 
36718: ST_TO_ADDR
// animal := CreateHuman ;
36719: LD_ADDR_VAR 0 12
36723: PUSH
36724: CALL_OW 44
36728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36729: LD_VAR 0 12
36733: PPUSH
36734: LD_VAR 0 8
36738: PPUSH
36739: LD_INT 0
36741: PPUSH
36742: CALL 38748 0 3
// end ;
36746: GO 36700
36748: POP
36749: POP
// if birds then
36750: LD_VAR 0 1
36754: IFFALSE 36821
// for i = 1 to birds do
36756: LD_ADDR_VAR 0 11
36760: PUSH
36761: DOUBLE
36762: LD_INT 1
36764: DEC
36765: ST_TO_ADDR
36766: LD_VAR 0 1
36770: PUSH
36771: FOR_TO
36772: IFFALSE 36819
// begin hc_class = 18 ;
36774: LD_ADDR_OWVAR 28
36778: PUSH
36779: LD_INT 18
36781: ST_TO_ADDR
// hc_gallery =  ;
36782: LD_ADDR_OWVAR 33
36786: PUSH
36787: LD_STRING 
36789: ST_TO_ADDR
// animal := CreateHuman ;
36790: LD_ADDR_VAR 0 12
36794: PUSH
36795: CALL_OW 44
36799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36800: LD_VAR 0 12
36804: PPUSH
36805: LD_VAR 0 8
36809: PPUSH
36810: LD_INT 0
36812: PPUSH
36813: CALL 38748 0 3
// end ;
36817: GO 36771
36819: POP
36820: POP
// if tigers then
36821: LD_VAR 0 2
36825: IFFALSE 36909
// for i = 1 to tigers do
36827: LD_ADDR_VAR 0 11
36831: PUSH
36832: DOUBLE
36833: LD_INT 1
36835: DEC
36836: ST_TO_ADDR
36837: LD_VAR 0 2
36841: PUSH
36842: FOR_TO
36843: IFFALSE 36907
// begin hc_class = class_tiger ;
36845: LD_ADDR_OWVAR 28
36849: PUSH
36850: LD_INT 14
36852: ST_TO_ADDR
// hc_gallery =  ;
36853: LD_ADDR_OWVAR 33
36857: PUSH
36858: LD_STRING 
36860: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36861: LD_ADDR_OWVAR 35
36865: PUSH
36866: LD_INT 7
36868: NEG
36869: PPUSH
36870: LD_INT 7
36872: PPUSH
36873: CALL_OW 12
36877: ST_TO_ADDR
// animal := CreateHuman ;
36878: LD_ADDR_VAR 0 12
36882: PUSH
36883: CALL_OW 44
36887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36888: LD_VAR 0 12
36892: PPUSH
36893: LD_VAR 0 8
36897: PPUSH
36898: LD_INT 0
36900: PPUSH
36901: CALL 38748 0 3
// end ;
36905: GO 36842
36907: POP
36908: POP
// if apemans then
36909: LD_VAR 0 3
36913: IFFALSE 37036
// for i = 1 to apemans do
36915: LD_ADDR_VAR 0 11
36919: PUSH
36920: DOUBLE
36921: LD_INT 1
36923: DEC
36924: ST_TO_ADDR
36925: LD_VAR 0 3
36929: PUSH
36930: FOR_TO
36931: IFFALSE 37034
// begin hc_class = class_apeman ;
36933: LD_ADDR_OWVAR 28
36937: PUSH
36938: LD_INT 12
36940: ST_TO_ADDR
// hc_gallery =  ;
36941: LD_ADDR_OWVAR 33
36945: PUSH
36946: LD_STRING 
36948: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
36949: LD_ADDR_OWVAR 35
36953: PUSH
36954: LD_INT 5
36956: NEG
36957: PPUSH
36958: LD_INT 5
36960: PPUSH
36961: CALL_OW 12
36965: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36966: LD_ADDR_OWVAR 31
36970: PUSH
36971: LD_INT 1
36973: PPUSH
36974: LD_INT 3
36976: PPUSH
36977: CALL_OW 12
36981: PUSH
36982: LD_INT 1
36984: PPUSH
36985: LD_INT 3
36987: PPUSH
36988: CALL_OW 12
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: ST_TO_ADDR
// animal := CreateHuman ;
37005: LD_ADDR_VAR 0 12
37009: PUSH
37010: CALL_OW 44
37014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37015: LD_VAR 0 12
37019: PPUSH
37020: LD_VAR 0 8
37024: PPUSH
37025: LD_INT 0
37027: PPUSH
37028: CALL 38748 0 3
// end ;
37032: GO 36930
37034: POP
37035: POP
// if enchidnas then
37036: LD_VAR 0 4
37040: IFFALSE 37107
// for i = 1 to enchidnas do
37042: LD_ADDR_VAR 0 11
37046: PUSH
37047: DOUBLE
37048: LD_INT 1
37050: DEC
37051: ST_TO_ADDR
37052: LD_VAR 0 4
37056: PUSH
37057: FOR_TO
37058: IFFALSE 37105
// begin hc_class = 13 ;
37060: LD_ADDR_OWVAR 28
37064: PUSH
37065: LD_INT 13
37067: ST_TO_ADDR
// hc_gallery =  ;
37068: LD_ADDR_OWVAR 33
37072: PUSH
37073: LD_STRING 
37075: ST_TO_ADDR
// animal := CreateHuman ;
37076: LD_ADDR_VAR 0 12
37080: PUSH
37081: CALL_OW 44
37085: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37086: LD_VAR 0 12
37090: PPUSH
37091: LD_VAR 0 8
37095: PPUSH
37096: LD_INT 0
37098: PPUSH
37099: CALL 38748 0 3
// end ;
37103: GO 37057
37105: POP
37106: POP
// if fishes then
37107: LD_VAR 0 7
37111: IFFALSE 37178
// for i = 1 to fishes do
37113: LD_ADDR_VAR 0 11
37117: PUSH
37118: DOUBLE
37119: LD_INT 1
37121: DEC
37122: ST_TO_ADDR
37123: LD_VAR 0 7
37127: PUSH
37128: FOR_TO
37129: IFFALSE 37176
// begin hc_class = 20 ;
37131: LD_ADDR_OWVAR 28
37135: PUSH
37136: LD_INT 20
37138: ST_TO_ADDR
// hc_gallery =  ;
37139: LD_ADDR_OWVAR 33
37143: PUSH
37144: LD_STRING 
37146: ST_TO_ADDR
// animal := CreateHuman ;
37147: LD_ADDR_VAR 0 12
37151: PUSH
37152: CALL_OW 44
37156: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37157: LD_VAR 0 12
37161: PPUSH
37162: LD_VAR 0 9
37166: PPUSH
37167: LD_INT 0
37169: PPUSH
37170: CALL 38748 0 3
// end ;
37174: GO 37128
37176: POP
37177: POP
// end ;
37178: LD_VAR 0 10
37182: RET
// export function WantHeal ( sci , unit ) ; begin
37183: LD_INT 0
37185: PPUSH
// if GetTaskList ( sci ) > 0 then
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL_OW 437
37195: PUSH
37196: LD_INT 0
37198: GREATER
37199: IFFALSE 37269
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37201: LD_VAR 0 1
37205: PPUSH
37206: CALL_OW 437
37210: PUSH
37211: LD_INT 1
37213: ARRAY
37214: PUSH
37215: LD_INT 1
37217: ARRAY
37218: PUSH
37219: LD_STRING l
37221: EQUAL
37222: PUSH
37223: LD_VAR 0 1
37227: PPUSH
37228: CALL_OW 437
37232: PUSH
37233: LD_INT 1
37235: ARRAY
37236: PUSH
37237: LD_INT 4
37239: ARRAY
37240: PUSH
37241: LD_VAR 0 2
37245: EQUAL
37246: AND
37247: IFFALSE 37259
// result := true else
37249: LD_ADDR_VAR 0 3
37253: PUSH
37254: LD_INT 1
37256: ST_TO_ADDR
37257: GO 37267
// result := false ;
37259: LD_ADDR_VAR 0 3
37263: PUSH
37264: LD_INT 0
37266: ST_TO_ADDR
// end else
37267: GO 37277
// result := false ;
37269: LD_ADDR_VAR 0 3
37273: PUSH
37274: LD_INT 0
37276: ST_TO_ADDR
// end ;
37277: LD_VAR 0 3
37281: RET
// export function HealTarget ( sci ) ; begin
37282: LD_INT 0
37284: PPUSH
// if not sci then
37285: LD_VAR 0 1
37289: NOT
37290: IFFALSE 37294
// exit ;
37292: GO 37359
// result := 0 ;
37294: LD_ADDR_VAR 0 2
37298: PUSH
37299: LD_INT 0
37301: ST_TO_ADDR
// if GetTaskList ( sci ) then
37302: LD_VAR 0 1
37306: PPUSH
37307: CALL_OW 437
37311: IFFALSE 37359
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37313: LD_VAR 0 1
37317: PPUSH
37318: CALL_OW 437
37322: PUSH
37323: LD_INT 1
37325: ARRAY
37326: PUSH
37327: LD_INT 1
37329: ARRAY
37330: PUSH
37331: LD_STRING l
37333: EQUAL
37334: IFFALSE 37359
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37336: LD_ADDR_VAR 0 2
37340: PUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: CALL_OW 437
37350: PUSH
37351: LD_INT 1
37353: ARRAY
37354: PUSH
37355: LD_INT 4
37357: ARRAY
37358: ST_TO_ADDR
// end ;
37359: LD_VAR 0 2
37363: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37364: LD_INT 0
37366: PPUSH
37367: PPUSH
37368: PPUSH
37369: PPUSH
// if not base_units then
37370: LD_VAR 0 1
37374: NOT
37375: IFFALSE 37379
// exit ;
37377: GO 37466
// result := false ;
37379: LD_ADDR_VAR 0 2
37383: PUSH
37384: LD_INT 0
37386: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37387: LD_ADDR_VAR 0 5
37391: PUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: LD_INT 21
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PPUSH
37407: CALL_OW 72
37411: ST_TO_ADDR
// if not tmp then
37412: LD_VAR 0 5
37416: NOT
37417: IFFALSE 37421
// exit ;
37419: GO 37466
// for i in tmp do
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_VAR 0 5
37430: PUSH
37431: FOR_IN
37432: IFFALSE 37464
// begin result := EnemyInRange ( i , 22 ) ;
37434: LD_ADDR_VAR 0 2
37438: PUSH
37439: LD_VAR 0 3
37443: PPUSH
37444: LD_INT 22
37446: PPUSH
37447: CALL 35702 0 2
37451: ST_TO_ADDR
// if result then
37452: LD_VAR 0 2
37456: IFFALSE 37462
// exit ;
37458: POP
37459: POP
37460: GO 37466
// end ;
37462: GO 37431
37464: POP
37465: POP
// end ;
37466: LD_VAR 0 2
37470: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37471: LD_INT 0
37473: PPUSH
37474: PPUSH
// if not units then
37475: LD_VAR 0 1
37479: NOT
37480: IFFALSE 37484
// exit ;
37482: GO 37554
// result := [ ] ;
37484: LD_ADDR_VAR 0 3
37488: PUSH
37489: EMPTY
37490: ST_TO_ADDR
// for i in units do
37491: LD_ADDR_VAR 0 4
37495: PUSH
37496: LD_VAR 0 1
37500: PUSH
37501: FOR_IN
37502: IFFALSE 37552
// if GetTag ( i ) = tag then
37504: LD_VAR 0 4
37508: PPUSH
37509: CALL_OW 110
37513: PUSH
37514: LD_VAR 0 2
37518: EQUAL
37519: IFFALSE 37550
// result := Insert ( result , result + 1 , i ) ;
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_VAR 0 3
37530: PPUSH
37531: LD_VAR 0 3
37535: PUSH
37536: LD_INT 1
37538: PLUS
37539: PPUSH
37540: LD_VAR 0 4
37544: PPUSH
37545: CALL_OW 2
37549: ST_TO_ADDR
37550: GO 37501
37552: POP
37553: POP
// end ;
37554: LD_VAR 0 3
37558: RET
// export function IsDriver ( un ) ; begin
37559: LD_INT 0
37561: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37562: LD_ADDR_VAR 0 2
37566: PUSH
37567: LD_VAR 0 1
37571: PUSH
37572: LD_INT 55
37574: PUSH
37575: EMPTY
37576: LIST
37577: PPUSH
37578: CALL_OW 69
37582: IN
37583: ST_TO_ADDR
// end ;
37584: LD_VAR 0 2
37588: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37589: LD_INT 0
37591: PPUSH
37592: PPUSH
// list := [ ] ;
37593: LD_ADDR_VAR 0 5
37597: PUSH
37598: EMPTY
37599: ST_TO_ADDR
// case d of 0 :
37600: LD_VAR 0 3
37604: PUSH
37605: LD_INT 0
37607: DOUBLE
37608: EQUAL
37609: IFTRUE 37613
37611: GO 37746
37613: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37614: LD_ADDR_VAR 0 5
37618: PUSH
37619: LD_VAR 0 1
37623: PUSH
37624: LD_INT 4
37626: MINUS
37627: PUSH
37628: LD_VAR 0 2
37632: PUSH
37633: LD_INT 4
37635: MINUS
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: PUSH
37645: LD_VAR 0 1
37649: PUSH
37650: LD_INT 3
37652: MINUS
37653: PUSH
37654: LD_VAR 0 2
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: LIST
37666: PUSH
37667: LD_VAR 0 1
37671: PUSH
37672: LD_INT 4
37674: PLUS
37675: PUSH
37676: LD_VAR 0 2
37680: PUSH
37681: LD_INT 4
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: PUSH
37689: LD_VAR 0 1
37693: PUSH
37694: LD_INT 3
37696: PLUS
37697: PUSH
37698: LD_VAR 0 2
37702: PUSH
37703: LD_INT 3
37705: PLUS
37706: PUSH
37707: LD_INT 5
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: LD_VAR 0 1
37719: PUSH
37720: LD_VAR 0 2
37724: PUSH
37725: LD_INT 4
37727: PLUS
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// end ; 1 :
37744: GO 38444
37746: LD_INT 1
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37754
37752: GO 37887
37754: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37755: LD_ADDR_VAR 0 5
37759: PUSH
37760: LD_VAR 0 1
37764: PUSH
37765: LD_VAR 0 2
37769: PUSH
37770: LD_INT 4
37772: MINUS
37773: PUSH
37774: LD_INT 3
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: PUSH
37782: LD_VAR 0 1
37786: PUSH
37787: LD_INT 3
37789: MINUS
37790: PUSH
37791: LD_VAR 0 2
37795: PUSH
37796: LD_INT 3
37798: MINUS
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: PUSH
37808: LD_VAR 0 1
37812: PUSH
37813: LD_INT 4
37815: MINUS
37816: PUSH
37817: LD_VAR 0 2
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: PUSH
37830: LD_VAR 0 1
37834: PUSH
37835: LD_VAR 0 2
37839: PUSH
37840: LD_INT 3
37842: PLUS
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: PUSH
37852: LD_VAR 0 1
37856: PUSH
37857: LD_INT 4
37859: PLUS
37860: PUSH
37861: LD_VAR 0 2
37865: PUSH
37866: LD_INT 4
37868: PLUS
37869: PUSH
37870: LD_INT 5
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: ST_TO_ADDR
// end ; 2 :
37885: GO 38444
37887: LD_INT 2
37889: DOUBLE
37890: EQUAL
37891: IFTRUE 37895
37893: GO 38024
37895: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37896: LD_ADDR_VAR 0 5
37900: PUSH
37901: LD_VAR 0 1
37905: PUSH
37906: LD_VAR 0 2
37910: PUSH
37911: LD_INT 3
37913: MINUS
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: PUSH
37923: LD_VAR 0 1
37927: PUSH
37928: LD_INT 4
37930: PLUS
37931: PUSH
37932: LD_VAR 0 2
37936: PUSH
37937: LD_INT 4
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: PUSH
37945: LD_VAR 0 1
37949: PUSH
37950: LD_VAR 0 2
37954: PUSH
37955: LD_INT 4
37957: PLUS
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: PUSH
37967: LD_VAR 0 1
37971: PUSH
37972: LD_INT 3
37974: MINUS
37975: PUSH
37976: LD_VAR 0 2
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: PUSH
37989: LD_VAR 0 1
37993: PUSH
37994: LD_INT 4
37996: MINUS
37997: PUSH
37998: LD_VAR 0 2
38002: PUSH
38003: LD_INT 4
38005: MINUS
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// end ; 3 :
38022: GO 38444
38024: LD_INT 3
38026: DOUBLE
38027: EQUAL
38028: IFTRUE 38032
38030: GO 38165
38032: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38033: LD_ADDR_VAR 0 5
38037: PUSH
38038: LD_VAR 0 1
38042: PUSH
38043: LD_INT 3
38045: PLUS
38046: PUSH
38047: LD_VAR 0 2
38051: PUSH
38052: LD_INT 4
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: PUSH
38060: LD_VAR 0 1
38064: PUSH
38065: LD_INT 4
38067: PLUS
38068: PUSH
38069: LD_VAR 0 2
38073: PUSH
38074: LD_INT 4
38076: PLUS
38077: PUSH
38078: LD_INT 5
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: PUSH
38086: LD_VAR 0 1
38090: PUSH
38091: LD_INT 4
38093: MINUS
38094: PUSH
38095: LD_VAR 0 2
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: PUSH
38108: LD_VAR 0 1
38112: PUSH
38113: LD_VAR 0 2
38117: PUSH
38118: LD_INT 4
38120: MINUS
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: PUSH
38130: LD_VAR 0 1
38134: PUSH
38135: LD_INT 3
38137: MINUS
38138: PUSH
38139: LD_VAR 0 2
38143: PUSH
38144: LD_INT 3
38146: MINUS
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: ST_TO_ADDR
// end ; 4 :
38163: GO 38444
38165: LD_INT 4
38167: DOUBLE
38168: EQUAL
38169: IFTRUE 38173
38171: GO 38306
38173: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38174: LD_ADDR_VAR 0 5
38178: PUSH
38179: LD_VAR 0 1
38183: PUSH
38184: LD_VAR 0 2
38188: PUSH
38189: LD_INT 4
38191: PLUS
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: PUSH
38201: LD_VAR 0 1
38205: PUSH
38206: LD_INT 3
38208: PLUS
38209: PUSH
38210: LD_VAR 0 2
38214: PUSH
38215: LD_INT 3
38217: PLUS
38218: PUSH
38219: LD_INT 5
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: PUSH
38227: LD_VAR 0 1
38231: PUSH
38232: LD_INT 4
38234: PLUS
38235: PUSH
38236: LD_VAR 0 2
38240: PUSH
38241: LD_INT 4
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: PUSH
38249: LD_VAR 0 1
38253: PUSH
38254: LD_VAR 0 2
38258: PUSH
38259: LD_INT 3
38261: MINUS
38262: PUSH
38263: LD_INT 3
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: PUSH
38271: LD_VAR 0 1
38275: PUSH
38276: LD_INT 4
38278: MINUS
38279: PUSH
38280: LD_VAR 0 2
38284: PUSH
38285: LD_INT 4
38287: MINUS
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// end ; 5 :
38304: GO 38444
38306: LD_INT 5
38308: DOUBLE
38309: EQUAL
38310: IFTRUE 38314
38312: GO 38443
38314: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38315: LD_ADDR_VAR 0 5
38319: PUSH
38320: LD_VAR 0 1
38324: PUSH
38325: LD_INT 4
38327: MINUS
38328: PUSH
38329: LD_VAR 0 2
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: PUSH
38342: LD_VAR 0 1
38346: PUSH
38347: LD_VAR 0 2
38351: PUSH
38352: LD_INT 4
38354: MINUS
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: PUSH
38364: LD_VAR 0 1
38368: PUSH
38369: LD_INT 4
38371: PLUS
38372: PUSH
38373: LD_VAR 0 2
38377: PUSH
38378: LD_INT 4
38380: PLUS
38381: PUSH
38382: LD_INT 5
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: PUSH
38390: LD_VAR 0 1
38394: PUSH
38395: LD_INT 3
38397: PLUS
38398: PUSH
38399: LD_VAR 0 2
38403: PUSH
38404: LD_INT 4
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: PUSH
38412: LD_VAR 0 1
38416: PUSH
38417: LD_VAR 0 2
38421: PUSH
38422: LD_INT 3
38424: PLUS
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: ST_TO_ADDR
// end ; end ;
38441: GO 38444
38443: POP
// result := list ;
38444: LD_ADDR_VAR 0 4
38448: PUSH
38449: LD_VAR 0 5
38453: ST_TO_ADDR
// end ;
38454: LD_VAR 0 4
38458: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38459: LD_INT 0
38461: PPUSH
38462: PPUSH
38463: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38464: LD_VAR 0 1
38468: NOT
38469: PUSH
38470: LD_VAR 0 2
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: LD_INT 3
38483: PUSH
38484: LD_INT 4
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: IN
38493: NOT
38494: OR
38495: IFFALSE 38499
// exit ;
38497: GO 38591
// tmp := [ ] ;
38499: LD_ADDR_VAR 0 5
38503: PUSH
38504: EMPTY
38505: ST_TO_ADDR
// for i in units do
38506: LD_ADDR_VAR 0 4
38510: PUSH
38511: LD_VAR 0 1
38515: PUSH
38516: FOR_IN
38517: IFFALSE 38560
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38519: LD_ADDR_VAR 0 5
38523: PUSH
38524: LD_VAR 0 5
38528: PPUSH
38529: LD_VAR 0 5
38533: PUSH
38534: LD_INT 1
38536: PLUS
38537: PPUSH
38538: LD_VAR 0 4
38542: PPUSH
38543: LD_VAR 0 2
38547: PPUSH
38548: CALL_OW 259
38552: PPUSH
38553: CALL_OW 2
38557: ST_TO_ADDR
38558: GO 38516
38560: POP
38561: POP
// if not tmp then
38562: LD_VAR 0 5
38566: NOT
38567: IFFALSE 38571
// exit ;
38569: GO 38591
// result := SortListByListDesc ( units , tmp ) ;
38571: LD_ADDR_VAR 0 3
38575: PUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: LD_VAR 0 5
38585: PPUSH
38586: CALL_OW 77
38590: ST_TO_ADDR
// end ;
38591: LD_VAR 0 3
38595: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38596: LD_INT 0
38598: PPUSH
38599: PPUSH
38600: PPUSH
// x := GetX ( building ) ;
38601: LD_ADDR_VAR 0 4
38605: PUSH
38606: LD_VAR 0 2
38610: PPUSH
38611: CALL_OW 250
38615: ST_TO_ADDR
// y := GetY ( building ) ;
38616: LD_ADDR_VAR 0 5
38620: PUSH
38621: LD_VAR 0 2
38625: PPUSH
38626: CALL_OW 251
38630: ST_TO_ADDR
// if GetTaskList ( unit ) then
38631: LD_VAR 0 1
38635: PPUSH
38636: CALL_OW 437
38640: IFFALSE 38735
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38642: LD_STRING e
38644: PUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 437
38654: PUSH
38655: LD_INT 1
38657: ARRAY
38658: PUSH
38659: LD_INT 1
38661: ARRAY
38662: EQUAL
38663: PUSH
38664: LD_VAR 0 4
38668: PUSH
38669: LD_VAR 0 1
38673: PPUSH
38674: CALL_OW 437
38678: PUSH
38679: LD_INT 1
38681: ARRAY
38682: PUSH
38683: LD_INT 2
38685: ARRAY
38686: EQUAL
38687: AND
38688: PUSH
38689: LD_VAR 0 5
38693: PUSH
38694: LD_VAR 0 1
38698: PPUSH
38699: CALL_OW 437
38703: PUSH
38704: LD_INT 1
38706: ARRAY
38707: PUSH
38708: LD_INT 3
38710: ARRAY
38711: EQUAL
38712: AND
38713: IFFALSE 38725
// result := true else
38715: LD_ADDR_VAR 0 3
38719: PUSH
38720: LD_INT 1
38722: ST_TO_ADDR
38723: GO 38733
// result := false ;
38725: LD_ADDR_VAR 0 3
38729: PUSH
38730: LD_INT 0
38732: ST_TO_ADDR
// end else
38733: GO 38743
// result := false ;
38735: LD_ADDR_VAR 0 3
38739: PUSH
38740: LD_INT 0
38742: ST_TO_ADDR
// end ;
38743: LD_VAR 0 3
38747: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38748: LD_INT 0
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
// if not unit or not area then
38754: LD_VAR 0 1
38758: NOT
38759: PUSH
38760: LD_VAR 0 2
38764: NOT
38765: OR
38766: IFFALSE 38770
// exit ;
38768: GO 38934
// tmp := AreaToList ( area , i ) ;
38770: LD_ADDR_VAR 0 6
38774: PUSH
38775: LD_VAR 0 2
38779: PPUSH
38780: LD_VAR 0 5
38784: PPUSH
38785: CALL_OW 517
38789: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38790: LD_ADDR_VAR 0 5
38794: PUSH
38795: DOUBLE
38796: LD_INT 1
38798: DEC
38799: ST_TO_ADDR
38800: LD_VAR 0 6
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: PUSH
38809: FOR_TO
38810: IFFALSE 38932
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38812: LD_ADDR_VAR 0 7
38816: PUSH
38817: LD_VAR 0 6
38821: PUSH
38822: LD_INT 1
38824: ARRAY
38825: PUSH
38826: LD_VAR 0 5
38830: ARRAY
38831: PUSH
38832: LD_VAR 0 6
38836: PUSH
38837: LD_INT 2
38839: ARRAY
38840: PUSH
38841: LD_VAR 0 5
38845: ARRAY
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38851: LD_VAR 0 7
38855: PUSH
38856: LD_INT 1
38858: ARRAY
38859: PPUSH
38860: LD_VAR 0 7
38864: PUSH
38865: LD_INT 2
38867: ARRAY
38868: PPUSH
38869: CALL_OW 428
38873: PUSH
38874: LD_INT 0
38876: EQUAL
38877: IFFALSE 38930
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38879: LD_VAR 0 1
38883: PPUSH
38884: LD_VAR 0 7
38888: PUSH
38889: LD_INT 1
38891: ARRAY
38892: PPUSH
38893: LD_VAR 0 7
38897: PUSH
38898: LD_INT 2
38900: ARRAY
38901: PPUSH
38902: LD_VAR 0 3
38906: PPUSH
38907: CALL_OW 48
// result := IsPlaced ( unit ) ;
38911: LD_ADDR_VAR 0 4
38915: PUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: CALL_OW 305
38925: ST_TO_ADDR
// exit ;
38926: POP
38927: POP
38928: GO 38934
// end ; end ;
38930: GO 38809
38932: POP
38933: POP
// end ;
38934: LD_VAR 0 4
38938: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38939: LD_INT 0
38941: PPUSH
38942: PPUSH
38943: PPUSH
// if not side or side > 8 then
38944: LD_VAR 0 1
38948: NOT
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: LD_INT 8
38957: GREATER
38958: OR
38959: IFFALSE 38963
// exit ;
38961: GO 39150
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38963: LD_ADDR_VAR 0 4
38967: PUSH
38968: LD_INT 22
38970: PUSH
38971: LD_VAR 0 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 21
38982: PUSH
38983: LD_INT 3
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PPUSH
38994: CALL_OW 69
38998: ST_TO_ADDR
// if not tmp then
38999: LD_VAR 0 4
39003: NOT
39004: IFFALSE 39008
// exit ;
39006: GO 39150
// enable_addtolog := true ;
39008: LD_ADDR_OWVAR 81
39012: PUSH
39013: LD_INT 1
39015: ST_TO_ADDR
// AddToLog ( [ ) ;
39016: LD_STRING [
39018: PPUSH
39019: CALL_OW 561
// for i in tmp do
39023: LD_ADDR_VAR 0 3
39027: PUSH
39028: LD_VAR 0 4
39032: PUSH
39033: FOR_IN
39034: IFFALSE 39141
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39036: LD_STRING [
39038: PUSH
39039: LD_VAR 0 3
39043: PPUSH
39044: CALL_OW 266
39048: STR
39049: PUSH
39050: LD_STRING , 
39052: STR
39053: PUSH
39054: LD_VAR 0 3
39058: PPUSH
39059: CALL_OW 250
39063: STR
39064: PUSH
39065: LD_STRING , 
39067: STR
39068: PUSH
39069: LD_VAR 0 3
39073: PPUSH
39074: CALL_OW 251
39078: STR
39079: PUSH
39080: LD_STRING , 
39082: STR
39083: PUSH
39084: LD_VAR 0 3
39088: PPUSH
39089: CALL_OW 254
39093: STR
39094: PUSH
39095: LD_STRING , 
39097: STR
39098: PUSH
39099: LD_VAR 0 3
39103: PPUSH
39104: LD_INT 1
39106: PPUSH
39107: CALL_OW 268
39111: STR
39112: PUSH
39113: LD_STRING , 
39115: STR
39116: PUSH
39117: LD_VAR 0 3
39121: PPUSH
39122: LD_INT 2
39124: PPUSH
39125: CALL_OW 268
39129: STR
39130: PUSH
39131: LD_STRING ],
39133: STR
39134: PPUSH
39135: CALL_OW 561
// end ;
39139: GO 39033
39141: POP
39142: POP
// AddToLog ( ]; ) ;
39143: LD_STRING ];
39145: PPUSH
39146: CALL_OW 561
// end ;
39150: LD_VAR 0 2
39154: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39155: LD_INT 0
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
// if not area or not rate or not max then
39162: LD_VAR 0 1
39166: NOT
39167: PUSH
39168: LD_VAR 0 2
39172: NOT
39173: OR
39174: PUSH
39175: LD_VAR 0 4
39179: NOT
39180: OR
39181: IFFALSE 39185
// exit ;
39183: GO 39377
// while 1 do
39185: LD_INT 1
39187: IFFALSE 39377
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39189: LD_ADDR_VAR 0 9
39193: PUSH
39194: LD_VAR 0 1
39198: PPUSH
39199: LD_INT 1
39201: PPUSH
39202: CALL_OW 287
39206: PUSH
39207: LD_INT 10
39209: MUL
39210: ST_TO_ADDR
// r := rate / 10 ;
39211: LD_ADDR_VAR 0 7
39215: PUSH
39216: LD_VAR 0 2
39220: PUSH
39221: LD_INT 10
39223: DIVREAL
39224: ST_TO_ADDR
// time := 1 1$00 ;
39225: LD_ADDR_VAR 0 8
39229: PUSH
39230: LD_INT 2100
39232: ST_TO_ADDR
// if amount < min then
39233: LD_VAR 0 9
39237: PUSH
39238: LD_VAR 0 3
39242: LESS
39243: IFFALSE 39261
// r := r * 2 else
39245: LD_ADDR_VAR 0 7
39249: PUSH
39250: LD_VAR 0 7
39254: PUSH
39255: LD_INT 2
39257: MUL
39258: ST_TO_ADDR
39259: GO 39287
// if amount > max then
39261: LD_VAR 0 9
39265: PUSH
39266: LD_VAR 0 4
39270: GREATER
39271: IFFALSE 39287
// r := r / 2 ;
39273: LD_ADDR_VAR 0 7
39277: PUSH
39278: LD_VAR 0 7
39282: PUSH
39283: LD_INT 2
39285: DIVREAL
39286: ST_TO_ADDR
// time := time / r ;
39287: LD_ADDR_VAR 0 8
39291: PUSH
39292: LD_VAR 0 8
39296: PUSH
39297: LD_VAR 0 7
39301: DIVREAL
39302: ST_TO_ADDR
// if time < 0 then
39303: LD_VAR 0 8
39307: PUSH
39308: LD_INT 0
39310: LESS
39311: IFFALSE 39328
// time := time * - 1 ;
39313: LD_ADDR_VAR 0 8
39317: PUSH
39318: LD_VAR 0 8
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: MUL
39327: ST_TO_ADDR
// wait ( time ) ;
39328: LD_VAR 0 8
39332: PPUSH
39333: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39337: LD_INT 35
39339: PPUSH
39340: LD_INT 875
39342: PPUSH
39343: CALL_OW 12
39347: PPUSH
39348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39352: LD_INT 1
39354: PPUSH
39355: LD_INT 5
39357: PPUSH
39358: CALL_OW 12
39362: PPUSH
39363: LD_VAR 0 1
39367: PPUSH
39368: LD_INT 1
39370: PPUSH
39371: CALL_OW 55
// end ;
39375: GO 39185
// end ;
39377: LD_VAR 0 5
39381: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39382: LD_INT 0
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
// if not turrets or not factories then
39392: LD_VAR 0 1
39396: NOT
39397: PUSH
39398: LD_VAR 0 2
39402: NOT
39403: OR
39404: IFFALSE 39408
// exit ;
39406: GO 39715
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39408: LD_ADDR_VAR 0 10
39412: PUSH
39413: LD_INT 5
39415: PUSH
39416: LD_INT 6
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 4
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 3
39435: PUSH
39436: LD_INT 5
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 24
39450: PUSH
39451: LD_INT 25
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 23
39460: PUSH
39461: LD_INT 27
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 42
39474: PUSH
39475: LD_INT 43
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 44
39484: PUSH
39485: LD_INT 46
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 45
39494: PUSH
39495: LD_INT 47
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: ST_TO_ADDR
// result := [ ] ;
39512: LD_ADDR_VAR 0 3
39516: PUSH
39517: EMPTY
39518: ST_TO_ADDR
// for i in turrets do
39519: LD_ADDR_VAR 0 4
39523: PUSH
39524: LD_VAR 0 1
39528: PUSH
39529: FOR_IN
39530: IFFALSE 39713
// begin nat := GetNation ( i ) ;
39532: LD_ADDR_VAR 0 7
39536: PUSH
39537: LD_VAR 0 4
39541: PPUSH
39542: CALL_OW 248
39546: ST_TO_ADDR
// weapon := 0 ;
39547: LD_ADDR_VAR 0 8
39551: PUSH
39552: LD_INT 0
39554: ST_TO_ADDR
// if not nat then
39555: LD_VAR 0 7
39559: NOT
39560: IFFALSE 39564
// continue ;
39562: GO 39529
// for j in list [ nat ] do
39564: LD_ADDR_VAR 0 5
39568: PUSH
39569: LD_VAR 0 10
39573: PUSH
39574: LD_VAR 0 7
39578: ARRAY
39579: PUSH
39580: FOR_IN
39581: IFFALSE 39622
// if GetBWeapon ( i ) = j [ 1 ] then
39583: LD_VAR 0 4
39587: PPUSH
39588: CALL_OW 269
39592: PUSH
39593: LD_VAR 0 5
39597: PUSH
39598: LD_INT 1
39600: ARRAY
39601: EQUAL
39602: IFFALSE 39620
// begin weapon := j [ 2 ] ;
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: LD_VAR 0 5
39613: PUSH
39614: LD_INT 2
39616: ARRAY
39617: ST_TO_ADDR
// break ;
39618: GO 39622
// end ;
39620: GO 39580
39622: POP
39623: POP
// if not weapon then
39624: LD_VAR 0 8
39628: NOT
39629: IFFALSE 39633
// continue ;
39631: GO 39529
// for k in factories do
39633: LD_ADDR_VAR 0 6
39637: PUSH
39638: LD_VAR 0 2
39642: PUSH
39643: FOR_IN
39644: IFFALSE 39709
// begin weapons := AvailableWeaponList ( k ) ;
39646: LD_ADDR_VAR 0 9
39650: PUSH
39651: LD_VAR 0 6
39655: PPUSH
39656: CALL_OW 478
39660: ST_TO_ADDR
// if not weapons then
39661: LD_VAR 0 9
39665: NOT
39666: IFFALSE 39670
// continue ;
39668: GO 39643
// if weapon in weapons then
39670: LD_VAR 0 8
39674: PUSH
39675: LD_VAR 0 9
39679: IN
39680: IFFALSE 39707
// begin result := [ i , weapon ] ;
39682: LD_ADDR_VAR 0 3
39686: PUSH
39687: LD_VAR 0 4
39691: PUSH
39692: LD_VAR 0 8
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// exit ;
39701: POP
39702: POP
39703: POP
39704: POP
39705: GO 39715
// end ; end ;
39707: GO 39643
39709: POP
39710: POP
// end ;
39711: GO 39529
39713: POP
39714: POP
// end ;
39715: LD_VAR 0 3
39719: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39720: LD_INT 0
39722: PPUSH
// if not side or side > 8 then
39723: LD_VAR 0 3
39727: NOT
39728: PUSH
39729: LD_VAR 0 3
39733: PUSH
39734: LD_INT 8
39736: GREATER
39737: OR
39738: IFFALSE 39742
// exit ;
39740: GO 39801
// if not range then
39742: LD_VAR 0 4
39746: NOT
39747: IFFALSE 39758
// range := - 12 ;
39749: LD_ADDR_VAR 0 4
39753: PUSH
39754: LD_INT 12
39756: NEG
39757: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39758: LD_VAR 0 1
39762: PPUSH
39763: LD_VAR 0 2
39767: PPUSH
39768: LD_VAR 0 3
39772: PPUSH
39773: LD_VAR 0 4
39777: PPUSH
39778: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39782: LD_VAR 0 1
39786: PPUSH
39787: LD_VAR 0 2
39791: PPUSH
39792: LD_VAR 0 3
39796: PPUSH
39797: CALL_OW 331
// end ;
39801: LD_VAR 0 5
39805: RET
// export function Video ( mode ) ; begin
39806: LD_INT 0
39808: PPUSH
// ingame_video = mode ;
39809: LD_ADDR_OWVAR 52
39813: PUSH
39814: LD_VAR 0 1
39818: ST_TO_ADDR
// interface_hidden = mode ;
39819: LD_ADDR_OWVAR 54
39823: PUSH
39824: LD_VAR 0 1
39828: ST_TO_ADDR
// end ;
39829: LD_VAR 0 2
39833: RET
// export function Join ( array , element ) ; begin
39834: LD_INT 0
39836: PPUSH
// result := array ^ element ;
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_VAR 0 1
39846: PUSH
39847: LD_VAR 0 2
39851: ADD
39852: ST_TO_ADDR
// end ;
39853: LD_VAR 0 3
39857: RET
// export function JoinUnion ( array , element ) ; begin
39858: LD_INT 0
39860: PPUSH
// result := array union element ;
39861: LD_ADDR_VAR 0 3
39865: PUSH
39866: LD_VAR 0 1
39870: PUSH
39871: LD_VAR 0 2
39875: UNION
39876: ST_TO_ADDR
// end ;
39877: LD_VAR 0 3
39881: RET
// export function GetBehemoths ( side ) ; begin
39882: LD_INT 0
39884: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39885: LD_ADDR_VAR 0 2
39889: PUSH
39890: LD_INT 22
39892: PUSH
39893: LD_VAR 0 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 31
39904: PUSH
39905: LD_INT 25
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PPUSH
39916: CALL_OW 69
39920: ST_TO_ADDR
// end ;
39921: LD_VAR 0 2
39925: RET
// export function Shuffle ( array ) ; var i , index ; begin
39926: LD_INT 0
39928: PPUSH
39929: PPUSH
39930: PPUSH
// result := [ ] ;
39931: LD_ADDR_VAR 0 2
39935: PUSH
39936: EMPTY
39937: ST_TO_ADDR
// if not array then
39938: LD_VAR 0 1
39942: NOT
39943: IFFALSE 39947
// exit ;
39945: GO 40046
// Randomize ;
39947: CALL_OW 10
// for i = array downto 1 do
39951: LD_ADDR_VAR 0 3
39955: PUSH
39956: DOUBLE
39957: LD_VAR 0 1
39961: INC
39962: ST_TO_ADDR
39963: LD_INT 1
39965: PUSH
39966: FOR_DOWNTO
39967: IFFALSE 40044
// begin index := rand ( 1 , array ) ;
39969: LD_ADDR_VAR 0 4
39973: PUSH
39974: LD_INT 1
39976: PPUSH
39977: LD_VAR 0 1
39981: PPUSH
39982: CALL_OW 12
39986: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39987: LD_ADDR_VAR 0 2
39991: PUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: LD_VAR 0 2
40001: PUSH
40002: LD_INT 1
40004: PLUS
40005: PPUSH
40006: LD_VAR 0 1
40010: PUSH
40011: LD_VAR 0 4
40015: ARRAY
40016: PPUSH
40017: CALL_OW 2
40021: ST_TO_ADDR
// array := Delete ( array , index ) ;
40022: LD_ADDR_VAR 0 1
40026: PUSH
40027: LD_VAR 0 1
40031: PPUSH
40032: LD_VAR 0 4
40036: PPUSH
40037: CALL_OW 3
40041: ST_TO_ADDR
// end ;
40042: GO 39966
40044: POP
40045: POP
// end ;
40046: LD_VAR 0 2
40050: RET
// export function GetBaseMaterials ( base ) ; begin
40051: LD_INT 0
40053: PPUSH
// result := [ 0 , 0 , 0 ] ;
40054: LD_ADDR_VAR 0 2
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: ST_TO_ADDR
// if not base then
40073: LD_VAR 0 1
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40131
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40082: LD_ADDR_VAR 0 2
40086: PUSH
40087: LD_VAR 0 1
40091: PPUSH
40092: LD_INT 1
40094: PPUSH
40095: CALL_OW 275
40099: PUSH
40100: LD_VAR 0 1
40104: PPUSH
40105: LD_INT 2
40107: PPUSH
40108: CALL_OW 275
40112: PUSH
40113: LD_VAR 0 1
40117: PPUSH
40118: LD_INT 3
40120: PPUSH
40121: CALL_OW 275
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
// end ;
40131: LD_VAR 0 2
40135: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40136: LD_INT 0
40138: PPUSH
40139: PPUSH
// result := array ;
40140: LD_ADDR_VAR 0 3
40144: PUSH
40145: LD_VAR 0 1
40149: ST_TO_ADDR
// if size > 0 then
40150: LD_VAR 0 2
40154: PUSH
40155: LD_INT 0
40157: GREATER
40158: IFFALSE 40204
// for i := array downto size do
40160: LD_ADDR_VAR 0 4
40164: PUSH
40165: DOUBLE
40166: LD_VAR 0 1
40170: INC
40171: ST_TO_ADDR
40172: LD_VAR 0 2
40176: PUSH
40177: FOR_DOWNTO
40178: IFFALSE 40202
// result := Delete ( result , result ) ;
40180: LD_ADDR_VAR 0 3
40184: PUSH
40185: LD_VAR 0 3
40189: PPUSH
40190: LD_VAR 0 3
40194: PPUSH
40195: CALL_OW 3
40199: ST_TO_ADDR
40200: GO 40177
40202: POP
40203: POP
// end ;
40204: LD_VAR 0 3
40208: RET
// export function ComExit ( unit ) ; var tmp ; begin
40209: LD_INT 0
40211: PPUSH
40212: PPUSH
// if not IsInUnit ( unit ) then
40213: LD_VAR 0 1
40217: PPUSH
40218: CALL_OW 310
40222: NOT
40223: IFFALSE 40227
// exit ;
40225: GO 40287
// tmp := IsInUnit ( unit ) ;
40227: LD_ADDR_VAR 0 3
40231: PUSH
40232: LD_VAR 0 1
40236: PPUSH
40237: CALL_OW 310
40241: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40242: LD_VAR 0 3
40246: PPUSH
40247: CALL_OW 247
40251: PUSH
40252: LD_INT 2
40254: EQUAL
40255: IFFALSE 40268
// ComExitVehicle ( unit ) else
40257: LD_VAR 0 1
40261: PPUSH
40262: CALL_OW 121
40266: GO 40277
// ComExitBuilding ( unit ) ;
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 122
// result := tmp ;
40277: LD_ADDR_VAR 0 2
40281: PUSH
40282: LD_VAR 0 3
40286: ST_TO_ADDR
// end ;
40287: LD_VAR 0 2
40291: RET
// export function ResetHc ; begin
40292: LD_INT 0
40294: PPUSH
// InitHc ;
40295: CALL_OW 19
// hc_importance := 0 ;
40299: LD_ADDR_OWVAR 32
40303: PUSH
40304: LD_INT 0
40306: ST_TO_ADDR
// end ; end_of_file
40307: LD_VAR 0 1
40311: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
40312: LD_INT 0
40314: PPUSH
40315: PPUSH
// skirmish := false ;
40316: LD_ADDR_EXP 11
40320: PUSH
40321: LD_INT 0
40323: ST_TO_ADDR
// debug_mc := false ;
40324: LD_ADDR_EXP 12
40328: PUSH
40329: LD_INT 0
40331: ST_TO_ADDR
// mc_bases := [ ] ;
40332: LD_ADDR_EXP 13
40336: PUSH
40337: EMPTY
40338: ST_TO_ADDR
// mc_sides := [ ] ;
40339: LD_ADDR_EXP 39
40343: PUSH
40344: EMPTY
40345: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
40346: LD_ADDR_EXP 14
40350: PUSH
40351: EMPTY
40352: ST_TO_ADDR
// mc_building_repairs := [ ] ;
40353: LD_ADDR_EXP 15
40357: PUSH
40358: EMPTY
40359: ST_TO_ADDR
// mc_need_heal := [ ] ;
40360: LD_ADDR_EXP 16
40364: PUSH
40365: EMPTY
40366: ST_TO_ADDR
// mc_healers := [ ] ;
40367: LD_ADDR_EXP 17
40371: PUSH
40372: EMPTY
40373: ST_TO_ADDR
// mc_build_list := [ ] ;
40374: LD_ADDR_EXP 18
40378: PUSH
40379: EMPTY
40380: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
40381: LD_ADDR_EXP 45
40385: PUSH
40386: EMPTY
40387: ST_TO_ADDR
// mc_builders := [ ] ;
40388: LD_ADDR_EXP 19
40392: PUSH
40393: EMPTY
40394: ST_TO_ADDR
// mc_construct_list := [ ] ;
40395: LD_ADDR_EXP 20
40399: PUSH
40400: EMPTY
40401: ST_TO_ADDR
// mc_turret_list := [ ] ;
40402: LD_ADDR_EXP 21
40406: PUSH
40407: EMPTY
40408: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
40409: LD_ADDR_EXP 22
40413: PUSH
40414: EMPTY
40415: ST_TO_ADDR
// mc_miners := [ ] ;
40416: LD_ADDR_EXP 27
40420: PUSH
40421: EMPTY
40422: ST_TO_ADDR
// mc_mines := [ ] ;
40423: LD_ADDR_EXP 26
40427: PUSH
40428: EMPTY
40429: ST_TO_ADDR
// mc_minefields := [ ] ;
40430: LD_ADDR_EXP 28
40434: PUSH
40435: EMPTY
40436: ST_TO_ADDR
// mc_crates := [ ] ;
40437: LD_ADDR_EXP 29
40441: PUSH
40442: EMPTY
40443: ST_TO_ADDR
// mc_crates_collector := [ ] ;
40444: LD_ADDR_EXP 30
40448: PUSH
40449: EMPTY
40450: ST_TO_ADDR
// mc_crates_area := [ ] ;
40451: LD_ADDR_EXP 31
40455: PUSH
40456: EMPTY
40457: ST_TO_ADDR
// mc_vehicles := [ ] ;
40458: LD_ADDR_EXP 32
40462: PUSH
40463: EMPTY
40464: ST_TO_ADDR
// mc_attack := [ ] ;
40465: LD_ADDR_EXP 33
40469: PUSH
40470: EMPTY
40471: ST_TO_ADDR
// mc_produce := [ ] ;
40472: LD_ADDR_EXP 34
40476: PUSH
40477: EMPTY
40478: ST_TO_ADDR
// mc_defender := [ ] ;
40479: LD_ADDR_EXP 35
40483: PUSH
40484: EMPTY
40485: ST_TO_ADDR
// mc_parking := [ ] ;
40486: LD_ADDR_EXP 37
40490: PUSH
40491: EMPTY
40492: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
40493: LD_ADDR_EXP 23
40497: PUSH
40498: EMPTY
40499: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
40500: LD_ADDR_EXP 25
40504: PUSH
40505: EMPTY
40506: ST_TO_ADDR
// mc_scan := [ ] ;
40507: LD_ADDR_EXP 36
40511: PUSH
40512: EMPTY
40513: ST_TO_ADDR
// mc_scan_area := [ ] ;
40514: LD_ADDR_EXP 38
40518: PUSH
40519: EMPTY
40520: ST_TO_ADDR
// mc_tech := [ ] ;
40521: LD_ADDR_EXP 40
40525: PUSH
40526: EMPTY
40527: ST_TO_ADDR
// mc_class := [ ] ;
40528: LD_ADDR_EXP 54
40532: PUSH
40533: EMPTY
40534: ST_TO_ADDR
// mc_class_case_use := [ ] ;
40535: LD_ADDR_EXP 55
40539: PUSH
40540: EMPTY
40541: ST_TO_ADDR
// end ;
40542: LD_VAR 0 1
40546: RET
// export function MC_Kill ( base ) ; begin
40547: LD_INT 0
40549: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
40550: LD_ADDR_EXP 13
40554: PUSH
40555: LD_EXP 13
40559: PPUSH
40560: LD_VAR 0 1
40564: PPUSH
40565: EMPTY
40566: PPUSH
40567: CALL_OW 1
40571: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
40572: LD_ADDR_EXP 14
40576: PUSH
40577: LD_EXP 14
40581: PPUSH
40582: LD_VAR 0 1
40586: PPUSH
40587: EMPTY
40588: PPUSH
40589: CALL_OW 1
40593: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
40594: LD_ADDR_EXP 15
40598: PUSH
40599: LD_EXP 15
40603: PPUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: EMPTY
40610: PPUSH
40611: CALL_OW 1
40615: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
40616: LD_ADDR_EXP 16
40620: PUSH
40621: LD_EXP 16
40625: PPUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: EMPTY
40632: PPUSH
40633: CALL_OW 1
40637: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
40638: LD_ADDR_EXP 17
40642: PUSH
40643: LD_EXP 17
40647: PPUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: EMPTY
40654: PPUSH
40655: CALL_OW 1
40659: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
40660: LD_ADDR_EXP 18
40664: PUSH
40665: LD_EXP 18
40669: PPUSH
40670: LD_VAR 0 1
40674: PPUSH
40675: EMPTY
40676: PPUSH
40677: CALL_OW 1
40681: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
40682: LD_ADDR_EXP 19
40686: PUSH
40687: LD_EXP 19
40691: PPUSH
40692: LD_VAR 0 1
40696: PPUSH
40697: EMPTY
40698: PPUSH
40699: CALL_OW 1
40703: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
40704: LD_ADDR_EXP 20
40708: PUSH
40709: LD_EXP 20
40713: PPUSH
40714: LD_VAR 0 1
40718: PPUSH
40719: EMPTY
40720: PPUSH
40721: CALL_OW 1
40725: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
40726: LD_ADDR_EXP 21
40730: PUSH
40731: LD_EXP 21
40735: PPUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: EMPTY
40742: PPUSH
40743: CALL_OW 1
40747: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
40748: LD_ADDR_EXP 22
40752: PUSH
40753: LD_EXP 22
40757: PPUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: EMPTY
40764: PPUSH
40765: CALL_OW 1
40769: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
40770: LD_ADDR_EXP 23
40774: PUSH
40775: LD_EXP 23
40779: PPUSH
40780: LD_VAR 0 1
40784: PPUSH
40785: EMPTY
40786: PPUSH
40787: CALL_OW 1
40791: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
40792: LD_ADDR_EXP 24
40796: PUSH
40797: LD_EXP 24
40801: PPUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: LD_INT 0
40809: PPUSH
40810: CALL_OW 1
40814: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
40815: LD_ADDR_EXP 25
40819: PUSH
40820: LD_EXP 25
40824: PPUSH
40825: LD_VAR 0 1
40829: PPUSH
40830: EMPTY
40831: PPUSH
40832: CALL_OW 1
40836: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
40837: LD_ADDR_EXP 26
40841: PUSH
40842: LD_EXP 26
40846: PPUSH
40847: LD_VAR 0 1
40851: PPUSH
40852: EMPTY
40853: PPUSH
40854: CALL_OW 1
40858: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
40859: LD_ADDR_EXP 27
40863: PUSH
40864: LD_EXP 27
40868: PPUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: EMPTY
40875: PPUSH
40876: CALL_OW 1
40880: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
40881: LD_ADDR_EXP 28
40885: PUSH
40886: LD_EXP 28
40890: PPUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: EMPTY
40897: PPUSH
40898: CALL_OW 1
40902: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
40903: LD_ADDR_EXP 29
40907: PUSH
40908: LD_EXP 29
40912: PPUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: EMPTY
40919: PPUSH
40920: CALL_OW 1
40924: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
40925: LD_ADDR_EXP 30
40929: PUSH
40930: LD_EXP 30
40934: PPUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: EMPTY
40941: PPUSH
40942: CALL_OW 1
40946: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
40947: LD_ADDR_EXP 31
40951: PUSH
40952: LD_EXP 31
40956: PPUSH
40957: LD_VAR 0 1
40961: PPUSH
40962: EMPTY
40963: PPUSH
40964: CALL_OW 1
40968: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
40969: LD_ADDR_EXP 32
40973: PUSH
40974: LD_EXP 32
40978: PPUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: EMPTY
40985: PPUSH
40986: CALL_OW 1
40990: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
40991: LD_ADDR_EXP 33
40995: PUSH
40996: LD_EXP 33
41000: PPUSH
41001: LD_VAR 0 1
41005: PPUSH
41006: EMPTY
41007: PPUSH
41008: CALL_OW 1
41012: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
41013: LD_ADDR_EXP 34
41017: PUSH
41018: LD_EXP 34
41022: PPUSH
41023: LD_VAR 0 1
41027: PPUSH
41028: EMPTY
41029: PPUSH
41030: CALL_OW 1
41034: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
41035: LD_ADDR_EXP 35
41039: PUSH
41040: LD_EXP 35
41044: PPUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: EMPTY
41051: PPUSH
41052: CALL_OW 1
41056: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
41057: LD_ADDR_EXP 36
41061: PUSH
41062: LD_EXP 36
41066: PPUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: EMPTY
41073: PPUSH
41074: CALL_OW 1
41078: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
41079: LD_ADDR_EXP 37
41083: PUSH
41084: LD_EXP 37
41088: PPUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: EMPTY
41095: PPUSH
41096: CALL_OW 1
41100: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
41101: LD_ADDR_EXP 38
41105: PUSH
41106: LD_EXP 38
41110: PPUSH
41111: LD_VAR 0 1
41115: PPUSH
41116: EMPTY
41117: PPUSH
41118: CALL_OW 1
41122: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
41123: LD_ADDR_EXP 40
41127: PUSH
41128: LD_EXP 40
41132: PPUSH
41133: LD_VAR 0 1
41137: PPUSH
41138: EMPTY
41139: PPUSH
41140: CALL_OW 1
41144: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
41145: LD_ADDR_EXP 42
41149: PUSH
41150: LD_EXP 42
41154: PPUSH
41155: LD_VAR 0 1
41159: PPUSH
41160: EMPTY
41161: PPUSH
41162: CALL_OW 1
41166: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
41167: LD_ADDR_EXP 43
41171: PUSH
41172: LD_EXP 43
41176: PPUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: EMPTY
41183: PPUSH
41184: CALL_OW 1
41188: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
41189: LD_ADDR_EXP 44
41193: PUSH
41194: LD_EXP 44
41198: PPUSH
41199: LD_VAR 0 1
41203: PPUSH
41204: EMPTY
41205: PPUSH
41206: CALL_OW 1
41210: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
41211: LD_ADDR_EXP 45
41215: PUSH
41216: LD_EXP 45
41220: PPUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: EMPTY
41227: PPUSH
41228: CALL_OW 1
41232: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
41233: LD_ADDR_EXP 46
41237: PUSH
41238: LD_EXP 46
41242: PPUSH
41243: LD_VAR 0 1
41247: PPUSH
41248: EMPTY
41249: PPUSH
41250: CALL_OW 1
41254: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
41255: LD_ADDR_EXP 47
41259: PUSH
41260: LD_EXP 47
41264: PPUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: EMPTY
41271: PPUSH
41272: CALL_OW 1
41276: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
41277: LD_ADDR_EXP 48
41281: PUSH
41282: LD_EXP 48
41286: PPUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: EMPTY
41293: PPUSH
41294: CALL_OW 1
41298: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
41299: LD_ADDR_EXP 49
41303: PUSH
41304: LD_EXP 49
41308: PPUSH
41309: LD_VAR 0 1
41313: PPUSH
41314: EMPTY
41315: PPUSH
41316: CALL_OW 1
41320: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
41321: LD_ADDR_EXP 50
41325: PUSH
41326: LD_EXP 50
41330: PPUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: EMPTY
41337: PPUSH
41338: CALL_OW 1
41342: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
41343: LD_ADDR_EXP 51
41347: PUSH
41348: LD_EXP 51
41352: PPUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: EMPTY
41359: PPUSH
41360: CALL_OW 1
41364: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
41365: LD_ADDR_EXP 52
41369: PUSH
41370: LD_EXP 52
41374: PPUSH
41375: LD_VAR 0 1
41379: PPUSH
41380: EMPTY
41381: PPUSH
41382: CALL_OW 1
41386: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
41387: LD_ADDR_EXP 53
41391: PUSH
41392: LD_EXP 53
41396: PPUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: EMPTY
41403: PPUSH
41404: CALL_OW 1
41408: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
41409: LD_ADDR_EXP 54
41413: PUSH
41414: LD_EXP 54
41418: PPUSH
41419: LD_VAR 0 1
41423: PPUSH
41424: EMPTY
41425: PPUSH
41426: CALL_OW 1
41430: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
41431: LD_ADDR_EXP 55
41435: PUSH
41436: LD_EXP 55
41440: PPUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: LD_INT 0
41448: PPUSH
41449: CALL_OW 1
41453: ST_TO_ADDR
// end ;
41454: LD_VAR 0 2
41458: RET
// export function MC_Add ( side , units ) ; var base ; begin
41459: LD_INT 0
41461: PPUSH
41462: PPUSH
// base := mc_bases + 1 ;
41463: LD_ADDR_VAR 0 4
41467: PUSH
41468: LD_EXP 13
41472: PUSH
41473: LD_INT 1
41475: PLUS
41476: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
41477: LD_ADDR_EXP 39
41481: PUSH
41482: LD_EXP 39
41486: PPUSH
41487: LD_VAR 0 4
41491: PPUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL_OW 1
41501: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
41502: LD_ADDR_EXP 13
41506: PUSH
41507: LD_EXP 13
41511: PPUSH
41512: LD_VAR 0 4
41516: PPUSH
41517: LD_VAR 0 2
41521: PPUSH
41522: CALL_OW 1
41526: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
41527: LD_ADDR_EXP 14
41531: PUSH
41532: LD_EXP 14
41536: PPUSH
41537: LD_VAR 0 4
41541: PPUSH
41542: EMPTY
41543: PPUSH
41544: CALL_OW 1
41548: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
41549: LD_ADDR_EXP 15
41553: PUSH
41554: LD_EXP 15
41558: PPUSH
41559: LD_VAR 0 4
41563: PPUSH
41564: EMPTY
41565: PPUSH
41566: CALL_OW 1
41570: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
41571: LD_ADDR_EXP 16
41575: PUSH
41576: LD_EXP 16
41580: PPUSH
41581: LD_VAR 0 4
41585: PPUSH
41586: EMPTY
41587: PPUSH
41588: CALL_OW 1
41592: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
41593: LD_ADDR_EXP 17
41597: PUSH
41598: LD_EXP 17
41602: PPUSH
41603: LD_VAR 0 4
41607: PPUSH
41608: EMPTY
41609: PPUSH
41610: CALL_OW 1
41614: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
41615: LD_ADDR_EXP 18
41619: PUSH
41620: LD_EXP 18
41624: PPUSH
41625: LD_VAR 0 4
41629: PPUSH
41630: EMPTY
41631: PPUSH
41632: CALL_OW 1
41636: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
41637: LD_ADDR_EXP 19
41641: PUSH
41642: LD_EXP 19
41646: PPUSH
41647: LD_VAR 0 4
41651: PPUSH
41652: EMPTY
41653: PPUSH
41654: CALL_OW 1
41658: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
41659: LD_ADDR_EXP 20
41663: PUSH
41664: LD_EXP 20
41668: PPUSH
41669: LD_VAR 0 4
41673: PPUSH
41674: EMPTY
41675: PPUSH
41676: CALL_OW 1
41680: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
41681: LD_ADDR_EXP 21
41685: PUSH
41686: LD_EXP 21
41690: PPUSH
41691: LD_VAR 0 4
41695: PPUSH
41696: EMPTY
41697: PPUSH
41698: CALL_OW 1
41702: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
41703: LD_ADDR_EXP 22
41707: PUSH
41708: LD_EXP 22
41712: PPUSH
41713: LD_VAR 0 4
41717: PPUSH
41718: EMPTY
41719: PPUSH
41720: CALL_OW 1
41724: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
41725: LD_ADDR_EXP 23
41729: PUSH
41730: LD_EXP 23
41734: PPUSH
41735: LD_VAR 0 4
41739: PPUSH
41740: EMPTY
41741: PPUSH
41742: CALL_OW 1
41746: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
41747: LD_ADDR_EXP 24
41751: PUSH
41752: LD_EXP 24
41756: PPUSH
41757: LD_VAR 0 4
41761: PPUSH
41762: LD_INT 0
41764: PPUSH
41765: CALL_OW 1
41769: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
41770: LD_ADDR_EXP 25
41774: PUSH
41775: LD_EXP 25
41779: PPUSH
41780: LD_VAR 0 4
41784: PPUSH
41785: EMPTY
41786: PPUSH
41787: CALL_OW 1
41791: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
41792: LD_ADDR_EXP 26
41796: PUSH
41797: LD_EXP 26
41801: PPUSH
41802: LD_VAR 0 4
41806: PPUSH
41807: EMPTY
41808: PPUSH
41809: CALL_OW 1
41813: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
41814: LD_ADDR_EXP 27
41818: PUSH
41819: LD_EXP 27
41823: PPUSH
41824: LD_VAR 0 4
41828: PPUSH
41829: EMPTY
41830: PPUSH
41831: CALL_OW 1
41835: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
41836: LD_ADDR_EXP 28
41840: PUSH
41841: LD_EXP 28
41845: PPUSH
41846: LD_VAR 0 4
41850: PPUSH
41851: EMPTY
41852: PPUSH
41853: CALL_OW 1
41857: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
41858: LD_ADDR_EXP 29
41862: PUSH
41863: LD_EXP 29
41867: PPUSH
41868: LD_VAR 0 4
41872: PPUSH
41873: EMPTY
41874: PPUSH
41875: CALL_OW 1
41879: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
41880: LD_ADDR_EXP 30
41884: PUSH
41885: LD_EXP 30
41889: PPUSH
41890: LD_VAR 0 4
41894: PPUSH
41895: EMPTY
41896: PPUSH
41897: CALL_OW 1
41901: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
41902: LD_ADDR_EXP 31
41906: PUSH
41907: LD_EXP 31
41911: PPUSH
41912: LD_VAR 0 4
41916: PPUSH
41917: EMPTY
41918: PPUSH
41919: CALL_OW 1
41923: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
41924: LD_ADDR_EXP 32
41928: PUSH
41929: LD_EXP 32
41933: PPUSH
41934: LD_VAR 0 4
41938: PPUSH
41939: EMPTY
41940: PPUSH
41941: CALL_OW 1
41945: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
41946: LD_ADDR_EXP 33
41950: PUSH
41951: LD_EXP 33
41955: PPUSH
41956: LD_VAR 0 4
41960: PPUSH
41961: EMPTY
41962: PPUSH
41963: CALL_OW 1
41967: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
41968: LD_ADDR_EXP 34
41972: PUSH
41973: LD_EXP 34
41977: PPUSH
41978: LD_VAR 0 4
41982: PPUSH
41983: EMPTY
41984: PPUSH
41985: CALL_OW 1
41989: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
41990: LD_ADDR_EXP 35
41994: PUSH
41995: LD_EXP 35
41999: PPUSH
42000: LD_VAR 0 4
42004: PPUSH
42005: EMPTY
42006: PPUSH
42007: CALL_OW 1
42011: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
42012: LD_ADDR_EXP 36
42016: PUSH
42017: LD_EXP 36
42021: PPUSH
42022: LD_VAR 0 4
42026: PPUSH
42027: EMPTY
42028: PPUSH
42029: CALL_OW 1
42033: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
42034: LD_ADDR_EXP 37
42038: PUSH
42039: LD_EXP 37
42043: PPUSH
42044: LD_VAR 0 4
42048: PPUSH
42049: EMPTY
42050: PPUSH
42051: CALL_OW 1
42055: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
42056: LD_ADDR_EXP 38
42060: PUSH
42061: LD_EXP 38
42065: PPUSH
42066: LD_VAR 0 4
42070: PPUSH
42071: EMPTY
42072: PPUSH
42073: CALL_OW 1
42077: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
42078: LD_ADDR_EXP 40
42082: PUSH
42083: LD_EXP 40
42087: PPUSH
42088: LD_VAR 0 4
42092: PPUSH
42093: EMPTY
42094: PPUSH
42095: CALL_OW 1
42099: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
42100: LD_ADDR_EXP 42
42104: PUSH
42105: LD_EXP 42
42109: PPUSH
42110: LD_VAR 0 4
42114: PPUSH
42115: EMPTY
42116: PPUSH
42117: CALL_OW 1
42121: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
42122: LD_ADDR_EXP 43
42126: PUSH
42127: LD_EXP 43
42131: PPUSH
42132: LD_VAR 0 4
42136: PPUSH
42137: EMPTY
42138: PPUSH
42139: CALL_OW 1
42143: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
42144: LD_ADDR_EXP 44
42148: PUSH
42149: LD_EXP 44
42153: PPUSH
42154: LD_VAR 0 4
42158: PPUSH
42159: EMPTY
42160: PPUSH
42161: CALL_OW 1
42165: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
42166: LD_ADDR_EXP 45
42170: PUSH
42171: LD_EXP 45
42175: PPUSH
42176: LD_VAR 0 4
42180: PPUSH
42181: EMPTY
42182: PPUSH
42183: CALL_OW 1
42187: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
42188: LD_ADDR_EXP 46
42192: PUSH
42193: LD_EXP 46
42197: PPUSH
42198: LD_VAR 0 4
42202: PPUSH
42203: EMPTY
42204: PPUSH
42205: CALL_OW 1
42209: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
42210: LD_ADDR_EXP 47
42214: PUSH
42215: LD_EXP 47
42219: PPUSH
42220: LD_VAR 0 4
42224: PPUSH
42225: EMPTY
42226: PPUSH
42227: CALL_OW 1
42231: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
42232: LD_ADDR_EXP 48
42236: PUSH
42237: LD_EXP 48
42241: PPUSH
42242: LD_VAR 0 4
42246: PPUSH
42247: EMPTY
42248: PPUSH
42249: CALL_OW 1
42253: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
42254: LD_ADDR_EXP 49
42258: PUSH
42259: LD_EXP 49
42263: PPUSH
42264: LD_VAR 0 4
42268: PPUSH
42269: EMPTY
42270: PPUSH
42271: CALL_OW 1
42275: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
42276: LD_ADDR_EXP 50
42280: PUSH
42281: LD_EXP 50
42285: PPUSH
42286: LD_VAR 0 4
42290: PPUSH
42291: EMPTY
42292: PPUSH
42293: CALL_OW 1
42297: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
42298: LD_ADDR_EXP 51
42302: PUSH
42303: LD_EXP 51
42307: PPUSH
42308: LD_VAR 0 4
42312: PPUSH
42313: EMPTY
42314: PPUSH
42315: CALL_OW 1
42319: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
42320: LD_ADDR_EXP 52
42324: PUSH
42325: LD_EXP 52
42329: PPUSH
42330: LD_VAR 0 4
42334: PPUSH
42335: EMPTY
42336: PPUSH
42337: CALL_OW 1
42341: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
42342: LD_ADDR_EXP 53
42346: PUSH
42347: LD_EXP 53
42351: PPUSH
42352: LD_VAR 0 4
42356: PPUSH
42357: EMPTY
42358: PPUSH
42359: CALL_OW 1
42363: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
42364: LD_ADDR_EXP 54
42368: PUSH
42369: LD_EXP 54
42373: PPUSH
42374: LD_VAR 0 4
42378: PPUSH
42379: EMPTY
42380: PPUSH
42381: CALL_OW 1
42385: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
42386: LD_ADDR_EXP 55
42390: PUSH
42391: LD_EXP 55
42395: PPUSH
42396: LD_VAR 0 4
42400: PPUSH
42401: LD_INT 0
42403: PPUSH
42404: CALL_OW 1
42408: ST_TO_ADDR
// result := base ;
42409: LD_ADDR_VAR 0 3
42413: PUSH
42414: LD_VAR 0 4
42418: ST_TO_ADDR
// end ;
42419: LD_VAR 0 3
42423: RET
// export function MC_Start ( ) ; var i ; begin
42424: LD_INT 0
42426: PPUSH
42427: PPUSH
// for i = 1 to mc_bases do
42428: LD_ADDR_VAR 0 2
42432: PUSH
42433: DOUBLE
42434: LD_INT 1
42436: DEC
42437: ST_TO_ADDR
42438: LD_EXP 13
42442: PUSH
42443: FOR_TO
42444: IFFALSE 43521
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
42446: LD_ADDR_EXP 13
42450: PUSH
42451: LD_EXP 13
42455: PPUSH
42456: LD_VAR 0 2
42460: PPUSH
42461: LD_EXP 13
42465: PUSH
42466: LD_VAR 0 2
42470: ARRAY
42471: PUSH
42472: LD_INT 0
42474: DIFF
42475: PPUSH
42476: CALL_OW 1
42480: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
42481: LD_ADDR_EXP 14
42485: PUSH
42486: LD_EXP 14
42490: PPUSH
42491: LD_VAR 0 2
42495: PPUSH
42496: EMPTY
42497: PPUSH
42498: CALL_OW 1
42502: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
42503: LD_ADDR_EXP 15
42507: PUSH
42508: LD_EXP 15
42512: PPUSH
42513: LD_VAR 0 2
42517: PPUSH
42518: EMPTY
42519: PPUSH
42520: CALL_OW 1
42524: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
42525: LD_ADDR_EXP 16
42529: PUSH
42530: LD_EXP 16
42534: PPUSH
42535: LD_VAR 0 2
42539: PPUSH
42540: EMPTY
42541: PPUSH
42542: CALL_OW 1
42546: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
42547: LD_ADDR_EXP 17
42551: PUSH
42552: LD_EXP 17
42556: PPUSH
42557: LD_VAR 0 2
42561: PPUSH
42562: EMPTY
42563: PUSH
42564: EMPTY
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PPUSH
42570: CALL_OW 1
42574: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
42575: LD_ADDR_EXP 18
42579: PUSH
42580: LD_EXP 18
42584: PPUSH
42585: LD_VAR 0 2
42589: PPUSH
42590: EMPTY
42591: PPUSH
42592: CALL_OW 1
42596: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
42597: LD_ADDR_EXP 45
42601: PUSH
42602: LD_EXP 45
42606: PPUSH
42607: LD_VAR 0 2
42611: PPUSH
42612: EMPTY
42613: PPUSH
42614: CALL_OW 1
42618: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
42619: LD_ADDR_EXP 19
42623: PUSH
42624: LD_EXP 19
42628: PPUSH
42629: LD_VAR 0 2
42633: PPUSH
42634: EMPTY
42635: PPUSH
42636: CALL_OW 1
42640: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
42641: LD_ADDR_EXP 20
42645: PUSH
42646: LD_EXP 20
42650: PPUSH
42651: LD_VAR 0 2
42655: PPUSH
42656: EMPTY
42657: PPUSH
42658: CALL_OW 1
42662: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
42663: LD_ADDR_EXP 21
42667: PUSH
42668: LD_EXP 21
42672: PPUSH
42673: LD_VAR 0 2
42677: PPUSH
42678: LD_EXP 13
42682: PUSH
42683: LD_VAR 0 2
42687: ARRAY
42688: PPUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 30
42694: PUSH
42695: LD_INT 32
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 30
42704: PUSH
42705: LD_INT 33
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: PPUSH
42717: CALL_OW 72
42721: PPUSH
42722: CALL_OW 1
42726: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
42727: LD_ADDR_EXP 22
42731: PUSH
42732: LD_EXP 22
42736: PPUSH
42737: LD_VAR 0 2
42741: PPUSH
42742: LD_EXP 13
42746: PUSH
42747: LD_VAR 0 2
42751: ARRAY
42752: PPUSH
42753: LD_INT 2
42755: PUSH
42756: LD_INT 30
42758: PUSH
42759: LD_INT 32
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 30
42768: PUSH
42769: LD_INT 31
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 58
42783: PUSH
42784: EMPTY
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PPUSH
42791: CALL_OW 72
42795: PPUSH
42796: CALL_OW 1
42800: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
42801: LD_ADDR_EXP 23
42805: PUSH
42806: LD_EXP 23
42810: PPUSH
42811: LD_VAR 0 2
42815: PPUSH
42816: EMPTY
42817: PPUSH
42818: CALL_OW 1
42822: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
42823: LD_ADDR_EXP 27
42827: PUSH
42828: LD_EXP 27
42832: PPUSH
42833: LD_VAR 0 2
42837: PPUSH
42838: EMPTY
42839: PPUSH
42840: CALL_OW 1
42844: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
42845: LD_ADDR_EXP 26
42849: PUSH
42850: LD_EXP 26
42854: PPUSH
42855: LD_VAR 0 2
42859: PPUSH
42860: EMPTY
42861: PPUSH
42862: CALL_OW 1
42866: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
42867: LD_ADDR_EXP 28
42871: PUSH
42872: LD_EXP 28
42876: PPUSH
42877: LD_VAR 0 2
42881: PPUSH
42882: EMPTY
42883: PPUSH
42884: CALL_OW 1
42888: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
42889: LD_ADDR_EXP 29
42893: PUSH
42894: LD_EXP 29
42898: PPUSH
42899: LD_VAR 0 2
42903: PPUSH
42904: EMPTY
42905: PPUSH
42906: CALL_OW 1
42910: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
42911: LD_ADDR_EXP 30
42915: PUSH
42916: LD_EXP 30
42920: PPUSH
42921: LD_VAR 0 2
42925: PPUSH
42926: EMPTY
42927: PPUSH
42928: CALL_OW 1
42932: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
42933: LD_ADDR_EXP 31
42937: PUSH
42938: LD_EXP 31
42942: PPUSH
42943: LD_VAR 0 2
42947: PPUSH
42948: EMPTY
42949: PPUSH
42950: CALL_OW 1
42954: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
42955: LD_ADDR_EXP 32
42959: PUSH
42960: LD_EXP 32
42964: PPUSH
42965: LD_VAR 0 2
42969: PPUSH
42970: EMPTY
42971: PPUSH
42972: CALL_OW 1
42976: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
42977: LD_ADDR_EXP 33
42981: PUSH
42982: LD_EXP 33
42986: PPUSH
42987: LD_VAR 0 2
42991: PPUSH
42992: EMPTY
42993: PPUSH
42994: CALL_OW 1
42998: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
42999: LD_ADDR_EXP 34
43003: PUSH
43004: LD_EXP 34
43008: PPUSH
43009: LD_VAR 0 2
43013: PPUSH
43014: EMPTY
43015: PPUSH
43016: CALL_OW 1
43020: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43021: LD_ADDR_EXP 35
43025: PUSH
43026: LD_EXP 35
43030: PPUSH
43031: LD_VAR 0 2
43035: PPUSH
43036: EMPTY
43037: PPUSH
43038: CALL_OW 1
43042: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
43043: LD_ADDR_EXP 24
43047: PUSH
43048: LD_EXP 24
43052: PPUSH
43053: LD_VAR 0 2
43057: PPUSH
43058: LD_INT 0
43060: PPUSH
43061: CALL_OW 1
43065: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
43066: LD_ADDR_EXP 37
43070: PUSH
43071: LD_EXP 37
43075: PPUSH
43076: LD_VAR 0 2
43080: PPUSH
43081: LD_INT 0
43083: PPUSH
43084: CALL_OW 1
43088: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
43089: LD_ADDR_EXP 25
43093: PUSH
43094: LD_EXP 25
43098: PPUSH
43099: LD_VAR 0 2
43103: PPUSH
43104: EMPTY
43105: PPUSH
43106: CALL_OW 1
43110: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
43111: LD_ADDR_EXP 36
43115: PUSH
43116: LD_EXP 36
43120: PPUSH
43121: LD_VAR 0 2
43125: PPUSH
43126: LD_INT 0
43128: PPUSH
43129: CALL_OW 1
43133: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
43134: LD_ADDR_EXP 38
43138: PUSH
43139: LD_EXP 38
43143: PPUSH
43144: LD_VAR 0 2
43148: PPUSH
43149: EMPTY
43150: PPUSH
43151: CALL_OW 1
43155: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
43156: LD_ADDR_EXP 41
43160: PUSH
43161: LD_EXP 41
43165: PPUSH
43166: LD_VAR 0 2
43170: PPUSH
43171: LD_INT 0
43173: PPUSH
43174: CALL_OW 1
43178: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
43179: LD_ADDR_EXP 42
43183: PUSH
43184: LD_EXP 42
43188: PPUSH
43189: LD_VAR 0 2
43193: PPUSH
43194: EMPTY
43195: PPUSH
43196: CALL_OW 1
43200: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43201: LD_ADDR_EXP 43
43205: PUSH
43206: LD_EXP 43
43210: PPUSH
43211: LD_VAR 0 2
43215: PPUSH
43216: EMPTY
43217: PPUSH
43218: CALL_OW 1
43222: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
43223: LD_ADDR_EXP 44
43227: PUSH
43228: LD_EXP 44
43232: PPUSH
43233: LD_VAR 0 2
43237: PPUSH
43238: EMPTY
43239: PPUSH
43240: CALL_OW 1
43244: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
43245: LD_ADDR_EXP 46
43249: PUSH
43250: LD_EXP 46
43254: PPUSH
43255: LD_VAR 0 2
43259: PPUSH
43260: LD_EXP 13
43264: PUSH
43265: LD_VAR 0 2
43269: ARRAY
43270: PPUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 30
43276: PUSH
43277: LD_INT 6
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 30
43286: PUSH
43287: LD_INT 7
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 30
43296: PUSH
43297: LD_INT 8
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: PPUSH
43310: CALL_OW 72
43314: PPUSH
43315: CALL_OW 1
43319: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
43320: LD_ADDR_EXP 47
43324: PUSH
43325: LD_EXP 47
43329: PPUSH
43330: LD_VAR 0 2
43334: PPUSH
43335: EMPTY
43336: PPUSH
43337: CALL_OW 1
43341: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
43342: LD_ADDR_EXP 48
43346: PUSH
43347: LD_EXP 48
43351: PPUSH
43352: LD_VAR 0 2
43356: PPUSH
43357: EMPTY
43358: PPUSH
43359: CALL_OW 1
43363: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
43364: LD_ADDR_EXP 49
43368: PUSH
43369: LD_EXP 49
43373: PPUSH
43374: LD_VAR 0 2
43378: PPUSH
43379: EMPTY
43380: PPUSH
43381: CALL_OW 1
43385: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
43386: LD_ADDR_EXP 50
43390: PUSH
43391: LD_EXP 50
43395: PPUSH
43396: LD_VAR 0 2
43400: PPUSH
43401: EMPTY
43402: PPUSH
43403: CALL_OW 1
43407: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
43408: LD_ADDR_EXP 51
43412: PUSH
43413: LD_EXP 51
43417: PPUSH
43418: LD_VAR 0 2
43422: PPUSH
43423: EMPTY
43424: PPUSH
43425: CALL_OW 1
43429: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
43430: LD_ADDR_EXP 52
43434: PUSH
43435: LD_EXP 52
43439: PPUSH
43440: LD_VAR 0 2
43444: PPUSH
43445: EMPTY
43446: PPUSH
43447: CALL_OW 1
43451: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
43452: LD_ADDR_EXP 53
43456: PUSH
43457: LD_EXP 53
43461: PPUSH
43462: LD_VAR 0 2
43466: PPUSH
43467: EMPTY
43468: PPUSH
43469: CALL_OW 1
43473: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
43474: LD_ADDR_EXP 54
43478: PUSH
43479: LD_EXP 54
43483: PPUSH
43484: LD_VAR 0 2
43488: PPUSH
43489: EMPTY
43490: PPUSH
43491: CALL_OW 1
43495: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
43496: LD_ADDR_EXP 55
43500: PUSH
43501: LD_EXP 55
43505: PPUSH
43506: LD_VAR 0 2
43510: PPUSH
43511: LD_INT 0
43513: PPUSH
43514: CALL_OW 1
43518: ST_TO_ADDR
// end ;
43519: GO 42443
43521: POP
43522: POP
// MC_InitSides ( ) ;
43523: CALL 43809 0 0
// MC_InitResearch ( ) ;
43527: CALL 43548 0 0
// CustomInitMacro ( ) ;
43531: CALL 201 0 0
// skirmish := true ;
43535: LD_ADDR_EXP 11
43539: PUSH
43540: LD_INT 1
43542: ST_TO_ADDR
// end ;
43543: LD_VAR 0 1
43547: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
43548: LD_INT 0
43550: PPUSH
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
// if not mc_bases then
43556: LD_EXP 13
43560: NOT
43561: IFFALSE 43565
// exit ;
43563: GO 43804
// for i = 1 to 8 do
43565: LD_ADDR_VAR 0 2
43569: PUSH
43570: DOUBLE
43571: LD_INT 1
43573: DEC
43574: ST_TO_ADDR
43575: LD_INT 8
43577: PUSH
43578: FOR_TO
43579: IFFALSE 43605
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
43581: LD_ADDR_EXP 40
43585: PUSH
43586: LD_EXP 40
43590: PPUSH
43591: LD_VAR 0 2
43595: PPUSH
43596: EMPTY
43597: PPUSH
43598: CALL_OW 1
43602: ST_TO_ADDR
43603: GO 43578
43605: POP
43606: POP
// tmp := [ ] ;
43607: LD_ADDR_VAR 0 5
43611: PUSH
43612: EMPTY
43613: ST_TO_ADDR
// for i = 1 to mc_sides do
43614: LD_ADDR_VAR 0 2
43618: PUSH
43619: DOUBLE
43620: LD_INT 1
43622: DEC
43623: ST_TO_ADDR
43624: LD_EXP 39
43628: PUSH
43629: FOR_TO
43630: IFFALSE 43688
// if not mc_sides [ i ] in tmp then
43632: LD_EXP 39
43636: PUSH
43637: LD_VAR 0 2
43641: ARRAY
43642: PUSH
43643: LD_VAR 0 5
43647: IN
43648: NOT
43649: IFFALSE 43686
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
43651: LD_ADDR_VAR 0 5
43655: PUSH
43656: LD_VAR 0 5
43660: PPUSH
43661: LD_VAR 0 5
43665: PUSH
43666: LD_INT 1
43668: PLUS
43669: PPUSH
43670: LD_EXP 39
43674: PUSH
43675: LD_VAR 0 2
43679: ARRAY
43680: PPUSH
43681: CALL_OW 2
43685: ST_TO_ADDR
43686: GO 43629
43688: POP
43689: POP
// if not tmp then
43690: LD_VAR 0 5
43694: NOT
43695: IFFALSE 43699
// exit ;
43697: GO 43804
// for j in tmp do
43699: LD_ADDR_VAR 0 3
43703: PUSH
43704: LD_VAR 0 5
43708: PUSH
43709: FOR_IN
43710: IFFALSE 43802
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
43712: LD_ADDR_VAR 0 6
43716: PUSH
43717: LD_INT 22
43719: PUSH
43720: LD_VAR 0 3
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PPUSH
43729: CALL_OW 69
43733: ST_TO_ADDR
// if not un then
43734: LD_VAR 0 6
43738: NOT
43739: IFFALSE 43743
// continue ;
43741: GO 43709
// nation := GetNation ( un [ 1 ] ) ;
43743: LD_ADDR_VAR 0 4
43747: PUSH
43748: LD_VAR 0 6
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PPUSH
43757: CALL_OW 248
43761: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
43762: LD_ADDR_EXP 40
43766: PUSH
43767: LD_EXP 40
43771: PPUSH
43772: LD_VAR 0 3
43776: PPUSH
43777: LD_VAR 0 3
43781: PPUSH
43782: LD_VAR 0 4
43786: PPUSH
43787: LD_INT 1
43789: PPUSH
43790: CALL 4027 0 3
43794: PPUSH
43795: CALL_OW 1
43799: ST_TO_ADDR
// end ;
43800: GO 43709
43802: POP
43803: POP
// end ;
43804: LD_VAR 0 1
43808: RET
// export function MC_InitSides ( ) ; var i ; begin
43809: LD_INT 0
43811: PPUSH
43812: PPUSH
// if not mc_bases then
43813: LD_EXP 13
43817: NOT
43818: IFFALSE 43822
// exit ;
43820: GO 43896
// for i = 1 to mc_bases do
43822: LD_ADDR_VAR 0 2
43826: PUSH
43827: DOUBLE
43828: LD_INT 1
43830: DEC
43831: ST_TO_ADDR
43832: LD_EXP 13
43836: PUSH
43837: FOR_TO
43838: IFFALSE 43894
// if mc_bases [ i ] then
43840: LD_EXP 13
43844: PUSH
43845: LD_VAR 0 2
43849: ARRAY
43850: IFFALSE 43892
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
43852: LD_ADDR_EXP 39
43856: PUSH
43857: LD_EXP 39
43861: PPUSH
43862: LD_VAR 0 2
43866: PPUSH
43867: LD_EXP 13
43871: PUSH
43872: LD_VAR 0 2
43876: ARRAY
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: PPUSH
43882: CALL_OW 255
43886: PPUSH
43887: CALL_OW 1
43891: ST_TO_ADDR
43892: GO 43837
43894: POP
43895: POP
// end ;
43896: LD_VAR 0 1
43900: RET
// every 0 0$01 trigger skirmish do
43901: LD_EXP 11
43905: IFFALSE 44059
43907: GO 43909
43909: DISABLE
// begin enable ;
43910: ENABLE
// MC_CheckBuildings ( ) ;
43911: CALL 48557 0 0
// MC_CheckPeopleLife ( ) ;
43915: CALL 48682 0 0
// RaiseSailEvent ( 100 ) ;
43919: LD_INT 100
43921: PPUSH
43922: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
43926: LD_INT 103
43928: PPUSH
43929: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
43933: LD_INT 104
43935: PPUSH
43936: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
43940: LD_INT 105
43942: PPUSH
43943: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
43947: LD_INT 106
43949: PPUSH
43950: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
43954: LD_INT 107
43956: PPUSH
43957: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
43961: LD_INT 108
43963: PPUSH
43964: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
43968: LD_INT 109
43970: PPUSH
43971: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
43975: LD_INT 110
43977: PPUSH
43978: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
43982: LD_INT 111
43984: PPUSH
43985: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
43989: LD_INT 112
43991: PPUSH
43992: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
43996: LD_INT 113
43998: PPUSH
43999: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
44003: LD_INT 120
44005: PPUSH
44006: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
44010: LD_INT 121
44012: PPUSH
44013: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
44017: LD_INT 122
44019: PPUSH
44020: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
44024: LD_INT 123
44026: PPUSH
44027: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
44031: LD_INT 124
44033: PPUSH
44034: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
44038: LD_INT 125
44040: PPUSH
44041: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
44045: LD_INT 126
44047: PPUSH
44048: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
44052: LD_INT 200
44054: PPUSH
44055: CALL_OW 427
// end ;
44059: END
// on SailEvent ( event ) do begin if event < 100 then
44060: LD_VAR 0 1
44064: PUSH
44065: LD_INT 100
44067: LESS
44068: IFFALSE 44079
// CustomEvent ( event ) ;
44070: LD_VAR 0 1
44074: PPUSH
44075: CALL 3956 0 1
// if event = 100 then
44079: LD_VAR 0 1
44083: PUSH
44084: LD_INT 100
44086: EQUAL
44087: IFFALSE 44093
// MC_ClassManager ( ) ;
44089: CALL 44485 0 0
// if event = 101 then
44093: LD_VAR 0 1
44097: PUSH
44098: LD_INT 101
44100: EQUAL
44101: IFFALSE 44107
// MC_RepairBuildings ( ) ;
44103: CALL 49267 0 0
// if event = 102 then
44107: LD_VAR 0 1
44111: PUSH
44112: LD_INT 102
44114: EQUAL
44115: IFFALSE 44121
// MC_Heal ( ) ;
44117: CALL 50126 0 0
// if event = 103 then
44121: LD_VAR 0 1
44125: PUSH
44126: LD_INT 103
44128: EQUAL
44129: IFFALSE 44135
// MC_Build ( ) ;
44131: CALL 50548 0 0
// if event = 104 then
44135: LD_VAR 0 1
44139: PUSH
44140: LD_INT 104
44142: EQUAL
44143: IFFALSE 44149
// MC_TurretWeapon ( ) ;
44145: CALL 52161 0 0
// if event = 105 then
44149: LD_VAR 0 1
44153: PUSH
44154: LD_INT 105
44156: EQUAL
44157: IFFALSE 44163
// MC_BuildUpgrade ( ) ;
44159: CALL 51712 0 0
// if event = 106 then
44163: LD_VAR 0 1
44167: PUSH
44168: LD_INT 106
44170: EQUAL
44171: IFFALSE 44177
// MC_PlantMines ( ) ;
44173: CALL 52591 0 0
// if event = 107 then
44177: LD_VAR 0 1
44181: PUSH
44182: LD_INT 107
44184: EQUAL
44185: IFFALSE 44191
// MC_CollectCrates ( ) ;
44187: CALL 53389 0 0
// if event = 108 then
44191: LD_VAR 0 1
44195: PUSH
44196: LD_INT 108
44198: EQUAL
44199: IFFALSE 44205
// MC_LinkRemoteControl ( ) ;
44201: CALL 55165 0 0
// if event = 109 then
44205: LD_VAR 0 1
44209: PUSH
44210: LD_INT 109
44212: EQUAL
44213: IFFALSE 44219
// MC_ProduceVehicle ( ) ;
44215: CALL 55346 0 0
// if event = 110 then
44219: LD_VAR 0 1
44223: PUSH
44224: LD_INT 110
44226: EQUAL
44227: IFFALSE 44233
// MC_SendAttack ( ) ;
44229: CALL 55812 0 0
// if event = 111 then
44233: LD_VAR 0 1
44237: PUSH
44238: LD_INT 111
44240: EQUAL
44241: IFFALSE 44247
// MC_Defend ( ) ;
44243: CALL 55920 0 0
// if event = 112 then
44247: LD_VAR 0 1
44251: PUSH
44252: LD_INT 112
44254: EQUAL
44255: IFFALSE 44261
// MC_Research ( ) ;
44257: CALL 56525 0 0
// if event = 113 then
44261: LD_VAR 0 1
44265: PUSH
44266: LD_INT 113
44268: EQUAL
44269: IFFALSE 44275
// MC_MinesTrigger ( ) ;
44271: CALL 57639 0 0
// if event = 120 then
44275: LD_VAR 0 1
44279: PUSH
44280: LD_INT 120
44282: EQUAL
44283: IFFALSE 44289
// MC_RepairVehicle ( ) ;
44285: CALL 57738 0 0
// if event = 121 then
44289: LD_VAR 0 1
44293: PUSH
44294: LD_INT 121
44296: EQUAL
44297: IFFALSE 44303
// MC_TameApe ( ) ;
44299: CALL 58468 0 0
// if event = 122 then
44303: LD_VAR 0 1
44307: PUSH
44308: LD_INT 122
44310: EQUAL
44311: IFFALSE 44317
// MC_ChangeApeClass ( ) ;
44313: CALL 59297 0 0
// if event = 123 then
44317: LD_VAR 0 1
44321: PUSH
44322: LD_INT 123
44324: EQUAL
44325: IFFALSE 44331
// MC_Bazooka ( ) ;
44327: CALL 59947 0 0
// if event = 124 then
44331: LD_VAR 0 1
44335: PUSH
44336: LD_INT 124
44338: EQUAL
44339: IFFALSE 44345
// MC_TeleportExit ( ) ;
44341: CALL 60145 0 0
// if event = 125 then
44345: LD_VAR 0 1
44349: PUSH
44350: LD_INT 125
44352: EQUAL
44353: IFFALSE 44359
// MC_Deposits ( ) ;
44355: CALL 60792 0 0
// if event = 126 then
44359: LD_VAR 0 1
44363: PUSH
44364: LD_INT 126
44366: EQUAL
44367: IFFALSE 44373
// MC_RemoteDriver ( ) ;
44369: CALL 61417 0 0
// if event = 200 then
44373: LD_VAR 0 1
44377: PUSH
44378: LD_INT 200
44380: EQUAL
44381: IFFALSE 44387
// MC_Idle ( ) ;
44383: CALL 63366 0 0
// end ;
44387: PPOPN 1
44389: END
// export function MC_Reset ( base , tag ) ; var i ; begin
44390: LD_INT 0
44392: PPUSH
44393: PPUSH
// if not mc_bases [ base ] or not tag then
44394: LD_EXP 13
44398: PUSH
44399: LD_VAR 0 1
44403: ARRAY
44404: NOT
44405: PUSH
44406: LD_VAR 0 2
44410: NOT
44411: OR
44412: IFFALSE 44416
// exit ;
44414: GO 44480
// for i in mc_bases [ base ] union mc_ape [ base ] do
44416: LD_ADDR_VAR 0 4
44420: PUSH
44421: LD_EXP 13
44425: PUSH
44426: LD_VAR 0 1
44430: ARRAY
44431: PUSH
44432: LD_EXP 42
44436: PUSH
44437: LD_VAR 0 1
44441: ARRAY
44442: UNION
44443: PUSH
44444: FOR_IN
44445: IFFALSE 44478
// if GetTag ( i ) = tag then
44447: LD_VAR 0 4
44451: PPUSH
44452: CALL_OW 110
44456: PUSH
44457: LD_VAR 0 2
44461: EQUAL
44462: IFFALSE 44476
// SetTag ( i , 0 ) ;
44464: LD_VAR 0 4
44468: PPUSH
44469: LD_INT 0
44471: PPUSH
44472: CALL_OW 109
44476: GO 44444
44478: POP
44479: POP
// end ;
44480: LD_VAR 0 3
44484: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
44485: LD_INT 0
44487: PPUSH
44488: PPUSH
44489: PPUSH
44490: PPUSH
44491: PPUSH
44492: PPUSH
44493: PPUSH
44494: PPUSH
// if not mc_bases then
44495: LD_EXP 13
44499: NOT
44500: IFFALSE 44504
// exit ;
44502: GO 44962
// for i = 1 to mc_bases do
44504: LD_ADDR_VAR 0 2
44508: PUSH
44509: DOUBLE
44510: LD_INT 1
44512: DEC
44513: ST_TO_ADDR
44514: LD_EXP 13
44518: PUSH
44519: FOR_TO
44520: IFFALSE 44960
// begin tmp := MC_ClassCheckReq ( i ) ;
44522: LD_ADDR_VAR 0 4
44526: PUSH
44527: LD_VAR 0 2
44531: PPUSH
44532: CALL 44967 0 1
44536: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
44537: LD_ADDR_EXP 54
44541: PUSH
44542: LD_EXP 54
44546: PPUSH
44547: LD_VAR 0 2
44551: PPUSH
44552: LD_VAR 0 4
44556: PPUSH
44557: CALL_OW 1
44561: ST_TO_ADDR
// if not tmp then
44562: LD_VAR 0 4
44566: NOT
44567: IFFALSE 44571
// continue ;
44569: GO 44519
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
44571: LD_ADDR_VAR 0 6
44575: PUSH
44576: LD_EXP 13
44580: PUSH
44581: LD_VAR 0 2
44585: ARRAY
44586: PPUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 30
44592: PUSH
44593: LD_INT 4
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 30
44602: PUSH
44603: LD_INT 5
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: PPUSH
44615: CALL_OW 72
44619: PUSH
44620: LD_EXP 13
44624: PUSH
44625: LD_VAR 0 2
44629: ARRAY
44630: PPUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 30
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 30
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: PPUSH
44659: CALL_OW 72
44663: PUSH
44664: LD_EXP 13
44668: PUSH
44669: LD_VAR 0 2
44673: ARRAY
44674: PPUSH
44675: LD_INT 30
44677: PUSH
44678: LD_INT 3
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PPUSH
44685: CALL_OW 72
44689: PUSH
44690: LD_EXP 13
44694: PUSH
44695: LD_VAR 0 2
44699: ARRAY
44700: PPUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 30
44706: PUSH
44707: LD_INT 6
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 30
44716: PUSH
44717: LD_INT 7
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 30
44726: PUSH
44727: LD_INT 8
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: PPUSH
44740: CALL_OW 72
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
// for j = 1 to 4 do
44751: LD_ADDR_VAR 0 3
44755: PUSH
44756: DOUBLE
44757: LD_INT 1
44759: DEC
44760: ST_TO_ADDR
44761: LD_INT 4
44763: PUSH
44764: FOR_TO
44765: IFFALSE 44956
// begin if not tmp [ j ] then
44767: LD_VAR 0 4
44771: PUSH
44772: LD_VAR 0 3
44776: ARRAY
44777: NOT
44778: IFFALSE 44782
// continue ;
44780: GO 44764
// for p in tmp [ j ] do
44782: LD_ADDR_VAR 0 5
44786: PUSH
44787: LD_VAR 0 4
44791: PUSH
44792: LD_VAR 0 3
44796: ARRAY
44797: PUSH
44798: FOR_IN
44799: IFFALSE 44952
// begin if not b [ j ] then
44801: LD_VAR 0 6
44805: PUSH
44806: LD_VAR 0 3
44810: ARRAY
44811: NOT
44812: IFFALSE 44816
// break ;
44814: GO 44952
// e := 0 ;
44816: LD_ADDR_VAR 0 7
44820: PUSH
44821: LD_INT 0
44823: ST_TO_ADDR
// for k in b [ j ] do
44824: LD_ADDR_VAR 0 8
44828: PUSH
44829: LD_VAR 0 6
44833: PUSH
44834: LD_VAR 0 3
44838: ARRAY
44839: PUSH
44840: FOR_IN
44841: IFFALSE 44868
// if IsNotFull ( k ) then
44843: LD_VAR 0 8
44847: PPUSH
44848: CALL 6176 0 1
44852: IFFALSE 44866
// begin e := k ;
44854: LD_ADDR_VAR 0 7
44858: PUSH
44859: LD_VAR 0 8
44863: ST_TO_ADDR
// break ;
44864: GO 44868
// end ;
44866: GO 44840
44868: POP
44869: POP
// if e and not UnitGoingToBuilding ( p , e ) then
44870: LD_VAR 0 7
44874: PUSH
44875: LD_VAR 0 5
44879: PPUSH
44880: LD_VAR 0 7
44884: PPUSH
44885: CALL 38596 0 2
44889: NOT
44890: AND
44891: IFFALSE 44950
// begin if IsInUnit ( p ) then
44893: LD_VAR 0 5
44897: PPUSH
44898: CALL_OW 310
44902: IFFALSE 44913
// ComExitBuilding ( p ) ;
44904: LD_VAR 0 5
44908: PPUSH
44909: CALL_OW 122
// ComEnterUnit ( p , e ) ;
44913: LD_VAR 0 5
44917: PPUSH
44918: LD_VAR 0 7
44922: PPUSH
44923: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
44927: LD_VAR 0 5
44931: PPUSH
44932: LD_VAR 0 3
44936: PPUSH
44937: CALL_OW 183
// AddComExitBuilding ( p ) ;
44941: LD_VAR 0 5
44945: PPUSH
44946: CALL_OW 182
// end ; end ;
44950: GO 44798
44952: POP
44953: POP
// end ;
44954: GO 44764
44956: POP
44957: POP
// end ;
44958: GO 44519
44960: POP
44961: POP
// end ;
44962: LD_VAR 0 1
44966: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
44967: LD_INT 0
44969: PPUSH
44970: PPUSH
44971: PPUSH
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
44981: LD_VAR 0 1
44985: NOT
44986: PUSH
44987: LD_EXP 13
44991: PUSH
44992: LD_VAR 0 1
44996: ARRAY
44997: NOT
44998: OR
44999: PUSH
45000: LD_EXP 13
45004: PUSH
45005: LD_VAR 0 1
45009: ARRAY
45010: PPUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 30
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 30
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: PPUSH
45039: CALL_OW 72
45043: NOT
45044: OR
45045: IFFALSE 45049
// exit ;
45047: GO 48552
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45049: LD_ADDR_VAR 0 4
45053: PUSH
45054: LD_EXP 13
45058: PUSH
45059: LD_VAR 0 1
45063: ARRAY
45064: PPUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 25
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 25
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 25
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 25
45100: PUSH
45101: LD_INT 4
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 25
45110: PUSH
45111: LD_INT 5
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 25
45120: PUSH
45121: LD_INT 8
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 25
45130: PUSH
45131: LD_INT 9
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: PPUSH
45148: CALL_OW 72
45152: ST_TO_ADDR
// if not tmp then
45153: LD_VAR 0 4
45157: NOT
45158: IFFALSE 45162
// exit ;
45160: GO 48552
// for i in tmp do
45162: LD_ADDR_VAR 0 3
45166: PUSH
45167: LD_VAR 0 4
45171: PUSH
45172: FOR_IN
45173: IFFALSE 45204
// if GetTag ( i ) then
45175: LD_VAR 0 3
45179: PPUSH
45180: CALL_OW 110
45184: IFFALSE 45202
// tmp := tmp diff i ;
45186: LD_ADDR_VAR 0 4
45190: PUSH
45191: LD_VAR 0 4
45195: PUSH
45196: LD_VAR 0 3
45200: DIFF
45201: ST_TO_ADDR
45202: GO 45172
45204: POP
45205: POP
// if not tmp then
45206: LD_VAR 0 4
45210: NOT
45211: IFFALSE 45215
// exit ;
45213: GO 48552
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45215: LD_ADDR_VAR 0 5
45219: PUSH
45220: LD_EXP 13
45224: PUSH
45225: LD_VAR 0 1
45229: ARRAY
45230: PPUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 25
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 25
45246: PUSH
45247: LD_INT 5
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 25
45256: PUSH
45257: LD_INT 8
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 25
45266: PUSH
45267: LD_INT 9
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: PPUSH
45281: CALL_OW 72
45285: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
45286: LD_ADDR_VAR 0 6
45290: PUSH
45291: LD_EXP 13
45295: PUSH
45296: LD_VAR 0 1
45300: ARRAY
45301: PPUSH
45302: LD_INT 25
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PPUSH
45312: CALL_OW 72
45316: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
45317: LD_ADDR_VAR 0 7
45321: PUSH
45322: LD_EXP 13
45326: PUSH
45327: LD_VAR 0 1
45331: ARRAY
45332: PPUSH
45333: LD_INT 25
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PPUSH
45343: CALL_OW 72
45347: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
45348: LD_ADDR_VAR 0 8
45352: PUSH
45353: LD_EXP 13
45357: PUSH
45358: LD_VAR 0 1
45362: ARRAY
45363: PPUSH
45364: LD_INT 25
45366: PUSH
45367: LD_INT 4
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 24
45376: PUSH
45377: LD_INT 251
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PPUSH
45388: CALL_OW 72
45392: ST_TO_ADDR
// if mc_scan [ base ] then
45393: LD_EXP 36
45397: PUSH
45398: LD_VAR 0 1
45402: ARRAY
45403: IFFALSE 45864
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
45405: LD_ADDR_EXP 55
45409: PUSH
45410: LD_EXP 55
45414: PPUSH
45415: LD_VAR 0 1
45419: PPUSH
45420: LD_INT 4
45422: PPUSH
45423: CALL_OW 1
45427: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45428: LD_ADDR_VAR 0 12
45432: PUSH
45433: LD_EXP 13
45437: PUSH
45438: LD_VAR 0 1
45442: ARRAY
45443: PPUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 30
45449: PUSH
45450: LD_INT 4
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 30
45459: PUSH
45460: LD_INT 5
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: PPUSH
45472: CALL_OW 72
45476: ST_TO_ADDR
// if not b then
45477: LD_VAR 0 12
45481: NOT
45482: IFFALSE 45486
// exit ;
45484: GO 48552
// p := [ ] ;
45486: LD_ADDR_VAR 0 11
45490: PUSH
45491: EMPTY
45492: ST_TO_ADDR
// if sci >= 2 then
45493: LD_VAR 0 8
45497: PUSH
45498: LD_INT 2
45500: GREATEREQUAL
45501: IFFALSE 45532
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
45503: LD_ADDR_VAR 0 8
45507: PUSH
45508: LD_VAR 0 8
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: PUSH
45517: LD_VAR 0 8
45521: PUSH
45522: LD_INT 2
45524: ARRAY
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: ST_TO_ADDR
45530: GO 45593
// if sci = 1 then
45532: LD_VAR 0 8
45536: PUSH
45537: LD_INT 1
45539: EQUAL
45540: IFFALSE 45561
// sci := [ sci [ 1 ] ] else
45542: LD_ADDR_VAR 0 8
45546: PUSH
45547: LD_VAR 0 8
45551: PUSH
45552: LD_INT 1
45554: ARRAY
45555: PUSH
45556: EMPTY
45557: LIST
45558: ST_TO_ADDR
45559: GO 45593
// if sci = 0 then
45561: LD_VAR 0 8
45565: PUSH
45566: LD_INT 0
45568: EQUAL
45569: IFFALSE 45593
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
45571: LD_ADDR_VAR 0 11
45575: PUSH
45576: LD_VAR 0 4
45580: PPUSH
45581: LD_INT 4
45583: PPUSH
45584: CALL 38459 0 2
45588: PUSH
45589: LD_INT 1
45591: ARRAY
45592: ST_TO_ADDR
// if eng > 4 then
45593: LD_VAR 0 6
45597: PUSH
45598: LD_INT 4
45600: GREATER
45601: IFFALSE 45647
// for i = eng downto 4 do
45603: LD_ADDR_VAR 0 3
45607: PUSH
45608: DOUBLE
45609: LD_VAR 0 6
45613: INC
45614: ST_TO_ADDR
45615: LD_INT 4
45617: PUSH
45618: FOR_DOWNTO
45619: IFFALSE 45645
// eng := eng diff eng [ i ] ;
45621: LD_ADDR_VAR 0 6
45625: PUSH
45626: LD_VAR 0 6
45630: PUSH
45631: LD_VAR 0 6
45635: PUSH
45636: LD_VAR 0 3
45640: ARRAY
45641: DIFF
45642: ST_TO_ADDR
45643: GO 45618
45645: POP
45646: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
45647: LD_ADDR_VAR 0 4
45651: PUSH
45652: LD_VAR 0 4
45656: PUSH
45657: LD_VAR 0 5
45661: PUSH
45662: LD_VAR 0 6
45666: UNION
45667: PUSH
45668: LD_VAR 0 7
45672: UNION
45673: PUSH
45674: LD_VAR 0 8
45678: UNION
45679: DIFF
45680: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
45681: LD_ADDR_VAR 0 13
45685: PUSH
45686: LD_EXP 13
45690: PUSH
45691: LD_VAR 0 1
45695: ARRAY
45696: PPUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 30
45702: PUSH
45703: LD_INT 32
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 30
45712: PUSH
45713: LD_INT 31
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 72
45729: PUSH
45730: LD_EXP 13
45734: PUSH
45735: LD_VAR 0 1
45739: ARRAY
45740: PPUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 30
45746: PUSH
45747: LD_INT 4
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 30
45756: PUSH
45757: LD_INT 5
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: PPUSH
45769: CALL_OW 72
45773: PUSH
45774: LD_INT 6
45776: MUL
45777: PLUS
45778: ST_TO_ADDR
// if bcount < tmp then
45779: LD_VAR 0 13
45783: PUSH
45784: LD_VAR 0 4
45788: LESS
45789: IFFALSE 45835
// for i = tmp downto bcount do
45791: LD_ADDR_VAR 0 3
45795: PUSH
45796: DOUBLE
45797: LD_VAR 0 4
45801: INC
45802: ST_TO_ADDR
45803: LD_VAR 0 13
45807: PUSH
45808: FOR_DOWNTO
45809: IFFALSE 45833
// tmp := Delete ( tmp , tmp ) ;
45811: LD_ADDR_VAR 0 4
45815: PUSH
45816: LD_VAR 0 4
45820: PPUSH
45821: LD_VAR 0 4
45825: PPUSH
45826: CALL_OW 3
45830: ST_TO_ADDR
45831: GO 45808
45833: POP
45834: POP
// result := [ tmp , 0 , 0 , p ] ;
45835: LD_ADDR_VAR 0 2
45839: PUSH
45840: LD_VAR 0 4
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_VAR 0 11
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// exit ;
45862: GO 48552
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
45864: LD_EXP 13
45868: PUSH
45869: LD_VAR 0 1
45873: ARRAY
45874: PPUSH
45875: LD_INT 2
45877: PUSH
45878: LD_INT 30
45880: PUSH
45881: LD_INT 6
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 30
45890: PUSH
45891: LD_INT 7
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 30
45900: PUSH
45901: LD_INT 8
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: PPUSH
45914: CALL_OW 72
45918: NOT
45919: PUSH
45920: LD_EXP 13
45924: PUSH
45925: LD_VAR 0 1
45929: ARRAY
45930: PPUSH
45931: LD_INT 30
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PPUSH
45941: CALL_OW 72
45945: NOT
45946: AND
45947: IFFALSE 46019
// begin if eng = tmp then
45949: LD_VAR 0 6
45953: PUSH
45954: LD_VAR 0 4
45958: EQUAL
45959: IFFALSE 45963
// exit ;
45961: GO 48552
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
45963: LD_ADDR_EXP 55
45967: PUSH
45968: LD_EXP 55
45972: PPUSH
45973: LD_VAR 0 1
45977: PPUSH
45978: LD_INT 1
45980: PPUSH
45981: CALL_OW 1
45985: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
45986: LD_ADDR_VAR 0 2
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_VAR 0 4
45998: PUSH
45999: LD_VAR 0 6
46003: DIFF
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// exit ;
46017: GO 48552
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46019: LD_EXP 40
46023: PUSH
46024: LD_EXP 39
46028: PUSH
46029: LD_VAR 0 1
46033: ARRAY
46034: ARRAY
46035: PUSH
46036: LD_EXP 13
46040: PUSH
46041: LD_VAR 0 1
46045: ARRAY
46046: PPUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 30
46052: PUSH
46053: LD_INT 6
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 30
46062: PUSH
46063: LD_INT 7
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 30
46072: PUSH
46073: LD_INT 8
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: PPUSH
46086: CALL_OW 72
46090: AND
46091: PUSH
46092: LD_EXP 13
46096: PUSH
46097: LD_VAR 0 1
46101: ARRAY
46102: PPUSH
46103: LD_INT 30
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PPUSH
46113: CALL_OW 72
46117: NOT
46118: AND
46119: IFFALSE 46333
// begin if sci >= 6 then
46121: LD_VAR 0 8
46125: PUSH
46126: LD_INT 6
46128: GREATEREQUAL
46129: IFFALSE 46133
// exit ;
46131: GO 48552
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
46133: LD_ADDR_EXP 55
46137: PUSH
46138: LD_EXP 55
46142: PPUSH
46143: LD_VAR 0 1
46147: PPUSH
46148: LD_INT 2
46150: PPUSH
46151: CALL_OW 1
46155: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
46156: LD_ADDR_VAR 0 9
46160: PUSH
46161: LD_VAR 0 4
46165: PUSH
46166: LD_VAR 0 8
46170: DIFF
46171: PPUSH
46172: LD_INT 4
46174: PPUSH
46175: CALL 38459 0 2
46179: ST_TO_ADDR
// p := [ ] ;
46180: LD_ADDR_VAR 0 11
46184: PUSH
46185: EMPTY
46186: ST_TO_ADDR
// if sci < 6 and sort > 6 then
46187: LD_VAR 0 8
46191: PUSH
46192: LD_INT 6
46194: LESS
46195: PUSH
46196: LD_VAR 0 9
46200: PUSH
46201: LD_INT 6
46203: GREATER
46204: AND
46205: IFFALSE 46286
// begin for i = 1 to 6 - sci do
46207: LD_ADDR_VAR 0 3
46211: PUSH
46212: DOUBLE
46213: LD_INT 1
46215: DEC
46216: ST_TO_ADDR
46217: LD_INT 6
46219: PUSH
46220: LD_VAR 0 8
46224: MINUS
46225: PUSH
46226: FOR_TO
46227: IFFALSE 46282
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
46229: LD_ADDR_VAR 0 11
46233: PUSH
46234: LD_VAR 0 11
46238: PPUSH
46239: LD_VAR 0 11
46243: PUSH
46244: LD_INT 1
46246: PLUS
46247: PPUSH
46248: LD_VAR 0 9
46252: PUSH
46253: LD_INT 1
46255: ARRAY
46256: PPUSH
46257: CALL_OW 2
46261: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
46262: LD_ADDR_VAR 0 9
46266: PUSH
46267: LD_VAR 0 9
46271: PPUSH
46272: LD_INT 1
46274: PPUSH
46275: CALL_OW 3
46279: ST_TO_ADDR
// end ;
46280: GO 46226
46282: POP
46283: POP
// end else
46284: GO 46306
// if sort then
46286: LD_VAR 0 9
46290: IFFALSE 46306
// p := sort [ 1 ] ;
46292: LD_ADDR_VAR 0 11
46296: PUSH
46297: LD_VAR 0 9
46301: PUSH
46302: LD_INT 1
46304: ARRAY
46305: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
46306: LD_ADDR_VAR 0 2
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_VAR 0 11
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: ST_TO_ADDR
// exit ;
46331: GO 48552
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46333: LD_EXP 40
46337: PUSH
46338: LD_EXP 39
46342: PUSH
46343: LD_VAR 0 1
46347: ARRAY
46348: ARRAY
46349: PUSH
46350: LD_EXP 13
46354: PUSH
46355: LD_VAR 0 1
46359: ARRAY
46360: PPUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 30
46366: PUSH
46367: LD_INT 6
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 30
46376: PUSH
46377: LD_INT 7
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 30
46386: PUSH
46387: LD_INT 8
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: PPUSH
46400: CALL_OW 72
46404: AND
46405: PUSH
46406: LD_EXP 13
46410: PUSH
46411: LD_VAR 0 1
46415: ARRAY
46416: PPUSH
46417: LD_INT 30
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PPUSH
46427: CALL_OW 72
46431: AND
46432: IFFALSE 47166
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
46434: LD_ADDR_EXP 55
46438: PUSH
46439: LD_EXP 55
46443: PPUSH
46444: LD_VAR 0 1
46448: PPUSH
46449: LD_INT 3
46451: PPUSH
46452: CALL_OW 1
46456: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
46457: LD_ADDR_VAR 0 2
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: ST_TO_ADDR
// if not eng then
46480: LD_VAR 0 6
46484: NOT
46485: IFFALSE 46548
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
46487: LD_ADDR_VAR 0 11
46491: PUSH
46492: LD_VAR 0 4
46496: PPUSH
46497: LD_INT 2
46499: PPUSH
46500: CALL 38459 0 2
46504: PUSH
46505: LD_INT 1
46507: ARRAY
46508: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
46509: LD_ADDR_VAR 0 2
46513: PUSH
46514: LD_VAR 0 2
46518: PPUSH
46519: LD_INT 2
46521: PPUSH
46522: LD_VAR 0 11
46526: PPUSH
46527: CALL_OW 1
46531: ST_TO_ADDR
// tmp := tmp diff p ;
46532: LD_ADDR_VAR 0 4
46536: PUSH
46537: LD_VAR 0 4
46541: PUSH
46542: LD_VAR 0 11
46546: DIFF
46547: ST_TO_ADDR
// end ; if tmp and sci < 6 then
46548: LD_VAR 0 4
46552: PUSH
46553: LD_VAR 0 8
46557: PUSH
46558: LD_INT 6
46560: LESS
46561: AND
46562: IFFALSE 46750
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
46564: LD_ADDR_VAR 0 9
46568: PUSH
46569: LD_VAR 0 4
46573: PUSH
46574: LD_VAR 0 8
46578: PUSH
46579: LD_VAR 0 7
46583: UNION
46584: DIFF
46585: PPUSH
46586: LD_INT 4
46588: PPUSH
46589: CALL 38459 0 2
46593: ST_TO_ADDR
// p := [ ] ;
46594: LD_ADDR_VAR 0 11
46598: PUSH
46599: EMPTY
46600: ST_TO_ADDR
// if sort then
46601: LD_VAR 0 9
46605: IFFALSE 46721
// for i = 1 to 6 - sci do
46607: LD_ADDR_VAR 0 3
46611: PUSH
46612: DOUBLE
46613: LD_INT 1
46615: DEC
46616: ST_TO_ADDR
46617: LD_INT 6
46619: PUSH
46620: LD_VAR 0 8
46624: MINUS
46625: PUSH
46626: FOR_TO
46627: IFFALSE 46719
// begin if i = sort then
46629: LD_VAR 0 3
46633: PUSH
46634: LD_VAR 0 9
46638: EQUAL
46639: IFFALSE 46643
// break ;
46641: GO 46719
// if GetClass ( i ) = 4 then
46643: LD_VAR 0 3
46647: PPUSH
46648: CALL_OW 257
46652: PUSH
46653: LD_INT 4
46655: EQUAL
46656: IFFALSE 46660
// continue ;
46658: GO 46626
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46660: LD_ADDR_VAR 0 11
46664: PUSH
46665: LD_VAR 0 11
46669: PPUSH
46670: LD_VAR 0 11
46674: PUSH
46675: LD_INT 1
46677: PLUS
46678: PPUSH
46679: LD_VAR 0 9
46683: PUSH
46684: LD_VAR 0 3
46688: ARRAY
46689: PPUSH
46690: CALL_OW 2
46694: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46695: LD_ADDR_VAR 0 4
46699: PUSH
46700: LD_VAR 0 4
46704: PUSH
46705: LD_VAR 0 9
46709: PUSH
46710: LD_VAR 0 3
46714: ARRAY
46715: DIFF
46716: ST_TO_ADDR
// end ;
46717: GO 46626
46719: POP
46720: POP
// if p then
46721: LD_VAR 0 11
46725: IFFALSE 46750
// result := Replace ( result , 4 , p ) ;
46727: LD_ADDR_VAR 0 2
46731: PUSH
46732: LD_VAR 0 2
46736: PPUSH
46737: LD_INT 4
46739: PPUSH
46740: LD_VAR 0 11
46744: PPUSH
46745: CALL_OW 1
46749: ST_TO_ADDR
// end ; if tmp and mech < 6 then
46750: LD_VAR 0 4
46754: PUSH
46755: LD_VAR 0 7
46759: PUSH
46760: LD_INT 6
46762: LESS
46763: AND
46764: IFFALSE 46952
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
46766: LD_ADDR_VAR 0 9
46770: PUSH
46771: LD_VAR 0 4
46775: PUSH
46776: LD_VAR 0 8
46780: PUSH
46781: LD_VAR 0 7
46785: UNION
46786: DIFF
46787: PPUSH
46788: LD_INT 3
46790: PPUSH
46791: CALL 38459 0 2
46795: ST_TO_ADDR
// p := [ ] ;
46796: LD_ADDR_VAR 0 11
46800: PUSH
46801: EMPTY
46802: ST_TO_ADDR
// if sort then
46803: LD_VAR 0 9
46807: IFFALSE 46923
// for i = 1 to 6 - mech do
46809: LD_ADDR_VAR 0 3
46813: PUSH
46814: DOUBLE
46815: LD_INT 1
46817: DEC
46818: ST_TO_ADDR
46819: LD_INT 6
46821: PUSH
46822: LD_VAR 0 7
46826: MINUS
46827: PUSH
46828: FOR_TO
46829: IFFALSE 46921
// begin if i = sort then
46831: LD_VAR 0 3
46835: PUSH
46836: LD_VAR 0 9
46840: EQUAL
46841: IFFALSE 46845
// break ;
46843: GO 46921
// if GetClass ( i ) = 3 then
46845: LD_VAR 0 3
46849: PPUSH
46850: CALL_OW 257
46854: PUSH
46855: LD_INT 3
46857: EQUAL
46858: IFFALSE 46862
// continue ;
46860: GO 46828
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46862: LD_ADDR_VAR 0 11
46866: PUSH
46867: LD_VAR 0 11
46871: PPUSH
46872: LD_VAR 0 11
46876: PUSH
46877: LD_INT 1
46879: PLUS
46880: PPUSH
46881: LD_VAR 0 9
46885: PUSH
46886: LD_VAR 0 3
46890: ARRAY
46891: PPUSH
46892: CALL_OW 2
46896: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46897: LD_ADDR_VAR 0 4
46901: PUSH
46902: LD_VAR 0 4
46906: PUSH
46907: LD_VAR 0 9
46911: PUSH
46912: LD_VAR 0 3
46916: ARRAY
46917: DIFF
46918: ST_TO_ADDR
// end ;
46919: GO 46828
46921: POP
46922: POP
// if p then
46923: LD_VAR 0 11
46927: IFFALSE 46952
// result := Replace ( result , 3 , p ) ;
46929: LD_ADDR_VAR 0 2
46933: PUSH
46934: LD_VAR 0 2
46938: PPUSH
46939: LD_INT 3
46941: PPUSH
46942: LD_VAR 0 11
46946: PPUSH
46947: CALL_OW 1
46951: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
46952: LD_VAR 0 4
46956: PUSH
46957: LD_INT 6
46959: GREATER
46960: PUSH
46961: LD_VAR 0 6
46965: PUSH
46966: LD_INT 6
46968: LESS
46969: AND
46970: IFFALSE 47164
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
46972: LD_ADDR_VAR 0 9
46976: PUSH
46977: LD_VAR 0 4
46981: PUSH
46982: LD_VAR 0 8
46986: PUSH
46987: LD_VAR 0 7
46991: UNION
46992: PUSH
46993: LD_VAR 0 6
46997: UNION
46998: DIFF
46999: PPUSH
47000: LD_INT 2
47002: PPUSH
47003: CALL 38459 0 2
47007: ST_TO_ADDR
// p := [ ] ;
47008: LD_ADDR_VAR 0 11
47012: PUSH
47013: EMPTY
47014: ST_TO_ADDR
// if sort then
47015: LD_VAR 0 9
47019: IFFALSE 47135
// for i = 1 to 6 - eng do
47021: LD_ADDR_VAR 0 3
47025: PUSH
47026: DOUBLE
47027: LD_INT 1
47029: DEC
47030: ST_TO_ADDR
47031: LD_INT 6
47033: PUSH
47034: LD_VAR 0 6
47038: MINUS
47039: PUSH
47040: FOR_TO
47041: IFFALSE 47133
// begin if i = sort then
47043: LD_VAR 0 3
47047: PUSH
47048: LD_VAR 0 9
47052: EQUAL
47053: IFFALSE 47057
// break ;
47055: GO 47133
// if GetClass ( i ) = 2 then
47057: LD_VAR 0 3
47061: PPUSH
47062: CALL_OW 257
47066: PUSH
47067: LD_INT 2
47069: EQUAL
47070: IFFALSE 47074
// continue ;
47072: GO 47040
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47074: LD_ADDR_VAR 0 11
47078: PUSH
47079: LD_VAR 0 11
47083: PPUSH
47084: LD_VAR 0 11
47088: PUSH
47089: LD_INT 1
47091: PLUS
47092: PPUSH
47093: LD_VAR 0 9
47097: PUSH
47098: LD_VAR 0 3
47102: ARRAY
47103: PPUSH
47104: CALL_OW 2
47108: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47109: LD_ADDR_VAR 0 4
47113: PUSH
47114: LD_VAR 0 4
47118: PUSH
47119: LD_VAR 0 9
47123: PUSH
47124: LD_VAR 0 3
47128: ARRAY
47129: DIFF
47130: ST_TO_ADDR
// end ;
47131: GO 47040
47133: POP
47134: POP
// if p then
47135: LD_VAR 0 11
47139: IFFALSE 47164
// result := Replace ( result , 2 , p ) ;
47141: LD_ADDR_VAR 0 2
47145: PUSH
47146: LD_VAR 0 2
47150: PPUSH
47151: LD_INT 2
47153: PPUSH
47154: LD_VAR 0 11
47158: PPUSH
47159: CALL_OW 1
47163: ST_TO_ADDR
// end ; exit ;
47164: GO 48552
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
47166: LD_EXP 40
47170: PUSH
47171: LD_EXP 39
47175: PUSH
47176: LD_VAR 0 1
47180: ARRAY
47181: ARRAY
47182: NOT
47183: PUSH
47184: LD_EXP 13
47188: PUSH
47189: LD_VAR 0 1
47193: ARRAY
47194: PPUSH
47195: LD_INT 30
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PPUSH
47205: CALL_OW 72
47209: AND
47210: PUSH
47211: LD_EXP 18
47215: PUSH
47216: LD_VAR 0 1
47220: ARRAY
47221: AND
47222: IFFALSE 47830
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
47224: LD_ADDR_EXP 55
47228: PUSH
47229: LD_EXP 55
47233: PPUSH
47234: LD_VAR 0 1
47238: PPUSH
47239: LD_INT 5
47241: PPUSH
47242: CALL_OW 1
47246: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
47247: LD_ADDR_VAR 0 2
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// if sci > 1 then
47270: LD_VAR 0 8
47274: PUSH
47275: LD_INT 1
47277: GREATER
47278: IFFALSE 47306
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
47280: LD_ADDR_VAR 0 4
47284: PUSH
47285: LD_VAR 0 4
47289: PUSH
47290: LD_VAR 0 8
47294: PUSH
47295: LD_VAR 0 8
47299: PUSH
47300: LD_INT 1
47302: ARRAY
47303: DIFF
47304: DIFF
47305: ST_TO_ADDR
// if tmp and not sci then
47306: LD_VAR 0 4
47310: PUSH
47311: LD_VAR 0 8
47315: NOT
47316: AND
47317: IFFALSE 47386
// begin sort := SortBySkill ( tmp , 4 ) ;
47319: LD_ADDR_VAR 0 9
47323: PUSH
47324: LD_VAR 0 4
47328: PPUSH
47329: LD_INT 4
47331: PPUSH
47332: CALL 38459 0 2
47336: ST_TO_ADDR
// if sort then
47337: LD_VAR 0 9
47341: IFFALSE 47357
// p := sort [ 1 ] ;
47343: LD_ADDR_VAR 0 11
47347: PUSH
47348: LD_VAR 0 9
47352: PUSH
47353: LD_INT 1
47355: ARRAY
47356: ST_TO_ADDR
// if p then
47357: LD_VAR 0 11
47361: IFFALSE 47386
// result := Replace ( result , 4 , p ) ;
47363: LD_ADDR_VAR 0 2
47367: PUSH
47368: LD_VAR 0 2
47372: PPUSH
47373: LD_INT 4
47375: PPUSH
47376: LD_VAR 0 11
47380: PPUSH
47381: CALL_OW 1
47385: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
47386: LD_ADDR_VAR 0 4
47390: PUSH
47391: LD_VAR 0 4
47395: PUSH
47396: LD_VAR 0 7
47400: DIFF
47401: ST_TO_ADDR
// if tmp and mech < 6 then
47402: LD_VAR 0 4
47406: PUSH
47407: LD_VAR 0 7
47411: PUSH
47412: LD_INT 6
47414: LESS
47415: AND
47416: IFFALSE 47604
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
47418: LD_ADDR_VAR 0 9
47422: PUSH
47423: LD_VAR 0 4
47427: PUSH
47428: LD_VAR 0 8
47432: PUSH
47433: LD_VAR 0 7
47437: UNION
47438: DIFF
47439: PPUSH
47440: LD_INT 3
47442: PPUSH
47443: CALL 38459 0 2
47447: ST_TO_ADDR
// p := [ ] ;
47448: LD_ADDR_VAR 0 11
47452: PUSH
47453: EMPTY
47454: ST_TO_ADDR
// if sort then
47455: LD_VAR 0 9
47459: IFFALSE 47575
// for i = 1 to 6 - mech do
47461: LD_ADDR_VAR 0 3
47465: PUSH
47466: DOUBLE
47467: LD_INT 1
47469: DEC
47470: ST_TO_ADDR
47471: LD_INT 6
47473: PUSH
47474: LD_VAR 0 7
47478: MINUS
47479: PUSH
47480: FOR_TO
47481: IFFALSE 47573
// begin if i = sort then
47483: LD_VAR 0 3
47487: PUSH
47488: LD_VAR 0 9
47492: EQUAL
47493: IFFALSE 47497
// break ;
47495: GO 47573
// if GetClass ( i ) = 3 then
47497: LD_VAR 0 3
47501: PPUSH
47502: CALL_OW 257
47506: PUSH
47507: LD_INT 3
47509: EQUAL
47510: IFFALSE 47514
// continue ;
47512: GO 47480
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47514: LD_ADDR_VAR 0 11
47518: PUSH
47519: LD_VAR 0 11
47523: PPUSH
47524: LD_VAR 0 11
47528: PUSH
47529: LD_INT 1
47531: PLUS
47532: PPUSH
47533: LD_VAR 0 9
47537: PUSH
47538: LD_VAR 0 3
47542: ARRAY
47543: PPUSH
47544: CALL_OW 2
47548: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47549: LD_ADDR_VAR 0 4
47553: PUSH
47554: LD_VAR 0 4
47558: PUSH
47559: LD_VAR 0 9
47563: PUSH
47564: LD_VAR 0 3
47568: ARRAY
47569: DIFF
47570: ST_TO_ADDR
// end ;
47571: GO 47480
47573: POP
47574: POP
// if p then
47575: LD_VAR 0 11
47579: IFFALSE 47604
// result := Replace ( result , 3 , p ) ;
47581: LD_ADDR_VAR 0 2
47585: PUSH
47586: LD_VAR 0 2
47590: PPUSH
47591: LD_INT 3
47593: PPUSH
47594: LD_VAR 0 11
47598: PPUSH
47599: CALL_OW 1
47603: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
47604: LD_ADDR_VAR 0 4
47608: PUSH
47609: LD_VAR 0 4
47613: PUSH
47614: LD_VAR 0 6
47618: DIFF
47619: ST_TO_ADDR
// if tmp and eng < 6 then
47620: LD_VAR 0 4
47624: PUSH
47625: LD_VAR 0 6
47629: PUSH
47630: LD_INT 6
47632: LESS
47633: AND
47634: IFFALSE 47828
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
47636: LD_ADDR_VAR 0 9
47640: PUSH
47641: LD_VAR 0 4
47645: PUSH
47646: LD_VAR 0 8
47650: PUSH
47651: LD_VAR 0 7
47655: UNION
47656: PUSH
47657: LD_VAR 0 6
47661: UNION
47662: DIFF
47663: PPUSH
47664: LD_INT 2
47666: PPUSH
47667: CALL 38459 0 2
47671: ST_TO_ADDR
// p := [ ] ;
47672: LD_ADDR_VAR 0 11
47676: PUSH
47677: EMPTY
47678: ST_TO_ADDR
// if sort then
47679: LD_VAR 0 9
47683: IFFALSE 47799
// for i = 1 to 6 - eng do
47685: LD_ADDR_VAR 0 3
47689: PUSH
47690: DOUBLE
47691: LD_INT 1
47693: DEC
47694: ST_TO_ADDR
47695: LD_INT 6
47697: PUSH
47698: LD_VAR 0 6
47702: MINUS
47703: PUSH
47704: FOR_TO
47705: IFFALSE 47797
// begin if i = sort then
47707: LD_VAR 0 3
47711: PUSH
47712: LD_VAR 0 9
47716: EQUAL
47717: IFFALSE 47721
// break ;
47719: GO 47797
// if GetClass ( i ) = 2 then
47721: LD_VAR 0 3
47725: PPUSH
47726: CALL_OW 257
47730: PUSH
47731: LD_INT 2
47733: EQUAL
47734: IFFALSE 47738
// continue ;
47736: GO 47704
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47738: LD_ADDR_VAR 0 11
47742: PUSH
47743: LD_VAR 0 11
47747: PPUSH
47748: LD_VAR 0 11
47752: PUSH
47753: LD_INT 1
47755: PLUS
47756: PPUSH
47757: LD_VAR 0 9
47761: PUSH
47762: LD_VAR 0 3
47766: ARRAY
47767: PPUSH
47768: CALL_OW 2
47772: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47773: LD_ADDR_VAR 0 4
47777: PUSH
47778: LD_VAR 0 4
47782: PUSH
47783: LD_VAR 0 9
47787: PUSH
47788: LD_VAR 0 3
47792: ARRAY
47793: DIFF
47794: ST_TO_ADDR
// end ;
47795: GO 47704
47797: POP
47798: POP
// if p then
47799: LD_VAR 0 11
47803: IFFALSE 47828
// result := Replace ( result , 2 , p ) ;
47805: LD_ADDR_VAR 0 2
47809: PUSH
47810: LD_VAR 0 2
47814: PPUSH
47815: LD_INT 2
47817: PPUSH
47818: LD_VAR 0 11
47822: PPUSH
47823: CALL_OW 1
47827: ST_TO_ADDR
// end ; exit ;
47828: GO 48552
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
47830: LD_EXP 40
47834: PUSH
47835: LD_EXP 39
47839: PUSH
47840: LD_VAR 0 1
47844: ARRAY
47845: ARRAY
47846: NOT
47847: PUSH
47848: LD_EXP 13
47852: PUSH
47853: LD_VAR 0 1
47857: ARRAY
47858: PPUSH
47859: LD_INT 30
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PPUSH
47869: CALL_OW 72
47873: AND
47874: PUSH
47875: LD_EXP 18
47879: PUSH
47880: LD_VAR 0 1
47884: ARRAY
47885: NOT
47886: AND
47887: IFFALSE 48552
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
47889: LD_ADDR_EXP 55
47893: PUSH
47894: LD_EXP 55
47898: PPUSH
47899: LD_VAR 0 1
47903: PPUSH
47904: LD_INT 6
47906: PPUSH
47907: CALL_OW 1
47911: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
47912: LD_ADDR_VAR 0 2
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
// if sci >= 1 then
47935: LD_VAR 0 8
47939: PUSH
47940: LD_INT 1
47942: GREATEREQUAL
47943: IFFALSE 47965
// tmp := tmp diff sci [ 1 ] ;
47945: LD_ADDR_VAR 0 4
47949: PUSH
47950: LD_VAR 0 4
47954: PUSH
47955: LD_VAR 0 8
47959: PUSH
47960: LD_INT 1
47962: ARRAY
47963: DIFF
47964: ST_TO_ADDR
// if tmp and not sci then
47965: LD_VAR 0 4
47969: PUSH
47970: LD_VAR 0 8
47974: NOT
47975: AND
47976: IFFALSE 48045
// begin sort := SortBySkill ( tmp , 4 ) ;
47978: LD_ADDR_VAR 0 9
47982: PUSH
47983: LD_VAR 0 4
47987: PPUSH
47988: LD_INT 4
47990: PPUSH
47991: CALL 38459 0 2
47995: ST_TO_ADDR
// if sort then
47996: LD_VAR 0 9
48000: IFFALSE 48016
// p := sort [ 1 ] ;
48002: LD_ADDR_VAR 0 11
48006: PUSH
48007: LD_VAR 0 9
48011: PUSH
48012: LD_INT 1
48014: ARRAY
48015: ST_TO_ADDR
// if p then
48016: LD_VAR 0 11
48020: IFFALSE 48045
// result := Replace ( result , 4 , p ) ;
48022: LD_ADDR_VAR 0 2
48026: PUSH
48027: LD_VAR 0 2
48031: PPUSH
48032: LD_INT 4
48034: PPUSH
48035: LD_VAR 0 11
48039: PPUSH
48040: CALL_OW 1
48044: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
48045: LD_ADDR_VAR 0 4
48049: PUSH
48050: LD_VAR 0 4
48054: PUSH
48055: LD_VAR 0 7
48059: DIFF
48060: ST_TO_ADDR
// if tmp and mech < 6 then
48061: LD_VAR 0 4
48065: PUSH
48066: LD_VAR 0 7
48070: PUSH
48071: LD_INT 6
48073: LESS
48074: AND
48075: IFFALSE 48257
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
48077: LD_ADDR_VAR 0 9
48081: PUSH
48082: LD_VAR 0 4
48086: PUSH
48087: LD_VAR 0 7
48091: DIFF
48092: PPUSH
48093: LD_INT 3
48095: PPUSH
48096: CALL 38459 0 2
48100: ST_TO_ADDR
// p := [ ] ;
48101: LD_ADDR_VAR 0 11
48105: PUSH
48106: EMPTY
48107: ST_TO_ADDR
// if sort then
48108: LD_VAR 0 9
48112: IFFALSE 48228
// for i = 1 to 6 - mech do
48114: LD_ADDR_VAR 0 3
48118: PUSH
48119: DOUBLE
48120: LD_INT 1
48122: DEC
48123: ST_TO_ADDR
48124: LD_INT 6
48126: PUSH
48127: LD_VAR 0 7
48131: MINUS
48132: PUSH
48133: FOR_TO
48134: IFFALSE 48226
// begin if i = sort then
48136: LD_VAR 0 3
48140: PUSH
48141: LD_VAR 0 9
48145: EQUAL
48146: IFFALSE 48150
// break ;
48148: GO 48226
// if GetClass ( i ) = 3 then
48150: LD_VAR 0 3
48154: PPUSH
48155: CALL_OW 257
48159: PUSH
48160: LD_INT 3
48162: EQUAL
48163: IFFALSE 48167
// continue ;
48165: GO 48133
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48167: LD_ADDR_VAR 0 11
48171: PUSH
48172: LD_VAR 0 11
48176: PPUSH
48177: LD_VAR 0 11
48181: PUSH
48182: LD_INT 1
48184: PLUS
48185: PPUSH
48186: LD_VAR 0 9
48190: PUSH
48191: LD_VAR 0 3
48195: ARRAY
48196: PPUSH
48197: CALL_OW 2
48201: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48202: LD_ADDR_VAR 0 4
48206: PUSH
48207: LD_VAR 0 4
48211: PUSH
48212: LD_VAR 0 9
48216: PUSH
48217: LD_VAR 0 3
48221: ARRAY
48222: DIFF
48223: ST_TO_ADDR
// end ;
48224: GO 48133
48226: POP
48227: POP
// if p then
48228: LD_VAR 0 11
48232: IFFALSE 48257
// result := Replace ( result , 3 , p ) ;
48234: LD_ADDR_VAR 0 2
48238: PUSH
48239: LD_VAR 0 2
48243: PPUSH
48244: LD_INT 3
48246: PPUSH
48247: LD_VAR 0 11
48251: PPUSH
48252: CALL_OW 1
48256: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
48257: LD_ADDR_VAR 0 4
48261: PUSH
48262: LD_VAR 0 4
48266: PUSH
48267: LD_VAR 0 6
48271: DIFF
48272: ST_TO_ADDR
// if tmp and eng < 4 then
48273: LD_VAR 0 4
48277: PUSH
48278: LD_VAR 0 6
48282: PUSH
48283: LD_INT 4
48285: LESS
48286: AND
48287: IFFALSE 48477
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
48289: LD_ADDR_VAR 0 9
48293: PUSH
48294: LD_VAR 0 4
48298: PUSH
48299: LD_VAR 0 7
48303: PUSH
48304: LD_VAR 0 6
48308: UNION
48309: DIFF
48310: PPUSH
48311: LD_INT 2
48313: PPUSH
48314: CALL 38459 0 2
48318: ST_TO_ADDR
// p := [ ] ;
48319: LD_ADDR_VAR 0 11
48323: PUSH
48324: EMPTY
48325: ST_TO_ADDR
// if sort then
48326: LD_VAR 0 9
48330: IFFALSE 48446
// for i = 1 to 4 - eng do
48332: LD_ADDR_VAR 0 3
48336: PUSH
48337: DOUBLE
48338: LD_INT 1
48340: DEC
48341: ST_TO_ADDR
48342: LD_INT 4
48344: PUSH
48345: LD_VAR 0 6
48349: MINUS
48350: PUSH
48351: FOR_TO
48352: IFFALSE 48444
// begin if i = sort then
48354: LD_VAR 0 3
48358: PUSH
48359: LD_VAR 0 9
48363: EQUAL
48364: IFFALSE 48368
// break ;
48366: GO 48444
// if GetClass ( i ) = 2 then
48368: LD_VAR 0 3
48372: PPUSH
48373: CALL_OW 257
48377: PUSH
48378: LD_INT 2
48380: EQUAL
48381: IFFALSE 48385
// continue ;
48383: GO 48351
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48385: LD_ADDR_VAR 0 11
48389: PUSH
48390: LD_VAR 0 11
48394: PPUSH
48395: LD_VAR 0 11
48399: PUSH
48400: LD_INT 1
48402: PLUS
48403: PPUSH
48404: LD_VAR 0 9
48408: PUSH
48409: LD_VAR 0 3
48413: ARRAY
48414: PPUSH
48415: CALL_OW 2
48419: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48420: LD_ADDR_VAR 0 4
48424: PUSH
48425: LD_VAR 0 4
48429: PUSH
48430: LD_VAR 0 9
48434: PUSH
48435: LD_VAR 0 3
48439: ARRAY
48440: DIFF
48441: ST_TO_ADDR
// end ;
48442: GO 48351
48444: POP
48445: POP
// if p then
48446: LD_VAR 0 11
48450: IFFALSE 48475
// result := Replace ( result , 2 , p ) ;
48452: LD_ADDR_VAR 0 2
48456: PUSH
48457: LD_VAR 0 2
48461: PPUSH
48462: LD_INT 2
48464: PPUSH
48465: LD_VAR 0 11
48469: PPUSH
48470: CALL_OW 1
48474: ST_TO_ADDR
// end else
48475: GO 48521
// for i = eng downto 5 do
48477: LD_ADDR_VAR 0 3
48481: PUSH
48482: DOUBLE
48483: LD_VAR 0 6
48487: INC
48488: ST_TO_ADDR
48489: LD_INT 5
48491: PUSH
48492: FOR_DOWNTO
48493: IFFALSE 48519
// tmp := tmp union eng [ i ] ;
48495: LD_ADDR_VAR 0 4
48499: PUSH
48500: LD_VAR 0 4
48504: PUSH
48505: LD_VAR 0 6
48509: PUSH
48510: LD_VAR 0 3
48514: ARRAY
48515: UNION
48516: ST_TO_ADDR
48517: GO 48492
48519: POP
48520: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
48521: LD_ADDR_VAR 0 2
48525: PUSH
48526: LD_VAR 0 2
48530: PPUSH
48531: LD_INT 1
48533: PPUSH
48534: LD_VAR 0 4
48538: PUSH
48539: LD_VAR 0 5
48543: DIFF
48544: PPUSH
48545: CALL_OW 1
48549: ST_TO_ADDR
// exit ;
48550: GO 48552
// end ; end ;
48552: LD_VAR 0 2
48556: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
48557: LD_INT 0
48559: PPUSH
48560: PPUSH
48561: PPUSH
// if not mc_bases then
48562: LD_EXP 13
48566: NOT
48567: IFFALSE 48571
// exit ;
48569: GO 48677
// for i = 1 to mc_bases do
48571: LD_ADDR_VAR 0 2
48575: PUSH
48576: DOUBLE
48577: LD_INT 1
48579: DEC
48580: ST_TO_ADDR
48581: LD_EXP 13
48585: PUSH
48586: FOR_TO
48587: IFFALSE 48668
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
48589: LD_ADDR_VAR 0 3
48593: PUSH
48594: LD_EXP 13
48598: PUSH
48599: LD_VAR 0 2
48603: ARRAY
48604: PPUSH
48605: LD_INT 21
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 3
48617: PUSH
48618: LD_INT 24
48620: PUSH
48621: LD_INT 1000
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PPUSH
48636: CALL_OW 72
48640: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
48641: LD_ADDR_EXP 14
48645: PUSH
48646: LD_EXP 14
48650: PPUSH
48651: LD_VAR 0 2
48655: PPUSH
48656: LD_VAR 0 3
48660: PPUSH
48661: CALL_OW 1
48665: ST_TO_ADDR
// end ;
48666: GO 48586
48668: POP
48669: POP
// RaiseSailEvent ( 101 ) ;
48670: LD_INT 101
48672: PPUSH
48673: CALL_OW 427
// end ;
48677: LD_VAR 0 1
48681: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
48682: LD_INT 0
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
48690: PPUSH
// if not mc_bases then
48691: LD_EXP 13
48695: NOT
48696: IFFALSE 48700
// exit ;
48698: GO 49262
// for i = 1 to mc_bases do
48700: LD_ADDR_VAR 0 2
48704: PUSH
48705: DOUBLE
48706: LD_INT 1
48708: DEC
48709: ST_TO_ADDR
48710: LD_EXP 13
48714: PUSH
48715: FOR_TO
48716: IFFALSE 49253
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
48718: LD_ADDR_VAR 0 5
48722: PUSH
48723: LD_EXP 13
48727: PUSH
48728: LD_VAR 0 2
48732: ARRAY
48733: PUSH
48734: LD_EXP 42
48738: PUSH
48739: LD_VAR 0 2
48743: ARRAY
48744: UNION
48745: PPUSH
48746: LD_INT 21
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: LD_INT 54
48764: PUSH
48765: EMPTY
48766: LIST
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: LD_INT 24
48777: PUSH
48778: LD_INT 800
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PPUSH
48798: CALL_OW 72
48802: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
48803: LD_ADDR_VAR 0 6
48807: PUSH
48808: LD_EXP 13
48812: PUSH
48813: LD_VAR 0 2
48817: ARRAY
48818: PPUSH
48819: LD_INT 21
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 3
48834: PUSH
48835: LD_INT 54
48837: PUSH
48838: EMPTY
48839: LIST
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: PUSH
48848: LD_INT 24
48850: PUSH
48851: LD_INT 250
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PPUSH
48871: CALL_OW 72
48875: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
48876: LD_ADDR_VAR 0 7
48880: PUSH
48881: LD_VAR 0 5
48885: PUSH
48886: LD_VAR 0 6
48890: DIFF
48891: ST_TO_ADDR
// if not need_heal_1 then
48892: LD_VAR 0 6
48896: NOT
48897: IFFALSE 48930
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
48899: LD_ADDR_EXP 16
48903: PUSH
48904: LD_EXP 16
48908: PPUSH
48909: LD_VAR 0 2
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PPUSH
48921: EMPTY
48922: PPUSH
48923: CALL 8910 0 3
48927: ST_TO_ADDR
48928: GO 49000
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
48930: LD_ADDR_EXP 16
48934: PUSH
48935: LD_EXP 16
48939: PPUSH
48940: LD_VAR 0 2
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PPUSH
48952: LD_EXP 16
48956: PUSH
48957: LD_VAR 0 2
48961: ARRAY
48962: PUSH
48963: LD_INT 1
48965: ARRAY
48966: PPUSH
48967: LD_INT 3
48969: PUSH
48970: LD_INT 24
48972: PUSH
48973: LD_INT 1000
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PPUSH
48984: CALL_OW 72
48988: PUSH
48989: LD_VAR 0 6
48993: UNION
48994: PPUSH
48995: CALL 8910 0 3
48999: ST_TO_ADDR
// if not need_heal_2 then
49000: LD_VAR 0 7
49004: NOT
49005: IFFALSE 49038
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
49007: LD_ADDR_EXP 16
49011: PUSH
49012: LD_EXP 16
49016: PPUSH
49017: LD_VAR 0 2
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PPUSH
49029: EMPTY
49030: PPUSH
49031: CALL 8910 0 3
49035: ST_TO_ADDR
49036: GO 49070
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
49038: LD_ADDR_EXP 16
49042: PUSH
49043: LD_EXP 16
49047: PPUSH
49048: LD_VAR 0 2
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PPUSH
49060: LD_VAR 0 7
49064: PPUSH
49065: CALL 8910 0 3
49069: ST_TO_ADDR
// if need_heal_2 then
49070: LD_VAR 0 7
49074: IFFALSE 49235
// for j in need_heal_2 do
49076: LD_ADDR_VAR 0 3
49080: PUSH
49081: LD_VAR 0 7
49085: PUSH
49086: FOR_IN
49087: IFFALSE 49233
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49089: LD_ADDR_VAR 0 5
49093: PUSH
49094: LD_EXP 13
49098: PUSH
49099: LD_VAR 0 2
49103: ARRAY
49104: PPUSH
49105: LD_INT 2
49107: PUSH
49108: LD_INT 30
49110: PUSH
49111: LD_INT 6
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 30
49120: PUSH
49121: LD_INT 7
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 30
49130: PUSH
49131: LD_INT 8
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 30
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 30
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: PPUSH
49166: CALL_OW 72
49170: ST_TO_ADDR
// if tmp then
49171: LD_VAR 0 5
49175: IFFALSE 49231
// begin k := NearestUnitToUnit ( tmp , j ) ;
49177: LD_ADDR_VAR 0 4
49181: PUSH
49182: LD_VAR 0 5
49186: PPUSH
49187: LD_VAR 0 3
49191: PPUSH
49192: CALL_OW 74
49196: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
49197: LD_VAR 0 3
49201: PPUSH
49202: LD_VAR 0 4
49206: PPUSH
49207: CALL_OW 296
49211: PUSH
49212: LD_INT 5
49214: GREATER
49215: IFFALSE 49231
// ComMoveUnit ( j , k ) ;
49217: LD_VAR 0 3
49221: PPUSH
49222: LD_VAR 0 4
49226: PPUSH
49227: CALL_OW 112
// end ; end ;
49231: GO 49086
49233: POP
49234: POP
// if not need_heal_1 and not need_heal_2 then
49235: LD_VAR 0 6
49239: NOT
49240: PUSH
49241: LD_VAR 0 7
49245: NOT
49246: AND
49247: IFFALSE 49251
// continue ;
49249: GO 48715
// end ;
49251: GO 48715
49253: POP
49254: POP
// RaiseSailEvent ( 102 ) ;
49255: LD_INT 102
49257: PPUSH
49258: CALL_OW 427
// end ;
49262: LD_VAR 0 1
49266: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
49267: LD_INT 0
49269: PPUSH
49270: PPUSH
49271: PPUSH
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
49276: PPUSH
// if not mc_bases then
49277: LD_EXP 13
49281: NOT
49282: IFFALSE 49286
// exit ;
49284: GO 50121
// for i = 1 to mc_bases do
49286: LD_ADDR_VAR 0 2
49290: PUSH
49291: DOUBLE
49292: LD_INT 1
49294: DEC
49295: ST_TO_ADDR
49296: LD_EXP 13
49300: PUSH
49301: FOR_TO
49302: IFFALSE 50119
// begin if not mc_building_need_repair [ i ] then
49304: LD_EXP 14
49308: PUSH
49309: LD_VAR 0 2
49313: ARRAY
49314: NOT
49315: IFFALSE 49489
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
49317: LD_ADDR_VAR 0 6
49321: PUSH
49322: LD_EXP 32
49326: PUSH
49327: LD_VAR 0 2
49331: ARRAY
49332: PPUSH
49333: LD_INT 3
49335: PUSH
49336: LD_INT 24
49338: PUSH
49339: LD_INT 1000
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 34
49355: PUSH
49356: LD_INT 13
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 34
49365: PUSH
49366: LD_INT 52
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: LIST
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PPUSH
49382: CALL_OW 72
49386: ST_TO_ADDR
// if cranes then
49387: LD_VAR 0 6
49391: IFFALSE 49453
// for j in cranes do
49393: LD_ADDR_VAR 0 3
49397: PUSH
49398: LD_VAR 0 6
49402: PUSH
49403: FOR_IN
49404: IFFALSE 49451
// if not IsInArea ( j , mc_parking [ i ] ) then
49406: LD_VAR 0 3
49410: PPUSH
49411: LD_EXP 37
49415: PUSH
49416: LD_VAR 0 2
49420: ARRAY
49421: PPUSH
49422: CALL_OW 308
49426: NOT
49427: IFFALSE 49449
// ComMoveToArea ( j , mc_parking [ i ] ) ;
49429: LD_VAR 0 3
49433: PPUSH
49434: LD_EXP 37
49438: PUSH
49439: LD_VAR 0 2
49443: ARRAY
49444: PPUSH
49445: CALL_OW 113
49449: GO 49403
49451: POP
49452: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49453: LD_ADDR_EXP 15
49457: PUSH
49458: LD_EXP 15
49462: PPUSH
49463: LD_VAR 0 2
49467: PPUSH
49468: EMPTY
49469: PPUSH
49470: CALL_OW 1
49474: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
49475: LD_VAR 0 2
49479: PPUSH
49480: LD_INT 101
49482: PPUSH
49483: CALL 44390 0 2
// continue ;
49487: GO 49301
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
49489: LD_ADDR_EXP 19
49493: PUSH
49494: LD_EXP 19
49498: PPUSH
49499: LD_VAR 0 2
49503: PPUSH
49504: EMPTY
49505: PPUSH
49506: CALL_OW 1
49510: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49511: LD_VAR 0 2
49515: PPUSH
49516: LD_INT 103
49518: PPUSH
49519: CALL 44390 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
49523: LD_ADDR_VAR 0 5
49527: PUSH
49528: LD_EXP 13
49532: PUSH
49533: LD_VAR 0 2
49537: ARRAY
49538: PUSH
49539: LD_EXP 42
49543: PUSH
49544: LD_VAR 0 2
49548: ARRAY
49549: UNION
49550: PPUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 25
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 25
49566: PUSH
49567: LD_INT 16
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: PPUSH
49582: CALL_OW 72
49586: PUSH
49587: LD_EXP 16
49591: PUSH
49592: LD_VAR 0 2
49596: ARRAY
49597: PUSH
49598: LD_INT 1
49600: ARRAY
49601: PUSH
49602: LD_EXP 16
49606: PUSH
49607: LD_VAR 0 2
49611: ARRAY
49612: PUSH
49613: LD_INT 2
49615: ARRAY
49616: UNION
49617: DIFF
49618: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
49619: LD_ADDR_VAR 0 6
49623: PUSH
49624: LD_EXP 32
49628: PUSH
49629: LD_VAR 0 2
49633: ARRAY
49634: PPUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 34
49640: PUSH
49641: LD_INT 13
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 34
49650: PUSH
49651: LD_INT 52
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: PPUSH
49663: CALL_OW 72
49667: ST_TO_ADDR
// if cranes then
49668: LD_VAR 0 6
49672: IFFALSE 49808
// begin for j in cranes do
49674: LD_ADDR_VAR 0 3
49678: PUSH
49679: LD_VAR 0 6
49683: PUSH
49684: FOR_IN
49685: IFFALSE 49806
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
49687: LD_VAR 0 3
49691: PPUSH
49692: CALL_OW 256
49696: PUSH
49697: LD_INT 500
49699: GREATEREQUAL
49700: PUSH
49701: LD_VAR 0 3
49705: PPUSH
49706: CALL_OW 314
49710: NOT
49711: AND
49712: IFFALSE 49746
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
49714: LD_VAR 0 3
49718: PPUSH
49719: LD_EXP 14
49723: PUSH
49724: LD_VAR 0 2
49728: ARRAY
49729: PPUSH
49730: LD_VAR 0 3
49734: PPUSH
49735: CALL_OW 74
49739: PPUSH
49740: CALL_OW 130
49744: GO 49804
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
49746: LD_VAR 0 3
49750: PPUSH
49751: CALL_OW 256
49755: PUSH
49756: LD_INT 500
49758: LESS
49759: PUSH
49760: LD_VAR 0 3
49764: PPUSH
49765: LD_EXP 37
49769: PUSH
49770: LD_VAR 0 2
49774: ARRAY
49775: PPUSH
49776: CALL_OW 308
49780: NOT
49781: AND
49782: IFFALSE 49804
// ComMoveToArea ( j , mc_parking [ i ] ) ;
49784: LD_VAR 0 3
49788: PPUSH
49789: LD_EXP 37
49793: PUSH
49794: LD_VAR 0 2
49798: ARRAY
49799: PPUSH
49800: CALL_OW 113
49804: GO 49684
49806: POP
49807: POP
// end ; if tmp > 3 then
49808: LD_VAR 0 5
49812: PUSH
49813: LD_INT 3
49815: GREATER
49816: IFFALSE 49836
// tmp := ShrinkArray ( tmp , 4 ) ;
49818: LD_ADDR_VAR 0 5
49822: PUSH
49823: LD_VAR 0 5
49827: PPUSH
49828: LD_INT 4
49830: PPUSH
49831: CALL 40136 0 2
49835: ST_TO_ADDR
// if not tmp then
49836: LD_VAR 0 5
49840: NOT
49841: IFFALSE 49845
// continue ;
49843: GO 49301
// for j in tmp do
49845: LD_ADDR_VAR 0 3
49849: PUSH
49850: LD_VAR 0 5
49854: PUSH
49855: FOR_IN
49856: IFFALSE 50115
// begin if IsInUnit ( j ) then
49858: LD_VAR 0 3
49862: PPUSH
49863: CALL_OW 310
49867: IFFALSE 49878
// ComExitBuilding ( j ) ;
49869: LD_VAR 0 3
49873: PPUSH
49874: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
49878: LD_VAR 0 3
49882: PUSH
49883: LD_EXP 15
49887: PUSH
49888: LD_VAR 0 2
49892: ARRAY
49893: IN
49894: NOT
49895: IFFALSE 49953
// begin SetTag ( j , 101 ) ;
49897: LD_VAR 0 3
49901: PPUSH
49902: LD_INT 101
49904: PPUSH
49905: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
49909: LD_ADDR_EXP 15
49913: PUSH
49914: LD_EXP 15
49918: PPUSH
49919: LD_VAR 0 2
49923: PUSH
49924: LD_EXP 15
49928: PUSH
49929: LD_VAR 0 2
49933: ARRAY
49934: PUSH
49935: LD_INT 1
49937: PLUS
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PPUSH
49943: LD_VAR 0 3
49947: PPUSH
49948: CALL 8910 0 3
49952: ST_TO_ADDR
// end ; wait ( 1 ) ;
49953: LD_INT 1
49955: PPUSH
49956: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
49960: LD_ADDR_VAR 0 7
49964: PUSH
49965: LD_EXP 14
49969: PUSH
49970: LD_VAR 0 2
49974: ARRAY
49975: ST_TO_ADDR
// if mc_scan [ i ] then
49976: LD_EXP 36
49980: PUSH
49981: LD_VAR 0 2
49985: ARRAY
49986: IFFALSE 50048
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
49988: LD_ADDR_VAR 0 7
49992: PUSH
49993: LD_EXP 14
49997: PUSH
49998: LD_VAR 0 2
50002: ARRAY
50003: PPUSH
50004: LD_INT 3
50006: PUSH
50007: LD_INT 30
50009: PUSH
50010: LD_INT 32
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 30
50019: PUSH
50020: LD_INT 33
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 30
50029: PUSH
50030: LD_INT 31
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: PPUSH
50043: CALL_OW 72
50047: ST_TO_ADDR
// if not to_repair_tmp then
50048: LD_VAR 0 7
50052: NOT
50053: IFFALSE 50057
// continue ;
50055: GO 49855
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
50057: LD_ADDR_VAR 0 8
50061: PUSH
50062: LD_VAR 0 7
50066: PPUSH
50067: LD_VAR 0 3
50071: PPUSH
50072: CALL_OW 74
50076: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
50077: LD_VAR 0 8
50081: PPUSH
50082: LD_INT 16
50084: PPUSH
50085: CALL 11503 0 2
50089: PUSH
50090: LD_INT 4
50092: ARRAY
50093: PUSH
50094: LD_INT 5
50096: LESS
50097: IFFALSE 50113
// ComRepairBuilding ( j , to_repair ) ;
50099: LD_VAR 0 3
50103: PPUSH
50104: LD_VAR 0 8
50108: PPUSH
50109: CALL_OW 130
// end ;
50113: GO 49855
50115: POP
50116: POP
// end ;
50117: GO 49301
50119: POP
50120: POP
// end ;
50121: LD_VAR 0 1
50125: RET
// export function MC_Heal ; var i , j , tmp ; begin
50126: LD_INT 0
50128: PPUSH
50129: PPUSH
50130: PPUSH
50131: PPUSH
// if not mc_bases then
50132: LD_EXP 13
50136: NOT
50137: IFFALSE 50141
// exit ;
50139: GO 50543
// for i = 1 to mc_bases do
50141: LD_ADDR_VAR 0 2
50145: PUSH
50146: DOUBLE
50147: LD_INT 1
50149: DEC
50150: ST_TO_ADDR
50151: LD_EXP 13
50155: PUSH
50156: FOR_TO
50157: IFFALSE 50541
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
50159: LD_EXP 16
50163: PUSH
50164: LD_VAR 0 2
50168: ARRAY
50169: PUSH
50170: LD_INT 1
50172: ARRAY
50173: NOT
50174: PUSH
50175: LD_EXP 16
50179: PUSH
50180: LD_VAR 0 2
50184: ARRAY
50185: PUSH
50186: LD_INT 2
50188: ARRAY
50189: NOT
50190: AND
50191: IFFALSE 50229
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
50193: LD_ADDR_EXP 17
50197: PUSH
50198: LD_EXP 17
50202: PPUSH
50203: LD_VAR 0 2
50207: PPUSH
50208: EMPTY
50209: PPUSH
50210: CALL_OW 1
50214: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
50215: LD_VAR 0 2
50219: PPUSH
50220: LD_INT 102
50222: PPUSH
50223: CALL 44390 0 2
// continue ;
50227: GO 50156
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
50229: LD_ADDR_VAR 0 4
50233: PUSH
50234: LD_EXP 13
50238: PUSH
50239: LD_VAR 0 2
50243: ARRAY
50244: PPUSH
50245: LD_INT 25
50247: PUSH
50248: LD_INT 4
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PPUSH
50255: CALL_OW 72
50259: ST_TO_ADDR
// if not tmp then
50260: LD_VAR 0 4
50264: NOT
50265: IFFALSE 50269
// continue ;
50267: GO 50156
// if mc_taming [ i ] then
50269: LD_EXP 44
50273: PUSH
50274: LD_VAR 0 2
50278: ARRAY
50279: IFFALSE 50303
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50281: LD_ADDR_EXP 44
50285: PUSH
50286: LD_EXP 44
50290: PPUSH
50291: LD_VAR 0 2
50295: PPUSH
50296: EMPTY
50297: PPUSH
50298: CALL_OW 1
50302: ST_TO_ADDR
// for j in tmp do
50303: LD_ADDR_VAR 0 3
50307: PUSH
50308: LD_VAR 0 4
50312: PUSH
50313: FOR_IN
50314: IFFALSE 50537
// begin if IsInUnit ( j ) then
50316: LD_VAR 0 3
50320: PPUSH
50321: CALL_OW 310
50325: IFFALSE 50336
// ComExitBuilding ( j ) ;
50327: LD_VAR 0 3
50331: PPUSH
50332: CALL_OW 122
// if not j in mc_healers [ i ] then
50336: LD_VAR 0 3
50340: PUSH
50341: LD_EXP 17
50345: PUSH
50346: LD_VAR 0 2
50350: ARRAY
50351: IN
50352: NOT
50353: IFFALSE 50399
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
50355: LD_ADDR_EXP 17
50359: PUSH
50360: LD_EXP 17
50364: PPUSH
50365: LD_VAR 0 2
50369: PUSH
50370: LD_EXP 17
50374: PUSH
50375: LD_VAR 0 2
50379: ARRAY
50380: PUSH
50381: LD_INT 1
50383: PLUS
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PPUSH
50389: LD_VAR 0 3
50393: PPUSH
50394: CALL 8910 0 3
50398: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
50399: LD_VAR 0 3
50403: PPUSH
50404: CALL_OW 110
50408: PUSH
50409: LD_INT 102
50411: NONEQUAL
50412: IFFALSE 50426
// SetTag ( j , 102 ) ;
50414: LD_VAR 0 3
50418: PPUSH
50419: LD_INT 102
50421: PPUSH
50422: CALL_OW 109
// Wait ( 3 ) ;
50426: LD_INT 3
50428: PPUSH
50429: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
50433: LD_EXP 16
50437: PUSH
50438: LD_VAR 0 2
50442: ARRAY
50443: PUSH
50444: LD_INT 1
50446: ARRAY
50447: IFFALSE 50479
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
50449: LD_VAR 0 3
50453: PPUSH
50454: LD_EXP 16
50458: PUSH
50459: LD_VAR 0 2
50463: ARRAY
50464: PUSH
50465: LD_INT 1
50467: ARRAY
50468: PUSH
50469: LD_INT 1
50471: ARRAY
50472: PPUSH
50473: CALL_OW 128
50477: GO 50535
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
50479: LD_VAR 0 3
50483: PPUSH
50484: CALL_OW 314
50488: NOT
50489: PUSH
50490: LD_EXP 16
50494: PUSH
50495: LD_VAR 0 2
50499: ARRAY
50500: PUSH
50501: LD_INT 2
50503: ARRAY
50504: AND
50505: IFFALSE 50535
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
50507: LD_VAR 0 3
50511: PPUSH
50512: LD_EXP 16
50516: PUSH
50517: LD_VAR 0 2
50521: ARRAY
50522: PUSH
50523: LD_INT 2
50525: ARRAY
50526: PUSH
50527: LD_INT 1
50529: ARRAY
50530: PPUSH
50531: CALL_OW 128
// end ;
50535: GO 50313
50537: POP
50538: POP
// end ;
50539: GO 50156
50541: POP
50542: POP
// end ;
50543: LD_VAR 0 1
50547: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
50548: LD_INT 0
50550: PPUSH
50551: PPUSH
50552: PPUSH
50553: PPUSH
50554: PPUSH
// if not mc_bases then
50555: LD_EXP 13
50559: NOT
50560: IFFALSE 50564
// exit ;
50562: GO 51707
// for i = 1 to mc_bases do
50564: LD_ADDR_VAR 0 2
50568: PUSH
50569: DOUBLE
50570: LD_INT 1
50572: DEC
50573: ST_TO_ADDR
50574: LD_EXP 13
50578: PUSH
50579: FOR_TO
50580: IFFALSE 51705
// begin if mc_scan [ i ] then
50582: LD_EXP 36
50586: PUSH
50587: LD_VAR 0 2
50591: ARRAY
50592: IFFALSE 50596
// continue ;
50594: GO 50579
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
50596: LD_EXP 18
50600: PUSH
50601: LD_VAR 0 2
50605: ARRAY
50606: NOT
50607: PUSH
50608: LD_EXP 20
50612: PUSH
50613: LD_VAR 0 2
50617: ARRAY
50618: NOT
50619: AND
50620: PUSH
50621: LD_EXP 19
50625: PUSH
50626: LD_VAR 0 2
50630: ARRAY
50631: AND
50632: IFFALSE 50670
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
50634: LD_ADDR_EXP 19
50638: PUSH
50639: LD_EXP 19
50643: PPUSH
50644: LD_VAR 0 2
50648: PPUSH
50649: EMPTY
50650: PPUSH
50651: CALL_OW 1
50655: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
50656: LD_VAR 0 2
50660: PPUSH
50661: LD_INT 103
50663: PPUSH
50664: CALL 44390 0 2
// continue ;
50668: GO 50579
// end ; if mc_construct_list [ i ] then
50670: LD_EXP 20
50674: PUSH
50675: LD_VAR 0 2
50679: ARRAY
50680: IFFALSE 50900
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
50682: LD_ADDR_VAR 0 4
50686: PUSH
50687: LD_EXP 13
50691: PUSH
50692: LD_VAR 0 2
50696: ARRAY
50697: PPUSH
50698: LD_INT 25
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PPUSH
50708: CALL_OW 72
50712: PUSH
50713: LD_EXP 15
50717: PUSH
50718: LD_VAR 0 2
50722: ARRAY
50723: DIFF
50724: ST_TO_ADDR
// if not tmp then
50725: LD_VAR 0 4
50729: NOT
50730: IFFALSE 50734
// continue ;
50732: GO 50579
// for j in tmp do
50734: LD_ADDR_VAR 0 3
50738: PUSH
50739: LD_VAR 0 4
50743: PUSH
50744: FOR_IN
50745: IFFALSE 50896
// begin if not mc_builders [ i ] then
50747: LD_EXP 19
50751: PUSH
50752: LD_VAR 0 2
50756: ARRAY
50757: NOT
50758: IFFALSE 50816
// begin SetTag ( j , 103 ) ;
50760: LD_VAR 0 3
50764: PPUSH
50765: LD_INT 103
50767: PPUSH
50768: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
50772: LD_ADDR_EXP 19
50776: PUSH
50777: LD_EXP 19
50781: PPUSH
50782: LD_VAR 0 2
50786: PUSH
50787: LD_EXP 19
50791: PUSH
50792: LD_VAR 0 2
50796: ARRAY
50797: PUSH
50798: LD_INT 1
50800: PLUS
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PPUSH
50806: LD_VAR 0 3
50810: PPUSH
50811: CALL 8910 0 3
50815: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
50816: LD_VAR 0 3
50820: PPUSH
50821: CALL_OW 310
50825: IFFALSE 50836
// ComExitBuilding ( j ) ;
50827: LD_VAR 0 3
50831: PPUSH
50832: CALL_OW 122
// wait ( 3 ) ;
50836: LD_INT 3
50838: PPUSH
50839: CALL_OW 67
// if not mc_construct_list [ i ] then
50843: LD_EXP 20
50847: PUSH
50848: LD_VAR 0 2
50852: ARRAY
50853: NOT
50854: IFFALSE 50858
// break ;
50856: GO 50896
// if not HasTask ( j ) then
50858: LD_VAR 0 3
50862: PPUSH
50863: CALL_OW 314
50867: NOT
50868: IFFALSE 50894
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
50870: LD_VAR 0 3
50874: PPUSH
50875: LD_EXP 20
50879: PUSH
50880: LD_VAR 0 2
50884: ARRAY
50885: PUSH
50886: LD_INT 1
50888: ARRAY
50889: PPUSH
50890: CALL 11761 0 2
// end ;
50894: GO 50744
50896: POP
50897: POP
// end else
50898: GO 51703
// if mc_build_list [ i ] then
50900: LD_EXP 18
50904: PUSH
50905: LD_VAR 0 2
50909: ARRAY
50910: IFFALSE 51703
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50912: LD_ADDR_VAR 0 5
50916: PUSH
50917: LD_EXP 13
50921: PUSH
50922: LD_VAR 0 2
50926: ARRAY
50927: PPUSH
50928: LD_INT 2
50930: PUSH
50931: LD_INT 30
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 30
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: LIST
50955: PPUSH
50956: CALL_OW 72
50960: ST_TO_ADDR
// if depot then
50961: LD_VAR 0 5
50965: IFFALSE 50983
// depot := depot [ 1 ] else
50967: LD_ADDR_VAR 0 5
50971: PUSH
50972: LD_VAR 0 5
50976: PUSH
50977: LD_INT 1
50979: ARRAY
50980: ST_TO_ADDR
50981: GO 50991
// depot := 0 ;
50983: LD_ADDR_VAR 0 5
50987: PUSH
50988: LD_INT 0
50990: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
50991: LD_EXP 18
50995: PUSH
50996: LD_VAR 0 2
51000: ARRAY
51001: PUSH
51002: LD_INT 1
51004: ARRAY
51005: PUSH
51006: LD_INT 1
51008: ARRAY
51009: PPUSH
51010: CALL 11591 0 1
51014: PUSH
51015: LD_EXP 13
51019: PUSH
51020: LD_VAR 0 2
51024: ARRAY
51025: PPUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 30
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 30
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: PPUSH
51054: CALL_OW 72
51058: NOT
51059: AND
51060: IFFALSE 51165
// begin for j = 1 to mc_build_list [ i ] do
51062: LD_ADDR_VAR 0 3
51066: PUSH
51067: DOUBLE
51068: LD_INT 1
51070: DEC
51071: ST_TO_ADDR
51072: LD_EXP 18
51076: PUSH
51077: LD_VAR 0 2
51081: ARRAY
51082: PUSH
51083: FOR_TO
51084: IFFALSE 51163
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
51086: LD_EXP 18
51090: PUSH
51091: LD_VAR 0 2
51095: ARRAY
51096: PUSH
51097: LD_VAR 0 3
51101: ARRAY
51102: PUSH
51103: LD_INT 1
51105: ARRAY
51106: PUSH
51107: LD_INT 2
51109: EQUAL
51110: IFFALSE 51161
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
51112: LD_ADDR_EXP 18
51116: PUSH
51117: LD_EXP 18
51121: PPUSH
51122: LD_VAR 0 2
51126: PPUSH
51127: LD_EXP 18
51131: PUSH
51132: LD_VAR 0 2
51136: ARRAY
51137: PPUSH
51138: LD_VAR 0 3
51142: PPUSH
51143: LD_INT 1
51145: PPUSH
51146: LD_INT 0
51148: PPUSH
51149: CALL 8328 0 4
51153: PPUSH
51154: CALL_OW 1
51158: ST_TO_ADDR
// break ;
51159: GO 51163
// end ;
51161: GO 51083
51163: POP
51164: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
51165: LD_EXP 18
51169: PUSH
51170: LD_VAR 0 2
51174: ARRAY
51175: PUSH
51176: LD_INT 1
51178: ARRAY
51179: PUSH
51180: LD_INT 1
51182: ARRAY
51183: PUSH
51184: LD_INT 0
51186: EQUAL
51187: PUSH
51188: LD_VAR 0 5
51192: PUSH
51193: LD_VAR 0 5
51197: PPUSH
51198: LD_EXP 18
51202: PUSH
51203: LD_VAR 0 2
51207: ARRAY
51208: PUSH
51209: LD_INT 1
51211: ARRAY
51212: PUSH
51213: LD_INT 1
51215: ARRAY
51216: PPUSH
51217: LD_EXP 18
51221: PUSH
51222: LD_VAR 0 2
51226: ARRAY
51227: PUSH
51228: LD_INT 1
51230: ARRAY
51231: PUSH
51232: LD_INT 2
51234: ARRAY
51235: PPUSH
51236: LD_EXP 18
51240: PUSH
51241: LD_VAR 0 2
51245: ARRAY
51246: PUSH
51247: LD_INT 1
51249: ARRAY
51250: PUSH
51251: LD_INT 3
51253: ARRAY
51254: PPUSH
51255: LD_EXP 18
51259: PUSH
51260: LD_VAR 0 2
51264: ARRAY
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: PUSH
51270: LD_INT 4
51272: ARRAY
51273: PPUSH
51274: CALL 16325 0 5
51278: AND
51279: OR
51280: IFFALSE 51561
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
51282: LD_ADDR_VAR 0 4
51286: PUSH
51287: LD_EXP 13
51291: PUSH
51292: LD_VAR 0 2
51296: ARRAY
51297: PPUSH
51298: LD_INT 25
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PPUSH
51308: CALL_OW 72
51312: PUSH
51313: LD_EXP 15
51317: PUSH
51318: LD_VAR 0 2
51322: ARRAY
51323: DIFF
51324: ST_TO_ADDR
// if not tmp then
51325: LD_VAR 0 4
51329: NOT
51330: IFFALSE 51334
// continue ;
51332: GO 50579
// for j in tmp do
51334: LD_ADDR_VAR 0 3
51338: PUSH
51339: LD_VAR 0 4
51343: PUSH
51344: FOR_IN
51345: IFFALSE 51557
// begin if not mc_builders [ i ] then
51347: LD_EXP 19
51351: PUSH
51352: LD_VAR 0 2
51356: ARRAY
51357: NOT
51358: IFFALSE 51416
// begin SetTag ( j , 103 ) ;
51360: LD_VAR 0 3
51364: PPUSH
51365: LD_INT 103
51367: PPUSH
51368: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
51372: LD_ADDR_EXP 19
51376: PUSH
51377: LD_EXP 19
51381: PPUSH
51382: LD_VAR 0 2
51386: PUSH
51387: LD_EXP 19
51391: PUSH
51392: LD_VAR 0 2
51396: ARRAY
51397: PUSH
51398: LD_INT 1
51400: PLUS
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PPUSH
51406: LD_VAR 0 3
51410: PPUSH
51411: CALL 8910 0 3
51415: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
51416: LD_VAR 0 3
51420: PPUSH
51421: CALL_OW 310
51425: IFFALSE 51436
// ComExitBuilding ( j ) ;
51427: LD_VAR 0 3
51431: PPUSH
51432: CALL_OW 122
// wait ( 3 ) ;
51436: LD_INT 3
51438: PPUSH
51439: CALL_OW 67
// if not mc_build_list [ i ] then
51443: LD_EXP 18
51447: PUSH
51448: LD_VAR 0 2
51452: ARRAY
51453: NOT
51454: IFFALSE 51458
// break ;
51456: GO 51557
// if not HasTask ( j ) then
51458: LD_VAR 0 3
51462: PPUSH
51463: CALL_OW 314
51467: NOT
51468: IFFALSE 51555
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
51470: LD_VAR 0 3
51474: PPUSH
51475: LD_EXP 18
51479: PUSH
51480: LD_VAR 0 2
51484: ARRAY
51485: PUSH
51486: LD_INT 1
51488: ARRAY
51489: PUSH
51490: LD_INT 1
51492: ARRAY
51493: PPUSH
51494: LD_EXP 18
51498: PUSH
51499: LD_VAR 0 2
51503: ARRAY
51504: PUSH
51505: LD_INT 1
51507: ARRAY
51508: PUSH
51509: LD_INT 2
51511: ARRAY
51512: PPUSH
51513: LD_EXP 18
51517: PUSH
51518: LD_VAR 0 2
51522: ARRAY
51523: PUSH
51524: LD_INT 1
51526: ARRAY
51527: PUSH
51528: LD_INT 3
51530: ARRAY
51531: PPUSH
51532: LD_EXP 18
51536: PUSH
51537: LD_VAR 0 2
51541: ARRAY
51542: PUSH
51543: LD_INT 1
51545: ARRAY
51546: PUSH
51547: LD_INT 4
51549: ARRAY
51550: PPUSH
51551: CALL_OW 145
// end ;
51555: GO 51344
51557: POP
51558: POP
// end else
51559: GO 51703
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
51561: LD_EXP 13
51565: PUSH
51566: LD_VAR 0 2
51570: ARRAY
51571: PPUSH
51572: LD_EXP 18
51576: PUSH
51577: LD_VAR 0 2
51581: ARRAY
51582: PUSH
51583: LD_INT 1
51585: ARRAY
51586: PUSH
51587: LD_INT 1
51589: ARRAY
51590: PPUSH
51591: LD_EXP 18
51595: PUSH
51596: LD_VAR 0 2
51600: ARRAY
51601: PUSH
51602: LD_INT 1
51604: ARRAY
51605: PUSH
51606: LD_INT 2
51608: ARRAY
51609: PPUSH
51610: LD_EXP 18
51614: PUSH
51615: LD_VAR 0 2
51619: ARRAY
51620: PUSH
51621: LD_INT 1
51623: ARRAY
51624: PUSH
51625: LD_INT 3
51627: ARRAY
51628: PPUSH
51629: LD_EXP 18
51633: PUSH
51634: LD_VAR 0 2
51638: ARRAY
51639: PUSH
51640: LD_INT 1
51642: ARRAY
51643: PUSH
51644: LD_INT 4
51646: ARRAY
51647: PPUSH
51648: CALL 15661 0 5
51652: NOT
51653: IFFALSE 51703
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
51655: LD_ADDR_EXP 18
51659: PUSH
51660: LD_EXP 18
51664: PPUSH
51665: LD_VAR 0 2
51669: PPUSH
51670: LD_EXP 18
51674: PUSH
51675: LD_VAR 0 2
51679: ARRAY
51680: PPUSH
51681: LD_INT 1
51683: PPUSH
51684: LD_INT 1
51686: NEG
51687: PPUSH
51688: LD_INT 0
51690: PPUSH
51691: CALL 8328 0 4
51695: PPUSH
51696: CALL_OW 1
51700: ST_TO_ADDR
// continue ;
51701: GO 50579
// end ; end ; end ;
51703: GO 50579
51705: POP
51706: POP
// end ;
51707: LD_VAR 0 1
51711: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
51712: LD_INT 0
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
// if not mc_bases then
51720: LD_EXP 13
51724: NOT
51725: IFFALSE 51729
// exit ;
51727: GO 52156
// for i = 1 to mc_bases do
51729: LD_ADDR_VAR 0 2
51733: PUSH
51734: DOUBLE
51735: LD_INT 1
51737: DEC
51738: ST_TO_ADDR
51739: LD_EXP 13
51743: PUSH
51744: FOR_TO
51745: IFFALSE 52154
// begin tmp := mc_build_upgrade [ i ] ;
51747: LD_ADDR_VAR 0 4
51751: PUSH
51752: LD_EXP 45
51756: PUSH
51757: LD_VAR 0 2
51761: ARRAY
51762: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
51763: LD_ADDR_VAR 0 6
51767: PUSH
51768: LD_EXP 46
51772: PUSH
51773: LD_VAR 0 2
51777: ARRAY
51778: PPUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 30
51784: PUSH
51785: LD_INT 6
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 30
51794: PUSH
51795: LD_INT 7
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: LIST
51806: PPUSH
51807: CALL_OW 72
51811: ST_TO_ADDR
// if not tmp and not lab then
51812: LD_VAR 0 4
51816: NOT
51817: PUSH
51818: LD_VAR 0 6
51822: NOT
51823: AND
51824: IFFALSE 51828
// continue ;
51826: GO 51744
// if tmp then
51828: LD_VAR 0 4
51832: IFFALSE 51952
// for j in tmp do
51834: LD_ADDR_VAR 0 3
51838: PUSH
51839: LD_VAR 0 4
51843: PUSH
51844: FOR_IN
51845: IFFALSE 51950
// begin if UpgradeCost ( j ) then
51847: LD_VAR 0 3
51851: PPUSH
51852: CALL 15321 0 1
51856: IFFALSE 51948
// begin ComUpgrade ( j ) ;
51858: LD_VAR 0 3
51862: PPUSH
51863: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
51867: LD_ADDR_EXP 45
51871: PUSH
51872: LD_EXP 45
51876: PPUSH
51877: LD_VAR 0 2
51881: PPUSH
51882: LD_EXP 45
51886: PUSH
51887: LD_VAR 0 2
51891: ARRAY
51892: PUSH
51893: LD_VAR 0 3
51897: DIFF
51898: PPUSH
51899: CALL_OW 1
51903: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
51904: LD_ADDR_EXP 20
51908: PUSH
51909: LD_EXP 20
51913: PPUSH
51914: LD_VAR 0 2
51918: PUSH
51919: LD_EXP 20
51923: PUSH
51924: LD_VAR 0 2
51928: ARRAY
51929: PUSH
51930: LD_INT 1
51932: PLUS
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PPUSH
51938: LD_VAR 0 3
51942: PPUSH
51943: CALL 8910 0 3
51947: ST_TO_ADDR
// end ; end ;
51948: GO 51844
51950: POP
51951: POP
// if not lab or not mc_lab_upgrade [ i ] then
51952: LD_VAR 0 6
51956: NOT
51957: PUSH
51958: LD_EXP 47
51962: PUSH
51963: LD_VAR 0 2
51967: ARRAY
51968: NOT
51969: OR
51970: IFFALSE 51974
// continue ;
51972: GO 51744
// for j in lab do
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: LD_VAR 0 6
51983: PUSH
51984: FOR_IN
51985: IFFALSE 52150
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
51987: LD_VAR 0 3
51991: PPUSH
51992: CALL_OW 266
51996: PUSH
51997: LD_INT 6
51999: PUSH
52000: LD_INT 7
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: IN
52007: PUSH
52008: LD_VAR 0 3
52012: PPUSH
52013: CALL_OW 461
52017: PUSH
52018: LD_INT 1
52020: NONEQUAL
52021: AND
52022: IFFALSE 52148
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
52024: LD_VAR 0 3
52028: PPUSH
52029: LD_EXP 47
52033: PUSH
52034: LD_VAR 0 2
52038: ARRAY
52039: PUSH
52040: LD_INT 1
52042: ARRAY
52043: PPUSH
52044: CALL 15526 0 2
52048: IFFALSE 52148
// begin ComCancel ( j ) ;
52050: LD_VAR 0 3
52054: PPUSH
52055: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
52059: LD_VAR 0 3
52063: PPUSH
52064: LD_EXP 47
52068: PUSH
52069: LD_VAR 0 2
52073: ARRAY
52074: PUSH
52075: LD_INT 1
52077: ARRAY
52078: PPUSH
52079: CALL_OW 207
// if not j in mc_construct_list [ i ] then
52083: LD_VAR 0 3
52087: PUSH
52088: LD_EXP 20
52092: PUSH
52093: LD_VAR 0 2
52097: ARRAY
52098: IN
52099: NOT
52100: IFFALSE 52146
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
52102: LD_ADDR_EXP 20
52106: PUSH
52107: LD_EXP 20
52111: PPUSH
52112: LD_VAR 0 2
52116: PUSH
52117: LD_EXP 20
52121: PUSH
52122: LD_VAR 0 2
52126: ARRAY
52127: PUSH
52128: LD_INT 1
52130: PLUS
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PPUSH
52136: LD_VAR 0 3
52140: PPUSH
52141: CALL 8910 0 3
52145: ST_TO_ADDR
// break ;
52146: GO 52150
// end ; end ; end ;
52148: GO 51984
52150: POP
52151: POP
// end ;
52152: GO 51744
52154: POP
52155: POP
// end ;
52156: LD_VAR 0 1
52160: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
52161: LD_INT 0
52163: PPUSH
52164: PPUSH
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
52171: PPUSH
// if not mc_bases then
52172: LD_EXP 13
52176: NOT
52177: IFFALSE 52181
// exit ;
52179: GO 52586
// for i = 1 to mc_bases do
52181: LD_ADDR_VAR 0 2
52185: PUSH
52186: DOUBLE
52187: LD_INT 1
52189: DEC
52190: ST_TO_ADDR
52191: LD_EXP 13
52195: PUSH
52196: FOR_TO
52197: IFFALSE 52584
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
52199: LD_EXP 21
52203: PUSH
52204: LD_VAR 0 2
52208: ARRAY
52209: NOT
52210: PUSH
52211: LD_EXP 13
52215: PUSH
52216: LD_VAR 0 2
52220: ARRAY
52221: PPUSH
52222: LD_INT 30
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PPUSH
52232: CALL_OW 72
52236: NOT
52237: OR
52238: IFFALSE 52242
// continue ;
52240: GO 52196
// busy := false ;
52242: LD_ADDR_VAR 0 8
52246: PUSH
52247: LD_INT 0
52249: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52250: LD_ADDR_VAR 0 4
52254: PUSH
52255: LD_EXP 13
52259: PUSH
52260: LD_VAR 0 2
52264: ARRAY
52265: PPUSH
52266: LD_INT 30
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PPUSH
52276: CALL_OW 72
52280: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
52281: LD_ADDR_VAR 0 6
52285: PUSH
52286: LD_EXP 21
52290: PUSH
52291: LD_VAR 0 2
52295: ARRAY
52296: PPUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 30
52302: PUSH
52303: LD_INT 32
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 30
52312: PUSH
52313: LD_INT 33
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: PPUSH
52325: CALL_OW 72
52329: ST_TO_ADDR
// if not t then
52330: LD_VAR 0 6
52334: NOT
52335: IFFALSE 52339
// continue ;
52337: GO 52196
// for j in tmp do
52339: LD_ADDR_VAR 0 3
52343: PUSH
52344: LD_VAR 0 4
52348: PUSH
52349: FOR_IN
52350: IFFALSE 52380
// if not BuildingStatus ( j ) = bs_idle then
52352: LD_VAR 0 3
52356: PPUSH
52357: CALL_OW 461
52361: PUSH
52362: LD_INT 2
52364: EQUAL
52365: NOT
52366: IFFALSE 52378
// begin busy := true ;
52368: LD_ADDR_VAR 0 8
52372: PUSH
52373: LD_INT 1
52375: ST_TO_ADDR
// break ;
52376: GO 52380
// end ;
52378: GO 52349
52380: POP
52381: POP
// if busy then
52382: LD_VAR 0 8
52386: IFFALSE 52390
// continue ;
52388: GO 52196
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
52390: LD_ADDR_VAR 0 7
52394: PUSH
52395: LD_VAR 0 6
52399: PPUSH
52400: LD_INT 35
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PPUSH
52410: CALL_OW 72
52414: ST_TO_ADDR
// if tw then
52415: LD_VAR 0 7
52419: IFFALSE 52496
// begin tw := tw [ 1 ] ;
52421: LD_ADDR_VAR 0 7
52425: PUSH
52426: LD_VAR 0 7
52430: PUSH
52431: LD_INT 1
52433: ARRAY
52434: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
52435: LD_ADDR_VAR 0 9
52439: PUSH
52440: LD_VAR 0 7
52444: PPUSH
52445: LD_EXP 38
52449: PUSH
52450: LD_VAR 0 2
52454: ARRAY
52455: PPUSH
52456: CALL 13880 0 2
52460: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
52461: LD_EXP 52
52465: PUSH
52466: LD_VAR 0 2
52470: ARRAY
52471: IFFALSE 52494
// if not weapon in mc_allowed_tower_weapons [ i ] then
52473: LD_VAR 0 9
52477: PUSH
52478: LD_EXP 52
52482: PUSH
52483: LD_VAR 0 2
52487: ARRAY
52488: IN
52489: NOT
52490: IFFALSE 52494
// continue ;
52492: GO 52196
// end else
52494: GO 52559
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
52496: LD_ADDR_VAR 0 5
52500: PUSH
52501: LD_EXP 21
52505: PUSH
52506: LD_VAR 0 2
52510: ARRAY
52511: PPUSH
52512: LD_VAR 0 4
52516: PPUSH
52517: CALL 39382 0 2
52521: ST_TO_ADDR
// if not tmp2 then
52522: LD_VAR 0 5
52526: NOT
52527: IFFALSE 52531
// continue ;
52529: GO 52196
// tw := tmp2 [ 1 ] ;
52531: LD_ADDR_VAR 0 7
52535: PUSH
52536: LD_VAR 0 5
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
52545: LD_ADDR_VAR 0 9
52549: PUSH
52550: LD_VAR 0 5
52554: PUSH
52555: LD_INT 2
52557: ARRAY
52558: ST_TO_ADDR
// end ; if not weapon then
52559: LD_VAR 0 9
52563: NOT
52564: IFFALSE 52568
// continue ;
52566: GO 52196
// ComPlaceWeapon ( tw , weapon ) ;
52568: LD_VAR 0 7
52572: PPUSH
52573: LD_VAR 0 9
52577: PPUSH
52578: CALL_OW 148
// end ;
52582: GO 52196
52584: POP
52585: POP
// end ;
52586: LD_VAR 0 1
52590: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
52591: LD_INT 0
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
// if not mc_bases then
52599: LD_EXP 13
52603: NOT
52604: IFFALSE 52608
// exit ;
52606: GO 53384
// for i = 1 to mc_bases do
52608: LD_ADDR_VAR 0 2
52612: PUSH
52613: DOUBLE
52614: LD_INT 1
52616: DEC
52617: ST_TO_ADDR
52618: LD_EXP 13
52622: PUSH
52623: FOR_TO
52624: IFFALSE 53382
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
52626: LD_EXP 26
52630: PUSH
52631: LD_VAR 0 2
52635: ARRAY
52636: NOT
52637: PUSH
52638: LD_EXP 26
52642: PUSH
52643: LD_VAR 0 2
52647: ARRAY
52648: PUSH
52649: LD_EXP 27
52653: PUSH
52654: LD_VAR 0 2
52658: ARRAY
52659: EQUAL
52660: OR
52661: PUSH
52662: LD_EXP 36
52666: PUSH
52667: LD_VAR 0 2
52671: ARRAY
52672: OR
52673: IFFALSE 52677
// continue ;
52675: GO 52623
// if mc_miners [ i ] then
52677: LD_EXP 27
52681: PUSH
52682: LD_VAR 0 2
52686: ARRAY
52687: IFFALSE 53069
// begin for j = mc_miners [ i ] downto 1 do
52689: LD_ADDR_VAR 0 3
52693: PUSH
52694: DOUBLE
52695: LD_EXP 27
52699: PUSH
52700: LD_VAR 0 2
52704: ARRAY
52705: INC
52706: ST_TO_ADDR
52707: LD_INT 1
52709: PUSH
52710: FOR_DOWNTO
52711: IFFALSE 53067
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
52713: LD_EXP 27
52717: PUSH
52718: LD_VAR 0 2
52722: ARRAY
52723: PUSH
52724: LD_VAR 0 3
52728: ARRAY
52729: PPUSH
52730: CALL_OW 301
52734: PUSH
52735: LD_EXP 27
52739: PUSH
52740: LD_VAR 0 2
52744: ARRAY
52745: PUSH
52746: LD_VAR 0 3
52750: ARRAY
52751: PPUSH
52752: CALL_OW 257
52756: PUSH
52757: LD_INT 1
52759: NONEQUAL
52760: OR
52761: IFFALSE 52824
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
52763: LD_ADDR_VAR 0 5
52767: PUSH
52768: LD_EXP 27
52772: PUSH
52773: LD_VAR 0 2
52777: ARRAY
52778: PUSH
52779: LD_EXP 27
52783: PUSH
52784: LD_VAR 0 2
52788: ARRAY
52789: PUSH
52790: LD_VAR 0 3
52794: ARRAY
52795: DIFF
52796: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
52797: LD_ADDR_EXP 27
52801: PUSH
52802: LD_EXP 27
52806: PPUSH
52807: LD_VAR 0 2
52811: PPUSH
52812: LD_VAR 0 5
52816: PPUSH
52817: CALL_OW 1
52821: ST_TO_ADDR
// continue ;
52822: GO 52710
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
52824: LD_EXP 27
52828: PUSH
52829: LD_VAR 0 2
52833: ARRAY
52834: PUSH
52835: LD_VAR 0 3
52839: ARRAY
52840: PPUSH
52841: CALL_OW 257
52845: PUSH
52846: LD_INT 1
52848: EQUAL
52849: PUSH
52850: LD_EXP 27
52854: PUSH
52855: LD_VAR 0 2
52859: ARRAY
52860: PUSH
52861: LD_VAR 0 3
52865: ARRAY
52866: PPUSH
52867: CALL_OW 459
52871: NOT
52872: AND
52873: PUSH
52874: LD_EXP 27
52878: PUSH
52879: LD_VAR 0 2
52883: ARRAY
52884: PUSH
52885: LD_VAR 0 3
52889: ARRAY
52890: PPUSH
52891: CALL_OW 314
52895: NOT
52896: AND
52897: IFFALSE 53065
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
52899: LD_EXP 27
52903: PUSH
52904: LD_VAR 0 2
52908: ARRAY
52909: PUSH
52910: LD_VAR 0 3
52914: ARRAY
52915: PPUSH
52916: CALL_OW 310
52920: IFFALSE 52943
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
52922: LD_EXP 27
52926: PUSH
52927: LD_VAR 0 2
52931: ARRAY
52932: PUSH
52933: LD_VAR 0 3
52937: ARRAY
52938: PPUSH
52939: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
52943: LD_EXP 27
52947: PUSH
52948: LD_VAR 0 2
52952: ARRAY
52953: PUSH
52954: LD_VAR 0 3
52958: ARRAY
52959: PPUSH
52960: CALL_OW 314
52964: NOT
52965: IFFALSE 53065
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
52967: LD_EXP 27
52971: PUSH
52972: LD_VAR 0 2
52976: ARRAY
52977: PUSH
52978: LD_VAR 0 3
52982: ARRAY
52983: PPUSH
52984: LD_EXP 26
52988: PUSH
52989: LD_VAR 0 2
52993: ARRAY
52994: PUSH
52995: LD_VAR 0 3
52999: PUSH
53000: LD_EXP 26
53004: PUSH
53005: LD_VAR 0 2
53009: ARRAY
53010: MOD
53011: PUSH
53012: LD_INT 1
53014: PLUS
53015: ARRAY
53016: PUSH
53017: LD_INT 1
53019: ARRAY
53020: PPUSH
53021: LD_EXP 26
53025: PUSH
53026: LD_VAR 0 2
53030: ARRAY
53031: PUSH
53032: LD_VAR 0 3
53036: PUSH
53037: LD_EXP 26
53041: PUSH
53042: LD_VAR 0 2
53046: ARRAY
53047: MOD
53048: PUSH
53049: LD_INT 1
53051: PLUS
53052: ARRAY
53053: PUSH
53054: LD_INT 2
53056: ARRAY
53057: PPUSH
53058: LD_INT 0
53060: PPUSH
53061: CALL_OW 193
// end ; end ;
53065: GO 52710
53067: POP
53068: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
53069: LD_ADDR_VAR 0 5
53073: PUSH
53074: LD_EXP 13
53078: PUSH
53079: LD_VAR 0 2
53083: ARRAY
53084: PPUSH
53085: LD_INT 2
53087: PUSH
53088: LD_INT 30
53090: PUSH
53091: LD_INT 4
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 30
53100: PUSH
53101: LD_INT 5
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 30
53110: PUSH
53111: LD_INT 32
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: PPUSH
53124: CALL_OW 72
53128: ST_TO_ADDR
// if not tmp then
53129: LD_VAR 0 5
53133: NOT
53134: IFFALSE 53138
// continue ;
53136: GO 52623
// list := [ ] ;
53138: LD_ADDR_VAR 0 6
53142: PUSH
53143: EMPTY
53144: ST_TO_ADDR
// for j in tmp do
53145: LD_ADDR_VAR 0 3
53149: PUSH
53150: LD_VAR 0 5
53154: PUSH
53155: FOR_IN
53156: IFFALSE 53225
// begin for k in UnitsInside ( j ) do
53158: LD_ADDR_VAR 0 4
53162: PUSH
53163: LD_VAR 0 3
53167: PPUSH
53168: CALL_OW 313
53172: PUSH
53173: FOR_IN
53174: IFFALSE 53221
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
53176: LD_VAR 0 4
53180: PPUSH
53181: CALL_OW 257
53185: PUSH
53186: LD_INT 1
53188: EQUAL
53189: PUSH
53190: LD_VAR 0 4
53194: PPUSH
53195: CALL_OW 459
53199: NOT
53200: AND
53201: IFFALSE 53219
// list := list ^ k ;
53203: LD_ADDR_VAR 0 6
53207: PUSH
53208: LD_VAR 0 6
53212: PUSH
53213: LD_VAR 0 4
53217: ADD
53218: ST_TO_ADDR
53219: GO 53173
53221: POP
53222: POP
// end ;
53223: GO 53155
53225: POP
53226: POP
// list := list diff mc_miners [ i ] ;
53227: LD_ADDR_VAR 0 6
53231: PUSH
53232: LD_VAR 0 6
53236: PUSH
53237: LD_EXP 27
53241: PUSH
53242: LD_VAR 0 2
53246: ARRAY
53247: DIFF
53248: ST_TO_ADDR
// if not list then
53249: LD_VAR 0 6
53253: NOT
53254: IFFALSE 53258
// continue ;
53256: GO 52623
// k := mc_mines [ i ] - mc_miners [ i ] ;
53258: LD_ADDR_VAR 0 4
53262: PUSH
53263: LD_EXP 26
53267: PUSH
53268: LD_VAR 0 2
53272: ARRAY
53273: PUSH
53274: LD_EXP 27
53278: PUSH
53279: LD_VAR 0 2
53283: ARRAY
53284: MINUS
53285: ST_TO_ADDR
// if k > list then
53286: LD_VAR 0 4
53290: PUSH
53291: LD_VAR 0 6
53295: GREATER
53296: IFFALSE 53308
// k := list ;
53298: LD_ADDR_VAR 0 4
53302: PUSH
53303: LD_VAR 0 6
53307: ST_TO_ADDR
// for j = 1 to k do
53308: LD_ADDR_VAR 0 3
53312: PUSH
53313: DOUBLE
53314: LD_INT 1
53316: DEC
53317: ST_TO_ADDR
53318: LD_VAR 0 4
53322: PUSH
53323: FOR_TO
53324: IFFALSE 53378
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
53326: LD_ADDR_EXP 27
53330: PUSH
53331: LD_EXP 27
53335: PPUSH
53336: LD_VAR 0 2
53340: PUSH
53341: LD_EXP 27
53345: PUSH
53346: LD_VAR 0 2
53350: ARRAY
53351: PUSH
53352: LD_INT 1
53354: PLUS
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PPUSH
53360: LD_VAR 0 6
53364: PUSH
53365: LD_VAR 0 3
53369: ARRAY
53370: PPUSH
53371: CALL 8910 0 3
53375: ST_TO_ADDR
53376: GO 53323
53378: POP
53379: POP
// end ;
53380: GO 52623
53382: POP
53383: POP
// end ;
53384: LD_VAR 0 1
53388: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
53389: LD_INT 0
53391: PPUSH
53392: PPUSH
53393: PPUSH
53394: PPUSH
53395: PPUSH
53396: PPUSH
53397: PPUSH
53398: PPUSH
53399: PPUSH
53400: PPUSH
// if not mc_bases then
53401: LD_EXP 13
53405: NOT
53406: IFFALSE 53410
// exit ;
53408: GO 55160
// for i = 1 to mc_bases do
53410: LD_ADDR_VAR 0 2
53414: PUSH
53415: DOUBLE
53416: LD_INT 1
53418: DEC
53419: ST_TO_ADDR
53420: LD_EXP 13
53424: PUSH
53425: FOR_TO
53426: IFFALSE 55158
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
53428: LD_EXP 13
53432: PUSH
53433: LD_VAR 0 2
53437: ARRAY
53438: NOT
53439: PUSH
53440: LD_EXP 20
53444: PUSH
53445: LD_VAR 0 2
53449: ARRAY
53450: OR
53451: IFFALSE 53455
// continue ;
53453: GO 53425
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
53455: LD_EXP 29
53459: PUSH
53460: LD_VAR 0 2
53464: ARRAY
53465: NOT
53466: PUSH
53467: LD_EXP 30
53471: PUSH
53472: LD_VAR 0 2
53476: ARRAY
53477: AND
53478: IFFALSE 53516
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53480: LD_ADDR_EXP 30
53484: PUSH
53485: LD_EXP 30
53489: PPUSH
53490: LD_VAR 0 2
53494: PPUSH
53495: EMPTY
53496: PPUSH
53497: CALL_OW 1
53501: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
53502: LD_VAR 0 2
53506: PPUSH
53507: LD_INT 107
53509: PPUSH
53510: CALL 44390 0 2
// continue ;
53514: GO 53425
// end ; target := [ ] ;
53516: LD_ADDR_VAR 0 6
53520: PUSH
53521: EMPTY
53522: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
53523: LD_ADDR_VAR 0 3
53527: PUSH
53528: DOUBLE
53529: LD_EXP 29
53533: PUSH
53534: LD_VAR 0 2
53538: ARRAY
53539: INC
53540: ST_TO_ADDR
53541: LD_INT 1
53543: PUSH
53544: FOR_DOWNTO
53545: IFFALSE 53805
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
53547: LD_EXP 29
53551: PUSH
53552: LD_VAR 0 2
53556: ARRAY
53557: PUSH
53558: LD_VAR 0 3
53562: ARRAY
53563: PUSH
53564: LD_INT 2
53566: ARRAY
53567: PPUSH
53568: LD_EXP 29
53572: PUSH
53573: LD_VAR 0 2
53577: ARRAY
53578: PUSH
53579: LD_VAR 0 3
53583: ARRAY
53584: PUSH
53585: LD_INT 3
53587: ARRAY
53588: PPUSH
53589: CALL_OW 488
53593: PUSH
53594: LD_EXP 29
53598: PUSH
53599: LD_VAR 0 2
53603: ARRAY
53604: PUSH
53605: LD_VAR 0 3
53609: ARRAY
53610: PUSH
53611: LD_INT 2
53613: ARRAY
53614: PPUSH
53615: LD_EXP 29
53619: PUSH
53620: LD_VAR 0 2
53624: ARRAY
53625: PUSH
53626: LD_VAR 0 3
53630: ARRAY
53631: PUSH
53632: LD_INT 3
53634: ARRAY
53635: PPUSH
53636: CALL_OW 284
53640: PUSH
53641: LD_INT 0
53643: EQUAL
53644: AND
53645: IFFALSE 53700
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
53647: LD_ADDR_VAR 0 5
53651: PUSH
53652: LD_EXP 29
53656: PUSH
53657: LD_VAR 0 2
53661: ARRAY
53662: PPUSH
53663: LD_VAR 0 3
53667: PPUSH
53668: CALL_OW 3
53672: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
53673: LD_ADDR_EXP 29
53677: PUSH
53678: LD_EXP 29
53682: PPUSH
53683: LD_VAR 0 2
53687: PPUSH
53688: LD_VAR 0 5
53692: PPUSH
53693: CALL_OW 1
53697: ST_TO_ADDR
// continue ;
53698: GO 53544
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
53700: LD_EXP 13
53704: PUSH
53705: LD_VAR 0 2
53709: ARRAY
53710: PUSH
53711: LD_INT 1
53713: ARRAY
53714: PPUSH
53715: CALL_OW 255
53719: PPUSH
53720: LD_EXP 29
53724: PUSH
53725: LD_VAR 0 2
53729: ARRAY
53730: PUSH
53731: LD_VAR 0 3
53735: ARRAY
53736: PUSH
53737: LD_INT 2
53739: ARRAY
53740: PPUSH
53741: LD_EXP 29
53745: PUSH
53746: LD_VAR 0 2
53750: ARRAY
53751: PUSH
53752: LD_VAR 0 3
53756: ARRAY
53757: PUSH
53758: LD_INT 3
53760: ARRAY
53761: PPUSH
53762: LD_INT 30
53764: PPUSH
53765: CALL 9806 0 4
53769: PUSH
53770: LD_INT 4
53772: ARRAY
53773: PUSH
53774: LD_INT 0
53776: EQUAL
53777: IFFALSE 53803
// begin target := mc_crates [ i ] [ j ] ;
53779: LD_ADDR_VAR 0 6
53783: PUSH
53784: LD_EXP 29
53788: PUSH
53789: LD_VAR 0 2
53793: ARRAY
53794: PUSH
53795: LD_VAR 0 3
53799: ARRAY
53800: ST_TO_ADDR
// break ;
53801: GO 53805
// end ; end ;
53803: GO 53544
53805: POP
53806: POP
// if not target then
53807: LD_VAR 0 6
53811: NOT
53812: IFFALSE 53816
// continue ;
53814: GO 53425
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
53816: LD_ADDR_VAR 0 7
53820: PUSH
53821: LD_EXP 32
53825: PUSH
53826: LD_VAR 0 2
53830: ARRAY
53831: PPUSH
53832: LD_INT 2
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: LD_INT 58
53840: PUSH
53841: EMPTY
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 61
53850: PUSH
53851: EMPTY
53852: LIST
53853: PUSH
53854: LD_INT 33
53856: PUSH
53857: LD_INT 5
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 33
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 34
53886: PUSH
53887: LD_INT 32
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 34
53896: PUSH
53897: LD_INT 51
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 34
53906: PUSH
53907: LD_INT 12
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PPUSH
53924: CALL_OW 72
53928: ST_TO_ADDR
// if not cargo then
53929: LD_VAR 0 7
53933: NOT
53934: IFFALSE 54577
// begin if mc_crates_collector [ i ] < 5 then
53936: LD_EXP 30
53940: PUSH
53941: LD_VAR 0 2
53945: ARRAY
53946: PUSH
53947: LD_INT 5
53949: LESS
53950: IFFALSE 54316
// begin if mc_ape [ i ] then
53952: LD_EXP 42
53956: PUSH
53957: LD_VAR 0 2
53961: ARRAY
53962: IFFALSE 54009
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
53964: LD_ADDR_VAR 0 5
53968: PUSH
53969: LD_EXP 42
53973: PUSH
53974: LD_VAR 0 2
53978: ARRAY
53979: PPUSH
53980: LD_INT 25
53982: PUSH
53983: LD_INT 16
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 24
53992: PUSH
53993: LD_INT 750
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PPUSH
54004: CALL_OW 72
54008: ST_TO_ADDR
// if not tmp then
54009: LD_VAR 0 5
54013: NOT
54014: IFFALSE 54061
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
54016: LD_ADDR_VAR 0 5
54020: PUSH
54021: LD_EXP 13
54025: PUSH
54026: LD_VAR 0 2
54030: ARRAY
54031: PPUSH
54032: LD_INT 25
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 24
54044: PUSH
54045: LD_INT 750
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PPUSH
54056: CALL_OW 72
54060: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
54061: LD_EXP 42
54065: PUSH
54066: LD_VAR 0 2
54070: ARRAY
54071: PUSH
54072: LD_EXP 13
54076: PUSH
54077: LD_VAR 0 2
54081: ARRAY
54082: PPUSH
54083: LD_INT 25
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 24
54095: PUSH
54096: LD_INT 750
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PPUSH
54107: CALL_OW 72
54111: AND
54112: PUSH
54113: LD_VAR 0 5
54117: PUSH
54118: LD_INT 5
54120: LESS
54121: AND
54122: IFFALSE 54204
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
54124: LD_ADDR_VAR 0 3
54128: PUSH
54129: LD_EXP 13
54133: PUSH
54134: LD_VAR 0 2
54138: ARRAY
54139: PPUSH
54140: LD_INT 25
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 24
54152: PUSH
54153: LD_INT 750
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PPUSH
54164: CALL_OW 72
54168: PUSH
54169: FOR_IN
54170: IFFALSE 54202
// begin tmp := tmp union j ;
54172: LD_ADDR_VAR 0 5
54176: PUSH
54177: LD_VAR 0 5
54181: PUSH
54182: LD_VAR 0 3
54186: UNION
54187: ST_TO_ADDR
// if tmp >= 5 then
54188: LD_VAR 0 5
54192: PUSH
54193: LD_INT 5
54195: GREATEREQUAL
54196: IFFALSE 54200
// break ;
54198: GO 54202
// end ;
54200: GO 54169
54202: POP
54203: POP
// end ; if not tmp then
54204: LD_VAR 0 5
54208: NOT
54209: IFFALSE 54213
// continue ;
54211: GO 53425
// for j in tmp do
54213: LD_ADDR_VAR 0 3
54217: PUSH
54218: LD_VAR 0 5
54222: PUSH
54223: FOR_IN
54224: IFFALSE 54314
// if not GetTag ( j ) then
54226: LD_VAR 0 3
54230: PPUSH
54231: CALL_OW 110
54235: NOT
54236: IFFALSE 54312
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
54238: LD_ADDR_EXP 30
54242: PUSH
54243: LD_EXP 30
54247: PPUSH
54248: LD_VAR 0 2
54252: PUSH
54253: LD_EXP 30
54257: PUSH
54258: LD_VAR 0 2
54262: ARRAY
54263: PUSH
54264: LD_INT 1
54266: PLUS
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PPUSH
54272: LD_VAR 0 3
54276: PPUSH
54277: CALL 8910 0 3
54281: ST_TO_ADDR
// SetTag ( j , 107 ) ;
54282: LD_VAR 0 3
54286: PPUSH
54287: LD_INT 107
54289: PPUSH
54290: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
54294: LD_EXP 30
54298: PUSH
54299: LD_VAR 0 2
54303: ARRAY
54304: PUSH
54305: LD_INT 5
54307: GREATEREQUAL
54308: IFFALSE 54312
// break ;
54310: GO 54314
// end ;
54312: GO 54223
54314: POP
54315: POP
// end ; if mc_crates_collector [ i ] and target then
54316: LD_EXP 30
54320: PUSH
54321: LD_VAR 0 2
54325: ARRAY
54326: PUSH
54327: LD_VAR 0 6
54331: AND
54332: IFFALSE 54575
// begin if mc_crates_collector [ i ] < target [ 1 ] then
54334: LD_EXP 30
54338: PUSH
54339: LD_VAR 0 2
54343: ARRAY
54344: PUSH
54345: LD_VAR 0 6
54349: PUSH
54350: LD_INT 1
54352: ARRAY
54353: LESS
54354: IFFALSE 54374
// tmp := mc_crates_collector [ i ] else
54356: LD_ADDR_VAR 0 5
54360: PUSH
54361: LD_EXP 30
54365: PUSH
54366: LD_VAR 0 2
54370: ARRAY
54371: ST_TO_ADDR
54372: GO 54388
// tmp := target [ 1 ] ;
54374: LD_ADDR_VAR 0 5
54378: PUSH
54379: LD_VAR 0 6
54383: PUSH
54384: LD_INT 1
54386: ARRAY
54387: ST_TO_ADDR
// k := 0 ;
54388: LD_ADDR_VAR 0 4
54392: PUSH
54393: LD_INT 0
54395: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
54396: LD_ADDR_VAR 0 3
54400: PUSH
54401: LD_EXP 30
54405: PUSH
54406: LD_VAR 0 2
54410: ARRAY
54411: PUSH
54412: FOR_IN
54413: IFFALSE 54573
// begin k := k + 1 ;
54415: LD_ADDR_VAR 0 4
54419: PUSH
54420: LD_VAR 0 4
54424: PUSH
54425: LD_INT 1
54427: PLUS
54428: ST_TO_ADDR
// if k > tmp then
54429: LD_VAR 0 4
54433: PUSH
54434: LD_VAR 0 5
54438: GREATER
54439: IFFALSE 54443
// break ;
54441: GO 54573
// if not GetClass ( j ) in [ 2 , 16 ] then
54443: LD_VAR 0 3
54447: PPUSH
54448: CALL_OW 257
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 16
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: IN
54463: NOT
54464: IFFALSE 54517
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
54466: LD_ADDR_EXP 30
54470: PUSH
54471: LD_EXP 30
54475: PPUSH
54476: LD_VAR 0 2
54480: PPUSH
54481: LD_EXP 30
54485: PUSH
54486: LD_VAR 0 2
54490: ARRAY
54491: PUSH
54492: LD_VAR 0 3
54496: DIFF
54497: PPUSH
54498: CALL_OW 1
54502: ST_TO_ADDR
// SetTag ( j , 0 ) ;
54503: LD_VAR 0 3
54507: PPUSH
54508: LD_INT 0
54510: PPUSH
54511: CALL_OW 109
// continue ;
54515: GO 54412
// end ; if IsInUnit ( j ) then
54517: LD_VAR 0 3
54521: PPUSH
54522: CALL_OW 310
54526: IFFALSE 54537
// ComExitBuilding ( j ) ;
54528: LD_VAR 0 3
54532: PPUSH
54533: CALL_OW 122
// wait ( 3 ) ;
54537: LD_INT 3
54539: PPUSH
54540: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
54544: LD_VAR 0 3
54548: PPUSH
54549: LD_VAR 0 6
54553: PUSH
54554: LD_INT 2
54556: ARRAY
54557: PPUSH
54558: LD_VAR 0 6
54562: PUSH
54563: LD_INT 3
54565: ARRAY
54566: PPUSH
54567: CALL_OW 117
// end ;
54571: GO 54412
54573: POP
54574: POP
// end ; end else
54575: GO 55156
// begin for j in cargo do
54577: LD_ADDR_VAR 0 3
54581: PUSH
54582: LD_VAR 0 7
54586: PUSH
54587: FOR_IN
54588: IFFALSE 55154
// begin if GetTag ( j ) <> 0 then
54590: LD_VAR 0 3
54594: PPUSH
54595: CALL_OW 110
54599: PUSH
54600: LD_INT 0
54602: NONEQUAL
54603: IFFALSE 54607
// continue ;
54605: GO 54587
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
54607: LD_VAR 0 3
54611: PPUSH
54612: CALL_OW 256
54616: PUSH
54617: LD_INT 1000
54619: LESS
54620: PUSH
54621: LD_VAR 0 3
54625: PPUSH
54626: LD_EXP 37
54630: PUSH
54631: LD_VAR 0 2
54635: ARRAY
54636: PPUSH
54637: CALL_OW 308
54641: NOT
54642: AND
54643: IFFALSE 54665
// ComMoveToArea ( j , mc_parking [ i ] ) ;
54645: LD_VAR 0 3
54649: PPUSH
54650: LD_EXP 37
54654: PUSH
54655: LD_VAR 0 2
54659: ARRAY
54660: PPUSH
54661: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
54665: LD_VAR 0 3
54669: PPUSH
54670: CALL_OW 256
54674: PUSH
54675: LD_INT 1000
54677: LESS
54678: PUSH
54679: LD_VAR 0 3
54683: PPUSH
54684: LD_EXP 37
54688: PUSH
54689: LD_VAR 0 2
54693: ARRAY
54694: PPUSH
54695: CALL_OW 308
54699: AND
54700: IFFALSE 54704
// continue ;
54702: GO 54587
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
54704: LD_VAR 0 3
54708: PPUSH
54709: CALL_OW 262
54713: PUSH
54714: LD_INT 2
54716: EQUAL
54717: PUSH
54718: LD_VAR 0 3
54722: PPUSH
54723: CALL_OW 261
54727: PUSH
54728: LD_INT 15
54730: LESS
54731: AND
54732: IFFALSE 54736
// continue ;
54734: GO 54587
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
54736: LD_VAR 0 3
54740: PPUSH
54741: CALL_OW 262
54745: PUSH
54746: LD_INT 1
54748: EQUAL
54749: PUSH
54750: LD_VAR 0 3
54754: PPUSH
54755: CALL_OW 261
54759: PUSH
54760: LD_INT 10
54762: LESS
54763: AND
54764: IFFALSE 55093
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54766: LD_ADDR_VAR 0 8
54770: PUSH
54771: LD_EXP 13
54775: PUSH
54776: LD_VAR 0 2
54780: ARRAY
54781: PPUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 30
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 30
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: PPUSH
54810: CALL_OW 72
54814: ST_TO_ADDR
// if not depot then
54815: LD_VAR 0 8
54819: NOT
54820: IFFALSE 54824
// continue ;
54822: GO 54587
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
54824: LD_VAR 0 3
54828: PPUSH
54829: LD_VAR 0 8
54833: PPUSH
54834: LD_VAR 0 3
54838: PPUSH
54839: CALL_OW 74
54843: PPUSH
54844: CALL_OW 296
54848: PUSH
54849: LD_INT 6
54851: LESS
54852: IFFALSE 54868
// SetFuel ( j , 100 ) else
54854: LD_VAR 0 3
54858: PPUSH
54859: LD_INT 100
54861: PPUSH
54862: CALL_OW 240
54866: GO 55093
// if GetFuel ( j ) = 0 then
54868: LD_VAR 0 3
54872: PPUSH
54873: CALL_OW 261
54877: PUSH
54878: LD_INT 0
54880: EQUAL
54881: IFFALSE 55093
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
54883: LD_ADDR_EXP 32
54887: PUSH
54888: LD_EXP 32
54892: PPUSH
54893: LD_VAR 0 2
54897: PPUSH
54898: LD_EXP 32
54902: PUSH
54903: LD_VAR 0 2
54907: ARRAY
54908: PUSH
54909: LD_VAR 0 3
54913: DIFF
54914: PPUSH
54915: CALL_OW 1
54919: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
54920: LD_VAR 0 3
54924: PPUSH
54925: CALL_OW 263
54929: PUSH
54930: LD_INT 1
54932: EQUAL
54933: IFFALSE 54949
// ComExitVehicle ( IsInUnit ( j ) ) ;
54935: LD_VAR 0 3
54939: PPUSH
54940: CALL_OW 310
54944: PPUSH
54945: CALL_OW 121
// if GetControl ( j ) = control_remote then
54949: LD_VAR 0 3
54953: PPUSH
54954: CALL_OW 263
54958: PUSH
54959: LD_INT 2
54961: EQUAL
54962: IFFALSE 54973
// ComUnlink ( j ) ;
54964: LD_VAR 0 3
54968: PPUSH
54969: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
54973: LD_ADDR_VAR 0 9
54977: PUSH
54978: LD_VAR 0 2
54982: PPUSH
54983: LD_INT 3
54985: PPUSH
54986: CALL 64446 0 2
54990: ST_TO_ADDR
// if fac then
54991: LD_VAR 0 9
54995: IFFALSE 55091
// begin for k in fac do
54997: LD_ADDR_VAR 0 4
55001: PUSH
55002: LD_VAR 0 9
55006: PUSH
55007: FOR_IN
55008: IFFALSE 55089
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
55010: LD_ADDR_VAR 0 10
55014: PUSH
55015: LD_VAR 0 9
55019: PPUSH
55020: LD_VAR 0 3
55024: PPUSH
55025: CALL_OW 265
55029: PPUSH
55030: LD_VAR 0 3
55034: PPUSH
55035: CALL_OW 262
55039: PPUSH
55040: LD_VAR 0 3
55044: PPUSH
55045: CALL_OW 263
55049: PPUSH
55050: LD_VAR 0 3
55054: PPUSH
55055: CALL_OW 264
55059: PPUSH
55060: CALL 6442 0 5
55064: ST_TO_ADDR
// if components then
55065: LD_VAR 0 10
55069: IFFALSE 55087
// begin MC_InsertProduceList ( i , components ) ;
55071: LD_VAR 0 2
55075: PPUSH
55076: LD_VAR 0 10
55080: PPUSH
55081: CALL 63991 0 2
// break ;
55085: GO 55089
// end ; end ;
55087: GO 55007
55089: POP
55090: POP
// end ; continue ;
55091: GO 54587
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
55093: LD_VAR 0 3
55097: PPUSH
55098: LD_INT 1
55100: PPUSH
55101: CALL_OW 289
55105: PUSH
55106: LD_INT 100
55108: LESS
55109: PUSH
55110: LD_VAR 0 3
55114: PPUSH
55115: CALL_OW 314
55119: NOT
55120: AND
55121: IFFALSE 55150
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
55123: LD_VAR 0 3
55127: PPUSH
55128: LD_VAR 0 6
55132: PUSH
55133: LD_INT 2
55135: ARRAY
55136: PPUSH
55137: LD_VAR 0 6
55141: PUSH
55142: LD_INT 3
55144: ARRAY
55145: PPUSH
55146: CALL_OW 117
// break ;
55150: GO 55154
// end ;
55152: GO 54587
55154: POP
55155: POP
// end ; end ;
55156: GO 53425
55158: POP
55159: POP
// end ;
55160: LD_VAR 0 1
55164: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
55165: LD_INT 0
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
// if not mc_bases then
55171: LD_EXP 13
55175: NOT
55176: IFFALSE 55180
// exit ;
55178: GO 55341
// for i = 1 to mc_bases do
55180: LD_ADDR_VAR 0 2
55184: PUSH
55185: DOUBLE
55186: LD_INT 1
55188: DEC
55189: ST_TO_ADDR
55190: LD_EXP 13
55194: PUSH
55195: FOR_TO
55196: IFFALSE 55339
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
55198: LD_ADDR_VAR 0 4
55202: PUSH
55203: LD_EXP 32
55207: PUSH
55208: LD_VAR 0 2
55212: ARRAY
55213: PUSH
55214: LD_EXP 35
55218: PUSH
55219: LD_VAR 0 2
55223: ARRAY
55224: UNION
55225: PPUSH
55226: LD_INT 33
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PPUSH
55236: CALL_OW 72
55240: ST_TO_ADDR
// if tmp then
55241: LD_VAR 0 4
55245: IFFALSE 55337
// for j in tmp do
55247: LD_ADDR_VAR 0 3
55251: PUSH
55252: LD_VAR 0 4
55256: PUSH
55257: FOR_IN
55258: IFFALSE 55335
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
55260: LD_VAR 0 3
55264: PPUSH
55265: CALL_OW 312
55269: NOT
55270: PUSH
55271: LD_VAR 0 3
55275: PPUSH
55276: CALL_OW 256
55280: PUSH
55281: LD_INT 250
55283: GREATEREQUAL
55284: AND
55285: IFFALSE 55298
// Connect ( j ) else
55287: LD_VAR 0 3
55291: PPUSH
55292: CALL 11843 0 1
55296: GO 55333
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
55298: LD_VAR 0 3
55302: PPUSH
55303: CALL_OW 256
55307: PUSH
55308: LD_INT 250
55310: LESS
55311: PUSH
55312: LD_VAR 0 3
55316: PPUSH
55317: CALL_OW 312
55321: AND
55322: IFFALSE 55333
// ComUnlink ( j ) ;
55324: LD_VAR 0 3
55328: PPUSH
55329: CALL_OW 136
55333: GO 55257
55335: POP
55336: POP
// end ;
55337: GO 55195
55339: POP
55340: POP
// end ;
55341: LD_VAR 0 1
55345: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
55346: LD_INT 0
55348: PPUSH
55349: PPUSH
55350: PPUSH
55351: PPUSH
55352: PPUSH
// if not mc_bases then
55353: LD_EXP 13
55357: NOT
55358: IFFALSE 55362
// exit ;
55360: GO 55807
// for i = 1 to mc_bases do
55362: LD_ADDR_VAR 0 2
55366: PUSH
55367: DOUBLE
55368: LD_INT 1
55370: DEC
55371: ST_TO_ADDR
55372: LD_EXP 13
55376: PUSH
55377: FOR_TO
55378: IFFALSE 55805
// begin if not mc_produce [ i ] then
55380: LD_EXP 34
55384: PUSH
55385: LD_VAR 0 2
55389: ARRAY
55390: NOT
55391: IFFALSE 55395
// continue ;
55393: GO 55377
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
55395: LD_ADDR_VAR 0 5
55399: PUSH
55400: LD_EXP 13
55404: PUSH
55405: LD_VAR 0 2
55409: ARRAY
55410: PPUSH
55411: LD_INT 30
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PPUSH
55421: CALL_OW 72
55425: ST_TO_ADDR
// if not fac then
55426: LD_VAR 0 5
55430: NOT
55431: IFFALSE 55435
// continue ;
55433: GO 55377
// for j in fac do
55435: LD_ADDR_VAR 0 3
55439: PUSH
55440: LD_VAR 0 5
55444: PUSH
55445: FOR_IN
55446: IFFALSE 55801
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
55448: LD_VAR 0 3
55452: PPUSH
55453: CALL_OW 461
55457: PUSH
55458: LD_INT 2
55460: NONEQUAL
55461: PUSH
55462: LD_VAR 0 3
55466: PPUSH
55467: LD_INT 15
55469: PPUSH
55470: CALL 11503 0 2
55474: PUSH
55475: LD_INT 4
55477: ARRAY
55478: OR
55479: IFFALSE 55483
// continue ;
55481: GO 55445
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
55483: LD_VAR 0 3
55487: PPUSH
55488: LD_EXP 34
55492: PUSH
55493: LD_VAR 0 2
55497: ARRAY
55498: PUSH
55499: LD_INT 1
55501: ARRAY
55502: PUSH
55503: LD_INT 1
55505: ARRAY
55506: PPUSH
55507: LD_EXP 34
55511: PUSH
55512: LD_VAR 0 2
55516: ARRAY
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PUSH
55522: LD_INT 2
55524: ARRAY
55525: PPUSH
55526: LD_EXP 34
55530: PUSH
55531: LD_VAR 0 2
55535: ARRAY
55536: PUSH
55537: LD_INT 1
55539: ARRAY
55540: PUSH
55541: LD_INT 3
55543: ARRAY
55544: PPUSH
55545: LD_EXP 34
55549: PUSH
55550: LD_VAR 0 2
55554: ARRAY
55555: PUSH
55556: LD_INT 1
55558: ARRAY
55559: PUSH
55560: LD_INT 4
55562: ARRAY
55563: PPUSH
55564: CALL_OW 448
55568: PUSH
55569: LD_VAR 0 3
55573: PPUSH
55574: LD_EXP 34
55578: PUSH
55579: LD_VAR 0 2
55583: ARRAY
55584: PUSH
55585: LD_INT 1
55587: ARRAY
55588: PUSH
55589: LD_INT 1
55591: ARRAY
55592: PUSH
55593: LD_EXP 34
55597: PUSH
55598: LD_VAR 0 2
55602: ARRAY
55603: PUSH
55604: LD_INT 1
55606: ARRAY
55607: PUSH
55608: LD_INT 2
55610: ARRAY
55611: PUSH
55612: LD_EXP 34
55616: PUSH
55617: LD_VAR 0 2
55621: ARRAY
55622: PUSH
55623: LD_INT 1
55625: ARRAY
55626: PUSH
55627: LD_INT 3
55629: ARRAY
55630: PUSH
55631: LD_EXP 34
55635: PUSH
55636: LD_VAR 0 2
55640: ARRAY
55641: PUSH
55642: LD_INT 1
55644: ARRAY
55645: PUSH
55646: LD_INT 4
55648: ARRAY
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: PPUSH
55656: CALL 15174 0 2
55660: AND
55661: IFFALSE 55799
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
55663: LD_VAR 0 3
55667: PPUSH
55668: LD_EXP 34
55672: PUSH
55673: LD_VAR 0 2
55677: ARRAY
55678: PUSH
55679: LD_INT 1
55681: ARRAY
55682: PUSH
55683: LD_INT 1
55685: ARRAY
55686: PPUSH
55687: LD_EXP 34
55691: PUSH
55692: LD_VAR 0 2
55696: ARRAY
55697: PUSH
55698: LD_INT 1
55700: ARRAY
55701: PUSH
55702: LD_INT 2
55704: ARRAY
55705: PPUSH
55706: LD_EXP 34
55710: PUSH
55711: LD_VAR 0 2
55715: ARRAY
55716: PUSH
55717: LD_INT 1
55719: ARRAY
55720: PUSH
55721: LD_INT 3
55723: ARRAY
55724: PPUSH
55725: LD_EXP 34
55729: PUSH
55730: LD_VAR 0 2
55734: ARRAY
55735: PUSH
55736: LD_INT 1
55738: ARRAY
55739: PUSH
55740: LD_INT 4
55742: ARRAY
55743: PPUSH
55744: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
55748: LD_ADDR_VAR 0 4
55752: PUSH
55753: LD_EXP 34
55757: PUSH
55758: LD_VAR 0 2
55762: ARRAY
55763: PPUSH
55764: LD_INT 1
55766: PPUSH
55767: CALL_OW 3
55771: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
55772: LD_ADDR_EXP 34
55776: PUSH
55777: LD_EXP 34
55781: PPUSH
55782: LD_VAR 0 2
55786: PPUSH
55787: LD_VAR 0 4
55791: PPUSH
55792: CALL_OW 1
55796: ST_TO_ADDR
// break ;
55797: GO 55801
// end ; end ;
55799: GO 55445
55801: POP
55802: POP
// end ;
55803: GO 55377
55805: POP
55806: POP
// end ;
55807: LD_VAR 0 1
55811: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
55812: LD_INT 0
55814: PPUSH
55815: PPUSH
55816: PPUSH
// if not mc_bases then
55817: LD_EXP 13
55821: NOT
55822: IFFALSE 55826
// exit ;
55824: GO 55915
// for i = 1 to mc_bases do
55826: LD_ADDR_VAR 0 2
55830: PUSH
55831: DOUBLE
55832: LD_INT 1
55834: DEC
55835: ST_TO_ADDR
55836: LD_EXP 13
55840: PUSH
55841: FOR_TO
55842: IFFALSE 55913
// begin if mc_attack [ i ] then
55844: LD_EXP 33
55848: PUSH
55849: LD_VAR 0 2
55853: ARRAY
55854: IFFALSE 55911
// begin tmp := mc_attack [ i ] [ 1 ] ;
55856: LD_ADDR_VAR 0 3
55860: PUSH
55861: LD_EXP 33
55865: PUSH
55866: LD_VAR 0 2
55870: ARRAY
55871: PUSH
55872: LD_INT 1
55874: ARRAY
55875: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55876: LD_ADDR_EXP 33
55880: PUSH
55881: LD_EXP 33
55885: PPUSH
55886: LD_VAR 0 2
55890: PPUSH
55891: EMPTY
55892: PPUSH
55893: CALL_OW 1
55897: ST_TO_ADDR
// Attack ( tmp ) ;
55898: LD_VAR 0 3
55902: PPUSH
55903: CALL 70451 0 1
// exit ;
55907: POP
55908: POP
55909: GO 55915
// end ; end ;
55911: GO 55841
55913: POP
55914: POP
// end ;
55915: LD_VAR 0 1
55919: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
55920: LD_INT 0
55922: PPUSH
55923: PPUSH
55924: PPUSH
55925: PPUSH
55926: PPUSH
55927: PPUSH
55928: PPUSH
// if not mc_bases then
55929: LD_EXP 13
55933: NOT
55934: IFFALSE 55938
// exit ;
55936: GO 56520
// for i = 1 to mc_bases do
55938: LD_ADDR_VAR 0 2
55942: PUSH
55943: DOUBLE
55944: LD_INT 1
55946: DEC
55947: ST_TO_ADDR
55948: LD_EXP 13
55952: PUSH
55953: FOR_TO
55954: IFFALSE 56518
// begin if not mc_bases [ i ] then
55956: LD_EXP 13
55960: PUSH
55961: LD_VAR 0 2
55965: ARRAY
55966: NOT
55967: IFFALSE 55971
// continue ;
55969: GO 55953
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
55971: LD_ADDR_VAR 0 7
55975: PUSH
55976: LD_EXP 13
55980: PUSH
55981: LD_VAR 0 2
55985: ARRAY
55986: PUSH
55987: LD_INT 1
55989: ARRAY
55990: PPUSH
55991: CALL 5746 0 1
55995: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
55996: LD_ADDR_EXP 36
56000: PUSH
56001: LD_EXP 36
56005: PPUSH
56006: LD_VAR 0 2
56010: PPUSH
56011: LD_EXP 13
56015: PUSH
56016: LD_VAR 0 2
56020: ARRAY
56021: PUSH
56022: LD_INT 1
56024: ARRAY
56025: PPUSH
56026: CALL_OW 255
56030: PPUSH
56031: LD_EXP 38
56035: PUSH
56036: LD_VAR 0 2
56040: ARRAY
56041: PPUSH
56042: CALL 5711 0 2
56046: PPUSH
56047: CALL_OW 1
56051: ST_TO_ADDR
// if not mc_scan [ i ] then
56052: LD_EXP 36
56056: PUSH
56057: LD_VAR 0 2
56061: ARRAY
56062: NOT
56063: IFFALSE 56218
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
56065: LD_ADDR_VAR 0 4
56069: PUSH
56070: LD_EXP 13
56074: PUSH
56075: LD_VAR 0 2
56079: ARRAY
56080: PPUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 25
56086: PUSH
56087: LD_INT 5
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 25
56096: PUSH
56097: LD_INT 8
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 25
56106: PUSH
56107: LD_INT 9
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: PPUSH
56120: CALL_OW 72
56124: ST_TO_ADDR
// if not tmp then
56125: LD_VAR 0 4
56129: NOT
56130: IFFALSE 56134
// continue ;
56132: GO 55953
// for j in tmp do
56134: LD_ADDR_VAR 0 3
56138: PUSH
56139: LD_VAR 0 4
56143: PUSH
56144: FOR_IN
56145: IFFALSE 56216
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
56147: LD_VAR 0 3
56151: PPUSH
56152: CALL_OW 310
56156: PPUSH
56157: CALL_OW 266
56161: PUSH
56162: LD_INT 5
56164: EQUAL
56165: PUSH
56166: LD_VAR 0 3
56170: PPUSH
56171: CALL_OW 257
56175: PUSH
56176: LD_INT 1
56178: EQUAL
56179: AND
56180: PUSH
56181: LD_VAR 0 3
56185: PPUSH
56186: CALL_OW 459
56190: NOT
56191: AND
56192: PUSH
56193: LD_VAR 0 7
56197: AND
56198: IFFALSE 56214
// ComChangeProfession ( j , class ) ;
56200: LD_VAR 0 3
56204: PPUSH
56205: LD_VAR 0 7
56209: PPUSH
56210: CALL_OW 123
56214: GO 56144
56216: POP
56217: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
56218: LD_EXP 36
56222: PUSH
56223: LD_VAR 0 2
56227: ARRAY
56228: PUSH
56229: LD_EXP 35
56233: PUSH
56234: LD_VAR 0 2
56238: ARRAY
56239: NOT
56240: AND
56241: PUSH
56242: LD_EXP 13
56246: PUSH
56247: LD_VAR 0 2
56251: ARRAY
56252: PPUSH
56253: LD_INT 30
56255: PUSH
56256: LD_INT 32
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PPUSH
56263: CALL_OW 72
56267: NOT
56268: AND
56269: PUSH
56270: LD_EXP 13
56274: PUSH
56275: LD_VAR 0 2
56279: ARRAY
56280: PPUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 30
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 30
56296: PUSH
56297: LD_INT 5
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: LIST
56308: PPUSH
56309: CALL_OW 72
56313: NOT
56314: AND
56315: IFFALSE 56447
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
56317: LD_ADDR_VAR 0 4
56321: PUSH
56322: LD_EXP 13
56326: PUSH
56327: LD_VAR 0 2
56331: ARRAY
56332: PPUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 25
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 25
56348: PUSH
56349: LD_INT 5
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 25
56358: PUSH
56359: LD_INT 8
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 25
56368: PUSH
56369: LD_INT 9
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: PPUSH
56383: CALL_OW 72
56387: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
56388: LD_ADDR_VAR 0 4
56392: PUSH
56393: LD_VAR 0 4
56397: PUSH
56398: LD_VAR 0 4
56402: PPUSH
56403: LD_INT 18
56405: PPUSH
56406: CALL 37471 0 2
56410: DIFF
56411: ST_TO_ADDR
// if tmp then
56412: LD_VAR 0 4
56416: IFFALSE 56447
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
56418: LD_VAR 0 2
56422: PPUSH
56423: LD_VAR 0 4
56427: PPUSH
56428: LD_EXP 38
56432: PUSH
56433: LD_VAR 0 2
56437: ARRAY
56438: PPUSH
56439: CALL 75160 0 3
// exit ;
56443: POP
56444: POP
56445: GO 56520
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
56447: LD_EXP 36
56451: PUSH
56452: LD_VAR 0 2
56456: ARRAY
56457: PUSH
56458: LD_EXP 35
56462: PUSH
56463: LD_VAR 0 2
56467: ARRAY
56468: AND
56469: IFFALSE 56516
// begin tmp := mc_defender [ i ] ;
56471: LD_ADDR_VAR 0 4
56475: PUSH
56476: LD_EXP 35
56480: PUSH
56481: LD_VAR 0 2
56485: ARRAY
56486: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
56487: LD_VAR 0 2
56491: PPUSH
56492: LD_VAR 0 4
56496: PPUSH
56497: LD_EXP 36
56501: PUSH
56502: LD_VAR 0 2
56506: ARRAY
56507: PPUSH
56508: CALL 75721 0 3
// exit ;
56512: POP
56513: POP
56514: GO 56520
// end ; end ;
56516: GO 55953
56518: POP
56519: POP
// end ;
56520: LD_VAR 0 1
56524: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
56525: LD_INT 0
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
56535: PPUSH
56536: PPUSH
56537: PPUSH
// if not mc_bases then
56538: LD_EXP 13
56542: NOT
56543: IFFALSE 56547
// exit ;
56545: GO 57634
// for i = 1 to mc_bases do
56547: LD_ADDR_VAR 0 2
56551: PUSH
56552: DOUBLE
56553: LD_INT 1
56555: DEC
56556: ST_TO_ADDR
56557: LD_EXP 13
56561: PUSH
56562: FOR_TO
56563: IFFALSE 57632
// begin tmp := mc_lab [ i ] ;
56565: LD_ADDR_VAR 0 6
56569: PUSH
56570: LD_EXP 46
56574: PUSH
56575: LD_VAR 0 2
56579: ARRAY
56580: ST_TO_ADDR
// if not tmp then
56581: LD_VAR 0 6
56585: NOT
56586: IFFALSE 56590
// continue ;
56588: GO 56562
// idle_lab := 0 ;
56590: LD_ADDR_VAR 0 11
56594: PUSH
56595: LD_INT 0
56597: ST_TO_ADDR
// for j in tmp do
56598: LD_ADDR_VAR 0 3
56602: PUSH
56603: LD_VAR 0 6
56607: PUSH
56608: FOR_IN
56609: IFFALSE 57628
// begin researching := false ;
56611: LD_ADDR_VAR 0 10
56615: PUSH
56616: LD_INT 0
56618: ST_TO_ADDR
// side := GetSide ( j ) ;
56619: LD_ADDR_VAR 0 4
56623: PUSH
56624: LD_VAR 0 3
56628: PPUSH
56629: CALL_OW 255
56633: ST_TO_ADDR
// if not mc_tech [ side ] then
56634: LD_EXP 40
56638: PUSH
56639: LD_VAR 0 4
56643: ARRAY
56644: NOT
56645: IFFALSE 56649
// continue ;
56647: GO 56608
// if BuildingStatus ( j ) = bs_idle then
56649: LD_VAR 0 3
56653: PPUSH
56654: CALL_OW 461
56658: PUSH
56659: LD_INT 2
56661: EQUAL
56662: IFFALSE 56850
// begin if idle_lab and UnitsInside ( j ) < 6 then
56664: LD_VAR 0 11
56668: PUSH
56669: LD_VAR 0 3
56673: PPUSH
56674: CALL_OW 313
56678: PUSH
56679: LD_INT 6
56681: LESS
56682: AND
56683: IFFALSE 56754
// begin tmp2 := UnitsInside ( idle_lab ) ;
56685: LD_ADDR_VAR 0 9
56689: PUSH
56690: LD_VAR 0 11
56694: PPUSH
56695: CALL_OW 313
56699: ST_TO_ADDR
// if tmp2 then
56700: LD_VAR 0 9
56704: IFFALSE 56746
// for x in tmp2 do
56706: LD_ADDR_VAR 0 7
56710: PUSH
56711: LD_VAR 0 9
56715: PUSH
56716: FOR_IN
56717: IFFALSE 56744
// begin ComExitBuilding ( x ) ;
56719: LD_VAR 0 7
56723: PPUSH
56724: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
56728: LD_VAR 0 7
56732: PPUSH
56733: LD_VAR 0 3
56737: PPUSH
56738: CALL_OW 180
// end ;
56742: GO 56716
56744: POP
56745: POP
// idle_lab := 0 ;
56746: LD_ADDR_VAR 0 11
56750: PUSH
56751: LD_INT 0
56753: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
56754: LD_ADDR_VAR 0 5
56758: PUSH
56759: LD_EXP 40
56763: PUSH
56764: LD_VAR 0 4
56768: ARRAY
56769: PUSH
56770: FOR_IN
56771: IFFALSE 56831
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
56773: LD_VAR 0 3
56777: PPUSH
56778: LD_VAR 0 5
56782: PPUSH
56783: CALL_OW 430
56787: PUSH
56788: LD_VAR 0 4
56792: PPUSH
56793: LD_VAR 0 5
56797: PPUSH
56798: CALL 4816 0 2
56802: AND
56803: IFFALSE 56829
// begin researching := true ;
56805: LD_ADDR_VAR 0 10
56809: PUSH
56810: LD_INT 1
56812: ST_TO_ADDR
// ComResearch ( j , t ) ;
56813: LD_VAR 0 3
56817: PPUSH
56818: LD_VAR 0 5
56822: PPUSH
56823: CALL_OW 124
// break ;
56827: GO 56831
// end ;
56829: GO 56770
56831: POP
56832: POP
// if not researching then
56833: LD_VAR 0 10
56837: NOT
56838: IFFALSE 56850
// idle_lab := j ;
56840: LD_ADDR_VAR 0 11
56844: PUSH
56845: LD_VAR 0 3
56849: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
56850: LD_VAR 0 3
56854: PPUSH
56855: CALL_OW 461
56859: PUSH
56860: LD_INT 10
56862: EQUAL
56863: IFFALSE 57451
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
56865: LD_EXP 42
56869: PUSH
56870: LD_VAR 0 2
56874: ARRAY
56875: NOT
56876: PUSH
56877: LD_EXP 43
56881: PUSH
56882: LD_VAR 0 2
56886: ARRAY
56887: NOT
56888: AND
56889: PUSH
56890: LD_EXP 40
56894: PUSH
56895: LD_VAR 0 4
56899: ARRAY
56900: PUSH
56901: LD_INT 1
56903: GREATER
56904: AND
56905: IFFALSE 57036
// begin ComCancel ( j ) ;
56907: LD_VAR 0 3
56911: PPUSH
56912: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
56916: LD_ADDR_EXP 40
56920: PUSH
56921: LD_EXP 40
56925: PPUSH
56926: LD_VAR 0 4
56930: PPUSH
56931: LD_EXP 40
56935: PUSH
56936: LD_VAR 0 4
56940: ARRAY
56941: PPUSH
56942: LD_EXP 40
56946: PUSH
56947: LD_VAR 0 4
56951: ARRAY
56952: PUSH
56953: LD_INT 1
56955: MINUS
56956: PPUSH
56957: LD_EXP 40
56961: PUSH
56962: LD_VAR 0 4
56966: ARRAY
56967: PPUSH
56968: LD_INT 0
56970: PPUSH
56971: CALL 8328 0 4
56975: PPUSH
56976: CALL_OW 1
56980: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
56981: LD_ADDR_EXP 40
56985: PUSH
56986: LD_EXP 40
56990: PPUSH
56991: LD_VAR 0 4
56995: PPUSH
56996: LD_EXP 40
57000: PUSH
57001: LD_VAR 0 4
57005: ARRAY
57006: PPUSH
57007: LD_EXP 40
57011: PUSH
57012: LD_VAR 0 4
57016: ARRAY
57017: PPUSH
57018: LD_INT 1
57020: PPUSH
57021: LD_INT 0
57023: PPUSH
57024: CALL 8328 0 4
57028: PPUSH
57029: CALL_OW 1
57033: ST_TO_ADDR
// continue ;
57034: GO 56608
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
57036: LD_EXP 42
57040: PUSH
57041: LD_VAR 0 2
57045: ARRAY
57046: PUSH
57047: LD_EXP 43
57051: PUSH
57052: LD_VAR 0 2
57056: ARRAY
57057: NOT
57058: AND
57059: IFFALSE 57186
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
57061: LD_ADDR_EXP 43
57065: PUSH
57066: LD_EXP 43
57070: PPUSH
57071: LD_VAR 0 2
57075: PUSH
57076: LD_EXP 43
57080: PUSH
57081: LD_VAR 0 2
57085: ARRAY
57086: PUSH
57087: LD_INT 1
57089: PLUS
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PPUSH
57095: LD_EXP 42
57099: PUSH
57100: LD_VAR 0 2
57104: ARRAY
57105: PUSH
57106: LD_INT 1
57108: ARRAY
57109: PPUSH
57110: CALL 8910 0 3
57114: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
57115: LD_EXP 42
57119: PUSH
57120: LD_VAR 0 2
57124: ARRAY
57125: PUSH
57126: LD_INT 1
57128: ARRAY
57129: PPUSH
57130: LD_INT 112
57132: PPUSH
57133: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
57137: LD_ADDR_VAR 0 9
57141: PUSH
57142: LD_EXP 42
57146: PUSH
57147: LD_VAR 0 2
57151: ARRAY
57152: PPUSH
57153: LD_INT 1
57155: PPUSH
57156: CALL_OW 3
57160: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
57161: LD_ADDR_EXP 42
57165: PUSH
57166: LD_EXP 42
57170: PPUSH
57171: LD_VAR 0 2
57175: PPUSH
57176: LD_VAR 0 9
57180: PPUSH
57181: CALL_OW 1
57185: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
57186: LD_EXP 42
57190: PUSH
57191: LD_VAR 0 2
57195: ARRAY
57196: PUSH
57197: LD_EXP 43
57201: PUSH
57202: LD_VAR 0 2
57206: ARRAY
57207: AND
57208: PUSH
57209: LD_EXP 43
57213: PUSH
57214: LD_VAR 0 2
57218: ARRAY
57219: PUSH
57220: LD_INT 1
57222: ARRAY
57223: PPUSH
57224: CALL_OW 310
57228: NOT
57229: AND
57230: PUSH
57231: LD_VAR 0 3
57235: PPUSH
57236: CALL_OW 313
57240: PUSH
57241: LD_INT 6
57243: EQUAL
57244: AND
57245: IFFALSE 57301
// begin tmp2 := UnitsInside ( j ) ;
57247: LD_ADDR_VAR 0 9
57251: PUSH
57252: LD_VAR 0 3
57256: PPUSH
57257: CALL_OW 313
57261: ST_TO_ADDR
// if tmp2 = 6 then
57262: LD_VAR 0 9
57266: PUSH
57267: LD_INT 6
57269: EQUAL
57270: IFFALSE 57301
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
57272: LD_VAR 0 9
57276: PUSH
57277: LD_INT 1
57279: ARRAY
57280: PPUSH
57281: LD_INT 112
57283: PPUSH
57284: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
57288: LD_VAR 0 9
57292: PUSH
57293: LD_INT 1
57295: ARRAY
57296: PPUSH
57297: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
57301: LD_EXP 43
57305: PUSH
57306: LD_VAR 0 2
57310: ARRAY
57311: PUSH
57312: LD_EXP 43
57316: PUSH
57317: LD_VAR 0 2
57321: ARRAY
57322: PUSH
57323: LD_INT 1
57325: ARRAY
57326: PPUSH
57327: CALL_OW 314
57331: NOT
57332: AND
57333: PUSH
57334: LD_EXP 43
57338: PUSH
57339: LD_VAR 0 2
57343: ARRAY
57344: PUSH
57345: LD_INT 1
57347: ARRAY
57348: PPUSH
57349: CALL_OW 310
57353: NOT
57354: AND
57355: IFFALSE 57381
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
57357: LD_EXP 43
57361: PUSH
57362: LD_VAR 0 2
57366: ARRAY
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PPUSH
57372: LD_VAR 0 3
57376: PPUSH
57377: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
57381: LD_EXP 43
57385: PUSH
57386: LD_VAR 0 2
57390: ARRAY
57391: PUSH
57392: LD_INT 1
57394: ARRAY
57395: PPUSH
57396: CALL_OW 310
57400: PUSH
57401: LD_EXP 43
57405: PUSH
57406: LD_VAR 0 2
57410: ARRAY
57411: PUSH
57412: LD_INT 1
57414: ARRAY
57415: PPUSH
57416: CALL_OW 310
57420: PPUSH
57421: CALL_OW 461
57425: PUSH
57426: LD_INT 3
57428: NONEQUAL
57429: AND
57430: IFFALSE 57451
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
57432: LD_EXP 43
57436: PUSH
57437: LD_VAR 0 2
57441: ARRAY
57442: PUSH
57443: LD_INT 1
57445: ARRAY
57446: PPUSH
57447: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
57451: LD_VAR 0 3
57455: PPUSH
57456: CALL_OW 461
57460: PUSH
57461: LD_INT 6
57463: EQUAL
57464: PUSH
57465: LD_VAR 0 6
57469: PUSH
57470: LD_INT 1
57472: GREATER
57473: AND
57474: IFFALSE 57626
// begin sci := [ ] ;
57476: LD_ADDR_VAR 0 8
57480: PUSH
57481: EMPTY
57482: ST_TO_ADDR
// for x in ( tmp diff j ) do
57483: LD_ADDR_VAR 0 7
57487: PUSH
57488: LD_VAR 0 6
57492: PUSH
57493: LD_VAR 0 3
57497: DIFF
57498: PUSH
57499: FOR_IN
57500: IFFALSE 57552
// begin if sci = 6 then
57502: LD_VAR 0 8
57506: PUSH
57507: LD_INT 6
57509: EQUAL
57510: IFFALSE 57514
// break ;
57512: GO 57552
// if BuildingStatus ( x ) = bs_idle then
57514: LD_VAR 0 7
57518: PPUSH
57519: CALL_OW 461
57523: PUSH
57524: LD_INT 2
57526: EQUAL
57527: IFFALSE 57550
// sci := sci ^ UnitsInside ( x ) ;
57529: LD_ADDR_VAR 0 8
57533: PUSH
57534: LD_VAR 0 8
57538: PUSH
57539: LD_VAR 0 7
57543: PPUSH
57544: CALL_OW 313
57548: ADD
57549: ST_TO_ADDR
// end ;
57550: GO 57499
57552: POP
57553: POP
// if not sci then
57554: LD_VAR 0 8
57558: NOT
57559: IFFALSE 57563
// continue ;
57561: GO 56608
// for x in sci do
57563: LD_ADDR_VAR 0 7
57567: PUSH
57568: LD_VAR 0 8
57572: PUSH
57573: FOR_IN
57574: IFFALSE 57624
// if IsInUnit ( x ) and not HasTask ( x ) then
57576: LD_VAR 0 7
57580: PPUSH
57581: CALL_OW 310
57585: PUSH
57586: LD_VAR 0 7
57590: PPUSH
57591: CALL_OW 314
57595: NOT
57596: AND
57597: IFFALSE 57622
// begin ComExitBuilding ( x ) ;
57599: LD_VAR 0 7
57603: PPUSH
57604: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
57608: LD_VAR 0 7
57612: PPUSH
57613: LD_VAR 0 3
57617: PPUSH
57618: CALL_OW 180
// end ;
57622: GO 57573
57624: POP
57625: POP
// end ; end ;
57626: GO 56608
57628: POP
57629: POP
// end ;
57630: GO 56562
57632: POP
57633: POP
// end ;
57634: LD_VAR 0 1
57638: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
57639: LD_INT 0
57641: PPUSH
57642: PPUSH
// if not mc_bases then
57643: LD_EXP 13
57647: NOT
57648: IFFALSE 57652
// exit ;
57650: GO 57733
// for i = 1 to mc_bases do
57652: LD_ADDR_VAR 0 2
57656: PUSH
57657: DOUBLE
57658: LD_INT 1
57660: DEC
57661: ST_TO_ADDR
57662: LD_EXP 13
57666: PUSH
57667: FOR_TO
57668: IFFALSE 57731
// if mc_mines [ i ] and mc_miners [ i ] then
57670: LD_EXP 26
57674: PUSH
57675: LD_VAR 0 2
57679: ARRAY
57680: PUSH
57681: LD_EXP 27
57685: PUSH
57686: LD_VAR 0 2
57690: ARRAY
57691: AND
57692: IFFALSE 57729
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
57694: LD_EXP 27
57698: PUSH
57699: LD_VAR 0 2
57703: ARRAY
57704: PUSH
57705: LD_INT 1
57707: ARRAY
57708: PPUSH
57709: CALL_OW 255
57713: PPUSH
57714: LD_EXP 26
57718: PUSH
57719: LD_VAR 0 2
57723: ARRAY
57724: PPUSH
57725: CALL 5899 0 2
57729: GO 57667
57731: POP
57732: POP
// end ;
57733: LD_VAR 0 1
57737: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
57738: LD_INT 0
57740: PPUSH
57741: PPUSH
57742: PPUSH
57743: PPUSH
57744: PPUSH
57745: PPUSH
57746: PPUSH
57747: PPUSH
// if not mc_bases or not mc_parking then
57748: LD_EXP 13
57752: NOT
57753: PUSH
57754: LD_EXP 37
57758: NOT
57759: OR
57760: IFFALSE 57764
// exit ;
57762: GO 58463
// for i = 1 to mc_bases do
57764: LD_ADDR_VAR 0 2
57768: PUSH
57769: DOUBLE
57770: LD_INT 1
57772: DEC
57773: ST_TO_ADDR
57774: LD_EXP 13
57778: PUSH
57779: FOR_TO
57780: IFFALSE 58461
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
57782: LD_EXP 13
57786: PUSH
57787: LD_VAR 0 2
57791: ARRAY
57792: NOT
57793: PUSH
57794: LD_EXP 37
57798: PUSH
57799: LD_VAR 0 2
57803: ARRAY
57804: NOT
57805: OR
57806: IFFALSE 57810
// continue ;
57808: GO 57779
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
57810: LD_ADDR_VAR 0 5
57814: PUSH
57815: LD_EXP 13
57819: PUSH
57820: LD_VAR 0 2
57824: ARRAY
57825: PUSH
57826: LD_INT 1
57828: ARRAY
57829: PPUSH
57830: CALL_OW 255
57834: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
57835: LD_ADDR_VAR 0 6
57839: PUSH
57840: LD_EXP 13
57844: PUSH
57845: LD_VAR 0 2
57849: ARRAY
57850: PPUSH
57851: LD_INT 30
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PPUSH
57861: CALL_OW 72
57865: ST_TO_ADDR
// if not fac then
57866: LD_VAR 0 6
57870: NOT
57871: IFFALSE 57922
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57873: LD_ADDR_VAR 0 6
57877: PUSH
57878: LD_EXP 13
57882: PUSH
57883: LD_VAR 0 2
57887: ARRAY
57888: PPUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 30
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 30
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: PPUSH
57917: CALL_OW 72
57921: ST_TO_ADDR
// if not fac then
57922: LD_VAR 0 6
57926: NOT
57927: IFFALSE 57931
// continue ;
57929: GO 57779
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
57931: LD_ADDR_VAR 0 7
57935: PUSH
57936: LD_EXP 37
57940: PUSH
57941: LD_VAR 0 2
57945: ARRAY
57946: PPUSH
57947: LD_INT 22
57949: PUSH
57950: LD_VAR 0 5
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 21
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 24
57974: PUSH
57975: LD_INT 1000
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: PPUSH
57991: CALL_OW 70
57995: ST_TO_ADDR
// for j in fac do
57996: LD_ADDR_VAR 0 3
58000: PUSH
58001: LD_VAR 0 6
58005: PUSH
58006: FOR_IN
58007: IFFALSE 58088
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58009: LD_ADDR_VAR 0 7
58013: PUSH
58014: LD_VAR 0 7
58018: PUSH
58019: LD_INT 22
58021: PUSH
58022: LD_VAR 0 5
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 91
58033: PUSH
58034: LD_VAR 0 3
58038: PUSH
58039: LD_INT 15
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 21
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 24
58062: PUSH
58063: LD_INT 1000
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: PPUSH
58080: CALL_OW 69
58084: UNION
58085: ST_TO_ADDR
58086: GO 58006
58088: POP
58089: POP
// if not vehs then
58090: LD_VAR 0 7
58094: NOT
58095: IFFALSE 58121
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58097: LD_ADDR_EXP 25
58101: PUSH
58102: LD_EXP 25
58106: PPUSH
58107: LD_VAR 0 2
58111: PPUSH
58112: EMPTY
58113: PPUSH
58114: CALL_OW 1
58118: ST_TO_ADDR
// continue ;
58119: GO 57779
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58121: LD_ADDR_VAR 0 8
58125: PUSH
58126: LD_EXP 13
58130: PUSH
58131: LD_VAR 0 2
58135: ARRAY
58136: PPUSH
58137: LD_INT 30
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PPUSH
58147: CALL_OW 72
58151: ST_TO_ADDR
// if tmp then
58152: LD_VAR 0 8
58156: IFFALSE 58259
// begin for j in tmp do
58158: LD_ADDR_VAR 0 3
58162: PUSH
58163: LD_VAR 0 8
58167: PUSH
58168: FOR_IN
58169: IFFALSE 58257
// for k in UnitsInside ( j ) do
58171: LD_ADDR_VAR 0 4
58175: PUSH
58176: LD_VAR 0 3
58180: PPUSH
58181: CALL_OW 313
58185: PUSH
58186: FOR_IN
58187: IFFALSE 58253
// if k then
58189: LD_VAR 0 4
58193: IFFALSE 58251
// if not k in mc_repair_vehicle [ i ] then
58195: LD_VAR 0 4
58199: PUSH
58200: LD_EXP 25
58204: PUSH
58205: LD_VAR 0 2
58209: ARRAY
58210: IN
58211: NOT
58212: IFFALSE 58251
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
58214: LD_ADDR_EXP 25
58218: PUSH
58219: LD_EXP 25
58223: PPUSH
58224: LD_VAR 0 2
58228: PPUSH
58229: LD_EXP 25
58233: PUSH
58234: LD_VAR 0 2
58238: ARRAY
58239: PUSH
58240: LD_VAR 0 4
58244: UNION
58245: PPUSH
58246: CALL_OW 1
58250: ST_TO_ADDR
58251: GO 58186
58253: POP
58254: POP
58255: GO 58168
58257: POP
58258: POP
// end ; if not mc_repair_vehicle [ i ] then
58259: LD_EXP 25
58263: PUSH
58264: LD_VAR 0 2
58268: ARRAY
58269: NOT
58270: IFFALSE 58274
// continue ;
58272: GO 57779
// for j in mc_repair_vehicle [ i ] do
58274: LD_ADDR_VAR 0 3
58278: PUSH
58279: LD_EXP 25
58283: PUSH
58284: LD_VAR 0 2
58288: ARRAY
58289: PUSH
58290: FOR_IN
58291: IFFALSE 58457
// begin if GetClass ( j ) <> 3 then
58293: LD_VAR 0 3
58297: PPUSH
58298: CALL_OW 257
58302: PUSH
58303: LD_INT 3
58305: NONEQUAL
58306: IFFALSE 58347
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
58308: LD_ADDR_EXP 25
58312: PUSH
58313: LD_EXP 25
58317: PPUSH
58318: LD_VAR 0 2
58322: PPUSH
58323: LD_EXP 25
58327: PUSH
58328: LD_VAR 0 2
58332: ARRAY
58333: PUSH
58334: LD_VAR 0 3
58338: DIFF
58339: PPUSH
58340: CALL_OW 1
58344: ST_TO_ADDR
// continue ;
58345: GO 58290
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
58347: LD_VAR 0 3
58351: PPUSH
58352: CALL_OW 311
58356: NOT
58357: PUSH
58358: LD_VAR 0 3
58362: PUSH
58363: LD_EXP 16
58367: PUSH
58368: LD_VAR 0 2
58372: ARRAY
58373: PUSH
58374: LD_INT 1
58376: ARRAY
58377: IN
58378: NOT
58379: AND
58380: PUSH
58381: LD_VAR 0 3
58385: PUSH
58386: LD_EXP 16
58390: PUSH
58391: LD_VAR 0 2
58395: ARRAY
58396: PUSH
58397: LD_INT 2
58399: ARRAY
58400: IN
58401: NOT
58402: AND
58403: IFFALSE 58455
// begin if IsInUnit ( j ) then
58405: LD_VAR 0 3
58409: PPUSH
58410: CALL_OW 310
58414: IFFALSE 58425
// ComExitBuilding ( j ) ;
58416: LD_VAR 0 3
58420: PPUSH
58421: CALL_OW 122
// if not HasTask ( j ) then
58425: LD_VAR 0 3
58429: PPUSH
58430: CALL_OW 314
58434: NOT
58435: IFFALSE 58455
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
58437: LD_VAR 0 3
58441: PPUSH
58442: LD_VAR 0 7
58446: PUSH
58447: LD_INT 1
58449: ARRAY
58450: PPUSH
58451: CALL_OW 189
// end ; end ;
58455: GO 58290
58457: POP
58458: POP
// end ;
58459: GO 57779
58461: POP
58462: POP
// end ;
58463: LD_VAR 0 1
58467: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
58468: LD_INT 0
58470: PPUSH
58471: PPUSH
58472: PPUSH
58473: PPUSH
58474: PPUSH
58475: PPUSH
58476: PPUSH
58477: PPUSH
58478: PPUSH
58479: PPUSH
58480: PPUSH
// if not mc_bases then
58481: LD_EXP 13
58485: NOT
58486: IFFALSE 58490
// exit ;
58488: GO 59292
// for i = 1 to mc_bases do
58490: LD_ADDR_VAR 0 2
58494: PUSH
58495: DOUBLE
58496: LD_INT 1
58498: DEC
58499: ST_TO_ADDR
58500: LD_EXP 13
58504: PUSH
58505: FOR_TO
58506: IFFALSE 59290
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
58508: LD_EXP 41
58512: PUSH
58513: LD_VAR 0 2
58517: ARRAY
58518: NOT
58519: PUSH
58520: LD_EXP 16
58524: PUSH
58525: LD_VAR 0 2
58529: ARRAY
58530: PUSH
58531: LD_INT 1
58533: ARRAY
58534: OR
58535: PUSH
58536: LD_EXP 16
58540: PUSH
58541: LD_VAR 0 2
58545: ARRAY
58546: PUSH
58547: LD_INT 2
58549: ARRAY
58550: OR
58551: PUSH
58552: LD_EXP 39
58556: PUSH
58557: LD_VAR 0 2
58561: ARRAY
58562: PPUSH
58563: LD_INT 1
58565: PPUSH
58566: CALL_OW 325
58570: NOT
58571: OR
58572: PUSH
58573: LD_EXP 36
58577: PUSH
58578: LD_VAR 0 2
58582: ARRAY
58583: OR
58584: IFFALSE 58588
// continue ;
58586: GO 58505
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
58588: LD_ADDR_VAR 0 8
58592: PUSH
58593: LD_EXP 13
58597: PUSH
58598: LD_VAR 0 2
58602: ARRAY
58603: PPUSH
58604: LD_INT 25
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 50
58616: PUSH
58617: EMPTY
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: PUSH
58623: LD_INT 60
58625: PUSH
58626: EMPTY
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: LIST
58637: PPUSH
58638: CALL_OW 72
58642: PUSH
58643: LD_EXP 17
58647: PUSH
58648: LD_VAR 0 2
58652: ARRAY
58653: DIFF
58654: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58655: LD_ADDR_VAR 0 9
58659: PUSH
58660: LD_EXP 13
58664: PUSH
58665: LD_VAR 0 2
58669: ARRAY
58670: PPUSH
58671: LD_INT 2
58673: PUSH
58674: LD_INT 30
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 30
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: LIST
58698: PPUSH
58699: CALL_OW 72
58703: ST_TO_ADDR
// if not tmp or not dep then
58704: LD_VAR 0 8
58708: NOT
58709: PUSH
58710: LD_VAR 0 9
58714: NOT
58715: OR
58716: IFFALSE 58720
// continue ;
58718: GO 58505
// side := GetSide ( tmp [ 1 ] ) ;
58720: LD_ADDR_VAR 0 11
58724: PUSH
58725: LD_VAR 0 8
58729: PUSH
58730: LD_INT 1
58732: ARRAY
58733: PPUSH
58734: CALL_OW 255
58738: ST_TO_ADDR
// dep := dep [ 1 ] ;
58739: LD_ADDR_VAR 0 9
58743: PUSH
58744: LD_VAR 0 9
58748: PUSH
58749: LD_INT 1
58751: ARRAY
58752: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
58753: LD_ADDR_VAR 0 7
58757: PUSH
58758: LD_EXP 41
58762: PUSH
58763: LD_VAR 0 2
58767: ARRAY
58768: PPUSH
58769: LD_INT 22
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 25
58781: PUSH
58782: LD_INT 12
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PPUSH
58793: CALL_OW 70
58797: PUSH
58798: LD_INT 22
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 25
58810: PUSH
58811: LD_INT 12
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 91
58820: PUSH
58821: LD_VAR 0 9
58825: PUSH
58826: LD_INT 20
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: PPUSH
58839: CALL_OW 69
58843: UNION
58844: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
58845: LD_ADDR_VAR 0 10
58849: PUSH
58850: LD_EXP 41
58854: PUSH
58855: LD_VAR 0 2
58859: ARRAY
58860: PPUSH
58861: LD_INT 81
58863: PUSH
58864: LD_VAR 0 11
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PPUSH
58873: CALL_OW 70
58877: ST_TO_ADDR
// if not apes or danger_at_area then
58878: LD_VAR 0 7
58882: NOT
58883: PUSH
58884: LD_VAR 0 10
58888: OR
58889: IFFALSE 58939
// begin if mc_taming [ i ] then
58891: LD_EXP 44
58895: PUSH
58896: LD_VAR 0 2
58900: ARRAY
58901: IFFALSE 58937
// begin MC_Reset ( i , 121 ) ;
58903: LD_VAR 0 2
58907: PPUSH
58908: LD_INT 121
58910: PPUSH
58911: CALL 44390 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58915: LD_ADDR_EXP 44
58919: PUSH
58920: LD_EXP 44
58924: PPUSH
58925: LD_VAR 0 2
58929: PPUSH
58930: EMPTY
58931: PPUSH
58932: CALL_OW 1
58936: ST_TO_ADDR
// end ; continue ;
58937: GO 58505
// end ; for j in tmp do
58939: LD_ADDR_VAR 0 3
58943: PUSH
58944: LD_VAR 0 8
58948: PUSH
58949: FOR_IN
58950: IFFALSE 59286
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
58952: LD_VAR 0 3
58956: PUSH
58957: LD_EXP 44
58961: PUSH
58962: LD_VAR 0 2
58966: ARRAY
58967: IN
58968: NOT
58969: PUSH
58970: LD_EXP 44
58974: PUSH
58975: LD_VAR 0 2
58979: ARRAY
58980: PUSH
58981: LD_INT 3
58983: LESS
58984: AND
58985: IFFALSE 59043
// begin SetTag ( j , 121 ) ;
58987: LD_VAR 0 3
58991: PPUSH
58992: LD_INT 121
58994: PPUSH
58995: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
58999: LD_ADDR_EXP 44
59003: PUSH
59004: LD_EXP 44
59008: PPUSH
59009: LD_VAR 0 2
59013: PUSH
59014: LD_EXP 44
59018: PUSH
59019: LD_VAR 0 2
59023: ARRAY
59024: PUSH
59025: LD_INT 1
59027: PLUS
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PPUSH
59033: LD_VAR 0 3
59037: PPUSH
59038: CALL 8910 0 3
59042: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
59043: LD_VAR 0 3
59047: PUSH
59048: LD_EXP 44
59052: PUSH
59053: LD_VAR 0 2
59057: ARRAY
59058: IN
59059: IFFALSE 59284
// begin if GetClass ( j ) <> 4 then
59061: LD_VAR 0 3
59065: PPUSH
59066: CALL_OW 257
59070: PUSH
59071: LD_INT 4
59073: NONEQUAL
59074: IFFALSE 59127
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
59076: LD_ADDR_EXP 44
59080: PUSH
59081: LD_EXP 44
59085: PPUSH
59086: LD_VAR 0 2
59090: PPUSH
59091: LD_EXP 44
59095: PUSH
59096: LD_VAR 0 2
59100: ARRAY
59101: PUSH
59102: LD_VAR 0 3
59106: DIFF
59107: PPUSH
59108: CALL_OW 1
59112: ST_TO_ADDR
// SetTag ( j , 0 ) ;
59113: LD_VAR 0 3
59117: PPUSH
59118: LD_INT 0
59120: PPUSH
59121: CALL_OW 109
// continue ;
59125: GO 58949
// end ; if IsInUnit ( j ) then
59127: LD_VAR 0 3
59131: PPUSH
59132: CALL_OW 310
59136: IFFALSE 59147
// ComExitBuilding ( j ) ;
59138: LD_VAR 0 3
59142: PPUSH
59143: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
59147: LD_ADDR_VAR 0 6
59151: PUSH
59152: LD_VAR 0 7
59156: PPUSH
59157: LD_VAR 0 3
59161: PPUSH
59162: CALL_OW 74
59166: ST_TO_ADDR
// if not ape then
59167: LD_VAR 0 6
59171: NOT
59172: IFFALSE 59176
// break ;
59174: GO 59286
// x := GetX ( ape ) ;
59176: LD_ADDR_VAR 0 4
59180: PUSH
59181: LD_VAR 0 6
59185: PPUSH
59186: CALL_OW 250
59190: ST_TO_ADDR
// y := GetY ( ape ) ;
59191: LD_ADDR_VAR 0 5
59195: PUSH
59196: LD_VAR 0 6
59200: PPUSH
59201: CALL_OW 251
59205: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59206: LD_VAR 0 4
59210: PPUSH
59211: LD_VAR 0 5
59215: PPUSH
59216: CALL_OW 488
59220: NOT
59221: PUSH
59222: LD_VAR 0 11
59226: PPUSH
59227: LD_VAR 0 4
59231: PPUSH
59232: LD_VAR 0 5
59236: PPUSH
59237: LD_INT 20
59239: PPUSH
59240: CALL 9806 0 4
59244: PUSH
59245: LD_INT 4
59247: ARRAY
59248: OR
59249: IFFALSE 59253
// break ;
59251: GO 59286
// if not HasTask ( j ) then
59253: LD_VAR 0 3
59257: PPUSH
59258: CALL_OW 314
59262: NOT
59263: IFFALSE 59284
// ComTameXY ( j , x , y ) ;
59265: LD_VAR 0 3
59269: PPUSH
59270: LD_VAR 0 4
59274: PPUSH
59275: LD_VAR 0 5
59279: PPUSH
59280: CALL_OW 131
// end ; end ;
59284: GO 58949
59286: POP
59287: POP
// end ;
59288: GO 58505
59290: POP
59291: POP
// end ;
59292: LD_VAR 0 1
59296: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
59297: LD_INT 0
59299: PPUSH
59300: PPUSH
59301: PPUSH
59302: PPUSH
59303: PPUSH
59304: PPUSH
59305: PPUSH
59306: PPUSH
// if not mc_bases then
59307: LD_EXP 13
59311: NOT
59312: IFFALSE 59316
// exit ;
59314: GO 59942
// for i = 1 to mc_bases do
59316: LD_ADDR_VAR 0 2
59320: PUSH
59321: DOUBLE
59322: LD_INT 1
59324: DEC
59325: ST_TO_ADDR
59326: LD_EXP 13
59330: PUSH
59331: FOR_TO
59332: IFFALSE 59940
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
59334: LD_EXP 42
59338: PUSH
59339: LD_VAR 0 2
59343: ARRAY
59344: NOT
59345: PUSH
59346: LD_EXP 42
59350: PUSH
59351: LD_VAR 0 2
59355: ARRAY
59356: PPUSH
59357: LD_INT 25
59359: PUSH
59360: LD_INT 12
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PPUSH
59367: CALL_OW 72
59371: NOT
59372: OR
59373: IFFALSE 59377
// continue ;
59375: GO 59331
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
59377: LD_ADDR_VAR 0 5
59381: PUSH
59382: LD_EXP 42
59386: PUSH
59387: LD_VAR 0 2
59391: ARRAY
59392: PUSH
59393: LD_INT 1
59395: ARRAY
59396: PPUSH
59397: CALL_OW 255
59401: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
59402: LD_VAR 0 5
59406: PPUSH
59407: LD_INT 2
59409: PPUSH
59410: CALL_OW 325
59414: IFFALSE 59667
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
59416: LD_ADDR_VAR 0 4
59420: PUSH
59421: LD_EXP 42
59425: PUSH
59426: LD_VAR 0 2
59430: ARRAY
59431: PPUSH
59432: LD_INT 25
59434: PUSH
59435: LD_INT 16
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PPUSH
59442: CALL_OW 72
59446: ST_TO_ADDR
// if tmp < 6 then
59447: LD_VAR 0 4
59451: PUSH
59452: LD_INT 6
59454: LESS
59455: IFFALSE 59667
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59457: LD_ADDR_VAR 0 6
59461: PUSH
59462: LD_EXP 13
59466: PUSH
59467: LD_VAR 0 2
59471: ARRAY
59472: PPUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 30
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 30
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: PPUSH
59501: CALL_OW 72
59505: ST_TO_ADDR
// if depot then
59506: LD_VAR 0 6
59510: IFFALSE 59667
// begin selected := 0 ;
59512: LD_ADDR_VAR 0 7
59516: PUSH
59517: LD_INT 0
59519: ST_TO_ADDR
// for j in depot do
59520: LD_ADDR_VAR 0 3
59524: PUSH
59525: LD_VAR 0 6
59529: PUSH
59530: FOR_IN
59531: IFFALSE 59562
// begin if UnitsInside ( j ) < 6 then
59533: LD_VAR 0 3
59537: PPUSH
59538: CALL_OW 313
59542: PUSH
59543: LD_INT 6
59545: LESS
59546: IFFALSE 59560
// begin selected := j ;
59548: LD_ADDR_VAR 0 7
59552: PUSH
59553: LD_VAR 0 3
59557: ST_TO_ADDR
// break ;
59558: GO 59562
// end ; end ;
59560: GO 59530
59562: POP
59563: POP
// if selected then
59564: LD_VAR 0 7
59568: IFFALSE 59667
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
59570: LD_ADDR_VAR 0 3
59574: PUSH
59575: LD_EXP 42
59579: PUSH
59580: LD_VAR 0 2
59584: ARRAY
59585: PPUSH
59586: LD_INT 25
59588: PUSH
59589: LD_INT 12
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PPUSH
59596: CALL_OW 72
59600: PUSH
59601: FOR_IN
59602: IFFALSE 59665
// if not HasTask ( j ) then
59604: LD_VAR 0 3
59608: PPUSH
59609: CALL_OW 314
59613: NOT
59614: IFFALSE 59663
// begin if not IsInUnit ( j ) then
59616: LD_VAR 0 3
59620: PPUSH
59621: CALL_OW 310
59625: NOT
59626: IFFALSE 59642
// ComEnterUnit ( j , selected ) ;
59628: LD_VAR 0 3
59632: PPUSH
59633: LD_VAR 0 7
59637: PPUSH
59638: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
59642: LD_VAR 0 3
59646: PPUSH
59647: LD_INT 16
59649: PPUSH
59650: CALL_OW 183
// AddComExitBuilding ( j ) ;
59654: LD_VAR 0 3
59658: PPUSH
59659: CALL_OW 182
// end ;
59663: GO 59601
59665: POP
59666: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
59667: LD_VAR 0 5
59671: PPUSH
59672: LD_INT 11
59674: PPUSH
59675: CALL_OW 325
59679: IFFALSE 59938
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
59681: LD_ADDR_VAR 0 4
59685: PUSH
59686: LD_EXP 42
59690: PUSH
59691: LD_VAR 0 2
59695: ARRAY
59696: PPUSH
59697: LD_INT 25
59699: PUSH
59700: LD_INT 16
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PPUSH
59707: CALL_OW 72
59711: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
59712: LD_VAR 0 4
59716: PUSH
59717: LD_INT 6
59719: GREATEREQUAL
59720: PUSH
59721: LD_VAR 0 5
59725: PPUSH
59726: LD_INT 2
59728: PPUSH
59729: CALL_OW 325
59733: NOT
59734: OR
59735: IFFALSE 59938
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
59737: LD_ADDR_VAR 0 8
59741: PUSH
59742: LD_EXP 13
59746: PUSH
59747: LD_VAR 0 2
59751: ARRAY
59752: PPUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 30
59758: PUSH
59759: LD_INT 4
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 30
59768: PUSH
59769: LD_INT 5
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: PPUSH
59781: CALL_OW 72
59785: ST_TO_ADDR
// if barracks then
59786: LD_VAR 0 8
59790: IFFALSE 59938
// begin selected := 0 ;
59792: LD_ADDR_VAR 0 7
59796: PUSH
59797: LD_INT 0
59799: ST_TO_ADDR
// for j in barracks do
59800: LD_ADDR_VAR 0 3
59804: PUSH
59805: LD_VAR 0 8
59809: PUSH
59810: FOR_IN
59811: IFFALSE 59842
// begin if UnitsInside ( j ) < 6 then
59813: LD_VAR 0 3
59817: PPUSH
59818: CALL_OW 313
59822: PUSH
59823: LD_INT 6
59825: LESS
59826: IFFALSE 59840
// begin selected := j ;
59828: LD_ADDR_VAR 0 7
59832: PUSH
59833: LD_VAR 0 3
59837: ST_TO_ADDR
// break ;
59838: GO 59842
// end ; end ;
59840: GO 59810
59842: POP
59843: POP
// if selected then
59844: LD_VAR 0 7
59848: IFFALSE 59938
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
59850: LD_ADDR_VAR 0 3
59854: PUSH
59855: LD_EXP 42
59859: PUSH
59860: LD_VAR 0 2
59864: ARRAY
59865: PPUSH
59866: LD_INT 25
59868: PUSH
59869: LD_INT 12
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PPUSH
59876: CALL_OW 72
59880: PUSH
59881: FOR_IN
59882: IFFALSE 59936
// if not IsInUnit ( j ) and not HasTask ( j ) then
59884: LD_VAR 0 3
59888: PPUSH
59889: CALL_OW 310
59893: NOT
59894: PUSH
59895: LD_VAR 0 3
59899: PPUSH
59900: CALL_OW 314
59904: NOT
59905: AND
59906: IFFALSE 59934
// begin ComEnterUnit ( j , selected ) ;
59908: LD_VAR 0 3
59912: PPUSH
59913: LD_VAR 0 7
59917: PPUSH
59918: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
59922: LD_VAR 0 3
59926: PPUSH
59927: LD_INT 15
59929: PPUSH
59930: CALL_OW 183
// end ;
59934: GO 59881
59936: POP
59937: POP
// end ; end ; end ; end ; end ;
59938: GO 59331
59940: POP
59941: POP
// end ;
59942: LD_VAR 0 1
59946: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
59947: LD_INT 0
59949: PPUSH
59950: PPUSH
59951: PPUSH
59952: PPUSH
// if not mc_bases then
59953: LD_EXP 13
59957: NOT
59958: IFFALSE 59962
// exit ;
59960: GO 60140
// for i = 1 to mc_bases do
59962: LD_ADDR_VAR 0 2
59966: PUSH
59967: DOUBLE
59968: LD_INT 1
59970: DEC
59971: ST_TO_ADDR
59972: LD_EXP 13
59976: PUSH
59977: FOR_TO
59978: IFFALSE 60138
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
59980: LD_ADDR_VAR 0 4
59984: PUSH
59985: LD_EXP 13
59989: PUSH
59990: LD_VAR 0 2
59994: ARRAY
59995: PPUSH
59996: LD_INT 25
59998: PUSH
59999: LD_INT 9
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PPUSH
60006: CALL_OW 72
60010: ST_TO_ADDR
// if not tmp then
60011: LD_VAR 0 4
60015: NOT
60016: IFFALSE 60020
// continue ;
60018: GO 59977
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
60020: LD_EXP 39
60024: PUSH
60025: LD_VAR 0 2
60029: ARRAY
60030: PPUSH
60031: LD_INT 29
60033: PPUSH
60034: CALL_OW 325
60038: NOT
60039: PUSH
60040: LD_EXP 39
60044: PUSH
60045: LD_VAR 0 2
60049: ARRAY
60050: PPUSH
60051: LD_INT 28
60053: PPUSH
60054: CALL_OW 325
60058: NOT
60059: AND
60060: IFFALSE 60064
// continue ;
60062: GO 59977
// for j in tmp do
60064: LD_ADDR_VAR 0 3
60068: PUSH
60069: LD_VAR 0 4
60073: PUSH
60074: FOR_IN
60075: IFFALSE 60134
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
60077: LD_VAR 0 3
60081: PUSH
60082: LD_EXP 16
60086: PUSH
60087: LD_VAR 0 2
60091: ARRAY
60092: PUSH
60093: LD_INT 1
60095: ARRAY
60096: IN
60097: NOT
60098: PUSH
60099: LD_VAR 0 3
60103: PUSH
60104: LD_EXP 16
60108: PUSH
60109: LD_VAR 0 2
60113: ARRAY
60114: PUSH
60115: LD_INT 2
60117: ARRAY
60118: IN
60119: NOT
60120: AND
60121: IFFALSE 60132
// ComSpaceTimeShoot ( j ) ;
60123: LD_VAR 0 3
60127: PPUSH
60128: CALL 4907 0 1
60132: GO 60074
60134: POP
60135: POP
// end ;
60136: GO 59977
60138: POP
60139: POP
// end ;
60140: LD_VAR 0 1
60144: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
60145: LD_INT 0
60147: PPUSH
60148: PPUSH
60149: PPUSH
60150: PPUSH
60151: PPUSH
60152: PPUSH
60153: PPUSH
60154: PPUSH
60155: PPUSH
// if not mc_bases then
60156: LD_EXP 13
60160: NOT
60161: IFFALSE 60165
// exit ;
60163: GO 60787
// for i = 1 to mc_bases do
60165: LD_ADDR_VAR 0 2
60169: PUSH
60170: DOUBLE
60171: LD_INT 1
60173: DEC
60174: ST_TO_ADDR
60175: LD_EXP 13
60179: PUSH
60180: FOR_TO
60181: IFFALSE 60785
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
60183: LD_EXP 48
60187: PUSH
60188: LD_VAR 0 2
60192: ARRAY
60193: NOT
60194: PUSH
60195: LD_INT 38
60197: PPUSH
60198: LD_EXP 39
60202: PUSH
60203: LD_VAR 0 2
60207: ARRAY
60208: PPUSH
60209: CALL_OW 321
60213: PUSH
60214: LD_INT 2
60216: NONEQUAL
60217: OR
60218: IFFALSE 60222
// continue ;
60220: GO 60180
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
60222: LD_ADDR_VAR 0 8
60226: PUSH
60227: LD_EXP 13
60231: PUSH
60232: LD_VAR 0 2
60236: ARRAY
60237: PPUSH
60238: LD_INT 30
60240: PUSH
60241: LD_INT 34
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PPUSH
60248: CALL_OW 72
60252: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
60253: LD_ADDR_VAR 0 9
60257: PUSH
60258: LD_EXP 13
60262: PUSH
60263: LD_VAR 0 2
60267: ARRAY
60268: PPUSH
60269: LD_INT 25
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PPUSH
60279: CALL_OW 72
60283: PPUSH
60284: LD_INT 0
60286: PPUSH
60287: CALL 37471 0 2
60291: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
60292: LD_VAR 0 9
60296: NOT
60297: PUSH
60298: LD_VAR 0 8
60302: NOT
60303: OR
60304: PUSH
60305: LD_EXP 13
60309: PUSH
60310: LD_VAR 0 2
60314: ARRAY
60315: PPUSH
60316: LD_INT 124
60318: PPUSH
60319: CALL 37471 0 2
60323: OR
60324: IFFALSE 60328
// continue ;
60326: GO 60180
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
60328: LD_EXP 49
60332: PUSH
60333: LD_VAR 0 2
60337: ARRAY
60338: PUSH
60339: LD_EXP 48
60343: PUSH
60344: LD_VAR 0 2
60348: ARRAY
60349: LESS
60350: PUSH
60351: LD_EXP 49
60355: PUSH
60356: LD_VAR 0 2
60360: ARRAY
60361: PUSH
60362: LD_VAR 0 8
60366: LESS
60367: AND
60368: IFFALSE 60783
// begin tmp := sci [ 1 ] ;
60370: LD_ADDR_VAR 0 7
60374: PUSH
60375: LD_VAR 0 9
60379: PUSH
60380: LD_INT 1
60382: ARRAY
60383: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
60384: LD_VAR 0 7
60388: PPUSH
60389: LD_INT 124
60391: PPUSH
60392: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
60396: LD_ADDR_VAR 0 3
60400: PUSH
60401: DOUBLE
60402: LD_EXP 48
60406: PUSH
60407: LD_VAR 0 2
60411: ARRAY
60412: INC
60413: ST_TO_ADDR
60414: LD_EXP 48
60418: PUSH
60419: LD_VAR 0 2
60423: ARRAY
60424: PUSH
60425: FOR_DOWNTO
60426: IFFALSE 60769
// begin if IsInUnit ( tmp ) then
60428: LD_VAR 0 7
60432: PPUSH
60433: CALL_OW 310
60437: IFFALSE 60448
// ComExitBuilding ( tmp ) ;
60439: LD_VAR 0 7
60443: PPUSH
60444: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
60448: LD_INT 35
60450: PPUSH
60451: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
60455: LD_VAR 0 7
60459: PPUSH
60460: CALL_OW 310
60464: NOT
60465: PUSH
60466: LD_VAR 0 7
60470: PPUSH
60471: CALL_OW 314
60475: NOT
60476: AND
60477: IFFALSE 60448
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
60479: LD_ADDR_VAR 0 6
60483: PUSH
60484: LD_VAR 0 7
60488: PPUSH
60489: CALL_OW 250
60493: PUSH
60494: LD_VAR 0 7
60498: PPUSH
60499: CALL_OW 251
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60508: LD_INT 35
60510: PPUSH
60511: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
60515: LD_ADDR_VAR 0 4
60519: PUSH
60520: LD_EXP 48
60524: PUSH
60525: LD_VAR 0 2
60529: ARRAY
60530: PUSH
60531: LD_VAR 0 3
60535: ARRAY
60536: PUSH
60537: LD_INT 1
60539: ARRAY
60540: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
60541: LD_ADDR_VAR 0 5
60545: PUSH
60546: LD_EXP 48
60550: PUSH
60551: LD_VAR 0 2
60555: ARRAY
60556: PUSH
60557: LD_VAR 0 3
60561: ARRAY
60562: PUSH
60563: LD_INT 2
60565: ARRAY
60566: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
60567: LD_VAR 0 7
60571: PPUSH
60572: LD_INT 10
60574: PPUSH
60575: CALL 11503 0 2
60579: PUSH
60580: LD_INT 4
60582: ARRAY
60583: IFFALSE 60621
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
60585: LD_VAR 0 7
60589: PPUSH
60590: LD_VAR 0 6
60594: PUSH
60595: LD_INT 1
60597: ARRAY
60598: PPUSH
60599: LD_VAR 0 6
60603: PUSH
60604: LD_INT 2
60606: ARRAY
60607: PPUSH
60608: CALL_OW 111
// wait ( 0 0$10 ) ;
60612: LD_INT 350
60614: PPUSH
60615: CALL_OW 67
// end else
60619: GO 60647
// begin ComMoveXY ( tmp , x , y ) ;
60621: LD_VAR 0 7
60625: PPUSH
60626: LD_VAR 0 4
60630: PPUSH
60631: LD_VAR 0 5
60635: PPUSH
60636: CALL_OW 111
// wait ( 0 0$3 ) ;
60640: LD_INT 105
60642: PPUSH
60643: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
60647: LD_VAR 0 7
60651: PPUSH
60652: LD_VAR 0 4
60656: PPUSH
60657: LD_VAR 0 5
60661: PPUSH
60662: CALL_OW 307
60666: IFFALSE 60508
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
60668: LD_VAR 0 7
60672: PPUSH
60673: LD_VAR 0 4
60677: PPUSH
60678: LD_VAR 0 5
60682: PPUSH
60683: LD_VAR 0 8
60687: PUSH
60688: LD_VAR 0 3
60692: ARRAY
60693: PPUSH
60694: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
60698: LD_INT 35
60700: PPUSH
60701: CALL_OW 67
// until not HasTask ( tmp ) ;
60705: LD_VAR 0 7
60709: PPUSH
60710: CALL_OW 314
60714: NOT
60715: IFFALSE 60698
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
60717: LD_ADDR_EXP 49
60721: PUSH
60722: LD_EXP 49
60726: PPUSH
60727: LD_VAR 0 2
60731: PUSH
60732: LD_EXP 49
60736: PUSH
60737: LD_VAR 0 2
60741: ARRAY
60742: PUSH
60743: LD_INT 1
60745: PLUS
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PPUSH
60751: LD_VAR 0 8
60755: PUSH
60756: LD_VAR 0 3
60760: ARRAY
60761: PPUSH
60762: CALL 8910 0 3
60766: ST_TO_ADDR
// end ;
60767: GO 60425
60769: POP
60770: POP
// MC_Reset ( i , 124 ) ;
60771: LD_VAR 0 2
60775: PPUSH
60776: LD_INT 124
60778: PPUSH
60779: CALL 44390 0 2
// end ; end ;
60783: GO 60180
60785: POP
60786: POP
// end ;
60787: LD_VAR 0 1
60791: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
60792: LD_INT 0
60794: PPUSH
60795: PPUSH
60796: PPUSH
// if not mc_bases then
60797: LD_EXP 13
60801: NOT
60802: IFFALSE 60806
// exit ;
60804: GO 61412
// for i = 1 to mc_bases do
60806: LD_ADDR_VAR 0 2
60810: PUSH
60811: DOUBLE
60812: LD_INT 1
60814: DEC
60815: ST_TO_ADDR
60816: LD_EXP 13
60820: PUSH
60821: FOR_TO
60822: IFFALSE 61410
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
60824: LD_ADDR_VAR 0 3
60828: PUSH
60829: LD_EXP 13
60833: PUSH
60834: LD_VAR 0 2
60838: ARRAY
60839: PPUSH
60840: LD_INT 25
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PPUSH
60850: CALL_OW 72
60854: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
60855: LD_VAR 0 3
60859: NOT
60860: PUSH
60861: LD_EXP 50
60865: PUSH
60866: LD_VAR 0 2
60870: ARRAY
60871: NOT
60872: OR
60873: PUSH
60874: LD_EXP 13
60878: PUSH
60879: LD_VAR 0 2
60883: ARRAY
60884: PPUSH
60885: LD_INT 2
60887: PUSH
60888: LD_INT 30
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 30
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: LIST
60912: PPUSH
60913: CALL_OW 72
60917: NOT
60918: OR
60919: IFFALSE 60969
// begin if mc_deposits_finder [ i ] then
60921: LD_EXP 51
60925: PUSH
60926: LD_VAR 0 2
60930: ARRAY
60931: IFFALSE 60967
// begin MC_Reset ( i , 125 ) ;
60933: LD_VAR 0 2
60937: PPUSH
60938: LD_INT 125
60940: PPUSH
60941: CALL 44390 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
60945: LD_ADDR_EXP 51
60949: PUSH
60950: LD_EXP 51
60954: PPUSH
60955: LD_VAR 0 2
60959: PPUSH
60960: EMPTY
60961: PPUSH
60962: CALL_OW 1
60966: ST_TO_ADDR
// end ; continue ;
60967: GO 60821
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
60969: LD_EXP 50
60973: PUSH
60974: LD_VAR 0 2
60978: ARRAY
60979: PUSH
60980: LD_INT 1
60982: ARRAY
60983: PUSH
60984: LD_INT 3
60986: ARRAY
60987: PUSH
60988: LD_INT 1
60990: EQUAL
60991: PUSH
60992: LD_INT 20
60994: PPUSH
60995: LD_EXP 39
60999: PUSH
61000: LD_VAR 0 2
61004: ARRAY
61005: PPUSH
61006: CALL_OW 321
61010: PUSH
61011: LD_INT 2
61013: NONEQUAL
61014: AND
61015: IFFALSE 61065
// begin if mc_deposits_finder [ i ] then
61017: LD_EXP 51
61021: PUSH
61022: LD_VAR 0 2
61026: ARRAY
61027: IFFALSE 61063
// begin MC_Reset ( i , 125 ) ;
61029: LD_VAR 0 2
61033: PPUSH
61034: LD_INT 125
61036: PPUSH
61037: CALL 44390 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61041: LD_ADDR_EXP 51
61045: PUSH
61046: LD_EXP 51
61050: PPUSH
61051: LD_VAR 0 2
61055: PPUSH
61056: EMPTY
61057: PPUSH
61058: CALL_OW 1
61062: ST_TO_ADDR
// end ; continue ;
61063: GO 60821
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
61065: LD_EXP 50
61069: PUSH
61070: LD_VAR 0 2
61074: ARRAY
61075: PUSH
61076: LD_INT 1
61078: ARRAY
61079: PUSH
61080: LD_INT 1
61082: ARRAY
61083: PPUSH
61084: LD_EXP 50
61088: PUSH
61089: LD_VAR 0 2
61093: ARRAY
61094: PUSH
61095: LD_INT 1
61097: ARRAY
61098: PUSH
61099: LD_INT 2
61101: ARRAY
61102: PPUSH
61103: LD_EXP 39
61107: PUSH
61108: LD_VAR 0 2
61112: ARRAY
61113: PPUSH
61114: CALL_OW 440
61118: IFFALSE 61161
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
61120: LD_ADDR_EXP 50
61124: PUSH
61125: LD_EXP 50
61129: PPUSH
61130: LD_VAR 0 2
61134: PPUSH
61135: LD_EXP 50
61139: PUSH
61140: LD_VAR 0 2
61144: ARRAY
61145: PPUSH
61146: LD_INT 1
61148: PPUSH
61149: CALL_OW 3
61153: PPUSH
61154: CALL_OW 1
61158: ST_TO_ADDR
61159: GO 61408
// begin if not mc_deposits_finder [ i ] then
61161: LD_EXP 51
61165: PUSH
61166: LD_VAR 0 2
61170: ARRAY
61171: NOT
61172: IFFALSE 61224
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
61174: LD_ADDR_EXP 51
61178: PUSH
61179: LD_EXP 51
61183: PPUSH
61184: LD_VAR 0 2
61188: PPUSH
61189: LD_VAR 0 3
61193: PUSH
61194: LD_INT 1
61196: ARRAY
61197: PUSH
61198: EMPTY
61199: LIST
61200: PPUSH
61201: CALL_OW 1
61205: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
61206: LD_VAR 0 3
61210: PUSH
61211: LD_INT 1
61213: ARRAY
61214: PPUSH
61215: LD_INT 125
61217: PPUSH
61218: CALL_OW 109
// end else
61222: GO 61408
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
61224: LD_EXP 51
61228: PUSH
61229: LD_VAR 0 2
61233: ARRAY
61234: PUSH
61235: LD_INT 1
61237: ARRAY
61238: PPUSH
61239: CALL_OW 310
61243: IFFALSE 61266
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
61245: LD_EXP 51
61249: PUSH
61250: LD_VAR 0 2
61254: ARRAY
61255: PUSH
61256: LD_INT 1
61258: ARRAY
61259: PPUSH
61260: CALL_OW 122
61264: GO 61408
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
61266: LD_EXP 51
61270: PUSH
61271: LD_VAR 0 2
61275: ARRAY
61276: PUSH
61277: LD_INT 1
61279: ARRAY
61280: PPUSH
61281: CALL_OW 314
61285: NOT
61286: PUSH
61287: LD_EXP 51
61291: PUSH
61292: LD_VAR 0 2
61296: ARRAY
61297: PUSH
61298: LD_INT 1
61300: ARRAY
61301: PPUSH
61302: LD_EXP 50
61306: PUSH
61307: LD_VAR 0 2
61311: ARRAY
61312: PUSH
61313: LD_INT 1
61315: ARRAY
61316: PUSH
61317: LD_INT 1
61319: ARRAY
61320: PPUSH
61321: LD_EXP 50
61325: PUSH
61326: LD_VAR 0 2
61330: ARRAY
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PUSH
61336: LD_INT 2
61338: ARRAY
61339: PPUSH
61340: CALL_OW 297
61344: PUSH
61345: LD_INT 6
61347: GREATER
61348: AND
61349: IFFALSE 61408
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
61351: LD_EXP 51
61355: PUSH
61356: LD_VAR 0 2
61360: ARRAY
61361: PUSH
61362: LD_INT 1
61364: ARRAY
61365: PPUSH
61366: LD_EXP 50
61370: PUSH
61371: LD_VAR 0 2
61375: ARRAY
61376: PUSH
61377: LD_INT 1
61379: ARRAY
61380: PUSH
61381: LD_INT 1
61383: ARRAY
61384: PPUSH
61385: LD_EXP 50
61389: PUSH
61390: LD_VAR 0 2
61394: ARRAY
61395: PUSH
61396: LD_INT 1
61398: ARRAY
61399: PUSH
61400: LD_INT 2
61402: ARRAY
61403: PPUSH
61404: CALL_OW 111
// end ; end ; end ;
61408: GO 60821
61410: POP
61411: POP
// end ;
61412: LD_VAR 0 1
61416: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
61417: LD_INT 0
61419: PPUSH
61420: PPUSH
61421: PPUSH
61422: PPUSH
61423: PPUSH
61424: PPUSH
61425: PPUSH
61426: PPUSH
61427: PPUSH
61428: PPUSH
61429: PPUSH
// if not mc_bases then
61430: LD_EXP 13
61434: NOT
61435: IFFALSE 61439
// exit ;
61437: GO 62379
// for i = 1 to mc_bases do
61439: LD_ADDR_VAR 0 2
61443: PUSH
61444: DOUBLE
61445: LD_INT 1
61447: DEC
61448: ST_TO_ADDR
61449: LD_EXP 13
61453: PUSH
61454: FOR_TO
61455: IFFALSE 62377
// begin if not mc_bases [ i ] or mc_scan [ i ] then
61457: LD_EXP 13
61461: PUSH
61462: LD_VAR 0 2
61466: ARRAY
61467: NOT
61468: PUSH
61469: LD_EXP 36
61473: PUSH
61474: LD_VAR 0 2
61478: ARRAY
61479: OR
61480: IFFALSE 61484
// continue ;
61482: GO 61454
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
61484: LD_ADDR_VAR 0 7
61488: PUSH
61489: LD_EXP 13
61493: PUSH
61494: LD_VAR 0 2
61498: ARRAY
61499: PUSH
61500: LD_INT 1
61502: ARRAY
61503: PPUSH
61504: CALL_OW 248
61508: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
61509: LD_VAR 0 7
61513: PUSH
61514: LD_INT 3
61516: EQUAL
61517: PUSH
61518: LD_EXP 32
61522: PUSH
61523: LD_VAR 0 2
61527: ARRAY
61528: PUSH
61529: LD_EXP 35
61533: PUSH
61534: LD_VAR 0 2
61538: ARRAY
61539: UNION
61540: PPUSH
61541: LD_INT 33
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PPUSH
61551: CALL_OW 72
61555: NOT
61556: OR
61557: IFFALSE 61561
// continue ;
61559: GO 61454
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
61561: LD_ADDR_VAR 0 9
61565: PUSH
61566: LD_EXP 13
61570: PUSH
61571: LD_VAR 0 2
61575: ARRAY
61576: PPUSH
61577: LD_INT 30
61579: PUSH
61580: LD_INT 36
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PPUSH
61587: CALL_OW 72
61591: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
61592: LD_ADDR_VAR 0 10
61596: PUSH
61597: LD_EXP 32
61601: PUSH
61602: LD_VAR 0 2
61606: ARRAY
61607: PPUSH
61608: LD_INT 34
61610: PUSH
61611: LD_INT 31
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PPUSH
61618: CALL_OW 72
61622: ST_TO_ADDR
// if not cts and not mcts then
61623: LD_VAR 0 9
61627: NOT
61628: PUSH
61629: LD_VAR 0 10
61633: NOT
61634: AND
61635: IFFALSE 61639
// continue ;
61637: GO 61454
// x := cts ;
61639: LD_ADDR_VAR 0 11
61643: PUSH
61644: LD_VAR 0 9
61648: ST_TO_ADDR
// if not x then
61649: LD_VAR 0 11
61653: NOT
61654: IFFALSE 61666
// x := mcts ;
61656: LD_ADDR_VAR 0 11
61660: PUSH
61661: LD_VAR 0 10
61665: ST_TO_ADDR
// if not x then
61666: LD_VAR 0 11
61670: NOT
61671: IFFALSE 61675
// continue ;
61673: GO 61454
// if mc_remote_driver [ i ] then
61675: LD_EXP 53
61679: PUSH
61680: LD_VAR 0 2
61684: ARRAY
61685: IFFALSE 62072
// for j in mc_remote_driver [ i ] do
61687: LD_ADDR_VAR 0 3
61691: PUSH
61692: LD_EXP 53
61696: PUSH
61697: LD_VAR 0 2
61701: ARRAY
61702: PUSH
61703: FOR_IN
61704: IFFALSE 62070
// begin if GetClass ( j ) <> 3 then
61706: LD_VAR 0 3
61710: PPUSH
61711: CALL_OW 257
61715: PUSH
61716: LD_INT 3
61718: NONEQUAL
61719: IFFALSE 61772
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
61721: LD_ADDR_EXP 53
61725: PUSH
61726: LD_EXP 53
61730: PPUSH
61731: LD_VAR 0 2
61735: PPUSH
61736: LD_EXP 53
61740: PUSH
61741: LD_VAR 0 2
61745: ARRAY
61746: PUSH
61747: LD_VAR 0 3
61751: DIFF
61752: PPUSH
61753: CALL_OW 1
61757: ST_TO_ADDR
// SetTag ( j , 0 ) ;
61758: LD_VAR 0 3
61762: PPUSH
61763: LD_INT 0
61765: PPUSH
61766: CALL_OW 109
// continue ;
61770: GO 61703
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
61772: LD_EXP 32
61776: PUSH
61777: LD_VAR 0 2
61781: ARRAY
61782: PPUSH
61783: LD_INT 34
61785: PUSH
61786: LD_INT 31
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 58
61795: PUSH
61796: EMPTY
61797: LIST
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PPUSH
61803: CALL_OW 72
61807: PUSH
61808: LD_VAR 0 3
61812: PPUSH
61813: CALL 37559 0 1
61817: NOT
61818: AND
61819: IFFALSE 61890
// begin if IsInUnit ( j ) then
61821: LD_VAR 0 3
61825: PPUSH
61826: CALL_OW 310
61830: IFFALSE 61841
// ComExitBuilding ( j ) ;
61832: LD_VAR 0 3
61836: PPUSH
61837: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
61841: LD_VAR 0 3
61845: PPUSH
61846: LD_EXP 32
61850: PUSH
61851: LD_VAR 0 2
61855: ARRAY
61856: PPUSH
61857: LD_INT 34
61859: PUSH
61860: LD_INT 31
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 58
61869: PUSH
61870: EMPTY
61871: LIST
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PPUSH
61877: CALL_OW 72
61881: PUSH
61882: LD_INT 1
61884: ARRAY
61885: PPUSH
61886: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
61890: LD_VAR 0 3
61894: PPUSH
61895: CALL_OW 310
61899: NOT
61900: PUSH
61901: LD_VAR 0 3
61905: PPUSH
61906: CALL_OW 310
61910: PPUSH
61911: CALL_OW 266
61915: PUSH
61916: LD_INT 36
61918: NONEQUAL
61919: PUSH
61920: LD_VAR 0 3
61924: PPUSH
61925: CALL 37559 0 1
61929: NOT
61930: AND
61931: OR
61932: IFFALSE 62068
// begin if IsInUnit ( j ) then
61934: LD_VAR 0 3
61938: PPUSH
61939: CALL_OW 310
61943: IFFALSE 61954
// ComExitBuilding ( j ) ;
61945: LD_VAR 0 3
61949: PPUSH
61950: CALL_OW 122
// ct := 0 ;
61954: LD_ADDR_VAR 0 8
61958: PUSH
61959: LD_INT 0
61961: ST_TO_ADDR
// for k in x do
61962: LD_ADDR_VAR 0 4
61966: PUSH
61967: LD_VAR 0 11
61971: PUSH
61972: FOR_IN
61973: IFFALSE 62046
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
61975: LD_VAR 0 4
61979: PPUSH
61980: CALL_OW 264
61984: PUSH
61985: LD_INT 31
61987: EQUAL
61988: PUSH
61989: LD_VAR 0 4
61993: PPUSH
61994: CALL_OW 311
61998: NOT
61999: AND
62000: PUSH
62001: LD_VAR 0 4
62005: PPUSH
62006: CALL_OW 266
62010: PUSH
62011: LD_INT 36
62013: EQUAL
62014: PUSH
62015: LD_VAR 0 4
62019: PPUSH
62020: CALL_OW 313
62024: PUSH
62025: LD_INT 3
62027: LESS
62028: AND
62029: OR
62030: IFFALSE 62044
// begin ct := k ;
62032: LD_ADDR_VAR 0 8
62036: PUSH
62037: LD_VAR 0 4
62041: ST_TO_ADDR
// break ;
62042: GO 62046
// end ;
62044: GO 61972
62046: POP
62047: POP
// if ct then
62048: LD_VAR 0 8
62052: IFFALSE 62068
// ComEnterUnit ( j , ct ) ;
62054: LD_VAR 0 3
62058: PPUSH
62059: LD_VAR 0 8
62063: PPUSH
62064: CALL_OW 120
// end ; end ;
62068: GO 61703
62070: POP
62071: POP
// places := 0 ;
62072: LD_ADDR_VAR 0 5
62076: PUSH
62077: LD_INT 0
62079: ST_TO_ADDR
// for j = 1 to x do
62080: LD_ADDR_VAR 0 3
62084: PUSH
62085: DOUBLE
62086: LD_INT 1
62088: DEC
62089: ST_TO_ADDR
62090: LD_VAR 0 11
62094: PUSH
62095: FOR_TO
62096: IFFALSE 62172
// if GetWeapon ( x [ j ] ) = ar_control_tower then
62098: LD_VAR 0 11
62102: PUSH
62103: LD_VAR 0 3
62107: ARRAY
62108: PPUSH
62109: CALL_OW 264
62113: PUSH
62114: LD_INT 31
62116: EQUAL
62117: IFFALSE 62135
// places := places + 1 else
62119: LD_ADDR_VAR 0 5
62123: PUSH
62124: LD_VAR 0 5
62128: PUSH
62129: LD_INT 1
62131: PLUS
62132: ST_TO_ADDR
62133: GO 62170
// if GetBType ( x [ j ] ) = b_control_tower then
62135: LD_VAR 0 11
62139: PUSH
62140: LD_VAR 0 3
62144: ARRAY
62145: PPUSH
62146: CALL_OW 266
62150: PUSH
62151: LD_INT 36
62153: EQUAL
62154: IFFALSE 62170
// places := places + 3 ;
62156: LD_ADDR_VAR 0 5
62160: PUSH
62161: LD_VAR 0 5
62165: PUSH
62166: LD_INT 3
62168: PLUS
62169: ST_TO_ADDR
62170: GO 62095
62172: POP
62173: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
62174: LD_VAR 0 5
62178: PUSH
62179: LD_INT 0
62181: EQUAL
62182: PUSH
62183: LD_VAR 0 5
62187: PUSH
62188: LD_EXP 53
62192: PUSH
62193: LD_VAR 0 2
62197: ARRAY
62198: LESSEQUAL
62199: OR
62200: IFFALSE 62204
// continue ;
62202: GO 61454
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
62204: LD_ADDR_VAR 0 6
62208: PUSH
62209: LD_EXP 13
62213: PUSH
62214: LD_VAR 0 2
62218: ARRAY
62219: PPUSH
62220: LD_INT 25
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PPUSH
62230: CALL_OW 72
62234: PUSH
62235: LD_EXP 53
62239: PUSH
62240: LD_VAR 0 2
62244: ARRAY
62245: DIFF
62246: PPUSH
62247: LD_INT 3
62249: PPUSH
62250: CALL 38459 0 2
62254: ST_TO_ADDR
// for j in tmp do
62255: LD_ADDR_VAR 0 3
62259: PUSH
62260: LD_VAR 0 6
62264: PUSH
62265: FOR_IN
62266: IFFALSE 62301
// if GetTag ( j ) > 0 then
62268: LD_VAR 0 3
62272: PPUSH
62273: CALL_OW 110
62277: PUSH
62278: LD_INT 0
62280: GREATER
62281: IFFALSE 62299
// tmp := tmp diff j ;
62283: LD_ADDR_VAR 0 6
62287: PUSH
62288: LD_VAR 0 6
62292: PUSH
62293: LD_VAR 0 3
62297: DIFF
62298: ST_TO_ADDR
62299: GO 62265
62301: POP
62302: POP
// if not tmp then
62303: LD_VAR 0 6
62307: NOT
62308: IFFALSE 62312
// continue ;
62310: GO 61454
// if places then
62312: LD_VAR 0 5
62316: IFFALSE 62375
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
62318: LD_ADDR_EXP 53
62322: PUSH
62323: LD_EXP 53
62327: PPUSH
62328: LD_VAR 0 2
62332: PPUSH
62333: LD_EXP 53
62337: PUSH
62338: LD_VAR 0 2
62342: ARRAY
62343: PUSH
62344: LD_VAR 0 6
62348: PUSH
62349: LD_INT 1
62351: ARRAY
62352: UNION
62353: PPUSH
62354: CALL_OW 1
62358: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
62359: LD_VAR 0 6
62363: PUSH
62364: LD_INT 1
62366: ARRAY
62367: PPUSH
62368: LD_INT 126
62370: PPUSH
62371: CALL_OW 109
// end ; end ;
62375: GO 61454
62377: POP
62378: POP
// end ;
62379: LD_VAR 0 1
62383: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
62384: LD_INT 0
62386: PPUSH
62387: PPUSH
62388: PPUSH
62389: PPUSH
62390: PPUSH
62391: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
62392: LD_VAR 0 1
62396: NOT
62397: PUSH
62398: LD_VAR 0 2
62402: NOT
62403: OR
62404: PUSH
62405: LD_VAR 0 3
62409: NOT
62410: OR
62411: PUSH
62412: LD_VAR 0 4
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 4
62428: PUSH
62429: LD_INT 5
62431: PUSH
62432: LD_INT 8
62434: PUSH
62435: LD_INT 9
62437: PUSH
62438: LD_INT 15
62440: PUSH
62441: LD_INT 16
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: IN
62455: NOT
62456: OR
62457: IFFALSE 62461
// exit ;
62459: GO 63361
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
62461: LD_ADDR_VAR 0 2
62465: PUSH
62466: LD_VAR 0 2
62470: PPUSH
62471: LD_INT 21
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 24
62483: PUSH
62484: LD_INT 250
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PPUSH
62495: CALL_OW 72
62499: ST_TO_ADDR
// case class of 1 , 15 :
62500: LD_VAR 0 4
62504: PUSH
62505: LD_INT 1
62507: DOUBLE
62508: EQUAL
62509: IFTRUE 62519
62511: LD_INT 15
62513: DOUBLE
62514: EQUAL
62515: IFTRUE 62519
62517: GO 62604
62519: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
62520: LD_ADDR_VAR 0 8
62524: PUSH
62525: LD_VAR 0 2
62529: PPUSH
62530: LD_INT 2
62532: PUSH
62533: LD_INT 30
62535: PUSH
62536: LD_INT 32
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 30
62545: PUSH
62546: LD_INT 31
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: PPUSH
62558: CALL_OW 72
62562: PUSH
62563: LD_VAR 0 2
62567: PPUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 30
62573: PUSH
62574: LD_INT 4
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 30
62583: PUSH
62584: LD_INT 5
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: PPUSH
62596: CALL_OW 72
62600: ADD
62601: ST_TO_ADDR
62602: GO 62850
62604: LD_INT 2
62606: DOUBLE
62607: EQUAL
62608: IFTRUE 62618
62610: LD_INT 16
62612: DOUBLE
62613: EQUAL
62614: IFTRUE 62618
62616: GO 62664
62618: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
62619: LD_ADDR_VAR 0 8
62623: PUSH
62624: LD_VAR 0 2
62628: PPUSH
62629: LD_INT 2
62631: PUSH
62632: LD_INT 30
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 30
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: PPUSH
62657: CALL_OW 72
62661: ST_TO_ADDR
62662: GO 62850
62664: LD_INT 3
62666: DOUBLE
62667: EQUAL
62668: IFTRUE 62672
62670: GO 62718
62672: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
62673: LD_ADDR_VAR 0 8
62677: PUSH
62678: LD_VAR 0 2
62682: PPUSH
62683: LD_INT 2
62685: PUSH
62686: LD_INT 30
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 30
62698: PUSH
62699: LD_INT 3
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: LIST
62710: PPUSH
62711: CALL_OW 72
62715: ST_TO_ADDR
62716: GO 62850
62718: LD_INT 4
62720: DOUBLE
62721: EQUAL
62722: IFTRUE 62726
62724: GO 62783
62726: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
62727: LD_ADDR_VAR 0 8
62731: PUSH
62732: LD_VAR 0 2
62736: PPUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 30
62742: PUSH
62743: LD_INT 6
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 30
62752: PUSH
62753: LD_INT 7
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 30
62762: PUSH
62763: LD_INT 8
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: PPUSH
62776: CALL_OW 72
62780: ST_TO_ADDR
62781: GO 62850
62783: LD_INT 5
62785: DOUBLE
62786: EQUAL
62787: IFTRUE 62803
62789: LD_INT 8
62791: DOUBLE
62792: EQUAL
62793: IFTRUE 62803
62795: LD_INT 9
62797: DOUBLE
62798: EQUAL
62799: IFTRUE 62803
62801: GO 62849
62803: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
62804: LD_ADDR_VAR 0 8
62808: PUSH
62809: LD_VAR 0 2
62813: PPUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 30
62819: PUSH
62820: LD_INT 4
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 30
62829: PUSH
62830: LD_INT 5
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: PPUSH
62842: CALL_OW 72
62846: ST_TO_ADDR
62847: GO 62850
62849: POP
// if not tmp then
62850: LD_VAR 0 8
62854: NOT
62855: IFFALSE 62859
// exit ;
62857: GO 63361
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
62859: LD_VAR 0 4
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 15
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: IN
62874: PUSH
62875: LD_EXP 22
62879: PUSH
62880: LD_VAR 0 1
62884: ARRAY
62885: AND
62886: IFFALSE 63042
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
62888: LD_ADDR_VAR 0 9
62892: PUSH
62893: LD_EXP 22
62897: PUSH
62898: LD_VAR 0 1
62902: ARRAY
62903: PUSH
62904: LD_INT 1
62906: ARRAY
62907: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
62908: LD_VAR 0 9
62912: PUSH
62913: LD_EXP 23
62917: PUSH
62918: LD_VAR 0 1
62922: ARRAY
62923: IN
62924: NOT
62925: IFFALSE 63040
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
62927: LD_ADDR_EXP 23
62931: PUSH
62932: LD_EXP 23
62936: PPUSH
62937: LD_VAR 0 1
62941: PUSH
62942: LD_EXP 23
62946: PUSH
62947: LD_VAR 0 1
62951: ARRAY
62952: PUSH
62953: LD_INT 1
62955: PLUS
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PPUSH
62961: LD_VAR 0 9
62965: PPUSH
62966: CALL 8910 0 3
62970: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
62971: LD_ADDR_EXP 22
62975: PUSH
62976: LD_EXP 22
62980: PPUSH
62981: LD_VAR 0 1
62985: PPUSH
62986: LD_EXP 22
62990: PUSH
62991: LD_VAR 0 1
62995: ARRAY
62996: PUSH
62997: LD_VAR 0 9
63001: DIFF
63002: PPUSH
63003: CALL_OW 1
63007: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
63008: LD_VAR 0 3
63012: PPUSH
63013: LD_EXP 23
63017: PUSH
63018: LD_VAR 0 1
63022: ARRAY
63023: PUSH
63024: LD_EXP 23
63028: PUSH
63029: LD_VAR 0 1
63033: ARRAY
63034: ARRAY
63035: PPUSH
63036: CALL_OW 120
// end ; exit ;
63040: GO 63361
// end ; if tmp > 1 then
63042: LD_VAR 0 8
63046: PUSH
63047: LD_INT 1
63049: GREATER
63050: IFFALSE 63154
// for i = 2 to tmp do
63052: LD_ADDR_VAR 0 6
63056: PUSH
63057: DOUBLE
63058: LD_INT 2
63060: DEC
63061: ST_TO_ADDR
63062: LD_VAR 0 8
63066: PUSH
63067: FOR_TO
63068: IFFALSE 63152
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
63070: LD_VAR 0 8
63074: PUSH
63075: LD_VAR 0 6
63079: ARRAY
63080: PPUSH
63081: CALL_OW 461
63085: PUSH
63086: LD_INT 6
63088: EQUAL
63089: IFFALSE 63150
// begin x := tmp [ i ] ;
63091: LD_ADDR_VAR 0 9
63095: PUSH
63096: LD_VAR 0 8
63100: PUSH
63101: LD_VAR 0 6
63105: ARRAY
63106: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
63107: LD_ADDR_VAR 0 8
63111: PUSH
63112: LD_VAR 0 8
63116: PPUSH
63117: LD_VAR 0 6
63121: PPUSH
63122: CALL_OW 3
63126: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
63127: LD_ADDR_VAR 0 8
63131: PUSH
63132: LD_VAR 0 8
63136: PPUSH
63137: LD_INT 1
63139: PPUSH
63140: LD_VAR 0 9
63144: PPUSH
63145: CALL_OW 2
63149: ST_TO_ADDR
// end ;
63150: GO 63067
63152: POP
63153: POP
// for i in tmp do
63154: LD_ADDR_VAR 0 6
63158: PUSH
63159: LD_VAR 0 8
63163: PUSH
63164: FOR_IN
63165: IFFALSE 63234
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
63167: LD_VAR 0 6
63171: PPUSH
63172: CALL_OW 313
63176: PUSH
63177: LD_INT 6
63179: LESS
63180: PUSH
63181: LD_VAR 0 6
63185: PPUSH
63186: CALL_OW 266
63190: PUSH
63191: LD_INT 31
63193: PUSH
63194: LD_INT 32
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: IN
63201: NOT
63202: AND
63203: PUSH
63204: LD_VAR 0 6
63208: PPUSH
63209: CALL_OW 313
63213: PUSH
63214: LD_INT 0
63216: EQUAL
63217: OR
63218: IFFALSE 63232
// begin j := i ;
63220: LD_ADDR_VAR 0 7
63224: PUSH
63225: LD_VAR 0 6
63229: ST_TO_ADDR
// break ;
63230: GO 63234
// end ; end ;
63232: GO 63164
63234: POP
63235: POP
// if j then
63236: LD_VAR 0 7
63240: IFFALSE 63258
// ComEnterUnit ( unit , j ) else
63242: LD_VAR 0 3
63246: PPUSH
63247: LD_VAR 0 7
63251: PPUSH
63252: CALL_OW 120
63256: GO 63361
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63258: LD_ADDR_VAR 0 10
63262: PUSH
63263: LD_VAR 0 2
63267: PPUSH
63268: LD_INT 2
63270: PUSH
63271: LD_INT 30
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 30
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: PPUSH
63296: CALL_OW 72
63300: ST_TO_ADDR
// if depot then
63301: LD_VAR 0 10
63305: IFFALSE 63361
// begin depot := NearestUnitToUnit ( depot , unit ) ;
63307: LD_ADDR_VAR 0 10
63311: PUSH
63312: LD_VAR 0 10
63316: PPUSH
63317: LD_VAR 0 3
63321: PPUSH
63322: CALL_OW 74
63326: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
63327: LD_VAR 0 3
63331: PPUSH
63332: LD_VAR 0 10
63336: PPUSH
63337: CALL_OW 296
63341: PUSH
63342: LD_INT 10
63344: GREATER
63345: IFFALSE 63361
// ComStandNearbyBuilding ( unit , depot ) ;
63347: LD_VAR 0 3
63351: PPUSH
63352: LD_VAR 0 10
63356: PPUSH
63357: CALL 5524 0 2
// end ; end ; end ;
63361: LD_VAR 0 5
63365: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
63366: LD_INT 0
63368: PPUSH
63369: PPUSH
63370: PPUSH
63371: PPUSH
// if not mc_bases then
63372: LD_EXP 13
63376: NOT
63377: IFFALSE 63381
// exit ;
63379: GO 63620
// for i = 1 to mc_bases do
63381: LD_ADDR_VAR 0 2
63385: PUSH
63386: DOUBLE
63387: LD_INT 1
63389: DEC
63390: ST_TO_ADDR
63391: LD_EXP 13
63395: PUSH
63396: FOR_TO
63397: IFFALSE 63618
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
63399: LD_ADDR_VAR 0 4
63403: PUSH
63404: LD_EXP 13
63408: PUSH
63409: LD_VAR 0 2
63413: ARRAY
63414: PPUSH
63415: LD_INT 21
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PPUSH
63425: CALL_OW 72
63429: PUSH
63430: LD_EXP 42
63434: PUSH
63435: LD_VAR 0 2
63439: ARRAY
63440: UNION
63441: ST_TO_ADDR
// if not tmp then
63442: LD_VAR 0 4
63446: NOT
63447: IFFALSE 63451
// continue ;
63449: GO 63396
// for j in tmp do
63451: LD_ADDR_VAR 0 3
63455: PUSH
63456: LD_VAR 0 4
63460: PUSH
63461: FOR_IN
63462: IFFALSE 63614
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
63464: LD_VAR 0 3
63468: PPUSH
63469: CALL_OW 110
63473: NOT
63474: PUSH
63475: LD_VAR 0 3
63479: PPUSH
63480: CALL_OW 314
63484: NOT
63485: AND
63486: PUSH
63487: LD_VAR 0 3
63491: PPUSH
63492: CALL_OW 311
63496: NOT
63497: AND
63498: PUSH
63499: LD_VAR 0 3
63503: PPUSH
63504: CALL_OW 310
63508: NOT
63509: AND
63510: PUSH
63511: LD_VAR 0 3
63515: PUSH
63516: LD_EXP 16
63520: PUSH
63521: LD_VAR 0 2
63525: ARRAY
63526: PUSH
63527: LD_INT 1
63529: ARRAY
63530: IN
63531: NOT
63532: AND
63533: PUSH
63534: LD_VAR 0 3
63538: PUSH
63539: LD_EXP 16
63543: PUSH
63544: LD_VAR 0 2
63548: ARRAY
63549: PUSH
63550: LD_INT 2
63552: ARRAY
63553: IN
63554: NOT
63555: AND
63556: PUSH
63557: LD_VAR 0 3
63561: PUSH
63562: LD_EXP 25
63566: PUSH
63567: LD_VAR 0 2
63571: ARRAY
63572: IN
63573: NOT
63574: AND
63575: IFFALSE 63612
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
63577: LD_VAR 0 2
63581: PPUSH
63582: LD_EXP 13
63586: PUSH
63587: LD_VAR 0 2
63591: ARRAY
63592: PPUSH
63593: LD_VAR 0 3
63597: PPUSH
63598: LD_VAR 0 3
63602: PPUSH
63603: CALL_OW 257
63607: PPUSH
63608: CALL 62384 0 4
// end ;
63612: GO 63461
63614: POP
63615: POP
// end ;
63616: GO 63396
63618: POP
63619: POP
// end ;
63620: LD_VAR 0 1
63624: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
63625: LD_INT 0
63627: PPUSH
63628: PPUSH
63629: PPUSH
63630: PPUSH
63631: PPUSH
63632: PPUSH
// if not mc_bases [ base ] then
63633: LD_EXP 13
63637: PUSH
63638: LD_VAR 0 1
63642: ARRAY
63643: NOT
63644: IFFALSE 63648
// exit ;
63646: GO 63830
// tmp := [ ] ;
63648: LD_ADDR_VAR 0 6
63652: PUSH
63653: EMPTY
63654: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
63655: LD_ADDR_VAR 0 7
63659: PUSH
63660: LD_VAR 0 3
63664: PPUSH
63665: LD_INT 0
63667: PPUSH
63668: CALL_OW 517
63672: ST_TO_ADDR
// if not list then
63673: LD_VAR 0 7
63677: NOT
63678: IFFALSE 63682
// exit ;
63680: GO 63830
// for i = 1 to amount do
63682: LD_ADDR_VAR 0 5
63686: PUSH
63687: DOUBLE
63688: LD_INT 1
63690: DEC
63691: ST_TO_ADDR
63692: LD_VAR 0 2
63696: PUSH
63697: FOR_TO
63698: IFFALSE 63778
// begin x := rand ( 1 , list [ 1 ] ) ;
63700: LD_ADDR_VAR 0 8
63704: PUSH
63705: LD_INT 1
63707: PPUSH
63708: LD_VAR 0 7
63712: PUSH
63713: LD_INT 1
63715: ARRAY
63716: PPUSH
63717: CALL_OW 12
63721: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
63722: LD_ADDR_VAR 0 6
63726: PUSH
63727: LD_VAR 0 6
63731: PPUSH
63732: LD_VAR 0 5
63736: PPUSH
63737: LD_VAR 0 7
63741: PUSH
63742: LD_INT 1
63744: ARRAY
63745: PUSH
63746: LD_VAR 0 8
63750: ARRAY
63751: PUSH
63752: LD_VAR 0 7
63756: PUSH
63757: LD_INT 2
63759: ARRAY
63760: PUSH
63761: LD_VAR 0 8
63765: ARRAY
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PPUSH
63771: CALL_OW 1
63775: ST_TO_ADDR
// end ;
63776: GO 63697
63778: POP
63779: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
63780: LD_ADDR_EXP 26
63784: PUSH
63785: LD_EXP 26
63789: PPUSH
63790: LD_VAR 0 1
63794: PPUSH
63795: LD_VAR 0 6
63799: PPUSH
63800: CALL_OW 1
63804: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
63805: LD_ADDR_EXP 28
63809: PUSH
63810: LD_EXP 28
63814: PPUSH
63815: LD_VAR 0 1
63819: PPUSH
63820: LD_VAR 0 3
63824: PPUSH
63825: CALL_OW 1
63829: ST_TO_ADDR
// end ;
63830: LD_VAR 0 4
63834: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
63835: LD_INT 0
63837: PPUSH
// if not mc_bases [ base ] then
63838: LD_EXP 13
63842: PUSH
63843: LD_VAR 0 1
63847: ARRAY
63848: NOT
63849: IFFALSE 63853
// exit ;
63851: GO 63878
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
63853: LD_ADDR_EXP 18
63857: PUSH
63858: LD_EXP 18
63862: PPUSH
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_VAR 0 2
63872: PPUSH
63873: CALL_OW 1
63877: ST_TO_ADDR
// end ;
63878: LD_VAR 0 3
63882: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
63883: LD_INT 0
63885: PPUSH
// if not mc_bases [ base ] then
63886: LD_EXP 13
63890: PUSH
63891: LD_VAR 0 1
63895: ARRAY
63896: NOT
63897: IFFALSE 63901
// exit ;
63899: GO 63938
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
63901: LD_ADDR_EXP 18
63905: PUSH
63906: LD_EXP 18
63910: PPUSH
63911: LD_VAR 0 1
63915: PPUSH
63916: LD_EXP 18
63920: PUSH
63921: LD_VAR 0 1
63925: ARRAY
63926: PUSH
63927: LD_VAR 0 2
63931: UNION
63932: PPUSH
63933: CALL_OW 1
63937: ST_TO_ADDR
// end ;
63938: LD_VAR 0 3
63942: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
63943: LD_INT 0
63945: PPUSH
// if not mc_bases [ base ] then
63946: LD_EXP 13
63950: PUSH
63951: LD_VAR 0 1
63955: ARRAY
63956: NOT
63957: IFFALSE 63961
// exit ;
63959: GO 63986
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
63961: LD_ADDR_EXP 34
63965: PUSH
63966: LD_EXP 34
63970: PPUSH
63971: LD_VAR 0 1
63975: PPUSH
63976: LD_VAR 0 2
63980: PPUSH
63981: CALL_OW 1
63985: ST_TO_ADDR
// end ;
63986: LD_VAR 0 3
63990: RET
// export function MC_InsertProduceList ( base , components ) ; begin
63991: LD_INT 0
63993: PPUSH
// if not mc_bases [ base ] then
63994: LD_EXP 13
63998: PUSH
63999: LD_VAR 0 1
64003: ARRAY
64004: NOT
64005: IFFALSE 64009
// exit ;
64007: GO 64046
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
64009: LD_ADDR_EXP 34
64013: PUSH
64014: LD_EXP 34
64018: PPUSH
64019: LD_VAR 0 1
64023: PPUSH
64024: LD_EXP 34
64028: PUSH
64029: LD_VAR 0 1
64033: ARRAY
64034: PUSH
64035: LD_VAR 0 2
64039: ADD
64040: PPUSH
64041: CALL_OW 1
64045: ST_TO_ADDR
// end ;
64046: LD_VAR 0 3
64050: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
64051: LD_INT 0
64053: PPUSH
// if not mc_bases [ base ] then
64054: LD_EXP 13
64058: PUSH
64059: LD_VAR 0 1
64063: ARRAY
64064: NOT
64065: IFFALSE 64069
// exit ;
64067: GO 64123
// mc_defender := Replace ( mc_defender , base , deflist ) ;
64069: LD_ADDR_EXP 35
64073: PUSH
64074: LD_EXP 35
64078: PPUSH
64079: LD_VAR 0 1
64083: PPUSH
64084: LD_VAR 0 2
64088: PPUSH
64089: CALL_OW 1
64093: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
64094: LD_ADDR_EXP 24
64098: PUSH
64099: LD_EXP 24
64103: PPUSH
64104: LD_VAR 0 1
64108: PPUSH
64109: LD_VAR 0 2
64113: PUSH
64114: LD_INT 0
64116: PLUS
64117: PPUSH
64118: CALL_OW 1
64122: ST_TO_ADDR
// end ;
64123: LD_VAR 0 3
64127: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
64128: LD_INT 0
64130: PPUSH
// if not mc_bases [ base ] then
64131: LD_EXP 13
64135: PUSH
64136: LD_VAR 0 1
64140: ARRAY
64141: NOT
64142: IFFALSE 64146
// exit ;
64144: GO 64171
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
64146: LD_ADDR_EXP 24
64150: PUSH
64151: LD_EXP 24
64155: PPUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: LD_VAR 0 2
64165: PPUSH
64166: CALL_OW 1
64170: ST_TO_ADDR
// end ;
64171: LD_VAR 0 3
64175: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
64176: LD_INT 0
64178: PPUSH
64179: PPUSH
64180: PPUSH
64181: PPUSH
// if not mc_bases [ base ] then
64182: LD_EXP 13
64186: PUSH
64187: LD_VAR 0 1
64191: ARRAY
64192: NOT
64193: IFFALSE 64197
// exit ;
64195: GO 64262
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
64197: LD_ADDR_EXP 33
64201: PUSH
64202: LD_EXP 33
64206: PPUSH
64207: LD_VAR 0 1
64211: PUSH
64212: LD_EXP 33
64216: PUSH
64217: LD_VAR 0 1
64221: ARRAY
64222: PUSH
64223: LD_INT 1
64225: PLUS
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PPUSH
64231: LD_VAR 0 1
64235: PUSH
64236: LD_VAR 0 2
64240: PUSH
64241: LD_VAR 0 3
64245: PUSH
64246: LD_VAR 0 4
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: PPUSH
64257: CALL 8910 0 3
64261: ST_TO_ADDR
// end ;
64262: LD_VAR 0 5
64266: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
64267: LD_INT 0
64269: PPUSH
// if not mc_bases [ base ] then
64270: LD_EXP 13
64274: PUSH
64275: LD_VAR 0 1
64279: ARRAY
64280: NOT
64281: IFFALSE 64285
// exit ;
64283: GO 64310
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
64285: LD_ADDR_EXP 50
64289: PUSH
64290: LD_EXP 50
64294: PPUSH
64295: LD_VAR 0 1
64299: PPUSH
64300: LD_VAR 0 2
64304: PPUSH
64305: CALL_OW 1
64309: ST_TO_ADDR
// end ;
64310: LD_VAR 0 3
64314: RET
// export function MC_GetMinesField ( base ) ; begin
64315: LD_INT 0
64317: PPUSH
// result := mc_mines [ base ] ;
64318: LD_ADDR_VAR 0 2
64322: PUSH
64323: LD_EXP 26
64327: PUSH
64328: LD_VAR 0 1
64332: ARRAY
64333: ST_TO_ADDR
// end ;
64334: LD_VAR 0 2
64338: RET
// export function MC_GetProduceList ( base ) ; begin
64339: LD_INT 0
64341: PPUSH
// result := mc_produce [ base ] ;
64342: LD_ADDR_VAR 0 2
64346: PUSH
64347: LD_EXP 34
64351: PUSH
64352: LD_VAR 0 1
64356: ARRAY
64357: ST_TO_ADDR
// end ;
64358: LD_VAR 0 2
64362: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
64363: LD_INT 0
64365: PPUSH
64366: PPUSH
// if not mc_bases then
64367: LD_EXP 13
64371: NOT
64372: IFFALSE 64376
// exit ;
64374: GO 64441
// if mc_bases [ base ] then
64376: LD_EXP 13
64380: PUSH
64381: LD_VAR 0 1
64385: ARRAY
64386: IFFALSE 64441
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64388: LD_ADDR_VAR 0 3
64392: PUSH
64393: LD_EXP 13
64397: PUSH
64398: LD_VAR 0 1
64402: ARRAY
64403: PPUSH
64404: LD_INT 30
64406: PUSH
64407: LD_VAR 0 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PPUSH
64416: CALL_OW 72
64420: ST_TO_ADDR
// if result then
64421: LD_VAR 0 3
64425: IFFALSE 64441
// result := result [ 1 ] ;
64427: LD_ADDR_VAR 0 3
64431: PUSH
64432: LD_VAR 0 3
64436: PUSH
64437: LD_INT 1
64439: ARRAY
64440: ST_TO_ADDR
// end ; end ;
64441: LD_VAR 0 3
64445: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
64446: LD_INT 0
64448: PPUSH
64449: PPUSH
// if not mc_bases then
64450: LD_EXP 13
64454: NOT
64455: IFFALSE 64459
// exit ;
64457: GO 64504
// if mc_bases [ base ] then
64459: LD_EXP 13
64463: PUSH
64464: LD_VAR 0 1
64468: ARRAY
64469: IFFALSE 64504
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64471: LD_ADDR_VAR 0 3
64475: PUSH
64476: LD_EXP 13
64480: PUSH
64481: LD_VAR 0 1
64485: ARRAY
64486: PPUSH
64487: LD_INT 30
64489: PUSH
64490: LD_VAR 0 2
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PPUSH
64499: CALL_OW 72
64503: ST_TO_ADDR
// end ;
64504: LD_VAR 0 3
64508: RET
// export function MC_SetTame ( base , area ) ; begin
64509: LD_INT 0
64511: PPUSH
// if not mc_bases or not base then
64512: LD_EXP 13
64516: NOT
64517: PUSH
64518: LD_VAR 0 1
64522: NOT
64523: OR
64524: IFFALSE 64528
// exit ;
64526: GO 64553
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
64528: LD_ADDR_EXP 41
64532: PUSH
64533: LD_EXP 41
64537: PPUSH
64538: LD_VAR 0 1
64542: PPUSH
64543: LD_VAR 0 2
64547: PPUSH
64548: CALL_OW 1
64552: ST_TO_ADDR
// end ;
64553: LD_VAR 0 3
64557: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
64558: LD_INT 0
64560: PPUSH
64561: PPUSH
// if not mc_bases or not base then
64562: LD_EXP 13
64566: NOT
64567: PUSH
64568: LD_VAR 0 1
64572: NOT
64573: OR
64574: IFFALSE 64578
// exit ;
64576: GO 64680
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64578: LD_ADDR_VAR 0 4
64582: PUSH
64583: LD_EXP 13
64587: PUSH
64588: LD_VAR 0 1
64592: ARRAY
64593: PPUSH
64594: LD_INT 30
64596: PUSH
64597: LD_VAR 0 2
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PPUSH
64606: CALL_OW 72
64610: ST_TO_ADDR
// if not tmp then
64611: LD_VAR 0 4
64615: NOT
64616: IFFALSE 64620
// exit ;
64618: GO 64680
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
64620: LD_ADDR_EXP 45
64624: PUSH
64625: LD_EXP 45
64629: PPUSH
64630: LD_VAR 0 1
64634: PPUSH
64635: LD_EXP 45
64639: PUSH
64640: LD_VAR 0 1
64644: ARRAY
64645: PPUSH
64646: LD_EXP 45
64650: PUSH
64651: LD_VAR 0 1
64655: ARRAY
64656: PUSH
64657: LD_INT 1
64659: PLUS
64660: PPUSH
64661: LD_VAR 0 4
64665: PUSH
64666: LD_INT 1
64668: ARRAY
64669: PPUSH
64670: CALL_OW 2
64674: PPUSH
64675: CALL_OW 1
64679: ST_TO_ADDR
// end ;
64680: LD_VAR 0 3
64684: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
64685: LD_INT 0
64687: PPUSH
64688: PPUSH
// if not mc_bases or not base or not kinds then
64689: LD_EXP 13
64693: NOT
64694: PUSH
64695: LD_VAR 0 1
64699: NOT
64700: OR
64701: PUSH
64702: LD_VAR 0 2
64706: NOT
64707: OR
64708: IFFALSE 64712
// exit ;
64710: GO 64773
// for i in kinds do
64712: LD_ADDR_VAR 0 4
64716: PUSH
64717: LD_VAR 0 2
64721: PUSH
64722: FOR_IN
64723: IFFALSE 64771
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
64725: LD_ADDR_EXP 47
64729: PUSH
64730: LD_EXP 47
64734: PPUSH
64735: LD_VAR 0 1
64739: PUSH
64740: LD_EXP 47
64744: PUSH
64745: LD_VAR 0 1
64749: ARRAY
64750: PUSH
64751: LD_INT 1
64753: PLUS
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PPUSH
64759: LD_VAR 0 4
64763: PPUSH
64764: CALL 8910 0 3
64768: ST_TO_ADDR
64769: GO 64722
64771: POP
64772: POP
// end ;
64773: LD_VAR 0 3
64777: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
64778: LD_INT 0
64780: PPUSH
// if not mc_bases or not base or not areas then
64781: LD_EXP 13
64785: NOT
64786: PUSH
64787: LD_VAR 0 1
64791: NOT
64792: OR
64793: PUSH
64794: LD_VAR 0 2
64798: NOT
64799: OR
64800: IFFALSE 64804
// exit ;
64802: GO 64829
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
64804: LD_ADDR_EXP 31
64808: PUSH
64809: LD_EXP 31
64813: PPUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_VAR 0 2
64823: PPUSH
64824: CALL_OW 1
64828: ST_TO_ADDR
// end ;
64829: LD_VAR 0 3
64833: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
64834: LD_INT 0
64836: PPUSH
// if not mc_bases or not base or not teleports_exit then
64837: LD_EXP 13
64841: NOT
64842: PUSH
64843: LD_VAR 0 1
64847: NOT
64848: OR
64849: PUSH
64850: LD_VAR 0 2
64854: NOT
64855: OR
64856: IFFALSE 64860
// exit ;
64858: GO 64885
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
64860: LD_ADDR_EXP 48
64864: PUSH
64865: LD_EXP 48
64869: PPUSH
64870: LD_VAR 0 1
64874: PPUSH
64875: LD_VAR 0 2
64879: PPUSH
64880: CALL_OW 1
64884: ST_TO_ADDR
// end ;
64885: LD_VAR 0 3
64889: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
64890: LD_INT 0
64892: PPUSH
64893: PPUSH
64894: PPUSH
// if not mc_bases or not base or not ext_list then
64895: LD_EXP 13
64899: NOT
64900: PUSH
64901: LD_VAR 0 1
64905: NOT
64906: OR
64907: PUSH
64908: LD_VAR 0 5
64912: NOT
64913: OR
64914: IFFALSE 64918
// exit ;
64916: GO 65091
// tmp := GetFacExtXYD ( x , y , d ) ;
64918: LD_ADDR_VAR 0 8
64922: PUSH
64923: LD_VAR 0 2
64927: PPUSH
64928: LD_VAR 0 3
64932: PPUSH
64933: LD_VAR 0 4
64937: PPUSH
64938: CALL 37589 0 3
64942: ST_TO_ADDR
// if not tmp then
64943: LD_VAR 0 8
64947: NOT
64948: IFFALSE 64952
// exit ;
64950: GO 65091
// for i in tmp do
64952: LD_ADDR_VAR 0 7
64956: PUSH
64957: LD_VAR 0 8
64961: PUSH
64962: FOR_IN
64963: IFFALSE 65089
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
64965: LD_ADDR_EXP 18
64969: PUSH
64970: LD_EXP 18
64974: PPUSH
64975: LD_VAR 0 1
64979: PPUSH
64980: LD_EXP 18
64984: PUSH
64985: LD_VAR 0 1
64989: ARRAY
64990: PPUSH
64991: LD_EXP 18
64995: PUSH
64996: LD_VAR 0 1
65000: ARRAY
65001: PUSH
65002: LD_INT 1
65004: PLUS
65005: PPUSH
65006: LD_VAR 0 5
65010: PUSH
65011: LD_INT 1
65013: ARRAY
65014: PUSH
65015: LD_VAR 0 7
65019: PUSH
65020: LD_INT 1
65022: ARRAY
65023: PUSH
65024: LD_VAR 0 7
65028: PUSH
65029: LD_INT 2
65031: ARRAY
65032: PUSH
65033: LD_VAR 0 7
65037: PUSH
65038: LD_INT 3
65040: ARRAY
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: PPUSH
65048: CALL_OW 2
65052: PPUSH
65053: CALL_OW 1
65057: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
65058: LD_ADDR_VAR 0 5
65062: PUSH
65063: LD_VAR 0 5
65067: PPUSH
65068: LD_INT 1
65070: PPUSH
65071: CALL_OW 3
65075: ST_TO_ADDR
// if not ext_list then
65076: LD_VAR 0 5
65080: NOT
65081: IFFALSE 65087
// exit ;
65083: POP
65084: POP
65085: GO 65091
// end ;
65087: GO 64962
65089: POP
65090: POP
// end ;
65091: LD_VAR 0 6
65095: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
65096: LD_INT 0
65098: PPUSH
// if not mc_bases or not base or not weapon_list then
65099: LD_EXP 13
65103: NOT
65104: PUSH
65105: LD_VAR 0 1
65109: NOT
65110: OR
65111: PUSH
65112: LD_VAR 0 2
65116: NOT
65117: OR
65118: IFFALSE 65122
// exit ;
65120: GO 65147
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
65122: LD_ADDR_EXP 52
65126: PUSH
65127: LD_EXP 52
65131: PPUSH
65132: LD_VAR 0 1
65136: PPUSH
65137: LD_VAR 0 2
65141: PPUSH
65142: CALL_OW 1
65146: ST_TO_ADDR
// end ;
65147: LD_VAR 0 3
65151: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
65152: LD_INT 0
65154: PPUSH
// if not mc_bases or not base or not tech_list then
65155: LD_EXP 13
65159: NOT
65160: PUSH
65161: LD_VAR 0 1
65165: NOT
65166: OR
65167: PUSH
65168: LD_VAR 0 2
65172: NOT
65173: OR
65174: IFFALSE 65178
// exit ;
65176: GO 65203
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
65178: LD_ADDR_EXP 40
65182: PUSH
65183: LD_EXP 40
65187: PPUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: LD_VAR 0 2
65197: PPUSH
65198: CALL_OW 1
65202: ST_TO_ADDR
// end ;
65203: LD_VAR 0 3
65207: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
65208: LD_INT 0
65210: PPUSH
// if not mc_bases or not parking_area or not base then
65211: LD_EXP 13
65215: NOT
65216: PUSH
65217: LD_VAR 0 2
65221: NOT
65222: OR
65223: PUSH
65224: LD_VAR 0 1
65228: NOT
65229: OR
65230: IFFALSE 65234
// exit ;
65232: GO 65259
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
65234: LD_ADDR_EXP 37
65238: PUSH
65239: LD_EXP 37
65243: PPUSH
65244: LD_VAR 0 1
65248: PPUSH
65249: LD_VAR 0 2
65253: PPUSH
65254: CALL_OW 1
65258: ST_TO_ADDR
// end ;
65259: LD_VAR 0 3
65263: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
65264: LD_INT 0
65266: PPUSH
// if not mc_bases or not base or not scan_area then
65267: LD_EXP 13
65271: NOT
65272: PUSH
65273: LD_VAR 0 1
65277: NOT
65278: OR
65279: PUSH
65280: LD_VAR 0 2
65284: NOT
65285: OR
65286: IFFALSE 65290
// exit ;
65288: GO 65315
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
65290: LD_ADDR_EXP 38
65294: PUSH
65295: LD_EXP 38
65299: PPUSH
65300: LD_VAR 0 1
65304: PPUSH
65305: LD_VAR 0 2
65309: PPUSH
65310: CALL_OW 1
65314: ST_TO_ADDR
// end ;
65315: LD_VAR 0 3
65319: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
65320: LD_INT 0
65322: PPUSH
65323: PPUSH
// if not mc_bases or not base then
65324: LD_EXP 13
65328: NOT
65329: PUSH
65330: LD_VAR 0 1
65334: NOT
65335: OR
65336: IFFALSE 65340
// exit ;
65338: GO 65404
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
65340: LD_ADDR_VAR 0 3
65344: PUSH
65345: LD_INT 1
65347: PUSH
65348: LD_INT 2
65350: PUSH
65351: LD_INT 3
65353: PUSH
65354: LD_INT 4
65356: PUSH
65357: LD_INT 11
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
65367: LD_ADDR_EXP 40
65371: PUSH
65372: LD_EXP 40
65376: PPUSH
65377: LD_VAR 0 1
65381: PPUSH
65382: LD_EXP 40
65386: PUSH
65387: LD_VAR 0 1
65391: ARRAY
65392: PUSH
65393: LD_VAR 0 3
65397: DIFF
65398: PPUSH
65399: CALL_OW 1
65403: ST_TO_ADDR
// end ;
65404: LD_VAR 0 2
65408: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
65409: LD_INT 0
65411: PPUSH
// result := mc_vehicles [ base ] ;
65412: LD_ADDR_VAR 0 3
65416: PUSH
65417: LD_EXP 32
65421: PUSH
65422: LD_VAR 0 1
65426: ARRAY
65427: ST_TO_ADDR
// if onlyCombat then
65428: LD_VAR 0 2
65432: IFFALSE 65597
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
65434: LD_ADDR_VAR 0 3
65438: PUSH
65439: LD_VAR 0 3
65443: PUSH
65444: LD_VAR 0 3
65448: PPUSH
65449: LD_INT 2
65451: PUSH
65452: LD_INT 34
65454: PUSH
65455: LD_INT 12
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 34
65464: PUSH
65465: LD_INT 51
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 34
65474: PUSH
65475: LD_EXP 57
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 34
65486: PUSH
65487: LD_INT 32
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 34
65496: PUSH
65497: LD_INT 13
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 34
65506: PUSH
65507: LD_INT 52
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 34
65516: PUSH
65517: LD_INT 14
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 34
65526: PUSH
65527: LD_INT 53
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 34
65536: PUSH
65537: LD_EXP 56
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 34
65548: PUSH
65549: LD_INT 31
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 34
65558: PUSH
65559: LD_INT 48
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 34
65568: PUSH
65569: LD_INT 8
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: PPUSH
65591: CALL_OW 72
65595: DIFF
65596: ST_TO_ADDR
// end ; end_of_file
65597: LD_VAR 0 3
65601: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
65602: LD_INT 0
65604: PPUSH
65605: PPUSH
65606: PPUSH
// if not mc_bases or not skirmish then
65607: LD_EXP 13
65611: NOT
65612: PUSH
65613: LD_EXP 11
65617: NOT
65618: OR
65619: IFFALSE 65623
// exit ;
65621: GO 65788
// for i = 1 to mc_bases do
65623: LD_ADDR_VAR 0 4
65627: PUSH
65628: DOUBLE
65629: LD_INT 1
65631: DEC
65632: ST_TO_ADDR
65633: LD_EXP 13
65637: PUSH
65638: FOR_TO
65639: IFFALSE 65786
// begin if sci in mc_bases [ i ] then
65641: LD_VAR 0 2
65645: PUSH
65646: LD_EXP 13
65650: PUSH
65651: LD_VAR 0 4
65655: ARRAY
65656: IN
65657: IFFALSE 65784
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
65659: LD_ADDR_EXP 42
65663: PUSH
65664: LD_EXP 42
65668: PPUSH
65669: LD_VAR 0 4
65673: PUSH
65674: LD_EXP 42
65678: PUSH
65679: LD_VAR 0 4
65683: ARRAY
65684: PUSH
65685: LD_INT 1
65687: PLUS
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PPUSH
65693: LD_VAR 0 1
65697: PPUSH
65698: CALL 8910 0 3
65702: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
65703: LD_ADDR_VAR 0 5
65707: PUSH
65708: LD_EXP 13
65712: PUSH
65713: LD_VAR 0 4
65717: ARRAY
65718: PPUSH
65719: LD_INT 2
65721: PUSH
65722: LD_INT 30
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 30
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: PPUSH
65747: CALL_OW 72
65751: PPUSH
65752: LD_VAR 0 1
65756: PPUSH
65757: CALL_OW 74
65761: ST_TO_ADDR
// if tmp then
65762: LD_VAR 0 5
65766: IFFALSE 65782
// ComStandNearbyBuilding ( ape , tmp ) ;
65768: LD_VAR 0 1
65772: PPUSH
65773: LD_VAR 0 5
65777: PPUSH
65778: CALL 5524 0 2
// break ;
65782: GO 65786
// end ; end ;
65784: GO 65638
65786: POP
65787: POP
// end ;
65788: LD_VAR 0 3
65792: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
65793: LD_INT 0
65795: PPUSH
65796: PPUSH
65797: PPUSH
// if not mc_bases or not skirmish then
65798: LD_EXP 13
65802: NOT
65803: PUSH
65804: LD_EXP 11
65808: NOT
65809: OR
65810: IFFALSE 65814
// exit ;
65812: GO 65903
// for i = 1 to mc_bases do
65814: LD_ADDR_VAR 0 4
65818: PUSH
65819: DOUBLE
65820: LD_INT 1
65822: DEC
65823: ST_TO_ADDR
65824: LD_EXP 13
65828: PUSH
65829: FOR_TO
65830: IFFALSE 65901
// begin if building in mc_busy_turret_list [ i ] then
65832: LD_VAR 0 1
65836: PUSH
65837: LD_EXP 23
65841: PUSH
65842: LD_VAR 0 4
65846: ARRAY
65847: IN
65848: IFFALSE 65899
// begin tmp := mc_busy_turret_list [ i ] diff building ;
65850: LD_ADDR_VAR 0 5
65854: PUSH
65855: LD_EXP 23
65859: PUSH
65860: LD_VAR 0 4
65864: ARRAY
65865: PUSH
65866: LD_VAR 0 1
65870: DIFF
65871: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
65872: LD_ADDR_EXP 23
65876: PUSH
65877: LD_EXP 23
65881: PPUSH
65882: LD_VAR 0 4
65886: PPUSH
65887: LD_VAR 0 5
65891: PPUSH
65892: CALL_OW 1
65896: ST_TO_ADDR
// break ;
65897: GO 65901
// end ; end ;
65899: GO 65829
65901: POP
65902: POP
// end ;
65903: LD_VAR 0 3
65907: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
65908: LD_INT 0
65910: PPUSH
65911: PPUSH
65912: PPUSH
// if not mc_bases or not skirmish then
65913: LD_EXP 13
65917: NOT
65918: PUSH
65919: LD_EXP 11
65923: NOT
65924: OR
65925: IFFALSE 65929
// exit ;
65927: GO 66128
// for i = 1 to mc_bases do
65929: LD_ADDR_VAR 0 5
65933: PUSH
65934: DOUBLE
65935: LD_INT 1
65937: DEC
65938: ST_TO_ADDR
65939: LD_EXP 13
65943: PUSH
65944: FOR_TO
65945: IFFALSE 66126
// if building in mc_bases [ i ] then
65947: LD_VAR 0 1
65951: PUSH
65952: LD_EXP 13
65956: PUSH
65957: LD_VAR 0 5
65961: ARRAY
65962: IN
65963: IFFALSE 66124
// begin tmp := mc_bases [ i ] diff building ;
65965: LD_ADDR_VAR 0 6
65969: PUSH
65970: LD_EXP 13
65974: PUSH
65975: LD_VAR 0 5
65979: ARRAY
65980: PUSH
65981: LD_VAR 0 1
65985: DIFF
65986: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
65987: LD_ADDR_EXP 13
65991: PUSH
65992: LD_EXP 13
65996: PPUSH
65997: LD_VAR 0 5
66001: PPUSH
66002: LD_VAR 0 6
66006: PPUSH
66007: CALL_OW 1
66011: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
66012: LD_VAR 0 1
66016: PUSH
66017: LD_EXP 21
66021: PUSH
66022: LD_VAR 0 5
66026: ARRAY
66027: IN
66028: IFFALSE 66067
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
66030: LD_ADDR_EXP 21
66034: PUSH
66035: LD_EXP 21
66039: PPUSH
66040: LD_VAR 0 5
66044: PPUSH
66045: LD_EXP 21
66049: PUSH
66050: LD_VAR 0 5
66054: ARRAY
66055: PUSH
66056: LD_VAR 0 1
66060: DIFF
66061: PPUSH
66062: CALL_OW 1
66066: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
66067: LD_VAR 0 1
66071: PUSH
66072: LD_EXP 22
66076: PUSH
66077: LD_VAR 0 5
66081: ARRAY
66082: IN
66083: IFFALSE 66122
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
66085: LD_ADDR_EXP 22
66089: PUSH
66090: LD_EXP 22
66094: PPUSH
66095: LD_VAR 0 5
66099: PPUSH
66100: LD_EXP 22
66104: PUSH
66105: LD_VAR 0 5
66109: ARRAY
66110: PUSH
66111: LD_VAR 0 1
66115: DIFF
66116: PPUSH
66117: CALL_OW 1
66121: ST_TO_ADDR
// break ;
66122: GO 66126
// end ;
66124: GO 65944
66126: POP
66127: POP
// end ;
66128: LD_VAR 0 4
66132: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
66133: LD_INT 0
66135: PPUSH
66136: PPUSH
66137: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
66138: LD_EXP 13
66142: NOT
66143: PUSH
66144: LD_EXP 11
66148: NOT
66149: OR
66150: PUSH
66151: LD_VAR 0 3
66155: PUSH
66156: LD_EXP 39
66160: IN
66161: NOT
66162: OR
66163: IFFALSE 66167
// exit ;
66165: GO 66290
// for i = 1 to mc_vehicles do
66167: LD_ADDR_VAR 0 6
66171: PUSH
66172: DOUBLE
66173: LD_INT 1
66175: DEC
66176: ST_TO_ADDR
66177: LD_EXP 32
66181: PUSH
66182: FOR_TO
66183: IFFALSE 66288
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
66185: LD_VAR 0 2
66189: PUSH
66190: LD_EXP 32
66194: PUSH
66195: LD_VAR 0 6
66199: ARRAY
66200: IN
66201: PUSH
66202: LD_VAR 0 1
66206: PUSH
66207: LD_EXP 32
66211: PUSH
66212: LD_VAR 0 6
66216: ARRAY
66217: IN
66218: OR
66219: IFFALSE 66286
// begin tmp := mc_vehicles [ i ] diff old ;
66221: LD_ADDR_VAR 0 7
66225: PUSH
66226: LD_EXP 32
66230: PUSH
66231: LD_VAR 0 6
66235: ARRAY
66236: PUSH
66237: LD_VAR 0 2
66241: DIFF
66242: ST_TO_ADDR
// tmp := tmp diff new ;
66243: LD_ADDR_VAR 0 7
66247: PUSH
66248: LD_VAR 0 7
66252: PUSH
66253: LD_VAR 0 1
66257: DIFF
66258: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
66259: LD_ADDR_EXP 32
66263: PUSH
66264: LD_EXP 32
66268: PPUSH
66269: LD_VAR 0 6
66273: PPUSH
66274: LD_VAR 0 7
66278: PPUSH
66279: CALL_OW 1
66283: ST_TO_ADDR
// break ;
66284: GO 66288
// end ;
66286: GO 66182
66288: POP
66289: POP
// end ;
66290: LD_VAR 0 5
66294: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
66295: LD_INT 0
66297: PPUSH
66298: PPUSH
66299: PPUSH
66300: PPUSH
// if not mc_bases or not skirmish then
66301: LD_EXP 13
66305: NOT
66306: PUSH
66307: LD_EXP 11
66311: NOT
66312: OR
66313: IFFALSE 66317
// exit ;
66315: GO 66694
// side := GetSide ( vehicle ) ;
66317: LD_ADDR_VAR 0 5
66321: PUSH
66322: LD_VAR 0 1
66326: PPUSH
66327: CALL_OW 255
66331: ST_TO_ADDR
// for i = 1 to mc_bases do
66332: LD_ADDR_VAR 0 4
66336: PUSH
66337: DOUBLE
66338: LD_INT 1
66340: DEC
66341: ST_TO_ADDR
66342: LD_EXP 13
66346: PUSH
66347: FOR_TO
66348: IFFALSE 66692
// begin if factory in mc_bases [ i ] then
66350: LD_VAR 0 2
66354: PUSH
66355: LD_EXP 13
66359: PUSH
66360: LD_VAR 0 4
66364: ARRAY
66365: IN
66366: IFFALSE 66690
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
66368: LD_EXP 35
66372: PUSH
66373: LD_VAR 0 4
66377: ARRAY
66378: PUSH
66379: LD_EXP 24
66383: PUSH
66384: LD_VAR 0 4
66388: ARRAY
66389: LESS
66390: PUSH
66391: LD_VAR 0 1
66395: PPUSH
66396: CALL_OW 264
66400: PUSH
66401: LD_INT 31
66403: PUSH
66404: LD_INT 32
66406: PUSH
66407: LD_INT 51
66409: PUSH
66410: LD_EXP 57
66414: PUSH
66415: LD_INT 12
66417: PUSH
66418: LD_INT 30
66420: PUSH
66421: LD_EXP 56
66425: PUSH
66426: LD_INT 11
66428: PUSH
66429: LD_INT 53
66431: PUSH
66432: LD_INT 14
66434: PUSH
66435: LD_EXP 60
66439: PUSH
66440: LD_INT 29
66442: PUSH
66443: LD_EXP 58
66447: PUSH
66448: LD_INT 13
66450: PUSH
66451: LD_INT 52
66453: PUSH
66454: LD_INT 48
66456: PUSH
66457: LD_INT 8
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: IN
66479: NOT
66480: AND
66481: IFFALSE 66529
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
66483: LD_ADDR_EXP 35
66487: PUSH
66488: LD_EXP 35
66492: PPUSH
66493: LD_VAR 0 4
66497: PUSH
66498: LD_EXP 35
66502: PUSH
66503: LD_VAR 0 4
66507: ARRAY
66508: PUSH
66509: LD_INT 1
66511: PLUS
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PPUSH
66517: LD_VAR 0 1
66521: PPUSH
66522: CALL 8910 0 3
66526: ST_TO_ADDR
66527: GO 66573
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
66529: LD_ADDR_EXP 32
66533: PUSH
66534: LD_EXP 32
66538: PPUSH
66539: LD_VAR 0 4
66543: PUSH
66544: LD_EXP 32
66548: PUSH
66549: LD_VAR 0 4
66553: ARRAY
66554: PUSH
66555: LD_INT 1
66557: PLUS
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PPUSH
66563: LD_VAR 0 1
66567: PPUSH
66568: CALL 8910 0 3
66572: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
66573: LD_VAR 0 1
66577: PPUSH
66578: CALL_OW 263
66582: PUSH
66583: LD_INT 2
66585: EQUAL
66586: IFFALSE 66606
// begin repeat wait ( 0 0$1 ) ;
66588: LD_INT 35
66590: PPUSH
66591: CALL_OW 67
// until IsControledBy ( vehicle ) ;
66595: LD_VAR 0 1
66599: PPUSH
66600: CALL_OW 312
66604: IFFALSE 66588
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
66606: LD_VAR 0 1
66610: PPUSH
66611: LD_EXP 37
66615: PUSH
66616: LD_VAR 0 4
66620: ARRAY
66621: PPUSH
66622: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
66626: LD_VAR 0 1
66630: PPUSH
66631: CALL_OW 263
66635: PUSH
66636: LD_INT 1
66638: NONEQUAL
66639: IFFALSE 66643
// break ;
66641: GO 66692
// repeat wait ( 0 0$1 ) ;
66643: LD_INT 35
66645: PPUSH
66646: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
66650: LD_VAR 0 1
66654: PPUSH
66655: LD_EXP 37
66659: PUSH
66660: LD_VAR 0 4
66664: ARRAY
66665: PPUSH
66666: CALL_OW 308
66670: IFFALSE 66643
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
66672: LD_VAR 0 1
66676: PPUSH
66677: CALL_OW 311
66681: PPUSH
66682: CALL_OW 121
// exit ;
66686: POP
66687: POP
66688: GO 66694
// end ; end ;
66690: GO 66347
66692: POP
66693: POP
// end ;
66694: LD_VAR 0 3
66698: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
66699: LD_INT 0
66701: PPUSH
66702: PPUSH
66703: PPUSH
66704: PPUSH
// if not mc_bases or not skirmish then
66705: LD_EXP 13
66709: NOT
66710: PUSH
66711: LD_EXP 11
66715: NOT
66716: OR
66717: IFFALSE 66721
// exit ;
66719: GO 67074
// repeat wait ( 0 0$1 ) ;
66721: LD_INT 35
66723: PPUSH
66724: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
66728: LD_VAR 0 2
66732: PPUSH
66733: LD_VAR 0 3
66737: PPUSH
66738: CALL_OW 284
66742: IFFALSE 66721
// if GetResourceTypeXY ( x , y ) = mat_artefact then
66744: LD_VAR 0 2
66748: PPUSH
66749: LD_VAR 0 3
66753: PPUSH
66754: CALL_OW 283
66758: PUSH
66759: LD_INT 4
66761: EQUAL
66762: IFFALSE 66766
// exit ;
66764: GO 67074
// for i = 1 to mc_bases do
66766: LD_ADDR_VAR 0 7
66770: PUSH
66771: DOUBLE
66772: LD_INT 1
66774: DEC
66775: ST_TO_ADDR
66776: LD_EXP 13
66780: PUSH
66781: FOR_TO
66782: IFFALSE 67072
// begin if mc_crates_area [ i ] then
66784: LD_EXP 31
66788: PUSH
66789: LD_VAR 0 7
66793: ARRAY
66794: IFFALSE 66905
// for j in mc_crates_area [ i ] do
66796: LD_ADDR_VAR 0 8
66800: PUSH
66801: LD_EXP 31
66805: PUSH
66806: LD_VAR 0 7
66810: ARRAY
66811: PUSH
66812: FOR_IN
66813: IFFALSE 66903
// if InArea ( x , y , j ) then
66815: LD_VAR 0 2
66819: PPUSH
66820: LD_VAR 0 3
66824: PPUSH
66825: LD_VAR 0 8
66829: PPUSH
66830: CALL_OW 309
66834: IFFALSE 66901
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
66836: LD_ADDR_EXP 29
66840: PUSH
66841: LD_EXP 29
66845: PPUSH
66846: LD_VAR 0 7
66850: PUSH
66851: LD_EXP 29
66855: PUSH
66856: LD_VAR 0 7
66860: ARRAY
66861: PUSH
66862: LD_INT 1
66864: PLUS
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PPUSH
66870: LD_VAR 0 4
66874: PUSH
66875: LD_VAR 0 2
66879: PUSH
66880: LD_VAR 0 3
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: LIST
66889: PPUSH
66890: CALL 8910 0 3
66894: ST_TO_ADDR
// exit ;
66895: POP
66896: POP
66897: POP
66898: POP
66899: GO 67074
// end ;
66901: GO 66812
66903: POP
66904: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66905: LD_ADDR_VAR 0 9
66909: PUSH
66910: LD_EXP 13
66914: PUSH
66915: LD_VAR 0 7
66919: ARRAY
66920: PPUSH
66921: LD_INT 2
66923: PUSH
66924: LD_INT 30
66926: PUSH
66927: LD_INT 0
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 30
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: PPUSH
66949: CALL_OW 72
66953: ST_TO_ADDR
// if not depot then
66954: LD_VAR 0 9
66958: NOT
66959: IFFALSE 66963
// continue ;
66961: GO 66781
// for j in depot do
66963: LD_ADDR_VAR 0 8
66967: PUSH
66968: LD_VAR 0 9
66972: PUSH
66973: FOR_IN
66974: IFFALSE 67068
// if GetDistUnitXY ( j , x , y ) < 30 then
66976: LD_VAR 0 8
66980: PPUSH
66981: LD_VAR 0 2
66985: PPUSH
66986: LD_VAR 0 3
66990: PPUSH
66991: CALL_OW 297
66995: PUSH
66996: LD_INT 30
66998: LESS
66999: IFFALSE 67066
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
67001: LD_ADDR_EXP 29
67005: PUSH
67006: LD_EXP 29
67010: PPUSH
67011: LD_VAR 0 7
67015: PUSH
67016: LD_EXP 29
67020: PUSH
67021: LD_VAR 0 7
67025: ARRAY
67026: PUSH
67027: LD_INT 1
67029: PLUS
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PPUSH
67035: LD_VAR 0 4
67039: PUSH
67040: LD_VAR 0 2
67044: PUSH
67045: LD_VAR 0 3
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: PPUSH
67055: CALL 8910 0 3
67059: ST_TO_ADDR
// exit ;
67060: POP
67061: POP
67062: POP
67063: POP
67064: GO 67074
// end ;
67066: GO 66973
67068: POP
67069: POP
// end ;
67070: GO 66781
67072: POP
67073: POP
// end ;
67074: LD_VAR 0 6
67078: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
67079: LD_INT 0
67081: PPUSH
67082: PPUSH
67083: PPUSH
67084: PPUSH
// if not mc_bases or not skirmish then
67085: LD_EXP 13
67089: NOT
67090: PUSH
67091: LD_EXP 11
67095: NOT
67096: OR
67097: IFFALSE 67101
// exit ;
67099: GO 67378
// side := GetSide ( lab ) ;
67101: LD_ADDR_VAR 0 4
67105: PUSH
67106: LD_VAR 0 2
67110: PPUSH
67111: CALL_OW 255
67115: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
67116: LD_VAR 0 4
67120: PUSH
67121: LD_EXP 39
67125: IN
67126: NOT
67127: PUSH
67128: LD_EXP 40
67132: NOT
67133: OR
67134: PUSH
67135: LD_EXP 13
67139: NOT
67140: OR
67141: IFFALSE 67145
// exit ;
67143: GO 67378
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
67145: LD_ADDR_EXP 40
67149: PUSH
67150: LD_EXP 40
67154: PPUSH
67155: LD_VAR 0 4
67159: PPUSH
67160: LD_EXP 40
67164: PUSH
67165: LD_VAR 0 4
67169: ARRAY
67170: PUSH
67171: LD_VAR 0 1
67175: DIFF
67176: PPUSH
67177: CALL_OW 1
67181: ST_TO_ADDR
// for i = 1 to mc_bases do
67182: LD_ADDR_VAR 0 5
67186: PUSH
67187: DOUBLE
67188: LD_INT 1
67190: DEC
67191: ST_TO_ADDR
67192: LD_EXP 13
67196: PUSH
67197: FOR_TO
67198: IFFALSE 67376
// begin if lab in mc_bases [ i ] then
67200: LD_VAR 0 2
67204: PUSH
67205: LD_EXP 13
67209: PUSH
67210: LD_VAR 0 5
67214: ARRAY
67215: IN
67216: IFFALSE 67374
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
67218: LD_VAR 0 1
67222: PUSH
67223: LD_INT 11
67225: PUSH
67226: LD_INT 4
67228: PUSH
67229: LD_INT 3
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: IN
67241: PUSH
67242: LD_EXP 43
67246: PUSH
67247: LD_VAR 0 5
67251: ARRAY
67252: AND
67253: IFFALSE 67374
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
67255: LD_ADDR_VAR 0 6
67259: PUSH
67260: LD_EXP 43
67264: PUSH
67265: LD_VAR 0 5
67269: ARRAY
67270: PUSH
67271: LD_INT 1
67273: ARRAY
67274: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
67275: LD_ADDR_EXP 43
67279: PUSH
67280: LD_EXP 43
67284: PPUSH
67285: LD_VAR 0 5
67289: PPUSH
67290: EMPTY
67291: PPUSH
67292: CALL_OW 1
67296: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
67297: LD_VAR 0 6
67301: PPUSH
67302: LD_INT 0
67304: PPUSH
67305: CALL_OW 109
// ComExitBuilding ( tmp ) ;
67309: LD_VAR 0 6
67313: PPUSH
67314: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
67318: LD_ADDR_EXP 42
67322: PUSH
67323: LD_EXP 42
67327: PPUSH
67328: LD_VAR 0 5
67332: PPUSH
67333: LD_EXP 42
67337: PUSH
67338: LD_VAR 0 5
67342: ARRAY
67343: PPUSH
67344: LD_INT 1
67346: PPUSH
67347: LD_VAR 0 6
67351: PPUSH
67352: CALL_OW 2
67356: PPUSH
67357: CALL_OW 1
67361: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
67362: LD_VAR 0 5
67366: PPUSH
67367: LD_INT 112
67369: PPUSH
67370: CALL 44390 0 2
// end ; end ; end ;
67374: GO 67197
67376: POP
67377: POP
// end ;
67378: LD_VAR 0 3
67382: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
67383: LD_INT 0
67385: PPUSH
67386: PPUSH
67387: PPUSH
67388: PPUSH
67389: PPUSH
67390: PPUSH
67391: PPUSH
67392: PPUSH
// if not mc_bases or not skirmish then
67393: LD_EXP 13
67397: NOT
67398: PUSH
67399: LD_EXP 11
67403: NOT
67404: OR
67405: IFFALSE 67409
// exit ;
67407: GO 68780
// for i = 1 to mc_bases do
67409: LD_ADDR_VAR 0 3
67413: PUSH
67414: DOUBLE
67415: LD_INT 1
67417: DEC
67418: ST_TO_ADDR
67419: LD_EXP 13
67423: PUSH
67424: FOR_TO
67425: IFFALSE 68778
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
67427: LD_VAR 0 1
67431: PUSH
67432: LD_EXP 13
67436: PUSH
67437: LD_VAR 0 3
67441: ARRAY
67442: IN
67443: PUSH
67444: LD_VAR 0 1
67448: PUSH
67449: LD_EXP 20
67453: PUSH
67454: LD_VAR 0 3
67458: ARRAY
67459: IN
67460: OR
67461: PUSH
67462: LD_VAR 0 1
67466: PUSH
67467: LD_EXP 35
67471: PUSH
67472: LD_VAR 0 3
67476: ARRAY
67477: IN
67478: OR
67479: PUSH
67480: LD_VAR 0 1
67484: PUSH
67485: LD_EXP 32
67489: PUSH
67490: LD_VAR 0 3
67494: ARRAY
67495: IN
67496: OR
67497: PUSH
67498: LD_VAR 0 1
67502: PUSH
67503: LD_EXP 42
67507: PUSH
67508: LD_VAR 0 3
67512: ARRAY
67513: IN
67514: OR
67515: PUSH
67516: LD_VAR 0 1
67520: PUSH
67521: LD_EXP 43
67525: PUSH
67526: LD_VAR 0 3
67530: ARRAY
67531: IN
67532: OR
67533: IFFALSE 68776
// begin if un in mc_ape [ i ] then
67535: LD_VAR 0 1
67539: PUSH
67540: LD_EXP 42
67544: PUSH
67545: LD_VAR 0 3
67549: ARRAY
67550: IN
67551: IFFALSE 67590
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
67553: LD_ADDR_EXP 42
67557: PUSH
67558: LD_EXP 42
67562: PPUSH
67563: LD_VAR 0 3
67567: PPUSH
67568: LD_EXP 42
67572: PUSH
67573: LD_VAR 0 3
67577: ARRAY
67578: PUSH
67579: LD_VAR 0 1
67583: DIFF
67584: PPUSH
67585: CALL_OW 1
67589: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
67590: LD_VAR 0 1
67594: PUSH
67595: LD_EXP 43
67599: PUSH
67600: LD_VAR 0 3
67604: ARRAY
67605: IN
67606: IFFALSE 67630
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
67608: LD_ADDR_EXP 43
67612: PUSH
67613: LD_EXP 43
67617: PPUSH
67618: LD_VAR 0 3
67622: PPUSH
67623: EMPTY
67624: PPUSH
67625: CALL_OW 1
67629: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
67630: LD_VAR 0 1
67634: PPUSH
67635: CALL_OW 247
67639: PUSH
67640: LD_INT 2
67642: EQUAL
67643: PUSH
67644: LD_VAR 0 1
67648: PPUSH
67649: CALL_OW 110
67653: PUSH
67654: LD_INT 20
67656: EQUAL
67657: PUSH
67658: LD_VAR 0 1
67662: PUSH
67663: LD_EXP 35
67667: PUSH
67668: LD_VAR 0 3
67672: ARRAY
67673: IN
67674: OR
67675: PUSH
67676: LD_VAR 0 1
67680: PPUSH
67681: CALL_OW 264
67685: PUSH
67686: LD_INT 12
67688: PUSH
67689: LD_INT 51
67691: PUSH
67692: LD_EXP 57
67696: PUSH
67697: LD_INT 32
67699: PUSH
67700: LD_INT 13
67702: PUSH
67703: LD_INT 52
67705: PUSH
67706: LD_INT 31
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: IN
67718: OR
67719: AND
67720: IFFALSE 68028
// begin if un in mc_defender [ i ] then
67722: LD_VAR 0 1
67726: PUSH
67727: LD_EXP 35
67731: PUSH
67732: LD_VAR 0 3
67736: ARRAY
67737: IN
67738: IFFALSE 67777
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
67740: LD_ADDR_EXP 35
67744: PUSH
67745: LD_EXP 35
67749: PPUSH
67750: LD_VAR 0 3
67754: PPUSH
67755: LD_EXP 35
67759: PUSH
67760: LD_VAR 0 3
67764: ARRAY
67765: PUSH
67766: LD_VAR 0 1
67770: DIFF
67771: PPUSH
67772: CALL_OW 1
67776: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
67777: LD_ADDR_VAR 0 8
67781: PUSH
67782: LD_VAR 0 3
67786: PPUSH
67787: LD_INT 3
67789: PPUSH
67790: CALL 64446 0 2
67794: ST_TO_ADDR
// if fac then
67795: LD_VAR 0 8
67799: IFFALSE 68028
// begin for j in fac do
67801: LD_ADDR_VAR 0 4
67805: PUSH
67806: LD_VAR 0 8
67810: PUSH
67811: FOR_IN
67812: IFFALSE 68026
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
67814: LD_ADDR_VAR 0 9
67818: PUSH
67819: LD_VAR 0 8
67823: PPUSH
67824: LD_VAR 0 1
67828: PPUSH
67829: CALL_OW 265
67833: PPUSH
67834: LD_VAR 0 1
67838: PPUSH
67839: CALL_OW 262
67843: PPUSH
67844: LD_VAR 0 1
67848: PPUSH
67849: CALL_OW 263
67853: PPUSH
67854: LD_VAR 0 1
67858: PPUSH
67859: CALL_OW 264
67863: PPUSH
67864: CALL 6442 0 5
67868: ST_TO_ADDR
// if components then
67869: LD_VAR 0 9
67873: IFFALSE 68024
// begin if GetWeapon ( un ) = ar_control_tower then
67875: LD_VAR 0 1
67879: PPUSH
67880: CALL_OW 264
67884: PUSH
67885: LD_INT 31
67887: EQUAL
67888: IFFALSE 68005
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
67890: LD_VAR 0 1
67894: PPUSH
67895: CALL_OW 311
67899: PPUSH
67900: LD_INT 0
67902: PPUSH
67903: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
67907: LD_ADDR_EXP 53
67911: PUSH
67912: LD_EXP 53
67916: PPUSH
67917: LD_VAR 0 3
67921: PPUSH
67922: LD_EXP 53
67926: PUSH
67927: LD_VAR 0 3
67931: ARRAY
67932: PUSH
67933: LD_VAR 0 1
67937: PPUSH
67938: CALL_OW 311
67942: DIFF
67943: PPUSH
67944: CALL_OW 1
67948: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
67949: LD_ADDR_VAR 0 7
67953: PUSH
67954: LD_EXP 34
67958: PUSH
67959: LD_VAR 0 3
67963: ARRAY
67964: PPUSH
67965: LD_INT 1
67967: PPUSH
67968: LD_VAR 0 9
67972: PPUSH
67973: CALL_OW 2
67977: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
67978: LD_ADDR_EXP 34
67982: PUSH
67983: LD_EXP 34
67987: PPUSH
67988: LD_VAR 0 3
67992: PPUSH
67993: LD_VAR 0 7
67997: PPUSH
67998: CALL_OW 1
68002: ST_TO_ADDR
// end else
68003: GO 68022
// MC_InsertProduceList ( i , [ components ] ) ;
68005: LD_VAR 0 3
68009: PPUSH
68010: LD_VAR 0 9
68014: PUSH
68015: EMPTY
68016: LIST
68017: PPUSH
68018: CALL 63991 0 2
// break ;
68022: GO 68026
// end ; end ;
68024: GO 67811
68026: POP
68027: POP
// end ; end ; if GetType ( un ) = unit_building then
68028: LD_VAR 0 1
68032: PPUSH
68033: CALL_OW 247
68037: PUSH
68038: LD_INT 3
68040: EQUAL
68041: IFFALSE 68444
// begin btype := GetBType ( un ) ;
68043: LD_ADDR_VAR 0 5
68047: PUSH
68048: LD_VAR 0 1
68052: PPUSH
68053: CALL_OW 266
68057: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
68058: LD_VAR 0 5
68062: PUSH
68063: LD_INT 29
68065: PUSH
68066: LD_INT 30
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: IN
68073: IFFALSE 68146
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
68075: LD_VAR 0 1
68079: PPUSH
68080: CALL_OW 250
68084: PPUSH
68085: LD_VAR 0 1
68089: PPUSH
68090: CALL_OW 251
68094: PPUSH
68095: LD_VAR 0 1
68099: PPUSH
68100: CALL_OW 255
68104: PPUSH
68105: CALL_OW 440
68109: NOT
68110: IFFALSE 68146
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
68112: LD_VAR 0 1
68116: PPUSH
68117: CALL_OW 250
68121: PPUSH
68122: LD_VAR 0 1
68126: PPUSH
68127: CALL_OW 251
68131: PPUSH
68132: LD_VAR 0 1
68136: PPUSH
68137: CALL_OW 255
68141: PPUSH
68142: CALL_OW 441
// end ; if btype = b_warehouse then
68146: LD_VAR 0 5
68150: PUSH
68151: LD_INT 1
68153: EQUAL
68154: IFFALSE 68172
// begin btype := b_depot ;
68156: LD_ADDR_VAR 0 5
68160: PUSH
68161: LD_INT 0
68163: ST_TO_ADDR
// pos := 1 ;
68164: LD_ADDR_VAR 0 6
68168: PUSH
68169: LD_INT 1
68171: ST_TO_ADDR
// end ; if btype = b_factory then
68172: LD_VAR 0 5
68176: PUSH
68177: LD_INT 3
68179: EQUAL
68180: IFFALSE 68198
// begin btype := b_workshop ;
68182: LD_ADDR_VAR 0 5
68186: PUSH
68187: LD_INT 2
68189: ST_TO_ADDR
// pos := 1 ;
68190: LD_ADDR_VAR 0 6
68194: PUSH
68195: LD_INT 1
68197: ST_TO_ADDR
// end ; if btype = b_barracks then
68198: LD_VAR 0 5
68202: PUSH
68203: LD_INT 5
68205: EQUAL
68206: IFFALSE 68216
// btype := b_armoury ;
68208: LD_ADDR_VAR 0 5
68212: PUSH
68213: LD_INT 4
68215: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
68216: LD_VAR 0 5
68220: PUSH
68221: LD_INT 7
68223: PUSH
68224: LD_INT 8
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: IN
68231: IFFALSE 68241
// btype := b_lab ;
68233: LD_ADDR_VAR 0 5
68237: PUSH
68238: LD_INT 6
68240: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
68241: LD_ADDR_EXP 18
68245: PUSH
68246: LD_EXP 18
68250: PPUSH
68251: LD_VAR 0 3
68255: PUSH
68256: LD_EXP 18
68260: PUSH
68261: LD_VAR 0 3
68265: ARRAY
68266: PUSH
68267: LD_INT 1
68269: PLUS
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PPUSH
68275: LD_VAR 0 5
68279: PUSH
68280: LD_VAR 0 1
68284: PPUSH
68285: CALL_OW 250
68289: PUSH
68290: LD_VAR 0 1
68294: PPUSH
68295: CALL_OW 251
68299: PUSH
68300: LD_VAR 0 1
68304: PPUSH
68305: CALL_OW 254
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: PPUSH
68316: CALL 8910 0 3
68320: ST_TO_ADDR
// if pos = 1 then
68321: LD_VAR 0 6
68325: PUSH
68326: LD_INT 1
68328: EQUAL
68329: IFFALSE 68444
// begin tmp := mc_build_list [ i ] ;
68331: LD_ADDR_VAR 0 7
68335: PUSH
68336: LD_EXP 18
68340: PUSH
68341: LD_VAR 0 3
68345: ARRAY
68346: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
68347: LD_VAR 0 7
68351: PPUSH
68352: LD_INT 2
68354: PUSH
68355: LD_INT 30
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 30
68367: PUSH
68368: LD_INT 1
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: LIST
68379: PPUSH
68380: CALL_OW 72
68384: IFFALSE 68394
// pos := 2 ;
68386: LD_ADDR_VAR 0 6
68390: PUSH
68391: LD_INT 2
68393: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
68394: LD_ADDR_VAR 0 7
68398: PUSH
68399: LD_VAR 0 7
68403: PPUSH
68404: LD_VAR 0 6
68408: PPUSH
68409: LD_VAR 0 7
68413: PPUSH
68414: CALL 9236 0 3
68418: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
68419: LD_ADDR_EXP 18
68423: PUSH
68424: LD_EXP 18
68428: PPUSH
68429: LD_VAR 0 3
68433: PPUSH
68434: LD_VAR 0 7
68438: PPUSH
68439: CALL_OW 1
68443: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
68444: LD_VAR 0 1
68448: PUSH
68449: LD_EXP 13
68453: PUSH
68454: LD_VAR 0 3
68458: ARRAY
68459: IN
68460: IFFALSE 68499
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
68462: LD_ADDR_EXP 13
68466: PUSH
68467: LD_EXP 13
68471: PPUSH
68472: LD_VAR 0 3
68476: PPUSH
68477: LD_EXP 13
68481: PUSH
68482: LD_VAR 0 3
68486: ARRAY
68487: PUSH
68488: LD_VAR 0 1
68492: DIFF
68493: PPUSH
68494: CALL_OW 1
68498: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
68499: LD_VAR 0 1
68503: PUSH
68504: LD_EXP 20
68508: PUSH
68509: LD_VAR 0 3
68513: ARRAY
68514: IN
68515: IFFALSE 68554
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
68517: LD_ADDR_EXP 20
68521: PUSH
68522: LD_EXP 20
68526: PPUSH
68527: LD_VAR 0 3
68531: PPUSH
68532: LD_EXP 20
68536: PUSH
68537: LD_VAR 0 3
68541: ARRAY
68542: PUSH
68543: LD_VAR 0 1
68547: DIFF
68548: PPUSH
68549: CALL_OW 1
68553: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
68554: LD_VAR 0 1
68558: PUSH
68559: LD_EXP 32
68563: PUSH
68564: LD_VAR 0 3
68568: ARRAY
68569: IN
68570: IFFALSE 68609
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
68572: LD_ADDR_EXP 32
68576: PUSH
68577: LD_EXP 32
68581: PPUSH
68582: LD_VAR 0 3
68586: PPUSH
68587: LD_EXP 32
68591: PUSH
68592: LD_VAR 0 3
68596: ARRAY
68597: PUSH
68598: LD_VAR 0 1
68602: DIFF
68603: PPUSH
68604: CALL_OW 1
68608: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
68609: LD_VAR 0 1
68613: PUSH
68614: LD_EXP 35
68618: PUSH
68619: LD_VAR 0 3
68623: ARRAY
68624: IN
68625: IFFALSE 68664
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
68627: LD_ADDR_EXP 35
68631: PUSH
68632: LD_EXP 35
68636: PPUSH
68637: LD_VAR 0 3
68641: PPUSH
68642: LD_EXP 35
68646: PUSH
68647: LD_VAR 0 3
68651: ARRAY
68652: PUSH
68653: LD_VAR 0 1
68657: DIFF
68658: PPUSH
68659: CALL_OW 1
68663: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
68664: LD_VAR 0 1
68668: PUSH
68669: LD_EXP 22
68673: PUSH
68674: LD_VAR 0 3
68678: ARRAY
68679: IN
68680: IFFALSE 68719
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
68682: LD_ADDR_EXP 22
68686: PUSH
68687: LD_EXP 22
68691: PPUSH
68692: LD_VAR 0 3
68696: PPUSH
68697: LD_EXP 22
68701: PUSH
68702: LD_VAR 0 3
68706: ARRAY
68707: PUSH
68708: LD_VAR 0 1
68712: DIFF
68713: PPUSH
68714: CALL_OW 1
68718: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
68719: LD_VAR 0 1
68723: PUSH
68724: LD_EXP 21
68728: PUSH
68729: LD_VAR 0 3
68733: ARRAY
68734: IN
68735: IFFALSE 68774
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
68737: LD_ADDR_EXP 21
68741: PUSH
68742: LD_EXP 21
68746: PPUSH
68747: LD_VAR 0 3
68751: PPUSH
68752: LD_EXP 21
68756: PUSH
68757: LD_VAR 0 3
68761: ARRAY
68762: PUSH
68763: LD_VAR 0 1
68767: DIFF
68768: PPUSH
68769: CALL_OW 1
68773: ST_TO_ADDR
// end ; break ;
68774: GO 68778
// end ;
68776: GO 67424
68778: POP
68779: POP
// end ;
68780: LD_VAR 0 2
68784: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
68785: LD_INT 0
68787: PPUSH
68788: PPUSH
68789: PPUSH
// if not mc_bases or not skirmish then
68790: LD_EXP 13
68794: NOT
68795: PUSH
68796: LD_EXP 11
68800: NOT
68801: OR
68802: IFFALSE 68806
// exit ;
68804: GO 69021
// for i = 1 to mc_bases do
68806: LD_ADDR_VAR 0 3
68810: PUSH
68811: DOUBLE
68812: LD_INT 1
68814: DEC
68815: ST_TO_ADDR
68816: LD_EXP 13
68820: PUSH
68821: FOR_TO
68822: IFFALSE 69019
// begin if building in mc_construct_list [ i ] then
68824: LD_VAR 0 1
68828: PUSH
68829: LD_EXP 20
68833: PUSH
68834: LD_VAR 0 3
68838: ARRAY
68839: IN
68840: IFFALSE 69017
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
68842: LD_ADDR_EXP 20
68846: PUSH
68847: LD_EXP 20
68851: PPUSH
68852: LD_VAR 0 3
68856: PPUSH
68857: LD_EXP 20
68861: PUSH
68862: LD_VAR 0 3
68866: ARRAY
68867: PUSH
68868: LD_VAR 0 1
68872: DIFF
68873: PPUSH
68874: CALL_OW 1
68878: ST_TO_ADDR
// if building in mc_lab [ i ] then
68879: LD_VAR 0 1
68883: PUSH
68884: LD_EXP 46
68888: PUSH
68889: LD_VAR 0 3
68893: ARRAY
68894: IN
68895: IFFALSE 68950
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
68897: LD_ADDR_EXP 47
68901: PUSH
68902: LD_EXP 47
68906: PPUSH
68907: LD_VAR 0 3
68911: PPUSH
68912: LD_EXP 47
68916: PUSH
68917: LD_VAR 0 3
68921: ARRAY
68922: PPUSH
68923: LD_INT 1
68925: PPUSH
68926: LD_EXP 47
68930: PUSH
68931: LD_VAR 0 3
68935: ARRAY
68936: PPUSH
68937: LD_INT 0
68939: PPUSH
68940: CALL 8328 0 4
68944: PPUSH
68945: CALL_OW 1
68949: ST_TO_ADDR
// if not building in mc_bases [ i ] then
68950: LD_VAR 0 1
68954: PUSH
68955: LD_EXP 13
68959: PUSH
68960: LD_VAR 0 3
68964: ARRAY
68965: IN
68966: NOT
68967: IFFALSE 69013
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
68969: LD_ADDR_EXP 13
68973: PUSH
68974: LD_EXP 13
68978: PPUSH
68979: LD_VAR 0 3
68983: PUSH
68984: LD_EXP 13
68988: PUSH
68989: LD_VAR 0 3
68993: ARRAY
68994: PUSH
68995: LD_INT 1
68997: PLUS
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PPUSH
69003: LD_VAR 0 1
69007: PPUSH
69008: CALL 8910 0 3
69012: ST_TO_ADDR
// exit ;
69013: POP
69014: POP
69015: GO 69021
// end ; end ;
69017: GO 68821
69019: POP
69020: POP
// end ;
69021: LD_VAR 0 2
69025: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
69026: LD_INT 0
69028: PPUSH
69029: PPUSH
69030: PPUSH
69031: PPUSH
69032: PPUSH
69033: PPUSH
69034: PPUSH
// if not mc_bases or not skirmish then
69035: LD_EXP 13
69039: NOT
69040: PUSH
69041: LD_EXP 11
69045: NOT
69046: OR
69047: IFFALSE 69051
// exit ;
69049: GO 69712
// for i = 1 to mc_bases do
69051: LD_ADDR_VAR 0 3
69055: PUSH
69056: DOUBLE
69057: LD_INT 1
69059: DEC
69060: ST_TO_ADDR
69061: LD_EXP 13
69065: PUSH
69066: FOR_TO
69067: IFFALSE 69710
// begin if building in mc_construct_list [ i ] then
69069: LD_VAR 0 1
69073: PUSH
69074: LD_EXP 20
69078: PUSH
69079: LD_VAR 0 3
69083: ARRAY
69084: IN
69085: IFFALSE 69708
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
69087: LD_ADDR_EXP 20
69091: PUSH
69092: LD_EXP 20
69096: PPUSH
69097: LD_VAR 0 3
69101: PPUSH
69102: LD_EXP 20
69106: PUSH
69107: LD_VAR 0 3
69111: ARRAY
69112: PUSH
69113: LD_VAR 0 1
69117: DIFF
69118: PPUSH
69119: CALL_OW 1
69123: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
69124: LD_ADDR_EXP 13
69128: PUSH
69129: LD_EXP 13
69133: PPUSH
69134: LD_VAR 0 3
69138: PUSH
69139: LD_EXP 13
69143: PUSH
69144: LD_VAR 0 3
69148: ARRAY
69149: PUSH
69150: LD_INT 1
69152: PLUS
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PPUSH
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL 8910 0 3
69167: ST_TO_ADDR
// btype := GetBType ( building ) ;
69168: LD_ADDR_VAR 0 5
69172: PUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: CALL_OW 266
69182: ST_TO_ADDR
// side := GetSide ( building ) ;
69183: LD_ADDR_VAR 0 8
69187: PUSH
69188: LD_VAR 0 1
69192: PPUSH
69193: CALL_OW 255
69197: ST_TO_ADDR
// if btype = b_lab then
69198: LD_VAR 0 5
69202: PUSH
69203: LD_INT 6
69205: EQUAL
69206: IFFALSE 69256
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
69208: LD_ADDR_EXP 46
69212: PUSH
69213: LD_EXP 46
69217: PPUSH
69218: LD_VAR 0 3
69222: PUSH
69223: LD_EXP 46
69227: PUSH
69228: LD_VAR 0 3
69232: ARRAY
69233: PUSH
69234: LD_INT 1
69236: PLUS
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PPUSH
69242: LD_VAR 0 1
69246: PPUSH
69247: CALL 8910 0 3
69251: ST_TO_ADDR
// exit ;
69252: POP
69253: POP
69254: GO 69712
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
69256: LD_VAR 0 5
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 2
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: IN
69275: IFFALSE 69399
// begin if btype = b_armoury then
69277: LD_VAR 0 5
69281: PUSH
69282: LD_INT 4
69284: EQUAL
69285: IFFALSE 69295
// btype := b_barracks ;
69287: LD_ADDR_VAR 0 5
69291: PUSH
69292: LD_INT 5
69294: ST_TO_ADDR
// if btype = b_depot then
69295: LD_VAR 0 5
69299: PUSH
69300: LD_INT 0
69302: EQUAL
69303: IFFALSE 69313
// btype := b_warehouse ;
69305: LD_ADDR_VAR 0 5
69309: PUSH
69310: LD_INT 1
69312: ST_TO_ADDR
// if btype = b_workshop then
69313: LD_VAR 0 5
69317: PUSH
69318: LD_INT 2
69320: EQUAL
69321: IFFALSE 69331
// btype := b_factory ;
69323: LD_ADDR_VAR 0 5
69327: PUSH
69328: LD_INT 3
69330: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
69331: LD_VAR 0 5
69335: PPUSH
69336: LD_VAR 0 8
69340: PPUSH
69341: CALL_OW 323
69345: PUSH
69346: LD_INT 1
69348: EQUAL
69349: IFFALSE 69395
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
69351: LD_ADDR_EXP 45
69355: PUSH
69356: LD_EXP 45
69360: PPUSH
69361: LD_VAR 0 3
69365: PUSH
69366: LD_EXP 45
69370: PUSH
69371: LD_VAR 0 3
69375: ARRAY
69376: PUSH
69377: LD_INT 1
69379: PLUS
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PPUSH
69385: LD_VAR 0 1
69389: PPUSH
69390: CALL 8910 0 3
69394: ST_TO_ADDR
// exit ;
69395: POP
69396: POP
69397: GO 69712
// end ; if btype in [ b_bunker , b_turret ] then
69399: LD_VAR 0 5
69403: PUSH
69404: LD_INT 32
69406: PUSH
69407: LD_INT 33
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: IN
69414: IFFALSE 69704
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
69416: LD_ADDR_EXP 21
69420: PUSH
69421: LD_EXP 21
69425: PPUSH
69426: LD_VAR 0 3
69430: PUSH
69431: LD_EXP 21
69435: PUSH
69436: LD_VAR 0 3
69440: ARRAY
69441: PUSH
69442: LD_INT 1
69444: PLUS
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PPUSH
69450: LD_VAR 0 1
69454: PPUSH
69455: CALL 8910 0 3
69459: ST_TO_ADDR
// if btype = b_bunker then
69460: LD_VAR 0 5
69464: PUSH
69465: LD_INT 32
69467: EQUAL
69468: IFFALSE 69704
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
69470: LD_ADDR_EXP 22
69474: PUSH
69475: LD_EXP 22
69479: PPUSH
69480: LD_VAR 0 3
69484: PUSH
69485: LD_EXP 22
69489: PUSH
69490: LD_VAR 0 3
69494: ARRAY
69495: PUSH
69496: LD_INT 1
69498: PLUS
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PPUSH
69504: LD_VAR 0 1
69508: PPUSH
69509: CALL 8910 0 3
69513: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
69514: LD_ADDR_VAR 0 6
69518: PUSH
69519: LD_EXP 13
69523: PUSH
69524: LD_VAR 0 3
69528: ARRAY
69529: PPUSH
69530: LD_INT 25
69532: PUSH
69533: LD_INT 1
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: LD_INT 54
69545: PUSH
69546: EMPTY
69547: LIST
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PPUSH
69557: CALL_OW 72
69561: ST_TO_ADDR
// if tmp then
69562: LD_VAR 0 6
69566: IFFALSE 69572
// exit ;
69568: POP
69569: POP
69570: GO 69712
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
69572: LD_ADDR_VAR 0 6
69576: PUSH
69577: LD_EXP 13
69581: PUSH
69582: LD_VAR 0 3
69586: ARRAY
69587: PPUSH
69588: LD_INT 2
69590: PUSH
69591: LD_INT 30
69593: PUSH
69594: LD_INT 4
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 30
69603: PUSH
69604: LD_INT 5
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: LIST
69615: PPUSH
69616: CALL_OW 72
69620: ST_TO_ADDR
// if not tmp then
69621: LD_VAR 0 6
69625: NOT
69626: IFFALSE 69632
// exit ;
69628: POP
69629: POP
69630: GO 69712
// for j in tmp do
69632: LD_ADDR_VAR 0 4
69636: PUSH
69637: LD_VAR 0 6
69641: PUSH
69642: FOR_IN
69643: IFFALSE 69702
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
69645: LD_ADDR_VAR 0 7
69649: PUSH
69650: LD_VAR 0 4
69654: PPUSH
69655: CALL_OW 313
69659: PPUSH
69660: LD_INT 25
69662: PUSH
69663: LD_INT 1
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PPUSH
69670: CALL_OW 72
69674: ST_TO_ADDR
// if units then
69675: LD_VAR 0 7
69679: IFFALSE 69700
// begin ComExitBuilding ( units [ 1 ] ) ;
69681: LD_VAR 0 7
69685: PUSH
69686: LD_INT 1
69688: ARRAY
69689: PPUSH
69690: CALL_OW 122
// exit ;
69694: POP
69695: POP
69696: POP
69697: POP
69698: GO 69712
// end ; end ;
69700: GO 69642
69702: POP
69703: POP
// end ; end ; exit ;
69704: POP
69705: POP
69706: GO 69712
// end ; end ;
69708: GO 69066
69710: POP
69711: POP
// end ;
69712: LD_VAR 0 2
69716: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
69717: LD_INT 0
69719: PPUSH
69720: PPUSH
69721: PPUSH
69722: PPUSH
69723: PPUSH
69724: PPUSH
69725: PPUSH
// if not mc_bases or not skirmish then
69726: LD_EXP 13
69730: NOT
69731: PUSH
69732: LD_EXP 11
69736: NOT
69737: OR
69738: IFFALSE 69742
// exit ;
69740: GO 69973
// btype := GetBType ( building ) ;
69742: LD_ADDR_VAR 0 6
69746: PUSH
69747: LD_VAR 0 1
69751: PPUSH
69752: CALL_OW 266
69756: ST_TO_ADDR
// x := GetX ( building ) ;
69757: LD_ADDR_VAR 0 7
69761: PUSH
69762: LD_VAR 0 1
69766: PPUSH
69767: CALL_OW 250
69771: ST_TO_ADDR
// y := GetY ( building ) ;
69772: LD_ADDR_VAR 0 8
69776: PUSH
69777: LD_VAR 0 1
69781: PPUSH
69782: CALL_OW 251
69786: ST_TO_ADDR
// d := GetDir ( building ) ;
69787: LD_ADDR_VAR 0 9
69791: PUSH
69792: LD_VAR 0 1
69796: PPUSH
69797: CALL_OW 254
69801: ST_TO_ADDR
// for i = 1 to mc_bases do
69802: LD_ADDR_VAR 0 4
69806: PUSH
69807: DOUBLE
69808: LD_INT 1
69810: DEC
69811: ST_TO_ADDR
69812: LD_EXP 13
69816: PUSH
69817: FOR_TO
69818: IFFALSE 69971
// begin if not mc_build_list [ i ] then
69820: LD_EXP 18
69824: PUSH
69825: LD_VAR 0 4
69829: ARRAY
69830: NOT
69831: IFFALSE 69835
// continue ;
69833: GO 69817
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
69835: LD_VAR 0 6
69839: PUSH
69840: LD_VAR 0 7
69844: PUSH
69845: LD_VAR 0 8
69849: PUSH
69850: LD_VAR 0 9
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: PPUSH
69861: LD_EXP 18
69865: PUSH
69866: LD_VAR 0 4
69870: ARRAY
69871: PUSH
69872: LD_INT 1
69874: ARRAY
69875: PPUSH
69876: CALL 15079 0 2
69880: IFFALSE 69969
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
69882: LD_ADDR_EXP 18
69886: PUSH
69887: LD_EXP 18
69891: PPUSH
69892: LD_VAR 0 4
69896: PPUSH
69897: LD_EXP 18
69901: PUSH
69902: LD_VAR 0 4
69906: ARRAY
69907: PPUSH
69908: LD_INT 1
69910: PPUSH
69911: CALL_OW 3
69915: PPUSH
69916: CALL_OW 1
69920: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
69921: LD_ADDR_EXP 20
69925: PUSH
69926: LD_EXP 20
69930: PPUSH
69931: LD_VAR 0 4
69935: PUSH
69936: LD_EXP 20
69940: PUSH
69941: LD_VAR 0 4
69945: ARRAY
69946: PUSH
69947: LD_INT 1
69949: PLUS
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PPUSH
69955: LD_VAR 0 1
69959: PPUSH
69960: CALL 8910 0 3
69964: ST_TO_ADDR
// exit ;
69965: POP
69966: POP
69967: GO 69973
// end ; end ;
69969: GO 69817
69971: POP
69972: POP
// end ;
69973: LD_VAR 0 3
69977: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
69978: LD_INT 0
69980: PPUSH
69981: PPUSH
69982: PPUSH
// if not mc_bases or not skirmish then
69983: LD_EXP 13
69987: NOT
69988: PUSH
69989: LD_EXP 11
69993: NOT
69994: OR
69995: IFFALSE 69999
// exit ;
69997: GO 70189
// for i = 1 to mc_bases do
69999: LD_ADDR_VAR 0 4
70003: PUSH
70004: DOUBLE
70005: LD_INT 1
70007: DEC
70008: ST_TO_ADDR
70009: LD_EXP 13
70013: PUSH
70014: FOR_TO
70015: IFFALSE 70102
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
70017: LD_VAR 0 1
70021: PUSH
70022: LD_EXP 21
70026: PUSH
70027: LD_VAR 0 4
70031: ARRAY
70032: IN
70033: PUSH
70034: LD_VAR 0 1
70038: PUSH
70039: LD_EXP 22
70043: PUSH
70044: LD_VAR 0 4
70048: ARRAY
70049: IN
70050: NOT
70051: AND
70052: IFFALSE 70100
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
70054: LD_ADDR_EXP 22
70058: PUSH
70059: LD_EXP 22
70063: PPUSH
70064: LD_VAR 0 4
70068: PUSH
70069: LD_EXP 22
70073: PUSH
70074: LD_VAR 0 4
70078: ARRAY
70079: PUSH
70080: LD_INT 1
70082: PLUS
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PPUSH
70088: LD_VAR 0 1
70092: PPUSH
70093: CALL 8910 0 3
70097: ST_TO_ADDR
// break ;
70098: GO 70102
// end ; end ;
70100: GO 70014
70102: POP
70103: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
70104: LD_VAR 0 1
70108: PPUSH
70109: CALL_OW 257
70113: PUSH
70114: LD_EXP 39
70118: IN
70119: PUSH
70120: LD_VAR 0 1
70124: PPUSH
70125: CALL_OW 266
70129: PUSH
70130: LD_INT 5
70132: EQUAL
70133: AND
70134: PUSH
70135: LD_VAR 0 2
70139: PPUSH
70140: CALL_OW 110
70144: PUSH
70145: LD_INT 18
70147: NONEQUAL
70148: AND
70149: IFFALSE 70189
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
70151: LD_VAR 0 2
70155: PPUSH
70156: CALL_OW 257
70160: PUSH
70161: LD_INT 5
70163: PUSH
70164: LD_INT 8
70166: PUSH
70167: LD_INT 9
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: LIST
70174: IN
70175: IFFALSE 70189
// SetClass ( unit , 1 ) ;
70177: LD_VAR 0 2
70181: PPUSH
70182: LD_INT 1
70184: PPUSH
70185: CALL_OW 336
// end ;
70189: LD_VAR 0 3
70193: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
70194: LD_INT 0
70196: PPUSH
70197: PPUSH
// if not mc_bases or not skirmish then
70198: LD_EXP 13
70202: NOT
70203: PUSH
70204: LD_EXP 11
70208: NOT
70209: OR
70210: IFFALSE 70214
// exit ;
70212: GO 70330
// if GetLives ( abandoned_vehicle ) > 250 then
70214: LD_VAR 0 2
70218: PPUSH
70219: CALL_OW 256
70223: PUSH
70224: LD_INT 250
70226: GREATER
70227: IFFALSE 70231
// exit ;
70229: GO 70330
// for i = 1 to mc_bases do
70231: LD_ADDR_VAR 0 6
70235: PUSH
70236: DOUBLE
70237: LD_INT 1
70239: DEC
70240: ST_TO_ADDR
70241: LD_EXP 13
70245: PUSH
70246: FOR_TO
70247: IFFALSE 70328
// begin if driver in mc_bases [ i ] then
70249: LD_VAR 0 1
70253: PUSH
70254: LD_EXP 13
70258: PUSH
70259: LD_VAR 0 6
70263: ARRAY
70264: IN
70265: IFFALSE 70326
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
70267: LD_VAR 0 1
70271: PPUSH
70272: LD_EXP 13
70276: PUSH
70277: LD_VAR 0 6
70281: ARRAY
70282: PPUSH
70283: LD_INT 2
70285: PUSH
70286: LD_INT 30
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 30
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: LIST
70310: PPUSH
70311: CALL_OW 72
70315: PUSH
70316: LD_INT 1
70318: ARRAY
70319: PPUSH
70320: CALL_OW 112
// break ;
70324: GO 70328
// end ; end ;
70326: GO 70246
70328: POP
70329: POP
// end ; end_of_file
70330: LD_VAR 0 5
70334: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
70335: GO 70337
70337: DISABLE
// begin ru_radar := 98 ;
70338: LD_ADDR_EXP 56
70342: PUSH
70343: LD_INT 98
70345: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
70346: LD_ADDR_EXP 57
70350: PUSH
70351: LD_INT 89
70353: ST_TO_ADDR
// us_hack := 99 ;
70354: LD_ADDR_EXP 58
70358: PUSH
70359: LD_INT 99
70361: ST_TO_ADDR
// us_artillery := 97 ;
70362: LD_ADDR_EXP 59
70366: PUSH
70367: LD_INT 97
70369: ST_TO_ADDR
// ar_bio_bomb := 91 ;
70370: LD_ADDR_EXP 60
70374: PUSH
70375: LD_INT 91
70377: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
70378: LD_ADDR_EXP 61
70382: PUSH
70383: LD_INT 92
70385: ST_TO_ADDR
// tech_Artillery := 80 ;
70386: LD_ADDR_EXP 62
70390: PUSH
70391: LD_INT 80
70393: ST_TO_ADDR
// tech_RadMat := 81 ;
70394: LD_ADDR_EXP 63
70398: PUSH
70399: LD_INT 81
70401: ST_TO_ADDR
// tech_BasicTools := 82 ;
70402: LD_ADDR_EXP 64
70406: PUSH
70407: LD_INT 82
70409: ST_TO_ADDR
// tech_Cargo := 83 ;
70410: LD_ADDR_EXP 65
70414: PUSH
70415: LD_INT 83
70417: ST_TO_ADDR
// tech_Track := 84 ;
70418: LD_ADDR_EXP 66
70422: PUSH
70423: LD_INT 84
70425: ST_TO_ADDR
// tech_Crane := 85 ;
70426: LD_ADDR_EXP 67
70430: PUSH
70431: LD_INT 85
70433: ST_TO_ADDR
// tech_Bulldozer := 86 ;
70434: LD_ADDR_EXP 68
70438: PUSH
70439: LD_INT 86
70441: ST_TO_ADDR
// tech_Hovercraft := 87 ;
70442: LD_ADDR_EXP 69
70446: PUSH
70447: LD_INT 87
70449: ST_TO_ADDR
// end ; end_of_file
70450: END
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
70451: LD_INT 0
70453: PPUSH
70454: PPUSH
70455: PPUSH
70456: PPUSH
70457: PPUSH
70458: PPUSH
70459: PPUSH
70460: PPUSH
70461: PPUSH
70462: PPUSH
70463: PPUSH
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
70469: PPUSH
70470: PPUSH
70471: PPUSH
70472: PPUSH
70473: PPUSH
70474: PPUSH
70475: PPUSH
70476: PPUSH
70477: PPUSH
70478: PPUSH
70479: PPUSH
70480: PPUSH
70481: PPUSH
70482: PPUSH
70483: PPUSH
70484: PPUSH
70485: PPUSH
70486: PPUSH
// if not list then
70487: LD_VAR 0 1
70491: NOT
70492: IFFALSE 70496
// exit ;
70494: GO 75155
// base := list [ 1 ] ;
70496: LD_ADDR_VAR 0 3
70500: PUSH
70501: LD_VAR 0 1
70505: PUSH
70506: LD_INT 1
70508: ARRAY
70509: ST_TO_ADDR
// group := list [ 2 ] ;
70510: LD_ADDR_VAR 0 4
70514: PUSH
70515: LD_VAR 0 1
70519: PUSH
70520: LD_INT 2
70522: ARRAY
70523: ST_TO_ADDR
// path := list [ 3 ] ;
70524: LD_ADDR_VAR 0 5
70528: PUSH
70529: LD_VAR 0 1
70533: PUSH
70534: LD_INT 3
70536: ARRAY
70537: ST_TO_ADDR
// flags := list [ 4 ] ;
70538: LD_ADDR_VAR 0 6
70542: PUSH
70543: LD_VAR 0 1
70547: PUSH
70548: LD_INT 4
70550: ARRAY
70551: ST_TO_ADDR
// mined := [ ] ;
70552: LD_ADDR_VAR 0 27
70556: PUSH
70557: EMPTY
70558: ST_TO_ADDR
// bombed := [ ] ;
70559: LD_ADDR_VAR 0 28
70563: PUSH
70564: EMPTY
70565: ST_TO_ADDR
// healers := [ ] ;
70566: LD_ADDR_VAR 0 31
70570: PUSH
70571: EMPTY
70572: ST_TO_ADDR
// to_heal := [ ] ;
70573: LD_ADDR_VAR 0 30
70577: PUSH
70578: EMPTY
70579: ST_TO_ADDR
// repairs := [ ] ;
70580: LD_ADDR_VAR 0 33
70584: PUSH
70585: EMPTY
70586: ST_TO_ADDR
// to_repair := [ ] ;
70587: LD_ADDR_VAR 0 32
70591: PUSH
70592: EMPTY
70593: ST_TO_ADDR
// if not group or not path then
70594: LD_VAR 0 4
70598: NOT
70599: PUSH
70600: LD_VAR 0 5
70604: NOT
70605: OR
70606: IFFALSE 70610
// exit ;
70608: GO 75155
// side := GetSide ( group [ 1 ] ) ;
70610: LD_ADDR_VAR 0 35
70614: PUSH
70615: LD_VAR 0 4
70619: PUSH
70620: LD_INT 1
70622: ARRAY
70623: PPUSH
70624: CALL_OW 255
70628: ST_TO_ADDR
// if flags then
70629: LD_VAR 0 6
70633: IFFALSE 70777
// begin f_ignore_area := flags [ 1 ] ;
70635: LD_ADDR_VAR 0 17
70639: PUSH
70640: LD_VAR 0 6
70644: PUSH
70645: LD_INT 1
70647: ARRAY
70648: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
70649: LD_ADDR_VAR 0 18
70653: PUSH
70654: LD_VAR 0 6
70658: PUSH
70659: LD_INT 2
70661: ARRAY
70662: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
70663: LD_ADDR_VAR 0 19
70667: PUSH
70668: LD_VAR 0 6
70672: PUSH
70673: LD_INT 3
70675: ARRAY
70676: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
70677: LD_ADDR_VAR 0 20
70681: PUSH
70682: LD_VAR 0 6
70686: PUSH
70687: LD_INT 4
70689: ARRAY
70690: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
70691: LD_ADDR_VAR 0 21
70695: PUSH
70696: LD_VAR 0 6
70700: PUSH
70701: LD_INT 5
70703: ARRAY
70704: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
70705: LD_ADDR_VAR 0 22
70709: PUSH
70710: LD_VAR 0 6
70714: PUSH
70715: LD_INT 6
70717: ARRAY
70718: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
70719: LD_ADDR_VAR 0 23
70723: PUSH
70724: LD_VAR 0 6
70728: PUSH
70729: LD_INT 7
70731: ARRAY
70732: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
70733: LD_ADDR_VAR 0 24
70737: PUSH
70738: LD_VAR 0 6
70742: PUSH
70743: LD_INT 8
70745: ARRAY
70746: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
70747: LD_ADDR_VAR 0 25
70751: PUSH
70752: LD_VAR 0 6
70756: PUSH
70757: LD_INT 9
70759: ARRAY
70760: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
70761: LD_ADDR_VAR 0 26
70765: PUSH
70766: LD_VAR 0 6
70770: PUSH
70771: LD_INT 10
70773: ARRAY
70774: ST_TO_ADDR
// end else
70775: GO 70857
// begin f_ignore_area := false ;
70777: LD_ADDR_VAR 0 17
70781: PUSH
70782: LD_INT 0
70784: ST_TO_ADDR
// f_capture := false ;
70785: LD_ADDR_VAR 0 18
70789: PUSH
70790: LD_INT 0
70792: ST_TO_ADDR
// f_ignore_civ := false ;
70793: LD_ADDR_VAR 0 19
70797: PUSH
70798: LD_INT 0
70800: ST_TO_ADDR
// f_murder := false ;
70801: LD_ADDR_VAR 0 20
70805: PUSH
70806: LD_INT 0
70808: ST_TO_ADDR
// f_mines := false ;
70809: LD_ADDR_VAR 0 21
70813: PUSH
70814: LD_INT 0
70816: ST_TO_ADDR
// f_repair := false ;
70817: LD_ADDR_VAR 0 22
70821: PUSH
70822: LD_INT 0
70824: ST_TO_ADDR
// f_heal := false ;
70825: LD_ADDR_VAR 0 23
70829: PUSH
70830: LD_INT 0
70832: ST_TO_ADDR
// f_spacetime := false ;
70833: LD_ADDR_VAR 0 24
70837: PUSH
70838: LD_INT 0
70840: ST_TO_ADDR
// f_attack_depot := false ;
70841: LD_ADDR_VAR 0 25
70845: PUSH
70846: LD_INT 0
70848: ST_TO_ADDR
// f_crawl := false ;
70849: LD_ADDR_VAR 0 26
70853: PUSH
70854: LD_INT 0
70856: ST_TO_ADDR
// end ; if f_heal then
70857: LD_VAR 0 23
70861: IFFALSE 70888
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
70863: LD_ADDR_VAR 0 31
70867: PUSH
70868: LD_VAR 0 4
70872: PPUSH
70873: LD_INT 25
70875: PUSH
70876: LD_INT 4
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PPUSH
70883: CALL_OW 72
70887: ST_TO_ADDR
// if f_repair then
70888: LD_VAR 0 22
70892: IFFALSE 70919
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
70894: LD_ADDR_VAR 0 33
70898: PUSH
70899: LD_VAR 0 4
70903: PPUSH
70904: LD_INT 25
70906: PUSH
70907: LD_INT 3
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PPUSH
70914: CALL_OW 72
70918: ST_TO_ADDR
// units_path := [ ] ;
70919: LD_ADDR_VAR 0 16
70923: PUSH
70924: EMPTY
70925: ST_TO_ADDR
// for i = 1 to group do
70926: LD_ADDR_VAR 0 7
70930: PUSH
70931: DOUBLE
70932: LD_INT 1
70934: DEC
70935: ST_TO_ADDR
70936: LD_VAR 0 4
70940: PUSH
70941: FOR_TO
70942: IFFALSE 70971
// units_path := Replace ( units_path , i , path ) ;
70944: LD_ADDR_VAR 0 16
70948: PUSH
70949: LD_VAR 0 16
70953: PPUSH
70954: LD_VAR 0 7
70958: PPUSH
70959: LD_VAR 0 5
70963: PPUSH
70964: CALL_OW 1
70968: ST_TO_ADDR
70969: GO 70941
70971: POP
70972: POP
// repeat for i = group downto 1 do
70973: LD_ADDR_VAR 0 7
70977: PUSH
70978: DOUBLE
70979: LD_VAR 0 4
70983: INC
70984: ST_TO_ADDR
70985: LD_INT 1
70987: PUSH
70988: FOR_DOWNTO
70989: IFFALSE 75111
// begin wait ( 5 ) ;
70991: LD_INT 5
70993: PPUSH
70994: CALL_OW 67
// tmp := [ ] ;
70998: LD_ADDR_VAR 0 14
71002: PUSH
71003: EMPTY
71004: ST_TO_ADDR
// attacking := false ;
71005: LD_ADDR_VAR 0 29
71009: PUSH
71010: LD_INT 0
71012: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
71013: LD_VAR 0 4
71017: PUSH
71018: LD_VAR 0 7
71022: ARRAY
71023: PPUSH
71024: CALL_OW 301
71028: PUSH
71029: LD_VAR 0 4
71033: PUSH
71034: LD_VAR 0 7
71038: ARRAY
71039: NOT
71040: OR
71041: IFFALSE 71150
// begin if GetType ( group [ i ] ) = unit_human then
71043: LD_VAR 0 4
71047: PUSH
71048: LD_VAR 0 7
71052: ARRAY
71053: PPUSH
71054: CALL_OW 247
71058: PUSH
71059: LD_INT 1
71061: EQUAL
71062: IFFALSE 71108
// begin to_heal := to_heal diff group [ i ] ;
71064: LD_ADDR_VAR 0 30
71068: PUSH
71069: LD_VAR 0 30
71073: PUSH
71074: LD_VAR 0 4
71078: PUSH
71079: LD_VAR 0 7
71083: ARRAY
71084: DIFF
71085: ST_TO_ADDR
// healers := healers diff group [ i ] ;
71086: LD_ADDR_VAR 0 31
71090: PUSH
71091: LD_VAR 0 31
71095: PUSH
71096: LD_VAR 0 4
71100: PUSH
71101: LD_VAR 0 7
71105: ARRAY
71106: DIFF
71107: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
71108: LD_ADDR_VAR 0 4
71112: PUSH
71113: LD_VAR 0 4
71117: PPUSH
71118: LD_VAR 0 7
71122: PPUSH
71123: CALL_OW 3
71127: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
71128: LD_ADDR_VAR 0 16
71132: PUSH
71133: LD_VAR 0 16
71137: PPUSH
71138: LD_VAR 0 7
71142: PPUSH
71143: CALL_OW 3
71147: ST_TO_ADDR
// continue ;
71148: GO 70988
// end ; if f_repair then
71150: LD_VAR 0 22
71154: IFFALSE 71643
// begin if GetType ( group [ i ] ) = unit_vehicle then
71156: LD_VAR 0 4
71160: PUSH
71161: LD_VAR 0 7
71165: ARRAY
71166: PPUSH
71167: CALL_OW 247
71171: PUSH
71172: LD_INT 2
71174: EQUAL
71175: IFFALSE 71365
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
71177: LD_VAR 0 4
71181: PUSH
71182: LD_VAR 0 7
71186: ARRAY
71187: PPUSH
71188: CALL_OW 256
71192: PUSH
71193: LD_INT 700
71195: LESS
71196: PUSH
71197: LD_VAR 0 4
71201: PUSH
71202: LD_VAR 0 7
71206: ARRAY
71207: PUSH
71208: LD_VAR 0 32
71212: IN
71213: NOT
71214: AND
71215: IFFALSE 71239
// to_repair := to_repair union group [ i ] ;
71217: LD_ADDR_VAR 0 32
71221: PUSH
71222: LD_VAR 0 32
71226: PUSH
71227: LD_VAR 0 4
71231: PUSH
71232: LD_VAR 0 7
71236: ARRAY
71237: UNION
71238: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
71239: LD_VAR 0 4
71243: PUSH
71244: LD_VAR 0 7
71248: ARRAY
71249: PPUSH
71250: CALL_OW 256
71254: PUSH
71255: LD_INT 1000
71257: EQUAL
71258: PUSH
71259: LD_VAR 0 4
71263: PUSH
71264: LD_VAR 0 7
71268: ARRAY
71269: PUSH
71270: LD_VAR 0 32
71274: IN
71275: AND
71276: IFFALSE 71300
// to_repair := to_repair diff group [ i ] ;
71278: LD_ADDR_VAR 0 32
71282: PUSH
71283: LD_VAR 0 32
71287: PUSH
71288: LD_VAR 0 4
71292: PUSH
71293: LD_VAR 0 7
71297: ARRAY
71298: DIFF
71299: ST_TO_ADDR
// if group [ i ] in to_repair then
71300: LD_VAR 0 4
71304: PUSH
71305: LD_VAR 0 7
71309: ARRAY
71310: PUSH
71311: LD_VAR 0 32
71315: IN
71316: IFFALSE 71363
// begin if not IsInArea ( group [ i ] , f_repair ) then
71318: LD_VAR 0 4
71322: PUSH
71323: LD_VAR 0 7
71327: ARRAY
71328: PPUSH
71329: LD_VAR 0 22
71333: PPUSH
71334: CALL_OW 308
71338: NOT
71339: IFFALSE 71361
// ComMoveToArea ( group [ i ] , f_repair ) ;
71341: LD_VAR 0 4
71345: PUSH
71346: LD_VAR 0 7
71350: ARRAY
71351: PPUSH
71352: LD_VAR 0 22
71356: PPUSH
71357: CALL_OW 113
// continue ;
71361: GO 70988
// end ; end else
71363: GO 71643
// if group [ i ] in repairs then
71365: LD_VAR 0 4
71369: PUSH
71370: LD_VAR 0 7
71374: ARRAY
71375: PUSH
71376: LD_VAR 0 33
71380: IN
71381: IFFALSE 71643
// begin if IsInUnit ( group [ i ] ) then
71383: LD_VAR 0 4
71387: PUSH
71388: LD_VAR 0 7
71392: ARRAY
71393: PPUSH
71394: CALL_OW 310
71398: IFFALSE 71466
// begin z := IsInUnit ( group [ i ] ) ;
71400: LD_ADDR_VAR 0 13
71404: PUSH
71405: LD_VAR 0 4
71409: PUSH
71410: LD_VAR 0 7
71414: ARRAY
71415: PPUSH
71416: CALL_OW 310
71420: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
71421: LD_VAR 0 13
71425: PUSH
71426: LD_VAR 0 32
71430: IN
71431: PUSH
71432: LD_VAR 0 13
71436: PPUSH
71437: LD_VAR 0 22
71441: PPUSH
71442: CALL_OW 308
71446: AND
71447: IFFALSE 71464
// ComExitVehicle ( group [ i ] ) ;
71449: LD_VAR 0 4
71453: PUSH
71454: LD_VAR 0 7
71458: ARRAY
71459: PPUSH
71460: CALL_OW 121
// end else
71464: GO 71643
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
71466: LD_ADDR_VAR 0 13
71470: PUSH
71471: LD_VAR 0 4
71475: PPUSH
71476: LD_INT 95
71478: PUSH
71479: LD_VAR 0 22
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 58
71490: PUSH
71491: EMPTY
71492: LIST
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PPUSH
71498: CALL_OW 72
71502: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
71503: LD_VAR 0 4
71507: PUSH
71508: LD_VAR 0 7
71512: ARRAY
71513: PPUSH
71514: CALL_OW 314
71518: NOT
71519: IFFALSE 71641
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
71521: LD_ADDR_VAR 0 10
71525: PUSH
71526: LD_VAR 0 13
71530: PPUSH
71531: LD_VAR 0 4
71535: PUSH
71536: LD_VAR 0 7
71540: ARRAY
71541: PPUSH
71542: CALL_OW 74
71546: ST_TO_ADDR
// if not x then
71547: LD_VAR 0 10
71551: NOT
71552: IFFALSE 71556
// continue ;
71554: GO 70988
// if GetLives ( x ) < 1000 then
71556: LD_VAR 0 10
71560: PPUSH
71561: CALL_OW 256
71565: PUSH
71566: LD_INT 1000
71568: LESS
71569: IFFALSE 71593
// ComRepairVehicle ( group [ i ] , x ) else
71571: LD_VAR 0 4
71575: PUSH
71576: LD_VAR 0 7
71580: ARRAY
71581: PPUSH
71582: LD_VAR 0 10
71586: PPUSH
71587: CALL_OW 129
71591: GO 71641
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
71593: LD_VAR 0 23
71597: PUSH
71598: LD_VAR 0 4
71602: PUSH
71603: LD_VAR 0 7
71607: ARRAY
71608: PPUSH
71609: CALL_OW 256
71613: PUSH
71614: LD_INT 1000
71616: LESS
71617: AND
71618: NOT
71619: IFFALSE 71641
// ComEnterUnit ( group [ i ] , x ) ;
71621: LD_VAR 0 4
71625: PUSH
71626: LD_VAR 0 7
71630: ARRAY
71631: PPUSH
71632: LD_VAR 0 10
71636: PPUSH
71637: CALL_OW 120
// end ; continue ;
71641: GO 70988
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
71643: LD_VAR 0 23
71647: PUSH
71648: LD_VAR 0 4
71652: PUSH
71653: LD_VAR 0 7
71657: ARRAY
71658: PPUSH
71659: CALL_OW 247
71663: PUSH
71664: LD_INT 1
71666: EQUAL
71667: AND
71668: IFFALSE 72146
// begin if group [ i ] in healers then
71670: LD_VAR 0 4
71674: PUSH
71675: LD_VAR 0 7
71679: ARRAY
71680: PUSH
71681: LD_VAR 0 31
71685: IN
71686: IFFALSE 71959
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
71688: LD_VAR 0 4
71692: PUSH
71693: LD_VAR 0 7
71697: ARRAY
71698: PPUSH
71699: LD_VAR 0 23
71703: PPUSH
71704: CALL_OW 308
71708: NOT
71709: PUSH
71710: LD_VAR 0 4
71714: PUSH
71715: LD_VAR 0 7
71719: ARRAY
71720: PPUSH
71721: CALL_OW 314
71725: NOT
71726: AND
71727: IFFALSE 71751
// ComMoveToArea ( group [ i ] , f_heal ) else
71729: LD_VAR 0 4
71733: PUSH
71734: LD_VAR 0 7
71738: ARRAY
71739: PPUSH
71740: LD_VAR 0 23
71744: PPUSH
71745: CALL_OW 113
71749: GO 71957
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
71751: LD_VAR 0 4
71755: PUSH
71756: LD_VAR 0 7
71760: ARRAY
71761: PPUSH
71762: CALL 37282 0 1
71766: PPUSH
71767: CALL_OW 256
71771: PUSH
71772: LD_INT 1000
71774: EQUAL
71775: IFFALSE 71794
// ComStop ( group [ i ] ) else
71777: LD_VAR 0 4
71781: PUSH
71782: LD_VAR 0 7
71786: ARRAY
71787: PPUSH
71788: CALL_OW 141
71792: GO 71957
// if not HasTask ( group [ i ] ) and to_heal then
71794: LD_VAR 0 4
71798: PUSH
71799: LD_VAR 0 7
71803: ARRAY
71804: PPUSH
71805: CALL_OW 314
71809: NOT
71810: PUSH
71811: LD_VAR 0 30
71815: AND
71816: IFFALSE 71957
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
71818: LD_ADDR_VAR 0 13
71822: PUSH
71823: LD_VAR 0 30
71827: PPUSH
71828: LD_INT 3
71830: PUSH
71831: LD_INT 54
71833: PUSH
71834: EMPTY
71835: LIST
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PPUSH
71841: CALL_OW 72
71845: PPUSH
71846: LD_VAR 0 4
71850: PUSH
71851: LD_VAR 0 7
71855: ARRAY
71856: PPUSH
71857: CALL_OW 74
71861: ST_TO_ADDR
// if z then
71862: LD_VAR 0 13
71866: IFFALSE 71957
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
71868: LD_INT 91
71870: PUSH
71871: LD_VAR 0 13
71875: PUSH
71876: LD_INT 10
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 81
71886: PUSH
71887: LD_VAR 0 13
71891: PPUSH
71892: CALL_OW 255
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PPUSH
71905: CALL_OW 69
71909: PUSH
71910: LD_INT 0
71912: EQUAL
71913: IFFALSE 71937
// ComHeal ( group [ i ] , z ) else
71915: LD_VAR 0 4
71919: PUSH
71920: LD_VAR 0 7
71924: ARRAY
71925: PPUSH
71926: LD_VAR 0 13
71930: PPUSH
71931: CALL_OW 128
71935: GO 71957
// ComMoveToArea ( group [ i ] , f_heal ) ;
71937: LD_VAR 0 4
71941: PUSH
71942: LD_VAR 0 7
71946: ARRAY
71947: PPUSH
71948: LD_VAR 0 23
71952: PPUSH
71953: CALL_OW 113
// end ; continue ;
71957: GO 70988
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
71959: LD_VAR 0 4
71963: PUSH
71964: LD_VAR 0 7
71968: ARRAY
71969: PPUSH
71970: CALL_OW 256
71974: PUSH
71975: LD_INT 700
71977: LESS
71978: PUSH
71979: LD_VAR 0 4
71983: PUSH
71984: LD_VAR 0 7
71988: ARRAY
71989: PUSH
71990: LD_VAR 0 30
71994: IN
71995: NOT
71996: AND
71997: IFFALSE 72021
// to_heal := to_heal union group [ i ] ;
71999: LD_ADDR_VAR 0 30
72003: PUSH
72004: LD_VAR 0 30
72008: PUSH
72009: LD_VAR 0 4
72013: PUSH
72014: LD_VAR 0 7
72018: ARRAY
72019: UNION
72020: ST_TO_ADDR
// if group [ i ] in to_heal then
72021: LD_VAR 0 4
72025: PUSH
72026: LD_VAR 0 7
72030: ARRAY
72031: PUSH
72032: LD_VAR 0 30
72036: IN
72037: IFFALSE 72146
// begin if GetLives ( group [ i ] ) = 1000 then
72039: LD_VAR 0 4
72043: PUSH
72044: LD_VAR 0 7
72048: ARRAY
72049: PPUSH
72050: CALL_OW 256
72054: PUSH
72055: LD_INT 1000
72057: EQUAL
72058: IFFALSE 72084
// to_heal := to_heal diff group [ i ] else
72060: LD_ADDR_VAR 0 30
72064: PUSH
72065: LD_VAR 0 30
72069: PUSH
72070: LD_VAR 0 4
72074: PUSH
72075: LD_VAR 0 7
72079: ARRAY
72080: DIFF
72081: ST_TO_ADDR
72082: GO 72146
// begin if not IsInArea ( group [ i ] , to_heal ) then
72084: LD_VAR 0 4
72088: PUSH
72089: LD_VAR 0 7
72093: ARRAY
72094: PPUSH
72095: LD_VAR 0 30
72099: PPUSH
72100: CALL_OW 308
72104: NOT
72105: IFFALSE 72129
// ComMoveToArea ( group [ i ] , f_heal ) else
72107: LD_VAR 0 4
72111: PUSH
72112: LD_VAR 0 7
72116: ARRAY
72117: PPUSH
72118: LD_VAR 0 23
72122: PPUSH
72123: CALL_OW 113
72127: GO 72144
// ComHold ( group [ i ] ) ;
72129: LD_VAR 0 4
72133: PUSH
72134: LD_VAR 0 7
72138: ARRAY
72139: PPUSH
72140: CALL_OW 140
// continue ;
72144: GO 70988
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
72146: LD_VAR 0 4
72150: PUSH
72151: LD_VAR 0 7
72155: ARRAY
72156: PPUSH
72157: LD_INT 10
72159: PPUSH
72160: CALL 35702 0 2
72164: NOT
72165: PUSH
72166: LD_VAR 0 16
72170: PUSH
72171: LD_VAR 0 7
72175: ARRAY
72176: PUSH
72177: EMPTY
72178: EQUAL
72179: NOT
72180: AND
72181: IFFALSE 72447
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
72183: LD_VAR 0 4
72187: PUSH
72188: LD_VAR 0 7
72192: ARRAY
72193: PPUSH
72194: CALL_OW 262
72198: PUSH
72199: LD_INT 1
72201: PUSH
72202: LD_INT 2
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: IN
72209: IFFALSE 72250
// if GetFuel ( group [ i ] ) < 10 then
72211: LD_VAR 0 4
72215: PUSH
72216: LD_VAR 0 7
72220: ARRAY
72221: PPUSH
72222: CALL_OW 261
72226: PUSH
72227: LD_INT 10
72229: LESS
72230: IFFALSE 72250
// SetFuel ( group [ i ] , 12 ) ;
72232: LD_VAR 0 4
72236: PUSH
72237: LD_VAR 0 7
72241: ARRAY
72242: PPUSH
72243: LD_INT 12
72245: PPUSH
72246: CALL_OW 240
// if units_path [ i ] then
72250: LD_VAR 0 16
72254: PUSH
72255: LD_VAR 0 7
72259: ARRAY
72260: IFFALSE 72445
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
72262: LD_VAR 0 4
72266: PUSH
72267: LD_VAR 0 7
72271: ARRAY
72272: PPUSH
72273: LD_VAR 0 16
72277: PUSH
72278: LD_VAR 0 7
72282: ARRAY
72283: PUSH
72284: LD_INT 1
72286: ARRAY
72287: PUSH
72288: LD_INT 1
72290: ARRAY
72291: PPUSH
72292: LD_VAR 0 16
72296: PUSH
72297: LD_VAR 0 7
72301: ARRAY
72302: PUSH
72303: LD_INT 1
72305: ARRAY
72306: PUSH
72307: LD_INT 2
72309: ARRAY
72310: PPUSH
72311: CALL_OW 297
72315: PUSH
72316: LD_INT 6
72318: GREATER
72319: IFFALSE 72394
// begin if not HasTask ( group [ i ] ) then
72321: LD_VAR 0 4
72325: PUSH
72326: LD_VAR 0 7
72330: ARRAY
72331: PPUSH
72332: CALL_OW 314
72336: NOT
72337: IFFALSE 72392
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
72339: LD_VAR 0 4
72343: PUSH
72344: LD_VAR 0 7
72348: ARRAY
72349: PPUSH
72350: LD_VAR 0 16
72354: PUSH
72355: LD_VAR 0 7
72359: ARRAY
72360: PUSH
72361: LD_INT 1
72363: ARRAY
72364: PUSH
72365: LD_INT 1
72367: ARRAY
72368: PPUSH
72369: LD_VAR 0 16
72373: PUSH
72374: LD_VAR 0 7
72378: ARRAY
72379: PUSH
72380: LD_INT 1
72382: ARRAY
72383: PUSH
72384: LD_INT 2
72386: ARRAY
72387: PPUSH
72388: CALL_OW 114
// end else
72392: GO 72445
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
72394: LD_ADDR_VAR 0 15
72398: PUSH
72399: LD_VAR 0 16
72403: PUSH
72404: LD_VAR 0 7
72408: ARRAY
72409: PPUSH
72410: LD_INT 1
72412: PPUSH
72413: CALL_OW 3
72417: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
72418: LD_ADDR_VAR 0 16
72422: PUSH
72423: LD_VAR 0 16
72427: PPUSH
72428: LD_VAR 0 7
72432: PPUSH
72433: LD_VAR 0 15
72437: PPUSH
72438: CALL_OW 1
72442: ST_TO_ADDR
// continue ;
72443: GO 70988
// end ; end ; end else
72445: GO 75109
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
72447: LD_ADDR_VAR 0 14
72451: PUSH
72452: LD_INT 81
72454: PUSH
72455: LD_VAR 0 4
72459: PUSH
72460: LD_VAR 0 7
72464: ARRAY
72465: PPUSH
72466: CALL_OW 255
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PPUSH
72475: CALL_OW 69
72479: ST_TO_ADDR
// if not tmp then
72480: LD_VAR 0 14
72484: NOT
72485: IFFALSE 72489
// continue ;
72487: GO 70988
// if f_ignore_area then
72489: LD_VAR 0 17
72493: IFFALSE 72581
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
72495: LD_ADDR_VAR 0 15
72499: PUSH
72500: LD_VAR 0 14
72504: PPUSH
72505: LD_INT 3
72507: PUSH
72508: LD_INT 92
72510: PUSH
72511: LD_VAR 0 17
72515: PUSH
72516: LD_INT 1
72518: ARRAY
72519: PUSH
72520: LD_VAR 0 17
72524: PUSH
72525: LD_INT 2
72527: ARRAY
72528: PUSH
72529: LD_VAR 0 17
72533: PUSH
72534: LD_INT 3
72536: ARRAY
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PPUSH
72548: CALL_OW 72
72552: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
72553: LD_VAR 0 14
72557: PUSH
72558: LD_VAR 0 15
72562: DIFF
72563: IFFALSE 72581
// tmp := tmp diff tmp2 ;
72565: LD_ADDR_VAR 0 14
72569: PUSH
72570: LD_VAR 0 14
72574: PUSH
72575: LD_VAR 0 15
72579: DIFF
72580: ST_TO_ADDR
// end ; if not f_murder then
72581: LD_VAR 0 20
72585: NOT
72586: IFFALSE 72644
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
72588: LD_ADDR_VAR 0 15
72592: PUSH
72593: LD_VAR 0 14
72597: PPUSH
72598: LD_INT 3
72600: PUSH
72601: LD_INT 50
72603: PUSH
72604: EMPTY
72605: LIST
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PPUSH
72611: CALL_OW 72
72615: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
72616: LD_VAR 0 14
72620: PUSH
72621: LD_VAR 0 15
72625: DIFF
72626: IFFALSE 72644
// tmp := tmp diff tmp2 ;
72628: LD_ADDR_VAR 0 14
72632: PUSH
72633: LD_VAR 0 14
72637: PUSH
72638: LD_VAR 0 15
72642: DIFF
72643: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
72644: LD_ADDR_VAR 0 14
72648: PUSH
72649: LD_VAR 0 4
72653: PUSH
72654: LD_VAR 0 7
72658: ARRAY
72659: PPUSH
72660: LD_VAR 0 14
72664: PPUSH
72665: LD_INT 1
72667: PPUSH
72668: LD_INT 1
72670: PPUSH
72671: CALL 9345 0 4
72675: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
72676: LD_VAR 0 4
72680: PUSH
72681: LD_VAR 0 7
72685: ARRAY
72686: PPUSH
72687: CALL_OW 257
72691: PUSH
72692: LD_INT 1
72694: EQUAL
72695: IFFALSE 73143
// begin if WantPlant ( group [ i ] ) then
72697: LD_VAR 0 4
72701: PUSH
72702: LD_VAR 0 7
72706: ARRAY
72707: PPUSH
72708: CALL 8846 0 1
72712: IFFALSE 72716
// continue ;
72714: GO 70988
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
72716: LD_VAR 0 18
72720: PUSH
72721: LD_VAR 0 4
72725: PUSH
72726: LD_VAR 0 7
72730: ARRAY
72731: PPUSH
72732: CALL_OW 310
72736: NOT
72737: AND
72738: PUSH
72739: LD_VAR 0 14
72743: PUSH
72744: LD_INT 1
72746: ARRAY
72747: PUSH
72748: LD_VAR 0 14
72752: PPUSH
72753: LD_INT 21
72755: PUSH
72756: LD_INT 2
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 58
72765: PUSH
72766: EMPTY
72767: LIST
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PPUSH
72773: CALL_OW 72
72777: IN
72778: AND
72779: IFFALSE 72815
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
72781: LD_VAR 0 4
72785: PUSH
72786: LD_VAR 0 7
72790: ARRAY
72791: PPUSH
72792: LD_VAR 0 14
72796: PUSH
72797: LD_INT 1
72799: ARRAY
72800: PPUSH
72801: CALL_OW 120
// attacking := true ;
72805: LD_ADDR_VAR 0 29
72809: PUSH
72810: LD_INT 1
72812: ST_TO_ADDR
// continue ;
72813: GO 70988
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
72815: LD_VAR 0 26
72819: PUSH
72820: LD_VAR 0 4
72824: PUSH
72825: LD_VAR 0 7
72829: ARRAY
72830: PPUSH
72831: CALL_OW 257
72835: PUSH
72836: LD_INT 1
72838: EQUAL
72839: AND
72840: PUSH
72841: LD_VAR 0 4
72845: PUSH
72846: LD_VAR 0 7
72850: ARRAY
72851: PPUSH
72852: CALL_OW 256
72856: PUSH
72857: LD_INT 800
72859: LESS
72860: AND
72861: PUSH
72862: LD_VAR 0 4
72866: PUSH
72867: LD_VAR 0 7
72871: ARRAY
72872: PPUSH
72873: CALL_OW 318
72877: NOT
72878: AND
72879: IFFALSE 72896
// ComCrawl ( group [ i ] ) ;
72881: LD_VAR 0 4
72885: PUSH
72886: LD_VAR 0 7
72890: ARRAY
72891: PPUSH
72892: CALL_OW 137
// if f_mines then
72896: LD_VAR 0 21
72900: IFFALSE 73143
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
72902: LD_VAR 0 14
72906: PUSH
72907: LD_INT 1
72909: ARRAY
72910: PPUSH
72911: CALL_OW 247
72915: PUSH
72916: LD_INT 3
72918: EQUAL
72919: PUSH
72920: LD_VAR 0 14
72924: PUSH
72925: LD_INT 1
72927: ARRAY
72928: PUSH
72929: LD_VAR 0 27
72933: IN
72934: NOT
72935: AND
72936: IFFALSE 73143
// begin x := GetX ( tmp [ 1 ] ) ;
72938: LD_ADDR_VAR 0 10
72942: PUSH
72943: LD_VAR 0 14
72947: PUSH
72948: LD_INT 1
72950: ARRAY
72951: PPUSH
72952: CALL_OW 250
72956: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
72957: LD_ADDR_VAR 0 11
72961: PUSH
72962: LD_VAR 0 14
72966: PUSH
72967: LD_INT 1
72969: ARRAY
72970: PPUSH
72971: CALL_OW 251
72975: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
72976: LD_ADDR_VAR 0 12
72980: PUSH
72981: LD_VAR 0 4
72985: PUSH
72986: LD_VAR 0 7
72990: ARRAY
72991: PPUSH
72992: CALL 35787 0 1
72996: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
72997: LD_VAR 0 4
73001: PUSH
73002: LD_VAR 0 7
73006: ARRAY
73007: PPUSH
73008: LD_VAR 0 10
73012: PPUSH
73013: LD_VAR 0 11
73017: PPUSH
73018: LD_VAR 0 14
73022: PUSH
73023: LD_INT 1
73025: ARRAY
73026: PPUSH
73027: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
73031: LD_VAR 0 4
73035: PUSH
73036: LD_VAR 0 7
73040: ARRAY
73041: PPUSH
73042: LD_VAR 0 10
73046: PPUSH
73047: LD_VAR 0 12
73051: PPUSH
73052: LD_INT 7
73054: PPUSH
73055: CALL_OW 272
73059: PPUSH
73060: LD_VAR 0 11
73064: PPUSH
73065: LD_VAR 0 12
73069: PPUSH
73070: LD_INT 7
73072: PPUSH
73073: CALL_OW 273
73077: PPUSH
73078: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
73082: LD_VAR 0 4
73086: PUSH
73087: LD_VAR 0 7
73091: ARRAY
73092: PPUSH
73093: LD_INT 71
73095: PPUSH
73096: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
73100: LD_ADDR_VAR 0 27
73104: PUSH
73105: LD_VAR 0 27
73109: PPUSH
73110: LD_VAR 0 27
73114: PUSH
73115: LD_INT 1
73117: PLUS
73118: PPUSH
73119: LD_VAR 0 14
73123: PUSH
73124: LD_INT 1
73126: ARRAY
73127: PPUSH
73128: CALL_OW 1
73132: ST_TO_ADDR
// attacking := true ;
73133: LD_ADDR_VAR 0 29
73137: PUSH
73138: LD_INT 1
73140: ST_TO_ADDR
// continue ;
73141: GO 70988
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
73143: LD_VAR 0 4
73147: PUSH
73148: LD_VAR 0 7
73152: ARRAY
73153: PPUSH
73154: CALL_OW 257
73158: PUSH
73159: LD_INT 17
73161: EQUAL
73162: PUSH
73163: LD_VAR 0 4
73167: PUSH
73168: LD_VAR 0 7
73172: ARRAY
73173: PPUSH
73174: CALL_OW 110
73178: PUSH
73179: LD_INT 71
73181: EQUAL
73182: NOT
73183: AND
73184: IFFALSE 73330
// begin attacking := false ;
73186: LD_ADDR_VAR 0 29
73190: PUSH
73191: LD_INT 0
73193: ST_TO_ADDR
// k := 5 ;
73194: LD_ADDR_VAR 0 9
73198: PUSH
73199: LD_INT 5
73201: ST_TO_ADDR
// if tmp < k then
73202: LD_VAR 0 14
73206: PUSH
73207: LD_VAR 0 9
73211: LESS
73212: IFFALSE 73224
// k := tmp ;
73214: LD_ADDR_VAR 0 9
73218: PUSH
73219: LD_VAR 0 14
73223: ST_TO_ADDR
// for j = 1 to k do
73224: LD_ADDR_VAR 0 8
73228: PUSH
73229: DOUBLE
73230: LD_INT 1
73232: DEC
73233: ST_TO_ADDR
73234: LD_VAR 0 9
73238: PUSH
73239: FOR_TO
73240: IFFALSE 73328
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
73242: LD_VAR 0 14
73246: PUSH
73247: LD_VAR 0 8
73251: ARRAY
73252: PUSH
73253: LD_VAR 0 14
73257: PPUSH
73258: LD_INT 58
73260: PUSH
73261: EMPTY
73262: LIST
73263: PPUSH
73264: CALL_OW 72
73268: IN
73269: NOT
73270: IFFALSE 73326
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
73272: LD_VAR 0 4
73276: PUSH
73277: LD_VAR 0 7
73281: ARRAY
73282: PPUSH
73283: LD_VAR 0 14
73287: PUSH
73288: LD_VAR 0 8
73292: ARRAY
73293: PPUSH
73294: CALL_OW 115
// attacking := true ;
73298: LD_ADDR_VAR 0 29
73302: PUSH
73303: LD_INT 1
73305: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
73306: LD_VAR 0 4
73310: PUSH
73311: LD_VAR 0 7
73315: ARRAY
73316: PPUSH
73317: LD_INT 71
73319: PPUSH
73320: CALL_OW 109
// continue ;
73324: GO 73239
// end ; end ;
73326: GO 73239
73328: POP
73329: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
73330: LD_VAR 0 4
73334: PUSH
73335: LD_VAR 0 7
73339: ARRAY
73340: PPUSH
73341: CALL_OW 257
73345: PUSH
73346: LD_INT 8
73348: EQUAL
73349: PUSH
73350: LD_VAR 0 4
73354: PUSH
73355: LD_VAR 0 7
73359: ARRAY
73360: PPUSH
73361: CALL_OW 264
73365: PUSH
73366: LD_INT 28
73368: PUSH
73369: LD_INT 45
73371: PUSH
73372: LD_INT 7
73374: PUSH
73375: LD_INT 47
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: IN
73384: OR
73385: IFFALSE 73641
// begin attacking := false ;
73387: LD_ADDR_VAR 0 29
73391: PUSH
73392: LD_INT 0
73394: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
73395: LD_VAR 0 14
73399: PUSH
73400: LD_INT 1
73402: ARRAY
73403: PPUSH
73404: CALL_OW 266
73408: PUSH
73409: LD_INT 32
73411: PUSH
73412: LD_INT 31
73414: PUSH
73415: LD_INT 33
73417: PUSH
73418: LD_INT 4
73420: PUSH
73421: LD_INT 5
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: IN
73431: IFFALSE 73617
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
73433: LD_ADDR_VAR 0 9
73437: PUSH
73438: LD_VAR 0 14
73442: PUSH
73443: LD_INT 1
73445: ARRAY
73446: PPUSH
73447: CALL_OW 266
73451: PPUSH
73452: LD_VAR 0 14
73456: PUSH
73457: LD_INT 1
73459: ARRAY
73460: PPUSH
73461: CALL_OW 250
73465: PPUSH
73466: LD_VAR 0 14
73470: PUSH
73471: LD_INT 1
73473: ARRAY
73474: PPUSH
73475: CALL_OW 251
73479: PPUSH
73480: LD_VAR 0 14
73484: PUSH
73485: LD_INT 1
73487: ARRAY
73488: PPUSH
73489: CALL_OW 254
73493: PPUSH
73494: LD_VAR 0 14
73498: PUSH
73499: LD_INT 1
73501: ARRAY
73502: PPUSH
73503: CALL_OW 248
73507: PPUSH
73508: LD_INT 0
73510: PPUSH
73511: CALL 17157 0 6
73515: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
73516: LD_ADDR_VAR 0 8
73520: PUSH
73521: LD_VAR 0 4
73525: PUSH
73526: LD_VAR 0 7
73530: ARRAY
73531: PPUSH
73532: LD_VAR 0 9
73536: PPUSH
73537: CALL 35827 0 2
73541: ST_TO_ADDR
// if j then
73542: LD_VAR 0 8
73546: IFFALSE 73615
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
73548: LD_VAR 0 8
73552: PUSH
73553: LD_INT 1
73555: ARRAY
73556: PPUSH
73557: LD_VAR 0 8
73561: PUSH
73562: LD_INT 2
73564: ARRAY
73565: PPUSH
73566: CALL_OW 488
73570: IFFALSE 73615
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
73572: LD_VAR 0 4
73576: PUSH
73577: LD_VAR 0 7
73581: ARRAY
73582: PPUSH
73583: LD_VAR 0 8
73587: PUSH
73588: LD_INT 1
73590: ARRAY
73591: PPUSH
73592: LD_VAR 0 8
73596: PUSH
73597: LD_INT 2
73599: ARRAY
73600: PPUSH
73601: CALL_OW 116
// attacking := true ;
73605: LD_ADDR_VAR 0 29
73609: PUSH
73610: LD_INT 1
73612: ST_TO_ADDR
// continue ;
73613: GO 70988
// end ; end else
73615: GO 73641
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
73617: LD_VAR 0 4
73621: PUSH
73622: LD_VAR 0 7
73626: ARRAY
73627: PPUSH
73628: LD_VAR 0 14
73632: PUSH
73633: LD_INT 1
73635: ARRAY
73636: PPUSH
73637: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
73641: LD_VAR 0 4
73645: PUSH
73646: LD_VAR 0 7
73650: ARRAY
73651: PPUSH
73652: CALL_OW 265
73656: PUSH
73657: LD_INT 11
73659: EQUAL
73660: IFFALSE 73938
// begin k := 10 ;
73662: LD_ADDR_VAR 0 9
73666: PUSH
73667: LD_INT 10
73669: ST_TO_ADDR
// x := 0 ;
73670: LD_ADDR_VAR 0 10
73674: PUSH
73675: LD_INT 0
73677: ST_TO_ADDR
// if tmp < k then
73678: LD_VAR 0 14
73682: PUSH
73683: LD_VAR 0 9
73687: LESS
73688: IFFALSE 73700
// k := tmp ;
73690: LD_ADDR_VAR 0 9
73694: PUSH
73695: LD_VAR 0 14
73699: ST_TO_ADDR
// for j = k downto 1 do
73700: LD_ADDR_VAR 0 8
73704: PUSH
73705: DOUBLE
73706: LD_VAR 0 9
73710: INC
73711: ST_TO_ADDR
73712: LD_INT 1
73714: PUSH
73715: FOR_DOWNTO
73716: IFFALSE 73791
// begin if GetType ( tmp [ j ] ) = unit_human then
73718: LD_VAR 0 14
73722: PUSH
73723: LD_VAR 0 8
73727: ARRAY
73728: PPUSH
73729: CALL_OW 247
73733: PUSH
73734: LD_INT 1
73736: EQUAL
73737: IFFALSE 73789
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
73739: LD_VAR 0 4
73743: PUSH
73744: LD_VAR 0 7
73748: ARRAY
73749: PPUSH
73750: LD_VAR 0 14
73754: PUSH
73755: LD_VAR 0 8
73759: ARRAY
73760: PPUSH
73761: CALL 36098 0 2
// x := tmp [ j ] ;
73765: LD_ADDR_VAR 0 10
73769: PUSH
73770: LD_VAR 0 14
73774: PUSH
73775: LD_VAR 0 8
73779: ARRAY
73780: ST_TO_ADDR
// attacking := true ;
73781: LD_ADDR_VAR 0 29
73785: PUSH
73786: LD_INT 1
73788: ST_TO_ADDR
// end ; end ;
73789: GO 73715
73791: POP
73792: POP
// if not x then
73793: LD_VAR 0 10
73797: NOT
73798: IFFALSE 73938
// begin attacking := true ;
73800: LD_ADDR_VAR 0 29
73804: PUSH
73805: LD_INT 1
73807: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
73808: LD_VAR 0 4
73812: PUSH
73813: LD_VAR 0 7
73817: ARRAY
73818: PPUSH
73819: CALL_OW 250
73823: PPUSH
73824: LD_VAR 0 4
73828: PUSH
73829: LD_VAR 0 7
73833: ARRAY
73834: PPUSH
73835: CALL_OW 251
73839: PPUSH
73840: CALL_OW 546
73844: PUSH
73845: LD_INT 2
73847: ARRAY
73848: PUSH
73849: LD_VAR 0 14
73853: PUSH
73854: LD_INT 1
73856: ARRAY
73857: PPUSH
73858: CALL_OW 250
73862: PPUSH
73863: LD_VAR 0 14
73867: PUSH
73868: LD_INT 1
73870: ARRAY
73871: PPUSH
73872: CALL_OW 251
73876: PPUSH
73877: CALL_OW 546
73881: PUSH
73882: LD_INT 2
73884: ARRAY
73885: EQUAL
73886: IFFALSE 73914
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
73888: LD_VAR 0 4
73892: PUSH
73893: LD_VAR 0 7
73897: ARRAY
73898: PPUSH
73899: LD_VAR 0 14
73903: PUSH
73904: LD_INT 1
73906: ARRAY
73907: PPUSH
73908: CALL 36098 0 2
73912: GO 73938
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
73914: LD_VAR 0 4
73918: PUSH
73919: LD_VAR 0 7
73923: ARRAY
73924: PPUSH
73925: LD_VAR 0 14
73929: PUSH
73930: LD_INT 1
73932: ARRAY
73933: PPUSH
73934: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
73938: LD_VAR 0 4
73942: PUSH
73943: LD_VAR 0 7
73947: ARRAY
73948: PPUSH
73949: CALL_OW 264
73953: PUSH
73954: LD_INT 29
73956: EQUAL
73957: IFFALSE 74323
// begin if WantsToAttack ( group [ i ] ) in bombed then
73959: LD_VAR 0 4
73963: PUSH
73964: LD_VAR 0 7
73968: ARRAY
73969: PPUSH
73970: CALL_OW 319
73974: PUSH
73975: LD_VAR 0 28
73979: IN
73980: IFFALSE 73984
// continue ;
73982: GO 70988
// k := 8 ;
73984: LD_ADDR_VAR 0 9
73988: PUSH
73989: LD_INT 8
73991: ST_TO_ADDR
// x := 0 ;
73992: LD_ADDR_VAR 0 10
73996: PUSH
73997: LD_INT 0
73999: ST_TO_ADDR
// if tmp < k then
74000: LD_VAR 0 14
74004: PUSH
74005: LD_VAR 0 9
74009: LESS
74010: IFFALSE 74022
// k := tmp ;
74012: LD_ADDR_VAR 0 9
74016: PUSH
74017: LD_VAR 0 14
74021: ST_TO_ADDR
// for j = 1 to k do
74022: LD_ADDR_VAR 0 8
74026: PUSH
74027: DOUBLE
74028: LD_INT 1
74030: DEC
74031: ST_TO_ADDR
74032: LD_VAR 0 9
74036: PUSH
74037: FOR_TO
74038: IFFALSE 74170
// begin if GetType ( tmp [ j ] ) = unit_building then
74040: LD_VAR 0 14
74044: PUSH
74045: LD_VAR 0 8
74049: ARRAY
74050: PPUSH
74051: CALL_OW 247
74055: PUSH
74056: LD_INT 3
74058: EQUAL
74059: IFFALSE 74168
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
74061: LD_VAR 0 14
74065: PUSH
74066: LD_VAR 0 8
74070: ARRAY
74071: PUSH
74072: LD_VAR 0 28
74076: IN
74077: NOT
74078: PUSH
74079: LD_VAR 0 14
74083: PUSH
74084: LD_VAR 0 8
74088: ARRAY
74089: PPUSH
74090: CALL_OW 313
74094: AND
74095: IFFALSE 74168
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74097: LD_VAR 0 4
74101: PUSH
74102: LD_VAR 0 7
74106: ARRAY
74107: PPUSH
74108: LD_VAR 0 14
74112: PUSH
74113: LD_VAR 0 8
74117: ARRAY
74118: PPUSH
74119: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
74123: LD_ADDR_VAR 0 28
74127: PUSH
74128: LD_VAR 0 28
74132: PPUSH
74133: LD_VAR 0 28
74137: PUSH
74138: LD_INT 1
74140: PLUS
74141: PPUSH
74142: LD_VAR 0 14
74146: PUSH
74147: LD_VAR 0 8
74151: ARRAY
74152: PPUSH
74153: CALL_OW 1
74157: ST_TO_ADDR
// attacking := true ;
74158: LD_ADDR_VAR 0 29
74162: PUSH
74163: LD_INT 1
74165: ST_TO_ADDR
// break ;
74166: GO 74170
// end ; end ;
74168: GO 74037
74170: POP
74171: POP
// if not attacking and f_attack_depot then
74172: LD_VAR 0 29
74176: NOT
74177: PUSH
74178: LD_VAR 0 25
74182: AND
74183: IFFALSE 74278
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74185: LD_ADDR_VAR 0 13
74189: PUSH
74190: LD_VAR 0 14
74194: PPUSH
74195: LD_INT 2
74197: PUSH
74198: LD_INT 30
74200: PUSH
74201: LD_INT 0
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: PUSH
74208: LD_INT 30
74210: PUSH
74211: LD_INT 1
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: LIST
74222: PPUSH
74223: CALL_OW 72
74227: ST_TO_ADDR
// if z then
74228: LD_VAR 0 13
74232: IFFALSE 74278
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
74234: LD_VAR 0 4
74238: PUSH
74239: LD_VAR 0 7
74243: ARRAY
74244: PPUSH
74245: LD_VAR 0 13
74249: PPUSH
74250: LD_VAR 0 4
74254: PUSH
74255: LD_VAR 0 7
74259: ARRAY
74260: PPUSH
74261: CALL_OW 74
74265: PPUSH
74266: CALL_OW 115
// attacking := true ;
74270: LD_ADDR_VAR 0 29
74274: PUSH
74275: LD_INT 1
74277: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
74278: LD_VAR 0 4
74282: PUSH
74283: LD_VAR 0 7
74287: ARRAY
74288: PPUSH
74289: CALL_OW 256
74293: PUSH
74294: LD_INT 500
74296: LESS
74297: IFFALSE 74323
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74299: LD_VAR 0 4
74303: PUSH
74304: LD_VAR 0 7
74308: ARRAY
74309: PPUSH
74310: LD_VAR 0 14
74314: PUSH
74315: LD_INT 1
74317: ARRAY
74318: PPUSH
74319: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
74323: LD_VAR 0 4
74327: PUSH
74328: LD_VAR 0 7
74332: ARRAY
74333: PPUSH
74334: CALL_OW 264
74338: PUSH
74339: LD_INT 49
74341: EQUAL
74342: IFFALSE 74463
// begin if not HasTask ( group [ i ] ) then
74344: LD_VAR 0 4
74348: PUSH
74349: LD_VAR 0 7
74353: ARRAY
74354: PPUSH
74355: CALL_OW 314
74359: NOT
74360: IFFALSE 74463
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
74362: LD_ADDR_VAR 0 9
74366: PUSH
74367: LD_INT 81
74369: PUSH
74370: LD_VAR 0 4
74374: PUSH
74375: LD_VAR 0 7
74379: ARRAY
74380: PPUSH
74381: CALL_OW 255
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PPUSH
74390: CALL_OW 69
74394: PPUSH
74395: LD_VAR 0 4
74399: PUSH
74400: LD_VAR 0 7
74404: ARRAY
74405: PPUSH
74406: CALL_OW 74
74410: ST_TO_ADDR
// if k then
74411: LD_VAR 0 9
74415: IFFALSE 74463
// if GetDistUnits ( group [ i ] , k ) > 10 then
74417: LD_VAR 0 4
74421: PUSH
74422: LD_VAR 0 7
74426: ARRAY
74427: PPUSH
74428: LD_VAR 0 9
74432: PPUSH
74433: CALL_OW 296
74437: PUSH
74438: LD_INT 10
74440: GREATER
74441: IFFALSE 74463
// ComMoveUnit ( group [ i ] , k ) ;
74443: LD_VAR 0 4
74447: PUSH
74448: LD_VAR 0 7
74452: ARRAY
74453: PPUSH
74454: LD_VAR 0 9
74458: PPUSH
74459: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74463: LD_VAR 0 4
74467: PUSH
74468: LD_VAR 0 7
74472: ARRAY
74473: PPUSH
74474: CALL_OW 256
74478: PUSH
74479: LD_INT 250
74481: LESS
74482: PUSH
74483: LD_VAR 0 4
74487: PUSH
74488: LD_VAR 0 7
74492: ARRAY
74493: PUSH
74494: LD_INT 21
74496: PUSH
74497: LD_INT 2
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 23
74506: PUSH
74507: LD_INT 2
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PPUSH
74518: CALL_OW 69
74522: IN
74523: AND
74524: IFFALSE 74649
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
74526: LD_ADDR_VAR 0 9
74530: PUSH
74531: LD_OWVAR 3
74535: PUSH
74536: LD_VAR 0 4
74540: PUSH
74541: LD_VAR 0 7
74545: ARRAY
74546: DIFF
74547: PPUSH
74548: LD_VAR 0 4
74552: PUSH
74553: LD_VAR 0 7
74557: ARRAY
74558: PPUSH
74559: CALL_OW 74
74563: ST_TO_ADDR
// if not k then
74564: LD_VAR 0 9
74568: NOT
74569: IFFALSE 74573
// continue ;
74571: GO 70988
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
74573: LD_VAR 0 9
74577: PUSH
74578: LD_INT 81
74580: PUSH
74581: LD_VAR 0 4
74585: PUSH
74586: LD_VAR 0 7
74590: ARRAY
74591: PPUSH
74592: CALL_OW 255
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PPUSH
74601: CALL_OW 69
74605: IN
74606: PUSH
74607: LD_VAR 0 9
74611: PPUSH
74612: LD_VAR 0 4
74616: PUSH
74617: LD_VAR 0 7
74621: ARRAY
74622: PPUSH
74623: CALL_OW 296
74627: PUSH
74628: LD_INT 5
74630: LESS
74631: AND
74632: IFFALSE 74649
// ComAutodestruct ( group [ i ] ) ;
74634: LD_VAR 0 4
74638: PUSH
74639: LD_VAR 0 7
74643: ARRAY
74644: PPUSH
74645: CALL 35996 0 1
// end ; if f_attack_depot then
74649: LD_VAR 0 25
74653: IFFALSE 74765
// begin k := 6 ;
74655: LD_ADDR_VAR 0 9
74659: PUSH
74660: LD_INT 6
74662: ST_TO_ADDR
// if tmp < k then
74663: LD_VAR 0 14
74667: PUSH
74668: LD_VAR 0 9
74672: LESS
74673: IFFALSE 74685
// k := tmp ;
74675: LD_ADDR_VAR 0 9
74679: PUSH
74680: LD_VAR 0 14
74684: ST_TO_ADDR
// for j = 1 to k do
74685: LD_ADDR_VAR 0 8
74689: PUSH
74690: DOUBLE
74691: LD_INT 1
74693: DEC
74694: ST_TO_ADDR
74695: LD_VAR 0 9
74699: PUSH
74700: FOR_TO
74701: IFFALSE 74763
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
74703: LD_VAR 0 8
74707: PPUSH
74708: CALL_OW 266
74712: PUSH
74713: LD_INT 0
74715: PUSH
74716: LD_INT 1
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: IN
74723: IFFALSE 74761
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74725: LD_VAR 0 4
74729: PUSH
74730: LD_VAR 0 7
74734: ARRAY
74735: PPUSH
74736: LD_VAR 0 14
74740: PUSH
74741: LD_VAR 0 8
74745: ARRAY
74746: PPUSH
74747: CALL_OW 115
// attacking := true ;
74751: LD_ADDR_VAR 0 29
74755: PUSH
74756: LD_INT 1
74758: ST_TO_ADDR
// break ;
74759: GO 74763
// end ;
74761: GO 74700
74763: POP
74764: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
74765: LD_VAR 0 4
74769: PUSH
74770: LD_VAR 0 7
74774: ARRAY
74775: PPUSH
74776: CALL_OW 302
74780: PUSH
74781: LD_VAR 0 29
74785: NOT
74786: AND
74787: IFFALSE 75109
// begin if GetTag ( group [ i ] ) = 71 then
74789: LD_VAR 0 4
74793: PUSH
74794: LD_VAR 0 7
74798: ARRAY
74799: PPUSH
74800: CALL_OW 110
74804: PUSH
74805: LD_INT 71
74807: EQUAL
74808: IFFALSE 74849
// begin if HasTask ( group [ i ] ) then
74810: LD_VAR 0 4
74814: PUSH
74815: LD_VAR 0 7
74819: ARRAY
74820: PPUSH
74821: CALL_OW 314
74825: IFFALSE 74831
// continue else
74827: GO 70988
74829: GO 74849
// SetTag ( group [ i ] , 0 ) ;
74831: LD_VAR 0 4
74835: PUSH
74836: LD_VAR 0 7
74840: ARRAY
74841: PPUSH
74842: LD_INT 0
74844: PPUSH
74845: CALL_OW 109
// end ; k := 8 ;
74849: LD_ADDR_VAR 0 9
74853: PUSH
74854: LD_INT 8
74856: ST_TO_ADDR
// x := 0 ;
74857: LD_ADDR_VAR 0 10
74861: PUSH
74862: LD_INT 0
74864: ST_TO_ADDR
// if tmp < k then
74865: LD_VAR 0 14
74869: PUSH
74870: LD_VAR 0 9
74874: LESS
74875: IFFALSE 74887
// k := tmp ;
74877: LD_ADDR_VAR 0 9
74881: PUSH
74882: LD_VAR 0 14
74886: ST_TO_ADDR
// for j = 1 to k do
74887: LD_ADDR_VAR 0 8
74891: PUSH
74892: DOUBLE
74893: LD_INT 1
74895: DEC
74896: ST_TO_ADDR
74897: LD_VAR 0 9
74901: PUSH
74902: FOR_TO
74903: IFFALSE 75001
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
74905: LD_VAR 0 14
74909: PUSH
74910: LD_VAR 0 8
74914: ARRAY
74915: PPUSH
74916: CALL_OW 247
74920: PUSH
74921: LD_INT 1
74923: EQUAL
74924: PUSH
74925: LD_VAR 0 14
74929: PUSH
74930: LD_VAR 0 8
74934: ARRAY
74935: PPUSH
74936: CALL_OW 256
74940: PUSH
74941: LD_INT 250
74943: LESS
74944: PUSH
74945: LD_VAR 0 20
74949: AND
74950: PUSH
74951: LD_VAR 0 20
74955: NOT
74956: PUSH
74957: LD_VAR 0 14
74961: PUSH
74962: LD_VAR 0 8
74966: ARRAY
74967: PPUSH
74968: CALL_OW 256
74972: PUSH
74973: LD_INT 250
74975: GREATEREQUAL
74976: AND
74977: OR
74978: AND
74979: IFFALSE 74999
// begin x := tmp [ j ] ;
74981: LD_ADDR_VAR 0 10
74985: PUSH
74986: LD_VAR 0 14
74990: PUSH
74991: LD_VAR 0 8
74995: ARRAY
74996: ST_TO_ADDR
// break ;
74997: GO 75001
// end ;
74999: GO 74902
75001: POP
75002: POP
// if x then
75003: LD_VAR 0 10
75007: IFFALSE 75031
// ComAttackUnit ( group [ i ] , x ) else
75009: LD_VAR 0 4
75013: PUSH
75014: LD_VAR 0 7
75018: ARRAY
75019: PPUSH
75020: LD_VAR 0 10
75024: PPUSH
75025: CALL_OW 115
75029: GO 75055
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
75031: LD_VAR 0 4
75035: PUSH
75036: LD_VAR 0 7
75040: ARRAY
75041: PPUSH
75042: LD_VAR 0 14
75046: PUSH
75047: LD_INT 1
75049: ARRAY
75050: PPUSH
75051: CALL_OW 115
// if not HasTask ( group [ i ] ) then
75055: LD_VAR 0 4
75059: PUSH
75060: LD_VAR 0 7
75064: ARRAY
75065: PPUSH
75066: CALL_OW 314
75070: NOT
75071: IFFALSE 75109
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
75073: LD_VAR 0 4
75077: PUSH
75078: LD_VAR 0 7
75082: ARRAY
75083: PPUSH
75084: LD_VAR 0 14
75088: PPUSH
75089: LD_VAR 0 4
75093: PUSH
75094: LD_VAR 0 7
75098: ARRAY
75099: PPUSH
75100: CALL_OW 74
75104: PPUSH
75105: CALL_OW 115
// end ; end ; end ;
75109: GO 70988
75111: POP
75112: POP
// wait ( 0 0$2 ) ;
75113: LD_INT 70
75115: PPUSH
75116: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
75120: LD_VAR 0 4
75124: NOT
75125: PUSH
75126: LD_VAR 0 4
75130: PUSH
75131: EMPTY
75132: EQUAL
75133: OR
75134: PUSH
75135: LD_INT 81
75137: PUSH
75138: LD_VAR 0 35
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PPUSH
75147: CALL_OW 69
75151: NOT
75152: OR
75153: IFFALSE 70973
// end ;
75155: LD_VAR 0 2
75159: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
75160: LD_INT 0
75162: PPUSH
75163: PPUSH
75164: PPUSH
75165: PPUSH
75166: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
75167: LD_VAR 0 1
75171: NOT
75172: PUSH
75173: LD_EXP 13
75177: PUSH
75178: LD_VAR 0 1
75182: ARRAY
75183: NOT
75184: OR
75185: PUSH
75186: LD_VAR 0 2
75190: NOT
75191: OR
75192: PUSH
75193: LD_VAR 0 3
75197: NOT
75198: OR
75199: IFFALSE 75203
// exit ;
75201: GO 75716
// side := mc_sides [ base ] ;
75203: LD_ADDR_VAR 0 6
75207: PUSH
75208: LD_EXP 39
75212: PUSH
75213: LD_VAR 0 1
75217: ARRAY
75218: ST_TO_ADDR
// if not side then
75219: LD_VAR 0 6
75223: NOT
75224: IFFALSE 75228
// exit ;
75226: GO 75716
// for i in solds do
75228: LD_ADDR_VAR 0 7
75232: PUSH
75233: LD_VAR 0 2
75237: PUSH
75238: FOR_IN
75239: IFFALSE 75300
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
75241: LD_VAR 0 7
75245: PPUSH
75246: CALL_OW 310
75250: PPUSH
75251: CALL_OW 266
75255: PUSH
75256: LD_INT 32
75258: PUSH
75259: LD_INT 31
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: IN
75266: IFFALSE 75286
// solds := solds diff i else
75268: LD_ADDR_VAR 0 2
75272: PUSH
75273: LD_VAR 0 2
75277: PUSH
75278: LD_VAR 0 7
75282: DIFF
75283: ST_TO_ADDR
75284: GO 75298
// SetTag ( i , 18 ) ;
75286: LD_VAR 0 7
75290: PPUSH
75291: LD_INT 18
75293: PPUSH
75294: CALL_OW 109
75298: GO 75238
75300: POP
75301: POP
// if not solds then
75302: LD_VAR 0 2
75306: NOT
75307: IFFALSE 75311
// exit ;
75309: GO 75716
// repeat wait ( 0 0$1 ) ;
75311: LD_INT 35
75313: PPUSH
75314: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
75318: LD_ADDR_VAR 0 5
75322: PUSH
75323: LD_VAR 0 6
75327: PPUSH
75328: LD_VAR 0 3
75332: PPUSH
75333: CALL 5711 0 2
75337: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
75338: LD_EXP 13
75342: PUSH
75343: LD_VAR 0 1
75347: ARRAY
75348: NOT
75349: PUSH
75350: LD_EXP 13
75354: PUSH
75355: LD_VAR 0 1
75359: ARRAY
75360: PUSH
75361: EMPTY
75362: EQUAL
75363: OR
75364: IFFALSE 75401
// begin for i in solds do
75366: LD_ADDR_VAR 0 7
75370: PUSH
75371: LD_VAR 0 2
75375: PUSH
75376: FOR_IN
75377: IFFALSE 75390
// ComStop ( i ) ;
75379: LD_VAR 0 7
75383: PPUSH
75384: CALL_OW 141
75388: GO 75376
75390: POP
75391: POP
// solds := [ ] ;
75392: LD_ADDR_VAR 0 2
75396: PUSH
75397: EMPTY
75398: ST_TO_ADDR
// exit ;
75399: GO 75716
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
75401: LD_VAR 0 5
75405: NOT
75406: PUSH
75407: LD_VAR 0 5
75411: PUSH
75412: LD_INT 3
75414: GREATER
75415: OR
75416: PUSH
75417: LD_EXP 35
75421: PUSH
75422: LD_VAR 0 1
75426: ARRAY
75427: OR
75428: IFFALSE 75469
// begin for i in solds do
75430: LD_ADDR_VAR 0 7
75434: PUSH
75435: LD_VAR 0 2
75439: PUSH
75440: FOR_IN
75441: IFFALSE 75465
// if HasTask ( i ) then
75443: LD_VAR 0 7
75447: PPUSH
75448: CALL_OW 314
75452: IFFALSE 75463
// ComStop ( i ) ;
75454: LD_VAR 0 7
75458: PPUSH
75459: CALL_OW 141
75463: GO 75440
75465: POP
75466: POP
// break ;
75467: GO 75704
// end ; for i in solds do
75469: LD_ADDR_VAR 0 7
75473: PUSH
75474: LD_VAR 0 2
75478: PUSH
75479: FOR_IN
75480: IFFALSE 75696
// begin if IsInUnit ( i ) then
75482: LD_VAR 0 7
75486: PPUSH
75487: CALL_OW 310
75491: IFFALSE 75502
// ComExitBuilding ( i ) ;
75493: LD_VAR 0 7
75497: PPUSH
75498: CALL_OW 122
// if GetLives ( i ) > 333 then
75502: LD_VAR 0 7
75506: PPUSH
75507: CALL_OW 256
75511: PUSH
75512: LD_INT 333
75514: GREATER
75515: IFFALSE 75543
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75517: LD_VAR 0 7
75521: PPUSH
75522: LD_VAR 0 5
75526: PPUSH
75527: LD_VAR 0 7
75531: PPUSH
75532: CALL_OW 74
75536: PPUSH
75537: CALL_OW 115
75541: GO 75694
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
75543: LD_ADDR_VAR 0 8
75547: PUSH
75548: LD_EXP 13
75552: PUSH
75553: LD_VAR 0 1
75557: ARRAY
75558: PPUSH
75559: LD_INT 2
75561: PUSH
75562: LD_INT 30
75564: PUSH
75565: LD_INT 0
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: PUSH
75572: LD_INT 30
75574: PUSH
75575: LD_INT 1
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: PUSH
75582: LD_INT 30
75584: PUSH
75585: LD_INT 6
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: PPUSH
75598: CALL_OW 72
75602: PPUSH
75603: LD_VAR 0 7
75607: PPUSH
75608: CALL_OW 74
75612: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
75613: LD_VAR 0 7
75617: PPUSH
75618: LD_VAR 0 8
75622: PPUSH
75623: CALL_OW 250
75627: PPUSH
75628: LD_INT 3
75630: PPUSH
75631: LD_INT 5
75633: PPUSH
75634: CALL_OW 272
75638: PPUSH
75639: LD_VAR 0 8
75643: PPUSH
75644: CALL_OW 251
75648: PPUSH
75649: LD_INT 3
75651: PPUSH
75652: LD_INT 5
75654: PPUSH
75655: CALL_OW 273
75659: PPUSH
75660: CALL_OW 111
// SetTag ( i , 0 ) ;
75664: LD_VAR 0 7
75668: PPUSH
75669: LD_INT 0
75671: PPUSH
75672: CALL_OW 109
// solds := solds diff i ;
75676: LD_ADDR_VAR 0 2
75680: PUSH
75681: LD_VAR 0 2
75685: PUSH
75686: LD_VAR 0 7
75690: DIFF
75691: ST_TO_ADDR
// continue ;
75692: GO 75479
// end ; end ;
75694: GO 75479
75696: POP
75697: POP
// until solds ;
75698: LD_VAR 0 2
75702: IFFALSE 75311
// MC_Reset ( base , 18 ) ;
75704: LD_VAR 0 1
75708: PPUSH
75709: LD_INT 18
75711: PPUSH
75712: CALL 44390 0 2
// end ;
75716: LD_VAR 0 4
75720: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
75721: LD_INT 0
75723: PPUSH
75724: PPUSH
75725: PPUSH
75726: PPUSH
75727: PPUSH
75728: PPUSH
75729: PPUSH
75730: PPUSH
75731: PPUSH
75732: PPUSH
75733: PPUSH
75734: PPUSH
75735: PPUSH
75736: PPUSH
75737: PPUSH
75738: PPUSH
75739: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
75740: LD_ADDR_VAR 0 13
75744: PUSH
75745: LD_EXP 13
75749: PUSH
75750: LD_VAR 0 1
75754: ARRAY
75755: PPUSH
75756: LD_INT 25
75758: PUSH
75759: LD_INT 3
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PPUSH
75766: CALL_OW 72
75770: ST_TO_ADDR
// if mc_remote_driver [ base ] then
75771: LD_EXP 53
75775: PUSH
75776: LD_VAR 0 1
75780: ARRAY
75781: IFFALSE 75805
// mechs := mechs diff mc_remote_driver [ base ] ;
75783: LD_ADDR_VAR 0 13
75787: PUSH
75788: LD_VAR 0 13
75792: PUSH
75793: LD_EXP 53
75797: PUSH
75798: LD_VAR 0 1
75802: ARRAY
75803: DIFF
75804: ST_TO_ADDR
// for i in mechs do
75805: LD_ADDR_VAR 0 5
75809: PUSH
75810: LD_VAR 0 13
75814: PUSH
75815: FOR_IN
75816: IFFALSE 75851
// if GetTag ( i ) > 0 then
75818: LD_VAR 0 5
75822: PPUSH
75823: CALL_OW 110
75827: PUSH
75828: LD_INT 0
75830: GREATER
75831: IFFALSE 75849
// mechs := mechs diff i ;
75833: LD_ADDR_VAR 0 13
75837: PUSH
75838: LD_VAR 0 13
75842: PUSH
75843: LD_VAR 0 5
75847: DIFF
75848: ST_TO_ADDR
75849: GO 75815
75851: POP
75852: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
75853: LD_ADDR_VAR 0 9
75857: PUSH
75858: LD_EXP 13
75862: PUSH
75863: LD_VAR 0 1
75867: ARRAY
75868: PPUSH
75869: LD_INT 2
75871: PUSH
75872: LD_INT 25
75874: PUSH
75875: LD_INT 1
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 25
75884: PUSH
75885: LD_INT 5
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: LD_INT 25
75894: PUSH
75895: LD_INT 8
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: LD_INT 25
75904: PUSH
75905: LD_INT 9
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: PPUSH
75919: CALL_OW 72
75923: ST_TO_ADDR
// if not defenders and not solds then
75924: LD_VAR 0 2
75928: NOT
75929: PUSH
75930: LD_VAR 0 9
75934: NOT
75935: AND
75936: IFFALSE 75940
// exit ;
75938: GO 77566
// depot_under_attack := false ;
75940: LD_ADDR_VAR 0 17
75944: PUSH
75945: LD_INT 0
75947: ST_TO_ADDR
// sold_defenders := [ ] ;
75948: LD_ADDR_VAR 0 18
75952: PUSH
75953: EMPTY
75954: ST_TO_ADDR
// if mechs then
75955: LD_VAR 0 13
75959: IFFALSE 76088
// for i in defenders do
75961: LD_ADDR_VAR 0 5
75965: PUSH
75966: LD_VAR 0 2
75970: PUSH
75971: FOR_IN
75972: IFFALSE 76086
// begin SetTag ( i , 20 ) ;
75974: LD_VAR 0 5
75978: PPUSH
75979: LD_INT 20
75981: PPUSH
75982: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
75986: LD_VAR 0 5
75990: PPUSH
75991: CALL_OW 263
75995: PUSH
75996: LD_INT 1
75998: EQUAL
75999: PUSH
76000: LD_VAR 0 5
76004: PPUSH
76005: CALL_OW 311
76009: NOT
76010: AND
76011: PUSH
76012: LD_VAR 0 13
76016: AND
76017: IFFALSE 76084
// begin un := mechs [ 1 ] ;
76019: LD_ADDR_VAR 0 11
76023: PUSH
76024: LD_VAR 0 13
76028: PUSH
76029: LD_INT 1
76031: ARRAY
76032: ST_TO_ADDR
// ComExitBuilding ( un ) ;
76033: LD_VAR 0 11
76037: PPUSH
76038: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
76042: LD_VAR 0 11
76046: PPUSH
76047: LD_VAR 0 5
76051: PPUSH
76052: CALL_OW 180
// SetTag ( un , 19 ) ;
76056: LD_VAR 0 11
76060: PPUSH
76061: LD_INT 19
76063: PPUSH
76064: CALL_OW 109
// mechs := mechs diff un ;
76068: LD_ADDR_VAR 0 13
76072: PUSH
76073: LD_VAR 0 13
76077: PUSH
76078: LD_VAR 0 11
76082: DIFF
76083: ST_TO_ADDR
// end ; end ;
76084: GO 75971
76086: POP
76087: POP
// if solds then
76088: LD_VAR 0 9
76092: IFFALSE 76151
// for i in solds do
76094: LD_ADDR_VAR 0 5
76098: PUSH
76099: LD_VAR 0 9
76103: PUSH
76104: FOR_IN
76105: IFFALSE 76149
// if not GetTag ( i ) then
76107: LD_VAR 0 5
76111: PPUSH
76112: CALL_OW 110
76116: NOT
76117: IFFALSE 76147
// begin defenders := defenders union i ;
76119: LD_ADDR_VAR 0 2
76123: PUSH
76124: LD_VAR 0 2
76128: PUSH
76129: LD_VAR 0 5
76133: UNION
76134: ST_TO_ADDR
// SetTag ( i , 18 ) ;
76135: LD_VAR 0 5
76139: PPUSH
76140: LD_INT 18
76142: PPUSH
76143: CALL_OW 109
// end ;
76147: GO 76104
76149: POP
76150: POP
// repeat wait ( 0 0$1 ) ;
76151: LD_INT 35
76153: PPUSH
76154: CALL_OW 67
// enemy := mc_scan [ base ] ;
76158: LD_ADDR_VAR 0 3
76162: PUSH
76163: LD_EXP 36
76167: PUSH
76168: LD_VAR 0 1
76172: ARRAY
76173: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
76174: LD_EXP 13
76178: PUSH
76179: LD_VAR 0 1
76183: ARRAY
76184: NOT
76185: PUSH
76186: LD_EXP 13
76190: PUSH
76191: LD_VAR 0 1
76195: ARRAY
76196: PUSH
76197: EMPTY
76198: EQUAL
76199: OR
76200: IFFALSE 76237
// begin for i in defenders do
76202: LD_ADDR_VAR 0 5
76206: PUSH
76207: LD_VAR 0 2
76211: PUSH
76212: FOR_IN
76213: IFFALSE 76226
// ComStop ( i ) ;
76215: LD_VAR 0 5
76219: PPUSH
76220: CALL_OW 141
76224: GO 76212
76226: POP
76227: POP
// defenders := [ ] ;
76228: LD_ADDR_VAR 0 2
76232: PUSH
76233: EMPTY
76234: ST_TO_ADDR
// exit ;
76235: GO 77566
// end ; for i in defenders do
76237: LD_ADDR_VAR 0 5
76241: PUSH
76242: LD_VAR 0 2
76246: PUSH
76247: FOR_IN
76248: IFFALSE 77066
// begin e := NearestUnitToUnit ( enemy , i ) ;
76250: LD_ADDR_VAR 0 14
76254: PUSH
76255: LD_VAR 0 3
76259: PPUSH
76260: LD_VAR 0 5
76264: PPUSH
76265: CALL_OW 74
76269: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76270: LD_ADDR_VAR 0 8
76274: PUSH
76275: LD_EXP 13
76279: PUSH
76280: LD_VAR 0 1
76284: ARRAY
76285: PPUSH
76286: LD_INT 2
76288: PUSH
76289: LD_INT 30
76291: PUSH
76292: LD_INT 0
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: LD_INT 30
76301: PUSH
76302: LD_INT 1
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: LIST
76313: PPUSH
76314: CALL_OW 72
76318: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
76319: LD_ADDR_VAR 0 17
76323: PUSH
76324: LD_VAR 0 8
76328: NOT
76329: PUSH
76330: LD_VAR 0 8
76334: PPUSH
76335: LD_INT 3
76337: PUSH
76338: LD_INT 24
76340: PUSH
76341: LD_INT 600
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PPUSH
76352: CALL_OW 72
76356: OR
76357: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
76358: LD_VAR 0 5
76362: PPUSH
76363: CALL_OW 247
76367: PUSH
76368: LD_INT 2
76370: DOUBLE
76371: EQUAL
76372: IFTRUE 76376
76374: GO 76772
76376: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
76377: LD_VAR 0 5
76381: PPUSH
76382: CALL_OW 256
76386: PUSH
76387: LD_INT 650
76389: GREATER
76390: PUSH
76391: LD_VAR 0 5
76395: PPUSH
76396: LD_VAR 0 14
76400: PPUSH
76401: CALL_OW 296
76405: PUSH
76406: LD_INT 40
76408: LESS
76409: PUSH
76410: LD_VAR 0 14
76414: PPUSH
76415: LD_EXP 38
76419: PUSH
76420: LD_VAR 0 1
76424: ARRAY
76425: PPUSH
76426: CALL_OW 308
76430: OR
76431: AND
76432: IFFALSE 76554
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
76434: LD_VAR 0 5
76438: PPUSH
76439: CALL_OW 262
76443: PUSH
76444: LD_INT 1
76446: EQUAL
76447: PUSH
76448: LD_VAR 0 5
76452: PPUSH
76453: CALL_OW 261
76457: PUSH
76458: LD_INT 30
76460: LESS
76461: AND
76462: PUSH
76463: LD_VAR 0 8
76467: AND
76468: IFFALSE 76538
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
76470: LD_VAR 0 5
76474: PPUSH
76475: LD_VAR 0 8
76479: PPUSH
76480: LD_VAR 0 5
76484: PPUSH
76485: CALL_OW 74
76489: PPUSH
76490: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
76494: LD_VAR 0 5
76498: PPUSH
76499: LD_VAR 0 8
76503: PPUSH
76504: LD_VAR 0 5
76508: PPUSH
76509: CALL_OW 74
76513: PPUSH
76514: CALL_OW 296
76518: PUSH
76519: LD_INT 6
76521: LESS
76522: IFFALSE 76536
// SetFuel ( i , 100 ) ;
76524: LD_VAR 0 5
76528: PPUSH
76529: LD_INT 100
76531: PPUSH
76532: CALL_OW 240
// end else
76536: GO 76552
// ComAttackUnit ( i , e ) ;
76538: LD_VAR 0 5
76542: PPUSH
76543: LD_VAR 0 14
76547: PPUSH
76548: CALL_OW 115
// end else
76552: GO 76655
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
76554: LD_VAR 0 14
76558: PPUSH
76559: LD_EXP 38
76563: PUSH
76564: LD_VAR 0 1
76568: ARRAY
76569: PPUSH
76570: CALL_OW 308
76574: NOT
76575: PUSH
76576: LD_VAR 0 5
76580: PPUSH
76581: LD_VAR 0 14
76585: PPUSH
76586: CALL_OW 296
76590: PUSH
76591: LD_INT 40
76593: GREATEREQUAL
76594: AND
76595: PUSH
76596: LD_VAR 0 5
76600: PPUSH
76601: CALL_OW 256
76605: PUSH
76606: LD_INT 650
76608: LESSEQUAL
76609: OR
76610: PUSH
76611: LD_VAR 0 5
76615: PPUSH
76616: LD_EXP 37
76620: PUSH
76621: LD_VAR 0 1
76625: ARRAY
76626: PPUSH
76627: CALL_OW 308
76631: NOT
76632: AND
76633: IFFALSE 76655
// ComMoveToArea ( i , mc_parking [ base ] ) ;
76635: LD_VAR 0 5
76639: PPUSH
76640: LD_EXP 37
76644: PUSH
76645: LD_VAR 0 1
76649: ARRAY
76650: PPUSH
76651: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
76655: LD_VAR 0 5
76659: PPUSH
76660: CALL_OW 256
76664: PUSH
76665: LD_INT 998
76667: LESS
76668: PUSH
76669: LD_VAR 0 5
76673: PPUSH
76674: CALL_OW 263
76678: PUSH
76679: LD_INT 1
76681: EQUAL
76682: AND
76683: PUSH
76684: LD_VAR 0 5
76688: PPUSH
76689: CALL_OW 311
76693: AND
76694: PUSH
76695: LD_VAR 0 5
76699: PPUSH
76700: LD_EXP 37
76704: PUSH
76705: LD_VAR 0 1
76709: ARRAY
76710: PPUSH
76711: CALL_OW 308
76715: AND
76716: IFFALSE 76770
// begin mech := IsDrivenBy ( i ) ;
76718: LD_ADDR_VAR 0 10
76722: PUSH
76723: LD_VAR 0 5
76727: PPUSH
76728: CALL_OW 311
76732: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
76733: LD_VAR 0 10
76737: PPUSH
76738: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
76742: LD_VAR 0 10
76746: PPUSH
76747: LD_VAR 0 5
76751: PPUSH
76752: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
76756: LD_VAR 0 10
76760: PPUSH
76761: LD_VAR 0 5
76765: PPUSH
76766: CALL_OW 180
// end ; end ; unit_human :
76770: GO 77037
76772: LD_INT 1
76774: DOUBLE
76775: EQUAL
76776: IFTRUE 76780
76778: GO 77036
76780: POP
// begin b := IsInUnit ( i ) ;
76781: LD_ADDR_VAR 0 19
76785: PUSH
76786: LD_VAR 0 5
76790: PPUSH
76791: CALL_OW 310
76795: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
76796: LD_ADDR_VAR 0 20
76800: PUSH
76801: LD_VAR 0 19
76805: NOT
76806: PUSH
76807: LD_VAR 0 19
76811: PPUSH
76812: CALL_OW 266
76816: PUSH
76817: LD_INT 32
76819: PUSH
76820: LD_INT 31
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: IN
76827: OR
76828: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
76829: LD_VAR 0 17
76833: PUSH
76834: LD_VAR 0 2
76838: PPUSH
76839: LD_INT 21
76841: PUSH
76842: LD_INT 2
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PPUSH
76849: CALL_OW 72
76853: PUSH
76854: LD_INT 1
76856: LESSEQUAL
76857: OR
76858: PUSH
76859: LD_VAR 0 20
76863: AND
76864: PUSH
76865: LD_VAR 0 5
76869: PUSH
76870: LD_VAR 0 18
76874: IN
76875: NOT
76876: AND
76877: IFFALSE 76970
// begin if b then
76879: LD_VAR 0 19
76883: IFFALSE 76932
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
76885: LD_VAR 0 19
76889: PPUSH
76890: LD_VAR 0 3
76894: PPUSH
76895: LD_VAR 0 19
76899: PPUSH
76900: CALL_OW 74
76904: PPUSH
76905: CALL_OW 296
76909: PUSH
76910: LD_INT 10
76912: LESS
76913: PUSH
76914: LD_VAR 0 19
76918: PPUSH
76919: CALL_OW 461
76923: PUSH
76924: LD_INT 7
76926: NONEQUAL
76927: AND
76928: IFFALSE 76932
// continue ;
76930: GO 76247
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
76932: LD_ADDR_VAR 0 18
76936: PUSH
76937: LD_VAR 0 18
76941: PPUSH
76942: LD_VAR 0 18
76946: PUSH
76947: LD_INT 1
76949: PLUS
76950: PPUSH
76951: LD_VAR 0 5
76955: PPUSH
76956: CALL_OW 1
76960: ST_TO_ADDR
// ComExitBuilding ( i ) ;
76961: LD_VAR 0 5
76965: PPUSH
76966: CALL_OW 122
// end ; if sold_defenders then
76970: LD_VAR 0 18
76974: IFFALSE 77034
// if i in sold_defenders then
76976: LD_VAR 0 5
76980: PUSH
76981: LD_VAR 0 18
76985: IN
76986: IFFALSE 77034
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
76988: LD_VAR 0 5
76992: PPUSH
76993: CALL_OW 314
76997: NOT
76998: PUSH
76999: LD_VAR 0 5
77003: PPUSH
77004: LD_VAR 0 14
77008: PPUSH
77009: CALL_OW 296
77013: PUSH
77014: LD_INT 30
77016: LESS
77017: AND
77018: IFFALSE 77034
// ComAttackUnit ( i , e ) ;
77020: LD_VAR 0 5
77024: PPUSH
77025: LD_VAR 0 14
77029: PPUSH
77030: CALL_OW 115
// end ; end ; end ;
77034: GO 77037
77036: POP
// if IsDead ( i ) then
77037: LD_VAR 0 5
77041: PPUSH
77042: CALL_OW 301
77046: IFFALSE 77064
// defenders := defenders diff i ;
77048: LD_ADDR_VAR 0 2
77052: PUSH
77053: LD_VAR 0 2
77057: PUSH
77058: LD_VAR 0 5
77062: DIFF
77063: ST_TO_ADDR
// end ;
77064: GO 76247
77066: POP
77067: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
77068: LD_VAR 0 3
77072: NOT
77073: PUSH
77074: LD_VAR 0 2
77078: NOT
77079: OR
77080: PUSH
77081: LD_EXP 13
77085: PUSH
77086: LD_VAR 0 1
77090: ARRAY
77091: NOT
77092: OR
77093: IFFALSE 76151
// MC_Reset ( base , 18 ) ;
77095: LD_VAR 0 1
77099: PPUSH
77100: LD_INT 18
77102: PPUSH
77103: CALL 44390 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77107: LD_ADDR_VAR 0 2
77111: PUSH
77112: LD_VAR 0 2
77116: PUSH
77117: LD_VAR 0 2
77121: PPUSH
77122: LD_INT 2
77124: PUSH
77125: LD_INT 25
77127: PUSH
77128: LD_INT 1
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: LD_INT 25
77137: PUSH
77138: LD_INT 5
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PUSH
77145: LD_INT 25
77147: PUSH
77148: LD_INT 8
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 25
77157: PUSH
77158: LD_INT 9
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: PPUSH
77172: CALL_OW 72
77176: DIFF
77177: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
77178: LD_VAR 0 3
77182: NOT
77183: PUSH
77184: LD_VAR 0 2
77188: PPUSH
77189: LD_INT 21
77191: PUSH
77192: LD_INT 2
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PPUSH
77199: CALL_OW 72
77203: AND
77204: IFFALSE 77542
// begin tmp := FilterByTag ( defenders , 19 ) ;
77206: LD_ADDR_VAR 0 12
77210: PUSH
77211: LD_VAR 0 2
77215: PPUSH
77216: LD_INT 19
77218: PPUSH
77219: CALL 37471 0 2
77223: ST_TO_ADDR
// if tmp then
77224: LD_VAR 0 12
77228: IFFALSE 77298
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
77230: LD_ADDR_VAR 0 12
77234: PUSH
77235: LD_VAR 0 12
77239: PPUSH
77240: LD_INT 25
77242: PUSH
77243: LD_INT 3
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PPUSH
77250: CALL_OW 72
77254: ST_TO_ADDR
// if tmp then
77255: LD_VAR 0 12
77259: IFFALSE 77298
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
77261: LD_ADDR_EXP 25
77265: PUSH
77266: LD_EXP 25
77270: PPUSH
77271: LD_VAR 0 1
77275: PPUSH
77276: LD_EXP 25
77280: PUSH
77281: LD_VAR 0 1
77285: ARRAY
77286: PUSH
77287: LD_VAR 0 12
77291: UNION
77292: PPUSH
77293: CALL_OW 1
77297: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
77298: LD_VAR 0 1
77302: PPUSH
77303: LD_INT 19
77305: PPUSH
77306: CALL 44390 0 2
// repeat wait ( 0 0$1 ) ;
77310: LD_INT 35
77312: PPUSH
77313: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
77317: LD_EXP 13
77321: PUSH
77322: LD_VAR 0 1
77326: ARRAY
77327: NOT
77328: PUSH
77329: LD_EXP 13
77333: PUSH
77334: LD_VAR 0 1
77338: ARRAY
77339: PUSH
77340: EMPTY
77341: EQUAL
77342: OR
77343: IFFALSE 77380
// begin for i in defenders do
77345: LD_ADDR_VAR 0 5
77349: PUSH
77350: LD_VAR 0 2
77354: PUSH
77355: FOR_IN
77356: IFFALSE 77369
// ComStop ( i ) ;
77358: LD_VAR 0 5
77362: PPUSH
77363: CALL_OW 141
77367: GO 77355
77369: POP
77370: POP
// defenders := [ ] ;
77371: LD_ADDR_VAR 0 2
77375: PUSH
77376: EMPTY
77377: ST_TO_ADDR
// exit ;
77378: GO 77566
// end ; for i in defenders do
77380: LD_ADDR_VAR 0 5
77384: PUSH
77385: LD_VAR 0 2
77389: PUSH
77390: FOR_IN
77391: IFFALSE 77480
// begin if not IsInArea ( i , mc_parking [ base ] ) then
77393: LD_VAR 0 5
77397: PPUSH
77398: LD_EXP 37
77402: PUSH
77403: LD_VAR 0 1
77407: ARRAY
77408: PPUSH
77409: CALL_OW 308
77413: NOT
77414: IFFALSE 77438
// ComMoveToArea ( i , mc_parking [ base ] ) else
77416: LD_VAR 0 5
77420: PPUSH
77421: LD_EXP 37
77425: PUSH
77426: LD_VAR 0 1
77430: ARRAY
77431: PPUSH
77432: CALL_OW 113
77436: GO 77478
// if GetControl ( i ) = control_manual then
77438: LD_VAR 0 5
77442: PPUSH
77443: CALL_OW 263
77447: PUSH
77448: LD_INT 1
77450: EQUAL
77451: IFFALSE 77478
// if IsDrivenBy ( i ) then
77453: LD_VAR 0 5
77457: PPUSH
77458: CALL_OW 311
77462: IFFALSE 77478
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
77464: LD_VAR 0 5
77468: PPUSH
77469: CALL_OW 311
77473: PPUSH
77474: CALL_OW 121
// end ;
77478: GO 77390
77480: POP
77481: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
77482: LD_VAR 0 2
77486: PPUSH
77487: LD_INT 95
77489: PUSH
77490: LD_EXP 37
77494: PUSH
77495: LD_VAR 0 1
77499: ARRAY
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PPUSH
77505: CALL_OW 72
77509: PUSH
77510: LD_VAR 0 2
77514: EQUAL
77515: PUSH
77516: LD_EXP 36
77520: PUSH
77521: LD_VAR 0 1
77525: ARRAY
77526: OR
77527: PUSH
77528: LD_EXP 13
77532: PUSH
77533: LD_VAR 0 1
77537: ARRAY
77538: NOT
77539: OR
77540: IFFALSE 77310
// end ; MC_Reset ( base , 19 ) ;
77542: LD_VAR 0 1
77546: PPUSH
77547: LD_INT 19
77549: PPUSH
77550: CALL 44390 0 2
// MC_Reset ( base , 20 ) ;
77554: LD_VAR 0 1
77558: PPUSH
77559: LD_INT 20
77561: PPUSH
77562: CALL 44390 0 2
// end ;
77566: LD_VAR 0 4
77570: RET
