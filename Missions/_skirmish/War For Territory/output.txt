// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 170 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// begin FogOff ( 1 ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 344
// end ; PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , gensher_ape , 0 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 3
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: LD_INT 7
  44: PPUSH
  45: LD_INT 0
  47: PPUSH
  48: CALL 37065 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , powell_ape , 0 ) ;
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 3
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 0
  69: PPUSH
  70: LD_INT 0
  72: PPUSH
  73: LD_INT 4
  75: PPUSH
  76: LD_INT 0
  78: PPUSH
  79: CALL 37065 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , popov_ape , 0 ) ;
  83: LD_INT 0
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: LD_INT 3
  91: PPUSH
  92: LD_INT 0
  94: PPUSH
  95: LD_INT 0
  97: PPUSH
  98: LD_INT 0
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: LD_INT 11
 106: PPUSH
 107: LD_INT 0
 109: PPUSH
 110: CALL 37065 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , sikorski_ape , 0 ) ;
 114: LD_INT 0
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: LD_INT 3
 122: PPUSH
 123: LD_INT 0
 125: PPUSH
 126: LD_INT 0
 128: PPUSH
 129: LD_INT 0
 131: PPUSH
 132: LD_INT 0
 134: PPUSH
 135: LD_INT 14
 137: PPUSH
 138: LD_INT 0
 140: PPUSH
 141: CALL 37065 0 9
// PrepareGensher ;
 145: CALL 1321 0 0
// PreparePopov ;
 149: CALL 2571 0 0
// PreparePowell ;
 153: CALL 384 0 0
// PrepareSikorski ;
 157: CALL 3695 0 0
// MC_Start ( ) ;
 161: CALL 42910 0 0
// Action ;
 165: CALL 4102 0 0
// end ;
 169: END
// export debug , game , staticMines ; function InitVariables ; begin
 170: LD_INT 0
 172: PPUSH
// debug := 1 ;
 173: LD_ADDR_EXP 1
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// game := true ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_INT 1
 188: ST_TO_ADDR
// staticMines := [ ] ;
 189: LD_ADDR_EXP 3
 193: PUSH
 194: EMPTY
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// export function CustomInitMacro ; begin
 201: LD_INT 0
 203: PPUSH
// InitMC_Gensher ( ) ;
 204: CALL 1709 0 0
// InitMC_Powell ( ) ;
 208: CALL 599 0 0
// InitMC_Popov ( ) ;
 212: CALL 2897 0 0
// end ;
 216: LD_VAR 0 1
 220: RET
// every 0 0$10 do var cr , time , i ;
 221: GO 223
 223: DISABLE
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
 228: PPUSH
// begin time := 0 0$30 ;
 229: LD_ADDR_VAR 0 2
 233: PUSH
 234: LD_INT 1050
 236: ST_TO_ADDR
// repeat wait ( time ) ;
 237: LD_VAR 0 2
 241: PPUSH
 242: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
 246: LD_ADDR_VAR 0 1
 250: PUSH
 251: LD_INT 1
 253: PPUSH
 254: LD_INT 5
 256: PPUSH
 257: CALL_OW 12
 261: ST_TO_ADDR
// for i in [ powell_crates , gensher_crates , popov_crates , sikorski_crates ] do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: LD_INT 5
 269: PUSH
 270: LD_INT 8
 272: PUSH
 273: LD_INT 12
 275: PUSH
 276: LD_INT 13
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: PUSH
 285: FOR_IN
 286: IFFALSE 340
// begin if GetResourceArea ( i , mat_cans ) < 20 then
 288: LD_VAR 0 3
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: CALL_OW 287
 300: PUSH
 301: LD_INT 20
 303: LESS
 304: IFFALSE 323
// CreateCratesArea ( cr , i , true ) ;
 306: LD_VAR 0 1
 310: PPUSH
 311: LD_VAR 0 3
 315: PPUSH
 316: LD_INT 1
 318: PPUSH
 319: CALL_OW 55
// wait ( rand ( 0 0$5 , 0 0$20 ) ) ;
 323: LD_INT 175
 325: PPUSH
 326: LD_INT 700
 328: PPUSH
 329: CALL_OW 12
 333: PPUSH
 334: CALL_OW 67
// end ;
 338: GO 285
 340: POP
 341: POP
// time := time + 0 0$2 ;
 342: LD_ADDR_VAR 0 2
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: LD_INT 70
 354: PLUS
 355: ST_TO_ADDR
// if time > 1 1$00 then
 356: LD_VAR 0 2
 360: PUSH
 361: LD_INT 2100
 363: GREATER
 364: IFFALSE 374
// time := 0 0$25 ;
 366: LD_ADDR_VAR 0 2
 370: PUSH
 371: LD_INT 875
 373: ST_TO_ADDR
// until not game ;
 374: LD_EXP 2
 378: NOT
 379: IFFALSE 237
// end ; end_of_file
 381: PPOPN 3
 383: END
// export Powell , powell_side ; export function PreparePowell ; var i , tmp ; begin
 384: LD_INT 0
 386: PPUSH
 387: PPUSH
 388: PPUSH
// powell_side := 4 ;
 389: LD_ADDR_EXP 5
 393: PUSH
 394: LD_INT 4
 396: ST_TO_ADDR
// uc_side := powell_side ;
 397: LD_ADDR_OWVAR 20
 401: PUSH
 402: LD_EXP 5
 406: ST_TO_ADDR
// uc_nation := 1 ;
 407: LD_ADDR_OWVAR 21
 411: PUSH
 412: LD_INT 1
 414: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 415: LD_ADDR_EXP 4
 419: PUSH
 420: LD_STRING Powell
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// SetSkill ( Powell , 1 , 7 ) ;
 428: LD_EXP 4
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 7
 438: PPUSH
 439: CALL_OW 237
// SetSkill ( Powell , 2 , 5 ) ;
 443: LD_EXP 4
 447: PPUSH
 448: LD_INT 2
 450: PPUSH
 451: LD_INT 5
 453: PPUSH
 454: CALL_OW 237
// SetSkill ( Powell , 3 , 6 ) ;
 458: LD_EXP 4
 462: PPUSH
 463: LD_INT 3
 465: PPUSH
 466: LD_INT 6
 468: PPUSH
 469: CALL_OW 237
// SetSkill ( Powell , 4 , 4 ) ;
 473: LD_EXP 4
 477: PPUSH
 478: LD_INT 4
 480: PPUSH
 481: LD_INT 4
 483: PPUSH
 484: CALL_OW 237
// PlaceHumanInUnit ( Powell , us_depot ) ;
 488: LD_EXP 4
 492: PPUSH
 493: LD_INT 4
 495: PPUSH
 496: CALL_OW 52
// tmp := PrepareBase ( us_depot , powell_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1000 , 100 , 0 ] , [ 4 , 4 , 4 , 4 ] ) ;
 500: LD_ADDR_VAR 0 3
 504: PUSH
 505: LD_INT 4
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_STRING 
 513: PPUSH
 514: LD_INT 8
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: LD_INT 6
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: LD_OWVAR 67
 532: ARRAY
 533: PPUSH
 534: LD_INT 1000
 536: PUSH
 537: LD_INT 100
 539: PUSH
 540: LD_INT 0
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: PPUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: LD_INT 4
 556: PUSH
 557: LD_INT 4
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: PPUSH
 566: CALL 12683 0 6
 570: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , tmp ) ;
 571: LD_ADDR_EXP 14
 575: PUSH
 576: LD_EXP 14
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: LD_VAR 0 3
 588: PPUSH
 589: CALL_OW 1
 593: ST_TO_ADDR
// end ;
 594: LD_VAR 0 1
 598: RET
// export function InitMC_Powell ( ) ; begin
 599: LD_INT 0
 601: PPUSH
// MC_SetScanArea ( 1 , powell_base ) ;
 602: LD_INT 1
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: CALL 65750 0 2
// MC_SetParkingArea ( 1 , powell_parking ) ;
 612: LD_INT 1
 614: PPUSH
 615: LD_INT 6
 617: PPUSH
 618: CALL 65694 0 2
// MC_SetDepositsXY ( 1 , [ [ 167 , 102 , 0 ] , [ 173 , 83 , 1 ] , [ 171 , 141 , 0 ] , [ 178 , 148 , 1 ] ] ) ;
 622: LD_INT 1
 624: PPUSH
 625: LD_INT 167
 627: PUSH
 628: LD_INT 102
 630: PUSH
 631: LD_INT 0
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 173
 641: PUSH
 642: LD_INT 83
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 171
 655: PUSH
 656: LD_INT 141
 658: PUSH
 659: LD_INT 0
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: PUSH
 667: LD_INT 178
 669: PUSH
 670: LD_INT 148
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: PPUSH
 687: CALL 64753 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
 691: LD_INT 1
 693: PPUSH
 694: LD_INT 11
 696: PUSH
 697: LD_INT 6
 699: PUSH
 700: LD_INT 7
 702: PUSH
 703: LD_INT 9
 705: PUSH
 706: LD_INT 10
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL 65582 0 2
// MC_SetCratesArea ( 1 , powell_crates ) ;
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 5
 725: PPUSH
 726: CALL 65264 0 2
// MC_SetTame ( 1 , powell_ape ) ;
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 4
 735: PPUSH
 736: CALL 64995 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 4
 745: PPUSH
 746: CALL 64614 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] ] ) ;
 750: LD_INT 1
 752: PPUSH
 753: LD_INT 3
 755: PUSH
 756: LD_INT 1
 758: PUSH
 759: LD_INT 2
 761: PUSH
 762: LD_INT 5
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 4
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: LD_INT 6
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 4
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: LD_INT 2
 797: PUSH
 798: LD_INT 7
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 4
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 2
 815: PUSH
 816: LD_INT 6
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: PUSH
 825: LD_INT 5
 827: PUSH
 828: LD_INT 1
 830: PUSH
 831: LD_INT 2
 833: PUSH
 834: LD_INT 6
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL 64429 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 200 , 111 , 4 ] , [ b_oil_mine , 167 , 102 , 0 ] , [ b_armoury , 178 , 117 , 2 ] , [ b_workshop , 197 , 144 , 4 ] , [ b_solar_power , 206 , 124 , 3 ] , [ b_solar_power , 209 , 128 , 3 ] , [ b_solar_power , 211 , 132 , 3 ] , [ b_siberite_mine , 173 , 83 , 3 ] , [ b_lab , 186 , 103 , 2 ] , [ b_turret , 173 , 99 , 2 ] , [ b_bunker , 174 , 102 , 2 ] , [ b_bunker , 178 , 100 , 2 ] , [ b_turret , 174 , 108 , 1 ] , [ b_turret , 182 , 122 , 1 ] , [ b_control_tower , 194 , 124 , 5 ] , [ b_siberite_power , 204 , 133 , 3 ] , [ b_solar_power , 201 , 133 , 3 ] , [ b_siberite_power , 199 , 119 , 5 ] , [ b_turret , 184 , 141 , 1 ] , [ b_turret , 183 , 131 , 2 ] ] ) ;
 854: LD_INT 1
 856: PPUSH
 857: LD_INT 6
 859: PUSH
 860: LD_INT 200
 862: PUSH
 863: LD_INT 111
 865: PUSH
 866: LD_INT 4
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: PUSH
 875: LD_INT 29
 877: PUSH
 878: LD_INT 167
 880: PUSH
 881: LD_INT 102
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 4
 895: PUSH
 896: LD_INT 178
 898: PUSH
 899: LD_INT 117
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 2
 913: PUSH
 914: LD_INT 197
 916: PUSH
 917: LD_INT 144
 919: PUSH
 920: LD_INT 4
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 27
 931: PUSH
 932: LD_INT 206
 934: PUSH
 935: LD_INT 124
 937: PUSH
 938: LD_INT 3
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_INT 27
 949: PUSH
 950: LD_INT 209
 952: PUSH
 953: LD_INT 128
 955: PUSH
 956: LD_INT 3
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 27
 967: PUSH
 968: LD_INT 211
 970: PUSH
 971: LD_INT 132
 973: PUSH
 974: LD_INT 3
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: PUSH
 983: LD_INT 30
 985: PUSH
 986: LD_INT 173
 988: PUSH
 989: LD_INT 83
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 6
1003: PUSH
1004: LD_INT 186
1006: PUSH
1007: LD_INT 103
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 33
1021: PUSH
1022: LD_INT 173
1024: PUSH
1025: LD_INT 99
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 32
1039: PUSH
1040: LD_INT 174
1042: PUSH
1043: LD_INT 102
1045: PUSH
1046: LD_INT 2
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_INT 32
1057: PUSH
1058: LD_INT 178
1060: PUSH
1061: LD_INT 100
1063: PUSH
1064: LD_INT 2
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_INT 33
1075: PUSH
1076: LD_INT 174
1078: PUSH
1079: LD_INT 108
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 33
1093: PUSH
1094: LD_INT 182
1096: PUSH
1097: LD_INT 122
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 36
1111: PUSH
1112: LD_INT 194
1114: PUSH
1115: LD_INT 124
1117: PUSH
1118: LD_INT 5
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 28
1129: PUSH
1130: LD_INT 204
1132: PUSH
1133: LD_INT 133
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 27
1147: PUSH
1148: LD_INT 201
1150: PUSH
1151: LD_INT 133
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 28
1165: PUSH
1166: LD_INT 199
1168: PUSH
1169: LD_INT 119
1171: PUSH
1172: LD_INT 5
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 33
1183: PUSH
1184: LD_INT 184
1186: PUSH
1187: LD_INT 141
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 33
1201: PUSH
1202: LD_INT 183
1204: PUSH
1205: LD_INT 131
1207: PUSH
1208: LD_INT 2
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: PPUSH
1239: CALL 64321 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1243: LD_INT 1
1245: PPUSH
1246: LD_INT 10
1248: PUSH
1249: LD_INT 15
1251: PUSH
1252: LD_INT 12
1254: PUSH
1255: LD_INT 11
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL 65171 0 2
// MC_SetFactoryExtension ( 1 , 197 , 144 , 4 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 197
1273: PPUSH
1274: LD_INT 144
1276: PPUSH
1277: LD_INT 4
1279: PPUSH
1280: LD_INT 19
1282: PUSH
1283: LD_INT 16
1285: PUSH
1286: LD_INT 17
1288: PUSH
1289: LD_INT 18
1291: PUSH
1292: LD_INT 22
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL 65376 0 5
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
1306: LD_INT 1
1308: PPUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL 65044 0 2
// end ; end_of_file
1316: LD_VAR 0 1
1320: RET
// export Gensher , gensher_side ; export function PrepareGensher ; var i , tmp , un ; begin
1321: LD_INT 0
1323: PPUSH
1324: PPUSH
1325: PPUSH
1326: PPUSH
// gensher_side := 2 ;
1327: LD_ADDR_EXP 7
1331: PUSH
1332: LD_INT 2
1334: ST_TO_ADDR
// uc_side := gensher_side ;
1335: LD_ADDR_OWVAR 20
1339: PUSH
1340: LD_EXP 7
1344: ST_TO_ADDR
// uc_nation := 2 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 2
1352: ST_TO_ADDR
// tmp := PrepareBase ( ar_depot , gensher_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_INT 7
1360: PPUSH
1361: LD_INT 2
1363: PPUSH
1364: LD_STRING 
1366: PPUSH
1367: LD_INT 8
1369: PUSH
1370: LD_INT 7
1372: PUSH
1373: LD_INT 6
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PUSH
1381: LD_OWVAR 67
1385: ARRAY
1386: PPUSH
1387: LD_INT 1500
1389: PUSH
1390: LD_INT 300
1392: PUSH
1393: LD_INT 30
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: LIST
1400: PPUSH
1401: LD_INT 4
1403: PUSH
1404: LD_INT 4
1406: PUSH
1407: LD_INT 4
1409: PUSH
1410: LD_INT 4
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PPUSH
1419: CALL 12683 0 6
1423: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp ) ;
1424: LD_ADDR_EXP 14
1428: PUSH
1429: LD_EXP 14
1433: PPUSH
1434: LD_INT 2
1436: PPUSH
1437: LD_VAR 0 3
1441: PPUSH
1442: CALL_OW 1
1446: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: LD_INT 22
1454: PUSH
1455: LD_INT 2
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 30
1464: PUSH
1465: LD_INT 31
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PPUSH
1476: CALL_OW 69
1480: ST_TO_ADDR
// for i in tmp do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1562
// begin PrepareHuman ( false , 1 , [ 4 , 3 , 3 ] [ Difficulty ] ) ;
1494: LD_INT 0
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_INT 4
1502: PUSH
1503: LD_INT 3
1505: PUSH
1506: LD_INT 3
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_OWVAR 67
1518: ARRAY
1519: PPUSH
1520: CALL_OW 380
// un := CreateHuman ;
1524: LD_ADDR_VAR 0 4
1528: PUSH
1529: CALL_OW 44
1533: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: LD_INT 1
1541: PPUSH
1542: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1546: LD_VAR 0 4
1550: PPUSH
1551: LD_VAR 0 2
1555: PPUSH
1556: CALL_OW 52
// end ;
1560: GO 1491
1562: POP
1563: POP
// tmp := AreaToList ( gensher_mines , 0 ) ;
1564: LD_ADDR_VAR 0 3
1568: PUSH
1569: LD_INT 15
1571: PPUSH
1572: LD_INT 0
1574: PPUSH
1575: CALL_OW 517
1579: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_VAR 0 3
1594: PUSH
1595: LD_INT 1
1597: ARRAY
1598: PUSH
1599: FOR_TO
1600: IFFALSE 1702
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 , 0 ) ;
1602: LD_VAR 0 3
1606: PUSH
1607: LD_INT 1
1609: ARRAY
1610: PUSH
1611: LD_VAR 0 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 3
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: PUSH
1626: LD_VAR 0 2
1630: ARRAY
1631: PPUSH
1632: LD_INT 2
1634: PPUSH
1635: LD_INT 0
1637: PPUSH
1638: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
1642: LD_ADDR_EXP 3
1646: PUSH
1647: LD_EXP 3
1651: PPUSH
1652: LD_EXP 3
1656: PUSH
1657: LD_INT 1
1659: PLUS
1660: PPUSH
1661: LD_VAR 0 3
1665: PUSH
1666: LD_INT 1
1668: ARRAY
1669: PUSH
1670: LD_VAR 0 2
1674: ARRAY
1675: PUSH
1676: LD_VAR 0 3
1680: PUSH
1681: LD_INT 2
1683: ARRAY
1684: PUSH
1685: LD_VAR 0 2
1689: ARRAY
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: PPUSH
1695: CALL_OW 2
1699: ST_TO_ADDR
// end ;
1700: GO 1599
1702: POP
1703: POP
// end ;
1704: LD_VAR 0 1
1708: RET
// export function InitMC_Gensher ( ) ; begin
1709: LD_INT 0
1711: PPUSH
// MC_SetScanArea ( 2 , gensher_base ) ;
1712: LD_INT 2
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: CALL 65750 0 2
// MC_SetParkingArea ( 2 , gensher_parking ) ;
1722: LD_INT 2
1724: PPUSH
1725: LD_INT 9
1727: PPUSH
1728: CALL 65694 0 2
// MC_SetDepositsXY ( 2 , [ [ 56 , 23 , 0 ] , [ 52 , 40 , 1 ] ] ) ;
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 56
1737: PUSH
1738: LD_INT 23
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 52
1751: PUSH
1752: LD_INT 40
1754: PUSH
1755: LD_INT 1
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PPUSH
1767: CALL 64753 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ar_gun , ar_rocket_launcher ] ) ;
1771: LD_INT 2
1773: PPUSH
1774: LD_INT 27
1776: PUSH
1777: LD_INT 28
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL 65582 0 2
// MC_SetCratesArea ( 2 , gensher_crates ) ;
1788: LD_INT 2
1790: PPUSH
1791: LD_INT 8
1793: PPUSH
1794: CALL 65264 0 2
// MC_SetTame ( 2 , gensher_ape ) ;
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 7
1803: PPUSH
1804: CALL 64995 0 2
// MC_SetDefenderLimit ( 2 , 4 ) ;
1808: LD_INT 2
1810: PPUSH
1811: LD_INT 4
1813: PPUSH
1814: CALL 64614 0 2
// MC_SetProduceList ( 2 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ) ;
1818: LD_INT 2
1820: PPUSH
1821: LD_INT 13
1823: PUSH
1824: LD_INT 2
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: LD_INT 31
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 13
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: LD_INT 1
1847: PUSH
1848: LD_INT 31
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 14
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: LD_INT 27
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 14
1877: PUSH
1878: LD_INT 1
1880: PUSH
1881: LD_INT 2
1883: PUSH
1884: LD_INT 27
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 14
1895: PUSH
1896: LD_INT 1
1898: PUSH
1899: LD_INT 2
1901: PUSH
1902: LD_INT 28
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 14
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 26
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: PPUSH
1937: CALL 64429 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 13 , 18 , 1 ] , [ b_lab , 17 , 27 , 1 ] , [ b_solar_power , 17 , 3 , 0 ] , [ b_oil_mine , 56 , 23 , 0 ] , [ b_armoury , 42 , 29 , 5 ] , [ b_workshop , 11 , 7 , 2 ] , [ b_solar_power , 20 , 3 , 0 ] , [ b_solar_power , 23 , 3 , 0 ] , [ b_solar_power , 26 , 3 , 0 ] , [ b_bunker , 27 , 44 , 5 ] , [ b_bunker , 41 , 41 , 5 ] , [ b_bunker , 45 , 24 , 5 ] , [ b_bunker , 48 , 19 , 5 ] , [ b_bunker , 41 , 3 , 4 ] , [ b_armoury , 44 , 9 , 4 ] , [ b_siberite_mine , 52 , 40 , 3 ] ] ) ;
1941: LD_INT 2
1943: PPUSH
1944: LD_INT 6
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 18
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 6
1964: PUSH
1965: LD_INT 17
1967: PUSH
1968: LD_INT 27
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 27
1982: PUSH
1983: LD_INT 17
1985: PUSH
1986: LD_INT 3
1988: PUSH
1989: LD_INT 0
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 29
2000: PUSH
2001: LD_INT 56
2003: PUSH
2004: LD_INT 23
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 4
2018: PUSH
2019: LD_INT 42
2021: PUSH
2022: LD_INT 29
2024: PUSH
2025: LD_INT 5
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 2
2036: PUSH
2037: LD_INT 11
2039: PUSH
2040: LD_INT 7
2042: PUSH
2043: LD_INT 2
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 27
2054: PUSH
2055: LD_INT 20
2057: PUSH
2058: LD_INT 3
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 27
2072: PUSH
2073: LD_INT 23
2075: PUSH
2076: LD_INT 3
2078: PUSH
2079: LD_INT 0
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 27
2090: PUSH
2091: LD_INT 26
2093: PUSH
2094: LD_INT 3
2096: PUSH
2097: LD_INT 0
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 32
2108: PUSH
2109: LD_INT 27
2111: PUSH
2112: LD_INT 44
2114: PUSH
2115: LD_INT 5
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 32
2126: PUSH
2127: LD_INT 41
2129: PUSH
2130: LD_INT 41
2132: PUSH
2133: LD_INT 5
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 32
2144: PUSH
2145: LD_INT 45
2147: PUSH
2148: LD_INT 24
2150: PUSH
2151: LD_INT 5
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 32
2162: PUSH
2163: LD_INT 48
2165: PUSH
2166: LD_INT 19
2168: PUSH
2169: LD_INT 5
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 32
2180: PUSH
2181: LD_INT 41
2183: PUSH
2184: LD_INT 3
2186: PUSH
2187: LD_INT 4
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: LD_INT 44
2201: PUSH
2202: LD_INT 9
2204: PUSH
2205: LD_INT 4
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 30
2216: PUSH
2217: LD_INT 52
2219: PUSH
2220: LD_INT 40
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: PPUSH
2250: CALL 64321 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_opto , b_lab_biological , b_lab_siberium ] ) ;
2254: LD_INT 2
2256: PPUSH
2257: LD_INT 10
2259: PUSH
2260: LD_INT 15
2262: PUSH
2263: LD_INT 13
2265: PUSH
2266: LD_INT 11
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL 65171 0 2
// MC_SetFactoryExtension ( 2 , 11 , 7 , 2 , [ b_ext_stitch , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
2279: LD_INT 2
2281: PPUSH
2282: LD_INT 11
2284: PPUSH
2285: LD_INT 7
2287: PPUSH
2288: LD_INT 2
2290: PPUSH
2291: LD_INT 23
2293: PUSH
2294: LD_INT 16
2296: PUSH
2297: LD_INT 17
2299: PUSH
2300: LD_INT 18
2302: PUSH
2303: LD_INT 22
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL 65376 0 5
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
2317: LD_INT 2
2319: PPUSH
2320: LD_INT 0
2322: PPUSH
2323: CALL 65044 0 2
// end ;
2327: LD_VAR 0 1
2331: RET
// every 10 trigger staticMines and FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) do var i , j , tmp , x , y ;
2332: LD_EXP 3
2336: PUSH
2337: LD_INT 15
2339: PPUSH
2340: LD_INT 81
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PPUSH
2350: CALL_OW 70
2354: AND
2355: IFFALSE 2568
2357: GO 2359
2359: DISABLE
2360: LD_INT 0
2362: PPUSH
2363: PPUSH
2364: PPUSH
2365: PPUSH
2366: PPUSH
// begin enable ;
2367: ENABLE
// tmp := FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: LD_INT 15
2375: PPUSH
2376: LD_INT 81
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PPUSH
2386: CALL_OW 70
2390: ST_TO_ADDR
// if not tmp then
2391: LD_VAR 0 3
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2568
// for i in tmp do
2400: LD_ADDR_VAR 0 1
2404: PUSH
2405: LD_VAR 0 3
2409: PUSH
2410: FOR_IN
2411: IFFALSE 2566
// begin x := GetX ( i ) ;
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: LD_VAR 0 1
2422: PPUSH
2423: CALL_OW 250
2427: ST_TO_ADDR
// y := GetY ( i ) ;
2428: LD_ADDR_VAR 0 5
2432: PUSH
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 251
2442: ST_TO_ADDR
// if MineAtPos ( x , y ) then
2443: LD_VAR 0 4
2447: PPUSH
2448: LD_VAR 0 5
2452: PPUSH
2453: CALL_OW 458
2457: IFFALSE 2564
// begin LaunchMineAtPos ( x , y , 2 ) ;
2459: LD_VAR 0 4
2463: PPUSH
2464: LD_VAR 0 5
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 456
// for j = 1 to staticMines do
2476: LD_ADDR_VAR 0 2
2480: PUSH
2481: DOUBLE
2482: LD_INT 1
2484: DEC
2485: ST_TO_ADDR
2486: LD_EXP 3
2490: PUSH
2491: FOR_TO
2492: IFFALSE 2562
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
2494: LD_EXP 3
2498: PUSH
2499: LD_VAR 0 2
2503: ARRAY
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PUSH
2509: LD_VAR 0 4
2513: EQUAL
2514: PUSH
2515: LD_EXP 3
2519: PUSH
2520: LD_VAR 0 2
2524: ARRAY
2525: PUSH
2526: LD_INT 2
2528: ARRAY
2529: PUSH
2530: LD_VAR 0 5
2534: EQUAL
2535: AND
2536: IFFALSE 2560
// begin staticMines := Delete ( staticMines , j ) ;
2538: LD_ADDR_EXP 3
2542: PUSH
2543: LD_EXP 3
2547: PPUSH
2548: LD_VAR 0 2
2552: PPUSH
2553: CALL_OW 3
2557: ST_TO_ADDR
// break ;
2558: GO 2562
// end ;
2560: GO 2491
2562: POP
2563: POP
// end ; end ;
2564: GO 2410
2566: POP
2567: POP
// end ; end_of_file
2568: PPOPN 5
2570: END
// export Popov , popov_side , extraPopovForces ; export function PreparePopov ; var i , un , tmp ; begin
2571: LD_INT 0
2573: PPUSH
2574: PPUSH
2575: PPUSH
2576: PPUSH
// popov_side := 3 ;
2577: LD_ADDR_EXP 9
2581: PUSH
2582: LD_INT 3
2584: ST_TO_ADDR
// uc_side := popov_side ;
2585: LD_ADDR_OWVAR 20
2589: PUSH
2590: LD_EXP 9
2594: ST_TO_ADDR
// uc_nation := 3 ;
2595: LD_ADDR_OWVAR 21
2599: PUSH
2600: LD_INT 3
2602: ST_TO_ADDR
// tmp := PrepareBase ( ru_depot , popov_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
2603: LD_ADDR_VAR 0 4
2607: PUSH
2608: LD_INT 9
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: LD_STRING 
2616: PPUSH
2617: LD_INT 8
2619: PUSH
2620: LD_INT 7
2622: PUSH
2623: LD_INT 6
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_OWVAR 67
2635: ARRAY
2636: PPUSH
2637: LD_INT 1500
2639: PUSH
2640: LD_INT 300
2642: PUSH
2643: LD_INT 30
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PPUSH
2651: LD_INT 4
2653: PUSH
2654: LD_INT 4
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: LD_INT 4
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: PPUSH
2669: CALL 12683 0 6
2673: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 3 , tmp ) ;
2674: LD_ADDR_EXP 14
2678: PUSH
2679: LD_EXP 14
2683: PPUSH
2684: LD_INT 3
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: CALL_OW 1
2696: ST_TO_ADDR
// extraPopovForces := [ ] ;
2697: LD_ADDR_EXP 10
2701: PUSH
2702: EMPTY
2703: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: DOUBLE
2710: LD_INT 1
2712: DEC
2713: ST_TO_ADDR
2714: LD_INT 4
2716: PUSH
2717: LD_INT 5
2719: PUSH
2720: LD_INT 6
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PUSH
2728: LD_OWVAR 67
2732: ARRAY
2733: PUSH
2734: FOR_TO
2735: IFFALSE 2838
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
2737: LD_INT 0
2739: PPUSH
2740: LD_INT 1
2742: PPUSH
2743: LD_INT 4
2745: PUSH
2746: LD_INT 5
2748: PUSH
2749: LD_INT 6
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: LIST
2756: PUSH
2757: LD_OWVAR 67
2761: ARRAY
2762: PPUSH
2763: CALL_OW 380
// un := CreateHuman ;
2767: LD_ADDR_VAR 0 3
2771: PUSH
2772: CALL_OW 44
2776: ST_TO_ADDR
// PlaceUnitXYR ( un , 131 , 110 , 8 , false ) ;
2777: LD_VAR 0 3
2781: PPUSH
2782: LD_INT 131
2784: PPUSH
2785: LD_INT 110
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 50
// ComHold ( un ) ;
2798: LD_VAR 0 3
2802: PPUSH
2803: CALL_OW 140
// extraPopovForces := Replace ( extraPopovForces , extraPopovForces + 1 , un ) ;
2807: LD_ADDR_EXP 10
2811: PUSH
2812: LD_EXP 10
2816: PPUSH
2817: LD_EXP 10
2821: PUSH
2822: LD_INT 1
2824: PLUS
2825: PPUSH
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL_OW 1
2835: ST_TO_ADDR
// end ;
2836: GO 2734
2838: POP
2839: POP
// PrepareSoldier ( false , 6 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 6
2845: PPUSH
2846: CALL_OW 381
// un := CreateHuman ;
2850: LD_ADDR_VAR 0 3
2854: PUSH
2855: CALL_OW 44
2859: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2860: LD_VAR 0 3
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 150 , 158 ) ) ;
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_INT 150
2879: PPUSH
2880: LD_INT 158
2882: PPUSH
2883: CALL_OW 428
2887: PPUSH
2888: CALL_OW 52
// end ;
2892: LD_VAR 0 1
2896: RET
// export function InitMC_Popov ( ) ; begin
2897: LD_INT 0
2899: PPUSH
// MC_SetScanArea ( 3 , popov_base ) ;
2900: LD_INT 3
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL 65750 0 2
// MC_SetParkingArea ( 3 , popov_parking ) ;
2910: LD_INT 3
2912: PPUSH
2913: LD_INT 10
2915: PPUSH
2916: CALL 65694 0 2
// MC_SetDepositsXY ( 3 , [ [ 86 , 118 , 0 ] , [ 123 , 151 , 1 ] , [ 106 , 113 , 0 ] ] ) ;
2920: LD_INT 3
2922: PPUSH
2923: LD_INT 86
2925: PUSH
2926: LD_INT 118
2928: PUSH
2929: LD_INT 0
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 123
2939: PUSH
2940: LD_INT 151
2942: PUSH
2943: LD_INT 1
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 106
2953: PUSH
2954: LD_INT 113
2956: PUSH
2957: LD_INT 0
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL 64753 0 2
// MC_SetAllowedTurretWeapons ( 3 , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ) ;
2974: LD_INT 3
2976: PPUSH
2977: LD_INT 46
2979: PUSH
2980: LD_INT 45
2982: PUSH
2983: LD_INT 47
2985: PUSH
2986: LD_INT 49
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL 65582 0 2
// MC_SetCratesArea ( 3 , popov_crates ) ;
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 12
3004: PPUSH
3005: CALL 65264 0 2
// MC_SetTame ( 3 , popov_ape ) ;
3009: LD_INT 3
3011: PPUSH
3012: LD_INT 11
3014: PPUSH
3015: CALL 64995 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
3019: LD_INT 3
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL 64614 0 2
// MC_SetProduceList ( 3 , [ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] ] ) ;
3029: LD_INT 3
3031: PPUSH
3032: LD_INT 23
3034: PUSH
3035: LD_INT 1
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: LD_INT 44
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 23
3052: PUSH
3053: LD_INT 1
3055: PUSH
3056: LD_INT 3
3058: PUSH
3059: LD_INT 45
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 21
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: LD_INT 3
3076: PUSH
3077: LD_INT 43
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 21
3088: PUSH
3089: LD_INT 1
3091: PUSH
3092: LD_INT 3
3094: PUSH
3095: LD_INT 45
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: PPUSH
3110: CALL 64429 0 2
// MC_SetBuildingList ( 3 , [ [ b_lab , 76 , 145 , 1 ] , [ b_oil_power , 87 , 144 , 0 ] , [ b_oil_mine , 86 , 118 , 0 ] , [ b_oil_mine , 106 , 113 , 0 ] , [ b_oil_power , 87 , 147 , 1 ] , [ b_workshop , 94 , 161 , 0 ] , [ b_lab , 81 , 155 , 1 ] , [ b_armoury , 103 , 147 , 3 ] , [ b_oil_power , 96 , 152 , 0 ] , [ b_oil_power , 96 , 149 , 3 ] , [ b_bunker , 109 , 142 , 3 ] , [ b_bunker , 112 , 148 , 3 ] , [ b_turret , 120 , 159 , 4 ] , [ b_turret , 122 , 163 , 4 ] , [ b_turret , 123 , 167 , 4 ] , [ b_turret , 59 , 111 , 3 ] , [ b_turret , 65 , 111 , 3 ] , [ b_turret , 76 , 117 , 3 ] , [ b_turret , 80 , 119 , 3 ] , [ b_turret , 87 , 125 , 3 ] , [ b_armoury , 92 , 129 , 3 ] , [ b_siberite_power , 85 , 165 , 0 ] , [ b_siberite_power , 83 , 161 , 4 ] , [ b_siberite_power , 91 , 166 , 3 ] , [ b_siberite_power , 102 , 166 , 2 ] , [ b_teleport , 91 , 147 , 3 ] ] ) ;
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 6
3119: PUSH
3120: LD_INT 76
3122: PUSH
3123: LD_INT 145
3125: PUSH
3126: LD_INT 1
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: PUSH
3135: LD_INT 26
3137: PUSH
3138: LD_INT 87
3140: PUSH
3141: LD_INT 144
3143: PUSH
3144: LD_INT 0
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 29
3155: PUSH
3156: LD_INT 86
3158: PUSH
3159: LD_INT 118
3161: PUSH
3162: LD_INT 0
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 29
3173: PUSH
3174: LD_INT 106
3176: PUSH
3177: LD_INT 113
3179: PUSH
3180: LD_INT 0
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 26
3191: PUSH
3192: LD_INT 87
3194: PUSH
3195: LD_INT 147
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 94
3212: PUSH
3213: LD_INT 161
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 6
3227: PUSH
3228: LD_INT 81
3230: PUSH
3231: LD_INT 155
3233: PUSH
3234: LD_INT 1
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 4
3245: PUSH
3246: LD_INT 103
3248: PUSH
3249: LD_INT 147
3251: PUSH
3252: LD_INT 3
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 26
3263: PUSH
3264: LD_INT 96
3266: PUSH
3267: LD_INT 152
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 26
3281: PUSH
3282: LD_INT 96
3284: PUSH
3285: LD_INT 149
3287: PUSH
3288: LD_INT 3
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 32
3299: PUSH
3300: LD_INT 109
3302: PUSH
3303: LD_INT 142
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: PUSH
3315: LD_INT 32
3317: PUSH
3318: LD_INT 112
3320: PUSH
3321: LD_INT 148
3323: PUSH
3324: LD_INT 3
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 33
3335: PUSH
3336: LD_INT 120
3338: PUSH
3339: LD_INT 159
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 33
3353: PUSH
3354: LD_INT 122
3356: PUSH
3357: LD_INT 163
3359: PUSH
3360: LD_INT 4
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 33
3371: PUSH
3372: LD_INT 123
3374: PUSH
3375: LD_INT 167
3377: PUSH
3378: LD_INT 4
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 33
3389: PUSH
3390: LD_INT 59
3392: PUSH
3393: LD_INT 111
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 33
3407: PUSH
3408: LD_INT 65
3410: PUSH
3411: LD_INT 111
3413: PUSH
3414: LD_INT 3
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 33
3425: PUSH
3426: LD_INT 76
3428: PUSH
3429: LD_INT 117
3431: PUSH
3432: LD_INT 3
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 33
3443: PUSH
3444: LD_INT 80
3446: PUSH
3447: LD_INT 119
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: PUSH
3459: LD_INT 33
3461: PUSH
3462: LD_INT 87
3464: PUSH
3465: LD_INT 125
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 4
3479: PUSH
3480: LD_INT 92
3482: PUSH
3483: LD_INT 129
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 28
3497: PUSH
3498: LD_INT 85
3500: PUSH
3501: LD_INT 165
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 28
3515: PUSH
3516: LD_INT 83
3518: PUSH
3519: LD_INT 161
3521: PUSH
3522: LD_INT 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 28
3533: PUSH
3534: LD_INT 91
3536: PUSH
3537: LD_INT 166
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 28
3551: PUSH
3552: LD_INT 102
3554: PUSH
3555: LD_INT 166
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 34
3569: PUSH
3570: LD_INT 91
3572: PUSH
3573: LD_INT 147
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL 64321 0 2
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
3617: LD_INT 3
3619: PPUSH
3620: LD_INT 10
3622: PUSH
3623: LD_INT 12
3625: PUSH
3626: LD_INT 14
3628: PUSH
3629: LD_INT 11
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL 65171 0 2
// MC_SetFactoryExtension ( 3 , 94 , 161 , 0 , [ b_ext_noncombat , b_ext_gun , b_ext_rocket , b_ext_computer , b_ext_siberium ] ) ;
3642: LD_INT 3
3644: PPUSH
3645: LD_INT 94
3647: PPUSH
3648: LD_INT 161
3650: PPUSH
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 19
3656: PUSH
3657: LD_INT 17
3659: PUSH
3660: LD_INT 18
3662: PUSH
3663: LD_INT 24
3665: PUSH
3666: LD_INT 21
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: PPUSH
3676: CALL 65376 0 5
// MC_SetUpgradeBuilding ( 3 , b_depot ) ;
3680: LD_INT 3
3682: PPUSH
3683: LD_INT 0
3685: PPUSH
3686: CALL 65044 0 2
// end ; end_of_file
3690: LD_VAR 0 1
3694: RET
// export Sikorski ; export function PrepareSikorski ; var i , j , un ; begin
3695: LD_INT 0
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
// uc_side := 1 ;
3701: LD_ADDR_OWVAR 20
3705: PUSH
3706: LD_INT 1
3708: ST_TO_ADDR
// uc_nation := 1 ;
3709: LD_ADDR_OWVAR 21
3713: PUSH
3714: LD_INT 1
3716: ST_TO_ADDR
// hc_importance := 100 ;
3717: LD_ADDR_OWVAR 32
3721: PUSH
3722: LD_INT 100
3724: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
3725: LD_ADDR_OWVAR 26
3729: PUSH
3730: LD_STRING Jeremy Sikorski
3732: ST_TO_ADDR
// hc_gallery := us ;
3733: LD_ADDR_OWVAR 33
3737: PUSH
3738: LD_STRING us
3740: ST_TO_ADDR
// hc_face_number := 19 ;
3741: LD_ADDR_OWVAR 34
3745: PUSH
3746: LD_INT 19
3748: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 1
3754: PPUSH
3755: LD_INT 4
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_OWVAR 67
3773: ARRAY
3774: PPUSH
3775: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3779: LD_ADDR_OWVAR 29
3783: PUSH
3784: LD_INT 10
3786: PUSH
3787: LD_INT 12
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: ST_TO_ADDR
// Sikorski := CreateHuman ;
3794: LD_ADDR_EXP 11
3798: PUSH
3799: CALL_OW 44
3803: ST_TO_ADDR
// PlaceUnitXYR ( Sikorski , 133 , 19 , 2 , false ) ;
3804: LD_EXP 11
3808: PPUSH
3809: LD_INT 133
3811: PPUSH
3812: LD_INT 19
3814: PPUSH
3815: LD_INT 2
3817: PPUSH
3818: LD_INT 0
3820: PPUSH
3821: CALL_OW 50
// InitHc_All ( ) ;
3825: CALL_OW 584
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3829: LD_ADDR_VAR 0 2
3833: PUSH
3834: DOUBLE
3835: LD_INT 1
3837: DEC
3838: ST_TO_ADDR
3839: LD_INT 4
3841: PUSH
3842: LD_INT 3
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_OWVAR 67
3857: ARRAY
3858: PUSH
3859: FOR_TO
3860: IFFALSE 3976
// for j := 1 to 4 do
3862: LD_ADDR_VAR 0 3
3866: PUSH
3867: DOUBLE
3868: LD_INT 1
3870: DEC
3871: ST_TO_ADDR
3872: LD_INT 4
3874: PUSH
3875: FOR_TO
3876: IFFALSE 3972
// begin PrepareHuman ( false , j , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
3878: LD_INT 0
3880: PPUSH
3881: LD_VAR 0 3
3885: PPUSH
3886: LD_INT 5
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 3
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_OWVAR 67
3904: ARRAY
3905: PPUSH
3906: CALL_OW 380
// un := CreateHuman ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3920: LD_VAR 0 4
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 5
3930: PPUSH
3931: CALL_OW 12
3935: PPUSH
3936: CALL_OW 233
// PlaceUnitXYR ( un , 133 , 19 , 6 , false ) ;
3940: LD_VAR 0 4
3944: PPUSH
3945: LD_INT 133
3947: PPUSH
3948: LD_INT 19
3950: PPUSH
3951: LD_INT 6
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 50
// ComHold ( un ) ;
3961: LD_VAR 0 4
3965: PPUSH
3966: CALL_OW 140
// end ;
3970: GO 3875
3972: POP
3973: POP
3974: GO 3859
3976: POP
3977: POP
// vc_chassis := us_heavy_tracked ;
3978: LD_ADDR_OWVAR 37
3982: PUSH
3983: LD_INT 4
3985: ST_TO_ADDR
// vc_engine := engine_combustion ;
3986: LD_ADDR_OWVAR 39
3990: PUSH
3991: LD_INT 1
3993: ST_TO_ADDR
// vc_control := control_manual ;
3994: LD_ADDR_OWVAR 38
3998: PUSH
3999: LD_INT 1
4001: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
4002: LD_ADDR_OWVAR 40
4006: PUSH
4007: LD_INT 14
4009: ST_TO_ADDR
// vc_fuel_battery := 60 ;
4010: LD_ADDR_OWVAR 41
4014: PUSH
4015: LD_INT 60
4017: ST_TO_ADDR
// un := CreateVehicle ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: CALL_OW 45
4027: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4028: LD_VAR 0 4
4032: PPUSH
4033: LD_INT 2
4035: PPUSH
4036: CALL_OW 233
// PlaceUnitXY ( un , 128 , 12 , false ) ;
4040: LD_VAR 0 4
4044: PPUSH
4045: LD_INT 128
4047: PPUSH
4048: LD_INT 12
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 48
// for i := 1 to 3 do
4058: LD_ADDR_VAR 0 2
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_INT 3
4070: PUSH
4071: FOR_TO
4072: IFFALSE 4095
// CreateCratesXYR ( 5 , 133 , 19 , 3 , false ) ;
4074: LD_INT 5
4076: PPUSH
4077: LD_INT 133
4079: PPUSH
4080: LD_INT 19
4082: PPUSH
4083: LD_INT 3
4085: PPUSH
4086: LD_INT 0
4088: PPUSH
4089: CALL_OW 56
4093: GO 4071
4095: POP
4096: POP
// end ; end_of_file
4097: LD_VAR 0 1
4101: RET
// export function Action ; begin
4102: LD_INT 0
4104: PPUSH
// InGameOn ;
4105: CALL_OW 8
// CenterNowOnXY ( 133 , 19 ) ;
4109: LD_INT 133
4111: PPUSH
4112: LD_INT 19
4114: PPUSH
4115: CALL_OW 86
// Say ( Sikorski , WT-DS-1 ) ;
4119: LD_EXP 11
4123: PPUSH
4124: LD_STRING WT-DS-1
4126: PPUSH
4127: CALL_OW 88
// InGameOff ;
4131: CALL_OW 9
// ChangeMissionObjectives ( DestroyEnemy ) ;
4135: LD_STRING DestroyEnemy
4137: PPUSH
4138: CALL_OW 337
// end ; end_of_file
4142: LD_VAR 0 1
4146: RET
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
4147: LD_VAR 0 1
4151: PPUSH
4152: CALL 67869 0 1
// if un = Powell then
4156: LD_VAR 0 1
4160: PUSH
4161: LD_EXP 4
4165: EQUAL
4166: IFFALSE 4175
// YouLost ( Powell ) ;
4168: LD_STRING Powell
4170: PPUSH
4171: CALL_OW 104
// end ;
4175: PPOPN 1
4177: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
4178: LD_VAR 0 1
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: CALL 70203 0 2
// end ;
4192: PPOPN 2
4194: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL 69271 0 1
// end ;
4204: PPOPN 1
4206: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
4207: LD_VAR 0 1
4211: PPUSH
4212: CALL 69512 0 1
// end ;
4216: PPOPN 1
4218: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL 67565 0 2
// end ;
4233: PPOPN 2
4235: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_VAR 0 2
4245: PPUSH
4246: LD_VAR 0 3
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: LD_VAR 0 5
4260: PPUSH
4261: CALL 67185 0 5
// end ;
4265: PPOPN 5
4267: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL 66781 0 2
// end ;
4282: PPOPN 2
4284: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
4285: LD_VAR 0 1
4289: PPUSH
4290: LD_VAR 0 2
4294: PPUSH
4295: LD_VAR 0 3
4299: PPUSH
4300: LD_VAR 0 4
4304: PPUSH
4305: CALL 66619 0 4
// end ;
4309: PPOPN 4
4311: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
4312: LD_VAR 0 1
4316: PPUSH
4317: LD_VAR 0 2
4321: PPUSH
4322: LD_VAR 0 3
4326: PPUSH
4327: CALL 66394 0 3
// end ;
4331: PPOPN 3
4333: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
4334: LD_VAR 0 1
4338: PPUSH
4339: LD_VAR 0 2
4343: PPUSH
4344: CALL 66279 0 2
// end ;
4348: PPOPN 2
4350: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_VAR 0 2
4360: PPUSH
4361: CALL 70464 0 2
// end ;
4365: PPOPN 2
4367: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
4368: LD_VAR 0 1
4372: PPUSH
4373: LD_VAR 0 2
4377: PPUSH
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL 70680 0 4
// end ;
4392: PPOPN 4
4394: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_VAR 0 2
4404: PPUSH
4405: CALL 66088 0 2
// end ;
4409: PPOPN 2
4411: END
// export function CustomEvent ( event ) ; begin
4412: LD_INT 0
4414: PPUSH
// end ;
4415: LD_VAR 0 2
4419: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
4420: LD_VAR 0 1
4424: PUSH
4425: LD_INT 1
4427: EQUAL
4428: PUSH
4429: LD_VAR 0 2
4433: PUSH
4434: LD_INT 4
4436: EQUAL
4437: AND
4438: IFFALSE 4447
// YouLost ( FriendlyFire ) ;
4440: LD_STRING FriendlyFire
4442: PPUSH
4443: CALL_OW 104
// end ; end_of_file
4447: PPOPN 2
4449: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
// if exist_mode then
4454: LD_VAR 0 2
4458: IFFALSE 4483
// unit := CreateCharacter ( prefix & ident ) else
4460: LD_ADDR_VAR 0 5
4464: PUSH
4465: LD_VAR 0 3
4469: PUSH
4470: LD_VAR 0 1
4474: STR
4475: PPUSH
4476: CALL_OW 34
4480: ST_TO_ADDR
4481: GO 4498
// unit := NewCharacter ( ident ) ;
4483: LD_ADDR_VAR 0 5
4487: PUSH
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 25
4497: ST_TO_ADDR
// result := unit ;
4498: LD_ADDR_VAR 0 4
4502: PUSH
4503: LD_VAR 0 5
4507: ST_TO_ADDR
// end ;
4508: LD_VAR 0 4
4512: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4513: LD_INT 0
4515: PPUSH
4516: PPUSH
// if not side or not nation then
4517: LD_VAR 0 1
4521: NOT
4522: PUSH
4523: LD_VAR 0 2
4527: NOT
4528: OR
4529: IFFALSE 4533
// exit ;
4531: GO 5297
// case nation of nation_american :
4533: LD_VAR 0 2
4537: PUSH
4538: LD_INT 1
4540: DOUBLE
4541: EQUAL
4542: IFTRUE 4546
4544: GO 4760
4546: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4547: LD_ADDR_VAR 0 4
4551: PUSH
4552: LD_INT 35
4554: PUSH
4555: LD_INT 45
4557: PUSH
4558: LD_INT 46
4560: PUSH
4561: LD_INT 47
4563: PUSH
4564: LD_INT 82
4566: PUSH
4567: LD_INT 83
4569: PUSH
4570: LD_INT 84
4572: PUSH
4573: LD_INT 85
4575: PUSH
4576: LD_INT 86
4578: PUSH
4579: LD_INT 1
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: LD_INT 6
4587: PUSH
4588: LD_INT 15
4590: PUSH
4591: LD_INT 16
4593: PUSH
4594: LD_INT 7
4596: PUSH
4597: LD_INT 12
4599: PUSH
4600: LD_INT 13
4602: PUSH
4603: LD_INT 10
4605: PUSH
4606: LD_INT 14
4608: PUSH
4609: LD_INT 20
4611: PUSH
4612: LD_INT 21
4614: PUSH
4615: LD_INT 22
4617: PUSH
4618: LD_INT 25
4620: PUSH
4621: LD_INT 32
4623: PUSH
4624: LD_INT 27
4626: PUSH
4627: LD_INT 36
4629: PUSH
4630: LD_INT 69
4632: PUSH
4633: LD_INT 39
4635: PUSH
4636: LD_INT 34
4638: PUSH
4639: LD_INT 40
4641: PUSH
4642: LD_INT 48
4644: PUSH
4645: LD_INT 49
4647: PUSH
4648: LD_INT 50
4650: PUSH
4651: LD_INT 51
4653: PUSH
4654: LD_INT 52
4656: PUSH
4657: LD_INT 53
4659: PUSH
4660: LD_INT 54
4662: PUSH
4663: LD_INT 55
4665: PUSH
4666: LD_INT 56
4668: PUSH
4669: LD_INT 57
4671: PUSH
4672: LD_INT 58
4674: PUSH
4675: LD_INT 59
4677: PUSH
4678: LD_INT 60
4680: PUSH
4681: LD_INT 61
4683: PUSH
4684: LD_INT 62
4686: PUSH
4687: LD_INT 80
4689: PUSH
4690: LD_INT 82
4692: PUSH
4693: LD_INT 83
4695: PUSH
4696: LD_INT 84
4698: PUSH
4699: LD_INT 85
4701: PUSH
4702: LD_INT 86
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: ST_TO_ADDR
4758: GO 5221
4760: LD_INT 2
4762: DOUBLE
4763: EQUAL
4764: IFTRUE 4768
4766: GO 4990
4768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_INT 35
4776: PUSH
4777: LD_INT 45
4779: PUSH
4780: LD_INT 46
4782: PUSH
4783: LD_INT 47
4785: PUSH
4786: LD_INT 82
4788: PUSH
4789: LD_INT 83
4791: PUSH
4792: LD_INT 84
4794: PUSH
4795: LD_INT 85
4797: PUSH
4798: LD_INT 87
4800: PUSH
4801: LD_INT 70
4803: PUSH
4804: LD_INT 1
4806: PUSH
4807: LD_INT 11
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 4
4815: PUSH
4816: LD_INT 5
4818: PUSH
4819: LD_INT 6
4821: PUSH
4822: LD_INT 15
4824: PUSH
4825: LD_INT 18
4827: PUSH
4828: LD_INT 7
4830: PUSH
4831: LD_INT 17
4833: PUSH
4834: LD_INT 8
4836: PUSH
4837: LD_INT 20
4839: PUSH
4840: LD_INT 21
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 72
4848: PUSH
4849: LD_INT 26
4851: PUSH
4852: LD_INT 69
4854: PUSH
4855: LD_INT 39
4857: PUSH
4858: LD_INT 40
4860: PUSH
4861: LD_INT 41
4863: PUSH
4864: LD_INT 42
4866: PUSH
4867: LD_INT 43
4869: PUSH
4870: LD_INT 48
4872: PUSH
4873: LD_INT 49
4875: PUSH
4876: LD_INT 50
4878: PUSH
4879: LD_INT 51
4881: PUSH
4882: LD_INT 52
4884: PUSH
4885: LD_INT 53
4887: PUSH
4888: LD_INT 54
4890: PUSH
4891: LD_INT 55
4893: PUSH
4894: LD_INT 56
4896: PUSH
4897: LD_INT 60
4899: PUSH
4900: LD_INT 61
4902: PUSH
4903: LD_INT 62
4905: PUSH
4906: LD_INT 66
4908: PUSH
4909: LD_INT 67
4911: PUSH
4912: LD_INT 68
4914: PUSH
4915: LD_INT 81
4917: PUSH
4918: LD_INT 82
4920: PUSH
4921: LD_INT 83
4923: PUSH
4924: LD_INT 84
4926: PUSH
4927: LD_INT 85
4929: PUSH
4930: LD_INT 87
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: ST_TO_ADDR
4988: GO 5221
4990: LD_INT 3
4992: DOUBLE
4993: EQUAL
4994: IFTRUE 4998
4996: GO 5220
4998: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: LD_INT 46
5006: PUSH
5007: LD_INT 47
5009: PUSH
5010: LD_INT 1
5012: PUSH
5013: LD_INT 2
5015: PUSH
5016: LD_INT 82
5018: PUSH
5019: LD_INT 83
5021: PUSH
5022: LD_INT 84
5024: PUSH
5025: LD_INT 85
5027: PUSH
5028: LD_INT 86
5030: PUSH
5031: LD_INT 11
5033: PUSH
5034: LD_INT 9
5036: PUSH
5037: LD_INT 20
5039: PUSH
5040: LD_INT 19
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 24
5048: PUSH
5049: LD_INT 22
5051: PUSH
5052: LD_INT 25
5054: PUSH
5055: LD_INT 28
5057: PUSH
5058: LD_INT 29
5060: PUSH
5061: LD_INT 30
5063: PUSH
5064: LD_INT 31
5066: PUSH
5067: LD_INT 37
5069: PUSH
5070: LD_INT 38
5072: PUSH
5073: LD_INT 32
5075: PUSH
5076: LD_INT 27
5078: PUSH
5079: LD_INT 33
5081: PUSH
5082: LD_INT 69
5084: PUSH
5085: LD_INT 39
5087: PUSH
5088: LD_INT 34
5090: PUSH
5091: LD_INT 40
5093: PUSH
5094: LD_INT 71
5096: PUSH
5097: LD_INT 23
5099: PUSH
5100: LD_INT 44
5102: PUSH
5103: LD_INT 48
5105: PUSH
5106: LD_INT 49
5108: PUSH
5109: LD_INT 50
5111: PUSH
5112: LD_INT 51
5114: PUSH
5115: LD_INT 52
5117: PUSH
5118: LD_INT 53
5120: PUSH
5121: LD_INT 54
5123: PUSH
5124: LD_INT 55
5126: PUSH
5127: LD_INT 56
5129: PUSH
5130: LD_INT 57
5132: PUSH
5133: LD_INT 58
5135: PUSH
5136: LD_INT 59
5138: PUSH
5139: LD_INT 63
5141: PUSH
5142: LD_INT 64
5144: PUSH
5145: LD_INT 65
5147: PUSH
5148: LD_INT 82
5150: PUSH
5151: LD_INT 83
5153: PUSH
5154: LD_INT 84
5156: PUSH
5157: LD_INT 85
5159: PUSH
5160: LD_INT 86
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: ST_TO_ADDR
5218: GO 5221
5220: POP
// if state > - 1 and state < 3 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 1
5228: NEG
5229: GREATER
5230: PUSH
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 3
5238: LESS
5239: AND
5240: IFFALSE 5297
// for i in result do
5242: LD_ADDR_VAR 0 5
5246: PUSH
5247: LD_VAR 0 4
5251: PUSH
5252: FOR_IN
5253: IFFALSE 5295
// if GetTech ( i , side ) <> state then
5255: LD_VAR 0 5
5259: PPUSH
5260: LD_VAR 0 1
5264: PPUSH
5265: CALL_OW 321
5269: PUSH
5270: LD_VAR 0 3
5274: NONEQUAL
5275: IFFALSE 5293
// result := result diff i ;
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_VAR 0 5
5291: DIFF
5292: ST_TO_ADDR
5293: GO 5252
5295: POP
5296: POP
// end ;
5297: LD_VAR 0 4
5301: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5302: LD_INT 0
5304: PPUSH
5305: PPUSH
5306: PPUSH
// result := true ;
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_INT 1
5314: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5315: LD_ADDR_VAR 0 5
5319: PUSH
5320: LD_VAR 0 2
5324: PPUSH
5325: CALL_OW 480
5329: ST_TO_ADDR
// if not tmp then
5330: LD_VAR 0 5
5334: NOT
5335: IFFALSE 5339
// exit ;
5337: GO 5388
// for i in tmp do
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_VAR 0 5
5348: PUSH
5349: FOR_IN
5350: IFFALSE 5386
// if GetTech ( i , side ) <> state_researched then
5352: LD_VAR 0 4
5356: PPUSH
5357: LD_VAR 0 1
5361: PPUSH
5362: CALL_OW 321
5366: PUSH
5367: LD_INT 2
5369: NONEQUAL
5370: IFFALSE 5384
// begin result := false ;
5372: LD_ADDR_VAR 0 3
5376: PUSH
5377: LD_INT 0
5379: ST_TO_ADDR
// exit ;
5380: POP
5381: POP
5382: GO 5388
// end ;
5384: GO 5349
5386: POP
5387: POP
// end ;
5388: LD_VAR 0 3
5392: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5393: LD_INT 0
5395: PPUSH
5396: PPUSH
5397: PPUSH
5398: PPUSH
5399: PPUSH
5400: PPUSH
5401: PPUSH
5402: PPUSH
5403: PPUSH
5404: PPUSH
5405: PPUSH
5406: PPUSH
5407: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5408: LD_VAR 0 1
5412: NOT
5413: PUSH
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 257
5423: PUSH
5424: LD_INT 9
5426: NONEQUAL
5427: OR
5428: IFFALSE 5432
// exit ;
5430: GO 6005
// side := GetSide ( unit ) ;
5432: LD_ADDR_VAR 0 9
5436: PUSH
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 255
5446: ST_TO_ADDR
// tech_space := tech_spacanom ;
5447: LD_ADDR_VAR 0 12
5451: PUSH
5452: LD_INT 29
5454: ST_TO_ADDR
// tech_time := tech_taurad ;
5455: LD_ADDR_VAR 0 13
5459: PUSH
5460: LD_INT 28
5462: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5463: LD_ADDR_VAR 0 11
5467: PUSH
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 310
5477: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5478: LD_VAR 0 11
5482: PPUSH
5483: CALL_OW 247
5487: PUSH
5488: LD_INT 2
5490: EQUAL
5491: IFFALSE 5495
// exit ;
5493: GO 6005
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5495: LD_ADDR_VAR 0 8
5499: PUSH
5500: LD_INT 81
5502: PUSH
5503: LD_VAR 0 9
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 21
5517: PUSH
5518: LD_INT 3
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: ST_TO_ADDR
// if not tmp then
5538: LD_VAR 0 8
5542: NOT
5543: IFFALSE 5547
// exit ;
5545: GO 6005
// if in_unit then
5547: LD_VAR 0 11
5551: IFFALSE 5575
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5553: LD_ADDR_VAR 0 10
5557: PUSH
5558: LD_VAR 0 8
5562: PPUSH
5563: LD_VAR 0 11
5567: PPUSH
5568: CALL_OW 74
5572: ST_TO_ADDR
5573: GO 5595
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5575: LD_ADDR_VAR 0 10
5579: PUSH
5580: LD_VAR 0 8
5584: PPUSH
5585: LD_VAR 0 1
5589: PPUSH
5590: CALL_OW 74
5594: ST_TO_ADDR
// if not enemy then
5595: LD_VAR 0 10
5599: NOT
5600: IFFALSE 5604
// exit ;
5602: GO 6005
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5604: LD_VAR 0 11
5608: PUSH
5609: LD_VAR 0 11
5613: PPUSH
5614: LD_VAR 0 10
5618: PPUSH
5619: CALL_OW 296
5623: PUSH
5624: LD_INT 13
5626: GREATER
5627: AND
5628: PUSH
5629: LD_VAR 0 1
5633: PPUSH
5634: LD_VAR 0 10
5638: PPUSH
5639: CALL_OW 296
5643: PUSH
5644: LD_INT 12
5646: GREATER
5647: OR
5648: IFFALSE 5652
// exit ;
5650: GO 6005
// missile := [ 1 ] ;
5652: LD_ADDR_VAR 0 14
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5663: LD_VAR 0 9
5667: PPUSH
5668: LD_VAR 0 12
5672: PPUSH
5673: CALL_OW 325
5677: IFFALSE 5706
// missile := Insert ( missile , missile + 1 , 2 ) ;
5679: LD_ADDR_VAR 0 14
5683: PUSH
5684: LD_VAR 0 14
5688: PPUSH
5689: LD_VAR 0 14
5693: PUSH
5694: LD_INT 1
5696: PLUS
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: CALL_OW 2
5705: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5706: LD_VAR 0 9
5710: PPUSH
5711: LD_VAR 0 13
5715: PPUSH
5716: CALL_OW 325
5720: PUSH
5721: LD_VAR 0 10
5725: PPUSH
5726: CALL_OW 255
5730: PPUSH
5731: LD_VAR 0 13
5735: PPUSH
5736: CALL_OW 325
5740: NOT
5741: AND
5742: IFFALSE 5771
// missile := Insert ( missile , missile + 1 , 3 ) ;
5744: LD_ADDR_VAR 0 14
5748: PUSH
5749: LD_VAR 0 14
5753: PPUSH
5754: LD_VAR 0 14
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PPUSH
5763: LD_INT 3
5765: PPUSH
5766: CALL_OW 2
5770: ST_TO_ADDR
// if missile < 2 then
5771: LD_VAR 0 14
5775: PUSH
5776: LD_INT 2
5778: LESS
5779: IFFALSE 5783
// exit ;
5781: GO 6005
// x := GetX ( enemy ) ;
5783: LD_ADDR_VAR 0 4
5787: PUSH
5788: LD_VAR 0 10
5792: PPUSH
5793: CALL_OW 250
5797: ST_TO_ADDR
// y := GetY ( enemy ) ;
5798: LD_ADDR_VAR 0 5
5802: PUSH
5803: LD_VAR 0 10
5807: PPUSH
5808: CALL_OW 251
5812: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5813: LD_ADDR_VAR 0 6
5817: PUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 1
5825: NEG
5826: PPUSH
5827: LD_INT 1
5829: PPUSH
5830: CALL_OW 12
5834: PLUS
5835: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: LD_VAR 0 5
5845: PUSH
5846: LD_INT 1
5848: NEG
5849: PPUSH
5850: LD_INT 1
5852: PPUSH
5853: CALL_OW 12
5857: PLUS
5858: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5859: LD_VAR 0 6
5863: PPUSH
5864: LD_VAR 0 7
5868: PPUSH
5869: CALL_OW 488
5873: NOT
5874: IFFALSE 5896
// begin _x := x ;
5876: LD_ADDR_VAR 0 6
5880: PUSH
5881: LD_VAR 0 4
5885: ST_TO_ADDR
// _y := y ;
5886: LD_ADDR_VAR 0 7
5890: PUSH
5891: LD_VAR 0 5
5895: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5896: LD_ADDR_VAR 0 3
5900: PUSH
5901: LD_INT 1
5903: PPUSH
5904: LD_VAR 0 14
5908: PPUSH
5909: CALL_OW 12
5913: ST_TO_ADDR
// case i of 1 :
5914: LD_VAR 0 3
5918: PUSH
5919: LD_INT 1
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5944
5927: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5928: LD_VAR 0 1
5932: PPUSH
5933: LD_VAR 0 10
5937: PPUSH
5938: CALL_OW 115
5942: GO 6005
5944: LD_INT 2
5946: DOUBLE
5947: EQUAL
5948: IFTRUE 5952
5950: GO 5974
5952: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5953: LD_VAR 0 1
5957: PPUSH
5958: LD_VAR 0 6
5962: PPUSH
5963: LD_VAR 0 7
5967: PPUSH
5968: CALL_OW 153
5972: GO 6005
5974: LD_INT 3
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 5982
5980: GO 6004
5982: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_VAR 0 6
5992: PPUSH
5993: LD_VAR 0 7
5997: PPUSH
5998: CALL_OW 154
6002: GO 6005
6004: POP
// end ;
6005: LD_VAR 0 2
6009: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6010: LD_INT 0
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
6017: PPUSH
// if not unit or not building then
6018: LD_VAR 0 1
6022: NOT
6023: PUSH
6024: LD_VAR 0 2
6028: NOT
6029: OR
6030: IFFALSE 6034
// exit ;
6032: GO 6192
// x := GetX ( building ) ;
6034: LD_ADDR_VAR 0 5
6038: PUSH
6039: LD_VAR 0 2
6043: PPUSH
6044: CALL_OW 250
6048: ST_TO_ADDR
// y := GetY ( building ) ;
6049: LD_ADDR_VAR 0 6
6053: PUSH
6054: LD_VAR 0 2
6058: PPUSH
6059: CALL_OW 251
6063: ST_TO_ADDR
// for i = 0 to 5 do
6064: LD_ADDR_VAR 0 4
6068: PUSH
6069: DOUBLE
6070: LD_INT 0
6072: DEC
6073: ST_TO_ADDR
6074: LD_INT 5
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6190
// begin _x := ShiftX ( x , i , 3 ) ;
6080: LD_ADDR_VAR 0 7
6084: PUSH
6085: LD_VAR 0 5
6089: PPUSH
6090: LD_VAR 0 4
6094: PPUSH
6095: LD_INT 3
6097: PPUSH
6098: CALL_OW 272
6102: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6103: LD_ADDR_VAR 0 8
6107: PUSH
6108: LD_VAR 0 6
6112: PPUSH
6113: LD_VAR 0 4
6117: PPUSH
6118: LD_INT 3
6120: PPUSH
6121: CALL_OW 273
6125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6126: LD_VAR 0 7
6130: PPUSH
6131: LD_VAR 0 8
6135: PPUSH
6136: CALL_OW 488
6140: NOT
6141: IFFALSE 6145
// continue ;
6143: GO 6077
// if HexInfo ( _x , _y ) = 0 then
6145: LD_VAR 0 7
6149: PPUSH
6150: LD_VAR 0 8
6154: PPUSH
6155: CALL_OW 428
6159: PUSH
6160: LD_INT 0
6162: EQUAL
6163: IFFALSE 6188
// begin ComMoveXY ( unit , _x , _y ) ;
6165: LD_VAR 0 1
6169: PPUSH
6170: LD_VAR 0 7
6174: PPUSH
6175: LD_VAR 0 8
6179: PPUSH
6180: CALL_OW 111
// exit ;
6184: POP
6185: POP
6186: GO 6192
// end ; end ;
6188: GO 6077
6190: POP
6191: POP
// end ;
6192: LD_VAR 0 3
6196: RET
// export function ScanBase ( side , base_area ) ; begin
6197: LD_INT 0
6199: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6200: LD_ADDR_VAR 0 3
6204: PUSH
6205: LD_VAR 0 2
6209: PPUSH
6210: LD_INT 81
6212: PUSH
6213: LD_VAR 0 1
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 70
6226: ST_TO_ADDR
// end ;
6227: LD_VAR 0 3
6231: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6232: LD_INT 0
6234: PPUSH
6235: PPUSH
6236: PPUSH
6237: PPUSH
// result := false ;
6238: LD_ADDR_VAR 0 2
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// side := GetSide ( unit ) ;
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_VAR 0 1
6255: PPUSH
6256: CALL_OW 255
6260: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6261: LD_ADDR_VAR 0 4
6265: PUSH
6266: LD_VAR 0 1
6270: PPUSH
6271: CALL_OW 248
6275: ST_TO_ADDR
// case nat of 1 :
6276: LD_VAR 0 4
6280: PUSH
6281: LD_INT 1
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6300
6289: POP
// tech := tech_lassight ; 2 :
6290: LD_ADDR_VAR 0 5
6294: PUSH
6295: LD_INT 12
6297: ST_TO_ADDR
6298: GO 6339
6300: LD_INT 2
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6319
6308: POP
// tech := tech_mortar ; 3 :
6309: LD_ADDR_VAR 0 5
6313: PUSH
6314: LD_INT 41
6316: ST_TO_ADDR
6317: GO 6339
6319: LD_INT 3
6321: DOUBLE
6322: EQUAL
6323: IFTRUE 6327
6325: GO 6338
6327: POP
// tech := tech_bazooka ; end ;
6328: LD_ADDR_VAR 0 5
6332: PUSH
6333: LD_INT 44
6335: ST_TO_ADDR
6336: GO 6339
6338: POP
// if Researched ( side , tech ) then
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_VAR 0 5
6348: PPUSH
6349: CALL_OW 325
6353: IFFALSE 6380
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6355: LD_ADDR_VAR 0 2
6359: PUSH
6360: LD_INT 5
6362: PUSH
6363: LD_INT 8
6365: PUSH
6366: LD_INT 9
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_VAR 0 4
6378: ARRAY
6379: ST_TO_ADDR
// end ;
6380: LD_VAR 0 2
6384: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6385: LD_INT 0
6387: PPUSH
6388: PPUSH
6389: PPUSH
// if not mines then
6390: LD_VAR 0 2
6394: NOT
6395: IFFALSE 6399
// exit ;
6397: GO 6543
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6399: LD_ADDR_VAR 0 5
6403: PUSH
6404: LD_INT 81
6406: PUSH
6407: LD_VAR 0 1
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 21
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PPUSH
6437: CALL_OW 69
6441: ST_TO_ADDR
// for i in mines do
6442: LD_ADDR_VAR 0 4
6446: PUSH
6447: LD_VAR 0 2
6451: PUSH
6452: FOR_IN
6453: IFFALSE 6541
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6455: LD_VAR 0 4
6459: PUSH
6460: LD_INT 1
6462: ARRAY
6463: PPUSH
6464: LD_VAR 0 4
6468: PUSH
6469: LD_INT 2
6471: ARRAY
6472: PPUSH
6473: CALL_OW 458
6477: NOT
6478: IFFALSE 6482
// continue ;
6480: GO 6452
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6482: LD_VAR 0 4
6486: PUSH
6487: LD_INT 1
6489: ARRAY
6490: PPUSH
6491: LD_VAR 0 4
6495: PUSH
6496: LD_INT 2
6498: ARRAY
6499: PPUSH
6500: CALL_OW 428
6504: PUSH
6505: LD_VAR 0 5
6509: IN
6510: IFFALSE 6539
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6512: LD_VAR 0 4
6516: PUSH
6517: LD_INT 1
6519: ARRAY
6520: PPUSH
6521: LD_VAR 0 4
6525: PUSH
6526: LD_INT 2
6528: ARRAY
6529: PPUSH
6530: LD_VAR 0 1
6534: PPUSH
6535: CALL_OW 456
// end ;
6539: GO 6452
6541: POP
6542: POP
// end ;
6543: LD_VAR 0 3
6547: RET
// export function Count ( array ) ; var i ; begin
6548: LD_INT 0
6550: PPUSH
6551: PPUSH
// result := 0 ;
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 0
6559: ST_TO_ADDR
// for i in array do
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: LD_VAR 0 1
6569: PUSH
6570: FOR_IN
6571: IFFALSE 6595
// if i then
6573: LD_VAR 0 3
6577: IFFALSE 6593
// result := result + 1 ;
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: LD_VAR 0 2
6588: PUSH
6589: LD_INT 1
6591: PLUS
6592: ST_TO_ADDR
6593: GO 6570
6595: POP
6596: POP
// end ;
6597: LD_VAR 0 2
6601: RET
// export function IsEmpty ( building ) ; begin
6602: LD_INT 0
6604: PPUSH
// if not building then
6605: LD_VAR 0 1
6609: NOT
6610: IFFALSE 6614
// exit ;
6612: GO 6657
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_VAR 0 1
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 255
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 58
6643: PUSH
6644: EMPTY
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PPUSH
6651: CALL_OW 69
6655: IN
6656: ST_TO_ADDR
// end ;
6657: LD_VAR 0 2
6661: RET
// export function IsNotFull ( building ) ; begin
6662: LD_INT 0
6664: PPUSH
// if not building then
6665: LD_VAR 0 1
6669: NOT
6670: IFFALSE 6674
// exit ;
6672: GO 6693
// result := UnitsInside ( building ) < 6 ;
6674: LD_ADDR_VAR 0 2
6678: PUSH
6679: LD_VAR 0 1
6683: PPUSH
6684: CALL_OW 313
6688: PUSH
6689: LD_INT 6
6691: LESS
6692: ST_TO_ADDR
// end ;
6693: LD_VAR 0 2
6697: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
6702: PPUSH
6703: PPUSH
// tmp := [ ] ;
6704: LD_ADDR_VAR 0 3
6708: PUSH
6709: EMPTY
6710: ST_TO_ADDR
// list := [ ] ;
6711: LD_ADDR_VAR 0 5
6715: PUSH
6716: EMPTY
6717: ST_TO_ADDR
// for i = 16 to 25 do
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: DOUBLE
6724: LD_INT 16
6726: DEC
6727: ST_TO_ADDR
6728: LD_INT 25
6730: PUSH
6731: FOR_TO
6732: IFFALSE 6805
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6734: LD_ADDR_VAR 0 3
6738: PUSH
6739: LD_VAR 0 3
6743: PUSH
6744: LD_INT 22
6746: PUSH
6747: LD_VAR 0 1
6751: PPUSH
6752: CALL_OW 255
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 91
6763: PUSH
6764: LD_VAR 0 1
6768: PUSH
6769: LD_INT 6
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_VAR 0 4
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ADD
6802: ST_TO_ADDR
6803: GO 6731
6805: POP
6806: POP
// for i = 1 to tmp do
6807: LD_ADDR_VAR 0 4
6811: PUSH
6812: DOUBLE
6813: LD_INT 1
6815: DEC
6816: ST_TO_ADDR
6817: LD_VAR 0 3
6821: PUSH
6822: FOR_TO
6823: IFFALSE 6911
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: LD_VAR 0 5
6834: PUSH
6835: LD_VAR 0 3
6839: PUSH
6840: LD_VAR 0 4
6844: ARRAY
6845: PPUSH
6846: CALL_OW 266
6850: PUSH
6851: LD_VAR 0 3
6855: PUSH
6856: LD_VAR 0 4
6860: ARRAY
6861: PPUSH
6862: CALL_OW 250
6866: PUSH
6867: LD_VAR 0 3
6871: PUSH
6872: LD_VAR 0 4
6876: ARRAY
6877: PPUSH
6878: CALL_OW 251
6882: PUSH
6883: LD_VAR 0 3
6887: PUSH
6888: LD_VAR 0 4
6892: ARRAY
6893: PPUSH
6894: CALL_OW 254
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: ADD
6908: ST_TO_ADDR
6909: GO 6822
6911: POP
6912: POP
// result := list ;
6913: LD_ADDR_VAR 0 2
6917: PUSH
6918: LD_VAR 0 5
6922: ST_TO_ADDR
// end ;
6923: LD_VAR 0 2
6927: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
6933: PPUSH
6934: PPUSH
6935: PPUSH
6936: PPUSH
// if not factory then
6937: LD_VAR 0 1
6941: NOT
6942: IFFALSE 6946
// exit ;
6944: GO 7539
// if control = control_apeman then
6946: LD_VAR 0 4
6950: PUSH
6951: LD_INT 5
6953: EQUAL
6954: IFFALSE 7063
// begin tmp := UnitsInside ( factory ) ;
6956: LD_ADDR_VAR 0 8
6960: PUSH
6961: LD_VAR 0 1
6965: PPUSH
6966: CALL_OW 313
6970: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6971: LD_VAR 0 8
6975: PPUSH
6976: LD_INT 25
6978: PUSH
6979: LD_INT 12
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: NOT
6991: IFFALSE 7001
// control := control_manual ;
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_INT 1
7000: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7001: LD_ADDR_VAR 0 8
7005: PUSH
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL 6698 0 1
7015: ST_TO_ADDR
// if tmp then
7016: LD_VAR 0 8
7020: IFFALSE 7063
// begin for i in tmp do
7022: LD_ADDR_VAR 0 7
7026: PUSH
7027: LD_VAR 0 8
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7061
// if i [ 1 ] = b_ext_radio then
7035: LD_VAR 0 7
7039: PUSH
7040: LD_INT 1
7042: ARRAY
7043: PUSH
7044: LD_INT 22
7046: EQUAL
7047: IFFALSE 7059
// begin control := control_remote ;
7049: LD_ADDR_VAR 0 4
7053: PUSH
7054: LD_INT 2
7056: ST_TO_ADDR
// break ;
7057: GO 7061
// end ;
7059: GO 7032
7061: POP
7062: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7063: LD_VAR 0 1
7067: PPUSH
7068: LD_VAR 0 2
7072: PPUSH
7073: LD_VAR 0 3
7077: PPUSH
7078: LD_VAR 0 4
7082: PPUSH
7083: LD_VAR 0 5
7087: PPUSH
7088: CALL_OW 448
7092: IFFALSE 7127
// begin result := [ chassis , engine , control , weapon ] ;
7094: LD_ADDR_VAR 0 6
7098: PUSH
7099: LD_VAR 0 2
7103: PUSH
7104: LD_VAR 0 3
7108: PUSH
7109: LD_VAR 0 4
7113: PUSH
7114: LD_VAR 0 5
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: ST_TO_ADDR
// exit ;
7125: GO 7539
// end ; _chassis := AvailableChassisList ( factory ) ;
7127: LD_ADDR_VAR 0 9
7131: PUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 475
7141: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7142: LD_ADDR_VAR 0 11
7146: PUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 476
7156: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7157: LD_ADDR_VAR 0 12
7161: PUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 477
7171: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7172: LD_ADDR_VAR 0 10
7176: PUSH
7177: LD_VAR 0 1
7181: PPUSH
7182: CALL_OW 478
7186: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7187: LD_VAR 0 9
7191: NOT
7192: PUSH
7193: LD_VAR 0 11
7197: NOT
7198: OR
7199: PUSH
7200: LD_VAR 0 12
7204: NOT
7205: OR
7206: PUSH
7207: LD_VAR 0 10
7211: NOT
7212: OR
7213: IFFALSE 7248
// begin result := [ chassis , engine , control , weapon ] ;
7215: LD_ADDR_VAR 0 6
7219: PUSH
7220: LD_VAR 0 2
7224: PUSH
7225: LD_VAR 0 3
7229: PUSH
7230: LD_VAR 0 4
7234: PUSH
7235: LD_VAR 0 5
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
// exit ;
7246: GO 7539
// end ; if not chassis in _chassis then
7248: LD_VAR 0 2
7252: PUSH
7253: LD_VAR 0 9
7257: IN
7258: NOT
7259: IFFALSE 7285
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7261: LD_ADDR_VAR 0 2
7265: PUSH
7266: LD_VAR 0 9
7270: PUSH
7271: LD_INT 1
7273: PPUSH
7274: LD_VAR 0 9
7278: PPUSH
7279: CALL_OW 12
7283: ARRAY
7284: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7285: LD_VAR 0 2
7289: PPUSH
7290: LD_VAR 0 3
7294: PPUSH
7295: CALL 7544 0 2
7299: NOT
7300: IFFALSE 7359
// repeat engine := _engine [ 1 ] ;
7302: LD_ADDR_VAR 0 3
7306: PUSH
7307: LD_VAR 0 11
7311: PUSH
7312: LD_INT 1
7314: ARRAY
7315: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7316: LD_ADDR_VAR 0 11
7320: PUSH
7321: LD_VAR 0 11
7325: PPUSH
7326: LD_INT 1
7328: PPUSH
7329: CALL_OW 3
7333: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7334: LD_VAR 0 2
7338: PPUSH
7339: LD_VAR 0 3
7343: PPUSH
7344: CALL 7544 0 2
7348: PUSH
7349: LD_VAR 0 11
7353: PUSH
7354: EMPTY
7355: EQUAL
7356: OR
7357: IFFALSE 7302
// if not control in _control then
7359: LD_VAR 0 4
7363: PUSH
7364: LD_VAR 0 12
7368: IN
7369: NOT
7370: IFFALSE 7396
// control := _control [ rand ( 1 , _control ) ] ;
7372: LD_ADDR_VAR 0 4
7376: PUSH
7377: LD_VAR 0 12
7381: PUSH
7382: LD_INT 1
7384: PPUSH
7385: LD_VAR 0 12
7389: PPUSH
7390: CALL_OW 12
7394: ARRAY
7395: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7396: LD_VAR 0 2
7400: PPUSH
7401: LD_VAR 0 5
7405: PPUSH
7406: CALL 7764 0 2
7410: NOT
7411: IFFALSE 7470
// repeat weapon := _weapon [ 1 ] ;
7413: LD_ADDR_VAR 0 5
7417: PUSH
7418: LD_VAR 0 10
7422: PUSH
7423: LD_INT 1
7425: ARRAY
7426: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7427: LD_ADDR_VAR 0 10
7431: PUSH
7432: LD_VAR 0 10
7436: PPUSH
7437: LD_INT 1
7439: PPUSH
7440: CALL_OW 3
7444: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7445: LD_VAR 0 2
7449: PPUSH
7450: LD_VAR 0 5
7454: PPUSH
7455: CALL 7764 0 2
7459: PUSH
7460: LD_VAR 0 10
7464: PUSH
7465: EMPTY
7466: EQUAL
7467: OR
7468: IFFALSE 7413
// result := [ ] ;
7470: LD_ADDR_VAR 0 6
7474: PUSH
7475: EMPTY
7476: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7477: LD_VAR 0 1
7481: PPUSH
7482: LD_VAR 0 2
7486: PPUSH
7487: LD_VAR 0 3
7491: PPUSH
7492: LD_VAR 0 4
7496: PPUSH
7497: LD_VAR 0 5
7501: PPUSH
7502: CALL_OW 448
7506: IFFALSE 7539
// result := [ chassis , engine , control , weapon ] ;
7508: LD_ADDR_VAR 0 6
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_VAR 0 3
7522: PUSH
7523: LD_VAR 0 4
7527: PUSH
7528: LD_VAR 0 5
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: ST_TO_ADDR
// end ;
7539: LD_VAR 0 6
7543: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7544: LD_INT 0
7546: PPUSH
// if not chassis or not engine then
7547: LD_VAR 0 1
7551: NOT
7552: PUSH
7553: LD_VAR 0 2
7557: NOT
7558: OR
7559: IFFALSE 7563
// exit ;
7561: GO 7759
// case engine of engine_solar :
7563: LD_VAR 0 2
7567: PUSH
7568: LD_INT 2
7570: DOUBLE
7571: EQUAL
7572: IFTRUE 7576
7574: GO 7614
7576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7577: LD_ADDR_VAR 0 3
7581: PUSH
7582: LD_INT 11
7584: PUSH
7585: LD_INT 12
7587: PUSH
7588: LD_INT 13
7590: PUSH
7591: LD_INT 14
7593: PUSH
7594: LD_INT 1
7596: PUSH
7597: LD_INT 2
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: ST_TO_ADDR
7612: GO 7743
7614: LD_INT 1
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7684
7622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 11
7630: PUSH
7631: LD_INT 12
7633: PUSH
7634: LD_INT 13
7636: PUSH
7637: LD_INT 14
7639: PUSH
7640: LD_INT 1
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: LD_INT 3
7648: PUSH
7649: LD_INT 4
7651: PUSH
7652: LD_INT 5
7654: PUSH
7655: LD_INT 21
7657: PUSH
7658: LD_INT 23
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_INT 24
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: ST_TO_ADDR
7682: GO 7743
7684: LD_INT 3
7686: DOUBLE
7687: EQUAL
7688: IFTRUE 7692
7690: GO 7742
7692: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7693: LD_ADDR_VAR 0 3
7697: PUSH
7698: LD_INT 13
7700: PUSH
7701: LD_INT 14
7703: PUSH
7704: LD_INT 2
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 4
7712: PUSH
7713: LD_INT 5
7715: PUSH
7716: LD_INT 21
7718: PUSH
7719: LD_INT 22
7721: PUSH
7722: LD_INT 23
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: ST_TO_ADDR
7740: GO 7743
7742: POP
// result := ( chassis in result ) ;
7743: LD_ADDR_VAR 0 3
7747: PUSH
7748: LD_VAR 0 1
7752: PUSH
7753: LD_VAR 0 3
7757: IN
7758: ST_TO_ADDR
// end ;
7759: LD_VAR 0 3
7763: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7764: LD_INT 0
7766: PPUSH
// if not chassis or not weapon then
7767: LD_VAR 0 1
7771: NOT
7772: PUSH
7773: LD_VAR 0 2
7777: NOT
7778: OR
7779: IFFALSE 7783
// exit ;
7781: GO 8809
// case weapon of us_machine_gun :
7783: LD_VAR 0 2
7787: PUSH
7788: LD_INT 2
7790: DOUBLE
7791: EQUAL
7792: IFTRUE 7796
7794: GO 7826
7796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 1
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_INT 4
7813: PUSH
7814: LD_INT 5
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: ST_TO_ADDR
7824: GO 8793
7826: LD_INT 3
7828: DOUBLE
7829: EQUAL
7830: IFTRUE 7834
7832: GO 7864
7834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7835: LD_ADDR_VAR 0 3
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: LD_INT 3
7848: PUSH
7849: LD_INT 4
7851: PUSH
7852: LD_INT 5
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: ST_TO_ADDR
7862: GO 8793
7864: LD_INT 11
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7902
7872: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7873: LD_ADDR_VAR 0 3
7877: PUSH
7878: LD_INT 1
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 3
7886: PUSH
7887: LD_INT 4
7889: PUSH
7890: LD_INT 5
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: ST_TO_ADDR
7900: GO 8793
7902: LD_INT 4
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 7936
7910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7911: LD_ADDR_VAR 0 3
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: ST_TO_ADDR
7934: GO 8793
7936: LD_INT 5
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 7970
7944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7945: LD_ADDR_VAR 0 3
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: LD_INT 4
7958: PUSH
7959: LD_INT 5
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
7968: GO 8793
7970: LD_INT 9
7972: DOUBLE
7973: EQUAL
7974: IFTRUE 7978
7976: GO 8004
7978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7979: LD_ADDR_VAR 0 3
7983: PUSH
7984: LD_INT 2
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: LD_INT 5
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
8002: GO 8793
8004: LD_INT 7
8006: DOUBLE
8007: EQUAL
8008: IFTRUE 8012
8010: GO 8038
8012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: LD_INT 3
8023: PUSH
8024: LD_INT 4
8026: PUSH
8027: LD_INT 5
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: ST_TO_ADDR
8036: GO 8793
8038: LD_INT 12
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8072
8046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8047: LD_ADDR_VAR 0 3
8051: PUSH
8052: LD_INT 2
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: LD_INT 4
8060: PUSH
8061: LD_INT 5
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: ST_TO_ADDR
8070: GO 8793
8072: LD_INT 13
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8106
8080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_INT 2
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: LD_INT 4
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: ST_TO_ADDR
8104: GO 8793
8106: LD_INT 14
8108: DOUBLE
8109: EQUAL
8110: IFTRUE 8114
8112: GO 8132
8114: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8115: LD_ADDR_VAR 0 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: LD_INT 5
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: ST_TO_ADDR
8130: GO 8793
8132: LD_INT 6
8134: DOUBLE
8135: EQUAL
8136: IFTRUE 8140
8138: GO 8158
8140: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8141: LD_ADDR_VAR 0 3
8145: PUSH
8146: LD_INT 4
8148: PUSH
8149: LD_INT 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
8156: GO 8793
8158: LD_INT 10
8160: DOUBLE
8161: EQUAL
8162: IFTRUE 8166
8164: GO 8184
8166: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8167: LD_ADDR_VAR 0 3
8171: PUSH
8172: LD_INT 4
8174: PUSH
8175: LD_INT 5
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: ST_TO_ADDR
8182: GO 8793
8184: LD_INT 22
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8218
8192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_INT 11
8200: PUSH
8201: LD_INT 12
8203: PUSH
8204: LD_INT 13
8206: PUSH
8207: LD_INT 14
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: ST_TO_ADDR
8216: GO 8793
8218: LD_INT 23
8220: DOUBLE
8221: EQUAL
8222: IFTRUE 8226
8224: GO 8252
8226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8227: LD_ADDR_VAR 0 3
8231: PUSH
8232: LD_INT 11
8234: PUSH
8235: LD_INT 12
8237: PUSH
8238: LD_INT 13
8240: PUSH
8241: LD_INT 14
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
8250: GO 8793
8252: LD_INT 24
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8286
8260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 11
8268: PUSH
8269: LD_INT 12
8271: PUSH
8272: LD_INT 13
8274: PUSH
8275: LD_INT 14
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: ST_TO_ADDR
8284: GO 8793
8286: LD_INT 30
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 8320
8294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 11
8302: PUSH
8303: LD_INT 12
8305: PUSH
8306: LD_INT 13
8308: PUSH
8309: LD_INT 14
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: ST_TO_ADDR
8318: GO 8793
8320: LD_INT 25
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8346
8328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8329: LD_ADDR_VAR 0 3
8333: PUSH
8334: LD_INT 13
8336: PUSH
8337: LD_INT 14
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: ST_TO_ADDR
8344: GO 8793
8346: LD_INT 27
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8372
8354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_INT 13
8362: PUSH
8363: LD_INT 14
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: ST_TO_ADDR
8370: GO 8793
8372: LD_INT 28
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8398
8380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8381: LD_ADDR_VAR 0 3
8385: PUSH
8386: LD_INT 13
8388: PUSH
8389: LD_INT 14
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: ST_TO_ADDR
8396: GO 8793
8398: LD_INT 29
8400: DOUBLE
8401: EQUAL
8402: IFTRUE 8406
8404: GO 8424
8406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8407: LD_ADDR_VAR 0 3
8411: PUSH
8412: LD_INT 13
8414: PUSH
8415: LD_INT 14
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: ST_TO_ADDR
8422: GO 8793
8424: LD_INT 31
8426: DOUBLE
8427: EQUAL
8428: IFTRUE 8432
8430: GO 8450
8432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8433: LD_ADDR_VAR 0 3
8437: PUSH
8438: LD_INT 13
8440: PUSH
8441: LD_INT 14
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: ST_TO_ADDR
8448: GO 8793
8450: LD_INT 26
8452: DOUBLE
8453: EQUAL
8454: IFTRUE 8458
8456: GO 8476
8458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8459: LD_ADDR_VAR 0 3
8463: PUSH
8464: LD_INT 13
8466: PUSH
8467: LD_INT 14
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: ST_TO_ADDR
8474: GO 8793
8476: LD_INT 42
8478: DOUBLE
8479: EQUAL
8480: IFTRUE 8484
8482: GO 8510
8484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8485: LD_ADDR_VAR 0 3
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 22
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 24
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: ST_TO_ADDR
8508: GO 8793
8510: LD_INT 43
8512: DOUBLE
8513: EQUAL
8514: IFTRUE 8518
8516: GO 8544
8518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8519: LD_ADDR_VAR 0 3
8523: PUSH
8524: LD_INT 21
8526: PUSH
8527: LD_INT 22
8529: PUSH
8530: LD_INT 23
8532: PUSH
8533: LD_INT 24
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: ST_TO_ADDR
8542: GO 8793
8544: LD_INT 44
8546: DOUBLE
8547: EQUAL
8548: IFTRUE 8552
8550: GO 8578
8552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8553: LD_ADDR_VAR 0 3
8557: PUSH
8558: LD_INT 21
8560: PUSH
8561: LD_INT 22
8563: PUSH
8564: LD_INT 23
8566: PUSH
8567: LD_INT 24
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: ST_TO_ADDR
8576: GO 8793
8578: LD_INT 45
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8612
8586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8587: LD_ADDR_VAR 0 3
8591: PUSH
8592: LD_INT 21
8594: PUSH
8595: LD_INT 22
8597: PUSH
8598: LD_INT 23
8600: PUSH
8601: LD_INT 24
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: ST_TO_ADDR
8610: GO 8793
8612: LD_INT 49
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8646
8620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8621: LD_ADDR_VAR 0 3
8625: PUSH
8626: LD_INT 21
8628: PUSH
8629: LD_INT 22
8631: PUSH
8632: LD_INT 23
8634: PUSH
8635: LD_INT 24
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
8644: GO 8793
8646: LD_INT 51
8648: DOUBLE
8649: EQUAL
8650: IFTRUE 8654
8652: GO 8680
8654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8655: LD_ADDR_VAR 0 3
8659: PUSH
8660: LD_INT 21
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_INT 23
8668: PUSH
8669: LD_INT 24
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: ST_TO_ADDR
8678: GO 8793
8680: LD_INT 52
8682: DOUBLE
8683: EQUAL
8684: IFTRUE 8688
8686: GO 8714
8688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8689: LD_ADDR_VAR 0 3
8693: PUSH
8694: LD_INT 21
8696: PUSH
8697: LD_INT 22
8699: PUSH
8700: LD_INT 23
8702: PUSH
8703: LD_INT 24
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: ST_TO_ADDR
8712: GO 8793
8714: LD_INT 53
8716: DOUBLE
8717: EQUAL
8718: IFTRUE 8722
8720: GO 8740
8722: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8723: LD_ADDR_VAR 0 3
8727: PUSH
8728: LD_INT 23
8730: PUSH
8731: LD_INT 24
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: ST_TO_ADDR
8738: GO 8793
8740: LD_INT 46
8742: DOUBLE
8743: EQUAL
8744: IFTRUE 8748
8746: GO 8766
8748: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8749: LD_ADDR_VAR 0 3
8753: PUSH
8754: LD_INT 23
8756: PUSH
8757: LD_INT 24
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: ST_TO_ADDR
8764: GO 8793
8766: LD_INT 47
8768: DOUBLE
8769: EQUAL
8770: IFTRUE 8774
8772: GO 8792
8774: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8775: LD_ADDR_VAR 0 3
8779: PUSH
8780: LD_INT 23
8782: PUSH
8783: LD_INT 24
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: ST_TO_ADDR
8790: GO 8793
8792: POP
// result := ( chassis in result ) ;
8793: LD_ADDR_VAR 0 3
8797: PUSH
8798: LD_VAR 0 1
8802: PUSH
8803: LD_VAR 0 3
8807: IN
8808: ST_TO_ADDR
// end ;
8809: LD_VAR 0 3
8813: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8814: LD_INT 0
8816: PPUSH
8817: PPUSH
8818: PPUSH
8819: PPUSH
8820: PPUSH
8821: PPUSH
8822: PPUSH
// result := array ;
8823: LD_ADDR_VAR 0 5
8827: PUSH
8828: LD_VAR 0 1
8832: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8833: LD_VAR 0 1
8837: NOT
8838: PUSH
8839: LD_VAR 0 2
8843: NOT
8844: OR
8845: PUSH
8846: LD_VAR 0 3
8850: NOT
8851: OR
8852: PUSH
8853: LD_VAR 0 2
8857: PUSH
8858: LD_VAR 0 1
8862: GREATER
8863: OR
8864: PUSH
8865: LD_VAR 0 3
8869: PUSH
8870: LD_VAR 0 1
8874: GREATER
8875: OR
8876: IFFALSE 8880
// exit ;
8878: GO 9176
// if direction then
8880: LD_VAR 0 4
8884: IFFALSE 8948
// begin d := 1 ;
8886: LD_ADDR_VAR 0 9
8890: PUSH
8891: LD_INT 1
8893: ST_TO_ADDR
// if i_from > i_to then
8894: LD_VAR 0 2
8898: PUSH
8899: LD_VAR 0 3
8903: GREATER
8904: IFFALSE 8930
// length := ( array - i_from ) + i_to else
8906: LD_ADDR_VAR 0 11
8910: PUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_VAR 0 2
8920: MINUS
8921: PUSH
8922: LD_VAR 0 3
8926: PLUS
8927: ST_TO_ADDR
8928: GO 8946
// length := i_to - i_from ;
8930: LD_ADDR_VAR 0 11
8934: PUSH
8935: LD_VAR 0 3
8939: PUSH
8940: LD_VAR 0 2
8944: MINUS
8945: ST_TO_ADDR
// end else
8946: GO 9009
// begin d := - 1 ;
8948: LD_ADDR_VAR 0 9
8952: PUSH
8953: LD_INT 1
8955: NEG
8956: ST_TO_ADDR
// if i_from > i_to then
8957: LD_VAR 0 2
8961: PUSH
8962: LD_VAR 0 3
8966: GREATER
8967: IFFALSE 8987
// length := i_from - i_to else
8969: LD_ADDR_VAR 0 11
8973: PUSH
8974: LD_VAR 0 2
8978: PUSH
8979: LD_VAR 0 3
8983: MINUS
8984: ST_TO_ADDR
8985: GO 9009
// length := ( array - i_to ) + i_from ;
8987: LD_ADDR_VAR 0 11
8991: PUSH
8992: LD_VAR 0 1
8996: PUSH
8997: LD_VAR 0 3
9001: MINUS
9002: PUSH
9003: LD_VAR 0 2
9007: PLUS
9008: ST_TO_ADDR
// end ; if not length then
9009: LD_VAR 0 11
9013: NOT
9014: IFFALSE 9018
// exit ;
9016: GO 9176
// tmp := array ;
9018: LD_ADDR_VAR 0 10
9022: PUSH
9023: LD_VAR 0 1
9027: ST_TO_ADDR
// for i = 1 to length do
9028: LD_ADDR_VAR 0 6
9032: PUSH
9033: DOUBLE
9034: LD_INT 1
9036: DEC
9037: ST_TO_ADDR
9038: LD_VAR 0 11
9042: PUSH
9043: FOR_TO
9044: IFFALSE 9164
// begin for j = 1 to array do
9046: LD_ADDR_VAR 0 7
9050: PUSH
9051: DOUBLE
9052: LD_INT 1
9054: DEC
9055: ST_TO_ADDR
9056: LD_VAR 0 1
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9150
// begin k := j + d ;
9064: LD_ADDR_VAR 0 8
9068: PUSH
9069: LD_VAR 0 7
9073: PUSH
9074: LD_VAR 0 9
9078: PLUS
9079: ST_TO_ADDR
// if k > array then
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 1
9089: GREATER
9090: IFFALSE 9100
// k := 1 ;
9092: LD_ADDR_VAR 0 8
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// if not k then
9100: LD_VAR 0 8
9104: NOT
9105: IFFALSE 9117
// k := array ;
9107: LD_ADDR_VAR 0 8
9111: PUSH
9112: LD_VAR 0 1
9116: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9117: LD_ADDR_VAR 0 10
9121: PUSH
9122: LD_VAR 0 10
9126: PPUSH
9127: LD_VAR 0 8
9131: PPUSH
9132: LD_VAR 0 1
9136: PUSH
9137: LD_VAR 0 7
9141: ARRAY
9142: PPUSH
9143: CALL_OW 1
9147: ST_TO_ADDR
// end ;
9148: GO 9061
9150: POP
9151: POP
// array := tmp ;
9152: LD_ADDR_VAR 0 1
9156: PUSH
9157: LD_VAR 0 10
9161: ST_TO_ADDR
// end ;
9162: GO 9043
9164: POP
9165: POP
// result := array ;
9166: LD_ADDR_VAR 0 5
9170: PUSH
9171: LD_VAR 0 1
9175: ST_TO_ADDR
// end ;
9176: LD_VAR 0 5
9180: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9181: LD_INT 0
9183: PPUSH
9184: PPUSH
// result := 0 ;
9185: LD_ADDR_VAR 0 3
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// if not array or not value in array then
9193: LD_VAR 0 1
9197: NOT
9198: PUSH
9199: LD_VAR 0 2
9203: PUSH
9204: LD_VAR 0 1
9208: IN
9209: NOT
9210: OR
9211: IFFALSE 9215
// exit ;
9213: GO 9269
// for i = 1 to array do
9215: LD_ADDR_VAR 0 4
9219: PUSH
9220: DOUBLE
9221: LD_INT 1
9223: DEC
9224: ST_TO_ADDR
9225: LD_VAR 0 1
9229: PUSH
9230: FOR_TO
9231: IFFALSE 9267
// if value = array [ i ] then
9233: LD_VAR 0 2
9237: PUSH
9238: LD_VAR 0 1
9242: PUSH
9243: LD_VAR 0 4
9247: ARRAY
9248: EQUAL
9249: IFFALSE 9265
// begin result := i ;
9251: LD_ADDR_VAR 0 3
9255: PUSH
9256: LD_VAR 0 4
9260: ST_TO_ADDR
// exit ;
9261: POP
9262: POP
9263: GO 9269
// end ;
9265: GO 9230
9267: POP
9268: POP
// end ;
9269: LD_VAR 0 3
9273: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9274: LD_INT 0
9276: PPUSH
// vc_chassis := chassis ;
9277: LD_ADDR_OWVAR 37
9281: PUSH
9282: LD_VAR 0 1
9286: ST_TO_ADDR
// vc_engine := engine ;
9287: LD_ADDR_OWVAR 39
9291: PUSH
9292: LD_VAR 0 2
9296: ST_TO_ADDR
// vc_control := control ;
9297: LD_ADDR_OWVAR 38
9301: PUSH
9302: LD_VAR 0 3
9306: ST_TO_ADDR
// vc_weapon := weapon ;
9307: LD_ADDR_OWVAR 40
9311: PUSH
9312: LD_VAR 0 4
9316: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9317: LD_ADDR_OWVAR 41
9321: PUSH
9322: LD_VAR 0 5
9326: ST_TO_ADDR
// end ;
9327: LD_VAR 0 6
9331: RET
// export function WantPlant ( unit ) ; var task ; begin
9332: LD_INT 0
9334: PPUSH
9335: PPUSH
// result := false ;
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9344: LD_ADDR_VAR 0 3
9348: PUSH
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 437
9358: ST_TO_ADDR
// if task then
9359: LD_VAR 0 3
9363: IFFALSE 9391
// if task [ 1 ] [ 1 ] = p then
9365: LD_VAR 0 3
9369: PUSH
9370: LD_INT 1
9372: ARRAY
9373: PUSH
9374: LD_INT 1
9376: ARRAY
9377: PUSH
9378: LD_STRING p
9380: EQUAL
9381: IFFALSE 9391
// result := true ;
9383: LD_ADDR_VAR 0 2
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// end ;
9391: LD_VAR 0 2
9395: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9396: LD_INT 0
9398: PPUSH
9399: PPUSH
9400: PPUSH
9401: PPUSH
// if pos < 1 then
9402: LD_VAR 0 2
9406: PUSH
9407: LD_INT 1
9409: LESS
9410: IFFALSE 9414
// exit ;
9412: GO 9717
// if pos = 1 then
9414: LD_VAR 0 2
9418: PUSH
9419: LD_INT 1
9421: EQUAL
9422: IFFALSE 9455
// result := Replace ( arr , pos [ 1 ] , value ) else
9424: LD_ADDR_VAR 0 4
9428: PUSH
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: PPUSH
9443: LD_VAR 0 3
9447: PPUSH
9448: CALL_OW 1
9452: ST_TO_ADDR
9453: GO 9717
// begin tmp := arr ;
9455: LD_ADDR_VAR 0 6
9459: PUSH
9460: LD_VAR 0 1
9464: ST_TO_ADDR
// s_arr := [ tmp ] ;
9465: LD_ADDR_VAR 0 7
9469: PUSH
9470: LD_VAR 0 6
9474: PUSH
9475: EMPTY
9476: LIST
9477: ST_TO_ADDR
// for i = 1 to pos - 1 do
9478: LD_ADDR_VAR 0 5
9482: PUSH
9483: DOUBLE
9484: LD_INT 1
9486: DEC
9487: ST_TO_ADDR
9488: LD_VAR 0 2
9492: PUSH
9493: LD_INT 1
9495: MINUS
9496: PUSH
9497: FOR_TO
9498: IFFALSE 9543
// begin tmp := tmp [ pos [ i ] ] ;
9500: LD_ADDR_VAR 0 6
9504: PUSH
9505: LD_VAR 0 6
9509: PUSH
9510: LD_VAR 0 2
9514: PUSH
9515: LD_VAR 0 5
9519: ARRAY
9520: ARRAY
9521: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9522: LD_ADDR_VAR 0 7
9526: PUSH
9527: LD_VAR 0 7
9531: PUSH
9532: LD_VAR 0 6
9536: PUSH
9537: EMPTY
9538: LIST
9539: ADD
9540: ST_TO_ADDR
// end ;
9541: GO 9497
9543: POP
9544: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9545: LD_ADDR_VAR 0 6
9549: PUSH
9550: LD_VAR 0 6
9554: PPUSH
9555: LD_VAR 0 2
9559: PUSH
9560: LD_VAR 0 2
9564: ARRAY
9565: PPUSH
9566: LD_VAR 0 3
9570: PPUSH
9571: CALL_OW 1
9575: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9576: LD_ADDR_VAR 0 7
9580: PUSH
9581: LD_VAR 0 7
9585: PPUSH
9586: LD_VAR 0 7
9590: PPUSH
9591: LD_VAR 0 6
9595: PPUSH
9596: CALL_OW 1
9600: ST_TO_ADDR
// for i = s_arr downto 2 do
9601: LD_ADDR_VAR 0 5
9605: PUSH
9606: DOUBLE
9607: LD_VAR 0 7
9611: INC
9612: ST_TO_ADDR
9613: LD_INT 2
9615: PUSH
9616: FOR_DOWNTO
9617: IFFALSE 9701
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9619: LD_ADDR_VAR 0 6
9623: PUSH
9624: LD_VAR 0 7
9628: PUSH
9629: LD_VAR 0 5
9633: PUSH
9634: LD_INT 1
9636: MINUS
9637: ARRAY
9638: PPUSH
9639: LD_VAR 0 2
9643: PUSH
9644: LD_VAR 0 5
9648: PUSH
9649: LD_INT 1
9651: MINUS
9652: ARRAY
9653: PPUSH
9654: LD_VAR 0 7
9658: PUSH
9659: LD_VAR 0 5
9663: ARRAY
9664: PPUSH
9665: CALL_OW 1
9669: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9670: LD_ADDR_VAR 0 7
9674: PUSH
9675: LD_VAR 0 7
9679: PPUSH
9680: LD_VAR 0 5
9684: PUSH
9685: LD_INT 1
9687: MINUS
9688: PPUSH
9689: LD_VAR 0 6
9693: PPUSH
9694: CALL_OW 1
9698: ST_TO_ADDR
// end ;
9699: GO 9616
9701: POP
9702: POP
// result := s_arr [ 1 ] ;
9703: LD_ADDR_VAR 0 4
9707: PUSH
9708: LD_VAR 0 7
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: ST_TO_ADDR
// end ; end ;
9717: LD_VAR 0 4
9721: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9722: LD_INT 0
9724: PPUSH
9725: PPUSH
// if not list then
9726: LD_VAR 0 1
9730: NOT
9731: IFFALSE 9735
// exit ;
9733: GO 9826
// i := list [ pos1 ] ;
9735: LD_ADDR_VAR 0 5
9739: PUSH
9740: LD_VAR 0 1
9744: PUSH
9745: LD_VAR 0 2
9749: ARRAY
9750: ST_TO_ADDR
// if not i then
9751: LD_VAR 0 5
9755: NOT
9756: IFFALSE 9760
// exit ;
9758: GO 9826
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9760: LD_ADDR_VAR 0 1
9764: PUSH
9765: LD_VAR 0 1
9769: PPUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: LD_VAR 0 1
9779: PUSH
9780: LD_VAR 0 3
9784: ARRAY
9785: PPUSH
9786: CALL_OW 1
9790: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9791: LD_ADDR_VAR 0 1
9795: PUSH
9796: LD_VAR 0 1
9800: PPUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_VAR 0 5
9810: PPUSH
9811: CALL_OW 1
9815: ST_TO_ADDR
// result := list ;
9816: LD_ADDR_VAR 0 4
9820: PUSH
9821: LD_VAR 0 1
9825: ST_TO_ADDR
// end ;
9826: LD_VAR 0 4
9830: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9831: LD_INT 0
9833: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9834: LD_ADDR_VAR 0 5
9838: PUSH
9839: LD_VAR 0 1
9843: PPUSH
9844: CALL_OW 250
9848: PPUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 251
9858: PPUSH
9859: LD_VAR 0 2
9863: PPUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_VAR 0 4
9873: PPUSH
9874: CALL 9884 0 5
9878: ST_TO_ADDR
// end ;
9879: LD_VAR 0 5
9883: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9884: LD_INT 0
9886: PPUSH
9887: PPUSH
9888: PPUSH
9889: PPUSH
// if not list then
9890: LD_VAR 0 3
9894: NOT
9895: IFFALSE 9899
// exit ;
9897: GO 10287
// result := [ ] ;
9899: LD_ADDR_VAR 0 6
9903: PUSH
9904: EMPTY
9905: ST_TO_ADDR
// for i in list do
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_VAR 0 3
9915: PUSH
9916: FOR_IN
9917: IFFALSE 10119
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9919: LD_ADDR_VAR 0 9
9923: PUSH
9924: LD_VAR 0 7
9928: PPUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: LD_VAR 0 2
9938: PPUSH
9939: CALL_OW 297
9943: ST_TO_ADDR
// if not result then
9944: LD_VAR 0 6
9948: NOT
9949: IFFALSE 9975
// result := [ [ i , tmp ] ] else
9951: LD_ADDR_VAR 0 6
9955: PUSH
9956: LD_VAR 0 7
9960: PUSH
9961: LD_VAR 0 9
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: ST_TO_ADDR
9973: GO 10117
// begin if result [ result ] [ 2 ] < tmp then
9975: LD_VAR 0 6
9979: PUSH
9980: LD_VAR 0 6
9984: ARRAY
9985: PUSH
9986: LD_INT 2
9988: ARRAY
9989: PUSH
9990: LD_VAR 0 9
9994: LESS
9995: IFFALSE 10037
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9997: LD_ADDR_VAR 0 6
10001: PUSH
10002: LD_VAR 0 6
10006: PPUSH
10007: LD_VAR 0 6
10011: PUSH
10012: LD_INT 1
10014: PLUS
10015: PPUSH
10016: LD_VAR 0 7
10020: PUSH
10021: LD_VAR 0 9
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PPUSH
10030: CALL_OW 2
10034: ST_TO_ADDR
10035: GO 10117
// for j = 1 to result do
10037: LD_ADDR_VAR 0 8
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_VAR 0 6
10051: PUSH
10052: FOR_TO
10053: IFFALSE 10115
// begin if tmp < result [ j ] [ 2 ] then
10055: LD_VAR 0 9
10059: PUSH
10060: LD_VAR 0 6
10064: PUSH
10065: LD_VAR 0 8
10069: ARRAY
10070: PUSH
10071: LD_INT 2
10073: ARRAY
10074: LESS
10075: IFFALSE 10113
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10077: LD_ADDR_VAR 0 6
10081: PUSH
10082: LD_VAR 0 6
10086: PPUSH
10087: LD_VAR 0 8
10091: PPUSH
10092: LD_VAR 0 7
10096: PUSH
10097: LD_VAR 0 9
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL_OW 2
10110: ST_TO_ADDR
// break ;
10111: GO 10115
// end ; end ;
10113: GO 10052
10115: POP
10116: POP
// end ; end ;
10117: GO 9916
10119: POP
10120: POP
// if result and not asc then
10121: LD_VAR 0 6
10125: PUSH
10126: LD_VAR 0 4
10130: NOT
10131: AND
10132: IFFALSE 10207
// begin tmp := result ;
10134: LD_ADDR_VAR 0 9
10138: PUSH
10139: LD_VAR 0 6
10143: ST_TO_ADDR
// for i = tmp downto 1 do
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: DOUBLE
10150: LD_VAR 0 9
10154: INC
10155: ST_TO_ADDR
10156: LD_INT 1
10158: PUSH
10159: FOR_DOWNTO
10160: IFFALSE 10205
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10162: LD_ADDR_VAR 0 6
10166: PUSH
10167: LD_VAR 0 6
10171: PPUSH
10172: LD_VAR 0 9
10176: PUSH
10177: LD_VAR 0 7
10181: MINUS
10182: PUSH
10183: LD_INT 1
10185: PLUS
10186: PPUSH
10187: LD_VAR 0 9
10191: PUSH
10192: LD_VAR 0 7
10196: ARRAY
10197: PPUSH
10198: CALL_OW 1
10202: ST_TO_ADDR
10203: GO 10159
10205: POP
10206: POP
// end ; tmp := [ ] ;
10207: LD_ADDR_VAR 0 9
10211: PUSH
10212: EMPTY
10213: ST_TO_ADDR
// if mode then
10214: LD_VAR 0 5
10218: IFFALSE 10287
// begin for i = 1 to result do
10220: LD_ADDR_VAR 0 7
10224: PUSH
10225: DOUBLE
10226: LD_INT 1
10228: DEC
10229: ST_TO_ADDR
10230: LD_VAR 0 6
10234: PUSH
10235: FOR_TO
10236: IFFALSE 10275
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10238: LD_ADDR_VAR 0 9
10242: PUSH
10243: LD_VAR 0 9
10247: PPUSH
10248: LD_VAR 0 7
10252: PPUSH
10253: LD_VAR 0 6
10257: PUSH
10258: LD_VAR 0 7
10262: ARRAY
10263: PUSH
10264: LD_INT 1
10266: ARRAY
10267: PPUSH
10268: CALL_OW 1
10272: ST_TO_ADDR
10273: GO 10235
10275: POP
10276: POP
// result := tmp ;
10277: LD_ADDR_VAR 0 6
10281: PUSH
10282: LD_VAR 0 9
10286: ST_TO_ADDR
// end ; end ;
10287: LD_VAR 0 6
10291: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10292: LD_INT 0
10294: PPUSH
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
10299: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10300: LD_ADDR_VAR 0 5
10304: PUSH
10305: LD_INT 0
10307: PUSH
10308: LD_INT 0
10310: PUSH
10311: LD_INT 0
10313: PUSH
10314: EMPTY
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: ST_TO_ADDR
// if not x or not y then
10322: LD_VAR 0 2
10326: NOT
10327: PUSH
10328: LD_VAR 0 3
10332: NOT
10333: OR
10334: IFFALSE 10338
// exit ;
10336: GO 11984
// if not range then
10338: LD_VAR 0 4
10342: NOT
10343: IFFALSE 10353
// range := 10 ;
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: LD_INT 10
10352: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10353: LD_ADDR_VAR 0 8
10357: PUSH
10358: LD_INT 81
10360: PUSH
10361: LD_VAR 0 1
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 92
10372: PUSH
10373: LD_VAR 0 2
10377: PUSH
10378: LD_VAR 0 3
10382: PUSH
10383: LD_VAR 0 4
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 3
10396: PUSH
10397: LD_INT 21
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: PPUSH
10416: CALL_OW 69
10420: ST_TO_ADDR
// if not tmp then
10421: LD_VAR 0 8
10425: NOT
10426: IFFALSE 10430
// exit ;
10428: GO 11984
// for i in tmp do
10430: LD_ADDR_VAR 0 6
10434: PUSH
10435: LD_VAR 0 8
10439: PUSH
10440: FOR_IN
10441: IFFALSE 11959
// begin points := [ 0 , 0 , 0 ] ;
10443: LD_ADDR_VAR 0 9
10447: PUSH
10448: LD_INT 0
10450: PUSH
10451: LD_INT 0
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: ST_TO_ADDR
// bpoints := 1 ;
10462: LD_ADDR_VAR 0 10
10466: PUSH
10467: LD_INT 1
10469: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10470: LD_VAR 0 6
10474: PPUSH
10475: CALL_OW 247
10479: PUSH
10480: LD_INT 1
10482: DOUBLE
10483: EQUAL
10484: IFTRUE 10488
10486: GO 11066
10488: POP
// begin if GetClass ( i ) = 1 then
10489: LD_VAR 0 6
10493: PPUSH
10494: CALL_OW 257
10498: PUSH
10499: LD_INT 1
10501: EQUAL
10502: IFFALSE 10523
// points := [ 10 , 5 , 3 ] ;
10504: LD_ADDR_VAR 0 9
10508: PUSH
10509: LD_INT 10
10511: PUSH
10512: LD_INT 5
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 257
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: LD_INT 3
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: IN
10547: IFFALSE 10568
// points := [ 3 , 2 , 1 ] ;
10549: LD_ADDR_VAR 0 9
10553: PUSH
10554: LD_INT 3
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10568: LD_VAR 0 6
10572: PPUSH
10573: CALL_OW 257
10577: PUSH
10578: LD_INT 5
10580: EQUAL
10581: IFFALSE 10602
// points := [ 130 , 5 , 2 ] ;
10583: LD_ADDR_VAR 0 9
10587: PUSH
10588: LD_INT 130
10590: PUSH
10591: LD_INT 5
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10602: LD_VAR 0 6
10606: PPUSH
10607: CALL_OW 257
10611: PUSH
10612: LD_INT 8
10614: EQUAL
10615: IFFALSE 10636
// points := [ 35 , 35 , 30 ] ;
10617: LD_ADDR_VAR 0 9
10621: PUSH
10622: LD_INT 35
10624: PUSH
10625: LD_INT 35
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10636: LD_VAR 0 6
10640: PPUSH
10641: CALL_OW 257
10645: PUSH
10646: LD_INT 9
10648: EQUAL
10649: IFFALSE 10670
// points := [ 20 , 55 , 40 ] ;
10651: LD_ADDR_VAR 0 9
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 55
10661: PUSH
10662: LD_INT 40
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10670: LD_VAR 0 6
10674: PPUSH
10675: CALL_OW 257
10679: PUSH
10680: LD_INT 12
10682: PUSH
10683: LD_INT 16
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: IN
10690: IFFALSE 10711
// points := [ 5 , 3 , 2 ] ;
10692: LD_ADDR_VAR 0 9
10696: PUSH
10697: LD_INT 5
10699: PUSH
10700: LD_INT 3
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10711: LD_VAR 0 6
10715: PPUSH
10716: CALL_OW 257
10720: PUSH
10721: LD_INT 17
10723: EQUAL
10724: IFFALSE 10745
// points := [ 100 , 50 , 75 ] ;
10726: LD_ADDR_VAR 0 9
10730: PUSH
10731: LD_INT 100
10733: PUSH
10734: LD_INT 50
10736: PUSH
10737: LD_INT 75
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10745: LD_VAR 0 6
10749: PPUSH
10750: CALL_OW 257
10754: PUSH
10755: LD_INT 15
10757: EQUAL
10758: IFFALSE 10779
// points := [ 10 , 5 , 3 ] ;
10760: LD_ADDR_VAR 0 9
10764: PUSH
10765: LD_INT 10
10767: PUSH
10768: LD_INT 5
10770: PUSH
10771: LD_INT 3
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10779: LD_VAR 0 6
10783: PPUSH
10784: CALL_OW 257
10788: PUSH
10789: LD_INT 14
10791: EQUAL
10792: IFFALSE 10813
// points := [ 10 , 0 , 0 ] ;
10794: LD_ADDR_VAR 0 9
10798: PUSH
10799: LD_INT 10
10801: PUSH
10802: LD_INT 0
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10813: LD_VAR 0 6
10817: PPUSH
10818: CALL_OW 257
10822: PUSH
10823: LD_INT 11
10825: EQUAL
10826: IFFALSE 10847
// points := [ 30 , 10 , 5 ] ;
10828: LD_ADDR_VAR 0 9
10832: PUSH
10833: LD_INT 30
10835: PUSH
10836: LD_INT 10
10838: PUSH
10839: LD_INT 5
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10847: LD_VAR 0 1
10851: PPUSH
10852: LD_INT 5
10854: PPUSH
10855: CALL_OW 321
10859: PUSH
10860: LD_INT 2
10862: EQUAL
10863: IFFALSE 10880
// bpoints := bpoints * 1.8 ;
10865: LD_ADDR_VAR 0 10
10869: PUSH
10870: LD_VAR 0 10
10874: PUSH
10875: LD_REAL  1.80000000000000E+0000
10878: MUL
10879: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10880: LD_VAR 0 6
10884: PPUSH
10885: CALL_OW 257
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: LD_INT 2
10895: PUSH
10896: LD_INT 3
10898: PUSH
10899: LD_INT 4
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: IN
10908: PUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: LD_INT 51
10916: PPUSH
10917: CALL_OW 321
10921: PUSH
10922: LD_INT 2
10924: EQUAL
10925: AND
10926: IFFALSE 10943
// bpoints := bpoints * 1.2 ;
10928: LD_ADDR_VAR 0 10
10932: PUSH
10933: LD_VAR 0 10
10937: PUSH
10938: LD_REAL  1.20000000000000E+0000
10941: MUL
10942: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10943: LD_VAR 0 6
10947: PPUSH
10948: CALL_OW 257
10952: PUSH
10953: LD_INT 5
10955: PUSH
10956: LD_INT 7
10958: PUSH
10959: LD_INT 9
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: IN
10967: PUSH
10968: LD_VAR 0 1
10972: PPUSH
10973: LD_INT 52
10975: PPUSH
10976: CALL_OW 321
10980: PUSH
10981: LD_INT 2
10983: EQUAL
10984: AND
10985: IFFALSE 11002
// bpoints := bpoints * 1.5 ;
10987: LD_ADDR_VAR 0 10
10991: PUSH
10992: LD_VAR 0 10
10996: PUSH
10997: LD_REAL  1.50000000000000E+0000
11000: MUL
11001: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_INT 66
11009: PPUSH
11010: CALL_OW 321
11014: PUSH
11015: LD_INT 2
11017: EQUAL
11018: IFFALSE 11035
// bpoints := bpoints * 1.1 ;
11020: LD_ADDR_VAR 0 10
11024: PUSH
11025: LD_VAR 0 10
11029: PUSH
11030: LD_REAL  1.10000000000000E+0000
11033: MUL
11034: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11035: LD_ADDR_VAR 0 10
11039: PUSH
11040: LD_VAR 0 10
11044: PUSH
11045: LD_VAR 0 6
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 259
11057: PUSH
11058: LD_REAL  1.15000000000000E+0000
11061: MUL
11062: MUL
11063: ST_TO_ADDR
// end ; unit_vehicle :
11064: GO 11888
11066: LD_INT 2
11068: DOUBLE
11069: EQUAL
11070: IFTRUE 11074
11072: GO 11876
11074: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11075: LD_VAR 0 6
11079: PPUSH
11080: CALL_OW 264
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 42
11090: PUSH
11091: LD_INT 24
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: IN
11099: IFFALSE 11120
// points := [ 25 , 5 , 3 ] ;
11101: LD_ADDR_VAR 0 9
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11120: LD_VAR 0 6
11124: PPUSH
11125: CALL_OW 264
11129: PUSH
11130: LD_INT 4
11132: PUSH
11133: LD_INT 43
11135: PUSH
11136: LD_INT 25
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: IN
11144: IFFALSE 11165
// points := [ 40 , 15 , 5 ] ;
11146: LD_ADDR_VAR 0 9
11150: PUSH
11151: LD_INT 40
11153: PUSH
11154: LD_INT 15
11156: PUSH
11157: LD_INT 5
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11165: LD_VAR 0 6
11169: PPUSH
11170: CALL_OW 264
11174: PUSH
11175: LD_INT 3
11177: PUSH
11178: LD_INT 23
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: IN
11185: IFFALSE 11206
// points := [ 7 , 25 , 8 ] ;
11187: LD_ADDR_VAR 0 9
11191: PUSH
11192: LD_INT 7
11194: PUSH
11195: LD_INT 25
11197: PUSH
11198: LD_INT 8
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11206: LD_VAR 0 6
11210: PPUSH
11211: CALL_OW 264
11215: PUSH
11216: LD_INT 5
11218: PUSH
11219: LD_INT 27
11221: PUSH
11222: LD_INT 44
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: IN
11230: IFFALSE 11251
// points := [ 14 , 50 , 16 ] ;
11232: LD_ADDR_VAR 0 9
11236: PUSH
11237: LD_INT 14
11239: PUSH
11240: LD_INT 50
11242: PUSH
11243: LD_INT 16
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11251: LD_VAR 0 6
11255: PPUSH
11256: CALL_OW 264
11260: PUSH
11261: LD_INT 6
11263: PUSH
11264: LD_INT 46
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: IN
11271: IFFALSE 11292
// points := [ 32 , 120 , 70 ] ;
11273: LD_ADDR_VAR 0 9
11277: PUSH
11278: LD_INT 32
11280: PUSH
11281: LD_INT 120
11283: PUSH
11284: LD_INT 70
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
11292: LD_VAR 0 6
11296: PPUSH
11297: CALL_OW 264
11301: PUSH
11302: LD_INT 7
11304: PUSH
11305: LD_INT 28
11307: PUSH
11308: LD_INT 45
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: IN
11316: IFFALSE 11337
// points := [ 35 , 20 , 45 ] ;
11318: LD_ADDR_VAR 0 9
11322: PUSH
11323: LD_INT 35
11325: PUSH
11326: LD_INT 20
11328: PUSH
11329: LD_INT 45
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11337: LD_VAR 0 6
11341: PPUSH
11342: CALL_OW 264
11346: PUSH
11347: LD_INT 47
11349: PUSH
11350: EMPTY
11351: LIST
11352: IN
11353: IFFALSE 11374
// points := [ 67 , 45 , 75 ] ;
11355: LD_ADDR_VAR 0 9
11359: PUSH
11360: LD_INT 67
11362: PUSH
11363: LD_INT 45
11365: PUSH
11366: LD_INT 75
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11374: LD_VAR 0 6
11378: PPUSH
11379: CALL_OW 264
11383: PUSH
11384: LD_INT 26
11386: PUSH
11387: EMPTY
11388: LIST
11389: IN
11390: IFFALSE 11411
// points := [ 120 , 30 , 80 ] ;
11392: LD_ADDR_VAR 0 9
11396: PUSH
11397: LD_INT 120
11399: PUSH
11400: LD_INT 30
11402: PUSH
11403: LD_INT 80
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11411: LD_VAR 0 6
11415: PPUSH
11416: CALL_OW 264
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: EMPTY
11425: LIST
11426: IN
11427: IFFALSE 11448
// points := [ 40 , 1 , 1 ] ;
11429: LD_ADDR_VAR 0 9
11433: PUSH
11434: LD_INT 40
11436: PUSH
11437: LD_INT 1
11439: PUSH
11440: LD_INT 1
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11448: LD_VAR 0 6
11452: PPUSH
11453: CALL_OW 264
11457: PUSH
11458: LD_INT 29
11460: PUSH
11461: EMPTY
11462: LIST
11463: IN
11464: IFFALSE 11485
// points := [ 70 , 200 , 400 ] ;
11466: LD_ADDR_VAR 0 9
11470: PUSH
11471: LD_INT 70
11473: PUSH
11474: LD_INT 200
11476: PUSH
11477: LD_INT 400
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11485: LD_VAR 0 6
11489: PPUSH
11490: CALL_OW 264
11494: PUSH
11495: LD_INT 14
11497: PUSH
11498: LD_INT 53
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: IN
11505: IFFALSE 11526
// points := [ 40 , 10 , 20 ] ;
11507: LD_ADDR_VAR 0 9
11511: PUSH
11512: LD_INT 40
11514: PUSH
11515: LD_INT 10
11517: PUSH
11518: LD_INT 20
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11526: LD_VAR 0 6
11530: PPUSH
11531: CALL_OW 264
11535: PUSH
11536: LD_INT 9
11538: PUSH
11539: EMPTY
11540: LIST
11541: IN
11542: IFFALSE 11563
// points := [ 5 , 70 , 20 ] ;
11544: LD_ADDR_VAR 0 9
11548: PUSH
11549: LD_INT 5
11551: PUSH
11552: LD_INT 70
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11563: LD_VAR 0 6
11567: PPUSH
11568: CALL_OW 264
11572: PUSH
11573: LD_INT 10
11575: PUSH
11576: EMPTY
11577: LIST
11578: IN
11579: IFFALSE 11600
// points := [ 35 , 110 , 70 ] ;
11581: LD_ADDR_VAR 0 9
11585: PUSH
11586: LD_INT 35
11588: PUSH
11589: LD_INT 110
11591: PUSH
11592: LD_INT 70
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11600: LD_VAR 0 6
11604: PPUSH
11605: CALL_OW 265
11609: PUSH
11610: LD_INT 25
11612: EQUAL
11613: IFFALSE 11634
// points := [ 80 , 65 , 100 ] ;
11615: LD_ADDR_VAR 0 9
11619: PUSH
11620: LD_INT 80
11622: PUSH
11623: LD_INT 65
11625: PUSH
11626: LD_INT 100
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11634: LD_VAR 0 6
11638: PPUSH
11639: CALL_OW 263
11643: PUSH
11644: LD_INT 1
11646: EQUAL
11647: IFFALSE 11682
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11649: LD_ADDR_VAR 0 10
11653: PUSH
11654: LD_VAR 0 10
11658: PUSH
11659: LD_VAR 0 6
11663: PPUSH
11664: CALL_OW 311
11668: PPUSH
11669: LD_INT 3
11671: PPUSH
11672: CALL_OW 259
11676: PUSH
11677: LD_INT 4
11679: MUL
11680: MUL
11681: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11682: LD_VAR 0 6
11686: PPUSH
11687: CALL_OW 263
11691: PUSH
11692: LD_INT 2
11694: EQUAL
11695: IFFALSE 11746
// begin j := IsControledBy ( i ) ;
11697: LD_ADDR_VAR 0 7
11701: PUSH
11702: LD_VAR 0 6
11706: PPUSH
11707: CALL_OW 312
11711: ST_TO_ADDR
// if j then
11712: LD_VAR 0 7
11716: IFFALSE 11746
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11718: LD_ADDR_VAR 0 10
11722: PUSH
11723: LD_VAR 0 10
11727: PUSH
11728: LD_VAR 0 7
11732: PPUSH
11733: LD_INT 3
11735: PPUSH
11736: CALL_OW 259
11740: PUSH
11741: LD_INT 3
11743: MUL
11744: MUL
11745: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11746: LD_VAR 0 6
11750: PPUSH
11751: CALL_OW 264
11755: PUSH
11756: LD_INT 5
11758: PUSH
11759: LD_INT 6
11761: PUSH
11762: LD_INT 46
11764: PUSH
11765: LD_INT 44
11767: PUSH
11768: LD_INT 47
11770: PUSH
11771: LD_INT 45
11773: PUSH
11774: LD_INT 28
11776: PUSH
11777: LD_INT 7
11779: PUSH
11780: LD_INT 27
11782: PUSH
11783: LD_INT 29
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: IN
11798: PUSH
11799: LD_VAR 0 1
11803: PPUSH
11804: LD_INT 52
11806: PPUSH
11807: CALL_OW 321
11811: PUSH
11812: LD_INT 2
11814: EQUAL
11815: AND
11816: IFFALSE 11833
// bpoints := bpoints * 1.2 ;
11818: LD_ADDR_VAR 0 10
11822: PUSH
11823: LD_VAR 0 10
11827: PUSH
11828: LD_REAL  1.20000000000000E+0000
11831: MUL
11832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11833: LD_VAR 0 6
11837: PPUSH
11838: CALL_OW 264
11842: PUSH
11843: LD_INT 6
11845: PUSH
11846: LD_INT 46
11848: PUSH
11849: LD_INT 47
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: IN
11857: IFFALSE 11874
// bpoints := bpoints * 1.2 ;
11859: LD_ADDR_VAR 0 10
11863: PUSH
11864: LD_VAR 0 10
11868: PUSH
11869: LD_REAL  1.20000000000000E+0000
11872: MUL
11873: ST_TO_ADDR
// end ; unit_building :
11874: GO 11888
11876: LD_INT 3
11878: DOUBLE
11879: EQUAL
11880: IFTRUE 11884
11882: GO 11887
11884: POP
// ; end ;
11885: GO 11888
11887: POP
// for j = 1 to 3 do
11888: LD_ADDR_VAR 0 7
11892: PUSH
11893: DOUBLE
11894: LD_INT 1
11896: DEC
11897: ST_TO_ADDR
11898: LD_INT 3
11900: PUSH
11901: FOR_TO
11902: IFFALSE 11955
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11904: LD_ADDR_VAR 0 5
11908: PUSH
11909: LD_VAR 0 5
11913: PPUSH
11914: LD_VAR 0 7
11918: PPUSH
11919: LD_VAR 0 5
11923: PUSH
11924: LD_VAR 0 7
11928: ARRAY
11929: PUSH
11930: LD_VAR 0 9
11934: PUSH
11935: LD_VAR 0 7
11939: ARRAY
11940: PUSH
11941: LD_VAR 0 10
11945: MUL
11946: PLUS
11947: PPUSH
11948: CALL_OW 1
11952: ST_TO_ADDR
11953: GO 11901
11955: POP
11956: POP
// end ;
11957: GO 10440
11959: POP
11960: POP
// result := Replace ( result , 4 , tmp ) ;
11961: LD_ADDR_VAR 0 5
11965: PUSH
11966: LD_VAR 0 5
11970: PPUSH
11971: LD_INT 4
11973: PPUSH
11974: LD_VAR 0 8
11978: PPUSH
11979: CALL_OW 1
11983: ST_TO_ADDR
// end ;
11984: LD_VAR 0 5
11988: RET
// export function DangerAtRange ( unit , range ) ; begin
11989: LD_INT 0
11991: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11992: LD_ADDR_VAR 0 3
11996: PUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 255
12006: PPUSH
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 250
12016: PPUSH
12017: LD_VAR 0 1
12021: PPUSH
12022: CALL_OW 251
12026: PPUSH
12027: LD_VAR 0 2
12031: PPUSH
12032: CALL 10292 0 4
12036: ST_TO_ADDR
// end ;
12037: LD_VAR 0 3
12041: RET
// export function DangerInArea ( side , area ) ; begin
12042: LD_INT 0
12044: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: LD_INT 81
12057: PUSH
12058: LD_VAR 0 1
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 70
12071: ST_TO_ADDR
// end ;
12072: LD_VAR 0 3
12076: RET
// export function IsExtension ( b ) ; begin
12077: LD_INT 0
12079: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 23
12092: PUSH
12093: LD_INT 20
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_INT 17
12101: PUSH
12102: LD_INT 24
12104: PUSH
12105: LD_INT 21
12107: PUSH
12108: LD_INT 19
12110: PUSH
12111: LD_INT 16
12113: PUSH
12114: LD_INT 25
12116: PUSH
12117: LD_INT 18
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: IN
12132: ST_TO_ADDR
// end ;
12133: LD_VAR 0 2
12137: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
12138: LD_INT 0
12140: PPUSH
12141: PPUSH
12142: PPUSH
// result := [ ] ;
12143: LD_ADDR_VAR 0 3
12147: PUSH
12148: EMPTY
12149: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12150: LD_ADDR_VAR 0 4
12154: PUSH
12155: LD_VAR 0 2
12159: PPUSH
12160: LD_INT 21
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 70
12174: ST_TO_ADDR
// if not tmp then
12175: LD_VAR 0 4
12179: NOT
12180: IFFALSE 12184
// exit ;
12182: GO 12242
// for i in tmp do
12184: LD_ADDR_VAR 0 5
12188: PUSH
12189: LD_VAR 0 4
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12230
// if GetBase ( i ) <> base then
12197: LD_VAR 0 5
12201: PPUSH
12202: CALL_OW 274
12206: PUSH
12207: LD_VAR 0 1
12211: NONEQUAL
12212: IFFALSE 12228
// ComLinkToBase ( base , i ) ;
12214: LD_VAR 0 1
12218: PPUSH
12219: LD_VAR 0 5
12223: PPUSH
12224: CALL_OW 169
12228: GO 12194
12230: POP
12231: POP
// result := tmp ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: LD_VAR 0 4
12241: ST_TO_ADDR
// end ;
12242: LD_VAR 0 3
12246: RET
// export function ComComplete ( unit , b ) ; var i ; begin
12247: LD_INT 0
12249: PPUSH
12250: PPUSH
// if BuildingStatus ( b ) = bs_build then
12251: LD_VAR 0 2
12255: PPUSH
12256: CALL_OW 461
12260: PUSH
12261: LD_INT 1
12263: EQUAL
12264: IFFALSE 12324
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12266: LD_VAR 0 1
12270: PPUSH
12271: LD_STRING h
12273: PUSH
12274: LD_VAR 0 2
12278: PPUSH
12279: CALL_OW 250
12283: PUSH
12284: LD_VAR 0 2
12288: PPUSH
12289: CALL_OW 251
12293: PUSH
12294: LD_VAR 0 2
12298: PUSH
12299: LD_INT 0
12301: PUSH
12302: LD_INT 0
12304: PUSH
12305: LD_INT 0
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: PPUSH
12320: CALL_OW 446
// end ;
12324: LD_VAR 0 3
12328: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12329: LD_INT 0
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
12337: LD_VAR 0 1
12341: NOT
12342: PUSH
12343: LD_VAR 0 1
12347: PPUSH
12348: CALL_OW 263
12352: PUSH
12353: LD_INT 2
12355: EQUAL
12356: NOT
12357: OR
12358: IFFALSE 12362
// exit ;
12360: GO 12678
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: LD_INT 22
12369: PUSH
12370: LD_VAR 0 1
12374: PPUSH
12375: CALL_OW 255
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: LD_INT 30
12389: PUSH
12390: LD_INT 36
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 34
12399: PUSH
12400: LD_INT 31
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PPUSH
12416: CALL_OW 69
12420: ST_TO_ADDR
// if not tmp then
12421: LD_VAR 0 6
12425: NOT
12426: IFFALSE 12430
// exit ;
12428: GO 12678
// result := [ ] ;
12430: LD_ADDR_VAR 0 2
12434: PUSH
12435: EMPTY
12436: ST_TO_ADDR
// for i in tmp do
12437: LD_ADDR_VAR 0 3
12441: PUSH
12442: LD_VAR 0 6
12446: PUSH
12447: FOR_IN
12448: IFFALSE 12519
// begin t := UnitsInside ( i ) ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: CALL_OW 313
12464: ST_TO_ADDR
// if t then
12465: LD_VAR 0 4
12469: IFFALSE 12517
// for j in t do
12471: LD_ADDR_VAR 0 7
12475: PUSH
12476: LD_VAR 0 4
12480: PUSH
12481: FOR_IN
12482: IFFALSE 12515
// result := Insert ( result , result + 1 , j ) ;
12484: LD_ADDR_VAR 0 2
12488: PUSH
12489: LD_VAR 0 2
12493: PPUSH
12494: LD_VAR 0 2
12498: PUSH
12499: LD_INT 1
12501: PLUS
12502: PPUSH
12503: LD_VAR 0 7
12507: PPUSH
12508: CALL_OW 2
12512: ST_TO_ADDR
12513: GO 12481
12515: POP
12516: POP
// end ;
12517: GO 12447
12519: POP
12520: POP
// if not result then
12521: LD_VAR 0 2
12525: NOT
12526: IFFALSE 12530
// exit ;
12528: GO 12678
// mech := result [ 1 ] ;
12530: LD_ADDR_VAR 0 5
12534: PUSH
12535: LD_VAR 0 2
12539: PUSH
12540: LD_INT 1
12542: ARRAY
12543: ST_TO_ADDR
// if result > 1 then
12544: LD_VAR 0 2
12548: PUSH
12549: LD_INT 1
12551: GREATER
12552: IFFALSE 12664
// for i = 2 to result do
12554: LD_ADDR_VAR 0 3
12558: PUSH
12559: DOUBLE
12560: LD_INT 2
12562: DEC
12563: ST_TO_ADDR
12564: LD_VAR 0 2
12568: PUSH
12569: FOR_TO
12570: IFFALSE 12662
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_VAR 0 2
12581: PUSH
12582: LD_VAR 0 3
12586: ARRAY
12587: PPUSH
12588: LD_INT 3
12590: PPUSH
12591: CALL_OW 259
12595: PUSH
12596: LD_VAR 0 2
12600: PUSH
12601: LD_VAR 0 3
12605: ARRAY
12606: PPUSH
12607: CALL_OW 432
12611: MINUS
12612: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12613: LD_VAR 0 4
12617: PUSH
12618: LD_VAR 0 5
12622: PPUSH
12623: LD_INT 3
12625: PPUSH
12626: CALL_OW 259
12630: PUSH
12631: LD_VAR 0 5
12635: PPUSH
12636: CALL_OW 432
12640: MINUS
12641: GREATEREQUAL
12642: IFFALSE 12660
// mech := result [ i ] ;
12644: LD_ADDR_VAR 0 5
12648: PUSH
12649: LD_VAR 0 2
12653: PUSH
12654: LD_VAR 0 3
12658: ARRAY
12659: ST_TO_ADDR
// end ;
12660: GO 12569
12662: POP
12663: POP
// ComLinkTo ( vehicle , mech ) ;
12664: LD_VAR 0 1
12668: PPUSH
12669: LD_VAR 0 5
12673: PPUSH
12674: CALL_OW 135
// end ;
12678: LD_VAR 0 2
12682: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12683: LD_INT 0
12685: PPUSH
12686: PPUSH
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
12697: PPUSH
// result := [ ] ;
12698: LD_ADDR_VAR 0 7
12702: PUSH
12703: EMPTY
12704: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 266
12714: PUSH
12715: LD_INT 0
12717: PUSH
12718: LD_INT 1
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: IN
12725: NOT
12726: IFFALSE 12730
// exit ;
12728: GO 14361
// if name then
12730: LD_VAR 0 3
12734: IFFALSE 12750
// SetBName ( base_dep , name ) ;
12736: LD_VAR 0 1
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: CALL_OW 500
// base := GetBase ( base_dep ) ;
12750: LD_ADDR_VAR 0 15
12754: PUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 274
12764: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12765: LD_ADDR_VAR 0 16
12769: PUSH
12770: LD_VAR 0 1
12774: PPUSH
12775: CALL_OW 255
12779: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12780: LD_ADDR_VAR 0 17
12784: PUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 248
12794: ST_TO_ADDR
// if sources then
12795: LD_VAR 0 5
12799: IFFALSE 12846
// for i = 1 to 3 do
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: DOUBLE
12807: LD_INT 1
12809: DEC
12810: ST_TO_ADDR
12811: LD_INT 3
12813: PUSH
12814: FOR_TO
12815: IFFALSE 12844
// AddResourceType ( base , i , sources [ i ] ) ;
12817: LD_VAR 0 15
12821: PPUSH
12822: LD_VAR 0 8
12826: PPUSH
12827: LD_VAR 0 5
12831: PUSH
12832: LD_VAR 0 8
12836: ARRAY
12837: PPUSH
12838: CALL_OW 276
12842: GO 12814
12844: POP
12845: POP
// buildings := GetBaseBuildings ( base , area ) ;
12846: LD_ADDR_VAR 0 18
12850: PUSH
12851: LD_VAR 0 15
12855: PPUSH
12856: LD_VAR 0 2
12860: PPUSH
12861: CALL 12138 0 2
12865: ST_TO_ADDR
// InitHc ;
12866: CALL_OW 19
// InitUc ;
12870: CALL_OW 18
// uc_side := side ;
12874: LD_ADDR_OWVAR 20
12878: PUSH
12879: LD_VAR 0 16
12883: ST_TO_ADDR
// uc_nation := nation ;
12884: LD_ADDR_OWVAR 21
12888: PUSH
12889: LD_VAR 0 17
12893: ST_TO_ADDR
// if buildings then
12894: LD_VAR 0 18
12898: IFFALSE 14220
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12900: LD_ADDR_VAR 0 19
12904: PUSH
12905: LD_VAR 0 18
12909: PPUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 29
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 30
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 72
12942: ST_TO_ADDR
// if tmp then
12943: LD_VAR 0 19
12947: IFFALSE 12995
// for i in tmp do
12949: LD_ADDR_VAR 0 8
12953: PUSH
12954: LD_VAR 0 19
12958: PUSH
12959: FOR_IN
12960: IFFALSE 12993
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12962: LD_VAR 0 8
12966: PPUSH
12967: CALL_OW 250
12971: PPUSH
12972: LD_VAR 0 8
12976: PPUSH
12977: CALL_OW 251
12981: PPUSH
12982: LD_VAR 0 16
12986: PPUSH
12987: CALL_OW 441
12991: GO 12959
12993: POP
12994: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12995: LD_VAR 0 18
12999: PPUSH
13000: LD_INT 2
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: LD_INT 32
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: PPUSH
13028: CALL_OW 72
13032: IFFALSE 13120
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13034: LD_ADDR_VAR 0 8
13038: PUSH
13039: LD_VAR 0 18
13043: PPUSH
13044: LD_INT 2
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 32
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 30
13059: PUSH
13060: LD_INT 33
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 72
13076: PUSH
13077: FOR_IN
13078: IFFALSE 13118
// begin if not GetBWeapon ( i ) then
13080: LD_VAR 0 8
13084: PPUSH
13085: CALL_OW 269
13089: NOT
13090: IFFALSE 13116
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13092: LD_VAR 0 8
13096: PPUSH
13097: LD_VAR 0 8
13101: PPUSH
13102: LD_VAR 0 2
13106: PPUSH
13107: CALL 14366 0 2
13111: PPUSH
13112: CALL_OW 431
// end ;
13116: GO 13077
13118: POP
13119: POP
// end ; for i = 1 to personel do
13120: LD_ADDR_VAR 0 8
13124: PUSH
13125: DOUBLE
13126: LD_INT 1
13128: DEC
13129: ST_TO_ADDR
13130: LD_VAR 0 6
13134: PUSH
13135: FOR_TO
13136: IFFALSE 14200
// begin if i > 4 then
13138: LD_VAR 0 8
13142: PUSH
13143: LD_INT 4
13145: GREATER
13146: IFFALSE 13150
// break ;
13148: GO 14200
// case i of 1 :
13150: LD_VAR 0 8
13154: PUSH
13155: LD_INT 1
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13243
13163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13164: LD_ADDR_VAR 0 12
13168: PUSH
13169: LD_VAR 0 18
13173: PPUSH
13174: LD_INT 22
13176: PUSH
13177: LD_VAR 0 16
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 58
13188: PUSH
13189: EMPTY
13190: LIST
13191: PUSH
13192: LD_INT 2
13194: PUSH
13195: LD_INT 30
13197: PUSH
13198: LD_INT 32
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 30
13207: PUSH
13208: LD_INT 4
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 30
13217: PUSH
13218: LD_INT 5
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 72
13240: ST_TO_ADDR
13241: GO 13465
13243: LD_INT 2
13245: DOUBLE
13246: EQUAL
13247: IFTRUE 13251
13249: GO 13313
13251: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13252: LD_ADDR_VAR 0 12
13256: PUSH
13257: LD_VAR 0 18
13261: PPUSH
13262: LD_INT 22
13264: PUSH
13265: LD_VAR 0 16
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 30
13279: PUSH
13280: LD_INT 0
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PPUSH
13306: CALL_OW 72
13310: ST_TO_ADDR
13311: GO 13465
13313: LD_INT 3
13315: DOUBLE
13316: EQUAL
13317: IFTRUE 13321
13319: GO 13383
13321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13322: LD_ADDR_VAR 0 12
13326: PUSH
13327: LD_VAR 0 18
13331: PPUSH
13332: LD_INT 22
13334: PUSH
13335: LD_VAR 0 16
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 2
13346: PUSH
13347: LD_INT 30
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 30
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: ST_TO_ADDR
13381: GO 13465
13383: LD_INT 4
13385: DOUBLE
13386: EQUAL
13387: IFTRUE 13391
13389: GO 13464
13391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13392: LD_ADDR_VAR 0 12
13396: PUSH
13397: LD_VAR 0 18
13401: PPUSH
13402: LD_INT 22
13404: PUSH
13405: LD_VAR 0 16
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: LD_INT 30
13419: PUSH
13420: LD_INT 6
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 30
13429: PUSH
13430: LD_INT 7
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 30
13439: PUSH
13440: LD_INT 8
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 72
13461: ST_TO_ADDR
13462: GO 13465
13464: POP
// if i = 1 then
13465: LD_VAR 0 8
13469: PUSH
13470: LD_INT 1
13472: EQUAL
13473: IFFALSE 13584
// begin tmp := [ ] ;
13475: LD_ADDR_VAR 0 19
13479: PUSH
13480: EMPTY
13481: ST_TO_ADDR
// for j in f do
13482: LD_ADDR_VAR 0 9
13486: PUSH
13487: LD_VAR 0 12
13491: PUSH
13492: FOR_IN
13493: IFFALSE 13566
// if GetBType ( j ) = b_bunker then
13495: LD_VAR 0 9
13499: PPUSH
13500: CALL_OW 266
13504: PUSH
13505: LD_INT 32
13507: EQUAL
13508: IFFALSE 13535
// tmp := Insert ( tmp , 1 , j ) else
13510: LD_ADDR_VAR 0 19
13514: PUSH
13515: LD_VAR 0 19
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: LD_VAR 0 9
13527: PPUSH
13528: CALL_OW 2
13532: ST_TO_ADDR
13533: GO 13564
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13535: LD_ADDR_VAR 0 19
13539: PUSH
13540: LD_VAR 0 19
13544: PPUSH
13545: LD_VAR 0 19
13549: PUSH
13550: LD_INT 1
13552: PLUS
13553: PPUSH
13554: LD_VAR 0 9
13558: PPUSH
13559: CALL_OW 2
13563: ST_TO_ADDR
13564: GO 13492
13566: POP
13567: POP
// if tmp then
13568: LD_VAR 0 19
13572: IFFALSE 13584
// f := tmp ;
13574: LD_ADDR_VAR 0 12
13578: PUSH
13579: LD_VAR 0 19
13583: ST_TO_ADDR
// end ; x := personel [ i ] ;
13584: LD_ADDR_VAR 0 13
13588: PUSH
13589: LD_VAR 0 6
13593: PUSH
13594: LD_VAR 0 8
13598: ARRAY
13599: ST_TO_ADDR
// if x = - 1 then
13600: LD_VAR 0 13
13604: PUSH
13605: LD_INT 1
13607: NEG
13608: EQUAL
13609: IFFALSE 13818
// begin for j in f do
13611: LD_ADDR_VAR 0 9
13615: PUSH
13616: LD_VAR 0 12
13620: PUSH
13621: FOR_IN
13622: IFFALSE 13814
// repeat InitHc ;
13624: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13628: LD_VAR 0 9
13632: PPUSH
13633: CALL_OW 266
13637: PUSH
13638: LD_INT 5
13640: EQUAL
13641: IFFALSE 13711
// begin if UnitsInside ( j ) < 3 then
13643: LD_VAR 0 9
13647: PPUSH
13648: CALL_OW 313
13652: PUSH
13653: LD_INT 3
13655: LESS
13656: IFFALSE 13692
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13658: LD_INT 0
13660: PPUSH
13661: LD_INT 5
13663: PUSH
13664: LD_INT 8
13666: PUSH
13667: LD_INT 9
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_VAR 0 17
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 4
13685: PPUSH
13686: CALL_OW 380
13690: GO 13709
// PrepareHuman ( false , i , skill ) ;
13692: LD_INT 0
13694: PPUSH
13695: LD_VAR 0 8
13699: PPUSH
13700: LD_VAR 0 4
13704: PPUSH
13705: CALL_OW 380
// end else
13709: GO 13728
// PrepareHuman ( false , i , skill ) ;
13711: LD_INT 0
13713: PPUSH
13714: LD_VAR 0 8
13718: PPUSH
13719: LD_VAR 0 4
13723: PPUSH
13724: CALL_OW 380
// un := CreateHuman ;
13728: LD_ADDR_VAR 0 14
13732: PUSH
13733: CALL_OW 44
13737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13738: LD_ADDR_VAR 0 7
13742: PUSH
13743: LD_VAR 0 7
13747: PPUSH
13748: LD_INT 1
13750: PPUSH
13751: LD_VAR 0 14
13755: PPUSH
13756: CALL_OW 2
13760: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13761: LD_VAR 0 14
13765: PPUSH
13766: LD_VAR 0 9
13770: PPUSH
13771: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13775: LD_VAR 0 9
13779: PPUSH
13780: CALL_OW 313
13784: PUSH
13785: LD_INT 6
13787: EQUAL
13788: PUSH
13789: LD_VAR 0 9
13793: PPUSH
13794: CALL_OW 266
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: LD_INT 31
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: IN
13809: OR
13810: IFFALSE 13624
13812: GO 13621
13814: POP
13815: POP
// end else
13816: GO 14198
// for j = 1 to x do
13818: LD_ADDR_VAR 0 9
13822: PUSH
13823: DOUBLE
13824: LD_INT 1
13826: DEC
13827: ST_TO_ADDR
13828: LD_VAR 0 13
13832: PUSH
13833: FOR_TO
13834: IFFALSE 14196
// begin InitHc ;
13836: CALL_OW 19
// if not f then
13840: LD_VAR 0 12
13844: NOT
13845: IFFALSE 13934
// begin PrepareHuman ( false , i , skill ) ;
13847: LD_INT 0
13849: PPUSH
13850: LD_VAR 0 8
13854: PPUSH
13855: LD_VAR 0 4
13859: PPUSH
13860: CALL_OW 380
// un := CreateHuman ;
13864: LD_ADDR_VAR 0 14
13868: PUSH
13869: CALL_OW 44
13873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13874: LD_ADDR_VAR 0 7
13878: PUSH
13879: LD_VAR 0 7
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: LD_VAR 0 14
13891: PPUSH
13892: CALL_OW 2
13896: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13897: LD_VAR 0 14
13901: PPUSH
13902: LD_VAR 0 1
13906: PPUSH
13907: CALL_OW 250
13911: PPUSH
13912: LD_VAR 0 1
13916: PPUSH
13917: CALL_OW 251
13921: PPUSH
13922: LD_INT 10
13924: PPUSH
13925: LD_INT 0
13927: PPUSH
13928: CALL_OW 50
// continue ;
13932: GO 13833
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13934: LD_VAR 0 12
13938: PUSH
13939: LD_INT 1
13941: ARRAY
13942: PPUSH
13943: CALL_OW 313
13947: PUSH
13948: LD_VAR 0 12
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: CALL_OW 266
13961: PUSH
13962: LD_INT 32
13964: PUSH
13965: LD_INT 31
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: IN
13972: AND
13973: PUSH
13974: LD_VAR 0 12
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 313
13987: PUSH
13988: LD_INT 6
13990: EQUAL
13991: OR
13992: IFFALSE 14012
// f := Delete ( f , 1 ) ;
13994: LD_ADDR_VAR 0 12
13998: PUSH
13999: LD_VAR 0 12
14003: PPUSH
14004: LD_INT 1
14006: PPUSH
14007: CALL_OW 3
14011: ST_TO_ADDR
// if not f then
14012: LD_VAR 0 12
14016: NOT
14017: IFFALSE 14035
// begin x := x + 2 ;
14019: LD_ADDR_VAR 0 13
14023: PUSH
14024: LD_VAR 0 13
14028: PUSH
14029: LD_INT 2
14031: PLUS
14032: ST_TO_ADDR
// continue ;
14033: GO 13833
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14035: LD_VAR 0 12
14039: PUSH
14040: LD_INT 1
14042: ARRAY
14043: PPUSH
14044: CALL_OW 266
14048: PUSH
14049: LD_INT 5
14051: EQUAL
14052: IFFALSE 14126
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14054: LD_VAR 0 12
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PPUSH
14063: CALL_OW 313
14067: PUSH
14068: LD_INT 3
14070: LESS
14071: IFFALSE 14107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14073: LD_INT 0
14075: PPUSH
14076: LD_INT 5
14078: PUSH
14079: LD_INT 8
14081: PUSH
14082: LD_INT 9
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: PUSH
14090: LD_VAR 0 17
14094: ARRAY
14095: PPUSH
14096: LD_VAR 0 4
14100: PPUSH
14101: CALL_OW 380
14105: GO 14124
// PrepareHuman ( false , i , skill ) ;
14107: LD_INT 0
14109: PPUSH
14110: LD_VAR 0 8
14114: PPUSH
14115: LD_VAR 0 4
14119: PPUSH
14120: CALL_OW 380
// end else
14124: GO 14143
// PrepareHuman ( false , i , skill ) ;
14126: LD_INT 0
14128: PPUSH
14129: LD_VAR 0 8
14133: PPUSH
14134: LD_VAR 0 4
14138: PPUSH
14139: CALL_OW 380
// un := CreateHuman ;
14143: LD_ADDR_VAR 0 14
14147: PUSH
14148: CALL_OW 44
14152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14153: LD_ADDR_VAR 0 7
14157: PUSH
14158: LD_VAR 0 7
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: LD_VAR 0 14
14170: PPUSH
14171: CALL_OW 2
14175: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14176: LD_VAR 0 14
14180: PPUSH
14181: LD_VAR 0 12
14185: PUSH
14186: LD_INT 1
14188: ARRAY
14189: PPUSH
14190: CALL_OW 52
// end ;
14194: GO 13833
14196: POP
14197: POP
// end ;
14198: GO 13135
14200: POP
14201: POP
// result := result ^ buildings ;
14202: LD_ADDR_VAR 0 7
14206: PUSH
14207: LD_VAR 0 7
14211: PUSH
14212: LD_VAR 0 18
14216: ADD
14217: ST_TO_ADDR
// end else
14218: GO 14361
// begin for i = 1 to personel do
14220: LD_ADDR_VAR 0 8
14224: PUSH
14225: DOUBLE
14226: LD_INT 1
14228: DEC
14229: ST_TO_ADDR
14230: LD_VAR 0 6
14234: PUSH
14235: FOR_TO
14236: IFFALSE 14359
// begin if i > 4 then
14238: LD_VAR 0 8
14242: PUSH
14243: LD_INT 4
14245: GREATER
14246: IFFALSE 14250
// break ;
14248: GO 14359
// x := personel [ i ] ;
14250: LD_ADDR_VAR 0 13
14254: PUSH
14255: LD_VAR 0 6
14259: PUSH
14260: LD_VAR 0 8
14264: ARRAY
14265: ST_TO_ADDR
// if x = - 1 then
14266: LD_VAR 0 13
14270: PUSH
14271: LD_INT 1
14273: NEG
14274: EQUAL
14275: IFFALSE 14279
// continue ;
14277: GO 14235
// PrepareHuman ( false , i , skill ) ;
14279: LD_INT 0
14281: PPUSH
14282: LD_VAR 0 8
14286: PPUSH
14287: LD_VAR 0 4
14291: PPUSH
14292: CALL_OW 380
// un := CreateHuman ;
14296: LD_ADDR_VAR 0 14
14300: PUSH
14301: CALL_OW 44
14305: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14306: LD_VAR 0 14
14310: PPUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 250
14320: PPUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL_OW 251
14330: PPUSH
14331: LD_INT 10
14333: PPUSH
14334: LD_INT 0
14336: PPUSH
14337: CALL_OW 50
// result := result ^ un ;
14341: LD_ADDR_VAR 0 7
14345: PUSH
14346: LD_VAR 0 7
14350: PUSH
14351: LD_VAR 0 14
14355: ADD
14356: ST_TO_ADDR
// end ;
14357: GO 14235
14359: POP
14360: POP
// end ; end ;
14361: LD_VAR 0 7
14365: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14366: LD_INT 0
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
// result := false ;
14384: LD_ADDR_VAR 0 3
14388: PUSH
14389: LD_INT 0
14391: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14392: LD_VAR 0 1
14396: NOT
14397: PUSH
14398: LD_VAR 0 1
14402: PPUSH
14403: CALL_OW 266
14407: PUSH
14408: LD_INT 32
14410: PUSH
14411: LD_INT 33
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: IN
14418: NOT
14419: OR
14420: IFFALSE 14424
// exit ;
14422: GO 15560
// nat := GetNation ( tower ) ;
14424: LD_ADDR_VAR 0 12
14428: PUSH
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 248
14438: ST_TO_ADDR
// side := GetSide ( tower ) ;
14439: LD_ADDR_VAR 0 16
14443: PUSH
14444: LD_VAR 0 1
14448: PPUSH
14449: CALL_OW 255
14453: ST_TO_ADDR
// x := GetX ( tower ) ;
14454: LD_ADDR_VAR 0 10
14458: PUSH
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 250
14468: ST_TO_ADDR
// y := GetY ( tower ) ;
14469: LD_ADDR_VAR 0 11
14473: PUSH
14474: LD_VAR 0 1
14478: PPUSH
14479: CALL_OW 251
14483: ST_TO_ADDR
// if not x or not y then
14484: LD_VAR 0 10
14488: NOT
14489: PUSH
14490: LD_VAR 0 11
14494: NOT
14495: OR
14496: IFFALSE 14500
// exit ;
14498: GO 15560
// weapon := 0 ;
14500: LD_ADDR_VAR 0 18
14504: PUSH
14505: LD_INT 0
14507: ST_TO_ADDR
// fac_list := [ ] ;
14508: LD_ADDR_VAR 0 17
14512: PUSH
14513: EMPTY
14514: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
14515: LD_ADDR_VAR 0 6
14519: PUSH
14520: LD_VAR 0 1
14524: PPUSH
14525: CALL_OW 274
14529: PPUSH
14530: LD_VAR 0 2
14534: PPUSH
14535: CALL 12138 0 2
14539: PPUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 3
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PPUSH
14550: CALL_OW 72
14554: ST_TO_ADDR
// if not factories then
14555: LD_VAR 0 6
14559: NOT
14560: IFFALSE 14564
// exit ;
14562: GO 15560
// for i in factories do
14564: LD_ADDR_VAR 0 8
14568: PUSH
14569: LD_VAR 0 6
14573: PUSH
14574: FOR_IN
14575: IFFALSE 14600
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14577: LD_ADDR_VAR 0 17
14581: PUSH
14582: LD_VAR 0 17
14586: PUSH
14587: LD_VAR 0 8
14591: PPUSH
14592: CALL_OW 478
14596: UNION
14597: ST_TO_ADDR
14598: GO 14574
14600: POP
14601: POP
// if not fac_list then
14602: LD_VAR 0 17
14606: NOT
14607: IFFALSE 14611
// exit ;
14609: GO 15560
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14611: LD_ADDR_VAR 0 5
14615: PUSH
14616: LD_INT 4
14618: PUSH
14619: LD_INT 5
14621: PUSH
14622: LD_INT 9
14624: PUSH
14625: LD_INT 10
14627: PUSH
14628: LD_INT 6
14630: PUSH
14631: LD_INT 7
14633: PUSH
14634: LD_INT 11
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 27
14648: PUSH
14649: LD_INT 28
14651: PUSH
14652: LD_INT 26
14654: PUSH
14655: LD_INT 30
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 43
14666: PUSH
14667: LD_INT 44
14669: PUSH
14670: LD_INT 46
14672: PUSH
14673: LD_INT 45
14675: PUSH
14676: LD_INT 47
14678: PUSH
14679: LD_INT 49
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: LD_VAR 0 12
14699: ARRAY
14700: ST_TO_ADDR
// for i in list do
14701: LD_ADDR_VAR 0 8
14705: PUSH
14706: LD_VAR 0 5
14710: PUSH
14711: FOR_IN
14712: IFFALSE 14745
// if not i in fac_list then
14714: LD_VAR 0 8
14718: PUSH
14719: LD_VAR 0 17
14723: IN
14724: NOT
14725: IFFALSE 14743
// list := list diff i ;
14727: LD_ADDR_VAR 0 5
14731: PUSH
14732: LD_VAR 0 5
14736: PUSH
14737: LD_VAR 0 8
14741: DIFF
14742: ST_TO_ADDR
14743: GO 14711
14745: POP
14746: POP
// if not list then
14747: LD_VAR 0 5
14751: NOT
14752: IFFALSE 14756
// exit ;
14754: GO 15560
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14756: LD_VAR 0 12
14760: PUSH
14761: LD_INT 3
14763: EQUAL
14764: PUSH
14765: LD_INT 49
14767: PUSH
14768: LD_VAR 0 5
14772: IN
14773: AND
14774: PUSH
14775: LD_INT 31
14777: PPUSH
14778: LD_VAR 0 16
14782: PPUSH
14783: CALL_OW 321
14787: PUSH
14788: LD_INT 2
14790: EQUAL
14791: AND
14792: IFFALSE 14852
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14794: LD_INT 22
14796: PUSH
14797: LD_VAR 0 16
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 35
14808: PUSH
14809: LD_INT 49
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 91
14818: PUSH
14819: LD_VAR 0 1
14823: PUSH
14824: LD_INT 10
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: NOT
14842: IFFALSE 14852
// weapon := ru_time_lapser ;
14844: LD_ADDR_VAR 0 18
14848: PUSH
14849: LD_INT 49
14851: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14852: LD_VAR 0 12
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: IN
14867: PUSH
14868: LD_INT 11
14870: PUSH
14871: LD_VAR 0 5
14875: IN
14876: PUSH
14877: LD_INT 30
14879: PUSH
14880: LD_VAR 0 5
14884: IN
14885: OR
14886: AND
14887: PUSH
14888: LD_INT 6
14890: PPUSH
14891: LD_VAR 0 16
14895: PPUSH
14896: CALL_OW 321
14900: PUSH
14901: LD_INT 2
14903: EQUAL
14904: AND
14905: IFFALSE 15070
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14907: LD_INT 22
14909: PUSH
14910: LD_VAR 0 16
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: LD_INT 35
14924: PUSH
14925: LD_INT 11
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 35
14934: PUSH
14935: LD_INT 30
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 91
14949: PUSH
14950: LD_VAR 0 1
14954: PUSH
14955: LD_INT 18
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 69
14972: NOT
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_VAR 0 16
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 30
14991: PUSH
14992: LD_INT 32
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 33
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 91
15016: PUSH
15017: LD_VAR 0 1
15021: PUSH
15022: LD_INT 12
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: PPUSH
15038: CALL_OW 69
15042: PUSH
15043: LD_INT 2
15045: GREATER
15046: AND
15047: IFFALSE 15070
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15049: LD_ADDR_VAR 0 18
15053: PUSH
15054: LD_INT 11
15056: PUSH
15057: LD_INT 30
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_VAR 0 12
15068: ARRAY
15069: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15070: LD_VAR 0 18
15074: NOT
15075: PUSH
15076: LD_INT 40
15078: PPUSH
15079: LD_VAR 0 16
15083: PPUSH
15084: CALL_OW 321
15088: PUSH
15089: LD_INT 2
15091: EQUAL
15092: AND
15093: PUSH
15094: LD_INT 7
15096: PUSH
15097: LD_VAR 0 5
15101: IN
15102: PUSH
15103: LD_INT 28
15105: PUSH
15106: LD_VAR 0 5
15110: IN
15111: OR
15112: PUSH
15113: LD_INT 45
15115: PUSH
15116: LD_VAR 0 5
15120: IN
15121: OR
15122: AND
15123: IFFALSE 15377
// begin hex := GetHexInfo ( x , y ) ;
15125: LD_ADDR_VAR 0 4
15129: PUSH
15130: LD_VAR 0 10
15134: PPUSH
15135: LD_VAR 0 11
15139: PPUSH
15140: CALL_OW 546
15144: ST_TO_ADDR
// if hex [ 1 ] then
15145: LD_VAR 0 4
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: IFFALSE 15157
// exit ;
15155: GO 15560
// height := hex [ 2 ] ;
15157: LD_ADDR_VAR 0 15
15161: PUSH
15162: LD_VAR 0 4
15166: PUSH
15167: LD_INT 2
15169: ARRAY
15170: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15171: LD_ADDR_VAR 0 14
15175: PUSH
15176: LD_INT 0
15178: PUSH
15179: LD_INT 2
15181: PUSH
15182: LD_INT 3
15184: PUSH
15185: LD_INT 5
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: ST_TO_ADDR
// for i in tmp do
15194: LD_ADDR_VAR 0 8
15198: PUSH
15199: LD_VAR 0 14
15203: PUSH
15204: FOR_IN
15205: IFFALSE 15375
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15207: LD_ADDR_VAR 0 9
15211: PUSH
15212: LD_VAR 0 10
15216: PPUSH
15217: LD_VAR 0 8
15221: PPUSH
15222: LD_INT 5
15224: PPUSH
15225: CALL_OW 272
15229: PUSH
15230: LD_VAR 0 11
15234: PPUSH
15235: LD_VAR 0 8
15239: PPUSH
15240: LD_INT 5
15242: PPUSH
15243: CALL_OW 273
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15252: LD_VAR 0 9
15256: PUSH
15257: LD_INT 1
15259: ARRAY
15260: PPUSH
15261: LD_VAR 0 9
15265: PUSH
15266: LD_INT 2
15268: ARRAY
15269: PPUSH
15270: CALL_OW 488
15274: IFFALSE 15373
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15276: LD_ADDR_VAR 0 4
15280: PUSH
15281: LD_VAR 0 9
15285: PUSH
15286: LD_INT 1
15288: ARRAY
15289: PPUSH
15290: LD_VAR 0 9
15294: PUSH
15295: LD_INT 2
15297: ARRAY
15298: PPUSH
15299: CALL_OW 546
15303: ST_TO_ADDR
// if hex [ 1 ] then
15304: LD_VAR 0 4
15308: PUSH
15309: LD_INT 1
15311: ARRAY
15312: IFFALSE 15316
// continue ;
15314: GO 15204
// h := hex [ 2 ] ;
15316: LD_ADDR_VAR 0 13
15320: PUSH
15321: LD_VAR 0 4
15325: PUSH
15326: LD_INT 2
15328: ARRAY
15329: ST_TO_ADDR
// if h + 7 < height then
15330: LD_VAR 0 13
15334: PUSH
15335: LD_INT 7
15337: PLUS
15338: PUSH
15339: LD_VAR 0 15
15343: LESS
15344: IFFALSE 15373
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15346: LD_ADDR_VAR 0 18
15350: PUSH
15351: LD_INT 7
15353: PUSH
15354: LD_INT 28
15356: PUSH
15357: LD_INT 45
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: PUSH
15365: LD_VAR 0 12
15369: ARRAY
15370: ST_TO_ADDR
// break ;
15371: GO 15375
// end ; end ; end ;
15373: GO 15204
15375: POP
15376: POP
// end ; if not weapon then
15377: LD_VAR 0 18
15381: NOT
15382: IFFALSE 15442
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15384: LD_ADDR_VAR 0 5
15388: PUSH
15389: LD_VAR 0 5
15393: PUSH
15394: LD_INT 11
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: LD_INT 49
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: DIFF
15408: ST_TO_ADDR
// if not list then
15409: LD_VAR 0 5
15413: NOT
15414: IFFALSE 15418
// exit ;
15416: GO 15560
// weapon := list [ rand ( 1 , list ) ] ;
15418: LD_ADDR_VAR 0 18
15422: PUSH
15423: LD_VAR 0 5
15427: PUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_VAR 0 5
15435: PPUSH
15436: CALL_OW 12
15440: ARRAY
15441: ST_TO_ADDR
// end ; if weapon then
15442: LD_VAR 0 18
15446: IFFALSE 15560
// begin tmp := CostOfWeapon ( weapon ) ;
15448: LD_ADDR_VAR 0 14
15452: PUSH
15453: LD_VAR 0 18
15457: PPUSH
15458: CALL_OW 451
15462: ST_TO_ADDR
// j := GetBase ( tower ) ;
15463: LD_ADDR_VAR 0 9
15467: PUSH
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 274
15477: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15478: LD_VAR 0 9
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: CALL_OW 275
15490: PUSH
15491: LD_VAR 0 14
15495: PUSH
15496: LD_INT 1
15498: ARRAY
15499: GREATEREQUAL
15500: PUSH
15501: LD_VAR 0 9
15505: PPUSH
15506: LD_INT 2
15508: PPUSH
15509: CALL_OW 275
15513: PUSH
15514: LD_VAR 0 14
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: GREATEREQUAL
15523: AND
15524: PUSH
15525: LD_VAR 0 9
15529: PPUSH
15530: LD_INT 3
15532: PPUSH
15533: CALL_OW 275
15537: PUSH
15538: LD_VAR 0 14
15542: PUSH
15543: LD_INT 3
15545: ARRAY
15546: GREATEREQUAL
15547: AND
15548: IFFALSE 15560
// result := weapon ;
15550: LD_ADDR_VAR 0 3
15554: PUSH
15555: LD_VAR 0 18
15559: ST_TO_ADDR
// end ; end ;
15560: LD_VAR 0 3
15564: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15565: LD_INT 0
15567: PPUSH
15568: PPUSH
// result := true ;
15569: LD_ADDR_VAR 0 3
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// if array1 = array2 then
15577: LD_VAR 0 1
15581: PUSH
15582: LD_VAR 0 2
15586: EQUAL
15587: IFFALSE 15647
// begin for i = 1 to array1 do
15589: LD_ADDR_VAR 0 4
15593: PUSH
15594: DOUBLE
15595: LD_INT 1
15597: DEC
15598: ST_TO_ADDR
15599: LD_VAR 0 1
15603: PUSH
15604: FOR_TO
15605: IFFALSE 15643
// if array1 [ i ] <> array2 [ i ] then
15607: LD_VAR 0 1
15611: PUSH
15612: LD_VAR 0 4
15616: ARRAY
15617: PUSH
15618: LD_VAR 0 2
15622: PUSH
15623: LD_VAR 0 4
15627: ARRAY
15628: NONEQUAL
15629: IFFALSE 15641
// begin result := false ;
15631: LD_ADDR_VAR 0 3
15635: PUSH
15636: LD_INT 0
15638: ST_TO_ADDR
// break ;
15639: GO 15643
// end ;
15641: GO 15604
15643: POP
15644: POP
// end else
15645: GO 15655
// result := false ;
15647: LD_ADDR_VAR 0 3
15651: PUSH
15652: LD_INT 0
15654: ST_TO_ADDR
// end ;
15655: LD_VAR 0 3
15659: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15660: LD_INT 0
15662: PPUSH
15663: PPUSH
15664: PPUSH
// pom := GetBase ( fac ) ;
15665: LD_ADDR_VAR 0 5
15669: PUSH
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 274
15679: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15680: LD_ADDR_VAR 0 4
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: LD_VAR 0 2
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 3
15710: ARRAY
15711: PPUSH
15712: LD_VAR 0 2
15716: PUSH
15717: LD_INT 4
15719: ARRAY
15720: PPUSH
15721: CALL_OW 449
15725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15726: LD_ADDR_VAR 0 3
15730: PUSH
15731: LD_VAR 0 5
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 275
15743: PUSH
15744: LD_VAR 0 4
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: GREATEREQUAL
15753: PUSH
15754: LD_VAR 0 5
15758: PPUSH
15759: LD_INT 2
15761: PPUSH
15762: CALL_OW 275
15766: PUSH
15767: LD_VAR 0 4
15771: PUSH
15772: LD_INT 2
15774: ARRAY
15775: GREATEREQUAL
15776: AND
15777: PUSH
15778: LD_VAR 0 5
15782: PPUSH
15783: LD_INT 3
15785: PPUSH
15786: CALL_OW 275
15790: PUSH
15791: LD_VAR 0 4
15795: PUSH
15796: LD_INT 3
15798: ARRAY
15799: GREATEREQUAL
15800: AND
15801: ST_TO_ADDR
// end ;
15802: LD_VAR 0 3
15806: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15807: LD_INT 0
15809: PPUSH
15810: PPUSH
15811: PPUSH
15812: PPUSH
// pom := GetBase ( building ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 274
15827: ST_TO_ADDR
// if not pom then
15828: LD_VAR 0 3
15832: NOT
15833: IFFALSE 15837
// exit ;
15835: GO 16007
// btype := GetBType ( building ) ;
15837: LD_ADDR_VAR 0 5
15841: PUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 266
15851: ST_TO_ADDR
// if btype = b_armoury then
15852: LD_VAR 0 5
15856: PUSH
15857: LD_INT 4
15859: EQUAL
15860: IFFALSE 15870
// btype := b_barracks ;
15862: LD_ADDR_VAR 0 5
15866: PUSH
15867: LD_INT 5
15869: ST_TO_ADDR
// if btype = b_depot then
15870: LD_VAR 0 5
15874: PUSH
15875: LD_INT 0
15877: EQUAL
15878: IFFALSE 15888
// btype := b_warehouse ;
15880: LD_ADDR_VAR 0 5
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// if btype = b_workshop then
15888: LD_VAR 0 5
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: IFFALSE 15906
// btype := b_factory ;
15898: LD_ADDR_VAR 0 5
15902: PUSH
15903: LD_INT 3
15905: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15906: LD_ADDR_VAR 0 4
15910: PUSH
15911: LD_VAR 0 5
15915: PPUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 248
15925: PPUSH
15926: CALL_OW 450
15930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15931: LD_ADDR_VAR 0 2
15935: PUSH
15936: LD_VAR 0 3
15940: PPUSH
15941: LD_INT 1
15943: PPUSH
15944: CALL_OW 275
15948: PUSH
15949: LD_VAR 0 4
15953: PUSH
15954: LD_INT 1
15956: ARRAY
15957: GREATEREQUAL
15958: PUSH
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 2
15966: PPUSH
15967: CALL_OW 275
15971: PUSH
15972: LD_VAR 0 4
15976: PUSH
15977: LD_INT 2
15979: ARRAY
15980: GREATEREQUAL
15981: AND
15982: PUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: LD_INT 3
15990: PPUSH
15991: CALL_OW 275
15995: PUSH
15996: LD_VAR 0 4
16000: PUSH
16001: LD_INT 3
16003: ARRAY
16004: GREATEREQUAL
16005: AND
16006: ST_TO_ADDR
// end ;
16007: LD_VAR 0 2
16011: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16012: LD_INT 0
16014: PPUSH
16015: PPUSH
16016: PPUSH
// pom := GetBase ( building ) ;
16017: LD_ADDR_VAR 0 4
16021: PUSH
16022: LD_VAR 0 1
16026: PPUSH
16027: CALL_OW 274
16031: ST_TO_ADDR
// if not pom then
16032: LD_VAR 0 4
16036: NOT
16037: IFFALSE 16041
// exit ;
16039: GO 16142
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16041: LD_ADDR_VAR 0 5
16045: PUSH
16046: LD_VAR 0 2
16050: PPUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 248
16060: PPUSH
16061: CALL_OW 450
16065: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16066: LD_ADDR_VAR 0 3
16070: PUSH
16071: LD_VAR 0 4
16075: PPUSH
16076: LD_INT 1
16078: PPUSH
16079: CALL_OW 275
16083: PUSH
16084: LD_VAR 0 5
16088: PUSH
16089: LD_INT 1
16091: ARRAY
16092: GREATEREQUAL
16093: PUSH
16094: LD_VAR 0 4
16098: PPUSH
16099: LD_INT 2
16101: PPUSH
16102: CALL_OW 275
16106: PUSH
16107: LD_VAR 0 5
16111: PUSH
16112: LD_INT 2
16114: ARRAY
16115: GREATEREQUAL
16116: AND
16117: PUSH
16118: LD_VAR 0 4
16122: PPUSH
16123: LD_INT 3
16125: PPUSH
16126: CALL_OW 275
16130: PUSH
16131: LD_VAR 0 5
16135: PUSH
16136: LD_INT 3
16138: ARRAY
16139: GREATEREQUAL
16140: AND
16141: ST_TO_ADDR
// end ;
16142: LD_VAR 0 3
16146: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
16147: LD_INT 0
16149: PPUSH
16150: PPUSH
16151: PPUSH
16152: PPUSH
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
// result := false ;
16159: LD_ADDR_VAR 0 6
16163: PUSH
16164: LD_INT 0
16166: ST_TO_ADDR
// if not base or not btype or not x or not y then
16167: LD_VAR 0 1
16171: NOT
16172: PUSH
16173: LD_VAR 0 2
16177: NOT
16178: OR
16179: PUSH
16180: LD_VAR 0 3
16184: NOT
16185: OR
16186: PUSH
16187: LD_VAR 0 4
16191: NOT
16192: OR
16193: IFFALSE 16197
// exit ;
16195: GO 16806
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
16197: LD_ADDR_VAR 0 12
16201: PUSH
16202: LD_VAR 0 2
16206: PPUSH
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_VAR 0 4
16216: PPUSH
16217: LD_VAR 0 5
16221: PPUSH
16222: LD_VAR 0 1
16226: PUSH
16227: LD_INT 1
16229: ARRAY
16230: PPUSH
16231: CALL_OW 248
16235: PPUSH
16236: LD_INT 0
16238: PPUSH
16239: CALL 17643 0 6
16243: ST_TO_ADDR
// if not hexes then
16244: LD_VAR 0 12
16248: NOT
16249: IFFALSE 16253
// exit ;
16251: GO 16806
// for i = 1 to hexes do
16253: LD_ADDR_VAR 0 7
16257: PUSH
16258: DOUBLE
16259: LD_INT 1
16261: DEC
16262: ST_TO_ADDR
16263: LD_VAR 0 12
16267: PUSH
16268: FOR_TO
16269: IFFALSE 16804
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16271: LD_ADDR_VAR 0 11
16275: PUSH
16276: LD_VAR 0 12
16280: PUSH
16281: LD_VAR 0 7
16285: ARRAY
16286: PUSH
16287: LD_INT 1
16289: ARRAY
16290: PPUSH
16291: LD_VAR 0 12
16295: PUSH
16296: LD_VAR 0 7
16300: ARRAY
16301: PUSH
16302: LD_INT 2
16304: ARRAY
16305: PPUSH
16306: CALL_OW 428
16310: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16311: LD_VAR 0 12
16315: PUSH
16316: LD_VAR 0 7
16320: ARRAY
16321: PUSH
16322: LD_INT 1
16324: ARRAY
16325: PPUSH
16326: LD_VAR 0 12
16330: PUSH
16331: LD_VAR 0 7
16335: ARRAY
16336: PUSH
16337: LD_INT 2
16339: ARRAY
16340: PPUSH
16341: CALL_OW 351
16345: PUSH
16346: LD_VAR 0 12
16350: PUSH
16351: LD_VAR 0 7
16355: ARRAY
16356: PUSH
16357: LD_INT 1
16359: ARRAY
16360: PPUSH
16361: LD_VAR 0 12
16365: PUSH
16366: LD_VAR 0 7
16370: ARRAY
16371: PUSH
16372: LD_INT 2
16374: ARRAY
16375: PPUSH
16376: CALL_OW 488
16380: NOT
16381: OR
16382: PUSH
16383: LD_VAR 0 11
16387: PPUSH
16388: CALL_OW 247
16392: PUSH
16393: LD_INT 3
16395: EQUAL
16396: OR
16397: IFFALSE 16403
// exit ;
16399: POP
16400: POP
16401: GO 16806
// if not tmp or not tmp in base then
16403: LD_VAR 0 11
16407: NOT
16408: PUSH
16409: LD_VAR 0 11
16413: PUSH
16414: LD_VAR 0 1
16418: IN
16419: NOT
16420: OR
16421: IFFALSE 16425
// continue ;
16423: GO 16268
// result := true ;
16425: LD_ADDR_VAR 0 6
16429: PUSH
16430: LD_INT 1
16432: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16433: LD_ADDR_VAR 0 15
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 22
16445: PUSH
16446: LD_VAR 0 11
16450: PPUSH
16451: CALL_OW 255
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 30
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 72
16496: ST_TO_ADDR
// if dep then
16497: LD_VAR 0 15
16501: IFFALSE 16637
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16503: LD_ADDR_VAR 0 14
16507: PUSH
16508: LD_VAR 0 15
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: CALL_OW 250
16521: PPUSH
16522: LD_VAR 0 15
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: PPUSH
16531: CALL_OW 254
16535: PPUSH
16536: LD_INT 5
16538: PPUSH
16539: CALL_OW 272
16543: PUSH
16544: LD_VAR 0 15
16548: PUSH
16549: LD_INT 1
16551: ARRAY
16552: PPUSH
16553: CALL_OW 251
16557: PPUSH
16558: LD_VAR 0 15
16562: PUSH
16563: LD_INT 1
16565: ARRAY
16566: PPUSH
16567: CALL_OW 254
16571: PPUSH
16572: LD_INT 5
16574: PPUSH
16575: CALL_OW 273
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16584: LD_VAR 0 14
16588: PUSH
16589: LD_INT 1
16591: ARRAY
16592: PPUSH
16593: LD_VAR 0 14
16597: PUSH
16598: LD_INT 2
16600: ARRAY
16601: PPUSH
16602: CALL_OW 488
16606: IFFALSE 16637
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16608: LD_VAR 0 11
16612: PPUSH
16613: LD_VAR 0 14
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: LD_VAR 0 14
16626: PUSH
16627: LD_INT 2
16629: ARRAY
16630: PPUSH
16631: CALL_OW 111
// continue ;
16635: GO 16268
// end ; end ; r := GetDir ( tmp ) ;
16637: LD_ADDR_VAR 0 13
16641: PUSH
16642: LD_VAR 0 11
16646: PPUSH
16647: CALL_OW 254
16651: ST_TO_ADDR
// if r = 5 then
16652: LD_VAR 0 13
16656: PUSH
16657: LD_INT 5
16659: EQUAL
16660: IFFALSE 16670
// r := 0 ;
16662: LD_ADDR_VAR 0 13
16666: PUSH
16667: LD_INT 0
16669: ST_TO_ADDR
// for j = r to 5 do
16670: LD_ADDR_VAR 0 8
16674: PUSH
16675: DOUBLE
16676: LD_VAR 0 13
16680: DEC
16681: ST_TO_ADDR
16682: LD_INT 5
16684: PUSH
16685: FOR_TO
16686: IFFALSE 16800
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16688: LD_ADDR_VAR 0 9
16692: PUSH
16693: LD_VAR 0 11
16697: PPUSH
16698: CALL_OW 250
16702: PPUSH
16703: LD_VAR 0 8
16707: PPUSH
16708: LD_INT 2
16710: PPUSH
16711: CALL_OW 272
16715: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16716: LD_ADDR_VAR 0 10
16720: PUSH
16721: LD_VAR 0 11
16725: PPUSH
16726: CALL_OW 251
16730: PPUSH
16731: LD_VAR 0 8
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 273
16743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16744: LD_VAR 0 9
16748: PPUSH
16749: LD_VAR 0 10
16753: PPUSH
16754: CALL_OW 488
16758: PUSH
16759: LD_VAR 0 9
16763: PPUSH
16764: LD_VAR 0 10
16768: PPUSH
16769: CALL_OW 428
16773: NOT
16774: AND
16775: IFFALSE 16798
// begin ComMoveXY ( tmp , _x , _y ) ;
16777: LD_VAR 0 11
16781: PPUSH
16782: LD_VAR 0 9
16786: PPUSH
16787: LD_VAR 0 10
16791: PPUSH
16792: CALL_OW 111
// break ;
16796: GO 16800
// end ; end ;
16798: GO 16685
16800: POP
16801: POP
// end ;
16802: GO 16268
16804: POP
16805: POP
// end ;
16806: LD_VAR 0 6
16810: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
16811: LD_INT 0
16813: PPUSH
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// result := false ;
16823: LD_ADDR_VAR 0 6
16827: PUSH
16828: LD_INT 0
16830: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16831: LD_VAR 0 1
16835: NOT
16836: PUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 266
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: IN
16857: NOT
16858: OR
16859: PUSH
16860: LD_VAR 0 2
16864: NOT
16865: OR
16866: PUSH
16867: LD_VAR 0 5
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: LD_INT 1
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 4
16886: PUSH
16887: LD_INT 5
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: IN
16898: NOT
16899: OR
16900: PUSH
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_VAR 0 4
16910: PPUSH
16911: CALL_OW 488
16915: NOT
16916: OR
16917: IFFALSE 16921
// exit ;
16919: GO 17638
// pom := GetBase ( depot ) ;
16921: LD_ADDR_VAR 0 10
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 274
16935: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16936: LD_ADDR_VAR 0 11
16940: PUSH
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 248
16955: PPUSH
16956: CALL_OW 450
16960: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16961: LD_VAR 0 10
16965: PPUSH
16966: LD_INT 1
16968: PPUSH
16969: CALL_OW 275
16973: PUSH
16974: LD_VAR 0 11
16978: PUSH
16979: LD_INT 1
16981: ARRAY
16982: GREATEREQUAL
16983: PUSH
16984: LD_VAR 0 10
16988: PPUSH
16989: LD_INT 2
16991: PPUSH
16992: CALL_OW 275
16996: PUSH
16997: LD_VAR 0 11
17001: PUSH
17002: LD_INT 2
17004: ARRAY
17005: GREATEREQUAL
17006: AND
17007: PUSH
17008: LD_VAR 0 10
17012: PPUSH
17013: LD_INT 3
17015: PPUSH
17016: CALL_OW 275
17020: PUSH
17021: LD_VAR 0 11
17025: PUSH
17026: LD_INT 3
17028: ARRAY
17029: GREATEREQUAL
17030: AND
17031: NOT
17032: IFFALSE 17036
// exit ;
17034: GO 17638
// if GetBType ( depot ) = b_depot then
17036: LD_VAR 0 1
17040: PPUSH
17041: CALL_OW 266
17045: PUSH
17046: LD_INT 0
17048: EQUAL
17049: IFFALSE 17061
// dist := 28 else
17051: LD_ADDR_VAR 0 14
17055: PUSH
17056: LD_INT 28
17058: ST_TO_ADDR
17059: GO 17069
// dist := 36 ;
17061: LD_ADDR_VAR 0 14
17065: PUSH
17066: LD_INT 36
17068: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17069: LD_VAR 0 1
17073: PPUSH
17074: LD_VAR 0 3
17078: PPUSH
17079: LD_VAR 0 4
17083: PPUSH
17084: CALL_OW 297
17088: PUSH
17089: LD_VAR 0 14
17093: GREATER
17094: IFFALSE 17098
// exit ;
17096: GO 17638
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17098: LD_ADDR_VAR 0 12
17102: PUSH
17103: LD_VAR 0 2
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: LD_VAR 0 4
17117: PPUSH
17118: LD_VAR 0 5
17122: PPUSH
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 248
17132: PPUSH
17133: LD_INT 0
17135: PPUSH
17136: CALL 17643 0 6
17140: ST_TO_ADDR
// if not hexes then
17141: LD_VAR 0 12
17145: NOT
17146: IFFALSE 17150
// exit ;
17148: GO 17638
// hex := GetHexInfo ( x , y ) ;
17150: LD_ADDR_VAR 0 15
17154: PUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_VAR 0 4
17164: PPUSH
17165: CALL_OW 546
17169: ST_TO_ADDR
// if hex [ 1 ] then
17170: LD_VAR 0 15
17174: PUSH
17175: LD_INT 1
17177: ARRAY
17178: IFFALSE 17182
// exit ;
17180: GO 17638
// height := hex [ 2 ] ;
17182: LD_ADDR_VAR 0 13
17186: PUSH
17187: LD_VAR 0 15
17191: PUSH
17192: LD_INT 2
17194: ARRAY
17195: ST_TO_ADDR
// for i = 1 to hexes do
17196: LD_ADDR_VAR 0 7
17200: PUSH
17201: DOUBLE
17202: LD_INT 1
17204: DEC
17205: ST_TO_ADDR
17206: LD_VAR 0 12
17210: PUSH
17211: FOR_TO
17212: IFFALSE 17542
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17214: LD_VAR 0 12
17218: PUSH
17219: LD_VAR 0 7
17223: ARRAY
17224: PUSH
17225: LD_INT 1
17227: ARRAY
17228: PPUSH
17229: LD_VAR 0 12
17233: PUSH
17234: LD_VAR 0 7
17238: ARRAY
17239: PUSH
17240: LD_INT 2
17242: ARRAY
17243: PPUSH
17244: CALL_OW 488
17248: NOT
17249: PUSH
17250: LD_VAR 0 12
17254: PUSH
17255: LD_VAR 0 7
17259: ARRAY
17260: PUSH
17261: LD_INT 1
17263: ARRAY
17264: PPUSH
17265: LD_VAR 0 12
17269: PUSH
17270: LD_VAR 0 7
17274: ARRAY
17275: PUSH
17276: LD_INT 2
17278: ARRAY
17279: PPUSH
17280: CALL_OW 428
17284: PUSH
17285: LD_INT 0
17287: GREATER
17288: OR
17289: PUSH
17290: LD_VAR 0 12
17294: PUSH
17295: LD_VAR 0 7
17299: ARRAY
17300: PUSH
17301: LD_INT 1
17303: ARRAY
17304: PPUSH
17305: LD_VAR 0 12
17309: PUSH
17310: LD_VAR 0 7
17314: ARRAY
17315: PUSH
17316: LD_INT 2
17318: ARRAY
17319: PPUSH
17320: CALL_OW 351
17324: OR
17325: IFFALSE 17331
// exit ;
17327: POP
17328: POP
17329: GO 17638
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17331: LD_ADDR_VAR 0 8
17335: PUSH
17336: LD_VAR 0 12
17340: PUSH
17341: LD_VAR 0 7
17345: ARRAY
17346: PUSH
17347: LD_INT 1
17349: ARRAY
17350: PPUSH
17351: LD_VAR 0 12
17355: PUSH
17356: LD_VAR 0 7
17360: ARRAY
17361: PUSH
17362: LD_INT 2
17364: ARRAY
17365: PPUSH
17366: CALL_OW 546
17370: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17371: LD_VAR 0 8
17375: PUSH
17376: LD_INT 1
17378: ARRAY
17379: PUSH
17380: LD_VAR 0 8
17384: PUSH
17385: LD_INT 2
17387: ARRAY
17388: PUSH
17389: LD_VAR 0 13
17393: PUSH
17394: LD_INT 2
17396: PLUS
17397: GREATER
17398: OR
17399: PUSH
17400: LD_VAR 0 8
17404: PUSH
17405: LD_INT 2
17407: ARRAY
17408: PUSH
17409: LD_VAR 0 13
17413: PUSH
17414: LD_INT 2
17416: MINUS
17417: LESS
17418: OR
17419: PUSH
17420: LD_VAR 0 8
17424: PUSH
17425: LD_INT 3
17427: ARRAY
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: LD_INT 8
17434: PUSH
17435: LD_INT 9
17437: PUSH
17438: LD_INT 10
17440: PUSH
17441: LD_INT 11
17443: PUSH
17444: LD_INT 12
17446: PUSH
17447: LD_INT 13
17449: PUSH
17450: LD_INT 16
17452: PUSH
17453: LD_INT 17
17455: PUSH
17456: LD_INT 18
17458: PUSH
17459: LD_INT 19
17461: PUSH
17462: LD_INT 20
17464: PUSH
17465: LD_INT 21
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: IN
17483: NOT
17484: OR
17485: PUSH
17486: LD_VAR 0 8
17490: PUSH
17491: LD_INT 5
17493: ARRAY
17494: NOT
17495: OR
17496: PUSH
17497: LD_VAR 0 8
17501: PUSH
17502: LD_INT 6
17504: ARRAY
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: LD_INT 7
17514: PUSH
17515: LD_INT 9
17517: PUSH
17518: LD_INT 10
17520: PUSH
17521: LD_INT 11
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: IN
17532: NOT
17533: OR
17534: IFFALSE 17540
// exit ;
17536: POP
17537: POP
17538: GO 17638
// end ;
17540: GO 17211
17542: POP
17543: POP
// side := GetSide ( depot ) ;
17544: LD_ADDR_VAR 0 9
17548: PUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 255
17558: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17559: LD_VAR 0 9
17563: PPUSH
17564: LD_VAR 0 3
17568: PPUSH
17569: LD_VAR 0 4
17573: PPUSH
17574: LD_INT 20
17576: PPUSH
17577: CALL 10292 0 4
17581: PUSH
17582: LD_INT 4
17584: ARRAY
17585: IFFALSE 17589
// exit ;
17587: GO 17638
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17589: LD_VAR 0 2
17593: PUSH
17594: LD_INT 29
17596: PUSH
17597: LD_INT 30
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: IN
17604: PUSH
17605: LD_VAR 0 3
17609: PPUSH
17610: LD_VAR 0 4
17614: PPUSH
17615: LD_VAR 0 9
17619: PPUSH
17620: CALL_OW 440
17624: NOT
17625: AND
17626: IFFALSE 17630
// exit ;
17628: GO 17638
// result := true ;
17630: LD_ADDR_VAR 0 6
17634: PUSH
17635: LD_INT 1
17637: ST_TO_ADDR
// end ;
17638: LD_VAR 0 6
17642: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
17643: LD_INT 0
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
// result = [ ] ;
17703: LD_ADDR_VAR 0 7
17707: PUSH
17708: EMPTY
17709: ST_TO_ADDR
// temp_list = [ ] ;
17710: LD_ADDR_VAR 0 9
17714: PUSH
17715: EMPTY
17716: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17717: LD_VAR 0 4
17721: PUSH
17722: LD_INT 0
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 3
17733: PUSH
17734: LD_INT 4
17736: PUSH
17737: LD_INT 5
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: IN
17748: NOT
17749: PUSH
17750: LD_VAR 0 1
17754: PUSH
17755: LD_INT 0
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: IN
17765: PUSH
17766: LD_VAR 0 5
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 3
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: IN
17785: NOT
17786: AND
17787: OR
17788: IFFALSE 17792
// exit ;
17790: GO 36183
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17792: LD_VAR 0 1
17796: PUSH
17797: LD_INT 6
17799: PUSH
17800: LD_INT 7
17802: PUSH
17803: LD_INT 8
17805: PUSH
17806: LD_INT 13
17808: PUSH
17809: LD_INT 12
17811: PUSH
17812: LD_INT 15
17814: PUSH
17815: LD_INT 11
17817: PUSH
17818: LD_INT 14
17820: PUSH
17821: LD_INT 10
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: IN
17835: IFFALSE 17845
// btype = b_lab ;
17837: LD_ADDR_VAR 0 1
17841: PUSH
17842: LD_INT 6
17844: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17845: LD_VAR 0 6
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: IN
17864: NOT
17865: PUSH
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 0
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: LD_INT 6
17885: PUSH
17886: LD_INT 36
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: LD_INT 5
17894: PUSH
17895: LD_INT 31
17897: PUSH
17898: LD_INT 32
17900: PUSH
17901: LD_INT 33
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: IN
17917: NOT
17918: PUSH
17919: LD_VAR 0 6
17923: PUSH
17924: LD_INT 1
17926: EQUAL
17927: AND
17928: OR
17929: PUSH
17930: LD_VAR 0 1
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: LD_INT 3
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: IN
17945: NOT
17946: PUSH
17947: LD_VAR 0 6
17951: PUSH
17952: LD_INT 2
17954: EQUAL
17955: AND
17956: OR
17957: IFFALSE 17967
// mode = 0 ;
17959: LD_ADDR_VAR 0 6
17963: PUSH
17964: LD_INT 0
17966: ST_TO_ADDR
// case mode of 0 :
17967: LD_VAR 0 6
17971: PUSH
17972: LD_INT 0
17974: DOUBLE
17975: EQUAL
17976: IFTRUE 17980
17978: GO 29433
17980: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17981: LD_ADDR_VAR 0 11
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 0
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: NEG
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: LD_INT 3
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18174: LD_ADDR_VAR 0 12
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: LD_INT 1
18194: NEG
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: NEG
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 2
18297: NEG
18298: PUSH
18299: LD_INT 0
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: LD_INT 1
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: NEG
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 3
18331: NEG
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 3
18342: NEG
18343: PUSH
18344: LD_INT 1
18346: NEG
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18370: LD_ADDR_VAR 0 13
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: NEG
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 1
18451: NEG
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: NEG
18518: PUSH
18519: LD_INT 3
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 3
18529: NEG
18530: PUSH
18531: LD_INT 2
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 3
18541: NEG
18542: PUSH
18543: LD_INT 3
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18569: LD_ADDR_VAR 0 14
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 1
18627: NEG
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: LD_INT 2
18654: NEG
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: LD_INT 2
18665: NEG
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: LD_INT 1
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 1
18715: NEG
18716: PUSH
18717: LD_INT 3
18719: NEG
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: LD_INT 3
18730: NEG
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18765: LD_ADDR_VAR 0 15
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: NEG
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 2
18899: NEG
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 2
18911: PUSH
18912: LD_INT 1
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 3
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 3
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18958: LD_ADDR_VAR 0 16
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: LD_INT 1
19031: NEG
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 1
19039: NEG
19040: PUSH
19041: LD_INT 2
19043: NEG
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: NEG
19094: PUSH
19095: LD_INT 2
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 3
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 3
19115: PUSH
19116: LD_INT 3
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: LD_INT 3
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19151: LD_ADDR_VAR 0 17
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: NEG
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 0
19244: PUSH
19245: LD_INT 2
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: LD_INT 1
19258: NEG
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 0
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: NEG
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: NEG
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: NEG
19351: PUSH
19352: LD_INT 2
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19381: LD_ADDR_VAR 0 18
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 1
19450: NEG
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: LD_INT 2
19466: NEG
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 1
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: LD_INT 1
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: NEG
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 2
19580: NEG
19581: PUSH
19582: LD_INT 2
19584: NEG
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19611: LD_ADDR_VAR 0 19
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: NEG
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 1
19692: NEG
19693: PUSH
19694: LD_INT 2
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: LD_INT 2
19707: NEG
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 2
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: NEG
19788: PUSH
19789: LD_INT 0
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: NEG
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 2
19810: NEG
19811: PUSH
19812: LD_INT 2
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19841: LD_ADDR_VAR 0 20
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 0
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 1
19922: NEG
19923: PUSH
19924: LD_INT 2
19926: NEG
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 0
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 0
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: LD_INT 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 2
20017: NEG
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: NEG
20029: PUSH
20030: LD_INT 1
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: NEG
20041: PUSH
20042: LD_INT 2
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20071: LD_ADDR_VAR 0 21
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: LD_INT 2
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: LD_INT 2
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: LD_INT 1
20178: NEG
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 0
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: NEG
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: NEG
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: NEG
20271: PUSH
20272: LD_INT 2
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20301: LD_ADDR_VAR 0 22
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: LD_INT 1
20374: NEG
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: LD_INT 2
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: LD_INT 2
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: NEG
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20531: LD_ADDR_VAR 0 23
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: LD_INT 2
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: LD_INT 1
20638: NEG
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 2
20707: NEG
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 2
20730: NEG
20731: PUSH
20732: LD_INT 2
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: LD_INT 3
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: LD_INT 3
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20811: LD_ADDR_VAR 0 24
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: NEG
20881: PUSH
20882: LD_INT 1
20884: NEG
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: LD_INT 2
20896: NEG
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: LD_INT 2
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: LD_INT 1
20918: NEG
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 2
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: NEG
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 2
20998: NEG
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 2
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 3
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 3
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21087: LD_ADDR_VAR 0 25
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: LD_INT 1
21160: NEG
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: LD_INT 2
21172: NEG
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 0
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 2
21263: NEG
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 3
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 3
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 3
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 3
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21361: LD_ADDR_VAR 0 26
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: LD_INT 1
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: NEG
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: LD_INT 2
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: LD_INT 2
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 2
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: NEG
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 2
21537: NEG
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: NEG
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: LD_INT 2
21564: NEG
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 3
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21637: LD_ADDR_VAR 0 27
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: NEG
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 2
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 2
21824: NEG
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: LD_INT 2
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 3
21870: NEG
21871: PUSH
21872: LD_INT 1
21874: NEG
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 3
21882: NEG
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21917: LD_ADDR_VAR 0 28
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 0
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: NEG
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: LD_INT 2
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: LD_INT 2
22013: NEG
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: LD_INT 1
22024: NEG
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: NEG
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 2
22116: NEG
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 2
22128: NEG
22129: PUSH
22130: LD_INT 3
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 3
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 3
22152: NEG
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 3
22164: NEG
22165: PUSH
22166: LD_INT 2
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22199: LD_ADDR_VAR 0 29
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 2
22377: NEG
22378: PUSH
22379: LD_INT 2
22381: NEG
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: LD_INT 3
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 3
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: LD_INT 3
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 3
22443: NEG
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22478: LD_ADDR_VAR 0 30
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 0
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 1
22536: NEG
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 1
22547: NEG
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: NEG
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: LD_INT 2
22574: NEG
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 2
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 2
22644: NEG
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 2
22655: NEG
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 3
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 3
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 3
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 3
22721: NEG
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22756: LD_ADDR_VAR 0 31
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: LD_INT 0
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: NEG
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: LD_INT 2
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 2
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: NEG
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 2
22945: NEG
22946: PUSH
22947: LD_INT 3
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 3
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 3
22999: NEG
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23034: LD_ADDR_VAR 0 32
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: LD_INT 2
23119: NEG
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: LD_INT 3
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 2
23238: NEG
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 2
23256: PUSH
23257: LD_INT 3
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: NEG
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23312: LD_ADDR_VAR 0 33
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 2
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 2
23502: NEG
23503: PUSH
23504: LD_INT 3
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 3
23556: NEG
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23591: LD_ADDR_VAR 0 34
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: NEG
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: LD_INT 2
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 2
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 2
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 2
23747: NEG
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 2
23758: NEG
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: NEG
23771: PUSH
23772: LD_INT 2
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 3
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 3
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 3
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 3
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23871: LD_ADDR_VAR 0 35
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 2
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 2
23962: NEG
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23983: LD_ADDR_VAR 0 36
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: NEG
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: NEG
24065: PUSH
24066: LD_INT 2
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24095: LD_ADDR_VAR 0 37
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24207: LD_ADDR_VAR 0 38
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 0
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: NEG
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24319: LD_ADDR_VAR 0 39
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: LD_INT 1
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: LD_INT 2
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24431: LD_ADDR_VAR 0 40
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24543: LD_ADDR_VAR 0 41
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: NEG
24722: PUSH
24723: LD_INT 2
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 2
24733: NEG
24734: PUSH
24735: LD_INT 3
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 3
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 3
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: PUSH
24797: LD_INT 3
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 2
24806: NEG
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 3
24817: NEG
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 3
24828: NEG
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 3
24840: NEG
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 3
24852: NEG
24853: PUSH
24854: LD_INT 3
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24893: LD_ADDR_VAR 0 42
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 2
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: LD_INT 2
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 2
25083: NEG
25084: PUSH
25085: LD_INT 3
25087: NEG
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 3
25099: NEG
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 3
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 3
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 3
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 3
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: LD_INT 3
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 3
25190: NEG
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 3
25202: NEG
25203: PUSH
25204: LD_INT 3
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25243: LD_ADDR_VAR 0 43
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: LD_INT 2
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 2
25420: NEG
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: LD_INT 3
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: LD_INT 3
25447: NEG
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 2
25528: NEG
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 3
25539: NEG
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 3
25550: NEG
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25591: LD_ADDR_VAR 0 44
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 2
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: NEG
25782: PUSH
25783: LD_INT 3
25785: NEG
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 3
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 3
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 3
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 3
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 3
25865: NEG
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: NEG
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 3
25888: NEG
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 3
25900: NEG
25901: PUSH
25902: LD_INT 3
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25941: LD_ADDR_VAR 0 45
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: LD_INT 2
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 2
26131: NEG
26132: PUSH
26133: LD_INT 3
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 3
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 3
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 3
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 3
26187: PUSH
26188: LD_INT 3
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 3
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: LD_INT 3
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 3
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 3
26238: NEG
26239: PUSH
26240: LD_INT 2
26242: NEG
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 3
26250: NEG
26251: PUSH
26252: LD_INT 3
26254: NEG
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26291: LD_ADDR_VAR 0 46
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 3
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: LD_INT 3
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 3
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: LD_INT 2
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 3
26587: NEG
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 3
26598: NEG
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26639: LD_ADDR_VAR 0 47
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: LD_INT 2
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26790: LD_ADDR_VAR 0 48
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 2
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26937: LD_ADDR_VAR 0 49
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27081: LD_ADDR_VAR 0 50
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27225: LD_ADDR_VAR 0 51
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27372: LD_ADDR_VAR 0 52
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 2
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27523: LD_ADDR_VAR 0 53
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: LD_INT 2
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: NEG
27723: PUSH
27724: LD_INT 2
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27753: LD_ADDR_VAR 0 54
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 1
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 1
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 2
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: NEG
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: NEG
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: NEG
27953: PUSH
27954: LD_INT 2
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27983: LD_ADDR_VAR 0 55
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: NEG
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: NEG
28183: PUSH
28184: LD_INT 2
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28213: LD_ADDR_VAR 0 56
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 1
28286: NEG
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: LD_INT 2
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 2
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: NEG
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: NEG
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28443: LD_ADDR_VAR 0 57
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: LD_INT 2
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: LD_INT 2
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 2
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: NEG
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: NEG
28643: PUSH
28644: LD_INT 2
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28673: LD_ADDR_VAR 0 58
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: LD_INT 2
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: NEG
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: LD_INT 2
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28903: LD_ADDR_VAR 0 59
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28991: LD_ADDR_VAR 0 60
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29079: LD_ADDR_VAR 0 61
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29167: LD_ADDR_VAR 0 62
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29255: LD_ADDR_VAR 0 63
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: NEG
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29343: LD_ADDR_VAR 0 64
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: ST_TO_ADDR
// end ; 1 :
29431: GO 35328
29433: LD_INT 1
29435: DOUBLE
29436: EQUAL
29437: IFTRUE 29441
29439: GO 32064
29441: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29442: LD_ADDR_VAR 0 11
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 3
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: LD_INT 3
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: LD_INT 2
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29486: LD_ADDR_VAR 0 12
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29527: LD_ADDR_VAR 0 13
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 3
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29567: LD_ADDR_VAR 0 14
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29608: LD_ADDR_VAR 0 15
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 3
29626: NEG
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 3
29637: NEG
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29652: LD_ADDR_VAR 0 16
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 3
29671: NEG
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: NEG
29684: PUSH
29685: LD_INT 3
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29698: LD_ADDR_VAR 0 17
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: LD_INT 3
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29742: LD_ADDR_VAR 0 18
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29783: LD_ADDR_VAR 0 19
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 3
29800: PUSH
29801: LD_INT 3
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 3
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29823: LD_ADDR_VAR 0 20
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29864: LD_ADDR_VAR 0 21
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: NEG
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 3
29893: NEG
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29908: LD_ADDR_VAR 0 22
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: LD_INT 3
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 3
29927: NEG
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: LD_INT 3
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29954: LD_ADDR_VAR 0 23
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 4
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 3
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29998: LD_ADDR_VAR 0 24
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 4
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30039: LD_ADDR_VAR 0 25
30043: PUSH
30044: LD_INT 3
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 4
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 4
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30079: LD_ADDR_VAR 0 26
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: LD_INT 4
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30120: LD_ADDR_VAR 0 27
30124: PUSH
30125: LD_INT 3
30127: NEG
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: NEG
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 4
30149: NEG
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30164: LD_ADDR_VAR 0 28
30168: PUSH
30169: LD_INT 3
30171: NEG
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: LD_INT 4
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 4
30195: NEG
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30210: LD_ADDR_VAR 0 29
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: LD_INT 3
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 3
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 4
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 4
30266: NEG
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: PUSH
30275: LD_INT 3
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: LD_INT 5
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 5
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: LD_INT 4
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: LD_INT 6
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 6
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 5
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30365: LD_ADDR_VAR 0 30
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 4
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 4
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 5
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 5
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 5
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 6
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 6
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30508: LD_ADDR_VAR 0 31
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 3
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 4
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 4
30555: PUSH
30556: LD_INT 4
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 5
30575: PUSH
30576: LD_INT 4
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 5
30585: PUSH
30586: LD_INT 5
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: LD_INT 5
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 6
30605: PUSH
30606: LD_INT 5
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 6
30615: PUSH
30616: LD_INT 6
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 5
30625: PUSH
30626: LD_INT 6
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30647: LD_ADDR_VAR 0 32
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 3
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 4
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: LD_INT 4
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: LD_INT 5
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: LD_INT 4
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: LD_INT 6
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: LD_INT 6
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: LD_INT 5
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30790: LD_ADDR_VAR 0 33
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 3
30808: NEG
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 3
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 4
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 4
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 4
30865: NEG
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 5
30876: NEG
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 5
30899: NEG
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 6
30910: NEG
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 6
30921: NEG
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30945: LD_ADDR_VAR 0 34
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 2
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: NEG
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: NEG
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 4
31012: NEG
31013: PUSH
31014: LD_INT 4
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 4
31024: NEG
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 5
31036: NEG
31037: PUSH
31038: LD_INT 4
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 5
31048: NEG
31049: PUSH
31050: LD_INT 5
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 5
31060: NEG
31061: PUSH
31062: LD_INT 6
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 6
31072: NEG
31073: PUSH
31074: LD_INT 5
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 6
31084: NEG
31085: PUSH
31086: LD_INT 6
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31108: LD_ADDR_VAR 0 41
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31152: LD_ADDR_VAR 0 42
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31193: LD_ADDR_VAR 0 43
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 3
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31233: LD_ADDR_VAR 0 44
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: LD_INT 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31274: LD_ADDR_VAR 0 45
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: NEG
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 3
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31318: LD_ADDR_VAR 0 46
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31364: LD_ADDR_VAR 0 47
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31397: LD_ADDR_VAR 0 48
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 2
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31428: LD_ADDR_VAR 0 49
31432: PUSH
31433: LD_INT 3
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31457: LD_ADDR_VAR 0 50
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31486: LD_ADDR_VAR 0 51
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31517: LD_ADDR_VAR 0 52
31521: PUSH
31522: LD_INT 3
31524: NEG
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: NEG
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31550: LD_ADDR_VAR 0 53
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: LD_INT 3
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31594: LD_ADDR_VAR 0 54
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31635: LD_ADDR_VAR 0 55
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: LD_INT 3
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31675: LD_ADDR_VAR 0 56
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 3
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: LD_INT 3
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31716: LD_ADDR_VAR 0 57
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31760: LD_ADDR_VAR 0 58
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: LD_INT 3
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31806: LD_ADDR_VAR 0 59
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: LD_INT 2
31817: NEG
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31850: LD_ADDR_VAR 0 60
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31891: LD_ADDR_VAR 0 61
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31931: LD_ADDR_VAR 0 62
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31972: LD_ADDR_VAR 0 63
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: NEG
32002: PUSH
32003: LD_INT 1
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32016: LD_ADDR_VAR 0 64
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// end ; 2 :
32062: GO 35328
32064: LD_INT 2
32066: DOUBLE
32067: EQUAL
32068: IFTRUE 32072
32070: GO 35327
32072: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32073: LD_ADDR_VAR 0 29
32077: PUSH
32078: LD_INT 4
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 5
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 5
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 2
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 5
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 3
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 4
32193: PUSH
32194: LD_INT 3
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 2
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: LD_INT 4
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 5
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: PUSH
32315: LD_INT 4
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: NEG
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 5
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: NEG
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 3
32356: NEG
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 3
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 4
32412: NEG
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 4
32423: NEG
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 4
32435: NEG
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 4
32458: NEG
32459: PUSH
32460: LD_INT 4
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 4
32470: NEG
32471: PUSH
32472: LD_INT 5
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: LD_INT 4
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 5
32518: NEG
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 5
32530: NEG
32531: PUSH
32532: LD_INT 5
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: LD_INT 5
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 5
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32611: LD_ADDR_VAR 0 30
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 4
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 4
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 5
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: LD_INT 5
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 4
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: LD_INT 4
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 3
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 5
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 4
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 4
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 4
32801: NEG
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 4
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 3
32824: NEG
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 3
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 4
32846: NEG
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 5
32857: NEG
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 5
32868: NEG
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 5
32880: NEG
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 3
32903: NEG
32904: PUSH
32905: LD_INT 3
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 3
32915: NEG
32916: PUSH
32917: LD_INT 4
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 4
32963: NEG
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 4
32975: NEG
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: LD_INT 4
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 4
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 4
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 5
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 3
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 4
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: LD_INT 5
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: NEG
33102: PUSH
33103: LD_INT 5
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33158: LD_ADDR_VAR 0 31
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 4
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 5
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 4
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: NEG
33248: PUSH
33249: LD_INT 3
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 3
33258: NEG
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 3
33269: NEG
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 4
33314: NEG
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 4
33325: NEG
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 4
33337: NEG
33338: PUSH
33339: LD_INT 2
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 4
33360: NEG
33361: PUSH
33362: LD_INT 4
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 4
33372: NEG
33373: PUSH
33374: LD_INT 5
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 3
33384: NEG
33385: PUSH
33386: LD_INT 4
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 3
33396: NEG
33397: PUSH
33398: LD_INT 3
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 4
33408: NEG
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 5
33420: NEG
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 5
33432: NEG
33433: PUSH
33434: LD_INT 5
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 3
33444: NEG
33445: PUSH
33446: LD_INT 5
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 5
33456: NEG
33457: PUSH
33458: LD_INT 3
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: LD_INT 3
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: LD_INT 3
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: LD_INT 2
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 4
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: NEG
33559: PUSH
33560: LD_INT 4
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 4
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 5
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 5
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 4
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 3
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 3
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 5
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33708: LD_ADDR_VAR 0 32
33712: PUSH
33713: LD_INT 4
33715: NEG
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 4
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: NEG
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 4
33760: NEG
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 5
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 5
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 5
33794: NEG
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: NEG
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 3
33817: NEG
33818: PUSH
33819: LD_INT 3
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 3
33829: NEG
33830: PUSH
33831: LD_INT 4
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: LD_INT 3
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 4
33877: NEG
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 4
33889: NEG
33890: PUSH
33891: LD_INT 4
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: LD_INT 4
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 4
33913: NEG
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 4
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 5
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 4
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 3
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: LD_INT 4
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 5
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: LD_INT 5
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 4
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 3
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 4
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: LD_INT 4
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 4
34130: PUSH
34131: LD_INT 3
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 5
34140: PUSH
34141: LD_INT 4
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 5
34150: PUSH
34151: LD_INT 5
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 4
34160: PUSH
34161: LD_INT 5
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 5
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 3
34200: PUSH
34201: LD_INT 5
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34255: LD_ADDR_VAR 0 33
34259: PUSH
34260: LD_INT 4
34262: NEG
34263: PUSH
34264: LD_INT 4
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 4
34274: NEG
34275: PUSH
34276: LD_INT 5
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: LD_INT 4
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: LD_INT 3
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 4
34310: NEG
34311: PUSH
34312: LD_INT 3
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 5
34322: NEG
34323: PUSH
34324: LD_INT 4
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 5
34334: NEG
34335: PUSH
34336: LD_INT 5
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 3
34346: NEG
34347: PUSH
34348: LD_INT 5
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 5
34358: NEG
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: LD_INT 3
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 3
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 3
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 4
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: LD_INT 4
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 4
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 4
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 5
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 5
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: LD_INT 2
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 5
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: LD_INT 3
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 4
34585: PUSH
34586: LD_INT 3
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: LD_INT 4
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: LD_INT 4
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 3
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 4
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 4
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 4
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 5
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 5
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 5
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34793: LD_ADDR_VAR 0 34
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 4
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 5
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 4
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 3
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 3
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 4
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 5
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: LD_INT 3
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: LD_INT 5
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 4
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 3
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 4
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: LD_INT 4
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 5
35015: PUSH
35016: LD_INT 4
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: LD_INT 5
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 4
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: LD_INT 4
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: LD_INT 3
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 3
35075: PUSH
35076: LD_INT 5
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 3
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 4
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: LD_INT 4
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 4
35178: NEG
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 4
35189: NEG
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 3
35201: NEG
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 4
35223: NEG
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 5
35234: NEG
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 5
35245: NEG
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 5
35257: NEG
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 3
35269: NEG
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
// end ; end ;
35325: GO 35328
35327: POP
// case btype of b_depot , b_warehouse :
35328: LD_VAR 0 1
35332: PUSH
35333: LD_INT 0
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35347
35339: LD_INT 1
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35347
35345: GO 35548
35347: POP
// case nation of nation_american :
35348: LD_VAR 0 5
35352: PUSH
35353: LD_INT 1
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35361
35359: GO 35417
35361: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
35362: LD_ADDR_VAR 0 9
35366: PUSH
35367: LD_VAR 0 11
35371: PUSH
35372: LD_VAR 0 12
35376: PUSH
35377: LD_VAR 0 13
35381: PUSH
35382: LD_VAR 0 14
35386: PUSH
35387: LD_VAR 0 15
35391: PUSH
35392: LD_VAR 0 16
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: PUSH
35405: LD_VAR 0 4
35409: PUSH
35410: LD_INT 1
35412: PLUS
35413: ARRAY
35414: ST_TO_ADDR
35415: GO 35546
35417: LD_INT 2
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35481
35425: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
35426: LD_ADDR_VAR 0 9
35430: PUSH
35431: LD_VAR 0 17
35435: PUSH
35436: LD_VAR 0 18
35440: PUSH
35441: LD_VAR 0 19
35445: PUSH
35446: LD_VAR 0 20
35450: PUSH
35451: LD_VAR 0 21
35455: PUSH
35456: LD_VAR 0 22
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: PUSH
35469: LD_VAR 0 4
35473: PUSH
35474: LD_INT 1
35476: PLUS
35477: ARRAY
35478: ST_TO_ADDR
35479: GO 35546
35481: LD_INT 3
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35489
35487: GO 35545
35489: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35490: LD_ADDR_VAR 0 9
35494: PUSH
35495: LD_VAR 0 23
35499: PUSH
35500: LD_VAR 0 24
35504: PUSH
35505: LD_VAR 0 25
35509: PUSH
35510: LD_VAR 0 26
35514: PUSH
35515: LD_VAR 0 27
35519: PUSH
35520: LD_VAR 0 28
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: PUSH
35533: LD_VAR 0 4
35537: PUSH
35538: LD_INT 1
35540: PLUS
35541: ARRAY
35542: ST_TO_ADDR
35543: GO 35546
35545: POP
35546: GO 36101
35548: LD_INT 2
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35562
35554: LD_INT 3
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 35618
35562: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35563: LD_ADDR_VAR 0 9
35567: PUSH
35568: LD_VAR 0 29
35572: PUSH
35573: LD_VAR 0 30
35577: PUSH
35578: LD_VAR 0 31
35582: PUSH
35583: LD_VAR 0 32
35587: PUSH
35588: LD_VAR 0 33
35592: PUSH
35593: LD_VAR 0 34
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: PUSH
35606: LD_VAR 0 4
35610: PUSH
35611: LD_INT 1
35613: PLUS
35614: ARRAY
35615: ST_TO_ADDR
35616: GO 36101
35618: LD_INT 16
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35680
35624: LD_INT 17
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35680
35630: LD_INT 18
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35680
35636: LD_INT 19
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35680
35642: LD_INT 22
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35680
35648: LD_INT 20
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35680
35654: LD_INT 21
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35680
35660: LD_INT 23
35662: DOUBLE
35663: EQUAL
35664: IFTRUE 35680
35666: LD_INT 24
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35680
35672: LD_INT 25
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35680
35678: GO 35736
35680: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35681: LD_ADDR_VAR 0 9
35685: PUSH
35686: LD_VAR 0 35
35690: PUSH
35691: LD_VAR 0 36
35695: PUSH
35696: LD_VAR 0 37
35700: PUSH
35701: LD_VAR 0 38
35705: PUSH
35706: LD_VAR 0 39
35710: PUSH
35711: LD_VAR 0 40
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: PUSH
35724: LD_VAR 0 4
35728: PUSH
35729: LD_INT 1
35731: PLUS
35732: ARRAY
35733: ST_TO_ADDR
35734: GO 36101
35736: LD_INT 6
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35792
35742: LD_INT 7
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35792
35748: LD_INT 8
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35792
35754: LD_INT 13
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35792
35760: LD_INT 12
35762: DOUBLE
35763: EQUAL
35764: IFTRUE 35792
35766: LD_INT 15
35768: DOUBLE
35769: EQUAL
35770: IFTRUE 35792
35772: LD_INT 11
35774: DOUBLE
35775: EQUAL
35776: IFTRUE 35792
35778: LD_INT 14
35780: DOUBLE
35781: EQUAL
35782: IFTRUE 35792
35784: LD_INT 10
35786: DOUBLE
35787: EQUAL
35788: IFTRUE 35792
35790: GO 35848
35792: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
35793: LD_ADDR_VAR 0 9
35797: PUSH
35798: LD_VAR 0 41
35802: PUSH
35803: LD_VAR 0 42
35807: PUSH
35808: LD_VAR 0 43
35812: PUSH
35813: LD_VAR 0 44
35817: PUSH
35818: LD_VAR 0 45
35822: PUSH
35823: LD_VAR 0 46
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: PUSH
35836: LD_VAR 0 4
35840: PUSH
35841: LD_INT 1
35843: PLUS
35844: ARRAY
35845: ST_TO_ADDR
35846: GO 36101
35848: LD_INT 36
35850: DOUBLE
35851: EQUAL
35852: IFTRUE 35856
35854: GO 35912
35856: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35857: LD_ADDR_VAR 0 9
35861: PUSH
35862: LD_VAR 0 47
35866: PUSH
35867: LD_VAR 0 48
35871: PUSH
35872: LD_VAR 0 49
35876: PUSH
35877: LD_VAR 0 50
35881: PUSH
35882: LD_VAR 0 51
35886: PUSH
35887: LD_VAR 0 52
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: PUSH
35900: LD_VAR 0 4
35904: PUSH
35905: LD_INT 1
35907: PLUS
35908: ARRAY
35909: ST_TO_ADDR
35910: GO 36101
35912: LD_INT 4
35914: DOUBLE
35915: EQUAL
35916: IFTRUE 35938
35918: LD_INT 5
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35938
35924: LD_INT 34
35926: DOUBLE
35927: EQUAL
35928: IFTRUE 35938
35930: LD_INT 37
35932: DOUBLE
35933: EQUAL
35934: IFTRUE 35938
35936: GO 35994
35938: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35939: LD_ADDR_VAR 0 9
35943: PUSH
35944: LD_VAR 0 53
35948: PUSH
35949: LD_VAR 0 54
35953: PUSH
35954: LD_VAR 0 55
35958: PUSH
35959: LD_VAR 0 56
35963: PUSH
35964: LD_VAR 0 57
35968: PUSH
35969: LD_VAR 0 58
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: PUSH
35982: LD_VAR 0 4
35986: PUSH
35987: LD_INT 1
35989: PLUS
35990: ARRAY
35991: ST_TO_ADDR
35992: GO 36101
35994: LD_INT 31
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36044
36000: LD_INT 32
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36044
36006: LD_INT 33
36008: DOUBLE
36009: EQUAL
36010: IFTRUE 36044
36012: LD_INT 27
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36044
36018: LD_INT 26
36020: DOUBLE
36021: EQUAL
36022: IFTRUE 36044
36024: LD_INT 28
36026: DOUBLE
36027: EQUAL
36028: IFTRUE 36044
36030: LD_INT 29
36032: DOUBLE
36033: EQUAL
36034: IFTRUE 36044
36036: LD_INT 30
36038: DOUBLE
36039: EQUAL
36040: IFTRUE 36044
36042: GO 36100
36044: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36045: LD_ADDR_VAR 0 9
36049: PUSH
36050: LD_VAR 0 59
36054: PUSH
36055: LD_VAR 0 60
36059: PUSH
36060: LD_VAR 0 61
36064: PUSH
36065: LD_VAR 0 62
36069: PUSH
36070: LD_VAR 0 63
36074: PUSH
36075: LD_VAR 0 64
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: PUSH
36088: LD_VAR 0 4
36092: PUSH
36093: LD_INT 1
36095: PLUS
36096: ARRAY
36097: ST_TO_ADDR
36098: GO 36101
36100: POP
// temp_list2 = [ ] ;
36101: LD_ADDR_VAR 0 10
36105: PUSH
36106: EMPTY
36107: ST_TO_ADDR
// for i in temp_list do
36108: LD_ADDR_VAR 0 8
36112: PUSH
36113: LD_VAR 0 9
36117: PUSH
36118: FOR_IN
36119: IFFALSE 36171
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36121: LD_ADDR_VAR 0 10
36125: PUSH
36126: LD_VAR 0 10
36130: PUSH
36131: LD_VAR 0 8
36135: PUSH
36136: LD_INT 1
36138: ARRAY
36139: PUSH
36140: LD_VAR 0 2
36144: PLUS
36145: PUSH
36146: LD_VAR 0 8
36150: PUSH
36151: LD_INT 2
36153: ARRAY
36154: PUSH
36155: LD_VAR 0 3
36159: PLUS
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: ADD
36168: ST_TO_ADDR
36169: GO 36118
36171: POP
36172: POP
// result = temp_list2 ;
36173: LD_ADDR_VAR 0 7
36177: PUSH
36178: LD_VAR 0 10
36182: ST_TO_ADDR
// end ;
36183: LD_VAR 0 7
36187: RET
// export function EnemyInRange ( unit , dist ) ; begin
36188: LD_INT 0
36190: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36191: LD_ADDR_VAR 0 3
36195: PUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: CALL_OW 255
36205: PPUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 250
36215: PPUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 251
36225: PPUSH
36226: LD_VAR 0 2
36230: PPUSH
36231: CALL 10292 0 4
36235: PUSH
36236: LD_INT 4
36238: ARRAY
36239: ST_TO_ADDR
// end ;
36240: LD_VAR 0 3
36244: RET
// export function PlayerSeeMe ( unit ) ; begin
36245: LD_INT 0
36247: PPUSH
// result := See ( your_side , unit ) ;
36248: LD_ADDR_VAR 0 2
36252: PUSH
36253: LD_OWVAR 2
36257: PPUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 292
36267: ST_TO_ADDR
// end ;
36268: LD_VAR 0 2
36272: RET
// export function ReverseDir ( unit ) ; begin
36273: LD_INT 0
36275: PPUSH
// if not unit then
36276: LD_VAR 0 1
36280: NOT
36281: IFFALSE 36285
// exit ;
36283: GO 36308
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36285: LD_ADDR_VAR 0 2
36289: PUSH
36290: LD_VAR 0 1
36294: PPUSH
36295: CALL_OW 254
36299: PUSH
36300: LD_INT 3
36302: PLUS
36303: PUSH
36304: LD_INT 6
36306: MOD
36307: ST_TO_ADDR
// end ;
36308: LD_VAR 0 2
36312: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36313: LD_INT 0
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
// if not hexes then
36320: LD_VAR 0 2
36324: NOT
36325: IFFALSE 36329
// exit ;
36327: GO 36477
// dist := 9999 ;
36329: LD_ADDR_VAR 0 5
36333: PUSH
36334: LD_INT 9999
36336: ST_TO_ADDR
// for i = 1 to hexes do
36337: LD_ADDR_VAR 0 4
36341: PUSH
36342: DOUBLE
36343: LD_INT 1
36345: DEC
36346: ST_TO_ADDR
36347: LD_VAR 0 2
36351: PUSH
36352: FOR_TO
36353: IFFALSE 36465
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36355: LD_VAR 0 1
36359: PPUSH
36360: LD_VAR 0 2
36364: PUSH
36365: LD_VAR 0 4
36369: ARRAY
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: PPUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_VAR 0 4
36384: ARRAY
36385: PUSH
36386: LD_INT 2
36388: ARRAY
36389: PPUSH
36390: CALL_OW 297
36394: PUSH
36395: LD_VAR 0 5
36399: LESS
36400: IFFALSE 36463
// begin hex := hexes [ i ] ;
36402: LD_ADDR_VAR 0 7
36406: PUSH
36407: LD_VAR 0 2
36411: PUSH
36412: LD_VAR 0 4
36416: ARRAY
36417: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36418: LD_ADDR_VAR 0 5
36422: PUSH
36423: LD_VAR 0 1
36427: PPUSH
36428: LD_VAR 0 2
36432: PUSH
36433: LD_VAR 0 4
36437: ARRAY
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PPUSH
36443: LD_VAR 0 2
36447: PUSH
36448: LD_VAR 0 4
36452: ARRAY
36453: PUSH
36454: LD_INT 2
36456: ARRAY
36457: PPUSH
36458: CALL_OW 297
36462: ST_TO_ADDR
// end ; end ;
36463: GO 36352
36465: POP
36466: POP
// result := hex ;
36467: LD_ADDR_VAR 0 3
36471: PUSH
36472: LD_VAR 0 7
36476: ST_TO_ADDR
// end ;
36477: LD_VAR 0 3
36481: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36482: LD_INT 0
36484: PPUSH
36485: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36486: LD_VAR 0 1
36490: NOT
36491: PUSH
36492: LD_VAR 0 1
36496: PUSH
36497: LD_INT 21
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 23
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PPUSH
36521: CALL_OW 69
36525: IN
36526: NOT
36527: OR
36528: IFFALSE 36532
// exit ;
36530: GO 36579
// for i = 1 to 3 do
36532: LD_ADDR_VAR 0 3
36536: PUSH
36537: DOUBLE
36538: LD_INT 1
36540: DEC
36541: ST_TO_ADDR
36542: LD_INT 3
36544: PUSH
36545: FOR_TO
36546: IFFALSE 36577
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL_OW 250
36557: PPUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 251
36567: PPUSH
36568: LD_INT 1
36570: PPUSH
36571: CALL_OW 453
36575: GO 36545
36577: POP
36578: POP
// end ;
36579: LD_VAR 0 2
36583: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36584: LD_INT 0
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36592: LD_VAR 0 1
36596: NOT
36597: PUSH
36598: LD_VAR 0 2
36602: NOT
36603: OR
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 314
36614: OR
36615: IFFALSE 36619
// exit ;
36617: GO 37060
// x := GetX ( enemy_unit ) ;
36619: LD_ADDR_VAR 0 7
36623: PUSH
36624: LD_VAR 0 2
36628: PPUSH
36629: CALL_OW 250
36633: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36634: LD_ADDR_VAR 0 8
36638: PUSH
36639: LD_VAR 0 2
36643: PPUSH
36644: CALL_OW 251
36648: ST_TO_ADDR
// if not x or not y then
36649: LD_VAR 0 7
36653: NOT
36654: PUSH
36655: LD_VAR 0 8
36659: NOT
36660: OR
36661: IFFALSE 36665
// exit ;
36663: GO 37060
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36665: LD_ADDR_VAR 0 6
36669: PUSH
36670: LD_VAR 0 7
36674: PPUSH
36675: LD_INT 0
36677: PPUSH
36678: LD_INT 4
36680: PPUSH
36681: CALL_OW 272
36685: PUSH
36686: LD_VAR 0 8
36690: PPUSH
36691: LD_INT 0
36693: PPUSH
36694: LD_INT 4
36696: PPUSH
36697: CALL_OW 273
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_VAR 0 7
36710: PPUSH
36711: LD_INT 1
36713: PPUSH
36714: LD_INT 4
36716: PPUSH
36717: CALL_OW 272
36721: PUSH
36722: LD_VAR 0 8
36726: PPUSH
36727: LD_INT 1
36729: PPUSH
36730: LD_INT 4
36732: PPUSH
36733: CALL_OW 273
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_VAR 0 7
36746: PPUSH
36747: LD_INT 2
36749: PPUSH
36750: LD_INT 4
36752: PPUSH
36753: CALL_OW 272
36757: PUSH
36758: LD_VAR 0 8
36762: PPUSH
36763: LD_INT 2
36765: PPUSH
36766: LD_INT 4
36768: PPUSH
36769: CALL_OW 273
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 7
36782: PPUSH
36783: LD_INT 3
36785: PPUSH
36786: LD_INT 4
36788: PPUSH
36789: CALL_OW 272
36793: PUSH
36794: LD_VAR 0 8
36798: PPUSH
36799: LD_INT 3
36801: PPUSH
36802: LD_INT 4
36804: PPUSH
36805: CALL_OW 273
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_VAR 0 7
36818: PPUSH
36819: LD_INT 4
36821: PPUSH
36822: LD_INT 4
36824: PPUSH
36825: CALL_OW 272
36829: PUSH
36830: LD_VAR 0 8
36834: PPUSH
36835: LD_INT 4
36837: PPUSH
36838: LD_INT 4
36840: PPUSH
36841: CALL_OW 273
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_VAR 0 7
36854: PPUSH
36855: LD_INT 5
36857: PPUSH
36858: LD_INT 4
36860: PPUSH
36861: CALL_OW 272
36865: PUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_INT 5
36873: PPUSH
36874: LD_INT 4
36876: PPUSH
36877: CALL_OW 273
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// for i = tmp downto 1 do
36894: LD_ADDR_VAR 0 4
36898: PUSH
36899: DOUBLE
36900: LD_VAR 0 6
36904: INC
36905: ST_TO_ADDR
36906: LD_INT 1
36908: PUSH
36909: FOR_DOWNTO
36910: IFFALSE 37011
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36912: LD_VAR 0 6
36916: PUSH
36917: LD_VAR 0 4
36921: ARRAY
36922: PUSH
36923: LD_INT 1
36925: ARRAY
36926: PPUSH
36927: LD_VAR 0 6
36931: PUSH
36932: LD_VAR 0 4
36936: ARRAY
36937: PUSH
36938: LD_INT 2
36940: ARRAY
36941: PPUSH
36942: CALL_OW 488
36946: NOT
36947: PUSH
36948: LD_VAR 0 6
36952: PUSH
36953: LD_VAR 0 4
36957: ARRAY
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 6
36967: PUSH
36968: LD_VAR 0 4
36972: ARRAY
36973: PUSH
36974: LD_INT 2
36976: ARRAY
36977: PPUSH
36978: CALL_OW 428
36982: PUSH
36983: LD_INT 0
36985: NONEQUAL
36986: OR
36987: IFFALSE 37009
// tmp := Delete ( tmp , i ) ;
36989: LD_ADDR_VAR 0 6
36993: PUSH
36994: LD_VAR 0 6
36998: PPUSH
36999: LD_VAR 0 4
37003: PPUSH
37004: CALL_OW 3
37008: ST_TO_ADDR
37009: GO 36909
37011: POP
37012: POP
// j := GetClosestHex ( unit , tmp ) ;
37013: LD_ADDR_VAR 0 5
37017: PUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: LD_VAR 0 6
37027: PPUSH
37028: CALL 36313 0 2
37032: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37033: LD_VAR 0 1
37037: PPUSH
37038: LD_VAR 0 5
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: PPUSH
37047: LD_VAR 0 5
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: PPUSH
37056: CALL_OW 111
// end ;
37060: LD_VAR 0 3
37064: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37065: LD_INT 0
37067: PPUSH
37068: PPUSH
37069: PPUSH
// uc_side = 0 ;
37070: LD_ADDR_OWVAR 20
37074: PUSH
37075: LD_INT 0
37077: ST_TO_ADDR
// uc_nation = 0 ;
37078: LD_ADDR_OWVAR 21
37082: PUSH
37083: LD_INT 0
37085: ST_TO_ADDR
// InitHc ;
37086: CALL_OW 19
// InitVc ;
37090: CALL_OW 20
// if mastodonts then
37094: LD_VAR 0 6
37098: IFFALSE 37165
// for i = 1 to mastodonts do
37100: LD_ADDR_VAR 0 11
37104: PUSH
37105: DOUBLE
37106: LD_INT 1
37108: DEC
37109: ST_TO_ADDR
37110: LD_VAR 0 6
37114: PUSH
37115: FOR_TO
37116: IFFALSE 37163
// begin vc_chassis := 31 ;
37118: LD_ADDR_OWVAR 37
37122: PUSH
37123: LD_INT 31
37125: ST_TO_ADDR
// vc_control := control_rider ;
37126: LD_ADDR_OWVAR 38
37130: PUSH
37131: LD_INT 4
37133: ST_TO_ADDR
// animal := CreateVehicle ;
37134: LD_ADDR_VAR 0 12
37138: PUSH
37139: CALL_OW 45
37143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37144: LD_VAR 0 12
37148: PPUSH
37149: LD_VAR 0 8
37153: PPUSH
37154: LD_INT 0
37156: PPUSH
37157: CALL 39234 0 3
// end ;
37161: GO 37115
37163: POP
37164: POP
// if horses then
37165: LD_VAR 0 5
37169: IFFALSE 37236
// for i = 1 to horses do
37171: LD_ADDR_VAR 0 11
37175: PUSH
37176: DOUBLE
37177: LD_INT 1
37179: DEC
37180: ST_TO_ADDR
37181: LD_VAR 0 5
37185: PUSH
37186: FOR_TO
37187: IFFALSE 37234
// begin hc_class := 21 ;
37189: LD_ADDR_OWVAR 28
37193: PUSH
37194: LD_INT 21
37196: ST_TO_ADDR
// hc_gallery :=  ;
37197: LD_ADDR_OWVAR 33
37201: PUSH
37202: LD_STRING 
37204: ST_TO_ADDR
// animal := CreateHuman ;
37205: LD_ADDR_VAR 0 12
37209: PUSH
37210: CALL_OW 44
37214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37215: LD_VAR 0 12
37219: PPUSH
37220: LD_VAR 0 8
37224: PPUSH
37225: LD_INT 0
37227: PPUSH
37228: CALL 39234 0 3
// end ;
37232: GO 37186
37234: POP
37235: POP
// if birds then
37236: LD_VAR 0 1
37240: IFFALSE 37307
// for i = 1 to birds do
37242: LD_ADDR_VAR 0 11
37246: PUSH
37247: DOUBLE
37248: LD_INT 1
37250: DEC
37251: ST_TO_ADDR
37252: LD_VAR 0 1
37256: PUSH
37257: FOR_TO
37258: IFFALSE 37305
// begin hc_class = 18 ;
37260: LD_ADDR_OWVAR 28
37264: PUSH
37265: LD_INT 18
37267: ST_TO_ADDR
// hc_gallery =  ;
37268: LD_ADDR_OWVAR 33
37272: PUSH
37273: LD_STRING 
37275: ST_TO_ADDR
// animal := CreateHuman ;
37276: LD_ADDR_VAR 0 12
37280: PUSH
37281: CALL_OW 44
37285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37286: LD_VAR 0 12
37290: PPUSH
37291: LD_VAR 0 8
37295: PPUSH
37296: LD_INT 0
37298: PPUSH
37299: CALL 39234 0 3
// end ;
37303: GO 37257
37305: POP
37306: POP
// if tigers then
37307: LD_VAR 0 2
37311: IFFALSE 37395
// for i = 1 to tigers do
37313: LD_ADDR_VAR 0 11
37317: PUSH
37318: DOUBLE
37319: LD_INT 1
37321: DEC
37322: ST_TO_ADDR
37323: LD_VAR 0 2
37327: PUSH
37328: FOR_TO
37329: IFFALSE 37393
// begin hc_class = class_tiger ;
37331: LD_ADDR_OWVAR 28
37335: PUSH
37336: LD_INT 14
37338: ST_TO_ADDR
// hc_gallery =  ;
37339: LD_ADDR_OWVAR 33
37343: PUSH
37344: LD_STRING 
37346: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37347: LD_ADDR_OWVAR 35
37351: PUSH
37352: LD_INT 7
37354: NEG
37355: PPUSH
37356: LD_INT 7
37358: PPUSH
37359: CALL_OW 12
37363: ST_TO_ADDR
// animal := CreateHuman ;
37364: LD_ADDR_VAR 0 12
37368: PUSH
37369: CALL_OW 44
37373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37374: LD_VAR 0 12
37378: PPUSH
37379: LD_VAR 0 8
37383: PPUSH
37384: LD_INT 0
37386: PPUSH
37387: CALL 39234 0 3
// end ;
37391: GO 37328
37393: POP
37394: POP
// if apemans then
37395: LD_VAR 0 3
37399: IFFALSE 37522
// for i = 1 to apemans do
37401: LD_ADDR_VAR 0 11
37405: PUSH
37406: DOUBLE
37407: LD_INT 1
37409: DEC
37410: ST_TO_ADDR
37411: LD_VAR 0 3
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37520
// begin hc_class = class_apeman ;
37419: LD_ADDR_OWVAR 28
37423: PUSH
37424: LD_INT 12
37426: ST_TO_ADDR
// hc_gallery =  ;
37427: LD_ADDR_OWVAR 33
37431: PUSH
37432: LD_STRING 
37434: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
37435: LD_ADDR_OWVAR 35
37439: PUSH
37440: LD_INT 5
37442: NEG
37443: PPUSH
37444: LD_INT 5
37446: PPUSH
37447: CALL_OW 12
37451: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37452: LD_ADDR_OWVAR 31
37456: PUSH
37457: LD_INT 1
37459: PPUSH
37460: LD_INT 3
37462: PPUSH
37463: CALL_OW 12
37467: PUSH
37468: LD_INT 1
37470: PPUSH
37471: LD_INT 3
37473: PPUSH
37474: CALL_OW 12
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// animal := CreateHuman ;
37491: LD_ADDR_VAR 0 12
37495: PUSH
37496: CALL_OW 44
37500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37501: LD_VAR 0 12
37505: PPUSH
37506: LD_VAR 0 8
37510: PPUSH
37511: LD_INT 0
37513: PPUSH
37514: CALL 39234 0 3
// end ;
37518: GO 37416
37520: POP
37521: POP
// if enchidnas then
37522: LD_VAR 0 4
37526: IFFALSE 37593
// for i = 1 to enchidnas do
37528: LD_ADDR_VAR 0 11
37532: PUSH
37533: DOUBLE
37534: LD_INT 1
37536: DEC
37537: ST_TO_ADDR
37538: LD_VAR 0 4
37542: PUSH
37543: FOR_TO
37544: IFFALSE 37591
// begin hc_class = 13 ;
37546: LD_ADDR_OWVAR 28
37550: PUSH
37551: LD_INT 13
37553: ST_TO_ADDR
// hc_gallery =  ;
37554: LD_ADDR_OWVAR 33
37558: PUSH
37559: LD_STRING 
37561: ST_TO_ADDR
// animal := CreateHuman ;
37562: LD_ADDR_VAR 0 12
37566: PUSH
37567: CALL_OW 44
37571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37572: LD_VAR 0 12
37576: PPUSH
37577: LD_VAR 0 8
37581: PPUSH
37582: LD_INT 0
37584: PPUSH
37585: CALL 39234 0 3
// end ;
37589: GO 37543
37591: POP
37592: POP
// if fishes then
37593: LD_VAR 0 7
37597: IFFALSE 37664
// for i = 1 to fishes do
37599: LD_ADDR_VAR 0 11
37603: PUSH
37604: DOUBLE
37605: LD_INT 1
37607: DEC
37608: ST_TO_ADDR
37609: LD_VAR 0 7
37613: PUSH
37614: FOR_TO
37615: IFFALSE 37662
// begin hc_class = 20 ;
37617: LD_ADDR_OWVAR 28
37621: PUSH
37622: LD_INT 20
37624: ST_TO_ADDR
// hc_gallery =  ;
37625: LD_ADDR_OWVAR 33
37629: PUSH
37630: LD_STRING 
37632: ST_TO_ADDR
// animal := CreateHuman ;
37633: LD_ADDR_VAR 0 12
37637: PUSH
37638: CALL_OW 44
37642: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37643: LD_VAR 0 12
37647: PPUSH
37648: LD_VAR 0 9
37652: PPUSH
37653: LD_INT 0
37655: PPUSH
37656: CALL 39234 0 3
// end ;
37660: GO 37614
37662: POP
37663: POP
// end ;
37664: LD_VAR 0 10
37668: RET
// export function WantHeal ( sci , unit ) ; begin
37669: LD_INT 0
37671: PPUSH
// if GetTaskList ( sci ) > 0 then
37672: LD_VAR 0 1
37676: PPUSH
37677: CALL_OW 437
37681: PUSH
37682: LD_INT 0
37684: GREATER
37685: IFFALSE 37755
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37687: LD_VAR 0 1
37691: PPUSH
37692: CALL_OW 437
37696: PUSH
37697: LD_INT 1
37699: ARRAY
37700: PUSH
37701: LD_INT 1
37703: ARRAY
37704: PUSH
37705: LD_STRING l
37707: EQUAL
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 437
37718: PUSH
37719: LD_INT 1
37721: ARRAY
37722: PUSH
37723: LD_INT 4
37725: ARRAY
37726: PUSH
37727: LD_VAR 0 2
37731: EQUAL
37732: AND
37733: IFFALSE 37745
// result := true else
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_INT 1
37742: ST_TO_ADDR
37743: GO 37753
// result := false ;
37745: LD_ADDR_VAR 0 3
37749: PUSH
37750: LD_INT 0
37752: ST_TO_ADDR
// end else
37753: GO 37763
// result := false ;
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 0
37762: ST_TO_ADDR
// end ;
37763: LD_VAR 0 3
37767: RET
// export function HealTarget ( sci ) ; begin
37768: LD_INT 0
37770: PPUSH
// if not sci then
37771: LD_VAR 0 1
37775: NOT
37776: IFFALSE 37780
// exit ;
37778: GO 37845
// result := 0 ;
37780: LD_ADDR_VAR 0 2
37784: PUSH
37785: LD_INT 0
37787: ST_TO_ADDR
// if GetTaskList ( sci ) then
37788: LD_VAR 0 1
37792: PPUSH
37793: CALL_OW 437
37797: IFFALSE 37845
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 437
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: PUSH
37817: LD_STRING l
37819: EQUAL
37820: IFFALSE 37845
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37822: LD_ADDR_VAR 0 2
37826: PUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 437
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: PUSH
37841: LD_INT 4
37843: ARRAY
37844: ST_TO_ADDR
// end ;
37845: LD_VAR 0 2
37849: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37850: LD_INT 0
37852: PPUSH
37853: PPUSH
37854: PPUSH
37855: PPUSH
// if not base_units then
37856: LD_VAR 0 1
37860: NOT
37861: IFFALSE 37865
// exit ;
37863: GO 37952
// result := false ;
37865: LD_ADDR_VAR 0 2
37869: PUSH
37870: LD_INT 0
37872: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37873: LD_ADDR_VAR 0 5
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: LD_INT 21
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PPUSH
37893: CALL_OW 72
37897: ST_TO_ADDR
// if not tmp then
37898: LD_VAR 0 5
37902: NOT
37903: IFFALSE 37907
// exit ;
37905: GO 37952
// for i in tmp do
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_VAR 0 5
37916: PUSH
37917: FOR_IN
37918: IFFALSE 37950
// begin result := EnemyInRange ( i , 22 ) ;
37920: LD_ADDR_VAR 0 2
37924: PUSH
37925: LD_VAR 0 3
37929: PPUSH
37930: LD_INT 22
37932: PPUSH
37933: CALL 36188 0 2
37937: ST_TO_ADDR
// if result then
37938: LD_VAR 0 2
37942: IFFALSE 37948
// exit ;
37944: POP
37945: POP
37946: GO 37952
// end ;
37948: GO 37917
37950: POP
37951: POP
// end ;
37952: LD_VAR 0 2
37956: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37957: LD_INT 0
37959: PPUSH
37960: PPUSH
// if not units then
37961: LD_VAR 0 1
37965: NOT
37966: IFFALSE 37970
// exit ;
37968: GO 38040
// result := [ ] ;
37970: LD_ADDR_VAR 0 3
37974: PUSH
37975: EMPTY
37976: ST_TO_ADDR
// for i in units do
37977: LD_ADDR_VAR 0 4
37981: PUSH
37982: LD_VAR 0 1
37986: PUSH
37987: FOR_IN
37988: IFFALSE 38038
// if GetTag ( i ) = tag then
37990: LD_VAR 0 4
37994: PPUSH
37995: CALL_OW 110
37999: PUSH
38000: LD_VAR 0 2
38004: EQUAL
38005: IFFALSE 38036
// result := Insert ( result , result + 1 , i ) ;
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_VAR 0 3
38016: PPUSH
38017: LD_VAR 0 3
38021: PUSH
38022: LD_INT 1
38024: PLUS
38025: PPUSH
38026: LD_VAR 0 4
38030: PPUSH
38031: CALL_OW 2
38035: ST_TO_ADDR
38036: GO 37987
38038: POP
38039: POP
// end ;
38040: LD_VAR 0 3
38044: RET
// export function IsDriver ( un ) ; begin
38045: LD_INT 0
38047: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38048: LD_ADDR_VAR 0 2
38052: PUSH
38053: LD_VAR 0 1
38057: PUSH
38058: LD_INT 55
38060: PUSH
38061: EMPTY
38062: LIST
38063: PPUSH
38064: CALL_OW 69
38068: IN
38069: ST_TO_ADDR
// end ;
38070: LD_VAR 0 2
38074: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38075: LD_INT 0
38077: PPUSH
38078: PPUSH
// list := [ ] ;
38079: LD_ADDR_VAR 0 5
38083: PUSH
38084: EMPTY
38085: ST_TO_ADDR
// case d of 0 :
38086: LD_VAR 0 3
38090: PUSH
38091: LD_INT 0
38093: DOUBLE
38094: EQUAL
38095: IFTRUE 38099
38097: GO 38232
38099: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38100: LD_ADDR_VAR 0 5
38104: PUSH
38105: LD_VAR 0 1
38109: PUSH
38110: LD_INT 4
38112: MINUS
38113: PUSH
38114: LD_VAR 0 2
38118: PUSH
38119: LD_INT 4
38121: MINUS
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: PUSH
38131: LD_VAR 0 1
38135: PUSH
38136: LD_INT 3
38138: MINUS
38139: PUSH
38140: LD_VAR 0 2
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: PUSH
38153: LD_VAR 0 1
38157: PUSH
38158: LD_INT 4
38160: PLUS
38161: PUSH
38162: LD_VAR 0 2
38166: PUSH
38167: LD_INT 4
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: PUSH
38175: LD_VAR 0 1
38179: PUSH
38180: LD_INT 3
38182: PLUS
38183: PUSH
38184: LD_VAR 0 2
38188: PUSH
38189: LD_INT 3
38191: PLUS
38192: PUSH
38193: LD_INT 5
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: PUSH
38201: LD_VAR 0 1
38205: PUSH
38206: LD_VAR 0 2
38210: PUSH
38211: LD_INT 4
38213: PLUS
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// end ; 1 :
38230: GO 38930
38232: LD_INT 1
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38240
38238: GO 38373
38240: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38241: LD_ADDR_VAR 0 5
38245: PUSH
38246: LD_VAR 0 1
38250: PUSH
38251: LD_VAR 0 2
38255: PUSH
38256: LD_INT 4
38258: MINUS
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: PUSH
38268: LD_VAR 0 1
38272: PUSH
38273: LD_INT 3
38275: MINUS
38276: PUSH
38277: LD_VAR 0 2
38281: PUSH
38282: LD_INT 3
38284: MINUS
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: PUSH
38294: LD_VAR 0 1
38298: PUSH
38299: LD_INT 4
38301: MINUS
38302: PUSH
38303: LD_VAR 0 2
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: LIST
38315: PUSH
38316: LD_VAR 0 1
38320: PUSH
38321: LD_VAR 0 2
38325: PUSH
38326: LD_INT 3
38328: PLUS
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: PUSH
38338: LD_VAR 0 1
38342: PUSH
38343: LD_INT 4
38345: PLUS
38346: PUSH
38347: LD_VAR 0 2
38351: PUSH
38352: LD_INT 4
38354: PLUS
38355: PUSH
38356: LD_INT 5
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: LIST
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: ST_TO_ADDR
// end ; 2 :
38371: GO 38930
38373: LD_INT 2
38375: DOUBLE
38376: EQUAL
38377: IFTRUE 38381
38379: GO 38510
38381: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38382: LD_ADDR_VAR 0 5
38386: PUSH
38387: LD_VAR 0 1
38391: PUSH
38392: LD_VAR 0 2
38396: PUSH
38397: LD_INT 3
38399: MINUS
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: PUSH
38409: LD_VAR 0 1
38413: PUSH
38414: LD_INT 4
38416: PLUS
38417: PUSH
38418: LD_VAR 0 2
38422: PUSH
38423: LD_INT 4
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: PUSH
38431: LD_VAR 0 1
38435: PUSH
38436: LD_VAR 0 2
38440: PUSH
38441: LD_INT 4
38443: PLUS
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: LIST
38452: PUSH
38453: LD_VAR 0 1
38457: PUSH
38458: LD_INT 3
38460: MINUS
38461: PUSH
38462: LD_VAR 0 2
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: PUSH
38475: LD_VAR 0 1
38479: PUSH
38480: LD_INT 4
38482: MINUS
38483: PUSH
38484: LD_VAR 0 2
38488: PUSH
38489: LD_INT 4
38491: MINUS
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// end ; 3 :
38508: GO 38930
38510: LD_INT 3
38512: DOUBLE
38513: EQUAL
38514: IFTRUE 38518
38516: GO 38651
38518: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38519: LD_ADDR_VAR 0 5
38523: PUSH
38524: LD_VAR 0 1
38528: PUSH
38529: LD_INT 3
38531: PLUS
38532: PUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_INT 4
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: PUSH
38546: LD_VAR 0 1
38550: PUSH
38551: LD_INT 4
38553: PLUS
38554: PUSH
38555: LD_VAR 0 2
38559: PUSH
38560: LD_INT 4
38562: PLUS
38563: PUSH
38564: LD_INT 5
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PUSH
38572: LD_VAR 0 1
38576: PUSH
38577: LD_INT 4
38579: MINUS
38580: PUSH
38581: LD_VAR 0 2
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: PUSH
38594: LD_VAR 0 1
38598: PUSH
38599: LD_VAR 0 2
38603: PUSH
38604: LD_INT 4
38606: MINUS
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: PUSH
38616: LD_VAR 0 1
38620: PUSH
38621: LD_INT 3
38623: MINUS
38624: PUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_INT 3
38632: MINUS
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: ST_TO_ADDR
// end ; 4 :
38649: GO 38930
38651: LD_INT 4
38653: DOUBLE
38654: EQUAL
38655: IFTRUE 38659
38657: GO 38792
38659: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38660: LD_ADDR_VAR 0 5
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: LD_VAR 0 2
38674: PUSH
38675: LD_INT 4
38677: PLUS
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: PUSH
38687: LD_VAR 0 1
38691: PUSH
38692: LD_INT 3
38694: PLUS
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 3
38703: PLUS
38704: PUSH
38705: LD_INT 5
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: PUSH
38713: LD_VAR 0 1
38717: PUSH
38718: LD_INT 4
38720: PLUS
38721: PUSH
38722: LD_VAR 0 2
38726: PUSH
38727: LD_INT 4
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: PUSH
38735: LD_VAR 0 1
38739: PUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 3
38747: MINUS
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: PUSH
38757: LD_VAR 0 1
38761: PUSH
38762: LD_INT 4
38764: MINUS
38765: PUSH
38766: LD_VAR 0 2
38770: PUSH
38771: LD_INT 4
38773: MINUS
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: ST_TO_ADDR
// end ; 5 :
38790: GO 38930
38792: LD_INT 5
38794: DOUBLE
38795: EQUAL
38796: IFTRUE 38800
38798: GO 38929
38800: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: LD_INT 4
38813: MINUS
38814: PUSH
38815: LD_VAR 0 2
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: PUSH
38828: LD_VAR 0 1
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: LD_INT 4
38840: MINUS
38841: PUSH
38842: LD_INT 3
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: PUSH
38850: LD_VAR 0 1
38854: PUSH
38855: LD_INT 4
38857: PLUS
38858: PUSH
38859: LD_VAR 0 2
38863: PUSH
38864: LD_INT 4
38866: PLUS
38867: PUSH
38868: LD_INT 5
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: PUSH
38876: LD_VAR 0 1
38880: PUSH
38881: LD_INT 3
38883: PLUS
38884: PUSH
38885: LD_VAR 0 2
38889: PUSH
38890: LD_INT 4
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: PUSH
38898: LD_VAR 0 1
38902: PUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 3
38910: PLUS
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: ST_TO_ADDR
// end ; end ;
38927: GO 38930
38929: POP
// result := list ;
38930: LD_ADDR_VAR 0 4
38934: PUSH
38935: LD_VAR 0 5
38939: ST_TO_ADDR
// end ;
38940: LD_VAR 0 4
38944: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38945: LD_INT 0
38947: PPUSH
38948: PPUSH
38949: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38950: LD_VAR 0 1
38954: NOT
38955: PUSH
38956: LD_VAR 0 2
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: LD_INT 4
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: IN
38979: NOT
38980: OR
38981: IFFALSE 38985
// exit ;
38983: GO 39077
// tmp := [ ] ;
38985: LD_ADDR_VAR 0 5
38989: PUSH
38990: EMPTY
38991: ST_TO_ADDR
// for i in units do
38992: LD_ADDR_VAR 0 4
38996: PUSH
38997: LD_VAR 0 1
39001: PUSH
39002: FOR_IN
39003: IFFALSE 39046
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39005: LD_ADDR_VAR 0 5
39009: PUSH
39010: LD_VAR 0 5
39014: PPUSH
39015: LD_VAR 0 5
39019: PUSH
39020: LD_INT 1
39022: PLUS
39023: PPUSH
39024: LD_VAR 0 4
39028: PPUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: CALL_OW 259
39038: PPUSH
39039: CALL_OW 2
39043: ST_TO_ADDR
39044: GO 39002
39046: POP
39047: POP
// if not tmp then
39048: LD_VAR 0 5
39052: NOT
39053: IFFALSE 39057
// exit ;
39055: GO 39077
// result := SortListByListDesc ( units , tmp ) ;
39057: LD_ADDR_VAR 0 3
39061: PUSH
39062: LD_VAR 0 1
39066: PPUSH
39067: LD_VAR 0 5
39071: PPUSH
39072: CALL_OW 77
39076: ST_TO_ADDR
// end ;
39077: LD_VAR 0 3
39081: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39082: LD_INT 0
39084: PPUSH
39085: PPUSH
39086: PPUSH
// x := GetX ( building ) ;
39087: LD_ADDR_VAR 0 4
39091: PUSH
39092: LD_VAR 0 2
39096: PPUSH
39097: CALL_OW 250
39101: ST_TO_ADDR
// y := GetY ( building ) ;
39102: LD_ADDR_VAR 0 5
39106: PUSH
39107: LD_VAR 0 2
39111: PPUSH
39112: CALL_OW 251
39116: ST_TO_ADDR
// if GetTaskList ( unit ) then
39117: LD_VAR 0 1
39121: PPUSH
39122: CALL_OW 437
39126: IFFALSE 39221
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39128: LD_STRING e
39130: PUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 437
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: PUSH
39145: LD_INT 1
39147: ARRAY
39148: EQUAL
39149: PUSH
39150: LD_VAR 0 4
39154: PUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: CALL_OW 437
39164: PUSH
39165: LD_INT 1
39167: ARRAY
39168: PUSH
39169: LD_INT 2
39171: ARRAY
39172: EQUAL
39173: AND
39174: PUSH
39175: LD_VAR 0 5
39179: PUSH
39180: LD_VAR 0 1
39184: PPUSH
39185: CALL_OW 437
39189: PUSH
39190: LD_INT 1
39192: ARRAY
39193: PUSH
39194: LD_INT 3
39196: ARRAY
39197: EQUAL
39198: AND
39199: IFFALSE 39211
// result := true else
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 1
39208: ST_TO_ADDR
39209: GO 39219
// result := false ;
39211: LD_ADDR_VAR 0 3
39215: PUSH
39216: LD_INT 0
39218: ST_TO_ADDR
// end else
39219: GO 39229
// result := false ;
39221: LD_ADDR_VAR 0 3
39225: PUSH
39226: LD_INT 0
39228: ST_TO_ADDR
// end ;
39229: LD_VAR 0 3
39233: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39234: LD_INT 0
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
// if not unit or not area then
39240: LD_VAR 0 1
39244: NOT
39245: PUSH
39246: LD_VAR 0 2
39250: NOT
39251: OR
39252: IFFALSE 39256
// exit ;
39254: GO 39420
// tmp := AreaToList ( area , i ) ;
39256: LD_ADDR_VAR 0 6
39260: PUSH
39261: LD_VAR 0 2
39265: PPUSH
39266: LD_VAR 0 5
39270: PPUSH
39271: CALL_OW 517
39275: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39276: LD_ADDR_VAR 0 5
39280: PUSH
39281: DOUBLE
39282: LD_INT 1
39284: DEC
39285: ST_TO_ADDR
39286: LD_VAR 0 6
39290: PUSH
39291: LD_INT 1
39293: ARRAY
39294: PUSH
39295: FOR_TO
39296: IFFALSE 39418
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39298: LD_ADDR_VAR 0 7
39302: PUSH
39303: LD_VAR 0 6
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PUSH
39312: LD_VAR 0 5
39316: ARRAY
39317: PUSH
39318: LD_VAR 0 6
39322: PUSH
39323: LD_INT 2
39325: ARRAY
39326: PUSH
39327: LD_VAR 0 5
39331: ARRAY
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39337: LD_VAR 0 7
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PPUSH
39346: LD_VAR 0 7
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL_OW 428
39359: PUSH
39360: LD_INT 0
39362: EQUAL
39363: IFFALSE 39416
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39365: LD_VAR 0 1
39369: PPUSH
39370: LD_VAR 0 7
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 7
39383: PUSH
39384: LD_INT 2
39386: ARRAY
39387: PPUSH
39388: LD_VAR 0 3
39392: PPUSH
39393: CALL_OW 48
// result := IsPlaced ( unit ) ;
39397: LD_ADDR_VAR 0 4
39401: PUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 305
39411: ST_TO_ADDR
// exit ;
39412: POP
39413: POP
39414: GO 39420
// end ; end ;
39416: GO 39295
39418: POP
39419: POP
// end ;
39420: LD_VAR 0 4
39424: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39425: LD_INT 0
39427: PPUSH
39428: PPUSH
39429: PPUSH
// if not side or side > 8 then
39430: LD_VAR 0 1
39434: NOT
39435: PUSH
39436: LD_VAR 0 1
39440: PUSH
39441: LD_INT 8
39443: GREATER
39444: OR
39445: IFFALSE 39449
// exit ;
39447: GO 39636
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39449: LD_ADDR_VAR 0 4
39453: PUSH
39454: LD_INT 22
39456: PUSH
39457: LD_VAR 0 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 21
39468: PUSH
39469: LD_INT 3
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 69
39484: ST_TO_ADDR
// if not tmp then
39485: LD_VAR 0 4
39489: NOT
39490: IFFALSE 39494
// exit ;
39492: GO 39636
// enable_addtolog := true ;
39494: LD_ADDR_OWVAR 81
39498: PUSH
39499: LD_INT 1
39501: ST_TO_ADDR
// AddToLog ( [ ) ;
39502: LD_STRING [
39504: PPUSH
39505: CALL_OW 561
// for i in tmp do
39509: LD_ADDR_VAR 0 3
39513: PUSH
39514: LD_VAR 0 4
39518: PUSH
39519: FOR_IN
39520: IFFALSE 39627
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39522: LD_STRING [
39524: PUSH
39525: LD_VAR 0 3
39529: PPUSH
39530: CALL_OW 266
39534: STR
39535: PUSH
39536: LD_STRING , 
39538: STR
39539: PUSH
39540: LD_VAR 0 3
39544: PPUSH
39545: CALL_OW 250
39549: STR
39550: PUSH
39551: LD_STRING , 
39553: STR
39554: PUSH
39555: LD_VAR 0 3
39559: PPUSH
39560: CALL_OW 251
39564: STR
39565: PUSH
39566: LD_STRING , 
39568: STR
39569: PUSH
39570: LD_VAR 0 3
39574: PPUSH
39575: CALL_OW 254
39579: STR
39580: PUSH
39581: LD_STRING , 
39583: STR
39584: PUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: LD_INT 1
39592: PPUSH
39593: CALL_OW 268
39597: STR
39598: PUSH
39599: LD_STRING , 
39601: STR
39602: PUSH
39603: LD_VAR 0 3
39607: PPUSH
39608: LD_INT 2
39610: PPUSH
39611: CALL_OW 268
39615: STR
39616: PUSH
39617: LD_STRING ],
39619: STR
39620: PPUSH
39621: CALL_OW 561
// end ;
39625: GO 39519
39627: POP
39628: POP
// AddToLog ( ]; ) ;
39629: LD_STRING ];
39631: PPUSH
39632: CALL_OW 561
// end ;
39636: LD_VAR 0 2
39640: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39641: LD_INT 0
39643: PPUSH
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
// if not area or not rate or not max then
39648: LD_VAR 0 1
39652: NOT
39653: PUSH
39654: LD_VAR 0 2
39658: NOT
39659: OR
39660: PUSH
39661: LD_VAR 0 4
39665: NOT
39666: OR
39667: IFFALSE 39671
// exit ;
39669: GO 39863
// while 1 do
39671: LD_INT 1
39673: IFFALSE 39863
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39675: LD_ADDR_VAR 0 9
39679: PUSH
39680: LD_VAR 0 1
39684: PPUSH
39685: LD_INT 1
39687: PPUSH
39688: CALL_OW 287
39692: PUSH
39693: LD_INT 10
39695: MUL
39696: ST_TO_ADDR
// r := rate / 10 ;
39697: LD_ADDR_VAR 0 7
39701: PUSH
39702: LD_VAR 0 2
39706: PUSH
39707: LD_INT 10
39709: DIVREAL
39710: ST_TO_ADDR
// time := 1 1$00 ;
39711: LD_ADDR_VAR 0 8
39715: PUSH
39716: LD_INT 2100
39718: ST_TO_ADDR
// if amount < min then
39719: LD_VAR 0 9
39723: PUSH
39724: LD_VAR 0 3
39728: LESS
39729: IFFALSE 39747
// r := r * 2 else
39731: LD_ADDR_VAR 0 7
39735: PUSH
39736: LD_VAR 0 7
39740: PUSH
39741: LD_INT 2
39743: MUL
39744: ST_TO_ADDR
39745: GO 39773
// if amount > max then
39747: LD_VAR 0 9
39751: PUSH
39752: LD_VAR 0 4
39756: GREATER
39757: IFFALSE 39773
// r := r / 2 ;
39759: LD_ADDR_VAR 0 7
39763: PUSH
39764: LD_VAR 0 7
39768: PUSH
39769: LD_INT 2
39771: DIVREAL
39772: ST_TO_ADDR
// time := time / r ;
39773: LD_ADDR_VAR 0 8
39777: PUSH
39778: LD_VAR 0 8
39782: PUSH
39783: LD_VAR 0 7
39787: DIVREAL
39788: ST_TO_ADDR
// if time < 0 then
39789: LD_VAR 0 8
39793: PUSH
39794: LD_INT 0
39796: LESS
39797: IFFALSE 39814
// time := time * - 1 ;
39799: LD_ADDR_VAR 0 8
39803: PUSH
39804: LD_VAR 0 8
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: MUL
39813: ST_TO_ADDR
// wait ( time ) ;
39814: LD_VAR 0 8
39818: PPUSH
39819: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39823: LD_INT 35
39825: PPUSH
39826: LD_INT 875
39828: PPUSH
39829: CALL_OW 12
39833: PPUSH
39834: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39838: LD_INT 1
39840: PPUSH
39841: LD_INT 5
39843: PPUSH
39844: CALL_OW 12
39848: PPUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_INT 1
39856: PPUSH
39857: CALL_OW 55
// end ;
39861: GO 39671
// end ;
39863: LD_VAR 0 5
39867: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39868: LD_INT 0
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
// if not turrets or not factories then
39878: LD_VAR 0 1
39882: NOT
39883: PUSH
39884: LD_VAR 0 2
39888: NOT
39889: OR
39890: IFFALSE 39894
// exit ;
39892: GO 40201
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39894: LD_ADDR_VAR 0 10
39898: PUSH
39899: LD_INT 5
39901: PUSH
39902: LD_INT 6
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 4
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 3
39921: PUSH
39922: LD_INT 5
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 24
39936: PUSH
39937: LD_INT 25
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 23
39946: PUSH
39947: LD_INT 27
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 42
39960: PUSH
39961: LD_INT 43
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 44
39970: PUSH
39971: LD_INT 46
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 45
39980: PUSH
39981: LD_INT 47
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// result := [ ] ;
39998: LD_ADDR_VAR 0 3
40002: PUSH
40003: EMPTY
40004: ST_TO_ADDR
// for i in turrets do
40005: LD_ADDR_VAR 0 4
40009: PUSH
40010: LD_VAR 0 1
40014: PUSH
40015: FOR_IN
40016: IFFALSE 40199
// begin nat := GetNation ( i ) ;
40018: LD_ADDR_VAR 0 7
40022: PUSH
40023: LD_VAR 0 4
40027: PPUSH
40028: CALL_OW 248
40032: ST_TO_ADDR
// weapon := 0 ;
40033: LD_ADDR_VAR 0 8
40037: PUSH
40038: LD_INT 0
40040: ST_TO_ADDR
// if not nat then
40041: LD_VAR 0 7
40045: NOT
40046: IFFALSE 40050
// continue ;
40048: GO 40015
// for j in list [ nat ] do
40050: LD_ADDR_VAR 0 5
40054: PUSH
40055: LD_VAR 0 10
40059: PUSH
40060: LD_VAR 0 7
40064: ARRAY
40065: PUSH
40066: FOR_IN
40067: IFFALSE 40108
// if GetBWeapon ( i ) = j [ 1 ] then
40069: LD_VAR 0 4
40073: PPUSH
40074: CALL_OW 269
40078: PUSH
40079: LD_VAR 0 5
40083: PUSH
40084: LD_INT 1
40086: ARRAY
40087: EQUAL
40088: IFFALSE 40106
// begin weapon := j [ 2 ] ;
40090: LD_ADDR_VAR 0 8
40094: PUSH
40095: LD_VAR 0 5
40099: PUSH
40100: LD_INT 2
40102: ARRAY
40103: ST_TO_ADDR
// break ;
40104: GO 40108
// end ;
40106: GO 40066
40108: POP
40109: POP
// if not weapon then
40110: LD_VAR 0 8
40114: NOT
40115: IFFALSE 40119
// continue ;
40117: GO 40015
// for k in factories do
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: LD_VAR 0 2
40128: PUSH
40129: FOR_IN
40130: IFFALSE 40195
// begin weapons := AvailableWeaponList ( k ) ;
40132: LD_ADDR_VAR 0 9
40136: PUSH
40137: LD_VAR 0 6
40141: PPUSH
40142: CALL_OW 478
40146: ST_TO_ADDR
// if not weapons then
40147: LD_VAR 0 9
40151: NOT
40152: IFFALSE 40156
// continue ;
40154: GO 40129
// if weapon in weapons then
40156: LD_VAR 0 8
40160: PUSH
40161: LD_VAR 0 9
40165: IN
40166: IFFALSE 40193
// begin result := [ i , weapon ] ;
40168: LD_ADDR_VAR 0 3
40172: PUSH
40173: LD_VAR 0 4
40177: PUSH
40178: LD_VAR 0 8
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: ST_TO_ADDR
// exit ;
40187: POP
40188: POP
40189: POP
40190: POP
40191: GO 40201
// end ; end ;
40193: GO 40129
40195: POP
40196: POP
// end ;
40197: GO 40015
40199: POP
40200: POP
// end ;
40201: LD_VAR 0 3
40205: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40206: LD_INT 0
40208: PPUSH
// if not side or side > 8 then
40209: LD_VAR 0 3
40213: NOT
40214: PUSH
40215: LD_VAR 0 3
40219: PUSH
40220: LD_INT 8
40222: GREATER
40223: OR
40224: IFFALSE 40228
// exit ;
40226: GO 40287
// if not range then
40228: LD_VAR 0 4
40232: NOT
40233: IFFALSE 40244
// range := - 12 ;
40235: LD_ADDR_VAR 0 4
40239: PUSH
40240: LD_INT 12
40242: NEG
40243: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40244: LD_VAR 0 1
40248: PPUSH
40249: LD_VAR 0 2
40253: PPUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: LD_VAR 0 4
40263: PPUSH
40264: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40268: LD_VAR 0 1
40272: PPUSH
40273: LD_VAR 0 2
40277: PPUSH
40278: LD_VAR 0 3
40282: PPUSH
40283: CALL_OW 331
// end ;
40287: LD_VAR 0 5
40291: RET
// export function Video ( mode ) ; begin
40292: LD_INT 0
40294: PPUSH
// ingame_video = mode ;
40295: LD_ADDR_OWVAR 52
40299: PUSH
40300: LD_VAR 0 1
40304: ST_TO_ADDR
// interface_hidden = mode ;
40305: LD_ADDR_OWVAR 54
40309: PUSH
40310: LD_VAR 0 1
40314: ST_TO_ADDR
// end ;
40315: LD_VAR 0 2
40319: RET
// export function Join ( array , element ) ; begin
40320: LD_INT 0
40322: PPUSH
// result := array ^ element ;
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_VAR 0 1
40332: PUSH
40333: LD_VAR 0 2
40337: ADD
40338: ST_TO_ADDR
// end ;
40339: LD_VAR 0 3
40343: RET
// export function JoinUnion ( array , element ) ; begin
40344: LD_INT 0
40346: PPUSH
// result := array union element ;
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_VAR 0 1
40356: PUSH
40357: LD_VAR 0 2
40361: UNION
40362: ST_TO_ADDR
// end ;
40363: LD_VAR 0 3
40367: RET
// export function GetBehemoths ( side ) ; begin
40368: LD_INT 0
40370: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40371: LD_ADDR_VAR 0 2
40375: PUSH
40376: LD_INT 22
40378: PUSH
40379: LD_VAR 0 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 31
40390: PUSH
40391: LD_INT 25
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PPUSH
40402: CALL_OW 69
40406: ST_TO_ADDR
// end ;
40407: LD_VAR 0 2
40411: RET
// export function Shuffle ( array ) ; var i , index ; begin
40412: LD_INT 0
40414: PPUSH
40415: PPUSH
40416: PPUSH
// result := [ ] ;
40417: LD_ADDR_VAR 0 2
40421: PUSH
40422: EMPTY
40423: ST_TO_ADDR
// if not array then
40424: LD_VAR 0 1
40428: NOT
40429: IFFALSE 40433
// exit ;
40431: GO 40532
// Randomize ;
40433: CALL_OW 10
// for i = array downto 1 do
40437: LD_ADDR_VAR 0 3
40441: PUSH
40442: DOUBLE
40443: LD_VAR 0 1
40447: INC
40448: ST_TO_ADDR
40449: LD_INT 1
40451: PUSH
40452: FOR_DOWNTO
40453: IFFALSE 40530
// begin index := rand ( 1 , array ) ;
40455: LD_ADDR_VAR 0 4
40459: PUSH
40460: LD_INT 1
40462: PPUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 12
40472: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40473: LD_ADDR_VAR 0 2
40477: PUSH
40478: LD_VAR 0 2
40482: PPUSH
40483: LD_VAR 0 2
40487: PUSH
40488: LD_INT 1
40490: PLUS
40491: PPUSH
40492: LD_VAR 0 1
40496: PUSH
40497: LD_VAR 0 4
40501: ARRAY
40502: PPUSH
40503: CALL_OW 2
40507: ST_TO_ADDR
// array := Delete ( array , index ) ;
40508: LD_ADDR_VAR 0 1
40512: PUSH
40513: LD_VAR 0 1
40517: PPUSH
40518: LD_VAR 0 4
40522: PPUSH
40523: CALL_OW 3
40527: ST_TO_ADDR
// end ;
40528: GO 40452
40530: POP
40531: POP
// end ;
40532: LD_VAR 0 2
40536: RET
// export function GetBaseMaterials ( base ) ; begin
40537: LD_INT 0
40539: PPUSH
// result := [ 0 , 0 , 0 ] ;
40540: LD_ADDR_VAR 0 2
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// if not base then
40559: LD_VAR 0 1
40563: NOT
40564: IFFALSE 40568
// exit ;
40566: GO 40617
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40568: LD_ADDR_VAR 0 2
40572: PUSH
40573: LD_VAR 0 1
40577: PPUSH
40578: LD_INT 1
40580: PPUSH
40581: CALL_OW 275
40585: PUSH
40586: LD_VAR 0 1
40590: PPUSH
40591: LD_INT 2
40593: PPUSH
40594: CALL_OW 275
40598: PUSH
40599: LD_VAR 0 1
40603: PPUSH
40604: LD_INT 3
40606: PPUSH
40607: CALL_OW 275
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// end ;
40617: LD_VAR 0 2
40621: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40622: LD_INT 0
40624: PPUSH
40625: PPUSH
// result := array ;
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_VAR 0 1
40635: ST_TO_ADDR
// if size > 0 then
40636: LD_VAR 0 2
40640: PUSH
40641: LD_INT 0
40643: GREATER
40644: IFFALSE 40690
// for i := array downto size do
40646: LD_ADDR_VAR 0 4
40650: PUSH
40651: DOUBLE
40652: LD_VAR 0 1
40656: INC
40657: ST_TO_ADDR
40658: LD_VAR 0 2
40662: PUSH
40663: FOR_DOWNTO
40664: IFFALSE 40688
// result := Delete ( result , result ) ;
40666: LD_ADDR_VAR 0 3
40670: PUSH
40671: LD_VAR 0 3
40675: PPUSH
40676: LD_VAR 0 3
40680: PPUSH
40681: CALL_OW 3
40685: ST_TO_ADDR
40686: GO 40663
40688: POP
40689: POP
// end ;
40690: LD_VAR 0 3
40694: RET
// export function ComExit ( unit ) ; var tmp ; begin
40695: LD_INT 0
40697: PPUSH
40698: PPUSH
// if not IsInUnit ( unit ) then
40699: LD_VAR 0 1
40703: PPUSH
40704: CALL_OW 310
40708: NOT
40709: IFFALSE 40713
// exit ;
40711: GO 40773
// tmp := IsInUnit ( unit ) ;
40713: LD_ADDR_VAR 0 3
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 310
40727: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40728: LD_VAR 0 3
40732: PPUSH
40733: CALL_OW 247
40737: PUSH
40738: LD_INT 2
40740: EQUAL
40741: IFFALSE 40754
// ComExitVehicle ( unit ) else
40743: LD_VAR 0 1
40747: PPUSH
40748: CALL_OW 121
40752: GO 40763
// ComExitBuilding ( unit ) ;
40754: LD_VAR 0 1
40758: PPUSH
40759: CALL_OW 122
// result := tmp ;
40763: LD_ADDR_VAR 0 2
40767: PUSH
40768: LD_VAR 0 3
40772: ST_TO_ADDR
// end ;
40773: LD_VAR 0 2
40777: RET
// export function ResetHc ; begin
40778: LD_INT 0
40780: PPUSH
// InitHc ;
40781: CALL_OW 19
// hc_importance := 0 ;
40785: LD_ADDR_OWVAR 32
40789: PUSH
40790: LD_INT 0
40792: ST_TO_ADDR
// end ; end_of_file
40793: LD_VAR 0 1
40797: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
40798: LD_INT 0
40800: PPUSH
40801: PPUSH
// skirmish := false ;
40802: LD_ADDR_EXP 12
40806: PUSH
40807: LD_INT 0
40809: ST_TO_ADDR
// debug_mc := false ;
40810: LD_ADDR_EXP 13
40814: PUSH
40815: LD_INT 0
40817: ST_TO_ADDR
// mc_bases := [ ] ;
40818: LD_ADDR_EXP 14
40822: PUSH
40823: EMPTY
40824: ST_TO_ADDR
// mc_sides := [ ] ;
40825: LD_ADDR_EXP 40
40829: PUSH
40830: EMPTY
40831: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
40832: LD_ADDR_EXP 15
40836: PUSH
40837: EMPTY
40838: ST_TO_ADDR
// mc_building_repairs := [ ] ;
40839: LD_ADDR_EXP 16
40843: PUSH
40844: EMPTY
40845: ST_TO_ADDR
// mc_need_heal := [ ] ;
40846: LD_ADDR_EXP 17
40850: PUSH
40851: EMPTY
40852: ST_TO_ADDR
// mc_healers := [ ] ;
40853: LD_ADDR_EXP 18
40857: PUSH
40858: EMPTY
40859: ST_TO_ADDR
// mc_build_list := [ ] ;
40860: LD_ADDR_EXP 19
40864: PUSH
40865: EMPTY
40866: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
40867: LD_ADDR_EXP 46
40871: PUSH
40872: EMPTY
40873: ST_TO_ADDR
// mc_builders := [ ] ;
40874: LD_ADDR_EXP 20
40878: PUSH
40879: EMPTY
40880: ST_TO_ADDR
// mc_construct_list := [ ] ;
40881: LD_ADDR_EXP 21
40885: PUSH
40886: EMPTY
40887: ST_TO_ADDR
// mc_turret_list := [ ] ;
40888: LD_ADDR_EXP 22
40892: PUSH
40893: EMPTY
40894: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
40895: LD_ADDR_EXP 23
40899: PUSH
40900: EMPTY
40901: ST_TO_ADDR
// mc_miners := [ ] ;
40902: LD_ADDR_EXP 28
40906: PUSH
40907: EMPTY
40908: ST_TO_ADDR
// mc_mines := [ ] ;
40909: LD_ADDR_EXP 27
40913: PUSH
40914: EMPTY
40915: ST_TO_ADDR
// mc_minefields := [ ] ;
40916: LD_ADDR_EXP 29
40920: PUSH
40921: EMPTY
40922: ST_TO_ADDR
// mc_crates := [ ] ;
40923: LD_ADDR_EXP 30
40927: PUSH
40928: EMPTY
40929: ST_TO_ADDR
// mc_crates_collector := [ ] ;
40930: LD_ADDR_EXP 31
40934: PUSH
40935: EMPTY
40936: ST_TO_ADDR
// mc_crates_area := [ ] ;
40937: LD_ADDR_EXP 32
40941: PUSH
40942: EMPTY
40943: ST_TO_ADDR
// mc_vehicles := [ ] ;
40944: LD_ADDR_EXP 33
40948: PUSH
40949: EMPTY
40950: ST_TO_ADDR
// mc_attack := [ ] ;
40951: LD_ADDR_EXP 34
40955: PUSH
40956: EMPTY
40957: ST_TO_ADDR
// mc_produce := [ ] ;
40958: LD_ADDR_EXP 35
40962: PUSH
40963: EMPTY
40964: ST_TO_ADDR
// mc_defender := [ ] ;
40965: LD_ADDR_EXP 36
40969: PUSH
40970: EMPTY
40971: ST_TO_ADDR
// mc_parking := [ ] ;
40972: LD_ADDR_EXP 38
40976: PUSH
40977: EMPTY
40978: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
40979: LD_ADDR_EXP 24
40983: PUSH
40984: EMPTY
40985: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
40986: LD_ADDR_EXP 26
40990: PUSH
40991: EMPTY
40992: ST_TO_ADDR
// mc_scan := [ ] ;
40993: LD_ADDR_EXP 37
40997: PUSH
40998: EMPTY
40999: ST_TO_ADDR
// mc_scan_area := [ ] ;
41000: LD_ADDR_EXP 39
41004: PUSH
41005: EMPTY
41006: ST_TO_ADDR
// mc_tech := [ ] ;
41007: LD_ADDR_EXP 41
41011: PUSH
41012: EMPTY
41013: ST_TO_ADDR
// mc_class := [ ] ;
41014: LD_ADDR_EXP 55
41018: PUSH
41019: EMPTY
41020: ST_TO_ADDR
// mc_class_case_use := [ ] ;
41021: LD_ADDR_EXP 56
41025: PUSH
41026: EMPTY
41027: ST_TO_ADDR
// end ;
41028: LD_VAR 0 1
41032: RET
// export function MC_Kill ( base ) ; begin
41033: LD_INT 0
41035: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
41036: LD_ADDR_EXP 14
41040: PUSH
41041: LD_EXP 14
41045: PPUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: EMPTY
41052: PPUSH
41053: CALL_OW 1
41057: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
41058: LD_ADDR_EXP 15
41062: PUSH
41063: LD_EXP 15
41067: PPUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: EMPTY
41074: PPUSH
41075: CALL_OW 1
41079: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
41080: LD_ADDR_EXP 16
41084: PUSH
41085: LD_EXP 16
41089: PPUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: EMPTY
41096: PPUSH
41097: CALL_OW 1
41101: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
41102: LD_ADDR_EXP 17
41106: PUSH
41107: LD_EXP 17
41111: PPUSH
41112: LD_VAR 0 1
41116: PPUSH
41117: EMPTY
41118: PPUSH
41119: CALL_OW 1
41123: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
41124: LD_ADDR_EXP 18
41128: PUSH
41129: LD_EXP 18
41133: PPUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: EMPTY
41140: PPUSH
41141: CALL_OW 1
41145: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
41146: LD_ADDR_EXP 19
41150: PUSH
41151: LD_EXP 19
41155: PPUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: EMPTY
41162: PPUSH
41163: CALL_OW 1
41167: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
41168: LD_ADDR_EXP 20
41172: PUSH
41173: LD_EXP 20
41177: PPUSH
41178: LD_VAR 0 1
41182: PPUSH
41183: EMPTY
41184: PPUSH
41185: CALL_OW 1
41189: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
41190: LD_ADDR_EXP 21
41194: PUSH
41195: LD_EXP 21
41199: PPUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: EMPTY
41206: PPUSH
41207: CALL_OW 1
41211: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
41212: LD_ADDR_EXP 22
41216: PUSH
41217: LD_EXP 22
41221: PPUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: EMPTY
41228: PPUSH
41229: CALL_OW 1
41233: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
41234: LD_ADDR_EXP 23
41238: PUSH
41239: LD_EXP 23
41243: PPUSH
41244: LD_VAR 0 1
41248: PPUSH
41249: EMPTY
41250: PPUSH
41251: CALL_OW 1
41255: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
41256: LD_ADDR_EXP 24
41260: PUSH
41261: LD_EXP 24
41265: PPUSH
41266: LD_VAR 0 1
41270: PPUSH
41271: EMPTY
41272: PPUSH
41273: CALL_OW 1
41277: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
41278: LD_ADDR_EXP 25
41282: PUSH
41283: LD_EXP 25
41287: PPUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: LD_INT 0
41295: PPUSH
41296: CALL_OW 1
41300: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
41301: LD_ADDR_EXP 26
41305: PUSH
41306: LD_EXP 26
41310: PPUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: EMPTY
41317: PPUSH
41318: CALL_OW 1
41322: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
41323: LD_ADDR_EXP 27
41327: PUSH
41328: LD_EXP 27
41332: PPUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: EMPTY
41339: PPUSH
41340: CALL_OW 1
41344: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
41345: LD_ADDR_EXP 28
41349: PUSH
41350: LD_EXP 28
41354: PPUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: EMPTY
41361: PPUSH
41362: CALL_OW 1
41366: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
41367: LD_ADDR_EXP 29
41371: PUSH
41372: LD_EXP 29
41376: PPUSH
41377: LD_VAR 0 1
41381: PPUSH
41382: EMPTY
41383: PPUSH
41384: CALL_OW 1
41388: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
41389: LD_ADDR_EXP 30
41393: PUSH
41394: LD_EXP 30
41398: PPUSH
41399: LD_VAR 0 1
41403: PPUSH
41404: EMPTY
41405: PPUSH
41406: CALL_OW 1
41410: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
41411: LD_ADDR_EXP 31
41415: PUSH
41416: LD_EXP 31
41420: PPUSH
41421: LD_VAR 0 1
41425: PPUSH
41426: EMPTY
41427: PPUSH
41428: CALL_OW 1
41432: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
41433: LD_ADDR_EXP 32
41437: PUSH
41438: LD_EXP 32
41442: PPUSH
41443: LD_VAR 0 1
41447: PPUSH
41448: EMPTY
41449: PPUSH
41450: CALL_OW 1
41454: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
41455: LD_ADDR_EXP 33
41459: PUSH
41460: LD_EXP 33
41464: PPUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: EMPTY
41471: PPUSH
41472: CALL_OW 1
41476: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
41477: LD_ADDR_EXP 34
41481: PUSH
41482: LD_EXP 34
41486: PPUSH
41487: LD_VAR 0 1
41491: PPUSH
41492: EMPTY
41493: PPUSH
41494: CALL_OW 1
41498: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
41499: LD_ADDR_EXP 35
41503: PUSH
41504: LD_EXP 35
41508: PPUSH
41509: LD_VAR 0 1
41513: PPUSH
41514: EMPTY
41515: PPUSH
41516: CALL_OW 1
41520: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
41521: LD_ADDR_EXP 36
41525: PUSH
41526: LD_EXP 36
41530: PPUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: EMPTY
41537: PPUSH
41538: CALL_OW 1
41542: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
41543: LD_ADDR_EXP 37
41547: PUSH
41548: LD_EXP 37
41552: PPUSH
41553: LD_VAR 0 1
41557: PPUSH
41558: EMPTY
41559: PPUSH
41560: CALL_OW 1
41564: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
41565: LD_ADDR_EXP 38
41569: PUSH
41570: LD_EXP 38
41574: PPUSH
41575: LD_VAR 0 1
41579: PPUSH
41580: EMPTY
41581: PPUSH
41582: CALL_OW 1
41586: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
41587: LD_ADDR_EXP 39
41591: PUSH
41592: LD_EXP 39
41596: PPUSH
41597: LD_VAR 0 1
41601: PPUSH
41602: EMPTY
41603: PPUSH
41604: CALL_OW 1
41608: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
41609: LD_ADDR_EXP 41
41613: PUSH
41614: LD_EXP 41
41618: PPUSH
41619: LD_VAR 0 1
41623: PPUSH
41624: EMPTY
41625: PPUSH
41626: CALL_OW 1
41630: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
41631: LD_ADDR_EXP 43
41635: PUSH
41636: LD_EXP 43
41640: PPUSH
41641: LD_VAR 0 1
41645: PPUSH
41646: EMPTY
41647: PPUSH
41648: CALL_OW 1
41652: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
41653: LD_ADDR_EXP 44
41657: PUSH
41658: LD_EXP 44
41662: PPUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: EMPTY
41669: PPUSH
41670: CALL_OW 1
41674: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
41675: LD_ADDR_EXP 45
41679: PUSH
41680: LD_EXP 45
41684: PPUSH
41685: LD_VAR 0 1
41689: PPUSH
41690: EMPTY
41691: PPUSH
41692: CALL_OW 1
41696: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
41697: LD_ADDR_EXP 46
41701: PUSH
41702: LD_EXP 46
41706: PPUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: EMPTY
41713: PPUSH
41714: CALL_OW 1
41718: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
41719: LD_ADDR_EXP 47
41723: PUSH
41724: LD_EXP 47
41728: PPUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: EMPTY
41735: PPUSH
41736: CALL_OW 1
41740: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
41741: LD_ADDR_EXP 48
41745: PUSH
41746: LD_EXP 48
41750: PPUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: EMPTY
41757: PPUSH
41758: CALL_OW 1
41762: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
41763: LD_ADDR_EXP 49
41767: PUSH
41768: LD_EXP 49
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: EMPTY
41779: PPUSH
41780: CALL_OW 1
41784: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
41785: LD_ADDR_EXP 50
41789: PUSH
41790: LD_EXP 50
41794: PPUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: EMPTY
41801: PPUSH
41802: CALL_OW 1
41806: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
41807: LD_ADDR_EXP 51
41811: PUSH
41812: LD_EXP 51
41816: PPUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: EMPTY
41823: PPUSH
41824: CALL_OW 1
41828: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
41829: LD_ADDR_EXP 52
41833: PUSH
41834: LD_EXP 52
41838: PPUSH
41839: LD_VAR 0 1
41843: PPUSH
41844: EMPTY
41845: PPUSH
41846: CALL_OW 1
41850: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
41851: LD_ADDR_EXP 53
41855: PUSH
41856: LD_EXP 53
41860: PPUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: EMPTY
41867: PPUSH
41868: CALL_OW 1
41872: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
41873: LD_ADDR_EXP 54
41877: PUSH
41878: LD_EXP 54
41882: PPUSH
41883: LD_VAR 0 1
41887: PPUSH
41888: EMPTY
41889: PPUSH
41890: CALL_OW 1
41894: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
41895: LD_ADDR_EXP 55
41899: PUSH
41900: LD_EXP 55
41904: PPUSH
41905: LD_VAR 0 1
41909: PPUSH
41910: EMPTY
41911: PPUSH
41912: CALL_OW 1
41916: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
41917: LD_ADDR_EXP 56
41921: PUSH
41922: LD_EXP 56
41926: PPUSH
41927: LD_VAR 0 1
41931: PPUSH
41932: LD_INT 0
41934: PPUSH
41935: CALL_OW 1
41939: ST_TO_ADDR
// end ;
41940: LD_VAR 0 2
41944: RET
// export function MC_Add ( side , units ) ; var base ; begin
41945: LD_INT 0
41947: PPUSH
41948: PPUSH
// base := mc_bases + 1 ;
41949: LD_ADDR_VAR 0 4
41953: PUSH
41954: LD_EXP 14
41958: PUSH
41959: LD_INT 1
41961: PLUS
41962: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
41963: LD_ADDR_EXP 40
41967: PUSH
41968: LD_EXP 40
41972: PPUSH
41973: LD_VAR 0 4
41977: PPUSH
41978: LD_VAR 0 1
41982: PPUSH
41983: CALL_OW 1
41987: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
41988: LD_ADDR_EXP 14
41992: PUSH
41993: LD_EXP 14
41997: PPUSH
41998: LD_VAR 0 4
42002: PPUSH
42003: LD_VAR 0 2
42007: PPUSH
42008: CALL_OW 1
42012: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
42013: LD_ADDR_EXP 15
42017: PUSH
42018: LD_EXP 15
42022: PPUSH
42023: LD_VAR 0 4
42027: PPUSH
42028: EMPTY
42029: PPUSH
42030: CALL_OW 1
42034: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
42035: LD_ADDR_EXP 16
42039: PUSH
42040: LD_EXP 16
42044: PPUSH
42045: LD_VAR 0 4
42049: PPUSH
42050: EMPTY
42051: PPUSH
42052: CALL_OW 1
42056: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
42057: LD_ADDR_EXP 17
42061: PUSH
42062: LD_EXP 17
42066: PPUSH
42067: LD_VAR 0 4
42071: PPUSH
42072: EMPTY
42073: PPUSH
42074: CALL_OW 1
42078: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
42079: LD_ADDR_EXP 18
42083: PUSH
42084: LD_EXP 18
42088: PPUSH
42089: LD_VAR 0 4
42093: PPUSH
42094: EMPTY
42095: PPUSH
42096: CALL_OW 1
42100: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
42101: LD_ADDR_EXP 19
42105: PUSH
42106: LD_EXP 19
42110: PPUSH
42111: LD_VAR 0 4
42115: PPUSH
42116: EMPTY
42117: PPUSH
42118: CALL_OW 1
42122: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
42123: LD_ADDR_EXP 20
42127: PUSH
42128: LD_EXP 20
42132: PPUSH
42133: LD_VAR 0 4
42137: PPUSH
42138: EMPTY
42139: PPUSH
42140: CALL_OW 1
42144: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
42145: LD_ADDR_EXP 21
42149: PUSH
42150: LD_EXP 21
42154: PPUSH
42155: LD_VAR 0 4
42159: PPUSH
42160: EMPTY
42161: PPUSH
42162: CALL_OW 1
42166: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
42167: LD_ADDR_EXP 22
42171: PUSH
42172: LD_EXP 22
42176: PPUSH
42177: LD_VAR 0 4
42181: PPUSH
42182: EMPTY
42183: PPUSH
42184: CALL_OW 1
42188: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
42189: LD_ADDR_EXP 23
42193: PUSH
42194: LD_EXP 23
42198: PPUSH
42199: LD_VAR 0 4
42203: PPUSH
42204: EMPTY
42205: PPUSH
42206: CALL_OW 1
42210: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
42211: LD_ADDR_EXP 24
42215: PUSH
42216: LD_EXP 24
42220: PPUSH
42221: LD_VAR 0 4
42225: PPUSH
42226: EMPTY
42227: PPUSH
42228: CALL_OW 1
42232: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
42233: LD_ADDR_EXP 25
42237: PUSH
42238: LD_EXP 25
42242: PPUSH
42243: LD_VAR 0 4
42247: PPUSH
42248: LD_INT 0
42250: PPUSH
42251: CALL_OW 1
42255: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
42256: LD_ADDR_EXP 26
42260: PUSH
42261: LD_EXP 26
42265: PPUSH
42266: LD_VAR 0 4
42270: PPUSH
42271: EMPTY
42272: PPUSH
42273: CALL_OW 1
42277: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
42278: LD_ADDR_EXP 27
42282: PUSH
42283: LD_EXP 27
42287: PPUSH
42288: LD_VAR 0 4
42292: PPUSH
42293: EMPTY
42294: PPUSH
42295: CALL_OW 1
42299: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
42300: LD_ADDR_EXP 28
42304: PUSH
42305: LD_EXP 28
42309: PPUSH
42310: LD_VAR 0 4
42314: PPUSH
42315: EMPTY
42316: PPUSH
42317: CALL_OW 1
42321: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
42322: LD_ADDR_EXP 29
42326: PUSH
42327: LD_EXP 29
42331: PPUSH
42332: LD_VAR 0 4
42336: PPUSH
42337: EMPTY
42338: PPUSH
42339: CALL_OW 1
42343: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
42344: LD_ADDR_EXP 30
42348: PUSH
42349: LD_EXP 30
42353: PPUSH
42354: LD_VAR 0 4
42358: PPUSH
42359: EMPTY
42360: PPUSH
42361: CALL_OW 1
42365: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
42366: LD_ADDR_EXP 31
42370: PUSH
42371: LD_EXP 31
42375: PPUSH
42376: LD_VAR 0 4
42380: PPUSH
42381: EMPTY
42382: PPUSH
42383: CALL_OW 1
42387: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
42388: LD_ADDR_EXP 32
42392: PUSH
42393: LD_EXP 32
42397: PPUSH
42398: LD_VAR 0 4
42402: PPUSH
42403: EMPTY
42404: PPUSH
42405: CALL_OW 1
42409: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
42410: LD_ADDR_EXP 33
42414: PUSH
42415: LD_EXP 33
42419: PPUSH
42420: LD_VAR 0 4
42424: PPUSH
42425: EMPTY
42426: PPUSH
42427: CALL_OW 1
42431: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
42432: LD_ADDR_EXP 34
42436: PUSH
42437: LD_EXP 34
42441: PPUSH
42442: LD_VAR 0 4
42446: PPUSH
42447: EMPTY
42448: PPUSH
42449: CALL_OW 1
42453: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
42454: LD_ADDR_EXP 35
42458: PUSH
42459: LD_EXP 35
42463: PPUSH
42464: LD_VAR 0 4
42468: PPUSH
42469: EMPTY
42470: PPUSH
42471: CALL_OW 1
42475: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
42476: LD_ADDR_EXP 36
42480: PUSH
42481: LD_EXP 36
42485: PPUSH
42486: LD_VAR 0 4
42490: PPUSH
42491: EMPTY
42492: PPUSH
42493: CALL_OW 1
42497: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
42498: LD_ADDR_EXP 37
42502: PUSH
42503: LD_EXP 37
42507: PPUSH
42508: LD_VAR 0 4
42512: PPUSH
42513: EMPTY
42514: PPUSH
42515: CALL_OW 1
42519: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
42520: LD_ADDR_EXP 38
42524: PUSH
42525: LD_EXP 38
42529: PPUSH
42530: LD_VAR 0 4
42534: PPUSH
42535: EMPTY
42536: PPUSH
42537: CALL_OW 1
42541: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
42542: LD_ADDR_EXP 39
42546: PUSH
42547: LD_EXP 39
42551: PPUSH
42552: LD_VAR 0 4
42556: PPUSH
42557: EMPTY
42558: PPUSH
42559: CALL_OW 1
42563: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
42564: LD_ADDR_EXP 41
42568: PUSH
42569: LD_EXP 41
42573: PPUSH
42574: LD_VAR 0 4
42578: PPUSH
42579: EMPTY
42580: PPUSH
42581: CALL_OW 1
42585: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
42586: LD_ADDR_EXP 43
42590: PUSH
42591: LD_EXP 43
42595: PPUSH
42596: LD_VAR 0 4
42600: PPUSH
42601: EMPTY
42602: PPUSH
42603: CALL_OW 1
42607: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
42608: LD_ADDR_EXP 44
42612: PUSH
42613: LD_EXP 44
42617: PPUSH
42618: LD_VAR 0 4
42622: PPUSH
42623: EMPTY
42624: PPUSH
42625: CALL_OW 1
42629: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
42630: LD_ADDR_EXP 45
42634: PUSH
42635: LD_EXP 45
42639: PPUSH
42640: LD_VAR 0 4
42644: PPUSH
42645: EMPTY
42646: PPUSH
42647: CALL_OW 1
42651: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
42652: LD_ADDR_EXP 46
42656: PUSH
42657: LD_EXP 46
42661: PPUSH
42662: LD_VAR 0 4
42666: PPUSH
42667: EMPTY
42668: PPUSH
42669: CALL_OW 1
42673: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
42674: LD_ADDR_EXP 47
42678: PUSH
42679: LD_EXP 47
42683: PPUSH
42684: LD_VAR 0 4
42688: PPUSH
42689: EMPTY
42690: PPUSH
42691: CALL_OW 1
42695: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
42696: LD_ADDR_EXP 48
42700: PUSH
42701: LD_EXP 48
42705: PPUSH
42706: LD_VAR 0 4
42710: PPUSH
42711: EMPTY
42712: PPUSH
42713: CALL_OW 1
42717: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
42718: LD_ADDR_EXP 49
42722: PUSH
42723: LD_EXP 49
42727: PPUSH
42728: LD_VAR 0 4
42732: PPUSH
42733: EMPTY
42734: PPUSH
42735: CALL_OW 1
42739: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
42740: LD_ADDR_EXP 50
42744: PUSH
42745: LD_EXP 50
42749: PPUSH
42750: LD_VAR 0 4
42754: PPUSH
42755: EMPTY
42756: PPUSH
42757: CALL_OW 1
42761: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
42762: LD_ADDR_EXP 51
42766: PUSH
42767: LD_EXP 51
42771: PPUSH
42772: LD_VAR 0 4
42776: PPUSH
42777: EMPTY
42778: PPUSH
42779: CALL_OW 1
42783: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
42784: LD_ADDR_EXP 52
42788: PUSH
42789: LD_EXP 52
42793: PPUSH
42794: LD_VAR 0 4
42798: PPUSH
42799: EMPTY
42800: PPUSH
42801: CALL_OW 1
42805: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
42806: LD_ADDR_EXP 53
42810: PUSH
42811: LD_EXP 53
42815: PPUSH
42816: LD_VAR 0 4
42820: PPUSH
42821: EMPTY
42822: PPUSH
42823: CALL_OW 1
42827: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
42828: LD_ADDR_EXP 54
42832: PUSH
42833: LD_EXP 54
42837: PPUSH
42838: LD_VAR 0 4
42842: PPUSH
42843: EMPTY
42844: PPUSH
42845: CALL_OW 1
42849: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
42850: LD_ADDR_EXP 55
42854: PUSH
42855: LD_EXP 55
42859: PPUSH
42860: LD_VAR 0 4
42864: PPUSH
42865: EMPTY
42866: PPUSH
42867: CALL_OW 1
42871: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
42872: LD_ADDR_EXP 56
42876: PUSH
42877: LD_EXP 56
42881: PPUSH
42882: LD_VAR 0 4
42886: PPUSH
42887: LD_INT 0
42889: PPUSH
42890: CALL_OW 1
42894: ST_TO_ADDR
// result := base ;
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_VAR 0 4
42904: ST_TO_ADDR
// end ;
42905: LD_VAR 0 3
42909: RET
// export function MC_Start ( ) ; var i ; begin
42910: LD_INT 0
42912: PPUSH
42913: PPUSH
// for i = 1 to mc_bases do
42914: LD_ADDR_VAR 0 2
42918: PUSH
42919: DOUBLE
42920: LD_INT 1
42922: DEC
42923: ST_TO_ADDR
42924: LD_EXP 14
42928: PUSH
42929: FOR_TO
42930: IFFALSE 44007
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
42932: LD_ADDR_EXP 14
42936: PUSH
42937: LD_EXP 14
42941: PPUSH
42942: LD_VAR 0 2
42946: PPUSH
42947: LD_EXP 14
42951: PUSH
42952: LD_VAR 0 2
42956: ARRAY
42957: PUSH
42958: LD_INT 0
42960: DIFF
42961: PPUSH
42962: CALL_OW 1
42966: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
42967: LD_ADDR_EXP 15
42971: PUSH
42972: LD_EXP 15
42976: PPUSH
42977: LD_VAR 0 2
42981: PPUSH
42982: EMPTY
42983: PPUSH
42984: CALL_OW 1
42988: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
42989: LD_ADDR_EXP 16
42993: PUSH
42994: LD_EXP 16
42998: PPUSH
42999: LD_VAR 0 2
43003: PPUSH
43004: EMPTY
43005: PPUSH
43006: CALL_OW 1
43010: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
43011: LD_ADDR_EXP 17
43015: PUSH
43016: LD_EXP 17
43020: PPUSH
43021: LD_VAR 0 2
43025: PPUSH
43026: EMPTY
43027: PPUSH
43028: CALL_OW 1
43032: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
43033: LD_ADDR_EXP 18
43037: PUSH
43038: LD_EXP 18
43042: PPUSH
43043: LD_VAR 0 2
43047: PPUSH
43048: EMPTY
43049: PUSH
43050: EMPTY
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PPUSH
43056: CALL_OW 1
43060: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
43061: LD_ADDR_EXP 19
43065: PUSH
43066: LD_EXP 19
43070: PPUSH
43071: LD_VAR 0 2
43075: PPUSH
43076: EMPTY
43077: PPUSH
43078: CALL_OW 1
43082: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
43083: LD_ADDR_EXP 46
43087: PUSH
43088: LD_EXP 46
43092: PPUSH
43093: LD_VAR 0 2
43097: PPUSH
43098: EMPTY
43099: PPUSH
43100: CALL_OW 1
43104: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
43105: LD_ADDR_EXP 20
43109: PUSH
43110: LD_EXP 20
43114: PPUSH
43115: LD_VAR 0 2
43119: PPUSH
43120: EMPTY
43121: PPUSH
43122: CALL_OW 1
43126: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
43127: LD_ADDR_EXP 21
43131: PUSH
43132: LD_EXP 21
43136: PPUSH
43137: LD_VAR 0 2
43141: PPUSH
43142: EMPTY
43143: PPUSH
43144: CALL_OW 1
43148: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
43149: LD_ADDR_EXP 22
43153: PUSH
43154: LD_EXP 22
43158: PPUSH
43159: LD_VAR 0 2
43163: PPUSH
43164: LD_EXP 14
43168: PUSH
43169: LD_VAR 0 2
43173: ARRAY
43174: PPUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 30
43180: PUSH
43181: LD_INT 32
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 30
43190: PUSH
43191: LD_INT 33
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: PPUSH
43203: CALL_OW 72
43207: PPUSH
43208: CALL_OW 1
43212: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
43213: LD_ADDR_EXP 23
43217: PUSH
43218: LD_EXP 23
43222: PPUSH
43223: LD_VAR 0 2
43227: PPUSH
43228: LD_EXP 14
43232: PUSH
43233: LD_VAR 0 2
43237: ARRAY
43238: PPUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 30
43244: PUSH
43245: LD_INT 32
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 30
43254: PUSH
43255: LD_INT 31
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 58
43269: PUSH
43270: EMPTY
43271: LIST
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PPUSH
43277: CALL_OW 72
43281: PPUSH
43282: CALL_OW 1
43286: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
43287: LD_ADDR_EXP 24
43291: PUSH
43292: LD_EXP 24
43296: PPUSH
43297: LD_VAR 0 2
43301: PPUSH
43302: EMPTY
43303: PPUSH
43304: CALL_OW 1
43308: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
43309: LD_ADDR_EXP 28
43313: PUSH
43314: LD_EXP 28
43318: PPUSH
43319: LD_VAR 0 2
43323: PPUSH
43324: EMPTY
43325: PPUSH
43326: CALL_OW 1
43330: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
43331: LD_ADDR_EXP 27
43335: PUSH
43336: LD_EXP 27
43340: PPUSH
43341: LD_VAR 0 2
43345: PPUSH
43346: EMPTY
43347: PPUSH
43348: CALL_OW 1
43352: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
43353: LD_ADDR_EXP 29
43357: PUSH
43358: LD_EXP 29
43362: PPUSH
43363: LD_VAR 0 2
43367: PPUSH
43368: EMPTY
43369: PPUSH
43370: CALL_OW 1
43374: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
43375: LD_ADDR_EXP 30
43379: PUSH
43380: LD_EXP 30
43384: PPUSH
43385: LD_VAR 0 2
43389: PPUSH
43390: EMPTY
43391: PPUSH
43392: CALL_OW 1
43396: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
43397: LD_ADDR_EXP 31
43401: PUSH
43402: LD_EXP 31
43406: PPUSH
43407: LD_VAR 0 2
43411: PPUSH
43412: EMPTY
43413: PPUSH
43414: CALL_OW 1
43418: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
43419: LD_ADDR_EXP 32
43423: PUSH
43424: LD_EXP 32
43428: PPUSH
43429: LD_VAR 0 2
43433: PPUSH
43434: EMPTY
43435: PPUSH
43436: CALL_OW 1
43440: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
43441: LD_ADDR_EXP 33
43445: PUSH
43446: LD_EXP 33
43450: PPUSH
43451: LD_VAR 0 2
43455: PPUSH
43456: EMPTY
43457: PPUSH
43458: CALL_OW 1
43462: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
43463: LD_ADDR_EXP 34
43467: PUSH
43468: LD_EXP 34
43472: PPUSH
43473: LD_VAR 0 2
43477: PPUSH
43478: EMPTY
43479: PPUSH
43480: CALL_OW 1
43484: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
43485: LD_ADDR_EXP 35
43489: PUSH
43490: LD_EXP 35
43494: PPUSH
43495: LD_VAR 0 2
43499: PPUSH
43500: EMPTY
43501: PPUSH
43502: CALL_OW 1
43506: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43507: LD_ADDR_EXP 36
43511: PUSH
43512: LD_EXP 36
43516: PPUSH
43517: LD_VAR 0 2
43521: PPUSH
43522: EMPTY
43523: PPUSH
43524: CALL_OW 1
43528: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
43529: LD_ADDR_EXP 25
43533: PUSH
43534: LD_EXP 25
43538: PPUSH
43539: LD_VAR 0 2
43543: PPUSH
43544: LD_INT 0
43546: PPUSH
43547: CALL_OW 1
43551: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
43552: LD_ADDR_EXP 38
43556: PUSH
43557: LD_EXP 38
43561: PPUSH
43562: LD_VAR 0 2
43566: PPUSH
43567: LD_INT 0
43569: PPUSH
43570: CALL_OW 1
43574: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
43575: LD_ADDR_EXP 26
43579: PUSH
43580: LD_EXP 26
43584: PPUSH
43585: LD_VAR 0 2
43589: PPUSH
43590: EMPTY
43591: PPUSH
43592: CALL_OW 1
43596: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
43597: LD_ADDR_EXP 37
43601: PUSH
43602: LD_EXP 37
43606: PPUSH
43607: LD_VAR 0 2
43611: PPUSH
43612: LD_INT 0
43614: PPUSH
43615: CALL_OW 1
43619: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
43620: LD_ADDR_EXP 39
43624: PUSH
43625: LD_EXP 39
43629: PPUSH
43630: LD_VAR 0 2
43634: PPUSH
43635: EMPTY
43636: PPUSH
43637: CALL_OW 1
43641: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
43642: LD_ADDR_EXP 42
43646: PUSH
43647: LD_EXP 42
43651: PPUSH
43652: LD_VAR 0 2
43656: PPUSH
43657: LD_INT 0
43659: PPUSH
43660: CALL_OW 1
43664: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
43665: LD_ADDR_EXP 43
43669: PUSH
43670: LD_EXP 43
43674: PPUSH
43675: LD_VAR 0 2
43679: PPUSH
43680: EMPTY
43681: PPUSH
43682: CALL_OW 1
43686: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
43687: LD_ADDR_EXP 44
43691: PUSH
43692: LD_EXP 44
43696: PPUSH
43697: LD_VAR 0 2
43701: PPUSH
43702: EMPTY
43703: PPUSH
43704: CALL_OW 1
43708: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
43709: LD_ADDR_EXP 45
43713: PUSH
43714: LD_EXP 45
43718: PPUSH
43719: LD_VAR 0 2
43723: PPUSH
43724: EMPTY
43725: PPUSH
43726: CALL_OW 1
43730: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
43731: LD_ADDR_EXP 47
43735: PUSH
43736: LD_EXP 47
43740: PPUSH
43741: LD_VAR 0 2
43745: PPUSH
43746: LD_EXP 14
43750: PUSH
43751: LD_VAR 0 2
43755: ARRAY
43756: PPUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 30
43762: PUSH
43763: LD_INT 6
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 30
43772: PUSH
43773: LD_INT 7
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 30
43782: PUSH
43783: LD_INT 8
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: PPUSH
43796: CALL_OW 72
43800: PPUSH
43801: CALL_OW 1
43805: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
43806: LD_ADDR_EXP 48
43810: PUSH
43811: LD_EXP 48
43815: PPUSH
43816: LD_VAR 0 2
43820: PPUSH
43821: EMPTY
43822: PPUSH
43823: CALL_OW 1
43827: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
43828: LD_ADDR_EXP 49
43832: PUSH
43833: LD_EXP 49
43837: PPUSH
43838: LD_VAR 0 2
43842: PPUSH
43843: EMPTY
43844: PPUSH
43845: CALL_OW 1
43849: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
43850: LD_ADDR_EXP 50
43854: PUSH
43855: LD_EXP 50
43859: PPUSH
43860: LD_VAR 0 2
43864: PPUSH
43865: EMPTY
43866: PPUSH
43867: CALL_OW 1
43871: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
43872: LD_ADDR_EXP 51
43876: PUSH
43877: LD_EXP 51
43881: PPUSH
43882: LD_VAR 0 2
43886: PPUSH
43887: EMPTY
43888: PPUSH
43889: CALL_OW 1
43893: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
43894: LD_ADDR_EXP 52
43898: PUSH
43899: LD_EXP 52
43903: PPUSH
43904: LD_VAR 0 2
43908: PPUSH
43909: EMPTY
43910: PPUSH
43911: CALL_OW 1
43915: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
43916: LD_ADDR_EXP 53
43920: PUSH
43921: LD_EXP 53
43925: PPUSH
43926: LD_VAR 0 2
43930: PPUSH
43931: EMPTY
43932: PPUSH
43933: CALL_OW 1
43937: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
43938: LD_ADDR_EXP 54
43942: PUSH
43943: LD_EXP 54
43947: PPUSH
43948: LD_VAR 0 2
43952: PPUSH
43953: EMPTY
43954: PPUSH
43955: CALL_OW 1
43959: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
43960: LD_ADDR_EXP 55
43964: PUSH
43965: LD_EXP 55
43969: PPUSH
43970: LD_VAR 0 2
43974: PPUSH
43975: EMPTY
43976: PPUSH
43977: CALL_OW 1
43981: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
43982: LD_ADDR_EXP 56
43986: PUSH
43987: LD_EXP 56
43991: PPUSH
43992: LD_VAR 0 2
43996: PPUSH
43997: LD_INT 0
43999: PPUSH
44000: CALL_OW 1
44004: ST_TO_ADDR
// end ;
44005: GO 42929
44007: POP
44008: POP
// MC_InitSides ( ) ;
44009: CALL 44295 0 0
// MC_InitResearch ( ) ;
44013: CALL 44034 0 0
// CustomInitMacro ( ) ;
44017: CALL 201 0 0
// skirmish := true ;
44021: LD_ADDR_EXP 12
44025: PUSH
44026: LD_INT 1
44028: ST_TO_ADDR
// end ;
44029: LD_VAR 0 1
44033: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
44034: LD_INT 0
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
// if not mc_bases then
44042: LD_EXP 14
44046: NOT
44047: IFFALSE 44051
// exit ;
44049: GO 44290
// for i = 1 to 8 do
44051: LD_ADDR_VAR 0 2
44055: PUSH
44056: DOUBLE
44057: LD_INT 1
44059: DEC
44060: ST_TO_ADDR
44061: LD_INT 8
44063: PUSH
44064: FOR_TO
44065: IFFALSE 44091
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
44067: LD_ADDR_EXP 41
44071: PUSH
44072: LD_EXP 41
44076: PPUSH
44077: LD_VAR 0 2
44081: PPUSH
44082: EMPTY
44083: PPUSH
44084: CALL_OW 1
44088: ST_TO_ADDR
44089: GO 44064
44091: POP
44092: POP
// tmp := [ ] ;
44093: LD_ADDR_VAR 0 5
44097: PUSH
44098: EMPTY
44099: ST_TO_ADDR
// for i = 1 to mc_sides do
44100: LD_ADDR_VAR 0 2
44104: PUSH
44105: DOUBLE
44106: LD_INT 1
44108: DEC
44109: ST_TO_ADDR
44110: LD_EXP 40
44114: PUSH
44115: FOR_TO
44116: IFFALSE 44174
// if not mc_sides [ i ] in tmp then
44118: LD_EXP 40
44122: PUSH
44123: LD_VAR 0 2
44127: ARRAY
44128: PUSH
44129: LD_VAR 0 5
44133: IN
44134: NOT
44135: IFFALSE 44172
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
44137: LD_ADDR_VAR 0 5
44141: PUSH
44142: LD_VAR 0 5
44146: PPUSH
44147: LD_VAR 0 5
44151: PUSH
44152: LD_INT 1
44154: PLUS
44155: PPUSH
44156: LD_EXP 40
44160: PUSH
44161: LD_VAR 0 2
44165: ARRAY
44166: PPUSH
44167: CALL_OW 2
44171: ST_TO_ADDR
44172: GO 44115
44174: POP
44175: POP
// if not tmp then
44176: LD_VAR 0 5
44180: NOT
44181: IFFALSE 44185
// exit ;
44183: GO 44290
// for j in tmp do
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_VAR 0 5
44194: PUSH
44195: FOR_IN
44196: IFFALSE 44288
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
44198: LD_ADDR_VAR 0 6
44202: PUSH
44203: LD_INT 22
44205: PUSH
44206: LD_VAR 0 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PPUSH
44215: CALL_OW 69
44219: ST_TO_ADDR
// if not un then
44220: LD_VAR 0 6
44224: NOT
44225: IFFALSE 44229
// continue ;
44227: GO 44195
// nation := GetNation ( un [ 1 ] ) ;
44229: LD_ADDR_VAR 0 4
44233: PUSH
44234: LD_VAR 0 6
44238: PUSH
44239: LD_INT 1
44241: ARRAY
44242: PPUSH
44243: CALL_OW 248
44247: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
44248: LD_ADDR_EXP 41
44252: PUSH
44253: LD_EXP 41
44257: PPUSH
44258: LD_VAR 0 3
44262: PPUSH
44263: LD_VAR 0 3
44267: PPUSH
44268: LD_VAR 0 4
44272: PPUSH
44273: LD_INT 1
44275: PPUSH
44276: CALL 4513 0 3
44280: PPUSH
44281: CALL_OW 1
44285: ST_TO_ADDR
// end ;
44286: GO 44195
44288: POP
44289: POP
// end ;
44290: LD_VAR 0 1
44294: RET
// export function MC_InitSides ( ) ; var i ; begin
44295: LD_INT 0
44297: PPUSH
44298: PPUSH
// if not mc_bases then
44299: LD_EXP 14
44303: NOT
44304: IFFALSE 44308
// exit ;
44306: GO 44382
// for i = 1 to mc_bases do
44308: LD_ADDR_VAR 0 2
44312: PUSH
44313: DOUBLE
44314: LD_INT 1
44316: DEC
44317: ST_TO_ADDR
44318: LD_EXP 14
44322: PUSH
44323: FOR_TO
44324: IFFALSE 44380
// if mc_bases [ i ] then
44326: LD_EXP 14
44330: PUSH
44331: LD_VAR 0 2
44335: ARRAY
44336: IFFALSE 44378
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
44338: LD_ADDR_EXP 40
44342: PUSH
44343: LD_EXP 40
44347: PPUSH
44348: LD_VAR 0 2
44352: PPUSH
44353: LD_EXP 14
44357: PUSH
44358: LD_VAR 0 2
44362: ARRAY
44363: PUSH
44364: LD_INT 1
44366: ARRAY
44367: PPUSH
44368: CALL_OW 255
44372: PPUSH
44373: CALL_OW 1
44377: ST_TO_ADDR
44378: GO 44323
44380: POP
44381: POP
// end ;
44382: LD_VAR 0 1
44386: RET
// every 0 0$01 trigger skirmish do
44387: LD_EXP 12
44391: IFFALSE 44545
44393: GO 44395
44395: DISABLE
// begin enable ;
44396: ENABLE
// MC_CheckBuildings ( ) ;
44397: CALL 49043 0 0
// MC_CheckPeopleLife ( ) ;
44401: CALL 49168 0 0
// RaiseSailEvent ( 100 ) ;
44405: LD_INT 100
44407: PPUSH
44408: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
44412: LD_INT 103
44414: PPUSH
44415: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
44419: LD_INT 104
44421: PPUSH
44422: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
44426: LD_INT 105
44428: PPUSH
44429: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
44433: LD_INT 106
44435: PPUSH
44436: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
44440: LD_INT 107
44442: PPUSH
44443: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
44447: LD_INT 108
44449: PPUSH
44450: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
44454: LD_INT 109
44456: PPUSH
44457: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
44461: LD_INT 110
44463: PPUSH
44464: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
44468: LD_INT 111
44470: PPUSH
44471: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
44475: LD_INT 112
44477: PPUSH
44478: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
44482: LD_INT 113
44484: PPUSH
44485: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
44489: LD_INT 120
44491: PPUSH
44492: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
44496: LD_INT 121
44498: PPUSH
44499: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
44503: LD_INT 122
44505: PPUSH
44506: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
44510: LD_INT 123
44512: PPUSH
44513: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
44517: LD_INT 124
44519: PPUSH
44520: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
44524: LD_INT 125
44526: PPUSH
44527: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
44531: LD_INT 126
44533: PPUSH
44534: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
44538: LD_INT 200
44540: PPUSH
44541: CALL_OW 427
// end ;
44545: END
// on SailEvent ( event ) do begin if event < 100 then
44546: LD_VAR 0 1
44550: PUSH
44551: LD_INT 100
44553: LESS
44554: IFFALSE 44565
// CustomEvent ( event ) ;
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL 4412 0 1
// if event = 100 then
44565: LD_VAR 0 1
44569: PUSH
44570: LD_INT 100
44572: EQUAL
44573: IFFALSE 44579
// MC_ClassManager ( ) ;
44575: CALL 44971 0 0
// if event = 101 then
44579: LD_VAR 0 1
44583: PUSH
44584: LD_INT 101
44586: EQUAL
44587: IFFALSE 44593
// MC_RepairBuildings ( ) ;
44589: CALL 49753 0 0
// if event = 102 then
44593: LD_VAR 0 1
44597: PUSH
44598: LD_INT 102
44600: EQUAL
44601: IFFALSE 44607
// MC_Heal ( ) ;
44603: CALL 50612 0 0
// if event = 103 then
44607: LD_VAR 0 1
44611: PUSH
44612: LD_INT 103
44614: EQUAL
44615: IFFALSE 44621
// MC_Build ( ) ;
44617: CALL 51034 0 0
// if event = 104 then
44621: LD_VAR 0 1
44625: PUSH
44626: LD_INT 104
44628: EQUAL
44629: IFFALSE 44635
// MC_TurretWeapon ( ) ;
44631: CALL 52647 0 0
// if event = 105 then
44635: LD_VAR 0 1
44639: PUSH
44640: LD_INT 105
44642: EQUAL
44643: IFFALSE 44649
// MC_BuildUpgrade ( ) ;
44645: CALL 52198 0 0
// if event = 106 then
44649: LD_VAR 0 1
44653: PUSH
44654: LD_INT 106
44656: EQUAL
44657: IFFALSE 44663
// MC_PlantMines ( ) ;
44659: CALL 53077 0 0
// if event = 107 then
44663: LD_VAR 0 1
44667: PUSH
44668: LD_INT 107
44670: EQUAL
44671: IFFALSE 44677
// MC_CollectCrates ( ) ;
44673: CALL 53875 0 0
// if event = 108 then
44677: LD_VAR 0 1
44681: PUSH
44682: LD_INT 108
44684: EQUAL
44685: IFFALSE 44691
// MC_LinkRemoteControl ( ) ;
44687: CALL 55651 0 0
// if event = 109 then
44691: LD_VAR 0 1
44695: PUSH
44696: LD_INT 109
44698: EQUAL
44699: IFFALSE 44705
// MC_ProduceVehicle ( ) ;
44701: CALL 55832 0 0
// if event = 110 then
44705: LD_VAR 0 1
44709: PUSH
44710: LD_INT 110
44712: EQUAL
44713: IFFALSE 44719
// MC_SendAttack ( ) ;
44715: CALL 56298 0 0
// if event = 111 then
44719: LD_VAR 0 1
44723: PUSH
44724: LD_INT 111
44726: EQUAL
44727: IFFALSE 44733
// MC_Defend ( ) ;
44729: CALL 56406 0 0
// if event = 112 then
44733: LD_VAR 0 1
44737: PUSH
44738: LD_INT 112
44740: EQUAL
44741: IFFALSE 44747
// MC_Research ( ) ;
44743: CALL 57011 0 0
// if event = 113 then
44747: LD_VAR 0 1
44751: PUSH
44752: LD_INT 113
44754: EQUAL
44755: IFFALSE 44761
// MC_MinesTrigger ( ) ;
44757: CALL 58125 0 0
// if event = 120 then
44761: LD_VAR 0 1
44765: PUSH
44766: LD_INT 120
44768: EQUAL
44769: IFFALSE 44775
// MC_RepairVehicle ( ) ;
44771: CALL 58224 0 0
// if event = 121 then
44775: LD_VAR 0 1
44779: PUSH
44780: LD_INT 121
44782: EQUAL
44783: IFFALSE 44789
// MC_TameApe ( ) ;
44785: CALL 58954 0 0
// if event = 122 then
44789: LD_VAR 0 1
44793: PUSH
44794: LD_INT 122
44796: EQUAL
44797: IFFALSE 44803
// MC_ChangeApeClass ( ) ;
44799: CALL 59783 0 0
// if event = 123 then
44803: LD_VAR 0 1
44807: PUSH
44808: LD_INT 123
44810: EQUAL
44811: IFFALSE 44817
// MC_Bazooka ( ) ;
44813: CALL 60433 0 0
// if event = 124 then
44817: LD_VAR 0 1
44821: PUSH
44822: LD_INT 124
44824: EQUAL
44825: IFFALSE 44831
// MC_TeleportExit ( ) ;
44827: CALL 60631 0 0
// if event = 125 then
44831: LD_VAR 0 1
44835: PUSH
44836: LD_INT 125
44838: EQUAL
44839: IFFALSE 44845
// MC_Deposits ( ) ;
44841: CALL 61278 0 0
// if event = 126 then
44845: LD_VAR 0 1
44849: PUSH
44850: LD_INT 126
44852: EQUAL
44853: IFFALSE 44859
// MC_RemoteDriver ( ) ;
44855: CALL 61903 0 0
// if event = 200 then
44859: LD_VAR 0 1
44863: PUSH
44864: LD_INT 200
44866: EQUAL
44867: IFFALSE 44873
// MC_Idle ( ) ;
44869: CALL 63852 0 0
// end ;
44873: PPOPN 1
44875: END
// export function MC_Reset ( base , tag ) ; var i ; begin
44876: LD_INT 0
44878: PPUSH
44879: PPUSH
// if not mc_bases [ base ] or not tag then
44880: LD_EXP 14
44884: PUSH
44885: LD_VAR 0 1
44889: ARRAY
44890: NOT
44891: PUSH
44892: LD_VAR 0 2
44896: NOT
44897: OR
44898: IFFALSE 44902
// exit ;
44900: GO 44966
// for i in mc_bases [ base ] union mc_ape [ base ] do
44902: LD_ADDR_VAR 0 4
44906: PUSH
44907: LD_EXP 14
44911: PUSH
44912: LD_VAR 0 1
44916: ARRAY
44917: PUSH
44918: LD_EXP 43
44922: PUSH
44923: LD_VAR 0 1
44927: ARRAY
44928: UNION
44929: PUSH
44930: FOR_IN
44931: IFFALSE 44964
// if GetTag ( i ) = tag then
44933: LD_VAR 0 4
44937: PPUSH
44938: CALL_OW 110
44942: PUSH
44943: LD_VAR 0 2
44947: EQUAL
44948: IFFALSE 44962
// SetTag ( i , 0 ) ;
44950: LD_VAR 0 4
44954: PPUSH
44955: LD_INT 0
44957: PPUSH
44958: CALL_OW 109
44962: GO 44930
44964: POP
44965: POP
// end ;
44966: LD_VAR 0 3
44970: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
44971: LD_INT 0
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
// if not mc_bases then
44981: LD_EXP 14
44985: NOT
44986: IFFALSE 44990
// exit ;
44988: GO 45448
// for i = 1 to mc_bases do
44990: LD_ADDR_VAR 0 2
44994: PUSH
44995: DOUBLE
44996: LD_INT 1
44998: DEC
44999: ST_TO_ADDR
45000: LD_EXP 14
45004: PUSH
45005: FOR_TO
45006: IFFALSE 45446
// begin tmp := MC_ClassCheckReq ( i ) ;
45008: LD_ADDR_VAR 0 4
45012: PUSH
45013: LD_VAR 0 2
45017: PPUSH
45018: CALL 45453 0 1
45022: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
45023: LD_ADDR_EXP 55
45027: PUSH
45028: LD_EXP 55
45032: PPUSH
45033: LD_VAR 0 2
45037: PPUSH
45038: LD_VAR 0 4
45042: PPUSH
45043: CALL_OW 1
45047: ST_TO_ADDR
// if not tmp then
45048: LD_VAR 0 4
45052: NOT
45053: IFFALSE 45057
// continue ;
45055: GO 45005
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
45057: LD_ADDR_VAR 0 6
45061: PUSH
45062: LD_EXP 14
45066: PUSH
45067: LD_VAR 0 2
45071: ARRAY
45072: PPUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 30
45078: PUSH
45079: LD_INT 4
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 30
45088: PUSH
45089: LD_INT 5
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: PPUSH
45101: CALL_OW 72
45105: PUSH
45106: LD_EXP 14
45110: PUSH
45111: LD_VAR 0 2
45115: ARRAY
45116: PPUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 30
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 30
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: PPUSH
45145: CALL_OW 72
45149: PUSH
45150: LD_EXP 14
45154: PUSH
45155: LD_VAR 0 2
45159: ARRAY
45160: PPUSH
45161: LD_INT 30
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PPUSH
45171: CALL_OW 72
45175: PUSH
45176: LD_EXP 14
45180: PUSH
45181: LD_VAR 0 2
45185: ARRAY
45186: PPUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 30
45192: PUSH
45193: LD_INT 6
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 30
45202: PUSH
45203: LD_INT 7
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 30
45212: PUSH
45213: LD_INT 8
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: PPUSH
45226: CALL_OW 72
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: ST_TO_ADDR
// for j = 1 to 4 do
45237: LD_ADDR_VAR 0 3
45241: PUSH
45242: DOUBLE
45243: LD_INT 1
45245: DEC
45246: ST_TO_ADDR
45247: LD_INT 4
45249: PUSH
45250: FOR_TO
45251: IFFALSE 45442
// begin if not tmp [ j ] then
45253: LD_VAR 0 4
45257: PUSH
45258: LD_VAR 0 3
45262: ARRAY
45263: NOT
45264: IFFALSE 45268
// continue ;
45266: GO 45250
// for p in tmp [ j ] do
45268: LD_ADDR_VAR 0 5
45272: PUSH
45273: LD_VAR 0 4
45277: PUSH
45278: LD_VAR 0 3
45282: ARRAY
45283: PUSH
45284: FOR_IN
45285: IFFALSE 45438
// begin if not b [ j ] then
45287: LD_VAR 0 6
45291: PUSH
45292: LD_VAR 0 3
45296: ARRAY
45297: NOT
45298: IFFALSE 45302
// break ;
45300: GO 45438
// e := 0 ;
45302: LD_ADDR_VAR 0 7
45306: PUSH
45307: LD_INT 0
45309: ST_TO_ADDR
// for k in b [ j ] do
45310: LD_ADDR_VAR 0 8
45314: PUSH
45315: LD_VAR 0 6
45319: PUSH
45320: LD_VAR 0 3
45324: ARRAY
45325: PUSH
45326: FOR_IN
45327: IFFALSE 45354
// if IsNotFull ( k ) then
45329: LD_VAR 0 8
45333: PPUSH
45334: CALL 6662 0 1
45338: IFFALSE 45352
// begin e := k ;
45340: LD_ADDR_VAR 0 7
45344: PUSH
45345: LD_VAR 0 8
45349: ST_TO_ADDR
// break ;
45350: GO 45354
// end ;
45352: GO 45326
45354: POP
45355: POP
// if e and not UnitGoingToBuilding ( p , e ) then
45356: LD_VAR 0 7
45360: PUSH
45361: LD_VAR 0 5
45365: PPUSH
45366: LD_VAR 0 7
45370: PPUSH
45371: CALL 39082 0 2
45375: NOT
45376: AND
45377: IFFALSE 45436
// begin if IsInUnit ( p ) then
45379: LD_VAR 0 5
45383: PPUSH
45384: CALL_OW 310
45388: IFFALSE 45399
// ComExitBuilding ( p ) ;
45390: LD_VAR 0 5
45394: PPUSH
45395: CALL_OW 122
// ComEnterUnit ( p , e ) ;
45399: LD_VAR 0 5
45403: PPUSH
45404: LD_VAR 0 7
45408: PPUSH
45409: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
45413: LD_VAR 0 5
45417: PPUSH
45418: LD_VAR 0 3
45422: PPUSH
45423: CALL_OW 183
// AddComExitBuilding ( p ) ;
45427: LD_VAR 0 5
45431: PPUSH
45432: CALL_OW 182
// end ; end ;
45436: GO 45284
45438: POP
45439: POP
// end ;
45440: GO 45250
45442: POP
45443: POP
// end ;
45444: GO 45005
45446: POP
45447: POP
// end ;
45448: LD_VAR 0 1
45452: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
45453: LD_INT 0
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45467: LD_VAR 0 1
45471: NOT
45472: PUSH
45473: LD_EXP 14
45477: PUSH
45478: LD_VAR 0 1
45482: ARRAY
45483: NOT
45484: OR
45485: PUSH
45486: LD_EXP 14
45490: PUSH
45491: LD_VAR 0 1
45495: ARRAY
45496: PPUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 30
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 30
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: PPUSH
45525: CALL_OW 72
45529: NOT
45530: OR
45531: IFFALSE 45535
// exit ;
45533: GO 49038
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45535: LD_ADDR_VAR 0 4
45539: PUSH
45540: LD_EXP 14
45544: PUSH
45545: LD_VAR 0 1
45549: ARRAY
45550: PPUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 25
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 25
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 25
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 25
45586: PUSH
45587: LD_INT 4
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 25
45596: PUSH
45597: LD_INT 5
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 25
45606: PUSH
45607: LD_INT 8
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 25
45616: PUSH
45617: LD_INT 9
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: PPUSH
45634: CALL_OW 72
45638: ST_TO_ADDR
// if not tmp then
45639: LD_VAR 0 4
45643: NOT
45644: IFFALSE 45648
// exit ;
45646: GO 49038
// for i in tmp do
45648: LD_ADDR_VAR 0 3
45652: PUSH
45653: LD_VAR 0 4
45657: PUSH
45658: FOR_IN
45659: IFFALSE 45690
// if GetTag ( i ) then
45661: LD_VAR 0 3
45665: PPUSH
45666: CALL_OW 110
45670: IFFALSE 45688
// tmp := tmp diff i ;
45672: LD_ADDR_VAR 0 4
45676: PUSH
45677: LD_VAR 0 4
45681: PUSH
45682: LD_VAR 0 3
45686: DIFF
45687: ST_TO_ADDR
45688: GO 45658
45690: POP
45691: POP
// if not tmp then
45692: LD_VAR 0 4
45696: NOT
45697: IFFALSE 45701
// exit ;
45699: GO 49038
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45701: LD_ADDR_VAR 0 5
45705: PUSH
45706: LD_EXP 14
45710: PUSH
45711: LD_VAR 0 1
45715: ARRAY
45716: PPUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 25
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 25
45732: PUSH
45733: LD_INT 5
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 25
45742: PUSH
45743: LD_INT 8
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 25
45752: PUSH
45753: LD_INT 9
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: PPUSH
45767: CALL_OW 72
45771: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
45772: LD_ADDR_VAR 0 6
45776: PUSH
45777: LD_EXP 14
45781: PUSH
45782: LD_VAR 0 1
45786: ARRAY
45787: PPUSH
45788: LD_INT 25
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PPUSH
45798: CALL_OW 72
45802: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
45803: LD_ADDR_VAR 0 7
45807: PUSH
45808: LD_EXP 14
45812: PUSH
45813: LD_VAR 0 1
45817: ARRAY
45818: PPUSH
45819: LD_INT 25
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PPUSH
45829: CALL_OW 72
45833: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
45834: LD_ADDR_VAR 0 8
45838: PUSH
45839: LD_EXP 14
45843: PUSH
45844: LD_VAR 0 1
45848: ARRAY
45849: PPUSH
45850: LD_INT 25
45852: PUSH
45853: LD_INT 4
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 24
45862: PUSH
45863: LD_INT 251
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PPUSH
45874: CALL_OW 72
45878: ST_TO_ADDR
// if mc_scan [ base ] then
45879: LD_EXP 37
45883: PUSH
45884: LD_VAR 0 1
45888: ARRAY
45889: IFFALSE 46350
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
45891: LD_ADDR_EXP 56
45895: PUSH
45896: LD_EXP 56
45900: PPUSH
45901: LD_VAR 0 1
45905: PPUSH
45906: LD_INT 4
45908: PPUSH
45909: CALL_OW 1
45913: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45914: LD_ADDR_VAR 0 12
45918: PUSH
45919: LD_EXP 14
45923: PUSH
45924: LD_VAR 0 1
45928: ARRAY
45929: PPUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 30
45935: PUSH
45936: LD_INT 4
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 30
45945: PUSH
45946: LD_INT 5
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: PPUSH
45958: CALL_OW 72
45962: ST_TO_ADDR
// if not b then
45963: LD_VAR 0 12
45967: NOT
45968: IFFALSE 45972
// exit ;
45970: GO 49038
// p := [ ] ;
45972: LD_ADDR_VAR 0 11
45976: PUSH
45977: EMPTY
45978: ST_TO_ADDR
// if sci >= 2 then
45979: LD_VAR 0 8
45983: PUSH
45984: LD_INT 2
45986: GREATEREQUAL
45987: IFFALSE 46018
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
45989: LD_ADDR_VAR 0 8
45993: PUSH
45994: LD_VAR 0 8
45998: PUSH
45999: LD_INT 1
46001: ARRAY
46002: PUSH
46003: LD_VAR 0 8
46007: PUSH
46008: LD_INT 2
46010: ARRAY
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: ST_TO_ADDR
46016: GO 46079
// if sci = 1 then
46018: LD_VAR 0 8
46022: PUSH
46023: LD_INT 1
46025: EQUAL
46026: IFFALSE 46047
// sci := [ sci [ 1 ] ] else
46028: LD_ADDR_VAR 0 8
46032: PUSH
46033: LD_VAR 0 8
46037: PUSH
46038: LD_INT 1
46040: ARRAY
46041: PUSH
46042: EMPTY
46043: LIST
46044: ST_TO_ADDR
46045: GO 46079
// if sci = 0 then
46047: LD_VAR 0 8
46051: PUSH
46052: LD_INT 0
46054: EQUAL
46055: IFFALSE 46079
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
46057: LD_ADDR_VAR 0 11
46061: PUSH
46062: LD_VAR 0 4
46066: PPUSH
46067: LD_INT 4
46069: PPUSH
46070: CALL 38945 0 2
46074: PUSH
46075: LD_INT 1
46077: ARRAY
46078: ST_TO_ADDR
// if eng > 4 then
46079: LD_VAR 0 6
46083: PUSH
46084: LD_INT 4
46086: GREATER
46087: IFFALSE 46133
// for i = eng downto 4 do
46089: LD_ADDR_VAR 0 3
46093: PUSH
46094: DOUBLE
46095: LD_VAR 0 6
46099: INC
46100: ST_TO_ADDR
46101: LD_INT 4
46103: PUSH
46104: FOR_DOWNTO
46105: IFFALSE 46131
// eng := eng diff eng [ i ] ;
46107: LD_ADDR_VAR 0 6
46111: PUSH
46112: LD_VAR 0 6
46116: PUSH
46117: LD_VAR 0 6
46121: PUSH
46122: LD_VAR 0 3
46126: ARRAY
46127: DIFF
46128: ST_TO_ADDR
46129: GO 46104
46131: POP
46132: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
46133: LD_ADDR_VAR 0 4
46137: PUSH
46138: LD_VAR 0 4
46142: PUSH
46143: LD_VAR 0 5
46147: PUSH
46148: LD_VAR 0 6
46152: UNION
46153: PUSH
46154: LD_VAR 0 7
46158: UNION
46159: PUSH
46160: LD_VAR 0 8
46164: UNION
46165: DIFF
46166: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
46167: LD_ADDR_VAR 0 13
46171: PUSH
46172: LD_EXP 14
46176: PUSH
46177: LD_VAR 0 1
46181: ARRAY
46182: PPUSH
46183: LD_INT 2
46185: PUSH
46186: LD_INT 30
46188: PUSH
46189: LD_INT 32
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 30
46198: PUSH
46199: LD_INT 31
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: PPUSH
46211: CALL_OW 72
46215: PUSH
46216: LD_EXP 14
46220: PUSH
46221: LD_VAR 0 1
46225: ARRAY
46226: PPUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 30
46232: PUSH
46233: LD_INT 4
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 30
46242: PUSH
46243: LD_INT 5
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: PPUSH
46255: CALL_OW 72
46259: PUSH
46260: LD_INT 6
46262: MUL
46263: PLUS
46264: ST_TO_ADDR
// if bcount < tmp then
46265: LD_VAR 0 13
46269: PUSH
46270: LD_VAR 0 4
46274: LESS
46275: IFFALSE 46321
// for i = tmp downto bcount do
46277: LD_ADDR_VAR 0 3
46281: PUSH
46282: DOUBLE
46283: LD_VAR 0 4
46287: INC
46288: ST_TO_ADDR
46289: LD_VAR 0 13
46293: PUSH
46294: FOR_DOWNTO
46295: IFFALSE 46319
// tmp := Delete ( tmp , tmp ) ;
46297: LD_ADDR_VAR 0 4
46301: PUSH
46302: LD_VAR 0 4
46306: PPUSH
46307: LD_VAR 0 4
46311: PPUSH
46312: CALL_OW 3
46316: ST_TO_ADDR
46317: GO 46294
46319: POP
46320: POP
// result := [ tmp , 0 , 0 , p ] ;
46321: LD_ADDR_VAR 0 2
46325: PUSH
46326: LD_VAR 0 4
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_VAR 0 11
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// exit ;
46348: GO 49038
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46350: LD_EXP 14
46354: PUSH
46355: LD_VAR 0 1
46359: ARRAY
46360: PPUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 30
46366: PUSH
46367: LD_INT 6
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 30
46376: PUSH
46377: LD_INT 7
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 30
46386: PUSH
46387: LD_INT 8
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: PPUSH
46400: CALL_OW 72
46404: NOT
46405: PUSH
46406: LD_EXP 14
46410: PUSH
46411: LD_VAR 0 1
46415: ARRAY
46416: PPUSH
46417: LD_INT 30
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PPUSH
46427: CALL_OW 72
46431: NOT
46432: AND
46433: IFFALSE 46505
// begin if eng = tmp then
46435: LD_VAR 0 6
46439: PUSH
46440: LD_VAR 0 4
46444: EQUAL
46445: IFFALSE 46449
// exit ;
46447: GO 49038
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
46449: LD_ADDR_EXP 56
46453: PUSH
46454: LD_EXP 56
46458: PPUSH
46459: LD_VAR 0 1
46463: PPUSH
46464: LD_INT 1
46466: PPUSH
46467: CALL_OW 1
46471: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
46472: LD_ADDR_VAR 0 2
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_VAR 0 4
46484: PUSH
46485: LD_VAR 0 6
46489: DIFF
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: ST_TO_ADDR
// exit ;
46503: GO 49038
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46505: LD_EXP 41
46509: PUSH
46510: LD_EXP 40
46514: PUSH
46515: LD_VAR 0 1
46519: ARRAY
46520: ARRAY
46521: PUSH
46522: LD_EXP 14
46526: PUSH
46527: LD_VAR 0 1
46531: ARRAY
46532: PPUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 30
46538: PUSH
46539: LD_INT 6
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 30
46548: PUSH
46549: LD_INT 7
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 30
46558: PUSH
46559: LD_INT 8
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: PPUSH
46572: CALL_OW 72
46576: AND
46577: PUSH
46578: LD_EXP 14
46582: PUSH
46583: LD_VAR 0 1
46587: ARRAY
46588: PPUSH
46589: LD_INT 30
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PPUSH
46599: CALL_OW 72
46603: NOT
46604: AND
46605: IFFALSE 46819
// begin if sci >= 6 then
46607: LD_VAR 0 8
46611: PUSH
46612: LD_INT 6
46614: GREATEREQUAL
46615: IFFALSE 46619
// exit ;
46617: GO 49038
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
46619: LD_ADDR_EXP 56
46623: PUSH
46624: LD_EXP 56
46628: PPUSH
46629: LD_VAR 0 1
46633: PPUSH
46634: LD_INT 2
46636: PPUSH
46637: CALL_OW 1
46641: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
46642: LD_ADDR_VAR 0 9
46646: PUSH
46647: LD_VAR 0 4
46651: PUSH
46652: LD_VAR 0 8
46656: DIFF
46657: PPUSH
46658: LD_INT 4
46660: PPUSH
46661: CALL 38945 0 2
46665: ST_TO_ADDR
// p := [ ] ;
46666: LD_ADDR_VAR 0 11
46670: PUSH
46671: EMPTY
46672: ST_TO_ADDR
// if sci < 6 and sort > 6 then
46673: LD_VAR 0 8
46677: PUSH
46678: LD_INT 6
46680: LESS
46681: PUSH
46682: LD_VAR 0 9
46686: PUSH
46687: LD_INT 6
46689: GREATER
46690: AND
46691: IFFALSE 46772
// begin for i = 1 to 6 - sci do
46693: LD_ADDR_VAR 0 3
46697: PUSH
46698: DOUBLE
46699: LD_INT 1
46701: DEC
46702: ST_TO_ADDR
46703: LD_INT 6
46705: PUSH
46706: LD_VAR 0 8
46710: MINUS
46711: PUSH
46712: FOR_TO
46713: IFFALSE 46768
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
46715: LD_ADDR_VAR 0 11
46719: PUSH
46720: LD_VAR 0 11
46724: PPUSH
46725: LD_VAR 0 11
46729: PUSH
46730: LD_INT 1
46732: PLUS
46733: PPUSH
46734: LD_VAR 0 9
46738: PUSH
46739: LD_INT 1
46741: ARRAY
46742: PPUSH
46743: CALL_OW 2
46747: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
46748: LD_ADDR_VAR 0 9
46752: PUSH
46753: LD_VAR 0 9
46757: PPUSH
46758: LD_INT 1
46760: PPUSH
46761: CALL_OW 3
46765: ST_TO_ADDR
// end ;
46766: GO 46712
46768: POP
46769: POP
// end else
46770: GO 46792
// if sort then
46772: LD_VAR 0 9
46776: IFFALSE 46792
// p := sort [ 1 ] ;
46778: LD_ADDR_VAR 0 11
46782: PUSH
46783: LD_VAR 0 9
46787: PUSH
46788: LD_INT 1
46790: ARRAY
46791: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
46792: LD_ADDR_VAR 0 2
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_VAR 0 11
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: ST_TO_ADDR
// exit ;
46817: GO 49038
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46819: LD_EXP 41
46823: PUSH
46824: LD_EXP 40
46828: PUSH
46829: LD_VAR 0 1
46833: ARRAY
46834: ARRAY
46835: PUSH
46836: LD_EXP 14
46840: PUSH
46841: LD_VAR 0 1
46845: ARRAY
46846: PPUSH
46847: LD_INT 2
46849: PUSH
46850: LD_INT 30
46852: PUSH
46853: LD_INT 6
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 30
46862: PUSH
46863: LD_INT 7
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 30
46872: PUSH
46873: LD_INT 8
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: PPUSH
46886: CALL_OW 72
46890: AND
46891: PUSH
46892: LD_EXP 14
46896: PUSH
46897: LD_VAR 0 1
46901: ARRAY
46902: PPUSH
46903: LD_INT 30
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PPUSH
46913: CALL_OW 72
46917: AND
46918: IFFALSE 47652
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
46920: LD_ADDR_EXP 56
46924: PUSH
46925: LD_EXP 56
46929: PPUSH
46930: LD_VAR 0 1
46934: PPUSH
46935: LD_INT 3
46937: PPUSH
46938: CALL_OW 1
46942: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
46943: LD_ADDR_VAR 0 2
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// if not eng then
46966: LD_VAR 0 6
46970: NOT
46971: IFFALSE 47034
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
46973: LD_ADDR_VAR 0 11
46977: PUSH
46978: LD_VAR 0 4
46982: PPUSH
46983: LD_INT 2
46985: PPUSH
46986: CALL 38945 0 2
46990: PUSH
46991: LD_INT 1
46993: ARRAY
46994: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
46995: LD_ADDR_VAR 0 2
46999: PUSH
47000: LD_VAR 0 2
47004: PPUSH
47005: LD_INT 2
47007: PPUSH
47008: LD_VAR 0 11
47012: PPUSH
47013: CALL_OW 1
47017: ST_TO_ADDR
// tmp := tmp diff p ;
47018: LD_ADDR_VAR 0 4
47022: PUSH
47023: LD_VAR 0 4
47027: PUSH
47028: LD_VAR 0 11
47032: DIFF
47033: ST_TO_ADDR
// end ; if tmp and sci < 6 then
47034: LD_VAR 0 4
47038: PUSH
47039: LD_VAR 0 8
47043: PUSH
47044: LD_INT 6
47046: LESS
47047: AND
47048: IFFALSE 47236
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
47050: LD_ADDR_VAR 0 9
47054: PUSH
47055: LD_VAR 0 4
47059: PUSH
47060: LD_VAR 0 8
47064: PUSH
47065: LD_VAR 0 7
47069: UNION
47070: DIFF
47071: PPUSH
47072: LD_INT 4
47074: PPUSH
47075: CALL 38945 0 2
47079: ST_TO_ADDR
// p := [ ] ;
47080: LD_ADDR_VAR 0 11
47084: PUSH
47085: EMPTY
47086: ST_TO_ADDR
// if sort then
47087: LD_VAR 0 9
47091: IFFALSE 47207
// for i = 1 to 6 - sci do
47093: LD_ADDR_VAR 0 3
47097: PUSH
47098: DOUBLE
47099: LD_INT 1
47101: DEC
47102: ST_TO_ADDR
47103: LD_INT 6
47105: PUSH
47106: LD_VAR 0 8
47110: MINUS
47111: PUSH
47112: FOR_TO
47113: IFFALSE 47205
// begin if i = sort then
47115: LD_VAR 0 3
47119: PUSH
47120: LD_VAR 0 9
47124: EQUAL
47125: IFFALSE 47129
// break ;
47127: GO 47205
// if GetClass ( i ) = 4 then
47129: LD_VAR 0 3
47133: PPUSH
47134: CALL_OW 257
47138: PUSH
47139: LD_INT 4
47141: EQUAL
47142: IFFALSE 47146
// continue ;
47144: GO 47112
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47146: LD_ADDR_VAR 0 11
47150: PUSH
47151: LD_VAR 0 11
47155: PPUSH
47156: LD_VAR 0 11
47160: PUSH
47161: LD_INT 1
47163: PLUS
47164: PPUSH
47165: LD_VAR 0 9
47169: PUSH
47170: LD_VAR 0 3
47174: ARRAY
47175: PPUSH
47176: CALL_OW 2
47180: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47181: LD_ADDR_VAR 0 4
47185: PUSH
47186: LD_VAR 0 4
47190: PUSH
47191: LD_VAR 0 9
47195: PUSH
47196: LD_VAR 0 3
47200: ARRAY
47201: DIFF
47202: ST_TO_ADDR
// end ;
47203: GO 47112
47205: POP
47206: POP
// if p then
47207: LD_VAR 0 11
47211: IFFALSE 47236
// result := Replace ( result , 4 , p ) ;
47213: LD_ADDR_VAR 0 2
47217: PUSH
47218: LD_VAR 0 2
47222: PPUSH
47223: LD_INT 4
47225: PPUSH
47226: LD_VAR 0 11
47230: PPUSH
47231: CALL_OW 1
47235: ST_TO_ADDR
// end ; if tmp and mech < 6 then
47236: LD_VAR 0 4
47240: PUSH
47241: LD_VAR 0 7
47245: PUSH
47246: LD_INT 6
47248: LESS
47249: AND
47250: IFFALSE 47438
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
47252: LD_ADDR_VAR 0 9
47256: PUSH
47257: LD_VAR 0 4
47261: PUSH
47262: LD_VAR 0 8
47266: PUSH
47267: LD_VAR 0 7
47271: UNION
47272: DIFF
47273: PPUSH
47274: LD_INT 3
47276: PPUSH
47277: CALL 38945 0 2
47281: ST_TO_ADDR
// p := [ ] ;
47282: LD_ADDR_VAR 0 11
47286: PUSH
47287: EMPTY
47288: ST_TO_ADDR
// if sort then
47289: LD_VAR 0 9
47293: IFFALSE 47409
// for i = 1 to 6 - mech do
47295: LD_ADDR_VAR 0 3
47299: PUSH
47300: DOUBLE
47301: LD_INT 1
47303: DEC
47304: ST_TO_ADDR
47305: LD_INT 6
47307: PUSH
47308: LD_VAR 0 7
47312: MINUS
47313: PUSH
47314: FOR_TO
47315: IFFALSE 47407
// begin if i = sort then
47317: LD_VAR 0 3
47321: PUSH
47322: LD_VAR 0 9
47326: EQUAL
47327: IFFALSE 47331
// break ;
47329: GO 47407
// if GetClass ( i ) = 3 then
47331: LD_VAR 0 3
47335: PPUSH
47336: CALL_OW 257
47340: PUSH
47341: LD_INT 3
47343: EQUAL
47344: IFFALSE 47348
// continue ;
47346: GO 47314
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47348: LD_ADDR_VAR 0 11
47352: PUSH
47353: LD_VAR 0 11
47357: PPUSH
47358: LD_VAR 0 11
47362: PUSH
47363: LD_INT 1
47365: PLUS
47366: PPUSH
47367: LD_VAR 0 9
47371: PUSH
47372: LD_VAR 0 3
47376: ARRAY
47377: PPUSH
47378: CALL_OW 2
47382: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47383: LD_ADDR_VAR 0 4
47387: PUSH
47388: LD_VAR 0 4
47392: PUSH
47393: LD_VAR 0 9
47397: PUSH
47398: LD_VAR 0 3
47402: ARRAY
47403: DIFF
47404: ST_TO_ADDR
// end ;
47405: GO 47314
47407: POP
47408: POP
// if p then
47409: LD_VAR 0 11
47413: IFFALSE 47438
// result := Replace ( result , 3 , p ) ;
47415: LD_ADDR_VAR 0 2
47419: PUSH
47420: LD_VAR 0 2
47424: PPUSH
47425: LD_INT 3
47427: PPUSH
47428: LD_VAR 0 11
47432: PPUSH
47433: CALL_OW 1
47437: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
47438: LD_VAR 0 4
47442: PUSH
47443: LD_INT 6
47445: GREATER
47446: PUSH
47447: LD_VAR 0 6
47451: PUSH
47452: LD_INT 6
47454: LESS
47455: AND
47456: IFFALSE 47650
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
47458: LD_ADDR_VAR 0 9
47462: PUSH
47463: LD_VAR 0 4
47467: PUSH
47468: LD_VAR 0 8
47472: PUSH
47473: LD_VAR 0 7
47477: UNION
47478: PUSH
47479: LD_VAR 0 6
47483: UNION
47484: DIFF
47485: PPUSH
47486: LD_INT 2
47488: PPUSH
47489: CALL 38945 0 2
47493: ST_TO_ADDR
// p := [ ] ;
47494: LD_ADDR_VAR 0 11
47498: PUSH
47499: EMPTY
47500: ST_TO_ADDR
// if sort then
47501: LD_VAR 0 9
47505: IFFALSE 47621
// for i = 1 to 6 - eng do
47507: LD_ADDR_VAR 0 3
47511: PUSH
47512: DOUBLE
47513: LD_INT 1
47515: DEC
47516: ST_TO_ADDR
47517: LD_INT 6
47519: PUSH
47520: LD_VAR 0 6
47524: MINUS
47525: PUSH
47526: FOR_TO
47527: IFFALSE 47619
// begin if i = sort then
47529: LD_VAR 0 3
47533: PUSH
47534: LD_VAR 0 9
47538: EQUAL
47539: IFFALSE 47543
// break ;
47541: GO 47619
// if GetClass ( i ) = 2 then
47543: LD_VAR 0 3
47547: PPUSH
47548: CALL_OW 257
47552: PUSH
47553: LD_INT 2
47555: EQUAL
47556: IFFALSE 47560
// continue ;
47558: GO 47526
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47560: LD_ADDR_VAR 0 11
47564: PUSH
47565: LD_VAR 0 11
47569: PPUSH
47570: LD_VAR 0 11
47574: PUSH
47575: LD_INT 1
47577: PLUS
47578: PPUSH
47579: LD_VAR 0 9
47583: PUSH
47584: LD_VAR 0 3
47588: ARRAY
47589: PPUSH
47590: CALL_OW 2
47594: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47595: LD_ADDR_VAR 0 4
47599: PUSH
47600: LD_VAR 0 4
47604: PUSH
47605: LD_VAR 0 9
47609: PUSH
47610: LD_VAR 0 3
47614: ARRAY
47615: DIFF
47616: ST_TO_ADDR
// end ;
47617: GO 47526
47619: POP
47620: POP
// if p then
47621: LD_VAR 0 11
47625: IFFALSE 47650
// result := Replace ( result , 2 , p ) ;
47627: LD_ADDR_VAR 0 2
47631: PUSH
47632: LD_VAR 0 2
47636: PPUSH
47637: LD_INT 2
47639: PPUSH
47640: LD_VAR 0 11
47644: PPUSH
47645: CALL_OW 1
47649: ST_TO_ADDR
// end ; exit ;
47650: GO 49038
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
47652: LD_EXP 41
47656: PUSH
47657: LD_EXP 40
47661: PUSH
47662: LD_VAR 0 1
47666: ARRAY
47667: ARRAY
47668: NOT
47669: PUSH
47670: LD_EXP 14
47674: PUSH
47675: LD_VAR 0 1
47679: ARRAY
47680: PPUSH
47681: LD_INT 30
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PPUSH
47691: CALL_OW 72
47695: AND
47696: PUSH
47697: LD_EXP 19
47701: PUSH
47702: LD_VAR 0 1
47706: ARRAY
47707: AND
47708: IFFALSE 48316
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
47710: LD_ADDR_EXP 56
47714: PUSH
47715: LD_EXP 56
47719: PPUSH
47720: LD_VAR 0 1
47724: PPUSH
47725: LD_INT 5
47727: PPUSH
47728: CALL_OW 1
47732: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
47733: LD_ADDR_VAR 0 2
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// if sci > 1 then
47756: LD_VAR 0 8
47760: PUSH
47761: LD_INT 1
47763: GREATER
47764: IFFALSE 47792
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
47766: LD_ADDR_VAR 0 4
47770: PUSH
47771: LD_VAR 0 4
47775: PUSH
47776: LD_VAR 0 8
47780: PUSH
47781: LD_VAR 0 8
47785: PUSH
47786: LD_INT 1
47788: ARRAY
47789: DIFF
47790: DIFF
47791: ST_TO_ADDR
// if tmp and not sci then
47792: LD_VAR 0 4
47796: PUSH
47797: LD_VAR 0 8
47801: NOT
47802: AND
47803: IFFALSE 47872
// begin sort := SortBySkill ( tmp , 4 ) ;
47805: LD_ADDR_VAR 0 9
47809: PUSH
47810: LD_VAR 0 4
47814: PPUSH
47815: LD_INT 4
47817: PPUSH
47818: CALL 38945 0 2
47822: ST_TO_ADDR
// if sort then
47823: LD_VAR 0 9
47827: IFFALSE 47843
// p := sort [ 1 ] ;
47829: LD_ADDR_VAR 0 11
47833: PUSH
47834: LD_VAR 0 9
47838: PUSH
47839: LD_INT 1
47841: ARRAY
47842: ST_TO_ADDR
// if p then
47843: LD_VAR 0 11
47847: IFFALSE 47872
// result := Replace ( result , 4 , p ) ;
47849: LD_ADDR_VAR 0 2
47853: PUSH
47854: LD_VAR 0 2
47858: PPUSH
47859: LD_INT 4
47861: PPUSH
47862: LD_VAR 0 11
47866: PPUSH
47867: CALL_OW 1
47871: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
47872: LD_ADDR_VAR 0 4
47876: PUSH
47877: LD_VAR 0 4
47881: PUSH
47882: LD_VAR 0 7
47886: DIFF
47887: ST_TO_ADDR
// if tmp and mech < 6 then
47888: LD_VAR 0 4
47892: PUSH
47893: LD_VAR 0 7
47897: PUSH
47898: LD_INT 6
47900: LESS
47901: AND
47902: IFFALSE 48090
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
47904: LD_ADDR_VAR 0 9
47908: PUSH
47909: LD_VAR 0 4
47913: PUSH
47914: LD_VAR 0 8
47918: PUSH
47919: LD_VAR 0 7
47923: UNION
47924: DIFF
47925: PPUSH
47926: LD_INT 3
47928: PPUSH
47929: CALL 38945 0 2
47933: ST_TO_ADDR
// p := [ ] ;
47934: LD_ADDR_VAR 0 11
47938: PUSH
47939: EMPTY
47940: ST_TO_ADDR
// if sort then
47941: LD_VAR 0 9
47945: IFFALSE 48061
// for i = 1 to 6 - mech do
47947: LD_ADDR_VAR 0 3
47951: PUSH
47952: DOUBLE
47953: LD_INT 1
47955: DEC
47956: ST_TO_ADDR
47957: LD_INT 6
47959: PUSH
47960: LD_VAR 0 7
47964: MINUS
47965: PUSH
47966: FOR_TO
47967: IFFALSE 48059
// begin if i = sort then
47969: LD_VAR 0 3
47973: PUSH
47974: LD_VAR 0 9
47978: EQUAL
47979: IFFALSE 47983
// break ;
47981: GO 48059
// if GetClass ( i ) = 3 then
47983: LD_VAR 0 3
47987: PPUSH
47988: CALL_OW 257
47992: PUSH
47993: LD_INT 3
47995: EQUAL
47996: IFFALSE 48000
// continue ;
47998: GO 47966
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48000: LD_ADDR_VAR 0 11
48004: PUSH
48005: LD_VAR 0 11
48009: PPUSH
48010: LD_VAR 0 11
48014: PUSH
48015: LD_INT 1
48017: PLUS
48018: PPUSH
48019: LD_VAR 0 9
48023: PUSH
48024: LD_VAR 0 3
48028: ARRAY
48029: PPUSH
48030: CALL_OW 2
48034: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48035: LD_ADDR_VAR 0 4
48039: PUSH
48040: LD_VAR 0 4
48044: PUSH
48045: LD_VAR 0 9
48049: PUSH
48050: LD_VAR 0 3
48054: ARRAY
48055: DIFF
48056: ST_TO_ADDR
// end ;
48057: GO 47966
48059: POP
48060: POP
// if p then
48061: LD_VAR 0 11
48065: IFFALSE 48090
// result := Replace ( result , 3 , p ) ;
48067: LD_ADDR_VAR 0 2
48071: PUSH
48072: LD_VAR 0 2
48076: PPUSH
48077: LD_INT 3
48079: PPUSH
48080: LD_VAR 0 11
48084: PPUSH
48085: CALL_OW 1
48089: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
48090: LD_ADDR_VAR 0 4
48094: PUSH
48095: LD_VAR 0 4
48099: PUSH
48100: LD_VAR 0 6
48104: DIFF
48105: ST_TO_ADDR
// if tmp and eng < 6 then
48106: LD_VAR 0 4
48110: PUSH
48111: LD_VAR 0 6
48115: PUSH
48116: LD_INT 6
48118: LESS
48119: AND
48120: IFFALSE 48314
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
48122: LD_ADDR_VAR 0 9
48126: PUSH
48127: LD_VAR 0 4
48131: PUSH
48132: LD_VAR 0 8
48136: PUSH
48137: LD_VAR 0 7
48141: UNION
48142: PUSH
48143: LD_VAR 0 6
48147: UNION
48148: DIFF
48149: PPUSH
48150: LD_INT 2
48152: PPUSH
48153: CALL 38945 0 2
48157: ST_TO_ADDR
// p := [ ] ;
48158: LD_ADDR_VAR 0 11
48162: PUSH
48163: EMPTY
48164: ST_TO_ADDR
// if sort then
48165: LD_VAR 0 9
48169: IFFALSE 48285
// for i = 1 to 6 - eng do
48171: LD_ADDR_VAR 0 3
48175: PUSH
48176: DOUBLE
48177: LD_INT 1
48179: DEC
48180: ST_TO_ADDR
48181: LD_INT 6
48183: PUSH
48184: LD_VAR 0 6
48188: MINUS
48189: PUSH
48190: FOR_TO
48191: IFFALSE 48283
// begin if i = sort then
48193: LD_VAR 0 3
48197: PUSH
48198: LD_VAR 0 9
48202: EQUAL
48203: IFFALSE 48207
// break ;
48205: GO 48283
// if GetClass ( i ) = 2 then
48207: LD_VAR 0 3
48211: PPUSH
48212: CALL_OW 257
48216: PUSH
48217: LD_INT 2
48219: EQUAL
48220: IFFALSE 48224
// continue ;
48222: GO 48190
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48224: LD_ADDR_VAR 0 11
48228: PUSH
48229: LD_VAR 0 11
48233: PPUSH
48234: LD_VAR 0 11
48238: PUSH
48239: LD_INT 1
48241: PLUS
48242: PPUSH
48243: LD_VAR 0 9
48247: PUSH
48248: LD_VAR 0 3
48252: ARRAY
48253: PPUSH
48254: CALL_OW 2
48258: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48259: LD_ADDR_VAR 0 4
48263: PUSH
48264: LD_VAR 0 4
48268: PUSH
48269: LD_VAR 0 9
48273: PUSH
48274: LD_VAR 0 3
48278: ARRAY
48279: DIFF
48280: ST_TO_ADDR
// end ;
48281: GO 48190
48283: POP
48284: POP
// if p then
48285: LD_VAR 0 11
48289: IFFALSE 48314
// result := Replace ( result , 2 , p ) ;
48291: LD_ADDR_VAR 0 2
48295: PUSH
48296: LD_VAR 0 2
48300: PPUSH
48301: LD_INT 2
48303: PPUSH
48304: LD_VAR 0 11
48308: PPUSH
48309: CALL_OW 1
48313: ST_TO_ADDR
// end ; exit ;
48314: GO 49038
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
48316: LD_EXP 41
48320: PUSH
48321: LD_EXP 40
48325: PUSH
48326: LD_VAR 0 1
48330: ARRAY
48331: ARRAY
48332: NOT
48333: PUSH
48334: LD_EXP 14
48338: PUSH
48339: LD_VAR 0 1
48343: ARRAY
48344: PPUSH
48345: LD_INT 30
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PPUSH
48355: CALL_OW 72
48359: AND
48360: PUSH
48361: LD_EXP 19
48365: PUSH
48366: LD_VAR 0 1
48370: ARRAY
48371: NOT
48372: AND
48373: IFFALSE 49038
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
48375: LD_ADDR_EXP 56
48379: PUSH
48380: LD_EXP 56
48384: PPUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: LD_INT 6
48392: PPUSH
48393: CALL_OW 1
48397: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
48398: LD_ADDR_VAR 0 2
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: ST_TO_ADDR
// if sci >= 1 then
48421: LD_VAR 0 8
48425: PUSH
48426: LD_INT 1
48428: GREATEREQUAL
48429: IFFALSE 48451
// tmp := tmp diff sci [ 1 ] ;
48431: LD_ADDR_VAR 0 4
48435: PUSH
48436: LD_VAR 0 4
48440: PUSH
48441: LD_VAR 0 8
48445: PUSH
48446: LD_INT 1
48448: ARRAY
48449: DIFF
48450: ST_TO_ADDR
// if tmp and not sci then
48451: LD_VAR 0 4
48455: PUSH
48456: LD_VAR 0 8
48460: NOT
48461: AND
48462: IFFALSE 48531
// begin sort := SortBySkill ( tmp , 4 ) ;
48464: LD_ADDR_VAR 0 9
48468: PUSH
48469: LD_VAR 0 4
48473: PPUSH
48474: LD_INT 4
48476: PPUSH
48477: CALL 38945 0 2
48481: ST_TO_ADDR
// if sort then
48482: LD_VAR 0 9
48486: IFFALSE 48502
// p := sort [ 1 ] ;
48488: LD_ADDR_VAR 0 11
48492: PUSH
48493: LD_VAR 0 9
48497: PUSH
48498: LD_INT 1
48500: ARRAY
48501: ST_TO_ADDR
// if p then
48502: LD_VAR 0 11
48506: IFFALSE 48531
// result := Replace ( result , 4 , p ) ;
48508: LD_ADDR_VAR 0 2
48512: PUSH
48513: LD_VAR 0 2
48517: PPUSH
48518: LD_INT 4
48520: PPUSH
48521: LD_VAR 0 11
48525: PPUSH
48526: CALL_OW 1
48530: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
48531: LD_ADDR_VAR 0 4
48535: PUSH
48536: LD_VAR 0 4
48540: PUSH
48541: LD_VAR 0 7
48545: DIFF
48546: ST_TO_ADDR
// if tmp and mech < 6 then
48547: LD_VAR 0 4
48551: PUSH
48552: LD_VAR 0 7
48556: PUSH
48557: LD_INT 6
48559: LESS
48560: AND
48561: IFFALSE 48743
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
48563: LD_ADDR_VAR 0 9
48567: PUSH
48568: LD_VAR 0 4
48572: PUSH
48573: LD_VAR 0 7
48577: DIFF
48578: PPUSH
48579: LD_INT 3
48581: PPUSH
48582: CALL 38945 0 2
48586: ST_TO_ADDR
// p := [ ] ;
48587: LD_ADDR_VAR 0 11
48591: PUSH
48592: EMPTY
48593: ST_TO_ADDR
// if sort then
48594: LD_VAR 0 9
48598: IFFALSE 48714
// for i = 1 to 6 - mech do
48600: LD_ADDR_VAR 0 3
48604: PUSH
48605: DOUBLE
48606: LD_INT 1
48608: DEC
48609: ST_TO_ADDR
48610: LD_INT 6
48612: PUSH
48613: LD_VAR 0 7
48617: MINUS
48618: PUSH
48619: FOR_TO
48620: IFFALSE 48712
// begin if i = sort then
48622: LD_VAR 0 3
48626: PUSH
48627: LD_VAR 0 9
48631: EQUAL
48632: IFFALSE 48636
// break ;
48634: GO 48712
// if GetClass ( i ) = 3 then
48636: LD_VAR 0 3
48640: PPUSH
48641: CALL_OW 257
48645: PUSH
48646: LD_INT 3
48648: EQUAL
48649: IFFALSE 48653
// continue ;
48651: GO 48619
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48653: LD_ADDR_VAR 0 11
48657: PUSH
48658: LD_VAR 0 11
48662: PPUSH
48663: LD_VAR 0 11
48667: PUSH
48668: LD_INT 1
48670: PLUS
48671: PPUSH
48672: LD_VAR 0 9
48676: PUSH
48677: LD_VAR 0 3
48681: ARRAY
48682: PPUSH
48683: CALL_OW 2
48687: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48688: LD_ADDR_VAR 0 4
48692: PUSH
48693: LD_VAR 0 4
48697: PUSH
48698: LD_VAR 0 9
48702: PUSH
48703: LD_VAR 0 3
48707: ARRAY
48708: DIFF
48709: ST_TO_ADDR
// end ;
48710: GO 48619
48712: POP
48713: POP
// if p then
48714: LD_VAR 0 11
48718: IFFALSE 48743
// result := Replace ( result , 3 , p ) ;
48720: LD_ADDR_VAR 0 2
48724: PUSH
48725: LD_VAR 0 2
48729: PPUSH
48730: LD_INT 3
48732: PPUSH
48733: LD_VAR 0 11
48737: PPUSH
48738: CALL_OW 1
48742: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
48743: LD_ADDR_VAR 0 4
48747: PUSH
48748: LD_VAR 0 4
48752: PUSH
48753: LD_VAR 0 6
48757: DIFF
48758: ST_TO_ADDR
// if tmp and eng < 4 then
48759: LD_VAR 0 4
48763: PUSH
48764: LD_VAR 0 6
48768: PUSH
48769: LD_INT 4
48771: LESS
48772: AND
48773: IFFALSE 48963
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
48775: LD_ADDR_VAR 0 9
48779: PUSH
48780: LD_VAR 0 4
48784: PUSH
48785: LD_VAR 0 7
48789: PUSH
48790: LD_VAR 0 6
48794: UNION
48795: DIFF
48796: PPUSH
48797: LD_INT 2
48799: PPUSH
48800: CALL 38945 0 2
48804: ST_TO_ADDR
// p := [ ] ;
48805: LD_ADDR_VAR 0 11
48809: PUSH
48810: EMPTY
48811: ST_TO_ADDR
// if sort then
48812: LD_VAR 0 9
48816: IFFALSE 48932
// for i = 1 to 4 - eng do
48818: LD_ADDR_VAR 0 3
48822: PUSH
48823: DOUBLE
48824: LD_INT 1
48826: DEC
48827: ST_TO_ADDR
48828: LD_INT 4
48830: PUSH
48831: LD_VAR 0 6
48835: MINUS
48836: PUSH
48837: FOR_TO
48838: IFFALSE 48930
// begin if i = sort then
48840: LD_VAR 0 3
48844: PUSH
48845: LD_VAR 0 9
48849: EQUAL
48850: IFFALSE 48854
// break ;
48852: GO 48930
// if GetClass ( i ) = 2 then
48854: LD_VAR 0 3
48858: PPUSH
48859: CALL_OW 257
48863: PUSH
48864: LD_INT 2
48866: EQUAL
48867: IFFALSE 48871
// continue ;
48869: GO 48837
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48871: LD_ADDR_VAR 0 11
48875: PUSH
48876: LD_VAR 0 11
48880: PPUSH
48881: LD_VAR 0 11
48885: PUSH
48886: LD_INT 1
48888: PLUS
48889: PPUSH
48890: LD_VAR 0 9
48894: PUSH
48895: LD_VAR 0 3
48899: ARRAY
48900: PPUSH
48901: CALL_OW 2
48905: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48906: LD_ADDR_VAR 0 4
48910: PUSH
48911: LD_VAR 0 4
48915: PUSH
48916: LD_VAR 0 9
48920: PUSH
48921: LD_VAR 0 3
48925: ARRAY
48926: DIFF
48927: ST_TO_ADDR
// end ;
48928: GO 48837
48930: POP
48931: POP
// if p then
48932: LD_VAR 0 11
48936: IFFALSE 48961
// result := Replace ( result , 2 , p ) ;
48938: LD_ADDR_VAR 0 2
48942: PUSH
48943: LD_VAR 0 2
48947: PPUSH
48948: LD_INT 2
48950: PPUSH
48951: LD_VAR 0 11
48955: PPUSH
48956: CALL_OW 1
48960: ST_TO_ADDR
// end else
48961: GO 49007
// for i = eng downto 5 do
48963: LD_ADDR_VAR 0 3
48967: PUSH
48968: DOUBLE
48969: LD_VAR 0 6
48973: INC
48974: ST_TO_ADDR
48975: LD_INT 5
48977: PUSH
48978: FOR_DOWNTO
48979: IFFALSE 49005
// tmp := tmp union eng [ i ] ;
48981: LD_ADDR_VAR 0 4
48985: PUSH
48986: LD_VAR 0 4
48990: PUSH
48991: LD_VAR 0 6
48995: PUSH
48996: LD_VAR 0 3
49000: ARRAY
49001: UNION
49002: ST_TO_ADDR
49003: GO 48978
49005: POP
49006: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
49007: LD_ADDR_VAR 0 2
49011: PUSH
49012: LD_VAR 0 2
49016: PPUSH
49017: LD_INT 1
49019: PPUSH
49020: LD_VAR 0 4
49024: PUSH
49025: LD_VAR 0 5
49029: DIFF
49030: PPUSH
49031: CALL_OW 1
49035: ST_TO_ADDR
// exit ;
49036: GO 49038
// end ; end ;
49038: LD_VAR 0 2
49042: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
49043: LD_INT 0
49045: PPUSH
49046: PPUSH
49047: PPUSH
// if not mc_bases then
49048: LD_EXP 14
49052: NOT
49053: IFFALSE 49057
// exit ;
49055: GO 49163
// for i = 1 to mc_bases do
49057: LD_ADDR_VAR 0 2
49061: PUSH
49062: DOUBLE
49063: LD_INT 1
49065: DEC
49066: ST_TO_ADDR
49067: LD_EXP 14
49071: PUSH
49072: FOR_TO
49073: IFFALSE 49154
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
49075: LD_ADDR_VAR 0 3
49079: PUSH
49080: LD_EXP 14
49084: PUSH
49085: LD_VAR 0 2
49089: ARRAY
49090: PPUSH
49091: LD_INT 21
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: LD_INT 24
49106: PUSH
49107: LD_INT 1000
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PPUSH
49122: CALL_OW 72
49126: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
49127: LD_ADDR_EXP 15
49131: PUSH
49132: LD_EXP 15
49136: PPUSH
49137: LD_VAR 0 2
49141: PPUSH
49142: LD_VAR 0 3
49146: PPUSH
49147: CALL_OW 1
49151: ST_TO_ADDR
// end ;
49152: GO 49072
49154: POP
49155: POP
// RaiseSailEvent ( 101 ) ;
49156: LD_INT 101
49158: PPUSH
49159: CALL_OW 427
// end ;
49163: LD_VAR 0 1
49167: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
49168: LD_INT 0
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
// if not mc_bases then
49177: LD_EXP 14
49181: NOT
49182: IFFALSE 49186
// exit ;
49184: GO 49748
// for i = 1 to mc_bases do
49186: LD_ADDR_VAR 0 2
49190: PUSH
49191: DOUBLE
49192: LD_INT 1
49194: DEC
49195: ST_TO_ADDR
49196: LD_EXP 14
49200: PUSH
49201: FOR_TO
49202: IFFALSE 49739
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
49204: LD_ADDR_VAR 0 5
49208: PUSH
49209: LD_EXP 14
49213: PUSH
49214: LD_VAR 0 2
49218: ARRAY
49219: PUSH
49220: LD_EXP 43
49224: PUSH
49225: LD_VAR 0 2
49229: ARRAY
49230: UNION
49231: PPUSH
49232: LD_INT 21
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: LD_INT 54
49250: PUSH
49251: EMPTY
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: LD_INT 24
49263: PUSH
49264: LD_INT 800
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PPUSH
49284: CALL_OW 72
49288: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
49289: LD_ADDR_VAR 0 6
49293: PUSH
49294: LD_EXP 14
49298: PUSH
49299: LD_VAR 0 2
49303: ARRAY
49304: PPUSH
49305: LD_INT 21
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: LD_INT 54
49323: PUSH
49324: EMPTY
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: LD_INT 24
49336: PUSH
49337: LD_INT 250
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PPUSH
49357: CALL_OW 72
49361: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
49362: LD_ADDR_VAR 0 7
49366: PUSH
49367: LD_VAR 0 5
49371: PUSH
49372: LD_VAR 0 6
49376: DIFF
49377: ST_TO_ADDR
// if not need_heal_1 then
49378: LD_VAR 0 6
49382: NOT
49383: IFFALSE 49416
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
49385: LD_ADDR_EXP 17
49389: PUSH
49390: LD_EXP 17
49394: PPUSH
49395: LD_VAR 0 2
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PPUSH
49407: EMPTY
49408: PPUSH
49409: CALL 9396 0 3
49413: ST_TO_ADDR
49414: GO 49486
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
49416: LD_ADDR_EXP 17
49420: PUSH
49421: LD_EXP 17
49425: PPUSH
49426: LD_VAR 0 2
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PPUSH
49438: LD_EXP 17
49442: PUSH
49443: LD_VAR 0 2
49447: ARRAY
49448: PUSH
49449: LD_INT 1
49451: ARRAY
49452: PPUSH
49453: LD_INT 3
49455: PUSH
49456: LD_INT 24
49458: PUSH
49459: LD_INT 1000
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PPUSH
49470: CALL_OW 72
49474: PUSH
49475: LD_VAR 0 6
49479: UNION
49480: PPUSH
49481: CALL 9396 0 3
49485: ST_TO_ADDR
// if not need_heal_2 then
49486: LD_VAR 0 7
49490: NOT
49491: IFFALSE 49524
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
49493: LD_ADDR_EXP 17
49497: PUSH
49498: LD_EXP 17
49502: PPUSH
49503: LD_VAR 0 2
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PPUSH
49515: EMPTY
49516: PPUSH
49517: CALL 9396 0 3
49521: ST_TO_ADDR
49522: GO 49556
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
49524: LD_ADDR_EXP 17
49528: PUSH
49529: LD_EXP 17
49533: PPUSH
49534: LD_VAR 0 2
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PPUSH
49546: LD_VAR 0 7
49550: PPUSH
49551: CALL 9396 0 3
49555: ST_TO_ADDR
// if need_heal_2 then
49556: LD_VAR 0 7
49560: IFFALSE 49721
// for j in need_heal_2 do
49562: LD_ADDR_VAR 0 3
49566: PUSH
49567: LD_VAR 0 7
49571: PUSH
49572: FOR_IN
49573: IFFALSE 49719
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49575: LD_ADDR_VAR 0 5
49579: PUSH
49580: LD_EXP 14
49584: PUSH
49585: LD_VAR 0 2
49589: ARRAY
49590: PPUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 30
49596: PUSH
49597: LD_INT 6
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 30
49606: PUSH
49607: LD_INT 7
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 30
49616: PUSH
49617: LD_INT 8
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 30
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 30
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: PPUSH
49652: CALL_OW 72
49656: ST_TO_ADDR
// if tmp then
49657: LD_VAR 0 5
49661: IFFALSE 49717
// begin k := NearestUnitToUnit ( tmp , j ) ;
49663: LD_ADDR_VAR 0 4
49667: PUSH
49668: LD_VAR 0 5
49672: PPUSH
49673: LD_VAR 0 3
49677: PPUSH
49678: CALL_OW 74
49682: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
49683: LD_VAR 0 3
49687: PPUSH
49688: LD_VAR 0 4
49692: PPUSH
49693: CALL_OW 296
49697: PUSH
49698: LD_INT 5
49700: GREATER
49701: IFFALSE 49717
// ComMoveUnit ( j , k ) ;
49703: LD_VAR 0 3
49707: PPUSH
49708: LD_VAR 0 4
49712: PPUSH
49713: CALL_OW 112
// end ; end ;
49717: GO 49572
49719: POP
49720: POP
// if not need_heal_1 and not need_heal_2 then
49721: LD_VAR 0 6
49725: NOT
49726: PUSH
49727: LD_VAR 0 7
49731: NOT
49732: AND
49733: IFFALSE 49737
// continue ;
49735: GO 49201
// end ;
49737: GO 49201
49739: POP
49740: POP
// RaiseSailEvent ( 102 ) ;
49741: LD_INT 102
49743: PPUSH
49744: CALL_OW 427
// end ;
49748: LD_VAR 0 1
49752: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
49753: LD_INT 0
49755: PPUSH
49756: PPUSH
49757: PPUSH
49758: PPUSH
49759: PPUSH
49760: PPUSH
49761: PPUSH
49762: PPUSH
// if not mc_bases then
49763: LD_EXP 14
49767: NOT
49768: IFFALSE 49772
// exit ;
49770: GO 50607
// for i = 1 to mc_bases do
49772: LD_ADDR_VAR 0 2
49776: PUSH
49777: DOUBLE
49778: LD_INT 1
49780: DEC
49781: ST_TO_ADDR
49782: LD_EXP 14
49786: PUSH
49787: FOR_TO
49788: IFFALSE 50605
// begin if not mc_building_need_repair [ i ] then
49790: LD_EXP 15
49794: PUSH
49795: LD_VAR 0 2
49799: ARRAY
49800: NOT
49801: IFFALSE 49975
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
49803: LD_ADDR_VAR 0 6
49807: PUSH
49808: LD_EXP 33
49812: PUSH
49813: LD_VAR 0 2
49817: ARRAY
49818: PPUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 24
49824: PUSH
49825: LD_INT 1000
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 34
49841: PUSH
49842: LD_INT 13
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 34
49851: PUSH
49852: LD_INT 52
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PPUSH
49868: CALL_OW 72
49872: ST_TO_ADDR
// if cranes then
49873: LD_VAR 0 6
49877: IFFALSE 49939
// for j in cranes do
49879: LD_ADDR_VAR 0 3
49883: PUSH
49884: LD_VAR 0 6
49888: PUSH
49889: FOR_IN
49890: IFFALSE 49937
// if not IsInArea ( j , mc_parking [ i ] ) then
49892: LD_VAR 0 3
49896: PPUSH
49897: LD_EXP 38
49901: PUSH
49902: LD_VAR 0 2
49906: ARRAY
49907: PPUSH
49908: CALL_OW 308
49912: NOT
49913: IFFALSE 49935
// ComMoveToArea ( j , mc_parking [ i ] ) ;
49915: LD_VAR 0 3
49919: PPUSH
49920: LD_EXP 38
49924: PUSH
49925: LD_VAR 0 2
49929: ARRAY
49930: PPUSH
49931: CALL_OW 113
49935: GO 49889
49937: POP
49938: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49939: LD_ADDR_EXP 16
49943: PUSH
49944: LD_EXP 16
49948: PPUSH
49949: LD_VAR 0 2
49953: PPUSH
49954: EMPTY
49955: PPUSH
49956: CALL_OW 1
49960: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
49961: LD_VAR 0 2
49965: PPUSH
49966: LD_INT 101
49968: PPUSH
49969: CALL 44876 0 2
// continue ;
49973: GO 49787
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
49975: LD_ADDR_EXP 20
49979: PUSH
49980: LD_EXP 20
49984: PPUSH
49985: LD_VAR 0 2
49989: PPUSH
49990: EMPTY
49991: PPUSH
49992: CALL_OW 1
49996: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49997: LD_VAR 0 2
50001: PPUSH
50002: LD_INT 103
50004: PPUSH
50005: CALL 44876 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
50009: LD_ADDR_VAR 0 5
50013: PUSH
50014: LD_EXP 14
50018: PUSH
50019: LD_VAR 0 2
50023: ARRAY
50024: PUSH
50025: LD_EXP 43
50029: PUSH
50030: LD_VAR 0 2
50034: ARRAY
50035: UNION
50036: PPUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 25
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 25
50052: PUSH
50053: LD_INT 16
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: PUSH
50065: EMPTY
50066: LIST
50067: PPUSH
50068: CALL_OW 72
50072: PUSH
50073: LD_EXP 17
50077: PUSH
50078: LD_VAR 0 2
50082: ARRAY
50083: PUSH
50084: LD_INT 1
50086: ARRAY
50087: PUSH
50088: LD_EXP 17
50092: PUSH
50093: LD_VAR 0 2
50097: ARRAY
50098: PUSH
50099: LD_INT 2
50101: ARRAY
50102: UNION
50103: DIFF
50104: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
50105: LD_ADDR_VAR 0 6
50109: PUSH
50110: LD_EXP 33
50114: PUSH
50115: LD_VAR 0 2
50119: ARRAY
50120: PPUSH
50121: LD_INT 2
50123: PUSH
50124: LD_INT 34
50126: PUSH
50127: LD_INT 13
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 34
50136: PUSH
50137: LD_INT 52
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: PPUSH
50149: CALL_OW 72
50153: ST_TO_ADDR
// if cranes then
50154: LD_VAR 0 6
50158: IFFALSE 50294
// begin for j in cranes do
50160: LD_ADDR_VAR 0 3
50164: PUSH
50165: LD_VAR 0 6
50169: PUSH
50170: FOR_IN
50171: IFFALSE 50292
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
50173: LD_VAR 0 3
50177: PPUSH
50178: CALL_OW 256
50182: PUSH
50183: LD_INT 500
50185: GREATEREQUAL
50186: PUSH
50187: LD_VAR 0 3
50191: PPUSH
50192: CALL_OW 314
50196: NOT
50197: AND
50198: IFFALSE 50232
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
50200: LD_VAR 0 3
50204: PPUSH
50205: LD_EXP 15
50209: PUSH
50210: LD_VAR 0 2
50214: ARRAY
50215: PPUSH
50216: LD_VAR 0 3
50220: PPUSH
50221: CALL_OW 74
50225: PPUSH
50226: CALL_OW 130
50230: GO 50290
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
50232: LD_VAR 0 3
50236: PPUSH
50237: CALL_OW 256
50241: PUSH
50242: LD_INT 500
50244: LESS
50245: PUSH
50246: LD_VAR 0 3
50250: PPUSH
50251: LD_EXP 38
50255: PUSH
50256: LD_VAR 0 2
50260: ARRAY
50261: PPUSH
50262: CALL_OW 308
50266: NOT
50267: AND
50268: IFFALSE 50290
// ComMoveToArea ( j , mc_parking [ i ] ) ;
50270: LD_VAR 0 3
50274: PPUSH
50275: LD_EXP 38
50279: PUSH
50280: LD_VAR 0 2
50284: ARRAY
50285: PPUSH
50286: CALL_OW 113
50290: GO 50170
50292: POP
50293: POP
// end ; if tmp > 3 then
50294: LD_VAR 0 5
50298: PUSH
50299: LD_INT 3
50301: GREATER
50302: IFFALSE 50322
// tmp := ShrinkArray ( tmp , 4 ) ;
50304: LD_ADDR_VAR 0 5
50308: PUSH
50309: LD_VAR 0 5
50313: PPUSH
50314: LD_INT 4
50316: PPUSH
50317: CALL 40622 0 2
50321: ST_TO_ADDR
// if not tmp then
50322: LD_VAR 0 5
50326: NOT
50327: IFFALSE 50331
// continue ;
50329: GO 49787
// for j in tmp do
50331: LD_ADDR_VAR 0 3
50335: PUSH
50336: LD_VAR 0 5
50340: PUSH
50341: FOR_IN
50342: IFFALSE 50601
// begin if IsInUnit ( j ) then
50344: LD_VAR 0 3
50348: PPUSH
50349: CALL_OW 310
50353: IFFALSE 50364
// ComExitBuilding ( j ) ;
50355: LD_VAR 0 3
50359: PPUSH
50360: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
50364: LD_VAR 0 3
50368: PUSH
50369: LD_EXP 16
50373: PUSH
50374: LD_VAR 0 2
50378: ARRAY
50379: IN
50380: NOT
50381: IFFALSE 50439
// begin SetTag ( j , 101 ) ;
50383: LD_VAR 0 3
50387: PPUSH
50388: LD_INT 101
50390: PPUSH
50391: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
50395: LD_ADDR_EXP 16
50399: PUSH
50400: LD_EXP 16
50404: PPUSH
50405: LD_VAR 0 2
50409: PUSH
50410: LD_EXP 16
50414: PUSH
50415: LD_VAR 0 2
50419: ARRAY
50420: PUSH
50421: LD_INT 1
50423: PLUS
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PPUSH
50429: LD_VAR 0 3
50433: PPUSH
50434: CALL 9396 0 3
50438: ST_TO_ADDR
// end ; wait ( 1 ) ;
50439: LD_INT 1
50441: PPUSH
50442: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
50446: LD_ADDR_VAR 0 7
50450: PUSH
50451: LD_EXP 15
50455: PUSH
50456: LD_VAR 0 2
50460: ARRAY
50461: ST_TO_ADDR
// if mc_scan [ i ] then
50462: LD_EXP 37
50466: PUSH
50467: LD_VAR 0 2
50471: ARRAY
50472: IFFALSE 50534
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
50474: LD_ADDR_VAR 0 7
50478: PUSH
50479: LD_EXP 15
50483: PUSH
50484: LD_VAR 0 2
50488: ARRAY
50489: PPUSH
50490: LD_INT 3
50492: PUSH
50493: LD_INT 30
50495: PUSH
50496: LD_INT 32
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 30
50505: PUSH
50506: LD_INT 33
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 30
50515: PUSH
50516: LD_INT 31
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: PPUSH
50529: CALL_OW 72
50533: ST_TO_ADDR
// if not to_repair_tmp then
50534: LD_VAR 0 7
50538: NOT
50539: IFFALSE 50543
// continue ;
50541: GO 50341
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
50543: LD_ADDR_VAR 0 8
50547: PUSH
50548: LD_VAR 0 7
50552: PPUSH
50553: LD_VAR 0 3
50557: PPUSH
50558: CALL_OW 74
50562: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
50563: LD_VAR 0 8
50567: PPUSH
50568: LD_INT 16
50570: PPUSH
50571: CALL 11989 0 2
50575: PUSH
50576: LD_INT 4
50578: ARRAY
50579: PUSH
50580: LD_INT 5
50582: LESS
50583: IFFALSE 50599
// ComRepairBuilding ( j , to_repair ) ;
50585: LD_VAR 0 3
50589: PPUSH
50590: LD_VAR 0 8
50594: PPUSH
50595: CALL_OW 130
// end ;
50599: GO 50341
50601: POP
50602: POP
// end ;
50603: GO 49787
50605: POP
50606: POP
// end ;
50607: LD_VAR 0 1
50611: RET
// export function MC_Heal ; var i , j , tmp ; begin
50612: LD_INT 0
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
// if not mc_bases then
50618: LD_EXP 14
50622: NOT
50623: IFFALSE 50627
// exit ;
50625: GO 51029
// for i = 1 to mc_bases do
50627: LD_ADDR_VAR 0 2
50631: PUSH
50632: DOUBLE
50633: LD_INT 1
50635: DEC
50636: ST_TO_ADDR
50637: LD_EXP 14
50641: PUSH
50642: FOR_TO
50643: IFFALSE 51027
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
50645: LD_EXP 17
50649: PUSH
50650: LD_VAR 0 2
50654: ARRAY
50655: PUSH
50656: LD_INT 1
50658: ARRAY
50659: NOT
50660: PUSH
50661: LD_EXP 17
50665: PUSH
50666: LD_VAR 0 2
50670: ARRAY
50671: PUSH
50672: LD_INT 2
50674: ARRAY
50675: NOT
50676: AND
50677: IFFALSE 50715
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
50679: LD_ADDR_EXP 18
50683: PUSH
50684: LD_EXP 18
50688: PPUSH
50689: LD_VAR 0 2
50693: PPUSH
50694: EMPTY
50695: PPUSH
50696: CALL_OW 1
50700: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
50701: LD_VAR 0 2
50705: PPUSH
50706: LD_INT 102
50708: PPUSH
50709: CALL 44876 0 2
// continue ;
50713: GO 50642
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
50715: LD_ADDR_VAR 0 4
50719: PUSH
50720: LD_EXP 14
50724: PUSH
50725: LD_VAR 0 2
50729: ARRAY
50730: PPUSH
50731: LD_INT 25
50733: PUSH
50734: LD_INT 4
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PPUSH
50741: CALL_OW 72
50745: ST_TO_ADDR
// if not tmp then
50746: LD_VAR 0 4
50750: NOT
50751: IFFALSE 50755
// continue ;
50753: GO 50642
// if mc_taming [ i ] then
50755: LD_EXP 45
50759: PUSH
50760: LD_VAR 0 2
50764: ARRAY
50765: IFFALSE 50789
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50767: LD_ADDR_EXP 45
50771: PUSH
50772: LD_EXP 45
50776: PPUSH
50777: LD_VAR 0 2
50781: PPUSH
50782: EMPTY
50783: PPUSH
50784: CALL_OW 1
50788: ST_TO_ADDR
// for j in tmp do
50789: LD_ADDR_VAR 0 3
50793: PUSH
50794: LD_VAR 0 4
50798: PUSH
50799: FOR_IN
50800: IFFALSE 51023
// begin if IsInUnit ( j ) then
50802: LD_VAR 0 3
50806: PPUSH
50807: CALL_OW 310
50811: IFFALSE 50822
// ComExitBuilding ( j ) ;
50813: LD_VAR 0 3
50817: PPUSH
50818: CALL_OW 122
// if not j in mc_healers [ i ] then
50822: LD_VAR 0 3
50826: PUSH
50827: LD_EXP 18
50831: PUSH
50832: LD_VAR 0 2
50836: ARRAY
50837: IN
50838: NOT
50839: IFFALSE 50885
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
50841: LD_ADDR_EXP 18
50845: PUSH
50846: LD_EXP 18
50850: PPUSH
50851: LD_VAR 0 2
50855: PUSH
50856: LD_EXP 18
50860: PUSH
50861: LD_VAR 0 2
50865: ARRAY
50866: PUSH
50867: LD_INT 1
50869: PLUS
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PPUSH
50875: LD_VAR 0 3
50879: PPUSH
50880: CALL 9396 0 3
50884: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
50885: LD_VAR 0 3
50889: PPUSH
50890: CALL_OW 110
50894: PUSH
50895: LD_INT 102
50897: NONEQUAL
50898: IFFALSE 50912
// SetTag ( j , 102 ) ;
50900: LD_VAR 0 3
50904: PPUSH
50905: LD_INT 102
50907: PPUSH
50908: CALL_OW 109
// Wait ( 3 ) ;
50912: LD_INT 3
50914: PPUSH
50915: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
50919: LD_EXP 17
50923: PUSH
50924: LD_VAR 0 2
50928: ARRAY
50929: PUSH
50930: LD_INT 1
50932: ARRAY
50933: IFFALSE 50965
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
50935: LD_VAR 0 3
50939: PPUSH
50940: LD_EXP 17
50944: PUSH
50945: LD_VAR 0 2
50949: ARRAY
50950: PUSH
50951: LD_INT 1
50953: ARRAY
50954: PUSH
50955: LD_INT 1
50957: ARRAY
50958: PPUSH
50959: CALL_OW 128
50963: GO 51021
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
50965: LD_VAR 0 3
50969: PPUSH
50970: CALL_OW 314
50974: NOT
50975: PUSH
50976: LD_EXP 17
50980: PUSH
50981: LD_VAR 0 2
50985: ARRAY
50986: PUSH
50987: LD_INT 2
50989: ARRAY
50990: AND
50991: IFFALSE 51021
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
50993: LD_VAR 0 3
50997: PPUSH
50998: LD_EXP 17
51002: PUSH
51003: LD_VAR 0 2
51007: ARRAY
51008: PUSH
51009: LD_INT 2
51011: ARRAY
51012: PUSH
51013: LD_INT 1
51015: ARRAY
51016: PPUSH
51017: CALL_OW 128
// end ;
51021: GO 50799
51023: POP
51024: POP
// end ;
51025: GO 50642
51027: POP
51028: POP
// end ;
51029: LD_VAR 0 1
51033: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
51034: LD_INT 0
51036: PPUSH
51037: PPUSH
51038: PPUSH
51039: PPUSH
51040: PPUSH
// if not mc_bases then
51041: LD_EXP 14
51045: NOT
51046: IFFALSE 51050
// exit ;
51048: GO 52193
// for i = 1 to mc_bases do
51050: LD_ADDR_VAR 0 2
51054: PUSH
51055: DOUBLE
51056: LD_INT 1
51058: DEC
51059: ST_TO_ADDR
51060: LD_EXP 14
51064: PUSH
51065: FOR_TO
51066: IFFALSE 52191
// begin if mc_scan [ i ] then
51068: LD_EXP 37
51072: PUSH
51073: LD_VAR 0 2
51077: ARRAY
51078: IFFALSE 51082
// continue ;
51080: GO 51065
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
51082: LD_EXP 19
51086: PUSH
51087: LD_VAR 0 2
51091: ARRAY
51092: NOT
51093: PUSH
51094: LD_EXP 21
51098: PUSH
51099: LD_VAR 0 2
51103: ARRAY
51104: NOT
51105: AND
51106: PUSH
51107: LD_EXP 20
51111: PUSH
51112: LD_VAR 0 2
51116: ARRAY
51117: AND
51118: IFFALSE 51156
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
51120: LD_ADDR_EXP 20
51124: PUSH
51125: LD_EXP 20
51129: PPUSH
51130: LD_VAR 0 2
51134: PPUSH
51135: EMPTY
51136: PPUSH
51137: CALL_OW 1
51141: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
51142: LD_VAR 0 2
51146: PPUSH
51147: LD_INT 103
51149: PPUSH
51150: CALL 44876 0 2
// continue ;
51154: GO 51065
// end ; if mc_construct_list [ i ] then
51156: LD_EXP 21
51160: PUSH
51161: LD_VAR 0 2
51165: ARRAY
51166: IFFALSE 51386
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
51168: LD_ADDR_VAR 0 4
51172: PUSH
51173: LD_EXP 14
51177: PUSH
51178: LD_VAR 0 2
51182: ARRAY
51183: PPUSH
51184: LD_INT 25
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PPUSH
51194: CALL_OW 72
51198: PUSH
51199: LD_EXP 16
51203: PUSH
51204: LD_VAR 0 2
51208: ARRAY
51209: DIFF
51210: ST_TO_ADDR
// if not tmp then
51211: LD_VAR 0 4
51215: NOT
51216: IFFALSE 51220
// continue ;
51218: GO 51065
// for j in tmp do
51220: LD_ADDR_VAR 0 3
51224: PUSH
51225: LD_VAR 0 4
51229: PUSH
51230: FOR_IN
51231: IFFALSE 51382
// begin if not mc_builders [ i ] then
51233: LD_EXP 20
51237: PUSH
51238: LD_VAR 0 2
51242: ARRAY
51243: NOT
51244: IFFALSE 51302
// begin SetTag ( j , 103 ) ;
51246: LD_VAR 0 3
51250: PPUSH
51251: LD_INT 103
51253: PPUSH
51254: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
51258: LD_ADDR_EXP 20
51262: PUSH
51263: LD_EXP 20
51267: PPUSH
51268: LD_VAR 0 2
51272: PUSH
51273: LD_EXP 20
51277: PUSH
51278: LD_VAR 0 2
51282: ARRAY
51283: PUSH
51284: LD_INT 1
51286: PLUS
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PPUSH
51292: LD_VAR 0 3
51296: PPUSH
51297: CALL 9396 0 3
51301: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
51302: LD_VAR 0 3
51306: PPUSH
51307: CALL_OW 310
51311: IFFALSE 51322
// ComExitBuilding ( j ) ;
51313: LD_VAR 0 3
51317: PPUSH
51318: CALL_OW 122
// wait ( 3 ) ;
51322: LD_INT 3
51324: PPUSH
51325: CALL_OW 67
// if not mc_construct_list [ i ] then
51329: LD_EXP 21
51333: PUSH
51334: LD_VAR 0 2
51338: ARRAY
51339: NOT
51340: IFFALSE 51344
// break ;
51342: GO 51382
// if not HasTask ( j ) then
51344: LD_VAR 0 3
51348: PPUSH
51349: CALL_OW 314
51353: NOT
51354: IFFALSE 51380
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
51356: LD_VAR 0 3
51360: PPUSH
51361: LD_EXP 21
51365: PUSH
51366: LD_VAR 0 2
51370: ARRAY
51371: PUSH
51372: LD_INT 1
51374: ARRAY
51375: PPUSH
51376: CALL 12247 0 2
// end ;
51380: GO 51230
51382: POP
51383: POP
// end else
51384: GO 52189
// if mc_build_list [ i ] then
51386: LD_EXP 19
51390: PUSH
51391: LD_VAR 0 2
51395: ARRAY
51396: IFFALSE 52189
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51398: LD_ADDR_VAR 0 5
51402: PUSH
51403: LD_EXP 14
51407: PUSH
51408: LD_VAR 0 2
51412: ARRAY
51413: PPUSH
51414: LD_INT 2
51416: PUSH
51417: LD_INT 30
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 30
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: PPUSH
51442: CALL_OW 72
51446: ST_TO_ADDR
// if depot then
51447: LD_VAR 0 5
51451: IFFALSE 51469
// depot := depot [ 1 ] else
51453: LD_ADDR_VAR 0 5
51457: PUSH
51458: LD_VAR 0 5
51462: PUSH
51463: LD_INT 1
51465: ARRAY
51466: ST_TO_ADDR
51467: GO 51477
// depot := 0 ;
51469: LD_ADDR_VAR 0 5
51473: PUSH
51474: LD_INT 0
51476: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
51477: LD_EXP 19
51481: PUSH
51482: LD_VAR 0 2
51486: ARRAY
51487: PUSH
51488: LD_INT 1
51490: ARRAY
51491: PUSH
51492: LD_INT 1
51494: ARRAY
51495: PPUSH
51496: CALL 12077 0 1
51500: PUSH
51501: LD_EXP 14
51505: PUSH
51506: LD_VAR 0 2
51510: ARRAY
51511: PPUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 30
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 30
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: PPUSH
51540: CALL_OW 72
51544: NOT
51545: AND
51546: IFFALSE 51651
// begin for j = 1 to mc_build_list [ i ] do
51548: LD_ADDR_VAR 0 3
51552: PUSH
51553: DOUBLE
51554: LD_INT 1
51556: DEC
51557: ST_TO_ADDR
51558: LD_EXP 19
51562: PUSH
51563: LD_VAR 0 2
51567: ARRAY
51568: PUSH
51569: FOR_TO
51570: IFFALSE 51649
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
51572: LD_EXP 19
51576: PUSH
51577: LD_VAR 0 2
51581: ARRAY
51582: PUSH
51583: LD_VAR 0 3
51587: ARRAY
51588: PUSH
51589: LD_INT 1
51591: ARRAY
51592: PUSH
51593: LD_INT 2
51595: EQUAL
51596: IFFALSE 51647
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
51598: LD_ADDR_EXP 19
51602: PUSH
51603: LD_EXP 19
51607: PPUSH
51608: LD_VAR 0 2
51612: PPUSH
51613: LD_EXP 19
51617: PUSH
51618: LD_VAR 0 2
51622: ARRAY
51623: PPUSH
51624: LD_VAR 0 3
51628: PPUSH
51629: LD_INT 1
51631: PPUSH
51632: LD_INT 0
51634: PPUSH
51635: CALL 8814 0 4
51639: PPUSH
51640: CALL_OW 1
51644: ST_TO_ADDR
// break ;
51645: GO 51649
// end ;
51647: GO 51569
51649: POP
51650: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
51651: LD_EXP 19
51655: PUSH
51656: LD_VAR 0 2
51660: ARRAY
51661: PUSH
51662: LD_INT 1
51664: ARRAY
51665: PUSH
51666: LD_INT 1
51668: ARRAY
51669: PUSH
51670: LD_INT 0
51672: EQUAL
51673: PUSH
51674: LD_VAR 0 5
51678: PUSH
51679: LD_VAR 0 5
51683: PPUSH
51684: LD_EXP 19
51688: PUSH
51689: LD_VAR 0 2
51693: ARRAY
51694: PUSH
51695: LD_INT 1
51697: ARRAY
51698: PUSH
51699: LD_INT 1
51701: ARRAY
51702: PPUSH
51703: LD_EXP 19
51707: PUSH
51708: LD_VAR 0 2
51712: ARRAY
51713: PUSH
51714: LD_INT 1
51716: ARRAY
51717: PUSH
51718: LD_INT 2
51720: ARRAY
51721: PPUSH
51722: LD_EXP 19
51726: PUSH
51727: LD_VAR 0 2
51731: ARRAY
51732: PUSH
51733: LD_INT 1
51735: ARRAY
51736: PUSH
51737: LD_INT 3
51739: ARRAY
51740: PPUSH
51741: LD_EXP 19
51745: PUSH
51746: LD_VAR 0 2
51750: ARRAY
51751: PUSH
51752: LD_INT 1
51754: ARRAY
51755: PUSH
51756: LD_INT 4
51758: ARRAY
51759: PPUSH
51760: CALL 16811 0 5
51764: AND
51765: OR
51766: IFFALSE 52047
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
51768: LD_ADDR_VAR 0 4
51772: PUSH
51773: LD_EXP 14
51777: PUSH
51778: LD_VAR 0 2
51782: ARRAY
51783: PPUSH
51784: LD_INT 25
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PPUSH
51794: CALL_OW 72
51798: PUSH
51799: LD_EXP 16
51803: PUSH
51804: LD_VAR 0 2
51808: ARRAY
51809: DIFF
51810: ST_TO_ADDR
// if not tmp then
51811: LD_VAR 0 4
51815: NOT
51816: IFFALSE 51820
// continue ;
51818: GO 51065
// for j in tmp do
51820: LD_ADDR_VAR 0 3
51824: PUSH
51825: LD_VAR 0 4
51829: PUSH
51830: FOR_IN
51831: IFFALSE 52043
// begin if not mc_builders [ i ] then
51833: LD_EXP 20
51837: PUSH
51838: LD_VAR 0 2
51842: ARRAY
51843: NOT
51844: IFFALSE 51902
// begin SetTag ( j , 103 ) ;
51846: LD_VAR 0 3
51850: PPUSH
51851: LD_INT 103
51853: PPUSH
51854: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
51858: LD_ADDR_EXP 20
51862: PUSH
51863: LD_EXP 20
51867: PPUSH
51868: LD_VAR 0 2
51872: PUSH
51873: LD_EXP 20
51877: PUSH
51878: LD_VAR 0 2
51882: ARRAY
51883: PUSH
51884: LD_INT 1
51886: PLUS
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PPUSH
51892: LD_VAR 0 3
51896: PPUSH
51897: CALL 9396 0 3
51901: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
51902: LD_VAR 0 3
51906: PPUSH
51907: CALL_OW 310
51911: IFFALSE 51922
// ComExitBuilding ( j ) ;
51913: LD_VAR 0 3
51917: PPUSH
51918: CALL_OW 122
// wait ( 3 ) ;
51922: LD_INT 3
51924: PPUSH
51925: CALL_OW 67
// if not mc_build_list [ i ] then
51929: LD_EXP 19
51933: PUSH
51934: LD_VAR 0 2
51938: ARRAY
51939: NOT
51940: IFFALSE 51944
// break ;
51942: GO 52043
// if not HasTask ( j ) then
51944: LD_VAR 0 3
51948: PPUSH
51949: CALL_OW 314
51953: NOT
51954: IFFALSE 52041
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
51956: LD_VAR 0 3
51960: PPUSH
51961: LD_EXP 19
51965: PUSH
51966: LD_VAR 0 2
51970: ARRAY
51971: PUSH
51972: LD_INT 1
51974: ARRAY
51975: PUSH
51976: LD_INT 1
51978: ARRAY
51979: PPUSH
51980: LD_EXP 19
51984: PUSH
51985: LD_VAR 0 2
51989: ARRAY
51990: PUSH
51991: LD_INT 1
51993: ARRAY
51994: PUSH
51995: LD_INT 2
51997: ARRAY
51998: PPUSH
51999: LD_EXP 19
52003: PUSH
52004: LD_VAR 0 2
52008: ARRAY
52009: PUSH
52010: LD_INT 1
52012: ARRAY
52013: PUSH
52014: LD_INT 3
52016: ARRAY
52017: PPUSH
52018: LD_EXP 19
52022: PUSH
52023: LD_VAR 0 2
52027: ARRAY
52028: PUSH
52029: LD_INT 1
52031: ARRAY
52032: PUSH
52033: LD_INT 4
52035: ARRAY
52036: PPUSH
52037: CALL_OW 145
// end ;
52041: GO 51830
52043: POP
52044: POP
// end else
52045: GO 52189
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
52047: LD_EXP 14
52051: PUSH
52052: LD_VAR 0 2
52056: ARRAY
52057: PPUSH
52058: LD_EXP 19
52062: PUSH
52063: LD_VAR 0 2
52067: ARRAY
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: PUSH
52073: LD_INT 1
52075: ARRAY
52076: PPUSH
52077: LD_EXP 19
52081: PUSH
52082: LD_VAR 0 2
52086: ARRAY
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PUSH
52092: LD_INT 2
52094: ARRAY
52095: PPUSH
52096: LD_EXP 19
52100: PUSH
52101: LD_VAR 0 2
52105: ARRAY
52106: PUSH
52107: LD_INT 1
52109: ARRAY
52110: PUSH
52111: LD_INT 3
52113: ARRAY
52114: PPUSH
52115: LD_EXP 19
52119: PUSH
52120: LD_VAR 0 2
52124: ARRAY
52125: PUSH
52126: LD_INT 1
52128: ARRAY
52129: PUSH
52130: LD_INT 4
52132: ARRAY
52133: PPUSH
52134: CALL 16147 0 5
52138: NOT
52139: IFFALSE 52189
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
52141: LD_ADDR_EXP 19
52145: PUSH
52146: LD_EXP 19
52150: PPUSH
52151: LD_VAR 0 2
52155: PPUSH
52156: LD_EXP 19
52160: PUSH
52161: LD_VAR 0 2
52165: ARRAY
52166: PPUSH
52167: LD_INT 1
52169: PPUSH
52170: LD_INT 1
52172: NEG
52173: PPUSH
52174: LD_INT 0
52176: PPUSH
52177: CALL 8814 0 4
52181: PPUSH
52182: CALL_OW 1
52186: ST_TO_ADDR
// continue ;
52187: GO 51065
// end ; end ; end ;
52189: GO 51065
52191: POP
52192: POP
// end ;
52193: LD_VAR 0 1
52197: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
52198: LD_INT 0
52200: PPUSH
52201: PPUSH
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
// if not mc_bases then
52206: LD_EXP 14
52210: NOT
52211: IFFALSE 52215
// exit ;
52213: GO 52642
// for i = 1 to mc_bases do
52215: LD_ADDR_VAR 0 2
52219: PUSH
52220: DOUBLE
52221: LD_INT 1
52223: DEC
52224: ST_TO_ADDR
52225: LD_EXP 14
52229: PUSH
52230: FOR_TO
52231: IFFALSE 52640
// begin tmp := mc_build_upgrade [ i ] ;
52233: LD_ADDR_VAR 0 4
52237: PUSH
52238: LD_EXP 46
52242: PUSH
52243: LD_VAR 0 2
52247: ARRAY
52248: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
52249: LD_ADDR_VAR 0 6
52253: PUSH
52254: LD_EXP 47
52258: PUSH
52259: LD_VAR 0 2
52263: ARRAY
52264: PPUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 30
52270: PUSH
52271: LD_INT 6
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 30
52280: PUSH
52281: LD_INT 7
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: PPUSH
52293: CALL_OW 72
52297: ST_TO_ADDR
// if not tmp and not lab then
52298: LD_VAR 0 4
52302: NOT
52303: PUSH
52304: LD_VAR 0 6
52308: NOT
52309: AND
52310: IFFALSE 52314
// continue ;
52312: GO 52230
// if tmp then
52314: LD_VAR 0 4
52318: IFFALSE 52438
// for j in tmp do
52320: LD_ADDR_VAR 0 3
52324: PUSH
52325: LD_VAR 0 4
52329: PUSH
52330: FOR_IN
52331: IFFALSE 52436
// begin if UpgradeCost ( j ) then
52333: LD_VAR 0 3
52337: PPUSH
52338: CALL 15807 0 1
52342: IFFALSE 52434
// begin ComUpgrade ( j ) ;
52344: LD_VAR 0 3
52348: PPUSH
52349: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
52353: LD_ADDR_EXP 46
52357: PUSH
52358: LD_EXP 46
52362: PPUSH
52363: LD_VAR 0 2
52367: PPUSH
52368: LD_EXP 46
52372: PUSH
52373: LD_VAR 0 2
52377: ARRAY
52378: PUSH
52379: LD_VAR 0 3
52383: DIFF
52384: PPUSH
52385: CALL_OW 1
52389: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
52390: LD_ADDR_EXP 21
52394: PUSH
52395: LD_EXP 21
52399: PPUSH
52400: LD_VAR 0 2
52404: PUSH
52405: LD_EXP 21
52409: PUSH
52410: LD_VAR 0 2
52414: ARRAY
52415: PUSH
52416: LD_INT 1
52418: PLUS
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PPUSH
52424: LD_VAR 0 3
52428: PPUSH
52429: CALL 9396 0 3
52433: ST_TO_ADDR
// end ; end ;
52434: GO 52330
52436: POP
52437: POP
// if not lab or not mc_lab_upgrade [ i ] then
52438: LD_VAR 0 6
52442: NOT
52443: PUSH
52444: LD_EXP 48
52448: PUSH
52449: LD_VAR 0 2
52453: ARRAY
52454: NOT
52455: OR
52456: IFFALSE 52460
// continue ;
52458: GO 52230
// for j in lab do
52460: LD_ADDR_VAR 0 3
52464: PUSH
52465: LD_VAR 0 6
52469: PUSH
52470: FOR_IN
52471: IFFALSE 52636
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
52473: LD_VAR 0 3
52477: PPUSH
52478: CALL_OW 266
52482: PUSH
52483: LD_INT 6
52485: PUSH
52486: LD_INT 7
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: IN
52493: PUSH
52494: LD_VAR 0 3
52498: PPUSH
52499: CALL_OW 461
52503: PUSH
52504: LD_INT 1
52506: NONEQUAL
52507: AND
52508: IFFALSE 52634
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
52510: LD_VAR 0 3
52514: PPUSH
52515: LD_EXP 48
52519: PUSH
52520: LD_VAR 0 2
52524: ARRAY
52525: PUSH
52526: LD_INT 1
52528: ARRAY
52529: PPUSH
52530: CALL 16012 0 2
52534: IFFALSE 52634
// begin ComCancel ( j ) ;
52536: LD_VAR 0 3
52540: PPUSH
52541: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
52545: LD_VAR 0 3
52549: PPUSH
52550: LD_EXP 48
52554: PUSH
52555: LD_VAR 0 2
52559: ARRAY
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: PPUSH
52565: CALL_OW 207
// if not j in mc_construct_list [ i ] then
52569: LD_VAR 0 3
52573: PUSH
52574: LD_EXP 21
52578: PUSH
52579: LD_VAR 0 2
52583: ARRAY
52584: IN
52585: NOT
52586: IFFALSE 52632
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
52588: LD_ADDR_EXP 21
52592: PUSH
52593: LD_EXP 21
52597: PPUSH
52598: LD_VAR 0 2
52602: PUSH
52603: LD_EXP 21
52607: PUSH
52608: LD_VAR 0 2
52612: ARRAY
52613: PUSH
52614: LD_INT 1
52616: PLUS
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PPUSH
52622: LD_VAR 0 3
52626: PPUSH
52627: CALL 9396 0 3
52631: ST_TO_ADDR
// break ;
52632: GO 52636
// end ; end ; end ;
52634: GO 52470
52636: POP
52637: POP
// end ;
52638: GO 52230
52640: POP
52641: POP
// end ;
52642: LD_VAR 0 1
52646: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
52647: LD_INT 0
52649: PPUSH
52650: PPUSH
52651: PPUSH
52652: PPUSH
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
52657: PPUSH
// if not mc_bases then
52658: LD_EXP 14
52662: NOT
52663: IFFALSE 52667
// exit ;
52665: GO 53072
// for i = 1 to mc_bases do
52667: LD_ADDR_VAR 0 2
52671: PUSH
52672: DOUBLE
52673: LD_INT 1
52675: DEC
52676: ST_TO_ADDR
52677: LD_EXP 14
52681: PUSH
52682: FOR_TO
52683: IFFALSE 53070
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
52685: LD_EXP 22
52689: PUSH
52690: LD_VAR 0 2
52694: ARRAY
52695: NOT
52696: PUSH
52697: LD_EXP 14
52701: PUSH
52702: LD_VAR 0 2
52706: ARRAY
52707: PPUSH
52708: LD_INT 30
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PPUSH
52718: CALL_OW 72
52722: NOT
52723: OR
52724: IFFALSE 52728
// continue ;
52726: GO 52682
// busy := false ;
52728: LD_ADDR_VAR 0 8
52732: PUSH
52733: LD_INT 0
52735: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52736: LD_ADDR_VAR 0 4
52740: PUSH
52741: LD_EXP 14
52745: PUSH
52746: LD_VAR 0 2
52750: ARRAY
52751: PPUSH
52752: LD_INT 30
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PPUSH
52762: CALL_OW 72
52766: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
52767: LD_ADDR_VAR 0 6
52771: PUSH
52772: LD_EXP 22
52776: PUSH
52777: LD_VAR 0 2
52781: ARRAY
52782: PPUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 30
52788: PUSH
52789: LD_INT 32
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 30
52798: PUSH
52799: LD_INT 33
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: PPUSH
52811: CALL_OW 72
52815: ST_TO_ADDR
// if not t then
52816: LD_VAR 0 6
52820: NOT
52821: IFFALSE 52825
// continue ;
52823: GO 52682
// for j in tmp do
52825: LD_ADDR_VAR 0 3
52829: PUSH
52830: LD_VAR 0 4
52834: PUSH
52835: FOR_IN
52836: IFFALSE 52866
// if not BuildingStatus ( j ) = bs_idle then
52838: LD_VAR 0 3
52842: PPUSH
52843: CALL_OW 461
52847: PUSH
52848: LD_INT 2
52850: EQUAL
52851: NOT
52852: IFFALSE 52864
// begin busy := true ;
52854: LD_ADDR_VAR 0 8
52858: PUSH
52859: LD_INT 1
52861: ST_TO_ADDR
// break ;
52862: GO 52866
// end ;
52864: GO 52835
52866: POP
52867: POP
// if busy then
52868: LD_VAR 0 8
52872: IFFALSE 52876
// continue ;
52874: GO 52682
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
52876: LD_ADDR_VAR 0 7
52880: PUSH
52881: LD_VAR 0 6
52885: PPUSH
52886: LD_INT 35
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PPUSH
52896: CALL_OW 72
52900: ST_TO_ADDR
// if tw then
52901: LD_VAR 0 7
52905: IFFALSE 52982
// begin tw := tw [ 1 ] ;
52907: LD_ADDR_VAR 0 7
52911: PUSH
52912: LD_VAR 0 7
52916: PUSH
52917: LD_INT 1
52919: ARRAY
52920: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
52921: LD_ADDR_VAR 0 9
52925: PUSH
52926: LD_VAR 0 7
52930: PPUSH
52931: LD_EXP 39
52935: PUSH
52936: LD_VAR 0 2
52940: ARRAY
52941: PPUSH
52942: CALL 14366 0 2
52946: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
52947: LD_EXP 53
52951: PUSH
52952: LD_VAR 0 2
52956: ARRAY
52957: IFFALSE 52980
// if not weapon in mc_allowed_tower_weapons [ i ] then
52959: LD_VAR 0 9
52963: PUSH
52964: LD_EXP 53
52968: PUSH
52969: LD_VAR 0 2
52973: ARRAY
52974: IN
52975: NOT
52976: IFFALSE 52980
// continue ;
52978: GO 52682
// end else
52980: GO 53045
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
52982: LD_ADDR_VAR 0 5
52986: PUSH
52987: LD_EXP 22
52991: PUSH
52992: LD_VAR 0 2
52996: ARRAY
52997: PPUSH
52998: LD_VAR 0 4
53002: PPUSH
53003: CALL 39868 0 2
53007: ST_TO_ADDR
// if not tmp2 then
53008: LD_VAR 0 5
53012: NOT
53013: IFFALSE 53017
// continue ;
53015: GO 52682
// tw := tmp2 [ 1 ] ;
53017: LD_ADDR_VAR 0 7
53021: PUSH
53022: LD_VAR 0 5
53026: PUSH
53027: LD_INT 1
53029: ARRAY
53030: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
53031: LD_ADDR_VAR 0 9
53035: PUSH
53036: LD_VAR 0 5
53040: PUSH
53041: LD_INT 2
53043: ARRAY
53044: ST_TO_ADDR
// end ; if not weapon then
53045: LD_VAR 0 9
53049: NOT
53050: IFFALSE 53054
// continue ;
53052: GO 52682
// ComPlaceWeapon ( tw , weapon ) ;
53054: LD_VAR 0 7
53058: PPUSH
53059: LD_VAR 0 9
53063: PPUSH
53064: CALL_OW 148
// end ;
53068: GO 52682
53070: POP
53071: POP
// end ;
53072: LD_VAR 0 1
53076: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
53077: LD_INT 0
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
// if not mc_bases then
53085: LD_EXP 14
53089: NOT
53090: IFFALSE 53094
// exit ;
53092: GO 53870
// for i = 1 to mc_bases do
53094: LD_ADDR_VAR 0 2
53098: PUSH
53099: DOUBLE
53100: LD_INT 1
53102: DEC
53103: ST_TO_ADDR
53104: LD_EXP 14
53108: PUSH
53109: FOR_TO
53110: IFFALSE 53868
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
53112: LD_EXP 27
53116: PUSH
53117: LD_VAR 0 2
53121: ARRAY
53122: NOT
53123: PUSH
53124: LD_EXP 27
53128: PUSH
53129: LD_VAR 0 2
53133: ARRAY
53134: PUSH
53135: LD_EXP 28
53139: PUSH
53140: LD_VAR 0 2
53144: ARRAY
53145: EQUAL
53146: OR
53147: PUSH
53148: LD_EXP 37
53152: PUSH
53153: LD_VAR 0 2
53157: ARRAY
53158: OR
53159: IFFALSE 53163
// continue ;
53161: GO 53109
// if mc_miners [ i ] then
53163: LD_EXP 28
53167: PUSH
53168: LD_VAR 0 2
53172: ARRAY
53173: IFFALSE 53555
// begin for j = mc_miners [ i ] downto 1 do
53175: LD_ADDR_VAR 0 3
53179: PUSH
53180: DOUBLE
53181: LD_EXP 28
53185: PUSH
53186: LD_VAR 0 2
53190: ARRAY
53191: INC
53192: ST_TO_ADDR
53193: LD_INT 1
53195: PUSH
53196: FOR_DOWNTO
53197: IFFALSE 53553
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
53199: LD_EXP 28
53203: PUSH
53204: LD_VAR 0 2
53208: ARRAY
53209: PUSH
53210: LD_VAR 0 3
53214: ARRAY
53215: PPUSH
53216: CALL_OW 301
53220: PUSH
53221: LD_EXP 28
53225: PUSH
53226: LD_VAR 0 2
53230: ARRAY
53231: PUSH
53232: LD_VAR 0 3
53236: ARRAY
53237: PPUSH
53238: CALL_OW 257
53242: PUSH
53243: LD_INT 1
53245: NONEQUAL
53246: OR
53247: IFFALSE 53310
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
53249: LD_ADDR_VAR 0 5
53253: PUSH
53254: LD_EXP 28
53258: PUSH
53259: LD_VAR 0 2
53263: ARRAY
53264: PUSH
53265: LD_EXP 28
53269: PUSH
53270: LD_VAR 0 2
53274: ARRAY
53275: PUSH
53276: LD_VAR 0 3
53280: ARRAY
53281: DIFF
53282: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
53283: LD_ADDR_EXP 28
53287: PUSH
53288: LD_EXP 28
53292: PPUSH
53293: LD_VAR 0 2
53297: PPUSH
53298: LD_VAR 0 5
53302: PPUSH
53303: CALL_OW 1
53307: ST_TO_ADDR
// continue ;
53308: GO 53196
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
53310: LD_EXP 28
53314: PUSH
53315: LD_VAR 0 2
53319: ARRAY
53320: PUSH
53321: LD_VAR 0 3
53325: ARRAY
53326: PPUSH
53327: CALL_OW 257
53331: PUSH
53332: LD_INT 1
53334: EQUAL
53335: PUSH
53336: LD_EXP 28
53340: PUSH
53341: LD_VAR 0 2
53345: ARRAY
53346: PUSH
53347: LD_VAR 0 3
53351: ARRAY
53352: PPUSH
53353: CALL_OW 459
53357: NOT
53358: AND
53359: PUSH
53360: LD_EXP 28
53364: PUSH
53365: LD_VAR 0 2
53369: ARRAY
53370: PUSH
53371: LD_VAR 0 3
53375: ARRAY
53376: PPUSH
53377: CALL_OW 314
53381: NOT
53382: AND
53383: IFFALSE 53551
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
53385: LD_EXP 28
53389: PUSH
53390: LD_VAR 0 2
53394: ARRAY
53395: PUSH
53396: LD_VAR 0 3
53400: ARRAY
53401: PPUSH
53402: CALL_OW 310
53406: IFFALSE 53429
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
53408: LD_EXP 28
53412: PUSH
53413: LD_VAR 0 2
53417: ARRAY
53418: PUSH
53419: LD_VAR 0 3
53423: ARRAY
53424: PPUSH
53425: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
53429: LD_EXP 28
53433: PUSH
53434: LD_VAR 0 2
53438: ARRAY
53439: PUSH
53440: LD_VAR 0 3
53444: ARRAY
53445: PPUSH
53446: CALL_OW 314
53450: NOT
53451: IFFALSE 53551
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
53453: LD_EXP 28
53457: PUSH
53458: LD_VAR 0 2
53462: ARRAY
53463: PUSH
53464: LD_VAR 0 3
53468: ARRAY
53469: PPUSH
53470: LD_EXP 27
53474: PUSH
53475: LD_VAR 0 2
53479: ARRAY
53480: PUSH
53481: LD_VAR 0 3
53485: PUSH
53486: LD_EXP 27
53490: PUSH
53491: LD_VAR 0 2
53495: ARRAY
53496: MOD
53497: PUSH
53498: LD_INT 1
53500: PLUS
53501: ARRAY
53502: PUSH
53503: LD_INT 1
53505: ARRAY
53506: PPUSH
53507: LD_EXP 27
53511: PUSH
53512: LD_VAR 0 2
53516: ARRAY
53517: PUSH
53518: LD_VAR 0 3
53522: PUSH
53523: LD_EXP 27
53527: PUSH
53528: LD_VAR 0 2
53532: ARRAY
53533: MOD
53534: PUSH
53535: LD_INT 1
53537: PLUS
53538: ARRAY
53539: PUSH
53540: LD_INT 2
53542: ARRAY
53543: PPUSH
53544: LD_INT 0
53546: PPUSH
53547: CALL_OW 193
// end ; end ;
53551: GO 53196
53553: POP
53554: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
53555: LD_ADDR_VAR 0 5
53559: PUSH
53560: LD_EXP 14
53564: PUSH
53565: LD_VAR 0 2
53569: ARRAY
53570: PPUSH
53571: LD_INT 2
53573: PUSH
53574: LD_INT 30
53576: PUSH
53577: LD_INT 4
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 30
53586: PUSH
53587: LD_INT 5
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 30
53596: PUSH
53597: LD_INT 32
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: PPUSH
53610: CALL_OW 72
53614: ST_TO_ADDR
// if not tmp then
53615: LD_VAR 0 5
53619: NOT
53620: IFFALSE 53624
// continue ;
53622: GO 53109
// list := [ ] ;
53624: LD_ADDR_VAR 0 6
53628: PUSH
53629: EMPTY
53630: ST_TO_ADDR
// for j in tmp do
53631: LD_ADDR_VAR 0 3
53635: PUSH
53636: LD_VAR 0 5
53640: PUSH
53641: FOR_IN
53642: IFFALSE 53711
// begin for k in UnitsInside ( j ) do
53644: LD_ADDR_VAR 0 4
53648: PUSH
53649: LD_VAR 0 3
53653: PPUSH
53654: CALL_OW 313
53658: PUSH
53659: FOR_IN
53660: IFFALSE 53707
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
53662: LD_VAR 0 4
53666: PPUSH
53667: CALL_OW 257
53671: PUSH
53672: LD_INT 1
53674: EQUAL
53675: PUSH
53676: LD_VAR 0 4
53680: PPUSH
53681: CALL_OW 459
53685: NOT
53686: AND
53687: IFFALSE 53705
// list := list ^ k ;
53689: LD_ADDR_VAR 0 6
53693: PUSH
53694: LD_VAR 0 6
53698: PUSH
53699: LD_VAR 0 4
53703: ADD
53704: ST_TO_ADDR
53705: GO 53659
53707: POP
53708: POP
// end ;
53709: GO 53641
53711: POP
53712: POP
// list := list diff mc_miners [ i ] ;
53713: LD_ADDR_VAR 0 6
53717: PUSH
53718: LD_VAR 0 6
53722: PUSH
53723: LD_EXP 28
53727: PUSH
53728: LD_VAR 0 2
53732: ARRAY
53733: DIFF
53734: ST_TO_ADDR
// if not list then
53735: LD_VAR 0 6
53739: NOT
53740: IFFALSE 53744
// continue ;
53742: GO 53109
// k := mc_mines [ i ] - mc_miners [ i ] ;
53744: LD_ADDR_VAR 0 4
53748: PUSH
53749: LD_EXP 27
53753: PUSH
53754: LD_VAR 0 2
53758: ARRAY
53759: PUSH
53760: LD_EXP 28
53764: PUSH
53765: LD_VAR 0 2
53769: ARRAY
53770: MINUS
53771: ST_TO_ADDR
// if k > list then
53772: LD_VAR 0 4
53776: PUSH
53777: LD_VAR 0 6
53781: GREATER
53782: IFFALSE 53794
// k := list ;
53784: LD_ADDR_VAR 0 4
53788: PUSH
53789: LD_VAR 0 6
53793: ST_TO_ADDR
// for j = 1 to k do
53794: LD_ADDR_VAR 0 3
53798: PUSH
53799: DOUBLE
53800: LD_INT 1
53802: DEC
53803: ST_TO_ADDR
53804: LD_VAR 0 4
53808: PUSH
53809: FOR_TO
53810: IFFALSE 53864
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
53812: LD_ADDR_EXP 28
53816: PUSH
53817: LD_EXP 28
53821: PPUSH
53822: LD_VAR 0 2
53826: PUSH
53827: LD_EXP 28
53831: PUSH
53832: LD_VAR 0 2
53836: ARRAY
53837: PUSH
53838: LD_INT 1
53840: PLUS
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PPUSH
53846: LD_VAR 0 6
53850: PUSH
53851: LD_VAR 0 3
53855: ARRAY
53856: PPUSH
53857: CALL 9396 0 3
53861: ST_TO_ADDR
53862: GO 53809
53864: POP
53865: POP
// end ;
53866: GO 53109
53868: POP
53869: POP
// end ;
53870: LD_VAR 0 1
53874: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
53875: LD_INT 0
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
// if not mc_bases then
53887: LD_EXP 14
53891: NOT
53892: IFFALSE 53896
// exit ;
53894: GO 55646
// for i = 1 to mc_bases do
53896: LD_ADDR_VAR 0 2
53900: PUSH
53901: DOUBLE
53902: LD_INT 1
53904: DEC
53905: ST_TO_ADDR
53906: LD_EXP 14
53910: PUSH
53911: FOR_TO
53912: IFFALSE 55644
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
53914: LD_EXP 14
53918: PUSH
53919: LD_VAR 0 2
53923: ARRAY
53924: NOT
53925: PUSH
53926: LD_EXP 21
53930: PUSH
53931: LD_VAR 0 2
53935: ARRAY
53936: OR
53937: IFFALSE 53941
// continue ;
53939: GO 53911
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
53941: LD_EXP 30
53945: PUSH
53946: LD_VAR 0 2
53950: ARRAY
53951: NOT
53952: PUSH
53953: LD_EXP 31
53957: PUSH
53958: LD_VAR 0 2
53962: ARRAY
53963: AND
53964: IFFALSE 54002
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53966: LD_ADDR_EXP 31
53970: PUSH
53971: LD_EXP 31
53975: PPUSH
53976: LD_VAR 0 2
53980: PPUSH
53981: EMPTY
53982: PPUSH
53983: CALL_OW 1
53987: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
53988: LD_VAR 0 2
53992: PPUSH
53993: LD_INT 107
53995: PPUSH
53996: CALL 44876 0 2
// continue ;
54000: GO 53911
// end ; target := [ ] ;
54002: LD_ADDR_VAR 0 6
54006: PUSH
54007: EMPTY
54008: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
54009: LD_ADDR_VAR 0 3
54013: PUSH
54014: DOUBLE
54015: LD_EXP 30
54019: PUSH
54020: LD_VAR 0 2
54024: ARRAY
54025: INC
54026: ST_TO_ADDR
54027: LD_INT 1
54029: PUSH
54030: FOR_DOWNTO
54031: IFFALSE 54291
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
54033: LD_EXP 30
54037: PUSH
54038: LD_VAR 0 2
54042: ARRAY
54043: PUSH
54044: LD_VAR 0 3
54048: ARRAY
54049: PUSH
54050: LD_INT 2
54052: ARRAY
54053: PPUSH
54054: LD_EXP 30
54058: PUSH
54059: LD_VAR 0 2
54063: ARRAY
54064: PUSH
54065: LD_VAR 0 3
54069: ARRAY
54070: PUSH
54071: LD_INT 3
54073: ARRAY
54074: PPUSH
54075: CALL_OW 488
54079: PUSH
54080: LD_EXP 30
54084: PUSH
54085: LD_VAR 0 2
54089: ARRAY
54090: PUSH
54091: LD_VAR 0 3
54095: ARRAY
54096: PUSH
54097: LD_INT 2
54099: ARRAY
54100: PPUSH
54101: LD_EXP 30
54105: PUSH
54106: LD_VAR 0 2
54110: ARRAY
54111: PUSH
54112: LD_VAR 0 3
54116: ARRAY
54117: PUSH
54118: LD_INT 3
54120: ARRAY
54121: PPUSH
54122: CALL_OW 284
54126: PUSH
54127: LD_INT 0
54129: EQUAL
54130: AND
54131: IFFALSE 54186
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
54133: LD_ADDR_VAR 0 5
54137: PUSH
54138: LD_EXP 30
54142: PUSH
54143: LD_VAR 0 2
54147: ARRAY
54148: PPUSH
54149: LD_VAR 0 3
54153: PPUSH
54154: CALL_OW 3
54158: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
54159: LD_ADDR_EXP 30
54163: PUSH
54164: LD_EXP 30
54168: PPUSH
54169: LD_VAR 0 2
54173: PPUSH
54174: LD_VAR 0 5
54178: PPUSH
54179: CALL_OW 1
54183: ST_TO_ADDR
// continue ;
54184: GO 54030
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
54186: LD_EXP 14
54190: PUSH
54191: LD_VAR 0 2
54195: ARRAY
54196: PUSH
54197: LD_INT 1
54199: ARRAY
54200: PPUSH
54201: CALL_OW 255
54205: PPUSH
54206: LD_EXP 30
54210: PUSH
54211: LD_VAR 0 2
54215: ARRAY
54216: PUSH
54217: LD_VAR 0 3
54221: ARRAY
54222: PUSH
54223: LD_INT 2
54225: ARRAY
54226: PPUSH
54227: LD_EXP 30
54231: PUSH
54232: LD_VAR 0 2
54236: ARRAY
54237: PUSH
54238: LD_VAR 0 3
54242: ARRAY
54243: PUSH
54244: LD_INT 3
54246: ARRAY
54247: PPUSH
54248: LD_INT 30
54250: PPUSH
54251: CALL 10292 0 4
54255: PUSH
54256: LD_INT 4
54258: ARRAY
54259: PUSH
54260: LD_INT 0
54262: EQUAL
54263: IFFALSE 54289
// begin target := mc_crates [ i ] [ j ] ;
54265: LD_ADDR_VAR 0 6
54269: PUSH
54270: LD_EXP 30
54274: PUSH
54275: LD_VAR 0 2
54279: ARRAY
54280: PUSH
54281: LD_VAR 0 3
54285: ARRAY
54286: ST_TO_ADDR
// break ;
54287: GO 54291
// end ; end ;
54289: GO 54030
54291: POP
54292: POP
// if not target then
54293: LD_VAR 0 6
54297: NOT
54298: IFFALSE 54302
// continue ;
54300: GO 53911
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
54302: LD_ADDR_VAR 0 7
54306: PUSH
54307: LD_EXP 33
54311: PUSH
54312: LD_VAR 0 2
54316: ARRAY
54317: PPUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 58
54326: PUSH
54327: EMPTY
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 61
54336: PUSH
54337: EMPTY
54338: LIST
54339: PUSH
54340: LD_INT 33
54342: PUSH
54343: LD_INT 5
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 33
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 34
54372: PUSH
54373: LD_INT 32
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 34
54382: PUSH
54383: LD_INT 51
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 34
54392: PUSH
54393: LD_INT 12
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PPUSH
54410: CALL_OW 72
54414: ST_TO_ADDR
// if not cargo then
54415: LD_VAR 0 7
54419: NOT
54420: IFFALSE 55063
// begin if mc_crates_collector [ i ] < 5 then
54422: LD_EXP 31
54426: PUSH
54427: LD_VAR 0 2
54431: ARRAY
54432: PUSH
54433: LD_INT 5
54435: LESS
54436: IFFALSE 54802
// begin if mc_ape [ i ] then
54438: LD_EXP 43
54442: PUSH
54443: LD_VAR 0 2
54447: ARRAY
54448: IFFALSE 54495
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
54450: LD_ADDR_VAR 0 5
54454: PUSH
54455: LD_EXP 43
54459: PUSH
54460: LD_VAR 0 2
54464: ARRAY
54465: PPUSH
54466: LD_INT 25
54468: PUSH
54469: LD_INT 16
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 24
54478: PUSH
54479: LD_INT 750
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PPUSH
54490: CALL_OW 72
54494: ST_TO_ADDR
// if not tmp then
54495: LD_VAR 0 5
54499: NOT
54500: IFFALSE 54547
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
54502: LD_ADDR_VAR 0 5
54506: PUSH
54507: LD_EXP 14
54511: PUSH
54512: LD_VAR 0 2
54516: ARRAY
54517: PPUSH
54518: LD_INT 25
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 24
54530: PUSH
54531: LD_INT 750
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PPUSH
54542: CALL_OW 72
54546: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
54547: LD_EXP 43
54551: PUSH
54552: LD_VAR 0 2
54556: ARRAY
54557: PUSH
54558: LD_EXP 14
54562: PUSH
54563: LD_VAR 0 2
54567: ARRAY
54568: PPUSH
54569: LD_INT 25
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 24
54581: PUSH
54582: LD_INT 750
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PPUSH
54593: CALL_OW 72
54597: AND
54598: PUSH
54599: LD_VAR 0 5
54603: PUSH
54604: LD_INT 5
54606: LESS
54607: AND
54608: IFFALSE 54690
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
54610: LD_ADDR_VAR 0 3
54614: PUSH
54615: LD_EXP 14
54619: PUSH
54620: LD_VAR 0 2
54624: ARRAY
54625: PPUSH
54626: LD_INT 25
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 24
54638: PUSH
54639: LD_INT 750
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PPUSH
54650: CALL_OW 72
54654: PUSH
54655: FOR_IN
54656: IFFALSE 54688
// begin tmp := tmp union j ;
54658: LD_ADDR_VAR 0 5
54662: PUSH
54663: LD_VAR 0 5
54667: PUSH
54668: LD_VAR 0 3
54672: UNION
54673: ST_TO_ADDR
// if tmp >= 5 then
54674: LD_VAR 0 5
54678: PUSH
54679: LD_INT 5
54681: GREATEREQUAL
54682: IFFALSE 54686
// break ;
54684: GO 54688
// end ;
54686: GO 54655
54688: POP
54689: POP
// end ; if not tmp then
54690: LD_VAR 0 5
54694: NOT
54695: IFFALSE 54699
// continue ;
54697: GO 53911
// for j in tmp do
54699: LD_ADDR_VAR 0 3
54703: PUSH
54704: LD_VAR 0 5
54708: PUSH
54709: FOR_IN
54710: IFFALSE 54800
// if not GetTag ( j ) then
54712: LD_VAR 0 3
54716: PPUSH
54717: CALL_OW 110
54721: NOT
54722: IFFALSE 54798
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
54724: LD_ADDR_EXP 31
54728: PUSH
54729: LD_EXP 31
54733: PPUSH
54734: LD_VAR 0 2
54738: PUSH
54739: LD_EXP 31
54743: PUSH
54744: LD_VAR 0 2
54748: ARRAY
54749: PUSH
54750: LD_INT 1
54752: PLUS
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PPUSH
54758: LD_VAR 0 3
54762: PPUSH
54763: CALL 9396 0 3
54767: ST_TO_ADDR
// SetTag ( j , 107 ) ;
54768: LD_VAR 0 3
54772: PPUSH
54773: LD_INT 107
54775: PPUSH
54776: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
54780: LD_EXP 31
54784: PUSH
54785: LD_VAR 0 2
54789: ARRAY
54790: PUSH
54791: LD_INT 5
54793: GREATEREQUAL
54794: IFFALSE 54798
// break ;
54796: GO 54800
// end ;
54798: GO 54709
54800: POP
54801: POP
// end ; if mc_crates_collector [ i ] and target then
54802: LD_EXP 31
54806: PUSH
54807: LD_VAR 0 2
54811: ARRAY
54812: PUSH
54813: LD_VAR 0 6
54817: AND
54818: IFFALSE 55061
// begin if mc_crates_collector [ i ] < target [ 1 ] then
54820: LD_EXP 31
54824: PUSH
54825: LD_VAR 0 2
54829: ARRAY
54830: PUSH
54831: LD_VAR 0 6
54835: PUSH
54836: LD_INT 1
54838: ARRAY
54839: LESS
54840: IFFALSE 54860
// tmp := mc_crates_collector [ i ] else
54842: LD_ADDR_VAR 0 5
54846: PUSH
54847: LD_EXP 31
54851: PUSH
54852: LD_VAR 0 2
54856: ARRAY
54857: ST_TO_ADDR
54858: GO 54874
// tmp := target [ 1 ] ;
54860: LD_ADDR_VAR 0 5
54864: PUSH
54865: LD_VAR 0 6
54869: PUSH
54870: LD_INT 1
54872: ARRAY
54873: ST_TO_ADDR
// k := 0 ;
54874: LD_ADDR_VAR 0 4
54878: PUSH
54879: LD_INT 0
54881: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
54882: LD_ADDR_VAR 0 3
54886: PUSH
54887: LD_EXP 31
54891: PUSH
54892: LD_VAR 0 2
54896: ARRAY
54897: PUSH
54898: FOR_IN
54899: IFFALSE 55059
// begin k := k + 1 ;
54901: LD_ADDR_VAR 0 4
54905: PUSH
54906: LD_VAR 0 4
54910: PUSH
54911: LD_INT 1
54913: PLUS
54914: ST_TO_ADDR
// if k > tmp then
54915: LD_VAR 0 4
54919: PUSH
54920: LD_VAR 0 5
54924: GREATER
54925: IFFALSE 54929
// break ;
54927: GO 55059
// if not GetClass ( j ) in [ 2 , 16 ] then
54929: LD_VAR 0 3
54933: PPUSH
54934: CALL_OW 257
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 16
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: IN
54949: NOT
54950: IFFALSE 55003
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
54952: LD_ADDR_EXP 31
54956: PUSH
54957: LD_EXP 31
54961: PPUSH
54962: LD_VAR 0 2
54966: PPUSH
54967: LD_EXP 31
54971: PUSH
54972: LD_VAR 0 2
54976: ARRAY
54977: PUSH
54978: LD_VAR 0 3
54982: DIFF
54983: PPUSH
54984: CALL_OW 1
54988: ST_TO_ADDR
// SetTag ( j , 0 ) ;
54989: LD_VAR 0 3
54993: PPUSH
54994: LD_INT 0
54996: PPUSH
54997: CALL_OW 109
// continue ;
55001: GO 54898
// end ; if IsInUnit ( j ) then
55003: LD_VAR 0 3
55007: PPUSH
55008: CALL_OW 310
55012: IFFALSE 55023
// ComExitBuilding ( j ) ;
55014: LD_VAR 0 3
55018: PPUSH
55019: CALL_OW 122
// wait ( 3 ) ;
55023: LD_INT 3
55025: PPUSH
55026: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
55030: LD_VAR 0 3
55034: PPUSH
55035: LD_VAR 0 6
55039: PUSH
55040: LD_INT 2
55042: ARRAY
55043: PPUSH
55044: LD_VAR 0 6
55048: PUSH
55049: LD_INT 3
55051: ARRAY
55052: PPUSH
55053: CALL_OW 117
// end ;
55057: GO 54898
55059: POP
55060: POP
// end ; end else
55061: GO 55642
// begin for j in cargo do
55063: LD_ADDR_VAR 0 3
55067: PUSH
55068: LD_VAR 0 7
55072: PUSH
55073: FOR_IN
55074: IFFALSE 55640
// begin if GetTag ( j ) <> 0 then
55076: LD_VAR 0 3
55080: PPUSH
55081: CALL_OW 110
55085: PUSH
55086: LD_INT 0
55088: NONEQUAL
55089: IFFALSE 55093
// continue ;
55091: GO 55073
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
55093: LD_VAR 0 3
55097: PPUSH
55098: CALL_OW 256
55102: PUSH
55103: LD_INT 1000
55105: LESS
55106: PUSH
55107: LD_VAR 0 3
55111: PPUSH
55112: LD_EXP 38
55116: PUSH
55117: LD_VAR 0 2
55121: ARRAY
55122: PPUSH
55123: CALL_OW 308
55127: NOT
55128: AND
55129: IFFALSE 55151
// ComMoveToArea ( j , mc_parking [ i ] ) ;
55131: LD_VAR 0 3
55135: PPUSH
55136: LD_EXP 38
55140: PUSH
55141: LD_VAR 0 2
55145: ARRAY
55146: PPUSH
55147: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
55151: LD_VAR 0 3
55155: PPUSH
55156: CALL_OW 256
55160: PUSH
55161: LD_INT 1000
55163: LESS
55164: PUSH
55165: LD_VAR 0 3
55169: PPUSH
55170: LD_EXP 38
55174: PUSH
55175: LD_VAR 0 2
55179: ARRAY
55180: PPUSH
55181: CALL_OW 308
55185: AND
55186: IFFALSE 55190
// continue ;
55188: GO 55073
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
55190: LD_VAR 0 3
55194: PPUSH
55195: CALL_OW 262
55199: PUSH
55200: LD_INT 2
55202: EQUAL
55203: PUSH
55204: LD_VAR 0 3
55208: PPUSH
55209: CALL_OW 261
55213: PUSH
55214: LD_INT 15
55216: LESS
55217: AND
55218: IFFALSE 55222
// continue ;
55220: GO 55073
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
55222: LD_VAR 0 3
55226: PPUSH
55227: CALL_OW 262
55231: PUSH
55232: LD_INT 1
55234: EQUAL
55235: PUSH
55236: LD_VAR 0 3
55240: PPUSH
55241: CALL_OW 261
55245: PUSH
55246: LD_INT 10
55248: LESS
55249: AND
55250: IFFALSE 55579
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55252: LD_ADDR_VAR 0 8
55256: PUSH
55257: LD_EXP 14
55261: PUSH
55262: LD_VAR 0 2
55266: ARRAY
55267: PPUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 30
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 30
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: PPUSH
55296: CALL_OW 72
55300: ST_TO_ADDR
// if not depot then
55301: LD_VAR 0 8
55305: NOT
55306: IFFALSE 55310
// continue ;
55308: GO 55073
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
55310: LD_VAR 0 3
55314: PPUSH
55315: LD_VAR 0 8
55319: PPUSH
55320: LD_VAR 0 3
55324: PPUSH
55325: CALL_OW 74
55329: PPUSH
55330: CALL_OW 296
55334: PUSH
55335: LD_INT 6
55337: LESS
55338: IFFALSE 55354
// SetFuel ( j , 100 ) else
55340: LD_VAR 0 3
55344: PPUSH
55345: LD_INT 100
55347: PPUSH
55348: CALL_OW 240
55352: GO 55579
// if GetFuel ( j ) = 0 then
55354: LD_VAR 0 3
55358: PPUSH
55359: CALL_OW 261
55363: PUSH
55364: LD_INT 0
55366: EQUAL
55367: IFFALSE 55579
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
55369: LD_ADDR_EXP 33
55373: PUSH
55374: LD_EXP 33
55378: PPUSH
55379: LD_VAR 0 2
55383: PPUSH
55384: LD_EXP 33
55388: PUSH
55389: LD_VAR 0 2
55393: ARRAY
55394: PUSH
55395: LD_VAR 0 3
55399: DIFF
55400: PPUSH
55401: CALL_OW 1
55405: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
55406: LD_VAR 0 3
55410: PPUSH
55411: CALL_OW 263
55415: PUSH
55416: LD_INT 1
55418: EQUAL
55419: IFFALSE 55435
// ComExitVehicle ( IsInUnit ( j ) ) ;
55421: LD_VAR 0 3
55425: PPUSH
55426: CALL_OW 310
55430: PPUSH
55431: CALL_OW 121
// if GetControl ( j ) = control_remote then
55435: LD_VAR 0 3
55439: PPUSH
55440: CALL_OW 263
55444: PUSH
55445: LD_INT 2
55447: EQUAL
55448: IFFALSE 55459
// ComUnlink ( j ) ;
55450: LD_VAR 0 3
55454: PPUSH
55455: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
55459: LD_ADDR_VAR 0 9
55463: PUSH
55464: LD_VAR 0 2
55468: PPUSH
55469: LD_INT 3
55471: PPUSH
55472: CALL 64932 0 2
55476: ST_TO_ADDR
// if fac then
55477: LD_VAR 0 9
55481: IFFALSE 55577
// begin for k in fac do
55483: LD_ADDR_VAR 0 4
55487: PUSH
55488: LD_VAR 0 9
55492: PUSH
55493: FOR_IN
55494: IFFALSE 55575
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
55496: LD_ADDR_VAR 0 10
55500: PUSH
55501: LD_VAR 0 9
55505: PPUSH
55506: LD_VAR 0 3
55510: PPUSH
55511: CALL_OW 265
55515: PPUSH
55516: LD_VAR 0 3
55520: PPUSH
55521: CALL_OW 262
55525: PPUSH
55526: LD_VAR 0 3
55530: PPUSH
55531: CALL_OW 263
55535: PPUSH
55536: LD_VAR 0 3
55540: PPUSH
55541: CALL_OW 264
55545: PPUSH
55546: CALL 6928 0 5
55550: ST_TO_ADDR
// if components then
55551: LD_VAR 0 10
55555: IFFALSE 55573
// begin MC_InsertProduceList ( i , components ) ;
55557: LD_VAR 0 2
55561: PPUSH
55562: LD_VAR 0 10
55566: PPUSH
55567: CALL 64477 0 2
// break ;
55571: GO 55575
// end ; end ;
55573: GO 55493
55575: POP
55576: POP
// end ; continue ;
55577: GO 55073
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
55579: LD_VAR 0 3
55583: PPUSH
55584: LD_INT 1
55586: PPUSH
55587: CALL_OW 289
55591: PUSH
55592: LD_INT 100
55594: LESS
55595: PUSH
55596: LD_VAR 0 3
55600: PPUSH
55601: CALL_OW 314
55605: NOT
55606: AND
55607: IFFALSE 55636
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
55609: LD_VAR 0 3
55613: PPUSH
55614: LD_VAR 0 6
55618: PUSH
55619: LD_INT 2
55621: ARRAY
55622: PPUSH
55623: LD_VAR 0 6
55627: PUSH
55628: LD_INT 3
55630: ARRAY
55631: PPUSH
55632: CALL_OW 117
// break ;
55636: GO 55640
// end ;
55638: GO 55073
55640: POP
55641: POP
// end ; end ;
55642: GO 53911
55644: POP
55645: POP
// end ;
55646: LD_VAR 0 1
55650: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
55651: LD_INT 0
55653: PPUSH
55654: PPUSH
55655: PPUSH
55656: PPUSH
// if not mc_bases then
55657: LD_EXP 14
55661: NOT
55662: IFFALSE 55666
// exit ;
55664: GO 55827
// for i = 1 to mc_bases do
55666: LD_ADDR_VAR 0 2
55670: PUSH
55671: DOUBLE
55672: LD_INT 1
55674: DEC
55675: ST_TO_ADDR
55676: LD_EXP 14
55680: PUSH
55681: FOR_TO
55682: IFFALSE 55825
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
55684: LD_ADDR_VAR 0 4
55688: PUSH
55689: LD_EXP 33
55693: PUSH
55694: LD_VAR 0 2
55698: ARRAY
55699: PUSH
55700: LD_EXP 36
55704: PUSH
55705: LD_VAR 0 2
55709: ARRAY
55710: UNION
55711: PPUSH
55712: LD_INT 33
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PPUSH
55722: CALL_OW 72
55726: ST_TO_ADDR
// if tmp then
55727: LD_VAR 0 4
55731: IFFALSE 55823
// for j in tmp do
55733: LD_ADDR_VAR 0 3
55737: PUSH
55738: LD_VAR 0 4
55742: PUSH
55743: FOR_IN
55744: IFFALSE 55821
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
55746: LD_VAR 0 3
55750: PPUSH
55751: CALL_OW 312
55755: NOT
55756: PUSH
55757: LD_VAR 0 3
55761: PPUSH
55762: CALL_OW 256
55766: PUSH
55767: LD_INT 250
55769: GREATEREQUAL
55770: AND
55771: IFFALSE 55784
// Connect ( j ) else
55773: LD_VAR 0 3
55777: PPUSH
55778: CALL 12329 0 1
55782: GO 55819
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
55784: LD_VAR 0 3
55788: PPUSH
55789: CALL_OW 256
55793: PUSH
55794: LD_INT 250
55796: LESS
55797: PUSH
55798: LD_VAR 0 3
55802: PPUSH
55803: CALL_OW 312
55807: AND
55808: IFFALSE 55819
// ComUnlink ( j ) ;
55810: LD_VAR 0 3
55814: PPUSH
55815: CALL_OW 136
55819: GO 55743
55821: POP
55822: POP
// end ;
55823: GO 55681
55825: POP
55826: POP
// end ;
55827: LD_VAR 0 1
55831: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
55832: LD_INT 0
55834: PPUSH
55835: PPUSH
55836: PPUSH
55837: PPUSH
55838: PPUSH
// if not mc_bases then
55839: LD_EXP 14
55843: NOT
55844: IFFALSE 55848
// exit ;
55846: GO 56293
// for i = 1 to mc_bases do
55848: LD_ADDR_VAR 0 2
55852: PUSH
55853: DOUBLE
55854: LD_INT 1
55856: DEC
55857: ST_TO_ADDR
55858: LD_EXP 14
55862: PUSH
55863: FOR_TO
55864: IFFALSE 56291
// begin if not mc_produce [ i ] then
55866: LD_EXP 35
55870: PUSH
55871: LD_VAR 0 2
55875: ARRAY
55876: NOT
55877: IFFALSE 55881
// continue ;
55879: GO 55863
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
55881: LD_ADDR_VAR 0 5
55885: PUSH
55886: LD_EXP 14
55890: PUSH
55891: LD_VAR 0 2
55895: ARRAY
55896: PPUSH
55897: LD_INT 30
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PPUSH
55907: CALL_OW 72
55911: ST_TO_ADDR
// if not fac then
55912: LD_VAR 0 5
55916: NOT
55917: IFFALSE 55921
// continue ;
55919: GO 55863
// for j in fac do
55921: LD_ADDR_VAR 0 3
55925: PUSH
55926: LD_VAR 0 5
55930: PUSH
55931: FOR_IN
55932: IFFALSE 56287
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
55934: LD_VAR 0 3
55938: PPUSH
55939: CALL_OW 461
55943: PUSH
55944: LD_INT 2
55946: NONEQUAL
55947: PUSH
55948: LD_VAR 0 3
55952: PPUSH
55953: LD_INT 15
55955: PPUSH
55956: CALL 11989 0 2
55960: PUSH
55961: LD_INT 4
55963: ARRAY
55964: OR
55965: IFFALSE 55969
// continue ;
55967: GO 55931
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
55969: LD_VAR 0 3
55973: PPUSH
55974: LD_EXP 35
55978: PUSH
55979: LD_VAR 0 2
55983: ARRAY
55984: PUSH
55985: LD_INT 1
55987: ARRAY
55988: PUSH
55989: LD_INT 1
55991: ARRAY
55992: PPUSH
55993: LD_EXP 35
55997: PUSH
55998: LD_VAR 0 2
56002: ARRAY
56003: PUSH
56004: LD_INT 1
56006: ARRAY
56007: PUSH
56008: LD_INT 2
56010: ARRAY
56011: PPUSH
56012: LD_EXP 35
56016: PUSH
56017: LD_VAR 0 2
56021: ARRAY
56022: PUSH
56023: LD_INT 1
56025: ARRAY
56026: PUSH
56027: LD_INT 3
56029: ARRAY
56030: PPUSH
56031: LD_EXP 35
56035: PUSH
56036: LD_VAR 0 2
56040: ARRAY
56041: PUSH
56042: LD_INT 1
56044: ARRAY
56045: PUSH
56046: LD_INT 4
56048: ARRAY
56049: PPUSH
56050: CALL_OW 448
56054: PUSH
56055: LD_VAR 0 3
56059: PPUSH
56060: LD_EXP 35
56064: PUSH
56065: LD_VAR 0 2
56069: ARRAY
56070: PUSH
56071: LD_INT 1
56073: ARRAY
56074: PUSH
56075: LD_INT 1
56077: ARRAY
56078: PUSH
56079: LD_EXP 35
56083: PUSH
56084: LD_VAR 0 2
56088: ARRAY
56089: PUSH
56090: LD_INT 1
56092: ARRAY
56093: PUSH
56094: LD_INT 2
56096: ARRAY
56097: PUSH
56098: LD_EXP 35
56102: PUSH
56103: LD_VAR 0 2
56107: ARRAY
56108: PUSH
56109: LD_INT 1
56111: ARRAY
56112: PUSH
56113: LD_INT 3
56115: ARRAY
56116: PUSH
56117: LD_EXP 35
56121: PUSH
56122: LD_VAR 0 2
56126: ARRAY
56127: PUSH
56128: LD_INT 1
56130: ARRAY
56131: PUSH
56132: LD_INT 4
56134: ARRAY
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: PPUSH
56142: CALL 15660 0 2
56146: AND
56147: IFFALSE 56285
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
56149: LD_VAR 0 3
56153: PPUSH
56154: LD_EXP 35
56158: PUSH
56159: LD_VAR 0 2
56163: ARRAY
56164: PUSH
56165: LD_INT 1
56167: ARRAY
56168: PUSH
56169: LD_INT 1
56171: ARRAY
56172: PPUSH
56173: LD_EXP 35
56177: PUSH
56178: LD_VAR 0 2
56182: ARRAY
56183: PUSH
56184: LD_INT 1
56186: ARRAY
56187: PUSH
56188: LD_INT 2
56190: ARRAY
56191: PPUSH
56192: LD_EXP 35
56196: PUSH
56197: LD_VAR 0 2
56201: ARRAY
56202: PUSH
56203: LD_INT 1
56205: ARRAY
56206: PUSH
56207: LD_INT 3
56209: ARRAY
56210: PPUSH
56211: LD_EXP 35
56215: PUSH
56216: LD_VAR 0 2
56220: ARRAY
56221: PUSH
56222: LD_INT 1
56224: ARRAY
56225: PUSH
56226: LD_INT 4
56228: ARRAY
56229: PPUSH
56230: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
56234: LD_ADDR_VAR 0 4
56238: PUSH
56239: LD_EXP 35
56243: PUSH
56244: LD_VAR 0 2
56248: ARRAY
56249: PPUSH
56250: LD_INT 1
56252: PPUSH
56253: CALL_OW 3
56257: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
56258: LD_ADDR_EXP 35
56262: PUSH
56263: LD_EXP 35
56267: PPUSH
56268: LD_VAR 0 2
56272: PPUSH
56273: LD_VAR 0 4
56277: PPUSH
56278: CALL_OW 1
56282: ST_TO_ADDR
// break ;
56283: GO 56287
// end ; end ;
56285: GO 55931
56287: POP
56288: POP
// end ;
56289: GO 55863
56291: POP
56292: POP
// end ;
56293: LD_VAR 0 1
56297: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
56298: LD_INT 0
56300: PPUSH
56301: PPUSH
56302: PPUSH
// if not mc_bases then
56303: LD_EXP 14
56307: NOT
56308: IFFALSE 56312
// exit ;
56310: GO 56401
// for i = 1 to mc_bases do
56312: LD_ADDR_VAR 0 2
56316: PUSH
56317: DOUBLE
56318: LD_INT 1
56320: DEC
56321: ST_TO_ADDR
56322: LD_EXP 14
56326: PUSH
56327: FOR_TO
56328: IFFALSE 56399
// begin if mc_attack [ i ] then
56330: LD_EXP 34
56334: PUSH
56335: LD_VAR 0 2
56339: ARRAY
56340: IFFALSE 56397
// begin tmp := mc_attack [ i ] [ 1 ] ;
56342: LD_ADDR_VAR 0 3
56346: PUSH
56347: LD_EXP 34
56351: PUSH
56352: LD_VAR 0 2
56356: ARRAY
56357: PUSH
56358: LD_INT 1
56360: ARRAY
56361: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
56362: LD_ADDR_EXP 34
56366: PUSH
56367: LD_EXP 34
56371: PPUSH
56372: LD_VAR 0 2
56376: PPUSH
56377: EMPTY
56378: PPUSH
56379: CALL_OW 1
56383: ST_TO_ADDR
// Attack ( tmp ) ;
56384: LD_VAR 0 3
56388: PPUSH
56389: CALL 70937 0 1
// exit ;
56393: POP
56394: POP
56395: GO 56401
// end ; end ;
56397: GO 56327
56399: POP
56400: POP
// end ;
56401: LD_VAR 0 1
56405: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
56406: LD_INT 0
56408: PPUSH
56409: PPUSH
56410: PPUSH
56411: PPUSH
56412: PPUSH
56413: PPUSH
56414: PPUSH
// if not mc_bases then
56415: LD_EXP 14
56419: NOT
56420: IFFALSE 56424
// exit ;
56422: GO 57006
// for i = 1 to mc_bases do
56424: LD_ADDR_VAR 0 2
56428: PUSH
56429: DOUBLE
56430: LD_INT 1
56432: DEC
56433: ST_TO_ADDR
56434: LD_EXP 14
56438: PUSH
56439: FOR_TO
56440: IFFALSE 57004
// begin if not mc_bases [ i ] then
56442: LD_EXP 14
56446: PUSH
56447: LD_VAR 0 2
56451: ARRAY
56452: NOT
56453: IFFALSE 56457
// continue ;
56455: GO 56439
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
56457: LD_ADDR_VAR 0 7
56461: PUSH
56462: LD_EXP 14
56466: PUSH
56467: LD_VAR 0 2
56471: ARRAY
56472: PUSH
56473: LD_INT 1
56475: ARRAY
56476: PPUSH
56477: CALL 6232 0 1
56481: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
56482: LD_ADDR_EXP 37
56486: PUSH
56487: LD_EXP 37
56491: PPUSH
56492: LD_VAR 0 2
56496: PPUSH
56497: LD_EXP 14
56501: PUSH
56502: LD_VAR 0 2
56506: ARRAY
56507: PUSH
56508: LD_INT 1
56510: ARRAY
56511: PPUSH
56512: CALL_OW 255
56516: PPUSH
56517: LD_EXP 39
56521: PUSH
56522: LD_VAR 0 2
56526: ARRAY
56527: PPUSH
56528: CALL 6197 0 2
56532: PPUSH
56533: CALL_OW 1
56537: ST_TO_ADDR
// if not mc_scan [ i ] then
56538: LD_EXP 37
56542: PUSH
56543: LD_VAR 0 2
56547: ARRAY
56548: NOT
56549: IFFALSE 56704
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
56551: LD_ADDR_VAR 0 4
56555: PUSH
56556: LD_EXP 14
56560: PUSH
56561: LD_VAR 0 2
56565: ARRAY
56566: PPUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 25
56572: PUSH
56573: LD_INT 5
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 25
56582: PUSH
56583: LD_INT 8
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 25
56592: PUSH
56593: LD_INT 9
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: PPUSH
56606: CALL_OW 72
56610: ST_TO_ADDR
// if not tmp then
56611: LD_VAR 0 4
56615: NOT
56616: IFFALSE 56620
// continue ;
56618: GO 56439
// for j in tmp do
56620: LD_ADDR_VAR 0 3
56624: PUSH
56625: LD_VAR 0 4
56629: PUSH
56630: FOR_IN
56631: IFFALSE 56702
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
56633: LD_VAR 0 3
56637: PPUSH
56638: CALL_OW 310
56642: PPUSH
56643: CALL_OW 266
56647: PUSH
56648: LD_INT 5
56650: EQUAL
56651: PUSH
56652: LD_VAR 0 3
56656: PPUSH
56657: CALL_OW 257
56661: PUSH
56662: LD_INT 1
56664: EQUAL
56665: AND
56666: PUSH
56667: LD_VAR 0 3
56671: PPUSH
56672: CALL_OW 459
56676: NOT
56677: AND
56678: PUSH
56679: LD_VAR 0 7
56683: AND
56684: IFFALSE 56700
// ComChangeProfession ( j , class ) ;
56686: LD_VAR 0 3
56690: PPUSH
56691: LD_VAR 0 7
56695: PPUSH
56696: CALL_OW 123
56700: GO 56630
56702: POP
56703: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
56704: LD_EXP 37
56708: PUSH
56709: LD_VAR 0 2
56713: ARRAY
56714: PUSH
56715: LD_EXP 36
56719: PUSH
56720: LD_VAR 0 2
56724: ARRAY
56725: NOT
56726: AND
56727: PUSH
56728: LD_EXP 14
56732: PUSH
56733: LD_VAR 0 2
56737: ARRAY
56738: PPUSH
56739: LD_INT 30
56741: PUSH
56742: LD_INT 32
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PPUSH
56749: CALL_OW 72
56753: NOT
56754: AND
56755: PUSH
56756: LD_EXP 14
56760: PUSH
56761: LD_VAR 0 2
56765: ARRAY
56766: PPUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 30
56772: PUSH
56773: LD_INT 4
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 30
56782: PUSH
56783: LD_INT 5
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: PPUSH
56795: CALL_OW 72
56799: NOT
56800: AND
56801: IFFALSE 56933
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
56803: LD_ADDR_VAR 0 4
56807: PUSH
56808: LD_EXP 14
56812: PUSH
56813: LD_VAR 0 2
56817: ARRAY
56818: PPUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 25
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 25
56834: PUSH
56835: LD_INT 5
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 25
56844: PUSH
56845: LD_INT 8
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 25
56854: PUSH
56855: LD_INT 9
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: PPUSH
56869: CALL_OW 72
56873: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
56874: LD_ADDR_VAR 0 4
56878: PUSH
56879: LD_VAR 0 4
56883: PUSH
56884: LD_VAR 0 4
56888: PPUSH
56889: LD_INT 18
56891: PPUSH
56892: CALL 37957 0 2
56896: DIFF
56897: ST_TO_ADDR
// if tmp then
56898: LD_VAR 0 4
56902: IFFALSE 56933
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
56904: LD_VAR 0 2
56908: PPUSH
56909: LD_VAR 0 4
56913: PPUSH
56914: LD_EXP 39
56918: PUSH
56919: LD_VAR 0 2
56923: ARRAY
56924: PPUSH
56925: CALL 75646 0 3
// exit ;
56929: POP
56930: POP
56931: GO 57006
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
56933: LD_EXP 37
56937: PUSH
56938: LD_VAR 0 2
56942: ARRAY
56943: PUSH
56944: LD_EXP 36
56948: PUSH
56949: LD_VAR 0 2
56953: ARRAY
56954: AND
56955: IFFALSE 57002
// begin tmp := mc_defender [ i ] ;
56957: LD_ADDR_VAR 0 4
56961: PUSH
56962: LD_EXP 36
56966: PUSH
56967: LD_VAR 0 2
56971: ARRAY
56972: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
56973: LD_VAR 0 2
56977: PPUSH
56978: LD_VAR 0 4
56982: PPUSH
56983: LD_EXP 37
56987: PUSH
56988: LD_VAR 0 2
56992: ARRAY
56993: PPUSH
56994: CALL 76207 0 3
// exit ;
56998: POP
56999: POP
57000: GO 57006
// end ; end ;
57002: GO 56439
57004: POP
57005: POP
// end ;
57006: LD_VAR 0 1
57010: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
57011: LD_INT 0
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
// if not mc_bases then
57024: LD_EXP 14
57028: NOT
57029: IFFALSE 57033
// exit ;
57031: GO 58120
// for i = 1 to mc_bases do
57033: LD_ADDR_VAR 0 2
57037: PUSH
57038: DOUBLE
57039: LD_INT 1
57041: DEC
57042: ST_TO_ADDR
57043: LD_EXP 14
57047: PUSH
57048: FOR_TO
57049: IFFALSE 58118
// begin tmp := mc_lab [ i ] ;
57051: LD_ADDR_VAR 0 6
57055: PUSH
57056: LD_EXP 47
57060: PUSH
57061: LD_VAR 0 2
57065: ARRAY
57066: ST_TO_ADDR
// if not tmp then
57067: LD_VAR 0 6
57071: NOT
57072: IFFALSE 57076
// continue ;
57074: GO 57048
// idle_lab := 0 ;
57076: LD_ADDR_VAR 0 11
57080: PUSH
57081: LD_INT 0
57083: ST_TO_ADDR
// for j in tmp do
57084: LD_ADDR_VAR 0 3
57088: PUSH
57089: LD_VAR 0 6
57093: PUSH
57094: FOR_IN
57095: IFFALSE 58114
// begin researching := false ;
57097: LD_ADDR_VAR 0 10
57101: PUSH
57102: LD_INT 0
57104: ST_TO_ADDR
// side := GetSide ( j ) ;
57105: LD_ADDR_VAR 0 4
57109: PUSH
57110: LD_VAR 0 3
57114: PPUSH
57115: CALL_OW 255
57119: ST_TO_ADDR
// if not mc_tech [ side ] then
57120: LD_EXP 41
57124: PUSH
57125: LD_VAR 0 4
57129: ARRAY
57130: NOT
57131: IFFALSE 57135
// continue ;
57133: GO 57094
// if BuildingStatus ( j ) = bs_idle then
57135: LD_VAR 0 3
57139: PPUSH
57140: CALL_OW 461
57144: PUSH
57145: LD_INT 2
57147: EQUAL
57148: IFFALSE 57336
// begin if idle_lab and UnitsInside ( j ) < 6 then
57150: LD_VAR 0 11
57154: PUSH
57155: LD_VAR 0 3
57159: PPUSH
57160: CALL_OW 313
57164: PUSH
57165: LD_INT 6
57167: LESS
57168: AND
57169: IFFALSE 57240
// begin tmp2 := UnitsInside ( idle_lab ) ;
57171: LD_ADDR_VAR 0 9
57175: PUSH
57176: LD_VAR 0 11
57180: PPUSH
57181: CALL_OW 313
57185: ST_TO_ADDR
// if tmp2 then
57186: LD_VAR 0 9
57190: IFFALSE 57232
// for x in tmp2 do
57192: LD_ADDR_VAR 0 7
57196: PUSH
57197: LD_VAR 0 9
57201: PUSH
57202: FOR_IN
57203: IFFALSE 57230
// begin ComExitBuilding ( x ) ;
57205: LD_VAR 0 7
57209: PPUSH
57210: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
57214: LD_VAR 0 7
57218: PPUSH
57219: LD_VAR 0 3
57223: PPUSH
57224: CALL_OW 180
// end ;
57228: GO 57202
57230: POP
57231: POP
// idle_lab := 0 ;
57232: LD_ADDR_VAR 0 11
57236: PUSH
57237: LD_INT 0
57239: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
57240: LD_ADDR_VAR 0 5
57244: PUSH
57245: LD_EXP 41
57249: PUSH
57250: LD_VAR 0 4
57254: ARRAY
57255: PUSH
57256: FOR_IN
57257: IFFALSE 57317
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
57259: LD_VAR 0 3
57263: PPUSH
57264: LD_VAR 0 5
57268: PPUSH
57269: CALL_OW 430
57273: PUSH
57274: LD_VAR 0 4
57278: PPUSH
57279: LD_VAR 0 5
57283: PPUSH
57284: CALL 5302 0 2
57288: AND
57289: IFFALSE 57315
// begin researching := true ;
57291: LD_ADDR_VAR 0 10
57295: PUSH
57296: LD_INT 1
57298: ST_TO_ADDR
// ComResearch ( j , t ) ;
57299: LD_VAR 0 3
57303: PPUSH
57304: LD_VAR 0 5
57308: PPUSH
57309: CALL_OW 124
// break ;
57313: GO 57317
// end ;
57315: GO 57256
57317: POP
57318: POP
// if not researching then
57319: LD_VAR 0 10
57323: NOT
57324: IFFALSE 57336
// idle_lab := j ;
57326: LD_ADDR_VAR 0 11
57330: PUSH
57331: LD_VAR 0 3
57335: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
57336: LD_VAR 0 3
57340: PPUSH
57341: CALL_OW 461
57345: PUSH
57346: LD_INT 10
57348: EQUAL
57349: IFFALSE 57937
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
57351: LD_EXP 43
57355: PUSH
57356: LD_VAR 0 2
57360: ARRAY
57361: NOT
57362: PUSH
57363: LD_EXP 44
57367: PUSH
57368: LD_VAR 0 2
57372: ARRAY
57373: NOT
57374: AND
57375: PUSH
57376: LD_EXP 41
57380: PUSH
57381: LD_VAR 0 4
57385: ARRAY
57386: PUSH
57387: LD_INT 1
57389: GREATER
57390: AND
57391: IFFALSE 57522
// begin ComCancel ( j ) ;
57393: LD_VAR 0 3
57397: PPUSH
57398: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
57402: LD_ADDR_EXP 41
57406: PUSH
57407: LD_EXP 41
57411: PPUSH
57412: LD_VAR 0 4
57416: PPUSH
57417: LD_EXP 41
57421: PUSH
57422: LD_VAR 0 4
57426: ARRAY
57427: PPUSH
57428: LD_EXP 41
57432: PUSH
57433: LD_VAR 0 4
57437: ARRAY
57438: PUSH
57439: LD_INT 1
57441: MINUS
57442: PPUSH
57443: LD_EXP 41
57447: PUSH
57448: LD_VAR 0 4
57452: ARRAY
57453: PPUSH
57454: LD_INT 0
57456: PPUSH
57457: CALL 8814 0 4
57461: PPUSH
57462: CALL_OW 1
57466: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
57467: LD_ADDR_EXP 41
57471: PUSH
57472: LD_EXP 41
57476: PPUSH
57477: LD_VAR 0 4
57481: PPUSH
57482: LD_EXP 41
57486: PUSH
57487: LD_VAR 0 4
57491: ARRAY
57492: PPUSH
57493: LD_EXP 41
57497: PUSH
57498: LD_VAR 0 4
57502: ARRAY
57503: PPUSH
57504: LD_INT 1
57506: PPUSH
57507: LD_INT 0
57509: PPUSH
57510: CALL 8814 0 4
57514: PPUSH
57515: CALL_OW 1
57519: ST_TO_ADDR
// continue ;
57520: GO 57094
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
57522: LD_EXP 43
57526: PUSH
57527: LD_VAR 0 2
57531: ARRAY
57532: PUSH
57533: LD_EXP 44
57537: PUSH
57538: LD_VAR 0 2
57542: ARRAY
57543: NOT
57544: AND
57545: IFFALSE 57672
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
57547: LD_ADDR_EXP 44
57551: PUSH
57552: LD_EXP 44
57556: PPUSH
57557: LD_VAR 0 2
57561: PUSH
57562: LD_EXP 44
57566: PUSH
57567: LD_VAR 0 2
57571: ARRAY
57572: PUSH
57573: LD_INT 1
57575: PLUS
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PPUSH
57581: LD_EXP 43
57585: PUSH
57586: LD_VAR 0 2
57590: ARRAY
57591: PUSH
57592: LD_INT 1
57594: ARRAY
57595: PPUSH
57596: CALL 9396 0 3
57600: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
57601: LD_EXP 43
57605: PUSH
57606: LD_VAR 0 2
57610: ARRAY
57611: PUSH
57612: LD_INT 1
57614: ARRAY
57615: PPUSH
57616: LD_INT 112
57618: PPUSH
57619: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
57623: LD_ADDR_VAR 0 9
57627: PUSH
57628: LD_EXP 43
57632: PUSH
57633: LD_VAR 0 2
57637: ARRAY
57638: PPUSH
57639: LD_INT 1
57641: PPUSH
57642: CALL_OW 3
57646: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
57647: LD_ADDR_EXP 43
57651: PUSH
57652: LD_EXP 43
57656: PPUSH
57657: LD_VAR 0 2
57661: PPUSH
57662: LD_VAR 0 9
57666: PPUSH
57667: CALL_OW 1
57671: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
57672: LD_EXP 43
57676: PUSH
57677: LD_VAR 0 2
57681: ARRAY
57682: PUSH
57683: LD_EXP 44
57687: PUSH
57688: LD_VAR 0 2
57692: ARRAY
57693: AND
57694: PUSH
57695: LD_EXP 44
57699: PUSH
57700: LD_VAR 0 2
57704: ARRAY
57705: PUSH
57706: LD_INT 1
57708: ARRAY
57709: PPUSH
57710: CALL_OW 310
57714: NOT
57715: AND
57716: PUSH
57717: LD_VAR 0 3
57721: PPUSH
57722: CALL_OW 313
57726: PUSH
57727: LD_INT 6
57729: EQUAL
57730: AND
57731: IFFALSE 57787
// begin tmp2 := UnitsInside ( j ) ;
57733: LD_ADDR_VAR 0 9
57737: PUSH
57738: LD_VAR 0 3
57742: PPUSH
57743: CALL_OW 313
57747: ST_TO_ADDR
// if tmp2 = 6 then
57748: LD_VAR 0 9
57752: PUSH
57753: LD_INT 6
57755: EQUAL
57756: IFFALSE 57787
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
57758: LD_VAR 0 9
57762: PUSH
57763: LD_INT 1
57765: ARRAY
57766: PPUSH
57767: LD_INT 112
57769: PPUSH
57770: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
57774: LD_VAR 0 9
57778: PUSH
57779: LD_INT 1
57781: ARRAY
57782: PPUSH
57783: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
57787: LD_EXP 44
57791: PUSH
57792: LD_VAR 0 2
57796: ARRAY
57797: PUSH
57798: LD_EXP 44
57802: PUSH
57803: LD_VAR 0 2
57807: ARRAY
57808: PUSH
57809: LD_INT 1
57811: ARRAY
57812: PPUSH
57813: CALL_OW 314
57817: NOT
57818: AND
57819: PUSH
57820: LD_EXP 44
57824: PUSH
57825: LD_VAR 0 2
57829: ARRAY
57830: PUSH
57831: LD_INT 1
57833: ARRAY
57834: PPUSH
57835: CALL_OW 310
57839: NOT
57840: AND
57841: IFFALSE 57867
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
57843: LD_EXP 44
57847: PUSH
57848: LD_VAR 0 2
57852: ARRAY
57853: PUSH
57854: LD_INT 1
57856: ARRAY
57857: PPUSH
57858: LD_VAR 0 3
57862: PPUSH
57863: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
57867: LD_EXP 44
57871: PUSH
57872: LD_VAR 0 2
57876: ARRAY
57877: PUSH
57878: LD_INT 1
57880: ARRAY
57881: PPUSH
57882: CALL_OW 310
57886: PUSH
57887: LD_EXP 44
57891: PUSH
57892: LD_VAR 0 2
57896: ARRAY
57897: PUSH
57898: LD_INT 1
57900: ARRAY
57901: PPUSH
57902: CALL_OW 310
57906: PPUSH
57907: CALL_OW 461
57911: PUSH
57912: LD_INT 3
57914: NONEQUAL
57915: AND
57916: IFFALSE 57937
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
57918: LD_EXP 44
57922: PUSH
57923: LD_VAR 0 2
57927: ARRAY
57928: PUSH
57929: LD_INT 1
57931: ARRAY
57932: PPUSH
57933: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
57937: LD_VAR 0 3
57941: PPUSH
57942: CALL_OW 461
57946: PUSH
57947: LD_INT 6
57949: EQUAL
57950: PUSH
57951: LD_VAR 0 6
57955: PUSH
57956: LD_INT 1
57958: GREATER
57959: AND
57960: IFFALSE 58112
// begin sci := [ ] ;
57962: LD_ADDR_VAR 0 8
57966: PUSH
57967: EMPTY
57968: ST_TO_ADDR
// for x in ( tmp diff j ) do
57969: LD_ADDR_VAR 0 7
57973: PUSH
57974: LD_VAR 0 6
57978: PUSH
57979: LD_VAR 0 3
57983: DIFF
57984: PUSH
57985: FOR_IN
57986: IFFALSE 58038
// begin if sci = 6 then
57988: LD_VAR 0 8
57992: PUSH
57993: LD_INT 6
57995: EQUAL
57996: IFFALSE 58000
// break ;
57998: GO 58038
// if BuildingStatus ( x ) = bs_idle then
58000: LD_VAR 0 7
58004: PPUSH
58005: CALL_OW 461
58009: PUSH
58010: LD_INT 2
58012: EQUAL
58013: IFFALSE 58036
// sci := sci ^ UnitsInside ( x ) ;
58015: LD_ADDR_VAR 0 8
58019: PUSH
58020: LD_VAR 0 8
58024: PUSH
58025: LD_VAR 0 7
58029: PPUSH
58030: CALL_OW 313
58034: ADD
58035: ST_TO_ADDR
// end ;
58036: GO 57985
58038: POP
58039: POP
// if not sci then
58040: LD_VAR 0 8
58044: NOT
58045: IFFALSE 58049
// continue ;
58047: GO 57094
// for x in sci do
58049: LD_ADDR_VAR 0 7
58053: PUSH
58054: LD_VAR 0 8
58058: PUSH
58059: FOR_IN
58060: IFFALSE 58110
// if IsInUnit ( x ) and not HasTask ( x ) then
58062: LD_VAR 0 7
58066: PPUSH
58067: CALL_OW 310
58071: PUSH
58072: LD_VAR 0 7
58076: PPUSH
58077: CALL_OW 314
58081: NOT
58082: AND
58083: IFFALSE 58108
// begin ComExitBuilding ( x ) ;
58085: LD_VAR 0 7
58089: PPUSH
58090: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
58094: LD_VAR 0 7
58098: PPUSH
58099: LD_VAR 0 3
58103: PPUSH
58104: CALL_OW 180
// end ;
58108: GO 58059
58110: POP
58111: POP
// end ; end ;
58112: GO 57094
58114: POP
58115: POP
// end ;
58116: GO 57048
58118: POP
58119: POP
// end ;
58120: LD_VAR 0 1
58124: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
58125: LD_INT 0
58127: PPUSH
58128: PPUSH
// if not mc_bases then
58129: LD_EXP 14
58133: NOT
58134: IFFALSE 58138
// exit ;
58136: GO 58219
// for i = 1 to mc_bases do
58138: LD_ADDR_VAR 0 2
58142: PUSH
58143: DOUBLE
58144: LD_INT 1
58146: DEC
58147: ST_TO_ADDR
58148: LD_EXP 14
58152: PUSH
58153: FOR_TO
58154: IFFALSE 58217
// if mc_mines [ i ] and mc_miners [ i ] then
58156: LD_EXP 27
58160: PUSH
58161: LD_VAR 0 2
58165: ARRAY
58166: PUSH
58167: LD_EXP 28
58171: PUSH
58172: LD_VAR 0 2
58176: ARRAY
58177: AND
58178: IFFALSE 58215
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
58180: LD_EXP 28
58184: PUSH
58185: LD_VAR 0 2
58189: ARRAY
58190: PUSH
58191: LD_INT 1
58193: ARRAY
58194: PPUSH
58195: CALL_OW 255
58199: PPUSH
58200: LD_EXP 27
58204: PUSH
58205: LD_VAR 0 2
58209: ARRAY
58210: PPUSH
58211: CALL 6385 0 2
58215: GO 58153
58217: POP
58218: POP
// end ;
58219: LD_VAR 0 1
58223: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
58224: LD_INT 0
58226: PPUSH
58227: PPUSH
58228: PPUSH
58229: PPUSH
58230: PPUSH
58231: PPUSH
58232: PPUSH
58233: PPUSH
// if not mc_bases or not mc_parking then
58234: LD_EXP 14
58238: NOT
58239: PUSH
58240: LD_EXP 38
58244: NOT
58245: OR
58246: IFFALSE 58250
// exit ;
58248: GO 58949
// for i = 1 to mc_bases do
58250: LD_ADDR_VAR 0 2
58254: PUSH
58255: DOUBLE
58256: LD_INT 1
58258: DEC
58259: ST_TO_ADDR
58260: LD_EXP 14
58264: PUSH
58265: FOR_TO
58266: IFFALSE 58947
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
58268: LD_EXP 14
58272: PUSH
58273: LD_VAR 0 2
58277: ARRAY
58278: NOT
58279: PUSH
58280: LD_EXP 38
58284: PUSH
58285: LD_VAR 0 2
58289: ARRAY
58290: NOT
58291: OR
58292: IFFALSE 58296
// continue ;
58294: GO 58265
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
58296: LD_ADDR_VAR 0 5
58300: PUSH
58301: LD_EXP 14
58305: PUSH
58306: LD_VAR 0 2
58310: ARRAY
58311: PUSH
58312: LD_INT 1
58314: ARRAY
58315: PPUSH
58316: CALL_OW 255
58320: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58321: LD_ADDR_VAR 0 6
58325: PUSH
58326: LD_EXP 14
58330: PUSH
58331: LD_VAR 0 2
58335: ARRAY
58336: PPUSH
58337: LD_INT 30
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PPUSH
58347: CALL_OW 72
58351: ST_TO_ADDR
// if not fac then
58352: LD_VAR 0 6
58356: NOT
58357: IFFALSE 58408
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58359: LD_ADDR_VAR 0 6
58363: PUSH
58364: LD_EXP 14
58368: PUSH
58369: LD_VAR 0 2
58373: ARRAY
58374: PPUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 30
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 30
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: PPUSH
58403: CALL_OW 72
58407: ST_TO_ADDR
// if not fac then
58408: LD_VAR 0 6
58412: NOT
58413: IFFALSE 58417
// continue ;
58415: GO 58265
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58417: LD_ADDR_VAR 0 7
58421: PUSH
58422: LD_EXP 38
58426: PUSH
58427: LD_VAR 0 2
58431: ARRAY
58432: PPUSH
58433: LD_INT 22
58435: PUSH
58436: LD_VAR 0 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 21
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: LD_INT 24
58460: PUSH
58461: LD_INT 1000
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: LIST
58476: PPUSH
58477: CALL_OW 70
58481: ST_TO_ADDR
// for j in fac do
58482: LD_ADDR_VAR 0 3
58486: PUSH
58487: LD_VAR 0 6
58491: PUSH
58492: FOR_IN
58493: IFFALSE 58574
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58495: LD_ADDR_VAR 0 7
58499: PUSH
58500: LD_VAR 0 7
58504: PUSH
58505: LD_INT 22
58507: PUSH
58508: LD_VAR 0 5
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 91
58519: PUSH
58520: LD_VAR 0 3
58524: PUSH
58525: LD_INT 15
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 21
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 24
58548: PUSH
58549: LD_INT 1000
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: PPUSH
58566: CALL_OW 69
58570: UNION
58571: ST_TO_ADDR
58572: GO 58492
58574: POP
58575: POP
// if not vehs then
58576: LD_VAR 0 7
58580: NOT
58581: IFFALSE 58607
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58583: LD_ADDR_EXP 26
58587: PUSH
58588: LD_EXP 26
58592: PPUSH
58593: LD_VAR 0 2
58597: PPUSH
58598: EMPTY
58599: PPUSH
58600: CALL_OW 1
58604: ST_TO_ADDR
// continue ;
58605: GO 58265
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58607: LD_ADDR_VAR 0 8
58611: PUSH
58612: LD_EXP 14
58616: PUSH
58617: LD_VAR 0 2
58621: ARRAY
58622: PPUSH
58623: LD_INT 30
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PPUSH
58633: CALL_OW 72
58637: ST_TO_ADDR
// if tmp then
58638: LD_VAR 0 8
58642: IFFALSE 58745
// begin for j in tmp do
58644: LD_ADDR_VAR 0 3
58648: PUSH
58649: LD_VAR 0 8
58653: PUSH
58654: FOR_IN
58655: IFFALSE 58743
// for k in UnitsInside ( j ) do
58657: LD_ADDR_VAR 0 4
58661: PUSH
58662: LD_VAR 0 3
58666: PPUSH
58667: CALL_OW 313
58671: PUSH
58672: FOR_IN
58673: IFFALSE 58739
// if k then
58675: LD_VAR 0 4
58679: IFFALSE 58737
// if not k in mc_repair_vehicle [ i ] then
58681: LD_VAR 0 4
58685: PUSH
58686: LD_EXP 26
58690: PUSH
58691: LD_VAR 0 2
58695: ARRAY
58696: IN
58697: NOT
58698: IFFALSE 58737
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
58700: LD_ADDR_EXP 26
58704: PUSH
58705: LD_EXP 26
58709: PPUSH
58710: LD_VAR 0 2
58714: PPUSH
58715: LD_EXP 26
58719: PUSH
58720: LD_VAR 0 2
58724: ARRAY
58725: PUSH
58726: LD_VAR 0 4
58730: UNION
58731: PPUSH
58732: CALL_OW 1
58736: ST_TO_ADDR
58737: GO 58672
58739: POP
58740: POP
58741: GO 58654
58743: POP
58744: POP
// end ; if not mc_repair_vehicle [ i ] then
58745: LD_EXP 26
58749: PUSH
58750: LD_VAR 0 2
58754: ARRAY
58755: NOT
58756: IFFALSE 58760
// continue ;
58758: GO 58265
// for j in mc_repair_vehicle [ i ] do
58760: LD_ADDR_VAR 0 3
58764: PUSH
58765: LD_EXP 26
58769: PUSH
58770: LD_VAR 0 2
58774: ARRAY
58775: PUSH
58776: FOR_IN
58777: IFFALSE 58943
// begin if GetClass ( j ) <> 3 then
58779: LD_VAR 0 3
58783: PPUSH
58784: CALL_OW 257
58788: PUSH
58789: LD_INT 3
58791: NONEQUAL
58792: IFFALSE 58833
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
58794: LD_ADDR_EXP 26
58798: PUSH
58799: LD_EXP 26
58803: PPUSH
58804: LD_VAR 0 2
58808: PPUSH
58809: LD_EXP 26
58813: PUSH
58814: LD_VAR 0 2
58818: ARRAY
58819: PUSH
58820: LD_VAR 0 3
58824: DIFF
58825: PPUSH
58826: CALL_OW 1
58830: ST_TO_ADDR
// continue ;
58831: GO 58776
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
58833: LD_VAR 0 3
58837: PPUSH
58838: CALL_OW 311
58842: NOT
58843: PUSH
58844: LD_VAR 0 3
58848: PUSH
58849: LD_EXP 17
58853: PUSH
58854: LD_VAR 0 2
58858: ARRAY
58859: PUSH
58860: LD_INT 1
58862: ARRAY
58863: IN
58864: NOT
58865: AND
58866: PUSH
58867: LD_VAR 0 3
58871: PUSH
58872: LD_EXP 17
58876: PUSH
58877: LD_VAR 0 2
58881: ARRAY
58882: PUSH
58883: LD_INT 2
58885: ARRAY
58886: IN
58887: NOT
58888: AND
58889: IFFALSE 58941
// begin if IsInUnit ( j ) then
58891: LD_VAR 0 3
58895: PPUSH
58896: CALL_OW 310
58900: IFFALSE 58911
// ComExitBuilding ( j ) ;
58902: LD_VAR 0 3
58906: PPUSH
58907: CALL_OW 122
// if not HasTask ( j ) then
58911: LD_VAR 0 3
58915: PPUSH
58916: CALL_OW 314
58920: NOT
58921: IFFALSE 58941
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
58923: LD_VAR 0 3
58927: PPUSH
58928: LD_VAR 0 7
58932: PUSH
58933: LD_INT 1
58935: ARRAY
58936: PPUSH
58937: CALL_OW 189
// end ; end ;
58941: GO 58776
58943: POP
58944: POP
// end ;
58945: GO 58265
58947: POP
58948: POP
// end ;
58949: LD_VAR 0 1
58953: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
58954: LD_INT 0
58956: PPUSH
58957: PPUSH
58958: PPUSH
58959: PPUSH
58960: PPUSH
58961: PPUSH
58962: PPUSH
58963: PPUSH
58964: PPUSH
58965: PPUSH
58966: PPUSH
// if not mc_bases then
58967: LD_EXP 14
58971: NOT
58972: IFFALSE 58976
// exit ;
58974: GO 59778
// for i = 1 to mc_bases do
58976: LD_ADDR_VAR 0 2
58980: PUSH
58981: DOUBLE
58982: LD_INT 1
58984: DEC
58985: ST_TO_ADDR
58986: LD_EXP 14
58990: PUSH
58991: FOR_TO
58992: IFFALSE 59776
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
58994: LD_EXP 42
58998: PUSH
58999: LD_VAR 0 2
59003: ARRAY
59004: NOT
59005: PUSH
59006: LD_EXP 17
59010: PUSH
59011: LD_VAR 0 2
59015: ARRAY
59016: PUSH
59017: LD_INT 1
59019: ARRAY
59020: OR
59021: PUSH
59022: LD_EXP 17
59026: PUSH
59027: LD_VAR 0 2
59031: ARRAY
59032: PUSH
59033: LD_INT 2
59035: ARRAY
59036: OR
59037: PUSH
59038: LD_EXP 40
59042: PUSH
59043: LD_VAR 0 2
59047: ARRAY
59048: PPUSH
59049: LD_INT 1
59051: PPUSH
59052: CALL_OW 325
59056: NOT
59057: OR
59058: PUSH
59059: LD_EXP 37
59063: PUSH
59064: LD_VAR 0 2
59068: ARRAY
59069: OR
59070: IFFALSE 59074
// continue ;
59072: GO 58991
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
59074: LD_ADDR_VAR 0 8
59078: PUSH
59079: LD_EXP 14
59083: PUSH
59084: LD_VAR 0 2
59088: ARRAY
59089: PPUSH
59090: LD_INT 25
59092: PUSH
59093: LD_INT 4
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 50
59102: PUSH
59103: EMPTY
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: LD_INT 60
59111: PUSH
59112: EMPTY
59113: LIST
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: LIST
59123: PPUSH
59124: CALL_OW 72
59128: PUSH
59129: LD_EXP 18
59133: PUSH
59134: LD_VAR 0 2
59138: ARRAY
59139: DIFF
59140: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59141: LD_ADDR_VAR 0 9
59145: PUSH
59146: LD_EXP 14
59150: PUSH
59151: LD_VAR 0 2
59155: ARRAY
59156: PPUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 30
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 30
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: PPUSH
59185: CALL_OW 72
59189: ST_TO_ADDR
// if not tmp or not dep then
59190: LD_VAR 0 8
59194: NOT
59195: PUSH
59196: LD_VAR 0 9
59200: NOT
59201: OR
59202: IFFALSE 59206
// continue ;
59204: GO 58991
// side := GetSide ( tmp [ 1 ] ) ;
59206: LD_ADDR_VAR 0 11
59210: PUSH
59211: LD_VAR 0 8
59215: PUSH
59216: LD_INT 1
59218: ARRAY
59219: PPUSH
59220: CALL_OW 255
59224: ST_TO_ADDR
// dep := dep [ 1 ] ;
59225: LD_ADDR_VAR 0 9
59229: PUSH
59230: LD_VAR 0 9
59234: PUSH
59235: LD_INT 1
59237: ARRAY
59238: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
59239: LD_ADDR_VAR 0 7
59243: PUSH
59244: LD_EXP 42
59248: PUSH
59249: LD_VAR 0 2
59253: ARRAY
59254: PPUSH
59255: LD_INT 22
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 25
59267: PUSH
59268: LD_INT 12
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PPUSH
59279: CALL_OW 70
59283: PUSH
59284: LD_INT 22
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 25
59296: PUSH
59297: LD_INT 12
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 91
59306: PUSH
59307: LD_VAR 0 9
59311: PUSH
59312: LD_INT 20
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: PPUSH
59325: CALL_OW 69
59329: UNION
59330: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
59331: LD_ADDR_VAR 0 10
59335: PUSH
59336: LD_EXP 42
59340: PUSH
59341: LD_VAR 0 2
59345: ARRAY
59346: PPUSH
59347: LD_INT 81
59349: PUSH
59350: LD_VAR 0 11
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PPUSH
59359: CALL_OW 70
59363: ST_TO_ADDR
// if not apes or danger_at_area then
59364: LD_VAR 0 7
59368: NOT
59369: PUSH
59370: LD_VAR 0 10
59374: OR
59375: IFFALSE 59425
// begin if mc_taming [ i ] then
59377: LD_EXP 45
59381: PUSH
59382: LD_VAR 0 2
59386: ARRAY
59387: IFFALSE 59423
// begin MC_Reset ( i , 121 ) ;
59389: LD_VAR 0 2
59393: PPUSH
59394: LD_INT 121
59396: PPUSH
59397: CALL 44876 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59401: LD_ADDR_EXP 45
59405: PUSH
59406: LD_EXP 45
59410: PPUSH
59411: LD_VAR 0 2
59415: PPUSH
59416: EMPTY
59417: PPUSH
59418: CALL_OW 1
59422: ST_TO_ADDR
// end ; continue ;
59423: GO 58991
// end ; for j in tmp do
59425: LD_ADDR_VAR 0 3
59429: PUSH
59430: LD_VAR 0 8
59434: PUSH
59435: FOR_IN
59436: IFFALSE 59772
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
59438: LD_VAR 0 3
59442: PUSH
59443: LD_EXP 45
59447: PUSH
59448: LD_VAR 0 2
59452: ARRAY
59453: IN
59454: NOT
59455: PUSH
59456: LD_EXP 45
59460: PUSH
59461: LD_VAR 0 2
59465: ARRAY
59466: PUSH
59467: LD_INT 3
59469: LESS
59470: AND
59471: IFFALSE 59529
// begin SetTag ( j , 121 ) ;
59473: LD_VAR 0 3
59477: PPUSH
59478: LD_INT 121
59480: PPUSH
59481: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
59485: LD_ADDR_EXP 45
59489: PUSH
59490: LD_EXP 45
59494: PPUSH
59495: LD_VAR 0 2
59499: PUSH
59500: LD_EXP 45
59504: PUSH
59505: LD_VAR 0 2
59509: ARRAY
59510: PUSH
59511: LD_INT 1
59513: PLUS
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PPUSH
59519: LD_VAR 0 3
59523: PPUSH
59524: CALL 9396 0 3
59528: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
59529: LD_VAR 0 3
59533: PUSH
59534: LD_EXP 45
59538: PUSH
59539: LD_VAR 0 2
59543: ARRAY
59544: IN
59545: IFFALSE 59770
// begin if GetClass ( j ) <> 4 then
59547: LD_VAR 0 3
59551: PPUSH
59552: CALL_OW 257
59556: PUSH
59557: LD_INT 4
59559: NONEQUAL
59560: IFFALSE 59613
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
59562: LD_ADDR_EXP 45
59566: PUSH
59567: LD_EXP 45
59571: PPUSH
59572: LD_VAR 0 2
59576: PPUSH
59577: LD_EXP 45
59581: PUSH
59582: LD_VAR 0 2
59586: ARRAY
59587: PUSH
59588: LD_VAR 0 3
59592: DIFF
59593: PPUSH
59594: CALL_OW 1
59598: ST_TO_ADDR
// SetTag ( j , 0 ) ;
59599: LD_VAR 0 3
59603: PPUSH
59604: LD_INT 0
59606: PPUSH
59607: CALL_OW 109
// continue ;
59611: GO 59435
// end ; if IsInUnit ( j ) then
59613: LD_VAR 0 3
59617: PPUSH
59618: CALL_OW 310
59622: IFFALSE 59633
// ComExitBuilding ( j ) ;
59624: LD_VAR 0 3
59628: PPUSH
59629: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
59633: LD_ADDR_VAR 0 6
59637: PUSH
59638: LD_VAR 0 7
59642: PPUSH
59643: LD_VAR 0 3
59647: PPUSH
59648: CALL_OW 74
59652: ST_TO_ADDR
// if not ape then
59653: LD_VAR 0 6
59657: NOT
59658: IFFALSE 59662
// break ;
59660: GO 59772
// x := GetX ( ape ) ;
59662: LD_ADDR_VAR 0 4
59666: PUSH
59667: LD_VAR 0 6
59671: PPUSH
59672: CALL_OW 250
59676: ST_TO_ADDR
// y := GetY ( ape ) ;
59677: LD_ADDR_VAR 0 5
59681: PUSH
59682: LD_VAR 0 6
59686: PPUSH
59687: CALL_OW 251
59691: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59692: LD_VAR 0 4
59696: PPUSH
59697: LD_VAR 0 5
59701: PPUSH
59702: CALL_OW 488
59706: NOT
59707: PUSH
59708: LD_VAR 0 11
59712: PPUSH
59713: LD_VAR 0 4
59717: PPUSH
59718: LD_VAR 0 5
59722: PPUSH
59723: LD_INT 20
59725: PPUSH
59726: CALL 10292 0 4
59730: PUSH
59731: LD_INT 4
59733: ARRAY
59734: OR
59735: IFFALSE 59739
// break ;
59737: GO 59772
// if not HasTask ( j ) then
59739: LD_VAR 0 3
59743: PPUSH
59744: CALL_OW 314
59748: NOT
59749: IFFALSE 59770
// ComTameXY ( j , x , y ) ;
59751: LD_VAR 0 3
59755: PPUSH
59756: LD_VAR 0 4
59760: PPUSH
59761: LD_VAR 0 5
59765: PPUSH
59766: CALL_OW 131
// end ; end ;
59770: GO 59435
59772: POP
59773: POP
// end ;
59774: GO 58991
59776: POP
59777: POP
// end ;
59778: LD_VAR 0 1
59782: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
59783: LD_INT 0
59785: PPUSH
59786: PPUSH
59787: PPUSH
59788: PPUSH
59789: PPUSH
59790: PPUSH
59791: PPUSH
59792: PPUSH
// if not mc_bases then
59793: LD_EXP 14
59797: NOT
59798: IFFALSE 59802
// exit ;
59800: GO 60428
// for i = 1 to mc_bases do
59802: LD_ADDR_VAR 0 2
59806: PUSH
59807: DOUBLE
59808: LD_INT 1
59810: DEC
59811: ST_TO_ADDR
59812: LD_EXP 14
59816: PUSH
59817: FOR_TO
59818: IFFALSE 60426
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
59820: LD_EXP 43
59824: PUSH
59825: LD_VAR 0 2
59829: ARRAY
59830: NOT
59831: PUSH
59832: LD_EXP 43
59836: PUSH
59837: LD_VAR 0 2
59841: ARRAY
59842: PPUSH
59843: LD_INT 25
59845: PUSH
59846: LD_INT 12
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PPUSH
59853: CALL_OW 72
59857: NOT
59858: OR
59859: IFFALSE 59863
// continue ;
59861: GO 59817
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
59863: LD_ADDR_VAR 0 5
59867: PUSH
59868: LD_EXP 43
59872: PUSH
59873: LD_VAR 0 2
59877: ARRAY
59878: PUSH
59879: LD_INT 1
59881: ARRAY
59882: PPUSH
59883: CALL_OW 255
59887: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
59888: LD_VAR 0 5
59892: PPUSH
59893: LD_INT 2
59895: PPUSH
59896: CALL_OW 325
59900: IFFALSE 60153
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
59902: LD_ADDR_VAR 0 4
59906: PUSH
59907: LD_EXP 43
59911: PUSH
59912: LD_VAR 0 2
59916: ARRAY
59917: PPUSH
59918: LD_INT 25
59920: PUSH
59921: LD_INT 16
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PPUSH
59928: CALL_OW 72
59932: ST_TO_ADDR
// if tmp < 6 then
59933: LD_VAR 0 4
59937: PUSH
59938: LD_INT 6
59940: LESS
59941: IFFALSE 60153
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59943: LD_ADDR_VAR 0 6
59947: PUSH
59948: LD_EXP 14
59952: PUSH
59953: LD_VAR 0 2
59957: ARRAY
59958: PPUSH
59959: LD_INT 2
59961: PUSH
59962: LD_INT 30
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 30
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: LIST
59986: PPUSH
59987: CALL_OW 72
59991: ST_TO_ADDR
// if depot then
59992: LD_VAR 0 6
59996: IFFALSE 60153
// begin selected := 0 ;
59998: LD_ADDR_VAR 0 7
60002: PUSH
60003: LD_INT 0
60005: ST_TO_ADDR
// for j in depot do
60006: LD_ADDR_VAR 0 3
60010: PUSH
60011: LD_VAR 0 6
60015: PUSH
60016: FOR_IN
60017: IFFALSE 60048
// begin if UnitsInside ( j ) < 6 then
60019: LD_VAR 0 3
60023: PPUSH
60024: CALL_OW 313
60028: PUSH
60029: LD_INT 6
60031: LESS
60032: IFFALSE 60046
// begin selected := j ;
60034: LD_ADDR_VAR 0 7
60038: PUSH
60039: LD_VAR 0 3
60043: ST_TO_ADDR
// break ;
60044: GO 60048
// end ; end ;
60046: GO 60016
60048: POP
60049: POP
// if selected then
60050: LD_VAR 0 7
60054: IFFALSE 60153
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60056: LD_ADDR_VAR 0 3
60060: PUSH
60061: LD_EXP 43
60065: PUSH
60066: LD_VAR 0 2
60070: ARRAY
60071: PPUSH
60072: LD_INT 25
60074: PUSH
60075: LD_INT 12
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PPUSH
60082: CALL_OW 72
60086: PUSH
60087: FOR_IN
60088: IFFALSE 60151
// if not HasTask ( j ) then
60090: LD_VAR 0 3
60094: PPUSH
60095: CALL_OW 314
60099: NOT
60100: IFFALSE 60149
// begin if not IsInUnit ( j ) then
60102: LD_VAR 0 3
60106: PPUSH
60107: CALL_OW 310
60111: NOT
60112: IFFALSE 60128
// ComEnterUnit ( j , selected ) ;
60114: LD_VAR 0 3
60118: PPUSH
60119: LD_VAR 0 7
60123: PPUSH
60124: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
60128: LD_VAR 0 3
60132: PPUSH
60133: LD_INT 16
60135: PPUSH
60136: CALL_OW 183
// AddComExitBuilding ( j ) ;
60140: LD_VAR 0 3
60144: PPUSH
60145: CALL_OW 182
// end ;
60149: GO 60087
60151: POP
60152: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
60153: LD_VAR 0 5
60157: PPUSH
60158: LD_INT 11
60160: PPUSH
60161: CALL_OW 325
60165: IFFALSE 60424
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60167: LD_ADDR_VAR 0 4
60171: PUSH
60172: LD_EXP 43
60176: PUSH
60177: LD_VAR 0 2
60181: ARRAY
60182: PPUSH
60183: LD_INT 25
60185: PUSH
60186: LD_INT 16
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PPUSH
60193: CALL_OW 72
60197: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
60198: LD_VAR 0 4
60202: PUSH
60203: LD_INT 6
60205: GREATEREQUAL
60206: PUSH
60207: LD_VAR 0 5
60211: PPUSH
60212: LD_INT 2
60214: PPUSH
60215: CALL_OW 325
60219: NOT
60220: OR
60221: IFFALSE 60424
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60223: LD_ADDR_VAR 0 8
60227: PUSH
60228: LD_EXP 14
60232: PUSH
60233: LD_VAR 0 2
60237: ARRAY
60238: PPUSH
60239: LD_INT 2
60241: PUSH
60242: LD_INT 30
60244: PUSH
60245: LD_INT 4
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 30
60254: PUSH
60255: LD_INT 5
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: PPUSH
60267: CALL_OW 72
60271: ST_TO_ADDR
// if barracks then
60272: LD_VAR 0 8
60276: IFFALSE 60424
// begin selected := 0 ;
60278: LD_ADDR_VAR 0 7
60282: PUSH
60283: LD_INT 0
60285: ST_TO_ADDR
// for j in barracks do
60286: LD_ADDR_VAR 0 3
60290: PUSH
60291: LD_VAR 0 8
60295: PUSH
60296: FOR_IN
60297: IFFALSE 60328
// begin if UnitsInside ( j ) < 6 then
60299: LD_VAR 0 3
60303: PPUSH
60304: CALL_OW 313
60308: PUSH
60309: LD_INT 6
60311: LESS
60312: IFFALSE 60326
// begin selected := j ;
60314: LD_ADDR_VAR 0 7
60318: PUSH
60319: LD_VAR 0 3
60323: ST_TO_ADDR
// break ;
60324: GO 60328
// end ; end ;
60326: GO 60296
60328: POP
60329: POP
// if selected then
60330: LD_VAR 0 7
60334: IFFALSE 60424
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60336: LD_ADDR_VAR 0 3
60340: PUSH
60341: LD_EXP 43
60345: PUSH
60346: LD_VAR 0 2
60350: ARRAY
60351: PPUSH
60352: LD_INT 25
60354: PUSH
60355: LD_INT 12
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PPUSH
60362: CALL_OW 72
60366: PUSH
60367: FOR_IN
60368: IFFALSE 60422
// if not IsInUnit ( j ) and not HasTask ( j ) then
60370: LD_VAR 0 3
60374: PPUSH
60375: CALL_OW 310
60379: NOT
60380: PUSH
60381: LD_VAR 0 3
60385: PPUSH
60386: CALL_OW 314
60390: NOT
60391: AND
60392: IFFALSE 60420
// begin ComEnterUnit ( j , selected ) ;
60394: LD_VAR 0 3
60398: PPUSH
60399: LD_VAR 0 7
60403: PPUSH
60404: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
60408: LD_VAR 0 3
60412: PPUSH
60413: LD_INT 15
60415: PPUSH
60416: CALL_OW 183
// end ;
60420: GO 60367
60422: POP
60423: POP
// end ; end ; end ; end ; end ;
60424: GO 59817
60426: POP
60427: POP
// end ;
60428: LD_VAR 0 1
60432: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
60433: LD_INT 0
60435: PPUSH
60436: PPUSH
60437: PPUSH
60438: PPUSH
// if not mc_bases then
60439: LD_EXP 14
60443: NOT
60444: IFFALSE 60448
// exit ;
60446: GO 60626
// for i = 1 to mc_bases do
60448: LD_ADDR_VAR 0 2
60452: PUSH
60453: DOUBLE
60454: LD_INT 1
60456: DEC
60457: ST_TO_ADDR
60458: LD_EXP 14
60462: PUSH
60463: FOR_TO
60464: IFFALSE 60624
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
60466: LD_ADDR_VAR 0 4
60470: PUSH
60471: LD_EXP 14
60475: PUSH
60476: LD_VAR 0 2
60480: ARRAY
60481: PPUSH
60482: LD_INT 25
60484: PUSH
60485: LD_INT 9
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PPUSH
60492: CALL_OW 72
60496: ST_TO_ADDR
// if not tmp then
60497: LD_VAR 0 4
60501: NOT
60502: IFFALSE 60506
// continue ;
60504: GO 60463
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
60506: LD_EXP 40
60510: PUSH
60511: LD_VAR 0 2
60515: ARRAY
60516: PPUSH
60517: LD_INT 29
60519: PPUSH
60520: CALL_OW 325
60524: NOT
60525: PUSH
60526: LD_EXP 40
60530: PUSH
60531: LD_VAR 0 2
60535: ARRAY
60536: PPUSH
60537: LD_INT 28
60539: PPUSH
60540: CALL_OW 325
60544: NOT
60545: AND
60546: IFFALSE 60550
// continue ;
60548: GO 60463
// for j in tmp do
60550: LD_ADDR_VAR 0 3
60554: PUSH
60555: LD_VAR 0 4
60559: PUSH
60560: FOR_IN
60561: IFFALSE 60620
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
60563: LD_VAR 0 3
60567: PUSH
60568: LD_EXP 17
60572: PUSH
60573: LD_VAR 0 2
60577: ARRAY
60578: PUSH
60579: LD_INT 1
60581: ARRAY
60582: IN
60583: NOT
60584: PUSH
60585: LD_VAR 0 3
60589: PUSH
60590: LD_EXP 17
60594: PUSH
60595: LD_VAR 0 2
60599: ARRAY
60600: PUSH
60601: LD_INT 2
60603: ARRAY
60604: IN
60605: NOT
60606: AND
60607: IFFALSE 60618
// ComSpaceTimeShoot ( j ) ;
60609: LD_VAR 0 3
60613: PPUSH
60614: CALL 5393 0 1
60618: GO 60560
60620: POP
60621: POP
// end ;
60622: GO 60463
60624: POP
60625: POP
// end ;
60626: LD_VAR 0 1
60630: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
60631: LD_INT 0
60633: PPUSH
60634: PPUSH
60635: PPUSH
60636: PPUSH
60637: PPUSH
60638: PPUSH
60639: PPUSH
60640: PPUSH
60641: PPUSH
// if not mc_bases then
60642: LD_EXP 14
60646: NOT
60647: IFFALSE 60651
// exit ;
60649: GO 61273
// for i = 1 to mc_bases do
60651: LD_ADDR_VAR 0 2
60655: PUSH
60656: DOUBLE
60657: LD_INT 1
60659: DEC
60660: ST_TO_ADDR
60661: LD_EXP 14
60665: PUSH
60666: FOR_TO
60667: IFFALSE 61271
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
60669: LD_EXP 49
60673: PUSH
60674: LD_VAR 0 2
60678: ARRAY
60679: NOT
60680: PUSH
60681: LD_INT 38
60683: PPUSH
60684: LD_EXP 40
60688: PUSH
60689: LD_VAR 0 2
60693: ARRAY
60694: PPUSH
60695: CALL_OW 321
60699: PUSH
60700: LD_INT 2
60702: NONEQUAL
60703: OR
60704: IFFALSE 60708
// continue ;
60706: GO 60666
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
60708: LD_ADDR_VAR 0 8
60712: PUSH
60713: LD_EXP 14
60717: PUSH
60718: LD_VAR 0 2
60722: ARRAY
60723: PPUSH
60724: LD_INT 30
60726: PUSH
60727: LD_INT 34
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PPUSH
60734: CALL_OW 72
60738: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
60739: LD_ADDR_VAR 0 9
60743: PUSH
60744: LD_EXP 14
60748: PUSH
60749: LD_VAR 0 2
60753: ARRAY
60754: PPUSH
60755: LD_INT 25
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PPUSH
60765: CALL_OW 72
60769: PPUSH
60770: LD_INT 0
60772: PPUSH
60773: CALL 37957 0 2
60777: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
60778: LD_VAR 0 9
60782: NOT
60783: PUSH
60784: LD_VAR 0 8
60788: NOT
60789: OR
60790: PUSH
60791: LD_EXP 14
60795: PUSH
60796: LD_VAR 0 2
60800: ARRAY
60801: PPUSH
60802: LD_INT 124
60804: PPUSH
60805: CALL 37957 0 2
60809: OR
60810: IFFALSE 60814
// continue ;
60812: GO 60666
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
60814: LD_EXP 50
60818: PUSH
60819: LD_VAR 0 2
60823: ARRAY
60824: PUSH
60825: LD_EXP 49
60829: PUSH
60830: LD_VAR 0 2
60834: ARRAY
60835: LESS
60836: PUSH
60837: LD_EXP 50
60841: PUSH
60842: LD_VAR 0 2
60846: ARRAY
60847: PUSH
60848: LD_VAR 0 8
60852: LESS
60853: AND
60854: IFFALSE 61269
// begin tmp := sci [ 1 ] ;
60856: LD_ADDR_VAR 0 7
60860: PUSH
60861: LD_VAR 0 9
60865: PUSH
60866: LD_INT 1
60868: ARRAY
60869: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
60870: LD_VAR 0 7
60874: PPUSH
60875: LD_INT 124
60877: PPUSH
60878: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
60882: LD_ADDR_VAR 0 3
60886: PUSH
60887: DOUBLE
60888: LD_EXP 49
60892: PUSH
60893: LD_VAR 0 2
60897: ARRAY
60898: INC
60899: ST_TO_ADDR
60900: LD_EXP 49
60904: PUSH
60905: LD_VAR 0 2
60909: ARRAY
60910: PUSH
60911: FOR_DOWNTO
60912: IFFALSE 61255
// begin if IsInUnit ( tmp ) then
60914: LD_VAR 0 7
60918: PPUSH
60919: CALL_OW 310
60923: IFFALSE 60934
// ComExitBuilding ( tmp ) ;
60925: LD_VAR 0 7
60929: PPUSH
60930: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
60934: LD_INT 35
60936: PPUSH
60937: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
60941: LD_VAR 0 7
60945: PPUSH
60946: CALL_OW 310
60950: NOT
60951: PUSH
60952: LD_VAR 0 7
60956: PPUSH
60957: CALL_OW 314
60961: NOT
60962: AND
60963: IFFALSE 60934
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
60965: LD_ADDR_VAR 0 6
60969: PUSH
60970: LD_VAR 0 7
60974: PPUSH
60975: CALL_OW 250
60979: PUSH
60980: LD_VAR 0 7
60984: PPUSH
60985: CALL_OW 251
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60994: LD_INT 35
60996: PPUSH
60997: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
61001: LD_ADDR_VAR 0 4
61005: PUSH
61006: LD_EXP 49
61010: PUSH
61011: LD_VAR 0 2
61015: ARRAY
61016: PUSH
61017: LD_VAR 0 3
61021: ARRAY
61022: PUSH
61023: LD_INT 1
61025: ARRAY
61026: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
61027: LD_ADDR_VAR 0 5
61031: PUSH
61032: LD_EXP 49
61036: PUSH
61037: LD_VAR 0 2
61041: ARRAY
61042: PUSH
61043: LD_VAR 0 3
61047: ARRAY
61048: PUSH
61049: LD_INT 2
61051: ARRAY
61052: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
61053: LD_VAR 0 7
61057: PPUSH
61058: LD_INT 10
61060: PPUSH
61061: CALL 11989 0 2
61065: PUSH
61066: LD_INT 4
61068: ARRAY
61069: IFFALSE 61107
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
61071: LD_VAR 0 7
61075: PPUSH
61076: LD_VAR 0 6
61080: PUSH
61081: LD_INT 1
61083: ARRAY
61084: PPUSH
61085: LD_VAR 0 6
61089: PUSH
61090: LD_INT 2
61092: ARRAY
61093: PPUSH
61094: CALL_OW 111
// wait ( 0 0$10 ) ;
61098: LD_INT 350
61100: PPUSH
61101: CALL_OW 67
// end else
61105: GO 61133
// begin ComMoveXY ( tmp , x , y ) ;
61107: LD_VAR 0 7
61111: PPUSH
61112: LD_VAR 0 4
61116: PPUSH
61117: LD_VAR 0 5
61121: PPUSH
61122: CALL_OW 111
// wait ( 0 0$3 ) ;
61126: LD_INT 105
61128: PPUSH
61129: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
61133: LD_VAR 0 7
61137: PPUSH
61138: LD_VAR 0 4
61142: PPUSH
61143: LD_VAR 0 5
61147: PPUSH
61148: CALL_OW 307
61152: IFFALSE 60994
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
61154: LD_VAR 0 7
61158: PPUSH
61159: LD_VAR 0 4
61163: PPUSH
61164: LD_VAR 0 5
61168: PPUSH
61169: LD_VAR 0 8
61173: PUSH
61174: LD_VAR 0 3
61178: ARRAY
61179: PPUSH
61180: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
61184: LD_INT 35
61186: PPUSH
61187: CALL_OW 67
// until not HasTask ( tmp ) ;
61191: LD_VAR 0 7
61195: PPUSH
61196: CALL_OW 314
61200: NOT
61201: IFFALSE 61184
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
61203: LD_ADDR_EXP 50
61207: PUSH
61208: LD_EXP 50
61212: PPUSH
61213: LD_VAR 0 2
61217: PUSH
61218: LD_EXP 50
61222: PUSH
61223: LD_VAR 0 2
61227: ARRAY
61228: PUSH
61229: LD_INT 1
61231: PLUS
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PPUSH
61237: LD_VAR 0 8
61241: PUSH
61242: LD_VAR 0 3
61246: ARRAY
61247: PPUSH
61248: CALL 9396 0 3
61252: ST_TO_ADDR
// end ;
61253: GO 60911
61255: POP
61256: POP
// MC_Reset ( i , 124 ) ;
61257: LD_VAR 0 2
61261: PPUSH
61262: LD_INT 124
61264: PPUSH
61265: CALL 44876 0 2
// end ; end ;
61269: GO 60666
61271: POP
61272: POP
// end ;
61273: LD_VAR 0 1
61277: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
61278: LD_INT 0
61280: PPUSH
61281: PPUSH
61282: PPUSH
// if not mc_bases then
61283: LD_EXP 14
61287: NOT
61288: IFFALSE 61292
// exit ;
61290: GO 61898
// for i = 1 to mc_bases do
61292: LD_ADDR_VAR 0 2
61296: PUSH
61297: DOUBLE
61298: LD_INT 1
61300: DEC
61301: ST_TO_ADDR
61302: LD_EXP 14
61306: PUSH
61307: FOR_TO
61308: IFFALSE 61896
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_EXP 14
61319: PUSH
61320: LD_VAR 0 2
61324: ARRAY
61325: PPUSH
61326: LD_INT 25
61328: PUSH
61329: LD_INT 4
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PPUSH
61336: CALL_OW 72
61340: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
61341: LD_VAR 0 3
61345: NOT
61346: PUSH
61347: LD_EXP 51
61351: PUSH
61352: LD_VAR 0 2
61356: ARRAY
61357: NOT
61358: OR
61359: PUSH
61360: LD_EXP 14
61364: PUSH
61365: LD_VAR 0 2
61369: ARRAY
61370: PPUSH
61371: LD_INT 2
61373: PUSH
61374: LD_INT 30
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 30
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: PPUSH
61399: CALL_OW 72
61403: NOT
61404: OR
61405: IFFALSE 61455
// begin if mc_deposits_finder [ i ] then
61407: LD_EXP 52
61411: PUSH
61412: LD_VAR 0 2
61416: ARRAY
61417: IFFALSE 61453
// begin MC_Reset ( i , 125 ) ;
61419: LD_VAR 0 2
61423: PPUSH
61424: LD_INT 125
61426: PPUSH
61427: CALL 44876 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61431: LD_ADDR_EXP 52
61435: PUSH
61436: LD_EXP 52
61440: PPUSH
61441: LD_VAR 0 2
61445: PPUSH
61446: EMPTY
61447: PPUSH
61448: CALL_OW 1
61452: ST_TO_ADDR
// end ; continue ;
61453: GO 61307
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
61455: LD_EXP 51
61459: PUSH
61460: LD_VAR 0 2
61464: ARRAY
61465: PUSH
61466: LD_INT 1
61468: ARRAY
61469: PUSH
61470: LD_INT 3
61472: ARRAY
61473: PUSH
61474: LD_INT 1
61476: EQUAL
61477: PUSH
61478: LD_INT 20
61480: PPUSH
61481: LD_EXP 40
61485: PUSH
61486: LD_VAR 0 2
61490: ARRAY
61491: PPUSH
61492: CALL_OW 321
61496: PUSH
61497: LD_INT 2
61499: NONEQUAL
61500: AND
61501: IFFALSE 61551
// begin if mc_deposits_finder [ i ] then
61503: LD_EXP 52
61507: PUSH
61508: LD_VAR 0 2
61512: ARRAY
61513: IFFALSE 61549
// begin MC_Reset ( i , 125 ) ;
61515: LD_VAR 0 2
61519: PPUSH
61520: LD_INT 125
61522: PPUSH
61523: CALL 44876 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61527: LD_ADDR_EXP 52
61531: PUSH
61532: LD_EXP 52
61536: PPUSH
61537: LD_VAR 0 2
61541: PPUSH
61542: EMPTY
61543: PPUSH
61544: CALL_OW 1
61548: ST_TO_ADDR
// end ; continue ;
61549: GO 61307
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
61551: LD_EXP 51
61555: PUSH
61556: LD_VAR 0 2
61560: ARRAY
61561: PUSH
61562: LD_INT 1
61564: ARRAY
61565: PUSH
61566: LD_INT 1
61568: ARRAY
61569: PPUSH
61570: LD_EXP 51
61574: PUSH
61575: LD_VAR 0 2
61579: ARRAY
61580: PUSH
61581: LD_INT 1
61583: ARRAY
61584: PUSH
61585: LD_INT 2
61587: ARRAY
61588: PPUSH
61589: LD_EXP 40
61593: PUSH
61594: LD_VAR 0 2
61598: ARRAY
61599: PPUSH
61600: CALL_OW 440
61604: IFFALSE 61647
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
61606: LD_ADDR_EXP 51
61610: PUSH
61611: LD_EXP 51
61615: PPUSH
61616: LD_VAR 0 2
61620: PPUSH
61621: LD_EXP 51
61625: PUSH
61626: LD_VAR 0 2
61630: ARRAY
61631: PPUSH
61632: LD_INT 1
61634: PPUSH
61635: CALL_OW 3
61639: PPUSH
61640: CALL_OW 1
61644: ST_TO_ADDR
61645: GO 61894
// begin if not mc_deposits_finder [ i ] then
61647: LD_EXP 52
61651: PUSH
61652: LD_VAR 0 2
61656: ARRAY
61657: NOT
61658: IFFALSE 61710
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
61660: LD_ADDR_EXP 52
61664: PUSH
61665: LD_EXP 52
61669: PPUSH
61670: LD_VAR 0 2
61674: PPUSH
61675: LD_VAR 0 3
61679: PUSH
61680: LD_INT 1
61682: ARRAY
61683: PUSH
61684: EMPTY
61685: LIST
61686: PPUSH
61687: CALL_OW 1
61691: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
61692: LD_VAR 0 3
61696: PUSH
61697: LD_INT 1
61699: ARRAY
61700: PPUSH
61701: LD_INT 125
61703: PPUSH
61704: CALL_OW 109
// end else
61708: GO 61894
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
61710: LD_EXP 52
61714: PUSH
61715: LD_VAR 0 2
61719: ARRAY
61720: PUSH
61721: LD_INT 1
61723: ARRAY
61724: PPUSH
61725: CALL_OW 310
61729: IFFALSE 61752
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
61731: LD_EXP 52
61735: PUSH
61736: LD_VAR 0 2
61740: ARRAY
61741: PUSH
61742: LD_INT 1
61744: ARRAY
61745: PPUSH
61746: CALL_OW 122
61750: GO 61894
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
61752: LD_EXP 52
61756: PUSH
61757: LD_VAR 0 2
61761: ARRAY
61762: PUSH
61763: LD_INT 1
61765: ARRAY
61766: PPUSH
61767: CALL_OW 314
61771: NOT
61772: PUSH
61773: LD_EXP 52
61777: PUSH
61778: LD_VAR 0 2
61782: ARRAY
61783: PUSH
61784: LD_INT 1
61786: ARRAY
61787: PPUSH
61788: LD_EXP 51
61792: PUSH
61793: LD_VAR 0 2
61797: ARRAY
61798: PUSH
61799: LD_INT 1
61801: ARRAY
61802: PUSH
61803: LD_INT 1
61805: ARRAY
61806: PPUSH
61807: LD_EXP 51
61811: PUSH
61812: LD_VAR 0 2
61816: ARRAY
61817: PUSH
61818: LD_INT 1
61820: ARRAY
61821: PUSH
61822: LD_INT 2
61824: ARRAY
61825: PPUSH
61826: CALL_OW 297
61830: PUSH
61831: LD_INT 6
61833: GREATER
61834: AND
61835: IFFALSE 61894
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
61837: LD_EXP 52
61841: PUSH
61842: LD_VAR 0 2
61846: ARRAY
61847: PUSH
61848: LD_INT 1
61850: ARRAY
61851: PPUSH
61852: LD_EXP 51
61856: PUSH
61857: LD_VAR 0 2
61861: ARRAY
61862: PUSH
61863: LD_INT 1
61865: ARRAY
61866: PUSH
61867: LD_INT 1
61869: ARRAY
61870: PPUSH
61871: LD_EXP 51
61875: PUSH
61876: LD_VAR 0 2
61880: ARRAY
61881: PUSH
61882: LD_INT 1
61884: ARRAY
61885: PUSH
61886: LD_INT 2
61888: ARRAY
61889: PPUSH
61890: CALL_OW 111
// end ; end ; end ;
61894: GO 61307
61896: POP
61897: POP
// end ;
61898: LD_VAR 0 1
61902: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
61903: LD_INT 0
61905: PPUSH
61906: PPUSH
61907: PPUSH
61908: PPUSH
61909: PPUSH
61910: PPUSH
61911: PPUSH
61912: PPUSH
61913: PPUSH
61914: PPUSH
61915: PPUSH
// if not mc_bases then
61916: LD_EXP 14
61920: NOT
61921: IFFALSE 61925
// exit ;
61923: GO 62865
// for i = 1 to mc_bases do
61925: LD_ADDR_VAR 0 2
61929: PUSH
61930: DOUBLE
61931: LD_INT 1
61933: DEC
61934: ST_TO_ADDR
61935: LD_EXP 14
61939: PUSH
61940: FOR_TO
61941: IFFALSE 62863
// begin if not mc_bases [ i ] or mc_scan [ i ] then
61943: LD_EXP 14
61947: PUSH
61948: LD_VAR 0 2
61952: ARRAY
61953: NOT
61954: PUSH
61955: LD_EXP 37
61959: PUSH
61960: LD_VAR 0 2
61964: ARRAY
61965: OR
61966: IFFALSE 61970
// continue ;
61968: GO 61940
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
61970: LD_ADDR_VAR 0 7
61974: PUSH
61975: LD_EXP 14
61979: PUSH
61980: LD_VAR 0 2
61984: ARRAY
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PPUSH
61990: CALL_OW 248
61994: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
61995: LD_VAR 0 7
61999: PUSH
62000: LD_INT 3
62002: EQUAL
62003: PUSH
62004: LD_EXP 33
62008: PUSH
62009: LD_VAR 0 2
62013: ARRAY
62014: PUSH
62015: LD_EXP 36
62019: PUSH
62020: LD_VAR 0 2
62024: ARRAY
62025: UNION
62026: PPUSH
62027: LD_INT 33
62029: PUSH
62030: LD_INT 2
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PPUSH
62037: CALL_OW 72
62041: NOT
62042: OR
62043: IFFALSE 62047
// continue ;
62045: GO 61940
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
62047: LD_ADDR_VAR 0 9
62051: PUSH
62052: LD_EXP 14
62056: PUSH
62057: LD_VAR 0 2
62061: ARRAY
62062: PPUSH
62063: LD_INT 30
62065: PUSH
62066: LD_INT 36
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PPUSH
62073: CALL_OW 72
62077: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
62078: LD_ADDR_VAR 0 10
62082: PUSH
62083: LD_EXP 33
62087: PUSH
62088: LD_VAR 0 2
62092: ARRAY
62093: PPUSH
62094: LD_INT 34
62096: PUSH
62097: LD_INT 31
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PPUSH
62104: CALL_OW 72
62108: ST_TO_ADDR
// if not cts and not mcts then
62109: LD_VAR 0 9
62113: NOT
62114: PUSH
62115: LD_VAR 0 10
62119: NOT
62120: AND
62121: IFFALSE 62125
// continue ;
62123: GO 61940
// x := cts ;
62125: LD_ADDR_VAR 0 11
62129: PUSH
62130: LD_VAR 0 9
62134: ST_TO_ADDR
// if not x then
62135: LD_VAR 0 11
62139: NOT
62140: IFFALSE 62152
// x := mcts ;
62142: LD_ADDR_VAR 0 11
62146: PUSH
62147: LD_VAR 0 10
62151: ST_TO_ADDR
// if not x then
62152: LD_VAR 0 11
62156: NOT
62157: IFFALSE 62161
// continue ;
62159: GO 61940
// if mc_remote_driver [ i ] then
62161: LD_EXP 54
62165: PUSH
62166: LD_VAR 0 2
62170: ARRAY
62171: IFFALSE 62558
// for j in mc_remote_driver [ i ] do
62173: LD_ADDR_VAR 0 3
62177: PUSH
62178: LD_EXP 54
62182: PUSH
62183: LD_VAR 0 2
62187: ARRAY
62188: PUSH
62189: FOR_IN
62190: IFFALSE 62556
// begin if GetClass ( j ) <> 3 then
62192: LD_VAR 0 3
62196: PPUSH
62197: CALL_OW 257
62201: PUSH
62202: LD_INT 3
62204: NONEQUAL
62205: IFFALSE 62258
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
62207: LD_ADDR_EXP 54
62211: PUSH
62212: LD_EXP 54
62216: PPUSH
62217: LD_VAR 0 2
62221: PPUSH
62222: LD_EXP 54
62226: PUSH
62227: LD_VAR 0 2
62231: ARRAY
62232: PUSH
62233: LD_VAR 0 3
62237: DIFF
62238: PPUSH
62239: CALL_OW 1
62243: ST_TO_ADDR
// SetTag ( j , 0 ) ;
62244: LD_VAR 0 3
62248: PPUSH
62249: LD_INT 0
62251: PPUSH
62252: CALL_OW 109
// continue ;
62256: GO 62189
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
62258: LD_EXP 33
62262: PUSH
62263: LD_VAR 0 2
62267: ARRAY
62268: PPUSH
62269: LD_INT 34
62271: PUSH
62272: LD_INT 31
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 58
62281: PUSH
62282: EMPTY
62283: LIST
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PPUSH
62289: CALL_OW 72
62293: PUSH
62294: LD_VAR 0 3
62298: PPUSH
62299: CALL 38045 0 1
62303: NOT
62304: AND
62305: IFFALSE 62376
// begin if IsInUnit ( j ) then
62307: LD_VAR 0 3
62311: PPUSH
62312: CALL_OW 310
62316: IFFALSE 62327
// ComExitBuilding ( j ) ;
62318: LD_VAR 0 3
62322: PPUSH
62323: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
62327: LD_VAR 0 3
62331: PPUSH
62332: LD_EXP 33
62336: PUSH
62337: LD_VAR 0 2
62341: ARRAY
62342: PPUSH
62343: LD_INT 34
62345: PUSH
62346: LD_INT 31
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 58
62355: PUSH
62356: EMPTY
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PPUSH
62363: CALL_OW 72
62367: PUSH
62368: LD_INT 1
62370: ARRAY
62371: PPUSH
62372: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
62376: LD_VAR 0 3
62380: PPUSH
62381: CALL_OW 310
62385: NOT
62386: PUSH
62387: LD_VAR 0 3
62391: PPUSH
62392: CALL_OW 310
62396: PPUSH
62397: CALL_OW 266
62401: PUSH
62402: LD_INT 36
62404: NONEQUAL
62405: PUSH
62406: LD_VAR 0 3
62410: PPUSH
62411: CALL 38045 0 1
62415: NOT
62416: AND
62417: OR
62418: IFFALSE 62554
// begin if IsInUnit ( j ) then
62420: LD_VAR 0 3
62424: PPUSH
62425: CALL_OW 310
62429: IFFALSE 62440
// ComExitBuilding ( j ) ;
62431: LD_VAR 0 3
62435: PPUSH
62436: CALL_OW 122
// ct := 0 ;
62440: LD_ADDR_VAR 0 8
62444: PUSH
62445: LD_INT 0
62447: ST_TO_ADDR
// for k in x do
62448: LD_ADDR_VAR 0 4
62452: PUSH
62453: LD_VAR 0 11
62457: PUSH
62458: FOR_IN
62459: IFFALSE 62532
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
62461: LD_VAR 0 4
62465: PPUSH
62466: CALL_OW 264
62470: PUSH
62471: LD_INT 31
62473: EQUAL
62474: PUSH
62475: LD_VAR 0 4
62479: PPUSH
62480: CALL_OW 311
62484: NOT
62485: AND
62486: PUSH
62487: LD_VAR 0 4
62491: PPUSH
62492: CALL_OW 266
62496: PUSH
62497: LD_INT 36
62499: EQUAL
62500: PUSH
62501: LD_VAR 0 4
62505: PPUSH
62506: CALL_OW 313
62510: PUSH
62511: LD_INT 3
62513: LESS
62514: AND
62515: OR
62516: IFFALSE 62530
// begin ct := k ;
62518: LD_ADDR_VAR 0 8
62522: PUSH
62523: LD_VAR 0 4
62527: ST_TO_ADDR
// break ;
62528: GO 62532
// end ;
62530: GO 62458
62532: POP
62533: POP
// if ct then
62534: LD_VAR 0 8
62538: IFFALSE 62554
// ComEnterUnit ( j , ct ) ;
62540: LD_VAR 0 3
62544: PPUSH
62545: LD_VAR 0 8
62549: PPUSH
62550: CALL_OW 120
// end ; end ;
62554: GO 62189
62556: POP
62557: POP
// places := 0 ;
62558: LD_ADDR_VAR 0 5
62562: PUSH
62563: LD_INT 0
62565: ST_TO_ADDR
// for j = 1 to x do
62566: LD_ADDR_VAR 0 3
62570: PUSH
62571: DOUBLE
62572: LD_INT 1
62574: DEC
62575: ST_TO_ADDR
62576: LD_VAR 0 11
62580: PUSH
62581: FOR_TO
62582: IFFALSE 62658
// if GetWeapon ( x [ j ] ) = ar_control_tower then
62584: LD_VAR 0 11
62588: PUSH
62589: LD_VAR 0 3
62593: ARRAY
62594: PPUSH
62595: CALL_OW 264
62599: PUSH
62600: LD_INT 31
62602: EQUAL
62603: IFFALSE 62621
// places := places + 1 else
62605: LD_ADDR_VAR 0 5
62609: PUSH
62610: LD_VAR 0 5
62614: PUSH
62615: LD_INT 1
62617: PLUS
62618: ST_TO_ADDR
62619: GO 62656
// if GetBType ( x [ j ] ) = b_control_tower then
62621: LD_VAR 0 11
62625: PUSH
62626: LD_VAR 0 3
62630: ARRAY
62631: PPUSH
62632: CALL_OW 266
62636: PUSH
62637: LD_INT 36
62639: EQUAL
62640: IFFALSE 62656
// places := places + 3 ;
62642: LD_ADDR_VAR 0 5
62646: PUSH
62647: LD_VAR 0 5
62651: PUSH
62652: LD_INT 3
62654: PLUS
62655: ST_TO_ADDR
62656: GO 62581
62658: POP
62659: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
62660: LD_VAR 0 5
62664: PUSH
62665: LD_INT 0
62667: EQUAL
62668: PUSH
62669: LD_VAR 0 5
62673: PUSH
62674: LD_EXP 54
62678: PUSH
62679: LD_VAR 0 2
62683: ARRAY
62684: LESSEQUAL
62685: OR
62686: IFFALSE 62690
// continue ;
62688: GO 61940
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
62690: LD_ADDR_VAR 0 6
62694: PUSH
62695: LD_EXP 14
62699: PUSH
62700: LD_VAR 0 2
62704: ARRAY
62705: PPUSH
62706: LD_INT 25
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PPUSH
62716: CALL_OW 72
62720: PUSH
62721: LD_EXP 54
62725: PUSH
62726: LD_VAR 0 2
62730: ARRAY
62731: DIFF
62732: PPUSH
62733: LD_INT 3
62735: PPUSH
62736: CALL 38945 0 2
62740: ST_TO_ADDR
// for j in tmp do
62741: LD_ADDR_VAR 0 3
62745: PUSH
62746: LD_VAR 0 6
62750: PUSH
62751: FOR_IN
62752: IFFALSE 62787
// if GetTag ( j ) > 0 then
62754: LD_VAR 0 3
62758: PPUSH
62759: CALL_OW 110
62763: PUSH
62764: LD_INT 0
62766: GREATER
62767: IFFALSE 62785
// tmp := tmp diff j ;
62769: LD_ADDR_VAR 0 6
62773: PUSH
62774: LD_VAR 0 6
62778: PUSH
62779: LD_VAR 0 3
62783: DIFF
62784: ST_TO_ADDR
62785: GO 62751
62787: POP
62788: POP
// if not tmp then
62789: LD_VAR 0 6
62793: NOT
62794: IFFALSE 62798
// continue ;
62796: GO 61940
// if places then
62798: LD_VAR 0 5
62802: IFFALSE 62861
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
62804: LD_ADDR_EXP 54
62808: PUSH
62809: LD_EXP 54
62813: PPUSH
62814: LD_VAR 0 2
62818: PPUSH
62819: LD_EXP 54
62823: PUSH
62824: LD_VAR 0 2
62828: ARRAY
62829: PUSH
62830: LD_VAR 0 6
62834: PUSH
62835: LD_INT 1
62837: ARRAY
62838: UNION
62839: PPUSH
62840: CALL_OW 1
62844: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
62845: LD_VAR 0 6
62849: PUSH
62850: LD_INT 1
62852: ARRAY
62853: PPUSH
62854: LD_INT 126
62856: PPUSH
62857: CALL_OW 109
// end ; end ;
62861: GO 61940
62863: POP
62864: POP
// end ;
62865: LD_VAR 0 1
62869: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
62870: LD_INT 0
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
62878: LD_VAR 0 1
62882: NOT
62883: PUSH
62884: LD_VAR 0 2
62888: NOT
62889: OR
62890: PUSH
62891: LD_VAR 0 3
62895: NOT
62896: OR
62897: PUSH
62898: LD_VAR 0 4
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: LD_INT 4
62914: PUSH
62915: LD_INT 5
62917: PUSH
62918: LD_INT 8
62920: PUSH
62921: LD_INT 9
62923: PUSH
62924: LD_INT 15
62926: PUSH
62927: LD_INT 16
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: IN
62941: NOT
62942: OR
62943: IFFALSE 62947
// exit ;
62945: GO 63847
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
62947: LD_ADDR_VAR 0 2
62951: PUSH
62952: LD_VAR 0 2
62956: PPUSH
62957: LD_INT 21
62959: PUSH
62960: LD_INT 3
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 24
62969: PUSH
62970: LD_INT 250
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PPUSH
62981: CALL_OW 72
62985: ST_TO_ADDR
// case class of 1 , 15 :
62986: LD_VAR 0 4
62990: PUSH
62991: LD_INT 1
62993: DOUBLE
62994: EQUAL
62995: IFTRUE 63005
62997: LD_INT 15
62999: DOUBLE
63000: EQUAL
63001: IFTRUE 63005
63003: GO 63090
63005: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
63006: LD_ADDR_VAR 0 8
63010: PUSH
63011: LD_VAR 0 2
63015: PPUSH
63016: LD_INT 2
63018: PUSH
63019: LD_INT 30
63021: PUSH
63022: LD_INT 32
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 30
63031: PUSH
63032: LD_INT 31
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: LIST
63043: PPUSH
63044: CALL_OW 72
63048: PUSH
63049: LD_VAR 0 2
63053: PPUSH
63054: LD_INT 2
63056: PUSH
63057: LD_INT 30
63059: PUSH
63060: LD_INT 4
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 30
63069: PUSH
63070: LD_INT 5
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: PPUSH
63082: CALL_OW 72
63086: ADD
63087: ST_TO_ADDR
63088: GO 63336
63090: LD_INT 2
63092: DOUBLE
63093: EQUAL
63094: IFTRUE 63104
63096: LD_INT 16
63098: DOUBLE
63099: EQUAL
63100: IFTRUE 63104
63102: GO 63150
63104: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
63105: LD_ADDR_VAR 0 8
63109: PUSH
63110: LD_VAR 0 2
63114: PPUSH
63115: LD_INT 2
63117: PUSH
63118: LD_INT 30
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 30
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: LIST
63142: PPUSH
63143: CALL_OW 72
63147: ST_TO_ADDR
63148: GO 63336
63150: LD_INT 3
63152: DOUBLE
63153: EQUAL
63154: IFTRUE 63158
63156: GO 63204
63158: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
63159: LD_ADDR_VAR 0 8
63163: PUSH
63164: LD_VAR 0 2
63168: PPUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 30
63174: PUSH
63175: LD_INT 2
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 30
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: PPUSH
63197: CALL_OW 72
63201: ST_TO_ADDR
63202: GO 63336
63204: LD_INT 4
63206: DOUBLE
63207: EQUAL
63208: IFTRUE 63212
63210: GO 63269
63212: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
63213: LD_ADDR_VAR 0 8
63217: PUSH
63218: LD_VAR 0 2
63222: PPUSH
63223: LD_INT 2
63225: PUSH
63226: LD_INT 30
63228: PUSH
63229: LD_INT 6
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 30
63238: PUSH
63239: LD_INT 7
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 30
63248: PUSH
63249: LD_INT 8
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: PPUSH
63262: CALL_OW 72
63266: ST_TO_ADDR
63267: GO 63336
63269: LD_INT 5
63271: DOUBLE
63272: EQUAL
63273: IFTRUE 63289
63275: LD_INT 8
63277: DOUBLE
63278: EQUAL
63279: IFTRUE 63289
63281: LD_INT 9
63283: DOUBLE
63284: EQUAL
63285: IFTRUE 63289
63287: GO 63335
63289: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
63290: LD_ADDR_VAR 0 8
63294: PUSH
63295: LD_VAR 0 2
63299: PPUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 30
63305: PUSH
63306: LD_INT 4
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 30
63315: PUSH
63316: LD_INT 5
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: PPUSH
63328: CALL_OW 72
63332: ST_TO_ADDR
63333: GO 63336
63335: POP
// if not tmp then
63336: LD_VAR 0 8
63340: NOT
63341: IFFALSE 63345
// exit ;
63343: GO 63847
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
63345: LD_VAR 0 4
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: LD_INT 15
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: IN
63360: PUSH
63361: LD_EXP 23
63365: PUSH
63366: LD_VAR 0 1
63370: ARRAY
63371: AND
63372: IFFALSE 63528
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
63374: LD_ADDR_VAR 0 9
63378: PUSH
63379: LD_EXP 23
63383: PUSH
63384: LD_VAR 0 1
63388: ARRAY
63389: PUSH
63390: LD_INT 1
63392: ARRAY
63393: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
63394: LD_VAR 0 9
63398: PUSH
63399: LD_EXP 24
63403: PUSH
63404: LD_VAR 0 1
63408: ARRAY
63409: IN
63410: NOT
63411: IFFALSE 63526
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
63413: LD_ADDR_EXP 24
63417: PUSH
63418: LD_EXP 24
63422: PPUSH
63423: LD_VAR 0 1
63427: PUSH
63428: LD_EXP 24
63432: PUSH
63433: LD_VAR 0 1
63437: ARRAY
63438: PUSH
63439: LD_INT 1
63441: PLUS
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PPUSH
63447: LD_VAR 0 9
63451: PPUSH
63452: CALL 9396 0 3
63456: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
63457: LD_ADDR_EXP 23
63461: PUSH
63462: LD_EXP 23
63466: PPUSH
63467: LD_VAR 0 1
63471: PPUSH
63472: LD_EXP 23
63476: PUSH
63477: LD_VAR 0 1
63481: ARRAY
63482: PUSH
63483: LD_VAR 0 9
63487: DIFF
63488: PPUSH
63489: CALL_OW 1
63493: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
63494: LD_VAR 0 3
63498: PPUSH
63499: LD_EXP 24
63503: PUSH
63504: LD_VAR 0 1
63508: ARRAY
63509: PUSH
63510: LD_EXP 24
63514: PUSH
63515: LD_VAR 0 1
63519: ARRAY
63520: ARRAY
63521: PPUSH
63522: CALL_OW 120
// end ; exit ;
63526: GO 63847
// end ; if tmp > 1 then
63528: LD_VAR 0 8
63532: PUSH
63533: LD_INT 1
63535: GREATER
63536: IFFALSE 63640
// for i = 2 to tmp do
63538: LD_ADDR_VAR 0 6
63542: PUSH
63543: DOUBLE
63544: LD_INT 2
63546: DEC
63547: ST_TO_ADDR
63548: LD_VAR 0 8
63552: PUSH
63553: FOR_TO
63554: IFFALSE 63638
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
63556: LD_VAR 0 8
63560: PUSH
63561: LD_VAR 0 6
63565: ARRAY
63566: PPUSH
63567: CALL_OW 461
63571: PUSH
63572: LD_INT 6
63574: EQUAL
63575: IFFALSE 63636
// begin x := tmp [ i ] ;
63577: LD_ADDR_VAR 0 9
63581: PUSH
63582: LD_VAR 0 8
63586: PUSH
63587: LD_VAR 0 6
63591: ARRAY
63592: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
63593: LD_ADDR_VAR 0 8
63597: PUSH
63598: LD_VAR 0 8
63602: PPUSH
63603: LD_VAR 0 6
63607: PPUSH
63608: CALL_OW 3
63612: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
63613: LD_ADDR_VAR 0 8
63617: PUSH
63618: LD_VAR 0 8
63622: PPUSH
63623: LD_INT 1
63625: PPUSH
63626: LD_VAR 0 9
63630: PPUSH
63631: CALL_OW 2
63635: ST_TO_ADDR
// end ;
63636: GO 63553
63638: POP
63639: POP
// for i in tmp do
63640: LD_ADDR_VAR 0 6
63644: PUSH
63645: LD_VAR 0 8
63649: PUSH
63650: FOR_IN
63651: IFFALSE 63720
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
63653: LD_VAR 0 6
63657: PPUSH
63658: CALL_OW 313
63662: PUSH
63663: LD_INT 6
63665: LESS
63666: PUSH
63667: LD_VAR 0 6
63671: PPUSH
63672: CALL_OW 266
63676: PUSH
63677: LD_INT 31
63679: PUSH
63680: LD_INT 32
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: IN
63687: NOT
63688: AND
63689: PUSH
63690: LD_VAR 0 6
63694: PPUSH
63695: CALL_OW 313
63699: PUSH
63700: LD_INT 0
63702: EQUAL
63703: OR
63704: IFFALSE 63718
// begin j := i ;
63706: LD_ADDR_VAR 0 7
63710: PUSH
63711: LD_VAR 0 6
63715: ST_TO_ADDR
// break ;
63716: GO 63720
// end ; end ;
63718: GO 63650
63720: POP
63721: POP
// if j then
63722: LD_VAR 0 7
63726: IFFALSE 63744
// ComEnterUnit ( unit , j ) else
63728: LD_VAR 0 3
63732: PPUSH
63733: LD_VAR 0 7
63737: PPUSH
63738: CALL_OW 120
63742: GO 63847
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63744: LD_ADDR_VAR 0 10
63748: PUSH
63749: LD_VAR 0 2
63753: PPUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 30
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 30
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: LIST
63781: PPUSH
63782: CALL_OW 72
63786: ST_TO_ADDR
// if depot then
63787: LD_VAR 0 10
63791: IFFALSE 63847
// begin depot := NearestUnitToUnit ( depot , unit ) ;
63793: LD_ADDR_VAR 0 10
63797: PUSH
63798: LD_VAR 0 10
63802: PPUSH
63803: LD_VAR 0 3
63807: PPUSH
63808: CALL_OW 74
63812: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
63813: LD_VAR 0 3
63817: PPUSH
63818: LD_VAR 0 10
63822: PPUSH
63823: CALL_OW 296
63827: PUSH
63828: LD_INT 10
63830: GREATER
63831: IFFALSE 63847
// ComStandNearbyBuilding ( unit , depot ) ;
63833: LD_VAR 0 3
63837: PPUSH
63838: LD_VAR 0 10
63842: PPUSH
63843: CALL 6010 0 2
// end ; end ; end ;
63847: LD_VAR 0 5
63851: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
63852: LD_INT 0
63854: PPUSH
63855: PPUSH
63856: PPUSH
63857: PPUSH
// if not mc_bases then
63858: LD_EXP 14
63862: NOT
63863: IFFALSE 63867
// exit ;
63865: GO 64106
// for i = 1 to mc_bases do
63867: LD_ADDR_VAR 0 2
63871: PUSH
63872: DOUBLE
63873: LD_INT 1
63875: DEC
63876: ST_TO_ADDR
63877: LD_EXP 14
63881: PUSH
63882: FOR_TO
63883: IFFALSE 64104
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
63885: LD_ADDR_VAR 0 4
63889: PUSH
63890: LD_EXP 14
63894: PUSH
63895: LD_VAR 0 2
63899: ARRAY
63900: PPUSH
63901: LD_INT 21
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PPUSH
63911: CALL_OW 72
63915: PUSH
63916: LD_EXP 43
63920: PUSH
63921: LD_VAR 0 2
63925: ARRAY
63926: UNION
63927: ST_TO_ADDR
// if not tmp then
63928: LD_VAR 0 4
63932: NOT
63933: IFFALSE 63937
// continue ;
63935: GO 63882
// for j in tmp do
63937: LD_ADDR_VAR 0 3
63941: PUSH
63942: LD_VAR 0 4
63946: PUSH
63947: FOR_IN
63948: IFFALSE 64100
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
63950: LD_VAR 0 3
63954: PPUSH
63955: CALL_OW 110
63959: NOT
63960: PUSH
63961: LD_VAR 0 3
63965: PPUSH
63966: CALL_OW 314
63970: NOT
63971: AND
63972: PUSH
63973: LD_VAR 0 3
63977: PPUSH
63978: CALL_OW 311
63982: NOT
63983: AND
63984: PUSH
63985: LD_VAR 0 3
63989: PPUSH
63990: CALL_OW 310
63994: NOT
63995: AND
63996: PUSH
63997: LD_VAR 0 3
64001: PUSH
64002: LD_EXP 17
64006: PUSH
64007: LD_VAR 0 2
64011: ARRAY
64012: PUSH
64013: LD_INT 1
64015: ARRAY
64016: IN
64017: NOT
64018: AND
64019: PUSH
64020: LD_VAR 0 3
64024: PUSH
64025: LD_EXP 17
64029: PUSH
64030: LD_VAR 0 2
64034: ARRAY
64035: PUSH
64036: LD_INT 2
64038: ARRAY
64039: IN
64040: NOT
64041: AND
64042: PUSH
64043: LD_VAR 0 3
64047: PUSH
64048: LD_EXP 26
64052: PUSH
64053: LD_VAR 0 2
64057: ARRAY
64058: IN
64059: NOT
64060: AND
64061: IFFALSE 64098
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
64063: LD_VAR 0 2
64067: PPUSH
64068: LD_EXP 14
64072: PUSH
64073: LD_VAR 0 2
64077: ARRAY
64078: PPUSH
64079: LD_VAR 0 3
64083: PPUSH
64084: LD_VAR 0 3
64088: PPUSH
64089: CALL_OW 257
64093: PPUSH
64094: CALL 62870 0 4
// end ;
64098: GO 63947
64100: POP
64101: POP
// end ;
64102: GO 63882
64104: POP
64105: POP
// end ;
64106: LD_VAR 0 1
64110: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
64111: LD_INT 0
64113: PPUSH
64114: PPUSH
64115: PPUSH
64116: PPUSH
64117: PPUSH
64118: PPUSH
// if not mc_bases [ base ] then
64119: LD_EXP 14
64123: PUSH
64124: LD_VAR 0 1
64128: ARRAY
64129: NOT
64130: IFFALSE 64134
// exit ;
64132: GO 64316
// tmp := [ ] ;
64134: LD_ADDR_VAR 0 6
64138: PUSH
64139: EMPTY
64140: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
64141: LD_ADDR_VAR 0 7
64145: PUSH
64146: LD_VAR 0 3
64150: PPUSH
64151: LD_INT 0
64153: PPUSH
64154: CALL_OW 517
64158: ST_TO_ADDR
// if not list then
64159: LD_VAR 0 7
64163: NOT
64164: IFFALSE 64168
// exit ;
64166: GO 64316
// for i = 1 to amount do
64168: LD_ADDR_VAR 0 5
64172: PUSH
64173: DOUBLE
64174: LD_INT 1
64176: DEC
64177: ST_TO_ADDR
64178: LD_VAR 0 2
64182: PUSH
64183: FOR_TO
64184: IFFALSE 64264
// begin x := rand ( 1 , list [ 1 ] ) ;
64186: LD_ADDR_VAR 0 8
64190: PUSH
64191: LD_INT 1
64193: PPUSH
64194: LD_VAR 0 7
64198: PUSH
64199: LD_INT 1
64201: ARRAY
64202: PPUSH
64203: CALL_OW 12
64207: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
64208: LD_ADDR_VAR 0 6
64212: PUSH
64213: LD_VAR 0 6
64217: PPUSH
64218: LD_VAR 0 5
64222: PPUSH
64223: LD_VAR 0 7
64227: PUSH
64228: LD_INT 1
64230: ARRAY
64231: PUSH
64232: LD_VAR 0 8
64236: ARRAY
64237: PUSH
64238: LD_VAR 0 7
64242: PUSH
64243: LD_INT 2
64245: ARRAY
64246: PUSH
64247: LD_VAR 0 8
64251: ARRAY
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PPUSH
64257: CALL_OW 1
64261: ST_TO_ADDR
// end ;
64262: GO 64183
64264: POP
64265: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
64266: LD_ADDR_EXP 27
64270: PUSH
64271: LD_EXP 27
64275: PPUSH
64276: LD_VAR 0 1
64280: PPUSH
64281: LD_VAR 0 6
64285: PPUSH
64286: CALL_OW 1
64290: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
64291: LD_ADDR_EXP 29
64295: PUSH
64296: LD_EXP 29
64300: PPUSH
64301: LD_VAR 0 1
64305: PPUSH
64306: LD_VAR 0 3
64310: PPUSH
64311: CALL_OW 1
64315: ST_TO_ADDR
// end ;
64316: LD_VAR 0 4
64320: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
64321: LD_INT 0
64323: PPUSH
// if not mc_bases [ base ] then
64324: LD_EXP 14
64328: PUSH
64329: LD_VAR 0 1
64333: ARRAY
64334: NOT
64335: IFFALSE 64339
// exit ;
64337: GO 64364
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
64339: LD_ADDR_EXP 19
64343: PUSH
64344: LD_EXP 19
64348: PPUSH
64349: LD_VAR 0 1
64353: PPUSH
64354: LD_VAR 0 2
64358: PPUSH
64359: CALL_OW 1
64363: ST_TO_ADDR
// end ;
64364: LD_VAR 0 3
64368: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
64369: LD_INT 0
64371: PPUSH
// if not mc_bases [ base ] then
64372: LD_EXP 14
64376: PUSH
64377: LD_VAR 0 1
64381: ARRAY
64382: NOT
64383: IFFALSE 64387
// exit ;
64385: GO 64424
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
64387: LD_ADDR_EXP 19
64391: PUSH
64392: LD_EXP 19
64396: PPUSH
64397: LD_VAR 0 1
64401: PPUSH
64402: LD_EXP 19
64406: PUSH
64407: LD_VAR 0 1
64411: ARRAY
64412: PUSH
64413: LD_VAR 0 2
64417: UNION
64418: PPUSH
64419: CALL_OW 1
64423: ST_TO_ADDR
// end ;
64424: LD_VAR 0 3
64428: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
64429: LD_INT 0
64431: PPUSH
// if not mc_bases [ base ] then
64432: LD_EXP 14
64436: PUSH
64437: LD_VAR 0 1
64441: ARRAY
64442: NOT
64443: IFFALSE 64447
// exit ;
64445: GO 64472
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
64447: LD_ADDR_EXP 35
64451: PUSH
64452: LD_EXP 35
64456: PPUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: LD_VAR 0 2
64466: PPUSH
64467: CALL_OW 1
64471: ST_TO_ADDR
// end ;
64472: LD_VAR 0 3
64476: RET
// export function MC_InsertProduceList ( base , components ) ; begin
64477: LD_INT 0
64479: PPUSH
// if not mc_bases [ base ] then
64480: LD_EXP 14
64484: PUSH
64485: LD_VAR 0 1
64489: ARRAY
64490: NOT
64491: IFFALSE 64495
// exit ;
64493: GO 64532
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
64495: LD_ADDR_EXP 35
64499: PUSH
64500: LD_EXP 35
64504: PPUSH
64505: LD_VAR 0 1
64509: PPUSH
64510: LD_EXP 35
64514: PUSH
64515: LD_VAR 0 1
64519: ARRAY
64520: PUSH
64521: LD_VAR 0 2
64525: ADD
64526: PPUSH
64527: CALL_OW 1
64531: ST_TO_ADDR
// end ;
64532: LD_VAR 0 3
64536: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
64537: LD_INT 0
64539: PPUSH
// if not mc_bases [ base ] then
64540: LD_EXP 14
64544: PUSH
64545: LD_VAR 0 1
64549: ARRAY
64550: NOT
64551: IFFALSE 64555
// exit ;
64553: GO 64609
// mc_defender := Replace ( mc_defender , base , deflist ) ;
64555: LD_ADDR_EXP 36
64559: PUSH
64560: LD_EXP 36
64564: PPUSH
64565: LD_VAR 0 1
64569: PPUSH
64570: LD_VAR 0 2
64574: PPUSH
64575: CALL_OW 1
64579: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
64580: LD_ADDR_EXP 25
64584: PUSH
64585: LD_EXP 25
64589: PPUSH
64590: LD_VAR 0 1
64594: PPUSH
64595: LD_VAR 0 2
64599: PUSH
64600: LD_INT 0
64602: PLUS
64603: PPUSH
64604: CALL_OW 1
64608: ST_TO_ADDR
// end ;
64609: LD_VAR 0 3
64613: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
64614: LD_INT 0
64616: PPUSH
// if not mc_bases [ base ] then
64617: LD_EXP 14
64621: PUSH
64622: LD_VAR 0 1
64626: ARRAY
64627: NOT
64628: IFFALSE 64632
// exit ;
64630: GO 64657
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
64632: LD_ADDR_EXP 25
64636: PUSH
64637: LD_EXP 25
64641: PPUSH
64642: LD_VAR 0 1
64646: PPUSH
64647: LD_VAR 0 2
64651: PPUSH
64652: CALL_OW 1
64656: ST_TO_ADDR
// end ;
64657: LD_VAR 0 3
64661: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
64662: LD_INT 0
64664: PPUSH
64665: PPUSH
64666: PPUSH
64667: PPUSH
// if not mc_bases [ base ] then
64668: LD_EXP 14
64672: PUSH
64673: LD_VAR 0 1
64677: ARRAY
64678: NOT
64679: IFFALSE 64683
// exit ;
64681: GO 64748
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
64683: LD_ADDR_EXP 34
64687: PUSH
64688: LD_EXP 34
64692: PPUSH
64693: LD_VAR 0 1
64697: PUSH
64698: LD_EXP 34
64702: PUSH
64703: LD_VAR 0 1
64707: ARRAY
64708: PUSH
64709: LD_INT 1
64711: PLUS
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PPUSH
64717: LD_VAR 0 1
64721: PUSH
64722: LD_VAR 0 2
64726: PUSH
64727: LD_VAR 0 3
64731: PUSH
64732: LD_VAR 0 4
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: PPUSH
64743: CALL 9396 0 3
64747: ST_TO_ADDR
// end ;
64748: LD_VAR 0 5
64752: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
64753: LD_INT 0
64755: PPUSH
// if not mc_bases [ base ] then
64756: LD_EXP 14
64760: PUSH
64761: LD_VAR 0 1
64765: ARRAY
64766: NOT
64767: IFFALSE 64771
// exit ;
64769: GO 64796
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
64771: LD_ADDR_EXP 51
64775: PUSH
64776: LD_EXP 51
64780: PPUSH
64781: LD_VAR 0 1
64785: PPUSH
64786: LD_VAR 0 2
64790: PPUSH
64791: CALL_OW 1
64795: ST_TO_ADDR
// end ;
64796: LD_VAR 0 3
64800: RET
// export function MC_GetMinesField ( base ) ; begin
64801: LD_INT 0
64803: PPUSH
// result := mc_mines [ base ] ;
64804: LD_ADDR_VAR 0 2
64808: PUSH
64809: LD_EXP 27
64813: PUSH
64814: LD_VAR 0 1
64818: ARRAY
64819: ST_TO_ADDR
// end ;
64820: LD_VAR 0 2
64824: RET
// export function MC_GetProduceList ( base ) ; begin
64825: LD_INT 0
64827: PPUSH
// result := mc_produce [ base ] ;
64828: LD_ADDR_VAR 0 2
64832: PUSH
64833: LD_EXP 35
64837: PUSH
64838: LD_VAR 0 1
64842: ARRAY
64843: ST_TO_ADDR
// end ;
64844: LD_VAR 0 2
64848: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
64849: LD_INT 0
64851: PPUSH
64852: PPUSH
// if not mc_bases then
64853: LD_EXP 14
64857: NOT
64858: IFFALSE 64862
// exit ;
64860: GO 64927
// if mc_bases [ base ] then
64862: LD_EXP 14
64866: PUSH
64867: LD_VAR 0 1
64871: ARRAY
64872: IFFALSE 64927
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64874: LD_ADDR_VAR 0 3
64878: PUSH
64879: LD_EXP 14
64883: PUSH
64884: LD_VAR 0 1
64888: ARRAY
64889: PPUSH
64890: LD_INT 30
64892: PUSH
64893: LD_VAR 0 2
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PPUSH
64902: CALL_OW 72
64906: ST_TO_ADDR
// if result then
64907: LD_VAR 0 3
64911: IFFALSE 64927
// result := result [ 1 ] ;
64913: LD_ADDR_VAR 0 3
64917: PUSH
64918: LD_VAR 0 3
64922: PUSH
64923: LD_INT 1
64925: ARRAY
64926: ST_TO_ADDR
// end ; end ;
64927: LD_VAR 0 3
64931: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
64932: LD_INT 0
64934: PPUSH
64935: PPUSH
// if not mc_bases then
64936: LD_EXP 14
64940: NOT
64941: IFFALSE 64945
// exit ;
64943: GO 64990
// if mc_bases [ base ] then
64945: LD_EXP 14
64949: PUSH
64950: LD_VAR 0 1
64954: ARRAY
64955: IFFALSE 64990
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
64957: LD_ADDR_VAR 0 3
64961: PUSH
64962: LD_EXP 14
64966: PUSH
64967: LD_VAR 0 1
64971: ARRAY
64972: PPUSH
64973: LD_INT 30
64975: PUSH
64976: LD_VAR 0 2
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PPUSH
64985: CALL_OW 72
64989: ST_TO_ADDR
// end ;
64990: LD_VAR 0 3
64994: RET
// export function MC_SetTame ( base , area ) ; begin
64995: LD_INT 0
64997: PPUSH
// if not mc_bases or not base then
64998: LD_EXP 14
65002: NOT
65003: PUSH
65004: LD_VAR 0 1
65008: NOT
65009: OR
65010: IFFALSE 65014
// exit ;
65012: GO 65039
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
65014: LD_ADDR_EXP 42
65018: PUSH
65019: LD_EXP 42
65023: PPUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: LD_VAR 0 2
65033: PPUSH
65034: CALL_OW 1
65038: ST_TO_ADDR
// end ;
65039: LD_VAR 0 3
65043: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
65044: LD_INT 0
65046: PPUSH
65047: PPUSH
// if not mc_bases or not base then
65048: LD_EXP 14
65052: NOT
65053: PUSH
65054: LD_VAR 0 1
65058: NOT
65059: OR
65060: IFFALSE 65064
// exit ;
65062: GO 65166
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
65064: LD_ADDR_VAR 0 4
65068: PUSH
65069: LD_EXP 14
65073: PUSH
65074: LD_VAR 0 1
65078: ARRAY
65079: PPUSH
65080: LD_INT 30
65082: PUSH
65083: LD_VAR 0 2
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PPUSH
65092: CALL_OW 72
65096: ST_TO_ADDR
// if not tmp then
65097: LD_VAR 0 4
65101: NOT
65102: IFFALSE 65106
// exit ;
65104: GO 65166
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
65106: LD_ADDR_EXP 46
65110: PUSH
65111: LD_EXP 46
65115: PPUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: LD_EXP 46
65125: PUSH
65126: LD_VAR 0 1
65130: ARRAY
65131: PPUSH
65132: LD_EXP 46
65136: PUSH
65137: LD_VAR 0 1
65141: ARRAY
65142: PUSH
65143: LD_INT 1
65145: PLUS
65146: PPUSH
65147: LD_VAR 0 4
65151: PUSH
65152: LD_INT 1
65154: ARRAY
65155: PPUSH
65156: CALL_OW 2
65160: PPUSH
65161: CALL_OW 1
65165: ST_TO_ADDR
// end ;
65166: LD_VAR 0 3
65170: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
65171: LD_INT 0
65173: PPUSH
65174: PPUSH
// if not mc_bases or not base or not kinds then
65175: LD_EXP 14
65179: NOT
65180: PUSH
65181: LD_VAR 0 1
65185: NOT
65186: OR
65187: PUSH
65188: LD_VAR 0 2
65192: NOT
65193: OR
65194: IFFALSE 65198
// exit ;
65196: GO 65259
// for i in kinds do
65198: LD_ADDR_VAR 0 4
65202: PUSH
65203: LD_VAR 0 2
65207: PUSH
65208: FOR_IN
65209: IFFALSE 65257
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
65211: LD_ADDR_EXP 48
65215: PUSH
65216: LD_EXP 48
65220: PPUSH
65221: LD_VAR 0 1
65225: PUSH
65226: LD_EXP 48
65230: PUSH
65231: LD_VAR 0 1
65235: ARRAY
65236: PUSH
65237: LD_INT 1
65239: PLUS
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PPUSH
65245: LD_VAR 0 4
65249: PPUSH
65250: CALL 9396 0 3
65254: ST_TO_ADDR
65255: GO 65208
65257: POP
65258: POP
// end ;
65259: LD_VAR 0 3
65263: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
65264: LD_INT 0
65266: PPUSH
// if not mc_bases or not base or not areas then
65267: LD_EXP 14
65271: NOT
65272: PUSH
65273: LD_VAR 0 1
65277: NOT
65278: OR
65279: PUSH
65280: LD_VAR 0 2
65284: NOT
65285: OR
65286: IFFALSE 65290
// exit ;
65288: GO 65315
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
65290: LD_ADDR_EXP 32
65294: PUSH
65295: LD_EXP 32
65299: PPUSH
65300: LD_VAR 0 1
65304: PPUSH
65305: LD_VAR 0 2
65309: PPUSH
65310: CALL_OW 1
65314: ST_TO_ADDR
// end ;
65315: LD_VAR 0 3
65319: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
65320: LD_INT 0
65322: PPUSH
// if not mc_bases or not base or not teleports_exit then
65323: LD_EXP 14
65327: NOT
65328: PUSH
65329: LD_VAR 0 1
65333: NOT
65334: OR
65335: PUSH
65336: LD_VAR 0 2
65340: NOT
65341: OR
65342: IFFALSE 65346
// exit ;
65344: GO 65371
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
65346: LD_ADDR_EXP 49
65350: PUSH
65351: LD_EXP 49
65355: PPUSH
65356: LD_VAR 0 1
65360: PPUSH
65361: LD_VAR 0 2
65365: PPUSH
65366: CALL_OW 1
65370: ST_TO_ADDR
// end ;
65371: LD_VAR 0 3
65375: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
65376: LD_INT 0
65378: PPUSH
65379: PPUSH
65380: PPUSH
// if not mc_bases or not base or not ext_list then
65381: LD_EXP 14
65385: NOT
65386: PUSH
65387: LD_VAR 0 1
65391: NOT
65392: OR
65393: PUSH
65394: LD_VAR 0 5
65398: NOT
65399: OR
65400: IFFALSE 65404
// exit ;
65402: GO 65577
// tmp := GetFacExtXYD ( x , y , d ) ;
65404: LD_ADDR_VAR 0 8
65408: PUSH
65409: LD_VAR 0 2
65413: PPUSH
65414: LD_VAR 0 3
65418: PPUSH
65419: LD_VAR 0 4
65423: PPUSH
65424: CALL 38075 0 3
65428: ST_TO_ADDR
// if not tmp then
65429: LD_VAR 0 8
65433: NOT
65434: IFFALSE 65438
// exit ;
65436: GO 65577
// for i in tmp do
65438: LD_ADDR_VAR 0 7
65442: PUSH
65443: LD_VAR 0 8
65447: PUSH
65448: FOR_IN
65449: IFFALSE 65575
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
65451: LD_ADDR_EXP 19
65455: PUSH
65456: LD_EXP 19
65460: PPUSH
65461: LD_VAR 0 1
65465: PPUSH
65466: LD_EXP 19
65470: PUSH
65471: LD_VAR 0 1
65475: ARRAY
65476: PPUSH
65477: LD_EXP 19
65481: PUSH
65482: LD_VAR 0 1
65486: ARRAY
65487: PUSH
65488: LD_INT 1
65490: PLUS
65491: PPUSH
65492: LD_VAR 0 5
65496: PUSH
65497: LD_INT 1
65499: ARRAY
65500: PUSH
65501: LD_VAR 0 7
65505: PUSH
65506: LD_INT 1
65508: ARRAY
65509: PUSH
65510: LD_VAR 0 7
65514: PUSH
65515: LD_INT 2
65517: ARRAY
65518: PUSH
65519: LD_VAR 0 7
65523: PUSH
65524: LD_INT 3
65526: ARRAY
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: PPUSH
65534: CALL_OW 2
65538: PPUSH
65539: CALL_OW 1
65543: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
65544: LD_ADDR_VAR 0 5
65548: PUSH
65549: LD_VAR 0 5
65553: PPUSH
65554: LD_INT 1
65556: PPUSH
65557: CALL_OW 3
65561: ST_TO_ADDR
// if not ext_list then
65562: LD_VAR 0 5
65566: NOT
65567: IFFALSE 65573
// exit ;
65569: POP
65570: POP
65571: GO 65577
// end ;
65573: GO 65448
65575: POP
65576: POP
// end ;
65577: LD_VAR 0 6
65581: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
65582: LD_INT 0
65584: PPUSH
// if not mc_bases or not base or not weapon_list then
65585: LD_EXP 14
65589: NOT
65590: PUSH
65591: LD_VAR 0 1
65595: NOT
65596: OR
65597: PUSH
65598: LD_VAR 0 2
65602: NOT
65603: OR
65604: IFFALSE 65608
// exit ;
65606: GO 65633
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
65608: LD_ADDR_EXP 53
65612: PUSH
65613: LD_EXP 53
65617: PPUSH
65618: LD_VAR 0 1
65622: PPUSH
65623: LD_VAR 0 2
65627: PPUSH
65628: CALL_OW 1
65632: ST_TO_ADDR
// end ;
65633: LD_VAR 0 3
65637: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
65638: LD_INT 0
65640: PPUSH
// if not mc_bases or not base or not tech_list then
65641: LD_EXP 14
65645: NOT
65646: PUSH
65647: LD_VAR 0 1
65651: NOT
65652: OR
65653: PUSH
65654: LD_VAR 0 2
65658: NOT
65659: OR
65660: IFFALSE 65664
// exit ;
65662: GO 65689
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
65664: LD_ADDR_EXP 41
65668: PUSH
65669: LD_EXP 41
65673: PPUSH
65674: LD_VAR 0 1
65678: PPUSH
65679: LD_VAR 0 2
65683: PPUSH
65684: CALL_OW 1
65688: ST_TO_ADDR
// end ;
65689: LD_VAR 0 3
65693: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
65694: LD_INT 0
65696: PPUSH
// if not mc_bases or not parking_area or not base then
65697: LD_EXP 14
65701: NOT
65702: PUSH
65703: LD_VAR 0 2
65707: NOT
65708: OR
65709: PUSH
65710: LD_VAR 0 1
65714: NOT
65715: OR
65716: IFFALSE 65720
// exit ;
65718: GO 65745
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
65720: LD_ADDR_EXP 38
65724: PUSH
65725: LD_EXP 38
65729: PPUSH
65730: LD_VAR 0 1
65734: PPUSH
65735: LD_VAR 0 2
65739: PPUSH
65740: CALL_OW 1
65744: ST_TO_ADDR
// end ;
65745: LD_VAR 0 3
65749: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
65750: LD_INT 0
65752: PPUSH
// if not mc_bases or not base or not scan_area then
65753: LD_EXP 14
65757: NOT
65758: PUSH
65759: LD_VAR 0 1
65763: NOT
65764: OR
65765: PUSH
65766: LD_VAR 0 2
65770: NOT
65771: OR
65772: IFFALSE 65776
// exit ;
65774: GO 65801
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
65776: LD_ADDR_EXP 39
65780: PUSH
65781: LD_EXP 39
65785: PPUSH
65786: LD_VAR 0 1
65790: PPUSH
65791: LD_VAR 0 2
65795: PPUSH
65796: CALL_OW 1
65800: ST_TO_ADDR
// end ;
65801: LD_VAR 0 3
65805: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
65806: LD_INT 0
65808: PPUSH
65809: PPUSH
// if not mc_bases or not base then
65810: LD_EXP 14
65814: NOT
65815: PUSH
65816: LD_VAR 0 1
65820: NOT
65821: OR
65822: IFFALSE 65826
// exit ;
65824: GO 65890
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
65826: LD_ADDR_VAR 0 3
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 2
65836: PUSH
65837: LD_INT 3
65839: PUSH
65840: LD_INT 4
65842: PUSH
65843: LD_INT 11
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
65853: LD_ADDR_EXP 41
65857: PUSH
65858: LD_EXP 41
65862: PPUSH
65863: LD_VAR 0 1
65867: PPUSH
65868: LD_EXP 41
65872: PUSH
65873: LD_VAR 0 1
65877: ARRAY
65878: PUSH
65879: LD_VAR 0 3
65883: DIFF
65884: PPUSH
65885: CALL_OW 1
65889: ST_TO_ADDR
// end ;
65890: LD_VAR 0 2
65894: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
65895: LD_INT 0
65897: PPUSH
// result := mc_vehicles [ base ] ;
65898: LD_ADDR_VAR 0 3
65902: PUSH
65903: LD_EXP 33
65907: PUSH
65908: LD_VAR 0 1
65912: ARRAY
65913: ST_TO_ADDR
// if onlyCombat then
65914: LD_VAR 0 2
65918: IFFALSE 66083
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
65920: LD_ADDR_VAR 0 3
65924: PUSH
65925: LD_VAR 0 3
65929: PUSH
65930: LD_VAR 0 3
65934: PPUSH
65935: LD_INT 2
65937: PUSH
65938: LD_INT 34
65940: PUSH
65941: LD_INT 12
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 34
65950: PUSH
65951: LD_INT 51
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 34
65960: PUSH
65961: LD_EXP 58
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 34
65972: PUSH
65973: LD_INT 32
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 34
65982: PUSH
65983: LD_INT 13
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 34
65992: PUSH
65993: LD_INT 52
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 34
66002: PUSH
66003: LD_INT 14
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 34
66012: PUSH
66013: LD_INT 53
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 34
66022: PUSH
66023: LD_EXP 57
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 34
66034: PUSH
66035: LD_INT 31
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 34
66044: PUSH
66045: LD_INT 48
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 34
66054: PUSH
66055: LD_INT 8
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: PPUSH
66077: CALL_OW 72
66081: DIFF
66082: ST_TO_ADDR
// end ; end_of_file
66083: LD_VAR 0 3
66087: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
66088: LD_INT 0
66090: PPUSH
66091: PPUSH
66092: PPUSH
// if not mc_bases or not skirmish then
66093: LD_EXP 14
66097: NOT
66098: PUSH
66099: LD_EXP 12
66103: NOT
66104: OR
66105: IFFALSE 66109
// exit ;
66107: GO 66274
// for i = 1 to mc_bases do
66109: LD_ADDR_VAR 0 4
66113: PUSH
66114: DOUBLE
66115: LD_INT 1
66117: DEC
66118: ST_TO_ADDR
66119: LD_EXP 14
66123: PUSH
66124: FOR_TO
66125: IFFALSE 66272
// begin if sci in mc_bases [ i ] then
66127: LD_VAR 0 2
66131: PUSH
66132: LD_EXP 14
66136: PUSH
66137: LD_VAR 0 4
66141: ARRAY
66142: IN
66143: IFFALSE 66270
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
66145: LD_ADDR_EXP 43
66149: PUSH
66150: LD_EXP 43
66154: PPUSH
66155: LD_VAR 0 4
66159: PUSH
66160: LD_EXP 43
66164: PUSH
66165: LD_VAR 0 4
66169: ARRAY
66170: PUSH
66171: LD_INT 1
66173: PLUS
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PPUSH
66179: LD_VAR 0 1
66183: PPUSH
66184: CALL 9396 0 3
66188: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
66189: LD_ADDR_VAR 0 5
66193: PUSH
66194: LD_EXP 14
66198: PUSH
66199: LD_VAR 0 4
66203: ARRAY
66204: PPUSH
66205: LD_INT 2
66207: PUSH
66208: LD_INT 30
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 30
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: LIST
66232: PPUSH
66233: CALL_OW 72
66237: PPUSH
66238: LD_VAR 0 1
66242: PPUSH
66243: CALL_OW 74
66247: ST_TO_ADDR
// if tmp then
66248: LD_VAR 0 5
66252: IFFALSE 66268
// ComStandNearbyBuilding ( ape , tmp ) ;
66254: LD_VAR 0 1
66258: PPUSH
66259: LD_VAR 0 5
66263: PPUSH
66264: CALL 6010 0 2
// break ;
66268: GO 66272
// end ; end ;
66270: GO 66124
66272: POP
66273: POP
// end ;
66274: LD_VAR 0 3
66278: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
66279: LD_INT 0
66281: PPUSH
66282: PPUSH
66283: PPUSH
// if not mc_bases or not skirmish then
66284: LD_EXP 14
66288: NOT
66289: PUSH
66290: LD_EXP 12
66294: NOT
66295: OR
66296: IFFALSE 66300
// exit ;
66298: GO 66389
// for i = 1 to mc_bases do
66300: LD_ADDR_VAR 0 4
66304: PUSH
66305: DOUBLE
66306: LD_INT 1
66308: DEC
66309: ST_TO_ADDR
66310: LD_EXP 14
66314: PUSH
66315: FOR_TO
66316: IFFALSE 66387
// begin if building in mc_busy_turret_list [ i ] then
66318: LD_VAR 0 1
66322: PUSH
66323: LD_EXP 24
66327: PUSH
66328: LD_VAR 0 4
66332: ARRAY
66333: IN
66334: IFFALSE 66385
// begin tmp := mc_busy_turret_list [ i ] diff building ;
66336: LD_ADDR_VAR 0 5
66340: PUSH
66341: LD_EXP 24
66345: PUSH
66346: LD_VAR 0 4
66350: ARRAY
66351: PUSH
66352: LD_VAR 0 1
66356: DIFF
66357: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
66358: LD_ADDR_EXP 24
66362: PUSH
66363: LD_EXP 24
66367: PPUSH
66368: LD_VAR 0 4
66372: PPUSH
66373: LD_VAR 0 5
66377: PPUSH
66378: CALL_OW 1
66382: ST_TO_ADDR
// break ;
66383: GO 66387
// end ; end ;
66385: GO 66315
66387: POP
66388: POP
// end ;
66389: LD_VAR 0 3
66393: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
66394: LD_INT 0
66396: PPUSH
66397: PPUSH
66398: PPUSH
// if not mc_bases or not skirmish then
66399: LD_EXP 14
66403: NOT
66404: PUSH
66405: LD_EXP 12
66409: NOT
66410: OR
66411: IFFALSE 66415
// exit ;
66413: GO 66614
// for i = 1 to mc_bases do
66415: LD_ADDR_VAR 0 5
66419: PUSH
66420: DOUBLE
66421: LD_INT 1
66423: DEC
66424: ST_TO_ADDR
66425: LD_EXP 14
66429: PUSH
66430: FOR_TO
66431: IFFALSE 66612
// if building in mc_bases [ i ] then
66433: LD_VAR 0 1
66437: PUSH
66438: LD_EXP 14
66442: PUSH
66443: LD_VAR 0 5
66447: ARRAY
66448: IN
66449: IFFALSE 66610
// begin tmp := mc_bases [ i ] diff building ;
66451: LD_ADDR_VAR 0 6
66455: PUSH
66456: LD_EXP 14
66460: PUSH
66461: LD_VAR 0 5
66465: ARRAY
66466: PUSH
66467: LD_VAR 0 1
66471: DIFF
66472: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
66473: LD_ADDR_EXP 14
66477: PUSH
66478: LD_EXP 14
66482: PPUSH
66483: LD_VAR 0 5
66487: PPUSH
66488: LD_VAR 0 6
66492: PPUSH
66493: CALL_OW 1
66497: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
66498: LD_VAR 0 1
66502: PUSH
66503: LD_EXP 22
66507: PUSH
66508: LD_VAR 0 5
66512: ARRAY
66513: IN
66514: IFFALSE 66553
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
66516: LD_ADDR_EXP 22
66520: PUSH
66521: LD_EXP 22
66525: PPUSH
66526: LD_VAR 0 5
66530: PPUSH
66531: LD_EXP 22
66535: PUSH
66536: LD_VAR 0 5
66540: ARRAY
66541: PUSH
66542: LD_VAR 0 1
66546: DIFF
66547: PPUSH
66548: CALL_OW 1
66552: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
66553: LD_VAR 0 1
66557: PUSH
66558: LD_EXP 23
66562: PUSH
66563: LD_VAR 0 5
66567: ARRAY
66568: IN
66569: IFFALSE 66608
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
66571: LD_ADDR_EXP 23
66575: PUSH
66576: LD_EXP 23
66580: PPUSH
66581: LD_VAR 0 5
66585: PPUSH
66586: LD_EXP 23
66590: PUSH
66591: LD_VAR 0 5
66595: ARRAY
66596: PUSH
66597: LD_VAR 0 1
66601: DIFF
66602: PPUSH
66603: CALL_OW 1
66607: ST_TO_ADDR
// break ;
66608: GO 66612
// end ;
66610: GO 66430
66612: POP
66613: POP
// end ;
66614: LD_VAR 0 4
66618: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
66619: LD_INT 0
66621: PPUSH
66622: PPUSH
66623: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
66624: LD_EXP 14
66628: NOT
66629: PUSH
66630: LD_EXP 12
66634: NOT
66635: OR
66636: PUSH
66637: LD_VAR 0 3
66641: PUSH
66642: LD_EXP 40
66646: IN
66647: NOT
66648: OR
66649: IFFALSE 66653
// exit ;
66651: GO 66776
// for i = 1 to mc_vehicles do
66653: LD_ADDR_VAR 0 6
66657: PUSH
66658: DOUBLE
66659: LD_INT 1
66661: DEC
66662: ST_TO_ADDR
66663: LD_EXP 33
66667: PUSH
66668: FOR_TO
66669: IFFALSE 66774
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
66671: LD_VAR 0 2
66675: PUSH
66676: LD_EXP 33
66680: PUSH
66681: LD_VAR 0 6
66685: ARRAY
66686: IN
66687: PUSH
66688: LD_VAR 0 1
66692: PUSH
66693: LD_EXP 33
66697: PUSH
66698: LD_VAR 0 6
66702: ARRAY
66703: IN
66704: OR
66705: IFFALSE 66772
// begin tmp := mc_vehicles [ i ] diff old ;
66707: LD_ADDR_VAR 0 7
66711: PUSH
66712: LD_EXP 33
66716: PUSH
66717: LD_VAR 0 6
66721: ARRAY
66722: PUSH
66723: LD_VAR 0 2
66727: DIFF
66728: ST_TO_ADDR
// tmp := tmp diff new ;
66729: LD_ADDR_VAR 0 7
66733: PUSH
66734: LD_VAR 0 7
66738: PUSH
66739: LD_VAR 0 1
66743: DIFF
66744: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
66745: LD_ADDR_EXP 33
66749: PUSH
66750: LD_EXP 33
66754: PPUSH
66755: LD_VAR 0 6
66759: PPUSH
66760: LD_VAR 0 7
66764: PPUSH
66765: CALL_OW 1
66769: ST_TO_ADDR
// break ;
66770: GO 66774
// end ;
66772: GO 66668
66774: POP
66775: POP
// end ;
66776: LD_VAR 0 5
66780: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
66781: LD_INT 0
66783: PPUSH
66784: PPUSH
66785: PPUSH
66786: PPUSH
// if not mc_bases or not skirmish then
66787: LD_EXP 14
66791: NOT
66792: PUSH
66793: LD_EXP 12
66797: NOT
66798: OR
66799: IFFALSE 66803
// exit ;
66801: GO 67180
// side := GetSide ( vehicle ) ;
66803: LD_ADDR_VAR 0 5
66807: PUSH
66808: LD_VAR 0 1
66812: PPUSH
66813: CALL_OW 255
66817: ST_TO_ADDR
// for i = 1 to mc_bases do
66818: LD_ADDR_VAR 0 4
66822: PUSH
66823: DOUBLE
66824: LD_INT 1
66826: DEC
66827: ST_TO_ADDR
66828: LD_EXP 14
66832: PUSH
66833: FOR_TO
66834: IFFALSE 67178
// begin if factory in mc_bases [ i ] then
66836: LD_VAR 0 2
66840: PUSH
66841: LD_EXP 14
66845: PUSH
66846: LD_VAR 0 4
66850: ARRAY
66851: IN
66852: IFFALSE 67176
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
66854: LD_EXP 36
66858: PUSH
66859: LD_VAR 0 4
66863: ARRAY
66864: PUSH
66865: LD_EXP 25
66869: PUSH
66870: LD_VAR 0 4
66874: ARRAY
66875: LESS
66876: PUSH
66877: LD_VAR 0 1
66881: PPUSH
66882: CALL_OW 264
66886: PUSH
66887: LD_INT 31
66889: PUSH
66890: LD_INT 32
66892: PUSH
66893: LD_INT 51
66895: PUSH
66896: LD_EXP 58
66900: PUSH
66901: LD_INT 12
66903: PUSH
66904: LD_INT 30
66906: PUSH
66907: LD_EXP 57
66911: PUSH
66912: LD_INT 11
66914: PUSH
66915: LD_INT 53
66917: PUSH
66918: LD_INT 14
66920: PUSH
66921: LD_EXP 61
66925: PUSH
66926: LD_INT 29
66928: PUSH
66929: LD_EXP 59
66933: PUSH
66934: LD_INT 13
66936: PUSH
66937: LD_INT 52
66939: PUSH
66940: LD_INT 48
66942: PUSH
66943: LD_INT 8
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: IN
66965: NOT
66966: AND
66967: IFFALSE 67015
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
66969: LD_ADDR_EXP 36
66973: PUSH
66974: LD_EXP 36
66978: PPUSH
66979: LD_VAR 0 4
66983: PUSH
66984: LD_EXP 36
66988: PUSH
66989: LD_VAR 0 4
66993: ARRAY
66994: PUSH
66995: LD_INT 1
66997: PLUS
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PPUSH
67003: LD_VAR 0 1
67007: PPUSH
67008: CALL 9396 0 3
67012: ST_TO_ADDR
67013: GO 67059
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
67015: LD_ADDR_EXP 33
67019: PUSH
67020: LD_EXP 33
67024: PPUSH
67025: LD_VAR 0 4
67029: PUSH
67030: LD_EXP 33
67034: PUSH
67035: LD_VAR 0 4
67039: ARRAY
67040: PUSH
67041: LD_INT 1
67043: PLUS
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PPUSH
67049: LD_VAR 0 1
67053: PPUSH
67054: CALL 9396 0 3
67058: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
67059: LD_VAR 0 1
67063: PPUSH
67064: CALL_OW 263
67068: PUSH
67069: LD_INT 2
67071: EQUAL
67072: IFFALSE 67092
// begin repeat wait ( 0 0$1 ) ;
67074: LD_INT 35
67076: PPUSH
67077: CALL_OW 67
// until IsControledBy ( vehicle ) ;
67081: LD_VAR 0 1
67085: PPUSH
67086: CALL_OW 312
67090: IFFALSE 67074
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
67092: LD_VAR 0 1
67096: PPUSH
67097: LD_EXP 38
67101: PUSH
67102: LD_VAR 0 4
67106: ARRAY
67107: PPUSH
67108: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
67112: LD_VAR 0 1
67116: PPUSH
67117: CALL_OW 263
67121: PUSH
67122: LD_INT 1
67124: NONEQUAL
67125: IFFALSE 67129
// break ;
67127: GO 67178
// repeat wait ( 0 0$1 ) ;
67129: LD_INT 35
67131: PPUSH
67132: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
67136: LD_VAR 0 1
67140: PPUSH
67141: LD_EXP 38
67145: PUSH
67146: LD_VAR 0 4
67150: ARRAY
67151: PPUSH
67152: CALL_OW 308
67156: IFFALSE 67129
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
67158: LD_VAR 0 1
67162: PPUSH
67163: CALL_OW 311
67167: PPUSH
67168: CALL_OW 121
// exit ;
67172: POP
67173: POP
67174: GO 67180
// end ; end ;
67176: GO 66833
67178: POP
67179: POP
// end ;
67180: LD_VAR 0 3
67184: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
67185: LD_INT 0
67187: PPUSH
67188: PPUSH
67189: PPUSH
67190: PPUSH
// if not mc_bases or not skirmish then
67191: LD_EXP 14
67195: NOT
67196: PUSH
67197: LD_EXP 12
67201: NOT
67202: OR
67203: IFFALSE 67207
// exit ;
67205: GO 67560
// repeat wait ( 0 0$1 ) ;
67207: LD_INT 35
67209: PPUSH
67210: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
67214: LD_VAR 0 2
67218: PPUSH
67219: LD_VAR 0 3
67223: PPUSH
67224: CALL_OW 284
67228: IFFALSE 67207
// if GetResourceTypeXY ( x , y ) = mat_artefact then
67230: LD_VAR 0 2
67234: PPUSH
67235: LD_VAR 0 3
67239: PPUSH
67240: CALL_OW 283
67244: PUSH
67245: LD_INT 4
67247: EQUAL
67248: IFFALSE 67252
// exit ;
67250: GO 67560
// for i = 1 to mc_bases do
67252: LD_ADDR_VAR 0 7
67256: PUSH
67257: DOUBLE
67258: LD_INT 1
67260: DEC
67261: ST_TO_ADDR
67262: LD_EXP 14
67266: PUSH
67267: FOR_TO
67268: IFFALSE 67558
// begin if mc_crates_area [ i ] then
67270: LD_EXP 32
67274: PUSH
67275: LD_VAR 0 7
67279: ARRAY
67280: IFFALSE 67391
// for j in mc_crates_area [ i ] do
67282: LD_ADDR_VAR 0 8
67286: PUSH
67287: LD_EXP 32
67291: PUSH
67292: LD_VAR 0 7
67296: ARRAY
67297: PUSH
67298: FOR_IN
67299: IFFALSE 67389
// if InArea ( x , y , j ) then
67301: LD_VAR 0 2
67305: PPUSH
67306: LD_VAR 0 3
67310: PPUSH
67311: LD_VAR 0 8
67315: PPUSH
67316: CALL_OW 309
67320: IFFALSE 67387
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
67322: LD_ADDR_EXP 30
67326: PUSH
67327: LD_EXP 30
67331: PPUSH
67332: LD_VAR 0 7
67336: PUSH
67337: LD_EXP 30
67341: PUSH
67342: LD_VAR 0 7
67346: ARRAY
67347: PUSH
67348: LD_INT 1
67350: PLUS
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PPUSH
67356: LD_VAR 0 4
67360: PUSH
67361: LD_VAR 0 2
67365: PUSH
67366: LD_VAR 0 3
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: PPUSH
67376: CALL 9396 0 3
67380: ST_TO_ADDR
// exit ;
67381: POP
67382: POP
67383: POP
67384: POP
67385: GO 67560
// end ;
67387: GO 67298
67389: POP
67390: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67391: LD_ADDR_VAR 0 9
67395: PUSH
67396: LD_EXP 14
67400: PUSH
67401: LD_VAR 0 7
67405: ARRAY
67406: PPUSH
67407: LD_INT 2
67409: PUSH
67410: LD_INT 30
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 30
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: LIST
67434: PPUSH
67435: CALL_OW 72
67439: ST_TO_ADDR
// if not depot then
67440: LD_VAR 0 9
67444: NOT
67445: IFFALSE 67449
// continue ;
67447: GO 67267
// for j in depot do
67449: LD_ADDR_VAR 0 8
67453: PUSH
67454: LD_VAR 0 9
67458: PUSH
67459: FOR_IN
67460: IFFALSE 67554
// if GetDistUnitXY ( j , x , y ) < 30 then
67462: LD_VAR 0 8
67466: PPUSH
67467: LD_VAR 0 2
67471: PPUSH
67472: LD_VAR 0 3
67476: PPUSH
67477: CALL_OW 297
67481: PUSH
67482: LD_INT 30
67484: LESS
67485: IFFALSE 67552
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
67487: LD_ADDR_EXP 30
67491: PUSH
67492: LD_EXP 30
67496: PPUSH
67497: LD_VAR 0 7
67501: PUSH
67502: LD_EXP 30
67506: PUSH
67507: LD_VAR 0 7
67511: ARRAY
67512: PUSH
67513: LD_INT 1
67515: PLUS
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PPUSH
67521: LD_VAR 0 4
67525: PUSH
67526: LD_VAR 0 2
67530: PUSH
67531: LD_VAR 0 3
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: LIST
67540: PPUSH
67541: CALL 9396 0 3
67545: ST_TO_ADDR
// exit ;
67546: POP
67547: POP
67548: POP
67549: POP
67550: GO 67560
// end ;
67552: GO 67459
67554: POP
67555: POP
// end ;
67556: GO 67267
67558: POP
67559: POP
// end ;
67560: LD_VAR 0 6
67564: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
67565: LD_INT 0
67567: PPUSH
67568: PPUSH
67569: PPUSH
67570: PPUSH
// if not mc_bases or not skirmish then
67571: LD_EXP 14
67575: NOT
67576: PUSH
67577: LD_EXP 12
67581: NOT
67582: OR
67583: IFFALSE 67587
// exit ;
67585: GO 67864
// side := GetSide ( lab ) ;
67587: LD_ADDR_VAR 0 4
67591: PUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: CALL_OW 255
67601: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
67602: LD_VAR 0 4
67606: PUSH
67607: LD_EXP 40
67611: IN
67612: NOT
67613: PUSH
67614: LD_EXP 41
67618: NOT
67619: OR
67620: PUSH
67621: LD_EXP 14
67625: NOT
67626: OR
67627: IFFALSE 67631
// exit ;
67629: GO 67864
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
67631: LD_ADDR_EXP 41
67635: PUSH
67636: LD_EXP 41
67640: PPUSH
67641: LD_VAR 0 4
67645: PPUSH
67646: LD_EXP 41
67650: PUSH
67651: LD_VAR 0 4
67655: ARRAY
67656: PUSH
67657: LD_VAR 0 1
67661: DIFF
67662: PPUSH
67663: CALL_OW 1
67667: ST_TO_ADDR
// for i = 1 to mc_bases do
67668: LD_ADDR_VAR 0 5
67672: PUSH
67673: DOUBLE
67674: LD_INT 1
67676: DEC
67677: ST_TO_ADDR
67678: LD_EXP 14
67682: PUSH
67683: FOR_TO
67684: IFFALSE 67862
// begin if lab in mc_bases [ i ] then
67686: LD_VAR 0 2
67690: PUSH
67691: LD_EXP 14
67695: PUSH
67696: LD_VAR 0 5
67700: ARRAY
67701: IN
67702: IFFALSE 67860
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
67704: LD_VAR 0 1
67708: PUSH
67709: LD_INT 11
67711: PUSH
67712: LD_INT 4
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: IN
67727: PUSH
67728: LD_EXP 44
67732: PUSH
67733: LD_VAR 0 5
67737: ARRAY
67738: AND
67739: IFFALSE 67860
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
67741: LD_ADDR_VAR 0 6
67745: PUSH
67746: LD_EXP 44
67750: PUSH
67751: LD_VAR 0 5
67755: ARRAY
67756: PUSH
67757: LD_INT 1
67759: ARRAY
67760: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
67761: LD_ADDR_EXP 44
67765: PUSH
67766: LD_EXP 44
67770: PPUSH
67771: LD_VAR 0 5
67775: PPUSH
67776: EMPTY
67777: PPUSH
67778: CALL_OW 1
67782: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
67783: LD_VAR 0 6
67787: PPUSH
67788: LD_INT 0
67790: PPUSH
67791: CALL_OW 109
// ComExitBuilding ( tmp ) ;
67795: LD_VAR 0 6
67799: PPUSH
67800: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
67804: LD_ADDR_EXP 43
67808: PUSH
67809: LD_EXP 43
67813: PPUSH
67814: LD_VAR 0 5
67818: PPUSH
67819: LD_EXP 43
67823: PUSH
67824: LD_VAR 0 5
67828: ARRAY
67829: PPUSH
67830: LD_INT 1
67832: PPUSH
67833: LD_VAR 0 6
67837: PPUSH
67838: CALL_OW 2
67842: PPUSH
67843: CALL_OW 1
67847: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
67848: LD_VAR 0 5
67852: PPUSH
67853: LD_INT 112
67855: PPUSH
67856: CALL 44876 0 2
// end ; end ; end ;
67860: GO 67683
67862: POP
67863: POP
// end ;
67864: LD_VAR 0 3
67868: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
67869: LD_INT 0
67871: PPUSH
67872: PPUSH
67873: PPUSH
67874: PPUSH
67875: PPUSH
67876: PPUSH
67877: PPUSH
67878: PPUSH
// if not mc_bases or not skirmish then
67879: LD_EXP 14
67883: NOT
67884: PUSH
67885: LD_EXP 12
67889: NOT
67890: OR
67891: IFFALSE 67895
// exit ;
67893: GO 69266
// for i = 1 to mc_bases do
67895: LD_ADDR_VAR 0 3
67899: PUSH
67900: DOUBLE
67901: LD_INT 1
67903: DEC
67904: ST_TO_ADDR
67905: LD_EXP 14
67909: PUSH
67910: FOR_TO
67911: IFFALSE 69264
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
67913: LD_VAR 0 1
67917: PUSH
67918: LD_EXP 14
67922: PUSH
67923: LD_VAR 0 3
67927: ARRAY
67928: IN
67929: PUSH
67930: LD_VAR 0 1
67934: PUSH
67935: LD_EXP 21
67939: PUSH
67940: LD_VAR 0 3
67944: ARRAY
67945: IN
67946: OR
67947: PUSH
67948: LD_VAR 0 1
67952: PUSH
67953: LD_EXP 36
67957: PUSH
67958: LD_VAR 0 3
67962: ARRAY
67963: IN
67964: OR
67965: PUSH
67966: LD_VAR 0 1
67970: PUSH
67971: LD_EXP 33
67975: PUSH
67976: LD_VAR 0 3
67980: ARRAY
67981: IN
67982: OR
67983: PUSH
67984: LD_VAR 0 1
67988: PUSH
67989: LD_EXP 43
67993: PUSH
67994: LD_VAR 0 3
67998: ARRAY
67999: IN
68000: OR
68001: PUSH
68002: LD_VAR 0 1
68006: PUSH
68007: LD_EXP 44
68011: PUSH
68012: LD_VAR 0 3
68016: ARRAY
68017: IN
68018: OR
68019: IFFALSE 69262
// begin if un in mc_ape [ i ] then
68021: LD_VAR 0 1
68025: PUSH
68026: LD_EXP 43
68030: PUSH
68031: LD_VAR 0 3
68035: ARRAY
68036: IN
68037: IFFALSE 68076
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
68039: LD_ADDR_EXP 43
68043: PUSH
68044: LD_EXP 43
68048: PPUSH
68049: LD_VAR 0 3
68053: PPUSH
68054: LD_EXP 43
68058: PUSH
68059: LD_VAR 0 3
68063: ARRAY
68064: PUSH
68065: LD_VAR 0 1
68069: DIFF
68070: PPUSH
68071: CALL_OW 1
68075: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
68076: LD_VAR 0 1
68080: PUSH
68081: LD_EXP 44
68085: PUSH
68086: LD_VAR 0 3
68090: ARRAY
68091: IN
68092: IFFALSE 68116
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
68094: LD_ADDR_EXP 44
68098: PUSH
68099: LD_EXP 44
68103: PPUSH
68104: LD_VAR 0 3
68108: PPUSH
68109: EMPTY
68110: PPUSH
68111: CALL_OW 1
68115: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
68116: LD_VAR 0 1
68120: PPUSH
68121: CALL_OW 247
68125: PUSH
68126: LD_INT 2
68128: EQUAL
68129: PUSH
68130: LD_VAR 0 1
68134: PPUSH
68135: CALL_OW 110
68139: PUSH
68140: LD_INT 20
68142: EQUAL
68143: PUSH
68144: LD_VAR 0 1
68148: PUSH
68149: LD_EXP 36
68153: PUSH
68154: LD_VAR 0 3
68158: ARRAY
68159: IN
68160: OR
68161: PUSH
68162: LD_VAR 0 1
68166: PPUSH
68167: CALL_OW 264
68171: PUSH
68172: LD_INT 12
68174: PUSH
68175: LD_INT 51
68177: PUSH
68178: LD_EXP 58
68182: PUSH
68183: LD_INT 32
68185: PUSH
68186: LD_INT 13
68188: PUSH
68189: LD_INT 52
68191: PUSH
68192: LD_INT 31
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: IN
68204: OR
68205: AND
68206: IFFALSE 68514
// begin if un in mc_defender [ i ] then
68208: LD_VAR 0 1
68212: PUSH
68213: LD_EXP 36
68217: PUSH
68218: LD_VAR 0 3
68222: ARRAY
68223: IN
68224: IFFALSE 68263
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
68226: LD_ADDR_EXP 36
68230: PUSH
68231: LD_EXP 36
68235: PPUSH
68236: LD_VAR 0 3
68240: PPUSH
68241: LD_EXP 36
68245: PUSH
68246: LD_VAR 0 3
68250: ARRAY
68251: PUSH
68252: LD_VAR 0 1
68256: DIFF
68257: PPUSH
68258: CALL_OW 1
68262: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
68263: LD_ADDR_VAR 0 8
68267: PUSH
68268: LD_VAR 0 3
68272: PPUSH
68273: LD_INT 3
68275: PPUSH
68276: CALL 64932 0 2
68280: ST_TO_ADDR
// if fac then
68281: LD_VAR 0 8
68285: IFFALSE 68514
// begin for j in fac do
68287: LD_ADDR_VAR 0 4
68291: PUSH
68292: LD_VAR 0 8
68296: PUSH
68297: FOR_IN
68298: IFFALSE 68512
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
68300: LD_ADDR_VAR 0 9
68304: PUSH
68305: LD_VAR 0 8
68309: PPUSH
68310: LD_VAR 0 1
68314: PPUSH
68315: CALL_OW 265
68319: PPUSH
68320: LD_VAR 0 1
68324: PPUSH
68325: CALL_OW 262
68329: PPUSH
68330: LD_VAR 0 1
68334: PPUSH
68335: CALL_OW 263
68339: PPUSH
68340: LD_VAR 0 1
68344: PPUSH
68345: CALL_OW 264
68349: PPUSH
68350: CALL 6928 0 5
68354: ST_TO_ADDR
// if components then
68355: LD_VAR 0 9
68359: IFFALSE 68510
// begin if GetWeapon ( un ) = ar_control_tower then
68361: LD_VAR 0 1
68365: PPUSH
68366: CALL_OW 264
68370: PUSH
68371: LD_INT 31
68373: EQUAL
68374: IFFALSE 68491
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
68376: LD_VAR 0 1
68380: PPUSH
68381: CALL_OW 311
68385: PPUSH
68386: LD_INT 0
68388: PPUSH
68389: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
68393: LD_ADDR_EXP 54
68397: PUSH
68398: LD_EXP 54
68402: PPUSH
68403: LD_VAR 0 3
68407: PPUSH
68408: LD_EXP 54
68412: PUSH
68413: LD_VAR 0 3
68417: ARRAY
68418: PUSH
68419: LD_VAR 0 1
68423: PPUSH
68424: CALL_OW 311
68428: DIFF
68429: PPUSH
68430: CALL_OW 1
68434: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
68435: LD_ADDR_VAR 0 7
68439: PUSH
68440: LD_EXP 35
68444: PUSH
68445: LD_VAR 0 3
68449: ARRAY
68450: PPUSH
68451: LD_INT 1
68453: PPUSH
68454: LD_VAR 0 9
68458: PPUSH
68459: CALL_OW 2
68463: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68464: LD_ADDR_EXP 35
68468: PUSH
68469: LD_EXP 35
68473: PPUSH
68474: LD_VAR 0 3
68478: PPUSH
68479: LD_VAR 0 7
68483: PPUSH
68484: CALL_OW 1
68488: ST_TO_ADDR
// end else
68489: GO 68508
// MC_InsertProduceList ( i , [ components ] ) ;
68491: LD_VAR 0 3
68495: PPUSH
68496: LD_VAR 0 9
68500: PUSH
68501: EMPTY
68502: LIST
68503: PPUSH
68504: CALL 64477 0 2
// break ;
68508: GO 68512
// end ; end ;
68510: GO 68297
68512: POP
68513: POP
// end ; end ; if GetType ( un ) = unit_building then
68514: LD_VAR 0 1
68518: PPUSH
68519: CALL_OW 247
68523: PUSH
68524: LD_INT 3
68526: EQUAL
68527: IFFALSE 68930
// begin btype := GetBType ( un ) ;
68529: LD_ADDR_VAR 0 5
68533: PUSH
68534: LD_VAR 0 1
68538: PPUSH
68539: CALL_OW 266
68543: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
68544: LD_VAR 0 5
68548: PUSH
68549: LD_INT 29
68551: PUSH
68552: LD_INT 30
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: IN
68559: IFFALSE 68632
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
68561: LD_VAR 0 1
68565: PPUSH
68566: CALL_OW 250
68570: PPUSH
68571: LD_VAR 0 1
68575: PPUSH
68576: CALL_OW 251
68580: PPUSH
68581: LD_VAR 0 1
68585: PPUSH
68586: CALL_OW 255
68590: PPUSH
68591: CALL_OW 440
68595: NOT
68596: IFFALSE 68632
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
68598: LD_VAR 0 1
68602: PPUSH
68603: CALL_OW 250
68607: PPUSH
68608: LD_VAR 0 1
68612: PPUSH
68613: CALL_OW 251
68617: PPUSH
68618: LD_VAR 0 1
68622: PPUSH
68623: CALL_OW 255
68627: PPUSH
68628: CALL_OW 441
// end ; if btype = b_warehouse then
68632: LD_VAR 0 5
68636: PUSH
68637: LD_INT 1
68639: EQUAL
68640: IFFALSE 68658
// begin btype := b_depot ;
68642: LD_ADDR_VAR 0 5
68646: PUSH
68647: LD_INT 0
68649: ST_TO_ADDR
// pos := 1 ;
68650: LD_ADDR_VAR 0 6
68654: PUSH
68655: LD_INT 1
68657: ST_TO_ADDR
// end ; if btype = b_factory then
68658: LD_VAR 0 5
68662: PUSH
68663: LD_INT 3
68665: EQUAL
68666: IFFALSE 68684
// begin btype := b_workshop ;
68668: LD_ADDR_VAR 0 5
68672: PUSH
68673: LD_INT 2
68675: ST_TO_ADDR
// pos := 1 ;
68676: LD_ADDR_VAR 0 6
68680: PUSH
68681: LD_INT 1
68683: ST_TO_ADDR
// end ; if btype = b_barracks then
68684: LD_VAR 0 5
68688: PUSH
68689: LD_INT 5
68691: EQUAL
68692: IFFALSE 68702
// btype := b_armoury ;
68694: LD_ADDR_VAR 0 5
68698: PUSH
68699: LD_INT 4
68701: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
68702: LD_VAR 0 5
68706: PUSH
68707: LD_INT 7
68709: PUSH
68710: LD_INT 8
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: IN
68717: IFFALSE 68727
// btype := b_lab ;
68719: LD_ADDR_VAR 0 5
68723: PUSH
68724: LD_INT 6
68726: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
68727: LD_ADDR_EXP 19
68731: PUSH
68732: LD_EXP 19
68736: PPUSH
68737: LD_VAR 0 3
68741: PUSH
68742: LD_EXP 19
68746: PUSH
68747: LD_VAR 0 3
68751: ARRAY
68752: PUSH
68753: LD_INT 1
68755: PLUS
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PPUSH
68761: LD_VAR 0 5
68765: PUSH
68766: LD_VAR 0 1
68770: PPUSH
68771: CALL_OW 250
68775: PUSH
68776: LD_VAR 0 1
68780: PPUSH
68781: CALL_OW 251
68785: PUSH
68786: LD_VAR 0 1
68790: PPUSH
68791: CALL_OW 254
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: PPUSH
68802: CALL 9396 0 3
68806: ST_TO_ADDR
// if pos = 1 then
68807: LD_VAR 0 6
68811: PUSH
68812: LD_INT 1
68814: EQUAL
68815: IFFALSE 68930
// begin tmp := mc_build_list [ i ] ;
68817: LD_ADDR_VAR 0 7
68821: PUSH
68822: LD_EXP 19
68826: PUSH
68827: LD_VAR 0 3
68831: ARRAY
68832: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
68833: LD_VAR 0 7
68837: PPUSH
68838: LD_INT 2
68840: PUSH
68841: LD_INT 30
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 30
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: LIST
68865: PPUSH
68866: CALL_OW 72
68870: IFFALSE 68880
// pos := 2 ;
68872: LD_ADDR_VAR 0 6
68876: PUSH
68877: LD_INT 2
68879: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
68880: LD_ADDR_VAR 0 7
68884: PUSH
68885: LD_VAR 0 7
68889: PPUSH
68890: LD_VAR 0 6
68894: PPUSH
68895: LD_VAR 0 7
68899: PPUSH
68900: CALL 9722 0 3
68904: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
68905: LD_ADDR_EXP 19
68909: PUSH
68910: LD_EXP 19
68914: PPUSH
68915: LD_VAR 0 3
68919: PPUSH
68920: LD_VAR 0 7
68924: PPUSH
68925: CALL_OW 1
68929: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
68930: LD_VAR 0 1
68934: PUSH
68935: LD_EXP 14
68939: PUSH
68940: LD_VAR 0 3
68944: ARRAY
68945: IN
68946: IFFALSE 68985
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
68948: LD_ADDR_EXP 14
68952: PUSH
68953: LD_EXP 14
68957: PPUSH
68958: LD_VAR 0 3
68962: PPUSH
68963: LD_EXP 14
68967: PUSH
68968: LD_VAR 0 3
68972: ARRAY
68973: PUSH
68974: LD_VAR 0 1
68978: DIFF
68979: PPUSH
68980: CALL_OW 1
68984: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
68985: LD_VAR 0 1
68989: PUSH
68990: LD_EXP 21
68994: PUSH
68995: LD_VAR 0 3
68999: ARRAY
69000: IN
69001: IFFALSE 69040
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
69003: LD_ADDR_EXP 21
69007: PUSH
69008: LD_EXP 21
69012: PPUSH
69013: LD_VAR 0 3
69017: PPUSH
69018: LD_EXP 21
69022: PUSH
69023: LD_VAR 0 3
69027: ARRAY
69028: PUSH
69029: LD_VAR 0 1
69033: DIFF
69034: PPUSH
69035: CALL_OW 1
69039: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
69040: LD_VAR 0 1
69044: PUSH
69045: LD_EXP 33
69049: PUSH
69050: LD_VAR 0 3
69054: ARRAY
69055: IN
69056: IFFALSE 69095
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
69058: LD_ADDR_EXP 33
69062: PUSH
69063: LD_EXP 33
69067: PPUSH
69068: LD_VAR 0 3
69072: PPUSH
69073: LD_EXP 33
69077: PUSH
69078: LD_VAR 0 3
69082: ARRAY
69083: PUSH
69084: LD_VAR 0 1
69088: DIFF
69089: PPUSH
69090: CALL_OW 1
69094: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
69095: LD_VAR 0 1
69099: PUSH
69100: LD_EXP 36
69104: PUSH
69105: LD_VAR 0 3
69109: ARRAY
69110: IN
69111: IFFALSE 69150
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
69113: LD_ADDR_EXP 36
69117: PUSH
69118: LD_EXP 36
69122: PPUSH
69123: LD_VAR 0 3
69127: PPUSH
69128: LD_EXP 36
69132: PUSH
69133: LD_VAR 0 3
69137: ARRAY
69138: PUSH
69139: LD_VAR 0 1
69143: DIFF
69144: PPUSH
69145: CALL_OW 1
69149: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
69150: LD_VAR 0 1
69154: PUSH
69155: LD_EXP 23
69159: PUSH
69160: LD_VAR 0 3
69164: ARRAY
69165: IN
69166: IFFALSE 69205
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
69168: LD_ADDR_EXP 23
69172: PUSH
69173: LD_EXP 23
69177: PPUSH
69178: LD_VAR 0 3
69182: PPUSH
69183: LD_EXP 23
69187: PUSH
69188: LD_VAR 0 3
69192: ARRAY
69193: PUSH
69194: LD_VAR 0 1
69198: DIFF
69199: PPUSH
69200: CALL_OW 1
69204: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
69205: LD_VAR 0 1
69209: PUSH
69210: LD_EXP 22
69214: PUSH
69215: LD_VAR 0 3
69219: ARRAY
69220: IN
69221: IFFALSE 69260
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
69223: LD_ADDR_EXP 22
69227: PUSH
69228: LD_EXP 22
69232: PPUSH
69233: LD_VAR 0 3
69237: PPUSH
69238: LD_EXP 22
69242: PUSH
69243: LD_VAR 0 3
69247: ARRAY
69248: PUSH
69249: LD_VAR 0 1
69253: DIFF
69254: PPUSH
69255: CALL_OW 1
69259: ST_TO_ADDR
// end ; break ;
69260: GO 69264
// end ;
69262: GO 67910
69264: POP
69265: POP
// end ;
69266: LD_VAR 0 2
69270: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
69271: LD_INT 0
69273: PPUSH
69274: PPUSH
69275: PPUSH
// if not mc_bases or not skirmish then
69276: LD_EXP 14
69280: NOT
69281: PUSH
69282: LD_EXP 12
69286: NOT
69287: OR
69288: IFFALSE 69292
// exit ;
69290: GO 69507
// for i = 1 to mc_bases do
69292: LD_ADDR_VAR 0 3
69296: PUSH
69297: DOUBLE
69298: LD_INT 1
69300: DEC
69301: ST_TO_ADDR
69302: LD_EXP 14
69306: PUSH
69307: FOR_TO
69308: IFFALSE 69505
// begin if building in mc_construct_list [ i ] then
69310: LD_VAR 0 1
69314: PUSH
69315: LD_EXP 21
69319: PUSH
69320: LD_VAR 0 3
69324: ARRAY
69325: IN
69326: IFFALSE 69503
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
69328: LD_ADDR_EXP 21
69332: PUSH
69333: LD_EXP 21
69337: PPUSH
69338: LD_VAR 0 3
69342: PPUSH
69343: LD_EXP 21
69347: PUSH
69348: LD_VAR 0 3
69352: ARRAY
69353: PUSH
69354: LD_VAR 0 1
69358: DIFF
69359: PPUSH
69360: CALL_OW 1
69364: ST_TO_ADDR
// if building in mc_lab [ i ] then
69365: LD_VAR 0 1
69369: PUSH
69370: LD_EXP 47
69374: PUSH
69375: LD_VAR 0 3
69379: ARRAY
69380: IN
69381: IFFALSE 69436
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
69383: LD_ADDR_EXP 48
69387: PUSH
69388: LD_EXP 48
69392: PPUSH
69393: LD_VAR 0 3
69397: PPUSH
69398: LD_EXP 48
69402: PUSH
69403: LD_VAR 0 3
69407: ARRAY
69408: PPUSH
69409: LD_INT 1
69411: PPUSH
69412: LD_EXP 48
69416: PUSH
69417: LD_VAR 0 3
69421: ARRAY
69422: PPUSH
69423: LD_INT 0
69425: PPUSH
69426: CALL 8814 0 4
69430: PPUSH
69431: CALL_OW 1
69435: ST_TO_ADDR
// if not building in mc_bases [ i ] then
69436: LD_VAR 0 1
69440: PUSH
69441: LD_EXP 14
69445: PUSH
69446: LD_VAR 0 3
69450: ARRAY
69451: IN
69452: NOT
69453: IFFALSE 69499
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
69455: LD_ADDR_EXP 14
69459: PUSH
69460: LD_EXP 14
69464: PPUSH
69465: LD_VAR 0 3
69469: PUSH
69470: LD_EXP 14
69474: PUSH
69475: LD_VAR 0 3
69479: ARRAY
69480: PUSH
69481: LD_INT 1
69483: PLUS
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PPUSH
69489: LD_VAR 0 1
69493: PPUSH
69494: CALL 9396 0 3
69498: ST_TO_ADDR
// exit ;
69499: POP
69500: POP
69501: GO 69507
// end ; end ;
69503: GO 69307
69505: POP
69506: POP
// end ;
69507: LD_VAR 0 2
69511: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
69512: LD_INT 0
69514: PPUSH
69515: PPUSH
69516: PPUSH
69517: PPUSH
69518: PPUSH
69519: PPUSH
69520: PPUSH
// if not mc_bases or not skirmish then
69521: LD_EXP 14
69525: NOT
69526: PUSH
69527: LD_EXP 12
69531: NOT
69532: OR
69533: IFFALSE 69537
// exit ;
69535: GO 70198
// for i = 1 to mc_bases do
69537: LD_ADDR_VAR 0 3
69541: PUSH
69542: DOUBLE
69543: LD_INT 1
69545: DEC
69546: ST_TO_ADDR
69547: LD_EXP 14
69551: PUSH
69552: FOR_TO
69553: IFFALSE 70196
// begin if building in mc_construct_list [ i ] then
69555: LD_VAR 0 1
69559: PUSH
69560: LD_EXP 21
69564: PUSH
69565: LD_VAR 0 3
69569: ARRAY
69570: IN
69571: IFFALSE 70194
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
69573: LD_ADDR_EXP 21
69577: PUSH
69578: LD_EXP 21
69582: PPUSH
69583: LD_VAR 0 3
69587: PPUSH
69588: LD_EXP 21
69592: PUSH
69593: LD_VAR 0 3
69597: ARRAY
69598: PUSH
69599: LD_VAR 0 1
69603: DIFF
69604: PPUSH
69605: CALL_OW 1
69609: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
69610: LD_ADDR_EXP 14
69614: PUSH
69615: LD_EXP 14
69619: PPUSH
69620: LD_VAR 0 3
69624: PUSH
69625: LD_EXP 14
69629: PUSH
69630: LD_VAR 0 3
69634: ARRAY
69635: PUSH
69636: LD_INT 1
69638: PLUS
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PPUSH
69644: LD_VAR 0 1
69648: PPUSH
69649: CALL 9396 0 3
69653: ST_TO_ADDR
// btype := GetBType ( building ) ;
69654: LD_ADDR_VAR 0 5
69658: PUSH
69659: LD_VAR 0 1
69663: PPUSH
69664: CALL_OW 266
69668: ST_TO_ADDR
// side := GetSide ( building ) ;
69669: LD_ADDR_VAR 0 8
69673: PUSH
69674: LD_VAR 0 1
69678: PPUSH
69679: CALL_OW 255
69683: ST_TO_ADDR
// if btype = b_lab then
69684: LD_VAR 0 5
69688: PUSH
69689: LD_INT 6
69691: EQUAL
69692: IFFALSE 69742
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
69694: LD_ADDR_EXP 47
69698: PUSH
69699: LD_EXP 47
69703: PPUSH
69704: LD_VAR 0 3
69708: PUSH
69709: LD_EXP 47
69713: PUSH
69714: LD_VAR 0 3
69718: ARRAY
69719: PUSH
69720: LD_INT 1
69722: PLUS
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PPUSH
69728: LD_VAR 0 1
69732: PPUSH
69733: CALL 9396 0 3
69737: ST_TO_ADDR
// exit ;
69738: POP
69739: POP
69740: GO 70198
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
69742: LD_VAR 0 5
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: LD_INT 2
69752: PUSH
69753: LD_INT 4
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: LIST
69760: IN
69761: IFFALSE 69885
// begin if btype = b_armoury then
69763: LD_VAR 0 5
69767: PUSH
69768: LD_INT 4
69770: EQUAL
69771: IFFALSE 69781
// btype := b_barracks ;
69773: LD_ADDR_VAR 0 5
69777: PUSH
69778: LD_INT 5
69780: ST_TO_ADDR
// if btype = b_depot then
69781: LD_VAR 0 5
69785: PUSH
69786: LD_INT 0
69788: EQUAL
69789: IFFALSE 69799
// btype := b_warehouse ;
69791: LD_ADDR_VAR 0 5
69795: PUSH
69796: LD_INT 1
69798: ST_TO_ADDR
// if btype = b_workshop then
69799: LD_VAR 0 5
69803: PUSH
69804: LD_INT 2
69806: EQUAL
69807: IFFALSE 69817
// btype := b_factory ;
69809: LD_ADDR_VAR 0 5
69813: PUSH
69814: LD_INT 3
69816: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
69817: LD_VAR 0 5
69821: PPUSH
69822: LD_VAR 0 8
69826: PPUSH
69827: CALL_OW 323
69831: PUSH
69832: LD_INT 1
69834: EQUAL
69835: IFFALSE 69881
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
69837: LD_ADDR_EXP 46
69841: PUSH
69842: LD_EXP 46
69846: PPUSH
69847: LD_VAR 0 3
69851: PUSH
69852: LD_EXP 46
69856: PUSH
69857: LD_VAR 0 3
69861: ARRAY
69862: PUSH
69863: LD_INT 1
69865: PLUS
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PPUSH
69871: LD_VAR 0 1
69875: PPUSH
69876: CALL 9396 0 3
69880: ST_TO_ADDR
// exit ;
69881: POP
69882: POP
69883: GO 70198
// end ; if btype in [ b_bunker , b_turret ] then
69885: LD_VAR 0 5
69889: PUSH
69890: LD_INT 32
69892: PUSH
69893: LD_INT 33
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: IN
69900: IFFALSE 70190
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
69902: LD_ADDR_EXP 22
69906: PUSH
69907: LD_EXP 22
69911: PPUSH
69912: LD_VAR 0 3
69916: PUSH
69917: LD_EXP 22
69921: PUSH
69922: LD_VAR 0 3
69926: ARRAY
69927: PUSH
69928: LD_INT 1
69930: PLUS
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PPUSH
69936: LD_VAR 0 1
69940: PPUSH
69941: CALL 9396 0 3
69945: ST_TO_ADDR
// if btype = b_bunker then
69946: LD_VAR 0 5
69950: PUSH
69951: LD_INT 32
69953: EQUAL
69954: IFFALSE 70190
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
69956: LD_ADDR_EXP 23
69960: PUSH
69961: LD_EXP 23
69965: PPUSH
69966: LD_VAR 0 3
69970: PUSH
69971: LD_EXP 23
69975: PUSH
69976: LD_VAR 0 3
69980: ARRAY
69981: PUSH
69982: LD_INT 1
69984: PLUS
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PPUSH
69990: LD_VAR 0 1
69994: PPUSH
69995: CALL 9396 0 3
69999: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
70000: LD_ADDR_VAR 0 6
70004: PUSH
70005: LD_EXP 14
70009: PUSH
70010: LD_VAR 0 3
70014: ARRAY
70015: PPUSH
70016: LD_INT 25
70018: PUSH
70019: LD_INT 1
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: PUSH
70029: LD_INT 54
70031: PUSH
70032: EMPTY
70033: LIST
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PPUSH
70043: CALL_OW 72
70047: ST_TO_ADDR
// if tmp then
70048: LD_VAR 0 6
70052: IFFALSE 70058
// exit ;
70054: POP
70055: POP
70056: GO 70198
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
70058: LD_ADDR_VAR 0 6
70062: PUSH
70063: LD_EXP 14
70067: PUSH
70068: LD_VAR 0 3
70072: ARRAY
70073: PPUSH
70074: LD_INT 2
70076: PUSH
70077: LD_INT 30
70079: PUSH
70080: LD_INT 4
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 30
70089: PUSH
70090: LD_INT 5
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: LIST
70101: PPUSH
70102: CALL_OW 72
70106: ST_TO_ADDR
// if not tmp then
70107: LD_VAR 0 6
70111: NOT
70112: IFFALSE 70118
// exit ;
70114: POP
70115: POP
70116: GO 70198
// for j in tmp do
70118: LD_ADDR_VAR 0 4
70122: PUSH
70123: LD_VAR 0 6
70127: PUSH
70128: FOR_IN
70129: IFFALSE 70188
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
70131: LD_ADDR_VAR 0 7
70135: PUSH
70136: LD_VAR 0 4
70140: PPUSH
70141: CALL_OW 313
70145: PPUSH
70146: LD_INT 25
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PPUSH
70156: CALL_OW 72
70160: ST_TO_ADDR
// if units then
70161: LD_VAR 0 7
70165: IFFALSE 70186
// begin ComExitBuilding ( units [ 1 ] ) ;
70167: LD_VAR 0 7
70171: PUSH
70172: LD_INT 1
70174: ARRAY
70175: PPUSH
70176: CALL_OW 122
// exit ;
70180: POP
70181: POP
70182: POP
70183: POP
70184: GO 70198
// end ; end ;
70186: GO 70128
70188: POP
70189: POP
// end ; end ; exit ;
70190: POP
70191: POP
70192: GO 70198
// end ; end ;
70194: GO 69552
70196: POP
70197: POP
// end ;
70198: LD_VAR 0 2
70202: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
70203: LD_INT 0
70205: PPUSH
70206: PPUSH
70207: PPUSH
70208: PPUSH
70209: PPUSH
70210: PPUSH
70211: PPUSH
// if not mc_bases or not skirmish then
70212: LD_EXP 14
70216: NOT
70217: PUSH
70218: LD_EXP 12
70222: NOT
70223: OR
70224: IFFALSE 70228
// exit ;
70226: GO 70459
// btype := GetBType ( building ) ;
70228: LD_ADDR_VAR 0 6
70232: PUSH
70233: LD_VAR 0 1
70237: PPUSH
70238: CALL_OW 266
70242: ST_TO_ADDR
// x := GetX ( building ) ;
70243: LD_ADDR_VAR 0 7
70247: PUSH
70248: LD_VAR 0 1
70252: PPUSH
70253: CALL_OW 250
70257: ST_TO_ADDR
// y := GetY ( building ) ;
70258: LD_ADDR_VAR 0 8
70262: PUSH
70263: LD_VAR 0 1
70267: PPUSH
70268: CALL_OW 251
70272: ST_TO_ADDR
// d := GetDir ( building ) ;
70273: LD_ADDR_VAR 0 9
70277: PUSH
70278: LD_VAR 0 1
70282: PPUSH
70283: CALL_OW 254
70287: ST_TO_ADDR
// for i = 1 to mc_bases do
70288: LD_ADDR_VAR 0 4
70292: PUSH
70293: DOUBLE
70294: LD_INT 1
70296: DEC
70297: ST_TO_ADDR
70298: LD_EXP 14
70302: PUSH
70303: FOR_TO
70304: IFFALSE 70457
// begin if not mc_build_list [ i ] then
70306: LD_EXP 19
70310: PUSH
70311: LD_VAR 0 4
70315: ARRAY
70316: NOT
70317: IFFALSE 70321
// continue ;
70319: GO 70303
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
70321: LD_VAR 0 6
70325: PUSH
70326: LD_VAR 0 7
70330: PUSH
70331: LD_VAR 0 8
70335: PUSH
70336: LD_VAR 0 9
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: PPUSH
70347: LD_EXP 19
70351: PUSH
70352: LD_VAR 0 4
70356: ARRAY
70357: PUSH
70358: LD_INT 1
70360: ARRAY
70361: PPUSH
70362: CALL 15565 0 2
70366: IFFALSE 70455
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
70368: LD_ADDR_EXP 19
70372: PUSH
70373: LD_EXP 19
70377: PPUSH
70378: LD_VAR 0 4
70382: PPUSH
70383: LD_EXP 19
70387: PUSH
70388: LD_VAR 0 4
70392: ARRAY
70393: PPUSH
70394: LD_INT 1
70396: PPUSH
70397: CALL_OW 3
70401: PPUSH
70402: CALL_OW 1
70406: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
70407: LD_ADDR_EXP 21
70411: PUSH
70412: LD_EXP 21
70416: PPUSH
70417: LD_VAR 0 4
70421: PUSH
70422: LD_EXP 21
70426: PUSH
70427: LD_VAR 0 4
70431: ARRAY
70432: PUSH
70433: LD_INT 1
70435: PLUS
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PPUSH
70441: LD_VAR 0 1
70445: PPUSH
70446: CALL 9396 0 3
70450: ST_TO_ADDR
// exit ;
70451: POP
70452: POP
70453: GO 70459
// end ; end ;
70455: GO 70303
70457: POP
70458: POP
// end ;
70459: LD_VAR 0 3
70463: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
70464: LD_INT 0
70466: PPUSH
70467: PPUSH
70468: PPUSH
// if not mc_bases or not skirmish then
70469: LD_EXP 14
70473: NOT
70474: PUSH
70475: LD_EXP 12
70479: NOT
70480: OR
70481: IFFALSE 70485
// exit ;
70483: GO 70675
// for i = 1 to mc_bases do
70485: LD_ADDR_VAR 0 4
70489: PUSH
70490: DOUBLE
70491: LD_INT 1
70493: DEC
70494: ST_TO_ADDR
70495: LD_EXP 14
70499: PUSH
70500: FOR_TO
70501: IFFALSE 70588
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
70503: LD_VAR 0 1
70507: PUSH
70508: LD_EXP 22
70512: PUSH
70513: LD_VAR 0 4
70517: ARRAY
70518: IN
70519: PUSH
70520: LD_VAR 0 1
70524: PUSH
70525: LD_EXP 23
70529: PUSH
70530: LD_VAR 0 4
70534: ARRAY
70535: IN
70536: NOT
70537: AND
70538: IFFALSE 70586
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
70540: LD_ADDR_EXP 23
70544: PUSH
70545: LD_EXP 23
70549: PPUSH
70550: LD_VAR 0 4
70554: PUSH
70555: LD_EXP 23
70559: PUSH
70560: LD_VAR 0 4
70564: ARRAY
70565: PUSH
70566: LD_INT 1
70568: PLUS
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PPUSH
70574: LD_VAR 0 1
70578: PPUSH
70579: CALL 9396 0 3
70583: ST_TO_ADDR
// break ;
70584: GO 70588
// end ; end ;
70586: GO 70500
70588: POP
70589: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
70590: LD_VAR 0 1
70594: PPUSH
70595: CALL_OW 257
70599: PUSH
70600: LD_EXP 40
70604: IN
70605: PUSH
70606: LD_VAR 0 1
70610: PPUSH
70611: CALL_OW 266
70615: PUSH
70616: LD_INT 5
70618: EQUAL
70619: AND
70620: PUSH
70621: LD_VAR 0 2
70625: PPUSH
70626: CALL_OW 110
70630: PUSH
70631: LD_INT 18
70633: NONEQUAL
70634: AND
70635: IFFALSE 70675
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
70637: LD_VAR 0 2
70641: PPUSH
70642: CALL_OW 257
70646: PUSH
70647: LD_INT 5
70649: PUSH
70650: LD_INT 8
70652: PUSH
70653: LD_INT 9
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: LIST
70660: IN
70661: IFFALSE 70675
// SetClass ( unit , 1 ) ;
70663: LD_VAR 0 2
70667: PPUSH
70668: LD_INT 1
70670: PPUSH
70671: CALL_OW 336
// end ;
70675: LD_VAR 0 3
70679: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
70680: LD_INT 0
70682: PPUSH
70683: PPUSH
// if not mc_bases or not skirmish then
70684: LD_EXP 14
70688: NOT
70689: PUSH
70690: LD_EXP 12
70694: NOT
70695: OR
70696: IFFALSE 70700
// exit ;
70698: GO 70816
// if GetLives ( abandoned_vehicle ) > 250 then
70700: LD_VAR 0 2
70704: PPUSH
70705: CALL_OW 256
70709: PUSH
70710: LD_INT 250
70712: GREATER
70713: IFFALSE 70717
// exit ;
70715: GO 70816
// for i = 1 to mc_bases do
70717: LD_ADDR_VAR 0 6
70721: PUSH
70722: DOUBLE
70723: LD_INT 1
70725: DEC
70726: ST_TO_ADDR
70727: LD_EXP 14
70731: PUSH
70732: FOR_TO
70733: IFFALSE 70814
// begin if driver in mc_bases [ i ] then
70735: LD_VAR 0 1
70739: PUSH
70740: LD_EXP 14
70744: PUSH
70745: LD_VAR 0 6
70749: ARRAY
70750: IN
70751: IFFALSE 70812
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
70753: LD_VAR 0 1
70757: PPUSH
70758: LD_EXP 14
70762: PUSH
70763: LD_VAR 0 6
70767: ARRAY
70768: PPUSH
70769: LD_INT 2
70771: PUSH
70772: LD_INT 30
70774: PUSH
70775: LD_INT 0
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 30
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: LIST
70796: PPUSH
70797: CALL_OW 72
70801: PUSH
70802: LD_INT 1
70804: ARRAY
70805: PPUSH
70806: CALL_OW 112
// break ;
70810: GO 70814
// end ; end ;
70812: GO 70732
70814: POP
70815: POP
// end ; end_of_file
70816: LD_VAR 0 5
70820: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
70821: GO 70823
70823: DISABLE
// begin ru_radar := 98 ;
70824: LD_ADDR_EXP 57
70828: PUSH
70829: LD_INT 98
70831: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
70832: LD_ADDR_EXP 58
70836: PUSH
70837: LD_INT 89
70839: ST_TO_ADDR
// us_hack := 99 ;
70840: LD_ADDR_EXP 59
70844: PUSH
70845: LD_INT 99
70847: ST_TO_ADDR
// us_artillery := 97 ;
70848: LD_ADDR_EXP 60
70852: PUSH
70853: LD_INT 97
70855: ST_TO_ADDR
// ar_bio_bomb := 91 ;
70856: LD_ADDR_EXP 61
70860: PUSH
70861: LD_INT 91
70863: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
70864: LD_ADDR_EXP 62
70868: PUSH
70869: LD_INT 92
70871: ST_TO_ADDR
// tech_Artillery := 80 ;
70872: LD_ADDR_EXP 63
70876: PUSH
70877: LD_INT 80
70879: ST_TO_ADDR
// tech_RadMat := 81 ;
70880: LD_ADDR_EXP 64
70884: PUSH
70885: LD_INT 81
70887: ST_TO_ADDR
// tech_BasicTools := 82 ;
70888: LD_ADDR_EXP 65
70892: PUSH
70893: LD_INT 82
70895: ST_TO_ADDR
// tech_Cargo := 83 ;
70896: LD_ADDR_EXP 66
70900: PUSH
70901: LD_INT 83
70903: ST_TO_ADDR
// tech_Track := 84 ;
70904: LD_ADDR_EXP 67
70908: PUSH
70909: LD_INT 84
70911: ST_TO_ADDR
// tech_Crane := 85 ;
70912: LD_ADDR_EXP 68
70916: PUSH
70917: LD_INT 85
70919: ST_TO_ADDR
// tech_Bulldozer := 86 ;
70920: LD_ADDR_EXP 69
70924: PUSH
70925: LD_INT 86
70927: ST_TO_ADDR
// tech_Hovercraft := 87 ;
70928: LD_ADDR_EXP 70
70932: PUSH
70933: LD_INT 87
70935: ST_TO_ADDR
// end ; end_of_file
70936: END
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
70937: LD_INT 0
70939: PPUSH
70940: PPUSH
70941: PPUSH
70942: PPUSH
70943: PPUSH
70944: PPUSH
70945: PPUSH
70946: PPUSH
70947: PPUSH
70948: PPUSH
70949: PPUSH
70950: PPUSH
70951: PPUSH
70952: PPUSH
70953: PPUSH
70954: PPUSH
70955: PPUSH
70956: PPUSH
70957: PPUSH
70958: PPUSH
70959: PPUSH
70960: PPUSH
70961: PPUSH
70962: PPUSH
70963: PPUSH
70964: PPUSH
70965: PPUSH
70966: PPUSH
70967: PPUSH
70968: PPUSH
70969: PPUSH
70970: PPUSH
70971: PPUSH
70972: PPUSH
// if not list then
70973: LD_VAR 0 1
70977: NOT
70978: IFFALSE 70982
// exit ;
70980: GO 75641
// base := list [ 1 ] ;
70982: LD_ADDR_VAR 0 3
70986: PUSH
70987: LD_VAR 0 1
70991: PUSH
70992: LD_INT 1
70994: ARRAY
70995: ST_TO_ADDR
// group := list [ 2 ] ;
70996: LD_ADDR_VAR 0 4
71000: PUSH
71001: LD_VAR 0 1
71005: PUSH
71006: LD_INT 2
71008: ARRAY
71009: ST_TO_ADDR
// path := list [ 3 ] ;
71010: LD_ADDR_VAR 0 5
71014: PUSH
71015: LD_VAR 0 1
71019: PUSH
71020: LD_INT 3
71022: ARRAY
71023: ST_TO_ADDR
// flags := list [ 4 ] ;
71024: LD_ADDR_VAR 0 6
71028: PUSH
71029: LD_VAR 0 1
71033: PUSH
71034: LD_INT 4
71036: ARRAY
71037: ST_TO_ADDR
// mined := [ ] ;
71038: LD_ADDR_VAR 0 27
71042: PUSH
71043: EMPTY
71044: ST_TO_ADDR
// bombed := [ ] ;
71045: LD_ADDR_VAR 0 28
71049: PUSH
71050: EMPTY
71051: ST_TO_ADDR
// healers := [ ] ;
71052: LD_ADDR_VAR 0 31
71056: PUSH
71057: EMPTY
71058: ST_TO_ADDR
// to_heal := [ ] ;
71059: LD_ADDR_VAR 0 30
71063: PUSH
71064: EMPTY
71065: ST_TO_ADDR
// repairs := [ ] ;
71066: LD_ADDR_VAR 0 33
71070: PUSH
71071: EMPTY
71072: ST_TO_ADDR
// to_repair := [ ] ;
71073: LD_ADDR_VAR 0 32
71077: PUSH
71078: EMPTY
71079: ST_TO_ADDR
// if not group or not path then
71080: LD_VAR 0 4
71084: NOT
71085: PUSH
71086: LD_VAR 0 5
71090: NOT
71091: OR
71092: IFFALSE 71096
// exit ;
71094: GO 75641
// side := GetSide ( group [ 1 ] ) ;
71096: LD_ADDR_VAR 0 35
71100: PUSH
71101: LD_VAR 0 4
71105: PUSH
71106: LD_INT 1
71108: ARRAY
71109: PPUSH
71110: CALL_OW 255
71114: ST_TO_ADDR
// if flags then
71115: LD_VAR 0 6
71119: IFFALSE 71263
// begin f_ignore_area := flags [ 1 ] ;
71121: LD_ADDR_VAR 0 17
71125: PUSH
71126: LD_VAR 0 6
71130: PUSH
71131: LD_INT 1
71133: ARRAY
71134: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
71135: LD_ADDR_VAR 0 18
71139: PUSH
71140: LD_VAR 0 6
71144: PUSH
71145: LD_INT 2
71147: ARRAY
71148: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
71149: LD_ADDR_VAR 0 19
71153: PUSH
71154: LD_VAR 0 6
71158: PUSH
71159: LD_INT 3
71161: ARRAY
71162: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
71163: LD_ADDR_VAR 0 20
71167: PUSH
71168: LD_VAR 0 6
71172: PUSH
71173: LD_INT 4
71175: ARRAY
71176: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
71177: LD_ADDR_VAR 0 21
71181: PUSH
71182: LD_VAR 0 6
71186: PUSH
71187: LD_INT 5
71189: ARRAY
71190: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
71191: LD_ADDR_VAR 0 22
71195: PUSH
71196: LD_VAR 0 6
71200: PUSH
71201: LD_INT 6
71203: ARRAY
71204: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
71205: LD_ADDR_VAR 0 23
71209: PUSH
71210: LD_VAR 0 6
71214: PUSH
71215: LD_INT 7
71217: ARRAY
71218: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
71219: LD_ADDR_VAR 0 24
71223: PUSH
71224: LD_VAR 0 6
71228: PUSH
71229: LD_INT 8
71231: ARRAY
71232: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
71233: LD_ADDR_VAR 0 25
71237: PUSH
71238: LD_VAR 0 6
71242: PUSH
71243: LD_INT 9
71245: ARRAY
71246: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
71247: LD_ADDR_VAR 0 26
71251: PUSH
71252: LD_VAR 0 6
71256: PUSH
71257: LD_INT 10
71259: ARRAY
71260: ST_TO_ADDR
// end else
71261: GO 71343
// begin f_ignore_area := false ;
71263: LD_ADDR_VAR 0 17
71267: PUSH
71268: LD_INT 0
71270: ST_TO_ADDR
// f_capture := false ;
71271: LD_ADDR_VAR 0 18
71275: PUSH
71276: LD_INT 0
71278: ST_TO_ADDR
// f_ignore_civ := false ;
71279: LD_ADDR_VAR 0 19
71283: PUSH
71284: LD_INT 0
71286: ST_TO_ADDR
// f_murder := false ;
71287: LD_ADDR_VAR 0 20
71291: PUSH
71292: LD_INT 0
71294: ST_TO_ADDR
// f_mines := false ;
71295: LD_ADDR_VAR 0 21
71299: PUSH
71300: LD_INT 0
71302: ST_TO_ADDR
// f_repair := false ;
71303: LD_ADDR_VAR 0 22
71307: PUSH
71308: LD_INT 0
71310: ST_TO_ADDR
// f_heal := false ;
71311: LD_ADDR_VAR 0 23
71315: PUSH
71316: LD_INT 0
71318: ST_TO_ADDR
// f_spacetime := false ;
71319: LD_ADDR_VAR 0 24
71323: PUSH
71324: LD_INT 0
71326: ST_TO_ADDR
// f_attack_depot := false ;
71327: LD_ADDR_VAR 0 25
71331: PUSH
71332: LD_INT 0
71334: ST_TO_ADDR
// f_crawl := false ;
71335: LD_ADDR_VAR 0 26
71339: PUSH
71340: LD_INT 0
71342: ST_TO_ADDR
// end ; if f_heal then
71343: LD_VAR 0 23
71347: IFFALSE 71374
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
71349: LD_ADDR_VAR 0 31
71353: PUSH
71354: LD_VAR 0 4
71358: PPUSH
71359: LD_INT 25
71361: PUSH
71362: LD_INT 4
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PPUSH
71369: CALL_OW 72
71373: ST_TO_ADDR
// if f_repair then
71374: LD_VAR 0 22
71378: IFFALSE 71405
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
71380: LD_ADDR_VAR 0 33
71384: PUSH
71385: LD_VAR 0 4
71389: PPUSH
71390: LD_INT 25
71392: PUSH
71393: LD_INT 3
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PPUSH
71400: CALL_OW 72
71404: ST_TO_ADDR
// units_path := [ ] ;
71405: LD_ADDR_VAR 0 16
71409: PUSH
71410: EMPTY
71411: ST_TO_ADDR
// for i = 1 to group do
71412: LD_ADDR_VAR 0 7
71416: PUSH
71417: DOUBLE
71418: LD_INT 1
71420: DEC
71421: ST_TO_ADDR
71422: LD_VAR 0 4
71426: PUSH
71427: FOR_TO
71428: IFFALSE 71457
// units_path := Replace ( units_path , i , path ) ;
71430: LD_ADDR_VAR 0 16
71434: PUSH
71435: LD_VAR 0 16
71439: PPUSH
71440: LD_VAR 0 7
71444: PPUSH
71445: LD_VAR 0 5
71449: PPUSH
71450: CALL_OW 1
71454: ST_TO_ADDR
71455: GO 71427
71457: POP
71458: POP
// repeat for i = group downto 1 do
71459: LD_ADDR_VAR 0 7
71463: PUSH
71464: DOUBLE
71465: LD_VAR 0 4
71469: INC
71470: ST_TO_ADDR
71471: LD_INT 1
71473: PUSH
71474: FOR_DOWNTO
71475: IFFALSE 75597
// begin wait ( 5 ) ;
71477: LD_INT 5
71479: PPUSH
71480: CALL_OW 67
// tmp := [ ] ;
71484: LD_ADDR_VAR 0 14
71488: PUSH
71489: EMPTY
71490: ST_TO_ADDR
// attacking := false ;
71491: LD_ADDR_VAR 0 29
71495: PUSH
71496: LD_INT 0
71498: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
71499: LD_VAR 0 4
71503: PUSH
71504: LD_VAR 0 7
71508: ARRAY
71509: PPUSH
71510: CALL_OW 301
71514: PUSH
71515: LD_VAR 0 4
71519: PUSH
71520: LD_VAR 0 7
71524: ARRAY
71525: NOT
71526: OR
71527: IFFALSE 71636
// begin if GetType ( group [ i ] ) = unit_human then
71529: LD_VAR 0 4
71533: PUSH
71534: LD_VAR 0 7
71538: ARRAY
71539: PPUSH
71540: CALL_OW 247
71544: PUSH
71545: LD_INT 1
71547: EQUAL
71548: IFFALSE 71594
// begin to_heal := to_heal diff group [ i ] ;
71550: LD_ADDR_VAR 0 30
71554: PUSH
71555: LD_VAR 0 30
71559: PUSH
71560: LD_VAR 0 4
71564: PUSH
71565: LD_VAR 0 7
71569: ARRAY
71570: DIFF
71571: ST_TO_ADDR
// healers := healers diff group [ i ] ;
71572: LD_ADDR_VAR 0 31
71576: PUSH
71577: LD_VAR 0 31
71581: PUSH
71582: LD_VAR 0 4
71586: PUSH
71587: LD_VAR 0 7
71591: ARRAY
71592: DIFF
71593: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
71594: LD_ADDR_VAR 0 4
71598: PUSH
71599: LD_VAR 0 4
71603: PPUSH
71604: LD_VAR 0 7
71608: PPUSH
71609: CALL_OW 3
71613: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
71614: LD_ADDR_VAR 0 16
71618: PUSH
71619: LD_VAR 0 16
71623: PPUSH
71624: LD_VAR 0 7
71628: PPUSH
71629: CALL_OW 3
71633: ST_TO_ADDR
// continue ;
71634: GO 71474
// end ; if f_repair then
71636: LD_VAR 0 22
71640: IFFALSE 72129
// begin if GetType ( group [ i ] ) = unit_vehicle then
71642: LD_VAR 0 4
71646: PUSH
71647: LD_VAR 0 7
71651: ARRAY
71652: PPUSH
71653: CALL_OW 247
71657: PUSH
71658: LD_INT 2
71660: EQUAL
71661: IFFALSE 71851
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
71663: LD_VAR 0 4
71667: PUSH
71668: LD_VAR 0 7
71672: ARRAY
71673: PPUSH
71674: CALL_OW 256
71678: PUSH
71679: LD_INT 700
71681: LESS
71682: PUSH
71683: LD_VAR 0 4
71687: PUSH
71688: LD_VAR 0 7
71692: ARRAY
71693: PUSH
71694: LD_VAR 0 32
71698: IN
71699: NOT
71700: AND
71701: IFFALSE 71725
// to_repair := to_repair union group [ i ] ;
71703: LD_ADDR_VAR 0 32
71707: PUSH
71708: LD_VAR 0 32
71712: PUSH
71713: LD_VAR 0 4
71717: PUSH
71718: LD_VAR 0 7
71722: ARRAY
71723: UNION
71724: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
71725: LD_VAR 0 4
71729: PUSH
71730: LD_VAR 0 7
71734: ARRAY
71735: PPUSH
71736: CALL_OW 256
71740: PUSH
71741: LD_INT 1000
71743: EQUAL
71744: PUSH
71745: LD_VAR 0 4
71749: PUSH
71750: LD_VAR 0 7
71754: ARRAY
71755: PUSH
71756: LD_VAR 0 32
71760: IN
71761: AND
71762: IFFALSE 71786
// to_repair := to_repair diff group [ i ] ;
71764: LD_ADDR_VAR 0 32
71768: PUSH
71769: LD_VAR 0 32
71773: PUSH
71774: LD_VAR 0 4
71778: PUSH
71779: LD_VAR 0 7
71783: ARRAY
71784: DIFF
71785: ST_TO_ADDR
// if group [ i ] in to_repair then
71786: LD_VAR 0 4
71790: PUSH
71791: LD_VAR 0 7
71795: ARRAY
71796: PUSH
71797: LD_VAR 0 32
71801: IN
71802: IFFALSE 71849
// begin if not IsInArea ( group [ i ] , f_repair ) then
71804: LD_VAR 0 4
71808: PUSH
71809: LD_VAR 0 7
71813: ARRAY
71814: PPUSH
71815: LD_VAR 0 22
71819: PPUSH
71820: CALL_OW 308
71824: NOT
71825: IFFALSE 71847
// ComMoveToArea ( group [ i ] , f_repair ) ;
71827: LD_VAR 0 4
71831: PUSH
71832: LD_VAR 0 7
71836: ARRAY
71837: PPUSH
71838: LD_VAR 0 22
71842: PPUSH
71843: CALL_OW 113
// continue ;
71847: GO 71474
// end ; end else
71849: GO 72129
// if group [ i ] in repairs then
71851: LD_VAR 0 4
71855: PUSH
71856: LD_VAR 0 7
71860: ARRAY
71861: PUSH
71862: LD_VAR 0 33
71866: IN
71867: IFFALSE 72129
// begin if IsInUnit ( group [ i ] ) then
71869: LD_VAR 0 4
71873: PUSH
71874: LD_VAR 0 7
71878: ARRAY
71879: PPUSH
71880: CALL_OW 310
71884: IFFALSE 71952
// begin z := IsInUnit ( group [ i ] ) ;
71886: LD_ADDR_VAR 0 13
71890: PUSH
71891: LD_VAR 0 4
71895: PUSH
71896: LD_VAR 0 7
71900: ARRAY
71901: PPUSH
71902: CALL_OW 310
71906: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
71907: LD_VAR 0 13
71911: PUSH
71912: LD_VAR 0 32
71916: IN
71917: PUSH
71918: LD_VAR 0 13
71922: PPUSH
71923: LD_VAR 0 22
71927: PPUSH
71928: CALL_OW 308
71932: AND
71933: IFFALSE 71950
// ComExitVehicle ( group [ i ] ) ;
71935: LD_VAR 0 4
71939: PUSH
71940: LD_VAR 0 7
71944: ARRAY
71945: PPUSH
71946: CALL_OW 121
// end else
71950: GO 72129
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
71952: LD_ADDR_VAR 0 13
71956: PUSH
71957: LD_VAR 0 4
71961: PPUSH
71962: LD_INT 95
71964: PUSH
71965: LD_VAR 0 22
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 58
71976: PUSH
71977: EMPTY
71978: LIST
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PPUSH
71984: CALL_OW 72
71988: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
71989: LD_VAR 0 4
71993: PUSH
71994: LD_VAR 0 7
71998: ARRAY
71999: PPUSH
72000: CALL_OW 314
72004: NOT
72005: IFFALSE 72127
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
72007: LD_ADDR_VAR 0 10
72011: PUSH
72012: LD_VAR 0 13
72016: PPUSH
72017: LD_VAR 0 4
72021: PUSH
72022: LD_VAR 0 7
72026: ARRAY
72027: PPUSH
72028: CALL_OW 74
72032: ST_TO_ADDR
// if not x then
72033: LD_VAR 0 10
72037: NOT
72038: IFFALSE 72042
// continue ;
72040: GO 71474
// if GetLives ( x ) < 1000 then
72042: LD_VAR 0 10
72046: PPUSH
72047: CALL_OW 256
72051: PUSH
72052: LD_INT 1000
72054: LESS
72055: IFFALSE 72079
// ComRepairVehicle ( group [ i ] , x ) else
72057: LD_VAR 0 4
72061: PUSH
72062: LD_VAR 0 7
72066: ARRAY
72067: PPUSH
72068: LD_VAR 0 10
72072: PPUSH
72073: CALL_OW 129
72077: GO 72127
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
72079: LD_VAR 0 23
72083: PUSH
72084: LD_VAR 0 4
72088: PUSH
72089: LD_VAR 0 7
72093: ARRAY
72094: PPUSH
72095: CALL_OW 256
72099: PUSH
72100: LD_INT 1000
72102: LESS
72103: AND
72104: NOT
72105: IFFALSE 72127
// ComEnterUnit ( group [ i ] , x ) ;
72107: LD_VAR 0 4
72111: PUSH
72112: LD_VAR 0 7
72116: ARRAY
72117: PPUSH
72118: LD_VAR 0 10
72122: PPUSH
72123: CALL_OW 120
// end ; continue ;
72127: GO 71474
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
72129: LD_VAR 0 23
72133: PUSH
72134: LD_VAR 0 4
72138: PUSH
72139: LD_VAR 0 7
72143: ARRAY
72144: PPUSH
72145: CALL_OW 247
72149: PUSH
72150: LD_INT 1
72152: EQUAL
72153: AND
72154: IFFALSE 72632
// begin if group [ i ] in healers then
72156: LD_VAR 0 4
72160: PUSH
72161: LD_VAR 0 7
72165: ARRAY
72166: PUSH
72167: LD_VAR 0 31
72171: IN
72172: IFFALSE 72445
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
72174: LD_VAR 0 4
72178: PUSH
72179: LD_VAR 0 7
72183: ARRAY
72184: PPUSH
72185: LD_VAR 0 23
72189: PPUSH
72190: CALL_OW 308
72194: NOT
72195: PUSH
72196: LD_VAR 0 4
72200: PUSH
72201: LD_VAR 0 7
72205: ARRAY
72206: PPUSH
72207: CALL_OW 314
72211: NOT
72212: AND
72213: IFFALSE 72237
// ComMoveToArea ( group [ i ] , f_heal ) else
72215: LD_VAR 0 4
72219: PUSH
72220: LD_VAR 0 7
72224: ARRAY
72225: PPUSH
72226: LD_VAR 0 23
72230: PPUSH
72231: CALL_OW 113
72235: GO 72443
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
72237: LD_VAR 0 4
72241: PUSH
72242: LD_VAR 0 7
72246: ARRAY
72247: PPUSH
72248: CALL 37768 0 1
72252: PPUSH
72253: CALL_OW 256
72257: PUSH
72258: LD_INT 1000
72260: EQUAL
72261: IFFALSE 72280
// ComStop ( group [ i ] ) else
72263: LD_VAR 0 4
72267: PUSH
72268: LD_VAR 0 7
72272: ARRAY
72273: PPUSH
72274: CALL_OW 141
72278: GO 72443
// if not HasTask ( group [ i ] ) and to_heal then
72280: LD_VAR 0 4
72284: PUSH
72285: LD_VAR 0 7
72289: ARRAY
72290: PPUSH
72291: CALL_OW 314
72295: NOT
72296: PUSH
72297: LD_VAR 0 30
72301: AND
72302: IFFALSE 72443
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
72304: LD_ADDR_VAR 0 13
72308: PUSH
72309: LD_VAR 0 30
72313: PPUSH
72314: LD_INT 3
72316: PUSH
72317: LD_INT 54
72319: PUSH
72320: EMPTY
72321: LIST
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PPUSH
72327: CALL_OW 72
72331: PPUSH
72332: LD_VAR 0 4
72336: PUSH
72337: LD_VAR 0 7
72341: ARRAY
72342: PPUSH
72343: CALL_OW 74
72347: ST_TO_ADDR
// if z then
72348: LD_VAR 0 13
72352: IFFALSE 72443
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
72354: LD_INT 91
72356: PUSH
72357: LD_VAR 0 13
72361: PUSH
72362: LD_INT 10
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 81
72372: PUSH
72373: LD_VAR 0 13
72377: PPUSH
72378: CALL_OW 255
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PPUSH
72391: CALL_OW 69
72395: PUSH
72396: LD_INT 0
72398: EQUAL
72399: IFFALSE 72423
// ComHeal ( group [ i ] , z ) else
72401: LD_VAR 0 4
72405: PUSH
72406: LD_VAR 0 7
72410: ARRAY
72411: PPUSH
72412: LD_VAR 0 13
72416: PPUSH
72417: CALL_OW 128
72421: GO 72443
// ComMoveToArea ( group [ i ] , f_heal ) ;
72423: LD_VAR 0 4
72427: PUSH
72428: LD_VAR 0 7
72432: ARRAY
72433: PPUSH
72434: LD_VAR 0 23
72438: PPUSH
72439: CALL_OW 113
// end ; continue ;
72443: GO 71474
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
72445: LD_VAR 0 4
72449: PUSH
72450: LD_VAR 0 7
72454: ARRAY
72455: PPUSH
72456: CALL_OW 256
72460: PUSH
72461: LD_INT 700
72463: LESS
72464: PUSH
72465: LD_VAR 0 4
72469: PUSH
72470: LD_VAR 0 7
72474: ARRAY
72475: PUSH
72476: LD_VAR 0 30
72480: IN
72481: NOT
72482: AND
72483: IFFALSE 72507
// to_heal := to_heal union group [ i ] ;
72485: LD_ADDR_VAR 0 30
72489: PUSH
72490: LD_VAR 0 30
72494: PUSH
72495: LD_VAR 0 4
72499: PUSH
72500: LD_VAR 0 7
72504: ARRAY
72505: UNION
72506: ST_TO_ADDR
// if group [ i ] in to_heal then
72507: LD_VAR 0 4
72511: PUSH
72512: LD_VAR 0 7
72516: ARRAY
72517: PUSH
72518: LD_VAR 0 30
72522: IN
72523: IFFALSE 72632
// begin if GetLives ( group [ i ] ) = 1000 then
72525: LD_VAR 0 4
72529: PUSH
72530: LD_VAR 0 7
72534: ARRAY
72535: PPUSH
72536: CALL_OW 256
72540: PUSH
72541: LD_INT 1000
72543: EQUAL
72544: IFFALSE 72570
// to_heal := to_heal diff group [ i ] else
72546: LD_ADDR_VAR 0 30
72550: PUSH
72551: LD_VAR 0 30
72555: PUSH
72556: LD_VAR 0 4
72560: PUSH
72561: LD_VAR 0 7
72565: ARRAY
72566: DIFF
72567: ST_TO_ADDR
72568: GO 72632
// begin if not IsInArea ( group [ i ] , to_heal ) then
72570: LD_VAR 0 4
72574: PUSH
72575: LD_VAR 0 7
72579: ARRAY
72580: PPUSH
72581: LD_VAR 0 30
72585: PPUSH
72586: CALL_OW 308
72590: NOT
72591: IFFALSE 72615
// ComMoveToArea ( group [ i ] , f_heal ) else
72593: LD_VAR 0 4
72597: PUSH
72598: LD_VAR 0 7
72602: ARRAY
72603: PPUSH
72604: LD_VAR 0 23
72608: PPUSH
72609: CALL_OW 113
72613: GO 72630
// ComHold ( group [ i ] ) ;
72615: LD_VAR 0 4
72619: PUSH
72620: LD_VAR 0 7
72624: ARRAY
72625: PPUSH
72626: CALL_OW 140
// continue ;
72630: GO 71474
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
72632: LD_VAR 0 4
72636: PUSH
72637: LD_VAR 0 7
72641: ARRAY
72642: PPUSH
72643: LD_INT 10
72645: PPUSH
72646: CALL 36188 0 2
72650: NOT
72651: PUSH
72652: LD_VAR 0 16
72656: PUSH
72657: LD_VAR 0 7
72661: ARRAY
72662: PUSH
72663: EMPTY
72664: EQUAL
72665: NOT
72666: AND
72667: IFFALSE 72933
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
72669: LD_VAR 0 4
72673: PUSH
72674: LD_VAR 0 7
72678: ARRAY
72679: PPUSH
72680: CALL_OW 262
72684: PUSH
72685: LD_INT 1
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: IN
72695: IFFALSE 72736
// if GetFuel ( group [ i ] ) < 10 then
72697: LD_VAR 0 4
72701: PUSH
72702: LD_VAR 0 7
72706: ARRAY
72707: PPUSH
72708: CALL_OW 261
72712: PUSH
72713: LD_INT 10
72715: LESS
72716: IFFALSE 72736
// SetFuel ( group [ i ] , 12 ) ;
72718: LD_VAR 0 4
72722: PUSH
72723: LD_VAR 0 7
72727: ARRAY
72728: PPUSH
72729: LD_INT 12
72731: PPUSH
72732: CALL_OW 240
// if units_path [ i ] then
72736: LD_VAR 0 16
72740: PUSH
72741: LD_VAR 0 7
72745: ARRAY
72746: IFFALSE 72931
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
72748: LD_VAR 0 4
72752: PUSH
72753: LD_VAR 0 7
72757: ARRAY
72758: PPUSH
72759: LD_VAR 0 16
72763: PUSH
72764: LD_VAR 0 7
72768: ARRAY
72769: PUSH
72770: LD_INT 1
72772: ARRAY
72773: PUSH
72774: LD_INT 1
72776: ARRAY
72777: PPUSH
72778: LD_VAR 0 16
72782: PUSH
72783: LD_VAR 0 7
72787: ARRAY
72788: PUSH
72789: LD_INT 1
72791: ARRAY
72792: PUSH
72793: LD_INT 2
72795: ARRAY
72796: PPUSH
72797: CALL_OW 297
72801: PUSH
72802: LD_INT 6
72804: GREATER
72805: IFFALSE 72880
// begin if not HasTask ( group [ i ] ) then
72807: LD_VAR 0 4
72811: PUSH
72812: LD_VAR 0 7
72816: ARRAY
72817: PPUSH
72818: CALL_OW 314
72822: NOT
72823: IFFALSE 72878
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
72825: LD_VAR 0 4
72829: PUSH
72830: LD_VAR 0 7
72834: ARRAY
72835: PPUSH
72836: LD_VAR 0 16
72840: PUSH
72841: LD_VAR 0 7
72845: ARRAY
72846: PUSH
72847: LD_INT 1
72849: ARRAY
72850: PUSH
72851: LD_INT 1
72853: ARRAY
72854: PPUSH
72855: LD_VAR 0 16
72859: PUSH
72860: LD_VAR 0 7
72864: ARRAY
72865: PUSH
72866: LD_INT 1
72868: ARRAY
72869: PUSH
72870: LD_INT 2
72872: ARRAY
72873: PPUSH
72874: CALL_OW 114
// end else
72878: GO 72931
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
72880: LD_ADDR_VAR 0 15
72884: PUSH
72885: LD_VAR 0 16
72889: PUSH
72890: LD_VAR 0 7
72894: ARRAY
72895: PPUSH
72896: LD_INT 1
72898: PPUSH
72899: CALL_OW 3
72903: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
72904: LD_ADDR_VAR 0 16
72908: PUSH
72909: LD_VAR 0 16
72913: PPUSH
72914: LD_VAR 0 7
72918: PPUSH
72919: LD_VAR 0 15
72923: PPUSH
72924: CALL_OW 1
72928: ST_TO_ADDR
// continue ;
72929: GO 71474
// end ; end ; end else
72931: GO 75595
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
72933: LD_ADDR_VAR 0 14
72937: PUSH
72938: LD_INT 81
72940: PUSH
72941: LD_VAR 0 4
72945: PUSH
72946: LD_VAR 0 7
72950: ARRAY
72951: PPUSH
72952: CALL_OW 255
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PPUSH
72961: CALL_OW 69
72965: ST_TO_ADDR
// if not tmp then
72966: LD_VAR 0 14
72970: NOT
72971: IFFALSE 72975
// continue ;
72973: GO 71474
// if f_ignore_area then
72975: LD_VAR 0 17
72979: IFFALSE 73067
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
72981: LD_ADDR_VAR 0 15
72985: PUSH
72986: LD_VAR 0 14
72990: PPUSH
72991: LD_INT 3
72993: PUSH
72994: LD_INT 92
72996: PUSH
72997: LD_VAR 0 17
73001: PUSH
73002: LD_INT 1
73004: ARRAY
73005: PUSH
73006: LD_VAR 0 17
73010: PUSH
73011: LD_INT 2
73013: ARRAY
73014: PUSH
73015: LD_VAR 0 17
73019: PUSH
73020: LD_INT 3
73022: ARRAY
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PPUSH
73034: CALL_OW 72
73038: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
73039: LD_VAR 0 14
73043: PUSH
73044: LD_VAR 0 15
73048: DIFF
73049: IFFALSE 73067
// tmp := tmp diff tmp2 ;
73051: LD_ADDR_VAR 0 14
73055: PUSH
73056: LD_VAR 0 14
73060: PUSH
73061: LD_VAR 0 15
73065: DIFF
73066: ST_TO_ADDR
// end ; if not f_murder then
73067: LD_VAR 0 20
73071: NOT
73072: IFFALSE 73130
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
73074: LD_ADDR_VAR 0 15
73078: PUSH
73079: LD_VAR 0 14
73083: PPUSH
73084: LD_INT 3
73086: PUSH
73087: LD_INT 50
73089: PUSH
73090: EMPTY
73091: LIST
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PPUSH
73097: CALL_OW 72
73101: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
73102: LD_VAR 0 14
73106: PUSH
73107: LD_VAR 0 15
73111: DIFF
73112: IFFALSE 73130
// tmp := tmp diff tmp2 ;
73114: LD_ADDR_VAR 0 14
73118: PUSH
73119: LD_VAR 0 14
73123: PUSH
73124: LD_VAR 0 15
73128: DIFF
73129: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
73130: LD_ADDR_VAR 0 14
73134: PUSH
73135: LD_VAR 0 4
73139: PUSH
73140: LD_VAR 0 7
73144: ARRAY
73145: PPUSH
73146: LD_VAR 0 14
73150: PPUSH
73151: LD_INT 1
73153: PPUSH
73154: LD_INT 1
73156: PPUSH
73157: CALL 9831 0 4
73161: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
73162: LD_VAR 0 4
73166: PUSH
73167: LD_VAR 0 7
73171: ARRAY
73172: PPUSH
73173: CALL_OW 257
73177: PUSH
73178: LD_INT 1
73180: EQUAL
73181: IFFALSE 73629
// begin if WantPlant ( group [ i ] ) then
73183: LD_VAR 0 4
73187: PUSH
73188: LD_VAR 0 7
73192: ARRAY
73193: PPUSH
73194: CALL 9332 0 1
73198: IFFALSE 73202
// continue ;
73200: GO 71474
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
73202: LD_VAR 0 18
73206: PUSH
73207: LD_VAR 0 4
73211: PUSH
73212: LD_VAR 0 7
73216: ARRAY
73217: PPUSH
73218: CALL_OW 310
73222: NOT
73223: AND
73224: PUSH
73225: LD_VAR 0 14
73229: PUSH
73230: LD_INT 1
73232: ARRAY
73233: PUSH
73234: LD_VAR 0 14
73238: PPUSH
73239: LD_INT 21
73241: PUSH
73242: LD_INT 2
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 58
73251: PUSH
73252: EMPTY
73253: LIST
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PPUSH
73259: CALL_OW 72
73263: IN
73264: AND
73265: IFFALSE 73301
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
73267: LD_VAR 0 4
73271: PUSH
73272: LD_VAR 0 7
73276: ARRAY
73277: PPUSH
73278: LD_VAR 0 14
73282: PUSH
73283: LD_INT 1
73285: ARRAY
73286: PPUSH
73287: CALL_OW 120
// attacking := true ;
73291: LD_ADDR_VAR 0 29
73295: PUSH
73296: LD_INT 1
73298: ST_TO_ADDR
// continue ;
73299: GO 71474
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
73301: LD_VAR 0 26
73305: PUSH
73306: LD_VAR 0 4
73310: PUSH
73311: LD_VAR 0 7
73315: ARRAY
73316: PPUSH
73317: CALL_OW 257
73321: PUSH
73322: LD_INT 1
73324: EQUAL
73325: AND
73326: PUSH
73327: LD_VAR 0 4
73331: PUSH
73332: LD_VAR 0 7
73336: ARRAY
73337: PPUSH
73338: CALL_OW 256
73342: PUSH
73343: LD_INT 800
73345: LESS
73346: AND
73347: PUSH
73348: LD_VAR 0 4
73352: PUSH
73353: LD_VAR 0 7
73357: ARRAY
73358: PPUSH
73359: CALL_OW 318
73363: NOT
73364: AND
73365: IFFALSE 73382
// ComCrawl ( group [ i ] ) ;
73367: LD_VAR 0 4
73371: PUSH
73372: LD_VAR 0 7
73376: ARRAY
73377: PPUSH
73378: CALL_OW 137
// if f_mines then
73382: LD_VAR 0 21
73386: IFFALSE 73629
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
73388: LD_VAR 0 14
73392: PUSH
73393: LD_INT 1
73395: ARRAY
73396: PPUSH
73397: CALL_OW 247
73401: PUSH
73402: LD_INT 3
73404: EQUAL
73405: PUSH
73406: LD_VAR 0 14
73410: PUSH
73411: LD_INT 1
73413: ARRAY
73414: PUSH
73415: LD_VAR 0 27
73419: IN
73420: NOT
73421: AND
73422: IFFALSE 73629
// begin x := GetX ( tmp [ 1 ] ) ;
73424: LD_ADDR_VAR 0 10
73428: PUSH
73429: LD_VAR 0 14
73433: PUSH
73434: LD_INT 1
73436: ARRAY
73437: PPUSH
73438: CALL_OW 250
73442: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
73443: LD_ADDR_VAR 0 11
73447: PUSH
73448: LD_VAR 0 14
73452: PUSH
73453: LD_INT 1
73455: ARRAY
73456: PPUSH
73457: CALL_OW 251
73461: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
73462: LD_ADDR_VAR 0 12
73466: PUSH
73467: LD_VAR 0 4
73471: PUSH
73472: LD_VAR 0 7
73476: ARRAY
73477: PPUSH
73478: CALL 36273 0 1
73482: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
73483: LD_VAR 0 4
73487: PUSH
73488: LD_VAR 0 7
73492: ARRAY
73493: PPUSH
73494: LD_VAR 0 10
73498: PPUSH
73499: LD_VAR 0 11
73503: PPUSH
73504: LD_VAR 0 14
73508: PUSH
73509: LD_INT 1
73511: ARRAY
73512: PPUSH
73513: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
73517: LD_VAR 0 4
73521: PUSH
73522: LD_VAR 0 7
73526: ARRAY
73527: PPUSH
73528: LD_VAR 0 10
73532: PPUSH
73533: LD_VAR 0 12
73537: PPUSH
73538: LD_INT 7
73540: PPUSH
73541: CALL_OW 272
73545: PPUSH
73546: LD_VAR 0 11
73550: PPUSH
73551: LD_VAR 0 12
73555: PPUSH
73556: LD_INT 7
73558: PPUSH
73559: CALL_OW 273
73563: PPUSH
73564: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
73568: LD_VAR 0 4
73572: PUSH
73573: LD_VAR 0 7
73577: ARRAY
73578: PPUSH
73579: LD_INT 71
73581: PPUSH
73582: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
73586: LD_ADDR_VAR 0 27
73590: PUSH
73591: LD_VAR 0 27
73595: PPUSH
73596: LD_VAR 0 27
73600: PUSH
73601: LD_INT 1
73603: PLUS
73604: PPUSH
73605: LD_VAR 0 14
73609: PUSH
73610: LD_INT 1
73612: ARRAY
73613: PPUSH
73614: CALL_OW 1
73618: ST_TO_ADDR
// attacking := true ;
73619: LD_ADDR_VAR 0 29
73623: PUSH
73624: LD_INT 1
73626: ST_TO_ADDR
// continue ;
73627: GO 71474
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
73629: LD_VAR 0 4
73633: PUSH
73634: LD_VAR 0 7
73638: ARRAY
73639: PPUSH
73640: CALL_OW 257
73644: PUSH
73645: LD_INT 17
73647: EQUAL
73648: PUSH
73649: LD_VAR 0 4
73653: PUSH
73654: LD_VAR 0 7
73658: ARRAY
73659: PPUSH
73660: CALL_OW 110
73664: PUSH
73665: LD_INT 71
73667: EQUAL
73668: NOT
73669: AND
73670: IFFALSE 73816
// begin attacking := false ;
73672: LD_ADDR_VAR 0 29
73676: PUSH
73677: LD_INT 0
73679: ST_TO_ADDR
// k := 5 ;
73680: LD_ADDR_VAR 0 9
73684: PUSH
73685: LD_INT 5
73687: ST_TO_ADDR
// if tmp < k then
73688: LD_VAR 0 14
73692: PUSH
73693: LD_VAR 0 9
73697: LESS
73698: IFFALSE 73710
// k := tmp ;
73700: LD_ADDR_VAR 0 9
73704: PUSH
73705: LD_VAR 0 14
73709: ST_TO_ADDR
// for j = 1 to k do
73710: LD_ADDR_VAR 0 8
73714: PUSH
73715: DOUBLE
73716: LD_INT 1
73718: DEC
73719: ST_TO_ADDR
73720: LD_VAR 0 9
73724: PUSH
73725: FOR_TO
73726: IFFALSE 73814
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
73728: LD_VAR 0 14
73732: PUSH
73733: LD_VAR 0 8
73737: ARRAY
73738: PUSH
73739: LD_VAR 0 14
73743: PPUSH
73744: LD_INT 58
73746: PUSH
73747: EMPTY
73748: LIST
73749: PPUSH
73750: CALL_OW 72
73754: IN
73755: NOT
73756: IFFALSE 73812
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
73758: LD_VAR 0 4
73762: PUSH
73763: LD_VAR 0 7
73767: ARRAY
73768: PPUSH
73769: LD_VAR 0 14
73773: PUSH
73774: LD_VAR 0 8
73778: ARRAY
73779: PPUSH
73780: CALL_OW 115
// attacking := true ;
73784: LD_ADDR_VAR 0 29
73788: PUSH
73789: LD_INT 1
73791: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
73792: LD_VAR 0 4
73796: PUSH
73797: LD_VAR 0 7
73801: ARRAY
73802: PPUSH
73803: LD_INT 71
73805: PPUSH
73806: CALL_OW 109
// continue ;
73810: GO 73725
// end ; end ;
73812: GO 73725
73814: POP
73815: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
73816: LD_VAR 0 4
73820: PUSH
73821: LD_VAR 0 7
73825: ARRAY
73826: PPUSH
73827: CALL_OW 257
73831: PUSH
73832: LD_INT 8
73834: EQUAL
73835: PUSH
73836: LD_VAR 0 4
73840: PUSH
73841: LD_VAR 0 7
73845: ARRAY
73846: PPUSH
73847: CALL_OW 264
73851: PUSH
73852: LD_INT 28
73854: PUSH
73855: LD_INT 45
73857: PUSH
73858: LD_INT 7
73860: PUSH
73861: LD_INT 47
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: IN
73870: OR
73871: IFFALSE 74127
// begin attacking := false ;
73873: LD_ADDR_VAR 0 29
73877: PUSH
73878: LD_INT 0
73880: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
73881: LD_VAR 0 14
73885: PUSH
73886: LD_INT 1
73888: ARRAY
73889: PPUSH
73890: CALL_OW 266
73894: PUSH
73895: LD_INT 32
73897: PUSH
73898: LD_INT 31
73900: PUSH
73901: LD_INT 33
73903: PUSH
73904: LD_INT 4
73906: PUSH
73907: LD_INT 5
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: IN
73917: IFFALSE 74103
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
73919: LD_ADDR_VAR 0 9
73923: PUSH
73924: LD_VAR 0 14
73928: PUSH
73929: LD_INT 1
73931: ARRAY
73932: PPUSH
73933: CALL_OW 266
73937: PPUSH
73938: LD_VAR 0 14
73942: PUSH
73943: LD_INT 1
73945: ARRAY
73946: PPUSH
73947: CALL_OW 250
73951: PPUSH
73952: LD_VAR 0 14
73956: PUSH
73957: LD_INT 1
73959: ARRAY
73960: PPUSH
73961: CALL_OW 251
73965: PPUSH
73966: LD_VAR 0 14
73970: PUSH
73971: LD_INT 1
73973: ARRAY
73974: PPUSH
73975: CALL_OW 254
73979: PPUSH
73980: LD_VAR 0 14
73984: PUSH
73985: LD_INT 1
73987: ARRAY
73988: PPUSH
73989: CALL_OW 248
73993: PPUSH
73994: LD_INT 0
73996: PPUSH
73997: CALL 17643 0 6
74001: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
74002: LD_ADDR_VAR 0 8
74006: PUSH
74007: LD_VAR 0 4
74011: PUSH
74012: LD_VAR 0 7
74016: ARRAY
74017: PPUSH
74018: LD_VAR 0 9
74022: PPUSH
74023: CALL 36313 0 2
74027: ST_TO_ADDR
// if j then
74028: LD_VAR 0 8
74032: IFFALSE 74101
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
74034: LD_VAR 0 8
74038: PUSH
74039: LD_INT 1
74041: ARRAY
74042: PPUSH
74043: LD_VAR 0 8
74047: PUSH
74048: LD_INT 2
74050: ARRAY
74051: PPUSH
74052: CALL_OW 488
74056: IFFALSE 74101
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
74058: LD_VAR 0 4
74062: PUSH
74063: LD_VAR 0 7
74067: ARRAY
74068: PPUSH
74069: LD_VAR 0 8
74073: PUSH
74074: LD_INT 1
74076: ARRAY
74077: PPUSH
74078: LD_VAR 0 8
74082: PUSH
74083: LD_INT 2
74085: ARRAY
74086: PPUSH
74087: CALL_OW 116
// attacking := true ;
74091: LD_ADDR_VAR 0 29
74095: PUSH
74096: LD_INT 1
74098: ST_TO_ADDR
// continue ;
74099: GO 71474
// end ; end else
74101: GO 74127
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74103: LD_VAR 0 4
74107: PUSH
74108: LD_VAR 0 7
74112: ARRAY
74113: PPUSH
74114: LD_VAR 0 14
74118: PUSH
74119: LD_INT 1
74121: ARRAY
74122: PPUSH
74123: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
74127: LD_VAR 0 4
74131: PUSH
74132: LD_VAR 0 7
74136: ARRAY
74137: PPUSH
74138: CALL_OW 265
74142: PUSH
74143: LD_INT 11
74145: EQUAL
74146: IFFALSE 74424
// begin k := 10 ;
74148: LD_ADDR_VAR 0 9
74152: PUSH
74153: LD_INT 10
74155: ST_TO_ADDR
// x := 0 ;
74156: LD_ADDR_VAR 0 10
74160: PUSH
74161: LD_INT 0
74163: ST_TO_ADDR
// if tmp < k then
74164: LD_VAR 0 14
74168: PUSH
74169: LD_VAR 0 9
74173: LESS
74174: IFFALSE 74186
// k := tmp ;
74176: LD_ADDR_VAR 0 9
74180: PUSH
74181: LD_VAR 0 14
74185: ST_TO_ADDR
// for j = k downto 1 do
74186: LD_ADDR_VAR 0 8
74190: PUSH
74191: DOUBLE
74192: LD_VAR 0 9
74196: INC
74197: ST_TO_ADDR
74198: LD_INT 1
74200: PUSH
74201: FOR_DOWNTO
74202: IFFALSE 74277
// begin if GetType ( tmp [ j ] ) = unit_human then
74204: LD_VAR 0 14
74208: PUSH
74209: LD_VAR 0 8
74213: ARRAY
74214: PPUSH
74215: CALL_OW 247
74219: PUSH
74220: LD_INT 1
74222: EQUAL
74223: IFFALSE 74275
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
74225: LD_VAR 0 4
74229: PUSH
74230: LD_VAR 0 7
74234: ARRAY
74235: PPUSH
74236: LD_VAR 0 14
74240: PUSH
74241: LD_VAR 0 8
74245: ARRAY
74246: PPUSH
74247: CALL 36584 0 2
// x := tmp [ j ] ;
74251: LD_ADDR_VAR 0 10
74255: PUSH
74256: LD_VAR 0 14
74260: PUSH
74261: LD_VAR 0 8
74265: ARRAY
74266: ST_TO_ADDR
// attacking := true ;
74267: LD_ADDR_VAR 0 29
74271: PUSH
74272: LD_INT 1
74274: ST_TO_ADDR
// end ; end ;
74275: GO 74201
74277: POP
74278: POP
// if not x then
74279: LD_VAR 0 10
74283: NOT
74284: IFFALSE 74424
// begin attacking := true ;
74286: LD_ADDR_VAR 0 29
74290: PUSH
74291: LD_INT 1
74293: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
74294: LD_VAR 0 4
74298: PUSH
74299: LD_VAR 0 7
74303: ARRAY
74304: PPUSH
74305: CALL_OW 250
74309: PPUSH
74310: LD_VAR 0 4
74314: PUSH
74315: LD_VAR 0 7
74319: ARRAY
74320: PPUSH
74321: CALL_OW 251
74325: PPUSH
74326: CALL_OW 546
74330: PUSH
74331: LD_INT 2
74333: ARRAY
74334: PUSH
74335: LD_VAR 0 14
74339: PUSH
74340: LD_INT 1
74342: ARRAY
74343: PPUSH
74344: CALL_OW 250
74348: PPUSH
74349: LD_VAR 0 14
74353: PUSH
74354: LD_INT 1
74356: ARRAY
74357: PPUSH
74358: CALL_OW 251
74362: PPUSH
74363: CALL_OW 546
74367: PUSH
74368: LD_INT 2
74370: ARRAY
74371: EQUAL
74372: IFFALSE 74400
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
74374: LD_VAR 0 4
74378: PUSH
74379: LD_VAR 0 7
74383: ARRAY
74384: PPUSH
74385: LD_VAR 0 14
74389: PUSH
74390: LD_INT 1
74392: ARRAY
74393: PPUSH
74394: CALL 36584 0 2
74398: GO 74424
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74400: LD_VAR 0 4
74404: PUSH
74405: LD_VAR 0 7
74409: ARRAY
74410: PPUSH
74411: LD_VAR 0 14
74415: PUSH
74416: LD_INT 1
74418: ARRAY
74419: PPUSH
74420: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
74424: LD_VAR 0 4
74428: PUSH
74429: LD_VAR 0 7
74433: ARRAY
74434: PPUSH
74435: CALL_OW 264
74439: PUSH
74440: LD_INT 29
74442: EQUAL
74443: IFFALSE 74809
// begin if WantsToAttack ( group [ i ] ) in bombed then
74445: LD_VAR 0 4
74449: PUSH
74450: LD_VAR 0 7
74454: ARRAY
74455: PPUSH
74456: CALL_OW 319
74460: PUSH
74461: LD_VAR 0 28
74465: IN
74466: IFFALSE 74470
// continue ;
74468: GO 71474
// k := 8 ;
74470: LD_ADDR_VAR 0 9
74474: PUSH
74475: LD_INT 8
74477: ST_TO_ADDR
// x := 0 ;
74478: LD_ADDR_VAR 0 10
74482: PUSH
74483: LD_INT 0
74485: ST_TO_ADDR
// if tmp < k then
74486: LD_VAR 0 14
74490: PUSH
74491: LD_VAR 0 9
74495: LESS
74496: IFFALSE 74508
// k := tmp ;
74498: LD_ADDR_VAR 0 9
74502: PUSH
74503: LD_VAR 0 14
74507: ST_TO_ADDR
// for j = 1 to k do
74508: LD_ADDR_VAR 0 8
74512: PUSH
74513: DOUBLE
74514: LD_INT 1
74516: DEC
74517: ST_TO_ADDR
74518: LD_VAR 0 9
74522: PUSH
74523: FOR_TO
74524: IFFALSE 74656
// begin if GetType ( tmp [ j ] ) = unit_building then
74526: LD_VAR 0 14
74530: PUSH
74531: LD_VAR 0 8
74535: ARRAY
74536: PPUSH
74537: CALL_OW 247
74541: PUSH
74542: LD_INT 3
74544: EQUAL
74545: IFFALSE 74654
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
74547: LD_VAR 0 14
74551: PUSH
74552: LD_VAR 0 8
74556: ARRAY
74557: PUSH
74558: LD_VAR 0 28
74562: IN
74563: NOT
74564: PUSH
74565: LD_VAR 0 14
74569: PUSH
74570: LD_VAR 0 8
74574: ARRAY
74575: PPUSH
74576: CALL_OW 313
74580: AND
74581: IFFALSE 74654
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74583: LD_VAR 0 4
74587: PUSH
74588: LD_VAR 0 7
74592: ARRAY
74593: PPUSH
74594: LD_VAR 0 14
74598: PUSH
74599: LD_VAR 0 8
74603: ARRAY
74604: PPUSH
74605: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
74609: LD_ADDR_VAR 0 28
74613: PUSH
74614: LD_VAR 0 28
74618: PPUSH
74619: LD_VAR 0 28
74623: PUSH
74624: LD_INT 1
74626: PLUS
74627: PPUSH
74628: LD_VAR 0 14
74632: PUSH
74633: LD_VAR 0 8
74637: ARRAY
74638: PPUSH
74639: CALL_OW 1
74643: ST_TO_ADDR
// attacking := true ;
74644: LD_ADDR_VAR 0 29
74648: PUSH
74649: LD_INT 1
74651: ST_TO_ADDR
// break ;
74652: GO 74656
// end ; end ;
74654: GO 74523
74656: POP
74657: POP
// if not attacking and f_attack_depot then
74658: LD_VAR 0 29
74662: NOT
74663: PUSH
74664: LD_VAR 0 25
74668: AND
74669: IFFALSE 74764
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74671: LD_ADDR_VAR 0 13
74675: PUSH
74676: LD_VAR 0 14
74680: PPUSH
74681: LD_INT 2
74683: PUSH
74684: LD_INT 30
74686: PUSH
74687: LD_INT 0
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 30
74696: PUSH
74697: LD_INT 1
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: LIST
74708: PPUSH
74709: CALL_OW 72
74713: ST_TO_ADDR
// if z then
74714: LD_VAR 0 13
74718: IFFALSE 74764
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
74720: LD_VAR 0 4
74724: PUSH
74725: LD_VAR 0 7
74729: ARRAY
74730: PPUSH
74731: LD_VAR 0 13
74735: PPUSH
74736: LD_VAR 0 4
74740: PUSH
74741: LD_VAR 0 7
74745: ARRAY
74746: PPUSH
74747: CALL_OW 74
74751: PPUSH
74752: CALL_OW 115
// attacking := true ;
74756: LD_ADDR_VAR 0 29
74760: PUSH
74761: LD_INT 1
74763: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
74764: LD_VAR 0 4
74768: PUSH
74769: LD_VAR 0 7
74773: ARRAY
74774: PPUSH
74775: CALL_OW 256
74779: PUSH
74780: LD_INT 500
74782: LESS
74783: IFFALSE 74809
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74785: LD_VAR 0 4
74789: PUSH
74790: LD_VAR 0 7
74794: ARRAY
74795: PPUSH
74796: LD_VAR 0 14
74800: PUSH
74801: LD_INT 1
74803: ARRAY
74804: PPUSH
74805: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
74809: LD_VAR 0 4
74813: PUSH
74814: LD_VAR 0 7
74818: ARRAY
74819: PPUSH
74820: CALL_OW 264
74824: PUSH
74825: LD_INT 49
74827: EQUAL
74828: IFFALSE 74949
// begin if not HasTask ( group [ i ] ) then
74830: LD_VAR 0 4
74834: PUSH
74835: LD_VAR 0 7
74839: ARRAY
74840: PPUSH
74841: CALL_OW 314
74845: NOT
74846: IFFALSE 74949
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
74848: LD_ADDR_VAR 0 9
74852: PUSH
74853: LD_INT 81
74855: PUSH
74856: LD_VAR 0 4
74860: PUSH
74861: LD_VAR 0 7
74865: ARRAY
74866: PPUSH
74867: CALL_OW 255
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PPUSH
74876: CALL_OW 69
74880: PPUSH
74881: LD_VAR 0 4
74885: PUSH
74886: LD_VAR 0 7
74890: ARRAY
74891: PPUSH
74892: CALL_OW 74
74896: ST_TO_ADDR
// if k then
74897: LD_VAR 0 9
74901: IFFALSE 74949
// if GetDistUnits ( group [ i ] , k ) > 10 then
74903: LD_VAR 0 4
74907: PUSH
74908: LD_VAR 0 7
74912: ARRAY
74913: PPUSH
74914: LD_VAR 0 9
74918: PPUSH
74919: CALL_OW 296
74923: PUSH
74924: LD_INT 10
74926: GREATER
74927: IFFALSE 74949
// ComMoveUnit ( group [ i ] , k ) ;
74929: LD_VAR 0 4
74933: PUSH
74934: LD_VAR 0 7
74938: ARRAY
74939: PPUSH
74940: LD_VAR 0 9
74944: PPUSH
74945: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74949: LD_VAR 0 4
74953: PUSH
74954: LD_VAR 0 7
74958: ARRAY
74959: PPUSH
74960: CALL_OW 256
74964: PUSH
74965: LD_INT 250
74967: LESS
74968: PUSH
74969: LD_VAR 0 4
74973: PUSH
74974: LD_VAR 0 7
74978: ARRAY
74979: PUSH
74980: LD_INT 21
74982: PUSH
74983: LD_INT 2
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 23
74992: PUSH
74993: LD_INT 2
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PPUSH
75004: CALL_OW 69
75008: IN
75009: AND
75010: IFFALSE 75135
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
75012: LD_ADDR_VAR 0 9
75016: PUSH
75017: LD_OWVAR 3
75021: PUSH
75022: LD_VAR 0 4
75026: PUSH
75027: LD_VAR 0 7
75031: ARRAY
75032: DIFF
75033: PPUSH
75034: LD_VAR 0 4
75038: PUSH
75039: LD_VAR 0 7
75043: ARRAY
75044: PPUSH
75045: CALL_OW 74
75049: ST_TO_ADDR
// if not k then
75050: LD_VAR 0 9
75054: NOT
75055: IFFALSE 75059
// continue ;
75057: GO 71474
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
75059: LD_VAR 0 9
75063: PUSH
75064: LD_INT 81
75066: PUSH
75067: LD_VAR 0 4
75071: PUSH
75072: LD_VAR 0 7
75076: ARRAY
75077: PPUSH
75078: CALL_OW 255
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: PPUSH
75087: CALL_OW 69
75091: IN
75092: PUSH
75093: LD_VAR 0 9
75097: PPUSH
75098: LD_VAR 0 4
75102: PUSH
75103: LD_VAR 0 7
75107: ARRAY
75108: PPUSH
75109: CALL_OW 296
75113: PUSH
75114: LD_INT 5
75116: LESS
75117: AND
75118: IFFALSE 75135
// ComAutodestruct ( group [ i ] ) ;
75120: LD_VAR 0 4
75124: PUSH
75125: LD_VAR 0 7
75129: ARRAY
75130: PPUSH
75131: CALL 36482 0 1
// end ; if f_attack_depot then
75135: LD_VAR 0 25
75139: IFFALSE 75251
// begin k := 6 ;
75141: LD_ADDR_VAR 0 9
75145: PUSH
75146: LD_INT 6
75148: ST_TO_ADDR
// if tmp < k then
75149: LD_VAR 0 14
75153: PUSH
75154: LD_VAR 0 9
75158: LESS
75159: IFFALSE 75171
// k := tmp ;
75161: LD_ADDR_VAR 0 9
75165: PUSH
75166: LD_VAR 0 14
75170: ST_TO_ADDR
// for j = 1 to k do
75171: LD_ADDR_VAR 0 8
75175: PUSH
75176: DOUBLE
75177: LD_INT 1
75179: DEC
75180: ST_TO_ADDR
75181: LD_VAR 0 9
75185: PUSH
75186: FOR_TO
75187: IFFALSE 75249
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
75189: LD_VAR 0 8
75193: PPUSH
75194: CALL_OW 266
75198: PUSH
75199: LD_INT 0
75201: PUSH
75202: LD_INT 1
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: IN
75209: IFFALSE 75247
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
75211: LD_VAR 0 4
75215: PUSH
75216: LD_VAR 0 7
75220: ARRAY
75221: PPUSH
75222: LD_VAR 0 14
75226: PUSH
75227: LD_VAR 0 8
75231: ARRAY
75232: PPUSH
75233: CALL_OW 115
// attacking := true ;
75237: LD_ADDR_VAR 0 29
75241: PUSH
75242: LD_INT 1
75244: ST_TO_ADDR
// break ;
75245: GO 75249
// end ;
75247: GO 75186
75249: POP
75250: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
75251: LD_VAR 0 4
75255: PUSH
75256: LD_VAR 0 7
75260: ARRAY
75261: PPUSH
75262: CALL_OW 302
75266: PUSH
75267: LD_VAR 0 29
75271: NOT
75272: AND
75273: IFFALSE 75595
// begin if GetTag ( group [ i ] ) = 71 then
75275: LD_VAR 0 4
75279: PUSH
75280: LD_VAR 0 7
75284: ARRAY
75285: PPUSH
75286: CALL_OW 110
75290: PUSH
75291: LD_INT 71
75293: EQUAL
75294: IFFALSE 75335
// begin if HasTask ( group [ i ] ) then
75296: LD_VAR 0 4
75300: PUSH
75301: LD_VAR 0 7
75305: ARRAY
75306: PPUSH
75307: CALL_OW 314
75311: IFFALSE 75317
// continue else
75313: GO 71474
75315: GO 75335
// SetTag ( group [ i ] , 0 ) ;
75317: LD_VAR 0 4
75321: PUSH
75322: LD_VAR 0 7
75326: ARRAY
75327: PPUSH
75328: LD_INT 0
75330: PPUSH
75331: CALL_OW 109
// end ; k := 8 ;
75335: LD_ADDR_VAR 0 9
75339: PUSH
75340: LD_INT 8
75342: ST_TO_ADDR
// x := 0 ;
75343: LD_ADDR_VAR 0 10
75347: PUSH
75348: LD_INT 0
75350: ST_TO_ADDR
// if tmp < k then
75351: LD_VAR 0 14
75355: PUSH
75356: LD_VAR 0 9
75360: LESS
75361: IFFALSE 75373
// k := tmp ;
75363: LD_ADDR_VAR 0 9
75367: PUSH
75368: LD_VAR 0 14
75372: ST_TO_ADDR
// for j = 1 to k do
75373: LD_ADDR_VAR 0 8
75377: PUSH
75378: DOUBLE
75379: LD_INT 1
75381: DEC
75382: ST_TO_ADDR
75383: LD_VAR 0 9
75387: PUSH
75388: FOR_TO
75389: IFFALSE 75487
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
75391: LD_VAR 0 14
75395: PUSH
75396: LD_VAR 0 8
75400: ARRAY
75401: PPUSH
75402: CALL_OW 247
75406: PUSH
75407: LD_INT 1
75409: EQUAL
75410: PUSH
75411: LD_VAR 0 14
75415: PUSH
75416: LD_VAR 0 8
75420: ARRAY
75421: PPUSH
75422: CALL_OW 256
75426: PUSH
75427: LD_INT 250
75429: LESS
75430: PUSH
75431: LD_VAR 0 20
75435: AND
75436: PUSH
75437: LD_VAR 0 20
75441: NOT
75442: PUSH
75443: LD_VAR 0 14
75447: PUSH
75448: LD_VAR 0 8
75452: ARRAY
75453: PPUSH
75454: CALL_OW 256
75458: PUSH
75459: LD_INT 250
75461: GREATEREQUAL
75462: AND
75463: OR
75464: AND
75465: IFFALSE 75485
// begin x := tmp [ j ] ;
75467: LD_ADDR_VAR 0 10
75471: PUSH
75472: LD_VAR 0 14
75476: PUSH
75477: LD_VAR 0 8
75481: ARRAY
75482: ST_TO_ADDR
// break ;
75483: GO 75487
// end ;
75485: GO 75388
75487: POP
75488: POP
// if x then
75489: LD_VAR 0 10
75493: IFFALSE 75517
// ComAttackUnit ( group [ i ] , x ) else
75495: LD_VAR 0 4
75499: PUSH
75500: LD_VAR 0 7
75504: ARRAY
75505: PPUSH
75506: LD_VAR 0 10
75510: PPUSH
75511: CALL_OW 115
75515: GO 75541
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
75517: LD_VAR 0 4
75521: PUSH
75522: LD_VAR 0 7
75526: ARRAY
75527: PPUSH
75528: LD_VAR 0 14
75532: PUSH
75533: LD_INT 1
75535: ARRAY
75536: PPUSH
75537: CALL_OW 115
// if not HasTask ( group [ i ] ) then
75541: LD_VAR 0 4
75545: PUSH
75546: LD_VAR 0 7
75550: ARRAY
75551: PPUSH
75552: CALL_OW 314
75556: NOT
75557: IFFALSE 75595
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
75559: LD_VAR 0 4
75563: PUSH
75564: LD_VAR 0 7
75568: ARRAY
75569: PPUSH
75570: LD_VAR 0 14
75574: PPUSH
75575: LD_VAR 0 4
75579: PUSH
75580: LD_VAR 0 7
75584: ARRAY
75585: PPUSH
75586: CALL_OW 74
75590: PPUSH
75591: CALL_OW 115
// end ; end ; end ;
75595: GO 71474
75597: POP
75598: POP
// wait ( 0 0$2 ) ;
75599: LD_INT 70
75601: PPUSH
75602: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
75606: LD_VAR 0 4
75610: NOT
75611: PUSH
75612: LD_VAR 0 4
75616: PUSH
75617: EMPTY
75618: EQUAL
75619: OR
75620: PUSH
75621: LD_INT 81
75623: PUSH
75624: LD_VAR 0 35
75628: PUSH
75629: EMPTY
75630: LIST
75631: LIST
75632: PPUSH
75633: CALL_OW 69
75637: NOT
75638: OR
75639: IFFALSE 71459
// end ;
75641: LD_VAR 0 2
75645: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
75646: LD_INT 0
75648: PPUSH
75649: PPUSH
75650: PPUSH
75651: PPUSH
75652: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
75653: LD_VAR 0 1
75657: NOT
75658: PUSH
75659: LD_EXP 14
75663: PUSH
75664: LD_VAR 0 1
75668: ARRAY
75669: NOT
75670: OR
75671: PUSH
75672: LD_VAR 0 2
75676: NOT
75677: OR
75678: PUSH
75679: LD_VAR 0 3
75683: NOT
75684: OR
75685: IFFALSE 75689
// exit ;
75687: GO 76202
// side := mc_sides [ base ] ;
75689: LD_ADDR_VAR 0 6
75693: PUSH
75694: LD_EXP 40
75698: PUSH
75699: LD_VAR 0 1
75703: ARRAY
75704: ST_TO_ADDR
// if not side then
75705: LD_VAR 0 6
75709: NOT
75710: IFFALSE 75714
// exit ;
75712: GO 76202
// for i in solds do
75714: LD_ADDR_VAR 0 7
75718: PUSH
75719: LD_VAR 0 2
75723: PUSH
75724: FOR_IN
75725: IFFALSE 75786
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
75727: LD_VAR 0 7
75731: PPUSH
75732: CALL_OW 310
75736: PPUSH
75737: CALL_OW 266
75741: PUSH
75742: LD_INT 32
75744: PUSH
75745: LD_INT 31
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: IN
75752: IFFALSE 75772
// solds := solds diff i else
75754: LD_ADDR_VAR 0 2
75758: PUSH
75759: LD_VAR 0 2
75763: PUSH
75764: LD_VAR 0 7
75768: DIFF
75769: ST_TO_ADDR
75770: GO 75784
// SetTag ( i , 18 ) ;
75772: LD_VAR 0 7
75776: PPUSH
75777: LD_INT 18
75779: PPUSH
75780: CALL_OW 109
75784: GO 75724
75786: POP
75787: POP
// if not solds then
75788: LD_VAR 0 2
75792: NOT
75793: IFFALSE 75797
// exit ;
75795: GO 76202
// repeat wait ( 0 0$1 ) ;
75797: LD_INT 35
75799: PPUSH
75800: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
75804: LD_ADDR_VAR 0 5
75808: PUSH
75809: LD_VAR 0 6
75813: PPUSH
75814: LD_VAR 0 3
75818: PPUSH
75819: CALL 6197 0 2
75823: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
75824: LD_EXP 14
75828: PUSH
75829: LD_VAR 0 1
75833: ARRAY
75834: NOT
75835: PUSH
75836: LD_EXP 14
75840: PUSH
75841: LD_VAR 0 1
75845: ARRAY
75846: PUSH
75847: EMPTY
75848: EQUAL
75849: OR
75850: IFFALSE 75887
// begin for i in solds do
75852: LD_ADDR_VAR 0 7
75856: PUSH
75857: LD_VAR 0 2
75861: PUSH
75862: FOR_IN
75863: IFFALSE 75876
// ComStop ( i ) ;
75865: LD_VAR 0 7
75869: PPUSH
75870: CALL_OW 141
75874: GO 75862
75876: POP
75877: POP
// solds := [ ] ;
75878: LD_ADDR_VAR 0 2
75882: PUSH
75883: EMPTY
75884: ST_TO_ADDR
// exit ;
75885: GO 76202
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
75887: LD_VAR 0 5
75891: NOT
75892: PUSH
75893: LD_VAR 0 5
75897: PUSH
75898: LD_INT 3
75900: GREATER
75901: OR
75902: PUSH
75903: LD_EXP 36
75907: PUSH
75908: LD_VAR 0 1
75912: ARRAY
75913: OR
75914: IFFALSE 75955
// begin for i in solds do
75916: LD_ADDR_VAR 0 7
75920: PUSH
75921: LD_VAR 0 2
75925: PUSH
75926: FOR_IN
75927: IFFALSE 75951
// if HasTask ( i ) then
75929: LD_VAR 0 7
75933: PPUSH
75934: CALL_OW 314
75938: IFFALSE 75949
// ComStop ( i ) ;
75940: LD_VAR 0 7
75944: PPUSH
75945: CALL_OW 141
75949: GO 75926
75951: POP
75952: POP
// break ;
75953: GO 76190
// end ; for i in solds do
75955: LD_ADDR_VAR 0 7
75959: PUSH
75960: LD_VAR 0 2
75964: PUSH
75965: FOR_IN
75966: IFFALSE 76182
// begin if IsInUnit ( i ) then
75968: LD_VAR 0 7
75972: PPUSH
75973: CALL_OW 310
75977: IFFALSE 75988
// ComExitBuilding ( i ) ;
75979: LD_VAR 0 7
75983: PPUSH
75984: CALL_OW 122
// if GetLives ( i ) > 333 then
75988: LD_VAR 0 7
75992: PPUSH
75993: CALL_OW 256
75997: PUSH
75998: LD_INT 333
76000: GREATER
76001: IFFALSE 76029
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76003: LD_VAR 0 7
76007: PPUSH
76008: LD_VAR 0 5
76012: PPUSH
76013: LD_VAR 0 7
76017: PPUSH
76018: CALL_OW 74
76022: PPUSH
76023: CALL_OW 115
76027: GO 76180
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
76029: LD_ADDR_VAR 0 8
76033: PUSH
76034: LD_EXP 14
76038: PUSH
76039: LD_VAR 0 1
76043: ARRAY
76044: PPUSH
76045: LD_INT 2
76047: PUSH
76048: LD_INT 30
76050: PUSH
76051: LD_INT 0
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 30
76060: PUSH
76061: LD_INT 1
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 30
76070: PUSH
76071: LD_INT 6
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: PPUSH
76084: CALL_OW 72
76088: PPUSH
76089: LD_VAR 0 7
76093: PPUSH
76094: CALL_OW 74
76098: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
76099: LD_VAR 0 7
76103: PPUSH
76104: LD_VAR 0 8
76108: PPUSH
76109: CALL_OW 250
76113: PPUSH
76114: LD_INT 3
76116: PPUSH
76117: LD_INT 5
76119: PPUSH
76120: CALL_OW 272
76124: PPUSH
76125: LD_VAR 0 8
76129: PPUSH
76130: CALL_OW 251
76134: PPUSH
76135: LD_INT 3
76137: PPUSH
76138: LD_INT 5
76140: PPUSH
76141: CALL_OW 273
76145: PPUSH
76146: CALL_OW 111
// SetTag ( i , 0 ) ;
76150: LD_VAR 0 7
76154: PPUSH
76155: LD_INT 0
76157: PPUSH
76158: CALL_OW 109
// solds := solds diff i ;
76162: LD_ADDR_VAR 0 2
76166: PUSH
76167: LD_VAR 0 2
76171: PUSH
76172: LD_VAR 0 7
76176: DIFF
76177: ST_TO_ADDR
// continue ;
76178: GO 75965
// end ; end ;
76180: GO 75965
76182: POP
76183: POP
// until solds ;
76184: LD_VAR 0 2
76188: IFFALSE 75797
// MC_Reset ( base , 18 ) ;
76190: LD_VAR 0 1
76194: PPUSH
76195: LD_INT 18
76197: PPUSH
76198: CALL 44876 0 2
// end ;
76202: LD_VAR 0 4
76206: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
76207: LD_INT 0
76209: PPUSH
76210: PPUSH
76211: PPUSH
76212: PPUSH
76213: PPUSH
76214: PPUSH
76215: PPUSH
76216: PPUSH
76217: PPUSH
76218: PPUSH
76219: PPUSH
76220: PPUSH
76221: PPUSH
76222: PPUSH
76223: PPUSH
76224: PPUSH
76225: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
76226: LD_ADDR_VAR 0 13
76230: PUSH
76231: LD_EXP 14
76235: PUSH
76236: LD_VAR 0 1
76240: ARRAY
76241: PPUSH
76242: LD_INT 25
76244: PUSH
76245: LD_INT 3
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PPUSH
76252: CALL_OW 72
76256: ST_TO_ADDR
// if mc_remote_driver [ base ] then
76257: LD_EXP 54
76261: PUSH
76262: LD_VAR 0 1
76266: ARRAY
76267: IFFALSE 76291
// mechs := mechs diff mc_remote_driver [ base ] ;
76269: LD_ADDR_VAR 0 13
76273: PUSH
76274: LD_VAR 0 13
76278: PUSH
76279: LD_EXP 54
76283: PUSH
76284: LD_VAR 0 1
76288: ARRAY
76289: DIFF
76290: ST_TO_ADDR
// for i in mechs do
76291: LD_ADDR_VAR 0 5
76295: PUSH
76296: LD_VAR 0 13
76300: PUSH
76301: FOR_IN
76302: IFFALSE 76337
// if GetTag ( i ) > 0 then
76304: LD_VAR 0 5
76308: PPUSH
76309: CALL_OW 110
76313: PUSH
76314: LD_INT 0
76316: GREATER
76317: IFFALSE 76335
// mechs := mechs diff i ;
76319: LD_ADDR_VAR 0 13
76323: PUSH
76324: LD_VAR 0 13
76328: PUSH
76329: LD_VAR 0 5
76333: DIFF
76334: ST_TO_ADDR
76335: GO 76301
76337: POP
76338: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
76339: LD_ADDR_VAR 0 9
76343: PUSH
76344: LD_EXP 14
76348: PUSH
76349: LD_VAR 0 1
76353: ARRAY
76354: PPUSH
76355: LD_INT 2
76357: PUSH
76358: LD_INT 25
76360: PUSH
76361: LD_INT 1
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PUSH
76368: LD_INT 25
76370: PUSH
76371: LD_INT 5
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: PUSH
76378: LD_INT 25
76380: PUSH
76381: LD_INT 8
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: LD_INT 25
76390: PUSH
76391: LD_INT 9
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: PPUSH
76405: CALL_OW 72
76409: ST_TO_ADDR
// if not defenders and not solds then
76410: LD_VAR 0 2
76414: NOT
76415: PUSH
76416: LD_VAR 0 9
76420: NOT
76421: AND
76422: IFFALSE 76426
// exit ;
76424: GO 78052
// depot_under_attack := false ;
76426: LD_ADDR_VAR 0 17
76430: PUSH
76431: LD_INT 0
76433: ST_TO_ADDR
// sold_defenders := [ ] ;
76434: LD_ADDR_VAR 0 18
76438: PUSH
76439: EMPTY
76440: ST_TO_ADDR
// if mechs then
76441: LD_VAR 0 13
76445: IFFALSE 76574
// for i in defenders do
76447: LD_ADDR_VAR 0 5
76451: PUSH
76452: LD_VAR 0 2
76456: PUSH
76457: FOR_IN
76458: IFFALSE 76572
// begin SetTag ( i , 20 ) ;
76460: LD_VAR 0 5
76464: PPUSH
76465: LD_INT 20
76467: PPUSH
76468: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
76472: LD_VAR 0 5
76476: PPUSH
76477: CALL_OW 263
76481: PUSH
76482: LD_INT 1
76484: EQUAL
76485: PUSH
76486: LD_VAR 0 5
76490: PPUSH
76491: CALL_OW 311
76495: NOT
76496: AND
76497: PUSH
76498: LD_VAR 0 13
76502: AND
76503: IFFALSE 76570
// begin un := mechs [ 1 ] ;
76505: LD_ADDR_VAR 0 11
76509: PUSH
76510: LD_VAR 0 13
76514: PUSH
76515: LD_INT 1
76517: ARRAY
76518: ST_TO_ADDR
// ComExitBuilding ( un ) ;
76519: LD_VAR 0 11
76523: PPUSH
76524: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
76528: LD_VAR 0 11
76532: PPUSH
76533: LD_VAR 0 5
76537: PPUSH
76538: CALL_OW 180
// SetTag ( un , 19 ) ;
76542: LD_VAR 0 11
76546: PPUSH
76547: LD_INT 19
76549: PPUSH
76550: CALL_OW 109
// mechs := mechs diff un ;
76554: LD_ADDR_VAR 0 13
76558: PUSH
76559: LD_VAR 0 13
76563: PUSH
76564: LD_VAR 0 11
76568: DIFF
76569: ST_TO_ADDR
// end ; end ;
76570: GO 76457
76572: POP
76573: POP
// if solds then
76574: LD_VAR 0 9
76578: IFFALSE 76637
// for i in solds do
76580: LD_ADDR_VAR 0 5
76584: PUSH
76585: LD_VAR 0 9
76589: PUSH
76590: FOR_IN
76591: IFFALSE 76635
// if not GetTag ( i ) then
76593: LD_VAR 0 5
76597: PPUSH
76598: CALL_OW 110
76602: NOT
76603: IFFALSE 76633
// begin defenders := defenders union i ;
76605: LD_ADDR_VAR 0 2
76609: PUSH
76610: LD_VAR 0 2
76614: PUSH
76615: LD_VAR 0 5
76619: UNION
76620: ST_TO_ADDR
// SetTag ( i , 18 ) ;
76621: LD_VAR 0 5
76625: PPUSH
76626: LD_INT 18
76628: PPUSH
76629: CALL_OW 109
// end ;
76633: GO 76590
76635: POP
76636: POP
// repeat wait ( 0 0$1 ) ;
76637: LD_INT 35
76639: PPUSH
76640: CALL_OW 67
// enemy := mc_scan [ base ] ;
76644: LD_ADDR_VAR 0 3
76648: PUSH
76649: LD_EXP 37
76653: PUSH
76654: LD_VAR 0 1
76658: ARRAY
76659: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
76660: LD_EXP 14
76664: PUSH
76665: LD_VAR 0 1
76669: ARRAY
76670: NOT
76671: PUSH
76672: LD_EXP 14
76676: PUSH
76677: LD_VAR 0 1
76681: ARRAY
76682: PUSH
76683: EMPTY
76684: EQUAL
76685: OR
76686: IFFALSE 76723
// begin for i in defenders do
76688: LD_ADDR_VAR 0 5
76692: PUSH
76693: LD_VAR 0 2
76697: PUSH
76698: FOR_IN
76699: IFFALSE 76712
// ComStop ( i ) ;
76701: LD_VAR 0 5
76705: PPUSH
76706: CALL_OW 141
76710: GO 76698
76712: POP
76713: POP
// defenders := [ ] ;
76714: LD_ADDR_VAR 0 2
76718: PUSH
76719: EMPTY
76720: ST_TO_ADDR
// exit ;
76721: GO 78052
// end ; for i in defenders do
76723: LD_ADDR_VAR 0 5
76727: PUSH
76728: LD_VAR 0 2
76732: PUSH
76733: FOR_IN
76734: IFFALSE 77552
// begin e := NearestUnitToUnit ( enemy , i ) ;
76736: LD_ADDR_VAR 0 14
76740: PUSH
76741: LD_VAR 0 3
76745: PPUSH
76746: LD_VAR 0 5
76750: PPUSH
76751: CALL_OW 74
76755: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76756: LD_ADDR_VAR 0 8
76760: PUSH
76761: LD_EXP 14
76765: PUSH
76766: LD_VAR 0 1
76770: ARRAY
76771: PPUSH
76772: LD_INT 2
76774: PUSH
76775: LD_INT 30
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 30
76787: PUSH
76788: LD_INT 1
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: LIST
76799: PPUSH
76800: CALL_OW 72
76804: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
76805: LD_ADDR_VAR 0 17
76809: PUSH
76810: LD_VAR 0 8
76814: NOT
76815: PUSH
76816: LD_VAR 0 8
76820: PPUSH
76821: LD_INT 3
76823: PUSH
76824: LD_INT 24
76826: PUSH
76827: LD_INT 600
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PPUSH
76838: CALL_OW 72
76842: OR
76843: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
76844: LD_VAR 0 5
76848: PPUSH
76849: CALL_OW 247
76853: PUSH
76854: LD_INT 2
76856: DOUBLE
76857: EQUAL
76858: IFTRUE 76862
76860: GO 77258
76862: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
76863: LD_VAR 0 5
76867: PPUSH
76868: CALL_OW 256
76872: PUSH
76873: LD_INT 650
76875: GREATER
76876: PUSH
76877: LD_VAR 0 5
76881: PPUSH
76882: LD_VAR 0 14
76886: PPUSH
76887: CALL_OW 296
76891: PUSH
76892: LD_INT 40
76894: LESS
76895: PUSH
76896: LD_VAR 0 14
76900: PPUSH
76901: LD_EXP 39
76905: PUSH
76906: LD_VAR 0 1
76910: ARRAY
76911: PPUSH
76912: CALL_OW 308
76916: OR
76917: AND
76918: IFFALSE 77040
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
76920: LD_VAR 0 5
76924: PPUSH
76925: CALL_OW 262
76929: PUSH
76930: LD_INT 1
76932: EQUAL
76933: PUSH
76934: LD_VAR 0 5
76938: PPUSH
76939: CALL_OW 261
76943: PUSH
76944: LD_INT 30
76946: LESS
76947: AND
76948: PUSH
76949: LD_VAR 0 8
76953: AND
76954: IFFALSE 77024
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
76956: LD_VAR 0 5
76960: PPUSH
76961: LD_VAR 0 8
76965: PPUSH
76966: LD_VAR 0 5
76970: PPUSH
76971: CALL_OW 74
76975: PPUSH
76976: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
76980: LD_VAR 0 5
76984: PPUSH
76985: LD_VAR 0 8
76989: PPUSH
76990: LD_VAR 0 5
76994: PPUSH
76995: CALL_OW 74
76999: PPUSH
77000: CALL_OW 296
77004: PUSH
77005: LD_INT 6
77007: LESS
77008: IFFALSE 77022
// SetFuel ( i , 100 ) ;
77010: LD_VAR 0 5
77014: PPUSH
77015: LD_INT 100
77017: PPUSH
77018: CALL_OW 240
// end else
77022: GO 77038
// ComAttackUnit ( i , e ) ;
77024: LD_VAR 0 5
77028: PPUSH
77029: LD_VAR 0 14
77033: PPUSH
77034: CALL_OW 115
// end else
77038: GO 77141
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
77040: LD_VAR 0 14
77044: PPUSH
77045: LD_EXP 39
77049: PUSH
77050: LD_VAR 0 1
77054: ARRAY
77055: PPUSH
77056: CALL_OW 308
77060: NOT
77061: PUSH
77062: LD_VAR 0 5
77066: PPUSH
77067: LD_VAR 0 14
77071: PPUSH
77072: CALL_OW 296
77076: PUSH
77077: LD_INT 40
77079: GREATEREQUAL
77080: AND
77081: PUSH
77082: LD_VAR 0 5
77086: PPUSH
77087: CALL_OW 256
77091: PUSH
77092: LD_INT 650
77094: LESSEQUAL
77095: OR
77096: PUSH
77097: LD_VAR 0 5
77101: PPUSH
77102: LD_EXP 38
77106: PUSH
77107: LD_VAR 0 1
77111: ARRAY
77112: PPUSH
77113: CALL_OW 308
77117: NOT
77118: AND
77119: IFFALSE 77141
// ComMoveToArea ( i , mc_parking [ base ] ) ;
77121: LD_VAR 0 5
77125: PPUSH
77126: LD_EXP 38
77130: PUSH
77131: LD_VAR 0 1
77135: ARRAY
77136: PPUSH
77137: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
77141: LD_VAR 0 5
77145: PPUSH
77146: CALL_OW 256
77150: PUSH
77151: LD_INT 998
77153: LESS
77154: PUSH
77155: LD_VAR 0 5
77159: PPUSH
77160: CALL_OW 263
77164: PUSH
77165: LD_INT 1
77167: EQUAL
77168: AND
77169: PUSH
77170: LD_VAR 0 5
77174: PPUSH
77175: CALL_OW 311
77179: AND
77180: PUSH
77181: LD_VAR 0 5
77185: PPUSH
77186: LD_EXP 38
77190: PUSH
77191: LD_VAR 0 1
77195: ARRAY
77196: PPUSH
77197: CALL_OW 308
77201: AND
77202: IFFALSE 77256
// begin mech := IsDrivenBy ( i ) ;
77204: LD_ADDR_VAR 0 10
77208: PUSH
77209: LD_VAR 0 5
77213: PPUSH
77214: CALL_OW 311
77218: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
77219: LD_VAR 0 10
77223: PPUSH
77224: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
77228: LD_VAR 0 10
77232: PPUSH
77233: LD_VAR 0 5
77237: PPUSH
77238: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
77242: LD_VAR 0 10
77246: PPUSH
77247: LD_VAR 0 5
77251: PPUSH
77252: CALL_OW 180
// end ; end ; unit_human :
77256: GO 77523
77258: LD_INT 1
77260: DOUBLE
77261: EQUAL
77262: IFTRUE 77266
77264: GO 77522
77266: POP
// begin b := IsInUnit ( i ) ;
77267: LD_ADDR_VAR 0 19
77271: PUSH
77272: LD_VAR 0 5
77276: PPUSH
77277: CALL_OW 310
77281: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
77282: LD_ADDR_VAR 0 20
77286: PUSH
77287: LD_VAR 0 19
77291: NOT
77292: PUSH
77293: LD_VAR 0 19
77297: PPUSH
77298: CALL_OW 266
77302: PUSH
77303: LD_INT 32
77305: PUSH
77306: LD_INT 31
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: IN
77313: OR
77314: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
77315: LD_VAR 0 17
77319: PUSH
77320: LD_VAR 0 2
77324: PPUSH
77325: LD_INT 21
77327: PUSH
77328: LD_INT 2
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: PPUSH
77335: CALL_OW 72
77339: PUSH
77340: LD_INT 1
77342: LESSEQUAL
77343: OR
77344: PUSH
77345: LD_VAR 0 20
77349: AND
77350: PUSH
77351: LD_VAR 0 5
77355: PUSH
77356: LD_VAR 0 18
77360: IN
77361: NOT
77362: AND
77363: IFFALSE 77456
// begin if b then
77365: LD_VAR 0 19
77369: IFFALSE 77418
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
77371: LD_VAR 0 19
77375: PPUSH
77376: LD_VAR 0 3
77380: PPUSH
77381: LD_VAR 0 19
77385: PPUSH
77386: CALL_OW 74
77390: PPUSH
77391: CALL_OW 296
77395: PUSH
77396: LD_INT 10
77398: LESS
77399: PUSH
77400: LD_VAR 0 19
77404: PPUSH
77405: CALL_OW 461
77409: PUSH
77410: LD_INT 7
77412: NONEQUAL
77413: AND
77414: IFFALSE 77418
// continue ;
77416: GO 76733
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
77418: LD_ADDR_VAR 0 18
77422: PUSH
77423: LD_VAR 0 18
77427: PPUSH
77428: LD_VAR 0 18
77432: PUSH
77433: LD_INT 1
77435: PLUS
77436: PPUSH
77437: LD_VAR 0 5
77441: PPUSH
77442: CALL_OW 1
77446: ST_TO_ADDR
// ComExitBuilding ( i ) ;
77447: LD_VAR 0 5
77451: PPUSH
77452: CALL_OW 122
// end ; if sold_defenders then
77456: LD_VAR 0 18
77460: IFFALSE 77520
// if i in sold_defenders then
77462: LD_VAR 0 5
77466: PUSH
77467: LD_VAR 0 18
77471: IN
77472: IFFALSE 77520
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
77474: LD_VAR 0 5
77478: PPUSH
77479: CALL_OW 314
77483: NOT
77484: PUSH
77485: LD_VAR 0 5
77489: PPUSH
77490: LD_VAR 0 14
77494: PPUSH
77495: CALL_OW 296
77499: PUSH
77500: LD_INT 30
77502: LESS
77503: AND
77504: IFFALSE 77520
// ComAttackUnit ( i , e ) ;
77506: LD_VAR 0 5
77510: PPUSH
77511: LD_VAR 0 14
77515: PPUSH
77516: CALL_OW 115
// end ; end ; end ;
77520: GO 77523
77522: POP
// if IsDead ( i ) then
77523: LD_VAR 0 5
77527: PPUSH
77528: CALL_OW 301
77532: IFFALSE 77550
// defenders := defenders diff i ;
77534: LD_ADDR_VAR 0 2
77538: PUSH
77539: LD_VAR 0 2
77543: PUSH
77544: LD_VAR 0 5
77548: DIFF
77549: ST_TO_ADDR
// end ;
77550: GO 76733
77552: POP
77553: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
77554: LD_VAR 0 3
77558: NOT
77559: PUSH
77560: LD_VAR 0 2
77564: NOT
77565: OR
77566: PUSH
77567: LD_EXP 14
77571: PUSH
77572: LD_VAR 0 1
77576: ARRAY
77577: NOT
77578: OR
77579: IFFALSE 76637
// MC_Reset ( base , 18 ) ;
77581: LD_VAR 0 1
77585: PPUSH
77586: LD_INT 18
77588: PPUSH
77589: CALL 44876 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77593: LD_ADDR_VAR 0 2
77597: PUSH
77598: LD_VAR 0 2
77602: PUSH
77603: LD_VAR 0 2
77607: PPUSH
77608: LD_INT 2
77610: PUSH
77611: LD_INT 25
77613: PUSH
77614: LD_INT 1
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 25
77623: PUSH
77624: LD_INT 5
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: LD_INT 25
77633: PUSH
77634: LD_INT 8
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: LD_INT 25
77643: PUSH
77644: LD_INT 9
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: LIST
77655: LIST
77656: LIST
77657: PPUSH
77658: CALL_OW 72
77662: DIFF
77663: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
77664: LD_VAR 0 3
77668: NOT
77669: PUSH
77670: LD_VAR 0 2
77674: PPUSH
77675: LD_INT 21
77677: PUSH
77678: LD_INT 2
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: PPUSH
77685: CALL_OW 72
77689: AND
77690: IFFALSE 78028
// begin tmp := FilterByTag ( defenders , 19 ) ;
77692: LD_ADDR_VAR 0 12
77696: PUSH
77697: LD_VAR 0 2
77701: PPUSH
77702: LD_INT 19
77704: PPUSH
77705: CALL 37957 0 2
77709: ST_TO_ADDR
// if tmp then
77710: LD_VAR 0 12
77714: IFFALSE 77784
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
77716: LD_ADDR_VAR 0 12
77720: PUSH
77721: LD_VAR 0 12
77725: PPUSH
77726: LD_INT 25
77728: PUSH
77729: LD_INT 3
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PPUSH
77736: CALL_OW 72
77740: ST_TO_ADDR
// if tmp then
77741: LD_VAR 0 12
77745: IFFALSE 77784
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
77747: LD_ADDR_EXP 26
77751: PUSH
77752: LD_EXP 26
77756: PPUSH
77757: LD_VAR 0 1
77761: PPUSH
77762: LD_EXP 26
77766: PUSH
77767: LD_VAR 0 1
77771: ARRAY
77772: PUSH
77773: LD_VAR 0 12
77777: UNION
77778: PPUSH
77779: CALL_OW 1
77783: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
77784: LD_VAR 0 1
77788: PPUSH
77789: LD_INT 19
77791: PPUSH
77792: CALL 44876 0 2
// repeat wait ( 0 0$1 ) ;
77796: LD_INT 35
77798: PPUSH
77799: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
77803: LD_EXP 14
77807: PUSH
77808: LD_VAR 0 1
77812: ARRAY
77813: NOT
77814: PUSH
77815: LD_EXP 14
77819: PUSH
77820: LD_VAR 0 1
77824: ARRAY
77825: PUSH
77826: EMPTY
77827: EQUAL
77828: OR
77829: IFFALSE 77866
// begin for i in defenders do
77831: LD_ADDR_VAR 0 5
77835: PUSH
77836: LD_VAR 0 2
77840: PUSH
77841: FOR_IN
77842: IFFALSE 77855
// ComStop ( i ) ;
77844: LD_VAR 0 5
77848: PPUSH
77849: CALL_OW 141
77853: GO 77841
77855: POP
77856: POP
// defenders := [ ] ;
77857: LD_ADDR_VAR 0 2
77861: PUSH
77862: EMPTY
77863: ST_TO_ADDR
// exit ;
77864: GO 78052
// end ; for i in defenders do
77866: LD_ADDR_VAR 0 5
77870: PUSH
77871: LD_VAR 0 2
77875: PUSH
77876: FOR_IN
77877: IFFALSE 77966
// begin if not IsInArea ( i , mc_parking [ base ] ) then
77879: LD_VAR 0 5
77883: PPUSH
77884: LD_EXP 38
77888: PUSH
77889: LD_VAR 0 1
77893: ARRAY
77894: PPUSH
77895: CALL_OW 308
77899: NOT
77900: IFFALSE 77924
// ComMoveToArea ( i , mc_parking [ base ] ) else
77902: LD_VAR 0 5
77906: PPUSH
77907: LD_EXP 38
77911: PUSH
77912: LD_VAR 0 1
77916: ARRAY
77917: PPUSH
77918: CALL_OW 113
77922: GO 77964
// if GetControl ( i ) = control_manual then
77924: LD_VAR 0 5
77928: PPUSH
77929: CALL_OW 263
77933: PUSH
77934: LD_INT 1
77936: EQUAL
77937: IFFALSE 77964
// if IsDrivenBy ( i ) then
77939: LD_VAR 0 5
77943: PPUSH
77944: CALL_OW 311
77948: IFFALSE 77964
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
77950: LD_VAR 0 5
77954: PPUSH
77955: CALL_OW 311
77959: PPUSH
77960: CALL_OW 121
// end ;
77964: GO 77876
77966: POP
77967: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
77968: LD_VAR 0 2
77972: PPUSH
77973: LD_INT 95
77975: PUSH
77976: LD_EXP 38
77980: PUSH
77981: LD_VAR 0 1
77985: ARRAY
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: PPUSH
77991: CALL_OW 72
77995: PUSH
77996: LD_VAR 0 2
78000: EQUAL
78001: PUSH
78002: LD_EXP 37
78006: PUSH
78007: LD_VAR 0 1
78011: ARRAY
78012: OR
78013: PUSH
78014: LD_EXP 14
78018: PUSH
78019: LD_VAR 0 1
78023: ARRAY
78024: NOT
78025: OR
78026: IFFALSE 77796
// end ; MC_Reset ( base , 19 ) ;
78028: LD_VAR 0 1
78032: PPUSH
78033: LD_INT 19
78035: PPUSH
78036: CALL 44876 0 2
// MC_Reset ( base , 20 ) ;
78040: LD_VAR 0 1
78044: PPUSH
78045: LD_INT 20
78047: PPUSH
78048: CALL 44876 0 2
// end ;
78052: LD_VAR 0 4
78056: RET
