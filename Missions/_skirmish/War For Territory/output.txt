// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 180 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// begin FogOff ( 1 ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 344
// end ; ChangeSideFog ( 4 , 1 ) ;
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: CALL_OW 343
// your_side := 4 ;
  31: LD_ADDR_OWVAR 2
  35: PUSH
  36: LD_INT 4
  38: ST_TO_ADDR
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , gensher_ape , 0 ) ;
  39: LD_INT 0
  41: PPUSH
  42: LD_INT 0
  44: PPUSH
  45: LD_INT 3
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: LD_INT 0
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 0
  59: PPUSH
  60: LD_INT 7
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: CALL 37075 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , powell_ape , 0 ) ;
  70: LD_INT 0
  72: PPUSH
  73: LD_INT 0
  75: PPUSH
  76: LD_INT 3
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: LD_INT 0
  84: PPUSH
  85: LD_INT 0
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: LD_INT 4
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL 37075 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , popov_ape , 0 ) ;
 101: LD_INT 0
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: LD_INT 3
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: LD_INT 0
 115: PPUSH
 116: LD_INT 0
 118: PPUSH
 119: LD_INT 0
 121: PPUSH
 122: LD_INT 11
 124: PPUSH
 125: LD_INT 0
 127: PPUSH
 128: CALL 37075 0 9
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , sikorski_ape , 0 ) ;
 132: LD_INT 0
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: LD_INT 3
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: LD_INT 0
 146: PPUSH
 147: LD_INT 0
 149: PPUSH
 150: LD_INT 0
 152: PPUSH
 153: LD_INT 14
 155: PPUSH
 156: LD_INT 0
 158: PPUSH
 159: CALL 37075 0 9
// PrepareGensher ;
 163: CALL 1331 0 0
// PreparePopov ;
 167: CALL 2581 0 0
// PreparePowell ;
 171: CALL 394 0 0
// MC_Start ( ) ;
 175: CALL 43384 0 0
// end ;
 179: END
// export debug , game , staticMines ; function InitVariables ; begin
 180: LD_INT 0
 182: PPUSH
// debug := 0 ;
 183: LD_ADDR_EXP 1
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// game := true ;
 191: LD_ADDR_EXP 2
 195: PUSH
 196: LD_INT 1
 198: ST_TO_ADDR
// staticMines := [ ] ;
 199: LD_ADDR_EXP 3
 203: PUSH
 204: EMPTY
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// export function CustomInitMacro ; begin
 211: LD_INT 0
 213: PPUSH
// InitMC_Gensher ( ) ;
 214: CALL 1719 0 0
// InitMC_Powell ( ) ;
 218: CALL 609 0 0
// InitMC_Popov ( ) ;
 222: CALL 2907 0 0
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$10 do var cr , time , i ;
 231: GO 233
 233: DISABLE
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
 238: PPUSH
// begin time := 0 0$30 ;
 239: LD_ADDR_VAR 0 2
 243: PUSH
 244: LD_INT 1050
 246: ST_TO_ADDR
// repeat wait ( time ) ;
 247: LD_VAR 0 2
 251: PPUSH
 252: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
 256: LD_ADDR_VAR 0 1
 260: PUSH
 261: LD_INT 1
 263: PPUSH
 264: LD_INT 5
 266: PPUSH
 267: CALL_OW 12
 271: ST_TO_ADDR
// for i in [ powell_crates , gensher_crates , popov_crates , sikorski_crates ] do
 272: LD_ADDR_VAR 0 3
 276: PUSH
 277: LD_INT 5
 279: PUSH
 280: LD_INT 8
 282: PUSH
 283: LD_INT 12
 285: PUSH
 286: LD_INT 13
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: PUSH
 295: FOR_IN
 296: IFFALSE 350
// begin if GetResourceArea ( i , mat_cans ) < 20 then
 298: LD_VAR 0 3
 302: PPUSH
 303: LD_INT 1
 305: PPUSH
 306: CALL_OW 287
 310: PUSH
 311: LD_INT 20
 313: LESS
 314: IFFALSE 333
// CreateCratesArea ( cr , i , true ) ;
 316: LD_VAR 0 1
 320: PPUSH
 321: LD_VAR 0 3
 325: PPUSH
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 55
// wait ( rand ( 0 0$5 , 0 0$20 ) ) ;
 333: LD_INT 175
 335: PPUSH
 336: LD_INT 700
 338: PPUSH
 339: CALL_OW 12
 343: PPUSH
 344: CALL_OW 67
// end ;
 348: GO 295
 350: POP
 351: POP
// time := time + 0 0$2 ;
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: LD_VAR 0 2
 361: PUSH
 362: LD_INT 70
 364: PLUS
 365: ST_TO_ADDR
// if time > 1 1$00 then
 366: LD_VAR 0 2
 370: PUSH
 371: LD_INT 2100
 373: GREATER
 374: IFFALSE 384
// time := 0 0$25 ;
 376: LD_ADDR_VAR 0 2
 380: PUSH
 381: LD_INT 875
 383: ST_TO_ADDR
// until not game ;
 384: LD_EXP 2
 388: NOT
 389: IFFALSE 247
// end ; end_of_file
 391: PPOPN 3
 393: END
// export Powell , powell_side ; export function PreparePowell ; var i , tmp ; begin
 394: LD_INT 0
 396: PPUSH
 397: PPUSH
 398: PPUSH
// powell_side := 4 ;
 399: LD_ADDR_EXP 5
 403: PUSH
 404: LD_INT 4
 406: ST_TO_ADDR
// uc_side := powell_side ;
 407: LD_ADDR_OWVAR 20
 411: PUSH
 412: LD_EXP 5
 416: ST_TO_ADDR
// uc_nation := 1 ;
 417: LD_ADDR_OWVAR 21
 421: PUSH
 422: LD_INT 1
 424: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 425: LD_ADDR_EXP 4
 429: PUSH
 430: LD_STRING Powell
 432: PPUSH
 433: CALL_OW 25
 437: ST_TO_ADDR
// SetSkill ( Powell , 1 , 7 ) ;
 438: LD_EXP 4
 442: PPUSH
 443: LD_INT 1
 445: PPUSH
 446: LD_INT 7
 448: PPUSH
 449: CALL_OW 237
// SetSkill ( Powell , 2 , 5 ) ;
 453: LD_EXP 4
 457: PPUSH
 458: LD_INT 2
 460: PPUSH
 461: LD_INT 5
 463: PPUSH
 464: CALL_OW 237
// SetSkill ( Powell , 3 , 6 ) ;
 468: LD_EXP 4
 472: PPUSH
 473: LD_INT 3
 475: PPUSH
 476: LD_INT 6
 478: PPUSH
 479: CALL_OW 237
// SetSkill ( Powell , 4 , 4 ) ;
 483: LD_EXP 4
 487: PPUSH
 488: LD_INT 4
 490: PPUSH
 491: LD_INT 4
 493: PPUSH
 494: CALL_OW 237
// PlaceHumanInUnit ( Powell , us_depot ) ;
 498: LD_EXP 4
 502: PPUSH
 503: LD_INT 4
 505: PPUSH
 506: CALL_OW 52
// tmp := PrepareBase ( us_depot , powell_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1000 , 100 , 0 ] , [ 4 , 4 , 4 , 4 ] ) ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_INT 4
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: LD_STRING 
 523: PPUSH
 524: LD_INT 8
 526: PUSH
 527: LD_INT 7
 529: PUSH
 530: LD_INT 6
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PUSH
 538: LD_OWVAR 67
 542: ARRAY
 543: PPUSH
 544: LD_INT 1000
 546: PUSH
 547: LD_INT 100
 549: PUSH
 550: LD_INT 0
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PPUSH
 558: LD_INT 4
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 4
 566: PUSH
 567: LD_INT 4
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: PPUSH
 576: CALL 12693 0 6
 580: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , tmp ) ;
 581: LD_ADDR_EXP 14
 585: PUSH
 586: LD_EXP 14
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_VAR 0 3
 598: PPUSH
 599: CALL_OW 1
 603: ST_TO_ADDR
// end ;
 604: LD_VAR 0 1
 608: RET
// export function InitMC_Powell ( ) ; begin
 609: LD_INT 0
 611: PPUSH
// MC_SetScanArea ( 1 , powell_base ) ;
 612: LD_INT 1
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL 66224 0 2
// MC_SetParkingArea ( 1 , powell_parking ) ;
 622: LD_INT 1
 624: PPUSH
 625: LD_INT 6
 627: PPUSH
 628: CALL 66168 0 2
// MC_SetDepositsXY ( 1 , [ [ 167 , 102 , 0 ] , [ 173 , 83 , 1 ] , [ 171 , 141 , 0 ] , [ 178 , 148 , 1 ] ] ) ;
 632: LD_INT 1
 634: PPUSH
 635: LD_INT 167
 637: PUSH
 638: LD_INT 102
 640: PUSH
 641: LD_INT 0
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 173
 651: PUSH
 652: LD_INT 83
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 171
 665: PUSH
 666: LD_INT 141
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 178
 679: PUSH
 680: LD_INT 148
 682: PUSH
 683: LD_INT 1
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL 65227 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
 701: LD_INT 1
 703: PPUSH
 704: LD_INT 11
 706: PUSH
 707: LD_INT 6
 709: PUSH
 710: LD_INT 7
 712: PUSH
 713: LD_INT 9
 715: PUSH
 716: LD_INT 10
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: PPUSH
 726: CALL 66056 0 2
// MC_SetCratesArea ( 1 , powell_crates ) ;
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 5
 735: PPUSH
 736: CALL 65738 0 2
// MC_SetTame ( 1 , powell_ape ) ;
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 4
 745: PPUSH
 746: CALL 65469 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 750: LD_INT 1
 752: PPUSH
 753: LD_INT 4
 755: PPUSH
 756: CALL 65088 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] ] ) ;
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 3
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: LD_INT 5
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: PUSH
 781: LD_INT 4
 783: PUSH
 784: LD_INT 1
 786: PUSH
 787: LD_INT 2
 789: PUSH
 790: LD_INT 6
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 4
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 2
 807: PUSH
 808: LD_INT 7
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 4
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 6
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 5
 837: PUSH
 838: LD_INT 1
 840: PUSH
 841: LD_INT 2
 843: PUSH
 844: LD_INT 6
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL 64903 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 200 , 111 , 4 ] , [ b_oil_mine , 167 , 102 , 0 ] , [ b_armoury , 178 , 117 , 2 ] , [ b_workshop , 197 , 144 , 4 ] , [ b_solar_power , 206 , 124 , 3 ] , [ b_solar_power , 209 , 128 , 3 ] , [ b_solar_power , 211 , 132 , 3 ] , [ b_siberite_mine , 173 , 83 , 3 ] , [ b_lab , 186 , 103 , 2 ] , [ b_turret , 173 , 99 , 2 ] , [ b_bunker , 174 , 102 , 2 ] , [ b_bunker , 178 , 100 , 2 ] , [ b_turret , 174 , 108 , 1 ] , [ b_turret , 182 , 122 , 1 ] , [ b_control_tower , 194 , 124 , 5 ] , [ b_siberite_power , 204 , 133 , 3 ] , [ b_solar_power , 201 , 133 , 3 ] , [ b_siberite_power , 199 , 119 , 5 ] , [ b_turret , 184 , 141 , 1 ] , [ b_turret , 183 , 131 , 2 ] ] ) ;
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 6
 869: PUSH
 870: LD_INT 200
 872: PUSH
 873: LD_INT 111
 875: PUSH
 876: LD_INT 4
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_INT 29
 887: PUSH
 888: LD_INT 167
 890: PUSH
 891: LD_INT 102
 893: PUSH
 894: LD_INT 0
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 4
 905: PUSH
 906: LD_INT 178
 908: PUSH
 909: LD_INT 117
 911: PUSH
 912: LD_INT 2
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: PUSH
 921: LD_INT 2
 923: PUSH
 924: LD_INT 197
 926: PUSH
 927: LD_INT 144
 929: PUSH
 930: LD_INT 4
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 27
 941: PUSH
 942: LD_INT 206
 944: PUSH
 945: LD_INT 124
 947: PUSH
 948: LD_INT 3
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 27
 959: PUSH
 960: LD_INT 209
 962: PUSH
 963: LD_INT 128
 965: PUSH
 966: LD_INT 3
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_INT 27
 977: PUSH
 978: LD_INT 211
 980: PUSH
 981: LD_INT 132
 983: PUSH
 984: LD_INT 3
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 30
 995: PUSH
 996: LD_INT 173
 998: PUSH
 999: LD_INT 83
1001: PUSH
1002: LD_INT 3
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 6
1013: PUSH
1014: LD_INT 186
1016: PUSH
1017: LD_INT 103
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 33
1031: PUSH
1032: LD_INT 173
1034: PUSH
1035: LD_INT 99
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 32
1049: PUSH
1050: LD_INT 174
1052: PUSH
1053: LD_INT 102
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 32
1067: PUSH
1068: LD_INT 178
1070: PUSH
1071: LD_INT 100
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_INT 33
1085: PUSH
1086: LD_INT 174
1088: PUSH
1089: LD_INT 108
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 33
1103: PUSH
1104: LD_INT 182
1106: PUSH
1107: LD_INT 122
1109: PUSH
1110: LD_INT 1
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 36
1121: PUSH
1122: LD_INT 194
1124: PUSH
1125: LD_INT 124
1127: PUSH
1128: LD_INT 5
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: PUSH
1137: LD_INT 28
1139: PUSH
1140: LD_INT 204
1142: PUSH
1143: LD_INT 133
1145: PUSH
1146: LD_INT 3
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 27
1157: PUSH
1158: LD_INT 201
1160: PUSH
1161: LD_INT 133
1163: PUSH
1164: LD_INT 3
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 28
1175: PUSH
1176: LD_INT 199
1178: PUSH
1179: LD_INT 119
1181: PUSH
1182: LD_INT 5
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 33
1193: PUSH
1194: LD_INT 184
1196: PUSH
1197: LD_INT 141
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 33
1211: PUSH
1212: LD_INT 183
1214: PUSH
1215: LD_INT 131
1217: PUSH
1218: LD_INT 2
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: PPUSH
1249: CALL 64795 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 10
1258: PUSH
1259: LD_INT 15
1261: PUSH
1262: LD_INT 12
1264: PUSH
1265: LD_INT 11
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL 65645 0 2
// MC_SetFactoryExtension ( 1 , 197 , 144 , 4 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1278: LD_INT 1
1280: PPUSH
1281: LD_INT 197
1283: PPUSH
1284: LD_INT 144
1286: PPUSH
1287: LD_INT 4
1289: PPUSH
1290: LD_INT 19
1292: PUSH
1293: LD_INT 16
1295: PUSH
1296: LD_INT 17
1298: PUSH
1299: LD_INT 18
1301: PUSH
1302: LD_INT 22
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: PPUSH
1312: CALL 65850 0 5
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
1316: LD_INT 1
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL 65518 0 2
// end ; end_of_file
1326: LD_VAR 0 1
1330: RET
// export Gensher , gensher_side ; export function PrepareGensher ; var i , tmp , un ; begin
1331: LD_INT 0
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// gensher_side := 2 ;
1337: LD_ADDR_EXP 7
1341: PUSH
1342: LD_INT 2
1344: ST_TO_ADDR
// uc_side := gensher_side ;
1345: LD_ADDR_OWVAR 20
1349: PUSH
1350: LD_EXP 7
1354: ST_TO_ADDR
// uc_nation := 2 ;
1355: LD_ADDR_OWVAR 21
1359: PUSH
1360: LD_INT 2
1362: ST_TO_ADDR
// tmp := PrepareBase ( ar_depot , gensher_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
1363: LD_ADDR_VAR 0 3
1367: PUSH
1368: LD_INT 7
1370: PPUSH
1371: LD_INT 2
1373: PPUSH
1374: LD_STRING 
1376: PPUSH
1377: LD_INT 8
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 6
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_OWVAR 67
1395: ARRAY
1396: PPUSH
1397: LD_INT 1500
1399: PUSH
1400: LD_INT 300
1402: PUSH
1403: LD_INT 30
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: LD_INT 4
1413: PUSH
1414: LD_INT 4
1416: PUSH
1417: LD_INT 4
1419: PUSH
1420: LD_INT 4
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL 12693 0 6
1433: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp ) ;
1434: LD_ADDR_EXP 14
1438: PUSH
1439: LD_EXP 14
1443: PPUSH
1444: LD_INT 2
1446: PPUSH
1447: LD_VAR 0 3
1451: PPUSH
1452: CALL_OW 1
1456: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) ;
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: LD_INT 22
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 30
1474: PUSH
1475: LD_INT 31
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PPUSH
1486: CALL_OW 69
1490: ST_TO_ADDR
// for i in tmp do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: LD_VAR 0 3
1500: PUSH
1501: FOR_IN
1502: IFFALSE 1572
// begin PrepareHuman ( false , 1 , [ 4 , 3 , 3 ] [ Difficulty ] ) ;
1504: LD_INT 0
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: LD_INT 4
1512: PUSH
1513: LD_INT 3
1515: PUSH
1516: LD_INT 3
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: PUSH
1524: LD_OWVAR 67
1528: ARRAY
1529: PPUSH
1530: CALL_OW 380
// un := CreateHuman ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: CALL_OW 44
1543: ST_TO_ADDR
// SetDir ( un , 1 ) ;
1544: LD_VAR 0 4
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
1556: LD_VAR 0 4
1560: PPUSH
1561: LD_VAR 0 2
1565: PPUSH
1566: CALL_OW 52
// end ;
1570: GO 1501
1572: POP
1573: POP
// tmp := AreaToList ( gensher_mines , 0 ) ;
1574: LD_ADDR_VAR 0 3
1578: PUSH
1579: LD_INT 15
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 517
1589: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 3
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1712
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 , 0 ) ;
1612: LD_VAR 0 3
1616: PUSH
1617: LD_INT 1
1619: ARRAY
1620: PUSH
1621: LD_VAR 0 2
1625: ARRAY
1626: PPUSH
1627: LD_VAR 0 3
1631: PUSH
1632: LD_INT 2
1634: ARRAY
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PPUSH
1642: LD_INT 2
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
1652: LD_ADDR_EXP 3
1656: PUSH
1657: LD_EXP 3
1661: PPUSH
1662: LD_EXP 3
1666: PUSH
1667: LD_INT 1
1669: PLUS
1670: PPUSH
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 1
1678: ARRAY
1679: PUSH
1680: LD_VAR 0 2
1684: ARRAY
1685: PUSH
1686: LD_VAR 0 3
1690: PUSH
1691: LD_INT 2
1693: ARRAY
1694: PUSH
1695: LD_VAR 0 2
1699: ARRAY
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 2
1709: ST_TO_ADDR
// end ;
1710: GO 1609
1712: POP
1713: POP
// end ;
1714: LD_VAR 0 1
1718: RET
// export function InitMC_Gensher ( ) ; begin
1719: LD_INT 0
1721: PPUSH
// MC_SetScanArea ( 2 , gensher_base ) ;
1722: LD_INT 2
1724: PPUSH
1725: LD_INT 2
1727: PPUSH
1728: CALL 66224 0 2
// MC_SetParkingArea ( 2 , gensher_parking ) ;
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 9
1737: PPUSH
1738: CALL 66168 0 2
// MC_SetDepositsXY ( 2 , [ [ 56 , 23 , 0 ] , [ 52 , 40 , 1 ] ] ) ;
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 56
1747: PUSH
1748: LD_INT 23
1750: PUSH
1751: LD_INT 0
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 52
1761: PUSH
1762: LD_INT 40
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL 65227 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ar_gun , ar_rocket_launcher ] ) ;
1781: LD_INT 2
1783: PPUSH
1784: LD_INT 27
1786: PUSH
1787: LD_INT 28
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL 66056 0 2
// MC_SetCratesArea ( 2 , gensher_crates ) ;
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 8
1803: PPUSH
1804: CALL 65738 0 2
// MC_SetTame ( 2 , gensher_ape ) ;
1808: LD_INT 2
1810: PPUSH
1811: LD_INT 7
1813: PPUSH
1814: CALL 65469 0 2
// MC_SetDefenderLimit ( 2 , 4 ) ;
1818: LD_INT 2
1820: PPUSH
1821: LD_INT 4
1823: PPUSH
1824: CALL 65088 0 2
// MC_SetProduceList ( 2 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ) ;
1828: LD_INT 2
1830: PPUSH
1831: LD_INT 13
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: LD_INT 31
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 13
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 14
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 27
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 14
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 27
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 14
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: LD_INT 2
1911: PUSH
1912: LD_INT 28
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 14
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 26
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PPUSH
1947: CALL 64903 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 13 , 18 , 1 ] , [ b_lab , 17 , 27 , 1 ] , [ b_solar_power , 17 , 3 , 0 ] , [ b_oil_mine , 56 , 23 , 0 ] , [ b_armoury , 42 , 29 , 5 ] , [ b_workshop , 11 , 7 , 2 ] , [ b_solar_power , 20 , 3 , 0 ] , [ b_solar_power , 23 , 3 , 0 ] , [ b_solar_power , 26 , 3 , 0 ] , [ b_bunker , 27 , 44 , 5 ] , [ b_bunker , 41 , 41 , 5 ] , [ b_bunker , 45 , 24 , 5 ] , [ b_bunker , 48 , 19 , 5 ] , [ b_bunker , 41 , 3 , 4 ] , [ b_armoury , 44 , 9 , 4 ] , [ b_siberite_mine , 52 , 40 , 3 ] ] ) ;
1951: LD_INT 2
1953: PPUSH
1954: LD_INT 6
1956: PUSH
1957: LD_INT 13
1959: PUSH
1960: LD_INT 18
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 6
1974: PUSH
1975: LD_INT 17
1977: PUSH
1978: LD_INT 27
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 27
1992: PUSH
1993: LD_INT 17
1995: PUSH
1996: LD_INT 3
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 29
2010: PUSH
2011: LD_INT 56
2013: PUSH
2014: LD_INT 23
2016: PUSH
2017: LD_INT 0
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 4
2028: PUSH
2029: LD_INT 42
2031: PUSH
2032: LD_INT 29
2034: PUSH
2035: LD_INT 5
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 2
2046: PUSH
2047: LD_INT 11
2049: PUSH
2050: LD_INT 7
2052: PUSH
2053: LD_INT 2
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 27
2064: PUSH
2065: LD_INT 20
2067: PUSH
2068: LD_INT 3
2070: PUSH
2071: LD_INT 0
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 27
2082: PUSH
2083: LD_INT 23
2085: PUSH
2086: LD_INT 3
2088: PUSH
2089: LD_INT 0
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 27
2100: PUSH
2101: LD_INT 26
2103: PUSH
2104: LD_INT 3
2106: PUSH
2107: LD_INT 0
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 32
2118: PUSH
2119: LD_INT 27
2121: PUSH
2122: LD_INT 44
2124: PUSH
2125: LD_INT 5
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 32
2136: PUSH
2137: LD_INT 41
2139: PUSH
2140: LD_INT 41
2142: PUSH
2143: LD_INT 5
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 32
2154: PUSH
2155: LD_INT 45
2157: PUSH
2158: LD_INT 24
2160: PUSH
2161: LD_INT 5
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: PUSH
2170: LD_INT 32
2172: PUSH
2173: LD_INT 48
2175: PUSH
2176: LD_INT 19
2178: PUSH
2179: LD_INT 5
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 32
2190: PUSH
2191: LD_INT 41
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 4
2208: PUSH
2209: LD_INT 44
2211: PUSH
2212: LD_INT 9
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 30
2226: PUSH
2227: LD_INT 52
2229: PUSH
2230: LD_INT 40
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL 64795 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_opto , b_lab_biological , b_lab_siberium ] ) ;
2264: LD_INT 2
2266: PPUSH
2267: LD_INT 10
2269: PUSH
2270: LD_INT 15
2272: PUSH
2273: LD_INT 13
2275: PUSH
2276: LD_INT 11
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: PPUSH
2285: CALL 65645 0 2
// MC_SetFactoryExtension ( 2 , 11 , 7 , 2 , [ b_ext_stitch , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
2289: LD_INT 2
2291: PPUSH
2292: LD_INT 11
2294: PPUSH
2295: LD_INT 7
2297: PPUSH
2298: LD_INT 2
2300: PPUSH
2301: LD_INT 23
2303: PUSH
2304: LD_INT 16
2306: PUSH
2307: LD_INT 17
2309: PUSH
2310: LD_INT 18
2312: PUSH
2313: LD_INT 22
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL 65850 0 5
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
2327: LD_INT 2
2329: PPUSH
2330: LD_INT 0
2332: PPUSH
2333: CALL 65518 0 2
// end ;
2337: LD_VAR 0 1
2341: RET
// every 10 trigger staticMines and FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) do var i , j , tmp , x , y ;
2342: LD_EXP 3
2346: PUSH
2347: LD_INT 15
2349: PPUSH
2350: LD_INT 81
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PPUSH
2360: CALL_OW 70
2364: AND
2365: IFFALSE 2578
2367: GO 2369
2369: DISABLE
2370: LD_INT 0
2372: PPUSH
2373: PPUSH
2374: PPUSH
2375: PPUSH
2376: PPUSH
// begin enable ;
2377: ENABLE
// tmp := FilterUnitsInArea ( gensher_mines , [ f_enemy , 2 ] ) ;
2378: LD_ADDR_VAR 0 3
2382: PUSH
2383: LD_INT 15
2385: PPUSH
2386: LD_INT 81
2388: PUSH
2389: LD_INT 2
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PPUSH
2396: CALL_OW 70
2400: ST_TO_ADDR
// if not tmp then
2401: LD_VAR 0 3
2405: NOT
2406: IFFALSE 2410
// exit ;
2408: GO 2578
// for i in tmp do
2410: LD_ADDR_VAR 0 1
2414: PUSH
2415: LD_VAR 0 3
2419: PUSH
2420: FOR_IN
2421: IFFALSE 2576
// begin x := GetX ( i ) ;
2423: LD_ADDR_VAR 0 4
2427: PUSH
2428: LD_VAR 0 1
2432: PPUSH
2433: CALL_OW 250
2437: ST_TO_ADDR
// y := GetY ( i ) ;
2438: LD_ADDR_VAR 0 5
2442: PUSH
2443: LD_VAR 0 1
2447: PPUSH
2448: CALL_OW 251
2452: ST_TO_ADDR
// if MineAtPos ( x , y ) then
2453: LD_VAR 0 4
2457: PPUSH
2458: LD_VAR 0 5
2462: PPUSH
2463: CALL_OW 458
2467: IFFALSE 2574
// begin LaunchMineAtPos ( x , y , 2 ) ;
2469: LD_VAR 0 4
2473: PPUSH
2474: LD_VAR 0 5
2478: PPUSH
2479: LD_INT 2
2481: PPUSH
2482: CALL_OW 456
// for j = 1 to staticMines do
2486: LD_ADDR_VAR 0 2
2490: PUSH
2491: DOUBLE
2492: LD_INT 1
2494: DEC
2495: ST_TO_ADDR
2496: LD_EXP 3
2500: PUSH
2501: FOR_TO
2502: IFFALSE 2572
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
2504: LD_EXP 3
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PUSH
2519: LD_VAR 0 4
2523: EQUAL
2524: PUSH
2525: LD_EXP 3
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: PUSH
2536: LD_INT 2
2538: ARRAY
2539: PUSH
2540: LD_VAR 0 5
2544: EQUAL
2545: AND
2546: IFFALSE 2570
// begin staticMines := Delete ( staticMines , j ) ;
2548: LD_ADDR_EXP 3
2552: PUSH
2553: LD_EXP 3
2557: PPUSH
2558: LD_VAR 0 2
2562: PPUSH
2563: CALL_OW 3
2567: ST_TO_ADDR
// break ;
2568: GO 2572
// end ;
2570: GO 2501
2572: POP
2573: POP
// end ; end ;
2574: GO 2420
2576: POP
2577: POP
// end ; end_of_file
2578: PPOPN 5
2580: END
// export Popov , popov_side , extraPopovForces ; export function PreparePopov ; var i , un , tmp ; begin
2581: LD_INT 0
2583: PPUSH
2584: PPUSH
2585: PPUSH
2586: PPUSH
// popov_side := 3 ;
2587: LD_ADDR_EXP 9
2591: PUSH
2592: LD_INT 3
2594: ST_TO_ADDR
// uc_side := popov_side ;
2595: LD_ADDR_OWVAR 20
2599: PUSH
2600: LD_EXP 9
2604: ST_TO_ADDR
// uc_nation := 3 ;
2605: LD_ADDR_OWVAR 21
2609: PUSH
2610: LD_INT 3
2612: ST_TO_ADDR
// tmp := PrepareBase ( ru_depot , popov_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
2613: LD_ADDR_VAR 0 4
2617: PUSH
2618: LD_INT 9
2620: PPUSH
2621: LD_INT 3
2623: PPUSH
2624: LD_STRING 
2626: PPUSH
2627: LD_INT 8
2629: PUSH
2630: LD_INT 7
2632: PUSH
2633: LD_INT 6
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: PUSH
2641: LD_OWVAR 67
2645: ARRAY
2646: PPUSH
2647: LD_INT 1500
2649: PUSH
2650: LD_INT 300
2652: PUSH
2653: LD_INT 30
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: PPUSH
2661: LD_INT 4
2663: PUSH
2664: LD_INT 4
2666: PUSH
2667: LD_INT 4
2669: PUSH
2670: LD_INT 4
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PPUSH
2679: CALL 12693 0 6
2683: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 3 , tmp ) ;
2684: LD_ADDR_EXP 14
2688: PUSH
2689: LD_EXP 14
2693: PPUSH
2694: LD_INT 3
2696: PPUSH
2697: LD_VAR 0 4
2701: PPUSH
2702: CALL_OW 1
2706: ST_TO_ADDR
// extraPopovForces := [ ] ;
2707: LD_ADDR_EXP 10
2711: PUSH
2712: EMPTY
2713: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2714: LD_ADDR_VAR 0 2
2718: PUSH
2719: DOUBLE
2720: LD_INT 1
2722: DEC
2723: ST_TO_ADDR
2724: LD_INT 4
2726: PUSH
2727: LD_INT 5
2729: PUSH
2730: LD_INT 6
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: LIST
2737: PUSH
2738: LD_OWVAR 67
2742: ARRAY
2743: PUSH
2744: FOR_TO
2745: IFFALSE 2848
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
2747: LD_INT 0
2749: PPUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_INT 4
2755: PUSH
2756: LD_INT 5
2758: PUSH
2759: LD_INT 6
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_OWVAR 67
2771: ARRAY
2772: PPUSH
2773: CALL_OW 380
// un := CreateHuman ;
2777: LD_ADDR_VAR 0 3
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceUnitXYR ( un , 131 , 110 , 8 , false ) ;
2787: LD_VAR 0 3
2791: PPUSH
2792: LD_INT 131
2794: PPUSH
2795: LD_INT 110
2797: PPUSH
2798: LD_INT 8
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 50
// ComHold ( un ) ;
2808: LD_VAR 0 3
2812: PPUSH
2813: CALL_OW 140
// extraPopovForces := Replace ( extraPopovForces , extraPopovForces + 1 , un ) ;
2817: LD_ADDR_EXP 10
2821: PUSH
2822: LD_EXP 10
2826: PPUSH
2827: LD_EXP 10
2831: PUSH
2832: LD_INT 1
2834: PLUS
2835: PPUSH
2836: LD_VAR 0 3
2840: PPUSH
2841: CALL_OW 1
2845: ST_TO_ADDR
// end ;
2846: GO 2744
2848: POP
2849: POP
// PrepareSoldier ( false , 6 ) ;
2850: LD_INT 0
2852: PPUSH
2853: LD_INT 6
2855: PPUSH
2856: CALL_OW 381
// un := CreateHuman ;
2860: LD_ADDR_VAR 0 3
2864: PUSH
2865: CALL_OW 44
2869: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2870: LD_VAR 0 3
2874: PPUSH
2875: LD_INT 1
2877: PPUSH
2878: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 150 , 158 ) ) ;
2882: LD_VAR 0 3
2886: PPUSH
2887: LD_INT 150
2889: PPUSH
2890: LD_INT 158
2892: PPUSH
2893: CALL_OW 428
2897: PPUSH
2898: CALL_OW 52
// end ;
2902: LD_VAR 0 1
2906: RET
// export function InitMC_Popov ( ) ; begin
2907: LD_INT 0
2909: PPUSH
// MC_SetScanArea ( 3 , popov_base ) ;
2910: LD_INT 3
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: CALL 66224 0 2
// MC_SetParkingArea ( 3 , popov_parking ) ;
2920: LD_INT 3
2922: PPUSH
2923: LD_INT 10
2925: PPUSH
2926: CALL 66168 0 2
// MC_SetDepositsXY ( 3 , [ [ 86 , 118 , 0 ] , [ 123 , 151 , 1 ] , [ 106 , 113 , 0 ] ] ) ;
2930: LD_INT 3
2932: PPUSH
2933: LD_INT 86
2935: PUSH
2936: LD_INT 118
2938: PUSH
2939: LD_INT 0
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: PUSH
2947: LD_INT 123
2949: PUSH
2950: LD_INT 151
2952: PUSH
2953: LD_INT 1
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 106
2963: PUSH
2964: LD_INT 113
2966: PUSH
2967: LD_INT 0
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: LIST
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: LIST
2979: PPUSH
2980: CALL 65227 0 2
// MC_SetAllowedTurretWeapons ( 3 , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ) ;
2984: LD_INT 3
2986: PPUSH
2987: LD_INT 46
2989: PUSH
2990: LD_INT 45
2992: PUSH
2993: LD_INT 47
2995: PUSH
2996: LD_INT 49
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: PPUSH
3005: CALL 66056 0 2
// MC_SetCratesArea ( 3 , popov_crates ) ;
3009: LD_INT 3
3011: PPUSH
3012: LD_INT 12
3014: PPUSH
3015: CALL 65738 0 2
// MC_SetTame ( 3 , popov_ape ) ;
3019: LD_INT 3
3021: PPUSH
3022: LD_INT 11
3024: PPUSH
3025: CALL 65469 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
3029: LD_INT 3
3031: PPUSH
3032: LD_INT 4
3034: PPUSH
3035: CALL 65088 0 2
// MC_SetProduceList ( 3 , [ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] ] ) ;
3039: LD_INT 3
3041: PPUSH
3042: LD_INT 23
3044: PUSH
3045: LD_INT 1
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: LD_INT 44
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 23
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: LD_INT 3
3068: PUSH
3069: LD_INT 45
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 21
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 43
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 21
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 45
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL 64903 0 2
// MC_SetBuildingList ( 3 , [ [ b_lab , 76 , 145 , 1 ] , [ b_oil_power , 87 , 144 , 0 ] , [ b_oil_mine , 86 , 118 , 0 ] , [ b_oil_mine , 106 , 113 , 0 ] , [ b_oil_power , 87 , 147 , 1 ] , [ b_workshop , 94 , 161 , 0 ] , [ b_lab , 81 , 155 , 1 ] , [ b_armoury , 103 , 147 , 3 ] , [ b_oil_power , 96 , 152 , 0 ] , [ b_oil_power , 96 , 149 , 3 ] , [ b_bunker , 109 , 142 , 3 ] , [ b_bunker , 112 , 148 , 3 ] , [ b_turret , 120 , 159 , 4 ] , [ b_turret , 122 , 163 , 4 ] , [ b_turret , 123 , 167 , 4 ] , [ b_turret , 59 , 111 , 3 ] , [ b_turret , 65 , 111 , 3 ] , [ b_turret , 76 , 117 , 3 ] , [ b_turret , 80 , 119 , 3 ] , [ b_turret , 87 , 125 , 3 ] , [ b_armoury , 92 , 129 , 3 ] , [ b_siberite_power , 85 , 165 , 0 ] , [ b_siberite_power , 83 , 161 , 4 ] , [ b_siberite_power , 91 , 166 , 3 ] , [ b_siberite_power , 102 , 166 , 2 ] , [ b_teleport , 91 , 147 , 3 ] ] ) ;
3124: LD_INT 3
3126: PPUSH
3127: LD_INT 6
3129: PUSH
3130: LD_INT 76
3132: PUSH
3133: LD_INT 145
3135: PUSH
3136: LD_INT 1
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 26
3147: PUSH
3148: LD_INT 87
3150: PUSH
3151: LD_INT 144
3153: PUSH
3154: LD_INT 0
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: PUSH
3163: LD_INT 29
3165: PUSH
3166: LD_INT 86
3168: PUSH
3169: LD_INT 118
3171: PUSH
3172: LD_INT 0
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: LD_INT 29
3183: PUSH
3184: LD_INT 106
3186: PUSH
3187: LD_INT 113
3189: PUSH
3190: LD_INT 0
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 26
3201: PUSH
3202: LD_INT 87
3204: PUSH
3205: LD_INT 147
3207: PUSH
3208: LD_INT 1
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: LD_INT 94
3222: PUSH
3223: LD_INT 161
3225: PUSH
3226: LD_INT 0
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: PUSH
3235: LD_INT 6
3237: PUSH
3238: LD_INT 81
3240: PUSH
3241: LD_INT 155
3243: PUSH
3244: LD_INT 1
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 4
3255: PUSH
3256: LD_INT 103
3258: PUSH
3259: LD_INT 147
3261: PUSH
3262: LD_INT 3
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 26
3273: PUSH
3274: LD_INT 96
3276: PUSH
3277: LD_INT 152
3279: PUSH
3280: LD_INT 0
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 26
3291: PUSH
3292: LD_INT 96
3294: PUSH
3295: LD_INT 149
3297: PUSH
3298: LD_INT 3
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 32
3309: PUSH
3310: LD_INT 109
3312: PUSH
3313: LD_INT 142
3315: PUSH
3316: LD_INT 3
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_INT 32
3327: PUSH
3328: LD_INT 112
3330: PUSH
3331: LD_INT 148
3333: PUSH
3334: LD_INT 3
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 33
3345: PUSH
3346: LD_INT 120
3348: PUSH
3349: LD_INT 159
3351: PUSH
3352: LD_INT 4
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 33
3363: PUSH
3364: LD_INT 122
3366: PUSH
3367: LD_INT 163
3369: PUSH
3370: LD_INT 4
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 33
3381: PUSH
3382: LD_INT 123
3384: PUSH
3385: LD_INT 167
3387: PUSH
3388: LD_INT 4
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: PUSH
3397: LD_INT 33
3399: PUSH
3400: LD_INT 59
3402: PUSH
3403: LD_INT 111
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: PUSH
3415: LD_INT 33
3417: PUSH
3418: LD_INT 65
3420: PUSH
3421: LD_INT 111
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 33
3435: PUSH
3436: LD_INT 76
3438: PUSH
3439: LD_INT 117
3441: PUSH
3442: LD_INT 3
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: PUSH
3451: LD_INT 33
3453: PUSH
3454: LD_INT 80
3456: PUSH
3457: LD_INT 119
3459: PUSH
3460: LD_INT 3
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 33
3471: PUSH
3472: LD_INT 87
3474: PUSH
3475: LD_INT 125
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 4
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 129
3495: PUSH
3496: LD_INT 3
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_INT 28
3507: PUSH
3508: LD_INT 85
3510: PUSH
3511: LD_INT 165
3513: PUSH
3514: LD_INT 0
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: PUSH
3523: LD_INT 28
3525: PUSH
3526: LD_INT 83
3528: PUSH
3529: LD_INT 161
3531: PUSH
3532: LD_INT 4
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 28
3543: PUSH
3544: LD_INT 91
3546: PUSH
3547: LD_INT 166
3549: PUSH
3550: LD_INT 3
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 28
3561: PUSH
3562: LD_INT 102
3564: PUSH
3565: LD_INT 166
3567: PUSH
3568: LD_INT 2
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 34
3579: PUSH
3580: LD_INT 91
3582: PUSH
3583: LD_INT 147
3585: PUSH
3586: LD_INT 3
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: PPUSH
3623: CALL 64795 0 2
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 10
3632: PUSH
3633: LD_INT 12
3635: PUSH
3636: LD_INT 14
3638: PUSH
3639: LD_INT 11
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: PPUSH
3648: CALL 65645 0 2
// MC_SetFactoryExtension ( 3 , 94 , 161 , 0 , [ b_ext_noncombat , b_ext_gun , b_ext_rocket , b_ext_computer , b_ext_siberium ] ) ;
3652: LD_INT 3
3654: PPUSH
3655: LD_INT 94
3657: PPUSH
3658: LD_INT 161
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 19
3666: PUSH
3667: LD_INT 17
3669: PUSH
3670: LD_INT 18
3672: PUSH
3673: LD_INT 24
3675: PUSH
3676: LD_INT 21
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL 65850 0 5
// MC_SetUpgradeBuilding ( 3 , b_depot ) ;
3690: LD_INT 3
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL 65518 0 2
// end ; end_of_file
3700: LD_VAR 0 1
3704: RET
// export Sikorski ; export function PrepareSikorski ; var i , j , un ; begin
3705: LD_INT 0
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
// uc_side := 1 ;
3711: LD_ADDR_OWVAR 20
3715: PUSH
3716: LD_INT 1
3718: ST_TO_ADDR
// uc_nation := 1 ;
3719: LD_ADDR_OWVAR 21
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// hc_importance := 100 ;
3727: LD_ADDR_OWVAR 32
3731: PUSH
3732: LD_INT 100
3734: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
3735: LD_ADDR_OWVAR 26
3739: PUSH
3740: LD_STRING Jeremy Sikorski
3742: ST_TO_ADDR
// hc_gallery := us ;
3743: LD_ADDR_OWVAR 33
3747: PUSH
3748: LD_STRING us
3750: ST_TO_ADDR
// hc_face_number := 19 ;
3751: LD_ADDR_OWVAR 34
3755: PUSH
3756: LD_INT 19
3758: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 1
3764: PPUSH
3765: LD_INT 4
3767: PUSH
3768: LD_INT 4
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: LIST
3778: PUSH
3779: LD_OWVAR 67
3783: ARRAY
3784: PPUSH
3785: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3789: LD_ADDR_OWVAR 29
3793: PUSH
3794: LD_INT 10
3796: PUSH
3797: LD_INT 12
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: ST_TO_ADDR
// Sikorski := CreateHuman ;
3804: LD_ADDR_EXP 11
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitXYR ( Sikorski , 133 , 19 , 2 , false ) ;
3814: LD_EXP 11
3818: PPUSH
3819: LD_INT 133
3821: PPUSH
3822: LD_INT 19
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: LD_INT 0
3830: PPUSH
3831: CALL_OW 50
// InitHc_All ( ) ;
3835: CALL_OW 584
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3839: LD_ADDR_VAR 0 2
3843: PUSH
3844: DOUBLE
3845: LD_INT 1
3847: DEC
3848: ST_TO_ADDR
3849: LD_INT 4
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: LIST
3862: PUSH
3863: LD_OWVAR 67
3867: ARRAY
3868: PUSH
3869: FOR_TO
3870: IFFALSE 3986
// for j := 1 to 4 do
3872: LD_ADDR_VAR 0 3
3876: PUSH
3877: DOUBLE
3878: LD_INT 1
3880: DEC
3881: ST_TO_ADDR
3882: LD_INT 4
3884: PUSH
3885: FOR_TO
3886: IFFALSE 3982
// begin PrepareHuman ( false , j , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
3888: LD_INT 0
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_INT 5
3898: PUSH
3899: LD_INT 4
3901: PUSH
3902: LD_INT 3
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_OWVAR 67
3914: ARRAY
3915: PPUSH
3916: CALL_OW 380
// un := CreateHuman ;
3920: LD_ADDR_VAR 0 4
3924: PUSH
3925: CALL_OW 44
3929: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3930: LD_VAR 0 4
3934: PPUSH
3935: LD_INT 0
3937: PPUSH
3938: LD_INT 5
3940: PPUSH
3941: CALL_OW 12
3945: PPUSH
3946: CALL_OW 233
// PlaceUnitXYR ( un , 133 , 19 , 6 , false ) ;
3950: LD_VAR 0 4
3954: PPUSH
3955: LD_INT 133
3957: PPUSH
3958: LD_INT 19
3960: PPUSH
3961: LD_INT 6
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 50
// ComHold ( un ) ;
3971: LD_VAR 0 4
3975: PPUSH
3976: CALL_OW 140
// end ;
3980: GO 3885
3982: POP
3983: POP
3984: GO 3869
3986: POP
3987: POP
// vc_chassis := us_heavy_tracked ;
3988: LD_ADDR_OWVAR 37
3992: PUSH
3993: LD_INT 4
3995: ST_TO_ADDR
// vc_engine := engine_combustion ;
3996: LD_ADDR_OWVAR 39
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// vc_control := control_manual ;
4004: LD_ADDR_OWVAR 38
4008: PUSH
4009: LD_INT 1
4011: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
4012: LD_ADDR_OWVAR 40
4016: PUSH
4017: LD_INT 14
4019: ST_TO_ADDR
// vc_fuel_battery := 60 ;
4020: LD_ADDR_OWVAR 41
4024: PUSH
4025: LD_INT 60
4027: ST_TO_ADDR
// un := CreateVehicle ;
4028: LD_ADDR_VAR 0 4
4032: PUSH
4033: CALL_OW 45
4037: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4038: LD_VAR 0 4
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: CALL_OW 233
// PlaceUnitXY ( un , 128 , 12 , false ) ;
4050: LD_VAR 0 4
4054: PPUSH
4055: LD_INT 128
4057: PPUSH
4058: LD_INT 12
4060: PPUSH
4061: LD_INT 0
4063: PPUSH
4064: CALL_OW 48
// for i := 1 to 3 do
4068: LD_ADDR_VAR 0 2
4072: PUSH
4073: DOUBLE
4074: LD_INT 1
4076: DEC
4077: ST_TO_ADDR
4078: LD_INT 3
4080: PUSH
4081: FOR_TO
4082: IFFALSE 4105
// CreateCratesXYR ( 5 , 133 , 19 , 3 , false ) ;
4084: LD_INT 5
4086: PPUSH
4087: LD_INT 133
4089: PPUSH
4090: LD_INT 19
4092: PPUSH
4093: LD_INT 3
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL_OW 56
4103: GO 4081
4105: POP
4106: POP
// end ; end_of_file
4107: LD_VAR 0 1
4111: RET
// export function Action ; begin
4112: LD_INT 0
4114: PPUSH
// InGameOn ;
4115: CALL_OW 8
// CenterNowOnXY ( 133 , 19 ) ;
4119: LD_INT 133
4121: PPUSH
4122: LD_INT 19
4124: PPUSH
4125: CALL_OW 86
// Say ( Sikorski , WT-DS-1 ) ;
4129: LD_EXP 11
4133: PPUSH
4134: LD_STRING WT-DS-1
4136: PPUSH
4137: CALL_OW 88
// InGameOff ;
4141: CALL_OW 9
// ChangeMissionObjectives ( DestroyEnemy ) ;
4145: LD_STRING DestroyEnemy
4147: PPUSH
4148: CALL_OW 337
// end ; end_of_file
4152: LD_VAR 0 1
4156: RET
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: CALL 68343 0 1
// if un = Powell then
4166: LD_VAR 0 1
4170: PUSH
4171: LD_EXP 4
4175: EQUAL
4176: IFFALSE 4185
// YouLost ( Powell ) ;
4178: LD_STRING Powell
4180: PPUSH
4181: CALL_OW 104
// end ;
4185: PPOPN 1
4187: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
4188: LD_VAR 0 1
4192: PPUSH
4193: LD_VAR 0 2
4197: PPUSH
4198: CALL 70677 0 2
// end ;
4202: PPOPN 2
4204: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL 69745 0 1
// end ;
4214: PPOPN 1
4216: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
4217: LD_VAR 0 1
4221: PPUSH
4222: CALL 69986 0 1
// end ;
4226: PPOPN 1
4228: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
4229: LD_VAR 0 1
4233: PPUSH
4234: LD_VAR 0 2
4238: PPUSH
4239: CALL 68039 0 2
// end ;
4243: PPOPN 2
4245: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: LD_VAR 0 4
4265: PPUSH
4266: LD_VAR 0 5
4270: PPUSH
4271: CALL 67659 0 5
// end ;
4275: PPOPN 5
4277: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
4278: LD_VAR 0 1
4282: PPUSH
4283: LD_VAR 0 2
4287: PPUSH
4288: CALL 67255 0 2
// end ;
4292: PPOPN 2
4294: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_VAR 0 2
4304: PPUSH
4305: LD_VAR 0 3
4309: PPUSH
4310: LD_VAR 0 4
4314: PPUSH
4315: CALL 67093 0 4
// end ;
4319: PPOPN 4
4321: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
4322: LD_VAR 0 1
4326: PPUSH
4327: LD_VAR 0 2
4331: PPUSH
4332: LD_VAR 0 3
4336: PPUSH
4337: CALL 66868 0 3
// end ;
4341: PPOPN 3
4343: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
4344: LD_VAR 0 1
4348: PPUSH
4349: LD_VAR 0 2
4353: PPUSH
4354: CALL 66753 0 2
// end ;
4358: PPOPN 2
4360: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: LD_VAR 0 2
4370: PPUSH
4371: CALL 70938 0 2
// end ;
4375: PPOPN 2
4377: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
4378: LD_VAR 0 1
4382: PPUSH
4383: LD_VAR 0 2
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: LD_VAR 0 4
4397: PPUSH
4398: CALL 71154 0 4
// end ;
4402: PPOPN 4
4404: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
4405: LD_VAR 0 1
4409: PPUSH
4410: LD_VAR 0 2
4414: PPUSH
4415: CALL 66562 0 2
// end ;
4419: PPOPN 2
4421: END
// export function CustomEvent ( event ) ; begin
4422: LD_INT 0
4424: PPUSH
// end ;
4425: LD_VAR 0 2
4429: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
4430: LD_VAR 0 1
4434: PUSH
4435: LD_INT 1
4437: EQUAL
4438: PUSH
4439: LD_VAR 0 2
4443: PUSH
4444: LD_INT 4
4446: EQUAL
4447: AND
4448: IFFALSE 4457
// YouLost ( FriendlyFire ) ;
4450: LD_STRING FriendlyFire
4452: PPUSH
4453: CALL_OW 104
// end ; end_of_file
4457: PPOPN 2
4459: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
// if exist_mode then
4464: LD_VAR 0 2
4468: IFFALSE 4493
// unit := CreateCharacter ( prefix & ident ) else
4470: LD_ADDR_VAR 0 5
4474: PUSH
4475: LD_VAR 0 3
4479: PUSH
4480: LD_VAR 0 1
4484: STR
4485: PPUSH
4486: CALL_OW 34
4490: ST_TO_ADDR
4491: GO 4508
// unit := NewCharacter ( ident ) ;
4493: LD_ADDR_VAR 0 5
4497: PUSH
4498: LD_VAR 0 1
4502: PPUSH
4503: CALL_OW 25
4507: ST_TO_ADDR
// result := unit ;
4508: LD_ADDR_VAR 0 4
4512: PUSH
4513: LD_VAR 0 5
4517: ST_TO_ADDR
// end ;
4518: LD_VAR 0 4
4522: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4523: LD_INT 0
4525: PPUSH
4526: PPUSH
// if not side or not nation then
4527: LD_VAR 0 1
4531: NOT
4532: PUSH
4533: LD_VAR 0 2
4537: NOT
4538: OR
4539: IFFALSE 4543
// exit ;
4541: GO 5307
// case nation of nation_american :
4543: LD_VAR 0 2
4547: PUSH
4548: LD_INT 1
4550: DOUBLE
4551: EQUAL
4552: IFTRUE 4556
4554: GO 4770
4556: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4557: LD_ADDR_VAR 0 4
4561: PUSH
4562: LD_INT 35
4564: PUSH
4565: LD_INT 45
4567: PUSH
4568: LD_INT 46
4570: PUSH
4571: LD_INT 47
4573: PUSH
4574: LD_INT 82
4576: PUSH
4577: LD_INT 83
4579: PUSH
4580: LD_INT 84
4582: PUSH
4583: LD_INT 85
4585: PUSH
4586: LD_INT 86
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: LD_INT 2
4594: PUSH
4595: LD_INT 6
4597: PUSH
4598: LD_INT 15
4600: PUSH
4601: LD_INT 16
4603: PUSH
4604: LD_INT 7
4606: PUSH
4607: LD_INT 12
4609: PUSH
4610: LD_INT 13
4612: PUSH
4613: LD_INT 10
4615: PUSH
4616: LD_INT 14
4618: PUSH
4619: LD_INT 20
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 22
4627: PUSH
4628: LD_INT 25
4630: PUSH
4631: LD_INT 32
4633: PUSH
4634: LD_INT 27
4636: PUSH
4637: LD_INT 36
4639: PUSH
4640: LD_INT 69
4642: PUSH
4643: LD_INT 39
4645: PUSH
4646: LD_INT 34
4648: PUSH
4649: LD_INT 40
4651: PUSH
4652: LD_INT 48
4654: PUSH
4655: LD_INT 49
4657: PUSH
4658: LD_INT 50
4660: PUSH
4661: LD_INT 51
4663: PUSH
4664: LD_INT 52
4666: PUSH
4667: LD_INT 53
4669: PUSH
4670: LD_INT 54
4672: PUSH
4673: LD_INT 55
4675: PUSH
4676: LD_INT 56
4678: PUSH
4679: LD_INT 57
4681: PUSH
4682: LD_INT 58
4684: PUSH
4685: LD_INT 59
4687: PUSH
4688: LD_INT 60
4690: PUSH
4691: LD_INT 61
4693: PUSH
4694: LD_INT 62
4696: PUSH
4697: LD_INT 80
4699: PUSH
4700: LD_INT 82
4702: PUSH
4703: LD_INT 83
4705: PUSH
4706: LD_INT 84
4708: PUSH
4709: LD_INT 85
4711: PUSH
4712: LD_INT 86
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: ST_TO_ADDR
4768: GO 5231
4770: LD_INT 2
4772: DOUBLE
4773: EQUAL
4774: IFTRUE 4778
4776: GO 5000
4778: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_INT 35
4786: PUSH
4787: LD_INT 45
4789: PUSH
4790: LD_INT 46
4792: PUSH
4793: LD_INT 47
4795: PUSH
4796: LD_INT 82
4798: PUSH
4799: LD_INT 83
4801: PUSH
4802: LD_INT 84
4804: PUSH
4805: LD_INT 85
4807: PUSH
4808: LD_INT 87
4810: PUSH
4811: LD_INT 70
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: LD_INT 11
4819: PUSH
4820: LD_INT 3
4822: PUSH
4823: LD_INT 4
4825: PUSH
4826: LD_INT 5
4828: PUSH
4829: LD_INT 6
4831: PUSH
4832: LD_INT 15
4834: PUSH
4835: LD_INT 18
4837: PUSH
4838: LD_INT 7
4840: PUSH
4841: LD_INT 17
4843: PUSH
4844: LD_INT 8
4846: PUSH
4847: LD_INT 20
4849: PUSH
4850: LD_INT 21
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 72
4858: PUSH
4859: LD_INT 26
4861: PUSH
4862: LD_INT 69
4864: PUSH
4865: LD_INT 39
4867: PUSH
4868: LD_INT 40
4870: PUSH
4871: LD_INT 41
4873: PUSH
4874: LD_INT 42
4876: PUSH
4877: LD_INT 43
4879: PUSH
4880: LD_INT 48
4882: PUSH
4883: LD_INT 49
4885: PUSH
4886: LD_INT 50
4888: PUSH
4889: LD_INT 51
4891: PUSH
4892: LD_INT 52
4894: PUSH
4895: LD_INT 53
4897: PUSH
4898: LD_INT 54
4900: PUSH
4901: LD_INT 55
4903: PUSH
4904: LD_INT 56
4906: PUSH
4907: LD_INT 60
4909: PUSH
4910: LD_INT 61
4912: PUSH
4913: LD_INT 62
4915: PUSH
4916: LD_INT 66
4918: PUSH
4919: LD_INT 67
4921: PUSH
4922: LD_INT 68
4924: PUSH
4925: LD_INT 81
4927: PUSH
4928: LD_INT 82
4930: PUSH
4931: LD_INT 83
4933: PUSH
4934: LD_INT 84
4936: PUSH
4937: LD_INT 85
4939: PUSH
4940: LD_INT 87
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: ST_TO_ADDR
4998: GO 5231
5000: LD_INT 3
5002: DOUBLE
5003: EQUAL
5004: IFTRUE 5008
5006: GO 5230
5008: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
5009: LD_ADDR_VAR 0 4
5013: PUSH
5014: LD_INT 46
5016: PUSH
5017: LD_INT 47
5019: PUSH
5020: LD_INT 1
5022: PUSH
5023: LD_INT 2
5025: PUSH
5026: LD_INT 82
5028: PUSH
5029: LD_INT 83
5031: PUSH
5032: LD_INT 84
5034: PUSH
5035: LD_INT 85
5037: PUSH
5038: LD_INT 86
5040: PUSH
5041: LD_INT 11
5043: PUSH
5044: LD_INT 9
5046: PUSH
5047: LD_INT 20
5049: PUSH
5050: LD_INT 19
5052: PUSH
5053: LD_INT 21
5055: PUSH
5056: LD_INT 24
5058: PUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 25
5064: PUSH
5065: LD_INT 28
5067: PUSH
5068: LD_INT 29
5070: PUSH
5071: LD_INT 30
5073: PUSH
5074: LD_INT 31
5076: PUSH
5077: LD_INT 37
5079: PUSH
5080: LD_INT 38
5082: PUSH
5083: LD_INT 32
5085: PUSH
5086: LD_INT 27
5088: PUSH
5089: LD_INT 33
5091: PUSH
5092: LD_INT 69
5094: PUSH
5095: LD_INT 39
5097: PUSH
5098: LD_INT 34
5100: PUSH
5101: LD_INT 40
5103: PUSH
5104: LD_INT 71
5106: PUSH
5107: LD_INT 23
5109: PUSH
5110: LD_INT 44
5112: PUSH
5113: LD_INT 48
5115: PUSH
5116: LD_INT 49
5118: PUSH
5119: LD_INT 50
5121: PUSH
5122: LD_INT 51
5124: PUSH
5125: LD_INT 52
5127: PUSH
5128: LD_INT 53
5130: PUSH
5131: LD_INT 54
5133: PUSH
5134: LD_INT 55
5136: PUSH
5137: LD_INT 56
5139: PUSH
5140: LD_INT 57
5142: PUSH
5143: LD_INT 58
5145: PUSH
5146: LD_INT 59
5148: PUSH
5149: LD_INT 63
5151: PUSH
5152: LD_INT 64
5154: PUSH
5155: LD_INT 65
5157: PUSH
5158: LD_INT 82
5160: PUSH
5161: LD_INT 83
5163: PUSH
5164: LD_INT 84
5166: PUSH
5167: LD_INT 85
5169: PUSH
5170: LD_INT 86
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: ST_TO_ADDR
5228: GO 5231
5230: POP
// if state > - 1 and state < 3 then
5231: LD_VAR 0 3
5235: PUSH
5236: LD_INT 1
5238: NEG
5239: GREATER
5240: PUSH
5241: LD_VAR 0 3
5245: PUSH
5246: LD_INT 3
5248: LESS
5249: AND
5250: IFFALSE 5307
// for i in result do
5252: LD_ADDR_VAR 0 5
5256: PUSH
5257: LD_VAR 0 4
5261: PUSH
5262: FOR_IN
5263: IFFALSE 5305
// if GetTech ( i , side ) <> state then
5265: LD_VAR 0 5
5269: PPUSH
5270: LD_VAR 0 1
5274: PPUSH
5275: CALL_OW 321
5279: PUSH
5280: LD_VAR 0 3
5284: NONEQUAL
5285: IFFALSE 5303
// result := result diff i ;
5287: LD_ADDR_VAR 0 4
5291: PUSH
5292: LD_VAR 0 4
5296: PUSH
5297: LD_VAR 0 5
5301: DIFF
5302: ST_TO_ADDR
5303: GO 5262
5305: POP
5306: POP
// end ;
5307: LD_VAR 0 4
5311: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5312: LD_INT 0
5314: PPUSH
5315: PPUSH
5316: PPUSH
// result := true ;
5317: LD_ADDR_VAR 0 3
5321: PUSH
5322: LD_INT 1
5324: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5325: LD_ADDR_VAR 0 5
5329: PUSH
5330: LD_VAR 0 2
5334: PPUSH
5335: CALL_OW 480
5339: ST_TO_ADDR
// if not tmp then
5340: LD_VAR 0 5
5344: NOT
5345: IFFALSE 5349
// exit ;
5347: GO 5398
// for i in tmp do
5349: LD_ADDR_VAR 0 4
5353: PUSH
5354: LD_VAR 0 5
5358: PUSH
5359: FOR_IN
5360: IFFALSE 5396
// if GetTech ( i , side ) <> state_researched then
5362: LD_VAR 0 4
5366: PPUSH
5367: LD_VAR 0 1
5371: PPUSH
5372: CALL_OW 321
5376: PUSH
5377: LD_INT 2
5379: NONEQUAL
5380: IFFALSE 5394
// begin result := false ;
5382: LD_ADDR_VAR 0 3
5386: PUSH
5387: LD_INT 0
5389: ST_TO_ADDR
// exit ;
5390: POP
5391: POP
5392: GO 5398
// end ;
5394: GO 5359
5396: POP
5397: POP
// end ;
5398: LD_VAR 0 3
5402: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5403: LD_INT 0
5405: PPUSH
5406: PPUSH
5407: PPUSH
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
5417: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5418: LD_VAR 0 1
5422: NOT
5423: PUSH
5424: LD_VAR 0 1
5428: PPUSH
5429: CALL_OW 257
5433: PUSH
5434: LD_INT 9
5436: NONEQUAL
5437: OR
5438: IFFALSE 5442
// exit ;
5440: GO 6015
// side := GetSide ( unit ) ;
5442: LD_ADDR_VAR 0 9
5446: PUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 255
5456: ST_TO_ADDR
// tech_space := tech_spacanom ;
5457: LD_ADDR_VAR 0 12
5461: PUSH
5462: LD_INT 29
5464: ST_TO_ADDR
// tech_time := tech_taurad ;
5465: LD_ADDR_VAR 0 13
5469: PUSH
5470: LD_INT 28
5472: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5473: LD_ADDR_VAR 0 11
5477: PUSH
5478: LD_VAR 0 1
5482: PPUSH
5483: CALL_OW 310
5487: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5488: LD_VAR 0 11
5492: PPUSH
5493: CALL_OW 247
5497: PUSH
5498: LD_INT 2
5500: EQUAL
5501: IFFALSE 5505
// exit ;
5503: GO 6015
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5505: LD_ADDR_VAR 0 8
5509: PUSH
5510: LD_INT 81
5512: PUSH
5513: LD_VAR 0 9
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 3
5524: PUSH
5525: LD_INT 21
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PPUSH
5543: CALL_OW 69
5547: ST_TO_ADDR
// if not tmp then
5548: LD_VAR 0 8
5552: NOT
5553: IFFALSE 5557
// exit ;
5555: GO 6015
// if in_unit then
5557: LD_VAR 0 11
5561: IFFALSE 5585
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5563: LD_ADDR_VAR 0 10
5567: PUSH
5568: LD_VAR 0 8
5572: PPUSH
5573: LD_VAR 0 11
5577: PPUSH
5578: CALL_OW 74
5582: ST_TO_ADDR
5583: GO 5605
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5585: LD_ADDR_VAR 0 10
5589: PUSH
5590: LD_VAR 0 8
5594: PPUSH
5595: LD_VAR 0 1
5599: PPUSH
5600: CALL_OW 74
5604: ST_TO_ADDR
// if not enemy then
5605: LD_VAR 0 10
5609: NOT
5610: IFFALSE 5614
// exit ;
5612: GO 6015
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5614: LD_VAR 0 11
5618: PUSH
5619: LD_VAR 0 11
5623: PPUSH
5624: LD_VAR 0 10
5628: PPUSH
5629: CALL_OW 296
5633: PUSH
5634: LD_INT 13
5636: GREATER
5637: AND
5638: PUSH
5639: LD_VAR 0 1
5643: PPUSH
5644: LD_VAR 0 10
5648: PPUSH
5649: CALL_OW 296
5653: PUSH
5654: LD_INT 12
5656: GREATER
5657: OR
5658: IFFALSE 5662
// exit ;
5660: GO 6015
// missile := [ 1 ] ;
5662: LD_ADDR_VAR 0 14
5666: PUSH
5667: LD_INT 1
5669: PUSH
5670: EMPTY
5671: LIST
5672: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5673: LD_VAR 0 9
5677: PPUSH
5678: LD_VAR 0 12
5682: PPUSH
5683: CALL_OW 325
5687: IFFALSE 5716
// missile := Insert ( missile , missile + 1 , 2 ) ;
5689: LD_ADDR_VAR 0 14
5693: PUSH
5694: LD_VAR 0 14
5698: PPUSH
5699: LD_VAR 0 14
5703: PUSH
5704: LD_INT 1
5706: PLUS
5707: PPUSH
5708: LD_INT 2
5710: PPUSH
5711: CALL_OW 2
5715: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5716: LD_VAR 0 9
5720: PPUSH
5721: LD_VAR 0 13
5725: PPUSH
5726: CALL_OW 325
5730: PUSH
5731: LD_VAR 0 10
5735: PPUSH
5736: CALL_OW 255
5740: PPUSH
5741: LD_VAR 0 13
5745: PPUSH
5746: CALL_OW 325
5750: NOT
5751: AND
5752: IFFALSE 5781
// missile := Insert ( missile , missile + 1 , 3 ) ;
5754: LD_ADDR_VAR 0 14
5758: PUSH
5759: LD_VAR 0 14
5763: PPUSH
5764: LD_VAR 0 14
5768: PUSH
5769: LD_INT 1
5771: PLUS
5772: PPUSH
5773: LD_INT 3
5775: PPUSH
5776: CALL_OW 2
5780: ST_TO_ADDR
// if missile < 2 then
5781: LD_VAR 0 14
5785: PUSH
5786: LD_INT 2
5788: LESS
5789: IFFALSE 5793
// exit ;
5791: GO 6015
// x := GetX ( enemy ) ;
5793: LD_ADDR_VAR 0 4
5797: PUSH
5798: LD_VAR 0 10
5802: PPUSH
5803: CALL_OW 250
5807: ST_TO_ADDR
// y := GetY ( enemy ) ;
5808: LD_ADDR_VAR 0 5
5812: PUSH
5813: LD_VAR 0 10
5817: PPUSH
5818: CALL_OW 251
5822: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 4
5832: PUSH
5833: LD_INT 1
5835: NEG
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: CALL_OW 12
5844: PLUS
5845: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5846: LD_ADDR_VAR 0 7
5850: PUSH
5851: LD_VAR 0 5
5855: PUSH
5856: LD_INT 1
5858: NEG
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 12
5867: PLUS
5868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5869: LD_VAR 0 6
5873: PPUSH
5874: LD_VAR 0 7
5878: PPUSH
5879: CALL_OW 488
5883: NOT
5884: IFFALSE 5906
// begin _x := x ;
5886: LD_ADDR_VAR 0 6
5890: PUSH
5891: LD_VAR 0 4
5895: ST_TO_ADDR
// _y := y ;
5896: LD_ADDR_VAR 0 7
5900: PUSH
5901: LD_VAR 0 5
5905: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5906: LD_ADDR_VAR 0 3
5910: PUSH
5911: LD_INT 1
5913: PPUSH
5914: LD_VAR 0 14
5918: PPUSH
5919: CALL_OW 12
5923: ST_TO_ADDR
// case i of 1 :
5924: LD_VAR 0 3
5928: PUSH
5929: LD_INT 1
5931: DOUBLE
5932: EQUAL
5933: IFTRUE 5937
5935: GO 5954
5937: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5938: LD_VAR 0 1
5942: PPUSH
5943: LD_VAR 0 10
5947: PPUSH
5948: CALL_OW 115
5952: GO 6015
5954: LD_INT 2
5956: DOUBLE
5957: EQUAL
5958: IFTRUE 5962
5960: GO 5984
5962: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5963: LD_VAR 0 1
5967: PPUSH
5968: LD_VAR 0 6
5972: PPUSH
5973: LD_VAR 0 7
5977: PPUSH
5978: CALL_OW 153
5982: GO 6015
5984: LD_INT 3
5986: DOUBLE
5987: EQUAL
5988: IFTRUE 5992
5990: GO 6014
5992: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5993: LD_VAR 0 1
5997: PPUSH
5998: LD_VAR 0 6
6002: PPUSH
6003: LD_VAR 0 7
6007: PPUSH
6008: CALL_OW 154
6012: GO 6015
6014: POP
// end ;
6015: LD_VAR 0 2
6019: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
6020: LD_INT 0
6022: PPUSH
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
6027: PPUSH
// if not unit or not building then
6028: LD_VAR 0 1
6032: NOT
6033: PUSH
6034: LD_VAR 0 2
6038: NOT
6039: OR
6040: IFFALSE 6044
// exit ;
6042: GO 6202
// x := GetX ( building ) ;
6044: LD_ADDR_VAR 0 5
6048: PUSH
6049: LD_VAR 0 2
6053: PPUSH
6054: CALL_OW 250
6058: ST_TO_ADDR
// y := GetY ( building ) ;
6059: LD_ADDR_VAR 0 6
6063: PUSH
6064: LD_VAR 0 2
6068: PPUSH
6069: CALL_OW 251
6073: ST_TO_ADDR
// for i = 0 to 5 do
6074: LD_ADDR_VAR 0 4
6078: PUSH
6079: DOUBLE
6080: LD_INT 0
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 5
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6200
// begin _x := ShiftX ( x , i , 3 ) ;
6090: LD_ADDR_VAR 0 7
6094: PUSH
6095: LD_VAR 0 5
6099: PPUSH
6100: LD_VAR 0 4
6104: PPUSH
6105: LD_INT 3
6107: PPUSH
6108: CALL_OW 272
6112: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6113: LD_ADDR_VAR 0 8
6117: PUSH
6118: LD_VAR 0 6
6122: PPUSH
6123: LD_VAR 0 4
6127: PPUSH
6128: LD_INT 3
6130: PPUSH
6131: CALL_OW 273
6135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_VAR 0 8
6145: PPUSH
6146: CALL_OW 488
6150: NOT
6151: IFFALSE 6155
// continue ;
6153: GO 6087
// if HexInfo ( _x , _y ) = 0 then
6155: LD_VAR 0 7
6159: PPUSH
6160: LD_VAR 0 8
6164: PPUSH
6165: CALL_OW 428
6169: PUSH
6170: LD_INT 0
6172: EQUAL
6173: IFFALSE 6198
// begin ComMoveXY ( unit , _x , _y ) ;
6175: LD_VAR 0 1
6179: PPUSH
6180: LD_VAR 0 7
6184: PPUSH
6185: LD_VAR 0 8
6189: PPUSH
6190: CALL_OW 111
// exit ;
6194: POP
6195: POP
6196: GO 6202
// end ; end ;
6198: GO 6087
6200: POP
6201: POP
// end ;
6202: LD_VAR 0 3
6206: RET
// export function ScanBase ( side , base_area ) ; begin
6207: LD_INT 0
6209: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6210: LD_ADDR_VAR 0 3
6214: PUSH
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_INT 81
6222: PUSH
6223: LD_VAR 0 1
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 70
6236: ST_TO_ADDR
// end ;
6237: LD_VAR 0 3
6241: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6242: LD_INT 0
6244: PPUSH
6245: PPUSH
6246: PPUSH
6247: PPUSH
// result := false ;
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: LD_INT 0
6255: ST_TO_ADDR
// side := GetSide ( unit ) ;
6256: LD_ADDR_VAR 0 3
6260: PUSH
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 255
6270: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6271: LD_ADDR_VAR 0 4
6275: PUSH
6276: LD_VAR 0 1
6280: PPUSH
6281: CALL_OW 248
6285: ST_TO_ADDR
// case nat of 1 :
6286: LD_VAR 0 4
6290: PUSH
6291: LD_INT 1
6293: DOUBLE
6294: EQUAL
6295: IFTRUE 6299
6297: GO 6310
6299: POP
// tech := tech_lassight ; 2 :
6300: LD_ADDR_VAR 0 5
6304: PUSH
6305: LD_INT 12
6307: ST_TO_ADDR
6308: GO 6349
6310: LD_INT 2
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6329
6318: POP
// tech := tech_mortar ; 3 :
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_INT 41
6326: ST_TO_ADDR
6327: GO 6349
6329: LD_INT 3
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6348
6337: POP
// tech := tech_bazooka ; end ;
6338: LD_ADDR_VAR 0 5
6342: PUSH
6343: LD_INT 44
6345: ST_TO_ADDR
6346: GO 6349
6348: POP
// if Researched ( side , tech ) then
6349: LD_VAR 0 3
6353: PPUSH
6354: LD_VAR 0 5
6358: PPUSH
6359: CALL_OW 325
6363: IFFALSE 6390
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6365: LD_ADDR_VAR 0 2
6369: PUSH
6370: LD_INT 5
6372: PUSH
6373: LD_INT 8
6375: PUSH
6376: LD_INT 9
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: LD_VAR 0 4
6388: ARRAY
6389: ST_TO_ADDR
// end ;
6390: LD_VAR 0 2
6394: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6395: LD_INT 0
6397: PPUSH
6398: PPUSH
6399: PPUSH
// if not mines then
6400: LD_VAR 0 2
6404: NOT
6405: IFFALSE 6409
// exit ;
6407: GO 6553
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6409: LD_ADDR_VAR 0 5
6413: PUSH
6414: LD_INT 81
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 21
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 69
6451: ST_TO_ADDR
// for i in mines do
6452: LD_ADDR_VAR 0 4
6456: PUSH
6457: LD_VAR 0 2
6461: PUSH
6462: FOR_IN
6463: IFFALSE 6551
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6465: LD_VAR 0 4
6469: PUSH
6470: LD_INT 1
6472: ARRAY
6473: PPUSH
6474: LD_VAR 0 4
6478: PUSH
6479: LD_INT 2
6481: ARRAY
6482: PPUSH
6483: CALL_OW 458
6487: NOT
6488: IFFALSE 6492
// continue ;
6490: GO 6462
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6492: LD_VAR 0 4
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: LD_VAR 0 4
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: CALL_OW 428
6514: PUSH
6515: LD_VAR 0 5
6519: IN
6520: IFFALSE 6549
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6522: LD_VAR 0 4
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: LD_VAR 0 4
6535: PUSH
6536: LD_INT 2
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 456
// end ;
6549: GO 6462
6551: POP
6552: POP
// end ;
6553: LD_VAR 0 3
6557: RET
// export function Count ( array ) ; var i ; begin
6558: LD_INT 0
6560: PPUSH
6561: PPUSH
// result := 0 ;
6562: LD_ADDR_VAR 0 2
6566: PUSH
6567: LD_INT 0
6569: ST_TO_ADDR
// for i in array do
6570: LD_ADDR_VAR 0 3
6574: PUSH
6575: LD_VAR 0 1
6579: PUSH
6580: FOR_IN
6581: IFFALSE 6605
// if i then
6583: LD_VAR 0 3
6587: IFFALSE 6603
// result := result + 1 ;
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 1
6601: PLUS
6602: ST_TO_ADDR
6603: GO 6580
6605: POP
6606: POP
// end ;
6607: LD_VAR 0 2
6611: RET
// export function IsEmpty ( building ) ; begin
6612: LD_INT 0
6614: PPUSH
// if not building then
6615: LD_VAR 0 1
6619: NOT
6620: IFFALSE 6624
// exit ;
6622: GO 6667
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6624: LD_ADDR_VAR 0 2
6628: PUSH
6629: LD_VAR 0 1
6633: PUSH
6634: LD_INT 22
6636: PUSH
6637: LD_VAR 0 1
6641: PPUSH
6642: CALL_OW 255
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 58
6653: PUSH
6654: EMPTY
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: IN
6666: ST_TO_ADDR
// end ;
6667: LD_VAR 0 2
6671: RET
// export function IsNotFull ( building ) ; begin
6672: LD_INT 0
6674: PPUSH
// if not building then
6675: LD_VAR 0 1
6679: NOT
6680: IFFALSE 6684
// exit ;
6682: GO 6703
// result := UnitsInside ( building ) < 6 ;
6684: LD_ADDR_VAR 0 2
6688: PUSH
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 313
6698: PUSH
6699: LD_INT 6
6701: LESS
6702: ST_TO_ADDR
// end ;
6703: LD_VAR 0 2
6707: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
6712: PPUSH
6713: PPUSH
// tmp := [ ] ;
6714: LD_ADDR_VAR 0 3
6718: PUSH
6719: EMPTY
6720: ST_TO_ADDR
// list := [ ] ;
6721: LD_ADDR_VAR 0 5
6725: PUSH
6726: EMPTY
6727: ST_TO_ADDR
// for i = 16 to 25 do
6728: LD_ADDR_VAR 0 4
6732: PUSH
6733: DOUBLE
6734: LD_INT 16
6736: DEC
6737: ST_TO_ADDR
6738: LD_INT 25
6740: PUSH
6741: FOR_TO
6742: IFFALSE 6815
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_VAR 0 3
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_VAR 0 1
6761: PPUSH
6762: CALL_OW 255
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 91
6773: PUSH
6774: LD_VAR 0 1
6778: PUSH
6779: LD_INT 6
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_VAR 0 4
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: PUSH
6804: EMPTY
6805: LIST
6806: PPUSH
6807: CALL_OW 69
6811: ADD
6812: ST_TO_ADDR
6813: GO 6741
6815: POP
6816: POP
// for i = 1 to tmp do
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: DOUBLE
6823: LD_INT 1
6825: DEC
6826: ST_TO_ADDR
6827: LD_VAR 0 3
6831: PUSH
6832: FOR_TO
6833: IFFALSE 6921
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6835: LD_ADDR_VAR 0 5
6839: PUSH
6840: LD_VAR 0 5
6844: PUSH
6845: LD_VAR 0 3
6849: PUSH
6850: LD_VAR 0 4
6854: ARRAY
6855: PPUSH
6856: CALL_OW 266
6860: PUSH
6861: LD_VAR 0 3
6865: PUSH
6866: LD_VAR 0 4
6870: ARRAY
6871: PPUSH
6872: CALL_OW 250
6876: PUSH
6877: LD_VAR 0 3
6881: PUSH
6882: LD_VAR 0 4
6886: ARRAY
6887: PPUSH
6888: CALL_OW 251
6892: PUSH
6893: LD_VAR 0 3
6897: PUSH
6898: LD_VAR 0 4
6902: ARRAY
6903: PPUSH
6904: CALL_OW 254
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: ADD
6918: ST_TO_ADDR
6919: GO 6832
6921: POP
6922: POP
// result := list ;
6923: LD_ADDR_VAR 0 2
6927: PUSH
6928: LD_VAR 0 5
6932: ST_TO_ADDR
// end ;
6933: LD_VAR 0 2
6937: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
6945: PPUSH
6946: PPUSH
// if not factory then
6947: LD_VAR 0 1
6951: NOT
6952: IFFALSE 6956
// exit ;
6954: GO 7549
// if control = control_apeman then
6956: LD_VAR 0 4
6960: PUSH
6961: LD_INT 5
6963: EQUAL
6964: IFFALSE 7073
// begin tmp := UnitsInside ( factory ) ;
6966: LD_ADDR_VAR 0 8
6970: PUSH
6971: LD_VAR 0 1
6975: PPUSH
6976: CALL_OW 313
6980: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6981: LD_VAR 0 8
6985: PPUSH
6986: LD_INT 25
6988: PUSH
6989: LD_INT 12
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PPUSH
6996: CALL_OW 72
7000: NOT
7001: IFFALSE 7011
// control := control_manual ;
7003: LD_ADDR_VAR 0 4
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
7011: LD_ADDR_VAR 0 8
7015: PUSH
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL 6708 0 1
7025: ST_TO_ADDR
// if tmp then
7026: LD_VAR 0 8
7030: IFFALSE 7073
// begin for i in tmp do
7032: LD_ADDR_VAR 0 7
7036: PUSH
7037: LD_VAR 0 8
7041: PUSH
7042: FOR_IN
7043: IFFALSE 7071
// if i [ 1 ] = b_ext_radio then
7045: LD_VAR 0 7
7049: PUSH
7050: LD_INT 1
7052: ARRAY
7053: PUSH
7054: LD_INT 22
7056: EQUAL
7057: IFFALSE 7069
// begin control := control_remote ;
7059: LD_ADDR_VAR 0 4
7063: PUSH
7064: LD_INT 2
7066: ST_TO_ADDR
// break ;
7067: GO 7071
// end ;
7069: GO 7042
7071: POP
7072: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7073: LD_VAR 0 1
7077: PPUSH
7078: LD_VAR 0 2
7082: PPUSH
7083: LD_VAR 0 3
7087: PPUSH
7088: LD_VAR 0 4
7092: PPUSH
7093: LD_VAR 0 5
7097: PPUSH
7098: CALL_OW 448
7102: IFFALSE 7137
// begin result := [ chassis , engine , control , weapon ] ;
7104: LD_ADDR_VAR 0 6
7108: PUSH
7109: LD_VAR 0 2
7113: PUSH
7114: LD_VAR 0 3
7118: PUSH
7119: LD_VAR 0 4
7123: PUSH
7124: LD_VAR 0 5
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: ST_TO_ADDR
// exit ;
7135: GO 7549
// end ; _chassis := AvailableChassisList ( factory ) ;
7137: LD_ADDR_VAR 0 9
7141: PUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: CALL_OW 475
7151: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7152: LD_ADDR_VAR 0 11
7156: PUSH
7157: LD_VAR 0 1
7161: PPUSH
7162: CALL_OW 476
7166: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7167: LD_ADDR_VAR 0 12
7171: PUSH
7172: LD_VAR 0 1
7176: PPUSH
7177: CALL_OW 477
7181: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7182: LD_ADDR_VAR 0 10
7186: PUSH
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 478
7196: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7197: LD_VAR 0 9
7201: NOT
7202: PUSH
7203: LD_VAR 0 11
7207: NOT
7208: OR
7209: PUSH
7210: LD_VAR 0 12
7214: NOT
7215: OR
7216: PUSH
7217: LD_VAR 0 10
7221: NOT
7222: OR
7223: IFFALSE 7258
// begin result := [ chassis , engine , control , weapon ] ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_VAR 0 2
7234: PUSH
7235: LD_VAR 0 3
7239: PUSH
7240: LD_VAR 0 4
7244: PUSH
7245: LD_VAR 0 5
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: ST_TO_ADDR
// exit ;
7256: GO 7549
// end ; if not chassis in _chassis then
7258: LD_VAR 0 2
7262: PUSH
7263: LD_VAR 0 9
7267: IN
7268: NOT
7269: IFFALSE 7295
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7271: LD_ADDR_VAR 0 2
7275: PUSH
7276: LD_VAR 0 9
7280: PUSH
7281: LD_INT 1
7283: PPUSH
7284: LD_VAR 0 9
7288: PPUSH
7289: CALL_OW 12
7293: ARRAY
7294: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7295: LD_VAR 0 2
7299: PPUSH
7300: LD_VAR 0 3
7304: PPUSH
7305: CALL 7554 0 2
7309: NOT
7310: IFFALSE 7369
// repeat engine := _engine [ 1 ] ;
7312: LD_ADDR_VAR 0 3
7316: PUSH
7317: LD_VAR 0 11
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7326: LD_ADDR_VAR 0 11
7330: PUSH
7331: LD_VAR 0 11
7335: PPUSH
7336: LD_INT 1
7338: PPUSH
7339: CALL_OW 3
7343: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7344: LD_VAR 0 2
7348: PPUSH
7349: LD_VAR 0 3
7353: PPUSH
7354: CALL 7554 0 2
7358: PUSH
7359: LD_VAR 0 11
7363: PUSH
7364: EMPTY
7365: EQUAL
7366: OR
7367: IFFALSE 7312
// if not control in _control then
7369: LD_VAR 0 4
7373: PUSH
7374: LD_VAR 0 12
7378: IN
7379: NOT
7380: IFFALSE 7406
// control := _control [ rand ( 1 , _control ) ] ;
7382: LD_ADDR_VAR 0 4
7386: PUSH
7387: LD_VAR 0 12
7391: PUSH
7392: LD_INT 1
7394: PPUSH
7395: LD_VAR 0 12
7399: PPUSH
7400: CALL_OW 12
7404: ARRAY
7405: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7406: LD_VAR 0 2
7410: PPUSH
7411: LD_VAR 0 5
7415: PPUSH
7416: CALL 7774 0 2
7420: NOT
7421: IFFALSE 7480
// repeat weapon := _weapon [ 1 ] ;
7423: LD_ADDR_VAR 0 5
7427: PUSH
7428: LD_VAR 0 10
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7437: LD_ADDR_VAR 0 10
7441: PUSH
7442: LD_VAR 0 10
7446: PPUSH
7447: LD_INT 1
7449: PPUSH
7450: CALL_OW 3
7454: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7455: LD_VAR 0 2
7459: PPUSH
7460: LD_VAR 0 5
7464: PPUSH
7465: CALL 7774 0 2
7469: PUSH
7470: LD_VAR 0 10
7474: PUSH
7475: EMPTY
7476: EQUAL
7477: OR
7478: IFFALSE 7423
// result := [ ] ;
7480: LD_ADDR_VAR 0 6
7484: PUSH
7485: EMPTY
7486: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7487: LD_VAR 0 1
7491: PPUSH
7492: LD_VAR 0 2
7496: PPUSH
7497: LD_VAR 0 3
7501: PPUSH
7502: LD_VAR 0 4
7506: PPUSH
7507: LD_VAR 0 5
7511: PPUSH
7512: CALL_OW 448
7516: IFFALSE 7549
// result := [ chassis , engine , control , weapon ] ;
7518: LD_ADDR_VAR 0 6
7522: PUSH
7523: LD_VAR 0 2
7527: PUSH
7528: LD_VAR 0 3
7532: PUSH
7533: LD_VAR 0 4
7537: PUSH
7538: LD_VAR 0 5
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: ST_TO_ADDR
// end ;
7549: LD_VAR 0 6
7553: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7554: LD_INT 0
7556: PPUSH
// if not chassis or not engine then
7557: LD_VAR 0 1
7561: NOT
7562: PUSH
7563: LD_VAR 0 2
7567: NOT
7568: OR
7569: IFFALSE 7573
// exit ;
7571: GO 7769
// case engine of engine_solar :
7573: LD_VAR 0 2
7577: PUSH
7578: LD_INT 2
7580: DOUBLE
7581: EQUAL
7582: IFTRUE 7586
7584: GO 7624
7586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_INT 11
7594: PUSH
7595: LD_INT 12
7597: PUSH
7598: LD_INT 13
7600: PUSH
7601: LD_INT 14
7603: PUSH
7604: LD_INT 1
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: ST_TO_ADDR
7622: GO 7753
7624: LD_INT 1
7626: DOUBLE
7627: EQUAL
7628: IFTRUE 7632
7630: GO 7694
7632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 11
7640: PUSH
7641: LD_INT 12
7643: PUSH
7644: LD_INT 13
7646: PUSH
7647: LD_INT 14
7649: PUSH
7650: LD_INT 1
7652: PUSH
7653: LD_INT 2
7655: PUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 4
7661: PUSH
7662: LD_INT 5
7664: PUSH
7665: LD_INT 21
7667: PUSH
7668: LD_INT 23
7670: PUSH
7671: LD_INT 22
7673: PUSH
7674: LD_INT 24
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: ST_TO_ADDR
7692: GO 7753
7694: LD_INT 3
7696: DOUBLE
7697: EQUAL
7698: IFTRUE 7702
7700: GO 7752
7702: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7703: LD_ADDR_VAR 0 3
7707: PUSH
7708: LD_INT 13
7710: PUSH
7711: LD_INT 14
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 3
7719: PUSH
7720: LD_INT 4
7722: PUSH
7723: LD_INT 5
7725: PUSH
7726: LD_INT 21
7728: PUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 23
7734: PUSH
7735: LD_INT 24
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: ST_TO_ADDR
7750: GO 7753
7752: POP
// result := ( chassis in result ) ;
7753: LD_ADDR_VAR 0 3
7757: PUSH
7758: LD_VAR 0 1
7762: PUSH
7763: LD_VAR 0 3
7767: IN
7768: ST_TO_ADDR
// end ;
7769: LD_VAR 0 3
7773: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7774: LD_INT 0
7776: PPUSH
// if not chassis or not weapon then
7777: LD_VAR 0 1
7781: NOT
7782: PUSH
7783: LD_VAR 0 2
7787: NOT
7788: OR
7789: IFFALSE 7793
// exit ;
7791: GO 8819
// case weapon of us_machine_gun :
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 2
7800: DOUBLE
7801: EQUAL
7802: IFTRUE 7806
7804: GO 7836
7806: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7807: LD_ADDR_VAR 0 3
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: LD_INT 4
7823: PUSH
7824: LD_INT 5
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: ST_TO_ADDR
7834: GO 8803
7836: LD_INT 3
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7874
7844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7845: LD_ADDR_VAR 0 3
7849: PUSH
7850: LD_INT 1
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 4
7861: PUSH
7862: LD_INT 5
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: ST_TO_ADDR
7872: GO 8803
7874: LD_INT 11
7876: DOUBLE
7877: EQUAL
7878: IFTRUE 7882
7880: GO 7912
7882: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7883: LD_ADDR_VAR 0 3
7887: PUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 2
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: LD_INT 4
7899: PUSH
7900: LD_INT 5
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: ST_TO_ADDR
7910: GO 8803
7912: LD_INT 4
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7946
7920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7921: LD_ADDR_VAR 0 3
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 4
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: ST_TO_ADDR
7944: GO 8803
7946: LD_INT 5
7948: DOUBLE
7949: EQUAL
7950: IFTRUE 7954
7952: GO 7980
7954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7955: LD_ADDR_VAR 0 3
7959: PUSH
7960: LD_INT 2
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: LD_INT 4
7968: PUSH
7969: LD_INT 5
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: ST_TO_ADDR
7978: GO 8803
7980: LD_INT 9
7982: DOUBLE
7983: EQUAL
7984: IFTRUE 7988
7986: GO 8014
7988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7989: LD_ADDR_VAR 0 3
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: LD_INT 3
7999: PUSH
8000: LD_INT 4
8002: PUSH
8003: LD_INT 5
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: ST_TO_ADDR
8012: GO 8803
8014: LD_INT 7
8016: DOUBLE
8017: EQUAL
8018: IFTRUE 8022
8020: GO 8048
8022: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
8023: LD_ADDR_VAR 0 3
8027: PUSH
8028: LD_INT 2
8030: PUSH
8031: LD_INT 3
8033: PUSH
8034: LD_INT 4
8036: PUSH
8037: LD_INT 5
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
8046: GO 8803
8048: LD_INT 12
8050: DOUBLE
8051: EQUAL
8052: IFTRUE 8056
8054: GO 8082
8056: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8057: LD_ADDR_VAR 0 3
8061: PUSH
8062: LD_INT 2
8064: PUSH
8065: LD_INT 3
8067: PUSH
8068: LD_INT 4
8070: PUSH
8071: LD_INT 5
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
8080: GO 8803
8082: LD_INT 13
8084: DOUBLE
8085: EQUAL
8086: IFTRUE 8090
8088: GO 8116
8090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8091: LD_ADDR_VAR 0 3
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 3
8101: PUSH
8102: LD_INT 4
8104: PUSH
8105: LD_INT 5
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: ST_TO_ADDR
8114: GO 8803
8116: LD_INT 14
8118: DOUBLE
8119: EQUAL
8120: IFTRUE 8124
8122: GO 8142
8124: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8125: LD_ADDR_VAR 0 3
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: ST_TO_ADDR
8140: GO 8803
8142: LD_INT 6
8144: DOUBLE
8145: EQUAL
8146: IFTRUE 8150
8148: GO 8168
8150: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8151: LD_ADDR_VAR 0 3
8155: PUSH
8156: LD_INT 4
8158: PUSH
8159: LD_INT 5
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: ST_TO_ADDR
8166: GO 8803
8168: LD_INT 10
8170: DOUBLE
8171: EQUAL
8172: IFTRUE 8176
8174: GO 8194
8176: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8177: LD_ADDR_VAR 0 3
8181: PUSH
8182: LD_INT 4
8184: PUSH
8185: LD_INT 5
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: ST_TO_ADDR
8192: GO 8803
8194: LD_INT 22
8196: DOUBLE
8197: EQUAL
8198: IFTRUE 8202
8200: GO 8228
8202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8203: LD_ADDR_VAR 0 3
8207: PUSH
8208: LD_INT 11
8210: PUSH
8211: LD_INT 12
8213: PUSH
8214: LD_INT 13
8216: PUSH
8217: LD_INT 14
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: ST_TO_ADDR
8226: GO 8803
8228: LD_INT 23
8230: DOUBLE
8231: EQUAL
8232: IFTRUE 8236
8234: GO 8262
8236: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8237: LD_ADDR_VAR 0 3
8241: PUSH
8242: LD_INT 11
8244: PUSH
8245: LD_INT 12
8247: PUSH
8248: LD_INT 13
8250: PUSH
8251: LD_INT 14
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: ST_TO_ADDR
8260: GO 8803
8262: LD_INT 24
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8296
8270: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8271: LD_ADDR_VAR 0 3
8275: PUSH
8276: LD_INT 11
8278: PUSH
8279: LD_INT 12
8281: PUSH
8282: LD_INT 13
8284: PUSH
8285: LD_INT 14
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: ST_TO_ADDR
8294: GO 8803
8296: LD_INT 30
8298: DOUBLE
8299: EQUAL
8300: IFTRUE 8304
8302: GO 8330
8304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 11
8312: PUSH
8313: LD_INT 12
8315: PUSH
8316: LD_INT 13
8318: PUSH
8319: LD_INT 14
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: ST_TO_ADDR
8328: GO 8803
8330: LD_INT 25
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8356
8338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8339: LD_ADDR_VAR 0 3
8343: PUSH
8344: LD_INT 13
8346: PUSH
8347: LD_INT 14
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: ST_TO_ADDR
8354: GO 8803
8356: LD_INT 27
8358: DOUBLE
8359: EQUAL
8360: IFTRUE 8364
8362: GO 8382
8364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8365: LD_ADDR_VAR 0 3
8369: PUSH
8370: LD_INT 13
8372: PUSH
8373: LD_INT 14
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: ST_TO_ADDR
8380: GO 8803
8382: LD_INT 28
8384: DOUBLE
8385: EQUAL
8386: IFTRUE 8390
8388: GO 8408
8390: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8391: LD_ADDR_VAR 0 3
8395: PUSH
8396: LD_INT 13
8398: PUSH
8399: LD_INT 14
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: ST_TO_ADDR
8406: GO 8803
8408: LD_INT 29
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8416
8414: GO 8434
8416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8417: LD_ADDR_VAR 0 3
8421: PUSH
8422: LD_INT 13
8424: PUSH
8425: LD_INT 14
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: ST_TO_ADDR
8432: GO 8803
8434: LD_INT 31
8436: DOUBLE
8437: EQUAL
8438: IFTRUE 8442
8440: GO 8460
8442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8443: LD_ADDR_VAR 0 3
8447: PUSH
8448: LD_INT 13
8450: PUSH
8451: LD_INT 14
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: ST_TO_ADDR
8458: GO 8803
8460: LD_INT 26
8462: DOUBLE
8463: EQUAL
8464: IFTRUE 8468
8466: GO 8486
8468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8469: LD_ADDR_VAR 0 3
8473: PUSH
8474: LD_INT 13
8476: PUSH
8477: LD_INT 14
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: ST_TO_ADDR
8484: GO 8803
8486: LD_INT 42
8488: DOUBLE
8489: EQUAL
8490: IFTRUE 8494
8492: GO 8520
8494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_INT 21
8502: PUSH
8503: LD_INT 22
8505: PUSH
8506: LD_INT 23
8508: PUSH
8509: LD_INT 24
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: ST_TO_ADDR
8518: GO 8803
8520: LD_INT 43
8522: DOUBLE
8523: EQUAL
8524: IFTRUE 8528
8526: GO 8554
8528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8529: LD_ADDR_VAR 0 3
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 22
8539: PUSH
8540: LD_INT 23
8542: PUSH
8543: LD_INT 24
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: ST_TO_ADDR
8552: GO 8803
8554: LD_INT 44
8556: DOUBLE
8557: EQUAL
8558: IFTRUE 8562
8560: GO 8588
8562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8563: LD_ADDR_VAR 0 3
8567: PUSH
8568: LD_INT 21
8570: PUSH
8571: LD_INT 22
8573: PUSH
8574: LD_INT 23
8576: PUSH
8577: LD_INT 24
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: ST_TO_ADDR
8586: GO 8803
8588: LD_INT 45
8590: DOUBLE
8591: EQUAL
8592: IFTRUE 8596
8594: GO 8622
8596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8597: LD_ADDR_VAR 0 3
8601: PUSH
8602: LD_INT 21
8604: PUSH
8605: LD_INT 22
8607: PUSH
8608: LD_INT 23
8610: PUSH
8611: LD_INT 24
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: ST_TO_ADDR
8620: GO 8803
8622: LD_INT 49
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8656
8630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_INT 21
8638: PUSH
8639: LD_INT 22
8641: PUSH
8642: LD_INT 23
8644: PUSH
8645: LD_INT 24
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: ST_TO_ADDR
8654: GO 8803
8656: LD_INT 51
8658: DOUBLE
8659: EQUAL
8660: IFTRUE 8664
8662: GO 8690
8664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8665: LD_ADDR_VAR 0 3
8669: PUSH
8670: LD_INT 21
8672: PUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 23
8678: PUSH
8679: LD_INT 24
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: ST_TO_ADDR
8688: GO 8803
8690: LD_INT 52
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8724
8698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8699: LD_ADDR_VAR 0 3
8703: PUSH
8704: LD_INT 21
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_INT 23
8712: PUSH
8713: LD_INT 24
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: ST_TO_ADDR
8722: GO 8803
8724: LD_INT 53
8726: DOUBLE
8727: EQUAL
8728: IFTRUE 8732
8730: GO 8750
8732: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8733: LD_ADDR_VAR 0 3
8737: PUSH
8738: LD_INT 23
8740: PUSH
8741: LD_INT 24
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: ST_TO_ADDR
8748: GO 8803
8750: LD_INT 46
8752: DOUBLE
8753: EQUAL
8754: IFTRUE 8758
8756: GO 8776
8758: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8759: LD_ADDR_VAR 0 3
8763: PUSH
8764: LD_INT 23
8766: PUSH
8767: LD_INT 24
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: ST_TO_ADDR
8774: GO 8803
8776: LD_INT 47
8778: DOUBLE
8779: EQUAL
8780: IFTRUE 8784
8782: GO 8802
8784: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8785: LD_ADDR_VAR 0 3
8789: PUSH
8790: LD_INT 23
8792: PUSH
8793: LD_INT 24
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: ST_TO_ADDR
8800: GO 8803
8802: POP
// result := ( chassis in result ) ;
8803: LD_ADDR_VAR 0 3
8807: PUSH
8808: LD_VAR 0 1
8812: PUSH
8813: LD_VAR 0 3
8817: IN
8818: ST_TO_ADDR
// end ;
8819: LD_VAR 0 3
8823: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8824: LD_INT 0
8826: PPUSH
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
8832: PPUSH
// result := array ;
8833: LD_ADDR_VAR 0 5
8837: PUSH
8838: LD_VAR 0 1
8842: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8843: LD_VAR 0 1
8847: NOT
8848: PUSH
8849: LD_VAR 0 2
8853: NOT
8854: OR
8855: PUSH
8856: LD_VAR 0 3
8860: NOT
8861: OR
8862: PUSH
8863: LD_VAR 0 2
8867: PUSH
8868: LD_VAR 0 1
8872: GREATER
8873: OR
8874: PUSH
8875: LD_VAR 0 3
8879: PUSH
8880: LD_VAR 0 1
8884: GREATER
8885: OR
8886: IFFALSE 8890
// exit ;
8888: GO 9186
// if direction then
8890: LD_VAR 0 4
8894: IFFALSE 8958
// begin d := 1 ;
8896: LD_ADDR_VAR 0 9
8900: PUSH
8901: LD_INT 1
8903: ST_TO_ADDR
// if i_from > i_to then
8904: LD_VAR 0 2
8908: PUSH
8909: LD_VAR 0 3
8913: GREATER
8914: IFFALSE 8940
// length := ( array - i_from ) + i_to else
8916: LD_ADDR_VAR 0 11
8920: PUSH
8921: LD_VAR 0 1
8925: PUSH
8926: LD_VAR 0 2
8930: MINUS
8931: PUSH
8932: LD_VAR 0 3
8936: PLUS
8937: ST_TO_ADDR
8938: GO 8956
// length := i_to - i_from ;
8940: LD_ADDR_VAR 0 11
8944: PUSH
8945: LD_VAR 0 3
8949: PUSH
8950: LD_VAR 0 2
8954: MINUS
8955: ST_TO_ADDR
// end else
8956: GO 9019
// begin d := - 1 ;
8958: LD_ADDR_VAR 0 9
8962: PUSH
8963: LD_INT 1
8965: NEG
8966: ST_TO_ADDR
// if i_from > i_to then
8967: LD_VAR 0 2
8971: PUSH
8972: LD_VAR 0 3
8976: GREATER
8977: IFFALSE 8997
// length := i_from - i_to else
8979: LD_ADDR_VAR 0 11
8983: PUSH
8984: LD_VAR 0 2
8988: PUSH
8989: LD_VAR 0 3
8993: MINUS
8994: ST_TO_ADDR
8995: GO 9019
// length := ( array - i_to ) + i_from ;
8997: LD_ADDR_VAR 0 11
9001: PUSH
9002: LD_VAR 0 1
9006: PUSH
9007: LD_VAR 0 3
9011: MINUS
9012: PUSH
9013: LD_VAR 0 2
9017: PLUS
9018: ST_TO_ADDR
// end ; if not length then
9019: LD_VAR 0 11
9023: NOT
9024: IFFALSE 9028
// exit ;
9026: GO 9186
// tmp := array ;
9028: LD_ADDR_VAR 0 10
9032: PUSH
9033: LD_VAR 0 1
9037: ST_TO_ADDR
// for i = 1 to length do
9038: LD_ADDR_VAR 0 6
9042: PUSH
9043: DOUBLE
9044: LD_INT 1
9046: DEC
9047: ST_TO_ADDR
9048: LD_VAR 0 11
9052: PUSH
9053: FOR_TO
9054: IFFALSE 9174
// begin for j = 1 to array do
9056: LD_ADDR_VAR 0 7
9060: PUSH
9061: DOUBLE
9062: LD_INT 1
9064: DEC
9065: ST_TO_ADDR
9066: LD_VAR 0 1
9070: PUSH
9071: FOR_TO
9072: IFFALSE 9160
// begin k := j + d ;
9074: LD_ADDR_VAR 0 8
9078: PUSH
9079: LD_VAR 0 7
9083: PUSH
9084: LD_VAR 0 9
9088: PLUS
9089: ST_TO_ADDR
// if k > array then
9090: LD_VAR 0 8
9094: PUSH
9095: LD_VAR 0 1
9099: GREATER
9100: IFFALSE 9110
// k := 1 ;
9102: LD_ADDR_VAR 0 8
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// if not k then
9110: LD_VAR 0 8
9114: NOT
9115: IFFALSE 9127
// k := array ;
9117: LD_ADDR_VAR 0 8
9121: PUSH
9122: LD_VAR 0 1
9126: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9127: LD_ADDR_VAR 0 10
9131: PUSH
9132: LD_VAR 0 10
9136: PPUSH
9137: LD_VAR 0 8
9141: PPUSH
9142: LD_VAR 0 1
9146: PUSH
9147: LD_VAR 0 7
9151: ARRAY
9152: PPUSH
9153: CALL_OW 1
9157: ST_TO_ADDR
// end ;
9158: GO 9071
9160: POP
9161: POP
// array := tmp ;
9162: LD_ADDR_VAR 0 1
9166: PUSH
9167: LD_VAR 0 10
9171: ST_TO_ADDR
// end ;
9172: GO 9053
9174: POP
9175: POP
// result := array ;
9176: LD_ADDR_VAR 0 5
9180: PUSH
9181: LD_VAR 0 1
9185: ST_TO_ADDR
// end ;
9186: LD_VAR 0 5
9190: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9191: LD_INT 0
9193: PPUSH
9194: PPUSH
// result := 0 ;
9195: LD_ADDR_VAR 0 3
9199: PUSH
9200: LD_INT 0
9202: ST_TO_ADDR
// if not array or not value in array then
9203: LD_VAR 0 1
9207: NOT
9208: PUSH
9209: LD_VAR 0 2
9213: PUSH
9214: LD_VAR 0 1
9218: IN
9219: NOT
9220: OR
9221: IFFALSE 9225
// exit ;
9223: GO 9279
// for i = 1 to array do
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: DOUBLE
9231: LD_INT 1
9233: DEC
9234: ST_TO_ADDR
9235: LD_VAR 0 1
9239: PUSH
9240: FOR_TO
9241: IFFALSE 9277
// if value = array [ i ] then
9243: LD_VAR 0 2
9247: PUSH
9248: LD_VAR 0 1
9252: PUSH
9253: LD_VAR 0 4
9257: ARRAY
9258: EQUAL
9259: IFFALSE 9275
// begin result := i ;
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: LD_VAR 0 4
9270: ST_TO_ADDR
// exit ;
9271: POP
9272: POP
9273: GO 9279
// end ;
9275: GO 9240
9277: POP
9278: POP
// end ;
9279: LD_VAR 0 3
9283: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9284: LD_INT 0
9286: PPUSH
// vc_chassis := chassis ;
9287: LD_ADDR_OWVAR 37
9291: PUSH
9292: LD_VAR 0 1
9296: ST_TO_ADDR
// vc_engine := engine ;
9297: LD_ADDR_OWVAR 39
9301: PUSH
9302: LD_VAR 0 2
9306: ST_TO_ADDR
// vc_control := control ;
9307: LD_ADDR_OWVAR 38
9311: PUSH
9312: LD_VAR 0 3
9316: ST_TO_ADDR
// vc_weapon := weapon ;
9317: LD_ADDR_OWVAR 40
9321: PUSH
9322: LD_VAR 0 4
9326: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9327: LD_ADDR_OWVAR 41
9331: PUSH
9332: LD_VAR 0 5
9336: ST_TO_ADDR
// end ;
9337: LD_VAR 0 6
9341: RET
// export function WantPlant ( unit ) ; var task ; begin
9342: LD_INT 0
9344: PPUSH
9345: PPUSH
// result := false ;
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: LD_INT 0
9353: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9354: LD_ADDR_VAR 0 3
9358: PUSH
9359: LD_VAR 0 1
9363: PPUSH
9364: CALL_OW 437
9368: ST_TO_ADDR
// if task then
9369: LD_VAR 0 3
9373: IFFALSE 9401
// if task [ 1 ] [ 1 ] = p then
9375: LD_VAR 0 3
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: PUSH
9384: LD_INT 1
9386: ARRAY
9387: PUSH
9388: LD_STRING p
9390: EQUAL
9391: IFFALSE 9401
// result := true ;
9393: LD_ADDR_VAR 0 2
9397: PUSH
9398: LD_INT 1
9400: ST_TO_ADDR
// end ;
9401: LD_VAR 0 2
9405: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9406: LD_INT 0
9408: PPUSH
9409: PPUSH
9410: PPUSH
9411: PPUSH
// if pos < 1 then
9412: LD_VAR 0 2
9416: PUSH
9417: LD_INT 1
9419: LESS
9420: IFFALSE 9424
// exit ;
9422: GO 9727
// if pos = 1 then
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: EQUAL
9432: IFFALSE 9465
// result := Replace ( arr , pos [ 1 ] , value ) else
9434: LD_ADDR_VAR 0 4
9438: PUSH
9439: LD_VAR 0 1
9443: PPUSH
9444: LD_VAR 0 2
9448: PUSH
9449: LD_INT 1
9451: ARRAY
9452: PPUSH
9453: LD_VAR 0 3
9457: PPUSH
9458: CALL_OW 1
9462: ST_TO_ADDR
9463: GO 9727
// begin tmp := arr ;
9465: LD_ADDR_VAR 0 6
9469: PUSH
9470: LD_VAR 0 1
9474: ST_TO_ADDR
// s_arr := [ tmp ] ;
9475: LD_ADDR_VAR 0 7
9479: PUSH
9480: LD_VAR 0 6
9484: PUSH
9485: EMPTY
9486: LIST
9487: ST_TO_ADDR
// for i = 1 to pos - 1 do
9488: LD_ADDR_VAR 0 5
9492: PUSH
9493: DOUBLE
9494: LD_INT 1
9496: DEC
9497: ST_TO_ADDR
9498: LD_VAR 0 2
9502: PUSH
9503: LD_INT 1
9505: MINUS
9506: PUSH
9507: FOR_TO
9508: IFFALSE 9553
// begin tmp := tmp [ pos [ i ] ] ;
9510: LD_ADDR_VAR 0 6
9514: PUSH
9515: LD_VAR 0 6
9519: PUSH
9520: LD_VAR 0 2
9524: PUSH
9525: LD_VAR 0 5
9529: ARRAY
9530: ARRAY
9531: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9532: LD_ADDR_VAR 0 7
9536: PUSH
9537: LD_VAR 0 7
9541: PUSH
9542: LD_VAR 0 6
9546: PUSH
9547: EMPTY
9548: LIST
9549: ADD
9550: ST_TO_ADDR
// end ;
9551: GO 9507
9553: POP
9554: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9555: LD_ADDR_VAR 0 6
9559: PUSH
9560: LD_VAR 0 6
9564: PPUSH
9565: LD_VAR 0 2
9569: PUSH
9570: LD_VAR 0 2
9574: ARRAY
9575: PPUSH
9576: LD_VAR 0 3
9580: PPUSH
9581: CALL_OW 1
9585: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9586: LD_ADDR_VAR 0 7
9590: PUSH
9591: LD_VAR 0 7
9595: PPUSH
9596: LD_VAR 0 7
9600: PPUSH
9601: LD_VAR 0 6
9605: PPUSH
9606: CALL_OW 1
9610: ST_TO_ADDR
// for i = s_arr downto 2 do
9611: LD_ADDR_VAR 0 5
9615: PUSH
9616: DOUBLE
9617: LD_VAR 0 7
9621: INC
9622: ST_TO_ADDR
9623: LD_INT 2
9625: PUSH
9626: FOR_DOWNTO
9627: IFFALSE 9711
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9629: LD_ADDR_VAR 0 6
9633: PUSH
9634: LD_VAR 0 7
9638: PUSH
9639: LD_VAR 0 5
9643: PUSH
9644: LD_INT 1
9646: MINUS
9647: ARRAY
9648: PPUSH
9649: LD_VAR 0 2
9653: PUSH
9654: LD_VAR 0 5
9658: PUSH
9659: LD_INT 1
9661: MINUS
9662: ARRAY
9663: PPUSH
9664: LD_VAR 0 7
9668: PUSH
9669: LD_VAR 0 5
9673: ARRAY
9674: PPUSH
9675: CALL_OW 1
9679: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9680: LD_ADDR_VAR 0 7
9684: PUSH
9685: LD_VAR 0 7
9689: PPUSH
9690: LD_VAR 0 5
9694: PUSH
9695: LD_INT 1
9697: MINUS
9698: PPUSH
9699: LD_VAR 0 6
9703: PPUSH
9704: CALL_OW 1
9708: ST_TO_ADDR
// end ;
9709: GO 9626
9711: POP
9712: POP
// result := s_arr [ 1 ] ;
9713: LD_ADDR_VAR 0 4
9717: PUSH
9718: LD_VAR 0 7
9722: PUSH
9723: LD_INT 1
9725: ARRAY
9726: ST_TO_ADDR
// end ; end ;
9727: LD_VAR 0 4
9731: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9732: LD_INT 0
9734: PPUSH
9735: PPUSH
// if not list then
9736: LD_VAR 0 1
9740: NOT
9741: IFFALSE 9745
// exit ;
9743: GO 9836
// i := list [ pos1 ] ;
9745: LD_ADDR_VAR 0 5
9749: PUSH
9750: LD_VAR 0 1
9754: PUSH
9755: LD_VAR 0 2
9759: ARRAY
9760: ST_TO_ADDR
// if not i then
9761: LD_VAR 0 5
9765: NOT
9766: IFFALSE 9770
// exit ;
9768: GO 9836
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9770: LD_ADDR_VAR 0 1
9774: PUSH
9775: LD_VAR 0 1
9779: PPUSH
9780: LD_VAR 0 2
9784: PPUSH
9785: LD_VAR 0 1
9789: PUSH
9790: LD_VAR 0 3
9794: ARRAY
9795: PPUSH
9796: CALL_OW 1
9800: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9801: LD_ADDR_VAR 0 1
9805: PUSH
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_VAR 0 3
9815: PPUSH
9816: LD_VAR 0 5
9820: PPUSH
9821: CALL_OW 1
9825: ST_TO_ADDR
// result := list ;
9826: LD_ADDR_VAR 0 4
9830: PUSH
9831: LD_VAR 0 1
9835: ST_TO_ADDR
// end ;
9836: LD_VAR 0 4
9840: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9841: LD_INT 0
9843: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9844: LD_ADDR_VAR 0 5
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 250
9858: PPUSH
9859: LD_VAR 0 1
9863: PPUSH
9864: CALL_OW 251
9868: PPUSH
9869: LD_VAR 0 2
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_VAR 0 4
9883: PPUSH
9884: CALL 9894 0 5
9888: ST_TO_ADDR
// end ;
9889: LD_VAR 0 5
9893: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
// if not list then
9900: LD_VAR 0 3
9904: NOT
9905: IFFALSE 9909
// exit ;
9907: GO 10297
// result := [ ] ;
9909: LD_ADDR_VAR 0 6
9913: PUSH
9914: EMPTY
9915: ST_TO_ADDR
// for i in list do
9916: LD_ADDR_VAR 0 7
9920: PUSH
9921: LD_VAR 0 3
9925: PUSH
9926: FOR_IN
9927: IFFALSE 10129
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9929: LD_ADDR_VAR 0 9
9933: PUSH
9934: LD_VAR 0 7
9938: PPUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: LD_VAR 0 2
9948: PPUSH
9949: CALL_OW 297
9953: ST_TO_ADDR
// if not result then
9954: LD_VAR 0 6
9958: NOT
9959: IFFALSE 9985
// result := [ [ i , tmp ] ] else
9961: LD_ADDR_VAR 0 6
9965: PUSH
9966: LD_VAR 0 7
9970: PUSH
9971: LD_VAR 0 9
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: EMPTY
9981: LIST
9982: ST_TO_ADDR
9983: GO 10127
// begin if result [ result ] [ 2 ] < tmp then
9985: LD_VAR 0 6
9989: PUSH
9990: LD_VAR 0 6
9994: ARRAY
9995: PUSH
9996: LD_INT 2
9998: ARRAY
9999: PUSH
10000: LD_VAR 0 9
10004: LESS
10005: IFFALSE 10047
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10007: LD_ADDR_VAR 0 6
10011: PUSH
10012: LD_VAR 0 6
10016: PPUSH
10017: LD_VAR 0 6
10021: PUSH
10022: LD_INT 1
10024: PLUS
10025: PPUSH
10026: LD_VAR 0 7
10030: PUSH
10031: LD_VAR 0 9
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 2
10044: ST_TO_ADDR
10045: GO 10127
// for j = 1 to result do
10047: LD_ADDR_VAR 0 8
10051: PUSH
10052: DOUBLE
10053: LD_INT 1
10055: DEC
10056: ST_TO_ADDR
10057: LD_VAR 0 6
10061: PUSH
10062: FOR_TO
10063: IFFALSE 10125
// begin if tmp < result [ j ] [ 2 ] then
10065: LD_VAR 0 9
10069: PUSH
10070: LD_VAR 0 6
10074: PUSH
10075: LD_VAR 0 8
10079: ARRAY
10080: PUSH
10081: LD_INT 2
10083: ARRAY
10084: LESS
10085: IFFALSE 10123
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10087: LD_ADDR_VAR 0 6
10091: PUSH
10092: LD_VAR 0 6
10096: PPUSH
10097: LD_VAR 0 8
10101: PPUSH
10102: LD_VAR 0 7
10106: PUSH
10107: LD_VAR 0 9
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 2
10120: ST_TO_ADDR
// break ;
10121: GO 10125
// end ; end ;
10123: GO 10062
10125: POP
10126: POP
// end ; end ;
10127: GO 9926
10129: POP
10130: POP
// if result and not asc then
10131: LD_VAR 0 6
10135: PUSH
10136: LD_VAR 0 4
10140: NOT
10141: AND
10142: IFFALSE 10217
// begin tmp := result ;
10144: LD_ADDR_VAR 0 9
10148: PUSH
10149: LD_VAR 0 6
10153: ST_TO_ADDR
// for i = tmp downto 1 do
10154: LD_ADDR_VAR 0 7
10158: PUSH
10159: DOUBLE
10160: LD_VAR 0 9
10164: INC
10165: ST_TO_ADDR
10166: LD_INT 1
10168: PUSH
10169: FOR_DOWNTO
10170: IFFALSE 10215
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10172: LD_ADDR_VAR 0 6
10176: PUSH
10177: LD_VAR 0 6
10181: PPUSH
10182: LD_VAR 0 9
10186: PUSH
10187: LD_VAR 0 7
10191: MINUS
10192: PUSH
10193: LD_INT 1
10195: PLUS
10196: PPUSH
10197: LD_VAR 0 9
10201: PUSH
10202: LD_VAR 0 7
10206: ARRAY
10207: PPUSH
10208: CALL_OW 1
10212: ST_TO_ADDR
10213: GO 10169
10215: POP
10216: POP
// end ; tmp := [ ] ;
10217: LD_ADDR_VAR 0 9
10221: PUSH
10222: EMPTY
10223: ST_TO_ADDR
// if mode then
10224: LD_VAR 0 5
10228: IFFALSE 10297
// begin for i = 1 to result do
10230: LD_ADDR_VAR 0 7
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_VAR 0 6
10244: PUSH
10245: FOR_TO
10246: IFFALSE 10285
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10248: LD_ADDR_VAR 0 9
10252: PUSH
10253: LD_VAR 0 9
10257: PPUSH
10258: LD_VAR 0 7
10262: PPUSH
10263: LD_VAR 0 6
10267: PUSH
10268: LD_VAR 0 7
10272: ARRAY
10273: PUSH
10274: LD_INT 1
10276: ARRAY
10277: PPUSH
10278: CALL_OW 1
10282: ST_TO_ADDR
10283: GO 10245
10285: POP
10286: POP
// result := tmp ;
10287: LD_ADDR_VAR 0 6
10291: PUSH
10292: LD_VAR 0 9
10296: ST_TO_ADDR
// end ; end ;
10297: LD_VAR 0 6
10301: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10302: LD_INT 0
10304: PPUSH
10305: PPUSH
10306: PPUSH
10307: PPUSH
10308: PPUSH
10309: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10310: LD_ADDR_VAR 0 5
10314: PUSH
10315: LD_INT 0
10317: PUSH
10318: LD_INT 0
10320: PUSH
10321: LD_INT 0
10323: PUSH
10324: EMPTY
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: ST_TO_ADDR
// if not x or not y then
10332: LD_VAR 0 2
10336: NOT
10337: PUSH
10338: LD_VAR 0 3
10342: NOT
10343: OR
10344: IFFALSE 10348
// exit ;
10346: GO 11994
// if not range then
10348: LD_VAR 0 4
10352: NOT
10353: IFFALSE 10363
// range := 10 ;
10355: LD_ADDR_VAR 0 4
10359: PUSH
10360: LD_INT 10
10362: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10363: LD_ADDR_VAR 0 8
10367: PUSH
10368: LD_INT 81
10370: PUSH
10371: LD_VAR 0 1
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 92
10382: PUSH
10383: LD_VAR 0 2
10387: PUSH
10388: LD_VAR 0 3
10392: PUSH
10393: LD_VAR 0 4
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 3
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 3
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 8
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 11994
// for i in tmp do
10440: LD_ADDR_VAR 0 6
10444: PUSH
10445: LD_VAR 0 8
10449: PUSH
10450: FOR_IN
10451: IFFALSE 11969
// begin points := [ 0 , 0 , 0 ] ;
10453: LD_ADDR_VAR 0 9
10457: PUSH
10458: LD_INT 0
10460: PUSH
10461: LD_INT 0
10463: PUSH
10464: LD_INT 0
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: ST_TO_ADDR
// bpoints := 1 ;
10472: LD_ADDR_VAR 0 10
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10480: LD_VAR 0 6
10484: PPUSH
10485: CALL_OW 247
10489: PUSH
10490: LD_INT 1
10492: DOUBLE
10493: EQUAL
10494: IFTRUE 10498
10496: GO 11076
10498: POP
// begin if GetClass ( i ) = 1 then
10499: LD_VAR 0 6
10503: PPUSH
10504: CALL_OW 257
10508: PUSH
10509: LD_INT 1
10511: EQUAL
10512: IFFALSE 10533
// points := [ 10 , 5 , 3 ] ;
10514: LD_ADDR_VAR 0 9
10518: PUSH
10519: LD_INT 10
10521: PUSH
10522: LD_INT 5
10524: PUSH
10525: LD_INT 3
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: LIST
10532: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10533: LD_VAR 0 6
10537: PPUSH
10538: CALL_OW 257
10542: PUSH
10543: LD_INT 2
10545: PUSH
10546: LD_INT 3
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: IN
10557: IFFALSE 10578
// points := [ 3 , 2 , 1 ] ;
10559: LD_ADDR_VAR 0 9
10563: PUSH
10564: LD_INT 3
10566: PUSH
10567: LD_INT 2
10569: PUSH
10570: LD_INT 1
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10578: LD_VAR 0 6
10582: PPUSH
10583: CALL_OW 257
10587: PUSH
10588: LD_INT 5
10590: EQUAL
10591: IFFALSE 10612
// points := [ 130 , 5 , 2 ] ;
10593: LD_ADDR_VAR 0 9
10597: PUSH
10598: LD_INT 130
10600: PUSH
10601: LD_INT 5
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10612: LD_VAR 0 6
10616: PPUSH
10617: CALL_OW 257
10621: PUSH
10622: LD_INT 8
10624: EQUAL
10625: IFFALSE 10646
// points := [ 35 , 35 , 30 ] ;
10627: LD_ADDR_VAR 0 9
10631: PUSH
10632: LD_INT 35
10634: PUSH
10635: LD_INT 35
10637: PUSH
10638: LD_INT 30
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: LIST
10645: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10646: LD_VAR 0 6
10650: PPUSH
10651: CALL_OW 257
10655: PUSH
10656: LD_INT 9
10658: EQUAL
10659: IFFALSE 10680
// points := [ 20 , 55 , 40 ] ;
10661: LD_ADDR_VAR 0 9
10665: PUSH
10666: LD_INT 20
10668: PUSH
10669: LD_INT 55
10671: PUSH
10672: LD_INT 40
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10680: LD_VAR 0 6
10684: PPUSH
10685: CALL_OW 257
10689: PUSH
10690: LD_INT 12
10692: PUSH
10693: LD_INT 16
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: IN
10700: IFFALSE 10721
// points := [ 5 , 3 , 2 ] ;
10702: LD_ADDR_VAR 0 9
10706: PUSH
10707: LD_INT 5
10709: PUSH
10710: LD_INT 3
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10721: LD_VAR 0 6
10725: PPUSH
10726: CALL_OW 257
10730: PUSH
10731: LD_INT 17
10733: EQUAL
10734: IFFALSE 10755
// points := [ 100 , 50 , 75 ] ;
10736: LD_ADDR_VAR 0 9
10740: PUSH
10741: LD_INT 100
10743: PUSH
10744: LD_INT 50
10746: PUSH
10747: LD_INT 75
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10755: LD_VAR 0 6
10759: PPUSH
10760: CALL_OW 257
10764: PUSH
10765: LD_INT 15
10767: EQUAL
10768: IFFALSE 10789
// points := [ 10 , 5 , 3 ] ;
10770: LD_ADDR_VAR 0 9
10774: PUSH
10775: LD_INT 10
10777: PUSH
10778: LD_INT 5
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10789: LD_VAR 0 6
10793: PPUSH
10794: CALL_OW 257
10798: PUSH
10799: LD_INT 14
10801: EQUAL
10802: IFFALSE 10823
// points := [ 10 , 0 , 0 ] ;
10804: LD_ADDR_VAR 0 9
10808: PUSH
10809: LD_INT 10
10811: PUSH
10812: LD_INT 0
10814: PUSH
10815: LD_INT 0
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10823: LD_VAR 0 6
10827: PPUSH
10828: CALL_OW 257
10832: PUSH
10833: LD_INT 11
10835: EQUAL
10836: IFFALSE 10857
// points := [ 30 , 10 , 5 ] ;
10838: LD_ADDR_VAR 0 9
10842: PUSH
10843: LD_INT 30
10845: PUSH
10846: LD_INT 10
10848: PUSH
10849: LD_INT 5
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10857: LD_VAR 0 1
10861: PPUSH
10862: LD_INT 5
10864: PPUSH
10865: CALL_OW 321
10869: PUSH
10870: LD_INT 2
10872: EQUAL
10873: IFFALSE 10890
// bpoints := bpoints * 1.8 ;
10875: LD_ADDR_VAR 0 10
10879: PUSH
10880: LD_VAR 0 10
10884: PUSH
10885: LD_REAL  1.80000000000000E+0000
10888: MUL
10889: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10890: LD_VAR 0 6
10894: PPUSH
10895: CALL_OW 257
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: LD_INT 2
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: LD_INT 4
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: IN
10918: PUSH
10919: LD_VAR 0 1
10923: PPUSH
10924: LD_INT 51
10926: PPUSH
10927: CALL_OW 321
10931: PUSH
10932: LD_INT 2
10934: EQUAL
10935: AND
10936: IFFALSE 10953
// bpoints := bpoints * 1.2 ;
10938: LD_ADDR_VAR 0 10
10942: PUSH
10943: LD_VAR 0 10
10947: PUSH
10948: LD_REAL  1.20000000000000E+0000
10951: MUL
10952: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10953: LD_VAR 0 6
10957: PPUSH
10958: CALL_OW 257
10962: PUSH
10963: LD_INT 5
10965: PUSH
10966: LD_INT 7
10968: PUSH
10969: LD_INT 9
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: IN
10977: PUSH
10978: LD_VAR 0 1
10982: PPUSH
10983: LD_INT 52
10985: PPUSH
10986: CALL_OW 321
10990: PUSH
10991: LD_INT 2
10993: EQUAL
10994: AND
10995: IFFALSE 11012
// bpoints := bpoints * 1.5 ;
10997: LD_ADDR_VAR 0 10
11001: PUSH
11002: LD_VAR 0 10
11006: PUSH
11007: LD_REAL  1.50000000000000E+0000
11010: MUL
11011: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11012: LD_VAR 0 1
11016: PPUSH
11017: LD_INT 66
11019: PPUSH
11020: CALL_OW 321
11024: PUSH
11025: LD_INT 2
11027: EQUAL
11028: IFFALSE 11045
// bpoints := bpoints * 1.1 ;
11030: LD_ADDR_VAR 0 10
11034: PUSH
11035: LD_VAR 0 10
11039: PUSH
11040: LD_REAL  1.10000000000000E+0000
11043: MUL
11044: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11045: LD_ADDR_VAR 0 10
11049: PUSH
11050: LD_VAR 0 10
11054: PUSH
11055: LD_VAR 0 6
11059: PPUSH
11060: LD_INT 1
11062: PPUSH
11063: CALL_OW 259
11067: PUSH
11068: LD_REAL  1.15000000000000E+0000
11071: MUL
11072: MUL
11073: ST_TO_ADDR
// end ; unit_vehicle :
11074: GO 11898
11076: LD_INT 2
11078: DOUBLE
11079: EQUAL
11080: IFTRUE 11084
11082: GO 11886
11084: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11085: LD_VAR 0 6
11089: PPUSH
11090: CALL_OW 264
11094: PUSH
11095: LD_INT 2
11097: PUSH
11098: LD_INT 42
11100: PUSH
11101: LD_INT 24
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: IN
11109: IFFALSE 11130
// points := [ 25 , 5 , 3 ] ;
11111: LD_ADDR_VAR 0 9
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 5
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11130: LD_VAR 0 6
11134: PPUSH
11135: CALL_OW 264
11139: PUSH
11140: LD_INT 4
11142: PUSH
11143: LD_INT 43
11145: PUSH
11146: LD_INT 25
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: IN
11154: IFFALSE 11175
// points := [ 40 , 15 , 5 ] ;
11156: LD_ADDR_VAR 0 9
11160: PUSH
11161: LD_INT 40
11163: PUSH
11164: LD_INT 15
11166: PUSH
11167: LD_INT 5
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11175: LD_VAR 0 6
11179: PPUSH
11180: CALL_OW 264
11184: PUSH
11185: LD_INT 3
11187: PUSH
11188: LD_INT 23
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: IN
11195: IFFALSE 11216
// points := [ 7 , 25 , 8 ] ;
11197: LD_ADDR_VAR 0 9
11201: PUSH
11202: LD_INT 7
11204: PUSH
11205: LD_INT 25
11207: PUSH
11208: LD_INT 8
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11216: LD_VAR 0 6
11220: PPUSH
11221: CALL_OW 264
11225: PUSH
11226: LD_INT 5
11228: PUSH
11229: LD_INT 27
11231: PUSH
11232: LD_INT 44
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: IN
11240: IFFALSE 11261
// points := [ 14 , 50 , 16 ] ;
11242: LD_ADDR_VAR 0 9
11246: PUSH
11247: LD_INT 14
11249: PUSH
11250: LD_INT 50
11252: PUSH
11253: LD_INT 16
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11261: LD_VAR 0 6
11265: PPUSH
11266: CALL_OW 264
11270: PUSH
11271: LD_INT 6
11273: PUSH
11274: LD_INT 46
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: IN
11281: IFFALSE 11302
// points := [ 32 , 120 , 70 ] ;
11283: LD_ADDR_VAR 0 9
11287: PUSH
11288: LD_INT 32
11290: PUSH
11291: LD_INT 120
11293: PUSH
11294: LD_INT 70
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
11302: LD_VAR 0 6
11306: PPUSH
11307: CALL_OW 264
11311: PUSH
11312: LD_INT 7
11314: PUSH
11315: LD_INT 28
11317: PUSH
11318: LD_INT 45
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: IN
11326: IFFALSE 11347
// points := [ 35 , 20 , 45 ] ;
11328: LD_ADDR_VAR 0 9
11332: PUSH
11333: LD_INT 35
11335: PUSH
11336: LD_INT 20
11338: PUSH
11339: LD_INT 45
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11347: LD_VAR 0 6
11351: PPUSH
11352: CALL_OW 264
11356: PUSH
11357: LD_INT 47
11359: PUSH
11360: EMPTY
11361: LIST
11362: IN
11363: IFFALSE 11384
// points := [ 67 , 45 , 75 ] ;
11365: LD_ADDR_VAR 0 9
11369: PUSH
11370: LD_INT 67
11372: PUSH
11373: LD_INT 45
11375: PUSH
11376: LD_INT 75
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11384: LD_VAR 0 6
11388: PPUSH
11389: CALL_OW 264
11393: PUSH
11394: LD_INT 26
11396: PUSH
11397: EMPTY
11398: LIST
11399: IN
11400: IFFALSE 11421
// points := [ 120 , 30 , 80 ] ;
11402: LD_ADDR_VAR 0 9
11406: PUSH
11407: LD_INT 120
11409: PUSH
11410: LD_INT 30
11412: PUSH
11413: LD_INT 80
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11421: LD_VAR 0 6
11425: PPUSH
11426: CALL_OW 264
11430: PUSH
11431: LD_INT 22
11433: PUSH
11434: EMPTY
11435: LIST
11436: IN
11437: IFFALSE 11458
// points := [ 40 , 1 , 1 ] ;
11439: LD_ADDR_VAR 0 9
11443: PUSH
11444: LD_INT 40
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: LD_INT 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11458: LD_VAR 0 6
11462: PPUSH
11463: CALL_OW 264
11467: PUSH
11468: LD_INT 29
11470: PUSH
11471: EMPTY
11472: LIST
11473: IN
11474: IFFALSE 11495
// points := [ 70 , 200 , 400 ] ;
11476: LD_ADDR_VAR 0 9
11480: PUSH
11481: LD_INT 70
11483: PUSH
11484: LD_INT 200
11486: PUSH
11487: LD_INT 400
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11495: LD_VAR 0 6
11499: PPUSH
11500: CALL_OW 264
11504: PUSH
11505: LD_INT 14
11507: PUSH
11508: LD_INT 53
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: IN
11515: IFFALSE 11536
// points := [ 40 , 10 , 20 ] ;
11517: LD_ADDR_VAR 0 9
11521: PUSH
11522: LD_INT 40
11524: PUSH
11525: LD_INT 10
11527: PUSH
11528: LD_INT 20
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11536: LD_VAR 0 6
11540: PPUSH
11541: CALL_OW 264
11545: PUSH
11546: LD_INT 9
11548: PUSH
11549: EMPTY
11550: LIST
11551: IN
11552: IFFALSE 11573
// points := [ 5 , 70 , 20 ] ;
11554: LD_ADDR_VAR 0 9
11558: PUSH
11559: LD_INT 5
11561: PUSH
11562: LD_INT 70
11564: PUSH
11565: LD_INT 20
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11573: LD_VAR 0 6
11577: PPUSH
11578: CALL_OW 264
11582: PUSH
11583: LD_INT 10
11585: PUSH
11586: EMPTY
11587: LIST
11588: IN
11589: IFFALSE 11610
// points := [ 35 , 110 , 70 ] ;
11591: LD_ADDR_VAR 0 9
11595: PUSH
11596: LD_INT 35
11598: PUSH
11599: LD_INT 110
11601: PUSH
11602: LD_INT 70
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11610: LD_VAR 0 6
11614: PPUSH
11615: CALL_OW 265
11619: PUSH
11620: LD_INT 25
11622: EQUAL
11623: IFFALSE 11644
// points := [ 80 , 65 , 100 ] ;
11625: LD_ADDR_VAR 0 9
11629: PUSH
11630: LD_INT 80
11632: PUSH
11633: LD_INT 65
11635: PUSH
11636: LD_INT 100
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11644: LD_VAR 0 6
11648: PPUSH
11649: CALL_OW 263
11653: PUSH
11654: LD_INT 1
11656: EQUAL
11657: IFFALSE 11692
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11659: LD_ADDR_VAR 0 10
11663: PUSH
11664: LD_VAR 0 10
11668: PUSH
11669: LD_VAR 0 6
11673: PPUSH
11674: CALL_OW 311
11678: PPUSH
11679: LD_INT 3
11681: PPUSH
11682: CALL_OW 259
11686: PUSH
11687: LD_INT 4
11689: MUL
11690: MUL
11691: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11692: LD_VAR 0 6
11696: PPUSH
11697: CALL_OW 263
11701: PUSH
11702: LD_INT 2
11704: EQUAL
11705: IFFALSE 11756
// begin j := IsControledBy ( i ) ;
11707: LD_ADDR_VAR 0 7
11711: PUSH
11712: LD_VAR 0 6
11716: PPUSH
11717: CALL_OW 312
11721: ST_TO_ADDR
// if j then
11722: LD_VAR 0 7
11726: IFFALSE 11756
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11728: LD_ADDR_VAR 0 10
11732: PUSH
11733: LD_VAR 0 10
11737: PUSH
11738: LD_VAR 0 7
11742: PPUSH
11743: LD_INT 3
11745: PPUSH
11746: CALL_OW 259
11750: PUSH
11751: LD_INT 3
11753: MUL
11754: MUL
11755: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11756: LD_VAR 0 6
11760: PPUSH
11761: CALL_OW 264
11765: PUSH
11766: LD_INT 5
11768: PUSH
11769: LD_INT 6
11771: PUSH
11772: LD_INT 46
11774: PUSH
11775: LD_INT 44
11777: PUSH
11778: LD_INT 47
11780: PUSH
11781: LD_INT 45
11783: PUSH
11784: LD_INT 28
11786: PUSH
11787: LD_INT 7
11789: PUSH
11790: LD_INT 27
11792: PUSH
11793: LD_INT 29
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: IN
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: LD_INT 52
11816: PPUSH
11817: CALL_OW 321
11821: PUSH
11822: LD_INT 2
11824: EQUAL
11825: AND
11826: IFFALSE 11843
// bpoints := bpoints * 1.2 ;
11828: LD_ADDR_VAR 0 10
11832: PUSH
11833: LD_VAR 0 10
11837: PUSH
11838: LD_REAL  1.20000000000000E+0000
11841: MUL
11842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11843: LD_VAR 0 6
11847: PPUSH
11848: CALL_OW 264
11852: PUSH
11853: LD_INT 6
11855: PUSH
11856: LD_INT 46
11858: PUSH
11859: LD_INT 47
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: IN
11867: IFFALSE 11884
// bpoints := bpoints * 1.2 ;
11869: LD_ADDR_VAR 0 10
11873: PUSH
11874: LD_VAR 0 10
11878: PUSH
11879: LD_REAL  1.20000000000000E+0000
11882: MUL
11883: ST_TO_ADDR
// end ; unit_building :
11884: GO 11898
11886: LD_INT 3
11888: DOUBLE
11889: EQUAL
11890: IFTRUE 11894
11892: GO 11897
11894: POP
// ; end ;
11895: GO 11898
11897: POP
// for j = 1 to 3 do
11898: LD_ADDR_VAR 0 7
11902: PUSH
11903: DOUBLE
11904: LD_INT 1
11906: DEC
11907: ST_TO_ADDR
11908: LD_INT 3
11910: PUSH
11911: FOR_TO
11912: IFFALSE 11965
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11914: LD_ADDR_VAR 0 5
11918: PUSH
11919: LD_VAR 0 5
11923: PPUSH
11924: LD_VAR 0 7
11928: PPUSH
11929: LD_VAR 0 5
11933: PUSH
11934: LD_VAR 0 7
11938: ARRAY
11939: PUSH
11940: LD_VAR 0 9
11944: PUSH
11945: LD_VAR 0 7
11949: ARRAY
11950: PUSH
11951: LD_VAR 0 10
11955: MUL
11956: PLUS
11957: PPUSH
11958: CALL_OW 1
11962: ST_TO_ADDR
11963: GO 11911
11965: POP
11966: POP
// end ;
11967: GO 10450
11969: POP
11970: POP
// result := Replace ( result , 4 , tmp ) ;
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_VAR 0 5
11980: PPUSH
11981: LD_INT 4
11983: PPUSH
11984: LD_VAR 0 8
11988: PPUSH
11989: CALL_OW 1
11993: ST_TO_ADDR
// end ;
11994: LD_VAR 0 5
11998: RET
// export function DangerAtRange ( unit , range ) ; begin
11999: LD_INT 0
12001: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12002: LD_ADDR_VAR 0 3
12006: PUSH
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 255
12016: PPUSH
12017: LD_VAR 0 1
12021: PPUSH
12022: CALL_OW 250
12026: PPUSH
12027: LD_VAR 0 1
12031: PPUSH
12032: CALL_OW 251
12036: PPUSH
12037: LD_VAR 0 2
12041: PPUSH
12042: CALL 10302 0 4
12046: ST_TO_ADDR
// end ;
12047: LD_VAR 0 3
12051: RET
// export function DangerInArea ( side , area ) ; begin
12052: LD_INT 0
12054: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12055: LD_ADDR_VAR 0 3
12059: PUSH
12060: LD_VAR 0 2
12064: PPUSH
12065: LD_INT 81
12067: PUSH
12068: LD_VAR 0 1
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 70
12081: ST_TO_ADDR
// end ;
12082: LD_VAR 0 3
12086: RET
// export function IsExtension ( b ) ; begin
12087: LD_INT 0
12089: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12090: LD_ADDR_VAR 0 2
12094: PUSH
12095: LD_VAR 0 1
12099: PUSH
12100: LD_INT 23
12102: PUSH
12103: LD_INT 20
12105: PUSH
12106: LD_INT 22
12108: PUSH
12109: LD_INT 17
12111: PUSH
12112: LD_INT 24
12114: PUSH
12115: LD_INT 21
12117: PUSH
12118: LD_INT 19
12120: PUSH
12121: LD_INT 16
12123: PUSH
12124: LD_INT 25
12126: PUSH
12127: LD_INT 18
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: IN
12142: ST_TO_ADDR
// end ;
12143: LD_VAR 0 2
12147: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
12152: PPUSH
// result := [ ] ;
12153: LD_ADDR_VAR 0 3
12157: PUSH
12158: EMPTY
12159: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12160: LD_ADDR_VAR 0 4
12164: PUSH
12165: LD_VAR 0 2
12169: PPUSH
12170: LD_INT 21
12172: PUSH
12173: LD_INT 3
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 70
12184: ST_TO_ADDR
// if not tmp then
12185: LD_VAR 0 4
12189: NOT
12190: IFFALSE 12194
// exit ;
12192: GO 12252
// for i in tmp do
12194: LD_ADDR_VAR 0 5
12198: PUSH
12199: LD_VAR 0 4
12203: PUSH
12204: FOR_IN
12205: IFFALSE 12240
// if GetBase ( i ) <> base then
12207: LD_VAR 0 5
12211: PPUSH
12212: CALL_OW 274
12216: PUSH
12217: LD_VAR 0 1
12221: NONEQUAL
12222: IFFALSE 12238
// ComLinkToBase ( base , i ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: LD_VAR 0 5
12233: PPUSH
12234: CALL_OW 169
12238: GO 12204
12240: POP
12241: POP
// result := tmp ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_VAR 0 4
12251: ST_TO_ADDR
// end ;
12252: LD_VAR 0 3
12256: RET
// export function ComComplete ( unit , b ) ; var i ; begin
12257: LD_INT 0
12259: PPUSH
12260: PPUSH
// if BuildingStatus ( b ) = bs_build then
12261: LD_VAR 0 2
12265: PPUSH
12266: CALL_OW 461
12270: PUSH
12271: LD_INT 1
12273: EQUAL
12274: IFFALSE 12334
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12276: LD_VAR 0 1
12280: PPUSH
12281: LD_STRING h
12283: PUSH
12284: LD_VAR 0 2
12288: PPUSH
12289: CALL_OW 250
12293: PUSH
12294: LD_VAR 0 2
12298: PPUSH
12299: CALL_OW 251
12303: PUSH
12304: LD_VAR 0 2
12308: PUSH
12309: LD_INT 0
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: LD_INT 0
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: PPUSH
12330: CALL_OW 446
// end ;
12334: LD_VAR 0 3
12338: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12339: LD_INT 0
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
12347: LD_VAR 0 1
12351: NOT
12352: PUSH
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL_OW 263
12362: PUSH
12363: LD_INT 2
12365: EQUAL
12366: NOT
12367: OR
12368: IFFALSE 12372
// exit ;
12370: GO 12688
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12372: LD_ADDR_VAR 0 6
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 255
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 36
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 34
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: ST_TO_ADDR
// if not tmp then
12431: LD_VAR 0 6
12435: NOT
12436: IFFALSE 12440
// exit ;
12438: GO 12688
// result := [ ] ;
12440: LD_ADDR_VAR 0 2
12444: PUSH
12445: EMPTY
12446: ST_TO_ADDR
// for i in tmp do
12447: LD_ADDR_VAR 0 3
12451: PUSH
12452: LD_VAR 0 6
12456: PUSH
12457: FOR_IN
12458: IFFALSE 12529
// begin t := UnitsInside ( i ) ;
12460: LD_ADDR_VAR 0 4
12464: PUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: CALL_OW 313
12474: ST_TO_ADDR
// if t then
12475: LD_VAR 0 4
12479: IFFALSE 12527
// for j in t do
12481: LD_ADDR_VAR 0 7
12485: PUSH
12486: LD_VAR 0 4
12490: PUSH
12491: FOR_IN
12492: IFFALSE 12525
// result := Insert ( result , result + 1 , j ) ;
12494: LD_ADDR_VAR 0 2
12498: PUSH
12499: LD_VAR 0 2
12503: PPUSH
12504: LD_VAR 0 2
12508: PUSH
12509: LD_INT 1
12511: PLUS
12512: PPUSH
12513: LD_VAR 0 7
12517: PPUSH
12518: CALL_OW 2
12522: ST_TO_ADDR
12523: GO 12491
12525: POP
12526: POP
// end ;
12527: GO 12457
12529: POP
12530: POP
// if not result then
12531: LD_VAR 0 2
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12688
// mech := result [ 1 ] ;
12540: LD_ADDR_VAR 0 5
12544: PUSH
12545: LD_VAR 0 2
12549: PUSH
12550: LD_INT 1
12552: ARRAY
12553: ST_TO_ADDR
// if result > 1 then
12554: LD_VAR 0 2
12558: PUSH
12559: LD_INT 1
12561: GREATER
12562: IFFALSE 12674
// for i = 2 to result do
12564: LD_ADDR_VAR 0 3
12568: PUSH
12569: DOUBLE
12570: LD_INT 2
12572: DEC
12573: ST_TO_ADDR
12574: LD_VAR 0 2
12578: PUSH
12579: FOR_TO
12580: IFFALSE 12672
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12582: LD_ADDR_VAR 0 4
12586: PUSH
12587: LD_VAR 0 2
12591: PUSH
12592: LD_VAR 0 3
12596: ARRAY
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: CALL_OW 259
12605: PUSH
12606: LD_VAR 0 2
12610: PUSH
12611: LD_VAR 0 3
12615: ARRAY
12616: PPUSH
12617: CALL_OW 432
12621: MINUS
12622: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12623: LD_VAR 0 4
12627: PUSH
12628: LD_VAR 0 5
12632: PPUSH
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 259
12640: PUSH
12641: LD_VAR 0 5
12645: PPUSH
12646: CALL_OW 432
12650: MINUS
12651: GREATEREQUAL
12652: IFFALSE 12670
// mech := result [ i ] ;
12654: LD_ADDR_VAR 0 5
12658: PUSH
12659: LD_VAR 0 2
12663: PUSH
12664: LD_VAR 0 3
12668: ARRAY
12669: ST_TO_ADDR
// end ;
12670: GO 12579
12672: POP
12673: POP
// ComLinkTo ( vehicle , mech ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_VAR 0 5
12683: PPUSH
12684: CALL_OW 135
// end ;
12688: LD_VAR 0 2
12692: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12693: LD_INT 0
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
12700: PPUSH
12701: PPUSH
12702: PPUSH
12703: PPUSH
12704: PPUSH
12705: PPUSH
12706: PPUSH
12707: PPUSH
// result := [ ] ;
12708: LD_ADDR_VAR 0 7
12712: PUSH
12713: EMPTY
12714: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12715: LD_VAR 0 1
12719: PPUSH
12720: CALL_OW 266
12724: PUSH
12725: LD_INT 0
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: IN
12735: NOT
12736: IFFALSE 12740
// exit ;
12738: GO 14371
// if name then
12740: LD_VAR 0 3
12744: IFFALSE 12760
// SetBName ( base_dep , name ) ;
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: CALL_OW 500
// base := GetBase ( base_dep ) ;
12760: LD_ADDR_VAR 0 15
12764: PUSH
12765: LD_VAR 0 1
12769: PPUSH
12770: CALL_OW 274
12774: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12775: LD_ADDR_VAR 0 16
12779: PUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 255
12789: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12790: LD_ADDR_VAR 0 17
12794: PUSH
12795: LD_VAR 0 1
12799: PPUSH
12800: CALL_OW 248
12804: ST_TO_ADDR
// if sources then
12805: LD_VAR 0 5
12809: IFFALSE 12856
// for i = 1 to 3 do
12811: LD_ADDR_VAR 0 8
12815: PUSH
12816: DOUBLE
12817: LD_INT 1
12819: DEC
12820: ST_TO_ADDR
12821: LD_INT 3
12823: PUSH
12824: FOR_TO
12825: IFFALSE 12854
// AddResourceType ( base , i , sources [ i ] ) ;
12827: LD_VAR 0 15
12831: PPUSH
12832: LD_VAR 0 8
12836: PPUSH
12837: LD_VAR 0 5
12841: PUSH
12842: LD_VAR 0 8
12846: ARRAY
12847: PPUSH
12848: CALL_OW 276
12852: GO 12824
12854: POP
12855: POP
// buildings := GetBaseBuildings ( base , area ) ;
12856: LD_ADDR_VAR 0 18
12860: PUSH
12861: LD_VAR 0 15
12865: PPUSH
12866: LD_VAR 0 2
12870: PPUSH
12871: CALL 12148 0 2
12875: ST_TO_ADDR
// InitHc ;
12876: CALL_OW 19
// InitUc ;
12880: CALL_OW 18
// uc_side := side ;
12884: LD_ADDR_OWVAR 20
12888: PUSH
12889: LD_VAR 0 16
12893: ST_TO_ADDR
// uc_nation := nation ;
12894: LD_ADDR_OWVAR 21
12898: PUSH
12899: LD_VAR 0 17
12903: ST_TO_ADDR
// if buildings then
12904: LD_VAR 0 18
12908: IFFALSE 14230
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12910: LD_ADDR_VAR 0 19
12914: PUSH
12915: LD_VAR 0 18
12919: PPUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 30
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 30
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: PPUSH
12948: CALL_OW 72
12952: ST_TO_ADDR
// if tmp then
12953: LD_VAR 0 19
12957: IFFALSE 13005
// for i in tmp do
12959: LD_ADDR_VAR 0 8
12963: PUSH
12964: LD_VAR 0 19
12968: PUSH
12969: FOR_IN
12970: IFFALSE 13003
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12972: LD_VAR 0 8
12976: PPUSH
12977: CALL_OW 250
12981: PPUSH
12982: LD_VAR 0 8
12986: PPUSH
12987: CALL_OW 251
12991: PPUSH
12992: LD_VAR 0 16
12996: PPUSH
12997: CALL_OW 441
13001: GO 12969
13003: POP
13004: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13005: LD_VAR 0 18
13009: PPUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 32
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 30
13025: PUSH
13026: LD_INT 33
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: PPUSH
13038: CALL_OW 72
13042: IFFALSE 13130
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13044: LD_ADDR_VAR 0 8
13048: PUSH
13049: LD_VAR 0 18
13053: PPUSH
13054: LD_INT 2
13056: PUSH
13057: LD_INT 30
13059: PUSH
13060: LD_INT 32
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 33
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 72
13086: PUSH
13087: FOR_IN
13088: IFFALSE 13128
// begin if not GetBWeapon ( i ) then
13090: LD_VAR 0 8
13094: PPUSH
13095: CALL_OW 269
13099: NOT
13100: IFFALSE 13126
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13102: LD_VAR 0 8
13106: PPUSH
13107: LD_VAR 0 8
13111: PPUSH
13112: LD_VAR 0 2
13116: PPUSH
13117: CALL 14376 0 2
13121: PPUSH
13122: CALL_OW 431
// end ;
13126: GO 13087
13128: POP
13129: POP
// end ; for i = 1 to personel do
13130: LD_ADDR_VAR 0 8
13134: PUSH
13135: DOUBLE
13136: LD_INT 1
13138: DEC
13139: ST_TO_ADDR
13140: LD_VAR 0 6
13144: PUSH
13145: FOR_TO
13146: IFFALSE 14210
// begin if i > 4 then
13148: LD_VAR 0 8
13152: PUSH
13153: LD_INT 4
13155: GREATER
13156: IFFALSE 13160
// break ;
13158: GO 14210
// case i of 1 :
13160: LD_VAR 0 8
13164: PUSH
13165: LD_INT 1
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 13253
13173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13174: LD_ADDR_VAR 0 12
13178: PUSH
13179: LD_VAR 0 18
13183: PPUSH
13184: LD_INT 22
13186: PUSH
13187: LD_VAR 0 16
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 58
13198: PUSH
13199: EMPTY
13200: LIST
13201: PUSH
13202: LD_INT 2
13204: PUSH
13205: LD_INT 30
13207: PUSH
13208: LD_INT 32
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 30
13217: PUSH
13218: LD_INT 4
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 30
13227: PUSH
13228: LD_INT 5
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 72
13250: ST_TO_ADDR
13251: GO 13475
13253: LD_INT 2
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 13323
13261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13262: LD_ADDR_VAR 0 12
13266: PUSH
13267: LD_VAR 0 18
13271: PPUSH
13272: LD_INT 22
13274: PUSH
13275: LD_VAR 0 16
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 2
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 0
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 1
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 72
13320: ST_TO_ADDR
13321: GO 13475
13323: LD_INT 3
13325: DOUBLE
13326: EQUAL
13327: IFTRUE 13331
13329: GO 13393
13331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13332: LD_ADDR_VAR 0 12
13336: PUSH
13337: LD_VAR 0 18
13341: PPUSH
13342: LD_INT 22
13344: PUSH
13345: LD_VAR 0 16
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 30
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 30
13369: PUSH
13370: LD_INT 3
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 72
13390: ST_TO_ADDR
13391: GO 13475
13393: LD_INT 4
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13474
13401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13402: LD_ADDR_VAR 0 12
13406: PUSH
13407: LD_VAR 0 18
13411: PPUSH
13412: LD_INT 22
13414: PUSH
13415: LD_VAR 0 16
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 2
13426: PUSH
13427: LD_INT 30
13429: PUSH
13430: LD_INT 6
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 30
13439: PUSH
13440: LD_INT 7
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: LD_INT 8
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PPUSH
13467: CALL_OW 72
13471: ST_TO_ADDR
13472: GO 13475
13474: POP
// if i = 1 then
13475: LD_VAR 0 8
13479: PUSH
13480: LD_INT 1
13482: EQUAL
13483: IFFALSE 13594
// begin tmp := [ ] ;
13485: LD_ADDR_VAR 0 19
13489: PUSH
13490: EMPTY
13491: ST_TO_ADDR
// for j in f do
13492: LD_ADDR_VAR 0 9
13496: PUSH
13497: LD_VAR 0 12
13501: PUSH
13502: FOR_IN
13503: IFFALSE 13576
// if GetBType ( j ) = b_bunker then
13505: LD_VAR 0 9
13509: PPUSH
13510: CALL_OW 266
13514: PUSH
13515: LD_INT 32
13517: EQUAL
13518: IFFALSE 13545
// tmp := Insert ( tmp , 1 , j ) else
13520: LD_ADDR_VAR 0 19
13524: PUSH
13525: LD_VAR 0 19
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: LD_VAR 0 9
13537: PPUSH
13538: CALL_OW 2
13542: ST_TO_ADDR
13543: GO 13574
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13545: LD_ADDR_VAR 0 19
13549: PUSH
13550: LD_VAR 0 19
13554: PPUSH
13555: LD_VAR 0 19
13559: PUSH
13560: LD_INT 1
13562: PLUS
13563: PPUSH
13564: LD_VAR 0 9
13568: PPUSH
13569: CALL_OW 2
13573: ST_TO_ADDR
13574: GO 13502
13576: POP
13577: POP
// if tmp then
13578: LD_VAR 0 19
13582: IFFALSE 13594
// f := tmp ;
13584: LD_ADDR_VAR 0 12
13588: PUSH
13589: LD_VAR 0 19
13593: ST_TO_ADDR
// end ; x := personel [ i ] ;
13594: LD_ADDR_VAR 0 13
13598: PUSH
13599: LD_VAR 0 6
13603: PUSH
13604: LD_VAR 0 8
13608: ARRAY
13609: ST_TO_ADDR
// if x = - 1 then
13610: LD_VAR 0 13
13614: PUSH
13615: LD_INT 1
13617: NEG
13618: EQUAL
13619: IFFALSE 13828
// begin for j in f do
13621: LD_ADDR_VAR 0 9
13625: PUSH
13626: LD_VAR 0 12
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13824
// repeat InitHc ;
13634: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13638: LD_VAR 0 9
13642: PPUSH
13643: CALL_OW 266
13647: PUSH
13648: LD_INT 5
13650: EQUAL
13651: IFFALSE 13721
// begin if UnitsInside ( j ) < 3 then
13653: LD_VAR 0 9
13657: PPUSH
13658: CALL_OW 313
13662: PUSH
13663: LD_INT 3
13665: LESS
13666: IFFALSE 13702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13668: LD_INT 0
13670: PPUSH
13671: LD_INT 5
13673: PUSH
13674: LD_INT 8
13676: PUSH
13677: LD_INT 9
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: LD_VAR 0 17
13689: ARRAY
13690: PPUSH
13691: LD_VAR 0 4
13695: PPUSH
13696: CALL_OW 380
13700: GO 13719
// PrepareHuman ( false , i , skill ) ;
13702: LD_INT 0
13704: PPUSH
13705: LD_VAR 0 8
13709: PPUSH
13710: LD_VAR 0 4
13714: PPUSH
13715: CALL_OW 380
// end else
13719: GO 13738
// PrepareHuman ( false , i , skill ) ;
13721: LD_INT 0
13723: PPUSH
13724: LD_VAR 0 8
13728: PPUSH
13729: LD_VAR 0 4
13733: PPUSH
13734: CALL_OW 380
// un := CreateHuman ;
13738: LD_ADDR_VAR 0 14
13742: PUSH
13743: CALL_OW 44
13747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13748: LD_ADDR_VAR 0 7
13752: PUSH
13753: LD_VAR 0 7
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: LD_VAR 0 14
13765: PPUSH
13766: CALL_OW 2
13770: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13771: LD_VAR 0 14
13775: PPUSH
13776: LD_VAR 0 9
13780: PPUSH
13781: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13785: LD_VAR 0 9
13789: PPUSH
13790: CALL_OW 313
13794: PUSH
13795: LD_INT 6
13797: EQUAL
13798: PUSH
13799: LD_VAR 0 9
13803: PPUSH
13804: CALL_OW 266
13808: PUSH
13809: LD_INT 32
13811: PUSH
13812: LD_INT 31
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: IN
13819: OR
13820: IFFALSE 13634
13822: GO 13631
13824: POP
13825: POP
// end else
13826: GO 14208
// for j = 1 to x do
13828: LD_ADDR_VAR 0 9
13832: PUSH
13833: DOUBLE
13834: LD_INT 1
13836: DEC
13837: ST_TO_ADDR
13838: LD_VAR 0 13
13842: PUSH
13843: FOR_TO
13844: IFFALSE 14206
// begin InitHc ;
13846: CALL_OW 19
// if not f then
13850: LD_VAR 0 12
13854: NOT
13855: IFFALSE 13944
// begin PrepareHuman ( false , i , skill ) ;
13857: LD_INT 0
13859: PPUSH
13860: LD_VAR 0 8
13864: PPUSH
13865: LD_VAR 0 4
13869: PPUSH
13870: CALL_OW 380
// un := CreateHuman ;
13874: LD_ADDR_VAR 0 14
13878: PUSH
13879: CALL_OW 44
13883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13884: LD_ADDR_VAR 0 7
13888: PUSH
13889: LD_VAR 0 7
13893: PPUSH
13894: LD_INT 1
13896: PPUSH
13897: LD_VAR 0 14
13901: PPUSH
13902: CALL_OW 2
13906: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13907: LD_VAR 0 14
13911: PPUSH
13912: LD_VAR 0 1
13916: PPUSH
13917: CALL_OW 250
13921: PPUSH
13922: LD_VAR 0 1
13926: PPUSH
13927: CALL_OW 251
13931: PPUSH
13932: LD_INT 10
13934: PPUSH
13935: LD_INT 0
13937: PPUSH
13938: CALL_OW 50
// continue ;
13942: GO 13843
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13944: LD_VAR 0 12
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: PPUSH
13953: CALL_OW 313
13957: PUSH
13958: LD_VAR 0 12
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PPUSH
13967: CALL_OW 266
13971: PUSH
13972: LD_INT 32
13974: PUSH
13975: LD_INT 31
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: IN
13982: AND
13983: PUSH
13984: LD_VAR 0 12
13988: PUSH
13989: LD_INT 1
13991: ARRAY
13992: PPUSH
13993: CALL_OW 313
13997: PUSH
13998: LD_INT 6
14000: EQUAL
14001: OR
14002: IFFALSE 14022
// f := Delete ( f , 1 ) ;
14004: LD_ADDR_VAR 0 12
14008: PUSH
14009: LD_VAR 0 12
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: CALL_OW 3
14021: ST_TO_ADDR
// if not f then
14022: LD_VAR 0 12
14026: NOT
14027: IFFALSE 14045
// begin x := x + 2 ;
14029: LD_ADDR_VAR 0 13
14033: PUSH
14034: LD_VAR 0 13
14038: PUSH
14039: LD_INT 2
14041: PLUS
14042: ST_TO_ADDR
// continue ;
14043: GO 13843
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14045: LD_VAR 0 12
14049: PUSH
14050: LD_INT 1
14052: ARRAY
14053: PPUSH
14054: CALL_OW 266
14058: PUSH
14059: LD_INT 5
14061: EQUAL
14062: IFFALSE 14136
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14064: LD_VAR 0 12
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: CALL_OW 313
14077: PUSH
14078: LD_INT 3
14080: LESS
14081: IFFALSE 14117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14083: LD_INT 0
14085: PPUSH
14086: LD_INT 5
14088: PUSH
14089: LD_INT 8
14091: PUSH
14092: LD_INT 9
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_VAR 0 17
14104: ARRAY
14105: PPUSH
14106: LD_VAR 0 4
14110: PPUSH
14111: CALL_OW 380
14115: GO 14134
// PrepareHuman ( false , i , skill ) ;
14117: LD_INT 0
14119: PPUSH
14120: LD_VAR 0 8
14124: PPUSH
14125: LD_VAR 0 4
14129: PPUSH
14130: CALL_OW 380
// end else
14134: GO 14153
// PrepareHuman ( false , i , skill ) ;
14136: LD_INT 0
14138: PPUSH
14139: LD_VAR 0 8
14143: PPUSH
14144: LD_VAR 0 4
14148: PPUSH
14149: CALL_OW 380
// un := CreateHuman ;
14153: LD_ADDR_VAR 0 14
14157: PUSH
14158: CALL_OW 44
14162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14163: LD_ADDR_VAR 0 7
14167: PUSH
14168: LD_VAR 0 7
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: LD_VAR 0 14
14180: PPUSH
14181: CALL_OW 2
14185: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14186: LD_VAR 0 14
14190: PPUSH
14191: LD_VAR 0 12
14195: PUSH
14196: LD_INT 1
14198: ARRAY
14199: PPUSH
14200: CALL_OW 52
// end ;
14204: GO 13843
14206: POP
14207: POP
// end ;
14208: GO 13145
14210: POP
14211: POP
// result := result ^ buildings ;
14212: LD_ADDR_VAR 0 7
14216: PUSH
14217: LD_VAR 0 7
14221: PUSH
14222: LD_VAR 0 18
14226: ADD
14227: ST_TO_ADDR
// end else
14228: GO 14371
// begin for i = 1 to personel do
14230: LD_ADDR_VAR 0 8
14234: PUSH
14235: DOUBLE
14236: LD_INT 1
14238: DEC
14239: ST_TO_ADDR
14240: LD_VAR 0 6
14244: PUSH
14245: FOR_TO
14246: IFFALSE 14369
// begin if i > 4 then
14248: LD_VAR 0 8
14252: PUSH
14253: LD_INT 4
14255: GREATER
14256: IFFALSE 14260
// break ;
14258: GO 14369
// x := personel [ i ] ;
14260: LD_ADDR_VAR 0 13
14264: PUSH
14265: LD_VAR 0 6
14269: PUSH
14270: LD_VAR 0 8
14274: ARRAY
14275: ST_TO_ADDR
// if x = - 1 then
14276: LD_VAR 0 13
14280: PUSH
14281: LD_INT 1
14283: NEG
14284: EQUAL
14285: IFFALSE 14289
// continue ;
14287: GO 14245
// PrepareHuman ( false , i , skill ) ;
14289: LD_INT 0
14291: PPUSH
14292: LD_VAR 0 8
14296: PPUSH
14297: LD_VAR 0 4
14301: PPUSH
14302: CALL_OW 380
// un := CreateHuman ;
14306: LD_ADDR_VAR 0 14
14310: PUSH
14311: CALL_OW 44
14315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14316: LD_VAR 0 14
14320: PPUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL_OW 250
14330: PPUSH
14331: LD_VAR 0 1
14335: PPUSH
14336: CALL_OW 251
14340: PPUSH
14341: LD_INT 10
14343: PPUSH
14344: LD_INT 0
14346: PPUSH
14347: CALL_OW 50
// result := result ^ un ;
14351: LD_ADDR_VAR 0 7
14355: PUSH
14356: LD_VAR 0 7
14360: PUSH
14361: LD_VAR 0 14
14365: ADD
14366: ST_TO_ADDR
// end ;
14367: GO 14245
14369: POP
14370: POP
// end ; end ;
14371: LD_VAR 0 7
14375: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14376: LD_INT 0
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
14387: PPUSH
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
14392: PPUSH
14393: PPUSH
// result := false ;
14394: LD_ADDR_VAR 0 3
14398: PUSH
14399: LD_INT 0
14401: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14402: LD_VAR 0 1
14406: NOT
14407: PUSH
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 266
14417: PUSH
14418: LD_INT 32
14420: PUSH
14421: LD_INT 33
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: IN
14428: NOT
14429: OR
14430: IFFALSE 14434
// exit ;
14432: GO 15570
// nat := GetNation ( tower ) ;
14434: LD_ADDR_VAR 0 12
14438: PUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 248
14448: ST_TO_ADDR
// side := GetSide ( tower ) ;
14449: LD_ADDR_VAR 0 16
14453: PUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 255
14463: ST_TO_ADDR
// x := GetX ( tower ) ;
14464: LD_ADDR_VAR 0 10
14468: PUSH
14469: LD_VAR 0 1
14473: PPUSH
14474: CALL_OW 250
14478: ST_TO_ADDR
// y := GetY ( tower ) ;
14479: LD_ADDR_VAR 0 11
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 251
14493: ST_TO_ADDR
// if not x or not y then
14494: LD_VAR 0 10
14498: NOT
14499: PUSH
14500: LD_VAR 0 11
14504: NOT
14505: OR
14506: IFFALSE 14510
// exit ;
14508: GO 15570
// weapon := 0 ;
14510: LD_ADDR_VAR 0 18
14514: PUSH
14515: LD_INT 0
14517: ST_TO_ADDR
// fac_list := [ ] ;
14518: LD_ADDR_VAR 0 17
14522: PUSH
14523: EMPTY
14524: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
14525: LD_ADDR_VAR 0 6
14529: PUSH
14530: LD_VAR 0 1
14534: PPUSH
14535: CALL_OW 274
14539: PPUSH
14540: LD_VAR 0 2
14544: PPUSH
14545: CALL 12148 0 2
14549: PPUSH
14550: LD_INT 30
14552: PUSH
14553: LD_INT 3
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PPUSH
14560: CALL_OW 72
14564: ST_TO_ADDR
// if not factories then
14565: LD_VAR 0 6
14569: NOT
14570: IFFALSE 14574
// exit ;
14572: GO 15570
// for i in factories do
14574: LD_ADDR_VAR 0 8
14578: PUSH
14579: LD_VAR 0 6
14583: PUSH
14584: FOR_IN
14585: IFFALSE 14610
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14587: LD_ADDR_VAR 0 17
14591: PUSH
14592: LD_VAR 0 17
14596: PUSH
14597: LD_VAR 0 8
14601: PPUSH
14602: CALL_OW 478
14606: UNION
14607: ST_TO_ADDR
14608: GO 14584
14610: POP
14611: POP
// if not fac_list then
14612: LD_VAR 0 17
14616: NOT
14617: IFFALSE 14621
// exit ;
14619: GO 15570
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14621: LD_ADDR_VAR 0 5
14625: PUSH
14626: LD_INT 4
14628: PUSH
14629: LD_INT 5
14631: PUSH
14632: LD_INT 9
14634: PUSH
14635: LD_INT 10
14637: PUSH
14638: LD_INT 6
14640: PUSH
14641: LD_INT 7
14643: PUSH
14644: LD_INT 11
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 27
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 26
14664: PUSH
14665: LD_INT 30
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 43
14676: PUSH
14677: LD_INT 44
14679: PUSH
14680: LD_INT 46
14682: PUSH
14683: LD_INT 45
14685: PUSH
14686: LD_INT 47
14688: PUSH
14689: LD_INT 49
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: LD_VAR 0 12
14709: ARRAY
14710: ST_TO_ADDR
// for i in list do
14711: LD_ADDR_VAR 0 8
14715: PUSH
14716: LD_VAR 0 5
14720: PUSH
14721: FOR_IN
14722: IFFALSE 14755
// if not i in fac_list then
14724: LD_VAR 0 8
14728: PUSH
14729: LD_VAR 0 17
14733: IN
14734: NOT
14735: IFFALSE 14753
// list := list diff i ;
14737: LD_ADDR_VAR 0 5
14741: PUSH
14742: LD_VAR 0 5
14746: PUSH
14747: LD_VAR 0 8
14751: DIFF
14752: ST_TO_ADDR
14753: GO 14721
14755: POP
14756: POP
// if not list then
14757: LD_VAR 0 5
14761: NOT
14762: IFFALSE 14766
// exit ;
14764: GO 15570
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14766: LD_VAR 0 12
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_INT 49
14777: PUSH
14778: LD_VAR 0 5
14782: IN
14783: AND
14784: PUSH
14785: LD_INT 31
14787: PPUSH
14788: LD_VAR 0 16
14792: PPUSH
14793: CALL_OW 321
14797: PUSH
14798: LD_INT 2
14800: EQUAL
14801: AND
14802: IFFALSE 14862
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14804: LD_INT 22
14806: PUSH
14807: LD_VAR 0 16
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 35
14818: PUSH
14819: LD_INT 49
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 91
14828: PUSH
14829: LD_VAR 0 1
14833: PUSH
14834: LD_INT 10
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: NOT
14852: IFFALSE 14862
// weapon := ru_time_lapser ;
14854: LD_ADDR_VAR 0 18
14858: PUSH
14859: LD_INT 49
14861: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14862: LD_VAR 0 12
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: LD_INT 2
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: IN
14877: PUSH
14878: LD_INT 11
14880: PUSH
14881: LD_VAR 0 5
14885: IN
14886: PUSH
14887: LD_INT 30
14889: PUSH
14890: LD_VAR 0 5
14894: IN
14895: OR
14896: AND
14897: PUSH
14898: LD_INT 6
14900: PPUSH
14901: LD_VAR 0 16
14905: PPUSH
14906: CALL_OW 321
14910: PUSH
14911: LD_INT 2
14913: EQUAL
14914: AND
14915: IFFALSE 15080
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14917: LD_INT 22
14919: PUSH
14920: LD_VAR 0 16
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: LD_INT 35
14934: PUSH
14935: LD_INT 11
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 35
14944: PUSH
14945: LD_INT 30
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 91
14959: PUSH
14960: LD_VAR 0 1
14964: PUSH
14965: LD_INT 18
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: PPUSH
14978: CALL_OW 69
14982: NOT
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_VAR 0 16
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 32
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 30
15011: PUSH
15012: LD_INT 33
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 91
15026: PUSH
15027: LD_VAR 0 1
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: PUSH
15045: EMPTY
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PUSH
15053: LD_INT 2
15055: GREATER
15056: AND
15057: IFFALSE 15080
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15059: LD_ADDR_VAR 0 18
15063: PUSH
15064: LD_INT 11
15066: PUSH
15067: LD_INT 30
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_VAR 0 12
15078: ARRAY
15079: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15080: LD_VAR 0 18
15084: NOT
15085: PUSH
15086: LD_INT 40
15088: PPUSH
15089: LD_VAR 0 16
15093: PPUSH
15094: CALL_OW 321
15098: PUSH
15099: LD_INT 2
15101: EQUAL
15102: AND
15103: PUSH
15104: LD_INT 7
15106: PUSH
15107: LD_VAR 0 5
15111: IN
15112: PUSH
15113: LD_INT 28
15115: PUSH
15116: LD_VAR 0 5
15120: IN
15121: OR
15122: PUSH
15123: LD_INT 45
15125: PUSH
15126: LD_VAR 0 5
15130: IN
15131: OR
15132: AND
15133: IFFALSE 15387
// begin hex := GetHexInfo ( x , y ) ;
15135: LD_ADDR_VAR 0 4
15139: PUSH
15140: LD_VAR 0 10
15144: PPUSH
15145: LD_VAR 0 11
15149: PPUSH
15150: CALL_OW 546
15154: ST_TO_ADDR
// if hex [ 1 ] then
15155: LD_VAR 0 4
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: IFFALSE 15167
// exit ;
15165: GO 15570
// height := hex [ 2 ] ;
15167: LD_ADDR_VAR 0 15
15171: PUSH
15172: LD_VAR 0 4
15176: PUSH
15177: LD_INT 2
15179: ARRAY
15180: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15181: LD_ADDR_VAR 0 14
15185: PUSH
15186: LD_INT 0
15188: PUSH
15189: LD_INT 2
15191: PUSH
15192: LD_INT 3
15194: PUSH
15195: LD_INT 5
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: ST_TO_ADDR
// for i in tmp do
15204: LD_ADDR_VAR 0 8
15208: PUSH
15209: LD_VAR 0 14
15213: PUSH
15214: FOR_IN
15215: IFFALSE 15385
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15217: LD_ADDR_VAR 0 9
15221: PUSH
15222: LD_VAR 0 10
15226: PPUSH
15227: LD_VAR 0 8
15231: PPUSH
15232: LD_INT 5
15234: PPUSH
15235: CALL_OW 272
15239: PUSH
15240: LD_VAR 0 11
15244: PPUSH
15245: LD_VAR 0 8
15249: PPUSH
15250: LD_INT 5
15252: PPUSH
15253: CALL_OW 273
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15262: LD_VAR 0 9
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: LD_VAR 0 9
15275: PUSH
15276: LD_INT 2
15278: ARRAY
15279: PPUSH
15280: CALL_OW 488
15284: IFFALSE 15383
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15286: LD_ADDR_VAR 0 4
15290: PUSH
15291: LD_VAR 0 9
15295: PUSH
15296: LD_INT 1
15298: ARRAY
15299: PPUSH
15300: LD_VAR 0 9
15304: PUSH
15305: LD_INT 2
15307: ARRAY
15308: PPUSH
15309: CALL_OW 546
15313: ST_TO_ADDR
// if hex [ 1 ] then
15314: LD_VAR 0 4
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: IFFALSE 15326
// continue ;
15324: GO 15214
// h := hex [ 2 ] ;
15326: LD_ADDR_VAR 0 13
15330: PUSH
15331: LD_VAR 0 4
15335: PUSH
15336: LD_INT 2
15338: ARRAY
15339: ST_TO_ADDR
// if h + 7 < height then
15340: LD_VAR 0 13
15344: PUSH
15345: LD_INT 7
15347: PLUS
15348: PUSH
15349: LD_VAR 0 15
15353: LESS
15354: IFFALSE 15383
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15356: LD_ADDR_VAR 0 18
15360: PUSH
15361: LD_INT 7
15363: PUSH
15364: LD_INT 28
15366: PUSH
15367: LD_INT 45
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: PUSH
15375: LD_VAR 0 12
15379: ARRAY
15380: ST_TO_ADDR
// break ;
15381: GO 15385
// end ; end ; end ;
15383: GO 15214
15385: POP
15386: POP
// end ; if not weapon then
15387: LD_VAR 0 18
15391: NOT
15392: IFFALSE 15452
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15394: LD_ADDR_VAR 0 5
15398: PUSH
15399: LD_VAR 0 5
15403: PUSH
15404: LD_INT 11
15406: PUSH
15407: LD_INT 30
15409: PUSH
15410: LD_INT 49
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: DIFF
15418: ST_TO_ADDR
// if not list then
15419: LD_VAR 0 5
15423: NOT
15424: IFFALSE 15428
// exit ;
15426: GO 15570
// weapon := list [ rand ( 1 , list ) ] ;
15428: LD_ADDR_VAR 0 18
15432: PUSH
15433: LD_VAR 0 5
15437: PUSH
15438: LD_INT 1
15440: PPUSH
15441: LD_VAR 0 5
15445: PPUSH
15446: CALL_OW 12
15450: ARRAY
15451: ST_TO_ADDR
// end ; if weapon then
15452: LD_VAR 0 18
15456: IFFALSE 15570
// begin tmp := CostOfWeapon ( weapon ) ;
15458: LD_ADDR_VAR 0 14
15462: PUSH
15463: LD_VAR 0 18
15467: PPUSH
15468: CALL_OW 451
15472: ST_TO_ADDR
// j := GetBase ( tower ) ;
15473: LD_ADDR_VAR 0 9
15477: PUSH
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL_OW 274
15487: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15488: LD_VAR 0 9
15492: PPUSH
15493: LD_INT 1
15495: PPUSH
15496: CALL_OW 275
15500: PUSH
15501: LD_VAR 0 14
15505: PUSH
15506: LD_INT 1
15508: ARRAY
15509: GREATEREQUAL
15510: PUSH
15511: LD_VAR 0 9
15515: PPUSH
15516: LD_INT 2
15518: PPUSH
15519: CALL_OW 275
15523: PUSH
15524: LD_VAR 0 14
15528: PUSH
15529: LD_INT 2
15531: ARRAY
15532: GREATEREQUAL
15533: AND
15534: PUSH
15535: LD_VAR 0 9
15539: PPUSH
15540: LD_INT 3
15542: PPUSH
15543: CALL_OW 275
15547: PUSH
15548: LD_VAR 0 14
15552: PUSH
15553: LD_INT 3
15555: ARRAY
15556: GREATEREQUAL
15557: AND
15558: IFFALSE 15570
// result := weapon ;
15560: LD_ADDR_VAR 0 3
15564: PUSH
15565: LD_VAR 0 18
15569: ST_TO_ADDR
// end ; end ;
15570: LD_VAR 0 3
15574: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15575: LD_INT 0
15577: PPUSH
15578: PPUSH
// result := true ;
15579: LD_ADDR_VAR 0 3
15583: PUSH
15584: LD_INT 1
15586: ST_TO_ADDR
// if array1 = array2 then
15587: LD_VAR 0 1
15591: PUSH
15592: LD_VAR 0 2
15596: EQUAL
15597: IFFALSE 15657
// begin for i = 1 to array1 do
15599: LD_ADDR_VAR 0 4
15603: PUSH
15604: DOUBLE
15605: LD_INT 1
15607: DEC
15608: ST_TO_ADDR
15609: LD_VAR 0 1
15613: PUSH
15614: FOR_TO
15615: IFFALSE 15653
// if array1 [ i ] <> array2 [ i ] then
15617: LD_VAR 0 1
15621: PUSH
15622: LD_VAR 0 4
15626: ARRAY
15627: PUSH
15628: LD_VAR 0 2
15632: PUSH
15633: LD_VAR 0 4
15637: ARRAY
15638: NONEQUAL
15639: IFFALSE 15651
// begin result := false ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: LD_INT 0
15648: ST_TO_ADDR
// break ;
15649: GO 15653
// end ;
15651: GO 15614
15653: POP
15654: POP
// end else
15655: GO 15665
// result := false ;
15657: LD_ADDR_VAR 0 3
15661: PUSH
15662: LD_INT 0
15664: ST_TO_ADDR
// end ;
15665: LD_VAR 0 3
15669: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
15674: PPUSH
// pom := GetBase ( fac ) ;
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 274
15689: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15690: LD_ADDR_VAR 0 4
15694: PUSH
15695: LD_VAR 0 2
15699: PUSH
15700: LD_INT 1
15702: ARRAY
15703: PPUSH
15704: LD_VAR 0 2
15708: PUSH
15709: LD_INT 2
15711: ARRAY
15712: PPUSH
15713: LD_VAR 0 2
15717: PUSH
15718: LD_INT 3
15720: ARRAY
15721: PPUSH
15722: LD_VAR 0 2
15726: PUSH
15727: LD_INT 4
15729: ARRAY
15730: PPUSH
15731: CALL_OW 449
15735: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15736: LD_ADDR_VAR 0 3
15740: PUSH
15741: LD_VAR 0 5
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 275
15753: PUSH
15754: LD_VAR 0 4
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: GREATEREQUAL
15763: PUSH
15764: LD_VAR 0 5
15768: PPUSH
15769: LD_INT 2
15771: PPUSH
15772: CALL_OW 275
15776: PUSH
15777: LD_VAR 0 4
15781: PUSH
15782: LD_INT 2
15784: ARRAY
15785: GREATEREQUAL
15786: AND
15787: PUSH
15788: LD_VAR 0 5
15792: PPUSH
15793: LD_INT 3
15795: PPUSH
15796: CALL_OW 275
15800: PUSH
15801: LD_VAR 0 4
15805: PUSH
15806: LD_INT 3
15808: ARRAY
15809: GREATEREQUAL
15810: AND
15811: ST_TO_ADDR
// end ;
15812: LD_VAR 0 3
15816: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15817: LD_INT 0
15819: PPUSH
15820: PPUSH
15821: PPUSH
15822: PPUSH
// pom := GetBase ( building ) ;
15823: LD_ADDR_VAR 0 3
15827: PUSH
15828: LD_VAR 0 1
15832: PPUSH
15833: CALL_OW 274
15837: ST_TO_ADDR
// if not pom then
15838: LD_VAR 0 3
15842: NOT
15843: IFFALSE 15847
// exit ;
15845: GO 16017
// btype := GetBType ( building ) ;
15847: LD_ADDR_VAR 0 5
15851: PUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 266
15861: ST_TO_ADDR
// if btype = b_armoury then
15862: LD_VAR 0 5
15866: PUSH
15867: LD_INT 4
15869: EQUAL
15870: IFFALSE 15880
// btype := b_barracks ;
15872: LD_ADDR_VAR 0 5
15876: PUSH
15877: LD_INT 5
15879: ST_TO_ADDR
// if btype = b_depot then
15880: LD_VAR 0 5
15884: PUSH
15885: LD_INT 0
15887: EQUAL
15888: IFFALSE 15898
// btype := b_warehouse ;
15890: LD_ADDR_VAR 0 5
15894: PUSH
15895: LD_INT 1
15897: ST_TO_ADDR
// if btype = b_workshop then
15898: LD_VAR 0 5
15902: PUSH
15903: LD_INT 2
15905: EQUAL
15906: IFFALSE 15916
// btype := b_factory ;
15908: LD_ADDR_VAR 0 5
15912: PUSH
15913: LD_INT 3
15915: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15916: LD_ADDR_VAR 0 4
15920: PUSH
15921: LD_VAR 0 5
15925: PPUSH
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 248
15935: PPUSH
15936: CALL_OW 450
15940: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15941: LD_ADDR_VAR 0 2
15945: PUSH
15946: LD_VAR 0 3
15950: PPUSH
15951: LD_INT 1
15953: PPUSH
15954: CALL_OW 275
15958: PUSH
15959: LD_VAR 0 4
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: GREATEREQUAL
15968: PUSH
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 2
15976: PPUSH
15977: CALL_OW 275
15981: PUSH
15982: LD_VAR 0 4
15986: PUSH
15987: LD_INT 2
15989: ARRAY
15990: GREATEREQUAL
15991: AND
15992: PUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: LD_INT 3
16000: PPUSH
16001: CALL_OW 275
16005: PUSH
16006: LD_VAR 0 4
16010: PUSH
16011: LD_INT 3
16013: ARRAY
16014: GREATEREQUAL
16015: AND
16016: ST_TO_ADDR
// end ;
16017: LD_VAR 0 2
16021: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16022: LD_INT 0
16024: PPUSH
16025: PPUSH
16026: PPUSH
// pom := GetBase ( building ) ;
16027: LD_ADDR_VAR 0 4
16031: PUSH
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 274
16041: ST_TO_ADDR
// if not pom then
16042: LD_VAR 0 4
16046: NOT
16047: IFFALSE 16051
// exit ;
16049: GO 16152
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16051: LD_ADDR_VAR 0 5
16055: PUSH
16056: LD_VAR 0 2
16060: PPUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 248
16070: PPUSH
16071: CALL_OW 450
16075: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16076: LD_ADDR_VAR 0 3
16080: PUSH
16081: LD_VAR 0 4
16085: PPUSH
16086: LD_INT 1
16088: PPUSH
16089: CALL_OW 275
16093: PUSH
16094: LD_VAR 0 5
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: GREATEREQUAL
16103: PUSH
16104: LD_VAR 0 4
16108: PPUSH
16109: LD_INT 2
16111: PPUSH
16112: CALL_OW 275
16116: PUSH
16117: LD_VAR 0 5
16121: PUSH
16122: LD_INT 2
16124: ARRAY
16125: GREATEREQUAL
16126: AND
16127: PUSH
16128: LD_VAR 0 4
16132: PPUSH
16133: LD_INT 3
16135: PPUSH
16136: CALL_OW 275
16140: PUSH
16141: LD_VAR 0 5
16145: PUSH
16146: LD_INT 3
16148: ARRAY
16149: GREATEREQUAL
16150: AND
16151: ST_TO_ADDR
// end ;
16152: LD_VAR 0 3
16156: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
16157: LD_INT 0
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
16165: PPUSH
16166: PPUSH
16167: PPUSH
16168: PPUSH
// result := false ;
16169: LD_ADDR_VAR 0 6
16173: PUSH
16174: LD_INT 0
16176: ST_TO_ADDR
// if not base or not btype or not x or not y then
16177: LD_VAR 0 1
16181: NOT
16182: PUSH
16183: LD_VAR 0 2
16187: NOT
16188: OR
16189: PUSH
16190: LD_VAR 0 3
16194: NOT
16195: OR
16196: PUSH
16197: LD_VAR 0 4
16201: NOT
16202: OR
16203: IFFALSE 16207
// exit ;
16205: GO 16816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
16207: LD_ADDR_VAR 0 12
16211: PUSH
16212: LD_VAR 0 2
16216: PPUSH
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_VAR 0 4
16226: PPUSH
16227: LD_VAR 0 5
16231: PPUSH
16232: LD_VAR 0 1
16236: PUSH
16237: LD_INT 1
16239: ARRAY
16240: PPUSH
16241: CALL_OW 248
16245: PPUSH
16246: LD_INT 0
16248: PPUSH
16249: CALL 17653 0 6
16253: ST_TO_ADDR
// if not hexes then
16254: LD_VAR 0 12
16258: NOT
16259: IFFALSE 16263
// exit ;
16261: GO 16816
// for i = 1 to hexes do
16263: LD_ADDR_VAR 0 7
16267: PUSH
16268: DOUBLE
16269: LD_INT 1
16271: DEC
16272: ST_TO_ADDR
16273: LD_VAR 0 12
16277: PUSH
16278: FOR_TO
16279: IFFALSE 16814
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16281: LD_ADDR_VAR 0 11
16285: PUSH
16286: LD_VAR 0 12
16290: PUSH
16291: LD_VAR 0 7
16295: ARRAY
16296: PUSH
16297: LD_INT 1
16299: ARRAY
16300: PPUSH
16301: LD_VAR 0 12
16305: PUSH
16306: LD_VAR 0 7
16310: ARRAY
16311: PUSH
16312: LD_INT 2
16314: ARRAY
16315: PPUSH
16316: CALL_OW 428
16320: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16321: LD_VAR 0 12
16325: PUSH
16326: LD_VAR 0 7
16330: ARRAY
16331: PUSH
16332: LD_INT 1
16334: ARRAY
16335: PPUSH
16336: LD_VAR 0 12
16340: PUSH
16341: LD_VAR 0 7
16345: ARRAY
16346: PUSH
16347: LD_INT 2
16349: ARRAY
16350: PPUSH
16351: CALL_OW 351
16355: PUSH
16356: LD_VAR 0 12
16360: PUSH
16361: LD_VAR 0 7
16365: ARRAY
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: LD_VAR 0 12
16375: PUSH
16376: LD_VAR 0 7
16380: ARRAY
16381: PUSH
16382: LD_INT 2
16384: ARRAY
16385: PPUSH
16386: CALL_OW 488
16390: NOT
16391: OR
16392: PUSH
16393: LD_VAR 0 11
16397: PPUSH
16398: CALL_OW 247
16402: PUSH
16403: LD_INT 3
16405: EQUAL
16406: OR
16407: IFFALSE 16413
// exit ;
16409: POP
16410: POP
16411: GO 16816
// if not tmp or not tmp in base then
16413: LD_VAR 0 11
16417: NOT
16418: PUSH
16419: LD_VAR 0 11
16423: PUSH
16424: LD_VAR 0 1
16428: IN
16429: NOT
16430: OR
16431: IFFALSE 16435
// continue ;
16433: GO 16278
// result := true ;
16435: LD_ADDR_VAR 0 6
16439: PUSH
16440: LD_INT 1
16442: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16443: LD_ADDR_VAR 0 15
16447: PUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: LD_INT 22
16455: PUSH
16456: LD_VAR 0 11
16460: PPUSH
16461: CALL_OW 255
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: LD_INT 30
16475: PUSH
16476: LD_INT 0
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 30
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PPUSH
16502: CALL_OW 72
16506: ST_TO_ADDR
// if dep then
16507: LD_VAR 0 15
16511: IFFALSE 16647
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16513: LD_ADDR_VAR 0 14
16517: PUSH
16518: LD_VAR 0 15
16522: PUSH
16523: LD_INT 1
16525: ARRAY
16526: PPUSH
16527: CALL_OW 250
16531: PPUSH
16532: LD_VAR 0 15
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: PPUSH
16541: CALL_OW 254
16545: PPUSH
16546: LD_INT 5
16548: PPUSH
16549: CALL_OW 272
16553: PUSH
16554: LD_VAR 0 15
16558: PUSH
16559: LD_INT 1
16561: ARRAY
16562: PPUSH
16563: CALL_OW 251
16567: PPUSH
16568: LD_VAR 0 15
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: PPUSH
16577: CALL_OW 254
16581: PPUSH
16582: LD_INT 5
16584: PPUSH
16585: CALL_OW 273
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16594: LD_VAR 0 14
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: PPUSH
16603: LD_VAR 0 14
16607: PUSH
16608: LD_INT 2
16610: ARRAY
16611: PPUSH
16612: CALL_OW 488
16616: IFFALSE 16647
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16618: LD_VAR 0 11
16622: PPUSH
16623: LD_VAR 0 14
16627: PUSH
16628: LD_INT 1
16630: ARRAY
16631: PPUSH
16632: LD_VAR 0 14
16636: PUSH
16637: LD_INT 2
16639: ARRAY
16640: PPUSH
16641: CALL_OW 111
// continue ;
16645: GO 16278
// end ; end ; r := GetDir ( tmp ) ;
16647: LD_ADDR_VAR 0 13
16651: PUSH
16652: LD_VAR 0 11
16656: PPUSH
16657: CALL_OW 254
16661: ST_TO_ADDR
// if r = 5 then
16662: LD_VAR 0 13
16666: PUSH
16667: LD_INT 5
16669: EQUAL
16670: IFFALSE 16680
// r := 0 ;
16672: LD_ADDR_VAR 0 13
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// for j = r to 5 do
16680: LD_ADDR_VAR 0 8
16684: PUSH
16685: DOUBLE
16686: LD_VAR 0 13
16690: DEC
16691: ST_TO_ADDR
16692: LD_INT 5
16694: PUSH
16695: FOR_TO
16696: IFFALSE 16810
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16698: LD_ADDR_VAR 0 9
16702: PUSH
16703: LD_VAR 0 11
16707: PPUSH
16708: CALL_OW 250
16712: PPUSH
16713: LD_VAR 0 8
16717: PPUSH
16718: LD_INT 2
16720: PPUSH
16721: CALL_OW 272
16725: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16726: LD_ADDR_VAR 0 10
16730: PUSH
16731: LD_VAR 0 11
16735: PPUSH
16736: CALL_OW 251
16740: PPUSH
16741: LD_VAR 0 8
16745: PPUSH
16746: LD_INT 2
16748: PPUSH
16749: CALL_OW 273
16753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16754: LD_VAR 0 9
16758: PPUSH
16759: LD_VAR 0 10
16763: PPUSH
16764: CALL_OW 488
16768: PUSH
16769: LD_VAR 0 9
16773: PPUSH
16774: LD_VAR 0 10
16778: PPUSH
16779: CALL_OW 428
16783: NOT
16784: AND
16785: IFFALSE 16808
// begin ComMoveXY ( tmp , _x , _y ) ;
16787: LD_VAR 0 11
16791: PPUSH
16792: LD_VAR 0 9
16796: PPUSH
16797: LD_VAR 0 10
16801: PPUSH
16802: CALL_OW 111
// break ;
16806: GO 16810
// end ; end ;
16808: GO 16695
16810: POP
16811: POP
// end ;
16812: GO 16278
16814: POP
16815: POP
// end ;
16816: LD_VAR 0 6
16820: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
16821: LD_INT 0
16823: PPUSH
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
16829: PPUSH
16830: PPUSH
16831: PPUSH
16832: PPUSH
// result := false ;
16833: LD_ADDR_VAR 0 6
16837: PUSH
16838: LD_INT 0
16840: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16841: LD_VAR 0 1
16845: NOT
16846: PUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 266
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: IN
16867: NOT
16868: OR
16869: PUSH
16870: LD_VAR 0 2
16874: NOT
16875: OR
16876: PUSH
16877: LD_VAR 0 5
16881: PUSH
16882: LD_INT 0
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 4
16896: PUSH
16897: LD_INT 5
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: IN
16908: NOT
16909: OR
16910: PUSH
16911: LD_VAR 0 3
16915: PPUSH
16916: LD_VAR 0 4
16920: PPUSH
16921: CALL_OW 488
16925: NOT
16926: OR
16927: IFFALSE 16931
// exit ;
16929: GO 17648
// pom := GetBase ( depot ) ;
16931: LD_ADDR_VAR 0 10
16935: PUSH
16936: LD_VAR 0 1
16940: PPUSH
16941: CALL_OW 274
16945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16946: LD_ADDR_VAR 0 11
16950: PUSH
16951: LD_VAR 0 2
16955: PPUSH
16956: LD_VAR 0 1
16960: PPUSH
16961: CALL_OW 248
16965: PPUSH
16966: CALL_OW 450
16970: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16971: LD_VAR 0 10
16975: PPUSH
16976: LD_INT 1
16978: PPUSH
16979: CALL_OW 275
16983: PUSH
16984: LD_VAR 0 11
16988: PUSH
16989: LD_INT 1
16991: ARRAY
16992: GREATEREQUAL
16993: PUSH
16994: LD_VAR 0 10
16998: PPUSH
16999: LD_INT 2
17001: PPUSH
17002: CALL_OW 275
17006: PUSH
17007: LD_VAR 0 11
17011: PUSH
17012: LD_INT 2
17014: ARRAY
17015: GREATEREQUAL
17016: AND
17017: PUSH
17018: LD_VAR 0 10
17022: PPUSH
17023: LD_INT 3
17025: PPUSH
17026: CALL_OW 275
17030: PUSH
17031: LD_VAR 0 11
17035: PUSH
17036: LD_INT 3
17038: ARRAY
17039: GREATEREQUAL
17040: AND
17041: NOT
17042: IFFALSE 17046
// exit ;
17044: GO 17648
// if GetBType ( depot ) = b_depot then
17046: LD_VAR 0 1
17050: PPUSH
17051: CALL_OW 266
17055: PUSH
17056: LD_INT 0
17058: EQUAL
17059: IFFALSE 17071
// dist := 28 else
17061: LD_ADDR_VAR 0 14
17065: PUSH
17066: LD_INT 28
17068: ST_TO_ADDR
17069: GO 17079
// dist := 36 ;
17071: LD_ADDR_VAR 0 14
17075: PUSH
17076: LD_INT 36
17078: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_VAR 0 3
17088: PPUSH
17089: LD_VAR 0 4
17093: PPUSH
17094: CALL_OW 297
17098: PUSH
17099: LD_VAR 0 14
17103: GREATER
17104: IFFALSE 17108
// exit ;
17106: GO 17648
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17108: LD_ADDR_VAR 0 12
17112: PUSH
17113: LD_VAR 0 2
17117: PPUSH
17118: LD_VAR 0 3
17122: PPUSH
17123: LD_VAR 0 4
17127: PPUSH
17128: LD_VAR 0 5
17132: PPUSH
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 248
17142: PPUSH
17143: LD_INT 0
17145: PPUSH
17146: CALL 17653 0 6
17150: ST_TO_ADDR
// if not hexes then
17151: LD_VAR 0 12
17155: NOT
17156: IFFALSE 17160
// exit ;
17158: GO 17648
// hex := GetHexInfo ( x , y ) ;
17160: LD_ADDR_VAR 0 15
17164: PUSH
17165: LD_VAR 0 3
17169: PPUSH
17170: LD_VAR 0 4
17174: PPUSH
17175: CALL_OW 546
17179: ST_TO_ADDR
// if hex [ 1 ] then
17180: LD_VAR 0 15
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: IFFALSE 17192
// exit ;
17190: GO 17648
// height := hex [ 2 ] ;
17192: LD_ADDR_VAR 0 13
17196: PUSH
17197: LD_VAR 0 15
17201: PUSH
17202: LD_INT 2
17204: ARRAY
17205: ST_TO_ADDR
// for i = 1 to hexes do
17206: LD_ADDR_VAR 0 7
17210: PUSH
17211: DOUBLE
17212: LD_INT 1
17214: DEC
17215: ST_TO_ADDR
17216: LD_VAR 0 12
17220: PUSH
17221: FOR_TO
17222: IFFALSE 17552
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17224: LD_VAR 0 12
17228: PUSH
17229: LD_VAR 0 7
17233: ARRAY
17234: PUSH
17235: LD_INT 1
17237: ARRAY
17238: PPUSH
17239: LD_VAR 0 12
17243: PUSH
17244: LD_VAR 0 7
17248: ARRAY
17249: PUSH
17250: LD_INT 2
17252: ARRAY
17253: PPUSH
17254: CALL_OW 488
17258: NOT
17259: PUSH
17260: LD_VAR 0 12
17264: PUSH
17265: LD_VAR 0 7
17269: ARRAY
17270: PUSH
17271: LD_INT 1
17273: ARRAY
17274: PPUSH
17275: LD_VAR 0 12
17279: PUSH
17280: LD_VAR 0 7
17284: ARRAY
17285: PUSH
17286: LD_INT 2
17288: ARRAY
17289: PPUSH
17290: CALL_OW 428
17294: PUSH
17295: LD_INT 0
17297: GREATER
17298: OR
17299: PUSH
17300: LD_VAR 0 12
17304: PUSH
17305: LD_VAR 0 7
17309: ARRAY
17310: PUSH
17311: LD_INT 1
17313: ARRAY
17314: PPUSH
17315: LD_VAR 0 12
17319: PUSH
17320: LD_VAR 0 7
17324: ARRAY
17325: PUSH
17326: LD_INT 2
17328: ARRAY
17329: PPUSH
17330: CALL_OW 351
17334: OR
17335: IFFALSE 17341
// exit ;
17337: POP
17338: POP
17339: GO 17648
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17341: LD_ADDR_VAR 0 8
17345: PUSH
17346: LD_VAR 0 12
17350: PUSH
17351: LD_VAR 0 7
17355: ARRAY
17356: PUSH
17357: LD_INT 1
17359: ARRAY
17360: PPUSH
17361: LD_VAR 0 12
17365: PUSH
17366: LD_VAR 0 7
17370: ARRAY
17371: PUSH
17372: LD_INT 2
17374: ARRAY
17375: PPUSH
17376: CALL_OW 546
17380: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17381: LD_VAR 0 8
17385: PUSH
17386: LD_INT 1
17388: ARRAY
17389: PUSH
17390: LD_VAR 0 8
17394: PUSH
17395: LD_INT 2
17397: ARRAY
17398: PUSH
17399: LD_VAR 0 13
17403: PUSH
17404: LD_INT 2
17406: PLUS
17407: GREATER
17408: OR
17409: PUSH
17410: LD_VAR 0 8
17414: PUSH
17415: LD_INT 2
17417: ARRAY
17418: PUSH
17419: LD_VAR 0 13
17423: PUSH
17424: LD_INT 2
17426: MINUS
17427: LESS
17428: OR
17429: PUSH
17430: LD_VAR 0 8
17434: PUSH
17435: LD_INT 3
17437: ARRAY
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 8
17444: PUSH
17445: LD_INT 9
17447: PUSH
17448: LD_INT 10
17450: PUSH
17451: LD_INT 11
17453: PUSH
17454: LD_INT 12
17456: PUSH
17457: LD_INT 13
17459: PUSH
17460: LD_INT 16
17462: PUSH
17463: LD_INT 17
17465: PUSH
17466: LD_INT 18
17468: PUSH
17469: LD_INT 19
17471: PUSH
17472: LD_INT 20
17474: PUSH
17475: LD_INT 21
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: IN
17493: NOT
17494: OR
17495: PUSH
17496: LD_VAR 0 8
17500: PUSH
17501: LD_INT 5
17503: ARRAY
17504: NOT
17505: OR
17506: PUSH
17507: LD_VAR 0 8
17511: PUSH
17512: LD_INT 6
17514: ARRAY
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 7
17524: PUSH
17525: LD_INT 9
17527: PUSH
17528: LD_INT 10
17530: PUSH
17531: LD_INT 11
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: IN
17542: NOT
17543: OR
17544: IFFALSE 17550
// exit ;
17546: POP
17547: POP
17548: GO 17648
// end ;
17550: GO 17221
17552: POP
17553: POP
// side := GetSide ( depot ) ;
17554: LD_ADDR_VAR 0 9
17558: PUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 255
17568: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17569: LD_VAR 0 9
17573: PPUSH
17574: LD_VAR 0 3
17578: PPUSH
17579: LD_VAR 0 4
17583: PPUSH
17584: LD_INT 20
17586: PPUSH
17587: CALL 10302 0 4
17591: PUSH
17592: LD_INT 4
17594: ARRAY
17595: IFFALSE 17599
// exit ;
17597: GO 17648
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17599: LD_VAR 0 2
17603: PUSH
17604: LD_INT 29
17606: PUSH
17607: LD_INT 30
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: IN
17614: PUSH
17615: LD_VAR 0 3
17619: PPUSH
17620: LD_VAR 0 4
17624: PPUSH
17625: LD_VAR 0 9
17629: PPUSH
17630: CALL_OW 440
17634: NOT
17635: AND
17636: IFFALSE 17640
// exit ;
17638: GO 17648
// result := true ;
17640: LD_ADDR_VAR 0 6
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
// end ;
17648: LD_VAR 0 6
17652: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17653: LD_INT 0
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
17689: PPUSH
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
17704: PPUSH
17705: PPUSH
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
// result = [ ] ;
17713: LD_ADDR_VAR 0 7
17717: PUSH
17718: EMPTY
17719: ST_TO_ADDR
// temp_list = [ ] ;
17720: LD_ADDR_VAR 0 9
17724: PUSH
17725: EMPTY
17726: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17727: LD_VAR 0 4
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: LD_INT 3
17743: PUSH
17744: LD_INT 4
17746: PUSH
17747: LD_INT 5
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: IN
17758: NOT
17759: PUSH
17760: LD_VAR 0 1
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: IN
17775: PUSH
17776: LD_VAR 0 5
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: IN
17795: NOT
17796: AND
17797: OR
17798: IFFALSE 17802
// exit ;
17800: GO 36193
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17802: LD_VAR 0 1
17806: PUSH
17807: LD_INT 6
17809: PUSH
17810: LD_INT 7
17812: PUSH
17813: LD_INT 8
17815: PUSH
17816: LD_INT 13
17818: PUSH
17819: LD_INT 12
17821: PUSH
17822: LD_INT 15
17824: PUSH
17825: LD_INT 11
17827: PUSH
17828: LD_INT 14
17830: PUSH
17831: LD_INT 10
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: IN
17845: IFFALSE 17855
// btype = b_lab ;
17847: LD_ADDR_VAR 0 1
17851: PUSH
17852: LD_INT 6
17854: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17855: LD_VAR 0 6
17859: PUSH
17860: LD_INT 0
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: LD_INT 2
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: LIST
17873: IN
17874: NOT
17875: PUSH
17876: LD_VAR 0 1
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: LD_INT 3
17892: PUSH
17893: LD_INT 6
17895: PUSH
17896: LD_INT 36
17898: PUSH
17899: LD_INT 4
17901: PUSH
17902: LD_INT 5
17904: PUSH
17905: LD_INT 31
17907: PUSH
17908: LD_INT 32
17910: PUSH
17911: LD_INT 33
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: IN
17927: NOT
17928: PUSH
17929: LD_VAR 0 6
17933: PUSH
17934: LD_INT 1
17936: EQUAL
17937: AND
17938: OR
17939: PUSH
17940: LD_VAR 0 1
17944: PUSH
17945: LD_INT 2
17947: PUSH
17948: LD_INT 3
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: IN
17955: NOT
17956: PUSH
17957: LD_VAR 0 6
17961: PUSH
17962: LD_INT 2
17964: EQUAL
17965: AND
17966: OR
17967: IFFALSE 17977
// mode = 0 ;
17969: LD_ADDR_VAR 0 6
17973: PUSH
17974: LD_INT 0
17976: ST_TO_ADDR
// case mode of 0 :
17977: LD_VAR 0 6
17981: PUSH
17982: LD_INT 0
17984: DOUBLE
17985: EQUAL
17986: IFTRUE 17990
17988: GO 29443
17990: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17991: LD_ADDR_VAR 0 11
17995: PUSH
17996: LD_INT 0
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: LD_INT 1
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: LD_INT 0
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: NEG
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: NEG
18073: PUSH
18074: LD_INT 2
18076: NEG
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: LD_INT 2
18087: NEG
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: LD_INT 2
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: LD_INT 2
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: LD_INT 3
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18184: LD_ADDR_VAR 0 12
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 0
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: LD_INT 1
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: NEG
18243: PUSH
18244: LD_INT 0
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 1
18253: NEG
18254: PUSH
18255: LD_INT 1
18257: NEG
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 2
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: NEG
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 2
18307: NEG
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 2
18318: NEG
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 2
18330: NEG
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 3
18341: NEG
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 3
18352: NEG
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18380: LD_ADDR_VAR 0 13
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 0
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 0
18397: PUSH
18398: LD_INT 1
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 1
18449: NEG
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: LD_INT 2
18465: NEG
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 2
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 2
18503: NEG
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 2
18515: NEG
18516: PUSH
18517: LD_INT 2
18519: NEG
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: LD_INT 3
18531: NEG
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 3
18539: NEG
18540: PUSH
18541: LD_INT 2
18543: NEG
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 3
18551: NEG
18552: PUSH
18553: LD_INT 3
18555: NEG
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18579: LD_ADDR_VAR 0 14
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 1
18637: NEG
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: LD_INT 2
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 2
18675: NEG
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: LD_INT 2
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: NEG
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: PUSH
18727: LD_INT 3
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: LD_INT 3
18740: NEG
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: PUSH
18749: LD_INT 2
18751: NEG
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18775: LD_ADDR_VAR 0 15
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: LD_INT 1
18795: NEG
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 0
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 1
18833: NEG
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: LD_INT 1
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 2
18898: NEG
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 3
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 3
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18968: LD_ADDR_VAR 0 16
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 1
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: LD_INT 2
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: LD_INT 1
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 2
19103: NEG
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 3
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 3
19125: PUSH
19126: LD_INT 3
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 3
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19161: LD_ADDR_VAR 0 17
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: NEG
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: LD_INT 2
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: LD_INT 2
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 0
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: NEG
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: NEG
19338: PUSH
19339: LD_INT 0
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: NEG
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: LD_INT 2
19364: NEG
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19391: LD_ADDR_VAR 0 18
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: LD_INT 0
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 0
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: LD_INT 2
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: LD_INT 2
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: NEG
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: NEG
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 2
19590: NEG
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19621: LD_ADDR_VAR 0 19
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 1
19690: NEG
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: LD_INT 2
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: LD_INT 0
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: NEG
19798: PUSH
19799: LD_INT 0
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: LD_INT 1
19812: NEG
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: NEG
19821: PUSH
19822: LD_INT 2
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19851: LD_ADDR_VAR 0 20
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: LD_INT 1
19871: NEG
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: NEG
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 2
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: NEG
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: NEG
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: NEG
20051: PUSH
20052: LD_INT 2
20054: NEG
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20081: LD_ADDR_VAR 0 21
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: LD_INT 0
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: LD_INT 2
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: NEG
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 2
20268: NEG
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 2
20280: NEG
20281: PUSH
20282: LD_INT 2
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20311: LD_ADDR_VAR 0 22
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 0
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 2
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20541: LD_ADDR_VAR 0 23
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: LD_INT 2
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 2
20728: NEG
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: NEG
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: LD_INT 3
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: NEG
20765: PUSH
20766: LD_INT 3
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: LD_INT 2
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 1
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20821: LD_ADDR_VAR 0 24
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 0
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: LD_INT 2
20906: NEG
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: LD_INT 2
20917: NEG
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: NEG
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 2
21008: NEG
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 2
21020: NEG
21021: PUSH
21022: LD_INT 2
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: LD_INT 2
21035: NEG
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 1
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 3
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21097: LD_ADDR_VAR 0 25
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: NEG
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: LD_INT 2
21182: NEG
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: LD_INT 2
21193: NEG
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 1
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: LD_INT 0
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: LD_INT 2
21300: NEG
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 3
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 3
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 3
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: LD_INT 3
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21371: LD_ADDR_VAR 0 26
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 0
21388: PUSH
21389: LD_INT 1
21391: NEG
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 1
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 1
21452: NEG
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: LD_INT 2
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 2
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 2
21547: NEG
21548: PUSH
21549: LD_INT 0
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 2
21558: NEG
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: LD_INT 2
21574: NEG
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 2
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: LD_INT 3
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: NEG
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21647: LD_ADDR_VAR 0 27
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 0
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: LD_INT 0
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: LD_INT 2
21743: NEG
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 1
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: NEG
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: NEG
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 2
21834: NEG
21835: PUSH
21836: LD_INT 1
21838: NEG
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 2
21846: NEG
21847: PUSH
21848: LD_INT 2
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: LD_INT 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: NEG
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 3
21880: NEG
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 3
21892: NEG
21893: PUSH
21894: LD_INT 2
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21927: LD_ADDR_VAR 0 28
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 2
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 2
22114: NEG
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: LD_INT 2
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 2
22138: NEG
22139: PUSH
22140: LD_INT 3
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: LD_INT 3
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 3
22162: NEG
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 3
22174: NEG
22175: PUSH
22176: LD_INT 2
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22209: LD_ADDR_VAR 0 29
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 1
22278: NEG
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: LD_INT 2
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: LD_INT 2
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: NEG
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: LD_INT 3
22403: NEG
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: LD_INT 1
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 3
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: LD_INT 2
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 3
22453: NEG
22454: PUSH
22455: LD_INT 2
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22488: LD_ADDR_VAR 0 30
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 0
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 2
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: LD_INT 0
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 2
22665: NEG
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: LD_INT 3
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 3
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: LD_INT 3
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: NEG
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 3
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22766: LD_ADDR_VAR 0 31
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 0
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: LD_INT 3
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 3
23009: NEG
23010: PUSH
23011: LD_INT 2
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23044: LD_ADDR_VAR 0 32
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 2
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 2
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 2
23221: NEG
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 3
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 3
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 3
23287: NEG
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23322: LD_ADDR_VAR 0 33
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 0
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: LD_INT 1
23395: NEG
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: LD_INT 2
23407: NEG
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: NEG
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: NEG
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 2
23500: NEG
23501: PUSH
23502: LD_INT 2
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 2
23512: NEG
23513: PUSH
23514: LD_INT 3
23516: NEG
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 1
23527: NEG
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 3
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 3
23566: NEG
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23601: LD_ADDR_VAR 0 34
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: LD_INT 2
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: LD_INT 2
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: NEG
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: NEG
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: LD_INT 2
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: LD_INT 3
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 2
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 3
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 3
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: NEG
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: NEG
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23881: LD_ADDR_VAR 0 35
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23993: LD_ADDR_VAR 0 36
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 2
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24105: LD_ADDR_VAR 0 37
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24217: LD_ADDR_VAR 0 38
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24329: LD_ADDR_VAR 0 39
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24441: LD_ADDR_VAR 0 40
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24553: LD_ADDR_VAR 0 41
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: PUSH
24658: LD_INT 0
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: NEG
24732: PUSH
24733: LD_INT 2
24735: NEG
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 2
24743: NEG
24744: PUSH
24745: LD_INT 3
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 3
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 3
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: LD_INT 3
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 2
24816: NEG
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 3
24827: NEG
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 3
24838: NEG
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 3
24850: NEG
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 3
24862: NEG
24863: PUSH
24864: LD_INT 3
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24903: LD_ADDR_VAR 0 42
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: LD_INT 2
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: LD_INT 2
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: NEG
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: LD_INT 2
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: NEG
25094: PUSH
25095: LD_INT 3
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: LD_INT 3
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 3
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 2
25131: NEG
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 3
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 3
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: LD_INT 3
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 3
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 3
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 3
25200: NEG
25201: PUSH
25202: LD_INT 2
25204: NEG
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 3
25212: NEG
25213: PUSH
25214: LD_INT 3
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25253: LD_ADDR_VAR 0 43
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: NEG
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: LD_INT 2
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 3
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 3
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: LD_INT 2
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 3
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 2
25538: NEG
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 3
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 3
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25601: LD_ADDR_VAR 0 44
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 2
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 2
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 2
25767: NEG
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: NEG
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 2
25791: NEG
25792: PUSH
25793: LD_INT 3
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 3
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 3
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 3
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: NEG
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 3
25875: NEG
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 3
25886: NEG
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 3
25898: NEG
25899: PUSH
25900: LD_INT 2
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 3
25910: NEG
25911: PUSH
25912: LD_INT 3
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25951: LD_ADDR_VAR 0 45
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: NEG
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: LD_INT 2
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 0
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 2
26129: NEG
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: NEG
26142: PUSH
26143: LD_INT 3
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 3
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 3
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 3
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: LD_INT 3
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 3
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 3
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 3
26248: NEG
26249: PUSH
26250: LD_INT 2
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 3
26260: NEG
26261: PUSH
26262: LD_INT 3
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26301: LD_ADDR_VAR 0 46
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: NEG
26383: PUSH
26384: LD_INT 2
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: LD_INT 2
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: NEG
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: NEG
26491: PUSH
26492: LD_INT 3
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 3
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 2
26516: NEG
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 3
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: LD_INT 3
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: NEG
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 3
26608: NEG
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26649: LD_ADDR_VAR 0 47
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: LD_INT 2
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: NEG
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: LD_INT 2
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26800: LD_ADDR_VAR 0 48
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 2
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 2
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26947: LD_ADDR_VAR 0 49
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27091: LD_ADDR_VAR 0 50
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27235: LD_ADDR_VAR 0 51
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27382: LD_ADDR_VAR 0 52
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 2
27486: NEG
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: NEG
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27533: LD_ADDR_VAR 0 53
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 2
27732: NEG
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27763: LD_ADDR_VAR 0 54
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: LD_INT 2
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: LD_INT 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: NEG
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: NEG
27963: PUSH
27964: LD_INT 2
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27993: LD_ADDR_VAR 0 55
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 0
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: NEG
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: NEG
28193: PUSH
28194: LD_INT 2
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28223: LD_ADDR_VAR 0 56
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 2
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28453: LD_ADDR_VAR 0 57
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 2
28640: NEG
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: NEG
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28683: LD_ADDR_VAR 0 58
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: LD_INT 2
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 2
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 2
28882: NEG
28883: PUSH
28884: LD_INT 2
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28913: LD_ADDR_VAR 0 59
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29001: LD_ADDR_VAR 0 60
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29089: LD_ADDR_VAR 0 61
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 0
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29177: LD_ADDR_VAR 0 62
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29265: LD_ADDR_VAR 0 63
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29353: LD_ADDR_VAR 0 64
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
// end ; 1 :
29441: GO 35338
29443: LD_INT 1
29445: DOUBLE
29446: EQUAL
29447: IFTRUE 29451
29449: GO 32074
29451: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29452: LD_ADDR_VAR 0 11
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 3
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: LD_INT 3
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29496: LD_ADDR_VAR 0 12
29500: PUSH
29501: LD_INT 2
29503: PUSH
29504: LD_INT 1
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 3
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 3
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29537: LD_ADDR_VAR 0 13
29541: PUSH
29542: LD_INT 3
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29577: LD_ADDR_VAR 0 14
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: LD_INT 3
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29618: LD_ADDR_VAR 0 15
29622: PUSH
29623: LD_INT 2
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: NEG
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29662: LD_ADDR_VAR 0 16
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 3
29681: NEG
29682: PUSH
29683: LD_INT 2
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 3
29693: NEG
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29708: LD_ADDR_VAR 0 17
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: LD_INT 3
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: LD_INT 3
29730: NEG
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29752: LD_ADDR_VAR 0 18
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29793: LD_ADDR_VAR 0 19
29797: PUSH
29798: LD_INT 3
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: LD_INT 3
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 3
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29833: LD_ADDR_VAR 0 20
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29874: LD_ADDR_VAR 0 21
29878: PUSH
29879: LD_INT 2
29881: NEG
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: NEG
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 3
29903: NEG
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29918: LD_ADDR_VAR 0 22
29922: PUSH
29923: LD_INT 2
29925: NEG
29926: PUSH
29927: LD_INT 3
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 3
29937: NEG
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 3
29949: NEG
29950: PUSH
29951: LD_INT 3
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29964: LD_ADDR_VAR 0 23
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 3
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: LD_INT 4
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30008: LD_ADDR_VAR 0 24
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 4
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30049: LD_ADDR_VAR 0 25
30053: PUSH
30054: LD_INT 3
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 4
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 4
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30089: LD_ADDR_VAR 0 26
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 4
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30130: LD_ADDR_VAR 0 27
30134: PUSH
30135: LD_INT 3
30137: NEG
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 4
30159: NEG
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30174: LD_ADDR_VAR 0 28
30178: PUSH
30179: LD_INT 3
30181: NEG
30182: PUSH
30183: LD_INT 3
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 3
30193: NEG
30194: PUSH
30195: LD_INT 4
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 4
30205: NEG
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30220: LD_ADDR_VAR 0 29
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: LD_INT 3
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 3
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 2
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 4
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 4
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 3
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 5
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 5
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: LD_INT 4
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: LD_INT 6
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: LD_INT 6
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 5
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30375: LD_ADDR_VAR 0 30
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: LD_INT 0
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 4
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 4
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 4
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 5
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 5
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 5
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 6
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 6
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30518: LD_ADDR_VAR 0 31
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 3
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 4
30555: PUSH
30556: LD_INT 3
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 3
30575: PUSH
30576: LD_INT 4
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 5
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 5
30595: PUSH
30596: LD_INT 5
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 4
30605: PUSH
30606: LD_INT 5
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 6
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 6
30625: PUSH
30626: LD_INT 6
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 5
30635: PUSH
30636: LD_INT 6
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30657: LD_ADDR_VAR 0 32
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: LD_INT 4
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: LD_INT 4
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: LD_INT 5
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 6
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: LD_INT 6
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30800: LD_ADDR_VAR 0 33
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 3
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 3
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 4
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 4
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 5
30886: NEG
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 5
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 5
30909: NEG
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 6
30920: NEG
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 6
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30955: LD_ADDR_VAR 0 34
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 3
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 3
30974: NEG
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 3
30986: NEG
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: LD_INT 4
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 4
31010: NEG
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 4
31022: NEG
31023: PUSH
31024: LD_INT 4
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 4
31034: NEG
31035: PUSH
31036: LD_INT 5
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 5
31046: NEG
31047: PUSH
31048: LD_INT 4
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 5
31058: NEG
31059: PUSH
31060: LD_INT 5
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 5
31070: NEG
31071: PUSH
31072: LD_INT 6
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 6
31082: NEG
31083: PUSH
31084: LD_INT 5
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 6
31094: NEG
31095: PUSH
31096: LD_INT 6
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31118: LD_ADDR_VAR 0 41
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: LD_INT 3
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31162: LD_ADDR_VAR 0 42
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 3
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: LIST
31202: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31203: LD_ADDR_VAR 0 43
31207: PUSH
31208: LD_INT 2
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31243: LD_ADDR_VAR 0 44
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31284: LD_ADDR_VAR 0 45
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: NEG
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31328: LD_ADDR_VAR 0 46
31332: PUSH
31333: LD_INT 2
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 3
31359: NEG
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31374: LD_ADDR_VAR 0 47
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31407: LD_ADDR_VAR 0 48
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 2
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31438: LD_ADDR_VAR 0 49
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 3
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31467: LD_ADDR_VAR 0 50
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31496: LD_ADDR_VAR 0 51
31500: PUSH
31501: LD_INT 1
31503: NEG
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31527: LD_ADDR_VAR 0 52
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31560: LD_ADDR_VAR 0 53
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: LD_INT 3
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 3
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 2
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31604: LD_ADDR_VAR 0 54
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 3
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31645: LD_ADDR_VAR 0 55
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 3
31662: PUSH
31663: LD_INT 3
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 3
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31685: LD_ADDR_VAR 0 56
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 3
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 3
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31726: LD_ADDR_VAR 0 57
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 3
31744: NEG
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31770: LD_ADDR_VAR 0 58
31774: PUSH
31775: LD_INT 2
31777: NEG
31778: PUSH
31779: LD_INT 3
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 3
31789: NEG
31790: PUSH
31791: LD_INT 2
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 3
31801: NEG
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31816: LD_ADDR_VAR 0 59
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: LD_INT 2
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 2
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31860: LD_ADDR_VAR 0 60
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31901: LD_ADDR_VAR 0 61
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31941: LD_ADDR_VAR 0 62
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: LD_INT 2
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31982: LD_ADDR_VAR 0 63
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32026: LD_ADDR_VAR 0 64
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: NEG
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: ST_TO_ADDR
// end ; 2 :
32072: GO 35338
32074: LD_INT 2
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 35337
32082: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32083: LD_ADDR_VAR 0 29
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 4
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 5
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 3
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 5
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 3
32193: PUSH
32194: LD_INT 2
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 3
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: LD_INT 4
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 4
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 4
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 4
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: LD_INT 3
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 4
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 5
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 4
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 5
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 3
32366: NEG
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 3
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 4
32422: NEG
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 4
32433: NEG
32434: PUSH
32435: LD_INT 1
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 4
32445: NEG
32446: PUSH
32447: LD_INT 2
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 4
32468: NEG
32469: PUSH
32470: LD_INT 4
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 4
32480: NEG
32481: PUSH
32482: LD_INT 5
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 3
32492: NEG
32493: PUSH
32494: LD_INT 4
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 3
32504: NEG
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 4
32516: NEG
32517: PUSH
32518: LD_INT 3
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 5
32528: NEG
32529: PUSH
32530: LD_INT 4
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 5
32540: NEG
32541: PUSH
32542: LD_INT 5
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 3
32552: NEG
32553: PUSH
32554: LD_INT 5
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 5
32564: NEG
32565: PUSH
32566: LD_INT 3
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32621: LD_ADDR_VAR 0 30
32625: PUSH
32626: LD_INT 4
32628: PUSH
32629: LD_INT 4
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 4
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: LD_INT 4
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 5
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 4
32668: PUSH
32669: LD_INT 5
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 5
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: PUSH
32709: LD_INT 5
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 3
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: LD_INT 4
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: LD_INT 4
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 4
32811: NEG
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 4
32822: NEG
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 4
32856: NEG
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 5
32867: NEG
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 5
32878: NEG
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 5
32890: NEG
32891: PUSH
32892: LD_INT 2
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 3
32902: NEG
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 3
32913: NEG
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 3
32925: NEG
32926: PUSH
32927: LD_INT 4
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: LD_INT 3
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 2
32949: NEG
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 4
32973: NEG
32974: PUSH
32975: LD_INT 3
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 4
32985: NEG
32986: PUSH
32987: LD_INT 4
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: NEG
32998: PUSH
32999: LD_INT 4
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 4
33009: NEG
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 4
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: LD_INT 5
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 3
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 3
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 4
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 5
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 3
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: LD_INT 5
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33168: LD_ADDR_VAR 0 31
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 4
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 4
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 5
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 4
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: LD_INT 3
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 3
33268: NEG
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 3
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 4
33324: NEG
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 4
33335: NEG
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 4
33347: NEG
33348: PUSH
33349: LD_INT 2
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 4
33370: NEG
33371: PUSH
33372: LD_INT 4
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 4
33382: NEG
33383: PUSH
33384: LD_INT 5
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 3
33394: NEG
33395: PUSH
33396: LD_INT 4
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 3
33406: NEG
33407: PUSH
33408: LD_INT 3
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 4
33418: NEG
33419: PUSH
33420: LD_INT 3
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 5
33430: NEG
33431: PUSH
33432: LD_INT 4
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 5
33442: NEG
33443: PUSH
33444: LD_INT 5
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 3
33454: NEG
33455: PUSH
33456: LD_INT 5
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 5
33466: NEG
33467: PUSH
33468: LD_INT 3
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 3
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: LD_INT 4
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: LD_INT 3
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: LD_INT 2
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 2
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 1
33533: NEG
33534: PUSH
33535: LD_INT 3
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: PUSH
33547: LD_INT 4
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: LD_INT 4
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 4
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 5
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 5
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 4
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 3
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 3
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 3
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 5
33663: PUSH
33664: LD_INT 2
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33718: LD_ADDR_VAR 0 32
33722: PUSH
33723: LD_INT 4
33725: NEG
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 4
33770: NEG
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 5
33781: NEG
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 5
33792: NEG
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 5
33804: NEG
33805: PUSH
33806: LD_INT 2
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 3
33816: NEG
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 3
33827: NEG
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: NEG
33840: PUSH
33841: LD_INT 4
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: LD_INT 3
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 4
33887: NEG
33888: PUSH
33889: LD_INT 3
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 4
33899: NEG
33900: PUSH
33901: LD_INT 4
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: NEG
33912: PUSH
33913: LD_INT 4
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 4
33923: NEG
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 5
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: LD_INT 4
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: LD_INT 3
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 3
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: LD_INT 4
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: LD_INT 5
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: LD_INT 3
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: LD_INT 5
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 4
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 4
34130: PUSH
34131: LD_INT 4
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 4
34140: PUSH
34141: LD_INT 3
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 5
34150: PUSH
34151: LD_INT 4
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 5
34160: PUSH
34161: LD_INT 5
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 4
34170: PUSH
34171: LD_INT 5
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 4
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 3
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 5
34200: PUSH
34201: LD_INT 3
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 3
34210: PUSH
34211: LD_INT 5
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34265: LD_ADDR_VAR 0 33
34269: PUSH
34270: LD_INT 4
34272: NEG
34273: PUSH
34274: LD_INT 4
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 4
34284: NEG
34285: PUSH
34286: LD_INT 5
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 3
34296: NEG
34297: PUSH
34298: LD_INT 4
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 3
34308: NEG
34309: PUSH
34310: LD_INT 3
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 4
34320: NEG
34321: PUSH
34322: LD_INT 3
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 5
34332: NEG
34333: PUSH
34334: LD_INT 4
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 5
34344: NEG
34345: PUSH
34346: LD_INT 5
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 3
34356: NEG
34357: PUSH
34358: LD_INT 5
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 5
34368: NEG
34369: PUSH
34370: LD_INT 3
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: LD_INT 3
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 4
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 3
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: LD_INT 4
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: LD_INT 4
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 4
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 4
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 5
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 5
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 4
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 2
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 5
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 3
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: LD_INT 3
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: LD_INT 4
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: LD_INT 4
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 4
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 4
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 4
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 5
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 5
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: PUSH
34738: LD_INT 5
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: NEG
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34803: LD_ADDR_VAR 0 34
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 4
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 5
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 4
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 3
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: LD_INT 3
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 4
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: LD_INT 5
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: LD_INT 3
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: NEG
34901: PUSH
34902: LD_INT 5
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 4
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 4
35005: PUSH
35006: LD_INT 4
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 4
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: LD_INT 4
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 5
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 4
35045: PUSH
35046: LD_INT 5
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: LD_INT 4
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 5
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: LD_INT 5
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 3
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 3
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 4
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 4
35188: NEG
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 4
35199: NEG
35200: PUSH
35201: LD_INT 1
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 3
35222: NEG
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 4
35233: NEG
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 5
35244: NEG
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 5
35255: NEG
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 5
35267: NEG
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 3
35279: NEG
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// end ; end ;
35335: GO 35338
35337: POP
// case btype of b_depot , b_warehouse :
35338: LD_VAR 0 1
35342: PUSH
35343: LD_INT 0
35345: DOUBLE
35346: EQUAL
35347: IFTRUE 35357
35349: LD_INT 1
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35357
35355: GO 35558
35357: POP
// case nation of nation_american :
35358: LD_VAR 0 5
35362: PUSH
35363: LD_INT 1
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35427
35371: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35372: LD_ADDR_VAR 0 9
35376: PUSH
35377: LD_VAR 0 11
35381: PUSH
35382: LD_VAR 0 12
35386: PUSH
35387: LD_VAR 0 13
35391: PUSH
35392: LD_VAR 0 14
35396: PUSH
35397: LD_VAR 0 15
35401: PUSH
35402: LD_VAR 0 16
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: PUSH
35415: LD_VAR 0 4
35419: PUSH
35420: LD_INT 1
35422: PLUS
35423: ARRAY
35424: ST_TO_ADDR
35425: GO 35556
35427: LD_INT 2
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35491
35435: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35436: LD_ADDR_VAR 0 9
35440: PUSH
35441: LD_VAR 0 17
35445: PUSH
35446: LD_VAR 0 18
35450: PUSH
35451: LD_VAR 0 19
35455: PUSH
35456: LD_VAR 0 20
35460: PUSH
35461: LD_VAR 0 21
35465: PUSH
35466: LD_VAR 0 22
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: PUSH
35479: LD_VAR 0 4
35483: PUSH
35484: LD_INT 1
35486: PLUS
35487: ARRAY
35488: ST_TO_ADDR
35489: GO 35556
35491: LD_INT 3
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35555
35499: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35500: LD_ADDR_VAR 0 9
35504: PUSH
35505: LD_VAR 0 23
35509: PUSH
35510: LD_VAR 0 24
35514: PUSH
35515: LD_VAR 0 25
35519: PUSH
35520: LD_VAR 0 26
35524: PUSH
35525: LD_VAR 0 27
35529: PUSH
35530: LD_VAR 0 28
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: PUSH
35543: LD_VAR 0 4
35547: PUSH
35548: LD_INT 1
35550: PLUS
35551: ARRAY
35552: ST_TO_ADDR
35553: GO 35556
35555: POP
35556: GO 36111
35558: LD_INT 2
35560: DOUBLE
35561: EQUAL
35562: IFTRUE 35572
35564: LD_INT 3
35566: DOUBLE
35567: EQUAL
35568: IFTRUE 35572
35570: GO 35628
35572: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35573: LD_ADDR_VAR 0 9
35577: PUSH
35578: LD_VAR 0 29
35582: PUSH
35583: LD_VAR 0 30
35587: PUSH
35588: LD_VAR 0 31
35592: PUSH
35593: LD_VAR 0 32
35597: PUSH
35598: LD_VAR 0 33
35602: PUSH
35603: LD_VAR 0 34
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: PUSH
35616: LD_VAR 0 4
35620: PUSH
35621: LD_INT 1
35623: PLUS
35624: ARRAY
35625: ST_TO_ADDR
35626: GO 36111
35628: LD_INT 16
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35690
35634: LD_INT 17
35636: DOUBLE
35637: EQUAL
35638: IFTRUE 35690
35640: LD_INT 18
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35690
35646: LD_INT 19
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35690
35652: LD_INT 22
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35690
35658: LD_INT 20
35660: DOUBLE
35661: EQUAL
35662: IFTRUE 35690
35664: LD_INT 21
35666: DOUBLE
35667: EQUAL
35668: IFTRUE 35690
35670: LD_INT 23
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35690
35676: LD_INT 24
35678: DOUBLE
35679: EQUAL
35680: IFTRUE 35690
35682: LD_INT 25
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35746
35690: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35691: LD_ADDR_VAR 0 9
35695: PUSH
35696: LD_VAR 0 35
35700: PUSH
35701: LD_VAR 0 36
35705: PUSH
35706: LD_VAR 0 37
35710: PUSH
35711: LD_VAR 0 38
35715: PUSH
35716: LD_VAR 0 39
35720: PUSH
35721: LD_VAR 0 40
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: PUSH
35734: LD_VAR 0 4
35738: PUSH
35739: LD_INT 1
35741: PLUS
35742: ARRAY
35743: ST_TO_ADDR
35744: GO 36111
35746: LD_INT 6
35748: DOUBLE
35749: EQUAL
35750: IFTRUE 35802
35752: LD_INT 7
35754: DOUBLE
35755: EQUAL
35756: IFTRUE 35802
35758: LD_INT 8
35760: DOUBLE
35761: EQUAL
35762: IFTRUE 35802
35764: LD_INT 13
35766: DOUBLE
35767: EQUAL
35768: IFTRUE 35802
35770: LD_INT 12
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35802
35776: LD_INT 15
35778: DOUBLE
35779: EQUAL
35780: IFTRUE 35802
35782: LD_INT 11
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35802
35788: LD_INT 14
35790: DOUBLE
35791: EQUAL
35792: IFTRUE 35802
35794: LD_INT 10
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35802
35800: GO 35858
35802: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35803: LD_ADDR_VAR 0 9
35807: PUSH
35808: LD_VAR 0 41
35812: PUSH
35813: LD_VAR 0 42
35817: PUSH
35818: LD_VAR 0 43
35822: PUSH
35823: LD_VAR 0 44
35827: PUSH
35828: LD_VAR 0 45
35832: PUSH
35833: LD_VAR 0 46
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: LD_VAR 0 4
35850: PUSH
35851: LD_INT 1
35853: PLUS
35854: ARRAY
35855: ST_TO_ADDR
35856: GO 36111
35858: LD_INT 36
35860: DOUBLE
35861: EQUAL
35862: IFTRUE 35866
35864: GO 35922
35866: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35867: LD_ADDR_VAR 0 9
35871: PUSH
35872: LD_VAR 0 47
35876: PUSH
35877: LD_VAR 0 48
35881: PUSH
35882: LD_VAR 0 49
35886: PUSH
35887: LD_VAR 0 50
35891: PUSH
35892: LD_VAR 0 51
35896: PUSH
35897: LD_VAR 0 52
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: PUSH
35910: LD_VAR 0 4
35914: PUSH
35915: LD_INT 1
35917: PLUS
35918: ARRAY
35919: ST_TO_ADDR
35920: GO 36111
35922: LD_INT 4
35924: DOUBLE
35925: EQUAL
35926: IFTRUE 35948
35928: LD_INT 5
35930: DOUBLE
35931: EQUAL
35932: IFTRUE 35948
35934: LD_INT 34
35936: DOUBLE
35937: EQUAL
35938: IFTRUE 35948
35940: LD_INT 37
35942: DOUBLE
35943: EQUAL
35944: IFTRUE 35948
35946: GO 36004
35948: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35949: LD_ADDR_VAR 0 9
35953: PUSH
35954: LD_VAR 0 53
35958: PUSH
35959: LD_VAR 0 54
35963: PUSH
35964: LD_VAR 0 55
35968: PUSH
35969: LD_VAR 0 56
35973: PUSH
35974: LD_VAR 0 57
35978: PUSH
35979: LD_VAR 0 58
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: PUSH
35992: LD_VAR 0 4
35996: PUSH
35997: LD_INT 1
35999: PLUS
36000: ARRAY
36001: ST_TO_ADDR
36002: GO 36111
36004: LD_INT 31
36006: DOUBLE
36007: EQUAL
36008: IFTRUE 36054
36010: LD_INT 32
36012: DOUBLE
36013: EQUAL
36014: IFTRUE 36054
36016: LD_INT 33
36018: DOUBLE
36019: EQUAL
36020: IFTRUE 36054
36022: LD_INT 27
36024: DOUBLE
36025: EQUAL
36026: IFTRUE 36054
36028: LD_INT 26
36030: DOUBLE
36031: EQUAL
36032: IFTRUE 36054
36034: LD_INT 28
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36054
36040: LD_INT 29
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36054
36046: LD_INT 30
36048: DOUBLE
36049: EQUAL
36050: IFTRUE 36054
36052: GO 36110
36054: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36055: LD_ADDR_VAR 0 9
36059: PUSH
36060: LD_VAR 0 59
36064: PUSH
36065: LD_VAR 0 60
36069: PUSH
36070: LD_VAR 0 61
36074: PUSH
36075: LD_VAR 0 62
36079: PUSH
36080: LD_VAR 0 63
36084: PUSH
36085: LD_VAR 0 64
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: PUSH
36098: LD_VAR 0 4
36102: PUSH
36103: LD_INT 1
36105: PLUS
36106: ARRAY
36107: ST_TO_ADDR
36108: GO 36111
36110: POP
// temp_list2 = [ ] ;
36111: LD_ADDR_VAR 0 10
36115: PUSH
36116: EMPTY
36117: ST_TO_ADDR
// for i in temp_list do
36118: LD_ADDR_VAR 0 8
36122: PUSH
36123: LD_VAR 0 9
36127: PUSH
36128: FOR_IN
36129: IFFALSE 36181
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36131: LD_ADDR_VAR 0 10
36135: PUSH
36136: LD_VAR 0 10
36140: PUSH
36141: LD_VAR 0 8
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: PUSH
36150: LD_VAR 0 2
36154: PLUS
36155: PUSH
36156: LD_VAR 0 8
36160: PUSH
36161: LD_INT 2
36163: ARRAY
36164: PUSH
36165: LD_VAR 0 3
36169: PLUS
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: ADD
36178: ST_TO_ADDR
36179: GO 36128
36181: POP
36182: POP
// result = temp_list2 ;
36183: LD_ADDR_VAR 0 7
36187: PUSH
36188: LD_VAR 0 10
36192: ST_TO_ADDR
// end ;
36193: LD_VAR 0 7
36197: RET
// export function EnemyInRange ( unit , dist ) ; begin
36198: LD_INT 0
36200: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36201: LD_ADDR_VAR 0 3
36205: PUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 255
36215: PPUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 250
36225: PPUSH
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 251
36235: PPUSH
36236: LD_VAR 0 2
36240: PPUSH
36241: CALL 10302 0 4
36245: PUSH
36246: LD_INT 4
36248: ARRAY
36249: ST_TO_ADDR
// end ;
36250: LD_VAR 0 3
36254: RET
// export function PlayerSeeMe ( unit ) ; begin
36255: LD_INT 0
36257: PPUSH
// result := See ( your_side , unit ) ;
36258: LD_ADDR_VAR 0 2
36262: PUSH
36263: LD_OWVAR 2
36267: PPUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 292
36277: ST_TO_ADDR
// end ;
36278: LD_VAR 0 2
36282: RET
// export function ReverseDir ( unit ) ; begin
36283: LD_INT 0
36285: PPUSH
// if not unit then
36286: LD_VAR 0 1
36290: NOT
36291: IFFALSE 36295
// exit ;
36293: GO 36318
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36295: LD_ADDR_VAR 0 2
36299: PUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 254
36309: PUSH
36310: LD_INT 3
36312: PLUS
36313: PUSH
36314: LD_INT 6
36316: MOD
36317: ST_TO_ADDR
// end ;
36318: LD_VAR 0 2
36322: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36323: LD_INT 0
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
// if not hexes then
36330: LD_VAR 0 2
36334: NOT
36335: IFFALSE 36339
// exit ;
36337: GO 36487
// dist := 9999 ;
36339: LD_ADDR_VAR 0 5
36343: PUSH
36344: LD_INT 9999
36346: ST_TO_ADDR
// for i = 1 to hexes do
36347: LD_ADDR_VAR 0 4
36351: PUSH
36352: DOUBLE
36353: LD_INT 1
36355: DEC
36356: ST_TO_ADDR
36357: LD_VAR 0 2
36361: PUSH
36362: FOR_TO
36363: IFFALSE 36475
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36365: LD_VAR 0 1
36369: PPUSH
36370: LD_VAR 0 2
36374: PUSH
36375: LD_VAR 0 4
36379: ARRAY
36380: PUSH
36381: LD_INT 1
36383: ARRAY
36384: PPUSH
36385: LD_VAR 0 2
36389: PUSH
36390: LD_VAR 0 4
36394: ARRAY
36395: PUSH
36396: LD_INT 2
36398: ARRAY
36399: PPUSH
36400: CALL_OW 297
36404: PUSH
36405: LD_VAR 0 5
36409: LESS
36410: IFFALSE 36473
// begin hex := hexes [ i ] ;
36412: LD_ADDR_VAR 0 7
36416: PUSH
36417: LD_VAR 0 2
36421: PUSH
36422: LD_VAR 0 4
36426: ARRAY
36427: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36428: LD_ADDR_VAR 0 5
36432: PUSH
36433: LD_VAR 0 1
36437: PPUSH
36438: LD_VAR 0 2
36442: PUSH
36443: LD_VAR 0 4
36447: ARRAY
36448: PUSH
36449: LD_INT 1
36451: ARRAY
36452: PPUSH
36453: LD_VAR 0 2
36457: PUSH
36458: LD_VAR 0 4
36462: ARRAY
36463: PUSH
36464: LD_INT 2
36466: ARRAY
36467: PPUSH
36468: CALL_OW 297
36472: ST_TO_ADDR
// end ; end ;
36473: GO 36362
36475: POP
36476: POP
// result := hex ;
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_VAR 0 7
36486: ST_TO_ADDR
// end ;
36487: LD_VAR 0 3
36491: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36492: LD_INT 0
36494: PPUSH
36495: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36496: LD_VAR 0 1
36500: NOT
36501: PUSH
36502: LD_VAR 0 1
36506: PUSH
36507: LD_INT 21
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 23
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PPUSH
36531: CALL_OW 69
36535: IN
36536: NOT
36537: OR
36538: IFFALSE 36542
// exit ;
36540: GO 36589
// for i = 1 to 3 do
36542: LD_ADDR_VAR 0 3
36546: PUSH
36547: DOUBLE
36548: LD_INT 1
36550: DEC
36551: ST_TO_ADDR
36552: LD_INT 3
36554: PUSH
36555: FOR_TO
36556: IFFALSE 36587
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 250
36567: PPUSH
36568: LD_VAR 0 1
36572: PPUSH
36573: CALL_OW 251
36577: PPUSH
36578: LD_INT 1
36580: PPUSH
36581: CALL_OW 453
36585: GO 36555
36587: POP
36588: POP
// end ;
36589: LD_VAR 0 2
36593: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36594: LD_INT 0
36596: PPUSH
36597: PPUSH
36598: PPUSH
36599: PPUSH
36600: PPUSH
36601: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36602: LD_VAR 0 1
36606: NOT
36607: PUSH
36608: LD_VAR 0 2
36612: NOT
36613: OR
36614: PUSH
36615: LD_VAR 0 1
36619: PPUSH
36620: CALL_OW 314
36624: OR
36625: IFFALSE 36629
// exit ;
36627: GO 37070
// x := GetX ( enemy_unit ) ;
36629: LD_ADDR_VAR 0 7
36633: PUSH
36634: LD_VAR 0 2
36638: PPUSH
36639: CALL_OW 250
36643: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36644: LD_ADDR_VAR 0 8
36648: PUSH
36649: LD_VAR 0 2
36653: PPUSH
36654: CALL_OW 251
36658: ST_TO_ADDR
// if not x or not y then
36659: LD_VAR 0 7
36663: NOT
36664: PUSH
36665: LD_VAR 0 8
36669: NOT
36670: OR
36671: IFFALSE 36675
// exit ;
36673: GO 37070
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36675: LD_ADDR_VAR 0 6
36679: PUSH
36680: LD_VAR 0 7
36684: PPUSH
36685: LD_INT 0
36687: PPUSH
36688: LD_INT 4
36690: PPUSH
36691: CALL_OW 272
36695: PUSH
36696: LD_VAR 0 8
36700: PPUSH
36701: LD_INT 0
36703: PPUSH
36704: LD_INT 4
36706: PPUSH
36707: CALL_OW 273
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_VAR 0 7
36720: PPUSH
36721: LD_INT 1
36723: PPUSH
36724: LD_INT 4
36726: PPUSH
36727: CALL_OW 272
36731: PUSH
36732: LD_VAR 0 8
36736: PPUSH
36737: LD_INT 1
36739: PPUSH
36740: LD_INT 4
36742: PPUSH
36743: CALL_OW 273
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_VAR 0 7
36756: PPUSH
36757: LD_INT 2
36759: PPUSH
36760: LD_INT 4
36762: PPUSH
36763: CALL_OW 272
36767: PUSH
36768: LD_VAR 0 8
36772: PPUSH
36773: LD_INT 2
36775: PPUSH
36776: LD_INT 4
36778: PPUSH
36779: CALL_OW 273
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_VAR 0 7
36792: PPUSH
36793: LD_INT 3
36795: PPUSH
36796: LD_INT 4
36798: PPUSH
36799: CALL_OW 272
36803: PUSH
36804: LD_VAR 0 8
36808: PPUSH
36809: LD_INT 3
36811: PPUSH
36812: LD_INT 4
36814: PPUSH
36815: CALL_OW 273
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_VAR 0 7
36828: PPUSH
36829: LD_INT 4
36831: PPUSH
36832: LD_INT 4
36834: PPUSH
36835: CALL_OW 272
36839: PUSH
36840: LD_VAR 0 8
36844: PPUSH
36845: LD_INT 4
36847: PPUSH
36848: LD_INT 4
36850: PPUSH
36851: CALL_OW 273
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_VAR 0 7
36864: PPUSH
36865: LD_INT 5
36867: PPUSH
36868: LD_INT 4
36870: PPUSH
36871: CALL_OW 272
36875: PUSH
36876: LD_VAR 0 8
36880: PPUSH
36881: LD_INT 5
36883: PPUSH
36884: LD_INT 4
36886: PPUSH
36887: CALL_OW 273
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// for i = tmp downto 1 do
36904: LD_ADDR_VAR 0 4
36908: PUSH
36909: DOUBLE
36910: LD_VAR 0 6
36914: INC
36915: ST_TO_ADDR
36916: LD_INT 1
36918: PUSH
36919: FOR_DOWNTO
36920: IFFALSE 37021
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36922: LD_VAR 0 6
36926: PUSH
36927: LD_VAR 0 4
36931: ARRAY
36932: PUSH
36933: LD_INT 1
36935: ARRAY
36936: PPUSH
36937: LD_VAR 0 6
36941: PUSH
36942: LD_VAR 0 4
36946: ARRAY
36947: PUSH
36948: LD_INT 2
36950: ARRAY
36951: PPUSH
36952: CALL_OW 488
36956: NOT
36957: PUSH
36958: LD_VAR 0 6
36962: PUSH
36963: LD_VAR 0 4
36967: ARRAY
36968: PUSH
36969: LD_INT 1
36971: ARRAY
36972: PPUSH
36973: LD_VAR 0 6
36977: PUSH
36978: LD_VAR 0 4
36982: ARRAY
36983: PUSH
36984: LD_INT 2
36986: ARRAY
36987: PPUSH
36988: CALL_OW 428
36992: PUSH
36993: LD_INT 0
36995: NONEQUAL
36996: OR
36997: IFFALSE 37019
// tmp := Delete ( tmp , i ) ;
36999: LD_ADDR_VAR 0 6
37003: PUSH
37004: LD_VAR 0 6
37008: PPUSH
37009: LD_VAR 0 4
37013: PPUSH
37014: CALL_OW 3
37018: ST_TO_ADDR
37019: GO 36919
37021: POP
37022: POP
// j := GetClosestHex ( unit , tmp ) ;
37023: LD_ADDR_VAR 0 5
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: LD_VAR 0 6
37037: PPUSH
37038: CALL 36323 0 2
37042: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37043: LD_VAR 0 1
37047: PPUSH
37048: LD_VAR 0 5
37052: PUSH
37053: LD_INT 1
37055: ARRAY
37056: PPUSH
37057: LD_VAR 0 5
37061: PUSH
37062: LD_INT 2
37064: ARRAY
37065: PPUSH
37066: CALL_OW 111
// end ;
37070: LD_VAR 0 3
37074: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37075: LD_INT 0
37077: PPUSH
37078: PPUSH
37079: PPUSH
// uc_side = 0 ;
37080: LD_ADDR_OWVAR 20
37084: PUSH
37085: LD_INT 0
37087: ST_TO_ADDR
// uc_nation = 0 ;
37088: LD_ADDR_OWVAR 21
37092: PUSH
37093: LD_INT 0
37095: ST_TO_ADDR
// InitHc_All ( ) ;
37096: CALL_OW 584
// InitVc ;
37100: CALL_OW 20
// if mastodonts then
37104: LD_VAR 0 6
37108: IFFALSE 37175
// for i = 1 to mastodonts do
37110: LD_ADDR_VAR 0 11
37114: PUSH
37115: DOUBLE
37116: LD_INT 1
37118: DEC
37119: ST_TO_ADDR
37120: LD_VAR 0 6
37124: PUSH
37125: FOR_TO
37126: IFFALSE 37173
// begin vc_chassis := 31 ;
37128: LD_ADDR_OWVAR 37
37132: PUSH
37133: LD_INT 31
37135: ST_TO_ADDR
// vc_control := control_rider ;
37136: LD_ADDR_OWVAR 38
37140: PUSH
37141: LD_INT 4
37143: ST_TO_ADDR
// animal := CreateVehicle ;
37144: LD_ADDR_VAR 0 12
37148: PUSH
37149: CALL_OW 45
37153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37154: LD_VAR 0 12
37158: PPUSH
37159: LD_VAR 0 8
37163: PPUSH
37164: LD_INT 0
37166: PPUSH
37167: CALL 39363 0 3
// end ;
37171: GO 37125
37173: POP
37174: POP
// if horses then
37175: LD_VAR 0 5
37179: IFFALSE 37246
// for i = 1 to horses do
37181: LD_ADDR_VAR 0 11
37185: PUSH
37186: DOUBLE
37187: LD_INT 1
37189: DEC
37190: ST_TO_ADDR
37191: LD_VAR 0 5
37195: PUSH
37196: FOR_TO
37197: IFFALSE 37244
// begin hc_class := 21 ;
37199: LD_ADDR_OWVAR 28
37203: PUSH
37204: LD_INT 21
37206: ST_TO_ADDR
// hc_gallery :=  ;
37207: LD_ADDR_OWVAR 33
37211: PUSH
37212: LD_STRING 
37214: ST_TO_ADDR
// animal := CreateHuman ;
37215: LD_ADDR_VAR 0 12
37219: PUSH
37220: CALL_OW 44
37224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37225: LD_VAR 0 12
37229: PPUSH
37230: LD_VAR 0 8
37234: PPUSH
37235: LD_INT 0
37237: PPUSH
37238: CALL 39363 0 3
// end ;
37242: GO 37196
37244: POP
37245: POP
// if birds then
37246: LD_VAR 0 1
37250: IFFALSE 37317
// for i = 1 to birds do
37252: LD_ADDR_VAR 0 11
37256: PUSH
37257: DOUBLE
37258: LD_INT 1
37260: DEC
37261: ST_TO_ADDR
37262: LD_VAR 0 1
37266: PUSH
37267: FOR_TO
37268: IFFALSE 37315
// begin hc_class = 18 ;
37270: LD_ADDR_OWVAR 28
37274: PUSH
37275: LD_INT 18
37277: ST_TO_ADDR
// hc_gallery =  ;
37278: LD_ADDR_OWVAR 33
37282: PUSH
37283: LD_STRING 
37285: ST_TO_ADDR
// animal := CreateHuman ;
37286: LD_ADDR_VAR 0 12
37290: PUSH
37291: CALL_OW 44
37295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37296: LD_VAR 0 12
37300: PPUSH
37301: LD_VAR 0 8
37305: PPUSH
37306: LD_INT 0
37308: PPUSH
37309: CALL 39363 0 3
// end ;
37313: GO 37267
37315: POP
37316: POP
// if tigers then
37317: LD_VAR 0 2
37321: IFFALSE 37405
// for i = 1 to tigers do
37323: LD_ADDR_VAR 0 11
37327: PUSH
37328: DOUBLE
37329: LD_INT 1
37331: DEC
37332: ST_TO_ADDR
37333: LD_VAR 0 2
37337: PUSH
37338: FOR_TO
37339: IFFALSE 37403
// begin hc_class = class_tiger ;
37341: LD_ADDR_OWVAR 28
37345: PUSH
37346: LD_INT 14
37348: ST_TO_ADDR
// hc_gallery =  ;
37349: LD_ADDR_OWVAR 33
37353: PUSH
37354: LD_STRING 
37356: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37357: LD_ADDR_OWVAR 35
37361: PUSH
37362: LD_INT 7
37364: NEG
37365: PPUSH
37366: LD_INT 7
37368: PPUSH
37369: CALL_OW 12
37373: ST_TO_ADDR
// animal := CreateHuman ;
37374: LD_ADDR_VAR 0 12
37378: PUSH
37379: CALL_OW 44
37383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37384: LD_VAR 0 12
37388: PPUSH
37389: LD_VAR 0 8
37393: PPUSH
37394: LD_INT 0
37396: PPUSH
37397: CALL 39363 0 3
// end ;
37401: GO 37338
37403: POP
37404: POP
// if apemans then
37405: LD_VAR 0 3
37409: IFFALSE 37532
// for i = 1 to apemans do
37411: LD_ADDR_VAR 0 11
37415: PUSH
37416: DOUBLE
37417: LD_INT 1
37419: DEC
37420: ST_TO_ADDR
37421: LD_VAR 0 3
37425: PUSH
37426: FOR_TO
37427: IFFALSE 37530
// begin hc_class = class_apeman ;
37429: LD_ADDR_OWVAR 28
37433: PUSH
37434: LD_INT 12
37436: ST_TO_ADDR
// hc_gallery =  ;
37437: LD_ADDR_OWVAR 33
37441: PUSH
37442: LD_STRING 
37444: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
37445: LD_ADDR_OWVAR 35
37449: PUSH
37450: LD_INT 5
37452: NEG
37453: PPUSH
37454: LD_INT 5
37456: PPUSH
37457: CALL_OW 12
37461: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37462: LD_ADDR_OWVAR 31
37466: PUSH
37467: LD_INT 1
37469: PPUSH
37470: LD_INT 3
37472: PPUSH
37473: CALL_OW 12
37477: PUSH
37478: LD_INT 1
37480: PPUSH
37481: LD_INT 3
37483: PPUSH
37484: CALL_OW 12
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: ST_TO_ADDR
// animal := CreateHuman ;
37501: LD_ADDR_VAR 0 12
37505: PUSH
37506: CALL_OW 44
37510: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37511: LD_VAR 0 12
37515: PPUSH
37516: LD_VAR 0 8
37520: PPUSH
37521: LD_INT 0
37523: PPUSH
37524: CALL 39363 0 3
// end ;
37528: GO 37426
37530: POP
37531: POP
// if enchidnas then
37532: LD_VAR 0 4
37536: IFFALSE 37603
// for i = 1 to enchidnas do
37538: LD_ADDR_VAR 0 11
37542: PUSH
37543: DOUBLE
37544: LD_INT 1
37546: DEC
37547: ST_TO_ADDR
37548: LD_VAR 0 4
37552: PUSH
37553: FOR_TO
37554: IFFALSE 37601
// begin hc_class = 13 ;
37556: LD_ADDR_OWVAR 28
37560: PUSH
37561: LD_INT 13
37563: ST_TO_ADDR
// hc_gallery =  ;
37564: LD_ADDR_OWVAR 33
37568: PUSH
37569: LD_STRING 
37571: ST_TO_ADDR
// animal := CreateHuman ;
37572: LD_ADDR_VAR 0 12
37576: PUSH
37577: CALL_OW 44
37581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37582: LD_VAR 0 12
37586: PPUSH
37587: LD_VAR 0 8
37591: PPUSH
37592: LD_INT 0
37594: PPUSH
37595: CALL 39363 0 3
// end ;
37599: GO 37553
37601: POP
37602: POP
// if fishes then
37603: LD_VAR 0 7
37607: IFFALSE 37674
// for i = 1 to fishes do
37609: LD_ADDR_VAR 0 11
37613: PUSH
37614: DOUBLE
37615: LD_INT 1
37617: DEC
37618: ST_TO_ADDR
37619: LD_VAR 0 7
37623: PUSH
37624: FOR_TO
37625: IFFALSE 37672
// begin hc_class = 20 ;
37627: LD_ADDR_OWVAR 28
37631: PUSH
37632: LD_INT 20
37634: ST_TO_ADDR
// hc_gallery =  ;
37635: LD_ADDR_OWVAR 33
37639: PUSH
37640: LD_STRING 
37642: ST_TO_ADDR
// animal := CreateHuman ;
37643: LD_ADDR_VAR 0 12
37647: PUSH
37648: CALL_OW 44
37652: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37653: LD_VAR 0 12
37657: PPUSH
37658: LD_VAR 0 9
37662: PPUSH
37663: LD_INT 0
37665: PPUSH
37666: CALL 39363 0 3
// end ;
37670: GO 37624
37672: POP
37673: POP
// end ;
37674: LD_VAR 0 10
37678: RET
// export function WantHeal ( sci , unit ) ; begin
37679: LD_INT 0
37681: PPUSH
// if GetTaskList ( sci ) > 0 then
37682: LD_VAR 0 1
37686: PPUSH
37687: CALL_OW 437
37691: PUSH
37692: LD_INT 0
37694: GREATER
37695: IFFALSE 37765
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37697: LD_VAR 0 1
37701: PPUSH
37702: CALL_OW 437
37706: PUSH
37707: LD_INT 1
37709: ARRAY
37710: PUSH
37711: LD_INT 1
37713: ARRAY
37714: PUSH
37715: LD_STRING l
37717: EQUAL
37718: PUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: CALL_OW 437
37728: PUSH
37729: LD_INT 1
37731: ARRAY
37732: PUSH
37733: LD_INT 4
37735: ARRAY
37736: PUSH
37737: LD_VAR 0 2
37741: EQUAL
37742: AND
37743: IFFALSE 37755
// result := true else
37745: LD_ADDR_VAR 0 3
37749: PUSH
37750: LD_INT 1
37752: ST_TO_ADDR
37753: GO 37763
// result := false ;
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 0
37762: ST_TO_ADDR
// end else
37763: GO 37773
// result := false ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_INT 0
37772: ST_TO_ADDR
// end ;
37773: LD_VAR 0 3
37777: RET
// export function HealTarget ( sci ) ; begin
37778: LD_INT 0
37780: PPUSH
// if not sci then
37781: LD_VAR 0 1
37785: NOT
37786: IFFALSE 37790
// exit ;
37788: GO 37855
// result := 0 ;
37790: LD_ADDR_VAR 0 2
37794: PUSH
37795: LD_INT 0
37797: ST_TO_ADDR
// if GetTaskList ( sci ) then
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 437
37807: IFFALSE 37855
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 437
37818: PUSH
37819: LD_INT 1
37821: ARRAY
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PUSH
37827: LD_STRING l
37829: EQUAL
37830: IFFALSE 37855
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37832: LD_ADDR_VAR 0 2
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: CALL_OW 437
37846: PUSH
37847: LD_INT 1
37849: ARRAY
37850: PUSH
37851: LD_INT 4
37853: ARRAY
37854: ST_TO_ADDR
// end ;
37855: LD_VAR 0 2
37859: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37860: LD_INT 0
37862: PPUSH
37863: PPUSH
37864: PPUSH
37865: PPUSH
// if not base_units then
37866: LD_VAR 0 1
37870: NOT
37871: IFFALSE 37875
// exit ;
37873: GO 37962
// result := false ;
37875: LD_ADDR_VAR 0 2
37879: PUSH
37880: LD_INT 0
37882: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37883: LD_ADDR_VAR 0 5
37887: PUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: LD_INT 21
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PPUSH
37903: CALL_OW 72
37907: ST_TO_ADDR
// if not tmp then
37908: LD_VAR 0 5
37912: NOT
37913: IFFALSE 37917
// exit ;
37915: GO 37962
// for i in tmp do
37917: LD_ADDR_VAR 0 3
37921: PUSH
37922: LD_VAR 0 5
37926: PUSH
37927: FOR_IN
37928: IFFALSE 37960
// begin result := EnemyInRange ( i , 22 ) ;
37930: LD_ADDR_VAR 0 2
37934: PUSH
37935: LD_VAR 0 3
37939: PPUSH
37940: LD_INT 22
37942: PPUSH
37943: CALL 36198 0 2
37947: ST_TO_ADDR
// if result then
37948: LD_VAR 0 2
37952: IFFALSE 37958
// exit ;
37954: POP
37955: POP
37956: GO 37962
// end ;
37958: GO 37927
37960: POP
37961: POP
// end ;
37962: LD_VAR 0 2
37966: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
37967: LD_INT 0
37969: PPUSH
37970: PPUSH
// if not units then
37971: LD_VAR 0 1
37975: NOT
37976: IFFALSE 37980
// exit ;
37978: GO 38050
// result := [ ] ;
37980: LD_ADDR_VAR 0 3
37984: PUSH
37985: EMPTY
37986: ST_TO_ADDR
// for i in units do
37987: LD_ADDR_VAR 0 4
37991: PUSH
37992: LD_VAR 0 1
37996: PUSH
37997: FOR_IN
37998: IFFALSE 38048
// if GetTag ( i ) = tag then
38000: LD_VAR 0 4
38004: PPUSH
38005: CALL_OW 110
38009: PUSH
38010: LD_VAR 0 2
38014: EQUAL
38015: IFFALSE 38046
// result := Insert ( result , result + 1 , i ) ;
38017: LD_ADDR_VAR 0 3
38021: PUSH
38022: LD_VAR 0 3
38026: PPUSH
38027: LD_VAR 0 3
38031: PUSH
38032: LD_INT 1
38034: PLUS
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: CALL_OW 2
38045: ST_TO_ADDR
38046: GO 37997
38048: POP
38049: POP
// end ;
38050: LD_VAR 0 3
38054: RET
// export function IsDriver ( un ) ; begin
38055: LD_INT 0
38057: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38058: LD_ADDR_VAR 0 2
38062: PUSH
38063: LD_VAR 0 1
38067: PUSH
38068: LD_INT 55
38070: PUSH
38071: EMPTY
38072: LIST
38073: PPUSH
38074: CALL_OW 69
38078: IN
38079: ST_TO_ADDR
// end ;
38080: LD_VAR 0 2
38084: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38085: LD_INT 0
38087: PPUSH
38088: PPUSH
// list := [ ] ;
38089: LD_ADDR_VAR 0 5
38093: PUSH
38094: EMPTY
38095: ST_TO_ADDR
// case d of 0 :
38096: LD_VAR 0 3
38100: PUSH
38101: LD_INT 0
38103: DOUBLE
38104: EQUAL
38105: IFTRUE 38109
38107: GO 38242
38109: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38110: LD_ADDR_VAR 0 5
38114: PUSH
38115: LD_VAR 0 1
38119: PUSH
38120: LD_INT 4
38122: MINUS
38123: PUSH
38124: LD_VAR 0 2
38128: PUSH
38129: LD_INT 4
38131: MINUS
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PUSH
38141: LD_VAR 0 1
38145: PUSH
38146: LD_INT 3
38148: MINUS
38149: PUSH
38150: LD_VAR 0 2
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: LD_VAR 0 1
38167: PUSH
38168: LD_INT 4
38170: PLUS
38171: PUSH
38172: LD_VAR 0 2
38176: PUSH
38177: LD_INT 4
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: PUSH
38185: LD_VAR 0 1
38189: PUSH
38190: LD_INT 3
38192: PLUS
38193: PUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_INT 3
38201: PLUS
38202: PUSH
38203: LD_INT 5
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: LD_VAR 0 1
38215: PUSH
38216: LD_VAR 0 2
38220: PUSH
38221: LD_INT 4
38223: PLUS
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// end ; 1 :
38240: GO 38940
38242: LD_INT 1
38244: DOUBLE
38245: EQUAL
38246: IFTRUE 38250
38248: GO 38383
38250: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38251: LD_ADDR_VAR 0 5
38255: PUSH
38256: LD_VAR 0 1
38260: PUSH
38261: LD_VAR 0 2
38265: PUSH
38266: LD_INT 4
38268: MINUS
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: PUSH
38278: LD_VAR 0 1
38282: PUSH
38283: LD_INT 3
38285: MINUS
38286: PUSH
38287: LD_VAR 0 2
38291: PUSH
38292: LD_INT 3
38294: MINUS
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: PUSH
38304: LD_VAR 0 1
38308: PUSH
38309: LD_INT 4
38311: MINUS
38312: PUSH
38313: LD_VAR 0 2
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: PUSH
38326: LD_VAR 0 1
38330: PUSH
38331: LD_VAR 0 2
38335: PUSH
38336: LD_INT 3
38338: PLUS
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: PUSH
38348: LD_VAR 0 1
38352: PUSH
38353: LD_INT 4
38355: PLUS
38356: PUSH
38357: LD_VAR 0 2
38361: PUSH
38362: LD_INT 4
38364: PLUS
38365: PUSH
38366: LD_INT 5
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// end ; 2 :
38381: GO 38940
38383: LD_INT 2
38385: DOUBLE
38386: EQUAL
38387: IFTRUE 38391
38389: GO 38520
38391: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38392: LD_ADDR_VAR 0 5
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_VAR 0 2
38406: PUSH
38407: LD_INT 3
38409: MINUS
38410: PUSH
38411: LD_INT 3
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: PUSH
38419: LD_VAR 0 1
38423: PUSH
38424: LD_INT 4
38426: PLUS
38427: PUSH
38428: LD_VAR 0 2
38432: PUSH
38433: LD_INT 4
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: PUSH
38441: LD_VAR 0 1
38445: PUSH
38446: LD_VAR 0 2
38450: PUSH
38451: LD_INT 4
38453: PLUS
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: PUSH
38463: LD_VAR 0 1
38467: PUSH
38468: LD_INT 3
38470: MINUS
38471: PUSH
38472: LD_VAR 0 2
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: PUSH
38485: LD_VAR 0 1
38489: PUSH
38490: LD_INT 4
38492: MINUS
38493: PUSH
38494: LD_VAR 0 2
38498: PUSH
38499: LD_INT 4
38501: MINUS
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// end ; 3 :
38518: GO 38940
38520: LD_INT 3
38522: DOUBLE
38523: EQUAL
38524: IFTRUE 38528
38526: GO 38661
38528: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38529: LD_ADDR_VAR 0 5
38533: PUSH
38534: LD_VAR 0 1
38538: PUSH
38539: LD_INT 3
38541: PLUS
38542: PUSH
38543: LD_VAR 0 2
38547: PUSH
38548: LD_INT 4
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: PUSH
38556: LD_VAR 0 1
38560: PUSH
38561: LD_INT 4
38563: PLUS
38564: PUSH
38565: LD_VAR 0 2
38569: PUSH
38570: LD_INT 4
38572: PLUS
38573: PUSH
38574: LD_INT 5
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: PUSH
38582: LD_VAR 0 1
38586: PUSH
38587: LD_INT 4
38589: MINUS
38590: PUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: PUSH
38604: LD_VAR 0 1
38608: PUSH
38609: LD_VAR 0 2
38613: PUSH
38614: LD_INT 4
38616: MINUS
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: PUSH
38626: LD_VAR 0 1
38630: PUSH
38631: LD_INT 3
38633: MINUS
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: LD_INT 3
38642: MINUS
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: ST_TO_ADDR
// end ; 4 :
38659: GO 38940
38661: LD_INT 4
38663: DOUBLE
38664: EQUAL
38665: IFTRUE 38669
38667: GO 38802
38669: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_VAR 0 1
38679: PUSH
38680: LD_VAR 0 2
38684: PUSH
38685: LD_INT 4
38687: PLUS
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 3
38704: PLUS
38705: PUSH
38706: LD_VAR 0 2
38710: PUSH
38711: LD_INT 3
38713: PLUS
38714: PUSH
38715: LD_INT 5
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: PUSH
38723: LD_VAR 0 1
38727: PUSH
38728: LD_INT 4
38730: PLUS
38731: PUSH
38732: LD_VAR 0 2
38736: PUSH
38737: LD_INT 4
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_VAR 0 1
38749: PUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_INT 3
38757: MINUS
38758: PUSH
38759: LD_INT 3
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: LD_VAR 0 1
38771: PUSH
38772: LD_INT 4
38774: MINUS
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: LD_INT 4
38783: MINUS
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// end ; 5 :
38800: GO 38940
38802: LD_INT 5
38804: DOUBLE
38805: EQUAL
38806: IFTRUE 38810
38808: GO 38939
38810: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38811: LD_ADDR_VAR 0 5
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: LD_INT 4
38823: MINUS
38824: PUSH
38825: LD_VAR 0 2
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: PUSH
38838: LD_VAR 0 1
38842: PUSH
38843: LD_VAR 0 2
38847: PUSH
38848: LD_INT 4
38850: MINUS
38851: PUSH
38852: LD_INT 3
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: PUSH
38860: LD_VAR 0 1
38864: PUSH
38865: LD_INT 4
38867: PLUS
38868: PUSH
38869: LD_VAR 0 2
38873: PUSH
38874: LD_INT 4
38876: PLUS
38877: PUSH
38878: LD_INT 5
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: PUSH
38886: LD_VAR 0 1
38890: PUSH
38891: LD_INT 3
38893: PLUS
38894: PUSH
38895: LD_VAR 0 2
38899: PUSH
38900: LD_INT 4
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: LD_VAR 0 1
38912: PUSH
38913: LD_VAR 0 2
38917: PUSH
38918: LD_INT 3
38920: PLUS
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// end ; end ;
38937: GO 38940
38939: POP
// result := list ;
38940: LD_ADDR_VAR 0 4
38944: PUSH
38945: LD_VAR 0 5
38949: ST_TO_ADDR
// end ;
38950: LD_VAR 0 4
38954: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38955: LD_INT 0
38957: PPUSH
38958: PPUSH
38959: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38960: LD_VAR 0 1
38964: NOT
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: LD_INT 3
38979: PUSH
38980: LD_INT 4
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: IN
38989: NOT
38990: OR
38991: IFFALSE 38995
// exit ;
38993: GO 39087
// tmp := [ ] ;
38995: LD_ADDR_VAR 0 5
38999: PUSH
39000: EMPTY
39001: ST_TO_ADDR
// for i in units do
39002: LD_ADDR_VAR 0 4
39006: PUSH
39007: LD_VAR 0 1
39011: PUSH
39012: FOR_IN
39013: IFFALSE 39056
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39015: LD_ADDR_VAR 0 5
39019: PUSH
39020: LD_VAR 0 5
39024: PPUSH
39025: LD_VAR 0 5
39029: PUSH
39030: LD_INT 1
39032: PLUS
39033: PPUSH
39034: LD_VAR 0 4
39038: PPUSH
39039: LD_VAR 0 2
39043: PPUSH
39044: CALL_OW 259
39048: PPUSH
39049: CALL_OW 2
39053: ST_TO_ADDR
39054: GO 39012
39056: POP
39057: POP
// if not tmp then
39058: LD_VAR 0 5
39062: NOT
39063: IFFALSE 39067
// exit ;
39065: GO 39087
// result := SortListByListDesc ( units , tmp ) ;
39067: LD_ADDR_VAR 0 3
39071: PUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: LD_VAR 0 5
39081: PPUSH
39082: CALL_OW 77
39086: ST_TO_ADDR
// end ;
39087: LD_VAR 0 3
39091: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39092: LD_INT 0
39094: PPUSH
39095: PPUSH
39096: PPUSH
// result := false ;
39097: LD_ADDR_VAR 0 3
39101: PUSH
39102: LD_INT 0
39104: ST_TO_ADDR
// x := GetX ( building ) ;
39105: LD_ADDR_VAR 0 4
39109: PUSH
39110: LD_VAR 0 2
39114: PPUSH
39115: CALL_OW 250
39119: ST_TO_ADDR
// y := GetY ( building ) ;
39120: LD_ADDR_VAR 0 5
39124: PUSH
39125: LD_VAR 0 2
39129: PPUSH
39130: CALL_OW 251
39134: ST_TO_ADDR
// if not building or not x or not y then
39135: LD_VAR 0 2
39139: NOT
39140: PUSH
39141: LD_VAR 0 4
39145: NOT
39146: OR
39147: PUSH
39148: LD_VAR 0 5
39152: NOT
39153: OR
39154: IFFALSE 39158
// exit ;
39156: GO 39250
// if GetTaskList ( unit ) then
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 437
39167: IFFALSE 39250
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39169: LD_STRING e
39171: PUSH
39172: LD_VAR 0 1
39176: PPUSH
39177: CALL_OW 437
39181: PUSH
39182: LD_INT 1
39184: ARRAY
39185: PUSH
39186: LD_INT 1
39188: ARRAY
39189: EQUAL
39190: PUSH
39191: LD_VAR 0 4
39195: PUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: CALL_OW 437
39205: PUSH
39206: LD_INT 1
39208: ARRAY
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: EQUAL
39214: AND
39215: PUSH
39216: LD_VAR 0 5
39220: PUSH
39221: LD_VAR 0 1
39225: PPUSH
39226: CALL_OW 437
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: PUSH
39235: LD_INT 3
39237: ARRAY
39238: EQUAL
39239: AND
39240: IFFALSE 39250
// result := true end ;
39242: LD_ADDR_VAR 0 3
39246: PUSH
39247: LD_INT 1
39249: ST_TO_ADDR
// end ;
39250: LD_VAR 0 3
39254: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39255: LD_INT 0
39257: PPUSH
// result := false ;
39258: LD_ADDR_VAR 0 4
39262: PUSH
39263: LD_INT 0
39265: ST_TO_ADDR
// if GetTaskList ( unit ) then
39266: LD_VAR 0 1
39270: PPUSH
39271: CALL_OW 437
39275: IFFALSE 39358
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39277: LD_STRING M
39279: PUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 437
39289: PUSH
39290: LD_INT 1
39292: ARRAY
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: EQUAL
39298: PUSH
39299: LD_VAR 0 2
39303: PUSH
39304: LD_VAR 0 1
39308: PPUSH
39309: CALL_OW 437
39313: PUSH
39314: LD_INT 1
39316: ARRAY
39317: PUSH
39318: LD_INT 2
39320: ARRAY
39321: EQUAL
39322: AND
39323: PUSH
39324: LD_VAR 0 3
39328: PUSH
39329: LD_VAR 0 1
39333: PPUSH
39334: CALL_OW 437
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: PUSH
39343: LD_INT 3
39345: ARRAY
39346: EQUAL
39347: AND
39348: IFFALSE 39358
// result := true ;
39350: LD_ADDR_VAR 0 4
39354: PUSH
39355: LD_INT 1
39357: ST_TO_ADDR
// end ; end ;
39358: LD_VAR 0 4
39362: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39363: LD_INT 0
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
// if not unit or not area then
39369: LD_VAR 0 1
39373: NOT
39374: PUSH
39375: LD_VAR 0 2
39379: NOT
39380: OR
39381: IFFALSE 39385
// exit ;
39383: GO 39549
// tmp := AreaToList ( area , i ) ;
39385: LD_ADDR_VAR 0 6
39389: PUSH
39390: LD_VAR 0 2
39394: PPUSH
39395: LD_VAR 0 5
39399: PPUSH
39400: CALL_OW 517
39404: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39405: LD_ADDR_VAR 0 5
39409: PUSH
39410: DOUBLE
39411: LD_INT 1
39413: DEC
39414: ST_TO_ADDR
39415: LD_VAR 0 6
39419: PUSH
39420: LD_INT 1
39422: ARRAY
39423: PUSH
39424: FOR_TO
39425: IFFALSE 39547
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39427: LD_ADDR_VAR 0 7
39431: PUSH
39432: LD_VAR 0 6
39436: PUSH
39437: LD_INT 1
39439: ARRAY
39440: PUSH
39441: LD_VAR 0 5
39445: ARRAY
39446: PUSH
39447: LD_VAR 0 6
39451: PUSH
39452: LD_INT 2
39454: ARRAY
39455: PUSH
39456: LD_VAR 0 5
39460: ARRAY
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39466: LD_VAR 0 7
39470: PUSH
39471: LD_INT 1
39473: ARRAY
39474: PPUSH
39475: LD_VAR 0 7
39479: PUSH
39480: LD_INT 2
39482: ARRAY
39483: PPUSH
39484: CALL_OW 428
39488: PUSH
39489: LD_INT 0
39491: EQUAL
39492: IFFALSE 39545
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39494: LD_VAR 0 1
39498: PPUSH
39499: LD_VAR 0 7
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: LD_VAR 0 7
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: PPUSH
39517: LD_VAR 0 3
39521: PPUSH
39522: CALL_OW 48
// result := IsPlaced ( unit ) ;
39526: LD_ADDR_VAR 0 4
39530: PUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: CALL_OW 305
39540: ST_TO_ADDR
// exit ;
39541: POP
39542: POP
39543: GO 39549
// end ; end ;
39545: GO 39424
39547: POP
39548: POP
// end ;
39549: LD_VAR 0 4
39553: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39554: LD_INT 0
39556: PPUSH
39557: PPUSH
39558: PPUSH
// if not side or side > 8 then
39559: LD_VAR 0 1
39563: NOT
39564: PUSH
39565: LD_VAR 0 1
39569: PUSH
39570: LD_INT 8
39572: GREATER
39573: OR
39574: IFFALSE 39578
// exit ;
39576: GO 39765
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39578: LD_ADDR_VAR 0 4
39582: PUSH
39583: LD_INT 22
39585: PUSH
39586: LD_VAR 0 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 21
39597: PUSH
39598: LD_INT 3
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PPUSH
39609: CALL_OW 69
39613: ST_TO_ADDR
// if not tmp then
39614: LD_VAR 0 4
39618: NOT
39619: IFFALSE 39623
// exit ;
39621: GO 39765
// enable_addtolog := true ;
39623: LD_ADDR_OWVAR 81
39627: PUSH
39628: LD_INT 1
39630: ST_TO_ADDR
// AddToLog ( [ ) ;
39631: LD_STRING [
39633: PPUSH
39634: CALL_OW 561
// for i in tmp do
39638: LD_ADDR_VAR 0 3
39642: PUSH
39643: LD_VAR 0 4
39647: PUSH
39648: FOR_IN
39649: IFFALSE 39756
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39651: LD_STRING [
39653: PUSH
39654: LD_VAR 0 3
39658: PPUSH
39659: CALL_OW 266
39663: STR
39664: PUSH
39665: LD_STRING , 
39667: STR
39668: PUSH
39669: LD_VAR 0 3
39673: PPUSH
39674: CALL_OW 250
39678: STR
39679: PUSH
39680: LD_STRING , 
39682: STR
39683: PUSH
39684: LD_VAR 0 3
39688: PPUSH
39689: CALL_OW 251
39693: STR
39694: PUSH
39695: LD_STRING , 
39697: STR
39698: PUSH
39699: LD_VAR 0 3
39703: PPUSH
39704: CALL_OW 254
39708: STR
39709: PUSH
39710: LD_STRING , 
39712: STR
39713: PUSH
39714: LD_VAR 0 3
39718: PPUSH
39719: LD_INT 1
39721: PPUSH
39722: CALL_OW 268
39726: STR
39727: PUSH
39728: LD_STRING , 
39730: STR
39731: PUSH
39732: LD_VAR 0 3
39736: PPUSH
39737: LD_INT 2
39739: PPUSH
39740: CALL_OW 268
39744: STR
39745: PUSH
39746: LD_STRING ],
39748: STR
39749: PPUSH
39750: CALL_OW 561
// end ;
39754: GO 39648
39756: POP
39757: POP
// AddToLog ( ]; ) ;
39758: LD_STRING ];
39760: PPUSH
39761: CALL_OW 561
// end ;
39765: LD_VAR 0 2
39769: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39770: LD_INT 0
39772: PPUSH
39773: PPUSH
39774: PPUSH
39775: PPUSH
39776: PPUSH
// if not area or not rate or not max then
39777: LD_VAR 0 1
39781: NOT
39782: PUSH
39783: LD_VAR 0 2
39787: NOT
39788: OR
39789: PUSH
39790: LD_VAR 0 4
39794: NOT
39795: OR
39796: IFFALSE 39800
// exit ;
39798: GO 39992
// while 1 do
39800: LD_INT 1
39802: IFFALSE 39992
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39804: LD_ADDR_VAR 0 9
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: LD_INT 1
39816: PPUSH
39817: CALL_OW 287
39821: PUSH
39822: LD_INT 10
39824: MUL
39825: ST_TO_ADDR
// r := rate / 10 ;
39826: LD_ADDR_VAR 0 7
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: LD_INT 10
39838: DIVREAL
39839: ST_TO_ADDR
// time := 1 1$00 ;
39840: LD_ADDR_VAR 0 8
39844: PUSH
39845: LD_INT 2100
39847: ST_TO_ADDR
// if amount < min then
39848: LD_VAR 0 9
39852: PUSH
39853: LD_VAR 0 3
39857: LESS
39858: IFFALSE 39876
// r := r * 2 else
39860: LD_ADDR_VAR 0 7
39864: PUSH
39865: LD_VAR 0 7
39869: PUSH
39870: LD_INT 2
39872: MUL
39873: ST_TO_ADDR
39874: GO 39902
// if amount > max then
39876: LD_VAR 0 9
39880: PUSH
39881: LD_VAR 0 4
39885: GREATER
39886: IFFALSE 39902
// r := r / 2 ;
39888: LD_ADDR_VAR 0 7
39892: PUSH
39893: LD_VAR 0 7
39897: PUSH
39898: LD_INT 2
39900: DIVREAL
39901: ST_TO_ADDR
// time := time / r ;
39902: LD_ADDR_VAR 0 8
39906: PUSH
39907: LD_VAR 0 8
39911: PUSH
39912: LD_VAR 0 7
39916: DIVREAL
39917: ST_TO_ADDR
// if time < 0 then
39918: LD_VAR 0 8
39922: PUSH
39923: LD_INT 0
39925: LESS
39926: IFFALSE 39943
// time := time * - 1 ;
39928: LD_ADDR_VAR 0 8
39932: PUSH
39933: LD_VAR 0 8
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: MUL
39942: ST_TO_ADDR
// wait ( time ) ;
39943: LD_VAR 0 8
39947: PPUSH
39948: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
39952: LD_INT 35
39954: PPUSH
39955: LD_INT 875
39957: PPUSH
39958: CALL_OW 12
39962: PPUSH
39963: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39967: LD_INT 1
39969: PPUSH
39970: LD_INT 5
39972: PPUSH
39973: CALL_OW 12
39977: PPUSH
39978: LD_VAR 0 1
39982: PPUSH
39983: LD_INT 1
39985: PPUSH
39986: CALL_OW 55
// end ;
39990: GO 39800
// end ;
39992: LD_VAR 0 5
39996: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39997: LD_INT 0
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
// if not turrets or not factories then
40007: LD_VAR 0 1
40011: NOT
40012: PUSH
40013: LD_VAR 0 2
40017: NOT
40018: OR
40019: IFFALSE 40023
// exit ;
40021: GO 40330
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40023: LD_ADDR_VAR 0 10
40027: PUSH
40028: LD_INT 5
40030: PUSH
40031: LD_INT 6
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 4
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: LD_INT 5
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 24
40065: PUSH
40066: LD_INT 25
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 23
40075: PUSH
40076: LD_INT 27
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 42
40089: PUSH
40090: LD_INT 43
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 44
40099: PUSH
40100: LD_INT 46
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 45
40109: PUSH
40110: LD_INT 47
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
// result := [ ] ;
40127: LD_ADDR_VAR 0 3
40131: PUSH
40132: EMPTY
40133: ST_TO_ADDR
// for i in turrets do
40134: LD_ADDR_VAR 0 4
40138: PUSH
40139: LD_VAR 0 1
40143: PUSH
40144: FOR_IN
40145: IFFALSE 40328
// begin nat := GetNation ( i ) ;
40147: LD_ADDR_VAR 0 7
40151: PUSH
40152: LD_VAR 0 4
40156: PPUSH
40157: CALL_OW 248
40161: ST_TO_ADDR
// weapon := 0 ;
40162: LD_ADDR_VAR 0 8
40166: PUSH
40167: LD_INT 0
40169: ST_TO_ADDR
// if not nat then
40170: LD_VAR 0 7
40174: NOT
40175: IFFALSE 40179
// continue ;
40177: GO 40144
// for j in list [ nat ] do
40179: LD_ADDR_VAR 0 5
40183: PUSH
40184: LD_VAR 0 10
40188: PUSH
40189: LD_VAR 0 7
40193: ARRAY
40194: PUSH
40195: FOR_IN
40196: IFFALSE 40237
// if GetBWeapon ( i ) = j [ 1 ] then
40198: LD_VAR 0 4
40202: PPUSH
40203: CALL_OW 269
40207: PUSH
40208: LD_VAR 0 5
40212: PUSH
40213: LD_INT 1
40215: ARRAY
40216: EQUAL
40217: IFFALSE 40235
// begin weapon := j [ 2 ] ;
40219: LD_ADDR_VAR 0 8
40223: PUSH
40224: LD_VAR 0 5
40228: PUSH
40229: LD_INT 2
40231: ARRAY
40232: ST_TO_ADDR
// break ;
40233: GO 40237
// end ;
40235: GO 40195
40237: POP
40238: POP
// if not weapon then
40239: LD_VAR 0 8
40243: NOT
40244: IFFALSE 40248
// continue ;
40246: GO 40144
// for k in factories do
40248: LD_ADDR_VAR 0 6
40252: PUSH
40253: LD_VAR 0 2
40257: PUSH
40258: FOR_IN
40259: IFFALSE 40324
// begin weapons := AvailableWeaponList ( k ) ;
40261: LD_ADDR_VAR 0 9
40265: PUSH
40266: LD_VAR 0 6
40270: PPUSH
40271: CALL_OW 478
40275: ST_TO_ADDR
// if not weapons then
40276: LD_VAR 0 9
40280: NOT
40281: IFFALSE 40285
// continue ;
40283: GO 40258
// if weapon in weapons then
40285: LD_VAR 0 8
40289: PUSH
40290: LD_VAR 0 9
40294: IN
40295: IFFALSE 40322
// begin result := [ i , weapon ] ;
40297: LD_ADDR_VAR 0 3
40301: PUSH
40302: LD_VAR 0 4
40306: PUSH
40307: LD_VAR 0 8
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: ST_TO_ADDR
// exit ;
40316: POP
40317: POP
40318: POP
40319: POP
40320: GO 40330
// end ; end ;
40322: GO 40258
40324: POP
40325: POP
// end ;
40326: GO 40144
40328: POP
40329: POP
// end ;
40330: LD_VAR 0 3
40334: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40335: LD_INT 0
40337: PPUSH
// if not side or side > 8 then
40338: LD_VAR 0 3
40342: NOT
40343: PUSH
40344: LD_VAR 0 3
40348: PUSH
40349: LD_INT 8
40351: GREATER
40352: OR
40353: IFFALSE 40357
// exit ;
40355: GO 40416
// if not range then
40357: LD_VAR 0 4
40361: NOT
40362: IFFALSE 40373
// range := - 12 ;
40364: LD_ADDR_VAR 0 4
40368: PUSH
40369: LD_INT 12
40371: NEG
40372: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40373: LD_VAR 0 1
40377: PPUSH
40378: LD_VAR 0 2
40382: PPUSH
40383: LD_VAR 0 3
40387: PPUSH
40388: LD_VAR 0 4
40392: PPUSH
40393: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40397: LD_VAR 0 1
40401: PPUSH
40402: LD_VAR 0 2
40406: PPUSH
40407: LD_VAR 0 3
40411: PPUSH
40412: CALL_OW 331
// end ;
40416: LD_VAR 0 5
40420: RET
// export function Video ( mode ) ; begin
40421: LD_INT 0
40423: PPUSH
// ingame_video = mode ;
40424: LD_ADDR_OWVAR 52
40428: PUSH
40429: LD_VAR 0 1
40433: ST_TO_ADDR
// interface_hidden = mode ;
40434: LD_ADDR_OWVAR 54
40438: PUSH
40439: LD_VAR 0 1
40443: ST_TO_ADDR
// end ;
40444: LD_VAR 0 2
40448: RET
// export function Join ( array , element ) ; begin
40449: LD_INT 0
40451: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40452: LD_ADDR_VAR 0 3
40456: PUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: LD_VAR 0 1
40466: PUSH
40467: LD_INT 1
40469: PLUS
40470: PPUSH
40471: LD_VAR 0 2
40475: PPUSH
40476: CALL_OW 1
40480: ST_TO_ADDR
// end ;
40481: LD_VAR 0 3
40485: RET
// export function JoinUnion ( array , element ) ; begin
40486: LD_INT 0
40488: PPUSH
// result := array union element ;
40489: LD_ADDR_VAR 0 3
40493: PUSH
40494: LD_VAR 0 1
40498: PUSH
40499: LD_VAR 0 2
40503: UNION
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 3
40509: RET
// export function GetBehemoths ( side ) ; begin
40510: LD_INT 0
40512: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40513: LD_ADDR_VAR 0 2
40517: PUSH
40518: LD_INT 22
40520: PUSH
40521: LD_VAR 0 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 31
40532: PUSH
40533: LD_INT 25
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PPUSH
40544: CALL_OW 69
40548: ST_TO_ADDR
// end ;
40549: LD_VAR 0 2
40553: RET
// export function Shuffle ( array ) ; var i , index ; begin
40554: LD_INT 0
40556: PPUSH
40557: PPUSH
40558: PPUSH
// result := [ ] ;
40559: LD_ADDR_VAR 0 2
40563: PUSH
40564: EMPTY
40565: ST_TO_ADDR
// if not array then
40566: LD_VAR 0 1
40570: NOT
40571: IFFALSE 40575
// exit ;
40573: GO 40674
// Randomize ;
40575: CALL_OW 10
// for i = array downto 1 do
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: DOUBLE
40585: LD_VAR 0 1
40589: INC
40590: ST_TO_ADDR
40591: LD_INT 1
40593: PUSH
40594: FOR_DOWNTO
40595: IFFALSE 40672
// begin index := rand ( 1 , array ) ;
40597: LD_ADDR_VAR 0 4
40601: PUSH
40602: LD_INT 1
40604: PPUSH
40605: LD_VAR 0 1
40609: PPUSH
40610: CALL_OW 12
40614: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40615: LD_ADDR_VAR 0 2
40619: PUSH
40620: LD_VAR 0 2
40624: PPUSH
40625: LD_VAR 0 2
40629: PUSH
40630: LD_INT 1
40632: PLUS
40633: PPUSH
40634: LD_VAR 0 1
40638: PUSH
40639: LD_VAR 0 4
40643: ARRAY
40644: PPUSH
40645: CALL_OW 2
40649: ST_TO_ADDR
// array := Delete ( array , index ) ;
40650: LD_ADDR_VAR 0 1
40654: PUSH
40655: LD_VAR 0 1
40659: PPUSH
40660: LD_VAR 0 4
40664: PPUSH
40665: CALL_OW 3
40669: ST_TO_ADDR
// end ;
40670: GO 40594
40672: POP
40673: POP
// end ;
40674: LD_VAR 0 2
40678: RET
// export function GetBaseMaterials ( base ) ; begin
40679: LD_INT 0
40681: PPUSH
// result := [ 0 , 0 , 0 ] ;
40682: LD_ADDR_VAR 0 2
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: ST_TO_ADDR
// if not base then
40701: LD_VAR 0 1
40705: NOT
40706: IFFALSE 40710
// exit ;
40708: GO 40759
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40710: LD_ADDR_VAR 0 2
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: LD_INT 1
40722: PPUSH
40723: CALL_OW 275
40727: PUSH
40728: LD_VAR 0 1
40732: PPUSH
40733: LD_INT 2
40735: PPUSH
40736: CALL_OW 275
40740: PUSH
40741: LD_VAR 0 1
40745: PPUSH
40746: LD_INT 3
40748: PPUSH
40749: CALL_OW 275
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: ST_TO_ADDR
// end ;
40759: LD_VAR 0 2
40763: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40764: LD_INT 0
40766: PPUSH
40767: PPUSH
// result := array ;
40768: LD_ADDR_VAR 0 3
40772: PUSH
40773: LD_VAR 0 1
40777: ST_TO_ADDR
// if size > 0 then
40778: LD_VAR 0 2
40782: PUSH
40783: LD_INT 0
40785: GREATER
40786: IFFALSE 40832
// for i := array downto size do
40788: LD_ADDR_VAR 0 4
40792: PUSH
40793: DOUBLE
40794: LD_VAR 0 1
40798: INC
40799: ST_TO_ADDR
40800: LD_VAR 0 2
40804: PUSH
40805: FOR_DOWNTO
40806: IFFALSE 40830
// result := Delete ( result , result ) ;
40808: LD_ADDR_VAR 0 3
40812: PUSH
40813: LD_VAR 0 3
40817: PPUSH
40818: LD_VAR 0 3
40822: PPUSH
40823: CALL_OW 3
40827: ST_TO_ADDR
40828: GO 40805
40830: POP
40831: POP
// end ;
40832: LD_VAR 0 3
40836: RET
// export function ComExit ( unit ) ; var tmp ; begin
40837: LD_INT 0
40839: PPUSH
40840: PPUSH
// if not IsInUnit ( unit ) then
40841: LD_VAR 0 1
40845: PPUSH
40846: CALL_OW 310
40850: NOT
40851: IFFALSE 40855
// exit ;
40853: GO 40915
// tmp := IsInUnit ( unit ) ;
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 310
40869: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40870: LD_VAR 0 3
40874: PPUSH
40875: CALL_OW 247
40879: PUSH
40880: LD_INT 2
40882: EQUAL
40883: IFFALSE 40896
// ComExitVehicle ( unit ) else
40885: LD_VAR 0 1
40889: PPUSH
40890: CALL_OW 121
40894: GO 40905
// ComExitBuilding ( unit ) ;
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL_OW 122
// result := tmp ;
40905: LD_ADDR_VAR 0 2
40909: PUSH
40910: LD_VAR 0 3
40914: ST_TO_ADDR
// end ;
40915: LD_VAR 0 2
40919: RET
// export function ResetHc ; begin
40920: LD_INT 0
40922: PPUSH
// InitHc ;
40923: CALL_OW 19
// hc_importance := 0 ;
40927: LD_ADDR_OWVAR 32
40931: PUSH
40932: LD_INT 0
40934: ST_TO_ADDR
// end ;
40935: LD_VAR 0 1
40939: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40940: LD_INT 0
40942: PPUSH
40943: PPUSH
40944: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40945: LD_ADDR_VAR 0 6
40949: PUSH
40950: LD_VAR 0 1
40954: PUSH
40955: LD_VAR 0 3
40959: PLUS
40960: PUSH
40961: LD_INT 2
40963: DIV
40964: ST_TO_ADDR
// if _x < 0 then
40965: LD_VAR 0 6
40969: PUSH
40970: LD_INT 0
40972: LESS
40973: IFFALSE 40990
// _x := _x * - 1 ;
40975: LD_ADDR_VAR 0 6
40979: PUSH
40980: LD_VAR 0 6
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: MUL
40989: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40990: LD_ADDR_VAR 0 7
40994: PUSH
40995: LD_VAR 0 2
40999: PUSH
41000: LD_VAR 0 4
41004: PLUS
41005: PUSH
41006: LD_INT 2
41008: DIV
41009: ST_TO_ADDR
// if _y < 0 then
41010: LD_VAR 0 7
41014: PUSH
41015: LD_INT 0
41017: LESS
41018: IFFALSE 41035
// _y := _y * - 1 ;
41020: LD_ADDR_VAR 0 7
41024: PUSH
41025: LD_VAR 0 7
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: MUL
41034: ST_TO_ADDR
// result := [ _x , _y ] ;
41035: LD_ADDR_VAR 0 5
41039: PUSH
41040: LD_VAR 0 6
41044: PUSH
41045: LD_VAR 0 7
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: ST_TO_ADDR
// end ;
41054: LD_VAR 0 5
41058: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41059: LD_INT 0
41061: PPUSH
41062: PPUSH
41063: PPUSH
41064: PPUSH
// task := GetTaskList ( unit ) ;
41065: LD_ADDR_VAR 0 7
41069: PUSH
41070: LD_VAR 0 1
41074: PPUSH
41075: CALL_OW 437
41079: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41080: LD_VAR 0 7
41084: NOT
41085: PUSH
41086: LD_VAR 0 1
41090: PPUSH
41091: LD_VAR 0 2
41095: PPUSH
41096: CALL_OW 308
41100: NOT
41101: AND
41102: IFFALSE 41106
// exit ;
41104: GO 41224
// if IsInArea ( unit , area ) then
41106: LD_VAR 0 1
41110: PPUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: CALL_OW 308
41120: IFFALSE 41138
// begin ComMoveToArea ( unit , goAway ) ;
41122: LD_VAR 0 1
41126: PPUSH
41127: LD_VAR 0 3
41131: PPUSH
41132: CALL_OW 113
// exit ;
41136: GO 41224
// end ; if task [ 1 ] [ 1 ] <> M then
41138: LD_VAR 0 7
41142: PUSH
41143: LD_INT 1
41145: ARRAY
41146: PUSH
41147: LD_INT 1
41149: ARRAY
41150: PUSH
41151: LD_STRING M
41153: NONEQUAL
41154: IFFALSE 41158
// exit ;
41156: GO 41224
// x := task [ 1 ] [ 2 ] ;
41158: LD_ADDR_VAR 0 5
41162: PUSH
41163: LD_VAR 0 7
41167: PUSH
41168: LD_INT 1
41170: ARRAY
41171: PUSH
41172: LD_INT 2
41174: ARRAY
41175: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41176: LD_ADDR_VAR 0 6
41180: PUSH
41181: LD_VAR 0 7
41185: PUSH
41186: LD_INT 1
41188: ARRAY
41189: PUSH
41190: LD_INT 3
41192: ARRAY
41193: ST_TO_ADDR
// if InArea ( x , y , area ) then
41194: LD_VAR 0 5
41198: PPUSH
41199: LD_VAR 0 6
41203: PPUSH
41204: LD_VAR 0 2
41208: PPUSH
41209: CALL_OW 309
41213: IFFALSE 41224
// ComStop ( unit ) ;
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 141
// end ;
41224: LD_VAR 0 4
41228: RET
// export function Abs ( value ) ; begin
41229: LD_INT 0
41231: PPUSH
// result := value ;
41232: LD_ADDR_VAR 0 2
41236: PUSH
41237: LD_VAR 0 1
41241: ST_TO_ADDR
// if value < 0 then
41242: LD_VAR 0 1
41246: PUSH
41247: LD_INT 0
41249: LESS
41250: IFFALSE 41267
// result := value * - 1 ;
41252: LD_ADDR_VAR 0 2
41256: PUSH
41257: LD_VAR 0 1
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: MUL
41266: ST_TO_ADDR
// end ; end_of_file
41267: LD_VAR 0 2
41271: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
41272: LD_INT 0
41274: PPUSH
41275: PPUSH
// skirmish := false ;
41276: LD_ADDR_EXP 12
41280: PUSH
41281: LD_INT 0
41283: ST_TO_ADDR
// debug_mc := false ;
41284: LD_ADDR_EXP 13
41288: PUSH
41289: LD_INT 0
41291: ST_TO_ADDR
// mc_bases := [ ] ;
41292: LD_ADDR_EXP 14
41296: PUSH
41297: EMPTY
41298: ST_TO_ADDR
// mc_sides := [ ] ;
41299: LD_ADDR_EXP 40
41303: PUSH
41304: EMPTY
41305: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
41306: LD_ADDR_EXP 15
41310: PUSH
41311: EMPTY
41312: ST_TO_ADDR
// mc_building_repairs := [ ] ;
41313: LD_ADDR_EXP 16
41317: PUSH
41318: EMPTY
41319: ST_TO_ADDR
// mc_need_heal := [ ] ;
41320: LD_ADDR_EXP 17
41324: PUSH
41325: EMPTY
41326: ST_TO_ADDR
// mc_healers := [ ] ;
41327: LD_ADDR_EXP 18
41331: PUSH
41332: EMPTY
41333: ST_TO_ADDR
// mc_build_list := [ ] ;
41334: LD_ADDR_EXP 19
41338: PUSH
41339: EMPTY
41340: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
41341: LD_ADDR_EXP 46
41345: PUSH
41346: EMPTY
41347: ST_TO_ADDR
// mc_builders := [ ] ;
41348: LD_ADDR_EXP 20
41352: PUSH
41353: EMPTY
41354: ST_TO_ADDR
// mc_construct_list := [ ] ;
41355: LD_ADDR_EXP 21
41359: PUSH
41360: EMPTY
41361: ST_TO_ADDR
// mc_turret_list := [ ] ;
41362: LD_ADDR_EXP 22
41366: PUSH
41367: EMPTY
41368: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
41369: LD_ADDR_EXP 23
41373: PUSH
41374: EMPTY
41375: ST_TO_ADDR
// mc_miners := [ ] ;
41376: LD_ADDR_EXP 28
41380: PUSH
41381: EMPTY
41382: ST_TO_ADDR
// mc_mines := [ ] ;
41383: LD_ADDR_EXP 27
41387: PUSH
41388: EMPTY
41389: ST_TO_ADDR
// mc_minefields := [ ] ;
41390: LD_ADDR_EXP 29
41394: PUSH
41395: EMPTY
41396: ST_TO_ADDR
// mc_crates := [ ] ;
41397: LD_ADDR_EXP 30
41401: PUSH
41402: EMPTY
41403: ST_TO_ADDR
// mc_crates_collector := [ ] ;
41404: LD_ADDR_EXP 31
41408: PUSH
41409: EMPTY
41410: ST_TO_ADDR
// mc_crates_area := [ ] ;
41411: LD_ADDR_EXP 32
41415: PUSH
41416: EMPTY
41417: ST_TO_ADDR
// mc_vehicles := [ ] ;
41418: LD_ADDR_EXP 33
41422: PUSH
41423: EMPTY
41424: ST_TO_ADDR
// mc_attack := [ ] ;
41425: LD_ADDR_EXP 34
41429: PUSH
41430: EMPTY
41431: ST_TO_ADDR
// mc_produce := [ ] ;
41432: LD_ADDR_EXP 35
41436: PUSH
41437: EMPTY
41438: ST_TO_ADDR
// mc_defender := [ ] ;
41439: LD_ADDR_EXP 36
41443: PUSH
41444: EMPTY
41445: ST_TO_ADDR
// mc_parking := [ ] ;
41446: LD_ADDR_EXP 38
41450: PUSH
41451: EMPTY
41452: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
41453: LD_ADDR_EXP 24
41457: PUSH
41458: EMPTY
41459: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
41460: LD_ADDR_EXP 26
41464: PUSH
41465: EMPTY
41466: ST_TO_ADDR
// mc_scan := [ ] ;
41467: LD_ADDR_EXP 37
41471: PUSH
41472: EMPTY
41473: ST_TO_ADDR
// mc_scan_area := [ ] ;
41474: LD_ADDR_EXP 39
41478: PUSH
41479: EMPTY
41480: ST_TO_ADDR
// mc_tech := [ ] ;
41481: LD_ADDR_EXP 41
41485: PUSH
41486: EMPTY
41487: ST_TO_ADDR
// mc_class := [ ] ;
41488: LD_ADDR_EXP 55
41492: PUSH
41493: EMPTY
41494: ST_TO_ADDR
// mc_class_case_use := [ ] ;
41495: LD_ADDR_EXP 56
41499: PUSH
41500: EMPTY
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 1
41506: RET
// export function MC_Kill ( base ) ; begin
41507: LD_INT 0
41509: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
41510: LD_ADDR_EXP 14
41514: PUSH
41515: LD_EXP 14
41519: PPUSH
41520: LD_VAR 0 1
41524: PPUSH
41525: EMPTY
41526: PPUSH
41527: CALL_OW 1
41531: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
41532: LD_ADDR_EXP 15
41536: PUSH
41537: LD_EXP 15
41541: PPUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: EMPTY
41548: PPUSH
41549: CALL_OW 1
41553: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
41554: LD_ADDR_EXP 16
41558: PUSH
41559: LD_EXP 16
41563: PPUSH
41564: LD_VAR 0 1
41568: PPUSH
41569: EMPTY
41570: PPUSH
41571: CALL_OW 1
41575: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
41576: LD_ADDR_EXP 17
41580: PUSH
41581: LD_EXP 17
41585: PPUSH
41586: LD_VAR 0 1
41590: PPUSH
41591: EMPTY
41592: PPUSH
41593: CALL_OW 1
41597: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
41598: LD_ADDR_EXP 18
41602: PUSH
41603: LD_EXP 18
41607: PPUSH
41608: LD_VAR 0 1
41612: PPUSH
41613: EMPTY
41614: PPUSH
41615: CALL_OW 1
41619: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
41620: LD_ADDR_EXP 19
41624: PUSH
41625: LD_EXP 19
41629: PPUSH
41630: LD_VAR 0 1
41634: PPUSH
41635: EMPTY
41636: PPUSH
41637: CALL_OW 1
41641: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
41642: LD_ADDR_EXP 20
41646: PUSH
41647: LD_EXP 20
41651: PPUSH
41652: LD_VAR 0 1
41656: PPUSH
41657: EMPTY
41658: PPUSH
41659: CALL_OW 1
41663: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
41664: LD_ADDR_EXP 21
41668: PUSH
41669: LD_EXP 21
41673: PPUSH
41674: LD_VAR 0 1
41678: PPUSH
41679: EMPTY
41680: PPUSH
41681: CALL_OW 1
41685: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
41686: LD_ADDR_EXP 22
41690: PUSH
41691: LD_EXP 22
41695: PPUSH
41696: LD_VAR 0 1
41700: PPUSH
41701: EMPTY
41702: PPUSH
41703: CALL_OW 1
41707: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
41708: LD_ADDR_EXP 23
41712: PUSH
41713: LD_EXP 23
41717: PPUSH
41718: LD_VAR 0 1
41722: PPUSH
41723: EMPTY
41724: PPUSH
41725: CALL_OW 1
41729: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
41730: LD_ADDR_EXP 24
41734: PUSH
41735: LD_EXP 24
41739: PPUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: EMPTY
41746: PPUSH
41747: CALL_OW 1
41751: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
41752: LD_ADDR_EXP 25
41756: PUSH
41757: LD_EXP 25
41761: PPUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: LD_INT 0
41769: PPUSH
41770: CALL_OW 1
41774: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
41775: LD_ADDR_EXP 26
41779: PUSH
41780: LD_EXP 26
41784: PPUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: EMPTY
41791: PPUSH
41792: CALL_OW 1
41796: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
41797: LD_ADDR_EXP 27
41801: PUSH
41802: LD_EXP 27
41806: PPUSH
41807: LD_VAR 0 1
41811: PPUSH
41812: EMPTY
41813: PPUSH
41814: CALL_OW 1
41818: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
41819: LD_ADDR_EXP 28
41823: PUSH
41824: LD_EXP 28
41828: PPUSH
41829: LD_VAR 0 1
41833: PPUSH
41834: EMPTY
41835: PPUSH
41836: CALL_OW 1
41840: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
41841: LD_ADDR_EXP 29
41845: PUSH
41846: LD_EXP 29
41850: PPUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: EMPTY
41857: PPUSH
41858: CALL_OW 1
41862: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
41863: LD_ADDR_EXP 30
41867: PUSH
41868: LD_EXP 30
41872: PPUSH
41873: LD_VAR 0 1
41877: PPUSH
41878: EMPTY
41879: PPUSH
41880: CALL_OW 1
41884: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
41885: LD_ADDR_EXP 31
41889: PUSH
41890: LD_EXP 31
41894: PPUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: EMPTY
41901: PPUSH
41902: CALL_OW 1
41906: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
41907: LD_ADDR_EXP 32
41911: PUSH
41912: LD_EXP 32
41916: PPUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: EMPTY
41923: PPUSH
41924: CALL_OW 1
41928: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
41929: LD_ADDR_EXP 33
41933: PUSH
41934: LD_EXP 33
41938: PPUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: EMPTY
41945: PPUSH
41946: CALL_OW 1
41950: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
41951: LD_ADDR_EXP 34
41955: PUSH
41956: LD_EXP 34
41960: PPUSH
41961: LD_VAR 0 1
41965: PPUSH
41966: EMPTY
41967: PPUSH
41968: CALL_OW 1
41972: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
41973: LD_ADDR_EXP 35
41977: PUSH
41978: LD_EXP 35
41982: PPUSH
41983: LD_VAR 0 1
41987: PPUSH
41988: EMPTY
41989: PPUSH
41990: CALL_OW 1
41994: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
41995: LD_ADDR_EXP 36
41999: PUSH
42000: LD_EXP 36
42004: PPUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: EMPTY
42011: PPUSH
42012: CALL_OW 1
42016: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
42017: LD_ADDR_EXP 37
42021: PUSH
42022: LD_EXP 37
42026: PPUSH
42027: LD_VAR 0 1
42031: PPUSH
42032: EMPTY
42033: PPUSH
42034: CALL_OW 1
42038: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
42039: LD_ADDR_EXP 38
42043: PUSH
42044: LD_EXP 38
42048: PPUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: EMPTY
42055: PPUSH
42056: CALL_OW 1
42060: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
42061: LD_ADDR_EXP 39
42065: PUSH
42066: LD_EXP 39
42070: PPUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: EMPTY
42077: PPUSH
42078: CALL_OW 1
42082: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
42083: LD_ADDR_EXP 41
42087: PUSH
42088: LD_EXP 41
42092: PPUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: EMPTY
42099: PPUSH
42100: CALL_OW 1
42104: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
42105: LD_ADDR_EXP 43
42109: PUSH
42110: LD_EXP 43
42114: PPUSH
42115: LD_VAR 0 1
42119: PPUSH
42120: EMPTY
42121: PPUSH
42122: CALL_OW 1
42126: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
42127: LD_ADDR_EXP 44
42131: PUSH
42132: LD_EXP 44
42136: PPUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: EMPTY
42143: PPUSH
42144: CALL_OW 1
42148: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
42149: LD_ADDR_EXP 45
42153: PUSH
42154: LD_EXP 45
42158: PPUSH
42159: LD_VAR 0 1
42163: PPUSH
42164: EMPTY
42165: PPUSH
42166: CALL_OW 1
42170: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
42171: LD_ADDR_EXP 46
42175: PUSH
42176: LD_EXP 46
42180: PPUSH
42181: LD_VAR 0 1
42185: PPUSH
42186: EMPTY
42187: PPUSH
42188: CALL_OW 1
42192: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
42193: LD_ADDR_EXP 47
42197: PUSH
42198: LD_EXP 47
42202: PPUSH
42203: LD_VAR 0 1
42207: PPUSH
42208: EMPTY
42209: PPUSH
42210: CALL_OW 1
42214: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
42215: LD_ADDR_EXP 48
42219: PUSH
42220: LD_EXP 48
42224: PPUSH
42225: LD_VAR 0 1
42229: PPUSH
42230: EMPTY
42231: PPUSH
42232: CALL_OW 1
42236: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
42237: LD_ADDR_EXP 49
42241: PUSH
42242: LD_EXP 49
42246: PPUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: EMPTY
42253: PPUSH
42254: CALL_OW 1
42258: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
42259: LD_ADDR_EXP 50
42263: PUSH
42264: LD_EXP 50
42268: PPUSH
42269: LD_VAR 0 1
42273: PPUSH
42274: EMPTY
42275: PPUSH
42276: CALL_OW 1
42280: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
42281: LD_ADDR_EXP 51
42285: PUSH
42286: LD_EXP 51
42290: PPUSH
42291: LD_VAR 0 1
42295: PPUSH
42296: EMPTY
42297: PPUSH
42298: CALL_OW 1
42302: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
42303: LD_ADDR_EXP 52
42307: PUSH
42308: LD_EXP 52
42312: PPUSH
42313: LD_VAR 0 1
42317: PPUSH
42318: EMPTY
42319: PPUSH
42320: CALL_OW 1
42324: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
42325: LD_ADDR_EXP 53
42329: PUSH
42330: LD_EXP 53
42334: PPUSH
42335: LD_VAR 0 1
42339: PPUSH
42340: EMPTY
42341: PPUSH
42342: CALL_OW 1
42346: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
42347: LD_ADDR_EXP 54
42351: PUSH
42352: LD_EXP 54
42356: PPUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: EMPTY
42363: PPUSH
42364: CALL_OW 1
42368: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
42369: LD_ADDR_EXP 55
42373: PUSH
42374: LD_EXP 55
42378: PPUSH
42379: LD_VAR 0 1
42383: PPUSH
42384: EMPTY
42385: PPUSH
42386: CALL_OW 1
42390: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
42391: LD_ADDR_EXP 56
42395: PUSH
42396: LD_EXP 56
42400: PPUSH
42401: LD_VAR 0 1
42405: PPUSH
42406: LD_INT 0
42408: PPUSH
42409: CALL_OW 1
42413: ST_TO_ADDR
// end ;
42414: LD_VAR 0 2
42418: RET
// export function MC_Add ( side , units ) ; var base ; begin
42419: LD_INT 0
42421: PPUSH
42422: PPUSH
// base := mc_bases + 1 ;
42423: LD_ADDR_VAR 0 4
42427: PUSH
42428: LD_EXP 14
42432: PUSH
42433: LD_INT 1
42435: PLUS
42436: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
42437: LD_ADDR_EXP 40
42441: PUSH
42442: LD_EXP 40
42446: PPUSH
42447: LD_VAR 0 4
42451: PPUSH
42452: LD_VAR 0 1
42456: PPUSH
42457: CALL_OW 1
42461: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
42462: LD_ADDR_EXP 14
42466: PUSH
42467: LD_EXP 14
42471: PPUSH
42472: LD_VAR 0 4
42476: PPUSH
42477: LD_VAR 0 2
42481: PPUSH
42482: CALL_OW 1
42486: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
42487: LD_ADDR_EXP 15
42491: PUSH
42492: LD_EXP 15
42496: PPUSH
42497: LD_VAR 0 4
42501: PPUSH
42502: EMPTY
42503: PPUSH
42504: CALL_OW 1
42508: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
42509: LD_ADDR_EXP 16
42513: PUSH
42514: LD_EXP 16
42518: PPUSH
42519: LD_VAR 0 4
42523: PPUSH
42524: EMPTY
42525: PPUSH
42526: CALL_OW 1
42530: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
42531: LD_ADDR_EXP 17
42535: PUSH
42536: LD_EXP 17
42540: PPUSH
42541: LD_VAR 0 4
42545: PPUSH
42546: EMPTY
42547: PPUSH
42548: CALL_OW 1
42552: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
42553: LD_ADDR_EXP 18
42557: PUSH
42558: LD_EXP 18
42562: PPUSH
42563: LD_VAR 0 4
42567: PPUSH
42568: EMPTY
42569: PPUSH
42570: CALL_OW 1
42574: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
42575: LD_ADDR_EXP 19
42579: PUSH
42580: LD_EXP 19
42584: PPUSH
42585: LD_VAR 0 4
42589: PPUSH
42590: EMPTY
42591: PPUSH
42592: CALL_OW 1
42596: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
42597: LD_ADDR_EXP 20
42601: PUSH
42602: LD_EXP 20
42606: PPUSH
42607: LD_VAR 0 4
42611: PPUSH
42612: EMPTY
42613: PPUSH
42614: CALL_OW 1
42618: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
42619: LD_ADDR_EXP 21
42623: PUSH
42624: LD_EXP 21
42628: PPUSH
42629: LD_VAR 0 4
42633: PPUSH
42634: EMPTY
42635: PPUSH
42636: CALL_OW 1
42640: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
42641: LD_ADDR_EXP 22
42645: PUSH
42646: LD_EXP 22
42650: PPUSH
42651: LD_VAR 0 4
42655: PPUSH
42656: EMPTY
42657: PPUSH
42658: CALL_OW 1
42662: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
42663: LD_ADDR_EXP 23
42667: PUSH
42668: LD_EXP 23
42672: PPUSH
42673: LD_VAR 0 4
42677: PPUSH
42678: EMPTY
42679: PPUSH
42680: CALL_OW 1
42684: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
42685: LD_ADDR_EXP 24
42689: PUSH
42690: LD_EXP 24
42694: PPUSH
42695: LD_VAR 0 4
42699: PPUSH
42700: EMPTY
42701: PPUSH
42702: CALL_OW 1
42706: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
42707: LD_ADDR_EXP 25
42711: PUSH
42712: LD_EXP 25
42716: PPUSH
42717: LD_VAR 0 4
42721: PPUSH
42722: LD_INT 0
42724: PPUSH
42725: CALL_OW 1
42729: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
42730: LD_ADDR_EXP 26
42734: PUSH
42735: LD_EXP 26
42739: PPUSH
42740: LD_VAR 0 4
42744: PPUSH
42745: EMPTY
42746: PPUSH
42747: CALL_OW 1
42751: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
42752: LD_ADDR_EXP 27
42756: PUSH
42757: LD_EXP 27
42761: PPUSH
42762: LD_VAR 0 4
42766: PPUSH
42767: EMPTY
42768: PPUSH
42769: CALL_OW 1
42773: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
42774: LD_ADDR_EXP 28
42778: PUSH
42779: LD_EXP 28
42783: PPUSH
42784: LD_VAR 0 4
42788: PPUSH
42789: EMPTY
42790: PPUSH
42791: CALL_OW 1
42795: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
42796: LD_ADDR_EXP 29
42800: PUSH
42801: LD_EXP 29
42805: PPUSH
42806: LD_VAR 0 4
42810: PPUSH
42811: EMPTY
42812: PPUSH
42813: CALL_OW 1
42817: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
42818: LD_ADDR_EXP 30
42822: PUSH
42823: LD_EXP 30
42827: PPUSH
42828: LD_VAR 0 4
42832: PPUSH
42833: EMPTY
42834: PPUSH
42835: CALL_OW 1
42839: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
42840: LD_ADDR_EXP 31
42844: PUSH
42845: LD_EXP 31
42849: PPUSH
42850: LD_VAR 0 4
42854: PPUSH
42855: EMPTY
42856: PPUSH
42857: CALL_OW 1
42861: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
42862: LD_ADDR_EXP 32
42866: PUSH
42867: LD_EXP 32
42871: PPUSH
42872: LD_VAR 0 4
42876: PPUSH
42877: EMPTY
42878: PPUSH
42879: CALL_OW 1
42883: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
42884: LD_ADDR_EXP 33
42888: PUSH
42889: LD_EXP 33
42893: PPUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: EMPTY
42900: PPUSH
42901: CALL_OW 1
42905: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
42906: LD_ADDR_EXP 34
42910: PUSH
42911: LD_EXP 34
42915: PPUSH
42916: LD_VAR 0 4
42920: PPUSH
42921: EMPTY
42922: PPUSH
42923: CALL_OW 1
42927: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
42928: LD_ADDR_EXP 35
42932: PUSH
42933: LD_EXP 35
42937: PPUSH
42938: LD_VAR 0 4
42942: PPUSH
42943: EMPTY
42944: PPUSH
42945: CALL_OW 1
42949: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
42950: LD_ADDR_EXP 36
42954: PUSH
42955: LD_EXP 36
42959: PPUSH
42960: LD_VAR 0 4
42964: PPUSH
42965: EMPTY
42966: PPUSH
42967: CALL_OW 1
42971: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
42972: LD_ADDR_EXP 37
42976: PUSH
42977: LD_EXP 37
42981: PPUSH
42982: LD_VAR 0 4
42986: PPUSH
42987: EMPTY
42988: PPUSH
42989: CALL_OW 1
42993: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
42994: LD_ADDR_EXP 38
42998: PUSH
42999: LD_EXP 38
43003: PPUSH
43004: LD_VAR 0 4
43008: PPUSH
43009: EMPTY
43010: PPUSH
43011: CALL_OW 1
43015: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
43016: LD_ADDR_EXP 39
43020: PUSH
43021: LD_EXP 39
43025: PPUSH
43026: LD_VAR 0 4
43030: PPUSH
43031: EMPTY
43032: PPUSH
43033: CALL_OW 1
43037: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
43038: LD_ADDR_EXP 41
43042: PUSH
43043: LD_EXP 41
43047: PPUSH
43048: LD_VAR 0 4
43052: PPUSH
43053: EMPTY
43054: PPUSH
43055: CALL_OW 1
43059: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
43060: LD_ADDR_EXP 43
43064: PUSH
43065: LD_EXP 43
43069: PPUSH
43070: LD_VAR 0 4
43074: PPUSH
43075: EMPTY
43076: PPUSH
43077: CALL_OW 1
43081: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
43082: LD_ADDR_EXP 44
43086: PUSH
43087: LD_EXP 44
43091: PPUSH
43092: LD_VAR 0 4
43096: PPUSH
43097: EMPTY
43098: PPUSH
43099: CALL_OW 1
43103: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
43104: LD_ADDR_EXP 45
43108: PUSH
43109: LD_EXP 45
43113: PPUSH
43114: LD_VAR 0 4
43118: PPUSH
43119: EMPTY
43120: PPUSH
43121: CALL_OW 1
43125: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
43126: LD_ADDR_EXP 46
43130: PUSH
43131: LD_EXP 46
43135: PPUSH
43136: LD_VAR 0 4
43140: PPUSH
43141: EMPTY
43142: PPUSH
43143: CALL_OW 1
43147: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
43148: LD_ADDR_EXP 47
43152: PUSH
43153: LD_EXP 47
43157: PPUSH
43158: LD_VAR 0 4
43162: PPUSH
43163: EMPTY
43164: PPUSH
43165: CALL_OW 1
43169: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
43170: LD_ADDR_EXP 48
43174: PUSH
43175: LD_EXP 48
43179: PPUSH
43180: LD_VAR 0 4
43184: PPUSH
43185: EMPTY
43186: PPUSH
43187: CALL_OW 1
43191: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
43192: LD_ADDR_EXP 49
43196: PUSH
43197: LD_EXP 49
43201: PPUSH
43202: LD_VAR 0 4
43206: PPUSH
43207: EMPTY
43208: PPUSH
43209: CALL_OW 1
43213: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
43214: LD_ADDR_EXP 50
43218: PUSH
43219: LD_EXP 50
43223: PPUSH
43224: LD_VAR 0 4
43228: PPUSH
43229: EMPTY
43230: PPUSH
43231: CALL_OW 1
43235: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
43236: LD_ADDR_EXP 51
43240: PUSH
43241: LD_EXP 51
43245: PPUSH
43246: LD_VAR 0 4
43250: PPUSH
43251: EMPTY
43252: PPUSH
43253: CALL_OW 1
43257: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
43258: LD_ADDR_EXP 52
43262: PUSH
43263: LD_EXP 52
43267: PPUSH
43268: LD_VAR 0 4
43272: PPUSH
43273: EMPTY
43274: PPUSH
43275: CALL_OW 1
43279: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
43280: LD_ADDR_EXP 53
43284: PUSH
43285: LD_EXP 53
43289: PPUSH
43290: LD_VAR 0 4
43294: PPUSH
43295: EMPTY
43296: PPUSH
43297: CALL_OW 1
43301: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
43302: LD_ADDR_EXP 54
43306: PUSH
43307: LD_EXP 54
43311: PPUSH
43312: LD_VAR 0 4
43316: PPUSH
43317: EMPTY
43318: PPUSH
43319: CALL_OW 1
43323: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
43324: LD_ADDR_EXP 55
43328: PUSH
43329: LD_EXP 55
43333: PPUSH
43334: LD_VAR 0 4
43338: PPUSH
43339: EMPTY
43340: PPUSH
43341: CALL_OW 1
43345: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
43346: LD_ADDR_EXP 56
43350: PUSH
43351: LD_EXP 56
43355: PPUSH
43356: LD_VAR 0 4
43360: PPUSH
43361: LD_INT 0
43363: PPUSH
43364: CALL_OW 1
43368: ST_TO_ADDR
// result := base ;
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_VAR 0 4
43378: ST_TO_ADDR
// end ;
43379: LD_VAR 0 3
43383: RET
// export function MC_Start ( ) ; var i ; begin
43384: LD_INT 0
43386: PPUSH
43387: PPUSH
// for i = 1 to mc_bases do
43388: LD_ADDR_VAR 0 2
43392: PUSH
43393: DOUBLE
43394: LD_INT 1
43396: DEC
43397: ST_TO_ADDR
43398: LD_EXP 14
43402: PUSH
43403: FOR_TO
43404: IFFALSE 44481
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
43406: LD_ADDR_EXP 14
43410: PUSH
43411: LD_EXP 14
43415: PPUSH
43416: LD_VAR 0 2
43420: PPUSH
43421: LD_EXP 14
43425: PUSH
43426: LD_VAR 0 2
43430: ARRAY
43431: PUSH
43432: LD_INT 0
43434: DIFF
43435: PPUSH
43436: CALL_OW 1
43440: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
43441: LD_ADDR_EXP 15
43445: PUSH
43446: LD_EXP 15
43450: PPUSH
43451: LD_VAR 0 2
43455: PPUSH
43456: EMPTY
43457: PPUSH
43458: CALL_OW 1
43462: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
43463: LD_ADDR_EXP 16
43467: PUSH
43468: LD_EXP 16
43472: PPUSH
43473: LD_VAR 0 2
43477: PPUSH
43478: EMPTY
43479: PPUSH
43480: CALL_OW 1
43484: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
43485: LD_ADDR_EXP 17
43489: PUSH
43490: LD_EXP 17
43494: PPUSH
43495: LD_VAR 0 2
43499: PPUSH
43500: EMPTY
43501: PPUSH
43502: CALL_OW 1
43506: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
43507: LD_ADDR_EXP 18
43511: PUSH
43512: LD_EXP 18
43516: PPUSH
43517: LD_VAR 0 2
43521: PPUSH
43522: EMPTY
43523: PUSH
43524: EMPTY
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PPUSH
43530: CALL_OW 1
43534: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
43535: LD_ADDR_EXP 19
43539: PUSH
43540: LD_EXP 19
43544: PPUSH
43545: LD_VAR 0 2
43549: PPUSH
43550: EMPTY
43551: PPUSH
43552: CALL_OW 1
43556: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
43557: LD_ADDR_EXP 46
43561: PUSH
43562: LD_EXP 46
43566: PPUSH
43567: LD_VAR 0 2
43571: PPUSH
43572: EMPTY
43573: PPUSH
43574: CALL_OW 1
43578: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
43579: LD_ADDR_EXP 20
43583: PUSH
43584: LD_EXP 20
43588: PPUSH
43589: LD_VAR 0 2
43593: PPUSH
43594: EMPTY
43595: PPUSH
43596: CALL_OW 1
43600: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
43601: LD_ADDR_EXP 21
43605: PUSH
43606: LD_EXP 21
43610: PPUSH
43611: LD_VAR 0 2
43615: PPUSH
43616: EMPTY
43617: PPUSH
43618: CALL_OW 1
43622: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
43623: LD_ADDR_EXP 22
43627: PUSH
43628: LD_EXP 22
43632: PPUSH
43633: LD_VAR 0 2
43637: PPUSH
43638: LD_EXP 14
43642: PUSH
43643: LD_VAR 0 2
43647: ARRAY
43648: PPUSH
43649: LD_INT 2
43651: PUSH
43652: LD_INT 30
43654: PUSH
43655: LD_INT 32
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 30
43664: PUSH
43665: LD_INT 33
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: LIST
43676: PPUSH
43677: CALL_OW 72
43681: PPUSH
43682: CALL_OW 1
43686: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
43687: LD_ADDR_EXP 23
43691: PUSH
43692: LD_EXP 23
43696: PPUSH
43697: LD_VAR 0 2
43701: PPUSH
43702: LD_EXP 14
43706: PUSH
43707: LD_VAR 0 2
43711: ARRAY
43712: PPUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 30
43718: PUSH
43719: LD_INT 32
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 30
43728: PUSH
43729: LD_INT 31
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 58
43743: PUSH
43744: EMPTY
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PPUSH
43751: CALL_OW 72
43755: PPUSH
43756: CALL_OW 1
43760: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
43761: LD_ADDR_EXP 24
43765: PUSH
43766: LD_EXP 24
43770: PPUSH
43771: LD_VAR 0 2
43775: PPUSH
43776: EMPTY
43777: PPUSH
43778: CALL_OW 1
43782: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
43783: LD_ADDR_EXP 28
43787: PUSH
43788: LD_EXP 28
43792: PPUSH
43793: LD_VAR 0 2
43797: PPUSH
43798: EMPTY
43799: PPUSH
43800: CALL_OW 1
43804: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
43805: LD_ADDR_EXP 27
43809: PUSH
43810: LD_EXP 27
43814: PPUSH
43815: LD_VAR 0 2
43819: PPUSH
43820: EMPTY
43821: PPUSH
43822: CALL_OW 1
43826: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
43827: LD_ADDR_EXP 29
43831: PUSH
43832: LD_EXP 29
43836: PPUSH
43837: LD_VAR 0 2
43841: PPUSH
43842: EMPTY
43843: PPUSH
43844: CALL_OW 1
43848: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
43849: LD_ADDR_EXP 30
43853: PUSH
43854: LD_EXP 30
43858: PPUSH
43859: LD_VAR 0 2
43863: PPUSH
43864: EMPTY
43865: PPUSH
43866: CALL_OW 1
43870: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
43871: LD_ADDR_EXP 31
43875: PUSH
43876: LD_EXP 31
43880: PPUSH
43881: LD_VAR 0 2
43885: PPUSH
43886: EMPTY
43887: PPUSH
43888: CALL_OW 1
43892: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
43893: LD_ADDR_EXP 32
43897: PUSH
43898: LD_EXP 32
43902: PPUSH
43903: LD_VAR 0 2
43907: PPUSH
43908: EMPTY
43909: PPUSH
43910: CALL_OW 1
43914: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
43915: LD_ADDR_EXP 33
43919: PUSH
43920: LD_EXP 33
43924: PPUSH
43925: LD_VAR 0 2
43929: PPUSH
43930: EMPTY
43931: PPUSH
43932: CALL_OW 1
43936: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
43937: LD_ADDR_EXP 34
43941: PUSH
43942: LD_EXP 34
43946: PPUSH
43947: LD_VAR 0 2
43951: PPUSH
43952: EMPTY
43953: PPUSH
43954: CALL_OW 1
43958: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
43959: LD_ADDR_EXP 35
43963: PUSH
43964: LD_EXP 35
43968: PPUSH
43969: LD_VAR 0 2
43973: PPUSH
43974: EMPTY
43975: PPUSH
43976: CALL_OW 1
43980: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
43981: LD_ADDR_EXP 36
43985: PUSH
43986: LD_EXP 36
43990: PPUSH
43991: LD_VAR 0 2
43995: PPUSH
43996: EMPTY
43997: PPUSH
43998: CALL_OW 1
44002: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
44003: LD_ADDR_EXP 25
44007: PUSH
44008: LD_EXP 25
44012: PPUSH
44013: LD_VAR 0 2
44017: PPUSH
44018: LD_INT 0
44020: PPUSH
44021: CALL_OW 1
44025: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
44026: LD_ADDR_EXP 38
44030: PUSH
44031: LD_EXP 38
44035: PPUSH
44036: LD_VAR 0 2
44040: PPUSH
44041: LD_INT 0
44043: PPUSH
44044: CALL_OW 1
44048: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
44049: LD_ADDR_EXP 26
44053: PUSH
44054: LD_EXP 26
44058: PPUSH
44059: LD_VAR 0 2
44063: PPUSH
44064: EMPTY
44065: PPUSH
44066: CALL_OW 1
44070: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
44071: LD_ADDR_EXP 37
44075: PUSH
44076: LD_EXP 37
44080: PPUSH
44081: LD_VAR 0 2
44085: PPUSH
44086: LD_INT 0
44088: PPUSH
44089: CALL_OW 1
44093: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
44094: LD_ADDR_EXP 39
44098: PUSH
44099: LD_EXP 39
44103: PPUSH
44104: LD_VAR 0 2
44108: PPUSH
44109: EMPTY
44110: PPUSH
44111: CALL_OW 1
44115: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
44116: LD_ADDR_EXP 42
44120: PUSH
44121: LD_EXP 42
44125: PPUSH
44126: LD_VAR 0 2
44130: PPUSH
44131: LD_INT 0
44133: PPUSH
44134: CALL_OW 1
44138: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
44139: LD_ADDR_EXP 43
44143: PUSH
44144: LD_EXP 43
44148: PPUSH
44149: LD_VAR 0 2
44153: PPUSH
44154: EMPTY
44155: PPUSH
44156: CALL_OW 1
44160: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44161: LD_ADDR_EXP 44
44165: PUSH
44166: LD_EXP 44
44170: PPUSH
44171: LD_VAR 0 2
44175: PPUSH
44176: EMPTY
44177: PPUSH
44178: CALL_OW 1
44182: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
44183: LD_ADDR_EXP 45
44187: PUSH
44188: LD_EXP 45
44192: PPUSH
44193: LD_VAR 0 2
44197: PPUSH
44198: EMPTY
44199: PPUSH
44200: CALL_OW 1
44204: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
44205: LD_ADDR_EXP 47
44209: PUSH
44210: LD_EXP 47
44214: PPUSH
44215: LD_VAR 0 2
44219: PPUSH
44220: LD_EXP 14
44224: PUSH
44225: LD_VAR 0 2
44229: ARRAY
44230: PPUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 30
44236: PUSH
44237: LD_INT 6
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 30
44246: PUSH
44247: LD_INT 7
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 30
44256: PUSH
44257: LD_INT 8
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: PPUSH
44270: CALL_OW 72
44274: PPUSH
44275: CALL_OW 1
44279: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
44280: LD_ADDR_EXP 48
44284: PUSH
44285: LD_EXP 48
44289: PPUSH
44290: LD_VAR 0 2
44294: PPUSH
44295: EMPTY
44296: PPUSH
44297: CALL_OW 1
44301: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
44302: LD_ADDR_EXP 49
44306: PUSH
44307: LD_EXP 49
44311: PPUSH
44312: LD_VAR 0 2
44316: PPUSH
44317: EMPTY
44318: PPUSH
44319: CALL_OW 1
44323: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
44324: LD_ADDR_EXP 50
44328: PUSH
44329: LD_EXP 50
44333: PPUSH
44334: LD_VAR 0 2
44338: PPUSH
44339: EMPTY
44340: PPUSH
44341: CALL_OW 1
44345: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
44346: LD_ADDR_EXP 51
44350: PUSH
44351: LD_EXP 51
44355: PPUSH
44356: LD_VAR 0 2
44360: PPUSH
44361: EMPTY
44362: PPUSH
44363: CALL_OW 1
44367: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
44368: LD_ADDR_EXP 52
44372: PUSH
44373: LD_EXP 52
44377: PPUSH
44378: LD_VAR 0 2
44382: PPUSH
44383: EMPTY
44384: PPUSH
44385: CALL_OW 1
44389: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
44390: LD_ADDR_EXP 53
44394: PUSH
44395: LD_EXP 53
44399: PPUSH
44400: LD_VAR 0 2
44404: PPUSH
44405: EMPTY
44406: PPUSH
44407: CALL_OW 1
44411: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
44412: LD_ADDR_EXP 54
44416: PUSH
44417: LD_EXP 54
44421: PPUSH
44422: LD_VAR 0 2
44426: PPUSH
44427: EMPTY
44428: PPUSH
44429: CALL_OW 1
44433: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
44434: LD_ADDR_EXP 55
44438: PUSH
44439: LD_EXP 55
44443: PPUSH
44444: LD_VAR 0 2
44448: PPUSH
44449: EMPTY
44450: PPUSH
44451: CALL_OW 1
44455: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
44456: LD_ADDR_EXP 56
44460: PUSH
44461: LD_EXP 56
44465: PPUSH
44466: LD_VAR 0 2
44470: PPUSH
44471: LD_INT 0
44473: PPUSH
44474: CALL_OW 1
44478: ST_TO_ADDR
// end ;
44479: GO 43403
44481: POP
44482: POP
// MC_InitSides ( ) ;
44483: CALL 44769 0 0
// MC_InitResearch ( ) ;
44487: CALL 44508 0 0
// CustomInitMacro ( ) ;
44491: CALL 211 0 0
// skirmish := true ;
44495: LD_ADDR_EXP 12
44499: PUSH
44500: LD_INT 1
44502: ST_TO_ADDR
// end ;
44503: LD_VAR 0 1
44507: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
44508: LD_INT 0
44510: PPUSH
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
// if not mc_bases then
44516: LD_EXP 14
44520: NOT
44521: IFFALSE 44525
// exit ;
44523: GO 44764
// for i = 1 to 8 do
44525: LD_ADDR_VAR 0 2
44529: PUSH
44530: DOUBLE
44531: LD_INT 1
44533: DEC
44534: ST_TO_ADDR
44535: LD_INT 8
44537: PUSH
44538: FOR_TO
44539: IFFALSE 44565
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
44541: LD_ADDR_EXP 41
44545: PUSH
44546: LD_EXP 41
44550: PPUSH
44551: LD_VAR 0 2
44555: PPUSH
44556: EMPTY
44557: PPUSH
44558: CALL_OW 1
44562: ST_TO_ADDR
44563: GO 44538
44565: POP
44566: POP
// tmp := [ ] ;
44567: LD_ADDR_VAR 0 5
44571: PUSH
44572: EMPTY
44573: ST_TO_ADDR
// for i = 1 to mc_sides do
44574: LD_ADDR_VAR 0 2
44578: PUSH
44579: DOUBLE
44580: LD_INT 1
44582: DEC
44583: ST_TO_ADDR
44584: LD_EXP 40
44588: PUSH
44589: FOR_TO
44590: IFFALSE 44648
// if not mc_sides [ i ] in tmp then
44592: LD_EXP 40
44596: PUSH
44597: LD_VAR 0 2
44601: ARRAY
44602: PUSH
44603: LD_VAR 0 5
44607: IN
44608: NOT
44609: IFFALSE 44646
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
44611: LD_ADDR_VAR 0 5
44615: PUSH
44616: LD_VAR 0 5
44620: PPUSH
44621: LD_VAR 0 5
44625: PUSH
44626: LD_INT 1
44628: PLUS
44629: PPUSH
44630: LD_EXP 40
44634: PUSH
44635: LD_VAR 0 2
44639: ARRAY
44640: PPUSH
44641: CALL_OW 2
44645: ST_TO_ADDR
44646: GO 44589
44648: POP
44649: POP
// if not tmp then
44650: LD_VAR 0 5
44654: NOT
44655: IFFALSE 44659
// exit ;
44657: GO 44764
// for j in tmp do
44659: LD_ADDR_VAR 0 3
44663: PUSH
44664: LD_VAR 0 5
44668: PUSH
44669: FOR_IN
44670: IFFALSE 44762
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
44672: LD_ADDR_VAR 0 6
44676: PUSH
44677: LD_INT 22
44679: PUSH
44680: LD_VAR 0 3
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PPUSH
44689: CALL_OW 69
44693: ST_TO_ADDR
// if not un then
44694: LD_VAR 0 6
44698: NOT
44699: IFFALSE 44703
// continue ;
44701: GO 44669
// nation := GetNation ( un [ 1 ] ) ;
44703: LD_ADDR_VAR 0 4
44707: PUSH
44708: LD_VAR 0 6
44712: PUSH
44713: LD_INT 1
44715: ARRAY
44716: PPUSH
44717: CALL_OW 248
44721: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
44722: LD_ADDR_EXP 41
44726: PUSH
44727: LD_EXP 41
44731: PPUSH
44732: LD_VAR 0 3
44736: PPUSH
44737: LD_VAR 0 3
44741: PPUSH
44742: LD_VAR 0 4
44746: PPUSH
44747: LD_INT 1
44749: PPUSH
44750: CALL 4523 0 3
44754: PPUSH
44755: CALL_OW 1
44759: ST_TO_ADDR
// end ;
44760: GO 44669
44762: POP
44763: POP
// end ;
44764: LD_VAR 0 1
44768: RET
// export function MC_InitSides ( ) ; var i ; begin
44769: LD_INT 0
44771: PPUSH
44772: PPUSH
// if not mc_bases then
44773: LD_EXP 14
44777: NOT
44778: IFFALSE 44782
// exit ;
44780: GO 44856
// for i = 1 to mc_bases do
44782: LD_ADDR_VAR 0 2
44786: PUSH
44787: DOUBLE
44788: LD_INT 1
44790: DEC
44791: ST_TO_ADDR
44792: LD_EXP 14
44796: PUSH
44797: FOR_TO
44798: IFFALSE 44854
// if mc_bases [ i ] then
44800: LD_EXP 14
44804: PUSH
44805: LD_VAR 0 2
44809: ARRAY
44810: IFFALSE 44852
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
44812: LD_ADDR_EXP 40
44816: PUSH
44817: LD_EXP 40
44821: PPUSH
44822: LD_VAR 0 2
44826: PPUSH
44827: LD_EXP 14
44831: PUSH
44832: LD_VAR 0 2
44836: ARRAY
44837: PUSH
44838: LD_INT 1
44840: ARRAY
44841: PPUSH
44842: CALL_OW 255
44846: PPUSH
44847: CALL_OW 1
44851: ST_TO_ADDR
44852: GO 44797
44854: POP
44855: POP
// end ;
44856: LD_VAR 0 1
44860: RET
// every 0 0$01 trigger skirmish do
44861: LD_EXP 12
44865: IFFALSE 45019
44867: GO 44869
44869: DISABLE
// begin enable ;
44870: ENABLE
// MC_CheckBuildings ( ) ;
44871: CALL 49517 0 0
// MC_CheckPeopleLife ( ) ;
44875: CALL 49642 0 0
// RaiseSailEvent ( 100 ) ;
44879: LD_INT 100
44881: PPUSH
44882: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
44886: LD_INT 103
44888: PPUSH
44889: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
44893: LD_INT 104
44895: PPUSH
44896: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
44900: LD_INT 105
44902: PPUSH
44903: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
44907: LD_INT 106
44909: PPUSH
44910: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
44914: LD_INT 107
44916: PPUSH
44917: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
44921: LD_INT 108
44923: PPUSH
44924: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
44928: LD_INT 109
44930: PPUSH
44931: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
44935: LD_INT 110
44937: PPUSH
44938: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
44942: LD_INT 111
44944: PPUSH
44945: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
44949: LD_INT 112
44951: PPUSH
44952: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
44956: LD_INT 113
44958: PPUSH
44959: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
44963: LD_INT 120
44965: PPUSH
44966: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
44970: LD_INT 121
44972: PPUSH
44973: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
44977: LD_INT 122
44979: PPUSH
44980: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
44984: LD_INT 123
44986: PPUSH
44987: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
44991: LD_INT 124
44993: PPUSH
44994: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
44998: LD_INT 125
45000: PPUSH
45001: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
45005: LD_INT 126
45007: PPUSH
45008: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
45012: LD_INT 200
45014: PPUSH
45015: CALL_OW 427
// end ;
45019: END
// on SailEvent ( event ) do begin if event < 100 then
45020: LD_VAR 0 1
45024: PUSH
45025: LD_INT 100
45027: LESS
45028: IFFALSE 45039
// CustomEvent ( event ) ;
45030: LD_VAR 0 1
45034: PPUSH
45035: CALL 4422 0 1
// if event = 100 then
45039: LD_VAR 0 1
45043: PUSH
45044: LD_INT 100
45046: EQUAL
45047: IFFALSE 45053
// MC_ClassManager ( ) ;
45049: CALL 45445 0 0
// if event = 101 then
45053: LD_VAR 0 1
45057: PUSH
45058: LD_INT 101
45060: EQUAL
45061: IFFALSE 45067
// MC_RepairBuildings ( ) ;
45063: CALL 50227 0 0
// if event = 102 then
45067: LD_VAR 0 1
45071: PUSH
45072: LD_INT 102
45074: EQUAL
45075: IFFALSE 45081
// MC_Heal ( ) ;
45077: CALL 51086 0 0
// if event = 103 then
45081: LD_VAR 0 1
45085: PUSH
45086: LD_INT 103
45088: EQUAL
45089: IFFALSE 45095
// MC_Build ( ) ;
45091: CALL 51508 0 0
// if event = 104 then
45095: LD_VAR 0 1
45099: PUSH
45100: LD_INT 104
45102: EQUAL
45103: IFFALSE 45109
// MC_TurretWeapon ( ) ;
45105: CALL 53121 0 0
// if event = 105 then
45109: LD_VAR 0 1
45113: PUSH
45114: LD_INT 105
45116: EQUAL
45117: IFFALSE 45123
// MC_BuildUpgrade ( ) ;
45119: CALL 52672 0 0
// if event = 106 then
45123: LD_VAR 0 1
45127: PUSH
45128: LD_INT 106
45130: EQUAL
45131: IFFALSE 45137
// MC_PlantMines ( ) ;
45133: CALL 53551 0 0
// if event = 107 then
45137: LD_VAR 0 1
45141: PUSH
45142: LD_INT 107
45144: EQUAL
45145: IFFALSE 45151
// MC_CollectCrates ( ) ;
45147: CALL 54349 0 0
// if event = 108 then
45151: LD_VAR 0 1
45155: PUSH
45156: LD_INT 108
45158: EQUAL
45159: IFFALSE 45165
// MC_LinkRemoteControl ( ) ;
45161: CALL 56125 0 0
// if event = 109 then
45165: LD_VAR 0 1
45169: PUSH
45170: LD_INT 109
45172: EQUAL
45173: IFFALSE 45179
// MC_ProduceVehicle ( ) ;
45175: CALL 56306 0 0
// if event = 110 then
45179: LD_VAR 0 1
45183: PUSH
45184: LD_INT 110
45186: EQUAL
45187: IFFALSE 45193
// MC_SendAttack ( ) ;
45189: CALL 56772 0 0
// if event = 111 then
45193: LD_VAR 0 1
45197: PUSH
45198: LD_INT 111
45200: EQUAL
45201: IFFALSE 45207
// MC_Defend ( ) ;
45203: CALL 56880 0 0
// if event = 112 then
45207: LD_VAR 0 1
45211: PUSH
45212: LD_INT 112
45214: EQUAL
45215: IFFALSE 45221
// MC_Research ( ) ;
45217: CALL 57485 0 0
// if event = 113 then
45221: LD_VAR 0 1
45225: PUSH
45226: LD_INT 113
45228: EQUAL
45229: IFFALSE 45235
// MC_MinesTrigger ( ) ;
45231: CALL 58599 0 0
// if event = 120 then
45235: LD_VAR 0 1
45239: PUSH
45240: LD_INT 120
45242: EQUAL
45243: IFFALSE 45249
// MC_RepairVehicle ( ) ;
45245: CALL 58698 0 0
// if event = 121 then
45249: LD_VAR 0 1
45253: PUSH
45254: LD_INT 121
45256: EQUAL
45257: IFFALSE 45263
// MC_TameApe ( ) ;
45259: CALL 59428 0 0
// if event = 122 then
45263: LD_VAR 0 1
45267: PUSH
45268: LD_INT 122
45270: EQUAL
45271: IFFALSE 45277
// MC_ChangeApeClass ( ) ;
45273: CALL 60257 0 0
// if event = 123 then
45277: LD_VAR 0 1
45281: PUSH
45282: LD_INT 123
45284: EQUAL
45285: IFFALSE 45291
// MC_Bazooka ( ) ;
45287: CALL 60907 0 0
// if event = 124 then
45291: LD_VAR 0 1
45295: PUSH
45296: LD_INT 124
45298: EQUAL
45299: IFFALSE 45305
// MC_TeleportExit ( ) ;
45301: CALL 61105 0 0
// if event = 125 then
45305: LD_VAR 0 1
45309: PUSH
45310: LD_INT 125
45312: EQUAL
45313: IFFALSE 45319
// MC_Deposits ( ) ;
45315: CALL 61752 0 0
// if event = 126 then
45319: LD_VAR 0 1
45323: PUSH
45324: LD_INT 126
45326: EQUAL
45327: IFFALSE 45333
// MC_RemoteDriver ( ) ;
45329: CALL 62377 0 0
// if event = 200 then
45333: LD_VAR 0 1
45337: PUSH
45338: LD_INT 200
45340: EQUAL
45341: IFFALSE 45347
// MC_Idle ( ) ;
45343: CALL 64326 0 0
// end ;
45347: PPOPN 1
45349: END
// export function MC_Reset ( base , tag ) ; var i ; begin
45350: LD_INT 0
45352: PPUSH
45353: PPUSH
// if not mc_bases [ base ] or not tag then
45354: LD_EXP 14
45358: PUSH
45359: LD_VAR 0 1
45363: ARRAY
45364: NOT
45365: PUSH
45366: LD_VAR 0 2
45370: NOT
45371: OR
45372: IFFALSE 45376
// exit ;
45374: GO 45440
// for i in mc_bases [ base ] union mc_ape [ base ] do
45376: LD_ADDR_VAR 0 4
45380: PUSH
45381: LD_EXP 14
45385: PUSH
45386: LD_VAR 0 1
45390: ARRAY
45391: PUSH
45392: LD_EXP 43
45396: PUSH
45397: LD_VAR 0 1
45401: ARRAY
45402: UNION
45403: PUSH
45404: FOR_IN
45405: IFFALSE 45438
// if GetTag ( i ) = tag then
45407: LD_VAR 0 4
45411: PPUSH
45412: CALL_OW 110
45416: PUSH
45417: LD_VAR 0 2
45421: EQUAL
45422: IFFALSE 45436
// SetTag ( i , 0 ) ;
45424: LD_VAR 0 4
45428: PPUSH
45429: LD_INT 0
45431: PPUSH
45432: CALL_OW 109
45436: GO 45404
45438: POP
45439: POP
// end ;
45440: LD_VAR 0 3
45444: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
45445: LD_INT 0
45447: PPUSH
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
// if not mc_bases then
45455: LD_EXP 14
45459: NOT
45460: IFFALSE 45464
// exit ;
45462: GO 45922
// for i = 1 to mc_bases do
45464: LD_ADDR_VAR 0 2
45468: PUSH
45469: DOUBLE
45470: LD_INT 1
45472: DEC
45473: ST_TO_ADDR
45474: LD_EXP 14
45478: PUSH
45479: FOR_TO
45480: IFFALSE 45920
// begin tmp := MC_ClassCheckReq ( i ) ;
45482: LD_ADDR_VAR 0 4
45486: PUSH
45487: LD_VAR 0 2
45491: PPUSH
45492: CALL 45927 0 1
45496: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
45497: LD_ADDR_EXP 55
45501: PUSH
45502: LD_EXP 55
45506: PPUSH
45507: LD_VAR 0 2
45511: PPUSH
45512: LD_VAR 0 4
45516: PPUSH
45517: CALL_OW 1
45521: ST_TO_ADDR
// if not tmp then
45522: LD_VAR 0 4
45526: NOT
45527: IFFALSE 45531
// continue ;
45529: GO 45479
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
45531: LD_ADDR_VAR 0 6
45535: PUSH
45536: LD_EXP 14
45540: PUSH
45541: LD_VAR 0 2
45545: ARRAY
45546: PPUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 30
45552: PUSH
45553: LD_INT 4
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 30
45562: PUSH
45563: LD_INT 5
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: PPUSH
45575: CALL_OW 72
45579: PUSH
45580: LD_EXP 14
45584: PUSH
45585: LD_VAR 0 2
45589: ARRAY
45590: PPUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 30
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 30
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: PPUSH
45619: CALL_OW 72
45623: PUSH
45624: LD_EXP 14
45628: PUSH
45629: LD_VAR 0 2
45633: ARRAY
45634: PPUSH
45635: LD_INT 30
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PPUSH
45645: CALL_OW 72
45649: PUSH
45650: LD_EXP 14
45654: PUSH
45655: LD_VAR 0 2
45659: ARRAY
45660: PPUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 30
45666: PUSH
45667: LD_INT 6
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 30
45676: PUSH
45677: LD_INT 7
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 30
45686: PUSH
45687: LD_INT 8
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: PPUSH
45700: CALL_OW 72
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// for j = 1 to 4 do
45711: LD_ADDR_VAR 0 3
45715: PUSH
45716: DOUBLE
45717: LD_INT 1
45719: DEC
45720: ST_TO_ADDR
45721: LD_INT 4
45723: PUSH
45724: FOR_TO
45725: IFFALSE 45916
// begin if not tmp [ j ] then
45727: LD_VAR 0 4
45731: PUSH
45732: LD_VAR 0 3
45736: ARRAY
45737: NOT
45738: IFFALSE 45742
// continue ;
45740: GO 45724
// for p in tmp [ j ] do
45742: LD_ADDR_VAR 0 5
45746: PUSH
45747: LD_VAR 0 4
45751: PUSH
45752: LD_VAR 0 3
45756: ARRAY
45757: PUSH
45758: FOR_IN
45759: IFFALSE 45912
// begin if not b [ j ] then
45761: LD_VAR 0 6
45765: PUSH
45766: LD_VAR 0 3
45770: ARRAY
45771: NOT
45772: IFFALSE 45776
// break ;
45774: GO 45912
// e := 0 ;
45776: LD_ADDR_VAR 0 7
45780: PUSH
45781: LD_INT 0
45783: ST_TO_ADDR
// for k in b [ j ] do
45784: LD_ADDR_VAR 0 8
45788: PUSH
45789: LD_VAR 0 6
45793: PUSH
45794: LD_VAR 0 3
45798: ARRAY
45799: PUSH
45800: FOR_IN
45801: IFFALSE 45828
// if IsNotFull ( k ) then
45803: LD_VAR 0 8
45807: PPUSH
45808: CALL 6672 0 1
45812: IFFALSE 45826
// begin e := k ;
45814: LD_ADDR_VAR 0 7
45818: PUSH
45819: LD_VAR 0 8
45823: ST_TO_ADDR
// break ;
45824: GO 45828
// end ;
45826: GO 45800
45828: POP
45829: POP
// if e and not UnitGoingToBuilding ( p , e ) then
45830: LD_VAR 0 7
45834: PUSH
45835: LD_VAR 0 5
45839: PPUSH
45840: LD_VAR 0 7
45844: PPUSH
45845: CALL 39092 0 2
45849: NOT
45850: AND
45851: IFFALSE 45910
// begin if IsInUnit ( p ) then
45853: LD_VAR 0 5
45857: PPUSH
45858: CALL_OW 310
45862: IFFALSE 45873
// ComExitBuilding ( p ) ;
45864: LD_VAR 0 5
45868: PPUSH
45869: CALL_OW 122
// ComEnterUnit ( p , e ) ;
45873: LD_VAR 0 5
45877: PPUSH
45878: LD_VAR 0 7
45882: PPUSH
45883: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
45887: LD_VAR 0 5
45891: PPUSH
45892: LD_VAR 0 3
45896: PPUSH
45897: CALL_OW 183
// AddComExitBuilding ( p ) ;
45901: LD_VAR 0 5
45905: PPUSH
45906: CALL_OW 182
// end ; end ;
45910: GO 45758
45912: POP
45913: POP
// end ;
45914: GO 45724
45916: POP
45917: POP
// end ;
45918: GO 45479
45920: POP
45921: POP
// end ;
45922: LD_VAR 0 1
45926: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
45927: LD_INT 0
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
45935: PPUSH
45936: PPUSH
45937: PPUSH
45938: PPUSH
45939: PPUSH
45940: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45941: LD_VAR 0 1
45945: NOT
45946: PUSH
45947: LD_EXP 14
45951: PUSH
45952: LD_VAR 0 1
45956: ARRAY
45957: NOT
45958: OR
45959: PUSH
45960: LD_EXP 14
45964: PUSH
45965: LD_VAR 0 1
45969: ARRAY
45970: PPUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 30
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 30
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: PPUSH
45999: CALL_OW 72
46003: NOT
46004: OR
46005: IFFALSE 46009
// exit ;
46007: GO 49512
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46009: LD_ADDR_VAR 0 4
46013: PUSH
46014: LD_EXP 14
46018: PUSH
46019: LD_VAR 0 1
46023: ARRAY
46024: PPUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 25
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 25
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 25
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 25
46060: PUSH
46061: LD_INT 4
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 25
46070: PUSH
46071: LD_INT 5
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 25
46080: PUSH
46081: LD_INT 8
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 25
46090: PUSH
46091: LD_INT 9
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: PPUSH
46108: CALL_OW 72
46112: ST_TO_ADDR
// if not tmp then
46113: LD_VAR 0 4
46117: NOT
46118: IFFALSE 46122
// exit ;
46120: GO 49512
// for i in tmp do
46122: LD_ADDR_VAR 0 3
46126: PUSH
46127: LD_VAR 0 4
46131: PUSH
46132: FOR_IN
46133: IFFALSE 46164
// if GetTag ( i ) then
46135: LD_VAR 0 3
46139: PPUSH
46140: CALL_OW 110
46144: IFFALSE 46162
// tmp := tmp diff i ;
46146: LD_ADDR_VAR 0 4
46150: PUSH
46151: LD_VAR 0 4
46155: PUSH
46156: LD_VAR 0 3
46160: DIFF
46161: ST_TO_ADDR
46162: GO 46132
46164: POP
46165: POP
// if not tmp then
46166: LD_VAR 0 4
46170: NOT
46171: IFFALSE 46175
// exit ;
46173: GO 49512
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46175: LD_ADDR_VAR 0 5
46179: PUSH
46180: LD_EXP 14
46184: PUSH
46185: LD_VAR 0 1
46189: ARRAY
46190: PPUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 25
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 25
46206: PUSH
46207: LD_INT 5
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 25
46216: PUSH
46217: LD_INT 8
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 25
46226: PUSH
46227: LD_INT 9
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: PPUSH
46241: CALL_OW 72
46245: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
46246: LD_ADDR_VAR 0 6
46250: PUSH
46251: LD_EXP 14
46255: PUSH
46256: LD_VAR 0 1
46260: ARRAY
46261: PPUSH
46262: LD_INT 25
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PPUSH
46272: CALL_OW 72
46276: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
46277: LD_ADDR_VAR 0 7
46281: PUSH
46282: LD_EXP 14
46286: PUSH
46287: LD_VAR 0 1
46291: ARRAY
46292: PPUSH
46293: LD_INT 25
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PPUSH
46303: CALL_OW 72
46307: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
46308: LD_ADDR_VAR 0 8
46312: PUSH
46313: LD_EXP 14
46317: PUSH
46318: LD_VAR 0 1
46322: ARRAY
46323: PPUSH
46324: LD_INT 25
46326: PUSH
46327: LD_INT 4
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 24
46336: PUSH
46337: LD_INT 251
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PPUSH
46348: CALL_OW 72
46352: ST_TO_ADDR
// if mc_scan [ base ] then
46353: LD_EXP 37
46357: PUSH
46358: LD_VAR 0 1
46362: ARRAY
46363: IFFALSE 46824
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
46365: LD_ADDR_EXP 56
46369: PUSH
46370: LD_EXP 56
46374: PPUSH
46375: LD_VAR 0 1
46379: PPUSH
46380: LD_INT 4
46382: PPUSH
46383: CALL_OW 1
46387: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46388: LD_ADDR_VAR 0 12
46392: PUSH
46393: LD_EXP 14
46397: PUSH
46398: LD_VAR 0 1
46402: ARRAY
46403: PPUSH
46404: LD_INT 2
46406: PUSH
46407: LD_INT 30
46409: PUSH
46410: LD_INT 4
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 30
46419: PUSH
46420: LD_INT 5
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: PPUSH
46432: CALL_OW 72
46436: ST_TO_ADDR
// if not b then
46437: LD_VAR 0 12
46441: NOT
46442: IFFALSE 46446
// exit ;
46444: GO 49512
// p := [ ] ;
46446: LD_ADDR_VAR 0 11
46450: PUSH
46451: EMPTY
46452: ST_TO_ADDR
// if sci >= 2 then
46453: LD_VAR 0 8
46457: PUSH
46458: LD_INT 2
46460: GREATEREQUAL
46461: IFFALSE 46492
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
46463: LD_ADDR_VAR 0 8
46467: PUSH
46468: LD_VAR 0 8
46472: PUSH
46473: LD_INT 1
46475: ARRAY
46476: PUSH
46477: LD_VAR 0 8
46481: PUSH
46482: LD_INT 2
46484: ARRAY
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: ST_TO_ADDR
46490: GO 46553
// if sci = 1 then
46492: LD_VAR 0 8
46496: PUSH
46497: LD_INT 1
46499: EQUAL
46500: IFFALSE 46521
// sci := [ sci [ 1 ] ] else
46502: LD_ADDR_VAR 0 8
46506: PUSH
46507: LD_VAR 0 8
46511: PUSH
46512: LD_INT 1
46514: ARRAY
46515: PUSH
46516: EMPTY
46517: LIST
46518: ST_TO_ADDR
46519: GO 46553
// if sci = 0 then
46521: LD_VAR 0 8
46525: PUSH
46526: LD_INT 0
46528: EQUAL
46529: IFFALSE 46553
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
46531: LD_ADDR_VAR 0 11
46535: PUSH
46536: LD_VAR 0 4
46540: PPUSH
46541: LD_INT 4
46543: PPUSH
46544: CALL 38955 0 2
46548: PUSH
46549: LD_INT 1
46551: ARRAY
46552: ST_TO_ADDR
// if eng > 4 then
46553: LD_VAR 0 6
46557: PUSH
46558: LD_INT 4
46560: GREATER
46561: IFFALSE 46607
// for i = eng downto 4 do
46563: LD_ADDR_VAR 0 3
46567: PUSH
46568: DOUBLE
46569: LD_VAR 0 6
46573: INC
46574: ST_TO_ADDR
46575: LD_INT 4
46577: PUSH
46578: FOR_DOWNTO
46579: IFFALSE 46605
// eng := eng diff eng [ i ] ;
46581: LD_ADDR_VAR 0 6
46585: PUSH
46586: LD_VAR 0 6
46590: PUSH
46591: LD_VAR 0 6
46595: PUSH
46596: LD_VAR 0 3
46600: ARRAY
46601: DIFF
46602: ST_TO_ADDR
46603: GO 46578
46605: POP
46606: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
46607: LD_ADDR_VAR 0 4
46611: PUSH
46612: LD_VAR 0 4
46616: PUSH
46617: LD_VAR 0 5
46621: PUSH
46622: LD_VAR 0 6
46626: UNION
46627: PUSH
46628: LD_VAR 0 7
46632: UNION
46633: PUSH
46634: LD_VAR 0 8
46638: UNION
46639: DIFF
46640: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
46641: LD_ADDR_VAR 0 13
46645: PUSH
46646: LD_EXP 14
46650: PUSH
46651: LD_VAR 0 1
46655: ARRAY
46656: PPUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 30
46662: PUSH
46663: LD_INT 32
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 30
46672: PUSH
46673: LD_INT 31
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: PPUSH
46685: CALL_OW 72
46689: PUSH
46690: LD_EXP 14
46694: PUSH
46695: LD_VAR 0 1
46699: ARRAY
46700: PPUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 30
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 30
46716: PUSH
46717: LD_INT 5
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: PPUSH
46729: CALL_OW 72
46733: PUSH
46734: LD_INT 6
46736: MUL
46737: PLUS
46738: ST_TO_ADDR
// if bcount < tmp then
46739: LD_VAR 0 13
46743: PUSH
46744: LD_VAR 0 4
46748: LESS
46749: IFFALSE 46795
// for i = tmp downto bcount do
46751: LD_ADDR_VAR 0 3
46755: PUSH
46756: DOUBLE
46757: LD_VAR 0 4
46761: INC
46762: ST_TO_ADDR
46763: LD_VAR 0 13
46767: PUSH
46768: FOR_DOWNTO
46769: IFFALSE 46793
// tmp := Delete ( tmp , tmp ) ;
46771: LD_ADDR_VAR 0 4
46775: PUSH
46776: LD_VAR 0 4
46780: PPUSH
46781: LD_VAR 0 4
46785: PPUSH
46786: CALL_OW 3
46790: ST_TO_ADDR
46791: GO 46768
46793: POP
46794: POP
// result := [ tmp , 0 , 0 , p ] ;
46795: LD_ADDR_VAR 0 2
46799: PUSH
46800: LD_VAR 0 4
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_VAR 0 11
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: ST_TO_ADDR
// exit ;
46822: GO 49512
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46824: LD_EXP 14
46828: PUSH
46829: LD_VAR 0 1
46833: ARRAY
46834: PPUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 30
46840: PUSH
46841: LD_INT 6
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 30
46850: PUSH
46851: LD_INT 7
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 30
46860: PUSH
46861: LD_INT 8
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: PPUSH
46874: CALL_OW 72
46878: NOT
46879: PUSH
46880: LD_EXP 14
46884: PUSH
46885: LD_VAR 0 1
46889: ARRAY
46890: PPUSH
46891: LD_INT 30
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PPUSH
46901: CALL_OW 72
46905: NOT
46906: AND
46907: IFFALSE 46979
// begin if eng = tmp then
46909: LD_VAR 0 6
46913: PUSH
46914: LD_VAR 0 4
46918: EQUAL
46919: IFFALSE 46923
// exit ;
46921: GO 49512
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
46923: LD_ADDR_EXP 56
46927: PUSH
46928: LD_EXP 56
46932: PPUSH
46933: LD_VAR 0 1
46937: PPUSH
46938: LD_INT 1
46940: PPUSH
46941: CALL_OW 1
46945: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
46946: LD_ADDR_VAR 0 2
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_VAR 0 4
46958: PUSH
46959: LD_VAR 0 6
46963: DIFF
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: ST_TO_ADDR
// exit ;
46977: GO 49512
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
46979: LD_EXP 41
46983: PUSH
46984: LD_EXP 40
46988: PUSH
46989: LD_VAR 0 1
46993: ARRAY
46994: ARRAY
46995: PUSH
46996: LD_EXP 14
47000: PUSH
47001: LD_VAR 0 1
47005: ARRAY
47006: PPUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 30
47012: PUSH
47013: LD_INT 6
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 30
47022: PUSH
47023: LD_INT 7
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 30
47032: PUSH
47033: LD_INT 8
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: PPUSH
47046: CALL_OW 72
47050: AND
47051: PUSH
47052: LD_EXP 14
47056: PUSH
47057: LD_VAR 0 1
47061: ARRAY
47062: PPUSH
47063: LD_INT 30
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PPUSH
47073: CALL_OW 72
47077: NOT
47078: AND
47079: IFFALSE 47293
// begin if sci >= 6 then
47081: LD_VAR 0 8
47085: PUSH
47086: LD_INT 6
47088: GREATEREQUAL
47089: IFFALSE 47093
// exit ;
47091: GO 49512
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
47093: LD_ADDR_EXP 56
47097: PUSH
47098: LD_EXP 56
47102: PPUSH
47103: LD_VAR 0 1
47107: PPUSH
47108: LD_INT 2
47110: PPUSH
47111: CALL_OW 1
47115: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
47116: LD_ADDR_VAR 0 9
47120: PUSH
47121: LD_VAR 0 4
47125: PUSH
47126: LD_VAR 0 8
47130: DIFF
47131: PPUSH
47132: LD_INT 4
47134: PPUSH
47135: CALL 38955 0 2
47139: ST_TO_ADDR
// p := [ ] ;
47140: LD_ADDR_VAR 0 11
47144: PUSH
47145: EMPTY
47146: ST_TO_ADDR
// if sci < 6 and sort > 6 then
47147: LD_VAR 0 8
47151: PUSH
47152: LD_INT 6
47154: LESS
47155: PUSH
47156: LD_VAR 0 9
47160: PUSH
47161: LD_INT 6
47163: GREATER
47164: AND
47165: IFFALSE 47246
// begin for i = 1 to 6 - sci do
47167: LD_ADDR_VAR 0 3
47171: PUSH
47172: DOUBLE
47173: LD_INT 1
47175: DEC
47176: ST_TO_ADDR
47177: LD_INT 6
47179: PUSH
47180: LD_VAR 0 8
47184: MINUS
47185: PUSH
47186: FOR_TO
47187: IFFALSE 47242
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
47189: LD_ADDR_VAR 0 11
47193: PUSH
47194: LD_VAR 0 11
47198: PPUSH
47199: LD_VAR 0 11
47203: PUSH
47204: LD_INT 1
47206: PLUS
47207: PPUSH
47208: LD_VAR 0 9
47212: PUSH
47213: LD_INT 1
47215: ARRAY
47216: PPUSH
47217: CALL_OW 2
47221: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
47222: LD_ADDR_VAR 0 9
47226: PUSH
47227: LD_VAR 0 9
47231: PPUSH
47232: LD_INT 1
47234: PPUSH
47235: CALL_OW 3
47239: ST_TO_ADDR
// end ;
47240: GO 47186
47242: POP
47243: POP
// end else
47244: GO 47266
// if sort then
47246: LD_VAR 0 9
47250: IFFALSE 47266
// p := sort [ 1 ] ;
47252: LD_ADDR_VAR 0 11
47256: PUSH
47257: LD_VAR 0 9
47261: PUSH
47262: LD_INT 1
47264: ARRAY
47265: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
47266: LD_ADDR_VAR 0 2
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_VAR 0 11
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: ST_TO_ADDR
// exit ;
47291: GO 49512
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
47293: LD_EXP 41
47297: PUSH
47298: LD_EXP 40
47302: PUSH
47303: LD_VAR 0 1
47307: ARRAY
47308: ARRAY
47309: PUSH
47310: LD_EXP 14
47314: PUSH
47315: LD_VAR 0 1
47319: ARRAY
47320: PPUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 30
47326: PUSH
47327: LD_INT 6
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 30
47336: PUSH
47337: LD_INT 7
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 30
47346: PUSH
47347: LD_INT 8
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: PPUSH
47360: CALL_OW 72
47364: AND
47365: PUSH
47366: LD_EXP 14
47370: PUSH
47371: LD_VAR 0 1
47375: ARRAY
47376: PPUSH
47377: LD_INT 30
47379: PUSH
47380: LD_INT 3
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PPUSH
47387: CALL_OW 72
47391: AND
47392: IFFALSE 48126
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
47394: LD_ADDR_EXP 56
47398: PUSH
47399: LD_EXP 56
47403: PPUSH
47404: LD_VAR 0 1
47408: PPUSH
47409: LD_INT 3
47411: PPUSH
47412: CALL_OW 1
47416: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
47417: LD_ADDR_VAR 0 2
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: ST_TO_ADDR
// if not eng then
47440: LD_VAR 0 6
47444: NOT
47445: IFFALSE 47508
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
47447: LD_ADDR_VAR 0 11
47451: PUSH
47452: LD_VAR 0 4
47456: PPUSH
47457: LD_INT 2
47459: PPUSH
47460: CALL 38955 0 2
47464: PUSH
47465: LD_INT 1
47467: ARRAY
47468: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
47469: LD_ADDR_VAR 0 2
47473: PUSH
47474: LD_VAR 0 2
47478: PPUSH
47479: LD_INT 2
47481: PPUSH
47482: LD_VAR 0 11
47486: PPUSH
47487: CALL_OW 1
47491: ST_TO_ADDR
// tmp := tmp diff p ;
47492: LD_ADDR_VAR 0 4
47496: PUSH
47497: LD_VAR 0 4
47501: PUSH
47502: LD_VAR 0 11
47506: DIFF
47507: ST_TO_ADDR
// end ; if tmp and sci < 6 then
47508: LD_VAR 0 4
47512: PUSH
47513: LD_VAR 0 8
47517: PUSH
47518: LD_INT 6
47520: LESS
47521: AND
47522: IFFALSE 47710
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
47524: LD_ADDR_VAR 0 9
47528: PUSH
47529: LD_VAR 0 4
47533: PUSH
47534: LD_VAR 0 8
47538: PUSH
47539: LD_VAR 0 7
47543: UNION
47544: DIFF
47545: PPUSH
47546: LD_INT 4
47548: PPUSH
47549: CALL 38955 0 2
47553: ST_TO_ADDR
// p := [ ] ;
47554: LD_ADDR_VAR 0 11
47558: PUSH
47559: EMPTY
47560: ST_TO_ADDR
// if sort then
47561: LD_VAR 0 9
47565: IFFALSE 47681
// for i = 1 to 6 - sci do
47567: LD_ADDR_VAR 0 3
47571: PUSH
47572: DOUBLE
47573: LD_INT 1
47575: DEC
47576: ST_TO_ADDR
47577: LD_INT 6
47579: PUSH
47580: LD_VAR 0 8
47584: MINUS
47585: PUSH
47586: FOR_TO
47587: IFFALSE 47679
// begin if i = sort then
47589: LD_VAR 0 3
47593: PUSH
47594: LD_VAR 0 9
47598: EQUAL
47599: IFFALSE 47603
// break ;
47601: GO 47679
// if GetClass ( i ) = 4 then
47603: LD_VAR 0 3
47607: PPUSH
47608: CALL_OW 257
47612: PUSH
47613: LD_INT 4
47615: EQUAL
47616: IFFALSE 47620
// continue ;
47618: GO 47586
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47620: LD_ADDR_VAR 0 11
47624: PUSH
47625: LD_VAR 0 11
47629: PPUSH
47630: LD_VAR 0 11
47634: PUSH
47635: LD_INT 1
47637: PLUS
47638: PPUSH
47639: LD_VAR 0 9
47643: PUSH
47644: LD_VAR 0 3
47648: ARRAY
47649: PPUSH
47650: CALL_OW 2
47654: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47655: LD_ADDR_VAR 0 4
47659: PUSH
47660: LD_VAR 0 4
47664: PUSH
47665: LD_VAR 0 9
47669: PUSH
47670: LD_VAR 0 3
47674: ARRAY
47675: DIFF
47676: ST_TO_ADDR
// end ;
47677: GO 47586
47679: POP
47680: POP
// if p then
47681: LD_VAR 0 11
47685: IFFALSE 47710
// result := Replace ( result , 4 , p ) ;
47687: LD_ADDR_VAR 0 2
47691: PUSH
47692: LD_VAR 0 2
47696: PPUSH
47697: LD_INT 4
47699: PPUSH
47700: LD_VAR 0 11
47704: PPUSH
47705: CALL_OW 1
47709: ST_TO_ADDR
// end ; if tmp and mech < 6 then
47710: LD_VAR 0 4
47714: PUSH
47715: LD_VAR 0 7
47719: PUSH
47720: LD_INT 6
47722: LESS
47723: AND
47724: IFFALSE 47912
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
47726: LD_ADDR_VAR 0 9
47730: PUSH
47731: LD_VAR 0 4
47735: PUSH
47736: LD_VAR 0 8
47740: PUSH
47741: LD_VAR 0 7
47745: UNION
47746: DIFF
47747: PPUSH
47748: LD_INT 3
47750: PPUSH
47751: CALL 38955 0 2
47755: ST_TO_ADDR
// p := [ ] ;
47756: LD_ADDR_VAR 0 11
47760: PUSH
47761: EMPTY
47762: ST_TO_ADDR
// if sort then
47763: LD_VAR 0 9
47767: IFFALSE 47883
// for i = 1 to 6 - mech do
47769: LD_ADDR_VAR 0 3
47773: PUSH
47774: DOUBLE
47775: LD_INT 1
47777: DEC
47778: ST_TO_ADDR
47779: LD_INT 6
47781: PUSH
47782: LD_VAR 0 7
47786: MINUS
47787: PUSH
47788: FOR_TO
47789: IFFALSE 47881
// begin if i = sort then
47791: LD_VAR 0 3
47795: PUSH
47796: LD_VAR 0 9
47800: EQUAL
47801: IFFALSE 47805
// break ;
47803: GO 47881
// if GetClass ( i ) = 3 then
47805: LD_VAR 0 3
47809: PPUSH
47810: CALL_OW 257
47814: PUSH
47815: LD_INT 3
47817: EQUAL
47818: IFFALSE 47822
// continue ;
47820: GO 47788
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47822: LD_ADDR_VAR 0 11
47826: PUSH
47827: LD_VAR 0 11
47831: PPUSH
47832: LD_VAR 0 11
47836: PUSH
47837: LD_INT 1
47839: PLUS
47840: PPUSH
47841: LD_VAR 0 9
47845: PUSH
47846: LD_VAR 0 3
47850: ARRAY
47851: PPUSH
47852: CALL_OW 2
47856: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47857: LD_ADDR_VAR 0 4
47861: PUSH
47862: LD_VAR 0 4
47866: PUSH
47867: LD_VAR 0 9
47871: PUSH
47872: LD_VAR 0 3
47876: ARRAY
47877: DIFF
47878: ST_TO_ADDR
// end ;
47879: GO 47788
47881: POP
47882: POP
// if p then
47883: LD_VAR 0 11
47887: IFFALSE 47912
// result := Replace ( result , 3 , p ) ;
47889: LD_ADDR_VAR 0 2
47893: PUSH
47894: LD_VAR 0 2
47898: PPUSH
47899: LD_INT 3
47901: PPUSH
47902: LD_VAR 0 11
47906: PPUSH
47907: CALL_OW 1
47911: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
47912: LD_VAR 0 4
47916: PUSH
47917: LD_INT 6
47919: GREATER
47920: PUSH
47921: LD_VAR 0 6
47925: PUSH
47926: LD_INT 6
47928: LESS
47929: AND
47930: IFFALSE 48124
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
47932: LD_ADDR_VAR 0 9
47936: PUSH
47937: LD_VAR 0 4
47941: PUSH
47942: LD_VAR 0 8
47946: PUSH
47947: LD_VAR 0 7
47951: UNION
47952: PUSH
47953: LD_VAR 0 6
47957: UNION
47958: DIFF
47959: PPUSH
47960: LD_INT 2
47962: PPUSH
47963: CALL 38955 0 2
47967: ST_TO_ADDR
// p := [ ] ;
47968: LD_ADDR_VAR 0 11
47972: PUSH
47973: EMPTY
47974: ST_TO_ADDR
// if sort then
47975: LD_VAR 0 9
47979: IFFALSE 48095
// for i = 1 to 6 - eng do
47981: LD_ADDR_VAR 0 3
47985: PUSH
47986: DOUBLE
47987: LD_INT 1
47989: DEC
47990: ST_TO_ADDR
47991: LD_INT 6
47993: PUSH
47994: LD_VAR 0 6
47998: MINUS
47999: PUSH
48000: FOR_TO
48001: IFFALSE 48093
// begin if i = sort then
48003: LD_VAR 0 3
48007: PUSH
48008: LD_VAR 0 9
48012: EQUAL
48013: IFFALSE 48017
// break ;
48015: GO 48093
// if GetClass ( i ) = 2 then
48017: LD_VAR 0 3
48021: PPUSH
48022: CALL_OW 257
48026: PUSH
48027: LD_INT 2
48029: EQUAL
48030: IFFALSE 48034
// continue ;
48032: GO 48000
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48034: LD_ADDR_VAR 0 11
48038: PUSH
48039: LD_VAR 0 11
48043: PPUSH
48044: LD_VAR 0 11
48048: PUSH
48049: LD_INT 1
48051: PLUS
48052: PPUSH
48053: LD_VAR 0 9
48057: PUSH
48058: LD_VAR 0 3
48062: ARRAY
48063: PPUSH
48064: CALL_OW 2
48068: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48069: LD_ADDR_VAR 0 4
48073: PUSH
48074: LD_VAR 0 4
48078: PUSH
48079: LD_VAR 0 9
48083: PUSH
48084: LD_VAR 0 3
48088: ARRAY
48089: DIFF
48090: ST_TO_ADDR
// end ;
48091: GO 48000
48093: POP
48094: POP
// if p then
48095: LD_VAR 0 11
48099: IFFALSE 48124
// result := Replace ( result , 2 , p ) ;
48101: LD_ADDR_VAR 0 2
48105: PUSH
48106: LD_VAR 0 2
48110: PPUSH
48111: LD_INT 2
48113: PPUSH
48114: LD_VAR 0 11
48118: PPUSH
48119: CALL_OW 1
48123: ST_TO_ADDR
// end ; exit ;
48124: GO 49512
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
48126: LD_EXP 41
48130: PUSH
48131: LD_EXP 40
48135: PUSH
48136: LD_VAR 0 1
48140: ARRAY
48141: ARRAY
48142: NOT
48143: PUSH
48144: LD_EXP 14
48148: PUSH
48149: LD_VAR 0 1
48153: ARRAY
48154: PPUSH
48155: LD_INT 30
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PPUSH
48165: CALL_OW 72
48169: AND
48170: PUSH
48171: LD_EXP 19
48175: PUSH
48176: LD_VAR 0 1
48180: ARRAY
48181: AND
48182: IFFALSE 48790
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
48184: LD_ADDR_EXP 56
48188: PUSH
48189: LD_EXP 56
48193: PPUSH
48194: LD_VAR 0 1
48198: PPUSH
48199: LD_INT 5
48201: PPUSH
48202: CALL_OW 1
48206: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
48207: LD_ADDR_VAR 0 2
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: ST_TO_ADDR
// if sci > 1 then
48230: LD_VAR 0 8
48234: PUSH
48235: LD_INT 1
48237: GREATER
48238: IFFALSE 48266
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
48240: LD_ADDR_VAR 0 4
48244: PUSH
48245: LD_VAR 0 4
48249: PUSH
48250: LD_VAR 0 8
48254: PUSH
48255: LD_VAR 0 8
48259: PUSH
48260: LD_INT 1
48262: ARRAY
48263: DIFF
48264: DIFF
48265: ST_TO_ADDR
// if tmp and not sci then
48266: LD_VAR 0 4
48270: PUSH
48271: LD_VAR 0 8
48275: NOT
48276: AND
48277: IFFALSE 48346
// begin sort := SortBySkill ( tmp , 4 ) ;
48279: LD_ADDR_VAR 0 9
48283: PUSH
48284: LD_VAR 0 4
48288: PPUSH
48289: LD_INT 4
48291: PPUSH
48292: CALL 38955 0 2
48296: ST_TO_ADDR
// if sort then
48297: LD_VAR 0 9
48301: IFFALSE 48317
// p := sort [ 1 ] ;
48303: LD_ADDR_VAR 0 11
48307: PUSH
48308: LD_VAR 0 9
48312: PUSH
48313: LD_INT 1
48315: ARRAY
48316: ST_TO_ADDR
// if p then
48317: LD_VAR 0 11
48321: IFFALSE 48346
// result := Replace ( result , 4 , p ) ;
48323: LD_ADDR_VAR 0 2
48327: PUSH
48328: LD_VAR 0 2
48332: PPUSH
48333: LD_INT 4
48335: PPUSH
48336: LD_VAR 0 11
48340: PPUSH
48341: CALL_OW 1
48345: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
48346: LD_ADDR_VAR 0 4
48350: PUSH
48351: LD_VAR 0 4
48355: PUSH
48356: LD_VAR 0 7
48360: DIFF
48361: ST_TO_ADDR
// if tmp and mech < 6 then
48362: LD_VAR 0 4
48366: PUSH
48367: LD_VAR 0 7
48371: PUSH
48372: LD_INT 6
48374: LESS
48375: AND
48376: IFFALSE 48564
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
48378: LD_ADDR_VAR 0 9
48382: PUSH
48383: LD_VAR 0 4
48387: PUSH
48388: LD_VAR 0 8
48392: PUSH
48393: LD_VAR 0 7
48397: UNION
48398: DIFF
48399: PPUSH
48400: LD_INT 3
48402: PPUSH
48403: CALL 38955 0 2
48407: ST_TO_ADDR
// p := [ ] ;
48408: LD_ADDR_VAR 0 11
48412: PUSH
48413: EMPTY
48414: ST_TO_ADDR
// if sort then
48415: LD_VAR 0 9
48419: IFFALSE 48535
// for i = 1 to 6 - mech do
48421: LD_ADDR_VAR 0 3
48425: PUSH
48426: DOUBLE
48427: LD_INT 1
48429: DEC
48430: ST_TO_ADDR
48431: LD_INT 6
48433: PUSH
48434: LD_VAR 0 7
48438: MINUS
48439: PUSH
48440: FOR_TO
48441: IFFALSE 48533
// begin if i = sort then
48443: LD_VAR 0 3
48447: PUSH
48448: LD_VAR 0 9
48452: EQUAL
48453: IFFALSE 48457
// break ;
48455: GO 48533
// if GetClass ( i ) = 3 then
48457: LD_VAR 0 3
48461: PPUSH
48462: CALL_OW 257
48466: PUSH
48467: LD_INT 3
48469: EQUAL
48470: IFFALSE 48474
// continue ;
48472: GO 48440
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48474: LD_ADDR_VAR 0 11
48478: PUSH
48479: LD_VAR 0 11
48483: PPUSH
48484: LD_VAR 0 11
48488: PUSH
48489: LD_INT 1
48491: PLUS
48492: PPUSH
48493: LD_VAR 0 9
48497: PUSH
48498: LD_VAR 0 3
48502: ARRAY
48503: PPUSH
48504: CALL_OW 2
48508: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48509: LD_ADDR_VAR 0 4
48513: PUSH
48514: LD_VAR 0 4
48518: PUSH
48519: LD_VAR 0 9
48523: PUSH
48524: LD_VAR 0 3
48528: ARRAY
48529: DIFF
48530: ST_TO_ADDR
// end ;
48531: GO 48440
48533: POP
48534: POP
// if p then
48535: LD_VAR 0 11
48539: IFFALSE 48564
// result := Replace ( result , 3 , p ) ;
48541: LD_ADDR_VAR 0 2
48545: PUSH
48546: LD_VAR 0 2
48550: PPUSH
48551: LD_INT 3
48553: PPUSH
48554: LD_VAR 0 11
48558: PPUSH
48559: CALL_OW 1
48563: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
48564: LD_ADDR_VAR 0 4
48568: PUSH
48569: LD_VAR 0 4
48573: PUSH
48574: LD_VAR 0 6
48578: DIFF
48579: ST_TO_ADDR
// if tmp and eng < 6 then
48580: LD_VAR 0 4
48584: PUSH
48585: LD_VAR 0 6
48589: PUSH
48590: LD_INT 6
48592: LESS
48593: AND
48594: IFFALSE 48788
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
48596: LD_ADDR_VAR 0 9
48600: PUSH
48601: LD_VAR 0 4
48605: PUSH
48606: LD_VAR 0 8
48610: PUSH
48611: LD_VAR 0 7
48615: UNION
48616: PUSH
48617: LD_VAR 0 6
48621: UNION
48622: DIFF
48623: PPUSH
48624: LD_INT 2
48626: PPUSH
48627: CALL 38955 0 2
48631: ST_TO_ADDR
// p := [ ] ;
48632: LD_ADDR_VAR 0 11
48636: PUSH
48637: EMPTY
48638: ST_TO_ADDR
// if sort then
48639: LD_VAR 0 9
48643: IFFALSE 48759
// for i = 1 to 6 - eng do
48645: LD_ADDR_VAR 0 3
48649: PUSH
48650: DOUBLE
48651: LD_INT 1
48653: DEC
48654: ST_TO_ADDR
48655: LD_INT 6
48657: PUSH
48658: LD_VAR 0 6
48662: MINUS
48663: PUSH
48664: FOR_TO
48665: IFFALSE 48757
// begin if i = sort then
48667: LD_VAR 0 3
48671: PUSH
48672: LD_VAR 0 9
48676: EQUAL
48677: IFFALSE 48681
// break ;
48679: GO 48757
// if GetClass ( i ) = 2 then
48681: LD_VAR 0 3
48685: PPUSH
48686: CALL_OW 257
48690: PUSH
48691: LD_INT 2
48693: EQUAL
48694: IFFALSE 48698
// continue ;
48696: GO 48664
// p := Insert ( p , p + 1 , sort [ i ] ) ;
48698: LD_ADDR_VAR 0 11
48702: PUSH
48703: LD_VAR 0 11
48707: PPUSH
48708: LD_VAR 0 11
48712: PUSH
48713: LD_INT 1
48715: PLUS
48716: PPUSH
48717: LD_VAR 0 9
48721: PUSH
48722: LD_VAR 0 3
48726: ARRAY
48727: PPUSH
48728: CALL_OW 2
48732: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
48733: LD_ADDR_VAR 0 4
48737: PUSH
48738: LD_VAR 0 4
48742: PUSH
48743: LD_VAR 0 9
48747: PUSH
48748: LD_VAR 0 3
48752: ARRAY
48753: DIFF
48754: ST_TO_ADDR
// end ;
48755: GO 48664
48757: POP
48758: POP
// if p then
48759: LD_VAR 0 11
48763: IFFALSE 48788
// result := Replace ( result , 2 , p ) ;
48765: LD_ADDR_VAR 0 2
48769: PUSH
48770: LD_VAR 0 2
48774: PPUSH
48775: LD_INT 2
48777: PPUSH
48778: LD_VAR 0 11
48782: PPUSH
48783: CALL_OW 1
48787: ST_TO_ADDR
// end ; exit ;
48788: GO 49512
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
48790: LD_EXP 41
48794: PUSH
48795: LD_EXP 40
48799: PUSH
48800: LD_VAR 0 1
48804: ARRAY
48805: ARRAY
48806: NOT
48807: PUSH
48808: LD_EXP 14
48812: PUSH
48813: LD_VAR 0 1
48817: ARRAY
48818: PPUSH
48819: LD_INT 30
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PPUSH
48829: CALL_OW 72
48833: AND
48834: PUSH
48835: LD_EXP 19
48839: PUSH
48840: LD_VAR 0 1
48844: ARRAY
48845: NOT
48846: AND
48847: IFFALSE 49512
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
48849: LD_ADDR_EXP 56
48853: PUSH
48854: LD_EXP 56
48858: PPUSH
48859: LD_VAR 0 1
48863: PPUSH
48864: LD_INT 6
48866: PPUSH
48867: CALL_OW 1
48871: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
48872: LD_ADDR_VAR 0 2
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: ST_TO_ADDR
// if sci >= 1 then
48895: LD_VAR 0 8
48899: PUSH
48900: LD_INT 1
48902: GREATEREQUAL
48903: IFFALSE 48925
// tmp := tmp diff sci [ 1 ] ;
48905: LD_ADDR_VAR 0 4
48909: PUSH
48910: LD_VAR 0 4
48914: PUSH
48915: LD_VAR 0 8
48919: PUSH
48920: LD_INT 1
48922: ARRAY
48923: DIFF
48924: ST_TO_ADDR
// if tmp and not sci then
48925: LD_VAR 0 4
48929: PUSH
48930: LD_VAR 0 8
48934: NOT
48935: AND
48936: IFFALSE 49005
// begin sort := SortBySkill ( tmp , 4 ) ;
48938: LD_ADDR_VAR 0 9
48942: PUSH
48943: LD_VAR 0 4
48947: PPUSH
48948: LD_INT 4
48950: PPUSH
48951: CALL 38955 0 2
48955: ST_TO_ADDR
// if sort then
48956: LD_VAR 0 9
48960: IFFALSE 48976
// p := sort [ 1 ] ;
48962: LD_ADDR_VAR 0 11
48966: PUSH
48967: LD_VAR 0 9
48971: PUSH
48972: LD_INT 1
48974: ARRAY
48975: ST_TO_ADDR
// if p then
48976: LD_VAR 0 11
48980: IFFALSE 49005
// result := Replace ( result , 4 , p ) ;
48982: LD_ADDR_VAR 0 2
48986: PUSH
48987: LD_VAR 0 2
48991: PPUSH
48992: LD_INT 4
48994: PPUSH
48995: LD_VAR 0 11
48999: PPUSH
49000: CALL_OW 1
49004: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
49005: LD_ADDR_VAR 0 4
49009: PUSH
49010: LD_VAR 0 4
49014: PUSH
49015: LD_VAR 0 7
49019: DIFF
49020: ST_TO_ADDR
// if tmp and mech < 6 then
49021: LD_VAR 0 4
49025: PUSH
49026: LD_VAR 0 7
49030: PUSH
49031: LD_INT 6
49033: LESS
49034: AND
49035: IFFALSE 49217
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
49037: LD_ADDR_VAR 0 9
49041: PUSH
49042: LD_VAR 0 4
49046: PUSH
49047: LD_VAR 0 7
49051: DIFF
49052: PPUSH
49053: LD_INT 3
49055: PPUSH
49056: CALL 38955 0 2
49060: ST_TO_ADDR
// p := [ ] ;
49061: LD_ADDR_VAR 0 11
49065: PUSH
49066: EMPTY
49067: ST_TO_ADDR
// if sort then
49068: LD_VAR 0 9
49072: IFFALSE 49188
// for i = 1 to 6 - mech do
49074: LD_ADDR_VAR 0 3
49078: PUSH
49079: DOUBLE
49080: LD_INT 1
49082: DEC
49083: ST_TO_ADDR
49084: LD_INT 6
49086: PUSH
49087: LD_VAR 0 7
49091: MINUS
49092: PUSH
49093: FOR_TO
49094: IFFALSE 49186
// begin if i = sort then
49096: LD_VAR 0 3
49100: PUSH
49101: LD_VAR 0 9
49105: EQUAL
49106: IFFALSE 49110
// break ;
49108: GO 49186
// if GetClass ( i ) = 3 then
49110: LD_VAR 0 3
49114: PPUSH
49115: CALL_OW 257
49119: PUSH
49120: LD_INT 3
49122: EQUAL
49123: IFFALSE 49127
// continue ;
49125: GO 49093
// p := Insert ( p , p + 1 , sort [ i ] ) ;
49127: LD_ADDR_VAR 0 11
49131: PUSH
49132: LD_VAR 0 11
49136: PPUSH
49137: LD_VAR 0 11
49141: PUSH
49142: LD_INT 1
49144: PLUS
49145: PPUSH
49146: LD_VAR 0 9
49150: PUSH
49151: LD_VAR 0 3
49155: ARRAY
49156: PPUSH
49157: CALL_OW 2
49161: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
49162: LD_ADDR_VAR 0 4
49166: PUSH
49167: LD_VAR 0 4
49171: PUSH
49172: LD_VAR 0 9
49176: PUSH
49177: LD_VAR 0 3
49181: ARRAY
49182: DIFF
49183: ST_TO_ADDR
// end ;
49184: GO 49093
49186: POP
49187: POP
// if p then
49188: LD_VAR 0 11
49192: IFFALSE 49217
// result := Replace ( result , 3 , p ) ;
49194: LD_ADDR_VAR 0 2
49198: PUSH
49199: LD_VAR 0 2
49203: PPUSH
49204: LD_INT 3
49206: PPUSH
49207: LD_VAR 0 11
49211: PPUSH
49212: CALL_OW 1
49216: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
49217: LD_ADDR_VAR 0 4
49221: PUSH
49222: LD_VAR 0 4
49226: PUSH
49227: LD_VAR 0 6
49231: DIFF
49232: ST_TO_ADDR
// if tmp and eng < 4 then
49233: LD_VAR 0 4
49237: PUSH
49238: LD_VAR 0 6
49242: PUSH
49243: LD_INT 4
49245: LESS
49246: AND
49247: IFFALSE 49437
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
49249: LD_ADDR_VAR 0 9
49253: PUSH
49254: LD_VAR 0 4
49258: PUSH
49259: LD_VAR 0 7
49263: PUSH
49264: LD_VAR 0 6
49268: UNION
49269: DIFF
49270: PPUSH
49271: LD_INT 2
49273: PPUSH
49274: CALL 38955 0 2
49278: ST_TO_ADDR
// p := [ ] ;
49279: LD_ADDR_VAR 0 11
49283: PUSH
49284: EMPTY
49285: ST_TO_ADDR
// if sort then
49286: LD_VAR 0 9
49290: IFFALSE 49406
// for i = 1 to 4 - eng do
49292: LD_ADDR_VAR 0 3
49296: PUSH
49297: DOUBLE
49298: LD_INT 1
49300: DEC
49301: ST_TO_ADDR
49302: LD_INT 4
49304: PUSH
49305: LD_VAR 0 6
49309: MINUS
49310: PUSH
49311: FOR_TO
49312: IFFALSE 49404
// begin if i = sort then
49314: LD_VAR 0 3
49318: PUSH
49319: LD_VAR 0 9
49323: EQUAL
49324: IFFALSE 49328
// break ;
49326: GO 49404
// if GetClass ( i ) = 2 then
49328: LD_VAR 0 3
49332: PPUSH
49333: CALL_OW 257
49337: PUSH
49338: LD_INT 2
49340: EQUAL
49341: IFFALSE 49345
// continue ;
49343: GO 49311
// p := Insert ( p , p + 1 , sort [ i ] ) ;
49345: LD_ADDR_VAR 0 11
49349: PUSH
49350: LD_VAR 0 11
49354: PPUSH
49355: LD_VAR 0 11
49359: PUSH
49360: LD_INT 1
49362: PLUS
49363: PPUSH
49364: LD_VAR 0 9
49368: PUSH
49369: LD_VAR 0 3
49373: ARRAY
49374: PPUSH
49375: CALL_OW 2
49379: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
49380: LD_ADDR_VAR 0 4
49384: PUSH
49385: LD_VAR 0 4
49389: PUSH
49390: LD_VAR 0 9
49394: PUSH
49395: LD_VAR 0 3
49399: ARRAY
49400: DIFF
49401: ST_TO_ADDR
// end ;
49402: GO 49311
49404: POP
49405: POP
// if p then
49406: LD_VAR 0 11
49410: IFFALSE 49435
// result := Replace ( result , 2 , p ) ;
49412: LD_ADDR_VAR 0 2
49416: PUSH
49417: LD_VAR 0 2
49421: PPUSH
49422: LD_INT 2
49424: PPUSH
49425: LD_VAR 0 11
49429: PPUSH
49430: CALL_OW 1
49434: ST_TO_ADDR
// end else
49435: GO 49481
// for i = eng downto 5 do
49437: LD_ADDR_VAR 0 3
49441: PUSH
49442: DOUBLE
49443: LD_VAR 0 6
49447: INC
49448: ST_TO_ADDR
49449: LD_INT 5
49451: PUSH
49452: FOR_DOWNTO
49453: IFFALSE 49479
// tmp := tmp union eng [ i ] ;
49455: LD_ADDR_VAR 0 4
49459: PUSH
49460: LD_VAR 0 4
49464: PUSH
49465: LD_VAR 0 6
49469: PUSH
49470: LD_VAR 0 3
49474: ARRAY
49475: UNION
49476: ST_TO_ADDR
49477: GO 49452
49479: POP
49480: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
49481: LD_ADDR_VAR 0 2
49485: PUSH
49486: LD_VAR 0 2
49490: PPUSH
49491: LD_INT 1
49493: PPUSH
49494: LD_VAR 0 4
49498: PUSH
49499: LD_VAR 0 5
49503: DIFF
49504: PPUSH
49505: CALL_OW 1
49509: ST_TO_ADDR
// exit ;
49510: GO 49512
// end ; end ;
49512: LD_VAR 0 2
49516: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
49517: LD_INT 0
49519: PPUSH
49520: PPUSH
49521: PPUSH
// if not mc_bases then
49522: LD_EXP 14
49526: NOT
49527: IFFALSE 49531
// exit ;
49529: GO 49637
// for i = 1 to mc_bases do
49531: LD_ADDR_VAR 0 2
49535: PUSH
49536: DOUBLE
49537: LD_INT 1
49539: DEC
49540: ST_TO_ADDR
49541: LD_EXP 14
49545: PUSH
49546: FOR_TO
49547: IFFALSE 49628
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
49549: LD_ADDR_VAR 0 3
49553: PUSH
49554: LD_EXP 14
49558: PUSH
49559: LD_VAR 0 2
49563: ARRAY
49564: PPUSH
49565: LD_INT 21
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: LD_INT 24
49580: PUSH
49581: LD_INT 1000
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PPUSH
49596: CALL_OW 72
49600: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
49601: LD_ADDR_EXP 15
49605: PUSH
49606: LD_EXP 15
49610: PPUSH
49611: LD_VAR 0 2
49615: PPUSH
49616: LD_VAR 0 3
49620: PPUSH
49621: CALL_OW 1
49625: ST_TO_ADDR
// end ;
49626: GO 49546
49628: POP
49629: POP
// RaiseSailEvent ( 101 ) ;
49630: LD_INT 101
49632: PPUSH
49633: CALL_OW 427
// end ;
49637: LD_VAR 0 1
49641: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
49642: LD_INT 0
49644: PPUSH
49645: PPUSH
49646: PPUSH
49647: PPUSH
49648: PPUSH
49649: PPUSH
49650: PPUSH
// if not mc_bases then
49651: LD_EXP 14
49655: NOT
49656: IFFALSE 49660
// exit ;
49658: GO 50222
// for i = 1 to mc_bases do
49660: LD_ADDR_VAR 0 2
49664: PUSH
49665: DOUBLE
49666: LD_INT 1
49668: DEC
49669: ST_TO_ADDR
49670: LD_EXP 14
49674: PUSH
49675: FOR_TO
49676: IFFALSE 50213
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
49678: LD_ADDR_VAR 0 5
49682: PUSH
49683: LD_EXP 14
49687: PUSH
49688: LD_VAR 0 2
49692: ARRAY
49693: PUSH
49694: LD_EXP 43
49698: PUSH
49699: LD_VAR 0 2
49703: ARRAY
49704: UNION
49705: PPUSH
49706: LD_INT 21
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: LD_INT 54
49724: PUSH
49725: EMPTY
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: LD_INT 24
49737: PUSH
49738: LD_INT 800
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: LIST
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PPUSH
49758: CALL_OW 72
49762: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
49763: LD_ADDR_VAR 0 6
49767: PUSH
49768: LD_EXP 14
49772: PUSH
49773: LD_VAR 0 2
49777: ARRAY
49778: PPUSH
49779: LD_INT 21
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: LD_INT 54
49797: PUSH
49798: EMPTY
49799: LIST
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 24
49810: PUSH
49811: LD_INT 250
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PPUSH
49831: CALL_OW 72
49835: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
49836: LD_ADDR_VAR 0 7
49840: PUSH
49841: LD_VAR 0 5
49845: PUSH
49846: LD_VAR 0 6
49850: DIFF
49851: ST_TO_ADDR
// if not need_heal_1 then
49852: LD_VAR 0 6
49856: NOT
49857: IFFALSE 49890
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
49859: LD_ADDR_EXP 17
49863: PUSH
49864: LD_EXP 17
49868: PPUSH
49869: LD_VAR 0 2
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PPUSH
49881: EMPTY
49882: PPUSH
49883: CALL 9406 0 3
49887: ST_TO_ADDR
49888: GO 49960
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
49890: LD_ADDR_EXP 17
49894: PUSH
49895: LD_EXP 17
49899: PPUSH
49900: LD_VAR 0 2
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PPUSH
49912: LD_EXP 17
49916: PUSH
49917: LD_VAR 0 2
49921: ARRAY
49922: PUSH
49923: LD_INT 1
49925: ARRAY
49926: PPUSH
49927: LD_INT 3
49929: PUSH
49930: LD_INT 24
49932: PUSH
49933: LD_INT 1000
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PPUSH
49944: CALL_OW 72
49948: PUSH
49949: LD_VAR 0 6
49953: UNION
49954: PPUSH
49955: CALL 9406 0 3
49959: ST_TO_ADDR
// if not need_heal_2 then
49960: LD_VAR 0 7
49964: NOT
49965: IFFALSE 49998
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
49967: LD_ADDR_EXP 17
49971: PUSH
49972: LD_EXP 17
49976: PPUSH
49977: LD_VAR 0 2
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PPUSH
49989: EMPTY
49990: PPUSH
49991: CALL 9406 0 3
49995: ST_TO_ADDR
49996: GO 50030
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
49998: LD_ADDR_EXP 17
50002: PUSH
50003: LD_EXP 17
50007: PPUSH
50008: LD_VAR 0 2
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PPUSH
50020: LD_VAR 0 7
50024: PPUSH
50025: CALL 9406 0 3
50029: ST_TO_ADDR
// if need_heal_2 then
50030: LD_VAR 0 7
50034: IFFALSE 50195
// for j in need_heal_2 do
50036: LD_ADDR_VAR 0 3
50040: PUSH
50041: LD_VAR 0 7
50045: PUSH
50046: FOR_IN
50047: IFFALSE 50193
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50049: LD_ADDR_VAR 0 5
50053: PUSH
50054: LD_EXP 14
50058: PUSH
50059: LD_VAR 0 2
50063: ARRAY
50064: PPUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 30
50070: PUSH
50071: LD_INT 6
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 30
50080: PUSH
50081: LD_INT 7
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 30
50090: PUSH
50091: LD_INT 8
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 30
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 30
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: PPUSH
50126: CALL_OW 72
50130: ST_TO_ADDR
// if tmp then
50131: LD_VAR 0 5
50135: IFFALSE 50191
// begin k := NearestUnitToUnit ( tmp , j ) ;
50137: LD_ADDR_VAR 0 4
50141: PUSH
50142: LD_VAR 0 5
50146: PPUSH
50147: LD_VAR 0 3
50151: PPUSH
50152: CALL_OW 74
50156: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
50157: LD_VAR 0 3
50161: PPUSH
50162: LD_VAR 0 4
50166: PPUSH
50167: CALL_OW 296
50171: PUSH
50172: LD_INT 5
50174: GREATER
50175: IFFALSE 50191
// ComMoveUnit ( j , k ) ;
50177: LD_VAR 0 3
50181: PPUSH
50182: LD_VAR 0 4
50186: PPUSH
50187: CALL_OW 112
// end ; end ;
50191: GO 50046
50193: POP
50194: POP
// if not need_heal_1 and not need_heal_2 then
50195: LD_VAR 0 6
50199: NOT
50200: PUSH
50201: LD_VAR 0 7
50205: NOT
50206: AND
50207: IFFALSE 50211
// continue ;
50209: GO 49675
// end ;
50211: GO 49675
50213: POP
50214: POP
// RaiseSailEvent ( 102 ) ;
50215: LD_INT 102
50217: PPUSH
50218: CALL_OW 427
// end ;
50222: LD_VAR 0 1
50226: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
50227: LD_INT 0
50229: PPUSH
50230: PPUSH
50231: PPUSH
50232: PPUSH
50233: PPUSH
50234: PPUSH
50235: PPUSH
50236: PPUSH
// if not mc_bases then
50237: LD_EXP 14
50241: NOT
50242: IFFALSE 50246
// exit ;
50244: GO 51081
// for i = 1 to mc_bases do
50246: LD_ADDR_VAR 0 2
50250: PUSH
50251: DOUBLE
50252: LD_INT 1
50254: DEC
50255: ST_TO_ADDR
50256: LD_EXP 14
50260: PUSH
50261: FOR_TO
50262: IFFALSE 51079
// begin if not mc_building_need_repair [ i ] then
50264: LD_EXP 15
50268: PUSH
50269: LD_VAR 0 2
50273: ARRAY
50274: NOT
50275: IFFALSE 50449
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
50277: LD_ADDR_VAR 0 6
50281: PUSH
50282: LD_EXP 33
50286: PUSH
50287: LD_VAR 0 2
50291: ARRAY
50292: PPUSH
50293: LD_INT 3
50295: PUSH
50296: LD_INT 24
50298: PUSH
50299: LD_INT 1000
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 34
50315: PUSH
50316: LD_INT 13
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 34
50325: PUSH
50326: LD_INT 52
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PPUSH
50342: CALL_OW 72
50346: ST_TO_ADDR
// if cranes then
50347: LD_VAR 0 6
50351: IFFALSE 50413
// for j in cranes do
50353: LD_ADDR_VAR 0 3
50357: PUSH
50358: LD_VAR 0 6
50362: PUSH
50363: FOR_IN
50364: IFFALSE 50411
// if not IsInArea ( j , mc_parking [ i ] ) then
50366: LD_VAR 0 3
50370: PPUSH
50371: LD_EXP 38
50375: PUSH
50376: LD_VAR 0 2
50380: ARRAY
50381: PPUSH
50382: CALL_OW 308
50386: NOT
50387: IFFALSE 50409
// ComMoveToArea ( j , mc_parking [ i ] ) ;
50389: LD_VAR 0 3
50393: PPUSH
50394: LD_EXP 38
50398: PUSH
50399: LD_VAR 0 2
50403: ARRAY
50404: PPUSH
50405: CALL_OW 113
50409: GO 50363
50411: POP
50412: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
50413: LD_ADDR_EXP 16
50417: PUSH
50418: LD_EXP 16
50422: PPUSH
50423: LD_VAR 0 2
50427: PPUSH
50428: EMPTY
50429: PPUSH
50430: CALL_OW 1
50434: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
50435: LD_VAR 0 2
50439: PPUSH
50440: LD_INT 101
50442: PPUSH
50443: CALL 45350 0 2
// continue ;
50447: GO 50261
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
50449: LD_ADDR_EXP 20
50453: PUSH
50454: LD_EXP 20
50458: PPUSH
50459: LD_VAR 0 2
50463: PPUSH
50464: EMPTY
50465: PPUSH
50466: CALL_OW 1
50470: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
50471: LD_VAR 0 2
50475: PPUSH
50476: LD_INT 103
50478: PPUSH
50479: CALL 45350 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
50483: LD_ADDR_VAR 0 5
50487: PUSH
50488: LD_EXP 14
50492: PUSH
50493: LD_VAR 0 2
50497: ARRAY
50498: PUSH
50499: LD_EXP 43
50503: PUSH
50504: LD_VAR 0 2
50508: ARRAY
50509: UNION
50510: PPUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 25
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 25
50526: PUSH
50527: LD_INT 16
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: PPUSH
50542: CALL_OW 72
50546: PUSH
50547: LD_EXP 17
50551: PUSH
50552: LD_VAR 0 2
50556: ARRAY
50557: PUSH
50558: LD_INT 1
50560: ARRAY
50561: PUSH
50562: LD_EXP 17
50566: PUSH
50567: LD_VAR 0 2
50571: ARRAY
50572: PUSH
50573: LD_INT 2
50575: ARRAY
50576: UNION
50577: DIFF
50578: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
50579: LD_ADDR_VAR 0 6
50583: PUSH
50584: LD_EXP 33
50588: PUSH
50589: LD_VAR 0 2
50593: ARRAY
50594: PPUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 34
50600: PUSH
50601: LD_INT 13
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 34
50610: PUSH
50611: LD_INT 52
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: PPUSH
50623: CALL_OW 72
50627: ST_TO_ADDR
// if cranes then
50628: LD_VAR 0 6
50632: IFFALSE 50768
// begin for j in cranes do
50634: LD_ADDR_VAR 0 3
50638: PUSH
50639: LD_VAR 0 6
50643: PUSH
50644: FOR_IN
50645: IFFALSE 50766
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
50647: LD_VAR 0 3
50651: PPUSH
50652: CALL_OW 256
50656: PUSH
50657: LD_INT 500
50659: GREATEREQUAL
50660: PUSH
50661: LD_VAR 0 3
50665: PPUSH
50666: CALL_OW 314
50670: NOT
50671: AND
50672: IFFALSE 50706
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
50674: LD_VAR 0 3
50678: PPUSH
50679: LD_EXP 15
50683: PUSH
50684: LD_VAR 0 2
50688: ARRAY
50689: PPUSH
50690: LD_VAR 0 3
50694: PPUSH
50695: CALL_OW 74
50699: PPUSH
50700: CALL_OW 130
50704: GO 50764
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
50706: LD_VAR 0 3
50710: PPUSH
50711: CALL_OW 256
50715: PUSH
50716: LD_INT 500
50718: LESS
50719: PUSH
50720: LD_VAR 0 3
50724: PPUSH
50725: LD_EXP 38
50729: PUSH
50730: LD_VAR 0 2
50734: ARRAY
50735: PPUSH
50736: CALL_OW 308
50740: NOT
50741: AND
50742: IFFALSE 50764
// ComMoveToArea ( j , mc_parking [ i ] ) ;
50744: LD_VAR 0 3
50748: PPUSH
50749: LD_EXP 38
50753: PUSH
50754: LD_VAR 0 2
50758: ARRAY
50759: PPUSH
50760: CALL_OW 113
50764: GO 50644
50766: POP
50767: POP
// end ; if tmp > 3 then
50768: LD_VAR 0 5
50772: PUSH
50773: LD_INT 3
50775: GREATER
50776: IFFALSE 50796
// tmp := ShrinkArray ( tmp , 4 ) ;
50778: LD_ADDR_VAR 0 5
50782: PUSH
50783: LD_VAR 0 5
50787: PPUSH
50788: LD_INT 4
50790: PPUSH
50791: CALL 40764 0 2
50795: ST_TO_ADDR
// if not tmp then
50796: LD_VAR 0 5
50800: NOT
50801: IFFALSE 50805
// continue ;
50803: GO 50261
// for j in tmp do
50805: LD_ADDR_VAR 0 3
50809: PUSH
50810: LD_VAR 0 5
50814: PUSH
50815: FOR_IN
50816: IFFALSE 51075
// begin if IsInUnit ( j ) then
50818: LD_VAR 0 3
50822: PPUSH
50823: CALL_OW 310
50827: IFFALSE 50838
// ComExitBuilding ( j ) ;
50829: LD_VAR 0 3
50833: PPUSH
50834: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
50838: LD_VAR 0 3
50842: PUSH
50843: LD_EXP 16
50847: PUSH
50848: LD_VAR 0 2
50852: ARRAY
50853: IN
50854: NOT
50855: IFFALSE 50913
// begin SetTag ( j , 101 ) ;
50857: LD_VAR 0 3
50861: PPUSH
50862: LD_INT 101
50864: PPUSH
50865: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
50869: LD_ADDR_EXP 16
50873: PUSH
50874: LD_EXP 16
50878: PPUSH
50879: LD_VAR 0 2
50883: PUSH
50884: LD_EXP 16
50888: PUSH
50889: LD_VAR 0 2
50893: ARRAY
50894: PUSH
50895: LD_INT 1
50897: PLUS
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PPUSH
50903: LD_VAR 0 3
50907: PPUSH
50908: CALL 9406 0 3
50912: ST_TO_ADDR
// end ; wait ( 1 ) ;
50913: LD_INT 1
50915: PPUSH
50916: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
50920: LD_ADDR_VAR 0 7
50924: PUSH
50925: LD_EXP 15
50929: PUSH
50930: LD_VAR 0 2
50934: ARRAY
50935: ST_TO_ADDR
// if mc_scan [ i ] then
50936: LD_EXP 37
50940: PUSH
50941: LD_VAR 0 2
50945: ARRAY
50946: IFFALSE 51008
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
50948: LD_ADDR_VAR 0 7
50952: PUSH
50953: LD_EXP 15
50957: PUSH
50958: LD_VAR 0 2
50962: ARRAY
50963: PPUSH
50964: LD_INT 3
50966: PUSH
50967: LD_INT 30
50969: PUSH
50970: LD_INT 32
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 30
50979: PUSH
50980: LD_INT 33
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 30
50989: PUSH
50990: LD_INT 31
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: PPUSH
51003: CALL_OW 72
51007: ST_TO_ADDR
// if not to_repair_tmp then
51008: LD_VAR 0 7
51012: NOT
51013: IFFALSE 51017
// continue ;
51015: GO 50815
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
51017: LD_ADDR_VAR 0 8
51021: PUSH
51022: LD_VAR 0 7
51026: PPUSH
51027: LD_VAR 0 3
51031: PPUSH
51032: CALL_OW 74
51036: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
51037: LD_VAR 0 8
51041: PPUSH
51042: LD_INT 16
51044: PPUSH
51045: CALL 11999 0 2
51049: PUSH
51050: LD_INT 4
51052: ARRAY
51053: PUSH
51054: LD_INT 5
51056: LESS
51057: IFFALSE 51073
// ComRepairBuilding ( j , to_repair ) ;
51059: LD_VAR 0 3
51063: PPUSH
51064: LD_VAR 0 8
51068: PPUSH
51069: CALL_OW 130
// end ;
51073: GO 50815
51075: POP
51076: POP
// end ;
51077: GO 50261
51079: POP
51080: POP
// end ;
51081: LD_VAR 0 1
51085: RET
// export function MC_Heal ; var i , j , tmp ; begin
51086: LD_INT 0
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
// if not mc_bases then
51092: LD_EXP 14
51096: NOT
51097: IFFALSE 51101
// exit ;
51099: GO 51503
// for i = 1 to mc_bases do
51101: LD_ADDR_VAR 0 2
51105: PUSH
51106: DOUBLE
51107: LD_INT 1
51109: DEC
51110: ST_TO_ADDR
51111: LD_EXP 14
51115: PUSH
51116: FOR_TO
51117: IFFALSE 51501
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
51119: LD_EXP 17
51123: PUSH
51124: LD_VAR 0 2
51128: ARRAY
51129: PUSH
51130: LD_INT 1
51132: ARRAY
51133: NOT
51134: PUSH
51135: LD_EXP 17
51139: PUSH
51140: LD_VAR 0 2
51144: ARRAY
51145: PUSH
51146: LD_INT 2
51148: ARRAY
51149: NOT
51150: AND
51151: IFFALSE 51189
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
51153: LD_ADDR_EXP 18
51157: PUSH
51158: LD_EXP 18
51162: PPUSH
51163: LD_VAR 0 2
51167: PPUSH
51168: EMPTY
51169: PPUSH
51170: CALL_OW 1
51174: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
51175: LD_VAR 0 2
51179: PPUSH
51180: LD_INT 102
51182: PPUSH
51183: CALL 45350 0 2
// continue ;
51187: GO 51116
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
51189: LD_ADDR_VAR 0 4
51193: PUSH
51194: LD_EXP 14
51198: PUSH
51199: LD_VAR 0 2
51203: ARRAY
51204: PPUSH
51205: LD_INT 25
51207: PUSH
51208: LD_INT 4
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PPUSH
51215: CALL_OW 72
51219: ST_TO_ADDR
// if not tmp then
51220: LD_VAR 0 4
51224: NOT
51225: IFFALSE 51229
// continue ;
51227: GO 51116
// if mc_taming [ i ] then
51229: LD_EXP 45
51233: PUSH
51234: LD_VAR 0 2
51238: ARRAY
51239: IFFALSE 51263
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
51241: LD_ADDR_EXP 45
51245: PUSH
51246: LD_EXP 45
51250: PPUSH
51251: LD_VAR 0 2
51255: PPUSH
51256: EMPTY
51257: PPUSH
51258: CALL_OW 1
51262: ST_TO_ADDR
// for j in tmp do
51263: LD_ADDR_VAR 0 3
51267: PUSH
51268: LD_VAR 0 4
51272: PUSH
51273: FOR_IN
51274: IFFALSE 51497
// begin if IsInUnit ( j ) then
51276: LD_VAR 0 3
51280: PPUSH
51281: CALL_OW 310
51285: IFFALSE 51296
// ComExitBuilding ( j ) ;
51287: LD_VAR 0 3
51291: PPUSH
51292: CALL_OW 122
// if not j in mc_healers [ i ] then
51296: LD_VAR 0 3
51300: PUSH
51301: LD_EXP 18
51305: PUSH
51306: LD_VAR 0 2
51310: ARRAY
51311: IN
51312: NOT
51313: IFFALSE 51359
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
51315: LD_ADDR_EXP 18
51319: PUSH
51320: LD_EXP 18
51324: PPUSH
51325: LD_VAR 0 2
51329: PUSH
51330: LD_EXP 18
51334: PUSH
51335: LD_VAR 0 2
51339: ARRAY
51340: PUSH
51341: LD_INT 1
51343: PLUS
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PPUSH
51349: LD_VAR 0 3
51353: PPUSH
51354: CALL 9406 0 3
51358: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
51359: LD_VAR 0 3
51363: PPUSH
51364: CALL_OW 110
51368: PUSH
51369: LD_INT 102
51371: NONEQUAL
51372: IFFALSE 51386
// SetTag ( j , 102 ) ;
51374: LD_VAR 0 3
51378: PPUSH
51379: LD_INT 102
51381: PPUSH
51382: CALL_OW 109
// Wait ( 3 ) ;
51386: LD_INT 3
51388: PPUSH
51389: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
51393: LD_EXP 17
51397: PUSH
51398: LD_VAR 0 2
51402: ARRAY
51403: PUSH
51404: LD_INT 1
51406: ARRAY
51407: IFFALSE 51439
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
51409: LD_VAR 0 3
51413: PPUSH
51414: LD_EXP 17
51418: PUSH
51419: LD_VAR 0 2
51423: ARRAY
51424: PUSH
51425: LD_INT 1
51427: ARRAY
51428: PUSH
51429: LD_INT 1
51431: ARRAY
51432: PPUSH
51433: CALL_OW 128
51437: GO 51495
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
51439: LD_VAR 0 3
51443: PPUSH
51444: CALL_OW 314
51448: NOT
51449: PUSH
51450: LD_EXP 17
51454: PUSH
51455: LD_VAR 0 2
51459: ARRAY
51460: PUSH
51461: LD_INT 2
51463: ARRAY
51464: AND
51465: IFFALSE 51495
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
51467: LD_VAR 0 3
51471: PPUSH
51472: LD_EXP 17
51476: PUSH
51477: LD_VAR 0 2
51481: ARRAY
51482: PUSH
51483: LD_INT 2
51485: ARRAY
51486: PUSH
51487: LD_INT 1
51489: ARRAY
51490: PPUSH
51491: CALL_OW 128
// end ;
51495: GO 51273
51497: POP
51498: POP
// end ;
51499: GO 51116
51501: POP
51502: POP
// end ;
51503: LD_VAR 0 1
51507: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
51508: LD_INT 0
51510: PPUSH
51511: PPUSH
51512: PPUSH
51513: PPUSH
51514: PPUSH
// if not mc_bases then
51515: LD_EXP 14
51519: NOT
51520: IFFALSE 51524
// exit ;
51522: GO 52667
// for i = 1 to mc_bases do
51524: LD_ADDR_VAR 0 2
51528: PUSH
51529: DOUBLE
51530: LD_INT 1
51532: DEC
51533: ST_TO_ADDR
51534: LD_EXP 14
51538: PUSH
51539: FOR_TO
51540: IFFALSE 52665
// begin if mc_scan [ i ] then
51542: LD_EXP 37
51546: PUSH
51547: LD_VAR 0 2
51551: ARRAY
51552: IFFALSE 51556
// continue ;
51554: GO 51539
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
51556: LD_EXP 19
51560: PUSH
51561: LD_VAR 0 2
51565: ARRAY
51566: NOT
51567: PUSH
51568: LD_EXP 21
51572: PUSH
51573: LD_VAR 0 2
51577: ARRAY
51578: NOT
51579: AND
51580: PUSH
51581: LD_EXP 20
51585: PUSH
51586: LD_VAR 0 2
51590: ARRAY
51591: AND
51592: IFFALSE 51630
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
51594: LD_ADDR_EXP 20
51598: PUSH
51599: LD_EXP 20
51603: PPUSH
51604: LD_VAR 0 2
51608: PPUSH
51609: EMPTY
51610: PPUSH
51611: CALL_OW 1
51615: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
51616: LD_VAR 0 2
51620: PPUSH
51621: LD_INT 103
51623: PPUSH
51624: CALL 45350 0 2
// continue ;
51628: GO 51539
// end ; if mc_construct_list [ i ] then
51630: LD_EXP 21
51634: PUSH
51635: LD_VAR 0 2
51639: ARRAY
51640: IFFALSE 51860
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
51642: LD_ADDR_VAR 0 4
51646: PUSH
51647: LD_EXP 14
51651: PUSH
51652: LD_VAR 0 2
51656: ARRAY
51657: PPUSH
51658: LD_INT 25
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PPUSH
51668: CALL_OW 72
51672: PUSH
51673: LD_EXP 16
51677: PUSH
51678: LD_VAR 0 2
51682: ARRAY
51683: DIFF
51684: ST_TO_ADDR
// if not tmp then
51685: LD_VAR 0 4
51689: NOT
51690: IFFALSE 51694
// continue ;
51692: GO 51539
// for j in tmp do
51694: LD_ADDR_VAR 0 3
51698: PUSH
51699: LD_VAR 0 4
51703: PUSH
51704: FOR_IN
51705: IFFALSE 51856
// begin if not mc_builders [ i ] then
51707: LD_EXP 20
51711: PUSH
51712: LD_VAR 0 2
51716: ARRAY
51717: NOT
51718: IFFALSE 51776
// begin SetTag ( j , 103 ) ;
51720: LD_VAR 0 3
51724: PPUSH
51725: LD_INT 103
51727: PPUSH
51728: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
51732: LD_ADDR_EXP 20
51736: PUSH
51737: LD_EXP 20
51741: PPUSH
51742: LD_VAR 0 2
51746: PUSH
51747: LD_EXP 20
51751: PUSH
51752: LD_VAR 0 2
51756: ARRAY
51757: PUSH
51758: LD_INT 1
51760: PLUS
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PPUSH
51766: LD_VAR 0 3
51770: PPUSH
51771: CALL 9406 0 3
51775: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
51776: LD_VAR 0 3
51780: PPUSH
51781: CALL_OW 310
51785: IFFALSE 51796
// ComExitBuilding ( j ) ;
51787: LD_VAR 0 3
51791: PPUSH
51792: CALL_OW 122
// wait ( 3 ) ;
51796: LD_INT 3
51798: PPUSH
51799: CALL_OW 67
// if not mc_construct_list [ i ] then
51803: LD_EXP 21
51807: PUSH
51808: LD_VAR 0 2
51812: ARRAY
51813: NOT
51814: IFFALSE 51818
// break ;
51816: GO 51856
// if not HasTask ( j ) then
51818: LD_VAR 0 3
51822: PPUSH
51823: CALL_OW 314
51827: NOT
51828: IFFALSE 51854
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
51830: LD_VAR 0 3
51834: PPUSH
51835: LD_EXP 21
51839: PUSH
51840: LD_VAR 0 2
51844: ARRAY
51845: PUSH
51846: LD_INT 1
51848: ARRAY
51849: PPUSH
51850: CALL 12257 0 2
// end ;
51854: GO 51704
51856: POP
51857: POP
// end else
51858: GO 52663
// if mc_build_list [ i ] then
51860: LD_EXP 19
51864: PUSH
51865: LD_VAR 0 2
51869: ARRAY
51870: IFFALSE 52663
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51872: LD_ADDR_VAR 0 5
51876: PUSH
51877: LD_EXP 14
51881: PUSH
51882: LD_VAR 0 2
51886: ARRAY
51887: PPUSH
51888: LD_INT 2
51890: PUSH
51891: LD_INT 30
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 30
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: PPUSH
51916: CALL_OW 72
51920: ST_TO_ADDR
// if depot then
51921: LD_VAR 0 5
51925: IFFALSE 51943
// depot := depot [ 1 ] else
51927: LD_ADDR_VAR 0 5
51931: PUSH
51932: LD_VAR 0 5
51936: PUSH
51937: LD_INT 1
51939: ARRAY
51940: ST_TO_ADDR
51941: GO 51951
// depot := 0 ;
51943: LD_ADDR_VAR 0 5
51947: PUSH
51948: LD_INT 0
51950: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
51951: LD_EXP 19
51955: PUSH
51956: LD_VAR 0 2
51960: ARRAY
51961: PUSH
51962: LD_INT 1
51964: ARRAY
51965: PUSH
51966: LD_INT 1
51968: ARRAY
51969: PPUSH
51970: CALL 12087 0 1
51974: PUSH
51975: LD_EXP 14
51979: PUSH
51980: LD_VAR 0 2
51984: ARRAY
51985: PPUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 30
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 30
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: PPUSH
52014: CALL_OW 72
52018: NOT
52019: AND
52020: IFFALSE 52125
// begin for j = 1 to mc_build_list [ i ] do
52022: LD_ADDR_VAR 0 3
52026: PUSH
52027: DOUBLE
52028: LD_INT 1
52030: DEC
52031: ST_TO_ADDR
52032: LD_EXP 19
52036: PUSH
52037: LD_VAR 0 2
52041: ARRAY
52042: PUSH
52043: FOR_TO
52044: IFFALSE 52123
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
52046: LD_EXP 19
52050: PUSH
52051: LD_VAR 0 2
52055: ARRAY
52056: PUSH
52057: LD_VAR 0 3
52061: ARRAY
52062: PUSH
52063: LD_INT 1
52065: ARRAY
52066: PUSH
52067: LD_INT 2
52069: EQUAL
52070: IFFALSE 52121
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
52072: LD_ADDR_EXP 19
52076: PUSH
52077: LD_EXP 19
52081: PPUSH
52082: LD_VAR 0 2
52086: PPUSH
52087: LD_EXP 19
52091: PUSH
52092: LD_VAR 0 2
52096: ARRAY
52097: PPUSH
52098: LD_VAR 0 3
52102: PPUSH
52103: LD_INT 1
52105: PPUSH
52106: LD_INT 0
52108: PPUSH
52109: CALL 8824 0 4
52113: PPUSH
52114: CALL_OW 1
52118: ST_TO_ADDR
// break ;
52119: GO 52123
// end ;
52121: GO 52043
52123: POP
52124: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
52125: LD_EXP 19
52129: PUSH
52130: LD_VAR 0 2
52134: ARRAY
52135: PUSH
52136: LD_INT 1
52138: ARRAY
52139: PUSH
52140: LD_INT 1
52142: ARRAY
52143: PUSH
52144: LD_INT 0
52146: EQUAL
52147: PUSH
52148: LD_VAR 0 5
52152: PUSH
52153: LD_VAR 0 5
52157: PPUSH
52158: LD_EXP 19
52162: PUSH
52163: LD_VAR 0 2
52167: ARRAY
52168: PUSH
52169: LD_INT 1
52171: ARRAY
52172: PUSH
52173: LD_INT 1
52175: ARRAY
52176: PPUSH
52177: LD_EXP 19
52181: PUSH
52182: LD_VAR 0 2
52186: ARRAY
52187: PUSH
52188: LD_INT 1
52190: ARRAY
52191: PUSH
52192: LD_INT 2
52194: ARRAY
52195: PPUSH
52196: LD_EXP 19
52200: PUSH
52201: LD_VAR 0 2
52205: ARRAY
52206: PUSH
52207: LD_INT 1
52209: ARRAY
52210: PUSH
52211: LD_INT 3
52213: ARRAY
52214: PPUSH
52215: LD_EXP 19
52219: PUSH
52220: LD_VAR 0 2
52224: ARRAY
52225: PUSH
52226: LD_INT 1
52228: ARRAY
52229: PUSH
52230: LD_INT 4
52232: ARRAY
52233: PPUSH
52234: CALL 16821 0 5
52238: AND
52239: OR
52240: IFFALSE 52521
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
52242: LD_ADDR_VAR 0 4
52246: PUSH
52247: LD_EXP 14
52251: PUSH
52252: LD_VAR 0 2
52256: ARRAY
52257: PPUSH
52258: LD_INT 25
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PPUSH
52268: CALL_OW 72
52272: PUSH
52273: LD_EXP 16
52277: PUSH
52278: LD_VAR 0 2
52282: ARRAY
52283: DIFF
52284: ST_TO_ADDR
// if not tmp then
52285: LD_VAR 0 4
52289: NOT
52290: IFFALSE 52294
// continue ;
52292: GO 51539
// for j in tmp do
52294: LD_ADDR_VAR 0 3
52298: PUSH
52299: LD_VAR 0 4
52303: PUSH
52304: FOR_IN
52305: IFFALSE 52517
// begin if not mc_builders [ i ] then
52307: LD_EXP 20
52311: PUSH
52312: LD_VAR 0 2
52316: ARRAY
52317: NOT
52318: IFFALSE 52376
// begin SetTag ( j , 103 ) ;
52320: LD_VAR 0 3
52324: PPUSH
52325: LD_INT 103
52327: PPUSH
52328: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
52332: LD_ADDR_EXP 20
52336: PUSH
52337: LD_EXP 20
52341: PPUSH
52342: LD_VAR 0 2
52346: PUSH
52347: LD_EXP 20
52351: PUSH
52352: LD_VAR 0 2
52356: ARRAY
52357: PUSH
52358: LD_INT 1
52360: PLUS
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PPUSH
52366: LD_VAR 0 3
52370: PPUSH
52371: CALL 9406 0 3
52375: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
52376: LD_VAR 0 3
52380: PPUSH
52381: CALL_OW 310
52385: IFFALSE 52396
// ComExitBuilding ( j ) ;
52387: LD_VAR 0 3
52391: PPUSH
52392: CALL_OW 122
// wait ( 3 ) ;
52396: LD_INT 3
52398: PPUSH
52399: CALL_OW 67
// if not mc_build_list [ i ] then
52403: LD_EXP 19
52407: PUSH
52408: LD_VAR 0 2
52412: ARRAY
52413: NOT
52414: IFFALSE 52418
// break ;
52416: GO 52517
// if not HasTask ( j ) then
52418: LD_VAR 0 3
52422: PPUSH
52423: CALL_OW 314
52427: NOT
52428: IFFALSE 52515
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
52430: LD_VAR 0 3
52434: PPUSH
52435: LD_EXP 19
52439: PUSH
52440: LD_VAR 0 2
52444: ARRAY
52445: PUSH
52446: LD_INT 1
52448: ARRAY
52449: PUSH
52450: LD_INT 1
52452: ARRAY
52453: PPUSH
52454: LD_EXP 19
52458: PUSH
52459: LD_VAR 0 2
52463: ARRAY
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: PUSH
52469: LD_INT 2
52471: ARRAY
52472: PPUSH
52473: LD_EXP 19
52477: PUSH
52478: LD_VAR 0 2
52482: ARRAY
52483: PUSH
52484: LD_INT 1
52486: ARRAY
52487: PUSH
52488: LD_INT 3
52490: ARRAY
52491: PPUSH
52492: LD_EXP 19
52496: PUSH
52497: LD_VAR 0 2
52501: ARRAY
52502: PUSH
52503: LD_INT 1
52505: ARRAY
52506: PUSH
52507: LD_INT 4
52509: ARRAY
52510: PPUSH
52511: CALL_OW 145
// end ;
52515: GO 52304
52517: POP
52518: POP
// end else
52519: GO 52663
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
52521: LD_EXP 14
52525: PUSH
52526: LD_VAR 0 2
52530: ARRAY
52531: PPUSH
52532: LD_EXP 19
52536: PUSH
52537: LD_VAR 0 2
52541: ARRAY
52542: PUSH
52543: LD_INT 1
52545: ARRAY
52546: PUSH
52547: LD_INT 1
52549: ARRAY
52550: PPUSH
52551: LD_EXP 19
52555: PUSH
52556: LD_VAR 0 2
52560: ARRAY
52561: PUSH
52562: LD_INT 1
52564: ARRAY
52565: PUSH
52566: LD_INT 2
52568: ARRAY
52569: PPUSH
52570: LD_EXP 19
52574: PUSH
52575: LD_VAR 0 2
52579: ARRAY
52580: PUSH
52581: LD_INT 1
52583: ARRAY
52584: PUSH
52585: LD_INT 3
52587: ARRAY
52588: PPUSH
52589: LD_EXP 19
52593: PUSH
52594: LD_VAR 0 2
52598: ARRAY
52599: PUSH
52600: LD_INT 1
52602: ARRAY
52603: PUSH
52604: LD_INT 4
52606: ARRAY
52607: PPUSH
52608: CALL 16157 0 5
52612: NOT
52613: IFFALSE 52663
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
52615: LD_ADDR_EXP 19
52619: PUSH
52620: LD_EXP 19
52624: PPUSH
52625: LD_VAR 0 2
52629: PPUSH
52630: LD_EXP 19
52634: PUSH
52635: LD_VAR 0 2
52639: ARRAY
52640: PPUSH
52641: LD_INT 1
52643: PPUSH
52644: LD_INT 1
52646: NEG
52647: PPUSH
52648: LD_INT 0
52650: PPUSH
52651: CALL 8824 0 4
52655: PPUSH
52656: CALL_OW 1
52660: ST_TO_ADDR
// continue ;
52661: GO 51539
// end ; end ; end ;
52663: GO 51539
52665: POP
52666: POP
// end ;
52667: LD_VAR 0 1
52671: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
52672: LD_INT 0
52674: PPUSH
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
52679: PPUSH
// if not mc_bases then
52680: LD_EXP 14
52684: NOT
52685: IFFALSE 52689
// exit ;
52687: GO 53116
// for i = 1 to mc_bases do
52689: LD_ADDR_VAR 0 2
52693: PUSH
52694: DOUBLE
52695: LD_INT 1
52697: DEC
52698: ST_TO_ADDR
52699: LD_EXP 14
52703: PUSH
52704: FOR_TO
52705: IFFALSE 53114
// begin tmp := mc_build_upgrade [ i ] ;
52707: LD_ADDR_VAR 0 4
52711: PUSH
52712: LD_EXP 46
52716: PUSH
52717: LD_VAR 0 2
52721: ARRAY
52722: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
52723: LD_ADDR_VAR 0 6
52727: PUSH
52728: LD_EXP 47
52732: PUSH
52733: LD_VAR 0 2
52737: ARRAY
52738: PPUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 30
52744: PUSH
52745: LD_INT 6
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 30
52754: PUSH
52755: LD_INT 7
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: PPUSH
52767: CALL_OW 72
52771: ST_TO_ADDR
// if not tmp and not lab then
52772: LD_VAR 0 4
52776: NOT
52777: PUSH
52778: LD_VAR 0 6
52782: NOT
52783: AND
52784: IFFALSE 52788
// continue ;
52786: GO 52704
// if tmp then
52788: LD_VAR 0 4
52792: IFFALSE 52912
// for j in tmp do
52794: LD_ADDR_VAR 0 3
52798: PUSH
52799: LD_VAR 0 4
52803: PUSH
52804: FOR_IN
52805: IFFALSE 52910
// begin if UpgradeCost ( j ) then
52807: LD_VAR 0 3
52811: PPUSH
52812: CALL 15817 0 1
52816: IFFALSE 52908
// begin ComUpgrade ( j ) ;
52818: LD_VAR 0 3
52822: PPUSH
52823: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
52827: LD_ADDR_EXP 46
52831: PUSH
52832: LD_EXP 46
52836: PPUSH
52837: LD_VAR 0 2
52841: PPUSH
52842: LD_EXP 46
52846: PUSH
52847: LD_VAR 0 2
52851: ARRAY
52852: PUSH
52853: LD_VAR 0 3
52857: DIFF
52858: PPUSH
52859: CALL_OW 1
52863: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
52864: LD_ADDR_EXP 21
52868: PUSH
52869: LD_EXP 21
52873: PPUSH
52874: LD_VAR 0 2
52878: PUSH
52879: LD_EXP 21
52883: PUSH
52884: LD_VAR 0 2
52888: ARRAY
52889: PUSH
52890: LD_INT 1
52892: PLUS
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PPUSH
52898: LD_VAR 0 3
52902: PPUSH
52903: CALL 9406 0 3
52907: ST_TO_ADDR
// end ; end ;
52908: GO 52804
52910: POP
52911: POP
// if not lab or not mc_lab_upgrade [ i ] then
52912: LD_VAR 0 6
52916: NOT
52917: PUSH
52918: LD_EXP 48
52922: PUSH
52923: LD_VAR 0 2
52927: ARRAY
52928: NOT
52929: OR
52930: IFFALSE 52934
// continue ;
52932: GO 52704
// for j in lab do
52934: LD_ADDR_VAR 0 3
52938: PUSH
52939: LD_VAR 0 6
52943: PUSH
52944: FOR_IN
52945: IFFALSE 53110
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
52947: LD_VAR 0 3
52951: PPUSH
52952: CALL_OW 266
52956: PUSH
52957: LD_INT 6
52959: PUSH
52960: LD_INT 7
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: IN
52967: PUSH
52968: LD_VAR 0 3
52972: PPUSH
52973: CALL_OW 461
52977: PUSH
52978: LD_INT 1
52980: NONEQUAL
52981: AND
52982: IFFALSE 53108
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
52984: LD_VAR 0 3
52988: PPUSH
52989: LD_EXP 48
52993: PUSH
52994: LD_VAR 0 2
52998: ARRAY
52999: PUSH
53000: LD_INT 1
53002: ARRAY
53003: PPUSH
53004: CALL 16022 0 2
53008: IFFALSE 53108
// begin ComCancel ( j ) ;
53010: LD_VAR 0 3
53014: PPUSH
53015: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
53019: LD_VAR 0 3
53023: PPUSH
53024: LD_EXP 48
53028: PUSH
53029: LD_VAR 0 2
53033: ARRAY
53034: PUSH
53035: LD_INT 1
53037: ARRAY
53038: PPUSH
53039: CALL_OW 207
// if not j in mc_construct_list [ i ] then
53043: LD_VAR 0 3
53047: PUSH
53048: LD_EXP 21
53052: PUSH
53053: LD_VAR 0 2
53057: ARRAY
53058: IN
53059: NOT
53060: IFFALSE 53106
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
53062: LD_ADDR_EXP 21
53066: PUSH
53067: LD_EXP 21
53071: PPUSH
53072: LD_VAR 0 2
53076: PUSH
53077: LD_EXP 21
53081: PUSH
53082: LD_VAR 0 2
53086: ARRAY
53087: PUSH
53088: LD_INT 1
53090: PLUS
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PPUSH
53096: LD_VAR 0 3
53100: PPUSH
53101: CALL 9406 0 3
53105: ST_TO_ADDR
// break ;
53106: GO 53110
// end ; end ; end ;
53108: GO 52944
53110: POP
53111: POP
// end ;
53112: GO 52704
53114: POP
53115: POP
// end ;
53116: LD_VAR 0 1
53120: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
53121: LD_INT 0
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
// if not mc_bases then
53132: LD_EXP 14
53136: NOT
53137: IFFALSE 53141
// exit ;
53139: GO 53546
// for i = 1 to mc_bases do
53141: LD_ADDR_VAR 0 2
53145: PUSH
53146: DOUBLE
53147: LD_INT 1
53149: DEC
53150: ST_TO_ADDR
53151: LD_EXP 14
53155: PUSH
53156: FOR_TO
53157: IFFALSE 53544
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
53159: LD_EXP 22
53163: PUSH
53164: LD_VAR 0 2
53168: ARRAY
53169: NOT
53170: PUSH
53171: LD_EXP 14
53175: PUSH
53176: LD_VAR 0 2
53180: ARRAY
53181: PPUSH
53182: LD_INT 30
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PPUSH
53192: CALL_OW 72
53196: NOT
53197: OR
53198: IFFALSE 53202
// continue ;
53200: GO 53156
// busy := false ;
53202: LD_ADDR_VAR 0 8
53206: PUSH
53207: LD_INT 0
53209: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
53210: LD_ADDR_VAR 0 4
53214: PUSH
53215: LD_EXP 14
53219: PUSH
53220: LD_VAR 0 2
53224: ARRAY
53225: PPUSH
53226: LD_INT 30
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PPUSH
53236: CALL_OW 72
53240: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
53241: LD_ADDR_VAR 0 6
53245: PUSH
53246: LD_EXP 22
53250: PUSH
53251: LD_VAR 0 2
53255: ARRAY
53256: PPUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 30
53262: PUSH
53263: LD_INT 32
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 30
53272: PUSH
53273: LD_INT 33
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: PPUSH
53285: CALL_OW 72
53289: ST_TO_ADDR
// if not t then
53290: LD_VAR 0 6
53294: NOT
53295: IFFALSE 53299
// continue ;
53297: GO 53156
// for j in tmp do
53299: LD_ADDR_VAR 0 3
53303: PUSH
53304: LD_VAR 0 4
53308: PUSH
53309: FOR_IN
53310: IFFALSE 53340
// if not BuildingStatus ( j ) = bs_idle then
53312: LD_VAR 0 3
53316: PPUSH
53317: CALL_OW 461
53321: PUSH
53322: LD_INT 2
53324: EQUAL
53325: NOT
53326: IFFALSE 53338
// begin busy := true ;
53328: LD_ADDR_VAR 0 8
53332: PUSH
53333: LD_INT 1
53335: ST_TO_ADDR
// break ;
53336: GO 53340
// end ;
53338: GO 53309
53340: POP
53341: POP
// if busy then
53342: LD_VAR 0 8
53346: IFFALSE 53350
// continue ;
53348: GO 53156
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
53350: LD_ADDR_VAR 0 7
53354: PUSH
53355: LD_VAR 0 6
53359: PPUSH
53360: LD_INT 35
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PPUSH
53370: CALL_OW 72
53374: ST_TO_ADDR
// if tw then
53375: LD_VAR 0 7
53379: IFFALSE 53456
// begin tw := tw [ 1 ] ;
53381: LD_ADDR_VAR 0 7
53385: PUSH
53386: LD_VAR 0 7
53390: PUSH
53391: LD_INT 1
53393: ARRAY
53394: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
53395: LD_ADDR_VAR 0 9
53399: PUSH
53400: LD_VAR 0 7
53404: PPUSH
53405: LD_EXP 39
53409: PUSH
53410: LD_VAR 0 2
53414: ARRAY
53415: PPUSH
53416: CALL 14376 0 2
53420: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
53421: LD_EXP 53
53425: PUSH
53426: LD_VAR 0 2
53430: ARRAY
53431: IFFALSE 53454
// if not weapon in mc_allowed_tower_weapons [ i ] then
53433: LD_VAR 0 9
53437: PUSH
53438: LD_EXP 53
53442: PUSH
53443: LD_VAR 0 2
53447: ARRAY
53448: IN
53449: NOT
53450: IFFALSE 53454
// continue ;
53452: GO 53156
// end else
53454: GO 53519
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
53456: LD_ADDR_VAR 0 5
53460: PUSH
53461: LD_EXP 22
53465: PUSH
53466: LD_VAR 0 2
53470: ARRAY
53471: PPUSH
53472: LD_VAR 0 4
53476: PPUSH
53477: CALL 39997 0 2
53481: ST_TO_ADDR
// if not tmp2 then
53482: LD_VAR 0 5
53486: NOT
53487: IFFALSE 53491
// continue ;
53489: GO 53156
// tw := tmp2 [ 1 ] ;
53491: LD_ADDR_VAR 0 7
53495: PUSH
53496: LD_VAR 0 5
53500: PUSH
53501: LD_INT 1
53503: ARRAY
53504: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
53505: LD_ADDR_VAR 0 9
53509: PUSH
53510: LD_VAR 0 5
53514: PUSH
53515: LD_INT 2
53517: ARRAY
53518: ST_TO_ADDR
// end ; if not weapon then
53519: LD_VAR 0 9
53523: NOT
53524: IFFALSE 53528
// continue ;
53526: GO 53156
// ComPlaceWeapon ( tw , weapon ) ;
53528: LD_VAR 0 7
53532: PPUSH
53533: LD_VAR 0 9
53537: PPUSH
53538: CALL_OW 148
// end ;
53542: GO 53156
53544: POP
53545: POP
// end ;
53546: LD_VAR 0 1
53550: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
53551: LD_INT 0
53553: PPUSH
53554: PPUSH
53555: PPUSH
53556: PPUSH
53557: PPUSH
53558: PPUSH
// if not mc_bases then
53559: LD_EXP 14
53563: NOT
53564: IFFALSE 53568
// exit ;
53566: GO 54344
// for i = 1 to mc_bases do
53568: LD_ADDR_VAR 0 2
53572: PUSH
53573: DOUBLE
53574: LD_INT 1
53576: DEC
53577: ST_TO_ADDR
53578: LD_EXP 14
53582: PUSH
53583: FOR_TO
53584: IFFALSE 54342
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
53586: LD_EXP 27
53590: PUSH
53591: LD_VAR 0 2
53595: ARRAY
53596: NOT
53597: PUSH
53598: LD_EXP 27
53602: PUSH
53603: LD_VAR 0 2
53607: ARRAY
53608: PUSH
53609: LD_EXP 28
53613: PUSH
53614: LD_VAR 0 2
53618: ARRAY
53619: EQUAL
53620: OR
53621: PUSH
53622: LD_EXP 37
53626: PUSH
53627: LD_VAR 0 2
53631: ARRAY
53632: OR
53633: IFFALSE 53637
// continue ;
53635: GO 53583
// if mc_miners [ i ] then
53637: LD_EXP 28
53641: PUSH
53642: LD_VAR 0 2
53646: ARRAY
53647: IFFALSE 54029
// begin for j = mc_miners [ i ] downto 1 do
53649: LD_ADDR_VAR 0 3
53653: PUSH
53654: DOUBLE
53655: LD_EXP 28
53659: PUSH
53660: LD_VAR 0 2
53664: ARRAY
53665: INC
53666: ST_TO_ADDR
53667: LD_INT 1
53669: PUSH
53670: FOR_DOWNTO
53671: IFFALSE 54027
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
53673: LD_EXP 28
53677: PUSH
53678: LD_VAR 0 2
53682: ARRAY
53683: PUSH
53684: LD_VAR 0 3
53688: ARRAY
53689: PPUSH
53690: CALL_OW 301
53694: PUSH
53695: LD_EXP 28
53699: PUSH
53700: LD_VAR 0 2
53704: ARRAY
53705: PUSH
53706: LD_VAR 0 3
53710: ARRAY
53711: PPUSH
53712: CALL_OW 257
53716: PUSH
53717: LD_INT 1
53719: NONEQUAL
53720: OR
53721: IFFALSE 53784
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
53723: LD_ADDR_VAR 0 5
53727: PUSH
53728: LD_EXP 28
53732: PUSH
53733: LD_VAR 0 2
53737: ARRAY
53738: PUSH
53739: LD_EXP 28
53743: PUSH
53744: LD_VAR 0 2
53748: ARRAY
53749: PUSH
53750: LD_VAR 0 3
53754: ARRAY
53755: DIFF
53756: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
53757: LD_ADDR_EXP 28
53761: PUSH
53762: LD_EXP 28
53766: PPUSH
53767: LD_VAR 0 2
53771: PPUSH
53772: LD_VAR 0 5
53776: PPUSH
53777: CALL_OW 1
53781: ST_TO_ADDR
// continue ;
53782: GO 53670
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
53784: LD_EXP 28
53788: PUSH
53789: LD_VAR 0 2
53793: ARRAY
53794: PUSH
53795: LD_VAR 0 3
53799: ARRAY
53800: PPUSH
53801: CALL_OW 257
53805: PUSH
53806: LD_INT 1
53808: EQUAL
53809: PUSH
53810: LD_EXP 28
53814: PUSH
53815: LD_VAR 0 2
53819: ARRAY
53820: PUSH
53821: LD_VAR 0 3
53825: ARRAY
53826: PPUSH
53827: CALL_OW 459
53831: NOT
53832: AND
53833: PUSH
53834: LD_EXP 28
53838: PUSH
53839: LD_VAR 0 2
53843: ARRAY
53844: PUSH
53845: LD_VAR 0 3
53849: ARRAY
53850: PPUSH
53851: CALL_OW 314
53855: NOT
53856: AND
53857: IFFALSE 54025
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
53859: LD_EXP 28
53863: PUSH
53864: LD_VAR 0 2
53868: ARRAY
53869: PUSH
53870: LD_VAR 0 3
53874: ARRAY
53875: PPUSH
53876: CALL_OW 310
53880: IFFALSE 53903
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
53882: LD_EXP 28
53886: PUSH
53887: LD_VAR 0 2
53891: ARRAY
53892: PUSH
53893: LD_VAR 0 3
53897: ARRAY
53898: PPUSH
53899: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
53903: LD_EXP 28
53907: PUSH
53908: LD_VAR 0 2
53912: ARRAY
53913: PUSH
53914: LD_VAR 0 3
53918: ARRAY
53919: PPUSH
53920: CALL_OW 314
53924: NOT
53925: IFFALSE 54025
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
53927: LD_EXP 28
53931: PUSH
53932: LD_VAR 0 2
53936: ARRAY
53937: PUSH
53938: LD_VAR 0 3
53942: ARRAY
53943: PPUSH
53944: LD_EXP 27
53948: PUSH
53949: LD_VAR 0 2
53953: ARRAY
53954: PUSH
53955: LD_VAR 0 3
53959: PUSH
53960: LD_EXP 27
53964: PUSH
53965: LD_VAR 0 2
53969: ARRAY
53970: MOD
53971: PUSH
53972: LD_INT 1
53974: PLUS
53975: ARRAY
53976: PUSH
53977: LD_INT 1
53979: ARRAY
53980: PPUSH
53981: LD_EXP 27
53985: PUSH
53986: LD_VAR 0 2
53990: ARRAY
53991: PUSH
53992: LD_VAR 0 3
53996: PUSH
53997: LD_EXP 27
54001: PUSH
54002: LD_VAR 0 2
54006: ARRAY
54007: MOD
54008: PUSH
54009: LD_INT 1
54011: PLUS
54012: ARRAY
54013: PUSH
54014: LD_INT 2
54016: ARRAY
54017: PPUSH
54018: LD_INT 0
54020: PPUSH
54021: CALL_OW 193
// end ; end ;
54025: GO 53670
54027: POP
54028: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
54029: LD_ADDR_VAR 0 5
54033: PUSH
54034: LD_EXP 14
54038: PUSH
54039: LD_VAR 0 2
54043: ARRAY
54044: PPUSH
54045: LD_INT 2
54047: PUSH
54048: LD_INT 30
54050: PUSH
54051: LD_INT 4
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 30
54060: PUSH
54061: LD_INT 5
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 30
54070: PUSH
54071: LD_INT 32
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: PPUSH
54084: CALL_OW 72
54088: ST_TO_ADDR
// if not tmp then
54089: LD_VAR 0 5
54093: NOT
54094: IFFALSE 54098
// continue ;
54096: GO 53583
// list := [ ] ;
54098: LD_ADDR_VAR 0 6
54102: PUSH
54103: EMPTY
54104: ST_TO_ADDR
// for j in tmp do
54105: LD_ADDR_VAR 0 3
54109: PUSH
54110: LD_VAR 0 5
54114: PUSH
54115: FOR_IN
54116: IFFALSE 54185
// begin for k in UnitsInside ( j ) do
54118: LD_ADDR_VAR 0 4
54122: PUSH
54123: LD_VAR 0 3
54127: PPUSH
54128: CALL_OW 313
54132: PUSH
54133: FOR_IN
54134: IFFALSE 54181
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
54136: LD_VAR 0 4
54140: PPUSH
54141: CALL_OW 257
54145: PUSH
54146: LD_INT 1
54148: EQUAL
54149: PUSH
54150: LD_VAR 0 4
54154: PPUSH
54155: CALL_OW 459
54159: NOT
54160: AND
54161: IFFALSE 54179
// list := list ^ k ;
54163: LD_ADDR_VAR 0 6
54167: PUSH
54168: LD_VAR 0 6
54172: PUSH
54173: LD_VAR 0 4
54177: ADD
54178: ST_TO_ADDR
54179: GO 54133
54181: POP
54182: POP
// end ;
54183: GO 54115
54185: POP
54186: POP
// list := list diff mc_miners [ i ] ;
54187: LD_ADDR_VAR 0 6
54191: PUSH
54192: LD_VAR 0 6
54196: PUSH
54197: LD_EXP 28
54201: PUSH
54202: LD_VAR 0 2
54206: ARRAY
54207: DIFF
54208: ST_TO_ADDR
// if not list then
54209: LD_VAR 0 6
54213: NOT
54214: IFFALSE 54218
// continue ;
54216: GO 53583
// k := mc_mines [ i ] - mc_miners [ i ] ;
54218: LD_ADDR_VAR 0 4
54222: PUSH
54223: LD_EXP 27
54227: PUSH
54228: LD_VAR 0 2
54232: ARRAY
54233: PUSH
54234: LD_EXP 28
54238: PUSH
54239: LD_VAR 0 2
54243: ARRAY
54244: MINUS
54245: ST_TO_ADDR
// if k > list then
54246: LD_VAR 0 4
54250: PUSH
54251: LD_VAR 0 6
54255: GREATER
54256: IFFALSE 54268
// k := list ;
54258: LD_ADDR_VAR 0 4
54262: PUSH
54263: LD_VAR 0 6
54267: ST_TO_ADDR
// for j = 1 to k do
54268: LD_ADDR_VAR 0 3
54272: PUSH
54273: DOUBLE
54274: LD_INT 1
54276: DEC
54277: ST_TO_ADDR
54278: LD_VAR 0 4
54282: PUSH
54283: FOR_TO
54284: IFFALSE 54338
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
54286: LD_ADDR_EXP 28
54290: PUSH
54291: LD_EXP 28
54295: PPUSH
54296: LD_VAR 0 2
54300: PUSH
54301: LD_EXP 28
54305: PUSH
54306: LD_VAR 0 2
54310: ARRAY
54311: PUSH
54312: LD_INT 1
54314: PLUS
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PPUSH
54320: LD_VAR 0 6
54324: PUSH
54325: LD_VAR 0 3
54329: ARRAY
54330: PPUSH
54331: CALL 9406 0 3
54335: ST_TO_ADDR
54336: GO 54283
54338: POP
54339: POP
// end ;
54340: GO 53583
54342: POP
54343: POP
// end ;
54344: LD_VAR 0 1
54348: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
54349: LD_INT 0
54351: PPUSH
54352: PPUSH
54353: PPUSH
54354: PPUSH
54355: PPUSH
54356: PPUSH
54357: PPUSH
54358: PPUSH
54359: PPUSH
54360: PPUSH
// if not mc_bases then
54361: LD_EXP 14
54365: NOT
54366: IFFALSE 54370
// exit ;
54368: GO 56120
// for i = 1 to mc_bases do
54370: LD_ADDR_VAR 0 2
54374: PUSH
54375: DOUBLE
54376: LD_INT 1
54378: DEC
54379: ST_TO_ADDR
54380: LD_EXP 14
54384: PUSH
54385: FOR_TO
54386: IFFALSE 56118
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
54388: LD_EXP 14
54392: PUSH
54393: LD_VAR 0 2
54397: ARRAY
54398: NOT
54399: PUSH
54400: LD_EXP 21
54404: PUSH
54405: LD_VAR 0 2
54409: ARRAY
54410: OR
54411: IFFALSE 54415
// continue ;
54413: GO 54385
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
54415: LD_EXP 30
54419: PUSH
54420: LD_VAR 0 2
54424: ARRAY
54425: NOT
54426: PUSH
54427: LD_EXP 31
54431: PUSH
54432: LD_VAR 0 2
54436: ARRAY
54437: AND
54438: IFFALSE 54476
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
54440: LD_ADDR_EXP 31
54444: PUSH
54445: LD_EXP 31
54449: PPUSH
54450: LD_VAR 0 2
54454: PPUSH
54455: EMPTY
54456: PPUSH
54457: CALL_OW 1
54461: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
54462: LD_VAR 0 2
54466: PPUSH
54467: LD_INT 107
54469: PPUSH
54470: CALL 45350 0 2
// continue ;
54474: GO 54385
// end ; target := [ ] ;
54476: LD_ADDR_VAR 0 6
54480: PUSH
54481: EMPTY
54482: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
54483: LD_ADDR_VAR 0 3
54487: PUSH
54488: DOUBLE
54489: LD_EXP 30
54493: PUSH
54494: LD_VAR 0 2
54498: ARRAY
54499: INC
54500: ST_TO_ADDR
54501: LD_INT 1
54503: PUSH
54504: FOR_DOWNTO
54505: IFFALSE 54765
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
54507: LD_EXP 30
54511: PUSH
54512: LD_VAR 0 2
54516: ARRAY
54517: PUSH
54518: LD_VAR 0 3
54522: ARRAY
54523: PUSH
54524: LD_INT 2
54526: ARRAY
54527: PPUSH
54528: LD_EXP 30
54532: PUSH
54533: LD_VAR 0 2
54537: ARRAY
54538: PUSH
54539: LD_VAR 0 3
54543: ARRAY
54544: PUSH
54545: LD_INT 3
54547: ARRAY
54548: PPUSH
54549: CALL_OW 488
54553: PUSH
54554: LD_EXP 30
54558: PUSH
54559: LD_VAR 0 2
54563: ARRAY
54564: PUSH
54565: LD_VAR 0 3
54569: ARRAY
54570: PUSH
54571: LD_INT 2
54573: ARRAY
54574: PPUSH
54575: LD_EXP 30
54579: PUSH
54580: LD_VAR 0 2
54584: ARRAY
54585: PUSH
54586: LD_VAR 0 3
54590: ARRAY
54591: PUSH
54592: LD_INT 3
54594: ARRAY
54595: PPUSH
54596: CALL_OW 284
54600: PUSH
54601: LD_INT 0
54603: EQUAL
54604: AND
54605: IFFALSE 54660
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
54607: LD_ADDR_VAR 0 5
54611: PUSH
54612: LD_EXP 30
54616: PUSH
54617: LD_VAR 0 2
54621: ARRAY
54622: PPUSH
54623: LD_VAR 0 3
54627: PPUSH
54628: CALL_OW 3
54632: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
54633: LD_ADDR_EXP 30
54637: PUSH
54638: LD_EXP 30
54642: PPUSH
54643: LD_VAR 0 2
54647: PPUSH
54648: LD_VAR 0 5
54652: PPUSH
54653: CALL_OW 1
54657: ST_TO_ADDR
// continue ;
54658: GO 54504
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
54660: LD_EXP 14
54664: PUSH
54665: LD_VAR 0 2
54669: ARRAY
54670: PUSH
54671: LD_INT 1
54673: ARRAY
54674: PPUSH
54675: CALL_OW 255
54679: PPUSH
54680: LD_EXP 30
54684: PUSH
54685: LD_VAR 0 2
54689: ARRAY
54690: PUSH
54691: LD_VAR 0 3
54695: ARRAY
54696: PUSH
54697: LD_INT 2
54699: ARRAY
54700: PPUSH
54701: LD_EXP 30
54705: PUSH
54706: LD_VAR 0 2
54710: ARRAY
54711: PUSH
54712: LD_VAR 0 3
54716: ARRAY
54717: PUSH
54718: LD_INT 3
54720: ARRAY
54721: PPUSH
54722: LD_INT 30
54724: PPUSH
54725: CALL 10302 0 4
54729: PUSH
54730: LD_INT 4
54732: ARRAY
54733: PUSH
54734: LD_INT 0
54736: EQUAL
54737: IFFALSE 54763
// begin target := mc_crates [ i ] [ j ] ;
54739: LD_ADDR_VAR 0 6
54743: PUSH
54744: LD_EXP 30
54748: PUSH
54749: LD_VAR 0 2
54753: ARRAY
54754: PUSH
54755: LD_VAR 0 3
54759: ARRAY
54760: ST_TO_ADDR
// break ;
54761: GO 54765
// end ; end ;
54763: GO 54504
54765: POP
54766: POP
// if not target then
54767: LD_VAR 0 6
54771: NOT
54772: IFFALSE 54776
// continue ;
54774: GO 54385
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
54776: LD_ADDR_VAR 0 7
54780: PUSH
54781: LD_EXP 33
54785: PUSH
54786: LD_VAR 0 2
54790: ARRAY
54791: PPUSH
54792: LD_INT 2
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 58
54800: PUSH
54801: EMPTY
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 61
54810: PUSH
54811: EMPTY
54812: LIST
54813: PUSH
54814: LD_INT 33
54816: PUSH
54817: LD_INT 5
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 33
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: LD_INT 34
54846: PUSH
54847: LD_INT 32
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 34
54856: PUSH
54857: LD_INT 51
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 34
54866: PUSH
54867: LD_INT 12
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PPUSH
54884: CALL_OW 72
54888: ST_TO_ADDR
// if not cargo then
54889: LD_VAR 0 7
54893: NOT
54894: IFFALSE 55537
// begin if mc_crates_collector [ i ] < 5 then
54896: LD_EXP 31
54900: PUSH
54901: LD_VAR 0 2
54905: ARRAY
54906: PUSH
54907: LD_INT 5
54909: LESS
54910: IFFALSE 55276
// begin if mc_ape [ i ] then
54912: LD_EXP 43
54916: PUSH
54917: LD_VAR 0 2
54921: ARRAY
54922: IFFALSE 54969
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
54924: LD_ADDR_VAR 0 5
54928: PUSH
54929: LD_EXP 43
54933: PUSH
54934: LD_VAR 0 2
54938: ARRAY
54939: PPUSH
54940: LD_INT 25
54942: PUSH
54943: LD_INT 16
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 24
54952: PUSH
54953: LD_INT 750
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PPUSH
54964: CALL_OW 72
54968: ST_TO_ADDR
// if not tmp then
54969: LD_VAR 0 5
54973: NOT
54974: IFFALSE 55021
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
54976: LD_ADDR_VAR 0 5
54980: PUSH
54981: LD_EXP 14
54985: PUSH
54986: LD_VAR 0 2
54990: ARRAY
54991: PPUSH
54992: LD_INT 25
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 24
55004: PUSH
55005: LD_INT 750
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PPUSH
55016: CALL_OW 72
55020: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
55021: LD_EXP 43
55025: PUSH
55026: LD_VAR 0 2
55030: ARRAY
55031: PUSH
55032: LD_EXP 14
55036: PUSH
55037: LD_VAR 0 2
55041: ARRAY
55042: PPUSH
55043: LD_INT 25
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 24
55055: PUSH
55056: LD_INT 750
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PPUSH
55067: CALL_OW 72
55071: AND
55072: PUSH
55073: LD_VAR 0 5
55077: PUSH
55078: LD_INT 5
55080: LESS
55081: AND
55082: IFFALSE 55164
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
55084: LD_ADDR_VAR 0 3
55088: PUSH
55089: LD_EXP 14
55093: PUSH
55094: LD_VAR 0 2
55098: ARRAY
55099: PPUSH
55100: LD_INT 25
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 24
55112: PUSH
55113: LD_INT 750
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PPUSH
55124: CALL_OW 72
55128: PUSH
55129: FOR_IN
55130: IFFALSE 55162
// begin tmp := tmp union j ;
55132: LD_ADDR_VAR 0 5
55136: PUSH
55137: LD_VAR 0 5
55141: PUSH
55142: LD_VAR 0 3
55146: UNION
55147: ST_TO_ADDR
// if tmp >= 5 then
55148: LD_VAR 0 5
55152: PUSH
55153: LD_INT 5
55155: GREATEREQUAL
55156: IFFALSE 55160
// break ;
55158: GO 55162
// end ;
55160: GO 55129
55162: POP
55163: POP
// end ; if not tmp then
55164: LD_VAR 0 5
55168: NOT
55169: IFFALSE 55173
// continue ;
55171: GO 54385
// for j in tmp do
55173: LD_ADDR_VAR 0 3
55177: PUSH
55178: LD_VAR 0 5
55182: PUSH
55183: FOR_IN
55184: IFFALSE 55274
// if not GetTag ( j ) then
55186: LD_VAR 0 3
55190: PPUSH
55191: CALL_OW 110
55195: NOT
55196: IFFALSE 55272
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
55198: LD_ADDR_EXP 31
55202: PUSH
55203: LD_EXP 31
55207: PPUSH
55208: LD_VAR 0 2
55212: PUSH
55213: LD_EXP 31
55217: PUSH
55218: LD_VAR 0 2
55222: ARRAY
55223: PUSH
55224: LD_INT 1
55226: PLUS
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PPUSH
55232: LD_VAR 0 3
55236: PPUSH
55237: CALL 9406 0 3
55241: ST_TO_ADDR
// SetTag ( j , 107 ) ;
55242: LD_VAR 0 3
55246: PPUSH
55247: LD_INT 107
55249: PPUSH
55250: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
55254: LD_EXP 31
55258: PUSH
55259: LD_VAR 0 2
55263: ARRAY
55264: PUSH
55265: LD_INT 5
55267: GREATEREQUAL
55268: IFFALSE 55272
// break ;
55270: GO 55274
// end ;
55272: GO 55183
55274: POP
55275: POP
// end ; if mc_crates_collector [ i ] and target then
55276: LD_EXP 31
55280: PUSH
55281: LD_VAR 0 2
55285: ARRAY
55286: PUSH
55287: LD_VAR 0 6
55291: AND
55292: IFFALSE 55535
// begin if mc_crates_collector [ i ] < target [ 1 ] then
55294: LD_EXP 31
55298: PUSH
55299: LD_VAR 0 2
55303: ARRAY
55304: PUSH
55305: LD_VAR 0 6
55309: PUSH
55310: LD_INT 1
55312: ARRAY
55313: LESS
55314: IFFALSE 55334
// tmp := mc_crates_collector [ i ] else
55316: LD_ADDR_VAR 0 5
55320: PUSH
55321: LD_EXP 31
55325: PUSH
55326: LD_VAR 0 2
55330: ARRAY
55331: ST_TO_ADDR
55332: GO 55348
// tmp := target [ 1 ] ;
55334: LD_ADDR_VAR 0 5
55338: PUSH
55339: LD_VAR 0 6
55343: PUSH
55344: LD_INT 1
55346: ARRAY
55347: ST_TO_ADDR
// k := 0 ;
55348: LD_ADDR_VAR 0 4
55352: PUSH
55353: LD_INT 0
55355: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
55356: LD_ADDR_VAR 0 3
55360: PUSH
55361: LD_EXP 31
55365: PUSH
55366: LD_VAR 0 2
55370: ARRAY
55371: PUSH
55372: FOR_IN
55373: IFFALSE 55533
// begin k := k + 1 ;
55375: LD_ADDR_VAR 0 4
55379: PUSH
55380: LD_VAR 0 4
55384: PUSH
55385: LD_INT 1
55387: PLUS
55388: ST_TO_ADDR
// if k > tmp then
55389: LD_VAR 0 4
55393: PUSH
55394: LD_VAR 0 5
55398: GREATER
55399: IFFALSE 55403
// break ;
55401: GO 55533
// if not GetClass ( j ) in [ 2 , 16 ] then
55403: LD_VAR 0 3
55407: PPUSH
55408: CALL_OW 257
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 16
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: IN
55423: NOT
55424: IFFALSE 55477
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
55426: LD_ADDR_EXP 31
55430: PUSH
55431: LD_EXP 31
55435: PPUSH
55436: LD_VAR 0 2
55440: PPUSH
55441: LD_EXP 31
55445: PUSH
55446: LD_VAR 0 2
55450: ARRAY
55451: PUSH
55452: LD_VAR 0 3
55456: DIFF
55457: PPUSH
55458: CALL_OW 1
55462: ST_TO_ADDR
// SetTag ( j , 0 ) ;
55463: LD_VAR 0 3
55467: PPUSH
55468: LD_INT 0
55470: PPUSH
55471: CALL_OW 109
// continue ;
55475: GO 55372
// end ; if IsInUnit ( j ) then
55477: LD_VAR 0 3
55481: PPUSH
55482: CALL_OW 310
55486: IFFALSE 55497
// ComExitBuilding ( j ) ;
55488: LD_VAR 0 3
55492: PPUSH
55493: CALL_OW 122
// wait ( 3 ) ;
55497: LD_INT 3
55499: PPUSH
55500: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
55504: LD_VAR 0 3
55508: PPUSH
55509: LD_VAR 0 6
55513: PUSH
55514: LD_INT 2
55516: ARRAY
55517: PPUSH
55518: LD_VAR 0 6
55522: PUSH
55523: LD_INT 3
55525: ARRAY
55526: PPUSH
55527: CALL_OW 117
// end ;
55531: GO 55372
55533: POP
55534: POP
// end ; end else
55535: GO 56116
// begin for j in cargo do
55537: LD_ADDR_VAR 0 3
55541: PUSH
55542: LD_VAR 0 7
55546: PUSH
55547: FOR_IN
55548: IFFALSE 56114
// begin if GetTag ( j ) <> 0 then
55550: LD_VAR 0 3
55554: PPUSH
55555: CALL_OW 110
55559: PUSH
55560: LD_INT 0
55562: NONEQUAL
55563: IFFALSE 55567
// continue ;
55565: GO 55547
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
55567: LD_VAR 0 3
55571: PPUSH
55572: CALL_OW 256
55576: PUSH
55577: LD_INT 1000
55579: LESS
55580: PUSH
55581: LD_VAR 0 3
55585: PPUSH
55586: LD_EXP 38
55590: PUSH
55591: LD_VAR 0 2
55595: ARRAY
55596: PPUSH
55597: CALL_OW 308
55601: NOT
55602: AND
55603: IFFALSE 55625
// ComMoveToArea ( j , mc_parking [ i ] ) ;
55605: LD_VAR 0 3
55609: PPUSH
55610: LD_EXP 38
55614: PUSH
55615: LD_VAR 0 2
55619: ARRAY
55620: PPUSH
55621: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
55625: LD_VAR 0 3
55629: PPUSH
55630: CALL_OW 256
55634: PUSH
55635: LD_INT 1000
55637: LESS
55638: PUSH
55639: LD_VAR 0 3
55643: PPUSH
55644: LD_EXP 38
55648: PUSH
55649: LD_VAR 0 2
55653: ARRAY
55654: PPUSH
55655: CALL_OW 308
55659: AND
55660: IFFALSE 55664
// continue ;
55662: GO 55547
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
55664: LD_VAR 0 3
55668: PPUSH
55669: CALL_OW 262
55673: PUSH
55674: LD_INT 2
55676: EQUAL
55677: PUSH
55678: LD_VAR 0 3
55682: PPUSH
55683: CALL_OW 261
55687: PUSH
55688: LD_INT 15
55690: LESS
55691: AND
55692: IFFALSE 55696
// continue ;
55694: GO 55547
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
55696: LD_VAR 0 3
55700: PPUSH
55701: CALL_OW 262
55705: PUSH
55706: LD_INT 1
55708: EQUAL
55709: PUSH
55710: LD_VAR 0 3
55714: PPUSH
55715: CALL_OW 261
55719: PUSH
55720: LD_INT 10
55722: LESS
55723: AND
55724: IFFALSE 56053
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55726: LD_ADDR_VAR 0 8
55730: PUSH
55731: LD_EXP 14
55735: PUSH
55736: LD_VAR 0 2
55740: ARRAY
55741: PPUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 30
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 30
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: PPUSH
55770: CALL_OW 72
55774: ST_TO_ADDR
// if not depot then
55775: LD_VAR 0 8
55779: NOT
55780: IFFALSE 55784
// continue ;
55782: GO 55547
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
55784: LD_VAR 0 3
55788: PPUSH
55789: LD_VAR 0 8
55793: PPUSH
55794: LD_VAR 0 3
55798: PPUSH
55799: CALL_OW 74
55803: PPUSH
55804: CALL_OW 296
55808: PUSH
55809: LD_INT 6
55811: LESS
55812: IFFALSE 55828
// SetFuel ( j , 100 ) else
55814: LD_VAR 0 3
55818: PPUSH
55819: LD_INT 100
55821: PPUSH
55822: CALL_OW 240
55826: GO 56053
// if GetFuel ( j ) = 0 then
55828: LD_VAR 0 3
55832: PPUSH
55833: CALL_OW 261
55837: PUSH
55838: LD_INT 0
55840: EQUAL
55841: IFFALSE 56053
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
55843: LD_ADDR_EXP 33
55847: PUSH
55848: LD_EXP 33
55852: PPUSH
55853: LD_VAR 0 2
55857: PPUSH
55858: LD_EXP 33
55862: PUSH
55863: LD_VAR 0 2
55867: ARRAY
55868: PUSH
55869: LD_VAR 0 3
55873: DIFF
55874: PPUSH
55875: CALL_OW 1
55879: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
55880: LD_VAR 0 3
55884: PPUSH
55885: CALL_OW 263
55889: PUSH
55890: LD_INT 1
55892: EQUAL
55893: IFFALSE 55909
// ComExitVehicle ( IsInUnit ( j ) ) ;
55895: LD_VAR 0 3
55899: PPUSH
55900: CALL_OW 310
55904: PPUSH
55905: CALL_OW 121
// if GetControl ( j ) = control_remote then
55909: LD_VAR 0 3
55913: PPUSH
55914: CALL_OW 263
55918: PUSH
55919: LD_INT 2
55921: EQUAL
55922: IFFALSE 55933
// ComUnlink ( j ) ;
55924: LD_VAR 0 3
55928: PPUSH
55929: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
55933: LD_ADDR_VAR 0 9
55937: PUSH
55938: LD_VAR 0 2
55942: PPUSH
55943: LD_INT 3
55945: PPUSH
55946: CALL 65406 0 2
55950: ST_TO_ADDR
// if fac then
55951: LD_VAR 0 9
55955: IFFALSE 56051
// begin for k in fac do
55957: LD_ADDR_VAR 0 4
55961: PUSH
55962: LD_VAR 0 9
55966: PUSH
55967: FOR_IN
55968: IFFALSE 56049
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
55970: LD_ADDR_VAR 0 10
55974: PUSH
55975: LD_VAR 0 9
55979: PPUSH
55980: LD_VAR 0 3
55984: PPUSH
55985: CALL_OW 265
55989: PPUSH
55990: LD_VAR 0 3
55994: PPUSH
55995: CALL_OW 262
55999: PPUSH
56000: LD_VAR 0 3
56004: PPUSH
56005: CALL_OW 263
56009: PPUSH
56010: LD_VAR 0 3
56014: PPUSH
56015: CALL_OW 264
56019: PPUSH
56020: CALL 6938 0 5
56024: ST_TO_ADDR
// if components then
56025: LD_VAR 0 10
56029: IFFALSE 56047
// begin MC_InsertProduceList ( i , components ) ;
56031: LD_VAR 0 2
56035: PPUSH
56036: LD_VAR 0 10
56040: PPUSH
56041: CALL 64951 0 2
// break ;
56045: GO 56049
// end ; end ;
56047: GO 55967
56049: POP
56050: POP
// end ; continue ;
56051: GO 55547
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
56053: LD_VAR 0 3
56057: PPUSH
56058: LD_INT 1
56060: PPUSH
56061: CALL_OW 289
56065: PUSH
56066: LD_INT 100
56068: LESS
56069: PUSH
56070: LD_VAR 0 3
56074: PPUSH
56075: CALL_OW 314
56079: NOT
56080: AND
56081: IFFALSE 56110
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
56083: LD_VAR 0 3
56087: PPUSH
56088: LD_VAR 0 6
56092: PUSH
56093: LD_INT 2
56095: ARRAY
56096: PPUSH
56097: LD_VAR 0 6
56101: PUSH
56102: LD_INT 3
56104: ARRAY
56105: PPUSH
56106: CALL_OW 117
// break ;
56110: GO 56114
// end ;
56112: GO 55547
56114: POP
56115: POP
// end ; end ;
56116: GO 54385
56118: POP
56119: POP
// end ;
56120: LD_VAR 0 1
56124: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
56125: LD_INT 0
56127: PPUSH
56128: PPUSH
56129: PPUSH
56130: PPUSH
// if not mc_bases then
56131: LD_EXP 14
56135: NOT
56136: IFFALSE 56140
// exit ;
56138: GO 56301
// for i = 1 to mc_bases do
56140: LD_ADDR_VAR 0 2
56144: PUSH
56145: DOUBLE
56146: LD_INT 1
56148: DEC
56149: ST_TO_ADDR
56150: LD_EXP 14
56154: PUSH
56155: FOR_TO
56156: IFFALSE 56299
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
56158: LD_ADDR_VAR 0 4
56162: PUSH
56163: LD_EXP 33
56167: PUSH
56168: LD_VAR 0 2
56172: ARRAY
56173: PUSH
56174: LD_EXP 36
56178: PUSH
56179: LD_VAR 0 2
56183: ARRAY
56184: UNION
56185: PPUSH
56186: LD_INT 33
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PPUSH
56196: CALL_OW 72
56200: ST_TO_ADDR
// if tmp then
56201: LD_VAR 0 4
56205: IFFALSE 56297
// for j in tmp do
56207: LD_ADDR_VAR 0 3
56211: PUSH
56212: LD_VAR 0 4
56216: PUSH
56217: FOR_IN
56218: IFFALSE 56295
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
56220: LD_VAR 0 3
56224: PPUSH
56225: CALL_OW 312
56229: NOT
56230: PUSH
56231: LD_VAR 0 3
56235: PPUSH
56236: CALL_OW 256
56240: PUSH
56241: LD_INT 250
56243: GREATEREQUAL
56244: AND
56245: IFFALSE 56258
// Connect ( j ) else
56247: LD_VAR 0 3
56251: PPUSH
56252: CALL 12339 0 1
56256: GO 56293
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
56258: LD_VAR 0 3
56262: PPUSH
56263: CALL_OW 256
56267: PUSH
56268: LD_INT 250
56270: LESS
56271: PUSH
56272: LD_VAR 0 3
56276: PPUSH
56277: CALL_OW 312
56281: AND
56282: IFFALSE 56293
// ComUnlink ( j ) ;
56284: LD_VAR 0 3
56288: PPUSH
56289: CALL_OW 136
56293: GO 56217
56295: POP
56296: POP
// end ;
56297: GO 56155
56299: POP
56300: POP
// end ;
56301: LD_VAR 0 1
56305: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
56306: LD_INT 0
56308: PPUSH
56309: PPUSH
56310: PPUSH
56311: PPUSH
56312: PPUSH
// if not mc_bases then
56313: LD_EXP 14
56317: NOT
56318: IFFALSE 56322
// exit ;
56320: GO 56767
// for i = 1 to mc_bases do
56322: LD_ADDR_VAR 0 2
56326: PUSH
56327: DOUBLE
56328: LD_INT 1
56330: DEC
56331: ST_TO_ADDR
56332: LD_EXP 14
56336: PUSH
56337: FOR_TO
56338: IFFALSE 56765
// begin if not mc_produce [ i ] then
56340: LD_EXP 35
56344: PUSH
56345: LD_VAR 0 2
56349: ARRAY
56350: NOT
56351: IFFALSE 56355
// continue ;
56353: GO 56337
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56355: LD_ADDR_VAR 0 5
56359: PUSH
56360: LD_EXP 14
56364: PUSH
56365: LD_VAR 0 2
56369: ARRAY
56370: PPUSH
56371: LD_INT 30
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PPUSH
56381: CALL_OW 72
56385: ST_TO_ADDR
// if not fac then
56386: LD_VAR 0 5
56390: NOT
56391: IFFALSE 56395
// continue ;
56393: GO 56337
// for j in fac do
56395: LD_ADDR_VAR 0 3
56399: PUSH
56400: LD_VAR 0 5
56404: PUSH
56405: FOR_IN
56406: IFFALSE 56761
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
56408: LD_VAR 0 3
56412: PPUSH
56413: CALL_OW 461
56417: PUSH
56418: LD_INT 2
56420: NONEQUAL
56421: PUSH
56422: LD_VAR 0 3
56426: PPUSH
56427: LD_INT 15
56429: PPUSH
56430: CALL 11999 0 2
56434: PUSH
56435: LD_INT 4
56437: ARRAY
56438: OR
56439: IFFALSE 56443
// continue ;
56441: GO 56405
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
56443: LD_VAR 0 3
56447: PPUSH
56448: LD_EXP 35
56452: PUSH
56453: LD_VAR 0 2
56457: ARRAY
56458: PUSH
56459: LD_INT 1
56461: ARRAY
56462: PUSH
56463: LD_INT 1
56465: ARRAY
56466: PPUSH
56467: LD_EXP 35
56471: PUSH
56472: LD_VAR 0 2
56476: ARRAY
56477: PUSH
56478: LD_INT 1
56480: ARRAY
56481: PUSH
56482: LD_INT 2
56484: ARRAY
56485: PPUSH
56486: LD_EXP 35
56490: PUSH
56491: LD_VAR 0 2
56495: ARRAY
56496: PUSH
56497: LD_INT 1
56499: ARRAY
56500: PUSH
56501: LD_INT 3
56503: ARRAY
56504: PPUSH
56505: LD_EXP 35
56509: PUSH
56510: LD_VAR 0 2
56514: ARRAY
56515: PUSH
56516: LD_INT 1
56518: ARRAY
56519: PUSH
56520: LD_INT 4
56522: ARRAY
56523: PPUSH
56524: CALL_OW 448
56528: PUSH
56529: LD_VAR 0 3
56533: PPUSH
56534: LD_EXP 35
56538: PUSH
56539: LD_VAR 0 2
56543: ARRAY
56544: PUSH
56545: LD_INT 1
56547: ARRAY
56548: PUSH
56549: LD_INT 1
56551: ARRAY
56552: PUSH
56553: LD_EXP 35
56557: PUSH
56558: LD_VAR 0 2
56562: ARRAY
56563: PUSH
56564: LD_INT 1
56566: ARRAY
56567: PUSH
56568: LD_INT 2
56570: ARRAY
56571: PUSH
56572: LD_EXP 35
56576: PUSH
56577: LD_VAR 0 2
56581: ARRAY
56582: PUSH
56583: LD_INT 1
56585: ARRAY
56586: PUSH
56587: LD_INT 3
56589: ARRAY
56590: PUSH
56591: LD_EXP 35
56595: PUSH
56596: LD_VAR 0 2
56600: ARRAY
56601: PUSH
56602: LD_INT 1
56604: ARRAY
56605: PUSH
56606: LD_INT 4
56608: ARRAY
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: PPUSH
56616: CALL 15670 0 2
56620: AND
56621: IFFALSE 56759
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
56623: LD_VAR 0 3
56627: PPUSH
56628: LD_EXP 35
56632: PUSH
56633: LD_VAR 0 2
56637: ARRAY
56638: PUSH
56639: LD_INT 1
56641: ARRAY
56642: PUSH
56643: LD_INT 1
56645: ARRAY
56646: PPUSH
56647: LD_EXP 35
56651: PUSH
56652: LD_VAR 0 2
56656: ARRAY
56657: PUSH
56658: LD_INT 1
56660: ARRAY
56661: PUSH
56662: LD_INT 2
56664: ARRAY
56665: PPUSH
56666: LD_EXP 35
56670: PUSH
56671: LD_VAR 0 2
56675: ARRAY
56676: PUSH
56677: LD_INT 1
56679: ARRAY
56680: PUSH
56681: LD_INT 3
56683: ARRAY
56684: PPUSH
56685: LD_EXP 35
56689: PUSH
56690: LD_VAR 0 2
56694: ARRAY
56695: PUSH
56696: LD_INT 1
56698: ARRAY
56699: PUSH
56700: LD_INT 4
56702: ARRAY
56703: PPUSH
56704: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
56708: LD_ADDR_VAR 0 4
56712: PUSH
56713: LD_EXP 35
56717: PUSH
56718: LD_VAR 0 2
56722: ARRAY
56723: PPUSH
56724: LD_INT 1
56726: PPUSH
56727: CALL_OW 3
56731: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
56732: LD_ADDR_EXP 35
56736: PUSH
56737: LD_EXP 35
56741: PPUSH
56742: LD_VAR 0 2
56746: PPUSH
56747: LD_VAR 0 4
56751: PPUSH
56752: CALL_OW 1
56756: ST_TO_ADDR
// break ;
56757: GO 56761
// end ; end ;
56759: GO 56405
56761: POP
56762: POP
// end ;
56763: GO 56337
56765: POP
56766: POP
// end ;
56767: LD_VAR 0 1
56771: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
56772: LD_INT 0
56774: PPUSH
56775: PPUSH
56776: PPUSH
// if not mc_bases then
56777: LD_EXP 14
56781: NOT
56782: IFFALSE 56786
// exit ;
56784: GO 56875
// for i = 1 to mc_bases do
56786: LD_ADDR_VAR 0 2
56790: PUSH
56791: DOUBLE
56792: LD_INT 1
56794: DEC
56795: ST_TO_ADDR
56796: LD_EXP 14
56800: PUSH
56801: FOR_TO
56802: IFFALSE 56873
// begin if mc_attack [ i ] then
56804: LD_EXP 34
56808: PUSH
56809: LD_VAR 0 2
56813: ARRAY
56814: IFFALSE 56871
// begin tmp := mc_attack [ i ] [ 1 ] ;
56816: LD_ADDR_VAR 0 3
56820: PUSH
56821: LD_EXP 34
56825: PUSH
56826: LD_VAR 0 2
56830: ARRAY
56831: PUSH
56832: LD_INT 1
56834: ARRAY
56835: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
56836: LD_ADDR_EXP 34
56840: PUSH
56841: LD_EXP 34
56845: PPUSH
56846: LD_VAR 0 2
56850: PPUSH
56851: EMPTY
56852: PPUSH
56853: CALL_OW 1
56857: ST_TO_ADDR
// Attack ( tmp ) ;
56858: LD_VAR 0 3
56862: PPUSH
56863: CALL 71439 0 1
// exit ;
56867: POP
56868: POP
56869: GO 56875
// end ; end ;
56871: GO 56801
56873: POP
56874: POP
// end ;
56875: LD_VAR 0 1
56879: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
56880: LD_INT 0
56882: PPUSH
56883: PPUSH
56884: PPUSH
56885: PPUSH
56886: PPUSH
56887: PPUSH
56888: PPUSH
// if not mc_bases then
56889: LD_EXP 14
56893: NOT
56894: IFFALSE 56898
// exit ;
56896: GO 57480
// for i = 1 to mc_bases do
56898: LD_ADDR_VAR 0 2
56902: PUSH
56903: DOUBLE
56904: LD_INT 1
56906: DEC
56907: ST_TO_ADDR
56908: LD_EXP 14
56912: PUSH
56913: FOR_TO
56914: IFFALSE 57478
// begin if not mc_bases [ i ] then
56916: LD_EXP 14
56920: PUSH
56921: LD_VAR 0 2
56925: ARRAY
56926: NOT
56927: IFFALSE 56931
// continue ;
56929: GO 56913
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
56931: LD_ADDR_VAR 0 7
56935: PUSH
56936: LD_EXP 14
56940: PUSH
56941: LD_VAR 0 2
56945: ARRAY
56946: PUSH
56947: LD_INT 1
56949: ARRAY
56950: PPUSH
56951: CALL 6242 0 1
56955: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
56956: LD_ADDR_EXP 37
56960: PUSH
56961: LD_EXP 37
56965: PPUSH
56966: LD_VAR 0 2
56970: PPUSH
56971: LD_EXP 14
56975: PUSH
56976: LD_VAR 0 2
56980: ARRAY
56981: PUSH
56982: LD_INT 1
56984: ARRAY
56985: PPUSH
56986: CALL_OW 255
56990: PPUSH
56991: LD_EXP 39
56995: PUSH
56996: LD_VAR 0 2
57000: ARRAY
57001: PPUSH
57002: CALL 6207 0 2
57006: PPUSH
57007: CALL_OW 1
57011: ST_TO_ADDR
// if not mc_scan [ i ] then
57012: LD_EXP 37
57016: PUSH
57017: LD_VAR 0 2
57021: ARRAY
57022: NOT
57023: IFFALSE 57178
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57025: LD_ADDR_VAR 0 4
57029: PUSH
57030: LD_EXP 14
57034: PUSH
57035: LD_VAR 0 2
57039: ARRAY
57040: PPUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 25
57046: PUSH
57047: LD_INT 5
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 25
57056: PUSH
57057: LD_INT 8
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 25
57066: PUSH
57067: LD_INT 9
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: PPUSH
57080: CALL_OW 72
57084: ST_TO_ADDR
// if not tmp then
57085: LD_VAR 0 4
57089: NOT
57090: IFFALSE 57094
// continue ;
57092: GO 56913
// for j in tmp do
57094: LD_ADDR_VAR 0 3
57098: PUSH
57099: LD_VAR 0 4
57103: PUSH
57104: FOR_IN
57105: IFFALSE 57176
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
57107: LD_VAR 0 3
57111: PPUSH
57112: CALL_OW 310
57116: PPUSH
57117: CALL_OW 266
57121: PUSH
57122: LD_INT 5
57124: EQUAL
57125: PUSH
57126: LD_VAR 0 3
57130: PPUSH
57131: CALL_OW 257
57135: PUSH
57136: LD_INT 1
57138: EQUAL
57139: AND
57140: PUSH
57141: LD_VAR 0 3
57145: PPUSH
57146: CALL_OW 459
57150: NOT
57151: AND
57152: PUSH
57153: LD_VAR 0 7
57157: AND
57158: IFFALSE 57174
// ComChangeProfession ( j , class ) ;
57160: LD_VAR 0 3
57164: PPUSH
57165: LD_VAR 0 7
57169: PPUSH
57170: CALL_OW 123
57174: GO 57104
57176: POP
57177: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
57178: LD_EXP 37
57182: PUSH
57183: LD_VAR 0 2
57187: ARRAY
57188: PUSH
57189: LD_EXP 36
57193: PUSH
57194: LD_VAR 0 2
57198: ARRAY
57199: NOT
57200: AND
57201: PUSH
57202: LD_EXP 14
57206: PUSH
57207: LD_VAR 0 2
57211: ARRAY
57212: PPUSH
57213: LD_INT 30
57215: PUSH
57216: LD_INT 32
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PPUSH
57223: CALL_OW 72
57227: NOT
57228: AND
57229: PUSH
57230: LD_EXP 14
57234: PUSH
57235: LD_VAR 0 2
57239: ARRAY
57240: PPUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 30
57246: PUSH
57247: LD_INT 4
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 30
57256: PUSH
57257: LD_INT 5
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: PPUSH
57269: CALL_OW 72
57273: NOT
57274: AND
57275: IFFALSE 57407
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57277: LD_ADDR_VAR 0 4
57281: PUSH
57282: LD_EXP 14
57286: PUSH
57287: LD_VAR 0 2
57291: ARRAY
57292: PPUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 25
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 25
57308: PUSH
57309: LD_INT 5
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 25
57318: PUSH
57319: LD_INT 8
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 25
57328: PUSH
57329: LD_INT 9
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: PPUSH
57343: CALL_OW 72
57347: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
57348: LD_ADDR_VAR 0 4
57352: PUSH
57353: LD_VAR 0 4
57357: PUSH
57358: LD_VAR 0 4
57362: PPUSH
57363: LD_INT 18
57365: PPUSH
57366: CALL 37967 0 2
57370: DIFF
57371: ST_TO_ADDR
// if tmp then
57372: LD_VAR 0 4
57376: IFFALSE 57407
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
57378: LD_VAR 0 2
57382: PPUSH
57383: LD_VAR 0 4
57387: PPUSH
57388: LD_EXP 39
57392: PUSH
57393: LD_VAR 0 2
57397: ARRAY
57398: PPUSH
57399: CALL 76148 0 3
// exit ;
57403: POP
57404: POP
57405: GO 57480
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
57407: LD_EXP 37
57411: PUSH
57412: LD_VAR 0 2
57416: ARRAY
57417: PUSH
57418: LD_EXP 36
57422: PUSH
57423: LD_VAR 0 2
57427: ARRAY
57428: AND
57429: IFFALSE 57476
// begin tmp := mc_defender [ i ] ;
57431: LD_ADDR_VAR 0 4
57435: PUSH
57436: LD_EXP 36
57440: PUSH
57441: LD_VAR 0 2
57445: ARRAY
57446: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
57447: LD_VAR 0 2
57451: PPUSH
57452: LD_VAR 0 4
57456: PPUSH
57457: LD_EXP 37
57461: PUSH
57462: LD_VAR 0 2
57466: ARRAY
57467: PPUSH
57468: CALL 76709 0 3
// exit ;
57472: POP
57473: POP
57474: GO 57480
// end ; end ;
57476: GO 56913
57478: POP
57479: POP
// end ;
57480: LD_VAR 0 1
57484: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
57485: LD_INT 0
57487: PPUSH
57488: PPUSH
57489: PPUSH
57490: PPUSH
57491: PPUSH
57492: PPUSH
57493: PPUSH
57494: PPUSH
57495: PPUSH
57496: PPUSH
57497: PPUSH
// if not mc_bases then
57498: LD_EXP 14
57502: NOT
57503: IFFALSE 57507
// exit ;
57505: GO 58594
// for i = 1 to mc_bases do
57507: LD_ADDR_VAR 0 2
57511: PUSH
57512: DOUBLE
57513: LD_INT 1
57515: DEC
57516: ST_TO_ADDR
57517: LD_EXP 14
57521: PUSH
57522: FOR_TO
57523: IFFALSE 58592
// begin tmp := mc_lab [ i ] ;
57525: LD_ADDR_VAR 0 6
57529: PUSH
57530: LD_EXP 47
57534: PUSH
57535: LD_VAR 0 2
57539: ARRAY
57540: ST_TO_ADDR
// if not tmp then
57541: LD_VAR 0 6
57545: NOT
57546: IFFALSE 57550
// continue ;
57548: GO 57522
// idle_lab := 0 ;
57550: LD_ADDR_VAR 0 11
57554: PUSH
57555: LD_INT 0
57557: ST_TO_ADDR
// for j in tmp do
57558: LD_ADDR_VAR 0 3
57562: PUSH
57563: LD_VAR 0 6
57567: PUSH
57568: FOR_IN
57569: IFFALSE 58588
// begin researching := false ;
57571: LD_ADDR_VAR 0 10
57575: PUSH
57576: LD_INT 0
57578: ST_TO_ADDR
// side := GetSide ( j ) ;
57579: LD_ADDR_VAR 0 4
57583: PUSH
57584: LD_VAR 0 3
57588: PPUSH
57589: CALL_OW 255
57593: ST_TO_ADDR
// if not mc_tech [ side ] then
57594: LD_EXP 41
57598: PUSH
57599: LD_VAR 0 4
57603: ARRAY
57604: NOT
57605: IFFALSE 57609
// continue ;
57607: GO 57568
// if BuildingStatus ( j ) = bs_idle then
57609: LD_VAR 0 3
57613: PPUSH
57614: CALL_OW 461
57618: PUSH
57619: LD_INT 2
57621: EQUAL
57622: IFFALSE 57810
// begin if idle_lab and UnitsInside ( j ) < 6 then
57624: LD_VAR 0 11
57628: PUSH
57629: LD_VAR 0 3
57633: PPUSH
57634: CALL_OW 313
57638: PUSH
57639: LD_INT 6
57641: LESS
57642: AND
57643: IFFALSE 57714
// begin tmp2 := UnitsInside ( idle_lab ) ;
57645: LD_ADDR_VAR 0 9
57649: PUSH
57650: LD_VAR 0 11
57654: PPUSH
57655: CALL_OW 313
57659: ST_TO_ADDR
// if tmp2 then
57660: LD_VAR 0 9
57664: IFFALSE 57706
// for x in tmp2 do
57666: LD_ADDR_VAR 0 7
57670: PUSH
57671: LD_VAR 0 9
57675: PUSH
57676: FOR_IN
57677: IFFALSE 57704
// begin ComExitBuilding ( x ) ;
57679: LD_VAR 0 7
57683: PPUSH
57684: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
57688: LD_VAR 0 7
57692: PPUSH
57693: LD_VAR 0 3
57697: PPUSH
57698: CALL_OW 180
// end ;
57702: GO 57676
57704: POP
57705: POP
// idle_lab := 0 ;
57706: LD_ADDR_VAR 0 11
57710: PUSH
57711: LD_INT 0
57713: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
57714: LD_ADDR_VAR 0 5
57718: PUSH
57719: LD_EXP 41
57723: PUSH
57724: LD_VAR 0 4
57728: ARRAY
57729: PUSH
57730: FOR_IN
57731: IFFALSE 57791
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
57733: LD_VAR 0 3
57737: PPUSH
57738: LD_VAR 0 5
57742: PPUSH
57743: CALL_OW 430
57747: PUSH
57748: LD_VAR 0 4
57752: PPUSH
57753: LD_VAR 0 5
57757: PPUSH
57758: CALL 5312 0 2
57762: AND
57763: IFFALSE 57789
// begin researching := true ;
57765: LD_ADDR_VAR 0 10
57769: PUSH
57770: LD_INT 1
57772: ST_TO_ADDR
// ComResearch ( j , t ) ;
57773: LD_VAR 0 3
57777: PPUSH
57778: LD_VAR 0 5
57782: PPUSH
57783: CALL_OW 124
// break ;
57787: GO 57791
// end ;
57789: GO 57730
57791: POP
57792: POP
// if not researching then
57793: LD_VAR 0 10
57797: NOT
57798: IFFALSE 57810
// idle_lab := j ;
57800: LD_ADDR_VAR 0 11
57804: PUSH
57805: LD_VAR 0 3
57809: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
57810: LD_VAR 0 3
57814: PPUSH
57815: CALL_OW 461
57819: PUSH
57820: LD_INT 10
57822: EQUAL
57823: IFFALSE 58411
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
57825: LD_EXP 43
57829: PUSH
57830: LD_VAR 0 2
57834: ARRAY
57835: NOT
57836: PUSH
57837: LD_EXP 44
57841: PUSH
57842: LD_VAR 0 2
57846: ARRAY
57847: NOT
57848: AND
57849: PUSH
57850: LD_EXP 41
57854: PUSH
57855: LD_VAR 0 4
57859: ARRAY
57860: PUSH
57861: LD_INT 1
57863: GREATER
57864: AND
57865: IFFALSE 57996
// begin ComCancel ( j ) ;
57867: LD_VAR 0 3
57871: PPUSH
57872: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
57876: LD_ADDR_EXP 41
57880: PUSH
57881: LD_EXP 41
57885: PPUSH
57886: LD_VAR 0 4
57890: PPUSH
57891: LD_EXP 41
57895: PUSH
57896: LD_VAR 0 4
57900: ARRAY
57901: PPUSH
57902: LD_EXP 41
57906: PUSH
57907: LD_VAR 0 4
57911: ARRAY
57912: PUSH
57913: LD_INT 1
57915: MINUS
57916: PPUSH
57917: LD_EXP 41
57921: PUSH
57922: LD_VAR 0 4
57926: ARRAY
57927: PPUSH
57928: LD_INT 0
57930: PPUSH
57931: CALL 8824 0 4
57935: PPUSH
57936: CALL_OW 1
57940: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
57941: LD_ADDR_EXP 41
57945: PUSH
57946: LD_EXP 41
57950: PPUSH
57951: LD_VAR 0 4
57955: PPUSH
57956: LD_EXP 41
57960: PUSH
57961: LD_VAR 0 4
57965: ARRAY
57966: PPUSH
57967: LD_EXP 41
57971: PUSH
57972: LD_VAR 0 4
57976: ARRAY
57977: PPUSH
57978: LD_INT 1
57980: PPUSH
57981: LD_INT 0
57983: PPUSH
57984: CALL 8824 0 4
57988: PPUSH
57989: CALL_OW 1
57993: ST_TO_ADDR
// continue ;
57994: GO 57568
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
57996: LD_EXP 43
58000: PUSH
58001: LD_VAR 0 2
58005: ARRAY
58006: PUSH
58007: LD_EXP 44
58011: PUSH
58012: LD_VAR 0 2
58016: ARRAY
58017: NOT
58018: AND
58019: IFFALSE 58146
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
58021: LD_ADDR_EXP 44
58025: PUSH
58026: LD_EXP 44
58030: PPUSH
58031: LD_VAR 0 2
58035: PUSH
58036: LD_EXP 44
58040: PUSH
58041: LD_VAR 0 2
58045: ARRAY
58046: PUSH
58047: LD_INT 1
58049: PLUS
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PPUSH
58055: LD_EXP 43
58059: PUSH
58060: LD_VAR 0 2
58064: ARRAY
58065: PUSH
58066: LD_INT 1
58068: ARRAY
58069: PPUSH
58070: CALL 9406 0 3
58074: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
58075: LD_EXP 43
58079: PUSH
58080: LD_VAR 0 2
58084: ARRAY
58085: PUSH
58086: LD_INT 1
58088: ARRAY
58089: PPUSH
58090: LD_INT 112
58092: PPUSH
58093: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
58097: LD_ADDR_VAR 0 9
58101: PUSH
58102: LD_EXP 43
58106: PUSH
58107: LD_VAR 0 2
58111: ARRAY
58112: PPUSH
58113: LD_INT 1
58115: PPUSH
58116: CALL_OW 3
58120: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
58121: LD_ADDR_EXP 43
58125: PUSH
58126: LD_EXP 43
58130: PPUSH
58131: LD_VAR 0 2
58135: PPUSH
58136: LD_VAR 0 9
58140: PPUSH
58141: CALL_OW 1
58145: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
58146: LD_EXP 43
58150: PUSH
58151: LD_VAR 0 2
58155: ARRAY
58156: PUSH
58157: LD_EXP 44
58161: PUSH
58162: LD_VAR 0 2
58166: ARRAY
58167: AND
58168: PUSH
58169: LD_EXP 44
58173: PUSH
58174: LD_VAR 0 2
58178: ARRAY
58179: PUSH
58180: LD_INT 1
58182: ARRAY
58183: PPUSH
58184: CALL_OW 310
58188: NOT
58189: AND
58190: PUSH
58191: LD_VAR 0 3
58195: PPUSH
58196: CALL_OW 313
58200: PUSH
58201: LD_INT 6
58203: EQUAL
58204: AND
58205: IFFALSE 58261
// begin tmp2 := UnitsInside ( j ) ;
58207: LD_ADDR_VAR 0 9
58211: PUSH
58212: LD_VAR 0 3
58216: PPUSH
58217: CALL_OW 313
58221: ST_TO_ADDR
// if tmp2 = 6 then
58222: LD_VAR 0 9
58226: PUSH
58227: LD_INT 6
58229: EQUAL
58230: IFFALSE 58261
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
58232: LD_VAR 0 9
58236: PUSH
58237: LD_INT 1
58239: ARRAY
58240: PPUSH
58241: LD_INT 112
58243: PPUSH
58244: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
58248: LD_VAR 0 9
58252: PUSH
58253: LD_INT 1
58255: ARRAY
58256: PPUSH
58257: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
58261: LD_EXP 44
58265: PUSH
58266: LD_VAR 0 2
58270: ARRAY
58271: PUSH
58272: LD_EXP 44
58276: PUSH
58277: LD_VAR 0 2
58281: ARRAY
58282: PUSH
58283: LD_INT 1
58285: ARRAY
58286: PPUSH
58287: CALL_OW 314
58291: NOT
58292: AND
58293: PUSH
58294: LD_EXP 44
58298: PUSH
58299: LD_VAR 0 2
58303: ARRAY
58304: PUSH
58305: LD_INT 1
58307: ARRAY
58308: PPUSH
58309: CALL_OW 310
58313: NOT
58314: AND
58315: IFFALSE 58341
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
58317: LD_EXP 44
58321: PUSH
58322: LD_VAR 0 2
58326: ARRAY
58327: PUSH
58328: LD_INT 1
58330: ARRAY
58331: PPUSH
58332: LD_VAR 0 3
58336: PPUSH
58337: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
58341: LD_EXP 44
58345: PUSH
58346: LD_VAR 0 2
58350: ARRAY
58351: PUSH
58352: LD_INT 1
58354: ARRAY
58355: PPUSH
58356: CALL_OW 310
58360: PUSH
58361: LD_EXP 44
58365: PUSH
58366: LD_VAR 0 2
58370: ARRAY
58371: PUSH
58372: LD_INT 1
58374: ARRAY
58375: PPUSH
58376: CALL_OW 310
58380: PPUSH
58381: CALL_OW 461
58385: PUSH
58386: LD_INT 3
58388: NONEQUAL
58389: AND
58390: IFFALSE 58411
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
58392: LD_EXP 44
58396: PUSH
58397: LD_VAR 0 2
58401: ARRAY
58402: PUSH
58403: LD_INT 1
58405: ARRAY
58406: PPUSH
58407: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
58411: LD_VAR 0 3
58415: PPUSH
58416: CALL_OW 461
58420: PUSH
58421: LD_INT 6
58423: EQUAL
58424: PUSH
58425: LD_VAR 0 6
58429: PUSH
58430: LD_INT 1
58432: GREATER
58433: AND
58434: IFFALSE 58586
// begin sci := [ ] ;
58436: LD_ADDR_VAR 0 8
58440: PUSH
58441: EMPTY
58442: ST_TO_ADDR
// for x in ( tmp diff j ) do
58443: LD_ADDR_VAR 0 7
58447: PUSH
58448: LD_VAR 0 6
58452: PUSH
58453: LD_VAR 0 3
58457: DIFF
58458: PUSH
58459: FOR_IN
58460: IFFALSE 58512
// begin if sci = 6 then
58462: LD_VAR 0 8
58466: PUSH
58467: LD_INT 6
58469: EQUAL
58470: IFFALSE 58474
// break ;
58472: GO 58512
// if BuildingStatus ( x ) = bs_idle then
58474: LD_VAR 0 7
58478: PPUSH
58479: CALL_OW 461
58483: PUSH
58484: LD_INT 2
58486: EQUAL
58487: IFFALSE 58510
// sci := sci ^ UnitsInside ( x ) ;
58489: LD_ADDR_VAR 0 8
58493: PUSH
58494: LD_VAR 0 8
58498: PUSH
58499: LD_VAR 0 7
58503: PPUSH
58504: CALL_OW 313
58508: ADD
58509: ST_TO_ADDR
// end ;
58510: GO 58459
58512: POP
58513: POP
// if not sci then
58514: LD_VAR 0 8
58518: NOT
58519: IFFALSE 58523
// continue ;
58521: GO 57568
// for x in sci do
58523: LD_ADDR_VAR 0 7
58527: PUSH
58528: LD_VAR 0 8
58532: PUSH
58533: FOR_IN
58534: IFFALSE 58584
// if IsInUnit ( x ) and not HasTask ( x ) then
58536: LD_VAR 0 7
58540: PPUSH
58541: CALL_OW 310
58545: PUSH
58546: LD_VAR 0 7
58550: PPUSH
58551: CALL_OW 314
58555: NOT
58556: AND
58557: IFFALSE 58582
// begin ComExitBuilding ( x ) ;
58559: LD_VAR 0 7
58563: PPUSH
58564: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
58568: LD_VAR 0 7
58572: PPUSH
58573: LD_VAR 0 3
58577: PPUSH
58578: CALL_OW 180
// end ;
58582: GO 58533
58584: POP
58585: POP
// end ; end ;
58586: GO 57568
58588: POP
58589: POP
// end ;
58590: GO 57522
58592: POP
58593: POP
// end ;
58594: LD_VAR 0 1
58598: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
58599: LD_INT 0
58601: PPUSH
58602: PPUSH
// if not mc_bases then
58603: LD_EXP 14
58607: NOT
58608: IFFALSE 58612
// exit ;
58610: GO 58693
// for i = 1 to mc_bases do
58612: LD_ADDR_VAR 0 2
58616: PUSH
58617: DOUBLE
58618: LD_INT 1
58620: DEC
58621: ST_TO_ADDR
58622: LD_EXP 14
58626: PUSH
58627: FOR_TO
58628: IFFALSE 58691
// if mc_mines [ i ] and mc_miners [ i ] then
58630: LD_EXP 27
58634: PUSH
58635: LD_VAR 0 2
58639: ARRAY
58640: PUSH
58641: LD_EXP 28
58645: PUSH
58646: LD_VAR 0 2
58650: ARRAY
58651: AND
58652: IFFALSE 58689
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
58654: LD_EXP 28
58658: PUSH
58659: LD_VAR 0 2
58663: ARRAY
58664: PUSH
58665: LD_INT 1
58667: ARRAY
58668: PPUSH
58669: CALL_OW 255
58673: PPUSH
58674: LD_EXP 27
58678: PUSH
58679: LD_VAR 0 2
58683: ARRAY
58684: PPUSH
58685: CALL 6395 0 2
58689: GO 58627
58691: POP
58692: POP
// end ;
58693: LD_VAR 0 1
58697: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
58698: LD_INT 0
58700: PPUSH
58701: PPUSH
58702: PPUSH
58703: PPUSH
58704: PPUSH
58705: PPUSH
58706: PPUSH
58707: PPUSH
// if not mc_bases or not mc_parking then
58708: LD_EXP 14
58712: NOT
58713: PUSH
58714: LD_EXP 38
58718: NOT
58719: OR
58720: IFFALSE 58724
// exit ;
58722: GO 59423
// for i = 1 to mc_bases do
58724: LD_ADDR_VAR 0 2
58728: PUSH
58729: DOUBLE
58730: LD_INT 1
58732: DEC
58733: ST_TO_ADDR
58734: LD_EXP 14
58738: PUSH
58739: FOR_TO
58740: IFFALSE 59421
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
58742: LD_EXP 14
58746: PUSH
58747: LD_VAR 0 2
58751: ARRAY
58752: NOT
58753: PUSH
58754: LD_EXP 38
58758: PUSH
58759: LD_VAR 0 2
58763: ARRAY
58764: NOT
58765: OR
58766: IFFALSE 58770
// continue ;
58768: GO 58739
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
58770: LD_ADDR_VAR 0 5
58774: PUSH
58775: LD_EXP 14
58779: PUSH
58780: LD_VAR 0 2
58784: ARRAY
58785: PUSH
58786: LD_INT 1
58788: ARRAY
58789: PPUSH
58790: CALL_OW 255
58794: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58795: LD_ADDR_VAR 0 6
58799: PUSH
58800: LD_EXP 14
58804: PUSH
58805: LD_VAR 0 2
58809: ARRAY
58810: PPUSH
58811: LD_INT 30
58813: PUSH
58814: LD_INT 3
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PPUSH
58821: CALL_OW 72
58825: ST_TO_ADDR
// if not fac then
58826: LD_VAR 0 6
58830: NOT
58831: IFFALSE 58882
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58833: LD_ADDR_VAR 0 6
58837: PUSH
58838: LD_EXP 14
58842: PUSH
58843: LD_VAR 0 2
58847: ARRAY
58848: PPUSH
58849: LD_INT 2
58851: PUSH
58852: LD_INT 30
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 30
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: PPUSH
58877: CALL_OW 72
58881: ST_TO_ADDR
// if not fac then
58882: LD_VAR 0 6
58886: NOT
58887: IFFALSE 58891
// continue ;
58889: GO 58739
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58891: LD_ADDR_VAR 0 7
58895: PUSH
58896: LD_EXP 38
58900: PUSH
58901: LD_VAR 0 2
58905: ARRAY
58906: PPUSH
58907: LD_INT 22
58909: PUSH
58910: LD_VAR 0 5
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 21
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: LD_INT 24
58934: PUSH
58935: LD_INT 1000
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: PPUSH
58951: CALL_OW 70
58955: ST_TO_ADDR
// for j in fac do
58956: LD_ADDR_VAR 0 3
58960: PUSH
58961: LD_VAR 0 6
58965: PUSH
58966: FOR_IN
58967: IFFALSE 59048
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58969: LD_ADDR_VAR 0 7
58973: PUSH
58974: LD_VAR 0 7
58978: PUSH
58979: LD_INT 22
58981: PUSH
58982: LD_VAR 0 5
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 91
58993: PUSH
58994: LD_VAR 0 3
58998: PUSH
58999: LD_INT 15
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 21
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 3
59019: PUSH
59020: LD_INT 24
59022: PUSH
59023: LD_INT 1000
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: PPUSH
59040: CALL_OW 69
59044: UNION
59045: ST_TO_ADDR
59046: GO 58966
59048: POP
59049: POP
// if not vehs then
59050: LD_VAR 0 7
59054: NOT
59055: IFFALSE 59081
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59057: LD_ADDR_EXP 26
59061: PUSH
59062: LD_EXP 26
59066: PPUSH
59067: LD_VAR 0 2
59071: PPUSH
59072: EMPTY
59073: PPUSH
59074: CALL_OW 1
59078: ST_TO_ADDR
// continue ;
59079: GO 58739
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
59081: LD_ADDR_VAR 0 8
59085: PUSH
59086: LD_EXP 14
59090: PUSH
59091: LD_VAR 0 2
59095: ARRAY
59096: PPUSH
59097: LD_INT 30
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PPUSH
59107: CALL_OW 72
59111: ST_TO_ADDR
// if tmp then
59112: LD_VAR 0 8
59116: IFFALSE 59219
// begin for j in tmp do
59118: LD_ADDR_VAR 0 3
59122: PUSH
59123: LD_VAR 0 8
59127: PUSH
59128: FOR_IN
59129: IFFALSE 59217
// for k in UnitsInside ( j ) do
59131: LD_ADDR_VAR 0 4
59135: PUSH
59136: LD_VAR 0 3
59140: PPUSH
59141: CALL_OW 313
59145: PUSH
59146: FOR_IN
59147: IFFALSE 59213
// if k then
59149: LD_VAR 0 4
59153: IFFALSE 59211
// if not k in mc_repair_vehicle [ i ] then
59155: LD_VAR 0 4
59159: PUSH
59160: LD_EXP 26
59164: PUSH
59165: LD_VAR 0 2
59169: ARRAY
59170: IN
59171: NOT
59172: IFFALSE 59211
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
59174: LD_ADDR_EXP 26
59178: PUSH
59179: LD_EXP 26
59183: PPUSH
59184: LD_VAR 0 2
59188: PPUSH
59189: LD_EXP 26
59193: PUSH
59194: LD_VAR 0 2
59198: ARRAY
59199: PUSH
59200: LD_VAR 0 4
59204: UNION
59205: PPUSH
59206: CALL_OW 1
59210: ST_TO_ADDR
59211: GO 59146
59213: POP
59214: POP
59215: GO 59128
59217: POP
59218: POP
// end ; if not mc_repair_vehicle [ i ] then
59219: LD_EXP 26
59223: PUSH
59224: LD_VAR 0 2
59228: ARRAY
59229: NOT
59230: IFFALSE 59234
// continue ;
59232: GO 58739
// for j in mc_repair_vehicle [ i ] do
59234: LD_ADDR_VAR 0 3
59238: PUSH
59239: LD_EXP 26
59243: PUSH
59244: LD_VAR 0 2
59248: ARRAY
59249: PUSH
59250: FOR_IN
59251: IFFALSE 59417
// begin if GetClass ( j ) <> 3 then
59253: LD_VAR 0 3
59257: PPUSH
59258: CALL_OW 257
59262: PUSH
59263: LD_INT 3
59265: NONEQUAL
59266: IFFALSE 59307
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
59268: LD_ADDR_EXP 26
59272: PUSH
59273: LD_EXP 26
59277: PPUSH
59278: LD_VAR 0 2
59282: PPUSH
59283: LD_EXP 26
59287: PUSH
59288: LD_VAR 0 2
59292: ARRAY
59293: PUSH
59294: LD_VAR 0 3
59298: DIFF
59299: PPUSH
59300: CALL_OW 1
59304: ST_TO_ADDR
// continue ;
59305: GO 59250
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
59307: LD_VAR 0 3
59311: PPUSH
59312: CALL_OW 311
59316: NOT
59317: PUSH
59318: LD_VAR 0 3
59322: PUSH
59323: LD_EXP 17
59327: PUSH
59328: LD_VAR 0 2
59332: ARRAY
59333: PUSH
59334: LD_INT 1
59336: ARRAY
59337: IN
59338: NOT
59339: AND
59340: PUSH
59341: LD_VAR 0 3
59345: PUSH
59346: LD_EXP 17
59350: PUSH
59351: LD_VAR 0 2
59355: ARRAY
59356: PUSH
59357: LD_INT 2
59359: ARRAY
59360: IN
59361: NOT
59362: AND
59363: IFFALSE 59415
// begin if IsInUnit ( j ) then
59365: LD_VAR 0 3
59369: PPUSH
59370: CALL_OW 310
59374: IFFALSE 59385
// ComExitBuilding ( j ) ;
59376: LD_VAR 0 3
59380: PPUSH
59381: CALL_OW 122
// if not HasTask ( j ) then
59385: LD_VAR 0 3
59389: PPUSH
59390: CALL_OW 314
59394: NOT
59395: IFFALSE 59415
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
59397: LD_VAR 0 3
59401: PPUSH
59402: LD_VAR 0 7
59406: PUSH
59407: LD_INT 1
59409: ARRAY
59410: PPUSH
59411: CALL_OW 189
// end ; end ;
59415: GO 59250
59417: POP
59418: POP
// end ;
59419: GO 58739
59421: POP
59422: POP
// end ;
59423: LD_VAR 0 1
59427: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
59428: LD_INT 0
59430: PPUSH
59431: PPUSH
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
59437: PPUSH
59438: PPUSH
59439: PPUSH
59440: PPUSH
// if not mc_bases then
59441: LD_EXP 14
59445: NOT
59446: IFFALSE 59450
// exit ;
59448: GO 60252
// for i = 1 to mc_bases do
59450: LD_ADDR_VAR 0 2
59454: PUSH
59455: DOUBLE
59456: LD_INT 1
59458: DEC
59459: ST_TO_ADDR
59460: LD_EXP 14
59464: PUSH
59465: FOR_TO
59466: IFFALSE 60250
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
59468: LD_EXP 42
59472: PUSH
59473: LD_VAR 0 2
59477: ARRAY
59478: NOT
59479: PUSH
59480: LD_EXP 17
59484: PUSH
59485: LD_VAR 0 2
59489: ARRAY
59490: PUSH
59491: LD_INT 1
59493: ARRAY
59494: OR
59495: PUSH
59496: LD_EXP 17
59500: PUSH
59501: LD_VAR 0 2
59505: ARRAY
59506: PUSH
59507: LD_INT 2
59509: ARRAY
59510: OR
59511: PUSH
59512: LD_EXP 40
59516: PUSH
59517: LD_VAR 0 2
59521: ARRAY
59522: PPUSH
59523: LD_INT 1
59525: PPUSH
59526: CALL_OW 325
59530: NOT
59531: OR
59532: PUSH
59533: LD_EXP 37
59537: PUSH
59538: LD_VAR 0 2
59542: ARRAY
59543: OR
59544: IFFALSE 59548
// continue ;
59546: GO 59465
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
59548: LD_ADDR_VAR 0 8
59552: PUSH
59553: LD_EXP 14
59557: PUSH
59558: LD_VAR 0 2
59562: ARRAY
59563: PPUSH
59564: LD_INT 25
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 50
59576: PUSH
59577: EMPTY
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: LD_INT 60
59585: PUSH
59586: EMPTY
59587: LIST
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: LIST
59597: PPUSH
59598: CALL_OW 72
59602: PUSH
59603: LD_EXP 18
59607: PUSH
59608: LD_VAR 0 2
59612: ARRAY
59613: DIFF
59614: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59615: LD_ADDR_VAR 0 9
59619: PUSH
59620: LD_EXP 14
59624: PUSH
59625: LD_VAR 0 2
59629: ARRAY
59630: PPUSH
59631: LD_INT 2
59633: PUSH
59634: LD_INT 30
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 30
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: PPUSH
59659: CALL_OW 72
59663: ST_TO_ADDR
// if not tmp or not dep then
59664: LD_VAR 0 8
59668: NOT
59669: PUSH
59670: LD_VAR 0 9
59674: NOT
59675: OR
59676: IFFALSE 59680
// continue ;
59678: GO 59465
// side := GetSide ( tmp [ 1 ] ) ;
59680: LD_ADDR_VAR 0 11
59684: PUSH
59685: LD_VAR 0 8
59689: PUSH
59690: LD_INT 1
59692: ARRAY
59693: PPUSH
59694: CALL_OW 255
59698: ST_TO_ADDR
// dep := dep [ 1 ] ;
59699: LD_ADDR_VAR 0 9
59703: PUSH
59704: LD_VAR 0 9
59708: PUSH
59709: LD_INT 1
59711: ARRAY
59712: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
59713: LD_ADDR_VAR 0 7
59717: PUSH
59718: LD_EXP 42
59722: PUSH
59723: LD_VAR 0 2
59727: ARRAY
59728: PPUSH
59729: LD_INT 22
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 25
59741: PUSH
59742: LD_INT 12
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PPUSH
59753: CALL_OW 70
59757: PUSH
59758: LD_INT 22
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 25
59770: PUSH
59771: LD_INT 12
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 91
59780: PUSH
59781: LD_VAR 0 9
59785: PUSH
59786: LD_INT 20
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: LIST
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: PPUSH
59799: CALL_OW 69
59803: UNION
59804: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
59805: LD_ADDR_VAR 0 10
59809: PUSH
59810: LD_EXP 42
59814: PUSH
59815: LD_VAR 0 2
59819: ARRAY
59820: PPUSH
59821: LD_INT 81
59823: PUSH
59824: LD_VAR 0 11
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PPUSH
59833: CALL_OW 70
59837: ST_TO_ADDR
// if not apes or danger_at_area then
59838: LD_VAR 0 7
59842: NOT
59843: PUSH
59844: LD_VAR 0 10
59848: OR
59849: IFFALSE 59899
// begin if mc_taming [ i ] then
59851: LD_EXP 45
59855: PUSH
59856: LD_VAR 0 2
59860: ARRAY
59861: IFFALSE 59897
// begin MC_Reset ( i , 121 ) ;
59863: LD_VAR 0 2
59867: PPUSH
59868: LD_INT 121
59870: PPUSH
59871: CALL 45350 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59875: LD_ADDR_EXP 45
59879: PUSH
59880: LD_EXP 45
59884: PPUSH
59885: LD_VAR 0 2
59889: PPUSH
59890: EMPTY
59891: PPUSH
59892: CALL_OW 1
59896: ST_TO_ADDR
// end ; continue ;
59897: GO 59465
// end ; for j in tmp do
59899: LD_ADDR_VAR 0 3
59903: PUSH
59904: LD_VAR 0 8
59908: PUSH
59909: FOR_IN
59910: IFFALSE 60246
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
59912: LD_VAR 0 3
59916: PUSH
59917: LD_EXP 45
59921: PUSH
59922: LD_VAR 0 2
59926: ARRAY
59927: IN
59928: NOT
59929: PUSH
59930: LD_EXP 45
59934: PUSH
59935: LD_VAR 0 2
59939: ARRAY
59940: PUSH
59941: LD_INT 3
59943: LESS
59944: AND
59945: IFFALSE 60003
// begin SetTag ( j , 121 ) ;
59947: LD_VAR 0 3
59951: PPUSH
59952: LD_INT 121
59954: PPUSH
59955: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
59959: LD_ADDR_EXP 45
59963: PUSH
59964: LD_EXP 45
59968: PPUSH
59969: LD_VAR 0 2
59973: PUSH
59974: LD_EXP 45
59978: PUSH
59979: LD_VAR 0 2
59983: ARRAY
59984: PUSH
59985: LD_INT 1
59987: PLUS
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PPUSH
59993: LD_VAR 0 3
59997: PPUSH
59998: CALL 9406 0 3
60002: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
60003: LD_VAR 0 3
60007: PUSH
60008: LD_EXP 45
60012: PUSH
60013: LD_VAR 0 2
60017: ARRAY
60018: IN
60019: IFFALSE 60244
// begin if GetClass ( j ) <> 4 then
60021: LD_VAR 0 3
60025: PPUSH
60026: CALL_OW 257
60030: PUSH
60031: LD_INT 4
60033: NONEQUAL
60034: IFFALSE 60087
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
60036: LD_ADDR_EXP 45
60040: PUSH
60041: LD_EXP 45
60045: PPUSH
60046: LD_VAR 0 2
60050: PPUSH
60051: LD_EXP 45
60055: PUSH
60056: LD_VAR 0 2
60060: ARRAY
60061: PUSH
60062: LD_VAR 0 3
60066: DIFF
60067: PPUSH
60068: CALL_OW 1
60072: ST_TO_ADDR
// SetTag ( j , 0 ) ;
60073: LD_VAR 0 3
60077: PPUSH
60078: LD_INT 0
60080: PPUSH
60081: CALL_OW 109
// continue ;
60085: GO 59909
// end ; if IsInUnit ( j ) then
60087: LD_VAR 0 3
60091: PPUSH
60092: CALL_OW 310
60096: IFFALSE 60107
// ComExitBuilding ( j ) ;
60098: LD_VAR 0 3
60102: PPUSH
60103: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
60107: LD_ADDR_VAR 0 6
60111: PUSH
60112: LD_VAR 0 7
60116: PPUSH
60117: LD_VAR 0 3
60121: PPUSH
60122: CALL_OW 74
60126: ST_TO_ADDR
// if not ape then
60127: LD_VAR 0 6
60131: NOT
60132: IFFALSE 60136
// break ;
60134: GO 60246
// x := GetX ( ape ) ;
60136: LD_ADDR_VAR 0 4
60140: PUSH
60141: LD_VAR 0 6
60145: PPUSH
60146: CALL_OW 250
60150: ST_TO_ADDR
// y := GetY ( ape ) ;
60151: LD_ADDR_VAR 0 5
60155: PUSH
60156: LD_VAR 0 6
60160: PPUSH
60161: CALL_OW 251
60165: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60166: LD_VAR 0 4
60170: PPUSH
60171: LD_VAR 0 5
60175: PPUSH
60176: CALL_OW 488
60180: NOT
60181: PUSH
60182: LD_VAR 0 11
60186: PPUSH
60187: LD_VAR 0 4
60191: PPUSH
60192: LD_VAR 0 5
60196: PPUSH
60197: LD_INT 20
60199: PPUSH
60200: CALL 10302 0 4
60204: PUSH
60205: LD_INT 4
60207: ARRAY
60208: OR
60209: IFFALSE 60213
// break ;
60211: GO 60246
// if not HasTask ( j ) then
60213: LD_VAR 0 3
60217: PPUSH
60218: CALL_OW 314
60222: NOT
60223: IFFALSE 60244
// ComTameXY ( j , x , y ) ;
60225: LD_VAR 0 3
60229: PPUSH
60230: LD_VAR 0 4
60234: PPUSH
60235: LD_VAR 0 5
60239: PPUSH
60240: CALL_OW 131
// end ; end ;
60244: GO 59909
60246: POP
60247: POP
// end ;
60248: GO 59465
60250: POP
60251: POP
// end ;
60252: LD_VAR 0 1
60256: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
60257: LD_INT 0
60259: PPUSH
60260: PPUSH
60261: PPUSH
60262: PPUSH
60263: PPUSH
60264: PPUSH
60265: PPUSH
60266: PPUSH
// if not mc_bases then
60267: LD_EXP 14
60271: NOT
60272: IFFALSE 60276
// exit ;
60274: GO 60902
// for i = 1 to mc_bases do
60276: LD_ADDR_VAR 0 2
60280: PUSH
60281: DOUBLE
60282: LD_INT 1
60284: DEC
60285: ST_TO_ADDR
60286: LD_EXP 14
60290: PUSH
60291: FOR_TO
60292: IFFALSE 60900
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
60294: LD_EXP 43
60298: PUSH
60299: LD_VAR 0 2
60303: ARRAY
60304: NOT
60305: PUSH
60306: LD_EXP 43
60310: PUSH
60311: LD_VAR 0 2
60315: ARRAY
60316: PPUSH
60317: LD_INT 25
60319: PUSH
60320: LD_INT 12
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PPUSH
60327: CALL_OW 72
60331: NOT
60332: OR
60333: IFFALSE 60337
// continue ;
60335: GO 60291
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
60337: LD_ADDR_VAR 0 5
60341: PUSH
60342: LD_EXP 43
60346: PUSH
60347: LD_VAR 0 2
60351: ARRAY
60352: PUSH
60353: LD_INT 1
60355: ARRAY
60356: PPUSH
60357: CALL_OW 255
60361: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
60362: LD_VAR 0 5
60366: PPUSH
60367: LD_INT 2
60369: PPUSH
60370: CALL_OW 325
60374: IFFALSE 60627
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60376: LD_ADDR_VAR 0 4
60380: PUSH
60381: LD_EXP 43
60385: PUSH
60386: LD_VAR 0 2
60390: ARRAY
60391: PPUSH
60392: LD_INT 25
60394: PUSH
60395: LD_INT 16
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PPUSH
60402: CALL_OW 72
60406: ST_TO_ADDR
// if tmp < 6 then
60407: LD_VAR 0 4
60411: PUSH
60412: LD_INT 6
60414: LESS
60415: IFFALSE 60627
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60417: LD_ADDR_VAR 0 6
60421: PUSH
60422: LD_EXP 14
60426: PUSH
60427: LD_VAR 0 2
60431: ARRAY
60432: PPUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 30
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 30
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: PPUSH
60461: CALL_OW 72
60465: ST_TO_ADDR
// if depot then
60466: LD_VAR 0 6
60470: IFFALSE 60627
// begin selected := 0 ;
60472: LD_ADDR_VAR 0 7
60476: PUSH
60477: LD_INT 0
60479: ST_TO_ADDR
// for j in depot do
60480: LD_ADDR_VAR 0 3
60484: PUSH
60485: LD_VAR 0 6
60489: PUSH
60490: FOR_IN
60491: IFFALSE 60522
// begin if UnitsInside ( j ) < 6 then
60493: LD_VAR 0 3
60497: PPUSH
60498: CALL_OW 313
60502: PUSH
60503: LD_INT 6
60505: LESS
60506: IFFALSE 60520
// begin selected := j ;
60508: LD_ADDR_VAR 0 7
60512: PUSH
60513: LD_VAR 0 3
60517: ST_TO_ADDR
// break ;
60518: GO 60522
// end ; end ;
60520: GO 60490
60522: POP
60523: POP
// if selected then
60524: LD_VAR 0 7
60528: IFFALSE 60627
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60530: LD_ADDR_VAR 0 3
60534: PUSH
60535: LD_EXP 43
60539: PUSH
60540: LD_VAR 0 2
60544: ARRAY
60545: PPUSH
60546: LD_INT 25
60548: PUSH
60549: LD_INT 12
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PPUSH
60556: CALL_OW 72
60560: PUSH
60561: FOR_IN
60562: IFFALSE 60625
// if not HasTask ( j ) then
60564: LD_VAR 0 3
60568: PPUSH
60569: CALL_OW 314
60573: NOT
60574: IFFALSE 60623
// begin if not IsInUnit ( j ) then
60576: LD_VAR 0 3
60580: PPUSH
60581: CALL_OW 310
60585: NOT
60586: IFFALSE 60602
// ComEnterUnit ( j , selected ) ;
60588: LD_VAR 0 3
60592: PPUSH
60593: LD_VAR 0 7
60597: PPUSH
60598: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
60602: LD_VAR 0 3
60606: PPUSH
60607: LD_INT 16
60609: PPUSH
60610: CALL_OW 183
// AddComExitBuilding ( j ) ;
60614: LD_VAR 0 3
60618: PPUSH
60619: CALL_OW 182
// end ;
60623: GO 60561
60625: POP
60626: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
60627: LD_VAR 0 5
60631: PPUSH
60632: LD_INT 11
60634: PPUSH
60635: CALL_OW 325
60639: IFFALSE 60898
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
60641: LD_ADDR_VAR 0 4
60645: PUSH
60646: LD_EXP 43
60650: PUSH
60651: LD_VAR 0 2
60655: ARRAY
60656: PPUSH
60657: LD_INT 25
60659: PUSH
60660: LD_INT 16
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PPUSH
60667: CALL_OW 72
60671: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
60672: LD_VAR 0 4
60676: PUSH
60677: LD_INT 6
60679: GREATEREQUAL
60680: PUSH
60681: LD_VAR 0 5
60685: PPUSH
60686: LD_INT 2
60688: PPUSH
60689: CALL_OW 325
60693: NOT
60694: OR
60695: IFFALSE 60898
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60697: LD_ADDR_VAR 0 8
60701: PUSH
60702: LD_EXP 14
60706: PUSH
60707: LD_VAR 0 2
60711: ARRAY
60712: PPUSH
60713: LD_INT 2
60715: PUSH
60716: LD_INT 30
60718: PUSH
60719: LD_INT 4
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 30
60728: PUSH
60729: LD_INT 5
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: PPUSH
60741: CALL_OW 72
60745: ST_TO_ADDR
// if barracks then
60746: LD_VAR 0 8
60750: IFFALSE 60898
// begin selected := 0 ;
60752: LD_ADDR_VAR 0 7
60756: PUSH
60757: LD_INT 0
60759: ST_TO_ADDR
// for j in barracks do
60760: LD_ADDR_VAR 0 3
60764: PUSH
60765: LD_VAR 0 8
60769: PUSH
60770: FOR_IN
60771: IFFALSE 60802
// begin if UnitsInside ( j ) < 6 then
60773: LD_VAR 0 3
60777: PPUSH
60778: CALL_OW 313
60782: PUSH
60783: LD_INT 6
60785: LESS
60786: IFFALSE 60800
// begin selected := j ;
60788: LD_ADDR_VAR 0 7
60792: PUSH
60793: LD_VAR 0 3
60797: ST_TO_ADDR
// break ;
60798: GO 60802
// end ; end ;
60800: GO 60770
60802: POP
60803: POP
// if selected then
60804: LD_VAR 0 7
60808: IFFALSE 60898
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
60810: LD_ADDR_VAR 0 3
60814: PUSH
60815: LD_EXP 43
60819: PUSH
60820: LD_VAR 0 2
60824: ARRAY
60825: PPUSH
60826: LD_INT 25
60828: PUSH
60829: LD_INT 12
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PPUSH
60836: CALL_OW 72
60840: PUSH
60841: FOR_IN
60842: IFFALSE 60896
// if not IsInUnit ( j ) and not HasTask ( j ) then
60844: LD_VAR 0 3
60848: PPUSH
60849: CALL_OW 310
60853: NOT
60854: PUSH
60855: LD_VAR 0 3
60859: PPUSH
60860: CALL_OW 314
60864: NOT
60865: AND
60866: IFFALSE 60894
// begin ComEnterUnit ( j , selected ) ;
60868: LD_VAR 0 3
60872: PPUSH
60873: LD_VAR 0 7
60877: PPUSH
60878: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
60882: LD_VAR 0 3
60886: PPUSH
60887: LD_INT 15
60889: PPUSH
60890: CALL_OW 183
// end ;
60894: GO 60841
60896: POP
60897: POP
// end ; end ; end ; end ; end ;
60898: GO 60291
60900: POP
60901: POP
// end ;
60902: LD_VAR 0 1
60906: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
60907: LD_INT 0
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
// if not mc_bases then
60913: LD_EXP 14
60917: NOT
60918: IFFALSE 60922
// exit ;
60920: GO 61100
// for i = 1 to mc_bases do
60922: LD_ADDR_VAR 0 2
60926: PUSH
60927: DOUBLE
60928: LD_INT 1
60930: DEC
60931: ST_TO_ADDR
60932: LD_EXP 14
60936: PUSH
60937: FOR_TO
60938: IFFALSE 61098
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
60940: LD_ADDR_VAR 0 4
60944: PUSH
60945: LD_EXP 14
60949: PUSH
60950: LD_VAR 0 2
60954: ARRAY
60955: PPUSH
60956: LD_INT 25
60958: PUSH
60959: LD_INT 9
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PPUSH
60966: CALL_OW 72
60970: ST_TO_ADDR
// if not tmp then
60971: LD_VAR 0 4
60975: NOT
60976: IFFALSE 60980
// continue ;
60978: GO 60937
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
60980: LD_EXP 40
60984: PUSH
60985: LD_VAR 0 2
60989: ARRAY
60990: PPUSH
60991: LD_INT 29
60993: PPUSH
60994: CALL_OW 325
60998: NOT
60999: PUSH
61000: LD_EXP 40
61004: PUSH
61005: LD_VAR 0 2
61009: ARRAY
61010: PPUSH
61011: LD_INT 28
61013: PPUSH
61014: CALL_OW 325
61018: NOT
61019: AND
61020: IFFALSE 61024
// continue ;
61022: GO 60937
// for j in tmp do
61024: LD_ADDR_VAR 0 3
61028: PUSH
61029: LD_VAR 0 4
61033: PUSH
61034: FOR_IN
61035: IFFALSE 61094
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
61037: LD_VAR 0 3
61041: PUSH
61042: LD_EXP 17
61046: PUSH
61047: LD_VAR 0 2
61051: ARRAY
61052: PUSH
61053: LD_INT 1
61055: ARRAY
61056: IN
61057: NOT
61058: PUSH
61059: LD_VAR 0 3
61063: PUSH
61064: LD_EXP 17
61068: PUSH
61069: LD_VAR 0 2
61073: ARRAY
61074: PUSH
61075: LD_INT 2
61077: ARRAY
61078: IN
61079: NOT
61080: AND
61081: IFFALSE 61092
// ComSpaceTimeShoot ( j ) ;
61083: LD_VAR 0 3
61087: PPUSH
61088: CALL 5403 0 1
61092: GO 61034
61094: POP
61095: POP
// end ;
61096: GO 60937
61098: POP
61099: POP
// end ;
61100: LD_VAR 0 1
61104: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
61109: PPUSH
61110: PPUSH
61111: PPUSH
61112: PPUSH
61113: PPUSH
61114: PPUSH
61115: PPUSH
// if not mc_bases then
61116: LD_EXP 14
61120: NOT
61121: IFFALSE 61125
// exit ;
61123: GO 61747
// for i = 1 to mc_bases do
61125: LD_ADDR_VAR 0 2
61129: PUSH
61130: DOUBLE
61131: LD_INT 1
61133: DEC
61134: ST_TO_ADDR
61135: LD_EXP 14
61139: PUSH
61140: FOR_TO
61141: IFFALSE 61745
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
61143: LD_EXP 49
61147: PUSH
61148: LD_VAR 0 2
61152: ARRAY
61153: NOT
61154: PUSH
61155: LD_INT 38
61157: PPUSH
61158: LD_EXP 40
61162: PUSH
61163: LD_VAR 0 2
61167: ARRAY
61168: PPUSH
61169: CALL_OW 321
61173: PUSH
61174: LD_INT 2
61176: NONEQUAL
61177: OR
61178: IFFALSE 61182
// continue ;
61180: GO 61140
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
61182: LD_ADDR_VAR 0 8
61186: PUSH
61187: LD_EXP 14
61191: PUSH
61192: LD_VAR 0 2
61196: ARRAY
61197: PPUSH
61198: LD_INT 30
61200: PUSH
61201: LD_INT 34
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PPUSH
61208: CALL_OW 72
61212: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
61213: LD_ADDR_VAR 0 9
61217: PUSH
61218: LD_EXP 14
61222: PUSH
61223: LD_VAR 0 2
61227: ARRAY
61228: PPUSH
61229: LD_INT 25
61231: PUSH
61232: LD_INT 4
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PPUSH
61239: CALL_OW 72
61243: PPUSH
61244: LD_INT 0
61246: PPUSH
61247: CALL 37967 0 2
61251: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
61252: LD_VAR 0 9
61256: NOT
61257: PUSH
61258: LD_VAR 0 8
61262: NOT
61263: OR
61264: PUSH
61265: LD_EXP 14
61269: PUSH
61270: LD_VAR 0 2
61274: ARRAY
61275: PPUSH
61276: LD_INT 124
61278: PPUSH
61279: CALL 37967 0 2
61283: OR
61284: IFFALSE 61288
// continue ;
61286: GO 61140
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
61288: LD_EXP 50
61292: PUSH
61293: LD_VAR 0 2
61297: ARRAY
61298: PUSH
61299: LD_EXP 49
61303: PUSH
61304: LD_VAR 0 2
61308: ARRAY
61309: LESS
61310: PUSH
61311: LD_EXP 50
61315: PUSH
61316: LD_VAR 0 2
61320: ARRAY
61321: PUSH
61322: LD_VAR 0 8
61326: LESS
61327: AND
61328: IFFALSE 61743
// begin tmp := sci [ 1 ] ;
61330: LD_ADDR_VAR 0 7
61334: PUSH
61335: LD_VAR 0 9
61339: PUSH
61340: LD_INT 1
61342: ARRAY
61343: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
61344: LD_VAR 0 7
61348: PPUSH
61349: LD_INT 124
61351: PPUSH
61352: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
61356: LD_ADDR_VAR 0 3
61360: PUSH
61361: DOUBLE
61362: LD_EXP 49
61366: PUSH
61367: LD_VAR 0 2
61371: ARRAY
61372: INC
61373: ST_TO_ADDR
61374: LD_EXP 49
61378: PUSH
61379: LD_VAR 0 2
61383: ARRAY
61384: PUSH
61385: FOR_DOWNTO
61386: IFFALSE 61729
// begin if IsInUnit ( tmp ) then
61388: LD_VAR 0 7
61392: PPUSH
61393: CALL_OW 310
61397: IFFALSE 61408
// ComExitBuilding ( tmp ) ;
61399: LD_VAR 0 7
61403: PPUSH
61404: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
61408: LD_INT 35
61410: PPUSH
61411: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
61415: LD_VAR 0 7
61419: PPUSH
61420: CALL_OW 310
61424: NOT
61425: PUSH
61426: LD_VAR 0 7
61430: PPUSH
61431: CALL_OW 314
61435: NOT
61436: AND
61437: IFFALSE 61408
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
61439: LD_ADDR_VAR 0 6
61443: PUSH
61444: LD_VAR 0 7
61448: PPUSH
61449: CALL_OW 250
61453: PUSH
61454: LD_VAR 0 7
61458: PPUSH
61459: CALL_OW 251
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61468: LD_INT 35
61470: PPUSH
61471: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
61475: LD_ADDR_VAR 0 4
61479: PUSH
61480: LD_EXP 49
61484: PUSH
61485: LD_VAR 0 2
61489: ARRAY
61490: PUSH
61491: LD_VAR 0 3
61495: ARRAY
61496: PUSH
61497: LD_INT 1
61499: ARRAY
61500: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
61501: LD_ADDR_VAR 0 5
61505: PUSH
61506: LD_EXP 49
61510: PUSH
61511: LD_VAR 0 2
61515: ARRAY
61516: PUSH
61517: LD_VAR 0 3
61521: ARRAY
61522: PUSH
61523: LD_INT 2
61525: ARRAY
61526: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
61527: LD_VAR 0 7
61531: PPUSH
61532: LD_INT 10
61534: PPUSH
61535: CALL 11999 0 2
61539: PUSH
61540: LD_INT 4
61542: ARRAY
61543: IFFALSE 61581
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
61545: LD_VAR 0 7
61549: PPUSH
61550: LD_VAR 0 6
61554: PUSH
61555: LD_INT 1
61557: ARRAY
61558: PPUSH
61559: LD_VAR 0 6
61563: PUSH
61564: LD_INT 2
61566: ARRAY
61567: PPUSH
61568: CALL_OW 111
// wait ( 0 0$10 ) ;
61572: LD_INT 350
61574: PPUSH
61575: CALL_OW 67
// end else
61579: GO 61607
// begin ComMoveXY ( tmp , x , y ) ;
61581: LD_VAR 0 7
61585: PPUSH
61586: LD_VAR 0 4
61590: PPUSH
61591: LD_VAR 0 5
61595: PPUSH
61596: CALL_OW 111
// wait ( 0 0$3 ) ;
61600: LD_INT 105
61602: PPUSH
61603: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
61607: LD_VAR 0 7
61611: PPUSH
61612: LD_VAR 0 4
61616: PPUSH
61617: LD_VAR 0 5
61621: PPUSH
61622: CALL_OW 307
61626: IFFALSE 61468
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
61628: LD_VAR 0 7
61632: PPUSH
61633: LD_VAR 0 4
61637: PPUSH
61638: LD_VAR 0 5
61642: PPUSH
61643: LD_VAR 0 8
61647: PUSH
61648: LD_VAR 0 3
61652: ARRAY
61653: PPUSH
61654: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
61658: LD_INT 35
61660: PPUSH
61661: CALL_OW 67
// until not HasTask ( tmp ) ;
61665: LD_VAR 0 7
61669: PPUSH
61670: CALL_OW 314
61674: NOT
61675: IFFALSE 61658
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
61677: LD_ADDR_EXP 50
61681: PUSH
61682: LD_EXP 50
61686: PPUSH
61687: LD_VAR 0 2
61691: PUSH
61692: LD_EXP 50
61696: PUSH
61697: LD_VAR 0 2
61701: ARRAY
61702: PUSH
61703: LD_INT 1
61705: PLUS
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PPUSH
61711: LD_VAR 0 8
61715: PUSH
61716: LD_VAR 0 3
61720: ARRAY
61721: PPUSH
61722: CALL 9406 0 3
61726: ST_TO_ADDR
// end ;
61727: GO 61385
61729: POP
61730: POP
// MC_Reset ( i , 124 ) ;
61731: LD_VAR 0 2
61735: PPUSH
61736: LD_INT 124
61738: PPUSH
61739: CALL 45350 0 2
// end ; end ;
61743: GO 61140
61745: POP
61746: POP
// end ;
61747: LD_VAR 0 1
61751: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
61752: LD_INT 0
61754: PPUSH
61755: PPUSH
61756: PPUSH
// if not mc_bases then
61757: LD_EXP 14
61761: NOT
61762: IFFALSE 61766
// exit ;
61764: GO 62372
// for i = 1 to mc_bases do
61766: LD_ADDR_VAR 0 2
61770: PUSH
61771: DOUBLE
61772: LD_INT 1
61774: DEC
61775: ST_TO_ADDR
61776: LD_EXP 14
61780: PUSH
61781: FOR_TO
61782: IFFALSE 62370
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
61784: LD_ADDR_VAR 0 3
61788: PUSH
61789: LD_EXP 14
61793: PUSH
61794: LD_VAR 0 2
61798: ARRAY
61799: PPUSH
61800: LD_INT 25
61802: PUSH
61803: LD_INT 4
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PPUSH
61810: CALL_OW 72
61814: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
61815: LD_VAR 0 3
61819: NOT
61820: PUSH
61821: LD_EXP 51
61825: PUSH
61826: LD_VAR 0 2
61830: ARRAY
61831: NOT
61832: OR
61833: PUSH
61834: LD_EXP 14
61838: PUSH
61839: LD_VAR 0 2
61843: ARRAY
61844: PPUSH
61845: LD_INT 2
61847: PUSH
61848: LD_INT 30
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 30
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: LIST
61872: PPUSH
61873: CALL_OW 72
61877: NOT
61878: OR
61879: IFFALSE 61929
// begin if mc_deposits_finder [ i ] then
61881: LD_EXP 52
61885: PUSH
61886: LD_VAR 0 2
61890: ARRAY
61891: IFFALSE 61927
// begin MC_Reset ( i , 125 ) ;
61893: LD_VAR 0 2
61897: PPUSH
61898: LD_INT 125
61900: PPUSH
61901: CALL 45350 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61905: LD_ADDR_EXP 52
61909: PUSH
61910: LD_EXP 52
61914: PPUSH
61915: LD_VAR 0 2
61919: PPUSH
61920: EMPTY
61921: PPUSH
61922: CALL_OW 1
61926: ST_TO_ADDR
// end ; continue ;
61927: GO 61781
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
61929: LD_EXP 51
61933: PUSH
61934: LD_VAR 0 2
61938: ARRAY
61939: PUSH
61940: LD_INT 1
61942: ARRAY
61943: PUSH
61944: LD_INT 3
61946: ARRAY
61947: PUSH
61948: LD_INT 1
61950: EQUAL
61951: PUSH
61952: LD_INT 20
61954: PPUSH
61955: LD_EXP 40
61959: PUSH
61960: LD_VAR 0 2
61964: ARRAY
61965: PPUSH
61966: CALL_OW 321
61970: PUSH
61971: LD_INT 2
61973: NONEQUAL
61974: AND
61975: IFFALSE 62025
// begin if mc_deposits_finder [ i ] then
61977: LD_EXP 52
61981: PUSH
61982: LD_VAR 0 2
61986: ARRAY
61987: IFFALSE 62023
// begin MC_Reset ( i , 125 ) ;
61989: LD_VAR 0 2
61993: PPUSH
61994: LD_INT 125
61996: PPUSH
61997: CALL 45350 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
62001: LD_ADDR_EXP 52
62005: PUSH
62006: LD_EXP 52
62010: PPUSH
62011: LD_VAR 0 2
62015: PPUSH
62016: EMPTY
62017: PPUSH
62018: CALL_OW 1
62022: ST_TO_ADDR
// end ; continue ;
62023: GO 61781
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
62025: LD_EXP 51
62029: PUSH
62030: LD_VAR 0 2
62034: ARRAY
62035: PUSH
62036: LD_INT 1
62038: ARRAY
62039: PUSH
62040: LD_INT 1
62042: ARRAY
62043: PPUSH
62044: LD_EXP 51
62048: PUSH
62049: LD_VAR 0 2
62053: ARRAY
62054: PUSH
62055: LD_INT 1
62057: ARRAY
62058: PUSH
62059: LD_INT 2
62061: ARRAY
62062: PPUSH
62063: LD_EXP 40
62067: PUSH
62068: LD_VAR 0 2
62072: ARRAY
62073: PPUSH
62074: CALL_OW 440
62078: IFFALSE 62121
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
62080: LD_ADDR_EXP 51
62084: PUSH
62085: LD_EXP 51
62089: PPUSH
62090: LD_VAR 0 2
62094: PPUSH
62095: LD_EXP 51
62099: PUSH
62100: LD_VAR 0 2
62104: ARRAY
62105: PPUSH
62106: LD_INT 1
62108: PPUSH
62109: CALL_OW 3
62113: PPUSH
62114: CALL_OW 1
62118: ST_TO_ADDR
62119: GO 62368
// begin if not mc_deposits_finder [ i ] then
62121: LD_EXP 52
62125: PUSH
62126: LD_VAR 0 2
62130: ARRAY
62131: NOT
62132: IFFALSE 62184
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
62134: LD_ADDR_EXP 52
62138: PUSH
62139: LD_EXP 52
62143: PPUSH
62144: LD_VAR 0 2
62148: PPUSH
62149: LD_VAR 0 3
62153: PUSH
62154: LD_INT 1
62156: ARRAY
62157: PUSH
62158: EMPTY
62159: LIST
62160: PPUSH
62161: CALL_OW 1
62165: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
62166: LD_VAR 0 3
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: PPUSH
62175: LD_INT 125
62177: PPUSH
62178: CALL_OW 109
// end else
62182: GO 62368
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
62184: LD_EXP 52
62188: PUSH
62189: LD_VAR 0 2
62193: ARRAY
62194: PUSH
62195: LD_INT 1
62197: ARRAY
62198: PPUSH
62199: CALL_OW 310
62203: IFFALSE 62226
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
62205: LD_EXP 52
62209: PUSH
62210: LD_VAR 0 2
62214: ARRAY
62215: PUSH
62216: LD_INT 1
62218: ARRAY
62219: PPUSH
62220: CALL_OW 122
62224: GO 62368
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
62226: LD_EXP 52
62230: PUSH
62231: LD_VAR 0 2
62235: ARRAY
62236: PUSH
62237: LD_INT 1
62239: ARRAY
62240: PPUSH
62241: CALL_OW 314
62245: NOT
62246: PUSH
62247: LD_EXP 52
62251: PUSH
62252: LD_VAR 0 2
62256: ARRAY
62257: PUSH
62258: LD_INT 1
62260: ARRAY
62261: PPUSH
62262: LD_EXP 51
62266: PUSH
62267: LD_VAR 0 2
62271: ARRAY
62272: PUSH
62273: LD_INT 1
62275: ARRAY
62276: PUSH
62277: LD_INT 1
62279: ARRAY
62280: PPUSH
62281: LD_EXP 51
62285: PUSH
62286: LD_VAR 0 2
62290: ARRAY
62291: PUSH
62292: LD_INT 1
62294: ARRAY
62295: PUSH
62296: LD_INT 2
62298: ARRAY
62299: PPUSH
62300: CALL_OW 297
62304: PUSH
62305: LD_INT 6
62307: GREATER
62308: AND
62309: IFFALSE 62368
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
62311: LD_EXP 52
62315: PUSH
62316: LD_VAR 0 2
62320: ARRAY
62321: PUSH
62322: LD_INT 1
62324: ARRAY
62325: PPUSH
62326: LD_EXP 51
62330: PUSH
62331: LD_VAR 0 2
62335: ARRAY
62336: PUSH
62337: LD_INT 1
62339: ARRAY
62340: PUSH
62341: LD_INT 1
62343: ARRAY
62344: PPUSH
62345: LD_EXP 51
62349: PUSH
62350: LD_VAR 0 2
62354: ARRAY
62355: PUSH
62356: LD_INT 1
62358: ARRAY
62359: PUSH
62360: LD_INT 2
62362: ARRAY
62363: PPUSH
62364: CALL_OW 111
// end ; end ; end ;
62368: GO 61781
62370: POP
62371: POP
// end ;
62372: LD_VAR 0 1
62376: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
62377: LD_INT 0
62379: PPUSH
62380: PPUSH
62381: PPUSH
62382: PPUSH
62383: PPUSH
62384: PPUSH
62385: PPUSH
62386: PPUSH
62387: PPUSH
62388: PPUSH
62389: PPUSH
// if not mc_bases then
62390: LD_EXP 14
62394: NOT
62395: IFFALSE 62399
// exit ;
62397: GO 63339
// for i = 1 to mc_bases do
62399: LD_ADDR_VAR 0 2
62403: PUSH
62404: DOUBLE
62405: LD_INT 1
62407: DEC
62408: ST_TO_ADDR
62409: LD_EXP 14
62413: PUSH
62414: FOR_TO
62415: IFFALSE 63337
// begin if not mc_bases [ i ] or mc_scan [ i ] then
62417: LD_EXP 14
62421: PUSH
62422: LD_VAR 0 2
62426: ARRAY
62427: NOT
62428: PUSH
62429: LD_EXP 37
62433: PUSH
62434: LD_VAR 0 2
62438: ARRAY
62439: OR
62440: IFFALSE 62444
// continue ;
62442: GO 62414
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
62444: LD_ADDR_VAR 0 7
62448: PUSH
62449: LD_EXP 14
62453: PUSH
62454: LD_VAR 0 2
62458: ARRAY
62459: PUSH
62460: LD_INT 1
62462: ARRAY
62463: PPUSH
62464: CALL_OW 248
62468: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
62469: LD_VAR 0 7
62473: PUSH
62474: LD_INT 3
62476: EQUAL
62477: PUSH
62478: LD_EXP 33
62482: PUSH
62483: LD_VAR 0 2
62487: ARRAY
62488: PUSH
62489: LD_EXP 36
62493: PUSH
62494: LD_VAR 0 2
62498: ARRAY
62499: UNION
62500: PPUSH
62501: LD_INT 33
62503: PUSH
62504: LD_INT 2
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PPUSH
62511: CALL_OW 72
62515: NOT
62516: OR
62517: IFFALSE 62521
// continue ;
62519: GO 62414
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
62521: LD_ADDR_VAR 0 9
62525: PUSH
62526: LD_EXP 14
62530: PUSH
62531: LD_VAR 0 2
62535: ARRAY
62536: PPUSH
62537: LD_INT 30
62539: PUSH
62540: LD_INT 36
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PPUSH
62547: CALL_OW 72
62551: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
62552: LD_ADDR_VAR 0 10
62556: PUSH
62557: LD_EXP 33
62561: PUSH
62562: LD_VAR 0 2
62566: ARRAY
62567: PPUSH
62568: LD_INT 34
62570: PUSH
62571: LD_INT 31
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PPUSH
62578: CALL_OW 72
62582: ST_TO_ADDR
// if not cts and not mcts then
62583: LD_VAR 0 9
62587: NOT
62588: PUSH
62589: LD_VAR 0 10
62593: NOT
62594: AND
62595: IFFALSE 62599
// continue ;
62597: GO 62414
// x := cts ;
62599: LD_ADDR_VAR 0 11
62603: PUSH
62604: LD_VAR 0 9
62608: ST_TO_ADDR
// if not x then
62609: LD_VAR 0 11
62613: NOT
62614: IFFALSE 62626
// x := mcts ;
62616: LD_ADDR_VAR 0 11
62620: PUSH
62621: LD_VAR 0 10
62625: ST_TO_ADDR
// if not x then
62626: LD_VAR 0 11
62630: NOT
62631: IFFALSE 62635
// continue ;
62633: GO 62414
// if mc_remote_driver [ i ] then
62635: LD_EXP 54
62639: PUSH
62640: LD_VAR 0 2
62644: ARRAY
62645: IFFALSE 63032
// for j in mc_remote_driver [ i ] do
62647: LD_ADDR_VAR 0 3
62651: PUSH
62652: LD_EXP 54
62656: PUSH
62657: LD_VAR 0 2
62661: ARRAY
62662: PUSH
62663: FOR_IN
62664: IFFALSE 63030
// begin if GetClass ( j ) <> 3 then
62666: LD_VAR 0 3
62670: PPUSH
62671: CALL_OW 257
62675: PUSH
62676: LD_INT 3
62678: NONEQUAL
62679: IFFALSE 62732
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
62681: LD_ADDR_EXP 54
62685: PUSH
62686: LD_EXP 54
62690: PPUSH
62691: LD_VAR 0 2
62695: PPUSH
62696: LD_EXP 54
62700: PUSH
62701: LD_VAR 0 2
62705: ARRAY
62706: PUSH
62707: LD_VAR 0 3
62711: DIFF
62712: PPUSH
62713: CALL_OW 1
62717: ST_TO_ADDR
// SetTag ( j , 0 ) ;
62718: LD_VAR 0 3
62722: PPUSH
62723: LD_INT 0
62725: PPUSH
62726: CALL_OW 109
// continue ;
62730: GO 62663
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
62732: LD_EXP 33
62736: PUSH
62737: LD_VAR 0 2
62741: ARRAY
62742: PPUSH
62743: LD_INT 34
62745: PUSH
62746: LD_INT 31
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 58
62755: PUSH
62756: EMPTY
62757: LIST
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PPUSH
62763: CALL_OW 72
62767: PUSH
62768: LD_VAR 0 3
62772: PPUSH
62773: CALL 38055 0 1
62777: NOT
62778: AND
62779: IFFALSE 62850
// begin if IsInUnit ( j ) then
62781: LD_VAR 0 3
62785: PPUSH
62786: CALL_OW 310
62790: IFFALSE 62801
// ComExitBuilding ( j ) ;
62792: LD_VAR 0 3
62796: PPUSH
62797: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
62801: LD_VAR 0 3
62805: PPUSH
62806: LD_EXP 33
62810: PUSH
62811: LD_VAR 0 2
62815: ARRAY
62816: PPUSH
62817: LD_INT 34
62819: PUSH
62820: LD_INT 31
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 58
62829: PUSH
62830: EMPTY
62831: LIST
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PPUSH
62837: CALL_OW 72
62841: PUSH
62842: LD_INT 1
62844: ARRAY
62845: PPUSH
62846: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
62850: LD_VAR 0 3
62854: PPUSH
62855: CALL_OW 310
62859: NOT
62860: PUSH
62861: LD_VAR 0 3
62865: PPUSH
62866: CALL_OW 310
62870: PPUSH
62871: CALL_OW 266
62875: PUSH
62876: LD_INT 36
62878: NONEQUAL
62879: PUSH
62880: LD_VAR 0 3
62884: PPUSH
62885: CALL 38055 0 1
62889: NOT
62890: AND
62891: OR
62892: IFFALSE 63028
// begin if IsInUnit ( j ) then
62894: LD_VAR 0 3
62898: PPUSH
62899: CALL_OW 310
62903: IFFALSE 62914
// ComExitBuilding ( j ) ;
62905: LD_VAR 0 3
62909: PPUSH
62910: CALL_OW 122
// ct := 0 ;
62914: LD_ADDR_VAR 0 8
62918: PUSH
62919: LD_INT 0
62921: ST_TO_ADDR
// for k in x do
62922: LD_ADDR_VAR 0 4
62926: PUSH
62927: LD_VAR 0 11
62931: PUSH
62932: FOR_IN
62933: IFFALSE 63006
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
62935: LD_VAR 0 4
62939: PPUSH
62940: CALL_OW 264
62944: PUSH
62945: LD_INT 31
62947: EQUAL
62948: PUSH
62949: LD_VAR 0 4
62953: PPUSH
62954: CALL_OW 311
62958: NOT
62959: AND
62960: PUSH
62961: LD_VAR 0 4
62965: PPUSH
62966: CALL_OW 266
62970: PUSH
62971: LD_INT 36
62973: EQUAL
62974: PUSH
62975: LD_VAR 0 4
62979: PPUSH
62980: CALL_OW 313
62984: PUSH
62985: LD_INT 3
62987: LESS
62988: AND
62989: OR
62990: IFFALSE 63004
// begin ct := k ;
62992: LD_ADDR_VAR 0 8
62996: PUSH
62997: LD_VAR 0 4
63001: ST_TO_ADDR
// break ;
63002: GO 63006
// end ;
63004: GO 62932
63006: POP
63007: POP
// if ct then
63008: LD_VAR 0 8
63012: IFFALSE 63028
// ComEnterUnit ( j , ct ) ;
63014: LD_VAR 0 3
63018: PPUSH
63019: LD_VAR 0 8
63023: PPUSH
63024: CALL_OW 120
// end ; end ;
63028: GO 62663
63030: POP
63031: POP
// places := 0 ;
63032: LD_ADDR_VAR 0 5
63036: PUSH
63037: LD_INT 0
63039: ST_TO_ADDR
// for j = 1 to x do
63040: LD_ADDR_VAR 0 3
63044: PUSH
63045: DOUBLE
63046: LD_INT 1
63048: DEC
63049: ST_TO_ADDR
63050: LD_VAR 0 11
63054: PUSH
63055: FOR_TO
63056: IFFALSE 63132
// if GetWeapon ( x [ j ] ) = ar_control_tower then
63058: LD_VAR 0 11
63062: PUSH
63063: LD_VAR 0 3
63067: ARRAY
63068: PPUSH
63069: CALL_OW 264
63073: PUSH
63074: LD_INT 31
63076: EQUAL
63077: IFFALSE 63095
// places := places + 1 else
63079: LD_ADDR_VAR 0 5
63083: PUSH
63084: LD_VAR 0 5
63088: PUSH
63089: LD_INT 1
63091: PLUS
63092: ST_TO_ADDR
63093: GO 63130
// if GetBType ( x [ j ] ) = b_control_tower then
63095: LD_VAR 0 11
63099: PUSH
63100: LD_VAR 0 3
63104: ARRAY
63105: PPUSH
63106: CALL_OW 266
63110: PUSH
63111: LD_INT 36
63113: EQUAL
63114: IFFALSE 63130
// places := places + 3 ;
63116: LD_ADDR_VAR 0 5
63120: PUSH
63121: LD_VAR 0 5
63125: PUSH
63126: LD_INT 3
63128: PLUS
63129: ST_TO_ADDR
63130: GO 63055
63132: POP
63133: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
63134: LD_VAR 0 5
63138: PUSH
63139: LD_INT 0
63141: EQUAL
63142: PUSH
63143: LD_VAR 0 5
63147: PUSH
63148: LD_EXP 54
63152: PUSH
63153: LD_VAR 0 2
63157: ARRAY
63158: LESSEQUAL
63159: OR
63160: IFFALSE 63164
// continue ;
63162: GO 62414
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
63164: LD_ADDR_VAR 0 6
63168: PUSH
63169: LD_EXP 14
63173: PUSH
63174: LD_VAR 0 2
63178: ARRAY
63179: PPUSH
63180: LD_INT 25
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PPUSH
63190: CALL_OW 72
63194: PUSH
63195: LD_EXP 54
63199: PUSH
63200: LD_VAR 0 2
63204: ARRAY
63205: DIFF
63206: PPUSH
63207: LD_INT 3
63209: PPUSH
63210: CALL 38955 0 2
63214: ST_TO_ADDR
// for j in tmp do
63215: LD_ADDR_VAR 0 3
63219: PUSH
63220: LD_VAR 0 6
63224: PUSH
63225: FOR_IN
63226: IFFALSE 63261
// if GetTag ( j ) > 0 then
63228: LD_VAR 0 3
63232: PPUSH
63233: CALL_OW 110
63237: PUSH
63238: LD_INT 0
63240: GREATER
63241: IFFALSE 63259
// tmp := tmp diff j ;
63243: LD_ADDR_VAR 0 6
63247: PUSH
63248: LD_VAR 0 6
63252: PUSH
63253: LD_VAR 0 3
63257: DIFF
63258: ST_TO_ADDR
63259: GO 63225
63261: POP
63262: POP
// if not tmp then
63263: LD_VAR 0 6
63267: NOT
63268: IFFALSE 63272
// continue ;
63270: GO 62414
// if places then
63272: LD_VAR 0 5
63276: IFFALSE 63335
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
63278: LD_ADDR_EXP 54
63282: PUSH
63283: LD_EXP 54
63287: PPUSH
63288: LD_VAR 0 2
63292: PPUSH
63293: LD_EXP 54
63297: PUSH
63298: LD_VAR 0 2
63302: ARRAY
63303: PUSH
63304: LD_VAR 0 6
63308: PUSH
63309: LD_INT 1
63311: ARRAY
63312: UNION
63313: PPUSH
63314: CALL_OW 1
63318: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
63319: LD_VAR 0 6
63323: PUSH
63324: LD_INT 1
63326: ARRAY
63327: PPUSH
63328: LD_INT 126
63330: PPUSH
63331: CALL_OW 109
// end ; end ;
63335: GO 62414
63337: POP
63338: POP
// end ;
63339: LD_VAR 0 1
63343: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
63344: LD_INT 0
63346: PPUSH
63347: PPUSH
63348: PPUSH
63349: PPUSH
63350: PPUSH
63351: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
63352: LD_VAR 0 1
63356: NOT
63357: PUSH
63358: LD_VAR 0 2
63362: NOT
63363: OR
63364: PUSH
63365: LD_VAR 0 3
63369: NOT
63370: OR
63371: PUSH
63372: LD_VAR 0 4
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 2
63382: PUSH
63383: LD_INT 3
63385: PUSH
63386: LD_INT 4
63388: PUSH
63389: LD_INT 5
63391: PUSH
63392: LD_INT 8
63394: PUSH
63395: LD_INT 9
63397: PUSH
63398: LD_INT 15
63400: PUSH
63401: LD_INT 16
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: IN
63415: NOT
63416: OR
63417: IFFALSE 63421
// exit ;
63419: GO 64321
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
63421: LD_ADDR_VAR 0 2
63425: PUSH
63426: LD_VAR 0 2
63430: PPUSH
63431: LD_INT 21
63433: PUSH
63434: LD_INT 3
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 24
63443: PUSH
63444: LD_INT 250
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PPUSH
63455: CALL_OW 72
63459: ST_TO_ADDR
// case class of 1 , 15 :
63460: LD_VAR 0 4
63464: PUSH
63465: LD_INT 1
63467: DOUBLE
63468: EQUAL
63469: IFTRUE 63479
63471: LD_INT 15
63473: DOUBLE
63474: EQUAL
63475: IFTRUE 63479
63477: GO 63564
63479: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
63480: LD_ADDR_VAR 0 8
63484: PUSH
63485: LD_VAR 0 2
63489: PPUSH
63490: LD_INT 2
63492: PUSH
63493: LD_INT 30
63495: PUSH
63496: LD_INT 32
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 30
63505: PUSH
63506: LD_INT 31
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: PPUSH
63518: CALL_OW 72
63522: PUSH
63523: LD_VAR 0 2
63527: PPUSH
63528: LD_INT 2
63530: PUSH
63531: LD_INT 30
63533: PUSH
63534: LD_INT 4
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 30
63543: PUSH
63544: LD_INT 5
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: PPUSH
63556: CALL_OW 72
63560: ADD
63561: ST_TO_ADDR
63562: GO 63810
63564: LD_INT 2
63566: DOUBLE
63567: EQUAL
63568: IFTRUE 63578
63570: LD_INT 16
63572: DOUBLE
63573: EQUAL
63574: IFTRUE 63578
63576: GO 63624
63578: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
63579: LD_ADDR_VAR 0 8
63583: PUSH
63584: LD_VAR 0 2
63588: PPUSH
63589: LD_INT 2
63591: PUSH
63592: LD_INT 30
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 30
63604: PUSH
63605: LD_INT 1
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: PPUSH
63617: CALL_OW 72
63621: ST_TO_ADDR
63622: GO 63810
63624: LD_INT 3
63626: DOUBLE
63627: EQUAL
63628: IFTRUE 63632
63630: GO 63678
63632: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
63633: LD_ADDR_VAR 0 8
63637: PUSH
63638: LD_VAR 0 2
63642: PPUSH
63643: LD_INT 2
63645: PUSH
63646: LD_INT 30
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 30
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: LIST
63670: PPUSH
63671: CALL_OW 72
63675: ST_TO_ADDR
63676: GO 63810
63678: LD_INT 4
63680: DOUBLE
63681: EQUAL
63682: IFTRUE 63686
63684: GO 63743
63686: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
63687: LD_ADDR_VAR 0 8
63691: PUSH
63692: LD_VAR 0 2
63696: PPUSH
63697: LD_INT 2
63699: PUSH
63700: LD_INT 30
63702: PUSH
63703: LD_INT 6
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 30
63712: PUSH
63713: LD_INT 7
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 30
63722: PUSH
63723: LD_INT 8
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: PPUSH
63736: CALL_OW 72
63740: ST_TO_ADDR
63741: GO 63810
63743: LD_INT 5
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63763
63749: LD_INT 8
63751: DOUBLE
63752: EQUAL
63753: IFTRUE 63763
63755: LD_INT 9
63757: DOUBLE
63758: EQUAL
63759: IFTRUE 63763
63761: GO 63809
63763: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
63764: LD_ADDR_VAR 0 8
63768: PUSH
63769: LD_VAR 0 2
63773: PPUSH
63774: LD_INT 2
63776: PUSH
63777: LD_INT 30
63779: PUSH
63780: LD_INT 4
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 30
63789: PUSH
63790: LD_INT 5
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: PPUSH
63802: CALL_OW 72
63806: ST_TO_ADDR
63807: GO 63810
63809: POP
// if not tmp then
63810: LD_VAR 0 8
63814: NOT
63815: IFFALSE 63819
// exit ;
63817: GO 64321
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
63819: LD_VAR 0 4
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 15
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: IN
63834: PUSH
63835: LD_EXP 23
63839: PUSH
63840: LD_VAR 0 1
63844: ARRAY
63845: AND
63846: IFFALSE 64002
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
63848: LD_ADDR_VAR 0 9
63852: PUSH
63853: LD_EXP 23
63857: PUSH
63858: LD_VAR 0 1
63862: ARRAY
63863: PUSH
63864: LD_INT 1
63866: ARRAY
63867: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
63868: LD_VAR 0 9
63872: PUSH
63873: LD_EXP 24
63877: PUSH
63878: LD_VAR 0 1
63882: ARRAY
63883: IN
63884: NOT
63885: IFFALSE 64000
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
63887: LD_ADDR_EXP 24
63891: PUSH
63892: LD_EXP 24
63896: PPUSH
63897: LD_VAR 0 1
63901: PUSH
63902: LD_EXP 24
63906: PUSH
63907: LD_VAR 0 1
63911: ARRAY
63912: PUSH
63913: LD_INT 1
63915: PLUS
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PPUSH
63921: LD_VAR 0 9
63925: PPUSH
63926: CALL 9406 0 3
63930: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
63931: LD_ADDR_EXP 23
63935: PUSH
63936: LD_EXP 23
63940: PPUSH
63941: LD_VAR 0 1
63945: PPUSH
63946: LD_EXP 23
63950: PUSH
63951: LD_VAR 0 1
63955: ARRAY
63956: PUSH
63957: LD_VAR 0 9
63961: DIFF
63962: PPUSH
63963: CALL_OW 1
63967: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
63968: LD_VAR 0 3
63972: PPUSH
63973: LD_EXP 24
63977: PUSH
63978: LD_VAR 0 1
63982: ARRAY
63983: PUSH
63984: LD_EXP 24
63988: PUSH
63989: LD_VAR 0 1
63993: ARRAY
63994: ARRAY
63995: PPUSH
63996: CALL_OW 120
// end ; exit ;
64000: GO 64321
// end ; if tmp > 1 then
64002: LD_VAR 0 8
64006: PUSH
64007: LD_INT 1
64009: GREATER
64010: IFFALSE 64114
// for i = 2 to tmp do
64012: LD_ADDR_VAR 0 6
64016: PUSH
64017: DOUBLE
64018: LD_INT 2
64020: DEC
64021: ST_TO_ADDR
64022: LD_VAR 0 8
64026: PUSH
64027: FOR_TO
64028: IFFALSE 64112
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
64030: LD_VAR 0 8
64034: PUSH
64035: LD_VAR 0 6
64039: ARRAY
64040: PPUSH
64041: CALL_OW 461
64045: PUSH
64046: LD_INT 6
64048: EQUAL
64049: IFFALSE 64110
// begin x := tmp [ i ] ;
64051: LD_ADDR_VAR 0 9
64055: PUSH
64056: LD_VAR 0 8
64060: PUSH
64061: LD_VAR 0 6
64065: ARRAY
64066: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
64067: LD_ADDR_VAR 0 8
64071: PUSH
64072: LD_VAR 0 8
64076: PPUSH
64077: LD_VAR 0 6
64081: PPUSH
64082: CALL_OW 3
64086: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
64087: LD_ADDR_VAR 0 8
64091: PUSH
64092: LD_VAR 0 8
64096: PPUSH
64097: LD_INT 1
64099: PPUSH
64100: LD_VAR 0 9
64104: PPUSH
64105: CALL_OW 2
64109: ST_TO_ADDR
// end ;
64110: GO 64027
64112: POP
64113: POP
// for i in tmp do
64114: LD_ADDR_VAR 0 6
64118: PUSH
64119: LD_VAR 0 8
64123: PUSH
64124: FOR_IN
64125: IFFALSE 64194
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
64127: LD_VAR 0 6
64131: PPUSH
64132: CALL_OW 313
64136: PUSH
64137: LD_INT 6
64139: LESS
64140: PUSH
64141: LD_VAR 0 6
64145: PPUSH
64146: CALL_OW 266
64150: PUSH
64151: LD_INT 31
64153: PUSH
64154: LD_INT 32
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: IN
64161: NOT
64162: AND
64163: PUSH
64164: LD_VAR 0 6
64168: PPUSH
64169: CALL_OW 313
64173: PUSH
64174: LD_INT 0
64176: EQUAL
64177: OR
64178: IFFALSE 64192
// begin j := i ;
64180: LD_ADDR_VAR 0 7
64184: PUSH
64185: LD_VAR 0 6
64189: ST_TO_ADDR
// break ;
64190: GO 64194
// end ; end ;
64192: GO 64124
64194: POP
64195: POP
// if j then
64196: LD_VAR 0 7
64200: IFFALSE 64218
// ComEnterUnit ( unit , j ) else
64202: LD_VAR 0 3
64206: PPUSH
64207: LD_VAR 0 7
64211: PPUSH
64212: CALL_OW 120
64216: GO 64321
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64218: LD_ADDR_VAR 0 10
64222: PUSH
64223: LD_VAR 0 2
64227: PPUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 30
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 30
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: LIST
64255: PPUSH
64256: CALL_OW 72
64260: ST_TO_ADDR
// if depot then
64261: LD_VAR 0 10
64265: IFFALSE 64321
// begin depot := NearestUnitToUnit ( depot , unit ) ;
64267: LD_ADDR_VAR 0 10
64271: PUSH
64272: LD_VAR 0 10
64276: PPUSH
64277: LD_VAR 0 3
64281: PPUSH
64282: CALL_OW 74
64286: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
64287: LD_VAR 0 3
64291: PPUSH
64292: LD_VAR 0 10
64296: PPUSH
64297: CALL_OW 296
64301: PUSH
64302: LD_INT 10
64304: GREATER
64305: IFFALSE 64321
// ComStandNearbyBuilding ( unit , depot ) ;
64307: LD_VAR 0 3
64311: PPUSH
64312: LD_VAR 0 10
64316: PPUSH
64317: CALL 6020 0 2
// end ; end ; end ;
64321: LD_VAR 0 5
64325: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
64326: LD_INT 0
64328: PPUSH
64329: PPUSH
64330: PPUSH
64331: PPUSH
// if not mc_bases then
64332: LD_EXP 14
64336: NOT
64337: IFFALSE 64341
// exit ;
64339: GO 64580
// for i = 1 to mc_bases do
64341: LD_ADDR_VAR 0 2
64345: PUSH
64346: DOUBLE
64347: LD_INT 1
64349: DEC
64350: ST_TO_ADDR
64351: LD_EXP 14
64355: PUSH
64356: FOR_TO
64357: IFFALSE 64578
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
64359: LD_ADDR_VAR 0 4
64363: PUSH
64364: LD_EXP 14
64368: PUSH
64369: LD_VAR 0 2
64373: ARRAY
64374: PPUSH
64375: LD_INT 21
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PPUSH
64385: CALL_OW 72
64389: PUSH
64390: LD_EXP 43
64394: PUSH
64395: LD_VAR 0 2
64399: ARRAY
64400: UNION
64401: ST_TO_ADDR
// if not tmp then
64402: LD_VAR 0 4
64406: NOT
64407: IFFALSE 64411
// continue ;
64409: GO 64356
// for j in tmp do
64411: LD_ADDR_VAR 0 3
64415: PUSH
64416: LD_VAR 0 4
64420: PUSH
64421: FOR_IN
64422: IFFALSE 64574
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
64424: LD_VAR 0 3
64428: PPUSH
64429: CALL_OW 110
64433: NOT
64434: PUSH
64435: LD_VAR 0 3
64439: PPUSH
64440: CALL_OW 314
64444: NOT
64445: AND
64446: PUSH
64447: LD_VAR 0 3
64451: PPUSH
64452: CALL_OW 311
64456: NOT
64457: AND
64458: PUSH
64459: LD_VAR 0 3
64463: PPUSH
64464: CALL_OW 310
64468: NOT
64469: AND
64470: PUSH
64471: LD_VAR 0 3
64475: PUSH
64476: LD_EXP 17
64480: PUSH
64481: LD_VAR 0 2
64485: ARRAY
64486: PUSH
64487: LD_INT 1
64489: ARRAY
64490: IN
64491: NOT
64492: AND
64493: PUSH
64494: LD_VAR 0 3
64498: PUSH
64499: LD_EXP 17
64503: PUSH
64504: LD_VAR 0 2
64508: ARRAY
64509: PUSH
64510: LD_INT 2
64512: ARRAY
64513: IN
64514: NOT
64515: AND
64516: PUSH
64517: LD_VAR 0 3
64521: PUSH
64522: LD_EXP 26
64526: PUSH
64527: LD_VAR 0 2
64531: ARRAY
64532: IN
64533: NOT
64534: AND
64535: IFFALSE 64572
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
64537: LD_VAR 0 2
64541: PPUSH
64542: LD_EXP 14
64546: PUSH
64547: LD_VAR 0 2
64551: ARRAY
64552: PPUSH
64553: LD_VAR 0 3
64557: PPUSH
64558: LD_VAR 0 3
64562: PPUSH
64563: CALL_OW 257
64567: PPUSH
64568: CALL 63344 0 4
// end ;
64572: GO 64421
64574: POP
64575: POP
// end ;
64576: GO 64356
64578: POP
64579: POP
// end ;
64580: LD_VAR 0 1
64584: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
64585: LD_INT 0
64587: PPUSH
64588: PPUSH
64589: PPUSH
64590: PPUSH
64591: PPUSH
64592: PPUSH
// if not mc_bases [ base ] then
64593: LD_EXP 14
64597: PUSH
64598: LD_VAR 0 1
64602: ARRAY
64603: NOT
64604: IFFALSE 64608
// exit ;
64606: GO 64790
// tmp := [ ] ;
64608: LD_ADDR_VAR 0 6
64612: PUSH
64613: EMPTY
64614: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
64615: LD_ADDR_VAR 0 7
64619: PUSH
64620: LD_VAR 0 3
64624: PPUSH
64625: LD_INT 0
64627: PPUSH
64628: CALL_OW 517
64632: ST_TO_ADDR
// if not list then
64633: LD_VAR 0 7
64637: NOT
64638: IFFALSE 64642
// exit ;
64640: GO 64790
// for i = 1 to amount do
64642: LD_ADDR_VAR 0 5
64646: PUSH
64647: DOUBLE
64648: LD_INT 1
64650: DEC
64651: ST_TO_ADDR
64652: LD_VAR 0 2
64656: PUSH
64657: FOR_TO
64658: IFFALSE 64738
// begin x := rand ( 1 , list [ 1 ] ) ;
64660: LD_ADDR_VAR 0 8
64664: PUSH
64665: LD_INT 1
64667: PPUSH
64668: LD_VAR 0 7
64672: PUSH
64673: LD_INT 1
64675: ARRAY
64676: PPUSH
64677: CALL_OW 12
64681: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
64682: LD_ADDR_VAR 0 6
64686: PUSH
64687: LD_VAR 0 6
64691: PPUSH
64692: LD_VAR 0 5
64696: PPUSH
64697: LD_VAR 0 7
64701: PUSH
64702: LD_INT 1
64704: ARRAY
64705: PUSH
64706: LD_VAR 0 8
64710: ARRAY
64711: PUSH
64712: LD_VAR 0 7
64716: PUSH
64717: LD_INT 2
64719: ARRAY
64720: PUSH
64721: LD_VAR 0 8
64725: ARRAY
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PPUSH
64731: CALL_OW 1
64735: ST_TO_ADDR
// end ;
64736: GO 64657
64738: POP
64739: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
64740: LD_ADDR_EXP 27
64744: PUSH
64745: LD_EXP 27
64749: PPUSH
64750: LD_VAR 0 1
64754: PPUSH
64755: LD_VAR 0 6
64759: PPUSH
64760: CALL_OW 1
64764: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
64765: LD_ADDR_EXP 29
64769: PUSH
64770: LD_EXP 29
64774: PPUSH
64775: LD_VAR 0 1
64779: PPUSH
64780: LD_VAR 0 3
64784: PPUSH
64785: CALL_OW 1
64789: ST_TO_ADDR
// end ;
64790: LD_VAR 0 4
64794: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
64795: LD_INT 0
64797: PPUSH
// if not mc_bases [ base ] then
64798: LD_EXP 14
64802: PUSH
64803: LD_VAR 0 1
64807: ARRAY
64808: NOT
64809: IFFALSE 64813
// exit ;
64811: GO 64838
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
64813: LD_ADDR_EXP 19
64817: PUSH
64818: LD_EXP 19
64822: PPUSH
64823: LD_VAR 0 1
64827: PPUSH
64828: LD_VAR 0 2
64832: PPUSH
64833: CALL_OW 1
64837: ST_TO_ADDR
// end ;
64838: LD_VAR 0 3
64842: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
64843: LD_INT 0
64845: PPUSH
// if not mc_bases [ base ] then
64846: LD_EXP 14
64850: PUSH
64851: LD_VAR 0 1
64855: ARRAY
64856: NOT
64857: IFFALSE 64861
// exit ;
64859: GO 64898
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
64861: LD_ADDR_EXP 19
64865: PUSH
64866: LD_EXP 19
64870: PPUSH
64871: LD_VAR 0 1
64875: PPUSH
64876: LD_EXP 19
64880: PUSH
64881: LD_VAR 0 1
64885: ARRAY
64886: PUSH
64887: LD_VAR 0 2
64891: UNION
64892: PPUSH
64893: CALL_OW 1
64897: ST_TO_ADDR
// end ;
64898: LD_VAR 0 3
64902: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
64903: LD_INT 0
64905: PPUSH
// if not mc_bases [ base ] then
64906: LD_EXP 14
64910: PUSH
64911: LD_VAR 0 1
64915: ARRAY
64916: NOT
64917: IFFALSE 64921
// exit ;
64919: GO 64946
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
64921: LD_ADDR_EXP 35
64925: PUSH
64926: LD_EXP 35
64930: PPUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: LD_VAR 0 2
64940: PPUSH
64941: CALL_OW 1
64945: ST_TO_ADDR
// end ;
64946: LD_VAR 0 3
64950: RET
// export function MC_InsertProduceList ( base , components ) ; begin
64951: LD_INT 0
64953: PPUSH
// if not mc_bases [ base ] then
64954: LD_EXP 14
64958: PUSH
64959: LD_VAR 0 1
64963: ARRAY
64964: NOT
64965: IFFALSE 64969
// exit ;
64967: GO 65006
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
64969: LD_ADDR_EXP 35
64973: PUSH
64974: LD_EXP 35
64978: PPUSH
64979: LD_VAR 0 1
64983: PPUSH
64984: LD_EXP 35
64988: PUSH
64989: LD_VAR 0 1
64993: ARRAY
64994: PUSH
64995: LD_VAR 0 2
64999: ADD
65000: PPUSH
65001: CALL_OW 1
65005: ST_TO_ADDR
// end ;
65006: LD_VAR 0 3
65010: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
65011: LD_INT 0
65013: PPUSH
// if not mc_bases [ base ] then
65014: LD_EXP 14
65018: PUSH
65019: LD_VAR 0 1
65023: ARRAY
65024: NOT
65025: IFFALSE 65029
// exit ;
65027: GO 65083
// mc_defender := Replace ( mc_defender , base , deflist ) ;
65029: LD_ADDR_EXP 36
65033: PUSH
65034: LD_EXP 36
65038: PPUSH
65039: LD_VAR 0 1
65043: PPUSH
65044: LD_VAR 0 2
65048: PPUSH
65049: CALL_OW 1
65053: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
65054: LD_ADDR_EXP 25
65058: PUSH
65059: LD_EXP 25
65063: PPUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_INT 0
65076: PLUS
65077: PPUSH
65078: CALL_OW 1
65082: ST_TO_ADDR
// end ;
65083: LD_VAR 0 3
65087: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
65088: LD_INT 0
65090: PPUSH
// if not mc_bases [ base ] then
65091: LD_EXP 14
65095: PUSH
65096: LD_VAR 0 1
65100: ARRAY
65101: NOT
65102: IFFALSE 65106
// exit ;
65104: GO 65131
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
65106: LD_ADDR_EXP 25
65110: PUSH
65111: LD_EXP 25
65115: PPUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: LD_VAR 0 2
65125: PPUSH
65126: CALL_OW 1
65130: ST_TO_ADDR
// end ;
65131: LD_VAR 0 3
65135: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
65136: LD_INT 0
65138: PPUSH
65139: PPUSH
65140: PPUSH
65141: PPUSH
// if not mc_bases [ base ] then
65142: LD_EXP 14
65146: PUSH
65147: LD_VAR 0 1
65151: ARRAY
65152: NOT
65153: IFFALSE 65157
// exit ;
65155: GO 65222
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
65157: LD_ADDR_EXP 34
65161: PUSH
65162: LD_EXP 34
65166: PPUSH
65167: LD_VAR 0 1
65171: PUSH
65172: LD_EXP 34
65176: PUSH
65177: LD_VAR 0 1
65181: ARRAY
65182: PUSH
65183: LD_INT 1
65185: PLUS
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PPUSH
65191: LD_VAR 0 1
65195: PUSH
65196: LD_VAR 0 2
65200: PUSH
65201: LD_VAR 0 3
65205: PUSH
65206: LD_VAR 0 4
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: PPUSH
65217: CALL 9406 0 3
65221: ST_TO_ADDR
// end ;
65222: LD_VAR 0 5
65226: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
65227: LD_INT 0
65229: PPUSH
// if not mc_bases [ base ] then
65230: LD_EXP 14
65234: PUSH
65235: LD_VAR 0 1
65239: ARRAY
65240: NOT
65241: IFFALSE 65245
// exit ;
65243: GO 65270
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
65245: LD_ADDR_EXP 51
65249: PUSH
65250: LD_EXP 51
65254: PPUSH
65255: LD_VAR 0 1
65259: PPUSH
65260: LD_VAR 0 2
65264: PPUSH
65265: CALL_OW 1
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 3
65274: RET
// export function MC_GetMinesField ( base ) ; begin
65275: LD_INT 0
65277: PPUSH
// result := mc_mines [ base ] ;
65278: LD_ADDR_VAR 0 2
65282: PUSH
65283: LD_EXP 27
65287: PUSH
65288: LD_VAR 0 1
65292: ARRAY
65293: ST_TO_ADDR
// end ;
65294: LD_VAR 0 2
65298: RET
// export function MC_GetProduceList ( base ) ; begin
65299: LD_INT 0
65301: PPUSH
// result := mc_produce [ base ] ;
65302: LD_ADDR_VAR 0 2
65306: PUSH
65307: LD_EXP 35
65311: PUSH
65312: LD_VAR 0 1
65316: ARRAY
65317: ST_TO_ADDR
// end ;
65318: LD_VAR 0 2
65322: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
65323: LD_INT 0
65325: PPUSH
65326: PPUSH
// if not mc_bases then
65327: LD_EXP 14
65331: NOT
65332: IFFALSE 65336
// exit ;
65334: GO 65401
// if mc_bases [ base ] then
65336: LD_EXP 14
65340: PUSH
65341: LD_VAR 0 1
65345: ARRAY
65346: IFFALSE 65401
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
65348: LD_ADDR_VAR 0 3
65352: PUSH
65353: LD_EXP 14
65357: PUSH
65358: LD_VAR 0 1
65362: ARRAY
65363: PPUSH
65364: LD_INT 30
65366: PUSH
65367: LD_VAR 0 2
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PPUSH
65376: CALL_OW 72
65380: ST_TO_ADDR
// if result then
65381: LD_VAR 0 3
65385: IFFALSE 65401
// result := result [ 1 ] ;
65387: LD_ADDR_VAR 0 3
65391: PUSH
65392: LD_VAR 0 3
65396: PUSH
65397: LD_INT 1
65399: ARRAY
65400: ST_TO_ADDR
// end ; end ;
65401: LD_VAR 0 3
65405: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
65406: LD_INT 0
65408: PPUSH
65409: PPUSH
// if not mc_bases then
65410: LD_EXP 14
65414: NOT
65415: IFFALSE 65419
// exit ;
65417: GO 65464
// if mc_bases [ base ] then
65419: LD_EXP 14
65423: PUSH
65424: LD_VAR 0 1
65428: ARRAY
65429: IFFALSE 65464
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
65431: LD_ADDR_VAR 0 3
65435: PUSH
65436: LD_EXP 14
65440: PUSH
65441: LD_VAR 0 1
65445: ARRAY
65446: PPUSH
65447: LD_INT 30
65449: PUSH
65450: LD_VAR 0 2
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PPUSH
65459: CALL_OW 72
65463: ST_TO_ADDR
// end ;
65464: LD_VAR 0 3
65468: RET
// export function MC_SetTame ( base , area ) ; begin
65469: LD_INT 0
65471: PPUSH
// if not mc_bases or not base then
65472: LD_EXP 14
65476: NOT
65477: PUSH
65478: LD_VAR 0 1
65482: NOT
65483: OR
65484: IFFALSE 65488
// exit ;
65486: GO 65513
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
65488: LD_ADDR_EXP 42
65492: PUSH
65493: LD_EXP 42
65497: PPUSH
65498: LD_VAR 0 1
65502: PPUSH
65503: LD_VAR 0 2
65507: PPUSH
65508: CALL_OW 1
65512: ST_TO_ADDR
// end ;
65513: LD_VAR 0 3
65517: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
65518: LD_INT 0
65520: PPUSH
65521: PPUSH
// if not mc_bases or not base then
65522: LD_EXP 14
65526: NOT
65527: PUSH
65528: LD_VAR 0 1
65532: NOT
65533: OR
65534: IFFALSE 65538
// exit ;
65536: GO 65640
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
65538: LD_ADDR_VAR 0 4
65542: PUSH
65543: LD_EXP 14
65547: PUSH
65548: LD_VAR 0 1
65552: ARRAY
65553: PPUSH
65554: LD_INT 30
65556: PUSH
65557: LD_VAR 0 2
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PPUSH
65566: CALL_OW 72
65570: ST_TO_ADDR
// if not tmp then
65571: LD_VAR 0 4
65575: NOT
65576: IFFALSE 65580
// exit ;
65578: GO 65640
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
65580: LD_ADDR_EXP 46
65584: PUSH
65585: LD_EXP 46
65589: PPUSH
65590: LD_VAR 0 1
65594: PPUSH
65595: LD_EXP 46
65599: PUSH
65600: LD_VAR 0 1
65604: ARRAY
65605: PPUSH
65606: LD_EXP 46
65610: PUSH
65611: LD_VAR 0 1
65615: ARRAY
65616: PUSH
65617: LD_INT 1
65619: PLUS
65620: PPUSH
65621: LD_VAR 0 4
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: PPUSH
65630: CALL_OW 2
65634: PPUSH
65635: CALL_OW 1
65639: ST_TO_ADDR
// end ;
65640: LD_VAR 0 3
65644: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
65645: LD_INT 0
65647: PPUSH
65648: PPUSH
// if not mc_bases or not base or not kinds then
65649: LD_EXP 14
65653: NOT
65654: PUSH
65655: LD_VAR 0 1
65659: NOT
65660: OR
65661: PUSH
65662: LD_VAR 0 2
65666: NOT
65667: OR
65668: IFFALSE 65672
// exit ;
65670: GO 65733
// for i in kinds do
65672: LD_ADDR_VAR 0 4
65676: PUSH
65677: LD_VAR 0 2
65681: PUSH
65682: FOR_IN
65683: IFFALSE 65731
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
65685: LD_ADDR_EXP 48
65689: PUSH
65690: LD_EXP 48
65694: PPUSH
65695: LD_VAR 0 1
65699: PUSH
65700: LD_EXP 48
65704: PUSH
65705: LD_VAR 0 1
65709: ARRAY
65710: PUSH
65711: LD_INT 1
65713: PLUS
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PPUSH
65719: LD_VAR 0 4
65723: PPUSH
65724: CALL 9406 0 3
65728: ST_TO_ADDR
65729: GO 65682
65731: POP
65732: POP
// end ;
65733: LD_VAR 0 3
65737: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
65738: LD_INT 0
65740: PPUSH
// if not mc_bases or not base or not areas then
65741: LD_EXP 14
65745: NOT
65746: PUSH
65747: LD_VAR 0 1
65751: NOT
65752: OR
65753: PUSH
65754: LD_VAR 0 2
65758: NOT
65759: OR
65760: IFFALSE 65764
// exit ;
65762: GO 65789
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
65764: LD_ADDR_EXP 32
65768: PUSH
65769: LD_EXP 32
65773: PPUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: LD_VAR 0 2
65783: PPUSH
65784: CALL_OW 1
65788: ST_TO_ADDR
// end ;
65789: LD_VAR 0 3
65793: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
65794: LD_INT 0
65796: PPUSH
// if not mc_bases or not base or not teleports_exit then
65797: LD_EXP 14
65801: NOT
65802: PUSH
65803: LD_VAR 0 1
65807: NOT
65808: OR
65809: PUSH
65810: LD_VAR 0 2
65814: NOT
65815: OR
65816: IFFALSE 65820
// exit ;
65818: GO 65845
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
65820: LD_ADDR_EXP 49
65824: PUSH
65825: LD_EXP 49
65829: PPUSH
65830: LD_VAR 0 1
65834: PPUSH
65835: LD_VAR 0 2
65839: PPUSH
65840: CALL_OW 1
65844: ST_TO_ADDR
// end ;
65845: LD_VAR 0 3
65849: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
65850: LD_INT 0
65852: PPUSH
65853: PPUSH
65854: PPUSH
// if not mc_bases or not base or not ext_list then
65855: LD_EXP 14
65859: NOT
65860: PUSH
65861: LD_VAR 0 1
65865: NOT
65866: OR
65867: PUSH
65868: LD_VAR 0 5
65872: NOT
65873: OR
65874: IFFALSE 65878
// exit ;
65876: GO 66051
// tmp := GetFacExtXYD ( x , y , d ) ;
65878: LD_ADDR_VAR 0 8
65882: PUSH
65883: LD_VAR 0 2
65887: PPUSH
65888: LD_VAR 0 3
65892: PPUSH
65893: LD_VAR 0 4
65897: PPUSH
65898: CALL 38085 0 3
65902: ST_TO_ADDR
// if not tmp then
65903: LD_VAR 0 8
65907: NOT
65908: IFFALSE 65912
// exit ;
65910: GO 66051
// for i in tmp do
65912: LD_ADDR_VAR 0 7
65916: PUSH
65917: LD_VAR 0 8
65921: PUSH
65922: FOR_IN
65923: IFFALSE 66049
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
65925: LD_ADDR_EXP 19
65929: PUSH
65930: LD_EXP 19
65934: PPUSH
65935: LD_VAR 0 1
65939: PPUSH
65940: LD_EXP 19
65944: PUSH
65945: LD_VAR 0 1
65949: ARRAY
65950: PPUSH
65951: LD_EXP 19
65955: PUSH
65956: LD_VAR 0 1
65960: ARRAY
65961: PUSH
65962: LD_INT 1
65964: PLUS
65965: PPUSH
65966: LD_VAR 0 5
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PUSH
65975: LD_VAR 0 7
65979: PUSH
65980: LD_INT 1
65982: ARRAY
65983: PUSH
65984: LD_VAR 0 7
65988: PUSH
65989: LD_INT 2
65991: ARRAY
65992: PUSH
65993: LD_VAR 0 7
65997: PUSH
65998: LD_INT 3
66000: ARRAY
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: PPUSH
66008: CALL_OW 2
66012: PPUSH
66013: CALL_OW 1
66017: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
66018: LD_ADDR_VAR 0 5
66022: PUSH
66023: LD_VAR 0 5
66027: PPUSH
66028: LD_INT 1
66030: PPUSH
66031: CALL_OW 3
66035: ST_TO_ADDR
// if not ext_list then
66036: LD_VAR 0 5
66040: NOT
66041: IFFALSE 66047
// exit ;
66043: POP
66044: POP
66045: GO 66051
// end ;
66047: GO 65922
66049: POP
66050: POP
// end ;
66051: LD_VAR 0 6
66055: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
66056: LD_INT 0
66058: PPUSH
// if not mc_bases or not base or not weapon_list then
66059: LD_EXP 14
66063: NOT
66064: PUSH
66065: LD_VAR 0 1
66069: NOT
66070: OR
66071: PUSH
66072: LD_VAR 0 2
66076: NOT
66077: OR
66078: IFFALSE 66082
// exit ;
66080: GO 66107
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
66082: LD_ADDR_EXP 53
66086: PUSH
66087: LD_EXP 53
66091: PPUSH
66092: LD_VAR 0 1
66096: PPUSH
66097: LD_VAR 0 2
66101: PPUSH
66102: CALL_OW 1
66106: ST_TO_ADDR
// end ;
66107: LD_VAR 0 3
66111: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
66112: LD_INT 0
66114: PPUSH
// if not mc_bases or not base or not tech_list then
66115: LD_EXP 14
66119: NOT
66120: PUSH
66121: LD_VAR 0 1
66125: NOT
66126: OR
66127: PUSH
66128: LD_VAR 0 2
66132: NOT
66133: OR
66134: IFFALSE 66138
// exit ;
66136: GO 66163
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
66138: LD_ADDR_EXP 41
66142: PUSH
66143: LD_EXP 41
66147: PPUSH
66148: LD_VAR 0 1
66152: PPUSH
66153: LD_VAR 0 2
66157: PPUSH
66158: CALL_OW 1
66162: ST_TO_ADDR
// end ;
66163: LD_VAR 0 3
66167: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
66168: LD_INT 0
66170: PPUSH
// if not mc_bases or not parking_area or not base then
66171: LD_EXP 14
66175: NOT
66176: PUSH
66177: LD_VAR 0 2
66181: NOT
66182: OR
66183: PUSH
66184: LD_VAR 0 1
66188: NOT
66189: OR
66190: IFFALSE 66194
// exit ;
66192: GO 66219
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
66194: LD_ADDR_EXP 38
66198: PUSH
66199: LD_EXP 38
66203: PPUSH
66204: LD_VAR 0 1
66208: PPUSH
66209: LD_VAR 0 2
66213: PPUSH
66214: CALL_OW 1
66218: ST_TO_ADDR
// end ;
66219: LD_VAR 0 3
66223: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
66224: LD_INT 0
66226: PPUSH
// if not mc_bases or not base or not scan_area then
66227: LD_EXP 14
66231: NOT
66232: PUSH
66233: LD_VAR 0 1
66237: NOT
66238: OR
66239: PUSH
66240: LD_VAR 0 2
66244: NOT
66245: OR
66246: IFFALSE 66250
// exit ;
66248: GO 66275
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
66250: LD_ADDR_EXP 39
66254: PUSH
66255: LD_EXP 39
66259: PPUSH
66260: LD_VAR 0 1
66264: PPUSH
66265: LD_VAR 0 2
66269: PPUSH
66270: CALL_OW 1
66274: ST_TO_ADDR
// end ;
66275: LD_VAR 0 3
66279: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
66280: LD_INT 0
66282: PPUSH
66283: PPUSH
// if not mc_bases or not base then
66284: LD_EXP 14
66288: NOT
66289: PUSH
66290: LD_VAR 0 1
66294: NOT
66295: OR
66296: IFFALSE 66300
// exit ;
66298: GO 66364
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
66300: LD_ADDR_VAR 0 3
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: LD_INT 2
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 4
66316: PUSH
66317: LD_INT 11
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
66327: LD_ADDR_EXP 41
66331: PUSH
66332: LD_EXP 41
66336: PPUSH
66337: LD_VAR 0 1
66341: PPUSH
66342: LD_EXP 41
66346: PUSH
66347: LD_VAR 0 1
66351: ARRAY
66352: PUSH
66353: LD_VAR 0 3
66357: DIFF
66358: PPUSH
66359: CALL_OW 1
66363: ST_TO_ADDR
// end ;
66364: LD_VAR 0 2
66368: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
66369: LD_INT 0
66371: PPUSH
// result := mc_vehicles [ base ] ;
66372: LD_ADDR_VAR 0 3
66376: PUSH
66377: LD_EXP 33
66381: PUSH
66382: LD_VAR 0 1
66386: ARRAY
66387: ST_TO_ADDR
// if onlyCombat then
66388: LD_VAR 0 2
66392: IFFALSE 66557
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
66394: LD_ADDR_VAR 0 3
66398: PUSH
66399: LD_VAR 0 3
66403: PUSH
66404: LD_VAR 0 3
66408: PPUSH
66409: LD_INT 2
66411: PUSH
66412: LD_INT 34
66414: PUSH
66415: LD_INT 12
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 34
66424: PUSH
66425: LD_INT 51
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 34
66434: PUSH
66435: LD_EXP 58
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 34
66446: PUSH
66447: LD_INT 32
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 34
66456: PUSH
66457: LD_INT 13
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 34
66466: PUSH
66467: LD_INT 52
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 34
66476: PUSH
66477: LD_INT 14
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 34
66486: PUSH
66487: LD_INT 53
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 34
66496: PUSH
66497: LD_EXP 57
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 34
66508: PUSH
66509: LD_INT 31
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 34
66518: PUSH
66519: LD_INT 48
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 34
66528: PUSH
66529: LD_INT 8
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: PPUSH
66551: CALL_OW 72
66555: DIFF
66556: ST_TO_ADDR
// end ; end_of_file
66557: LD_VAR 0 3
66561: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
66562: LD_INT 0
66564: PPUSH
66565: PPUSH
66566: PPUSH
// if not mc_bases or not skirmish then
66567: LD_EXP 14
66571: NOT
66572: PUSH
66573: LD_EXP 12
66577: NOT
66578: OR
66579: IFFALSE 66583
// exit ;
66581: GO 66748
// for i = 1 to mc_bases do
66583: LD_ADDR_VAR 0 4
66587: PUSH
66588: DOUBLE
66589: LD_INT 1
66591: DEC
66592: ST_TO_ADDR
66593: LD_EXP 14
66597: PUSH
66598: FOR_TO
66599: IFFALSE 66746
// begin if sci in mc_bases [ i ] then
66601: LD_VAR 0 2
66605: PUSH
66606: LD_EXP 14
66610: PUSH
66611: LD_VAR 0 4
66615: ARRAY
66616: IN
66617: IFFALSE 66744
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
66619: LD_ADDR_EXP 43
66623: PUSH
66624: LD_EXP 43
66628: PPUSH
66629: LD_VAR 0 4
66633: PUSH
66634: LD_EXP 43
66638: PUSH
66639: LD_VAR 0 4
66643: ARRAY
66644: PUSH
66645: LD_INT 1
66647: PLUS
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PPUSH
66653: LD_VAR 0 1
66657: PPUSH
66658: CALL 9406 0 3
66662: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
66663: LD_ADDR_VAR 0 5
66667: PUSH
66668: LD_EXP 14
66672: PUSH
66673: LD_VAR 0 4
66677: ARRAY
66678: PPUSH
66679: LD_INT 2
66681: PUSH
66682: LD_INT 30
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 30
66694: PUSH
66695: LD_INT 1
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: PPUSH
66707: CALL_OW 72
66711: PPUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: CALL_OW 74
66721: ST_TO_ADDR
// if tmp then
66722: LD_VAR 0 5
66726: IFFALSE 66742
// ComStandNearbyBuilding ( ape , tmp ) ;
66728: LD_VAR 0 1
66732: PPUSH
66733: LD_VAR 0 5
66737: PPUSH
66738: CALL 6020 0 2
// break ;
66742: GO 66746
// end ; end ;
66744: GO 66598
66746: POP
66747: POP
// end ;
66748: LD_VAR 0 3
66752: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
66753: LD_INT 0
66755: PPUSH
66756: PPUSH
66757: PPUSH
// if not mc_bases or not skirmish then
66758: LD_EXP 14
66762: NOT
66763: PUSH
66764: LD_EXP 12
66768: NOT
66769: OR
66770: IFFALSE 66774
// exit ;
66772: GO 66863
// for i = 1 to mc_bases do
66774: LD_ADDR_VAR 0 4
66778: PUSH
66779: DOUBLE
66780: LD_INT 1
66782: DEC
66783: ST_TO_ADDR
66784: LD_EXP 14
66788: PUSH
66789: FOR_TO
66790: IFFALSE 66861
// begin if building in mc_busy_turret_list [ i ] then
66792: LD_VAR 0 1
66796: PUSH
66797: LD_EXP 24
66801: PUSH
66802: LD_VAR 0 4
66806: ARRAY
66807: IN
66808: IFFALSE 66859
// begin tmp := mc_busy_turret_list [ i ] diff building ;
66810: LD_ADDR_VAR 0 5
66814: PUSH
66815: LD_EXP 24
66819: PUSH
66820: LD_VAR 0 4
66824: ARRAY
66825: PUSH
66826: LD_VAR 0 1
66830: DIFF
66831: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
66832: LD_ADDR_EXP 24
66836: PUSH
66837: LD_EXP 24
66841: PPUSH
66842: LD_VAR 0 4
66846: PPUSH
66847: LD_VAR 0 5
66851: PPUSH
66852: CALL_OW 1
66856: ST_TO_ADDR
// break ;
66857: GO 66861
// end ; end ;
66859: GO 66789
66861: POP
66862: POP
// end ;
66863: LD_VAR 0 3
66867: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
66868: LD_INT 0
66870: PPUSH
66871: PPUSH
66872: PPUSH
// if not mc_bases or not skirmish then
66873: LD_EXP 14
66877: NOT
66878: PUSH
66879: LD_EXP 12
66883: NOT
66884: OR
66885: IFFALSE 66889
// exit ;
66887: GO 67088
// for i = 1 to mc_bases do
66889: LD_ADDR_VAR 0 5
66893: PUSH
66894: DOUBLE
66895: LD_INT 1
66897: DEC
66898: ST_TO_ADDR
66899: LD_EXP 14
66903: PUSH
66904: FOR_TO
66905: IFFALSE 67086
// if building in mc_bases [ i ] then
66907: LD_VAR 0 1
66911: PUSH
66912: LD_EXP 14
66916: PUSH
66917: LD_VAR 0 5
66921: ARRAY
66922: IN
66923: IFFALSE 67084
// begin tmp := mc_bases [ i ] diff building ;
66925: LD_ADDR_VAR 0 6
66929: PUSH
66930: LD_EXP 14
66934: PUSH
66935: LD_VAR 0 5
66939: ARRAY
66940: PUSH
66941: LD_VAR 0 1
66945: DIFF
66946: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
66947: LD_ADDR_EXP 14
66951: PUSH
66952: LD_EXP 14
66956: PPUSH
66957: LD_VAR 0 5
66961: PPUSH
66962: LD_VAR 0 6
66966: PPUSH
66967: CALL_OW 1
66971: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
66972: LD_VAR 0 1
66976: PUSH
66977: LD_EXP 22
66981: PUSH
66982: LD_VAR 0 5
66986: ARRAY
66987: IN
66988: IFFALSE 67027
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
66990: LD_ADDR_EXP 22
66994: PUSH
66995: LD_EXP 22
66999: PPUSH
67000: LD_VAR 0 5
67004: PPUSH
67005: LD_EXP 22
67009: PUSH
67010: LD_VAR 0 5
67014: ARRAY
67015: PUSH
67016: LD_VAR 0 1
67020: DIFF
67021: PPUSH
67022: CALL_OW 1
67026: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
67027: LD_VAR 0 1
67031: PUSH
67032: LD_EXP 23
67036: PUSH
67037: LD_VAR 0 5
67041: ARRAY
67042: IN
67043: IFFALSE 67082
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
67045: LD_ADDR_EXP 23
67049: PUSH
67050: LD_EXP 23
67054: PPUSH
67055: LD_VAR 0 5
67059: PPUSH
67060: LD_EXP 23
67064: PUSH
67065: LD_VAR 0 5
67069: ARRAY
67070: PUSH
67071: LD_VAR 0 1
67075: DIFF
67076: PPUSH
67077: CALL_OW 1
67081: ST_TO_ADDR
// break ;
67082: GO 67086
// end ;
67084: GO 66904
67086: POP
67087: POP
// end ;
67088: LD_VAR 0 4
67092: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
67093: LD_INT 0
67095: PPUSH
67096: PPUSH
67097: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
67098: LD_EXP 14
67102: NOT
67103: PUSH
67104: LD_EXP 12
67108: NOT
67109: OR
67110: PUSH
67111: LD_VAR 0 3
67115: PUSH
67116: LD_EXP 40
67120: IN
67121: NOT
67122: OR
67123: IFFALSE 67127
// exit ;
67125: GO 67250
// for i = 1 to mc_vehicles do
67127: LD_ADDR_VAR 0 6
67131: PUSH
67132: DOUBLE
67133: LD_INT 1
67135: DEC
67136: ST_TO_ADDR
67137: LD_EXP 33
67141: PUSH
67142: FOR_TO
67143: IFFALSE 67248
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
67145: LD_VAR 0 2
67149: PUSH
67150: LD_EXP 33
67154: PUSH
67155: LD_VAR 0 6
67159: ARRAY
67160: IN
67161: PUSH
67162: LD_VAR 0 1
67166: PUSH
67167: LD_EXP 33
67171: PUSH
67172: LD_VAR 0 6
67176: ARRAY
67177: IN
67178: OR
67179: IFFALSE 67246
// begin tmp := mc_vehicles [ i ] diff old ;
67181: LD_ADDR_VAR 0 7
67185: PUSH
67186: LD_EXP 33
67190: PUSH
67191: LD_VAR 0 6
67195: ARRAY
67196: PUSH
67197: LD_VAR 0 2
67201: DIFF
67202: ST_TO_ADDR
// tmp := tmp diff new ;
67203: LD_ADDR_VAR 0 7
67207: PUSH
67208: LD_VAR 0 7
67212: PUSH
67213: LD_VAR 0 1
67217: DIFF
67218: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
67219: LD_ADDR_EXP 33
67223: PUSH
67224: LD_EXP 33
67228: PPUSH
67229: LD_VAR 0 6
67233: PPUSH
67234: LD_VAR 0 7
67238: PPUSH
67239: CALL_OW 1
67243: ST_TO_ADDR
// break ;
67244: GO 67248
// end ;
67246: GO 67142
67248: POP
67249: POP
// end ;
67250: LD_VAR 0 5
67254: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
67259: PPUSH
67260: PPUSH
// if not mc_bases or not skirmish then
67261: LD_EXP 14
67265: NOT
67266: PUSH
67267: LD_EXP 12
67271: NOT
67272: OR
67273: IFFALSE 67277
// exit ;
67275: GO 67654
// side := GetSide ( vehicle ) ;
67277: LD_ADDR_VAR 0 5
67281: PUSH
67282: LD_VAR 0 1
67286: PPUSH
67287: CALL_OW 255
67291: ST_TO_ADDR
// for i = 1 to mc_bases do
67292: LD_ADDR_VAR 0 4
67296: PUSH
67297: DOUBLE
67298: LD_INT 1
67300: DEC
67301: ST_TO_ADDR
67302: LD_EXP 14
67306: PUSH
67307: FOR_TO
67308: IFFALSE 67652
// begin if factory in mc_bases [ i ] then
67310: LD_VAR 0 2
67314: PUSH
67315: LD_EXP 14
67319: PUSH
67320: LD_VAR 0 4
67324: ARRAY
67325: IN
67326: IFFALSE 67650
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
67328: LD_EXP 36
67332: PUSH
67333: LD_VAR 0 4
67337: ARRAY
67338: PUSH
67339: LD_EXP 25
67343: PUSH
67344: LD_VAR 0 4
67348: ARRAY
67349: LESS
67350: PUSH
67351: LD_VAR 0 1
67355: PPUSH
67356: CALL_OW 264
67360: PUSH
67361: LD_INT 31
67363: PUSH
67364: LD_INT 32
67366: PUSH
67367: LD_INT 51
67369: PUSH
67370: LD_EXP 58
67374: PUSH
67375: LD_INT 12
67377: PUSH
67378: LD_INT 30
67380: PUSH
67381: LD_EXP 57
67385: PUSH
67386: LD_INT 11
67388: PUSH
67389: LD_INT 53
67391: PUSH
67392: LD_INT 14
67394: PUSH
67395: LD_EXP 61
67399: PUSH
67400: LD_INT 29
67402: PUSH
67403: LD_EXP 59
67407: PUSH
67408: LD_INT 13
67410: PUSH
67411: LD_INT 52
67413: PUSH
67414: LD_INT 48
67416: PUSH
67417: LD_INT 8
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: IN
67439: NOT
67440: AND
67441: IFFALSE 67489
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
67443: LD_ADDR_EXP 36
67447: PUSH
67448: LD_EXP 36
67452: PPUSH
67453: LD_VAR 0 4
67457: PUSH
67458: LD_EXP 36
67462: PUSH
67463: LD_VAR 0 4
67467: ARRAY
67468: PUSH
67469: LD_INT 1
67471: PLUS
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PPUSH
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL 9406 0 3
67486: ST_TO_ADDR
67487: GO 67533
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
67489: LD_ADDR_EXP 33
67493: PUSH
67494: LD_EXP 33
67498: PPUSH
67499: LD_VAR 0 4
67503: PUSH
67504: LD_EXP 33
67508: PUSH
67509: LD_VAR 0 4
67513: ARRAY
67514: PUSH
67515: LD_INT 1
67517: PLUS
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PPUSH
67523: LD_VAR 0 1
67527: PPUSH
67528: CALL 9406 0 3
67532: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
67533: LD_VAR 0 1
67537: PPUSH
67538: CALL_OW 263
67542: PUSH
67543: LD_INT 2
67545: EQUAL
67546: IFFALSE 67566
// begin repeat wait ( 0 0$1 ) ;
67548: LD_INT 35
67550: PPUSH
67551: CALL_OW 67
// until IsControledBy ( vehicle ) ;
67555: LD_VAR 0 1
67559: PPUSH
67560: CALL_OW 312
67564: IFFALSE 67548
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
67566: LD_VAR 0 1
67570: PPUSH
67571: LD_EXP 38
67575: PUSH
67576: LD_VAR 0 4
67580: ARRAY
67581: PPUSH
67582: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
67586: LD_VAR 0 1
67590: PPUSH
67591: CALL_OW 263
67595: PUSH
67596: LD_INT 1
67598: NONEQUAL
67599: IFFALSE 67603
// break ;
67601: GO 67652
// repeat wait ( 0 0$1 ) ;
67603: LD_INT 35
67605: PPUSH
67606: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
67610: LD_VAR 0 1
67614: PPUSH
67615: LD_EXP 38
67619: PUSH
67620: LD_VAR 0 4
67624: ARRAY
67625: PPUSH
67626: CALL_OW 308
67630: IFFALSE 67603
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
67632: LD_VAR 0 1
67636: PPUSH
67637: CALL_OW 311
67641: PPUSH
67642: CALL_OW 121
// exit ;
67646: POP
67647: POP
67648: GO 67654
// end ; end ;
67650: GO 67307
67652: POP
67653: POP
// end ;
67654: LD_VAR 0 3
67658: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
67659: LD_INT 0
67661: PPUSH
67662: PPUSH
67663: PPUSH
67664: PPUSH
// if not mc_bases or not skirmish then
67665: LD_EXP 14
67669: NOT
67670: PUSH
67671: LD_EXP 12
67675: NOT
67676: OR
67677: IFFALSE 67681
// exit ;
67679: GO 68034
// repeat wait ( 0 0$1 ) ;
67681: LD_INT 35
67683: PPUSH
67684: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
67688: LD_VAR 0 2
67692: PPUSH
67693: LD_VAR 0 3
67697: PPUSH
67698: CALL_OW 284
67702: IFFALSE 67681
// if GetResourceTypeXY ( x , y ) = mat_artefact then
67704: LD_VAR 0 2
67708: PPUSH
67709: LD_VAR 0 3
67713: PPUSH
67714: CALL_OW 283
67718: PUSH
67719: LD_INT 4
67721: EQUAL
67722: IFFALSE 67726
// exit ;
67724: GO 68034
// for i = 1 to mc_bases do
67726: LD_ADDR_VAR 0 7
67730: PUSH
67731: DOUBLE
67732: LD_INT 1
67734: DEC
67735: ST_TO_ADDR
67736: LD_EXP 14
67740: PUSH
67741: FOR_TO
67742: IFFALSE 68032
// begin if mc_crates_area [ i ] then
67744: LD_EXP 32
67748: PUSH
67749: LD_VAR 0 7
67753: ARRAY
67754: IFFALSE 67865
// for j in mc_crates_area [ i ] do
67756: LD_ADDR_VAR 0 8
67760: PUSH
67761: LD_EXP 32
67765: PUSH
67766: LD_VAR 0 7
67770: ARRAY
67771: PUSH
67772: FOR_IN
67773: IFFALSE 67863
// if InArea ( x , y , j ) then
67775: LD_VAR 0 2
67779: PPUSH
67780: LD_VAR 0 3
67784: PPUSH
67785: LD_VAR 0 8
67789: PPUSH
67790: CALL_OW 309
67794: IFFALSE 67861
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
67796: LD_ADDR_EXP 30
67800: PUSH
67801: LD_EXP 30
67805: PPUSH
67806: LD_VAR 0 7
67810: PUSH
67811: LD_EXP 30
67815: PUSH
67816: LD_VAR 0 7
67820: ARRAY
67821: PUSH
67822: LD_INT 1
67824: PLUS
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PPUSH
67830: LD_VAR 0 4
67834: PUSH
67835: LD_VAR 0 2
67839: PUSH
67840: LD_VAR 0 3
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: PPUSH
67850: CALL 9406 0 3
67854: ST_TO_ADDR
// exit ;
67855: POP
67856: POP
67857: POP
67858: POP
67859: GO 68034
// end ;
67861: GO 67772
67863: POP
67864: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67865: LD_ADDR_VAR 0 9
67869: PUSH
67870: LD_EXP 14
67874: PUSH
67875: LD_VAR 0 7
67879: ARRAY
67880: PPUSH
67881: LD_INT 2
67883: PUSH
67884: LD_INT 30
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 30
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: PPUSH
67909: CALL_OW 72
67913: ST_TO_ADDR
// if not depot then
67914: LD_VAR 0 9
67918: NOT
67919: IFFALSE 67923
// continue ;
67921: GO 67741
// for j in depot do
67923: LD_ADDR_VAR 0 8
67927: PUSH
67928: LD_VAR 0 9
67932: PUSH
67933: FOR_IN
67934: IFFALSE 68028
// if GetDistUnitXY ( j , x , y ) < 30 then
67936: LD_VAR 0 8
67940: PPUSH
67941: LD_VAR 0 2
67945: PPUSH
67946: LD_VAR 0 3
67950: PPUSH
67951: CALL_OW 297
67955: PUSH
67956: LD_INT 30
67958: LESS
67959: IFFALSE 68026
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
67961: LD_ADDR_EXP 30
67965: PUSH
67966: LD_EXP 30
67970: PPUSH
67971: LD_VAR 0 7
67975: PUSH
67976: LD_EXP 30
67980: PUSH
67981: LD_VAR 0 7
67985: ARRAY
67986: PUSH
67987: LD_INT 1
67989: PLUS
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PPUSH
67995: LD_VAR 0 4
67999: PUSH
68000: LD_VAR 0 2
68004: PUSH
68005: LD_VAR 0 3
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: LIST
68014: PPUSH
68015: CALL 9406 0 3
68019: ST_TO_ADDR
// exit ;
68020: POP
68021: POP
68022: POP
68023: POP
68024: GO 68034
// end ;
68026: GO 67933
68028: POP
68029: POP
// end ;
68030: GO 67741
68032: POP
68033: POP
// end ;
68034: LD_VAR 0 6
68038: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
// if not mc_bases or not skirmish then
68045: LD_EXP 14
68049: NOT
68050: PUSH
68051: LD_EXP 12
68055: NOT
68056: OR
68057: IFFALSE 68061
// exit ;
68059: GO 68338
// side := GetSide ( lab ) ;
68061: LD_ADDR_VAR 0 4
68065: PUSH
68066: LD_VAR 0 2
68070: PPUSH
68071: CALL_OW 255
68075: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
68076: LD_VAR 0 4
68080: PUSH
68081: LD_EXP 40
68085: IN
68086: NOT
68087: PUSH
68088: LD_EXP 41
68092: NOT
68093: OR
68094: PUSH
68095: LD_EXP 14
68099: NOT
68100: OR
68101: IFFALSE 68105
// exit ;
68103: GO 68338
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
68105: LD_ADDR_EXP 41
68109: PUSH
68110: LD_EXP 41
68114: PPUSH
68115: LD_VAR 0 4
68119: PPUSH
68120: LD_EXP 41
68124: PUSH
68125: LD_VAR 0 4
68129: ARRAY
68130: PUSH
68131: LD_VAR 0 1
68135: DIFF
68136: PPUSH
68137: CALL_OW 1
68141: ST_TO_ADDR
// for i = 1 to mc_bases do
68142: LD_ADDR_VAR 0 5
68146: PUSH
68147: DOUBLE
68148: LD_INT 1
68150: DEC
68151: ST_TO_ADDR
68152: LD_EXP 14
68156: PUSH
68157: FOR_TO
68158: IFFALSE 68336
// begin if lab in mc_bases [ i ] then
68160: LD_VAR 0 2
68164: PUSH
68165: LD_EXP 14
68169: PUSH
68170: LD_VAR 0 5
68174: ARRAY
68175: IN
68176: IFFALSE 68334
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
68178: LD_VAR 0 1
68182: PUSH
68183: LD_INT 11
68185: PUSH
68186: LD_INT 4
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: LD_INT 2
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: IN
68201: PUSH
68202: LD_EXP 44
68206: PUSH
68207: LD_VAR 0 5
68211: ARRAY
68212: AND
68213: IFFALSE 68334
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
68215: LD_ADDR_VAR 0 6
68219: PUSH
68220: LD_EXP 44
68224: PUSH
68225: LD_VAR 0 5
68229: ARRAY
68230: PUSH
68231: LD_INT 1
68233: ARRAY
68234: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
68235: LD_ADDR_EXP 44
68239: PUSH
68240: LD_EXP 44
68244: PPUSH
68245: LD_VAR 0 5
68249: PPUSH
68250: EMPTY
68251: PPUSH
68252: CALL_OW 1
68256: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
68257: LD_VAR 0 6
68261: PPUSH
68262: LD_INT 0
68264: PPUSH
68265: CALL_OW 109
// ComExitBuilding ( tmp ) ;
68269: LD_VAR 0 6
68273: PPUSH
68274: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
68278: LD_ADDR_EXP 43
68282: PUSH
68283: LD_EXP 43
68287: PPUSH
68288: LD_VAR 0 5
68292: PPUSH
68293: LD_EXP 43
68297: PUSH
68298: LD_VAR 0 5
68302: ARRAY
68303: PPUSH
68304: LD_INT 1
68306: PPUSH
68307: LD_VAR 0 6
68311: PPUSH
68312: CALL_OW 2
68316: PPUSH
68317: CALL_OW 1
68321: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
68322: LD_VAR 0 5
68326: PPUSH
68327: LD_INT 112
68329: PPUSH
68330: CALL 45350 0 2
// end ; end ; end ;
68334: GO 68157
68336: POP
68337: POP
// end ;
68338: LD_VAR 0 3
68342: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
68343: LD_INT 0
68345: PPUSH
68346: PPUSH
68347: PPUSH
68348: PPUSH
68349: PPUSH
68350: PPUSH
68351: PPUSH
68352: PPUSH
// if not mc_bases or not skirmish then
68353: LD_EXP 14
68357: NOT
68358: PUSH
68359: LD_EXP 12
68363: NOT
68364: OR
68365: IFFALSE 68369
// exit ;
68367: GO 69740
// for i = 1 to mc_bases do
68369: LD_ADDR_VAR 0 3
68373: PUSH
68374: DOUBLE
68375: LD_INT 1
68377: DEC
68378: ST_TO_ADDR
68379: LD_EXP 14
68383: PUSH
68384: FOR_TO
68385: IFFALSE 69738
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
68387: LD_VAR 0 1
68391: PUSH
68392: LD_EXP 14
68396: PUSH
68397: LD_VAR 0 3
68401: ARRAY
68402: IN
68403: PUSH
68404: LD_VAR 0 1
68408: PUSH
68409: LD_EXP 21
68413: PUSH
68414: LD_VAR 0 3
68418: ARRAY
68419: IN
68420: OR
68421: PUSH
68422: LD_VAR 0 1
68426: PUSH
68427: LD_EXP 36
68431: PUSH
68432: LD_VAR 0 3
68436: ARRAY
68437: IN
68438: OR
68439: PUSH
68440: LD_VAR 0 1
68444: PUSH
68445: LD_EXP 33
68449: PUSH
68450: LD_VAR 0 3
68454: ARRAY
68455: IN
68456: OR
68457: PUSH
68458: LD_VAR 0 1
68462: PUSH
68463: LD_EXP 43
68467: PUSH
68468: LD_VAR 0 3
68472: ARRAY
68473: IN
68474: OR
68475: PUSH
68476: LD_VAR 0 1
68480: PUSH
68481: LD_EXP 44
68485: PUSH
68486: LD_VAR 0 3
68490: ARRAY
68491: IN
68492: OR
68493: IFFALSE 69736
// begin if un in mc_ape [ i ] then
68495: LD_VAR 0 1
68499: PUSH
68500: LD_EXP 43
68504: PUSH
68505: LD_VAR 0 3
68509: ARRAY
68510: IN
68511: IFFALSE 68550
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
68513: LD_ADDR_EXP 43
68517: PUSH
68518: LD_EXP 43
68522: PPUSH
68523: LD_VAR 0 3
68527: PPUSH
68528: LD_EXP 43
68532: PUSH
68533: LD_VAR 0 3
68537: ARRAY
68538: PUSH
68539: LD_VAR 0 1
68543: DIFF
68544: PPUSH
68545: CALL_OW 1
68549: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
68550: LD_VAR 0 1
68554: PUSH
68555: LD_EXP 44
68559: PUSH
68560: LD_VAR 0 3
68564: ARRAY
68565: IN
68566: IFFALSE 68590
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
68568: LD_ADDR_EXP 44
68572: PUSH
68573: LD_EXP 44
68577: PPUSH
68578: LD_VAR 0 3
68582: PPUSH
68583: EMPTY
68584: PPUSH
68585: CALL_OW 1
68589: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
68590: LD_VAR 0 1
68594: PPUSH
68595: CALL_OW 247
68599: PUSH
68600: LD_INT 2
68602: EQUAL
68603: PUSH
68604: LD_VAR 0 1
68608: PPUSH
68609: CALL_OW 110
68613: PUSH
68614: LD_INT 20
68616: EQUAL
68617: PUSH
68618: LD_VAR 0 1
68622: PUSH
68623: LD_EXP 36
68627: PUSH
68628: LD_VAR 0 3
68632: ARRAY
68633: IN
68634: OR
68635: PUSH
68636: LD_VAR 0 1
68640: PPUSH
68641: CALL_OW 264
68645: PUSH
68646: LD_INT 12
68648: PUSH
68649: LD_INT 51
68651: PUSH
68652: LD_EXP 58
68656: PUSH
68657: LD_INT 32
68659: PUSH
68660: LD_INT 13
68662: PUSH
68663: LD_INT 52
68665: PUSH
68666: LD_INT 31
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: IN
68678: OR
68679: AND
68680: IFFALSE 68988
// begin if un in mc_defender [ i ] then
68682: LD_VAR 0 1
68686: PUSH
68687: LD_EXP 36
68691: PUSH
68692: LD_VAR 0 3
68696: ARRAY
68697: IN
68698: IFFALSE 68737
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
68700: LD_ADDR_EXP 36
68704: PUSH
68705: LD_EXP 36
68709: PPUSH
68710: LD_VAR 0 3
68714: PPUSH
68715: LD_EXP 36
68719: PUSH
68720: LD_VAR 0 3
68724: ARRAY
68725: PUSH
68726: LD_VAR 0 1
68730: DIFF
68731: PPUSH
68732: CALL_OW 1
68736: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
68737: LD_ADDR_VAR 0 8
68741: PUSH
68742: LD_VAR 0 3
68746: PPUSH
68747: LD_INT 3
68749: PPUSH
68750: CALL 65406 0 2
68754: ST_TO_ADDR
// if fac then
68755: LD_VAR 0 8
68759: IFFALSE 68988
// begin for j in fac do
68761: LD_ADDR_VAR 0 4
68765: PUSH
68766: LD_VAR 0 8
68770: PUSH
68771: FOR_IN
68772: IFFALSE 68986
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
68774: LD_ADDR_VAR 0 9
68778: PUSH
68779: LD_VAR 0 8
68783: PPUSH
68784: LD_VAR 0 1
68788: PPUSH
68789: CALL_OW 265
68793: PPUSH
68794: LD_VAR 0 1
68798: PPUSH
68799: CALL_OW 262
68803: PPUSH
68804: LD_VAR 0 1
68808: PPUSH
68809: CALL_OW 263
68813: PPUSH
68814: LD_VAR 0 1
68818: PPUSH
68819: CALL_OW 264
68823: PPUSH
68824: CALL 6938 0 5
68828: ST_TO_ADDR
// if components then
68829: LD_VAR 0 9
68833: IFFALSE 68984
// begin if GetWeapon ( un ) = ar_control_tower then
68835: LD_VAR 0 1
68839: PPUSH
68840: CALL_OW 264
68844: PUSH
68845: LD_INT 31
68847: EQUAL
68848: IFFALSE 68965
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
68850: LD_VAR 0 1
68854: PPUSH
68855: CALL_OW 311
68859: PPUSH
68860: LD_INT 0
68862: PPUSH
68863: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
68867: LD_ADDR_EXP 54
68871: PUSH
68872: LD_EXP 54
68876: PPUSH
68877: LD_VAR 0 3
68881: PPUSH
68882: LD_EXP 54
68886: PUSH
68887: LD_VAR 0 3
68891: ARRAY
68892: PUSH
68893: LD_VAR 0 1
68897: PPUSH
68898: CALL_OW 311
68902: DIFF
68903: PPUSH
68904: CALL_OW 1
68908: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
68909: LD_ADDR_VAR 0 7
68913: PUSH
68914: LD_EXP 35
68918: PUSH
68919: LD_VAR 0 3
68923: ARRAY
68924: PPUSH
68925: LD_INT 1
68927: PPUSH
68928: LD_VAR 0 9
68932: PPUSH
68933: CALL_OW 2
68937: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68938: LD_ADDR_EXP 35
68942: PUSH
68943: LD_EXP 35
68947: PPUSH
68948: LD_VAR 0 3
68952: PPUSH
68953: LD_VAR 0 7
68957: PPUSH
68958: CALL_OW 1
68962: ST_TO_ADDR
// end else
68963: GO 68982
// MC_InsertProduceList ( i , [ components ] ) ;
68965: LD_VAR 0 3
68969: PPUSH
68970: LD_VAR 0 9
68974: PUSH
68975: EMPTY
68976: LIST
68977: PPUSH
68978: CALL 64951 0 2
// break ;
68982: GO 68986
// end ; end ;
68984: GO 68771
68986: POP
68987: POP
// end ; end ; if GetType ( un ) = unit_building then
68988: LD_VAR 0 1
68992: PPUSH
68993: CALL_OW 247
68997: PUSH
68998: LD_INT 3
69000: EQUAL
69001: IFFALSE 69404
// begin btype := GetBType ( un ) ;
69003: LD_ADDR_VAR 0 5
69007: PUSH
69008: LD_VAR 0 1
69012: PPUSH
69013: CALL_OW 266
69017: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
69018: LD_VAR 0 5
69022: PUSH
69023: LD_INT 29
69025: PUSH
69026: LD_INT 30
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: IN
69033: IFFALSE 69106
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
69035: LD_VAR 0 1
69039: PPUSH
69040: CALL_OW 250
69044: PPUSH
69045: LD_VAR 0 1
69049: PPUSH
69050: CALL_OW 251
69054: PPUSH
69055: LD_VAR 0 1
69059: PPUSH
69060: CALL_OW 255
69064: PPUSH
69065: CALL_OW 440
69069: NOT
69070: IFFALSE 69106
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
69072: LD_VAR 0 1
69076: PPUSH
69077: CALL_OW 250
69081: PPUSH
69082: LD_VAR 0 1
69086: PPUSH
69087: CALL_OW 251
69091: PPUSH
69092: LD_VAR 0 1
69096: PPUSH
69097: CALL_OW 255
69101: PPUSH
69102: CALL_OW 441
// end ; if btype = b_warehouse then
69106: LD_VAR 0 5
69110: PUSH
69111: LD_INT 1
69113: EQUAL
69114: IFFALSE 69132
// begin btype := b_depot ;
69116: LD_ADDR_VAR 0 5
69120: PUSH
69121: LD_INT 0
69123: ST_TO_ADDR
// pos := 1 ;
69124: LD_ADDR_VAR 0 6
69128: PUSH
69129: LD_INT 1
69131: ST_TO_ADDR
// end ; if btype = b_factory then
69132: LD_VAR 0 5
69136: PUSH
69137: LD_INT 3
69139: EQUAL
69140: IFFALSE 69158
// begin btype := b_workshop ;
69142: LD_ADDR_VAR 0 5
69146: PUSH
69147: LD_INT 2
69149: ST_TO_ADDR
// pos := 1 ;
69150: LD_ADDR_VAR 0 6
69154: PUSH
69155: LD_INT 1
69157: ST_TO_ADDR
// end ; if btype = b_barracks then
69158: LD_VAR 0 5
69162: PUSH
69163: LD_INT 5
69165: EQUAL
69166: IFFALSE 69176
// btype := b_armoury ;
69168: LD_ADDR_VAR 0 5
69172: PUSH
69173: LD_INT 4
69175: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
69176: LD_VAR 0 5
69180: PUSH
69181: LD_INT 7
69183: PUSH
69184: LD_INT 8
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: IN
69191: IFFALSE 69201
// btype := b_lab ;
69193: LD_ADDR_VAR 0 5
69197: PUSH
69198: LD_INT 6
69200: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
69201: LD_ADDR_EXP 19
69205: PUSH
69206: LD_EXP 19
69210: PPUSH
69211: LD_VAR 0 3
69215: PUSH
69216: LD_EXP 19
69220: PUSH
69221: LD_VAR 0 3
69225: ARRAY
69226: PUSH
69227: LD_INT 1
69229: PLUS
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PPUSH
69235: LD_VAR 0 5
69239: PUSH
69240: LD_VAR 0 1
69244: PPUSH
69245: CALL_OW 250
69249: PUSH
69250: LD_VAR 0 1
69254: PPUSH
69255: CALL_OW 251
69259: PUSH
69260: LD_VAR 0 1
69264: PPUSH
69265: CALL_OW 254
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: PPUSH
69276: CALL 9406 0 3
69280: ST_TO_ADDR
// if pos = 1 then
69281: LD_VAR 0 6
69285: PUSH
69286: LD_INT 1
69288: EQUAL
69289: IFFALSE 69404
// begin tmp := mc_build_list [ i ] ;
69291: LD_ADDR_VAR 0 7
69295: PUSH
69296: LD_EXP 19
69300: PUSH
69301: LD_VAR 0 3
69305: ARRAY
69306: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
69307: LD_VAR 0 7
69311: PPUSH
69312: LD_INT 2
69314: PUSH
69315: LD_INT 30
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 30
69327: PUSH
69328: LD_INT 1
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: PPUSH
69340: CALL_OW 72
69344: IFFALSE 69354
// pos := 2 ;
69346: LD_ADDR_VAR 0 6
69350: PUSH
69351: LD_INT 2
69353: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
69354: LD_ADDR_VAR 0 7
69358: PUSH
69359: LD_VAR 0 7
69363: PPUSH
69364: LD_VAR 0 6
69368: PPUSH
69369: LD_VAR 0 7
69373: PPUSH
69374: CALL 9732 0 3
69378: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
69379: LD_ADDR_EXP 19
69383: PUSH
69384: LD_EXP 19
69388: PPUSH
69389: LD_VAR 0 3
69393: PPUSH
69394: LD_VAR 0 7
69398: PPUSH
69399: CALL_OW 1
69403: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
69404: LD_VAR 0 1
69408: PUSH
69409: LD_EXP 14
69413: PUSH
69414: LD_VAR 0 3
69418: ARRAY
69419: IN
69420: IFFALSE 69459
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
69422: LD_ADDR_EXP 14
69426: PUSH
69427: LD_EXP 14
69431: PPUSH
69432: LD_VAR 0 3
69436: PPUSH
69437: LD_EXP 14
69441: PUSH
69442: LD_VAR 0 3
69446: ARRAY
69447: PUSH
69448: LD_VAR 0 1
69452: DIFF
69453: PPUSH
69454: CALL_OW 1
69458: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
69459: LD_VAR 0 1
69463: PUSH
69464: LD_EXP 21
69468: PUSH
69469: LD_VAR 0 3
69473: ARRAY
69474: IN
69475: IFFALSE 69514
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
69477: LD_ADDR_EXP 21
69481: PUSH
69482: LD_EXP 21
69486: PPUSH
69487: LD_VAR 0 3
69491: PPUSH
69492: LD_EXP 21
69496: PUSH
69497: LD_VAR 0 3
69501: ARRAY
69502: PUSH
69503: LD_VAR 0 1
69507: DIFF
69508: PPUSH
69509: CALL_OW 1
69513: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
69514: LD_VAR 0 1
69518: PUSH
69519: LD_EXP 33
69523: PUSH
69524: LD_VAR 0 3
69528: ARRAY
69529: IN
69530: IFFALSE 69569
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
69532: LD_ADDR_EXP 33
69536: PUSH
69537: LD_EXP 33
69541: PPUSH
69542: LD_VAR 0 3
69546: PPUSH
69547: LD_EXP 33
69551: PUSH
69552: LD_VAR 0 3
69556: ARRAY
69557: PUSH
69558: LD_VAR 0 1
69562: DIFF
69563: PPUSH
69564: CALL_OW 1
69568: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
69569: LD_VAR 0 1
69573: PUSH
69574: LD_EXP 36
69578: PUSH
69579: LD_VAR 0 3
69583: ARRAY
69584: IN
69585: IFFALSE 69624
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
69587: LD_ADDR_EXP 36
69591: PUSH
69592: LD_EXP 36
69596: PPUSH
69597: LD_VAR 0 3
69601: PPUSH
69602: LD_EXP 36
69606: PUSH
69607: LD_VAR 0 3
69611: ARRAY
69612: PUSH
69613: LD_VAR 0 1
69617: DIFF
69618: PPUSH
69619: CALL_OW 1
69623: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
69624: LD_VAR 0 1
69628: PUSH
69629: LD_EXP 23
69633: PUSH
69634: LD_VAR 0 3
69638: ARRAY
69639: IN
69640: IFFALSE 69679
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
69642: LD_ADDR_EXP 23
69646: PUSH
69647: LD_EXP 23
69651: PPUSH
69652: LD_VAR 0 3
69656: PPUSH
69657: LD_EXP 23
69661: PUSH
69662: LD_VAR 0 3
69666: ARRAY
69667: PUSH
69668: LD_VAR 0 1
69672: DIFF
69673: PPUSH
69674: CALL_OW 1
69678: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
69679: LD_VAR 0 1
69683: PUSH
69684: LD_EXP 22
69688: PUSH
69689: LD_VAR 0 3
69693: ARRAY
69694: IN
69695: IFFALSE 69734
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
69697: LD_ADDR_EXP 22
69701: PUSH
69702: LD_EXP 22
69706: PPUSH
69707: LD_VAR 0 3
69711: PPUSH
69712: LD_EXP 22
69716: PUSH
69717: LD_VAR 0 3
69721: ARRAY
69722: PUSH
69723: LD_VAR 0 1
69727: DIFF
69728: PPUSH
69729: CALL_OW 1
69733: ST_TO_ADDR
// end ; break ;
69734: GO 69738
// end ;
69736: GO 68384
69738: POP
69739: POP
// end ;
69740: LD_VAR 0 2
69744: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
69745: LD_INT 0
69747: PPUSH
69748: PPUSH
69749: PPUSH
// if not mc_bases or not skirmish then
69750: LD_EXP 14
69754: NOT
69755: PUSH
69756: LD_EXP 12
69760: NOT
69761: OR
69762: IFFALSE 69766
// exit ;
69764: GO 69981
// for i = 1 to mc_bases do
69766: LD_ADDR_VAR 0 3
69770: PUSH
69771: DOUBLE
69772: LD_INT 1
69774: DEC
69775: ST_TO_ADDR
69776: LD_EXP 14
69780: PUSH
69781: FOR_TO
69782: IFFALSE 69979
// begin if building in mc_construct_list [ i ] then
69784: LD_VAR 0 1
69788: PUSH
69789: LD_EXP 21
69793: PUSH
69794: LD_VAR 0 3
69798: ARRAY
69799: IN
69800: IFFALSE 69977
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
69802: LD_ADDR_EXP 21
69806: PUSH
69807: LD_EXP 21
69811: PPUSH
69812: LD_VAR 0 3
69816: PPUSH
69817: LD_EXP 21
69821: PUSH
69822: LD_VAR 0 3
69826: ARRAY
69827: PUSH
69828: LD_VAR 0 1
69832: DIFF
69833: PPUSH
69834: CALL_OW 1
69838: ST_TO_ADDR
// if building in mc_lab [ i ] then
69839: LD_VAR 0 1
69843: PUSH
69844: LD_EXP 47
69848: PUSH
69849: LD_VAR 0 3
69853: ARRAY
69854: IN
69855: IFFALSE 69910
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
69857: LD_ADDR_EXP 48
69861: PUSH
69862: LD_EXP 48
69866: PPUSH
69867: LD_VAR 0 3
69871: PPUSH
69872: LD_EXP 48
69876: PUSH
69877: LD_VAR 0 3
69881: ARRAY
69882: PPUSH
69883: LD_INT 1
69885: PPUSH
69886: LD_EXP 48
69890: PUSH
69891: LD_VAR 0 3
69895: ARRAY
69896: PPUSH
69897: LD_INT 0
69899: PPUSH
69900: CALL 8824 0 4
69904: PPUSH
69905: CALL_OW 1
69909: ST_TO_ADDR
// if not building in mc_bases [ i ] then
69910: LD_VAR 0 1
69914: PUSH
69915: LD_EXP 14
69919: PUSH
69920: LD_VAR 0 3
69924: ARRAY
69925: IN
69926: NOT
69927: IFFALSE 69973
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
69929: LD_ADDR_EXP 14
69933: PUSH
69934: LD_EXP 14
69938: PPUSH
69939: LD_VAR 0 3
69943: PUSH
69944: LD_EXP 14
69948: PUSH
69949: LD_VAR 0 3
69953: ARRAY
69954: PUSH
69955: LD_INT 1
69957: PLUS
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PPUSH
69963: LD_VAR 0 1
69967: PPUSH
69968: CALL 9406 0 3
69972: ST_TO_ADDR
// exit ;
69973: POP
69974: POP
69975: GO 69981
// end ; end ;
69977: GO 69781
69979: POP
69980: POP
// end ;
69981: LD_VAR 0 2
69985: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
69986: LD_INT 0
69988: PPUSH
69989: PPUSH
69990: PPUSH
69991: PPUSH
69992: PPUSH
69993: PPUSH
69994: PPUSH
// if not mc_bases or not skirmish then
69995: LD_EXP 14
69999: NOT
70000: PUSH
70001: LD_EXP 12
70005: NOT
70006: OR
70007: IFFALSE 70011
// exit ;
70009: GO 70672
// for i = 1 to mc_bases do
70011: LD_ADDR_VAR 0 3
70015: PUSH
70016: DOUBLE
70017: LD_INT 1
70019: DEC
70020: ST_TO_ADDR
70021: LD_EXP 14
70025: PUSH
70026: FOR_TO
70027: IFFALSE 70670
// begin if building in mc_construct_list [ i ] then
70029: LD_VAR 0 1
70033: PUSH
70034: LD_EXP 21
70038: PUSH
70039: LD_VAR 0 3
70043: ARRAY
70044: IN
70045: IFFALSE 70668
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
70047: LD_ADDR_EXP 21
70051: PUSH
70052: LD_EXP 21
70056: PPUSH
70057: LD_VAR 0 3
70061: PPUSH
70062: LD_EXP 21
70066: PUSH
70067: LD_VAR 0 3
70071: ARRAY
70072: PUSH
70073: LD_VAR 0 1
70077: DIFF
70078: PPUSH
70079: CALL_OW 1
70083: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
70084: LD_ADDR_EXP 14
70088: PUSH
70089: LD_EXP 14
70093: PPUSH
70094: LD_VAR 0 3
70098: PUSH
70099: LD_EXP 14
70103: PUSH
70104: LD_VAR 0 3
70108: ARRAY
70109: PUSH
70110: LD_INT 1
70112: PLUS
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PPUSH
70118: LD_VAR 0 1
70122: PPUSH
70123: CALL 9406 0 3
70127: ST_TO_ADDR
// btype := GetBType ( building ) ;
70128: LD_ADDR_VAR 0 5
70132: PUSH
70133: LD_VAR 0 1
70137: PPUSH
70138: CALL_OW 266
70142: ST_TO_ADDR
// side := GetSide ( building ) ;
70143: LD_ADDR_VAR 0 8
70147: PUSH
70148: LD_VAR 0 1
70152: PPUSH
70153: CALL_OW 255
70157: ST_TO_ADDR
// if btype = b_lab then
70158: LD_VAR 0 5
70162: PUSH
70163: LD_INT 6
70165: EQUAL
70166: IFFALSE 70216
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
70168: LD_ADDR_EXP 47
70172: PUSH
70173: LD_EXP 47
70177: PPUSH
70178: LD_VAR 0 3
70182: PUSH
70183: LD_EXP 47
70187: PUSH
70188: LD_VAR 0 3
70192: ARRAY
70193: PUSH
70194: LD_INT 1
70196: PLUS
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PPUSH
70202: LD_VAR 0 1
70206: PPUSH
70207: CALL 9406 0 3
70211: ST_TO_ADDR
// exit ;
70212: POP
70213: POP
70214: GO 70672
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
70216: LD_VAR 0 5
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: LD_INT 2
70226: PUSH
70227: LD_INT 4
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: LIST
70234: IN
70235: IFFALSE 70359
// begin if btype = b_armoury then
70237: LD_VAR 0 5
70241: PUSH
70242: LD_INT 4
70244: EQUAL
70245: IFFALSE 70255
// btype := b_barracks ;
70247: LD_ADDR_VAR 0 5
70251: PUSH
70252: LD_INT 5
70254: ST_TO_ADDR
// if btype = b_depot then
70255: LD_VAR 0 5
70259: PUSH
70260: LD_INT 0
70262: EQUAL
70263: IFFALSE 70273
// btype := b_warehouse ;
70265: LD_ADDR_VAR 0 5
70269: PUSH
70270: LD_INT 1
70272: ST_TO_ADDR
// if btype = b_workshop then
70273: LD_VAR 0 5
70277: PUSH
70278: LD_INT 2
70280: EQUAL
70281: IFFALSE 70291
// btype := b_factory ;
70283: LD_ADDR_VAR 0 5
70287: PUSH
70288: LD_INT 3
70290: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
70291: LD_VAR 0 5
70295: PPUSH
70296: LD_VAR 0 8
70300: PPUSH
70301: CALL_OW 323
70305: PUSH
70306: LD_INT 1
70308: EQUAL
70309: IFFALSE 70355
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
70311: LD_ADDR_EXP 46
70315: PUSH
70316: LD_EXP 46
70320: PPUSH
70321: LD_VAR 0 3
70325: PUSH
70326: LD_EXP 46
70330: PUSH
70331: LD_VAR 0 3
70335: ARRAY
70336: PUSH
70337: LD_INT 1
70339: PLUS
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PPUSH
70345: LD_VAR 0 1
70349: PPUSH
70350: CALL 9406 0 3
70354: ST_TO_ADDR
// exit ;
70355: POP
70356: POP
70357: GO 70672
// end ; if btype in [ b_bunker , b_turret ] then
70359: LD_VAR 0 5
70363: PUSH
70364: LD_INT 32
70366: PUSH
70367: LD_INT 33
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: IN
70374: IFFALSE 70664
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
70376: LD_ADDR_EXP 22
70380: PUSH
70381: LD_EXP 22
70385: PPUSH
70386: LD_VAR 0 3
70390: PUSH
70391: LD_EXP 22
70395: PUSH
70396: LD_VAR 0 3
70400: ARRAY
70401: PUSH
70402: LD_INT 1
70404: PLUS
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PPUSH
70410: LD_VAR 0 1
70414: PPUSH
70415: CALL 9406 0 3
70419: ST_TO_ADDR
// if btype = b_bunker then
70420: LD_VAR 0 5
70424: PUSH
70425: LD_INT 32
70427: EQUAL
70428: IFFALSE 70664
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
70430: LD_ADDR_EXP 23
70434: PUSH
70435: LD_EXP 23
70439: PPUSH
70440: LD_VAR 0 3
70444: PUSH
70445: LD_EXP 23
70449: PUSH
70450: LD_VAR 0 3
70454: ARRAY
70455: PUSH
70456: LD_INT 1
70458: PLUS
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PPUSH
70464: LD_VAR 0 1
70468: PPUSH
70469: CALL 9406 0 3
70473: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
70474: LD_ADDR_VAR 0 6
70478: PUSH
70479: LD_EXP 14
70483: PUSH
70484: LD_VAR 0 3
70488: ARRAY
70489: PPUSH
70490: LD_INT 25
70492: PUSH
70493: LD_INT 1
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: PUSH
70503: LD_INT 54
70505: PUSH
70506: EMPTY
70507: LIST
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PPUSH
70517: CALL_OW 72
70521: ST_TO_ADDR
// if tmp then
70522: LD_VAR 0 6
70526: IFFALSE 70532
// exit ;
70528: POP
70529: POP
70530: GO 70672
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
70532: LD_ADDR_VAR 0 6
70536: PUSH
70537: LD_EXP 14
70541: PUSH
70542: LD_VAR 0 3
70546: ARRAY
70547: PPUSH
70548: LD_INT 2
70550: PUSH
70551: LD_INT 30
70553: PUSH
70554: LD_INT 4
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 30
70563: PUSH
70564: LD_INT 5
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: PPUSH
70576: CALL_OW 72
70580: ST_TO_ADDR
// if not tmp then
70581: LD_VAR 0 6
70585: NOT
70586: IFFALSE 70592
// exit ;
70588: POP
70589: POP
70590: GO 70672
// for j in tmp do
70592: LD_ADDR_VAR 0 4
70596: PUSH
70597: LD_VAR 0 6
70601: PUSH
70602: FOR_IN
70603: IFFALSE 70662
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
70605: LD_ADDR_VAR 0 7
70609: PUSH
70610: LD_VAR 0 4
70614: PPUSH
70615: CALL_OW 313
70619: PPUSH
70620: LD_INT 25
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PPUSH
70630: CALL_OW 72
70634: ST_TO_ADDR
// if units then
70635: LD_VAR 0 7
70639: IFFALSE 70660
// begin ComExitBuilding ( units [ 1 ] ) ;
70641: LD_VAR 0 7
70645: PUSH
70646: LD_INT 1
70648: ARRAY
70649: PPUSH
70650: CALL_OW 122
// exit ;
70654: POP
70655: POP
70656: POP
70657: POP
70658: GO 70672
// end ; end ;
70660: GO 70602
70662: POP
70663: POP
// end ; end ; exit ;
70664: POP
70665: POP
70666: GO 70672
// end ; end ;
70668: GO 70026
70670: POP
70671: POP
// end ;
70672: LD_VAR 0 2
70676: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
70677: LD_INT 0
70679: PPUSH
70680: PPUSH
70681: PPUSH
70682: PPUSH
70683: PPUSH
70684: PPUSH
70685: PPUSH
// if not mc_bases or not skirmish then
70686: LD_EXP 14
70690: NOT
70691: PUSH
70692: LD_EXP 12
70696: NOT
70697: OR
70698: IFFALSE 70702
// exit ;
70700: GO 70933
// btype := GetBType ( building ) ;
70702: LD_ADDR_VAR 0 6
70706: PUSH
70707: LD_VAR 0 1
70711: PPUSH
70712: CALL_OW 266
70716: ST_TO_ADDR
// x := GetX ( building ) ;
70717: LD_ADDR_VAR 0 7
70721: PUSH
70722: LD_VAR 0 1
70726: PPUSH
70727: CALL_OW 250
70731: ST_TO_ADDR
// y := GetY ( building ) ;
70732: LD_ADDR_VAR 0 8
70736: PUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: CALL_OW 251
70746: ST_TO_ADDR
// d := GetDir ( building ) ;
70747: LD_ADDR_VAR 0 9
70751: PUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: CALL_OW 254
70761: ST_TO_ADDR
// for i = 1 to mc_bases do
70762: LD_ADDR_VAR 0 4
70766: PUSH
70767: DOUBLE
70768: LD_INT 1
70770: DEC
70771: ST_TO_ADDR
70772: LD_EXP 14
70776: PUSH
70777: FOR_TO
70778: IFFALSE 70931
// begin if not mc_build_list [ i ] then
70780: LD_EXP 19
70784: PUSH
70785: LD_VAR 0 4
70789: ARRAY
70790: NOT
70791: IFFALSE 70795
// continue ;
70793: GO 70777
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
70795: LD_VAR 0 6
70799: PUSH
70800: LD_VAR 0 7
70804: PUSH
70805: LD_VAR 0 8
70809: PUSH
70810: LD_VAR 0 9
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: PPUSH
70821: LD_EXP 19
70825: PUSH
70826: LD_VAR 0 4
70830: ARRAY
70831: PUSH
70832: LD_INT 1
70834: ARRAY
70835: PPUSH
70836: CALL 15575 0 2
70840: IFFALSE 70929
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
70842: LD_ADDR_EXP 19
70846: PUSH
70847: LD_EXP 19
70851: PPUSH
70852: LD_VAR 0 4
70856: PPUSH
70857: LD_EXP 19
70861: PUSH
70862: LD_VAR 0 4
70866: ARRAY
70867: PPUSH
70868: LD_INT 1
70870: PPUSH
70871: CALL_OW 3
70875: PPUSH
70876: CALL_OW 1
70880: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
70881: LD_ADDR_EXP 21
70885: PUSH
70886: LD_EXP 21
70890: PPUSH
70891: LD_VAR 0 4
70895: PUSH
70896: LD_EXP 21
70900: PUSH
70901: LD_VAR 0 4
70905: ARRAY
70906: PUSH
70907: LD_INT 1
70909: PLUS
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PPUSH
70915: LD_VAR 0 1
70919: PPUSH
70920: CALL 9406 0 3
70924: ST_TO_ADDR
// exit ;
70925: POP
70926: POP
70927: GO 70933
// end ; end ;
70929: GO 70777
70931: POP
70932: POP
// end ;
70933: LD_VAR 0 3
70937: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
70938: LD_INT 0
70940: PPUSH
70941: PPUSH
70942: PPUSH
// if not mc_bases or not skirmish then
70943: LD_EXP 14
70947: NOT
70948: PUSH
70949: LD_EXP 12
70953: NOT
70954: OR
70955: IFFALSE 70959
// exit ;
70957: GO 71149
// for i = 1 to mc_bases do
70959: LD_ADDR_VAR 0 4
70963: PUSH
70964: DOUBLE
70965: LD_INT 1
70967: DEC
70968: ST_TO_ADDR
70969: LD_EXP 14
70973: PUSH
70974: FOR_TO
70975: IFFALSE 71062
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
70977: LD_VAR 0 1
70981: PUSH
70982: LD_EXP 22
70986: PUSH
70987: LD_VAR 0 4
70991: ARRAY
70992: IN
70993: PUSH
70994: LD_VAR 0 1
70998: PUSH
70999: LD_EXP 23
71003: PUSH
71004: LD_VAR 0 4
71008: ARRAY
71009: IN
71010: NOT
71011: AND
71012: IFFALSE 71060
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
71014: LD_ADDR_EXP 23
71018: PUSH
71019: LD_EXP 23
71023: PPUSH
71024: LD_VAR 0 4
71028: PUSH
71029: LD_EXP 23
71033: PUSH
71034: LD_VAR 0 4
71038: ARRAY
71039: PUSH
71040: LD_INT 1
71042: PLUS
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PPUSH
71048: LD_VAR 0 1
71052: PPUSH
71053: CALL 9406 0 3
71057: ST_TO_ADDR
// break ;
71058: GO 71062
// end ; end ;
71060: GO 70974
71062: POP
71063: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
71064: LD_VAR 0 1
71068: PPUSH
71069: CALL_OW 257
71073: PUSH
71074: LD_EXP 40
71078: IN
71079: PUSH
71080: LD_VAR 0 1
71084: PPUSH
71085: CALL_OW 266
71089: PUSH
71090: LD_INT 5
71092: EQUAL
71093: AND
71094: PUSH
71095: LD_VAR 0 2
71099: PPUSH
71100: CALL_OW 110
71104: PUSH
71105: LD_INT 18
71107: NONEQUAL
71108: AND
71109: IFFALSE 71149
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
71111: LD_VAR 0 2
71115: PPUSH
71116: CALL_OW 257
71120: PUSH
71121: LD_INT 5
71123: PUSH
71124: LD_INT 8
71126: PUSH
71127: LD_INT 9
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: LIST
71134: IN
71135: IFFALSE 71149
// SetClass ( unit , 1 ) ;
71137: LD_VAR 0 2
71141: PPUSH
71142: LD_INT 1
71144: PPUSH
71145: CALL_OW 336
// end ;
71149: LD_VAR 0 3
71153: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
71154: LD_INT 0
71156: PPUSH
71157: PPUSH
// if not mc_bases or not skirmish then
71158: LD_EXP 14
71162: NOT
71163: PUSH
71164: LD_EXP 12
71168: NOT
71169: OR
71170: IFFALSE 71174
// exit ;
71172: GO 71290
// if GetLives ( abandoned_vehicle ) > 250 then
71174: LD_VAR 0 2
71178: PPUSH
71179: CALL_OW 256
71183: PUSH
71184: LD_INT 250
71186: GREATER
71187: IFFALSE 71191
// exit ;
71189: GO 71290
// for i = 1 to mc_bases do
71191: LD_ADDR_VAR 0 6
71195: PUSH
71196: DOUBLE
71197: LD_INT 1
71199: DEC
71200: ST_TO_ADDR
71201: LD_EXP 14
71205: PUSH
71206: FOR_TO
71207: IFFALSE 71288
// begin if driver in mc_bases [ i ] then
71209: LD_VAR 0 1
71213: PUSH
71214: LD_EXP 14
71218: PUSH
71219: LD_VAR 0 6
71223: ARRAY
71224: IN
71225: IFFALSE 71286
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
71227: LD_VAR 0 1
71231: PPUSH
71232: LD_EXP 14
71236: PUSH
71237: LD_VAR 0 6
71241: ARRAY
71242: PPUSH
71243: LD_INT 2
71245: PUSH
71246: LD_INT 30
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 30
71258: PUSH
71259: LD_INT 1
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: PPUSH
71271: CALL_OW 72
71275: PUSH
71276: LD_INT 1
71278: ARRAY
71279: PPUSH
71280: CALL_OW 112
// break ;
71284: GO 71288
// end ; end ;
71286: GO 71206
71288: POP
71289: POP
// end ; end_of_file
71290: LD_VAR 0 5
71294: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
71295: LD_INT 0
71297: PPUSH
// ar_miner := 81 ;
71298: LD_ADDR_EXP 64
71302: PUSH
71303: LD_INT 81
71305: ST_TO_ADDR
// ar_crane := 88 ;
71306: LD_ADDR_EXP 63
71310: PUSH
71311: LD_INT 88
71313: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71314: LD_ADDR_EXP 58
71318: PUSH
71319: LD_INT 89
71321: ST_TO_ADDR
// us_hack := 99 ;
71322: LD_ADDR_EXP 59
71326: PUSH
71327: LD_INT 99
71329: ST_TO_ADDR
// us_artillery := 97 ;
71330: LD_ADDR_EXP 60
71334: PUSH
71335: LD_INT 97
71337: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71338: LD_ADDR_EXP 61
71342: PUSH
71343: LD_INT 91
71345: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
71346: LD_ADDR_EXP 62
71350: PUSH
71351: LD_INT 92
71353: ST_TO_ADDR
// ru_radar := 98 ;
71354: LD_ADDR_EXP 57
71358: PUSH
71359: LD_INT 98
71361: ST_TO_ADDR
// tech_Artillery := 80 ;
71362: LD_ADDR_EXP 65
71366: PUSH
71367: LD_INT 80
71369: ST_TO_ADDR
// tech_RadMat := 81 ;
71370: LD_ADDR_EXP 66
71374: PUSH
71375: LD_INT 81
71377: ST_TO_ADDR
// tech_BasicTools := 82 ;
71378: LD_ADDR_EXP 67
71382: PUSH
71383: LD_INT 82
71385: ST_TO_ADDR
// tech_Cargo := 83 ;
71386: LD_ADDR_EXP 68
71390: PUSH
71391: LD_INT 83
71393: ST_TO_ADDR
// tech_Track := 84 ;
71394: LD_ADDR_EXP 69
71398: PUSH
71399: LD_INT 84
71401: ST_TO_ADDR
// tech_Crane := 85 ;
71402: LD_ADDR_EXP 70
71406: PUSH
71407: LD_INT 85
71409: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71410: LD_ADDR_EXP 71
71414: PUSH
71415: LD_INT 86
71417: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71418: LD_ADDR_EXP 72
71422: PUSH
71423: LD_INT 87
71425: ST_TO_ADDR
// end ;
71426: LD_VAR 0 1
71430: RET
// every 1 do
71431: GO 71433
71433: DISABLE
// InitGlobalVariables ; end_of_file
71434: CALL 71295 0 0
71438: END
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
71439: LD_INT 0
71441: PPUSH
71442: PPUSH
71443: PPUSH
71444: PPUSH
71445: PPUSH
71446: PPUSH
71447: PPUSH
71448: PPUSH
71449: PPUSH
71450: PPUSH
71451: PPUSH
71452: PPUSH
71453: PPUSH
71454: PPUSH
71455: PPUSH
71456: PPUSH
71457: PPUSH
71458: PPUSH
71459: PPUSH
71460: PPUSH
71461: PPUSH
71462: PPUSH
71463: PPUSH
71464: PPUSH
71465: PPUSH
71466: PPUSH
71467: PPUSH
71468: PPUSH
71469: PPUSH
71470: PPUSH
71471: PPUSH
71472: PPUSH
71473: PPUSH
71474: PPUSH
// if not list then
71475: LD_VAR 0 1
71479: NOT
71480: IFFALSE 71484
// exit ;
71482: GO 76143
// base := list [ 1 ] ;
71484: LD_ADDR_VAR 0 3
71488: PUSH
71489: LD_VAR 0 1
71493: PUSH
71494: LD_INT 1
71496: ARRAY
71497: ST_TO_ADDR
// group := list [ 2 ] ;
71498: LD_ADDR_VAR 0 4
71502: PUSH
71503: LD_VAR 0 1
71507: PUSH
71508: LD_INT 2
71510: ARRAY
71511: ST_TO_ADDR
// path := list [ 3 ] ;
71512: LD_ADDR_VAR 0 5
71516: PUSH
71517: LD_VAR 0 1
71521: PUSH
71522: LD_INT 3
71524: ARRAY
71525: ST_TO_ADDR
// flags := list [ 4 ] ;
71526: LD_ADDR_VAR 0 6
71530: PUSH
71531: LD_VAR 0 1
71535: PUSH
71536: LD_INT 4
71538: ARRAY
71539: ST_TO_ADDR
// mined := [ ] ;
71540: LD_ADDR_VAR 0 27
71544: PUSH
71545: EMPTY
71546: ST_TO_ADDR
// bombed := [ ] ;
71547: LD_ADDR_VAR 0 28
71551: PUSH
71552: EMPTY
71553: ST_TO_ADDR
// healers := [ ] ;
71554: LD_ADDR_VAR 0 31
71558: PUSH
71559: EMPTY
71560: ST_TO_ADDR
// to_heal := [ ] ;
71561: LD_ADDR_VAR 0 30
71565: PUSH
71566: EMPTY
71567: ST_TO_ADDR
// repairs := [ ] ;
71568: LD_ADDR_VAR 0 33
71572: PUSH
71573: EMPTY
71574: ST_TO_ADDR
// to_repair := [ ] ;
71575: LD_ADDR_VAR 0 32
71579: PUSH
71580: EMPTY
71581: ST_TO_ADDR
// if not group or not path then
71582: LD_VAR 0 4
71586: NOT
71587: PUSH
71588: LD_VAR 0 5
71592: NOT
71593: OR
71594: IFFALSE 71598
// exit ;
71596: GO 76143
// side := GetSide ( group [ 1 ] ) ;
71598: LD_ADDR_VAR 0 35
71602: PUSH
71603: LD_VAR 0 4
71607: PUSH
71608: LD_INT 1
71610: ARRAY
71611: PPUSH
71612: CALL_OW 255
71616: ST_TO_ADDR
// if flags then
71617: LD_VAR 0 6
71621: IFFALSE 71765
// begin f_ignore_area := flags [ 1 ] ;
71623: LD_ADDR_VAR 0 17
71627: PUSH
71628: LD_VAR 0 6
71632: PUSH
71633: LD_INT 1
71635: ARRAY
71636: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
71637: LD_ADDR_VAR 0 18
71641: PUSH
71642: LD_VAR 0 6
71646: PUSH
71647: LD_INT 2
71649: ARRAY
71650: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
71651: LD_ADDR_VAR 0 19
71655: PUSH
71656: LD_VAR 0 6
71660: PUSH
71661: LD_INT 3
71663: ARRAY
71664: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
71665: LD_ADDR_VAR 0 20
71669: PUSH
71670: LD_VAR 0 6
71674: PUSH
71675: LD_INT 4
71677: ARRAY
71678: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
71679: LD_ADDR_VAR 0 21
71683: PUSH
71684: LD_VAR 0 6
71688: PUSH
71689: LD_INT 5
71691: ARRAY
71692: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
71693: LD_ADDR_VAR 0 22
71697: PUSH
71698: LD_VAR 0 6
71702: PUSH
71703: LD_INT 6
71705: ARRAY
71706: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
71707: LD_ADDR_VAR 0 23
71711: PUSH
71712: LD_VAR 0 6
71716: PUSH
71717: LD_INT 7
71719: ARRAY
71720: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
71721: LD_ADDR_VAR 0 24
71725: PUSH
71726: LD_VAR 0 6
71730: PUSH
71731: LD_INT 8
71733: ARRAY
71734: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
71735: LD_ADDR_VAR 0 25
71739: PUSH
71740: LD_VAR 0 6
71744: PUSH
71745: LD_INT 9
71747: ARRAY
71748: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
71749: LD_ADDR_VAR 0 26
71753: PUSH
71754: LD_VAR 0 6
71758: PUSH
71759: LD_INT 10
71761: ARRAY
71762: ST_TO_ADDR
// end else
71763: GO 71845
// begin f_ignore_area := false ;
71765: LD_ADDR_VAR 0 17
71769: PUSH
71770: LD_INT 0
71772: ST_TO_ADDR
// f_capture := false ;
71773: LD_ADDR_VAR 0 18
71777: PUSH
71778: LD_INT 0
71780: ST_TO_ADDR
// f_ignore_civ := false ;
71781: LD_ADDR_VAR 0 19
71785: PUSH
71786: LD_INT 0
71788: ST_TO_ADDR
// f_murder := false ;
71789: LD_ADDR_VAR 0 20
71793: PUSH
71794: LD_INT 0
71796: ST_TO_ADDR
// f_mines := false ;
71797: LD_ADDR_VAR 0 21
71801: PUSH
71802: LD_INT 0
71804: ST_TO_ADDR
// f_repair := false ;
71805: LD_ADDR_VAR 0 22
71809: PUSH
71810: LD_INT 0
71812: ST_TO_ADDR
// f_heal := false ;
71813: LD_ADDR_VAR 0 23
71817: PUSH
71818: LD_INT 0
71820: ST_TO_ADDR
// f_spacetime := false ;
71821: LD_ADDR_VAR 0 24
71825: PUSH
71826: LD_INT 0
71828: ST_TO_ADDR
// f_attack_depot := false ;
71829: LD_ADDR_VAR 0 25
71833: PUSH
71834: LD_INT 0
71836: ST_TO_ADDR
// f_crawl := false ;
71837: LD_ADDR_VAR 0 26
71841: PUSH
71842: LD_INT 0
71844: ST_TO_ADDR
// end ; if f_heal then
71845: LD_VAR 0 23
71849: IFFALSE 71876
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
71851: LD_ADDR_VAR 0 31
71855: PUSH
71856: LD_VAR 0 4
71860: PPUSH
71861: LD_INT 25
71863: PUSH
71864: LD_INT 4
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PPUSH
71871: CALL_OW 72
71875: ST_TO_ADDR
// if f_repair then
71876: LD_VAR 0 22
71880: IFFALSE 71907
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
71882: LD_ADDR_VAR 0 33
71886: PUSH
71887: LD_VAR 0 4
71891: PPUSH
71892: LD_INT 25
71894: PUSH
71895: LD_INT 3
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PPUSH
71902: CALL_OW 72
71906: ST_TO_ADDR
// units_path := [ ] ;
71907: LD_ADDR_VAR 0 16
71911: PUSH
71912: EMPTY
71913: ST_TO_ADDR
// for i = 1 to group do
71914: LD_ADDR_VAR 0 7
71918: PUSH
71919: DOUBLE
71920: LD_INT 1
71922: DEC
71923: ST_TO_ADDR
71924: LD_VAR 0 4
71928: PUSH
71929: FOR_TO
71930: IFFALSE 71959
// units_path := Replace ( units_path , i , path ) ;
71932: LD_ADDR_VAR 0 16
71936: PUSH
71937: LD_VAR 0 16
71941: PPUSH
71942: LD_VAR 0 7
71946: PPUSH
71947: LD_VAR 0 5
71951: PPUSH
71952: CALL_OW 1
71956: ST_TO_ADDR
71957: GO 71929
71959: POP
71960: POP
// repeat for i = group downto 1 do
71961: LD_ADDR_VAR 0 7
71965: PUSH
71966: DOUBLE
71967: LD_VAR 0 4
71971: INC
71972: ST_TO_ADDR
71973: LD_INT 1
71975: PUSH
71976: FOR_DOWNTO
71977: IFFALSE 76099
// begin wait ( 5 ) ;
71979: LD_INT 5
71981: PPUSH
71982: CALL_OW 67
// tmp := [ ] ;
71986: LD_ADDR_VAR 0 14
71990: PUSH
71991: EMPTY
71992: ST_TO_ADDR
// attacking := false ;
71993: LD_ADDR_VAR 0 29
71997: PUSH
71998: LD_INT 0
72000: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
72001: LD_VAR 0 4
72005: PUSH
72006: LD_VAR 0 7
72010: ARRAY
72011: PPUSH
72012: CALL_OW 301
72016: PUSH
72017: LD_VAR 0 4
72021: PUSH
72022: LD_VAR 0 7
72026: ARRAY
72027: NOT
72028: OR
72029: IFFALSE 72138
// begin if GetType ( group [ i ] ) = unit_human then
72031: LD_VAR 0 4
72035: PUSH
72036: LD_VAR 0 7
72040: ARRAY
72041: PPUSH
72042: CALL_OW 247
72046: PUSH
72047: LD_INT 1
72049: EQUAL
72050: IFFALSE 72096
// begin to_heal := to_heal diff group [ i ] ;
72052: LD_ADDR_VAR 0 30
72056: PUSH
72057: LD_VAR 0 30
72061: PUSH
72062: LD_VAR 0 4
72066: PUSH
72067: LD_VAR 0 7
72071: ARRAY
72072: DIFF
72073: ST_TO_ADDR
// healers := healers diff group [ i ] ;
72074: LD_ADDR_VAR 0 31
72078: PUSH
72079: LD_VAR 0 31
72083: PUSH
72084: LD_VAR 0 4
72088: PUSH
72089: LD_VAR 0 7
72093: ARRAY
72094: DIFF
72095: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
72096: LD_ADDR_VAR 0 4
72100: PUSH
72101: LD_VAR 0 4
72105: PPUSH
72106: LD_VAR 0 7
72110: PPUSH
72111: CALL_OW 3
72115: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
72116: LD_ADDR_VAR 0 16
72120: PUSH
72121: LD_VAR 0 16
72125: PPUSH
72126: LD_VAR 0 7
72130: PPUSH
72131: CALL_OW 3
72135: ST_TO_ADDR
// continue ;
72136: GO 71976
// end ; if f_repair then
72138: LD_VAR 0 22
72142: IFFALSE 72631
// begin if GetType ( group [ i ] ) = unit_vehicle then
72144: LD_VAR 0 4
72148: PUSH
72149: LD_VAR 0 7
72153: ARRAY
72154: PPUSH
72155: CALL_OW 247
72159: PUSH
72160: LD_INT 2
72162: EQUAL
72163: IFFALSE 72353
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
72165: LD_VAR 0 4
72169: PUSH
72170: LD_VAR 0 7
72174: ARRAY
72175: PPUSH
72176: CALL_OW 256
72180: PUSH
72181: LD_INT 700
72183: LESS
72184: PUSH
72185: LD_VAR 0 4
72189: PUSH
72190: LD_VAR 0 7
72194: ARRAY
72195: PUSH
72196: LD_VAR 0 32
72200: IN
72201: NOT
72202: AND
72203: IFFALSE 72227
// to_repair := to_repair union group [ i ] ;
72205: LD_ADDR_VAR 0 32
72209: PUSH
72210: LD_VAR 0 32
72214: PUSH
72215: LD_VAR 0 4
72219: PUSH
72220: LD_VAR 0 7
72224: ARRAY
72225: UNION
72226: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
72227: LD_VAR 0 4
72231: PUSH
72232: LD_VAR 0 7
72236: ARRAY
72237: PPUSH
72238: CALL_OW 256
72242: PUSH
72243: LD_INT 1000
72245: EQUAL
72246: PUSH
72247: LD_VAR 0 4
72251: PUSH
72252: LD_VAR 0 7
72256: ARRAY
72257: PUSH
72258: LD_VAR 0 32
72262: IN
72263: AND
72264: IFFALSE 72288
// to_repair := to_repair diff group [ i ] ;
72266: LD_ADDR_VAR 0 32
72270: PUSH
72271: LD_VAR 0 32
72275: PUSH
72276: LD_VAR 0 4
72280: PUSH
72281: LD_VAR 0 7
72285: ARRAY
72286: DIFF
72287: ST_TO_ADDR
// if group [ i ] in to_repair then
72288: LD_VAR 0 4
72292: PUSH
72293: LD_VAR 0 7
72297: ARRAY
72298: PUSH
72299: LD_VAR 0 32
72303: IN
72304: IFFALSE 72351
// begin if not IsInArea ( group [ i ] , f_repair ) then
72306: LD_VAR 0 4
72310: PUSH
72311: LD_VAR 0 7
72315: ARRAY
72316: PPUSH
72317: LD_VAR 0 22
72321: PPUSH
72322: CALL_OW 308
72326: NOT
72327: IFFALSE 72349
// ComMoveToArea ( group [ i ] , f_repair ) ;
72329: LD_VAR 0 4
72333: PUSH
72334: LD_VAR 0 7
72338: ARRAY
72339: PPUSH
72340: LD_VAR 0 22
72344: PPUSH
72345: CALL_OW 113
// continue ;
72349: GO 71976
// end ; end else
72351: GO 72631
// if group [ i ] in repairs then
72353: LD_VAR 0 4
72357: PUSH
72358: LD_VAR 0 7
72362: ARRAY
72363: PUSH
72364: LD_VAR 0 33
72368: IN
72369: IFFALSE 72631
// begin if IsInUnit ( group [ i ] ) then
72371: LD_VAR 0 4
72375: PUSH
72376: LD_VAR 0 7
72380: ARRAY
72381: PPUSH
72382: CALL_OW 310
72386: IFFALSE 72454
// begin z := IsInUnit ( group [ i ] ) ;
72388: LD_ADDR_VAR 0 13
72392: PUSH
72393: LD_VAR 0 4
72397: PUSH
72398: LD_VAR 0 7
72402: ARRAY
72403: PPUSH
72404: CALL_OW 310
72408: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
72409: LD_VAR 0 13
72413: PUSH
72414: LD_VAR 0 32
72418: IN
72419: PUSH
72420: LD_VAR 0 13
72424: PPUSH
72425: LD_VAR 0 22
72429: PPUSH
72430: CALL_OW 308
72434: AND
72435: IFFALSE 72452
// ComExitVehicle ( group [ i ] ) ;
72437: LD_VAR 0 4
72441: PUSH
72442: LD_VAR 0 7
72446: ARRAY
72447: PPUSH
72448: CALL_OW 121
// end else
72452: GO 72631
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
72454: LD_ADDR_VAR 0 13
72458: PUSH
72459: LD_VAR 0 4
72463: PPUSH
72464: LD_INT 95
72466: PUSH
72467: LD_VAR 0 22
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: PUSH
72476: LD_INT 58
72478: PUSH
72479: EMPTY
72480: LIST
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PPUSH
72486: CALL_OW 72
72490: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
72491: LD_VAR 0 4
72495: PUSH
72496: LD_VAR 0 7
72500: ARRAY
72501: PPUSH
72502: CALL_OW 314
72506: NOT
72507: IFFALSE 72629
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
72509: LD_ADDR_VAR 0 10
72513: PUSH
72514: LD_VAR 0 13
72518: PPUSH
72519: LD_VAR 0 4
72523: PUSH
72524: LD_VAR 0 7
72528: ARRAY
72529: PPUSH
72530: CALL_OW 74
72534: ST_TO_ADDR
// if not x then
72535: LD_VAR 0 10
72539: NOT
72540: IFFALSE 72544
// continue ;
72542: GO 71976
// if GetLives ( x ) < 1000 then
72544: LD_VAR 0 10
72548: PPUSH
72549: CALL_OW 256
72553: PUSH
72554: LD_INT 1000
72556: LESS
72557: IFFALSE 72581
// ComRepairVehicle ( group [ i ] , x ) else
72559: LD_VAR 0 4
72563: PUSH
72564: LD_VAR 0 7
72568: ARRAY
72569: PPUSH
72570: LD_VAR 0 10
72574: PPUSH
72575: CALL_OW 129
72579: GO 72629
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
72581: LD_VAR 0 23
72585: PUSH
72586: LD_VAR 0 4
72590: PUSH
72591: LD_VAR 0 7
72595: ARRAY
72596: PPUSH
72597: CALL_OW 256
72601: PUSH
72602: LD_INT 1000
72604: LESS
72605: AND
72606: NOT
72607: IFFALSE 72629
// ComEnterUnit ( group [ i ] , x ) ;
72609: LD_VAR 0 4
72613: PUSH
72614: LD_VAR 0 7
72618: ARRAY
72619: PPUSH
72620: LD_VAR 0 10
72624: PPUSH
72625: CALL_OW 120
// end ; continue ;
72629: GO 71976
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
72631: LD_VAR 0 23
72635: PUSH
72636: LD_VAR 0 4
72640: PUSH
72641: LD_VAR 0 7
72645: ARRAY
72646: PPUSH
72647: CALL_OW 247
72651: PUSH
72652: LD_INT 1
72654: EQUAL
72655: AND
72656: IFFALSE 73134
// begin if group [ i ] in healers then
72658: LD_VAR 0 4
72662: PUSH
72663: LD_VAR 0 7
72667: ARRAY
72668: PUSH
72669: LD_VAR 0 31
72673: IN
72674: IFFALSE 72947
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
72676: LD_VAR 0 4
72680: PUSH
72681: LD_VAR 0 7
72685: ARRAY
72686: PPUSH
72687: LD_VAR 0 23
72691: PPUSH
72692: CALL_OW 308
72696: NOT
72697: PUSH
72698: LD_VAR 0 4
72702: PUSH
72703: LD_VAR 0 7
72707: ARRAY
72708: PPUSH
72709: CALL_OW 314
72713: NOT
72714: AND
72715: IFFALSE 72739
// ComMoveToArea ( group [ i ] , f_heal ) else
72717: LD_VAR 0 4
72721: PUSH
72722: LD_VAR 0 7
72726: ARRAY
72727: PPUSH
72728: LD_VAR 0 23
72732: PPUSH
72733: CALL_OW 113
72737: GO 72945
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
72739: LD_VAR 0 4
72743: PUSH
72744: LD_VAR 0 7
72748: ARRAY
72749: PPUSH
72750: CALL 37778 0 1
72754: PPUSH
72755: CALL_OW 256
72759: PUSH
72760: LD_INT 1000
72762: EQUAL
72763: IFFALSE 72782
// ComStop ( group [ i ] ) else
72765: LD_VAR 0 4
72769: PUSH
72770: LD_VAR 0 7
72774: ARRAY
72775: PPUSH
72776: CALL_OW 141
72780: GO 72945
// if not HasTask ( group [ i ] ) and to_heal then
72782: LD_VAR 0 4
72786: PUSH
72787: LD_VAR 0 7
72791: ARRAY
72792: PPUSH
72793: CALL_OW 314
72797: NOT
72798: PUSH
72799: LD_VAR 0 30
72803: AND
72804: IFFALSE 72945
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
72806: LD_ADDR_VAR 0 13
72810: PUSH
72811: LD_VAR 0 30
72815: PPUSH
72816: LD_INT 3
72818: PUSH
72819: LD_INT 54
72821: PUSH
72822: EMPTY
72823: LIST
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PPUSH
72829: CALL_OW 72
72833: PPUSH
72834: LD_VAR 0 4
72838: PUSH
72839: LD_VAR 0 7
72843: ARRAY
72844: PPUSH
72845: CALL_OW 74
72849: ST_TO_ADDR
// if z then
72850: LD_VAR 0 13
72854: IFFALSE 72945
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
72856: LD_INT 91
72858: PUSH
72859: LD_VAR 0 13
72863: PUSH
72864: LD_INT 10
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 81
72874: PUSH
72875: LD_VAR 0 13
72879: PPUSH
72880: CALL_OW 255
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PPUSH
72893: CALL_OW 69
72897: PUSH
72898: LD_INT 0
72900: EQUAL
72901: IFFALSE 72925
// ComHeal ( group [ i ] , z ) else
72903: LD_VAR 0 4
72907: PUSH
72908: LD_VAR 0 7
72912: ARRAY
72913: PPUSH
72914: LD_VAR 0 13
72918: PPUSH
72919: CALL_OW 128
72923: GO 72945
// ComMoveToArea ( group [ i ] , f_heal ) ;
72925: LD_VAR 0 4
72929: PUSH
72930: LD_VAR 0 7
72934: ARRAY
72935: PPUSH
72936: LD_VAR 0 23
72940: PPUSH
72941: CALL_OW 113
// end ; continue ;
72945: GO 71976
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
72947: LD_VAR 0 4
72951: PUSH
72952: LD_VAR 0 7
72956: ARRAY
72957: PPUSH
72958: CALL_OW 256
72962: PUSH
72963: LD_INT 700
72965: LESS
72966: PUSH
72967: LD_VAR 0 4
72971: PUSH
72972: LD_VAR 0 7
72976: ARRAY
72977: PUSH
72978: LD_VAR 0 30
72982: IN
72983: NOT
72984: AND
72985: IFFALSE 73009
// to_heal := to_heal union group [ i ] ;
72987: LD_ADDR_VAR 0 30
72991: PUSH
72992: LD_VAR 0 30
72996: PUSH
72997: LD_VAR 0 4
73001: PUSH
73002: LD_VAR 0 7
73006: ARRAY
73007: UNION
73008: ST_TO_ADDR
// if group [ i ] in to_heal then
73009: LD_VAR 0 4
73013: PUSH
73014: LD_VAR 0 7
73018: ARRAY
73019: PUSH
73020: LD_VAR 0 30
73024: IN
73025: IFFALSE 73134
// begin if GetLives ( group [ i ] ) = 1000 then
73027: LD_VAR 0 4
73031: PUSH
73032: LD_VAR 0 7
73036: ARRAY
73037: PPUSH
73038: CALL_OW 256
73042: PUSH
73043: LD_INT 1000
73045: EQUAL
73046: IFFALSE 73072
// to_heal := to_heal diff group [ i ] else
73048: LD_ADDR_VAR 0 30
73052: PUSH
73053: LD_VAR 0 30
73057: PUSH
73058: LD_VAR 0 4
73062: PUSH
73063: LD_VAR 0 7
73067: ARRAY
73068: DIFF
73069: ST_TO_ADDR
73070: GO 73134
// begin if not IsInArea ( group [ i ] , to_heal ) then
73072: LD_VAR 0 4
73076: PUSH
73077: LD_VAR 0 7
73081: ARRAY
73082: PPUSH
73083: LD_VAR 0 30
73087: PPUSH
73088: CALL_OW 308
73092: NOT
73093: IFFALSE 73117
// ComMoveToArea ( group [ i ] , f_heal ) else
73095: LD_VAR 0 4
73099: PUSH
73100: LD_VAR 0 7
73104: ARRAY
73105: PPUSH
73106: LD_VAR 0 23
73110: PPUSH
73111: CALL_OW 113
73115: GO 73132
// ComHold ( group [ i ] ) ;
73117: LD_VAR 0 4
73121: PUSH
73122: LD_VAR 0 7
73126: ARRAY
73127: PPUSH
73128: CALL_OW 140
// continue ;
73132: GO 71976
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
73134: LD_VAR 0 4
73138: PUSH
73139: LD_VAR 0 7
73143: ARRAY
73144: PPUSH
73145: LD_INT 10
73147: PPUSH
73148: CALL 36198 0 2
73152: NOT
73153: PUSH
73154: LD_VAR 0 16
73158: PUSH
73159: LD_VAR 0 7
73163: ARRAY
73164: PUSH
73165: EMPTY
73166: EQUAL
73167: NOT
73168: AND
73169: IFFALSE 73435
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
73171: LD_VAR 0 4
73175: PUSH
73176: LD_VAR 0 7
73180: ARRAY
73181: PPUSH
73182: CALL_OW 262
73186: PUSH
73187: LD_INT 1
73189: PUSH
73190: LD_INT 2
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: IN
73197: IFFALSE 73238
// if GetFuel ( group [ i ] ) < 10 then
73199: LD_VAR 0 4
73203: PUSH
73204: LD_VAR 0 7
73208: ARRAY
73209: PPUSH
73210: CALL_OW 261
73214: PUSH
73215: LD_INT 10
73217: LESS
73218: IFFALSE 73238
// SetFuel ( group [ i ] , 12 ) ;
73220: LD_VAR 0 4
73224: PUSH
73225: LD_VAR 0 7
73229: ARRAY
73230: PPUSH
73231: LD_INT 12
73233: PPUSH
73234: CALL_OW 240
// if units_path [ i ] then
73238: LD_VAR 0 16
73242: PUSH
73243: LD_VAR 0 7
73247: ARRAY
73248: IFFALSE 73433
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
73250: LD_VAR 0 4
73254: PUSH
73255: LD_VAR 0 7
73259: ARRAY
73260: PPUSH
73261: LD_VAR 0 16
73265: PUSH
73266: LD_VAR 0 7
73270: ARRAY
73271: PUSH
73272: LD_INT 1
73274: ARRAY
73275: PUSH
73276: LD_INT 1
73278: ARRAY
73279: PPUSH
73280: LD_VAR 0 16
73284: PUSH
73285: LD_VAR 0 7
73289: ARRAY
73290: PUSH
73291: LD_INT 1
73293: ARRAY
73294: PUSH
73295: LD_INT 2
73297: ARRAY
73298: PPUSH
73299: CALL_OW 297
73303: PUSH
73304: LD_INT 6
73306: GREATER
73307: IFFALSE 73382
// begin if not HasTask ( group [ i ] ) then
73309: LD_VAR 0 4
73313: PUSH
73314: LD_VAR 0 7
73318: ARRAY
73319: PPUSH
73320: CALL_OW 314
73324: NOT
73325: IFFALSE 73380
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
73327: LD_VAR 0 4
73331: PUSH
73332: LD_VAR 0 7
73336: ARRAY
73337: PPUSH
73338: LD_VAR 0 16
73342: PUSH
73343: LD_VAR 0 7
73347: ARRAY
73348: PUSH
73349: LD_INT 1
73351: ARRAY
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PPUSH
73357: LD_VAR 0 16
73361: PUSH
73362: LD_VAR 0 7
73366: ARRAY
73367: PUSH
73368: LD_INT 1
73370: ARRAY
73371: PUSH
73372: LD_INT 2
73374: ARRAY
73375: PPUSH
73376: CALL_OW 114
// end else
73380: GO 73433
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
73382: LD_ADDR_VAR 0 15
73386: PUSH
73387: LD_VAR 0 16
73391: PUSH
73392: LD_VAR 0 7
73396: ARRAY
73397: PPUSH
73398: LD_INT 1
73400: PPUSH
73401: CALL_OW 3
73405: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
73406: LD_ADDR_VAR 0 16
73410: PUSH
73411: LD_VAR 0 16
73415: PPUSH
73416: LD_VAR 0 7
73420: PPUSH
73421: LD_VAR 0 15
73425: PPUSH
73426: CALL_OW 1
73430: ST_TO_ADDR
// continue ;
73431: GO 71976
// end ; end ; end else
73433: GO 76097
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
73435: LD_ADDR_VAR 0 14
73439: PUSH
73440: LD_INT 81
73442: PUSH
73443: LD_VAR 0 4
73447: PUSH
73448: LD_VAR 0 7
73452: ARRAY
73453: PPUSH
73454: CALL_OW 255
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PPUSH
73463: CALL_OW 69
73467: ST_TO_ADDR
// if not tmp then
73468: LD_VAR 0 14
73472: NOT
73473: IFFALSE 73477
// continue ;
73475: GO 71976
// if f_ignore_area then
73477: LD_VAR 0 17
73481: IFFALSE 73569
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
73483: LD_ADDR_VAR 0 15
73487: PUSH
73488: LD_VAR 0 14
73492: PPUSH
73493: LD_INT 3
73495: PUSH
73496: LD_INT 92
73498: PUSH
73499: LD_VAR 0 17
73503: PUSH
73504: LD_INT 1
73506: ARRAY
73507: PUSH
73508: LD_VAR 0 17
73512: PUSH
73513: LD_INT 2
73515: ARRAY
73516: PUSH
73517: LD_VAR 0 17
73521: PUSH
73522: LD_INT 3
73524: ARRAY
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PPUSH
73536: CALL_OW 72
73540: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
73541: LD_VAR 0 14
73545: PUSH
73546: LD_VAR 0 15
73550: DIFF
73551: IFFALSE 73569
// tmp := tmp diff tmp2 ;
73553: LD_ADDR_VAR 0 14
73557: PUSH
73558: LD_VAR 0 14
73562: PUSH
73563: LD_VAR 0 15
73567: DIFF
73568: ST_TO_ADDR
// end ; if not f_murder then
73569: LD_VAR 0 20
73573: NOT
73574: IFFALSE 73632
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
73576: LD_ADDR_VAR 0 15
73580: PUSH
73581: LD_VAR 0 14
73585: PPUSH
73586: LD_INT 3
73588: PUSH
73589: LD_INT 50
73591: PUSH
73592: EMPTY
73593: LIST
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PPUSH
73599: CALL_OW 72
73603: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
73604: LD_VAR 0 14
73608: PUSH
73609: LD_VAR 0 15
73613: DIFF
73614: IFFALSE 73632
// tmp := tmp diff tmp2 ;
73616: LD_ADDR_VAR 0 14
73620: PUSH
73621: LD_VAR 0 14
73625: PUSH
73626: LD_VAR 0 15
73630: DIFF
73631: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
73632: LD_ADDR_VAR 0 14
73636: PUSH
73637: LD_VAR 0 4
73641: PUSH
73642: LD_VAR 0 7
73646: ARRAY
73647: PPUSH
73648: LD_VAR 0 14
73652: PPUSH
73653: LD_INT 1
73655: PPUSH
73656: LD_INT 1
73658: PPUSH
73659: CALL 9841 0 4
73663: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
73664: LD_VAR 0 4
73668: PUSH
73669: LD_VAR 0 7
73673: ARRAY
73674: PPUSH
73675: CALL_OW 257
73679: PUSH
73680: LD_INT 1
73682: EQUAL
73683: IFFALSE 74131
// begin if WantPlant ( group [ i ] ) then
73685: LD_VAR 0 4
73689: PUSH
73690: LD_VAR 0 7
73694: ARRAY
73695: PPUSH
73696: CALL 9342 0 1
73700: IFFALSE 73704
// continue ;
73702: GO 71976
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
73704: LD_VAR 0 18
73708: PUSH
73709: LD_VAR 0 4
73713: PUSH
73714: LD_VAR 0 7
73718: ARRAY
73719: PPUSH
73720: CALL_OW 310
73724: NOT
73725: AND
73726: PUSH
73727: LD_VAR 0 14
73731: PUSH
73732: LD_INT 1
73734: ARRAY
73735: PUSH
73736: LD_VAR 0 14
73740: PPUSH
73741: LD_INT 21
73743: PUSH
73744: LD_INT 2
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 58
73753: PUSH
73754: EMPTY
73755: LIST
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PPUSH
73761: CALL_OW 72
73765: IN
73766: AND
73767: IFFALSE 73803
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
73769: LD_VAR 0 4
73773: PUSH
73774: LD_VAR 0 7
73778: ARRAY
73779: PPUSH
73780: LD_VAR 0 14
73784: PUSH
73785: LD_INT 1
73787: ARRAY
73788: PPUSH
73789: CALL_OW 120
// attacking := true ;
73793: LD_ADDR_VAR 0 29
73797: PUSH
73798: LD_INT 1
73800: ST_TO_ADDR
// continue ;
73801: GO 71976
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
73803: LD_VAR 0 26
73807: PUSH
73808: LD_VAR 0 4
73812: PUSH
73813: LD_VAR 0 7
73817: ARRAY
73818: PPUSH
73819: CALL_OW 257
73823: PUSH
73824: LD_INT 1
73826: EQUAL
73827: AND
73828: PUSH
73829: LD_VAR 0 4
73833: PUSH
73834: LD_VAR 0 7
73838: ARRAY
73839: PPUSH
73840: CALL_OW 256
73844: PUSH
73845: LD_INT 800
73847: LESS
73848: AND
73849: PUSH
73850: LD_VAR 0 4
73854: PUSH
73855: LD_VAR 0 7
73859: ARRAY
73860: PPUSH
73861: CALL_OW 318
73865: NOT
73866: AND
73867: IFFALSE 73884
// ComCrawl ( group [ i ] ) ;
73869: LD_VAR 0 4
73873: PUSH
73874: LD_VAR 0 7
73878: ARRAY
73879: PPUSH
73880: CALL_OW 137
// if f_mines then
73884: LD_VAR 0 21
73888: IFFALSE 74131
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
73890: LD_VAR 0 14
73894: PUSH
73895: LD_INT 1
73897: ARRAY
73898: PPUSH
73899: CALL_OW 247
73903: PUSH
73904: LD_INT 3
73906: EQUAL
73907: PUSH
73908: LD_VAR 0 14
73912: PUSH
73913: LD_INT 1
73915: ARRAY
73916: PUSH
73917: LD_VAR 0 27
73921: IN
73922: NOT
73923: AND
73924: IFFALSE 74131
// begin x := GetX ( tmp [ 1 ] ) ;
73926: LD_ADDR_VAR 0 10
73930: PUSH
73931: LD_VAR 0 14
73935: PUSH
73936: LD_INT 1
73938: ARRAY
73939: PPUSH
73940: CALL_OW 250
73944: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
73945: LD_ADDR_VAR 0 11
73949: PUSH
73950: LD_VAR 0 14
73954: PUSH
73955: LD_INT 1
73957: ARRAY
73958: PPUSH
73959: CALL_OW 251
73963: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
73964: LD_ADDR_VAR 0 12
73968: PUSH
73969: LD_VAR 0 4
73973: PUSH
73974: LD_VAR 0 7
73978: ARRAY
73979: PPUSH
73980: CALL 36283 0 1
73984: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
73985: LD_VAR 0 4
73989: PUSH
73990: LD_VAR 0 7
73994: ARRAY
73995: PPUSH
73996: LD_VAR 0 10
74000: PPUSH
74001: LD_VAR 0 11
74005: PPUSH
74006: LD_VAR 0 14
74010: PUSH
74011: LD_INT 1
74013: ARRAY
74014: PPUSH
74015: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
74019: LD_VAR 0 4
74023: PUSH
74024: LD_VAR 0 7
74028: ARRAY
74029: PPUSH
74030: LD_VAR 0 10
74034: PPUSH
74035: LD_VAR 0 12
74039: PPUSH
74040: LD_INT 7
74042: PPUSH
74043: CALL_OW 272
74047: PPUSH
74048: LD_VAR 0 11
74052: PPUSH
74053: LD_VAR 0 12
74057: PPUSH
74058: LD_INT 7
74060: PPUSH
74061: CALL_OW 273
74065: PPUSH
74066: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
74070: LD_VAR 0 4
74074: PUSH
74075: LD_VAR 0 7
74079: ARRAY
74080: PPUSH
74081: LD_INT 71
74083: PPUSH
74084: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
74088: LD_ADDR_VAR 0 27
74092: PUSH
74093: LD_VAR 0 27
74097: PPUSH
74098: LD_VAR 0 27
74102: PUSH
74103: LD_INT 1
74105: PLUS
74106: PPUSH
74107: LD_VAR 0 14
74111: PUSH
74112: LD_INT 1
74114: ARRAY
74115: PPUSH
74116: CALL_OW 1
74120: ST_TO_ADDR
// attacking := true ;
74121: LD_ADDR_VAR 0 29
74125: PUSH
74126: LD_INT 1
74128: ST_TO_ADDR
// continue ;
74129: GO 71976
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
74131: LD_VAR 0 4
74135: PUSH
74136: LD_VAR 0 7
74140: ARRAY
74141: PPUSH
74142: CALL_OW 257
74146: PUSH
74147: LD_INT 17
74149: EQUAL
74150: PUSH
74151: LD_VAR 0 4
74155: PUSH
74156: LD_VAR 0 7
74160: ARRAY
74161: PPUSH
74162: CALL_OW 110
74166: PUSH
74167: LD_INT 71
74169: EQUAL
74170: NOT
74171: AND
74172: IFFALSE 74318
// begin attacking := false ;
74174: LD_ADDR_VAR 0 29
74178: PUSH
74179: LD_INT 0
74181: ST_TO_ADDR
// k := 5 ;
74182: LD_ADDR_VAR 0 9
74186: PUSH
74187: LD_INT 5
74189: ST_TO_ADDR
// if tmp < k then
74190: LD_VAR 0 14
74194: PUSH
74195: LD_VAR 0 9
74199: LESS
74200: IFFALSE 74212
// k := tmp ;
74202: LD_ADDR_VAR 0 9
74206: PUSH
74207: LD_VAR 0 14
74211: ST_TO_ADDR
// for j = 1 to k do
74212: LD_ADDR_VAR 0 8
74216: PUSH
74217: DOUBLE
74218: LD_INT 1
74220: DEC
74221: ST_TO_ADDR
74222: LD_VAR 0 9
74226: PUSH
74227: FOR_TO
74228: IFFALSE 74316
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
74230: LD_VAR 0 14
74234: PUSH
74235: LD_VAR 0 8
74239: ARRAY
74240: PUSH
74241: LD_VAR 0 14
74245: PPUSH
74246: LD_INT 58
74248: PUSH
74249: EMPTY
74250: LIST
74251: PPUSH
74252: CALL_OW 72
74256: IN
74257: NOT
74258: IFFALSE 74314
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74260: LD_VAR 0 4
74264: PUSH
74265: LD_VAR 0 7
74269: ARRAY
74270: PPUSH
74271: LD_VAR 0 14
74275: PUSH
74276: LD_VAR 0 8
74280: ARRAY
74281: PPUSH
74282: CALL_OW 115
// attacking := true ;
74286: LD_ADDR_VAR 0 29
74290: PUSH
74291: LD_INT 1
74293: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
74294: LD_VAR 0 4
74298: PUSH
74299: LD_VAR 0 7
74303: ARRAY
74304: PPUSH
74305: LD_INT 71
74307: PPUSH
74308: CALL_OW 109
// continue ;
74312: GO 74227
// end ; end ;
74314: GO 74227
74316: POP
74317: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
74318: LD_VAR 0 4
74322: PUSH
74323: LD_VAR 0 7
74327: ARRAY
74328: PPUSH
74329: CALL_OW 257
74333: PUSH
74334: LD_INT 8
74336: EQUAL
74337: PUSH
74338: LD_VAR 0 4
74342: PUSH
74343: LD_VAR 0 7
74347: ARRAY
74348: PPUSH
74349: CALL_OW 264
74353: PUSH
74354: LD_INT 28
74356: PUSH
74357: LD_INT 45
74359: PUSH
74360: LD_INT 7
74362: PUSH
74363: LD_INT 47
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: IN
74372: OR
74373: IFFALSE 74629
// begin attacking := false ;
74375: LD_ADDR_VAR 0 29
74379: PUSH
74380: LD_INT 0
74382: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
74383: LD_VAR 0 14
74387: PUSH
74388: LD_INT 1
74390: ARRAY
74391: PPUSH
74392: CALL_OW 266
74396: PUSH
74397: LD_INT 32
74399: PUSH
74400: LD_INT 31
74402: PUSH
74403: LD_INT 33
74405: PUSH
74406: LD_INT 4
74408: PUSH
74409: LD_INT 5
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: IN
74419: IFFALSE 74605
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
74421: LD_ADDR_VAR 0 9
74425: PUSH
74426: LD_VAR 0 14
74430: PUSH
74431: LD_INT 1
74433: ARRAY
74434: PPUSH
74435: CALL_OW 266
74439: PPUSH
74440: LD_VAR 0 14
74444: PUSH
74445: LD_INT 1
74447: ARRAY
74448: PPUSH
74449: CALL_OW 250
74453: PPUSH
74454: LD_VAR 0 14
74458: PUSH
74459: LD_INT 1
74461: ARRAY
74462: PPUSH
74463: CALL_OW 251
74467: PPUSH
74468: LD_VAR 0 14
74472: PUSH
74473: LD_INT 1
74475: ARRAY
74476: PPUSH
74477: CALL_OW 254
74481: PPUSH
74482: LD_VAR 0 14
74486: PUSH
74487: LD_INT 1
74489: ARRAY
74490: PPUSH
74491: CALL_OW 248
74495: PPUSH
74496: LD_INT 0
74498: PPUSH
74499: CALL 17653 0 6
74503: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
74504: LD_ADDR_VAR 0 8
74508: PUSH
74509: LD_VAR 0 4
74513: PUSH
74514: LD_VAR 0 7
74518: ARRAY
74519: PPUSH
74520: LD_VAR 0 9
74524: PPUSH
74525: CALL 36323 0 2
74529: ST_TO_ADDR
// if j then
74530: LD_VAR 0 8
74534: IFFALSE 74603
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
74536: LD_VAR 0 8
74540: PUSH
74541: LD_INT 1
74543: ARRAY
74544: PPUSH
74545: LD_VAR 0 8
74549: PUSH
74550: LD_INT 2
74552: ARRAY
74553: PPUSH
74554: CALL_OW 488
74558: IFFALSE 74603
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
74560: LD_VAR 0 4
74564: PUSH
74565: LD_VAR 0 7
74569: ARRAY
74570: PPUSH
74571: LD_VAR 0 8
74575: PUSH
74576: LD_INT 1
74578: ARRAY
74579: PPUSH
74580: LD_VAR 0 8
74584: PUSH
74585: LD_INT 2
74587: ARRAY
74588: PPUSH
74589: CALL_OW 116
// attacking := true ;
74593: LD_ADDR_VAR 0 29
74597: PUSH
74598: LD_INT 1
74600: ST_TO_ADDR
// continue ;
74601: GO 71976
// end ; end else
74603: GO 74629
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74605: LD_VAR 0 4
74609: PUSH
74610: LD_VAR 0 7
74614: ARRAY
74615: PPUSH
74616: LD_VAR 0 14
74620: PUSH
74621: LD_INT 1
74623: ARRAY
74624: PPUSH
74625: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
74629: LD_VAR 0 4
74633: PUSH
74634: LD_VAR 0 7
74638: ARRAY
74639: PPUSH
74640: CALL_OW 265
74644: PUSH
74645: LD_INT 11
74647: EQUAL
74648: IFFALSE 74926
// begin k := 10 ;
74650: LD_ADDR_VAR 0 9
74654: PUSH
74655: LD_INT 10
74657: ST_TO_ADDR
// x := 0 ;
74658: LD_ADDR_VAR 0 10
74662: PUSH
74663: LD_INT 0
74665: ST_TO_ADDR
// if tmp < k then
74666: LD_VAR 0 14
74670: PUSH
74671: LD_VAR 0 9
74675: LESS
74676: IFFALSE 74688
// k := tmp ;
74678: LD_ADDR_VAR 0 9
74682: PUSH
74683: LD_VAR 0 14
74687: ST_TO_ADDR
// for j = k downto 1 do
74688: LD_ADDR_VAR 0 8
74692: PUSH
74693: DOUBLE
74694: LD_VAR 0 9
74698: INC
74699: ST_TO_ADDR
74700: LD_INT 1
74702: PUSH
74703: FOR_DOWNTO
74704: IFFALSE 74779
// begin if GetType ( tmp [ j ] ) = unit_human then
74706: LD_VAR 0 14
74710: PUSH
74711: LD_VAR 0 8
74715: ARRAY
74716: PPUSH
74717: CALL_OW 247
74721: PUSH
74722: LD_INT 1
74724: EQUAL
74725: IFFALSE 74777
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
74727: LD_VAR 0 4
74731: PUSH
74732: LD_VAR 0 7
74736: ARRAY
74737: PPUSH
74738: LD_VAR 0 14
74742: PUSH
74743: LD_VAR 0 8
74747: ARRAY
74748: PPUSH
74749: CALL 36594 0 2
// x := tmp [ j ] ;
74753: LD_ADDR_VAR 0 10
74757: PUSH
74758: LD_VAR 0 14
74762: PUSH
74763: LD_VAR 0 8
74767: ARRAY
74768: ST_TO_ADDR
// attacking := true ;
74769: LD_ADDR_VAR 0 29
74773: PUSH
74774: LD_INT 1
74776: ST_TO_ADDR
// end ; end ;
74777: GO 74703
74779: POP
74780: POP
// if not x then
74781: LD_VAR 0 10
74785: NOT
74786: IFFALSE 74926
// begin attacking := true ;
74788: LD_ADDR_VAR 0 29
74792: PUSH
74793: LD_INT 1
74795: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
74796: LD_VAR 0 4
74800: PUSH
74801: LD_VAR 0 7
74805: ARRAY
74806: PPUSH
74807: CALL_OW 250
74811: PPUSH
74812: LD_VAR 0 4
74816: PUSH
74817: LD_VAR 0 7
74821: ARRAY
74822: PPUSH
74823: CALL_OW 251
74827: PPUSH
74828: CALL_OW 546
74832: PUSH
74833: LD_INT 2
74835: ARRAY
74836: PUSH
74837: LD_VAR 0 14
74841: PUSH
74842: LD_INT 1
74844: ARRAY
74845: PPUSH
74846: CALL_OW 250
74850: PPUSH
74851: LD_VAR 0 14
74855: PUSH
74856: LD_INT 1
74858: ARRAY
74859: PPUSH
74860: CALL_OW 251
74864: PPUSH
74865: CALL_OW 546
74869: PUSH
74870: LD_INT 2
74872: ARRAY
74873: EQUAL
74874: IFFALSE 74902
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
74876: LD_VAR 0 4
74880: PUSH
74881: LD_VAR 0 7
74885: ARRAY
74886: PPUSH
74887: LD_VAR 0 14
74891: PUSH
74892: LD_INT 1
74894: ARRAY
74895: PPUSH
74896: CALL 36594 0 2
74900: GO 74926
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74902: LD_VAR 0 4
74906: PUSH
74907: LD_VAR 0 7
74911: ARRAY
74912: PPUSH
74913: LD_VAR 0 14
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PPUSH
74922: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
74926: LD_VAR 0 4
74930: PUSH
74931: LD_VAR 0 7
74935: ARRAY
74936: PPUSH
74937: CALL_OW 264
74941: PUSH
74942: LD_INT 29
74944: EQUAL
74945: IFFALSE 75311
// begin if WantsToAttack ( group [ i ] ) in bombed then
74947: LD_VAR 0 4
74951: PUSH
74952: LD_VAR 0 7
74956: ARRAY
74957: PPUSH
74958: CALL_OW 319
74962: PUSH
74963: LD_VAR 0 28
74967: IN
74968: IFFALSE 74972
// continue ;
74970: GO 71976
// k := 8 ;
74972: LD_ADDR_VAR 0 9
74976: PUSH
74977: LD_INT 8
74979: ST_TO_ADDR
// x := 0 ;
74980: LD_ADDR_VAR 0 10
74984: PUSH
74985: LD_INT 0
74987: ST_TO_ADDR
// if tmp < k then
74988: LD_VAR 0 14
74992: PUSH
74993: LD_VAR 0 9
74997: LESS
74998: IFFALSE 75010
// k := tmp ;
75000: LD_ADDR_VAR 0 9
75004: PUSH
75005: LD_VAR 0 14
75009: ST_TO_ADDR
// for j = 1 to k do
75010: LD_ADDR_VAR 0 8
75014: PUSH
75015: DOUBLE
75016: LD_INT 1
75018: DEC
75019: ST_TO_ADDR
75020: LD_VAR 0 9
75024: PUSH
75025: FOR_TO
75026: IFFALSE 75158
// begin if GetType ( tmp [ j ] ) = unit_building then
75028: LD_VAR 0 14
75032: PUSH
75033: LD_VAR 0 8
75037: ARRAY
75038: PPUSH
75039: CALL_OW 247
75043: PUSH
75044: LD_INT 3
75046: EQUAL
75047: IFFALSE 75156
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
75049: LD_VAR 0 14
75053: PUSH
75054: LD_VAR 0 8
75058: ARRAY
75059: PUSH
75060: LD_VAR 0 28
75064: IN
75065: NOT
75066: PUSH
75067: LD_VAR 0 14
75071: PUSH
75072: LD_VAR 0 8
75076: ARRAY
75077: PPUSH
75078: CALL_OW 313
75082: AND
75083: IFFALSE 75156
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
75085: LD_VAR 0 4
75089: PUSH
75090: LD_VAR 0 7
75094: ARRAY
75095: PPUSH
75096: LD_VAR 0 14
75100: PUSH
75101: LD_VAR 0 8
75105: ARRAY
75106: PPUSH
75107: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
75111: LD_ADDR_VAR 0 28
75115: PUSH
75116: LD_VAR 0 28
75120: PPUSH
75121: LD_VAR 0 28
75125: PUSH
75126: LD_INT 1
75128: PLUS
75129: PPUSH
75130: LD_VAR 0 14
75134: PUSH
75135: LD_VAR 0 8
75139: ARRAY
75140: PPUSH
75141: CALL_OW 1
75145: ST_TO_ADDR
// attacking := true ;
75146: LD_ADDR_VAR 0 29
75150: PUSH
75151: LD_INT 1
75153: ST_TO_ADDR
// break ;
75154: GO 75158
// end ; end ;
75156: GO 75025
75158: POP
75159: POP
// if not attacking and f_attack_depot then
75160: LD_VAR 0 29
75164: NOT
75165: PUSH
75166: LD_VAR 0 25
75170: AND
75171: IFFALSE 75266
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75173: LD_ADDR_VAR 0 13
75177: PUSH
75178: LD_VAR 0 14
75182: PPUSH
75183: LD_INT 2
75185: PUSH
75186: LD_INT 30
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 30
75198: PUSH
75199: LD_INT 1
75201: PUSH
75202: EMPTY
75203: LIST
75204: LIST
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: PPUSH
75211: CALL_OW 72
75215: ST_TO_ADDR
// if z then
75216: LD_VAR 0 13
75220: IFFALSE 75266
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
75222: LD_VAR 0 4
75226: PUSH
75227: LD_VAR 0 7
75231: ARRAY
75232: PPUSH
75233: LD_VAR 0 13
75237: PPUSH
75238: LD_VAR 0 4
75242: PUSH
75243: LD_VAR 0 7
75247: ARRAY
75248: PPUSH
75249: CALL_OW 74
75253: PPUSH
75254: CALL_OW 115
// attacking := true ;
75258: LD_ADDR_VAR 0 29
75262: PUSH
75263: LD_INT 1
75265: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
75266: LD_VAR 0 4
75270: PUSH
75271: LD_VAR 0 7
75275: ARRAY
75276: PPUSH
75277: CALL_OW 256
75281: PUSH
75282: LD_INT 500
75284: LESS
75285: IFFALSE 75311
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
75287: LD_VAR 0 4
75291: PUSH
75292: LD_VAR 0 7
75296: ARRAY
75297: PPUSH
75298: LD_VAR 0 14
75302: PUSH
75303: LD_INT 1
75305: ARRAY
75306: PPUSH
75307: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
75311: LD_VAR 0 4
75315: PUSH
75316: LD_VAR 0 7
75320: ARRAY
75321: PPUSH
75322: CALL_OW 264
75326: PUSH
75327: LD_INT 49
75329: EQUAL
75330: IFFALSE 75451
// begin if not HasTask ( group [ i ] ) then
75332: LD_VAR 0 4
75336: PUSH
75337: LD_VAR 0 7
75341: ARRAY
75342: PPUSH
75343: CALL_OW 314
75347: NOT
75348: IFFALSE 75451
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
75350: LD_ADDR_VAR 0 9
75354: PUSH
75355: LD_INT 81
75357: PUSH
75358: LD_VAR 0 4
75362: PUSH
75363: LD_VAR 0 7
75367: ARRAY
75368: PPUSH
75369: CALL_OW 255
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: PPUSH
75378: CALL_OW 69
75382: PPUSH
75383: LD_VAR 0 4
75387: PUSH
75388: LD_VAR 0 7
75392: ARRAY
75393: PPUSH
75394: CALL_OW 74
75398: ST_TO_ADDR
// if k then
75399: LD_VAR 0 9
75403: IFFALSE 75451
// if GetDistUnits ( group [ i ] , k ) > 10 then
75405: LD_VAR 0 4
75409: PUSH
75410: LD_VAR 0 7
75414: ARRAY
75415: PPUSH
75416: LD_VAR 0 9
75420: PPUSH
75421: CALL_OW 296
75425: PUSH
75426: LD_INT 10
75428: GREATER
75429: IFFALSE 75451
// ComMoveUnit ( group [ i ] , k ) ;
75431: LD_VAR 0 4
75435: PUSH
75436: LD_VAR 0 7
75440: ARRAY
75441: PPUSH
75442: LD_VAR 0 9
75446: PPUSH
75447: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75451: LD_VAR 0 4
75455: PUSH
75456: LD_VAR 0 7
75460: ARRAY
75461: PPUSH
75462: CALL_OW 256
75466: PUSH
75467: LD_INT 250
75469: LESS
75470: PUSH
75471: LD_VAR 0 4
75475: PUSH
75476: LD_VAR 0 7
75480: ARRAY
75481: PUSH
75482: LD_INT 21
75484: PUSH
75485: LD_INT 2
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 23
75494: PUSH
75495: LD_INT 2
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PPUSH
75506: CALL_OW 69
75510: IN
75511: AND
75512: IFFALSE 75637
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
75514: LD_ADDR_VAR 0 9
75518: PUSH
75519: LD_OWVAR 3
75523: PUSH
75524: LD_VAR 0 4
75528: PUSH
75529: LD_VAR 0 7
75533: ARRAY
75534: DIFF
75535: PPUSH
75536: LD_VAR 0 4
75540: PUSH
75541: LD_VAR 0 7
75545: ARRAY
75546: PPUSH
75547: CALL_OW 74
75551: ST_TO_ADDR
// if not k then
75552: LD_VAR 0 9
75556: NOT
75557: IFFALSE 75561
// continue ;
75559: GO 71976
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
75561: LD_VAR 0 9
75565: PUSH
75566: LD_INT 81
75568: PUSH
75569: LD_VAR 0 4
75573: PUSH
75574: LD_VAR 0 7
75578: ARRAY
75579: PPUSH
75580: CALL_OW 255
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PPUSH
75589: CALL_OW 69
75593: IN
75594: PUSH
75595: LD_VAR 0 9
75599: PPUSH
75600: LD_VAR 0 4
75604: PUSH
75605: LD_VAR 0 7
75609: ARRAY
75610: PPUSH
75611: CALL_OW 296
75615: PUSH
75616: LD_INT 5
75618: LESS
75619: AND
75620: IFFALSE 75637
// ComAutodestruct ( group [ i ] ) ;
75622: LD_VAR 0 4
75626: PUSH
75627: LD_VAR 0 7
75631: ARRAY
75632: PPUSH
75633: CALL 36492 0 1
// end ; if f_attack_depot then
75637: LD_VAR 0 25
75641: IFFALSE 75753
// begin k := 6 ;
75643: LD_ADDR_VAR 0 9
75647: PUSH
75648: LD_INT 6
75650: ST_TO_ADDR
// if tmp < k then
75651: LD_VAR 0 14
75655: PUSH
75656: LD_VAR 0 9
75660: LESS
75661: IFFALSE 75673
// k := tmp ;
75663: LD_ADDR_VAR 0 9
75667: PUSH
75668: LD_VAR 0 14
75672: ST_TO_ADDR
// for j = 1 to k do
75673: LD_ADDR_VAR 0 8
75677: PUSH
75678: DOUBLE
75679: LD_INT 1
75681: DEC
75682: ST_TO_ADDR
75683: LD_VAR 0 9
75687: PUSH
75688: FOR_TO
75689: IFFALSE 75751
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
75691: LD_VAR 0 8
75695: PPUSH
75696: CALL_OW 266
75700: PUSH
75701: LD_INT 0
75703: PUSH
75704: LD_INT 1
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: IN
75711: IFFALSE 75749
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
75713: LD_VAR 0 4
75717: PUSH
75718: LD_VAR 0 7
75722: ARRAY
75723: PPUSH
75724: LD_VAR 0 14
75728: PUSH
75729: LD_VAR 0 8
75733: ARRAY
75734: PPUSH
75735: CALL_OW 115
// attacking := true ;
75739: LD_ADDR_VAR 0 29
75743: PUSH
75744: LD_INT 1
75746: ST_TO_ADDR
// break ;
75747: GO 75751
// end ;
75749: GO 75688
75751: POP
75752: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
75753: LD_VAR 0 4
75757: PUSH
75758: LD_VAR 0 7
75762: ARRAY
75763: PPUSH
75764: CALL_OW 302
75768: PUSH
75769: LD_VAR 0 29
75773: NOT
75774: AND
75775: IFFALSE 76097
// begin if GetTag ( group [ i ] ) = 71 then
75777: LD_VAR 0 4
75781: PUSH
75782: LD_VAR 0 7
75786: ARRAY
75787: PPUSH
75788: CALL_OW 110
75792: PUSH
75793: LD_INT 71
75795: EQUAL
75796: IFFALSE 75837
// begin if HasTask ( group [ i ] ) then
75798: LD_VAR 0 4
75802: PUSH
75803: LD_VAR 0 7
75807: ARRAY
75808: PPUSH
75809: CALL_OW 314
75813: IFFALSE 75819
// continue else
75815: GO 71976
75817: GO 75837
// SetTag ( group [ i ] , 0 ) ;
75819: LD_VAR 0 4
75823: PUSH
75824: LD_VAR 0 7
75828: ARRAY
75829: PPUSH
75830: LD_INT 0
75832: PPUSH
75833: CALL_OW 109
// end ; k := 8 ;
75837: LD_ADDR_VAR 0 9
75841: PUSH
75842: LD_INT 8
75844: ST_TO_ADDR
// x := 0 ;
75845: LD_ADDR_VAR 0 10
75849: PUSH
75850: LD_INT 0
75852: ST_TO_ADDR
// if tmp < k then
75853: LD_VAR 0 14
75857: PUSH
75858: LD_VAR 0 9
75862: LESS
75863: IFFALSE 75875
// k := tmp ;
75865: LD_ADDR_VAR 0 9
75869: PUSH
75870: LD_VAR 0 14
75874: ST_TO_ADDR
// for j = 1 to k do
75875: LD_ADDR_VAR 0 8
75879: PUSH
75880: DOUBLE
75881: LD_INT 1
75883: DEC
75884: ST_TO_ADDR
75885: LD_VAR 0 9
75889: PUSH
75890: FOR_TO
75891: IFFALSE 75989
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
75893: LD_VAR 0 14
75897: PUSH
75898: LD_VAR 0 8
75902: ARRAY
75903: PPUSH
75904: CALL_OW 247
75908: PUSH
75909: LD_INT 1
75911: EQUAL
75912: PUSH
75913: LD_VAR 0 14
75917: PUSH
75918: LD_VAR 0 8
75922: ARRAY
75923: PPUSH
75924: CALL_OW 256
75928: PUSH
75929: LD_INT 250
75931: LESS
75932: PUSH
75933: LD_VAR 0 20
75937: AND
75938: PUSH
75939: LD_VAR 0 20
75943: NOT
75944: PUSH
75945: LD_VAR 0 14
75949: PUSH
75950: LD_VAR 0 8
75954: ARRAY
75955: PPUSH
75956: CALL_OW 256
75960: PUSH
75961: LD_INT 250
75963: GREATEREQUAL
75964: AND
75965: OR
75966: AND
75967: IFFALSE 75987
// begin x := tmp [ j ] ;
75969: LD_ADDR_VAR 0 10
75973: PUSH
75974: LD_VAR 0 14
75978: PUSH
75979: LD_VAR 0 8
75983: ARRAY
75984: ST_TO_ADDR
// break ;
75985: GO 75989
// end ;
75987: GO 75890
75989: POP
75990: POP
// if x then
75991: LD_VAR 0 10
75995: IFFALSE 76019
// ComAttackUnit ( group [ i ] , x ) else
75997: LD_VAR 0 4
76001: PUSH
76002: LD_VAR 0 7
76006: ARRAY
76007: PPUSH
76008: LD_VAR 0 10
76012: PPUSH
76013: CALL_OW 115
76017: GO 76043
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
76019: LD_VAR 0 4
76023: PUSH
76024: LD_VAR 0 7
76028: ARRAY
76029: PPUSH
76030: LD_VAR 0 14
76034: PUSH
76035: LD_INT 1
76037: ARRAY
76038: PPUSH
76039: CALL_OW 115
// if not HasTask ( group [ i ] ) then
76043: LD_VAR 0 4
76047: PUSH
76048: LD_VAR 0 7
76052: ARRAY
76053: PPUSH
76054: CALL_OW 314
76058: NOT
76059: IFFALSE 76097
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
76061: LD_VAR 0 4
76065: PUSH
76066: LD_VAR 0 7
76070: ARRAY
76071: PPUSH
76072: LD_VAR 0 14
76076: PPUSH
76077: LD_VAR 0 4
76081: PUSH
76082: LD_VAR 0 7
76086: ARRAY
76087: PPUSH
76088: CALL_OW 74
76092: PPUSH
76093: CALL_OW 115
// end ; end ; end ;
76097: GO 71976
76099: POP
76100: POP
// wait ( 0 0$2 ) ;
76101: LD_INT 70
76103: PPUSH
76104: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
76108: LD_VAR 0 4
76112: NOT
76113: PUSH
76114: LD_VAR 0 4
76118: PUSH
76119: EMPTY
76120: EQUAL
76121: OR
76122: PUSH
76123: LD_INT 81
76125: PUSH
76126: LD_VAR 0 35
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PPUSH
76135: CALL_OW 69
76139: NOT
76140: OR
76141: IFFALSE 71961
// end ;
76143: LD_VAR 0 2
76147: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
76148: LD_INT 0
76150: PPUSH
76151: PPUSH
76152: PPUSH
76153: PPUSH
76154: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
76155: LD_VAR 0 1
76159: NOT
76160: PUSH
76161: LD_EXP 14
76165: PUSH
76166: LD_VAR 0 1
76170: ARRAY
76171: NOT
76172: OR
76173: PUSH
76174: LD_VAR 0 2
76178: NOT
76179: OR
76180: PUSH
76181: LD_VAR 0 3
76185: NOT
76186: OR
76187: IFFALSE 76191
// exit ;
76189: GO 76704
// side := mc_sides [ base ] ;
76191: LD_ADDR_VAR 0 6
76195: PUSH
76196: LD_EXP 40
76200: PUSH
76201: LD_VAR 0 1
76205: ARRAY
76206: ST_TO_ADDR
// if not side then
76207: LD_VAR 0 6
76211: NOT
76212: IFFALSE 76216
// exit ;
76214: GO 76704
// for i in solds do
76216: LD_ADDR_VAR 0 7
76220: PUSH
76221: LD_VAR 0 2
76225: PUSH
76226: FOR_IN
76227: IFFALSE 76288
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
76229: LD_VAR 0 7
76233: PPUSH
76234: CALL_OW 310
76238: PPUSH
76239: CALL_OW 266
76243: PUSH
76244: LD_INT 32
76246: PUSH
76247: LD_INT 31
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: IN
76254: IFFALSE 76274
// solds := solds diff i else
76256: LD_ADDR_VAR 0 2
76260: PUSH
76261: LD_VAR 0 2
76265: PUSH
76266: LD_VAR 0 7
76270: DIFF
76271: ST_TO_ADDR
76272: GO 76286
// SetTag ( i , 18 ) ;
76274: LD_VAR 0 7
76278: PPUSH
76279: LD_INT 18
76281: PPUSH
76282: CALL_OW 109
76286: GO 76226
76288: POP
76289: POP
// if not solds then
76290: LD_VAR 0 2
76294: NOT
76295: IFFALSE 76299
// exit ;
76297: GO 76704
// repeat wait ( 0 0$1 ) ;
76299: LD_INT 35
76301: PPUSH
76302: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
76306: LD_ADDR_VAR 0 5
76310: PUSH
76311: LD_VAR 0 6
76315: PPUSH
76316: LD_VAR 0 3
76320: PPUSH
76321: CALL 6207 0 2
76325: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
76326: LD_EXP 14
76330: PUSH
76331: LD_VAR 0 1
76335: ARRAY
76336: NOT
76337: PUSH
76338: LD_EXP 14
76342: PUSH
76343: LD_VAR 0 1
76347: ARRAY
76348: PUSH
76349: EMPTY
76350: EQUAL
76351: OR
76352: IFFALSE 76389
// begin for i in solds do
76354: LD_ADDR_VAR 0 7
76358: PUSH
76359: LD_VAR 0 2
76363: PUSH
76364: FOR_IN
76365: IFFALSE 76378
// ComStop ( i ) ;
76367: LD_VAR 0 7
76371: PPUSH
76372: CALL_OW 141
76376: GO 76364
76378: POP
76379: POP
// solds := [ ] ;
76380: LD_ADDR_VAR 0 2
76384: PUSH
76385: EMPTY
76386: ST_TO_ADDR
// exit ;
76387: GO 76704
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
76389: LD_VAR 0 5
76393: NOT
76394: PUSH
76395: LD_VAR 0 5
76399: PUSH
76400: LD_INT 3
76402: GREATER
76403: OR
76404: PUSH
76405: LD_EXP 36
76409: PUSH
76410: LD_VAR 0 1
76414: ARRAY
76415: OR
76416: IFFALSE 76457
// begin for i in solds do
76418: LD_ADDR_VAR 0 7
76422: PUSH
76423: LD_VAR 0 2
76427: PUSH
76428: FOR_IN
76429: IFFALSE 76453
// if HasTask ( i ) then
76431: LD_VAR 0 7
76435: PPUSH
76436: CALL_OW 314
76440: IFFALSE 76451
// ComStop ( i ) ;
76442: LD_VAR 0 7
76446: PPUSH
76447: CALL_OW 141
76451: GO 76428
76453: POP
76454: POP
// break ;
76455: GO 76692
// end ; for i in solds do
76457: LD_ADDR_VAR 0 7
76461: PUSH
76462: LD_VAR 0 2
76466: PUSH
76467: FOR_IN
76468: IFFALSE 76684
// begin if IsInUnit ( i ) then
76470: LD_VAR 0 7
76474: PPUSH
76475: CALL_OW 310
76479: IFFALSE 76490
// ComExitBuilding ( i ) ;
76481: LD_VAR 0 7
76485: PPUSH
76486: CALL_OW 122
// if GetLives ( i ) > 333 then
76490: LD_VAR 0 7
76494: PPUSH
76495: CALL_OW 256
76499: PUSH
76500: LD_INT 333
76502: GREATER
76503: IFFALSE 76531
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76505: LD_VAR 0 7
76509: PPUSH
76510: LD_VAR 0 5
76514: PPUSH
76515: LD_VAR 0 7
76519: PPUSH
76520: CALL_OW 74
76524: PPUSH
76525: CALL_OW 115
76529: GO 76682
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
76531: LD_ADDR_VAR 0 8
76535: PUSH
76536: LD_EXP 14
76540: PUSH
76541: LD_VAR 0 1
76545: ARRAY
76546: PPUSH
76547: LD_INT 2
76549: PUSH
76550: LD_INT 30
76552: PUSH
76553: LD_INT 0
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 30
76562: PUSH
76563: LD_INT 1
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: LD_INT 30
76572: PUSH
76573: LD_INT 6
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: PPUSH
76586: CALL_OW 72
76590: PPUSH
76591: LD_VAR 0 7
76595: PPUSH
76596: CALL_OW 74
76600: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
76601: LD_VAR 0 7
76605: PPUSH
76606: LD_VAR 0 8
76610: PPUSH
76611: CALL_OW 250
76615: PPUSH
76616: LD_INT 3
76618: PPUSH
76619: LD_INT 5
76621: PPUSH
76622: CALL_OW 272
76626: PPUSH
76627: LD_VAR 0 8
76631: PPUSH
76632: CALL_OW 251
76636: PPUSH
76637: LD_INT 3
76639: PPUSH
76640: LD_INT 5
76642: PPUSH
76643: CALL_OW 273
76647: PPUSH
76648: CALL_OW 111
// SetTag ( i , 0 ) ;
76652: LD_VAR 0 7
76656: PPUSH
76657: LD_INT 0
76659: PPUSH
76660: CALL_OW 109
// solds := solds diff i ;
76664: LD_ADDR_VAR 0 2
76668: PUSH
76669: LD_VAR 0 2
76673: PUSH
76674: LD_VAR 0 7
76678: DIFF
76679: ST_TO_ADDR
// continue ;
76680: GO 76467
// end ; end ;
76682: GO 76467
76684: POP
76685: POP
// until solds ;
76686: LD_VAR 0 2
76690: IFFALSE 76299
// MC_Reset ( base , 18 ) ;
76692: LD_VAR 0 1
76696: PPUSH
76697: LD_INT 18
76699: PPUSH
76700: CALL 45350 0 2
// end ;
76704: LD_VAR 0 4
76708: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
76709: LD_INT 0
76711: PPUSH
76712: PPUSH
76713: PPUSH
76714: PPUSH
76715: PPUSH
76716: PPUSH
76717: PPUSH
76718: PPUSH
76719: PPUSH
76720: PPUSH
76721: PPUSH
76722: PPUSH
76723: PPUSH
76724: PPUSH
76725: PPUSH
76726: PPUSH
76727: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
76728: LD_ADDR_VAR 0 13
76732: PUSH
76733: LD_EXP 14
76737: PUSH
76738: LD_VAR 0 1
76742: ARRAY
76743: PPUSH
76744: LD_INT 25
76746: PUSH
76747: LD_INT 3
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PPUSH
76754: CALL_OW 72
76758: ST_TO_ADDR
// if mc_remote_driver [ base ] then
76759: LD_EXP 54
76763: PUSH
76764: LD_VAR 0 1
76768: ARRAY
76769: IFFALSE 76793
// mechs := mechs diff mc_remote_driver [ base ] ;
76771: LD_ADDR_VAR 0 13
76775: PUSH
76776: LD_VAR 0 13
76780: PUSH
76781: LD_EXP 54
76785: PUSH
76786: LD_VAR 0 1
76790: ARRAY
76791: DIFF
76792: ST_TO_ADDR
// for i in mechs do
76793: LD_ADDR_VAR 0 5
76797: PUSH
76798: LD_VAR 0 13
76802: PUSH
76803: FOR_IN
76804: IFFALSE 76839
// if GetTag ( i ) > 0 then
76806: LD_VAR 0 5
76810: PPUSH
76811: CALL_OW 110
76815: PUSH
76816: LD_INT 0
76818: GREATER
76819: IFFALSE 76837
// mechs := mechs diff i ;
76821: LD_ADDR_VAR 0 13
76825: PUSH
76826: LD_VAR 0 13
76830: PUSH
76831: LD_VAR 0 5
76835: DIFF
76836: ST_TO_ADDR
76837: GO 76803
76839: POP
76840: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
76841: LD_ADDR_VAR 0 9
76845: PUSH
76846: LD_EXP 14
76850: PUSH
76851: LD_VAR 0 1
76855: ARRAY
76856: PPUSH
76857: LD_INT 2
76859: PUSH
76860: LD_INT 25
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: LD_INT 25
76872: PUSH
76873: LD_INT 5
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 25
76882: PUSH
76883: LD_INT 8
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: LD_INT 25
76892: PUSH
76893: LD_INT 9
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: LIST
76904: LIST
76905: LIST
76906: PPUSH
76907: CALL_OW 72
76911: ST_TO_ADDR
// if not defenders and not solds then
76912: LD_VAR 0 2
76916: NOT
76917: PUSH
76918: LD_VAR 0 9
76922: NOT
76923: AND
76924: IFFALSE 76928
// exit ;
76926: GO 78554
// depot_under_attack := false ;
76928: LD_ADDR_VAR 0 17
76932: PUSH
76933: LD_INT 0
76935: ST_TO_ADDR
// sold_defenders := [ ] ;
76936: LD_ADDR_VAR 0 18
76940: PUSH
76941: EMPTY
76942: ST_TO_ADDR
// if mechs then
76943: LD_VAR 0 13
76947: IFFALSE 77076
// for i in defenders do
76949: LD_ADDR_VAR 0 5
76953: PUSH
76954: LD_VAR 0 2
76958: PUSH
76959: FOR_IN
76960: IFFALSE 77074
// begin SetTag ( i , 20 ) ;
76962: LD_VAR 0 5
76966: PPUSH
76967: LD_INT 20
76969: PPUSH
76970: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
76974: LD_VAR 0 5
76978: PPUSH
76979: CALL_OW 263
76983: PUSH
76984: LD_INT 1
76986: EQUAL
76987: PUSH
76988: LD_VAR 0 5
76992: PPUSH
76993: CALL_OW 311
76997: NOT
76998: AND
76999: PUSH
77000: LD_VAR 0 13
77004: AND
77005: IFFALSE 77072
// begin un := mechs [ 1 ] ;
77007: LD_ADDR_VAR 0 11
77011: PUSH
77012: LD_VAR 0 13
77016: PUSH
77017: LD_INT 1
77019: ARRAY
77020: ST_TO_ADDR
// ComExitBuilding ( un ) ;
77021: LD_VAR 0 11
77025: PPUSH
77026: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
77030: LD_VAR 0 11
77034: PPUSH
77035: LD_VAR 0 5
77039: PPUSH
77040: CALL_OW 180
// SetTag ( un , 19 ) ;
77044: LD_VAR 0 11
77048: PPUSH
77049: LD_INT 19
77051: PPUSH
77052: CALL_OW 109
// mechs := mechs diff un ;
77056: LD_ADDR_VAR 0 13
77060: PUSH
77061: LD_VAR 0 13
77065: PUSH
77066: LD_VAR 0 11
77070: DIFF
77071: ST_TO_ADDR
// end ; end ;
77072: GO 76959
77074: POP
77075: POP
// if solds then
77076: LD_VAR 0 9
77080: IFFALSE 77139
// for i in solds do
77082: LD_ADDR_VAR 0 5
77086: PUSH
77087: LD_VAR 0 9
77091: PUSH
77092: FOR_IN
77093: IFFALSE 77137
// if not GetTag ( i ) then
77095: LD_VAR 0 5
77099: PPUSH
77100: CALL_OW 110
77104: NOT
77105: IFFALSE 77135
// begin defenders := defenders union i ;
77107: LD_ADDR_VAR 0 2
77111: PUSH
77112: LD_VAR 0 2
77116: PUSH
77117: LD_VAR 0 5
77121: UNION
77122: ST_TO_ADDR
// SetTag ( i , 18 ) ;
77123: LD_VAR 0 5
77127: PPUSH
77128: LD_INT 18
77130: PPUSH
77131: CALL_OW 109
// end ;
77135: GO 77092
77137: POP
77138: POP
// repeat wait ( 0 0$1 ) ;
77139: LD_INT 35
77141: PPUSH
77142: CALL_OW 67
// enemy := mc_scan [ base ] ;
77146: LD_ADDR_VAR 0 3
77150: PUSH
77151: LD_EXP 37
77155: PUSH
77156: LD_VAR 0 1
77160: ARRAY
77161: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
77162: LD_EXP 14
77166: PUSH
77167: LD_VAR 0 1
77171: ARRAY
77172: NOT
77173: PUSH
77174: LD_EXP 14
77178: PUSH
77179: LD_VAR 0 1
77183: ARRAY
77184: PUSH
77185: EMPTY
77186: EQUAL
77187: OR
77188: IFFALSE 77225
// begin for i in defenders do
77190: LD_ADDR_VAR 0 5
77194: PUSH
77195: LD_VAR 0 2
77199: PUSH
77200: FOR_IN
77201: IFFALSE 77214
// ComStop ( i ) ;
77203: LD_VAR 0 5
77207: PPUSH
77208: CALL_OW 141
77212: GO 77200
77214: POP
77215: POP
// defenders := [ ] ;
77216: LD_ADDR_VAR 0 2
77220: PUSH
77221: EMPTY
77222: ST_TO_ADDR
// exit ;
77223: GO 78554
// end ; for i in defenders do
77225: LD_ADDR_VAR 0 5
77229: PUSH
77230: LD_VAR 0 2
77234: PUSH
77235: FOR_IN
77236: IFFALSE 78054
// begin e := NearestUnitToUnit ( enemy , i ) ;
77238: LD_ADDR_VAR 0 14
77242: PUSH
77243: LD_VAR 0 3
77247: PPUSH
77248: LD_VAR 0 5
77252: PPUSH
77253: CALL_OW 74
77257: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77258: LD_ADDR_VAR 0 8
77262: PUSH
77263: LD_EXP 14
77267: PUSH
77268: LD_VAR 0 1
77272: ARRAY
77273: PPUSH
77274: LD_INT 2
77276: PUSH
77277: LD_INT 30
77279: PUSH
77280: LD_INT 0
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 30
77289: PUSH
77290: LD_INT 1
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: LIST
77301: PPUSH
77302: CALL_OW 72
77306: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
77307: LD_ADDR_VAR 0 17
77311: PUSH
77312: LD_VAR 0 8
77316: NOT
77317: PUSH
77318: LD_VAR 0 8
77322: PPUSH
77323: LD_INT 3
77325: PUSH
77326: LD_INT 24
77328: PUSH
77329: LD_INT 600
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: PPUSH
77340: CALL_OW 72
77344: OR
77345: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
77346: LD_VAR 0 5
77350: PPUSH
77351: CALL_OW 247
77355: PUSH
77356: LD_INT 2
77358: DOUBLE
77359: EQUAL
77360: IFTRUE 77364
77362: GO 77760
77364: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
77365: LD_VAR 0 5
77369: PPUSH
77370: CALL_OW 256
77374: PUSH
77375: LD_INT 650
77377: GREATER
77378: PUSH
77379: LD_VAR 0 5
77383: PPUSH
77384: LD_VAR 0 14
77388: PPUSH
77389: CALL_OW 296
77393: PUSH
77394: LD_INT 40
77396: LESS
77397: PUSH
77398: LD_VAR 0 14
77402: PPUSH
77403: LD_EXP 39
77407: PUSH
77408: LD_VAR 0 1
77412: ARRAY
77413: PPUSH
77414: CALL_OW 308
77418: OR
77419: AND
77420: IFFALSE 77542
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
77422: LD_VAR 0 5
77426: PPUSH
77427: CALL_OW 262
77431: PUSH
77432: LD_INT 1
77434: EQUAL
77435: PUSH
77436: LD_VAR 0 5
77440: PPUSH
77441: CALL_OW 261
77445: PUSH
77446: LD_INT 30
77448: LESS
77449: AND
77450: PUSH
77451: LD_VAR 0 8
77455: AND
77456: IFFALSE 77526
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
77458: LD_VAR 0 5
77462: PPUSH
77463: LD_VAR 0 8
77467: PPUSH
77468: LD_VAR 0 5
77472: PPUSH
77473: CALL_OW 74
77477: PPUSH
77478: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
77482: LD_VAR 0 5
77486: PPUSH
77487: LD_VAR 0 8
77491: PPUSH
77492: LD_VAR 0 5
77496: PPUSH
77497: CALL_OW 74
77501: PPUSH
77502: CALL_OW 296
77506: PUSH
77507: LD_INT 6
77509: LESS
77510: IFFALSE 77524
// SetFuel ( i , 100 ) ;
77512: LD_VAR 0 5
77516: PPUSH
77517: LD_INT 100
77519: PPUSH
77520: CALL_OW 240
// end else
77524: GO 77540
// ComAttackUnit ( i , e ) ;
77526: LD_VAR 0 5
77530: PPUSH
77531: LD_VAR 0 14
77535: PPUSH
77536: CALL_OW 115
// end else
77540: GO 77643
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
77542: LD_VAR 0 14
77546: PPUSH
77547: LD_EXP 39
77551: PUSH
77552: LD_VAR 0 1
77556: ARRAY
77557: PPUSH
77558: CALL_OW 308
77562: NOT
77563: PUSH
77564: LD_VAR 0 5
77568: PPUSH
77569: LD_VAR 0 14
77573: PPUSH
77574: CALL_OW 296
77578: PUSH
77579: LD_INT 40
77581: GREATEREQUAL
77582: AND
77583: PUSH
77584: LD_VAR 0 5
77588: PPUSH
77589: CALL_OW 256
77593: PUSH
77594: LD_INT 650
77596: LESSEQUAL
77597: OR
77598: PUSH
77599: LD_VAR 0 5
77603: PPUSH
77604: LD_EXP 38
77608: PUSH
77609: LD_VAR 0 1
77613: ARRAY
77614: PPUSH
77615: CALL_OW 308
77619: NOT
77620: AND
77621: IFFALSE 77643
// ComMoveToArea ( i , mc_parking [ base ] ) ;
77623: LD_VAR 0 5
77627: PPUSH
77628: LD_EXP 38
77632: PUSH
77633: LD_VAR 0 1
77637: ARRAY
77638: PPUSH
77639: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
77643: LD_VAR 0 5
77647: PPUSH
77648: CALL_OW 256
77652: PUSH
77653: LD_INT 998
77655: LESS
77656: PUSH
77657: LD_VAR 0 5
77661: PPUSH
77662: CALL_OW 263
77666: PUSH
77667: LD_INT 1
77669: EQUAL
77670: AND
77671: PUSH
77672: LD_VAR 0 5
77676: PPUSH
77677: CALL_OW 311
77681: AND
77682: PUSH
77683: LD_VAR 0 5
77687: PPUSH
77688: LD_EXP 38
77692: PUSH
77693: LD_VAR 0 1
77697: ARRAY
77698: PPUSH
77699: CALL_OW 308
77703: AND
77704: IFFALSE 77758
// begin mech := IsDrivenBy ( i ) ;
77706: LD_ADDR_VAR 0 10
77710: PUSH
77711: LD_VAR 0 5
77715: PPUSH
77716: CALL_OW 311
77720: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
77721: LD_VAR 0 10
77725: PPUSH
77726: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
77730: LD_VAR 0 10
77734: PPUSH
77735: LD_VAR 0 5
77739: PPUSH
77740: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
77744: LD_VAR 0 10
77748: PPUSH
77749: LD_VAR 0 5
77753: PPUSH
77754: CALL_OW 180
// end ; end ; unit_human :
77758: GO 78025
77760: LD_INT 1
77762: DOUBLE
77763: EQUAL
77764: IFTRUE 77768
77766: GO 78024
77768: POP
// begin b := IsInUnit ( i ) ;
77769: LD_ADDR_VAR 0 19
77773: PUSH
77774: LD_VAR 0 5
77778: PPUSH
77779: CALL_OW 310
77783: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
77784: LD_ADDR_VAR 0 20
77788: PUSH
77789: LD_VAR 0 19
77793: NOT
77794: PUSH
77795: LD_VAR 0 19
77799: PPUSH
77800: CALL_OW 266
77804: PUSH
77805: LD_INT 32
77807: PUSH
77808: LD_INT 31
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: IN
77815: OR
77816: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
77817: LD_VAR 0 17
77821: PUSH
77822: LD_VAR 0 2
77826: PPUSH
77827: LD_INT 21
77829: PUSH
77830: LD_INT 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PPUSH
77837: CALL_OW 72
77841: PUSH
77842: LD_INT 1
77844: LESSEQUAL
77845: OR
77846: PUSH
77847: LD_VAR 0 20
77851: AND
77852: PUSH
77853: LD_VAR 0 5
77857: PUSH
77858: LD_VAR 0 18
77862: IN
77863: NOT
77864: AND
77865: IFFALSE 77958
// begin if b then
77867: LD_VAR 0 19
77871: IFFALSE 77920
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
77873: LD_VAR 0 19
77877: PPUSH
77878: LD_VAR 0 3
77882: PPUSH
77883: LD_VAR 0 19
77887: PPUSH
77888: CALL_OW 74
77892: PPUSH
77893: CALL_OW 296
77897: PUSH
77898: LD_INT 10
77900: LESS
77901: PUSH
77902: LD_VAR 0 19
77906: PPUSH
77907: CALL_OW 461
77911: PUSH
77912: LD_INT 7
77914: NONEQUAL
77915: AND
77916: IFFALSE 77920
// continue ;
77918: GO 77235
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
77920: LD_ADDR_VAR 0 18
77924: PUSH
77925: LD_VAR 0 18
77929: PPUSH
77930: LD_VAR 0 18
77934: PUSH
77935: LD_INT 1
77937: PLUS
77938: PPUSH
77939: LD_VAR 0 5
77943: PPUSH
77944: CALL_OW 1
77948: ST_TO_ADDR
// ComExitBuilding ( i ) ;
77949: LD_VAR 0 5
77953: PPUSH
77954: CALL_OW 122
// end ; if sold_defenders then
77958: LD_VAR 0 18
77962: IFFALSE 78022
// if i in sold_defenders then
77964: LD_VAR 0 5
77968: PUSH
77969: LD_VAR 0 18
77973: IN
77974: IFFALSE 78022
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
77976: LD_VAR 0 5
77980: PPUSH
77981: CALL_OW 314
77985: NOT
77986: PUSH
77987: LD_VAR 0 5
77991: PPUSH
77992: LD_VAR 0 14
77996: PPUSH
77997: CALL_OW 296
78001: PUSH
78002: LD_INT 30
78004: LESS
78005: AND
78006: IFFALSE 78022
// ComAttackUnit ( i , e ) ;
78008: LD_VAR 0 5
78012: PPUSH
78013: LD_VAR 0 14
78017: PPUSH
78018: CALL_OW 115
// end ; end ; end ;
78022: GO 78025
78024: POP
// if IsDead ( i ) then
78025: LD_VAR 0 5
78029: PPUSH
78030: CALL_OW 301
78034: IFFALSE 78052
// defenders := defenders diff i ;
78036: LD_ADDR_VAR 0 2
78040: PUSH
78041: LD_VAR 0 2
78045: PUSH
78046: LD_VAR 0 5
78050: DIFF
78051: ST_TO_ADDR
// end ;
78052: GO 77235
78054: POP
78055: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
78056: LD_VAR 0 3
78060: NOT
78061: PUSH
78062: LD_VAR 0 2
78066: NOT
78067: OR
78068: PUSH
78069: LD_EXP 14
78073: PUSH
78074: LD_VAR 0 1
78078: ARRAY
78079: NOT
78080: OR
78081: IFFALSE 77139
// MC_Reset ( base , 18 ) ;
78083: LD_VAR 0 1
78087: PPUSH
78088: LD_INT 18
78090: PPUSH
78091: CALL 45350 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78095: LD_ADDR_VAR 0 2
78099: PUSH
78100: LD_VAR 0 2
78104: PUSH
78105: LD_VAR 0 2
78109: PPUSH
78110: LD_INT 2
78112: PUSH
78113: LD_INT 25
78115: PUSH
78116: LD_INT 1
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: PUSH
78123: LD_INT 25
78125: PUSH
78126: LD_INT 5
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: PUSH
78133: LD_INT 25
78135: PUSH
78136: LD_INT 8
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: LD_INT 25
78145: PUSH
78146: LD_INT 9
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: PPUSH
78160: CALL_OW 72
78164: DIFF
78165: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
78166: LD_VAR 0 3
78170: NOT
78171: PUSH
78172: LD_VAR 0 2
78176: PPUSH
78177: LD_INT 21
78179: PUSH
78180: LD_INT 2
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PPUSH
78187: CALL_OW 72
78191: AND
78192: IFFALSE 78530
// begin tmp := FilterByTag ( defenders , 19 ) ;
78194: LD_ADDR_VAR 0 12
78198: PUSH
78199: LD_VAR 0 2
78203: PPUSH
78204: LD_INT 19
78206: PPUSH
78207: CALL 37967 0 2
78211: ST_TO_ADDR
// if tmp then
78212: LD_VAR 0 12
78216: IFFALSE 78286
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
78218: LD_ADDR_VAR 0 12
78222: PUSH
78223: LD_VAR 0 12
78227: PPUSH
78228: LD_INT 25
78230: PUSH
78231: LD_INT 3
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PPUSH
78238: CALL_OW 72
78242: ST_TO_ADDR
// if tmp then
78243: LD_VAR 0 12
78247: IFFALSE 78286
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
78249: LD_ADDR_EXP 26
78253: PUSH
78254: LD_EXP 26
78258: PPUSH
78259: LD_VAR 0 1
78263: PPUSH
78264: LD_EXP 26
78268: PUSH
78269: LD_VAR 0 1
78273: ARRAY
78274: PUSH
78275: LD_VAR 0 12
78279: UNION
78280: PPUSH
78281: CALL_OW 1
78285: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
78286: LD_VAR 0 1
78290: PPUSH
78291: LD_INT 19
78293: PPUSH
78294: CALL 45350 0 2
// repeat wait ( 0 0$1 ) ;
78298: LD_INT 35
78300: PPUSH
78301: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
78305: LD_EXP 14
78309: PUSH
78310: LD_VAR 0 1
78314: ARRAY
78315: NOT
78316: PUSH
78317: LD_EXP 14
78321: PUSH
78322: LD_VAR 0 1
78326: ARRAY
78327: PUSH
78328: EMPTY
78329: EQUAL
78330: OR
78331: IFFALSE 78368
// begin for i in defenders do
78333: LD_ADDR_VAR 0 5
78337: PUSH
78338: LD_VAR 0 2
78342: PUSH
78343: FOR_IN
78344: IFFALSE 78357
// ComStop ( i ) ;
78346: LD_VAR 0 5
78350: PPUSH
78351: CALL_OW 141
78355: GO 78343
78357: POP
78358: POP
// defenders := [ ] ;
78359: LD_ADDR_VAR 0 2
78363: PUSH
78364: EMPTY
78365: ST_TO_ADDR
// exit ;
78366: GO 78554
// end ; for i in defenders do
78368: LD_ADDR_VAR 0 5
78372: PUSH
78373: LD_VAR 0 2
78377: PUSH
78378: FOR_IN
78379: IFFALSE 78468
// begin if not IsInArea ( i , mc_parking [ base ] ) then
78381: LD_VAR 0 5
78385: PPUSH
78386: LD_EXP 38
78390: PUSH
78391: LD_VAR 0 1
78395: ARRAY
78396: PPUSH
78397: CALL_OW 308
78401: NOT
78402: IFFALSE 78426
// ComMoveToArea ( i , mc_parking [ base ] ) else
78404: LD_VAR 0 5
78408: PPUSH
78409: LD_EXP 38
78413: PUSH
78414: LD_VAR 0 1
78418: ARRAY
78419: PPUSH
78420: CALL_OW 113
78424: GO 78466
// if GetControl ( i ) = control_manual then
78426: LD_VAR 0 5
78430: PPUSH
78431: CALL_OW 263
78435: PUSH
78436: LD_INT 1
78438: EQUAL
78439: IFFALSE 78466
// if IsDrivenBy ( i ) then
78441: LD_VAR 0 5
78445: PPUSH
78446: CALL_OW 311
78450: IFFALSE 78466
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
78452: LD_VAR 0 5
78456: PPUSH
78457: CALL_OW 311
78461: PPUSH
78462: CALL_OW 121
// end ;
78466: GO 78378
78468: POP
78469: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
78470: LD_VAR 0 2
78474: PPUSH
78475: LD_INT 95
78477: PUSH
78478: LD_EXP 38
78482: PUSH
78483: LD_VAR 0 1
78487: ARRAY
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PPUSH
78493: CALL_OW 72
78497: PUSH
78498: LD_VAR 0 2
78502: EQUAL
78503: PUSH
78504: LD_EXP 37
78508: PUSH
78509: LD_VAR 0 1
78513: ARRAY
78514: OR
78515: PUSH
78516: LD_EXP 14
78520: PUSH
78521: LD_VAR 0 1
78525: ARRAY
78526: NOT
78527: OR
78528: IFFALSE 78298
// end ; MC_Reset ( base , 19 ) ;
78530: LD_VAR 0 1
78534: PPUSH
78535: LD_INT 19
78537: PPUSH
78538: CALL 45350 0 2
// MC_Reset ( base , 20 ) ;
78542: LD_VAR 0 1
78546: PPUSH
78547: LD_INT 20
78549: PPUSH
78550: CALL 45350 0 2
// end ; end_of_file
78554: LD_VAR 0 4
78558: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78559: LD_INT 0
78561: PPUSH
78562: PPUSH
78563: PPUSH
78564: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78565: LD_VAR 0 1
78569: PPUSH
78570: CALL_OW 264
78574: PUSH
78575: LD_EXP 61
78579: EQUAL
78580: IFFALSE 78652
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78582: LD_INT 68
78584: PPUSH
78585: LD_VAR 0 1
78589: PPUSH
78590: CALL_OW 255
78594: PPUSH
78595: CALL_OW 321
78599: PUSH
78600: LD_INT 2
78602: EQUAL
78603: IFFALSE 78615
// eff := 70 else
78605: LD_ADDR_VAR 0 4
78609: PUSH
78610: LD_INT 70
78612: ST_TO_ADDR
78613: GO 78623
// eff := 30 ;
78615: LD_ADDR_VAR 0 4
78619: PUSH
78620: LD_INT 30
78622: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78623: LD_VAR 0 1
78627: PPUSH
78628: CALL_OW 250
78632: PPUSH
78633: LD_VAR 0 1
78637: PPUSH
78638: CALL_OW 251
78642: PPUSH
78643: LD_VAR 0 4
78647: PPUSH
78648: CALL_OW 495
// end ; end ;
78652: LD_VAR 0 2
78656: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78657: LD_INT 0
78659: PPUSH
// end ;
78660: LD_VAR 0 4
78664: RET
// export function SOS_Command ( cmd ) ; begin
78665: LD_INT 0
78667: PPUSH
// end ;
78668: LD_VAR 0 2
78672: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78673: LD_INT 0
78675: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78676: LD_VAR 0 1
78680: PUSH
78681: LD_INT 250
78683: EQUAL
78684: PUSH
78685: LD_VAR 0 2
78689: PPUSH
78690: CALL_OW 264
78694: PUSH
78695: LD_EXP 64
78699: EQUAL
78700: AND
78701: IFFALSE 78722
// MinerPlaceMine ( unit , x , y ) ;
78703: LD_VAR 0 2
78707: PPUSH
78708: LD_VAR 0 4
78712: PPUSH
78713: LD_VAR 0 5
78717: PPUSH
78718: CALL 81063 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78722: LD_VAR 0 1
78726: PUSH
78727: LD_INT 251
78729: EQUAL
78730: PUSH
78731: LD_VAR 0 2
78735: PPUSH
78736: CALL_OW 264
78740: PUSH
78741: LD_EXP 64
78745: EQUAL
78746: AND
78747: IFFALSE 78768
// MinerDetonateMine ( unit , x , y ) ;
78749: LD_VAR 0 2
78753: PPUSH
78754: LD_VAR 0 4
78758: PPUSH
78759: LD_VAR 0 5
78763: PPUSH
78764: CALL 81340 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78768: LD_VAR 0 1
78772: PUSH
78773: LD_INT 252
78775: EQUAL
78776: PUSH
78777: LD_VAR 0 2
78781: PPUSH
78782: CALL_OW 264
78786: PUSH
78787: LD_EXP 64
78791: EQUAL
78792: AND
78793: IFFALSE 78814
// MinerCreateMinefield ( unit , x , y ) ;
78795: LD_VAR 0 2
78799: PPUSH
78800: LD_VAR 0 4
78804: PPUSH
78805: LD_VAR 0 5
78809: PPUSH
78810: CALL 81757 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78814: LD_VAR 0 1
78818: PUSH
78819: LD_INT 253
78821: EQUAL
78822: PUSH
78823: LD_VAR 0 2
78827: PPUSH
78828: CALL_OW 257
78832: PUSH
78833: LD_INT 5
78835: EQUAL
78836: AND
78837: IFFALSE 78858
// ComBinocular ( unit , x , y ) ;
78839: LD_VAR 0 2
78843: PPUSH
78844: LD_VAR 0 4
78848: PPUSH
78849: LD_VAR 0 5
78853: PPUSH
78854: CALL 82128 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78858: LD_VAR 0 1
78862: PUSH
78863: LD_INT 254
78865: EQUAL
78866: PUSH
78867: LD_VAR 0 2
78871: PPUSH
78872: CALL_OW 264
78876: PUSH
78877: LD_EXP 59
78881: EQUAL
78882: AND
78883: PUSH
78884: LD_VAR 0 3
78888: PPUSH
78889: CALL_OW 263
78893: PUSH
78894: LD_INT 3
78896: EQUAL
78897: AND
78898: IFFALSE 78914
// HackDestroyVehicle ( unit , selectedUnit ) ;
78900: LD_VAR 0 2
78904: PPUSH
78905: LD_VAR 0 3
78909: PPUSH
78910: CALL 80423 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78914: LD_VAR 0 1
78918: PUSH
78919: LD_INT 255
78921: EQUAL
78922: PUSH
78923: LD_VAR 0 2
78927: PPUSH
78928: CALL_OW 264
78932: PUSH
78933: LD_INT 14
78935: PUSH
78936: LD_INT 53
78938: PUSH
78939: EMPTY
78940: LIST
78941: LIST
78942: IN
78943: AND
78944: PUSH
78945: LD_VAR 0 4
78949: PPUSH
78950: LD_VAR 0 5
78954: PPUSH
78955: CALL_OW 488
78959: AND
78960: IFFALSE 78984
// CutTreeXYR ( unit , x , y , 12 ) ;
78962: LD_VAR 0 2
78966: PPUSH
78967: LD_VAR 0 4
78971: PPUSH
78972: LD_VAR 0 5
78976: PPUSH
78977: LD_INT 12
78979: PPUSH
78980: CALL 78989 0 4
// end ;
78984: LD_VAR 0 6
78988: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78989: LD_INT 0
78991: PPUSH
78992: PPUSH
78993: PPUSH
78994: PPUSH
78995: PPUSH
78996: PPUSH
78997: PPUSH
78998: PPUSH
78999: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
79000: LD_VAR 0 1
79004: NOT
79005: PUSH
79006: LD_VAR 0 2
79010: PPUSH
79011: LD_VAR 0 3
79015: PPUSH
79016: CALL_OW 488
79020: NOT
79021: OR
79022: PUSH
79023: LD_VAR 0 4
79027: NOT
79028: OR
79029: IFFALSE 79033
// exit ;
79031: GO 79373
// list := [ ] ;
79033: LD_ADDR_VAR 0 13
79037: PUSH
79038: EMPTY
79039: ST_TO_ADDR
// if x - r < 0 then
79040: LD_VAR 0 2
79044: PUSH
79045: LD_VAR 0 4
79049: MINUS
79050: PUSH
79051: LD_INT 0
79053: LESS
79054: IFFALSE 79066
// min_x := 0 else
79056: LD_ADDR_VAR 0 7
79060: PUSH
79061: LD_INT 0
79063: ST_TO_ADDR
79064: GO 79082
// min_x := x - r ;
79066: LD_ADDR_VAR 0 7
79070: PUSH
79071: LD_VAR 0 2
79075: PUSH
79076: LD_VAR 0 4
79080: MINUS
79081: ST_TO_ADDR
// if y - r < 0 then
79082: LD_VAR 0 3
79086: PUSH
79087: LD_VAR 0 4
79091: MINUS
79092: PUSH
79093: LD_INT 0
79095: LESS
79096: IFFALSE 79108
// min_y := 0 else
79098: LD_ADDR_VAR 0 8
79102: PUSH
79103: LD_INT 0
79105: ST_TO_ADDR
79106: GO 79124
// min_y := y - r ;
79108: LD_ADDR_VAR 0 8
79112: PUSH
79113: LD_VAR 0 3
79117: PUSH
79118: LD_VAR 0 4
79122: MINUS
79123: ST_TO_ADDR
// max_x := x + r ;
79124: LD_ADDR_VAR 0 9
79128: PUSH
79129: LD_VAR 0 2
79133: PUSH
79134: LD_VAR 0 4
79138: PLUS
79139: ST_TO_ADDR
// max_y := y + r ;
79140: LD_ADDR_VAR 0 10
79144: PUSH
79145: LD_VAR 0 3
79149: PUSH
79150: LD_VAR 0 4
79154: PLUS
79155: ST_TO_ADDR
// for _x = min_x to max_x do
79156: LD_ADDR_VAR 0 11
79160: PUSH
79161: DOUBLE
79162: LD_VAR 0 7
79166: DEC
79167: ST_TO_ADDR
79168: LD_VAR 0 9
79172: PUSH
79173: FOR_TO
79174: IFFALSE 79291
// for _y = min_y to max_y do
79176: LD_ADDR_VAR 0 12
79180: PUSH
79181: DOUBLE
79182: LD_VAR 0 8
79186: DEC
79187: ST_TO_ADDR
79188: LD_VAR 0 10
79192: PUSH
79193: FOR_TO
79194: IFFALSE 79287
// begin if not ValidHex ( _x , _y ) then
79196: LD_VAR 0 11
79200: PPUSH
79201: LD_VAR 0 12
79205: PPUSH
79206: CALL_OW 488
79210: NOT
79211: IFFALSE 79215
// continue ;
79213: GO 79193
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79215: LD_VAR 0 11
79219: PPUSH
79220: LD_VAR 0 12
79224: PPUSH
79225: CALL_OW 351
79229: PUSH
79230: LD_VAR 0 11
79234: PPUSH
79235: LD_VAR 0 12
79239: PPUSH
79240: CALL_OW 554
79244: AND
79245: IFFALSE 79285
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79247: LD_ADDR_VAR 0 13
79251: PUSH
79252: LD_VAR 0 13
79256: PPUSH
79257: LD_VAR 0 13
79261: PUSH
79262: LD_INT 1
79264: PLUS
79265: PPUSH
79266: LD_VAR 0 11
79270: PUSH
79271: LD_VAR 0 12
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: PPUSH
79280: CALL_OW 2
79284: ST_TO_ADDR
// end ;
79285: GO 79193
79287: POP
79288: POP
79289: GO 79173
79291: POP
79292: POP
// if not list then
79293: LD_VAR 0 13
79297: NOT
79298: IFFALSE 79302
// exit ;
79300: GO 79373
// for i in list do
79302: LD_ADDR_VAR 0 6
79306: PUSH
79307: LD_VAR 0 13
79311: PUSH
79312: FOR_IN
79313: IFFALSE 79371
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79315: LD_VAR 0 1
79319: PPUSH
79320: LD_STRING M
79322: PUSH
79323: LD_VAR 0 6
79327: PUSH
79328: LD_INT 1
79330: ARRAY
79331: PUSH
79332: LD_VAR 0 6
79336: PUSH
79337: LD_INT 2
79339: ARRAY
79340: PUSH
79341: LD_INT 0
79343: PUSH
79344: LD_INT 0
79346: PUSH
79347: LD_INT 0
79349: PUSH
79350: LD_INT 0
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: LIST
79357: LIST
79358: LIST
79359: LIST
79360: LIST
79361: PUSH
79362: EMPTY
79363: LIST
79364: PPUSH
79365: CALL_OW 447
79369: GO 79312
79371: POP
79372: POP
// end ;
79373: LD_VAR 0 5
79377: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79378: LD_EXP 73
79382: NOT
79383: IFFALSE 79433
79385: GO 79387
79387: DISABLE
// begin initHack := true ;
79388: LD_ADDR_EXP 73
79392: PUSH
79393: LD_INT 1
79395: ST_TO_ADDR
// hackTanks := [ ] ;
79396: LD_ADDR_EXP 74
79400: PUSH
79401: EMPTY
79402: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79403: LD_ADDR_EXP 75
79407: PUSH
79408: EMPTY
79409: ST_TO_ADDR
// hackLimit := 3 ;
79410: LD_ADDR_EXP 76
79414: PUSH
79415: LD_INT 3
79417: ST_TO_ADDR
// hackDist := 12 ;
79418: LD_ADDR_EXP 77
79422: PUSH
79423: LD_INT 12
79425: ST_TO_ADDR
// hackCounter := [ ] ;
79426: LD_ADDR_EXP 78
79430: PUSH
79431: EMPTY
79432: ST_TO_ADDR
// end ;
79433: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79434: LD_EXP 73
79438: PUSH
79439: LD_INT 34
79441: PUSH
79442: LD_EXP 59
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: PPUSH
79451: CALL_OW 69
79455: AND
79456: IFFALSE 79711
79458: GO 79460
79460: DISABLE
79461: LD_INT 0
79463: PPUSH
79464: PPUSH
// begin enable ;
79465: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79466: LD_ADDR_VAR 0 1
79470: PUSH
79471: LD_INT 34
79473: PUSH
79474: LD_EXP 59
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PPUSH
79483: CALL_OW 69
79487: PUSH
79488: FOR_IN
79489: IFFALSE 79709
// begin if not i in hackTanks then
79491: LD_VAR 0 1
79495: PUSH
79496: LD_EXP 74
79500: IN
79501: NOT
79502: IFFALSE 79585
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79504: LD_ADDR_EXP 74
79508: PUSH
79509: LD_EXP 74
79513: PPUSH
79514: LD_EXP 74
79518: PUSH
79519: LD_INT 1
79521: PLUS
79522: PPUSH
79523: LD_VAR 0 1
79527: PPUSH
79528: CALL_OW 1
79532: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79533: LD_ADDR_EXP 75
79537: PUSH
79538: LD_EXP 75
79542: PPUSH
79543: LD_EXP 75
79547: PUSH
79548: LD_INT 1
79550: PLUS
79551: PPUSH
79552: EMPTY
79553: PPUSH
79554: CALL_OW 1
79558: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79559: LD_ADDR_EXP 78
79563: PUSH
79564: LD_EXP 78
79568: PPUSH
79569: LD_EXP 78
79573: PUSH
79574: LD_INT 1
79576: PLUS
79577: PPUSH
79578: EMPTY
79579: PPUSH
79580: CALL_OW 1
79584: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79585: LD_VAR 0 1
79589: PPUSH
79590: CALL_OW 302
79594: NOT
79595: IFFALSE 79608
// begin HackUnlinkAll ( i ) ;
79597: LD_VAR 0 1
79601: PPUSH
79602: CALL 79714 0 1
// continue ;
79606: GO 79488
// end ; HackCheckCapturedStatus ( i ) ;
79608: LD_VAR 0 1
79612: PPUSH
79613: CALL 80157 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
79617: LD_ADDR_VAR 0 2
79621: PUSH
79622: LD_INT 81
79624: PUSH
79625: LD_VAR 0 1
79629: PPUSH
79630: CALL_OW 255
79634: PUSH
79635: EMPTY
79636: LIST
79637: LIST
79638: PUSH
79639: LD_INT 33
79641: PUSH
79642: LD_INT 3
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: PUSH
79649: LD_INT 91
79651: PUSH
79652: LD_VAR 0 1
79656: PUSH
79657: LD_EXP 77
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: LIST
79666: PUSH
79667: LD_INT 50
79669: PUSH
79670: EMPTY
79671: LIST
79672: PUSH
79673: EMPTY
79674: LIST
79675: LIST
79676: LIST
79677: LIST
79678: PPUSH
79679: CALL_OW 69
79683: ST_TO_ADDR
// if not tmp then
79684: LD_VAR 0 2
79688: NOT
79689: IFFALSE 79693
// continue ;
79691: GO 79488
// HackLink ( i , tmp ) ;
79693: LD_VAR 0 1
79697: PPUSH
79698: LD_VAR 0 2
79702: PPUSH
79703: CALL 79850 0 2
// end ;
79707: GO 79488
79709: POP
79710: POP
// end ;
79711: PPOPN 2
79713: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79714: LD_INT 0
79716: PPUSH
79717: PPUSH
79718: PPUSH
// if not hack in hackTanks then
79719: LD_VAR 0 1
79723: PUSH
79724: LD_EXP 74
79728: IN
79729: NOT
79730: IFFALSE 79734
// exit ;
79732: GO 79845
// index := GetElementIndex ( hackTanks , hack ) ;
79734: LD_ADDR_VAR 0 4
79738: PUSH
79739: LD_EXP 74
79743: PPUSH
79744: LD_VAR 0 1
79748: PPUSH
79749: CALL 9191 0 2
79753: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79754: LD_EXP 75
79758: PUSH
79759: LD_VAR 0 4
79763: ARRAY
79764: IFFALSE 79845
// begin for i in hackTanksCaptured [ index ] do
79766: LD_ADDR_VAR 0 3
79770: PUSH
79771: LD_EXP 75
79775: PUSH
79776: LD_VAR 0 4
79780: ARRAY
79781: PUSH
79782: FOR_IN
79783: IFFALSE 79809
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79785: LD_VAR 0 3
79789: PUSH
79790: LD_INT 1
79792: ARRAY
79793: PPUSH
79794: LD_VAR 0 3
79798: PUSH
79799: LD_INT 2
79801: ARRAY
79802: PPUSH
79803: CALL_OW 235
79807: GO 79782
79809: POP
79810: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79811: LD_ADDR_EXP 75
79815: PUSH
79816: LD_EXP 75
79820: PPUSH
79821: LD_VAR 0 4
79825: PPUSH
79826: EMPTY
79827: PPUSH
79828: CALL_OW 1
79832: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79833: LD_VAR 0 1
79837: PPUSH
79838: LD_INT 0
79840: PPUSH
79841: CALL_OW 505
// end ; end ;
79845: LD_VAR 0 2
79849: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79850: LD_INT 0
79852: PPUSH
79853: PPUSH
79854: PPUSH
// if not hack in hackTanks or not vehicles then
79855: LD_VAR 0 1
79859: PUSH
79860: LD_EXP 74
79864: IN
79865: NOT
79866: PUSH
79867: LD_VAR 0 2
79871: NOT
79872: OR
79873: IFFALSE 79877
// exit ;
79875: GO 80152
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79877: LD_ADDR_VAR 0 2
79881: PUSH
79882: LD_VAR 0 1
79886: PPUSH
79887: LD_VAR 0 2
79891: PPUSH
79892: LD_INT 1
79894: PPUSH
79895: LD_INT 1
79897: PPUSH
79898: CALL 9841 0 4
79902: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79903: LD_ADDR_VAR 0 5
79907: PUSH
79908: LD_EXP 74
79912: PPUSH
79913: LD_VAR 0 1
79917: PPUSH
79918: CALL 9191 0 2
79922: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79923: LD_EXP 75
79927: PUSH
79928: LD_VAR 0 5
79932: ARRAY
79933: PUSH
79934: LD_EXP 76
79938: LESS
79939: IFFALSE 80128
// begin for i := 1 to vehicles do
79941: LD_ADDR_VAR 0 4
79945: PUSH
79946: DOUBLE
79947: LD_INT 1
79949: DEC
79950: ST_TO_ADDR
79951: LD_VAR 0 2
79955: PUSH
79956: FOR_TO
79957: IFFALSE 80126
// begin if hackTanksCaptured [ index ] = hackLimit then
79959: LD_EXP 75
79963: PUSH
79964: LD_VAR 0 5
79968: ARRAY
79969: PUSH
79970: LD_EXP 76
79974: EQUAL
79975: IFFALSE 79979
// break ;
79977: GO 80126
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79979: LD_ADDR_EXP 78
79983: PUSH
79984: LD_EXP 78
79988: PPUSH
79989: LD_VAR 0 5
79993: PPUSH
79994: LD_EXP 78
79998: PUSH
79999: LD_VAR 0 5
80003: ARRAY
80004: PUSH
80005: LD_INT 1
80007: PLUS
80008: PPUSH
80009: CALL_OW 1
80013: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80014: LD_ADDR_EXP 75
80018: PUSH
80019: LD_EXP 75
80023: PPUSH
80024: LD_VAR 0 5
80028: PUSH
80029: LD_EXP 75
80033: PUSH
80034: LD_VAR 0 5
80038: ARRAY
80039: PUSH
80040: LD_INT 1
80042: PLUS
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: PPUSH
80048: LD_VAR 0 2
80052: PUSH
80053: LD_VAR 0 4
80057: ARRAY
80058: PUSH
80059: LD_VAR 0 2
80063: PUSH
80064: LD_VAR 0 4
80068: ARRAY
80069: PPUSH
80070: CALL_OW 255
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: PPUSH
80079: CALL 9406 0 3
80083: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80084: LD_VAR 0 2
80088: PUSH
80089: LD_VAR 0 4
80093: ARRAY
80094: PPUSH
80095: LD_VAR 0 1
80099: PPUSH
80100: CALL_OW 255
80104: PPUSH
80105: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80109: LD_VAR 0 2
80113: PUSH
80114: LD_VAR 0 4
80118: ARRAY
80119: PPUSH
80120: CALL_OW 141
// end ;
80124: GO 79956
80126: POP
80127: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80128: LD_VAR 0 1
80132: PPUSH
80133: LD_EXP 75
80137: PUSH
80138: LD_VAR 0 5
80142: ARRAY
80143: PUSH
80144: LD_INT 0
80146: PLUS
80147: PPUSH
80148: CALL_OW 505
// end ;
80152: LD_VAR 0 3
80156: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80157: LD_INT 0
80159: PPUSH
80160: PPUSH
80161: PPUSH
80162: PPUSH
// if not hack in hackTanks then
80163: LD_VAR 0 1
80167: PUSH
80168: LD_EXP 74
80172: IN
80173: NOT
80174: IFFALSE 80178
// exit ;
80176: GO 80418
// index := GetElementIndex ( hackTanks , hack ) ;
80178: LD_ADDR_VAR 0 4
80182: PUSH
80183: LD_EXP 74
80187: PPUSH
80188: LD_VAR 0 1
80192: PPUSH
80193: CALL 9191 0 2
80197: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80198: LD_ADDR_VAR 0 3
80202: PUSH
80203: DOUBLE
80204: LD_EXP 75
80208: PUSH
80209: LD_VAR 0 4
80213: ARRAY
80214: INC
80215: ST_TO_ADDR
80216: LD_INT 1
80218: PUSH
80219: FOR_DOWNTO
80220: IFFALSE 80392
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80222: LD_ADDR_VAR 0 5
80226: PUSH
80227: LD_EXP 75
80231: PUSH
80232: LD_VAR 0 4
80236: ARRAY
80237: PUSH
80238: LD_VAR 0 3
80242: ARRAY
80243: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80244: LD_VAR 0 5
80248: PUSH
80249: LD_INT 1
80251: ARRAY
80252: PPUSH
80253: CALL_OW 302
80257: NOT
80258: PUSH
80259: LD_VAR 0 5
80263: PUSH
80264: LD_INT 1
80266: ARRAY
80267: PPUSH
80268: CALL_OW 255
80272: PUSH
80273: LD_VAR 0 1
80277: PPUSH
80278: CALL_OW 255
80282: NONEQUAL
80283: OR
80284: IFFALSE 80390
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80286: LD_VAR 0 5
80290: PUSH
80291: LD_INT 1
80293: ARRAY
80294: PPUSH
80295: CALL_OW 305
80299: PUSH
80300: LD_VAR 0 5
80304: PUSH
80305: LD_INT 1
80307: ARRAY
80308: PPUSH
80309: CALL_OW 255
80313: PUSH
80314: LD_VAR 0 1
80318: PPUSH
80319: CALL_OW 255
80323: EQUAL
80324: AND
80325: IFFALSE 80349
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80327: LD_VAR 0 5
80331: PUSH
80332: LD_INT 1
80334: ARRAY
80335: PPUSH
80336: LD_VAR 0 5
80340: PUSH
80341: LD_INT 2
80343: ARRAY
80344: PPUSH
80345: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80349: LD_ADDR_EXP 75
80353: PUSH
80354: LD_EXP 75
80358: PPUSH
80359: LD_VAR 0 4
80363: PPUSH
80364: LD_EXP 75
80368: PUSH
80369: LD_VAR 0 4
80373: ARRAY
80374: PPUSH
80375: LD_VAR 0 3
80379: PPUSH
80380: CALL_OW 3
80384: PPUSH
80385: CALL_OW 1
80389: ST_TO_ADDR
// end ; end ;
80390: GO 80219
80392: POP
80393: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80394: LD_VAR 0 1
80398: PPUSH
80399: LD_EXP 75
80403: PUSH
80404: LD_VAR 0 4
80408: ARRAY
80409: PUSH
80410: LD_INT 0
80412: PLUS
80413: PPUSH
80414: CALL_OW 505
// end ;
80418: LD_VAR 0 2
80422: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80423: LD_INT 0
80425: PPUSH
80426: PPUSH
80427: PPUSH
80428: PPUSH
// if not hack in hackTanks then
80429: LD_VAR 0 1
80433: PUSH
80434: LD_EXP 74
80438: IN
80439: NOT
80440: IFFALSE 80444
// exit ;
80442: GO 80529
// index := GetElementIndex ( hackTanks , hack ) ;
80444: LD_ADDR_VAR 0 5
80448: PUSH
80449: LD_EXP 74
80453: PPUSH
80454: LD_VAR 0 1
80458: PPUSH
80459: CALL 9191 0 2
80463: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80464: LD_ADDR_VAR 0 4
80468: PUSH
80469: DOUBLE
80470: LD_INT 1
80472: DEC
80473: ST_TO_ADDR
80474: LD_EXP 75
80478: PUSH
80479: LD_VAR 0 5
80483: ARRAY
80484: PUSH
80485: FOR_TO
80486: IFFALSE 80527
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80488: LD_EXP 75
80492: PUSH
80493: LD_VAR 0 5
80497: ARRAY
80498: PUSH
80499: LD_VAR 0 4
80503: ARRAY
80504: PUSH
80505: LD_INT 1
80507: ARRAY
80508: PUSH
80509: LD_VAR 0 2
80513: EQUAL
80514: IFFALSE 80525
// KillUnit ( vehicle ) ;
80516: LD_VAR 0 2
80520: PPUSH
80521: CALL_OW 66
80525: GO 80485
80527: POP
80528: POP
// end ;
80529: LD_VAR 0 3
80533: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80534: LD_EXP 79
80538: NOT
80539: IFFALSE 80574
80541: GO 80543
80543: DISABLE
// begin initMiner := true ;
80544: LD_ADDR_EXP 79
80548: PUSH
80549: LD_INT 1
80551: ST_TO_ADDR
// minersList := [ ] ;
80552: LD_ADDR_EXP 80
80556: PUSH
80557: EMPTY
80558: ST_TO_ADDR
// minerMinesList := [ ] ;
80559: LD_ADDR_EXP 81
80563: PUSH
80564: EMPTY
80565: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
80566: LD_ADDR_EXP 82
80570: PUSH
80571: LD_INT 5
80573: ST_TO_ADDR
// end ;
80574: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
80575: LD_EXP 79
80579: PUSH
80580: LD_INT 34
80582: PUSH
80583: LD_EXP 64
80587: PUSH
80588: EMPTY
80589: LIST
80590: LIST
80591: PPUSH
80592: CALL_OW 69
80596: AND
80597: IFFALSE 81060
80599: GO 80601
80601: DISABLE
80602: LD_INT 0
80604: PPUSH
80605: PPUSH
80606: PPUSH
80607: PPUSH
// begin enable ;
80608: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80609: LD_ADDR_VAR 0 1
80613: PUSH
80614: LD_INT 34
80616: PUSH
80617: LD_EXP 64
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: PPUSH
80626: CALL_OW 69
80630: PUSH
80631: FOR_IN
80632: IFFALSE 80704
// begin if not i in minersList then
80634: LD_VAR 0 1
80638: PUSH
80639: LD_EXP 80
80643: IN
80644: NOT
80645: IFFALSE 80702
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80647: LD_ADDR_EXP 80
80651: PUSH
80652: LD_EXP 80
80656: PPUSH
80657: LD_EXP 80
80661: PUSH
80662: LD_INT 1
80664: PLUS
80665: PPUSH
80666: LD_VAR 0 1
80670: PPUSH
80671: CALL_OW 1
80675: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
80676: LD_ADDR_EXP 81
80680: PUSH
80681: LD_EXP 81
80685: PPUSH
80686: LD_EXP 81
80690: PUSH
80691: LD_INT 1
80693: PLUS
80694: PPUSH
80695: EMPTY
80696: PPUSH
80697: CALL_OW 1
80701: ST_TO_ADDR
// end end ;
80702: GO 80631
80704: POP
80705: POP
// for i := minerMinesList downto 1 do
80706: LD_ADDR_VAR 0 1
80710: PUSH
80711: DOUBLE
80712: LD_EXP 81
80716: INC
80717: ST_TO_ADDR
80718: LD_INT 1
80720: PUSH
80721: FOR_DOWNTO
80722: IFFALSE 81058
// begin if IsLive ( minersList [ i ] ) then
80724: LD_EXP 80
80728: PUSH
80729: LD_VAR 0 1
80733: ARRAY
80734: PPUSH
80735: CALL_OW 300
80739: IFFALSE 80767
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80741: LD_EXP 80
80745: PUSH
80746: LD_VAR 0 1
80750: ARRAY
80751: PPUSH
80752: LD_EXP 81
80756: PUSH
80757: LD_VAR 0 1
80761: ARRAY
80762: PPUSH
80763: CALL_OW 505
// if not minerMinesList [ i ] then
80767: LD_EXP 81
80771: PUSH
80772: LD_VAR 0 1
80776: ARRAY
80777: NOT
80778: IFFALSE 80782
// continue ;
80780: GO 80721
// for j := minerMinesList [ i ] downto 1 do
80782: LD_ADDR_VAR 0 2
80786: PUSH
80787: DOUBLE
80788: LD_EXP 81
80792: PUSH
80793: LD_VAR 0 1
80797: ARRAY
80798: INC
80799: ST_TO_ADDR
80800: LD_INT 1
80802: PUSH
80803: FOR_DOWNTO
80804: IFFALSE 81054
// begin side := GetSide ( minersList [ i ] ) ;
80806: LD_ADDR_VAR 0 3
80810: PUSH
80811: LD_EXP 80
80815: PUSH
80816: LD_VAR 0 1
80820: ARRAY
80821: PPUSH
80822: CALL_OW 255
80826: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80827: LD_ADDR_VAR 0 4
80831: PUSH
80832: LD_EXP 81
80836: PUSH
80837: LD_VAR 0 1
80841: ARRAY
80842: PUSH
80843: LD_VAR 0 2
80847: ARRAY
80848: PUSH
80849: LD_INT 1
80851: ARRAY
80852: PPUSH
80853: LD_EXP 81
80857: PUSH
80858: LD_VAR 0 1
80862: ARRAY
80863: PUSH
80864: LD_VAR 0 2
80868: ARRAY
80869: PUSH
80870: LD_INT 2
80872: ARRAY
80873: PPUSH
80874: CALL_OW 428
80878: ST_TO_ADDR
// if not tmp then
80879: LD_VAR 0 4
80883: NOT
80884: IFFALSE 80888
// continue ;
80886: GO 80803
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80888: LD_VAR 0 4
80892: PUSH
80893: LD_INT 81
80895: PUSH
80896: LD_VAR 0 3
80900: PUSH
80901: EMPTY
80902: LIST
80903: LIST
80904: PPUSH
80905: CALL_OW 69
80909: IN
80910: PUSH
80911: LD_EXP 81
80915: PUSH
80916: LD_VAR 0 1
80920: ARRAY
80921: PUSH
80922: LD_VAR 0 2
80926: ARRAY
80927: PUSH
80928: LD_INT 1
80930: ARRAY
80931: PPUSH
80932: LD_EXP 81
80936: PUSH
80937: LD_VAR 0 1
80941: ARRAY
80942: PUSH
80943: LD_VAR 0 2
80947: ARRAY
80948: PUSH
80949: LD_INT 2
80951: ARRAY
80952: PPUSH
80953: CALL_OW 458
80957: AND
80958: IFFALSE 81052
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80960: LD_EXP 81
80964: PUSH
80965: LD_VAR 0 1
80969: ARRAY
80970: PUSH
80971: LD_VAR 0 2
80975: ARRAY
80976: PUSH
80977: LD_INT 1
80979: ARRAY
80980: PPUSH
80981: LD_EXP 81
80985: PUSH
80986: LD_VAR 0 1
80990: ARRAY
80991: PUSH
80992: LD_VAR 0 2
80996: ARRAY
80997: PUSH
80998: LD_INT 2
81000: ARRAY
81001: PPUSH
81002: LD_VAR 0 3
81006: PPUSH
81007: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81011: LD_ADDR_EXP 81
81015: PUSH
81016: LD_EXP 81
81020: PPUSH
81021: LD_VAR 0 1
81025: PPUSH
81026: LD_EXP 81
81030: PUSH
81031: LD_VAR 0 1
81035: ARRAY
81036: PPUSH
81037: LD_VAR 0 2
81041: PPUSH
81042: CALL_OW 3
81046: PPUSH
81047: CALL_OW 1
81051: ST_TO_ADDR
// end ; end ;
81052: GO 80803
81054: POP
81055: POP
// end ;
81056: GO 80721
81058: POP
81059: POP
// end ;
81060: PPOPN 4
81062: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
81063: LD_INT 0
81065: PPUSH
81066: PPUSH
// result := false ;
81067: LD_ADDR_VAR 0 4
81071: PUSH
81072: LD_INT 0
81074: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81075: LD_VAR 0 1
81079: PPUSH
81080: CALL_OW 264
81084: PUSH
81085: LD_EXP 64
81089: EQUAL
81090: NOT
81091: IFFALSE 81095
// exit ;
81093: GO 81335
// index := GetElementIndex ( minersList , unit ) ;
81095: LD_ADDR_VAR 0 5
81099: PUSH
81100: LD_EXP 80
81104: PPUSH
81105: LD_VAR 0 1
81109: PPUSH
81110: CALL 9191 0 2
81114: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81115: LD_EXP 81
81119: PUSH
81120: LD_VAR 0 5
81124: ARRAY
81125: PUSH
81126: LD_EXP 82
81130: GREATEREQUAL
81131: IFFALSE 81135
// exit ;
81133: GO 81335
// ComMoveXY ( unit , x , y ) ;
81135: LD_VAR 0 1
81139: PPUSH
81140: LD_VAR 0 2
81144: PPUSH
81145: LD_VAR 0 3
81149: PPUSH
81150: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81154: LD_INT 35
81156: PPUSH
81157: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81161: LD_VAR 0 1
81165: PPUSH
81166: LD_VAR 0 2
81170: PPUSH
81171: LD_VAR 0 3
81175: PPUSH
81176: CALL 39255 0 3
81180: NOT
81181: PUSH
81182: LD_VAR 0 1
81186: PPUSH
81187: CALL_OW 314
81191: AND
81192: IFFALSE 81196
// exit ;
81194: GO 81335
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81196: LD_VAR 0 2
81200: PPUSH
81201: LD_VAR 0 3
81205: PPUSH
81206: CALL_OW 428
81210: PUSH
81211: LD_VAR 0 1
81215: EQUAL
81216: PUSH
81217: LD_VAR 0 1
81221: PPUSH
81222: CALL_OW 314
81226: NOT
81227: AND
81228: IFFALSE 81154
// PlaySoundXY ( x , y , PlantMine ) ;
81230: LD_VAR 0 2
81234: PPUSH
81235: LD_VAR 0 3
81239: PPUSH
81240: LD_STRING PlantMine
81242: PPUSH
81243: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81247: LD_VAR 0 2
81251: PPUSH
81252: LD_VAR 0 3
81256: PPUSH
81257: LD_VAR 0 1
81261: PPUSH
81262: CALL_OW 255
81266: PPUSH
81267: LD_INT 0
81269: PPUSH
81270: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81274: LD_ADDR_EXP 81
81278: PUSH
81279: LD_EXP 81
81283: PPUSH
81284: LD_VAR 0 5
81288: PUSH
81289: LD_EXP 81
81293: PUSH
81294: LD_VAR 0 5
81298: ARRAY
81299: PUSH
81300: LD_INT 1
81302: PLUS
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: PPUSH
81308: LD_VAR 0 2
81312: PUSH
81313: LD_VAR 0 3
81317: PUSH
81318: EMPTY
81319: LIST
81320: LIST
81321: PPUSH
81322: CALL 9406 0 3
81326: ST_TO_ADDR
// result := true ;
81327: LD_ADDR_VAR 0 4
81331: PUSH
81332: LD_INT 1
81334: ST_TO_ADDR
// end ;
81335: LD_VAR 0 4
81339: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81340: LD_INT 0
81342: PPUSH
81343: PPUSH
81344: PPUSH
// if not unit in minersList then
81345: LD_VAR 0 1
81349: PUSH
81350: LD_EXP 80
81354: IN
81355: NOT
81356: IFFALSE 81360
// exit ;
81358: GO 81752
// index := GetElementIndex ( minersList , unit ) ;
81360: LD_ADDR_VAR 0 6
81364: PUSH
81365: LD_EXP 80
81369: PPUSH
81370: LD_VAR 0 1
81374: PPUSH
81375: CALL 9191 0 2
81379: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81380: LD_ADDR_VAR 0 5
81384: PUSH
81385: DOUBLE
81386: LD_EXP 81
81390: PUSH
81391: LD_VAR 0 6
81395: ARRAY
81396: INC
81397: ST_TO_ADDR
81398: LD_INT 1
81400: PUSH
81401: FOR_DOWNTO
81402: IFFALSE 81563
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81404: LD_EXP 81
81408: PUSH
81409: LD_VAR 0 6
81413: ARRAY
81414: PUSH
81415: LD_VAR 0 5
81419: ARRAY
81420: PUSH
81421: LD_INT 1
81423: ARRAY
81424: PUSH
81425: LD_VAR 0 2
81429: EQUAL
81430: PUSH
81431: LD_EXP 81
81435: PUSH
81436: LD_VAR 0 6
81440: ARRAY
81441: PUSH
81442: LD_VAR 0 5
81446: ARRAY
81447: PUSH
81448: LD_INT 2
81450: ARRAY
81451: PUSH
81452: LD_VAR 0 3
81456: EQUAL
81457: AND
81458: IFFALSE 81561
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81460: LD_EXP 81
81464: PUSH
81465: LD_VAR 0 6
81469: ARRAY
81470: PUSH
81471: LD_VAR 0 5
81475: ARRAY
81476: PUSH
81477: LD_INT 1
81479: ARRAY
81480: PPUSH
81481: LD_EXP 81
81485: PUSH
81486: LD_VAR 0 6
81490: ARRAY
81491: PUSH
81492: LD_VAR 0 5
81496: ARRAY
81497: PUSH
81498: LD_INT 2
81500: ARRAY
81501: PPUSH
81502: LD_VAR 0 1
81506: PPUSH
81507: CALL_OW 255
81511: PPUSH
81512: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81516: LD_ADDR_EXP 81
81520: PUSH
81521: LD_EXP 81
81525: PPUSH
81526: LD_VAR 0 6
81530: PPUSH
81531: LD_EXP 81
81535: PUSH
81536: LD_VAR 0 6
81540: ARRAY
81541: PPUSH
81542: LD_VAR 0 5
81546: PPUSH
81547: CALL_OW 3
81551: PPUSH
81552: CALL_OW 1
81556: ST_TO_ADDR
// exit ;
81557: POP
81558: POP
81559: GO 81752
// end ; end ;
81561: GO 81401
81563: POP
81564: POP
// for i := minerMinesList [ index ] downto 1 do
81565: LD_ADDR_VAR 0 5
81569: PUSH
81570: DOUBLE
81571: LD_EXP 81
81575: PUSH
81576: LD_VAR 0 6
81580: ARRAY
81581: INC
81582: ST_TO_ADDR
81583: LD_INT 1
81585: PUSH
81586: FOR_DOWNTO
81587: IFFALSE 81750
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81589: LD_EXP 81
81593: PUSH
81594: LD_VAR 0 6
81598: ARRAY
81599: PUSH
81600: LD_VAR 0 5
81604: ARRAY
81605: PUSH
81606: LD_INT 1
81608: ARRAY
81609: PPUSH
81610: LD_EXP 81
81614: PUSH
81615: LD_VAR 0 6
81619: ARRAY
81620: PUSH
81621: LD_VAR 0 5
81625: ARRAY
81626: PUSH
81627: LD_INT 2
81629: ARRAY
81630: PPUSH
81631: LD_VAR 0 2
81635: PPUSH
81636: LD_VAR 0 3
81640: PPUSH
81641: CALL_OW 298
81645: PUSH
81646: LD_INT 6
81648: LESS
81649: IFFALSE 81748
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81651: LD_EXP 81
81655: PUSH
81656: LD_VAR 0 6
81660: ARRAY
81661: PUSH
81662: LD_VAR 0 5
81666: ARRAY
81667: PUSH
81668: LD_INT 1
81670: ARRAY
81671: PPUSH
81672: LD_EXP 81
81676: PUSH
81677: LD_VAR 0 6
81681: ARRAY
81682: PUSH
81683: LD_VAR 0 5
81687: ARRAY
81688: PUSH
81689: LD_INT 2
81691: ARRAY
81692: PPUSH
81693: LD_VAR 0 1
81697: PPUSH
81698: CALL_OW 255
81702: PPUSH
81703: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81707: LD_ADDR_EXP 81
81711: PUSH
81712: LD_EXP 81
81716: PPUSH
81717: LD_VAR 0 6
81721: PPUSH
81722: LD_EXP 81
81726: PUSH
81727: LD_VAR 0 6
81731: ARRAY
81732: PPUSH
81733: LD_VAR 0 5
81737: PPUSH
81738: CALL_OW 3
81742: PPUSH
81743: CALL_OW 1
81747: ST_TO_ADDR
// end ; end ;
81748: GO 81586
81750: POP
81751: POP
// end ;
81752: LD_VAR 0 4
81756: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81757: LD_INT 0
81759: PPUSH
81760: PPUSH
81761: PPUSH
81762: PPUSH
81763: PPUSH
81764: PPUSH
81765: PPUSH
81766: PPUSH
81767: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81768: LD_VAR 0 1
81772: PPUSH
81773: CALL_OW 264
81777: PUSH
81778: LD_EXP 64
81782: EQUAL
81783: NOT
81784: PUSH
81785: LD_VAR 0 1
81789: PUSH
81790: LD_EXP 80
81794: IN
81795: NOT
81796: OR
81797: IFFALSE 81801
// exit ;
81799: GO 82123
// index := GetElementIndex ( minersList , unit ) ;
81801: LD_ADDR_VAR 0 6
81805: PUSH
81806: LD_EXP 80
81810: PPUSH
81811: LD_VAR 0 1
81815: PPUSH
81816: CALL 9191 0 2
81820: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81821: LD_ADDR_VAR 0 8
81825: PUSH
81826: LD_EXP 82
81830: PUSH
81831: LD_EXP 81
81835: PUSH
81836: LD_VAR 0 6
81840: ARRAY
81841: MINUS
81842: ST_TO_ADDR
// if not minesFreeAmount then
81843: LD_VAR 0 8
81847: NOT
81848: IFFALSE 81852
// exit ;
81850: GO 82123
// tmp := [ ] ;
81852: LD_ADDR_VAR 0 7
81856: PUSH
81857: EMPTY
81858: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81859: LD_ADDR_VAR 0 5
81863: PUSH
81864: DOUBLE
81865: LD_INT 1
81867: DEC
81868: ST_TO_ADDR
81869: LD_VAR 0 8
81873: PUSH
81874: FOR_TO
81875: IFFALSE 82070
// begin _d := rand ( 0 , 5 ) ;
81877: LD_ADDR_VAR 0 11
81881: PUSH
81882: LD_INT 0
81884: PPUSH
81885: LD_INT 5
81887: PPUSH
81888: CALL_OW 12
81892: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81893: LD_ADDR_VAR 0 12
81897: PUSH
81898: LD_INT 2
81900: PPUSH
81901: LD_INT 6
81903: PPUSH
81904: CALL_OW 12
81908: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81909: LD_ADDR_VAR 0 9
81913: PUSH
81914: LD_VAR 0 2
81918: PPUSH
81919: LD_VAR 0 11
81923: PPUSH
81924: LD_VAR 0 12
81928: PPUSH
81929: CALL_OW 272
81933: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81934: LD_ADDR_VAR 0 10
81938: PUSH
81939: LD_VAR 0 3
81943: PPUSH
81944: LD_VAR 0 11
81948: PPUSH
81949: LD_VAR 0 12
81953: PPUSH
81954: CALL_OW 273
81958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81959: LD_VAR 0 9
81963: PPUSH
81964: LD_VAR 0 10
81968: PPUSH
81969: CALL_OW 488
81973: PUSH
81974: LD_VAR 0 9
81978: PUSH
81979: LD_VAR 0 10
81983: PUSH
81984: EMPTY
81985: LIST
81986: LIST
81987: PUSH
81988: LD_VAR 0 7
81992: IN
81993: NOT
81994: AND
81995: PUSH
81996: LD_VAR 0 9
82000: PPUSH
82001: LD_VAR 0 10
82005: PPUSH
82006: CALL_OW 458
82010: NOT
82011: AND
82012: IFFALSE 82054
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82014: LD_ADDR_VAR 0 7
82018: PUSH
82019: LD_VAR 0 7
82023: PPUSH
82024: LD_VAR 0 7
82028: PUSH
82029: LD_INT 1
82031: PLUS
82032: PPUSH
82033: LD_VAR 0 9
82037: PUSH
82038: LD_VAR 0 10
82042: PUSH
82043: EMPTY
82044: LIST
82045: LIST
82046: PPUSH
82047: CALL_OW 1
82051: ST_TO_ADDR
82052: GO 82068
// i := i - 1 ;
82054: LD_ADDR_VAR 0 5
82058: PUSH
82059: LD_VAR 0 5
82063: PUSH
82064: LD_INT 1
82066: MINUS
82067: ST_TO_ADDR
// end ;
82068: GO 81874
82070: POP
82071: POP
// for i in tmp do
82072: LD_ADDR_VAR 0 5
82076: PUSH
82077: LD_VAR 0 7
82081: PUSH
82082: FOR_IN
82083: IFFALSE 82121
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82085: LD_VAR 0 1
82089: PPUSH
82090: LD_VAR 0 5
82094: PUSH
82095: LD_INT 1
82097: ARRAY
82098: PPUSH
82099: LD_VAR 0 5
82103: PUSH
82104: LD_INT 2
82106: ARRAY
82107: PPUSH
82108: CALL 81063 0 3
82112: NOT
82113: IFFALSE 82119
// exit ;
82115: POP
82116: POP
82117: GO 82123
82119: GO 82082
82121: POP
82122: POP
// end ;
82123: LD_VAR 0 4
82127: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
82128: LD_INT 0
82130: PPUSH
82131: PPUSH
82132: PPUSH
82133: PPUSH
82134: PPUSH
82135: PPUSH
82136: PPUSH
// if not GetClass ( unit ) = class_sniper then
82137: LD_VAR 0 1
82141: PPUSH
82142: CALL_OW 257
82146: PUSH
82147: LD_INT 5
82149: EQUAL
82150: NOT
82151: IFFALSE 82155
// exit ;
82153: GO 82543
// dist := 8 ;
82155: LD_ADDR_VAR 0 5
82159: PUSH
82160: LD_INT 8
82162: ST_TO_ADDR
// viewRange := 12 ;
82163: LD_ADDR_VAR 0 7
82167: PUSH
82168: LD_INT 12
82170: ST_TO_ADDR
// side := GetSide ( unit ) ;
82171: LD_ADDR_VAR 0 6
82175: PUSH
82176: LD_VAR 0 1
82180: PPUSH
82181: CALL_OW 255
82185: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82186: LD_INT 61
82188: PPUSH
82189: LD_VAR 0 6
82193: PPUSH
82194: CALL_OW 321
82198: PUSH
82199: LD_INT 2
82201: EQUAL
82202: IFFALSE 82212
// viewRange := 16 ;
82204: LD_ADDR_VAR 0 7
82208: PUSH
82209: LD_INT 16
82211: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82212: LD_VAR 0 1
82216: PPUSH
82217: LD_VAR 0 2
82221: PPUSH
82222: LD_VAR 0 3
82226: PPUSH
82227: CALL_OW 297
82231: PUSH
82232: LD_VAR 0 5
82236: GREATER
82237: IFFALSE 82316
// begin ComMoveXY ( unit , x , y ) ;
82239: LD_VAR 0 1
82243: PPUSH
82244: LD_VAR 0 2
82248: PPUSH
82249: LD_VAR 0 3
82253: PPUSH
82254: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82258: LD_INT 35
82260: PPUSH
82261: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82265: LD_VAR 0 1
82269: PPUSH
82270: LD_VAR 0 2
82274: PPUSH
82275: LD_VAR 0 3
82279: PPUSH
82280: CALL 39255 0 3
82284: NOT
82285: IFFALSE 82289
// exit ;
82287: GO 82543
// until GetDistUnitXY ( unit , x , y ) < dist ;
82289: LD_VAR 0 1
82293: PPUSH
82294: LD_VAR 0 2
82298: PPUSH
82299: LD_VAR 0 3
82303: PPUSH
82304: CALL_OW 297
82308: PUSH
82309: LD_VAR 0 5
82313: LESS
82314: IFFALSE 82258
// end ; ComTurnXY ( unit , x , y ) ;
82316: LD_VAR 0 1
82320: PPUSH
82321: LD_VAR 0 2
82325: PPUSH
82326: LD_VAR 0 3
82330: PPUSH
82331: CALL_OW 118
// wait ( 5 ) ;
82335: LD_INT 5
82337: PPUSH
82338: CALL_OW 67
// _d := GetDir ( unit ) ;
82342: LD_ADDR_VAR 0 10
82346: PUSH
82347: LD_VAR 0 1
82351: PPUSH
82352: CALL_OW 254
82356: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
82357: LD_ADDR_VAR 0 8
82361: PUSH
82362: LD_VAR 0 1
82366: PPUSH
82367: CALL_OW 250
82371: PPUSH
82372: LD_VAR 0 10
82376: PPUSH
82377: LD_VAR 0 5
82381: PPUSH
82382: CALL_OW 272
82386: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
82387: LD_ADDR_VAR 0 9
82391: PUSH
82392: LD_VAR 0 1
82396: PPUSH
82397: CALL_OW 251
82401: PPUSH
82402: LD_VAR 0 10
82406: PPUSH
82407: LD_VAR 0 5
82411: PPUSH
82412: CALL_OW 273
82416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82417: LD_VAR 0 8
82421: PPUSH
82422: LD_VAR 0 9
82426: PPUSH
82427: CALL_OW 488
82431: NOT
82432: IFFALSE 82436
// exit ;
82434: GO 82543
// ComAnimCustom ( unit , 1 ) ;
82436: LD_VAR 0 1
82440: PPUSH
82441: LD_INT 1
82443: PPUSH
82444: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82448: LD_VAR 0 8
82452: PPUSH
82453: LD_VAR 0 9
82457: PPUSH
82458: LD_VAR 0 6
82462: PPUSH
82463: LD_VAR 0 7
82467: PPUSH
82468: CALL_OW 330
// repeat wait ( 1 ) ;
82472: LD_INT 1
82474: PPUSH
82475: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
82479: LD_VAR 0 1
82483: PPUSH
82484: CALL_OW 316
82488: PUSH
82489: LD_VAR 0 1
82493: PPUSH
82494: CALL_OW 314
82498: OR
82499: PUSH
82500: LD_VAR 0 1
82504: PPUSH
82505: CALL_OW 302
82509: NOT
82510: OR
82511: PUSH
82512: LD_VAR 0 1
82516: PPUSH
82517: CALL_OW 301
82521: OR
82522: IFFALSE 82472
// RemoveSeeing ( _x , _y , side ) ;
82524: LD_VAR 0 8
82528: PPUSH
82529: LD_VAR 0 9
82533: PPUSH
82534: LD_VAR 0 6
82538: PPUSH
82539: CALL_OW 331
// end ; end_of_file end_of_file
82543: LD_VAR 0 4
82547: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82548: LD_VAR 0 1
82552: PUSH
82553: LD_INT 200
82555: DOUBLE
82556: GREATEREQUAL
82557: IFFALSE 82565
82559: LD_INT 299
82561: DOUBLE
82562: LESSEQUAL
82563: IFTRUE 82567
82565: GO 82599
82567: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82568: LD_VAR 0 1
82572: PPUSH
82573: LD_VAR 0 2
82577: PPUSH
82578: LD_VAR 0 3
82582: PPUSH
82583: LD_VAR 0 4
82587: PPUSH
82588: LD_VAR 0 5
82592: PPUSH
82593: CALL 78673 0 5
82597: GO 82676
82599: LD_INT 300
82601: DOUBLE
82602: GREATEREQUAL
82603: IFFALSE 82611
82605: LD_INT 399
82607: DOUBLE
82608: LESSEQUAL
82609: IFTRUE 82613
82611: GO 82675
82613: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82614: LD_VAR 0 1
82618: PPUSH
82619: LD_VAR 0 2
82623: PPUSH
82624: LD_VAR 0 3
82628: PPUSH
82629: LD_VAR 0 4
82633: PPUSH
82634: LD_VAR 0 5
82638: PPUSH
82639: LD_VAR 0 6
82643: PPUSH
82644: LD_VAR 0 7
82648: PPUSH
82649: LD_VAR 0 8
82653: PPUSH
82654: LD_VAR 0 9
82658: PPUSH
82659: LD_VAR 0 10
82663: PPUSH
82664: LD_VAR 0 11
82668: PPUSH
82669: CALL 93866 0 11
82673: GO 82676
82675: POP
// end ; end_of_file
82676: PPOPN 11
82678: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
82679: LD_VAR 0 2
82683: PUSH
82684: LD_INT 100
82686: EQUAL
82687: IFFALSE 83636
// begin if not StreamModeActive then
82689: LD_EXP 83
82693: NOT
82694: IFFALSE 82704
// StreamModeActive := true ;
82696: LD_ADDR_EXP 83
82700: PUSH
82701: LD_INT 1
82703: ST_TO_ADDR
// if p3 = 0 then
82704: LD_VAR 0 3
82708: PUSH
82709: LD_INT 0
82711: EQUAL
82712: IFFALSE 82718
// InitStreamMode ;
82714: CALL 83794 0 0
// if p3 = 1 then
82718: LD_VAR 0 3
82722: PUSH
82723: LD_INT 1
82725: EQUAL
82726: IFFALSE 82736
// sRocket := true ;
82728: LD_ADDR_EXP 88
82732: PUSH
82733: LD_INT 1
82735: ST_TO_ADDR
// if p3 = 2 then
82736: LD_VAR 0 3
82740: PUSH
82741: LD_INT 2
82743: EQUAL
82744: IFFALSE 82754
// sSpeed := true ;
82746: LD_ADDR_EXP 87
82750: PUSH
82751: LD_INT 1
82753: ST_TO_ADDR
// if p3 = 3 then
82754: LD_VAR 0 3
82758: PUSH
82759: LD_INT 3
82761: EQUAL
82762: IFFALSE 82772
// sEngine := true ;
82764: LD_ADDR_EXP 89
82768: PUSH
82769: LD_INT 1
82771: ST_TO_ADDR
// if p3 = 4 then
82772: LD_VAR 0 3
82776: PUSH
82777: LD_INT 4
82779: EQUAL
82780: IFFALSE 82790
// sSpec := true ;
82782: LD_ADDR_EXP 86
82786: PUSH
82787: LD_INT 1
82789: ST_TO_ADDR
// if p3 = 5 then
82790: LD_VAR 0 3
82794: PUSH
82795: LD_INT 5
82797: EQUAL
82798: IFFALSE 82808
// sLevel := true ;
82800: LD_ADDR_EXP 90
82804: PUSH
82805: LD_INT 1
82807: ST_TO_ADDR
// if p3 = 6 then
82808: LD_VAR 0 3
82812: PUSH
82813: LD_INT 6
82815: EQUAL
82816: IFFALSE 82826
// sArmoury := true ;
82818: LD_ADDR_EXP 91
82822: PUSH
82823: LD_INT 1
82825: ST_TO_ADDR
// if p3 = 7 then
82826: LD_VAR 0 3
82830: PUSH
82831: LD_INT 7
82833: EQUAL
82834: IFFALSE 82844
// sRadar := true ;
82836: LD_ADDR_EXP 92
82840: PUSH
82841: LD_INT 1
82843: ST_TO_ADDR
// if p3 = 8 then
82844: LD_VAR 0 3
82848: PUSH
82849: LD_INT 8
82851: EQUAL
82852: IFFALSE 82862
// sBunker := true ;
82854: LD_ADDR_EXP 93
82858: PUSH
82859: LD_INT 1
82861: ST_TO_ADDR
// if p3 = 9 then
82862: LD_VAR 0 3
82866: PUSH
82867: LD_INT 9
82869: EQUAL
82870: IFFALSE 82880
// sHack := true ;
82872: LD_ADDR_EXP 94
82876: PUSH
82877: LD_INT 1
82879: ST_TO_ADDR
// if p3 = 10 then
82880: LD_VAR 0 3
82884: PUSH
82885: LD_INT 10
82887: EQUAL
82888: IFFALSE 82898
// sFire := true ;
82890: LD_ADDR_EXP 95
82894: PUSH
82895: LD_INT 1
82897: ST_TO_ADDR
// if p3 = 11 then
82898: LD_VAR 0 3
82902: PUSH
82903: LD_INT 11
82905: EQUAL
82906: IFFALSE 82916
// sRefresh := true ;
82908: LD_ADDR_EXP 96
82912: PUSH
82913: LD_INT 1
82915: ST_TO_ADDR
// if p3 = 12 then
82916: LD_VAR 0 3
82920: PUSH
82921: LD_INT 12
82923: EQUAL
82924: IFFALSE 82934
// sExp := true ;
82926: LD_ADDR_EXP 97
82930: PUSH
82931: LD_INT 1
82933: ST_TO_ADDR
// if p3 = 13 then
82934: LD_VAR 0 3
82938: PUSH
82939: LD_INT 13
82941: EQUAL
82942: IFFALSE 82952
// sDepot := true ;
82944: LD_ADDR_EXP 98
82948: PUSH
82949: LD_INT 1
82951: ST_TO_ADDR
// if p3 = 14 then
82952: LD_VAR 0 3
82956: PUSH
82957: LD_INT 14
82959: EQUAL
82960: IFFALSE 82970
// sFlag := true ;
82962: LD_ADDR_EXP 99
82966: PUSH
82967: LD_INT 1
82969: ST_TO_ADDR
// if p3 = 15 then
82970: LD_VAR 0 3
82974: PUSH
82975: LD_INT 15
82977: EQUAL
82978: IFFALSE 82988
// sKamikadze := true ;
82980: LD_ADDR_EXP 107
82984: PUSH
82985: LD_INT 1
82987: ST_TO_ADDR
// if p3 = 16 then
82988: LD_VAR 0 3
82992: PUSH
82993: LD_INT 16
82995: EQUAL
82996: IFFALSE 83006
// sTroll := true ;
82998: LD_ADDR_EXP 108
83002: PUSH
83003: LD_INT 1
83005: ST_TO_ADDR
// if p3 = 17 then
83006: LD_VAR 0 3
83010: PUSH
83011: LD_INT 17
83013: EQUAL
83014: IFFALSE 83024
// sSlow := true ;
83016: LD_ADDR_EXP 109
83020: PUSH
83021: LD_INT 1
83023: ST_TO_ADDR
// if p3 = 18 then
83024: LD_VAR 0 3
83028: PUSH
83029: LD_INT 18
83031: EQUAL
83032: IFFALSE 83042
// sLack := true ;
83034: LD_ADDR_EXP 110
83038: PUSH
83039: LD_INT 1
83041: ST_TO_ADDR
// if p3 = 19 then
83042: LD_VAR 0 3
83046: PUSH
83047: LD_INT 19
83049: EQUAL
83050: IFFALSE 83060
// sTank := true ;
83052: LD_ADDR_EXP 112
83056: PUSH
83057: LD_INT 1
83059: ST_TO_ADDR
// if p3 = 20 then
83060: LD_VAR 0 3
83064: PUSH
83065: LD_INT 20
83067: EQUAL
83068: IFFALSE 83078
// sRemote := true ;
83070: LD_ADDR_EXP 113
83074: PUSH
83075: LD_INT 1
83077: ST_TO_ADDR
// if p3 = 21 then
83078: LD_VAR 0 3
83082: PUSH
83083: LD_INT 21
83085: EQUAL
83086: IFFALSE 83096
// sPowell := true ;
83088: LD_ADDR_EXP 114
83092: PUSH
83093: LD_INT 1
83095: ST_TO_ADDR
// if p3 = 22 then
83096: LD_VAR 0 3
83100: PUSH
83101: LD_INT 22
83103: EQUAL
83104: IFFALSE 83114
// sTeleport := true ;
83106: LD_ADDR_EXP 117
83110: PUSH
83111: LD_INT 1
83113: ST_TO_ADDR
// if p3 = 23 then
83114: LD_VAR 0 3
83118: PUSH
83119: LD_INT 23
83121: EQUAL
83122: IFFALSE 83132
// sOilTower := true ;
83124: LD_ADDR_EXP 119
83128: PUSH
83129: LD_INT 1
83131: ST_TO_ADDR
// if p3 = 24 then
83132: LD_VAR 0 3
83136: PUSH
83137: LD_INT 24
83139: EQUAL
83140: IFFALSE 83150
// sShovel := true ;
83142: LD_ADDR_EXP 120
83146: PUSH
83147: LD_INT 1
83149: ST_TO_ADDR
// if p3 = 25 then
83150: LD_VAR 0 3
83154: PUSH
83155: LD_INT 25
83157: EQUAL
83158: IFFALSE 83168
// sSheik := true ;
83160: LD_ADDR_EXP 121
83164: PUSH
83165: LD_INT 1
83167: ST_TO_ADDR
// if p3 = 26 then
83168: LD_VAR 0 3
83172: PUSH
83173: LD_INT 26
83175: EQUAL
83176: IFFALSE 83186
// sEarthquake := true ;
83178: LD_ADDR_EXP 123
83182: PUSH
83183: LD_INT 1
83185: ST_TO_ADDR
// if p3 = 27 then
83186: LD_VAR 0 3
83190: PUSH
83191: LD_INT 27
83193: EQUAL
83194: IFFALSE 83204
// sAI := true ;
83196: LD_ADDR_EXP 124
83200: PUSH
83201: LD_INT 1
83203: ST_TO_ADDR
// if p3 = 28 then
83204: LD_VAR 0 3
83208: PUSH
83209: LD_INT 28
83211: EQUAL
83212: IFFALSE 83222
// sCargo := true ;
83214: LD_ADDR_EXP 127
83218: PUSH
83219: LD_INT 1
83221: ST_TO_ADDR
// if p3 = 29 then
83222: LD_VAR 0 3
83226: PUSH
83227: LD_INT 29
83229: EQUAL
83230: IFFALSE 83240
// sDLaser := true ;
83232: LD_ADDR_EXP 128
83236: PUSH
83237: LD_INT 1
83239: ST_TO_ADDR
// if p3 = 30 then
83240: LD_VAR 0 3
83244: PUSH
83245: LD_INT 30
83247: EQUAL
83248: IFFALSE 83258
// sExchange := true ;
83250: LD_ADDR_EXP 129
83254: PUSH
83255: LD_INT 1
83257: ST_TO_ADDR
// if p3 = 31 then
83258: LD_VAR 0 3
83262: PUSH
83263: LD_INT 31
83265: EQUAL
83266: IFFALSE 83276
// sFac := true ;
83268: LD_ADDR_EXP 130
83272: PUSH
83273: LD_INT 1
83275: ST_TO_ADDR
// if p3 = 32 then
83276: LD_VAR 0 3
83280: PUSH
83281: LD_INT 32
83283: EQUAL
83284: IFFALSE 83294
// sPower := true ;
83286: LD_ADDR_EXP 131
83290: PUSH
83291: LD_INT 1
83293: ST_TO_ADDR
// if p3 = 33 then
83294: LD_VAR 0 3
83298: PUSH
83299: LD_INT 33
83301: EQUAL
83302: IFFALSE 83312
// sRandom := true ;
83304: LD_ADDR_EXP 132
83308: PUSH
83309: LD_INT 1
83311: ST_TO_ADDR
// if p3 = 34 then
83312: LD_VAR 0 3
83316: PUSH
83317: LD_INT 34
83319: EQUAL
83320: IFFALSE 83330
// sShield := true ;
83322: LD_ADDR_EXP 133
83326: PUSH
83327: LD_INT 1
83329: ST_TO_ADDR
// if p3 = 35 then
83330: LD_VAR 0 3
83334: PUSH
83335: LD_INT 35
83337: EQUAL
83338: IFFALSE 83348
// sTime := true ;
83340: LD_ADDR_EXP 134
83344: PUSH
83345: LD_INT 1
83347: ST_TO_ADDR
// if p3 = 36 then
83348: LD_VAR 0 3
83352: PUSH
83353: LD_INT 36
83355: EQUAL
83356: IFFALSE 83366
// sTools := true ;
83358: LD_ADDR_EXP 135
83362: PUSH
83363: LD_INT 1
83365: ST_TO_ADDR
// if p3 = 101 then
83366: LD_VAR 0 3
83370: PUSH
83371: LD_INT 101
83373: EQUAL
83374: IFFALSE 83384
// sSold := true ;
83376: LD_ADDR_EXP 100
83380: PUSH
83381: LD_INT 1
83383: ST_TO_ADDR
// if p3 = 102 then
83384: LD_VAR 0 3
83388: PUSH
83389: LD_INT 102
83391: EQUAL
83392: IFFALSE 83402
// sDiff := true ;
83394: LD_ADDR_EXP 101
83398: PUSH
83399: LD_INT 1
83401: ST_TO_ADDR
// if p3 = 103 then
83402: LD_VAR 0 3
83406: PUSH
83407: LD_INT 103
83409: EQUAL
83410: IFFALSE 83420
// sFog := true ;
83412: LD_ADDR_EXP 104
83416: PUSH
83417: LD_INT 1
83419: ST_TO_ADDR
// if p3 = 104 then
83420: LD_VAR 0 3
83424: PUSH
83425: LD_INT 104
83427: EQUAL
83428: IFFALSE 83438
// sReset := true ;
83430: LD_ADDR_EXP 105
83434: PUSH
83435: LD_INT 1
83437: ST_TO_ADDR
// if p3 = 105 then
83438: LD_VAR 0 3
83442: PUSH
83443: LD_INT 105
83445: EQUAL
83446: IFFALSE 83456
// sSun := true ;
83448: LD_ADDR_EXP 106
83452: PUSH
83453: LD_INT 1
83455: ST_TO_ADDR
// if p3 = 106 then
83456: LD_VAR 0 3
83460: PUSH
83461: LD_INT 106
83463: EQUAL
83464: IFFALSE 83474
// sTiger := true ;
83466: LD_ADDR_EXP 102
83470: PUSH
83471: LD_INT 1
83473: ST_TO_ADDR
// if p3 = 107 then
83474: LD_VAR 0 3
83478: PUSH
83479: LD_INT 107
83481: EQUAL
83482: IFFALSE 83492
// sBomb := true ;
83484: LD_ADDR_EXP 103
83488: PUSH
83489: LD_INT 1
83491: ST_TO_ADDR
// if p3 = 108 then
83492: LD_VAR 0 3
83496: PUSH
83497: LD_INT 108
83499: EQUAL
83500: IFFALSE 83510
// sWound := true ;
83502: LD_ADDR_EXP 111
83506: PUSH
83507: LD_INT 1
83509: ST_TO_ADDR
// if p3 = 109 then
83510: LD_VAR 0 3
83514: PUSH
83515: LD_INT 109
83517: EQUAL
83518: IFFALSE 83528
// sBetray := true ;
83520: LD_ADDR_EXP 115
83524: PUSH
83525: LD_INT 1
83527: ST_TO_ADDR
// if p3 = 110 then
83528: LD_VAR 0 3
83532: PUSH
83533: LD_INT 110
83535: EQUAL
83536: IFFALSE 83546
// sContamin := true ;
83538: LD_ADDR_EXP 116
83542: PUSH
83543: LD_INT 1
83545: ST_TO_ADDR
// if p3 = 111 then
83546: LD_VAR 0 3
83550: PUSH
83551: LD_INT 111
83553: EQUAL
83554: IFFALSE 83564
// sOil := true ;
83556: LD_ADDR_EXP 118
83560: PUSH
83561: LD_INT 1
83563: ST_TO_ADDR
// if p3 = 112 then
83564: LD_VAR 0 3
83568: PUSH
83569: LD_INT 112
83571: EQUAL
83572: IFFALSE 83582
// sStu := true ;
83574: LD_ADDR_EXP 122
83578: PUSH
83579: LD_INT 1
83581: ST_TO_ADDR
// if p3 = 113 then
83582: LD_VAR 0 3
83586: PUSH
83587: LD_INT 113
83589: EQUAL
83590: IFFALSE 83600
// sBazooka := true ;
83592: LD_ADDR_EXP 125
83596: PUSH
83597: LD_INT 1
83599: ST_TO_ADDR
// if p3 = 114 then
83600: LD_VAR 0 3
83604: PUSH
83605: LD_INT 114
83607: EQUAL
83608: IFFALSE 83618
// sMortar := true ;
83610: LD_ADDR_EXP 126
83614: PUSH
83615: LD_INT 1
83617: ST_TO_ADDR
// if p3 = 115 then
83618: LD_VAR 0 3
83622: PUSH
83623: LD_INT 115
83625: EQUAL
83626: IFFALSE 83636
// sRanger := true ;
83628: LD_ADDR_EXP 136
83632: PUSH
83633: LD_INT 1
83635: ST_TO_ADDR
// end ; if p2 = 101 then
83636: LD_VAR 0 2
83640: PUSH
83641: LD_INT 101
83643: EQUAL
83644: IFFALSE 83772
// begin case p3 of 1 :
83646: LD_VAR 0 3
83650: PUSH
83651: LD_INT 1
83653: DOUBLE
83654: EQUAL
83655: IFTRUE 83659
83657: GO 83666
83659: POP
// hHackUnlimitedResources ; 2 :
83660: CALL 94807 0 0
83664: GO 83772
83666: LD_INT 2
83668: DOUBLE
83669: EQUAL
83670: IFTRUE 83674
83672: GO 83681
83674: POP
// hHackSetLevel10 ; 3 :
83675: CALL 94940 0 0
83679: GO 83772
83681: LD_INT 3
83683: DOUBLE
83684: EQUAL
83685: IFTRUE 83689
83687: GO 83696
83689: POP
// hHackSetLevel10YourUnits ; 4 :
83690: CALL 95025 0 0
83694: GO 83772
83696: LD_INT 4
83698: DOUBLE
83699: EQUAL
83700: IFTRUE 83704
83702: GO 83711
83704: POP
// hHackInvincible ; 5 :
83705: CALL 95473 0 0
83709: GO 83772
83711: LD_INT 5
83713: DOUBLE
83714: EQUAL
83715: IFTRUE 83719
83717: GO 83726
83719: POP
// hHackInvisible ; 6 :
83720: CALL 95584 0 0
83724: GO 83772
83726: LD_INT 6
83728: DOUBLE
83729: EQUAL
83730: IFTRUE 83734
83732: GO 83741
83734: POP
// hHackChangeYourSide ; 7 :
83735: CALL 95641 0 0
83739: GO 83772
83741: LD_INT 7
83743: DOUBLE
83744: EQUAL
83745: IFTRUE 83749
83747: GO 83756
83749: POP
// hHackChangeUnitSide ; 8 :
83750: CALL 95683 0 0
83754: GO 83772
83756: LD_INT 8
83758: DOUBLE
83759: EQUAL
83760: IFTRUE 83764
83762: GO 83771
83764: POP
// hHackFog ; end ;
83765: CALL 95784 0 0
83769: GO 83772
83771: POP
// end ; end ;
83772: PPOPN 6
83774: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
83775: GO 83777
83777: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
83778: LD_STRING initStreamRollete();
83780: PPUSH
83781: CALL_OW 559
// InitStreamMode ;
83785: CALL 83794 0 0
// DefineStreamItems ( ) ;
83789: CALL 84234 0 0
// end ;
83793: END
// function InitStreamMode ; begin
83794: LD_INT 0
83796: PPUSH
// streamModeActive := false ;
83797: LD_ADDR_EXP 83
83801: PUSH
83802: LD_INT 0
83804: ST_TO_ADDR
// normalCounter := 36 ;
83805: LD_ADDR_EXP 84
83809: PUSH
83810: LD_INT 36
83812: ST_TO_ADDR
// hardcoreCounter := 16 ;
83813: LD_ADDR_EXP 85
83817: PUSH
83818: LD_INT 16
83820: ST_TO_ADDR
// sRocket := false ;
83821: LD_ADDR_EXP 88
83825: PUSH
83826: LD_INT 0
83828: ST_TO_ADDR
// sSpeed := false ;
83829: LD_ADDR_EXP 87
83833: PUSH
83834: LD_INT 0
83836: ST_TO_ADDR
// sEngine := false ;
83837: LD_ADDR_EXP 89
83841: PUSH
83842: LD_INT 0
83844: ST_TO_ADDR
// sSpec := false ;
83845: LD_ADDR_EXP 86
83849: PUSH
83850: LD_INT 0
83852: ST_TO_ADDR
// sLevel := false ;
83853: LD_ADDR_EXP 90
83857: PUSH
83858: LD_INT 0
83860: ST_TO_ADDR
// sArmoury := false ;
83861: LD_ADDR_EXP 91
83865: PUSH
83866: LD_INT 0
83868: ST_TO_ADDR
// sRadar := false ;
83869: LD_ADDR_EXP 92
83873: PUSH
83874: LD_INT 0
83876: ST_TO_ADDR
// sBunker := false ;
83877: LD_ADDR_EXP 93
83881: PUSH
83882: LD_INT 0
83884: ST_TO_ADDR
// sHack := false ;
83885: LD_ADDR_EXP 94
83889: PUSH
83890: LD_INT 0
83892: ST_TO_ADDR
// sFire := false ;
83893: LD_ADDR_EXP 95
83897: PUSH
83898: LD_INT 0
83900: ST_TO_ADDR
// sRefresh := false ;
83901: LD_ADDR_EXP 96
83905: PUSH
83906: LD_INT 0
83908: ST_TO_ADDR
// sExp := false ;
83909: LD_ADDR_EXP 97
83913: PUSH
83914: LD_INT 0
83916: ST_TO_ADDR
// sDepot := false ;
83917: LD_ADDR_EXP 98
83921: PUSH
83922: LD_INT 0
83924: ST_TO_ADDR
// sFlag := false ;
83925: LD_ADDR_EXP 99
83929: PUSH
83930: LD_INT 0
83932: ST_TO_ADDR
// sKamikadze := false ;
83933: LD_ADDR_EXP 107
83937: PUSH
83938: LD_INT 0
83940: ST_TO_ADDR
// sTroll := false ;
83941: LD_ADDR_EXP 108
83945: PUSH
83946: LD_INT 0
83948: ST_TO_ADDR
// sSlow := false ;
83949: LD_ADDR_EXP 109
83953: PUSH
83954: LD_INT 0
83956: ST_TO_ADDR
// sLack := false ;
83957: LD_ADDR_EXP 110
83961: PUSH
83962: LD_INT 0
83964: ST_TO_ADDR
// sTank := false ;
83965: LD_ADDR_EXP 112
83969: PUSH
83970: LD_INT 0
83972: ST_TO_ADDR
// sRemote := false ;
83973: LD_ADDR_EXP 113
83977: PUSH
83978: LD_INT 0
83980: ST_TO_ADDR
// sPowell := false ;
83981: LD_ADDR_EXP 114
83985: PUSH
83986: LD_INT 0
83988: ST_TO_ADDR
// sTeleport := false ;
83989: LD_ADDR_EXP 117
83993: PUSH
83994: LD_INT 0
83996: ST_TO_ADDR
// sOilTower := false ;
83997: LD_ADDR_EXP 119
84001: PUSH
84002: LD_INT 0
84004: ST_TO_ADDR
// sShovel := false ;
84005: LD_ADDR_EXP 120
84009: PUSH
84010: LD_INT 0
84012: ST_TO_ADDR
// sSheik := false ;
84013: LD_ADDR_EXP 121
84017: PUSH
84018: LD_INT 0
84020: ST_TO_ADDR
// sEarthquake := false ;
84021: LD_ADDR_EXP 123
84025: PUSH
84026: LD_INT 0
84028: ST_TO_ADDR
// sAI := false ;
84029: LD_ADDR_EXP 124
84033: PUSH
84034: LD_INT 0
84036: ST_TO_ADDR
// sCargo := false ;
84037: LD_ADDR_EXP 127
84041: PUSH
84042: LD_INT 0
84044: ST_TO_ADDR
// sDLaser := false ;
84045: LD_ADDR_EXP 128
84049: PUSH
84050: LD_INT 0
84052: ST_TO_ADDR
// sExchange := false ;
84053: LD_ADDR_EXP 129
84057: PUSH
84058: LD_INT 0
84060: ST_TO_ADDR
// sFac := false ;
84061: LD_ADDR_EXP 130
84065: PUSH
84066: LD_INT 0
84068: ST_TO_ADDR
// sPower := false ;
84069: LD_ADDR_EXP 131
84073: PUSH
84074: LD_INT 0
84076: ST_TO_ADDR
// sRandom := false ;
84077: LD_ADDR_EXP 132
84081: PUSH
84082: LD_INT 0
84084: ST_TO_ADDR
// sShield := false ;
84085: LD_ADDR_EXP 133
84089: PUSH
84090: LD_INT 0
84092: ST_TO_ADDR
// sTime := false ;
84093: LD_ADDR_EXP 134
84097: PUSH
84098: LD_INT 0
84100: ST_TO_ADDR
// sTools := false ;
84101: LD_ADDR_EXP 135
84105: PUSH
84106: LD_INT 0
84108: ST_TO_ADDR
// sSold := false ;
84109: LD_ADDR_EXP 100
84113: PUSH
84114: LD_INT 0
84116: ST_TO_ADDR
// sDiff := false ;
84117: LD_ADDR_EXP 101
84121: PUSH
84122: LD_INT 0
84124: ST_TO_ADDR
// sFog := false ;
84125: LD_ADDR_EXP 104
84129: PUSH
84130: LD_INT 0
84132: ST_TO_ADDR
// sReset := false ;
84133: LD_ADDR_EXP 105
84137: PUSH
84138: LD_INT 0
84140: ST_TO_ADDR
// sSun := false ;
84141: LD_ADDR_EXP 106
84145: PUSH
84146: LD_INT 0
84148: ST_TO_ADDR
// sTiger := false ;
84149: LD_ADDR_EXP 102
84153: PUSH
84154: LD_INT 0
84156: ST_TO_ADDR
// sBomb := false ;
84157: LD_ADDR_EXP 103
84161: PUSH
84162: LD_INT 0
84164: ST_TO_ADDR
// sWound := false ;
84165: LD_ADDR_EXP 111
84169: PUSH
84170: LD_INT 0
84172: ST_TO_ADDR
// sBetray := false ;
84173: LD_ADDR_EXP 115
84177: PUSH
84178: LD_INT 0
84180: ST_TO_ADDR
// sContamin := false ;
84181: LD_ADDR_EXP 116
84185: PUSH
84186: LD_INT 0
84188: ST_TO_ADDR
// sOil := false ;
84189: LD_ADDR_EXP 118
84193: PUSH
84194: LD_INT 0
84196: ST_TO_ADDR
// sStu := false ;
84197: LD_ADDR_EXP 122
84201: PUSH
84202: LD_INT 0
84204: ST_TO_ADDR
// sBazooka := false ;
84205: LD_ADDR_EXP 125
84209: PUSH
84210: LD_INT 0
84212: ST_TO_ADDR
// sMortar := false ;
84213: LD_ADDR_EXP 126
84217: PUSH
84218: LD_INT 0
84220: ST_TO_ADDR
// sRanger := false ;
84221: LD_ADDR_EXP 136
84225: PUSH
84226: LD_INT 0
84228: ST_TO_ADDR
// end ;
84229: LD_VAR 0 1
84233: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
84234: LD_INT 0
84236: PPUSH
84237: PPUSH
84238: PPUSH
84239: PPUSH
84240: PPUSH
// result := [ ] ;
84241: LD_ADDR_VAR 0 1
84245: PUSH
84246: EMPTY
84247: ST_TO_ADDR
// if campaign_id = 1 then
84248: LD_OWVAR 69
84252: PUSH
84253: LD_INT 1
84255: EQUAL
84256: IFFALSE 87194
// begin case mission_number of 1 :
84258: LD_OWVAR 70
84262: PUSH
84263: LD_INT 1
84265: DOUBLE
84266: EQUAL
84267: IFTRUE 84271
84269: GO 84335
84271: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
84272: LD_ADDR_VAR 0 1
84276: PUSH
84277: LD_INT 2
84279: PUSH
84280: LD_INT 4
84282: PUSH
84283: LD_INT 11
84285: PUSH
84286: LD_INT 12
84288: PUSH
84289: LD_INT 15
84291: PUSH
84292: LD_INT 16
84294: PUSH
84295: LD_INT 22
84297: PUSH
84298: LD_INT 23
84300: PUSH
84301: LD_INT 26
84303: PUSH
84304: EMPTY
84305: LIST
84306: LIST
84307: LIST
84308: LIST
84309: LIST
84310: LIST
84311: LIST
84312: LIST
84313: LIST
84314: PUSH
84315: LD_INT 101
84317: PUSH
84318: LD_INT 102
84320: PUSH
84321: LD_INT 106
84323: PUSH
84324: EMPTY
84325: LIST
84326: LIST
84327: LIST
84328: PUSH
84329: EMPTY
84330: LIST
84331: LIST
84332: ST_TO_ADDR
84333: GO 87192
84335: LD_INT 2
84337: DOUBLE
84338: EQUAL
84339: IFTRUE 84343
84341: GO 84415
84343: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
84344: LD_ADDR_VAR 0 1
84348: PUSH
84349: LD_INT 2
84351: PUSH
84352: LD_INT 4
84354: PUSH
84355: LD_INT 11
84357: PUSH
84358: LD_INT 12
84360: PUSH
84361: LD_INT 15
84363: PUSH
84364: LD_INT 16
84366: PUSH
84367: LD_INT 22
84369: PUSH
84370: LD_INT 23
84372: PUSH
84373: LD_INT 26
84375: PUSH
84376: EMPTY
84377: LIST
84378: LIST
84379: LIST
84380: LIST
84381: LIST
84382: LIST
84383: LIST
84384: LIST
84385: LIST
84386: PUSH
84387: LD_INT 101
84389: PUSH
84390: LD_INT 102
84392: PUSH
84393: LD_INT 105
84395: PUSH
84396: LD_INT 106
84398: PUSH
84399: LD_INT 108
84401: PUSH
84402: EMPTY
84403: LIST
84404: LIST
84405: LIST
84406: LIST
84407: LIST
84408: PUSH
84409: EMPTY
84410: LIST
84411: LIST
84412: ST_TO_ADDR
84413: GO 87192
84415: LD_INT 3
84417: DOUBLE
84418: EQUAL
84419: IFTRUE 84423
84421: GO 84499
84423: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
84424: LD_ADDR_VAR 0 1
84428: PUSH
84429: LD_INT 2
84431: PUSH
84432: LD_INT 4
84434: PUSH
84435: LD_INT 5
84437: PUSH
84438: LD_INT 11
84440: PUSH
84441: LD_INT 12
84443: PUSH
84444: LD_INT 15
84446: PUSH
84447: LD_INT 16
84449: PUSH
84450: LD_INT 22
84452: PUSH
84453: LD_INT 26
84455: PUSH
84456: LD_INT 36
84458: PUSH
84459: EMPTY
84460: LIST
84461: LIST
84462: LIST
84463: LIST
84464: LIST
84465: LIST
84466: LIST
84467: LIST
84468: LIST
84469: LIST
84470: PUSH
84471: LD_INT 101
84473: PUSH
84474: LD_INT 102
84476: PUSH
84477: LD_INT 105
84479: PUSH
84480: LD_INT 106
84482: PUSH
84483: LD_INT 108
84485: PUSH
84486: EMPTY
84487: LIST
84488: LIST
84489: LIST
84490: LIST
84491: LIST
84492: PUSH
84493: EMPTY
84494: LIST
84495: LIST
84496: ST_TO_ADDR
84497: GO 87192
84499: LD_INT 4
84501: DOUBLE
84502: EQUAL
84503: IFTRUE 84507
84505: GO 84591
84507: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
84508: LD_ADDR_VAR 0 1
84512: PUSH
84513: LD_INT 2
84515: PUSH
84516: LD_INT 4
84518: PUSH
84519: LD_INT 5
84521: PUSH
84522: LD_INT 8
84524: PUSH
84525: LD_INT 11
84527: PUSH
84528: LD_INT 12
84530: PUSH
84531: LD_INT 15
84533: PUSH
84534: LD_INT 16
84536: PUSH
84537: LD_INT 22
84539: PUSH
84540: LD_INT 23
84542: PUSH
84543: LD_INT 26
84545: PUSH
84546: LD_INT 36
84548: PUSH
84549: EMPTY
84550: LIST
84551: LIST
84552: LIST
84553: LIST
84554: LIST
84555: LIST
84556: LIST
84557: LIST
84558: LIST
84559: LIST
84560: LIST
84561: LIST
84562: PUSH
84563: LD_INT 101
84565: PUSH
84566: LD_INT 102
84568: PUSH
84569: LD_INT 105
84571: PUSH
84572: LD_INT 106
84574: PUSH
84575: LD_INT 108
84577: PUSH
84578: EMPTY
84579: LIST
84580: LIST
84581: LIST
84582: LIST
84583: LIST
84584: PUSH
84585: EMPTY
84586: LIST
84587: LIST
84588: ST_TO_ADDR
84589: GO 87192
84591: LD_INT 5
84593: DOUBLE
84594: EQUAL
84595: IFTRUE 84599
84597: GO 84699
84599: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
84600: LD_ADDR_VAR 0 1
84604: PUSH
84605: LD_INT 2
84607: PUSH
84608: LD_INT 4
84610: PUSH
84611: LD_INT 5
84613: PUSH
84614: LD_INT 6
84616: PUSH
84617: LD_INT 8
84619: PUSH
84620: LD_INT 11
84622: PUSH
84623: LD_INT 12
84625: PUSH
84626: LD_INT 15
84628: PUSH
84629: LD_INT 16
84631: PUSH
84632: LD_INT 22
84634: PUSH
84635: LD_INT 23
84637: PUSH
84638: LD_INT 25
84640: PUSH
84641: LD_INT 26
84643: PUSH
84644: LD_INT 36
84646: PUSH
84647: EMPTY
84648: LIST
84649: LIST
84650: LIST
84651: LIST
84652: LIST
84653: LIST
84654: LIST
84655: LIST
84656: LIST
84657: LIST
84658: LIST
84659: LIST
84660: LIST
84661: LIST
84662: PUSH
84663: LD_INT 101
84665: PUSH
84666: LD_INT 102
84668: PUSH
84669: LD_INT 105
84671: PUSH
84672: LD_INT 106
84674: PUSH
84675: LD_INT 108
84677: PUSH
84678: LD_INT 109
84680: PUSH
84681: LD_INT 112
84683: PUSH
84684: EMPTY
84685: LIST
84686: LIST
84687: LIST
84688: LIST
84689: LIST
84690: LIST
84691: LIST
84692: PUSH
84693: EMPTY
84694: LIST
84695: LIST
84696: ST_TO_ADDR
84697: GO 87192
84699: LD_INT 6
84701: DOUBLE
84702: EQUAL
84703: IFTRUE 84707
84705: GO 84827
84707: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
84708: LD_ADDR_VAR 0 1
84712: PUSH
84713: LD_INT 2
84715: PUSH
84716: LD_INT 4
84718: PUSH
84719: LD_INT 5
84721: PUSH
84722: LD_INT 6
84724: PUSH
84725: LD_INT 8
84727: PUSH
84728: LD_INT 11
84730: PUSH
84731: LD_INT 12
84733: PUSH
84734: LD_INT 15
84736: PUSH
84737: LD_INT 16
84739: PUSH
84740: LD_INT 20
84742: PUSH
84743: LD_INT 21
84745: PUSH
84746: LD_INT 22
84748: PUSH
84749: LD_INT 23
84751: PUSH
84752: LD_INT 25
84754: PUSH
84755: LD_INT 26
84757: PUSH
84758: LD_INT 30
84760: PUSH
84761: LD_INT 31
84763: PUSH
84764: LD_INT 32
84766: PUSH
84767: LD_INT 36
84769: PUSH
84770: EMPTY
84771: LIST
84772: LIST
84773: LIST
84774: LIST
84775: LIST
84776: LIST
84777: LIST
84778: LIST
84779: LIST
84780: LIST
84781: LIST
84782: LIST
84783: LIST
84784: LIST
84785: LIST
84786: LIST
84787: LIST
84788: LIST
84789: LIST
84790: PUSH
84791: LD_INT 101
84793: PUSH
84794: LD_INT 102
84796: PUSH
84797: LD_INT 105
84799: PUSH
84800: LD_INT 106
84802: PUSH
84803: LD_INT 108
84805: PUSH
84806: LD_INT 109
84808: PUSH
84809: LD_INT 112
84811: PUSH
84812: EMPTY
84813: LIST
84814: LIST
84815: LIST
84816: LIST
84817: LIST
84818: LIST
84819: LIST
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: ST_TO_ADDR
84825: GO 87192
84827: LD_INT 7
84829: DOUBLE
84830: EQUAL
84831: IFTRUE 84835
84833: GO 84935
84835: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
84836: LD_ADDR_VAR 0 1
84840: PUSH
84841: LD_INT 2
84843: PUSH
84844: LD_INT 4
84846: PUSH
84847: LD_INT 5
84849: PUSH
84850: LD_INT 7
84852: PUSH
84853: LD_INT 11
84855: PUSH
84856: LD_INT 12
84858: PUSH
84859: LD_INT 15
84861: PUSH
84862: LD_INT 16
84864: PUSH
84865: LD_INT 20
84867: PUSH
84868: LD_INT 21
84870: PUSH
84871: LD_INT 22
84873: PUSH
84874: LD_INT 23
84876: PUSH
84877: LD_INT 25
84879: PUSH
84880: LD_INT 26
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: LIST
84887: LIST
84888: LIST
84889: LIST
84890: LIST
84891: LIST
84892: LIST
84893: LIST
84894: LIST
84895: LIST
84896: LIST
84897: LIST
84898: PUSH
84899: LD_INT 101
84901: PUSH
84902: LD_INT 102
84904: PUSH
84905: LD_INT 103
84907: PUSH
84908: LD_INT 105
84910: PUSH
84911: LD_INT 106
84913: PUSH
84914: LD_INT 108
84916: PUSH
84917: LD_INT 112
84919: PUSH
84920: EMPTY
84921: LIST
84922: LIST
84923: LIST
84924: LIST
84925: LIST
84926: LIST
84927: LIST
84928: PUSH
84929: EMPTY
84930: LIST
84931: LIST
84932: ST_TO_ADDR
84933: GO 87192
84935: LD_INT 8
84937: DOUBLE
84938: EQUAL
84939: IFTRUE 84943
84941: GO 85071
84943: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
84944: LD_ADDR_VAR 0 1
84948: PUSH
84949: LD_INT 2
84951: PUSH
84952: LD_INT 4
84954: PUSH
84955: LD_INT 5
84957: PUSH
84958: LD_INT 6
84960: PUSH
84961: LD_INT 7
84963: PUSH
84964: LD_INT 8
84966: PUSH
84967: LD_INT 11
84969: PUSH
84970: LD_INT 12
84972: PUSH
84973: LD_INT 15
84975: PUSH
84976: LD_INT 16
84978: PUSH
84979: LD_INT 20
84981: PUSH
84982: LD_INT 21
84984: PUSH
84985: LD_INT 22
84987: PUSH
84988: LD_INT 23
84990: PUSH
84991: LD_INT 25
84993: PUSH
84994: LD_INT 26
84996: PUSH
84997: LD_INT 30
84999: PUSH
85000: LD_INT 31
85002: PUSH
85003: LD_INT 32
85005: PUSH
85006: LD_INT 36
85008: PUSH
85009: EMPTY
85010: LIST
85011: LIST
85012: LIST
85013: LIST
85014: LIST
85015: LIST
85016: LIST
85017: LIST
85018: LIST
85019: LIST
85020: LIST
85021: LIST
85022: LIST
85023: LIST
85024: LIST
85025: LIST
85026: LIST
85027: LIST
85028: LIST
85029: LIST
85030: PUSH
85031: LD_INT 101
85033: PUSH
85034: LD_INT 102
85036: PUSH
85037: LD_INT 103
85039: PUSH
85040: LD_INT 105
85042: PUSH
85043: LD_INT 106
85045: PUSH
85046: LD_INT 108
85048: PUSH
85049: LD_INT 109
85051: PUSH
85052: LD_INT 112
85054: PUSH
85055: EMPTY
85056: LIST
85057: LIST
85058: LIST
85059: LIST
85060: LIST
85061: LIST
85062: LIST
85063: LIST
85064: PUSH
85065: EMPTY
85066: LIST
85067: LIST
85068: ST_TO_ADDR
85069: GO 87192
85071: LD_INT 9
85073: DOUBLE
85074: EQUAL
85075: IFTRUE 85079
85077: GO 85215
85079: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
85080: LD_ADDR_VAR 0 1
85084: PUSH
85085: LD_INT 2
85087: PUSH
85088: LD_INT 4
85090: PUSH
85091: LD_INT 5
85093: PUSH
85094: LD_INT 6
85096: PUSH
85097: LD_INT 7
85099: PUSH
85100: LD_INT 8
85102: PUSH
85103: LD_INT 11
85105: PUSH
85106: LD_INT 12
85108: PUSH
85109: LD_INT 15
85111: PUSH
85112: LD_INT 16
85114: PUSH
85115: LD_INT 20
85117: PUSH
85118: LD_INT 21
85120: PUSH
85121: LD_INT 22
85123: PUSH
85124: LD_INT 23
85126: PUSH
85127: LD_INT 25
85129: PUSH
85130: LD_INT 26
85132: PUSH
85133: LD_INT 28
85135: PUSH
85136: LD_INT 30
85138: PUSH
85139: LD_INT 31
85141: PUSH
85142: LD_INT 32
85144: PUSH
85145: LD_INT 36
85147: PUSH
85148: EMPTY
85149: LIST
85150: LIST
85151: LIST
85152: LIST
85153: LIST
85154: LIST
85155: LIST
85156: LIST
85157: LIST
85158: LIST
85159: LIST
85160: LIST
85161: LIST
85162: LIST
85163: LIST
85164: LIST
85165: LIST
85166: LIST
85167: LIST
85168: LIST
85169: LIST
85170: PUSH
85171: LD_INT 101
85173: PUSH
85174: LD_INT 102
85176: PUSH
85177: LD_INT 103
85179: PUSH
85180: LD_INT 105
85182: PUSH
85183: LD_INT 106
85185: PUSH
85186: LD_INT 108
85188: PUSH
85189: LD_INT 109
85191: PUSH
85192: LD_INT 112
85194: PUSH
85195: LD_INT 114
85197: PUSH
85198: EMPTY
85199: LIST
85200: LIST
85201: LIST
85202: LIST
85203: LIST
85204: LIST
85205: LIST
85206: LIST
85207: LIST
85208: PUSH
85209: EMPTY
85210: LIST
85211: LIST
85212: ST_TO_ADDR
85213: GO 87192
85215: LD_INT 10
85217: DOUBLE
85218: EQUAL
85219: IFTRUE 85223
85221: GO 85407
85223: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
85224: LD_ADDR_VAR 0 1
85228: PUSH
85229: LD_INT 2
85231: PUSH
85232: LD_INT 4
85234: PUSH
85235: LD_INT 5
85237: PUSH
85238: LD_INT 6
85240: PUSH
85241: LD_INT 7
85243: PUSH
85244: LD_INT 8
85246: PUSH
85247: LD_INT 9
85249: PUSH
85250: LD_INT 10
85252: PUSH
85253: LD_INT 11
85255: PUSH
85256: LD_INT 12
85258: PUSH
85259: LD_INT 13
85261: PUSH
85262: LD_INT 14
85264: PUSH
85265: LD_INT 15
85267: PUSH
85268: LD_INT 16
85270: PUSH
85271: LD_INT 17
85273: PUSH
85274: LD_INT 18
85276: PUSH
85277: LD_INT 19
85279: PUSH
85280: LD_INT 20
85282: PUSH
85283: LD_INT 21
85285: PUSH
85286: LD_INT 22
85288: PUSH
85289: LD_INT 23
85291: PUSH
85292: LD_INT 24
85294: PUSH
85295: LD_INT 25
85297: PUSH
85298: LD_INT 26
85300: PUSH
85301: LD_INT 28
85303: PUSH
85304: LD_INT 30
85306: PUSH
85307: LD_INT 31
85309: PUSH
85310: LD_INT 32
85312: PUSH
85313: LD_INT 36
85315: PUSH
85316: EMPTY
85317: LIST
85318: LIST
85319: LIST
85320: LIST
85321: LIST
85322: LIST
85323: LIST
85324: LIST
85325: LIST
85326: LIST
85327: LIST
85328: LIST
85329: LIST
85330: LIST
85331: LIST
85332: LIST
85333: LIST
85334: LIST
85335: LIST
85336: LIST
85337: LIST
85338: LIST
85339: LIST
85340: LIST
85341: LIST
85342: LIST
85343: LIST
85344: LIST
85345: LIST
85346: PUSH
85347: LD_INT 101
85349: PUSH
85350: LD_INT 102
85352: PUSH
85353: LD_INT 103
85355: PUSH
85356: LD_INT 104
85358: PUSH
85359: LD_INT 105
85361: PUSH
85362: LD_INT 106
85364: PUSH
85365: LD_INT 107
85367: PUSH
85368: LD_INT 108
85370: PUSH
85371: LD_INT 109
85373: PUSH
85374: LD_INT 110
85376: PUSH
85377: LD_INT 111
85379: PUSH
85380: LD_INT 112
85382: PUSH
85383: LD_INT 114
85385: PUSH
85386: EMPTY
85387: LIST
85388: LIST
85389: LIST
85390: LIST
85391: LIST
85392: LIST
85393: LIST
85394: LIST
85395: LIST
85396: LIST
85397: LIST
85398: LIST
85399: LIST
85400: PUSH
85401: EMPTY
85402: LIST
85403: LIST
85404: ST_TO_ADDR
85405: GO 87192
85407: LD_INT 11
85409: DOUBLE
85410: EQUAL
85411: IFTRUE 85415
85413: GO 85607
85415: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
85416: LD_ADDR_VAR 0 1
85420: PUSH
85421: LD_INT 2
85423: PUSH
85424: LD_INT 3
85426: PUSH
85427: LD_INT 4
85429: PUSH
85430: LD_INT 5
85432: PUSH
85433: LD_INT 6
85435: PUSH
85436: LD_INT 7
85438: PUSH
85439: LD_INT 8
85441: PUSH
85442: LD_INT 9
85444: PUSH
85445: LD_INT 10
85447: PUSH
85448: LD_INT 11
85450: PUSH
85451: LD_INT 12
85453: PUSH
85454: LD_INT 13
85456: PUSH
85457: LD_INT 14
85459: PUSH
85460: LD_INT 15
85462: PUSH
85463: LD_INT 16
85465: PUSH
85466: LD_INT 17
85468: PUSH
85469: LD_INT 18
85471: PUSH
85472: LD_INT 19
85474: PUSH
85475: LD_INT 20
85477: PUSH
85478: LD_INT 21
85480: PUSH
85481: LD_INT 22
85483: PUSH
85484: LD_INT 23
85486: PUSH
85487: LD_INT 24
85489: PUSH
85490: LD_INT 25
85492: PUSH
85493: LD_INT 26
85495: PUSH
85496: LD_INT 28
85498: PUSH
85499: LD_INT 30
85501: PUSH
85502: LD_INT 31
85504: PUSH
85505: LD_INT 32
85507: PUSH
85508: LD_INT 34
85510: PUSH
85511: LD_INT 36
85513: PUSH
85514: EMPTY
85515: LIST
85516: LIST
85517: LIST
85518: LIST
85519: LIST
85520: LIST
85521: LIST
85522: LIST
85523: LIST
85524: LIST
85525: LIST
85526: LIST
85527: LIST
85528: LIST
85529: LIST
85530: LIST
85531: LIST
85532: LIST
85533: LIST
85534: LIST
85535: LIST
85536: LIST
85537: LIST
85538: LIST
85539: LIST
85540: LIST
85541: LIST
85542: LIST
85543: LIST
85544: LIST
85545: LIST
85546: PUSH
85547: LD_INT 101
85549: PUSH
85550: LD_INT 102
85552: PUSH
85553: LD_INT 103
85555: PUSH
85556: LD_INT 104
85558: PUSH
85559: LD_INT 105
85561: PUSH
85562: LD_INT 106
85564: PUSH
85565: LD_INT 107
85567: PUSH
85568: LD_INT 108
85570: PUSH
85571: LD_INT 109
85573: PUSH
85574: LD_INT 110
85576: PUSH
85577: LD_INT 111
85579: PUSH
85580: LD_INT 112
85582: PUSH
85583: LD_INT 114
85585: PUSH
85586: EMPTY
85587: LIST
85588: LIST
85589: LIST
85590: LIST
85591: LIST
85592: LIST
85593: LIST
85594: LIST
85595: LIST
85596: LIST
85597: LIST
85598: LIST
85599: LIST
85600: PUSH
85601: EMPTY
85602: LIST
85603: LIST
85604: ST_TO_ADDR
85605: GO 87192
85607: LD_INT 12
85609: DOUBLE
85610: EQUAL
85611: IFTRUE 85615
85613: GO 85823
85615: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
85616: LD_ADDR_VAR 0 1
85620: PUSH
85621: LD_INT 1
85623: PUSH
85624: LD_INT 2
85626: PUSH
85627: LD_INT 3
85629: PUSH
85630: LD_INT 4
85632: PUSH
85633: LD_INT 5
85635: PUSH
85636: LD_INT 6
85638: PUSH
85639: LD_INT 7
85641: PUSH
85642: LD_INT 8
85644: PUSH
85645: LD_INT 9
85647: PUSH
85648: LD_INT 10
85650: PUSH
85651: LD_INT 11
85653: PUSH
85654: LD_INT 12
85656: PUSH
85657: LD_INT 13
85659: PUSH
85660: LD_INT 14
85662: PUSH
85663: LD_INT 15
85665: PUSH
85666: LD_INT 16
85668: PUSH
85669: LD_INT 17
85671: PUSH
85672: LD_INT 18
85674: PUSH
85675: LD_INT 19
85677: PUSH
85678: LD_INT 20
85680: PUSH
85681: LD_INT 21
85683: PUSH
85684: LD_INT 22
85686: PUSH
85687: LD_INT 23
85689: PUSH
85690: LD_INT 24
85692: PUSH
85693: LD_INT 25
85695: PUSH
85696: LD_INT 26
85698: PUSH
85699: LD_INT 27
85701: PUSH
85702: LD_INT 28
85704: PUSH
85705: LD_INT 30
85707: PUSH
85708: LD_INT 31
85710: PUSH
85711: LD_INT 32
85713: PUSH
85714: LD_INT 33
85716: PUSH
85717: LD_INT 34
85719: PUSH
85720: LD_INT 36
85722: PUSH
85723: EMPTY
85724: LIST
85725: LIST
85726: LIST
85727: LIST
85728: LIST
85729: LIST
85730: LIST
85731: LIST
85732: LIST
85733: LIST
85734: LIST
85735: LIST
85736: LIST
85737: LIST
85738: LIST
85739: LIST
85740: LIST
85741: LIST
85742: LIST
85743: LIST
85744: LIST
85745: LIST
85746: LIST
85747: LIST
85748: LIST
85749: LIST
85750: LIST
85751: LIST
85752: LIST
85753: LIST
85754: LIST
85755: LIST
85756: LIST
85757: LIST
85758: PUSH
85759: LD_INT 101
85761: PUSH
85762: LD_INT 102
85764: PUSH
85765: LD_INT 103
85767: PUSH
85768: LD_INT 104
85770: PUSH
85771: LD_INT 105
85773: PUSH
85774: LD_INT 106
85776: PUSH
85777: LD_INT 107
85779: PUSH
85780: LD_INT 108
85782: PUSH
85783: LD_INT 109
85785: PUSH
85786: LD_INT 110
85788: PUSH
85789: LD_INT 111
85791: PUSH
85792: LD_INT 112
85794: PUSH
85795: LD_INT 113
85797: PUSH
85798: LD_INT 114
85800: PUSH
85801: EMPTY
85802: LIST
85803: LIST
85804: LIST
85805: LIST
85806: LIST
85807: LIST
85808: LIST
85809: LIST
85810: LIST
85811: LIST
85812: LIST
85813: LIST
85814: LIST
85815: LIST
85816: PUSH
85817: EMPTY
85818: LIST
85819: LIST
85820: ST_TO_ADDR
85821: GO 87192
85823: LD_INT 13
85825: DOUBLE
85826: EQUAL
85827: IFTRUE 85831
85829: GO 86027
85831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
85832: LD_ADDR_VAR 0 1
85836: PUSH
85837: LD_INT 1
85839: PUSH
85840: LD_INT 2
85842: PUSH
85843: LD_INT 3
85845: PUSH
85846: LD_INT 4
85848: PUSH
85849: LD_INT 5
85851: PUSH
85852: LD_INT 8
85854: PUSH
85855: LD_INT 9
85857: PUSH
85858: LD_INT 10
85860: PUSH
85861: LD_INT 11
85863: PUSH
85864: LD_INT 12
85866: PUSH
85867: LD_INT 14
85869: PUSH
85870: LD_INT 15
85872: PUSH
85873: LD_INT 16
85875: PUSH
85876: LD_INT 17
85878: PUSH
85879: LD_INT 18
85881: PUSH
85882: LD_INT 19
85884: PUSH
85885: LD_INT 20
85887: PUSH
85888: LD_INT 21
85890: PUSH
85891: LD_INT 22
85893: PUSH
85894: LD_INT 23
85896: PUSH
85897: LD_INT 24
85899: PUSH
85900: LD_INT 25
85902: PUSH
85903: LD_INT 26
85905: PUSH
85906: LD_INT 27
85908: PUSH
85909: LD_INT 28
85911: PUSH
85912: LD_INT 30
85914: PUSH
85915: LD_INT 31
85917: PUSH
85918: LD_INT 32
85920: PUSH
85921: LD_INT 33
85923: PUSH
85924: LD_INT 34
85926: PUSH
85927: LD_INT 36
85929: PUSH
85930: EMPTY
85931: LIST
85932: LIST
85933: LIST
85934: LIST
85935: LIST
85936: LIST
85937: LIST
85938: LIST
85939: LIST
85940: LIST
85941: LIST
85942: LIST
85943: LIST
85944: LIST
85945: LIST
85946: LIST
85947: LIST
85948: LIST
85949: LIST
85950: LIST
85951: LIST
85952: LIST
85953: LIST
85954: LIST
85955: LIST
85956: LIST
85957: LIST
85958: LIST
85959: LIST
85960: LIST
85961: LIST
85962: PUSH
85963: LD_INT 101
85965: PUSH
85966: LD_INT 102
85968: PUSH
85969: LD_INT 103
85971: PUSH
85972: LD_INT 104
85974: PUSH
85975: LD_INT 105
85977: PUSH
85978: LD_INT 106
85980: PUSH
85981: LD_INT 107
85983: PUSH
85984: LD_INT 108
85986: PUSH
85987: LD_INT 109
85989: PUSH
85990: LD_INT 110
85992: PUSH
85993: LD_INT 111
85995: PUSH
85996: LD_INT 112
85998: PUSH
85999: LD_INT 113
86001: PUSH
86002: LD_INT 114
86004: PUSH
86005: EMPTY
86006: LIST
86007: LIST
86008: LIST
86009: LIST
86010: LIST
86011: LIST
86012: LIST
86013: LIST
86014: LIST
86015: LIST
86016: LIST
86017: LIST
86018: LIST
86019: LIST
86020: PUSH
86021: EMPTY
86022: LIST
86023: LIST
86024: ST_TO_ADDR
86025: GO 87192
86027: LD_INT 14
86029: DOUBLE
86030: EQUAL
86031: IFTRUE 86035
86033: GO 86247
86035: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
86036: LD_ADDR_VAR 0 1
86040: PUSH
86041: LD_INT 1
86043: PUSH
86044: LD_INT 2
86046: PUSH
86047: LD_INT 3
86049: PUSH
86050: LD_INT 4
86052: PUSH
86053: LD_INT 5
86055: PUSH
86056: LD_INT 6
86058: PUSH
86059: LD_INT 7
86061: PUSH
86062: LD_INT 8
86064: PUSH
86065: LD_INT 9
86067: PUSH
86068: LD_INT 10
86070: PUSH
86071: LD_INT 11
86073: PUSH
86074: LD_INT 12
86076: PUSH
86077: LD_INT 13
86079: PUSH
86080: LD_INT 14
86082: PUSH
86083: LD_INT 15
86085: PUSH
86086: LD_INT 16
86088: PUSH
86089: LD_INT 17
86091: PUSH
86092: LD_INT 18
86094: PUSH
86095: LD_INT 19
86097: PUSH
86098: LD_INT 20
86100: PUSH
86101: LD_INT 21
86103: PUSH
86104: LD_INT 22
86106: PUSH
86107: LD_INT 23
86109: PUSH
86110: LD_INT 24
86112: PUSH
86113: LD_INT 25
86115: PUSH
86116: LD_INT 26
86118: PUSH
86119: LD_INT 27
86121: PUSH
86122: LD_INT 28
86124: PUSH
86125: LD_INT 29
86127: PUSH
86128: LD_INT 30
86130: PUSH
86131: LD_INT 31
86133: PUSH
86134: LD_INT 32
86136: PUSH
86137: LD_INT 33
86139: PUSH
86140: LD_INT 34
86142: PUSH
86143: LD_INT 36
86145: PUSH
86146: EMPTY
86147: LIST
86148: LIST
86149: LIST
86150: LIST
86151: LIST
86152: LIST
86153: LIST
86154: LIST
86155: LIST
86156: LIST
86157: LIST
86158: LIST
86159: LIST
86160: LIST
86161: LIST
86162: LIST
86163: LIST
86164: LIST
86165: LIST
86166: LIST
86167: LIST
86168: LIST
86169: LIST
86170: LIST
86171: LIST
86172: LIST
86173: LIST
86174: LIST
86175: LIST
86176: LIST
86177: LIST
86178: LIST
86179: LIST
86180: LIST
86181: LIST
86182: PUSH
86183: LD_INT 101
86185: PUSH
86186: LD_INT 102
86188: PUSH
86189: LD_INT 103
86191: PUSH
86192: LD_INT 104
86194: PUSH
86195: LD_INT 105
86197: PUSH
86198: LD_INT 106
86200: PUSH
86201: LD_INT 107
86203: PUSH
86204: LD_INT 108
86206: PUSH
86207: LD_INT 109
86209: PUSH
86210: LD_INT 110
86212: PUSH
86213: LD_INT 111
86215: PUSH
86216: LD_INT 112
86218: PUSH
86219: LD_INT 113
86221: PUSH
86222: LD_INT 114
86224: PUSH
86225: EMPTY
86226: LIST
86227: LIST
86228: LIST
86229: LIST
86230: LIST
86231: LIST
86232: LIST
86233: LIST
86234: LIST
86235: LIST
86236: LIST
86237: LIST
86238: LIST
86239: LIST
86240: PUSH
86241: EMPTY
86242: LIST
86243: LIST
86244: ST_TO_ADDR
86245: GO 87192
86247: LD_INT 15
86249: DOUBLE
86250: EQUAL
86251: IFTRUE 86255
86253: GO 86467
86255: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
86256: LD_ADDR_VAR 0 1
86260: PUSH
86261: LD_INT 1
86263: PUSH
86264: LD_INT 2
86266: PUSH
86267: LD_INT 3
86269: PUSH
86270: LD_INT 4
86272: PUSH
86273: LD_INT 5
86275: PUSH
86276: LD_INT 6
86278: PUSH
86279: LD_INT 7
86281: PUSH
86282: LD_INT 8
86284: PUSH
86285: LD_INT 9
86287: PUSH
86288: LD_INT 10
86290: PUSH
86291: LD_INT 11
86293: PUSH
86294: LD_INT 12
86296: PUSH
86297: LD_INT 13
86299: PUSH
86300: LD_INT 14
86302: PUSH
86303: LD_INT 15
86305: PUSH
86306: LD_INT 16
86308: PUSH
86309: LD_INT 17
86311: PUSH
86312: LD_INT 18
86314: PUSH
86315: LD_INT 19
86317: PUSH
86318: LD_INT 20
86320: PUSH
86321: LD_INT 21
86323: PUSH
86324: LD_INT 22
86326: PUSH
86327: LD_INT 23
86329: PUSH
86330: LD_INT 24
86332: PUSH
86333: LD_INT 25
86335: PUSH
86336: LD_INT 26
86338: PUSH
86339: LD_INT 27
86341: PUSH
86342: LD_INT 28
86344: PUSH
86345: LD_INT 29
86347: PUSH
86348: LD_INT 30
86350: PUSH
86351: LD_INT 31
86353: PUSH
86354: LD_INT 32
86356: PUSH
86357: LD_INT 33
86359: PUSH
86360: LD_INT 34
86362: PUSH
86363: LD_INT 36
86365: PUSH
86366: EMPTY
86367: LIST
86368: LIST
86369: LIST
86370: LIST
86371: LIST
86372: LIST
86373: LIST
86374: LIST
86375: LIST
86376: LIST
86377: LIST
86378: LIST
86379: LIST
86380: LIST
86381: LIST
86382: LIST
86383: LIST
86384: LIST
86385: LIST
86386: LIST
86387: LIST
86388: LIST
86389: LIST
86390: LIST
86391: LIST
86392: LIST
86393: LIST
86394: LIST
86395: LIST
86396: LIST
86397: LIST
86398: LIST
86399: LIST
86400: LIST
86401: LIST
86402: PUSH
86403: LD_INT 101
86405: PUSH
86406: LD_INT 102
86408: PUSH
86409: LD_INT 103
86411: PUSH
86412: LD_INT 104
86414: PUSH
86415: LD_INT 105
86417: PUSH
86418: LD_INT 106
86420: PUSH
86421: LD_INT 107
86423: PUSH
86424: LD_INT 108
86426: PUSH
86427: LD_INT 109
86429: PUSH
86430: LD_INT 110
86432: PUSH
86433: LD_INT 111
86435: PUSH
86436: LD_INT 112
86438: PUSH
86439: LD_INT 113
86441: PUSH
86442: LD_INT 114
86444: PUSH
86445: EMPTY
86446: LIST
86447: LIST
86448: LIST
86449: LIST
86450: LIST
86451: LIST
86452: LIST
86453: LIST
86454: LIST
86455: LIST
86456: LIST
86457: LIST
86458: LIST
86459: LIST
86460: PUSH
86461: EMPTY
86462: LIST
86463: LIST
86464: ST_TO_ADDR
86465: GO 87192
86467: LD_INT 16
86469: DOUBLE
86470: EQUAL
86471: IFTRUE 86475
86473: GO 86599
86475: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
86476: LD_ADDR_VAR 0 1
86480: PUSH
86481: LD_INT 2
86483: PUSH
86484: LD_INT 4
86486: PUSH
86487: LD_INT 5
86489: PUSH
86490: LD_INT 7
86492: PUSH
86493: LD_INT 11
86495: PUSH
86496: LD_INT 12
86498: PUSH
86499: LD_INT 15
86501: PUSH
86502: LD_INT 16
86504: PUSH
86505: LD_INT 20
86507: PUSH
86508: LD_INT 21
86510: PUSH
86511: LD_INT 22
86513: PUSH
86514: LD_INT 23
86516: PUSH
86517: LD_INT 25
86519: PUSH
86520: LD_INT 26
86522: PUSH
86523: LD_INT 30
86525: PUSH
86526: LD_INT 31
86528: PUSH
86529: LD_INT 32
86531: PUSH
86532: LD_INT 33
86534: PUSH
86535: LD_INT 34
86537: PUSH
86538: EMPTY
86539: LIST
86540: LIST
86541: LIST
86542: LIST
86543: LIST
86544: LIST
86545: LIST
86546: LIST
86547: LIST
86548: LIST
86549: LIST
86550: LIST
86551: LIST
86552: LIST
86553: LIST
86554: LIST
86555: LIST
86556: LIST
86557: LIST
86558: PUSH
86559: LD_INT 101
86561: PUSH
86562: LD_INT 102
86564: PUSH
86565: LD_INT 103
86567: PUSH
86568: LD_INT 106
86570: PUSH
86571: LD_INT 108
86573: PUSH
86574: LD_INT 112
86576: PUSH
86577: LD_INT 113
86579: PUSH
86580: LD_INT 114
86582: PUSH
86583: EMPTY
86584: LIST
86585: LIST
86586: LIST
86587: LIST
86588: LIST
86589: LIST
86590: LIST
86591: LIST
86592: PUSH
86593: EMPTY
86594: LIST
86595: LIST
86596: ST_TO_ADDR
86597: GO 87192
86599: LD_INT 17
86601: DOUBLE
86602: EQUAL
86603: IFTRUE 86607
86605: GO 86819
86607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
86608: LD_ADDR_VAR 0 1
86612: PUSH
86613: LD_INT 1
86615: PUSH
86616: LD_INT 2
86618: PUSH
86619: LD_INT 3
86621: PUSH
86622: LD_INT 4
86624: PUSH
86625: LD_INT 5
86627: PUSH
86628: LD_INT 6
86630: PUSH
86631: LD_INT 7
86633: PUSH
86634: LD_INT 8
86636: PUSH
86637: LD_INT 9
86639: PUSH
86640: LD_INT 10
86642: PUSH
86643: LD_INT 11
86645: PUSH
86646: LD_INT 12
86648: PUSH
86649: LD_INT 13
86651: PUSH
86652: LD_INT 14
86654: PUSH
86655: LD_INT 15
86657: PUSH
86658: LD_INT 16
86660: PUSH
86661: LD_INT 17
86663: PUSH
86664: LD_INT 18
86666: PUSH
86667: LD_INT 19
86669: PUSH
86670: LD_INT 20
86672: PUSH
86673: LD_INT 21
86675: PUSH
86676: LD_INT 22
86678: PUSH
86679: LD_INT 23
86681: PUSH
86682: LD_INT 24
86684: PUSH
86685: LD_INT 25
86687: PUSH
86688: LD_INT 26
86690: PUSH
86691: LD_INT 27
86693: PUSH
86694: LD_INT 28
86696: PUSH
86697: LD_INT 29
86699: PUSH
86700: LD_INT 30
86702: PUSH
86703: LD_INT 31
86705: PUSH
86706: LD_INT 32
86708: PUSH
86709: LD_INT 33
86711: PUSH
86712: LD_INT 34
86714: PUSH
86715: LD_INT 36
86717: PUSH
86718: EMPTY
86719: LIST
86720: LIST
86721: LIST
86722: LIST
86723: LIST
86724: LIST
86725: LIST
86726: LIST
86727: LIST
86728: LIST
86729: LIST
86730: LIST
86731: LIST
86732: LIST
86733: LIST
86734: LIST
86735: LIST
86736: LIST
86737: LIST
86738: LIST
86739: LIST
86740: LIST
86741: LIST
86742: LIST
86743: LIST
86744: LIST
86745: LIST
86746: LIST
86747: LIST
86748: LIST
86749: LIST
86750: LIST
86751: LIST
86752: LIST
86753: LIST
86754: PUSH
86755: LD_INT 101
86757: PUSH
86758: LD_INT 102
86760: PUSH
86761: LD_INT 103
86763: PUSH
86764: LD_INT 104
86766: PUSH
86767: LD_INT 105
86769: PUSH
86770: LD_INT 106
86772: PUSH
86773: LD_INT 107
86775: PUSH
86776: LD_INT 108
86778: PUSH
86779: LD_INT 109
86781: PUSH
86782: LD_INT 110
86784: PUSH
86785: LD_INT 111
86787: PUSH
86788: LD_INT 112
86790: PUSH
86791: LD_INT 113
86793: PUSH
86794: LD_INT 114
86796: PUSH
86797: EMPTY
86798: LIST
86799: LIST
86800: LIST
86801: LIST
86802: LIST
86803: LIST
86804: LIST
86805: LIST
86806: LIST
86807: LIST
86808: LIST
86809: LIST
86810: LIST
86811: LIST
86812: PUSH
86813: EMPTY
86814: LIST
86815: LIST
86816: ST_TO_ADDR
86817: GO 87192
86819: LD_INT 18
86821: DOUBLE
86822: EQUAL
86823: IFTRUE 86827
86825: GO 86963
86827: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
86828: LD_ADDR_VAR 0 1
86832: PUSH
86833: LD_INT 2
86835: PUSH
86836: LD_INT 4
86838: PUSH
86839: LD_INT 5
86841: PUSH
86842: LD_INT 7
86844: PUSH
86845: LD_INT 11
86847: PUSH
86848: LD_INT 12
86850: PUSH
86851: LD_INT 15
86853: PUSH
86854: LD_INT 16
86856: PUSH
86857: LD_INT 20
86859: PUSH
86860: LD_INT 21
86862: PUSH
86863: LD_INT 22
86865: PUSH
86866: LD_INT 23
86868: PUSH
86869: LD_INT 25
86871: PUSH
86872: LD_INT 26
86874: PUSH
86875: LD_INT 30
86877: PUSH
86878: LD_INT 31
86880: PUSH
86881: LD_INT 32
86883: PUSH
86884: LD_INT 33
86886: PUSH
86887: LD_INT 34
86889: PUSH
86890: LD_INT 35
86892: PUSH
86893: LD_INT 36
86895: PUSH
86896: EMPTY
86897: LIST
86898: LIST
86899: LIST
86900: LIST
86901: LIST
86902: LIST
86903: LIST
86904: LIST
86905: LIST
86906: LIST
86907: LIST
86908: LIST
86909: LIST
86910: LIST
86911: LIST
86912: LIST
86913: LIST
86914: LIST
86915: LIST
86916: LIST
86917: LIST
86918: PUSH
86919: LD_INT 101
86921: PUSH
86922: LD_INT 102
86924: PUSH
86925: LD_INT 103
86927: PUSH
86928: LD_INT 106
86930: PUSH
86931: LD_INT 108
86933: PUSH
86934: LD_INT 112
86936: PUSH
86937: LD_INT 113
86939: PUSH
86940: LD_INT 114
86942: PUSH
86943: LD_INT 115
86945: PUSH
86946: EMPTY
86947: LIST
86948: LIST
86949: LIST
86950: LIST
86951: LIST
86952: LIST
86953: LIST
86954: LIST
86955: LIST
86956: PUSH
86957: EMPTY
86958: LIST
86959: LIST
86960: ST_TO_ADDR
86961: GO 87192
86963: LD_INT 19
86965: DOUBLE
86966: EQUAL
86967: IFTRUE 86971
86969: GO 87191
86971: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
86972: LD_ADDR_VAR 0 1
86976: PUSH
86977: LD_INT 1
86979: PUSH
86980: LD_INT 2
86982: PUSH
86983: LD_INT 3
86985: PUSH
86986: LD_INT 4
86988: PUSH
86989: LD_INT 5
86991: PUSH
86992: LD_INT 6
86994: PUSH
86995: LD_INT 7
86997: PUSH
86998: LD_INT 8
87000: PUSH
87001: LD_INT 9
87003: PUSH
87004: LD_INT 10
87006: PUSH
87007: LD_INT 11
87009: PUSH
87010: LD_INT 12
87012: PUSH
87013: LD_INT 13
87015: PUSH
87016: LD_INT 14
87018: PUSH
87019: LD_INT 15
87021: PUSH
87022: LD_INT 16
87024: PUSH
87025: LD_INT 17
87027: PUSH
87028: LD_INT 18
87030: PUSH
87031: LD_INT 19
87033: PUSH
87034: LD_INT 20
87036: PUSH
87037: LD_INT 21
87039: PUSH
87040: LD_INT 22
87042: PUSH
87043: LD_INT 23
87045: PUSH
87046: LD_INT 24
87048: PUSH
87049: LD_INT 25
87051: PUSH
87052: LD_INT 26
87054: PUSH
87055: LD_INT 27
87057: PUSH
87058: LD_INT 28
87060: PUSH
87061: LD_INT 29
87063: PUSH
87064: LD_INT 30
87066: PUSH
87067: LD_INT 31
87069: PUSH
87070: LD_INT 32
87072: PUSH
87073: LD_INT 33
87075: PUSH
87076: LD_INT 34
87078: PUSH
87079: LD_INT 35
87081: PUSH
87082: LD_INT 36
87084: PUSH
87085: EMPTY
87086: LIST
87087: LIST
87088: LIST
87089: LIST
87090: LIST
87091: LIST
87092: LIST
87093: LIST
87094: LIST
87095: LIST
87096: LIST
87097: LIST
87098: LIST
87099: LIST
87100: LIST
87101: LIST
87102: LIST
87103: LIST
87104: LIST
87105: LIST
87106: LIST
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: LIST
87116: LIST
87117: LIST
87118: LIST
87119: LIST
87120: LIST
87121: LIST
87122: PUSH
87123: LD_INT 101
87125: PUSH
87126: LD_INT 102
87128: PUSH
87129: LD_INT 103
87131: PUSH
87132: LD_INT 104
87134: PUSH
87135: LD_INT 105
87137: PUSH
87138: LD_INT 106
87140: PUSH
87141: LD_INT 107
87143: PUSH
87144: LD_INT 108
87146: PUSH
87147: LD_INT 109
87149: PUSH
87150: LD_INT 110
87152: PUSH
87153: LD_INT 111
87155: PUSH
87156: LD_INT 112
87158: PUSH
87159: LD_INT 113
87161: PUSH
87162: LD_INT 114
87164: PUSH
87165: LD_INT 115
87167: PUSH
87168: EMPTY
87169: LIST
87170: LIST
87171: LIST
87172: LIST
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: LIST
87178: LIST
87179: LIST
87180: LIST
87181: LIST
87182: LIST
87183: LIST
87184: PUSH
87185: EMPTY
87186: LIST
87187: LIST
87188: ST_TO_ADDR
87189: GO 87192
87191: POP
// end else
87192: GO 87411
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
87194: LD_ADDR_VAR 0 1
87198: PUSH
87199: LD_INT 1
87201: PUSH
87202: LD_INT 2
87204: PUSH
87205: LD_INT 3
87207: PUSH
87208: LD_INT 4
87210: PUSH
87211: LD_INT 5
87213: PUSH
87214: LD_INT 6
87216: PUSH
87217: LD_INT 7
87219: PUSH
87220: LD_INT 8
87222: PUSH
87223: LD_INT 9
87225: PUSH
87226: LD_INT 10
87228: PUSH
87229: LD_INT 11
87231: PUSH
87232: LD_INT 12
87234: PUSH
87235: LD_INT 13
87237: PUSH
87238: LD_INT 14
87240: PUSH
87241: LD_INT 15
87243: PUSH
87244: LD_INT 16
87246: PUSH
87247: LD_INT 17
87249: PUSH
87250: LD_INT 18
87252: PUSH
87253: LD_INT 19
87255: PUSH
87256: LD_INT 20
87258: PUSH
87259: LD_INT 21
87261: PUSH
87262: LD_INT 22
87264: PUSH
87265: LD_INT 23
87267: PUSH
87268: LD_INT 24
87270: PUSH
87271: LD_INT 25
87273: PUSH
87274: LD_INT 26
87276: PUSH
87277: LD_INT 27
87279: PUSH
87280: LD_INT 28
87282: PUSH
87283: LD_INT 29
87285: PUSH
87286: LD_INT 30
87288: PUSH
87289: LD_INT 31
87291: PUSH
87292: LD_INT 32
87294: PUSH
87295: LD_INT 33
87297: PUSH
87298: LD_INT 34
87300: PUSH
87301: LD_INT 35
87303: PUSH
87304: LD_INT 36
87306: PUSH
87307: EMPTY
87308: LIST
87309: LIST
87310: LIST
87311: LIST
87312: LIST
87313: LIST
87314: LIST
87315: LIST
87316: LIST
87317: LIST
87318: LIST
87319: LIST
87320: LIST
87321: LIST
87322: LIST
87323: LIST
87324: LIST
87325: LIST
87326: LIST
87327: LIST
87328: LIST
87329: LIST
87330: LIST
87331: LIST
87332: LIST
87333: LIST
87334: LIST
87335: LIST
87336: LIST
87337: LIST
87338: LIST
87339: LIST
87340: LIST
87341: LIST
87342: LIST
87343: LIST
87344: PUSH
87345: LD_INT 101
87347: PUSH
87348: LD_INT 102
87350: PUSH
87351: LD_INT 103
87353: PUSH
87354: LD_INT 104
87356: PUSH
87357: LD_INT 105
87359: PUSH
87360: LD_INT 106
87362: PUSH
87363: LD_INT 107
87365: PUSH
87366: LD_INT 108
87368: PUSH
87369: LD_INT 109
87371: PUSH
87372: LD_INT 110
87374: PUSH
87375: LD_INT 111
87377: PUSH
87378: LD_INT 112
87380: PUSH
87381: LD_INT 113
87383: PUSH
87384: LD_INT 114
87386: PUSH
87387: LD_INT 115
87389: PUSH
87390: EMPTY
87391: LIST
87392: LIST
87393: LIST
87394: LIST
87395: LIST
87396: LIST
87397: LIST
87398: LIST
87399: LIST
87400: LIST
87401: LIST
87402: LIST
87403: LIST
87404: LIST
87405: LIST
87406: PUSH
87407: EMPTY
87408: LIST
87409: LIST
87410: ST_TO_ADDR
// if result then
87411: LD_VAR 0 1
87415: IFFALSE 87704
// begin normal :=  ;
87417: LD_ADDR_VAR 0 3
87421: PUSH
87422: LD_STRING 
87424: ST_TO_ADDR
// hardcore :=  ;
87425: LD_ADDR_VAR 0 4
87429: PUSH
87430: LD_STRING 
87432: ST_TO_ADDR
// for i = 1 to normalCounter do
87433: LD_ADDR_VAR 0 5
87437: PUSH
87438: DOUBLE
87439: LD_INT 1
87441: DEC
87442: ST_TO_ADDR
87443: LD_EXP 84
87447: PUSH
87448: FOR_TO
87449: IFFALSE 87550
// begin tmp := 0 ;
87451: LD_ADDR_VAR 0 2
87455: PUSH
87456: LD_STRING 0
87458: ST_TO_ADDR
// if result [ 1 ] then
87459: LD_VAR 0 1
87463: PUSH
87464: LD_INT 1
87466: ARRAY
87467: IFFALSE 87532
// if result [ 1 ] [ 1 ] = i then
87469: LD_VAR 0 1
87473: PUSH
87474: LD_INT 1
87476: ARRAY
87477: PUSH
87478: LD_INT 1
87480: ARRAY
87481: PUSH
87482: LD_VAR 0 5
87486: EQUAL
87487: IFFALSE 87532
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
87489: LD_ADDR_VAR 0 1
87493: PUSH
87494: LD_VAR 0 1
87498: PPUSH
87499: LD_INT 1
87501: PPUSH
87502: LD_VAR 0 1
87506: PUSH
87507: LD_INT 1
87509: ARRAY
87510: PPUSH
87511: LD_INT 1
87513: PPUSH
87514: CALL_OW 3
87518: PPUSH
87519: CALL_OW 1
87523: ST_TO_ADDR
// tmp := 1 ;
87524: LD_ADDR_VAR 0 2
87528: PUSH
87529: LD_STRING 1
87531: ST_TO_ADDR
// end ; normal := normal & tmp ;
87532: LD_ADDR_VAR 0 3
87536: PUSH
87537: LD_VAR 0 3
87541: PUSH
87542: LD_VAR 0 2
87546: STR
87547: ST_TO_ADDR
// end ;
87548: GO 87448
87550: POP
87551: POP
// for i = 1 to hardcoreCounter do
87552: LD_ADDR_VAR 0 5
87556: PUSH
87557: DOUBLE
87558: LD_INT 1
87560: DEC
87561: ST_TO_ADDR
87562: LD_EXP 85
87566: PUSH
87567: FOR_TO
87568: IFFALSE 87673
// begin tmp := 0 ;
87570: LD_ADDR_VAR 0 2
87574: PUSH
87575: LD_STRING 0
87577: ST_TO_ADDR
// if result [ 2 ] then
87578: LD_VAR 0 1
87582: PUSH
87583: LD_INT 2
87585: ARRAY
87586: IFFALSE 87655
// if result [ 2 ] [ 1 ] = 100 + i then
87588: LD_VAR 0 1
87592: PUSH
87593: LD_INT 2
87595: ARRAY
87596: PUSH
87597: LD_INT 1
87599: ARRAY
87600: PUSH
87601: LD_INT 100
87603: PUSH
87604: LD_VAR 0 5
87608: PLUS
87609: EQUAL
87610: IFFALSE 87655
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
87612: LD_ADDR_VAR 0 1
87616: PUSH
87617: LD_VAR 0 1
87621: PPUSH
87622: LD_INT 2
87624: PPUSH
87625: LD_VAR 0 1
87629: PUSH
87630: LD_INT 2
87632: ARRAY
87633: PPUSH
87634: LD_INT 1
87636: PPUSH
87637: CALL_OW 3
87641: PPUSH
87642: CALL_OW 1
87646: ST_TO_ADDR
// tmp := 1 ;
87647: LD_ADDR_VAR 0 2
87651: PUSH
87652: LD_STRING 1
87654: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
87655: LD_ADDR_VAR 0 4
87659: PUSH
87660: LD_VAR 0 4
87664: PUSH
87665: LD_VAR 0 2
87669: STR
87670: ST_TO_ADDR
// end ;
87671: GO 87567
87673: POP
87674: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
87675: LD_STRING getStreamItemsFromMission("
87677: PUSH
87678: LD_VAR 0 3
87682: STR
87683: PUSH
87684: LD_STRING ","
87686: STR
87687: PUSH
87688: LD_VAR 0 4
87692: STR
87693: PUSH
87694: LD_STRING ")
87696: STR
87697: PPUSH
87698: CALL_OW 559
// end else
87702: GO 87711
// ToLua ( getStreamItemsFromMission("","") ) ;
87704: LD_STRING getStreamItemsFromMission("","")
87706: PPUSH
87707: CALL_OW 559
// end ;
87711: LD_VAR 0 1
87715: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
87716: LD_EXP 83
87720: PUSH
87721: LD_EXP 88
87725: AND
87726: IFFALSE 87850
87728: GO 87730
87730: DISABLE
87731: LD_INT 0
87733: PPUSH
87734: PPUSH
// begin enable ;
87735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
87736: LD_ADDR_VAR 0 2
87740: PUSH
87741: LD_INT 22
87743: PUSH
87744: LD_OWVAR 2
87748: PUSH
87749: EMPTY
87750: LIST
87751: LIST
87752: PUSH
87753: LD_INT 2
87755: PUSH
87756: LD_INT 34
87758: PUSH
87759: LD_INT 7
87761: PUSH
87762: EMPTY
87763: LIST
87764: LIST
87765: PUSH
87766: LD_INT 34
87768: PUSH
87769: LD_INT 45
87771: PUSH
87772: EMPTY
87773: LIST
87774: LIST
87775: PUSH
87776: LD_INT 34
87778: PUSH
87779: LD_INT 28
87781: PUSH
87782: EMPTY
87783: LIST
87784: LIST
87785: PUSH
87786: LD_INT 34
87788: PUSH
87789: LD_INT 47
87791: PUSH
87792: EMPTY
87793: LIST
87794: LIST
87795: PUSH
87796: EMPTY
87797: LIST
87798: LIST
87799: LIST
87800: LIST
87801: LIST
87802: PUSH
87803: EMPTY
87804: LIST
87805: LIST
87806: PPUSH
87807: CALL_OW 69
87811: ST_TO_ADDR
// if not tmp then
87812: LD_VAR 0 2
87816: NOT
87817: IFFALSE 87821
// exit ;
87819: GO 87850
// for i in tmp do
87821: LD_ADDR_VAR 0 1
87825: PUSH
87826: LD_VAR 0 2
87830: PUSH
87831: FOR_IN
87832: IFFALSE 87848
// begin SetLives ( i , 0 ) ;
87834: LD_VAR 0 1
87838: PPUSH
87839: LD_INT 0
87841: PPUSH
87842: CALL_OW 234
// end ;
87846: GO 87831
87848: POP
87849: POP
// end ;
87850: PPOPN 2
87852: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
87853: LD_EXP 83
87857: PUSH
87858: LD_EXP 89
87862: AND
87863: IFFALSE 87947
87865: GO 87867
87867: DISABLE
87868: LD_INT 0
87870: PPUSH
87871: PPUSH
// begin enable ;
87872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
87873: LD_ADDR_VAR 0 2
87877: PUSH
87878: LD_INT 22
87880: PUSH
87881: LD_OWVAR 2
87885: PUSH
87886: EMPTY
87887: LIST
87888: LIST
87889: PUSH
87890: LD_INT 32
87892: PUSH
87893: LD_INT 3
87895: PUSH
87896: EMPTY
87897: LIST
87898: LIST
87899: PUSH
87900: EMPTY
87901: LIST
87902: LIST
87903: PPUSH
87904: CALL_OW 69
87908: ST_TO_ADDR
// if not tmp then
87909: LD_VAR 0 2
87913: NOT
87914: IFFALSE 87918
// exit ;
87916: GO 87947
// for i in tmp do
87918: LD_ADDR_VAR 0 1
87922: PUSH
87923: LD_VAR 0 2
87927: PUSH
87928: FOR_IN
87929: IFFALSE 87945
// begin SetLives ( i , 0 ) ;
87931: LD_VAR 0 1
87935: PPUSH
87936: LD_INT 0
87938: PPUSH
87939: CALL_OW 234
// end ;
87943: GO 87928
87945: POP
87946: POP
// end ;
87947: PPOPN 2
87949: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
87950: LD_EXP 83
87954: PUSH
87955: LD_EXP 86
87959: AND
87960: IFFALSE 88053
87962: GO 87964
87964: DISABLE
87965: LD_INT 0
87967: PPUSH
// begin enable ;
87968: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
87969: LD_ADDR_VAR 0 1
87973: PUSH
87974: LD_INT 22
87976: PUSH
87977: LD_OWVAR 2
87981: PUSH
87982: EMPTY
87983: LIST
87984: LIST
87985: PUSH
87986: LD_INT 2
87988: PUSH
87989: LD_INT 25
87991: PUSH
87992: LD_INT 5
87994: PUSH
87995: EMPTY
87996: LIST
87997: LIST
87998: PUSH
87999: LD_INT 25
88001: PUSH
88002: LD_INT 9
88004: PUSH
88005: EMPTY
88006: LIST
88007: LIST
88008: PUSH
88009: LD_INT 25
88011: PUSH
88012: LD_INT 8
88014: PUSH
88015: EMPTY
88016: LIST
88017: LIST
88018: PUSH
88019: EMPTY
88020: LIST
88021: LIST
88022: LIST
88023: LIST
88024: PUSH
88025: EMPTY
88026: LIST
88027: LIST
88028: PPUSH
88029: CALL_OW 69
88033: PUSH
88034: FOR_IN
88035: IFFALSE 88051
// begin SetClass ( i , 1 ) ;
88037: LD_VAR 0 1
88041: PPUSH
88042: LD_INT 1
88044: PPUSH
88045: CALL_OW 336
// end ;
88049: GO 88034
88051: POP
88052: POP
// end ;
88053: PPOPN 1
88055: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
88056: LD_EXP 83
88060: PUSH
88061: LD_EXP 87
88065: AND
88066: PUSH
88067: LD_OWVAR 65
88071: PUSH
88072: LD_INT 7
88074: LESS
88075: AND
88076: IFFALSE 88090
88078: GO 88080
88080: DISABLE
// begin enable ;
88081: ENABLE
// game_speed := 7 ;
88082: LD_ADDR_OWVAR 65
88086: PUSH
88087: LD_INT 7
88089: ST_TO_ADDR
// end ;
88090: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
88091: LD_EXP 83
88095: PUSH
88096: LD_EXP 90
88100: AND
88101: IFFALSE 88303
88103: GO 88105
88105: DISABLE
88106: LD_INT 0
88108: PPUSH
88109: PPUSH
88110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
88111: LD_ADDR_VAR 0 3
88115: PUSH
88116: LD_INT 81
88118: PUSH
88119: LD_OWVAR 2
88123: PUSH
88124: EMPTY
88125: LIST
88126: LIST
88127: PUSH
88128: LD_INT 21
88130: PUSH
88131: LD_INT 1
88133: PUSH
88134: EMPTY
88135: LIST
88136: LIST
88137: PUSH
88138: EMPTY
88139: LIST
88140: LIST
88141: PPUSH
88142: CALL_OW 69
88146: ST_TO_ADDR
// if not tmp then
88147: LD_VAR 0 3
88151: NOT
88152: IFFALSE 88156
// exit ;
88154: GO 88303
// if tmp > 5 then
88156: LD_VAR 0 3
88160: PUSH
88161: LD_INT 5
88163: GREATER
88164: IFFALSE 88176
// k := 5 else
88166: LD_ADDR_VAR 0 2
88170: PUSH
88171: LD_INT 5
88173: ST_TO_ADDR
88174: GO 88186
// k := tmp ;
88176: LD_ADDR_VAR 0 2
88180: PUSH
88181: LD_VAR 0 3
88185: ST_TO_ADDR
// for i := 1 to k do
88186: LD_ADDR_VAR 0 1
88190: PUSH
88191: DOUBLE
88192: LD_INT 1
88194: DEC
88195: ST_TO_ADDR
88196: LD_VAR 0 2
88200: PUSH
88201: FOR_TO
88202: IFFALSE 88301
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
88204: LD_VAR 0 3
88208: PUSH
88209: LD_VAR 0 1
88213: ARRAY
88214: PPUSH
88215: LD_VAR 0 1
88219: PUSH
88220: LD_INT 4
88222: MOD
88223: PUSH
88224: LD_INT 1
88226: PLUS
88227: PPUSH
88228: CALL_OW 259
88232: PUSH
88233: LD_INT 10
88235: LESS
88236: IFFALSE 88299
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
88238: LD_VAR 0 3
88242: PUSH
88243: LD_VAR 0 1
88247: ARRAY
88248: PPUSH
88249: LD_VAR 0 1
88253: PUSH
88254: LD_INT 4
88256: MOD
88257: PUSH
88258: LD_INT 1
88260: PLUS
88261: PPUSH
88262: LD_VAR 0 3
88266: PUSH
88267: LD_VAR 0 1
88271: ARRAY
88272: PPUSH
88273: LD_VAR 0 1
88277: PUSH
88278: LD_INT 4
88280: MOD
88281: PUSH
88282: LD_INT 1
88284: PLUS
88285: PPUSH
88286: CALL_OW 259
88290: PUSH
88291: LD_INT 1
88293: PLUS
88294: PPUSH
88295: CALL_OW 237
88299: GO 88201
88301: POP
88302: POP
// end ;
88303: PPOPN 3
88305: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
88306: LD_EXP 83
88310: PUSH
88311: LD_EXP 91
88315: AND
88316: IFFALSE 88336
88318: GO 88320
88320: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
88321: LD_INT 4
88323: PPUSH
88324: LD_OWVAR 2
88328: PPUSH
88329: LD_INT 0
88331: PPUSH
88332: CALL_OW 324
88336: END
// every 0 0$1 trigger StreamModeActive and sShovel do
88337: LD_EXP 83
88341: PUSH
88342: LD_EXP 120
88346: AND
88347: IFFALSE 88367
88349: GO 88351
88351: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
88352: LD_INT 19
88354: PPUSH
88355: LD_OWVAR 2
88359: PPUSH
88360: LD_INT 0
88362: PPUSH
88363: CALL_OW 324
88367: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
88368: LD_EXP 83
88372: PUSH
88373: LD_EXP 92
88377: AND
88378: IFFALSE 88480
88380: GO 88382
88382: DISABLE
88383: LD_INT 0
88385: PPUSH
88386: PPUSH
// begin enable ;
88387: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
88388: LD_ADDR_VAR 0 2
88392: PUSH
88393: LD_INT 22
88395: PUSH
88396: LD_OWVAR 2
88400: PUSH
88401: EMPTY
88402: LIST
88403: LIST
88404: PUSH
88405: LD_INT 2
88407: PUSH
88408: LD_INT 34
88410: PUSH
88411: LD_INT 11
88413: PUSH
88414: EMPTY
88415: LIST
88416: LIST
88417: PUSH
88418: LD_INT 34
88420: PUSH
88421: LD_INT 30
88423: PUSH
88424: EMPTY
88425: LIST
88426: LIST
88427: PUSH
88428: EMPTY
88429: LIST
88430: LIST
88431: LIST
88432: PUSH
88433: EMPTY
88434: LIST
88435: LIST
88436: PPUSH
88437: CALL_OW 69
88441: ST_TO_ADDR
// if not tmp then
88442: LD_VAR 0 2
88446: NOT
88447: IFFALSE 88451
// exit ;
88449: GO 88480
// for i in tmp do
88451: LD_ADDR_VAR 0 1
88455: PUSH
88456: LD_VAR 0 2
88460: PUSH
88461: FOR_IN
88462: IFFALSE 88478
// begin SetLives ( i , 0 ) ;
88464: LD_VAR 0 1
88468: PPUSH
88469: LD_INT 0
88471: PPUSH
88472: CALL_OW 234
// end ;
88476: GO 88461
88478: POP
88479: POP
// end ;
88480: PPOPN 2
88482: END
// every 0 0$1 trigger StreamModeActive and sBunker do
88483: LD_EXP 83
88487: PUSH
88488: LD_EXP 93
88492: AND
88493: IFFALSE 88513
88495: GO 88497
88497: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
88498: LD_INT 32
88500: PPUSH
88501: LD_OWVAR 2
88505: PPUSH
88506: LD_INT 0
88508: PPUSH
88509: CALL_OW 324
88513: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
88514: LD_EXP 83
88518: PUSH
88519: LD_EXP 94
88523: AND
88524: IFFALSE 88705
88526: GO 88528
88528: DISABLE
88529: LD_INT 0
88531: PPUSH
88532: PPUSH
88533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
88534: LD_ADDR_VAR 0 2
88538: PUSH
88539: LD_INT 22
88541: PUSH
88542: LD_OWVAR 2
88546: PUSH
88547: EMPTY
88548: LIST
88549: LIST
88550: PUSH
88551: LD_INT 33
88553: PUSH
88554: LD_INT 3
88556: PUSH
88557: EMPTY
88558: LIST
88559: LIST
88560: PUSH
88561: EMPTY
88562: LIST
88563: LIST
88564: PPUSH
88565: CALL_OW 69
88569: ST_TO_ADDR
// if not tmp then
88570: LD_VAR 0 2
88574: NOT
88575: IFFALSE 88579
// exit ;
88577: GO 88705
// side := 0 ;
88579: LD_ADDR_VAR 0 3
88583: PUSH
88584: LD_INT 0
88586: ST_TO_ADDR
// for i := 1 to 8 do
88587: LD_ADDR_VAR 0 1
88591: PUSH
88592: DOUBLE
88593: LD_INT 1
88595: DEC
88596: ST_TO_ADDR
88597: LD_INT 8
88599: PUSH
88600: FOR_TO
88601: IFFALSE 88649
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
88603: LD_OWVAR 2
88607: PUSH
88608: LD_VAR 0 1
88612: NONEQUAL
88613: PUSH
88614: LD_OWVAR 2
88618: PPUSH
88619: LD_VAR 0 1
88623: PPUSH
88624: CALL_OW 81
88628: PUSH
88629: LD_INT 2
88631: EQUAL
88632: AND
88633: IFFALSE 88647
// begin side := i ;
88635: LD_ADDR_VAR 0 3
88639: PUSH
88640: LD_VAR 0 1
88644: ST_TO_ADDR
// break ;
88645: GO 88649
// end ;
88647: GO 88600
88649: POP
88650: POP
// if not side then
88651: LD_VAR 0 3
88655: NOT
88656: IFFALSE 88660
// exit ;
88658: GO 88705
// for i := 1 to tmp do
88660: LD_ADDR_VAR 0 1
88664: PUSH
88665: DOUBLE
88666: LD_INT 1
88668: DEC
88669: ST_TO_ADDR
88670: LD_VAR 0 2
88674: PUSH
88675: FOR_TO
88676: IFFALSE 88703
// if Prob ( 60 ) then
88678: LD_INT 60
88680: PPUSH
88681: CALL_OW 13
88685: IFFALSE 88701
// SetSide ( i , side ) ;
88687: LD_VAR 0 1
88691: PPUSH
88692: LD_VAR 0 3
88696: PPUSH
88697: CALL_OW 235
88701: GO 88675
88703: POP
88704: POP
// end ;
88705: PPOPN 3
88707: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
88708: LD_EXP 83
88712: PUSH
88713: LD_EXP 96
88717: AND
88718: IFFALSE 88837
88720: GO 88722
88722: DISABLE
88723: LD_INT 0
88725: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
88726: LD_ADDR_VAR 0 1
88730: PUSH
88731: LD_INT 22
88733: PUSH
88734: LD_OWVAR 2
88738: PUSH
88739: EMPTY
88740: LIST
88741: LIST
88742: PUSH
88743: LD_INT 21
88745: PUSH
88746: LD_INT 1
88748: PUSH
88749: EMPTY
88750: LIST
88751: LIST
88752: PUSH
88753: LD_INT 3
88755: PUSH
88756: LD_INT 23
88758: PUSH
88759: LD_INT 0
88761: PUSH
88762: EMPTY
88763: LIST
88764: LIST
88765: PUSH
88766: EMPTY
88767: LIST
88768: LIST
88769: PUSH
88770: EMPTY
88771: LIST
88772: LIST
88773: LIST
88774: PPUSH
88775: CALL_OW 69
88779: PUSH
88780: FOR_IN
88781: IFFALSE 88835
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
88783: LD_VAR 0 1
88787: PPUSH
88788: CALL_OW 257
88792: PUSH
88793: LD_INT 1
88795: PUSH
88796: LD_INT 2
88798: PUSH
88799: LD_INT 3
88801: PUSH
88802: LD_INT 4
88804: PUSH
88805: EMPTY
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: IN
88811: IFFALSE 88833
// SetClass ( un , rand ( 1 , 4 ) ) ;
88813: LD_VAR 0 1
88817: PPUSH
88818: LD_INT 1
88820: PPUSH
88821: LD_INT 4
88823: PPUSH
88824: CALL_OW 12
88828: PPUSH
88829: CALL_OW 336
88833: GO 88780
88835: POP
88836: POP
// end ;
88837: PPOPN 1
88839: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
88840: LD_EXP 83
88844: PUSH
88845: LD_EXP 95
88849: AND
88850: IFFALSE 88929
88852: GO 88854
88854: DISABLE
88855: LD_INT 0
88857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
88858: LD_ADDR_VAR 0 1
88862: PUSH
88863: LD_INT 22
88865: PUSH
88866: LD_OWVAR 2
88870: PUSH
88871: EMPTY
88872: LIST
88873: LIST
88874: PUSH
88875: LD_INT 21
88877: PUSH
88878: LD_INT 3
88880: PUSH
88881: EMPTY
88882: LIST
88883: LIST
88884: PUSH
88885: EMPTY
88886: LIST
88887: LIST
88888: PPUSH
88889: CALL_OW 69
88893: ST_TO_ADDR
// if not tmp then
88894: LD_VAR 0 1
88898: NOT
88899: IFFALSE 88903
// exit ;
88901: GO 88929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
88903: LD_VAR 0 1
88907: PUSH
88908: LD_INT 1
88910: PPUSH
88911: LD_VAR 0 1
88915: PPUSH
88916: CALL_OW 12
88920: ARRAY
88921: PPUSH
88922: LD_INT 100
88924: PPUSH
88925: CALL_OW 234
// end ;
88929: PPOPN 1
88931: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
88932: LD_EXP 83
88936: PUSH
88937: LD_EXP 97
88941: AND
88942: IFFALSE 89040
88944: GO 88946
88946: DISABLE
88947: LD_INT 0
88949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88950: LD_ADDR_VAR 0 1
88954: PUSH
88955: LD_INT 22
88957: PUSH
88958: LD_OWVAR 2
88962: PUSH
88963: EMPTY
88964: LIST
88965: LIST
88966: PUSH
88967: LD_INT 21
88969: PUSH
88970: LD_INT 1
88972: PUSH
88973: EMPTY
88974: LIST
88975: LIST
88976: PUSH
88977: EMPTY
88978: LIST
88979: LIST
88980: PPUSH
88981: CALL_OW 69
88985: ST_TO_ADDR
// if not tmp then
88986: LD_VAR 0 1
88990: NOT
88991: IFFALSE 88995
// exit ;
88993: GO 89040
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
88995: LD_VAR 0 1
88999: PUSH
89000: LD_INT 1
89002: PPUSH
89003: LD_VAR 0 1
89007: PPUSH
89008: CALL_OW 12
89012: ARRAY
89013: PPUSH
89014: LD_INT 1
89016: PPUSH
89017: LD_INT 4
89019: PPUSH
89020: CALL_OW 12
89024: PPUSH
89025: LD_INT 3000
89027: PPUSH
89028: LD_INT 9000
89030: PPUSH
89031: CALL_OW 12
89035: PPUSH
89036: CALL_OW 492
// end ;
89040: PPOPN 1
89042: END
// every 0 0$1 trigger StreamModeActive and sDepot do
89043: LD_EXP 83
89047: PUSH
89048: LD_EXP 98
89052: AND
89053: IFFALSE 89073
89055: GO 89057
89057: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
89058: LD_INT 1
89060: PPUSH
89061: LD_OWVAR 2
89065: PPUSH
89066: LD_INT 0
89068: PPUSH
89069: CALL_OW 324
89073: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
89074: LD_EXP 83
89078: PUSH
89079: LD_EXP 99
89083: AND
89084: IFFALSE 89167
89086: GO 89088
89088: DISABLE
89089: LD_INT 0
89091: PPUSH
89092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
89093: LD_ADDR_VAR 0 2
89097: PUSH
89098: LD_INT 22
89100: PUSH
89101: LD_OWVAR 2
89105: PUSH
89106: EMPTY
89107: LIST
89108: LIST
89109: PUSH
89110: LD_INT 21
89112: PUSH
89113: LD_INT 3
89115: PUSH
89116: EMPTY
89117: LIST
89118: LIST
89119: PUSH
89120: EMPTY
89121: LIST
89122: LIST
89123: PPUSH
89124: CALL_OW 69
89128: ST_TO_ADDR
// if not tmp then
89129: LD_VAR 0 2
89133: NOT
89134: IFFALSE 89138
// exit ;
89136: GO 89167
// for i in tmp do
89138: LD_ADDR_VAR 0 1
89142: PUSH
89143: LD_VAR 0 2
89147: PUSH
89148: FOR_IN
89149: IFFALSE 89165
// SetBLevel ( i , 10 ) ;
89151: LD_VAR 0 1
89155: PPUSH
89156: LD_INT 10
89158: PPUSH
89159: CALL_OW 241
89163: GO 89148
89165: POP
89166: POP
// end ;
89167: PPOPN 2
89169: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
89170: LD_EXP 83
89174: PUSH
89175: LD_EXP 100
89179: AND
89180: IFFALSE 89291
89182: GO 89184
89184: DISABLE
89185: LD_INT 0
89187: PPUSH
89188: PPUSH
89189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89190: LD_ADDR_VAR 0 3
89194: PUSH
89195: LD_INT 22
89197: PUSH
89198: LD_OWVAR 2
89202: PUSH
89203: EMPTY
89204: LIST
89205: LIST
89206: PUSH
89207: LD_INT 25
89209: PUSH
89210: LD_INT 1
89212: PUSH
89213: EMPTY
89214: LIST
89215: LIST
89216: PUSH
89217: EMPTY
89218: LIST
89219: LIST
89220: PPUSH
89221: CALL_OW 69
89225: ST_TO_ADDR
// if not tmp then
89226: LD_VAR 0 3
89230: NOT
89231: IFFALSE 89235
// exit ;
89233: GO 89291
// un := tmp [ rand ( 1 , tmp ) ] ;
89235: LD_ADDR_VAR 0 2
89239: PUSH
89240: LD_VAR 0 3
89244: PUSH
89245: LD_INT 1
89247: PPUSH
89248: LD_VAR 0 3
89252: PPUSH
89253: CALL_OW 12
89257: ARRAY
89258: ST_TO_ADDR
// if Crawls ( un ) then
89259: LD_VAR 0 2
89263: PPUSH
89264: CALL_OW 318
89268: IFFALSE 89279
// ComWalk ( un ) ;
89270: LD_VAR 0 2
89274: PPUSH
89275: CALL_OW 138
// SetClass ( un , class_sniper ) ;
89279: LD_VAR 0 2
89283: PPUSH
89284: LD_INT 5
89286: PPUSH
89287: CALL_OW 336
// end ;
89291: PPOPN 3
89293: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
89294: LD_EXP 83
89298: PUSH
89299: LD_EXP 101
89303: AND
89304: PUSH
89305: LD_OWVAR 67
89309: PUSH
89310: LD_INT 3
89312: LESS
89313: AND
89314: IFFALSE 89333
89316: GO 89318
89318: DISABLE
// Difficulty := Difficulty + 1 ;
89319: LD_ADDR_OWVAR 67
89323: PUSH
89324: LD_OWVAR 67
89328: PUSH
89329: LD_INT 1
89331: PLUS
89332: ST_TO_ADDR
89333: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
89334: LD_EXP 83
89338: PUSH
89339: LD_EXP 102
89343: AND
89344: IFFALSE 89447
89346: GO 89348
89348: DISABLE
89349: LD_INT 0
89351: PPUSH
// begin for i := 1 to 5 do
89352: LD_ADDR_VAR 0 1
89356: PUSH
89357: DOUBLE
89358: LD_INT 1
89360: DEC
89361: ST_TO_ADDR
89362: LD_INT 5
89364: PUSH
89365: FOR_TO
89366: IFFALSE 89445
// begin uc_nation := nation_nature ;
89368: LD_ADDR_OWVAR 21
89372: PUSH
89373: LD_INT 0
89375: ST_TO_ADDR
// uc_side := 0 ;
89376: LD_ADDR_OWVAR 20
89380: PUSH
89381: LD_INT 0
89383: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
89384: LD_ADDR_OWVAR 29
89388: PUSH
89389: LD_INT 12
89391: PUSH
89392: LD_INT 12
89394: PUSH
89395: EMPTY
89396: LIST
89397: LIST
89398: ST_TO_ADDR
// hc_agressivity := 20 ;
89399: LD_ADDR_OWVAR 35
89403: PUSH
89404: LD_INT 20
89406: ST_TO_ADDR
// hc_class := class_tiger ;
89407: LD_ADDR_OWVAR 28
89411: PUSH
89412: LD_INT 14
89414: ST_TO_ADDR
// hc_gallery :=  ;
89415: LD_ADDR_OWVAR 33
89419: PUSH
89420: LD_STRING 
89422: ST_TO_ADDR
// hc_name :=  ;
89423: LD_ADDR_OWVAR 26
89427: PUSH
89428: LD_STRING 
89430: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
89431: CALL_OW 44
89435: PPUSH
89436: LD_INT 0
89438: PPUSH
89439: CALL_OW 51
// end ;
89443: GO 89365
89445: POP
89446: POP
// end ;
89447: PPOPN 1
89449: END
// every 0 0$1 trigger StreamModeActive and sBomb do
89450: LD_EXP 83
89454: PUSH
89455: LD_EXP 103
89459: AND
89460: IFFALSE 89469
89462: GO 89464
89464: DISABLE
// StreamSibBomb ;
89465: CALL 89470 0 0
89469: END
// export function StreamSibBomb ; var i , x , y ; begin
89470: LD_INT 0
89472: PPUSH
89473: PPUSH
89474: PPUSH
89475: PPUSH
// result := false ;
89476: LD_ADDR_VAR 0 1
89480: PUSH
89481: LD_INT 0
89483: ST_TO_ADDR
// for i := 1 to 16 do
89484: LD_ADDR_VAR 0 2
89488: PUSH
89489: DOUBLE
89490: LD_INT 1
89492: DEC
89493: ST_TO_ADDR
89494: LD_INT 16
89496: PUSH
89497: FOR_TO
89498: IFFALSE 89697
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
89500: LD_ADDR_VAR 0 3
89504: PUSH
89505: LD_INT 10
89507: PUSH
89508: LD_INT 20
89510: PUSH
89511: LD_INT 30
89513: PUSH
89514: LD_INT 40
89516: PUSH
89517: LD_INT 50
89519: PUSH
89520: LD_INT 60
89522: PUSH
89523: LD_INT 70
89525: PUSH
89526: LD_INT 80
89528: PUSH
89529: LD_INT 90
89531: PUSH
89532: LD_INT 100
89534: PUSH
89535: LD_INT 110
89537: PUSH
89538: LD_INT 120
89540: PUSH
89541: LD_INT 130
89543: PUSH
89544: LD_INT 140
89546: PUSH
89547: LD_INT 150
89549: PUSH
89550: EMPTY
89551: LIST
89552: LIST
89553: LIST
89554: LIST
89555: LIST
89556: LIST
89557: LIST
89558: LIST
89559: LIST
89560: LIST
89561: LIST
89562: LIST
89563: LIST
89564: LIST
89565: LIST
89566: PUSH
89567: LD_INT 1
89569: PPUSH
89570: LD_INT 15
89572: PPUSH
89573: CALL_OW 12
89577: ARRAY
89578: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
89579: LD_ADDR_VAR 0 4
89583: PUSH
89584: LD_INT 10
89586: PUSH
89587: LD_INT 20
89589: PUSH
89590: LD_INT 30
89592: PUSH
89593: LD_INT 40
89595: PUSH
89596: LD_INT 50
89598: PUSH
89599: LD_INT 60
89601: PUSH
89602: LD_INT 70
89604: PUSH
89605: LD_INT 80
89607: PUSH
89608: LD_INT 90
89610: PUSH
89611: LD_INT 100
89613: PUSH
89614: LD_INT 110
89616: PUSH
89617: LD_INT 120
89619: PUSH
89620: LD_INT 130
89622: PUSH
89623: LD_INT 140
89625: PUSH
89626: LD_INT 150
89628: PUSH
89629: EMPTY
89630: LIST
89631: LIST
89632: LIST
89633: LIST
89634: LIST
89635: LIST
89636: LIST
89637: LIST
89638: LIST
89639: LIST
89640: LIST
89641: LIST
89642: LIST
89643: LIST
89644: LIST
89645: PUSH
89646: LD_INT 1
89648: PPUSH
89649: LD_INT 15
89651: PPUSH
89652: CALL_OW 12
89656: ARRAY
89657: ST_TO_ADDR
// if ValidHex ( x , y ) then
89658: LD_VAR 0 3
89662: PPUSH
89663: LD_VAR 0 4
89667: PPUSH
89668: CALL_OW 488
89672: IFFALSE 89695
// begin result := [ x , y ] ;
89674: LD_ADDR_VAR 0 1
89678: PUSH
89679: LD_VAR 0 3
89683: PUSH
89684: LD_VAR 0 4
89688: PUSH
89689: EMPTY
89690: LIST
89691: LIST
89692: ST_TO_ADDR
// break ;
89693: GO 89697
// end ; end ;
89695: GO 89497
89697: POP
89698: POP
// if result then
89699: LD_VAR 0 1
89703: IFFALSE 89763
// begin ToLua ( playSibBomb() ) ;
89705: LD_STRING playSibBomb()
89707: PPUSH
89708: CALL_OW 559
// wait ( 0 0$14 ) ;
89712: LD_INT 490
89714: PPUSH
89715: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
89719: LD_VAR 0 1
89723: PUSH
89724: LD_INT 1
89726: ARRAY
89727: PPUSH
89728: LD_VAR 0 1
89732: PUSH
89733: LD_INT 2
89735: ARRAY
89736: PPUSH
89737: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
89741: LD_VAR 0 1
89745: PUSH
89746: LD_INT 1
89748: ARRAY
89749: PPUSH
89750: LD_VAR 0 1
89754: PUSH
89755: LD_INT 2
89757: ARRAY
89758: PPUSH
89759: CALL_OW 429
// end ; end ;
89763: LD_VAR 0 1
89767: RET
// every 0 0$1 trigger StreamModeActive and sReset do
89768: LD_EXP 83
89772: PUSH
89773: LD_EXP 105
89777: AND
89778: IFFALSE 89790
89780: GO 89782
89782: DISABLE
// YouLost (  ) ;
89783: LD_STRING 
89785: PPUSH
89786: CALL_OW 104
89790: END
// every 0 0$1 trigger StreamModeActive and sFog do
89791: LD_EXP 83
89795: PUSH
89796: LD_EXP 104
89800: AND
89801: IFFALSE 89815
89803: GO 89805
89805: DISABLE
// FogOff ( your_side ) ;
89806: LD_OWVAR 2
89810: PPUSH
89811: CALL_OW 344
89815: END
// every 0 0$1 trigger StreamModeActive and sSun do
89816: LD_EXP 83
89820: PUSH
89821: LD_EXP 106
89825: AND
89826: IFFALSE 89854
89828: GO 89830
89830: DISABLE
// begin solar_recharge_percent := 0 ;
89831: LD_ADDR_OWVAR 79
89835: PUSH
89836: LD_INT 0
89838: ST_TO_ADDR
// wait ( 5 5$00 ) ;
89839: LD_INT 10500
89841: PPUSH
89842: CALL_OW 67
// solar_recharge_percent := 100 ;
89846: LD_ADDR_OWVAR 79
89850: PUSH
89851: LD_INT 100
89853: ST_TO_ADDR
// end ;
89854: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
89855: LD_EXP 83
89859: PUSH
89860: LD_EXP 107
89864: AND
89865: IFFALSE 90104
89867: GO 89869
89869: DISABLE
89870: LD_INT 0
89872: PPUSH
89873: PPUSH
89874: PPUSH
// begin tmp := [ ] ;
89875: LD_ADDR_VAR 0 3
89879: PUSH
89880: EMPTY
89881: ST_TO_ADDR
// for i := 1 to 6 do
89882: LD_ADDR_VAR 0 1
89886: PUSH
89887: DOUBLE
89888: LD_INT 1
89890: DEC
89891: ST_TO_ADDR
89892: LD_INT 6
89894: PUSH
89895: FOR_TO
89896: IFFALSE 90001
// begin uc_nation := nation_nature ;
89898: LD_ADDR_OWVAR 21
89902: PUSH
89903: LD_INT 0
89905: ST_TO_ADDR
// uc_side := 0 ;
89906: LD_ADDR_OWVAR 20
89910: PUSH
89911: LD_INT 0
89913: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
89914: LD_ADDR_OWVAR 29
89918: PUSH
89919: LD_INT 12
89921: PUSH
89922: LD_INT 12
89924: PUSH
89925: EMPTY
89926: LIST
89927: LIST
89928: ST_TO_ADDR
// hc_agressivity := 20 ;
89929: LD_ADDR_OWVAR 35
89933: PUSH
89934: LD_INT 20
89936: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
89937: LD_ADDR_OWVAR 28
89941: PUSH
89942: LD_INT 17
89944: ST_TO_ADDR
// hc_gallery :=  ;
89945: LD_ADDR_OWVAR 33
89949: PUSH
89950: LD_STRING 
89952: ST_TO_ADDR
// hc_name :=  ;
89953: LD_ADDR_OWVAR 26
89957: PUSH
89958: LD_STRING 
89960: ST_TO_ADDR
// un := CreateHuman ;
89961: LD_ADDR_VAR 0 2
89965: PUSH
89966: CALL_OW 44
89970: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
89971: LD_VAR 0 2
89975: PPUSH
89976: LD_INT 1
89978: PPUSH
89979: CALL_OW 51
// tmp := tmp ^ un ;
89983: LD_ADDR_VAR 0 3
89987: PUSH
89988: LD_VAR 0 3
89992: PUSH
89993: LD_VAR 0 2
89997: ADD
89998: ST_TO_ADDR
// end ;
89999: GO 89895
90001: POP
90002: POP
// repeat wait ( 0 0$1 ) ;
90003: LD_INT 35
90005: PPUSH
90006: CALL_OW 67
// for un in tmp do
90010: LD_ADDR_VAR 0 2
90014: PUSH
90015: LD_VAR 0 3
90019: PUSH
90020: FOR_IN
90021: IFFALSE 90095
// begin if IsDead ( un ) then
90023: LD_VAR 0 2
90027: PPUSH
90028: CALL_OW 301
90032: IFFALSE 90052
// begin tmp := tmp diff un ;
90034: LD_ADDR_VAR 0 3
90038: PUSH
90039: LD_VAR 0 3
90043: PUSH
90044: LD_VAR 0 2
90048: DIFF
90049: ST_TO_ADDR
// continue ;
90050: GO 90020
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
90052: LD_VAR 0 2
90056: PPUSH
90057: LD_INT 3
90059: PUSH
90060: LD_INT 22
90062: PUSH
90063: LD_INT 0
90065: PUSH
90066: EMPTY
90067: LIST
90068: LIST
90069: PUSH
90070: EMPTY
90071: LIST
90072: LIST
90073: PPUSH
90074: CALL_OW 69
90078: PPUSH
90079: LD_VAR 0 2
90083: PPUSH
90084: CALL_OW 74
90088: PPUSH
90089: CALL_OW 115
// end ;
90093: GO 90020
90095: POP
90096: POP
// until not tmp ;
90097: LD_VAR 0 3
90101: NOT
90102: IFFALSE 90003
// end ;
90104: PPOPN 3
90106: END
// every 0 0$1 trigger StreamModeActive and sTroll do
90107: LD_EXP 83
90111: PUSH
90112: LD_EXP 108
90116: AND
90117: IFFALSE 90171
90119: GO 90121
90121: DISABLE
// begin ToLua ( displayTroll(); ) ;
90122: LD_STRING displayTroll();
90124: PPUSH
90125: CALL_OW 559
// wait ( 3 3$00 ) ;
90129: LD_INT 6300
90131: PPUSH
90132: CALL_OW 67
// ToLua ( hideTroll(); ) ;
90136: LD_STRING hideTroll();
90138: PPUSH
90139: CALL_OW 559
// wait ( 1 1$00 ) ;
90143: LD_INT 2100
90145: PPUSH
90146: CALL_OW 67
// ToLua ( displayTroll(); ) ;
90150: LD_STRING displayTroll();
90152: PPUSH
90153: CALL_OW 559
// wait ( 1 1$00 ) ;
90157: LD_INT 2100
90159: PPUSH
90160: CALL_OW 67
// ToLua ( hideTroll(); ) ;
90164: LD_STRING hideTroll();
90166: PPUSH
90167: CALL_OW 559
// end ;
90171: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
90172: LD_EXP 83
90176: PUSH
90177: LD_EXP 109
90181: AND
90182: IFFALSE 90245
90184: GO 90186
90186: DISABLE
90187: LD_INT 0
90189: PPUSH
// begin p := 0 ;
90190: LD_ADDR_VAR 0 1
90194: PUSH
90195: LD_INT 0
90197: ST_TO_ADDR
// repeat game_speed := 1 ;
90198: LD_ADDR_OWVAR 65
90202: PUSH
90203: LD_INT 1
90205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
90206: LD_INT 35
90208: PPUSH
90209: CALL_OW 67
// p := p + 1 ;
90213: LD_ADDR_VAR 0 1
90217: PUSH
90218: LD_VAR 0 1
90222: PUSH
90223: LD_INT 1
90225: PLUS
90226: ST_TO_ADDR
// until p >= 60 ;
90227: LD_VAR 0 1
90231: PUSH
90232: LD_INT 60
90234: GREATEREQUAL
90235: IFFALSE 90198
// game_speed := 4 ;
90237: LD_ADDR_OWVAR 65
90241: PUSH
90242: LD_INT 4
90244: ST_TO_ADDR
// end ;
90245: PPOPN 1
90247: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
90248: LD_EXP 83
90252: PUSH
90253: LD_EXP 110
90257: AND
90258: IFFALSE 90404
90260: GO 90262
90262: DISABLE
90263: LD_INT 0
90265: PPUSH
90266: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
90267: LD_ADDR_VAR 0 1
90271: PUSH
90272: LD_INT 22
90274: PUSH
90275: LD_OWVAR 2
90279: PUSH
90280: EMPTY
90281: LIST
90282: LIST
90283: PUSH
90284: LD_INT 2
90286: PUSH
90287: LD_INT 30
90289: PUSH
90290: LD_INT 0
90292: PUSH
90293: EMPTY
90294: LIST
90295: LIST
90296: PUSH
90297: LD_INT 30
90299: PUSH
90300: LD_INT 1
90302: PUSH
90303: EMPTY
90304: LIST
90305: LIST
90306: PUSH
90307: EMPTY
90308: LIST
90309: LIST
90310: LIST
90311: PUSH
90312: EMPTY
90313: LIST
90314: LIST
90315: PPUSH
90316: CALL_OW 69
90320: ST_TO_ADDR
// if not depot then
90321: LD_VAR 0 1
90325: NOT
90326: IFFALSE 90330
// exit ;
90328: GO 90404
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
90330: LD_ADDR_VAR 0 2
90334: PUSH
90335: LD_VAR 0 1
90339: PUSH
90340: LD_INT 1
90342: PPUSH
90343: LD_VAR 0 1
90347: PPUSH
90348: CALL_OW 12
90352: ARRAY
90353: PPUSH
90354: CALL_OW 274
90358: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
90359: LD_VAR 0 2
90363: PPUSH
90364: LD_INT 1
90366: PPUSH
90367: LD_INT 0
90369: PPUSH
90370: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
90374: LD_VAR 0 2
90378: PPUSH
90379: LD_INT 2
90381: PPUSH
90382: LD_INT 0
90384: PPUSH
90385: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
90389: LD_VAR 0 2
90393: PPUSH
90394: LD_INT 3
90396: PPUSH
90397: LD_INT 0
90399: PPUSH
90400: CALL_OW 277
// end ;
90404: PPOPN 2
90406: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
90407: LD_EXP 83
90411: PUSH
90412: LD_EXP 111
90416: AND
90417: IFFALSE 90514
90419: GO 90421
90421: DISABLE
90422: LD_INT 0
90424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
90425: LD_ADDR_VAR 0 1
90429: PUSH
90430: LD_INT 22
90432: PUSH
90433: LD_OWVAR 2
90437: PUSH
90438: EMPTY
90439: LIST
90440: LIST
90441: PUSH
90442: LD_INT 21
90444: PUSH
90445: LD_INT 1
90447: PUSH
90448: EMPTY
90449: LIST
90450: LIST
90451: PUSH
90452: LD_INT 3
90454: PUSH
90455: LD_INT 23
90457: PUSH
90458: LD_INT 0
90460: PUSH
90461: EMPTY
90462: LIST
90463: LIST
90464: PUSH
90465: EMPTY
90466: LIST
90467: LIST
90468: PUSH
90469: EMPTY
90470: LIST
90471: LIST
90472: LIST
90473: PPUSH
90474: CALL_OW 69
90478: ST_TO_ADDR
// if not tmp then
90479: LD_VAR 0 1
90483: NOT
90484: IFFALSE 90488
// exit ;
90486: GO 90514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
90488: LD_VAR 0 1
90492: PUSH
90493: LD_INT 1
90495: PPUSH
90496: LD_VAR 0 1
90500: PPUSH
90501: CALL_OW 12
90505: ARRAY
90506: PPUSH
90507: LD_INT 200
90509: PPUSH
90510: CALL_OW 234
// end ;
90514: PPOPN 1
90516: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
90517: LD_EXP 83
90521: PUSH
90522: LD_EXP 112
90526: AND
90527: IFFALSE 90606
90529: GO 90531
90531: DISABLE
90532: LD_INT 0
90534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
90535: LD_ADDR_VAR 0 1
90539: PUSH
90540: LD_INT 22
90542: PUSH
90543: LD_OWVAR 2
90547: PUSH
90548: EMPTY
90549: LIST
90550: LIST
90551: PUSH
90552: LD_INT 21
90554: PUSH
90555: LD_INT 2
90557: PUSH
90558: EMPTY
90559: LIST
90560: LIST
90561: PUSH
90562: EMPTY
90563: LIST
90564: LIST
90565: PPUSH
90566: CALL_OW 69
90570: ST_TO_ADDR
// if not tmp then
90571: LD_VAR 0 1
90575: NOT
90576: IFFALSE 90580
// exit ;
90578: GO 90606
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
90580: LD_VAR 0 1
90584: PUSH
90585: LD_INT 1
90587: PPUSH
90588: LD_VAR 0 1
90592: PPUSH
90593: CALL_OW 12
90597: ARRAY
90598: PPUSH
90599: LD_INT 60
90601: PPUSH
90602: CALL_OW 234
// end ;
90606: PPOPN 1
90608: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
90609: LD_EXP 83
90613: PUSH
90614: LD_EXP 113
90618: AND
90619: IFFALSE 90718
90621: GO 90623
90623: DISABLE
90624: LD_INT 0
90626: PPUSH
90627: PPUSH
// begin enable ;
90628: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
90629: LD_ADDR_VAR 0 1
90633: PUSH
90634: LD_INT 22
90636: PUSH
90637: LD_OWVAR 2
90641: PUSH
90642: EMPTY
90643: LIST
90644: LIST
90645: PUSH
90646: LD_INT 61
90648: PUSH
90649: EMPTY
90650: LIST
90651: PUSH
90652: LD_INT 33
90654: PUSH
90655: LD_INT 2
90657: PUSH
90658: EMPTY
90659: LIST
90660: LIST
90661: PUSH
90662: EMPTY
90663: LIST
90664: LIST
90665: LIST
90666: PPUSH
90667: CALL_OW 69
90671: ST_TO_ADDR
// if not tmp then
90672: LD_VAR 0 1
90676: NOT
90677: IFFALSE 90681
// exit ;
90679: GO 90718
// for i in tmp do
90681: LD_ADDR_VAR 0 2
90685: PUSH
90686: LD_VAR 0 1
90690: PUSH
90691: FOR_IN
90692: IFFALSE 90716
// if IsControledBy ( i ) then
90694: LD_VAR 0 2
90698: PPUSH
90699: CALL_OW 312
90703: IFFALSE 90714
// ComUnlink ( i ) ;
90705: LD_VAR 0 2
90709: PPUSH
90710: CALL_OW 136
90714: GO 90691
90716: POP
90717: POP
// end ;
90718: PPOPN 2
90720: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
90721: LD_EXP 83
90725: PUSH
90726: LD_EXP 114
90730: AND
90731: IFFALSE 90871
90733: GO 90735
90735: DISABLE
90736: LD_INT 0
90738: PPUSH
90739: PPUSH
// begin ToLua ( displayPowell(); ) ;
90740: LD_STRING displayPowell();
90742: PPUSH
90743: CALL_OW 559
// uc_side := 0 ;
90747: LD_ADDR_OWVAR 20
90751: PUSH
90752: LD_INT 0
90754: ST_TO_ADDR
// uc_nation := 2 ;
90755: LD_ADDR_OWVAR 21
90759: PUSH
90760: LD_INT 2
90762: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
90763: LD_ADDR_OWVAR 37
90767: PUSH
90768: LD_INT 14
90770: ST_TO_ADDR
// vc_engine := engine_siberite ;
90771: LD_ADDR_OWVAR 39
90775: PUSH
90776: LD_INT 3
90778: ST_TO_ADDR
// vc_control := control_apeman ;
90779: LD_ADDR_OWVAR 38
90783: PUSH
90784: LD_INT 5
90786: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
90787: LD_ADDR_OWVAR 40
90791: PUSH
90792: LD_INT 29
90794: ST_TO_ADDR
// un := CreateVehicle ;
90795: LD_ADDR_VAR 0 2
90799: PUSH
90800: CALL_OW 45
90804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
90805: LD_VAR 0 2
90809: PPUSH
90810: LD_INT 1
90812: PPUSH
90813: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
90817: LD_INT 35
90819: PPUSH
90820: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
90824: LD_VAR 0 2
90828: PPUSH
90829: LD_INT 22
90831: PUSH
90832: LD_OWVAR 2
90836: PUSH
90837: EMPTY
90838: LIST
90839: LIST
90840: PPUSH
90841: CALL_OW 69
90845: PPUSH
90846: LD_VAR 0 2
90850: PPUSH
90851: CALL_OW 74
90855: PPUSH
90856: CALL_OW 115
// until IsDead ( un ) ;
90860: LD_VAR 0 2
90864: PPUSH
90865: CALL_OW 301
90869: IFFALSE 90817
// end ;
90871: PPOPN 2
90873: END
// every 0 0$1 trigger StreamModeActive and sStu do
90874: LD_EXP 83
90878: PUSH
90879: LD_EXP 122
90883: AND
90884: IFFALSE 90900
90886: GO 90888
90888: DISABLE
// begin ToLua ( displayStucuk(); ) ;
90889: LD_STRING displayStucuk();
90891: PPUSH
90892: CALL_OW 559
// ResetFog ;
90896: CALL_OW 335
// end ;
90900: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
90901: LD_EXP 83
90905: PUSH
90906: LD_EXP 115
90910: AND
90911: IFFALSE 91052
90913: GO 90915
90915: DISABLE
90916: LD_INT 0
90918: PPUSH
90919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
90920: LD_ADDR_VAR 0 2
90924: PUSH
90925: LD_INT 22
90927: PUSH
90928: LD_OWVAR 2
90932: PUSH
90933: EMPTY
90934: LIST
90935: LIST
90936: PUSH
90937: LD_INT 21
90939: PUSH
90940: LD_INT 1
90942: PUSH
90943: EMPTY
90944: LIST
90945: LIST
90946: PUSH
90947: EMPTY
90948: LIST
90949: LIST
90950: PPUSH
90951: CALL_OW 69
90955: ST_TO_ADDR
// if not tmp then
90956: LD_VAR 0 2
90960: NOT
90961: IFFALSE 90965
// exit ;
90963: GO 91052
// un := tmp [ rand ( 1 , tmp ) ] ;
90965: LD_ADDR_VAR 0 1
90969: PUSH
90970: LD_VAR 0 2
90974: PUSH
90975: LD_INT 1
90977: PPUSH
90978: LD_VAR 0 2
90982: PPUSH
90983: CALL_OW 12
90987: ARRAY
90988: ST_TO_ADDR
// SetSide ( un , 0 ) ;
90989: LD_VAR 0 1
90993: PPUSH
90994: LD_INT 0
90996: PPUSH
90997: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
91001: LD_VAR 0 1
91005: PPUSH
91006: LD_OWVAR 3
91010: PUSH
91011: LD_VAR 0 1
91015: DIFF
91016: PPUSH
91017: LD_VAR 0 1
91021: PPUSH
91022: CALL_OW 74
91026: PPUSH
91027: CALL_OW 115
// wait ( 0 0$20 ) ;
91031: LD_INT 700
91033: PPUSH
91034: CALL_OW 67
// SetSide ( un , your_side ) ;
91038: LD_VAR 0 1
91042: PPUSH
91043: LD_OWVAR 2
91047: PPUSH
91048: CALL_OW 235
// end ;
91052: PPOPN 2
91054: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
91055: LD_EXP 83
91059: PUSH
91060: LD_EXP 116
91064: AND
91065: IFFALSE 91171
91067: GO 91069
91069: DISABLE
91070: LD_INT 0
91072: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
91073: LD_ADDR_VAR 0 1
91077: PUSH
91078: LD_INT 22
91080: PUSH
91081: LD_OWVAR 2
91085: PUSH
91086: EMPTY
91087: LIST
91088: LIST
91089: PUSH
91090: LD_INT 2
91092: PUSH
91093: LD_INT 30
91095: PUSH
91096: LD_INT 0
91098: PUSH
91099: EMPTY
91100: LIST
91101: LIST
91102: PUSH
91103: LD_INT 30
91105: PUSH
91106: LD_INT 1
91108: PUSH
91109: EMPTY
91110: LIST
91111: LIST
91112: PUSH
91113: EMPTY
91114: LIST
91115: LIST
91116: LIST
91117: PUSH
91118: EMPTY
91119: LIST
91120: LIST
91121: PPUSH
91122: CALL_OW 69
91126: ST_TO_ADDR
// if not depot then
91127: LD_VAR 0 1
91131: NOT
91132: IFFALSE 91136
// exit ;
91134: GO 91171
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
91136: LD_VAR 0 1
91140: PUSH
91141: LD_INT 1
91143: ARRAY
91144: PPUSH
91145: CALL_OW 250
91149: PPUSH
91150: LD_VAR 0 1
91154: PUSH
91155: LD_INT 1
91157: ARRAY
91158: PPUSH
91159: CALL_OW 251
91163: PPUSH
91164: LD_INT 70
91166: PPUSH
91167: CALL_OW 495
// end ;
91171: PPOPN 1
91173: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
91174: LD_EXP 83
91178: PUSH
91179: LD_EXP 117
91183: AND
91184: IFFALSE 91395
91186: GO 91188
91188: DISABLE
91189: LD_INT 0
91191: PPUSH
91192: PPUSH
91193: PPUSH
91194: PPUSH
91195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
91196: LD_ADDR_VAR 0 5
91200: PUSH
91201: LD_INT 22
91203: PUSH
91204: LD_OWVAR 2
91208: PUSH
91209: EMPTY
91210: LIST
91211: LIST
91212: PUSH
91213: LD_INT 21
91215: PUSH
91216: LD_INT 1
91218: PUSH
91219: EMPTY
91220: LIST
91221: LIST
91222: PUSH
91223: EMPTY
91224: LIST
91225: LIST
91226: PPUSH
91227: CALL_OW 69
91231: ST_TO_ADDR
// if not tmp then
91232: LD_VAR 0 5
91236: NOT
91237: IFFALSE 91241
// exit ;
91239: GO 91395
// for i in tmp do
91241: LD_ADDR_VAR 0 1
91245: PUSH
91246: LD_VAR 0 5
91250: PUSH
91251: FOR_IN
91252: IFFALSE 91393
// begin d := rand ( 0 , 5 ) ;
91254: LD_ADDR_VAR 0 4
91258: PUSH
91259: LD_INT 0
91261: PPUSH
91262: LD_INT 5
91264: PPUSH
91265: CALL_OW 12
91269: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
91270: LD_ADDR_VAR 0 2
91274: PUSH
91275: LD_VAR 0 1
91279: PPUSH
91280: CALL_OW 250
91284: PPUSH
91285: LD_VAR 0 4
91289: PPUSH
91290: LD_INT 3
91292: PPUSH
91293: LD_INT 12
91295: PPUSH
91296: CALL_OW 12
91300: PPUSH
91301: CALL_OW 272
91305: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
91306: LD_ADDR_VAR 0 3
91310: PUSH
91311: LD_VAR 0 1
91315: PPUSH
91316: CALL_OW 251
91320: PPUSH
91321: LD_VAR 0 4
91325: PPUSH
91326: LD_INT 3
91328: PPUSH
91329: LD_INT 12
91331: PPUSH
91332: CALL_OW 12
91336: PPUSH
91337: CALL_OW 273
91341: ST_TO_ADDR
// if ValidHex ( x , y ) then
91342: LD_VAR 0 2
91346: PPUSH
91347: LD_VAR 0 3
91351: PPUSH
91352: CALL_OW 488
91356: IFFALSE 91391
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
91358: LD_VAR 0 1
91362: PPUSH
91363: LD_VAR 0 2
91367: PPUSH
91368: LD_VAR 0 3
91372: PPUSH
91373: LD_INT 3
91375: PPUSH
91376: LD_INT 6
91378: PPUSH
91379: CALL_OW 12
91383: PPUSH
91384: LD_INT 1
91386: PPUSH
91387: CALL_OW 483
// end ;
91391: GO 91251
91393: POP
91394: POP
// end ;
91395: PPOPN 5
91397: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
91398: LD_EXP 83
91402: PUSH
91403: LD_EXP 118
91407: AND
91408: IFFALSE 91502
91410: GO 91412
91412: DISABLE
91413: LD_INT 0
91415: PPUSH
91416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
91417: LD_ADDR_VAR 0 2
91421: PUSH
91422: LD_INT 22
91424: PUSH
91425: LD_OWVAR 2
91429: PUSH
91430: EMPTY
91431: LIST
91432: LIST
91433: PUSH
91434: LD_INT 32
91436: PUSH
91437: LD_INT 1
91439: PUSH
91440: EMPTY
91441: LIST
91442: LIST
91443: PUSH
91444: LD_INT 21
91446: PUSH
91447: LD_INT 2
91449: PUSH
91450: EMPTY
91451: LIST
91452: LIST
91453: PUSH
91454: EMPTY
91455: LIST
91456: LIST
91457: LIST
91458: PPUSH
91459: CALL_OW 69
91463: ST_TO_ADDR
// if not tmp then
91464: LD_VAR 0 2
91468: NOT
91469: IFFALSE 91473
// exit ;
91471: GO 91502
// for i in tmp do
91473: LD_ADDR_VAR 0 1
91477: PUSH
91478: LD_VAR 0 2
91482: PUSH
91483: FOR_IN
91484: IFFALSE 91500
// SetFuel ( i , 0 ) ;
91486: LD_VAR 0 1
91490: PPUSH
91491: LD_INT 0
91493: PPUSH
91494: CALL_OW 240
91498: GO 91483
91500: POP
91501: POP
// end ;
91502: PPOPN 2
91504: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
91505: LD_EXP 83
91509: PUSH
91510: LD_EXP 119
91514: AND
91515: IFFALSE 91581
91517: GO 91519
91519: DISABLE
91520: LD_INT 0
91522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
91523: LD_ADDR_VAR 0 1
91527: PUSH
91528: LD_INT 22
91530: PUSH
91531: LD_OWVAR 2
91535: PUSH
91536: EMPTY
91537: LIST
91538: LIST
91539: PUSH
91540: LD_INT 30
91542: PUSH
91543: LD_INT 29
91545: PUSH
91546: EMPTY
91547: LIST
91548: LIST
91549: PUSH
91550: EMPTY
91551: LIST
91552: LIST
91553: PPUSH
91554: CALL_OW 69
91558: ST_TO_ADDR
// if not tmp then
91559: LD_VAR 0 1
91563: NOT
91564: IFFALSE 91568
// exit ;
91566: GO 91581
// DestroyUnit ( tmp [ 1 ] ) ;
91568: LD_VAR 0 1
91572: PUSH
91573: LD_INT 1
91575: ARRAY
91576: PPUSH
91577: CALL_OW 65
// end ;
91581: PPOPN 1
91583: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
91584: LD_EXP 83
91588: PUSH
91589: LD_EXP 121
91593: AND
91594: IFFALSE 91723
91596: GO 91598
91598: DISABLE
91599: LD_INT 0
91601: PPUSH
// begin uc_side := 0 ;
91602: LD_ADDR_OWVAR 20
91606: PUSH
91607: LD_INT 0
91609: ST_TO_ADDR
// uc_nation := nation_arabian ;
91610: LD_ADDR_OWVAR 21
91614: PUSH
91615: LD_INT 2
91617: ST_TO_ADDR
// hc_gallery :=  ;
91618: LD_ADDR_OWVAR 33
91622: PUSH
91623: LD_STRING 
91625: ST_TO_ADDR
// hc_name :=  ;
91626: LD_ADDR_OWVAR 26
91630: PUSH
91631: LD_STRING 
91633: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
91634: LD_INT 1
91636: PPUSH
91637: LD_INT 11
91639: PPUSH
91640: LD_INT 10
91642: PPUSH
91643: CALL_OW 380
// un := CreateHuman ;
91647: LD_ADDR_VAR 0 1
91651: PUSH
91652: CALL_OW 44
91656: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
91657: LD_VAR 0 1
91661: PPUSH
91662: LD_INT 1
91664: PPUSH
91665: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
91669: LD_INT 35
91671: PPUSH
91672: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
91676: LD_VAR 0 1
91680: PPUSH
91681: LD_INT 22
91683: PUSH
91684: LD_OWVAR 2
91688: PUSH
91689: EMPTY
91690: LIST
91691: LIST
91692: PPUSH
91693: CALL_OW 69
91697: PPUSH
91698: LD_VAR 0 1
91702: PPUSH
91703: CALL_OW 74
91707: PPUSH
91708: CALL_OW 115
// until IsDead ( un ) ;
91712: LD_VAR 0 1
91716: PPUSH
91717: CALL_OW 301
91721: IFFALSE 91669
// end ;
91723: PPOPN 1
91725: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
91726: LD_EXP 83
91730: PUSH
91731: LD_EXP 123
91735: AND
91736: IFFALSE 91748
91738: GO 91740
91740: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
91741: LD_STRING earthquake(getX(game), 0, 32)
91743: PPUSH
91744: CALL_OW 559
91748: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
91749: LD_EXP 83
91753: PUSH
91754: LD_EXP 124
91758: AND
91759: IFFALSE 91850
91761: GO 91763
91763: DISABLE
91764: LD_INT 0
91766: PPUSH
// begin enable ;
91767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
91768: LD_ADDR_VAR 0 1
91772: PUSH
91773: LD_INT 22
91775: PUSH
91776: LD_OWVAR 2
91780: PUSH
91781: EMPTY
91782: LIST
91783: LIST
91784: PUSH
91785: LD_INT 21
91787: PUSH
91788: LD_INT 2
91790: PUSH
91791: EMPTY
91792: LIST
91793: LIST
91794: PUSH
91795: LD_INT 33
91797: PUSH
91798: LD_INT 3
91800: PUSH
91801: EMPTY
91802: LIST
91803: LIST
91804: PUSH
91805: EMPTY
91806: LIST
91807: LIST
91808: LIST
91809: PPUSH
91810: CALL_OW 69
91814: ST_TO_ADDR
// if not tmp then
91815: LD_VAR 0 1
91819: NOT
91820: IFFALSE 91824
// exit ;
91822: GO 91850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
91824: LD_VAR 0 1
91828: PUSH
91829: LD_INT 1
91831: PPUSH
91832: LD_VAR 0 1
91836: PPUSH
91837: CALL_OW 12
91841: ARRAY
91842: PPUSH
91843: LD_INT 1
91845: PPUSH
91846: CALL_OW 234
// end ;
91850: PPOPN 1
91852: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
91853: LD_EXP 83
91857: PUSH
91858: LD_EXP 125
91862: AND
91863: IFFALSE 92004
91865: GO 91867
91867: DISABLE
91868: LD_INT 0
91870: PPUSH
91871: PPUSH
91872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
91873: LD_ADDR_VAR 0 3
91877: PUSH
91878: LD_INT 22
91880: PUSH
91881: LD_OWVAR 2
91885: PUSH
91886: EMPTY
91887: LIST
91888: LIST
91889: PUSH
91890: LD_INT 25
91892: PUSH
91893: LD_INT 1
91895: PUSH
91896: EMPTY
91897: LIST
91898: LIST
91899: PUSH
91900: EMPTY
91901: LIST
91902: LIST
91903: PPUSH
91904: CALL_OW 69
91908: ST_TO_ADDR
// if not tmp then
91909: LD_VAR 0 3
91913: NOT
91914: IFFALSE 91918
// exit ;
91916: GO 92004
// un := tmp [ rand ( 1 , tmp ) ] ;
91918: LD_ADDR_VAR 0 2
91922: PUSH
91923: LD_VAR 0 3
91927: PUSH
91928: LD_INT 1
91930: PPUSH
91931: LD_VAR 0 3
91935: PPUSH
91936: CALL_OW 12
91940: ARRAY
91941: ST_TO_ADDR
// if Crawls ( un ) then
91942: LD_VAR 0 2
91946: PPUSH
91947: CALL_OW 318
91951: IFFALSE 91962
// ComWalk ( un ) ;
91953: LD_VAR 0 2
91957: PPUSH
91958: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
91962: LD_VAR 0 2
91966: PPUSH
91967: LD_INT 9
91969: PPUSH
91970: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
91974: LD_INT 28
91976: PPUSH
91977: LD_OWVAR 2
91981: PPUSH
91982: LD_INT 2
91984: PPUSH
91985: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
91989: LD_INT 29
91991: PPUSH
91992: LD_OWVAR 2
91996: PPUSH
91997: LD_INT 2
91999: PPUSH
92000: CALL_OW 322
// end ;
92004: PPOPN 3
92006: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
92007: LD_EXP 83
92011: PUSH
92012: LD_EXP 126
92016: AND
92017: IFFALSE 92128
92019: GO 92021
92021: DISABLE
92022: LD_INT 0
92024: PPUSH
92025: PPUSH
92026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92027: LD_ADDR_VAR 0 3
92031: PUSH
92032: LD_INT 22
92034: PUSH
92035: LD_OWVAR 2
92039: PUSH
92040: EMPTY
92041: LIST
92042: LIST
92043: PUSH
92044: LD_INT 25
92046: PUSH
92047: LD_INT 1
92049: PUSH
92050: EMPTY
92051: LIST
92052: LIST
92053: PUSH
92054: EMPTY
92055: LIST
92056: LIST
92057: PPUSH
92058: CALL_OW 69
92062: ST_TO_ADDR
// if not tmp then
92063: LD_VAR 0 3
92067: NOT
92068: IFFALSE 92072
// exit ;
92070: GO 92128
// un := tmp [ rand ( 1 , tmp ) ] ;
92072: LD_ADDR_VAR 0 2
92076: PUSH
92077: LD_VAR 0 3
92081: PUSH
92082: LD_INT 1
92084: PPUSH
92085: LD_VAR 0 3
92089: PPUSH
92090: CALL_OW 12
92094: ARRAY
92095: ST_TO_ADDR
// if Crawls ( un ) then
92096: LD_VAR 0 2
92100: PPUSH
92101: CALL_OW 318
92105: IFFALSE 92116
// ComWalk ( un ) ;
92107: LD_VAR 0 2
92111: PPUSH
92112: CALL_OW 138
// SetClass ( un , class_mortar ) ;
92116: LD_VAR 0 2
92120: PPUSH
92121: LD_INT 8
92123: PPUSH
92124: CALL_OW 336
// end ;
92128: PPOPN 3
92130: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
92131: LD_EXP 83
92135: PUSH
92136: LD_EXP 127
92140: AND
92141: IFFALSE 92285
92143: GO 92145
92145: DISABLE
92146: LD_INT 0
92148: PPUSH
92149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
92150: LD_ADDR_VAR 0 2
92154: PUSH
92155: LD_INT 22
92157: PUSH
92158: LD_OWVAR 2
92162: PUSH
92163: EMPTY
92164: LIST
92165: LIST
92166: PUSH
92167: LD_INT 21
92169: PUSH
92170: LD_INT 2
92172: PUSH
92173: EMPTY
92174: LIST
92175: LIST
92176: PUSH
92177: LD_INT 2
92179: PUSH
92180: LD_INT 34
92182: PUSH
92183: LD_INT 12
92185: PUSH
92186: EMPTY
92187: LIST
92188: LIST
92189: PUSH
92190: LD_INT 34
92192: PUSH
92193: LD_INT 51
92195: PUSH
92196: EMPTY
92197: LIST
92198: LIST
92199: PUSH
92200: LD_INT 34
92202: PUSH
92203: LD_INT 32
92205: PUSH
92206: EMPTY
92207: LIST
92208: LIST
92209: PUSH
92210: EMPTY
92211: LIST
92212: LIST
92213: LIST
92214: LIST
92215: PUSH
92216: EMPTY
92217: LIST
92218: LIST
92219: LIST
92220: PPUSH
92221: CALL_OW 69
92225: ST_TO_ADDR
// if not tmp then
92226: LD_VAR 0 2
92230: NOT
92231: IFFALSE 92235
// exit ;
92233: GO 92285
// for i in tmp do
92235: LD_ADDR_VAR 0 1
92239: PUSH
92240: LD_VAR 0 2
92244: PUSH
92245: FOR_IN
92246: IFFALSE 92283
// if GetCargo ( i , mat_artifact ) = 0 then
92248: LD_VAR 0 1
92252: PPUSH
92253: LD_INT 4
92255: PPUSH
92256: CALL_OW 289
92260: PUSH
92261: LD_INT 0
92263: EQUAL
92264: IFFALSE 92281
// SetCargo ( i , mat_siberit , 100 ) ;
92266: LD_VAR 0 1
92270: PPUSH
92271: LD_INT 3
92273: PPUSH
92274: LD_INT 100
92276: PPUSH
92277: CALL_OW 290
92281: GO 92245
92283: POP
92284: POP
// end ;
92285: PPOPN 2
92287: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
92288: LD_EXP 83
92292: PUSH
92293: LD_EXP 128
92297: AND
92298: IFFALSE 92481
92300: GO 92302
92302: DISABLE
92303: LD_INT 0
92305: PPUSH
92306: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
92307: LD_ADDR_VAR 0 2
92311: PUSH
92312: LD_INT 22
92314: PUSH
92315: LD_OWVAR 2
92319: PUSH
92320: EMPTY
92321: LIST
92322: LIST
92323: PPUSH
92324: CALL_OW 69
92328: ST_TO_ADDR
// if not tmp then
92329: LD_VAR 0 2
92333: NOT
92334: IFFALSE 92338
// exit ;
92336: GO 92481
// for i := 1 to 2 do
92338: LD_ADDR_VAR 0 1
92342: PUSH
92343: DOUBLE
92344: LD_INT 1
92346: DEC
92347: ST_TO_ADDR
92348: LD_INT 2
92350: PUSH
92351: FOR_TO
92352: IFFALSE 92479
// begin uc_side := your_side ;
92354: LD_ADDR_OWVAR 20
92358: PUSH
92359: LD_OWVAR 2
92363: ST_TO_ADDR
// uc_nation := nation_american ;
92364: LD_ADDR_OWVAR 21
92368: PUSH
92369: LD_INT 1
92371: ST_TO_ADDR
// vc_chassis := us_morphling ;
92372: LD_ADDR_OWVAR 37
92376: PUSH
92377: LD_INT 5
92379: ST_TO_ADDR
// vc_engine := engine_siberite ;
92380: LD_ADDR_OWVAR 39
92384: PUSH
92385: LD_INT 3
92387: ST_TO_ADDR
// vc_control := control_computer ;
92388: LD_ADDR_OWVAR 38
92392: PUSH
92393: LD_INT 3
92395: ST_TO_ADDR
// vc_weapon := us_double_laser ;
92396: LD_ADDR_OWVAR 40
92400: PUSH
92401: LD_INT 10
92403: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
92404: LD_VAR 0 2
92408: PUSH
92409: LD_INT 1
92411: ARRAY
92412: PPUSH
92413: CALL_OW 310
92417: NOT
92418: IFFALSE 92465
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
92420: CALL_OW 45
92424: PPUSH
92425: LD_VAR 0 2
92429: PUSH
92430: LD_INT 1
92432: ARRAY
92433: PPUSH
92434: CALL_OW 250
92438: PPUSH
92439: LD_VAR 0 2
92443: PUSH
92444: LD_INT 1
92446: ARRAY
92447: PPUSH
92448: CALL_OW 251
92452: PPUSH
92453: LD_INT 12
92455: PPUSH
92456: LD_INT 1
92458: PPUSH
92459: CALL_OW 50
92463: GO 92477
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
92465: CALL_OW 45
92469: PPUSH
92470: LD_INT 1
92472: PPUSH
92473: CALL_OW 51
// end ;
92477: GO 92351
92479: POP
92480: POP
// end ;
92481: PPOPN 2
92483: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
92484: LD_EXP 83
92488: PUSH
92489: LD_EXP 129
92493: AND
92494: IFFALSE 92716
92496: GO 92498
92498: DISABLE
92499: LD_INT 0
92501: PPUSH
92502: PPUSH
92503: PPUSH
92504: PPUSH
92505: PPUSH
92506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
92507: LD_ADDR_VAR 0 6
92511: PUSH
92512: LD_INT 22
92514: PUSH
92515: LD_OWVAR 2
92519: PUSH
92520: EMPTY
92521: LIST
92522: LIST
92523: PUSH
92524: LD_INT 21
92526: PUSH
92527: LD_INT 1
92529: PUSH
92530: EMPTY
92531: LIST
92532: LIST
92533: PUSH
92534: LD_INT 3
92536: PUSH
92537: LD_INT 23
92539: PUSH
92540: LD_INT 0
92542: PUSH
92543: EMPTY
92544: LIST
92545: LIST
92546: PUSH
92547: EMPTY
92548: LIST
92549: LIST
92550: PUSH
92551: EMPTY
92552: LIST
92553: LIST
92554: LIST
92555: PPUSH
92556: CALL_OW 69
92560: ST_TO_ADDR
// if not tmp then
92561: LD_VAR 0 6
92565: NOT
92566: IFFALSE 92570
// exit ;
92568: GO 92716
// s1 := rand ( 1 , 4 ) ;
92570: LD_ADDR_VAR 0 2
92574: PUSH
92575: LD_INT 1
92577: PPUSH
92578: LD_INT 4
92580: PPUSH
92581: CALL_OW 12
92585: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
92586: LD_ADDR_VAR 0 4
92590: PUSH
92591: LD_VAR 0 6
92595: PUSH
92596: LD_INT 1
92598: ARRAY
92599: PPUSH
92600: LD_VAR 0 2
92604: PPUSH
92605: CALL_OW 259
92609: ST_TO_ADDR
// if s1 = 1 then
92610: LD_VAR 0 2
92614: PUSH
92615: LD_INT 1
92617: EQUAL
92618: IFFALSE 92638
// s2 := rand ( 2 , 4 ) else
92620: LD_ADDR_VAR 0 3
92624: PUSH
92625: LD_INT 2
92627: PPUSH
92628: LD_INT 4
92630: PPUSH
92631: CALL_OW 12
92635: ST_TO_ADDR
92636: GO 92646
// s2 := 1 ;
92638: LD_ADDR_VAR 0 3
92642: PUSH
92643: LD_INT 1
92645: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
92646: LD_ADDR_VAR 0 5
92650: PUSH
92651: LD_VAR 0 6
92655: PUSH
92656: LD_INT 1
92658: ARRAY
92659: PPUSH
92660: LD_VAR 0 3
92664: PPUSH
92665: CALL_OW 259
92669: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
92670: LD_VAR 0 6
92674: PUSH
92675: LD_INT 1
92677: ARRAY
92678: PPUSH
92679: LD_VAR 0 2
92683: PPUSH
92684: LD_VAR 0 5
92688: PPUSH
92689: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
92693: LD_VAR 0 6
92697: PUSH
92698: LD_INT 1
92700: ARRAY
92701: PPUSH
92702: LD_VAR 0 3
92706: PPUSH
92707: LD_VAR 0 4
92711: PPUSH
92712: CALL_OW 237
// end ;
92716: PPOPN 6
92718: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
92719: LD_EXP 83
92723: PUSH
92724: LD_EXP 130
92728: AND
92729: IFFALSE 92808
92731: GO 92733
92733: DISABLE
92734: LD_INT 0
92736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
92737: LD_ADDR_VAR 0 1
92741: PUSH
92742: LD_INT 22
92744: PUSH
92745: LD_OWVAR 2
92749: PUSH
92750: EMPTY
92751: LIST
92752: LIST
92753: PUSH
92754: LD_INT 30
92756: PUSH
92757: LD_INT 3
92759: PUSH
92760: EMPTY
92761: LIST
92762: LIST
92763: PUSH
92764: EMPTY
92765: LIST
92766: LIST
92767: PPUSH
92768: CALL_OW 69
92772: ST_TO_ADDR
// if not tmp then
92773: LD_VAR 0 1
92777: NOT
92778: IFFALSE 92782
// exit ;
92780: GO 92808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
92782: LD_VAR 0 1
92786: PUSH
92787: LD_INT 1
92789: PPUSH
92790: LD_VAR 0 1
92794: PPUSH
92795: CALL_OW 12
92799: ARRAY
92800: PPUSH
92801: LD_INT 1
92803: PPUSH
92804: CALL_OW 234
// end ;
92808: PPOPN 1
92810: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
92811: LD_EXP 83
92815: PUSH
92816: LD_EXP 131
92820: AND
92821: IFFALSE 92933
92823: GO 92825
92825: DISABLE
92826: LD_INT 0
92828: PPUSH
92829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
92830: LD_ADDR_VAR 0 2
92834: PUSH
92835: LD_INT 22
92837: PUSH
92838: LD_OWVAR 2
92842: PUSH
92843: EMPTY
92844: LIST
92845: LIST
92846: PUSH
92847: LD_INT 2
92849: PUSH
92850: LD_INT 30
92852: PUSH
92853: LD_INT 27
92855: PUSH
92856: EMPTY
92857: LIST
92858: LIST
92859: PUSH
92860: LD_INT 30
92862: PUSH
92863: LD_INT 26
92865: PUSH
92866: EMPTY
92867: LIST
92868: LIST
92869: PUSH
92870: LD_INT 30
92872: PUSH
92873: LD_INT 28
92875: PUSH
92876: EMPTY
92877: LIST
92878: LIST
92879: PUSH
92880: EMPTY
92881: LIST
92882: LIST
92883: LIST
92884: LIST
92885: PUSH
92886: EMPTY
92887: LIST
92888: LIST
92889: PPUSH
92890: CALL_OW 69
92894: ST_TO_ADDR
// if not tmp then
92895: LD_VAR 0 2
92899: NOT
92900: IFFALSE 92904
// exit ;
92902: GO 92933
// for i in tmp do
92904: LD_ADDR_VAR 0 1
92908: PUSH
92909: LD_VAR 0 2
92913: PUSH
92914: FOR_IN
92915: IFFALSE 92931
// SetLives ( i , 1 ) ;
92917: LD_VAR 0 1
92921: PPUSH
92922: LD_INT 1
92924: PPUSH
92925: CALL_OW 234
92929: GO 92914
92931: POP
92932: POP
// end ;
92933: PPOPN 2
92935: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
92936: LD_EXP 83
92940: PUSH
92941: LD_EXP 132
92945: AND
92946: IFFALSE 93220
92948: GO 92950
92950: DISABLE
92951: LD_INT 0
92953: PPUSH
92954: PPUSH
92955: PPUSH
// begin i := rand ( 1 , 7 ) ;
92956: LD_ADDR_VAR 0 1
92960: PUSH
92961: LD_INT 1
92963: PPUSH
92964: LD_INT 7
92966: PPUSH
92967: CALL_OW 12
92971: ST_TO_ADDR
// case i of 1 :
92972: LD_VAR 0 1
92976: PUSH
92977: LD_INT 1
92979: DOUBLE
92980: EQUAL
92981: IFTRUE 92985
92983: GO 92995
92985: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
92986: LD_STRING earthquake(getX(game), 0, 32)
92988: PPUSH
92989: CALL_OW 559
92993: GO 93220
92995: LD_INT 2
92997: DOUBLE
92998: EQUAL
92999: IFTRUE 93003
93001: GO 93017
93003: POP
// begin ToLua ( displayStucuk(); ) ;
93004: LD_STRING displayStucuk();
93006: PPUSH
93007: CALL_OW 559
// ResetFog ;
93011: CALL_OW 335
// end ; 3 :
93015: GO 93220
93017: LD_INT 3
93019: DOUBLE
93020: EQUAL
93021: IFTRUE 93025
93023: GO 93129
93025: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93026: LD_ADDR_VAR 0 2
93030: PUSH
93031: LD_INT 22
93033: PUSH
93034: LD_OWVAR 2
93038: PUSH
93039: EMPTY
93040: LIST
93041: LIST
93042: PUSH
93043: LD_INT 25
93045: PUSH
93046: LD_INT 1
93048: PUSH
93049: EMPTY
93050: LIST
93051: LIST
93052: PUSH
93053: EMPTY
93054: LIST
93055: LIST
93056: PPUSH
93057: CALL_OW 69
93061: ST_TO_ADDR
// if not tmp then
93062: LD_VAR 0 2
93066: NOT
93067: IFFALSE 93071
// exit ;
93069: GO 93220
// un := tmp [ rand ( 1 , tmp ) ] ;
93071: LD_ADDR_VAR 0 3
93075: PUSH
93076: LD_VAR 0 2
93080: PUSH
93081: LD_INT 1
93083: PPUSH
93084: LD_VAR 0 2
93088: PPUSH
93089: CALL_OW 12
93093: ARRAY
93094: ST_TO_ADDR
// if Crawls ( un ) then
93095: LD_VAR 0 3
93099: PPUSH
93100: CALL_OW 318
93104: IFFALSE 93115
// ComWalk ( un ) ;
93106: LD_VAR 0 3
93110: PPUSH
93111: CALL_OW 138
// SetClass ( un , class_mortar ) ;
93115: LD_VAR 0 3
93119: PPUSH
93120: LD_INT 8
93122: PPUSH
93123: CALL_OW 336
// end ; 4 :
93127: GO 93220
93129: LD_INT 4
93131: DOUBLE
93132: EQUAL
93133: IFTRUE 93137
93135: GO 93198
93137: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
93138: LD_ADDR_VAR 0 2
93142: PUSH
93143: LD_INT 22
93145: PUSH
93146: LD_OWVAR 2
93150: PUSH
93151: EMPTY
93152: LIST
93153: LIST
93154: PUSH
93155: LD_INT 30
93157: PUSH
93158: LD_INT 29
93160: PUSH
93161: EMPTY
93162: LIST
93163: LIST
93164: PUSH
93165: EMPTY
93166: LIST
93167: LIST
93168: PPUSH
93169: CALL_OW 69
93173: ST_TO_ADDR
// if not tmp then
93174: LD_VAR 0 2
93178: NOT
93179: IFFALSE 93183
// exit ;
93181: GO 93220
// DestroyUnit ( tmp [ 1 ] ) ;
93183: LD_VAR 0 2
93187: PUSH
93188: LD_INT 1
93190: ARRAY
93191: PPUSH
93192: CALL_OW 65
// end ; 5 .. 7 :
93196: GO 93220
93198: LD_INT 5
93200: DOUBLE
93201: GREATEREQUAL
93202: IFFALSE 93210
93204: LD_INT 7
93206: DOUBLE
93207: LESSEQUAL
93208: IFTRUE 93212
93210: GO 93219
93212: POP
// StreamSibBomb ; end ;
93213: CALL 89470 0 0
93217: GO 93220
93219: POP
// end ;
93220: PPOPN 3
93222: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
93223: LD_EXP 83
93227: PUSH
93228: LD_EXP 133
93232: AND
93233: IFFALSE 93389
93235: GO 93237
93237: DISABLE
93238: LD_INT 0
93240: PPUSH
93241: PPUSH
93242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
93243: LD_ADDR_VAR 0 2
93247: PUSH
93248: LD_INT 81
93250: PUSH
93251: LD_OWVAR 2
93255: PUSH
93256: EMPTY
93257: LIST
93258: LIST
93259: PUSH
93260: LD_INT 2
93262: PUSH
93263: LD_INT 21
93265: PUSH
93266: LD_INT 1
93268: PUSH
93269: EMPTY
93270: LIST
93271: LIST
93272: PUSH
93273: LD_INT 21
93275: PUSH
93276: LD_INT 2
93278: PUSH
93279: EMPTY
93280: LIST
93281: LIST
93282: PUSH
93283: EMPTY
93284: LIST
93285: LIST
93286: LIST
93287: PUSH
93288: EMPTY
93289: LIST
93290: LIST
93291: PPUSH
93292: CALL_OW 69
93296: ST_TO_ADDR
// if not tmp then
93297: LD_VAR 0 2
93301: NOT
93302: IFFALSE 93306
// exit ;
93304: GO 93389
// p := 0 ;
93306: LD_ADDR_VAR 0 3
93310: PUSH
93311: LD_INT 0
93313: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
93314: LD_INT 35
93316: PPUSH
93317: CALL_OW 67
// p := p + 1 ;
93321: LD_ADDR_VAR 0 3
93325: PUSH
93326: LD_VAR 0 3
93330: PUSH
93331: LD_INT 1
93333: PLUS
93334: ST_TO_ADDR
// for i in tmp do
93335: LD_ADDR_VAR 0 1
93339: PUSH
93340: LD_VAR 0 2
93344: PUSH
93345: FOR_IN
93346: IFFALSE 93377
// if GetLives ( i ) < 1000 then
93348: LD_VAR 0 1
93352: PPUSH
93353: CALL_OW 256
93357: PUSH
93358: LD_INT 1000
93360: LESS
93361: IFFALSE 93375
// SetLives ( i , 1000 ) ;
93363: LD_VAR 0 1
93367: PPUSH
93368: LD_INT 1000
93370: PPUSH
93371: CALL_OW 234
93375: GO 93345
93377: POP
93378: POP
// until p > 20 ;
93379: LD_VAR 0 3
93383: PUSH
93384: LD_INT 20
93386: GREATER
93387: IFFALSE 93314
// end ;
93389: PPOPN 3
93391: END
// every 0 0$1 trigger StreamModeActive and sTime do
93392: LD_EXP 83
93396: PUSH
93397: LD_EXP 134
93401: AND
93402: IFFALSE 93437
93404: GO 93406
93406: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
93407: LD_INT 28
93409: PPUSH
93410: LD_OWVAR 2
93414: PPUSH
93415: LD_INT 2
93417: PPUSH
93418: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
93422: LD_INT 30
93424: PPUSH
93425: LD_OWVAR 2
93429: PPUSH
93430: LD_INT 2
93432: PPUSH
93433: CALL_OW 322
// end ;
93437: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
93438: LD_EXP 83
93442: PUSH
93443: LD_EXP 135
93447: AND
93448: IFFALSE 93569
93450: GO 93452
93452: DISABLE
93453: LD_INT 0
93455: PPUSH
93456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93457: LD_ADDR_VAR 0 2
93461: PUSH
93462: LD_INT 22
93464: PUSH
93465: LD_OWVAR 2
93469: PUSH
93470: EMPTY
93471: LIST
93472: LIST
93473: PUSH
93474: LD_INT 21
93476: PUSH
93477: LD_INT 1
93479: PUSH
93480: EMPTY
93481: LIST
93482: LIST
93483: PUSH
93484: LD_INT 3
93486: PUSH
93487: LD_INT 23
93489: PUSH
93490: LD_INT 0
93492: PUSH
93493: EMPTY
93494: LIST
93495: LIST
93496: PUSH
93497: EMPTY
93498: LIST
93499: LIST
93500: PUSH
93501: EMPTY
93502: LIST
93503: LIST
93504: LIST
93505: PPUSH
93506: CALL_OW 69
93510: ST_TO_ADDR
// if not tmp then
93511: LD_VAR 0 2
93515: NOT
93516: IFFALSE 93520
// exit ;
93518: GO 93569
// for i in tmp do
93520: LD_ADDR_VAR 0 1
93524: PUSH
93525: LD_VAR 0 2
93529: PUSH
93530: FOR_IN
93531: IFFALSE 93567
// begin if Crawls ( i ) then
93533: LD_VAR 0 1
93537: PPUSH
93538: CALL_OW 318
93542: IFFALSE 93553
// ComWalk ( i ) ;
93544: LD_VAR 0 1
93548: PPUSH
93549: CALL_OW 138
// SetClass ( i , 2 ) ;
93553: LD_VAR 0 1
93557: PPUSH
93558: LD_INT 2
93560: PPUSH
93561: CALL_OW 336
// end ;
93565: GO 93530
93567: POP
93568: POP
// end ;
93569: PPOPN 2
93571: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
93572: LD_EXP 83
93576: PUSH
93577: LD_EXP 136
93581: AND
93582: IFFALSE 93863
93584: GO 93586
93586: DISABLE
93587: LD_INT 0
93589: PPUSH
93590: PPUSH
93591: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
93592: LD_OWVAR 2
93596: PPUSH
93597: LD_INT 9
93599: PPUSH
93600: LD_INT 1
93602: PPUSH
93603: LD_INT 1
93605: PPUSH
93606: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
93610: LD_INT 9
93612: PPUSH
93613: LD_OWVAR 2
93617: PPUSH
93618: CALL_OW 343
// uc_side := 9 ;
93622: LD_ADDR_OWVAR 20
93626: PUSH
93627: LD_INT 9
93629: ST_TO_ADDR
// uc_nation := 2 ;
93630: LD_ADDR_OWVAR 21
93634: PUSH
93635: LD_INT 2
93637: ST_TO_ADDR
// hc_name := Dark Warrior ;
93638: LD_ADDR_OWVAR 26
93642: PUSH
93643: LD_STRING Dark Warrior
93645: ST_TO_ADDR
// hc_gallery :=  ;
93646: LD_ADDR_OWVAR 33
93650: PUSH
93651: LD_STRING 
93653: ST_TO_ADDR
// hc_noskilllimit := true ;
93654: LD_ADDR_OWVAR 76
93658: PUSH
93659: LD_INT 1
93661: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
93662: LD_ADDR_OWVAR 31
93666: PUSH
93667: LD_INT 30
93669: PUSH
93670: LD_INT 30
93672: PUSH
93673: LD_INT 30
93675: PUSH
93676: LD_INT 30
93678: PUSH
93679: EMPTY
93680: LIST
93681: LIST
93682: LIST
93683: LIST
93684: ST_TO_ADDR
// un := CreateHuman ;
93685: LD_ADDR_VAR 0 3
93689: PUSH
93690: CALL_OW 44
93694: ST_TO_ADDR
// hc_noskilllimit := false ;
93695: LD_ADDR_OWVAR 76
93699: PUSH
93700: LD_INT 0
93702: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
93703: LD_VAR 0 3
93707: PPUSH
93708: LD_INT 1
93710: PPUSH
93711: CALL_OW 51
// p := 0 ;
93715: LD_ADDR_VAR 0 2
93719: PUSH
93720: LD_INT 0
93722: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
93723: LD_INT 35
93725: PPUSH
93726: CALL_OW 67
// p := p + 1 ;
93730: LD_ADDR_VAR 0 2
93734: PUSH
93735: LD_VAR 0 2
93739: PUSH
93740: LD_INT 1
93742: PLUS
93743: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
93744: LD_VAR 0 3
93748: PPUSH
93749: CALL_OW 256
93753: PUSH
93754: LD_INT 1000
93756: LESS
93757: IFFALSE 93771
// SetLives ( un , 1000 ) ;
93759: LD_VAR 0 3
93763: PPUSH
93764: LD_INT 1000
93766: PPUSH
93767: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
93771: LD_VAR 0 3
93775: PPUSH
93776: LD_INT 81
93778: PUSH
93779: LD_OWVAR 2
93783: PUSH
93784: EMPTY
93785: LIST
93786: LIST
93787: PUSH
93788: LD_INT 91
93790: PUSH
93791: LD_VAR 0 3
93795: PUSH
93796: LD_INT 30
93798: PUSH
93799: EMPTY
93800: LIST
93801: LIST
93802: LIST
93803: PUSH
93804: EMPTY
93805: LIST
93806: LIST
93807: PPUSH
93808: CALL_OW 69
93812: PPUSH
93813: LD_VAR 0 3
93817: PPUSH
93818: CALL_OW 74
93822: PPUSH
93823: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
93827: LD_VAR 0 2
93831: PUSH
93832: LD_INT 60
93834: GREATER
93835: PUSH
93836: LD_VAR 0 3
93840: PPUSH
93841: CALL_OW 301
93845: OR
93846: IFFALSE 93723
// if un then
93848: LD_VAR 0 3
93852: IFFALSE 93863
// RemoveUnit ( un ) ;
93854: LD_VAR 0 3
93858: PPUSH
93859: CALL_OW 64
// end ;
93863: PPOPN 3
93865: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
93866: LD_INT 0
93868: PPUSH
// case cmd of 301 :
93869: LD_VAR 0 1
93873: PUSH
93874: LD_INT 301
93876: DOUBLE
93877: EQUAL
93878: IFTRUE 93882
93880: GO 93914
93882: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
93883: LD_VAR 0 6
93887: PPUSH
93888: LD_VAR 0 7
93892: PPUSH
93893: LD_VAR 0 8
93897: PPUSH
93898: LD_VAR 0 4
93902: PPUSH
93903: LD_VAR 0 5
93907: PPUSH
93908: CALL 95115 0 5
93912: GO 94035
93914: LD_INT 302
93916: DOUBLE
93917: EQUAL
93918: IFTRUE 93922
93920: GO 93959
93922: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
93923: LD_VAR 0 6
93927: PPUSH
93928: LD_VAR 0 7
93932: PPUSH
93933: LD_VAR 0 8
93937: PPUSH
93938: LD_VAR 0 9
93942: PPUSH
93943: LD_VAR 0 4
93947: PPUSH
93948: LD_VAR 0 5
93952: PPUSH
93953: CALL 95206 0 6
93957: GO 94035
93959: LD_INT 303
93961: DOUBLE
93962: EQUAL
93963: IFTRUE 93967
93965: GO 94004
93967: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
93968: LD_VAR 0 6
93972: PPUSH
93973: LD_VAR 0 7
93977: PPUSH
93978: LD_VAR 0 8
93982: PPUSH
93983: LD_VAR 0 9
93987: PPUSH
93988: LD_VAR 0 4
93992: PPUSH
93993: LD_VAR 0 5
93997: PPUSH
93998: CALL 94040 0 6
94002: GO 94035
94004: LD_INT 304
94006: DOUBLE
94007: EQUAL
94008: IFTRUE 94012
94010: GO 94034
94012: POP
// hHackTeleport ( unit , x , y ) ; end ;
94013: LD_VAR 0 2
94017: PPUSH
94018: LD_VAR 0 4
94022: PPUSH
94023: LD_VAR 0 5
94027: PPUSH
94028: CALL 95799 0 3
94032: GO 94035
94034: POP
// end ;
94035: LD_VAR 0 12
94039: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
94040: LD_INT 0
94042: PPUSH
94043: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
94044: LD_VAR 0 1
94048: PUSH
94049: LD_INT 1
94051: LESS
94052: PUSH
94053: LD_VAR 0 1
94057: PUSH
94058: LD_INT 3
94060: GREATER
94061: OR
94062: PUSH
94063: LD_VAR 0 5
94067: PPUSH
94068: LD_VAR 0 6
94072: PPUSH
94073: CALL_OW 428
94077: OR
94078: IFFALSE 94082
// exit ;
94080: GO 94802
// uc_side := your_side ;
94082: LD_ADDR_OWVAR 20
94086: PUSH
94087: LD_OWVAR 2
94091: ST_TO_ADDR
// uc_nation := nation ;
94092: LD_ADDR_OWVAR 21
94096: PUSH
94097: LD_VAR 0 1
94101: ST_TO_ADDR
// bc_level = 1 ;
94102: LD_ADDR_OWVAR 43
94106: PUSH
94107: LD_INT 1
94109: ST_TO_ADDR
// case btype of 1 :
94110: LD_VAR 0 2
94114: PUSH
94115: LD_INT 1
94117: DOUBLE
94118: EQUAL
94119: IFTRUE 94123
94121: GO 94134
94123: POP
// bc_type := b_depot ; 2 :
94124: LD_ADDR_OWVAR 42
94128: PUSH
94129: LD_INT 0
94131: ST_TO_ADDR
94132: GO 94746
94134: LD_INT 2
94136: DOUBLE
94137: EQUAL
94138: IFTRUE 94142
94140: GO 94153
94142: POP
// bc_type := b_warehouse ; 3 :
94143: LD_ADDR_OWVAR 42
94147: PUSH
94148: LD_INT 1
94150: ST_TO_ADDR
94151: GO 94746
94153: LD_INT 3
94155: DOUBLE
94156: EQUAL
94157: IFTRUE 94161
94159: GO 94172
94161: POP
// bc_type := b_lab ; 4 .. 9 :
94162: LD_ADDR_OWVAR 42
94166: PUSH
94167: LD_INT 6
94169: ST_TO_ADDR
94170: GO 94746
94172: LD_INT 4
94174: DOUBLE
94175: GREATEREQUAL
94176: IFFALSE 94184
94178: LD_INT 9
94180: DOUBLE
94181: LESSEQUAL
94182: IFTRUE 94186
94184: GO 94238
94186: POP
// begin bc_type := b_lab_half ;
94187: LD_ADDR_OWVAR 42
94191: PUSH
94192: LD_INT 7
94194: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
94195: LD_ADDR_OWVAR 44
94199: PUSH
94200: LD_INT 10
94202: PUSH
94203: LD_INT 11
94205: PUSH
94206: LD_INT 12
94208: PUSH
94209: LD_INT 15
94211: PUSH
94212: LD_INT 14
94214: PUSH
94215: LD_INT 13
94217: PUSH
94218: EMPTY
94219: LIST
94220: LIST
94221: LIST
94222: LIST
94223: LIST
94224: LIST
94225: PUSH
94226: LD_VAR 0 2
94230: PUSH
94231: LD_INT 3
94233: MINUS
94234: ARRAY
94235: ST_TO_ADDR
// end ; 10 .. 13 :
94236: GO 94746
94238: LD_INT 10
94240: DOUBLE
94241: GREATEREQUAL
94242: IFFALSE 94250
94244: LD_INT 13
94246: DOUBLE
94247: LESSEQUAL
94248: IFTRUE 94252
94250: GO 94329
94252: POP
// begin bc_type := b_lab_full ;
94253: LD_ADDR_OWVAR 42
94257: PUSH
94258: LD_INT 8
94260: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
94261: LD_ADDR_OWVAR 44
94265: PUSH
94266: LD_INT 10
94268: PUSH
94269: LD_INT 12
94271: PUSH
94272: LD_INT 14
94274: PUSH
94275: LD_INT 13
94277: PUSH
94278: EMPTY
94279: LIST
94280: LIST
94281: LIST
94282: LIST
94283: PUSH
94284: LD_VAR 0 2
94288: PUSH
94289: LD_INT 9
94291: MINUS
94292: ARRAY
94293: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
94294: LD_ADDR_OWVAR 45
94298: PUSH
94299: LD_INT 11
94301: PUSH
94302: LD_INT 15
94304: PUSH
94305: LD_INT 12
94307: PUSH
94308: LD_INT 15
94310: PUSH
94311: EMPTY
94312: LIST
94313: LIST
94314: LIST
94315: LIST
94316: PUSH
94317: LD_VAR 0 2
94321: PUSH
94322: LD_INT 9
94324: MINUS
94325: ARRAY
94326: ST_TO_ADDR
// end ; 14 :
94327: GO 94746
94329: LD_INT 14
94331: DOUBLE
94332: EQUAL
94333: IFTRUE 94337
94335: GO 94348
94337: POP
// bc_type := b_workshop ; 15 :
94338: LD_ADDR_OWVAR 42
94342: PUSH
94343: LD_INT 2
94345: ST_TO_ADDR
94346: GO 94746
94348: LD_INT 15
94350: DOUBLE
94351: EQUAL
94352: IFTRUE 94356
94354: GO 94367
94356: POP
// bc_type := b_factory ; 16 :
94357: LD_ADDR_OWVAR 42
94361: PUSH
94362: LD_INT 3
94364: ST_TO_ADDR
94365: GO 94746
94367: LD_INT 16
94369: DOUBLE
94370: EQUAL
94371: IFTRUE 94375
94373: GO 94386
94375: POP
// bc_type := b_ext_gun ; 17 :
94376: LD_ADDR_OWVAR 42
94380: PUSH
94381: LD_INT 17
94383: ST_TO_ADDR
94384: GO 94746
94386: LD_INT 17
94388: DOUBLE
94389: EQUAL
94390: IFTRUE 94394
94392: GO 94422
94394: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
94395: LD_ADDR_OWVAR 42
94399: PUSH
94400: LD_INT 19
94402: PUSH
94403: LD_INT 23
94405: PUSH
94406: LD_INT 19
94408: PUSH
94409: EMPTY
94410: LIST
94411: LIST
94412: LIST
94413: PUSH
94414: LD_VAR 0 1
94418: ARRAY
94419: ST_TO_ADDR
94420: GO 94746
94422: LD_INT 18
94424: DOUBLE
94425: EQUAL
94426: IFTRUE 94430
94428: GO 94441
94430: POP
// bc_type := b_ext_radar ; 19 :
94431: LD_ADDR_OWVAR 42
94435: PUSH
94436: LD_INT 20
94438: ST_TO_ADDR
94439: GO 94746
94441: LD_INT 19
94443: DOUBLE
94444: EQUAL
94445: IFTRUE 94449
94447: GO 94460
94449: POP
// bc_type := b_ext_radio ; 20 :
94450: LD_ADDR_OWVAR 42
94454: PUSH
94455: LD_INT 22
94457: ST_TO_ADDR
94458: GO 94746
94460: LD_INT 20
94462: DOUBLE
94463: EQUAL
94464: IFTRUE 94468
94466: GO 94479
94468: POP
// bc_type := b_ext_siberium ; 21 :
94469: LD_ADDR_OWVAR 42
94473: PUSH
94474: LD_INT 21
94476: ST_TO_ADDR
94477: GO 94746
94479: LD_INT 21
94481: DOUBLE
94482: EQUAL
94483: IFTRUE 94487
94485: GO 94498
94487: POP
// bc_type := b_ext_computer ; 22 :
94488: LD_ADDR_OWVAR 42
94492: PUSH
94493: LD_INT 24
94495: ST_TO_ADDR
94496: GO 94746
94498: LD_INT 22
94500: DOUBLE
94501: EQUAL
94502: IFTRUE 94506
94504: GO 94517
94506: POP
// bc_type := b_ext_track ; 23 :
94507: LD_ADDR_OWVAR 42
94511: PUSH
94512: LD_INT 16
94514: ST_TO_ADDR
94515: GO 94746
94517: LD_INT 23
94519: DOUBLE
94520: EQUAL
94521: IFTRUE 94525
94523: GO 94536
94525: POP
// bc_type := b_ext_laser ; 24 :
94526: LD_ADDR_OWVAR 42
94530: PUSH
94531: LD_INT 25
94533: ST_TO_ADDR
94534: GO 94746
94536: LD_INT 24
94538: DOUBLE
94539: EQUAL
94540: IFTRUE 94544
94542: GO 94555
94544: POP
// bc_type := b_control_tower ; 25 :
94545: LD_ADDR_OWVAR 42
94549: PUSH
94550: LD_INT 36
94552: ST_TO_ADDR
94553: GO 94746
94555: LD_INT 25
94557: DOUBLE
94558: EQUAL
94559: IFTRUE 94563
94561: GO 94574
94563: POP
// bc_type := b_breastwork ; 26 :
94564: LD_ADDR_OWVAR 42
94568: PUSH
94569: LD_INT 31
94571: ST_TO_ADDR
94572: GO 94746
94574: LD_INT 26
94576: DOUBLE
94577: EQUAL
94578: IFTRUE 94582
94580: GO 94593
94582: POP
// bc_type := b_bunker ; 27 :
94583: LD_ADDR_OWVAR 42
94587: PUSH
94588: LD_INT 32
94590: ST_TO_ADDR
94591: GO 94746
94593: LD_INT 27
94595: DOUBLE
94596: EQUAL
94597: IFTRUE 94601
94599: GO 94612
94601: POP
// bc_type := b_turret ; 28 :
94602: LD_ADDR_OWVAR 42
94606: PUSH
94607: LD_INT 33
94609: ST_TO_ADDR
94610: GO 94746
94612: LD_INT 28
94614: DOUBLE
94615: EQUAL
94616: IFTRUE 94620
94618: GO 94631
94620: POP
// bc_type := b_armoury ; 29 :
94621: LD_ADDR_OWVAR 42
94625: PUSH
94626: LD_INT 4
94628: ST_TO_ADDR
94629: GO 94746
94631: LD_INT 29
94633: DOUBLE
94634: EQUAL
94635: IFTRUE 94639
94637: GO 94650
94639: POP
// bc_type := b_barracks ; 30 :
94640: LD_ADDR_OWVAR 42
94644: PUSH
94645: LD_INT 5
94647: ST_TO_ADDR
94648: GO 94746
94650: LD_INT 30
94652: DOUBLE
94653: EQUAL
94654: IFTRUE 94658
94656: GO 94669
94658: POP
// bc_type := b_solar_power ; 31 :
94659: LD_ADDR_OWVAR 42
94663: PUSH
94664: LD_INT 27
94666: ST_TO_ADDR
94667: GO 94746
94669: LD_INT 31
94671: DOUBLE
94672: EQUAL
94673: IFTRUE 94677
94675: GO 94688
94677: POP
// bc_type := b_oil_power ; 32 :
94678: LD_ADDR_OWVAR 42
94682: PUSH
94683: LD_INT 26
94685: ST_TO_ADDR
94686: GO 94746
94688: LD_INT 32
94690: DOUBLE
94691: EQUAL
94692: IFTRUE 94696
94694: GO 94707
94696: POP
// bc_type := b_siberite_power ; 33 :
94697: LD_ADDR_OWVAR 42
94701: PUSH
94702: LD_INT 28
94704: ST_TO_ADDR
94705: GO 94746
94707: LD_INT 33
94709: DOUBLE
94710: EQUAL
94711: IFTRUE 94715
94713: GO 94726
94715: POP
// bc_type := b_oil_mine ; 34 :
94716: LD_ADDR_OWVAR 42
94720: PUSH
94721: LD_INT 29
94723: ST_TO_ADDR
94724: GO 94746
94726: LD_INT 34
94728: DOUBLE
94729: EQUAL
94730: IFTRUE 94734
94732: GO 94745
94734: POP
// bc_type := b_siberite_mine ; end ;
94735: LD_ADDR_OWVAR 42
94739: PUSH
94740: LD_INT 30
94742: ST_TO_ADDR
94743: GO 94746
94745: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
94746: LD_ADDR_VAR 0 8
94750: PUSH
94751: LD_VAR 0 5
94755: PPUSH
94756: LD_VAR 0 6
94760: PPUSH
94761: LD_VAR 0 3
94765: PPUSH
94766: CALL_OW 47
94770: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
94771: LD_OWVAR 42
94775: PUSH
94776: LD_INT 32
94778: PUSH
94779: LD_INT 33
94781: PUSH
94782: EMPTY
94783: LIST
94784: LIST
94785: IN
94786: IFFALSE 94802
// PlaceWeaponTurret ( b , weapon ) ;
94788: LD_VAR 0 8
94792: PPUSH
94793: LD_VAR 0 4
94797: PPUSH
94798: CALL_OW 431
// end ;
94802: LD_VAR 0 7
94806: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
94807: LD_INT 0
94809: PPUSH
94810: PPUSH
94811: PPUSH
94812: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94813: LD_ADDR_VAR 0 4
94817: PUSH
94818: LD_INT 22
94820: PUSH
94821: LD_OWVAR 2
94825: PUSH
94826: EMPTY
94827: LIST
94828: LIST
94829: PUSH
94830: LD_INT 2
94832: PUSH
94833: LD_INT 30
94835: PUSH
94836: LD_INT 0
94838: PUSH
94839: EMPTY
94840: LIST
94841: LIST
94842: PUSH
94843: LD_INT 30
94845: PUSH
94846: LD_INT 1
94848: PUSH
94849: EMPTY
94850: LIST
94851: LIST
94852: PUSH
94853: EMPTY
94854: LIST
94855: LIST
94856: LIST
94857: PUSH
94858: EMPTY
94859: LIST
94860: LIST
94861: PPUSH
94862: CALL_OW 69
94866: ST_TO_ADDR
// if not tmp then
94867: LD_VAR 0 4
94871: NOT
94872: IFFALSE 94876
// exit ;
94874: GO 94935
// for i in tmp do
94876: LD_ADDR_VAR 0 2
94880: PUSH
94881: LD_VAR 0 4
94885: PUSH
94886: FOR_IN
94887: IFFALSE 94933
// for j = 1 to 3 do
94889: LD_ADDR_VAR 0 3
94893: PUSH
94894: DOUBLE
94895: LD_INT 1
94897: DEC
94898: ST_TO_ADDR
94899: LD_INT 3
94901: PUSH
94902: FOR_TO
94903: IFFALSE 94929
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
94905: LD_VAR 0 2
94909: PPUSH
94910: CALL_OW 274
94914: PPUSH
94915: LD_VAR 0 3
94919: PPUSH
94920: LD_INT 99999
94922: PPUSH
94923: CALL_OW 277
94927: GO 94902
94929: POP
94930: POP
94931: GO 94886
94933: POP
94934: POP
// end ;
94935: LD_VAR 0 1
94939: RET
// export function hHackSetLevel10 ; var i , j ; begin
94940: LD_INT 0
94942: PPUSH
94943: PPUSH
94944: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
94945: LD_ADDR_VAR 0 2
94949: PUSH
94950: LD_INT 21
94952: PUSH
94953: LD_INT 1
94955: PUSH
94956: EMPTY
94957: LIST
94958: LIST
94959: PPUSH
94960: CALL_OW 69
94964: PUSH
94965: FOR_IN
94966: IFFALSE 95018
// if IsSelected ( i ) then
94968: LD_VAR 0 2
94972: PPUSH
94973: CALL_OW 306
94977: IFFALSE 95016
// begin for j := 1 to 4 do
94979: LD_ADDR_VAR 0 3
94983: PUSH
94984: DOUBLE
94985: LD_INT 1
94987: DEC
94988: ST_TO_ADDR
94989: LD_INT 4
94991: PUSH
94992: FOR_TO
94993: IFFALSE 95014
// SetSkill ( i , j , 10 ) ;
94995: LD_VAR 0 2
94999: PPUSH
95000: LD_VAR 0 3
95004: PPUSH
95005: LD_INT 10
95007: PPUSH
95008: CALL_OW 237
95012: GO 94992
95014: POP
95015: POP
// end ;
95016: GO 94965
95018: POP
95019: POP
// end ;
95020: LD_VAR 0 1
95024: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
95025: LD_INT 0
95027: PPUSH
95028: PPUSH
95029: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
95030: LD_ADDR_VAR 0 2
95034: PUSH
95035: LD_INT 22
95037: PUSH
95038: LD_OWVAR 2
95042: PUSH
95043: EMPTY
95044: LIST
95045: LIST
95046: PUSH
95047: LD_INT 21
95049: PUSH
95050: LD_INT 1
95052: PUSH
95053: EMPTY
95054: LIST
95055: LIST
95056: PUSH
95057: EMPTY
95058: LIST
95059: LIST
95060: PPUSH
95061: CALL_OW 69
95065: PUSH
95066: FOR_IN
95067: IFFALSE 95108
// begin for j := 1 to 4 do
95069: LD_ADDR_VAR 0 3
95073: PUSH
95074: DOUBLE
95075: LD_INT 1
95077: DEC
95078: ST_TO_ADDR
95079: LD_INT 4
95081: PUSH
95082: FOR_TO
95083: IFFALSE 95104
// SetSkill ( i , j , 10 ) ;
95085: LD_VAR 0 2
95089: PPUSH
95090: LD_VAR 0 3
95094: PPUSH
95095: LD_INT 10
95097: PPUSH
95098: CALL_OW 237
95102: GO 95082
95104: POP
95105: POP
// end ;
95106: GO 95066
95108: POP
95109: POP
// end ;
95110: LD_VAR 0 1
95114: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
95115: LD_INT 0
95117: PPUSH
// uc_side := your_side ;
95118: LD_ADDR_OWVAR 20
95122: PUSH
95123: LD_OWVAR 2
95127: ST_TO_ADDR
// uc_nation := nation ;
95128: LD_ADDR_OWVAR 21
95132: PUSH
95133: LD_VAR 0 1
95137: ST_TO_ADDR
// InitHc ;
95138: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
95142: LD_INT 0
95144: PPUSH
95145: LD_VAR 0 2
95149: PPUSH
95150: LD_VAR 0 3
95154: PPUSH
95155: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
95159: LD_VAR 0 4
95163: PPUSH
95164: LD_VAR 0 5
95168: PPUSH
95169: CALL_OW 428
95173: PUSH
95174: LD_INT 0
95176: EQUAL
95177: IFFALSE 95201
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
95179: CALL_OW 44
95183: PPUSH
95184: LD_VAR 0 4
95188: PPUSH
95189: LD_VAR 0 5
95193: PPUSH
95194: LD_INT 1
95196: PPUSH
95197: CALL_OW 48
// end ;
95201: LD_VAR 0 6
95205: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
95206: LD_INT 0
95208: PPUSH
95209: PPUSH
// uc_side := your_side ;
95210: LD_ADDR_OWVAR 20
95214: PUSH
95215: LD_OWVAR 2
95219: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
95220: LD_VAR 0 1
95224: PUSH
95225: LD_INT 1
95227: PUSH
95228: LD_INT 2
95230: PUSH
95231: LD_INT 3
95233: PUSH
95234: LD_INT 4
95236: PUSH
95237: LD_INT 5
95239: PUSH
95240: EMPTY
95241: LIST
95242: LIST
95243: LIST
95244: LIST
95245: LIST
95246: IN
95247: IFFALSE 95259
// uc_nation := nation_american else
95249: LD_ADDR_OWVAR 21
95253: PUSH
95254: LD_INT 1
95256: ST_TO_ADDR
95257: GO 95302
// if chassis in [ 11 , 12 , 13 , 14 ] then
95259: LD_VAR 0 1
95263: PUSH
95264: LD_INT 11
95266: PUSH
95267: LD_INT 12
95269: PUSH
95270: LD_INT 13
95272: PUSH
95273: LD_INT 14
95275: PUSH
95276: EMPTY
95277: LIST
95278: LIST
95279: LIST
95280: LIST
95281: IN
95282: IFFALSE 95294
// uc_nation := nation_arabian else
95284: LD_ADDR_OWVAR 21
95288: PUSH
95289: LD_INT 2
95291: ST_TO_ADDR
95292: GO 95302
// uc_nation := nation_russian ;
95294: LD_ADDR_OWVAR 21
95298: PUSH
95299: LD_INT 3
95301: ST_TO_ADDR
// vc_chassis := chassis ;
95302: LD_ADDR_OWVAR 37
95306: PUSH
95307: LD_VAR 0 1
95311: ST_TO_ADDR
// vc_engine := engine ;
95312: LD_ADDR_OWVAR 39
95316: PUSH
95317: LD_VAR 0 2
95321: ST_TO_ADDR
// vc_control := control ;
95322: LD_ADDR_OWVAR 38
95326: PUSH
95327: LD_VAR 0 3
95331: ST_TO_ADDR
// vc_weapon := weapon ;
95332: LD_ADDR_OWVAR 40
95336: PUSH
95337: LD_VAR 0 4
95341: ST_TO_ADDR
// un := CreateVehicle ;
95342: LD_ADDR_VAR 0 8
95346: PUSH
95347: CALL_OW 45
95351: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
95352: LD_VAR 0 8
95356: PPUSH
95357: LD_INT 0
95359: PPUSH
95360: LD_INT 5
95362: PPUSH
95363: CALL_OW 12
95367: PPUSH
95368: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
95372: LD_VAR 0 8
95376: PPUSH
95377: LD_VAR 0 5
95381: PPUSH
95382: LD_VAR 0 6
95386: PPUSH
95387: LD_INT 1
95389: PPUSH
95390: CALL_OW 48
// end ;
95394: LD_VAR 0 7
95398: RET
// export hInvincible ; every 1 do
95399: GO 95401
95401: DISABLE
// hInvincible := [ ] ;
95402: LD_ADDR_EXP 137
95406: PUSH
95407: EMPTY
95408: ST_TO_ADDR
95409: END
// every 10 do var i ;
95410: GO 95412
95412: DISABLE
95413: LD_INT 0
95415: PPUSH
// begin enable ;
95416: ENABLE
// if not hInvincible then
95417: LD_EXP 137
95421: NOT
95422: IFFALSE 95426
// exit ;
95424: GO 95470
// for i in hInvincible do
95426: LD_ADDR_VAR 0 1
95430: PUSH
95431: LD_EXP 137
95435: PUSH
95436: FOR_IN
95437: IFFALSE 95468
// if GetLives ( i ) < 1000 then
95439: LD_VAR 0 1
95443: PPUSH
95444: CALL_OW 256
95448: PUSH
95449: LD_INT 1000
95451: LESS
95452: IFFALSE 95466
// SetLives ( i , 1000 ) ;
95454: LD_VAR 0 1
95458: PPUSH
95459: LD_INT 1000
95461: PPUSH
95462: CALL_OW 234
95466: GO 95436
95468: POP
95469: POP
// end ;
95470: PPOPN 1
95472: END
// export function hHackInvincible ; var i ; begin
95473: LD_INT 0
95475: PPUSH
95476: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
95477: LD_ADDR_VAR 0 2
95481: PUSH
95482: LD_INT 2
95484: PUSH
95485: LD_INT 21
95487: PUSH
95488: LD_INT 1
95490: PUSH
95491: EMPTY
95492: LIST
95493: LIST
95494: PUSH
95495: LD_INT 21
95497: PUSH
95498: LD_INT 2
95500: PUSH
95501: EMPTY
95502: LIST
95503: LIST
95504: PUSH
95505: EMPTY
95506: LIST
95507: LIST
95508: LIST
95509: PPUSH
95510: CALL_OW 69
95514: PUSH
95515: FOR_IN
95516: IFFALSE 95577
// if IsSelected ( i ) then
95518: LD_VAR 0 2
95522: PPUSH
95523: CALL_OW 306
95527: IFFALSE 95575
// begin if i in hInvincible then
95529: LD_VAR 0 2
95533: PUSH
95534: LD_EXP 137
95538: IN
95539: IFFALSE 95559
// hInvincible := hInvincible diff i else
95541: LD_ADDR_EXP 137
95545: PUSH
95546: LD_EXP 137
95550: PUSH
95551: LD_VAR 0 2
95555: DIFF
95556: ST_TO_ADDR
95557: GO 95575
// hInvincible := hInvincible union i ;
95559: LD_ADDR_EXP 137
95563: PUSH
95564: LD_EXP 137
95568: PUSH
95569: LD_VAR 0 2
95573: UNION
95574: ST_TO_ADDR
// end ;
95575: GO 95515
95577: POP
95578: POP
// end ;
95579: LD_VAR 0 1
95583: RET
// export function hHackInvisible ; var i , j ; begin
95584: LD_INT 0
95586: PPUSH
95587: PPUSH
95588: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
95589: LD_ADDR_VAR 0 2
95593: PUSH
95594: LD_INT 21
95596: PUSH
95597: LD_INT 1
95599: PUSH
95600: EMPTY
95601: LIST
95602: LIST
95603: PPUSH
95604: CALL_OW 69
95608: PUSH
95609: FOR_IN
95610: IFFALSE 95634
// if IsSelected ( i ) then
95612: LD_VAR 0 2
95616: PPUSH
95617: CALL_OW 306
95621: IFFALSE 95632
// ComForceInvisible ( i ) ;
95623: LD_VAR 0 2
95627: PPUSH
95628: CALL_OW 496
95632: GO 95609
95634: POP
95635: POP
// end ;
95636: LD_VAR 0 1
95640: RET
// export function hHackChangeYourSide ; begin
95641: LD_INT 0
95643: PPUSH
// if your_side = 8 then
95644: LD_OWVAR 2
95648: PUSH
95649: LD_INT 8
95651: EQUAL
95652: IFFALSE 95664
// your_side := 0 else
95654: LD_ADDR_OWVAR 2
95658: PUSH
95659: LD_INT 0
95661: ST_TO_ADDR
95662: GO 95678
// your_side := your_side + 1 ;
95664: LD_ADDR_OWVAR 2
95668: PUSH
95669: LD_OWVAR 2
95673: PUSH
95674: LD_INT 1
95676: PLUS
95677: ST_TO_ADDR
// end ;
95678: LD_VAR 0 1
95682: RET
// export function hHackChangeUnitSide ; var i , j ; begin
95683: LD_INT 0
95685: PPUSH
95686: PPUSH
95687: PPUSH
// for i in all_units do
95688: LD_ADDR_VAR 0 2
95692: PUSH
95693: LD_OWVAR 3
95697: PUSH
95698: FOR_IN
95699: IFFALSE 95777
// if IsSelected ( i ) then
95701: LD_VAR 0 2
95705: PPUSH
95706: CALL_OW 306
95710: IFFALSE 95775
// begin j := GetSide ( i ) ;
95712: LD_ADDR_VAR 0 3
95716: PUSH
95717: LD_VAR 0 2
95721: PPUSH
95722: CALL_OW 255
95726: ST_TO_ADDR
// if j = 8 then
95727: LD_VAR 0 3
95731: PUSH
95732: LD_INT 8
95734: EQUAL
95735: IFFALSE 95747
// j := 0 else
95737: LD_ADDR_VAR 0 3
95741: PUSH
95742: LD_INT 0
95744: ST_TO_ADDR
95745: GO 95761
// j := j + 1 ;
95747: LD_ADDR_VAR 0 3
95751: PUSH
95752: LD_VAR 0 3
95756: PUSH
95757: LD_INT 1
95759: PLUS
95760: ST_TO_ADDR
// SetSide ( i , j ) ;
95761: LD_VAR 0 2
95765: PPUSH
95766: LD_VAR 0 3
95770: PPUSH
95771: CALL_OW 235
// end ;
95775: GO 95698
95777: POP
95778: POP
// end ;
95779: LD_VAR 0 1
95783: RET
// export function hHackFog ; begin
95784: LD_INT 0
95786: PPUSH
// FogOff ( true ) ;
95787: LD_INT 1
95789: PPUSH
95790: CALL_OW 344
// end ;
95794: LD_VAR 0 1
95798: RET
// export function hHackTeleport ( unit , x , y ) ; begin
95799: LD_INT 0
95801: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
95802: LD_VAR 0 1
95806: PPUSH
95807: LD_VAR 0 2
95811: PPUSH
95812: LD_VAR 0 3
95816: PPUSH
95817: LD_INT 1
95819: PPUSH
95820: LD_INT 1
95822: PPUSH
95823: CALL_OW 483
// CenterOnXY ( x , y ) ;
95827: LD_VAR 0 2
95831: PPUSH
95832: LD_VAR 0 3
95836: PPUSH
95837: CALL_OW 84
// end ;
95841: LD_VAR 0 4
95845: RET
