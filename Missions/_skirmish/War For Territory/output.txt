// starting begin ResetFog ;
   0: CALL_OW 335
// InitVariables ;
   4: CALL 139 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// begin FogOff ( 1 ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 344
// end ; PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , gensher_ape , 0 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 5
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: LD_INT 7
  44: PPUSH
  45: LD_INT 0
  47: PPUSH
  48: CALL 35718 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , powell_ape , 0 ) ;
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 5
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 0
  69: PPUSH
  70: LD_INT 0
  72: PPUSH
  73: LD_INT 4
  75: PPUSH
  76: LD_INT 0
  78: PPUSH
  79: CALL 35718 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , popov_ape , 0 ) ;
  83: LD_INT 0
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: LD_INT 5
  91: PPUSH
  92: LD_INT 0
  94: PPUSH
  95: LD_INT 0
  97: PPUSH
  98: LD_INT 0
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: LD_INT 11
 106: PPUSH
 107: LD_INT 0
 109: PPUSH
 110: CALL 35718 0 9
// PrepareGensher ;
 114: CALL 1168 0 0
// PreparePopov ;
 118: CALL 1921 0 0
// PreparePowell ;
 122: CALL 316 0 0
// MC_Start ( ) ;
 126: CALL 41460 0 0
// game_speed := 6 ;
 130: LD_ADDR_OWVAR 65
 134: PUSH
 135: LD_INT 6
 137: ST_TO_ADDR
// end ;
 138: END
// export debug , game ; function InitVariables ; begin
 139: LD_INT 0
 141: PPUSH
// debug := 1 ;
 142: LD_ADDR_EXP 1
 146: PUSH
 147: LD_INT 1
 149: ST_TO_ADDR
// game := true ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// end ;
 158: LD_VAR 0 1
 162: RET
// export function CustomInitMacro ; begin
 163: LD_INT 0
 165: PPUSH
// InitMC_Gensher ( ) ;
 166: CALL 1298 0 0
// InitMC_Powell ( ) ;
 170: CALL 446 0 0
// InitMC_Popov ( ) ;
 174: CALL 2051 0 0
// end ;
 178: LD_VAR 0 1
 182: RET
// every 0 0$10 do var cr , time , i ;
 183: GO 185
 185: DISABLE
 186: LD_INT 0
 188: PPUSH
 189: PPUSH
 190: PPUSH
// begin time := 0 0$30 ;
 191: LD_ADDR_VAR 0 2
 195: PUSH
 196: LD_INT 1050
 198: ST_TO_ADDR
// repeat wait ( time ) ;
 199: LD_VAR 0 2
 203: PPUSH
 204: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
 208: LD_ADDR_VAR 0 1
 212: PUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_INT 5
 218: PPUSH
 219: CALL_OW 12
 223: ST_TO_ADDR
// for i in [ powell_crates , gensher_crates , popov_crates ] do
 224: LD_ADDR_VAR 0 3
 228: PUSH
 229: LD_INT 5
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: LD_INT 12
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: FOR_IN
 244: IFFALSE 272
// begin CreateCratesArea ( cr , i , true ) ;
 246: LD_VAR 0 1
 250: PPUSH
 251: LD_VAR 0 3
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: CALL_OW 55
// wait ( 0 0$5 ) ;
 263: LD_INT 175
 265: PPUSH
 266: CALL_OW 67
// end ;
 270: GO 243
 272: POP
 273: POP
// time := time + 0 0$2 ;
 274: LD_ADDR_VAR 0 2
 278: PUSH
 279: LD_VAR 0 2
 283: PUSH
 284: LD_INT 70
 286: PLUS
 287: ST_TO_ADDR
// if time > 1 1$00 then
 288: LD_VAR 0 2
 292: PUSH
 293: LD_INT 2100
 295: GREATER
 296: IFFALSE 306
// time := 0 0$25 ;
 298: LD_ADDR_VAR 0 2
 302: PUSH
 303: LD_INT 875
 305: ST_TO_ADDR
// until not game ;
 306: LD_EXP 2
 310: NOT
 311: IFFALSE 199
// end ; end_of_file
 313: PPOPN 3
 315: END
// export Powell , powell_side ; export function PreparePowell ; var i , tmp ; begin
 316: LD_INT 0
 318: PPUSH
 319: PPUSH
 320: PPUSH
// powell_side := 4 ;
 321: LD_ADDR_EXP 4
 325: PUSH
 326: LD_INT 4
 328: ST_TO_ADDR
// uc_side := powell_side ;
 329: LD_ADDR_OWVAR 20
 333: PUSH
 334: LD_EXP 4
 338: ST_TO_ADDR
// uc_nation := 1 ;
 339: LD_ADDR_OWVAR 21
 343: PUSH
 344: LD_INT 1
 346: ST_TO_ADDR
// tmp := PrepareBase ( us_depot , powell_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1000 , 100 , 0 ] , [ 4 , 4 , 4 , 4 ] ) ;
 347: LD_ADDR_VAR 0 3
 351: PUSH
 352: LD_INT 4
 354: PPUSH
 355: LD_INT 1
 357: PPUSH
 358: LD_STRING 
 360: PPUSH
 361: LD_INT 8
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: LD_INT 6
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: LD_OWVAR 67
 379: ARRAY
 380: PPUSH
 381: LD_INT 1000
 383: PUSH
 384: LD_INT 100
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PPUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: LD_INT 4
 403: PUSH
 404: LD_INT 4
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL 11336 0 6
 417: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , tmp ) ;
 418: LD_ADDR_EXP 11
 422: PUSH
 423: LD_EXP 11
 427: PPUSH
 428: LD_INT 1
 430: PPUSH
 431: LD_VAR 0 3
 435: PPUSH
 436: CALL_OW 1
 440: ST_TO_ADDR
// end ;
 441: LD_VAR 0 1
 445: RET
// export function InitMC_Powell ( ) ; begin
 446: LD_INT 0
 448: PPUSH
// MC_SetScanArea ( 1 , powell_base ) ;
 449: LD_INT 1
 451: PPUSH
 452: LD_INT 1
 454: PPUSH
 455: CALL 64300 0 2
// MC_SetParkingArea ( 1 , powell_parking ) ;
 459: LD_INT 1
 461: PPUSH
 462: LD_INT 6
 464: PPUSH
 465: CALL 64244 0 2
// MC_SetDepositsXY ( 1 , [ [ 167 , 102 , 0 ] , [ 173 , 83 , 1 ] , [ 171 , 141 , 0 ] , [ 178 , 148 , 1 ] ] ) ;
 469: LD_INT 1
 471: PPUSH
 472: LD_INT 167
 474: PUSH
 475: LD_INT 102
 477: PUSH
 478: LD_INT 0
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 173
 488: PUSH
 489: LD_INT 83
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 171
 502: PUSH
 503: LD_INT 141
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 178
 516: PUSH
 517: LD_INT 148
 519: PUSH
 520: LD_INT 1
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PPUSH
 534: CALL 63303 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
 538: LD_INT 1
 540: PPUSH
 541: LD_INT 11
 543: PUSH
 544: LD_INT 6
 546: PUSH
 547: LD_INT 7
 549: PUSH
 550: LD_INT 9
 552: PUSH
 553: LD_INT 10
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: PPUSH
 563: CALL 64132 0 2
// MC_SetCratesArea ( 1 , powell_crates ) ;
 567: LD_INT 1
 569: PPUSH
 570: LD_INT 5
 572: PPUSH
 573: CALL 63814 0 2
// MC_SetTame ( 1 , powell_ape ) ;
 577: LD_INT 1
 579: PPUSH
 580: LD_INT 4
 582: PPUSH
 583: CALL 63545 0 2
// MC_SetDefenderLimit ( 1 , 4 ) ;
 587: LD_INT 1
 589: PPUSH
 590: LD_INT 4
 592: PPUSH
 593: CALL 63164 0 2
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_morphling , engine_combustion , control_remote , us_heavy_gun ] ] ) ;
 597: LD_INT 1
 599: PPUSH
 600: LD_INT 3
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: LD_INT 2
 608: PUSH
 609: LD_INT 5
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 4
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 2
 626: PUSH
 627: LD_INT 6
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_INT 4
 638: PUSH
 639: LD_INT 1
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: LD_INT 7
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 6
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: PUSH
 672: LD_INT 5
 674: PUSH
 675: LD_INT 1
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: LD_INT 6
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL 62979 0 2
// MC_SetBuildingList ( 1 , [ [ b_lab , 200 , 111 , 4 ] , [ b_oil_mine , 167 , 102 , 0 ] , [ b_armoury , 178 , 117 , 2 ] , [ b_workshop , 197 , 144 , 4 ] , [ b_solar_power , 206 , 124 , 3 ] , [ b_solar_power , 209 , 128 , 3 ] , [ b_solar_power , 211 , 132 , 3 ] , [ b_siberite_mine , 173 , 83 , 3 ] , [ b_lab , 186 , 103 , 2 ] , [ b_turret , 173 , 99 , 2 ] , [ b_bunker , 174 , 102 , 2 ] , [ b_bunker , 178 , 100 , 2 ] , [ b_turret , 174 , 108 , 1 ] , [ b_turret , 182 , 122 , 1 ] , [ b_control_tower , 194 , 124 , 5 ] , [ b_siberite_power , 204 , 133 , 3 ] , [ b_solar_power , 201 , 133 , 3 ] , [ b_siberite_power , 199 , 119 , 5 ] , [ b_turret , 184 , 141 , 1 ] , [ b_turret , 183 , 131 , 2 ] ] ) ;
 701: LD_INT 1
 703: PPUSH
 704: LD_INT 6
 706: PUSH
 707: LD_INT 200
 709: PUSH
 710: LD_INT 111
 712: PUSH
 713: LD_INT 4
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: PUSH
 722: LD_INT 29
 724: PUSH
 725: LD_INT 167
 727: PUSH
 728: LD_INT 102
 730: PUSH
 731: LD_INT 0
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 4
 742: PUSH
 743: LD_INT 178
 745: PUSH
 746: LD_INT 117
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: LD_INT 197
 763: PUSH
 764: LD_INT 144
 766: PUSH
 767: LD_INT 4
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 27
 778: PUSH
 779: LD_INT 206
 781: PUSH
 782: LD_INT 124
 784: PUSH
 785: LD_INT 3
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 27
 796: PUSH
 797: LD_INT 209
 799: PUSH
 800: LD_INT 128
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: LD_INT 27
 814: PUSH
 815: LD_INT 211
 817: PUSH
 818: LD_INT 132
 820: PUSH
 821: LD_INT 3
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 30
 832: PUSH
 833: LD_INT 173
 835: PUSH
 836: LD_INT 83
 838: PUSH
 839: LD_INT 3
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: PUSH
 848: LD_INT 6
 850: PUSH
 851: LD_INT 186
 853: PUSH
 854: LD_INT 103
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 33
 868: PUSH
 869: LD_INT 173
 871: PUSH
 872: LD_INT 99
 874: PUSH
 875: LD_INT 2
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 32
 886: PUSH
 887: LD_INT 174
 889: PUSH
 890: LD_INT 102
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 32
 904: PUSH
 905: LD_INT 178
 907: PUSH
 908: LD_INT 100
 910: PUSH
 911: LD_INT 2
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_INT 33
 922: PUSH
 923: LD_INT 174
 925: PUSH
 926: LD_INT 108
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: LD_INT 33
 940: PUSH
 941: LD_INT 182
 943: PUSH
 944: LD_INT 122
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: PUSH
 956: LD_INT 36
 958: PUSH
 959: LD_INT 194
 961: PUSH
 962: LD_INT 124
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 28
 976: PUSH
 977: LD_INT 204
 979: PUSH
 980: LD_INT 133
 982: PUSH
 983: LD_INT 3
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 27
 994: PUSH
 995: LD_INT 201
 997: PUSH
 998: LD_INT 133
1000: PUSH
1001: LD_INT 3
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 28
1012: PUSH
1013: LD_INT 199
1015: PUSH
1016: LD_INT 119
1018: PUSH
1019: LD_INT 5
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 33
1030: PUSH
1031: LD_INT 184
1033: PUSH
1034: LD_INT 141
1036: PUSH
1037: LD_INT 1
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 33
1048: PUSH
1049: LD_INT 183
1051: PUSH
1052: LD_INT 131
1054: PUSH
1055: LD_INT 2
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PPUSH
1086: CALL 62871 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1090: LD_INT 1
1092: PPUSH
1093: LD_INT 10
1095: PUSH
1096: LD_INT 15
1098: PUSH
1099: LD_INT 12
1101: PUSH
1102: LD_INT 11
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PPUSH
1111: CALL 63721 0 2
// MC_SetFactoryExtension ( 1 , 197 , 144 , 4 , [ b_ext_noncombat , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1115: LD_INT 1
1117: PPUSH
1118: LD_INT 197
1120: PPUSH
1121: LD_INT 144
1123: PPUSH
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 19
1129: PUSH
1130: LD_INT 16
1132: PUSH
1133: LD_INT 17
1135: PUSH
1136: LD_INT 18
1138: PUSH
1139: LD_INT 22
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL 63926 0 5
// MC_SetUpgradeBuilding ( 1 , b_depot ) ;
1153: LD_INT 1
1155: PPUSH
1156: LD_INT 0
1158: PPUSH
1159: CALL 63594 0 2
// end ; end_of_file
1163: LD_VAR 0 1
1167: RET
// export Gensher , gensher_side ; export function PrepareGensher ; var i , tmp ; begin
1168: LD_INT 0
1170: PPUSH
1171: PPUSH
1172: PPUSH
// gensher_side := 2 ;
1173: LD_ADDR_EXP 6
1177: PUSH
1178: LD_INT 2
1180: ST_TO_ADDR
// uc_side := gensher_side ;
1181: LD_ADDR_OWVAR 20
1185: PUSH
1186: LD_EXP 6
1190: ST_TO_ADDR
// uc_nation := 2 ;
1191: LD_ADDR_OWVAR 21
1195: PUSH
1196: LD_INT 2
1198: ST_TO_ADDR
// tmp := PrepareBase ( ar_depot , gensher_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
1199: LD_ADDR_VAR 0 3
1203: PUSH
1204: LD_INT 7
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_STRING 
1212: PPUSH
1213: LD_INT 8
1215: PUSH
1216: LD_INT 7
1218: PUSH
1219: LD_INT 6
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_OWVAR 67
1231: ARRAY
1232: PPUSH
1233: LD_INT 1500
1235: PUSH
1236: LD_INT 300
1238: PUSH
1239: LD_INT 30
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PPUSH
1247: LD_INT 4
1249: PUSH
1250: LD_INT 4
1252: PUSH
1253: LD_INT 4
1255: PUSH
1256: LD_INT 4
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL 11336 0 6
1269: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , tmp ) ;
1270: LD_ADDR_EXP 11
1274: PUSH
1275: LD_EXP 11
1279: PPUSH
1280: LD_INT 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 1
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 1
1297: RET
// export function InitMC_Gensher ( ) ; begin
1298: LD_INT 0
1300: PPUSH
// MC_SetScanArea ( 2 , gensher_base ) ;
1301: LD_INT 2
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: CALL 64300 0 2
// MC_SetParkingArea ( 2 , gensher_parking ) ;
1311: LD_INT 2
1313: PPUSH
1314: LD_INT 9
1316: PPUSH
1317: CALL 64244 0 2
// MC_SetDepositsXY ( 2 , [ [ 56 , 23 , 0 ] , [ 52 , 40 , 1 ] ] ) ;
1321: LD_INT 2
1323: PPUSH
1324: LD_INT 56
1326: PUSH
1327: LD_INT 23
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 52
1340: PUSH
1341: LD_INT 40
1343: PUSH
1344: LD_INT 1
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PPUSH
1356: CALL 63303 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ar_gun , ar_rocket_launcher ] ) ;
1360: LD_INT 2
1362: PPUSH
1363: LD_INT 27
1365: PUSH
1366: LD_INT 28
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL 64132 0 2
// MC_SetCratesArea ( 2 , gensher_crates ) ;
1377: LD_INT 2
1379: PPUSH
1380: LD_INT 8
1382: PPUSH
1383: CALL 63814 0 2
// MC_SetTame ( 2 , gensher_ape ) ;
1387: LD_INT 2
1389: PPUSH
1390: LD_INT 7
1392: PPUSH
1393: CALL 63545 0 2
// MC_SetDefenderLimit ( 2 , 4 ) ;
1397: LD_INT 2
1399: PPUSH
1400: LD_INT 4
1402: PPUSH
1403: CALL 63164 0 2
// MC_SetProduceList ( 2 , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ) ;
1407: LD_INT 2
1409: PPUSH
1410: LD_INT 13
1412: PUSH
1413: LD_INT 2
1415: PUSH
1416: LD_INT 1
1418: PUSH
1419: LD_INT 31
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 13
1430: PUSH
1431: LD_INT 2
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 31
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 14
1448: PUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 2
1454: PUSH
1455: LD_INT 27
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 14
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: LD_INT 2
1472: PUSH
1473: LD_INT 27
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 14
1484: PUSH
1485: LD_INT 1
1487: PUSH
1488: LD_INT 2
1490: PUSH
1491: LD_INT 28
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 14
1502: PUSH
1503: LD_INT 1
1505: PUSH
1506: LD_INT 1
1508: PUSH
1509: LD_INT 26
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL 62979 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 13 , 18 , 1 ] , [ b_lab , 17 , 27 , 1 ] , [ b_solar_power , 17 , 3 , 0 ] , [ b_oil_mine , 56 , 23 , 0 ] , [ b_armoury , 42 , 29 , 5 ] , [ b_workshop , 11 , 7 , 2 ] , [ b_solar_power , 20 , 3 , 0 ] , [ b_solar_power , 23 , 3 , 0 ] , [ b_solar_power , 26 , 3 , 0 ] , [ b_bunker , 27 , 44 , 5 ] , [ b_bunker , 41 , 41 , 5 ] , [ b_bunker , 45 , 24 , 5 ] , [ b_bunker , 48 , 19 , 5 ] , [ b_bunker , 41 , 3 , 4 ] , [ b_armoury , 44 , 9 , 4 ] , [ b_siberite_mine , 52 , 40 , 3 ] ] ) ;
1530: LD_INT 2
1532: PPUSH
1533: LD_INT 6
1535: PUSH
1536: LD_INT 13
1538: PUSH
1539: LD_INT 18
1541: PUSH
1542: LD_INT 1
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: PUSH
1551: LD_INT 6
1553: PUSH
1554: LD_INT 17
1556: PUSH
1557: LD_INT 27
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 27
1571: PUSH
1572: LD_INT 17
1574: PUSH
1575: LD_INT 3
1577: PUSH
1578: LD_INT 0
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 29
1589: PUSH
1590: LD_INT 56
1592: PUSH
1593: LD_INT 23
1595: PUSH
1596: LD_INT 0
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 4
1607: PUSH
1608: LD_INT 42
1610: PUSH
1611: LD_INT 29
1613: PUSH
1614: LD_INT 5
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: LD_INT 11
1628: PUSH
1629: LD_INT 7
1631: PUSH
1632: LD_INT 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 27
1643: PUSH
1644: LD_INT 20
1646: PUSH
1647: LD_INT 3
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 27
1661: PUSH
1662: LD_INT 23
1664: PUSH
1665: LD_INT 3
1667: PUSH
1668: LD_INT 0
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 27
1679: PUSH
1680: LD_INT 26
1682: PUSH
1683: LD_INT 3
1685: PUSH
1686: LD_INT 0
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: PUSH
1695: LD_INT 32
1697: PUSH
1698: LD_INT 27
1700: PUSH
1701: LD_INT 44
1703: PUSH
1704: LD_INT 5
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: LD_INT 32
1715: PUSH
1716: LD_INT 41
1718: PUSH
1719: LD_INT 41
1721: PUSH
1722: LD_INT 5
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 32
1733: PUSH
1734: LD_INT 45
1736: PUSH
1737: LD_INT 24
1739: PUSH
1740: LD_INT 5
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 32
1751: PUSH
1752: LD_INT 48
1754: PUSH
1755: LD_INT 19
1757: PUSH
1758: LD_INT 5
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: LD_INT 41
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: LD_INT 4
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 4
1787: PUSH
1788: LD_INT 44
1790: PUSH
1791: LD_INT 9
1793: PUSH
1794: LD_INT 4
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 30
1805: PUSH
1806: LD_INT 52
1808: PUSH
1809: LD_INT 40
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL 62871 0 2
// MC_SetLabKind ( 2 , [ b_lab_weapon , b_lab_opto , b_lab_biological , b_lab_siberium ] ) ;
1843: LD_INT 2
1845: PPUSH
1846: LD_INT 10
1848: PUSH
1849: LD_INT 15
1851: PUSH
1852: LD_INT 13
1854: PUSH
1855: LD_INT 11
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL 63721 0 2
// MC_SetFactoryExtension ( 2 , 11 , 7 , 2 , [ b_ext_stitch , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_radio ] ) ;
1868: LD_INT 2
1870: PPUSH
1871: LD_INT 11
1873: PPUSH
1874: LD_INT 7
1876: PPUSH
1877: LD_INT 2
1879: PPUSH
1880: LD_INT 23
1882: PUSH
1883: LD_INT 16
1885: PUSH
1886: LD_INT 17
1888: PUSH
1889: LD_INT 18
1891: PUSH
1892: LD_INT 22
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PPUSH
1902: CALL 63926 0 5
// MC_SetUpgradeBuilding ( 2 , b_depot ) ;
1906: LD_INT 2
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL 63594 0 2
// end ; end_of_file
1916: LD_VAR 0 1
1920: RET
// export Popov , popov_side ; export function PreparePopov ; var i , tmp ; begin
1921: LD_INT 0
1923: PPUSH
1924: PPUSH
1925: PPUSH
// popov_side := 3 ;
1926: LD_ADDR_EXP 8
1930: PUSH
1931: LD_INT 3
1933: ST_TO_ADDR
// uc_side := popov_side ;
1934: LD_ADDR_OWVAR 20
1938: PUSH
1939: LD_EXP 8
1943: ST_TO_ADDR
// uc_nation := 3 ;
1944: LD_ADDR_OWVAR 21
1948: PUSH
1949: LD_INT 3
1951: ST_TO_ADDR
// tmp := PrepareBase ( ru_depot , popov_base ,  , [ 8 , 7 , 6 ] [ Difficulty ] , [ 1500 , 300 , 30 ] , [ 4 , 4 , 4 , 4 ] ) ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: LD_INT 9
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_STRING 
1965: PPUSH
1966: LD_INT 8
1968: PUSH
1969: LD_INT 7
1971: PUSH
1972: LD_INT 6
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_OWVAR 67
1984: ARRAY
1985: PPUSH
1986: LD_INT 1500
1988: PUSH
1989: LD_INT 300
1991: PUSH
1992: LD_INT 30
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: LIST
1999: PPUSH
2000: LD_INT 4
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 4
2008: PUSH
2009: LD_INT 4
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: PPUSH
2018: CALL 11336 0 6
2022: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 3 , tmp ) ;
2023: LD_ADDR_EXP 11
2027: PUSH
2028: LD_EXP 11
2032: PPUSH
2033: LD_INT 3
2035: PPUSH
2036: LD_VAR 0 3
2040: PPUSH
2041: CALL_OW 1
2045: ST_TO_ADDR
// end ;
2046: LD_VAR 0 1
2050: RET
// export function InitMC_Popov ( ) ; begin
2051: LD_INT 0
2053: PPUSH
// MC_SetScanArea ( 3 , popov_base ) ;
2054: LD_INT 3
2056: PPUSH
2057: LD_INT 3
2059: PPUSH
2060: CALL 64300 0 2
// MC_SetParkingArea ( 3 , popov_parking ) ;
2064: LD_INT 3
2066: PPUSH
2067: LD_INT 10
2069: PPUSH
2070: CALL 64244 0 2
// MC_SetDepositsXY ( 3 , [ [ 86 , 118 , 0 ] , [ 123 , 151 , 1 ] , [ 106 , 113 , 0 ] ] ) ;
2074: LD_INT 3
2076: PPUSH
2077: LD_INT 86
2079: PUSH
2080: LD_INT 118
2082: PUSH
2083: LD_INT 0
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 123
2093: PUSH
2094: LD_INT 151
2096: PUSH
2097: LD_INT 1
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 106
2107: PUSH
2108: LD_INT 113
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: LIST
2123: PPUSH
2124: CALL 63303 0 2
// MC_SetAllowedTurretWeapons ( 3 , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ) ;
2128: LD_INT 3
2130: PPUSH
2131: LD_INT 46
2133: PUSH
2134: LD_INT 45
2136: PUSH
2137: LD_INT 47
2139: PUSH
2140: LD_INT 49
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL 64132 0 2
// MC_SetCratesArea ( 3 , popov_crates ) ;
2153: LD_INT 3
2155: PPUSH
2156: LD_INT 12
2158: PPUSH
2159: CALL 63814 0 2
// MC_SetTame ( 3 , popov_ape ) ;
2163: LD_INT 3
2165: PPUSH
2166: LD_INT 11
2168: PPUSH
2169: CALL 63545 0 2
// MC_SetDefenderLimit ( 3 , 4 ) ;
2173: LD_INT 3
2175: PPUSH
2176: LD_INT 4
2178: PPUSH
2179: CALL 63164 0 2
// MC_SetProduceList ( 3 , [ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] ] ) ;
2183: LD_INT 3
2185: PPUSH
2186: LD_INT 23
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 1
2194: PUSH
2195: LD_INT 44
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 23
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: LD_INT 3
2212: PUSH
2213: LD_INT 45
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: PUSH
2222: LD_INT 21
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: LD_INT 3
2230: PUSH
2231: LD_INT 43
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 21
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: LD_INT 3
2248: PUSH
2249: LD_INT 45
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL 62979 0 2
// MC_SetBuildingList ( 3 , [ [ b_lab , 76 , 145 , 1 ] , [ b_lab , 81 , 155 , 1 ] , [ b_oil_power , 87 , 144 , 0 ] , [ b_oil_mine , 86 , 118 , 0 ] , [ b_oil_mine , 106 , 113 , 0 ] , [ b_oil_power , 87 , 147 , 1 ] , [ b_workshop , 94 , 161 , 0 ] , [ b_armoury , 103 , 147 , 3 ] , [ b_oil_power , 96 , 152 , 0 ] , [ b_oil_power , 96 , 149 , 3 ] , [ b_bunker , 109 , 142 , 3 ] , [ b_bunker , 112 , 148 , 3 ] , [ b_turret , 120 , 159 , 4 ] , [ b_turret , 122 , 163 , 4 ] , [ b_turret , 123 , 167 , 4 ] , [ b_turret , 59 , 111 , 3 ] , [ b_turret , 65 , 111 , 3 ] , [ b_turret , 76 , 117 , 3 ] , [ b_turret , 80 , 119 , 3 ] , [ b_turret , 87 , 125 , 3 ] , [ b_armoury , 92 , 129 , 3 ] , [ b_siberite_power , 85 , 165 , 0 ] , [ b_siberite_power , 83 , 161 , 4 ] , [ b_siberite_power , 91 , 166 , 3 ] , [ b_siberite_power , 102 , 166 , 2 ] , [ b_teleport , 91 , 147 , 3 ] ] ) ;
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 6
2273: PUSH
2274: LD_INT 76
2276: PUSH
2277: LD_INT 145
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 6
2291: PUSH
2292: LD_INT 81
2294: PUSH
2295: LD_INT 155
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 26
2309: PUSH
2310: LD_INT 87
2312: PUSH
2313: LD_INT 144
2315: PUSH
2316: LD_INT 0
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 29
2327: PUSH
2328: LD_INT 86
2330: PUSH
2331: LD_INT 118
2333: PUSH
2334: LD_INT 0
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 29
2345: PUSH
2346: LD_INT 106
2348: PUSH
2349: LD_INT 113
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 26
2363: PUSH
2364: LD_INT 87
2366: PUSH
2367: LD_INT 147
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: LD_INT 94
2384: PUSH
2385: LD_INT 161
2387: PUSH
2388: LD_INT 0
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 4
2399: PUSH
2400: LD_INT 103
2402: PUSH
2403: LD_INT 147
2405: PUSH
2406: LD_INT 3
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 26
2417: PUSH
2418: LD_INT 96
2420: PUSH
2421: LD_INT 152
2423: PUSH
2424: LD_INT 0
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 26
2435: PUSH
2436: LD_INT 96
2438: PUSH
2439: LD_INT 149
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 32
2453: PUSH
2454: LD_INT 109
2456: PUSH
2457: LD_INT 142
2459: PUSH
2460: LD_INT 3
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 32
2471: PUSH
2472: LD_INT 112
2474: PUSH
2475: LD_INT 148
2477: PUSH
2478: LD_INT 3
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 33
2489: PUSH
2490: LD_INT 120
2492: PUSH
2493: LD_INT 159
2495: PUSH
2496: LD_INT 4
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: PUSH
2505: LD_INT 33
2507: PUSH
2508: LD_INT 122
2510: PUSH
2511: LD_INT 163
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 33
2525: PUSH
2526: LD_INT 123
2528: PUSH
2529: LD_INT 167
2531: PUSH
2532: LD_INT 4
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 33
2543: PUSH
2544: LD_INT 59
2546: PUSH
2547: LD_INT 111
2549: PUSH
2550: LD_INT 3
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 33
2561: PUSH
2562: LD_INT 65
2564: PUSH
2565: LD_INT 111
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 33
2579: PUSH
2580: LD_INT 76
2582: PUSH
2583: LD_INT 117
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_INT 33
2597: PUSH
2598: LD_INT 80
2600: PUSH
2601: LD_INT 119
2603: PUSH
2604: LD_INT 3
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 33
2615: PUSH
2616: LD_INT 87
2618: PUSH
2619: LD_INT 125
2621: PUSH
2622: LD_INT 3
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 4
2633: PUSH
2634: LD_INT 92
2636: PUSH
2637: LD_INT 129
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: PUSH
2649: LD_INT 28
2651: PUSH
2652: LD_INT 85
2654: PUSH
2655: LD_INT 165
2657: PUSH
2658: LD_INT 0
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 28
2669: PUSH
2670: LD_INT 83
2672: PUSH
2673: LD_INT 161
2675: PUSH
2676: LD_INT 4
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: PUSH
2685: LD_INT 28
2687: PUSH
2688: LD_INT 91
2690: PUSH
2691: LD_INT 166
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 28
2705: PUSH
2706: LD_INT 102
2708: PUSH
2709: LD_INT 166
2711: PUSH
2712: LD_INT 2
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 34
2723: PUSH
2724: LD_INT 91
2726: PUSH
2727: LD_INT 147
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL 62871 0 2
// MC_SetLabKind ( 3 , [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_siberium ] ) ;
2771: LD_INT 3
2773: PPUSH
2774: LD_INT 10
2776: PUSH
2777: LD_INT 12
2779: PUSH
2780: LD_INT 14
2782: PUSH
2783: LD_INT 11
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL 63721 0 2
// MC_SetFactoryExtension ( 3 , 94 , 161 , 0 , [ b_ext_noncombat , b_ext_gun , b_ext_rocket , b_ext_computer , b_ext_siberium ] ) ;
2796: LD_INT 3
2798: PPUSH
2799: LD_INT 94
2801: PPUSH
2802: LD_INT 161
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: LD_INT 19
2810: PUSH
2811: LD_INT 17
2813: PUSH
2814: LD_INT 18
2816: PUSH
2817: LD_INT 24
2819: PUSH
2820: LD_INT 21
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL 63926 0 5
// MC_SetUpgradeBuilding ( 3 , b_depot ) ;
2834: LD_INT 3
2836: PPUSH
2837: LD_INT 0
2839: PPUSH
2840: CALL 63594 0 2
// end ; end_of_file end_of_file end_of_file
2844: LD_VAR 0 1
2848: RET
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
2849: LD_VAR 0 1
2853: PPUSH
2854: CALL 66419 0 1
// end ;
2858: PPOPN 1
2860: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
2861: LD_VAR 0 1
2865: PPUSH
2866: LD_VAR 0 2
2870: PPUSH
2871: CALL 68753 0 2
// end ;
2875: PPOPN 2
2877: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL 67821 0 1
// end ;
2887: PPOPN 1
2889: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
2890: LD_VAR 0 1
2894: PPUSH
2895: CALL 68062 0 1
// end ;
2899: PPOPN 1
2901: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
2902: LD_VAR 0 1
2906: PPUSH
2907: LD_VAR 0 2
2911: PPUSH
2912: CALL 66115 0 2
// end ;
2916: PPOPN 2
2918: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
2919: LD_VAR 0 1
2923: PPUSH
2924: LD_VAR 0 2
2928: PPUSH
2929: LD_VAR 0 3
2933: PPUSH
2934: LD_VAR 0 4
2938: PPUSH
2939: LD_VAR 0 5
2943: PPUSH
2944: CALL 65735 0 5
// end ;
2948: PPOPN 5
2950: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
2951: LD_VAR 0 1
2955: PPUSH
2956: LD_VAR 0 2
2960: PPUSH
2961: CALL 65331 0 2
// end ;
2965: PPOPN 2
2967: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
2968: LD_VAR 0 1
2972: PPUSH
2973: LD_VAR 0 2
2977: PPUSH
2978: LD_VAR 0 3
2982: PPUSH
2983: LD_VAR 0 4
2987: PPUSH
2988: CALL 65169 0 4
// end ;
2992: PPOPN 4
2994: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
2995: LD_VAR 0 1
2999: PPUSH
3000: LD_VAR 0 2
3004: PPUSH
3005: LD_VAR 0 3
3009: PPUSH
3010: CALL 64944 0 3
// end ;
3014: PPOPN 3
3016: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
3017: LD_VAR 0 1
3021: PPUSH
3022: LD_VAR 0 2
3026: PPUSH
3027: CALL 64829 0 2
// end ;
3031: PPOPN 2
3033: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
3034: LD_VAR 0 1
3038: PPUSH
3039: LD_VAR 0 2
3043: PPUSH
3044: CALL 69014 0 2
// end ;
3048: PPOPN 2
3050: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
3051: LD_VAR 0 1
3055: PPUSH
3056: LD_VAR 0 2
3060: PPUSH
3061: LD_VAR 0 3
3065: PPUSH
3066: LD_VAR 0 4
3070: PPUSH
3071: CALL 69230 0 4
// end ;
3075: PPOPN 4
3077: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
3078: LD_VAR 0 1
3082: PPUSH
3083: LD_VAR 0 2
3087: PPUSH
3088: CALL 64638 0 2
// end ;
3092: PPOPN 2
3094: END
// export function CustomEvent ( event ) ; begin
3095: LD_INT 0
3097: PPUSH
// end ; end_of_file
3098: LD_VAR 0 2
3102: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
// if exist_mode then
3107: LD_VAR 0 2
3111: IFFALSE 3136
// unit := CreateCharacter ( prefix & ident ) else
3113: LD_ADDR_VAR 0 5
3117: PUSH
3118: LD_VAR 0 3
3122: PUSH
3123: LD_VAR 0 1
3127: STR
3128: PPUSH
3129: CALL_OW 34
3133: ST_TO_ADDR
3134: GO 3151
// unit := NewCharacter ( ident ) ;
3136: LD_ADDR_VAR 0 5
3140: PUSH
3141: LD_VAR 0 1
3145: PPUSH
3146: CALL_OW 25
3150: ST_TO_ADDR
// result := unit ;
3151: LD_ADDR_VAR 0 4
3155: PUSH
3156: LD_VAR 0 5
3160: ST_TO_ADDR
// end ;
3161: LD_VAR 0 4
3165: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3166: LD_INT 0
3168: PPUSH
3169: PPUSH
// if not side or not nation then
3170: LD_VAR 0 1
3174: NOT
3175: PUSH
3176: LD_VAR 0 2
3180: NOT
3181: OR
3182: IFFALSE 3186
// exit ;
3184: GO 3950
// case nation of nation_american :
3186: LD_VAR 0 2
3190: PUSH
3191: LD_INT 1
3193: DOUBLE
3194: EQUAL
3195: IFTRUE 3199
3197: GO 3413
3199: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_INT 35
3207: PUSH
3208: LD_INT 45
3210: PUSH
3211: LD_INT 46
3213: PUSH
3214: LD_INT 47
3216: PUSH
3217: LD_INT 82
3219: PUSH
3220: LD_INT 83
3222: PUSH
3223: LD_INT 84
3225: PUSH
3226: LD_INT 85
3228: PUSH
3229: LD_INT 86
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: LD_INT 2
3237: PUSH
3238: LD_INT 6
3240: PUSH
3241: LD_INT 15
3243: PUSH
3244: LD_INT 16
3246: PUSH
3247: LD_INT 7
3249: PUSH
3250: LD_INT 12
3252: PUSH
3253: LD_INT 13
3255: PUSH
3256: LD_INT 10
3258: PUSH
3259: LD_INT 14
3261: PUSH
3262: LD_INT 20
3264: PUSH
3265: LD_INT 21
3267: PUSH
3268: LD_INT 22
3270: PUSH
3271: LD_INT 25
3273: PUSH
3274: LD_INT 32
3276: PUSH
3277: LD_INT 27
3279: PUSH
3280: LD_INT 36
3282: PUSH
3283: LD_INT 69
3285: PUSH
3286: LD_INT 39
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 40
3294: PUSH
3295: LD_INT 48
3297: PUSH
3298: LD_INT 49
3300: PUSH
3301: LD_INT 50
3303: PUSH
3304: LD_INT 51
3306: PUSH
3307: LD_INT 52
3309: PUSH
3310: LD_INT 53
3312: PUSH
3313: LD_INT 54
3315: PUSH
3316: LD_INT 55
3318: PUSH
3319: LD_INT 56
3321: PUSH
3322: LD_INT 57
3324: PUSH
3325: LD_INT 58
3327: PUSH
3328: LD_INT 59
3330: PUSH
3331: LD_INT 60
3333: PUSH
3334: LD_INT 61
3336: PUSH
3337: LD_INT 62
3339: PUSH
3340: LD_INT 80
3342: PUSH
3343: LD_INT 82
3345: PUSH
3346: LD_INT 83
3348: PUSH
3349: LD_INT 84
3351: PUSH
3352: LD_INT 85
3354: PUSH
3355: LD_INT 86
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: ST_TO_ADDR
3411: GO 3874
3413: LD_INT 2
3415: DOUBLE
3416: EQUAL
3417: IFTRUE 3421
3419: GO 3643
3421: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
3422: LD_ADDR_VAR 0 4
3426: PUSH
3427: LD_INT 35
3429: PUSH
3430: LD_INT 45
3432: PUSH
3433: LD_INT 46
3435: PUSH
3436: LD_INT 47
3438: PUSH
3439: LD_INT 82
3441: PUSH
3442: LD_INT 83
3444: PUSH
3445: LD_INT 84
3447: PUSH
3448: LD_INT 85
3450: PUSH
3451: LD_INT 87
3453: PUSH
3454: LD_INT 70
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: LD_INT 11
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: LD_INT 4
3468: PUSH
3469: LD_INT 5
3471: PUSH
3472: LD_INT 6
3474: PUSH
3475: LD_INT 15
3477: PUSH
3478: LD_INT 18
3480: PUSH
3481: LD_INT 7
3483: PUSH
3484: LD_INT 17
3486: PUSH
3487: LD_INT 8
3489: PUSH
3490: LD_INT 20
3492: PUSH
3493: LD_INT 21
3495: PUSH
3496: LD_INT 22
3498: PUSH
3499: LD_INT 72
3501: PUSH
3502: LD_INT 26
3504: PUSH
3505: LD_INT 69
3507: PUSH
3508: LD_INT 39
3510: PUSH
3511: LD_INT 40
3513: PUSH
3514: LD_INT 41
3516: PUSH
3517: LD_INT 42
3519: PUSH
3520: LD_INT 43
3522: PUSH
3523: LD_INT 48
3525: PUSH
3526: LD_INT 49
3528: PUSH
3529: LD_INT 50
3531: PUSH
3532: LD_INT 51
3534: PUSH
3535: LD_INT 52
3537: PUSH
3538: LD_INT 53
3540: PUSH
3541: LD_INT 54
3543: PUSH
3544: LD_INT 55
3546: PUSH
3547: LD_INT 56
3549: PUSH
3550: LD_INT 60
3552: PUSH
3553: LD_INT 61
3555: PUSH
3556: LD_INT 62
3558: PUSH
3559: LD_INT 66
3561: PUSH
3562: LD_INT 67
3564: PUSH
3565: LD_INT 68
3567: PUSH
3568: LD_INT 81
3570: PUSH
3571: LD_INT 82
3573: PUSH
3574: LD_INT 83
3576: PUSH
3577: LD_INT 84
3579: PUSH
3580: LD_INT 85
3582: PUSH
3583: LD_INT 87
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: ST_TO_ADDR
3641: GO 3874
3643: LD_INT 3
3645: DOUBLE
3646: EQUAL
3647: IFTRUE 3651
3649: GO 3873
3651: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3652: LD_ADDR_VAR 0 4
3656: PUSH
3657: LD_INT 46
3659: PUSH
3660: LD_INT 47
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 82
3671: PUSH
3672: LD_INT 83
3674: PUSH
3675: LD_INT 84
3677: PUSH
3678: LD_INT 85
3680: PUSH
3681: LD_INT 86
3683: PUSH
3684: LD_INT 11
3686: PUSH
3687: LD_INT 9
3689: PUSH
3690: LD_INT 20
3692: PUSH
3693: LD_INT 19
3695: PUSH
3696: LD_INT 21
3698: PUSH
3699: LD_INT 24
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 25
3707: PUSH
3708: LD_INT 28
3710: PUSH
3711: LD_INT 29
3713: PUSH
3714: LD_INT 30
3716: PUSH
3717: LD_INT 31
3719: PUSH
3720: LD_INT 37
3722: PUSH
3723: LD_INT 38
3725: PUSH
3726: LD_INT 32
3728: PUSH
3729: LD_INT 27
3731: PUSH
3732: LD_INT 33
3734: PUSH
3735: LD_INT 69
3737: PUSH
3738: LD_INT 39
3740: PUSH
3741: LD_INT 34
3743: PUSH
3744: LD_INT 40
3746: PUSH
3747: LD_INT 71
3749: PUSH
3750: LD_INT 23
3752: PUSH
3753: LD_INT 44
3755: PUSH
3756: LD_INT 48
3758: PUSH
3759: LD_INT 49
3761: PUSH
3762: LD_INT 50
3764: PUSH
3765: LD_INT 51
3767: PUSH
3768: LD_INT 52
3770: PUSH
3771: LD_INT 53
3773: PUSH
3774: LD_INT 54
3776: PUSH
3777: LD_INT 55
3779: PUSH
3780: LD_INT 56
3782: PUSH
3783: LD_INT 57
3785: PUSH
3786: LD_INT 58
3788: PUSH
3789: LD_INT 59
3791: PUSH
3792: LD_INT 63
3794: PUSH
3795: LD_INT 64
3797: PUSH
3798: LD_INT 65
3800: PUSH
3801: LD_INT 82
3803: PUSH
3804: LD_INT 83
3806: PUSH
3807: LD_INT 84
3809: PUSH
3810: LD_INT 85
3812: PUSH
3813: LD_INT 86
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: ST_TO_ADDR
3871: GO 3874
3873: POP
// if state > - 1 and state < 3 then
3874: LD_VAR 0 3
3878: PUSH
3879: LD_INT 1
3881: NEG
3882: GREATER
3883: PUSH
3884: LD_VAR 0 3
3888: PUSH
3889: LD_INT 3
3891: LESS
3892: AND
3893: IFFALSE 3950
// for i in result do
3895: LD_ADDR_VAR 0 5
3899: PUSH
3900: LD_VAR 0 4
3904: PUSH
3905: FOR_IN
3906: IFFALSE 3948
// if GetTech ( i , side ) <> state then
3908: LD_VAR 0 5
3912: PPUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 321
3922: PUSH
3923: LD_VAR 0 3
3927: NONEQUAL
3928: IFFALSE 3946
// result := result diff i ;
3930: LD_ADDR_VAR 0 4
3934: PUSH
3935: LD_VAR 0 4
3939: PUSH
3940: LD_VAR 0 5
3944: DIFF
3945: ST_TO_ADDR
3946: GO 3905
3948: POP
3949: POP
// end ;
3950: LD_VAR 0 4
3954: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3955: LD_INT 0
3957: PPUSH
3958: PPUSH
3959: PPUSH
// result := true ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 1
3967: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3968: LD_ADDR_VAR 0 5
3972: PUSH
3973: LD_VAR 0 2
3977: PPUSH
3978: CALL_OW 480
3982: ST_TO_ADDR
// if not tmp then
3983: LD_VAR 0 5
3987: NOT
3988: IFFALSE 3992
// exit ;
3990: GO 4041
// for i in tmp do
3992: LD_ADDR_VAR 0 4
3996: PUSH
3997: LD_VAR 0 5
4001: PUSH
4002: FOR_IN
4003: IFFALSE 4039
// if GetTech ( i , side ) <> state_researched then
4005: LD_VAR 0 4
4009: PPUSH
4010: LD_VAR 0 1
4014: PPUSH
4015: CALL_OW 321
4019: PUSH
4020: LD_INT 2
4022: NONEQUAL
4023: IFFALSE 4037
// begin result := false ;
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 0
4032: ST_TO_ADDR
// exit ;
4033: POP
4034: POP
4035: GO 4041
// end ;
4037: GO 4002
4039: POP
4040: POP
// end ;
4041: LD_VAR 0 3
4045: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4046: LD_INT 0
4048: PPUSH
4049: PPUSH
4050: PPUSH
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
4058: PPUSH
4059: PPUSH
4060: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4061: LD_VAR 0 1
4065: NOT
4066: PUSH
4067: LD_VAR 0 1
4071: PPUSH
4072: CALL_OW 257
4076: PUSH
4077: LD_INT 9
4079: NONEQUAL
4080: OR
4081: IFFALSE 4085
// exit ;
4083: GO 4658
// side := GetSide ( unit ) ;
4085: LD_ADDR_VAR 0 9
4089: PUSH
4090: LD_VAR 0 1
4094: PPUSH
4095: CALL_OW 255
4099: ST_TO_ADDR
// tech_space := tech_spacanom ;
4100: LD_ADDR_VAR 0 12
4104: PUSH
4105: LD_INT 29
4107: ST_TO_ADDR
// tech_time := tech_taurad ;
4108: LD_ADDR_VAR 0 13
4112: PUSH
4113: LD_INT 28
4115: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4116: LD_ADDR_VAR 0 11
4120: PUSH
4121: LD_VAR 0 1
4125: PPUSH
4126: CALL_OW 310
4130: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4131: LD_VAR 0 11
4135: PPUSH
4136: CALL_OW 247
4140: PUSH
4141: LD_INT 2
4143: EQUAL
4144: IFFALSE 4148
// exit ;
4146: GO 4658
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4148: LD_ADDR_VAR 0 8
4152: PUSH
4153: LD_INT 81
4155: PUSH
4156: LD_VAR 0 9
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: LD_INT 21
4170: PUSH
4171: LD_INT 3
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 69
4190: ST_TO_ADDR
// if not tmp then
4191: LD_VAR 0 8
4195: NOT
4196: IFFALSE 4200
// exit ;
4198: GO 4658
// if in_unit then
4200: LD_VAR 0 11
4204: IFFALSE 4228
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4206: LD_ADDR_VAR 0 10
4210: PUSH
4211: LD_VAR 0 8
4215: PPUSH
4216: LD_VAR 0 11
4220: PPUSH
4221: CALL_OW 74
4225: ST_TO_ADDR
4226: GO 4248
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4228: LD_ADDR_VAR 0 10
4232: PUSH
4233: LD_VAR 0 8
4237: PPUSH
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 74
4247: ST_TO_ADDR
// if not enemy then
4248: LD_VAR 0 10
4252: NOT
4253: IFFALSE 4257
// exit ;
4255: GO 4658
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4257: LD_VAR 0 11
4261: PUSH
4262: LD_VAR 0 11
4266: PPUSH
4267: LD_VAR 0 10
4271: PPUSH
4272: CALL_OW 296
4276: PUSH
4277: LD_INT 13
4279: GREATER
4280: AND
4281: PUSH
4282: LD_VAR 0 1
4286: PPUSH
4287: LD_VAR 0 10
4291: PPUSH
4292: CALL_OW 296
4296: PUSH
4297: LD_INT 12
4299: GREATER
4300: OR
4301: IFFALSE 4305
// exit ;
4303: GO 4658
// missile := [ 1 ] ;
4305: LD_ADDR_VAR 0 14
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: EMPTY
4314: LIST
4315: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4316: LD_VAR 0 9
4320: PPUSH
4321: LD_VAR 0 12
4325: PPUSH
4326: CALL_OW 325
4330: IFFALSE 4359
// missile := Insert ( missile , missile + 1 , 2 ) ;
4332: LD_ADDR_VAR 0 14
4336: PUSH
4337: LD_VAR 0 14
4341: PPUSH
4342: LD_VAR 0 14
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_INT 2
4353: PPUSH
4354: CALL_OW 2
4358: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4359: LD_VAR 0 9
4363: PPUSH
4364: LD_VAR 0 13
4368: PPUSH
4369: CALL_OW 325
4373: PUSH
4374: LD_VAR 0 10
4378: PPUSH
4379: CALL_OW 255
4383: PPUSH
4384: LD_VAR 0 13
4388: PPUSH
4389: CALL_OW 325
4393: NOT
4394: AND
4395: IFFALSE 4424
// missile := Insert ( missile , missile + 1 , 3 ) ;
4397: LD_ADDR_VAR 0 14
4401: PUSH
4402: LD_VAR 0 14
4406: PPUSH
4407: LD_VAR 0 14
4411: PUSH
4412: LD_INT 1
4414: PLUS
4415: PPUSH
4416: LD_INT 3
4418: PPUSH
4419: CALL_OW 2
4423: ST_TO_ADDR
// if missile < 2 then
4424: LD_VAR 0 14
4428: PUSH
4429: LD_INT 2
4431: LESS
4432: IFFALSE 4436
// exit ;
4434: GO 4658
// x := GetX ( enemy ) ;
4436: LD_ADDR_VAR 0 4
4440: PUSH
4441: LD_VAR 0 10
4445: PPUSH
4446: CALL_OW 250
4450: ST_TO_ADDR
// y := GetY ( enemy ) ;
4451: LD_ADDR_VAR 0 5
4455: PUSH
4456: LD_VAR 0 10
4460: PPUSH
4461: CALL_OW 251
4465: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 4
4475: PUSH
4476: LD_INT 1
4478: NEG
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: CALL_OW 12
4487: PLUS
4488: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4489: LD_ADDR_VAR 0 7
4493: PUSH
4494: LD_VAR 0 5
4498: PUSH
4499: LD_INT 1
4501: NEG
4502: PPUSH
4503: LD_INT 1
4505: PPUSH
4506: CALL_OW 12
4510: PLUS
4511: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4512: LD_VAR 0 6
4516: PPUSH
4517: LD_VAR 0 7
4521: PPUSH
4522: CALL_OW 488
4526: NOT
4527: IFFALSE 4549
// begin _x := x ;
4529: LD_ADDR_VAR 0 6
4533: PUSH
4534: LD_VAR 0 4
4538: ST_TO_ADDR
// _y := y ;
4539: LD_ADDR_VAR 0 7
4543: PUSH
4544: LD_VAR 0 5
4548: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4549: LD_ADDR_VAR 0 3
4553: PUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_VAR 0 14
4561: PPUSH
4562: CALL_OW 12
4566: ST_TO_ADDR
// case i of 1 :
4567: LD_VAR 0 3
4571: PUSH
4572: LD_INT 1
4574: DOUBLE
4575: EQUAL
4576: IFTRUE 4580
4578: GO 4597
4580: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4581: LD_VAR 0 1
4585: PPUSH
4586: LD_VAR 0 10
4590: PPUSH
4591: CALL_OW 115
4595: GO 4658
4597: LD_INT 2
4599: DOUBLE
4600: EQUAL
4601: IFTRUE 4605
4603: GO 4627
4605: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4606: LD_VAR 0 1
4610: PPUSH
4611: LD_VAR 0 6
4615: PPUSH
4616: LD_VAR 0 7
4620: PPUSH
4621: CALL_OW 153
4625: GO 4658
4627: LD_INT 3
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4635
4633: GO 4657
4635: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 6
4645: PPUSH
4646: LD_VAR 0 7
4650: PPUSH
4651: CALL_OW 154
4655: GO 4658
4657: POP
// end ;
4658: LD_VAR 0 2
4662: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4663: LD_INT 0
4665: PPUSH
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
// if not unit or not building then
4671: LD_VAR 0 1
4675: NOT
4676: PUSH
4677: LD_VAR 0 2
4681: NOT
4682: OR
4683: IFFALSE 4687
// exit ;
4685: GO 4845
// x := GetX ( building ) ;
4687: LD_ADDR_VAR 0 5
4691: PUSH
4692: LD_VAR 0 2
4696: PPUSH
4697: CALL_OW 250
4701: ST_TO_ADDR
// y := GetY ( building ) ;
4702: LD_ADDR_VAR 0 6
4706: PUSH
4707: LD_VAR 0 2
4711: PPUSH
4712: CALL_OW 251
4716: ST_TO_ADDR
// for i = 0 to 5 do
4717: LD_ADDR_VAR 0 4
4721: PUSH
4722: DOUBLE
4723: LD_INT 0
4725: DEC
4726: ST_TO_ADDR
4727: LD_INT 5
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4843
// begin _x := ShiftX ( x , i , 3 ) ;
4733: LD_ADDR_VAR 0 7
4737: PUSH
4738: LD_VAR 0 5
4742: PPUSH
4743: LD_VAR 0 4
4747: PPUSH
4748: LD_INT 3
4750: PPUSH
4751: CALL_OW 272
4755: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4756: LD_ADDR_VAR 0 8
4760: PUSH
4761: LD_VAR 0 6
4765: PPUSH
4766: LD_VAR 0 4
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: CALL_OW 273
4778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4779: LD_VAR 0 7
4783: PPUSH
4784: LD_VAR 0 8
4788: PPUSH
4789: CALL_OW 488
4793: NOT
4794: IFFALSE 4798
// continue ;
4796: GO 4730
// if HexInfo ( _x , _y ) = 0 then
4798: LD_VAR 0 7
4802: PPUSH
4803: LD_VAR 0 8
4807: PPUSH
4808: CALL_OW 428
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: IFFALSE 4841
// begin ComMoveXY ( unit , _x , _y ) ;
4818: LD_VAR 0 1
4822: PPUSH
4823: LD_VAR 0 7
4827: PPUSH
4828: LD_VAR 0 8
4832: PPUSH
4833: CALL_OW 111
// exit ;
4837: POP
4838: POP
4839: GO 4845
// end ; end ;
4841: GO 4730
4843: POP
4844: POP
// end ;
4845: LD_VAR 0 3
4849: RET
// export function ScanBase ( side , base_area ) ; begin
4850: LD_INT 0
4852: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4853: LD_ADDR_VAR 0 3
4857: PUSH
4858: LD_VAR 0 2
4862: PPUSH
4863: LD_INT 81
4865: PUSH
4866: LD_VAR 0 1
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 70
4879: ST_TO_ADDR
// end ;
4880: LD_VAR 0 3
4884: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4885: LD_INT 0
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
// result := false ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 0
4898: ST_TO_ADDR
// side := GetSide ( unit ) ;
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 255
4913: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4914: LD_ADDR_VAR 0 4
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 248
4928: ST_TO_ADDR
// case nat of 1 :
4929: LD_VAR 0 4
4933: PUSH
4934: LD_INT 1
4936: DOUBLE
4937: EQUAL
4938: IFTRUE 4942
4940: GO 4953
4942: POP
// tech := tech_lassight ; 2 :
4943: LD_ADDR_VAR 0 5
4947: PUSH
4948: LD_INT 12
4950: ST_TO_ADDR
4951: GO 4992
4953: LD_INT 2
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4972
4961: POP
// tech := tech_mortar ; 3 :
4962: LD_ADDR_VAR 0 5
4966: PUSH
4967: LD_INT 41
4969: ST_TO_ADDR
4970: GO 4992
4972: LD_INT 3
4974: DOUBLE
4975: EQUAL
4976: IFTRUE 4980
4978: GO 4991
4980: POP
// tech := tech_bazooka ; end ;
4981: LD_ADDR_VAR 0 5
4985: PUSH
4986: LD_INT 44
4988: ST_TO_ADDR
4989: GO 4992
4991: POP
// if Researched ( side , tech ) then
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_VAR 0 5
5001: PPUSH
5002: CALL_OW 325
5006: IFFALSE 5033
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 5
5015: PUSH
5016: LD_INT 8
5018: PUSH
5019: LD_INT 9
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: PUSH
5027: LD_VAR 0 4
5031: ARRAY
5032: ST_TO_ADDR
// end ;
5033: LD_VAR 0 2
5037: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5038: LD_INT 0
5040: PPUSH
5041: PPUSH
5042: PPUSH
// if not mines then
5043: LD_VAR 0 2
5047: NOT
5048: IFFALSE 5052
// exit ;
5050: GO 5196
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5052: LD_ADDR_VAR 0 5
5056: PUSH
5057: LD_INT 81
5059: PUSH
5060: LD_VAR 0 1
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 3
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PPUSH
5090: CALL_OW 69
5094: ST_TO_ADDR
// for i in mines do
5095: LD_ADDR_VAR 0 4
5099: PUSH
5100: LD_VAR 0 2
5104: PUSH
5105: FOR_IN
5106: IFFALSE 5194
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5108: LD_VAR 0 4
5112: PUSH
5113: LD_INT 1
5115: ARRAY
5116: PPUSH
5117: LD_VAR 0 4
5121: PUSH
5122: LD_INT 2
5124: ARRAY
5125: PPUSH
5126: CALL_OW 458
5130: NOT
5131: IFFALSE 5135
// continue ;
5133: GO 5105
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5135: LD_VAR 0 4
5139: PUSH
5140: LD_INT 1
5142: ARRAY
5143: PPUSH
5144: LD_VAR 0 4
5148: PUSH
5149: LD_INT 2
5151: ARRAY
5152: PPUSH
5153: CALL_OW 428
5157: PUSH
5158: LD_VAR 0 5
5162: IN
5163: IFFALSE 5192
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5165: LD_VAR 0 4
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 4
5178: PUSH
5179: LD_INT 2
5181: ARRAY
5182: PPUSH
5183: LD_VAR 0 1
5187: PPUSH
5188: CALL_OW 456
// end ;
5192: GO 5105
5194: POP
5195: POP
// end ;
5196: LD_VAR 0 3
5200: RET
// export function Count ( array ) ; var i ; begin
5201: LD_INT 0
5203: PPUSH
5204: PPUSH
// result := 0 ;
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_INT 0
5212: ST_TO_ADDR
// for i in array do
5213: LD_ADDR_VAR 0 3
5217: PUSH
5218: LD_VAR 0 1
5222: PUSH
5223: FOR_IN
5224: IFFALSE 5248
// if i then
5226: LD_VAR 0 3
5230: IFFALSE 5246
// result := result + 1 ;
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_VAR 0 2
5241: PUSH
5242: LD_INT 1
5244: PLUS
5245: ST_TO_ADDR
5246: GO 5223
5248: POP
5249: POP
// end ;
5250: LD_VAR 0 2
5254: RET
// export function IsEmpty ( building ) ; begin
5255: LD_INT 0
5257: PPUSH
// if not building then
5258: LD_VAR 0 1
5262: NOT
5263: IFFALSE 5267
// exit ;
5265: GO 5310
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5267: LD_ADDR_VAR 0 2
5271: PUSH
5272: LD_VAR 0 1
5276: PUSH
5277: LD_INT 22
5279: PUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 255
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 58
5296: PUSH
5297: EMPTY
5298: LIST
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PPUSH
5304: CALL_OW 69
5308: IN
5309: ST_TO_ADDR
// end ;
5310: LD_VAR 0 2
5314: RET
// export function IsNotFull ( building ) ; begin
5315: LD_INT 0
5317: PPUSH
// if not building then
5318: LD_VAR 0 1
5322: NOT
5323: IFFALSE 5327
// exit ;
5325: GO 5346
// result := UnitsInside ( building ) < 6 ;
5327: LD_ADDR_VAR 0 2
5331: PUSH
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 313
5341: PUSH
5342: LD_INT 6
5344: LESS
5345: ST_TO_ADDR
// end ;
5346: LD_VAR 0 2
5350: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5351: LD_INT 0
5353: PPUSH
5354: PPUSH
5355: PPUSH
5356: PPUSH
// tmp := [ ] ;
5357: LD_ADDR_VAR 0 3
5361: PUSH
5362: EMPTY
5363: ST_TO_ADDR
// list := [ ] ;
5364: LD_ADDR_VAR 0 5
5368: PUSH
5369: EMPTY
5370: ST_TO_ADDR
// for i = 16 to 25 do
5371: LD_ADDR_VAR 0 4
5375: PUSH
5376: DOUBLE
5377: LD_INT 16
5379: DEC
5380: ST_TO_ADDR
5381: LD_INT 25
5383: PUSH
5384: FOR_TO
5385: IFFALSE 5458
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: LD_VAR 0 3
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 255
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PUSH
5414: LD_INT 91
5416: PUSH
5417: LD_VAR 0 1
5421: PUSH
5422: LD_INT 6
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: PUSH
5430: LD_INT 30
5432: PUSH
5433: LD_VAR 0 4
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: PUSH
5447: EMPTY
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: ADD
5455: ST_TO_ADDR
5456: GO 5384
5458: POP
5459: POP
// for i = 1 to tmp do
5460: LD_ADDR_VAR 0 4
5464: PUSH
5465: DOUBLE
5466: LD_INT 1
5468: DEC
5469: ST_TO_ADDR
5470: LD_VAR 0 3
5474: PUSH
5475: FOR_TO
5476: IFFALSE 5564
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: LD_VAR 0 5
5487: PUSH
5488: LD_VAR 0 3
5492: PUSH
5493: LD_VAR 0 4
5497: ARRAY
5498: PPUSH
5499: CALL_OW 266
5503: PUSH
5504: LD_VAR 0 3
5508: PUSH
5509: LD_VAR 0 4
5513: ARRAY
5514: PPUSH
5515: CALL_OW 250
5519: PUSH
5520: LD_VAR 0 3
5524: PUSH
5525: LD_VAR 0 4
5529: ARRAY
5530: PPUSH
5531: CALL_OW 251
5535: PUSH
5536: LD_VAR 0 3
5540: PUSH
5541: LD_VAR 0 4
5545: ARRAY
5546: PPUSH
5547: CALL_OW 254
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: ADD
5561: ST_TO_ADDR
5562: GO 5475
5564: POP
5565: POP
// result := list ;
5566: LD_ADDR_VAR 0 2
5570: PUSH
5571: LD_VAR 0 5
5575: ST_TO_ADDR
// end ;
5576: LD_VAR 0 2
5580: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5581: LD_INT 0
5583: PPUSH
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
// if not factory then
5590: LD_VAR 0 1
5594: NOT
5595: IFFALSE 5599
// exit ;
5597: GO 6192
// if control = control_apeman then
5599: LD_VAR 0 4
5603: PUSH
5604: LD_INT 5
5606: EQUAL
5607: IFFALSE 5716
// begin tmp := UnitsInside ( factory ) ;
5609: LD_ADDR_VAR 0 8
5613: PUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 313
5623: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5624: LD_VAR 0 8
5628: PPUSH
5629: LD_INT 25
5631: PUSH
5632: LD_INT 12
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 72
5643: NOT
5644: IFFALSE 5654
// control := control_manual ;
5646: LD_ADDR_VAR 0 4
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5654: LD_ADDR_VAR 0 8
5658: PUSH
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL 5351 0 1
5668: ST_TO_ADDR
// if tmp then
5669: LD_VAR 0 8
5673: IFFALSE 5716
// begin for i in tmp do
5675: LD_ADDR_VAR 0 7
5679: PUSH
5680: LD_VAR 0 8
5684: PUSH
5685: FOR_IN
5686: IFFALSE 5714
// if i [ 1 ] = b_ext_radio then
5688: LD_VAR 0 7
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PUSH
5697: LD_INT 22
5699: EQUAL
5700: IFFALSE 5712
// begin control := control_remote ;
5702: LD_ADDR_VAR 0 4
5706: PUSH
5707: LD_INT 2
5709: ST_TO_ADDR
// break ;
5710: GO 5714
// end ;
5712: GO 5685
5714: POP
5715: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5716: LD_VAR 0 1
5720: PPUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: LD_VAR 0 4
5735: PPUSH
5736: LD_VAR 0 5
5740: PPUSH
5741: CALL_OW 448
5745: IFFALSE 5780
// begin result := [ chassis , engine , control , weapon ] ;
5747: LD_ADDR_VAR 0 6
5751: PUSH
5752: LD_VAR 0 2
5756: PUSH
5757: LD_VAR 0 3
5761: PUSH
5762: LD_VAR 0 4
5766: PUSH
5767: LD_VAR 0 5
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: ST_TO_ADDR
// exit ;
5778: GO 6192
// end ; _chassis := AvailableChassisList ( factory ) ;
5780: LD_ADDR_VAR 0 9
5784: PUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 475
5794: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5795: LD_ADDR_VAR 0 11
5799: PUSH
5800: LD_VAR 0 1
5804: PPUSH
5805: CALL_OW 476
5809: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5810: LD_ADDR_VAR 0 12
5814: PUSH
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 477
5824: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5825: LD_ADDR_VAR 0 10
5829: PUSH
5830: LD_VAR 0 1
5834: PPUSH
5835: CALL_OW 478
5839: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5840: LD_VAR 0 9
5844: NOT
5845: PUSH
5846: LD_VAR 0 11
5850: NOT
5851: OR
5852: PUSH
5853: LD_VAR 0 12
5857: NOT
5858: OR
5859: PUSH
5860: LD_VAR 0 10
5864: NOT
5865: OR
5866: IFFALSE 5901
// begin result := [ chassis , engine , control , weapon ] ;
5868: LD_ADDR_VAR 0 6
5872: PUSH
5873: LD_VAR 0 2
5877: PUSH
5878: LD_VAR 0 3
5882: PUSH
5883: LD_VAR 0 4
5887: PUSH
5888: LD_VAR 0 5
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: ST_TO_ADDR
// exit ;
5899: GO 6192
// end ; if not chassis in _chassis then
5901: LD_VAR 0 2
5905: PUSH
5906: LD_VAR 0 9
5910: IN
5911: NOT
5912: IFFALSE 5938
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_VAR 0 9
5923: PUSH
5924: LD_INT 1
5926: PPUSH
5927: LD_VAR 0 9
5931: PPUSH
5932: CALL_OW 12
5936: ARRAY
5937: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5938: LD_VAR 0 2
5942: PPUSH
5943: LD_VAR 0 3
5947: PPUSH
5948: CALL 6197 0 2
5952: NOT
5953: IFFALSE 6012
// repeat engine := _engine [ 1 ] ;
5955: LD_ADDR_VAR 0 3
5959: PUSH
5960: LD_VAR 0 11
5964: PUSH
5965: LD_INT 1
5967: ARRAY
5968: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5969: LD_ADDR_VAR 0 11
5973: PUSH
5974: LD_VAR 0 11
5978: PPUSH
5979: LD_INT 1
5981: PPUSH
5982: CALL_OW 3
5986: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5987: LD_VAR 0 2
5991: PPUSH
5992: LD_VAR 0 3
5996: PPUSH
5997: CALL 6197 0 2
6001: PUSH
6002: LD_VAR 0 11
6006: PUSH
6007: EMPTY
6008: EQUAL
6009: OR
6010: IFFALSE 5955
// if not control in _control then
6012: LD_VAR 0 4
6016: PUSH
6017: LD_VAR 0 12
6021: IN
6022: NOT
6023: IFFALSE 6049
// control := _control [ rand ( 1 , _control ) ] ;
6025: LD_ADDR_VAR 0 4
6029: PUSH
6030: LD_VAR 0 12
6034: PUSH
6035: LD_INT 1
6037: PPUSH
6038: LD_VAR 0 12
6042: PPUSH
6043: CALL_OW 12
6047: ARRAY
6048: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6049: LD_VAR 0 2
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: CALL 6417 0 2
6063: NOT
6064: IFFALSE 6123
// repeat weapon := _weapon [ 1 ] ;
6066: LD_ADDR_VAR 0 5
6070: PUSH
6071: LD_VAR 0 10
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6080: LD_ADDR_VAR 0 10
6084: PUSH
6085: LD_VAR 0 10
6089: PPUSH
6090: LD_INT 1
6092: PPUSH
6093: CALL_OW 3
6097: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_VAR 0 5
6107: PPUSH
6108: CALL 6417 0 2
6112: PUSH
6113: LD_VAR 0 10
6117: PUSH
6118: EMPTY
6119: EQUAL
6120: OR
6121: IFFALSE 6066
// result := [ ] ;
6123: LD_ADDR_VAR 0 6
6127: PUSH
6128: EMPTY
6129: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_VAR 0 3
6144: PPUSH
6145: LD_VAR 0 4
6149: PPUSH
6150: LD_VAR 0 5
6154: PPUSH
6155: CALL_OW 448
6159: IFFALSE 6192
// result := [ chassis , engine , control , weapon ] ;
6161: LD_ADDR_VAR 0 6
6165: PUSH
6166: LD_VAR 0 2
6170: PUSH
6171: LD_VAR 0 3
6175: PUSH
6176: LD_VAR 0 4
6180: PUSH
6181: LD_VAR 0 5
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: ST_TO_ADDR
// end ;
6192: LD_VAR 0 6
6196: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6197: LD_INT 0
6199: PPUSH
// if not chassis or not engine then
6200: LD_VAR 0 1
6204: NOT
6205: PUSH
6206: LD_VAR 0 2
6210: NOT
6211: OR
6212: IFFALSE 6216
// exit ;
6214: GO 6412
// case engine of engine_solar :
6216: LD_VAR 0 2
6220: PUSH
6221: LD_INT 2
6223: DOUBLE
6224: EQUAL
6225: IFTRUE 6229
6227: GO 6267
6229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6230: LD_ADDR_VAR 0 3
6234: PUSH
6235: LD_INT 11
6237: PUSH
6238: LD_INT 12
6240: PUSH
6241: LD_INT 13
6243: PUSH
6244: LD_INT 14
6246: PUSH
6247: LD_INT 1
6249: PUSH
6250: LD_INT 2
6252: PUSH
6253: LD_INT 3
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: ST_TO_ADDR
6265: GO 6396
6267: LD_INT 1
6269: DOUBLE
6270: EQUAL
6271: IFTRUE 6275
6273: GO 6337
6275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_INT 11
6283: PUSH
6284: LD_INT 12
6286: PUSH
6287: LD_INT 13
6289: PUSH
6290: LD_INT 14
6292: PUSH
6293: LD_INT 1
6295: PUSH
6296: LD_INT 2
6298: PUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 4
6304: PUSH
6305: LD_INT 5
6307: PUSH
6308: LD_INT 21
6310: PUSH
6311: LD_INT 23
6313: PUSH
6314: LD_INT 22
6316: PUSH
6317: LD_INT 24
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: ST_TO_ADDR
6335: GO 6396
6337: LD_INT 3
6339: DOUBLE
6340: EQUAL
6341: IFTRUE 6345
6343: GO 6395
6345: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6346: LD_ADDR_VAR 0 3
6350: PUSH
6351: LD_INT 13
6353: PUSH
6354: LD_INT 14
6356: PUSH
6357: LD_INT 2
6359: PUSH
6360: LD_INT 3
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: LD_INT 5
6368: PUSH
6369: LD_INT 21
6371: PUSH
6372: LD_INT 22
6374: PUSH
6375: LD_INT 23
6377: PUSH
6378: LD_INT 24
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: ST_TO_ADDR
6393: GO 6396
6395: POP
// result := ( chassis in result ) ;
6396: LD_ADDR_VAR 0 3
6400: PUSH
6401: LD_VAR 0 1
6405: PUSH
6406: LD_VAR 0 3
6410: IN
6411: ST_TO_ADDR
// end ;
6412: LD_VAR 0 3
6416: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6417: LD_INT 0
6419: PPUSH
// if not chassis or not weapon then
6420: LD_VAR 0 1
6424: NOT
6425: PUSH
6426: LD_VAR 0 2
6430: NOT
6431: OR
6432: IFFALSE 6436
// exit ;
6434: GO 7462
// case weapon of us_machine_gun :
6436: LD_VAR 0 2
6440: PUSH
6441: LD_INT 2
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6479
6449: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6450: LD_ADDR_VAR 0 3
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: LD_INT 4
6466: PUSH
6467: LD_INT 5
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: ST_TO_ADDR
6477: GO 7446
6479: LD_INT 3
6481: DOUBLE
6482: EQUAL
6483: IFTRUE 6487
6485: GO 6517
6487: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6488: LD_ADDR_VAR 0 3
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: LD_INT 2
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 4
6504: PUSH
6505: LD_INT 5
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: ST_TO_ADDR
6515: GO 7446
6517: LD_INT 11
6519: DOUBLE
6520: EQUAL
6521: IFTRUE 6525
6523: GO 6555
6525: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6526: LD_ADDR_VAR 0 3
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 3
6539: PUSH
6540: LD_INT 4
6542: PUSH
6543: LD_INT 5
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: ST_TO_ADDR
6553: GO 7446
6555: LD_INT 4
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6589
6563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6564: LD_ADDR_VAR 0 3
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: LD_INT 3
6574: PUSH
6575: LD_INT 4
6577: PUSH
6578: LD_INT 5
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: ST_TO_ADDR
6587: GO 7446
6589: LD_INT 5
6591: DOUBLE
6592: EQUAL
6593: IFTRUE 6597
6595: GO 6623
6597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: LD_INT 3
6608: PUSH
6609: LD_INT 4
6611: PUSH
6612: LD_INT 5
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: ST_TO_ADDR
6621: GO 7446
6623: LD_INT 9
6625: DOUBLE
6626: EQUAL
6627: IFTRUE 6631
6629: GO 6657
6631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: LD_INT 2
6639: PUSH
6640: LD_INT 3
6642: PUSH
6643: LD_INT 4
6645: PUSH
6646: LD_INT 5
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: ST_TO_ADDR
6655: GO 7446
6657: LD_INT 7
6659: DOUBLE
6660: EQUAL
6661: IFTRUE 6665
6663: GO 6691
6665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: LD_INT 3
6676: PUSH
6677: LD_INT 4
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: ST_TO_ADDR
6689: GO 7446
6691: LD_INT 12
6693: DOUBLE
6694: EQUAL
6695: IFTRUE 6699
6697: GO 6725
6699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6700: LD_ADDR_VAR 0 3
6704: PUSH
6705: LD_INT 2
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 4
6713: PUSH
6714: LD_INT 5
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: ST_TO_ADDR
6723: GO 7446
6725: LD_INT 13
6727: DOUBLE
6728: EQUAL
6729: IFTRUE 6733
6731: GO 6759
6733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6734: LD_ADDR_VAR 0 3
6738: PUSH
6739: LD_INT 2
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: ST_TO_ADDR
6757: GO 7446
6759: LD_INT 14
6761: DOUBLE
6762: EQUAL
6763: IFTRUE 6767
6765: GO 6785
6767: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6768: LD_ADDR_VAR 0 3
6772: PUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: ST_TO_ADDR
6783: GO 7446
6785: LD_INT 6
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6793
6791: GO 6811
6793: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6794: LD_ADDR_VAR 0 3
6798: PUSH
6799: LD_INT 4
6801: PUSH
6802: LD_INT 5
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: ST_TO_ADDR
6809: GO 7446
6811: LD_INT 10
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6837
6819: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_INT 4
6827: PUSH
6828: LD_INT 5
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: ST_TO_ADDR
6835: GO 7446
6837: LD_INT 22
6839: DOUBLE
6840: EQUAL
6841: IFTRUE 6845
6843: GO 6871
6845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6846: LD_ADDR_VAR 0 3
6850: PUSH
6851: LD_INT 11
6853: PUSH
6854: LD_INT 12
6856: PUSH
6857: LD_INT 13
6859: PUSH
6860: LD_INT 14
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: ST_TO_ADDR
6869: GO 7446
6871: LD_INT 23
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 6905
6879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: LD_INT 11
6887: PUSH
6888: LD_INT 12
6890: PUSH
6891: LD_INT 13
6893: PUSH
6894: LD_INT 14
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 7446
6905: LD_INT 24
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6939
6913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6914: LD_ADDR_VAR 0 3
6918: PUSH
6919: LD_INT 11
6921: PUSH
6922: LD_INT 12
6924: PUSH
6925: LD_INT 13
6927: PUSH
6928: LD_INT 14
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: ST_TO_ADDR
6937: GO 7446
6939: LD_INT 30
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6973
6947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_INT 11
6955: PUSH
6956: LD_INT 12
6958: PUSH
6959: LD_INT 13
6961: PUSH
6962: LD_INT 14
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: ST_TO_ADDR
6971: GO 7446
6973: LD_INT 25
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 6999
6981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_INT 13
6989: PUSH
6990: LD_INT 14
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: ST_TO_ADDR
6997: GO 7446
6999: LD_INT 27
7001: DOUBLE
7002: EQUAL
7003: IFTRUE 7007
7005: GO 7025
7007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7008: LD_ADDR_VAR 0 3
7012: PUSH
7013: LD_INT 13
7015: PUSH
7016: LD_INT 14
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: ST_TO_ADDR
7023: GO 7446
7025: LD_INT 28
7027: DOUBLE
7028: EQUAL
7029: IFTRUE 7033
7031: GO 7051
7033: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: LD_INT 13
7041: PUSH
7042: LD_INT 14
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: ST_TO_ADDR
7049: GO 7446
7051: LD_INT 29
7053: DOUBLE
7054: EQUAL
7055: IFTRUE 7059
7057: GO 7077
7059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_INT 13
7067: PUSH
7068: LD_INT 14
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: ST_TO_ADDR
7075: GO 7446
7077: LD_INT 31
7079: DOUBLE
7080: EQUAL
7081: IFTRUE 7085
7083: GO 7103
7085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7086: LD_ADDR_VAR 0 3
7090: PUSH
7091: LD_INT 13
7093: PUSH
7094: LD_INT 14
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 7446
7103: LD_INT 26
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7129
7111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: LD_INT 13
7119: PUSH
7120: LD_INT 14
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: ST_TO_ADDR
7127: GO 7446
7129: LD_INT 42
7131: DOUBLE
7132: EQUAL
7133: IFTRUE 7137
7135: GO 7163
7137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7138: LD_ADDR_VAR 0 3
7142: PUSH
7143: LD_INT 21
7145: PUSH
7146: LD_INT 22
7148: PUSH
7149: LD_INT 23
7151: PUSH
7152: LD_INT 24
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: ST_TO_ADDR
7161: GO 7446
7163: LD_INT 43
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7197
7171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7172: LD_ADDR_VAR 0 3
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 22
7182: PUSH
7183: LD_INT 23
7185: PUSH
7186: LD_INT 24
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: ST_TO_ADDR
7195: GO 7446
7197: LD_INT 44
7199: DOUBLE
7200: EQUAL
7201: IFTRUE 7205
7203: GO 7231
7205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7206: LD_ADDR_VAR 0 3
7210: PUSH
7211: LD_INT 21
7213: PUSH
7214: LD_INT 22
7216: PUSH
7217: LD_INT 23
7219: PUSH
7220: LD_INT 24
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: ST_TO_ADDR
7229: GO 7446
7231: LD_INT 45
7233: DOUBLE
7234: EQUAL
7235: IFTRUE 7239
7237: GO 7265
7239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7240: LD_ADDR_VAR 0 3
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_INT 23
7253: PUSH
7254: LD_INT 24
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: ST_TO_ADDR
7263: GO 7446
7265: LD_INT 49
7267: DOUBLE
7268: EQUAL
7269: IFTRUE 7273
7271: GO 7299
7273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 22
7284: PUSH
7285: LD_INT 23
7287: PUSH
7288: LD_INT 24
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: ST_TO_ADDR
7297: GO 7446
7299: LD_INT 51
7301: DOUBLE
7302: EQUAL
7303: IFTRUE 7307
7305: GO 7333
7307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7308: LD_ADDR_VAR 0 3
7312: PUSH
7313: LD_INT 21
7315: PUSH
7316: LD_INT 22
7318: PUSH
7319: LD_INT 23
7321: PUSH
7322: LD_INT 24
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: ST_TO_ADDR
7331: GO 7446
7333: LD_INT 52
7335: DOUBLE
7336: EQUAL
7337: IFTRUE 7341
7339: GO 7367
7341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7342: LD_ADDR_VAR 0 3
7346: PUSH
7347: LD_INT 21
7349: PUSH
7350: LD_INT 22
7352: PUSH
7353: LD_INT 23
7355: PUSH
7356: LD_INT 24
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: ST_TO_ADDR
7365: GO 7446
7367: LD_INT 53
7369: DOUBLE
7370: EQUAL
7371: IFTRUE 7375
7373: GO 7393
7375: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7376: LD_ADDR_VAR 0 3
7380: PUSH
7381: LD_INT 23
7383: PUSH
7384: LD_INT 24
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: ST_TO_ADDR
7391: GO 7446
7393: LD_INT 46
7395: DOUBLE
7396: EQUAL
7397: IFTRUE 7401
7399: GO 7419
7401: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7402: LD_ADDR_VAR 0 3
7406: PUSH
7407: LD_INT 23
7409: PUSH
7410: LD_INT 24
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: ST_TO_ADDR
7417: GO 7446
7419: LD_INT 47
7421: DOUBLE
7422: EQUAL
7423: IFTRUE 7427
7425: GO 7445
7427: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7428: LD_ADDR_VAR 0 3
7432: PUSH
7433: LD_INT 23
7435: PUSH
7436: LD_INT 24
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: ST_TO_ADDR
7443: GO 7446
7445: POP
// result := ( chassis in result ) ;
7446: LD_ADDR_VAR 0 3
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: LD_VAR 0 3
7460: IN
7461: ST_TO_ADDR
// end ;
7462: LD_VAR 0 3
7466: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7467: LD_INT 0
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
// result := array ;
7476: LD_ADDR_VAR 0 5
7480: PUSH
7481: LD_VAR 0 1
7485: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7486: LD_VAR 0 1
7490: NOT
7491: PUSH
7492: LD_VAR 0 2
7496: NOT
7497: OR
7498: PUSH
7499: LD_VAR 0 3
7503: NOT
7504: OR
7505: PUSH
7506: LD_VAR 0 2
7510: PUSH
7511: LD_VAR 0 1
7515: GREATER
7516: OR
7517: PUSH
7518: LD_VAR 0 3
7522: PUSH
7523: LD_VAR 0 1
7527: GREATER
7528: OR
7529: IFFALSE 7533
// exit ;
7531: GO 7829
// if direction then
7533: LD_VAR 0 4
7537: IFFALSE 7601
// begin d := 1 ;
7539: LD_ADDR_VAR 0 9
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if i_from > i_to then
7547: LD_VAR 0 2
7551: PUSH
7552: LD_VAR 0 3
7556: GREATER
7557: IFFALSE 7583
// length := ( array - i_from ) + i_to else
7559: LD_ADDR_VAR 0 11
7563: PUSH
7564: LD_VAR 0 1
7568: PUSH
7569: LD_VAR 0 2
7573: MINUS
7574: PUSH
7575: LD_VAR 0 3
7579: PLUS
7580: ST_TO_ADDR
7581: GO 7599
// length := i_to - i_from ;
7583: LD_ADDR_VAR 0 11
7587: PUSH
7588: LD_VAR 0 3
7592: PUSH
7593: LD_VAR 0 2
7597: MINUS
7598: ST_TO_ADDR
// end else
7599: GO 7662
// begin d := - 1 ;
7601: LD_ADDR_VAR 0 9
7605: PUSH
7606: LD_INT 1
7608: NEG
7609: ST_TO_ADDR
// if i_from > i_to then
7610: LD_VAR 0 2
7614: PUSH
7615: LD_VAR 0 3
7619: GREATER
7620: IFFALSE 7640
// length := i_from - i_to else
7622: LD_ADDR_VAR 0 11
7626: PUSH
7627: LD_VAR 0 2
7631: PUSH
7632: LD_VAR 0 3
7636: MINUS
7637: ST_TO_ADDR
7638: GO 7662
// length := ( array - i_to ) + i_from ;
7640: LD_ADDR_VAR 0 11
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: LD_VAR 0 3
7654: MINUS
7655: PUSH
7656: LD_VAR 0 2
7660: PLUS
7661: ST_TO_ADDR
// end ; if not length then
7662: LD_VAR 0 11
7666: NOT
7667: IFFALSE 7671
// exit ;
7669: GO 7829
// tmp := array ;
7671: LD_ADDR_VAR 0 10
7675: PUSH
7676: LD_VAR 0 1
7680: ST_TO_ADDR
// for i = 1 to length do
7681: LD_ADDR_VAR 0 6
7685: PUSH
7686: DOUBLE
7687: LD_INT 1
7689: DEC
7690: ST_TO_ADDR
7691: LD_VAR 0 11
7695: PUSH
7696: FOR_TO
7697: IFFALSE 7817
// begin for j = 1 to array do
7699: LD_ADDR_VAR 0 7
7703: PUSH
7704: DOUBLE
7705: LD_INT 1
7707: DEC
7708: ST_TO_ADDR
7709: LD_VAR 0 1
7713: PUSH
7714: FOR_TO
7715: IFFALSE 7803
// begin k := j + d ;
7717: LD_ADDR_VAR 0 8
7721: PUSH
7722: LD_VAR 0 7
7726: PUSH
7727: LD_VAR 0 9
7731: PLUS
7732: ST_TO_ADDR
// if k > array then
7733: LD_VAR 0 8
7737: PUSH
7738: LD_VAR 0 1
7742: GREATER
7743: IFFALSE 7753
// k := 1 ;
7745: LD_ADDR_VAR 0 8
7749: PUSH
7750: LD_INT 1
7752: ST_TO_ADDR
// if not k then
7753: LD_VAR 0 8
7757: NOT
7758: IFFALSE 7770
// k := array ;
7760: LD_ADDR_VAR 0 8
7764: PUSH
7765: LD_VAR 0 1
7769: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7770: LD_ADDR_VAR 0 10
7774: PUSH
7775: LD_VAR 0 10
7779: PPUSH
7780: LD_VAR 0 8
7784: PPUSH
7785: LD_VAR 0 1
7789: PUSH
7790: LD_VAR 0 7
7794: ARRAY
7795: PPUSH
7796: CALL_OW 1
7800: ST_TO_ADDR
// end ;
7801: GO 7714
7803: POP
7804: POP
// array := tmp ;
7805: LD_ADDR_VAR 0 1
7809: PUSH
7810: LD_VAR 0 10
7814: ST_TO_ADDR
// end ;
7815: GO 7696
7817: POP
7818: POP
// result := array ;
7819: LD_ADDR_VAR 0 5
7823: PUSH
7824: LD_VAR 0 1
7828: ST_TO_ADDR
// end ;
7829: LD_VAR 0 5
7833: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7834: LD_INT 0
7836: PPUSH
7837: PPUSH
// result := 0 ;
7838: LD_ADDR_VAR 0 3
7842: PUSH
7843: LD_INT 0
7845: ST_TO_ADDR
// if not array or not value in array then
7846: LD_VAR 0 1
7850: NOT
7851: PUSH
7852: LD_VAR 0 2
7856: PUSH
7857: LD_VAR 0 1
7861: IN
7862: NOT
7863: OR
7864: IFFALSE 7868
// exit ;
7866: GO 7922
// for i = 1 to array do
7868: LD_ADDR_VAR 0 4
7872: PUSH
7873: DOUBLE
7874: LD_INT 1
7876: DEC
7877: ST_TO_ADDR
7878: LD_VAR 0 1
7882: PUSH
7883: FOR_TO
7884: IFFALSE 7920
// if value = array [ i ] then
7886: LD_VAR 0 2
7890: PUSH
7891: LD_VAR 0 1
7895: PUSH
7896: LD_VAR 0 4
7900: ARRAY
7901: EQUAL
7902: IFFALSE 7918
// begin result := i ;
7904: LD_ADDR_VAR 0 3
7908: PUSH
7909: LD_VAR 0 4
7913: ST_TO_ADDR
// exit ;
7914: POP
7915: POP
7916: GO 7922
// end ;
7918: GO 7883
7920: POP
7921: POP
// end ;
7922: LD_VAR 0 3
7926: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7927: LD_INT 0
7929: PPUSH
// vc_chassis := chassis ;
7930: LD_ADDR_OWVAR 37
7934: PUSH
7935: LD_VAR 0 1
7939: ST_TO_ADDR
// vc_engine := engine ;
7940: LD_ADDR_OWVAR 39
7944: PUSH
7945: LD_VAR 0 2
7949: ST_TO_ADDR
// vc_control := control ;
7950: LD_ADDR_OWVAR 38
7954: PUSH
7955: LD_VAR 0 3
7959: ST_TO_ADDR
// vc_weapon := weapon ;
7960: LD_ADDR_OWVAR 40
7964: PUSH
7965: LD_VAR 0 4
7969: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7970: LD_ADDR_OWVAR 41
7974: PUSH
7975: LD_VAR 0 5
7979: ST_TO_ADDR
// end ;
7980: LD_VAR 0 6
7984: RET
// export function WantPlant ( unit ) ; var task ; begin
7985: LD_INT 0
7987: PPUSH
7988: PPUSH
// result := false ;
7989: LD_ADDR_VAR 0 2
7993: PUSH
7994: LD_INT 0
7996: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 437
8011: ST_TO_ADDR
// if task then
8012: LD_VAR 0 3
8016: IFFALSE 8044
// if task [ 1 ] [ 1 ] = p then
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 1
8025: ARRAY
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PUSH
8031: LD_STRING p
8033: EQUAL
8034: IFFALSE 8044
// result := true ;
8036: LD_ADDR_VAR 0 2
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// end ;
8044: LD_VAR 0 2
8048: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8049: LD_INT 0
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
// if pos < 1 then
8055: LD_VAR 0 2
8059: PUSH
8060: LD_INT 1
8062: LESS
8063: IFFALSE 8067
// exit ;
8065: GO 8370
// if pos = 1 then
8067: LD_VAR 0 2
8071: PUSH
8072: LD_INT 1
8074: EQUAL
8075: IFFALSE 8108
// result := Replace ( arr , pos [ 1 ] , value ) else
8077: LD_ADDR_VAR 0 4
8081: PUSH
8082: LD_VAR 0 1
8086: PPUSH
8087: LD_VAR 0 2
8091: PUSH
8092: LD_INT 1
8094: ARRAY
8095: PPUSH
8096: LD_VAR 0 3
8100: PPUSH
8101: CALL_OW 1
8105: ST_TO_ADDR
8106: GO 8370
// begin tmp := arr ;
8108: LD_ADDR_VAR 0 6
8112: PUSH
8113: LD_VAR 0 1
8117: ST_TO_ADDR
// s_arr := [ tmp ] ;
8118: LD_ADDR_VAR 0 7
8122: PUSH
8123: LD_VAR 0 6
8127: PUSH
8128: EMPTY
8129: LIST
8130: ST_TO_ADDR
// for i = 1 to pos - 1 do
8131: LD_ADDR_VAR 0 5
8135: PUSH
8136: DOUBLE
8137: LD_INT 1
8139: DEC
8140: ST_TO_ADDR
8141: LD_VAR 0 2
8145: PUSH
8146: LD_INT 1
8148: MINUS
8149: PUSH
8150: FOR_TO
8151: IFFALSE 8196
// begin tmp := tmp [ pos [ i ] ] ;
8153: LD_ADDR_VAR 0 6
8157: PUSH
8158: LD_VAR 0 6
8162: PUSH
8163: LD_VAR 0 2
8167: PUSH
8168: LD_VAR 0 5
8172: ARRAY
8173: ARRAY
8174: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8175: LD_ADDR_VAR 0 7
8179: PUSH
8180: LD_VAR 0 7
8184: PUSH
8185: LD_VAR 0 6
8189: PUSH
8190: EMPTY
8191: LIST
8192: ADD
8193: ST_TO_ADDR
// end ;
8194: GO 8150
8196: POP
8197: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8198: LD_ADDR_VAR 0 6
8202: PUSH
8203: LD_VAR 0 6
8207: PPUSH
8208: LD_VAR 0 2
8212: PUSH
8213: LD_VAR 0 2
8217: ARRAY
8218: PPUSH
8219: LD_VAR 0 3
8223: PPUSH
8224: CALL_OW 1
8228: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8229: LD_ADDR_VAR 0 7
8233: PUSH
8234: LD_VAR 0 7
8238: PPUSH
8239: LD_VAR 0 7
8243: PPUSH
8244: LD_VAR 0 6
8248: PPUSH
8249: CALL_OW 1
8253: ST_TO_ADDR
// for i = s_arr downto 2 do
8254: LD_ADDR_VAR 0 5
8258: PUSH
8259: DOUBLE
8260: LD_VAR 0 7
8264: INC
8265: ST_TO_ADDR
8266: LD_INT 2
8268: PUSH
8269: FOR_DOWNTO
8270: IFFALSE 8354
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8272: LD_ADDR_VAR 0 6
8276: PUSH
8277: LD_VAR 0 7
8281: PUSH
8282: LD_VAR 0 5
8286: PUSH
8287: LD_INT 1
8289: MINUS
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_VAR 0 5
8301: PUSH
8302: LD_INT 1
8304: MINUS
8305: ARRAY
8306: PPUSH
8307: LD_VAR 0 7
8311: PUSH
8312: LD_VAR 0 5
8316: ARRAY
8317: PPUSH
8318: CALL_OW 1
8322: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8323: LD_ADDR_VAR 0 7
8327: PUSH
8328: LD_VAR 0 7
8332: PPUSH
8333: LD_VAR 0 5
8337: PUSH
8338: LD_INT 1
8340: MINUS
8341: PPUSH
8342: LD_VAR 0 6
8346: PPUSH
8347: CALL_OW 1
8351: ST_TO_ADDR
// end ;
8352: GO 8269
8354: POP
8355: POP
// result := s_arr [ 1 ] ;
8356: LD_ADDR_VAR 0 4
8360: PUSH
8361: LD_VAR 0 7
8365: PUSH
8366: LD_INT 1
8368: ARRAY
8369: ST_TO_ADDR
// end ; end ;
8370: LD_VAR 0 4
8374: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8375: LD_INT 0
8377: PPUSH
8378: PPUSH
// if not list then
8379: LD_VAR 0 1
8383: NOT
8384: IFFALSE 8388
// exit ;
8386: GO 8479
// i := list [ pos1 ] ;
8388: LD_ADDR_VAR 0 5
8392: PUSH
8393: LD_VAR 0 1
8397: PUSH
8398: LD_VAR 0 2
8402: ARRAY
8403: ST_TO_ADDR
// if not i then
8404: LD_VAR 0 5
8408: NOT
8409: IFFALSE 8413
// exit ;
8411: GO 8479
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8413: LD_ADDR_VAR 0 1
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_VAR 0 2
8427: PPUSH
8428: LD_VAR 0 1
8432: PUSH
8433: LD_VAR 0 3
8437: ARRAY
8438: PPUSH
8439: CALL_OW 1
8443: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8444: LD_ADDR_VAR 0 1
8448: PUSH
8449: LD_VAR 0 1
8453: PPUSH
8454: LD_VAR 0 3
8458: PPUSH
8459: LD_VAR 0 5
8463: PPUSH
8464: CALL_OW 1
8468: ST_TO_ADDR
// result := list ;
8469: LD_ADDR_VAR 0 4
8473: PUSH
8474: LD_VAR 0 1
8478: ST_TO_ADDR
// end ;
8479: LD_VAR 0 4
8483: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8484: LD_INT 0
8486: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8487: LD_ADDR_VAR 0 5
8491: PUSH
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 250
8501: PPUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 251
8511: PPUSH
8512: LD_VAR 0 2
8516: PPUSH
8517: LD_VAR 0 3
8521: PPUSH
8522: LD_VAR 0 4
8526: PPUSH
8527: CALL 8537 0 5
8531: ST_TO_ADDR
// end ;
8532: LD_VAR 0 5
8536: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8537: LD_INT 0
8539: PPUSH
8540: PPUSH
8541: PPUSH
8542: PPUSH
// if not list then
8543: LD_VAR 0 3
8547: NOT
8548: IFFALSE 8552
// exit ;
8550: GO 8940
// result := [ ] ;
8552: LD_ADDR_VAR 0 6
8556: PUSH
8557: EMPTY
8558: ST_TO_ADDR
// for i in list do
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_VAR 0 3
8568: PUSH
8569: FOR_IN
8570: IFFALSE 8772
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8572: LD_ADDR_VAR 0 9
8576: PUSH
8577: LD_VAR 0 7
8581: PPUSH
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PPUSH
8592: CALL_OW 297
8596: ST_TO_ADDR
// if not result then
8597: LD_VAR 0 6
8601: NOT
8602: IFFALSE 8628
// result := [ [ i , tmp ] ] else
8604: LD_ADDR_VAR 0 6
8608: PUSH
8609: LD_VAR 0 7
8613: PUSH
8614: LD_VAR 0 9
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: EMPTY
8624: LIST
8625: ST_TO_ADDR
8626: GO 8770
// begin if result [ result ] [ 2 ] < tmp then
8628: LD_VAR 0 6
8632: PUSH
8633: LD_VAR 0 6
8637: ARRAY
8638: PUSH
8639: LD_INT 2
8641: ARRAY
8642: PUSH
8643: LD_VAR 0 9
8647: LESS
8648: IFFALSE 8690
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8650: LD_ADDR_VAR 0 6
8654: PUSH
8655: LD_VAR 0 6
8659: PPUSH
8660: LD_VAR 0 6
8664: PUSH
8665: LD_INT 1
8667: PLUS
8668: PPUSH
8669: LD_VAR 0 7
8673: PUSH
8674: LD_VAR 0 9
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PPUSH
8683: CALL_OW 2
8687: ST_TO_ADDR
8688: GO 8770
// for j = 1 to result do
8690: LD_ADDR_VAR 0 8
8694: PUSH
8695: DOUBLE
8696: LD_INT 1
8698: DEC
8699: ST_TO_ADDR
8700: LD_VAR 0 6
8704: PUSH
8705: FOR_TO
8706: IFFALSE 8768
// begin if tmp < result [ j ] [ 2 ] then
8708: LD_VAR 0 9
8712: PUSH
8713: LD_VAR 0 6
8717: PUSH
8718: LD_VAR 0 8
8722: ARRAY
8723: PUSH
8724: LD_INT 2
8726: ARRAY
8727: LESS
8728: IFFALSE 8766
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8730: LD_ADDR_VAR 0 6
8734: PUSH
8735: LD_VAR 0 6
8739: PPUSH
8740: LD_VAR 0 8
8744: PPUSH
8745: LD_VAR 0 7
8749: PUSH
8750: LD_VAR 0 9
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 2
8763: ST_TO_ADDR
// break ;
8764: GO 8768
// end ; end ;
8766: GO 8705
8768: POP
8769: POP
// end ; end ;
8770: GO 8569
8772: POP
8773: POP
// if result and not asc then
8774: LD_VAR 0 6
8778: PUSH
8779: LD_VAR 0 4
8783: NOT
8784: AND
8785: IFFALSE 8860
// begin tmp := result ;
8787: LD_ADDR_VAR 0 9
8791: PUSH
8792: LD_VAR 0 6
8796: ST_TO_ADDR
// for i = tmp downto 1 do
8797: LD_ADDR_VAR 0 7
8801: PUSH
8802: DOUBLE
8803: LD_VAR 0 9
8807: INC
8808: ST_TO_ADDR
8809: LD_INT 1
8811: PUSH
8812: FOR_DOWNTO
8813: IFFALSE 8858
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8815: LD_ADDR_VAR 0 6
8819: PUSH
8820: LD_VAR 0 6
8824: PPUSH
8825: LD_VAR 0 9
8829: PUSH
8830: LD_VAR 0 7
8834: MINUS
8835: PUSH
8836: LD_INT 1
8838: PLUS
8839: PPUSH
8840: LD_VAR 0 9
8844: PUSH
8845: LD_VAR 0 7
8849: ARRAY
8850: PPUSH
8851: CALL_OW 1
8855: ST_TO_ADDR
8856: GO 8812
8858: POP
8859: POP
// end ; tmp := [ ] ;
8860: LD_ADDR_VAR 0 9
8864: PUSH
8865: EMPTY
8866: ST_TO_ADDR
// if mode then
8867: LD_VAR 0 5
8871: IFFALSE 8940
// begin for i = 1 to result do
8873: LD_ADDR_VAR 0 7
8877: PUSH
8878: DOUBLE
8879: LD_INT 1
8881: DEC
8882: ST_TO_ADDR
8883: LD_VAR 0 6
8887: PUSH
8888: FOR_TO
8889: IFFALSE 8928
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8891: LD_ADDR_VAR 0 9
8895: PUSH
8896: LD_VAR 0 9
8900: PPUSH
8901: LD_VAR 0 7
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_VAR 0 7
8915: ARRAY
8916: PUSH
8917: LD_INT 1
8919: ARRAY
8920: PPUSH
8921: CALL_OW 1
8925: ST_TO_ADDR
8926: GO 8888
8928: POP
8929: POP
// result := tmp ;
8930: LD_ADDR_VAR 0 6
8934: PUSH
8935: LD_VAR 0 9
8939: ST_TO_ADDR
// end ; end ;
8940: LD_VAR 0 6
8944: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8945: LD_INT 0
8947: PPUSH
8948: PPUSH
8949: PPUSH
8950: PPUSH
8951: PPUSH
8952: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8953: LD_ADDR_VAR 0 5
8957: PUSH
8958: LD_INT 0
8960: PUSH
8961: LD_INT 0
8963: PUSH
8964: LD_INT 0
8966: PUSH
8967: EMPTY
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: ST_TO_ADDR
// if not x or not y then
8975: LD_VAR 0 2
8979: NOT
8980: PUSH
8981: LD_VAR 0 3
8985: NOT
8986: OR
8987: IFFALSE 8991
// exit ;
8989: GO 10637
// if not range then
8991: LD_VAR 0 4
8995: NOT
8996: IFFALSE 9006
// range := 10 ;
8998: LD_ADDR_VAR 0 4
9002: PUSH
9003: LD_INT 10
9005: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9006: LD_ADDR_VAR 0 8
9010: PUSH
9011: LD_INT 81
9013: PUSH
9014: LD_VAR 0 1
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 92
9025: PUSH
9026: LD_VAR 0 2
9030: PUSH
9031: LD_VAR 0 3
9035: PUSH
9036: LD_VAR 0 4
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: PUSH
9047: LD_INT 3
9049: PUSH
9050: LD_INT 21
9052: PUSH
9053: LD_INT 3
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: PPUSH
9069: CALL_OW 69
9073: ST_TO_ADDR
// if not tmp then
9074: LD_VAR 0 8
9078: NOT
9079: IFFALSE 9083
// exit ;
9081: GO 10637
// for i in tmp do
9083: LD_ADDR_VAR 0 6
9087: PUSH
9088: LD_VAR 0 8
9092: PUSH
9093: FOR_IN
9094: IFFALSE 10612
// begin points := [ 0 , 0 , 0 ] ;
9096: LD_ADDR_VAR 0 9
9100: PUSH
9101: LD_INT 0
9103: PUSH
9104: LD_INT 0
9106: PUSH
9107: LD_INT 0
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: ST_TO_ADDR
// bpoints := 1 ;
9115: LD_ADDR_VAR 0 10
9119: PUSH
9120: LD_INT 1
9122: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9123: LD_VAR 0 6
9127: PPUSH
9128: CALL_OW 247
9132: PUSH
9133: LD_INT 1
9135: DOUBLE
9136: EQUAL
9137: IFTRUE 9141
9139: GO 9719
9141: POP
// begin if GetClass ( i ) = 1 then
9142: LD_VAR 0 6
9146: PPUSH
9147: CALL_OW 257
9151: PUSH
9152: LD_INT 1
9154: EQUAL
9155: IFFALSE 9176
// points := [ 10 , 5 , 3 ] ;
9157: LD_ADDR_VAR 0 9
9161: PUSH
9162: LD_INT 10
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: LD_INT 3
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9176: LD_VAR 0 6
9180: PPUSH
9181: CALL_OW 257
9185: PUSH
9186: LD_INT 2
9188: PUSH
9189: LD_INT 3
9191: PUSH
9192: LD_INT 4
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: IN
9200: IFFALSE 9221
// points := [ 3 , 2 , 1 ] ;
9202: LD_ADDR_VAR 0 9
9206: PUSH
9207: LD_INT 3
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: LD_INT 1
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9221: LD_VAR 0 6
9225: PPUSH
9226: CALL_OW 257
9230: PUSH
9231: LD_INT 5
9233: EQUAL
9234: IFFALSE 9255
// points := [ 130 , 5 , 2 ] ;
9236: LD_ADDR_VAR 0 9
9240: PUSH
9241: LD_INT 130
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: LD_INT 2
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9255: LD_VAR 0 6
9259: PPUSH
9260: CALL_OW 257
9264: PUSH
9265: LD_INT 8
9267: EQUAL
9268: IFFALSE 9289
// points := [ 35 , 35 , 30 ] ;
9270: LD_ADDR_VAR 0 9
9274: PUSH
9275: LD_INT 35
9277: PUSH
9278: LD_INT 35
9280: PUSH
9281: LD_INT 30
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9289: LD_VAR 0 6
9293: PPUSH
9294: CALL_OW 257
9298: PUSH
9299: LD_INT 9
9301: EQUAL
9302: IFFALSE 9323
// points := [ 20 , 55 , 40 ] ;
9304: LD_ADDR_VAR 0 9
9308: PUSH
9309: LD_INT 20
9311: PUSH
9312: LD_INT 55
9314: PUSH
9315: LD_INT 40
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9323: LD_VAR 0 6
9327: PPUSH
9328: CALL_OW 257
9332: PUSH
9333: LD_INT 12
9335: PUSH
9336: LD_INT 16
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: IN
9343: IFFALSE 9364
// points := [ 5 , 3 , 2 ] ;
9345: LD_ADDR_VAR 0 9
9349: PUSH
9350: LD_INT 5
9352: PUSH
9353: LD_INT 3
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9364: LD_VAR 0 6
9368: PPUSH
9369: CALL_OW 257
9373: PUSH
9374: LD_INT 17
9376: EQUAL
9377: IFFALSE 9398
// points := [ 100 , 50 , 75 ] ;
9379: LD_ADDR_VAR 0 9
9383: PUSH
9384: LD_INT 100
9386: PUSH
9387: LD_INT 50
9389: PUSH
9390: LD_INT 75
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: LIST
9397: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9398: LD_VAR 0 6
9402: PPUSH
9403: CALL_OW 257
9407: PUSH
9408: LD_INT 15
9410: EQUAL
9411: IFFALSE 9432
// points := [ 10 , 5 , 3 ] ;
9413: LD_ADDR_VAR 0 9
9417: PUSH
9418: LD_INT 10
9420: PUSH
9421: LD_INT 5
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9432: LD_VAR 0 6
9436: PPUSH
9437: CALL_OW 257
9441: PUSH
9442: LD_INT 14
9444: EQUAL
9445: IFFALSE 9466
// points := [ 10 , 0 , 0 ] ;
9447: LD_ADDR_VAR 0 9
9451: PUSH
9452: LD_INT 10
9454: PUSH
9455: LD_INT 0
9457: PUSH
9458: LD_INT 0
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9466: LD_VAR 0 6
9470: PPUSH
9471: CALL_OW 257
9475: PUSH
9476: LD_INT 11
9478: EQUAL
9479: IFFALSE 9500
// points := [ 30 , 10 , 5 ] ;
9481: LD_ADDR_VAR 0 9
9485: PUSH
9486: LD_INT 30
9488: PUSH
9489: LD_INT 10
9491: PUSH
9492: LD_INT 5
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9500: LD_VAR 0 1
9504: PPUSH
9505: LD_INT 5
9507: PPUSH
9508: CALL_OW 321
9512: PUSH
9513: LD_INT 2
9515: EQUAL
9516: IFFALSE 9533
// bpoints := bpoints * 1.8 ;
9518: LD_ADDR_VAR 0 10
9522: PUSH
9523: LD_VAR 0 10
9527: PUSH
9528: LD_REAL  1.80000000000000E+0000
9531: MUL
9532: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9533: LD_VAR 0 6
9537: PPUSH
9538: CALL_OW 257
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: LD_INT 2
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: LD_INT 4
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: IN
9561: PUSH
9562: LD_VAR 0 1
9566: PPUSH
9567: LD_INT 51
9569: PPUSH
9570: CALL_OW 321
9574: PUSH
9575: LD_INT 2
9577: EQUAL
9578: AND
9579: IFFALSE 9596
// bpoints := bpoints * 1.2 ;
9581: LD_ADDR_VAR 0 10
9585: PUSH
9586: LD_VAR 0 10
9590: PUSH
9591: LD_REAL  1.20000000000000E+0000
9594: MUL
9595: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9596: LD_VAR 0 6
9600: PPUSH
9601: CALL_OW 257
9605: PUSH
9606: LD_INT 5
9608: PUSH
9609: LD_INT 7
9611: PUSH
9612: LD_INT 9
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: IN
9620: PUSH
9621: LD_VAR 0 1
9625: PPUSH
9626: LD_INT 52
9628: PPUSH
9629: CALL_OW 321
9633: PUSH
9634: LD_INT 2
9636: EQUAL
9637: AND
9638: IFFALSE 9655
// bpoints := bpoints * 1.5 ;
9640: LD_ADDR_VAR 0 10
9644: PUSH
9645: LD_VAR 0 10
9649: PUSH
9650: LD_REAL  1.50000000000000E+0000
9653: MUL
9654: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9655: LD_VAR 0 1
9659: PPUSH
9660: LD_INT 66
9662: PPUSH
9663: CALL_OW 321
9667: PUSH
9668: LD_INT 2
9670: EQUAL
9671: IFFALSE 9688
// bpoints := bpoints * 1.1 ;
9673: LD_ADDR_VAR 0 10
9677: PUSH
9678: LD_VAR 0 10
9682: PUSH
9683: LD_REAL  1.10000000000000E+0000
9686: MUL
9687: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9688: LD_ADDR_VAR 0 10
9692: PUSH
9693: LD_VAR 0 10
9697: PUSH
9698: LD_VAR 0 6
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 259
9710: PUSH
9711: LD_REAL  1.15000000000000E+0000
9714: MUL
9715: MUL
9716: ST_TO_ADDR
// end ; unit_vehicle :
9717: GO 10541
9719: LD_INT 2
9721: DOUBLE
9722: EQUAL
9723: IFTRUE 9727
9725: GO 10529
9727: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9728: LD_VAR 0 6
9732: PPUSH
9733: CALL_OW 264
9737: PUSH
9738: LD_INT 2
9740: PUSH
9741: LD_INT 42
9743: PUSH
9744: LD_INT 24
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: IN
9752: IFFALSE 9773
// points := [ 25 , 5 , 3 ] ;
9754: LD_ADDR_VAR 0 9
9758: PUSH
9759: LD_INT 25
9761: PUSH
9762: LD_INT 5
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9773: LD_VAR 0 6
9777: PPUSH
9778: CALL_OW 264
9782: PUSH
9783: LD_INT 4
9785: PUSH
9786: LD_INT 43
9788: PUSH
9789: LD_INT 25
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: IN
9797: IFFALSE 9818
// points := [ 40 , 15 , 5 ] ;
9799: LD_ADDR_VAR 0 9
9803: PUSH
9804: LD_INT 40
9806: PUSH
9807: LD_INT 15
9809: PUSH
9810: LD_INT 5
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9818: LD_VAR 0 6
9822: PPUSH
9823: CALL_OW 264
9827: PUSH
9828: LD_INT 3
9830: PUSH
9831: LD_INT 23
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: IN
9838: IFFALSE 9859
// points := [ 7 , 25 , 8 ] ;
9840: LD_ADDR_VAR 0 9
9844: PUSH
9845: LD_INT 7
9847: PUSH
9848: LD_INT 25
9850: PUSH
9851: LD_INT 8
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9859: LD_VAR 0 6
9863: PPUSH
9864: CALL_OW 264
9868: PUSH
9869: LD_INT 5
9871: PUSH
9872: LD_INT 27
9874: PUSH
9875: LD_INT 44
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: IN
9883: IFFALSE 9904
// points := [ 14 , 50 , 16 ] ;
9885: LD_ADDR_VAR 0 9
9889: PUSH
9890: LD_INT 14
9892: PUSH
9893: LD_INT 50
9895: PUSH
9896: LD_INT 16
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9904: LD_VAR 0 6
9908: PPUSH
9909: CALL_OW 264
9913: PUSH
9914: LD_INT 6
9916: PUSH
9917: LD_INT 46
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: IN
9924: IFFALSE 9945
// points := [ 32 , 120 , 70 ] ;
9926: LD_ADDR_VAR 0 9
9930: PUSH
9931: LD_INT 32
9933: PUSH
9934: LD_INT 120
9936: PUSH
9937: LD_INT 70
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
9945: LD_VAR 0 6
9949: PPUSH
9950: CALL_OW 264
9954: PUSH
9955: LD_INT 7
9957: PUSH
9958: LD_INT 28
9960: PUSH
9961: LD_INT 45
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: IN
9969: IFFALSE 9990
// points := [ 35 , 20 , 45 ] ;
9971: LD_ADDR_VAR 0 9
9975: PUSH
9976: LD_INT 35
9978: PUSH
9979: LD_INT 20
9981: PUSH
9982: LD_INT 45
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9990: LD_VAR 0 6
9994: PPUSH
9995: CALL_OW 264
9999: PUSH
10000: LD_INT 47
10002: PUSH
10003: EMPTY
10004: LIST
10005: IN
10006: IFFALSE 10027
// points := [ 67 , 45 , 75 ] ;
10008: LD_ADDR_VAR 0 9
10012: PUSH
10013: LD_INT 67
10015: PUSH
10016: LD_INT 45
10018: PUSH
10019: LD_INT 75
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10027: LD_VAR 0 6
10031: PPUSH
10032: CALL_OW 264
10036: PUSH
10037: LD_INT 26
10039: PUSH
10040: EMPTY
10041: LIST
10042: IN
10043: IFFALSE 10064
// points := [ 120 , 30 , 80 ] ;
10045: LD_ADDR_VAR 0 9
10049: PUSH
10050: LD_INT 120
10052: PUSH
10053: LD_INT 30
10055: PUSH
10056: LD_INT 80
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10064: LD_VAR 0 6
10068: PPUSH
10069: CALL_OW 264
10073: PUSH
10074: LD_INT 22
10076: PUSH
10077: EMPTY
10078: LIST
10079: IN
10080: IFFALSE 10101
// points := [ 40 , 1 , 1 ] ;
10082: LD_ADDR_VAR 0 9
10086: PUSH
10087: LD_INT 40
10089: PUSH
10090: LD_INT 1
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10101: LD_VAR 0 6
10105: PPUSH
10106: CALL_OW 264
10110: PUSH
10111: LD_INT 29
10113: PUSH
10114: EMPTY
10115: LIST
10116: IN
10117: IFFALSE 10138
// points := [ 70 , 200 , 400 ] ;
10119: LD_ADDR_VAR 0 9
10123: PUSH
10124: LD_INT 70
10126: PUSH
10127: LD_INT 200
10129: PUSH
10130: LD_INT 400
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10138: LD_VAR 0 6
10142: PPUSH
10143: CALL_OW 264
10147: PUSH
10148: LD_INT 14
10150: PUSH
10151: LD_INT 53
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: IN
10158: IFFALSE 10179
// points := [ 40 , 10 , 20 ] ;
10160: LD_ADDR_VAR 0 9
10164: PUSH
10165: LD_INT 40
10167: PUSH
10168: LD_INT 10
10170: PUSH
10171: LD_INT 20
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: LIST
10178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10179: LD_VAR 0 6
10183: PPUSH
10184: CALL_OW 264
10188: PUSH
10189: LD_INT 9
10191: PUSH
10192: EMPTY
10193: LIST
10194: IN
10195: IFFALSE 10216
// points := [ 5 , 70 , 20 ] ;
10197: LD_ADDR_VAR 0 9
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: LD_INT 70
10207: PUSH
10208: LD_INT 20
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10216: LD_VAR 0 6
10220: PPUSH
10221: CALL_OW 264
10225: PUSH
10226: LD_INT 10
10228: PUSH
10229: EMPTY
10230: LIST
10231: IN
10232: IFFALSE 10253
// points := [ 35 , 110 , 70 ] ;
10234: LD_ADDR_VAR 0 9
10238: PUSH
10239: LD_INT 35
10241: PUSH
10242: LD_INT 110
10244: PUSH
10245: LD_INT 70
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10253: LD_VAR 0 6
10257: PPUSH
10258: CALL_OW 265
10262: PUSH
10263: LD_INT 25
10265: EQUAL
10266: IFFALSE 10287
// points := [ 80 , 65 , 100 ] ;
10268: LD_ADDR_VAR 0 9
10272: PUSH
10273: LD_INT 80
10275: PUSH
10276: LD_INT 65
10278: PUSH
10279: LD_INT 100
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10287: LD_VAR 0 6
10291: PPUSH
10292: CALL_OW 263
10296: PUSH
10297: LD_INT 1
10299: EQUAL
10300: IFFALSE 10335
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10302: LD_ADDR_VAR 0 10
10306: PUSH
10307: LD_VAR 0 10
10311: PUSH
10312: LD_VAR 0 6
10316: PPUSH
10317: CALL_OW 311
10321: PPUSH
10322: LD_INT 3
10324: PPUSH
10325: CALL_OW 259
10329: PUSH
10330: LD_INT 4
10332: MUL
10333: MUL
10334: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10335: LD_VAR 0 6
10339: PPUSH
10340: CALL_OW 263
10344: PUSH
10345: LD_INT 2
10347: EQUAL
10348: IFFALSE 10399
// begin j := IsControledBy ( i ) ;
10350: LD_ADDR_VAR 0 7
10354: PUSH
10355: LD_VAR 0 6
10359: PPUSH
10360: CALL_OW 312
10364: ST_TO_ADDR
// if j then
10365: LD_VAR 0 7
10369: IFFALSE 10399
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10371: LD_ADDR_VAR 0 10
10375: PUSH
10376: LD_VAR 0 10
10380: PUSH
10381: LD_VAR 0 7
10385: PPUSH
10386: LD_INT 3
10388: PPUSH
10389: CALL_OW 259
10393: PUSH
10394: LD_INT 3
10396: MUL
10397: MUL
10398: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10399: LD_VAR 0 6
10403: PPUSH
10404: CALL_OW 264
10408: PUSH
10409: LD_INT 5
10411: PUSH
10412: LD_INT 6
10414: PUSH
10415: LD_INT 46
10417: PUSH
10418: LD_INT 44
10420: PUSH
10421: LD_INT 47
10423: PUSH
10424: LD_INT 45
10426: PUSH
10427: LD_INT 28
10429: PUSH
10430: LD_INT 7
10432: PUSH
10433: LD_INT 27
10435: PUSH
10436: LD_INT 29
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: IN
10451: PUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: LD_INT 52
10459: PPUSH
10460: CALL_OW 321
10464: PUSH
10465: LD_INT 2
10467: EQUAL
10468: AND
10469: IFFALSE 10486
// bpoints := bpoints * 1.2 ;
10471: LD_ADDR_VAR 0 10
10475: PUSH
10476: LD_VAR 0 10
10480: PUSH
10481: LD_REAL  1.20000000000000E+0000
10484: MUL
10485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10486: LD_VAR 0 6
10490: PPUSH
10491: CALL_OW 264
10495: PUSH
10496: LD_INT 6
10498: PUSH
10499: LD_INT 46
10501: PUSH
10502: LD_INT 47
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: IN
10510: IFFALSE 10527
// bpoints := bpoints * 1.2 ;
10512: LD_ADDR_VAR 0 10
10516: PUSH
10517: LD_VAR 0 10
10521: PUSH
10522: LD_REAL  1.20000000000000E+0000
10525: MUL
10526: ST_TO_ADDR
// end ; unit_building :
10527: GO 10541
10529: LD_INT 3
10531: DOUBLE
10532: EQUAL
10533: IFTRUE 10537
10535: GO 10540
10537: POP
// ; end ;
10538: GO 10541
10540: POP
// for j = 1 to 3 do
10541: LD_ADDR_VAR 0 7
10545: PUSH
10546: DOUBLE
10547: LD_INT 1
10549: DEC
10550: ST_TO_ADDR
10551: LD_INT 3
10553: PUSH
10554: FOR_TO
10555: IFFALSE 10608
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10557: LD_ADDR_VAR 0 5
10561: PUSH
10562: LD_VAR 0 5
10566: PPUSH
10567: LD_VAR 0 7
10571: PPUSH
10572: LD_VAR 0 5
10576: PUSH
10577: LD_VAR 0 7
10581: ARRAY
10582: PUSH
10583: LD_VAR 0 9
10587: PUSH
10588: LD_VAR 0 7
10592: ARRAY
10593: PUSH
10594: LD_VAR 0 10
10598: MUL
10599: PLUS
10600: PPUSH
10601: CALL_OW 1
10605: ST_TO_ADDR
10606: GO 10554
10608: POP
10609: POP
// end ;
10610: GO 9093
10612: POP
10613: POP
// result := Replace ( result , 4 , tmp ) ;
10614: LD_ADDR_VAR 0 5
10618: PUSH
10619: LD_VAR 0 5
10623: PPUSH
10624: LD_INT 4
10626: PPUSH
10627: LD_VAR 0 8
10631: PPUSH
10632: CALL_OW 1
10636: ST_TO_ADDR
// end ;
10637: LD_VAR 0 5
10641: RET
// export function DangerAtRange ( unit , range ) ; begin
10642: LD_INT 0
10644: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10645: LD_ADDR_VAR 0 3
10649: PUSH
10650: LD_VAR 0 1
10654: PPUSH
10655: CALL_OW 255
10659: PPUSH
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 250
10669: PPUSH
10670: LD_VAR 0 1
10674: PPUSH
10675: CALL_OW 251
10679: PPUSH
10680: LD_VAR 0 2
10684: PPUSH
10685: CALL 8945 0 4
10689: ST_TO_ADDR
// end ;
10690: LD_VAR 0 3
10694: RET
// export function DangerInArea ( side , area ) ; begin
10695: LD_INT 0
10697: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10698: LD_ADDR_VAR 0 3
10702: PUSH
10703: LD_VAR 0 2
10707: PPUSH
10708: LD_INT 81
10710: PUSH
10711: LD_VAR 0 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PPUSH
10720: CALL_OW 70
10724: ST_TO_ADDR
// end ;
10725: LD_VAR 0 3
10729: RET
// export function IsExtension ( b ) ; begin
10730: LD_INT 0
10732: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_VAR 0 1
10742: PUSH
10743: LD_INT 23
10745: PUSH
10746: LD_INT 20
10748: PUSH
10749: LD_INT 22
10751: PUSH
10752: LD_INT 17
10754: PUSH
10755: LD_INT 24
10757: PUSH
10758: LD_INT 21
10760: PUSH
10761: LD_INT 19
10763: PUSH
10764: LD_INT 16
10766: PUSH
10767: LD_INT 25
10769: PUSH
10770: LD_INT 18
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: IN
10785: ST_TO_ADDR
// end ;
10786: LD_VAR 0 2
10790: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
10791: LD_INT 0
10793: PPUSH
10794: PPUSH
10795: PPUSH
// result := [ ] ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: EMPTY
10802: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10803: LD_ADDR_VAR 0 4
10807: PUSH
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 70
10827: ST_TO_ADDR
// if not tmp then
10828: LD_VAR 0 4
10832: NOT
10833: IFFALSE 10837
// exit ;
10835: GO 10895
// for i in tmp do
10837: LD_ADDR_VAR 0 5
10841: PUSH
10842: LD_VAR 0 4
10846: PUSH
10847: FOR_IN
10848: IFFALSE 10883
// if GetBase ( i ) <> base then
10850: LD_VAR 0 5
10854: PPUSH
10855: CALL_OW 274
10859: PUSH
10860: LD_VAR 0 1
10864: NONEQUAL
10865: IFFALSE 10881
// ComLinkToBase ( base , i ) ;
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_VAR 0 5
10876: PPUSH
10877: CALL_OW 169
10881: GO 10847
10883: POP
10884: POP
// result := tmp ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_VAR 0 4
10894: ST_TO_ADDR
// end ;
10895: LD_VAR 0 3
10899: RET
// export function ComComplete ( unit , b ) ; var i ; begin
10900: LD_INT 0
10902: PPUSH
10903: PPUSH
// if BuildingStatus ( b ) = bs_build then
10904: LD_VAR 0 2
10908: PPUSH
10909: CALL_OW 461
10913: PUSH
10914: LD_INT 1
10916: EQUAL
10917: IFFALSE 10977
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10919: LD_VAR 0 1
10923: PPUSH
10924: LD_STRING h
10926: PUSH
10927: LD_VAR 0 2
10931: PPUSH
10932: CALL_OW 250
10936: PUSH
10937: LD_VAR 0 2
10941: PPUSH
10942: CALL_OW 251
10946: PUSH
10947: LD_VAR 0 2
10951: PUSH
10952: LD_INT 0
10954: PUSH
10955: LD_INT 0
10957: PUSH
10958: LD_INT 0
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: PPUSH
10973: CALL_OW 446
// end ;
10977: LD_VAR 0 3
10981: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10982: LD_INT 0
10984: PPUSH
10985: PPUSH
10986: PPUSH
10987: PPUSH
10988: PPUSH
10989: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
10990: LD_VAR 0 1
10994: NOT
10995: PUSH
10996: LD_VAR 0 1
11000: PPUSH
11001: CALL_OW 263
11005: PUSH
11006: LD_INT 2
11008: EQUAL
11009: NOT
11010: OR
11011: IFFALSE 11015
// exit ;
11013: GO 11331
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11015: LD_ADDR_VAR 0 6
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_VAR 0 1
11027: PPUSH
11028: CALL_OW 255
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 2
11039: PUSH
11040: LD_INT 30
11042: PUSH
11043: LD_INT 36
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 34
11052: PUSH
11053: LD_INT 31
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 69
11073: ST_TO_ADDR
// if not tmp then
11074: LD_VAR 0 6
11078: NOT
11079: IFFALSE 11083
// exit ;
11081: GO 11331
// result := [ ] ;
11083: LD_ADDR_VAR 0 2
11087: PUSH
11088: EMPTY
11089: ST_TO_ADDR
// for i in tmp do
11090: LD_ADDR_VAR 0 3
11094: PUSH
11095: LD_VAR 0 6
11099: PUSH
11100: FOR_IN
11101: IFFALSE 11172
// begin t := UnitsInside ( i ) ;
11103: LD_ADDR_VAR 0 4
11107: PUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: CALL_OW 313
11117: ST_TO_ADDR
// if t then
11118: LD_VAR 0 4
11122: IFFALSE 11170
// for j in t do
11124: LD_ADDR_VAR 0 7
11128: PUSH
11129: LD_VAR 0 4
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11168
// result := Insert ( result , result + 1 , j ) ;
11137: LD_ADDR_VAR 0 2
11141: PUSH
11142: LD_VAR 0 2
11146: PPUSH
11147: LD_VAR 0 2
11151: PUSH
11152: LD_INT 1
11154: PLUS
11155: PPUSH
11156: LD_VAR 0 7
11160: PPUSH
11161: CALL_OW 2
11165: ST_TO_ADDR
11166: GO 11134
11168: POP
11169: POP
// end ;
11170: GO 11100
11172: POP
11173: POP
// if not result then
11174: LD_VAR 0 2
11178: NOT
11179: IFFALSE 11183
// exit ;
11181: GO 11331
// mech := result [ 1 ] ;
11183: LD_ADDR_VAR 0 5
11187: PUSH
11188: LD_VAR 0 2
11192: PUSH
11193: LD_INT 1
11195: ARRAY
11196: ST_TO_ADDR
// if result > 1 then
11197: LD_VAR 0 2
11201: PUSH
11202: LD_INT 1
11204: GREATER
11205: IFFALSE 11317
// for i = 2 to result do
11207: LD_ADDR_VAR 0 3
11211: PUSH
11212: DOUBLE
11213: LD_INT 2
11215: DEC
11216: ST_TO_ADDR
11217: LD_VAR 0 2
11221: PUSH
11222: FOR_TO
11223: IFFALSE 11315
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11225: LD_ADDR_VAR 0 4
11229: PUSH
11230: LD_VAR 0 2
11234: PUSH
11235: LD_VAR 0 3
11239: ARRAY
11240: PPUSH
11241: LD_INT 3
11243: PPUSH
11244: CALL_OW 259
11248: PUSH
11249: LD_VAR 0 2
11253: PUSH
11254: LD_VAR 0 3
11258: ARRAY
11259: PPUSH
11260: CALL_OW 432
11264: MINUS
11265: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11266: LD_VAR 0 4
11270: PUSH
11271: LD_VAR 0 5
11275: PPUSH
11276: LD_INT 3
11278: PPUSH
11279: CALL_OW 259
11283: PUSH
11284: LD_VAR 0 5
11288: PPUSH
11289: CALL_OW 432
11293: MINUS
11294: GREATEREQUAL
11295: IFFALSE 11313
// mech := result [ i ] ;
11297: LD_ADDR_VAR 0 5
11301: PUSH
11302: LD_VAR 0 2
11306: PUSH
11307: LD_VAR 0 3
11311: ARRAY
11312: ST_TO_ADDR
// end ;
11313: GO 11222
11315: POP
11316: POP
// ComLinkTo ( vehicle , mech ) ;
11317: LD_VAR 0 1
11321: PPUSH
11322: LD_VAR 0 5
11326: PPUSH
11327: CALL_OW 135
// end ;
11331: LD_VAR 0 2
11335: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11336: LD_INT 0
11338: PPUSH
11339: PPUSH
11340: PPUSH
11341: PPUSH
11342: PPUSH
11343: PPUSH
11344: PPUSH
11345: PPUSH
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
// result := [ ] ;
11351: LD_ADDR_VAR 0 7
11355: PUSH
11356: EMPTY
11357: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11358: LD_VAR 0 1
11362: PPUSH
11363: CALL_OW 266
11367: PUSH
11368: LD_INT 0
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: IN
11378: NOT
11379: IFFALSE 11383
// exit ;
11381: GO 13014
// if name then
11383: LD_VAR 0 3
11387: IFFALSE 11403
// SetBName ( base_dep , name ) ;
11389: LD_VAR 0 1
11393: PPUSH
11394: LD_VAR 0 3
11398: PPUSH
11399: CALL_OW 500
// base := GetBase ( base_dep ) ;
11403: LD_ADDR_VAR 0 15
11407: PUSH
11408: LD_VAR 0 1
11412: PPUSH
11413: CALL_OW 274
11417: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11418: LD_ADDR_VAR 0 16
11422: PUSH
11423: LD_VAR 0 1
11427: PPUSH
11428: CALL_OW 255
11432: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11433: LD_ADDR_VAR 0 17
11437: PUSH
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 248
11447: ST_TO_ADDR
// if sources then
11448: LD_VAR 0 5
11452: IFFALSE 11499
// for i = 1 to 3 do
11454: LD_ADDR_VAR 0 8
11458: PUSH
11459: DOUBLE
11460: LD_INT 1
11462: DEC
11463: ST_TO_ADDR
11464: LD_INT 3
11466: PUSH
11467: FOR_TO
11468: IFFALSE 11497
// AddResourceType ( base , i , sources [ i ] ) ;
11470: LD_VAR 0 15
11474: PPUSH
11475: LD_VAR 0 8
11479: PPUSH
11480: LD_VAR 0 5
11484: PUSH
11485: LD_VAR 0 8
11489: ARRAY
11490: PPUSH
11491: CALL_OW 276
11495: GO 11467
11497: POP
11498: POP
// buildings := GetBaseBuildings ( base , area ) ;
11499: LD_ADDR_VAR 0 18
11503: PUSH
11504: LD_VAR 0 15
11508: PPUSH
11509: LD_VAR 0 2
11513: PPUSH
11514: CALL 10791 0 2
11518: ST_TO_ADDR
// InitHc ;
11519: CALL_OW 19
// InitUc ;
11523: CALL_OW 18
// uc_side := side ;
11527: LD_ADDR_OWVAR 20
11531: PUSH
11532: LD_VAR 0 16
11536: ST_TO_ADDR
// uc_nation := nation ;
11537: LD_ADDR_OWVAR 21
11541: PUSH
11542: LD_VAR 0 17
11546: ST_TO_ADDR
// if buildings then
11547: LD_VAR 0 18
11551: IFFALSE 12873
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11553: LD_ADDR_VAR 0 19
11557: PUSH
11558: LD_VAR 0 18
11562: PPUSH
11563: LD_INT 2
11565: PUSH
11566: LD_INT 30
11568: PUSH
11569: LD_INT 29
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 30
11578: PUSH
11579: LD_INT 30
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: PPUSH
11591: CALL_OW 72
11595: ST_TO_ADDR
// if tmp then
11596: LD_VAR 0 19
11600: IFFALSE 11648
// for i in tmp do
11602: LD_ADDR_VAR 0 8
11606: PUSH
11607: LD_VAR 0 19
11611: PUSH
11612: FOR_IN
11613: IFFALSE 11646
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11615: LD_VAR 0 8
11619: PPUSH
11620: CALL_OW 250
11624: PPUSH
11625: LD_VAR 0 8
11629: PPUSH
11630: CALL_OW 251
11634: PPUSH
11635: LD_VAR 0 16
11639: PPUSH
11640: CALL_OW 441
11644: GO 11612
11646: POP
11647: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11648: LD_VAR 0 18
11652: PPUSH
11653: LD_INT 2
11655: PUSH
11656: LD_INT 30
11658: PUSH
11659: LD_INT 32
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 30
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: PPUSH
11681: CALL_OW 72
11685: IFFALSE 11773
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11687: LD_ADDR_VAR 0 8
11691: PUSH
11692: LD_VAR 0 18
11696: PPUSH
11697: LD_INT 2
11699: PUSH
11700: LD_INT 30
11702: PUSH
11703: LD_INT 32
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 30
11712: PUSH
11713: LD_INT 33
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: PUSH
11730: FOR_IN
11731: IFFALSE 11771
// begin if not GetBWeapon ( i ) then
11733: LD_VAR 0 8
11737: PPUSH
11738: CALL_OW 269
11742: NOT
11743: IFFALSE 11769
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11745: LD_VAR 0 8
11749: PPUSH
11750: LD_VAR 0 8
11754: PPUSH
11755: LD_VAR 0 2
11759: PPUSH
11760: CALL 13019 0 2
11764: PPUSH
11765: CALL_OW 431
// end ;
11769: GO 11730
11771: POP
11772: POP
// end ; for i = 1 to personel do
11773: LD_ADDR_VAR 0 8
11777: PUSH
11778: DOUBLE
11779: LD_INT 1
11781: DEC
11782: ST_TO_ADDR
11783: LD_VAR 0 6
11787: PUSH
11788: FOR_TO
11789: IFFALSE 12853
// begin if i > 4 then
11791: LD_VAR 0 8
11795: PUSH
11796: LD_INT 4
11798: GREATER
11799: IFFALSE 11803
// break ;
11801: GO 12853
// case i of 1 :
11803: LD_VAR 0 8
11807: PUSH
11808: LD_INT 1
11810: DOUBLE
11811: EQUAL
11812: IFTRUE 11816
11814: GO 11896
11816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11817: LD_ADDR_VAR 0 12
11821: PUSH
11822: LD_VAR 0 18
11826: PPUSH
11827: LD_INT 22
11829: PUSH
11830: LD_VAR 0 16
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 58
11841: PUSH
11842: EMPTY
11843: LIST
11844: PUSH
11845: LD_INT 2
11847: PUSH
11848: LD_INT 30
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 30
11860: PUSH
11861: LD_INT 4
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 30
11870: PUSH
11871: LD_INT 5
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: PPUSH
11889: CALL_OW 72
11893: ST_TO_ADDR
11894: GO 12118
11896: LD_INT 2
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 11966
11904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11905: LD_ADDR_VAR 0 12
11909: PUSH
11910: LD_VAR 0 18
11914: PPUSH
11915: LD_INT 22
11917: PUSH
11918: LD_VAR 0 16
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 2
11929: PUSH
11930: LD_INT 30
11932: PUSH
11933: LD_INT 0
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 72
11963: ST_TO_ADDR
11964: GO 12118
11966: LD_INT 3
11968: DOUBLE
11969: EQUAL
11970: IFTRUE 11974
11972: GO 12036
11974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11975: LD_ADDR_VAR 0 12
11979: PUSH
11980: LD_VAR 0 18
11984: PPUSH
11985: LD_INT 22
11987: PUSH
11988: LD_VAR 0 16
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 2
11999: PUSH
12000: LD_INT 30
12002: PUSH
12003: LD_INT 2
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 3
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 72
12033: ST_TO_ADDR
12034: GO 12118
12036: LD_INT 4
12038: DOUBLE
12039: EQUAL
12040: IFTRUE 12044
12042: GO 12117
12044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12045: LD_ADDR_VAR 0 12
12049: PUSH
12050: LD_VAR 0 18
12054: PPUSH
12055: LD_INT 22
12057: PUSH
12058: LD_VAR 0 16
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 2
12069: PUSH
12070: LD_INT 30
12072: PUSH
12073: LD_INT 6
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 30
12082: PUSH
12083: LD_INT 7
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 30
12092: PUSH
12093: LD_INT 8
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 72
12114: ST_TO_ADDR
12115: GO 12118
12117: POP
// if i = 1 then
12118: LD_VAR 0 8
12122: PUSH
12123: LD_INT 1
12125: EQUAL
12126: IFFALSE 12237
// begin tmp := [ ] ;
12128: LD_ADDR_VAR 0 19
12132: PUSH
12133: EMPTY
12134: ST_TO_ADDR
// for j in f do
12135: LD_ADDR_VAR 0 9
12139: PUSH
12140: LD_VAR 0 12
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12219
// if GetBType ( j ) = b_bunker then
12148: LD_VAR 0 9
12152: PPUSH
12153: CALL_OW 266
12157: PUSH
12158: LD_INT 32
12160: EQUAL
12161: IFFALSE 12188
// tmp := Insert ( tmp , 1 , j ) else
12163: LD_ADDR_VAR 0 19
12167: PUSH
12168: LD_VAR 0 19
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 9
12180: PPUSH
12181: CALL_OW 2
12185: ST_TO_ADDR
12186: GO 12217
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12188: LD_ADDR_VAR 0 19
12192: PUSH
12193: LD_VAR 0 19
12197: PPUSH
12198: LD_VAR 0 19
12202: PUSH
12203: LD_INT 1
12205: PLUS
12206: PPUSH
12207: LD_VAR 0 9
12211: PPUSH
12212: CALL_OW 2
12216: ST_TO_ADDR
12217: GO 12145
12219: POP
12220: POP
// if tmp then
12221: LD_VAR 0 19
12225: IFFALSE 12237
// f := tmp ;
12227: LD_ADDR_VAR 0 12
12231: PUSH
12232: LD_VAR 0 19
12236: ST_TO_ADDR
// end ; x := personel [ i ] ;
12237: LD_ADDR_VAR 0 13
12241: PUSH
12242: LD_VAR 0 6
12246: PUSH
12247: LD_VAR 0 8
12251: ARRAY
12252: ST_TO_ADDR
// if x = - 1 then
12253: LD_VAR 0 13
12257: PUSH
12258: LD_INT 1
12260: NEG
12261: EQUAL
12262: IFFALSE 12471
// begin for j in f do
12264: LD_ADDR_VAR 0 9
12268: PUSH
12269: LD_VAR 0 12
12273: PUSH
12274: FOR_IN
12275: IFFALSE 12467
// repeat InitHc ;
12277: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12281: LD_VAR 0 9
12285: PPUSH
12286: CALL_OW 266
12290: PUSH
12291: LD_INT 5
12293: EQUAL
12294: IFFALSE 12364
// begin if UnitsInside ( j ) < 3 then
12296: LD_VAR 0 9
12300: PPUSH
12301: CALL_OW 313
12305: PUSH
12306: LD_INT 3
12308: LESS
12309: IFFALSE 12345
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12311: LD_INT 0
12313: PPUSH
12314: LD_INT 5
12316: PUSH
12317: LD_INT 8
12319: PUSH
12320: LD_INT 9
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_VAR 0 17
12332: ARRAY
12333: PPUSH
12334: LD_VAR 0 4
12338: PPUSH
12339: CALL_OW 380
12343: GO 12362
// PrepareHuman ( false , i , skill ) ;
12345: LD_INT 0
12347: PPUSH
12348: LD_VAR 0 8
12352: PPUSH
12353: LD_VAR 0 4
12357: PPUSH
12358: CALL_OW 380
// end else
12362: GO 12381
// PrepareHuman ( false , i , skill ) ;
12364: LD_INT 0
12366: PPUSH
12367: LD_VAR 0 8
12371: PPUSH
12372: LD_VAR 0 4
12376: PPUSH
12377: CALL_OW 380
// un := CreateHuman ;
12381: LD_ADDR_VAR 0 14
12385: PUSH
12386: CALL_OW 44
12390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12391: LD_ADDR_VAR 0 7
12395: PUSH
12396: LD_VAR 0 7
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: LD_VAR 0 14
12408: PPUSH
12409: CALL_OW 2
12413: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12414: LD_VAR 0 14
12418: PPUSH
12419: LD_VAR 0 9
12423: PPUSH
12424: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12428: LD_VAR 0 9
12432: PPUSH
12433: CALL_OW 313
12437: PUSH
12438: LD_INT 6
12440: EQUAL
12441: PUSH
12442: LD_VAR 0 9
12446: PPUSH
12447: CALL_OW 266
12451: PUSH
12452: LD_INT 32
12454: PUSH
12455: LD_INT 31
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: IN
12462: OR
12463: IFFALSE 12277
12465: GO 12274
12467: POP
12468: POP
// end else
12469: GO 12851
// for j = 1 to x do
12471: LD_ADDR_VAR 0 9
12475: PUSH
12476: DOUBLE
12477: LD_INT 1
12479: DEC
12480: ST_TO_ADDR
12481: LD_VAR 0 13
12485: PUSH
12486: FOR_TO
12487: IFFALSE 12849
// begin InitHc ;
12489: CALL_OW 19
// if not f then
12493: LD_VAR 0 12
12497: NOT
12498: IFFALSE 12587
// begin PrepareHuman ( false , i , skill ) ;
12500: LD_INT 0
12502: PPUSH
12503: LD_VAR 0 8
12507: PPUSH
12508: LD_VAR 0 4
12512: PPUSH
12513: CALL_OW 380
// un := CreateHuman ;
12517: LD_ADDR_VAR 0 14
12521: PUSH
12522: CALL_OW 44
12526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12527: LD_ADDR_VAR 0 7
12531: PUSH
12532: LD_VAR 0 7
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: LD_VAR 0 14
12544: PPUSH
12545: CALL_OW 2
12549: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12550: LD_VAR 0 14
12554: PPUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 250
12564: PPUSH
12565: LD_VAR 0 1
12569: PPUSH
12570: CALL_OW 251
12574: PPUSH
12575: LD_INT 10
12577: PPUSH
12578: LD_INT 0
12580: PPUSH
12581: CALL_OW 50
// continue ;
12585: GO 12486
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12587: LD_VAR 0 12
12591: PUSH
12592: LD_INT 1
12594: ARRAY
12595: PPUSH
12596: CALL_OW 313
12600: PUSH
12601: LD_VAR 0 12
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 266
12614: PUSH
12615: LD_INT 32
12617: PUSH
12618: LD_INT 31
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: IN
12625: AND
12626: PUSH
12627: LD_VAR 0 12
12631: PUSH
12632: LD_INT 1
12634: ARRAY
12635: PPUSH
12636: CALL_OW 313
12640: PUSH
12641: LD_INT 6
12643: EQUAL
12644: OR
12645: IFFALSE 12665
// f := Delete ( f , 1 ) ;
12647: LD_ADDR_VAR 0 12
12651: PUSH
12652: LD_VAR 0 12
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL_OW 3
12664: ST_TO_ADDR
// if not f then
12665: LD_VAR 0 12
12669: NOT
12670: IFFALSE 12688
// begin x := x + 2 ;
12672: LD_ADDR_VAR 0 13
12676: PUSH
12677: LD_VAR 0 13
12681: PUSH
12682: LD_INT 2
12684: PLUS
12685: ST_TO_ADDR
// continue ;
12686: GO 12486
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12688: LD_VAR 0 12
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: PPUSH
12697: CALL_OW 266
12701: PUSH
12702: LD_INT 5
12704: EQUAL
12705: IFFALSE 12779
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12707: LD_VAR 0 12
12711: PUSH
12712: LD_INT 1
12714: ARRAY
12715: PPUSH
12716: CALL_OW 313
12720: PUSH
12721: LD_INT 3
12723: LESS
12724: IFFALSE 12760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12726: LD_INT 0
12728: PPUSH
12729: LD_INT 5
12731: PUSH
12732: LD_INT 8
12734: PUSH
12735: LD_INT 9
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: PUSH
12743: LD_VAR 0 17
12747: ARRAY
12748: PPUSH
12749: LD_VAR 0 4
12753: PPUSH
12754: CALL_OW 380
12758: GO 12777
// PrepareHuman ( false , i , skill ) ;
12760: LD_INT 0
12762: PPUSH
12763: LD_VAR 0 8
12767: PPUSH
12768: LD_VAR 0 4
12772: PPUSH
12773: CALL_OW 380
// end else
12777: GO 12796
// PrepareHuman ( false , i , skill ) ;
12779: LD_INT 0
12781: PPUSH
12782: LD_VAR 0 8
12786: PPUSH
12787: LD_VAR 0 4
12791: PPUSH
12792: CALL_OW 380
// un := CreateHuman ;
12796: LD_ADDR_VAR 0 14
12800: PUSH
12801: CALL_OW 44
12805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12806: LD_ADDR_VAR 0 7
12810: PUSH
12811: LD_VAR 0 7
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: LD_VAR 0 14
12823: PPUSH
12824: CALL_OW 2
12828: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12829: LD_VAR 0 14
12833: PPUSH
12834: LD_VAR 0 12
12838: PUSH
12839: LD_INT 1
12841: ARRAY
12842: PPUSH
12843: CALL_OW 52
// end ;
12847: GO 12486
12849: POP
12850: POP
// end ;
12851: GO 11788
12853: POP
12854: POP
// result := result ^ buildings ;
12855: LD_ADDR_VAR 0 7
12859: PUSH
12860: LD_VAR 0 7
12864: PUSH
12865: LD_VAR 0 18
12869: ADD
12870: ST_TO_ADDR
// end else
12871: GO 13014
// begin for i = 1 to personel do
12873: LD_ADDR_VAR 0 8
12877: PUSH
12878: DOUBLE
12879: LD_INT 1
12881: DEC
12882: ST_TO_ADDR
12883: LD_VAR 0 6
12887: PUSH
12888: FOR_TO
12889: IFFALSE 13012
// begin if i > 4 then
12891: LD_VAR 0 8
12895: PUSH
12896: LD_INT 4
12898: GREATER
12899: IFFALSE 12903
// break ;
12901: GO 13012
// x := personel [ i ] ;
12903: LD_ADDR_VAR 0 13
12907: PUSH
12908: LD_VAR 0 6
12912: PUSH
12913: LD_VAR 0 8
12917: ARRAY
12918: ST_TO_ADDR
// if x = - 1 then
12919: LD_VAR 0 13
12923: PUSH
12924: LD_INT 1
12926: NEG
12927: EQUAL
12928: IFFALSE 12932
// continue ;
12930: GO 12888
// PrepareHuman ( false , i , skill ) ;
12932: LD_INT 0
12934: PPUSH
12935: LD_VAR 0 8
12939: PPUSH
12940: LD_VAR 0 4
12944: PPUSH
12945: CALL_OW 380
// un := CreateHuman ;
12949: LD_ADDR_VAR 0 14
12953: PUSH
12954: CALL_OW 44
12958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12959: LD_VAR 0 14
12963: PPUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 250
12973: PPUSH
12974: LD_VAR 0 1
12978: PPUSH
12979: CALL_OW 251
12983: PPUSH
12984: LD_INT 10
12986: PPUSH
12987: LD_INT 0
12989: PPUSH
12990: CALL_OW 50
// result := result ^ un ;
12994: LD_ADDR_VAR 0 7
12998: PUSH
12999: LD_VAR 0 7
13003: PUSH
13004: LD_VAR 0 14
13008: ADD
13009: ST_TO_ADDR
// end ;
13010: GO 12888
13012: POP
13013: POP
// end ; end ;
13014: LD_VAR 0 7
13018: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13019: LD_INT 0
13021: PPUSH
13022: PPUSH
13023: PPUSH
13024: PPUSH
13025: PPUSH
13026: PPUSH
13027: PPUSH
13028: PPUSH
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
// result := false ;
13037: LD_ADDR_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13045: LD_VAR 0 1
13049: NOT
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 266
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: LD_INT 33
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: IN
13071: NOT
13072: OR
13073: IFFALSE 13077
// exit ;
13075: GO 14213
// nat := GetNation ( tower ) ;
13077: LD_ADDR_VAR 0 12
13081: PUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 248
13091: ST_TO_ADDR
// side := GetSide ( tower ) ;
13092: LD_ADDR_VAR 0 16
13096: PUSH
13097: LD_VAR 0 1
13101: PPUSH
13102: CALL_OW 255
13106: ST_TO_ADDR
// x := GetX ( tower ) ;
13107: LD_ADDR_VAR 0 10
13111: PUSH
13112: LD_VAR 0 1
13116: PPUSH
13117: CALL_OW 250
13121: ST_TO_ADDR
// y := GetY ( tower ) ;
13122: LD_ADDR_VAR 0 11
13126: PUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 251
13136: ST_TO_ADDR
// if not x or not y then
13137: LD_VAR 0 10
13141: NOT
13142: PUSH
13143: LD_VAR 0 11
13147: NOT
13148: OR
13149: IFFALSE 13153
// exit ;
13151: GO 14213
// weapon := 0 ;
13153: LD_ADDR_VAR 0 18
13157: PUSH
13158: LD_INT 0
13160: ST_TO_ADDR
// fac_list := [ ] ;
13161: LD_ADDR_VAR 0 17
13165: PUSH
13166: EMPTY
13167: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
13168: LD_ADDR_VAR 0 6
13172: PUSH
13173: LD_VAR 0 1
13177: PPUSH
13178: CALL_OW 274
13182: PPUSH
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL 10791 0 2
13192: PPUSH
13193: LD_INT 30
13195: PUSH
13196: LD_INT 3
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PPUSH
13203: CALL_OW 72
13207: ST_TO_ADDR
// if not factories then
13208: LD_VAR 0 6
13212: NOT
13213: IFFALSE 13217
// exit ;
13215: GO 14213
// for i in factories do
13217: LD_ADDR_VAR 0 8
13221: PUSH
13222: LD_VAR 0 6
13226: PUSH
13227: FOR_IN
13228: IFFALSE 13253
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 17
13239: PUSH
13240: LD_VAR 0 8
13244: PPUSH
13245: CALL_OW 478
13249: UNION
13250: ST_TO_ADDR
13251: GO 13227
13253: POP
13254: POP
// if not fac_list then
13255: LD_VAR 0 17
13259: NOT
13260: IFFALSE 13264
// exit ;
13262: GO 14213
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13264: LD_ADDR_VAR 0 5
13268: PUSH
13269: LD_INT 4
13271: PUSH
13272: LD_INT 5
13274: PUSH
13275: LD_INT 9
13277: PUSH
13278: LD_INT 10
13280: PUSH
13281: LD_INT 6
13283: PUSH
13284: LD_INT 7
13286: PUSH
13287: LD_INT 11
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: PUSH
13299: LD_INT 27
13301: PUSH
13302: LD_INT 28
13304: PUSH
13305: LD_INT 26
13307: PUSH
13308: LD_INT 30
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 43
13319: PUSH
13320: LD_INT 44
13322: PUSH
13323: LD_INT 46
13325: PUSH
13326: LD_INT 45
13328: PUSH
13329: LD_INT 47
13331: PUSH
13332: LD_INT 49
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: PUSH
13348: LD_VAR 0 12
13352: ARRAY
13353: ST_TO_ADDR
// for i in list do
13354: LD_ADDR_VAR 0 8
13358: PUSH
13359: LD_VAR 0 5
13363: PUSH
13364: FOR_IN
13365: IFFALSE 13398
// if not i in fac_list then
13367: LD_VAR 0 8
13371: PUSH
13372: LD_VAR 0 17
13376: IN
13377: NOT
13378: IFFALSE 13396
// list := list diff i ;
13380: LD_ADDR_VAR 0 5
13384: PUSH
13385: LD_VAR 0 5
13389: PUSH
13390: LD_VAR 0 8
13394: DIFF
13395: ST_TO_ADDR
13396: GO 13364
13398: POP
13399: POP
// if not list then
13400: LD_VAR 0 5
13404: NOT
13405: IFFALSE 13409
// exit ;
13407: GO 14213
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13409: LD_VAR 0 12
13413: PUSH
13414: LD_INT 3
13416: EQUAL
13417: PUSH
13418: LD_INT 49
13420: PUSH
13421: LD_VAR 0 5
13425: IN
13426: AND
13427: PUSH
13428: LD_INT 31
13430: PPUSH
13431: LD_VAR 0 16
13435: PPUSH
13436: CALL_OW 321
13440: PUSH
13441: LD_INT 2
13443: EQUAL
13444: AND
13445: IFFALSE 13505
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13447: LD_INT 22
13449: PUSH
13450: LD_VAR 0 16
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 35
13461: PUSH
13462: LD_INT 49
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 91
13471: PUSH
13472: LD_VAR 0 1
13476: PUSH
13477: LD_INT 10
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 69
13494: NOT
13495: IFFALSE 13505
// weapon := ru_time_lapser ;
13497: LD_ADDR_VAR 0 18
13501: PUSH
13502: LD_INT 49
13504: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13505: LD_VAR 0 12
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: LD_INT 2
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: IN
13520: PUSH
13521: LD_INT 11
13523: PUSH
13524: LD_VAR 0 5
13528: IN
13529: PUSH
13530: LD_INT 30
13532: PUSH
13533: LD_VAR 0 5
13537: IN
13538: OR
13539: AND
13540: PUSH
13541: LD_INT 6
13543: PPUSH
13544: LD_VAR 0 16
13548: PPUSH
13549: CALL_OW 321
13553: PUSH
13554: LD_INT 2
13556: EQUAL
13557: AND
13558: IFFALSE 13723
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13560: LD_INT 22
13562: PUSH
13563: LD_VAR 0 16
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 2
13574: PUSH
13575: LD_INT 35
13577: PUSH
13578: LD_INT 11
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 35
13587: PUSH
13588: LD_INT 30
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 91
13602: PUSH
13603: LD_VAR 0 1
13607: PUSH
13608: LD_INT 18
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 69
13625: NOT
13626: PUSH
13627: LD_INT 22
13629: PUSH
13630: LD_VAR 0 16
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 30
13644: PUSH
13645: LD_INT 32
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 30
13654: PUSH
13655: LD_INT 33
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 91
13669: PUSH
13670: LD_VAR 0 1
13674: PUSH
13675: LD_INT 12
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: EMPTY
13689: LIST
13690: PPUSH
13691: CALL_OW 69
13695: PUSH
13696: LD_INT 2
13698: GREATER
13699: AND
13700: IFFALSE 13723
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13702: LD_ADDR_VAR 0 18
13706: PUSH
13707: LD_INT 11
13709: PUSH
13710: LD_INT 30
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_VAR 0 12
13721: ARRAY
13722: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13723: LD_VAR 0 18
13727: NOT
13728: PUSH
13729: LD_INT 40
13731: PPUSH
13732: LD_VAR 0 16
13736: PPUSH
13737: CALL_OW 321
13741: PUSH
13742: LD_INT 2
13744: EQUAL
13745: AND
13746: PUSH
13747: LD_INT 7
13749: PUSH
13750: LD_VAR 0 5
13754: IN
13755: PUSH
13756: LD_INT 28
13758: PUSH
13759: LD_VAR 0 5
13763: IN
13764: OR
13765: PUSH
13766: LD_INT 45
13768: PUSH
13769: LD_VAR 0 5
13773: IN
13774: OR
13775: AND
13776: IFFALSE 14030
// begin hex := GetHexInfo ( x , y ) ;
13778: LD_ADDR_VAR 0 4
13782: PUSH
13783: LD_VAR 0 10
13787: PPUSH
13788: LD_VAR 0 11
13792: PPUSH
13793: CALL_OW 546
13797: ST_TO_ADDR
// if hex [ 1 ] then
13798: LD_VAR 0 4
13802: PUSH
13803: LD_INT 1
13805: ARRAY
13806: IFFALSE 13810
// exit ;
13808: GO 14213
// height := hex [ 2 ] ;
13810: LD_ADDR_VAR 0 15
13814: PUSH
13815: LD_VAR 0 4
13819: PUSH
13820: LD_INT 2
13822: ARRAY
13823: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13824: LD_ADDR_VAR 0 14
13828: PUSH
13829: LD_INT 0
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 3
13837: PUSH
13838: LD_INT 5
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: ST_TO_ADDR
// for i in tmp do
13847: LD_ADDR_VAR 0 8
13851: PUSH
13852: LD_VAR 0 14
13856: PUSH
13857: FOR_IN
13858: IFFALSE 14028
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13860: LD_ADDR_VAR 0 9
13864: PUSH
13865: LD_VAR 0 10
13869: PPUSH
13870: LD_VAR 0 8
13874: PPUSH
13875: LD_INT 5
13877: PPUSH
13878: CALL_OW 272
13882: PUSH
13883: LD_VAR 0 11
13887: PPUSH
13888: LD_VAR 0 8
13892: PPUSH
13893: LD_INT 5
13895: PPUSH
13896: CALL_OW 273
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13905: LD_VAR 0 9
13909: PUSH
13910: LD_INT 1
13912: ARRAY
13913: PPUSH
13914: LD_VAR 0 9
13918: PUSH
13919: LD_INT 2
13921: ARRAY
13922: PPUSH
13923: CALL_OW 488
13927: IFFALSE 14026
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13929: LD_ADDR_VAR 0 4
13933: PUSH
13934: LD_VAR 0 9
13938: PUSH
13939: LD_INT 1
13941: ARRAY
13942: PPUSH
13943: LD_VAR 0 9
13947: PUSH
13948: LD_INT 2
13950: ARRAY
13951: PPUSH
13952: CALL_OW 546
13956: ST_TO_ADDR
// if hex [ 1 ] then
13957: LD_VAR 0 4
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: IFFALSE 13969
// continue ;
13967: GO 13857
// h := hex [ 2 ] ;
13969: LD_ADDR_VAR 0 13
13973: PUSH
13974: LD_VAR 0 4
13978: PUSH
13979: LD_INT 2
13981: ARRAY
13982: ST_TO_ADDR
// if h + 7 < height then
13983: LD_VAR 0 13
13987: PUSH
13988: LD_INT 7
13990: PLUS
13991: PUSH
13992: LD_VAR 0 15
13996: LESS
13997: IFFALSE 14026
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13999: LD_ADDR_VAR 0 18
14003: PUSH
14004: LD_INT 7
14006: PUSH
14007: LD_INT 28
14009: PUSH
14010: LD_INT 45
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: LD_VAR 0 12
14022: ARRAY
14023: ST_TO_ADDR
// break ;
14024: GO 14028
// end ; end ; end ;
14026: GO 13857
14028: POP
14029: POP
// end ; if not weapon then
14030: LD_VAR 0 18
14034: NOT
14035: IFFALSE 14095
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14037: LD_ADDR_VAR 0 5
14041: PUSH
14042: LD_VAR 0 5
14046: PUSH
14047: LD_INT 11
14049: PUSH
14050: LD_INT 30
14052: PUSH
14053: LD_INT 49
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: DIFF
14061: ST_TO_ADDR
// if not list then
14062: LD_VAR 0 5
14066: NOT
14067: IFFALSE 14071
// exit ;
14069: GO 14213
// weapon := list [ rand ( 1 , list ) ] ;
14071: LD_ADDR_VAR 0 18
14075: PUSH
14076: LD_VAR 0 5
14080: PUSH
14081: LD_INT 1
14083: PPUSH
14084: LD_VAR 0 5
14088: PPUSH
14089: CALL_OW 12
14093: ARRAY
14094: ST_TO_ADDR
// end ; if weapon then
14095: LD_VAR 0 18
14099: IFFALSE 14213
// begin tmp := CostOfWeapon ( weapon ) ;
14101: LD_ADDR_VAR 0 14
14105: PUSH
14106: LD_VAR 0 18
14110: PPUSH
14111: CALL_OW 451
14115: ST_TO_ADDR
// j := GetBase ( tower ) ;
14116: LD_ADDR_VAR 0 9
14120: PUSH
14121: LD_VAR 0 1
14125: PPUSH
14126: CALL_OW 274
14130: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14131: LD_VAR 0 9
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 275
14143: PUSH
14144: LD_VAR 0 14
14148: PUSH
14149: LD_INT 1
14151: ARRAY
14152: GREATEREQUAL
14153: PUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_INT 2
14161: PPUSH
14162: CALL_OW 275
14166: PUSH
14167: LD_VAR 0 14
14171: PUSH
14172: LD_INT 2
14174: ARRAY
14175: GREATEREQUAL
14176: AND
14177: PUSH
14178: LD_VAR 0 9
14182: PPUSH
14183: LD_INT 3
14185: PPUSH
14186: CALL_OW 275
14190: PUSH
14191: LD_VAR 0 14
14195: PUSH
14196: LD_INT 3
14198: ARRAY
14199: GREATEREQUAL
14200: AND
14201: IFFALSE 14213
// result := weapon ;
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_VAR 0 18
14212: ST_TO_ADDR
// end ; end ;
14213: LD_VAR 0 3
14217: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14218: LD_INT 0
14220: PPUSH
14221: PPUSH
// result := true ;
14222: LD_ADDR_VAR 0 3
14226: PUSH
14227: LD_INT 1
14229: ST_TO_ADDR
// if array1 = array2 then
14230: LD_VAR 0 1
14234: PUSH
14235: LD_VAR 0 2
14239: EQUAL
14240: IFFALSE 14300
// begin for i = 1 to array1 do
14242: LD_ADDR_VAR 0 4
14246: PUSH
14247: DOUBLE
14248: LD_INT 1
14250: DEC
14251: ST_TO_ADDR
14252: LD_VAR 0 1
14256: PUSH
14257: FOR_TO
14258: IFFALSE 14296
// if array1 [ i ] <> array2 [ i ] then
14260: LD_VAR 0 1
14264: PUSH
14265: LD_VAR 0 4
14269: ARRAY
14270: PUSH
14271: LD_VAR 0 2
14275: PUSH
14276: LD_VAR 0 4
14280: ARRAY
14281: NONEQUAL
14282: IFFALSE 14294
// begin result := false ;
14284: LD_ADDR_VAR 0 3
14288: PUSH
14289: LD_INT 0
14291: ST_TO_ADDR
// break ;
14292: GO 14296
// end ;
14294: GO 14257
14296: POP
14297: POP
// end else
14298: GO 14308
// result := false ;
14300: LD_ADDR_VAR 0 3
14304: PUSH
14305: LD_INT 0
14307: ST_TO_ADDR
// end ;
14308: LD_VAR 0 3
14312: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14313: LD_INT 0
14315: PPUSH
14316: PPUSH
14317: PPUSH
// pom := GetBase ( fac ) ;
14318: LD_ADDR_VAR 0 5
14322: PUSH
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 274
14332: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14333: LD_ADDR_VAR 0 4
14337: PUSH
14338: LD_VAR 0 2
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PPUSH
14347: LD_VAR 0 2
14351: PUSH
14352: LD_INT 2
14354: ARRAY
14355: PPUSH
14356: LD_VAR 0 2
14360: PUSH
14361: LD_INT 3
14363: ARRAY
14364: PPUSH
14365: LD_VAR 0 2
14369: PUSH
14370: LD_INT 4
14372: ARRAY
14373: PPUSH
14374: CALL_OW 449
14378: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14379: LD_ADDR_VAR 0 3
14383: PUSH
14384: LD_VAR 0 5
14388: PPUSH
14389: LD_INT 1
14391: PPUSH
14392: CALL_OW 275
14396: PUSH
14397: LD_VAR 0 4
14401: PUSH
14402: LD_INT 1
14404: ARRAY
14405: GREATEREQUAL
14406: PUSH
14407: LD_VAR 0 5
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: CALL_OW 275
14419: PUSH
14420: LD_VAR 0 4
14424: PUSH
14425: LD_INT 2
14427: ARRAY
14428: GREATEREQUAL
14429: AND
14430: PUSH
14431: LD_VAR 0 5
14435: PPUSH
14436: LD_INT 3
14438: PPUSH
14439: CALL_OW 275
14443: PUSH
14444: LD_VAR 0 4
14448: PUSH
14449: LD_INT 3
14451: ARRAY
14452: GREATEREQUAL
14453: AND
14454: ST_TO_ADDR
// end ;
14455: LD_VAR 0 3
14459: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14460: LD_INT 0
14462: PPUSH
14463: PPUSH
14464: PPUSH
14465: PPUSH
// pom := GetBase ( building ) ;
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 274
14480: ST_TO_ADDR
// if not pom then
14481: LD_VAR 0 3
14485: NOT
14486: IFFALSE 14490
// exit ;
14488: GO 14660
// btype := GetBType ( building ) ;
14490: LD_ADDR_VAR 0 5
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: ST_TO_ADDR
// if btype = b_armoury then
14505: LD_VAR 0 5
14509: PUSH
14510: LD_INT 4
14512: EQUAL
14513: IFFALSE 14523
// btype := b_barracks ;
14515: LD_ADDR_VAR 0 5
14519: PUSH
14520: LD_INT 5
14522: ST_TO_ADDR
// if btype = b_depot then
14523: LD_VAR 0 5
14527: PUSH
14528: LD_INT 0
14530: EQUAL
14531: IFFALSE 14541
// btype := b_warehouse ;
14533: LD_ADDR_VAR 0 5
14537: PUSH
14538: LD_INT 1
14540: ST_TO_ADDR
// if btype = b_workshop then
14541: LD_VAR 0 5
14545: PUSH
14546: LD_INT 2
14548: EQUAL
14549: IFFALSE 14559
// btype := b_factory ;
14551: LD_ADDR_VAR 0 5
14555: PUSH
14556: LD_INT 3
14558: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14559: LD_ADDR_VAR 0 4
14563: PUSH
14564: LD_VAR 0 5
14568: PPUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 248
14578: PPUSH
14579: CALL_OW 450
14583: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14584: LD_ADDR_VAR 0 2
14588: PUSH
14589: LD_VAR 0 3
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: CALL_OW 275
14601: PUSH
14602: LD_VAR 0 4
14606: PUSH
14607: LD_INT 1
14609: ARRAY
14610: GREATEREQUAL
14611: PUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 2
14619: PPUSH
14620: CALL_OW 275
14624: PUSH
14625: LD_VAR 0 4
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: GREATEREQUAL
14634: AND
14635: PUSH
14636: LD_VAR 0 3
14640: PPUSH
14641: LD_INT 3
14643: PPUSH
14644: CALL_OW 275
14648: PUSH
14649: LD_VAR 0 4
14653: PUSH
14654: LD_INT 3
14656: ARRAY
14657: GREATEREQUAL
14658: AND
14659: ST_TO_ADDR
// end ;
14660: LD_VAR 0 2
14664: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14665: LD_INT 0
14667: PPUSH
14668: PPUSH
14669: PPUSH
// pom := GetBase ( building ) ;
14670: LD_ADDR_VAR 0 4
14674: PUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 274
14684: ST_TO_ADDR
// if not pom then
14685: LD_VAR 0 4
14689: NOT
14690: IFFALSE 14694
// exit ;
14692: GO 14795
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14694: LD_ADDR_VAR 0 5
14698: PUSH
14699: LD_VAR 0 2
14703: PPUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 248
14713: PPUSH
14714: CALL_OW 450
14718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_VAR 0 4
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: CALL_OW 275
14736: PUSH
14737: LD_VAR 0 5
14741: PUSH
14742: LD_INT 1
14744: ARRAY
14745: GREATEREQUAL
14746: PUSH
14747: LD_VAR 0 4
14751: PPUSH
14752: LD_INT 2
14754: PPUSH
14755: CALL_OW 275
14759: PUSH
14760: LD_VAR 0 5
14764: PUSH
14765: LD_INT 2
14767: ARRAY
14768: GREATEREQUAL
14769: AND
14770: PUSH
14771: LD_VAR 0 4
14775: PPUSH
14776: LD_INT 3
14778: PPUSH
14779: CALL_OW 275
14783: PUSH
14784: LD_VAR 0 5
14788: PUSH
14789: LD_INT 3
14791: ARRAY
14792: GREATEREQUAL
14793: AND
14794: ST_TO_ADDR
// end ;
14795: LD_VAR 0 3
14799: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
14800: LD_INT 0
14802: PPUSH
14803: PPUSH
14804: PPUSH
14805: PPUSH
14806: PPUSH
14807: PPUSH
14808: PPUSH
14809: PPUSH
14810: PPUSH
14811: PPUSH
// result := false ;
14812: LD_ADDR_VAR 0 6
14816: PUSH
14817: LD_INT 0
14819: ST_TO_ADDR
// if not base or not btype or not x or not y then
14820: LD_VAR 0 1
14824: NOT
14825: PUSH
14826: LD_VAR 0 2
14830: NOT
14831: OR
14832: PUSH
14833: LD_VAR 0 3
14837: NOT
14838: OR
14839: PUSH
14840: LD_VAR 0 4
14844: NOT
14845: OR
14846: IFFALSE 14850
// exit ;
14848: GO 15459
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
14850: LD_ADDR_VAR 0 12
14854: PUSH
14855: LD_VAR 0 2
14859: PPUSH
14860: LD_VAR 0 3
14864: PPUSH
14865: LD_VAR 0 4
14869: PPUSH
14870: LD_VAR 0 5
14874: PPUSH
14875: LD_VAR 0 1
14879: PUSH
14880: LD_INT 1
14882: ARRAY
14883: PPUSH
14884: CALL_OW 248
14888: PPUSH
14889: LD_INT 0
14891: PPUSH
14892: CALL 16296 0 6
14896: ST_TO_ADDR
// if not hexes then
14897: LD_VAR 0 12
14901: NOT
14902: IFFALSE 14906
// exit ;
14904: GO 15459
// for i = 1 to hexes do
14906: LD_ADDR_VAR 0 7
14910: PUSH
14911: DOUBLE
14912: LD_INT 1
14914: DEC
14915: ST_TO_ADDR
14916: LD_VAR 0 12
14920: PUSH
14921: FOR_TO
14922: IFFALSE 15457
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14924: LD_ADDR_VAR 0 11
14928: PUSH
14929: LD_VAR 0 12
14933: PUSH
14934: LD_VAR 0 7
14938: ARRAY
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 12
14948: PUSH
14949: LD_VAR 0 7
14953: ARRAY
14954: PUSH
14955: LD_INT 2
14957: ARRAY
14958: PPUSH
14959: CALL_OW 428
14963: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14964: LD_VAR 0 12
14968: PUSH
14969: LD_VAR 0 7
14973: ARRAY
14974: PUSH
14975: LD_INT 1
14977: ARRAY
14978: PPUSH
14979: LD_VAR 0 12
14983: PUSH
14984: LD_VAR 0 7
14988: ARRAY
14989: PUSH
14990: LD_INT 2
14992: ARRAY
14993: PPUSH
14994: CALL_OW 351
14998: PUSH
14999: LD_VAR 0 12
15003: PUSH
15004: LD_VAR 0 7
15008: ARRAY
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PPUSH
15014: LD_VAR 0 12
15018: PUSH
15019: LD_VAR 0 7
15023: ARRAY
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: CALL_OW 488
15033: NOT
15034: OR
15035: PUSH
15036: LD_VAR 0 11
15040: PPUSH
15041: CALL_OW 247
15045: PUSH
15046: LD_INT 3
15048: EQUAL
15049: OR
15050: IFFALSE 15056
// exit ;
15052: POP
15053: POP
15054: GO 15459
// if not tmp or not tmp in base then
15056: LD_VAR 0 11
15060: NOT
15061: PUSH
15062: LD_VAR 0 11
15066: PUSH
15067: LD_VAR 0 1
15071: IN
15072: NOT
15073: OR
15074: IFFALSE 15078
// continue ;
15076: GO 14921
// result := true ;
15078: LD_ADDR_VAR 0 6
15082: PUSH
15083: LD_INT 1
15085: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15086: LD_ADDR_VAR 0 15
15090: PUSH
15091: LD_VAR 0 1
15095: PPUSH
15096: LD_INT 22
15098: PUSH
15099: LD_VAR 0 11
15103: PPUSH
15104: CALL_OW 255
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 2
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 0
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 30
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 72
15149: ST_TO_ADDR
// if dep then
15150: LD_VAR 0 15
15154: IFFALSE 15290
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15156: LD_ADDR_VAR 0 14
15160: PUSH
15161: LD_VAR 0 15
15165: PUSH
15166: LD_INT 1
15168: ARRAY
15169: PPUSH
15170: CALL_OW 250
15174: PPUSH
15175: LD_VAR 0 15
15179: PUSH
15180: LD_INT 1
15182: ARRAY
15183: PPUSH
15184: CALL_OW 254
15188: PPUSH
15189: LD_INT 5
15191: PPUSH
15192: CALL_OW 272
15196: PUSH
15197: LD_VAR 0 15
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: PPUSH
15206: CALL_OW 251
15210: PPUSH
15211: LD_VAR 0 15
15215: PUSH
15216: LD_INT 1
15218: ARRAY
15219: PPUSH
15220: CALL_OW 254
15224: PPUSH
15225: LD_INT 5
15227: PPUSH
15228: CALL_OW 273
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15237: LD_VAR 0 14
15241: PUSH
15242: LD_INT 1
15244: ARRAY
15245: PPUSH
15246: LD_VAR 0 14
15250: PUSH
15251: LD_INT 2
15253: ARRAY
15254: PPUSH
15255: CALL_OW 488
15259: IFFALSE 15290
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15261: LD_VAR 0 11
15265: PPUSH
15266: LD_VAR 0 14
15270: PUSH
15271: LD_INT 1
15273: ARRAY
15274: PPUSH
15275: LD_VAR 0 14
15279: PUSH
15280: LD_INT 2
15282: ARRAY
15283: PPUSH
15284: CALL_OW 111
// continue ;
15288: GO 14921
// end ; end ; r := GetDir ( tmp ) ;
15290: LD_ADDR_VAR 0 13
15294: PUSH
15295: LD_VAR 0 11
15299: PPUSH
15300: CALL_OW 254
15304: ST_TO_ADDR
// if r = 5 then
15305: LD_VAR 0 13
15309: PUSH
15310: LD_INT 5
15312: EQUAL
15313: IFFALSE 15323
// r := 0 ;
15315: LD_ADDR_VAR 0 13
15319: PUSH
15320: LD_INT 0
15322: ST_TO_ADDR
// for j = r to 5 do
15323: LD_ADDR_VAR 0 8
15327: PUSH
15328: DOUBLE
15329: LD_VAR 0 13
15333: DEC
15334: ST_TO_ADDR
15335: LD_INT 5
15337: PUSH
15338: FOR_TO
15339: IFFALSE 15453
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15341: LD_ADDR_VAR 0 9
15345: PUSH
15346: LD_VAR 0 11
15350: PPUSH
15351: CALL_OW 250
15355: PPUSH
15356: LD_VAR 0 8
15360: PPUSH
15361: LD_INT 2
15363: PPUSH
15364: CALL_OW 272
15368: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15369: LD_ADDR_VAR 0 10
15373: PUSH
15374: LD_VAR 0 11
15378: PPUSH
15379: CALL_OW 251
15383: PPUSH
15384: LD_VAR 0 8
15388: PPUSH
15389: LD_INT 2
15391: PPUSH
15392: CALL_OW 273
15396: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15397: LD_VAR 0 9
15401: PPUSH
15402: LD_VAR 0 10
15406: PPUSH
15407: CALL_OW 488
15411: PUSH
15412: LD_VAR 0 9
15416: PPUSH
15417: LD_VAR 0 10
15421: PPUSH
15422: CALL_OW 428
15426: NOT
15427: AND
15428: IFFALSE 15451
// begin ComMoveXY ( tmp , _x , _y ) ;
15430: LD_VAR 0 11
15434: PPUSH
15435: LD_VAR 0 9
15439: PPUSH
15440: LD_VAR 0 10
15444: PPUSH
15445: CALL_OW 111
// break ;
15449: GO 15453
// end ; end ;
15451: GO 15338
15453: POP
15454: POP
// end ;
15455: GO 14921
15457: POP
15458: POP
// end ;
15459: LD_VAR 0 6
15463: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
15464: LD_INT 0
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
15474: PPUSH
15475: PPUSH
// result := false ;
15476: LD_ADDR_VAR 0 6
15480: PUSH
15481: LD_INT 0
15483: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15484: LD_VAR 0 1
15488: NOT
15489: PUSH
15490: LD_VAR 0 1
15494: PPUSH
15495: CALL_OW 266
15499: PUSH
15500: LD_INT 0
15502: PUSH
15503: LD_INT 1
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: IN
15510: NOT
15511: OR
15512: PUSH
15513: LD_VAR 0 2
15517: NOT
15518: OR
15519: PUSH
15520: LD_VAR 0 5
15524: PUSH
15525: LD_INT 0
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 3
15536: PUSH
15537: LD_INT 4
15539: PUSH
15540: LD_INT 5
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: IN
15551: NOT
15552: OR
15553: PUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: LD_VAR 0 4
15563: PPUSH
15564: CALL_OW 488
15568: NOT
15569: OR
15570: IFFALSE 15574
// exit ;
15572: GO 16291
// pom := GetBase ( depot ) ;
15574: LD_ADDR_VAR 0 10
15578: PUSH
15579: LD_VAR 0 1
15583: PPUSH
15584: CALL_OW 274
15588: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15589: LD_ADDR_VAR 0 11
15593: PUSH
15594: LD_VAR 0 2
15598: PPUSH
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 248
15608: PPUSH
15609: CALL_OW 450
15613: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15614: LD_VAR 0 10
15618: PPUSH
15619: LD_INT 1
15621: PPUSH
15622: CALL_OW 275
15626: PUSH
15627: LD_VAR 0 11
15631: PUSH
15632: LD_INT 1
15634: ARRAY
15635: GREATEREQUAL
15636: PUSH
15637: LD_VAR 0 10
15641: PPUSH
15642: LD_INT 2
15644: PPUSH
15645: CALL_OW 275
15649: PUSH
15650: LD_VAR 0 11
15654: PUSH
15655: LD_INT 2
15657: ARRAY
15658: GREATEREQUAL
15659: AND
15660: PUSH
15661: LD_VAR 0 10
15665: PPUSH
15666: LD_INT 3
15668: PPUSH
15669: CALL_OW 275
15673: PUSH
15674: LD_VAR 0 11
15678: PUSH
15679: LD_INT 3
15681: ARRAY
15682: GREATEREQUAL
15683: AND
15684: NOT
15685: IFFALSE 15689
// exit ;
15687: GO 16291
// if GetBType ( depot ) = b_depot then
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL_OW 266
15698: PUSH
15699: LD_INT 0
15701: EQUAL
15702: IFFALSE 15714
// dist := 28 else
15704: LD_ADDR_VAR 0 14
15708: PUSH
15709: LD_INT 28
15711: ST_TO_ADDR
15712: GO 15722
// dist := 36 ;
15714: LD_ADDR_VAR 0 14
15718: PUSH
15719: LD_INT 36
15721: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15722: LD_VAR 0 1
15726: PPUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_VAR 0 4
15736: PPUSH
15737: CALL_OW 297
15741: PUSH
15742: LD_VAR 0 14
15746: GREATER
15747: IFFALSE 15751
// exit ;
15749: GO 16291
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15751: LD_ADDR_VAR 0 12
15755: PUSH
15756: LD_VAR 0 2
15760: PPUSH
15761: LD_VAR 0 3
15765: PPUSH
15766: LD_VAR 0 4
15770: PPUSH
15771: LD_VAR 0 5
15775: PPUSH
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL_OW 248
15785: PPUSH
15786: LD_INT 0
15788: PPUSH
15789: CALL 16296 0 6
15793: ST_TO_ADDR
// if not hexes then
15794: LD_VAR 0 12
15798: NOT
15799: IFFALSE 15803
// exit ;
15801: GO 16291
// hex := GetHexInfo ( x , y ) ;
15803: LD_ADDR_VAR 0 15
15807: PUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_VAR 0 4
15817: PPUSH
15818: CALL_OW 546
15822: ST_TO_ADDR
// if hex [ 1 ] then
15823: LD_VAR 0 15
15827: PUSH
15828: LD_INT 1
15830: ARRAY
15831: IFFALSE 15835
// exit ;
15833: GO 16291
// height := hex [ 2 ] ;
15835: LD_ADDR_VAR 0 13
15839: PUSH
15840: LD_VAR 0 15
15844: PUSH
15845: LD_INT 2
15847: ARRAY
15848: ST_TO_ADDR
// for i = 1 to hexes do
15849: LD_ADDR_VAR 0 7
15853: PUSH
15854: DOUBLE
15855: LD_INT 1
15857: DEC
15858: ST_TO_ADDR
15859: LD_VAR 0 12
15863: PUSH
15864: FOR_TO
15865: IFFALSE 16195
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15867: LD_VAR 0 12
15871: PUSH
15872: LD_VAR 0 7
15876: ARRAY
15877: PUSH
15878: LD_INT 1
15880: ARRAY
15881: PPUSH
15882: LD_VAR 0 12
15886: PUSH
15887: LD_VAR 0 7
15891: ARRAY
15892: PUSH
15893: LD_INT 2
15895: ARRAY
15896: PPUSH
15897: CALL_OW 488
15901: NOT
15902: PUSH
15903: LD_VAR 0 12
15907: PUSH
15908: LD_VAR 0 7
15912: ARRAY
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PPUSH
15918: LD_VAR 0 12
15922: PUSH
15923: LD_VAR 0 7
15927: ARRAY
15928: PUSH
15929: LD_INT 2
15931: ARRAY
15932: PPUSH
15933: CALL_OW 428
15937: PUSH
15938: LD_INT 0
15940: GREATER
15941: OR
15942: PUSH
15943: LD_VAR 0 12
15947: PUSH
15948: LD_VAR 0 7
15952: ARRAY
15953: PUSH
15954: LD_INT 1
15956: ARRAY
15957: PPUSH
15958: LD_VAR 0 12
15962: PUSH
15963: LD_VAR 0 7
15967: ARRAY
15968: PUSH
15969: LD_INT 2
15971: ARRAY
15972: PPUSH
15973: CALL_OW 351
15977: OR
15978: IFFALSE 15984
// exit ;
15980: POP
15981: POP
15982: GO 16291
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15984: LD_ADDR_VAR 0 8
15988: PUSH
15989: LD_VAR 0 12
15993: PUSH
15994: LD_VAR 0 7
15998: ARRAY
15999: PUSH
16000: LD_INT 1
16002: ARRAY
16003: PPUSH
16004: LD_VAR 0 12
16008: PUSH
16009: LD_VAR 0 7
16013: ARRAY
16014: PUSH
16015: LD_INT 2
16017: ARRAY
16018: PPUSH
16019: CALL_OW 546
16023: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16024: LD_VAR 0 8
16028: PUSH
16029: LD_INT 1
16031: ARRAY
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: LD_INT 2
16040: ARRAY
16041: PUSH
16042: LD_VAR 0 13
16046: PUSH
16047: LD_INT 2
16049: PLUS
16050: GREATER
16051: OR
16052: PUSH
16053: LD_VAR 0 8
16057: PUSH
16058: LD_INT 2
16060: ARRAY
16061: PUSH
16062: LD_VAR 0 13
16066: PUSH
16067: LD_INT 2
16069: MINUS
16070: LESS
16071: OR
16072: PUSH
16073: LD_VAR 0 8
16077: PUSH
16078: LD_INT 3
16080: ARRAY
16081: PUSH
16082: LD_INT 0
16084: PUSH
16085: LD_INT 8
16087: PUSH
16088: LD_INT 9
16090: PUSH
16091: LD_INT 10
16093: PUSH
16094: LD_INT 11
16096: PUSH
16097: LD_INT 12
16099: PUSH
16100: LD_INT 13
16102: PUSH
16103: LD_INT 16
16105: PUSH
16106: LD_INT 17
16108: PUSH
16109: LD_INT 18
16111: PUSH
16112: LD_INT 19
16114: PUSH
16115: LD_INT 20
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: IN
16136: NOT
16137: OR
16138: PUSH
16139: LD_VAR 0 8
16143: PUSH
16144: LD_INT 5
16146: ARRAY
16147: NOT
16148: OR
16149: PUSH
16150: LD_VAR 0 8
16154: PUSH
16155: LD_INT 6
16157: ARRAY
16158: PUSH
16159: LD_INT 1
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: LD_INT 7
16167: PUSH
16168: LD_INT 9
16170: PUSH
16171: LD_INT 10
16173: PUSH
16174: LD_INT 11
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: IN
16185: NOT
16186: OR
16187: IFFALSE 16193
// exit ;
16189: POP
16190: POP
16191: GO 16291
// end ;
16193: GO 15864
16195: POP
16196: POP
// side := GetSide ( depot ) ;
16197: LD_ADDR_VAR 0 9
16201: PUSH
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL_OW 255
16211: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16212: LD_VAR 0 9
16216: PPUSH
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_VAR 0 4
16226: PPUSH
16227: LD_INT 20
16229: PPUSH
16230: CALL 8945 0 4
16234: PUSH
16235: LD_INT 4
16237: ARRAY
16238: IFFALSE 16242
// exit ;
16240: GO 16291
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16242: LD_VAR 0 2
16246: PUSH
16247: LD_INT 29
16249: PUSH
16250: LD_INT 30
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: IN
16257: PUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: LD_VAR 0 9
16272: PPUSH
16273: CALL_OW 440
16277: NOT
16278: AND
16279: IFFALSE 16283
// exit ;
16281: GO 16291
// result := true ;
16283: LD_ADDR_VAR 0 6
16287: PUSH
16288: LD_INT 1
16290: ST_TO_ADDR
// end ;
16291: LD_VAR 0 6
16295: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
16296: LD_INT 0
16298: PPUSH
16299: PPUSH
16300: PPUSH
16301: PPUSH
16302: PPUSH
16303: PPUSH
16304: PPUSH
16305: PPUSH
16306: PPUSH
16307: PPUSH
16308: PPUSH
16309: PPUSH
16310: PPUSH
16311: PPUSH
16312: PPUSH
16313: PPUSH
16314: PPUSH
16315: PPUSH
16316: PPUSH
16317: PPUSH
16318: PPUSH
16319: PPUSH
16320: PPUSH
16321: PPUSH
16322: PPUSH
16323: PPUSH
16324: PPUSH
16325: PPUSH
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
16348: PPUSH
16349: PPUSH
16350: PPUSH
16351: PPUSH
16352: PPUSH
16353: PPUSH
16354: PPUSH
16355: PPUSH
// result = [ ] ;
16356: LD_ADDR_VAR 0 7
16360: PUSH
16361: EMPTY
16362: ST_TO_ADDR
// temp_list = [ ] ;
16363: LD_ADDR_VAR 0 9
16367: PUSH
16368: EMPTY
16369: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16370: LD_VAR 0 4
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: LD_INT 3
16386: PUSH
16387: LD_INT 4
16389: PUSH
16390: LD_INT 5
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: IN
16401: NOT
16402: PUSH
16403: LD_VAR 0 1
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: IN
16418: PUSH
16419: LD_VAR 0 5
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: LD_INT 2
16429: PUSH
16430: LD_INT 3
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: IN
16438: NOT
16439: AND
16440: OR
16441: IFFALSE 16445
// exit ;
16443: GO 34836
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16445: LD_VAR 0 1
16449: PUSH
16450: LD_INT 6
16452: PUSH
16453: LD_INT 7
16455: PUSH
16456: LD_INT 8
16458: PUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 12
16464: PUSH
16465: LD_INT 15
16467: PUSH
16468: LD_INT 11
16470: PUSH
16471: LD_INT 14
16473: PUSH
16474: LD_INT 10
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: IN
16488: IFFALSE 16498
// btype = b_lab ;
16490: LD_ADDR_VAR 0 1
16494: PUSH
16495: LD_INT 6
16497: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16498: LD_VAR 0 6
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: IN
16517: NOT
16518: PUSH
16519: LD_VAR 0 1
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: LD_INT 2
16532: PUSH
16533: LD_INT 3
16535: PUSH
16536: LD_INT 6
16538: PUSH
16539: LD_INT 36
16541: PUSH
16542: LD_INT 4
16544: PUSH
16545: LD_INT 5
16547: PUSH
16548: LD_INT 31
16550: PUSH
16551: LD_INT 32
16553: PUSH
16554: LD_INT 33
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: IN
16570: NOT
16571: PUSH
16572: LD_VAR 0 6
16576: PUSH
16577: LD_INT 1
16579: EQUAL
16580: AND
16581: OR
16582: PUSH
16583: LD_VAR 0 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 3
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: IN
16598: NOT
16599: PUSH
16600: LD_VAR 0 6
16604: PUSH
16605: LD_INT 2
16607: EQUAL
16608: AND
16609: OR
16610: IFFALSE 16620
// mode = 0 ;
16612: LD_ADDR_VAR 0 6
16616: PUSH
16617: LD_INT 0
16619: ST_TO_ADDR
// case mode of 0 :
16620: LD_VAR 0 6
16624: PUSH
16625: LD_INT 0
16627: DOUBLE
16628: EQUAL
16629: IFTRUE 16633
16631: GO 28086
16633: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16634: LD_ADDR_VAR 0 11
16638: PUSH
16639: LD_INT 0
16641: PUSH
16642: LD_INT 0
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: LD_INT 1
16654: NEG
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 0
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 1
16692: NEG
16693: PUSH
16694: LD_INT 0
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 1
16703: NEG
16704: PUSH
16705: LD_INT 1
16707: NEG
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 1
16715: NEG
16716: PUSH
16717: LD_INT 2
16719: NEG
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 0
16727: PUSH
16728: LD_INT 2
16730: NEG
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 1
16738: PUSH
16739: LD_INT 1
16741: NEG
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 2
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 0
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: NEG
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 0
16790: PUSH
16791: LD_INT 3
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 1
16800: NEG
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16827: LD_ADDR_VAR 0 12
16831: PUSH
16832: LD_INT 0
16834: PUSH
16835: LD_INT 0
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: LD_INT 1
16847: NEG
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: LD_INT 0
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 1
16865: PUSH
16866: LD_INT 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 0
16875: PUSH
16876: LD_INT 1
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 1
16885: NEG
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 1
16896: NEG
16897: PUSH
16898: LD_INT 1
16900: NEG
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 1
16908: PUSH
16909: LD_INT 1
16911: NEG
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 1
16939: NEG
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 2
16950: NEG
16951: PUSH
16952: LD_INT 0
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 2
16961: NEG
16962: PUSH
16963: LD_INT 1
16965: NEG
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 2
16973: NEG
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 3
16984: NEG
16985: PUSH
16986: LD_INT 0
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 3
16995: NEG
16996: PUSH
16997: LD_INT 1
16999: NEG
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17023: LD_ADDR_VAR 0 13
17027: PUSH
17028: LD_INT 0
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: LD_INT 0
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 1
17061: PUSH
17062: LD_INT 1
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 0
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: LD_INT 0
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 1
17092: NEG
17093: PUSH
17094: LD_INT 1
17096: NEG
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 1
17104: NEG
17105: PUSH
17106: LD_INT 2
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 1
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 2
17146: NEG
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 2
17158: NEG
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 2
17170: NEG
17171: PUSH
17172: LD_INT 3
17174: NEG
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 3
17182: NEG
17183: PUSH
17184: LD_INT 2
17186: NEG
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 3
17194: NEG
17195: PUSH
17196: LD_INT 3
17198: NEG
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17222: LD_ADDR_VAR 0 14
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 0
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: LD_INT 0
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 1
17291: NEG
17292: PUSH
17293: LD_INT 1
17295: NEG
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 1
17303: NEG
17304: PUSH
17305: LD_INT 2
17307: NEG
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: LD_INT 2
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: LD_INT 1
17329: NEG
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 1
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 0
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: LD_INT 1
17357: NEG
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 1
17368: NEG
17369: PUSH
17370: LD_INT 3
17372: NEG
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: LD_INT 3
17383: NEG
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: LD_INT 2
17394: NEG
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17418: LD_ADDR_VAR 0 15
17422: PUSH
17423: LD_INT 0
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: LD_INT 1
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: NEG
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 1
17487: NEG
17488: PUSH
17489: LD_INT 1
17491: NEG
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 2
17541: NEG
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 2
17552: NEG
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: LD_INT 1
17567: NEG
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 0
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17611: LD_ADDR_VAR 0 16
17615: PUSH
17616: LD_INT 0
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: LD_INT 1
17631: NEG
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: LD_INT 1
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 1
17680: NEG
17681: PUSH
17682: LD_INT 1
17684: NEG
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 1
17692: NEG
17693: PUSH
17694: LD_INT 2
17696: NEG
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 2
17714: PUSH
17715: LD_INT 2
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: LD_INT 2
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 2
17734: NEG
17735: PUSH
17736: LD_INT 1
17738: NEG
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 2
17746: NEG
17747: PUSH
17748: LD_INT 2
17750: NEG
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 3
17758: PUSH
17759: LD_INT 2
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 3
17768: PUSH
17769: LD_INT 3
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 3
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17804: LD_ADDR_VAR 0 17
17808: PUSH
17809: LD_INT 0
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 0
17821: PUSH
17822: LD_INT 1
17824: NEG
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 1
17862: NEG
17863: PUSH
17864: LD_INT 0
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 2
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: LD_INT 1
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 1
17969: NEG
17970: PUSH
17971: LD_INT 1
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: NEG
17992: PUSH
17993: LD_INT 1
17995: NEG
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18034: LD_ADDR_VAR 0 18
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 2
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18264: LD_ADDR_VAR 0 19
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: NEG
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: LD_INT 2
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 2
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: NEG
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: NEG
18452: PUSH
18453: LD_INT 1
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: NEG
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18494: LD_ADDR_VAR 0 20
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 1
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PUSH
18577: LD_INT 2
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: LD_INT 2
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: LD_INT 2
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 2
18670: NEG
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 2
18681: NEG
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: LD_INT 2
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18724: LD_ADDR_VAR 0 21
18728: PUSH
18729: LD_INT 0
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: NEG
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: LD_INT 2
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: LD_INT 2
18820: NEG
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 2
18839: PUSH
18840: LD_INT 0
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 2
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 2
18900: NEG
18901: PUSH
18902: LD_INT 0
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 2
18911: NEG
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18954: LD_ADDR_VAR 0 22
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 1
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: NEG
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: LD_INT 2
19039: NEG
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: LD_INT 2
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 2
19130: NEG
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 2
19153: NEG
19154: PUSH
19155: LD_INT 2
19157: NEG
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19184: LD_ADDR_VAR 0 23
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 1
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: LD_INT 2
19269: NEG
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: LD_INT 2
19280: NEG
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: LD_INT 1
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: LD_INT 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 2
19383: NEG
19384: PUSH
19385: LD_INT 2
19387: NEG
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 2
19395: NEG
19396: PUSH
19397: LD_INT 3
19399: NEG
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: LD_INT 3
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 2
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19464: LD_ADDR_VAR 0 24
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 1
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: LD_INT 2
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: PUSH
19600: LD_INT 2
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 1
19629: NEG
19630: PUSH
19631: LD_INT 1
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 2
19640: NEG
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: LD_INT 1
19655: NEG
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 2
19663: NEG
19664: PUSH
19665: LD_INT 2
19667: NEG
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: LD_INT 2
19678: NEG
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: PUSH
19687: LD_INT 1
19689: NEG
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 3
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 3
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19740: LD_ADDR_VAR 0 25
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 1
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 2
19939: NEG
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 3
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 3
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: PUSH
19982: LD_INT 3
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20014: LD_ADDR_VAR 0 26
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 1
20095: NEG
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 2
20190: NEG
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: NEG
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 2
20213: NEG
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 3
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 1
20245: NEG
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 2
20256: NEG
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20290: LD_ADDR_VAR 0 27
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 0
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: NEG
20372: PUSH
20373: LD_INT 2
20375: NEG
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: LD_INT 2
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: LD_INT 0
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: LD_INT 1
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 2
20512: NEG
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 3
20523: NEG
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 3
20535: NEG
20536: PUSH
20537: LD_INT 2
20539: NEG
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20570: LD_ADDR_VAR 0 28
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: LD_INT 0
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 1
20651: NEG
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 2
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: LD_INT 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 2
20746: NEG
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 2
20757: NEG
20758: PUSH
20759: LD_INT 1
20761: NEG
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: LD_INT 2
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 2
20781: NEG
20782: PUSH
20783: LD_INT 3
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: LD_INT 3
20797: NEG
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 3
20805: NEG
20806: PUSH
20807: LD_INT 1
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 3
20817: NEG
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20852: LD_ADDR_VAR 0 29
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: LD_INT 1
20872: NEG
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: LD_INT 2
20937: NEG
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 2
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 0
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: NEG
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: NEG
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 2
21030: NEG
21031: PUSH
21032: LD_INT 2
21034: NEG
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 2
21042: NEG
21043: PUSH
21044: LD_INT 3
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 3
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: LD_INT 3
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: LD_INT 2
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 3
21096: NEG
21097: PUSH
21098: LD_INT 2
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21131: LD_ADDR_VAR 0 30
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: NEG
21213: PUSH
21214: LD_INT 2
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: LD_INT 2
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 1
21238: NEG
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 2
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: LD_INT 3
21324: NEG
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: LD_INT 3
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: NEG
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 3
21374: NEG
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21409: LD_ADDR_VAR 0 31
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PUSH
21492: LD_INT 2
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 1
21563: NEG
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: NEG
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: NEG
21587: PUSH
21588: LD_INT 2
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: NEG
21599: PUSH
21600: LD_INT 3
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 2
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 3
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: NEG
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 3
21652: NEG
21653: PUSH
21654: LD_INT 2
21656: NEG
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21687: LD_ADDR_VAR 0 32
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: LD_INT 2
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 2
21853: NEG
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: LD_INT 3
21880: NEG
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: LD_INT 2
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 3
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: LD_INT 3
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 3
21930: NEG
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21965: LD_ADDR_VAR 0 33
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 0
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: LD_INT 2
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 1
22109: NEG
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 2
22143: NEG
22144: PUSH
22145: LD_INT 2
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 2
22155: NEG
22156: PUSH
22157: LD_INT 3
22159: NEG
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: LD_INT 1
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 3
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 3
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 3
22209: NEG
22210: PUSH
22211: LD_INT 2
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22244: LD_ADDR_VAR 0 34
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: LD_INT 2
22329: NEG
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 2
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 1
22351: NEG
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 2
22400: NEG
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: NEG
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: LD_INT 2
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: NEG
22436: PUSH
22437: LD_INT 3
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 2
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 3
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 2
22468: PUSH
22469: LD_INT 3
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: NEG
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 3
22489: NEG
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22524: LD_ADDR_VAR 0 35
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 2
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22636: LD_ADDR_VAR 0 36
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22748: LD_ADDR_VAR 0 37
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: LD_INT 1
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 1
22817: NEG
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 1
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22860: LD_ADDR_VAR 0 38
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: LD_INT 1
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22972: LD_ADDR_VAR 0 39
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: NEG
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: LD_INT 2
23057: NEG
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23084: LD_ADDR_VAR 0 40
23088: PUSH
23089: LD_INT 0
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23196: LD_ADDR_VAR 0 41
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 1
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: LD_INT 0
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: LD_INT 2
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: NEG
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 2
23374: NEG
23375: PUSH
23376: LD_INT 2
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 2
23386: NEG
23387: PUSH
23388: LD_INT 3
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 3
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 3
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 3
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 3
23439: PUSH
23440: LD_INT 3
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: LD_INT 3
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 3
23470: NEG
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 3
23481: NEG
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 3
23493: NEG
23494: PUSH
23495: LD_INT 2
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 3
23505: NEG
23506: PUSH
23507: LD_INT 3
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23546: LD_ADDR_VAR 0 42
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: NEG
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: LD_INT 2
23642: NEG
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: LD_INT 2
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: LD_INT 2
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: NEG
23737: PUSH
23738: LD_INT 3
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: LD_INT 3
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: LD_INT 3
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 2
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: LD_INT 3
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: LD_INT 3
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: LD_INT 3
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: LD_INT 3
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 3
23843: NEG
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 3
23855: NEG
23856: PUSH
23857: LD_INT 3
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23896: LD_ADDR_VAR 0 43
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: LD_INT 1
23969: NEG
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 2
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 2
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 2
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 2
24062: NEG
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 2
24073: NEG
24074: PUSH
24075: LD_INT 1
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 3
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 3
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: LD_INT 2
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 2
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 3
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 3
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 3
24192: NEG
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 3
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24244: LD_ADDR_VAR 0 44
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: LD_INT 1
24340: NEG
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 2
24399: NEG
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 2
24410: NEG
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 2
24422: NEG
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: NEG
24435: PUSH
24436: LD_INT 3
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 2
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 3
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 3
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 3
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 3
24487: PUSH
24488: LD_INT 3
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 2
24497: PUSH
24498: LD_INT 3
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 3
24518: NEG
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 3
24529: NEG
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 3
24541: NEG
24542: PUSH
24543: LD_INT 2
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 3
24553: NEG
24554: PUSH
24555: LD_INT 3
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24594: LD_ADDR_VAR 0 45
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 2
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 2
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: LD_INT 2
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: LD_INT 3
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 3
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: LD_INT 3
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 3
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 3
24891: NEG
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 3
24903: NEG
24904: PUSH
24905: LD_INT 3
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24944: LD_ADDR_VAR 0 46
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: LD_INT 2
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: LD_INT 3
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 3
25148: NEG
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 3
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: NEG
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 3
25240: NEG
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 3
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25292: LD_ADDR_VAR 0 47
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: LD_INT 2
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25443: LD_ADDR_VAR 0 48
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: LD_INT 2
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 2
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25590: LD_ADDR_VAR 0 49
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25734: LD_ADDR_VAR 0 50
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 2
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: LD_INT 2
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25878: LD_ADDR_VAR 0 51
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26025: LD_ADDR_VAR 0 52
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 2
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 2
26129: NEG
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: NEG
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 2
26152: NEG
26153: PUSH
26154: LD_INT 2
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26176: LD_ADDR_VAR 0 53
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26406: LD_ADDR_VAR 0 54
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: NEG
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26636: LD_ADDR_VAR 0 55
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 2
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: LD_INT 2
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 2
26823: NEG
26824: PUSH
26825: LD_INT 1
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26866: LD_ADDR_VAR 0 56
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 2
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 2
27042: NEG
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27096: LD_ADDR_VAR 0 57
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 1
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: LD_INT 2
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 2
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: LD_INT 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 2
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: NEG
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 2
27272: NEG
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27326: LD_ADDR_VAR 0 58
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 2
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 2
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 2
27502: NEG
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27556: LD_ADDR_VAR 0 59
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27644: LD_ADDR_VAR 0 60
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27732: LD_ADDR_VAR 0 61
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27820: LD_ADDR_VAR 0 62
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: NEG
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27908: LD_ADDR_VAR 0 63
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27996: LD_ADDR_VAR 0 64
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// end ; 1 :
28084: GO 33981
28086: LD_INT 1
28088: DOUBLE
28089: EQUAL
28090: IFTRUE 28094
28092: GO 30717
28094: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28095: LD_ADDR_VAR 0 11
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 3
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 3
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: LD_INT 2
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28139: LD_ADDR_VAR 0 12
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 3
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28180: LD_ADDR_VAR 0 13
28184: PUSH
28185: LD_INT 3
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 3
28197: PUSH
28198: LD_INT 3
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28220: LD_ADDR_VAR 0 14
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 3
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28261: LD_ADDR_VAR 0 15
28265: PUSH
28266: LD_INT 2
28268: NEG
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 3
28279: NEG
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 3
28290: NEG
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28305: LD_ADDR_VAR 0 16
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: LD_INT 3
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 3
28324: NEG
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 3
28336: NEG
28337: PUSH
28338: LD_INT 3
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28351: LD_ADDR_VAR 0 17
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 3
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 3
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: LD_INT 2
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28395: LD_ADDR_VAR 0 18
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 3
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 3
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28436: LD_ADDR_VAR 0 19
28440: PUSH
28441: LD_INT 3
28443: PUSH
28444: LD_INT 2
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 3
28453: PUSH
28454: LD_INT 3
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: LD_INT 3
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28476: LD_ADDR_VAR 0 20
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: LD_INT 3
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 3
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28517: LD_ADDR_VAR 0 21
28521: PUSH
28522: LD_INT 2
28524: NEG
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 3
28535: NEG
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 3
28546: NEG
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28561: LD_ADDR_VAR 0 22
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: LD_INT 3
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 3
28580: NEG
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 3
28592: NEG
28593: PUSH
28594: LD_INT 3
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28607: LD_ADDR_VAR 0 23
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 3
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 4
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: LD_INT 3
28640: NEG
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28651: LD_ADDR_VAR 0 24
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 3
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 4
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: LIST
28691: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28692: LD_ADDR_VAR 0 25
28696: PUSH
28697: LD_INT 3
28699: PUSH
28700: LD_INT 3
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 4
28709: PUSH
28710: LD_INT 3
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 3
28719: PUSH
28720: LD_INT 4
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28732: LD_ADDR_VAR 0 26
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: LD_INT 4
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28773: LD_ADDR_VAR 0 27
28777: PUSH
28778: LD_INT 3
28780: NEG
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 3
28791: NEG
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 4
28802: NEG
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28817: LD_ADDR_VAR 0 28
28821: PUSH
28822: LD_INT 3
28824: NEG
28825: PUSH
28826: LD_INT 3
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 3
28836: NEG
28837: PUSH
28838: LD_INT 4
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 4
28848: NEG
28849: PUSH
28850: LD_INT 3
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28863: LD_ADDR_VAR 0 29
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: LD_INT 3
28874: NEG
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 3
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 2
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 4
28908: NEG
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 4
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: LD_INT 3
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 5
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 5
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 4
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 6
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 6
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 5
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29018: LD_ADDR_VAR 0 30
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 3
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 3
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 4
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 4
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 4
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 5
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 5
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 5
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 6
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 6
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29161: LD_ADDR_VAR 0 31
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 2
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 4
29198: PUSH
29199: LD_INT 3
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 4
29208: PUSH
29209: LD_INT 4
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: LD_INT 4
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 5
29228: PUSH
29229: LD_INT 4
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 5
29238: PUSH
29239: LD_INT 5
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 4
29248: PUSH
29249: LD_INT 5
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 6
29258: PUSH
29259: LD_INT 5
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 6
29268: PUSH
29269: LD_INT 6
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 5
29278: PUSH
29279: LD_INT 6
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29300: LD_ADDR_VAR 0 32
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: LD_INT 4
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: LD_INT 4
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 3
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: LD_INT 5
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: LD_INT 5
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: LD_INT 4
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 6
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 6
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: LD_INT 5
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29443: LD_ADDR_VAR 0 33
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 3
29461: NEG
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 3
29472: NEG
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: NEG
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 4
29495: NEG
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 4
29506: NEG
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 4
29518: NEG
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 5
29529: NEG
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 5
29540: NEG
29541: PUSH
29542: LD_INT 1
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 5
29552: NEG
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 6
29563: NEG
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 6
29574: NEG
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29598: LD_ADDR_VAR 0 34
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: LD_INT 3
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 3
29617: NEG
29618: PUSH
29619: LD_INT 2
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: LD_INT 3
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 3
29641: NEG
29642: PUSH
29643: LD_INT 4
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 4
29653: NEG
29654: PUSH
29655: LD_INT 3
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 4
29665: NEG
29666: PUSH
29667: LD_INT 4
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 4
29677: NEG
29678: PUSH
29679: LD_INT 5
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 5
29689: NEG
29690: PUSH
29691: LD_INT 4
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 5
29701: NEG
29702: PUSH
29703: LD_INT 5
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 5
29713: NEG
29714: PUSH
29715: LD_INT 6
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 6
29725: NEG
29726: PUSH
29727: LD_INT 5
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 6
29737: NEG
29738: PUSH
29739: LD_INT 6
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29761: LD_ADDR_VAR 0 41
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: LD_INT 2
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 3
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: LD_INT 2
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29805: LD_ADDR_VAR 0 42
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29846: LD_ADDR_VAR 0 43
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 3
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: LD_INT 3
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: LIST
29885: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29886: LD_ADDR_VAR 0 44
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29927: LD_ADDR_VAR 0 45
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 2
29945: NEG
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 3
29956: NEG
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29971: LD_ADDR_VAR 0 46
29975: PUSH
29976: LD_INT 2
29978: NEG
29979: PUSH
29980: LD_INT 2
29982: NEG
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 2
29990: NEG
29991: PUSH
29992: LD_INT 3
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: LD_INT 2
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30017: LD_ADDR_VAR 0 47
30021: PUSH
30022: LD_INT 2
30024: NEG
30025: PUSH
30026: LD_INT 3
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: NEG
30037: PUSH
30038: LD_INT 3
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30050: LD_ADDR_VAR 0 48
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: LD_INT 2
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30081: LD_ADDR_VAR 0 49
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30110: LD_ADDR_VAR 0 50
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30139: LD_ADDR_VAR 0 51
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30170: LD_ADDR_VAR 0 52
30174: PUSH
30175: LD_INT 3
30177: NEG
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30203: LD_ADDR_VAR 0 53
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 3
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 3
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30247: LD_ADDR_VAR 0 54
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30288: LD_ADDR_VAR 0 55
30292: PUSH
30293: LD_INT 3
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: LD_INT 3
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30328: LD_ADDR_VAR 0 56
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 3
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30369: LD_ADDR_VAR 0 57
30373: PUSH
30374: LD_INT 2
30376: NEG
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 3
30387: NEG
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 3
30398: NEG
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30413: LD_ADDR_VAR 0 58
30417: PUSH
30418: LD_INT 2
30420: NEG
30421: PUSH
30422: LD_INT 3
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 3
30432: NEG
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 3
30444: NEG
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30459: LD_ADDR_VAR 0 59
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 2
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30503: LD_ADDR_VAR 0 60
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 1
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 2
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30544: LD_ADDR_VAR 0 61
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30584: LD_ADDR_VAR 0 62
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30625: LD_ADDR_VAR 0 63
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30669: LD_ADDR_VAR 0 64
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: NEG
30701: PUSH
30702: LD_INT 2
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// end ; 2 :
30715: GO 33981
30717: LD_INT 2
30719: DOUBLE
30720: EQUAL
30721: IFTRUE 30725
30723: GO 33980
30725: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30726: LD_ADDR_VAR 0 29
30730: PUSH
30731: LD_INT 4
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 4
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 5
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 5
30764: PUSH
30765: LD_INT 1
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 4
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 5
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 3
30826: PUSH
30827: LD_INT 3
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 3
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: LD_INT 4
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 3
30866: PUSH
30867: LD_INT 4
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 4
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: LD_INT 4
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: LD_INT 4
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 5
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 5
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 4
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 4
31076: NEG
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 4
31088: NEG
31089: PUSH
31090: LD_INT 2
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 4
31111: NEG
31112: PUSH
31113: LD_INT 4
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 4
31123: NEG
31124: PUSH
31125: LD_INT 5
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 4
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 4
31159: NEG
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 5
31171: NEG
31172: PUSH
31173: LD_INT 4
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 5
31183: NEG
31184: PUSH
31185: LD_INT 5
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 3
31195: NEG
31196: PUSH
31197: LD_INT 5
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 5
31207: NEG
31208: PUSH
31209: LD_INT 3
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31264: LD_ADDR_VAR 0 30
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: LD_INT 4
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 4
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 5
31291: PUSH
31292: LD_INT 4
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 5
31301: PUSH
31302: LD_INT 5
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 4
31311: PUSH
31312: LD_INT 5
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: LD_INT 3
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 5
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 5
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 3
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 4
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 4
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: LD_INT 4
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 2
31443: NEG
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 4
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 4
31499: NEG
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 5
31510: NEG
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 5
31521: NEG
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 5
31533: NEG
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 3
31545: NEG
31546: PUSH
31547: LD_INT 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 3
31556: NEG
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 3
31568: NEG
31569: PUSH
31570: LD_INT 4
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: NEG
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 4
31616: NEG
31617: PUSH
31618: LD_INT 3
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 4
31628: NEG
31629: PUSH
31630: LD_INT 4
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: NEG
31641: PUSH
31642: LD_INT 4
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 4
31652: NEG
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 4
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 5
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: LD_INT 4
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: LD_INT 3
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 3
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: LD_INT 4
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: LD_INT 5
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: LD_INT 5
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31811: LD_ADDR_VAR 0 31
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 4
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 3
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: LD_INT 4
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: LD_INT 4
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: LD_INT 5
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: NEG
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 3
31922: NEG
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 3
31956: NEG
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 4
31978: NEG
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 4
31990: NEG
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: NEG
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 4
32013: NEG
32014: PUSH
32015: LD_INT 4
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 4
32025: NEG
32026: PUSH
32027: LD_INT 5
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: LD_INT 4
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: LD_INT 3
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 4
32061: NEG
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 5
32073: NEG
32074: PUSH
32075: LD_INT 4
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 5
32085: NEG
32086: PUSH
32087: LD_INT 5
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 3
32097: NEG
32098: PUSH
32099: LD_INT 5
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 5
32109: NEG
32110: PUSH
32111: LD_INT 3
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 3
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 4
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: LD_INT 4
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 4
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 4
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 5
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 5
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 3
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32361: LD_ADDR_VAR 0 32
32365: PUSH
32366: LD_INT 4
32368: NEG
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 4
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: NEG
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 4
32413: NEG
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 5
32424: NEG
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 5
32435: NEG
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 5
32447: NEG
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 3
32459: NEG
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 3
32470: NEG
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: NEG
32483: PUSH
32484: LD_INT 4
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 4
32530: NEG
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 4
32542: NEG
32543: PUSH
32544: LD_INT 4
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: LD_INT 4
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 4
32566: NEG
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: LD_INT 4
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 5
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 4
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 4
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: LD_INT 5
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 3
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: NEG
32669: PUSH
32670: LD_INT 5
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 4
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 4
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 3
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: LD_INT 2
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 4
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 4
32773: PUSH
32774: LD_INT 4
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 5
32793: PUSH
32794: LD_INT 4
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 5
32803: PUSH
32804: LD_INT 5
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 4
32813: PUSH
32814: LD_INT 5
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: LD_INT 3
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 5
32843: PUSH
32844: LD_INT 3
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: LD_INT 5
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32908: LD_ADDR_VAR 0 33
32912: PUSH
32913: LD_INT 4
32915: NEG
32916: PUSH
32917: LD_INT 4
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 4
32927: NEG
32928: PUSH
32929: LD_INT 5
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 3
32939: NEG
32940: PUSH
32941: LD_INT 4
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 3
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 4
32963: NEG
32964: PUSH
32965: LD_INT 3
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 5
32975: NEG
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 5
32987: NEG
32988: PUSH
32989: LD_INT 5
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: LD_INT 5
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 5
33011: NEG
33012: PUSH
33013: LD_INT 3
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 3
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 4
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 3
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: LD_INT 2
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: LD_INT 3
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: NEG
33091: PUSH
33092: LD_INT 4
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: LD_INT 4
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 4
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 5
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 5
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 4
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 3
33218: PUSH
33219: LD_INT 3
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 4
33238: PUSH
33239: LD_INT 3
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 4
33248: PUSH
33249: LD_INT 4
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 3
33258: PUSH
33259: LD_INT 4
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: LD_INT 3
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 4
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 2
33298: PUSH
33299: LD_INT 4
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 4
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: LD_INT 4
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: LD_INT 5
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: LD_INT 5
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 4
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 3
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 5
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 3
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33446: LD_ADDR_VAR 0 34
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 4
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 5
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 4
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 3
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 3
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: LD_INT 4
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: LD_INT 5
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: PUSH
33533: LD_INT 3
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: LD_INT 5
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 3
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 4
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 4
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 3
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 4
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: LD_INT 4
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 5
33668: PUSH
33669: LD_INT 4
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 5
33678: PUSH
33679: LD_INT 5
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 4
33688: PUSH
33689: LD_INT 5
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 3
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 3
33708: PUSH
33709: LD_INT 3
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 5
33718: PUSH
33719: LD_INT 3
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 4
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 4
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 4
33831: NEG
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 4
33842: NEG
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 3
33854: NEG
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 4
33876: NEG
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 5
33887: NEG
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 5
33898: NEG
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 5
33910: NEG
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 3
33922: NEG
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: ST_TO_ADDR
// end ; end ;
33978: GO 33981
33980: POP
// case btype of b_depot , b_warehouse :
33981: LD_VAR 0 1
33985: PUSH
33986: LD_INT 0
33988: DOUBLE
33989: EQUAL
33990: IFTRUE 34000
33992: LD_INT 1
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34201
34000: POP
// case nation of nation_american :
34001: LD_VAR 0 5
34005: PUSH
34006: LD_INT 1
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34014
34012: GO 34070
34014: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
34015: LD_ADDR_VAR 0 9
34019: PUSH
34020: LD_VAR 0 11
34024: PUSH
34025: LD_VAR 0 12
34029: PUSH
34030: LD_VAR 0 13
34034: PUSH
34035: LD_VAR 0 14
34039: PUSH
34040: LD_VAR 0 15
34044: PUSH
34045: LD_VAR 0 16
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: PUSH
34058: LD_VAR 0 4
34062: PUSH
34063: LD_INT 1
34065: PLUS
34066: ARRAY
34067: ST_TO_ADDR
34068: GO 34199
34070: LD_INT 2
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34078
34076: GO 34134
34078: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
34079: LD_ADDR_VAR 0 9
34083: PUSH
34084: LD_VAR 0 17
34088: PUSH
34089: LD_VAR 0 18
34093: PUSH
34094: LD_VAR 0 19
34098: PUSH
34099: LD_VAR 0 20
34103: PUSH
34104: LD_VAR 0 21
34108: PUSH
34109: LD_VAR 0 22
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: PUSH
34122: LD_VAR 0 4
34126: PUSH
34127: LD_INT 1
34129: PLUS
34130: ARRAY
34131: ST_TO_ADDR
34132: GO 34199
34134: LD_INT 3
34136: DOUBLE
34137: EQUAL
34138: IFTRUE 34142
34140: GO 34198
34142: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34143: LD_ADDR_VAR 0 9
34147: PUSH
34148: LD_VAR 0 23
34152: PUSH
34153: LD_VAR 0 24
34157: PUSH
34158: LD_VAR 0 25
34162: PUSH
34163: LD_VAR 0 26
34167: PUSH
34168: LD_VAR 0 27
34172: PUSH
34173: LD_VAR 0 28
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: PUSH
34186: LD_VAR 0 4
34190: PUSH
34191: LD_INT 1
34193: PLUS
34194: ARRAY
34195: ST_TO_ADDR
34196: GO 34199
34198: POP
34199: GO 34754
34201: LD_INT 2
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34215
34207: LD_INT 3
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34271
34215: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34216: LD_ADDR_VAR 0 9
34220: PUSH
34221: LD_VAR 0 29
34225: PUSH
34226: LD_VAR 0 30
34230: PUSH
34231: LD_VAR 0 31
34235: PUSH
34236: LD_VAR 0 32
34240: PUSH
34241: LD_VAR 0 33
34245: PUSH
34246: LD_VAR 0 34
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: PUSH
34259: LD_VAR 0 4
34263: PUSH
34264: LD_INT 1
34266: PLUS
34267: ARRAY
34268: ST_TO_ADDR
34269: GO 34754
34271: LD_INT 16
34273: DOUBLE
34274: EQUAL
34275: IFTRUE 34333
34277: LD_INT 17
34279: DOUBLE
34280: EQUAL
34281: IFTRUE 34333
34283: LD_INT 18
34285: DOUBLE
34286: EQUAL
34287: IFTRUE 34333
34289: LD_INT 19
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34333
34295: LD_INT 22
34297: DOUBLE
34298: EQUAL
34299: IFTRUE 34333
34301: LD_INT 20
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34333
34307: LD_INT 21
34309: DOUBLE
34310: EQUAL
34311: IFTRUE 34333
34313: LD_INT 23
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34333
34319: LD_INT 24
34321: DOUBLE
34322: EQUAL
34323: IFTRUE 34333
34325: LD_INT 25
34327: DOUBLE
34328: EQUAL
34329: IFTRUE 34333
34331: GO 34389
34333: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34334: LD_ADDR_VAR 0 9
34338: PUSH
34339: LD_VAR 0 35
34343: PUSH
34344: LD_VAR 0 36
34348: PUSH
34349: LD_VAR 0 37
34353: PUSH
34354: LD_VAR 0 38
34358: PUSH
34359: LD_VAR 0 39
34363: PUSH
34364: LD_VAR 0 40
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: PUSH
34377: LD_VAR 0 4
34381: PUSH
34382: LD_INT 1
34384: PLUS
34385: ARRAY
34386: ST_TO_ADDR
34387: GO 34754
34389: LD_INT 6
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34445
34395: LD_INT 7
34397: DOUBLE
34398: EQUAL
34399: IFTRUE 34445
34401: LD_INT 8
34403: DOUBLE
34404: EQUAL
34405: IFTRUE 34445
34407: LD_INT 13
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34445
34413: LD_INT 12
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34445
34419: LD_INT 15
34421: DOUBLE
34422: EQUAL
34423: IFTRUE 34445
34425: LD_INT 11
34427: DOUBLE
34428: EQUAL
34429: IFTRUE 34445
34431: LD_INT 14
34433: DOUBLE
34434: EQUAL
34435: IFTRUE 34445
34437: LD_INT 10
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34445
34443: GO 34501
34445: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
34446: LD_ADDR_VAR 0 9
34450: PUSH
34451: LD_VAR 0 41
34455: PUSH
34456: LD_VAR 0 42
34460: PUSH
34461: LD_VAR 0 43
34465: PUSH
34466: LD_VAR 0 44
34470: PUSH
34471: LD_VAR 0 45
34475: PUSH
34476: LD_VAR 0 46
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: PUSH
34489: LD_VAR 0 4
34493: PUSH
34494: LD_INT 1
34496: PLUS
34497: ARRAY
34498: ST_TO_ADDR
34499: GO 34754
34501: LD_INT 36
34503: DOUBLE
34504: EQUAL
34505: IFTRUE 34509
34507: GO 34565
34509: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34510: LD_ADDR_VAR 0 9
34514: PUSH
34515: LD_VAR 0 47
34519: PUSH
34520: LD_VAR 0 48
34524: PUSH
34525: LD_VAR 0 49
34529: PUSH
34530: LD_VAR 0 50
34534: PUSH
34535: LD_VAR 0 51
34539: PUSH
34540: LD_VAR 0 52
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: PUSH
34553: LD_VAR 0 4
34557: PUSH
34558: LD_INT 1
34560: PLUS
34561: ARRAY
34562: ST_TO_ADDR
34563: GO 34754
34565: LD_INT 4
34567: DOUBLE
34568: EQUAL
34569: IFTRUE 34591
34571: LD_INT 5
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34591
34577: LD_INT 34
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34591
34583: LD_INT 37
34585: DOUBLE
34586: EQUAL
34587: IFTRUE 34591
34589: GO 34647
34591: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34592: LD_ADDR_VAR 0 9
34596: PUSH
34597: LD_VAR 0 53
34601: PUSH
34602: LD_VAR 0 54
34606: PUSH
34607: LD_VAR 0 55
34611: PUSH
34612: LD_VAR 0 56
34616: PUSH
34617: LD_VAR 0 57
34621: PUSH
34622: LD_VAR 0 58
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: PUSH
34635: LD_VAR 0 4
34639: PUSH
34640: LD_INT 1
34642: PLUS
34643: ARRAY
34644: ST_TO_ADDR
34645: GO 34754
34647: LD_INT 31
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34697
34653: LD_INT 32
34655: DOUBLE
34656: EQUAL
34657: IFTRUE 34697
34659: LD_INT 33
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34697
34665: LD_INT 27
34667: DOUBLE
34668: EQUAL
34669: IFTRUE 34697
34671: LD_INT 26
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34697
34677: LD_INT 28
34679: DOUBLE
34680: EQUAL
34681: IFTRUE 34697
34683: LD_INT 29
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34697
34689: LD_INT 30
34691: DOUBLE
34692: EQUAL
34693: IFTRUE 34697
34695: GO 34753
34697: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
34698: LD_ADDR_VAR 0 9
34702: PUSH
34703: LD_VAR 0 59
34707: PUSH
34708: LD_VAR 0 60
34712: PUSH
34713: LD_VAR 0 61
34717: PUSH
34718: LD_VAR 0 62
34722: PUSH
34723: LD_VAR 0 63
34727: PUSH
34728: LD_VAR 0 64
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: PUSH
34741: LD_VAR 0 4
34745: PUSH
34746: LD_INT 1
34748: PLUS
34749: ARRAY
34750: ST_TO_ADDR
34751: GO 34754
34753: POP
// temp_list2 = [ ] ;
34754: LD_ADDR_VAR 0 10
34758: PUSH
34759: EMPTY
34760: ST_TO_ADDR
// for i in temp_list do
34761: LD_ADDR_VAR 0 8
34765: PUSH
34766: LD_VAR 0 9
34770: PUSH
34771: FOR_IN
34772: IFFALSE 34824
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34774: LD_ADDR_VAR 0 10
34778: PUSH
34779: LD_VAR 0 10
34783: PUSH
34784: LD_VAR 0 8
34788: PUSH
34789: LD_INT 1
34791: ARRAY
34792: PUSH
34793: LD_VAR 0 2
34797: PLUS
34798: PUSH
34799: LD_VAR 0 8
34803: PUSH
34804: LD_INT 2
34806: ARRAY
34807: PUSH
34808: LD_VAR 0 3
34812: PLUS
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: ADD
34821: ST_TO_ADDR
34822: GO 34771
34824: POP
34825: POP
// result = temp_list2 ;
34826: LD_ADDR_VAR 0 7
34830: PUSH
34831: LD_VAR 0 10
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 7
34840: RET
// export function EnemyInRange ( unit , dist ) ; begin
34841: LD_INT 0
34843: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34844: LD_ADDR_VAR 0 3
34848: PUSH
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL_OW 255
34858: PPUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 250
34868: PPUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 251
34878: PPUSH
34879: LD_VAR 0 2
34883: PPUSH
34884: CALL 8945 0 4
34888: PUSH
34889: LD_INT 4
34891: ARRAY
34892: ST_TO_ADDR
// end ;
34893: LD_VAR 0 3
34897: RET
// export function PlayerSeeMe ( unit ) ; begin
34898: LD_INT 0
34900: PPUSH
// result := See ( your_side , unit ) ;
34901: LD_ADDR_VAR 0 2
34905: PUSH
34906: LD_OWVAR 2
34910: PPUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 292
34920: ST_TO_ADDR
// end ;
34921: LD_VAR 0 2
34925: RET
// export function ReverseDir ( unit ) ; begin
34926: LD_INT 0
34928: PPUSH
// if not unit then
34929: LD_VAR 0 1
34933: NOT
34934: IFFALSE 34938
// exit ;
34936: GO 34961
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34938: LD_ADDR_VAR 0 2
34942: PUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 254
34952: PUSH
34953: LD_INT 3
34955: PLUS
34956: PUSH
34957: LD_INT 6
34959: MOD
34960: ST_TO_ADDR
// end ;
34961: LD_VAR 0 2
34965: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
34966: LD_INT 0
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
// if not hexes then
34973: LD_VAR 0 2
34977: NOT
34978: IFFALSE 34982
// exit ;
34980: GO 35130
// dist := 9999 ;
34982: LD_ADDR_VAR 0 5
34986: PUSH
34987: LD_INT 9999
34989: ST_TO_ADDR
// for i = 1 to hexes do
34990: LD_ADDR_VAR 0 4
34994: PUSH
34995: DOUBLE
34996: LD_INT 1
34998: DEC
34999: ST_TO_ADDR
35000: LD_VAR 0 2
35004: PUSH
35005: FOR_TO
35006: IFFALSE 35118
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35008: LD_VAR 0 1
35012: PPUSH
35013: LD_VAR 0 2
35017: PUSH
35018: LD_VAR 0 4
35022: ARRAY
35023: PUSH
35024: LD_INT 1
35026: ARRAY
35027: PPUSH
35028: LD_VAR 0 2
35032: PUSH
35033: LD_VAR 0 4
35037: ARRAY
35038: PUSH
35039: LD_INT 2
35041: ARRAY
35042: PPUSH
35043: CALL_OW 297
35047: PUSH
35048: LD_VAR 0 5
35052: LESS
35053: IFFALSE 35116
// begin hex := hexes [ i ] ;
35055: LD_ADDR_VAR 0 7
35059: PUSH
35060: LD_VAR 0 2
35064: PUSH
35065: LD_VAR 0 4
35069: ARRAY
35070: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35071: LD_ADDR_VAR 0 5
35075: PUSH
35076: LD_VAR 0 1
35080: PPUSH
35081: LD_VAR 0 2
35085: PUSH
35086: LD_VAR 0 4
35090: ARRAY
35091: PUSH
35092: LD_INT 1
35094: ARRAY
35095: PPUSH
35096: LD_VAR 0 2
35100: PUSH
35101: LD_VAR 0 4
35105: ARRAY
35106: PUSH
35107: LD_INT 2
35109: ARRAY
35110: PPUSH
35111: CALL_OW 297
35115: ST_TO_ADDR
// end ; end ;
35116: GO 35005
35118: POP
35119: POP
// result := hex ;
35120: LD_ADDR_VAR 0 3
35124: PUSH
35125: LD_VAR 0 7
35129: ST_TO_ADDR
// end ;
35130: LD_VAR 0 3
35134: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35135: LD_INT 0
35137: PPUSH
35138: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35139: LD_VAR 0 1
35143: NOT
35144: PUSH
35145: LD_VAR 0 1
35149: PUSH
35150: LD_INT 21
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 23
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PPUSH
35174: CALL_OW 69
35178: IN
35179: NOT
35180: OR
35181: IFFALSE 35185
// exit ;
35183: GO 35232
// for i = 1 to 3 do
35185: LD_ADDR_VAR 0 3
35189: PUSH
35190: DOUBLE
35191: LD_INT 1
35193: DEC
35194: ST_TO_ADDR
35195: LD_INT 3
35197: PUSH
35198: FOR_TO
35199: IFFALSE 35230
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35201: LD_VAR 0 1
35205: PPUSH
35206: CALL_OW 250
35210: PPUSH
35211: LD_VAR 0 1
35215: PPUSH
35216: CALL_OW 251
35220: PPUSH
35221: LD_INT 1
35223: PPUSH
35224: CALL_OW 453
35228: GO 35198
35230: POP
35231: POP
// end ;
35232: LD_VAR 0 2
35236: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35237: LD_INT 0
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35245: LD_VAR 0 1
35249: NOT
35250: PUSH
35251: LD_VAR 0 2
35255: NOT
35256: OR
35257: PUSH
35258: LD_VAR 0 1
35262: PPUSH
35263: CALL_OW 314
35267: OR
35268: IFFALSE 35272
// exit ;
35270: GO 35713
// x := GetX ( enemy_unit ) ;
35272: LD_ADDR_VAR 0 7
35276: PUSH
35277: LD_VAR 0 2
35281: PPUSH
35282: CALL_OW 250
35286: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35287: LD_ADDR_VAR 0 8
35291: PUSH
35292: LD_VAR 0 2
35296: PPUSH
35297: CALL_OW 251
35301: ST_TO_ADDR
// if not x or not y then
35302: LD_VAR 0 7
35306: NOT
35307: PUSH
35308: LD_VAR 0 8
35312: NOT
35313: OR
35314: IFFALSE 35318
// exit ;
35316: GO 35713
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35318: LD_ADDR_VAR 0 6
35322: PUSH
35323: LD_VAR 0 7
35327: PPUSH
35328: LD_INT 0
35330: PPUSH
35331: LD_INT 4
35333: PPUSH
35334: CALL_OW 272
35338: PUSH
35339: LD_VAR 0 8
35343: PPUSH
35344: LD_INT 0
35346: PPUSH
35347: LD_INT 4
35349: PPUSH
35350: CALL_OW 273
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_VAR 0 7
35363: PPUSH
35364: LD_INT 1
35366: PPUSH
35367: LD_INT 4
35369: PPUSH
35370: CALL_OW 272
35374: PUSH
35375: LD_VAR 0 8
35379: PPUSH
35380: LD_INT 1
35382: PPUSH
35383: LD_INT 4
35385: PPUSH
35386: CALL_OW 273
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_VAR 0 7
35399: PPUSH
35400: LD_INT 2
35402: PPUSH
35403: LD_INT 4
35405: PPUSH
35406: CALL_OW 272
35410: PUSH
35411: LD_VAR 0 8
35415: PPUSH
35416: LD_INT 2
35418: PPUSH
35419: LD_INT 4
35421: PPUSH
35422: CALL_OW 273
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_VAR 0 7
35435: PPUSH
35436: LD_INT 3
35438: PPUSH
35439: LD_INT 4
35441: PPUSH
35442: CALL_OW 272
35446: PUSH
35447: LD_VAR 0 8
35451: PPUSH
35452: LD_INT 3
35454: PPUSH
35455: LD_INT 4
35457: PPUSH
35458: CALL_OW 273
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_VAR 0 7
35471: PPUSH
35472: LD_INT 4
35474: PPUSH
35475: LD_INT 4
35477: PPUSH
35478: CALL_OW 272
35482: PUSH
35483: LD_VAR 0 8
35487: PPUSH
35488: LD_INT 4
35490: PPUSH
35491: LD_INT 4
35493: PPUSH
35494: CALL_OW 273
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_VAR 0 7
35507: PPUSH
35508: LD_INT 5
35510: PPUSH
35511: LD_INT 4
35513: PPUSH
35514: CALL_OW 272
35518: PUSH
35519: LD_VAR 0 8
35523: PPUSH
35524: LD_INT 5
35526: PPUSH
35527: LD_INT 4
35529: PPUSH
35530: CALL_OW 273
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: ST_TO_ADDR
// for i = tmp downto 1 do
35547: LD_ADDR_VAR 0 4
35551: PUSH
35552: DOUBLE
35553: LD_VAR 0 6
35557: INC
35558: ST_TO_ADDR
35559: LD_INT 1
35561: PUSH
35562: FOR_DOWNTO
35563: IFFALSE 35664
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35565: LD_VAR 0 6
35569: PUSH
35570: LD_VAR 0 4
35574: ARRAY
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: PPUSH
35580: LD_VAR 0 6
35584: PUSH
35585: LD_VAR 0 4
35589: ARRAY
35590: PUSH
35591: LD_INT 2
35593: ARRAY
35594: PPUSH
35595: CALL_OW 488
35599: NOT
35600: PUSH
35601: LD_VAR 0 6
35605: PUSH
35606: LD_VAR 0 4
35610: ARRAY
35611: PUSH
35612: LD_INT 1
35614: ARRAY
35615: PPUSH
35616: LD_VAR 0 6
35620: PUSH
35621: LD_VAR 0 4
35625: ARRAY
35626: PUSH
35627: LD_INT 2
35629: ARRAY
35630: PPUSH
35631: CALL_OW 428
35635: PUSH
35636: LD_INT 0
35638: NONEQUAL
35639: OR
35640: IFFALSE 35662
// tmp := Delete ( tmp , i ) ;
35642: LD_ADDR_VAR 0 6
35646: PUSH
35647: LD_VAR 0 6
35651: PPUSH
35652: LD_VAR 0 4
35656: PPUSH
35657: CALL_OW 3
35661: ST_TO_ADDR
35662: GO 35562
35664: POP
35665: POP
// j := GetClosestHex ( unit , tmp ) ;
35666: LD_ADDR_VAR 0 5
35670: PUSH
35671: LD_VAR 0 1
35675: PPUSH
35676: LD_VAR 0 6
35680: PPUSH
35681: CALL 34966 0 2
35685: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35686: LD_VAR 0 1
35690: PPUSH
35691: LD_VAR 0 5
35695: PUSH
35696: LD_INT 1
35698: ARRAY
35699: PPUSH
35700: LD_VAR 0 5
35704: PUSH
35705: LD_INT 2
35707: ARRAY
35708: PPUSH
35709: CALL_OW 111
// end ;
35713: LD_VAR 0 3
35717: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35718: LD_INT 0
35720: PPUSH
35721: PPUSH
35722: PPUSH
// uc_side = 0 ;
35723: LD_ADDR_OWVAR 20
35727: PUSH
35728: LD_INT 0
35730: ST_TO_ADDR
// uc_nation = 0 ;
35731: LD_ADDR_OWVAR 21
35735: PUSH
35736: LD_INT 0
35738: ST_TO_ADDR
// InitHc ;
35739: CALL_OW 19
// InitVc ;
35743: CALL_OW 20
// if mastodonts then
35747: LD_VAR 0 6
35751: IFFALSE 35818
// for i = 1 to mastodonts do
35753: LD_ADDR_VAR 0 11
35757: PUSH
35758: DOUBLE
35759: LD_INT 1
35761: DEC
35762: ST_TO_ADDR
35763: LD_VAR 0 6
35767: PUSH
35768: FOR_TO
35769: IFFALSE 35816
// begin vc_chassis := 31 ;
35771: LD_ADDR_OWVAR 37
35775: PUSH
35776: LD_INT 31
35778: ST_TO_ADDR
// vc_control := control_rider ;
35779: LD_ADDR_OWVAR 38
35783: PUSH
35784: LD_INT 4
35786: ST_TO_ADDR
// animal := CreateVehicle ;
35787: LD_ADDR_VAR 0 12
35791: PUSH
35792: CALL_OW 45
35796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35797: LD_VAR 0 12
35801: PPUSH
35802: LD_VAR 0 8
35806: PPUSH
35807: LD_INT 0
35809: PPUSH
35810: CALL 37887 0 3
// end ;
35814: GO 35768
35816: POP
35817: POP
// if horses then
35818: LD_VAR 0 5
35822: IFFALSE 35889
// for i = 1 to horses do
35824: LD_ADDR_VAR 0 11
35828: PUSH
35829: DOUBLE
35830: LD_INT 1
35832: DEC
35833: ST_TO_ADDR
35834: LD_VAR 0 5
35838: PUSH
35839: FOR_TO
35840: IFFALSE 35887
// begin hc_class := 21 ;
35842: LD_ADDR_OWVAR 28
35846: PUSH
35847: LD_INT 21
35849: ST_TO_ADDR
// hc_gallery :=  ;
35850: LD_ADDR_OWVAR 33
35854: PUSH
35855: LD_STRING 
35857: ST_TO_ADDR
// animal := CreateHuman ;
35858: LD_ADDR_VAR 0 12
35862: PUSH
35863: CALL_OW 44
35867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35868: LD_VAR 0 12
35872: PPUSH
35873: LD_VAR 0 8
35877: PPUSH
35878: LD_INT 0
35880: PPUSH
35881: CALL 37887 0 3
// end ;
35885: GO 35839
35887: POP
35888: POP
// if birds then
35889: LD_VAR 0 1
35893: IFFALSE 35960
// for i = 1 to birds do
35895: LD_ADDR_VAR 0 11
35899: PUSH
35900: DOUBLE
35901: LD_INT 1
35903: DEC
35904: ST_TO_ADDR
35905: LD_VAR 0 1
35909: PUSH
35910: FOR_TO
35911: IFFALSE 35958
// begin hc_class = 18 ;
35913: LD_ADDR_OWVAR 28
35917: PUSH
35918: LD_INT 18
35920: ST_TO_ADDR
// hc_gallery =  ;
35921: LD_ADDR_OWVAR 33
35925: PUSH
35926: LD_STRING 
35928: ST_TO_ADDR
// animal := CreateHuman ;
35929: LD_ADDR_VAR 0 12
35933: PUSH
35934: CALL_OW 44
35938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35939: LD_VAR 0 12
35943: PPUSH
35944: LD_VAR 0 8
35948: PPUSH
35949: LD_INT 0
35951: PPUSH
35952: CALL 37887 0 3
// end ;
35956: GO 35910
35958: POP
35959: POP
// if tigers then
35960: LD_VAR 0 2
35964: IFFALSE 36048
// for i = 1 to tigers do
35966: LD_ADDR_VAR 0 11
35970: PUSH
35971: DOUBLE
35972: LD_INT 1
35974: DEC
35975: ST_TO_ADDR
35976: LD_VAR 0 2
35980: PUSH
35981: FOR_TO
35982: IFFALSE 36046
// begin hc_class = class_tiger ;
35984: LD_ADDR_OWVAR 28
35988: PUSH
35989: LD_INT 14
35991: ST_TO_ADDR
// hc_gallery =  ;
35992: LD_ADDR_OWVAR 33
35996: PUSH
35997: LD_STRING 
35999: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36000: LD_ADDR_OWVAR 35
36004: PUSH
36005: LD_INT 7
36007: NEG
36008: PPUSH
36009: LD_INT 7
36011: PPUSH
36012: CALL_OW 12
36016: ST_TO_ADDR
// animal := CreateHuman ;
36017: LD_ADDR_VAR 0 12
36021: PUSH
36022: CALL_OW 44
36026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36027: LD_VAR 0 12
36031: PPUSH
36032: LD_VAR 0 8
36036: PPUSH
36037: LD_INT 0
36039: PPUSH
36040: CALL 37887 0 3
// end ;
36044: GO 35981
36046: POP
36047: POP
// if apemans then
36048: LD_VAR 0 3
36052: IFFALSE 36175
// for i = 1 to apemans do
36054: LD_ADDR_VAR 0 11
36058: PUSH
36059: DOUBLE
36060: LD_INT 1
36062: DEC
36063: ST_TO_ADDR
36064: LD_VAR 0 3
36068: PUSH
36069: FOR_TO
36070: IFFALSE 36173
// begin hc_class = class_apeman ;
36072: LD_ADDR_OWVAR 28
36076: PUSH
36077: LD_INT 12
36079: ST_TO_ADDR
// hc_gallery =  ;
36080: LD_ADDR_OWVAR 33
36084: PUSH
36085: LD_STRING 
36087: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
36088: LD_ADDR_OWVAR 35
36092: PUSH
36093: LD_INT 5
36095: NEG
36096: PPUSH
36097: LD_INT 5
36099: PPUSH
36100: CALL_OW 12
36104: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36105: LD_ADDR_OWVAR 31
36109: PUSH
36110: LD_INT 1
36112: PPUSH
36113: LD_INT 3
36115: PPUSH
36116: CALL_OW 12
36120: PUSH
36121: LD_INT 1
36123: PPUSH
36124: LD_INT 3
36126: PPUSH
36127: CALL_OW 12
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// animal := CreateHuman ;
36144: LD_ADDR_VAR 0 12
36148: PUSH
36149: CALL_OW 44
36153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36154: LD_VAR 0 12
36158: PPUSH
36159: LD_VAR 0 8
36163: PPUSH
36164: LD_INT 0
36166: PPUSH
36167: CALL 37887 0 3
// end ;
36171: GO 36069
36173: POP
36174: POP
// if enchidnas then
36175: LD_VAR 0 4
36179: IFFALSE 36246
// for i = 1 to enchidnas do
36181: LD_ADDR_VAR 0 11
36185: PUSH
36186: DOUBLE
36187: LD_INT 1
36189: DEC
36190: ST_TO_ADDR
36191: LD_VAR 0 4
36195: PUSH
36196: FOR_TO
36197: IFFALSE 36244
// begin hc_class = 13 ;
36199: LD_ADDR_OWVAR 28
36203: PUSH
36204: LD_INT 13
36206: ST_TO_ADDR
// hc_gallery =  ;
36207: LD_ADDR_OWVAR 33
36211: PUSH
36212: LD_STRING 
36214: ST_TO_ADDR
// animal := CreateHuman ;
36215: LD_ADDR_VAR 0 12
36219: PUSH
36220: CALL_OW 44
36224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36225: LD_VAR 0 12
36229: PPUSH
36230: LD_VAR 0 8
36234: PPUSH
36235: LD_INT 0
36237: PPUSH
36238: CALL 37887 0 3
// end ;
36242: GO 36196
36244: POP
36245: POP
// if fishes then
36246: LD_VAR 0 7
36250: IFFALSE 36317
// for i = 1 to fishes do
36252: LD_ADDR_VAR 0 11
36256: PUSH
36257: DOUBLE
36258: LD_INT 1
36260: DEC
36261: ST_TO_ADDR
36262: LD_VAR 0 7
36266: PUSH
36267: FOR_TO
36268: IFFALSE 36315
// begin hc_class = 20 ;
36270: LD_ADDR_OWVAR 28
36274: PUSH
36275: LD_INT 20
36277: ST_TO_ADDR
// hc_gallery =  ;
36278: LD_ADDR_OWVAR 33
36282: PUSH
36283: LD_STRING 
36285: ST_TO_ADDR
// animal := CreateHuman ;
36286: LD_ADDR_VAR 0 12
36290: PUSH
36291: CALL_OW 44
36295: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36296: LD_VAR 0 12
36300: PPUSH
36301: LD_VAR 0 9
36305: PPUSH
36306: LD_INT 0
36308: PPUSH
36309: CALL 37887 0 3
// end ;
36313: GO 36267
36315: POP
36316: POP
// end ;
36317: LD_VAR 0 10
36321: RET
// export function WantHeal ( sci , unit ) ; begin
36322: LD_INT 0
36324: PPUSH
// if GetTaskList ( sci ) > 0 then
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 437
36334: PUSH
36335: LD_INT 0
36337: GREATER
36338: IFFALSE 36408
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 437
36349: PUSH
36350: LD_INT 1
36352: ARRAY
36353: PUSH
36354: LD_INT 1
36356: ARRAY
36357: PUSH
36358: LD_STRING l
36360: EQUAL
36361: PUSH
36362: LD_VAR 0 1
36366: PPUSH
36367: CALL_OW 437
36371: PUSH
36372: LD_INT 1
36374: ARRAY
36375: PUSH
36376: LD_INT 4
36378: ARRAY
36379: PUSH
36380: LD_VAR 0 2
36384: EQUAL
36385: AND
36386: IFFALSE 36398
// result := true else
36388: LD_ADDR_VAR 0 3
36392: PUSH
36393: LD_INT 1
36395: ST_TO_ADDR
36396: GO 36406
// result := false ;
36398: LD_ADDR_VAR 0 3
36402: PUSH
36403: LD_INT 0
36405: ST_TO_ADDR
// end else
36406: GO 36416
// result := false ;
36408: LD_ADDR_VAR 0 3
36412: PUSH
36413: LD_INT 0
36415: ST_TO_ADDR
// end ;
36416: LD_VAR 0 3
36420: RET
// export function HealTarget ( sci ) ; begin
36421: LD_INT 0
36423: PPUSH
// if not sci then
36424: LD_VAR 0 1
36428: NOT
36429: IFFALSE 36433
// exit ;
36431: GO 36498
// result := 0 ;
36433: LD_ADDR_VAR 0 2
36437: PUSH
36438: LD_INT 0
36440: ST_TO_ADDR
// if GetTaskList ( sci ) then
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 437
36450: IFFALSE 36498
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 437
36461: PUSH
36462: LD_INT 1
36464: ARRAY
36465: PUSH
36466: LD_INT 1
36468: ARRAY
36469: PUSH
36470: LD_STRING l
36472: EQUAL
36473: IFFALSE 36498
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36475: LD_ADDR_VAR 0 2
36479: PUSH
36480: LD_VAR 0 1
36484: PPUSH
36485: CALL_OW 437
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: PUSH
36494: LD_INT 4
36496: ARRAY
36497: ST_TO_ADDR
// end ;
36498: LD_VAR 0 2
36502: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36503: LD_INT 0
36505: PPUSH
36506: PPUSH
36507: PPUSH
36508: PPUSH
// if not base_units then
36509: LD_VAR 0 1
36513: NOT
36514: IFFALSE 36518
// exit ;
36516: GO 36605
// result := false ;
36518: LD_ADDR_VAR 0 2
36522: PUSH
36523: LD_INT 0
36525: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36526: LD_ADDR_VAR 0 5
36530: PUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: LD_INT 21
36538: PUSH
36539: LD_INT 3
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PPUSH
36546: CALL_OW 72
36550: ST_TO_ADDR
// if not tmp then
36551: LD_VAR 0 5
36555: NOT
36556: IFFALSE 36560
// exit ;
36558: GO 36605
// for i in tmp do
36560: LD_ADDR_VAR 0 3
36564: PUSH
36565: LD_VAR 0 5
36569: PUSH
36570: FOR_IN
36571: IFFALSE 36603
// begin result := EnemyInRange ( i , 22 ) ;
36573: LD_ADDR_VAR 0 2
36577: PUSH
36578: LD_VAR 0 3
36582: PPUSH
36583: LD_INT 22
36585: PPUSH
36586: CALL 34841 0 2
36590: ST_TO_ADDR
// if result then
36591: LD_VAR 0 2
36595: IFFALSE 36601
// exit ;
36597: POP
36598: POP
36599: GO 36605
// end ;
36601: GO 36570
36603: POP
36604: POP
// end ;
36605: LD_VAR 0 2
36609: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
36610: LD_INT 0
36612: PPUSH
36613: PPUSH
// if not units then
36614: LD_VAR 0 1
36618: NOT
36619: IFFALSE 36623
// exit ;
36621: GO 36693
// result := [ ] ;
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: EMPTY
36629: ST_TO_ADDR
// for i in units do
36630: LD_ADDR_VAR 0 4
36634: PUSH
36635: LD_VAR 0 1
36639: PUSH
36640: FOR_IN
36641: IFFALSE 36691
// if GetTag ( i ) = tag then
36643: LD_VAR 0 4
36647: PPUSH
36648: CALL_OW 110
36652: PUSH
36653: LD_VAR 0 2
36657: EQUAL
36658: IFFALSE 36689
// result := Insert ( result , result + 1 , i ) ;
36660: LD_ADDR_VAR 0 3
36664: PUSH
36665: LD_VAR 0 3
36669: PPUSH
36670: LD_VAR 0 3
36674: PUSH
36675: LD_INT 1
36677: PLUS
36678: PPUSH
36679: LD_VAR 0 4
36683: PPUSH
36684: CALL_OW 2
36688: ST_TO_ADDR
36689: GO 36640
36691: POP
36692: POP
// end ;
36693: LD_VAR 0 3
36697: RET
// export function IsDriver ( un ) ; begin
36698: LD_INT 0
36700: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36701: LD_ADDR_VAR 0 2
36705: PUSH
36706: LD_VAR 0 1
36710: PUSH
36711: LD_INT 55
36713: PUSH
36714: EMPTY
36715: LIST
36716: PPUSH
36717: CALL_OW 69
36721: IN
36722: ST_TO_ADDR
// end ;
36723: LD_VAR 0 2
36727: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36728: LD_INT 0
36730: PPUSH
36731: PPUSH
// list := [ ] ;
36732: LD_ADDR_VAR 0 5
36736: PUSH
36737: EMPTY
36738: ST_TO_ADDR
// case d of 0 :
36739: LD_VAR 0 3
36743: PUSH
36744: LD_INT 0
36746: DOUBLE
36747: EQUAL
36748: IFTRUE 36752
36750: GO 36885
36752: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36753: LD_ADDR_VAR 0 5
36757: PUSH
36758: LD_VAR 0 1
36762: PUSH
36763: LD_INT 4
36765: MINUS
36766: PUSH
36767: LD_VAR 0 2
36771: PUSH
36772: LD_INT 4
36774: MINUS
36775: PUSH
36776: LD_INT 2
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: PUSH
36784: LD_VAR 0 1
36788: PUSH
36789: LD_INT 3
36791: MINUS
36792: PUSH
36793: LD_VAR 0 2
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: PUSH
36806: LD_VAR 0 1
36810: PUSH
36811: LD_INT 4
36813: PLUS
36814: PUSH
36815: LD_VAR 0 2
36819: PUSH
36820: LD_INT 4
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: PUSH
36828: LD_VAR 0 1
36832: PUSH
36833: LD_INT 3
36835: PLUS
36836: PUSH
36837: LD_VAR 0 2
36841: PUSH
36842: LD_INT 3
36844: PLUS
36845: PUSH
36846: LD_INT 5
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: LIST
36853: PUSH
36854: LD_VAR 0 1
36858: PUSH
36859: LD_VAR 0 2
36863: PUSH
36864: LD_INT 4
36866: PLUS
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: ST_TO_ADDR
// end ; 1 :
36883: GO 37583
36885: LD_INT 1
36887: DOUBLE
36888: EQUAL
36889: IFTRUE 36893
36891: GO 37026
36893: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36894: LD_ADDR_VAR 0 5
36898: PUSH
36899: LD_VAR 0 1
36903: PUSH
36904: LD_VAR 0 2
36908: PUSH
36909: LD_INT 4
36911: MINUS
36912: PUSH
36913: LD_INT 3
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: PUSH
36921: LD_VAR 0 1
36925: PUSH
36926: LD_INT 3
36928: MINUS
36929: PUSH
36930: LD_VAR 0 2
36934: PUSH
36935: LD_INT 3
36937: MINUS
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: PUSH
36947: LD_VAR 0 1
36951: PUSH
36952: LD_INT 4
36954: MINUS
36955: PUSH
36956: LD_VAR 0 2
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: PUSH
36969: LD_VAR 0 1
36973: PUSH
36974: LD_VAR 0 2
36978: PUSH
36979: LD_INT 3
36981: PLUS
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: PUSH
36991: LD_VAR 0 1
36995: PUSH
36996: LD_INT 4
36998: PLUS
36999: PUSH
37000: LD_VAR 0 2
37004: PUSH
37005: LD_INT 4
37007: PLUS
37008: PUSH
37009: LD_INT 5
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: ST_TO_ADDR
// end ; 2 :
37024: GO 37583
37026: LD_INT 2
37028: DOUBLE
37029: EQUAL
37030: IFTRUE 37034
37032: GO 37163
37034: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37035: LD_ADDR_VAR 0 5
37039: PUSH
37040: LD_VAR 0 1
37044: PUSH
37045: LD_VAR 0 2
37049: PUSH
37050: LD_INT 3
37052: MINUS
37053: PUSH
37054: LD_INT 3
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: PUSH
37062: LD_VAR 0 1
37066: PUSH
37067: LD_INT 4
37069: PLUS
37070: PUSH
37071: LD_VAR 0 2
37075: PUSH
37076: LD_INT 4
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: PUSH
37084: LD_VAR 0 1
37088: PUSH
37089: LD_VAR 0 2
37093: PUSH
37094: LD_INT 4
37096: PLUS
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: PUSH
37106: LD_VAR 0 1
37110: PUSH
37111: LD_INT 3
37113: MINUS
37114: PUSH
37115: LD_VAR 0 2
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: PUSH
37128: LD_VAR 0 1
37132: PUSH
37133: LD_INT 4
37135: MINUS
37136: PUSH
37137: LD_VAR 0 2
37141: PUSH
37142: LD_INT 4
37144: MINUS
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
// end ; 3 :
37161: GO 37583
37163: LD_INT 3
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37304
37171: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37172: LD_ADDR_VAR 0 5
37176: PUSH
37177: LD_VAR 0 1
37181: PUSH
37182: LD_INT 3
37184: PLUS
37185: PUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_INT 4
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: LIST
37198: PUSH
37199: LD_VAR 0 1
37203: PUSH
37204: LD_INT 4
37206: PLUS
37207: PUSH
37208: LD_VAR 0 2
37212: PUSH
37213: LD_INT 4
37215: PLUS
37216: PUSH
37217: LD_INT 5
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: PUSH
37225: LD_VAR 0 1
37229: PUSH
37230: LD_INT 4
37232: MINUS
37233: PUSH
37234: LD_VAR 0 2
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: PUSH
37247: LD_VAR 0 1
37251: PUSH
37252: LD_VAR 0 2
37256: PUSH
37257: LD_INT 4
37259: MINUS
37260: PUSH
37261: LD_INT 3
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: PUSH
37269: LD_VAR 0 1
37273: PUSH
37274: LD_INT 3
37276: MINUS
37277: PUSH
37278: LD_VAR 0 2
37282: PUSH
37283: LD_INT 3
37285: MINUS
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// end ; 4 :
37302: GO 37583
37304: LD_INT 4
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37445
37312: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37313: LD_ADDR_VAR 0 5
37317: PUSH
37318: LD_VAR 0 1
37322: PUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_INT 4
37330: PLUS
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: PUSH
37340: LD_VAR 0 1
37344: PUSH
37345: LD_INT 3
37347: PLUS
37348: PUSH
37349: LD_VAR 0 2
37353: PUSH
37354: LD_INT 3
37356: PLUS
37357: PUSH
37358: LD_INT 5
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: PUSH
37366: LD_VAR 0 1
37370: PUSH
37371: LD_INT 4
37373: PLUS
37374: PUSH
37375: LD_VAR 0 2
37379: PUSH
37380: LD_INT 4
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: PUSH
37388: LD_VAR 0 1
37392: PUSH
37393: LD_VAR 0 2
37397: PUSH
37398: LD_INT 3
37400: MINUS
37401: PUSH
37402: LD_INT 3
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: PUSH
37410: LD_VAR 0 1
37414: PUSH
37415: LD_INT 4
37417: MINUS
37418: PUSH
37419: LD_VAR 0 2
37423: PUSH
37424: LD_INT 4
37426: MINUS
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// end ; 5 :
37443: GO 37583
37445: LD_INT 5
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37582
37453: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37454: LD_ADDR_VAR 0 5
37458: PUSH
37459: LD_VAR 0 1
37463: PUSH
37464: LD_INT 4
37466: MINUS
37467: PUSH
37468: LD_VAR 0 2
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: PUSH
37481: LD_VAR 0 1
37485: PUSH
37486: LD_VAR 0 2
37490: PUSH
37491: LD_INT 4
37493: MINUS
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: PUSH
37503: LD_VAR 0 1
37507: PUSH
37508: LD_INT 4
37510: PLUS
37511: PUSH
37512: LD_VAR 0 2
37516: PUSH
37517: LD_INT 4
37519: PLUS
37520: PUSH
37521: LD_INT 5
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: LIST
37528: PUSH
37529: LD_VAR 0 1
37533: PUSH
37534: LD_INT 3
37536: PLUS
37537: PUSH
37538: LD_VAR 0 2
37542: PUSH
37543: LD_INT 4
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: PUSH
37551: LD_VAR 0 1
37555: PUSH
37556: LD_VAR 0 2
37560: PUSH
37561: LD_INT 3
37563: PLUS
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// end ; end ;
37580: GO 37583
37582: POP
// result := list ;
37583: LD_ADDR_VAR 0 4
37587: PUSH
37588: LD_VAR 0 5
37592: ST_TO_ADDR
// end ;
37593: LD_VAR 0 4
37597: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37598: LD_INT 0
37600: PPUSH
37601: PPUSH
37602: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37603: LD_VAR 0 1
37607: NOT
37608: PUSH
37609: LD_VAR 0 2
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: LD_INT 4
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: IN
37632: NOT
37633: OR
37634: IFFALSE 37638
// exit ;
37636: GO 37730
// tmp := [ ] ;
37638: LD_ADDR_VAR 0 5
37642: PUSH
37643: EMPTY
37644: ST_TO_ADDR
// for i in units do
37645: LD_ADDR_VAR 0 4
37649: PUSH
37650: LD_VAR 0 1
37654: PUSH
37655: FOR_IN
37656: IFFALSE 37699
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37658: LD_ADDR_VAR 0 5
37662: PUSH
37663: LD_VAR 0 5
37667: PPUSH
37668: LD_VAR 0 5
37672: PUSH
37673: LD_INT 1
37675: PLUS
37676: PPUSH
37677: LD_VAR 0 4
37681: PPUSH
37682: LD_VAR 0 2
37686: PPUSH
37687: CALL_OW 259
37691: PPUSH
37692: CALL_OW 2
37696: ST_TO_ADDR
37697: GO 37655
37699: POP
37700: POP
// if not tmp then
37701: LD_VAR 0 5
37705: NOT
37706: IFFALSE 37710
// exit ;
37708: GO 37730
// result := SortListByListDesc ( units , tmp ) ;
37710: LD_ADDR_VAR 0 3
37714: PUSH
37715: LD_VAR 0 1
37719: PPUSH
37720: LD_VAR 0 5
37724: PPUSH
37725: CALL_OW 77
37729: ST_TO_ADDR
// end ;
37730: LD_VAR 0 3
37734: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37735: LD_INT 0
37737: PPUSH
37738: PPUSH
37739: PPUSH
// x := GetX ( building ) ;
37740: LD_ADDR_VAR 0 4
37744: PUSH
37745: LD_VAR 0 2
37749: PPUSH
37750: CALL_OW 250
37754: ST_TO_ADDR
// y := GetY ( building ) ;
37755: LD_ADDR_VAR 0 5
37759: PUSH
37760: LD_VAR 0 2
37764: PPUSH
37765: CALL_OW 251
37769: ST_TO_ADDR
// if GetTaskList ( unit ) then
37770: LD_VAR 0 1
37774: PPUSH
37775: CALL_OW 437
37779: IFFALSE 37874
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37781: LD_STRING e
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 437
37793: PUSH
37794: LD_INT 1
37796: ARRAY
37797: PUSH
37798: LD_INT 1
37800: ARRAY
37801: EQUAL
37802: PUSH
37803: LD_VAR 0 4
37807: PUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 437
37817: PUSH
37818: LD_INT 1
37820: ARRAY
37821: PUSH
37822: LD_INT 2
37824: ARRAY
37825: EQUAL
37826: AND
37827: PUSH
37828: LD_VAR 0 5
37832: PUSH
37833: LD_VAR 0 1
37837: PPUSH
37838: CALL_OW 437
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PUSH
37847: LD_INT 3
37849: ARRAY
37850: EQUAL
37851: AND
37852: IFFALSE 37864
// result := true else
37854: LD_ADDR_VAR 0 3
37858: PUSH
37859: LD_INT 1
37861: ST_TO_ADDR
37862: GO 37872
// result := false ;
37864: LD_ADDR_VAR 0 3
37868: PUSH
37869: LD_INT 0
37871: ST_TO_ADDR
// end else
37872: GO 37882
// result := false ;
37874: LD_ADDR_VAR 0 3
37878: PUSH
37879: LD_INT 0
37881: ST_TO_ADDR
// end ;
37882: LD_VAR 0 3
37886: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37887: LD_INT 0
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
// if not unit or not area then
37893: LD_VAR 0 1
37897: NOT
37898: PUSH
37899: LD_VAR 0 2
37903: NOT
37904: OR
37905: IFFALSE 37909
// exit ;
37907: GO 38073
// tmp := AreaToList ( area , i ) ;
37909: LD_ADDR_VAR 0 6
37913: PUSH
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_VAR 0 5
37923: PPUSH
37924: CALL_OW 517
37928: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37929: LD_ADDR_VAR 0 5
37933: PUSH
37934: DOUBLE
37935: LD_INT 1
37937: DEC
37938: ST_TO_ADDR
37939: LD_VAR 0 6
37943: PUSH
37944: LD_INT 1
37946: ARRAY
37947: PUSH
37948: FOR_TO
37949: IFFALSE 38071
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37951: LD_ADDR_VAR 0 7
37955: PUSH
37956: LD_VAR 0 6
37960: PUSH
37961: LD_INT 1
37963: ARRAY
37964: PUSH
37965: LD_VAR 0 5
37969: ARRAY
37970: PUSH
37971: LD_VAR 0 6
37975: PUSH
37976: LD_INT 2
37978: ARRAY
37979: PUSH
37980: LD_VAR 0 5
37984: ARRAY
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37990: LD_VAR 0 7
37994: PUSH
37995: LD_INT 1
37997: ARRAY
37998: PPUSH
37999: LD_VAR 0 7
38003: PUSH
38004: LD_INT 2
38006: ARRAY
38007: PPUSH
38008: CALL_OW 428
38012: PUSH
38013: LD_INT 0
38015: EQUAL
38016: IFFALSE 38069
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38018: LD_VAR 0 1
38022: PPUSH
38023: LD_VAR 0 7
38027: PUSH
38028: LD_INT 1
38030: ARRAY
38031: PPUSH
38032: LD_VAR 0 7
38036: PUSH
38037: LD_INT 2
38039: ARRAY
38040: PPUSH
38041: LD_VAR 0 3
38045: PPUSH
38046: CALL_OW 48
// result := IsPlaced ( unit ) ;
38050: LD_ADDR_VAR 0 4
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 305
38064: ST_TO_ADDR
// exit ;
38065: POP
38066: POP
38067: GO 38073
// end ; end ;
38069: GO 37948
38071: POP
38072: POP
// end ;
38073: LD_VAR 0 4
38077: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38078: LD_INT 0
38080: PPUSH
38081: PPUSH
38082: PPUSH
// if not side or side > 8 then
38083: LD_VAR 0 1
38087: NOT
38088: PUSH
38089: LD_VAR 0 1
38093: PUSH
38094: LD_INT 8
38096: GREATER
38097: OR
38098: IFFALSE 38102
// exit ;
38100: GO 38289
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38102: LD_ADDR_VAR 0 4
38106: PUSH
38107: LD_INT 22
38109: PUSH
38110: LD_VAR 0 1
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 21
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PPUSH
38133: CALL_OW 69
38137: ST_TO_ADDR
// if not tmp then
38138: LD_VAR 0 4
38142: NOT
38143: IFFALSE 38147
// exit ;
38145: GO 38289
// enable_addtolog := true ;
38147: LD_ADDR_OWVAR 81
38151: PUSH
38152: LD_INT 1
38154: ST_TO_ADDR
// AddToLog ( [ ) ;
38155: LD_STRING [
38157: PPUSH
38158: CALL_OW 561
// for i in tmp do
38162: LD_ADDR_VAR 0 3
38166: PUSH
38167: LD_VAR 0 4
38171: PUSH
38172: FOR_IN
38173: IFFALSE 38280
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38175: LD_STRING [
38177: PUSH
38178: LD_VAR 0 3
38182: PPUSH
38183: CALL_OW 266
38187: STR
38188: PUSH
38189: LD_STRING , 
38191: STR
38192: PUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: CALL_OW 250
38202: STR
38203: PUSH
38204: LD_STRING , 
38206: STR
38207: PUSH
38208: LD_VAR 0 3
38212: PPUSH
38213: CALL_OW 251
38217: STR
38218: PUSH
38219: LD_STRING , 
38221: STR
38222: PUSH
38223: LD_VAR 0 3
38227: PPUSH
38228: CALL_OW 254
38232: STR
38233: PUSH
38234: LD_STRING , 
38236: STR
38237: PUSH
38238: LD_VAR 0 3
38242: PPUSH
38243: LD_INT 1
38245: PPUSH
38246: CALL_OW 268
38250: STR
38251: PUSH
38252: LD_STRING , 
38254: STR
38255: PUSH
38256: LD_VAR 0 3
38260: PPUSH
38261: LD_INT 2
38263: PPUSH
38264: CALL_OW 268
38268: STR
38269: PUSH
38270: LD_STRING ],
38272: STR
38273: PPUSH
38274: CALL_OW 561
// end ;
38278: GO 38172
38280: POP
38281: POP
// AddToLog ( ]; ) ;
38282: LD_STRING ];
38284: PPUSH
38285: CALL_OW 561
// end ;
38289: LD_VAR 0 2
38293: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38294: LD_INT 0
38296: PPUSH
38297: PPUSH
38298: PPUSH
38299: PPUSH
38300: PPUSH
// if not area or not rate or not max then
38301: LD_VAR 0 1
38305: NOT
38306: PUSH
38307: LD_VAR 0 2
38311: NOT
38312: OR
38313: PUSH
38314: LD_VAR 0 4
38318: NOT
38319: OR
38320: IFFALSE 38324
// exit ;
38322: GO 38516
// while 1 do
38324: LD_INT 1
38326: IFFALSE 38516
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38328: LD_ADDR_VAR 0 9
38332: PUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: LD_INT 1
38340: PPUSH
38341: CALL_OW 287
38345: PUSH
38346: LD_INT 10
38348: MUL
38349: ST_TO_ADDR
// r := rate / 10 ;
38350: LD_ADDR_VAR 0 7
38354: PUSH
38355: LD_VAR 0 2
38359: PUSH
38360: LD_INT 10
38362: DIVREAL
38363: ST_TO_ADDR
// time := 1 1$00 ;
38364: LD_ADDR_VAR 0 8
38368: PUSH
38369: LD_INT 2100
38371: ST_TO_ADDR
// if amount < min then
38372: LD_VAR 0 9
38376: PUSH
38377: LD_VAR 0 3
38381: LESS
38382: IFFALSE 38400
// r := r * 2 else
38384: LD_ADDR_VAR 0 7
38388: PUSH
38389: LD_VAR 0 7
38393: PUSH
38394: LD_INT 2
38396: MUL
38397: ST_TO_ADDR
38398: GO 38426
// if amount > max then
38400: LD_VAR 0 9
38404: PUSH
38405: LD_VAR 0 4
38409: GREATER
38410: IFFALSE 38426
// r := r / 2 ;
38412: LD_ADDR_VAR 0 7
38416: PUSH
38417: LD_VAR 0 7
38421: PUSH
38422: LD_INT 2
38424: DIVREAL
38425: ST_TO_ADDR
// time := time / r ;
38426: LD_ADDR_VAR 0 8
38430: PUSH
38431: LD_VAR 0 8
38435: PUSH
38436: LD_VAR 0 7
38440: DIVREAL
38441: ST_TO_ADDR
// if time < 0 then
38442: LD_VAR 0 8
38446: PUSH
38447: LD_INT 0
38449: LESS
38450: IFFALSE 38467
// time := time * - 1 ;
38452: LD_ADDR_VAR 0 8
38456: PUSH
38457: LD_VAR 0 8
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: MUL
38466: ST_TO_ADDR
// wait ( time ) ;
38467: LD_VAR 0 8
38471: PPUSH
38472: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
38476: LD_INT 35
38478: PPUSH
38479: LD_INT 875
38481: PPUSH
38482: CALL_OW 12
38486: PPUSH
38487: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38491: LD_INT 1
38493: PPUSH
38494: LD_INT 5
38496: PPUSH
38497: CALL_OW 12
38501: PPUSH
38502: LD_VAR 0 1
38506: PPUSH
38507: LD_INT 1
38509: PPUSH
38510: CALL_OW 55
// end ;
38514: GO 38324
// end ;
38516: LD_VAR 0 5
38520: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38521: LD_INT 0
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
// if not turrets or not factories then
38531: LD_VAR 0 1
38535: NOT
38536: PUSH
38537: LD_VAR 0 2
38541: NOT
38542: OR
38543: IFFALSE 38547
// exit ;
38545: GO 38854
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38547: LD_ADDR_VAR 0 10
38551: PUSH
38552: LD_INT 5
38554: PUSH
38555: LD_INT 6
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 4
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 3
38574: PUSH
38575: LD_INT 5
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 24
38589: PUSH
38590: LD_INT 25
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 23
38599: PUSH
38600: LD_INT 27
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 42
38613: PUSH
38614: LD_INT 43
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 44
38623: PUSH
38624: LD_INT 46
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 45
38633: PUSH
38634: LD_INT 47
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: LIST
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: LIST
38650: ST_TO_ADDR
// result := [ ] ;
38651: LD_ADDR_VAR 0 3
38655: PUSH
38656: EMPTY
38657: ST_TO_ADDR
// for i in turrets do
38658: LD_ADDR_VAR 0 4
38662: PUSH
38663: LD_VAR 0 1
38667: PUSH
38668: FOR_IN
38669: IFFALSE 38852
// begin nat := GetNation ( i ) ;
38671: LD_ADDR_VAR 0 7
38675: PUSH
38676: LD_VAR 0 4
38680: PPUSH
38681: CALL_OW 248
38685: ST_TO_ADDR
// weapon := 0 ;
38686: LD_ADDR_VAR 0 8
38690: PUSH
38691: LD_INT 0
38693: ST_TO_ADDR
// if not nat then
38694: LD_VAR 0 7
38698: NOT
38699: IFFALSE 38703
// continue ;
38701: GO 38668
// for j in list [ nat ] do
38703: LD_ADDR_VAR 0 5
38707: PUSH
38708: LD_VAR 0 10
38712: PUSH
38713: LD_VAR 0 7
38717: ARRAY
38718: PUSH
38719: FOR_IN
38720: IFFALSE 38761
// if GetBWeapon ( i ) = j [ 1 ] then
38722: LD_VAR 0 4
38726: PPUSH
38727: CALL_OW 269
38731: PUSH
38732: LD_VAR 0 5
38736: PUSH
38737: LD_INT 1
38739: ARRAY
38740: EQUAL
38741: IFFALSE 38759
// begin weapon := j [ 2 ] ;
38743: LD_ADDR_VAR 0 8
38747: PUSH
38748: LD_VAR 0 5
38752: PUSH
38753: LD_INT 2
38755: ARRAY
38756: ST_TO_ADDR
// break ;
38757: GO 38761
// end ;
38759: GO 38719
38761: POP
38762: POP
// if not weapon then
38763: LD_VAR 0 8
38767: NOT
38768: IFFALSE 38772
// continue ;
38770: GO 38668
// for k in factories do
38772: LD_ADDR_VAR 0 6
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: FOR_IN
38783: IFFALSE 38848
// begin weapons := AvailableWeaponList ( k ) ;
38785: LD_ADDR_VAR 0 9
38789: PUSH
38790: LD_VAR 0 6
38794: PPUSH
38795: CALL_OW 478
38799: ST_TO_ADDR
// if not weapons then
38800: LD_VAR 0 9
38804: NOT
38805: IFFALSE 38809
// continue ;
38807: GO 38782
// if weapon in weapons then
38809: LD_VAR 0 8
38813: PUSH
38814: LD_VAR 0 9
38818: IN
38819: IFFALSE 38846
// begin result := [ i , weapon ] ;
38821: LD_ADDR_VAR 0 3
38825: PUSH
38826: LD_VAR 0 4
38830: PUSH
38831: LD_VAR 0 8
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: ST_TO_ADDR
// exit ;
38840: POP
38841: POP
38842: POP
38843: POP
38844: GO 38854
// end ; end ;
38846: GO 38782
38848: POP
38849: POP
// end ;
38850: GO 38668
38852: POP
38853: POP
// end ;
38854: LD_VAR 0 3
38858: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38859: LD_INT 0
38861: PPUSH
// if not side or side > 8 then
38862: LD_VAR 0 3
38866: NOT
38867: PUSH
38868: LD_VAR 0 3
38872: PUSH
38873: LD_INT 8
38875: GREATER
38876: OR
38877: IFFALSE 38881
// exit ;
38879: GO 38940
// if not range then
38881: LD_VAR 0 4
38885: NOT
38886: IFFALSE 38897
// range := - 12 ;
38888: LD_ADDR_VAR 0 4
38892: PUSH
38893: LD_INT 12
38895: NEG
38896: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38897: LD_VAR 0 1
38901: PPUSH
38902: LD_VAR 0 2
38906: PPUSH
38907: LD_VAR 0 3
38911: PPUSH
38912: LD_VAR 0 4
38916: PPUSH
38917: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38921: LD_VAR 0 1
38925: PPUSH
38926: LD_VAR 0 2
38930: PPUSH
38931: LD_VAR 0 3
38935: PPUSH
38936: CALL_OW 331
// end ;
38940: LD_VAR 0 5
38944: RET
// export function Video ( mode ) ; begin
38945: LD_INT 0
38947: PPUSH
// ingame_video = mode ;
38948: LD_ADDR_OWVAR 52
38952: PUSH
38953: LD_VAR 0 1
38957: ST_TO_ADDR
// interface_hidden = mode ;
38958: LD_ADDR_OWVAR 54
38962: PUSH
38963: LD_VAR 0 1
38967: ST_TO_ADDR
// end ;
38968: LD_VAR 0 2
38972: RET
// export function Join ( array , element ) ; begin
38973: LD_INT 0
38975: PPUSH
// result := array ^ element ;
38976: LD_ADDR_VAR 0 3
38980: PUSH
38981: LD_VAR 0 1
38985: PUSH
38986: LD_VAR 0 2
38990: ADD
38991: ST_TO_ADDR
// end ;
38992: LD_VAR 0 3
38996: RET
// export function JoinUnion ( array , element ) ; begin
38997: LD_INT 0
38999: PPUSH
// result := array union element ;
39000: LD_ADDR_VAR 0 3
39004: PUSH
39005: LD_VAR 0 1
39009: PUSH
39010: LD_VAR 0 2
39014: UNION
39015: ST_TO_ADDR
// end ;
39016: LD_VAR 0 3
39020: RET
// export function GetBehemoths ( side ) ; begin
39021: LD_INT 0
39023: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39024: LD_ADDR_VAR 0 2
39028: PUSH
39029: LD_INT 22
39031: PUSH
39032: LD_VAR 0 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 31
39043: PUSH
39044: LD_INT 25
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PPUSH
39055: CALL_OW 69
39059: ST_TO_ADDR
// end ;
39060: LD_VAR 0 2
39064: RET
// export function Shuffle ( array ) ; var i , index ; begin
39065: LD_INT 0
39067: PPUSH
39068: PPUSH
39069: PPUSH
// result := [ ] ;
39070: LD_ADDR_VAR 0 2
39074: PUSH
39075: EMPTY
39076: ST_TO_ADDR
// if not array then
39077: LD_VAR 0 1
39081: NOT
39082: IFFALSE 39086
// exit ;
39084: GO 39185
// Randomize ;
39086: CALL_OW 10
// for i = array downto 1 do
39090: LD_ADDR_VAR 0 3
39094: PUSH
39095: DOUBLE
39096: LD_VAR 0 1
39100: INC
39101: ST_TO_ADDR
39102: LD_INT 1
39104: PUSH
39105: FOR_DOWNTO
39106: IFFALSE 39183
// begin index := rand ( 1 , array ) ;
39108: LD_ADDR_VAR 0 4
39112: PUSH
39113: LD_INT 1
39115: PPUSH
39116: LD_VAR 0 1
39120: PPUSH
39121: CALL_OW 12
39125: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39126: LD_ADDR_VAR 0 2
39130: PUSH
39131: LD_VAR 0 2
39135: PPUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_INT 1
39143: PLUS
39144: PPUSH
39145: LD_VAR 0 1
39149: PUSH
39150: LD_VAR 0 4
39154: ARRAY
39155: PPUSH
39156: CALL_OW 2
39160: ST_TO_ADDR
// array := Delete ( array , index ) ;
39161: LD_ADDR_VAR 0 1
39165: PUSH
39166: LD_VAR 0 1
39170: PPUSH
39171: LD_VAR 0 4
39175: PPUSH
39176: CALL_OW 3
39180: ST_TO_ADDR
// end ;
39181: GO 39105
39183: POP
39184: POP
// end ;
39185: LD_VAR 0 2
39189: RET
// export function GetBaseMaterials ( base ) ; begin
39190: LD_INT 0
39192: PPUSH
// result := [ 0 , 0 , 0 ] ;
39193: LD_ADDR_VAR 0 2
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: ST_TO_ADDR
// if not base then
39212: LD_VAR 0 1
39216: NOT
39217: IFFALSE 39221
// exit ;
39219: GO 39270
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39221: LD_ADDR_VAR 0 2
39225: PUSH
39226: LD_VAR 0 1
39230: PPUSH
39231: LD_INT 1
39233: PPUSH
39234: CALL_OW 275
39238: PUSH
39239: LD_VAR 0 1
39243: PPUSH
39244: LD_INT 2
39246: PPUSH
39247: CALL_OW 275
39251: PUSH
39252: LD_VAR 0 1
39256: PPUSH
39257: LD_INT 3
39259: PPUSH
39260: CALL_OW 275
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// end ;
39270: LD_VAR 0 2
39274: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39275: LD_INT 0
39277: PPUSH
39278: PPUSH
// result := array ;
39279: LD_ADDR_VAR 0 3
39283: PUSH
39284: LD_VAR 0 1
39288: ST_TO_ADDR
// if size > 0 then
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 0
39296: GREATER
39297: IFFALSE 39343
// for i := array downto size do
39299: LD_ADDR_VAR 0 4
39303: PUSH
39304: DOUBLE
39305: LD_VAR 0 1
39309: INC
39310: ST_TO_ADDR
39311: LD_VAR 0 2
39315: PUSH
39316: FOR_DOWNTO
39317: IFFALSE 39341
// result := Delete ( result , result ) ;
39319: LD_ADDR_VAR 0 3
39323: PUSH
39324: LD_VAR 0 3
39328: PPUSH
39329: LD_VAR 0 3
39333: PPUSH
39334: CALL_OW 3
39338: ST_TO_ADDR
39339: GO 39316
39341: POP
39342: POP
// end ; end_of_file
39343: LD_VAR 0 3
39347: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
39348: LD_INT 0
39350: PPUSH
39351: PPUSH
// skirmish := false ;
39352: LD_ADDR_EXP 9
39356: PUSH
39357: LD_INT 0
39359: ST_TO_ADDR
// debug_mc := false ;
39360: LD_ADDR_EXP 10
39364: PUSH
39365: LD_INT 0
39367: ST_TO_ADDR
// mc_bases := [ ] ;
39368: LD_ADDR_EXP 11
39372: PUSH
39373: EMPTY
39374: ST_TO_ADDR
// mc_sides := [ ] ;
39375: LD_ADDR_EXP 37
39379: PUSH
39380: EMPTY
39381: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
39382: LD_ADDR_EXP 12
39386: PUSH
39387: EMPTY
39388: ST_TO_ADDR
// mc_building_repairs := [ ] ;
39389: LD_ADDR_EXP 13
39393: PUSH
39394: EMPTY
39395: ST_TO_ADDR
// mc_need_heal := [ ] ;
39396: LD_ADDR_EXP 14
39400: PUSH
39401: EMPTY
39402: ST_TO_ADDR
// mc_healers := [ ] ;
39403: LD_ADDR_EXP 15
39407: PUSH
39408: EMPTY
39409: ST_TO_ADDR
// mc_build_list := [ ] ;
39410: LD_ADDR_EXP 16
39414: PUSH
39415: EMPTY
39416: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
39417: LD_ADDR_EXP 43
39421: PUSH
39422: EMPTY
39423: ST_TO_ADDR
// mc_builders := [ ] ;
39424: LD_ADDR_EXP 17
39428: PUSH
39429: EMPTY
39430: ST_TO_ADDR
// mc_construct_list := [ ] ;
39431: LD_ADDR_EXP 18
39435: PUSH
39436: EMPTY
39437: ST_TO_ADDR
// mc_turret_list := [ ] ;
39438: LD_ADDR_EXP 19
39442: PUSH
39443: EMPTY
39444: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
39445: LD_ADDR_EXP 20
39449: PUSH
39450: EMPTY
39451: ST_TO_ADDR
// mc_miners := [ ] ;
39452: LD_ADDR_EXP 25
39456: PUSH
39457: EMPTY
39458: ST_TO_ADDR
// mc_mines := [ ] ;
39459: LD_ADDR_EXP 24
39463: PUSH
39464: EMPTY
39465: ST_TO_ADDR
// mc_minefields := [ ] ;
39466: LD_ADDR_EXP 26
39470: PUSH
39471: EMPTY
39472: ST_TO_ADDR
// mc_crates := [ ] ;
39473: LD_ADDR_EXP 27
39477: PUSH
39478: EMPTY
39479: ST_TO_ADDR
// mc_crates_collector := [ ] ;
39480: LD_ADDR_EXP 28
39484: PUSH
39485: EMPTY
39486: ST_TO_ADDR
// mc_crates_area := [ ] ;
39487: LD_ADDR_EXP 29
39491: PUSH
39492: EMPTY
39493: ST_TO_ADDR
// mc_vehicles := [ ] ;
39494: LD_ADDR_EXP 30
39498: PUSH
39499: EMPTY
39500: ST_TO_ADDR
// mc_attack := [ ] ;
39501: LD_ADDR_EXP 31
39505: PUSH
39506: EMPTY
39507: ST_TO_ADDR
// mc_produce := [ ] ;
39508: LD_ADDR_EXP 32
39512: PUSH
39513: EMPTY
39514: ST_TO_ADDR
// mc_defender := [ ] ;
39515: LD_ADDR_EXP 33
39519: PUSH
39520: EMPTY
39521: ST_TO_ADDR
// mc_parking := [ ] ;
39522: LD_ADDR_EXP 35
39526: PUSH
39527: EMPTY
39528: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
39529: LD_ADDR_EXP 21
39533: PUSH
39534: EMPTY
39535: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
39536: LD_ADDR_EXP 23
39540: PUSH
39541: EMPTY
39542: ST_TO_ADDR
// mc_scan := [ ] ;
39543: LD_ADDR_EXP 34
39547: PUSH
39548: EMPTY
39549: ST_TO_ADDR
// mc_scan_area := [ ] ;
39550: LD_ADDR_EXP 36
39554: PUSH
39555: EMPTY
39556: ST_TO_ADDR
// mc_tech := [ ] ;
39557: LD_ADDR_EXP 38
39561: PUSH
39562: EMPTY
39563: ST_TO_ADDR
// mc_class := [ ] ;
39564: LD_ADDR_EXP 52
39568: PUSH
39569: EMPTY
39570: ST_TO_ADDR
// mc_class_case_use := [ ] ;
39571: LD_ADDR_EXP 53
39575: PUSH
39576: EMPTY
39577: ST_TO_ADDR
// end ;
39578: LD_VAR 0 1
39582: RET
// export function MC_Kill ( base ) ; begin
39583: LD_INT 0
39585: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
39586: LD_ADDR_EXP 11
39590: PUSH
39591: LD_EXP 11
39595: PPUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: EMPTY
39602: PPUSH
39603: CALL_OW 1
39607: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
39608: LD_ADDR_EXP 12
39612: PUSH
39613: LD_EXP 12
39617: PPUSH
39618: LD_VAR 0 1
39622: PPUSH
39623: EMPTY
39624: PPUSH
39625: CALL_OW 1
39629: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
39630: LD_ADDR_EXP 13
39634: PUSH
39635: LD_EXP 13
39639: PPUSH
39640: LD_VAR 0 1
39644: PPUSH
39645: EMPTY
39646: PPUSH
39647: CALL_OW 1
39651: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
39652: LD_ADDR_EXP 14
39656: PUSH
39657: LD_EXP 14
39661: PPUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: EMPTY
39668: PPUSH
39669: CALL_OW 1
39673: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
39674: LD_ADDR_EXP 15
39678: PUSH
39679: LD_EXP 15
39683: PPUSH
39684: LD_VAR 0 1
39688: PPUSH
39689: EMPTY
39690: PPUSH
39691: CALL_OW 1
39695: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
39696: LD_ADDR_EXP 16
39700: PUSH
39701: LD_EXP 16
39705: PPUSH
39706: LD_VAR 0 1
39710: PPUSH
39711: EMPTY
39712: PPUSH
39713: CALL_OW 1
39717: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
39718: LD_ADDR_EXP 17
39722: PUSH
39723: LD_EXP 17
39727: PPUSH
39728: LD_VAR 0 1
39732: PPUSH
39733: EMPTY
39734: PPUSH
39735: CALL_OW 1
39739: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
39740: LD_ADDR_EXP 18
39744: PUSH
39745: LD_EXP 18
39749: PPUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: EMPTY
39756: PPUSH
39757: CALL_OW 1
39761: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
39762: LD_ADDR_EXP 19
39766: PUSH
39767: LD_EXP 19
39771: PPUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: EMPTY
39778: PPUSH
39779: CALL_OW 1
39783: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
39784: LD_ADDR_EXP 20
39788: PUSH
39789: LD_EXP 20
39793: PPUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: EMPTY
39800: PPUSH
39801: CALL_OW 1
39805: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
39806: LD_ADDR_EXP 21
39810: PUSH
39811: LD_EXP 21
39815: PPUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: EMPTY
39822: PPUSH
39823: CALL_OW 1
39827: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
39828: LD_ADDR_EXP 22
39832: PUSH
39833: LD_EXP 22
39837: PPUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: LD_INT 0
39845: PPUSH
39846: CALL_OW 1
39850: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
39851: LD_ADDR_EXP 23
39855: PUSH
39856: LD_EXP 23
39860: PPUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: EMPTY
39867: PPUSH
39868: CALL_OW 1
39872: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
39873: LD_ADDR_EXP 24
39877: PUSH
39878: LD_EXP 24
39882: PPUSH
39883: LD_VAR 0 1
39887: PPUSH
39888: EMPTY
39889: PPUSH
39890: CALL_OW 1
39894: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
39895: LD_ADDR_EXP 25
39899: PUSH
39900: LD_EXP 25
39904: PPUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: EMPTY
39911: PPUSH
39912: CALL_OW 1
39916: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
39917: LD_ADDR_EXP 26
39921: PUSH
39922: LD_EXP 26
39926: PPUSH
39927: LD_VAR 0 1
39931: PPUSH
39932: EMPTY
39933: PPUSH
39934: CALL_OW 1
39938: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
39939: LD_ADDR_EXP 27
39943: PUSH
39944: LD_EXP 27
39948: PPUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: EMPTY
39955: PPUSH
39956: CALL_OW 1
39960: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
39961: LD_ADDR_EXP 28
39965: PUSH
39966: LD_EXP 28
39970: PPUSH
39971: LD_VAR 0 1
39975: PPUSH
39976: EMPTY
39977: PPUSH
39978: CALL_OW 1
39982: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
39983: LD_ADDR_EXP 29
39987: PUSH
39988: LD_EXP 29
39992: PPUSH
39993: LD_VAR 0 1
39997: PPUSH
39998: EMPTY
39999: PPUSH
40000: CALL_OW 1
40004: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
40005: LD_ADDR_EXP 30
40009: PUSH
40010: LD_EXP 30
40014: PPUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: EMPTY
40021: PPUSH
40022: CALL_OW 1
40026: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
40027: LD_ADDR_EXP 31
40031: PUSH
40032: LD_EXP 31
40036: PPUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: EMPTY
40043: PPUSH
40044: CALL_OW 1
40048: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
40049: LD_ADDR_EXP 32
40053: PUSH
40054: LD_EXP 32
40058: PPUSH
40059: LD_VAR 0 1
40063: PPUSH
40064: EMPTY
40065: PPUSH
40066: CALL_OW 1
40070: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
40071: LD_ADDR_EXP 33
40075: PUSH
40076: LD_EXP 33
40080: PPUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: EMPTY
40087: PPUSH
40088: CALL_OW 1
40092: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
40093: LD_ADDR_EXP 34
40097: PUSH
40098: LD_EXP 34
40102: PPUSH
40103: LD_VAR 0 1
40107: PPUSH
40108: EMPTY
40109: PPUSH
40110: CALL_OW 1
40114: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
40115: LD_ADDR_EXP 35
40119: PUSH
40120: LD_EXP 35
40124: PPUSH
40125: LD_VAR 0 1
40129: PPUSH
40130: EMPTY
40131: PPUSH
40132: CALL_OW 1
40136: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
40137: LD_ADDR_EXP 36
40141: PUSH
40142: LD_EXP 36
40146: PPUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: EMPTY
40153: PPUSH
40154: CALL_OW 1
40158: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
40159: LD_ADDR_EXP 38
40163: PUSH
40164: LD_EXP 38
40168: PPUSH
40169: LD_VAR 0 1
40173: PPUSH
40174: EMPTY
40175: PPUSH
40176: CALL_OW 1
40180: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
40181: LD_ADDR_EXP 40
40185: PUSH
40186: LD_EXP 40
40190: PPUSH
40191: LD_VAR 0 1
40195: PPUSH
40196: EMPTY
40197: PPUSH
40198: CALL_OW 1
40202: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
40203: LD_ADDR_EXP 41
40207: PUSH
40208: LD_EXP 41
40212: PPUSH
40213: LD_VAR 0 1
40217: PPUSH
40218: EMPTY
40219: PPUSH
40220: CALL_OW 1
40224: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
40225: LD_ADDR_EXP 42
40229: PUSH
40230: LD_EXP 42
40234: PPUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: EMPTY
40241: PPUSH
40242: CALL_OW 1
40246: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
40247: LD_ADDR_EXP 43
40251: PUSH
40252: LD_EXP 43
40256: PPUSH
40257: LD_VAR 0 1
40261: PPUSH
40262: EMPTY
40263: PPUSH
40264: CALL_OW 1
40268: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
40269: LD_ADDR_EXP 44
40273: PUSH
40274: LD_EXP 44
40278: PPUSH
40279: LD_VAR 0 1
40283: PPUSH
40284: EMPTY
40285: PPUSH
40286: CALL_OW 1
40290: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
40291: LD_ADDR_EXP 45
40295: PUSH
40296: LD_EXP 45
40300: PPUSH
40301: LD_VAR 0 1
40305: PPUSH
40306: EMPTY
40307: PPUSH
40308: CALL_OW 1
40312: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
40313: LD_ADDR_EXP 46
40317: PUSH
40318: LD_EXP 46
40322: PPUSH
40323: LD_VAR 0 1
40327: PPUSH
40328: EMPTY
40329: PPUSH
40330: CALL_OW 1
40334: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
40335: LD_ADDR_EXP 47
40339: PUSH
40340: LD_EXP 47
40344: PPUSH
40345: LD_VAR 0 1
40349: PPUSH
40350: EMPTY
40351: PPUSH
40352: CALL_OW 1
40356: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
40357: LD_ADDR_EXP 48
40361: PUSH
40362: LD_EXP 48
40366: PPUSH
40367: LD_VAR 0 1
40371: PPUSH
40372: EMPTY
40373: PPUSH
40374: CALL_OW 1
40378: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
40379: LD_ADDR_EXP 49
40383: PUSH
40384: LD_EXP 49
40388: PPUSH
40389: LD_VAR 0 1
40393: PPUSH
40394: EMPTY
40395: PPUSH
40396: CALL_OW 1
40400: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
40401: LD_ADDR_EXP 50
40405: PUSH
40406: LD_EXP 50
40410: PPUSH
40411: LD_VAR 0 1
40415: PPUSH
40416: EMPTY
40417: PPUSH
40418: CALL_OW 1
40422: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
40423: LD_ADDR_EXP 51
40427: PUSH
40428: LD_EXP 51
40432: PPUSH
40433: LD_VAR 0 1
40437: PPUSH
40438: EMPTY
40439: PPUSH
40440: CALL_OW 1
40444: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
40445: LD_ADDR_EXP 52
40449: PUSH
40450: LD_EXP 52
40454: PPUSH
40455: LD_VAR 0 1
40459: PPUSH
40460: EMPTY
40461: PPUSH
40462: CALL_OW 1
40466: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
40467: LD_ADDR_EXP 53
40471: PUSH
40472: LD_EXP 53
40476: PPUSH
40477: LD_VAR 0 1
40481: PPUSH
40482: LD_INT 0
40484: PPUSH
40485: CALL_OW 1
40489: ST_TO_ADDR
// end ;
40490: LD_VAR 0 2
40494: RET
// export function MC_Add ( side , units ) ; var base ; begin
40495: LD_INT 0
40497: PPUSH
40498: PPUSH
// base := mc_bases + 1 ;
40499: LD_ADDR_VAR 0 4
40503: PUSH
40504: LD_EXP 11
40508: PUSH
40509: LD_INT 1
40511: PLUS
40512: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
40513: LD_ADDR_EXP 37
40517: PUSH
40518: LD_EXP 37
40522: PPUSH
40523: LD_VAR 0 4
40527: PPUSH
40528: LD_VAR 0 1
40532: PPUSH
40533: CALL_OW 1
40537: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
40538: LD_ADDR_EXP 11
40542: PUSH
40543: LD_EXP 11
40547: PPUSH
40548: LD_VAR 0 4
40552: PPUSH
40553: LD_VAR 0 2
40557: PPUSH
40558: CALL_OW 1
40562: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
40563: LD_ADDR_EXP 12
40567: PUSH
40568: LD_EXP 12
40572: PPUSH
40573: LD_VAR 0 4
40577: PPUSH
40578: EMPTY
40579: PPUSH
40580: CALL_OW 1
40584: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
40585: LD_ADDR_EXP 13
40589: PUSH
40590: LD_EXP 13
40594: PPUSH
40595: LD_VAR 0 4
40599: PPUSH
40600: EMPTY
40601: PPUSH
40602: CALL_OW 1
40606: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
40607: LD_ADDR_EXP 14
40611: PUSH
40612: LD_EXP 14
40616: PPUSH
40617: LD_VAR 0 4
40621: PPUSH
40622: EMPTY
40623: PPUSH
40624: CALL_OW 1
40628: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
40629: LD_ADDR_EXP 15
40633: PUSH
40634: LD_EXP 15
40638: PPUSH
40639: LD_VAR 0 4
40643: PPUSH
40644: EMPTY
40645: PPUSH
40646: CALL_OW 1
40650: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
40651: LD_ADDR_EXP 16
40655: PUSH
40656: LD_EXP 16
40660: PPUSH
40661: LD_VAR 0 4
40665: PPUSH
40666: EMPTY
40667: PPUSH
40668: CALL_OW 1
40672: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
40673: LD_ADDR_EXP 17
40677: PUSH
40678: LD_EXP 17
40682: PPUSH
40683: LD_VAR 0 4
40687: PPUSH
40688: EMPTY
40689: PPUSH
40690: CALL_OW 1
40694: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
40695: LD_ADDR_EXP 18
40699: PUSH
40700: LD_EXP 18
40704: PPUSH
40705: LD_VAR 0 4
40709: PPUSH
40710: EMPTY
40711: PPUSH
40712: CALL_OW 1
40716: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
40717: LD_ADDR_EXP 19
40721: PUSH
40722: LD_EXP 19
40726: PPUSH
40727: LD_VAR 0 4
40731: PPUSH
40732: EMPTY
40733: PPUSH
40734: CALL_OW 1
40738: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
40739: LD_ADDR_EXP 20
40743: PUSH
40744: LD_EXP 20
40748: PPUSH
40749: LD_VAR 0 4
40753: PPUSH
40754: EMPTY
40755: PPUSH
40756: CALL_OW 1
40760: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
40761: LD_ADDR_EXP 21
40765: PUSH
40766: LD_EXP 21
40770: PPUSH
40771: LD_VAR 0 4
40775: PPUSH
40776: EMPTY
40777: PPUSH
40778: CALL_OW 1
40782: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
40783: LD_ADDR_EXP 22
40787: PUSH
40788: LD_EXP 22
40792: PPUSH
40793: LD_VAR 0 4
40797: PPUSH
40798: LD_INT 0
40800: PPUSH
40801: CALL_OW 1
40805: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
40806: LD_ADDR_EXP 23
40810: PUSH
40811: LD_EXP 23
40815: PPUSH
40816: LD_VAR 0 4
40820: PPUSH
40821: EMPTY
40822: PPUSH
40823: CALL_OW 1
40827: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
40828: LD_ADDR_EXP 24
40832: PUSH
40833: LD_EXP 24
40837: PPUSH
40838: LD_VAR 0 4
40842: PPUSH
40843: EMPTY
40844: PPUSH
40845: CALL_OW 1
40849: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
40850: LD_ADDR_EXP 25
40854: PUSH
40855: LD_EXP 25
40859: PPUSH
40860: LD_VAR 0 4
40864: PPUSH
40865: EMPTY
40866: PPUSH
40867: CALL_OW 1
40871: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
40872: LD_ADDR_EXP 26
40876: PUSH
40877: LD_EXP 26
40881: PPUSH
40882: LD_VAR 0 4
40886: PPUSH
40887: EMPTY
40888: PPUSH
40889: CALL_OW 1
40893: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
40894: LD_ADDR_EXP 27
40898: PUSH
40899: LD_EXP 27
40903: PPUSH
40904: LD_VAR 0 4
40908: PPUSH
40909: EMPTY
40910: PPUSH
40911: CALL_OW 1
40915: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
40916: LD_ADDR_EXP 28
40920: PUSH
40921: LD_EXP 28
40925: PPUSH
40926: LD_VAR 0 4
40930: PPUSH
40931: EMPTY
40932: PPUSH
40933: CALL_OW 1
40937: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
40938: LD_ADDR_EXP 29
40942: PUSH
40943: LD_EXP 29
40947: PPUSH
40948: LD_VAR 0 4
40952: PPUSH
40953: EMPTY
40954: PPUSH
40955: CALL_OW 1
40959: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
40960: LD_ADDR_EXP 30
40964: PUSH
40965: LD_EXP 30
40969: PPUSH
40970: LD_VAR 0 4
40974: PPUSH
40975: EMPTY
40976: PPUSH
40977: CALL_OW 1
40981: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
40982: LD_ADDR_EXP 31
40986: PUSH
40987: LD_EXP 31
40991: PPUSH
40992: LD_VAR 0 4
40996: PPUSH
40997: EMPTY
40998: PPUSH
40999: CALL_OW 1
41003: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
41004: LD_ADDR_EXP 32
41008: PUSH
41009: LD_EXP 32
41013: PPUSH
41014: LD_VAR 0 4
41018: PPUSH
41019: EMPTY
41020: PPUSH
41021: CALL_OW 1
41025: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
41026: LD_ADDR_EXP 33
41030: PUSH
41031: LD_EXP 33
41035: PPUSH
41036: LD_VAR 0 4
41040: PPUSH
41041: EMPTY
41042: PPUSH
41043: CALL_OW 1
41047: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
41048: LD_ADDR_EXP 34
41052: PUSH
41053: LD_EXP 34
41057: PPUSH
41058: LD_VAR 0 4
41062: PPUSH
41063: EMPTY
41064: PPUSH
41065: CALL_OW 1
41069: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
41070: LD_ADDR_EXP 35
41074: PUSH
41075: LD_EXP 35
41079: PPUSH
41080: LD_VAR 0 4
41084: PPUSH
41085: EMPTY
41086: PPUSH
41087: CALL_OW 1
41091: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
41092: LD_ADDR_EXP 36
41096: PUSH
41097: LD_EXP 36
41101: PPUSH
41102: LD_VAR 0 4
41106: PPUSH
41107: EMPTY
41108: PPUSH
41109: CALL_OW 1
41113: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
41114: LD_ADDR_EXP 38
41118: PUSH
41119: LD_EXP 38
41123: PPUSH
41124: LD_VAR 0 4
41128: PPUSH
41129: EMPTY
41130: PPUSH
41131: CALL_OW 1
41135: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
41136: LD_ADDR_EXP 40
41140: PUSH
41141: LD_EXP 40
41145: PPUSH
41146: LD_VAR 0 4
41150: PPUSH
41151: EMPTY
41152: PPUSH
41153: CALL_OW 1
41157: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
41158: LD_ADDR_EXP 41
41162: PUSH
41163: LD_EXP 41
41167: PPUSH
41168: LD_VAR 0 4
41172: PPUSH
41173: EMPTY
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
41180: LD_ADDR_EXP 42
41184: PUSH
41185: LD_EXP 42
41189: PPUSH
41190: LD_VAR 0 4
41194: PPUSH
41195: EMPTY
41196: PPUSH
41197: CALL_OW 1
41201: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
41202: LD_ADDR_EXP 43
41206: PUSH
41207: LD_EXP 43
41211: PPUSH
41212: LD_VAR 0 4
41216: PPUSH
41217: EMPTY
41218: PPUSH
41219: CALL_OW 1
41223: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
41224: LD_ADDR_EXP 44
41228: PUSH
41229: LD_EXP 44
41233: PPUSH
41234: LD_VAR 0 4
41238: PPUSH
41239: EMPTY
41240: PPUSH
41241: CALL_OW 1
41245: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
41246: LD_ADDR_EXP 45
41250: PUSH
41251: LD_EXP 45
41255: PPUSH
41256: LD_VAR 0 4
41260: PPUSH
41261: EMPTY
41262: PPUSH
41263: CALL_OW 1
41267: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
41268: LD_ADDR_EXP 46
41272: PUSH
41273: LD_EXP 46
41277: PPUSH
41278: LD_VAR 0 4
41282: PPUSH
41283: EMPTY
41284: PPUSH
41285: CALL_OW 1
41289: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
41290: LD_ADDR_EXP 47
41294: PUSH
41295: LD_EXP 47
41299: PPUSH
41300: LD_VAR 0 4
41304: PPUSH
41305: EMPTY
41306: PPUSH
41307: CALL_OW 1
41311: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
41312: LD_ADDR_EXP 48
41316: PUSH
41317: LD_EXP 48
41321: PPUSH
41322: LD_VAR 0 4
41326: PPUSH
41327: EMPTY
41328: PPUSH
41329: CALL_OW 1
41333: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
41334: LD_ADDR_EXP 49
41338: PUSH
41339: LD_EXP 49
41343: PPUSH
41344: LD_VAR 0 4
41348: PPUSH
41349: EMPTY
41350: PPUSH
41351: CALL_OW 1
41355: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
41356: LD_ADDR_EXP 50
41360: PUSH
41361: LD_EXP 50
41365: PPUSH
41366: LD_VAR 0 4
41370: PPUSH
41371: EMPTY
41372: PPUSH
41373: CALL_OW 1
41377: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
41378: LD_ADDR_EXP 51
41382: PUSH
41383: LD_EXP 51
41387: PPUSH
41388: LD_VAR 0 4
41392: PPUSH
41393: EMPTY
41394: PPUSH
41395: CALL_OW 1
41399: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
41400: LD_ADDR_EXP 52
41404: PUSH
41405: LD_EXP 52
41409: PPUSH
41410: LD_VAR 0 4
41414: PPUSH
41415: EMPTY
41416: PPUSH
41417: CALL_OW 1
41421: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
41422: LD_ADDR_EXP 53
41426: PUSH
41427: LD_EXP 53
41431: PPUSH
41432: LD_VAR 0 4
41436: PPUSH
41437: LD_INT 0
41439: PPUSH
41440: CALL_OW 1
41444: ST_TO_ADDR
// result := base ;
41445: LD_ADDR_VAR 0 3
41449: PUSH
41450: LD_VAR 0 4
41454: ST_TO_ADDR
// end ;
41455: LD_VAR 0 3
41459: RET
// export function MC_Start ( ) ; var i ; begin
41460: LD_INT 0
41462: PPUSH
41463: PPUSH
// for i = 1 to mc_bases do
41464: LD_ADDR_VAR 0 2
41468: PUSH
41469: DOUBLE
41470: LD_INT 1
41472: DEC
41473: ST_TO_ADDR
41474: LD_EXP 11
41478: PUSH
41479: FOR_TO
41480: IFFALSE 42557
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
41482: LD_ADDR_EXP 11
41486: PUSH
41487: LD_EXP 11
41491: PPUSH
41492: LD_VAR 0 2
41496: PPUSH
41497: LD_EXP 11
41501: PUSH
41502: LD_VAR 0 2
41506: ARRAY
41507: PUSH
41508: LD_INT 0
41510: DIFF
41511: PPUSH
41512: CALL_OW 1
41516: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
41517: LD_ADDR_EXP 12
41521: PUSH
41522: LD_EXP 12
41526: PPUSH
41527: LD_VAR 0 2
41531: PPUSH
41532: EMPTY
41533: PPUSH
41534: CALL_OW 1
41538: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
41539: LD_ADDR_EXP 13
41543: PUSH
41544: LD_EXP 13
41548: PPUSH
41549: LD_VAR 0 2
41553: PPUSH
41554: EMPTY
41555: PPUSH
41556: CALL_OW 1
41560: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
41561: LD_ADDR_EXP 14
41565: PUSH
41566: LD_EXP 14
41570: PPUSH
41571: LD_VAR 0 2
41575: PPUSH
41576: EMPTY
41577: PPUSH
41578: CALL_OW 1
41582: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
41583: LD_ADDR_EXP 15
41587: PUSH
41588: LD_EXP 15
41592: PPUSH
41593: LD_VAR 0 2
41597: PPUSH
41598: EMPTY
41599: PUSH
41600: EMPTY
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PPUSH
41606: CALL_OW 1
41610: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
41611: LD_ADDR_EXP 16
41615: PUSH
41616: LD_EXP 16
41620: PPUSH
41621: LD_VAR 0 2
41625: PPUSH
41626: EMPTY
41627: PPUSH
41628: CALL_OW 1
41632: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
41633: LD_ADDR_EXP 43
41637: PUSH
41638: LD_EXP 43
41642: PPUSH
41643: LD_VAR 0 2
41647: PPUSH
41648: EMPTY
41649: PPUSH
41650: CALL_OW 1
41654: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
41655: LD_ADDR_EXP 17
41659: PUSH
41660: LD_EXP 17
41664: PPUSH
41665: LD_VAR 0 2
41669: PPUSH
41670: EMPTY
41671: PPUSH
41672: CALL_OW 1
41676: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
41677: LD_ADDR_EXP 18
41681: PUSH
41682: LD_EXP 18
41686: PPUSH
41687: LD_VAR 0 2
41691: PPUSH
41692: EMPTY
41693: PPUSH
41694: CALL_OW 1
41698: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
41699: LD_ADDR_EXP 19
41703: PUSH
41704: LD_EXP 19
41708: PPUSH
41709: LD_VAR 0 2
41713: PPUSH
41714: LD_EXP 11
41718: PUSH
41719: LD_VAR 0 2
41723: ARRAY
41724: PPUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 30
41730: PUSH
41731: LD_INT 32
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 30
41740: PUSH
41741: LD_INT 33
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: PPUSH
41753: CALL_OW 72
41757: PPUSH
41758: CALL_OW 1
41762: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
41763: LD_ADDR_EXP 20
41767: PUSH
41768: LD_EXP 20
41772: PPUSH
41773: LD_VAR 0 2
41777: PPUSH
41778: LD_EXP 11
41782: PUSH
41783: LD_VAR 0 2
41787: ARRAY
41788: PPUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 30
41794: PUSH
41795: LD_INT 32
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 30
41804: PUSH
41805: LD_INT 31
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 58
41819: PUSH
41820: EMPTY
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PPUSH
41827: CALL_OW 72
41831: PPUSH
41832: CALL_OW 1
41836: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
41837: LD_ADDR_EXP 21
41841: PUSH
41842: LD_EXP 21
41846: PPUSH
41847: LD_VAR 0 2
41851: PPUSH
41852: EMPTY
41853: PPUSH
41854: CALL_OW 1
41858: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
41859: LD_ADDR_EXP 25
41863: PUSH
41864: LD_EXP 25
41868: PPUSH
41869: LD_VAR 0 2
41873: PPUSH
41874: EMPTY
41875: PPUSH
41876: CALL_OW 1
41880: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
41881: LD_ADDR_EXP 24
41885: PUSH
41886: LD_EXP 24
41890: PPUSH
41891: LD_VAR 0 2
41895: PPUSH
41896: EMPTY
41897: PPUSH
41898: CALL_OW 1
41902: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
41903: LD_ADDR_EXP 26
41907: PUSH
41908: LD_EXP 26
41912: PPUSH
41913: LD_VAR 0 2
41917: PPUSH
41918: EMPTY
41919: PPUSH
41920: CALL_OW 1
41924: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
41925: LD_ADDR_EXP 27
41929: PUSH
41930: LD_EXP 27
41934: PPUSH
41935: LD_VAR 0 2
41939: PPUSH
41940: EMPTY
41941: PPUSH
41942: CALL_OW 1
41946: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
41947: LD_ADDR_EXP 28
41951: PUSH
41952: LD_EXP 28
41956: PPUSH
41957: LD_VAR 0 2
41961: PPUSH
41962: EMPTY
41963: PPUSH
41964: CALL_OW 1
41968: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
41969: LD_ADDR_EXP 29
41973: PUSH
41974: LD_EXP 29
41978: PPUSH
41979: LD_VAR 0 2
41983: PPUSH
41984: EMPTY
41985: PPUSH
41986: CALL_OW 1
41990: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
41991: LD_ADDR_EXP 30
41995: PUSH
41996: LD_EXP 30
42000: PPUSH
42001: LD_VAR 0 2
42005: PPUSH
42006: EMPTY
42007: PPUSH
42008: CALL_OW 1
42012: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
42013: LD_ADDR_EXP 31
42017: PUSH
42018: LD_EXP 31
42022: PPUSH
42023: LD_VAR 0 2
42027: PPUSH
42028: EMPTY
42029: PPUSH
42030: CALL_OW 1
42034: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
42035: LD_ADDR_EXP 32
42039: PUSH
42040: LD_EXP 32
42044: PPUSH
42045: LD_VAR 0 2
42049: PPUSH
42050: EMPTY
42051: PPUSH
42052: CALL_OW 1
42056: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
42057: LD_ADDR_EXP 33
42061: PUSH
42062: LD_EXP 33
42066: PPUSH
42067: LD_VAR 0 2
42071: PPUSH
42072: EMPTY
42073: PPUSH
42074: CALL_OW 1
42078: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
42079: LD_ADDR_EXP 22
42083: PUSH
42084: LD_EXP 22
42088: PPUSH
42089: LD_VAR 0 2
42093: PPUSH
42094: LD_INT 0
42096: PPUSH
42097: CALL_OW 1
42101: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
42102: LD_ADDR_EXP 35
42106: PUSH
42107: LD_EXP 35
42111: PPUSH
42112: LD_VAR 0 2
42116: PPUSH
42117: LD_INT 0
42119: PPUSH
42120: CALL_OW 1
42124: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
42125: LD_ADDR_EXP 23
42129: PUSH
42130: LD_EXP 23
42134: PPUSH
42135: LD_VAR 0 2
42139: PPUSH
42140: EMPTY
42141: PPUSH
42142: CALL_OW 1
42146: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
42147: LD_ADDR_EXP 34
42151: PUSH
42152: LD_EXP 34
42156: PPUSH
42157: LD_VAR 0 2
42161: PPUSH
42162: LD_INT 0
42164: PPUSH
42165: CALL_OW 1
42169: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
42170: LD_ADDR_EXP 36
42174: PUSH
42175: LD_EXP 36
42179: PPUSH
42180: LD_VAR 0 2
42184: PPUSH
42185: EMPTY
42186: PPUSH
42187: CALL_OW 1
42191: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
42192: LD_ADDR_EXP 39
42196: PUSH
42197: LD_EXP 39
42201: PPUSH
42202: LD_VAR 0 2
42206: PPUSH
42207: LD_INT 0
42209: PPUSH
42210: CALL_OW 1
42214: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
42215: LD_ADDR_EXP 40
42219: PUSH
42220: LD_EXP 40
42224: PPUSH
42225: LD_VAR 0 2
42229: PPUSH
42230: EMPTY
42231: PPUSH
42232: CALL_OW 1
42236: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
42237: LD_ADDR_EXP 41
42241: PUSH
42242: LD_EXP 41
42246: PPUSH
42247: LD_VAR 0 2
42251: PPUSH
42252: EMPTY
42253: PPUSH
42254: CALL_OW 1
42258: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
42259: LD_ADDR_EXP 42
42263: PUSH
42264: LD_EXP 42
42268: PPUSH
42269: LD_VAR 0 2
42273: PPUSH
42274: EMPTY
42275: PPUSH
42276: CALL_OW 1
42280: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
42281: LD_ADDR_EXP 44
42285: PUSH
42286: LD_EXP 44
42290: PPUSH
42291: LD_VAR 0 2
42295: PPUSH
42296: LD_EXP 11
42300: PUSH
42301: LD_VAR 0 2
42305: ARRAY
42306: PPUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 30
42312: PUSH
42313: LD_INT 6
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 30
42322: PUSH
42323: LD_INT 7
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 30
42332: PUSH
42333: LD_INT 8
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: PPUSH
42346: CALL_OW 72
42350: PPUSH
42351: CALL_OW 1
42355: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
42356: LD_ADDR_EXP 45
42360: PUSH
42361: LD_EXP 45
42365: PPUSH
42366: LD_VAR 0 2
42370: PPUSH
42371: EMPTY
42372: PPUSH
42373: CALL_OW 1
42377: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
42378: LD_ADDR_EXP 46
42382: PUSH
42383: LD_EXP 46
42387: PPUSH
42388: LD_VAR 0 2
42392: PPUSH
42393: EMPTY
42394: PPUSH
42395: CALL_OW 1
42399: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
42400: LD_ADDR_EXP 47
42404: PUSH
42405: LD_EXP 47
42409: PPUSH
42410: LD_VAR 0 2
42414: PPUSH
42415: EMPTY
42416: PPUSH
42417: CALL_OW 1
42421: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
42422: LD_ADDR_EXP 48
42426: PUSH
42427: LD_EXP 48
42431: PPUSH
42432: LD_VAR 0 2
42436: PPUSH
42437: EMPTY
42438: PPUSH
42439: CALL_OW 1
42443: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
42444: LD_ADDR_EXP 49
42448: PUSH
42449: LD_EXP 49
42453: PPUSH
42454: LD_VAR 0 2
42458: PPUSH
42459: EMPTY
42460: PPUSH
42461: CALL_OW 1
42465: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
42466: LD_ADDR_EXP 50
42470: PUSH
42471: LD_EXP 50
42475: PPUSH
42476: LD_VAR 0 2
42480: PPUSH
42481: EMPTY
42482: PPUSH
42483: CALL_OW 1
42487: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
42488: LD_ADDR_EXP 51
42492: PUSH
42493: LD_EXP 51
42497: PPUSH
42498: LD_VAR 0 2
42502: PPUSH
42503: EMPTY
42504: PPUSH
42505: CALL_OW 1
42509: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
42510: LD_ADDR_EXP 52
42514: PUSH
42515: LD_EXP 52
42519: PPUSH
42520: LD_VAR 0 2
42524: PPUSH
42525: EMPTY
42526: PPUSH
42527: CALL_OW 1
42531: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
42532: LD_ADDR_EXP 53
42536: PUSH
42537: LD_EXP 53
42541: PPUSH
42542: LD_VAR 0 2
42546: PPUSH
42547: LD_INT 0
42549: PPUSH
42550: CALL_OW 1
42554: ST_TO_ADDR
// end ;
42555: GO 41479
42557: POP
42558: POP
// MC_InitSides ( ) ;
42559: CALL 42845 0 0
// MC_InitResearch ( ) ;
42563: CALL 42584 0 0
// CustomInitMacro ( ) ;
42567: CALL 163 0 0
// skirmish := true ;
42571: LD_ADDR_EXP 9
42575: PUSH
42576: LD_INT 1
42578: ST_TO_ADDR
// end ;
42579: LD_VAR 0 1
42583: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
42584: LD_INT 0
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
// if not mc_bases then
42592: LD_EXP 11
42596: NOT
42597: IFFALSE 42601
// exit ;
42599: GO 42840
// for i = 1 to 8 do
42601: LD_ADDR_VAR 0 2
42605: PUSH
42606: DOUBLE
42607: LD_INT 1
42609: DEC
42610: ST_TO_ADDR
42611: LD_INT 8
42613: PUSH
42614: FOR_TO
42615: IFFALSE 42641
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
42617: LD_ADDR_EXP 38
42621: PUSH
42622: LD_EXP 38
42626: PPUSH
42627: LD_VAR 0 2
42631: PPUSH
42632: EMPTY
42633: PPUSH
42634: CALL_OW 1
42638: ST_TO_ADDR
42639: GO 42614
42641: POP
42642: POP
// tmp := [ ] ;
42643: LD_ADDR_VAR 0 5
42647: PUSH
42648: EMPTY
42649: ST_TO_ADDR
// for i = 1 to mc_sides do
42650: LD_ADDR_VAR 0 2
42654: PUSH
42655: DOUBLE
42656: LD_INT 1
42658: DEC
42659: ST_TO_ADDR
42660: LD_EXP 37
42664: PUSH
42665: FOR_TO
42666: IFFALSE 42724
// if not mc_sides [ i ] in tmp then
42668: LD_EXP 37
42672: PUSH
42673: LD_VAR 0 2
42677: ARRAY
42678: PUSH
42679: LD_VAR 0 5
42683: IN
42684: NOT
42685: IFFALSE 42722
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
42687: LD_ADDR_VAR 0 5
42691: PUSH
42692: LD_VAR 0 5
42696: PPUSH
42697: LD_VAR 0 5
42701: PUSH
42702: LD_INT 1
42704: PLUS
42705: PPUSH
42706: LD_EXP 37
42710: PUSH
42711: LD_VAR 0 2
42715: ARRAY
42716: PPUSH
42717: CALL_OW 2
42721: ST_TO_ADDR
42722: GO 42665
42724: POP
42725: POP
// if not tmp then
42726: LD_VAR 0 5
42730: NOT
42731: IFFALSE 42735
// exit ;
42733: GO 42840
// for j in tmp do
42735: LD_ADDR_VAR 0 3
42739: PUSH
42740: LD_VAR 0 5
42744: PUSH
42745: FOR_IN
42746: IFFALSE 42838
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
42748: LD_ADDR_VAR 0 6
42752: PUSH
42753: LD_INT 22
42755: PUSH
42756: LD_VAR 0 3
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PPUSH
42765: CALL_OW 69
42769: ST_TO_ADDR
// if not un then
42770: LD_VAR 0 6
42774: NOT
42775: IFFALSE 42779
// continue ;
42777: GO 42745
// nation := GetNation ( un [ 1 ] ) ;
42779: LD_ADDR_VAR 0 4
42783: PUSH
42784: LD_VAR 0 6
42788: PUSH
42789: LD_INT 1
42791: ARRAY
42792: PPUSH
42793: CALL_OW 248
42797: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
42798: LD_ADDR_EXP 38
42802: PUSH
42803: LD_EXP 38
42807: PPUSH
42808: LD_VAR 0 3
42812: PPUSH
42813: LD_VAR 0 3
42817: PPUSH
42818: LD_VAR 0 4
42822: PPUSH
42823: LD_INT 1
42825: PPUSH
42826: CALL 3166 0 3
42830: PPUSH
42831: CALL_OW 1
42835: ST_TO_ADDR
// end ;
42836: GO 42745
42838: POP
42839: POP
// end ;
42840: LD_VAR 0 1
42844: RET
// export function MC_InitSides ( ) ; var i ; begin
42845: LD_INT 0
42847: PPUSH
42848: PPUSH
// if not mc_bases then
42849: LD_EXP 11
42853: NOT
42854: IFFALSE 42858
// exit ;
42856: GO 42932
// for i = 1 to mc_bases do
42858: LD_ADDR_VAR 0 2
42862: PUSH
42863: DOUBLE
42864: LD_INT 1
42866: DEC
42867: ST_TO_ADDR
42868: LD_EXP 11
42872: PUSH
42873: FOR_TO
42874: IFFALSE 42930
// if mc_bases [ i ] then
42876: LD_EXP 11
42880: PUSH
42881: LD_VAR 0 2
42885: ARRAY
42886: IFFALSE 42928
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
42888: LD_ADDR_EXP 37
42892: PUSH
42893: LD_EXP 37
42897: PPUSH
42898: LD_VAR 0 2
42902: PPUSH
42903: LD_EXP 11
42907: PUSH
42908: LD_VAR 0 2
42912: ARRAY
42913: PUSH
42914: LD_INT 1
42916: ARRAY
42917: PPUSH
42918: CALL_OW 255
42922: PPUSH
42923: CALL_OW 1
42927: ST_TO_ADDR
42928: GO 42873
42930: POP
42931: POP
// end ;
42932: LD_VAR 0 1
42936: RET
// every 0 0$01 trigger skirmish do
42937: LD_EXP 9
42941: IFFALSE 43095
42943: GO 42945
42945: DISABLE
// begin enable ;
42946: ENABLE
// MC_CheckBuildings ( ) ;
42947: CALL 47593 0 0
// MC_CheckPeopleLife ( ) ;
42951: CALL 47718 0 0
// RaiseSailEvent ( 100 ) ;
42955: LD_INT 100
42957: PPUSH
42958: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
42962: LD_INT 103
42964: PPUSH
42965: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
42969: LD_INT 104
42971: PPUSH
42972: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
42976: LD_INT 105
42978: PPUSH
42979: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
42983: LD_INT 106
42985: PPUSH
42986: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
42990: LD_INT 107
42992: PPUSH
42993: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
42997: LD_INT 108
42999: PPUSH
43000: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
43004: LD_INT 109
43006: PPUSH
43007: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
43011: LD_INT 110
43013: PPUSH
43014: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
43018: LD_INT 111
43020: PPUSH
43021: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
43025: LD_INT 112
43027: PPUSH
43028: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
43032: LD_INT 113
43034: PPUSH
43035: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
43039: LD_INT 120
43041: PPUSH
43042: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
43046: LD_INT 121
43048: PPUSH
43049: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
43053: LD_INT 122
43055: PPUSH
43056: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
43060: LD_INT 123
43062: PPUSH
43063: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
43067: LD_INT 124
43069: PPUSH
43070: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
43074: LD_INT 125
43076: PPUSH
43077: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
43081: LD_INT 126
43083: PPUSH
43084: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
43088: LD_INT 200
43090: PPUSH
43091: CALL_OW 427
// end ;
43095: END
// on SailEvent ( event ) do begin if event < 100 then
43096: LD_VAR 0 1
43100: PUSH
43101: LD_INT 100
43103: LESS
43104: IFFALSE 43115
// CustomEvent ( event ) ;
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL 3095 0 1
// if event = 100 then
43115: LD_VAR 0 1
43119: PUSH
43120: LD_INT 100
43122: EQUAL
43123: IFFALSE 43129
// MC_ClassManager ( ) ;
43125: CALL 43521 0 0
// if event = 101 then
43129: LD_VAR 0 1
43133: PUSH
43134: LD_INT 101
43136: EQUAL
43137: IFFALSE 43143
// MC_RepairBuildings ( ) ;
43139: CALL 48303 0 0
// if event = 102 then
43143: LD_VAR 0 1
43147: PUSH
43148: LD_INT 102
43150: EQUAL
43151: IFFALSE 43157
// MC_Heal ( ) ;
43153: CALL 49162 0 0
// if event = 103 then
43157: LD_VAR 0 1
43161: PUSH
43162: LD_INT 103
43164: EQUAL
43165: IFFALSE 43171
// MC_Build ( ) ;
43167: CALL 49584 0 0
// if event = 104 then
43171: LD_VAR 0 1
43175: PUSH
43176: LD_INT 104
43178: EQUAL
43179: IFFALSE 43185
// MC_TurretWeapon ( ) ;
43181: CALL 51197 0 0
// if event = 105 then
43185: LD_VAR 0 1
43189: PUSH
43190: LD_INT 105
43192: EQUAL
43193: IFFALSE 43199
// MC_BuildUpgrade ( ) ;
43195: CALL 50748 0 0
// if event = 106 then
43199: LD_VAR 0 1
43203: PUSH
43204: LD_INT 106
43206: EQUAL
43207: IFFALSE 43213
// MC_PlantMines ( ) ;
43209: CALL 51627 0 0
// if event = 107 then
43213: LD_VAR 0 1
43217: PUSH
43218: LD_INT 107
43220: EQUAL
43221: IFFALSE 43227
// MC_CollectCrates ( ) ;
43223: CALL 52425 0 0
// if event = 108 then
43227: LD_VAR 0 1
43231: PUSH
43232: LD_INT 108
43234: EQUAL
43235: IFFALSE 43241
// MC_LinkRemoteControl ( ) ;
43237: CALL 54201 0 0
// if event = 109 then
43241: LD_VAR 0 1
43245: PUSH
43246: LD_INT 109
43248: EQUAL
43249: IFFALSE 43255
// MC_ProduceVehicle ( ) ;
43251: CALL 54382 0 0
// if event = 110 then
43255: LD_VAR 0 1
43259: PUSH
43260: LD_INT 110
43262: EQUAL
43263: IFFALSE 43269
// MC_SendAttack ( ) ;
43265: CALL 54848 0 0
// if event = 111 then
43269: LD_VAR 0 1
43273: PUSH
43274: LD_INT 111
43276: EQUAL
43277: IFFALSE 43283
// MC_Defend ( ) ;
43279: CALL 54956 0 0
// if event = 112 then
43283: LD_VAR 0 1
43287: PUSH
43288: LD_INT 112
43290: EQUAL
43291: IFFALSE 43297
// MC_Research ( ) ;
43293: CALL 55561 0 0
// if event = 113 then
43297: LD_VAR 0 1
43301: PUSH
43302: LD_INT 113
43304: EQUAL
43305: IFFALSE 43311
// MC_MinesTrigger ( ) ;
43307: CALL 56675 0 0
// if event = 120 then
43311: LD_VAR 0 1
43315: PUSH
43316: LD_INT 120
43318: EQUAL
43319: IFFALSE 43325
// MC_RepairVehicle ( ) ;
43321: CALL 56774 0 0
// if event = 121 then
43325: LD_VAR 0 1
43329: PUSH
43330: LD_INT 121
43332: EQUAL
43333: IFFALSE 43339
// MC_TameApe ( ) ;
43335: CALL 57504 0 0
// if event = 122 then
43339: LD_VAR 0 1
43343: PUSH
43344: LD_INT 122
43346: EQUAL
43347: IFFALSE 43353
// MC_ChangeApeClass ( ) ;
43349: CALL 58333 0 0
// if event = 123 then
43353: LD_VAR 0 1
43357: PUSH
43358: LD_INT 123
43360: EQUAL
43361: IFFALSE 43367
// MC_Bazooka ( ) ;
43363: CALL 58983 0 0
// if event = 124 then
43367: LD_VAR 0 1
43371: PUSH
43372: LD_INT 124
43374: EQUAL
43375: IFFALSE 43381
// MC_TeleportExit ( ) ;
43377: CALL 59181 0 0
// if event = 125 then
43381: LD_VAR 0 1
43385: PUSH
43386: LD_INT 125
43388: EQUAL
43389: IFFALSE 43395
// MC_Deposits ( ) ;
43391: CALL 59828 0 0
// if event = 126 then
43395: LD_VAR 0 1
43399: PUSH
43400: LD_INT 126
43402: EQUAL
43403: IFFALSE 43409
// MC_RemoteDriver ( ) ;
43405: CALL 60453 0 0
// if event = 200 then
43409: LD_VAR 0 1
43413: PUSH
43414: LD_INT 200
43416: EQUAL
43417: IFFALSE 43423
// MC_Idle ( ) ;
43419: CALL 62402 0 0
// end ;
43423: PPOPN 1
43425: END
// export function MC_Reset ( base , tag ) ; var i ; begin
43426: LD_INT 0
43428: PPUSH
43429: PPUSH
// if not mc_bases [ base ] or not tag then
43430: LD_EXP 11
43434: PUSH
43435: LD_VAR 0 1
43439: ARRAY
43440: NOT
43441: PUSH
43442: LD_VAR 0 2
43446: NOT
43447: OR
43448: IFFALSE 43452
// exit ;
43450: GO 43516
// for i in mc_bases [ base ] union mc_ape [ base ] do
43452: LD_ADDR_VAR 0 4
43456: PUSH
43457: LD_EXP 11
43461: PUSH
43462: LD_VAR 0 1
43466: ARRAY
43467: PUSH
43468: LD_EXP 40
43472: PUSH
43473: LD_VAR 0 1
43477: ARRAY
43478: UNION
43479: PUSH
43480: FOR_IN
43481: IFFALSE 43514
// if GetTag ( i ) = tag then
43483: LD_VAR 0 4
43487: PPUSH
43488: CALL_OW 110
43492: PUSH
43493: LD_VAR 0 2
43497: EQUAL
43498: IFFALSE 43512
// SetTag ( i , 0 ) ;
43500: LD_VAR 0 4
43504: PPUSH
43505: LD_INT 0
43507: PPUSH
43508: CALL_OW 109
43512: GO 43480
43514: POP
43515: POP
// end ;
43516: LD_VAR 0 3
43520: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
43521: LD_INT 0
43523: PPUSH
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
// if not mc_bases then
43531: LD_EXP 11
43535: NOT
43536: IFFALSE 43540
// exit ;
43538: GO 43998
// for i = 1 to mc_bases do
43540: LD_ADDR_VAR 0 2
43544: PUSH
43545: DOUBLE
43546: LD_INT 1
43548: DEC
43549: ST_TO_ADDR
43550: LD_EXP 11
43554: PUSH
43555: FOR_TO
43556: IFFALSE 43996
// begin tmp := MC_ClassCheckReq ( i ) ;
43558: LD_ADDR_VAR 0 4
43562: PUSH
43563: LD_VAR 0 2
43567: PPUSH
43568: CALL 44003 0 1
43572: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
43573: LD_ADDR_EXP 52
43577: PUSH
43578: LD_EXP 52
43582: PPUSH
43583: LD_VAR 0 2
43587: PPUSH
43588: LD_VAR 0 4
43592: PPUSH
43593: CALL_OW 1
43597: ST_TO_ADDR
// if not tmp then
43598: LD_VAR 0 4
43602: NOT
43603: IFFALSE 43607
// continue ;
43605: GO 43555
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
43607: LD_ADDR_VAR 0 6
43611: PUSH
43612: LD_EXP 11
43616: PUSH
43617: LD_VAR 0 2
43621: ARRAY
43622: PPUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 30
43628: PUSH
43629: LD_INT 4
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 30
43638: PUSH
43639: LD_INT 5
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: PPUSH
43651: CALL_OW 72
43655: PUSH
43656: LD_EXP 11
43660: PUSH
43661: LD_VAR 0 2
43665: ARRAY
43666: PPUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 30
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 30
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: PPUSH
43695: CALL_OW 72
43699: PUSH
43700: LD_EXP 11
43704: PUSH
43705: LD_VAR 0 2
43709: ARRAY
43710: PPUSH
43711: LD_INT 30
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PPUSH
43721: CALL_OW 72
43725: PUSH
43726: LD_EXP 11
43730: PUSH
43731: LD_VAR 0 2
43735: ARRAY
43736: PPUSH
43737: LD_INT 2
43739: PUSH
43740: LD_INT 30
43742: PUSH
43743: LD_INT 6
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 30
43752: PUSH
43753: LD_INT 7
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 30
43762: PUSH
43763: LD_INT 8
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: PPUSH
43776: CALL_OW 72
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// for j = 1 to 4 do
43787: LD_ADDR_VAR 0 3
43791: PUSH
43792: DOUBLE
43793: LD_INT 1
43795: DEC
43796: ST_TO_ADDR
43797: LD_INT 4
43799: PUSH
43800: FOR_TO
43801: IFFALSE 43992
// begin if not tmp [ j ] then
43803: LD_VAR 0 4
43807: PUSH
43808: LD_VAR 0 3
43812: ARRAY
43813: NOT
43814: IFFALSE 43818
// continue ;
43816: GO 43800
// for p in tmp [ j ] do
43818: LD_ADDR_VAR 0 5
43822: PUSH
43823: LD_VAR 0 4
43827: PUSH
43828: LD_VAR 0 3
43832: ARRAY
43833: PUSH
43834: FOR_IN
43835: IFFALSE 43988
// begin if not b [ j ] then
43837: LD_VAR 0 6
43841: PUSH
43842: LD_VAR 0 3
43846: ARRAY
43847: NOT
43848: IFFALSE 43852
// break ;
43850: GO 43988
// e := 0 ;
43852: LD_ADDR_VAR 0 7
43856: PUSH
43857: LD_INT 0
43859: ST_TO_ADDR
// for k in b [ j ] do
43860: LD_ADDR_VAR 0 8
43864: PUSH
43865: LD_VAR 0 6
43869: PUSH
43870: LD_VAR 0 3
43874: ARRAY
43875: PUSH
43876: FOR_IN
43877: IFFALSE 43904
// if IsNotFull ( k ) then
43879: LD_VAR 0 8
43883: PPUSH
43884: CALL 5315 0 1
43888: IFFALSE 43902
// begin e := k ;
43890: LD_ADDR_VAR 0 7
43894: PUSH
43895: LD_VAR 0 8
43899: ST_TO_ADDR
// break ;
43900: GO 43904
// end ;
43902: GO 43876
43904: POP
43905: POP
// if e and not UnitGoingToBuilding ( p , e ) then
43906: LD_VAR 0 7
43910: PUSH
43911: LD_VAR 0 5
43915: PPUSH
43916: LD_VAR 0 7
43920: PPUSH
43921: CALL 37735 0 2
43925: NOT
43926: AND
43927: IFFALSE 43986
// begin if IsInUnit ( p ) then
43929: LD_VAR 0 5
43933: PPUSH
43934: CALL_OW 310
43938: IFFALSE 43949
// ComExitBuilding ( p ) ;
43940: LD_VAR 0 5
43944: PPUSH
43945: CALL_OW 122
// ComEnterUnit ( p , e ) ;
43949: LD_VAR 0 5
43953: PPUSH
43954: LD_VAR 0 7
43958: PPUSH
43959: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
43963: LD_VAR 0 5
43967: PPUSH
43968: LD_VAR 0 3
43972: PPUSH
43973: CALL_OW 183
// AddComExitBuilding ( p ) ;
43977: LD_VAR 0 5
43981: PPUSH
43982: CALL_OW 182
// end ; end ;
43986: GO 43834
43988: POP
43989: POP
// end ;
43990: GO 43800
43992: POP
43993: POP
// end ;
43994: GO 43555
43996: POP
43997: POP
// end ;
43998: LD_VAR 0 1
44002: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
44003: LD_INT 0
44005: PPUSH
44006: PPUSH
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
44016: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
44017: LD_VAR 0 1
44021: NOT
44022: PUSH
44023: LD_EXP 11
44027: PUSH
44028: LD_VAR 0 1
44032: ARRAY
44033: NOT
44034: OR
44035: PUSH
44036: LD_EXP 11
44040: PUSH
44041: LD_VAR 0 1
44045: ARRAY
44046: PPUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 30
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 30
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: PPUSH
44075: CALL_OW 72
44079: NOT
44080: OR
44081: IFFALSE 44085
// exit ;
44083: GO 47588
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
44085: LD_ADDR_VAR 0 4
44089: PUSH
44090: LD_EXP 11
44094: PUSH
44095: LD_VAR 0 1
44099: ARRAY
44100: PPUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 25
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 25
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 25
44126: PUSH
44127: LD_INT 3
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 25
44136: PUSH
44137: LD_INT 4
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 25
44146: PUSH
44147: LD_INT 5
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 25
44156: PUSH
44157: LD_INT 8
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 25
44166: PUSH
44167: LD_INT 9
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: PPUSH
44184: CALL_OW 72
44188: ST_TO_ADDR
// if not tmp then
44189: LD_VAR 0 4
44193: NOT
44194: IFFALSE 44198
// exit ;
44196: GO 47588
// for i in tmp do
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_VAR 0 4
44207: PUSH
44208: FOR_IN
44209: IFFALSE 44240
// if GetTag ( i ) then
44211: LD_VAR 0 3
44215: PPUSH
44216: CALL_OW 110
44220: IFFALSE 44238
// tmp := tmp diff i ;
44222: LD_ADDR_VAR 0 4
44226: PUSH
44227: LD_VAR 0 4
44231: PUSH
44232: LD_VAR 0 3
44236: DIFF
44237: ST_TO_ADDR
44238: GO 44208
44240: POP
44241: POP
// if not tmp then
44242: LD_VAR 0 4
44246: NOT
44247: IFFALSE 44251
// exit ;
44249: GO 47588
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
44251: LD_ADDR_VAR 0 5
44255: PUSH
44256: LD_EXP 11
44260: PUSH
44261: LD_VAR 0 1
44265: ARRAY
44266: PPUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 25
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 25
44282: PUSH
44283: LD_INT 5
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 25
44292: PUSH
44293: LD_INT 8
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 25
44302: PUSH
44303: LD_INT 9
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: PPUSH
44317: CALL_OW 72
44321: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
44322: LD_ADDR_VAR 0 6
44326: PUSH
44327: LD_EXP 11
44331: PUSH
44332: LD_VAR 0 1
44336: ARRAY
44337: PPUSH
44338: LD_INT 25
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PPUSH
44348: CALL_OW 72
44352: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
44353: LD_ADDR_VAR 0 7
44357: PUSH
44358: LD_EXP 11
44362: PUSH
44363: LD_VAR 0 1
44367: ARRAY
44368: PPUSH
44369: LD_INT 25
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PPUSH
44379: CALL_OW 72
44383: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
44384: LD_ADDR_VAR 0 8
44388: PUSH
44389: LD_EXP 11
44393: PUSH
44394: LD_VAR 0 1
44398: ARRAY
44399: PPUSH
44400: LD_INT 25
44402: PUSH
44403: LD_INT 4
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 24
44412: PUSH
44413: LD_INT 251
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PPUSH
44424: CALL_OW 72
44428: ST_TO_ADDR
// if mc_scan [ base ] then
44429: LD_EXP 34
44433: PUSH
44434: LD_VAR 0 1
44438: ARRAY
44439: IFFALSE 44900
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
44441: LD_ADDR_EXP 53
44445: PUSH
44446: LD_EXP 53
44450: PPUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: LD_INT 4
44458: PPUSH
44459: CALL_OW 1
44463: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
44464: LD_ADDR_VAR 0 12
44468: PUSH
44469: LD_EXP 11
44473: PUSH
44474: LD_VAR 0 1
44478: ARRAY
44479: PPUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 30
44485: PUSH
44486: LD_INT 4
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 30
44495: PUSH
44496: LD_INT 5
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: PPUSH
44508: CALL_OW 72
44512: ST_TO_ADDR
// if not b then
44513: LD_VAR 0 12
44517: NOT
44518: IFFALSE 44522
// exit ;
44520: GO 47588
// p := [ ] ;
44522: LD_ADDR_VAR 0 11
44526: PUSH
44527: EMPTY
44528: ST_TO_ADDR
// if sci >= 2 then
44529: LD_VAR 0 8
44533: PUSH
44534: LD_INT 2
44536: GREATEREQUAL
44537: IFFALSE 44568
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
44539: LD_ADDR_VAR 0 8
44543: PUSH
44544: LD_VAR 0 8
44548: PUSH
44549: LD_INT 1
44551: ARRAY
44552: PUSH
44553: LD_VAR 0 8
44557: PUSH
44558: LD_INT 2
44560: ARRAY
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: ST_TO_ADDR
44566: GO 44629
// if sci = 1 then
44568: LD_VAR 0 8
44572: PUSH
44573: LD_INT 1
44575: EQUAL
44576: IFFALSE 44597
// sci := [ sci [ 1 ] ] else
44578: LD_ADDR_VAR 0 8
44582: PUSH
44583: LD_VAR 0 8
44587: PUSH
44588: LD_INT 1
44590: ARRAY
44591: PUSH
44592: EMPTY
44593: LIST
44594: ST_TO_ADDR
44595: GO 44629
// if sci = 0 then
44597: LD_VAR 0 8
44601: PUSH
44602: LD_INT 0
44604: EQUAL
44605: IFFALSE 44629
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
44607: LD_ADDR_VAR 0 11
44611: PUSH
44612: LD_VAR 0 4
44616: PPUSH
44617: LD_INT 4
44619: PPUSH
44620: CALL 37598 0 2
44624: PUSH
44625: LD_INT 1
44627: ARRAY
44628: ST_TO_ADDR
// if eng > 4 then
44629: LD_VAR 0 6
44633: PUSH
44634: LD_INT 4
44636: GREATER
44637: IFFALSE 44683
// for i = eng downto 4 do
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: DOUBLE
44645: LD_VAR 0 6
44649: INC
44650: ST_TO_ADDR
44651: LD_INT 4
44653: PUSH
44654: FOR_DOWNTO
44655: IFFALSE 44681
// eng := eng diff eng [ i ] ;
44657: LD_ADDR_VAR 0 6
44661: PUSH
44662: LD_VAR 0 6
44666: PUSH
44667: LD_VAR 0 6
44671: PUSH
44672: LD_VAR 0 3
44676: ARRAY
44677: DIFF
44678: ST_TO_ADDR
44679: GO 44654
44681: POP
44682: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
44683: LD_ADDR_VAR 0 4
44687: PUSH
44688: LD_VAR 0 4
44692: PUSH
44693: LD_VAR 0 5
44697: PUSH
44698: LD_VAR 0 6
44702: UNION
44703: PUSH
44704: LD_VAR 0 7
44708: UNION
44709: PUSH
44710: LD_VAR 0 8
44714: UNION
44715: DIFF
44716: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
44717: LD_ADDR_VAR 0 13
44721: PUSH
44722: LD_EXP 11
44726: PUSH
44727: LD_VAR 0 1
44731: ARRAY
44732: PPUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 30
44738: PUSH
44739: LD_INT 32
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 30
44748: PUSH
44749: LD_INT 31
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: PPUSH
44761: CALL_OW 72
44765: PUSH
44766: LD_EXP 11
44770: PUSH
44771: LD_VAR 0 1
44775: ARRAY
44776: PPUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 30
44782: PUSH
44783: LD_INT 4
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 30
44792: PUSH
44793: LD_INT 5
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: PPUSH
44805: CALL_OW 72
44809: PUSH
44810: LD_INT 6
44812: MUL
44813: PLUS
44814: ST_TO_ADDR
// if bcount < tmp then
44815: LD_VAR 0 13
44819: PUSH
44820: LD_VAR 0 4
44824: LESS
44825: IFFALSE 44871
// for i = tmp downto bcount do
44827: LD_ADDR_VAR 0 3
44831: PUSH
44832: DOUBLE
44833: LD_VAR 0 4
44837: INC
44838: ST_TO_ADDR
44839: LD_VAR 0 13
44843: PUSH
44844: FOR_DOWNTO
44845: IFFALSE 44869
// tmp := Delete ( tmp , tmp ) ;
44847: LD_ADDR_VAR 0 4
44851: PUSH
44852: LD_VAR 0 4
44856: PPUSH
44857: LD_VAR 0 4
44861: PPUSH
44862: CALL_OW 3
44866: ST_TO_ADDR
44867: GO 44844
44869: POP
44870: POP
// result := [ tmp , 0 , 0 , p ] ;
44871: LD_ADDR_VAR 0 2
44875: PUSH
44876: LD_VAR 0 4
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_VAR 0 11
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
// exit ;
44898: GO 47588
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
44900: LD_EXP 11
44904: PUSH
44905: LD_VAR 0 1
44909: ARRAY
44910: PPUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 30
44916: PUSH
44917: LD_INT 6
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 30
44926: PUSH
44927: LD_INT 7
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 30
44936: PUSH
44937: LD_INT 8
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: PPUSH
44950: CALL_OW 72
44954: NOT
44955: PUSH
44956: LD_EXP 11
44960: PUSH
44961: LD_VAR 0 1
44965: ARRAY
44966: PPUSH
44967: LD_INT 30
44969: PUSH
44970: LD_INT 3
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PPUSH
44977: CALL_OW 72
44981: NOT
44982: AND
44983: IFFALSE 45055
// begin if eng = tmp then
44985: LD_VAR 0 6
44989: PUSH
44990: LD_VAR 0 4
44994: EQUAL
44995: IFFALSE 44999
// exit ;
44997: GO 47588
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
44999: LD_ADDR_EXP 53
45003: PUSH
45004: LD_EXP 53
45008: PPUSH
45009: LD_VAR 0 1
45013: PPUSH
45014: LD_INT 1
45016: PPUSH
45017: CALL_OW 1
45021: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
45022: LD_ADDR_VAR 0 2
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_VAR 0 4
45034: PUSH
45035: LD_VAR 0 6
45039: DIFF
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// exit ;
45053: GO 47588
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
45055: LD_EXP 38
45059: PUSH
45060: LD_EXP 37
45064: PUSH
45065: LD_VAR 0 1
45069: ARRAY
45070: ARRAY
45071: PUSH
45072: LD_EXP 11
45076: PUSH
45077: LD_VAR 0 1
45081: ARRAY
45082: PPUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 30
45088: PUSH
45089: LD_INT 6
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 30
45098: PUSH
45099: LD_INT 7
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 30
45108: PUSH
45109: LD_INT 8
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: PPUSH
45122: CALL_OW 72
45126: AND
45127: PUSH
45128: LD_EXP 11
45132: PUSH
45133: LD_VAR 0 1
45137: ARRAY
45138: PPUSH
45139: LD_INT 30
45141: PUSH
45142: LD_INT 3
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PPUSH
45149: CALL_OW 72
45153: NOT
45154: AND
45155: IFFALSE 45369
// begin if sci >= 6 then
45157: LD_VAR 0 8
45161: PUSH
45162: LD_INT 6
45164: GREATEREQUAL
45165: IFFALSE 45169
// exit ;
45167: GO 47588
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
45169: LD_ADDR_EXP 53
45173: PUSH
45174: LD_EXP 53
45178: PPUSH
45179: LD_VAR 0 1
45183: PPUSH
45184: LD_INT 2
45186: PPUSH
45187: CALL_OW 1
45191: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
45192: LD_ADDR_VAR 0 9
45196: PUSH
45197: LD_VAR 0 4
45201: PUSH
45202: LD_VAR 0 8
45206: DIFF
45207: PPUSH
45208: LD_INT 4
45210: PPUSH
45211: CALL 37598 0 2
45215: ST_TO_ADDR
// p := [ ] ;
45216: LD_ADDR_VAR 0 11
45220: PUSH
45221: EMPTY
45222: ST_TO_ADDR
// if sci < 6 and sort > 6 then
45223: LD_VAR 0 8
45227: PUSH
45228: LD_INT 6
45230: LESS
45231: PUSH
45232: LD_VAR 0 9
45236: PUSH
45237: LD_INT 6
45239: GREATER
45240: AND
45241: IFFALSE 45322
// begin for i = 1 to 6 - sci do
45243: LD_ADDR_VAR 0 3
45247: PUSH
45248: DOUBLE
45249: LD_INT 1
45251: DEC
45252: ST_TO_ADDR
45253: LD_INT 6
45255: PUSH
45256: LD_VAR 0 8
45260: MINUS
45261: PUSH
45262: FOR_TO
45263: IFFALSE 45318
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
45265: LD_ADDR_VAR 0 11
45269: PUSH
45270: LD_VAR 0 11
45274: PPUSH
45275: LD_VAR 0 11
45279: PUSH
45280: LD_INT 1
45282: PLUS
45283: PPUSH
45284: LD_VAR 0 9
45288: PUSH
45289: LD_INT 1
45291: ARRAY
45292: PPUSH
45293: CALL_OW 2
45297: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
45298: LD_ADDR_VAR 0 9
45302: PUSH
45303: LD_VAR 0 9
45307: PPUSH
45308: LD_INT 1
45310: PPUSH
45311: CALL_OW 3
45315: ST_TO_ADDR
// end ;
45316: GO 45262
45318: POP
45319: POP
// end else
45320: GO 45342
// if sort then
45322: LD_VAR 0 9
45326: IFFALSE 45342
// p := sort [ 1 ] ;
45328: LD_ADDR_VAR 0 11
45332: PUSH
45333: LD_VAR 0 9
45337: PUSH
45338: LD_INT 1
45340: ARRAY
45341: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
45342: LD_ADDR_VAR 0 2
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_VAR 0 11
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: ST_TO_ADDR
// exit ;
45367: GO 47588
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
45369: LD_EXP 38
45373: PUSH
45374: LD_EXP 37
45378: PUSH
45379: LD_VAR 0 1
45383: ARRAY
45384: ARRAY
45385: PUSH
45386: LD_EXP 11
45390: PUSH
45391: LD_VAR 0 1
45395: ARRAY
45396: PPUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 30
45402: PUSH
45403: LD_INT 6
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 30
45412: PUSH
45413: LD_INT 7
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 30
45422: PUSH
45423: LD_INT 8
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: PPUSH
45436: CALL_OW 72
45440: AND
45441: PUSH
45442: LD_EXP 11
45446: PUSH
45447: LD_VAR 0 1
45451: ARRAY
45452: PPUSH
45453: LD_INT 30
45455: PUSH
45456: LD_INT 3
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PPUSH
45463: CALL_OW 72
45467: AND
45468: IFFALSE 46202
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
45470: LD_ADDR_EXP 53
45474: PUSH
45475: LD_EXP 53
45479: PPUSH
45480: LD_VAR 0 1
45484: PPUSH
45485: LD_INT 3
45487: PPUSH
45488: CALL_OW 1
45492: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
45493: LD_ADDR_VAR 0 2
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: ST_TO_ADDR
// if not eng then
45516: LD_VAR 0 6
45520: NOT
45521: IFFALSE 45584
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
45523: LD_ADDR_VAR 0 11
45527: PUSH
45528: LD_VAR 0 4
45532: PPUSH
45533: LD_INT 2
45535: PPUSH
45536: CALL 37598 0 2
45540: PUSH
45541: LD_INT 1
45543: ARRAY
45544: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
45545: LD_ADDR_VAR 0 2
45549: PUSH
45550: LD_VAR 0 2
45554: PPUSH
45555: LD_INT 2
45557: PPUSH
45558: LD_VAR 0 11
45562: PPUSH
45563: CALL_OW 1
45567: ST_TO_ADDR
// tmp := tmp diff p ;
45568: LD_ADDR_VAR 0 4
45572: PUSH
45573: LD_VAR 0 4
45577: PUSH
45578: LD_VAR 0 11
45582: DIFF
45583: ST_TO_ADDR
// end ; if tmp and sci < 6 then
45584: LD_VAR 0 4
45588: PUSH
45589: LD_VAR 0 8
45593: PUSH
45594: LD_INT 6
45596: LESS
45597: AND
45598: IFFALSE 45786
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
45600: LD_ADDR_VAR 0 9
45604: PUSH
45605: LD_VAR 0 4
45609: PUSH
45610: LD_VAR 0 8
45614: PUSH
45615: LD_VAR 0 7
45619: UNION
45620: DIFF
45621: PPUSH
45622: LD_INT 4
45624: PPUSH
45625: CALL 37598 0 2
45629: ST_TO_ADDR
// p := [ ] ;
45630: LD_ADDR_VAR 0 11
45634: PUSH
45635: EMPTY
45636: ST_TO_ADDR
// if sort then
45637: LD_VAR 0 9
45641: IFFALSE 45757
// for i = 1 to 6 - sci do
45643: LD_ADDR_VAR 0 3
45647: PUSH
45648: DOUBLE
45649: LD_INT 1
45651: DEC
45652: ST_TO_ADDR
45653: LD_INT 6
45655: PUSH
45656: LD_VAR 0 8
45660: MINUS
45661: PUSH
45662: FOR_TO
45663: IFFALSE 45755
// begin if i = sort then
45665: LD_VAR 0 3
45669: PUSH
45670: LD_VAR 0 9
45674: EQUAL
45675: IFFALSE 45679
// break ;
45677: GO 45755
// if GetClass ( i ) = 4 then
45679: LD_VAR 0 3
45683: PPUSH
45684: CALL_OW 257
45688: PUSH
45689: LD_INT 4
45691: EQUAL
45692: IFFALSE 45696
// continue ;
45694: GO 45662
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45696: LD_ADDR_VAR 0 11
45700: PUSH
45701: LD_VAR 0 11
45705: PPUSH
45706: LD_VAR 0 11
45710: PUSH
45711: LD_INT 1
45713: PLUS
45714: PPUSH
45715: LD_VAR 0 9
45719: PUSH
45720: LD_VAR 0 3
45724: ARRAY
45725: PPUSH
45726: CALL_OW 2
45730: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45731: LD_ADDR_VAR 0 4
45735: PUSH
45736: LD_VAR 0 4
45740: PUSH
45741: LD_VAR 0 9
45745: PUSH
45746: LD_VAR 0 3
45750: ARRAY
45751: DIFF
45752: ST_TO_ADDR
// end ;
45753: GO 45662
45755: POP
45756: POP
// if p then
45757: LD_VAR 0 11
45761: IFFALSE 45786
// result := Replace ( result , 4 , p ) ;
45763: LD_ADDR_VAR 0 2
45767: PUSH
45768: LD_VAR 0 2
45772: PPUSH
45773: LD_INT 4
45775: PPUSH
45776: LD_VAR 0 11
45780: PPUSH
45781: CALL_OW 1
45785: ST_TO_ADDR
// end ; if tmp and mech < 6 then
45786: LD_VAR 0 4
45790: PUSH
45791: LD_VAR 0 7
45795: PUSH
45796: LD_INT 6
45798: LESS
45799: AND
45800: IFFALSE 45988
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
45802: LD_ADDR_VAR 0 9
45806: PUSH
45807: LD_VAR 0 4
45811: PUSH
45812: LD_VAR 0 8
45816: PUSH
45817: LD_VAR 0 7
45821: UNION
45822: DIFF
45823: PPUSH
45824: LD_INT 3
45826: PPUSH
45827: CALL 37598 0 2
45831: ST_TO_ADDR
// p := [ ] ;
45832: LD_ADDR_VAR 0 11
45836: PUSH
45837: EMPTY
45838: ST_TO_ADDR
// if sort then
45839: LD_VAR 0 9
45843: IFFALSE 45959
// for i = 1 to 6 - mech do
45845: LD_ADDR_VAR 0 3
45849: PUSH
45850: DOUBLE
45851: LD_INT 1
45853: DEC
45854: ST_TO_ADDR
45855: LD_INT 6
45857: PUSH
45858: LD_VAR 0 7
45862: MINUS
45863: PUSH
45864: FOR_TO
45865: IFFALSE 45957
// begin if i = sort then
45867: LD_VAR 0 3
45871: PUSH
45872: LD_VAR 0 9
45876: EQUAL
45877: IFFALSE 45881
// break ;
45879: GO 45957
// if GetClass ( i ) = 3 then
45881: LD_VAR 0 3
45885: PPUSH
45886: CALL_OW 257
45890: PUSH
45891: LD_INT 3
45893: EQUAL
45894: IFFALSE 45898
// continue ;
45896: GO 45864
// p := Insert ( p , p + 1 , sort [ i ] ) ;
45898: LD_ADDR_VAR 0 11
45902: PUSH
45903: LD_VAR 0 11
45907: PPUSH
45908: LD_VAR 0 11
45912: PUSH
45913: LD_INT 1
45915: PLUS
45916: PPUSH
45917: LD_VAR 0 9
45921: PUSH
45922: LD_VAR 0 3
45926: ARRAY
45927: PPUSH
45928: CALL_OW 2
45932: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
45933: LD_ADDR_VAR 0 4
45937: PUSH
45938: LD_VAR 0 4
45942: PUSH
45943: LD_VAR 0 9
45947: PUSH
45948: LD_VAR 0 3
45952: ARRAY
45953: DIFF
45954: ST_TO_ADDR
// end ;
45955: GO 45864
45957: POP
45958: POP
// if p then
45959: LD_VAR 0 11
45963: IFFALSE 45988
// result := Replace ( result , 3 , p ) ;
45965: LD_ADDR_VAR 0 2
45969: PUSH
45970: LD_VAR 0 2
45974: PPUSH
45975: LD_INT 3
45977: PPUSH
45978: LD_VAR 0 11
45982: PPUSH
45983: CALL_OW 1
45987: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
45988: LD_VAR 0 4
45992: PUSH
45993: LD_INT 6
45995: GREATER
45996: PUSH
45997: LD_VAR 0 6
46001: PUSH
46002: LD_INT 6
46004: LESS
46005: AND
46006: IFFALSE 46200
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
46008: LD_ADDR_VAR 0 9
46012: PUSH
46013: LD_VAR 0 4
46017: PUSH
46018: LD_VAR 0 8
46022: PUSH
46023: LD_VAR 0 7
46027: UNION
46028: PUSH
46029: LD_VAR 0 6
46033: UNION
46034: DIFF
46035: PPUSH
46036: LD_INT 2
46038: PPUSH
46039: CALL 37598 0 2
46043: ST_TO_ADDR
// p := [ ] ;
46044: LD_ADDR_VAR 0 11
46048: PUSH
46049: EMPTY
46050: ST_TO_ADDR
// if sort then
46051: LD_VAR 0 9
46055: IFFALSE 46171
// for i = 1 to 6 - eng do
46057: LD_ADDR_VAR 0 3
46061: PUSH
46062: DOUBLE
46063: LD_INT 1
46065: DEC
46066: ST_TO_ADDR
46067: LD_INT 6
46069: PUSH
46070: LD_VAR 0 6
46074: MINUS
46075: PUSH
46076: FOR_TO
46077: IFFALSE 46169
// begin if i = sort then
46079: LD_VAR 0 3
46083: PUSH
46084: LD_VAR 0 9
46088: EQUAL
46089: IFFALSE 46093
// break ;
46091: GO 46169
// if GetClass ( i ) = 2 then
46093: LD_VAR 0 3
46097: PPUSH
46098: CALL_OW 257
46102: PUSH
46103: LD_INT 2
46105: EQUAL
46106: IFFALSE 46110
// continue ;
46108: GO 46076
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46110: LD_ADDR_VAR 0 11
46114: PUSH
46115: LD_VAR 0 11
46119: PPUSH
46120: LD_VAR 0 11
46124: PUSH
46125: LD_INT 1
46127: PLUS
46128: PPUSH
46129: LD_VAR 0 9
46133: PUSH
46134: LD_VAR 0 3
46138: ARRAY
46139: PPUSH
46140: CALL_OW 2
46144: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46145: LD_ADDR_VAR 0 4
46149: PUSH
46150: LD_VAR 0 4
46154: PUSH
46155: LD_VAR 0 9
46159: PUSH
46160: LD_VAR 0 3
46164: ARRAY
46165: DIFF
46166: ST_TO_ADDR
// end ;
46167: GO 46076
46169: POP
46170: POP
// if p then
46171: LD_VAR 0 11
46175: IFFALSE 46200
// result := Replace ( result , 2 , p ) ;
46177: LD_ADDR_VAR 0 2
46181: PUSH
46182: LD_VAR 0 2
46186: PPUSH
46187: LD_INT 2
46189: PPUSH
46190: LD_VAR 0 11
46194: PPUSH
46195: CALL_OW 1
46199: ST_TO_ADDR
// end ; exit ;
46200: GO 47588
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
46202: LD_EXP 38
46206: PUSH
46207: LD_EXP 37
46211: PUSH
46212: LD_VAR 0 1
46216: ARRAY
46217: ARRAY
46218: NOT
46219: PUSH
46220: LD_EXP 11
46224: PUSH
46225: LD_VAR 0 1
46229: ARRAY
46230: PPUSH
46231: LD_INT 30
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PPUSH
46241: CALL_OW 72
46245: AND
46246: PUSH
46247: LD_EXP 16
46251: PUSH
46252: LD_VAR 0 1
46256: ARRAY
46257: AND
46258: IFFALSE 46866
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
46260: LD_ADDR_EXP 53
46264: PUSH
46265: LD_EXP 53
46269: PPUSH
46270: LD_VAR 0 1
46274: PPUSH
46275: LD_INT 5
46277: PPUSH
46278: CALL_OW 1
46282: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
46283: LD_ADDR_VAR 0 2
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: ST_TO_ADDR
// if sci > 1 then
46306: LD_VAR 0 8
46310: PUSH
46311: LD_INT 1
46313: GREATER
46314: IFFALSE 46342
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
46316: LD_ADDR_VAR 0 4
46320: PUSH
46321: LD_VAR 0 4
46325: PUSH
46326: LD_VAR 0 8
46330: PUSH
46331: LD_VAR 0 8
46335: PUSH
46336: LD_INT 1
46338: ARRAY
46339: DIFF
46340: DIFF
46341: ST_TO_ADDR
// if tmp and not sci then
46342: LD_VAR 0 4
46346: PUSH
46347: LD_VAR 0 8
46351: NOT
46352: AND
46353: IFFALSE 46422
// begin sort := SortBySkill ( tmp , 4 ) ;
46355: LD_ADDR_VAR 0 9
46359: PUSH
46360: LD_VAR 0 4
46364: PPUSH
46365: LD_INT 4
46367: PPUSH
46368: CALL 37598 0 2
46372: ST_TO_ADDR
// if sort then
46373: LD_VAR 0 9
46377: IFFALSE 46393
// p := sort [ 1 ] ;
46379: LD_ADDR_VAR 0 11
46383: PUSH
46384: LD_VAR 0 9
46388: PUSH
46389: LD_INT 1
46391: ARRAY
46392: ST_TO_ADDR
// if p then
46393: LD_VAR 0 11
46397: IFFALSE 46422
// result := Replace ( result , 4 , p ) ;
46399: LD_ADDR_VAR 0 2
46403: PUSH
46404: LD_VAR 0 2
46408: PPUSH
46409: LD_INT 4
46411: PPUSH
46412: LD_VAR 0 11
46416: PPUSH
46417: CALL_OW 1
46421: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
46422: LD_ADDR_VAR 0 4
46426: PUSH
46427: LD_VAR 0 4
46431: PUSH
46432: LD_VAR 0 7
46436: DIFF
46437: ST_TO_ADDR
// if tmp and mech < 6 then
46438: LD_VAR 0 4
46442: PUSH
46443: LD_VAR 0 7
46447: PUSH
46448: LD_INT 6
46450: LESS
46451: AND
46452: IFFALSE 46640
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
46454: LD_ADDR_VAR 0 9
46458: PUSH
46459: LD_VAR 0 4
46463: PUSH
46464: LD_VAR 0 8
46468: PUSH
46469: LD_VAR 0 7
46473: UNION
46474: DIFF
46475: PPUSH
46476: LD_INT 3
46478: PPUSH
46479: CALL 37598 0 2
46483: ST_TO_ADDR
// p := [ ] ;
46484: LD_ADDR_VAR 0 11
46488: PUSH
46489: EMPTY
46490: ST_TO_ADDR
// if sort then
46491: LD_VAR 0 9
46495: IFFALSE 46611
// for i = 1 to 6 - mech do
46497: LD_ADDR_VAR 0 3
46501: PUSH
46502: DOUBLE
46503: LD_INT 1
46505: DEC
46506: ST_TO_ADDR
46507: LD_INT 6
46509: PUSH
46510: LD_VAR 0 7
46514: MINUS
46515: PUSH
46516: FOR_TO
46517: IFFALSE 46609
// begin if i = sort then
46519: LD_VAR 0 3
46523: PUSH
46524: LD_VAR 0 9
46528: EQUAL
46529: IFFALSE 46533
// break ;
46531: GO 46609
// if GetClass ( i ) = 3 then
46533: LD_VAR 0 3
46537: PPUSH
46538: CALL_OW 257
46542: PUSH
46543: LD_INT 3
46545: EQUAL
46546: IFFALSE 46550
// continue ;
46548: GO 46516
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46550: LD_ADDR_VAR 0 11
46554: PUSH
46555: LD_VAR 0 11
46559: PPUSH
46560: LD_VAR 0 11
46564: PUSH
46565: LD_INT 1
46567: PLUS
46568: PPUSH
46569: LD_VAR 0 9
46573: PUSH
46574: LD_VAR 0 3
46578: ARRAY
46579: PPUSH
46580: CALL_OW 2
46584: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46585: LD_ADDR_VAR 0 4
46589: PUSH
46590: LD_VAR 0 4
46594: PUSH
46595: LD_VAR 0 9
46599: PUSH
46600: LD_VAR 0 3
46604: ARRAY
46605: DIFF
46606: ST_TO_ADDR
// end ;
46607: GO 46516
46609: POP
46610: POP
// if p then
46611: LD_VAR 0 11
46615: IFFALSE 46640
// result := Replace ( result , 3 , p ) ;
46617: LD_ADDR_VAR 0 2
46621: PUSH
46622: LD_VAR 0 2
46626: PPUSH
46627: LD_INT 3
46629: PPUSH
46630: LD_VAR 0 11
46634: PPUSH
46635: CALL_OW 1
46639: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
46640: LD_ADDR_VAR 0 4
46644: PUSH
46645: LD_VAR 0 4
46649: PUSH
46650: LD_VAR 0 6
46654: DIFF
46655: ST_TO_ADDR
// if tmp and eng < 6 then
46656: LD_VAR 0 4
46660: PUSH
46661: LD_VAR 0 6
46665: PUSH
46666: LD_INT 6
46668: LESS
46669: AND
46670: IFFALSE 46864
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
46672: LD_ADDR_VAR 0 9
46676: PUSH
46677: LD_VAR 0 4
46681: PUSH
46682: LD_VAR 0 8
46686: PUSH
46687: LD_VAR 0 7
46691: UNION
46692: PUSH
46693: LD_VAR 0 6
46697: UNION
46698: DIFF
46699: PPUSH
46700: LD_INT 2
46702: PPUSH
46703: CALL 37598 0 2
46707: ST_TO_ADDR
// p := [ ] ;
46708: LD_ADDR_VAR 0 11
46712: PUSH
46713: EMPTY
46714: ST_TO_ADDR
// if sort then
46715: LD_VAR 0 9
46719: IFFALSE 46835
// for i = 1 to 6 - eng do
46721: LD_ADDR_VAR 0 3
46725: PUSH
46726: DOUBLE
46727: LD_INT 1
46729: DEC
46730: ST_TO_ADDR
46731: LD_INT 6
46733: PUSH
46734: LD_VAR 0 6
46738: MINUS
46739: PUSH
46740: FOR_TO
46741: IFFALSE 46833
// begin if i = sort then
46743: LD_VAR 0 3
46747: PUSH
46748: LD_VAR 0 9
46752: EQUAL
46753: IFFALSE 46757
// break ;
46755: GO 46833
// if GetClass ( i ) = 2 then
46757: LD_VAR 0 3
46761: PPUSH
46762: CALL_OW 257
46766: PUSH
46767: LD_INT 2
46769: EQUAL
46770: IFFALSE 46774
// continue ;
46772: GO 46740
// p := Insert ( p , p + 1 , sort [ i ] ) ;
46774: LD_ADDR_VAR 0 11
46778: PUSH
46779: LD_VAR 0 11
46783: PPUSH
46784: LD_VAR 0 11
46788: PUSH
46789: LD_INT 1
46791: PLUS
46792: PPUSH
46793: LD_VAR 0 9
46797: PUSH
46798: LD_VAR 0 3
46802: ARRAY
46803: PPUSH
46804: CALL_OW 2
46808: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
46809: LD_ADDR_VAR 0 4
46813: PUSH
46814: LD_VAR 0 4
46818: PUSH
46819: LD_VAR 0 9
46823: PUSH
46824: LD_VAR 0 3
46828: ARRAY
46829: DIFF
46830: ST_TO_ADDR
// end ;
46831: GO 46740
46833: POP
46834: POP
// if p then
46835: LD_VAR 0 11
46839: IFFALSE 46864
// result := Replace ( result , 2 , p ) ;
46841: LD_ADDR_VAR 0 2
46845: PUSH
46846: LD_VAR 0 2
46850: PPUSH
46851: LD_INT 2
46853: PPUSH
46854: LD_VAR 0 11
46858: PPUSH
46859: CALL_OW 1
46863: ST_TO_ADDR
// end ; exit ;
46864: GO 47588
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
46866: LD_EXP 38
46870: PUSH
46871: LD_EXP 37
46875: PUSH
46876: LD_VAR 0 1
46880: ARRAY
46881: ARRAY
46882: NOT
46883: PUSH
46884: LD_EXP 11
46888: PUSH
46889: LD_VAR 0 1
46893: ARRAY
46894: PPUSH
46895: LD_INT 30
46897: PUSH
46898: LD_INT 3
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PPUSH
46905: CALL_OW 72
46909: AND
46910: PUSH
46911: LD_EXP 16
46915: PUSH
46916: LD_VAR 0 1
46920: ARRAY
46921: NOT
46922: AND
46923: IFFALSE 47588
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
46925: LD_ADDR_EXP 53
46929: PUSH
46930: LD_EXP 53
46934: PPUSH
46935: LD_VAR 0 1
46939: PPUSH
46940: LD_INT 6
46942: PPUSH
46943: CALL_OW 1
46947: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
46948: LD_ADDR_VAR 0 2
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: ST_TO_ADDR
// if sci >= 1 then
46971: LD_VAR 0 8
46975: PUSH
46976: LD_INT 1
46978: GREATEREQUAL
46979: IFFALSE 47001
// tmp := tmp diff sci [ 1 ] ;
46981: LD_ADDR_VAR 0 4
46985: PUSH
46986: LD_VAR 0 4
46990: PUSH
46991: LD_VAR 0 8
46995: PUSH
46996: LD_INT 1
46998: ARRAY
46999: DIFF
47000: ST_TO_ADDR
// if tmp and not sci then
47001: LD_VAR 0 4
47005: PUSH
47006: LD_VAR 0 8
47010: NOT
47011: AND
47012: IFFALSE 47081
// begin sort := SortBySkill ( tmp , 4 ) ;
47014: LD_ADDR_VAR 0 9
47018: PUSH
47019: LD_VAR 0 4
47023: PPUSH
47024: LD_INT 4
47026: PPUSH
47027: CALL 37598 0 2
47031: ST_TO_ADDR
// if sort then
47032: LD_VAR 0 9
47036: IFFALSE 47052
// p := sort [ 1 ] ;
47038: LD_ADDR_VAR 0 11
47042: PUSH
47043: LD_VAR 0 9
47047: PUSH
47048: LD_INT 1
47050: ARRAY
47051: ST_TO_ADDR
// if p then
47052: LD_VAR 0 11
47056: IFFALSE 47081
// result := Replace ( result , 4 , p ) ;
47058: LD_ADDR_VAR 0 2
47062: PUSH
47063: LD_VAR 0 2
47067: PPUSH
47068: LD_INT 4
47070: PPUSH
47071: LD_VAR 0 11
47075: PPUSH
47076: CALL_OW 1
47080: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
47081: LD_ADDR_VAR 0 4
47085: PUSH
47086: LD_VAR 0 4
47090: PUSH
47091: LD_VAR 0 7
47095: DIFF
47096: ST_TO_ADDR
// if tmp and mech < 6 then
47097: LD_VAR 0 4
47101: PUSH
47102: LD_VAR 0 7
47106: PUSH
47107: LD_INT 6
47109: LESS
47110: AND
47111: IFFALSE 47293
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
47113: LD_ADDR_VAR 0 9
47117: PUSH
47118: LD_VAR 0 4
47122: PUSH
47123: LD_VAR 0 7
47127: DIFF
47128: PPUSH
47129: LD_INT 3
47131: PPUSH
47132: CALL 37598 0 2
47136: ST_TO_ADDR
// p := [ ] ;
47137: LD_ADDR_VAR 0 11
47141: PUSH
47142: EMPTY
47143: ST_TO_ADDR
// if sort then
47144: LD_VAR 0 9
47148: IFFALSE 47264
// for i = 1 to 6 - mech do
47150: LD_ADDR_VAR 0 3
47154: PUSH
47155: DOUBLE
47156: LD_INT 1
47158: DEC
47159: ST_TO_ADDR
47160: LD_INT 6
47162: PUSH
47163: LD_VAR 0 7
47167: MINUS
47168: PUSH
47169: FOR_TO
47170: IFFALSE 47262
// begin if i = sort then
47172: LD_VAR 0 3
47176: PUSH
47177: LD_VAR 0 9
47181: EQUAL
47182: IFFALSE 47186
// break ;
47184: GO 47262
// if GetClass ( i ) = 3 then
47186: LD_VAR 0 3
47190: PPUSH
47191: CALL_OW 257
47195: PUSH
47196: LD_INT 3
47198: EQUAL
47199: IFFALSE 47203
// continue ;
47201: GO 47169
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47203: LD_ADDR_VAR 0 11
47207: PUSH
47208: LD_VAR 0 11
47212: PPUSH
47213: LD_VAR 0 11
47217: PUSH
47218: LD_INT 1
47220: PLUS
47221: PPUSH
47222: LD_VAR 0 9
47226: PUSH
47227: LD_VAR 0 3
47231: ARRAY
47232: PPUSH
47233: CALL_OW 2
47237: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47238: LD_ADDR_VAR 0 4
47242: PUSH
47243: LD_VAR 0 4
47247: PUSH
47248: LD_VAR 0 9
47252: PUSH
47253: LD_VAR 0 3
47257: ARRAY
47258: DIFF
47259: ST_TO_ADDR
// end ;
47260: GO 47169
47262: POP
47263: POP
// if p then
47264: LD_VAR 0 11
47268: IFFALSE 47293
// result := Replace ( result , 3 , p ) ;
47270: LD_ADDR_VAR 0 2
47274: PUSH
47275: LD_VAR 0 2
47279: PPUSH
47280: LD_INT 3
47282: PPUSH
47283: LD_VAR 0 11
47287: PPUSH
47288: CALL_OW 1
47292: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
47293: LD_ADDR_VAR 0 4
47297: PUSH
47298: LD_VAR 0 4
47302: PUSH
47303: LD_VAR 0 6
47307: DIFF
47308: ST_TO_ADDR
// if tmp and eng < 4 then
47309: LD_VAR 0 4
47313: PUSH
47314: LD_VAR 0 6
47318: PUSH
47319: LD_INT 4
47321: LESS
47322: AND
47323: IFFALSE 47513
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
47325: LD_ADDR_VAR 0 9
47329: PUSH
47330: LD_VAR 0 4
47334: PUSH
47335: LD_VAR 0 7
47339: PUSH
47340: LD_VAR 0 6
47344: UNION
47345: DIFF
47346: PPUSH
47347: LD_INT 2
47349: PPUSH
47350: CALL 37598 0 2
47354: ST_TO_ADDR
// p := [ ] ;
47355: LD_ADDR_VAR 0 11
47359: PUSH
47360: EMPTY
47361: ST_TO_ADDR
// if sort then
47362: LD_VAR 0 9
47366: IFFALSE 47482
// for i = 1 to 4 - eng do
47368: LD_ADDR_VAR 0 3
47372: PUSH
47373: DOUBLE
47374: LD_INT 1
47376: DEC
47377: ST_TO_ADDR
47378: LD_INT 4
47380: PUSH
47381: LD_VAR 0 6
47385: MINUS
47386: PUSH
47387: FOR_TO
47388: IFFALSE 47480
// begin if i = sort then
47390: LD_VAR 0 3
47394: PUSH
47395: LD_VAR 0 9
47399: EQUAL
47400: IFFALSE 47404
// break ;
47402: GO 47480
// if GetClass ( i ) = 2 then
47404: LD_VAR 0 3
47408: PPUSH
47409: CALL_OW 257
47413: PUSH
47414: LD_INT 2
47416: EQUAL
47417: IFFALSE 47421
// continue ;
47419: GO 47387
// p := Insert ( p , p + 1 , sort [ i ] ) ;
47421: LD_ADDR_VAR 0 11
47425: PUSH
47426: LD_VAR 0 11
47430: PPUSH
47431: LD_VAR 0 11
47435: PUSH
47436: LD_INT 1
47438: PLUS
47439: PPUSH
47440: LD_VAR 0 9
47444: PUSH
47445: LD_VAR 0 3
47449: ARRAY
47450: PPUSH
47451: CALL_OW 2
47455: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
47456: LD_ADDR_VAR 0 4
47460: PUSH
47461: LD_VAR 0 4
47465: PUSH
47466: LD_VAR 0 9
47470: PUSH
47471: LD_VAR 0 3
47475: ARRAY
47476: DIFF
47477: ST_TO_ADDR
// end ;
47478: GO 47387
47480: POP
47481: POP
// if p then
47482: LD_VAR 0 11
47486: IFFALSE 47511
// result := Replace ( result , 2 , p ) ;
47488: LD_ADDR_VAR 0 2
47492: PUSH
47493: LD_VAR 0 2
47497: PPUSH
47498: LD_INT 2
47500: PPUSH
47501: LD_VAR 0 11
47505: PPUSH
47506: CALL_OW 1
47510: ST_TO_ADDR
// end else
47511: GO 47557
// for i = eng downto 5 do
47513: LD_ADDR_VAR 0 3
47517: PUSH
47518: DOUBLE
47519: LD_VAR 0 6
47523: INC
47524: ST_TO_ADDR
47525: LD_INT 5
47527: PUSH
47528: FOR_DOWNTO
47529: IFFALSE 47555
// tmp := tmp union eng [ i ] ;
47531: LD_ADDR_VAR 0 4
47535: PUSH
47536: LD_VAR 0 4
47540: PUSH
47541: LD_VAR 0 6
47545: PUSH
47546: LD_VAR 0 3
47550: ARRAY
47551: UNION
47552: ST_TO_ADDR
47553: GO 47528
47555: POP
47556: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
47557: LD_ADDR_VAR 0 2
47561: PUSH
47562: LD_VAR 0 2
47566: PPUSH
47567: LD_INT 1
47569: PPUSH
47570: LD_VAR 0 4
47574: PUSH
47575: LD_VAR 0 5
47579: DIFF
47580: PPUSH
47581: CALL_OW 1
47585: ST_TO_ADDR
// exit ;
47586: GO 47588
// end ; end ;
47588: LD_VAR 0 2
47592: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
47593: LD_INT 0
47595: PPUSH
47596: PPUSH
47597: PPUSH
// if not mc_bases then
47598: LD_EXP 11
47602: NOT
47603: IFFALSE 47607
// exit ;
47605: GO 47713
// for i = 1 to mc_bases do
47607: LD_ADDR_VAR 0 2
47611: PUSH
47612: DOUBLE
47613: LD_INT 1
47615: DEC
47616: ST_TO_ADDR
47617: LD_EXP 11
47621: PUSH
47622: FOR_TO
47623: IFFALSE 47704
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47625: LD_ADDR_VAR 0 3
47629: PUSH
47630: LD_EXP 11
47634: PUSH
47635: LD_VAR 0 2
47639: ARRAY
47640: PPUSH
47641: LD_INT 21
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 24
47656: PUSH
47657: LD_INT 1000
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PPUSH
47672: CALL_OW 72
47676: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
47677: LD_ADDR_EXP 12
47681: PUSH
47682: LD_EXP 12
47686: PPUSH
47687: LD_VAR 0 2
47691: PPUSH
47692: LD_VAR 0 3
47696: PPUSH
47697: CALL_OW 1
47701: ST_TO_ADDR
// end ;
47702: GO 47622
47704: POP
47705: POP
// RaiseSailEvent ( 101 ) ;
47706: LD_INT 101
47708: PPUSH
47709: CALL_OW 427
// end ;
47713: LD_VAR 0 1
47717: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
47718: LD_INT 0
47720: PPUSH
47721: PPUSH
47722: PPUSH
47723: PPUSH
47724: PPUSH
47725: PPUSH
47726: PPUSH
// if not mc_bases then
47727: LD_EXP 11
47731: NOT
47732: IFFALSE 47736
// exit ;
47734: GO 48298
// for i = 1 to mc_bases do
47736: LD_ADDR_VAR 0 2
47740: PUSH
47741: DOUBLE
47742: LD_INT 1
47744: DEC
47745: ST_TO_ADDR
47746: LD_EXP 11
47750: PUSH
47751: FOR_TO
47752: IFFALSE 48289
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
47754: LD_ADDR_VAR 0 5
47758: PUSH
47759: LD_EXP 11
47763: PUSH
47764: LD_VAR 0 2
47768: ARRAY
47769: PUSH
47770: LD_EXP 40
47774: PUSH
47775: LD_VAR 0 2
47779: ARRAY
47780: UNION
47781: PPUSH
47782: LD_INT 21
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 54
47800: PUSH
47801: EMPTY
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: LD_INT 24
47813: PUSH
47814: LD_INT 800
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PPUSH
47834: CALL_OW 72
47838: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
47839: LD_ADDR_VAR 0 6
47843: PUSH
47844: LD_EXP 11
47848: PUSH
47849: LD_VAR 0 2
47853: ARRAY
47854: PPUSH
47855: LD_INT 21
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: LD_INT 54
47873: PUSH
47874: EMPTY
47875: LIST
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: LD_INT 24
47886: PUSH
47887: LD_INT 250
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PPUSH
47907: CALL_OW 72
47911: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
47912: LD_ADDR_VAR 0 7
47916: PUSH
47917: LD_VAR 0 5
47921: PUSH
47922: LD_VAR 0 6
47926: DIFF
47927: ST_TO_ADDR
// if not need_heal_1 then
47928: LD_VAR 0 6
47932: NOT
47933: IFFALSE 47966
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
47935: LD_ADDR_EXP 14
47939: PUSH
47940: LD_EXP 14
47944: PPUSH
47945: LD_VAR 0 2
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PPUSH
47957: EMPTY
47958: PPUSH
47959: CALL 8049 0 3
47963: ST_TO_ADDR
47964: GO 48036
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
47966: LD_ADDR_EXP 14
47970: PUSH
47971: LD_EXP 14
47975: PPUSH
47976: LD_VAR 0 2
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PPUSH
47988: LD_EXP 14
47992: PUSH
47993: LD_VAR 0 2
47997: ARRAY
47998: PUSH
47999: LD_INT 1
48001: ARRAY
48002: PPUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 24
48008: PUSH
48009: LD_INT 1000
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PPUSH
48020: CALL_OW 72
48024: PUSH
48025: LD_VAR 0 6
48029: UNION
48030: PPUSH
48031: CALL 8049 0 3
48035: ST_TO_ADDR
// if not need_heal_2 then
48036: LD_VAR 0 7
48040: NOT
48041: IFFALSE 48074
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
48043: LD_ADDR_EXP 14
48047: PUSH
48048: LD_EXP 14
48052: PPUSH
48053: LD_VAR 0 2
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PPUSH
48065: EMPTY
48066: PPUSH
48067: CALL 8049 0 3
48071: ST_TO_ADDR
48072: GO 48106
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
48074: LD_ADDR_EXP 14
48078: PUSH
48079: LD_EXP 14
48083: PPUSH
48084: LD_VAR 0 2
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PPUSH
48096: LD_VAR 0 7
48100: PPUSH
48101: CALL 8049 0 3
48105: ST_TO_ADDR
// if need_heal_2 then
48106: LD_VAR 0 7
48110: IFFALSE 48271
// for j in need_heal_2 do
48112: LD_ADDR_VAR 0 3
48116: PUSH
48117: LD_VAR 0 7
48121: PUSH
48122: FOR_IN
48123: IFFALSE 48269
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48125: LD_ADDR_VAR 0 5
48129: PUSH
48130: LD_EXP 11
48134: PUSH
48135: LD_VAR 0 2
48139: ARRAY
48140: PPUSH
48141: LD_INT 2
48143: PUSH
48144: LD_INT 30
48146: PUSH
48147: LD_INT 6
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 30
48156: PUSH
48157: LD_INT 7
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 30
48166: PUSH
48167: LD_INT 8
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 30
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 30
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: PPUSH
48202: CALL_OW 72
48206: ST_TO_ADDR
// if tmp then
48207: LD_VAR 0 5
48211: IFFALSE 48267
// begin k := NearestUnitToUnit ( tmp , j ) ;
48213: LD_ADDR_VAR 0 4
48217: PUSH
48218: LD_VAR 0 5
48222: PPUSH
48223: LD_VAR 0 3
48227: PPUSH
48228: CALL_OW 74
48232: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
48233: LD_VAR 0 3
48237: PPUSH
48238: LD_VAR 0 4
48242: PPUSH
48243: CALL_OW 296
48247: PUSH
48248: LD_INT 5
48250: GREATER
48251: IFFALSE 48267
// ComMoveUnit ( j , k ) ;
48253: LD_VAR 0 3
48257: PPUSH
48258: LD_VAR 0 4
48262: PPUSH
48263: CALL_OW 112
// end ; end ;
48267: GO 48122
48269: POP
48270: POP
// if not need_heal_1 and not need_heal_2 then
48271: LD_VAR 0 6
48275: NOT
48276: PUSH
48277: LD_VAR 0 7
48281: NOT
48282: AND
48283: IFFALSE 48287
// continue ;
48285: GO 47751
// end ;
48287: GO 47751
48289: POP
48290: POP
// RaiseSailEvent ( 102 ) ;
48291: LD_INT 102
48293: PPUSH
48294: CALL_OW 427
// end ;
48298: LD_VAR 0 1
48302: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
48303: LD_INT 0
48305: PPUSH
48306: PPUSH
48307: PPUSH
48308: PPUSH
48309: PPUSH
48310: PPUSH
48311: PPUSH
48312: PPUSH
// if not mc_bases then
48313: LD_EXP 11
48317: NOT
48318: IFFALSE 48322
// exit ;
48320: GO 49157
// for i = 1 to mc_bases do
48322: LD_ADDR_VAR 0 2
48326: PUSH
48327: DOUBLE
48328: LD_INT 1
48330: DEC
48331: ST_TO_ADDR
48332: LD_EXP 11
48336: PUSH
48337: FOR_TO
48338: IFFALSE 49155
// begin if not mc_building_need_repair [ i ] then
48340: LD_EXP 12
48344: PUSH
48345: LD_VAR 0 2
48349: ARRAY
48350: NOT
48351: IFFALSE 48525
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
48353: LD_ADDR_VAR 0 6
48357: PUSH
48358: LD_EXP 30
48362: PUSH
48363: LD_VAR 0 2
48367: ARRAY
48368: PPUSH
48369: LD_INT 3
48371: PUSH
48372: LD_INT 24
48374: PUSH
48375: LD_INT 1000
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 34
48391: PUSH
48392: LD_INT 13
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 34
48401: PUSH
48402: LD_INT 52
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PPUSH
48418: CALL_OW 72
48422: ST_TO_ADDR
// if cranes then
48423: LD_VAR 0 6
48427: IFFALSE 48489
// for j in cranes do
48429: LD_ADDR_VAR 0 3
48433: PUSH
48434: LD_VAR 0 6
48438: PUSH
48439: FOR_IN
48440: IFFALSE 48487
// if not IsInArea ( j , mc_parking [ i ] ) then
48442: LD_VAR 0 3
48446: PPUSH
48447: LD_EXP 35
48451: PUSH
48452: LD_VAR 0 2
48456: ARRAY
48457: PPUSH
48458: CALL_OW 308
48462: NOT
48463: IFFALSE 48485
// ComMoveToArea ( j , mc_parking [ i ] ) ;
48465: LD_VAR 0 3
48469: PPUSH
48470: LD_EXP 35
48474: PUSH
48475: LD_VAR 0 2
48479: ARRAY
48480: PPUSH
48481: CALL_OW 113
48485: GO 48439
48487: POP
48488: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48489: LD_ADDR_EXP 13
48493: PUSH
48494: LD_EXP 13
48498: PPUSH
48499: LD_VAR 0 2
48503: PPUSH
48504: EMPTY
48505: PPUSH
48506: CALL_OW 1
48510: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48511: LD_VAR 0 2
48515: PPUSH
48516: LD_INT 101
48518: PPUSH
48519: CALL 43426 0 2
// continue ;
48523: GO 48337
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48525: LD_ADDR_EXP 17
48529: PUSH
48530: LD_EXP 17
48534: PPUSH
48535: LD_VAR 0 2
48539: PPUSH
48540: EMPTY
48541: PPUSH
48542: CALL_OW 1
48546: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48547: LD_VAR 0 2
48551: PPUSH
48552: LD_INT 103
48554: PPUSH
48555: CALL 43426 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
48559: LD_ADDR_VAR 0 5
48563: PUSH
48564: LD_EXP 11
48568: PUSH
48569: LD_VAR 0 2
48573: ARRAY
48574: PUSH
48575: LD_EXP 40
48579: PUSH
48580: LD_VAR 0 2
48584: ARRAY
48585: UNION
48586: PPUSH
48587: LD_INT 2
48589: PUSH
48590: LD_INT 25
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 25
48602: PUSH
48603: LD_INT 16
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: PPUSH
48618: CALL_OW 72
48622: PUSH
48623: LD_EXP 14
48627: PUSH
48628: LD_VAR 0 2
48632: ARRAY
48633: PUSH
48634: LD_INT 1
48636: ARRAY
48637: PUSH
48638: LD_EXP 14
48642: PUSH
48643: LD_VAR 0 2
48647: ARRAY
48648: PUSH
48649: LD_INT 2
48651: ARRAY
48652: UNION
48653: DIFF
48654: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
48655: LD_ADDR_VAR 0 6
48659: PUSH
48660: LD_EXP 30
48664: PUSH
48665: LD_VAR 0 2
48669: ARRAY
48670: PPUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 34
48676: PUSH
48677: LD_INT 13
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 34
48686: PUSH
48687: LD_INT 52
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: PPUSH
48699: CALL_OW 72
48703: ST_TO_ADDR
// if cranes then
48704: LD_VAR 0 6
48708: IFFALSE 48844
// begin for j in cranes do
48710: LD_ADDR_VAR 0 3
48714: PUSH
48715: LD_VAR 0 6
48719: PUSH
48720: FOR_IN
48721: IFFALSE 48842
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
48723: LD_VAR 0 3
48727: PPUSH
48728: CALL_OW 256
48732: PUSH
48733: LD_INT 500
48735: GREATEREQUAL
48736: PUSH
48737: LD_VAR 0 3
48741: PPUSH
48742: CALL_OW 314
48746: NOT
48747: AND
48748: IFFALSE 48782
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
48750: LD_VAR 0 3
48754: PPUSH
48755: LD_EXP 12
48759: PUSH
48760: LD_VAR 0 2
48764: ARRAY
48765: PPUSH
48766: LD_VAR 0 3
48770: PPUSH
48771: CALL_OW 74
48775: PPUSH
48776: CALL_OW 130
48780: GO 48840
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
48782: LD_VAR 0 3
48786: PPUSH
48787: CALL_OW 256
48791: PUSH
48792: LD_INT 500
48794: LESS
48795: PUSH
48796: LD_VAR 0 3
48800: PPUSH
48801: LD_EXP 35
48805: PUSH
48806: LD_VAR 0 2
48810: ARRAY
48811: PPUSH
48812: CALL_OW 308
48816: NOT
48817: AND
48818: IFFALSE 48840
// ComMoveToArea ( j , mc_parking [ i ] ) ;
48820: LD_VAR 0 3
48824: PPUSH
48825: LD_EXP 35
48829: PUSH
48830: LD_VAR 0 2
48834: ARRAY
48835: PPUSH
48836: CALL_OW 113
48840: GO 48720
48842: POP
48843: POP
// end ; if tmp > 3 then
48844: LD_VAR 0 5
48848: PUSH
48849: LD_INT 3
48851: GREATER
48852: IFFALSE 48872
// tmp := ShrinkArray ( tmp , 4 ) ;
48854: LD_ADDR_VAR 0 5
48858: PUSH
48859: LD_VAR 0 5
48863: PPUSH
48864: LD_INT 4
48866: PPUSH
48867: CALL 39275 0 2
48871: ST_TO_ADDR
// if not tmp then
48872: LD_VAR 0 5
48876: NOT
48877: IFFALSE 48881
// continue ;
48879: GO 48337
// for j in tmp do
48881: LD_ADDR_VAR 0 3
48885: PUSH
48886: LD_VAR 0 5
48890: PUSH
48891: FOR_IN
48892: IFFALSE 49151
// begin if IsInUnit ( j ) then
48894: LD_VAR 0 3
48898: PPUSH
48899: CALL_OW 310
48903: IFFALSE 48914
// ComExitBuilding ( j ) ;
48905: LD_VAR 0 3
48909: PPUSH
48910: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48914: LD_VAR 0 3
48918: PUSH
48919: LD_EXP 13
48923: PUSH
48924: LD_VAR 0 2
48928: ARRAY
48929: IN
48930: NOT
48931: IFFALSE 48989
// begin SetTag ( j , 101 ) ;
48933: LD_VAR 0 3
48937: PPUSH
48938: LD_INT 101
48940: PPUSH
48941: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48945: LD_ADDR_EXP 13
48949: PUSH
48950: LD_EXP 13
48954: PPUSH
48955: LD_VAR 0 2
48959: PUSH
48960: LD_EXP 13
48964: PUSH
48965: LD_VAR 0 2
48969: ARRAY
48970: PUSH
48971: LD_INT 1
48973: PLUS
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PPUSH
48979: LD_VAR 0 3
48983: PPUSH
48984: CALL 8049 0 3
48988: ST_TO_ADDR
// end ; wait ( 1 ) ;
48989: LD_INT 1
48991: PPUSH
48992: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
48996: LD_ADDR_VAR 0 7
49000: PUSH
49001: LD_EXP 12
49005: PUSH
49006: LD_VAR 0 2
49010: ARRAY
49011: ST_TO_ADDR
// if mc_scan [ i ] then
49012: LD_EXP 34
49016: PUSH
49017: LD_VAR 0 2
49021: ARRAY
49022: IFFALSE 49084
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
49024: LD_ADDR_VAR 0 7
49028: PUSH
49029: LD_EXP 12
49033: PUSH
49034: LD_VAR 0 2
49038: ARRAY
49039: PPUSH
49040: LD_INT 3
49042: PUSH
49043: LD_INT 30
49045: PUSH
49046: LD_INT 32
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 30
49055: PUSH
49056: LD_INT 33
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 30
49065: PUSH
49066: LD_INT 31
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: PPUSH
49079: CALL_OW 72
49083: ST_TO_ADDR
// if not to_repair_tmp then
49084: LD_VAR 0 7
49088: NOT
49089: IFFALSE 49093
// continue ;
49091: GO 48891
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
49093: LD_ADDR_VAR 0 8
49097: PUSH
49098: LD_VAR 0 7
49102: PPUSH
49103: LD_VAR 0 3
49107: PPUSH
49108: CALL_OW 74
49112: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
49113: LD_VAR 0 8
49117: PPUSH
49118: LD_INT 16
49120: PPUSH
49121: CALL 10642 0 2
49125: PUSH
49126: LD_INT 4
49128: ARRAY
49129: PUSH
49130: LD_INT 5
49132: LESS
49133: IFFALSE 49149
// ComRepairBuilding ( j , to_repair ) ;
49135: LD_VAR 0 3
49139: PPUSH
49140: LD_VAR 0 8
49144: PPUSH
49145: CALL_OW 130
// end ;
49149: GO 48891
49151: POP
49152: POP
// end ;
49153: GO 48337
49155: POP
49156: POP
// end ;
49157: LD_VAR 0 1
49161: RET
// export function MC_Heal ; var i , j , tmp ; begin
49162: LD_INT 0
49164: PPUSH
49165: PPUSH
49166: PPUSH
49167: PPUSH
// if not mc_bases then
49168: LD_EXP 11
49172: NOT
49173: IFFALSE 49177
// exit ;
49175: GO 49579
// for i = 1 to mc_bases do
49177: LD_ADDR_VAR 0 2
49181: PUSH
49182: DOUBLE
49183: LD_INT 1
49185: DEC
49186: ST_TO_ADDR
49187: LD_EXP 11
49191: PUSH
49192: FOR_TO
49193: IFFALSE 49577
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
49195: LD_EXP 14
49199: PUSH
49200: LD_VAR 0 2
49204: ARRAY
49205: PUSH
49206: LD_INT 1
49208: ARRAY
49209: NOT
49210: PUSH
49211: LD_EXP 14
49215: PUSH
49216: LD_VAR 0 2
49220: ARRAY
49221: PUSH
49222: LD_INT 2
49224: ARRAY
49225: NOT
49226: AND
49227: IFFALSE 49265
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
49229: LD_ADDR_EXP 15
49233: PUSH
49234: LD_EXP 15
49238: PPUSH
49239: LD_VAR 0 2
49243: PPUSH
49244: EMPTY
49245: PPUSH
49246: CALL_OW 1
49250: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
49251: LD_VAR 0 2
49255: PPUSH
49256: LD_INT 102
49258: PPUSH
49259: CALL 43426 0 2
// continue ;
49263: GO 49192
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
49265: LD_ADDR_VAR 0 4
49269: PUSH
49270: LD_EXP 11
49274: PUSH
49275: LD_VAR 0 2
49279: ARRAY
49280: PPUSH
49281: LD_INT 25
49283: PUSH
49284: LD_INT 4
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PPUSH
49291: CALL_OW 72
49295: ST_TO_ADDR
// if not tmp then
49296: LD_VAR 0 4
49300: NOT
49301: IFFALSE 49305
// continue ;
49303: GO 49192
// if mc_taming [ i ] then
49305: LD_EXP 42
49309: PUSH
49310: LD_VAR 0 2
49314: ARRAY
49315: IFFALSE 49339
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
49317: LD_ADDR_EXP 42
49321: PUSH
49322: LD_EXP 42
49326: PPUSH
49327: LD_VAR 0 2
49331: PPUSH
49332: EMPTY
49333: PPUSH
49334: CALL_OW 1
49338: ST_TO_ADDR
// for j in tmp do
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: LD_VAR 0 4
49348: PUSH
49349: FOR_IN
49350: IFFALSE 49573
// begin if IsInUnit ( j ) then
49352: LD_VAR 0 3
49356: PPUSH
49357: CALL_OW 310
49361: IFFALSE 49372
// ComExitBuilding ( j ) ;
49363: LD_VAR 0 3
49367: PPUSH
49368: CALL_OW 122
// if not j in mc_healers [ i ] then
49372: LD_VAR 0 3
49376: PUSH
49377: LD_EXP 15
49381: PUSH
49382: LD_VAR 0 2
49386: ARRAY
49387: IN
49388: NOT
49389: IFFALSE 49435
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
49391: LD_ADDR_EXP 15
49395: PUSH
49396: LD_EXP 15
49400: PPUSH
49401: LD_VAR 0 2
49405: PUSH
49406: LD_EXP 15
49410: PUSH
49411: LD_VAR 0 2
49415: ARRAY
49416: PUSH
49417: LD_INT 1
49419: PLUS
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PPUSH
49425: LD_VAR 0 3
49429: PPUSH
49430: CALL 8049 0 3
49434: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
49435: LD_VAR 0 3
49439: PPUSH
49440: CALL_OW 110
49444: PUSH
49445: LD_INT 102
49447: NONEQUAL
49448: IFFALSE 49462
// SetTag ( j , 102 ) ;
49450: LD_VAR 0 3
49454: PPUSH
49455: LD_INT 102
49457: PPUSH
49458: CALL_OW 109
// Wait ( 3 ) ;
49462: LD_INT 3
49464: PPUSH
49465: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
49469: LD_EXP 14
49473: PUSH
49474: LD_VAR 0 2
49478: ARRAY
49479: PUSH
49480: LD_INT 1
49482: ARRAY
49483: IFFALSE 49515
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
49485: LD_VAR 0 3
49489: PPUSH
49490: LD_EXP 14
49494: PUSH
49495: LD_VAR 0 2
49499: ARRAY
49500: PUSH
49501: LD_INT 1
49503: ARRAY
49504: PUSH
49505: LD_INT 1
49507: ARRAY
49508: PPUSH
49509: CALL_OW 128
49513: GO 49571
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
49515: LD_VAR 0 3
49519: PPUSH
49520: CALL_OW 314
49524: NOT
49525: PUSH
49526: LD_EXP 14
49530: PUSH
49531: LD_VAR 0 2
49535: ARRAY
49536: PUSH
49537: LD_INT 2
49539: ARRAY
49540: AND
49541: IFFALSE 49571
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
49543: LD_VAR 0 3
49547: PPUSH
49548: LD_EXP 14
49552: PUSH
49553: LD_VAR 0 2
49557: ARRAY
49558: PUSH
49559: LD_INT 2
49561: ARRAY
49562: PUSH
49563: LD_INT 1
49565: ARRAY
49566: PPUSH
49567: CALL_OW 128
// end ;
49571: GO 49349
49573: POP
49574: POP
// end ;
49575: GO 49192
49577: POP
49578: POP
// end ;
49579: LD_VAR 0 1
49583: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
49584: LD_INT 0
49586: PPUSH
49587: PPUSH
49588: PPUSH
49589: PPUSH
49590: PPUSH
// if not mc_bases then
49591: LD_EXP 11
49595: NOT
49596: IFFALSE 49600
// exit ;
49598: GO 50743
// for i = 1 to mc_bases do
49600: LD_ADDR_VAR 0 2
49604: PUSH
49605: DOUBLE
49606: LD_INT 1
49608: DEC
49609: ST_TO_ADDR
49610: LD_EXP 11
49614: PUSH
49615: FOR_TO
49616: IFFALSE 50741
// begin if mc_scan [ i ] then
49618: LD_EXP 34
49622: PUSH
49623: LD_VAR 0 2
49627: ARRAY
49628: IFFALSE 49632
// continue ;
49630: GO 49615
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
49632: LD_EXP 16
49636: PUSH
49637: LD_VAR 0 2
49641: ARRAY
49642: NOT
49643: PUSH
49644: LD_EXP 18
49648: PUSH
49649: LD_VAR 0 2
49653: ARRAY
49654: NOT
49655: AND
49656: PUSH
49657: LD_EXP 17
49661: PUSH
49662: LD_VAR 0 2
49666: ARRAY
49667: AND
49668: IFFALSE 49706
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
49670: LD_ADDR_EXP 17
49674: PUSH
49675: LD_EXP 17
49679: PPUSH
49680: LD_VAR 0 2
49684: PPUSH
49685: EMPTY
49686: PPUSH
49687: CALL_OW 1
49691: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49692: LD_VAR 0 2
49696: PPUSH
49697: LD_INT 103
49699: PPUSH
49700: CALL 43426 0 2
// continue ;
49704: GO 49615
// end ; if mc_construct_list [ i ] then
49706: LD_EXP 18
49710: PUSH
49711: LD_VAR 0 2
49715: ARRAY
49716: IFFALSE 49936
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49718: LD_ADDR_VAR 0 4
49722: PUSH
49723: LD_EXP 11
49727: PUSH
49728: LD_VAR 0 2
49732: ARRAY
49733: PPUSH
49734: LD_INT 25
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PPUSH
49744: CALL_OW 72
49748: PUSH
49749: LD_EXP 13
49753: PUSH
49754: LD_VAR 0 2
49758: ARRAY
49759: DIFF
49760: ST_TO_ADDR
// if not tmp then
49761: LD_VAR 0 4
49765: NOT
49766: IFFALSE 49770
// continue ;
49768: GO 49615
// for j in tmp do
49770: LD_ADDR_VAR 0 3
49774: PUSH
49775: LD_VAR 0 4
49779: PUSH
49780: FOR_IN
49781: IFFALSE 49932
// begin if not mc_builders [ i ] then
49783: LD_EXP 17
49787: PUSH
49788: LD_VAR 0 2
49792: ARRAY
49793: NOT
49794: IFFALSE 49852
// begin SetTag ( j , 103 ) ;
49796: LD_VAR 0 3
49800: PPUSH
49801: LD_INT 103
49803: PPUSH
49804: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49808: LD_ADDR_EXP 17
49812: PUSH
49813: LD_EXP 17
49817: PPUSH
49818: LD_VAR 0 2
49822: PUSH
49823: LD_EXP 17
49827: PUSH
49828: LD_VAR 0 2
49832: ARRAY
49833: PUSH
49834: LD_INT 1
49836: PLUS
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PPUSH
49842: LD_VAR 0 3
49846: PPUSH
49847: CALL 8049 0 3
49851: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49852: LD_VAR 0 3
49856: PPUSH
49857: CALL_OW 310
49861: IFFALSE 49872
// ComExitBuilding ( j ) ;
49863: LD_VAR 0 3
49867: PPUSH
49868: CALL_OW 122
// wait ( 3 ) ;
49872: LD_INT 3
49874: PPUSH
49875: CALL_OW 67
// if not mc_construct_list [ i ] then
49879: LD_EXP 18
49883: PUSH
49884: LD_VAR 0 2
49888: ARRAY
49889: NOT
49890: IFFALSE 49894
// break ;
49892: GO 49932
// if not HasTask ( j ) then
49894: LD_VAR 0 3
49898: PPUSH
49899: CALL_OW 314
49903: NOT
49904: IFFALSE 49930
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49906: LD_VAR 0 3
49910: PPUSH
49911: LD_EXP 18
49915: PUSH
49916: LD_VAR 0 2
49920: ARRAY
49921: PUSH
49922: LD_INT 1
49924: ARRAY
49925: PPUSH
49926: CALL 10900 0 2
// end ;
49930: GO 49780
49932: POP
49933: POP
// end else
49934: GO 50739
// if mc_build_list [ i ] then
49936: LD_EXP 16
49940: PUSH
49941: LD_VAR 0 2
49945: ARRAY
49946: IFFALSE 50739
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49948: LD_ADDR_VAR 0 5
49952: PUSH
49953: LD_EXP 11
49957: PUSH
49958: LD_VAR 0 2
49962: ARRAY
49963: PPUSH
49964: LD_INT 2
49966: PUSH
49967: LD_INT 30
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 30
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: LIST
49991: PPUSH
49992: CALL_OW 72
49996: ST_TO_ADDR
// if depot then
49997: LD_VAR 0 5
50001: IFFALSE 50019
// depot := depot [ 1 ] else
50003: LD_ADDR_VAR 0 5
50007: PUSH
50008: LD_VAR 0 5
50012: PUSH
50013: LD_INT 1
50015: ARRAY
50016: ST_TO_ADDR
50017: GO 50027
// depot := 0 ;
50019: LD_ADDR_VAR 0 5
50023: PUSH
50024: LD_INT 0
50026: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
50027: LD_EXP 16
50031: PUSH
50032: LD_VAR 0 2
50036: ARRAY
50037: PUSH
50038: LD_INT 1
50040: ARRAY
50041: PUSH
50042: LD_INT 1
50044: ARRAY
50045: PPUSH
50046: CALL 10730 0 1
50050: PUSH
50051: LD_EXP 11
50055: PUSH
50056: LD_VAR 0 2
50060: ARRAY
50061: PPUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 30
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 30
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: LIST
50089: PPUSH
50090: CALL_OW 72
50094: NOT
50095: AND
50096: IFFALSE 50201
// begin for j = 1 to mc_build_list [ i ] do
50098: LD_ADDR_VAR 0 3
50102: PUSH
50103: DOUBLE
50104: LD_INT 1
50106: DEC
50107: ST_TO_ADDR
50108: LD_EXP 16
50112: PUSH
50113: LD_VAR 0 2
50117: ARRAY
50118: PUSH
50119: FOR_TO
50120: IFFALSE 50199
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
50122: LD_EXP 16
50126: PUSH
50127: LD_VAR 0 2
50131: ARRAY
50132: PUSH
50133: LD_VAR 0 3
50137: ARRAY
50138: PUSH
50139: LD_INT 1
50141: ARRAY
50142: PUSH
50143: LD_INT 2
50145: EQUAL
50146: IFFALSE 50197
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
50148: LD_ADDR_EXP 16
50152: PUSH
50153: LD_EXP 16
50157: PPUSH
50158: LD_VAR 0 2
50162: PPUSH
50163: LD_EXP 16
50167: PUSH
50168: LD_VAR 0 2
50172: ARRAY
50173: PPUSH
50174: LD_VAR 0 3
50178: PPUSH
50179: LD_INT 1
50181: PPUSH
50182: LD_INT 0
50184: PPUSH
50185: CALL 7467 0 4
50189: PPUSH
50190: CALL_OW 1
50194: ST_TO_ADDR
// break ;
50195: GO 50199
// end ;
50197: GO 50119
50199: POP
50200: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
50201: LD_EXP 16
50205: PUSH
50206: LD_VAR 0 2
50210: ARRAY
50211: PUSH
50212: LD_INT 1
50214: ARRAY
50215: PUSH
50216: LD_INT 1
50218: ARRAY
50219: PUSH
50220: LD_INT 0
50222: EQUAL
50223: PUSH
50224: LD_VAR 0 5
50228: PUSH
50229: LD_VAR 0 5
50233: PPUSH
50234: LD_EXP 16
50238: PUSH
50239: LD_VAR 0 2
50243: ARRAY
50244: PUSH
50245: LD_INT 1
50247: ARRAY
50248: PUSH
50249: LD_INT 1
50251: ARRAY
50252: PPUSH
50253: LD_EXP 16
50257: PUSH
50258: LD_VAR 0 2
50262: ARRAY
50263: PUSH
50264: LD_INT 1
50266: ARRAY
50267: PUSH
50268: LD_INT 2
50270: ARRAY
50271: PPUSH
50272: LD_EXP 16
50276: PUSH
50277: LD_VAR 0 2
50281: ARRAY
50282: PUSH
50283: LD_INT 1
50285: ARRAY
50286: PUSH
50287: LD_INT 3
50289: ARRAY
50290: PPUSH
50291: LD_EXP 16
50295: PUSH
50296: LD_VAR 0 2
50300: ARRAY
50301: PUSH
50302: LD_INT 1
50304: ARRAY
50305: PUSH
50306: LD_INT 4
50308: ARRAY
50309: PPUSH
50310: CALL 15464 0 5
50314: AND
50315: OR
50316: IFFALSE 50597
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
50318: LD_ADDR_VAR 0 4
50322: PUSH
50323: LD_EXP 11
50327: PUSH
50328: LD_VAR 0 2
50332: ARRAY
50333: PPUSH
50334: LD_INT 25
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PPUSH
50344: CALL_OW 72
50348: PUSH
50349: LD_EXP 13
50353: PUSH
50354: LD_VAR 0 2
50358: ARRAY
50359: DIFF
50360: ST_TO_ADDR
// if not tmp then
50361: LD_VAR 0 4
50365: NOT
50366: IFFALSE 50370
// continue ;
50368: GO 49615
// for j in tmp do
50370: LD_ADDR_VAR 0 3
50374: PUSH
50375: LD_VAR 0 4
50379: PUSH
50380: FOR_IN
50381: IFFALSE 50593
// begin if not mc_builders [ i ] then
50383: LD_EXP 17
50387: PUSH
50388: LD_VAR 0 2
50392: ARRAY
50393: NOT
50394: IFFALSE 50452
// begin SetTag ( j , 103 ) ;
50396: LD_VAR 0 3
50400: PPUSH
50401: LD_INT 103
50403: PPUSH
50404: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
50408: LD_ADDR_EXP 17
50412: PUSH
50413: LD_EXP 17
50417: PPUSH
50418: LD_VAR 0 2
50422: PUSH
50423: LD_EXP 17
50427: PUSH
50428: LD_VAR 0 2
50432: ARRAY
50433: PUSH
50434: LD_INT 1
50436: PLUS
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PPUSH
50442: LD_VAR 0 3
50446: PPUSH
50447: CALL 8049 0 3
50451: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
50452: LD_VAR 0 3
50456: PPUSH
50457: CALL_OW 310
50461: IFFALSE 50472
// ComExitBuilding ( j ) ;
50463: LD_VAR 0 3
50467: PPUSH
50468: CALL_OW 122
// wait ( 3 ) ;
50472: LD_INT 3
50474: PPUSH
50475: CALL_OW 67
// if not mc_build_list [ i ] then
50479: LD_EXP 16
50483: PUSH
50484: LD_VAR 0 2
50488: ARRAY
50489: NOT
50490: IFFALSE 50494
// break ;
50492: GO 50593
// if not HasTask ( j ) then
50494: LD_VAR 0 3
50498: PPUSH
50499: CALL_OW 314
50503: NOT
50504: IFFALSE 50591
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
50506: LD_VAR 0 3
50510: PPUSH
50511: LD_EXP 16
50515: PUSH
50516: LD_VAR 0 2
50520: ARRAY
50521: PUSH
50522: LD_INT 1
50524: ARRAY
50525: PUSH
50526: LD_INT 1
50528: ARRAY
50529: PPUSH
50530: LD_EXP 16
50534: PUSH
50535: LD_VAR 0 2
50539: ARRAY
50540: PUSH
50541: LD_INT 1
50543: ARRAY
50544: PUSH
50545: LD_INT 2
50547: ARRAY
50548: PPUSH
50549: LD_EXP 16
50553: PUSH
50554: LD_VAR 0 2
50558: ARRAY
50559: PUSH
50560: LD_INT 1
50562: ARRAY
50563: PUSH
50564: LD_INT 3
50566: ARRAY
50567: PPUSH
50568: LD_EXP 16
50572: PUSH
50573: LD_VAR 0 2
50577: ARRAY
50578: PUSH
50579: LD_INT 1
50581: ARRAY
50582: PUSH
50583: LD_INT 4
50585: ARRAY
50586: PPUSH
50587: CALL_OW 145
// end ;
50591: GO 50380
50593: POP
50594: POP
// end else
50595: GO 50739
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
50597: LD_EXP 11
50601: PUSH
50602: LD_VAR 0 2
50606: ARRAY
50607: PPUSH
50608: LD_EXP 16
50612: PUSH
50613: LD_VAR 0 2
50617: ARRAY
50618: PUSH
50619: LD_INT 1
50621: ARRAY
50622: PUSH
50623: LD_INT 1
50625: ARRAY
50626: PPUSH
50627: LD_EXP 16
50631: PUSH
50632: LD_VAR 0 2
50636: ARRAY
50637: PUSH
50638: LD_INT 1
50640: ARRAY
50641: PUSH
50642: LD_INT 2
50644: ARRAY
50645: PPUSH
50646: LD_EXP 16
50650: PUSH
50651: LD_VAR 0 2
50655: ARRAY
50656: PUSH
50657: LD_INT 1
50659: ARRAY
50660: PUSH
50661: LD_INT 3
50663: ARRAY
50664: PPUSH
50665: LD_EXP 16
50669: PUSH
50670: LD_VAR 0 2
50674: ARRAY
50675: PUSH
50676: LD_INT 1
50678: ARRAY
50679: PUSH
50680: LD_INT 4
50682: ARRAY
50683: PPUSH
50684: CALL 14800 0 5
50688: NOT
50689: IFFALSE 50739
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
50691: LD_ADDR_EXP 16
50695: PUSH
50696: LD_EXP 16
50700: PPUSH
50701: LD_VAR 0 2
50705: PPUSH
50706: LD_EXP 16
50710: PUSH
50711: LD_VAR 0 2
50715: ARRAY
50716: PPUSH
50717: LD_INT 1
50719: PPUSH
50720: LD_INT 1
50722: NEG
50723: PPUSH
50724: LD_INT 0
50726: PPUSH
50727: CALL 7467 0 4
50731: PPUSH
50732: CALL_OW 1
50736: ST_TO_ADDR
// continue ;
50737: GO 49615
// end ; end ; end ;
50739: GO 49615
50741: POP
50742: POP
// end ;
50743: LD_VAR 0 1
50747: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
50748: LD_INT 0
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
// if not mc_bases then
50756: LD_EXP 11
50760: NOT
50761: IFFALSE 50765
// exit ;
50763: GO 51192
// for i = 1 to mc_bases do
50765: LD_ADDR_VAR 0 2
50769: PUSH
50770: DOUBLE
50771: LD_INT 1
50773: DEC
50774: ST_TO_ADDR
50775: LD_EXP 11
50779: PUSH
50780: FOR_TO
50781: IFFALSE 51190
// begin tmp := mc_build_upgrade [ i ] ;
50783: LD_ADDR_VAR 0 4
50787: PUSH
50788: LD_EXP 43
50792: PUSH
50793: LD_VAR 0 2
50797: ARRAY
50798: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
50799: LD_ADDR_VAR 0 6
50803: PUSH
50804: LD_EXP 44
50808: PUSH
50809: LD_VAR 0 2
50813: ARRAY
50814: PPUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 30
50820: PUSH
50821: LD_INT 6
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 30
50830: PUSH
50831: LD_INT 7
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: PPUSH
50843: CALL_OW 72
50847: ST_TO_ADDR
// if not tmp and not lab then
50848: LD_VAR 0 4
50852: NOT
50853: PUSH
50854: LD_VAR 0 6
50858: NOT
50859: AND
50860: IFFALSE 50864
// continue ;
50862: GO 50780
// if tmp then
50864: LD_VAR 0 4
50868: IFFALSE 50988
// for j in tmp do
50870: LD_ADDR_VAR 0 3
50874: PUSH
50875: LD_VAR 0 4
50879: PUSH
50880: FOR_IN
50881: IFFALSE 50986
// begin if UpgradeCost ( j ) then
50883: LD_VAR 0 3
50887: PPUSH
50888: CALL 14460 0 1
50892: IFFALSE 50984
// begin ComUpgrade ( j ) ;
50894: LD_VAR 0 3
50898: PPUSH
50899: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
50903: LD_ADDR_EXP 43
50907: PUSH
50908: LD_EXP 43
50912: PPUSH
50913: LD_VAR 0 2
50917: PPUSH
50918: LD_EXP 43
50922: PUSH
50923: LD_VAR 0 2
50927: ARRAY
50928: PUSH
50929: LD_VAR 0 3
50933: DIFF
50934: PPUSH
50935: CALL_OW 1
50939: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
50940: LD_ADDR_EXP 18
50944: PUSH
50945: LD_EXP 18
50949: PPUSH
50950: LD_VAR 0 2
50954: PUSH
50955: LD_EXP 18
50959: PUSH
50960: LD_VAR 0 2
50964: ARRAY
50965: PUSH
50966: LD_INT 1
50968: PLUS
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PPUSH
50974: LD_VAR 0 3
50978: PPUSH
50979: CALL 8049 0 3
50983: ST_TO_ADDR
// end ; end ;
50984: GO 50880
50986: POP
50987: POP
// if not lab or not mc_lab_upgrade [ i ] then
50988: LD_VAR 0 6
50992: NOT
50993: PUSH
50994: LD_EXP 45
50998: PUSH
50999: LD_VAR 0 2
51003: ARRAY
51004: NOT
51005: OR
51006: IFFALSE 51010
// continue ;
51008: GO 50780
// for j in lab do
51010: LD_ADDR_VAR 0 3
51014: PUSH
51015: LD_VAR 0 6
51019: PUSH
51020: FOR_IN
51021: IFFALSE 51186
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
51023: LD_VAR 0 3
51027: PPUSH
51028: CALL_OW 266
51032: PUSH
51033: LD_INT 6
51035: PUSH
51036: LD_INT 7
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: IN
51043: PUSH
51044: LD_VAR 0 3
51048: PPUSH
51049: CALL_OW 461
51053: PUSH
51054: LD_INT 1
51056: NONEQUAL
51057: AND
51058: IFFALSE 51184
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
51060: LD_VAR 0 3
51064: PPUSH
51065: LD_EXP 45
51069: PUSH
51070: LD_VAR 0 2
51074: ARRAY
51075: PUSH
51076: LD_INT 1
51078: ARRAY
51079: PPUSH
51080: CALL 14665 0 2
51084: IFFALSE 51184
// begin ComCancel ( j ) ;
51086: LD_VAR 0 3
51090: PPUSH
51091: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
51095: LD_VAR 0 3
51099: PPUSH
51100: LD_EXP 45
51104: PUSH
51105: LD_VAR 0 2
51109: ARRAY
51110: PUSH
51111: LD_INT 1
51113: ARRAY
51114: PPUSH
51115: CALL_OW 207
// if not j in mc_construct_list [ i ] then
51119: LD_VAR 0 3
51123: PUSH
51124: LD_EXP 18
51128: PUSH
51129: LD_VAR 0 2
51133: ARRAY
51134: IN
51135: NOT
51136: IFFALSE 51182
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
51138: LD_ADDR_EXP 18
51142: PUSH
51143: LD_EXP 18
51147: PPUSH
51148: LD_VAR 0 2
51152: PUSH
51153: LD_EXP 18
51157: PUSH
51158: LD_VAR 0 2
51162: ARRAY
51163: PUSH
51164: LD_INT 1
51166: PLUS
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PPUSH
51172: LD_VAR 0 3
51176: PPUSH
51177: CALL 8049 0 3
51181: ST_TO_ADDR
// break ;
51182: GO 51186
// end ; end ; end ;
51184: GO 51020
51186: POP
51187: POP
// end ;
51188: GO 50780
51190: POP
51191: POP
// end ;
51192: LD_VAR 0 1
51196: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
51197: LD_INT 0
51199: PPUSH
51200: PPUSH
51201: PPUSH
51202: PPUSH
51203: PPUSH
51204: PPUSH
51205: PPUSH
51206: PPUSH
51207: PPUSH
// if not mc_bases then
51208: LD_EXP 11
51212: NOT
51213: IFFALSE 51217
// exit ;
51215: GO 51622
// for i = 1 to mc_bases do
51217: LD_ADDR_VAR 0 2
51221: PUSH
51222: DOUBLE
51223: LD_INT 1
51225: DEC
51226: ST_TO_ADDR
51227: LD_EXP 11
51231: PUSH
51232: FOR_TO
51233: IFFALSE 51620
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
51235: LD_EXP 19
51239: PUSH
51240: LD_VAR 0 2
51244: ARRAY
51245: NOT
51246: PUSH
51247: LD_EXP 11
51251: PUSH
51252: LD_VAR 0 2
51256: ARRAY
51257: PPUSH
51258: LD_INT 30
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PPUSH
51268: CALL_OW 72
51272: NOT
51273: OR
51274: IFFALSE 51278
// continue ;
51276: GO 51232
// busy := false ;
51278: LD_ADDR_VAR 0 8
51282: PUSH
51283: LD_INT 0
51285: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51286: LD_ADDR_VAR 0 4
51290: PUSH
51291: LD_EXP 11
51295: PUSH
51296: LD_VAR 0 2
51300: ARRAY
51301: PPUSH
51302: LD_INT 30
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PPUSH
51312: CALL_OW 72
51316: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
51317: LD_ADDR_VAR 0 6
51321: PUSH
51322: LD_EXP 19
51326: PUSH
51327: LD_VAR 0 2
51331: ARRAY
51332: PPUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 30
51338: PUSH
51339: LD_INT 32
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 30
51348: PUSH
51349: LD_INT 33
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: PPUSH
51361: CALL_OW 72
51365: ST_TO_ADDR
// if not t then
51366: LD_VAR 0 6
51370: NOT
51371: IFFALSE 51375
// continue ;
51373: GO 51232
// for j in tmp do
51375: LD_ADDR_VAR 0 3
51379: PUSH
51380: LD_VAR 0 4
51384: PUSH
51385: FOR_IN
51386: IFFALSE 51416
// if not BuildingStatus ( j ) = bs_idle then
51388: LD_VAR 0 3
51392: PPUSH
51393: CALL_OW 461
51397: PUSH
51398: LD_INT 2
51400: EQUAL
51401: NOT
51402: IFFALSE 51414
// begin busy := true ;
51404: LD_ADDR_VAR 0 8
51408: PUSH
51409: LD_INT 1
51411: ST_TO_ADDR
// break ;
51412: GO 51416
// end ;
51414: GO 51385
51416: POP
51417: POP
// if busy then
51418: LD_VAR 0 8
51422: IFFALSE 51426
// continue ;
51424: GO 51232
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
51426: LD_ADDR_VAR 0 7
51430: PUSH
51431: LD_VAR 0 6
51435: PPUSH
51436: LD_INT 35
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PPUSH
51446: CALL_OW 72
51450: ST_TO_ADDR
// if tw then
51451: LD_VAR 0 7
51455: IFFALSE 51532
// begin tw := tw [ 1 ] ;
51457: LD_ADDR_VAR 0 7
51461: PUSH
51462: LD_VAR 0 7
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
51471: LD_ADDR_VAR 0 9
51475: PUSH
51476: LD_VAR 0 7
51480: PPUSH
51481: LD_EXP 36
51485: PUSH
51486: LD_VAR 0 2
51490: ARRAY
51491: PPUSH
51492: CALL 13019 0 2
51496: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
51497: LD_EXP 50
51501: PUSH
51502: LD_VAR 0 2
51506: ARRAY
51507: IFFALSE 51530
// if not weapon in mc_allowed_tower_weapons [ i ] then
51509: LD_VAR 0 9
51513: PUSH
51514: LD_EXP 50
51518: PUSH
51519: LD_VAR 0 2
51523: ARRAY
51524: IN
51525: NOT
51526: IFFALSE 51530
// continue ;
51528: GO 51232
// end else
51530: GO 51595
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
51532: LD_ADDR_VAR 0 5
51536: PUSH
51537: LD_EXP 19
51541: PUSH
51542: LD_VAR 0 2
51546: ARRAY
51547: PPUSH
51548: LD_VAR 0 4
51552: PPUSH
51553: CALL 38521 0 2
51557: ST_TO_ADDR
// if not tmp2 then
51558: LD_VAR 0 5
51562: NOT
51563: IFFALSE 51567
// continue ;
51565: GO 51232
// tw := tmp2 [ 1 ] ;
51567: LD_ADDR_VAR 0 7
51571: PUSH
51572: LD_VAR 0 5
51576: PUSH
51577: LD_INT 1
51579: ARRAY
51580: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
51581: LD_ADDR_VAR 0 9
51585: PUSH
51586: LD_VAR 0 5
51590: PUSH
51591: LD_INT 2
51593: ARRAY
51594: ST_TO_ADDR
// end ; if not weapon then
51595: LD_VAR 0 9
51599: NOT
51600: IFFALSE 51604
// continue ;
51602: GO 51232
// ComPlaceWeapon ( tw , weapon ) ;
51604: LD_VAR 0 7
51608: PPUSH
51609: LD_VAR 0 9
51613: PPUSH
51614: CALL_OW 148
// end ;
51618: GO 51232
51620: POP
51621: POP
// end ;
51622: LD_VAR 0 1
51626: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
51627: LD_INT 0
51629: PPUSH
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
// if not mc_bases then
51635: LD_EXP 11
51639: NOT
51640: IFFALSE 51644
// exit ;
51642: GO 52420
// for i = 1 to mc_bases do
51644: LD_ADDR_VAR 0 2
51648: PUSH
51649: DOUBLE
51650: LD_INT 1
51652: DEC
51653: ST_TO_ADDR
51654: LD_EXP 11
51658: PUSH
51659: FOR_TO
51660: IFFALSE 52418
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
51662: LD_EXP 24
51666: PUSH
51667: LD_VAR 0 2
51671: ARRAY
51672: NOT
51673: PUSH
51674: LD_EXP 24
51678: PUSH
51679: LD_VAR 0 2
51683: ARRAY
51684: PUSH
51685: LD_EXP 25
51689: PUSH
51690: LD_VAR 0 2
51694: ARRAY
51695: EQUAL
51696: OR
51697: PUSH
51698: LD_EXP 34
51702: PUSH
51703: LD_VAR 0 2
51707: ARRAY
51708: OR
51709: IFFALSE 51713
// continue ;
51711: GO 51659
// if mc_miners [ i ] then
51713: LD_EXP 25
51717: PUSH
51718: LD_VAR 0 2
51722: ARRAY
51723: IFFALSE 52105
// begin for j = mc_miners [ i ] downto 1 do
51725: LD_ADDR_VAR 0 3
51729: PUSH
51730: DOUBLE
51731: LD_EXP 25
51735: PUSH
51736: LD_VAR 0 2
51740: ARRAY
51741: INC
51742: ST_TO_ADDR
51743: LD_INT 1
51745: PUSH
51746: FOR_DOWNTO
51747: IFFALSE 52103
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
51749: LD_EXP 25
51753: PUSH
51754: LD_VAR 0 2
51758: ARRAY
51759: PUSH
51760: LD_VAR 0 3
51764: ARRAY
51765: PPUSH
51766: CALL_OW 301
51770: PUSH
51771: LD_EXP 25
51775: PUSH
51776: LD_VAR 0 2
51780: ARRAY
51781: PUSH
51782: LD_VAR 0 3
51786: ARRAY
51787: PPUSH
51788: CALL_OW 257
51792: PUSH
51793: LD_INT 1
51795: NONEQUAL
51796: OR
51797: IFFALSE 51860
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51799: LD_ADDR_VAR 0 5
51803: PUSH
51804: LD_EXP 25
51808: PUSH
51809: LD_VAR 0 2
51813: ARRAY
51814: PUSH
51815: LD_EXP 25
51819: PUSH
51820: LD_VAR 0 2
51824: ARRAY
51825: PUSH
51826: LD_VAR 0 3
51830: ARRAY
51831: DIFF
51832: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51833: LD_ADDR_EXP 25
51837: PUSH
51838: LD_EXP 25
51842: PPUSH
51843: LD_VAR 0 2
51847: PPUSH
51848: LD_VAR 0 5
51852: PPUSH
51853: CALL_OW 1
51857: ST_TO_ADDR
// continue ;
51858: GO 51746
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
51860: LD_EXP 25
51864: PUSH
51865: LD_VAR 0 2
51869: ARRAY
51870: PUSH
51871: LD_VAR 0 3
51875: ARRAY
51876: PPUSH
51877: CALL_OW 257
51881: PUSH
51882: LD_INT 1
51884: EQUAL
51885: PUSH
51886: LD_EXP 25
51890: PUSH
51891: LD_VAR 0 2
51895: ARRAY
51896: PUSH
51897: LD_VAR 0 3
51901: ARRAY
51902: PPUSH
51903: CALL_OW 459
51907: NOT
51908: AND
51909: PUSH
51910: LD_EXP 25
51914: PUSH
51915: LD_VAR 0 2
51919: ARRAY
51920: PUSH
51921: LD_VAR 0 3
51925: ARRAY
51926: PPUSH
51927: CALL_OW 314
51931: NOT
51932: AND
51933: IFFALSE 52101
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51935: LD_EXP 25
51939: PUSH
51940: LD_VAR 0 2
51944: ARRAY
51945: PUSH
51946: LD_VAR 0 3
51950: ARRAY
51951: PPUSH
51952: CALL_OW 310
51956: IFFALSE 51979
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51958: LD_EXP 25
51962: PUSH
51963: LD_VAR 0 2
51967: ARRAY
51968: PUSH
51969: LD_VAR 0 3
51973: ARRAY
51974: PPUSH
51975: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51979: LD_EXP 25
51983: PUSH
51984: LD_VAR 0 2
51988: ARRAY
51989: PUSH
51990: LD_VAR 0 3
51994: ARRAY
51995: PPUSH
51996: CALL_OW 314
52000: NOT
52001: IFFALSE 52101
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
52003: LD_EXP 25
52007: PUSH
52008: LD_VAR 0 2
52012: ARRAY
52013: PUSH
52014: LD_VAR 0 3
52018: ARRAY
52019: PPUSH
52020: LD_EXP 24
52024: PUSH
52025: LD_VAR 0 2
52029: ARRAY
52030: PUSH
52031: LD_VAR 0 3
52035: PUSH
52036: LD_EXP 24
52040: PUSH
52041: LD_VAR 0 2
52045: ARRAY
52046: MOD
52047: PUSH
52048: LD_INT 1
52050: PLUS
52051: ARRAY
52052: PUSH
52053: LD_INT 1
52055: ARRAY
52056: PPUSH
52057: LD_EXP 24
52061: PUSH
52062: LD_VAR 0 2
52066: ARRAY
52067: PUSH
52068: LD_VAR 0 3
52072: PUSH
52073: LD_EXP 24
52077: PUSH
52078: LD_VAR 0 2
52082: ARRAY
52083: MOD
52084: PUSH
52085: LD_INT 1
52087: PLUS
52088: ARRAY
52089: PUSH
52090: LD_INT 2
52092: ARRAY
52093: PPUSH
52094: LD_INT 0
52096: PPUSH
52097: CALL_OW 193
// end ; end ;
52101: GO 51746
52103: POP
52104: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
52105: LD_ADDR_VAR 0 5
52109: PUSH
52110: LD_EXP 11
52114: PUSH
52115: LD_VAR 0 2
52119: ARRAY
52120: PPUSH
52121: LD_INT 2
52123: PUSH
52124: LD_INT 30
52126: PUSH
52127: LD_INT 4
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 30
52136: PUSH
52137: LD_INT 5
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 30
52146: PUSH
52147: LD_INT 32
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: PPUSH
52160: CALL_OW 72
52164: ST_TO_ADDR
// if not tmp then
52165: LD_VAR 0 5
52169: NOT
52170: IFFALSE 52174
// continue ;
52172: GO 51659
// list := [ ] ;
52174: LD_ADDR_VAR 0 6
52178: PUSH
52179: EMPTY
52180: ST_TO_ADDR
// for j in tmp do
52181: LD_ADDR_VAR 0 3
52185: PUSH
52186: LD_VAR 0 5
52190: PUSH
52191: FOR_IN
52192: IFFALSE 52261
// begin for k in UnitsInside ( j ) do
52194: LD_ADDR_VAR 0 4
52198: PUSH
52199: LD_VAR 0 3
52203: PPUSH
52204: CALL_OW 313
52208: PUSH
52209: FOR_IN
52210: IFFALSE 52257
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
52212: LD_VAR 0 4
52216: PPUSH
52217: CALL_OW 257
52221: PUSH
52222: LD_INT 1
52224: EQUAL
52225: PUSH
52226: LD_VAR 0 4
52230: PPUSH
52231: CALL_OW 459
52235: NOT
52236: AND
52237: IFFALSE 52255
// list := list ^ k ;
52239: LD_ADDR_VAR 0 6
52243: PUSH
52244: LD_VAR 0 6
52248: PUSH
52249: LD_VAR 0 4
52253: ADD
52254: ST_TO_ADDR
52255: GO 52209
52257: POP
52258: POP
// end ;
52259: GO 52191
52261: POP
52262: POP
// list := list diff mc_miners [ i ] ;
52263: LD_ADDR_VAR 0 6
52267: PUSH
52268: LD_VAR 0 6
52272: PUSH
52273: LD_EXP 25
52277: PUSH
52278: LD_VAR 0 2
52282: ARRAY
52283: DIFF
52284: ST_TO_ADDR
// if not list then
52285: LD_VAR 0 6
52289: NOT
52290: IFFALSE 52294
// continue ;
52292: GO 51659
// k := mc_mines [ i ] - mc_miners [ i ] ;
52294: LD_ADDR_VAR 0 4
52298: PUSH
52299: LD_EXP 24
52303: PUSH
52304: LD_VAR 0 2
52308: ARRAY
52309: PUSH
52310: LD_EXP 25
52314: PUSH
52315: LD_VAR 0 2
52319: ARRAY
52320: MINUS
52321: ST_TO_ADDR
// if k > list then
52322: LD_VAR 0 4
52326: PUSH
52327: LD_VAR 0 6
52331: GREATER
52332: IFFALSE 52344
// k := list ;
52334: LD_ADDR_VAR 0 4
52338: PUSH
52339: LD_VAR 0 6
52343: ST_TO_ADDR
// for j = 1 to k do
52344: LD_ADDR_VAR 0 3
52348: PUSH
52349: DOUBLE
52350: LD_INT 1
52352: DEC
52353: ST_TO_ADDR
52354: LD_VAR 0 4
52358: PUSH
52359: FOR_TO
52360: IFFALSE 52414
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
52362: LD_ADDR_EXP 25
52366: PUSH
52367: LD_EXP 25
52371: PPUSH
52372: LD_VAR 0 2
52376: PUSH
52377: LD_EXP 25
52381: PUSH
52382: LD_VAR 0 2
52386: ARRAY
52387: PUSH
52388: LD_INT 1
52390: PLUS
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PPUSH
52396: LD_VAR 0 6
52400: PUSH
52401: LD_VAR 0 3
52405: ARRAY
52406: PPUSH
52407: CALL 8049 0 3
52411: ST_TO_ADDR
52412: GO 52359
52414: POP
52415: POP
// end ;
52416: GO 51659
52418: POP
52419: POP
// end ;
52420: LD_VAR 0 1
52424: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
52425: LD_INT 0
52427: PPUSH
52428: PPUSH
52429: PPUSH
52430: PPUSH
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
// if not mc_bases then
52437: LD_EXP 11
52441: NOT
52442: IFFALSE 52446
// exit ;
52444: GO 54196
// for i = 1 to mc_bases do
52446: LD_ADDR_VAR 0 2
52450: PUSH
52451: DOUBLE
52452: LD_INT 1
52454: DEC
52455: ST_TO_ADDR
52456: LD_EXP 11
52460: PUSH
52461: FOR_TO
52462: IFFALSE 54194
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
52464: LD_EXP 11
52468: PUSH
52469: LD_VAR 0 2
52473: ARRAY
52474: NOT
52475: PUSH
52476: LD_EXP 18
52480: PUSH
52481: LD_VAR 0 2
52485: ARRAY
52486: OR
52487: IFFALSE 52491
// continue ;
52489: GO 52461
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
52491: LD_EXP 27
52495: PUSH
52496: LD_VAR 0 2
52500: ARRAY
52501: NOT
52502: PUSH
52503: LD_EXP 28
52507: PUSH
52508: LD_VAR 0 2
52512: ARRAY
52513: AND
52514: IFFALSE 52552
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52516: LD_ADDR_EXP 28
52520: PUSH
52521: LD_EXP 28
52525: PPUSH
52526: LD_VAR 0 2
52530: PPUSH
52531: EMPTY
52532: PPUSH
52533: CALL_OW 1
52537: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
52538: LD_VAR 0 2
52542: PPUSH
52543: LD_INT 107
52545: PPUSH
52546: CALL 43426 0 2
// continue ;
52550: GO 52461
// end ; target := [ ] ;
52552: LD_ADDR_VAR 0 6
52556: PUSH
52557: EMPTY
52558: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
52559: LD_ADDR_VAR 0 3
52563: PUSH
52564: DOUBLE
52565: LD_EXP 27
52569: PUSH
52570: LD_VAR 0 2
52574: ARRAY
52575: INC
52576: ST_TO_ADDR
52577: LD_INT 1
52579: PUSH
52580: FOR_DOWNTO
52581: IFFALSE 52841
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
52583: LD_EXP 27
52587: PUSH
52588: LD_VAR 0 2
52592: ARRAY
52593: PUSH
52594: LD_VAR 0 3
52598: ARRAY
52599: PUSH
52600: LD_INT 2
52602: ARRAY
52603: PPUSH
52604: LD_EXP 27
52608: PUSH
52609: LD_VAR 0 2
52613: ARRAY
52614: PUSH
52615: LD_VAR 0 3
52619: ARRAY
52620: PUSH
52621: LD_INT 3
52623: ARRAY
52624: PPUSH
52625: CALL_OW 488
52629: PUSH
52630: LD_EXP 27
52634: PUSH
52635: LD_VAR 0 2
52639: ARRAY
52640: PUSH
52641: LD_VAR 0 3
52645: ARRAY
52646: PUSH
52647: LD_INT 2
52649: ARRAY
52650: PPUSH
52651: LD_EXP 27
52655: PUSH
52656: LD_VAR 0 2
52660: ARRAY
52661: PUSH
52662: LD_VAR 0 3
52666: ARRAY
52667: PUSH
52668: LD_INT 3
52670: ARRAY
52671: PPUSH
52672: CALL_OW 284
52676: PUSH
52677: LD_INT 0
52679: EQUAL
52680: AND
52681: IFFALSE 52736
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
52683: LD_ADDR_VAR 0 5
52687: PUSH
52688: LD_EXP 27
52692: PUSH
52693: LD_VAR 0 2
52697: ARRAY
52698: PPUSH
52699: LD_VAR 0 3
52703: PPUSH
52704: CALL_OW 3
52708: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52709: LD_ADDR_EXP 27
52713: PUSH
52714: LD_EXP 27
52718: PPUSH
52719: LD_VAR 0 2
52723: PPUSH
52724: LD_VAR 0 5
52728: PPUSH
52729: CALL_OW 1
52733: ST_TO_ADDR
// continue ;
52734: GO 52580
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
52736: LD_EXP 11
52740: PUSH
52741: LD_VAR 0 2
52745: ARRAY
52746: PUSH
52747: LD_INT 1
52749: ARRAY
52750: PPUSH
52751: CALL_OW 255
52755: PPUSH
52756: LD_EXP 27
52760: PUSH
52761: LD_VAR 0 2
52765: ARRAY
52766: PUSH
52767: LD_VAR 0 3
52771: ARRAY
52772: PUSH
52773: LD_INT 2
52775: ARRAY
52776: PPUSH
52777: LD_EXP 27
52781: PUSH
52782: LD_VAR 0 2
52786: ARRAY
52787: PUSH
52788: LD_VAR 0 3
52792: ARRAY
52793: PUSH
52794: LD_INT 3
52796: ARRAY
52797: PPUSH
52798: LD_INT 30
52800: PPUSH
52801: CALL 8945 0 4
52805: PUSH
52806: LD_INT 4
52808: ARRAY
52809: PUSH
52810: LD_INT 0
52812: EQUAL
52813: IFFALSE 52839
// begin target := mc_crates [ i ] [ j ] ;
52815: LD_ADDR_VAR 0 6
52819: PUSH
52820: LD_EXP 27
52824: PUSH
52825: LD_VAR 0 2
52829: ARRAY
52830: PUSH
52831: LD_VAR 0 3
52835: ARRAY
52836: ST_TO_ADDR
// break ;
52837: GO 52841
// end ; end ;
52839: GO 52580
52841: POP
52842: POP
// if not target then
52843: LD_VAR 0 6
52847: NOT
52848: IFFALSE 52852
// continue ;
52850: GO 52461
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
52852: LD_ADDR_VAR 0 7
52856: PUSH
52857: LD_EXP 30
52861: PUSH
52862: LD_VAR 0 2
52866: ARRAY
52867: PPUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: LD_INT 58
52876: PUSH
52877: EMPTY
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 61
52886: PUSH
52887: EMPTY
52888: LIST
52889: PUSH
52890: LD_INT 33
52892: PUSH
52893: LD_INT 5
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 33
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 34
52922: PUSH
52923: LD_INT 32
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 34
52932: PUSH
52933: LD_INT 51
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 34
52942: PUSH
52943: LD_INT 12
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PPUSH
52960: CALL_OW 72
52964: ST_TO_ADDR
// if not cargo then
52965: LD_VAR 0 7
52969: NOT
52970: IFFALSE 53613
// begin if mc_crates_collector [ i ] < 5 then
52972: LD_EXP 28
52976: PUSH
52977: LD_VAR 0 2
52981: ARRAY
52982: PUSH
52983: LD_INT 5
52985: LESS
52986: IFFALSE 53352
// begin if mc_ape [ i ] then
52988: LD_EXP 40
52992: PUSH
52993: LD_VAR 0 2
52997: ARRAY
52998: IFFALSE 53045
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
53000: LD_ADDR_VAR 0 5
53004: PUSH
53005: LD_EXP 40
53009: PUSH
53010: LD_VAR 0 2
53014: ARRAY
53015: PPUSH
53016: LD_INT 25
53018: PUSH
53019: LD_INT 16
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 24
53028: PUSH
53029: LD_INT 750
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PPUSH
53040: CALL_OW 72
53044: ST_TO_ADDR
// if not tmp then
53045: LD_VAR 0 5
53049: NOT
53050: IFFALSE 53097
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
53052: LD_ADDR_VAR 0 5
53056: PUSH
53057: LD_EXP 11
53061: PUSH
53062: LD_VAR 0 2
53066: ARRAY
53067: PPUSH
53068: LD_INT 25
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 24
53080: PUSH
53081: LD_INT 750
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PPUSH
53092: CALL_OW 72
53096: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
53097: LD_EXP 40
53101: PUSH
53102: LD_VAR 0 2
53106: ARRAY
53107: PUSH
53108: LD_EXP 11
53112: PUSH
53113: LD_VAR 0 2
53117: ARRAY
53118: PPUSH
53119: LD_INT 25
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 24
53131: PUSH
53132: LD_INT 750
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PPUSH
53143: CALL_OW 72
53147: AND
53148: PUSH
53149: LD_VAR 0 5
53153: PUSH
53154: LD_INT 5
53156: LESS
53157: AND
53158: IFFALSE 53240
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
53160: LD_ADDR_VAR 0 3
53164: PUSH
53165: LD_EXP 11
53169: PUSH
53170: LD_VAR 0 2
53174: ARRAY
53175: PPUSH
53176: LD_INT 25
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 24
53188: PUSH
53189: LD_INT 750
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PPUSH
53200: CALL_OW 72
53204: PUSH
53205: FOR_IN
53206: IFFALSE 53238
// begin tmp := tmp union j ;
53208: LD_ADDR_VAR 0 5
53212: PUSH
53213: LD_VAR 0 5
53217: PUSH
53218: LD_VAR 0 3
53222: UNION
53223: ST_TO_ADDR
// if tmp >= 5 then
53224: LD_VAR 0 5
53228: PUSH
53229: LD_INT 5
53231: GREATEREQUAL
53232: IFFALSE 53236
// break ;
53234: GO 53238
// end ;
53236: GO 53205
53238: POP
53239: POP
// end ; if not tmp then
53240: LD_VAR 0 5
53244: NOT
53245: IFFALSE 53249
// continue ;
53247: GO 52461
// for j in tmp do
53249: LD_ADDR_VAR 0 3
53253: PUSH
53254: LD_VAR 0 5
53258: PUSH
53259: FOR_IN
53260: IFFALSE 53350
// if not GetTag ( j ) then
53262: LD_VAR 0 3
53266: PPUSH
53267: CALL_OW 110
53271: NOT
53272: IFFALSE 53348
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
53274: LD_ADDR_EXP 28
53278: PUSH
53279: LD_EXP 28
53283: PPUSH
53284: LD_VAR 0 2
53288: PUSH
53289: LD_EXP 28
53293: PUSH
53294: LD_VAR 0 2
53298: ARRAY
53299: PUSH
53300: LD_INT 1
53302: PLUS
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PPUSH
53308: LD_VAR 0 3
53312: PPUSH
53313: CALL 8049 0 3
53317: ST_TO_ADDR
// SetTag ( j , 107 ) ;
53318: LD_VAR 0 3
53322: PPUSH
53323: LD_INT 107
53325: PPUSH
53326: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
53330: LD_EXP 28
53334: PUSH
53335: LD_VAR 0 2
53339: ARRAY
53340: PUSH
53341: LD_INT 5
53343: GREATEREQUAL
53344: IFFALSE 53348
// break ;
53346: GO 53350
// end ;
53348: GO 53259
53350: POP
53351: POP
// end ; if mc_crates_collector [ i ] and target then
53352: LD_EXP 28
53356: PUSH
53357: LD_VAR 0 2
53361: ARRAY
53362: PUSH
53363: LD_VAR 0 6
53367: AND
53368: IFFALSE 53611
// begin if mc_crates_collector [ i ] < target [ 1 ] then
53370: LD_EXP 28
53374: PUSH
53375: LD_VAR 0 2
53379: ARRAY
53380: PUSH
53381: LD_VAR 0 6
53385: PUSH
53386: LD_INT 1
53388: ARRAY
53389: LESS
53390: IFFALSE 53410
// tmp := mc_crates_collector [ i ] else
53392: LD_ADDR_VAR 0 5
53396: PUSH
53397: LD_EXP 28
53401: PUSH
53402: LD_VAR 0 2
53406: ARRAY
53407: ST_TO_ADDR
53408: GO 53424
// tmp := target [ 1 ] ;
53410: LD_ADDR_VAR 0 5
53414: PUSH
53415: LD_VAR 0 6
53419: PUSH
53420: LD_INT 1
53422: ARRAY
53423: ST_TO_ADDR
// k := 0 ;
53424: LD_ADDR_VAR 0 4
53428: PUSH
53429: LD_INT 0
53431: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
53432: LD_ADDR_VAR 0 3
53436: PUSH
53437: LD_EXP 28
53441: PUSH
53442: LD_VAR 0 2
53446: ARRAY
53447: PUSH
53448: FOR_IN
53449: IFFALSE 53609
// begin k := k + 1 ;
53451: LD_ADDR_VAR 0 4
53455: PUSH
53456: LD_VAR 0 4
53460: PUSH
53461: LD_INT 1
53463: PLUS
53464: ST_TO_ADDR
// if k > tmp then
53465: LD_VAR 0 4
53469: PUSH
53470: LD_VAR 0 5
53474: GREATER
53475: IFFALSE 53479
// break ;
53477: GO 53609
// if not GetClass ( j ) in [ 2 , 16 ] then
53479: LD_VAR 0 3
53483: PPUSH
53484: CALL_OW 257
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 16
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: IN
53499: NOT
53500: IFFALSE 53553
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
53502: LD_ADDR_EXP 28
53506: PUSH
53507: LD_EXP 28
53511: PPUSH
53512: LD_VAR 0 2
53516: PPUSH
53517: LD_EXP 28
53521: PUSH
53522: LD_VAR 0 2
53526: ARRAY
53527: PUSH
53528: LD_VAR 0 3
53532: DIFF
53533: PPUSH
53534: CALL_OW 1
53538: ST_TO_ADDR
// SetTag ( j , 0 ) ;
53539: LD_VAR 0 3
53543: PPUSH
53544: LD_INT 0
53546: PPUSH
53547: CALL_OW 109
// continue ;
53551: GO 53448
// end ; if IsInUnit ( j ) then
53553: LD_VAR 0 3
53557: PPUSH
53558: CALL_OW 310
53562: IFFALSE 53573
// ComExitBuilding ( j ) ;
53564: LD_VAR 0 3
53568: PPUSH
53569: CALL_OW 122
// wait ( 3 ) ;
53573: LD_INT 3
53575: PPUSH
53576: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
53580: LD_VAR 0 3
53584: PPUSH
53585: LD_VAR 0 6
53589: PUSH
53590: LD_INT 2
53592: ARRAY
53593: PPUSH
53594: LD_VAR 0 6
53598: PUSH
53599: LD_INT 3
53601: ARRAY
53602: PPUSH
53603: CALL_OW 117
// end ;
53607: GO 53448
53609: POP
53610: POP
// end ; end else
53611: GO 54192
// begin for j in cargo do
53613: LD_ADDR_VAR 0 3
53617: PUSH
53618: LD_VAR 0 7
53622: PUSH
53623: FOR_IN
53624: IFFALSE 54190
// begin if GetTag ( j ) <> 0 then
53626: LD_VAR 0 3
53630: PPUSH
53631: CALL_OW 110
53635: PUSH
53636: LD_INT 0
53638: NONEQUAL
53639: IFFALSE 53643
// continue ;
53641: GO 53623
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
53643: LD_VAR 0 3
53647: PPUSH
53648: CALL_OW 256
53652: PUSH
53653: LD_INT 1000
53655: LESS
53656: PUSH
53657: LD_VAR 0 3
53661: PPUSH
53662: LD_EXP 35
53666: PUSH
53667: LD_VAR 0 2
53671: ARRAY
53672: PPUSH
53673: CALL_OW 308
53677: NOT
53678: AND
53679: IFFALSE 53701
// ComMoveToArea ( j , mc_parking [ i ] ) ;
53681: LD_VAR 0 3
53685: PPUSH
53686: LD_EXP 35
53690: PUSH
53691: LD_VAR 0 2
53695: ARRAY
53696: PPUSH
53697: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
53701: LD_VAR 0 3
53705: PPUSH
53706: CALL_OW 256
53710: PUSH
53711: LD_INT 1000
53713: LESS
53714: PUSH
53715: LD_VAR 0 3
53719: PPUSH
53720: LD_EXP 35
53724: PUSH
53725: LD_VAR 0 2
53729: ARRAY
53730: PPUSH
53731: CALL_OW 308
53735: AND
53736: IFFALSE 53740
// continue ;
53738: GO 53623
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
53740: LD_VAR 0 3
53744: PPUSH
53745: CALL_OW 262
53749: PUSH
53750: LD_INT 2
53752: EQUAL
53753: PUSH
53754: LD_VAR 0 3
53758: PPUSH
53759: CALL_OW 261
53763: PUSH
53764: LD_INT 15
53766: LESS
53767: AND
53768: IFFALSE 53772
// continue ;
53770: GO 53623
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
53772: LD_VAR 0 3
53776: PPUSH
53777: CALL_OW 262
53781: PUSH
53782: LD_INT 1
53784: EQUAL
53785: PUSH
53786: LD_VAR 0 3
53790: PPUSH
53791: CALL_OW 261
53795: PUSH
53796: LD_INT 10
53798: LESS
53799: AND
53800: IFFALSE 54129
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
53802: LD_ADDR_VAR 0 8
53806: PUSH
53807: LD_EXP 11
53811: PUSH
53812: LD_VAR 0 2
53816: ARRAY
53817: PPUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 30
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 30
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: PPUSH
53846: CALL_OW 72
53850: ST_TO_ADDR
// if not depot then
53851: LD_VAR 0 8
53855: NOT
53856: IFFALSE 53860
// continue ;
53858: GO 53623
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
53860: LD_VAR 0 3
53864: PPUSH
53865: LD_VAR 0 8
53869: PPUSH
53870: LD_VAR 0 3
53874: PPUSH
53875: CALL_OW 74
53879: PPUSH
53880: CALL_OW 296
53884: PUSH
53885: LD_INT 6
53887: LESS
53888: IFFALSE 53904
// SetFuel ( j , 100 ) else
53890: LD_VAR 0 3
53894: PPUSH
53895: LD_INT 100
53897: PPUSH
53898: CALL_OW 240
53902: GO 54129
// if GetFuel ( j ) = 0 then
53904: LD_VAR 0 3
53908: PPUSH
53909: CALL_OW 261
53913: PUSH
53914: LD_INT 0
53916: EQUAL
53917: IFFALSE 54129
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
53919: LD_ADDR_EXP 30
53923: PUSH
53924: LD_EXP 30
53928: PPUSH
53929: LD_VAR 0 2
53933: PPUSH
53934: LD_EXP 30
53938: PUSH
53939: LD_VAR 0 2
53943: ARRAY
53944: PUSH
53945: LD_VAR 0 3
53949: DIFF
53950: PPUSH
53951: CALL_OW 1
53955: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
53956: LD_VAR 0 3
53960: PPUSH
53961: CALL_OW 263
53965: PUSH
53966: LD_INT 1
53968: EQUAL
53969: IFFALSE 53985
// ComExitVehicle ( IsInUnit ( j ) ) ;
53971: LD_VAR 0 3
53975: PPUSH
53976: CALL_OW 310
53980: PPUSH
53981: CALL_OW 121
// if GetControl ( j ) = control_remote then
53985: LD_VAR 0 3
53989: PPUSH
53990: CALL_OW 263
53994: PUSH
53995: LD_INT 2
53997: EQUAL
53998: IFFALSE 54009
// ComUnlink ( j ) ;
54000: LD_VAR 0 3
54004: PPUSH
54005: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
54009: LD_ADDR_VAR 0 9
54013: PUSH
54014: LD_VAR 0 2
54018: PPUSH
54019: LD_INT 3
54021: PPUSH
54022: CALL 63482 0 2
54026: ST_TO_ADDR
// if fac then
54027: LD_VAR 0 9
54031: IFFALSE 54127
// begin for k in fac do
54033: LD_ADDR_VAR 0 4
54037: PUSH
54038: LD_VAR 0 9
54042: PUSH
54043: FOR_IN
54044: IFFALSE 54125
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
54046: LD_ADDR_VAR 0 10
54050: PUSH
54051: LD_VAR 0 9
54055: PPUSH
54056: LD_VAR 0 3
54060: PPUSH
54061: CALL_OW 265
54065: PPUSH
54066: LD_VAR 0 3
54070: PPUSH
54071: CALL_OW 262
54075: PPUSH
54076: LD_VAR 0 3
54080: PPUSH
54081: CALL_OW 263
54085: PPUSH
54086: LD_VAR 0 3
54090: PPUSH
54091: CALL_OW 264
54095: PPUSH
54096: CALL 5581 0 5
54100: ST_TO_ADDR
// if components then
54101: LD_VAR 0 10
54105: IFFALSE 54123
// begin MC_InsertProduceList ( i , components ) ;
54107: LD_VAR 0 2
54111: PPUSH
54112: LD_VAR 0 10
54116: PPUSH
54117: CALL 63027 0 2
// break ;
54121: GO 54125
// end ; end ;
54123: GO 54043
54125: POP
54126: POP
// end ; continue ;
54127: GO 53623
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
54129: LD_VAR 0 3
54133: PPUSH
54134: LD_INT 1
54136: PPUSH
54137: CALL_OW 289
54141: PUSH
54142: LD_INT 100
54144: LESS
54145: PUSH
54146: LD_VAR 0 3
54150: PPUSH
54151: CALL_OW 314
54155: NOT
54156: AND
54157: IFFALSE 54186
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
54159: LD_VAR 0 3
54163: PPUSH
54164: LD_VAR 0 6
54168: PUSH
54169: LD_INT 2
54171: ARRAY
54172: PPUSH
54173: LD_VAR 0 6
54177: PUSH
54178: LD_INT 3
54180: ARRAY
54181: PPUSH
54182: CALL_OW 117
// break ;
54186: GO 54190
// end ;
54188: GO 53623
54190: POP
54191: POP
// end ; end ;
54192: GO 52461
54194: POP
54195: POP
// end ;
54196: LD_VAR 0 1
54200: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
54201: LD_INT 0
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
// if not mc_bases then
54207: LD_EXP 11
54211: NOT
54212: IFFALSE 54216
// exit ;
54214: GO 54377
// for i = 1 to mc_bases do
54216: LD_ADDR_VAR 0 2
54220: PUSH
54221: DOUBLE
54222: LD_INT 1
54224: DEC
54225: ST_TO_ADDR
54226: LD_EXP 11
54230: PUSH
54231: FOR_TO
54232: IFFALSE 54375
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
54234: LD_ADDR_VAR 0 4
54238: PUSH
54239: LD_EXP 30
54243: PUSH
54244: LD_VAR 0 2
54248: ARRAY
54249: PUSH
54250: LD_EXP 33
54254: PUSH
54255: LD_VAR 0 2
54259: ARRAY
54260: UNION
54261: PPUSH
54262: LD_INT 33
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PPUSH
54272: CALL_OW 72
54276: ST_TO_ADDR
// if tmp then
54277: LD_VAR 0 4
54281: IFFALSE 54373
// for j in tmp do
54283: LD_ADDR_VAR 0 3
54287: PUSH
54288: LD_VAR 0 4
54292: PUSH
54293: FOR_IN
54294: IFFALSE 54371
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
54296: LD_VAR 0 3
54300: PPUSH
54301: CALL_OW 312
54305: NOT
54306: PUSH
54307: LD_VAR 0 3
54311: PPUSH
54312: CALL_OW 256
54316: PUSH
54317: LD_INT 250
54319: GREATEREQUAL
54320: AND
54321: IFFALSE 54334
// Connect ( j ) else
54323: LD_VAR 0 3
54327: PPUSH
54328: CALL 10982 0 1
54332: GO 54369
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
54334: LD_VAR 0 3
54338: PPUSH
54339: CALL_OW 256
54343: PUSH
54344: LD_INT 250
54346: LESS
54347: PUSH
54348: LD_VAR 0 3
54352: PPUSH
54353: CALL_OW 312
54357: AND
54358: IFFALSE 54369
// ComUnlink ( j ) ;
54360: LD_VAR 0 3
54364: PPUSH
54365: CALL_OW 136
54369: GO 54293
54371: POP
54372: POP
// end ;
54373: GO 54231
54375: POP
54376: POP
// end ;
54377: LD_VAR 0 1
54381: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
54382: LD_INT 0
54384: PPUSH
54385: PPUSH
54386: PPUSH
54387: PPUSH
54388: PPUSH
// if not mc_bases then
54389: LD_EXP 11
54393: NOT
54394: IFFALSE 54398
// exit ;
54396: GO 54843
// for i = 1 to mc_bases do
54398: LD_ADDR_VAR 0 2
54402: PUSH
54403: DOUBLE
54404: LD_INT 1
54406: DEC
54407: ST_TO_ADDR
54408: LD_EXP 11
54412: PUSH
54413: FOR_TO
54414: IFFALSE 54841
// begin if not mc_produce [ i ] then
54416: LD_EXP 32
54420: PUSH
54421: LD_VAR 0 2
54425: ARRAY
54426: NOT
54427: IFFALSE 54431
// continue ;
54429: GO 54413
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
54431: LD_ADDR_VAR 0 5
54435: PUSH
54436: LD_EXP 11
54440: PUSH
54441: LD_VAR 0 2
54445: ARRAY
54446: PPUSH
54447: LD_INT 30
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PPUSH
54457: CALL_OW 72
54461: ST_TO_ADDR
// if not fac then
54462: LD_VAR 0 5
54466: NOT
54467: IFFALSE 54471
// continue ;
54469: GO 54413
// for j in fac do
54471: LD_ADDR_VAR 0 3
54475: PUSH
54476: LD_VAR 0 5
54480: PUSH
54481: FOR_IN
54482: IFFALSE 54837
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
54484: LD_VAR 0 3
54488: PPUSH
54489: CALL_OW 461
54493: PUSH
54494: LD_INT 2
54496: NONEQUAL
54497: PUSH
54498: LD_VAR 0 3
54502: PPUSH
54503: LD_INT 15
54505: PPUSH
54506: CALL 10642 0 2
54510: PUSH
54511: LD_INT 4
54513: ARRAY
54514: OR
54515: IFFALSE 54519
// continue ;
54517: GO 54481
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
54519: LD_VAR 0 3
54523: PPUSH
54524: LD_EXP 32
54528: PUSH
54529: LD_VAR 0 2
54533: ARRAY
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PUSH
54539: LD_INT 1
54541: ARRAY
54542: PPUSH
54543: LD_EXP 32
54547: PUSH
54548: LD_VAR 0 2
54552: ARRAY
54553: PUSH
54554: LD_INT 1
54556: ARRAY
54557: PUSH
54558: LD_INT 2
54560: ARRAY
54561: PPUSH
54562: LD_EXP 32
54566: PUSH
54567: LD_VAR 0 2
54571: ARRAY
54572: PUSH
54573: LD_INT 1
54575: ARRAY
54576: PUSH
54577: LD_INT 3
54579: ARRAY
54580: PPUSH
54581: LD_EXP 32
54585: PUSH
54586: LD_VAR 0 2
54590: ARRAY
54591: PUSH
54592: LD_INT 1
54594: ARRAY
54595: PUSH
54596: LD_INT 4
54598: ARRAY
54599: PPUSH
54600: CALL_OW 448
54604: PUSH
54605: LD_VAR 0 3
54609: PPUSH
54610: LD_EXP 32
54614: PUSH
54615: LD_VAR 0 2
54619: ARRAY
54620: PUSH
54621: LD_INT 1
54623: ARRAY
54624: PUSH
54625: LD_INT 1
54627: ARRAY
54628: PUSH
54629: LD_EXP 32
54633: PUSH
54634: LD_VAR 0 2
54638: ARRAY
54639: PUSH
54640: LD_INT 1
54642: ARRAY
54643: PUSH
54644: LD_INT 2
54646: ARRAY
54647: PUSH
54648: LD_EXP 32
54652: PUSH
54653: LD_VAR 0 2
54657: ARRAY
54658: PUSH
54659: LD_INT 1
54661: ARRAY
54662: PUSH
54663: LD_INT 3
54665: ARRAY
54666: PUSH
54667: LD_EXP 32
54671: PUSH
54672: LD_VAR 0 2
54676: ARRAY
54677: PUSH
54678: LD_INT 1
54680: ARRAY
54681: PUSH
54682: LD_INT 4
54684: ARRAY
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: PPUSH
54692: CALL 14313 0 2
54696: AND
54697: IFFALSE 54835
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
54699: LD_VAR 0 3
54703: PPUSH
54704: LD_EXP 32
54708: PUSH
54709: LD_VAR 0 2
54713: ARRAY
54714: PUSH
54715: LD_INT 1
54717: ARRAY
54718: PUSH
54719: LD_INT 1
54721: ARRAY
54722: PPUSH
54723: LD_EXP 32
54727: PUSH
54728: LD_VAR 0 2
54732: ARRAY
54733: PUSH
54734: LD_INT 1
54736: ARRAY
54737: PUSH
54738: LD_INT 2
54740: ARRAY
54741: PPUSH
54742: LD_EXP 32
54746: PUSH
54747: LD_VAR 0 2
54751: ARRAY
54752: PUSH
54753: LD_INT 1
54755: ARRAY
54756: PUSH
54757: LD_INT 3
54759: ARRAY
54760: PPUSH
54761: LD_EXP 32
54765: PUSH
54766: LD_VAR 0 2
54770: ARRAY
54771: PUSH
54772: LD_INT 1
54774: ARRAY
54775: PUSH
54776: LD_INT 4
54778: ARRAY
54779: PPUSH
54780: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
54784: LD_ADDR_VAR 0 4
54788: PUSH
54789: LD_EXP 32
54793: PUSH
54794: LD_VAR 0 2
54798: ARRAY
54799: PPUSH
54800: LD_INT 1
54802: PPUSH
54803: CALL_OW 3
54807: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
54808: LD_ADDR_EXP 32
54812: PUSH
54813: LD_EXP 32
54817: PPUSH
54818: LD_VAR 0 2
54822: PPUSH
54823: LD_VAR 0 4
54827: PPUSH
54828: CALL_OW 1
54832: ST_TO_ADDR
// break ;
54833: GO 54837
// end ; end ;
54835: GO 54481
54837: POP
54838: POP
// end ;
54839: GO 54413
54841: POP
54842: POP
// end ;
54843: LD_VAR 0 1
54847: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
54848: LD_INT 0
54850: PPUSH
54851: PPUSH
54852: PPUSH
// if not mc_bases then
54853: LD_EXP 11
54857: NOT
54858: IFFALSE 54862
// exit ;
54860: GO 54951
// for i = 1 to mc_bases do
54862: LD_ADDR_VAR 0 2
54866: PUSH
54867: DOUBLE
54868: LD_INT 1
54870: DEC
54871: ST_TO_ADDR
54872: LD_EXP 11
54876: PUSH
54877: FOR_TO
54878: IFFALSE 54949
// begin if mc_attack [ i ] then
54880: LD_EXP 31
54884: PUSH
54885: LD_VAR 0 2
54889: ARRAY
54890: IFFALSE 54947
// begin tmp := mc_attack [ i ] [ 1 ] ;
54892: LD_ADDR_VAR 0 3
54896: PUSH
54897: LD_EXP 31
54901: PUSH
54902: LD_VAR 0 2
54906: ARRAY
54907: PUSH
54908: LD_INT 1
54910: ARRAY
54911: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
54912: LD_ADDR_EXP 31
54916: PUSH
54917: LD_EXP 31
54921: PPUSH
54922: LD_VAR 0 2
54926: PPUSH
54927: EMPTY
54928: PPUSH
54929: CALL_OW 1
54933: ST_TO_ADDR
// Attack ( tmp ) ;
54934: LD_VAR 0 3
54938: PPUSH
54939: CALL 69479 0 1
// exit ;
54943: POP
54944: POP
54945: GO 54951
// end ; end ;
54947: GO 54877
54949: POP
54950: POP
// end ;
54951: LD_VAR 0 1
54955: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
54956: LD_INT 0
54958: PPUSH
54959: PPUSH
54960: PPUSH
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
// if not mc_bases then
54965: LD_EXP 11
54969: NOT
54970: IFFALSE 54974
// exit ;
54972: GO 55556
// for i = 1 to mc_bases do
54974: LD_ADDR_VAR 0 2
54978: PUSH
54979: DOUBLE
54980: LD_INT 1
54982: DEC
54983: ST_TO_ADDR
54984: LD_EXP 11
54988: PUSH
54989: FOR_TO
54990: IFFALSE 55554
// begin if not mc_bases [ i ] then
54992: LD_EXP 11
54996: PUSH
54997: LD_VAR 0 2
55001: ARRAY
55002: NOT
55003: IFFALSE 55007
// continue ;
55005: GO 54989
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
55007: LD_ADDR_VAR 0 7
55011: PUSH
55012: LD_EXP 11
55016: PUSH
55017: LD_VAR 0 2
55021: ARRAY
55022: PUSH
55023: LD_INT 1
55025: ARRAY
55026: PPUSH
55027: CALL 4885 0 1
55031: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
55032: LD_ADDR_EXP 34
55036: PUSH
55037: LD_EXP 34
55041: PPUSH
55042: LD_VAR 0 2
55046: PPUSH
55047: LD_EXP 11
55051: PUSH
55052: LD_VAR 0 2
55056: ARRAY
55057: PUSH
55058: LD_INT 1
55060: ARRAY
55061: PPUSH
55062: CALL_OW 255
55066: PPUSH
55067: LD_EXP 36
55071: PUSH
55072: LD_VAR 0 2
55076: ARRAY
55077: PPUSH
55078: CALL 4850 0 2
55082: PPUSH
55083: CALL_OW 1
55087: ST_TO_ADDR
// if not mc_scan [ i ] then
55088: LD_EXP 34
55092: PUSH
55093: LD_VAR 0 2
55097: ARRAY
55098: NOT
55099: IFFALSE 55254
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
55101: LD_ADDR_VAR 0 4
55105: PUSH
55106: LD_EXP 11
55110: PUSH
55111: LD_VAR 0 2
55115: ARRAY
55116: PPUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 25
55122: PUSH
55123: LD_INT 5
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 25
55132: PUSH
55133: LD_INT 8
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 25
55142: PUSH
55143: LD_INT 9
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: PPUSH
55156: CALL_OW 72
55160: ST_TO_ADDR
// if not tmp then
55161: LD_VAR 0 4
55165: NOT
55166: IFFALSE 55170
// continue ;
55168: GO 54989
// for j in tmp do
55170: LD_ADDR_VAR 0 3
55174: PUSH
55175: LD_VAR 0 4
55179: PUSH
55180: FOR_IN
55181: IFFALSE 55252
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
55183: LD_VAR 0 3
55187: PPUSH
55188: CALL_OW 310
55192: PPUSH
55193: CALL_OW 266
55197: PUSH
55198: LD_INT 5
55200: EQUAL
55201: PUSH
55202: LD_VAR 0 3
55206: PPUSH
55207: CALL_OW 257
55211: PUSH
55212: LD_INT 1
55214: EQUAL
55215: AND
55216: PUSH
55217: LD_VAR 0 3
55221: PPUSH
55222: CALL_OW 459
55226: NOT
55227: AND
55228: PUSH
55229: LD_VAR 0 7
55233: AND
55234: IFFALSE 55250
// ComChangeProfession ( j , class ) ;
55236: LD_VAR 0 3
55240: PPUSH
55241: LD_VAR 0 7
55245: PPUSH
55246: CALL_OW 123
55250: GO 55180
55252: POP
55253: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
55254: LD_EXP 34
55258: PUSH
55259: LD_VAR 0 2
55263: ARRAY
55264: PUSH
55265: LD_EXP 33
55269: PUSH
55270: LD_VAR 0 2
55274: ARRAY
55275: NOT
55276: AND
55277: PUSH
55278: LD_EXP 11
55282: PUSH
55283: LD_VAR 0 2
55287: ARRAY
55288: PPUSH
55289: LD_INT 30
55291: PUSH
55292: LD_INT 32
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PPUSH
55299: CALL_OW 72
55303: NOT
55304: AND
55305: PUSH
55306: LD_EXP 11
55310: PUSH
55311: LD_VAR 0 2
55315: ARRAY
55316: PPUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 30
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 30
55332: PUSH
55333: LD_INT 5
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: LIST
55344: PPUSH
55345: CALL_OW 72
55349: NOT
55350: AND
55351: IFFALSE 55483
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
55353: LD_ADDR_VAR 0 4
55357: PUSH
55358: LD_EXP 11
55362: PUSH
55363: LD_VAR 0 2
55367: ARRAY
55368: PPUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 25
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 25
55384: PUSH
55385: LD_INT 5
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 25
55394: PUSH
55395: LD_INT 8
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 25
55404: PUSH
55405: LD_INT 9
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: PPUSH
55419: CALL_OW 72
55423: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
55424: LD_ADDR_VAR 0 4
55428: PUSH
55429: LD_VAR 0 4
55433: PUSH
55434: LD_VAR 0 4
55438: PPUSH
55439: LD_INT 18
55441: PPUSH
55442: CALL 36610 0 2
55446: DIFF
55447: ST_TO_ADDR
// if tmp then
55448: LD_VAR 0 4
55452: IFFALSE 55483
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
55454: LD_VAR 0 2
55458: PPUSH
55459: LD_VAR 0 4
55463: PPUSH
55464: LD_EXP 36
55468: PUSH
55469: LD_VAR 0 2
55473: ARRAY
55474: PPUSH
55475: CALL 74188 0 3
// exit ;
55479: POP
55480: POP
55481: GO 55556
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
55483: LD_EXP 34
55487: PUSH
55488: LD_VAR 0 2
55492: ARRAY
55493: PUSH
55494: LD_EXP 33
55498: PUSH
55499: LD_VAR 0 2
55503: ARRAY
55504: AND
55505: IFFALSE 55552
// begin tmp := mc_defender [ i ] ;
55507: LD_ADDR_VAR 0 4
55511: PUSH
55512: LD_EXP 33
55516: PUSH
55517: LD_VAR 0 2
55521: ARRAY
55522: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
55523: LD_VAR 0 2
55527: PPUSH
55528: LD_VAR 0 4
55532: PPUSH
55533: LD_EXP 34
55537: PUSH
55538: LD_VAR 0 2
55542: ARRAY
55543: PPUSH
55544: CALL 74749 0 3
// exit ;
55548: POP
55549: POP
55550: GO 55556
// end ; end ;
55552: GO 54989
55554: POP
55555: POP
// end ;
55556: LD_VAR 0 1
55560: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
55561: LD_INT 0
55563: PPUSH
55564: PPUSH
55565: PPUSH
55566: PPUSH
55567: PPUSH
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
// if not mc_bases then
55574: LD_EXP 11
55578: NOT
55579: IFFALSE 55583
// exit ;
55581: GO 56670
// for i = 1 to mc_bases do
55583: LD_ADDR_VAR 0 2
55587: PUSH
55588: DOUBLE
55589: LD_INT 1
55591: DEC
55592: ST_TO_ADDR
55593: LD_EXP 11
55597: PUSH
55598: FOR_TO
55599: IFFALSE 56668
// begin tmp := mc_lab [ i ] ;
55601: LD_ADDR_VAR 0 6
55605: PUSH
55606: LD_EXP 44
55610: PUSH
55611: LD_VAR 0 2
55615: ARRAY
55616: ST_TO_ADDR
// if not tmp then
55617: LD_VAR 0 6
55621: NOT
55622: IFFALSE 55626
// continue ;
55624: GO 55598
// idle_lab := 0 ;
55626: LD_ADDR_VAR 0 11
55630: PUSH
55631: LD_INT 0
55633: ST_TO_ADDR
// for j in tmp do
55634: LD_ADDR_VAR 0 3
55638: PUSH
55639: LD_VAR 0 6
55643: PUSH
55644: FOR_IN
55645: IFFALSE 56664
// begin researching := false ;
55647: LD_ADDR_VAR 0 10
55651: PUSH
55652: LD_INT 0
55654: ST_TO_ADDR
// side := GetSide ( j ) ;
55655: LD_ADDR_VAR 0 4
55659: PUSH
55660: LD_VAR 0 3
55664: PPUSH
55665: CALL_OW 255
55669: ST_TO_ADDR
// if not mc_tech [ side ] then
55670: LD_EXP 38
55674: PUSH
55675: LD_VAR 0 4
55679: ARRAY
55680: NOT
55681: IFFALSE 55685
// continue ;
55683: GO 55644
// if BuildingStatus ( j ) = bs_idle then
55685: LD_VAR 0 3
55689: PPUSH
55690: CALL_OW 461
55694: PUSH
55695: LD_INT 2
55697: EQUAL
55698: IFFALSE 55886
// begin if idle_lab and UnitsInside ( j ) < 6 then
55700: LD_VAR 0 11
55704: PUSH
55705: LD_VAR 0 3
55709: PPUSH
55710: CALL_OW 313
55714: PUSH
55715: LD_INT 6
55717: LESS
55718: AND
55719: IFFALSE 55790
// begin tmp2 := UnitsInside ( idle_lab ) ;
55721: LD_ADDR_VAR 0 9
55725: PUSH
55726: LD_VAR 0 11
55730: PPUSH
55731: CALL_OW 313
55735: ST_TO_ADDR
// if tmp2 then
55736: LD_VAR 0 9
55740: IFFALSE 55782
// for x in tmp2 do
55742: LD_ADDR_VAR 0 7
55746: PUSH
55747: LD_VAR 0 9
55751: PUSH
55752: FOR_IN
55753: IFFALSE 55780
// begin ComExitBuilding ( x ) ;
55755: LD_VAR 0 7
55759: PPUSH
55760: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
55764: LD_VAR 0 7
55768: PPUSH
55769: LD_VAR 0 3
55773: PPUSH
55774: CALL_OW 180
// end ;
55778: GO 55752
55780: POP
55781: POP
// idle_lab := 0 ;
55782: LD_ADDR_VAR 0 11
55786: PUSH
55787: LD_INT 0
55789: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
55790: LD_ADDR_VAR 0 5
55794: PUSH
55795: LD_EXP 38
55799: PUSH
55800: LD_VAR 0 4
55804: ARRAY
55805: PUSH
55806: FOR_IN
55807: IFFALSE 55867
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
55809: LD_VAR 0 3
55813: PPUSH
55814: LD_VAR 0 5
55818: PPUSH
55819: CALL_OW 430
55823: PUSH
55824: LD_VAR 0 4
55828: PPUSH
55829: LD_VAR 0 5
55833: PPUSH
55834: CALL 3955 0 2
55838: AND
55839: IFFALSE 55865
// begin researching := true ;
55841: LD_ADDR_VAR 0 10
55845: PUSH
55846: LD_INT 1
55848: ST_TO_ADDR
// ComResearch ( j , t ) ;
55849: LD_VAR 0 3
55853: PPUSH
55854: LD_VAR 0 5
55858: PPUSH
55859: CALL_OW 124
// break ;
55863: GO 55867
// end ;
55865: GO 55806
55867: POP
55868: POP
// if not researching then
55869: LD_VAR 0 10
55873: NOT
55874: IFFALSE 55886
// idle_lab := j ;
55876: LD_ADDR_VAR 0 11
55880: PUSH
55881: LD_VAR 0 3
55885: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
55886: LD_VAR 0 3
55890: PPUSH
55891: CALL_OW 461
55895: PUSH
55896: LD_INT 10
55898: EQUAL
55899: IFFALSE 56487
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
55901: LD_EXP 40
55905: PUSH
55906: LD_VAR 0 2
55910: ARRAY
55911: NOT
55912: PUSH
55913: LD_EXP 41
55917: PUSH
55918: LD_VAR 0 2
55922: ARRAY
55923: NOT
55924: AND
55925: PUSH
55926: LD_EXP 38
55930: PUSH
55931: LD_VAR 0 4
55935: ARRAY
55936: PUSH
55937: LD_INT 1
55939: GREATER
55940: AND
55941: IFFALSE 56072
// begin ComCancel ( j ) ;
55943: LD_VAR 0 3
55947: PPUSH
55948: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
55952: LD_ADDR_EXP 38
55956: PUSH
55957: LD_EXP 38
55961: PPUSH
55962: LD_VAR 0 4
55966: PPUSH
55967: LD_EXP 38
55971: PUSH
55972: LD_VAR 0 4
55976: ARRAY
55977: PPUSH
55978: LD_EXP 38
55982: PUSH
55983: LD_VAR 0 4
55987: ARRAY
55988: PUSH
55989: LD_INT 1
55991: MINUS
55992: PPUSH
55993: LD_EXP 38
55997: PUSH
55998: LD_VAR 0 4
56002: ARRAY
56003: PPUSH
56004: LD_INT 0
56006: PPUSH
56007: CALL 7467 0 4
56011: PPUSH
56012: CALL_OW 1
56016: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
56017: LD_ADDR_EXP 38
56021: PUSH
56022: LD_EXP 38
56026: PPUSH
56027: LD_VAR 0 4
56031: PPUSH
56032: LD_EXP 38
56036: PUSH
56037: LD_VAR 0 4
56041: ARRAY
56042: PPUSH
56043: LD_EXP 38
56047: PUSH
56048: LD_VAR 0 4
56052: ARRAY
56053: PPUSH
56054: LD_INT 1
56056: PPUSH
56057: LD_INT 0
56059: PPUSH
56060: CALL 7467 0 4
56064: PPUSH
56065: CALL_OW 1
56069: ST_TO_ADDR
// continue ;
56070: GO 55644
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
56072: LD_EXP 40
56076: PUSH
56077: LD_VAR 0 2
56081: ARRAY
56082: PUSH
56083: LD_EXP 41
56087: PUSH
56088: LD_VAR 0 2
56092: ARRAY
56093: NOT
56094: AND
56095: IFFALSE 56222
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
56097: LD_ADDR_EXP 41
56101: PUSH
56102: LD_EXP 41
56106: PPUSH
56107: LD_VAR 0 2
56111: PUSH
56112: LD_EXP 41
56116: PUSH
56117: LD_VAR 0 2
56121: ARRAY
56122: PUSH
56123: LD_INT 1
56125: PLUS
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PPUSH
56131: LD_EXP 40
56135: PUSH
56136: LD_VAR 0 2
56140: ARRAY
56141: PUSH
56142: LD_INT 1
56144: ARRAY
56145: PPUSH
56146: CALL 8049 0 3
56150: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
56151: LD_EXP 40
56155: PUSH
56156: LD_VAR 0 2
56160: ARRAY
56161: PUSH
56162: LD_INT 1
56164: ARRAY
56165: PPUSH
56166: LD_INT 112
56168: PPUSH
56169: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
56173: LD_ADDR_VAR 0 9
56177: PUSH
56178: LD_EXP 40
56182: PUSH
56183: LD_VAR 0 2
56187: ARRAY
56188: PPUSH
56189: LD_INT 1
56191: PPUSH
56192: CALL_OW 3
56196: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
56197: LD_ADDR_EXP 40
56201: PUSH
56202: LD_EXP 40
56206: PPUSH
56207: LD_VAR 0 2
56211: PPUSH
56212: LD_VAR 0 9
56216: PPUSH
56217: CALL_OW 1
56221: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
56222: LD_EXP 40
56226: PUSH
56227: LD_VAR 0 2
56231: ARRAY
56232: PUSH
56233: LD_EXP 41
56237: PUSH
56238: LD_VAR 0 2
56242: ARRAY
56243: AND
56244: PUSH
56245: LD_EXP 41
56249: PUSH
56250: LD_VAR 0 2
56254: ARRAY
56255: PUSH
56256: LD_INT 1
56258: ARRAY
56259: PPUSH
56260: CALL_OW 310
56264: NOT
56265: AND
56266: PUSH
56267: LD_VAR 0 3
56271: PPUSH
56272: CALL_OW 313
56276: PUSH
56277: LD_INT 6
56279: EQUAL
56280: AND
56281: IFFALSE 56337
// begin tmp2 := UnitsInside ( j ) ;
56283: LD_ADDR_VAR 0 9
56287: PUSH
56288: LD_VAR 0 3
56292: PPUSH
56293: CALL_OW 313
56297: ST_TO_ADDR
// if tmp2 = 6 then
56298: LD_VAR 0 9
56302: PUSH
56303: LD_INT 6
56305: EQUAL
56306: IFFALSE 56337
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
56308: LD_VAR 0 9
56312: PUSH
56313: LD_INT 1
56315: ARRAY
56316: PPUSH
56317: LD_INT 112
56319: PPUSH
56320: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
56324: LD_VAR 0 9
56328: PUSH
56329: LD_INT 1
56331: ARRAY
56332: PPUSH
56333: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
56337: LD_EXP 41
56341: PUSH
56342: LD_VAR 0 2
56346: ARRAY
56347: PUSH
56348: LD_EXP 41
56352: PUSH
56353: LD_VAR 0 2
56357: ARRAY
56358: PUSH
56359: LD_INT 1
56361: ARRAY
56362: PPUSH
56363: CALL_OW 314
56367: NOT
56368: AND
56369: PUSH
56370: LD_EXP 41
56374: PUSH
56375: LD_VAR 0 2
56379: ARRAY
56380: PUSH
56381: LD_INT 1
56383: ARRAY
56384: PPUSH
56385: CALL_OW 310
56389: NOT
56390: AND
56391: IFFALSE 56417
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
56393: LD_EXP 41
56397: PUSH
56398: LD_VAR 0 2
56402: ARRAY
56403: PUSH
56404: LD_INT 1
56406: ARRAY
56407: PPUSH
56408: LD_VAR 0 3
56412: PPUSH
56413: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
56417: LD_EXP 41
56421: PUSH
56422: LD_VAR 0 2
56426: ARRAY
56427: PUSH
56428: LD_INT 1
56430: ARRAY
56431: PPUSH
56432: CALL_OW 310
56436: PUSH
56437: LD_EXP 41
56441: PUSH
56442: LD_VAR 0 2
56446: ARRAY
56447: PUSH
56448: LD_INT 1
56450: ARRAY
56451: PPUSH
56452: CALL_OW 310
56456: PPUSH
56457: CALL_OW 461
56461: PUSH
56462: LD_INT 3
56464: NONEQUAL
56465: AND
56466: IFFALSE 56487
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
56468: LD_EXP 41
56472: PUSH
56473: LD_VAR 0 2
56477: ARRAY
56478: PUSH
56479: LD_INT 1
56481: ARRAY
56482: PPUSH
56483: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
56487: LD_VAR 0 3
56491: PPUSH
56492: CALL_OW 461
56496: PUSH
56497: LD_INT 6
56499: EQUAL
56500: PUSH
56501: LD_VAR 0 6
56505: PUSH
56506: LD_INT 1
56508: GREATER
56509: AND
56510: IFFALSE 56662
// begin sci := [ ] ;
56512: LD_ADDR_VAR 0 8
56516: PUSH
56517: EMPTY
56518: ST_TO_ADDR
// for x in ( tmp diff j ) do
56519: LD_ADDR_VAR 0 7
56523: PUSH
56524: LD_VAR 0 6
56528: PUSH
56529: LD_VAR 0 3
56533: DIFF
56534: PUSH
56535: FOR_IN
56536: IFFALSE 56588
// begin if sci = 6 then
56538: LD_VAR 0 8
56542: PUSH
56543: LD_INT 6
56545: EQUAL
56546: IFFALSE 56550
// break ;
56548: GO 56588
// if BuildingStatus ( x ) = bs_idle then
56550: LD_VAR 0 7
56554: PPUSH
56555: CALL_OW 461
56559: PUSH
56560: LD_INT 2
56562: EQUAL
56563: IFFALSE 56586
// sci := sci ^ UnitsInside ( x ) ;
56565: LD_ADDR_VAR 0 8
56569: PUSH
56570: LD_VAR 0 8
56574: PUSH
56575: LD_VAR 0 7
56579: PPUSH
56580: CALL_OW 313
56584: ADD
56585: ST_TO_ADDR
// end ;
56586: GO 56535
56588: POP
56589: POP
// if not sci then
56590: LD_VAR 0 8
56594: NOT
56595: IFFALSE 56599
// continue ;
56597: GO 55644
// for x in sci do
56599: LD_ADDR_VAR 0 7
56603: PUSH
56604: LD_VAR 0 8
56608: PUSH
56609: FOR_IN
56610: IFFALSE 56660
// if IsInUnit ( x ) and not HasTask ( x ) then
56612: LD_VAR 0 7
56616: PPUSH
56617: CALL_OW 310
56621: PUSH
56622: LD_VAR 0 7
56626: PPUSH
56627: CALL_OW 314
56631: NOT
56632: AND
56633: IFFALSE 56658
// begin ComExitBuilding ( x ) ;
56635: LD_VAR 0 7
56639: PPUSH
56640: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
56644: LD_VAR 0 7
56648: PPUSH
56649: LD_VAR 0 3
56653: PPUSH
56654: CALL_OW 180
// end ;
56658: GO 56609
56660: POP
56661: POP
// end ; end ;
56662: GO 55644
56664: POP
56665: POP
// end ;
56666: GO 55598
56668: POP
56669: POP
// end ;
56670: LD_VAR 0 1
56674: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
56675: LD_INT 0
56677: PPUSH
56678: PPUSH
// if not mc_bases then
56679: LD_EXP 11
56683: NOT
56684: IFFALSE 56688
// exit ;
56686: GO 56769
// for i = 1 to mc_bases do
56688: LD_ADDR_VAR 0 2
56692: PUSH
56693: DOUBLE
56694: LD_INT 1
56696: DEC
56697: ST_TO_ADDR
56698: LD_EXP 11
56702: PUSH
56703: FOR_TO
56704: IFFALSE 56767
// if mc_mines [ i ] and mc_miners [ i ] then
56706: LD_EXP 24
56710: PUSH
56711: LD_VAR 0 2
56715: ARRAY
56716: PUSH
56717: LD_EXP 25
56721: PUSH
56722: LD_VAR 0 2
56726: ARRAY
56727: AND
56728: IFFALSE 56765
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
56730: LD_EXP 25
56734: PUSH
56735: LD_VAR 0 2
56739: ARRAY
56740: PUSH
56741: LD_INT 1
56743: ARRAY
56744: PPUSH
56745: CALL_OW 255
56749: PPUSH
56750: LD_EXP 24
56754: PUSH
56755: LD_VAR 0 2
56759: ARRAY
56760: PPUSH
56761: CALL 5038 0 2
56765: GO 56703
56767: POP
56768: POP
// end ;
56769: LD_VAR 0 1
56773: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
56774: LD_INT 0
56776: PPUSH
56777: PPUSH
56778: PPUSH
56779: PPUSH
56780: PPUSH
56781: PPUSH
56782: PPUSH
56783: PPUSH
// if not mc_bases or not mc_parking then
56784: LD_EXP 11
56788: NOT
56789: PUSH
56790: LD_EXP 35
56794: NOT
56795: OR
56796: IFFALSE 56800
// exit ;
56798: GO 57499
// for i = 1 to mc_bases do
56800: LD_ADDR_VAR 0 2
56804: PUSH
56805: DOUBLE
56806: LD_INT 1
56808: DEC
56809: ST_TO_ADDR
56810: LD_EXP 11
56814: PUSH
56815: FOR_TO
56816: IFFALSE 57497
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
56818: LD_EXP 11
56822: PUSH
56823: LD_VAR 0 2
56827: ARRAY
56828: NOT
56829: PUSH
56830: LD_EXP 35
56834: PUSH
56835: LD_VAR 0 2
56839: ARRAY
56840: NOT
56841: OR
56842: IFFALSE 56846
// continue ;
56844: GO 56815
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
56846: LD_ADDR_VAR 0 5
56850: PUSH
56851: LD_EXP 11
56855: PUSH
56856: LD_VAR 0 2
56860: ARRAY
56861: PUSH
56862: LD_INT 1
56864: ARRAY
56865: PPUSH
56866: CALL_OW 255
56870: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
56871: LD_ADDR_VAR 0 6
56875: PUSH
56876: LD_EXP 11
56880: PUSH
56881: LD_VAR 0 2
56885: ARRAY
56886: PPUSH
56887: LD_INT 30
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PPUSH
56897: CALL_OW 72
56901: ST_TO_ADDR
// if not fac then
56902: LD_VAR 0 6
56906: NOT
56907: IFFALSE 56958
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56909: LD_ADDR_VAR 0 6
56913: PUSH
56914: LD_EXP 11
56918: PUSH
56919: LD_VAR 0 2
56923: ARRAY
56924: PPUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 30
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 30
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: PPUSH
56953: CALL_OW 72
56957: ST_TO_ADDR
// if not fac then
56958: LD_VAR 0 6
56962: NOT
56963: IFFALSE 56967
// continue ;
56965: GO 56815
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
56967: LD_ADDR_VAR 0 7
56971: PUSH
56972: LD_EXP 35
56976: PUSH
56977: LD_VAR 0 2
56981: ARRAY
56982: PPUSH
56983: LD_INT 22
56985: PUSH
56986: LD_VAR 0 5
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 21
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: LD_INT 24
57010: PUSH
57011: LD_INT 1000
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: PPUSH
57027: CALL_OW 70
57031: ST_TO_ADDR
// for j in fac do
57032: LD_ADDR_VAR 0 3
57036: PUSH
57037: LD_VAR 0 6
57041: PUSH
57042: FOR_IN
57043: IFFALSE 57124
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
57045: LD_ADDR_VAR 0 7
57049: PUSH
57050: LD_VAR 0 7
57054: PUSH
57055: LD_INT 22
57057: PUSH
57058: LD_VAR 0 5
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 91
57069: PUSH
57070: LD_VAR 0 3
57074: PUSH
57075: LD_INT 15
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 21
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 3
57095: PUSH
57096: LD_INT 24
57098: PUSH
57099: LD_INT 1000
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: PPUSH
57116: CALL_OW 69
57120: UNION
57121: ST_TO_ADDR
57122: GO 57042
57124: POP
57125: POP
// if not vehs then
57126: LD_VAR 0 7
57130: NOT
57131: IFFALSE 57157
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
57133: LD_ADDR_EXP 23
57137: PUSH
57138: LD_EXP 23
57142: PPUSH
57143: LD_VAR 0 2
57147: PPUSH
57148: EMPTY
57149: PPUSH
57150: CALL_OW 1
57154: ST_TO_ADDR
// continue ;
57155: GO 56815
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
57157: LD_ADDR_VAR 0 8
57161: PUSH
57162: LD_EXP 11
57166: PUSH
57167: LD_VAR 0 2
57171: ARRAY
57172: PPUSH
57173: LD_INT 30
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PPUSH
57183: CALL_OW 72
57187: ST_TO_ADDR
// if tmp then
57188: LD_VAR 0 8
57192: IFFALSE 57295
// begin for j in tmp do
57194: LD_ADDR_VAR 0 3
57198: PUSH
57199: LD_VAR 0 8
57203: PUSH
57204: FOR_IN
57205: IFFALSE 57293
// for k in UnitsInside ( j ) do
57207: LD_ADDR_VAR 0 4
57211: PUSH
57212: LD_VAR 0 3
57216: PPUSH
57217: CALL_OW 313
57221: PUSH
57222: FOR_IN
57223: IFFALSE 57289
// if k then
57225: LD_VAR 0 4
57229: IFFALSE 57287
// if not k in mc_repair_vehicle [ i ] then
57231: LD_VAR 0 4
57235: PUSH
57236: LD_EXP 23
57240: PUSH
57241: LD_VAR 0 2
57245: ARRAY
57246: IN
57247: NOT
57248: IFFALSE 57287
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
57250: LD_ADDR_EXP 23
57254: PUSH
57255: LD_EXP 23
57259: PPUSH
57260: LD_VAR 0 2
57264: PPUSH
57265: LD_EXP 23
57269: PUSH
57270: LD_VAR 0 2
57274: ARRAY
57275: PUSH
57276: LD_VAR 0 4
57280: UNION
57281: PPUSH
57282: CALL_OW 1
57286: ST_TO_ADDR
57287: GO 57222
57289: POP
57290: POP
57291: GO 57204
57293: POP
57294: POP
// end ; if not mc_repair_vehicle [ i ] then
57295: LD_EXP 23
57299: PUSH
57300: LD_VAR 0 2
57304: ARRAY
57305: NOT
57306: IFFALSE 57310
// continue ;
57308: GO 56815
// for j in mc_repair_vehicle [ i ] do
57310: LD_ADDR_VAR 0 3
57314: PUSH
57315: LD_EXP 23
57319: PUSH
57320: LD_VAR 0 2
57324: ARRAY
57325: PUSH
57326: FOR_IN
57327: IFFALSE 57493
// begin if GetClass ( j ) <> 3 then
57329: LD_VAR 0 3
57333: PPUSH
57334: CALL_OW 257
57338: PUSH
57339: LD_INT 3
57341: NONEQUAL
57342: IFFALSE 57383
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
57344: LD_ADDR_EXP 23
57348: PUSH
57349: LD_EXP 23
57353: PPUSH
57354: LD_VAR 0 2
57358: PPUSH
57359: LD_EXP 23
57363: PUSH
57364: LD_VAR 0 2
57368: ARRAY
57369: PUSH
57370: LD_VAR 0 3
57374: DIFF
57375: PPUSH
57376: CALL_OW 1
57380: ST_TO_ADDR
// continue ;
57381: GO 57326
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
57383: LD_VAR 0 3
57387: PPUSH
57388: CALL_OW 311
57392: NOT
57393: PUSH
57394: LD_VAR 0 3
57398: PUSH
57399: LD_EXP 14
57403: PUSH
57404: LD_VAR 0 2
57408: ARRAY
57409: PUSH
57410: LD_INT 1
57412: ARRAY
57413: IN
57414: NOT
57415: AND
57416: PUSH
57417: LD_VAR 0 3
57421: PUSH
57422: LD_EXP 14
57426: PUSH
57427: LD_VAR 0 2
57431: ARRAY
57432: PUSH
57433: LD_INT 2
57435: ARRAY
57436: IN
57437: NOT
57438: AND
57439: IFFALSE 57491
// begin if IsInUnit ( j ) then
57441: LD_VAR 0 3
57445: PPUSH
57446: CALL_OW 310
57450: IFFALSE 57461
// ComExitBuilding ( j ) ;
57452: LD_VAR 0 3
57456: PPUSH
57457: CALL_OW 122
// if not HasTask ( j ) then
57461: LD_VAR 0 3
57465: PPUSH
57466: CALL_OW 314
57470: NOT
57471: IFFALSE 57491
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
57473: LD_VAR 0 3
57477: PPUSH
57478: LD_VAR 0 7
57482: PUSH
57483: LD_INT 1
57485: ARRAY
57486: PPUSH
57487: CALL_OW 189
// end ; end ;
57491: GO 57326
57493: POP
57494: POP
// end ;
57495: GO 56815
57497: POP
57498: POP
// end ;
57499: LD_VAR 0 1
57503: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
57504: LD_INT 0
57506: PPUSH
57507: PPUSH
57508: PPUSH
57509: PPUSH
57510: PPUSH
57511: PPUSH
57512: PPUSH
57513: PPUSH
57514: PPUSH
57515: PPUSH
57516: PPUSH
// if not mc_bases then
57517: LD_EXP 11
57521: NOT
57522: IFFALSE 57526
// exit ;
57524: GO 58328
// for i = 1 to mc_bases do
57526: LD_ADDR_VAR 0 2
57530: PUSH
57531: DOUBLE
57532: LD_INT 1
57534: DEC
57535: ST_TO_ADDR
57536: LD_EXP 11
57540: PUSH
57541: FOR_TO
57542: IFFALSE 58326
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
57544: LD_EXP 39
57548: PUSH
57549: LD_VAR 0 2
57553: ARRAY
57554: NOT
57555: PUSH
57556: LD_EXP 14
57560: PUSH
57561: LD_VAR 0 2
57565: ARRAY
57566: PUSH
57567: LD_INT 1
57569: ARRAY
57570: OR
57571: PUSH
57572: LD_EXP 14
57576: PUSH
57577: LD_VAR 0 2
57581: ARRAY
57582: PUSH
57583: LD_INT 2
57585: ARRAY
57586: OR
57587: PUSH
57588: LD_EXP 37
57592: PUSH
57593: LD_VAR 0 2
57597: ARRAY
57598: PPUSH
57599: LD_INT 1
57601: PPUSH
57602: CALL_OW 325
57606: NOT
57607: OR
57608: PUSH
57609: LD_EXP 34
57613: PUSH
57614: LD_VAR 0 2
57618: ARRAY
57619: OR
57620: IFFALSE 57624
// continue ;
57622: GO 57541
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
57624: LD_ADDR_VAR 0 8
57628: PUSH
57629: LD_EXP 11
57633: PUSH
57634: LD_VAR 0 2
57638: ARRAY
57639: PPUSH
57640: LD_INT 25
57642: PUSH
57643: LD_INT 4
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 50
57652: PUSH
57653: EMPTY
57654: LIST
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: LD_INT 60
57661: PUSH
57662: EMPTY
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: PPUSH
57674: CALL_OW 72
57678: PUSH
57679: LD_EXP 15
57683: PUSH
57684: LD_VAR 0 2
57688: ARRAY
57689: DIFF
57690: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57691: LD_ADDR_VAR 0 9
57695: PUSH
57696: LD_EXP 11
57700: PUSH
57701: LD_VAR 0 2
57705: ARRAY
57706: PPUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 30
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 30
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: PPUSH
57735: CALL_OW 72
57739: ST_TO_ADDR
// if not tmp or not dep then
57740: LD_VAR 0 8
57744: NOT
57745: PUSH
57746: LD_VAR 0 9
57750: NOT
57751: OR
57752: IFFALSE 57756
// continue ;
57754: GO 57541
// side := GetSide ( tmp [ 1 ] ) ;
57756: LD_ADDR_VAR 0 11
57760: PUSH
57761: LD_VAR 0 8
57765: PUSH
57766: LD_INT 1
57768: ARRAY
57769: PPUSH
57770: CALL_OW 255
57774: ST_TO_ADDR
// dep := dep [ 1 ] ;
57775: LD_ADDR_VAR 0 9
57779: PUSH
57780: LD_VAR 0 9
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
57789: LD_ADDR_VAR 0 7
57793: PUSH
57794: LD_EXP 39
57798: PUSH
57799: LD_VAR 0 2
57803: ARRAY
57804: PPUSH
57805: LD_INT 22
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 25
57817: PUSH
57818: LD_INT 12
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PPUSH
57829: CALL_OW 70
57833: PUSH
57834: LD_INT 22
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 25
57846: PUSH
57847: LD_INT 12
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 91
57856: PUSH
57857: LD_VAR 0 9
57861: PUSH
57862: LD_INT 20
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: PPUSH
57875: CALL_OW 69
57879: UNION
57880: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
57881: LD_ADDR_VAR 0 10
57885: PUSH
57886: LD_EXP 39
57890: PUSH
57891: LD_VAR 0 2
57895: ARRAY
57896: PPUSH
57897: LD_INT 81
57899: PUSH
57900: LD_VAR 0 11
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PPUSH
57909: CALL_OW 70
57913: ST_TO_ADDR
// if not apes or danger_at_area then
57914: LD_VAR 0 7
57918: NOT
57919: PUSH
57920: LD_VAR 0 10
57924: OR
57925: IFFALSE 57975
// begin if mc_taming [ i ] then
57927: LD_EXP 42
57931: PUSH
57932: LD_VAR 0 2
57936: ARRAY
57937: IFFALSE 57973
// begin MC_Reset ( i , 121 ) ;
57939: LD_VAR 0 2
57943: PPUSH
57944: LD_INT 121
57946: PPUSH
57947: CALL 43426 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57951: LD_ADDR_EXP 42
57955: PUSH
57956: LD_EXP 42
57960: PPUSH
57961: LD_VAR 0 2
57965: PPUSH
57966: EMPTY
57967: PPUSH
57968: CALL_OW 1
57972: ST_TO_ADDR
// end ; continue ;
57973: GO 57541
// end ; for j in tmp do
57975: LD_ADDR_VAR 0 3
57979: PUSH
57980: LD_VAR 0 8
57984: PUSH
57985: FOR_IN
57986: IFFALSE 58322
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
57988: LD_VAR 0 3
57992: PUSH
57993: LD_EXP 42
57997: PUSH
57998: LD_VAR 0 2
58002: ARRAY
58003: IN
58004: NOT
58005: PUSH
58006: LD_EXP 42
58010: PUSH
58011: LD_VAR 0 2
58015: ARRAY
58016: PUSH
58017: LD_INT 3
58019: LESS
58020: AND
58021: IFFALSE 58079
// begin SetTag ( j , 121 ) ;
58023: LD_VAR 0 3
58027: PPUSH
58028: LD_INT 121
58030: PPUSH
58031: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
58035: LD_ADDR_EXP 42
58039: PUSH
58040: LD_EXP 42
58044: PPUSH
58045: LD_VAR 0 2
58049: PUSH
58050: LD_EXP 42
58054: PUSH
58055: LD_VAR 0 2
58059: ARRAY
58060: PUSH
58061: LD_INT 1
58063: PLUS
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PPUSH
58069: LD_VAR 0 3
58073: PPUSH
58074: CALL 8049 0 3
58078: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
58079: LD_VAR 0 3
58083: PUSH
58084: LD_EXP 42
58088: PUSH
58089: LD_VAR 0 2
58093: ARRAY
58094: IN
58095: IFFALSE 58320
// begin if GetClass ( j ) <> 4 then
58097: LD_VAR 0 3
58101: PPUSH
58102: CALL_OW 257
58106: PUSH
58107: LD_INT 4
58109: NONEQUAL
58110: IFFALSE 58163
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
58112: LD_ADDR_EXP 42
58116: PUSH
58117: LD_EXP 42
58121: PPUSH
58122: LD_VAR 0 2
58126: PPUSH
58127: LD_EXP 42
58131: PUSH
58132: LD_VAR 0 2
58136: ARRAY
58137: PUSH
58138: LD_VAR 0 3
58142: DIFF
58143: PPUSH
58144: CALL_OW 1
58148: ST_TO_ADDR
// SetTag ( j , 0 ) ;
58149: LD_VAR 0 3
58153: PPUSH
58154: LD_INT 0
58156: PPUSH
58157: CALL_OW 109
// continue ;
58161: GO 57985
// end ; if IsInUnit ( j ) then
58163: LD_VAR 0 3
58167: PPUSH
58168: CALL_OW 310
58172: IFFALSE 58183
// ComExitBuilding ( j ) ;
58174: LD_VAR 0 3
58178: PPUSH
58179: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
58183: LD_ADDR_VAR 0 6
58187: PUSH
58188: LD_VAR 0 7
58192: PPUSH
58193: LD_VAR 0 3
58197: PPUSH
58198: CALL_OW 74
58202: ST_TO_ADDR
// if not ape then
58203: LD_VAR 0 6
58207: NOT
58208: IFFALSE 58212
// break ;
58210: GO 58322
// x := GetX ( ape ) ;
58212: LD_ADDR_VAR 0 4
58216: PUSH
58217: LD_VAR 0 6
58221: PPUSH
58222: CALL_OW 250
58226: ST_TO_ADDR
// y := GetY ( ape ) ;
58227: LD_ADDR_VAR 0 5
58231: PUSH
58232: LD_VAR 0 6
58236: PPUSH
58237: CALL_OW 251
58241: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58242: LD_VAR 0 4
58246: PPUSH
58247: LD_VAR 0 5
58251: PPUSH
58252: CALL_OW 488
58256: NOT
58257: PUSH
58258: LD_VAR 0 11
58262: PPUSH
58263: LD_VAR 0 4
58267: PPUSH
58268: LD_VAR 0 5
58272: PPUSH
58273: LD_INT 20
58275: PPUSH
58276: CALL 8945 0 4
58280: PUSH
58281: LD_INT 4
58283: ARRAY
58284: OR
58285: IFFALSE 58289
// break ;
58287: GO 58322
// if not HasTask ( j ) then
58289: LD_VAR 0 3
58293: PPUSH
58294: CALL_OW 314
58298: NOT
58299: IFFALSE 58320
// ComTameXY ( j , x , y ) ;
58301: LD_VAR 0 3
58305: PPUSH
58306: LD_VAR 0 4
58310: PPUSH
58311: LD_VAR 0 5
58315: PPUSH
58316: CALL_OW 131
// end ; end ;
58320: GO 57985
58322: POP
58323: POP
// end ;
58324: GO 57541
58326: POP
58327: POP
// end ;
58328: LD_VAR 0 1
58332: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
58333: LD_INT 0
58335: PPUSH
58336: PPUSH
58337: PPUSH
58338: PPUSH
58339: PPUSH
58340: PPUSH
58341: PPUSH
58342: PPUSH
// if not mc_bases then
58343: LD_EXP 11
58347: NOT
58348: IFFALSE 58352
// exit ;
58350: GO 58978
// for i = 1 to mc_bases do
58352: LD_ADDR_VAR 0 2
58356: PUSH
58357: DOUBLE
58358: LD_INT 1
58360: DEC
58361: ST_TO_ADDR
58362: LD_EXP 11
58366: PUSH
58367: FOR_TO
58368: IFFALSE 58976
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
58370: LD_EXP 40
58374: PUSH
58375: LD_VAR 0 2
58379: ARRAY
58380: NOT
58381: PUSH
58382: LD_EXP 40
58386: PUSH
58387: LD_VAR 0 2
58391: ARRAY
58392: PPUSH
58393: LD_INT 25
58395: PUSH
58396: LD_INT 12
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PPUSH
58403: CALL_OW 72
58407: NOT
58408: OR
58409: IFFALSE 58413
// continue ;
58411: GO 58367
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
58413: LD_ADDR_VAR 0 5
58417: PUSH
58418: LD_EXP 40
58422: PUSH
58423: LD_VAR 0 2
58427: ARRAY
58428: PUSH
58429: LD_INT 1
58431: ARRAY
58432: PPUSH
58433: CALL_OW 255
58437: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
58438: LD_VAR 0 5
58442: PPUSH
58443: LD_INT 2
58445: PPUSH
58446: CALL_OW 325
58450: IFFALSE 58703
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58452: LD_ADDR_VAR 0 4
58456: PUSH
58457: LD_EXP 40
58461: PUSH
58462: LD_VAR 0 2
58466: ARRAY
58467: PPUSH
58468: LD_INT 25
58470: PUSH
58471: LD_INT 16
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PPUSH
58478: CALL_OW 72
58482: ST_TO_ADDR
// if tmp < 6 then
58483: LD_VAR 0 4
58487: PUSH
58488: LD_INT 6
58490: LESS
58491: IFFALSE 58703
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58493: LD_ADDR_VAR 0 6
58497: PUSH
58498: LD_EXP 11
58502: PUSH
58503: LD_VAR 0 2
58507: ARRAY
58508: PPUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 30
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 30
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: PPUSH
58537: CALL_OW 72
58541: ST_TO_ADDR
// if depot then
58542: LD_VAR 0 6
58546: IFFALSE 58703
// begin selected := 0 ;
58548: LD_ADDR_VAR 0 7
58552: PUSH
58553: LD_INT 0
58555: ST_TO_ADDR
// for j in depot do
58556: LD_ADDR_VAR 0 3
58560: PUSH
58561: LD_VAR 0 6
58565: PUSH
58566: FOR_IN
58567: IFFALSE 58598
// begin if UnitsInside ( j ) < 6 then
58569: LD_VAR 0 3
58573: PPUSH
58574: CALL_OW 313
58578: PUSH
58579: LD_INT 6
58581: LESS
58582: IFFALSE 58596
// begin selected := j ;
58584: LD_ADDR_VAR 0 7
58588: PUSH
58589: LD_VAR 0 3
58593: ST_TO_ADDR
// break ;
58594: GO 58598
// end ; end ;
58596: GO 58566
58598: POP
58599: POP
// if selected then
58600: LD_VAR 0 7
58604: IFFALSE 58703
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58606: LD_ADDR_VAR 0 3
58610: PUSH
58611: LD_EXP 40
58615: PUSH
58616: LD_VAR 0 2
58620: ARRAY
58621: PPUSH
58622: LD_INT 25
58624: PUSH
58625: LD_INT 12
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PPUSH
58632: CALL_OW 72
58636: PUSH
58637: FOR_IN
58638: IFFALSE 58701
// if not HasTask ( j ) then
58640: LD_VAR 0 3
58644: PPUSH
58645: CALL_OW 314
58649: NOT
58650: IFFALSE 58699
// begin if not IsInUnit ( j ) then
58652: LD_VAR 0 3
58656: PPUSH
58657: CALL_OW 310
58661: NOT
58662: IFFALSE 58678
// ComEnterUnit ( j , selected ) ;
58664: LD_VAR 0 3
58668: PPUSH
58669: LD_VAR 0 7
58673: PPUSH
58674: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
58678: LD_VAR 0 3
58682: PPUSH
58683: LD_INT 16
58685: PPUSH
58686: CALL_OW 183
// AddComExitBuilding ( j ) ;
58690: LD_VAR 0 3
58694: PPUSH
58695: CALL_OW 182
// end ;
58699: GO 58637
58701: POP
58702: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
58703: LD_VAR 0 5
58707: PPUSH
58708: LD_INT 11
58710: PPUSH
58711: CALL_OW 325
58715: IFFALSE 58974
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
58717: LD_ADDR_VAR 0 4
58721: PUSH
58722: LD_EXP 40
58726: PUSH
58727: LD_VAR 0 2
58731: ARRAY
58732: PPUSH
58733: LD_INT 25
58735: PUSH
58736: LD_INT 16
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PPUSH
58743: CALL_OW 72
58747: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
58748: LD_VAR 0 4
58752: PUSH
58753: LD_INT 6
58755: GREATEREQUAL
58756: PUSH
58757: LD_VAR 0 5
58761: PPUSH
58762: LD_INT 2
58764: PPUSH
58765: CALL_OW 325
58769: NOT
58770: OR
58771: IFFALSE 58974
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58773: LD_ADDR_VAR 0 8
58777: PUSH
58778: LD_EXP 11
58782: PUSH
58783: LD_VAR 0 2
58787: ARRAY
58788: PPUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 30
58794: PUSH
58795: LD_INT 4
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 30
58804: PUSH
58805: LD_INT 5
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: LIST
58816: PPUSH
58817: CALL_OW 72
58821: ST_TO_ADDR
// if barracks then
58822: LD_VAR 0 8
58826: IFFALSE 58974
// begin selected := 0 ;
58828: LD_ADDR_VAR 0 7
58832: PUSH
58833: LD_INT 0
58835: ST_TO_ADDR
// for j in barracks do
58836: LD_ADDR_VAR 0 3
58840: PUSH
58841: LD_VAR 0 8
58845: PUSH
58846: FOR_IN
58847: IFFALSE 58878
// begin if UnitsInside ( j ) < 6 then
58849: LD_VAR 0 3
58853: PPUSH
58854: CALL_OW 313
58858: PUSH
58859: LD_INT 6
58861: LESS
58862: IFFALSE 58876
// begin selected := j ;
58864: LD_ADDR_VAR 0 7
58868: PUSH
58869: LD_VAR 0 3
58873: ST_TO_ADDR
// break ;
58874: GO 58878
// end ; end ;
58876: GO 58846
58878: POP
58879: POP
// if selected then
58880: LD_VAR 0 7
58884: IFFALSE 58974
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
58886: LD_ADDR_VAR 0 3
58890: PUSH
58891: LD_EXP 40
58895: PUSH
58896: LD_VAR 0 2
58900: ARRAY
58901: PPUSH
58902: LD_INT 25
58904: PUSH
58905: LD_INT 12
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PPUSH
58912: CALL_OW 72
58916: PUSH
58917: FOR_IN
58918: IFFALSE 58972
// if not IsInUnit ( j ) and not HasTask ( j ) then
58920: LD_VAR 0 3
58924: PPUSH
58925: CALL_OW 310
58929: NOT
58930: PUSH
58931: LD_VAR 0 3
58935: PPUSH
58936: CALL_OW 314
58940: NOT
58941: AND
58942: IFFALSE 58970
// begin ComEnterUnit ( j , selected ) ;
58944: LD_VAR 0 3
58948: PPUSH
58949: LD_VAR 0 7
58953: PPUSH
58954: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
58958: LD_VAR 0 3
58962: PPUSH
58963: LD_INT 15
58965: PPUSH
58966: CALL_OW 183
// end ;
58970: GO 58917
58972: POP
58973: POP
// end ; end ; end ; end ; end ;
58974: GO 58367
58976: POP
58977: POP
// end ;
58978: LD_VAR 0 1
58982: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
58983: LD_INT 0
58985: PPUSH
58986: PPUSH
58987: PPUSH
58988: PPUSH
// if not mc_bases then
58989: LD_EXP 11
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59176
// for i = 1 to mc_bases do
58998: LD_ADDR_VAR 0 2
59002: PUSH
59003: DOUBLE
59004: LD_INT 1
59006: DEC
59007: ST_TO_ADDR
59008: LD_EXP 11
59012: PUSH
59013: FOR_TO
59014: IFFALSE 59174
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
59016: LD_ADDR_VAR 0 4
59020: PUSH
59021: LD_EXP 11
59025: PUSH
59026: LD_VAR 0 2
59030: ARRAY
59031: PPUSH
59032: LD_INT 25
59034: PUSH
59035: LD_INT 9
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PPUSH
59042: CALL_OW 72
59046: ST_TO_ADDR
// if not tmp then
59047: LD_VAR 0 4
59051: NOT
59052: IFFALSE 59056
// continue ;
59054: GO 59013
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
59056: LD_EXP 37
59060: PUSH
59061: LD_VAR 0 2
59065: ARRAY
59066: PPUSH
59067: LD_INT 29
59069: PPUSH
59070: CALL_OW 325
59074: NOT
59075: PUSH
59076: LD_EXP 37
59080: PUSH
59081: LD_VAR 0 2
59085: ARRAY
59086: PPUSH
59087: LD_INT 28
59089: PPUSH
59090: CALL_OW 325
59094: NOT
59095: AND
59096: IFFALSE 59100
// continue ;
59098: GO 59013
// for j in tmp do
59100: LD_ADDR_VAR 0 3
59104: PUSH
59105: LD_VAR 0 4
59109: PUSH
59110: FOR_IN
59111: IFFALSE 59170
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
59113: LD_VAR 0 3
59117: PUSH
59118: LD_EXP 14
59122: PUSH
59123: LD_VAR 0 2
59127: ARRAY
59128: PUSH
59129: LD_INT 1
59131: ARRAY
59132: IN
59133: NOT
59134: PUSH
59135: LD_VAR 0 3
59139: PUSH
59140: LD_EXP 14
59144: PUSH
59145: LD_VAR 0 2
59149: ARRAY
59150: PUSH
59151: LD_INT 2
59153: ARRAY
59154: IN
59155: NOT
59156: AND
59157: IFFALSE 59168
// ComSpaceTimeShoot ( j ) ;
59159: LD_VAR 0 3
59163: PPUSH
59164: CALL 4046 0 1
59168: GO 59110
59170: POP
59171: POP
// end ;
59172: GO 59013
59174: POP
59175: POP
// end ;
59176: LD_VAR 0 1
59180: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
59181: LD_INT 0
59183: PPUSH
59184: PPUSH
59185: PPUSH
59186: PPUSH
59187: PPUSH
59188: PPUSH
59189: PPUSH
59190: PPUSH
59191: PPUSH
// if not mc_bases then
59192: LD_EXP 11
59196: NOT
59197: IFFALSE 59201
// exit ;
59199: GO 59823
// for i = 1 to mc_bases do
59201: LD_ADDR_VAR 0 2
59205: PUSH
59206: DOUBLE
59207: LD_INT 1
59209: DEC
59210: ST_TO_ADDR
59211: LD_EXP 11
59215: PUSH
59216: FOR_TO
59217: IFFALSE 59821
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
59219: LD_EXP 46
59223: PUSH
59224: LD_VAR 0 2
59228: ARRAY
59229: NOT
59230: PUSH
59231: LD_INT 38
59233: PPUSH
59234: LD_EXP 37
59238: PUSH
59239: LD_VAR 0 2
59243: ARRAY
59244: PPUSH
59245: CALL_OW 321
59249: PUSH
59250: LD_INT 2
59252: NONEQUAL
59253: OR
59254: IFFALSE 59258
// continue ;
59256: GO 59216
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
59258: LD_ADDR_VAR 0 8
59262: PUSH
59263: LD_EXP 11
59267: PUSH
59268: LD_VAR 0 2
59272: ARRAY
59273: PPUSH
59274: LD_INT 30
59276: PUSH
59277: LD_INT 34
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PPUSH
59284: CALL_OW 72
59288: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
59289: LD_ADDR_VAR 0 9
59293: PUSH
59294: LD_EXP 11
59298: PUSH
59299: LD_VAR 0 2
59303: ARRAY
59304: PPUSH
59305: LD_INT 25
59307: PUSH
59308: LD_INT 4
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PPUSH
59315: CALL_OW 72
59319: PPUSH
59320: LD_INT 0
59322: PPUSH
59323: CALL 36610 0 2
59327: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
59328: LD_VAR 0 9
59332: NOT
59333: PUSH
59334: LD_VAR 0 8
59338: NOT
59339: OR
59340: PUSH
59341: LD_EXP 11
59345: PUSH
59346: LD_VAR 0 2
59350: ARRAY
59351: PPUSH
59352: LD_INT 124
59354: PPUSH
59355: CALL 36610 0 2
59359: OR
59360: IFFALSE 59364
// continue ;
59362: GO 59216
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
59364: LD_EXP 47
59368: PUSH
59369: LD_VAR 0 2
59373: ARRAY
59374: PUSH
59375: LD_EXP 46
59379: PUSH
59380: LD_VAR 0 2
59384: ARRAY
59385: LESS
59386: PUSH
59387: LD_EXP 47
59391: PUSH
59392: LD_VAR 0 2
59396: ARRAY
59397: PUSH
59398: LD_VAR 0 8
59402: LESS
59403: AND
59404: IFFALSE 59819
// begin tmp := sci [ 1 ] ;
59406: LD_ADDR_VAR 0 7
59410: PUSH
59411: LD_VAR 0 9
59415: PUSH
59416: LD_INT 1
59418: ARRAY
59419: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
59420: LD_VAR 0 7
59424: PPUSH
59425: LD_INT 124
59427: PPUSH
59428: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
59432: LD_ADDR_VAR 0 3
59436: PUSH
59437: DOUBLE
59438: LD_EXP 46
59442: PUSH
59443: LD_VAR 0 2
59447: ARRAY
59448: INC
59449: ST_TO_ADDR
59450: LD_EXP 46
59454: PUSH
59455: LD_VAR 0 2
59459: ARRAY
59460: PUSH
59461: FOR_DOWNTO
59462: IFFALSE 59805
// begin if IsInUnit ( tmp ) then
59464: LD_VAR 0 7
59468: PPUSH
59469: CALL_OW 310
59473: IFFALSE 59484
// ComExitBuilding ( tmp ) ;
59475: LD_VAR 0 7
59479: PPUSH
59480: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
59484: LD_INT 35
59486: PPUSH
59487: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
59491: LD_VAR 0 7
59495: PPUSH
59496: CALL_OW 310
59500: NOT
59501: PUSH
59502: LD_VAR 0 7
59506: PPUSH
59507: CALL_OW 314
59511: NOT
59512: AND
59513: IFFALSE 59484
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
59515: LD_ADDR_VAR 0 6
59519: PUSH
59520: LD_VAR 0 7
59524: PPUSH
59525: CALL_OW 250
59529: PUSH
59530: LD_VAR 0 7
59534: PPUSH
59535: CALL_OW 251
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59544: LD_INT 35
59546: PPUSH
59547: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
59551: LD_ADDR_VAR 0 4
59555: PUSH
59556: LD_EXP 46
59560: PUSH
59561: LD_VAR 0 2
59565: ARRAY
59566: PUSH
59567: LD_VAR 0 3
59571: ARRAY
59572: PUSH
59573: LD_INT 1
59575: ARRAY
59576: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
59577: LD_ADDR_VAR 0 5
59581: PUSH
59582: LD_EXP 46
59586: PUSH
59587: LD_VAR 0 2
59591: ARRAY
59592: PUSH
59593: LD_VAR 0 3
59597: ARRAY
59598: PUSH
59599: LD_INT 2
59601: ARRAY
59602: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
59603: LD_VAR 0 7
59607: PPUSH
59608: LD_INT 10
59610: PPUSH
59611: CALL 10642 0 2
59615: PUSH
59616: LD_INT 4
59618: ARRAY
59619: IFFALSE 59657
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
59621: LD_VAR 0 7
59625: PPUSH
59626: LD_VAR 0 6
59630: PUSH
59631: LD_INT 1
59633: ARRAY
59634: PPUSH
59635: LD_VAR 0 6
59639: PUSH
59640: LD_INT 2
59642: ARRAY
59643: PPUSH
59644: CALL_OW 111
// wait ( 0 0$10 ) ;
59648: LD_INT 350
59650: PPUSH
59651: CALL_OW 67
// end else
59655: GO 59683
// begin ComMoveXY ( tmp , x , y ) ;
59657: LD_VAR 0 7
59661: PPUSH
59662: LD_VAR 0 4
59666: PPUSH
59667: LD_VAR 0 5
59671: PPUSH
59672: CALL_OW 111
// wait ( 0 0$3 ) ;
59676: LD_INT 105
59678: PPUSH
59679: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
59683: LD_VAR 0 7
59687: PPUSH
59688: LD_VAR 0 4
59692: PPUSH
59693: LD_VAR 0 5
59697: PPUSH
59698: CALL_OW 307
59702: IFFALSE 59544
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
59704: LD_VAR 0 7
59708: PPUSH
59709: LD_VAR 0 4
59713: PPUSH
59714: LD_VAR 0 5
59718: PPUSH
59719: LD_VAR 0 8
59723: PUSH
59724: LD_VAR 0 3
59728: ARRAY
59729: PPUSH
59730: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
59734: LD_INT 35
59736: PPUSH
59737: CALL_OW 67
// until not HasTask ( tmp ) ;
59741: LD_VAR 0 7
59745: PPUSH
59746: CALL_OW 314
59750: NOT
59751: IFFALSE 59734
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
59753: LD_ADDR_EXP 47
59757: PUSH
59758: LD_EXP 47
59762: PPUSH
59763: LD_VAR 0 2
59767: PUSH
59768: LD_EXP 47
59772: PUSH
59773: LD_VAR 0 2
59777: ARRAY
59778: PUSH
59779: LD_INT 1
59781: PLUS
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PPUSH
59787: LD_VAR 0 8
59791: PUSH
59792: LD_VAR 0 3
59796: ARRAY
59797: PPUSH
59798: CALL 8049 0 3
59802: ST_TO_ADDR
// end ;
59803: GO 59461
59805: POP
59806: POP
// MC_Reset ( i , 124 ) ;
59807: LD_VAR 0 2
59811: PPUSH
59812: LD_INT 124
59814: PPUSH
59815: CALL 43426 0 2
// end ; end ;
59819: GO 59216
59821: POP
59822: POP
// end ;
59823: LD_VAR 0 1
59827: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
59828: LD_INT 0
59830: PPUSH
59831: PPUSH
59832: PPUSH
// if not mc_bases then
59833: LD_EXP 11
59837: NOT
59838: IFFALSE 59842
// exit ;
59840: GO 60448
// for i = 1 to mc_bases do
59842: LD_ADDR_VAR 0 2
59846: PUSH
59847: DOUBLE
59848: LD_INT 1
59850: DEC
59851: ST_TO_ADDR
59852: LD_EXP 11
59856: PUSH
59857: FOR_TO
59858: IFFALSE 60446
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59860: LD_ADDR_VAR 0 3
59864: PUSH
59865: LD_EXP 11
59869: PUSH
59870: LD_VAR 0 2
59874: ARRAY
59875: PPUSH
59876: LD_INT 25
59878: PUSH
59879: LD_INT 4
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PPUSH
59886: CALL_OW 72
59890: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
59891: LD_VAR 0 3
59895: NOT
59896: PUSH
59897: LD_EXP 48
59901: PUSH
59902: LD_VAR 0 2
59906: ARRAY
59907: NOT
59908: OR
59909: PUSH
59910: LD_EXP 11
59914: PUSH
59915: LD_VAR 0 2
59919: ARRAY
59920: PPUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 30
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 30
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: PPUSH
59949: CALL_OW 72
59953: NOT
59954: OR
59955: IFFALSE 60005
// begin if mc_deposits_finder [ i ] then
59957: LD_EXP 49
59961: PUSH
59962: LD_VAR 0 2
59966: ARRAY
59967: IFFALSE 60003
// begin MC_Reset ( i , 125 ) ;
59969: LD_VAR 0 2
59973: PPUSH
59974: LD_INT 125
59976: PPUSH
59977: CALL 43426 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59981: LD_ADDR_EXP 49
59985: PUSH
59986: LD_EXP 49
59990: PPUSH
59991: LD_VAR 0 2
59995: PPUSH
59996: EMPTY
59997: PPUSH
59998: CALL_OW 1
60002: ST_TO_ADDR
// end ; continue ;
60003: GO 59857
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
60005: LD_EXP 48
60009: PUSH
60010: LD_VAR 0 2
60014: ARRAY
60015: PUSH
60016: LD_INT 1
60018: ARRAY
60019: PUSH
60020: LD_INT 3
60022: ARRAY
60023: PUSH
60024: LD_INT 1
60026: EQUAL
60027: PUSH
60028: LD_INT 20
60030: PPUSH
60031: LD_EXP 37
60035: PUSH
60036: LD_VAR 0 2
60040: ARRAY
60041: PPUSH
60042: CALL_OW 321
60046: PUSH
60047: LD_INT 2
60049: NONEQUAL
60050: AND
60051: IFFALSE 60101
// begin if mc_deposits_finder [ i ] then
60053: LD_EXP 49
60057: PUSH
60058: LD_VAR 0 2
60062: ARRAY
60063: IFFALSE 60099
// begin MC_Reset ( i , 125 ) ;
60065: LD_VAR 0 2
60069: PPUSH
60070: LD_INT 125
60072: PPUSH
60073: CALL 43426 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
60077: LD_ADDR_EXP 49
60081: PUSH
60082: LD_EXP 49
60086: PPUSH
60087: LD_VAR 0 2
60091: PPUSH
60092: EMPTY
60093: PPUSH
60094: CALL_OW 1
60098: ST_TO_ADDR
// end ; continue ;
60099: GO 59857
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
60101: LD_EXP 48
60105: PUSH
60106: LD_VAR 0 2
60110: ARRAY
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PUSH
60116: LD_INT 1
60118: ARRAY
60119: PPUSH
60120: LD_EXP 48
60124: PUSH
60125: LD_VAR 0 2
60129: ARRAY
60130: PUSH
60131: LD_INT 1
60133: ARRAY
60134: PUSH
60135: LD_INT 2
60137: ARRAY
60138: PPUSH
60139: LD_EXP 37
60143: PUSH
60144: LD_VAR 0 2
60148: ARRAY
60149: PPUSH
60150: CALL_OW 440
60154: IFFALSE 60197
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
60156: LD_ADDR_EXP 48
60160: PUSH
60161: LD_EXP 48
60165: PPUSH
60166: LD_VAR 0 2
60170: PPUSH
60171: LD_EXP 48
60175: PUSH
60176: LD_VAR 0 2
60180: ARRAY
60181: PPUSH
60182: LD_INT 1
60184: PPUSH
60185: CALL_OW 3
60189: PPUSH
60190: CALL_OW 1
60194: ST_TO_ADDR
60195: GO 60444
// begin if not mc_deposits_finder [ i ] then
60197: LD_EXP 49
60201: PUSH
60202: LD_VAR 0 2
60206: ARRAY
60207: NOT
60208: IFFALSE 60260
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
60210: LD_ADDR_EXP 49
60214: PUSH
60215: LD_EXP 49
60219: PPUSH
60220: LD_VAR 0 2
60224: PPUSH
60225: LD_VAR 0 3
60229: PUSH
60230: LD_INT 1
60232: ARRAY
60233: PUSH
60234: EMPTY
60235: LIST
60236: PPUSH
60237: CALL_OW 1
60241: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
60242: LD_VAR 0 3
60246: PUSH
60247: LD_INT 1
60249: ARRAY
60250: PPUSH
60251: LD_INT 125
60253: PPUSH
60254: CALL_OW 109
// end else
60258: GO 60444
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
60260: LD_EXP 49
60264: PUSH
60265: LD_VAR 0 2
60269: ARRAY
60270: PUSH
60271: LD_INT 1
60273: ARRAY
60274: PPUSH
60275: CALL_OW 310
60279: IFFALSE 60302
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
60281: LD_EXP 49
60285: PUSH
60286: LD_VAR 0 2
60290: ARRAY
60291: PUSH
60292: LD_INT 1
60294: ARRAY
60295: PPUSH
60296: CALL_OW 122
60300: GO 60444
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
60302: LD_EXP 49
60306: PUSH
60307: LD_VAR 0 2
60311: ARRAY
60312: PUSH
60313: LD_INT 1
60315: ARRAY
60316: PPUSH
60317: CALL_OW 314
60321: NOT
60322: PUSH
60323: LD_EXP 49
60327: PUSH
60328: LD_VAR 0 2
60332: ARRAY
60333: PUSH
60334: LD_INT 1
60336: ARRAY
60337: PPUSH
60338: LD_EXP 48
60342: PUSH
60343: LD_VAR 0 2
60347: ARRAY
60348: PUSH
60349: LD_INT 1
60351: ARRAY
60352: PUSH
60353: LD_INT 1
60355: ARRAY
60356: PPUSH
60357: LD_EXP 48
60361: PUSH
60362: LD_VAR 0 2
60366: ARRAY
60367: PUSH
60368: LD_INT 1
60370: ARRAY
60371: PUSH
60372: LD_INT 2
60374: ARRAY
60375: PPUSH
60376: CALL_OW 297
60380: PUSH
60381: LD_INT 6
60383: GREATER
60384: AND
60385: IFFALSE 60444
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
60387: LD_EXP 49
60391: PUSH
60392: LD_VAR 0 2
60396: ARRAY
60397: PUSH
60398: LD_INT 1
60400: ARRAY
60401: PPUSH
60402: LD_EXP 48
60406: PUSH
60407: LD_VAR 0 2
60411: ARRAY
60412: PUSH
60413: LD_INT 1
60415: ARRAY
60416: PUSH
60417: LD_INT 1
60419: ARRAY
60420: PPUSH
60421: LD_EXP 48
60425: PUSH
60426: LD_VAR 0 2
60430: ARRAY
60431: PUSH
60432: LD_INT 1
60434: ARRAY
60435: PUSH
60436: LD_INT 2
60438: ARRAY
60439: PPUSH
60440: CALL_OW 111
// end ; end ; end ;
60444: GO 59857
60446: POP
60447: POP
// end ;
60448: LD_VAR 0 1
60452: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
60453: LD_INT 0
60455: PPUSH
60456: PPUSH
60457: PPUSH
60458: PPUSH
60459: PPUSH
60460: PPUSH
60461: PPUSH
60462: PPUSH
60463: PPUSH
60464: PPUSH
60465: PPUSH
// if not mc_bases then
60466: LD_EXP 11
60470: NOT
60471: IFFALSE 60475
// exit ;
60473: GO 61415
// for i = 1 to mc_bases do
60475: LD_ADDR_VAR 0 2
60479: PUSH
60480: DOUBLE
60481: LD_INT 1
60483: DEC
60484: ST_TO_ADDR
60485: LD_EXP 11
60489: PUSH
60490: FOR_TO
60491: IFFALSE 61413
// begin if not mc_bases [ i ] or mc_scan [ i ] then
60493: LD_EXP 11
60497: PUSH
60498: LD_VAR 0 2
60502: ARRAY
60503: NOT
60504: PUSH
60505: LD_EXP 34
60509: PUSH
60510: LD_VAR 0 2
60514: ARRAY
60515: OR
60516: IFFALSE 60520
// continue ;
60518: GO 60490
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
60520: LD_ADDR_VAR 0 7
60524: PUSH
60525: LD_EXP 11
60529: PUSH
60530: LD_VAR 0 2
60534: ARRAY
60535: PUSH
60536: LD_INT 1
60538: ARRAY
60539: PPUSH
60540: CALL_OW 248
60544: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
60545: LD_VAR 0 7
60549: PUSH
60550: LD_INT 3
60552: EQUAL
60553: PUSH
60554: LD_EXP 30
60558: PUSH
60559: LD_VAR 0 2
60563: ARRAY
60564: PUSH
60565: LD_EXP 33
60569: PUSH
60570: LD_VAR 0 2
60574: ARRAY
60575: UNION
60576: PPUSH
60577: LD_INT 33
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PPUSH
60587: CALL_OW 72
60591: NOT
60592: OR
60593: IFFALSE 60597
// continue ;
60595: GO 60490
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
60597: LD_ADDR_VAR 0 9
60601: PUSH
60602: LD_EXP 11
60606: PUSH
60607: LD_VAR 0 2
60611: ARRAY
60612: PPUSH
60613: LD_INT 30
60615: PUSH
60616: LD_INT 36
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PPUSH
60623: CALL_OW 72
60627: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
60628: LD_ADDR_VAR 0 10
60632: PUSH
60633: LD_EXP 30
60637: PUSH
60638: LD_VAR 0 2
60642: ARRAY
60643: PPUSH
60644: LD_INT 34
60646: PUSH
60647: LD_INT 31
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PPUSH
60654: CALL_OW 72
60658: ST_TO_ADDR
// if not cts and not mcts then
60659: LD_VAR 0 9
60663: NOT
60664: PUSH
60665: LD_VAR 0 10
60669: NOT
60670: AND
60671: IFFALSE 60675
// continue ;
60673: GO 60490
// x := cts ;
60675: LD_ADDR_VAR 0 11
60679: PUSH
60680: LD_VAR 0 9
60684: ST_TO_ADDR
// if not x then
60685: LD_VAR 0 11
60689: NOT
60690: IFFALSE 60702
// x := mcts ;
60692: LD_ADDR_VAR 0 11
60696: PUSH
60697: LD_VAR 0 10
60701: ST_TO_ADDR
// if not x then
60702: LD_VAR 0 11
60706: NOT
60707: IFFALSE 60711
// continue ;
60709: GO 60490
// if mc_remote_driver [ i ] then
60711: LD_EXP 51
60715: PUSH
60716: LD_VAR 0 2
60720: ARRAY
60721: IFFALSE 61108
// for j in mc_remote_driver [ i ] do
60723: LD_ADDR_VAR 0 3
60727: PUSH
60728: LD_EXP 51
60732: PUSH
60733: LD_VAR 0 2
60737: ARRAY
60738: PUSH
60739: FOR_IN
60740: IFFALSE 61106
// begin if GetClass ( j ) <> 3 then
60742: LD_VAR 0 3
60746: PPUSH
60747: CALL_OW 257
60751: PUSH
60752: LD_INT 3
60754: NONEQUAL
60755: IFFALSE 60808
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
60757: LD_ADDR_EXP 51
60761: PUSH
60762: LD_EXP 51
60766: PPUSH
60767: LD_VAR 0 2
60771: PPUSH
60772: LD_EXP 51
60776: PUSH
60777: LD_VAR 0 2
60781: ARRAY
60782: PUSH
60783: LD_VAR 0 3
60787: DIFF
60788: PPUSH
60789: CALL_OW 1
60793: ST_TO_ADDR
// SetTag ( j , 0 ) ;
60794: LD_VAR 0 3
60798: PPUSH
60799: LD_INT 0
60801: PPUSH
60802: CALL_OW 109
// continue ;
60806: GO 60739
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
60808: LD_EXP 30
60812: PUSH
60813: LD_VAR 0 2
60817: ARRAY
60818: PPUSH
60819: LD_INT 34
60821: PUSH
60822: LD_INT 31
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 58
60831: PUSH
60832: EMPTY
60833: LIST
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PPUSH
60839: CALL_OW 72
60843: PUSH
60844: LD_VAR 0 3
60848: PPUSH
60849: CALL 36698 0 1
60853: NOT
60854: AND
60855: IFFALSE 60926
// begin if IsInUnit ( j ) then
60857: LD_VAR 0 3
60861: PPUSH
60862: CALL_OW 310
60866: IFFALSE 60877
// ComExitBuilding ( j ) ;
60868: LD_VAR 0 3
60872: PPUSH
60873: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
60877: LD_VAR 0 3
60881: PPUSH
60882: LD_EXP 30
60886: PUSH
60887: LD_VAR 0 2
60891: ARRAY
60892: PPUSH
60893: LD_INT 34
60895: PUSH
60896: LD_INT 31
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 58
60905: PUSH
60906: EMPTY
60907: LIST
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PPUSH
60913: CALL_OW 72
60917: PUSH
60918: LD_INT 1
60920: ARRAY
60921: PPUSH
60922: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
60926: LD_VAR 0 3
60930: PPUSH
60931: CALL_OW 310
60935: NOT
60936: PUSH
60937: LD_VAR 0 3
60941: PPUSH
60942: CALL_OW 310
60946: PPUSH
60947: CALL_OW 266
60951: PUSH
60952: LD_INT 36
60954: NONEQUAL
60955: PUSH
60956: LD_VAR 0 3
60960: PPUSH
60961: CALL 36698 0 1
60965: NOT
60966: AND
60967: OR
60968: IFFALSE 61104
// begin if IsInUnit ( j ) then
60970: LD_VAR 0 3
60974: PPUSH
60975: CALL_OW 310
60979: IFFALSE 60990
// ComExitBuilding ( j ) ;
60981: LD_VAR 0 3
60985: PPUSH
60986: CALL_OW 122
// ct := 0 ;
60990: LD_ADDR_VAR 0 8
60994: PUSH
60995: LD_INT 0
60997: ST_TO_ADDR
// for k in x do
60998: LD_ADDR_VAR 0 4
61002: PUSH
61003: LD_VAR 0 11
61007: PUSH
61008: FOR_IN
61009: IFFALSE 61082
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
61011: LD_VAR 0 4
61015: PPUSH
61016: CALL_OW 264
61020: PUSH
61021: LD_INT 31
61023: EQUAL
61024: PUSH
61025: LD_VAR 0 4
61029: PPUSH
61030: CALL_OW 311
61034: NOT
61035: AND
61036: PUSH
61037: LD_VAR 0 4
61041: PPUSH
61042: CALL_OW 266
61046: PUSH
61047: LD_INT 36
61049: EQUAL
61050: PUSH
61051: LD_VAR 0 4
61055: PPUSH
61056: CALL_OW 313
61060: PUSH
61061: LD_INT 3
61063: LESS
61064: AND
61065: OR
61066: IFFALSE 61080
// begin ct := k ;
61068: LD_ADDR_VAR 0 8
61072: PUSH
61073: LD_VAR 0 4
61077: ST_TO_ADDR
// break ;
61078: GO 61082
// end ;
61080: GO 61008
61082: POP
61083: POP
// if ct then
61084: LD_VAR 0 8
61088: IFFALSE 61104
// ComEnterUnit ( j , ct ) ;
61090: LD_VAR 0 3
61094: PPUSH
61095: LD_VAR 0 8
61099: PPUSH
61100: CALL_OW 120
// end ; end ;
61104: GO 60739
61106: POP
61107: POP
// places := 0 ;
61108: LD_ADDR_VAR 0 5
61112: PUSH
61113: LD_INT 0
61115: ST_TO_ADDR
// for j = 1 to x do
61116: LD_ADDR_VAR 0 3
61120: PUSH
61121: DOUBLE
61122: LD_INT 1
61124: DEC
61125: ST_TO_ADDR
61126: LD_VAR 0 11
61130: PUSH
61131: FOR_TO
61132: IFFALSE 61208
// if GetWeapon ( x [ j ] ) = ar_control_tower then
61134: LD_VAR 0 11
61138: PUSH
61139: LD_VAR 0 3
61143: ARRAY
61144: PPUSH
61145: CALL_OW 264
61149: PUSH
61150: LD_INT 31
61152: EQUAL
61153: IFFALSE 61171
// places := places + 1 else
61155: LD_ADDR_VAR 0 5
61159: PUSH
61160: LD_VAR 0 5
61164: PUSH
61165: LD_INT 1
61167: PLUS
61168: ST_TO_ADDR
61169: GO 61206
// if GetBType ( x [ j ] ) = b_control_tower then
61171: LD_VAR 0 11
61175: PUSH
61176: LD_VAR 0 3
61180: ARRAY
61181: PPUSH
61182: CALL_OW 266
61186: PUSH
61187: LD_INT 36
61189: EQUAL
61190: IFFALSE 61206
// places := places + 3 ;
61192: LD_ADDR_VAR 0 5
61196: PUSH
61197: LD_VAR 0 5
61201: PUSH
61202: LD_INT 3
61204: PLUS
61205: ST_TO_ADDR
61206: GO 61131
61208: POP
61209: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
61210: LD_VAR 0 5
61214: PUSH
61215: LD_INT 0
61217: EQUAL
61218: PUSH
61219: LD_VAR 0 5
61223: PUSH
61224: LD_EXP 51
61228: PUSH
61229: LD_VAR 0 2
61233: ARRAY
61234: LESSEQUAL
61235: OR
61236: IFFALSE 61240
// continue ;
61238: GO 60490
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
61240: LD_ADDR_VAR 0 6
61244: PUSH
61245: LD_EXP 11
61249: PUSH
61250: LD_VAR 0 2
61254: ARRAY
61255: PPUSH
61256: LD_INT 25
61258: PUSH
61259: LD_INT 3
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PPUSH
61266: CALL_OW 72
61270: PUSH
61271: LD_EXP 51
61275: PUSH
61276: LD_VAR 0 2
61280: ARRAY
61281: DIFF
61282: PPUSH
61283: LD_INT 3
61285: PPUSH
61286: CALL 37598 0 2
61290: ST_TO_ADDR
// for j in tmp do
61291: LD_ADDR_VAR 0 3
61295: PUSH
61296: LD_VAR 0 6
61300: PUSH
61301: FOR_IN
61302: IFFALSE 61337
// if GetTag ( j ) > 0 then
61304: LD_VAR 0 3
61308: PPUSH
61309: CALL_OW 110
61313: PUSH
61314: LD_INT 0
61316: GREATER
61317: IFFALSE 61335
// tmp := tmp diff j ;
61319: LD_ADDR_VAR 0 6
61323: PUSH
61324: LD_VAR 0 6
61328: PUSH
61329: LD_VAR 0 3
61333: DIFF
61334: ST_TO_ADDR
61335: GO 61301
61337: POP
61338: POP
// if not tmp then
61339: LD_VAR 0 6
61343: NOT
61344: IFFALSE 61348
// continue ;
61346: GO 60490
// if places then
61348: LD_VAR 0 5
61352: IFFALSE 61411
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
61354: LD_ADDR_EXP 51
61358: PUSH
61359: LD_EXP 51
61363: PPUSH
61364: LD_VAR 0 2
61368: PPUSH
61369: LD_EXP 51
61373: PUSH
61374: LD_VAR 0 2
61378: ARRAY
61379: PUSH
61380: LD_VAR 0 6
61384: PUSH
61385: LD_INT 1
61387: ARRAY
61388: UNION
61389: PPUSH
61390: CALL_OW 1
61394: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
61395: LD_VAR 0 6
61399: PUSH
61400: LD_INT 1
61402: ARRAY
61403: PPUSH
61404: LD_INT 126
61406: PPUSH
61407: CALL_OW 109
// end ; end ;
61411: GO 60490
61413: POP
61414: POP
// end ;
61415: LD_VAR 0 1
61419: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
61420: LD_INT 0
61422: PPUSH
61423: PPUSH
61424: PPUSH
61425: PPUSH
61426: PPUSH
61427: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
61428: LD_VAR 0 1
61432: NOT
61433: PUSH
61434: LD_VAR 0 2
61438: NOT
61439: OR
61440: PUSH
61441: LD_VAR 0 3
61445: NOT
61446: OR
61447: PUSH
61448: LD_VAR 0 4
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 5
61467: PUSH
61468: LD_INT 8
61470: PUSH
61471: LD_INT 9
61473: PUSH
61474: LD_INT 15
61476: PUSH
61477: LD_INT 16
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: IN
61491: NOT
61492: OR
61493: IFFALSE 61497
// exit ;
61495: GO 62397
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
61497: LD_ADDR_VAR 0 2
61501: PUSH
61502: LD_VAR 0 2
61506: PPUSH
61507: LD_INT 21
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 24
61519: PUSH
61520: LD_INT 250
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PPUSH
61531: CALL_OW 72
61535: ST_TO_ADDR
// case class of 1 , 15 :
61536: LD_VAR 0 4
61540: PUSH
61541: LD_INT 1
61543: DOUBLE
61544: EQUAL
61545: IFTRUE 61555
61547: LD_INT 15
61549: DOUBLE
61550: EQUAL
61551: IFTRUE 61555
61553: GO 61640
61555: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
61556: LD_ADDR_VAR 0 8
61560: PUSH
61561: LD_VAR 0 2
61565: PPUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 30
61571: PUSH
61572: LD_INT 32
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 30
61581: PUSH
61582: LD_INT 31
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: PPUSH
61594: CALL_OW 72
61598: PUSH
61599: LD_VAR 0 2
61603: PPUSH
61604: LD_INT 2
61606: PUSH
61607: LD_INT 30
61609: PUSH
61610: LD_INT 4
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 30
61619: PUSH
61620: LD_INT 5
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: LIST
61631: PPUSH
61632: CALL_OW 72
61636: ADD
61637: ST_TO_ADDR
61638: GO 61886
61640: LD_INT 2
61642: DOUBLE
61643: EQUAL
61644: IFTRUE 61654
61646: LD_INT 16
61648: DOUBLE
61649: EQUAL
61650: IFTRUE 61654
61652: GO 61700
61654: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
61655: LD_ADDR_VAR 0 8
61659: PUSH
61660: LD_VAR 0 2
61664: PPUSH
61665: LD_INT 2
61667: PUSH
61668: LD_INT 30
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 30
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: PPUSH
61693: CALL_OW 72
61697: ST_TO_ADDR
61698: GO 61886
61700: LD_INT 3
61702: DOUBLE
61703: EQUAL
61704: IFTRUE 61708
61706: GO 61754
61708: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
61709: LD_ADDR_VAR 0 8
61713: PUSH
61714: LD_VAR 0 2
61718: PPUSH
61719: LD_INT 2
61721: PUSH
61722: LD_INT 30
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 30
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: LIST
61746: PPUSH
61747: CALL_OW 72
61751: ST_TO_ADDR
61752: GO 61886
61754: LD_INT 4
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61762
61760: GO 61819
61762: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
61763: LD_ADDR_VAR 0 8
61767: PUSH
61768: LD_VAR 0 2
61772: PPUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 30
61778: PUSH
61779: LD_INT 6
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 30
61788: PUSH
61789: LD_INT 7
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 30
61798: PUSH
61799: LD_INT 8
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: PPUSH
61812: CALL_OW 72
61816: ST_TO_ADDR
61817: GO 61886
61819: LD_INT 5
61821: DOUBLE
61822: EQUAL
61823: IFTRUE 61839
61825: LD_INT 8
61827: DOUBLE
61828: EQUAL
61829: IFTRUE 61839
61831: LD_INT 9
61833: DOUBLE
61834: EQUAL
61835: IFTRUE 61839
61837: GO 61885
61839: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
61840: LD_ADDR_VAR 0 8
61844: PUSH
61845: LD_VAR 0 2
61849: PPUSH
61850: LD_INT 2
61852: PUSH
61853: LD_INT 30
61855: PUSH
61856: LD_INT 4
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 30
61865: PUSH
61866: LD_INT 5
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: LIST
61877: PPUSH
61878: CALL_OW 72
61882: ST_TO_ADDR
61883: GO 61886
61885: POP
// if not tmp then
61886: LD_VAR 0 8
61890: NOT
61891: IFFALSE 61895
// exit ;
61893: GO 62397
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
61895: LD_VAR 0 4
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: LD_INT 15
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: IN
61910: PUSH
61911: LD_EXP 20
61915: PUSH
61916: LD_VAR 0 1
61920: ARRAY
61921: AND
61922: IFFALSE 62078
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
61924: LD_ADDR_VAR 0 9
61928: PUSH
61929: LD_EXP 20
61933: PUSH
61934: LD_VAR 0 1
61938: ARRAY
61939: PUSH
61940: LD_INT 1
61942: ARRAY
61943: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
61944: LD_VAR 0 9
61948: PUSH
61949: LD_EXP 21
61953: PUSH
61954: LD_VAR 0 1
61958: ARRAY
61959: IN
61960: NOT
61961: IFFALSE 62076
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
61963: LD_ADDR_EXP 21
61967: PUSH
61968: LD_EXP 21
61972: PPUSH
61973: LD_VAR 0 1
61977: PUSH
61978: LD_EXP 21
61982: PUSH
61983: LD_VAR 0 1
61987: ARRAY
61988: PUSH
61989: LD_INT 1
61991: PLUS
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PPUSH
61997: LD_VAR 0 9
62001: PPUSH
62002: CALL 8049 0 3
62006: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
62007: LD_ADDR_EXP 20
62011: PUSH
62012: LD_EXP 20
62016: PPUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: LD_EXP 20
62026: PUSH
62027: LD_VAR 0 1
62031: ARRAY
62032: PUSH
62033: LD_VAR 0 9
62037: DIFF
62038: PPUSH
62039: CALL_OW 1
62043: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
62044: LD_VAR 0 3
62048: PPUSH
62049: LD_EXP 21
62053: PUSH
62054: LD_VAR 0 1
62058: ARRAY
62059: PUSH
62060: LD_EXP 21
62064: PUSH
62065: LD_VAR 0 1
62069: ARRAY
62070: ARRAY
62071: PPUSH
62072: CALL_OW 120
// end ; exit ;
62076: GO 62397
// end ; if tmp > 1 then
62078: LD_VAR 0 8
62082: PUSH
62083: LD_INT 1
62085: GREATER
62086: IFFALSE 62190
// for i = 2 to tmp do
62088: LD_ADDR_VAR 0 6
62092: PUSH
62093: DOUBLE
62094: LD_INT 2
62096: DEC
62097: ST_TO_ADDR
62098: LD_VAR 0 8
62102: PUSH
62103: FOR_TO
62104: IFFALSE 62188
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
62106: LD_VAR 0 8
62110: PUSH
62111: LD_VAR 0 6
62115: ARRAY
62116: PPUSH
62117: CALL_OW 461
62121: PUSH
62122: LD_INT 6
62124: EQUAL
62125: IFFALSE 62186
// begin x := tmp [ i ] ;
62127: LD_ADDR_VAR 0 9
62131: PUSH
62132: LD_VAR 0 8
62136: PUSH
62137: LD_VAR 0 6
62141: ARRAY
62142: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
62143: LD_ADDR_VAR 0 8
62147: PUSH
62148: LD_VAR 0 8
62152: PPUSH
62153: LD_VAR 0 6
62157: PPUSH
62158: CALL_OW 3
62162: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
62163: LD_ADDR_VAR 0 8
62167: PUSH
62168: LD_VAR 0 8
62172: PPUSH
62173: LD_INT 1
62175: PPUSH
62176: LD_VAR 0 9
62180: PPUSH
62181: CALL_OW 2
62185: ST_TO_ADDR
// end ;
62186: GO 62103
62188: POP
62189: POP
// for i in tmp do
62190: LD_ADDR_VAR 0 6
62194: PUSH
62195: LD_VAR 0 8
62199: PUSH
62200: FOR_IN
62201: IFFALSE 62270
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
62203: LD_VAR 0 6
62207: PPUSH
62208: CALL_OW 313
62212: PUSH
62213: LD_INT 6
62215: LESS
62216: PUSH
62217: LD_VAR 0 6
62221: PPUSH
62222: CALL_OW 266
62226: PUSH
62227: LD_INT 31
62229: PUSH
62230: LD_INT 32
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: IN
62237: NOT
62238: AND
62239: PUSH
62240: LD_VAR 0 6
62244: PPUSH
62245: CALL_OW 313
62249: PUSH
62250: LD_INT 0
62252: EQUAL
62253: OR
62254: IFFALSE 62268
// begin j := i ;
62256: LD_ADDR_VAR 0 7
62260: PUSH
62261: LD_VAR 0 6
62265: ST_TO_ADDR
// break ;
62266: GO 62270
// end ; end ;
62268: GO 62200
62270: POP
62271: POP
// if j then
62272: LD_VAR 0 7
62276: IFFALSE 62294
// ComEnterUnit ( unit , j ) else
62278: LD_VAR 0 3
62282: PPUSH
62283: LD_VAR 0 7
62287: PPUSH
62288: CALL_OW 120
62292: GO 62397
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62294: LD_ADDR_VAR 0 10
62298: PUSH
62299: LD_VAR 0 2
62303: PPUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 30
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 30
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: PPUSH
62332: CALL_OW 72
62336: ST_TO_ADDR
// if depot then
62337: LD_VAR 0 10
62341: IFFALSE 62397
// begin depot := NearestUnitToUnit ( depot , unit ) ;
62343: LD_ADDR_VAR 0 10
62347: PUSH
62348: LD_VAR 0 10
62352: PPUSH
62353: LD_VAR 0 3
62357: PPUSH
62358: CALL_OW 74
62362: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
62363: LD_VAR 0 3
62367: PPUSH
62368: LD_VAR 0 10
62372: PPUSH
62373: CALL_OW 296
62377: PUSH
62378: LD_INT 10
62380: GREATER
62381: IFFALSE 62397
// ComStandNearbyBuilding ( unit , depot ) ;
62383: LD_VAR 0 3
62387: PPUSH
62388: LD_VAR 0 10
62392: PPUSH
62393: CALL 4663 0 2
// end ; end ; end ;
62397: LD_VAR 0 5
62401: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
62402: LD_INT 0
62404: PPUSH
62405: PPUSH
62406: PPUSH
62407: PPUSH
// if not mc_bases then
62408: LD_EXP 11
62412: NOT
62413: IFFALSE 62417
// exit ;
62415: GO 62656
// for i = 1 to mc_bases do
62417: LD_ADDR_VAR 0 2
62421: PUSH
62422: DOUBLE
62423: LD_INT 1
62425: DEC
62426: ST_TO_ADDR
62427: LD_EXP 11
62431: PUSH
62432: FOR_TO
62433: IFFALSE 62654
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
62435: LD_ADDR_VAR 0 4
62439: PUSH
62440: LD_EXP 11
62444: PUSH
62445: LD_VAR 0 2
62449: ARRAY
62450: PPUSH
62451: LD_INT 21
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PPUSH
62461: CALL_OW 72
62465: PUSH
62466: LD_EXP 40
62470: PUSH
62471: LD_VAR 0 2
62475: ARRAY
62476: UNION
62477: ST_TO_ADDR
// if not tmp then
62478: LD_VAR 0 4
62482: NOT
62483: IFFALSE 62487
// continue ;
62485: GO 62432
// for j in tmp do
62487: LD_ADDR_VAR 0 3
62491: PUSH
62492: LD_VAR 0 4
62496: PUSH
62497: FOR_IN
62498: IFFALSE 62650
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
62500: LD_VAR 0 3
62504: PPUSH
62505: CALL_OW 110
62509: NOT
62510: PUSH
62511: LD_VAR 0 3
62515: PPUSH
62516: CALL_OW 314
62520: NOT
62521: AND
62522: PUSH
62523: LD_VAR 0 3
62527: PPUSH
62528: CALL_OW 311
62532: NOT
62533: AND
62534: PUSH
62535: LD_VAR 0 3
62539: PPUSH
62540: CALL_OW 310
62544: NOT
62545: AND
62546: PUSH
62547: LD_VAR 0 3
62551: PUSH
62552: LD_EXP 14
62556: PUSH
62557: LD_VAR 0 2
62561: ARRAY
62562: PUSH
62563: LD_INT 1
62565: ARRAY
62566: IN
62567: NOT
62568: AND
62569: PUSH
62570: LD_VAR 0 3
62574: PUSH
62575: LD_EXP 14
62579: PUSH
62580: LD_VAR 0 2
62584: ARRAY
62585: PUSH
62586: LD_INT 2
62588: ARRAY
62589: IN
62590: NOT
62591: AND
62592: PUSH
62593: LD_VAR 0 3
62597: PUSH
62598: LD_EXP 23
62602: PUSH
62603: LD_VAR 0 2
62607: ARRAY
62608: IN
62609: NOT
62610: AND
62611: IFFALSE 62648
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
62613: LD_VAR 0 2
62617: PPUSH
62618: LD_EXP 11
62622: PUSH
62623: LD_VAR 0 2
62627: ARRAY
62628: PPUSH
62629: LD_VAR 0 3
62633: PPUSH
62634: LD_VAR 0 3
62638: PPUSH
62639: CALL_OW 257
62643: PPUSH
62644: CALL 61420 0 4
// end ;
62648: GO 62497
62650: POP
62651: POP
// end ;
62652: GO 62432
62654: POP
62655: POP
// end ;
62656: LD_VAR 0 1
62660: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
62661: LD_INT 0
62663: PPUSH
62664: PPUSH
62665: PPUSH
62666: PPUSH
62667: PPUSH
62668: PPUSH
// if not mc_bases [ base ] then
62669: LD_EXP 11
62673: PUSH
62674: LD_VAR 0 1
62678: ARRAY
62679: NOT
62680: IFFALSE 62684
// exit ;
62682: GO 62866
// tmp := [ ] ;
62684: LD_ADDR_VAR 0 6
62688: PUSH
62689: EMPTY
62690: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
62691: LD_ADDR_VAR 0 7
62695: PUSH
62696: LD_VAR 0 3
62700: PPUSH
62701: LD_INT 0
62703: PPUSH
62704: CALL_OW 517
62708: ST_TO_ADDR
// if not list then
62709: LD_VAR 0 7
62713: NOT
62714: IFFALSE 62718
// exit ;
62716: GO 62866
// for i = 1 to amount do
62718: LD_ADDR_VAR 0 5
62722: PUSH
62723: DOUBLE
62724: LD_INT 1
62726: DEC
62727: ST_TO_ADDR
62728: LD_VAR 0 2
62732: PUSH
62733: FOR_TO
62734: IFFALSE 62814
// begin x := rand ( 1 , list [ 1 ] ) ;
62736: LD_ADDR_VAR 0 8
62740: PUSH
62741: LD_INT 1
62743: PPUSH
62744: LD_VAR 0 7
62748: PUSH
62749: LD_INT 1
62751: ARRAY
62752: PPUSH
62753: CALL_OW 12
62757: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
62758: LD_ADDR_VAR 0 6
62762: PUSH
62763: LD_VAR 0 6
62767: PPUSH
62768: LD_VAR 0 5
62772: PPUSH
62773: LD_VAR 0 7
62777: PUSH
62778: LD_INT 1
62780: ARRAY
62781: PUSH
62782: LD_VAR 0 8
62786: ARRAY
62787: PUSH
62788: LD_VAR 0 7
62792: PUSH
62793: LD_INT 2
62795: ARRAY
62796: PUSH
62797: LD_VAR 0 8
62801: ARRAY
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PPUSH
62807: CALL_OW 1
62811: ST_TO_ADDR
// end ;
62812: GO 62733
62814: POP
62815: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
62816: LD_ADDR_EXP 24
62820: PUSH
62821: LD_EXP 24
62825: PPUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: LD_VAR 0 6
62835: PPUSH
62836: CALL_OW 1
62840: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
62841: LD_ADDR_EXP 26
62845: PUSH
62846: LD_EXP 26
62850: PPUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: LD_VAR 0 3
62860: PPUSH
62861: CALL_OW 1
62865: ST_TO_ADDR
// end ;
62866: LD_VAR 0 4
62870: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
62871: LD_INT 0
62873: PPUSH
// if not mc_bases [ base ] then
62874: LD_EXP 11
62878: PUSH
62879: LD_VAR 0 1
62883: ARRAY
62884: NOT
62885: IFFALSE 62889
// exit ;
62887: GO 62914
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
62889: LD_ADDR_EXP 16
62893: PUSH
62894: LD_EXP 16
62898: PPUSH
62899: LD_VAR 0 1
62903: PPUSH
62904: LD_VAR 0 2
62908: PPUSH
62909: CALL_OW 1
62913: ST_TO_ADDR
// end ;
62914: LD_VAR 0 3
62918: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
62919: LD_INT 0
62921: PPUSH
// if not mc_bases [ base ] then
62922: LD_EXP 11
62926: PUSH
62927: LD_VAR 0 1
62931: ARRAY
62932: NOT
62933: IFFALSE 62937
// exit ;
62935: GO 62974
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
62937: LD_ADDR_EXP 16
62941: PUSH
62942: LD_EXP 16
62946: PPUSH
62947: LD_VAR 0 1
62951: PPUSH
62952: LD_EXP 16
62956: PUSH
62957: LD_VAR 0 1
62961: ARRAY
62962: PUSH
62963: LD_VAR 0 2
62967: UNION
62968: PPUSH
62969: CALL_OW 1
62973: ST_TO_ADDR
// end ;
62974: LD_VAR 0 3
62978: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
62979: LD_INT 0
62981: PPUSH
// if not mc_bases [ base ] then
62982: LD_EXP 11
62986: PUSH
62987: LD_VAR 0 1
62991: ARRAY
62992: NOT
62993: IFFALSE 62997
// exit ;
62995: GO 63022
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
62997: LD_ADDR_EXP 32
63001: PUSH
63002: LD_EXP 32
63006: PPUSH
63007: LD_VAR 0 1
63011: PPUSH
63012: LD_VAR 0 2
63016: PPUSH
63017: CALL_OW 1
63021: ST_TO_ADDR
// end ;
63022: LD_VAR 0 3
63026: RET
// export function MC_InsertProduceList ( base , components ) ; begin
63027: LD_INT 0
63029: PPUSH
// if not mc_bases [ base ] then
63030: LD_EXP 11
63034: PUSH
63035: LD_VAR 0 1
63039: ARRAY
63040: NOT
63041: IFFALSE 63045
// exit ;
63043: GO 63082
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
63045: LD_ADDR_EXP 32
63049: PUSH
63050: LD_EXP 32
63054: PPUSH
63055: LD_VAR 0 1
63059: PPUSH
63060: LD_EXP 32
63064: PUSH
63065: LD_VAR 0 1
63069: ARRAY
63070: PUSH
63071: LD_VAR 0 2
63075: ADD
63076: PPUSH
63077: CALL_OW 1
63081: ST_TO_ADDR
// end ;
63082: LD_VAR 0 3
63086: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
63087: LD_INT 0
63089: PPUSH
// if not mc_bases [ base ] then
63090: LD_EXP 11
63094: PUSH
63095: LD_VAR 0 1
63099: ARRAY
63100: NOT
63101: IFFALSE 63105
// exit ;
63103: GO 63159
// mc_defender := Replace ( mc_defender , base , deflist ) ;
63105: LD_ADDR_EXP 33
63109: PUSH
63110: LD_EXP 33
63114: PPUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: LD_VAR 0 2
63124: PPUSH
63125: CALL_OW 1
63129: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
63130: LD_ADDR_EXP 22
63134: PUSH
63135: LD_EXP 22
63139: PPUSH
63140: LD_VAR 0 1
63144: PPUSH
63145: LD_VAR 0 2
63149: PUSH
63150: LD_INT 0
63152: PLUS
63153: PPUSH
63154: CALL_OW 1
63158: ST_TO_ADDR
// end ;
63159: LD_VAR 0 3
63163: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
63164: LD_INT 0
63166: PPUSH
// if not mc_bases [ base ] then
63167: LD_EXP 11
63171: PUSH
63172: LD_VAR 0 1
63176: ARRAY
63177: NOT
63178: IFFALSE 63182
// exit ;
63180: GO 63207
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
63182: LD_ADDR_EXP 22
63186: PUSH
63187: LD_EXP 22
63191: PPUSH
63192: LD_VAR 0 1
63196: PPUSH
63197: LD_VAR 0 2
63201: PPUSH
63202: CALL_OW 1
63206: ST_TO_ADDR
// end ;
63207: LD_VAR 0 3
63211: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
63212: LD_INT 0
63214: PPUSH
63215: PPUSH
63216: PPUSH
63217: PPUSH
// if not mc_bases [ base ] then
63218: LD_EXP 11
63222: PUSH
63223: LD_VAR 0 1
63227: ARRAY
63228: NOT
63229: IFFALSE 63233
// exit ;
63231: GO 63298
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
63233: LD_ADDR_EXP 31
63237: PUSH
63238: LD_EXP 31
63242: PPUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_EXP 31
63252: PUSH
63253: LD_VAR 0 1
63257: ARRAY
63258: PUSH
63259: LD_INT 1
63261: PLUS
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PPUSH
63267: LD_VAR 0 1
63271: PUSH
63272: LD_VAR 0 2
63276: PUSH
63277: LD_VAR 0 3
63281: PUSH
63282: LD_VAR 0 4
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: PPUSH
63293: CALL 8049 0 3
63297: ST_TO_ADDR
// end ;
63298: LD_VAR 0 5
63302: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
63303: LD_INT 0
63305: PPUSH
// if not mc_bases [ base ] then
63306: LD_EXP 11
63310: PUSH
63311: LD_VAR 0 1
63315: ARRAY
63316: NOT
63317: IFFALSE 63321
// exit ;
63319: GO 63346
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
63321: LD_ADDR_EXP 48
63325: PUSH
63326: LD_EXP 48
63330: PPUSH
63331: LD_VAR 0 1
63335: PPUSH
63336: LD_VAR 0 2
63340: PPUSH
63341: CALL_OW 1
63345: ST_TO_ADDR
// end ;
63346: LD_VAR 0 3
63350: RET
// export function MC_GetMinesField ( base ) ; begin
63351: LD_INT 0
63353: PPUSH
// result := mc_mines [ base ] ;
63354: LD_ADDR_VAR 0 2
63358: PUSH
63359: LD_EXP 24
63363: PUSH
63364: LD_VAR 0 1
63368: ARRAY
63369: ST_TO_ADDR
// end ;
63370: LD_VAR 0 2
63374: RET
// export function MC_GetProduceList ( base ) ; begin
63375: LD_INT 0
63377: PPUSH
// result := mc_produce [ base ] ;
63378: LD_ADDR_VAR 0 2
63382: PUSH
63383: LD_EXP 32
63387: PUSH
63388: LD_VAR 0 1
63392: ARRAY
63393: ST_TO_ADDR
// end ;
63394: LD_VAR 0 2
63398: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
63399: LD_INT 0
63401: PPUSH
63402: PPUSH
// if not mc_bases then
63403: LD_EXP 11
63407: NOT
63408: IFFALSE 63412
// exit ;
63410: GO 63477
// if mc_bases [ base ] then
63412: LD_EXP 11
63416: PUSH
63417: LD_VAR 0 1
63421: ARRAY
63422: IFFALSE 63477
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63424: LD_ADDR_VAR 0 3
63428: PUSH
63429: LD_EXP 11
63433: PUSH
63434: LD_VAR 0 1
63438: ARRAY
63439: PPUSH
63440: LD_INT 30
63442: PUSH
63443: LD_VAR 0 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PPUSH
63452: CALL_OW 72
63456: ST_TO_ADDR
// if result then
63457: LD_VAR 0 3
63461: IFFALSE 63477
// result := result [ 1 ] ;
63463: LD_ADDR_VAR 0 3
63467: PUSH
63468: LD_VAR 0 3
63472: PUSH
63473: LD_INT 1
63475: ARRAY
63476: ST_TO_ADDR
// end ; end ;
63477: LD_VAR 0 3
63481: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
63482: LD_INT 0
63484: PPUSH
63485: PPUSH
// if not mc_bases then
63486: LD_EXP 11
63490: NOT
63491: IFFALSE 63495
// exit ;
63493: GO 63540
// if mc_bases [ base ] then
63495: LD_EXP 11
63499: PUSH
63500: LD_VAR 0 1
63504: ARRAY
63505: IFFALSE 63540
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63507: LD_ADDR_VAR 0 3
63511: PUSH
63512: LD_EXP 11
63516: PUSH
63517: LD_VAR 0 1
63521: ARRAY
63522: PPUSH
63523: LD_INT 30
63525: PUSH
63526: LD_VAR 0 2
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PPUSH
63535: CALL_OW 72
63539: ST_TO_ADDR
// end ;
63540: LD_VAR 0 3
63544: RET
// export function MC_SetTame ( base , area ) ; begin
63545: LD_INT 0
63547: PPUSH
// if not mc_bases or not base then
63548: LD_EXP 11
63552: NOT
63553: PUSH
63554: LD_VAR 0 1
63558: NOT
63559: OR
63560: IFFALSE 63564
// exit ;
63562: GO 63589
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
63564: LD_ADDR_EXP 39
63568: PUSH
63569: LD_EXP 39
63573: PPUSH
63574: LD_VAR 0 1
63578: PPUSH
63579: LD_VAR 0 2
63583: PPUSH
63584: CALL_OW 1
63588: ST_TO_ADDR
// end ;
63589: LD_VAR 0 3
63593: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
63594: LD_INT 0
63596: PPUSH
63597: PPUSH
// if not mc_bases or not base then
63598: LD_EXP 11
63602: NOT
63603: PUSH
63604: LD_VAR 0 1
63608: NOT
63609: OR
63610: IFFALSE 63614
// exit ;
63612: GO 63716
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
63614: LD_ADDR_VAR 0 4
63618: PUSH
63619: LD_EXP 11
63623: PUSH
63624: LD_VAR 0 1
63628: ARRAY
63629: PPUSH
63630: LD_INT 30
63632: PUSH
63633: LD_VAR 0 2
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PPUSH
63642: CALL_OW 72
63646: ST_TO_ADDR
// if not tmp then
63647: LD_VAR 0 4
63651: NOT
63652: IFFALSE 63656
// exit ;
63654: GO 63716
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
63656: LD_ADDR_EXP 43
63660: PUSH
63661: LD_EXP 43
63665: PPUSH
63666: LD_VAR 0 1
63670: PPUSH
63671: LD_EXP 43
63675: PUSH
63676: LD_VAR 0 1
63680: ARRAY
63681: PPUSH
63682: LD_EXP 43
63686: PUSH
63687: LD_VAR 0 1
63691: ARRAY
63692: PUSH
63693: LD_INT 1
63695: PLUS
63696: PPUSH
63697: LD_VAR 0 4
63701: PUSH
63702: LD_INT 1
63704: ARRAY
63705: PPUSH
63706: CALL_OW 2
63710: PPUSH
63711: CALL_OW 1
63715: ST_TO_ADDR
// end ;
63716: LD_VAR 0 3
63720: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
63721: LD_INT 0
63723: PPUSH
63724: PPUSH
// if not mc_bases or not base or not kinds then
63725: LD_EXP 11
63729: NOT
63730: PUSH
63731: LD_VAR 0 1
63735: NOT
63736: OR
63737: PUSH
63738: LD_VAR 0 2
63742: NOT
63743: OR
63744: IFFALSE 63748
// exit ;
63746: GO 63809
// for i in kinds do
63748: LD_ADDR_VAR 0 4
63752: PUSH
63753: LD_VAR 0 2
63757: PUSH
63758: FOR_IN
63759: IFFALSE 63807
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
63761: LD_ADDR_EXP 45
63765: PUSH
63766: LD_EXP 45
63770: PPUSH
63771: LD_VAR 0 1
63775: PUSH
63776: LD_EXP 45
63780: PUSH
63781: LD_VAR 0 1
63785: ARRAY
63786: PUSH
63787: LD_INT 1
63789: PLUS
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PPUSH
63795: LD_VAR 0 4
63799: PPUSH
63800: CALL 8049 0 3
63804: ST_TO_ADDR
63805: GO 63758
63807: POP
63808: POP
// end ;
63809: LD_VAR 0 3
63813: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
63814: LD_INT 0
63816: PPUSH
// if not mc_bases or not base or not areas then
63817: LD_EXP 11
63821: NOT
63822: PUSH
63823: LD_VAR 0 1
63827: NOT
63828: OR
63829: PUSH
63830: LD_VAR 0 2
63834: NOT
63835: OR
63836: IFFALSE 63840
// exit ;
63838: GO 63865
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
63840: LD_ADDR_EXP 29
63844: PUSH
63845: LD_EXP 29
63849: PPUSH
63850: LD_VAR 0 1
63854: PPUSH
63855: LD_VAR 0 2
63859: PPUSH
63860: CALL_OW 1
63864: ST_TO_ADDR
// end ;
63865: LD_VAR 0 3
63869: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
63870: LD_INT 0
63872: PPUSH
// if not mc_bases or not base or not teleports_exit then
63873: LD_EXP 11
63877: NOT
63878: PUSH
63879: LD_VAR 0 1
63883: NOT
63884: OR
63885: PUSH
63886: LD_VAR 0 2
63890: NOT
63891: OR
63892: IFFALSE 63896
// exit ;
63894: GO 63921
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
63896: LD_ADDR_EXP 46
63900: PUSH
63901: LD_EXP 46
63905: PPUSH
63906: LD_VAR 0 1
63910: PPUSH
63911: LD_VAR 0 2
63915: PPUSH
63916: CALL_OW 1
63920: ST_TO_ADDR
// end ;
63921: LD_VAR 0 3
63925: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
63926: LD_INT 0
63928: PPUSH
63929: PPUSH
63930: PPUSH
// if not mc_bases or not base or not ext_list then
63931: LD_EXP 11
63935: NOT
63936: PUSH
63937: LD_VAR 0 1
63941: NOT
63942: OR
63943: PUSH
63944: LD_VAR 0 5
63948: NOT
63949: OR
63950: IFFALSE 63954
// exit ;
63952: GO 64127
// tmp := GetFacExtXYD ( x , y , d ) ;
63954: LD_ADDR_VAR 0 8
63958: PUSH
63959: LD_VAR 0 2
63963: PPUSH
63964: LD_VAR 0 3
63968: PPUSH
63969: LD_VAR 0 4
63973: PPUSH
63974: CALL 36728 0 3
63978: ST_TO_ADDR
// if not tmp then
63979: LD_VAR 0 8
63983: NOT
63984: IFFALSE 63988
// exit ;
63986: GO 64127
// for i in tmp do
63988: LD_ADDR_VAR 0 7
63992: PUSH
63993: LD_VAR 0 8
63997: PUSH
63998: FOR_IN
63999: IFFALSE 64125
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
64001: LD_ADDR_EXP 16
64005: PUSH
64006: LD_EXP 16
64010: PPUSH
64011: LD_VAR 0 1
64015: PPUSH
64016: LD_EXP 16
64020: PUSH
64021: LD_VAR 0 1
64025: ARRAY
64026: PPUSH
64027: LD_EXP 16
64031: PUSH
64032: LD_VAR 0 1
64036: ARRAY
64037: PUSH
64038: LD_INT 1
64040: PLUS
64041: PPUSH
64042: LD_VAR 0 5
64046: PUSH
64047: LD_INT 1
64049: ARRAY
64050: PUSH
64051: LD_VAR 0 7
64055: PUSH
64056: LD_INT 1
64058: ARRAY
64059: PUSH
64060: LD_VAR 0 7
64064: PUSH
64065: LD_INT 2
64067: ARRAY
64068: PUSH
64069: LD_VAR 0 7
64073: PUSH
64074: LD_INT 3
64076: ARRAY
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: PPUSH
64084: CALL_OW 2
64088: PPUSH
64089: CALL_OW 1
64093: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
64094: LD_ADDR_VAR 0 5
64098: PUSH
64099: LD_VAR 0 5
64103: PPUSH
64104: LD_INT 1
64106: PPUSH
64107: CALL_OW 3
64111: ST_TO_ADDR
// if not ext_list then
64112: LD_VAR 0 5
64116: NOT
64117: IFFALSE 64123
// exit ;
64119: POP
64120: POP
64121: GO 64127
// end ;
64123: GO 63998
64125: POP
64126: POP
// end ;
64127: LD_VAR 0 6
64131: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
64132: LD_INT 0
64134: PPUSH
// if not mc_bases or not base or not weapon_list then
64135: LD_EXP 11
64139: NOT
64140: PUSH
64141: LD_VAR 0 1
64145: NOT
64146: OR
64147: PUSH
64148: LD_VAR 0 2
64152: NOT
64153: OR
64154: IFFALSE 64158
// exit ;
64156: GO 64183
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
64158: LD_ADDR_EXP 50
64162: PUSH
64163: LD_EXP 50
64167: PPUSH
64168: LD_VAR 0 1
64172: PPUSH
64173: LD_VAR 0 2
64177: PPUSH
64178: CALL_OW 1
64182: ST_TO_ADDR
// end ;
64183: LD_VAR 0 3
64187: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
64188: LD_INT 0
64190: PPUSH
// if not mc_bases or not base or not tech_list then
64191: LD_EXP 11
64195: NOT
64196: PUSH
64197: LD_VAR 0 1
64201: NOT
64202: OR
64203: PUSH
64204: LD_VAR 0 2
64208: NOT
64209: OR
64210: IFFALSE 64214
// exit ;
64212: GO 64239
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
64214: LD_ADDR_EXP 38
64218: PUSH
64219: LD_EXP 38
64223: PPUSH
64224: LD_VAR 0 1
64228: PPUSH
64229: LD_VAR 0 2
64233: PPUSH
64234: CALL_OW 1
64238: ST_TO_ADDR
// end ;
64239: LD_VAR 0 3
64243: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
64244: LD_INT 0
64246: PPUSH
// if not mc_bases or not parking_area or not base then
64247: LD_EXP 11
64251: NOT
64252: PUSH
64253: LD_VAR 0 2
64257: NOT
64258: OR
64259: PUSH
64260: LD_VAR 0 1
64264: NOT
64265: OR
64266: IFFALSE 64270
// exit ;
64268: GO 64295
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
64270: LD_ADDR_EXP 35
64274: PUSH
64275: LD_EXP 35
64279: PPUSH
64280: LD_VAR 0 1
64284: PPUSH
64285: LD_VAR 0 2
64289: PPUSH
64290: CALL_OW 1
64294: ST_TO_ADDR
// end ;
64295: LD_VAR 0 3
64299: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
64300: LD_INT 0
64302: PPUSH
// if not mc_bases or not base or not scan_area then
64303: LD_EXP 11
64307: NOT
64308: PUSH
64309: LD_VAR 0 1
64313: NOT
64314: OR
64315: PUSH
64316: LD_VAR 0 2
64320: NOT
64321: OR
64322: IFFALSE 64326
// exit ;
64324: GO 64351
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
64326: LD_ADDR_EXP 36
64330: PUSH
64331: LD_EXP 36
64335: PPUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: LD_VAR 0 2
64345: PPUSH
64346: CALL_OW 1
64350: ST_TO_ADDR
// end ;
64351: LD_VAR 0 3
64355: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
64356: LD_INT 0
64358: PPUSH
64359: PPUSH
// if not mc_bases or not base then
64360: LD_EXP 11
64364: NOT
64365: PUSH
64366: LD_VAR 0 1
64370: NOT
64371: OR
64372: IFFALSE 64376
// exit ;
64374: GO 64440
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
64376: LD_ADDR_VAR 0 3
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: LD_INT 3
64389: PUSH
64390: LD_INT 4
64392: PUSH
64393: LD_INT 11
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
64403: LD_ADDR_EXP 38
64407: PUSH
64408: LD_EXP 38
64412: PPUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: LD_EXP 38
64422: PUSH
64423: LD_VAR 0 1
64427: ARRAY
64428: PUSH
64429: LD_VAR 0 3
64433: DIFF
64434: PPUSH
64435: CALL_OW 1
64439: ST_TO_ADDR
// end ;
64440: LD_VAR 0 2
64444: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
64445: LD_INT 0
64447: PPUSH
// result := mc_vehicles [ base ] ;
64448: LD_ADDR_VAR 0 3
64452: PUSH
64453: LD_EXP 30
64457: PUSH
64458: LD_VAR 0 1
64462: ARRAY
64463: ST_TO_ADDR
// if onlyCombat then
64464: LD_VAR 0 2
64468: IFFALSE 64633
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
64470: LD_ADDR_VAR 0 3
64474: PUSH
64475: LD_VAR 0 3
64479: PUSH
64480: LD_VAR 0 3
64484: PPUSH
64485: LD_INT 2
64487: PUSH
64488: LD_INT 34
64490: PUSH
64491: LD_INT 12
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 34
64500: PUSH
64501: LD_INT 51
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 34
64510: PUSH
64511: LD_EXP 55
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 34
64522: PUSH
64523: LD_INT 32
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 34
64532: PUSH
64533: LD_INT 13
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 34
64542: PUSH
64543: LD_INT 52
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 34
64552: PUSH
64553: LD_INT 14
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 34
64562: PUSH
64563: LD_INT 53
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 34
64572: PUSH
64573: LD_EXP 54
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 34
64584: PUSH
64585: LD_INT 31
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 34
64594: PUSH
64595: LD_INT 48
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 34
64604: PUSH
64605: LD_INT 8
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: PPUSH
64627: CALL_OW 72
64631: DIFF
64632: ST_TO_ADDR
// end ; end_of_file
64633: LD_VAR 0 3
64637: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
64638: LD_INT 0
64640: PPUSH
64641: PPUSH
64642: PPUSH
// if not mc_bases or not skirmish then
64643: LD_EXP 11
64647: NOT
64648: PUSH
64649: LD_EXP 9
64653: NOT
64654: OR
64655: IFFALSE 64659
// exit ;
64657: GO 64824
// for i = 1 to mc_bases do
64659: LD_ADDR_VAR 0 4
64663: PUSH
64664: DOUBLE
64665: LD_INT 1
64667: DEC
64668: ST_TO_ADDR
64669: LD_EXP 11
64673: PUSH
64674: FOR_TO
64675: IFFALSE 64822
// begin if sci in mc_bases [ i ] then
64677: LD_VAR 0 2
64681: PUSH
64682: LD_EXP 11
64686: PUSH
64687: LD_VAR 0 4
64691: ARRAY
64692: IN
64693: IFFALSE 64820
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
64695: LD_ADDR_EXP 40
64699: PUSH
64700: LD_EXP 40
64704: PPUSH
64705: LD_VAR 0 4
64709: PUSH
64710: LD_EXP 40
64714: PUSH
64715: LD_VAR 0 4
64719: ARRAY
64720: PUSH
64721: LD_INT 1
64723: PLUS
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PPUSH
64729: LD_VAR 0 1
64733: PPUSH
64734: CALL 8049 0 3
64738: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
64739: LD_ADDR_VAR 0 5
64743: PUSH
64744: LD_EXP 11
64748: PUSH
64749: LD_VAR 0 4
64753: ARRAY
64754: PPUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 30
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 30
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: LIST
64782: PPUSH
64783: CALL_OW 72
64787: PPUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 74
64797: ST_TO_ADDR
// if tmp then
64798: LD_VAR 0 5
64802: IFFALSE 64818
// ComStandNearbyBuilding ( ape , tmp ) ;
64804: LD_VAR 0 1
64808: PPUSH
64809: LD_VAR 0 5
64813: PPUSH
64814: CALL 4663 0 2
// break ;
64818: GO 64822
// end ; end ;
64820: GO 64674
64822: POP
64823: POP
// end ;
64824: LD_VAR 0 3
64828: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
64829: LD_INT 0
64831: PPUSH
64832: PPUSH
64833: PPUSH
// if not mc_bases or not skirmish then
64834: LD_EXP 11
64838: NOT
64839: PUSH
64840: LD_EXP 9
64844: NOT
64845: OR
64846: IFFALSE 64850
// exit ;
64848: GO 64939
// for i = 1 to mc_bases do
64850: LD_ADDR_VAR 0 4
64854: PUSH
64855: DOUBLE
64856: LD_INT 1
64858: DEC
64859: ST_TO_ADDR
64860: LD_EXP 11
64864: PUSH
64865: FOR_TO
64866: IFFALSE 64937
// begin if building in mc_busy_turret_list [ i ] then
64868: LD_VAR 0 1
64872: PUSH
64873: LD_EXP 21
64877: PUSH
64878: LD_VAR 0 4
64882: ARRAY
64883: IN
64884: IFFALSE 64935
// begin tmp := mc_busy_turret_list [ i ] diff building ;
64886: LD_ADDR_VAR 0 5
64890: PUSH
64891: LD_EXP 21
64895: PUSH
64896: LD_VAR 0 4
64900: ARRAY
64901: PUSH
64902: LD_VAR 0 1
64906: DIFF
64907: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
64908: LD_ADDR_EXP 21
64912: PUSH
64913: LD_EXP 21
64917: PPUSH
64918: LD_VAR 0 4
64922: PPUSH
64923: LD_VAR 0 5
64927: PPUSH
64928: CALL_OW 1
64932: ST_TO_ADDR
// break ;
64933: GO 64937
// end ; end ;
64935: GO 64865
64937: POP
64938: POP
// end ;
64939: LD_VAR 0 3
64943: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
64944: LD_INT 0
64946: PPUSH
64947: PPUSH
64948: PPUSH
// if not mc_bases or not skirmish then
64949: LD_EXP 11
64953: NOT
64954: PUSH
64955: LD_EXP 9
64959: NOT
64960: OR
64961: IFFALSE 64965
// exit ;
64963: GO 65164
// for i = 1 to mc_bases do
64965: LD_ADDR_VAR 0 5
64969: PUSH
64970: DOUBLE
64971: LD_INT 1
64973: DEC
64974: ST_TO_ADDR
64975: LD_EXP 11
64979: PUSH
64980: FOR_TO
64981: IFFALSE 65162
// if building in mc_bases [ i ] then
64983: LD_VAR 0 1
64987: PUSH
64988: LD_EXP 11
64992: PUSH
64993: LD_VAR 0 5
64997: ARRAY
64998: IN
64999: IFFALSE 65160
// begin tmp := mc_bases [ i ] diff building ;
65001: LD_ADDR_VAR 0 6
65005: PUSH
65006: LD_EXP 11
65010: PUSH
65011: LD_VAR 0 5
65015: ARRAY
65016: PUSH
65017: LD_VAR 0 1
65021: DIFF
65022: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
65023: LD_ADDR_EXP 11
65027: PUSH
65028: LD_EXP 11
65032: PPUSH
65033: LD_VAR 0 5
65037: PPUSH
65038: LD_VAR 0 6
65042: PPUSH
65043: CALL_OW 1
65047: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
65048: LD_VAR 0 1
65052: PUSH
65053: LD_EXP 19
65057: PUSH
65058: LD_VAR 0 5
65062: ARRAY
65063: IN
65064: IFFALSE 65103
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
65066: LD_ADDR_EXP 19
65070: PUSH
65071: LD_EXP 19
65075: PPUSH
65076: LD_VAR 0 5
65080: PPUSH
65081: LD_EXP 19
65085: PUSH
65086: LD_VAR 0 5
65090: ARRAY
65091: PUSH
65092: LD_VAR 0 1
65096: DIFF
65097: PPUSH
65098: CALL_OW 1
65102: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
65103: LD_VAR 0 1
65107: PUSH
65108: LD_EXP 20
65112: PUSH
65113: LD_VAR 0 5
65117: ARRAY
65118: IN
65119: IFFALSE 65158
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
65121: LD_ADDR_EXP 20
65125: PUSH
65126: LD_EXP 20
65130: PPUSH
65131: LD_VAR 0 5
65135: PPUSH
65136: LD_EXP 20
65140: PUSH
65141: LD_VAR 0 5
65145: ARRAY
65146: PUSH
65147: LD_VAR 0 1
65151: DIFF
65152: PPUSH
65153: CALL_OW 1
65157: ST_TO_ADDR
// break ;
65158: GO 65162
// end ;
65160: GO 64980
65162: POP
65163: POP
// end ;
65164: LD_VAR 0 4
65168: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
65169: LD_INT 0
65171: PPUSH
65172: PPUSH
65173: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
65174: LD_EXP 11
65178: NOT
65179: PUSH
65180: LD_EXP 9
65184: NOT
65185: OR
65186: PUSH
65187: LD_VAR 0 3
65191: PUSH
65192: LD_EXP 37
65196: IN
65197: NOT
65198: OR
65199: IFFALSE 65203
// exit ;
65201: GO 65326
// for i = 1 to mc_vehicles do
65203: LD_ADDR_VAR 0 6
65207: PUSH
65208: DOUBLE
65209: LD_INT 1
65211: DEC
65212: ST_TO_ADDR
65213: LD_EXP 30
65217: PUSH
65218: FOR_TO
65219: IFFALSE 65324
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
65221: LD_VAR 0 2
65225: PUSH
65226: LD_EXP 30
65230: PUSH
65231: LD_VAR 0 6
65235: ARRAY
65236: IN
65237: PUSH
65238: LD_VAR 0 1
65242: PUSH
65243: LD_EXP 30
65247: PUSH
65248: LD_VAR 0 6
65252: ARRAY
65253: IN
65254: OR
65255: IFFALSE 65322
// begin tmp := mc_vehicles [ i ] diff old ;
65257: LD_ADDR_VAR 0 7
65261: PUSH
65262: LD_EXP 30
65266: PUSH
65267: LD_VAR 0 6
65271: ARRAY
65272: PUSH
65273: LD_VAR 0 2
65277: DIFF
65278: ST_TO_ADDR
// tmp := tmp diff new ;
65279: LD_ADDR_VAR 0 7
65283: PUSH
65284: LD_VAR 0 7
65288: PUSH
65289: LD_VAR 0 1
65293: DIFF
65294: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
65295: LD_ADDR_EXP 30
65299: PUSH
65300: LD_EXP 30
65304: PPUSH
65305: LD_VAR 0 6
65309: PPUSH
65310: LD_VAR 0 7
65314: PPUSH
65315: CALL_OW 1
65319: ST_TO_ADDR
// break ;
65320: GO 65324
// end ;
65322: GO 65218
65324: POP
65325: POP
// end ;
65326: LD_VAR 0 5
65330: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
65331: LD_INT 0
65333: PPUSH
65334: PPUSH
65335: PPUSH
65336: PPUSH
// if not mc_bases or not skirmish then
65337: LD_EXP 11
65341: NOT
65342: PUSH
65343: LD_EXP 9
65347: NOT
65348: OR
65349: IFFALSE 65353
// exit ;
65351: GO 65730
// side := GetSide ( vehicle ) ;
65353: LD_ADDR_VAR 0 5
65357: PUSH
65358: LD_VAR 0 1
65362: PPUSH
65363: CALL_OW 255
65367: ST_TO_ADDR
// for i = 1 to mc_bases do
65368: LD_ADDR_VAR 0 4
65372: PUSH
65373: DOUBLE
65374: LD_INT 1
65376: DEC
65377: ST_TO_ADDR
65378: LD_EXP 11
65382: PUSH
65383: FOR_TO
65384: IFFALSE 65728
// begin if factory in mc_bases [ i ] then
65386: LD_VAR 0 2
65390: PUSH
65391: LD_EXP 11
65395: PUSH
65396: LD_VAR 0 4
65400: ARRAY
65401: IN
65402: IFFALSE 65726
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
65404: LD_EXP 33
65408: PUSH
65409: LD_VAR 0 4
65413: ARRAY
65414: PUSH
65415: LD_EXP 22
65419: PUSH
65420: LD_VAR 0 4
65424: ARRAY
65425: LESS
65426: PUSH
65427: LD_VAR 0 1
65431: PPUSH
65432: CALL_OW 264
65436: PUSH
65437: LD_INT 31
65439: PUSH
65440: LD_INT 32
65442: PUSH
65443: LD_INT 51
65445: PUSH
65446: LD_EXP 55
65450: PUSH
65451: LD_INT 12
65453: PUSH
65454: LD_INT 30
65456: PUSH
65457: LD_EXP 54
65461: PUSH
65462: LD_INT 11
65464: PUSH
65465: LD_INT 53
65467: PUSH
65468: LD_INT 14
65470: PUSH
65471: LD_EXP 58
65475: PUSH
65476: LD_INT 29
65478: PUSH
65479: LD_EXP 56
65483: PUSH
65484: LD_INT 13
65486: PUSH
65487: LD_INT 52
65489: PUSH
65490: LD_INT 48
65492: PUSH
65493: LD_INT 8
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: IN
65515: NOT
65516: AND
65517: IFFALSE 65565
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
65519: LD_ADDR_EXP 33
65523: PUSH
65524: LD_EXP 33
65528: PPUSH
65529: LD_VAR 0 4
65533: PUSH
65534: LD_EXP 33
65538: PUSH
65539: LD_VAR 0 4
65543: ARRAY
65544: PUSH
65545: LD_INT 1
65547: PLUS
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PPUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: CALL 8049 0 3
65562: ST_TO_ADDR
65563: GO 65609
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
65565: LD_ADDR_EXP 30
65569: PUSH
65570: LD_EXP 30
65574: PPUSH
65575: LD_VAR 0 4
65579: PUSH
65580: LD_EXP 30
65584: PUSH
65585: LD_VAR 0 4
65589: ARRAY
65590: PUSH
65591: LD_INT 1
65593: PLUS
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PPUSH
65599: LD_VAR 0 1
65603: PPUSH
65604: CALL 8049 0 3
65608: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
65609: LD_VAR 0 1
65613: PPUSH
65614: CALL_OW 263
65618: PUSH
65619: LD_INT 2
65621: EQUAL
65622: IFFALSE 65642
// begin repeat wait ( 0 0$1 ) ;
65624: LD_INT 35
65626: PPUSH
65627: CALL_OW 67
// until IsControledBy ( vehicle ) ;
65631: LD_VAR 0 1
65635: PPUSH
65636: CALL_OW 312
65640: IFFALSE 65624
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
65642: LD_VAR 0 1
65646: PPUSH
65647: LD_EXP 35
65651: PUSH
65652: LD_VAR 0 4
65656: ARRAY
65657: PPUSH
65658: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
65662: LD_VAR 0 1
65666: PPUSH
65667: CALL_OW 263
65671: PUSH
65672: LD_INT 1
65674: NONEQUAL
65675: IFFALSE 65679
// break ;
65677: GO 65728
// repeat wait ( 0 0$1 ) ;
65679: LD_INT 35
65681: PPUSH
65682: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
65686: LD_VAR 0 1
65690: PPUSH
65691: LD_EXP 35
65695: PUSH
65696: LD_VAR 0 4
65700: ARRAY
65701: PPUSH
65702: CALL_OW 308
65706: IFFALSE 65679
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
65708: LD_VAR 0 1
65712: PPUSH
65713: CALL_OW 311
65717: PPUSH
65718: CALL_OW 121
// exit ;
65722: POP
65723: POP
65724: GO 65730
// end ; end ;
65726: GO 65383
65728: POP
65729: POP
// end ;
65730: LD_VAR 0 3
65734: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
65735: LD_INT 0
65737: PPUSH
65738: PPUSH
65739: PPUSH
65740: PPUSH
// if not mc_bases or not skirmish then
65741: LD_EXP 11
65745: NOT
65746: PUSH
65747: LD_EXP 9
65751: NOT
65752: OR
65753: IFFALSE 65757
// exit ;
65755: GO 66110
// repeat wait ( 0 0$1 ) ;
65757: LD_INT 35
65759: PPUSH
65760: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
65764: LD_VAR 0 2
65768: PPUSH
65769: LD_VAR 0 3
65773: PPUSH
65774: CALL_OW 284
65778: IFFALSE 65757
// if GetResourceTypeXY ( x , y ) = mat_artefact then
65780: LD_VAR 0 2
65784: PPUSH
65785: LD_VAR 0 3
65789: PPUSH
65790: CALL_OW 283
65794: PUSH
65795: LD_INT 4
65797: EQUAL
65798: IFFALSE 65802
// exit ;
65800: GO 66110
// for i = 1 to mc_bases do
65802: LD_ADDR_VAR 0 7
65806: PUSH
65807: DOUBLE
65808: LD_INT 1
65810: DEC
65811: ST_TO_ADDR
65812: LD_EXP 11
65816: PUSH
65817: FOR_TO
65818: IFFALSE 66108
// begin if mc_crates_area [ i ] then
65820: LD_EXP 29
65824: PUSH
65825: LD_VAR 0 7
65829: ARRAY
65830: IFFALSE 65941
// for j in mc_crates_area [ i ] do
65832: LD_ADDR_VAR 0 8
65836: PUSH
65837: LD_EXP 29
65841: PUSH
65842: LD_VAR 0 7
65846: ARRAY
65847: PUSH
65848: FOR_IN
65849: IFFALSE 65939
// if InArea ( x , y , j ) then
65851: LD_VAR 0 2
65855: PPUSH
65856: LD_VAR 0 3
65860: PPUSH
65861: LD_VAR 0 8
65865: PPUSH
65866: CALL_OW 309
65870: IFFALSE 65937
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
65872: LD_ADDR_EXP 27
65876: PUSH
65877: LD_EXP 27
65881: PPUSH
65882: LD_VAR 0 7
65886: PUSH
65887: LD_EXP 27
65891: PUSH
65892: LD_VAR 0 7
65896: ARRAY
65897: PUSH
65898: LD_INT 1
65900: PLUS
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PPUSH
65906: LD_VAR 0 4
65910: PUSH
65911: LD_VAR 0 2
65915: PUSH
65916: LD_VAR 0 3
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: PPUSH
65926: CALL 8049 0 3
65930: ST_TO_ADDR
// exit ;
65931: POP
65932: POP
65933: POP
65934: POP
65935: GO 66110
// end ;
65937: GO 65848
65939: POP
65940: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65941: LD_ADDR_VAR 0 9
65945: PUSH
65946: LD_EXP 11
65950: PUSH
65951: LD_VAR 0 7
65955: ARRAY
65956: PPUSH
65957: LD_INT 2
65959: PUSH
65960: LD_INT 30
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 30
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: LIST
65984: PPUSH
65985: CALL_OW 72
65989: ST_TO_ADDR
// if not depot then
65990: LD_VAR 0 9
65994: NOT
65995: IFFALSE 65999
// continue ;
65997: GO 65817
// for j in depot do
65999: LD_ADDR_VAR 0 8
66003: PUSH
66004: LD_VAR 0 9
66008: PUSH
66009: FOR_IN
66010: IFFALSE 66104
// if GetDistUnitXY ( j , x , y ) < 30 then
66012: LD_VAR 0 8
66016: PPUSH
66017: LD_VAR 0 2
66021: PPUSH
66022: LD_VAR 0 3
66026: PPUSH
66027: CALL_OW 297
66031: PUSH
66032: LD_INT 30
66034: LESS
66035: IFFALSE 66102
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
66037: LD_ADDR_EXP 27
66041: PUSH
66042: LD_EXP 27
66046: PPUSH
66047: LD_VAR 0 7
66051: PUSH
66052: LD_EXP 27
66056: PUSH
66057: LD_VAR 0 7
66061: ARRAY
66062: PUSH
66063: LD_INT 1
66065: PLUS
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PPUSH
66071: LD_VAR 0 4
66075: PUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_VAR 0 3
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: LIST
66090: PPUSH
66091: CALL 8049 0 3
66095: ST_TO_ADDR
// exit ;
66096: POP
66097: POP
66098: POP
66099: POP
66100: GO 66110
// end ;
66102: GO 66009
66104: POP
66105: POP
// end ;
66106: GO 65817
66108: POP
66109: POP
// end ;
66110: LD_VAR 0 6
66114: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
66115: LD_INT 0
66117: PPUSH
66118: PPUSH
66119: PPUSH
66120: PPUSH
// if not mc_bases or not skirmish then
66121: LD_EXP 11
66125: NOT
66126: PUSH
66127: LD_EXP 9
66131: NOT
66132: OR
66133: IFFALSE 66137
// exit ;
66135: GO 66414
// side := GetSide ( lab ) ;
66137: LD_ADDR_VAR 0 4
66141: PUSH
66142: LD_VAR 0 2
66146: PPUSH
66147: CALL_OW 255
66151: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
66152: LD_VAR 0 4
66156: PUSH
66157: LD_EXP 37
66161: IN
66162: NOT
66163: PUSH
66164: LD_EXP 38
66168: NOT
66169: OR
66170: PUSH
66171: LD_EXP 11
66175: NOT
66176: OR
66177: IFFALSE 66181
// exit ;
66179: GO 66414
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
66181: LD_ADDR_EXP 38
66185: PUSH
66186: LD_EXP 38
66190: PPUSH
66191: LD_VAR 0 4
66195: PPUSH
66196: LD_EXP 38
66200: PUSH
66201: LD_VAR 0 4
66205: ARRAY
66206: PUSH
66207: LD_VAR 0 1
66211: DIFF
66212: PPUSH
66213: CALL_OW 1
66217: ST_TO_ADDR
// for i = 1 to mc_bases do
66218: LD_ADDR_VAR 0 5
66222: PUSH
66223: DOUBLE
66224: LD_INT 1
66226: DEC
66227: ST_TO_ADDR
66228: LD_EXP 11
66232: PUSH
66233: FOR_TO
66234: IFFALSE 66412
// begin if lab in mc_bases [ i ] then
66236: LD_VAR 0 2
66240: PUSH
66241: LD_EXP 11
66245: PUSH
66246: LD_VAR 0 5
66250: ARRAY
66251: IN
66252: IFFALSE 66410
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
66254: LD_VAR 0 1
66258: PUSH
66259: LD_INT 11
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: IN
66277: PUSH
66278: LD_EXP 41
66282: PUSH
66283: LD_VAR 0 5
66287: ARRAY
66288: AND
66289: IFFALSE 66410
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
66291: LD_ADDR_VAR 0 6
66295: PUSH
66296: LD_EXP 41
66300: PUSH
66301: LD_VAR 0 5
66305: ARRAY
66306: PUSH
66307: LD_INT 1
66309: ARRAY
66310: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
66311: LD_ADDR_EXP 41
66315: PUSH
66316: LD_EXP 41
66320: PPUSH
66321: LD_VAR 0 5
66325: PPUSH
66326: EMPTY
66327: PPUSH
66328: CALL_OW 1
66332: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
66333: LD_VAR 0 6
66337: PPUSH
66338: LD_INT 0
66340: PPUSH
66341: CALL_OW 109
// ComExitBuilding ( tmp ) ;
66345: LD_VAR 0 6
66349: PPUSH
66350: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
66354: LD_ADDR_EXP 40
66358: PUSH
66359: LD_EXP 40
66363: PPUSH
66364: LD_VAR 0 5
66368: PPUSH
66369: LD_EXP 40
66373: PUSH
66374: LD_VAR 0 5
66378: ARRAY
66379: PPUSH
66380: LD_INT 1
66382: PPUSH
66383: LD_VAR 0 6
66387: PPUSH
66388: CALL_OW 2
66392: PPUSH
66393: CALL_OW 1
66397: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
66398: LD_VAR 0 5
66402: PPUSH
66403: LD_INT 112
66405: PPUSH
66406: CALL 43426 0 2
// end ; end ; end ;
66410: GO 66233
66412: POP
66413: POP
// end ;
66414: LD_VAR 0 3
66418: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
66419: LD_INT 0
66421: PPUSH
66422: PPUSH
66423: PPUSH
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
// if not mc_bases or not skirmish then
66429: LD_EXP 11
66433: NOT
66434: PUSH
66435: LD_EXP 9
66439: NOT
66440: OR
66441: IFFALSE 66445
// exit ;
66443: GO 67816
// for i = 1 to mc_bases do
66445: LD_ADDR_VAR 0 3
66449: PUSH
66450: DOUBLE
66451: LD_INT 1
66453: DEC
66454: ST_TO_ADDR
66455: LD_EXP 11
66459: PUSH
66460: FOR_TO
66461: IFFALSE 67814
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
66463: LD_VAR 0 1
66467: PUSH
66468: LD_EXP 11
66472: PUSH
66473: LD_VAR 0 3
66477: ARRAY
66478: IN
66479: PUSH
66480: LD_VAR 0 1
66484: PUSH
66485: LD_EXP 18
66489: PUSH
66490: LD_VAR 0 3
66494: ARRAY
66495: IN
66496: OR
66497: PUSH
66498: LD_VAR 0 1
66502: PUSH
66503: LD_EXP 33
66507: PUSH
66508: LD_VAR 0 3
66512: ARRAY
66513: IN
66514: OR
66515: PUSH
66516: LD_VAR 0 1
66520: PUSH
66521: LD_EXP 30
66525: PUSH
66526: LD_VAR 0 3
66530: ARRAY
66531: IN
66532: OR
66533: PUSH
66534: LD_VAR 0 1
66538: PUSH
66539: LD_EXP 40
66543: PUSH
66544: LD_VAR 0 3
66548: ARRAY
66549: IN
66550: OR
66551: PUSH
66552: LD_VAR 0 1
66556: PUSH
66557: LD_EXP 41
66561: PUSH
66562: LD_VAR 0 3
66566: ARRAY
66567: IN
66568: OR
66569: IFFALSE 67812
// begin if un in mc_ape [ i ] then
66571: LD_VAR 0 1
66575: PUSH
66576: LD_EXP 40
66580: PUSH
66581: LD_VAR 0 3
66585: ARRAY
66586: IN
66587: IFFALSE 66626
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
66589: LD_ADDR_EXP 40
66593: PUSH
66594: LD_EXP 40
66598: PPUSH
66599: LD_VAR 0 3
66603: PPUSH
66604: LD_EXP 40
66608: PUSH
66609: LD_VAR 0 3
66613: ARRAY
66614: PUSH
66615: LD_VAR 0 1
66619: DIFF
66620: PPUSH
66621: CALL_OW 1
66625: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
66626: LD_VAR 0 1
66630: PUSH
66631: LD_EXP 41
66635: PUSH
66636: LD_VAR 0 3
66640: ARRAY
66641: IN
66642: IFFALSE 66666
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
66644: LD_ADDR_EXP 41
66648: PUSH
66649: LD_EXP 41
66653: PPUSH
66654: LD_VAR 0 3
66658: PPUSH
66659: EMPTY
66660: PPUSH
66661: CALL_OW 1
66665: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
66666: LD_VAR 0 1
66670: PPUSH
66671: CALL_OW 247
66675: PUSH
66676: LD_INT 2
66678: EQUAL
66679: PUSH
66680: LD_VAR 0 1
66684: PPUSH
66685: CALL_OW 110
66689: PUSH
66690: LD_INT 20
66692: EQUAL
66693: PUSH
66694: LD_VAR 0 1
66698: PUSH
66699: LD_EXP 33
66703: PUSH
66704: LD_VAR 0 3
66708: ARRAY
66709: IN
66710: OR
66711: PUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: CALL_OW 264
66721: PUSH
66722: LD_INT 12
66724: PUSH
66725: LD_INT 51
66727: PUSH
66728: LD_EXP 55
66732: PUSH
66733: LD_INT 32
66735: PUSH
66736: LD_INT 13
66738: PUSH
66739: LD_INT 52
66741: PUSH
66742: LD_INT 31
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: IN
66754: OR
66755: AND
66756: IFFALSE 67064
// begin if un in mc_defender [ i ] then
66758: LD_VAR 0 1
66762: PUSH
66763: LD_EXP 33
66767: PUSH
66768: LD_VAR 0 3
66772: ARRAY
66773: IN
66774: IFFALSE 66813
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
66776: LD_ADDR_EXP 33
66780: PUSH
66781: LD_EXP 33
66785: PPUSH
66786: LD_VAR 0 3
66790: PPUSH
66791: LD_EXP 33
66795: PUSH
66796: LD_VAR 0 3
66800: ARRAY
66801: PUSH
66802: LD_VAR 0 1
66806: DIFF
66807: PPUSH
66808: CALL_OW 1
66812: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
66813: LD_ADDR_VAR 0 8
66817: PUSH
66818: LD_VAR 0 3
66822: PPUSH
66823: LD_INT 3
66825: PPUSH
66826: CALL 63482 0 2
66830: ST_TO_ADDR
// if fac then
66831: LD_VAR 0 8
66835: IFFALSE 67064
// begin for j in fac do
66837: LD_ADDR_VAR 0 4
66841: PUSH
66842: LD_VAR 0 8
66846: PUSH
66847: FOR_IN
66848: IFFALSE 67062
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
66850: LD_ADDR_VAR 0 9
66854: PUSH
66855: LD_VAR 0 8
66859: PPUSH
66860: LD_VAR 0 1
66864: PPUSH
66865: CALL_OW 265
66869: PPUSH
66870: LD_VAR 0 1
66874: PPUSH
66875: CALL_OW 262
66879: PPUSH
66880: LD_VAR 0 1
66884: PPUSH
66885: CALL_OW 263
66889: PPUSH
66890: LD_VAR 0 1
66894: PPUSH
66895: CALL_OW 264
66899: PPUSH
66900: CALL 5581 0 5
66904: ST_TO_ADDR
// if components then
66905: LD_VAR 0 9
66909: IFFALSE 67060
// begin if GetWeapon ( un ) = ar_control_tower then
66911: LD_VAR 0 1
66915: PPUSH
66916: CALL_OW 264
66920: PUSH
66921: LD_INT 31
66923: EQUAL
66924: IFFALSE 67041
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
66926: LD_VAR 0 1
66930: PPUSH
66931: CALL_OW 311
66935: PPUSH
66936: LD_INT 0
66938: PPUSH
66939: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
66943: LD_ADDR_EXP 51
66947: PUSH
66948: LD_EXP 51
66952: PPUSH
66953: LD_VAR 0 3
66957: PPUSH
66958: LD_EXP 51
66962: PUSH
66963: LD_VAR 0 3
66967: ARRAY
66968: PUSH
66969: LD_VAR 0 1
66973: PPUSH
66974: CALL_OW 311
66978: DIFF
66979: PPUSH
66980: CALL_OW 1
66984: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
66985: LD_ADDR_VAR 0 7
66989: PUSH
66990: LD_EXP 32
66994: PUSH
66995: LD_VAR 0 3
66999: ARRAY
67000: PPUSH
67001: LD_INT 1
67003: PPUSH
67004: LD_VAR 0 9
67008: PPUSH
67009: CALL_OW 2
67013: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
67014: LD_ADDR_EXP 32
67018: PUSH
67019: LD_EXP 32
67023: PPUSH
67024: LD_VAR 0 3
67028: PPUSH
67029: LD_VAR 0 7
67033: PPUSH
67034: CALL_OW 1
67038: ST_TO_ADDR
// end else
67039: GO 67058
// MC_InsertProduceList ( i , [ components ] ) ;
67041: LD_VAR 0 3
67045: PPUSH
67046: LD_VAR 0 9
67050: PUSH
67051: EMPTY
67052: LIST
67053: PPUSH
67054: CALL 63027 0 2
// break ;
67058: GO 67062
// end ; end ;
67060: GO 66847
67062: POP
67063: POP
// end ; end ; if GetType ( un ) = unit_building then
67064: LD_VAR 0 1
67068: PPUSH
67069: CALL_OW 247
67073: PUSH
67074: LD_INT 3
67076: EQUAL
67077: IFFALSE 67480
// begin btype := GetBType ( un ) ;
67079: LD_ADDR_VAR 0 5
67083: PUSH
67084: LD_VAR 0 1
67088: PPUSH
67089: CALL_OW 266
67093: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
67094: LD_VAR 0 5
67098: PUSH
67099: LD_INT 29
67101: PUSH
67102: LD_INT 30
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: IN
67109: IFFALSE 67182
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
67111: LD_VAR 0 1
67115: PPUSH
67116: CALL_OW 250
67120: PPUSH
67121: LD_VAR 0 1
67125: PPUSH
67126: CALL_OW 251
67130: PPUSH
67131: LD_VAR 0 1
67135: PPUSH
67136: CALL_OW 255
67140: PPUSH
67141: CALL_OW 440
67145: NOT
67146: IFFALSE 67182
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 250
67157: PPUSH
67158: LD_VAR 0 1
67162: PPUSH
67163: CALL_OW 251
67167: PPUSH
67168: LD_VAR 0 1
67172: PPUSH
67173: CALL_OW 255
67177: PPUSH
67178: CALL_OW 441
// end ; if btype = b_warehouse then
67182: LD_VAR 0 5
67186: PUSH
67187: LD_INT 1
67189: EQUAL
67190: IFFALSE 67208
// begin btype := b_depot ;
67192: LD_ADDR_VAR 0 5
67196: PUSH
67197: LD_INT 0
67199: ST_TO_ADDR
// pos := 1 ;
67200: LD_ADDR_VAR 0 6
67204: PUSH
67205: LD_INT 1
67207: ST_TO_ADDR
// end ; if btype = b_factory then
67208: LD_VAR 0 5
67212: PUSH
67213: LD_INT 3
67215: EQUAL
67216: IFFALSE 67234
// begin btype := b_workshop ;
67218: LD_ADDR_VAR 0 5
67222: PUSH
67223: LD_INT 2
67225: ST_TO_ADDR
// pos := 1 ;
67226: LD_ADDR_VAR 0 6
67230: PUSH
67231: LD_INT 1
67233: ST_TO_ADDR
// end ; if btype = b_barracks then
67234: LD_VAR 0 5
67238: PUSH
67239: LD_INT 5
67241: EQUAL
67242: IFFALSE 67252
// btype := b_armoury ;
67244: LD_ADDR_VAR 0 5
67248: PUSH
67249: LD_INT 4
67251: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
67252: LD_VAR 0 5
67256: PUSH
67257: LD_INT 7
67259: PUSH
67260: LD_INT 8
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: IN
67267: IFFALSE 67277
// btype := b_lab ;
67269: LD_ADDR_VAR 0 5
67273: PUSH
67274: LD_INT 6
67276: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
67277: LD_ADDR_EXP 16
67281: PUSH
67282: LD_EXP 16
67286: PPUSH
67287: LD_VAR 0 3
67291: PUSH
67292: LD_EXP 16
67296: PUSH
67297: LD_VAR 0 3
67301: ARRAY
67302: PUSH
67303: LD_INT 1
67305: PLUS
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PPUSH
67311: LD_VAR 0 5
67315: PUSH
67316: LD_VAR 0 1
67320: PPUSH
67321: CALL_OW 250
67325: PUSH
67326: LD_VAR 0 1
67330: PPUSH
67331: CALL_OW 251
67335: PUSH
67336: LD_VAR 0 1
67340: PPUSH
67341: CALL_OW 254
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: PPUSH
67352: CALL 8049 0 3
67356: ST_TO_ADDR
// if pos = 1 then
67357: LD_VAR 0 6
67361: PUSH
67362: LD_INT 1
67364: EQUAL
67365: IFFALSE 67480
// begin tmp := mc_build_list [ i ] ;
67367: LD_ADDR_VAR 0 7
67371: PUSH
67372: LD_EXP 16
67376: PUSH
67377: LD_VAR 0 3
67381: ARRAY
67382: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67383: LD_VAR 0 7
67387: PPUSH
67388: LD_INT 2
67390: PUSH
67391: LD_INT 30
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 30
67403: PUSH
67404: LD_INT 1
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: PPUSH
67416: CALL_OW 72
67420: IFFALSE 67430
// pos := 2 ;
67422: LD_ADDR_VAR 0 6
67426: PUSH
67427: LD_INT 2
67429: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
67430: LD_ADDR_VAR 0 7
67434: PUSH
67435: LD_VAR 0 7
67439: PPUSH
67440: LD_VAR 0 6
67444: PPUSH
67445: LD_VAR 0 7
67449: PPUSH
67450: CALL 8375 0 3
67454: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
67455: LD_ADDR_EXP 16
67459: PUSH
67460: LD_EXP 16
67464: PPUSH
67465: LD_VAR 0 3
67469: PPUSH
67470: LD_VAR 0 7
67474: PPUSH
67475: CALL_OW 1
67479: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
67480: LD_VAR 0 1
67484: PUSH
67485: LD_EXP 11
67489: PUSH
67490: LD_VAR 0 3
67494: ARRAY
67495: IN
67496: IFFALSE 67535
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
67498: LD_ADDR_EXP 11
67502: PUSH
67503: LD_EXP 11
67507: PPUSH
67508: LD_VAR 0 3
67512: PPUSH
67513: LD_EXP 11
67517: PUSH
67518: LD_VAR 0 3
67522: ARRAY
67523: PUSH
67524: LD_VAR 0 1
67528: DIFF
67529: PPUSH
67530: CALL_OW 1
67534: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
67535: LD_VAR 0 1
67539: PUSH
67540: LD_EXP 18
67544: PUSH
67545: LD_VAR 0 3
67549: ARRAY
67550: IN
67551: IFFALSE 67590
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
67553: LD_ADDR_EXP 18
67557: PUSH
67558: LD_EXP 18
67562: PPUSH
67563: LD_VAR 0 3
67567: PPUSH
67568: LD_EXP 18
67572: PUSH
67573: LD_VAR 0 3
67577: ARRAY
67578: PUSH
67579: LD_VAR 0 1
67583: DIFF
67584: PPUSH
67585: CALL_OW 1
67589: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
67590: LD_VAR 0 1
67594: PUSH
67595: LD_EXP 30
67599: PUSH
67600: LD_VAR 0 3
67604: ARRAY
67605: IN
67606: IFFALSE 67645
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
67608: LD_ADDR_EXP 30
67612: PUSH
67613: LD_EXP 30
67617: PPUSH
67618: LD_VAR 0 3
67622: PPUSH
67623: LD_EXP 30
67627: PUSH
67628: LD_VAR 0 3
67632: ARRAY
67633: PUSH
67634: LD_VAR 0 1
67638: DIFF
67639: PPUSH
67640: CALL_OW 1
67644: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
67645: LD_VAR 0 1
67649: PUSH
67650: LD_EXP 33
67654: PUSH
67655: LD_VAR 0 3
67659: ARRAY
67660: IN
67661: IFFALSE 67700
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
67663: LD_ADDR_EXP 33
67667: PUSH
67668: LD_EXP 33
67672: PPUSH
67673: LD_VAR 0 3
67677: PPUSH
67678: LD_EXP 33
67682: PUSH
67683: LD_VAR 0 3
67687: ARRAY
67688: PUSH
67689: LD_VAR 0 1
67693: DIFF
67694: PPUSH
67695: CALL_OW 1
67699: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
67700: LD_VAR 0 1
67704: PUSH
67705: LD_EXP 20
67709: PUSH
67710: LD_VAR 0 3
67714: ARRAY
67715: IN
67716: IFFALSE 67755
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
67718: LD_ADDR_EXP 20
67722: PUSH
67723: LD_EXP 20
67727: PPUSH
67728: LD_VAR 0 3
67732: PPUSH
67733: LD_EXP 20
67737: PUSH
67738: LD_VAR 0 3
67742: ARRAY
67743: PUSH
67744: LD_VAR 0 1
67748: DIFF
67749: PPUSH
67750: CALL_OW 1
67754: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
67755: LD_VAR 0 1
67759: PUSH
67760: LD_EXP 19
67764: PUSH
67765: LD_VAR 0 3
67769: ARRAY
67770: IN
67771: IFFALSE 67810
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
67773: LD_ADDR_EXP 19
67777: PUSH
67778: LD_EXP 19
67782: PPUSH
67783: LD_VAR 0 3
67787: PPUSH
67788: LD_EXP 19
67792: PUSH
67793: LD_VAR 0 3
67797: ARRAY
67798: PUSH
67799: LD_VAR 0 1
67803: DIFF
67804: PPUSH
67805: CALL_OW 1
67809: ST_TO_ADDR
// end ; break ;
67810: GO 67814
// end ;
67812: GO 66460
67814: POP
67815: POP
// end ;
67816: LD_VAR 0 2
67820: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
67821: LD_INT 0
67823: PPUSH
67824: PPUSH
67825: PPUSH
// if not mc_bases or not skirmish then
67826: LD_EXP 11
67830: NOT
67831: PUSH
67832: LD_EXP 9
67836: NOT
67837: OR
67838: IFFALSE 67842
// exit ;
67840: GO 68057
// for i = 1 to mc_bases do
67842: LD_ADDR_VAR 0 3
67846: PUSH
67847: DOUBLE
67848: LD_INT 1
67850: DEC
67851: ST_TO_ADDR
67852: LD_EXP 11
67856: PUSH
67857: FOR_TO
67858: IFFALSE 68055
// begin if building in mc_construct_list [ i ] then
67860: LD_VAR 0 1
67864: PUSH
67865: LD_EXP 18
67869: PUSH
67870: LD_VAR 0 3
67874: ARRAY
67875: IN
67876: IFFALSE 68053
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
67878: LD_ADDR_EXP 18
67882: PUSH
67883: LD_EXP 18
67887: PPUSH
67888: LD_VAR 0 3
67892: PPUSH
67893: LD_EXP 18
67897: PUSH
67898: LD_VAR 0 3
67902: ARRAY
67903: PUSH
67904: LD_VAR 0 1
67908: DIFF
67909: PPUSH
67910: CALL_OW 1
67914: ST_TO_ADDR
// if building in mc_lab [ i ] then
67915: LD_VAR 0 1
67919: PUSH
67920: LD_EXP 44
67924: PUSH
67925: LD_VAR 0 3
67929: ARRAY
67930: IN
67931: IFFALSE 67986
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
67933: LD_ADDR_EXP 45
67937: PUSH
67938: LD_EXP 45
67942: PPUSH
67943: LD_VAR 0 3
67947: PPUSH
67948: LD_EXP 45
67952: PUSH
67953: LD_VAR 0 3
67957: ARRAY
67958: PPUSH
67959: LD_INT 1
67961: PPUSH
67962: LD_EXP 45
67966: PUSH
67967: LD_VAR 0 3
67971: ARRAY
67972: PPUSH
67973: LD_INT 0
67975: PPUSH
67976: CALL 7467 0 4
67980: PPUSH
67981: CALL_OW 1
67985: ST_TO_ADDR
// if not building in mc_bases [ i ] then
67986: LD_VAR 0 1
67990: PUSH
67991: LD_EXP 11
67995: PUSH
67996: LD_VAR 0 3
68000: ARRAY
68001: IN
68002: NOT
68003: IFFALSE 68049
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
68005: LD_ADDR_EXP 11
68009: PUSH
68010: LD_EXP 11
68014: PPUSH
68015: LD_VAR 0 3
68019: PUSH
68020: LD_EXP 11
68024: PUSH
68025: LD_VAR 0 3
68029: ARRAY
68030: PUSH
68031: LD_INT 1
68033: PLUS
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PPUSH
68039: LD_VAR 0 1
68043: PPUSH
68044: CALL 8049 0 3
68048: ST_TO_ADDR
// exit ;
68049: POP
68050: POP
68051: GO 68057
// end ; end ;
68053: GO 67857
68055: POP
68056: POP
// end ;
68057: LD_VAR 0 2
68061: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
68062: LD_INT 0
68064: PPUSH
68065: PPUSH
68066: PPUSH
68067: PPUSH
68068: PPUSH
68069: PPUSH
68070: PPUSH
// if not mc_bases or not skirmish then
68071: LD_EXP 11
68075: NOT
68076: PUSH
68077: LD_EXP 9
68081: NOT
68082: OR
68083: IFFALSE 68087
// exit ;
68085: GO 68748
// for i = 1 to mc_bases do
68087: LD_ADDR_VAR 0 3
68091: PUSH
68092: DOUBLE
68093: LD_INT 1
68095: DEC
68096: ST_TO_ADDR
68097: LD_EXP 11
68101: PUSH
68102: FOR_TO
68103: IFFALSE 68746
// begin if building in mc_construct_list [ i ] then
68105: LD_VAR 0 1
68109: PUSH
68110: LD_EXP 18
68114: PUSH
68115: LD_VAR 0 3
68119: ARRAY
68120: IN
68121: IFFALSE 68744
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
68123: LD_ADDR_EXP 18
68127: PUSH
68128: LD_EXP 18
68132: PPUSH
68133: LD_VAR 0 3
68137: PPUSH
68138: LD_EXP 18
68142: PUSH
68143: LD_VAR 0 3
68147: ARRAY
68148: PUSH
68149: LD_VAR 0 1
68153: DIFF
68154: PPUSH
68155: CALL_OW 1
68159: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
68160: LD_ADDR_EXP 11
68164: PUSH
68165: LD_EXP 11
68169: PPUSH
68170: LD_VAR 0 3
68174: PUSH
68175: LD_EXP 11
68179: PUSH
68180: LD_VAR 0 3
68184: ARRAY
68185: PUSH
68186: LD_INT 1
68188: PLUS
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PPUSH
68194: LD_VAR 0 1
68198: PPUSH
68199: CALL 8049 0 3
68203: ST_TO_ADDR
// btype := GetBType ( building ) ;
68204: LD_ADDR_VAR 0 5
68208: PUSH
68209: LD_VAR 0 1
68213: PPUSH
68214: CALL_OW 266
68218: ST_TO_ADDR
// side := GetSide ( building ) ;
68219: LD_ADDR_VAR 0 8
68223: PUSH
68224: LD_VAR 0 1
68228: PPUSH
68229: CALL_OW 255
68233: ST_TO_ADDR
// if btype = b_lab then
68234: LD_VAR 0 5
68238: PUSH
68239: LD_INT 6
68241: EQUAL
68242: IFFALSE 68292
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
68244: LD_ADDR_EXP 44
68248: PUSH
68249: LD_EXP 44
68253: PPUSH
68254: LD_VAR 0 3
68258: PUSH
68259: LD_EXP 44
68263: PUSH
68264: LD_VAR 0 3
68268: ARRAY
68269: PUSH
68270: LD_INT 1
68272: PLUS
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PPUSH
68278: LD_VAR 0 1
68282: PPUSH
68283: CALL 8049 0 3
68287: ST_TO_ADDR
// exit ;
68288: POP
68289: POP
68290: GO 68748
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
68292: LD_VAR 0 5
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: LD_INT 2
68302: PUSH
68303: LD_INT 4
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: IN
68311: IFFALSE 68435
// begin if btype = b_armoury then
68313: LD_VAR 0 5
68317: PUSH
68318: LD_INT 4
68320: EQUAL
68321: IFFALSE 68331
// btype := b_barracks ;
68323: LD_ADDR_VAR 0 5
68327: PUSH
68328: LD_INT 5
68330: ST_TO_ADDR
// if btype = b_depot then
68331: LD_VAR 0 5
68335: PUSH
68336: LD_INT 0
68338: EQUAL
68339: IFFALSE 68349
// btype := b_warehouse ;
68341: LD_ADDR_VAR 0 5
68345: PUSH
68346: LD_INT 1
68348: ST_TO_ADDR
// if btype = b_workshop then
68349: LD_VAR 0 5
68353: PUSH
68354: LD_INT 2
68356: EQUAL
68357: IFFALSE 68367
// btype := b_factory ;
68359: LD_ADDR_VAR 0 5
68363: PUSH
68364: LD_INT 3
68366: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
68367: LD_VAR 0 5
68371: PPUSH
68372: LD_VAR 0 8
68376: PPUSH
68377: CALL_OW 323
68381: PUSH
68382: LD_INT 1
68384: EQUAL
68385: IFFALSE 68431
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
68387: LD_ADDR_EXP 43
68391: PUSH
68392: LD_EXP 43
68396: PPUSH
68397: LD_VAR 0 3
68401: PUSH
68402: LD_EXP 43
68406: PUSH
68407: LD_VAR 0 3
68411: ARRAY
68412: PUSH
68413: LD_INT 1
68415: PLUS
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PPUSH
68421: LD_VAR 0 1
68425: PPUSH
68426: CALL 8049 0 3
68430: ST_TO_ADDR
// exit ;
68431: POP
68432: POP
68433: GO 68748
// end ; if btype in [ b_bunker , b_turret ] then
68435: LD_VAR 0 5
68439: PUSH
68440: LD_INT 32
68442: PUSH
68443: LD_INT 33
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: IN
68450: IFFALSE 68740
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
68452: LD_ADDR_EXP 19
68456: PUSH
68457: LD_EXP 19
68461: PPUSH
68462: LD_VAR 0 3
68466: PUSH
68467: LD_EXP 19
68471: PUSH
68472: LD_VAR 0 3
68476: ARRAY
68477: PUSH
68478: LD_INT 1
68480: PLUS
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PPUSH
68486: LD_VAR 0 1
68490: PPUSH
68491: CALL 8049 0 3
68495: ST_TO_ADDR
// if btype = b_bunker then
68496: LD_VAR 0 5
68500: PUSH
68501: LD_INT 32
68503: EQUAL
68504: IFFALSE 68740
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
68506: LD_ADDR_EXP 20
68510: PUSH
68511: LD_EXP 20
68515: PPUSH
68516: LD_VAR 0 3
68520: PUSH
68521: LD_EXP 20
68525: PUSH
68526: LD_VAR 0 3
68530: ARRAY
68531: PUSH
68532: LD_INT 1
68534: PLUS
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PPUSH
68540: LD_VAR 0 1
68544: PPUSH
68545: CALL 8049 0 3
68549: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
68550: LD_ADDR_VAR 0 6
68554: PUSH
68555: LD_EXP 11
68559: PUSH
68560: LD_VAR 0 3
68564: ARRAY
68565: PPUSH
68566: LD_INT 25
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 3
68578: PUSH
68579: LD_INT 54
68581: PUSH
68582: EMPTY
68583: LIST
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PPUSH
68593: CALL_OW 72
68597: ST_TO_ADDR
// if tmp then
68598: LD_VAR 0 6
68602: IFFALSE 68608
// exit ;
68604: POP
68605: POP
68606: GO 68748
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
68608: LD_ADDR_VAR 0 6
68612: PUSH
68613: LD_EXP 11
68617: PUSH
68618: LD_VAR 0 3
68622: ARRAY
68623: PPUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 30
68629: PUSH
68630: LD_INT 4
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 30
68639: PUSH
68640: LD_INT 5
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: LIST
68651: PPUSH
68652: CALL_OW 72
68656: ST_TO_ADDR
// if not tmp then
68657: LD_VAR 0 6
68661: NOT
68662: IFFALSE 68668
// exit ;
68664: POP
68665: POP
68666: GO 68748
// for j in tmp do
68668: LD_ADDR_VAR 0 4
68672: PUSH
68673: LD_VAR 0 6
68677: PUSH
68678: FOR_IN
68679: IFFALSE 68738
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
68681: LD_ADDR_VAR 0 7
68685: PUSH
68686: LD_VAR 0 4
68690: PPUSH
68691: CALL_OW 313
68695: PPUSH
68696: LD_INT 25
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PPUSH
68706: CALL_OW 72
68710: ST_TO_ADDR
// if units then
68711: LD_VAR 0 7
68715: IFFALSE 68736
// begin ComExitBuilding ( units [ 1 ] ) ;
68717: LD_VAR 0 7
68721: PUSH
68722: LD_INT 1
68724: ARRAY
68725: PPUSH
68726: CALL_OW 122
// exit ;
68730: POP
68731: POP
68732: POP
68733: POP
68734: GO 68748
// end ; end ;
68736: GO 68678
68738: POP
68739: POP
// end ; end ; exit ;
68740: POP
68741: POP
68742: GO 68748
// end ; end ;
68744: GO 68102
68746: POP
68747: POP
// end ;
68748: LD_VAR 0 2
68752: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
68753: LD_INT 0
68755: PPUSH
68756: PPUSH
68757: PPUSH
68758: PPUSH
68759: PPUSH
68760: PPUSH
68761: PPUSH
// if not mc_bases or not skirmish then
68762: LD_EXP 11
68766: NOT
68767: PUSH
68768: LD_EXP 9
68772: NOT
68773: OR
68774: IFFALSE 68778
// exit ;
68776: GO 69009
// btype := GetBType ( building ) ;
68778: LD_ADDR_VAR 0 6
68782: PUSH
68783: LD_VAR 0 1
68787: PPUSH
68788: CALL_OW 266
68792: ST_TO_ADDR
// x := GetX ( building ) ;
68793: LD_ADDR_VAR 0 7
68797: PUSH
68798: LD_VAR 0 1
68802: PPUSH
68803: CALL_OW 250
68807: ST_TO_ADDR
// y := GetY ( building ) ;
68808: LD_ADDR_VAR 0 8
68812: PUSH
68813: LD_VAR 0 1
68817: PPUSH
68818: CALL_OW 251
68822: ST_TO_ADDR
// d := GetDir ( building ) ;
68823: LD_ADDR_VAR 0 9
68827: PUSH
68828: LD_VAR 0 1
68832: PPUSH
68833: CALL_OW 254
68837: ST_TO_ADDR
// for i = 1 to mc_bases do
68838: LD_ADDR_VAR 0 4
68842: PUSH
68843: DOUBLE
68844: LD_INT 1
68846: DEC
68847: ST_TO_ADDR
68848: LD_EXP 11
68852: PUSH
68853: FOR_TO
68854: IFFALSE 69007
// begin if not mc_build_list [ i ] then
68856: LD_EXP 16
68860: PUSH
68861: LD_VAR 0 4
68865: ARRAY
68866: NOT
68867: IFFALSE 68871
// continue ;
68869: GO 68853
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
68871: LD_VAR 0 6
68875: PUSH
68876: LD_VAR 0 7
68880: PUSH
68881: LD_VAR 0 8
68885: PUSH
68886: LD_VAR 0 9
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: PPUSH
68897: LD_EXP 16
68901: PUSH
68902: LD_VAR 0 4
68906: ARRAY
68907: PUSH
68908: LD_INT 1
68910: ARRAY
68911: PPUSH
68912: CALL 14218 0 2
68916: IFFALSE 69005
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
68918: LD_ADDR_EXP 16
68922: PUSH
68923: LD_EXP 16
68927: PPUSH
68928: LD_VAR 0 4
68932: PPUSH
68933: LD_EXP 16
68937: PUSH
68938: LD_VAR 0 4
68942: ARRAY
68943: PPUSH
68944: LD_INT 1
68946: PPUSH
68947: CALL_OW 3
68951: PPUSH
68952: CALL_OW 1
68956: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
68957: LD_ADDR_EXP 18
68961: PUSH
68962: LD_EXP 18
68966: PPUSH
68967: LD_VAR 0 4
68971: PUSH
68972: LD_EXP 18
68976: PUSH
68977: LD_VAR 0 4
68981: ARRAY
68982: PUSH
68983: LD_INT 1
68985: PLUS
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PPUSH
68991: LD_VAR 0 1
68995: PPUSH
68996: CALL 8049 0 3
69000: ST_TO_ADDR
// exit ;
69001: POP
69002: POP
69003: GO 69009
// end ; end ;
69005: GO 68853
69007: POP
69008: POP
// end ;
69009: LD_VAR 0 3
69013: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
69014: LD_INT 0
69016: PPUSH
69017: PPUSH
69018: PPUSH
// if not mc_bases or not skirmish then
69019: LD_EXP 11
69023: NOT
69024: PUSH
69025: LD_EXP 9
69029: NOT
69030: OR
69031: IFFALSE 69035
// exit ;
69033: GO 69225
// for i = 1 to mc_bases do
69035: LD_ADDR_VAR 0 4
69039: PUSH
69040: DOUBLE
69041: LD_INT 1
69043: DEC
69044: ST_TO_ADDR
69045: LD_EXP 11
69049: PUSH
69050: FOR_TO
69051: IFFALSE 69138
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
69053: LD_VAR 0 1
69057: PUSH
69058: LD_EXP 19
69062: PUSH
69063: LD_VAR 0 4
69067: ARRAY
69068: IN
69069: PUSH
69070: LD_VAR 0 1
69074: PUSH
69075: LD_EXP 20
69079: PUSH
69080: LD_VAR 0 4
69084: ARRAY
69085: IN
69086: NOT
69087: AND
69088: IFFALSE 69136
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
69090: LD_ADDR_EXP 20
69094: PUSH
69095: LD_EXP 20
69099: PPUSH
69100: LD_VAR 0 4
69104: PUSH
69105: LD_EXP 20
69109: PUSH
69110: LD_VAR 0 4
69114: ARRAY
69115: PUSH
69116: LD_INT 1
69118: PLUS
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PPUSH
69124: LD_VAR 0 1
69128: PPUSH
69129: CALL 8049 0 3
69133: ST_TO_ADDR
// break ;
69134: GO 69138
// end ; end ;
69136: GO 69050
69138: POP
69139: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
69140: LD_VAR 0 1
69144: PPUSH
69145: CALL_OW 257
69149: PUSH
69150: LD_EXP 37
69154: IN
69155: PUSH
69156: LD_VAR 0 1
69160: PPUSH
69161: CALL_OW 266
69165: PUSH
69166: LD_INT 5
69168: EQUAL
69169: AND
69170: PUSH
69171: LD_VAR 0 2
69175: PPUSH
69176: CALL_OW 110
69180: PUSH
69181: LD_INT 18
69183: NONEQUAL
69184: AND
69185: IFFALSE 69225
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
69187: LD_VAR 0 2
69191: PPUSH
69192: CALL_OW 257
69196: PUSH
69197: LD_INT 5
69199: PUSH
69200: LD_INT 8
69202: PUSH
69203: LD_INT 9
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: LIST
69210: IN
69211: IFFALSE 69225
// SetClass ( unit , 1 ) ;
69213: LD_VAR 0 2
69217: PPUSH
69218: LD_INT 1
69220: PPUSH
69221: CALL_OW 336
// end ;
69225: LD_VAR 0 3
69229: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
69230: LD_INT 0
69232: PPUSH
69233: PPUSH
// if not mc_bases or not skirmish then
69234: LD_EXP 11
69238: NOT
69239: PUSH
69240: LD_EXP 9
69244: NOT
69245: OR
69246: IFFALSE 69250
// exit ;
69248: GO 69366
// if GetLives ( abandoned_vehicle ) > 250 then
69250: LD_VAR 0 2
69254: PPUSH
69255: CALL_OW 256
69259: PUSH
69260: LD_INT 250
69262: GREATER
69263: IFFALSE 69267
// exit ;
69265: GO 69366
// for i = 1 to mc_bases do
69267: LD_ADDR_VAR 0 6
69271: PUSH
69272: DOUBLE
69273: LD_INT 1
69275: DEC
69276: ST_TO_ADDR
69277: LD_EXP 11
69281: PUSH
69282: FOR_TO
69283: IFFALSE 69364
// begin if driver in mc_bases [ i ] then
69285: LD_VAR 0 1
69289: PUSH
69290: LD_EXP 11
69294: PUSH
69295: LD_VAR 0 6
69299: ARRAY
69300: IN
69301: IFFALSE 69362
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
69303: LD_VAR 0 1
69307: PPUSH
69308: LD_EXP 11
69312: PUSH
69313: LD_VAR 0 6
69317: ARRAY
69318: PPUSH
69319: LD_INT 2
69321: PUSH
69322: LD_INT 30
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 30
69334: PUSH
69335: LD_INT 1
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: LIST
69346: PPUSH
69347: CALL_OW 72
69351: PUSH
69352: LD_INT 1
69354: ARRAY
69355: PPUSH
69356: CALL_OW 112
// break ;
69360: GO 69364
// end ; end ;
69362: GO 69282
69364: POP
69365: POP
// end ; end_of_file
69366: LD_VAR 0 5
69370: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
69371: GO 69373
69373: DISABLE
// begin ru_radar := 98 ;
69374: LD_ADDR_EXP 54
69378: PUSH
69379: LD_INT 98
69381: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
69382: LD_ADDR_EXP 55
69386: PUSH
69387: LD_INT 89
69389: ST_TO_ADDR
// us_hack := 99 ;
69390: LD_ADDR_EXP 56
69394: PUSH
69395: LD_INT 99
69397: ST_TO_ADDR
// us_artillery := 97 ;
69398: LD_ADDR_EXP 57
69402: PUSH
69403: LD_INT 97
69405: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69406: LD_ADDR_EXP 58
69410: PUSH
69411: LD_INT 91
69413: ST_TO_ADDR
// tech_Artillery := 80 ;
69414: LD_ADDR_EXP 59
69418: PUSH
69419: LD_INT 80
69421: ST_TO_ADDR
// tech_RadMat := 81 ;
69422: LD_ADDR_EXP 60
69426: PUSH
69427: LD_INT 81
69429: ST_TO_ADDR
// tech_BasicTools := 82 ;
69430: LD_ADDR_EXP 61
69434: PUSH
69435: LD_INT 82
69437: ST_TO_ADDR
// tech_Cargo := 83 ;
69438: LD_ADDR_EXP 62
69442: PUSH
69443: LD_INT 83
69445: ST_TO_ADDR
// tech_Track := 84 ;
69446: LD_ADDR_EXP 63
69450: PUSH
69451: LD_INT 84
69453: ST_TO_ADDR
// tech_Crane := 85 ;
69454: LD_ADDR_EXP 64
69458: PUSH
69459: LD_INT 85
69461: ST_TO_ADDR
// tech_Bulldozer := 86 ;
69462: LD_ADDR_EXP 65
69466: PUSH
69467: LD_INT 86
69469: ST_TO_ADDR
// tech_Hovercraft := 87 ;
69470: LD_ADDR_EXP 66
69474: PUSH
69475: LD_INT 87
69477: ST_TO_ADDR
// end ; end_of_file
69478: END
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
69479: LD_INT 0
69481: PPUSH
69482: PPUSH
69483: PPUSH
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
69488: PPUSH
69489: PPUSH
69490: PPUSH
69491: PPUSH
69492: PPUSH
69493: PPUSH
69494: PPUSH
69495: PPUSH
69496: PPUSH
69497: PPUSH
69498: PPUSH
69499: PPUSH
69500: PPUSH
69501: PPUSH
69502: PPUSH
69503: PPUSH
69504: PPUSH
69505: PPUSH
69506: PPUSH
69507: PPUSH
69508: PPUSH
69509: PPUSH
69510: PPUSH
69511: PPUSH
69512: PPUSH
69513: PPUSH
69514: PPUSH
// if not list then
69515: LD_VAR 0 1
69519: NOT
69520: IFFALSE 69524
// exit ;
69522: GO 74183
// base := list [ 1 ] ;
69524: LD_ADDR_VAR 0 3
69528: PUSH
69529: LD_VAR 0 1
69533: PUSH
69534: LD_INT 1
69536: ARRAY
69537: ST_TO_ADDR
// group := list [ 2 ] ;
69538: LD_ADDR_VAR 0 4
69542: PUSH
69543: LD_VAR 0 1
69547: PUSH
69548: LD_INT 2
69550: ARRAY
69551: ST_TO_ADDR
// path := list [ 3 ] ;
69552: LD_ADDR_VAR 0 5
69556: PUSH
69557: LD_VAR 0 1
69561: PUSH
69562: LD_INT 3
69564: ARRAY
69565: ST_TO_ADDR
// flags := list [ 4 ] ;
69566: LD_ADDR_VAR 0 6
69570: PUSH
69571: LD_VAR 0 1
69575: PUSH
69576: LD_INT 4
69578: ARRAY
69579: ST_TO_ADDR
// mined := [ ] ;
69580: LD_ADDR_VAR 0 27
69584: PUSH
69585: EMPTY
69586: ST_TO_ADDR
// bombed := [ ] ;
69587: LD_ADDR_VAR 0 28
69591: PUSH
69592: EMPTY
69593: ST_TO_ADDR
// healers := [ ] ;
69594: LD_ADDR_VAR 0 31
69598: PUSH
69599: EMPTY
69600: ST_TO_ADDR
// to_heal := [ ] ;
69601: LD_ADDR_VAR 0 30
69605: PUSH
69606: EMPTY
69607: ST_TO_ADDR
// repairs := [ ] ;
69608: LD_ADDR_VAR 0 33
69612: PUSH
69613: EMPTY
69614: ST_TO_ADDR
// to_repair := [ ] ;
69615: LD_ADDR_VAR 0 32
69619: PUSH
69620: EMPTY
69621: ST_TO_ADDR
// if not group or not path then
69622: LD_VAR 0 4
69626: NOT
69627: PUSH
69628: LD_VAR 0 5
69632: NOT
69633: OR
69634: IFFALSE 69638
// exit ;
69636: GO 74183
// side := GetSide ( group [ 1 ] ) ;
69638: LD_ADDR_VAR 0 35
69642: PUSH
69643: LD_VAR 0 4
69647: PUSH
69648: LD_INT 1
69650: ARRAY
69651: PPUSH
69652: CALL_OW 255
69656: ST_TO_ADDR
// if flags then
69657: LD_VAR 0 6
69661: IFFALSE 69805
// begin f_ignore_area := flags [ 1 ] ;
69663: LD_ADDR_VAR 0 17
69667: PUSH
69668: LD_VAR 0 6
69672: PUSH
69673: LD_INT 1
69675: ARRAY
69676: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
69677: LD_ADDR_VAR 0 18
69681: PUSH
69682: LD_VAR 0 6
69686: PUSH
69687: LD_INT 2
69689: ARRAY
69690: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
69691: LD_ADDR_VAR 0 19
69695: PUSH
69696: LD_VAR 0 6
69700: PUSH
69701: LD_INT 3
69703: ARRAY
69704: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
69705: LD_ADDR_VAR 0 20
69709: PUSH
69710: LD_VAR 0 6
69714: PUSH
69715: LD_INT 4
69717: ARRAY
69718: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
69719: LD_ADDR_VAR 0 21
69723: PUSH
69724: LD_VAR 0 6
69728: PUSH
69729: LD_INT 5
69731: ARRAY
69732: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
69733: LD_ADDR_VAR 0 22
69737: PUSH
69738: LD_VAR 0 6
69742: PUSH
69743: LD_INT 6
69745: ARRAY
69746: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
69747: LD_ADDR_VAR 0 23
69751: PUSH
69752: LD_VAR 0 6
69756: PUSH
69757: LD_INT 7
69759: ARRAY
69760: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
69761: LD_ADDR_VAR 0 24
69765: PUSH
69766: LD_VAR 0 6
69770: PUSH
69771: LD_INT 8
69773: ARRAY
69774: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
69775: LD_ADDR_VAR 0 25
69779: PUSH
69780: LD_VAR 0 6
69784: PUSH
69785: LD_INT 9
69787: ARRAY
69788: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
69789: LD_ADDR_VAR 0 26
69793: PUSH
69794: LD_VAR 0 6
69798: PUSH
69799: LD_INT 10
69801: ARRAY
69802: ST_TO_ADDR
// end else
69803: GO 69885
// begin f_ignore_area := false ;
69805: LD_ADDR_VAR 0 17
69809: PUSH
69810: LD_INT 0
69812: ST_TO_ADDR
// f_capture := false ;
69813: LD_ADDR_VAR 0 18
69817: PUSH
69818: LD_INT 0
69820: ST_TO_ADDR
// f_ignore_civ := false ;
69821: LD_ADDR_VAR 0 19
69825: PUSH
69826: LD_INT 0
69828: ST_TO_ADDR
// f_murder := false ;
69829: LD_ADDR_VAR 0 20
69833: PUSH
69834: LD_INT 0
69836: ST_TO_ADDR
// f_mines := false ;
69837: LD_ADDR_VAR 0 21
69841: PUSH
69842: LD_INT 0
69844: ST_TO_ADDR
// f_repair := false ;
69845: LD_ADDR_VAR 0 22
69849: PUSH
69850: LD_INT 0
69852: ST_TO_ADDR
// f_heal := false ;
69853: LD_ADDR_VAR 0 23
69857: PUSH
69858: LD_INT 0
69860: ST_TO_ADDR
// f_spacetime := false ;
69861: LD_ADDR_VAR 0 24
69865: PUSH
69866: LD_INT 0
69868: ST_TO_ADDR
// f_attack_depot := false ;
69869: LD_ADDR_VAR 0 25
69873: PUSH
69874: LD_INT 0
69876: ST_TO_ADDR
// f_crawl := false ;
69877: LD_ADDR_VAR 0 26
69881: PUSH
69882: LD_INT 0
69884: ST_TO_ADDR
// end ; if f_heal then
69885: LD_VAR 0 23
69889: IFFALSE 69916
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
69891: LD_ADDR_VAR 0 31
69895: PUSH
69896: LD_VAR 0 4
69900: PPUSH
69901: LD_INT 25
69903: PUSH
69904: LD_INT 4
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PPUSH
69911: CALL_OW 72
69915: ST_TO_ADDR
// if f_repair then
69916: LD_VAR 0 22
69920: IFFALSE 69947
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
69922: LD_ADDR_VAR 0 33
69926: PUSH
69927: LD_VAR 0 4
69931: PPUSH
69932: LD_INT 25
69934: PUSH
69935: LD_INT 3
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PPUSH
69942: CALL_OW 72
69946: ST_TO_ADDR
// units_path := [ ] ;
69947: LD_ADDR_VAR 0 16
69951: PUSH
69952: EMPTY
69953: ST_TO_ADDR
// for i = 1 to group do
69954: LD_ADDR_VAR 0 7
69958: PUSH
69959: DOUBLE
69960: LD_INT 1
69962: DEC
69963: ST_TO_ADDR
69964: LD_VAR 0 4
69968: PUSH
69969: FOR_TO
69970: IFFALSE 69999
// units_path := Replace ( units_path , i , path ) ;
69972: LD_ADDR_VAR 0 16
69976: PUSH
69977: LD_VAR 0 16
69981: PPUSH
69982: LD_VAR 0 7
69986: PPUSH
69987: LD_VAR 0 5
69991: PPUSH
69992: CALL_OW 1
69996: ST_TO_ADDR
69997: GO 69969
69999: POP
70000: POP
// repeat for i = group downto 1 do
70001: LD_ADDR_VAR 0 7
70005: PUSH
70006: DOUBLE
70007: LD_VAR 0 4
70011: INC
70012: ST_TO_ADDR
70013: LD_INT 1
70015: PUSH
70016: FOR_DOWNTO
70017: IFFALSE 74139
// begin wait ( 5 ) ;
70019: LD_INT 5
70021: PPUSH
70022: CALL_OW 67
// tmp := [ ] ;
70026: LD_ADDR_VAR 0 14
70030: PUSH
70031: EMPTY
70032: ST_TO_ADDR
// attacking := false ;
70033: LD_ADDR_VAR 0 29
70037: PUSH
70038: LD_INT 0
70040: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
70041: LD_VAR 0 4
70045: PUSH
70046: LD_VAR 0 7
70050: ARRAY
70051: PPUSH
70052: CALL_OW 301
70056: PUSH
70057: LD_VAR 0 4
70061: PUSH
70062: LD_VAR 0 7
70066: ARRAY
70067: NOT
70068: OR
70069: IFFALSE 70178
// begin if GetType ( group [ i ] ) = unit_human then
70071: LD_VAR 0 4
70075: PUSH
70076: LD_VAR 0 7
70080: ARRAY
70081: PPUSH
70082: CALL_OW 247
70086: PUSH
70087: LD_INT 1
70089: EQUAL
70090: IFFALSE 70136
// begin to_heal := to_heal diff group [ i ] ;
70092: LD_ADDR_VAR 0 30
70096: PUSH
70097: LD_VAR 0 30
70101: PUSH
70102: LD_VAR 0 4
70106: PUSH
70107: LD_VAR 0 7
70111: ARRAY
70112: DIFF
70113: ST_TO_ADDR
// healers := healers diff group [ i ] ;
70114: LD_ADDR_VAR 0 31
70118: PUSH
70119: LD_VAR 0 31
70123: PUSH
70124: LD_VAR 0 4
70128: PUSH
70129: LD_VAR 0 7
70133: ARRAY
70134: DIFF
70135: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
70136: LD_ADDR_VAR 0 4
70140: PUSH
70141: LD_VAR 0 4
70145: PPUSH
70146: LD_VAR 0 7
70150: PPUSH
70151: CALL_OW 3
70155: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
70156: LD_ADDR_VAR 0 16
70160: PUSH
70161: LD_VAR 0 16
70165: PPUSH
70166: LD_VAR 0 7
70170: PPUSH
70171: CALL_OW 3
70175: ST_TO_ADDR
// continue ;
70176: GO 70016
// end ; if f_repair then
70178: LD_VAR 0 22
70182: IFFALSE 70671
// begin if GetType ( group [ i ] ) = unit_vehicle then
70184: LD_VAR 0 4
70188: PUSH
70189: LD_VAR 0 7
70193: ARRAY
70194: PPUSH
70195: CALL_OW 247
70199: PUSH
70200: LD_INT 2
70202: EQUAL
70203: IFFALSE 70393
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
70205: LD_VAR 0 4
70209: PUSH
70210: LD_VAR 0 7
70214: ARRAY
70215: PPUSH
70216: CALL_OW 256
70220: PUSH
70221: LD_INT 700
70223: LESS
70224: PUSH
70225: LD_VAR 0 4
70229: PUSH
70230: LD_VAR 0 7
70234: ARRAY
70235: PUSH
70236: LD_VAR 0 32
70240: IN
70241: NOT
70242: AND
70243: IFFALSE 70267
// to_repair := to_repair union group [ i ] ;
70245: LD_ADDR_VAR 0 32
70249: PUSH
70250: LD_VAR 0 32
70254: PUSH
70255: LD_VAR 0 4
70259: PUSH
70260: LD_VAR 0 7
70264: ARRAY
70265: UNION
70266: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
70267: LD_VAR 0 4
70271: PUSH
70272: LD_VAR 0 7
70276: ARRAY
70277: PPUSH
70278: CALL_OW 256
70282: PUSH
70283: LD_INT 1000
70285: EQUAL
70286: PUSH
70287: LD_VAR 0 4
70291: PUSH
70292: LD_VAR 0 7
70296: ARRAY
70297: PUSH
70298: LD_VAR 0 32
70302: IN
70303: AND
70304: IFFALSE 70328
// to_repair := to_repair diff group [ i ] ;
70306: LD_ADDR_VAR 0 32
70310: PUSH
70311: LD_VAR 0 32
70315: PUSH
70316: LD_VAR 0 4
70320: PUSH
70321: LD_VAR 0 7
70325: ARRAY
70326: DIFF
70327: ST_TO_ADDR
// if group [ i ] in to_repair then
70328: LD_VAR 0 4
70332: PUSH
70333: LD_VAR 0 7
70337: ARRAY
70338: PUSH
70339: LD_VAR 0 32
70343: IN
70344: IFFALSE 70391
// begin if not IsInArea ( group [ i ] , f_repair ) then
70346: LD_VAR 0 4
70350: PUSH
70351: LD_VAR 0 7
70355: ARRAY
70356: PPUSH
70357: LD_VAR 0 22
70361: PPUSH
70362: CALL_OW 308
70366: NOT
70367: IFFALSE 70389
// ComMoveToArea ( group [ i ] , f_repair ) ;
70369: LD_VAR 0 4
70373: PUSH
70374: LD_VAR 0 7
70378: ARRAY
70379: PPUSH
70380: LD_VAR 0 22
70384: PPUSH
70385: CALL_OW 113
// continue ;
70389: GO 70016
// end ; end else
70391: GO 70671
// if group [ i ] in repairs then
70393: LD_VAR 0 4
70397: PUSH
70398: LD_VAR 0 7
70402: ARRAY
70403: PUSH
70404: LD_VAR 0 33
70408: IN
70409: IFFALSE 70671
// begin if IsInUnit ( group [ i ] ) then
70411: LD_VAR 0 4
70415: PUSH
70416: LD_VAR 0 7
70420: ARRAY
70421: PPUSH
70422: CALL_OW 310
70426: IFFALSE 70494
// begin z := IsInUnit ( group [ i ] ) ;
70428: LD_ADDR_VAR 0 13
70432: PUSH
70433: LD_VAR 0 4
70437: PUSH
70438: LD_VAR 0 7
70442: ARRAY
70443: PPUSH
70444: CALL_OW 310
70448: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
70449: LD_VAR 0 13
70453: PUSH
70454: LD_VAR 0 32
70458: IN
70459: PUSH
70460: LD_VAR 0 13
70464: PPUSH
70465: LD_VAR 0 22
70469: PPUSH
70470: CALL_OW 308
70474: AND
70475: IFFALSE 70492
// ComExitVehicle ( group [ i ] ) ;
70477: LD_VAR 0 4
70481: PUSH
70482: LD_VAR 0 7
70486: ARRAY
70487: PPUSH
70488: CALL_OW 121
// end else
70492: GO 70671
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
70494: LD_ADDR_VAR 0 13
70498: PUSH
70499: LD_VAR 0 4
70503: PPUSH
70504: LD_INT 95
70506: PUSH
70507: LD_VAR 0 22
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 58
70518: PUSH
70519: EMPTY
70520: LIST
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PPUSH
70526: CALL_OW 72
70530: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
70531: LD_VAR 0 4
70535: PUSH
70536: LD_VAR 0 7
70540: ARRAY
70541: PPUSH
70542: CALL_OW 314
70546: NOT
70547: IFFALSE 70669
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
70549: LD_ADDR_VAR 0 10
70553: PUSH
70554: LD_VAR 0 13
70558: PPUSH
70559: LD_VAR 0 4
70563: PUSH
70564: LD_VAR 0 7
70568: ARRAY
70569: PPUSH
70570: CALL_OW 74
70574: ST_TO_ADDR
// if not x then
70575: LD_VAR 0 10
70579: NOT
70580: IFFALSE 70584
// continue ;
70582: GO 70016
// if GetLives ( x ) < 1000 then
70584: LD_VAR 0 10
70588: PPUSH
70589: CALL_OW 256
70593: PUSH
70594: LD_INT 1000
70596: LESS
70597: IFFALSE 70621
// ComRepairVehicle ( group [ i ] , x ) else
70599: LD_VAR 0 4
70603: PUSH
70604: LD_VAR 0 7
70608: ARRAY
70609: PPUSH
70610: LD_VAR 0 10
70614: PPUSH
70615: CALL_OW 129
70619: GO 70669
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
70621: LD_VAR 0 23
70625: PUSH
70626: LD_VAR 0 4
70630: PUSH
70631: LD_VAR 0 7
70635: ARRAY
70636: PPUSH
70637: CALL_OW 256
70641: PUSH
70642: LD_INT 1000
70644: LESS
70645: AND
70646: NOT
70647: IFFALSE 70669
// ComEnterUnit ( group [ i ] , x ) ;
70649: LD_VAR 0 4
70653: PUSH
70654: LD_VAR 0 7
70658: ARRAY
70659: PPUSH
70660: LD_VAR 0 10
70664: PPUSH
70665: CALL_OW 120
// end ; continue ;
70669: GO 70016
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
70671: LD_VAR 0 23
70675: PUSH
70676: LD_VAR 0 4
70680: PUSH
70681: LD_VAR 0 7
70685: ARRAY
70686: PPUSH
70687: CALL_OW 247
70691: PUSH
70692: LD_INT 1
70694: EQUAL
70695: AND
70696: IFFALSE 71174
// begin if group [ i ] in healers then
70698: LD_VAR 0 4
70702: PUSH
70703: LD_VAR 0 7
70707: ARRAY
70708: PUSH
70709: LD_VAR 0 31
70713: IN
70714: IFFALSE 70987
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
70716: LD_VAR 0 4
70720: PUSH
70721: LD_VAR 0 7
70725: ARRAY
70726: PPUSH
70727: LD_VAR 0 23
70731: PPUSH
70732: CALL_OW 308
70736: NOT
70737: PUSH
70738: LD_VAR 0 4
70742: PUSH
70743: LD_VAR 0 7
70747: ARRAY
70748: PPUSH
70749: CALL_OW 314
70753: NOT
70754: AND
70755: IFFALSE 70779
// ComMoveToArea ( group [ i ] , f_heal ) else
70757: LD_VAR 0 4
70761: PUSH
70762: LD_VAR 0 7
70766: ARRAY
70767: PPUSH
70768: LD_VAR 0 23
70772: PPUSH
70773: CALL_OW 113
70777: GO 70985
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
70779: LD_VAR 0 4
70783: PUSH
70784: LD_VAR 0 7
70788: ARRAY
70789: PPUSH
70790: CALL 36421 0 1
70794: PPUSH
70795: CALL_OW 256
70799: PUSH
70800: LD_INT 1000
70802: EQUAL
70803: IFFALSE 70822
// ComStop ( group [ i ] ) else
70805: LD_VAR 0 4
70809: PUSH
70810: LD_VAR 0 7
70814: ARRAY
70815: PPUSH
70816: CALL_OW 141
70820: GO 70985
// if not HasTask ( group [ i ] ) and to_heal then
70822: LD_VAR 0 4
70826: PUSH
70827: LD_VAR 0 7
70831: ARRAY
70832: PPUSH
70833: CALL_OW 314
70837: NOT
70838: PUSH
70839: LD_VAR 0 30
70843: AND
70844: IFFALSE 70985
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
70846: LD_ADDR_VAR 0 13
70850: PUSH
70851: LD_VAR 0 30
70855: PPUSH
70856: LD_INT 3
70858: PUSH
70859: LD_INT 54
70861: PUSH
70862: EMPTY
70863: LIST
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PPUSH
70869: CALL_OW 72
70873: PPUSH
70874: LD_VAR 0 4
70878: PUSH
70879: LD_VAR 0 7
70883: ARRAY
70884: PPUSH
70885: CALL_OW 74
70889: ST_TO_ADDR
// if z then
70890: LD_VAR 0 13
70894: IFFALSE 70985
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
70896: LD_INT 91
70898: PUSH
70899: LD_VAR 0 13
70903: PUSH
70904: LD_INT 10
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 81
70914: PUSH
70915: LD_VAR 0 13
70919: PPUSH
70920: CALL_OW 255
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PPUSH
70933: CALL_OW 69
70937: PUSH
70938: LD_INT 0
70940: EQUAL
70941: IFFALSE 70965
// ComHeal ( group [ i ] , z ) else
70943: LD_VAR 0 4
70947: PUSH
70948: LD_VAR 0 7
70952: ARRAY
70953: PPUSH
70954: LD_VAR 0 13
70958: PPUSH
70959: CALL_OW 128
70963: GO 70985
// ComMoveToArea ( group [ i ] , f_heal ) ;
70965: LD_VAR 0 4
70969: PUSH
70970: LD_VAR 0 7
70974: ARRAY
70975: PPUSH
70976: LD_VAR 0 23
70980: PPUSH
70981: CALL_OW 113
// end ; continue ;
70985: GO 70016
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
70987: LD_VAR 0 4
70991: PUSH
70992: LD_VAR 0 7
70996: ARRAY
70997: PPUSH
70998: CALL_OW 256
71002: PUSH
71003: LD_INT 700
71005: LESS
71006: PUSH
71007: LD_VAR 0 4
71011: PUSH
71012: LD_VAR 0 7
71016: ARRAY
71017: PUSH
71018: LD_VAR 0 30
71022: IN
71023: NOT
71024: AND
71025: IFFALSE 71049
// to_heal := to_heal union group [ i ] ;
71027: LD_ADDR_VAR 0 30
71031: PUSH
71032: LD_VAR 0 30
71036: PUSH
71037: LD_VAR 0 4
71041: PUSH
71042: LD_VAR 0 7
71046: ARRAY
71047: UNION
71048: ST_TO_ADDR
// if group [ i ] in to_heal then
71049: LD_VAR 0 4
71053: PUSH
71054: LD_VAR 0 7
71058: ARRAY
71059: PUSH
71060: LD_VAR 0 30
71064: IN
71065: IFFALSE 71174
// begin if GetLives ( group [ i ] ) = 1000 then
71067: LD_VAR 0 4
71071: PUSH
71072: LD_VAR 0 7
71076: ARRAY
71077: PPUSH
71078: CALL_OW 256
71082: PUSH
71083: LD_INT 1000
71085: EQUAL
71086: IFFALSE 71112
// to_heal := to_heal diff group [ i ] else
71088: LD_ADDR_VAR 0 30
71092: PUSH
71093: LD_VAR 0 30
71097: PUSH
71098: LD_VAR 0 4
71102: PUSH
71103: LD_VAR 0 7
71107: ARRAY
71108: DIFF
71109: ST_TO_ADDR
71110: GO 71174
// begin if not IsInArea ( group [ i ] , to_heal ) then
71112: LD_VAR 0 4
71116: PUSH
71117: LD_VAR 0 7
71121: ARRAY
71122: PPUSH
71123: LD_VAR 0 30
71127: PPUSH
71128: CALL_OW 308
71132: NOT
71133: IFFALSE 71157
// ComMoveToArea ( group [ i ] , f_heal ) else
71135: LD_VAR 0 4
71139: PUSH
71140: LD_VAR 0 7
71144: ARRAY
71145: PPUSH
71146: LD_VAR 0 23
71150: PPUSH
71151: CALL_OW 113
71155: GO 71172
// ComHold ( group [ i ] ) ;
71157: LD_VAR 0 4
71161: PUSH
71162: LD_VAR 0 7
71166: ARRAY
71167: PPUSH
71168: CALL_OW 140
// continue ;
71172: GO 70016
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
71174: LD_VAR 0 4
71178: PUSH
71179: LD_VAR 0 7
71183: ARRAY
71184: PPUSH
71185: LD_INT 10
71187: PPUSH
71188: CALL 34841 0 2
71192: NOT
71193: PUSH
71194: LD_VAR 0 16
71198: PUSH
71199: LD_VAR 0 7
71203: ARRAY
71204: PUSH
71205: EMPTY
71206: EQUAL
71207: NOT
71208: AND
71209: IFFALSE 71475
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
71211: LD_VAR 0 4
71215: PUSH
71216: LD_VAR 0 7
71220: ARRAY
71221: PPUSH
71222: CALL_OW 262
71226: PUSH
71227: LD_INT 1
71229: PUSH
71230: LD_INT 2
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: IN
71237: IFFALSE 71278
// if GetFuel ( group [ i ] ) < 10 then
71239: LD_VAR 0 4
71243: PUSH
71244: LD_VAR 0 7
71248: ARRAY
71249: PPUSH
71250: CALL_OW 261
71254: PUSH
71255: LD_INT 10
71257: LESS
71258: IFFALSE 71278
// SetFuel ( group [ i ] , 12 ) ;
71260: LD_VAR 0 4
71264: PUSH
71265: LD_VAR 0 7
71269: ARRAY
71270: PPUSH
71271: LD_INT 12
71273: PPUSH
71274: CALL_OW 240
// if units_path [ i ] then
71278: LD_VAR 0 16
71282: PUSH
71283: LD_VAR 0 7
71287: ARRAY
71288: IFFALSE 71473
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
71290: LD_VAR 0 4
71294: PUSH
71295: LD_VAR 0 7
71299: ARRAY
71300: PPUSH
71301: LD_VAR 0 16
71305: PUSH
71306: LD_VAR 0 7
71310: ARRAY
71311: PUSH
71312: LD_INT 1
71314: ARRAY
71315: PUSH
71316: LD_INT 1
71318: ARRAY
71319: PPUSH
71320: LD_VAR 0 16
71324: PUSH
71325: LD_VAR 0 7
71329: ARRAY
71330: PUSH
71331: LD_INT 1
71333: ARRAY
71334: PUSH
71335: LD_INT 2
71337: ARRAY
71338: PPUSH
71339: CALL_OW 297
71343: PUSH
71344: LD_INT 6
71346: GREATER
71347: IFFALSE 71422
// begin if not HasTask ( group [ i ] ) then
71349: LD_VAR 0 4
71353: PUSH
71354: LD_VAR 0 7
71358: ARRAY
71359: PPUSH
71360: CALL_OW 314
71364: NOT
71365: IFFALSE 71420
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
71367: LD_VAR 0 4
71371: PUSH
71372: LD_VAR 0 7
71376: ARRAY
71377: PPUSH
71378: LD_VAR 0 16
71382: PUSH
71383: LD_VAR 0 7
71387: ARRAY
71388: PUSH
71389: LD_INT 1
71391: ARRAY
71392: PUSH
71393: LD_INT 1
71395: ARRAY
71396: PPUSH
71397: LD_VAR 0 16
71401: PUSH
71402: LD_VAR 0 7
71406: ARRAY
71407: PUSH
71408: LD_INT 1
71410: ARRAY
71411: PUSH
71412: LD_INT 2
71414: ARRAY
71415: PPUSH
71416: CALL_OW 114
// end else
71420: GO 71473
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
71422: LD_ADDR_VAR 0 15
71426: PUSH
71427: LD_VAR 0 16
71431: PUSH
71432: LD_VAR 0 7
71436: ARRAY
71437: PPUSH
71438: LD_INT 1
71440: PPUSH
71441: CALL_OW 3
71445: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
71446: LD_ADDR_VAR 0 16
71450: PUSH
71451: LD_VAR 0 16
71455: PPUSH
71456: LD_VAR 0 7
71460: PPUSH
71461: LD_VAR 0 15
71465: PPUSH
71466: CALL_OW 1
71470: ST_TO_ADDR
// continue ;
71471: GO 70016
// end ; end ; end else
71473: GO 74137
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
71475: LD_ADDR_VAR 0 14
71479: PUSH
71480: LD_INT 81
71482: PUSH
71483: LD_VAR 0 4
71487: PUSH
71488: LD_VAR 0 7
71492: ARRAY
71493: PPUSH
71494: CALL_OW 255
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PPUSH
71503: CALL_OW 69
71507: ST_TO_ADDR
// if not tmp then
71508: LD_VAR 0 14
71512: NOT
71513: IFFALSE 71517
// continue ;
71515: GO 70016
// if f_ignore_area then
71517: LD_VAR 0 17
71521: IFFALSE 71609
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
71523: LD_ADDR_VAR 0 15
71527: PUSH
71528: LD_VAR 0 14
71532: PPUSH
71533: LD_INT 3
71535: PUSH
71536: LD_INT 92
71538: PUSH
71539: LD_VAR 0 17
71543: PUSH
71544: LD_INT 1
71546: ARRAY
71547: PUSH
71548: LD_VAR 0 17
71552: PUSH
71553: LD_INT 2
71555: ARRAY
71556: PUSH
71557: LD_VAR 0 17
71561: PUSH
71562: LD_INT 3
71564: ARRAY
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PPUSH
71576: CALL_OW 72
71580: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
71581: LD_VAR 0 14
71585: PUSH
71586: LD_VAR 0 15
71590: DIFF
71591: IFFALSE 71609
// tmp := tmp diff tmp2 ;
71593: LD_ADDR_VAR 0 14
71597: PUSH
71598: LD_VAR 0 14
71602: PUSH
71603: LD_VAR 0 15
71607: DIFF
71608: ST_TO_ADDR
// end ; if not f_murder then
71609: LD_VAR 0 20
71613: NOT
71614: IFFALSE 71672
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
71616: LD_ADDR_VAR 0 15
71620: PUSH
71621: LD_VAR 0 14
71625: PPUSH
71626: LD_INT 3
71628: PUSH
71629: LD_INT 50
71631: PUSH
71632: EMPTY
71633: LIST
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PPUSH
71639: CALL_OW 72
71643: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
71644: LD_VAR 0 14
71648: PUSH
71649: LD_VAR 0 15
71653: DIFF
71654: IFFALSE 71672
// tmp := tmp diff tmp2 ;
71656: LD_ADDR_VAR 0 14
71660: PUSH
71661: LD_VAR 0 14
71665: PUSH
71666: LD_VAR 0 15
71670: DIFF
71671: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
71672: LD_ADDR_VAR 0 14
71676: PUSH
71677: LD_VAR 0 4
71681: PUSH
71682: LD_VAR 0 7
71686: ARRAY
71687: PPUSH
71688: LD_VAR 0 14
71692: PPUSH
71693: LD_INT 1
71695: PPUSH
71696: LD_INT 1
71698: PPUSH
71699: CALL 8484 0 4
71703: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
71704: LD_VAR 0 4
71708: PUSH
71709: LD_VAR 0 7
71713: ARRAY
71714: PPUSH
71715: CALL_OW 257
71719: PUSH
71720: LD_INT 1
71722: EQUAL
71723: IFFALSE 72171
// begin if WantPlant ( group [ i ] ) then
71725: LD_VAR 0 4
71729: PUSH
71730: LD_VAR 0 7
71734: ARRAY
71735: PPUSH
71736: CALL 7985 0 1
71740: IFFALSE 71744
// continue ;
71742: GO 70016
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
71744: LD_VAR 0 18
71748: PUSH
71749: LD_VAR 0 4
71753: PUSH
71754: LD_VAR 0 7
71758: ARRAY
71759: PPUSH
71760: CALL_OW 310
71764: NOT
71765: AND
71766: PUSH
71767: LD_VAR 0 14
71771: PUSH
71772: LD_INT 1
71774: ARRAY
71775: PUSH
71776: LD_VAR 0 14
71780: PPUSH
71781: LD_INT 21
71783: PUSH
71784: LD_INT 2
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 58
71793: PUSH
71794: EMPTY
71795: LIST
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PPUSH
71801: CALL_OW 72
71805: IN
71806: AND
71807: IFFALSE 71843
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
71809: LD_VAR 0 4
71813: PUSH
71814: LD_VAR 0 7
71818: ARRAY
71819: PPUSH
71820: LD_VAR 0 14
71824: PUSH
71825: LD_INT 1
71827: ARRAY
71828: PPUSH
71829: CALL_OW 120
// attacking := true ;
71833: LD_ADDR_VAR 0 29
71837: PUSH
71838: LD_INT 1
71840: ST_TO_ADDR
// continue ;
71841: GO 70016
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
71843: LD_VAR 0 26
71847: PUSH
71848: LD_VAR 0 4
71852: PUSH
71853: LD_VAR 0 7
71857: ARRAY
71858: PPUSH
71859: CALL_OW 257
71863: PUSH
71864: LD_INT 1
71866: EQUAL
71867: AND
71868: PUSH
71869: LD_VAR 0 4
71873: PUSH
71874: LD_VAR 0 7
71878: ARRAY
71879: PPUSH
71880: CALL_OW 256
71884: PUSH
71885: LD_INT 800
71887: LESS
71888: AND
71889: PUSH
71890: LD_VAR 0 4
71894: PUSH
71895: LD_VAR 0 7
71899: ARRAY
71900: PPUSH
71901: CALL_OW 318
71905: NOT
71906: AND
71907: IFFALSE 71924
// ComCrawl ( group [ i ] ) ;
71909: LD_VAR 0 4
71913: PUSH
71914: LD_VAR 0 7
71918: ARRAY
71919: PPUSH
71920: CALL_OW 137
// if f_mines then
71924: LD_VAR 0 21
71928: IFFALSE 72171
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
71930: LD_VAR 0 14
71934: PUSH
71935: LD_INT 1
71937: ARRAY
71938: PPUSH
71939: CALL_OW 247
71943: PUSH
71944: LD_INT 3
71946: EQUAL
71947: PUSH
71948: LD_VAR 0 14
71952: PUSH
71953: LD_INT 1
71955: ARRAY
71956: PUSH
71957: LD_VAR 0 27
71961: IN
71962: NOT
71963: AND
71964: IFFALSE 72171
// begin x := GetX ( tmp [ 1 ] ) ;
71966: LD_ADDR_VAR 0 10
71970: PUSH
71971: LD_VAR 0 14
71975: PUSH
71976: LD_INT 1
71978: ARRAY
71979: PPUSH
71980: CALL_OW 250
71984: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
71985: LD_ADDR_VAR 0 11
71989: PUSH
71990: LD_VAR 0 14
71994: PUSH
71995: LD_INT 1
71997: ARRAY
71998: PPUSH
71999: CALL_OW 251
72003: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
72004: LD_ADDR_VAR 0 12
72008: PUSH
72009: LD_VAR 0 4
72013: PUSH
72014: LD_VAR 0 7
72018: ARRAY
72019: PPUSH
72020: CALL 34926 0 1
72024: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
72025: LD_VAR 0 4
72029: PUSH
72030: LD_VAR 0 7
72034: ARRAY
72035: PPUSH
72036: LD_VAR 0 10
72040: PPUSH
72041: LD_VAR 0 11
72045: PPUSH
72046: LD_VAR 0 14
72050: PUSH
72051: LD_INT 1
72053: ARRAY
72054: PPUSH
72055: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
72059: LD_VAR 0 4
72063: PUSH
72064: LD_VAR 0 7
72068: ARRAY
72069: PPUSH
72070: LD_VAR 0 10
72074: PPUSH
72075: LD_VAR 0 12
72079: PPUSH
72080: LD_INT 7
72082: PPUSH
72083: CALL_OW 272
72087: PPUSH
72088: LD_VAR 0 11
72092: PPUSH
72093: LD_VAR 0 12
72097: PPUSH
72098: LD_INT 7
72100: PPUSH
72101: CALL_OW 273
72105: PPUSH
72106: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
72110: LD_VAR 0 4
72114: PUSH
72115: LD_VAR 0 7
72119: ARRAY
72120: PPUSH
72121: LD_INT 71
72123: PPUSH
72124: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
72128: LD_ADDR_VAR 0 27
72132: PUSH
72133: LD_VAR 0 27
72137: PPUSH
72138: LD_VAR 0 27
72142: PUSH
72143: LD_INT 1
72145: PLUS
72146: PPUSH
72147: LD_VAR 0 14
72151: PUSH
72152: LD_INT 1
72154: ARRAY
72155: PPUSH
72156: CALL_OW 1
72160: ST_TO_ADDR
// attacking := true ;
72161: LD_ADDR_VAR 0 29
72165: PUSH
72166: LD_INT 1
72168: ST_TO_ADDR
// continue ;
72169: GO 70016
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
72171: LD_VAR 0 4
72175: PUSH
72176: LD_VAR 0 7
72180: ARRAY
72181: PPUSH
72182: CALL_OW 257
72186: PUSH
72187: LD_INT 17
72189: EQUAL
72190: PUSH
72191: LD_VAR 0 4
72195: PUSH
72196: LD_VAR 0 7
72200: ARRAY
72201: PPUSH
72202: CALL_OW 110
72206: PUSH
72207: LD_INT 71
72209: EQUAL
72210: NOT
72211: AND
72212: IFFALSE 72358
// begin attacking := false ;
72214: LD_ADDR_VAR 0 29
72218: PUSH
72219: LD_INT 0
72221: ST_TO_ADDR
// k := 5 ;
72222: LD_ADDR_VAR 0 9
72226: PUSH
72227: LD_INT 5
72229: ST_TO_ADDR
// if tmp < k then
72230: LD_VAR 0 14
72234: PUSH
72235: LD_VAR 0 9
72239: LESS
72240: IFFALSE 72252
// k := tmp ;
72242: LD_ADDR_VAR 0 9
72246: PUSH
72247: LD_VAR 0 14
72251: ST_TO_ADDR
// for j = 1 to k do
72252: LD_ADDR_VAR 0 8
72256: PUSH
72257: DOUBLE
72258: LD_INT 1
72260: DEC
72261: ST_TO_ADDR
72262: LD_VAR 0 9
72266: PUSH
72267: FOR_TO
72268: IFFALSE 72356
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
72270: LD_VAR 0 14
72274: PUSH
72275: LD_VAR 0 8
72279: ARRAY
72280: PUSH
72281: LD_VAR 0 14
72285: PPUSH
72286: LD_INT 58
72288: PUSH
72289: EMPTY
72290: LIST
72291: PPUSH
72292: CALL_OW 72
72296: IN
72297: NOT
72298: IFFALSE 72354
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
72300: LD_VAR 0 4
72304: PUSH
72305: LD_VAR 0 7
72309: ARRAY
72310: PPUSH
72311: LD_VAR 0 14
72315: PUSH
72316: LD_VAR 0 8
72320: ARRAY
72321: PPUSH
72322: CALL_OW 115
// attacking := true ;
72326: LD_ADDR_VAR 0 29
72330: PUSH
72331: LD_INT 1
72333: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
72334: LD_VAR 0 4
72338: PUSH
72339: LD_VAR 0 7
72343: ARRAY
72344: PPUSH
72345: LD_INT 71
72347: PPUSH
72348: CALL_OW 109
// continue ;
72352: GO 72267
// end ; end ;
72354: GO 72267
72356: POP
72357: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
72358: LD_VAR 0 4
72362: PUSH
72363: LD_VAR 0 7
72367: ARRAY
72368: PPUSH
72369: CALL_OW 257
72373: PUSH
72374: LD_INT 8
72376: EQUAL
72377: PUSH
72378: LD_VAR 0 4
72382: PUSH
72383: LD_VAR 0 7
72387: ARRAY
72388: PPUSH
72389: CALL_OW 264
72393: PUSH
72394: LD_INT 28
72396: PUSH
72397: LD_INT 45
72399: PUSH
72400: LD_INT 7
72402: PUSH
72403: LD_INT 47
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: IN
72412: OR
72413: IFFALSE 72669
// begin attacking := false ;
72415: LD_ADDR_VAR 0 29
72419: PUSH
72420: LD_INT 0
72422: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
72423: LD_VAR 0 14
72427: PUSH
72428: LD_INT 1
72430: ARRAY
72431: PPUSH
72432: CALL_OW 266
72436: PUSH
72437: LD_INT 32
72439: PUSH
72440: LD_INT 31
72442: PUSH
72443: LD_INT 33
72445: PUSH
72446: LD_INT 4
72448: PUSH
72449: LD_INT 5
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: IN
72459: IFFALSE 72645
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
72461: LD_ADDR_VAR 0 9
72465: PUSH
72466: LD_VAR 0 14
72470: PUSH
72471: LD_INT 1
72473: ARRAY
72474: PPUSH
72475: CALL_OW 266
72479: PPUSH
72480: LD_VAR 0 14
72484: PUSH
72485: LD_INT 1
72487: ARRAY
72488: PPUSH
72489: CALL_OW 250
72493: PPUSH
72494: LD_VAR 0 14
72498: PUSH
72499: LD_INT 1
72501: ARRAY
72502: PPUSH
72503: CALL_OW 251
72507: PPUSH
72508: LD_VAR 0 14
72512: PUSH
72513: LD_INT 1
72515: ARRAY
72516: PPUSH
72517: CALL_OW 254
72521: PPUSH
72522: LD_VAR 0 14
72526: PUSH
72527: LD_INT 1
72529: ARRAY
72530: PPUSH
72531: CALL_OW 248
72535: PPUSH
72536: LD_INT 0
72538: PPUSH
72539: CALL 16296 0 6
72543: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
72544: LD_ADDR_VAR 0 8
72548: PUSH
72549: LD_VAR 0 4
72553: PUSH
72554: LD_VAR 0 7
72558: ARRAY
72559: PPUSH
72560: LD_VAR 0 9
72564: PPUSH
72565: CALL 34966 0 2
72569: ST_TO_ADDR
// if j then
72570: LD_VAR 0 8
72574: IFFALSE 72643
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
72576: LD_VAR 0 8
72580: PUSH
72581: LD_INT 1
72583: ARRAY
72584: PPUSH
72585: LD_VAR 0 8
72589: PUSH
72590: LD_INT 2
72592: ARRAY
72593: PPUSH
72594: CALL_OW 488
72598: IFFALSE 72643
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
72600: LD_VAR 0 4
72604: PUSH
72605: LD_VAR 0 7
72609: ARRAY
72610: PPUSH
72611: LD_VAR 0 8
72615: PUSH
72616: LD_INT 1
72618: ARRAY
72619: PPUSH
72620: LD_VAR 0 8
72624: PUSH
72625: LD_INT 2
72627: ARRAY
72628: PPUSH
72629: CALL_OW 116
// attacking := true ;
72633: LD_ADDR_VAR 0 29
72637: PUSH
72638: LD_INT 1
72640: ST_TO_ADDR
// continue ;
72641: GO 70016
// end ; end else
72643: GO 72669
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
72645: LD_VAR 0 4
72649: PUSH
72650: LD_VAR 0 7
72654: ARRAY
72655: PPUSH
72656: LD_VAR 0 14
72660: PUSH
72661: LD_INT 1
72663: ARRAY
72664: PPUSH
72665: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
72669: LD_VAR 0 4
72673: PUSH
72674: LD_VAR 0 7
72678: ARRAY
72679: PPUSH
72680: CALL_OW 265
72684: PUSH
72685: LD_INT 11
72687: EQUAL
72688: IFFALSE 72966
// begin k := 10 ;
72690: LD_ADDR_VAR 0 9
72694: PUSH
72695: LD_INT 10
72697: ST_TO_ADDR
// x := 0 ;
72698: LD_ADDR_VAR 0 10
72702: PUSH
72703: LD_INT 0
72705: ST_TO_ADDR
// if tmp < k then
72706: LD_VAR 0 14
72710: PUSH
72711: LD_VAR 0 9
72715: LESS
72716: IFFALSE 72728
// k := tmp ;
72718: LD_ADDR_VAR 0 9
72722: PUSH
72723: LD_VAR 0 14
72727: ST_TO_ADDR
// for j = k downto 1 do
72728: LD_ADDR_VAR 0 8
72732: PUSH
72733: DOUBLE
72734: LD_VAR 0 9
72738: INC
72739: ST_TO_ADDR
72740: LD_INT 1
72742: PUSH
72743: FOR_DOWNTO
72744: IFFALSE 72819
// begin if GetType ( tmp [ j ] ) = unit_human then
72746: LD_VAR 0 14
72750: PUSH
72751: LD_VAR 0 8
72755: ARRAY
72756: PPUSH
72757: CALL_OW 247
72761: PUSH
72762: LD_INT 1
72764: EQUAL
72765: IFFALSE 72817
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
72767: LD_VAR 0 4
72771: PUSH
72772: LD_VAR 0 7
72776: ARRAY
72777: PPUSH
72778: LD_VAR 0 14
72782: PUSH
72783: LD_VAR 0 8
72787: ARRAY
72788: PPUSH
72789: CALL 35237 0 2
// x := tmp [ j ] ;
72793: LD_ADDR_VAR 0 10
72797: PUSH
72798: LD_VAR 0 14
72802: PUSH
72803: LD_VAR 0 8
72807: ARRAY
72808: ST_TO_ADDR
// attacking := true ;
72809: LD_ADDR_VAR 0 29
72813: PUSH
72814: LD_INT 1
72816: ST_TO_ADDR
// end ; end ;
72817: GO 72743
72819: POP
72820: POP
// if not x then
72821: LD_VAR 0 10
72825: NOT
72826: IFFALSE 72966
// begin attacking := true ;
72828: LD_ADDR_VAR 0 29
72832: PUSH
72833: LD_INT 1
72835: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
72836: LD_VAR 0 4
72840: PUSH
72841: LD_VAR 0 7
72845: ARRAY
72846: PPUSH
72847: CALL_OW 250
72851: PPUSH
72852: LD_VAR 0 4
72856: PUSH
72857: LD_VAR 0 7
72861: ARRAY
72862: PPUSH
72863: CALL_OW 251
72867: PPUSH
72868: CALL_OW 546
72872: PUSH
72873: LD_INT 2
72875: ARRAY
72876: PUSH
72877: LD_VAR 0 14
72881: PUSH
72882: LD_INT 1
72884: ARRAY
72885: PPUSH
72886: CALL_OW 250
72890: PPUSH
72891: LD_VAR 0 14
72895: PUSH
72896: LD_INT 1
72898: ARRAY
72899: PPUSH
72900: CALL_OW 251
72904: PPUSH
72905: CALL_OW 546
72909: PUSH
72910: LD_INT 2
72912: ARRAY
72913: EQUAL
72914: IFFALSE 72942
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
72916: LD_VAR 0 4
72920: PUSH
72921: LD_VAR 0 7
72925: ARRAY
72926: PPUSH
72927: LD_VAR 0 14
72931: PUSH
72932: LD_INT 1
72934: ARRAY
72935: PPUSH
72936: CALL 35237 0 2
72940: GO 72966
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
72942: LD_VAR 0 4
72946: PUSH
72947: LD_VAR 0 7
72951: ARRAY
72952: PPUSH
72953: LD_VAR 0 14
72957: PUSH
72958: LD_INT 1
72960: ARRAY
72961: PPUSH
72962: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
72966: LD_VAR 0 4
72970: PUSH
72971: LD_VAR 0 7
72975: ARRAY
72976: PPUSH
72977: CALL_OW 264
72981: PUSH
72982: LD_INT 29
72984: EQUAL
72985: IFFALSE 73351
// begin if WantsToAttack ( group [ i ] ) in bombed then
72987: LD_VAR 0 4
72991: PUSH
72992: LD_VAR 0 7
72996: ARRAY
72997: PPUSH
72998: CALL_OW 319
73002: PUSH
73003: LD_VAR 0 28
73007: IN
73008: IFFALSE 73012
// continue ;
73010: GO 70016
// k := 8 ;
73012: LD_ADDR_VAR 0 9
73016: PUSH
73017: LD_INT 8
73019: ST_TO_ADDR
// x := 0 ;
73020: LD_ADDR_VAR 0 10
73024: PUSH
73025: LD_INT 0
73027: ST_TO_ADDR
// if tmp < k then
73028: LD_VAR 0 14
73032: PUSH
73033: LD_VAR 0 9
73037: LESS
73038: IFFALSE 73050
// k := tmp ;
73040: LD_ADDR_VAR 0 9
73044: PUSH
73045: LD_VAR 0 14
73049: ST_TO_ADDR
// for j = 1 to k do
73050: LD_ADDR_VAR 0 8
73054: PUSH
73055: DOUBLE
73056: LD_INT 1
73058: DEC
73059: ST_TO_ADDR
73060: LD_VAR 0 9
73064: PUSH
73065: FOR_TO
73066: IFFALSE 73198
// begin if GetType ( tmp [ j ] ) = unit_building then
73068: LD_VAR 0 14
73072: PUSH
73073: LD_VAR 0 8
73077: ARRAY
73078: PPUSH
73079: CALL_OW 247
73083: PUSH
73084: LD_INT 3
73086: EQUAL
73087: IFFALSE 73196
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
73089: LD_VAR 0 14
73093: PUSH
73094: LD_VAR 0 8
73098: ARRAY
73099: PUSH
73100: LD_VAR 0 28
73104: IN
73105: NOT
73106: PUSH
73107: LD_VAR 0 14
73111: PUSH
73112: LD_VAR 0 8
73116: ARRAY
73117: PPUSH
73118: CALL_OW 313
73122: AND
73123: IFFALSE 73196
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
73125: LD_VAR 0 4
73129: PUSH
73130: LD_VAR 0 7
73134: ARRAY
73135: PPUSH
73136: LD_VAR 0 14
73140: PUSH
73141: LD_VAR 0 8
73145: ARRAY
73146: PPUSH
73147: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
73151: LD_ADDR_VAR 0 28
73155: PUSH
73156: LD_VAR 0 28
73160: PPUSH
73161: LD_VAR 0 28
73165: PUSH
73166: LD_INT 1
73168: PLUS
73169: PPUSH
73170: LD_VAR 0 14
73174: PUSH
73175: LD_VAR 0 8
73179: ARRAY
73180: PPUSH
73181: CALL_OW 1
73185: ST_TO_ADDR
// attacking := true ;
73186: LD_ADDR_VAR 0 29
73190: PUSH
73191: LD_INT 1
73193: ST_TO_ADDR
// break ;
73194: GO 73198
// end ; end ;
73196: GO 73065
73198: POP
73199: POP
// if not attacking and f_attack_depot then
73200: LD_VAR 0 29
73204: NOT
73205: PUSH
73206: LD_VAR 0 25
73210: AND
73211: IFFALSE 73306
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73213: LD_ADDR_VAR 0 13
73217: PUSH
73218: LD_VAR 0 14
73222: PPUSH
73223: LD_INT 2
73225: PUSH
73226: LD_INT 30
73228: PUSH
73229: LD_INT 0
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 30
73238: PUSH
73239: LD_INT 1
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: LIST
73250: PPUSH
73251: CALL_OW 72
73255: ST_TO_ADDR
// if z then
73256: LD_VAR 0 13
73260: IFFALSE 73306
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
73262: LD_VAR 0 4
73266: PUSH
73267: LD_VAR 0 7
73271: ARRAY
73272: PPUSH
73273: LD_VAR 0 13
73277: PPUSH
73278: LD_VAR 0 4
73282: PUSH
73283: LD_VAR 0 7
73287: ARRAY
73288: PPUSH
73289: CALL_OW 74
73293: PPUSH
73294: CALL_OW 115
// attacking := true ;
73298: LD_ADDR_VAR 0 29
73302: PUSH
73303: LD_INT 1
73305: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
73306: LD_VAR 0 4
73310: PUSH
73311: LD_VAR 0 7
73315: ARRAY
73316: PPUSH
73317: CALL_OW 256
73321: PUSH
73322: LD_INT 500
73324: LESS
73325: IFFALSE 73351
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
73327: LD_VAR 0 4
73331: PUSH
73332: LD_VAR 0 7
73336: ARRAY
73337: PPUSH
73338: LD_VAR 0 14
73342: PUSH
73343: LD_INT 1
73345: ARRAY
73346: PPUSH
73347: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
73351: LD_VAR 0 4
73355: PUSH
73356: LD_VAR 0 7
73360: ARRAY
73361: PPUSH
73362: CALL_OW 264
73366: PUSH
73367: LD_INT 49
73369: EQUAL
73370: IFFALSE 73491
// begin if not HasTask ( group [ i ] ) then
73372: LD_VAR 0 4
73376: PUSH
73377: LD_VAR 0 7
73381: ARRAY
73382: PPUSH
73383: CALL_OW 314
73387: NOT
73388: IFFALSE 73491
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
73390: LD_ADDR_VAR 0 9
73394: PUSH
73395: LD_INT 81
73397: PUSH
73398: LD_VAR 0 4
73402: PUSH
73403: LD_VAR 0 7
73407: ARRAY
73408: PPUSH
73409: CALL_OW 255
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PPUSH
73418: CALL_OW 69
73422: PPUSH
73423: LD_VAR 0 4
73427: PUSH
73428: LD_VAR 0 7
73432: ARRAY
73433: PPUSH
73434: CALL_OW 74
73438: ST_TO_ADDR
// if k then
73439: LD_VAR 0 9
73443: IFFALSE 73491
// if GetDistUnits ( group [ i ] , k ) > 10 then
73445: LD_VAR 0 4
73449: PUSH
73450: LD_VAR 0 7
73454: ARRAY
73455: PPUSH
73456: LD_VAR 0 9
73460: PPUSH
73461: CALL_OW 296
73465: PUSH
73466: LD_INT 10
73468: GREATER
73469: IFFALSE 73491
// ComMoveUnit ( group [ i ] , k ) ;
73471: LD_VAR 0 4
73475: PUSH
73476: LD_VAR 0 7
73480: ARRAY
73481: PPUSH
73482: LD_VAR 0 9
73486: PPUSH
73487: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73491: LD_VAR 0 4
73495: PUSH
73496: LD_VAR 0 7
73500: ARRAY
73501: PPUSH
73502: CALL_OW 256
73506: PUSH
73507: LD_INT 250
73509: LESS
73510: PUSH
73511: LD_VAR 0 4
73515: PUSH
73516: LD_VAR 0 7
73520: ARRAY
73521: PUSH
73522: LD_INT 21
73524: PUSH
73525: LD_INT 2
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 23
73534: PUSH
73535: LD_INT 2
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PPUSH
73546: CALL_OW 69
73550: IN
73551: AND
73552: IFFALSE 73677
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
73554: LD_ADDR_VAR 0 9
73558: PUSH
73559: LD_OWVAR 3
73563: PUSH
73564: LD_VAR 0 4
73568: PUSH
73569: LD_VAR 0 7
73573: ARRAY
73574: DIFF
73575: PPUSH
73576: LD_VAR 0 4
73580: PUSH
73581: LD_VAR 0 7
73585: ARRAY
73586: PPUSH
73587: CALL_OW 74
73591: ST_TO_ADDR
// if not k then
73592: LD_VAR 0 9
73596: NOT
73597: IFFALSE 73601
// continue ;
73599: GO 70016
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
73601: LD_VAR 0 9
73605: PUSH
73606: LD_INT 81
73608: PUSH
73609: LD_VAR 0 4
73613: PUSH
73614: LD_VAR 0 7
73618: ARRAY
73619: PPUSH
73620: CALL_OW 255
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PPUSH
73629: CALL_OW 69
73633: IN
73634: PUSH
73635: LD_VAR 0 9
73639: PPUSH
73640: LD_VAR 0 4
73644: PUSH
73645: LD_VAR 0 7
73649: ARRAY
73650: PPUSH
73651: CALL_OW 296
73655: PUSH
73656: LD_INT 5
73658: LESS
73659: AND
73660: IFFALSE 73677
// ComAutodestruct ( group [ i ] ) ;
73662: LD_VAR 0 4
73666: PUSH
73667: LD_VAR 0 7
73671: ARRAY
73672: PPUSH
73673: CALL 35135 0 1
// end ; if f_attack_depot then
73677: LD_VAR 0 25
73681: IFFALSE 73793
// begin k := 6 ;
73683: LD_ADDR_VAR 0 9
73687: PUSH
73688: LD_INT 6
73690: ST_TO_ADDR
// if tmp < k then
73691: LD_VAR 0 14
73695: PUSH
73696: LD_VAR 0 9
73700: LESS
73701: IFFALSE 73713
// k := tmp ;
73703: LD_ADDR_VAR 0 9
73707: PUSH
73708: LD_VAR 0 14
73712: ST_TO_ADDR
// for j = 1 to k do
73713: LD_ADDR_VAR 0 8
73717: PUSH
73718: DOUBLE
73719: LD_INT 1
73721: DEC
73722: ST_TO_ADDR
73723: LD_VAR 0 9
73727: PUSH
73728: FOR_TO
73729: IFFALSE 73791
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
73731: LD_VAR 0 8
73735: PPUSH
73736: CALL_OW 266
73740: PUSH
73741: LD_INT 0
73743: PUSH
73744: LD_INT 1
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: IN
73751: IFFALSE 73789
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
73753: LD_VAR 0 4
73757: PUSH
73758: LD_VAR 0 7
73762: ARRAY
73763: PPUSH
73764: LD_VAR 0 14
73768: PUSH
73769: LD_VAR 0 8
73773: ARRAY
73774: PPUSH
73775: CALL_OW 115
// attacking := true ;
73779: LD_ADDR_VAR 0 29
73783: PUSH
73784: LD_INT 1
73786: ST_TO_ADDR
// break ;
73787: GO 73791
// end ;
73789: GO 73728
73791: POP
73792: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
73793: LD_VAR 0 4
73797: PUSH
73798: LD_VAR 0 7
73802: ARRAY
73803: PPUSH
73804: CALL_OW 302
73808: PUSH
73809: LD_VAR 0 29
73813: NOT
73814: AND
73815: IFFALSE 74137
// begin if GetTag ( group [ i ] ) = 71 then
73817: LD_VAR 0 4
73821: PUSH
73822: LD_VAR 0 7
73826: ARRAY
73827: PPUSH
73828: CALL_OW 110
73832: PUSH
73833: LD_INT 71
73835: EQUAL
73836: IFFALSE 73877
// begin if HasTask ( group [ i ] ) then
73838: LD_VAR 0 4
73842: PUSH
73843: LD_VAR 0 7
73847: ARRAY
73848: PPUSH
73849: CALL_OW 314
73853: IFFALSE 73859
// continue else
73855: GO 70016
73857: GO 73877
// SetTag ( group [ i ] , 0 ) ;
73859: LD_VAR 0 4
73863: PUSH
73864: LD_VAR 0 7
73868: ARRAY
73869: PPUSH
73870: LD_INT 0
73872: PPUSH
73873: CALL_OW 109
// end ; k := 8 ;
73877: LD_ADDR_VAR 0 9
73881: PUSH
73882: LD_INT 8
73884: ST_TO_ADDR
// x := 0 ;
73885: LD_ADDR_VAR 0 10
73889: PUSH
73890: LD_INT 0
73892: ST_TO_ADDR
// if tmp < k then
73893: LD_VAR 0 14
73897: PUSH
73898: LD_VAR 0 9
73902: LESS
73903: IFFALSE 73915
// k := tmp ;
73905: LD_ADDR_VAR 0 9
73909: PUSH
73910: LD_VAR 0 14
73914: ST_TO_ADDR
// for j = 1 to k do
73915: LD_ADDR_VAR 0 8
73919: PUSH
73920: DOUBLE
73921: LD_INT 1
73923: DEC
73924: ST_TO_ADDR
73925: LD_VAR 0 9
73929: PUSH
73930: FOR_TO
73931: IFFALSE 74029
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
73933: LD_VAR 0 14
73937: PUSH
73938: LD_VAR 0 8
73942: ARRAY
73943: PPUSH
73944: CALL_OW 247
73948: PUSH
73949: LD_INT 1
73951: EQUAL
73952: PUSH
73953: LD_VAR 0 14
73957: PUSH
73958: LD_VAR 0 8
73962: ARRAY
73963: PPUSH
73964: CALL_OW 256
73968: PUSH
73969: LD_INT 250
73971: LESS
73972: PUSH
73973: LD_VAR 0 20
73977: AND
73978: PUSH
73979: LD_VAR 0 20
73983: NOT
73984: PUSH
73985: LD_VAR 0 14
73989: PUSH
73990: LD_VAR 0 8
73994: ARRAY
73995: PPUSH
73996: CALL_OW 256
74000: PUSH
74001: LD_INT 250
74003: GREATEREQUAL
74004: AND
74005: OR
74006: AND
74007: IFFALSE 74027
// begin x := tmp [ j ] ;
74009: LD_ADDR_VAR 0 10
74013: PUSH
74014: LD_VAR 0 14
74018: PUSH
74019: LD_VAR 0 8
74023: ARRAY
74024: ST_TO_ADDR
// break ;
74025: GO 74029
// end ;
74027: GO 73930
74029: POP
74030: POP
// if x then
74031: LD_VAR 0 10
74035: IFFALSE 74059
// ComAttackUnit ( group [ i ] , x ) else
74037: LD_VAR 0 4
74041: PUSH
74042: LD_VAR 0 7
74046: ARRAY
74047: PPUSH
74048: LD_VAR 0 10
74052: PPUSH
74053: CALL_OW 115
74057: GO 74083
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74059: LD_VAR 0 4
74063: PUSH
74064: LD_VAR 0 7
74068: ARRAY
74069: PPUSH
74070: LD_VAR 0 14
74074: PUSH
74075: LD_INT 1
74077: ARRAY
74078: PPUSH
74079: CALL_OW 115
// if not HasTask ( group [ i ] ) then
74083: LD_VAR 0 4
74087: PUSH
74088: LD_VAR 0 7
74092: ARRAY
74093: PPUSH
74094: CALL_OW 314
74098: NOT
74099: IFFALSE 74137
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
74101: LD_VAR 0 4
74105: PUSH
74106: LD_VAR 0 7
74110: ARRAY
74111: PPUSH
74112: LD_VAR 0 14
74116: PPUSH
74117: LD_VAR 0 4
74121: PUSH
74122: LD_VAR 0 7
74126: ARRAY
74127: PPUSH
74128: CALL_OW 74
74132: PPUSH
74133: CALL_OW 115
// end ; end ; end ;
74137: GO 70016
74139: POP
74140: POP
// wait ( 0 0$2 ) ;
74141: LD_INT 70
74143: PPUSH
74144: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
74148: LD_VAR 0 4
74152: NOT
74153: PUSH
74154: LD_VAR 0 4
74158: PUSH
74159: EMPTY
74160: EQUAL
74161: OR
74162: PUSH
74163: LD_INT 81
74165: PUSH
74166: LD_VAR 0 35
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PPUSH
74175: CALL_OW 69
74179: NOT
74180: OR
74181: IFFALSE 70001
// end ;
74183: LD_VAR 0 2
74187: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
74188: LD_INT 0
74190: PPUSH
74191: PPUSH
74192: PPUSH
74193: PPUSH
74194: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
74195: LD_VAR 0 1
74199: NOT
74200: PUSH
74201: LD_EXP 11
74205: PUSH
74206: LD_VAR 0 1
74210: ARRAY
74211: NOT
74212: OR
74213: PUSH
74214: LD_VAR 0 2
74218: NOT
74219: OR
74220: PUSH
74221: LD_VAR 0 3
74225: NOT
74226: OR
74227: IFFALSE 74231
// exit ;
74229: GO 74744
// side := mc_sides [ base ] ;
74231: LD_ADDR_VAR 0 6
74235: PUSH
74236: LD_EXP 37
74240: PUSH
74241: LD_VAR 0 1
74245: ARRAY
74246: ST_TO_ADDR
// if not side then
74247: LD_VAR 0 6
74251: NOT
74252: IFFALSE 74256
// exit ;
74254: GO 74744
// for i in solds do
74256: LD_ADDR_VAR 0 7
74260: PUSH
74261: LD_VAR 0 2
74265: PUSH
74266: FOR_IN
74267: IFFALSE 74328
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
74269: LD_VAR 0 7
74273: PPUSH
74274: CALL_OW 310
74278: PPUSH
74279: CALL_OW 266
74283: PUSH
74284: LD_INT 32
74286: PUSH
74287: LD_INT 31
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: IN
74294: IFFALSE 74314
// solds := solds diff i else
74296: LD_ADDR_VAR 0 2
74300: PUSH
74301: LD_VAR 0 2
74305: PUSH
74306: LD_VAR 0 7
74310: DIFF
74311: ST_TO_ADDR
74312: GO 74326
// SetTag ( i , 18 ) ;
74314: LD_VAR 0 7
74318: PPUSH
74319: LD_INT 18
74321: PPUSH
74322: CALL_OW 109
74326: GO 74266
74328: POP
74329: POP
// if not solds then
74330: LD_VAR 0 2
74334: NOT
74335: IFFALSE 74339
// exit ;
74337: GO 74744
// repeat wait ( 0 0$1 ) ;
74339: LD_INT 35
74341: PPUSH
74342: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
74346: LD_ADDR_VAR 0 5
74350: PUSH
74351: LD_VAR 0 6
74355: PPUSH
74356: LD_VAR 0 3
74360: PPUSH
74361: CALL 4850 0 2
74365: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
74366: LD_EXP 11
74370: PUSH
74371: LD_VAR 0 1
74375: ARRAY
74376: NOT
74377: PUSH
74378: LD_EXP 11
74382: PUSH
74383: LD_VAR 0 1
74387: ARRAY
74388: PUSH
74389: EMPTY
74390: EQUAL
74391: OR
74392: IFFALSE 74429
// begin for i in solds do
74394: LD_ADDR_VAR 0 7
74398: PUSH
74399: LD_VAR 0 2
74403: PUSH
74404: FOR_IN
74405: IFFALSE 74418
// ComStop ( i ) ;
74407: LD_VAR 0 7
74411: PPUSH
74412: CALL_OW 141
74416: GO 74404
74418: POP
74419: POP
// solds := [ ] ;
74420: LD_ADDR_VAR 0 2
74424: PUSH
74425: EMPTY
74426: ST_TO_ADDR
// exit ;
74427: GO 74744
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
74429: LD_VAR 0 5
74433: NOT
74434: PUSH
74435: LD_VAR 0 5
74439: PUSH
74440: LD_INT 3
74442: GREATER
74443: OR
74444: PUSH
74445: LD_EXP 33
74449: PUSH
74450: LD_VAR 0 1
74454: ARRAY
74455: OR
74456: IFFALSE 74497
// begin for i in solds do
74458: LD_ADDR_VAR 0 7
74462: PUSH
74463: LD_VAR 0 2
74467: PUSH
74468: FOR_IN
74469: IFFALSE 74493
// if HasTask ( i ) then
74471: LD_VAR 0 7
74475: PPUSH
74476: CALL_OW 314
74480: IFFALSE 74491
// ComStop ( i ) ;
74482: LD_VAR 0 7
74486: PPUSH
74487: CALL_OW 141
74491: GO 74468
74493: POP
74494: POP
// break ;
74495: GO 74732
// end ; for i in solds do
74497: LD_ADDR_VAR 0 7
74501: PUSH
74502: LD_VAR 0 2
74506: PUSH
74507: FOR_IN
74508: IFFALSE 74724
// begin if IsInUnit ( i ) then
74510: LD_VAR 0 7
74514: PPUSH
74515: CALL_OW 310
74519: IFFALSE 74530
// ComExitBuilding ( i ) ;
74521: LD_VAR 0 7
74525: PPUSH
74526: CALL_OW 122
// if GetLives ( i ) > 333 then
74530: LD_VAR 0 7
74534: PPUSH
74535: CALL_OW 256
74539: PUSH
74540: LD_INT 333
74542: GREATER
74543: IFFALSE 74571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74545: LD_VAR 0 7
74549: PPUSH
74550: LD_VAR 0 5
74554: PPUSH
74555: LD_VAR 0 7
74559: PPUSH
74560: CALL_OW 74
74564: PPUSH
74565: CALL_OW 115
74569: GO 74722
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
74571: LD_ADDR_VAR 0 8
74575: PUSH
74576: LD_EXP 11
74580: PUSH
74581: LD_VAR 0 1
74585: ARRAY
74586: PPUSH
74587: LD_INT 2
74589: PUSH
74590: LD_INT 30
74592: PUSH
74593: LD_INT 0
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 30
74602: PUSH
74603: LD_INT 1
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 30
74612: PUSH
74613: LD_INT 6
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: PPUSH
74626: CALL_OW 72
74630: PPUSH
74631: LD_VAR 0 7
74635: PPUSH
74636: CALL_OW 74
74640: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
74641: LD_VAR 0 7
74645: PPUSH
74646: LD_VAR 0 8
74650: PPUSH
74651: CALL_OW 250
74655: PPUSH
74656: LD_INT 3
74658: PPUSH
74659: LD_INT 5
74661: PPUSH
74662: CALL_OW 272
74666: PPUSH
74667: LD_VAR 0 8
74671: PPUSH
74672: CALL_OW 251
74676: PPUSH
74677: LD_INT 3
74679: PPUSH
74680: LD_INT 5
74682: PPUSH
74683: CALL_OW 273
74687: PPUSH
74688: CALL_OW 111
// SetTag ( i , 0 ) ;
74692: LD_VAR 0 7
74696: PPUSH
74697: LD_INT 0
74699: PPUSH
74700: CALL_OW 109
// solds := solds diff i ;
74704: LD_ADDR_VAR 0 2
74708: PUSH
74709: LD_VAR 0 2
74713: PUSH
74714: LD_VAR 0 7
74718: DIFF
74719: ST_TO_ADDR
// continue ;
74720: GO 74507
// end ; end ;
74722: GO 74507
74724: POP
74725: POP
// until solds ;
74726: LD_VAR 0 2
74730: IFFALSE 74339
// MC_Reset ( base , 18 ) ;
74732: LD_VAR 0 1
74736: PPUSH
74737: LD_INT 18
74739: PPUSH
74740: CALL 43426 0 2
// end ;
74744: LD_VAR 0 4
74748: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
74749: LD_INT 0
74751: PPUSH
74752: PPUSH
74753: PPUSH
74754: PPUSH
74755: PPUSH
74756: PPUSH
74757: PPUSH
74758: PPUSH
74759: PPUSH
74760: PPUSH
74761: PPUSH
74762: PPUSH
74763: PPUSH
74764: PPUSH
74765: PPUSH
74766: PPUSH
74767: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
74768: LD_ADDR_VAR 0 13
74772: PUSH
74773: LD_EXP 11
74777: PUSH
74778: LD_VAR 0 1
74782: ARRAY
74783: PPUSH
74784: LD_INT 25
74786: PUSH
74787: LD_INT 3
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PPUSH
74794: CALL_OW 72
74798: ST_TO_ADDR
// if mc_remote_driver [ base ] then
74799: LD_EXP 51
74803: PUSH
74804: LD_VAR 0 1
74808: ARRAY
74809: IFFALSE 74833
// mechs := mechs diff mc_remote_driver [ base ] ;
74811: LD_ADDR_VAR 0 13
74815: PUSH
74816: LD_VAR 0 13
74820: PUSH
74821: LD_EXP 51
74825: PUSH
74826: LD_VAR 0 1
74830: ARRAY
74831: DIFF
74832: ST_TO_ADDR
// for i in mechs do
74833: LD_ADDR_VAR 0 5
74837: PUSH
74838: LD_VAR 0 13
74842: PUSH
74843: FOR_IN
74844: IFFALSE 74879
// if GetTag ( i ) > 0 then
74846: LD_VAR 0 5
74850: PPUSH
74851: CALL_OW 110
74855: PUSH
74856: LD_INT 0
74858: GREATER
74859: IFFALSE 74877
// mechs := mechs diff i ;
74861: LD_ADDR_VAR 0 13
74865: PUSH
74866: LD_VAR 0 13
74870: PUSH
74871: LD_VAR 0 5
74875: DIFF
74876: ST_TO_ADDR
74877: GO 74843
74879: POP
74880: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
74881: LD_ADDR_VAR 0 9
74885: PUSH
74886: LD_EXP 11
74890: PUSH
74891: LD_VAR 0 1
74895: ARRAY
74896: PPUSH
74897: LD_INT 2
74899: PUSH
74900: LD_INT 25
74902: PUSH
74903: LD_INT 1
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: LD_INT 25
74912: PUSH
74913: LD_INT 5
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PUSH
74920: LD_INT 25
74922: PUSH
74923: LD_INT 8
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: PUSH
74930: LD_INT 25
74932: PUSH
74933: LD_INT 9
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: PPUSH
74947: CALL_OW 72
74951: ST_TO_ADDR
// if not defenders and not solds then
74952: LD_VAR 0 2
74956: NOT
74957: PUSH
74958: LD_VAR 0 9
74962: NOT
74963: AND
74964: IFFALSE 74968
// exit ;
74966: GO 76594
// depot_under_attack := false ;
74968: LD_ADDR_VAR 0 17
74972: PUSH
74973: LD_INT 0
74975: ST_TO_ADDR
// sold_defenders := [ ] ;
74976: LD_ADDR_VAR 0 18
74980: PUSH
74981: EMPTY
74982: ST_TO_ADDR
// if mechs then
74983: LD_VAR 0 13
74987: IFFALSE 75116
// for i in defenders do
74989: LD_ADDR_VAR 0 5
74993: PUSH
74994: LD_VAR 0 2
74998: PUSH
74999: FOR_IN
75000: IFFALSE 75114
// begin SetTag ( i , 20 ) ;
75002: LD_VAR 0 5
75006: PPUSH
75007: LD_INT 20
75009: PPUSH
75010: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
75014: LD_VAR 0 5
75018: PPUSH
75019: CALL_OW 263
75023: PUSH
75024: LD_INT 1
75026: EQUAL
75027: PUSH
75028: LD_VAR 0 5
75032: PPUSH
75033: CALL_OW 311
75037: NOT
75038: AND
75039: PUSH
75040: LD_VAR 0 13
75044: AND
75045: IFFALSE 75112
// begin un := mechs [ 1 ] ;
75047: LD_ADDR_VAR 0 11
75051: PUSH
75052: LD_VAR 0 13
75056: PUSH
75057: LD_INT 1
75059: ARRAY
75060: ST_TO_ADDR
// ComExitBuilding ( un ) ;
75061: LD_VAR 0 11
75065: PPUSH
75066: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
75070: LD_VAR 0 11
75074: PPUSH
75075: LD_VAR 0 5
75079: PPUSH
75080: CALL_OW 180
// SetTag ( un , 19 ) ;
75084: LD_VAR 0 11
75088: PPUSH
75089: LD_INT 19
75091: PPUSH
75092: CALL_OW 109
// mechs := mechs diff un ;
75096: LD_ADDR_VAR 0 13
75100: PUSH
75101: LD_VAR 0 13
75105: PUSH
75106: LD_VAR 0 11
75110: DIFF
75111: ST_TO_ADDR
// end ; end ;
75112: GO 74999
75114: POP
75115: POP
// if solds then
75116: LD_VAR 0 9
75120: IFFALSE 75179
// for i in solds do
75122: LD_ADDR_VAR 0 5
75126: PUSH
75127: LD_VAR 0 9
75131: PUSH
75132: FOR_IN
75133: IFFALSE 75177
// if not GetTag ( i ) then
75135: LD_VAR 0 5
75139: PPUSH
75140: CALL_OW 110
75144: NOT
75145: IFFALSE 75175
// begin defenders := defenders union i ;
75147: LD_ADDR_VAR 0 2
75151: PUSH
75152: LD_VAR 0 2
75156: PUSH
75157: LD_VAR 0 5
75161: UNION
75162: ST_TO_ADDR
// SetTag ( i , 18 ) ;
75163: LD_VAR 0 5
75167: PPUSH
75168: LD_INT 18
75170: PPUSH
75171: CALL_OW 109
// end ;
75175: GO 75132
75177: POP
75178: POP
// repeat wait ( 0 0$1 ) ;
75179: LD_INT 35
75181: PPUSH
75182: CALL_OW 67
// enemy := mc_scan [ base ] ;
75186: LD_ADDR_VAR 0 3
75190: PUSH
75191: LD_EXP 34
75195: PUSH
75196: LD_VAR 0 1
75200: ARRAY
75201: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
75202: LD_EXP 11
75206: PUSH
75207: LD_VAR 0 1
75211: ARRAY
75212: NOT
75213: PUSH
75214: LD_EXP 11
75218: PUSH
75219: LD_VAR 0 1
75223: ARRAY
75224: PUSH
75225: EMPTY
75226: EQUAL
75227: OR
75228: IFFALSE 75265
// begin for i in defenders do
75230: LD_ADDR_VAR 0 5
75234: PUSH
75235: LD_VAR 0 2
75239: PUSH
75240: FOR_IN
75241: IFFALSE 75254
// ComStop ( i ) ;
75243: LD_VAR 0 5
75247: PPUSH
75248: CALL_OW 141
75252: GO 75240
75254: POP
75255: POP
// defenders := [ ] ;
75256: LD_ADDR_VAR 0 2
75260: PUSH
75261: EMPTY
75262: ST_TO_ADDR
// exit ;
75263: GO 76594
// end ; for i in defenders do
75265: LD_ADDR_VAR 0 5
75269: PUSH
75270: LD_VAR 0 2
75274: PUSH
75275: FOR_IN
75276: IFFALSE 76094
// begin e := NearestUnitToUnit ( enemy , i ) ;
75278: LD_ADDR_VAR 0 14
75282: PUSH
75283: LD_VAR 0 3
75287: PPUSH
75288: LD_VAR 0 5
75292: PPUSH
75293: CALL_OW 74
75297: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75298: LD_ADDR_VAR 0 8
75302: PUSH
75303: LD_EXP 11
75307: PUSH
75308: LD_VAR 0 1
75312: ARRAY
75313: PPUSH
75314: LD_INT 2
75316: PUSH
75317: LD_INT 30
75319: PUSH
75320: LD_INT 0
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 30
75329: PUSH
75330: LD_INT 1
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: LIST
75341: PPUSH
75342: CALL_OW 72
75346: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
75347: LD_ADDR_VAR 0 17
75351: PUSH
75352: LD_VAR 0 8
75356: NOT
75357: PUSH
75358: LD_VAR 0 8
75362: PPUSH
75363: LD_INT 3
75365: PUSH
75366: LD_INT 24
75368: PUSH
75369: LD_INT 600
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PPUSH
75380: CALL_OW 72
75384: OR
75385: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
75386: LD_VAR 0 5
75390: PPUSH
75391: CALL_OW 247
75395: PUSH
75396: LD_INT 2
75398: DOUBLE
75399: EQUAL
75400: IFTRUE 75404
75402: GO 75800
75404: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
75405: LD_VAR 0 5
75409: PPUSH
75410: CALL_OW 256
75414: PUSH
75415: LD_INT 650
75417: GREATER
75418: PUSH
75419: LD_VAR 0 5
75423: PPUSH
75424: LD_VAR 0 14
75428: PPUSH
75429: CALL_OW 296
75433: PUSH
75434: LD_INT 40
75436: LESS
75437: PUSH
75438: LD_VAR 0 14
75442: PPUSH
75443: LD_EXP 36
75447: PUSH
75448: LD_VAR 0 1
75452: ARRAY
75453: PPUSH
75454: CALL_OW 308
75458: OR
75459: AND
75460: IFFALSE 75582
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
75462: LD_VAR 0 5
75466: PPUSH
75467: CALL_OW 262
75471: PUSH
75472: LD_INT 1
75474: EQUAL
75475: PUSH
75476: LD_VAR 0 5
75480: PPUSH
75481: CALL_OW 261
75485: PUSH
75486: LD_INT 30
75488: LESS
75489: AND
75490: PUSH
75491: LD_VAR 0 8
75495: AND
75496: IFFALSE 75566
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
75498: LD_VAR 0 5
75502: PPUSH
75503: LD_VAR 0 8
75507: PPUSH
75508: LD_VAR 0 5
75512: PPUSH
75513: CALL_OW 74
75517: PPUSH
75518: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
75522: LD_VAR 0 5
75526: PPUSH
75527: LD_VAR 0 8
75531: PPUSH
75532: LD_VAR 0 5
75536: PPUSH
75537: CALL_OW 74
75541: PPUSH
75542: CALL_OW 296
75546: PUSH
75547: LD_INT 6
75549: LESS
75550: IFFALSE 75564
// SetFuel ( i , 100 ) ;
75552: LD_VAR 0 5
75556: PPUSH
75557: LD_INT 100
75559: PPUSH
75560: CALL_OW 240
// end else
75564: GO 75580
// ComAttackUnit ( i , e ) ;
75566: LD_VAR 0 5
75570: PPUSH
75571: LD_VAR 0 14
75575: PPUSH
75576: CALL_OW 115
// end else
75580: GO 75683
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
75582: LD_VAR 0 14
75586: PPUSH
75587: LD_EXP 36
75591: PUSH
75592: LD_VAR 0 1
75596: ARRAY
75597: PPUSH
75598: CALL_OW 308
75602: NOT
75603: PUSH
75604: LD_VAR 0 5
75608: PPUSH
75609: LD_VAR 0 14
75613: PPUSH
75614: CALL_OW 296
75618: PUSH
75619: LD_INT 40
75621: GREATEREQUAL
75622: AND
75623: PUSH
75624: LD_VAR 0 5
75628: PPUSH
75629: CALL_OW 256
75633: PUSH
75634: LD_INT 650
75636: LESSEQUAL
75637: OR
75638: PUSH
75639: LD_VAR 0 5
75643: PPUSH
75644: LD_EXP 35
75648: PUSH
75649: LD_VAR 0 1
75653: ARRAY
75654: PPUSH
75655: CALL_OW 308
75659: NOT
75660: AND
75661: IFFALSE 75683
// ComMoveToArea ( i , mc_parking [ base ] ) ;
75663: LD_VAR 0 5
75667: PPUSH
75668: LD_EXP 35
75672: PUSH
75673: LD_VAR 0 1
75677: ARRAY
75678: PPUSH
75679: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
75683: LD_VAR 0 5
75687: PPUSH
75688: CALL_OW 256
75692: PUSH
75693: LD_INT 998
75695: LESS
75696: PUSH
75697: LD_VAR 0 5
75701: PPUSH
75702: CALL_OW 263
75706: PUSH
75707: LD_INT 1
75709: EQUAL
75710: AND
75711: PUSH
75712: LD_VAR 0 5
75716: PPUSH
75717: CALL_OW 311
75721: AND
75722: PUSH
75723: LD_VAR 0 5
75727: PPUSH
75728: LD_EXP 35
75732: PUSH
75733: LD_VAR 0 1
75737: ARRAY
75738: PPUSH
75739: CALL_OW 308
75743: AND
75744: IFFALSE 75798
// begin mech := IsDrivenBy ( i ) ;
75746: LD_ADDR_VAR 0 10
75750: PUSH
75751: LD_VAR 0 5
75755: PPUSH
75756: CALL_OW 311
75760: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
75761: LD_VAR 0 10
75765: PPUSH
75766: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
75770: LD_VAR 0 10
75774: PPUSH
75775: LD_VAR 0 5
75779: PPUSH
75780: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
75784: LD_VAR 0 10
75788: PPUSH
75789: LD_VAR 0 5
75793: PPUSH
75794: CALL_OW 180
// end ; end ; unit_human :
75798: GO 76065
75800: LD_INT 1
75802: DOUBLE
75803: EQUAL
75804: IFTRUE 75808
75806: GO 76064
75808: POP
// begin b := IsInUnit ( i ) ;
75809: LD_ADDR_VAR 0 19
75813: PUSH
75814: LD_VAR 0 5
75818: PPUSH
75819: CALL_OW 310
75823: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
75824: LD_ADDR_VAR 0 20
75828: PUSH
75829: LD_VAR 0 19
75833: NOT
75834: PUSH
75835: LD_VAR 0 19
75839: PPUSH
75840: CALL_OW 266
75844: PUSH
75845: LD_INT 32
75847: PUSH
75848: LD_INT 31
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: IN
75855: OR
75856: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
75857: LD_VAR 0 17
75861: PUSH
75862: LD_VAR 0 2
75866: PPUSH
75867: LD_INT 21
75869: PUSH
75870: LD_INT 2
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PPUSH
75877: CALL_OW 72
75881: PUSH
75882: LD_INT 1
75884: LESSEQUAL
75885: OR
75886: PUSH
75887: LD_VAR 0 20
75891: AND
75892: PUSH
75893: LD_VAR 0 5
75897: PUSH
75898: LD_VAR 0 18
75902: IN
75903: NOT
75904: AND
75905: IFFALSE 75998
// begin if b then
75907: LD_VAR 0 19
75911: IFFALSE 75960
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
75913: LD_VAR 0 19
75917: PPUSH
75918: LD_VAR 0 3
75922: PPUSH
75923: LD_VAR 0 19
75927: PPUSH
75928: CALL_OW 74
75932: PPUSH
75933: CALL_OW 296
75937: PUSH
75938: LD_INT 10
75940: LESS
75941: PUSH
75942: LD_VAR 0 19
75946: PPUSH
75947: CALL_OW 461
75951: PUSH
75952: LD_INT 7
75954: NONEQUAL
75955: AND
75956: IFFALSE 75960
// continue ;
75958: GO 75275
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
75960: LD_ADDR_VAR 0 18
75964: PUSH
75965: LD_VAR 0 18
75969: PPUSH
75970: LD_VAR 0 18
75974: PUSH
75975: LD_INT 1
75977: PLUS
75978: PPUSH
75979: LD_VAR 0 5
75983: PPUSH
75984: CALL_OW 1
75988: ST_TO_ADDR
// ComExitBuilding ( i ) ;
75989: LD_VAR 0 5
75993: PPUSH
75994: CALL_OW 122
// end ; if sold_defenders then
75998: LD_VAR 0 18
76002: IFFALSE 76062
// if i in sold_defenders then
76004: LD_VAR 0 5
76008: PUSH
76009: LD_VAR 0 18
76013: IN
76014: IFFALSE 76062
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
76016: LD_VAR 0 5
76020: PPUSH
76021: CALL_OW 314
76025: NOT
76026: PUSH
76027: LD_VAR 0 5
76031: PPUSH
76032: LD_VAR 0 14
76036: PPUSH
76037: CALL_OW 296
76041: PUSH
76042: LD_INT 30
76044: LESS
76045: AND
76046: IFFALSE 76062
// ComAttackUnit ( i , e ) ;
76048: LD_VAR 0 5
76052: PPUSH
76053: LD_VAR 0 14
76057: PPUSH
76058: CALL_OW 115
// end ; end ; end ;
76062: GO 76065
76064: POP
// if IsDead ( i ) then
76065: LD_VAR 0 5
76069: PPUSH
76070: CALL_OW 301
76074: IFFALSE 76092
// defenders := defenders diff i ;
76076: LD_ADDR_VAR 0 2
76080: PUSH
76081: LD_VAR 0 2
76085: PUSH
76086: LD_VAR 0 5
76090: DIFF
76091: ST_TO_ADDR
// end ;
76092: GO 75275
76094: POP
76095: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
76096: LD_VAR 0 3
76100: NOT
76101: PUSH
76102: LD_VAR 0 2
76106: NOT
76107: OR
76108: PUSH
76109: LD_EXP 11
76113: PUSH
76114: LD_VAR 0 1
76118: ARRAY
76119: NOT
76120: OR
76121: IFFALSE 75179
// MC_Reset ( base , 18 ) ;
76123: LD_VAR 0 1
76127: PPUSH
76128: LD_INT 18
76130: PPUSH
76131: CALL 43426 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
76135: LD_ADDR_VAR 0 2
76139: PUSH
76140: LD_VAR 0 2
76144: PUSH
76145: LD_VAR 0 2
76149: PPUSH
76150: LD_INT 2
76152: PUSH
76153: LD_INT 25
76155: PUSH
76156: LD_INT 1
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: PUSH
76163: LD_INT 25
76165: PUSH
76166: LD_INT 5
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: PUSH
76173: LD_INT 25
76175: PUSH
76176: LD_INT 8
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PUSH
76183: LD_INT 25
76185: PUSH
76186: LD_INT 9
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: PPUSH
76200: CALL_OW 72
76204: DIFF
76205: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
76206: LD_VAR 0 3
76210: NOT
76211: PUSH
76212: LD_VAR 0 2
76216: PPUSH
76217: LD_INT 21
76219: PUSH
76220: LD_INT 2
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PPUSH
76227: CALL_OW 72
76231: AND
76232: IFFALSE 76570
// begin tmp := FilterByTag ( defenders , 19 ) ;
76234: LD_ADDR_VAR 0 12
76238: PUSH
76239: LD_VAR 0 2
76243: PPUSH
76244: LD_INT 19
76246: PPUSH
76247: CALL 36610 0 2
76251: ST_TO_ADDR
// if tmp then
76252: LD_VAR 0 12
76256: IFFALSE 76326
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
76258: LD_ADDR_VAR 0 12
76262: PUSH
76263: LD_VAR 0 12
76267: PPUSH
76268: LD_INT 25
76270: PUSH
76271: LD_INT 3
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: PPUSH
76278: CALL_OW 72
76282: ST_TO_ADDR
// if tmp then
76283: LD_VAR 0 12
76287: IFFALSE 76326
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
76289: LD_ADDR_EXP 23
76293: PUSH
76294: LD_EXP 23
76298: PPUSH
76299: LD_VAR 0 1
76303: PPUSH
76304: LD_EXP 23
76308: PUSH
76309: LD_VAR 0 1
76313: ARRAY
76314: PUSH
76315: LD_VAR 0 12
76319: UNION
76320: PPUSH
76321: CALL_OW 1
76325: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
76326: LD_VAR 0 1
76330: PPUSH
76331: LD_INT 19
76333: PPUSH
76334: CALL 43426 0 2
// repeat wait ( 0 0$1 ) ;
76338: LD_INT 35
76340: PPUSH
76341: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
76345: LD_EXP 11
76349: PUSH
76350: LD_VAR 0 1
76354: ARRAY
76355: NOT
76356: PUSH
76357: LD_EXP 11
76361: PUSH
76362: LD_VAR 0 1
76366: ARRAY
76367: PUSH
76368: EMPTY
76369: EQUAL
76370: OR
76371: IFFALSE 76408
// begin for i in defenders do
76373: LD_ADDR_VAR 0 5
76377: PUSH
76378: LD_VAR 0 2
76382: PUSH
76383: FOR_IN
76384: IFFALSE 76397
// ComStop ( i ) ;
76386: LD_VAR 0 5
76390: PPUSH
76391: CALL_OW 141
76395: GO 76383
76397: POP
76398: POP
// defenders := [ ] ;
76399: LD_ADDR_VAR 0 2
76403: PUSH
76404: EMPTY
76405: ST_TO_ADDR
// exit ;
76406: GO 76594
// end ; for i in defenders do
76408: LD_ADDR_VAR 0 5
76412: PUSH
76413: LD_VAR 0 2
76417: PUSH
76418: FOR_IN
76419: IFFALSE 76508
// begin if not IsInArea ( i , mc_parking [ base ] ) then
76421: LD_VAR 0 5
76425: PPUSH
76426: LD_EXP 35
76430: PUSH
76431: LD_VAR 0 1
76435: ARRAY
76436: PPUSH
76437: CALL_OW 308
76441: NOT
76442: IFFALSE 76466
// ComMoveToArea ( i , mc_parking [ base ] ) else
76444: LD_VAR 0 5
76448: PPUSH
76449: LD_EXP 35
76453: PUSH
76454: LD_VAR 0 1
76458: ARRAY
76459: PPUSH
76460: CALL_OW 113
76464: GO 76506
// if GetControl ( i ) = control_manual then
76466: LD_VAR 0 5
76470: PPUSH
76471: CALL_OW 263
76475: PUSH
76476: LD_INT 1
76478: EQUAL
76479: IFFALSE 76506
// if IsDrivenBy ( i ) then
76481: LD_VAR 0 5
76485: PPUSH
76486: CALL_OW 311
76490: IFFALSE 76506
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
76492: LD_VAR 0 5
76496: PPUSH
76497: CALL_OW 311
76501: PPUSH
76502: CALL_OW 121
// end ;
76506: GO 76418
76508: POP
76509: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
76510: LD_VAR 0 2
76514: PPUSH
76515: LD_INT 95
76517: PUSH
76518: LD_EXP 35
76522: PUSH
76523: LD_VAR 0 1
76527: ARRAY
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PPUSH
76533: CALL_OW 72
76537: PUSH
76538: LD_VAR 0 2
76542: EQUAL
76543: PUSH
76544: LD_EXP 34
76548: PUSH
76549: LD_VAR 0 1
76553: ARRAY
76554: OR
76555: PUSH
76556: LD_EXP 11
76560: PUSH
76561: LD_VAR 0 1
76565: ARRAY
76566: NOT
76567: OR
76568: IFFALSE 76338
// end ; MC_Reset ( base , 19 ) ;
76570: LD_VAR 0 1
76574: PPUSH
76575: LD_INT 19
76577: PPUSH
76578: CALL 43426 0 2
// MC_Reset ( base , 20 ) ;
76582: LD_VAR 0 1
76586: PPUSH
76587: LD_INT 20
76589: PPUSH
76590: CALL 43426 0 2
// end ;
76594: LD_VAR 0 4
76598: RET
