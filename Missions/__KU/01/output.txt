// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: IFTRUE 247
 240: PUSH
 241: LD_VAR 0 2
 245: NOT
 246: OR
 247: IFFALSE 251
// exit ;
 249: GO 360
// result := 0 ;
 251: LD_ADDR_VAR 0 3
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// for i in tmp do
 259: LD_ADDR_VAR 0 4
 263: PUSH
 264: LD_VAR 0 6
 268: PUSH
 269: FOR_IN
 270: IFFALSE 358
// for j := 1 to 2 do
 272: LD_ADDR_VAR 0 5
 276: PUSH
 277: DOUBLE
 278: LD_INT 1
 280: DEC
 281: ST_TO_ADDR
 282: LD_INT 2
 284: PUSH
 285: FOR_TO
 286: IFFALSE 354
// if GetLabKind ( i , j ) in kinds then
 288: LD_VAR 0 4
 292: PPUSH
 293: LD_VAR 0 5
 297: PPUSH
 298: CALL_OW 268
 302: PUSH
 303: LD_VAR 0 2
 307: IN
 308: IFFALSE 352
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 310: LD_ADDR_VAR 0 2
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_VAR 0 4
 324: PPUSH
 325: LD_VAR 0 5
 329: PPUSH
 330: CALL_OW 268
 334: DIFF
 335: ST_TO_ADDR
// result := result + 1 ;
 336: LD_ADDR_VAR 0 3
 340: PUSH
 341: LD_VAR 0 3
 345: PUSH
 346: LD_INT 1
 348: PLUS
 349: ST_TO_ADDR
// continue ;
 350: GO 285
// end ;
 352: GO 285
 354: POP
 355: POP
 356: GO 269
 358: POP
 359: POP
// end ;
 360: LD_VAR 0 3
 364: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 365: LD_ADDR_OWVAR 47
 369: PUSH
 370: LD_VAR 0 11
 374: ST_TO_ADDR
// end ;
 375: PPOPN 11
 377: END
// on VehicleConstruction_ApeConsumed ( Factory , Ape ) do begin display_strings := [ Factory , Ape ] ;
 378: LD_ADDR_OWVAR 47
 382: PUSH
 383: LD_VAR 0 1
 387: PUSH
 388: LD_VAR 0 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: ST_TO_ADDR
// end ;
 397: PPOPN 2
 399: END
// export Omar ; every 0 0$1 do
 400: GO 402
 402: DISABLE
// begin uc_side := 1 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// uc_nation := 2 ;
 411: LD_ADDR_OWVAR 21
 415: PUSH
 416: LD_INT 2
 418: ST_TO_ADDR
// hc_class := class_desert_warior ;
 419: LD_ADDR_OWVAR 28
 423: PUSH
 424: LD_INT 11
 426: ST_TO_ADDR
// hc_sex := sex_male ;
 427: LD_ADDR_OWVAR 27
 431: PUSH
 432: LD_INT 1
 434: ST_TO_ADDR
// hc_name := Omar ;
 435: LD_ADDR_OWVAR 26
 439: PUSH
 440: LD_STRING Omar
 442: ST_TO_ADDR
// Omar := CreateHuman ;
 443: LD_ADDR_EXP 1
 447: PUSH
 448: CALL_OW 44
 452: ST_TO_ADDR
// SetTag ( Omar , 500 ) ;
 453: LD_EXP 1
 457: PPUSH
 458: LD_INT 500
 460: PPUSH
 461: CALL_OW 109
// PlaceUnitXY ( Omar , 27 , 27 , false ) ;
 465: LD_EXP 1
 469: PPUSH
 470: LD_INT 27
 472: PPUSH
 473: LD_INT 27
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 48
// end ;
 483: END
// every 0 0$1 do var i ;
 484: GO 486
 486: DISABLE
 487: LD_INT 0
 489: PPUSH
// begin for i := 1 to 3 do
 490: LD_ADDR_VAR 0 1
 494: PUSH
 495: DOUBLE
 496: LD_INT 1
 498: DEC
 499: ST_TO_ADDR
 500: LD_INT 3
 502: PUSH
 503: FOR_TO
 504: IFFALSE 535
// AddComAttackPlace ( ar1 , 59 + ( ( i - 1 ) * 2 ) , 74 ) ;
 506: LD_INT 67
 508: PPUSH
 509: LD_INT 59
 511: PUSH
 512: LD_VAR 0 1
 516: PUSH
 517: LD_INT 1
 519: MINUS
 520: PUSH
 521: LD_INT 2
 523: MUL
 524: PLUS
 525: PPUSH
 526: LD_INT 74
 528: PPUSH
 529: CALL_OW 176
 533: GO 503
 535: POP
 536: POP
// end ; end_of_file
 537: PPOPN 1
 539: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 540: LD_INT 0
 542: PPUSH
 543: PPUSH
// if exist_mode then
 544: LD_VAR 0 2
 548: IFFALSE 594
// begin unit := CreateCharacter ( prefix & ident ) ;
 550: LD_ADDR_VAR 0 5
 554: PUSH
 555: LD_VAR 0 3
 559: PUSH
 560: LD_VAR 0 1
 564: STR
 565: PPUSH
 566: CALL_OW 34
 570: ST_TO_ADDR
// if unit then
 571: LD_VAR 0 5
 575: IFFALSE 592
// DeleteCharacters ( prefix & ident ) ;
 577: LD_VAR 0 3
 581: PUSH
 582: LD_VAR 0 1
 586: STR
 587: PPUSH
 588: CALL_OW 40
// end else
 592: GO 609
// unit := NewCharacter ( ident ) ;
 594: LD_ADDR_VAR 0 5
 598: PUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 25
 608: ST_TO_ADDR
// result := unit ;
 609: LD_ADDR_VAR 0 4
 613: PUSH
 614: LD_VAR 0 5
 618: ST_TO_ADDR
// end ;
 619: LD_VAR 0 4
 623: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 624: LD_INT 0
 626: PPUSH
 627: PPUSH
// if exist_mode then
 628: LD_VAR 0 2
 632: IFFALSE 657
// unit := CreateCharacter ( prefix & ident ) else
 634: LD_ADDR_VAR 0 5
 638: PUSH
 639: LD_VAR 0 3
 643: PUSH
 644: LD_VAR 0 1
 648: STR
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
 655: GO 672
// unit := NewCharacter ( ident ) ;
 657: LD_ADDR_VAR 0 5
 661: PUSH
 662: LD_VAR 0 1
 666: PPUSH
 667: CALL_OW 25
 671: ST_TO_ADDR
// result := unit ;
 672: LD_ADDR_VAR 0 4
 676: PUSH
 677: LD_VAR 0 5
 681: ST_TO_ADDR
// end ;
 682: LD_VAR 0 4
 686: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 687: LD_INT 0
 689: PPUSH
 690: PPUSH
// if not side or not nation then
 691: LD_VAR 0 1
 695: NOT
 696: IFTRUE 705
 698: PUSH
 699: LD_VAR 0 2
 703: NOT
 704: OR
 705: IFFALSE 709
// exit ;
 707: GO 1503
// case nation of nation_american :
 709: LD_VAR 0 2
 713: PUSH
 714: LD_INT 1
 716: DOUBLE
 717: EQUAL
 718: IFTRUE 722
 720: GO 944
 722: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
 723: LD_ADDR_VAR 0 4
 727: PUSH
 728: LD_INT 35
 730: PUSH
 731: LD_INT 45
 733: PUSH
 734: LD_INT 46
 736: PUSH
 737: LD_INT 47
 739: PUSH
 740: LD_INT 82
 742: PUSH
 743: LD_INT 83
 745: PUSH
 746: LD_INT 84
 748: PUSH
 749: LD_INT 85
 751: PUSH
 752: LD_INT 86
 754: PUSH
 755: LD_INT 1
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: LD_INT 6
 763: PUSH
 764: LD_INT 15
 766: PUSH
 767: LD_INT 16
 769: PUSH
 770: LD_INT 7
 772: PUSH
 773: LD_INT 12
 775: PUSH
 776: LD_INT 13
 778: PUSH
 779: LD_INT 10
 781: PUSH
 782: LD_INT 14
 784: PUSH
 785: LD_INT 20
 787: PUSH
 788: LD_INT 21
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_INT 25
 796: PUSH
 797: LD_INT 32
 799: PUSH
 800: LD_INT 27
 802: PUSH
 803: LD_INT 36
 805: PUSH
 806: LD_INT 69
 808: PUSH
 809: LD_INT 39
 811: PUSH
 812: LD_INT 34
 814: PUSH
 815: LD_INT 40
 817: PUSH
 818: LD_INT 48
 820: PUSH
 821: LD_INT 49
 823: PUSH
 824: LD_INT 50
 826: PUSH
 827: LD_INT 51
 829: PUSH
 830: LD_INT 52
 832: PUSH
 833: LD_INT 53
 835: PUSH
 836: LD_INT 54
 838: PUSH
 839: LD_INT 55
 841: PUSH
 842: LD_INT 56
 844: PUSH
 845: LD_INT 57
 847: PUSH
 848: LD_INT 58
 850: PUSH
 851: LD_INT 59
 853: PUSH
 854: LD_INT 60
 856: PUSH
 857: LD_INT 61
 859: PUSH
 860: LD_INT 62
 862: PUSH
 863: LD_INT 80
 865: PUSH
 866: LD_INT 82
 868: PUSH
 869: LD_INT 83
 871: PUSH
 872: LD_INT 84
 874: PUSH
 875: LD_INT 85
 877: PUSH
 878: LD_INT 86
 880: PUSH
 881: LD_INT 90
 883: PUSH
 884: LD_INT 93
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: ST_TO_ADDR
 942: GO 1425
 944: LD_INT 2
 946: DOUBLE
 947: EQUAL
 948: IFTRUE 952
 950: GO 1186
 952: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
 953: LD_ADDR_VAR 0 4
 957: PUSH
 958: LD_INT 35
 960: PUSH
 961: LD_INT 45
 963: PUSH
 964: LD_INT 46
 966: PUSH
 967: LD_INT 47
 969: PUSH
 970: LD_INT 82
 972: PUSH
 973: LD_INT 83
 975: PUSH
 976: LD_INT 84
 978: PUSH
 979: LD_INT 85
 981: PUSH
 982: LD_INT 87
 984: PUSH
 985: LD_INT 70
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 11
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 4
 999: PUSH
1000: LD_INT 5
1002: PUSH
1003: LD_INT 6
1005: PUSH
1006: LD_INT 15
1008: PUSH
1009: LD_INT 18
1011: PUSH
1012: LD_INT 7
1014: PUSH
1015: LD_INT 17
1017: PUSH
1018: LD_INT 8
1020: PUSH
1021: LD_INT 20
1023: PUSH
1024: LD_INT 21
1026: PUSH
1027: LD_INT 22
1029: PUSH
1030: LD_INT 72
1032: PUSH
1033: LD_INT 26
1035: PUSH
1036: LD_INT 69
1038: PUSH
1039: LD_INT 39
1041: PUSH
1042: LD_INT 40
1044: PUSH
1045: LD_INT 41
1047: PUSH
1048: LD_INT 42
1050: PUSH
1051: LD_INT 43
1053: PUSH
1054: LD_INT 48
1056: PUSH
1057: LD_INT 49
1059: PUSH
1060: LD_INT 50
1062: PUSH
1063: LD_INT 51
1065: PUSH
1066: LD_INT 52
1068: PUSH
1069: LD_INT 53
1071: PUSH
1072: LD_INT 54
1074: PUSH
1075: LD_INT 55
1077: PUSH
1078: LD_INT 56
1080: PUSH
1081: LD_INT 60
1083: PUSH
1084: LD_INT 61
1086: PUSH
1087: LD_INT 62
1089: PUSH
1090: LD_INT 66
1092: PUSH
1093: LD_INT 67
1095: PUSH
1096: LD_INT 68
1098: PUSH
1099: LD_INT 81
1101: PUSH
1102: LD_INT 82
1104: PUSH
1105: LD_INT 83
1107: PUSH
1108: LD_INT 84
1110: PUSH
1111: LD_INT 85
1113: PUSH
1114: LD_INT 87
1116: PUSH
1117: LD_INT 88
1119: PUSH
1120: LD_INT 92
1122: PUSH
1123: LD_INT 94
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: ST_TO_ADDR
1184: GO 1425
1186: LD_INT 3
1188: DOUBLE
1189: EQUAL
1190: IFTRUE 1194
1192: GO 1424
1194: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1195: LD_ADDR_VAR 0 4
1199: PUSH
1200: LD_INT 46
1202: PUSH
1203: LD_INT 47
1205: PUSH
1206: LD_INT 1
1208: PUSH
1209: LD_INT 2
1211: PUSH
1212: LD_INT 82
1214: PUSH
1215: LD_INT 83
1217: PUSH
1218: LD_INT 84
1220: PUSH
1221: LD_INT 85
1223: PUSH
1224: LD_INT 86
1226: PUSH
1227: LD_INT 11
1229: PUSH
1230: LD_INT 9
1232: PUSH
1233: LD_INT 20
1235: PUSH
1236: LD_INT 19
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 24
1244: PUSH
1245: LD_INT 22
1247: PUSH
1248: LD_INT 25
1250: PUSH
1251: LD_INT 28
1253: PUSH
1254: LD_INT 29
1256: PUSH
1257: LD_INT 30
1259: PUSH
1260: LD_INT 31
1262: PUSH
1263: LD_INT 37
1265: PUSH
1266: LD_INT 38
1268: PUSH
1269: LD_INT 32
1271: PUSH
1272: LD_INT 27
1274: PUSH
1275: LD_INT 33
1277: PUSH
1278: LD_INT 69
1280: PUSH
1281: LD_INT 39
1283: PUSH
1284: LD_INT 34
1286: PUSH
1287: LD_INT 40
1289: PUSH
1290: LD_INT 71
1292: PUSH
1293: LD_INT 23
1295: PUSH
1296: LD_INT 44
1298: PUSH
1299: LD_INT 48
1301: PUSH
1302: LD_INT 49
1304: PUSH
1305: LD_INT 50
1307: PUSH
1308: LD_INT 51
1310: PUSH
1311: LD_INT 52
1313: PUSH
1314: LD_INT 53
1316: PUSH
1317: LD_INT 54
1319: PUSH
1320: LD_INT 55
1322: PUSH
1323: LD_INT 56
1325: PUSH
1326: LD_INT 57
1328: PUSH
1329: LD_INT 58
1331: PUSH
1332: LD_INT 59
1334: PUSH
1335: LD_INT 63
1337: PUSH
1338: LD_INT 64
1340: PUSH
1341: LD_INT 65
1343: PUSH
1344: LD_INT 82
1346: PUSH
1347: LD_INT 83
1349: PUSH
1350: LD_INT 84
1352: PUSH
1353: LD_INT 85
1355: PUSH
1356: LD_INT 86
1358: PUSH
1359: LD_INT 89
1361: PUSH
1362: LD_INT 91
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: ST_TO_ADDR
1422: GO 1425
1424: POP
// if state > - 1 and state < 3 then
1425: LD_VAR 0 3
1429: PUSH
1430: LD_INT 1
1432: NEG
1433: GREATER
1434: IFFALSE 1446
1436: PUSH
1437: LD_VAR 0 3
1441: PUSH
1442: LD_INT 3
1444: LESS
1445: AND
1446: IFFALSE 1503
// for i in result do
1448: LD_ADDR_VAR 0 5
1452: PUSH
1453: LD_VAR 0 4
1457: PUSH
1458: FOR_IN
1459: IFFALSE 1501
// if GetTech ( i , side ) <> state then
1461: LD_VAR 0 5
1465: PPUSH
1466: LD_VAR 0 1
1470: PPUSH
1471: CALL_OW 321
1475: PUSH
1476: LD_VAR 0 3
1480: NONEQUAL
1481: IFFALSE 1499
// result := result diff i ;
1483: LD_ADDR_VAR 0 4
1487: PUSH
1488: LD_VAR 0 4
1492: PUSH
1493: LD_VAR 0 5
1497: DIFF
1498: ST_TO_ADDR
1499: GO 1458
1501: POP
1502: POP
// end ;
1503: LD_VAR 0 4
1507: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1508: LD_INT 0
1510: PPUSH
1511: PPUSH
1512: PPUSH
// result := true ;
1513: LD_ADDR_VAR 0 3
1517: PUSH
1518: LD_INT 1
1520: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1521: LD_ADDR_VAR 0 5
1525: PUSH
1526: LD_VAR 0 2
1530: PPUSH
1531: CALL_OW 480
1535: ST_TO_ADDR
// if not tmp then
1536: LD_VAR 0 5
1540: NOT
1541: IFFALSE 1545
// exit ;
1543: GO 1594
// for i in tmp do
1545: LD_ADDR_VAR 0 4
1549: PUSH
1550: LD_VAR 0 5
1554: PUSH
1555: FOR_IN
1556: IFFALSE 1592
// if GetTech ( i , side ) <> state_researched then
1558: LD_VAR 0 4
1562: PPUSH
1563: LD_VAR 0 1
1567: PPUSH
1568: CALL_OW 321
1572: PUSH
1573: LD_INT 2
1575: NONEQUAL
1576: IFFALSE 1590
// begin result := false ;
1578: LD_ADDR_VAR 0 3
1582: PUSH
1583: LD_INT 0
1585: ST_TO_ADDR
// exit ;
1586: POP
1587: POP
1588: GO 1594
// end ;
1590: GO 1555
1592: POP
1593: POP
// end ;
1594: LD_VAR 0 3
1598: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1599: LD_INT 0
1601: PPUSH
1602: PPUSH
1603: PPUSH
1604: PPUSH
1605: PPUSH
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
1610: PPUSH
1611: PPUSH
1612: PPUSH
1613: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1614: LD_VAR 0 1
1618: NOT
1619: IFTRUE 1636
1621: PUSH
1622: LD_VAR 0 1
1626: PPUSH
1627: CALL_OW 257
1631: PUSH
1632: LD_INT 9
1634: NONEQUAL
1635: OR
1636: IFFALSE 1640
// exit ;
1638: GO 2219
// side := GetSide ( unit ) ;
1640: LD_ADDR_VAR 0 9
1644: PUSH
1645: LD_VAR 0 1
1649: PPUSH
1650: CALL_OW 255
1654: ST_TO_ADDR
// tech_space := tech_spacanom ;
1655: LD_ADDR_VAR 0 12
1659: PUSH
1660: LD_INT 29
1662: ST_TO_ADDR
// tech_time := tech_taurad ;
1663: LD_ADDR_VAR 0 13
1667: PUSH
1668: LD_INT 28
1670: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1671: LD_ADDR_VAR 0 11
1675: PUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: CALL_OW 310
1685: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1686: LD_VAR 0 11
1690: PPUSH
1691: CALL_OW 247
1695: PUSH
1696: LD_INT 2
1698: EQUAL
1699: IFFALSE 1703
// exit ;
1701: GO 2219
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1703: LD_ADDR_VAR 0 8
1707: PUSH
1708: LD_INT 81
1710: PUSH
1711: LD_VAR 0 9
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 3
1722: PUSH
1723: LD_INT 21
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if not tmp then
1746: LD_VAR 0 8
1750: NOT
1751: IFFALSE 1755
// exit ;
1753: GO 2219
// if in_unit then
1755: LD_VAR 0 11
1759: IFFALSE 1783
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1761: LD_ADDR_VAR 0 10
1765: PUSH
1766: LD_VAR 0 8
1770: PPUSH
1771: LD_VAR 0 11
1775: PPUSH
1776: CALL_OW 74
1780: ST_TO_ADDR
1781: GO 1803
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1783: LD_ADDR_VAR 0 10
1787: PUSH
1788: LD_VAR 0 8
1792: PPUSH
1793: LD_VAR 0 1
1797: PPUSH
1798: CALL_OW 74
1802: ST_TO_ADDR
// if not enemy then
1803: LD_VAR 0 10
1807: NOT
1808: IFFALSE 1812
// exit ;
1810: GO 2219
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1812: LD_VAR 0 11
1816: IFFALSE 1838
1818: PUSH
1819: LD_VAR 0 11
1823: PPUSH
1824: LD_VAR 0 10
1828: PPUSH
1829: CALL_OW 296
1833: PUSH
1834: LD_INT 13
1836: GREATER
1837: AND
1838: IFTRUE 1860
1840: PUSH
1841: LD_VAR 0 1
1845: PPUSH
1846: LD_VAR 0 10
1850: PPUSH
1851: CALL_OW 296
1855: PUSH
1856: LD_INT 12
1858: GREATER
1859: OR
1860: IFFALSE 1864
// exit ;
1862: GO 2219
// missile := [ 1 ] ;
1864: LD_ADDR_VAR 0 14
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: EMPTY
1873: LIST
1874: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1875: LD_VAR 0 9
1879: PPUSH
1880: LD_VAR 0 12
1884: PPUSH
1885: CALL_OW 325
1889: IFFALSE 1918
// missile := Replace ( missile , missile + 1 , 2 ) ;
1891: LD_ADDR_VAR 0 14
1895: PUSH
1896: LD_VAR 0 14
1900: PPUSH
1901: LD_VAR 0 14
1905: PUSH
1906: LD_INT 1
1908: PLUS
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 1
1917: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1918: LD_VAR 0 9
1922: PPUSH
1923: LD_VAR 0 13
1927: PPUSH
1928: CALL_OW 325
1932: IFFALSE 1956
1934: PUSH
1935: LD_VAR 0 10
1939: PPUSH
1940: CALL_OW 255
1944: PPUSH
1945: LD_VAR 0 13
1949: PPUSH
1950: CALL_OW 325
1954: NOT
1955: AND
1956: IFFALSE 1985
// missile := Replace ( missile , missile + 1 , 3 ) ;
1958: LD_ADDR_VAR 0 14
1962: PUSH
1963: LD_VAR 0 14
1967: PPUSH
1968: LD_VAR 0 14
1972: PUSH
1973: LD_INT 1
1975: PLUS
1976: PPUSH
1977: LD_INT 3
1979: PPUSH
1980: CALL_OW 1
1984: ST_TO_ADDR
// if missile < 2 then
1985: LD_VAR 0 14
1989: PUSH
1990: LD_INT 2
1992: LESS
1993: IFFALSE 1997
// exit ;
1995: GO 2219
// x := GetX ( enemy ) ;
1997: LD_ADDR_VAR 0 4
2001: PUSH
2002: LD_VAR 0 10
2006: PPUSH
2007: CALL_OW 250
2011: ST_TO_ADDR
// y := GetY ( enemy ) ;
2012: LD_ADDR_VAR 0 5
2016: PUSH
2017: LD_VAR 0 10
2021: PPUSH
2022: CALL_OW 251
2026: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2027: LD_ADDR_VAR 0 6
2031: PUSH
2032: LD_VAR 0 4
2036: PUSH
2037: LD_INT 1
2039: NEG
2040: PPUSH
2041: LD_INT 1
2043: PPUSH
2044: CALL_OW 12
2048: PLUS
2049: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_VAR 0 5
2059: PUSH
2060: LD_INT 1
2062: NEG
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL_OW 12
2071: PLUS
2072: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2073: LD_VAR 0 6
2077: PPUSH
2078: LD_VAR 0 7
2082: PPUSH
2083: CALL_OW 488
2087: NOT
2088: IFFALSE 2110
// begin _x := x ;
2090: LD_ADDR_VAR 0 6
2094: PUSH
2095: LD_VAR 0 4
2099: ST_TO_ADDR
// _y := y ;
2100: LD_ADDR_VAR 0 7
2104: PUSH
2105: LD_VAR 0 5
2109: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2110: LD_ADDR_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_VAR 0 14
2122: PPUSH
2123: CALL_OW 12
2127: ST_TO_ADDR
// case i of 1 :
2128: LD_VAR 0 3
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2158
2141: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2142: LD_VAR 0 1
2146: PPUSH
2147: LD_VAR 0 10
2151: PPUSH
2152: CALL_OW 115
2156: GO 2219
2158: LD_INT 2
2160: DOUBLE
2161: EQUAL
2162: IFTRUE 2166
2164: GO 2188
2166: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_VAR 0 6
2176: PPUSH
2177: LD_VAR 0 7
2181: PPUSH
2182: CALL_OW 153
2186: GO 2219
2188: LD_INT 3
2190: DOUBLE
2191: EQUAL
2192: IFTRUE 2196
2194: GO 2218
2196: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2197: LD_VAR 0 1
2201: PPUSH
2202: LD_VAR 0 6
2206: PPUSH
2207: LD_VAR 0 7
2211: PPUSH
2212: CALL_OW 154
2216: GO 2219
2218: POP
// end ;
2219: LD_VAR 0 2
2223: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2224: LD_INT 0
2226: PPUSH
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
// if not unit or not building then
2232: LD_VAR 0 1
2236: NOT
2237: IFTRUE 2246
2239: PUSH
2240: LD_VAR 0 2
2244: NOT
2245: OR
2246: IFFALSE 2250
// exit ;
2248: GO 2408
// x := GetX ( building ) ;
2250: LD_ADDR_VAR 0 5
2254: PUSH
2255: LD_VAR 0 2
2259: PPUSH
2260: CALL_OW 250
2264: ST_TO_ADDR
// y := GetY ( building ) ;
2265: LD_ADDR_VAR 0 6
2269: PUSH
2270: LD_VAR 0 2
2274: PPUSH
2275: CALL_OW 251
2279: ST_TO_ADDR
// for i := 0 to 5 do
2280: LD_ADDR_VAR 0 4
2284: PUSH
2285: DOUBLE
2286: LD_INT 0
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 5
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2406
// begin _x := ShiftX ( x , i , 3 ) ;
2296: LD_ADDR_VAR 0 7
2300: PUSH
2301: LD_VAR 0 5
2305: PPUSH
2306: LD_VAR 0 4
2310: PPUSH
2311: LD_INT 3
2313: PPUSH
2314: CALL_OW 272
2318: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2319: LD_ADDR_VAR 0 8
2323: PUSH
2324: LD_VAR 0 6
2328: PPUSH
2329: LD_VAR 0 4
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL_OW 273
2341: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2342: LD_VAR 0 7
2346: PPUSH
2347: LD_VAR 0 8
2351: PPUSH
2352: CALL_OW 488
2356: NOT
2357: IFFALSE 2361
// continue ;
2359: GO 2293
// if HexInfo ( _x , _y ) = 0 then
2361: LD_VAR 0 7
2365: PPUSH
2366: LD_VAR 0 8
2370: PPUSH
2371: CALL_OW 428
2375: PUSH
2376: LD_INT 0
2378: EQUAL
2379: IFFALSE 2404
// begin ComMoveXY ( unit , _x , _y ) ;
2381: LD_VAR 0 1
2385: PPUSH
2386: LD_VAR 0 7
2390: PPUSH
2391: LD_VAR 0 8
2395: PPUSH
2396: CALL_OW 111
// exit ;
2400: POP
2401: POP
2402: GO 2408
// end ; end ;
2404: GO 2293
2406: POP
2407: POP
// end ;
2408: LD_VAR 0 3
2412: RET
// export function ScanBase ( side , base_area ) ; begin
2413: LD_INT 0
2415: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2416: LD_ADDR_VAR 0 3
2420: PUSH
2421: LD_VAR 0 2
2425: PPUSH
2426: LD_INT 81
2428: PUSH
2429: LD_VAR 0 1
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 70
2442: ST_TO_ADDR
// end ;
2443: LD_VAR 0 3
2447: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2448: LD_INT 0
2450: PPUSH
2451: PPUSH
2452: PPUSH
2453: PPUSH
// result := false ;
2454: LD_ADDR_VAR 0 2
2458: PUSH
2459: LD_INT 0
2461: ST_TO_ADDR
// side := GetSide ( unit ) ;
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: LD_VAR 0 1
2471: PPUSH
2472: CALL_OW 255
2476: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 1
2486: PPUSH
2487: CALL_OW 248
2491: ST_TO_ADDR
// case nat of 1 :
2492: LD_VAR 0 4
2496: PUSH
2497: LD_INT 1
2499: DOUBLE
2500: EQUAL
2501: IFTRUE 2505
2503: GO 2516
2505: POP
// tech := tech_lassight ; 2 :
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 12
2513: ST_TO_ADDR
2514: GO 2555
2516: LD_INT 2
2518: DOUBLE
2519: EQUAL
2520: IFTRUE 2524
2522: GO 2535
2524: POP
// tech := tech_mortar ; 3 :
2525: LD_ADDR_VAR 0 5
2529: PUSH
2530: LD_INT 41
2532: ST_TO_ADDR
2533: GO 2555
2535: LD_INT 3
2537: DOUBLE
2538: EQUAL
2539: IFTRUE 2543
2541: GO 2554
2543: POP
// tech := tech_bazooka ; end ;
2544: LD_ADDR_VAR 0 5
2548: PUSH
2549: LD_INT 44
2551: ST_TO_ADDR
2552: GO 2555
2554: POP
// if Researched ( side , tech ) then
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_VAR 0 5
2564: PPUSH
2565: CALL_OW 325
2569: IFFALSE 2596
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: LD_INT 5
2578: PUSH
2579: LD_INT 8
2581: PUSH
2582: LD_INT 9
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: PUSH
2590: LD_VAR 0 4
2594: ARRAY
2595: ST_TO_ADDR
// end ;
2596: LD_VAR 0 2
2600: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2601: LD_INT 0
2603: PPUSH
2604: PPUSH
2605: PPUSH
// if not mines then
2606: LD_VAR 0 2
2610: NOT
2611: IFFALSE 2615
// exit ;
2613: GO 2759
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2615: LD_ADDR_VAR 0 5
2619: PUSH
2620: LD_INT 81
2622: PUSH
2623: LD_VAR 0 1
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: LD_INT 21
2637: PUSH
2638: LD_INT 3
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PPUSH
2653: CALL_OW 69
2657: ST_TO_ADDR
// for i in mines do
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 2
2667: PUSH
2668: FOR_IN
2669: IFFALSE 2757
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2671: LD_VAR 0 4
2675: PUSH
2676: LD_INT 1
2678: ARRAY
2679: PPUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 2
2687: ARRAY
2688: PPUSH
2689: CALL_OW 458
2693: NOT
2694: IFFALSE 2698
// continue ;
2696: GO 2668
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2698: LD_VAR 0 4
2702: PUSH
2703: LD_INT 1
2705: ARRAY
2706: PPUSH
2707: LD_VAR 0 4
2711: PUSH
2712: LD_INT 2
2714: ARRAY
2715: PPUSH
2716: CALL_OW 428
2720: PUSH
2721: LD_VAR 0 5
2725: IN
2726: IFFALSE 2755
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2728: LD_VAR 0 4
2732: PUSH
2733: LD_INT 1
2735: ARRAY
2736: PPUSH
2737: LD_VAR 0 4
2741: PUSH
2742: LD_INT 2
2744: ARRAY
2745: PPUSH
2746: LD_VAR 0 1
2750: PPUSH
2751: CALL_OW 456
// end ;
2755: GO 2668
2757: POP
2758: POP
// end ;
2759: LD_VAR 0 3
2763: RET
// export function Count ( array ) ; begin
2764: LD_INT 0
2766: PPUSH
// result := array + 0 ;
2767: LD_ADDR_VAR 0 2
2771: PUSH
2772: LD_VAR 0 1
2776: PUSH
2777: LD_INT 0
2779: PLUS
2780: ST_TO_ADDR
// end ;
2781: LD_VAR 0 2
2785: RET
// export function IsEmpty ( building ) ; begin
2786: LD_INT 0
2788: PPUSH
// if not building then
2789: LD_VAR 0 1
2793: NOT
2794: IFFALSE 2798
// exit ;
2796: GO 2841
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2798: LD_ADDR_VAR 0 2
2802: PUSH
2803: LD_VAR 0 1
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_VAR 0 1
2815: PPUSH
2816: CALL_OW 255
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 58
2827: PUSH
2828: EMPTY
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: IN
2840: ST_TO_ADDR
// end ;
2841: LD_VAR 0 2
2845: RET
// export function IsNotFull ( building ) ; var places ; begin
2846: LD_INT 0
2848: PPUSH
2849: PPUSH
// if not building then
2850: LD_VAR 0 1
2854: NOT
2855: IFFALSE 2859
// exit ;
2857: GO 2887
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2859: LD_ADDR_VAR 0 2
2863: PUSH
2864: LD_VAR 0 1
2868: PPUSH
2869: LD_INT 3
2871: PUSH
2872: LD_INT 62
2874: PUSH
2875: EMPTY
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 72
2886: ST_TO_ADDR
// end ;
2887: LD_VAR 0 2
2891: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// tmp := [ ] ;
2898: LD_ADDR_VAR 0 3
2902: PUSH
2903: EMPTY
2904: ST_TO_ADDR
// list := [ ] ;
2905: LD_ADDR_VAR 0 5
2909: PUSH
2910: EMPTY
2911: ST_TO_ADDR
// for i = 16 to 25 do
2912: LD_ADDR_VAR 0 4
2916: PUSH
2917: DOUBLE
2918: LD_INT 16
2920: DEC
2921: ST_TO_ADDR
2922: LD_INT 25
2924: PUSH
2925: FOR_TO
2926: IFFALSE 2999
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2928: LD_ADDR_VAR 0 3
2932: PUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 22
2940: PUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: CALL_OW 255
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: LD_INT 91
2957: PUSH
2958: LD_VAR 0 1
2962: PUSH
2963: LD_INT 6
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 30
2973: PUSH
2974: LD_VAR 0 4
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: LIST
2987: PUSH
2988: EMPTY
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: ADD
2996: ST_TO_ADDR
2997: GO 2925
2999: POP
3000: POP
// for i = 1 to tmp do
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_VAR 0 3
3015: PUSH
3016: FOR_TO
3017: IFFALSE 3105
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3019: LD_ADDR_VAR 0 5
3023: PUSH
3024: LD_VAR 0 5
3028: PUSH
3029: LD_VAR 0 3
3033: PUSH
3034: LD_VAR 0 4
3038: ARRAY
3039: PPUSH
3040: CALL_OW 266
3044: PUSH
3045: LD_VAR 0 3
3049: PUSH
3050: LD_VAR 0 4
3054: ARRAY
3055: PPUSH
3056: CALL_OW 250
3060: PUSH
3061: LD_VAR 0 3
3065: PUSH
3066: LD_VAR 0 4
3070: ARRAY
3071: PPUSH
3072: CALL_OW 251
3076: PUSH
3077: LD_VAR 0 3
3081: PUSH
3082: LD_VAR 0 4
3086: ARRAY
3087: PPUSH
3088: CALL_OW 254
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PUSH
3099: EMPTY
3100: LIST
3101: ADD
3102: ST_TO_ADDR
3103: GO 3016
3105: POP
3106: POP
// result := list ;
3107: LD_ADDR_VAR 0 2
3111: PUSH
3112: LD_VAR 0 5
3116: ST_TO_ADDR
// end ;
3117: LD_VAR 0 2
3121: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
3128: PPUSH
3129: PPUSH
3130: PPUSH
// if not factory then
3131: LD_VAR 0 1
3135: NOT
3136: IFFALSE 3140
// exit ;
3138: GO 3743
// if control = control_apeman then
3140: LD_VAR 0 4
3144: PUSH
3145: LD_INT 5
3147: EQUAL
3148: IFFALSE 3257
// begin tmp := UnitsInside ( factory ) ;
3150: LD_ADDR_VAR 0 8
3154: PUSH
3155: LD_VAR 0 1
3159: PPUSH
3160: CALL_OW 313
3164: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3165: LD_VAR 0 8
3169: PPUSH
3170: LD_INT 25
3172: PUSH
3173: LD_INT 12
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 72
3184: NOT
3185: IFFALSE 3195
// control := control_manual ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 1
3194: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3195: LD_ADDR_VAR 0 8
3199: PUSH
3200: LD_VAR 0 1
3204: PPUSH
3205: CALL 2892 0 1
3209: ST_TO_ADDR
// if tmp then
3210: LD_VAR 0 8
3214: IFFALSE 3257
// begin for i in tmp do
3216: LD_ADDR_VAR 0 7
3220: PUSH
3221: LD_VAR 0 8
3225: PUSH
3226: FOR_IN
3227: IFFALSE 3255
// if i [ 1 ] = b_ext_radio then
3229: LD_VAR 0 7
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PUSH
3238: LD_INT 22
3240: EQUAL
3241: IFFALSE 3253
// begin control := control_remote ;
3243: LD_ADDR_VAR 0 4
3247: PUSH
3248: LD_INT 2
3250: ST_TO_ADDR
// break ;
3251: GO 3255
// end ;
3253: GO 3226
3255: POP
3256: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3257: LD_VAR 0 1
3261: PPUSH
3262: LD_VAR 0 2
3266: PPUSH
3267: LD_VAR 0 3
3271: PPUSH
3272: LD_VAR 0 4
3276: PPUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: CALL_OW 448
3286: IFFALSE 3321
// begin result := [ chassis , engine , control , weapon ] ;
3288: LD_ADDR_VAR 0 6
3292: PUSH
3293: LD_VAR 0 2
3297: PUSH
3298: LD_VAR 0 3
3302: PUSH
3303: LD_VAR 0 4
3307: PUSH
3308: LD_VAR 0 5
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: ST_TO_ADDR
// exit ;
3319: GO 3743
// end ; _chassis := AvailableChassisList ( factory ) ;
3321: LD_ADDR_VAR 0 9
3325: PUSH
3326: LD_VAR 0 1
3330: PPUSH
3331: CALL_OW 475
3335: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3336: LD_ADDR_VAR 0 11
3340: PUSH
3341: LD_VAR 0 1
3345: PPUSH
3346: CALL_OW 476
3350: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3351: LD_ADDR_VAR 0 12
3355: PUSH
3356: LD_VAR 0 1
3360: PPUSH
3361: CALL_OW 477
3365: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3366: LD_ADDR_VAR 0 10
3370: PUSH
3371: LD_VAR 0 1
3375: PPUSH
3376: CALL_OW 478
3380: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3381: LD_VAR 0 9
3385: NOT
3386: IFTRUE 3395
3388: PUSH
3389: LD_VAR 0 11
3393: NOT
3394: OR
3395: IFTRUE 3404
3397: PUSH
3398: LD_VAR 0 12
3402: NOT
3403: OR
3404: IFTRUE 3413
3406: PUSH
3407: LD_VAR 0 10
3411: NOT
3412: OR
3413: IFFALSE 3448
// begin result := [ chassis , engine , control , weapon ] ;
3415: LD_ADDR_VAR 0 6
3419: PUSH
3420: LD_VAR 0 2
3424: PUSH
3425: LD_VAR 0 3
3429: PUSH
3430: LD_VAR 0 4
3434: PUSH
3435: LD_VAR 0 5
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: ST_TO_ADDR
// exit ;
3446: GO 3743
// end ; if not chassis in _chassis then
3448: LD_VAR 0 2
3452: PUSH
3453: LD_VAR 0 9
3457: IN
3458: NOT
3459: IFFALSE 3485
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3461: LD_ADDR_VAR 0 2
3465: PUSH
3466: LD_VAR 0 9
3470: PUSH
3471: LD_INT 1
3473: PPUSH
3474: LD_VAR 0 9
3478: PPUSH
3479: CALL_OW 12
3483: ARRAY
3484: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3485: LD_VAR 0 2
3489: PPUSH
3490: LD_VAR 0 3
3494: PPUSH
3495: CALL 3748 0 2
3499: NOT
3500: IFFALSE 3561
// repeat engine := _engine [ 1 ] ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_VAR 0 11
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3516: LD_ADDR_VAR 0 11
3520: PUSH
3521: LD_VAR 0 11
3525: PPUSH
3526: LD_INT 1
3528: PPUSH
3529: CALL_OW 3
3533: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3534: LD_VAR 0 2
3538: PPUSH
3539: LD_VAR 0 3
3543: PPUSH
3544: CALL 3748 0 2
3548: IFTRUE 3559
3550: PUSH
3551: LD_VAR 0 11
3555: PUSH
3556: EMPTY
3557: EQUAL
3558: OR
3559: IFFALSE 3502
// if not control in _control then
3561: LD_VAR 0 4
3565: PUSH
3566: LD_VAR 0 12
3570: IN
3571: NOT
3572: IFFALSE 3598
// control := _control [ rand ( 1 , _control ) ] ;
3574: LD_ADDR_VAR 0 4
3578: PUSH
3579: LD_VAR 0 12
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 12
3591: PPUSH
3592: CALL_OW 12
3596: ARRAY
3597: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3598: LD_VAR 0 2
3602: PPUSH
3603: LD_VAR 0 5
3607: PPUSH
3608: CALL 3970 0 2
3612: NOT
3613: IFFALSE 3674
// repeat weapon := _weapon [ 1 ] ;
3615: LD_ADDR_VAR 0 5
3619: PUSH
3620: LD_VAR 0 10
3624: PUSH
3625: LD_INT 1
3627: ARRAY
3628: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3629: LD_ADDR_VAR 0 10
3633: PUSH
3634: LD_VAR 0 10
3638: PPUSH
3639: LD_INT 1
3641: PPUSH
3642: CALL_OW 3
3646: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3647: LD_VAR 0 2
3651: PPUSH
3652: LD_VAR 0 5
3656: PPUSH
3657: CALL 3970 0 2
3661: IFTRUE 3672
3663: PUSH
3664: LD_VAR 0 10
3668: PUSH
3669: EMPTY
3670: EQUAL
3671: OR
3672: IFFALSE 3615
// result := [ ] ;
3674: LD_ADDR_VAR 0 6
3678: PUSH
3679: EMPTY
3680: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3681: LD_VAR 0 1
3685: PPUSH
3686: LD_VAR 0 2
3690: PPUSH
3691: LD_VAR 0 3
3695: PPUSH
3696: LD_VAR 0 4
3700: PPUSH
3701: LD_VAR 0 5
3705: PPUSH
3706: CALL_OW 448
3710: IFFALSE 3743
// result := [ chassis , engine , control , weapon ] ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_VAR 0 2
3721: PUSH
3722: LD_VAR 0 3
3726: PUSH
3727: LD_VAR 0 4
3731: PUSH
3732: LD_VAR 0 5
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: ST_TO_ADDR
// end ;
3743: LD_VAR 0 6
3747: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3748: LD_INT 0
3750: PPUSH
// if not chassis or not engine then
3751: LD_VAR 0 1
3755: NOT
3756: IFTRUE 3765
3758: PUSH
3759: LD_VAR 0 2
3763: NOT
3764: OR
3765: IFFALSE 3769
// exit ;
3767: GO 3965
// case engine of engine_solar :
3769: LD_VAR 0 2
3773: PUSH
3774: LD_INT 2
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3820
3782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 11
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: LD_INT 13
3796: PUSH
3797: LD_INT 14
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: ST_TO_ADDR
3818: GO 3949
3820: LD_INT 1
3822: DOUBLE
3823: EQUAL
3824: IFTRUE 3828
3826: GO 3890
3828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3829: LD_ADDR_VAR 0 3
3833: PUSH
3834: LD_INT 11
3836: PUSH
3837: LD_INT 12
3839: PUSH
3840: LD_INT 13
3842: PUSH
3843: LD_INT 14
3845: PUSH
3846: LD_INT 1
3848: PUSH
3849: LD_INT 2
3851: PUSH
3852: LD_INT 3
3854: PUSH
3855: LD_INT 4
3857: PUSH
3858: LD_INT 5
3860: PUSH
3861: LD_INT 21
3863: PUSH
3864: LD_INT 23
3866: PUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 24
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: ST_TO_ADDR
3888: GO 3949
3890: LD_INT 3
3892: DOUBLE
3893: EQUAL
3894: IFTRUE 3898
3896: GO 3948
3898: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: LD_INT 13
3906: PUSH
3907: LD_INT 14
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: LD_INT 4
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 22
3927: PUSH
3928: LD_INT 23
3930: PUSH
3931: LD_INT 24
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: ST_TO_ADDR
3946: GO 3949
3948: POP
// result := ( chassis in result ) ;
3949: LD_ADDR_VAR 0 3
3953: PUSH
3954: LD_VAR 0 1
3958: PUSH
3959: LD_VAR 0 3
3963: IN
3964: ST_TO_ADDR
// end ;
3965: LD_VAR 0 3
3969: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3970: LD_INT 0
3972: PPUSH
// if not chassis or not weapon then
3973: LD_VAR 0 1
3977: NOT
3978: IFTRUE 3987
3980: PUSH
3981: LD_VAR 0 2
3985: NOT
3986: OR
3987: IFFALSE 3991
// exit ;
3989: GO 5085
// case weapon of us_machine_gun :
3991: LD_VAR 0 2
3995: PUSH
3996: LD_INT 2
3998: DOUBLE
3999: EQUAL
4000: IFTRUE 4004
4002: GO 4034
4004: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 4
4021: PUSH
4022: LD_INT 5
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: ST_TO_ADDR
4032: GO 5069
4034: LD_INT 3
4036: DOUBLE
4037: EQUAL
4038: IFTRUE 4042
4040: GO 4072
4042: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4043: LD_ADDR_VAR 0 3
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: LD_INT 2
4053: PUSH
4054: LD_INT 3
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: ST_TO_ADDR
4070: GO 5069
4072: LD_INT 11
4074: DOUBLE
4075: EQUAL
4076: IFTRUE 4080
4078: GO 4110
4080: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4081: LD_ADDR_VAR 0 3
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: ST_TO_ADDR
4108: GO 5069
4110: LD_INT 4
4112: DOUBLE
4113: EQUAL
4114: IFTRUE 4118
4116: GO 4144
4118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: LD_INT 2
4126: PUSH
4127: LD_INT 3
4129: PUSH
4130: LD_INT 4
4132: PUSH
4133: LD_INT 5
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: ST_TO_ADDR
4142: GO 5069
4144: LD_INT 5
4146: DOUBLE
4147: EQUAL
4148: IFTRUE 4152
4150: GO 4178
4152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 3
4163: PUSH
4164: LD_INT 4
4166: PUSH
4167: LD_INT 5
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: ST_TO_ADDR
4176: GO 5069
4178: LD_INT 9
4180: DOUBLE
4181: EQUAL
4182: IFTRUE 4186
4184: GO 4212
4186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4187: LD_ADDR_VAR 0 3
4191: PUSH
4192: LD_INT 2
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 4
4200: PUSH
4201: LD_INT 5
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: ST_TO_ADDR
4210: GO 5069
4212: LD_INT 7
4214: DOUBLE
4215: EQUAL
4216: IFTRUE 4220
4218: GO 4246
4220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4221: LD_ADDR_VAR 0 3
4225: PUSH
4226: LD_INT 2
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 4
4234: PUSH
4235: LD_INT 5
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: ST_TO_ADDR
4244: GO 5069
4246: LD_INT 12
4248: DOUBLE
4249: EQUAL
4250: IFTRUE 4254
4252: GO 4280
4254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4255: LD_ADDR_VAR 0 3
4259: PUSH
4260: LD_INT 2
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: LD_INT 4
4268: PUSH
4269: LD_INT 5
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: ST_TO_ADDR
4278: GO 5069
4280: LD_INT 13
4282: DOUBLE
4283: EQUAL
4284: IFTRUE 4288
4286: GO 4314
4288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4289: LD_ADDR_VAR 0 3
4293: PUSH
4294: LD_INT 2
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 4
4302: PUSH
4303: LD_INT 5
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: ST_TO_ADDR
4312: GO 5069
4314: LD_INT 14
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4340
4322: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 4
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
4338: GO 5069
4340: LD_INT 6
4342: DOUBLE
4343: EQUAL
4344: IFTRUE 4348
4346: GO 4366
4348: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4349: LD_ADDR_VAR 0 3
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: ST_TO_ADDR
4364: GO 5069
4366: LD_INT 10
4368: DOUBLE
4369: EQUAL
4370: IFTRUE 4374
4372: GO 4392
4374: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: LD_INT 4
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: ST_TO_ADDR
4390: GO 5069
4392: LD_INT 22
4394: DOUBLE
4395: EQUAL
4396: IFTRUE 4400
4398: GO 4426
4400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: LD_INT 11
4408: PUSH
4409: LD_INT 12
4411: PUSH
4412: LD_INT 13
4414: PUSH
4415: LD_INT 14
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: ST_TO_ADDR
4424: GO 5069
4426: LD_INT 23
4428: DOUBLE
4429: EQUAL
4430: IFTRUE 4434
4432: GO 4460
4434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4435: LD_ADDR_VAR 0 3
4439: PUSH
4440: LD_INT 11
4442: PUSH
4443: LD_INT 12
4445: PUSH
4446: LD_INT 13
4448: PUSH
4449: LD_INT 14
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: ST_TO_ADDR
4458: GO 5069
4460: LD_INT 24
4462: DOUBLE
4463: EQUAL
4464: IFTRUE 4468
4466: GO 4494
4468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 11
4476: PUSH
4477: LD_INT 12
4479: PUSH
4480: LD_INT 13
4482: PUSH
4483: LD_INT 14
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: ST_TO_ADDR
4492: GO 5069
4494: LD_INT 30
4496: DOUBLE
4497: EQUAL
4498: IFTRUE 4502
4500: GO 4528
4502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_INT 11
4510: PUSH
4511: LD_INT 12
4513: PUSH
4514: LD_INT 13
4516: PUSH
4517: LD_INT 14
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: ST_TO_ADDR
4526: GO 5069
4528: LD_INT 25
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4554
4536: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4537: LD_ADDR_VAR 0 3
4541: PUSH
4542: LD_INT 13
4544: PUSH
4545: LD_INT 14
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: ST_TO_ADDR
4552: GO 5069
4554: LD_INT 27
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4580
4562: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: LD_INT 13
4570: PUSH
4571: LD_INT 14
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: ST_TO_ADDR
4578: GO 5069
4580: LD_INT 92
4582: DOUBLE
4583: EQUAL
4584: IFTRUE 4588
4586: GO 4614
4588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4589: LD_ADDR_VAR 0 3
4593: PUSH
4594: LD_INT 11
4596: PUSH
4597: LD_INT 12
4599: PUSH
4600: LD_INT 13
4602: PUSH
4603: LD_INT 14
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: ST_TO_ADDR
4612: GO 5069
4614: LD_INT 28
4616: DOUBLE
4617: EQUAL
4618: IFTRUE 4622
4620: GO 4640
4622: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4623: LD_ADDR_VAR 0 3
4627: PUSH
4628: LD_INT 13
4630: PUSH
4631: LD_INT 14
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: ST_TO_ADDR
4638: GO 5069
4640: LD_INT 29
4642: DOUBLE
4643: EQUAL
4644: IFTRUE 4648
4646: GO 4666
4648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4649: LD_ADDR_VAR 0 3
4653: PUSH
4654: LD_INT 13
4656: PUSH
4657: LD_INT 14
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: ST_TO_ADDR
4664: GO 5069
4666: LD_INT 31
4668: DOUBLE
4669: EQUAL
4670: IFTRUE 4674
4672: GO 4692
4674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4675: LD_ADDR_VAR 0 3
4679: PUSH
4680: LD_INT 13
4682: PUSH
4683: LD_INT 14
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: ST_TO_ADDR
4690: GO 5069
4692: LD_INT 26
4694: DOUBLE
4695: EQUAL
4696: IFTRUE 4700
4698: GO 4718
4700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4701: LD_ADDR_VAR 0 3
4705: PUSH
4706: LD_INT 13
4708: PUSH
4709: LD_INT 14
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: ST_TO_ADDR
4716: GO 5069
4718: LD_INT 42
4720: DOUBLE
4721: EQUAL
4722: IFTRUE 4726
4724: GO 4752
4726: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4727: LD_ADDR_VAR 0 3
4731: PUSH
4732: LD_INT 21
4734: PUSH
4735: LD_INT 22
4737: PUSH
4738: LD_INT 23
4740: PUSH
4741: LD_INT 24
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
4750: GO 5069
4752: LD_INT 43
4754: DOUBLE
4755: EQUAL
4756: IFTRUE 4760
4758: GO 4786
4760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4761: LD_ADDR_VAR 0 3
4765: PUSH
4766: LD_INT 21
4768: PUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 23
4774: PUSH
4775: LD_INT 24
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: ST_TO_ADDR
4784: GO 5069
4786: LD_INT 44
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4794
4792: GO 4820
4794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 21
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 23
4808: PUSH
4809: LD_INT 24
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: ST_TO_ADDR
4818: GO 5069
4820: LD_INT 45
4822: DOUBLE
4823: EQUAL
4824: IFTRUE 4828
4826: GO 4854
4828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4829: LD_ADDR_VAR 0 3
4833: PUSH
4834: LD_INT 21
4836: PUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 23
4842: PUSH
4843: LD_INT 24
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: ST_TO_ADDR
4852: GO 5069
4854: LD_INT 49
4856: DOUBLE
4857: EQUAL
4858: IFTRUE 4862
4860: GO 4888
4862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4863: LD_ADDR_VAR 0 3
4867: PUSH
4868: LD_INT 21
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 23
4876: PUSH
4877: LD_INT 24
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: ST_TO_ADDR
4886: GO 5069
4888: LD_INT 51
4890: DOUBLE
4891: EQUAL
4892: IFTRUE 4896
4894: GO 4922
4896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4897: LD_ADDR_VAR 0 3
4901: PUSH
4902: LD_INT 21
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 23
4910: PUSH
4911: LD_INT 24
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: ST_TO_ADDR
4920: GO 5069
4922: LD_INT 52
4924: DOUBLE
4925: EQUAL
4926: IFTRUE 4930
4928: GO 4956
4930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: LD_INT 21
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 23
4944: PUSH
4945: LD_INT 24
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: ST_TO_ADDR
4954: GO 5069
4956: LD_INT 53
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 4982
4964: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4965: LD_ADDR_VAR 0 3
4969: PUSH
4970: LD_INT 23
4972: PUSH
4973: LD_INT 24
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: ST_TO_ADDR
4980: GO 5069
4982: LD_INT 46
4984: DOUBLE
4985: EQUAL
4986: IFTRUE 4990
4988: GO 5008
4990: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4991: LD_ADDR_VAR 0 3
4995: PUSH
4996: LD_INT 23
4998: PUSH
4999: LD_INT 24
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: ST_TO_ADDR
5006: GO 5069
5008: LD_INT 47
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5016
5014: GO 5034
5016: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
5017: LD_ADDR_VAR 0 3
5021: PUSH
5022: LD_INT 23
5024: PUSH
5025: LD_INT 24
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: ST_TO_ADDR
5032: GO 5069
5034: LD_INT 98
5036: DOUBLE
5037: EQUAL
5038: IFTRUE 5042
5040: GO 5068
5042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5043: LD_ADDR_VAR 0 3
5047: PUSH
5048: LD_INT 21
5050: PUSH
5051: LD_INT 22
5053: PUSH
5054: LD_INT 23
5056: PUSH
5057: LD_INT 24
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: ST_TO_ADDR
5066: GO 5069
5068: POP
// result := ( chassis in result ) ;
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_VAR 0 1
5078: PUSH
5079: LD_VAR 0 3
5083: IN
5084: ST_TO_ADDR
// end ;
5085: LD_VAR 0 3
5089: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5090: LD_INT 0
5092: PPUSH
5093: PPUSH
5094: PPUSH
5095: PPUSH
5096: PPUSH
5097: PPUSH
5098: PPUSH
// result := array ;
5099: LD_ADDR_VAR 0 5
5103: PUSH
5104: LD_VAR 0 1
5108: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5109: LD_VAR 0 1
5113: NOT
5114: IFTRUE 5123
5116: PUSH
5117: LD_VAR 0 2
5121: NOT
5122: OR
5123: IFTRUE 5132
5125: PUSH
5126: LD_VAR 0 3
5130: NOT
5131: OR
5132: IFTRUE 5146
5134: PUSH
5135: LD_VAR 0 2
5139: PUSH
5140: LD_VAR 0 1
5144: GREATER
5145: OR
5146: IFTRUE 5160
5148: PUSH
5149: LD_VAR 0 3
5153: PUSH
5154: LD_VAR 0 1
5158: GREATER
5159: OR
5160: IFFALSE 5164
// exit ;
5162: GO 5460
// if direction then
5164: LD_VAR 0 4
5168: IFFALSE 5232
// begin d := 1 ;
5170: LD_ADDR_VAR 0 9
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if i_from > i_to then
5178: LD_VAR 0 2
5182: PUSH
5183: LD_VAR 0 3
5187: GREATER
5188: IFFALSE 5214
// length := ( array - i_from ) + i_to else
5190: LD_ADDR_VAR 0 11
5194: PUSH
5195: LD_VAR 0 1
5199: PUSH
5200: LD_VAR 0 2
5204: MINUS
5205: PUSH
5206: LD_VAR 0 3
5210: PLUS
5211: ST_TO_ADDR
5212: GO 5230
// length := i_to - i_from ;
5214: LD_ADDR_VAR 0 11
5218: PUSH
5219: LD_VAR 0 3
5223: PUSH
5224: LD_VAR 0 2
5228: MINUS
5229: ST_TO_ADDR
// end else
5230: GO 5293
// begin d := - 1 ;
5232: LD_ADDR_VAR 0 9
5236: PUSH
5237: LD_INT 1
5239: NEG
5240: ST_TO_ADDR
// if i_from > i_to then
5241: LD_VAR 0 2
5245: PUSH
5246: LD_VAR 0 3
5250: GREATER
5251: IFFALSE 5271
// length := i_from - i_to else
5253: LD_ADDR_VAR 0 11
5257: PUSH
5258: LD_VAR 0 2
5262: PUSH
5263: LD_VAR 0 3
5267: MINUS
5268: ST_TO_ADDR
5269: GO 5293
// length := ( array - i_to ) + i_from ;
5271: LD_ADDR_VAR 0 11
5275: PUSH
5276: LD_VAR 0 1
5280: PUSH
5281: LD_VAR 0 3
5285: MINUS
5286: PUSH
5287: LD_VAR 0 2
5291: PLUS
5292: ST_TO_ADDR
// end ; if not length then
5293: LD_VAR 0 11
5297: NOT
5298: IFFALSE 5302
// exit ;
5300: GO 5460
// tmp := array ;
5302: LD_ADDR_VAR 0 10
5306: PUSH
5307: LD_VAR 0 1
5311: ST_TO_ADDR
// for i = 1 to length do
5312: LD_ADDR_VAR 0 6
5316: PUSH
5317: DOUBLE
5318: LD_INT 1
5320: DEC
5321: ST_TO_ADDR
5322: LD_VAR 0 11
5326: PUSH
5327: FOR_TO
5328: IFFALSE 5448
// begin for j = 1 to array do
5330: LD_ADDR_VAR 0 7
5334: PUSH
5335: DOUBLE
5336: LD_INT 1
5338: DEC
5339: ST_TO_ADDR
5340: LD_VAR 0 1
5344: PUSH
5345: FOR_TO
5346: IFFALSE 5434
// begin k := j + d ;
5348: LD_ADDR_VAR 0 8
5352: PUSH
5353: LD_VAR 0 7
5357: PUSH
5358: LD_VAR 0 9
5362: PLUS
5363: ST_TO_ADDR
// if k > array then
5364: LD_VAR 0 8
5368: PUSH
5369: LD_VAR 0 1
5373: GREATER
5374: IFFALSE 5384
// k := 1 ;
5376: LD_ADDR_VAR 0 8
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// if not k then
5384: LD_VAR 0 8
5388: NOT
5389: IFFALSE 5401
// k := array ;
5391: LD_ADDR_VAR 0 8
5395: PUSH
5396: LD_VAR 0 1
5400: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5401: LD_ADDR_VAR 0 10
5405: PUSH
5406: LD_VAR 0 10
5410: PPUSH
5411: LD_VAR 0 8
5415: PPUSH
5416: LD_VAR 0 1
5420: PUSH
5421: LD_VAR 0 7
5425: ARRAY
5426: PPUSH
5427: CALL_OW 1
5431: ST_TO_ADDR
// end ;
5432: GO 5345
5434: POP
5435: POP
// array := tmp ;
5436: LD_ADDR_VAR 0 1
5440: PUSH
5441: LD_VAR 0 10
5445: ST_TO_ADDR
// end ;
5446: GO 5327
5448: POP
5449: POP
// result := array ;
5450: LD_ADDR_VAR 0 5
5454: PUSH
5455: LD_VAR 0 1
5459: ST_TO_ADDR
// end ;
5460: LD_VAR 0 5
5464: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5465: LD_INT 0
5467: PPUSH
5468: PPUSH
// result := 0 ;
5469: LD_ADDR_VAR 0 3
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// if not array or not value in array then
5477: LD_VAR 0 1
5481: NOT
5482: IFTRUE 5497
5484: PUSH
5485: LD_VAR 0 2
5489: PUSH
5490: LD_VAR 0 1
5494: IN
5495: NOT
5496: OR
5497: IFFALSE 5501
// exit ;
5499: GO 5555
// for i = 1 to array do
5501: LD_ADDR_VAR 0 4
5505: PUSH
5506: DOUBLE
5507: LD_INT 1
5509: DEC
5510: ST_TO_ADDR
5511: LD_VAR 0 1
5515: PUSH
5516: FOR_TO
5517: IFFALSE 5553
// if value = array [ i ] then
5519: LD_VAR 0 2
5523: PUSH
5524: LD_VAR 0 1
5528: PUSH
5529: LD_VAR 0 4
5533: ARRAY
5534: EQUAL
5535: IFFALSE 5551
// begin result := i ;
5537: LD_ADDR_VAR 0 3
5541: PUSH
5542: LD_VAR 0 4
5546: ST_TO_ADDR
// exit ;
5547: POP
5548: POP
5549: GO 5555
// end ;
5551: GO 5516
5553: POP
5554: POP
// end ;
5555: LD_VAR 0 3
5559: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5560: LD_INT 0
5562: PPUSH
// vc_chassis := chassis ;
5563: LD_ADDR_OWVAR 37
5567: PUSH
5568: LD_VAR 0 1
5572: ST_TO_ADDR
// vc_engine := engine ;
5573: LD_ADDR_OWVAR 39
5577: PUSH
5578: LD_VAR 0 2
5582: ST_TO_ADDR
// vc_control := control ;
5583: LD_ADDR_OWVAR 38
5587: PUSH
5588: LD_VAR 0 3
5592: ST_TO_ADDR
// vc_weapon := weapon ;
5593: LD_ADDR_OWVAR 40
5597: PUSH
5598: LD_VAR 0 4
5602: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5603: LD_ADDR_OWVAR 41
5607: PUSH
5608: LD_VAR 0 5
5612: ST_TO_ADDR
// end ;
5613: LD_VAR 0 6
5617: RET
// export function WantPlant ( unit ) ; var task ; begin
5618: LD_INT 0
5620: PPUSH
5621: PPUSH
// result := false ;
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: LD_INT 0
5629: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_VAR 0 1
5639: PPUSH
5640: CALL_OW 437
5644: ST_TO_ADDR
// if task then
5645: LD_VAR 0 3
5649: IFFALSE 5677
// if task [ 1 ] [ 1 ] = p then
5651: LD_VAR 0 3
5655: PUSH
5656: LD_INT 1
5658: ARRAY
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PUSH
5664: LD_STRING p
5666: EQUAL
5667: IFFALSE 5677
// result := true ;
5669: LD_ADDR_VAR 0 2
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// end ;
5677: LD_VAR 0 2
5681: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
5686: PPUSH
5687: PPUSH
// if pos < 1 then
5688: LD_VAR 0 2
5692: PUSH
5693: LD_INT 1
5695: LESS
5696: IFFALSE 5700
// exit ;
5698: GO 6003
// if pos = 1 then
5700: LD_VAR 0 2
5704: PUSH
5705: LD_INT 1
5707: EQUAL
5708: IFFALSE 5741
// result := Replace ( arr , pos [ 1 ] , value ) else
5710: LD_ADDR_VAR 0 4
5714: PUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: LD_VAR 0 2
5724: PUSH
5725: LD_INT 1
5727: ARRAY
5728: PPUSH
5729: LD_VAR 0 3
5733: PPUSH
5734: CALL_OW 1
5738: ST_TO_ADDR
5739: GO 6003
// begin tmp := arr ;
5741: LD_ADDR_VAR 0 6
5745: PUSH
5746: LD_VAR 0 1
5750: ST_TO_ADDR
// s_arr := [ tmp ] ;
5751: LD_ADDR_VAR 0 7
5755: PUSH
5756: LD_VAR 0 6
5760: PUSH
5761: EMPTY
5762: LIST
5763: ST_TO_ADDR
// for i = 1 to pos - 1 do
5764: LD_ADDR_VAR 0 5
5768: PUSH
5769: DOUBLE
5770: LD_INT 1
5772: DEC
5773: ST_TO_ADDR
5774: LD_VAR 0 2
5778: PUSH
5779: LD_INT 1
5781: MINUS
5782: PUSH
5783: FOR_TO
5784: IFFALSE 5829
// begin tmp := tmp [ pos [ i ] ] ;
5786: LD_ADDR_VAR 0 6
5790: PUSH
5791: LD_VAR 0 6
5795: PUSH
5796: LD_VAR 0 2
5800: PUSH
5801: LD_VAR 0 5
5805: ARRAY
5806: ARRAY
5807: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5808: LD_ADDR_VAR 0 7
5812: PUSH
5813: LD_VAR 0 7
5817: PUSH
5818: LD_VAR 0 6
5822: PUSH
5823: EMPTY
5824: LIST
5825: ADD
5826: ST_TO_ADDR
// end ;
5827: GO 5783
5829: POP
5830: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5831: LD_ADDR_VAR 0 6
5835: PUSH
5836: LD_VAR 0 6
5840: PPUSH
5841: LD_VAR 0 2
5845: PUSH
5846: LD_VAR 0 2
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 3
5856: PPUSH
5857: CALL_OW 1
5861: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5862: LD_ADDR_VAR 0 7
5866: PUSH
5867: LD_VAR 0 7
5871: PPUSH
5872: LD_VAR 0 7
5876: PPUSH
5877: LD_VAR 0 6
5881: PPUSH
5882: CALL_OW 1
5886: ST_TO_ADDR
// for i = s_arr downto 2 do
5887: LD_ADDR_VAR 0 5
5891: PUSH
5892: DOUBLE
5893: LD_VAR 0 7
5897: INC
5898: ST_TO_ADDR
5899: LD_INT 2
5901: PUSH
5902: FOR_DOWNTO
5903: IFFALSE 5987
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5905: LD_ADDR_VAR 0 6
5909: PUSH
5910: LD_VAR 0 7
5914: PUSH
5915: LD_VAR 0 5
5919: PUSH
5920: LD_INT 1
5922: MINUS
5923: ARRAY
5924: PPUSH
5925: LD_VAR 0 2
5929: PUSH
5930: LD_VAR 0 5
5934: PUSH
5935: LD_INT 1
5937: MINUS
5938: ARRAY
5939: PPUSH
5940: LD_VAR 0 7
5944: PUSH
5945: LD_VAR 0 5
5949: ARRAY
5950: PPUSH
5951: CALL_OW 1
5955: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5956: LD_ADDR_VAR 0 7
5960: PUSH
5961: LD_VAR 0 7
5965: PPUSH
5966: LD_VAR 0 5
5970: PUSH
5971: LD_INT 1
5973: MINUS
5974: PPUSH
5975: LD_VAR 0 6
5979: PPUSH
5980: CALL_OW 1
5984: ST_TO_ADDR
// end ;
5985: GO 5902
5987: POP
5988: POP
// result := s_arr [ 1 ] ;
5989: LD_ADDR_VAR 0 4
5993: PUSH
5994: LD_VAR 0 7
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: ST_TO_ADDR
// end ; end ;
6003: LD_VAR 0 4
6007: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
// if not list then
6012: LD_VAR 0 1
6016: NOT
6017: IFFALSE 6021
// exit ;
6019: GO 6112
// i := list [ pos1 ] ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: LD_VAR 0 1
6030: PUSH
6031: LD_VAR 0 2
6035: ARRAY
6036: ST_TO_ADDR
// if not i then
6037: LD_VAR 0 5
6041: NOT
6042: IFFALSE 6046
// exit ;
6044: GO 6112
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6046: LD_ADDR_VAR 0 1
6050: PUSH
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_VAR 0 1
6065: PUSH
6066: LD_VAR 0 3
6070: ARRAY
6071: PPUSH
6072: CALL_OW 1
6076: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6077: LD_ADDR_VAR 0 1
6081: PUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: LD_VAR 0 3
6091: PPUSH
6092: LD_VAR 0 5
6096: PPUSH
6097: CALL_OW 1
6101: ST_TO_ADDR
// result := list ;
6102: LD_ADDR_VAR 0 4
6106: PUSH
6107: LD_VAR 0 1
6111: ST_TO_ADDR
// end ;
6112: LD_VAR 0 4
6116: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6117: LD_INT 0
6119: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6120: LD_ADDR_VAR 0 5
6124: PUSH
6125: LD_VAR 0 1
6129: PPUSH
6130: CALL_OW 250
6134: PPUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: CALL_OW 251
6144: PPUSH
6145: LD_VAR 0 2
6149: PPUSH
6150: LD_VAR 0 3
6154: PPUSH
6155: LD_VAR 0 4
6159: PPUSH
6160: CALL 6542 0 5
6164: ST_TO_ADDR
// end ;
6165: LD_VAR 0 5
6169: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6170: LD_INT 0
6172: PPUSH
6173: PPUSH
6174: PPUSH
6175: PPUSH
// if not list or not unit then
6176: LD_VAR 0 2
6180: NOT
6181: IFTRUE 6190
6183: PUSH
6184: LD_VAR 0 1
6188: NOT
6189: OR
6190: IFFALSE 6194
// exit ;
6192: GO 6537
// result := [ ] ;
6194: LD_ADDR_VAR 0 5
6198: PUSH
6199: EMPTY
6200: ST_TO_ADDR
// for i in list do
6201: LD_ADDR_VAR 0 6
6205: PUSH
6206: LD_VAR 0 2
6210: PUSH
6211: FOR_IN
6212: IFFALSE 6430
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6214: LD_ADDR_VAR 0 8
6218: PUSH
6219: LD_VAR 0 1
6223: PPUSH
6224: LD_VAR 0 6
6228: PUSH
6229: LD_INT 1
6231: ARRAY
6232: PPUSH
6233: LD_VAR 0 6
6237: PUSH
6238: LD_INT 2
6240: ARRAY
6241: PPUSH
6242: CALL_OW 297
6246: ST_TO_ADDR
// if not Count ( result ) then
6247: LD_VAR 0 5
6251: PPUSH
6252: CALL 2764 0 1
6256: NOT
6257: IFFALSE 6290
// begin result := Join ( result , [ i , tmp ] ) ;
6259: LD_ADDR_VAR 0 5
6263: PUSH
6264: LD_VAR 0 5
6268: PPUSH
6269: LD_VAR 0 6
6273: PUSH
6274: LD_VAR 0 8
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL 38740 0 2
6287: ST_TO_ADDR
// continue ;
6288: GO 6211
// end ; if result [ result ] [ 2 ] <= tmp then
6290: LD_VAR 0 5
6294: PUSH
6295: LD_VAR 0 5
6299: ARRAY
6300: PUSH
6301: LD_INT 2
6303: ARRAY
6304: PUSH
6305: LD_VAR 0 8
6309: LESSEQUAL
6310: IFFALSE 6343
// result := Join ( result , [ i , tmp ] ) else
6312: LD_ADDR_VAR 0 5
6316: PUSH
6317: LD_VAR 0 5
6321: PPUSH
6322: LD_VAR 0 6
6326: PUSH
6327: LD_VAR 0 8
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PPUSH
6336: CALL 38740 0 2
6340: ST_TO_ADDR
6341: GO 6428
// begin for j := 1 to Count ( result ) do
6343: LD_ADDR_VAR 0 7
6347: PUSH
6348: DOUBLE
6349: LD_INT 1
6351: DEC
6352: ST_TO_ADDR
6353: LD_VAR 0 5
6357: PPUSH
6358: CALL 2764 0 1
6362: PUSH
6363: FOR_TO
6364: IFFALSE 6426
// begin if tmp < result [ j ] [ 2 ] then
6366: LD_VAR 0 8
6370: PUSH
6371: LD_VAR 0 5
6375: PUSH
6376: LD_VAR 0 7
6380: ARRAY
6381: PUSH
6382: LD_INT 2
6384: ARRAY
6385: LESS
6386: IFFALSE 6424
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6388: LD_ADDR_VAR 0 5
6392: PUSH
6393: LD_VAR 0 5
6397: PPUSH
6398: LD_VAR 0 7
6402: PPUSH
6403: LD_VAR 0 6
6407: PUSH
6408: LD_VAR 0 8
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PPUSH
6417: CALL_OW 2
6421: ST_TO_ADDR
// break ;
6422: GO 6426
// end ; end ;
6424: GO 6363
6426: POP
6427: POP
// end ; end ;
6428: GO 6211
6430: POP
6431: POP
// if result and not asc then
6432: LD_VAR 0 5
6436: IFFALSE 6445
6438: PUSH
6439: LD_VAR 0 3
6443: NOT
6444: AND
6445: IFFALSE 6462
// result := ReverseArray ( result ) ;
6447: LD_ADDR_VAR 0 5
6451: PUSH
6452: LD_VAR 0 5
6456: PPUSH
6457: CALL 33820 0 1
6461: ST_TO_ADDR
// tmp := [ ] ;
6462: LD_ADDR_VAR 0 8
6466: PUSH
6467: EMPTY
6468: ST_TO_ADDR
// if mode then
6469: LD_VAR 0 4
6473: IFFALSE 6537
// begin for i := 1 to result do
6475: LD_ADDR_VAR 0 6
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_VAR 0 5
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6525
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6493: LD_ADDR_VAR 0 8
6497: PUSH
6498: LD_VAR 0 8
6502: PPUSH
6503: LD_VAR 0 5
6507: PUSH
6508: LD_VAR 0 6
6512: ARRAY
6513: PUSH
6514: LD_INT 1
6516: ARRAY
6517: PPUSH
6518: CALL 38740 0 2
6522: ST_TO_ADDR
6523: GO 6490
6525: POP
6526: POP
// result := tmp ;
6527: LD_ADDR_VAR 0 5
6531: PUSH
6532: LD_VAR 0 8
6536: ST_TO_ADDR
// end ; end ;
6537: LD_VAR 0 5
6541: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6542: LD_INT 0
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
// if not list then
6548: LD_VAR 0 3
6552: NOT
6553: IFFALSE 6557
// exit ;
6555: GO 6947
// result := [ ] ;
6557: LD_ADDR_VAR 0 6
6561: PUSH
6562: EMPTY
6563: ST_TO_ADDR
// for i in list do
6564: LD_ADDR_VAR 0 7
6568: PUSH
6569: LD_VAR 0 3
6573: PUSH
6574: FOR_IN
6575: IFFALSE 6777
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6577: LD_ADDR_VAR 0 9
6581: PUSH
6582: LD_VAR 0 7
6586: PPUSH
6587: LD_VAR 0 1
6591: PPUSH
6592: LD_VAR 0 2
6596: PPUSH
6597: CALL_OW 297
6601: ST_TO_ADDR
// if not result then
6602: LD_VAR 0 6
6606: NOT
6607: IFFALSE 6633
// result := [ [ i , tmp ] ] else
6609: LD_ADDR_VAR 0 6
6613: PUSH
6614: LD_VAR 0 7
6618: PUSH
6619: LD_VAR 0 9
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: ST_TO_ADDR
6631: GO 6775
// begin if result [ result ] [ 2 ] <= tmp then
6633: LD_VAR 0 6
6637: PUSH
6638: LD_VAR 0 6
6642: ARRAY
6643: PUSH
6644: LD_INT 2
6646: ARRAY
6647: PUSH
6648: LD_VAR 0 9
6652: LESSEQUAL
6653: IFFALSE 6695
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6655: LD_ADDR_VAR 0 6
6659: PUSH
6660: LD_VAR 0 6
6664: PPUSH
6665: LD_VAR 0 6
6669: PUSH
6670: LD_INT 1
6672: PLUS
6673: PPUSH
6674: LD_VAR 0 7
6678: PUSH
6679: LD_VAR 0 9
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PPUSH
6688: CALL_OW 2
6692: ST_TO_ADDR
6693: GO 6775
// for j := 1 to result do
6695: LD_ADDR_VAR 0 8
6699: PUSH
6700: DOUBLE
6701: LD_INT 1
6703: DEC
6704: ST_TO_ADDR
6705: LD_VAR 0 6
6709: PUSH
6710: FOR_TO
6711: IFFALSE 6773
// begin if tmp < result [ j ] [ 2 ] then
6713: LD_VAR 0 9
6717: PUSH
6718: LD_VAR 0 6
6722: PUSH
6723: LD_VAR 0 8
6727: ARRAY
6728: PUSH
6729: LD_INT 2
6731: ARRAY
6732: LESS
6733: IFFALSE 6771
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6735: LD_ADDR_VAR 0 6
6739: PUSH
6740: LD_VAR 0 6
6744: PPUSH
6745: LD_VAR 0 8
6749: PPUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 9
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PPUSH
6764: CALL_OW 2
6768: ST_TO_ADDR
// break ;
6769: GO 6773
// end ; end ;
6771: GO 6710
6773: POP
6774: POP
// end ; end ;
6775: GO 6574
6777: POP
6778: POP
// if result and not asc then
6779: LD_VAR 0 6
6783: IFFALSE 6792
6785: PUSH
6786: LD_VAR 0 4
6790: NOT
6791: AND
6792: IFFALSE 6867
// begin tmp := result ;
6794: LD_ADDR_VAR 0 9
6798: PUSH
6799: LD_VAR 0 6
6803: ST_TO_ADDR
// for i = tmp downto 1 do
6804: LD_ADDR_VAR 0 7
6808: PUSH
6809: DOUBLE
6810: LD_VAR 0 9
6814: INC
6815: ST_TO_ADDR
6816: LD_INT 1
6818: PUSH
6819: FOR_DOWNTO
6820: IFFALSE 6865
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6822: LD_ADDR_VAR 0 6
6826: PUSH
6827: LD_VAR 0 6
6831: PPUSH
6832: LD_VAR 0 9
6836: PUSH
6837: LD_VAR 0 7
6841: MINUS
6842: PUSH
6843: LD_INT 1
6845: PLUS
6846: PPUSH
6847: LD_VAR 0 9
6851: PUSH
6852: LD_VAR 0 7
6856: ARRAY
6857: PPUSH
6858: CALL_OW 1
6862: ST_TO_ADDR
6863: GO 6819
6865: POP
6866: POP
// end ; tmp := [ ] ;
6867: LD_ADDR_VAR 0 9
6871: PUSH
6872: EMPTY
6873: ST_TO_ADDR
// if mode then
6874: LD_VAR 0 5
6878: IFFALSE 6947
// begin for i = 1 to result do
6880: LD_ADDR_VAR 0 7
6884: PUSH
6885: DOUBLE
6886: LD_INT 1
6888: DEC
6889: ST_TO_ADDR
6890: LD_VAR 0 6
6894: PUSH
6895: FOR_TO
6896: IFFALSE 6935
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6898: LD_ADDR_VAR 0 9
6902: PUSH
6903: LD_VAR 0 9
6907: PPUSH
6908: LD_VAR 0 7
6912: PPUSH
6913: LD_VAR 0 6
6917: PUSH
6918: LD_VAR 0 7
6922: ARRAY
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: CALL_OW 1
6932: ST_TO_ADDR
6933: GO 6895
6935: POP
6936: POP
// result := tmp ;
6937: LD_ADDR_VAR 0 6
6941: PUSH
6942: LD_VAR 0 9
6946: ST_TO_ADDR
// end ; end ;
6947: LD_VAR 0 6
6951: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6952: LD_INT 0
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6960: LD_ADDR_VAR 0 5
6964: PUSH
6965: LD_INT 0
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: LD_INT 0
6973: PUSH
6974: EMPTY
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: ST_TO_ADDR
// if not x or not y then
6982: LD_VAR 0 2
6986: NOT
6987: IFTRUE 6996
6989: PUSH
6990: LD_VAR 0 3
6994: NOT
6995: OR
6996: IFFALSE 7000
// exit ;
6998: GO 8656
// if not range then
7000: LD_VAR 0 4
7004: NOT
7005: IFFALSE 7015
// range := 10 ;
7007: LD_ADDR_VAR 0 4
7011: PUSH
7012: LD_INT 10
7014: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7015: LD_ADDR_VAR 0 8
7019: PUSH
7020: LD_INT 81
7022: PUSH
7023: LD_VAR 0 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 92
7034: PUSH
7035: LD_VAR 0 2
7039: PUSH
7040: LD_VAR 0 3
7044: PUSH
7045: LD_VAR 0 4
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: LD_INT 21
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 69
7082: ST_TO_ADDR
// if not tmp then
7083: LD_VAR 0 8
7087: NOT
7088: IFFALSE 7092
// exit ;
7090: GO 8656
// for i in tmp do
7092: LD_ADDR_VAR 0 6
7096: PUSH
7097: LD_VAR 0 8
7101: PUSH
7102: FOR_IN
7103: IFFALSE 8631
// begin points := [ 0 , 0 , 0 ] ;
7105: LD_ADDR_VAR 0 9
7109: PUSH
7110: LD_INT 0
7112: PUSH
7113: LD_INT 0
7115: PUSH
7116: LD_INT 0
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: ST_TO_ADDR
// bpoints := 1 ;
7124: LD_ADDR_VAR 0 10
7128: PUSH
7129: LD_INT 1
7131: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7132: LD_VAR 0 6
7136: PPUSH
7137: CALL_OW 247
7141: PUSH
7142: LD_INT 1
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7150
7148: GO 7732
7150: POP
// begin if GetClass ( i ) = 1 then
7151: LD_VAR 0 6
7155: PPUSH
7156: CALL_OW 257
7160: PUSH
7161: LD_INT 1
7163: EQUAL
7164: IFFALSE 7185
// points := [ 10 , 5 , 3 ] ;
7166: LD_ADDR_VAR 0 9
7170: PUSH
7171: LD_INT 10
7173: PUSH
7174: LD_INT 5
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7185: LD_VAR 0 6
7189: PPUSH
7190: CALL_OW 257
7194: PUSH
7195: LD_INT 2
7197: PUSH
7198: LD_INT 3
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: IN
7209: IFFALSE 7230
// points := [ 3 , 2 , 1 ] ;
7211: LD_ADDR_VAR 0 9
7215: PUSH
7216: LD_INT 3
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7230: LD_VAR 0 6
7234: PPUSH
7235: CALL_OW 257
7239: PUSH
7240: LD_INT 5
7242: EQUAL
7243: IFFALSE 7264
// points := [ 130 , 5 , 2 ] ;
7245: LD_ADDR_VAR 0 9
7249: PUSH
7250: LD_INT 130
7252: PUSH
7253: LD_INT 5
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: LIST
7263: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7264: LD_VAR 0 6
7268: PPUSH
7269: CALL_OW 257
7273: PUSH
7274: LD_INT 8
7276: EQUAL
7277: IFFALSE 7298
// points := [ 35 , 35 , 30 ] ;
7279: LD_ADDR_VAR 0 9
7283: PUSH
7284: LD_INT 35
7286: PUSH
7287: LD_INT 35
7289: PUSH
7290: LD_INT 30
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7298: LD_VAR 0 6
7302: PPUSH
7303: CALL_OW 257
7307: PUSH
7308: LD_INT 9
7310: EQUAL
7311: IFFALSE 7332
// points := [ 20 , 55 , 40 ] ;
7313: LD_ADDR_VAR 0 9
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 55
7323: PUSH
7324: LD_INT 40
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7332: LD_VAR 0 6
7336: PPUSH
7337: CALL_OW 257
7341: PUSH
7342: LD_INT 12
7344: PUSH
7345: LD_INT 16
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: IN
7352: IFFALSE 7373
// points := [ 5 , 3 , 2 ] ;
7354: LD_ADDR_VAR 0 9
7358: PUSH
7359: LD_INT 5
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: LD_INT 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7373: LD_VAR 0 6
7377: PPUSH
7378: CALL_OW 257
7382: PUSH
7383: LD_INT 17
7385: EQUAL
7386: IFFALSE 7407
// points := [ 100 , 50 , 75 ] ;
7388: LD_ADDR_VAR 0 9
7392: PUSH
7393: LD_INT 100
7395: PUSH
7396: LD_INT 50
7398: PUSH
7399: LD_INT 75
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7407: LD_VAR 0 6
7411: PPUSH
7412: CALL_OW 257
7416: PUSH
7417: LD_INT 15
7419: EQUAL
7420: IFFALSE 7441
// points := [ 10 , 5 , 3 ] ;
7422: LD_ADDR_VAR 0 9
7426: PUSH
7427: LD_INT 10
7429: PUSH
7430: LD_INT 5
7432: PUSH
7433: LD_INT 3
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7441: LD_VAR 0 6
7445: PPUSH
7446: CALL_OW 257
7450: PUSH
7451: LD_INT 14
7453: EQUAL
7454: IFFALSE 7475
// points := [ 10 , 0 , 0 ] ;
7456: LD_ADDR_VAR 0 9
7460: PUSH
7461: LD_INT 10
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: LD_INT 0
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7475: LD_VAR 0 6
7479: PPUSH
7480: CALL_OW 257
7484: PUSH
7485: LD_INT 11
7487: EQUAL
7488: IFFALSE 7509
// points := [ 30 , 10 , 5 ] ;
7490: LD_ADDR_VAR 0 9
7494: PUSH
7495: LD_INT 30
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 5
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7509: LD_VAR 0 1
7513: PPUSH
7514: LD_INT 5
7516: PPUSH
7517: CALL_OW 321
7521: PUSH
7522: LD_INT 2
7524: EQUAL
7525: IFFALSE 7542
// bpoints := bpoints * 1.8 ;
7527: LD_ADDR_VAR 0 10
7531: PUSH
7532: LD_VAR 0 10
7536: PUSH
7537: LD_REAL  1.80000000000000E+0000
7540: MUL
7541: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7542: LD_VAR 0 6
7546: PPUSH
7547: CALL_OW 257
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: LD_INT 3
7560: PUSH
7561: LD_INT 4
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: IN
7570: IFFALSE 7590
7572: PUSH
7573: LD_VAR 0 1
7577: PPUSH
7578: LD_INT 51
7580: PPUSH
7581: CALL_OW 321
7585: PUSH
7586: LD_INT 2
7588: EQUAL
7589: AND
7590: IFFALSE 7607
// bpoints := bpoints * 1.2 ;
7592: LD_ADDR_VAR 0 10
7596: PUSH
7597: LD_VAR 0 10
7601: PUSH
7602: LD_REAL  1.20000000000000E+0000
7605: MUL
7606: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7607: LD_VAR 0 6
7611: PPUSH
7612: CALL_OW 257
7616: PUSH
7617: LD_INT 5
7619: PUSH
7620: LD_INT 7
7622: PUSH
7623: LD_INT 9
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: IN
7631: IFFALSE 7651
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: LD_INT 52
7641: PPUSH
7642: CALL_OW 321
7646: PUSH
7647: LD_INT 2
7649: EQUAL
7650: AND
7651: IFFALSE 7668
// bpoints := bpoints * 1.5 ;
7653: LD_ADDR_VAR 0 10
7657: PUSH
7658: LD_VAR 0 10
7662: PUSH
7663: LD_REAL  1.50000000000000E+0000
7666: MUL
7667: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7668: LD_VAR 0 1
7672: PPUSH
7673: LD_INT 66
7675: PPUSH
7676: CALL_OW 321
7680: PUSH
7681: LD_INT 2
7683: EQUAL
7684: IFFALSE 7701
// bpoints := bpoints * 1.1 ;
7686: LD_ADDR_VAR 0 10
7690: PUSH
7691: LD_VAR 0 10
7695: PUSH
7696: LD_REAL  1.10000000000000E+0000
7699: MUL
7700: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7701: LD_ADDR_VAR 0 10
7705: PUSH
7706: LD_VAR 0 10
7710: PUSH
7711: LD_VAR 0 6
7715: PPUSH
7716: LD_INT 1
7718: PPUSH
7719: CALL_OW 259
7723: PUSH
7724: LD_REAL  1.15000000000000E+0000
7727: MUL
7728: MUL
7729: ST_TO_ADDR
// end ; unit_vehicle :
7730: GO 8560
7732: LD_INT 2
7734: DOUBLE
7735: EQUAL
7736: IFTRUE 7740
7738: GO 8548
7740: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7741: LD_VAR 0 6
7745: PPUSH
7746: CALL_OW 264
7750: PUSH
7751: LD_INT 2
7753: PUSH
7754: LD_INT 42
7756: PUSH
7757: LD_INT 24
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: IN
7765: IFFALSE 7786
// points := [ 25 , 5 , 3 ] ;
7767: LD_ADDR_VAR 0 9
7771: PUSH
7772: LD_INT 25
7774: PUSH
7775: LD_INT 5
7777: PUSH
7778: LD_INT 3
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7786: LD_VAR 0 6
7790: PPUSH
7791: CALL_OW 264
7795: PUSH
7796: LD_INT 4
7798: PUSH
7799: LD_INT 43
7801: PUSH
7802: LD_INT 25
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: IN
7810: IFFALSE 7831
// points := [ 40 , 15 , 5 ] ;
7812: LD_ADDR_VAR 0 9
7816: PUSH
7817: LD_INT 40
7819: PUSH
7820: LD_INT 15
7822: PUSH
7823: LD_INT 5
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7831: LD_VAR 0 6
7835: PPUSH
7836: CALL_OW 264
7840: PUSH
7841: LD_INT 3
7843: PUSH
7844: LD_INT 23
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: IN
7851: IFFALSE 7872
// points := [ 7 , 25 , 8 ] ;
7853: LD_ADDR_VAR 0 9
7857: PUSH
7858: LD_INT 7
7860: PUSH
7861: LD_INT 25
7863: PUSH
7864: LD_INT 8
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7872: LD_VAR 0 6
7876: PPUSH
7877: CALL_OW 264
7881: PUSH
7882: LD_INT 5
7884: PUSH
7885: LD_INT 27
7887: PUSH
7888: LD_INT 44
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: LIST
7895: IN
7896: IFFALSE 7917
// points := [ 14 , 50 , 16 ] ;
7898: LD_ADDR_VAR 0 9
7902: PUSH
7903: LD_INT 14
7905: PUSH
7906: LD_INT 50
7908: PUSH
7909: LD_INT 16
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 264
7926: PUSH
7927: LD_INT 6
7929: PUSH
7930: LD_INT 46
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: IN
7937: IFFALSE 7958
// points := [ 32 , 120 , 70 ] ;
7939: LD_ADDR_VAR 0 9
7943: PUSH
7944: LD_INT 32
7946: PUSH
7947: LD_INT 120
7949: PUSH
7950: LD_INT 70
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7958: LD_VAR 0 6
7962: PPUSH
7963: CALL_OW 264
7967: PUSH
7968: LD_INT 7
7970: PUSH
7971: LD_INT 28
7973: PUSH
7974: LD_INT 45
7976: PUSH
7977: LD_INT 92
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: IN
7986: IFFALSE 8007
// points := [ 35 , 20 , 45 ] ;
7988: LD_ADDR_VAR 0 9
7992: PUSH
7993: LD_INT 35
7995: PUSH
7996: LD_INT 20
7998: PUSH
7999: LD_INT 45
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8007: LD_VAR 0 6
8011: PPUSH
8012: CALL_OW 264
8016: PUSH
8017: LD_INT 47
8019: PUSH
8020: EMPTY
8021: LIST
8022: IN
8023: IFFALSE 8044
// points := [ 67 , 45 , 75 ] ;
8025: LD_ADDR_VAR 0 9
8029: PUSH
8030: LD_INT 67
8032: PUSH
8033: LD_INT 45
8035: PUSH
8036: LD_INT 75
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8044: LD_VAR 0 6
8048: PPUSH
8049: CALL_OW 264
8053: PUSH
8054: LD_INT 26
8056: PUSH
8057: EMPTY
8058: LIST
8059: IN
8060: IFFALSE 8081
// points := [ 120 , 30 , 80 ] ;
8062: LD_ADDR_VAR 0 9
8066: PUSH
8067: LD_INT 120
8069: PUSH
8070: LD_INT 30
8072: PUSH
8073: LD_INT 80
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: LIST
8080: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8081: LD_VAR 0 6
8085: PPUSH
8086: CALL_OW 264
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: EMPTY
8095: LIST
8096: IN
8097: IFFALSE 8118
// points := [ 40 , 1 , 1 ] ;
8099: LD_ADDR_VAR 0 9
8103: PUSH
8104: LD_INT 40
8106: PUSH
8107: LD_INT 1
8109: PUSH
8110: LD_INT 1
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8118: LD_VAR 0 6
8122: PPUSH
8123: CALL_OW 264
8127: PUSH
8128: LD_INT 29
8130: PUSH
8131: EMPTY
8132: LIST
8133: IN
8134: IFFALSE 8155
// points := [ 70 , 200 , 400 ] ;
8136: LD_ADDR_VAR 0 9
8140: PUSH
8141: LD_INT 70
8143: PUSH
8144: LD_INT 200
8146: PUSH
8147: LD_INT 400
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8155: LD_VAR 0 6
8159: PPUSH
8160: CALL_OW 264
8164: PUSH
8165: LD_INT 14
8167: PUSH
8168: LD_INT 53
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: IN
8175: IFFALSE 8196
// points := [ 40 , 10 , 20 ] ;
8177: LD_ADDR_VAR 0 9
8181: PUSH
8182: LD_INT 40
8184: PUSH
8185: LD_INT 10
8187: PUSH
8188: LD_INT 20
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8196: LD_VAR 0 6
8200: PPUSH
8201: CALL_OW 264
8205: PUSH
8206: LD_INT 9
8208: PUSH
8209: EMPTY
8210: LIST
8211: IN
8212: IFFALSE 8233
// points := [ 5 , 70 , 20 ] ;
8214: LD_ADDR_VAR 0 9
8218: PUSH
8219: LD_INT 5
8221: PUSH
8222: LD_INT 70
8224: PUSH
8225: LD_INT 20
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8233: LD_VAR 0 6
8237: PPUSH
8238: CALL_OW 264
8242: PUSH
8243: LD_INT 10
8245: PUSH
8246: EMPTY
8247: LIST
8248: IN
8249: IFFALSE 8270
// points := [ 35 , 110 , 70 ] ;
8251: LD_ADDR_VAR 0 9
8255: PUSH
8256: LD_INT 35
8258: PUSH
8259: LD_INT 110
8261: PUSH
8262: LD_INT 70
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8270: LD_VAR 0 6
8274: PPUSH
8275: CALL_OW 265
8279: PUSH
8280: LD_INT 25
8282: EQUAL
8283: IFFALSE 8304
// points := [ 80 , 65 , 100 ] ;
8285: LD_ADDR_VAR 0 9
8289: PUSH
8290: LD_INT 80
8292: PUSH
8293: LD_INT 65
8295: PUSH
8296: LD_INT 100
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8304: LD_VAR 0 6
8308: PPUSH
8309: CALL_OW 263
8313: PUSH
8314: LD_INT 1
8316: EQUAL
8317: IFFALSE 8352
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8319: LD_ADDR_VAR 0 10
8323: PUSH
8324: LD_VAR 0 10
8328: PUSH
8329: LD_VAR 0 6
8333: PPUSH
8334: CALL_OW 311
8338: PPUSH
8339: LD_INT 3
8341: PPUSH
8342: CALL_OW 259
8346: PUSH
8347: LD_INT 4
8349: MUL
8350: MUL
8351: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8352: LD_VAR 0 6
8356: PPUSH
8357: CALL_OW 263
8361: PUSH
8362: LD_INT 2
8364: EQUAL
8365: IFFALSE 8416
// begin j := IsControledBy ( i ) ;
8367: LD_ADDR_VAR 0 7
8371: PUSH
8372: LD_VAR 0 6
8376: PPUSH
8377: CALL_OW 312
8381: ST_TO_ADDR
// if j then
8382: LD_VAR 0 7
8386: IFFALSE 8416
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8388: LD_ADDR_VAR 0 10
8392: PUSH
8393: LD_VAR 0 10
8397: PUSH
8398: LD_VAR 0 7
8402: PPUSH
8403: LD_INT 3
8405: PPUSH
8406: CALL_OW 259
8410: PUSH
8411: LD_INT 3
8413: MUL
8414: MUL
8415: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8416: LD_VAR 0 6
8420: PPUSH
8421: CALL_OW 264
8425: PUSH
8426: LD_INT 5
8428: PUSH
8429: LD_INT 6
8431: PUSH
8432: LD_INT 46
8434: PUSH
8435: LD_INT 44
8437: PUSH
8438: LD_INT 47
8440: PUSH
8441: LD_INT 45
8443: PUSH
8444: LD_INT 28
8446: PUSH
8447: LD_INT 7
8449: PUSH
8450: LD_INT 27
8452: PUSH
8453: LD_INT 29
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: IN
8468: IFFALSE 8488
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_INT 52
8478: PPUSH
8479: CALL_OW 321
8483: PUSH
8484: LD_INT 2
8486: EQUAL
8487: AND
8488: IFFALSE 8505
// bpoints := bpoints * 1.2 ;
8490: LD_ADDR_VAR 0 10
8494: PUSH
8495: LD_VAR 0 10
8499: PUSH
8500: LD_REAL  1.20000000000000E+0000
8503: MUL
8504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8505: LD_VAR 0 6
8509: PPUSH
8510: CALL_OW 264
8514: PUSH
8515: LD_INT 6
8517: PUSH
8518: LD_INT 46
8520: PUSH
8521: LD_INT 47
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: IN
8529: IFFALSE 8546
// bpoints := bpoints * 1.2 ;
8531: LD_ADDR_VAR 0 10
8535: PUSH
8536: LD_VAR 0 10
8540: PUSH
8541: LD_REAL  1.20000000000000E+0000
8544: MUL
8545: ST_TO_ADDR
// end ; unit_building :
8546: GO 8560
8548: LD_INT 3
8550: DOUBLE
8551: EQUAL
8552: IFTRUE 8556
8554: GO 8559
8556: POP
// ; end ;
8557: GO 8560
8559: POP
// for j = 1 to 3 do
8560: LD_ADDR_VAR 0 7
8564: PUSH
8565: DOUBLE
8566: LD_INT 1
8568: DEC
8569: ST_TO_ADDR
8570: LD_INT 3
8572: PUSH
8573: FOR_TO
8574: IFFALSE 8627
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8576: LD_ADDR_VAR 0 5
8580: PUSH
8581: LD_VAR 0 5
8585: PPUSH
8586: LD_VAR 0 7
8590: PPUSH
8591: LD_VAR 0 5
8595: PUSH
8596: LD_VAR 0 7
8600: ARRAY
8601: PUSH
8602: LD_VAR 0 9
8606: PUSH
8607: LD_VAR 0 7
8611: ARRAY
8612: PUSH
8613: LD_VAR 0 10
8617: MUL
8618: PLUS
8619: PPUSH
8620: CALL_OW 1
8624: ST_TO_ADDR
8625: GO 8573
8627: POP
8628: POP
// end ;
8629: GO 7102
8631: POP
8632: POP
// result := Replace ( result , 4 , tmp ) ;
8633: LD_ADDR_VAR 0 5
8637: PUSH
8638: LD_VAR 0 5
8642: PPUSH
8643: LD_INT 4
8645: PPUSH
8646: LD_VAR 0 8
8650: PPUSH
8651: CALL_OW 1
8655: ST_TO_ADDR
// end ;
8656: LD_VAR 0 5
8660: RET
// export function DangerAtRange ( unit , range ) ; begin
8661: LD_INT 0
8663: PPUSH
// if not unit then
8664: LD_VAR 0 1
8668: NOT
8669: IFFALSE 8673
// exit ;
8671: GO 8718
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8673: LD_ADDR_VAR 0 3
8677: PUSH
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL_OW 255
8687: PPUSH
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 250
8697: PPUSH
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 251
8707: PPUSH
8708: LD_VAR 0 2
8712: PPUSH
8713: CALL 6952 0 4
8717: ST_TO_ADDR
// end ;
8718: LD_VAR 0 3
8722: RET
// export function DangerInArea ( side , area ) ; begin
8723: LD_INT 0
8725: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8726: LD_ADDR_VAR 0 3
8730: PUSH
8731: LD_VAR 0 2
8735: PPUSH
8736: LD_INT 81
8738: PUSH
8739: LD_VAR 0 1
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 70
8752: ST_TO_ADDR
// end ;
8753: LD_VAR 0 3
8757: RET
// export function IsExtension ( b ) ; begin
8758: LD_INT 0
8760: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_VAR 0 1
8770: PUSH
8771: LD_INT 23
8773: PUSH
8774: LD_INT 20
8776: PUSH
8777: LD_INT 22
8779: PUSH
8780: LD_INT 17
8782: PUSH
8783: LD_INT 24
8785: PUSH
8786: LD_INT 21
8788: PUSH
8789: LD_INT 19
8791: PUSH
8792: LD_INT 16
8794: PUSH
8795: LD_INT 25
8797: PUSH
8798: LD_INT 18
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: IN
8813: ST_TO_ADDR
// end ;
8814: LD_VAR 0 2
8818: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8819: LD_INT 0
8821: PPUSH
8822: PPUSH
8823: PPUSH
// result := [ ] ;
8824: LD_ADDR_VAR 0 4
8828: PUSH
8829: EMPTY
8830: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8831: LD_ADDR_VAR 0 5
8835: PUSH
8836: LD_VAR 0 2
8840: PPUSH
8841: LD_INT 21
8843: PUSH
8844: LD_INT 3
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 70
8855: ST_TO_ADDR
// if not tmp then
8856: LD_VAR 0 5
8860: NOT
8861: IFFALSE 8865
// exit ;
8863: GO 8929
// if checkLink then
8865: LD_VAR 0 3
8869: IFFALSE 8919
// begin for i in tmp do
8871: LD_ADDR_VAR 0 6
8875: PUSH
8876: LD_VAR 0 5
8880: PUSH
8881: FOR_IN
8882: IFFALSE 8917
// if GetBase ( i ) <> base then
8884: LD_VAR 0 6
8888: PPUSH
8889: CALL_OW 274
8893: PUSH
8894: LD_VAR 0 1
8898: NONEQUAL
8899: IFFALSE 8915
// ComLinkToBase ( base , i ) ;
8901: LD_VAR 0 1
8905: PPUSH
8906: LD_VAR 0 6
8910: PPUSH
8911: CALL_OW 169
8915: GO 8881
8917: POP
8918: POP
// end ; result := tmp ;
8919: LD_ADDR_VAR 0 4
8923: PUSH
8924: LD_VAR 0 5
8928: ST_TO_ADDR
// end ;
8929: LD_VAR 0 4
8933: RET
// export function ComComplete ( units , b ) ; var i ; begin
8934: LD_INT 0
8936: PPUSH
8937: PPUSH
// if not units then
8938: LD_VAR 0 1
8942: NOT
8943: IFFALSE 8947
// exit ;
8945: GO 9037
// for i in units do
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_VAR 0 1
8956: PUSH
8957: FOR_IN
8958: IFFALSE 9035
// if BuildingStatus ( b ) = bs_build then
8960: LD_VAR 0 2
8964: PPUSH
8965: CALL_OW 461
8969: PUSH
8970: LD_INT 1
8972: EQUAL
8973: IFFALSE 9033
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8975: LD_VAR 0 4
8979: PPUSH
8980: LD_STRING h
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 250
8992: PUSH
8993: LD_VAR 0 2
8997: PPUSH
8998: CALL_OW 251
9002: PUSH
9003: LD_VAR 0 2
9007: PUSH
9008: LD_INT 0
9010: PUSH
9011: LD_INT 0
9013: PUSH
9014: LD_INT 0
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: PPUSH
9029: CALL_OW 446
9033: GO 8957
9035: POP
9036: POP
// end ;
9037: LD_VAR 0 3
9041: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9042: LD_INT 0
9044: PPUSH
9045: PPUSH
9046: PPUSH
9047: PPUSH
9048: PPUSH
9049: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9050: LD_VAR 0 1
9054: NOT
9055: IFTRUE 9072
9057: PUSH
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 263
9067: PUSH
9068: LD_INT 2
9070: NONEQUAL
9071: OR
9072: IFFALSE 9076
// exit ;
9074: GO 9392
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9076: LD_ADDR_VAR 0 6
9080: PUSH
9081: LD_INT 22
9083: PUSH
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 36
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 34
9113: PUSH
9114: LD_INT 31
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PPUSH
9130: CALL_OW 69
9134: ST_TO_ADDR
// if not tmp then
9135: LD_VAR 0 6
9139: NOT
9140: IFFALSE 9144
// exit ;
9142: GO 9392
// result := [ ] ;
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: EMPTY
9150: ST_TO_ADDR
// for i in tmp do
9151: LD_ADDR_VAR 0 3
9155: PUSH
9156: LD_VAR 0 6
9160: PUSH
9161: FOR_IN
9162: IFFALSE 9233
// begin t := UnitsInside ( i ) ;
9164: LD_ADDR_VAR 0 4
9168: PUSH
9169: LD_VAR 0 3
9173: PPUSH
9174: CALL_OW 313
9178: ST_TO_ADDR
// if t then
9179: LD_VAR 0 4
9183: IFFALSE 9231
// for j in t do
9185: LD_ADDR_VAR 0 7
9189: PUSH
9190: LD_VAR 0 4
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9229
// result := Replace ( result , result + 1 , j ) ;
9198: LD_ADDR_VAR 0 2
9202: PUSH
9203: LD_VAR 0 2
9207: PPUSH
9208: LD_VAR 0 2
9212: PUSH
9213: LD_INT 1
9215: PLUS
9216: PPUSH
9217: LD_VAR 0 7
9221: PPUSH
9222: CALL_OW 1
9226: ST_TO_ADDR
9227: GO 9195
9229: POP
9230: POP
// end ;
9231: GO 9161
9233: POP
9234: POP
// if not result then
9235: LD_VAR 0 2
9239: NOT
9240: IFFALSE 9244
// exit ;
9242: GO 9392
// mech := result [ 1 ] ;
9244: LD_ADDR_VAR 0 5
9248: PUSH
9249: LD_VAR 0 2
9253: PUSH
9254: LD_INT 1
9256: ARRAY
9257: ST_TO_ADDR
// if result > 1 then
9258: LD_VAR 0 2
9262: PUSH
9263: LD_INT 1
9265: GREATER
9266: IFFALSE 9378
// begin for i = 2 to result do
9268: LD_ADDR_VAR 0 3
9272: PUSH
9273: DOUBLE
9274: LD_INT 2
9276: DEC
9277: ST_TO_ADDR
9278: LD_VAR 0 2
9282: PUSH
9283: FOR_TO
9284: IFFALSE 9376
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9286: LD_ADDR_VAR 0 4
9290: PUSH
9291: LD_VAR 0 2
9295: PUSH
9296: LD_VAR 0 3
9300: ARRAY
9301: PPUSH
9302: LD_INT 3
9304: PPUSH
9305: CALL_OW 259
9309: PUSH
9310: LD_VAR 0 2
9314: PUSH
9315: LD_VAR 0 3
9319: ARRAY
9320: PPUSH
9321: CALL_OW 432
9325: MINUS
9326: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9327: LD_VAR 0 4
9331: PUSH
9332: LD_VAR 0 5
9336: PPUSH
9337: LD_INT 3
9339: PPUSH
9340: CALL_OW 259
9344: PUSH
9345: LD_VAR 0 5
9349: PPUSH
9350: CALL_OW 432
9354: MINUS
9355: GREATEREQUAL
9356: IFFALSE 9374
// mech := result [ i ] ;
9358: LD_ADDR_VAR 0 5
9362: PUSH
9363: LD_VAR 0 2
9367: PUSH
9368: LD_VAR 0 3
9372: ARRAY
9373: ST_TO_ADDR
// end ;
9374: GO 9283
9376: POP
9377: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9378: LD_VAR 0 1
9382: PPUSH
9383: LD_VAR 0 5
9387: PPUSH
9388: CALL_OW 135
// end ;
9392: LD_VAR 0 2
9396: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9397: LD_INT 0
9399: PPUSH
9400: PPUSH
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
9406: PPUSH
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
9411: PPUSH
// result := [ ] ;
9412: LD_ADDR_VAR 0 7
9416: PUSH
9417: EMPTY
9418: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9419: LD_VAR 0 1
9423: PPUSH
9424: CALL_OW 266
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: LD_INT 1
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: IN
9439: NOT
9440: IFFALSE 9444
// exit ;
9442: GO 11084
// if name then
9444: LD_VAR 0 3
9448: IFFALSE 9464
// SetBName ( base_dep , name ) ;
9450: LD_VAR 0 1
9454: PPUSH
9455: LD_VAR 0 3
9459: PPUSH
9460: CALL_OW 500
// base := GetBase ( base_dep ) ;
9464: LD_ADDR_VAR 0 15
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 274
9478: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9479: LD_ADDR_VAR 0 16
9483: PUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 255
9493: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9494: LD_ADDR_VAR 0 17
9498: PUSH
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 248
9508: ST_TO_ADDR
// if sources then
9509: LD_VAR 0 5
9513: IFFALSE 9560
// for i = 1 to 3 do
9515: LD_ADDR_VAR 0 8
9519: PUSH
9520: DOUBLE
9521: LD_INT 1
9523: DEC
9524: ST_TO_ADDR
9525: LD_INT 3
9527: PUSH
9528: FOR_TO
9529: IFFALSE 9558
// AddResourceType ( base , i , sources [ i ] ) ;
9531: LD_VAR 0 15
9535: PPUSH
9536: LD_VAR 0 8
9540: PPUSH
9541: LD_VAR 0 5
9545: PUSH
9546: LD_VAR 0 8
9550: ARRAY
9551: PPUSH
9552: CALL_OW 276
9556: GO 9528
9558: POP
9559: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9560: LD_ADDR_VAR 0 18
9564: PUSH
9565: LD_VAR 0 15
9569: PPUSH
9570: LD_VAR 0 2
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL 8819 0 3
9582: ST_TO_ADDR
// InitHc ;
9583: CALL_OW 19
// InitUc ;
9587: CALL_OW 18
// uc_side := side ;
9591: LD_ADDR_OWVAR 20
9595: PUSH
9596: LD_VAR 0 16
9600: ST_TO_ADDR
// uc_nation := nation ;
9601: LD_ADDR_OWVAR 21
9605: PUSH
9606: LD_VAR 0 17
9610: ST_TO_ADDR
// if buildings then
9611: LD_VAR 0 18
9615: IFFALSE 10943
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9617: LD_ADDR_VAR 0 19
9621: PUSH
9622: LD_VAR 0 18
9626: PPUSH
9627: LD_INT 2
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 29
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 30
9642: PUSH
9643: LD_INT 30
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: PPUSH
9655: CALL_OW 72
9659: ST_TO_ADDR
// if tmp then
9660: LD_VAR 0 19
9664: IFFALSE 9712
// for i in tmp do
9666: LD_ADDR_VAR 0 8
9670: PUSH
9671: LD_VAR 0 19
9675: PUSH
9676: FOR_IN
9677: IFFALSE 9710
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9679: LD_VAR 0 8
9683: PPUSH
9684: CALL_OW 250
9688: PPUSH
9689: LD_VAR 0 8
9693: PPUSH
9694: CALL_OW 251
9698: PPUSH
9699: LD_VAR 0 16
9703: PPUSH
9704: CALL_OW 441
9708: GO 9676
9710: POP
9711: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9712: LD_VAR 0 18
9716: PPUSH
9717: LD_INT 2
9719: PUSH
9720: LD_INT 30
9722: PUSH
9723: LD_INT 32
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 30
9732: PUSH
9733: LD_INT 33
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 72
9749: IFFALSE 9837
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9751: LD_ADDR_VAR 0 8
9755: PUSH
9756: LD_VAR 0 18
9760: PPUSH
9761: LD_INT 2
9763: PUSH
9764: LD_INT 30
9766: PUSH
9767: LD_INT 32
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 30
9776: PUSH
9777: LD_INT 33
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 72
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9835
// begin if not GetBWeapon ( i ) then
9797: LD_VAR 0 8
9801: PPUSH
9802: CALL_OW 269
9806: NOT
9807: IFFALSE 9833
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9809: LD_VAR 0 8
9813: PPUSH
9814: LD_VAR 0 8
9818: PPUSH
9819: LD_VAR 0 2
9823: PPUSH
9824: CALL 11089 0 2
9828: PPUSH
9829: CALL_OW 431
// end ;
9833: GO 9794
9835: POP
9836: POP
// end ; for i = 1 to personel do
9837: LD_ADDR_VAR 0 8
9841: PUSH
9842: DOUBLE
9843: LD_INT 1
9845: DEC
9846: ST_TO_ADDR
9847: LD_VAR 0 6
9851: PUSH
9852: FOR_TO
9853: IFFALSE 10923
// begin if i > 4 then
9855: LD_VAR 0 8
9859: PUSH
9860: LD_INT 4
9862: GREATER
9863: IFFALSE 9867
// break ;
9865: GO 10923
// case i of 1 :
9867: LD_VAR 0 8
9871: PUSH
9872: LD_INT 1
9874: DOUBLE
9875: EQUAL
9876: IFTRUE 9880
9878: GO 9960
9880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9881: LD_ADDR_VAR 0 12
9885: PUSH
9886: LD_VAR 0 18
9890: PPUSH
9891: LD_INT 22
9893: PUSH
9894: LD_VAR 0 16
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 58
9905: PUSH
9906: EMPTY
9907: LIST
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: LD_INT 30
9914: PUSH
9915: LD_INT 32
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 4
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 30
9934: PUSH
9935: LD_INT 5
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: PPUSH
9953: CALL_OW 72
9957: ST_TO_ADDR
9958: GO 10182
9960: LD_INT 2
9962: DOUBLE
9963: EQUAL
9964: IFTRUE 9968
9966: GO 10030
9968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9969: LD_ADDR_VAR 0 12
9973: PUSH
9974: LD_VAR 0 18
9978: PPUSH
9979: LD_INT 22
9981: PUSH
9982: LD_VAR 0 16
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 0
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 30
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 72
10027: ST_TO_ADDR
10028: GO 10182
10030: LD_INT 3
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10100
10038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10039: LD_ADDR_VAR 0 12
10043: PUSH
10044: LD_VAR 0 18
10048: PPUSH
10049: LD_INT 22
10051: PUSH
10052: LD_VAR 0 16
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 2
10063: PUSH
10064: LD_INT 30
10066: PUSH
10067: LD_INT 2
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: LD_INT 30
10076: PUSH
10077: LD_INT 3
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 72
10097: ST_TO_ADDR
10098: GO 10182
10100: LD_INT 4
10102: DOUBLE
10103: EQUAL
10104: IFTRUE 10108
10106: GO 10181
10108: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10109: LD_ADDR_VAR 0 12
10113: PUSH
10114: LD_VAR 0 18
10118: PPUSH
10119: LD_INT 22
10121: PUSH
10122: LD_VAR 0 16
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 2
10133: PUSH
10134: LD_INT 30
10136: PUSH
10137: LD_INT 6
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 30
10146: PUSH
10147: LD_INT 7
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 30
10156: PUSH
10157: LD_INT 8
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 72
10178: ST_TO_ADDR
10179: GO 10182
10181: POP
// if i = 1 then
10182: LD_VAR 0 8
10186: PUSH
10187: LD_INT 1
10189: EQUAL
10190: IFFALSE 10301
// begin tmp := [ ] ;
10192: LD_ADDR_VAR 0 19
10196: PUSH
10197: EMPTY
10198: ST_TO_ADDR
// for j in f do
10199: LD_ADDR_VAR 0 9
10203: PUSH
10204: LD_VAR 0 12
10208: PUSH
10209: FOR_IN
10210: IFFALSE 10283
// if GetBType ( j ) = b_bunker then
10212: LD_VAR 0 9
10216: PPUSH
10217: CALL_OW 266
10221: PUSH
10222: LD_INT 32
10224: EQUAL
10225: IFFALSE 10252
// tmp := Insert ( tmp , 1 , j ) else
10227: LD_ADDR_VAR 0 19
10231: PUSH
10232: LD_VAR 0 19
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: LD_VAR 0 9
10244: PPUSH
10245: CALL_OW 2
10249: ST_TO_ADDR
10250: GO 10281
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10252: LD_ADDR_VAR 0 19
10256: PUSH
10257: LD_VAR 0 19
10261: PPUSH
10262: LD_VAR 0 19
10266: PUSH
10267: LD_INT 1
10269: PLUS
10270: PPUSH
10271: LD_VAR 0 9
10275: PPUSH
10276: CALL_OW 2
10280: ST_TO_ADDR
10281: GO 10209
10283: POP
10284: POP
// if tmp then
10285: LD_VAR 0 19
10289: IFFALSE 10301
// f := tmp ;
10291: LD_ADDR_VAR 0 12
10295: PUSH
10296: LD_VAR 0 19
10300: ST_TO_ADDR
// end ; x := personel [ i ] ;
10301: LD_ADDR_VAR 0 13
10305: PUSH
10306: LD_VAR 0 6
10310: PUSH
10311: LD_VAR 0 8
10315: ARRAY
10316: ST_TO_ADDR
// if x = - 1 then
10317: LD_VAR 0 13
10321: PUSH
10322: LD_INT 1
10324: NEG
10325: EQUAL
10326: IFFALSE 10537
// begin for j in f do
10328: LD_ADDR_VAR 0 9
10332: PUSH
10333: LD_VAR 0 12
10337: PUSH
10338: FOR_IN
10339: IFFALSE 10533
// repeat InitHc ;
10341: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10345: LD_VAR 0 9
10349: PPUSH
10350: CALL_OW 266
10354: PUSH
10355: LD_INT 5
10357: EQUAL
10358: IFFALSE 10428
// begin if UnitsInside ( j ) < 3 then
10360: LD_VAR 0 9
10364: PPUSH
10365: CALL_OW 313
10369: PUSH
10370: LD_INT 3
10372: LESS
10373: IFFALSE 10409
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10375: LD_INT 0
10377: PPUSH
10378: LD_INT 5
10380: PUSH
10381: LD_INT 8
10383: PUSH
10384: LD_INT 9
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: PUSH
10392: LD_VAR 0 17
10396: ARRAY
10397: PPUSH
10398: LD_VAR 0 4
10402: PPUSH
10403: CALL_OW 380
10407: GO 10426
// PrepareHuman ( false , i , skill ) ;
10409: LD_INT 0
10411: PPUSH
10412: LD_VAR 0 8
10416: PPUSH
10417: LD_VAR 0 4
10421: PPUSH
10422: CALL_OW 380
// end else
10426: GO 10445
// PrepareHuman ( false , i , skill ) ;
10428: LD_INT 0
10430: PPUSH
10431: LD_VAR 0 8
10435: PPUSH
10436: LD_VAR 0 4
10440: PPUSH
10441: CALL_OW 380
// un := CreateHuman ;
10445: LD_ADDR_VAR 0 14
10449: PUSH
10450: CALL_OW 44
10454: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10455: LD_ADDR_VAR 0 7
10459: PUSH
10460: LD_VAR 0 7
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: LD_VAR 0 14
10472: PPUSH
10473: CALL_OW 2
10477: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10478: LD_VAR 0 14
10482: PPUSH
10483: LD_VAR 0 9
10487: PPUSH
10488: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10492: LD_VAR 0 9
10496: PPUSH
10497: CALL_OW 313
10501: PUSH
10502: LD_INT 6
10504: EQUAL
10505: IFTRUE 10529
10507: PUSH
10508: LD_VAR 0 9
10512: PPUSH
10513: CALL_OW 266
10517: PUSH
10518: LD_INT 32
10520: PUSH
10521: LD_INT 31
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: IN
10528: OR
10529: IFFALSE 10341
10531: GO 10338
10533: POP
10534: POP
// end else
10535: GO 10921
// for j = 1 to x do
10537: LD_ADDR_VAR 0 9
10541: PUSH
10542: DOUBLE
10543: LD_INT 1
10545: DEC
10546: ST_TO_ADDR
10547: LD_VAR 0 13
10551: PUSH
10552: FOR_TO
10553: IFFALSE 10919
// begin InitHc ;
10555: CALL_OW 19
// if not f then
10559: LD_VAR 0 12
10563: NOT
10564: IFFALSE 10653
// begin PrepareHuman ( false , i , skill ) ;
10566: LD_INT 0
10568: PPUSH
10569: LD_VAR 0 8
10573: PPUSH
10574: LD_VAR 0 4
10578: PPUSH
10579: CALL_OW 380
// un := CreateHuman ;
10583: LD_ADDR_VAR 0 14
10587: PUSH
10588: CALL_OW 44
10592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10593: LD_ADDR_VAR 0 7
10597: PUSH
10598: LD_VAR 0 7
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: LD_VAR 0 14
10610: PPUSH
10611: CALL_OW 2
10615: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10616: LD_VAR 0 14
10620: PPUSH
10621: LD_VAR 0 1
10625: PPUSH
10626: CALL_OW 250
10630: PPUSH
10631: LD_VAR 0 1
10635: PPUSH
10636: CALL_OW 251
10640: PPUSH
10641: LD_INT 10
10643: PPUSH
10644: LD_INT 0
10646: PPUSH
10647: CALL_OW 50
// continue ;
10651: GO 10552
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10653: LD_VAR 0 12
10657: PUSH
10658: LD_INT 1
10660: ARRAY
10661: PPUSH
10662: CALL_OW 313
10666: IFFALSE 10694
10668: PUSH
10669: LD_VAR 0 12
10673: PUSH
10674: LD_INT 1
10676: ARRAY
10677: PPUSH
10678: CALL_OW 266
10682: PUSH
10683: LD_INT 32
10685: PUSH
10686: LD_INT 31
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: IN
10693: AND
10694: IFTRUE 10715
10696: PUSH
10697: LD_VAR 0 12
10701: PUSH
10702: LD_INT 1
10704: ARRAY
10705: PPUSH
10706: CALL_OW 313
10710: PUSH
10711: LD_INT 6
10713: EQUAL
10714: OR
10715: IFFALSE 10735
// f := Delete ( f , 1 ) ;
10717: LD_ADDR_VAR 0 12
10721: PUSH
10722: LD_VAR 0 12
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 3
10734: ST_TO_ADDR
// if not f then
10735: LD_VAR 0 12
10739: NOT
10740: IFFALSE 10758
// begin x := x + 2 ;
10742: LD_ADDR_VAR 0 13
10746: PUSH
10747: LD_VAR 0 13
10751: PUSH
10752: LD_INT 2
10754: PLUS
10755: ST_TO_ADDR
// continue ;
10756: GO 10552
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10758: LD_VAR 0 12
10762: PUSH
10763: LD_INT 1
10765: ARRAY
10766: PPUSH
10767: CALL_OW 266
10771: PUSH
10772: LD_INT 5
10774: EQUAL
10775: IFFALSE 10849
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10777: LD_VAR 0 12
10781: PUSH
10782: LD_INT 1
10784: ARRAY
10785: PPUSH
10786: CALL_OW 313
10790: PUSH
10791: LD_INT 3
10793: LESS
10794: IFFALSE 10830
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10796: LD_INT 0
10798: PPUSH
10799: LD_INT 5
10801: PUSH
10802: LD_INT 8
10804: PUSH
10805: LD_INT 9
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PUSH
10813: LD_VAR 0 17
10817: ARRAY
10818: PPUSH
10819: LD_VAR 0 4
10823: PPUSH
10824: CALL_OW 380
10828: GO 10847
// PrepareHuman ( false , i , skill ) ;
10830: LD_INT 0
10832: PPUSH
10833: LD_VAR 0 8
10837: PPUSH
10838: LD_VAR 0 4
10842: PPUSH
10843: CALL_OW 380
// end else
10847: GO 10866
// PrepareHuman ( false , i , skill ) ;
10849: LD_INT 0
10851: PPUSH
10852: LD_VAR 0 8
10856: PPUSH
10857: LD_VAR 0 4
10861: PPUSH
10862: CALL_OW 380
// un := CreateHuman ;
10866: LD_ADDR_VAR 0 14
10870: PUSH
10871: CALL_OW 44
10875: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10876: LD_ADDR_VAR 0 7
10880: PUSH
10881: LD_VAR 0 7
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: LD_VAR 0 14
10893: PPUSH
10894: CALL_OW 2
10898: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10899: LD_VAR 0 14
10903: PPUSH
10904: LD_VAR 0 12
10908: PUSH
10909: LD_INT 1
10911: ARRAY
10912: PPUSH
10913: CALL_OW 52
// end ;
10917: GO 10552
10919: POP
10920: POP
// end ;
10921: GO 9852
10923: POP
10924: POP
// result := result ^ buildings ;
10925: LD_ADDR_VAR 0 7
10929: PUSH
10930: LD_VAR 0 7
10934: PUSH
10935: LD_VAR 0 18
10939: ADD
10940: ST_TO_ADDR
// end else
10941: GO 11084
// begin for i = 1 to personel do
10943: LD_ADDR_VAR 0 8
10947: PUSH
10948: DOUBLE
10949: LD_INT 1
10951: DEC
10952: ST_TO_ADDR
10953: LD_VAR 0 6
10957: PUSH
10958: FOR_TO
10959: IFFALSE 11082
// begin if i > 4 then
10961: LD_VAR 0 8
10965: PUSH
10966: LD_INT 4
10968: GREATER
10969: IFFALSE 10973
// break ;
10971: GO 11082
// x := personel [ i ] ;
10973: LD_ADDR_VAR 0 13
10977: PUSH
10978: LD_VAR 0 6
10982: PUSH
10983: LD_VAR 0 8
10987: ARRAY
10988: ST_TO_ADDR
// if x = - 1 then
10989: LD_VAR 0 13
10993: PUSH
10994: LD_INT 1
10996: NEG
10997: EQUAL
10998: IFFALSE 11002
// continue ;
11000: GO 10958
// PrepareHuman ( false , i , skill ) ;
11002: LD_INT 0
11004: PPUSH
11005: LD_VAR 0 8
11009: PPUSH
11010: LD_VAR 0 4
11014: PPUSH
11015: CALL_OW 380
// un := CreateHuman ;
11019: LD_ADDR_VAR 0 14
11023: PUSH
11024: CALL_OW 44
11028: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11029: LD_VAR 0 14
11033: PPUSH
11034: LD_VAR 0 1
11038: PPUSH
11039: CALL_OW 250
11043: PPUSH
11044: LD_VAR 0 1
11048: PPUSH
11049: CALL_OW 251
11053: PPUSH
11054: LD_INT 10
11056: PPUSH
11057: LD_INT 0
11059: PPUSH
11060: CALL_OW 50
// result := result ^ un ;
11064: LD_ADDR_VAR 0 7
11068: PUSH
11069: LD_VAR 0 7
11073: PUSH
11074: LD_VAR 0 14
11078: ADD
11079: ST_TO_ADDR
// end ;
11080: GO 10958
11082: POP
11083: POP
// end ; end ;
11084: LD_VAR 0 7
11088: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11089: LD_INT 0
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
11102: PPUSH
11103: PPUSH
11104: PPUSH
11105: PPUSH
11106: PPUSH
// result := false ;
11107: LD_ADDR_VAR 0 3
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11115: LD_VAR 0 1
11119: NOT
11120: IFTRUE 11145
11122: PUSH
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 266
11132: PUSH
11133: LD_INT 32
11135: PUSH
11136: LD_INT 33
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: IN
11143: NOT
11144: OR
11145: IFFALSE 11149
// exit ;
11147: GO 12284
// nat := GetNation ( tower ) ;
11149: LD_ADDR_VAR 0 12
11153: PUSH
11154: LD_VAR 0 1
11158: PPUSH
11159: CALL_OW 248
11163: ST_TO_ADDR
// side := GetSide ( tower ) ;
11164: LD_ADDR_VAR 0 16
11168: PUSH
11169: LD_VAR 0 1
11173: PPUSH
11174: CALL_OW 255
11178: ST_TO_ADDR
// x := GetX ( tower ) ;
11179: LD_ADDR_VAR 0 10
11183: PUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 250
11193: ST_TO_ADDR
// y := GetY ( tower ) ;
11194: LD_ADDR_VAR 0 11
11198: PUSH
11199: LD_VAR 0 1
11203: PPUSH
11204: CALL_OW 251
11208: ST_TO_ADDR
// if not x or not y then
11209: LD_VAR 0 10
11213: NOT
11214: IFTRUE 11223
11216: PUSH
11217: LD_VAR 0 11
11221: NOT
11222: OR
11223: IFFALSE 11227
// exit ;
11225: GO 12284
// weapon := 0 ;
11227: LD_ADDR_VAR 0 18
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// fac_list := [ ] ;
11235: LD_ADDR_VAR 0 17
11239: PUSH
11240: EMPTY
11241: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11242: LD_ADDR_VAR 0 6
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 274
11256: PPUSH
11257: LD_VAR 0 2
11261: PPUSH
11262: LD_INT 0
11264: PPUSH
11265: CALL 8819 0 3
11269: PPUSH
11270: LD_INT 30
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 72
11284: ST_TO_ADDR
// if not factories then
11285: LD_VAR 0 6
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 12284
// for i in factories do
11294: LD_ADDR_VAR 0 8
11298: PUSH
11299: LD_VAR 0 6
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11330
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11307: LD_ADDR_VAR 0 17
11311: PUSH
11312: LD_VAR 0 17
11316: PUSH
11317: LD_VAR 0 8
11321: PPUSH
11322: CALL_OW 478
11326: UNION
11327: ST_TO_ADDR
11328: GO 11304
11330: POP
11331: POP
// if not fac_list then
11332: LD_VAR 0 17
11336: NOT
11337: IFFALSE 11341
// exit ;
11339: GO 12284
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11341: LD_ADDR_VAR 0 5
11345: PUSH
11346: LD_INT 4
11348: PUSH
11349: LD_INT 5
11351: PUSH
11352: LD_INT 9
11354: PUSH
11355: LD_INT 10
11357: PUSH
11358: LD_INT 6
11360: PUSH
11361: LD_INT 7
11363: PUSH
11364: LD_INT 11
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 27
11378: PUSH
11379: LD_INT 28
11381: PUSH
11382: LD_INT 26
11384: PUSH
11385: LD_INT 30
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 43
11396: PUSH
11397: LD_INT 44
11399: PUSH
11400: LD_INT 46
11402: PUSH
11403: LD_INT 45
11405: PUSH
11406: LD_INT 47
11408: PUSH
11409: LD_INT 49
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: PUSH
11425: LD_VAR 0 12
11429: ARRAY
11430: ST_TO_ADDR
// list := list isect fac_list ;
11431: LD_ADDR_VAR 0 5
11435: PUSH
11436: LD_VAR 0 5
11440: PUSH
11441: LD_VAR 0 17
11445: ISECT
11446: ST_TO_ADDR
// if not list then
11447: LD_VAR 0 5
11451: NOT
11452: IFFALSE 11456
// exit ;
11454: GO 12284
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11456: LD_VAR 0 12
11460: PUSH
11461: LD_INT 3
11463: EQUAL
11464: IFFALSE 11476
11466: PUSH
11467: LD_INT 49
11469: PUSH
11470: LD_VAR 0 5
11474: IN
11475: AND
11476: IFFALSE 11496
11478: PUSH
11479: LD_INT 31
11481: PPUSH
11482: LD_VAR 0 16
11486: PPUSH
11487: CALL_OW 321
11491: PUSH
11492: LD_INT 2
11494: EQUAL
11495: AND
11496: IFFALSE 11556
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11498: LD_INT 22
11500: PUSH
11501: LD_VAR 0 16
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 35
11512: PUSH
11513: LD_INT 49
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 91
11522: PUSH
11523: LD_VAR 0 1
11527: PUSH
11528: LD_INT 10
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 69
11545: NOT
11546: IFFALSE 11556
// weapon := ru_time_lapser ;
11548: LD_ADDR_VAR 0 18
11552: PUSH
11553: LD_INT 49
11555: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11556: LD_VAR 0 12
11560: PUSH
11561: LD_INT 1
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: IN
11571: IFFALSE 11595
11573: PUSH
11574: LD_INT 11
11576: PUSH
11577: LD_VAR 0 5
11581: IN
11582: IFTRUE 11594
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_VAR 0 5
11592: IN
11593: OR
11594: AND
11595: IFFALSE 11615
11597: PUSH
11598: LD_INT 6
11600: PPUSH
11601: LD_VAR 0 16
11605: PPUSH
11606: CALL_OW 321
11610: PUSH
11611: LD_INT 2
11613: EQUAL
11614: AND
11615: IFFALSE 11782
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11617: LD_INT 22
11619: PUSH
11620: LD_VAR 0 16
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 35
11634: PUSH
11635: LD_INT 11
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 35
11644: PUSH
11645: LD_INT 30
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 91
11659: PUSH
11660: LD_VAR 0 1
11664: PUSH
11665: LD_INT 18
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: PPUSH
11678: CALL_OW 69
11682: NOT
11683: IFFALSE 11759
11685: PUSH
11686: LD_INT 22
11688: PUSH
11689: LD_VAR 0 16
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 2
11700: PUSH
11701: LD_INT 30
11703: PUSH
11704: LD_INT 32
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 30
11713: PUSH
11714: LD_INT 33
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 91
11728: PUSH
11729: LD_VAR 0 1
11733: PUSH
11734: LD_INT 12
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: PPUSH
11750: CALL_OW 69
11754: PUSH
11755: LD_INT 2
11757: GREATER
11758: AND
11759: IFFALSE 11782
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11761: LD_ADDR_VAR 0 18
11765: PUSH
11766: LD_INT 11
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_VAR 0 12
11780: ARRAY
11781: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11782: LD_VAR 0 18
11786: NOT
11787: IFFALSE 11807
11789: PUSH
11790: LD_INT 40
11792: PPUSH
11793: LD_VAR 0 16
11797: PPUSH
11798: CALL_OW 321
11802: PUSH
11803: LD_INT 2
11805: EQUAL
11806: AND
11807: IFFALSE 11843
11809: PUSH
11810: LD_INT 7
11812: PUSH
11813: LD_VAR 0 5
11817: IN
11818: IFTRUE 11830
11820: PUSH
11821: LD_INT 28
11823: PUSH
11824: LD_VAR 0 5
11828: IN
11829: OR
11830: IFTRUE 11842
11832: PUSH
11833: LD_INT 45
11835: PUSH
11836: LD_VAR 0 5
11840: IN
11841: OR
11842: AND
11843: IFFALSE 12097
// begin hex := GetHexInfo ( x , y ) ;
11845: LD_ADDR_VAR 0 4
11849: PUSH
11850: LD_VAR 0 10
11854: PPUSH
11855: LD_VAR 0 11
11859: PPUSH
11860: CALL_OW 546
11864: ST_TO_ADDR
// if hex [ 1 ] then
11865: LD_VAR 0 4
11869: PUSH
11870: LD_INT 1
11872: ARRAY
11873: IFFALSE 11877
// exit ;
11875: GO 12284
// height := hex [ 2 ] ;
11877: LD_ADDR_VAR 0 15
11881: PUSH
11882: LD_VAR 0 4
11886: PUSH
11887: LD_INT 2
11889: ARRAY
11890: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11891: LD_ADDR_VAR 0 14
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: LD_INT 3
11904: PUSH
11905: LD_INT 5
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: ST_TO_ADDR
// for i in tmp do
11914: LD_ADDR_VAR 0 8
11918: PUSH
11919: LD_VAR 0 14
11923: PUSH
11924: FOR_IN
11925: IFFALSE 12095
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11927: LD_ADDR_VAR 0 9
11931: PUSH
11932: LD_VAR 0 10
11936: PPUSH
11937: LD_VAR 0 8
11941: PPUSH
11942: LD_INT 5
11944: PPUSH
11945: CALL_OW 272
11949: PUSH
11950: LD_VAR 0 11
11954: PPUSH
11955: LD_VAR 0 8
11959: PPUSH
11960: LD_INT 5
11962: PPUSH
11963: CALL_OW 273
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11972: LD_VAR 0 9
11976: PUSH
11977: LD_INT 1
11979: ARRAY
11980: PPUSH
11981: LD_VAR 0 9
11985: PUSH
11986: LD_INT 2
11988: ARRAY
11989: PPUSH
11990: CALL_OW 488
11994: IFFALSE 12093
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11996: LD_ADDR_VAR 0 4
12000: PUSH
12001: LD_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ARRAY
12009: PPUSH
12010: LD_VAR 0 9
12014: PUSH
12015: LD_INT 2
12017: ARRAY
12018: PPUSH
12019: CALL_OW 546
12023: ST_TO_ADDR
// if hex [ 1 ] then
12024: LD_VAR 0 4
12028: PUSH
12029: LD_INT 1
12031: ARRAY
12032: IFFALSE 12036
// continue ;
12034: GO 11924
// h := hex [ 2 ] ;
12036: LD_ADDR_VAR 0 13
12040: PUSH
12041: LD_VAR 0 4
12045: PUSH
12046: LD_INT 2
12048: ARRAY
12049: ST_TO_ADDR
// if h + 7 < height then
12050: LD_VAR 0 13
12054: PUSH
12055: LD_INT 7
12057: PLUS
12058: PUSH
12059: LD_VAR 0 15
12063: LESS
12064: IFFALSE 12093
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12066: LD_ADDR_VAR 0 18
12070: PUSH
12071: LD_INT 7
12073: PUSH
12074: LD_INT 28
12076: PUSH
12077: LD_INT 45
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: LD_VAR 0 12
12089: ARRAY
12090: ST_TO_ADDR
// break ;
12091: GO 12095
// end ; end ; end ;
12093: GO 11924
12095: POP
12096: POP
// end ; if not weapon then
12097: LD_VAR 0 18
12101: NOT
12102: IFFALSE 12162
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12104: LD_ADDR_VAR 0 5
12108: PUSH
12109: LD_VAR 0 5
12113: PUSH
12114: LD_INT 11
12116: PUSH
12117: LD_INT 30
12119: PUSH
12120: LD_INT 49
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: DIFF
12128: ST_TO_ADDR
// if not list then
12129: LD_VAR 0 5
12133: NOT
12134: IFFALSE 12138
// exit ;
12136: GO 12284
// weapon := list [ rand ( 1 , list ) ] ;
12138: LD_ADDR_VAR 0 18
12142: PUSH
12143: LD_VAR 0 5
12147: PUSH
12148: LD_INT 1
12150: PPUSH
12151: LD_VAR 0 5
12155: PPUSH
12156: CALL_OW 12
12160: ARRAY
12161: ST_TO_ADDR
// end ; if weapon then
12162: LD_VAR 0 18
12166: IFFALSE 12284
// begin tmp := CostOfWeapon ( weapon ) ;
12168: LD_ADDR_VAR 0 14
12172: PUSH
12173: LD_VAR 0 18
12177: PPUSH
12178: CALL_OW 451
12182: ST_TO_ADDR
// j := GetBase ( tower ) ;
12183: LD_ADDR_VAR 0 9
12187: PUSH
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 274
12197: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12198: LD_VAR 0 9
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 275
12210: PUSH
12211: LD_VAR 0 14
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: GREATEREQUAL
12220: IFFALSE 12246
12222: PUSH
12223: LD_VAR 0 9
12227: PPUSH
12228: LD_INT 2
12230: PPUSH
12231: CALL_OW 275
12235: PUSH
12236: LD_VAR 0 14
12240: PUSH
12241: LD_INT 2
12243: ARRAY
12244: GREATEREQUAL
12245: AND
12246: IFFALSE 12272
12248: PUSH
12249: LD_VAR 0 9
12253: PPUSH
12254: LD_INT 3
12256: PPUSH
12257: CALL_OW 275
12261: PUSH
12262: LD_VAR 0 14
12266: PUSH
12267: LD_INT 3
12269: ARRAY
12270: GREATEREQUAL
12271: AND
12272: IFFALSE 12284
// result := weapon ;
12274: LD_ADDR_VAR 0 3
12278: PUSH
12279: LD_VAR 0 18
12283: ST_TO_ADDR
// end ; end ;
12284: LD_VAR 0 3
12288: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12289: LD_INT 0
12291: PPUSH
12292: PPUSH
// result := true ;
12293: LD_ADDR_VAR 0 3
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if array1 = array2 then
12301: LD_VAR 0 1
12305: PUSH
12306: LD_VAR 0 2
12310: EQUAL
12311: IFFALSE 12371
// begin for i = 1 to array1 do
12313: LD_ADDR_VAR 0 4
12317: PUSH
12318: DOUBLE
12319: LD_INT 1
12321: DEC
12322: ST_TO_ADDR
12323: LD_VAR 0 1
12327: PUSH
12328: FOR_TO
12329: IFFALSE 12367
// if array1 [ i ] <> array2 [ i ] then
12331: LD_VAR 0 1
12335: PUSH
12336: LD_VAR 0 4
12340: ARRAY
12341: PUSH
12342: LD_VAR 0 2
12346: PUSH
12347: LD_VAR 0 4
12351: ARRAY
12352: NONEQUAL
12353: IFFALSE 12365
// begin result := false ;
12355: LD_ADDR_VAR 0 3
12359: PUSH
12360: LD_INT 0
12362: ST_TO_ADDR
// break ;
12363: GO 12367
// end ;
12365: GO 12328
12367: POP
12368: POP
// end else
12369: GO 12379
// result := false ;
12371: LD_ADDR_VAR 0 3
12375: PUSH
12376: LD_INT 0
12378: ST_TO_ADDR
// end ;
12379: LD_VAR 0 3
12383: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12384: LD_INT 0
12386: PPUSH
12387: PPUSH
// if not array1 or not array2 then
12388: LD_VAR 0 1
12392: NOT
12393: IFTRUE 12402
12395: PUSH
12396: LD_VAR 0 2
12400: NOT
12401: OR
12402: IFFALSE 12406
// exit ;
12404: GO 12470
// result := true ;
12406: LD_ADDR_VAR 0 3
12410: PUSH
12411: LD_INT 1
12413: ST_TO_ADDR
// for i = 1 to array1 do
12414: LD_ADDR_VAR 0 4
12418: PUSH
12419: DOUBLE
12420: LD_INT 1
12422: DEC
12423: ST_TO_ADDR
12424: LD_VAR 0 1
12428: PUSH
12429: FOR_TO
12430: IFFALSE 12468
// if array1 [ i ] <> array2 [ i ] then
12432: LD_VAR 0 1
12436: PUSH
12437: LD_VAR 0 4
12441: ARRAY
12442: PUSH
12443: LD_VAR 0 2
12447: PUSH
12448: LD_VAR 0 4
12452: ARRAY
12453: NONEQUAL
12454: IFFALSE 12466
// begin result := false ;
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// break ;
12464: GO 12468
// end ;
12466: GO 12429
12468: POP
12469: POP
// end ;
12470: LD_VAR 0 3
12474: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
12479: PPUSH
// pom := GetBase ( fac ) ;
12480: LD_ADDR_VAR 0 5
12484: PUSH
12485: LD_VAR 0 1
12489: PPUSH
12490: CALL_OW 274
12494: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12495: LD_ADDR_VAR 0 4
12499: PUSH
12500: LD_VAR 0 2
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: LD_VAR 0 2
12513: PUSH
12514: LD_INT 2
12516: ARRAY
12517: PPUSH
12518: LD_VAR 0 2
12522: PUSH
12523: LD_INT 3
12525: ARRAY
12526: PPUSH
12527: LD_VAR 0 2
12531: PUSH
12532: LD_INT 4
12534: ARRAY
12535: PPUSH
12536: CALL_OW 449
12540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12541: LD_ADDR_VAR 0 3
12545: PUSH
12546: LD_VAR 0 5
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 275
12558: PUSH
12559: LD_VAR 0 4
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: GREATEREQUAL
12568: IFFALSE 12594
12570: PUSH
12571: LD_VAR 0 5
12575: PPUSH
12576: LD_INT 2
12578: PPUSH
12579: CALL_OW 275
12583: PUSH
12584: LD_VAR 0 4
12588: PUSH
12589: LD_INT 2
12591: ARRAY
12592: GREATEREQUAL
12593: AND
12594: IFFALSE 12620
12596: PUSH
12597: LD_VAR 0 5
12601: PPUSH
12602: LD_INT 3
12604: PPUSH
12605: CALL_OW 275
12609: PUSH
12610: LD_VAR 0 4
12614: PUSH
12615: LD_INT 3
12617: ARRAY
12618: GREATEREQUAL
12619: AND
12620: ST_TO_ADDR
// end ;
12621: LD_VAR 0 3
12625: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12626: LD_INT 0
12628: PPUSH
12629: PPUSH
12630: PPUSH
12631: PPUSH
// pom := GetBase ( building ) ;
12632: LD_ADDR_VAR 0 3
12636: PUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 274
12646: ST_TO_ADDR
// if not pom then
12647: LD_VAR 0 3
12651: NOT
12652: IFFALSE 12656
// exit ;
12654: GO 12830
// btype := GetBType ( building ) ;
12656: LD_ADDR_VAR 0 5
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 266
12670: ST_TO_ADDR
// if btype = b_armoury then
12671: LD_VAR 0 5
12675: PUSH
12676: LD_INT 4
12678: EQUAL
12679: IFFALSE 12689
// btype := b_barracks ;
12681: LD_ADDR_VAR 0 5
12685: PUSH
12686: LD_INT 5
12688: ST_TO_ADDR
// if btype = b_depot then
12689: LD_VAR 0 5
12693: PUSH
12694: LD_INT 0
12696: EQUAL
12697: IFFALSE 12707
// btype := b_warehouse ;
12699: LD_ADDR_VAR 0 5
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// if btype = b_workshop then
12707: LD_VAR 0 5
12711: PUSH
12712: LD_INT 2
12714: EQUAL
12715: IFFALSE 12725
// btype := b_factory ;
12717: LD_ADDR_VAR 0 5
12721: PUSH
12722: LD_INT 3
12724: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12725: LD_ADDR_VAR 0 4
12729: PUSH
12730: LD_VAR 0 5
12734: PPUSH
12735: LD_VAR 0 1
12739: PPUSH
12740: CALL_OW 248
12744: PPUSH
12745: CALL_OW 450
12749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_VAR 0 3
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: CALL_OW 275
12767: PUSH
12768: LD_VAR 0 4
12772: PUSH
12773: LD_INT 1
12775: ARRAY
12776: GREATEREQUAL
12777: IFFALSE 12803
12779: PUSH
12780: LD_VAR 0 3
12784: PPUSH
12785: LD_INT 2
12787: PPUSH
12788: CALL_OW 275
12792: PUSH
12793: LD_VAR 0 4
12797: PUSH
12798: LD_INT 2
12800: ARRAY
12801: GREATEREQUAL
12802: AND
12803: IFFALSE 12829
12805: PUSH
12806: LD_VAR 0 3
12810: PPUSH
12811: LD_INT 3
12813: PPUSH
12814: CALL_OW 275
12818: PUSH
12819: LD_VAR 0 4
12823: PUSH
12824: LD_INT 3
12826: ARRAY
12827: GREATEREQUAL
12828: AND
12829: ST_TO_ADDR
// end ;
12830: LD_VAR 0 2
12834: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12835: LD_INT 0
12837: PPUSH
12838: PPUSH
12839: PPUSH
// pom := GetBase ( building ) ;
12840: LD_ADDR_VAR 0 4
12844: PUSH
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 274
12854: ST_TO_ADDR
// if not pom then
12855: LD_VAR 0 4
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 12969
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12864: LD_ADDR_VAR 0 5
12868: PUSH
12869: LD_VAR 0 2
12873: PPUSH
12874: LD_VAR 0 1
12878: PPUSH
12879: CALL_OW 248
12883: PPUSH
12884: CALL_OW 450
12888: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12889: LD_ADDR_VAR 0 3
12893: PUSH
12894: LD_VAR 0 4
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 275
12906: PUSH
12907: LD_VAR 0 5
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: GREATEREQUAL
12916: IFFALSE 12942
12918: PUSH
12919: LD_VAR 0 4
12923: PPUSH
12924: LD_INT 2
12926: PPUSH
12927: CALL_OW 275
12931: PUSH
12932: LD_VAR 0 5
12936: PUSH
12937: LD_INT 2
12939: ARRAY
12940: GREATEREQUAL
12941: AND
12942: IFFALSE 12968
12944: PUSH
12945: LD_VAR 0 4
12949: PPUSH
12950: LD_INT 3
12952: PPUSH
12953: CALL_OW 275
12957: PUSH
12958: LD_VAR 0 5
12962: PUSH
12963: LD_INT 3
12965: ARRAY
12966: GREATEREQUAL
12967: AND
12968: ST_TO_ADDR
// end ;
12969: LD_VAR 0 3
12973: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12974: LD_INT 0
12976: PPUSH
12977: PPUSH
12978: PPUSH
12979: PPUSH
12980: PPUSH
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
12985: PPUSH
12986: PPUSH
// result := false ;
12987: LD_ADDR_VAR 0 8
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12995: LD_VAR 0 5
12999: NOT
13000: IFTRUE 13009
13002: PUSH
13003: LD_VAR 0 1
13007: NOT
13008: OR
13009: IFTRUE 13018
13011: PUSH
13012: LD_VAR 0 2
13016: NOT
13017: OR
13018: IFTRUE 13027
13020: PUSH
13021: LD_VAR 0 3
13025: NOT
13026: OR
13027: IFFALSE 13031
// exit ;
13029: GO 13857
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13031: LD_ADDR_VAR 0 14
13035: PUSH
13036: LD_VAR 0 1
13040: PPUSH
13041: LD_VAR 0 2
13045: PPUSH
13046: LD_VAR 0 3
13050: PPUSH
13051: LD_VAR 0 4
13055: PPUSH
13056: LD_VAR 0 5
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: PPUSH
13065: CALL_OW 248
13069: PPUSH
13070: LD_INT 0
13072: PPUSH
13073: CALL 15138 0 6
13077: ST_TO_ADDR
// if not hexes then
13078: LD_VAR 0 14
13082: NOT
13083: IFFALSE 13087
// exit ;
13085: GO 13857
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13087: LD_ADDR_VAR 0 17
13091: PUSH
13092: LD_VAR 0 5
13096: PPUSH
13097: LD_INT 22
13099: PUSH
13100: LD_VAR 0 13
13104: PPUSH
13105: CALL_OW 255
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 30
13119: PUSH
13120: LD_INT 0
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 30
13129: PUSH
13130: LD_INT 1
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PPUSH
13146: CALL_OW 72
13150: ST_TO_ADDR
// for i = 1 to hexes do
13151: LD_ADDR_VAR 0 9
13155: PUSH
13156: DOUBLE
13157: LD_INT 1
13159: DEC
13160: ST_TO_ADDR
13161: LD_VAR 0 14
13165: PUSH
13166: FOR_TO
13167: IFFALSE 13855
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13169: LD_ADDR_VAR 0 13
13173: PUSH
13174: LD_VAR 0 14
13178: PUSH
13179: LD_VAR 0 9
13183: ARRAY
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: PPUSH
13189: LD_VAR 0 14
13193: PUSH
13194: LD_VAR 0 9
13198: ARRAY
13199: PUSH
13200: LD_INT 2
13202: ARRAY
13203: PPUSH
13204: CALL_OW 428
13208: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13209: LD_VAR 0 14
13213: PUSH
13214: LD_VAR 0 9
13218: ARRAY
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: LD_VAR 0 14
13228: PUSH
13229: LD_VAR 0 9
13233: ARRAY
13234: PUSH
13235: LD_INT 2
13237: ARRAY
13238: PPUSH
13239: CALL_OW 351
13243: IFTRUE 13282
13245: PUSH
13246: LD_VAR 0 14
13250: PUSH
13251: LD_VAR 0 9
13255: ARRAY
13256: PUSH
13257: LD_INT 1
13259: ARRAY
13260: PPUSH
13261: LD_VAR 0 14
13265: PUSH
13266: LD_VAR 0 9
13270: ARRAY
13271: PUSH
13272: LD_INT 2
13274: ARRAY
13275: PPUSH
13276: CALL_OW 488
13280: NOT
13281: OR
13282: IFTRUE 13299
13284: PUSH
13285: LD_VAR 0 13
13289: PPUSH
13290: CALL_OW 247
13294: PUSH
13295: LD_INT 3
13297: EQUAL
13298: OR
13299: IFFALSE 13305
// exit ;
13301: POP
13302: POP
13303: GO 13857
// if not tmp then
13305: LD_VAR 0 13
13309: NOT
13310: IFFALSE 13314
// continue ;
13312: GO 13166
// result := true ;
13314: LD_ADDR_VAR 0 8
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13322: LD_VAR 0 6
13326: IFFALSE 13343
13328: PUSH
13329: LD_VAR 0 13
13333: PPUSH
13334: CALL_OW 247
13338: PUSH
13339: LD_INT 2
13341: EQUAL
13342: AND
13343: IFFALSE 13360
13345: PUSH
13346: LD_VAR 0 13
13350: PPUSH
13351: CALL_OW 263
13355: PUSH
13356: LD_INT 1
13358: EQUAL
13359: AND
13360: IFFALSE 13524
// begin if IsDrivenBy ( tmp ) then
13362: LD_VAR 0 13
13366: PPUSH
13367: CALL_OW 311
13371: IFFALSE 13375
// continue ;
13373: GO 13166
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13375: LD_VAR 0 6
13379: PPUSH
13380: LD_INT 3
13382: PUSH
13383: LD_INT 60
13385: PUSH
13386: EMPTY
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: LD_INT 55
13398: PUSH
13399: EMPTY
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 72
13414: IFFALSE 13522
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13416: LD_ADDR_VAR 0 18
13420: PUSH
13421: LD_VAR 0 6
13425: PPUSH
13426: LD_INT 3
13428: PUSH
13429: LD_INT 60
13431: PUSH
13432: EMPTY
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 3
13441: PUSH
13442: LD_INT 55
13444: PUSH
13445: EMPTY
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 72
13460: PUSH
13461: LD_INT 1
13463: ARRAY
13464: ST_TO_ADDR
// if IsInUnit ( driver ) then
13465: LD_VAR 0 18
13469: PPUSH
13470: CALL_OW 310
13474: IFFALSE 13485
// ComExit ( driver ) ;
13476: LD_VAR 0 18
13480: PPUSH
13481: CALL 39138 0 1
// AddComEnterUnit ( driver , tmp ) ;
13485: LD_VAR 0 18
13489: PPUSH
13490: LD_VAR 0 13
13494: PPUSH
13495: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13499: LD_VAR 0 18
13503: PPUSH
13504: LD_VAR 0 7
13508: PPUSH
13509: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13513: LD_VAR 0 18
13517: PPUSH
13518: CALL_OW 181
// end ; continue ;
13522: GO 13166
// end ; if not cleaners or not tmp in cleaners then
13524: LD_VAR 0 6
13528: NOT
13529: IFTRUE 13544
13531: PUSH
13532: LD_VAR 0 13
13536: PUSH
13537: LD_VAR 0 6
13541: IN
13542: NOT
13543: OR
13544: IFFALSE 13853
// begin if dep then
13546: LD_VAR 0 17
13550: IFFALSE 13686
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13552: LD_ADDR_VAR 0 16
13556: PUSH
13557: LD_VAR 0 17
13561: PUSH
13562: LD_INT 1
13564: ARRAY
13565: PPUSH
13566: CALL_OW 250
13570: PPUSH
13571: LD_VAR 0 17
13575: PUSH
13576: LD_INT 1
13578: ARRAY
13579: PPUSH
13580: CALL_OW 254
13584: PPUSH
13585: LD_INT 5
13587: PPUSH
13588: CALL_OW 272
13592: PUSH
13593: LD_VAR 0 17
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PPUSH
13602: CALL_OW 251
13606: PPUSH
13607: LD_VAR 0 17
13611: PUSH
13612: LD_INT 1
13614: ARRAY
13615: PPUSH
13616: CALL_OW 254
13620: PPUSH
13621: LD_INT 5
13623: PPUSH
13624: CALL_OW 273
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13633: LD_VAR 0 16
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: PPUSH
13642: LD_VAR 0 16
13646: PUSH
13647: LD_INT 2
13649: ARRAY
13650: PPUSH
13651: CALL_OW 488
13655: IFFALSE 13686
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13657: LD_VAR 0 13
13661: PPUSH
13662: LD_VAR 0 16
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PPUSH
13671: LD_VAR 0 16
13675: PUSH
13676: LD_INT 2
13678: ARRAY
13679: PPUSH
13680: CALL_OW 111
// continue ;
13684: GO 13166
// end ; end ; r := GetDir ( tmp ) ;
13686: LD_ADDR_VAR 0 15
13690: PUSH
13691: LD_VAR 0 13
13695: PPUSH
13696: CALL_OW 254
13700: ST_TO_ADDR
// if r = 5 then
13701: LD_VAR 0 15
13705: PUSH
13706: LD_INT 5
13708: EQUAL
13709: IFFALSE 13719
// r := 0 ;
13711: LD_ADDR_VAR 0 15
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// for j = r to 5 do
13719: LD_ADDR_VAR 0 10
13723: PUSH
13724: DOUBLE
13725: LD_VAR 0 15
13729: DEC
13730: ST_TO_ADDR
13731: LD_INT 5
13733: PUSH
13734: FOR_TO
13735: IFFALSE 13851
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13737: LD_ADDR_VAR 0 11
13741: PUSH
13742: LD_VAR 0 13
13746: PPUSH
13747: CALL_OW 250
13751: PPUSH
13752: LD_VAR 0 10
13756: PPUSH
13757: LD_INT 2
13759: PPUSH
13760: CALL_OW 272
13764: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13765: LD_ADDR_VAR 0 12
13769: PUSH
13770: LD_VAR 0 13
13774: PPUSH
13775: CALL_OW 251
13779: PPUSH
13780: LD_VAR 0 10
13784: PPUSH
13785: LD_INT 2
13787: PPUSH
13788: CALL_OW 273
13792: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13793: LD_VAR 0 11
13797: PPUSH
13798: LD_VAR 0 12
13802: PPUSH
13803: CALL_OW 488
13807: IFFALSE 13826
13809: PUSH
13810: LD_VAR 0 11
13814: PPUSH
13815: LD_VAR 0 12
13819: PPUSH
13820: CALL_OW 428
13824: NOT
13825: AND
13826: IFFALSE 13849
// begin ComMoveXY ( tmp , _x , _y ) ;
13828: LD_VAR 0 13
13832: PPUSH
13833: LD_VAR 0 11
13837: PPUSH
13838: LD_VAR 0 12
13842: PPUSH
13843: CALL_OW 111
// break ;
13847: GO 13851
// end ; end ;
13849: GO 13734
13851: POP
13852: POP
// end ; end ;
13853: GO 13166
13855: POP
13856: POP
// end ;
13857: LD_VAR 0 8
13861: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13862: LD_INT 0
13864: PPUSH
// result := true ;
13865: LD_ADDR_VAR 0 3
13869: PUSH
13870: LD_INT 1
13872: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13873: LD_VAR 0 2
13877: PUSH
13878: LD_INT 24
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13892
13884: LD_INT 33
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 13917
13892: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13893: LD_ADDR_VAR 0 3
13897: PUSH
13898: LD_INT 32
13900: PPUSH
13901: LD_VAR 0 1
13905: PPUSH
13906: CALL_OW 321
13910: PUSH
13911: LD_INT 2
13913: EQUAL
13914: ST_TO_ADDR
13915: GO 14233
13917: LD_INT 20
13919: DOUBLE
13920: EQUAL
13921: IFTRUE 13925
13923: GO 13950
13925: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13926: LD_ADDR_VAR 0 3
13930: PUSH
13931: LD_INT 6
13933: PPUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: CALL_OW 321
13943: PUSH
13944: LD_INT 2
13946: EQUAL
13947: ST_TO_ADDR
13948: GO 14233
13950: LD_INT 22
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13964
13956: LD_INT 36
13958: DOUBLE
13959: EQUAL
13960: IFTRUE 13964
13962: GO 13989
13964: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13965: LD_ADDR_VAR 0 3
13969: PUSH
13970: LD_INT 15
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 321
13982: PUSH
13983: LD_INT 2
13985: EQUAL
13986: ST_TO_ADDR
13987: GO 14233
13989: LD_INT 30
13991: DOUBLE
13992: EQUAL
13993: IFTRUE 13997
13995: GO 14022
13997: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13998: LD_ADDR_VAR 0 3
14002: PUSH
14003: LD_INT 20
14005: PPUSH
14006: LD_VAR 0 1
14010: PPUSH
14011: CALL_OW 321
14015: PUSH
14016: LD_INT 2
14018: EQUAL
14019: ST_TO_ADDR
14020: GO 14233
14022: LD_INT 28
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14036
14028: LD_INT 21
14030: DOUBLE
14031: EQUAL
14032: IFTRUE 14036
14034: GO 14061
14036: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14037: LD_ADDR_VAR 0 3
14041: PUSH
14042: LD_INT 21
14044: PPUSH
14045: LD_VAR 0 1
14049: PPUSH
14050: CALL_OW 321
14054: PUSH
14055: LD_INT 2
14057: EQUAL
14058: ST_TO_ADDR
14059: GO 14233
14061: LD_INT 16
14063: DOUBLE
14064: EQUAL
14065: IFTRUE 14069
14067: GO 14094
14069: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14070: LD_ADDR_VAR 0 3
14074: PUSH
14075: LD_INT 84
14077: PPUSH
14078: LD_VAR 0 1
14082: PPUSH
14083: CALL_OW 321
14087: PUSH
14088: LD_INT 2
14090: EQUAL
14091: ST_TO_ADDR
14092: GO 14233
14094: LD_INT 19
14096: DOUBLE
14097: EQUAL
14098: IFTRUE 14108
14100: LD_INT 23
14102: DOUBLE
14103: EQUAL
14104: IFTRUE 14108
14106: GO 14133
14108: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14109: LD_ADDR_VAR 0 3
14113: PUSH
14114: LD_INT 83
14116: PPUSH
14117: LD_VAR 0 1
14121: PPUSH
14122: CALL_OW 321
14126: PUSH
14127: LD_INT 2
14129: EQUAL
14130: ST_TO_ADDR
14131: GO 14233
14133: LD_INT 17
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14166
14141: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14142: LD_ADDR_VAR 0 3
14146: PUSH
14147: LD_INT 39
14149: PPUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 321
14159: PUSH
14160: LD_INT 2
14162: EQUAL
14163: ST_TO_ADDR
14164: GO 14233
14166: LD_INT 18
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14199
14174: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: LD_INT 40
14182: PPUSH
14183: LD_VAR 0 1
14187: PPUSH
14188: CALL_OW 321
14192: PUSH
14193: LD_INT 2
14195: EQUAL
14196: ST_TO_ADDR
14197: GO 14233
14199: LD_INT 27
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14232
14207: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14208: LD_ADDR_VAR 0 3
14212: PUSH
14213: LD_INT 35
14215: PPUSH
14216: LD_VAR 0 1
14220: PPUSH
14221: CALL_OW 321
14225: PUSH
14226: LD_INT 2
14228: EQUAL
14229: ST_TO_ADDR
14230: GO 14233
14232: POP
// end ;
14233: LD_VAR 0 3
14237: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
14246: PPUSH
14247: PPUSH
14248: PPUSH
14249: PPUSH
14250: PPUSH
// result := false ;
14251: LD_ADDR_VAR 0 6
14255: PUSH
14256: LD_INT 0
14258: ST_TO_ADDR
// if btype = b_depot then
14259: LD_VAR 0 2
14263: PUSH
14264: LD_INT 0
14266: EQUAL
14267: IFFALSE 14279
// begin result := true ;
14269: LD_ADDR_VAR 0 6
14273: PUSH
14274: LD_INT 1
14276: ST_TO_ADDR
// exit ;
14277: GO 15133
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14279: LD_VAR 0 1
14283: NOT
14284: IFTRUE 14309
14286: PUSH
14287: LD_VAR 0 1
14291: PPUSH
14292: CALL_OW 266
14296: PUSH
14297: LD_INT 0
14299: PUSH
14300: LD_INT 1
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: IN
14307: NOT
14308: OR
14309: IFTRUE 14318
14311: PUSH
14312: LD_VAR 0 2
14316: NOT
14317: OR
14318: IFTRUE 14354
14320: PUSH
14321: LD_VAR 0 5
14325: PUSH
14326: LD_INT 0
14328: PUSH
14329: LD_INT 1
14331: PUSH
14332: LD_INT 2
14334: PUSH
14335: LD_INT 3
14337: PUSH
14338: LD_INT 4
14340: PUSH
14341: LD_INT 5
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: IN
14352: NOT
14353: OR
14354: IFTRUE 14373
14356: PUSH
14357: LD_VAR 0 3
14361: PPUSH
14362: LD_VAR 0 4
14366: PPUSH
14367: CALL_OW 488
14371: NOT
14372: OR
14373: IFFALSE 14377
// exit ;
14375: GO 15133
// side := GetSide ( depot ) ;
14377: LD_ADDR_VAR 0 9
14381: PUSH
14382: LD_VAR 0 1
14386: PPUSH
14387: CALL_OW 255
14391: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14392: LD_VAR 0 9
14396: PPUSH
14397: LD_VAR 0 2
14401: PPUSH
14402: CALL 13862 0 2
14406: NOT
14407: IFFALSE 14411
// exit ;
14409: GO 15133
// pom := GetBase ( depot ) ;
14411: LD_ADDR_VAR 0 10
14415: PUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 274
14425: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14426: LD_ADDR_VAR 0 11
14430: PUSH
14431: LD_VAR 0 2
14435: PPUSH
14436: LD_VAR 0 1
14440: PPUSH
14441: CALL_OW 248
14445: PPUSH
14446: CALL_OW 450
14450: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14451: LD_VAR 0 10
14455: PPUSH
14456: LD_INT 1
14458: PPUSH
14459: CALL_OW 275
14463: PUSH
14464: LD_VAR 0 11
14468: PUSH
14469: LD_INT 1
14471: ARRAY
14472: GREATEREQUAL
14473: IFFALSE 14499
14475: PUSH
14476: LD_VAR 0 10
14480: PPUSH
14481: LD_INT 2
14483: PPUSH
14484: CALL_OW 275
14488: PUSH
14489: LD_VAR 0 11
14493: PUSH
14494: LD_INT 2
14496: ARRAY
14497: GREATEREQUAL
14498: AND
14499: IFFALSE 14525
14501: PUSH
14502: LD_VAR 0 10
14506: PPUSH
14507: LD_INT 3
14509: PPUSH
14510: CALL_OW 275
14514: PUSH
14515: LD_VAR 0 11
14519: PUSH
14520: LD_INT 3
14522: ARRAY
14523: GREATEREQUAL
14524: AND
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 15133
// if GetBType ( depot ) = b_depot then
14530: LD_VAR 0 1
14534: PPUSH
14535: CALL_OW 266
14539: PUSH
14540: LD_INT 0
14542: EQUAL
14543: IFFALSE 14555
// dist := 28 else
14545: LD_ADDR_VAR 0 14
14549: PUSH
14550: LD_INT 28
14552: ST_TO_ADDR
14553: GO 14563
// dist := 36 ;
14555: LD_ADDR_VAR 0 14
14559: PUSH
14560: LD_INT 36
14562: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14563: LD_VAR 0 1
14567: PPUSH
14568: LD_VAR 0 3
14572: PPUSH
14573: LD_VAR 0 4
14577: PPUSH
14578: CALL_OW 297
14582: PUSH
14583: LD_VAR 0 14
14587: GREATER
14588: IFFALSE 14592
// exit ;
14590: GO 15133
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14592: LD_ADDR_VAR 0 12
14596: PUSH
14597: LD_VAR 0 2
14601: PPUSH
14602: LD_VAR 0 3
14606: PPUSH
14607: LD_VAR 0 4
14611: PPUSH
14612: LD_VAR 0 5
14616: PPUSH
14617: LD_VAR 0 1
14621: PPUSH
14622: CALL_OW 248
14626: PPUSH
14627: LD_INT 0
14629: PPUSH
14630: CALL 15138 0 6
14634: ST_TO_ADDR
// if not hexes then
14635: LD_VAR 0 12
14639: NOT
14640: IFFALSE 14644
// exit ;
14642: GO 15133
// hex := GetHexInfo ( x , y ) ;
14644: LD_ADDR_VAR 0 15
14648: PUSH
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_VAR 0 4
14658: PPUSH
14659: CALL_OW 546
14663: ST_TO_ADDR
// if hex [ 1 ] then
14664: LD_VAR 0 15
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: IFFALSE 14676
// exit ;
14674: GO 15133
// height := hex [ 2 ] ;
14676: LD_ADDR_VAR 0 13
14680: PUSH
14681: LD_VAR 0 15
14685: PUSH
14686: LD_INT 2
14688: ARRAY
14689: ST_TO_ADDR
// for i = 1 to hexes do
14690: LD_ADDR_VAR 0 7
14694: PUSH
14695: DOUBLE
14696: LD_INT 1
14698: DEC
14699: ST_TO_ADDR
14700: LD_VAR 0 12
14704: PUSH
14705: FOR_TO
14706: IFFALSE 15050
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14708: LD_VAR 0 12
14712: PUSH
14713: LD_VAR 0 7
14717: ARRAY
14718: PUSH
14719: LD_INT 1
14721: ARRAY
14722: PPUSH
14723: LD_VAR 0 12
14727: PUSH
14728: LD_VAR 0 7
14732: ARRAY
14733: PUSH
14734: LD_INT 2
14736: ARRAY
14737: PPUSH
14738: CALL_OW 488
14742: NOT
14743: IFTRUE 14785
14745: PUSH
14746: LD_VAR 0 12
14750: PUSH
14751: LD_VAR 0 7
14755: ARRAY
14756: PUSH
14757: LD_INT 1
14759: ARRAY
14760: PPUSH
14761: LD_VAR 0 12
14765: PUSH
14766: LD_VAR 0 7
14770: ARRAY
14771: PUSH
14772: LD_INT 2
14774: ARRAY
14775: PPUSH
14776: CALL_OW 428
14780: PUSH
14781: LD_INT 0
14783: GREATER
14784: OR
14785: IFTRUE 14823
14787: PUSH
14788: LD_VAR 0 12
14792: PUSH
14793: LD_VAR 0 7
14797: ARRAY
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PPUSH
14803: LD_VAR 0 12
14807: PUSH
14808: LD_VAR 0 7
14812: ARRAY
14813: PUSH
14814: LD_INT 2
14816: ARRAY
14817: PPUSH
14818: CALL_OW 351
14822: OR
14823: IFFALSE 14829
// exit ;
14825: POP
14826: POP
14827: GO 15133
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14829: LD_ADDR_VAR 0 8
14833: PUSH
14834: LD_VAR 0 12
14838: PUSH
14839: LD_VAR 0 7
14843: ARRAY
14844: PUSH
14845: LD_INT 1
14847: ARRAY
14848: PPUSH
14849: LD_VAR 0 12
14853: PUSH
14854: LD_VAR 0 7
14858: ARRAY
14859: PUSH
14860: LD_INT 2
14862: ARRAY
14863: PPUSH
14864: CALL_OW 546
14868: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14869: LD_VAR 0 8
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: IFTRUE 14899
14879: PUSH
14880: LD_VAR 0 8
14884: PUSH
14885: LD_INT 2
14887: ARRAY
14888: PUSH
14889: LD_VAR 0 13
14893: PUSH
14894: LD_INT 2
14896: PLUS
14897: GREATER
14898: OR
14899: IFTRUE 14921
14901: PUSH
14902: LD_VAR 0 8
14906: PUSH
14907: LD_INT 2
14909: ARRAY
14910: PUSH
14911: LD_VAR 0 13
14915: PUSH
14916: LD_INT 2
14918: MINUS
14919: LESS
14920: OR
14921: IFTRUE 14989
14923: PUSH
14924: LD_VAR 0 8
14928: PUSH
14929: LD_INT 3
14931: ARRAY
14932: PUSH
14933: LD_INT 0
14935: PUSH
14936: LD_INT 8
14938: PUSH
14939: LD_INT 9
14941: PUSH
14942: LD_INT 10
14944: PUSH
14945: LD_INT 11
14947: PUSH
14948: LD_INT 12
14950: PUSH
14951: LD_INT 13
14953: PUSH
14954: LD_INT 16
14956: PUSH
14957: LD_INT 17
14959: PUSH
14960: LD_INT 18
14962: PUSH
14963: LD_INT 19
14965: PUSH
14966: LD_INT 20
14968: PUSH
14969: LD_INT 21
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: IN
14987: NOT
14988: OR
14989: IFTRUE 15002
14991: PUSH
14992: LD_VAR 0 8
14996: PUSH
14997: LD_INT 5
14999: ARRAY
15000: NOT
15001: OR
15002: IFTRUE 15042
15004: PUSH
15005: LD_VAR 0 8
15009: PUSH
15010: LD_INT 6
15012: ARRAY
15013: PUSH
15014: LD_INT 1
15016: PUSH
15017: LD_INT 2
15019: PUSH
15020: LD_INT 7
15022: PUSH
15023: LD_INT 9
15025: PUSH
15026: LD_INT 10
15028: PUSH
15029: LD_INT 11
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: IN
15040: NOT
15041: OR
15042: IFFALSE 15048
// exit ;
15044: POP
15045: POP
15046: GO 15133
// end ;
15048: GO 14705
15050: POP
15051: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15052: LD_VAR 0 9
15056: PPUSH
15057: LD_VAR 0 3
15061: PPUSH
15062: LD_VAR 0 4
15066: PPUSH
15067: LD_INT 20
15069: PPUSH
15070: CALL 6952 0 4
15074: PUSH
15075: LD_INT 4
15077: ARRAY
15078: IFFALSE 15082
// exit ;
15080: GO 15133
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15082: LD_VAR 0 2
15086: PUSH
15087: LD_INT 29
15089: PUSH
15090: LD_INT 30
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: IN
15097: IFFALSE 15121
15099: PUSH
15100: LD_VAR 0 3
15104: PPUSH
15105: LD_VAR 0 4
15109: PPUSH
15110: LD_VAR 0 9
15114: PPUSH
15115: CALL_OW 440
15119: NOT
15120: AND
15121: IFFALSE 15125
// exit ;
15123: GO 15133
// result := true ;
15125: LD_ADDR_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// end ;
15133: LD_VAR 0 6
15137: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15138: LD_INT 0
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
15153: PPUSH
15154: PPUSH
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
15178: PPUSH
15179: PPUSH
15180: PPUSH
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
// result = [ ] ;
15198: LD_ADDR_VAR 0 7
15202: PUSH
15203: EMPTY
15204: ST_TO_ADDR
// temp_list = [ ] ;
15205: LD_ADDR_VAR 0 9
15209: PUSH
15210: EMPTY
15211: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15212: LD_VAR 0 4
15216: PUSH
15217: LD_INT 0
15219: PUSH
15220: LD_INT 1
15222: PUSH
15223: LD_INT 2
15225: PUSH
15226: LD_INT 3
15228: PUSH
15229: LD_INT 4
15231: PUSH
15232: LD_INT 5
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: IN
15243: NOT
15244: IFTRUE 15287
15246: PUSH
15247: LD_VAR 0 1
15251: PUSH
15252: LD_INT 0
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: IN
15262: IFFALSE 15286
15264: PUSH
15265: LD_VAR 0 5
15269: PUSH
15270: LD_INT 1
15272: PUSH
15273: LD_INT 2
15275: PUSH
15276: LD_INT 3
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: LIST
15283: IN
15284: NOT
15285: AND
15286: OR
15287: IFFALSE 15291
// exit ;
15289: GO 33690
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15291: LD_VAR 0 1
15295: PUSH
15296: LD_INT 6
15298: PUSH
15299: LD_INT 7
15301: PUSH
15302: LD_INT 8
15304: PUSH
15305: LD_INT 13
15307: PUSH
15308: LD_INT 12
15310: PUSH
15311: LD_INT 15
15313: PUSH
15314: LD_INT 11
15316: PUSH
15317: LD_INT 14
15319: PUSH
15320: LD_INT 10
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: IN
15334: IFFALSE 15344
// btype = b_lab ;
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: LD_INT 6
15343: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15344: LD_VAR 0 6
15348: PUSH
15349: LD_INT 0
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: IN
15363: NOT
15364: IFTRUE 15432
15366: PUSH
15367: LD_VAR 0 1
15371: PUSH
15372: LD_INT 0
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: LD_INT 2
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: LD_INT 6
15386: PUSH
15387: LD_INT 36
15389: PUSH
15390: LD_INT 4
15392: PUSH
15393: LD_INT 5
15395: PUSH
15396: LD_INT 31
15398: PUSH
15399: LD_INT 32
15401: PUSH
15402: LD_INT 33
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: IN
15418: NOT
15419: IFFALSE 15431
15421: PUSH
15422: LD_VAR 0 6
15426: PUSH
15427: LD_INT 1
15429: EQUAL
15430: AND
15431: OR
15432: IFTRUE 15464
15434: PUSH
15435: LD_VAR 0 1
15439: PUSH
15440: LD_INT 2
15442: PUSH
15443: LD_INT 3
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: IN
15450: NOT
15451: IFFALSE 15463
15453: PUSH
15454: LD_VAR 0 6
15458: PUSH
15459: LD_INT 2
15461: EQUAL
15462: AND
15463: OR
15464: IFFALSE 15474
// mode = 0 ;
15466: LD_ADDR_VAR 0 6
15470: PUSH
15471: LD_INT 0
15473: ST_TO_ADDR
// case mode of 0 :
15474: LD_VAR 0 6
15478: PUSH
15479: LD_INT 0
15481: DOUBLE
15482: EQUAL
15483: IFTRUE 15487
15485: GO 26940
15487: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15488: LD_ADDR_VAR 0 11
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: LD_INT 0
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 0
15505: PUSH
15506: LD_INT 1
15508: NEG
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 1
15516: PUSH
15517: LD_INT 0
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 0
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 1
15546: NEG
15547: PUSH
15548: LD_INT 0
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 1
15557: NEG
15558: PUSH
15559: LD_INT 1
15561: NEG
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 1
15569: NEG
15570: PUSH
15571: LD_INT 2
15573: NEG
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 2
15584: NEG
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: LD_INT 1
15595: NEG
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 0
15613: PUSH
15614: LD_INT 2
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 1
15623: NEG
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 1
15634: PUSH
15635: LD_INT 3
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 0
15644: PUSH
15645: LD_INT 3
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 1
15654: NEG
15655: PUSH
15656: LD_INT 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15681: LD_ADDR_VAR 0 12
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: LD_INT 0
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 0
15698: PUSH
15699: LD_INT 1
15701: NEG
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: LD_INT 0
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 1
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 0
15729: PUSH
15730: LD_INT 1
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 1
15739: NEG
15740: PUSH
15741: LD_INT 0
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 1
15750: NEG
15751: PUSH
15752: LD_INT 1
15754: NEG
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: LD_INT 1
15765: NEG
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 2
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 1
15793: NEG
15794: PUSH
15795: LD_INT 1
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 2
15804: NEG
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 2
15815: NEG
15816: PUSH
15817: LD_INT 1
15819: NEG
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 2
15827: NEG
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 3
15838: NEG
15839: PUSH
15840: LD_INT 0
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 3
15849: NEG
15850: PUSH
15851: LD_INT 1
15853: NEG
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15877: LD_ADDR_VAR 0 13
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: LD_INT 0
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 0
15894: PUSH
15895: LD_INT 1
15897: NEG
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 1
15905: PUSH
15906: LD_INT 0
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 0
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 1
15935: NEG
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 1
15946: NEG
15947: PUSH
15948: LD_INT 1
15950: NEG
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 1
15958: NEG
15959: PUSH
15960: LD_INT 2
15962: NEG
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: LD_INT 1
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: LD_INT 2
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 1
15990: PUSH
15991: LD_INT 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: NEG
16001: PUSH
16002: LD_INT 1
16004: NEG
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 2
16012: NEG
16013: PUSH
16014: LD_INT 2
16016: NEG
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 2
16024: NEG
16025: PUSH
16026: LD_INT 3
16028: NEG
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 3
16036: NEG
16037: PUSH
16038: LD_INT 2
16040: NEG
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 3
16048: NEG
16049: PUSH
16050: LD_INT 3
16052: NEG
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16076: LD_ADDR_VAR 0 14
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: LD_INT 0
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 0
16093: PUSH
16094: LD_INT 1
16096: NEG
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 1
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 1
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 0
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 1
16134: NEG
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 1
16145: NEG
16146: PUSH
16147: LD_INT 1
16149: NEG
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 1
16157: NEG
16158: PUSH
16159: LD_INT 2
16161: NEG
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 2
16172: NEG
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: LD_INT 1
16183: NEG
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: LD_INT 2
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 1
16211: NEG
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 1
16222: NEG
16223: PUSH
16224: LD_INT 3
16226: NEG
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 0
16234: PUSH
16235: LD_INT 3
16237: NEG
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: LD_INT 2
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16272: LD_ADDR_VAR 0 15
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 0
16289: PUSH
16290: LD_INT 1
16292: NEG
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: LD_INT 0
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: LD_INT 1
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 0
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 1
16330: NEG
16331: PUSH
16332: LD_INT 0
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 1
16341: NEG
16342: PUSH
16343: LD_INT 1
16345: NEG
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: LD_INT 1
16356: NEG
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 2
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 1
16384: NEG
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 2
16395: NEG
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 2
16406: NEG
16407: PUSH
16408: LD_INT 1
16410: NEG
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 1
16421: NEG
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 3
16429: PUSH
16430: LD_INT 0
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 3
16439: PUSH
16440: LD_INT 1
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16465: LD_ADDR_VAR 0 16
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 0
16482: PUSH
16483: LD_INT 1
16485: NEG
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: LD_INT 0
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: LD_INT 1
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 0
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 1
16523: NEG
16524: PUSH
16525: LD_INT 0
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: NEG
16535: PUSH
16536: LD_INT 1
16538: NEG
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 1
16546: NEG
16547: PUSH
16548: LD_INT 2
16550: NEG
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 2
16558: PUSH
16559: LD_INT 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: LD_INT 2
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 2
16588: NEG
16589: PUSH
16590: LD_INT 1
16592: NEG
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 2
16600: NEG
16601: PUSH
16602: LD_INT 2
16604: NEG
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 3
16612: PUSH
16613: LD_INT 2
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 3
16622: PUSH
16623: LD_INT 3
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: LD_INT 3
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16658: LD_ADDR_VAR 0 17
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: LD_INT 0
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 0
16675: PUSH
16676: LD_INT 1
16678: NEG
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: LD_INT 0
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 1
16716: NEG
16717: PUSH
16718: LD_INT 0
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 1
16727: NEG
16728: PUSH
16729: LD_INT 1
16731: NEG
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: NEG
16740: PUSH
16741: LD_INT 2
16743: NEG
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 2
16754: NEG
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: LD_INT 1
16765: NEG
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 2
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 2
16783: PUSH
16784: LD_INT 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: LD_INT 2
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: NEG
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 2
16834: NEG
16835: PUSH
16836: LD_INT 0
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 2
16845: NEG
16846: PUSH
16847: LD_INT 1
16849: NEG
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 2
16857: NEG
16858: PUSH
16859: LD_INT 2
16861: NEG
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16888: LD_ADDR_VAR 0 18
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: LD_INT 0
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 0
16905: PUSH
16906: LD_INT 1
16908: NEG
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 1
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 0
16936: PUSH
16937: LD_INT 1
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 1
16946: NEG
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 1
16957: NEG
16958: PUSH
16959: LD_INT 1
16961: NEG
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 1
16969: NEG
16970: PUSH
16971: LD_INT 2
16973: NEG
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: LD_INT 2
16984: NEG
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 1
16995: NEG
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 2
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 2
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: LD_INT 2
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 1
17053: NEG
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 2
17064: NEG
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 2
17075: NEG
17076: PUSH
17077: LD_INT 1
17079: NEG
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 2
17087: NEG
17088: PUSH
17089: LD_INT 2
17091: NEG
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17118: LD_ADDR_VAR 0 19
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: LD_INT 0
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: LD_INT 1
17138: NEG
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: LD_INT 0
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 1
17176: NEG
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 1
17187: NEG
17188: PUSH
17189: LD_INT 1
17191: NEG
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 1
17199: NEG
17200: PUSH
17201: LD_INT 2
17203: NEG
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 2
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: LD_INT 1
17225: NEG
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 2
17233: PUSH
17234: LD_INT 0
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 2
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: LD_INT 2
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 0
17273: PUSH
17274: LD_INT 2
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 1
17283: NEG
17284: PUSH
17285: LD_INT 1
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 2
17294: NEG
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 2
17305: NEG
17306: PUSH
17307: LD_INT 1
17309: NEG
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 2
17317: NEG
17318: PUSH
17319: LD_INT 2
17321: NEG
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17348: LD_ADDR_VAR 0 20
17352: PUSH
17353: LD_INT 0
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 0
17365: PUSH
17366: LD_INT 1
17368: NEG
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 0
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 1
17406: NEG
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: LD_INT 1
17421: NEG
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 1
17429: NEG
17430: PUSH
17431: LD_INT 2
17433: NEG
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 2
17444: NEG
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: LD_INT 1
17455: NEG
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 2
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: LD_INT 2
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: LD_INT 2
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 1
17513: NEG
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 2
17524: NEG
17525: PUSH
17526: LD_INT 0
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 2
17535: NEG
17536: PUSH
17537: LD_INT 1
17539: NEG
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 2
17547: NEG
17548: PUSH
17549: LD_INT 2
17551: NEG
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17578: LD_ADDR_VAR 0 21
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: LD_INT 0
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: LD_INT 1
17598: NEG
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 1
17636: NEG
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: LD_INT 1
17651: NEG
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 1
17659: NEG
17660: PUSH
17661: LD_INT 2
17663: NEG
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: LD_INT 2
17674: NEG
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 1
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: LD_INT 2
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 0
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 1
17743: NEG
17744: PUSH
17745: LD_INT 1
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 2
17754: NEG
17755: PUSH
17756: LD_INT 0
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 2
17765: NEG
17766: PUSH
17767: LD_INT 1
17769: NEG
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 2
17777: NEG
17778: PUSH
17779: LD_INT 2
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17808: LD_ADDR_VAR 0 22
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: LD_INT 0
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: LD_INT 1
17828: NEG
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 1
17866: NEG
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: NEG
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: LD_INT 2
17893: NEG
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 1
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: PUSH
17954: LD_INT 2
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: NEG
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 2
17984: NEG
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 2
17995: NEG
17996: PUSH
17997: LD_INT 1
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: LD_INT 2
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18038: LD_ADDR_VAR 0 23
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: LD_INT 0
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: LD_INT 1
18058: NEG
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: LD_INT 0
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 1
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: NEG
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: LD_INT 1
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PUSH
18121: LD_INT 2
18123: NEG
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: LD_INT 2
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: LD_INT 1
18145: NEG
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 2
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: NEG
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: NEG
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 2
18225: NEG
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: LD_INT 2
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: NEG
18250: PUSH
18251: LD_INT 3
18253: NEG
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 1
18261: NEG
18262: PUSH
18263: LD_INT 3
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: PUSH
18285: LD_INT 1
18287: NEG
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18318: LD_ADDR_VAR 0 24
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: LD_INT 1
18338: NEG
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: LD_INT 1
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 1
18387: NEG
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 1
18399: NEG
18400: PUSH
18401: LD_INT 2
18403: NEG
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 2
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 1
18425: NEG
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 2
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 2
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: NEG
18484: PUSH
18485: LD_INT 1
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 2
18494: NEG
18495: PUSH
18496: LD_INT 0
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 2
18517: NEG
18518: PUSH
18519: LD_INT 2
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 1
18543: NEG
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 3
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 3
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18594: LD_ADDR_VAR 0 25
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: NEG
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 2
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: PUSH
18730: LD_INT 2
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 2
18793: NEG
18794: PUSH
18795: LD_INT 2
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 3
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 3
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: LD_INT 3
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18868: LD_ADDR_VAR 0 26
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 0
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 1
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 1
18926: NEG
18927: PUSH
18928: LD_INT 0
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 1
18937: NEG
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: LD_INT 2
18953: NEG
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 2
18964: NEG
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 0
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: NEG
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 2
19044: NEG
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 2
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 3
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: NEG
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19144: LD_ADDR_VAR 0 27
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 0
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: NEG
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: LD_INT 2
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: LD_INT 2
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: LD_INT 1
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 2
19331: NEG
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: LD_INT 2
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 2
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 3
19377: NEG
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 3
19389: NEG
19390: PUSH
19391: LD_INT 2
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19424: LD_ADDR_VAR 0 28
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 0
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: LD_INT 1
19444: NEG
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 1
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: LD_INT 1
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: LD_INT 2
19509: NEG
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 2
19520: NEG
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: LD_INT 0
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: LD_INT 2
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: LD_INT 2
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 2
19600: NEG
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 2
19611: NEG
19612: PUSH
19613: LD_INT 1
19615: NEG
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 2
19623: NEG
19624: PUSH
19625: LD_INT 2
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: LD_INT 3
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: LD_INT 3
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 3
19659: NEG
19660: PUSH
19661: LD_INT 1
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 3
19671: NEG
19672: PUSH
19673: LD_INT 2
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19706: LD_ADDR_VAR 0 29
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 1
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: LD_INT 1
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: LD_INT 2
19791: NEG
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 2
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: NEG
19873: PUSH
19874: LD_INT 1
19876: NEG
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: LD_INT 2
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: NEG
19897: PUSH
19898: LD_INT 3
19900: NEG
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 2
19908: PUSH
19909: LD_INT 1
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 3
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 3
19950: NEG
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19985: LD_ADDR_VAR 0 30
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: NEG
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 1
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 2
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 2
20151: NEG
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: NEG
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 1
20174: NEG
20175: PUSH
20176: LD_INT 3
20178: NEG
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 3
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: LD_INT 3
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 3
20228: NEG
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20263: LD_ADDR_VAR 0 31
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: LD_INT 1
20283: NEG
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: LD_INT 2
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: NEG
20429: PUSH
20430: LD_INT 1
20432: NEG
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: NEG
20441: PUSH
20442: LD_INT 2
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: NEG
20453: PUSH
20454: LD_INT 3
20456: NEG
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: LD_INT 1
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 3
20475: PUSH
20476: LD_INT 1
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: LD_INT 3
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: NEG
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 3
20506: NEG
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20541: LD_ADDR_VAR 0 32
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: LD_INT 2
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 2
20707: NEG
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: LD_INT 3
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 3
20753: PUSH
20754: LD_INT 2
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: NEG
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 3
20784: NEG
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20819: LD_ADDR_VAR 0 33
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 1
20839: NEG
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 2
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 2
20985: NEG
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: NEG
20998: PUSH
20999: LD_INT 2
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: LD_INT 3
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 3
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: LD_INT 3
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: NEG
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 3
21063: NEG
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21098: LD_ADDR_VAR 0 34
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: LD_INT 0
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: LD_INT 1
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 1
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: LD_INT 2
21194: NEG
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 2
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 2
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: NEG
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: NEG
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 2
21277: NEG
21278: PUSH
21279: LD_INT 2
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 3
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 3
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 3
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: NEG
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 3
21343: NEG
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21378: LD_ADDR_VAR 0 35
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: LD_INT 0
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: LD_INT 1
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 1
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: NEG
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21490: LD_ADDR_VAR 0 36
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: LD_INT 1
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 0
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: NEG
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: LD_INT 1
21563: NEG
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: LD_INT 2
21575: NEG
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21602: LD_ADDR_VAR 0 37
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 1
21622: NEG
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: LD_INT 0
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: LD_INT 1
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 1
21660: NEG
21661: PUSH
21662: LD_INT 0
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: LD_INT 1
21675: NEG
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21714: LD_ADDR_VAR 0 38
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: NEG
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: LD_INT 1
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21826: LD_ADDR_VAR 0 39
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 0
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: LD_INT 0
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 1
21907: NEG
21908: PUSH
21909: LD_INT 2
21911: NEG
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21938: LD_ADDR_VAR 0 40
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: LD_INT 1
21958: NEG
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22050: LD_ADDR_VAR 0 41
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: NEG
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 2
22228: NEG
22229: PUSH
22230: LD_INT 2
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: NEG
22241: PUSH
22242: LD_INT 3
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 3
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 3
22293: PUSH
22294: LD_INT 3
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 2
22313: NEG
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 3
22324: NEG
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 3
22335: NEG
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 3
22347: NEG
22348: PUSH
22349: LD_INT 2
22351: NEG
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 3
22359: NEG
22360: PUSH
22361: LD_INT 3
22363: NEG
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22400: LD_ADDR_VAR 0 42
22404: PUSH
22405: LD_INT 0
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: NEG
22459: PUSH
22460: LD_INT 0
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: LD_INT 2
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: LD_INT 2
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 2
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 2
22566: NEG
22567: PUSH
22568: LD_INT 1
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 2
22578: NEG
22579: PUSH
22580: LD_INT 2
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 2
22590: NEG
22591: PUSH
22592: LD_INT 3
22594: NEG
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: LD_INT 3
22606: NEG
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 3
22617: NEG
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 3
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: LD_INT 3
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 3
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: LD_INT 3
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: LD_INT 2
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 3
22697: NEG
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 3
22709: NEG
22710: PUSH
22711: LD_INT 3
22713: NEG
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22750: LD_ADDR_VAR 0 43
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: LD_INT 1
22823: NEG
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: NEG
22832: PUSH
22833: LD_INT 2
22835: NEG
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 2
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: LD_INT 1
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 1
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: LD_INT 3
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: LD_INT 3
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 3
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 3
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 3
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 3
23046: NEG
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23098: LD_ADDR_VAR 0 44
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 1
23156: NEG
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: LD_INT 3
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 3
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 3
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: LD_INT 3
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 2
23361: NEG
23362: PUSH
23363: LD_INT 1
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 3
23372: NEG
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 3
23383: NEG
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 3
23395: NEG
23396: PUSH
23397: LD_INT 2
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: NEG
23408: PUSH
23409: LD_INT 3
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23448: LD_ADDR_VAR 0 45
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 2
23626: NEG
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: LD_INT 3
23642: NEG
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: LD_INT 3
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: LD_INT 3
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 3
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: LD_INT 3
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 3
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: LD_INT 3
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 3
23745: NEG
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 3
23757: NEG
23758: PUSH
23759: LD_INT 3
23761: NEG
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23798: LD_ADDR_VAR 0 46
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: NEG
23880: PUSH
23881: LD_INT 2
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 2
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 1
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 2
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 2
23964: NEG
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: LD_INT 3
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 3
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 2
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 3
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 3
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: LD_INT 3
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 2
24083: NEG
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 3
24094: NEG
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 3
24105: NEG
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24146: LD_ADDR_VAR 0 47
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 2
24261: NEG
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: LD_INT 2
24277: NEG
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24297: LD_ADDR_VAR 0 48
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: NEG
24379: PUSH
24380: LD_INT 2
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 2
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24444: LD_ADDR_VAR 0 49
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: LD_INT 2
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24588: LD_ADDR_VAR 0 50
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 1
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 1
24657: NEG
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 1
24689: PUSH
24690: LD_INT 2
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24732: LD_ADDR_VAR 0 51
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: NEG
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: LD_INT 1
24805: NEG
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: LD_INT 2
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24879: LD_ADDR_VAR 0 52
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: LD_INT 2
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: NEG
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 2
24983: NEG
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: NEG
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: LD_INT 2
25010: NEG
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25030: LD_ADDR_VAR 0 53
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 1
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: LD_INT 2
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 2
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 2
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: NEG
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: NEG
25230: PUSH
25231: LD_INT 2
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25260: LD_ADDR_VAR 0 54
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: NEG
25342: PUSH
25343: LD_INT 2
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 2
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: NEG
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: NEG
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 2
25459: NEG
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25490: LD_ADDR_VAR 0 55
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 1
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 2
25586: NEG
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: LD_INT 2
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: NEG
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: NEG
25690: PUSH
25691: LD_INT 2
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25720: LD_ADDR_VAR 0 56
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: LD_INT 1
25740: NEG
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: LD_INT 2
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: LD_INT 2
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: NEG
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: NEG
25908: PUSH
25909: LD_INT 1
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 2
25919: NEG
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25950: LD_ADDR_VAR 0 57
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 1
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: LD_INT 2
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 2
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 2
26126: NEG
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: LD_INT 1
26141: NEG
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 2
26149: NEG
26150: PUSH
26151: LD_INT 2
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26180: LD_ADDR_VAR 0 58
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 2
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 2
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 2
26356: NEG
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 2
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26410: LD_ADDR_VAR 0 59
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26498: LD_ADDR_VAR 0 60
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26586: LD_ADDR_VAR 0 61
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26674: LD_ADDR_VAR 0 62
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26762: LD_ADDR_VAR 0 63
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: NEG
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26850: LD_ADDR_VAR 0 64
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: NEG
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: ST_TO_ADDR
// end ; 1 :
26938: GO 32835
26940: LD_INT 1
26942: DOUBLE
26943: EQUAL
26944: IFTRUE 26948
26946: GO 29571
26948: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26949: LD_ADDR_VAR 0 11
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: LD_INT 3
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 3
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: LD_INT 2
26982: NEG
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: LIST
26992: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26993: LD_ADDR_VAR 0 12
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 3
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 3
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27034: LD_ADDR_VAR 0 13
27038: PUSH
27039: LD_INT 3
27041: PUSH
27042: LD_INT 2
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: LD_INT 3
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: LD_INT 3
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27074: LD_ADDR_VAR 0 14
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27115: LD_ADDR_VAR 0 15
27119: PUSH
27120: LD_INT 2
27122: NEG
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 3
27133: NEG
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 3
27144: NEG
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27159: LD_ADDR_VAR 0 16
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: LD_INT 3
27170: NEG
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 3
27178: NEG
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 3
27190: NEG
27191: PUSH
27192: LD_INT 3
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27205: LD_ADDR_VAR 0 17
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 3
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 3
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 2
27238: NEG
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27249: LD_ADDR_VAR 0 18
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 3
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 3
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27290: LD_ADDR_VAR 0 19
27294: PUSH
27295: LD_INT 3
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 3
27307: PUSH
27308: LD_INT 3
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 3
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27330: LD_ADDR_VAR 0 20
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 3
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27371: LD_ADDR_VAR 0 21
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 3
27389: NEG
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 3
27400: NEG
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: LIST
27414: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27415: LD_ADDR_VAR 0 22
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: LD_INT 3
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 3
27434: NEG
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 3
27446: NEG
27447: PUSH
27448: LD_INT 3
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27461: LD_ADDR_VAR 0 23
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 3
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 4
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 3
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27505: LD_ADDR_VAR 0 24
27509: PUSH
27510: LD_INT 3
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 4
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27546: LD_ADDR_VAR 0 25
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: LD_INT 3
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 4
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 3
27573: PUSH
27574: LD_INT 4
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27586: LD_ADDR_VAR 0 26
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: LD_INT 3
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 4
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27627: LD_ADDR_VAR 0 27
27631: PUSH
27632: LD_INT 3
27634: NEG
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 3
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 4
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27671: LD_ADDR_VAR 0 28
27675: PUSH
27676: LD_INT 3
27678: NEG
27679: PUSH
27680: LD_INT 3
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 3
27690: NEG
27691: PUSH
27692: LD_INT 4
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 4
27702: NEG
27703: PUSH
27704: LD_INT 3
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27717: LD_ADDR_VAR 0 29
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: LD_INT 3
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 3
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 2
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: LD_INT 4
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 4
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: LD_INT 3
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: LD_INT 5
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: LD_INT 5
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 4
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: LD_INT 6
27830: NEG
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: LD_INT 6
27841: NEG
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: LD_INT 5
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27872: LD_ADDR_VAR 0 30
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 4
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 4
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 4
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 5
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 5
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 6
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 6
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28015: LD_ADDR_VAR 0 31
28019: PUSH
28020: LD_INT 3
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 3
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 3
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 4
28052: PUSH
28053: LD_INT 3
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 4
28062: PUSH
28063: LD_INT 4
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: LD_INT 4
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 5
28082: PUSH
28083: LD_INT 4
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 5
28092: PUSH
28093: LD_INT 5
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 4
28102: PUSH
28103: LD_INT 5
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 6
28112: PUSH
28113: LD_INT 5
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 6
28122: PUSH
28123: LD_INT 6
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 5
28132: PUSH
28133: LD_INT 6
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28154: LD_ADDR_VAR 0 32
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 3
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 4
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 4
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 3
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 5
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 0
28233: PUSH
28234: LD_INT 5
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: LD_INT 4
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: LD_INT 6
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: LD_INT 6
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: LD_INT 5
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28297: LD_ADDR_VAR 0 33
28301: PUSH
28302: LD_INT 2
28304: NEG
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 3
28315: NEG
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 3
28326: NEG
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 3
28338: NEG
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 4
28349: NEG
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 4
28360: NEG
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 4
28372: NEG
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 5
28383: NEG
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 5
28394: NEG
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 5
28406: NEG
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 6
28417: NEG
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 6
28428: NEG
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28452: LD_ADDR_VAR 0 34
28456: PUSH
28457: LD_INT 2
28459: NEG
28460: PUSH
28461: LD_INT 3
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 3
28471: NEG
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 3
28483: NEG
28484: PUSH
28485: LD_INT 3
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 3
28495: NEG
28496: PUSH
28497: LD_INT 4
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 4
28507: NEG
28508: PUSH
28509: LD_INT 3
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 4
28519: NEG
28520: PUSH
28521: LD_INT 4
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 4
28531: NEG
28532: PUSH
28533: LD_INT 5
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 5
28543: NEG
28544: PUSH
28545: LD_INT 4
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 5
28555: NEG
28556: PUSH
28557: LD_INT 5
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 5
28567: NEG
28568: PUSH
28569: LD_INT 6
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 6
28579: NEG
28580: PUSH
28581: LD_INT 5
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 6
28591: NEG
28592: PUSH
28593: LD_INT 6
28595: NEG
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28615: LD_ADDR_VAR 0 41
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 2
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 3
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28659: LD_ADDR_VAR 0 42
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 3
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28700: LD_ADDR_VAR 0 43
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: LD_INT 3
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28740: LD_ADDR_VAR 0 44
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28781: LD_ADDR_VAR 0 45
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 3
28810: NEG
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28825: LD_ADDR_VAR 0 46
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 2
28844: NEG
28845: PUSH
28846: LD_INT 3
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: NEG
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28871: LD_ADDR_VAR 0 47
28875: PUSH
28876: LD_INT 2
28878: NEG
28879: PUSH
28880: LD_INT 3
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 3
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28904: LD_ADDR_VAR 0 48
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28935: LD_ADDR_VAR 0 49
28939: PUSH
28940: LD_INT 3
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 3
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28964: LD_ADDR_VAR 0 50
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 3
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 3
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28993: LD_ADDR_VAR 0 51
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: NEG
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29024: LD_ADDR_VAR 0 52
29028: PUSH
29029: LD_INT 3
29031: NEG
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 3
29043: NEG
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29057: LD_ADDR_VAR 0 53
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: LD_INT 3
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: LD_INT 3
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: LD_INT 2
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: LIST
29100: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29101: LD_ADDR_VAR 0 54
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 3
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 3
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29142: LD_ADDR_VAR 0 55
29146: PUSH
29147: LD_INT 3
29149: PUSH
29150: LD_INT 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: LD_INT 3
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: LD_INT 3
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: LIST
29181: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29182: LD_ADDR_VAR 0 56
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: LD_INT 3
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: LD_INT 3
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29223: LD_ADDR_VAR 0 57
29227: PUSH
29228: LD_INT 2
29230: NEG
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 3
29241: NEG
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 3
29252: NEG
29253: PUSH
29254: LD_INT 1
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29267: LD_ADDR_VAR 0 58
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 3
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 3
29298: NEG
29299: PUSH
29300: LD_INT 3
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29313: LD_ADDR_VAR 0 59
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: LD_INT 2
29324: NEG
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 2
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29357: LD_ADDR_VAR 0 60
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29398: LD_ADDR_VAR 0 61
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29438: LD_ADDR_VAR 0 62
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29479: LD_ADDR_VAR 0 63
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29523: LD_ADDR_VAR 0 64
29527: PUSH
29528: LD_INT 1
29530: NEG
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 2
29542: NEG
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: ST_TO_ADDR
// end ; 2 :
29569: GO 32835
29571: LD_INT 2
29573: DOUBLE
29574: EQUAL
29575: IFTRUE 29579
29577: GO 32834
29579: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29580: LD_ADDR_VAR 0 29
29584: PUSH
29585: LD_INT 4
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 4
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 5
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 5
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 4
29628: PUSH
29629: LD_INT 1
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 5
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 3
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 4
29700: PUSH
29701: LD_INT 3
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 4
29710: PUSH
29711: LD_INT 4
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: LD_INT 4
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 3
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 4
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: LD_INT 4
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: LD_INT 4
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 4
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: LD_INT 5
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 5
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: LD_INT 4
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 3
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: LD_INT 5
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: LD_INT 3
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 3
29863: NEG
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: NEG
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 3
29908: NEG
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 4
29919: NEG
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 4
29930: NEG
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 4
29942: NEG
29943: PUSH
29944: LD_INT 2
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: LD_INT 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 4
29965: NEG
29966: PUSH
29967: LD_INT 4
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 4
29977: NEG
29978: PUSH
29979: LD_INT 5
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 3
29989: NEG
29990: PUSH
29991: LD_INT 4
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 3
30001: NEG
30002: PUSH
30003: LD_INT 3
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 4
30013: NEG
30014: PUSH
30015: LD_INT 3
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 5
30025: NEG
30026: PUSH
30027: LD_INT 4
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 5
30037: NEG
30038: PUSH
30039: LD_INT 5
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 3
30049: NEG
30050: PUSH
30051: LD_INT 5
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 5
30061: NEG
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30118: LD_ADDR_VAR 0 30
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: LD_INT 4
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 4
30135: PUSH
30136: LD_INT 3
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: LD_INT 4
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: LD_INT 5
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 4
30165: PUSH
30166: LD_INT 5
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 3
30175: PUSH
30176: LD_INT 4
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: LD_INT 3
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 5
30195: PUSH
30196: LD_INT 3
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 3
30205: PUSH
30206: LD_INT 5
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: LD_INT 4
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 4
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 2
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: LD_INT 4
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 4
30308: NEG
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 4
30319: NEG
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 3
30331: NEG
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 3
30342: NEG
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 4
30353: NEG
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 5
30364: NEG
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 5
30375: NEG
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 5
30387: NEG
30388: PUSH
30389: LD_INT 2
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 3
30410: NEG
30411: PUSH
30412: LD_INT 3
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: LD_INT 4
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: LD_INT 3
30438: NEG
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: LD_INT 2
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 3
30458: NEG
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 4
30470: NEG
30471: PUSH
30472: LD_INT 3
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 4
30482: NEG
30483: PUSH
30484: LD_INT 4
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 4
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: LD_INT 4
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 5
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: LD_INT 4
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 3
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: LD_INT 4
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: LD_INT 5
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: LD_INT 5
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30665: LD_ADDR_VAR 0 31
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: LD_INT 4
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 4
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 5
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 5
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 3
30765: NEG
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 3
30776: NEG
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 2
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 4
30821: NEG
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 4
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 4
30867: NEG
30868: PUSH
30869: LD_INT 4
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 4
30879: NEG
30880: PUSH
30881: LD_INT 5
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 3
30891: NEG
30892: PUSH
30893: LD_INT 4
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 3
30903: NEG
30904: PUSH
30905: LD_INT 3
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 4
30915: NEG
30916: PUSH
30917: LD_INT 3
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 5
30927: NEG
30928: PUSH
30929: LD_INT 4
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 5
30939: NEG
30940: PUSH
30941: LD_INT 5
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: LD_INT 5
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 5
30963: NEG
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 0
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 4
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 3
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: LD_INT 2
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 3
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: LD_INT 4
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 2
31065: NEG
31066: PUSH
31067: LD_INT 4
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 4
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 5
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 5
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 4
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 5
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31215: LD_ADDR_VAR 0 32
31219: PUSH
31220: LD_INT 4
31222: NEG
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 4
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 3
31245: NEG
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 3
31256: NEG
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 4
31267: NEG
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 5
31278: NEG
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 5
31289: NEG
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 5
31301: NEG
31302: PUSH
31303: LD_INT 2
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: NEG
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 3
31324: NEG
31325: PUSH
31326: LD_INT 3
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: LD_INT 4
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 3
31372: NEG
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 4
31384: NEG
31385: PUSH
31386: LD_INT 3
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 4
31396: NEG
31397: PUSH
31398: LD_INT 4
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: LD_INT 4
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 4
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: LD_INT 4
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 5
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: LD_INT 4
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 3
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 3
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: LD_INT 4
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: LD_INT 5
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: LD_INT 3
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 5
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 4
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 4
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: LD_INT 4
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 4
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 5
31647: PUSH
31648: LD_INT 4
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 5
31657: PUSH
31658: LD_INT 5
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 4
31667: PUSH
31668: LD_INT 5
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: LD_INT 4
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 5
31697: PUSH
31698: LD_INT 3
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: LD_INT 5
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31762: LD_ADDR_VAR 0 33
31766: PUSH
31767: LD_INT 4
31769: NEG
31770: PUSH
31771: LD_INT 4
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 4
31781: NEG
31782: PUSH
31783: LD_INT 5
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: LD_INT 4
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: LD_INT 3
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 4
31817: NEG
31818: PUSH
31819: LD_INT 3
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 5
31829: NEG
31830: PUSH
31831: LD_INT 4
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 5
31841: NEG
31842: PUSH
31843: LD_INT 5
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 3
31853: NEG
31854: PUSH
31855: LD_INT 5
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 5
31865: NEG
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 3
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 4
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: LD_INT 3
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: NEG
31933: PUSH
31934: LD_INT 3
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 4
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 2
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 2
31967: NEG
31968: PUSH
31969: LD_INT 4
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 4
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 5
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 5
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 4
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 3
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 5
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 4
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 4
32102: PUSH
32103: LD_INT 4
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 3
32112: PUSH
32113: LD_INT 4
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: LD_INT 2
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 4
32142: PUSH
32143: LD_INT 2
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: LD_INT 4
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 4
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 5
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: LD_INT 5
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 5
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 3
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32300: LD_ADDR_VAR 0 34
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: LD_INT 4
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: LD_INT 5
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 4
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: LD_INT 3
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: LD_INT 4
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: LD_INT 5
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: LD_INT 3
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: LD_INT 5
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 3
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 4
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 4
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 4
32502: PUSH
32503: LD_INT 4
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 4
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 5
32522: PUSH
32523: LD_INT 4
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 5
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: LD_INT 5
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 5
32572: PUSH
32573: LD_INT 3
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: PUSH
32613: LD_INT 3
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 1
32622: PUSH
32623: LD_INT 4
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: LD_INT 4
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 4
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 4
32685: NEG
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 4
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 3
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 4
32730: NEG
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 5
32741: NEG
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 5
32752: NEG
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 5
32764: NEG
32765: PUSH
32766: LD_INT 2
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: NEG
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
// end ; end ;
32832: GO 32835
32834: POP
// case btype of b_depot , b_warehouse :
32835: LD_VAR 0 1
32839: PUSH
32840: LD_INT 0
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32854
32846: LD_INT 1
32848: DOUBLE
32849: EQUAL
32850: IFTRUE 32854
32852: GO 33055
32854: POP
// case nation of nation_american :
32855: LD_VAR 0 5
32859: PUSH
32860: LD_INT 1
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32924
32868: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32869: LD_ADDR_VAR 0 9
32873: PUSH
32874: LD_VAR 0 11
32878: PUSH
32879: LD_VAR 0 12
32883: PUSH
32884: LD_VAR 0 13
32888: PUSH
32889: LD_VAR 0 14
32893: PUSH
32894: LD_VAR 0 15
32898: PUSH
32899: LD_VAR 0 16
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: PUSH
32912: LD_VAR 0 4
32916: PUSH
32917: LD_INT 1
32919: PLUS
32920: ARRAY
32921: ST_TO_ADDR
32922: GO 33053
32924: LD_INT 2
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32988
32932: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32933: LD_ADDR_VAR 0 9
32937: PUSH
32938: LD_VAR 0 17
32942: PUSH
32943: LD_VAR 0 18
32947: PUSH
32948: LD_VAR 0 19
32952: PUSH
32953: LD_VAR 0 20
32957: PUSH
32958: LD_VAR 0 21
32962: PUSH
32963: LD_VAR 0 22
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: PUSH
32976: LD_VAR 0 4
32980: PUSH
32981: LD_INT 1
32983: PLUS
32984: ARRAY
32985: ST_TO_ADDR
32986: GO 33053
32988: LD_INT 3
32990: DOUBLE
32991: EQUAL
32992: IFTRUE 32996
32994: GO 33052
32996: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32997: LD_ADDR_VAR 0 9
33001: PUSH
33002: LD_VAR 0 23
33006: PUSH
33007: LD_VAR 0 24
33011: PUSH
33012: LD_VAR 0 25
33016: PUSH
33017: LD_VAR 0 26
33021: PUSH
33022: LD_VAR 0 27
33026: PUSH
33027: LD_VAR 0 28
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: PUSH
33040: LD_VAR 0 4
33044: PUSH
33045: LD_INT 1
33047: PLUS
33048: ARRAY
33049: ST_TO_ADDR
33050: GO 33053
33052: POP
33053: GO 33608
33055: LD_INT 2
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33069
33061: LD_INT 3
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33125
33069: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_VAR 0 29
33079: PUSH
33080: LD_VAR 0 30
33084: PUSH
33085: LD_VAR 0 31
33089: PUSH
33090: LD_VAR 0 32
33094: PUSH
33095: LD_VAR 0 33
33099: PUSH
33100: LD_VAR 0 34
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: PUSH
33113: LD_VAR 0 4
33117: PUSH
33118: LD_INT 1
33120: PLUS
33121: ARRAY
33122: ST_TO_ADDR
33123: GO 33608
33125: LD_INT 16
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33187
33131: LD_INT 17
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33187
33137: LD_INT 18
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33187
33143: LD_INT 19
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33187
33149: LD_INT 22
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33187
33155: LD_INT 20
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33187
33161: LD_INT 21
33163: DOUBLE
33164: EQUAL
33165: IFTRUE 33187
33167: LD_INT 23
33169: DOUBLE
33170: EQUAL
33171: IFTRUE 33187
33173: LD_INT 24
33175: DOUBLE
33176: EQUAL
33177: IFTRUE 33187
33179: LD_INT 25
33181: DOUBLE
33182: EQUAL
33183: IFTRUE 33187
33185: GO 33243
33187: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33188: LD_ADDR_VAR 0 9
33192: PUSH
33193: LD_VAR 0 35
33197: PUSH
33198: LD_VAR 0 36
33202: PUSH
33203: LD_VAR 0 37
33207: PUSH
33208: LD_VAR 0 38
33212: PUSH
33213: LD_VAR 0 39
33217: PUSH
33218: LD_VAR 0 40
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: PUSH
33231: LD_VAR 0 4
33235: PUSH
33236: LD_INT 1
33238: PLUS
33239: ARRAY
33240: ST_TO_ADDR
33241: GO 33608
33243: LD_INT 6
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33299
33249: LD_INT 7
33251: DOUBLE
33252: EQUAL
33253: IFTRUE 33299
33255: LD_INT 8
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33299
33261: LD_INT 13
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33299
33267: LD_INT 12
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33299
33273: LD_INT 15
33275: DOUBLE
33276: EQUAL
33277: IFTRUE 33299
33279: LD_INT 11
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33299
33285: LD_INT 14
33287: DOUBLE
33288: EQUAL
33289: IFTRUE 33299
33291: LD_INT 10
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33299
33297: GO 33355
33299: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33300: LD_ADDR_VAR 0 9
33304: PUSH
33305: LD_VAR 0 41
33309: PUSH
33310: LD_VAR 0 42
33314: PUSH
33315: LD_VAR 0 43
33319: PUSH
33320: LD_VAR 0 44
33324: PUSH
33325: LD_VAR 0 45
33329: PUSH
33330: LD_VAR 0 46
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: PUSH
33343: LD_VAR 0 4
33347: PUSH
33348: LD_INT 1
33350: PLUS
33351: ARRAY
33352: ST_TO_ADDR
33353: GO 33608
33355: LD_INT 36
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33419
33363: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33364: LD_ADDR_VAR 0 9
33368: PUSH
33369: LD_VAR 0 47
33373: PUSH
33374: LD_VAR 0 48
33378: PUSH
33379: LD_VAR 0 49
33383: PUSH
33384: LD_VAR 0 50
33388: PUSH
33389: LD_VAR 0 51
33393: PUSH
33394: LD_VAR 0 52
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: PUSH
33407: LD_VAR 0 4
33411: PUSH
33412: LD_INT 1
33414: PLUS
33415: ARRAY
33416: ST_TO_ADDR
33417: GO 33608
33419: LD_INT 4
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33445
33425: LD_INT 5
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33445
33431: LD_INT 34
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33445
33437: LD_INT 37
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33501
33445: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33446: LD_ADDR_VAR 0 9
33450: PUSH
33451: LD_VAR 0 53
33455: PUSH
33456: LD_VAR 0 54
33460: PUSH
33461: LD_VAR 0 55
33465: PUSH
33466: LD_VAR 0 56
33470: PUSH
33471: LD_VAR 0 57
33475: PUSH
33476: LD_VAR 0 58
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: PUSH
33489: LD_VAR 0 4
33493: PUSH
33494: LD_INT 1
33496: PLUS
33497: ARRAY
33498: ST_TO_ADDR
33499: GO 33608
33501: LD_INT 31
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33551
33507: LD_INT 32
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33551
33513: LD_INT 33
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33551
33519: LD_INT 27
33521: DOUBLE
33522: EQUAL
33523: IFTRUE 33551
33525: LD_INT 26
33527: DOUBLE
33528: EQUAL
33529: IFTRUE 33551
33531: LD_INT 28
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33551
33537: LD_INT 29
33539: DOUBLE
33540: EQUAL
33541: IFTRUE 33551
33543: LD_INT 30
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33551
33549: GO 33607
33551: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33552: LD_ADDR_VAR 0 9
33556: PUSH
33557: LD_VAR 0 59
33561: PUSH
33562: LD_VAR 0 60
33566: PUSH
33567: LD_VAR 0 61
33571: PUSH
33572: LD_VAR 0 62
33576: PUSH
33577: LD_VAR 0 63
33581: PUSH
33582: LD_VAR 0 64
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: PUSH
33595: LD_VAR 0 4
33599: PUSH
33600: LD_INT 1
33602: PLUS
33603: ARRAY
33604: ST_TO_ADDR
33605: GO 33608
33607: POP
// temp_list2 = [ ] ;
33608: LD_ADDR_VAR 0 10
33612: PUSH
33613: EMPTY
33614: ST_TO_ADDR
// for i in temp_list do
33615: LD_ADDR_VAR 0 8
33619: PUSH
33620: LD_VAR 0 9
33624: PUSH
33625: FOR_IN
33626: IFFALSE 33678
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33628: LD_ADDR_VAR 0 10
33632: PUSH
33633: LD_VAR 0 10
33637: PUSH
33638: LD_VAR 0 8
33642: PUSH
33643: LD_INT 1
33645: ARRAY
33646: PUSH
33647: LD_VAR 0 2
33651: PLUS
33652: PUSH
33653: LD_VAR 0 8
33657: PUSH
33658: LD_INT 2
33660: ARRAY
33661: PUSH
33662: LD_VAR 0 3
33666: PLUS
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: ADD
33675: ST_TO_ADDR
33676: GO 33625
33678: POP
33679: POP
// result = temp_list2 ;
33680: LD_ADDR_VAR 0 7
33684: PUSH
33685: LD_VAR 0 10
33689: ST_TO_ADDR
// end ;
33690: LD_VAR 0 7
33694: RET
// export function EnemyInRange ( unit , dist ) ; begin
33695: LD_INT 0
33697: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: LD_VAR 0 1
33707: PPUSH
33708: CALL_OW 255
33712: PPUSH
33713: LD_VAR 0 1
33717: PPUSH
33718: CALL_OW 250
33722: PPUSH
33723: LD_VAR 0 1
33727: PPUSH
33728: CALL_OW 251
33732: PPUSH
33733: LD_VAR 0 2
33737: PPUSH
33738: CALL 6952 0 4
33742: PUSH
33743: LD_INT 4
33745: ARRAY
33746: ST_TO_ADDR
// end ;
33747: LD_VAR 0 3
33751: RET
// export function PlayerSeeMe ( unit ) ; begin
33752: LD_INT 0
33754: PPUSH
// result := See ( your_side , unit ) ;
33755: LD_ADDR_VAR 0 2
33759: PUSH
33760: LD_OWVAR 2
33764: PPUSH
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 292
33774: ST_TO_ADDR
// end ;
33775: LD_VAR 0 2
33779: RET
// export function ReverseDir ( unit ) ; begin
33780: LD_INT 0
33782: PPUSH
// if not unit then
33783: LD_VAR 0 1
33787: NOT
33788: IFFALSE 33792
// exit ;
33790: GO 33815
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33792: LD_ADDR_VAR 0 2
33796: PUSH
33797: LD_VAR 0 1
33801: PPUSH
33802: CALL_OW 254
33806: PUSH
33807: LD_INT 3
33809: PLUS
33810: PUSH
33811: LD_INT 6
33813: MOD
33814: ST_TO_ADDR
// end ;
33815: LD_VAR 0 2
33819: RET
// export function ReverseArray ( array ) ; var i ; begin
33820: LD_INT 0
33822: PPUSH
33823: PPUSH
// if not array then
33824: LD_VAR 0 1
33828: NOT
33829: IFFALSE 33833
// exit ;
33831: GO 33888
// result := [ ] ;
33833: LD_ADDR_VAR 0 2
33837: PUSH
33838: EMPTY
33839: ST_TO_ADDR
// for i := array downto 1 do
33840: LD_ADDR_VAR 0 3
33844: PUSH
33845: DOUBLE
33846: LD_VAR 0 1
33850: INC
33851: ST_TO_ADDR
33852: LD_INT 1
33854: PUSH
33855: FOR_DOWNTO
33856: IFFALSE 33886
// result := Join ( result , array [ i ] ) ;
33858: LD_ADDR_VAR 0 2
33862: PUSH
33863: LD_VAR 0 2
33867: PPUSH
33868: LD_VAR 0 1
33872: PUSH
33873: LD_VAR 0 3
33877: ARRAY
33878: PPUSH
33879: CALL 38740 0 2
33883: ST_TO_ADDR
33884: GO 33855
33886: POP
33887: POP
// end ;
33888: LD_VAR 0 2
33892: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33893: LD_INT 0
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
// if not unit or not hexes then
33901: LD_VAR 0 1
33905: NOT
33906: IFTRUE 33915
33908: PUSH
33909: LD_VAR 0 2
33913: NOT
33914: OR
33915: IFFALSE 33919
// exit ;
33917: GO 34042
// dist := 9999 ;
33919: LD_ADDR_VAR 0 5
33923: PUSH
33924: LD_INT 9999
33926: ST_TO_ADDR
// for i = 1 to hexes do
33927: LD_ADDR_VAR 0 4
33931: PUSH
33932: DOUBLE
33933: LD_INT 1
33935: DEC
33936: ST_TO_ADDR
33937: LD_VAR 0 2
33941: PUSH
33942: FOR_TO
33943: IFFALSE 34030
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33945: LD_ADDR_VAR 0 6
33949: PUSH
33950: LD_VAR 0 1
33954: PPUSH
33955: LD_VAR 0 2
33959: PUSH
33960: LD_VAR 0 4
33964: ARRAY
33965: PUSH
33966: LD_INT 1
33968: ARRAY
33969: PPUSH
33970: LD_VAR 0 2
33974: PUSH
33975: LD_VAR 0 4
33979: ARRAY
33980: PUSH
33981: LD_INT 2
33983: ARRAY
33984: PPUSH
33985: CALL_OW 297
33989: ST_TO_ADDR
// if tdist < dist then
33990: LD_VAR 0 6
33994: PUSH
33995: LD_VAR 0 5
33999: LESS
34000: IFFALSE 34028
// begin hex := hexes [ i ] ;
34002: LD_ADDR_VAR 0 8
34006: PUSH
34007: LD_VAR 0 2
34011: PUSH
34012: LD_VAR 0 4
34016: ARRAY
34017: ST_TO_ADDR
// dist := tdist ;
34018: LD_ADDR_VAR 0 5
34022: PUSH
34023: LD_VAR 0 6
34027: ST_TO_ADDR
// end ; end ;
34028: GO 33942
34030: POP
34031: POP
// result := hex ;
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_VAR 0 8
34041: ST_TO_ADDR
// end ;
34042: LD_VAR 0 3
34046: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34047: LD_INT 0
34049: PPUSH
34050: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34051: LD_VAR 0 1
34055: NOT
34056: IFTRUE 34095
34058: PUSH
34059: LD_VAR 0 1
34063: PUSH
34064: LD_INT 21
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 23
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PPUSH
34088: CALL_OW 69
34092: IN
34093: NOT
34094: OR
34095: IFFALSE 34099
// exit ;
34097: GO 34146
// for i = 1 to 3 do
34099: LD_ADDR_VAR 0 3
34103: PUSH
34104: DOUBLE
34105: LD_INT 1
34107: DEC
34108: ST_TO_ADDR
34109: LD_INT 3
34111: PUSH
34112: FOR_TO
34113: IFFALSE 34144
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34115: LD_VAR 0 1
34119: PPUSH
34120: CALL_OW 250
34124: PPUSH
34125: LD_VAR 0 1
34129: PPUSH
34130: CALL_OW 251
34134: PPUSH
34135: LD_INT 1
34137: PPUSH
34138: CALL_OW 453
34142: GO 34112
34144: POP
34145: POP
// end ;
34146: LD_VAR 0 2
34150: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34151: LD_INT 0
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
// if not unit or not enemy_unit then
34159: LD_VAR 0 1
34163: NOT
34164: IFTRUE 34173
34166: PUSH
34167: LD_VAR 0 2
34171: NOT
34172: OR
34173: IFFALSE 34177
// exit ;
34175: GO 34658
// if GetLives ( i ) < 250 then
34177: LD_VAR 0 4
34181: PPUSH
34182: CALL_OW 256
34186: PUSH
34187: LD_INT 250
34189: LESS
34190: IFFALSE 34203
// begin ComAutodestruct ( i ) ;
34192: LD_VAR 0 4
34196: PPUSH
34197: CALL 34047 0 1
// exit ;
34201: GO 34658
// end ; x := GetX ( enemy_unit ) ;
34203: LD_ADDR_VAR 0 7
34207: PUSH
34208: LD_VAR 0 2
34212: PPUSH
34213: CALL_OW 250
34217: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34218: LD_ADDR_VAR 0 8
34222: PUSH
34223: LD_VAR 0 2
34227: PPUSH
34228: CALL_OW 251
34232: ST_TO_ADDR
// if not x or not y then
34233: LD_VAR 0 7
34237: NOT
34238: IFTRUE 34247
34240: PUSH
34241: LD_VAR 0 8
34245: NOT
34246: OR
34247: IFFALSE 34251
// exit ;
34249: GO 34658
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34251: LD_ADDR_VAR 0 6
34255: PUSH
34256: LD_VAR 0 7
34260: PPUSH
34261: LD_INT 0
34263: PPUSH
34264: LD_INT 4
34266: PPUSH
34267: CALL_OW 272
34271: PUSH
34272: LD_VAR 0 8
34276: PPUSH
34277: LD_INT 0
34279: PPUSH
34280: LD_INT 4
34282: PPUSH
34283: CALL_OW 273
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_VAR 0 7
34296: PPUSH
34297: LD_INT 1
34299: PPUSH
34300: LD_INT 4
34302: PPUSH
34303: CALL_OW 272
34307: PUSH
34308: LD_VAR 0 8
34312: PPUSH
34313: LD_INT 1
34315: PPUSH
34316: LD_INT 4
34318: PPUSH
34319: CALL_OW 273
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_VAR 0 7
34332: PPUSH
34333: LD_INT 2
34335: PPUSH
34336: LD_INT 4
34338: PPUSH
34339: CALL_OW 272
34343: PUSH
34344: LD_VAR 0 8
34348: PPUSH
34349: LD_INT 2
34351: PPUSH
34352: LD_INT 4
34354: PPUSH
34355: CALL_OW 273
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_VAR 0 7
34368: PPUSH
34369: LD_INT 3
34371: PPUSH
34372: LD_INT 4
34374: PPUSH
34375: CALL_OW 272
34379: PUSH
34380: LD_VAR 0 8
34384: PPUSH
34385: LD_INT 3
34387: PPUSH
34388: LD_INT 4
34390: PPUSH
34391: CALL_OW 273
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_VAR 0 7
34404: PPUSH
34405: LD_INT 4
34407: PPUSH
34408: LD_INT 4
34410: PPUSH
34411: CALL_OW 272
34415: PUSH
34416: LD_VAR 0 8
34420: PPUSH
34421: LD_INT 4
34423: PPUSH
34424: LD_INT 4
34426: PPUSH
34427: CALL_OW 273
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_VAR 0 7
34440: PPUSH
34441: LD_INT 5
34443: PPUSH
34444: LD_INT 4
34446: PPUSH
34447: CALL_OW 272
34451: PUSH
34452: LD_VAR 0 8
34456: PPUSH
34457: LD_INT 5
34459: PPUSH
34460: LD_INT 4
34462: PPUSH
34463: CALL_OW 273
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: ST_TO_ADDR
// for i = tmp downto 1 do
34480: LD_ADDR_VAR 0 4
34484: PUSH
34485: DOUBLE
34486: LD_VAR 0 6
34490: INC
34491: ST_TO_ADDR
34492: LD_INT 1
34494: PUSH
34495: FOR_DOWNTO
34496: IFFALSE 34599
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34498: LD_VAR 0 6
34502: PUSH
34503: LD_VAR 0 4
34507: ARRAY
34508: PUSH
34509: LD_INT 1
34511: ARRAY
34512: PPUSH
34513: LD_VAR 0 6
34517: PUSH
34518: LD_VAR 0 4
34522: ARRAY
34523: PUSH
34524: LD_INT 2
34526: ARRAY
34527: PPUSH
34528: CALL_OW 488
34532: NOT
34533: IFTRUE 34575
34535: PUSH
34536: LD_VAR 0 6
34540: PUSH
34541: LD_VAR 0 4
34545: ARRAY
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: PPUSH
34551: LD_VAR 0 6
34555: PUSH
34556: LD_VAR 0 4
34560: ARRAY
34561: PUSH
34562: LD_INT 2
34564: ARRAY
34565: PPUSH
34566: CALL_OW 428
34570: PUSH
34571: LD_INT 0
34573: NONEQUAL
34574: OR
34575: IFFALSE 34597
// tmp := Delete ( tmp , i ) ;
34577: LD_ADDR_VAR 0 6
34581: PUSH
34582: LD_VAR 0 6
34586: PPUSH
34587: LD_VAR 0 4
34591: PPUSH
34592: CALL_OW 3
34596: ST_TO_ADDR
34597: GO 34495
34599: POP
34600: POP
// j := GetClosestHex ( unit , tmp ) ;
34601: LD_ADDR_VAR 0 5
34605: PUSH
34606: LD_VAR 0 1
34610: PPUSH
34611: LD_VAR 0 6
34615: PPUSH
34616: CALL 33893 0 2
34620: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34621: LD_VAR 0 1
34625: PPUSH
34626: LD_VAR 0 5
34630: PUSH
34631: LD_INT 1
34633: ARRAY
34634: PPUSH
34635: LD_VAR 0 5
34639: PUSH
34640: LD_INT 2
34642: ARRAY
34643: PPUSH
34644: CALL_OW 111
// result := j ;
34648: LD_ADDR_VAR 0 3
34652: PUSH
34653: LD_VAR 0 5
34657: ST_TO_ADDR
// end ;
34658: LD_VAR 0 3
34662: RET
// export function PrepareApemanSoldier ( ) ; begin
34663: LD_INT 0
34665: PPUSH
// uc_nation := 0 ;
34666: LD_ADDR_OWVAR 21
34670: PUSH
34671: LD_INT 0
34673: ST_TO_ADDR
// hc_sex := sex_male ;
34674: LD_ADDR_OWVAR 27
34678: PUSH
34679: LD_INT 1
34681: ST_TO_ADDR
// hc_name :=  ;
34682: LD_ADDR_OWVAR 26
34686: PUSH
34687: LD_STRING 
34689: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34690: LD_ADDR_OWVAR 28
34694: PUSH
34695: LD_INT 15
34697: ST_TO_ADDR
// hc_gallery :=  ;
34698: LD_ADDR_OWVAR 33
34702: PUSH
34703: LD_STRING 
34705: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34706: LD_ADDR_OWVAR 31
34710: PUSH
34711: LD_INT 0
34713: PPUSH
34714: LD_INT 3
34716: PPUSH
34717: CALL_OW 12
34721: PUSH
34722: LD_INT 0
34724: PPUSH
34725: LD_INT 3
34727: PPUSH
34728: CALL_OW 12
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34745: LD_ADDR_OWVAR 29
34749: PUSH
34750: LD_INT 10
34752: PUSH
34753: LD_INT 12
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: ST_TO_ADDR
// end ;
34760: LD_VAR 0 1
34764: RET
// export function PrepareApemanEngineer ( ) ; begin
34765: LD_INT 0
34767: PPUSH
// uc_nation := 0 ;
34768: LD_ADDR_OWVAR 21
34772: PUSH
34773: LD_INT 0
34775: ST_TO_ADDR
// hc_sex := sex_male ;
34776: LD_ADDR_OWVAR 27
34780: PUSH
34781: LD_INT 1
34783: ST_TO_ADDR
// hc_name :=  ;
34784: LD_ADDR_OWVAR 26
34788: PUSH
34789: LD_STRING 
34791: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34792: LD_ADDR_OWVAR 28
34796: PUSH
34797: LD_INT 16
34799: ST_TO_ADDR
// hc_gallery :=  ;
34800: LD_ADDR_OWVAR 33
34804: PUSH
34805: LD_STRING 
34807: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34808: LD_ADDR_OWVAR 31
34812: PUSH
34813: LD_INT 0
34815: PPUSH
34816: LD_INT 3
34818: PPUSH
34819: CALL_OW 12
34823: PUSH
34824: LD_INT 0
34826: PPUSH
34827: LD_INT 3
34829: PPUSH
34830: CALL_OW 12
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34847: LD_ADDR_OWVAR 29
34851: PUSH
34852: LD_INT 10
34854: PUSH
34855: LD_INT 12
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: ST_TO_ADDR
// end ;
34862: LD_VAR 0 1
34866: RET
// export function PrepareApeman ( agressivity ) ; begin
34867: LD_INT 0
34869: PPUSH
// uc_side := 0 ;
34870: LD_ADDR_OWVAR 20
34874: PUSH
34875: LD_INT 0
34877: ST_TO_ADDR
// uc_nation := 0 ;
34878: LD_ADDR_OWVAR 21
34882: PUSH
34883: LD_INT 0
34885: ST_TO_ADDR
// hc_sex := sex_male ;
34886: LD_ADDR_OWVAR 27
34890: PUSH
34891: LD_INT 1
34893: ST_TO_ADDR
// hc_class := class_apeman ;
34894: LD_ADDR_OWVAR 28
34898: PUSH
34899: LD_INT 12
34901: ST_TO_ADDR
// hc_gallery :=  ;
34902: LD_ADDR_OWVAR 33
34906: PUSH
34907: LD_STRING 
34909: ST_TO_ADDR
// hc_name :=  ;
34910: LD_ADDR_OWVAR 26
34914: PUSH
34915: LD_STRING 
34917: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34918: LD_ADDR_OWVAR 29
34922: PUSH
34923: LD_INT 10
34925: PUSH
34926: LD_INT 12
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: ST_TO_ADDR
// if agressivity = 0 then
34933: LD_VAR 0 1
34937: PUSH
34938: LD_INT 0
34940: EQUAL
34941: IFFALSE 34953
// hc_agressivity := 0 else
34943: LD_ADDR_OWVAR 35
34947: PUSH
34948: LD_INT 0
34950: ST_TO_ADDR
34951: GO 34974
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34953: LD_ADDR_OWVAR 35
34957: PUSH
34958: LD_VAR 0 1
34962: NEG
34963: PPUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 12
34973: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34974: LD_ADDR_OWVAR 31
34978: PUSH
34979: LD_INT 0
34981: PPUSH
34982: LD_INT 3
34984: PPUSH
34985: CALL_OW 12
34989: PUSH
34990: LD_INT 0
34992: PPUSH
34993: LD_INT 3
34995: PPUSH
34996: CALL_OW 12
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: ST_TO_ADDR
// end ;
35013: LD_VAR 0 2
35017: RET
// export function PrepareTiger ( agressivity ) ; begin
35018: LD_INT 0
35020: PPUSH
// uc_side := 0 ;
35021: LD_ADDR_OWVAR 20
35025: PUSH
35026: LD_INT 0
35028: ST_TO_ADDR
// uc_nation := 0 ;
35029: LD_ADDR_OWVAR 21
35033: PUSH
35034: LD_INT 0
35036: ST_TO_ADDR
// InitHc ;
35037: CALL_OW 19
// hc_class := class_tiger ;
35041: LD_ADDR_OWVAR 28
35045: PUSH
35046: LD_INT 14
35048: ST_TO_ADDR
// hc_gallery :=  ;
35049: LD_ADDR_OWVAR 33
35053: PUSH
35054: LD_STRING 
35056: ST_TO_ADDR
// hc_name :=  ;
35057: LD_ADDR_OWVAR 26
35061: PUSH
35062: LD_STRING 
35064: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35065: LD_ADDR_OWVAR 35
35069: PUSH
35070: LD_VAR 0 1
35074: NEG
35075: PPUSH
35076: LD_VAR 0 1
35080: PPUSH
35081: CALL_OW 12
35085: ST_TO_ADDR
// end ;
35086: LD_VAR 0 2
35090: RET
// export function PrepareEnchidna ( ) ; begin
35091: LD_INT 0
35093: PPUSH
// uc_side := 0 ;
35094: LD_ADDR_OWVAR 20
35098: PUSH
35099: LD_INT 0
35101: ST_TO_ADDR
// uc_nation := 0 ;
35102: LD_ADDR_OWVAR 21
35106: PUSH
35107: LD_INT 0
35109: ST_TO_ADDR
// InitHc ;
35110: CALL_OW 19
// hc_class := class_baggie ;
35114: LD_ADDR_OWVAR 28
35118: PUSH
35119: LD_INT 13
35121: ST_TO_ADDR
// hc_gallery :=  ;
35122: LD_ADDR_OWVAR 33
35126: PUSH
35127: LD_STRING 
35129: ST_TO_ADDR
// hc_name :=  ;
35130: LD_ADDR_OWVAR 26
35134: PUSH
35135: LD_STRING 
35137: ST_TO_ADDR
// end ;
35138: LD_VAR 0 1
35142: RET
// export function PrepareFrog ( ) ; begin
35143: LD_INT 0
35145: PPUSH
// uc_side := 0 ;
35146: LD_ADDR_OWVAR 20
35150: PUSH
35151: LD_INT 0
35153: ST_TO_ADDR
// uc_nation := 0 ;
35154: LD_ADDR_OWVAR 21
35158: PUSH
35159: LD_INT 0
35161: ST_TO_ADDR
// InitHc ;
35162: CALL_OW 19
// hc_class := class_frog ;
35166: LD_ADDR_OWVAR 28
35170: PUSH
35171: LD_INT 19
35173: ST_TO_ADDR
// hc_gallery :=  ;
35174: LD_ADDR_OWVAR 33
35178: PUSH
35179: LD_STRING 
35181: ST_TO_ADDR
// hc_name :=  ;
35182: LD_ADDR_OWVAR 26
35186: PUSH
35187: LD_STRING 
35189: ST_TO_ADDR
// end ;
35190: LD_VAR 0 1
35194: RET
// export function PrepareFish ( ) ; begin
35195: LD_INT 0
35197: PPUSH
// uc_side := 0 ;
35198: LD_ADDR_OWVAR 20
35202: PUSH
35203: LD_INT 0
35205: ST_TO_ADDR
// uc_nation := 0 ;
35206: LD_ADDR_OWVAR 21
35210: PUSH
35211: LD_INT 0
35213: ST_TO_ADDR
// InitHc ;
35214: CALL_OW 19
// hc_class := class_fish ;
35218: LD_ADDR_OWVAR 28
35222: PUSH
35223: LD_INT 20
35225: ST_TO_ADDR
// hc_gallery :=  ;
35226: LD_ADDR_OWVAR 33
35230: PUSH
35231: LD_STRING 
35233: ST_TO_ADDR
// hc_name :=  ;
35234: LD_ADDR_OWVAR 26
35238: PUSH
35239: LD_STRING 
35241: ST_TO_ADDR
// end ;
35242: LD_VAR 0 1
35246: RET
// export function PrepareBird ( ) ; begin
35247: LD_INT 0
35249: PPUSH
// uc_side := 0 ;
35250: LD_ADDR_OWVAR 20
35254: PUSH
35255: LD_INT 0
35257: ST_TO_ADDR
// uc_nation := 0 ;
35258: LD_ADDR_OWVAR 21
35262: PUSH
35263: LD_INT 0
35265: ST_TO_ADDR
// InitHc ;
35266: CALL_OW 19
// hc_class := class_phororhacos ;
35270: LD_ADDR_OWVAR 28
35274: PUSH
35275: LD_INT 18
35277: ST_TO_ADDR
// hc_gallery :=  ;
35278: LD_ADDR_OWVAR 33
35282: PUSH
35283: LD_STRING 
35285: ST_TO_ADDR
// hc_name :=  ;
35286: LD_ADDR_OWVAR 26
35290: PUSH
35291: LD_STRING 
35293: ST_TO_ADDR
// end ;
35294: LD_VAR 0 1
35298: RET
// export function PrepareHorse ( ) ; begin
35299: LD_INT 0
35301: PPUSH
// uc_side := 0 ;
35302: LD_ADDR_OWVAR 20
35306: PUSH
35307: LD_INT 0
35309: ST_TO_ADDR
// uc_nation := 0 ;
35310: LD_ADDR_OWVAR 21
35314: PUSH
35315: LD_INT 0
35317: ST_TO_ADDR
// InitHc ;
35318: CALL_OW 19
// hc_class := class_horse ;
35322: LD_ADDR_OWVAR 28
35326: PUSH
35327: LD_INT 21
35329: ST_TO_ADDR
// hc_gallery :=  ;
35330: LD_ADDR_OWVAR 33
35334: PUSH
35335: LD_STRING 
35337: ST_TO_ADDR
// hc_name :=  ;
35338: LD_ADDR_OWVAR 26
35342: PUSH
35343: LD_STRING 
35345: ST_TO_ADDR
// end ;
35346: LD_VAR 0 1
35350: RET
// export function PrepareMastodont ( ) ; begin
35351: LD_INT 0
35353: PPUSH
// uc_side := 0 ;
35354: LD_ADDR_OWVAR 20
35358: PUSH
35359: LD_INT 0
35361: ST_TO_ADDR
// uc_nation := 0 ;
35362: LD_ADDR_OWVAR 21
35366: PUSH
35367: LD_INT 0
35369: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35370: LD_ADDR_OWVAR 37
35374: PUSH
35375: LD_INT 31
35377: ST_TO_ADDR
// vc_control := control_rider ;
35378: LD_ADDR_OWVAR 38
35382: PUSH
35383: LD_INT 4
35385: ST_TO_ADDR
// end ;
35386: LD_VAR 0 1
35390: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35391: LD_INT 0
35393: PPUSH
35394: PPUSH
35395: PPUSH
// uc_side = 0 ;
35396: LD_ADDR_OWVAR 20
35400: PUSH
35401: LD_INT 0
35403: ST_TO_ADDR
// uc_nation = 0 ;
35404: LD_ADDR_OWVAR 21
35408: PUSH
35409: LD_INT 0
35411: ST_TO_ADDR
// InitHc_All ( ) ;
35412: CALL_OW 584
// InitVc ;
35416: CALL_OW 20
// if mastodonts then
35420: LD_VAR 0 6
35424: IFFALSE 35491
// for i = 1 to mastodonts do
35426: LD_ADDR_VAR 0 11
35430: PUSH
35431: DOUBLE
35432: LD_INT 1
35434: DEC
35435: ST_TO_ADDR
35436: LD_VAR 0 6
35440: PUSH
35441: FOR_TO
35442: IFFALSE 35489
// begin vc_chassis := 31 ;
35444: LD_ADDR_OWVAR 37
35448: PUSH
35449: LD_INT 31
35451: ST_TO_ADDR
// vc_control := control_rider ;
35452: LD_ADDR_OWVAR 38
35456: PUSH
35457: LD_INT 4
35459: ST_TO_ADDR
// animal := CreateVehicle ;
35460: LD_ADDR_VAR 0 12
35464: PUSH
35465: CALL_OW 45
35469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35470: LD_VAR 0 12
35474: PPUSH
35475: LD_VAR 0 8
35479: PPUSH
35480: LD_INT 0
35482: PPUSH
35483: CALL 37633 0 3
// end ;
35487: GO 35441
35489: POP
35490: POP
// if horses then
35491: LD_VAR 0 5
35495: IFFALSE 35562
// for i = 1 to horses do
35497: LD_ADDR_VAR 0 11
35501: PUSH
35502: DOUBLE
35503: LD_INT 1
35505: DEC
35506: ST_TO_ADDR
35507: LD_VAR 0 5
35511: PUSH
35512: FOR_TO
35513: IFFALSE 35560
// begin hc_class := 21 ;
35515: LD_ADDR_OWVAR 28
35519: PUSH
35520: LD_INT 21
35522: ST_TO_ADDR
// hc_gallery :=  ;
35523: LD_ADDR_OWVAR 33
35527: PUSH
35528: LD_STRING 
35530: ST_TO_ADDR
// animal := CreateHuman ;
35531: LD_ADDR_VAR 0 12
35535: PUSH
35536: CALL_OW 44
35540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35541: LD_VAR 0 12
35545: PPUSH
35546: LD_VAR 0 8
35550: PPUSH
35551: LD_INT 0
35553: PPUSH
35554: CALL 37633 0 3
// end ;
35558: GO 35512
35560: POP
35561: POP
// if birds then
35562: LD_VAR 0 1
35566: IFFALSE 35633
// for i = 1 to birds do
35568: LD_ADDR_VAR 0 11
35572: PUSH
35573: DOUBLE
35574: LD_INT 1
35576: DEC
35577: ST_TO_ADDR
35578: LD_VAR 0 1
35582: PUSH
35583: FOR_TO
35584: IFFALSE 35631
// begin hc_class := 18 ;
35586: LD_ADDR_OWVAR 28
35590: PUSH
35591: LD_INT 18
35593: ST_TO_ADDR
// hc_gallery =  ;
35594: LD_ADDR_OWVAR 33
35598: PUSH
35599: LD_STRING 
35601: ST_TO_ADDR
// animal := CreateHuman ;
35602: LD_ADDR_VAR 0 12
35606: PUSH
35607: CALL_OW 44
35611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35612: LD_VAR 0 12
35616: PPUSH
35617: LD_VAR 0 8
35621: PPUSH
35622: LD_INT 0
35624: PPUSH
35625: CALL 37633 0 3
// end ;
35629: GO 35583
35631: POP
35632: POP
// if tigers then
35633: LD_VAR 0 2
35637: IFFALSE 35721
// for i = 1 to tigers do
35639: LD_ADDR_VAR 0 11
35643: PUSH
35644: DOUBLE
35645: LD_INT 1
35647: DEC
35648: ST_TO_ADDR
35649: LD_VAR 0 2
35653: PUSH
35654: FOR_TO
35655: IFFALSE 35719
// begin hc_class = class_tiger ;
35657: LD_ADDR_OWVAR 28
35661: PUSH
35662: LD_INT 14
35664: ST_TO_ADDR
// hc_gallery =  ;
35665: LD_ADDR_OWVAR 33
35669: PUSH
35670: LD_STRING 
35672: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35673: LD_ADDR_OWVAR 35
35677: PUSH
35678: LD_INT 7
35680: NEG
35681: PPUSH
35682: LD_INT 7
35684: PPUSH
35685: CALL_OW 12
35689: ST_TO_ADDR
// animal := CreateHuman ;
35690: LD_ADDR_VAR 0 12
35694: PUSH
35695: CALL_OW 44
35699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35700: LD_VAR 0 12
35704: PPUSH
35705: LD_VAR 0 8
35709: PPUSH
35710: LD_INT 0
35712: PPUSH
35713: CALL 37633 0 3
// end ;
35717: GO 35654
35719: POP
35720: POP
// if apemans then
35721: LD_VAR 0 3
35725: IFFALSE 35848
// for i = 1 to apemans do
35727: LD_ADDR_VAR 0 11
35731: PUSH
35732: DOUBLE
35733: LD_INT 1
35735: DEC
35736: ST_TO_ADDR
35737: LD_VAR 0 3
35741: PUSH
35742: FOR_TO
35743: IFFALSE 35846
// begin hc_class = class_apeman ;
35745: LD_ADDR_OWVAR 28
35749: PUSH
35750: LD_INT 12
35752: ST_TO_ADDR
// hc_gallery =  ;
35753: LD_ADDR_OWVAR 33
35757: PUSH
35758: LD_STRING 
35760: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35761: LD_ADDR_OWVAR 35
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PPUSH
35770: LD_INT 2
35772: PPUSH
35773: CALL_OW 12
35777: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35778: LD_ADDR_OWVAR 31
35782: PUSH
35783: LD_INT 1
35785: PPUSH
35786: LD_INT 3
35788: PPUSH
35789: CALL_OW 12
35793: PUSH
35794: LD_INT 1
35796: PPUSH
35797: LD_INT 3
35799: PPUSH
35800: CALL_OW 12
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: ST_TO_ADDR
// animal := CreateHuman ;
35817: LD_ADDR_VAR 0 12
35821: PUSH
35822: CALL_OW 44
35826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35827: LD_VAR 0 12
35831: PPUSH
35832: LD_VAR 0 8
35836: PPUSH
35837: LD_INT 0
35839: PPUSH
35840: CALL 37633 0 3
// end ;
35844: GO 35742
35846: POP
35847: POP
// if enchidnas then
35848: LD_VAR 0 4
35852: IFFALSE 35919
// for i = 1 to enchidnas do
35854: LD_ADDR_VAR 0 11
35858: PUSH
35859: DOUBLE
35860: LD_INT 1
35862: DEC
35863: ST_TO_ADDR
35864: LD_VAR 0 4
35868: PUSH
35869: FOR_TO
35870: IFFALSE 35917
// begin hc_class = 13 ;
35872: LD_ADDR_OWVAR 28
35876: PUSH
35877: LD_INT 13
35879: ST_TO_ADDR
// hc_gallery =  ;
35880: LD_ADDR_OWVAR 33
35884: PUSH
35885: LD_STRING 
35887: ST_TO_ADDR
// animal := CreateHuman ;
35888: LD_ADDR_VAR 0 12
35892: PUSH
35893: CALL_OW 44
35897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35898: LD_VAR 0 12
35902: PPUSH
35903: LD_VAR 0 8
35907: PPUSH
35908: LD_INT 0
35910: PPUSH
35911: CALL 37633 0 3
// end ;
35915: GO 35869
35917: POP
35918: POP
// if fishes then
35919: LD_VAR 0 7
35923: IFFALSE 35990
// for i = 1 to fishes do
35925: LD_ADDR_VAR 0 11
35929: PUSH
35930: DOUBLE
35931: LD_INT 1
35933: DEC
35934: ST_TO_ADDR
35935: LD_VAR 0 7
35939: PUSH
35940: FOR_TO
35941: IFFALSE 35988
// begin hc_class = 20 ;
35943: LD_ADDR_OWVAR 28
35947: PUSH
35948: LD_INT 20
35950: ST_TO_ADDR
// hc_gallery =  ;
35951: LD_ADDR_OWVAR 33
35955: PUSH
35956: LD_STRING 
35958: ST_TO_ADDR
// animal := CreateHuman ;
35959: LD_ADDR_VAR 0 12
35963: PUSH
35964: CALL_OW 44
35968: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35969: LD_VAR 0 12
35973: PPUSH
35974: LD_VAR 0 9
35978: PPUSH
35979: LD_INT 0
35981: PPUSH
35982: CALL 37633 0 3
// end ;
35986: GO 35940
35988: POP
35989: POP
// end ;
35990: LD_VAR 0 10
35994: RET
// export function WantHeal ( sci , unit ) ; begin
35995: LD_INT 0
35997: PPUSH
// if GetTaskList ( sci ) > 0 then
35998: LD_VAR 0 1
36002: PPUSH
36003: CALL_OW 437
36007: PUSH
36008: LD_INT 0
36010: GREATER
36011: IFFALSE 36083
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36013: LD_VAR 0 1
36017: PPUSH
36018: CALL_OW 437
36022: PUSH
36023: LD_INT 1
36025: ARRAY
36026: PUSH
36027: LD_INT 1
36029: ARRAY
36030: PUSH
36031: LD_STRING l
36033: EQUAL
36034: IFFALSE 36061
36036: PUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 437
36046: PUSH
36047: LD_INT 1
36049: ARRAY
36050: PUSH
36051: LD_INT 4
36053: ARRAY
36054: PUSH
36055: LD_VAR 0 2
36059: EQUAL
36060: AND
36061: IFFALSE 36073
// result := true else
36063: LD_ADDR_VAR 0 3
36067: PUSH
36068: LD_INT 1
36070: ST_TO_ADDR
36071: GO 36081
// result := false ;
36073: LD_ADDR_VAR 0 3
36077: PUSH
36078: LD_INT 0
36080: ST_TO_ADDR
// end else
36081: GO 36091
// result := false ;
36083: LD_ADDR_VAR 0 3
36087: PUSH
36088: LD_INT 0
36090: ST_TO_ADDR
// end ;
36091: LD_VAR 0 3
36095: RET
// export function HealTarget ( sci ) ; begin
36096: LD_INT 0
36098: PPUSH
// if not sci then
36099: LD_VAR 0 1
36103: NOT
36104: IFFALSE 36108
// exit ;
36106: GO 36173
// result := 0 ;
36108: LD_ADDR_VAR 0 2
36112: PUSH
36113: LD_INT 0
36115: ST_TO_ADDR
// if GetTaskList ( sci ) then
36116: LD_VAR 0 1
36120: PPUSH
36121: CALL_OW 437
36125: IFFALSE 36173
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36127: LD_VAR 0 1
36131: PPUSH
36132: CALL_OW 437
36136: PUSH
36137: LD_INT 1
36139: ARRAY
36140: PUSH
36141: LD_INT 1
36143: ARRAY
36144: PUSH
36145: LD_STRING l
36147: EQUAL
36148: IFFALSE 36173
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36150: LD_ADDR_VAR 0 2
36154: PUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 437
36164: PUSH
36165: LD_INT 1
36167: ARRAY
36168: PUSH
36169: LD_INT 4
36171: ARRAY
36172: ST_TO_ADDR
// end ;
36173: LD_VAR 0 2
36177: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36178: LD_INT 0
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
// if not base_units then
36184: LD_VAR 0 1
36188: NOT
36189: IFFALSE 36193
// exit ;
36191: GO 36280
// result := false ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_INT 0
36200: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36201: LD_ADDR_VAR 0 5
36205: PUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: LD_INT 21
36213: PUSH
36214: LD_INT 3
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PPUSH
36221: CALL_OW 72
36225: ST_TO_ADDR
// if not tmp then
36226: LD_VAR 0 5
36230: NOT
36231: IFFALSE 36235
// exit ;
36233: GO 36280
// for i in tmp do
36235: LD_ADDR_VAR 0 3
36239: PUSH
36240: LD_VAR 0 5
36244: PUSH
36245: FOR_IN
36246: IFFALSE 36278
// begin result := EnemyInRange ( i , 22 ) ;
36248: LD_ADDR_VAR 0 2
36252: PUSH
36253: LD_VAR 0 3
36257: PPUSH
36258: LD_INT 22
36260: PPUSH
36261: CALL 33695 0 2
36265: ST_TO_ADDR
// if result then
36266: LD_VAR 0 2
36270: IFFALSE 36276
// exit ;
36272: POP
36273: POP
36274: GO 36280
// end ;
36276: GO 36245
36278: POP
36279: POP
// end ;
36280: LD_VAR 0 2
36284: RET
// export function FilterByTag ( units , tag ) ; begin
36285: LD_INT 0
36287: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_VAR 0 1
36297: PPUSH
36298: LD_INT 120
36300: PUSH
36301: LD_VAR 0 2
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PPUSH
36310: CALL_OW 72
36314: ST_TO_ADDR
// end ;
36315: LD_VAR 0 3
36319: RET
// export function IsDriver ( un ) ; begin
36320: LD_INT 0
36322: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36323: LD_ADDR_VAR 0 2
36327: PUSH
36328: LD_VAR 0 1
36332: PUSH
36333: LD_INT 55
36335: PUSH
36336: EMPTY
36337: LIST
36338: PPUSH
36339: CALL_OW 69
36343: IN
36344: ST_TO_ADDR
// end ;
36345: LD_VAR 0 2
36349: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36350: LD_INT 0
36352: PPUSH
36353: PPUSH
// list := [ ] ;
36354: LD_ADDR_VAR 0 5
36358: PUSH
36359: EMPTY
36360: ST_TO_ADDR
// case d of 0 :
36361: LD_VAR 0 3
36365: PUSH
36366: LD_INT 0
36368: DOUBLE
36369: EQUAL
36370: IFTRUE 36374
36372: GO 36507
36374: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36375: LD_ADDR_VAR 0 5
36379: PUSH
36380: LD_VAR 0 1
36384: PUSH
36385: LD_INT 4
36387: MINUS
36388: PUSH
36389: LD_VAR 0 2
36393: PUSH
36394: LD_INT 4
36396: MINUS
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: PUSH
36406: LD_VAR 0 1
36410: PUSH
36411: LD_INT 3
36413: MINUS
36414: PUSH
36415: LD_VAR 0 2
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: PUSH
36428: LD_VAR 0 1
36432: PUSH
36433: LD_INT 4
36435: PLUS
36436: PUSH
36437: LD_VAR 0 2
36441: PUSH
36442: LD_INT 4
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: PUSH
36450: LD_VAR 0 1
36454: PUSH
36455: LD_INT 3
36457: PLUS
36458: PUSH
36459: LD_VAR 0 2
36463: PUSH
36464: LD_INT 3
36466: PLUS
36467: PUSH
36468: LD_INT 5
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: LD_VAR 0 1
36480: PUSH
36481: LD_VAR 0 2
36485: PUSH
36486: LD_INT 4
36488: PLUS
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
// end ; 1 :
36505: GO 37205
36507: LD_INT 1
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36515
36513: GO 36648
36515: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36516: LD_ADDR_VAR 0 5
36520: PUSH
36521: LD_VAR 0 1
36525: PUSH
36526: LD_VAR 0 2
36530: PUSH
36531: LD_INT 4
36533: MINUS
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: PUSH
36543: LD_VAR 0 1
36547: PUSH
36548: LD_INT 3
36550: MINUS
36551: PUSH
36552: LD_VAR 0 2
36556: PUSH
36557: LD_INT 3
36559: MINUS
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: PUSH
36569: LD_VAR 0 1
36573: PUSH
36574: LD_INT 4
36576: MINUS
36577: PUSH
36578: LD_VAR 0 2
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: LIST
36590: PUSH
36591: LD_VAR 0 1
36595: PUSH
36596: LD_VAR 0 2
36600: PUSH
36601: LD_INT 3
36603: PLUS
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: PUSH
36613: LD_VAR 0 1
36617: PUSH
36618: LD_INT 4
36620: PLUS
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: LD_INT 4
36629: PLUS
36630: PUSH
36631: LD_INT 5
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
// end ; 2 :
36646: GO 37205
36648: LD_INT 2
36650: DOUBLE
36651: EQUAL
36652: IFTRUE 36656
36654: GO 36785
36656: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36657: LD_ADDR_VAR 0 5
36661: PUSH
36662: LD_VAR 0 1
36666: PUSH
36667: LD_VAR 0 2
36671: PUSH
36672: LD_INT 3
36674: MINUS
36675: PUSH
36676: LD_INT 3
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: PUSH
36684: LD_VAR 0 1
36688: PUSH
36689: LD_INT 4
36691: PLUS
36692: PUSH
36693: LD_VAR 0 2
36697: PUSH
36698: LD_INT 4
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: PUSH
36706: LD_VAR 0 1
36710: PUSH
36711: LD_VAR 0 2
36715: PUSH
36716: LD_INT 4
36718: PLUS
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: PUSH
36728: LD_VAR 0 1
36732: PUSH
36733: LD_INT 3
36735: MINUS
36736: PUSH
36737: LD_VAR 0 2
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: PUSH
36750: LD_VAR 0 1
36754: PUSH
36755: LD_INT 4
36757: MINUS
36758: PUSH
36759: LD_VAR 0 2
36763: PUSH
36764: LD_INT 4
36766: MINUS
36767: PUSH
36768: LD_INT 2
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: ST_TO_ADDR
// end ; 3 :
36783: GO 37205
36785: LD_INT 3
36787: DOUBLE
36788: EQUAL
36789: IFTRUE 36793
36791: GO 36926
36793: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36794: LD_ADDR_VAR 0 5
36798: PUSH
36799: LD_VAR 0 1
36803: PUSH
36804: LD_INT 3
36806: PLUS
36807: PUSH
36808: LD_VAR 0 2
36812: PUSH
36813: LD_INT 4
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: PUSH
36821: LD_VAR 0 1
36825: PUSH
36826: LD_INT 4
36828: PLUS
36829: PUSH
36830: LD_VAR 0 2
36834: PUSH
36835: LD_INT 4
36837: PLUS
36838: PUSH
36839: LD_INT 5
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: PUSH
36847: LD_VAR 0 1
36851: PUSH
36852: LD_INT 4
36854: MINUS
36855: PUSH
36856: LD_VAR 0 2
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: PUSH
36869: LD_VAR 0 1
36873: PUSH
36874: LD_VAR 0 2
36878: PUSH
36879: LD_INT 4
36881: MINUS
36882: PUSH
36883: LD_INT 3
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: LD_VAR 0 1
36895: PUSH
36896: LD_INT 3
36898: MINUS
36899: PUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_INT 3
36907: MINUS
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: ST_TO_ADDR
// end ; 4 :
36924: GO 37205
36926: LD_INT 4
36928: DOUBLE
36929: EQUAL
36930: IFTRUE 36934
36932: GO 37067
36934: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36935: LD_ADDR_VAR 0 5
36939: PUSH
36940: LD_VAR 0 1
36944: PUSH
36945: LD_VAR 0 2
36949: PUSH
36950: LD_INT 4
36952: PLUS
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: PUSH
36962: LD_VAR 0 1
36966: PUSH
36967: LD_INT 3
36969: PLUS
36970: PUSH
36971: LD_VAR 0 2
36975: PUSH
36976: LD_INT 3
36978: PLUS
36979: PUSH
36980: LD_INT 5
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: PUSH
36988: LD_VAR 0 1
36992: PUSH
36993: LD_INT 4
36995: PLUS
36996: PUSH
36997: LD_VAR 0 2
37001: PUSH
37002: LD_INT 4
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: PUSH
37010: LD_VAR 0 1
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 3
37022: MINUS
37023: PUSH
37024: LD_INT 3
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: LD_VAR 0 1
37036: PUSH
37037: LD_INT 4
37039: MINUS
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_INT 4
37048: MINUS
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: ST_TO_ADDR
// end ; 5 :
37065: GO 37205
37067: LD_INT 5
37069: DOUBLE
37070: EQUAL
37071: IFTRUE 37075
37073: GO 37204
37075: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37076: LD_ADDR_VAR 0 5
37080: PUSH
37081: LD_VAR 0 1
37085: PUSH
37086: LD_INT 4
37088: MINUS
37089: PUSH
37090: LD_VAR 0 2
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: PUSH
37103: LD_VAR 0 1
37107: PUSH
37108: LD_VAR 0 2
37112: PUSH
37113: LD_INT 4
37115: MINUS
37116: PUSH
37117: LD_INT 3
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_INT 4
37132: PLUS
37133: PUSH
37134: LD_VAR 0 2
37138: PUSH
37139: LD_INT 4
37141: PLUS
37142: PUSH
37143: LD_INT 5
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: PUSH
37151: LD_VAR 0 1
37155: PUSH
37156: LD_INT 3
37158: PLUS
37159: PUSH
37160: LD_VAR 0 2
37164: PUSH
37165: LD_INT 4
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: PUSH
37173: LD_VAR 0 1
37177: PUSH
37178: LD_VAR 0 2
37182: PUSH
37183: LD_INT 3
37185: PLUS
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// end ; end ;
37202: GO 37205
37204: POP
// result := list ;
37205: LD_ADDR_VAR 0 4
37209: PUSH
37210: LD_VAR 0 5
37214: ST_TO_ADDR
// end ;
37215: LD_VAR 0 4
37219: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37220: LD_INT 0
37222: PPUSH
37223: PPUSH
37224: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37225: LD_VAR 0 1
37229: NOT
37230: IFTRUE 37258
37232: PUSH
37233: LD_VAR 0 2
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 3
37246: PUSH
37247: LD_INT 4
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: IN
37256: NOT
37257: OR
37258: IFFALSE 37262
// exit ;
37260: GO 37345
// tmp := [ ] ;
37262: LD_ADDR_VAR 0 5
37266: PUSH
37267: EMPTY
37268: ST_TO_ADDR
// for i in units do
37269: LD_ADDR_VAR 0 4
37273: PUSH
37274: LD_VAR 0 1
37278: PUSH
37279: FOR_IN
37280: IFFALSE 37314
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37282: LD_ADDR_VAR 0 5
37286: PUSH
37287: LD_VAR 0 5
37291: PPUSH
37292: LD_VAR 0 4
37296: PPUSH
37297: LD_VAR 0 2
37301: PPUSH
37302: CALL_OW 259
37306: PPUSH
37307: CALL 38740 0 2
37311: ST_TO_ADDR
37312: GO 37279
37314: POP
37315: POP
// if not tmp then
37316: LD_VAR 0 5
37320: NOT
37321: IFFALSE 37325
// exit ;
37323: GO 37345
// result := SortListByListDesc ( units , tmp ) ;
37325: LD_ADDR_VAR 0 3
37329: PUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: LD_VAR 0 5
37339: PPUSH
37340: CALL_OW 77
37344: ST_TO_ADDR
// end ;
37345: LD_VAR 0 3
37349: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37350: LD_INT 0
37352: PPUSH
37353: PPUSH
37354: PPUSH
// result := false ;
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: LD_INT 0
37362: ST_TO_ADDR
// if not building then
37363: LD_VAR 0 2
37367: NOT
37368: IFFALSE 37372
// exit ;
37370: GO 37516
// x := GetX ( building ) ;
37372: LD_ADDR_VAR 0 4
37376: PUSH
37377: LD_VAR 0 2
37381: PPUSH
37382: CALL_OW 250
37386: ST_TO_ADDR
// y := GetY ( building ) ;
37387: LD_ADDR_VAR 0 5
37391: PUSH
37392: LD_VAR 0 2
37396: PPUSH
37397: CALL_OW 251
37401: ST_TO_ADDR
// if not x or not y then
37402: LD_VAR 0 4
37406: NOT
37407: IFTRUE 37416
37409: PUSH
37410: LD_VAR 0 5
37414: NOT
37415: OR
37416: IFFALSE 37420
// exit ;
37418: GO 37516
// if GetTaskList ( unit ) then
37420: LD_VAR 0 1
37424: PPUSH
37425: CALL_OW 437
37429: IFFALSE 37516
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37431: LD_STRING e
37433: PUSH
37434: LD_VAR 0 1
37438: PPUSH
37439: CALL_OW 437
37443: PUSH
37444: LD_INT 1
37446: ARRAY
37447: PUSH
37448: LD_INT 1
37450: ARRAY
37451: EQUAL
37452: IFFALSE 37479
37454: PUSH
37455: LD_VAR 0 4
37459: PUSH
37460: LD_VAR 0 1
37464: PPUSH
37465: CALL_OW 437
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PUSH
37474: LD_INT 2
37476: ARRAY
37477: EQUAL
37478: AND
37479: IFFALSE 37506
37481: PUSH
37482: LD_VAR 0 5
37486: PUSH
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL_OW 437
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: PUSH
37501: LD_INT 3
37503: ARRAY
37504: EQUAL
37505: AND
37506: IFFALSE 37516
// result := true end ;
37508: LD_ADDR_VAR 0 3
37512: PUSH
37513: LD_INT 1
37515: ST_TO_ADDR
// end ;
37516: LD_VAR 0 3
37520: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37521: LD_INT 0
37523: PPUSH
// result := false ;
37524: LD_ADDR_VAR 0 4
37528: PUSH
37529: LD_INT 0
37531: ST_TO_ADDR
// if GetTaskList ( unit ) then
37532: LD_VAR 0 1
37536: PPUSH
37537: CALL_OW 437
37541: IFFALSE 37628
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37543: LD_STRING M
37545: PUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: CALL_OW 437
37555: PUSH
37556: LD_INT 1
37558: ARRAY
37559: PUSH
37560: LD_INT 1
37562: ARRAY
37563: EQUAL
37564: IFFALSE 37591
37566: PUSH
37567: LD_VAR 0 2
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: CALL_OW 437
37581: PUSH
37582: LD_INT 1
37584: ARRAY
37585: PUSH
37586: LD_INT 2
37588: ARRAY
37589: EQUAL
37590: AND
37591: IFFALSE 37618
37593: PUSH
37594: LD_VAR 0 3
37598: PUSH
37599: LD_VAR 0 1
37603: PPUSH
37604: CALL_OW 437
37608: PUSH
37609: LD_INT 1
37611: ARRAY
37612: PUSH
37613: LD_INT 3
37615: ARRAY
37616: EQUAL
37617: AND
37618: IFFALSE 37628
// result := true ;
37620: LD_ADDR_VAR 0 4
37624: PUSH
37625: LD_INT 1
37627: ST_TO_ADDR
// end ; end ;
37628: LD_VAR 0 4
37632: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37633: LD_INT 0
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
// if not unit or not area then
37639: LD_VAR 0 1
37643: NOT
37644: IFTRUE 37653
37646: PUSH
37647: LD_VAR 0 2
37651: NOT
37652: OR
37653: IFFALSE 37657
// exit ;
37655: GO 37833
// tmp := AreaToList ( area , i ) ;
37657: LD_ADDR_VAR 0 6
37661: PUSH
37662: LD_VAR 0 2
37666: PPUSH
37667: LD_VAR 0 5
37671: PPUSH
37672: CALL_OW 517
37676: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37677: LD_ADDR_VAR 0 5
37681: PUSH
37682: DOUBLE
37683: LD_INT 1
37685: DEC
37686: ST_TO_ADDR
37687: LD_VAR 0 6
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: PUSH
37696: FOR_TO
37697: IFFALSE 37831
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37699: LD_ADDR_VAR 0 7
37703: PUSH
37704: LD_VAR 0 6
37708: PUSH
37709: LD_INT 1
37711: ARRAY
37712: PUSH
37713: LD_VAR 0 5
37717: ARRAY
37718: PUSH
37719: LD_VAR 0 6
37723: PUSH
37724: LD_INT 2
37726: ARRAY
37727: PUSH
37728: LD_VAR 0 5
37732: ARRAY
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37738: LD_INT 92
37740: PUSH
37741: LD_VAR 0 7
37745: PUSH
37746: LD_INT 1
37748: ARRAY
37749: PUSH
37750: LD_VAR 0 7
37754: PUSH
37755: LD_INT 2
37757: ARRAY
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: PPUSH
37768: CALL_OW 69
37772: PUSH
37773: LD_INT 0
37775: EQUAL
37776: IFFALSE 37829
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37778: LD_VAR 0 1
37782: PPUSH
37783: LD_VAR 0 7
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: PPUSH
37792: LD_VAR 0 7
37796: PUSH
37797: LD_INT 2
37799: ARRAY
37800: PPUSH
37801: LD_VAR 0 3
37805: PPUSH
37806: CALL_OW 48
// result := IsPlaced ( unit ) ;
37810: LD_ADDR_VAR 0 4
37814: PUSH
37815: LD_VAR 0 1
37819: PPUSH
37820: CALL_OW 305
37824: ST_TO_ADDR
// exit ;
37825: POP
37826: POP
37827: GO 37833
// end ; end ;
37829: GO 37696
37831: POP
37832: POP
// end ;
37833: LD_VAR 0 4
37837: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37838: LD_INT 0
37840: PPUSH
37841: PPUSH
37842: PPUSH
// if not side or side > 8 then
37843: LD_VAR 0 1
37847: NOT
37848: IFTRUE 37860
37850: PUSH
37851: LD_VAR 0 1
37855: PUSH
37856: LD_INT 8
37858: GREATER
37859: OR
37860: IFFALSE 37864
// exit ;
37862: GO 38051
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37864: LD_ADDR_VAR 0 4
37868: PUSH
37869: LD_INT 22
37871: PUSH
37872: LD_VAR 0 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 21
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PPUSH
37895: CALL_OW 69
37899: ST_TO_ADDR
// if not tmp then
37900: LD_VAR 0 4
37904: NOT
37905: IFFALSE 37909
// exit ;
37907: GO 38051
// enable_addtolog := true ;
37909: LD_ADDR_OWVAR 81
37913: PUSH
37914: LD_INT 1
37916: ST_TO_ADDR
// AddToLog ( [ ) ;
37917: LD_STRING [
37919: PPUSH
37920: CALL_OW 561
// for i in tmp do
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_VAR 0 4
37933: PUSH
37934: FOR_IN
37935: IFFALSE 38042
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37937: LD_STRING [
37939: PUSH
37940: LD_VAR 0 3
37944: PPUSH
37945: CALL_OW 266
37949: STR
37950: PUSH
37951: LD_STRING , 
37953: STR
37954: PUSH
37955: LD_VAR 0 3
37959: PPUSH
37960: CALL_OW 250
37964: STR
37965: PUSH
37966: LD_STRING , 
37968: STR
37969: PUSH
37970: LD_VAR 0 3
37974: PPUSH
37975: CALL_OW 251
37979: STR
37980: PUSH
37981: LD_STRING , 
37983: STR
37984: PUSH
37985: LD_VAR 0 3
37989: PPUSH
37990: CALL_OW 254
37994: STR
37995: PUSH
37996: LD_STRING , 
37998: STR
37999: PUSH
38000: LD_VAR 0 3
38004: PPUSH
38005: LD_INT 1
38007: PPUSH
38008: CALL_OW 268
38012: STR
38013: PUSH
38014: LD_STRING , 
38016: STR
38017: PUSH
38018: LD_VAR 0 3
38022: PPUSH
38023: LD_INT 2
38025: PPUSH
38026: CALL_OW 268
38030: STR
38031: PUSH
38032: LD_STRING ],
38034: STR
38035: PPUSH
38036: CALL_OW 561
// end ;
38040: GO 37934
38042: POP
38043: POP
// AddToLog ( ]; ) ;
38044: LD_STRING ];
38046: PPUSH
38047: CALL_OW 561
// end ;
38051: LD_VAR 0 2
38055: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38056: LD_INT 0
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
// if not area or not rate or not max then
38063: LD_VAR 0 1
38067: NOT
38068: IFTRUE 38077
38070: PUSH
38071: LD_VAR 0 2
38075: NOT
38076: OR
38077: IFTRUE 38086
38079: PUSH
38080: LD_VAR 0 4
38084: NOT
38085: OR
38086: IFFALSE 38090
// exit ;
38088: GO 38279
// while 1 do
38090: LD_INT 1
38092: IFFALSE 38279
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38094: LD_ADDR_VAR 0 9
38098: PUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: LD_INT 1
38106: PPUSH
38107: CALL_OW 287
38111: PUSH
38112: LD_INT 10
38114: MUL
38115: ST_TO_ADDR
// r := rate / 10 ;
38116: LD_ADDR_VAR 0 7
38120: PUSH
38121: LD_VAR 0 2
38125: PUSH
38126: LD_INT 10
38128: DIVREAL
38129: ST_TO_ADDR
// time := 1 1$00 ;
38130: LD_ADDR_VAR 0 8
38134: PUSH
38135: LD_INT 2100
38137: ST_TO_ADDR
// if amount < min then
38138: LD_VAR 0 9
38142: PUSH
38143: LD_VAR 0 3
38147: LESS
38148: IFFALSE 38166
// r := r * 2 else
38150: LD_ADDR_VAR 0 7
38154: PUSH
38155: LD_VAR 0 7
38159: PUSH
38160: LD_INT 2
38162: MUL
38163: ST_TO_ADDR
38164: GO 38192
// if amount > max then
38166: LD_VAR 0 9
38170: PUSH
38171: LD_VAR 0 4
38175: GREATER
38176: IFFALSE 38192
// r := r / 2 ;
38178: LD_ADDR_VAR 0 7
38182: PUSH
38183: LD_VAR 0 7
38187: PUSH
38188: LD_INT 2
38190: DIVREAL
38191: ST_TO_ADDR
// time := time / r ;
38192: LD_ADDR_VAR 0 8
38196: PUSH
38197: LD_VAR 0 8
38201: PUSH
38202: LD_VAR 0 7
38206: DIVREAL
38207: ST_TO_ADDR
// if time < 0 then
38208: LD_VAR 0 8
38212: PUSH
38213: LD_INT 0
38215: LESS
38216: IFFALSE 38233
// time := time * - 1 ;
38218: LD_ADDR_VAR 0 8
38222: PUSH
38223: LD_VAR 0 8
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: MUL
38232: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38233: LD_VAR 0 8
38237: PUSH
38238: LD_INT 35
38240: PPUSH
38241: LD_INT 875
38243: PPUSH
38244: CALL_OW 12
38248: PLUS
38249: PPUSH
38250: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38254: LD_INT 1
38256: PPUSH
38257: LD_INT 5
38259: PPUSH
38260: CALL_OW 12
38264: PPUSH
38265: LD_VAR 0 1
38269: PPUSH
38270: LD_INT 1
38272: PPUSH
38273: CALL_OW 55
// end ;
38277: GO 38090
// end ;
38279: LD_VAR 0 5
38283: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38284: LD_INT 0
38286: PPUSH
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
// if not turrets or not factories then
38294: LD_VAR 0 1
38298: NOT
38299: IFTRUE 38308
38301: PUSH
38302: LD_VAR 0 2
38306: NOT
38307: OR
38308: IFFALSE 38312
// exit ;
38310: GO 38619
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38312: LD_ADDR_VAR 0 10
38316: PUSH
38317: LD_INT 5
38319: PUSH
38320: LD_INT 6
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 4
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 3
38339: PUSH
38340: LD_INT 5
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 24
38354: PUSH
38355: LD_INT 25
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 23
38364: PUSH
38365: LD_INT 27
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 42
38378: PUSH
38379: LD_INT 43
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 44
38388: PUSH
38389: LD_INT 46
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 45
38398: PUSH
38399: LD_INT 47
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: ST_TO_ADDR
// result := [ ] ;
38416: LD_ADDR_VAR 0 3
38420: PUSH
38421: EMPTY
38422: ST_TO_ADDR
// for i in turrets do
38423: LD_ADDR_VAR 0 4
38427: PUSH
38428: LD_VAR 0 1
38432: PUSH
38433: FOR_IN
38434: IFFALSE 38617
// begin nat := GetNation ( i ) ;
38436: LD_ADDR_VAR 0 7
38440: PUSH
38441: LD_VAR 0 4
38445: PPUSH
38446: CALL_OW 248
38450: ST_TO_ADDR
// weapon := 0 ;
38451: LD_ADDR_VAR 0 8
38455: PUSH
38456: LD_INT 0
38458: ST_TO_ADDR
// if not nat then
38459: LD_VAR 0 7
38463: NOT
38464: IFFALSE 38468
// continue ;
38466: GO 38433
// for j in list [ nat ] do
38468: LD_ADDR_VAR 0 5
38472: PUSH
38473: LD_VAR 0 10
38477: PUSH
38478: LD_VAR 0 7
38482: ARRAY
38483: PUSH
38484: FOR_IN
38485: IFFALSE 38526
// if GetBWeapon ( i ) = j [ 1 ] then
38487: LD_VAR 0 4
38491: PPUSH
38492: CALL_OW 269
38496: PUSH
38497: LD_VAR 0 5
38501: PUSH
38502: LD_INT 1
38504: ARRAY
38505: EQUAL
38506: IFFALSE 38524
// begin weapon := j [ 2 ] ;
38508: LD_ADDR_VAR 0 8
38512: PUSH
38513: LD_VAR 0 5
38517: PUSH
38518: LD_INT 2
38520: ARRAY
38521: ST_TO_ADDR
// break ;
38522: GO 38526
// end ;
38524: GO 38484
38526: POP
38527: POP
// if not weapon then
38528: LD_VAR 0 8
38532: NOT
38533: IFFALSE 38537
// continue ;
38535: GO 38433
// for k in factories do
38537: LD_ADDR_VAR 0 6
38541: PUSH
38542: LD_VAR 0 2
38546: PUSH
38547: FOR_IN
38548: IFFALSE 38613
// begin weapons := AvailableWeaponList ( k ) ;
38550: LD_ADDR_VAR 0 9
38554: PUSH
38555: LD_VAR 0 6
38559: PPUSH
38560: CALL_OW 478
38564: ST_TO_ADDR
// if not weapons then
38565: LD_VAR 0 9
38569: NOT
38570: IFFALSE 38574
// continue ;
38572: GO 38547
// if weapon in weapons then
38574: LD_VAR 0 8
38578: PUSH
38579: LD_VAR 0 9
38583: IN
38584: IFFALSE 38611
// begin result := [ i , weapon ] ;
38586: LD_ADDR_VAR 0 3
38590: PUSH
38591: LD_VAR 0 4
38595: PUSH
38596: LD_VAR 0 8
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: ST_TO_ADDR
// exit ;
38605: POP
38606: POP
38607: POP
38608: POP
38609: GO 38619
// end ; end ;
38611: GO 38547
38613: POP
38614: POP
// end ;
38615: GO 38433
38617: POP
38618: POP
// end ;
38619: LD_VAR 0 3
38623: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38624: LD_INT 0
38626: PPUSH
// if not side or side > 8 then
38627: LD_VAR 0 3
38631: NOT
38632: IFTRUE 38644
38634: PUSH
38635: LD_VAR 0 3
38639: PUSH
38640: LD_INT 8
38642: GREATER
38643: OR
38644: IFFALSE 38648
// exit ;
38646: GO 38707
// if not range then
38648: LD_VAR 0 4
38652: NOT
38653: IFFALSE 38664
// range := - 12 ;
38655: LD_ADDR_VAR 0 4
38659: PUSH
38660: LD_INT 12
38662: NEG
38663: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38664: LD_VAR 0 1
38668: PPUSH
38669: LD_VAR 0 2
38673: PPUSH
38674: LD_VAR 0 3
38678: PPUSH
38679: LD_VAR 0 4
38683: PPUSH
38684: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38688: LD_VAR 0 1
38692: PPUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: LD_VAR 0 3
38702: PPUSH
38703: CALL_OW 331
// end ;
38707: LD_VAR 0 5
38711: RET
// export function Video ( mode ) ; begin
38712: LD_INT 0
38714: PPUSH
// ingame_video = mode ;
38715: LD_ADDR_OWVAR 52
38719: PUSH
38720: LD_VAR 0 1
38724: ST_TO_ADDR
// interface_hidden = mode ;
38725: LD_ADDR_OWVAR 54
38729: PUSH
38730: LD_VAR 0 1
38734: ST_TO_ADDR
// end ;
38735: LD_VAR 0 2
38739: RET
// export function Join ( array , element ) ; begin
38740: LD_INT 0
38742: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: LD_VAR 0 1
38757: PUSH
38758: LD_INT 1
38760: PLUS
38761: PPUSH
38762: LD_VAR 0 2
38766: PPUSH
38767: CALL_OW 1
38771: ST_TO_ADDR
// end ;
38772: LD_VAR 0 3
38776: RET
// export function JoinUnion ( array , element ) ; begin
38777: LD_INT 0
38779: PPUSH
// result := array union element ;
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: LD_VAR 0 1
38789: PUSH
38790: LD_VAR 0 2
38794: UNION
38795: ST_TO_ADDR
// end ;
38796: LD_VAR 0 3
38800: RET
// export function GetBehemoths ( side ) ; begin
38801: LD_INT 0
38803: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38804: LD_ADDR_VAR 0 2
38808: PUSH
38809: LD_INT 22
38811: PUSH
38812: LD_VAR 0 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 31
38823: PUSH
38824: LD_INT 25
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PPUSH
38835: CALL_OW 69
38839: ST_TO_ADDR
// end ;
38840: LD_VAR 0 2
38844: RET
// export function Shuffle ( array ) ; var i , index ; begin
38845: LD_INT 0
38847: PPUSH
38848: PPUSH
38849: PPUSH
// result := [ ] ;
38850: LD_ADDR_VAR 0 2
38854: PUSH
38855: EMPTY
38856: ST_TO_ADDR
// if not array then
38857: LD_VAR 0 1
38861: NOT
38862: IFFALSE 38866
// exit ;
38864: GO 38965
// Randomize ;
38866: CALL_OW 10
// for i = array downto 1 do
38870: LD_ADDR_VAR 0 3
38874: PUSH
38875: DOUBLE
38876: LD_VAR 0 1
38880: INC
38881: ST_TO_ADDR
38882: LD_INT 1
38884: PUSH
38885: FOR_DOWNTO
38886: IFFALSE 38963
// begin index := rand ( 1 , array ) ;
38888: LD_ADDR_VAR 0 4
38892: PUSH
38893: LD_INT 1
38895: PPUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: CALL_OW 12
38905: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38906: LD_ADDR_VAR 0 2
38910: PUSH
38911: LD_VAR 0 2
38915: PPUSH
38916: LD_VAR 0 2
38920: PUSH
38921: LD_INT 1
38923: PLUS
38924: PPUSH
38925: LD_VAR 0 1
38929: PUSH
38930: LD_VAR 0 4
38934: ARRAY
38935: PPUSH
38936: CALL_OW 2
38940: ST_TO_ADDR
// array := Delete ( array , index ) ;
38941: LD_ADDR_VAR 0 1
38945: PUSH
38946: LD_VAR 0 1
38950: PPUSH
38951: LD_VAR 0 4
38955: PPUSH
38956: CALL_OW 3
38960: ST_TO_ADDR
// end ;
38961: GO 38885
38963: POP
38964: POP
// end ;
38965: LD_VAR 0 2
38969: RET
// export function GetBaseMaterials ( base ) ; begin
38970: LD_INT 0
38972: PPUSH
// result := [ 0 , 0 , 0 ] ;
38973: LD_ADDR_VAR 0 2
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: LIST
38991: ST_TO_ADDR
// if not base then
38992: LD_VAR 0 1
38996: NOT
38997: IFFALSE 39001
// exit ;
38999: GO 39050
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39001: LD_ADDR_VAR 0 2
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: LD_INT 1
39013: PPUSH
39014: CALL_OW 275
39018: PUSH
39019: LD_VAR 0 1
39023: PPUSH
39024: LD_INT 2
39026: PPUSH
39027: CALL_OW 275
39031: PUSH
39032: LD_VAR 0 1
39036: PPUSH
39037: LD_INT 3
39039: PPUSH
39040: CALL_OW 275
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: ST_TO_ADDR
// end ;
39050: LD_VAR 0 2
39054: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39055: LD_INT 0
39057: PPUSH
39058: PPUSH
// result := array ;
39059: LD_ADDR_VAR 0 3
39063: PUSH
39064: LD_VAR 0 1
39068: ST_TO_ADDR
// if size >= result then
39069: LD_VAR 0 2
39073: PUSH
39074: LD_VAR 0 3
39078: GREATEREQUAL
39079: IFFALSE 39083
// exit ;
39081: GO 39133
// if size then
39083: LD_VAR 0 2
39087: IFFALSE 39133
// for i := array downto size do
39089: LD_ADDR_VAR 0 4
39093: PUSH
39094: DOUBLE
39095: LD_VAR 0 1
39099: INC
39100: ST_TO_ADDR
39101: LD_VAR 0 2
39105: PUSH
39106: FOR_DOWNTO
39107: IFFALSE 39131
// result := Delete ( result , result ) ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_VAR 0 3
39118: PPUSH
39119: LD_VAR 0 3
39123: PPUSH
39124: CALL_OW 3
39128: ST_TO_ADDR
39129: GO 39106
39131: POP
39132: POP
// end ;
39133: LD_VAR 0 3
39137: RET
// export function ComExit ( unit ) ; var tmp ; begin
39138: LD_INT 0
39140: PPUSH
39141: PPUSH
// if not IsInUnit ( unit ) then
39142: LD_VAR 0 1
39146: PPUSH
39147: CALL_OW 310
39151: NOT
39152: IFFALSE 39156
// exit ;
39154: GO 39216
// tmp := IsInUnit ( unit ) ;
39156: LD_ADDR_VAR 0 3
39160: PUSH
39161: LD_VAR 0 1
39165: PPUSH
39166: CALL_OW 310
39170: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39171: LD_VAR 0 3
39175: PPUSH
39176: CALL_OW 247
39180: PUSH
39181: LD_INT 2
39183: EQUAL
39184: IFFALSE 39197
// ComExitVehicle ( unit ) else
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 121
39195: GO 39206
// ComExitBuilding ( unit ) ;
39197: LD_VAR 0 1
39201: PPUSH
39202: CALL_OW 122
// result := tmp ;
39206: LD_ADDR_VAR 0 2
39210: PUSH
39211: LD_VAR 0 3
39215: ST_TO_ADDR
// end ;
39216: LD_VAR 0 2
39220: RET
// export function ComExitAll ( units ) ; var i ; begin
39221: LD_INT 0
39223: PPUSH
39224: PPUSH
// if not units then
39225: LD_VAR 0 1
39229: NOT
39230: IFFALSE 39234
// exit ;
39232: GO 39260
// for i in units do
39234: LD_ADDR_VAR 0 3
39238: PUSH
39239: LD_VAR 0 1
39243: PUSH
39244: FOR_IN
39245: IFFALSE 39258
// ComExit ( i ) ;
39247: LD_VAR 0 3
39251: PPUSH
39252: CALL 39138 0 1
39256: GO 39244
39258: POP
39259: POP
// end ;
39260: LD_VAR 0 2
39264: RET
// export function ResetHc ; begin
39265: LD_INT 0
39267: PPUSH
// InitHc ;
39268: CALL_OW 19
// hc_importance := 0 ;
39272: LD_ADDR_OWVAR 32
39276: PUSH
39277: LD_INT 0
39279: ST_TO_ADDR
// end ;
39280: LD_VAR 0 1
39284: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39285: LD_INT 0
39287: PPUSH
39288: PPUSH
39289: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39290: LD_ADDR_VAR 0 6
39294: PUSH
39295: LD_VAR 0 1
39299: PUSH
39300: LD_VAR 0 3
39304: PLUS
39305: PUSH
39306: LD_INT 2
39308: DIV
39309: ST_TO_ADDR
// if _x < 0 then
39310: LD_VAR 0 6
39314: PUSH
39315: LD_INT 0
39317: LESS
39318: IFFALSE 39335
// _x := _x * - 1 ;
39320: LD_ADDR_VAR 0 6
39324: PUSH
39325: LD_VAR 0 6
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: MUL
39334: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39335: LD_ADDR_VAR 0 7
39339: PUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_VAR 0 4
39349: PLUS
39350: PUSH
39351: LD_INT 2
39353: DIV
39354: ST_TO_ADDR
// if _y < 0 then
39355: LD_VAR 0 7
39359: PUSH
39360: LD_INT 0
39362: LESS
39363: IFFALSE 39380
// _y := _y * - 1 ;
39365: LD_ADDR_VAR 0 7
39369: PUSH
39370: LD_VAR 0 7
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: MUL
39379: ST_TO_ADDR
// result := [ _x , _y ] ;
39380: LD_ADDR_VAR 0 5
39384: PUSH
39385: LD_VAR 0 6
39389: PUSH
39390: LD_VAR 0 7
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: ST_TO_ADDR
// end ;
39399: LD_VAR 0 5
39403: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39404: LD_INT 0
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
// task := GetTaskList ( unit ) ;
39410: LD_ADDR_VAR 0 7
39414: PUSH
39415: LD_VAR 0 1
39419: PPUSH
39420: CALL_OW 437
39424: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39425: LD_VAR 0 7
39429: NOT
39430: IFFALSE 39449
39432: PUSH
39433: LD_VAR 0 1
39437: PPUSH
39438: LD_VAR 0 2
39442: PPUSH
39443: CALL_OW 308
39447: NOT
39448: AND
39449: IFFALSE 39453
// exit ;
39451: GO 39571
// if IsInArea ( unit , area ) then
39453: LD_VAR 0 1
39457: PPUSH
39458: LD_VAR 0 2
39462: PPUSH
39463: CALL_OW 308
39467: IFFALSE 39485
// begin ComMoveToArea ( unit , goAway ) ;
39469: LD_VAR 0 1
39473: PPUSH
39474: LD_VAR 0 3
39478: PPUSH
39479: CALL_OW 113
// exit ;
39483: GO 39571
// end ; if task [ 1 ] [ 1 ] <> M then
39485: LD_VAR 0 7
39489: PUSH
39490: LD_INT 1
39492: ARRAY
39493: PUSH
39494: LD_INT 1
39496: ARRAY
39497: PUSH
39498: LD_STRING M
39500: NONEQUAL
39501: IFFALSE 39505
// exit ;
39503: GO 39571
// x := task [ 1 ] [ 2 ] ;
39505: LD_ADDR_VAR 0 5
39509: PUSH
39510: LD_VAR 0 7
39514: PUSH
39515: LD_INT 1
39517: ARRAY
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39523: LD_ADDR_VAR 0 6
39527: PUSH
39528: LD_VAR 0 7
39532: PUSH
39533: LD_INT 1
39535: ARRAY
39536: PUSH
39537: LD_INT 3
39539: ARRAY
39540: ST_TO_ADDR
// if InArea ( x , y , area ) then
39541: LD_VAR 0 5
39545: PPUSH
39546: LD_VAR 0 6
39550: PPUSH
39551: LD_VAR 0 2
39555: PPUSH
39556: CALL_OW 309
39560: IFFALSE 39571
// ComStop ( unit ) ;
39562: LD_VAR 0 1
39566: PPUSH
39567: CALL_OW 141
// end ;
39571: LD_VAR 0 4
39575: RET
// export function Abs ( value ) ; begin
39576: LD_INT 0
39578: PPUSH
// result := value ;
39579: LD_ADDR_VAR 0 2
39583: PUSH
39584: LD_VAR 0 1
39588: ST_TO_ADDR
// if value < 0 then
39589: LD_VAR 0 1
39593: PUSH
39594: LD_INT 0
39596: LESS
39597: IFFALSE 39614
// result := value * - 1 ;
39599: LD_ADDR_VAR 0 2
39603: PUSH
39604: LD_VAR 0 1
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: MUL
39613: ST_TO_ADDR
// end ;
39614: LD_VAR 0 2
39618: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39619: LD_INT 0
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
// if not unit or not building then
39629: LD_VAR 0 1
39633: NOT
39634: IFTRUE 39643
39636: PUSH
39637: LD_VAR 0 2
39641: NOT
39642: OR
39643: IFFALSE 39647
// exit ;
39645: GO 39875
// x := GetX ( building ) ;
39647: LD_ADDR_VAR 0 4
39651: PUSH
39652: LD_VAR 0 2
39656: PPUSH
39657: CALL_OW 250
39661: ST_TO_ADDR
// y := GetY ( building ) ;
39662: LD_ADDR_VAR 0 6
39666: PUSH
39667: LD_VAR 0 2
39671: PPUSH
39672: CALL_OW 251
39676: ST_TO_ADDR
// d := GetDir ( building ) ;
39677: LD_ADDR_VAR 0 8
39681: PUSH
39682: LD_VAR 0 2
39686: PPUSH
39687: CALL_OW 254
39691: ST_TO_ADDR
// r := 4 ;
39692: LD_ADDR_VAR 0 9
39696: PUSH
39697: LD_INT 4
39699: ST_TO_ADDR
// for i := 1 to 5 do
39700: LD_ADDR_VAR 0 10
39704: PUSH
39705: DOUBLE
39706: LD_INT 1
39708: DEC
39709: ST_TO_ADDR
39710: LD_INT 5
39712: PUSH
39713: FOR_TO
39714: IFFALSE 39873
// begin _x := ShiftX ( x , d , r + i ) ;
39716: LD_ADDR_VAR 0 5
39720: PUSH
39721: LD_VAR 0 4
39725: PPUSH
39726: LD_VAR 0 8
39730: PPUSH
39731: LD_VAR 0 9
39735: PUSH
39736: LD_VAR 0 10
39740: PLUS
39741: PPUSH
39742: CALL_OW 272
39746: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39747: LD_ADDR_VAR 0 7
39751: PUSH
39752: LD_VAR 0 6
39756: PPUSH
39757: LD_VAR 0 8
39761: PPUSH
39762: LD_VAR 0 9
39766: PUSH
39767: LD_VAR 0 10
39771: PLUS
39772: PPUSH
39773: CALL_OW 273
39777: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39778: LD_VAR 0 5
39782: PPUSH
39783: LD_VAR 0 7
39787: PPUSH
39788: CALL_OW 488
39792: IFFALSE 39827
39794: PUSH
39795: LD_VAR 0 5
39799: PPUSH
39800: LD_VAR 0 7
39804: PPUSH
39805: CALL_OW 428
39809: PPUSH
39810: CALL_OW 247
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: LD_INT 2
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: IN
39825: NOT
39826: AND
39827: IFFALSE 39871
// begin ComMoveXY ( unit , _x , _y ) ;
39829: LD_VAR 0 1
39833: PPUSH
39834: LD_VAR 0 5
39838: PPUSH
39839: LD_VAR 0 7
39843: PPUSH
39844: CALL_OW 111
// result := [ _x , _y ] ;
39848: LD_ADDR_VAR 0 3
39852: PUSH
39853: LD_VAR 0 5
39857: PUSH
39858: LD_VAR 0 7
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// exit ;
39867: POP
39868: POP
39869: GO 39875
// end ; end ;
39871: GO 39713
39873: POP
39874: POP
// end ;
39875: LD_VAR 0 3
39879: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39880: LD_INT 0
39882: PPUSH
39883: PPUSH
39884: PPUSH
// result := 0 ;
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_INT 0
39892: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39893: LD_VAR 0 1
39897: PUSH
39898: LD_INT 0
39900: LESS
39901: IFTRUE 39913
39903: PUSH
39904: LD_VAR 0 1
39908: PUSH
39909: LD_INT 8
39911: GREATER
39912: OR
39913: IFTRUE 39925
39915: PUSH
39916: LD_VAR 0 2
39920: PUSH
39921: LD_INT 0
39923: LESS
39924: OR
39925: IFTRUE 39937
39927: PUSH
39928: LD_VAR 0 2
39932: PUSH
39933: LD_INT 8
39935: GREATER
39936: OR
39937: IFFALSE 39941
// exit ;
39939: GO 40016
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39941: LD_ADDR_VAR 0 4
39945: PUSH
39946: LD_INT 22
39948: PUSH
39949: LD_VAR 0 2
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PPUSH
39958: CALL_OW 69
39962: PUSH
39963: FOR_IN
39964: IFFALSE 40014
// begin un := UnitShoot ( i ) ;
39966: LD_ADDR_VAR 0 5
39970: PUSH
39971: LD_VAR 0 4
39975: PPUSH
39976: CALL_OW 504
39980: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39981: LD_VAR 0 5
39985: PPUSH
39986: CALL_OW 255
39990: PUSH
39991: LD_VAR 0 1
39995: EQUAL
39996: IFFALSE 40012
// begin result := un ;
39998: LD_ADDR_VAR 0 3
40002: PUSH
40003: LD_VAR 0 5
40007: ST_TO_ADDR
// exit ;
40008: POP
40009: POP
40010: GO 40016
// end ; end ;
40012: GO 39963
40014: POP
40015: POP
// end ;
40016: LD_VAR 0 3
40020: RET
// export function GetCargoBay ( units ) ; begin
40021: LD_INT 0
40023: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40024: LD_ADDR_VAR 0 2
40028: PUSH
40029: LD_VAR 0 1
40033: PPUSH
40034: LD_INT 2
40036: PUSH
40037: LD_INT 34
40039: PUSH
40040: LD_INT 12
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 34
40049: PUSH
40050: LD_INT 51
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 34
40059: PUSH
40060: LD_INT 32
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 34
40069: PUSH
40070: LD_INT 89
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: PPUSH
40084: CALL_OW 72
40088: ST_TO_ADDR
// end ;
40089: LD_VAR 0 2
40093: RET
// export function Negate ( value ) ; begin
40094: LD_INT 0
40096: PPUSH
// result := not value ;
40097: LD_ADDR_VAR 0 2
40101: PUSH
40102: LD_VAR 0 1
40106: NOT
40107: ST_TO_ADDR
// end ;
40108: LD_VAR 0 2
40112: RET
// export function Inc ( value ) ; begin
40113: LD_INT 0
40115: PPUSH
// result := value + 1 ;
40116: LD_ADDR_VAR 0 2
40120: PUSH
40121: LD_VAR 0 1
40125: PUSH
40126: LD_INT 1
40128: PLUS
40129: ST_TO_ADDR
// end ;
40130: LD_VAR 0 2
40134: RET
// export function Dec ( value ) ; begin
40135: LD_INT 0
40137: PPUSH
// result := value - 1 ;
40138: LD_ADDR_VAR 0 2
40142: PUSH
40143: LD_VAR 0 1
40147: PUSH
40148: LD_INT 1
40150: MINUS
40151: ST_TO_ADDR
// end ;
40152: LD_VAR 0 2
40156: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40157: LD_INT 0
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40167: LD_VAR 0 1
40171: PPUSH
40172: LD_VAR 0 2
40176: PPUSH
40177: CALL_OW 488
40181: NOT
40182: IFTRUE 40201
40184: PUSH
40185: LD_VAR 0 3
40189: PPUSH
40190: LD_VAR 0 4
40194: PPUSH
40195: CALL_OW 488
40199: NOT
40200: OR
40201: IFFALSE 40214
// begin result := - 1 ;
40203: LD_ADDR_VAR 0 5
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: ST_TO_ADDR
// exit ;
40212: GO 40449
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40214: LD_ADDR_VAR 0 12
40218: PUSH
40219: LD_VAR 0 1
40223: PPUSH
40224: LD_VAR 0 2
40228: PPUSH
40229: LD_VAR 0 3
40233: PPUSH
40234: LD_VAR 0 4
40238: PPUSH
40239: CALL 39285 0 4
40243: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40244: LD_ADDR_VAR 0 11
40248: PUSH
40249: LD_VAR 0 1
40253: PPUSH
40254: LD_VAR 0 2
40258: PPUSH
40259: LD_VAR 0 12
40263: PUSH
40264: LD_INT 1
40266: ARRAY
40267: PPUSH
40268: LD_VAR 0 12
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: PPUSH
40277: CALL_OW 298
40281: ST_TO_ADDR
// distance := 9999 ;
40282: LD_ADDR_VAR 0 10
40286: PUSH
40287: LD_INT 9999
40289: ST_TO_ADDR
// for i := 0 to 5 do
40290: LD_ADDR_VAR 0 6
40294: PUSH
40295: DOUBLE
40296: LD_INT 0
40298: DEC
40299: ST_TO_ADDR
40300: LD_INT 5
40302: PUSH
40303: FOR_TO
40304: IFFALSE 40447
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40306: LD_ADDR_VAR 0 7
40310: PUSH
40311: LD_VAR 0 1
40315: PPUSH
40316: LD_VAR 0 6
40320: PPUSH
40321: LD_VAR 0 11
40325: PPUSH
40326: CALL_OW 272
40330: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40331: LD_ADDR_VAR 0 8
40335: PUSH
40336: LD_VAR 0 2
40340: PPUSH
40341: LD_VAR 0 6
40345: PPUSH
40346: LD_VAR 0 11
40350: PPUSH
40351: CALL_OW 273
40355: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40356: LD_VAR 0 7
40360: PPUSH
40361: LD_VAR 0 8
40365: PPUSH
40366: CALL_OW 488
40370: NOT
40371: IFFALSE 40375
// continue ;
40373: GO 40303
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: LD_VAR 0 12
40384: PUSH
40385: LD_INT 1
40387: ARRAY
40388: PPUSH
40389: LD_VAR 0 12
40393: PUSH
40394: LD_INT 2
40396: ARRAY
40397: PPUSH
40398: LD_VAR 0 7
40402: PPUSH
40403: LD_VAR 0 8
40407: PPUSH
40408: CALL_OW 298
40412: ST_TO_ADDR
// if tmp < distance then
40413: LD_VAR 0 9
40417: PUSH
40418: LD_VAR 0 10
40422: LESS
40423: IFFALSE 40445
// begin result := i ;
40425: LD_ADDR_VAR 0 5
40429: PUSH
40430: LD_VAR 0 6
40434: ST_TO_ADDR
// distance := tmp ;
40435: LD_ADDR_VAR 0 10
40439: PUSH
40440: LD_VAR 0 9
40444: ST_TO_ADDR
// end ; end ;
40445: GO 40303
40447: POP
40448: POP
// end ;
40449: LD_VAR 0 5
40453: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40454: LD_INT 0
40456: PPUSH
40457: PPUSH
// if not driver or not IsInUnit ( driver ) then
40458: LD_VAR 0 1
40462: NOT
40463: IFTRUE 40477
40465: PUSH
40466: LD_VAR 0 1
40470: PPUSH
40471: CALL_OW 310
40475: NOT
40476: OR
40477: IFFALSE 40481
// exit ;
40479: GO 40571
// vehicle := IsInUnit ( driver ) ;
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 310
40495: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40496: LD_VAR 0 1
40500: PPUSH
40501: LD_STRING \
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: PUSH
40531: LD_STRING E
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_VAR 0 3
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PPUSH
40567: CALL_OW 446
// end ;
40571: LD_VAR 0 2
40575: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40576: LD_INT 0
40578: PPUSH
40579: PPUSH
// if not driver or not IsInUnit ( driver ) then
40580: LD_VAR 0 1
40584: NOT
40585: IFTRUE 40599
40587: PUSH
40588: LD_VAR 0 1
40592: PPUSH
40593: CALL_OW 310
40597: NOT
40598: OR
40599: IFFALSE 40603
// exit ;
40601: GO 40693
// vehicle := IsInUnit ( driver ) ;
40603: LD_ADDR_VAR 0 3
40607: PUSH
40608: LD_VAR 0 1
40612: PPUSH
40613: CALL_OW 310
40617: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40618: LD_VAR 0 1
40622: PPUSH
40623: LD_STRING \
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: PUSH
40653: LD_STRING E
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_VAR 0 3
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PPUSH
40689: CALL_OW 447
// end ;
40693: LD_VAR 0 2
40697: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40698: LD_INT 0
40700: PPUSH
40701: PPUSH
40702: PPUSH
// tmp := [ ] ;
40703: LD_ADDR_VAR 0 5
40707: PUSH
40708: EMPTY
40709: ST_TO_ADDR
// for i in units do
40710: LD_ADDR_VAR 0 4
40714: PUSH
40715: LD_VAR 0 1
40719: PUSH
40720: FOR_IN
40721: IFFALSE 40759
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40723: LD_ADDR_VAR 0 5
40727: PUSH
40728: LD_VAR 0 5
40732: PPUSH
40733: LD_VAR 0 5
40737: PUSH
40738: LD_INT 1
40740: PLUS
40741: PPUSH
40742: LD_VAR 0 4
40746: PPUSH
40747: CALL_OW 256
40751: PPUSH
40752: CALL_OW 2
40756: ST_TO_ADDR
40757: GO 40720
40759: POP
40760: POP
// if not tmp then
40761: LD_VAR 0 5
40765: NOT
40766: IFFALSE 40770
// exit ;
40768: GO 40818
// if asc then
40770: LD_VAR 0 2
40774: IFFALSE 40798
// result := SortListByListAsc ( units , tmp ) else
40776: LD_ADDR_VAR 0 3
40780: PUSH
40781: LD_VAR 0 1
40785: PPUSH
40786: LD_VAR 0 5
40790: PPUSH
40791: CALL_OW 76
40795: ST_TO_ADDR
40796: GO 40818
// result := SortListByListDesc ( units , tmp ) ;
40798: LD_ADDR_VAR 0 3
40802: PUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: LD_VAR 0 5
40812: PPUSH
40813: CALL_OW 77
40817: ST_TO_ADDR
// end ;
40818: LD_VAR 0 3
40822: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40823: LD_INT 0
40825: PPUSH
40826: PPUSH
// task := GetTaskList ( mech ) ;
40827: LD_ADDR_VAR 0 4
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: CALL_OW 437
40841: ST_TO_ADDR
// if not task then
40842: LD_VAR 0 4
40846: NOT
40847: IFFALSE 40851
// exit ;
40849: GO 40895
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40851: LD_ADDR_VAR 0 3
40855: PUSH
40856: LD_VAR 0 4
40860: PUSH
40861: LD_INT 1
40863: ARRAY
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PUSH
40869: LD_STRING r
40871: EQUAL
40872: IFFALSE 40894
40874: PUSH
40875: LD_VAR 0 4
40879: PUSH
40880: LD_INT 1
40882: ARRAY
40883: PUSH
40884: LD_INT 4
40886: ARRAY
40887: PUSH
40888: LD_VAR 0 2
40892: EQUAL
40893: AND
40894: ST_TO_ADDR
// end ;
40895: LD_VAR 0 3
40899: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40900: LD_INT 0
40902: PPUSH
// SetDir ( unit , d ) ;
40903: LD_VAR 0 1
40907: PPUSH
40908: LD_VAR 0 4
40912: PPUSH
40913: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40917: LD_ADDR_VAR 0 6
40921: PUSH
40922: LD_VAR 0 1
40926: PPUSH
40927: LD_VAR 0 2
40931: PPUSH
40932: LD_VAR 0 3
40936: PPUSH
40937: LD_VAR 0 5
40941: PPUSH
40942: CALL_OW 48
40946: ST_TO_ADDR
// end ;
40947: LD_VAR 0 6
40951: RET
// export function ToNaturalNumber ( number ) ; begin
40952: LD_INT 0
40954: PPUSH
// result := number div 1 ;
40955: LD_ADDR_VAR 0 2
40959: PUSH
40960: LD_VAR 0 1
40964: PUSH
40965: LD_INT 1
40967: DIV
40968: ST_TO_ADDR
// if number < 0 then
40969: LD_VAR 0 1
40973: PUSH
40974: LD_INT 0
40976: LESS
40977: IFFALSE 40987
// result := 0 ;
40979: LD_ADDR_VAR 0 2
40983: PUSH
40984: LD_INT 0
40986: ST_TO_ADDR
// end ;
40987: LD_VAR 0 2
40991: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40992: LD_INT 0
40994: PPUSH
40995: PPUSH
40996: PPUSH
// if not buildings then
40997: LD_VAR 0 1
41001: NOT
41002: IFFALSE 41006
// exit ;
41004: GO 41121
// tmp := [ ] ;
41006: LD_ADDR_VAR 0 5
41010: PUSH
41011: EMPTY
41012: ST_TO_ADDR
// for b in buildings do
41013: LD_ADDR_VAR 0 4
41017: PUSH
41018: LD_VAR 0 1
41022: PUSH
41023: FOR_IN
41024: IFFALSE 41062
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41026: LD_ADDR_VAR 0 5
41030: PUSH
41031: LD_VAR 0 5
41035: PPUSH
41036: LD_VAR 0 5
41040: PUSH
41041: LD_INT 1
41043: PLUS
41044: PPUSH
41045: LD_VAR 0 4
41049: PPUSH
41050: CALL_OW 266
41054: PPUSH
41055: CALL_OW 1
41059: ST_TO_ADDR
41060: GO 41023
41062: POP
41063: POP
// if not tmp then
41064: LD_VAR 0 5
41068: NOT
41069: IFFALSE 41073
// exit ;
41071: GO 41121
// if asc then
41073: LD_VAR 0 2
41077: IFFALSE 41101
// result := SortListByListAsc ( buildings , tmp ) else
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_VAR 0 1
41088: PPUSH
41089: LD_VAR 0 5
41093: PPUSH
41094: CALL_OW 76
41098: ST_TO_ADDR
41099: GO 41121
// result := SortListByListDesc ( buildings , tmp ) ;
41101: LD_ADDR_VAR 0 3
41105: PUSH
41106: LD_VAR 0 1
41110: PPUSH
41111: LD_VAR 0 5
41115: PPUSH
41116: CALL_OW 77
41120: ST_TO_ADDR
// end ;
41121: LD_VAR 0 3
41125: RET
// export function SortByClass ( units , class ) ; var un ; begin
41126: LD_INT 0
41128: PPUSH
41129: PPUSH
// if not units or not class then
41130: LD_VAR 0 1
41134: NOT
41135: IFTRUE 41144
41137: PUSH
41138: LD_VAR 0 2
41142: NOT
41143: OR
41144: IFFALSE 41148
// exit ;
41146: GO 41243
// result := [ ] ;
41148: LD_ADDR_VAR 0 3
41152: PUSH
41153: EMPTY
41154: ST_TO_ADDR
// for un in units do
41155: LD_ADDR_VAR 0 4
41159: PUSH
41160: LD_VAR 0 1
41164: PUSH
41165: FOR_IN
41166: IFFALSE 41241
// if GetClass ( un ) = class then
41168: LD_VAR 0 4
41172: PPUSH
41173: CALL_OW 257
41177: PUSH
41178: LD_VAR 0 2
41182: EQUAL
41183: IFFALSE 41210
// result := Insert ( result , 1 , un ) else
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: LD_VAR 0 3
41194: PPUSH
41195: LD_INT 1
41197: PPUSH
41198: LD_VAR 0 4
41202: PPUSH
41203: CALL_OW 2
41207: ST_TO_ADDR
41208: GO 41239
// result := Replace ( result , result + 1 , un ) ;
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_VAR 0 3
41219: PPUSH
41220: LD_VAR 0 3
41224: PUSH
41225: LD_INT 1
41227: PLUS
41228: PPUSH
41229: LD_VAR 0 4
41233: PPUSH
41234: CALL_OW 1
41238: ST_TO_ADDR
41239: GO 41165
41241: POP
41242: POP
// end ;
41243: LD_VAR 0 3
41247: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41248: LD_INT 0
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
41256: PPUSH
// result := [ ] ;
41257: LD_ADDR_VAR 0 4
41261: PUSH
41262: EMPTY
41263: ST_TO_ADDR
// if x - r < 0 then
41264: LD_VAR 0 1
41268: PUSH
41269: LD_VAR 0 3
41273: MINUS
41274: PUSH
41275: LD_INT 0
41277: LESS
41278: IFFALSE 41290
// min_x := 0 else
41280: LD_ADDR_VAR 0 8
41284: PUSH
41285: LD_INT 0
41287: ST_TO_ADDR
41288: GO 41306
// min_x := x - r ;
41290: LD_ADDR_VAR 0 8
41294: PUSH
41295: LD_VAR 0 1
41299: PUSH
41300: LD_VAR 0 3
41304: MINUS
41305: ST_TO_ADDR
// if y - r < 0 then
41306: LD_VAR 0 2
41310: PUSH
41311: LD_VAR 0 3
41315: MINUS
41316: PUSH
41317: LD_INT 0
41319: LESS
41320: IFFALSE 41332
// min_y := 0 else
41322: LD_ADDR_VAR 0 7
41326: PUSH
41327: LD_INT 0
41329: ST_TO_ADDR
41330: GO 41348
// min_y := y - r ;
41332: LD_ADDR_VAR 0 7
41336: PUSH
41337: LD_VAR 0 2
41341: PUSH
41342: LD_VAR 0 3
41346: MINUS
41347: ST_TO_ADDR
// max_x := x + r ;
41348: LD_ADDR_VAR 0 9
41352: PUSH
41353: LD_VAR 0 1
41357: PUSH
41358: LD_VAR 0 3
41362: PLUS
41363: ST_TO_ADDR
// max_y := y + r ;
41364: LD_ADDR_VAR 0 10
41368: PUSH
41369: LD_VAR 0 2
41373: PUSH
41374: LD_VAR 0 3
41378: PLUS
41379: ST_TO_ADDR
// for _x = min_x to max_x do
41380: LD_ADDR_VAR 0 5
41384: PUSH
41385: DOUBLE
41386: LD_VAR 0 8
41390: DEC
41391: ST_TO_ADDR
41392: LD_VAR 0 9
41396: PUSH
41397: FOR_TO
41398: IFFALSE 41499
// for _y = min_y to max_y do
41400: LD_ADDR_VAR 0 6
41404: PUSH
41405: DOUBLE
41406: LD_VAR 0 7
41410: DEC
41411: ST_TO_ADDR
41412: LD_VAR 0 10
41416: PUSH
41417: FOR_TO
41418: IFFALSE 41495
// begin if not ValidHex ( _x , _y ) then
41420: LD_VAR 0 5
41424: PPUSH
41425: LD_VAR 0 6
41429: PPUSH
41430: CALL_OW 488
41434: NOT
41435: IFFALSE 41439
// continue ;
41437: GO 41417
// if GetResourceTypeXY ( _x , _y ) then
41439: LD_VAR 0 5
41443: PPUSH
41444: LD_VAR 0 6
41448: PPUSH
41449: CALL_OW 283
41453: IFFALSE 41493
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41455: LD_ADDR_VAR 0 4
41459: PUSH
41460: LD_VAR 0 4
41464: PPUSH
41465: LD_VAR 0 4
41469: PUSH
41470: LD_INT 1
41472: PLUS
41473: PPUSH
41474: LD_VAR 0 5
41478: PUSH
41479: LD_VAR 0 6
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PPUSH
41488: CALL_OW 1
41492: ST_TO_ADDR
// end ;
41493: GO 41417
41495: POP
41496: POP
41497: GO 41397
41499: POP
41500: POP
// end ;
41501: LD_VAR 0 4
41505: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41506: LD_INT 0
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
// if not units then
41516: LD_VAR 0 1
41520: NOT
41521: IFFALSE 41525
// exit ;
41523: GO 42057
// result := UnitFilter ( units , [ f_ok ] ) ;
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_VAR 0 1
41534: PPUSH
41535: LD_INT 50
41537: PUSH
41538: EMPTY
41539: LIST
41540: PPUSH
41541: CALL_OW 72
41545: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41546: LD_ADDR_VAR 0 8
41550: PUSH
41551: LD_VAR 0 1
41555: PUSH
41556: LD_INT 1
41558: ARRAY
41559: PPUSH
41560: CALL_OW 255
41564: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41565: LD_ADDR_VAR 0 10
41569: PUSH
41570: LD_INT 29
41572: PUSH
41573: LD_INT 91
41575: PUSH
41576: LD_INT 49
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
// if not result then
41584: LD_VAR 0 3
41588: NOT
41589: IFFALSE 41593
// exit ;
41591: GO 42057
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41593: LD_ADDR_VAR 0 5
41597: PUSH
41598: LD_INT 81
41600: PUSH
41601: LD_VAR 0 8
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PPUSH
41610: CALL_OW 69
41614: ST_TO_ADDR
// for i in result do
41615: LD_ADDR_VAR 0 4
41619: PUSH
41620: LD_VAR 0 3
41624: PUSH
41625: FOR_IN
41626: IFFALSE 42055
// begin tag := GetTag ( i ) + 1 ;
41628: LD_ADDR_VAR 0 9
41632: PUSH
41633: LD_VAR 0 4
41637: PPUSH
41638: CALL_OW 110
41642: PUSH
41643: LD_INT 1
41645: PLUS
41646: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41647: LD_ADDR_VAR 0 7
41651: PUSH
41652: LD_VAR 0 4
41656: PPUSH
41657: CALL_OW 250
41661: PPUSH
41662: LD_VAR 0 4
41666: PPUSH
41667: CALL_OW 251
41671: PPUSH
41672: LD_INT 4
41674: PPUSH
41675: CALL 41248 0 3
41679: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41680: LD_VAR 0 4
41684: PPUSH
41685: CALL_OW 247
41689: PUSH
41690: LD_INT 2
41692: EQUAL
41693: IFFALSE 41705
41695: PUSH
41696: LD_VAR 0 7
41700: PUSH
41701: LD_INT 2
41703: GREATER
41704: AND
41705: IFFALSE 41725
41707: PUSH
41708: LD_VAR 0 4
41712: PPUSH
41713: CALL_OW 264
41717: PUSH
41718: LD_VAR 0 10
41722: IN
41723: NOT
41724: AND
41725: IFFALSE 41764
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41727: LD_VAR 0 4
41731: PPUSH
41732: LD_VAR 0 7
41736: PUSH
41737: LD_INT 1
41739: ARRAY
41740: PUSH
41741: LD_INT 1
41743: ARRAY
41744: PPUSH
41745: LD_VAR 0 7
41749: PUSH
41750: LD_INT 1
41752: ARRAY
41753: PUSH
41754: LD_INT 2
41756: ARRAY
41757: PPUSH
41758: CALL_OW 116
41762: GO 42053
// if path > tag then
41764: LD_VAR 0 2
41768: PUSH
41769: LD_VAR 0 9
41773: GREATER
41774: IFFALSE 41982
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41776: LD_ADDR_VAR 0 6
41780: PUSH
41781: LD_VAR 0 5
41785: PPUSH
41786: LD_INT 91
41788: PUSH
41789: LD_VAR 0 4
41793: PUSH
41794: LD_INT 8
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: PPUSH
41802: CALL_OW 72
41806: ST_TO_ADDR
// if nearEnemy then
41807: LD_VAR 0 6
41811: IFFALSE 41880
// begin if GetWeapon ( i ) = ru_time_lapser then
41813: LD_VAR 0 4
41817: PPUSH
41818: CALL_OW 264
41822: PUSH
41823: LD_INT 49
41825: EQUAL
41826: IFFALSE 41854
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41828: LD_VAR 0 4
41832: PPUSH
41833: LD_VAR 0 6
41837: PPUSH
41838: LD_VAR 0 4
41842: PPUSH
41843: CALL_OW 74
41847: PPUSH
41848: CALL_OW 112
41852: GO 41878
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41854: LD_VAR 0 4
41858: PPUSH
41859: LD_VAR 0 6
41863: PPUSH
41864: LD_VAR 0 4
41868: PPUSH
41869: CALL_OW 74
41873: PPUSH
41874: CALL 43138 0 2
// end else
41878: GO 41980
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41880: LD_VAR 0 4
41884: PPUSH
41885: LD_VAR 0 2
41889: PUSH
41890: LD_VAR 0 9
41894: ARRAY
41895: PUSH
41896: LD_INT 1
41898: ARRAY
41899: PPUSH
41900: LD_VAR 0 2
41904: PUSH
41905: LD_VAR 0 9
41909: ARRAY
41910: PUSH
41911: LD_INT 2
41913: ARRAY
41914: PPUSH
41915: CALL_OW 297
41919: PUSH
41920: LD_INT 6
41922: GREATER
41923: IFFALSE 41966
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41925: LD_VAR 0 4
41929: PPUSH
41930: LD_VAR 0 2
41934: PUSH
41935: LD_VAR 0 9
41939: ARRAY
41940: PUSH
41941: LD_INT 1
41943: ARRAY
41944: PPUSH
41945: LD_VAR 0 2
41949: PUSH
41950: LD_VAR 0 9
41954: ARRAY
41955: PUSH
41956: LD_INT 2
41958: ARRAY
41959: PPUSH
41960: CALL_OW 114
41964: GO 41980
// SetTag ( i , tag ) ;
41966: LD_VAR 0 4
41970: PPUSH
41971: LD_VAR 0 9
41975: PPUSH
41976: CALL_OW 109
// end else
41980: GO 42053
// if enemy then
41982: LD_VAR 0 5
41986: IFFALSE 42053
// begin if GetWeapon ( i ) = ru_time_lapser then
41988: LD_VAR 0 4
41992: PPUSH
41993: CALL_OW 264
41997: PUSH
41998: LD_INT 49
42000: EQUAL
42001: IFFALSE 42029
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42003: LD_VAR 0 4
42007: PPUSH
42008: LD_VAR 0 5
42012: PPUSH
42013: LD_VAR 0 4
42017: PPUSH
42018: CALL_OW 74
42022: PPUSH
42023: CALL_OW 112
42027: GO 42053
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42029: LD_VAR 0 4
42033: PPUSH
42034: LD_VAR 0 5
42038: PPUSH
42039: LD_VAR 0 4
42043: PPUSH
42044: CALL_OW 74
42048: PPUSH
42049: CALL 43138 0 2
// end ; end ;
42053: GO 41625
42055: POP
42056: POP
// end ;
42057: LD_VAR 0 3
42061: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42062: LD_INT 0
42064: PPUSH
42065: PPUSH
42066: PPUSH
// if not unit or IsInUnit ( unit ) then
42067: LD_VAR 0 1
42071: NOT
42072: IFTRUE 42085
42074: PUSH
42075: LD_VAR 0 1
42079: PPUSH
42080: CALL_OW 310
42084: OR
42085: IFFALSE 42089
// exit ;
42087: GO 42180
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42089: LD_ADDR_VAR 0 4
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: CALL_OW 250
42103: PPUSH
42104: LD_VAR 0 2
42108: PPUSH
42109: LD_INT 1
42111: PPUSH
42112: CALL_OW 272
42116: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42117: LD_ADDR_VAR 0 5
42121: PUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 251
42131: PPUSH
42132: LD_VAR 0 2
42136: PPUSH
42137: LD_INT 1
42139: PPUSH
42140: CALL_OW 273
42144: ST_TO_ADDR
// if ValidHex ( x , y ) then
42145: LD_VAR 0 4
42149: PPUSH
42150: LD_VAR 0 5
42154: PPUSH
42155: CALL_OW 488
42159: IFFALSE 42180
// ComTurnXY ( unit , x , y ) ;
42161: LD_VAR 0 1
42165: PPUSH
42166: LD_VAR 0 4
42170: PPUSH
42171: LD_VAR 0 5
42175: PPUSH
42176: CALL_OW 118
// end ;
42180: LD_VAR 0 3
42184: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42185: LD_INT 0
42187: PPUSH
42188: PPUSH
// result := false ;
42189: LD_ADDR_VAR 0 3
42193: PUSH
42194: LD_INT 0
42196: ST_TO_ADDR
// if not units then
42197: LD_VAR 0 2
42201: NOT
42202: IFFALSE 42206
// exit ;
42204: GO 42251
// for i in units do
42206: LD_ADDR_VAR 0 4
42210: PUSH
42211: LD_VAR 0 2
42215: PUSH
42216: FOR_IN
42217: IFFALSE 42249
// if See ( side , i ) then
42219: LD_VAR 0 1
42223: PPUSH
42224: LD_VAR 0 4
42228: PPUSH
42229: CALL_OW 292
42233: IFFALSE 42247
// begin result := true ;
42235: LD_ADDR_VAR 0 3
42239: PUSH
42240: LD_INT 1
42242: ST_TO_ADDR
// exit ;
42243: POP
42244: POP
42245: GO 42251
// end ;
42247: GO 42216
42249: POP
42250: POP
// end ;
42251: LD_VAR 0 3
42255: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42256: LD_INT 0
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
// if not unit or not points then
42262: LD_VAR 0 1
42266: NOT
42267: IFTRUE 42276
42269: PUSH
42270: LD_VAR 0 2
42274: NOT
42275: OR
42276: IFFALSE 42280
// exit ;
42278: GO 42370
// dist := 99999 ;
42280: LD_ADDR_VAR 0 5
42284: PUSH
42285: LD_INT 99999
42287: ST_TO_ADDR
// for i in points do
42288: LD_ADDR_VAR 0 4
42292: PUSH
42293: LD_VAR 0 2
42297: PUSH
42298: FOR_IN
42299: IFFALSE 42368
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42301: LD_ADDR_VAR 0 6
42305: PUSH
42306: LD_VAR 0 1
42310: PPUSH
42311: LD_VAR 0 4
42315: PUSH
42316: LD_INT 1
42318: ARRAY
42319: PPUSH
42320: LD_VAR 0 4
42324: PUSH
42325: LD_INT 2
42327: ARRAY
42328: PPUSH
42329: CALL_OW 297
42333: ST_TO_ADDR
// if tmpDist < dist then
42334: LD_VAR 0 6
42338: PUSH
42339: LD_VAR 0 5
42343: LESS
42344: IFFALSE 42366
// begin result := i ;
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_VAR 0 4
42355: ST_TO_ADDR
// dist := tmpDist ;
42356: LD_ADDR_VAR 0 5
42360: PUSH
42361: LD_VAR 0 6
42365: ST_TO_ADDR
// end ; end ;
42366: GO 42298
42368: POP
42369: POP
// end ;
42370: LD_VAR 0 3
42374: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42375: LD_INT 0
42377: PPUSH
// uc_side := side ;
42378: LD_ADDR_OWVAR 20
42382: PUSH
42383: LD_VAR 0 1
42387: ST_TO_ADDR
// uc_nation := 3 ;
42388: LD_ADDR_OWVAR 21
42392: PUSH
42393: LD_INT 3
42395: ST_TO_ADDR
// vc_chassis := 25 ;
42396: LD_ADDR_OWVAR 37
42400: PUSH
42401: LD_INT 25
42403: ST_TO_ADDR
// vc_engine := engine_siberite ;
42404: LD_ADDR_OWVAR 39
42408: PUSH
42409: LD_INT 3
42411: ST_TO_ADDR
// vc_control := control_computer ;
42412: LD_ADDR_OWVAR 38
42416: PUSH
42417: LD_INT 3
42419: ST_TO_ADDR
// vc_weapon := 59 ;
42420: LD_ADDR_OWVAR 40
42424: PUSH
42425: LD_INT 59
42427: ST_TO_ADDR
// result := CreateVehicle ;
42428: LD_ADDR_VAR 0 5
42432: PUSH
42433: CALL_OW 45
42437: ST_TO_ADDR
// SetDir ( result , d ) ;
42438: LD_VAR 0 5
42442: PPUSH
42443: LD_VAR 0 4
42447: PPUSH
42448: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42452: LD_VAR 0 5
42456: PPUSH
42457: LD_VAR 0 2
42461: PPUSH
42462: LD_VAR 0 3
42466: PPUSH
42467: LD_INT 0
42469: PPUSH
42470: CALL_OW 48
// end ;
42474: LD_VAR 0 5
42478: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42479: LD_INT 0
42481: PPUSH
42482: PPUSH
42483: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42484: LD_ADDR_VAR 0 2
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42507: LD_VAR 0 1
42511: NOT
42512: IFTRUE 42545
42514: PUSH
42515: LD_VAR 0 1
42519: PPUSH
42520: CALL_OW 264
42524: PUSH
42525: LD_INT 12
42527: PUSH
42528: LD_INT 51
42530: PUSH
42531: LD_INT 32
42533: PUSH
42534: LD_INT 89
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: IN
42543: NOT
42544: OR
42545: IFFALSE 42549
// exit ;
42547: GO 42647
// for i := 1 to 3 do
42549: LD_ADDR_VAR 0 3
42553: PUSH
42554: DOUBLE
42555: LD_INT 1
42557: DEC
42558: ST_TO_ADDR
42559: LD_INT 3
42561: PUSH
42562: FOR_TO
42563: IFFALSE 42645
// begin tmp := GetCargo ( cargo , i ) ;
42565: LD_ADDR_VAR 0 4
42569: PUSH
42570: LD_VAR 0 1
42574: PPUSH
42575: LD_VAR 0 3
42579: PPUSH
42580: CALL_OW 289
42584: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42585: LD_ADDR_VAR 0 2
42589: PUSH
42590: LD_VAR 0 2
42594: PPUSH
42595: LD_VAR 0 3
42599: PPUSH
42600: LD_VAR 0 4
42604: PPUSH
42605: CALL_OW 1
42609: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42610: LD_ADDR_VAR 0 2
42614: PUSH
42615: LD_VAR 0 2
42619: PPUSH
42620: LD_INT 4
42622: PPUSH
42623: LD_VAR 0 2
42627: PUSH
42628: LD_INT 4
42630: ARRAY
42631: PUSH
42632: LD_VAR 0 4
42636: PLUS
42637: PPUSH
42638: CALL_OW 1
42642: ST_TO_ADDR
// end ;
42643: GO 42562
42645: POP
42646: POP
// end ;
42647: LD_VAR 0 2
42651: RET
// export function Length ( array ) ; begin
42652: LD_INT 0
42654: PPUSH
// result := array + 0 ;
42655: LD_ADDR_VAR 0 2
42659: PUSH
42660: LD_VAR 0 1
42664: PUSH
42665: LD_INT 0
42667: PLUS
42668: ST_TO_ADDR
// end ;
42669: LD_VAR 0 2
42673: RET
// export function PrepareArray ( array ) ; begin
42674: LD_INT 0
42676: PPUSH
// result := array diff 0 ;
42677: LD_ADDR_VAR 0 2
42681: PUSH
42682: LD_VAR 0 1
42686: PUSH
42687: LD_INT 0
42689: DIFF
42690: ST_TO_ADDR
// if not result [ 1 ] then
42691: LD_VAR 0 2
42695: PUSH
42696: LD_INT 1
42698: ARRAY
42699: NOT
42700: IFFALSE 42720
// result := Delete ( result , 1 ) ;
42702: LD_ADDR_VAR 0 2
42706: PUSH
42707: LD_VAR 0 2
42711: PPUSH
42712: LD_INT 1
42714: PPUSH
42715: CALL_OW 3
42719: ST_TO_ADDR
// end ;
42720: LD_VAR 0 2
42724: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42725: LD_INT 0
42727: PPUSH
42728: PPUSH
42729: PPUSH
42730: PPUSH
// sibRocketRange := 25 ;
42731: LD_ADDR_VAR 0 6
42735: PUSH
42736: LD_INT 25
42738: ST_TO_ADDR
// result := false ;
42739: LD_ADDR_VAR 0 4
42743: PUSH
42744: LD_INT 0
42746: ST_TO_ADDR
// for i := 0 to 5 do
42747: LD_ADDR_VAR 0 5
42751: PUSH
42752: DOUBLE
42753: LD_INT 0
42755: DEC
42756: ST_TO_ADDR
42757: LD_INT 5
42759: PUSH
42760: FOR_TO
42761: IFFALSE 42828
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42763: LD_VAR 0 1
42767: PPUSH
42768: LD_VAR 0 5
42772: PPUSH
42773: LD_VAR 0 6
42777: PPUSH
42778: CALL_OW 272
42782: PPUSH
42783: LD_VAR 0 2
42787: PPUSH
42788: LD_VAR 0 5
42792: PPUSH
42793: LD_VAR 0 6
42797: PPUSH
42798: CALL_OW 273
42802: PPUSH
42803: LD_VAR 0 3
42807: PPUSH
42808: CALL_OW 309
42812: IFFALSE 42826
// begin result := true ;
42814: LD_ADDR_VAR 0 4
42818: PUSH
42819: LD_INT 1
42821: ST_TO_ADDR
// exit ;
42822: POP
42823: POP
42824: GO 42830
// end ;
42826: GO 42760
42828: POP
42829: POP
// end ;
42830: LD_VAR 0 4
42834: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42835: LD_INT 0
42837: PPUSH
42838: PPUSH
42839: PPUSH
// if btype = b_depot then
42840: LD_VAR 0 2
42844: PUSH
42845: LD_INT 0
42847: EQUAL
42848: IFFALSE 42860
// begin result := true ;
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 1
42857: ST_TO_ADDR
// exit ;
42858: GO 42980
// end ; pom := GetBase ( depot ) ;
42860: LD_ADDR_VAR 0 4
42864: PUSH
42865: LD_VAR 0 1
42869: PPUSH
42870: CALL_OW 274
42874: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42875: LD_ADDR_VAR 0 5
42879: PUSH
42880: LD_VAR 0 2
42884: PPUSH
42885: LD_VAR 0 1
42889: PPUSH
42890: CALL_OW 248
42894: PPUSH
42895: CALL_OW 450
42899: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42900: LD_ADDR_VAR 0 3
42904: PUSH
42905: LD_VAR 0 4
42909: PPUSH
42910: LD_INT 1
42912: PPUSH
42913: CALL_OW 275
42917: PUSH
42918: LD_VAR 0 5
42922: PUSH
42923: LD_INT 1
42925: ARRAY
42926: GREATEREQUAL
42927: IFFALSE 42953
42929: PUSH
42930: LD_VAR 0 4
42934: PPUSH
42935: LD_INT 2
42937: PPUSH
42938: CALL_OW 275
42942: PUSH
42943: LD_VAR 0 5
42947: PUSH
42948: LD_INT 2
42950: ARRAY
42951: GREATEREQUAL
42952: AND
42953: IFFALSE 42979
42955: PUSH
42956: LD_VAR 0 4
42960: PPUSH
42961: LD_INT 3
42963: PPUSH
42964: CALL_OW 275
42968: PUSH
42969: LD_VAR 0 5
42973: PUSH
42974: LD_INT 3
42976: ARRAY
42977: GREATEREQUAL
42978: AND
42979: ST_TO_ADDR
// end ;
42980: LD_VAR 0 3
42984: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42985: LD_INT 0
42987: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42988: LD_VAR 0 1
42992: PPUSH
42993: LD_VAR 0 2
42997: PPUSH
42998: LD_INT 0
43000: PPUSH
43001: LD_INT 0
43003: PPUSH
43004: LD_INT 1
43006: PPUSH
43007: LD_INT 0
43009: PPUSH
43010: CALL_OW 587
// end ;
43014: LD_VAR 0 3
43018: RET
// export function CenterOnNow ( unit ) ; begin
43019: LD_INT 0
43021: PPUSH
// result := IsInUnit ( unit ) ;
43022: LD_ADDR_VAR 0 2
43026: PUSH
43027: LD_VAR 0 1
43031: PPUSH
43032: CALL_OW 310
43036: ST_TO_ADDR
// if not result then
43037: LD_VAR 0 2
43041: NOT
43042: IFFALSE 43054
// result := unit ;
43044: LD_ADDR_VAR 0 2
43048: PUSH
43049: LD_VAR 0 1
43053: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43054: LD_VAR 0 1
43058: PPUSH
43059: CALL_OW 87
// end ;
43063: LD_VAR 0 2
43067: RET
// export function ComMoveHex ( unit , hex ) ; begin
43068: LD_INT 0
43070: PPUSH
// if not hex then
43071: LD_VAR 0 2
43075: NOT
43076: IFFALSE 43080
// exit ;
43078: GO 43133
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43080: LD_VAR 0 2
43084: PUSH
43085: LD_INT 1
43087: ARRAY
43088: PPUSH
43089: LD_VAR 0 2
43093: PUSH
43094: LD_INT 2
43096: ARRAY
43097: PPUSH
43098: CALL_OW 428
43102: IFFALSE 43106
// exit ;
43104: GO 43133
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43106: LD_VAR 0 1
43110: PPUSH
43111: LD_VAR 0 2
43115: PUSH
43116: LD_INT 1
43118: ARRAY
43119: PPUSH
43120: LD_VAR 0 2
43124: PUSH
43125: LD_INT 2
43127: ARRAY
43128: PPUSH
43129: CALL_OW 111
// end ;
43133: LD_VAR 0 3
43137: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43138: LD_INT 0
43140: PPUSH
43141: PPUSH
43142: PPUSH
// if not unit or not enemy then
43143: LD_VAR 0 1
43147: NOT
43148: IFTRUE 43157
43150: PUSH
43151: LD_VAR 0 2
43155: NOT
43156: OR
43157: IFFALSE 43161
// exit ;
43159: GO 43287
// x := GetX ( enemy ) ;
43161: LD_ADDR_VAR 0 4
43165: PUSH
43166: LD_VAR 0 2
43170: PPUSH
43171: CALL_OW 250
43175: ST_TO_ADDR
// y := GetY ( enemy ) ;
43176: LD_ADDR_VAR 0 5
43180: PUSH
43181: LD_VAR 0 2
43185: PPUSH
43186: CALL_OW 251
43190: ST_TO_ADDR
// if ValidHex ( x , y ) then
43191: LD_VAR 0 4
43195: PPUSH
43196: LD_VAR 0 5
43200: PPUSH
43201: CALL_OW 488
43205: IFFALSE 43287
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43207: LD_VAR 0 2
43211: PPUSH
43212: CALL_OW 247
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: IN
43227: IFTRUE 43250
43229: PUSH
43230: LD_VAR 0 1
43234: PPUSH
43235: CALL_OW 255
43239: PPUSH
43240: LD_VAR 0 2
43244: PPUSH
43245: CALL_OW 292
43249: OR
43250: IFFALSE 43268
// ComAttackUnit ( unit , enemy ) else
43252: LD_VAR 0 1
43256: PPUSH
43257: LD_VAR 0 2
43261: PPUSH
43262: CALL_OW 115
43266: GO 43287
// ComAgressiveMove ( unit , x , y ) ;
43268: LD_VAR 0 1
43272: PPUSH
43273: LD_VAR 0 4
43277: PPUSH
43278: LD_VAR 0 5
43282: PPUSH
43283: CALL_OW 114
// end ;
43287: LD_VAR 0 3
43291: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43292: LD_INT 0
43294: PPUSH
43295: PPUSH
43296: PPUSH
// list := AreaToList ( area , 0 ) ;
43297: LD_ADDR_VAR 0 5
43301: PUSH
43302: LD_VAR 0 1
43306: PPUSH
43307: LD_INT 0
43309: PPUSH
43310: CALL_OW 517
43314: ST_TO_ADDR
// if not list then
43315: LD_VAR 0 5
43319: NOT
43320: IFFALSE 43324
// exit ;
43322: GO 43454
// if all then
43324: LD_VAR 0 2
43328: IFFALSE 43416
// begin for i := 1 to list [ 1 ] do
43330: LD_ADDR_VAR 0 4
43334: PUSH
43335: DOUBLE
43336: LD_INT 1
43338: DEC
43339: ST_TO_ADDR
43340: LD_VAR 0 5
43344: PUSH
43345: LD_INT 1
43347: ARRAY
43348: PUSH
43349: FOR_TO
43350: IFFALSE 43412
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43352: LD_ADDR_VAR 0 3
43356: PUSH
43357: LD_VAR 0 3
43361: PPUSH
43362: LD_VAR 0 3
43366: PUSH
43367: LD_INT 1
43369: PLUS
43370: PPUSH
43371: LD_VAR 0 5
43375: PUSH
43376: LD_INT 1
43378: ARRAY
43379: PUSH
43380: LD_VAR 0 4
43384: ARRAY
43385: PUSH
43386: LD_VAR 0 5
43390: PUSH
43391: LD_INT 2
43393: ARRAY
43394: PUSH
43395: LD_VAR 0 4
43399: ARRAY
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PPUSH
43405: CALL_OW 1
43409: ST_TO_ADDR
43410: GO 43349
43412: POP
43413: POP
// exit ;
43414: GO 43454
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43416: LD_ADDR_VAR 0 3
43420: PUSH
43421: LD_VAR 0 5
43425: PUSH
43426: LD_INT 1
43428: ARRAY
43429: PUSH
43430: LD_INT 1
43432: ARRAY
43433: PUSH
43434: LD_VAR 0 5
43438: PUSH
43439: LD_INT 2
43441: ARRAY
43442: PUSH
43443: LD_INT 1
43445: ARRAY
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: ST_TO_ADDR
// end ;
43454: LD_VAR 0 3
43458: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43459: LD_INT 0
43461: PPUSH
43462: PPUSH
// list := AreaToList ( area , 0 ) ;
43463: LD_ADDR_VAR 0 4
43467: PUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: LD_INT 0
43475: PPUSH
43476: CALL_OW 517
43480: ST_TO_ADDR
// if not list then
43481: LD_VAR 0 4
43485: NOT
43486: IFFALSE 43490
// exit ;
43488: GO 43531
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: LD_VAR 0 4
43499: PUSH
43500: LD_INT 1
43502: ARRAY
43503: PUSH
43504: LD_INT 1
43506: ARRAY
43507: PUSH
43508: LD_VAR 0 4
43512: PUSH
43513: LD_INT 2
43515: ARRAY
43516: PUSH
43517: LD_INT 1
43519: ARRAY
43520: PUSH
43521: LD_VAR 0 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// end ;
43531: LD_VAR 0 3
43535: RET
// export function First ( array ) ; begin
43536: LD_INT 0
43538: PPUSH
// if not array then
43539: LD_VAR 0 1
43543: NOT
43544: IFFALSE 43548
// exit ;
43546: GO 43562
// result := array [ 1 ] ;
43548: LD_ADDR_VAR 0 2
43552: PUSH
43553: LD_VAR 0 1
43557: PUSH
43558: LD_INT 1
43560: ARRAY
43561: ST_TO_ADDR
// end ;
43562: LD_VAR 0 2
43566: RET
// export function Last ( array ) ; begin
43567: LD_INT 0
43569: PPUSH
// if not array then
43570: LD_VAR 0 1
43574: NOT
43575: IFFALSE 43579
// exit ;
43577: GO 43595
// result := array [ array ] ;
43579: LD_ADDR_VAR 0 2
43583: PUSH
43584: LD_VAR 0 1
43588: PUSH
43589: LD_VAR 0 1
43593: ARRAY
43594: ST_TO_ADDR
// end ;
43595: LD_VAR 0 2
43599: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43600: LD_INT 0
43602: PPUSH
43603: PPUSH
// result := [ ] ;
43604: LD_ADDR_VAR 0 5
43608: PUSH
43609: EMPTY
43610: ST_TO_ADDR
// if not array then
43611: LD_VAR 0 1
43615: NOT
43616: IFFALSE 43620
// exit ;
43618: GO 43732
// for i := 1 to array do
43620: LD_ADDR_VAR 0 6
43624: PUSH
43625: DOUBLE
43626: LD_INT 1
43628: DEC
43629: ST_TO_ADDR
43630: LD_VAR 0 1
43634: PUSH
43635: FOR_TO
43636: IFFALSE 43730
// if array [ i ] [ index ] = value then
43638: LD_VAR 0 1
43642: PUSH
43643: LD_VAR 0 6
43647: ARRAY
43648: PUSH
43649: LD_VAR 0 2
43653: ARRAY
43654: PUSH
43655: LD_VAR 0 3
43659: EQUAL
43660: IFFALSE 43728
// begin if indexColumn then
43662: LD_VAR 0 4
43666: IFFALSE 43702
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43668: LD_ADDR_VAR 0 5
43672: PUSH
43673: LD_VAR 0 5
43677: PPUSH
43678: LD_VAR 0 1
43682: PUSH
43683: LD_VAR 0 6
43687: ARRAY
43688: PUSH
43689: LD_VAR 0 4
43693: ARRAY
43694: PPUSH
43695: CALL 38740 0 2
43699: ST_TO_ADDR
43700: GO 43728
// result := Join ( result , array [ i ] ) ;
43702: LD_ADDR_VAR 0 5
43706: PUSH
43707: LD_VAR 0 5
43711: PPUSH
43712: LD_VAR 0 1
43716: PUSH
43717: LD_VAR 0 6
43721: ARRAY
43722: PPUSH
43723: CALL 38740 0 2
43727: ST_TO_ADDR
// end ;
43728: GO 43635
43730: POP
43731: POP
// end ;
43732: LD_VAR 0 5
43736: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43737: LD_INT 0
43739: PPUSH
// if not vehicles or not parkingPoint then
43740: LD_VAR 0 1
43744: NOT
43745: IFTRUE 43754
43747: PUSH
43748: LD_VAR 0 2
43752: NOT
43753: OR
43754: IFFALSE 43758
// exit ;
43756: GO 43856
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43758: LD_ADDR_VAR 0 1
43762: PUSH
43763: LD_VAR 0 1
43767: PPUSH
43768: LD_INT 50
43770: PUSH
43771: EMPTY
43772: LIST
43773: PUSH
43774: LD_INT 3
43776: PUSH
43777: LD_INT 92
43779: PUSH
43780: LD_VAR 0 2
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: PUSH
43789: LD_VAR 0 2
43793: PUSH
43794: LD_INT 2
43796: ARRAY
43797: PUSH
43798: LD_INT 8
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PPUSH
43815: CALL_OW 72
43819: ST_TO_ADDR
// if not vehicles then
43820: LD_VAR 0 1
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43856
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43829: LD_VAR 0 1
43833: PPUSH
43834: LD_VAR 0 2
43838: PUSH
43839: LD_INT 1
43841: ARRAY
43842: PPUSH
43843: LD_VAR 0 2
43847: PUSH
43848: LD_INT 2
43850: ARRAY
43851: PPUSH
43852: CALL_OW 111
// end ;
43856: LD_VAR 0 3
43860: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43861: LD_INT 0
43863: PPUSH
43864: PPUSH
43865: PPUSH
// if not side or not area then
43866: LD_VAR 0 1
43870: NOT
43871: IFTRUE 43880
43873: PUSH
43874: LD_VAR 0 2
43878: NOT
43879: OR
43880: IFFALSE 43884
// exit ;
43882: GO 44003
// tmp := AreaToList ( area , 0 ) ;
43884: LD_ADDR_VAR 0 5
43888: PUSH
43889: LD_VAR 0 2
43893: PPUSH
43894: LD_INT 0
43896: PPUSH
43897: CALL_OW 517
43901: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43902: LD_ADDR_VAR 0 4
43906: PUSH
43907: DOUBLE
43908: LD_INT 1
43910: DEC
43911: ST_TO_ADDR
43912: LD_VAR 0 5
43916: PUSH
43917: LD_INT 1
43919: ARRAY
43920: PUSH
43921: FOR_TO
43922: IFFALSE 44001
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43924: LD_VAR 0 5
43928: PUSH
43929: LD_INT 1
43931: ARRAY
43932: PUSH
43933: LD_VAR 0 4
43937: ARRAY
43938: PPUSH
43939: LD_VAR 0 5
43943: PUSH
43944: LD_INT 2
43946: ARRAY
43947: PUSH
43948: LD_VAR 0 4
43952: ARRAY
43953: PPUSH
43954: CALL_OW 351
43958: IFFALSE 43999
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43960: LD_VAR 0 5
43964: PUSH
43965: LD_INT 1
43967: ARRAY
43968: PUSH
43969: LD_VAR 0 4
43973: ARRAY
43974: PPUSH
43975: LD_VAR 0 5
43979: PUSH
43980: LD_INT 2
43982: ARRAY
43983: PUSH
43984: LD_VAR 0 4
43988: ARRAY
43989: PPUSH
43990: LD_VAR 0 1
43994: PPUSH
43995: CALL_OW 244
// end ;
43999: GO 43921
44001: POP
44002: POP
// end ;
44003: LD_VAR 0 3
44007: RET
// export function UniqueArray ( array ) ; var i ; begin
44008: LD_INT 0
44010: PPUSH
44011: PPUSH
// result := [ ] ;
44012: LD_ADDR_VAR 0 2
44016: PUSH
44017: EMPTY
44018: ST_TO_ADDR
// if not array then
44019: LD_VAR 0 1
44023: NOT
44024: IFFALSE 44028
// exit ;
44026: GO 44089
// for i := 1 to array do
44028: LD_ADDR_VAR 0 3
44032: PUSH
44033: DOUBLE
44034: LD_INT 1
44036: DEC
44037: ST_TO_ADDR
44038: LD_VAR 0 1
44042: PUSH
44043: FOR_TO
44044: IFFALSE 44087
// if not array [ i ] in result then
44046: LD_VAR 0 1
44050: PUSH
44051: LD_VAR 0 3
44055: ARRAY
44056: PUSH
44057: LD_VAR 0 2
44061: IN
44062: NOT
44063: IFFALSE 44085
// result := Join ( result , i ) ;
44065: LD_ADDR_VAR 0 2
44069: PUSH
44070: LD_VAR 0 2
44074: PPUSH
44075: LD_VAR 0 3
44079: PPUSH
44080: CALL 38740 0 2
44084: ST_TO_ADDR
44085: GO 44043
44087: POP
44088: POP
// end ; end_of_file
44089: LD_VAR 0 2
44093: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44094: LD_VAR 0 1
44098: PPUSH
44099: LD_VAR 0 2
44103: PPUSH
44104: LD_VAR 0 3
44108: PPUSH
44109: LD_VAR 0 4
44113: PPUSH
44114: LD_VAR 0 5
44118: PPUSH
44119: LD_VAR 0 6
44123: PPUSH
44124: CALL 51003 0 6
// end ;
44128: PPOPN 6
44130: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44131: LD_INT 0
44133: PPUSH
// begin if not units then
44134: LD_VAR 0 1
44138: NOT
44139: IFFALSE 44143
// exit ;
44141: GO 44177
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
44143: LD_VAR 0 1
44147: PPUSH
44148: LD_VAR 0 2
44152: PPUSH
44153: LD_VAR 0 3
44157: PPUSH
44158: LD_VAR 0 4
44162: PPUSH
44163: LD_VAR 0 5
44167: PPUSH
44168: LD_VAR 0 6
44172: PPUSH
44173: CALL 50797 0 6
// end ;
44177: PPOPN 7
44179: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44180: CALL 50883 0 0
// end ; end_of_file
44184: PPOPN 1
44186: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
44187: LD_VAR 0 1
44191: PUSH
44192: LD_INT 200
44194: DOUBLE
44195: GREATEREQUAL
44196: IFFALSE 44204
44198: LD_INT 299
44200: DOUBLE
44201: LESSEQUAL
44202: IFTRUE 44206
44204: GO 44238
44206: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
44207: LD_VAR 0 1
44211: PPUSH
44212: LD_VAR 0 2
44216: PPUSH
44217: LD_VAR 0 3
44221: PPUSH
44222: LD_VAR 0 4
44226: PPUSH
44227: LD_VAR 0 5
44231: PPUSH
44232: CALL 45100 0 5
44236: GO 44315
44238: LD_INT 300
44240: DOUBLE
44241: GREATEREQUAL
44242: IFFALSE 44250
44244: LD_INT 399
44246: DOUBLE
44247: LESSEQUAL
44248: IFTRUE 44252
44250: GO 44314
44252: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
44253: LD_VAR 0 1
44257: PPUSH
44258: LD_VAR 0 2
44262: PPUSH
44263: LD_VAR 0 3
44267: PPUSH
44268: LD_VAR 0 4
44272: PPUSH
44273: LD_VAR 0 5
44277: PPUSH
44278: LD_VAR 0 6
44282: PPUSH
44283: LD_VAR 0 7
44287: PPUSH
44288: LD_VAR 0 8
44292: PPUSH
44293: LD_VAR 0 9
44297: PPUSH
44298: LD_VAR 0 10
44302: PPUSH
44303: LD_VAR 0 11
44307: PPUSH
44308: CALL 63463 0 11
44312: GO 44315
44314: POP
// end ;
44315: PPOPN 11
44317: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
44318: LD_VAR 0 1
44322: PPUSH
44323: LD_VAR 0 2
44327: PPUSH
44328: LD_VAR 0 3
44332: PPUSH
44333: LD_VAR 0 4
44337: PPUSH
44338: LD_VAR 0 5
44342: PPUSH
44343: CALL 44400 0 5
// end ; end_of_file
44347: PPOPN 5
44349: END
// export function SOS_UnitDestroyed ( un ) ; begin
44350: LD_INT 0
44352: PPUSH
// ComRadiation ( un ) ;
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL 45520 0 1
// end ;
44362: LD_VAR 0 2
44366: RET
// export function SOS_UnitKamikazed ( un ) ; begin
44367: LD_INT 0
44369: PPUSH
// ComRadiation ( un ) ;
44370: LD_VAR 0 1
44374: PPUSH
44375: CALL 45520 0 1
// end ;
44379: LD_VAR 0 2
44383: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44384: LD_INT 0
44386: PPUSH
// end ;
44387: LD_VAR 0 4
44391: RET
// export function SOS_Command ( cmd ) ; begin
44392: LD_INT 0
44394: PPUSH
// end ;
44395: LD_VAR 0 2
44399: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44400: LD_INT 0
44402: PPUSH
// end ;
44403: LD_VAR 0 6
44407: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
44408: LD_INT 0
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
// if not vehicle or not factory then
44415: LD_VAR 0 1
44419: NOT
44420: IFTRUE 44429
44422: PUSH
44423: LD_VAR 0 2
44427: NOT
44428: OR
44429: IFFALSE 44433
// exit ;
44431: GO 45095
// weapon := GetWeapon ( vehicle ) ;
44433: LD_ADDR_VAR 0 7
44437: PUSH
44438: LD_VAR 0 1
44442: PPUSH
44443: CALL_OW 264
44447: ST_TO_ADDR
// if weapon = ar_miner then
44448: LD_VAR 0 7
44452: PUSH
44453: LD_INT 81
44455: EQUAL
44456: IFFALSE 44513
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
44458: LD_ADDR_EXP 9
44462: PUSH
44463: LD_EXP 9
44467: PPUSH
44468: LD_EXP 9
44472: PUSH
44473: LD_INT 1
44475: PLUS
44476: PPUSH
44477: LD_VAR 0 1
44481: PPUSH
44482: CALL_OW 1
44486: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
44487: LD_ADDR_EXP 10
44491: PUSH
44492: LD_EXP 10
44496: PPUSH
44497: LD_EXP 10
44501: PUSH
44502: LD_INT 1
44504: PLUS
44505: PPUSH
44506: EMPTY
44507: PPUSH
44508: CALL_OW 1
44512: ST_TO_ADDR
// end ; if not factoryWaypoints then
44513: LD_EXP 71
44517: NOT
44518: IFFALSE 44522
// exit ;
44520: GO 45095
// for i := 1 to Count ( factoryWaypoints ) do
44522: LD_ADDR_VAR 0 4
44526: PUSH
44527: DOUBLE
44528: LD_INT 1
44530: DEC
44531: ST_TO_ADDR
44532: LD_EXP 71
44536: PPUSH
44537: CALL 2764 0 1
44541: PUSH
44542: FOR_TO
44543: IFFALSE 45093
// if factoryWaypoints [ i ] [ 2 ] = factory then
44545: LD_EXP 71
44549: PUSH
44550: LD_VAR 0 4
44554: ARRAY
44555: PUSH
44556: LD_INT 2
44558: ARRAY
44559: PUSH
44560: LD_VAR 0 2
44564: EQUAL
44565: IFFALSE 45091
// begin if GetControl ( vehicle ) = control_manual then
44567: LD_VAR 0 1
44571: PPUSH
44572: CALL_OW 263
44576: PUSH
44577: LD_INT 1
44579: EQUAL
44580: IFFALSE 44944
// begin driver := IsDrivenBy ( vehicle ) ;
44582: LD_ADDR_VAR 0 5
44586: PUSH
44587: LD_VAR 0 1
44591: PPUSH
44592: CALL_OW 311
44596: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
44597: LD_VAR 0 5
44601: PUSH
44602: LD_EXP 72
44606: IN
44607: IFTRUE 44621
44609: PUSH
44610: LD_VAR 0 1
44614: PUSH
44615: LD_EXP 72
44619: IN
44620: OR
44621: IFFALSE 44627
// exit ;
44623: POP
44624: POP
44625: GO 45095
// if not HasTask ( driver ) then
44627: LD_VAR 0 5
44631: PPUSH
44632: CALL_OW 314
44636: NOT
44637: IFFALSE 44942
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
44639: LD_ADDR_EXP 72
44643: PUSH
44644: LD_EXP 72
44648: PPUSH
44649: LD_VAR 0 5
44653: PPUSH
44654: CALL 38740 0 2
44658: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
44659: LD_ADDR_EXP 72
44663: PUSH
44664: LD_EXP 72
44668: PPUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: CALL 38740 0 2
44678: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44679: LD_ADDR_VAR 0 6
44683: PUSH
44684: LD_EXP 71
44688: PUSH
44689: LD_VAR 0 4
44693: ARRAY
44694: PUSH
44695: LD_INT 3
44697: ARRAY
44698: PPUSH
44699: LD_EXP 71
44703: PUSH
44704: LD_VAR 0 4
44708: ARRAY
44709: PUSH
44710: LD_INT 4
44712: ARRAY
44713: PPUSH
44714: CALL_OW 428
44718: ST_TO_ADDR
// if hex then
44719: LD_VAR 0 6
44723: IFFALSE 44741
// ComMoveUnit ( driver , hex ) else
44725: LD_VAR 0 5
44729: PPUSH
44730: LD_VAR 0 6
44734: PPUSH
44735: CALL_OW 112
44739: GO 44825
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
44741: LD_VAR 0 1
44745: PPUSH
44746: LD_EXP 71
44750: PUSH
44751: LD_VAR 0 4
44755: ARRAY
44756: PUSH
44757: LD_INT 3
44759: ARRAY
44760: PPUSH
44761: LD_EXP 71
44765: PUSH
44766: LD_VAR 0 4
44770: ARRAY
44771: PUSH
44772: LD_INT 4
44774: ARRAY
44775: PPUSH
44776: CALL_OW 297
44780: PUSH
44781: LD_INT 0
44783: GREATER
44784: IFFALSE 44825
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44786: LD_VAR 0 5
44790: PPUSH
44791: LD_EXP 71
44795: PUSH
44796: LD_VAR 0 4
44800: ARRAY
44801: PUSH
44802: LD_INT 3
44804: ARRAY
44805: PPUSH
44806: LD_EXP 71
44810: PUSH
44811: LD_VAR 0 4
44815: ARRAY
44816: PUSH
44817: LD_INT 4
44819: ARRAY
44820: PPUSH
44821: CALL_OW 111
// AddComExitVehicle ( driver ) ;
44825: LD_VAR 0 5
44829: PPUSH
44830: CALL_OW 181
// if Multiplayer then
44834: LD_OWVAR 4
44838: IFFALSE 44887
// begin repeat wait ( 10 ) ;
44840: LD_INT 10
44842: PPUSH
44843: CALL_OW 67
// until not IsInUnit ( driver ) ;
44847: LD_VAR 0 5
44851: PPUSH
44852: CALL_OW 310
44856: NOT
44857: IFFALSE 44840
// if not HasTask ( driver ) then
44859: LD_VAR 0 5
44863: PPUSH
44864: CALL_OW 314
44868: NOT
44869: IFFALSE 44885
// ComEnterUnit ( driver , factory ) ;
44871: LD_VAR 0 5
44875: PPUSH
44876: LD_VAR 0 2
44880: PPUSH
44881: CALL_OW 120
// end else
44885: GO 44901
// AddComEnterUnit ( driver , factory ) ;
44887: LD_VAR 0 5
44891: PPUSH
44892: LD_VAR 0 2
44896: PPUSH
44897: CALL_OW 180
// wait ( 0 0$1 ) ;
44901: LD_INT 35
44903: PPUSH
44904: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
44908: LD_ADDR_EXP 72
44912: PUSH
44913: LD_EXP 72
44917: PUSH
44918: LD_VAR 0 5
44922: DIFF
44923: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
44924: LD_ADDR_EXP 72
44928: PUSH
44929: LD_EXP 72
44933: PUSH
44934: LD_VAR 0 1
44938: DIFF
44939: ST_TO_ADDR
// break ;
44940: GO 45093
// end ; end else
44942: GO 45091
// if GetControl ( vehicle ) = control_remote then
44944: LD_VAR 0 1
44948: PPUSH
44949: CALL_OW 263
44953: PUSH
44954: LD_INT 2
44956: EQUAL
44957: IFFALSE 45043
// begin wait ( 0 0$2 ) ;
44959: LD_INT 70
44961: PPUSH
44962: CALL_OW 67
// repeat wait ( 10 ) ;
44966: LD_INT 10
44968: PPUSH
44969: CALL_OW 67
// Connect ( vehicle ) ;
44973: LD_VAR 0 1
44977: PPUSH
44978: CALL 9042 0 1
// until IsControledBy ( vehicle ) ;
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 312
44991: IFFALSE 44966
// wait ( 10 ) ;
44993: LD_INT 10
44995: PPUSH
44996: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
45000: LD_VAR 0 1
45004: PPUSH
45005: LD_EXP 71
45009: PUSH
45010: LD_VAR 0 4
45014: ARRAY
45015: PUSH
45016: LD_INT 3
45018: ARRAY
45019: PPUSH
45020: LD_EXP 71
45024: PUSH
45025: LD_VAR 0 4
45029: ARRAY
45030: PUSH
45031: LD_INT 4
45033: ARRAY
45034: PPUSH
45035: CALL_OW 111
// break ;
45039: GO 45093
// end else
45041: GO 45091
// begin wait ( 0 0$3 ) ;
45043: LD_INT 105
45045: PPUSH
45046: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
45050: LD_VAR 0 1
45054: PPUSH
45055: LD_EXP 71
45059: PUSH
45060: LD_VAR 0 4
45064: ARRAY
45065: PUSH
45066: LD_INT 3
45068: ARRAY
45069: PPUSH
45070: LD_EXP 71
45074: PUSH
45075: LD_VAR 0 4
45079: ARRAY
45080: PUSH
45081: LD_INT 4
45083: ARRAY
45084: PPUSH
45085: CALL_OW 111
// break ;
45089: GO 45093
// end ; end ;
45091: GO 44542
45093: POP
45094: POP
// end ;
45095: LD_VAR 0 3
45099: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
45100: LD_INT 0
45102: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
45103: LD_VAR 0 1
45107: PUSH
45108: LD_INT 250
45110: EQUAL
45111: IFFALSE 45128
45113: PUSH
45114: LD_VAR 0 2
45118: PPUSH
45119: CALL_OW 264
45123: PUSH
45124: LD_INT 81
45126: EQUAL
45127: AND
45128: IFFALSE 45149
// MinerPlaceMine ( unit , x , y ) ;
45130: LD_VAR 0 2
45134: PPUSH
45135: LD_VAR 0 4
45139: PPUSH
45140: LD_VAR 0 5
45144: PPUSH
45145: CALL 48495 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
45149: LD_VAR 0 1
45153: PUSH
45154: LD_INT 251
45156: EQUAL
45157: IFFALSE 45174
45159: PUSH
45160: LD_VAR 0 2
45164: PPUSH
45165: CALL_OW 264
45169: PUSH
45170: LD_INT 81
45172: EQUAL
45173: AND
45174: IFFALSE 45195
// MinerDetonateMine ( unit , x , y ) ;
45176: LD_VAR 0 2
45180: PPUSH
45181: LD_VAR 0 4
45185: PPUSH
45186: LD_VAR 0 5
45190: PPUSH
45191: CALL 48902 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
45195: LD_VAR 0 1
45199: PUSH
45200: LD_INT 252
45202: EQUAL
45203: IFFALSE 45220
45205: PUSH
45206: LD_VAR 0 2
45210: PPUSH
45211: CALL_OW 264
45215: PUSH
45216: LD_INT 81
45218: EQUAL
45219: AND
45220: IFFALSE 45241
// MinerCreateMinefield ( unit , x , y ) ;
45222: LD_VAR 0 2
45226: PPUSH
45227: LD_VAR 0 4
45231: PPUSH
45232: LD_VAR 0 5
45236: PPUSH
45237: CALL 49134 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
45241: LD_VAR 0 1
45245: PUSH
45246: LD_INT 253
45248: EQUAL
45249: IFFALSE 45266
45251: PUSH
45252: LD_VAR 0 2
45256: PPUSH
45257: CALL_OW 257
45261: PUSH
45262: LD_INT 5
45264: EQUAL
45265: AND
45266: IFFALSE 45287
// ComBinocular ( unit , x , y ) ;
45268: LD_VAR 0 2
45272: PPUSH
45273: LD_VAR 0 4
45277: PPUSH
45278: LD_VAR 0 5
45282: PPUSH
45283: CALL 49509 0 3
// if selectedUnit then
45287: LD_VAR 0 3
45291: IFFALSE 45351
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
45293: LD_VAR 0 1
45297: PUSH
45298: LD_INT 254
45300: EQUAL
45301: IFFALSE 45318
45303: PUSH
45304: LD_VAR 0 2
45308: PPUSH
45309: CALL_OW 264
45313: PUSH
45314: LD_INT 99
45316: EQUAL
45317: AND
45318: IFFALSE 45335
45320: PUSH
45321: LD_VAR 0 3
45325: PPUSH
45326: CALL_OW 263
45330: PUSH
45331: LD_INT 3
45333: EQUAL
45334: AND
45335: IFFALSE 45351
// HackDestroyVehicle ( unit , selectedUnit ) ;
45337: LD_VAR 0 2
45341: PPUSH
45342: LD_VAR 0 3
45346: PPUSH
45347: CALL 47685 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
45351: LD_VAR 0 1
45355: PUSH
45356: LD_INT 255
45358: EQUAL
45359: IFFALSE 45383
45361: PUSH
45362: LD_VAR 0 2
45366: PPUSH
45367: CALL_OW 264
45371: PUSH
45372: LD_INT 14
45374: PUSH
45375: LD_INT 53
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: IN
45382: AND
45383: IFFALSE 45401
45385: PUSH
45386: LD_VAR 0 4
45390: PPUSH
45391: LD_VAR 0 5
45395: PPUSH
45396: CALL_OW 488
45400: AND
45401: IFFALSE 45425
// CutTreeXYR ( unit , x , y , 12 ) ;
45403: LD_VAR 0 2
45407: PPUSH
45408: LD_VAR 0 4
45412: PPUSH
45413: LD_VAR 0 5
45417: PPUSH
45418: LD_INT 12
45420: PPUSH
45421: CALL 45616 0 4
// if cmd = 256 then
45425: LD_VAR 0 1
45429: PUSH
45430: LD_INT 256
45432: EQUAL
45433: IFFALSE 45454
// SetFactoryWaypoint ( unit , x , y ) ;
45435: LD_VAR 0 2
45439: PPUSH
45440: LD_VAR 0 4
45444: PPUSH
45445: LD_VAR 0 5
45449: PPUSH
45450: CALL 65455 0 3
// if cmd = 257 then
45454: LD_VAR 0 1
45458: PUSH
45459: LD_INT 257
45461: EQUAL
45462: IFFALSE 45483
// SetWarehouseGatheringPoint ( unit , x , y ) ;
45464: LD_VAR 0 2
45468: PPUSH
45469: LD_VAR 0 4
45473: PPUSH
45474: LD_VAR 0 5
45478: PPUSH
45479: CALL 65951 0 3
// if cmd = 258 then
45483: LD_VAR 0 1
45487: PUSH
45488: LD_INT 258
45490: EQUAL
45491: IFFALSE 45515
// BurnTreeXYR ( unit , x , y , 8 ) ;
45493: LD_VAR 0 2
45497: PPUSH
45498: LD_VAR 0 4
45502: PPUSH
45503: LD_VAR 0 5
45507: PPUSH
45508: LD_INT 8
45510: PPUSH
45511: CALL 46038 0 4
// end ;
45515: LD_VAR 0 6
45519: RET
// export function ComRadiation ( un ) ; var eff ; begin
45520: LD_INT 0
45522: PPUSH
45523: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
45524: LD_VAR 0 1
45528: PPUSH
45529: CALL_OW 264
45533: PUSH
45534: LD_INT 91
45536: NONEQUAL
45537: IFFALSE 45541
// exit ;
45539: GO 45611
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45541: LD_INT 68
45543: PPUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 255
45553: PPUSH
45554: CALL_OW 321
45558: PUSH
45559: LD_INT 2
45561: EQUAL
45562: IFFALSE 45574
// eff := 50 else
45564: LD_ADDR_VAR 0 3
45568: PUSH
45569: LD_INT 50
45571: ST_TO_ADDR
45572: GO 45582
// eff := 25 ;
45574: LD_ADDR_VAR 0 3
45578: PUSH
45579: LD_INT 25
45581: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45582: LD_VAR 0 1
45586: PPUSH
45587: CALL_OW 250
45591: PPUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 251
45601: PPUSH
45602: LD_VAR 0 3
45606: PPUSH
45607: CALL_OW 495
// end ;
45611: LD_VAR 0 2
45615: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45616: LD_INT 0
45618: PPUSH
45619: PPUSH
45620: PPUSH
45621: PPUSH
45622: PPUSH
45623: PPUSH
45624: PPUSH
45625: PPUSH
45626: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
45627: LD_VAR 0 1
45631: PPUSH
45632: CALL_OW 302
45636: NOT
45637: IFTRUE 45656
45639: PUSH
45640: LD_VAR 0 2
45644: PPUSH
45645: LD_VAR 0 3
45649: PPUSH
45650: CALL_OW 488
45654: NOT
45655: OR
45656: IFTRUE 45665
45658: PUSH
45659: LD_VAR 0 4
45663: NOT
45664: OR
45665: IFFALSE 45669
// exit ;
45667: GO 46033
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
45669: LD_VAR 0 1
45673: PPUSH
45674: CALL_OW 437
45678: PPUSH
45679: CALL 2764 0 1
45683: PUSH
45684: LD_INT 10
45686: GREATER
45687: IFFALSE 45691
// exit ;
45689: GO 46033
// list := [ ] ;
45691: LD_ADDR_VAR 0 13
45695: PUSH
45696: EMPTY
45697: ST_TO_ADDR
// if x - r < 0 then
45698: LD_VAR 0 2
45702: PUSH
45703: LD_VAR 0 4
45707: MINUS
45708: PUSH
45709: LD_INT 0
45711: LESS
45712: IFFALSE 45724
// min_x := 0 else
45714: LD_ADDR_VAR 0 7
45718: PUSH
45719: LD_INT 0
45721: ST_TO_ADDR
45722: GO 45740
// min_x := x - r ;
45724: LD_ADDR_VAR 0 7
45728: PUSH
45729: LD_VAR 0 2
45733: PUSH
45734: LD_VAR 0 4
45738: MINUS
45739: ST_TO_ADDR
// if y - r < 0 then
45740: LD_VAR 0 3
45744: PUSH
45745: LD_VAR 0 4
45749: MINUS
45750: PUSH
45751: LD_INT 0
45753: LESS
45754: IFFALSE 45766
// min_y := 0 else
45756: LD_ADDR_VAR 0 8
45760: PUSH
45761: LD_INT 0
45763: ST_TO_ADDR
45764: GO 45782
// min_y := y - r ;
45766: LD_ADDR_VAR 0 8
45770: PUSH
45771: LD_VAR 0 3
45775: PUSH
45776: LD_VAR 0 4
45780: MINUS
45781: ST_TO_ADDR
// max_x := x + r ;
45782: LD_ADDR_VAR 0 9
45786: PUSH
45787: LD_VAR 0 2
45791: PUSH
45792: LD_VAR 0 4
45796: PLUS
45797: ST_TO_ADDR
// max_y := y + r ;
45798: LD_ADDR_VAR 0 10
45802: PUSH
45803: LD_VAR 0 3
45807: PUSH
45808: LD_VAR 0 4
45812: PLUS
45813: ST_TO_ADDR
// for _x = min_x to max_x do
45814: LD_ADDR_VAR 0 11
45818: PUSH
45819: DOUBLE
45820: LD_VAR 0 7
45824: DEC
45825: ST_TO_ADDR
45826: LD_VAR 0 9
45830: PUSH
45831: FOR_TO
45832: IFFALSE 45951
// for _y = min_y to max_y do
45834: LD_ADDR_VAR 0 12
45838: PUSH
45839: DOUBLE
45840: LD_VAR 0 8
45844: DEC
45845: ST_TO_ADDR
45846: LD_VAR 0 10
45850: PUSH
45851: FOR_TO
45852: IFFALSE 45947
// begin if not ValidHex ( _x , _y ) then
45854: LD_VAR 0 11
45858: PPUSH
45859: LD_VAR 0 12
45863: PPUSH
45864: CALL_OW 488
45868: NOT
45869: IFFALSE 45873
// continue ;
45871: GO 45851
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45873: LD_VAR 0 11
45877: PPUSH
45878: LD_VAR 0 12
45882: PPUSH
45883: CALL_OW 351
45887: IFFALSE 45905
45889: PUSH
45890: LD_VAR 0 11
45894: PPUSH
45895: LD_VAR 0 12
45899: PPUSH
45900: CALL_OW 554
45904: AND
45905: IFFALSE 45945
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45907: LD_ADDR_VAR 0 13
45911: PUSH
45912: LD_VAR 0 13
45916: PPUSH
45917: LD_VAR 0 13
45921: PUSH
45922: LD_INT 1
45924: PLUS
45925: PPUSH
45926: LD_VAR 0 11
45930: PUSH
45931: LD_VAR 0 12
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PPUSH
45940: CALL_OW 2
45944: ST_TO_ADDR
// end ;
45945: GO 45851
45947: POP
45948: POP
45949: GO 45831
45951: POP
45952: POP
// if not list then
45953: LD_VAR 0 13
45957: NOT
45958: IFFALSE 45962
// exit ;
45960: GO 46033
// for i in list do
45962: LD_ADDR_VAR 0 6
45966: PUSH
45967: LD_VAR 0 13
45971: PUSH
45972: FOR_IN
45973: IFFALSE 46031
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45975: LD_VAR 0 1
45979: PPUSH
45980: LD_STRING M
45982: PUSH
45983: LD_VAR 0 6
45987: PUSH
45988: LD_INT 1
45990: ARRAY
45991: PUSH
45992: LD_VAR 0 6
45996: PUSH
45997: LD_INT 2
45999: ARRAY
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: PUSH
46022: EMPTY
46023: LIST
46024: PPUSH
46025: CALL_OW 447
46029: GO 45972
46031: POP
46032: POP
// end ;
46033: LD_VAR 0 5
46037: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
46038: LD_INT 0
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
46050: LD_VAR 0 1
46054: PPUSH
46055: CALL_OW 302
46059: NOT
46060: IFTRUE 46079
46062: PUSH
46063: LD_VAR 0 2
46067: PPUSH
46068: LD_VAR 0 3
46072: PPUSH
46073: CALL_OW 488
46077: NOT
46078: OR
46079: IFTRUE 46088
46081: PUSH
46082: LD_VAR 0 4
46086: NOT
46087: OR
46088: IFFALSE 46092
// exit ;
46090: GO 46631
// if Count ( GetTaskList ( flame ) ) > 10 then
46092: LD_VAR 0 1
46096: PPUSH
46097: CALL_OW 437
46101: PPUSH
46102: CALL 2764 0 1
46106: PUSH
46107: LD_INT 10
46109: GREATER
46110: IFFALSE 46114
// exit ;
46112: GO 46631
// list := [ ] ;
46114: LD_ADDR_VAR 0 13
46118: PUSH
46119: EMPTY
46120: ST_TO_ADDR
// if x - r < 0 then
46121: LD_VAR 0 2
46125: PUSH
46126: LD_VAR 0 4
46130: MINUS
46131: PUSH
46132: LD_INT 0
46134: LESS
46135: IFFALSE 46147
// min_x := 0 else
46137: LD_ADDR_VAR 0 7
46141: PUSH
46142: LD_INT 0
46144: ST_TO_ADDR
46145: GO 46163
// min_x := x - r ;
46147: LD_ADDR_VAR 0 7
46151: PUSH
46152: LD_VAR 0 2
46156: PUSH
46157: LD_VAR 0 4
46161: MINUS
46162: ST_TO_ADDR
// if y - r < 0 then
46163: LD_VAR 0 3
46167: PUSH
46168: LD_VAR 0 4
46172: MINUS
46173: PUSH
46174: LD_INT 0
46176: LESS
46177: IFFALSE 46189
// min_y := 0 else
46179: LD_ADDR_VAR 0 8
46183: PUSH
46184: LD_INT 0
46186: ST_TO_ADDR
46187: GO 46205
// min_y := y - r ;
46189: LD_ADDR_VAR 0 8
46193: PUSH
46194: LD_VAR 0 3
46198: PUSH
46199: LD_VAR 0 4
46203: MINUS
46204: ST_TO_ADDR
// max_x := x + r ;
46205: LD_ADDR_VAR 0 9
46209: PUSH
46210: LD_VAR 0 2
46214: PUSH
46215: LD_VAR 0 4
46219: PLUS
46220: ST_TO_ADDR
// max_y := y + r ;
46221: LD_ADDR_VAR 0 10
46225: PUSH
46226: LD_VAR 0 3
46230: PUSH
46231: LD_VAR 0 4
46235: PLUS
46236: ST_TO_ADDR
// for _x = min_x to max_x do
46237: LD_ADDR_VAR 0 11
46241: PUSH
46242: DOUBLE
46243: LD_VAR 0 7
46247: DEC
46248: ST_TO_ADDR
46249: LD_VAR 0 9
46253: PUSH
46254: FOR_TO
46255: IFFALSE 46374
// for _y = min_y to max_y do
46257: LD_ADDR_VAR 0 12
46261: PUSH
46262: DOUBLE
46263: LD_VAR 0 8
46267: DEC
46268: ST_TO_ADDR
46269: LD_VAR 0 10
46273: PUSH
46274: FOR_TO
46275: IFFALSE 46370
// begin if not ValidHex ( _x , _y ) then
46277: LD_VAR 0 11
46281: PPUSH
46282: LD_VAR 0 12
46286: PPUSH
46287: CALL_OW 488
46291: NOT
46292: IFFALSE 46296
// continue ;
46294: GO 46274
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46296: LD_VAR 0 11
46300: PPUSH
46301: LD_VAR 0 12
46305: PPUSH
46306: CALL_OW 351
46310: IFFALSE 46328
46312: PUSH
46313: LD_VAR 0 11
46317: PPUSH
46318: LD_VAR 0 12
46322: PPUSH
46323: CALL_OW 554
46327: AND
46328: IFFALSE 46368
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46330: LD_ADDR_VAR 0 13
46334: PUSH
46335: LD_VAR 0 13
46339: PPUSH
46340: LD_VAR 0 13
46344: PUSH
46345: LD_INT 1
46347: PLUS
46348: PPUSH
46349: LD_VAR 0 11
46353: PUSH
46354: LD_VAR 0 12
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PPUSH
46363: CALL_OW 2
46367: ST_TO_ADDR
// end ;
46368: GO 46274
46370: POP
46371: POP
46372: GO 46254
46374: POP
46375: POP
// if not list then
46376: LD_VAR 0 13
46380: NOT
46381: IFFALSE 46385
// exit ;
46383: GO 46631
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
46385: LD_ADDR_VAR 0 13
46389: PUSH
46390: LD_VAR 0 1
46394: PPUSH
46395: LD_VAR 0 13
46399: PPUSH
46400: LD_INT 1
46402: PPUSH
46403: LD_INT 1
46405: PPUSH
46406: CALL 6170 0 4
46410: ST_TO_ADDR
// ComStop ( flame ) ;
46411: LD_VAR 0 1
46415: PPUSH
46416: CALL_OW 141
// for i in list do
46420: LD_ADDR_VAR 0 6
46424: PUSH
46425: LD_VAR 0 13
46429: PUSH
46430: FOR_IN
46431: IFFALSE 46462
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
46433: LD_VAR 0 1
46437: PPUSH
46438: LD_VAR 0 6
46442: PUSH
46443: LD_INT 1
46445: ARRAY
46446: PPUSH
46447: LD_VAR 0 6
46451: PUSH
46452: LD_INT 2
46454: ARRAY
46455: PPUSH
46456: CALL_OW 176
46460: GO 46430
46462: POP
46463: POP
// repeat wait ( 0 0$1 ) ;
46464: LD_INT 35
46466: PPUSH
46467: CALL_OW 67
// task := GetTaskList ( flame ) ;
46471: LD_ADDR_VAR 0 14
46475: PUSH
46476: LD_VAR 0 1
46480: PPUSH
46481: CALL_OW 437
46485: ST_TO_ADDR
// if not task then
46486: LD_VAR 0 14
46490: NOT
46491: IFFALSE 46495
// exit ;
46493: GO 46631
// if task [ 1 ] [ 1 ] <> | then
46495: LD_VAR 0 14
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PUSH
46508: LD_STRING |
46510: NONEQUAL
46511: IFFALSE 46515
// exit ;
46513: GO 46631
// _x := task [ 1 ] [ 2 ] ;
46515: LD_ADDR_VAR 0 11
46519: PUSH
46520: LD_VAR 0 14
46524: PUSH
46525: LD_INT 1
46527: ARRAY
46528: PUSH
46529: LD_INT 2
46531: ARRAY
46532: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
46533: LD_ADDR_VAR 0 12
46537: PUSH
46538: LD_VAR 0 14
46542: PUSH
46543: LD_INT 1
46545: ARRAY
46546: PUSH
46547: LD_INT 3
46549: ARRAY
46550: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
46551: LD_VAR 0 11
46555: PPUSH
46556: LD_VAR 0 12
46560: PPUSH
46561: CALL_OW 351
46565: NOT
46566: IFTRUE 46585
46568: PUSH
46569: LD_VAR 0 11
46573: PPUSH
46574: LD_VAR 0 12
46578: PPUSH
46579: CALL_OW 554
46583: NOT
46584: OR
46585: IFFALSE 46619
// begin task := Delete ( task , 1 ) ;
46587: LD_ADDR_VAR 0 14
46591: PUSH
46592: LD_VAR 0 14
46596: PPUSH
46597: LD_INT 1
46599: PPUSH
46600: CALL_OW 3
46604: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
46605: LD_VAR 0 1
46609: PPUSH
46610: LD_VAR 0 14
46614: PPUSH
46615: CALL_OW 446
// end ; until not HasTask ( flame ) ;
46619: LD_VAR 0 1
46623: PPUSH
46624: CALL_OW 314
46628: NOT
46629: IFFALSE 46464
// end ;
46631: LD_VAR 0 5
46635: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46636: LD_EXP 2
46640: NOT
46641: IFFALSE 46691
46643: GO 46645
46645: DISABLE
// begin initHack := true ;
46646: LD_ADDR_EXP 2
46650: PUSH
46651: LD_INT 1
46653: ST_TO_ADDR
// hackTanks := [ ] ;
46654: LD_ADDR_EXP 3
46658: PUSH
46659: EMPTY
46660: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46661: LD_ADDR_EXP 4
46665: PUSH
46666: EMPTY
46667: ST_TO_ADDR
// hackLimit := 3 ;
46668: LD_ADDR_EXP 5
46672: PUSH
46673: LD_INT 3
46675: ST_TO_ADDR
// hackDist := 12 ;
46676: LD_ADDR_EXP 6
46680: PUSH
46681: LD_INT 12
46683: ST_TO_ADDR
// hackCounter := [ ] ;
46684: LD_ADDR_EXP 7
46688: PUSH
46689: EMPTY
46690: ST_TO_ADDR
// end ;
46691: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46692: LD_EXP 2
46696: IFFALSE 46714
46698: PUSH
46699: LD_INT 34
46701: PUSH
46702: LD_INT 99
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PPUSH
46709: CALL_OW 69
46713: AND
46714: IFFALSE 46967
46716: GO 46718
46718: DISABLE
46719: LD_INT 0
46721: PPUSH
46722: PPUSH
// begin enable ;
46723: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46724: LD_ADDR_VAR 0 1
46728: PUSH
46729: LD_INT 34
46731: PUSH
46732: LD_INT 99
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PPUSH
46739: CALL_OW 69
46743: PUSH
46744: FOR_IN
46745: IFFALSE 46965
// begin if not i in hackTanks then
46747: LD_VAR 0 1
46751: PUSH
46752: LD_EXP 3
46756: IN
46757: NOT
46758: IFFALSE 46841
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
46760: LD_ADDR_EXP 3
46764: PUSH
46765: LD_EXP 3
46769: PPUSH
46770: LD_EXP 3
46774: PUSH
46775: LD_INT 1
46777: PLUS
46778: PPUSH
46779: LD_VAR 0 1
46783: PPUSH
46784: CALL_OW 1
46788: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
46789: LD_ADDR_EXP 4
46793: PUSH
46794: LD_EXP 4
46798: PPUSH
46799: LD_EXP 4
46803: PUSH
46804: LD_INT 1
46806: PLUS
46807: PPUSH
46808: EMPTY
46809: PPUSH
46810: CALL_OW 1
46814: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
46815: LD_ADDR_EXP 7
46819: PUSH
46820: LD_EXP 7
46824: PPUSH
46825: LD_EXP 7
46829: PUSH
46830: LD_INT 1
46832: PLUS
46833: PPUSH
46834: EMPTY
46835: PPUSH
46836: CALL_OW 1
46840: ST_TO_ADDR
// end ; if not IsOk ( i ) then
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 302
46850: NOT
46851: IFFALSE 46864
// begin HackUnlinkAll ( i ) ;
46853: LD_VAR 0 1
46857: PPUSH
46858: CALL 46970 0 1
// continue ;
46862: GO 46744
// end ; HackCheckCapturedStatus ( i ) ;
46864: LD_VAR 0 1
46868: PPUSH
46869: CALL 47415 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
46873: LD_ADDR_VAR 0 2
46877: PUSH
46878: LD_INT 81
46880: PUSH
46881: LD_VAR 0 1
46885: PPUSH
46886: CALL_OW 255
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 33
46897: PUSH
46898: LD_INT 3
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 91
46907: PUSH
46908: LD_VAR 0 1
46912: PUSH
46913: LD_EXP 6
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 50
46925: PUSH
46926: EMPTY
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: PPUSH
46935: CALL_OW 69
46939: ST_TO_ADDR
// if not tmp then
46940: LD_VAR 0 2
46944: NOT
46945: IFFALSE 46949
// continue ;
46947: GO 46744
// HackLink ( i , tmp ) ;
46949: LD_VAR 0 1
46953: PPUSH
46954: LD_VAR 0 2
46958: PPUSH
46959: CALL 47106 0 2
// end ;
46963: GO 46744
46965: POP
46966: POP
// end ;
46967: PPOPN 2
46969: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
46970: LD_INT 0
46972: PPUSH
46973: PPUSH
46974: PPUSH
// if not hack in hackTanks then
46975: LD_VAR 0 1
46979: PUSH
46980: LD_EXP 3
46984: IN
46985: NOT
46986: IFFALSE 46990
// exit ;
46988: GO 47101
// index := GetElementIndex ( hackTanks , hack ) ;
46990: LD_ADDR_VAR 0 4
46994: PUSH
46995: LD_EXP 3
46999: PPUSH
47000: LD_VAR 0 1
47004: PPUSH
47005: CALL 5465 0 2
47009: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47010: LD_EXP 4
47014: PUSH
47015: LD_VAR 0 4
47019: ARRAY
47020: IFFALSE 47101
// begin for i in hackTanksCaptured [ index ] do
47022: LD_ADDR_VAR 0 3
47026: PUSH
47027: LD_EXP 4
47031: PUSH
47032: LD_VAR 0 4
47036: ARRAY
47037: PUSH
47038: FOR_IN
47039: IFFALSE 47065
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47041: LD_VAR 0 3
47045: PUSH
47046: LD_INT 1
47048: ARRAY
47049: PPUSH
47050: LD_VAR 0 3
47054: PUSH
47055: LD_INT 2
47057: ARRAY
47058: PPUSH
47059: CALL_OW 235
47063: GO 47038
47065: POP
47066: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47067: LD_ADDR_EXP 4
47071: PUSH
47072: LD_EXP 4
47076: PPUSH
47077: LD_VAR 0 4
47081: PPUSH
47082: EMPTY
47083: PPUSH
47084: CALL_OW 1
47088: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47089: LD_VAR 0 1
47093: PPUSH
47094: LD_INT 0
47096: PPUSH
47097: CALL_OW 505
// end ; end ;
47101: LD_VAR 0 2
47105: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47106: LD_INT 0
47108: PPUSH
47109: PPUSH
47110: PPUSH
// if not hack in hackTanks or not vehicles then
47111: LD_VAR 0 1
47115: PUSH
47116: LD_EXP 3
47120: IN
47121: NOT
47122: IFTRUE 47131
47124: PUSH
47125: LD_VAR 0 2
47129: NOT
47130: OR
47131: IFFALSE 47135
// exit ;
47133: GO 47410
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47135: LD_ADDR_VAR 0 2
47139: PUSH
47140: LD_VAR 0 1
47144: PPUSH
47145: LD_VAR 0 2
47149: PPUSH
47150: LD_INT 1
47152: PPUSH
47153: LD_INT 1
47155: PPUSH
47156: CALL 6117 0 4
47160: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47161: LD_ADDR_VAR 0 5
47165: PUSH
47166: LD_EXP 3
47170: PPUSH
47171: LD_VAR 0 1
47175: PPUSH
47176: CALL 5465 0 2
47180: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47181: LD_EXP 4
47185: PUSH
47186: LD_VAR 0 5
47190: ARRAY
47191: PUSH
47192: LD_EXP 5
47196: LESS
47197: IFFALSE 47386
// begin for i := 1 to vehicles do
47199: LD_ADDR_VAR 0 4
47203: PUSH
47204: DOUBLE
47205: LD_INT 1
47207: DEC
47208: ST_TO_ADDR
47209: LD_VAR 0 2
47213: PUSH
47214: FOR_TO
47215: IFFALSE 47384
// begin if hackTanksCaptured [ index ] = hackLimit then
47217: LD_EXP 4
47221: PUSH
47222: LD_VAR 0 5
47226: ARRAY
47227: PUSH
47228: LD_EXP 5
47232: EQUAL
47233: IFFALSE 47237
// break ;
47235: GO 47384
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47237: LD_ADDR_EXP 7
47241: PUSH
47242: LD_EXP 7
47246: PPUSH
47247: LD_VAR 0 5
47251: PPUSH
47252: LD_EXP 7
47256: PUSH
47257: LD_VAR 0 5
47261: ARRAY
47262: PUSH
47263: LD_INT 1
47265: PLUS
47266: PPUSH
47267: CALL_OW 1
47271: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47272: LD_ADDR_EXP 4
47276: PUSH
47277: LD_EXP 4
47281: PPUSH
47282: LD_VAR 0 5
47286: PUSH
47287: LD_EXP 4
47291: PUSH
47292: LD_VAR 0 5
47296: ARRAY
47297: PUSH
47298: LD_INT 1
47300: PLUS
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PPUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_VAR 0 4
47315: ARRAY
47316: PUSH
47317: LD_VAR 0 2
47321: PUSH
47322: LD_VAR 0 4
47326: ARRAY
47327: PPUSH
47328: CALL_OW 255
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PPUSH
47337: CALL 5682 0 3
47341: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47342: LD_VAR 0 2
47346: PUSH
47347: LD_VAR 0 4
47351: ARRAY
47352: PPUSH
47353: LD_VAR 0 1
47357: PPUSH
47358: CALL_OW 255
47362: PPUSH
47363: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47367: LD_VAR 0 2
47371: PUSH
47372: LD_VAR 0 4
47376: ARRAY
47377: PPUSH
47378: CALL_OW 141
// end ;
47382: GO 47214
47384: POP
47385: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47386: LD_VAR 0 1
47390: PPUSH
47391: LD_EXP 4
47395: PUSH
47396: LD_VAR 0 5
47400: ARRAY
47401: PUSH
47402: LD_INT 0
47404: PLUS
47405: PPUSH
47406: CALL_OW 505
// end ;
47410: LD_VAR 0 3
47414: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47415: LD_INT 0
47417: PPUSH
47418: PPUSH
47419: PPUSH
47420: PPUSH
// if not hack in hackTanks then
47421: LD_VAR 0 1
47425: PUSH
47426: LD_EXP 3
47430: IN
47431: NOT
47432: IFFALSE 47436
// exit ;
47434: GO 47680
// index := GetElementIndex ( hackTanks , hack ) ;
47436: LD_ADDR_VAR 0 4
47440: PUSH
47441: LD_EXP 3
47445: PPUSH
47446: LD_VAR 0 1
47450: PPUSH
47451: CALL 5465 0 2
47455: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47456: LD_ADDR_VAR 0 3
47460: PUSH
47461: DOUBLE
47462: LD_EXP 4
47466: PUSH
47467: LD_VAR 0 4
47471: ARRAY
47472: INC
47473: ST_TO_ADDR
47474: LD_INT 1
47476: PUSH
47477: FOR_DOWNTO
47478: IFFALSE 47654
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47480: LD_ADDR_VAR 0 5
47484: PUSH
47485: LD_EXP 4
47489: PUSH
47490: LD_VAR 0 4
47494: ARRAY
47495: PUSH
47496: LD_VAR 0 3
47500: ARRAY
47501: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47502: LD_VAR 0 5
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: PPUSH
47511: CALL_OW 302
47515: NOT
47516: IFTRUE 47544
47518: PUSH
47519: LD_VAR 0 5
47523: PUSH
47524: LD_INT 1
47526: ARRAY
47527: PPUSH
47528: CALL_OW 255
47532: PUSH
47533: LD_VAR 0 1
47537: PPUSH
47538: CALL_OW 255
47542: NONEQUAL
47543: OR
47544: IFFALSE 47652
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47546: LD_VAR 0 5
47550: PUSH
47551: LD_INT 1
47553: ARRAY
47554: PPUSH
47555: CALL_OW 305
47559: IFFALSE 47587
47561: PUSH
47562: LD_VAR 0 5
47566: PUSH
47567: LD_INT 1
47569: ARRAY
47570: PPUSH
47571: CALL_OW 255
47575: PUSH
47576: LD_VAR 0 1
47580: PPUSH
47581: CALL_OW 255
47585: EQUAL
47586: AND
47587: IFFALSE 47611
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47589: LD_VAR 0 5
47593: PUSH
47594: LD_INT 1
47596: ARRAY
47597: PPUSH
47598: LD_VAR 0 5
47602: PUSH
47603: LD_INT 2
47605: ARRAY
47606: PPUSH
47607: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47611: LD_ADDR_EXP 4
47615: PUSH
47616: LD_EXP 4
47620: PPUSH
47621: LD_VAR 0 4
47625: PPUSH
47626: LD_EXP 4
47630: PUSH
47631: LD_VAR 0 4
47635: ARRAY
47636: PPUSH
47637: LD_VAR 0 3
47641: PPUSH
47642: CALL_OW 3
47646: PPUSH
47647: CALL_OW 1
47651: ST_TO_ADDR
// end ; end ;
47652: GO 47477
47654: POP
47655: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47656: LD_VAR 0 1
47660: PPUSH
47661: LD_EXP 4
47665: PUSH
47666: LD_VAR 0 4
47670: ARRAY
47671: PUSH
47672: LD_INT 0
47674: PLUS
47675: PPUSH
47676: CALL_OW 505
// end ;
47680: LD_VAR 0 2
47684: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47685: LD_INT 0
47687: PPUSH
47688: PPUSH
47689: PPUSH
47690: PPUSH
// if not hack in hackTanks then
47691: LD_VAR 0 1
47695: PUSH
47696: LD_EXP 3
47700: IN
47701: NOT
47702: IFFALSE 47706
// exit ;
47704: GO 47791
// index := GetElementIndex ( hackTanks , hack ) ;
47706: LD_ADDR_VAR 0 5
47710: PUSH
47711: LD_EXP 3
47715: PPUSH
47716: LD_VAR 0 1
47720: PPUSH
47721: CALL 5465 0 2
47725: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47726: LD_ADDR_VAR 0 4
47730: PUSH
47731: DOUBLE
47732: LD_INT 1
47734: DEC
47735: ST_TO_ADDR
47736: LD_EXP 4
47740: PUSH
47741: LD_VAR 0 5
47745: ARRAY
47746: PUSH
47747: FOR_TO
47748: IFFALSE 47789
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47750: LD_EXP 4
47754: PUSH
47755: LD_VAR 0 5
47759: ARRAY
47760: PUSH
47761: LD_VAR 0 4
47765: ARRAY
47766: PUSH
47767: LD_INT 1
47769: ARRAY
47770: PUSH
47771: LD_VAR 0 2
47775: EQUAL
47776: IFFALSE 47787
// KillUnit ( vehicle ) ;
47778: LD_VAR 0 2
47782: PPUSH
47783: CALL_OW 66
47787: GO 47747
47789: POP
47790: POP
// end ;
47791: LD_VAR 0 3
47795: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
47796: LD_EXP 8
47800: NOT
47801: IFFALSE 47934
47803: GO 47805
47805: DISABLE
47806: LD_INT 0
47808: PPUSH
// begin initMiner := true ;
47809: LD_ADDR_EXP 8
47813: PUSH
47814: LD_INT 1
47816: ST_TO_ADDR
// minersList := [ ] ;
47817: LD_ADDR_EXP 9
47821: PUSH
47822: EMPTY
47823: ST_TO_ADDR
// minerMinesList := [ ] ;
47824: LD_ADDR_EXP 10
47828: PUSH
47829: EMPTY
47830: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
47831: LD_ADDR_EXP 11
47835: PUSH
47836: LD_INT 10
47838: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
47839: LD_ADDR_VAR 0 1
47843: PUSH
47844: LD_INT 34
47846: PUSH
47847: LD_INT 81
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PPUSH
47854: CALL_OW 69
47858: PUSH
47859: FOR_IN
47860: IFFALSE 47932
// begin if not i in minersList then
47862: LD_VAR 0 1
47866: PUSH
47867: LD_EXP 9
47871: IN
47872: NOT
47873: IFFALSE 47930
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
47875: LD_ADDR_EXP 9
47879: PUSH
47880: LD_EXP 9
47884: PPUSH
47885: LD_EXP 9
47889: PUSH
47890: LD_INT 1
47892: PLUS
47893: PPUSH
47894: LD_VAR 0 1
47898: PPUSH
47899: CALL_OW 1
47903: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
47904: LD_ADDR_EXP 10
47908: PUSH
47909: LD_EXP 10
47913: PPUSH
47914: LD_EXP 10
47918: PUSH
47919: LD_INT 1
47921: PLUS
47922: PPUSH
47923: EMPTY
47924: PPUSH
47925: CALL_OW 1
47929: ST_TO_ADDR
// end end ;
47930: GO 47859
47932: POP
47933: POP
// end ;
47934: PPOPN 1
47936: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
47937: LD_EXP 8
47941: IFFALSE 47972
47943: PUSH
47944: LD_EXP 10
47948: PPUSH
47949: CALL 2764 0 1
47953: IFTRUE 47971
47955: PUSH
47956: LD_INT 34
47958: PUSH
47959: LD_INT 81
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PPUSH
47966: CALL_OW 69
47970: OR
47971: AND
47972: IFFALSE 48492
47974: GO 47976
47976: DISABLE
47977: LD_INT 0
47979: PPUSH
47980: PPUSH
47981: PPUSH
47982: PPUSH
// begin enable ;
47983: ENABLE
// for i := minerMinesList downto 1 do
47984: LD_ADDR_VAR 0 1
47988: PUSH
47989: DOUBLE
47990: LD_EXP 10
47994: INC
47995: ST_TO_ADDR
47996: LD_INT 1
47998: PUSH
47999: FOR_DOWNTO
48000: IFFALSE 48490
// begin side := GetSide ( minersList [ i ] ) ;
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: LD_EXP 9
48011: PUSH
48012: LD_VAR 0 1
48016: ARRAY
48017: PPUSH
48018: CALL_OW 255
48022: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
48023: LD_EXP 9
48027: PUSH
48028: LD_VAR 0 1
48032: ARRAY
48033: PPUSH
48034: CALL_OW 300
48038: IFFALSE 48059
48040: PUSH
48041: LD_VAR 0 3
48045: PUSH
48046: LD_OWVAR 2
48050: PUSH
48051: LD_INT 9
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: IN
48058: AND
48059: IFFALSE 48092
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
48061: LD_EXP 9
48065: PUSH
48066: LD_VAR 0 1
48070: ARRAY
48071: PPUSH
48072: LD_EXP 10
48076: PUSH
48077: LD_VAR 0 1
48081: ARRAY
48082: PPUSH
48083: CALL 2764 0 1
48087: PPUSH
48088: CALL_OW 505
// if not minerMinesList [ i ] then
48092: LD_EXP 10
48096: PUSH
48097: LD_VAR 0 1
48101: ARRAY
48102: NOT
48103: IFFALSE 48107
// continue ;
48105: GO 47999
// for j := minerMinesList [ i ] downto 1 do
48107: LD_ADDR_VAR 0 2
48111: PUSH
48112: DOUBLE
48113: LD_EXP 10
48117: PUSH
48118: LD_VAR 0 1
48122: ARRAY
48123: INC
48124: ST_TO_ADDR
48125: LD_INT 1
48127: PUSH
48128: FOR_DOWNTO
48129: IFFALSE 48486
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
48131: LD_EXP 9
48135: PUSH
48136: LD_VAR 0 1
48140: ARRAY
48141: PPUSH
48142: CALL_OW 301
48146: IFTRUE 48166
48148: PUSH
48149: LD_EXP 9
48153: PUSH
48154: LD_VAR 0 1
48158: ARRAY
48159: PPUSH
48160: CALL_OW 305
48164: NOT
48165: OR
48166: IFFALSE 48257
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48168: LD_EXP 10
48172: PUSH
48173: LD_VAR 0 1
48177: ARRAY
48178: PUSH
48179: LD_VAR 0 2
48183: ARRAY
48184: PUSH
48185: LD_INT 1
48187: ARRAY
48188: PPUSH
48189: LD_EXP 10
48193: PUSH
48194: LD_VAR 0 1
48198: ARRAY
48199: PUSH
48200: LD_VAR 0 2
48204: ARRAY
48205: PUSH
48206: LD_INT 2
48208: ARRAY
48209: PPUSH
48210: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48214: LD_ADDR_EXP 10
48218: PUSH
48219: LD_EXP 10
48223: PPUSH
48224: LD_VAR 0 1
48228: PPUSH
48229: LD_EXP 10
48233: PUSH
48234: LD_VAR 0 1
48238: ARRAY
48239: PPUSH
48240: LD_VAR 0 2
48244: PPUSH
48245: CALL_OW 3
48249: PPUSH
48250: CALL_OW 1
48254: ST_TO_ADDR
// continue ;
48255: GO 48128
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48257: LD_ADDR_VAR 0 4
48261: PUSH
48262: LD_EXP 10
48266: PUSH
48267: LD_VAR 0 1
48271: ARRAY
48272: PUSH
48273: LD_VAR 0 2
48277: ARRAY
48278: PUSH
48279: LD_INT 1
48281: ARRAY
48282: PPUSH
48283: LD_EXP 10
48287: PUSH
48288: LD_VAR 0 1
48292: ARRAY
48293: PUSH
48294: LD_VAR 0 2
48298: ARRAY
48299: PUSH
48300: LD_INT 2
48302: ARRAY
48303: PPUSH
48304: CALL_OW 428
48308: ST_TO_ADDR
// if not tmp then
48309: LD_VAR 0 4
48313: NOT
48314: IFFALSE 48318
// continue ;
48316: GO 48128
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48318: LD_VAR 0 4
48322: PUSH
48323: LD_INT 81
48325: PUSH
48326: LD_VAR 0 3
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PPUSH
48335: CALL_OW 69
48339: IN
48340: IFFALSE 48390
48342: PUSH
48343: LD_EXP 10
48347: PUSH
48348: LD_VAR 0 1
48352: ARRAY
48353: PUSH
48354: LD_VAR 0 2
48358: ARRAY
48359: PUSH
48360: LD_INT 1
48362: ARRAY
48363: PPUSH
48364: LD_EXP 10
48368: PUSH
48369: LD_VAR 0 1
48373: ARRAY
48374: PUSH
48375: LD_VAR 0 2
48379: ARRAY
48380: PUSH
48381: LD_INT 2
48383: ARRAY
48384: PPUSH
48385: CALL_OW 458
48389: AND
48390: IFFALSE 48484
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48392: LD_EXP 10
48396: PUSH
48397: LD_VAR 0 1
48401: ARRAY
48402: PUSH
48403: LD_VAR 0 2
48407: ARRAY
48408: PUSH
48409: LD_INT 1
48411: ARRAY
48412: PPUSH
48413: LD_EXP 10
48417: PUSH
48418: LD_VAR 0 1
48422: ARRAY
48423: PUSH
48424: LD_VAR 0 2
48428: ARRAY
48429: PUSH
48430: LD_INT 2
48432: ARRAY
48433: PPUSH
48434: LD_VAR 0 3
48438: PPUSH
48439: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48443: LD_ADDR_EXP 10
48447: PUSH
48448: LD_EXP 10
48452: PPUSH
48453: LD_VAR 0 1
48457: PPUSH
48458: LD_EXP 10
48462: PUSH
48463: LD_VAR 0 1
48467: ARRAY
48468: PPUSH
48469: LD_VAR 0 2
48473: PPUSH
48474: CALL_OW 3
48478: PPUSH
48479: CALL_OW 1
48483: ST_TO_ADDR
// end ; end ;
48484: GO 48128
48486: POP
48487: POP
// end ;
48488: GO 47999
48490: POP
48491: POP
// end ;
48492: PPOPN 4
48494: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
48495: LD_INT 0
48497: PPUSH
48498: PPUSH
48499: PPUSH
48500: PPUSH
// result := false ;
48501: LD_ADDR_VAR 0 4
48505: PUSH
48506: LD_INT 0
48508: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48509: LD_VAR 0 1
48513: PPUSH
48514: CALL_OW 264
48518: PUSH
48519: LD_INT 81
48521: EQUAL
48522: NOT
48523: IFFALSE 48527
// exit ;
48525: GO 48897
// side := GetSide ( unit ) ;
48527: LD_ADDR_VAR 0 6
48531: PUSH
48532: LD_VAR 0 1
48536: PPUSH
48537: CALL_OW 255
48541: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
48542: LD_ADDR_VAR 0 5
48546: PUSH
48547: LD_EXP 9
48551: PPUSH
48552: LD_VAR 0 1
48556: PPUSH
48557: CALL 5465 0 2
48561: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48562: LD_EXP 10
48566: PUSH
48567: LD_VAR 0 5
48571: ARRAY
48572: PUSH
48573: LD_EXP 11
48577: GREATEREQUAL
48578: IFFALSE 48582
// exit ;
48580: GO 48897
// ComMoveXY ( unit , x , y ) ;
48582: LD_VAR 0 1
48586: PPUSH
48587: LD_VAR 0 2
48591: PPUSH
48592: LD_VAR 0 3
48596: PPUSH
48597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48601: LD_INT 35
48603: PPUSH
48604: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48608: LD_VAR 0 1
48612: PPUSH
48613: LD_VAR 0 2
48617: PPUSH
48618: LD_VAR 0 3
48622: PPUSH
48623: CALL 37521 0 3
48627: NOT
48628: IFFALSE 48641
48630: PUSH
48631: LD_VAR 0 1
48635: PPUSH
48636: CALL_OW 314
48640: AND
48641: IFFALSE 48645
// exit ;
48643: GO 48897
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48645: LD_VAR 0 2
48649: PPUSH
48650: LD_VAR 0 3
48654: PPUSH
48655: CALL_OW 428
48659: PUSH
48660: LD_VAR 0 1
48664: EQUAL
48665: IFFALSE 48679
48667: PUSH
48668: LD_VAR 0 1
48672: PPUSH
48673: CALL_OW 314
48677: NOT
48678: AND
48679: IFFALSE 48601
// if MineAtPos ( x , y ) then
48681: LD_VAR 0 2
48685: PPUSH
48686: LD_VAR 0 3
48690: PPUSH
48691: CALL_OW 458
48695: IFFALSE 48699
// exit ;
48697: GO 48897
// if your_side = side then
48699: LD_OWVAR 2
48703: PUSH
48704: LD_VAR 0 6
48708: EQUAL
48709: IFFALSE 48728
// PlaySoundXY ( x , y , PlantMine ) ;
48711: LD_VAR 0 2
48715: PPUSH
48716: LD_VAR 0 3
48720: PPUSH
48721: LD_STRING PlantMine
48723: PPUSH
48724: CALL_OW 366
// repeat wait ( 1 ) ;
48728: LD_INT 1
48730: PPUSH
48731: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
48735: LD_VAR 0 2
48739: PPUSH
48740: LD_VAR 0 3
48744: PPUSH
48745: LD_VAR 0 6
48749: PPUSH
48750: LD_INT 0
48752: PPUSH
48753: CALL_OW 454
48757: IFFALSE 48728
// if MineAtPos ( x , y ) then
48759: LD_VAR 0 2
48763: PPUSH
48764: LD_VAR 0 3
48768: PPUSH
48769: CALL_OW 458
48773: IFFALSE 48889
// begin for i in minerMinesList [ index ] do
48775: LD_ADDR_VAR 0 7
48779: PUSH
48780: LD_EXP 10
48784: PUSH
48785: LD_VAR 0 5
48789: ARRAY
48790: PUSH
48791: FOR_IN
48792: IFFALSE 48834
// if i [ 1 ] = x and i [ 2 ] = y then
48794: LD_VAR 0 7
48798: PUSH
48799: LD_INT 1
48801: ARRAY
48802: PUSH
48803: LD_VAR 0 2
48807: EQUAL
48808: IFFALSE 48826
48810: PUSH
48811: LD_VAR 0 7
48815: PUSH
48816: LD_INT 2
48818: ARRAY
48819: PUSH
48820: LD_VAR 0 3
48824: EQUAL
48825: AND
48826: IFFALSE 48832
// exit ;
48828: POP
48829: POP
48830: GO 48897
48832: GO 48791
48834: POP
48835: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48836: LD_ADDR_EXP 10
48840: PUSH
48841: LD_EXP 10
48845: PPUSH
48846: LD_VAR 0 5
48850: PUSH
48851: LD_EXP 10
48855: PUSH
48856: LD_VAR 0 5
48860: ARRAY
48861: PUSH
48862: LD_INT 1
48864: PLUS
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PPUSH
48870: LD_VAR 0 2
48874: PUSH
48875: LD_VAR 0 3
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PPUSH
48884: CALL 5682 0 3
48888: ST_TO_ADDR
// end ; result := true ;
48889: LD_ADDR_VAR 0 4
48893: PUSH
48894: LD_INT 1
48896: ST_TO_ADDR
// end ;
48897: LD_VAR 0 4
48901: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48902: LD_INT 0
48904: PPUSH
48905: PPUSH
48906: PPUSH
// if not unit in minersList then
48907: LD_VAR 0 1
48911: PUSH
48912: LD_EXP 9
48916: IN
48917: NOT
48918: IFFALSE 48922
// exit ;
48920: GO 49129
// index := GetElementIndex ( minersList , unit ) ;
48922: LD_ADDR_VAR 0 6
48926: PUSH
48927: LD_EXP 9
48931: PPUSH
48932: LD_VAR 0 1
48936: PPUSH
48937: CALL 5465 0 2
48941: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48942: LD_ADDR_VAR 0 5
48946: PUSH
48947: DOUBLE
48948: LD_EXP 10
48952: PUSH
48953: LD_VAR 0 6
48957: ARRAY
48958: INC
48959: ST_TO_ADDR
48960: LD_INT 1
48962: PUSH
48963: FOR_DOWNTO
48964: IFFALSE 49127
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
48966: LD_EXP 10
48970: PUSH
48971: LD_VAR 0 6
48975: ARRAY
48976: PUSH
48977: LD_VAR 0 5
48981: ARRAY
48982: PUSH
48983: LD_INT 1
48985: ARRAY
48986: PPUSH
48987: LD_EXP 10
48991: PUSH
48992: LD_VAR 0 6
48996: ARRAY
48997: PUSH
48998: LD_VAR 0 5
49002: ARRAY
49003: PUSH
49004: LD_INT 2
49006: ARRAY
49007: PPUSH
49008: LD_VAR 0 2
49012: PPUSH
49013: LD_VAR 0 3
49017: PPUSH
49018: CALL_OW 298
49022: PUSH
49023: LD_INT 6
49025: LESS
49026: IFFALSE 49125
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49028: LD_EXP 10
49032: PUSH
49033: LD_VAR 0 6
49037: ARRAY
49038: PUSH
49039: LD_VAR 0 5
49043: ARRAY
49044: PUSH
49045: LD_INT 1
49047: ARRAY
49048: PPUSH
49049: LD_EXP 10
49053: PUSH
49054: LD_VAR 0 6
49058: ARRAY
49059: PUSH
49060: LD_VAR 0 5
49064: ARRAY
49065: PUSH
49066: LD_INT 2
49068: ARRAY
49069: PPUSH
49070: LD_VAR 0 1
49074: PPUSH
49075: CALL_OW 255
49079: PPUSH
49080: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49084: LD_ADDR_EXP 10
49088: PUSH
49089: LD_EXP 10
49093: PPUSH
49094: LD_VAR 0 6
49098: PPUSH
49099: LD_EXP 10
49103: PUSH
49104: LD_VAR 0 6
49108: ARRAY
49109: PPUSH
49110: LD_VAR 0 5
49114: PPUSH
49115: CALL_OW 3
49119: PPUSH
49120: CALL_OW 1
49124: ST_TO_ADDR
// end ; end ;
49125: GO 48963
49127: POP
49128: POP
// end ;
49129: LD_VAR 0 4
49133: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49134: LD_INT 0
49136: PPUSH
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
49143: PPUSH
49144: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 264
49154: PUSH
49155: LD_INT 81
49157: EQUAL
49158: NOT
49159: IFTRUE 49174
49161: PUSH
49162: LD_VAR 0 1
49166: PUSH
49167: LD_EXP 9
49171: IN
49172: NOT
49173: OR
49174: IFFALSE 49178
// exit ;
49176: GO 49504
// index := GetElementIndex ( minersList , unit ) ;
49178: LD_ADDR_VAR 0 6
49182: PUSH
49183: LD_EXP 9
49187: PPUSH
49188: LD_VAR 0 1
49192: PPUSH
49193: CALL 5465 0 2
49197: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49198: LD_ADDR_VAR 0 8
49202: PUSH
49203: LD_EXP 11
49207: PUSH
49208: LD_EXP 10
49212: PUSH
49213: LD_VAR 0 6
49217: ARRAY
49218: MINUS
49219: ST_TO_ADDR
// if not minesFreeAmount then
49220: LD_VAR 0 8
49224: NOT
49225: IFFALSE 49229
// exit ;
49227: GO 49504
// tmp := [ ] ;
49229: LD_ADDR_VAR 0 7
49233: PUSH
49234: EMPTY
49235: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49236: LD_ADDR_VAR 0 5
49240: PUSH
49241: DOUBLE
49242: LD_INT 1
49244: DEC
49245: ST_TO_ADDR
49246: LD_VAR 0 8
49250: PUSH
49251: FOR_TO
49252: IFFALSE 49451
// begin _d := rand ( 0 , 5 ) ;
49254: LD_ADDR_VAR 0 11
49258: PUSH
49259: LD_INT 0
49261: PPUSH
49262: LD_INT 5
49264: PPUSH
49265: CALL_OW 12
49269: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49270: LD_ADDR_VAR 0 12
49274: PUSH
49275: LD_INT 2
49277: PPUSH
49278: LD_INT 6
49280: PPUSH
49281: CALL_OW 12
49285: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49286: LD_ADDR_VAR 0 9
49290: PUSH
49291: LD_VAR 0 2
49295: PPUSH
49296: LD_VAR 0 11
49300: PPUSH
49301: LD_VAR 0 12
49305: PPUSH
49306: CALL_OW 272
49310: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49311: LD_ADDR_VAR 0 10
49315: PUSH
49316: LD_VAR 0 3
49320: PPUSH
49321: LD_VAR 0 11
49325: PPUSH
49326: LD_VAR 0 12
49330: PPUSH
49331: CALL_OW 273
49335: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49336: LD_VAR 0 9
49340: PPUSH
49341: LD_VAR 0 10
49345: PPUSH
49346: CALL_OW 488
49350: IFFALSE 49374
49352: PUSH
49353: LD_VAR 0 9
49357: PUSH
49358: LD_VAR 0 10
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_VAR 0 7
49371: IN
49372: NOT
49373: AND
49374: IFFALSE 49393
49376: PUSH
49377: LD_VAR 0 9
49381: PPUSH
49382: LD_VAR 0 10
49386: PPUSH
49387: CALL_OW 458
49391: NOT
49392: AND
49393: IFFALSE 49435
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49395: LD_ADDR_VAR 0 7
49399: PUSH
49400: LD_VAR 0 7
49404: PPUSH
49405: LD_VAR 0 7
49409: PUSH
49410: LD_INT 1
49412: PLUS
49413: PPUSH
49414: LD_VAR 0 9
49418: PUSH
49419: LD_VAR 0 10
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PPUSH
49428: CALL_OW 1
49432: ST_TO_ADDR
49433: GO 49449
// i := i - 1 ;
49435: LD_ADDR_VAR 0 5
49439: PUSH
49440: LD_VAR 0 5
49444: PUSH
49445: LD_INT 1
49447: MINUS
49448: ST_TO_ADDR
// end ;
49449: GO 49251
49451: POP
49452: POP
// for i in tmp do
49453: LD_ADDR_VAR 0 5
49457: PUSH
49458: LD_VAR 0 7
49462: PUSH
49463: FOR_IN
49464: IFFALSE 49502
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49466: LD_VAR 0 1
49470: PPUSH
49471: LD_VAR 0 5
49475: PUSH
49476: LD_INT 1
49478: ARRAY
49479: PPUSH
49480: LD_VAR 0 5
49484: PUSH
49485: LD_INT 2
49487: ARRAY
49488: PPUSH
49489: CALL 48495 0 3
49493: NOT
49494: IFFALSE 49500
// exit ;
49496: POP
49497: POP
49498: GO 49504
49500: GO 49463
49502: POP
49503: POP
// end ;
49504: LD_VAR 0 4
49508: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
49509: LD_INT 0
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
// if GetClass ( unit ) <> class_sniper then
49520: LD_VAR 0 1
49524: PPUSH
49525: CALL_OW 257
49529: PUSH
49530: LD_INT 5
49532: NONEQUAL
49533: IFFALSE 49537
// exit ;
49535: GO 50007
// dist := 8 ;
49537: LD_ADDR_VAR 0 5
49541: PUSH
49542: LD_INT 8
49544: ST_TO_ADDR
// viewRange := 12 ;
49545: LD_ADDR_VAR 0 8
49549: PUSH
49550: LD_INT 12
49552: ST_TO_ADDR
// side := GetSide ( unit ) ;
49553: LD_ADDR_VAR 0 6
49557: PUSH
49558: LD_VAR 0 1
49562: PPUSH
49563: CALL_OW 255
49567: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49568: LD_INT 61
49570: PPUSH
49571: LD_VAR 0 6
49575: PPUSH
49576: CALL_OW 321
49580: PUSH
49581: LD_INT 2
49583: EQUAL
49584: IFFALSE 49594
// viewRange := 16 ;
49586: LD_ADDR_VAR 0 8
49590: PUSH
49591: LD_INT 16
49593: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49594: LD_VAR 0 1
49598: PPUSH
49599: LD_VAR 0 2
49603: PPUSH
49604: LD_VAR 0 3
49608: PPUSH
49609: CALL_OW 297
49613: PUSH
49614: LD_VAR 0 5
49618: GREATER
49619: IFFALSE 49698
// begin ComMoveXY ( unit , x , y ) ;
49621: LD_VAR 0 1
49625: PPUSH
49626: LD_VAR 0 2
49630: PPUSH
49631: LD_VAR 0 3
49635: PPUSH
49636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49640: LD_INT 35
49642: PPUSH
49643: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49647: LD_VAR 0 1
49651: PPUSH
49652: LD_VAR 0 2
49656: PPUSH
49657: LD_VAR 0 3
49661: PPUSH
49662: CALL 37521 0 3
49666: NOT
49667: IFFALSE 49671
// exit ;
49669: GO 50007
// until GetDistUnitXY ( unit , x , y ) < dist ;
49671: LD_VAR 0 1
49675: PPUSH
49676: LD_VAR 0 2
49680: PPUSH
49681: LD_VAR 0 3
49685: PPUSH
49686: CALL_OW 297
49690: PUSH
49691: LD_VAR 0 5
49695: LESS
49696: IFFALSE 49640
// end ; ComTurnXY ( unit , x , y ) ;
49698: LD_VAR 0 1
49702: PPUSH
49703: LD_VAR 0 2
49707: PPUSH
49708: LD_VAR 0 3
49712: PPUSH
49713: CALL_OW 118
// repeat if Multiplayer then
49717: LD_OWVAR 4
49721: IFFALSE 49732
// wait ( 35 ) else
49723: LD_INT 35
49725: PPUSH
49726: CALL_OW 67
49730: GO 49739
// wait ( 5 ) ;
49732: LD_INT 5
49734: PPUSH
49735: CALL_OW 67
// _d := GetDir ( unit ) ;
49739: LD_ADDR_VAR 0 11
49743: PUSH
49744: LD_VAR 0 1
49748: PPUSH
49749: CALL_OW 254
49753: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
49754: LD_ADDR_VAR 0 7
49758: PUSH
49759: LD_VAR 0 1
49763: PPUSH
49764: CALL_OW 250
49768: PPUSH
49769: LD_VAR 0 1
49773: PPUSH
49774: CALL_OW 251
49778: PPUSH
49779: LD_VAR 0 2
49783: PPUSH
49784: LD_VAR 0 3
49788: PPUSH
49789: CALL 40157 0 4
49793: ST_TO_ADDR
// until dir = _d ;
49794: LD_VAR 0 7
49798: PUSH
49799: LD_VAR 0 11
49803: EQUAL
49804: IFFALSE 49717
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
49806: LD_ADDR_VAR 0 9
49810: PUSH
49811: LD_VAR 0 1
49815: PPUSH
49816: CALL_OW 250
49820: PPUSH
49821: LD_VAR 0 7
49825: PPUSH
49826: LD_VAR 0 5
49830: PPUSH
49831: CALL_OW 272
49835: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
49836: LD_ADDR_VAR 0 10
49840: PUSH
49841: LD_VAR 0 1
49845: PPUSH
49846: CALL_OW 251
49850: PPUSH
49851: LD_VAR 0 7
49855: PPUSH
49856: LD_VAR 0 5
49860: PPUSH
49861: CALL_OW 273
49865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49866: LD_VAR 0 9
49870: PPUSH
49871: LD_VAR 0 10
49875: PPUSH
49876: CALL_OW 488
49880: NOT
49881: IFFALSE 49885
// exit ;
49883: GO 50007
// ComAnimCustom ( unit , 1 ) ;
49885: LD_VAR 0 1
49889: PPUSH
49890: LD_INT 1
49892: PPUSH
49893: CALL_OW 592
// p := 0 ;
49897: LD_ADDR_VAR 0 12
49901: PUSH
49902: LD_INT 0
49904: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49905: LD_VAR 0 9
49909: PPUSH
49910: LD_VAR 0 10
49914: PPUSH
49915: LD_VAR 0 6
49919: PPUSH
49920: LD_VAR 0 8
49924: PPUSH
49925: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
49929: LD_INT 35
49931: PPUSH
49932: CALL_OW 67
// p := Inc ( p ) ;
49936: LD_ADDR_VAR 0 12
49940: PUSH
49941: LD_VAR 0 12
49945: PPUSH
49946: CALL 40113 0 1
49950: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
49951: LD_VAR 0 12
49955: PUSH
49956: LD_INT 3
49958: EQUAL
49959: IFTRUE 49973
49961: PUSH
49962: LD_VAR 0 1
49966: PPUSH
49967: CALL_OW 302
49971: NOT
49972: OR
49973: IFTRUE 49986
49975: PUSH
49976: LD_VAR 0 1
49980: PPUSH
49981: CALL_OW 301
49985: OR
49986: IFFALSE 49929
// RemoveSeeing ( _x , _y , side ) ;
49988: LD_VAR 0 9
49992: PPUSH
49993: LD_VAR 0 10
49997: PPUSH
49998: LD_VAR 0 6
50002: PPUSH
50003: CALL_OW 331
// end ;
50007: LD_VAR 0 4
50011: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
50012: LD_INT 0
50014: PPUSH
50015: PPUSH
50016: PPUSH
50017: PPUSH
50018: PPUSH
50019: PPUSH
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
50024: PPUSH
// if not unit then
50025: LD_VAR 0 1
50029: NOT
50030: IFFALSE 50034
// exit ;
50032: GO 50305
// side := GetSide ( unit ) ;
50034: LD_ADDR_VAR 0 3
50038: PUSH
50039: LD_VAR 0 1
50043: PPUSH
50044: CALL_OW 255
50048: ST_TO_ADDR
// x := GetX ( unit ) ;
50049: LD_ADDR_VAR 0 5
50053: PUSH
50054: LD_VAR 0 1
50058: PPUSH
50059: CALL_OW 250
50063: ST_TO_ADDR
// y := GetY ( unit ) ;
50064: LD_ADDR_VAR 0 6
50068: PUSH
50069: LD_VAR 0 1
50073: PPUSH
50074: CALL_OW 251
50078: ST_TO_ADDR
// r := 8 ;
50079: LD_ADDR_VAR 0 4
50083: PUSH
50084: LD_INT 8
50086: ST_TO_ADDR
// if x - r < 0 then
50087: LD_VAR 0 5
50091: PUSH
50092: LD_VAR 0 4
50096: MINUS
50097: PUSH
50098: LD_INT 0
50100: LESS
50101: IFFALSE 50113
// min_x := 0 else
50103: LD_ADDR_VAR 0 7
50107: PUSH
50108: LD_INT 0
50110: ST_TO_ADDR
50111: GO 50129
// min_x := x - r ;
50113: LD_ADDR_VAR 0 7
50117: PUSH
50118: LD_VAR 0 5
50122: PUSH
50123: LD_VAR 0 4
50127: MINUS
50128: ST_TO_ADDR
// if y - r < 0 then
50129: LD_VAR 0 6
50133: PUSH
50134: LD_VAR 0 4
50138: MINUS
50139: PUSH
50140: LD_INT 0
50142: LESS
50143: IFFALSE 50155
// min_y := 0 else
50145: LD_ADDR_VAR 0 8
50149: PUSH
50150: LD_INT 0
50152: ST_TO_ADDR
50153: GO 50171
// min_y := y - r ;
50155: LD_ADDR_VAR 0 8
50159: PUSH
50160: LD_VAR 0 6
50164: PUSH
50165: LD_VAR 0 4
50169: MINUS
50170: ST_TO_ADDR
// max_x := x + r ;
50171: LD_ADDR_VAR 0 9
50175: PUSH
50176: LD_VAR 0 5
50180: PUSH
50181: LD_VAR 0 4
50185: PLUS
50186: ST_TO_ADDR
// max_y := y + r ;
50187: LD_ADDR_VAR 0 10
50191: PUSH
50192: LD_VAR 0 6
50196: PUSH
50197: LD_VAR 0 4
50201: PLUS
50202: ST_TO_ADDR
// for _x = min_x to max_x do
50203: LD_ADDR_VAR 0 11
50207: PUSH
50208: DOUBLE
50209: LD_VAR 0 7
50213: DEC
50214: ST_TO_ADDR
50215: LD_VAR 0 9
50219: PUSH
50220: FOR_TO
50221: IFFALSE 50303
// for _y = min_y to max_y do
50223: LD_ADDR_VAR 0 12
50227: PUSH
50228: DOUBLE
50229: LD_VAR 0 8
50233: DEC
50234: ST_TO_ADDR
50235: LD_VAR 0 10
50239: PUSH
50240: FOR_TO
50241: IFFALSE 50299
// begin if not ValidHex ( _x , _y ) then
50243: LD_VAR 0 11
50247: PPUSH
50248: LD_VAR 0 12
50252: PPUSH
50253: CALL_OW 488
50257: NOT
50258: IFFALSE 50262
// continue ;
50260: GO 50240
// if MineAtPos ( _x , _y ) then
50262: LD_VAR 0 11
50266: PPUSH
50267: LD_VAR 0 12
50271: PPUSH
50272: CALL_OW 458
50276: IFFALSE 50297
// ViewMineAtPos ( _x , _y , side ) ;
50278: LD_VAR 0 11
50282: PPUSH
50283: LD_VAR 0 12
50287: PPUSH
50288: LD_VAR 0 3
50292: PPUSH
50293: CALL_OW 457
// end ;
50297: GO 50240
50299: POP
50300: POP
50301: GO 50220
50303: POP
50304: POP
// end ;
50305: LD_VAR 0 2
50309: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
50310: LD_INT 0
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
// if not units then
50319: LD_VAR 0 1
50323: NOT
50324: IFFALSE 50328
// exit ;
50326: GO 50792
// scaners := [ ] ;
50328: LD_ADDR_VAR 0 6
50332: PUSH
50333: EMPTY
50334: ST_TO_ADDR
// for i in units do
50335: LD_ADDR_VAR 0 3
50339: PUSH
50340: LD_VAR 0 1
50344: PUSH
50345: FOR_IN
50346: IFFALSE 50503
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
50348: LD_VAR 0 3
50352: PPUSH
50353: CALL_OW 264
50357: PUSH
50358: LD_INT 11
50360: NONEQUAL
50361: IFTRUE 50375
50363: PUSH
50364: LD_VAR 0 3
50368: PPUSH
50369: CALL_OW 302
50373: NOT
50374: OR
50375: IFTRUE 50392
50377: PUSH
50378: LD_VAR 0 3
50382: PPUSH
50383: CALL_OW 110
50387: PUSH
50388: LD_INT 502
50390: EQUAL
50391: OR
50392: IFFALSE 50396
// continue ;
50394: GO 50345
// ComStop ( i ) ;
50396: LD_VAR 0 3
50400: PPUSH
50401: CALL_OW 141
// x := GetX ( i ) ;
50405: LD_ADDR_VAR 0 4
50409: PUSH
50410: LD_VAR 0 3
50414: PPUSH
50415: CALL_OW 250
50419: ST_TO_ADDR
// y := GetY ( i ) ;
50420: LD_ADDR_VAR 0 5
50424: PUSH
50425: LD_VAR 0 3
50429: PPUSH
50430: CALL_OW 251
50434: ST_TO_ADDR
// if GetSide ( i ) = your_side then
50435: LD_VAR 0 3
50439: PPUSH
50440: CALL_OW 255
50444: PUSH
50445: LD_OWVAR 2
50449: EQUAL
50450: IFFALSE 50469
// PlaySoundXY ( x , y , mineDetector ) ;
50452: LD_VAR 0 4
50456: PPUSH
50457: LD_VAR 0 5
50461: PPUSH
50462: LD_STRING mineDetector
50464: PPUSH
50465: CALL_OW 366
// scaners := Join ( scaners , i ) ;
50469: LD_ADDR_VAR 0 6
50473: PUSH
50474: LD_VAR 0 6
50478: PPUSH
50479: LD_VAR 0 3
50483: PPUSH
50484: CALL 38740 0 2
50488: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
50489: LD_VAR 0 3
50493: PPUSH
50494: LD_INT 502
50496: PPUSH
50497: CALL_OW 109
// end ;
50501: GO 50345
50503: POP
50504: POP
// if not scaners then
50505: LD_VAR 0 6
50509: NOT
50510: IFFALSE 50514
// exit ;
50512: GO 50792
// wait ( 3 ) ;
50514: LD_INT 3
50516: PPUSH
50517: CALL_OW 67
// timer := 6 ;
50521: LD_ADDR_VAR 0 7
50525: PUSH
50526: LD_INT 6
50528: ST_TO_ADDR
// repeat for i in scaners do
50529: LD_ADDR_VAR 0 3
50533: PUSH
50534: LD_VAR 0 6
50538: PUSH
50539: FOR_IN
50540: IFFALSE 50690
// begin side := GetSide ( i ) ;
50542: LD_ADDR_VAR 0 8
50546: PUSH
50547: LD_VAR 0 3
50551: PPUSH
50552: CALL_OW 255
50556: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
50557: LD_VAR 0 3
50561: PPUSH
50562: CALL_OW 302
50566: NOT
50567: IFTRUE 50580
50569: PUSH
50570: LD_VAR 0 3
50574: PPUSH
50575: CALL_OW 314
50579: OR
50580: IFTRUE 50611
50582: PUSH
50583: LD_VAR 0 3
50587: PPUSH
50588: CALL_OW 263
50592: PUSH
50593: LD_INT 1
50595: EQUAL
50596: IFFALSE 50610
50598: PUSH
50599: LD_VAR 0 3
50603: PPUSH
50604: CALL_OW 311
50608: NOT
50609: AND
50610: OR
50611: IFFALSE 50655
// begin SetUnitDisplayNumber ( i , 0 ) ;
50613: LD_VAR 0 3
50617: PPUSH
50618: LD_INT 0
50620: PPUSH
50621: CALL_OW 505
// SetTag ( i , 0 ) ;
50625: LD_VAR 0 3
50629: PPUSH
50630: LD_INT 0
50632: PPUSH
50633: CALL_OW 109
// scaners := scaners diff i ;
50637: LD_ADDR_VAR 0 6
50641: PUSH
50642: LD_VAR 0 6
50646: PUSH
50647: LD_VAR 0 3
50651: DIFF
50652: ST_TO_ADDR
// continue ;
50653: GO 50539
// end ; if side in [ your_side , 9 ] then
50655: LD_VAR 0 8
50659: PUSH
50660: LD_OWVAR 2
50664: PUSH
50665: LD_INT 9
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: IN
50672: IFFALSE 50688
// SetUnitDisplayNumber ( i , timer ) ;
50674: LD_VAR 0 3
50678: PPUSH
50679: LD_VAR 0 7
50683: PPUSH
50684: CALL_OW 505
// end ;
50688: GO 50539
50690: POP
50691: POP
// if not scaners then
50692: LD_VAR 0 6
50696: NOT
50697: IFFALSE 50701
// exit ;
50699: GO 50792
// timer := Dec ( timer ) ;
50701: LD_ADDR_VAR 0 7
50705: PUSH
50706: LD_VAR 0 7
50710: PPUSH
50711: CALL 40135 0 1
50715: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50716: LD_INT 35
50718: PPUSH
50719: CALL_OW 67
// until timer = 0 ;
50723: LD_VAR 0 7
50727: PUSH
50728: LD_INT 0
50730: EQUAL
50731: IFFALSE 50529
// if not scaners then
50733: LD_VAR 0 6
50737: NOT
50738: IFFALSE 50742
// exit ;
50740: GO 50792
// for i in scaners do
50742: LD_ADDR_VAR 0 3
50746: PUSH
50747: LD_VAR 0 6
50751: PUSH
50752: FOR_IN
50753: IFFALSE 50790
// begin SetUnitDisplayNumber ( i , 0 ) ;
50755: LD_VAR 0 3
50759: PPUSH
50760: LD_INT 0
50762: PPUSH
50763: CALL_OW 505
// SetTag ( i , 0 ) ;
50767: LD_VAR 0 3
50771: PPUSH
50772: LD_INT 0
50774: PPUSH
50775: CALL_OW 109
// RevealDetectorMine ( i ) ;
50779: LD_VAR 0 3
50783: PPUSH
50784: CALL 50012 0 1
// end ;
50788: GO 50752
50790: POP
50791: POP
// end ;
50792: LD_VAR 0 2
50796: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
50797: LD_INT 0
50799: PPUSH
// if p1 = mine_detector_mode then
50800: LD_VAR 0 2
50804: PUSH
50805: LD_INT 103
50807: EQUAL
50808: IFFALSE 50819
// DetectMine ( units ) ;
50810: LD_VAR 0 1
50814: PPUSH
50815: CALL 50310 0 1
// end ; end_of_file
50819: LD_VAR 0 7
50823: RET
// export globalGameSaveCounter ; every 0 0$1 do
50824: GO 50826
50826: DISABLE
// begin enable ;
50827: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50828: LD_STRING updateTimer(
50830: PUSH
50831: LD_OWVAR 1
50835: STR
50836: PUSH
50837: LD_STRING );
50839: STR
50840: PPUSH
50841: CALL_OW 559
// end ;
50845: END
// every 0 0$1 do
50846: GO 50848
50848: DISABLE
// begin globalGameSaveCounter := 0 ;
50849: LD_ADDR_EXP 12
50853: PUSH
50854: LD_INT 0
50856: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50857: LD_STRING setGameSaveCounter(0)
50859: PPUSH
50860: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50864: LD_STRING initStreamRollete();
50866: PPUSH
50867: CALL_OW 559
// InitStreamMode ;
50871: CALL 52223 0 0
// DefineStreamItems ( false ) ;
50875: LD_INT 0
50877: PPUSH
50878: CALL 52687 0 1
// end ;
50882: END
// export function SOS_MapStart ( ) ; begin
50883: LD_INT 0
50885: PPUSH
// if streamModeActive then
50886: LD_EXP 13
50890: IFFALSE 50899
// DefineStreamItems ( true ) ;
50892: LD_INT 1
50894: PPUSH
50895: CALL 52687 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
50899: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
50901: PPUSH
50902: CALL_OW 559
// UpdateLuaVariables ( ) ;
50906: CALL 50923 0 0
// UpdateFactoryWaypoints ( ) ;
50910: CALL 65809 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50914: CALL 66061 0 0
// end ;
50918: LD_VAR 0 1
50922: RET
// function UpdateLuaVariables ( ) ; begin
50923: LD_INT 0
50925: PPUSH
// if globalGameSaveCounter then
50926: LD_EXP 12
50930: IFFALSE 50964
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50932: LD_ADDR_EXP 12
50936: PUSH
50937: LD_EXP 12
50941: PPUSH
50942: CALL 40113 0 1
50946: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50947: LD_STRING setGameSaveCounter(
50949: PUSH
50950: LD_EXP 12
50954: STR
50955: PUSH
50956: LD_STRING )
50958: STR
50959: PPUSH
50960: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50964: LD_STRING setGameDifficulty(
50966: PUSH
50967: LD_OWVAR 67
50971: STR
50972: PUSH
50973: LD_STRING )
50975: STR
50976: PPUSH
50977: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
50981: LD_STRING displayDifficulty(
50983: PUSH
50984: LD_OWVAR 67
50988: STR
50989: PUSH
50990: LD_STRING )
50992: STR
50993: PPUSH
50994: CALL_OW 559
// end ;
50998: LD_VAR 0 1
51002: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51003: LD_INT 0
51005: PPUSH
// if p2 = stream_mode then
51006: LD_VAR 0 2
51010: PUSH
51011: LD_INT 100
51013: EQUAL
51014: IFFALSE 52017
// begin if not StreamModeActive then
51016: LD_EXP 13
51020: NOT
51021: IFFALSE 51031
// StreamModeActive := true ;
51023: LD_ADDR_EXP 13
51027: PUSH
51028: LD_INT 1
51030: ST_TO_ADDR
// if p3 = 0 then
51031: LD_VAR 0 3
51035: PUSH
51036: LD_INT 0
51038: EQUAL
51039: IFFALSE 51045
// InitStreamMode ;
51041: CALL 52223 0 0
// if p3 = 1 then
51045: LD_VAR 0 3
51049: PUSH
51050: LD_INT 1
51052: EQUAL
51053: IFFALSE 51063
// sRocket := true ;
51055: LD_ADDR_EXP 18
51059: PUSH
51060: LD_INT 1
51062: ST_TO_ADDR
// if p3 = 2 then
51063: LD_VAR 0 3
51067: PUSH
51068: LD_INT 2
51070: EQUAL
51071: IFFALSE 51081
// sSpeed := true ;
51073: LD_ADDR_EXP 17
51077: PUSH
51078: LD_INT 1
51080: ST_TO_ADDR
// if p3 = 3 then
51081: LD_VAR 0 3
51085: PUSH
51086: LD_INT 3
51088: EQUAL
51089: IFFALSE 51099
// sEngine := true ;
51091: LD_ADDR_EXP 19
51095: PUSH
51096: LD_INT 1
51098: ST_TO_ADDR
// if p3 = 4 then
51099: LD_VAR 0 3
51103: PUSH
51104: LD_INT 4
51106: EQUAL
51107: IFFALSE 51117
// sSpec := true ;
51109: LD_ADDR_EXP 16
51113: PUSH
51114: LD_INT 1
51116: ST_TO_ADDR
// if p3 = 5 then
51117: LD_VAR 0 3
51121: PUSH
51122: LD_INT 5
51124: EQUAL
51125: IFFALSE 51135
// sLevel := true ;
51127: LD_ADDR_EXP 20
51131: PUSH
51132: LD_INT 1
51134: ST_TO_ADDR
// if p3 = 6 then
51135: LD_VAR 0 3
51139: PUSH
51140: LD_INT 6
51142: EQUAL
51143: IFFALSE 51153
// sArmoury := true ;
51145: LD_ADDR_EXP 21
51149: PUSH
51150: LD_INT 1
51152: ST_TO_ADDR
// if p3 = 7 then
51153: LD_VAR 0 3
51157: PUSH
51158: LD_INT 7
51160: EQUAL
51161: IFFALSE 51171
// sRadar := true ;
51163: LD_ADDR_EXP 22
51167: PUSH
51168: LD_INT 1
51170: ST_TO_ADDR
// if p3 = 8 then
51171: LD_VAR 0 3
51175: PUSH
51176: LD_INT 8
51178: EQUAL
51179: IFFALSE 51189
// sBunker := true ;
51181: LD_ADDR_EXP 23
51185: PUSH
51186: LD_INT 1
51188: ST_TO_ADDR
// if p3 = 9 then
51189: LD_VAR 0 3
51193: PUSH
51194: LD_INT 9
51196: EQUAL
51197: IFFALSE 51207
// sHack := true ;
51199: LD_ADDR_EXP 24
51203: PUSH
51204: LD_INT 1
51206: ST_TO_ADDR
// if p3 = 10 then
51207: LD_VAR 0 3
51211: PUSH
51212: LD_INT 10
51214: EQUAL
51215: IFFALSE 51225
// sFire := true ;
51217: LD_ADDR_EXP 25
51221: PUSH
51222: LD_INT 1
51224: ST_TO_ADDR
// if p3 = 11 then
51225: LD_VAR 0 3
51229: PUSH
51230: LD_INT 11
51232: EQUAL
51233: IFFALSE 51243
// sRefresh := true ;
51235: LD_ADDR_EXP 26
51239: PUSH
51240: LD_INT 1
51242: ST_TO_ADDR
// if p3 = 12 then
51243: LD_VAR 0 3
51247: PUSH
51248: LD_INT 12
51250: EQUAL
51251: IFFALSE 51261
// sExp := true ;
51253: LD_ADDR_EXP 27
51257: PUSH
51258: LD_INT 1
51260: ST_TO_ADDR
// if p3 = 13 then
51261: LD_VAR 0 3
51265: PUSH
51266: LD_INT 13
51268: EQUAL
51269: IFFALSE 51279
// sDepot := true ;
51271: LD_ADDR_EXP 28
51275: PUSH
51276: LD_INT 1
51278: ST_TO_ADDR
// if p3 = 14 then
51279: LD_VAR 0 3
51283: PUSH
51284: LD_INT 14
51286: EQUAL
51287: IFFALSE 51297
// sFlag := true ;
51289: LD_ADDR_EXP 29
51293: PUSH
51294: LD_INT 1
51296: ST_TO_ADDR
// if p3 = 15 then
51297: LD_VAR 0 3
51301: PUSH
51302: LD_INT 15
51304: EQUAL
51305: IFFALSE 51315
// sKamikadze := true ;
51307: LD_ADDR_EXP 37
51311: PUSH
51312: LD_INT 1
51314: ST_TO_ADDR
// if p3 = 16 then
51315: LD_VAR 0 3
51319: PUSH
51320: LD_INT 16
51322: EQUAL
51323: IFFALSE 51333
// sTroll := true ;
51325: LD_ADDR_EXP 38
51329: PUSH
51330: LD_INT 1
51332: ST_TO_ADDR
// if p3 = 17 then
51333: LD_VAR 0 3
51337: PUSH
51338: LD_INT 17
51340: EQUAL
51341: IFFALSE 51351
// sSlow := true ;
51343: LD_ADDR_EXP 39
51347: PUSH
51348: LD_INT 1
51350: ST_TO_ADDR
// if p3 = 18 then
51351: LD_VAR 0 3
51355: PUSH
51356: LD_INT 18
51358: EQUAL
51359: IFFALSE 51369
// sLack := true ;
51361: LD_ADDR_EXP 40
51365: PUSH
51366: LD_INT 1
51368: ST_TO_ADDR
// if p3 = 19 then
51369: LD_VAR 0 3
51373: PUSH
51374: LD_INT 19
51376: EQUAL
51377: IFFALSE 51387
// sTank := true ;
51379: LD_ADDR_EXP 42
51383: PUSH
51384: LD_INT 1
51386: ST_TO_ADDR
// if p3 = 20 then
51387: LD_VAR 0 3
51391: PUSH
51392: LD_INT 20
51394: EQUAL
51395: IFFALSE 51405
// sRemote := true ;
51397: LD_ADDR_EXP 43
51401: PUSH
51402: LD_INT 1
51404: ST_TO_ADDR
// if p3 = 21 then
51405: LD_VAR 0 3
51409: PUSH
51410: LD_INT 21
51412: EQUAL
51413: IFFALSE 51423
// sPowell := true ;
51415: LD_ADDR_EXP 44
51419: PUSH
51420: LD_INT 1
51422: ST_TO_ADDR
// if p3 = 22 then
51423: LD_VAR 0 3
51427: PUSH
51428: LD_INT 22
51430: EQUAL
51431: IFFALSE 51441
// sTeleport := true ;
51433: LD_ADDR_EXP 47
51437: PUSH
51438: LD_INT 1
51440: ST_TO_ADDR
// if p3 = 23 then
51441: LD_VAR 0 3
51445: PUSH
51446: LD_INT 23
51448: EQUAL
51449: IFFALSE 51459
// sOilTower := true ;
51451: LD_ADDR_EXP 49
51455: PUSH
51456: LD_INT 1
51458: ST_TO_ADDR
// if p3 = 24 then
51459: LD_VAR 0 3
51463: PUSH
51464: LD_INT 24
51466: EQUAL
51467: IFFALSE 51477
// sShovel := true ;
51469: LD_ADDR_EXP 50
51473: PUSH
51474: LD_INT 1
51476: ST_TO_ADDR
// if p3 = 25 then
51477: LD_VAR 0 3
51481: PUSH
51482: LD_INT 25
51484: EQUAL
51485: IFFALSE 51495
// sSheik := true ;
51487: LD_ADDR_EXP 51
51491: PUSH
51492: LD_INT 1
51494: ST_TO_ADDR
// if p3 = 26 then
51495: LD_VAR 0 3
51499: PUSH
51500: LD_INT 26
51502: EQUAL
51503: IFFALSE 51513
// sEarthquake := true ;
51505: LD_ADDR_EXP 53
51509: PUSH
51510: LD_INT 1
51512: ST_TO_ADDR
// if p3 = 27 then
51513: LD_VAR 0 3
51517: PUSH
51518: LD_INT 27
51520: EQUAL
51521: IFFALSE 51531
// sAI := true ;
51523: LD_ADDR_EXP 54
51527: PUSH
51528: LD_INT 1
51530: ST_TO_ADDR
// if p3 = 28 then
51531: LD_VAR 0 3
51535: PUSH
51536: LD_INT 28
51538: EQUAL
51539: IFFALSE 51549
// sCargo := true ;
51541: LD_ADDR_EXP 57
51545: PUSH
51546: LD_INT 1
51548: ST_TO_ADDR
// if p3 = 29 then
51549: LD_VAR 0 3
51553: PUSH
51554: LD_INT 29
51556: EQUAL
51557: IFFALSE 51567
// sDLaser := true ;
51559: LD_ADDR_EXP 58
51563: PUSH
51564: LD_INT 1
51566: ST_TO_ADDR
// if p3 = 30 then
51567: LD_VAR 0 3
51571: PUSH
51572: LD_INT 30
51574: EQUAL
51575: IFFALSE 51585
// sExchange := true ;
51577: LD_ADDR_EXP 59
51581: PUSH
51582: LD_INT 1
51584: ST_TO_ADDR
// if p3 = 31 then
51585: LD_VAR 0 3
51589: PUSH
51590: LD_INT 31
51592: EQUAL
51593: IFFALSE 51603
// sFac := true ;
51595: LD_ADDR_EXP 60
51599: PUSH
51600: LD_INT 1
51602: ST_TO_ADDR
// if p3 = 32 then
51603: LD_VAR 0 3
51607: PUSH
51608: LD_INT 32
51610: EQUAL
51611: IFFALSE 51621
// sPower := true ;
51613: LD_ADDR_EXP 61
51617: PUSH
51618: LD_INT 1
51620: ST_TO_ADDR
// if p3 = 33 then
51621: LD_VAR 0 3
51625: PUSH
51626: LD_INT 33
51628: EQUAL
51629: IFFALSE 51639
// sRandom := true ;
51631: LD_ADDR_EXP 62
51635: PUSH
51636: LD_INT 1
51638: ST_TO_ADDR
// if p3 = 34 then
51639: LD_VAR 0 3
51643: PUSH
51644: LD_INT 34
51646: EQUAL
51647: IFFALSE 51657
// sShield := true ;
51649: LD_ADDR_EXP 63
51653: PUSH
51654: LD_INT 1
51656: ST_TO_ADDR
// if p3 = 35 then
51657: LD_VAR 0 3
51661: PUSH
51662: LD_INT 35
51664: EQUAL
51665: IFFALSE 51675
// sTime := true ;
51667: LD_ADDR_EXP 64
51671: PUSH
51672: LD_INT 1
51674: ST_TO_ADDR
// if p3 = 36 then
51675: LD_VAR 0 3
51679: PUSH
51680: LD_INT 36
51682: EQUAL
51683: IFFALSE 51693
// sTools := true ;
51685: LD_ADDR_EXP 65
51689: PUSH
51690: LD_INT 1
51692: ST_TO_ADDR
// if p3 = 101 then
51693: LD_VAR 0 3
51697: PUSH
51698: LD_INT 101
51700: EQUAL
51701: IFFALSE 51711
// sSold := true ;
51703: LD_ADDR_EXP 30
51707: PUSH
51708: LD_INT 1
51710: ST_TO_ADDR
// if p3 = 102 then
51711: LD_VAR 0 3
51715: PUSH
51716: LD_INT 102
51718: EQUAL
51719: IFFALSE 51729
// sDiff := true ;
51721: LD_ADDR_EXP 31
51725: PUSH
51726: LD_INT 1
51728: ST_TO_ADDR
// if p3 = 103 then
51729: LD_VAR 0 3
51733: PUSH
51734: LD_INT 103
51736: EQUAL
51737: IFFALSE 51747
// sFog := true ;
51739: LD_ADDR_EXP 34
51743: PUSH
51744: LD_INT 1
51746: ST_TO_ADDR
// if p3 = 104 then
51747: LD_VAR 0 3
51751: PUSH
51752: LD_INT 104
51754: EQUAL
51755: IFFALSE 51765
// sReset := true ;
51757: LD_ADDR_EXP 35
51761: PUSH
51762: LD_INT 1
51764: ST_TO_ADDR
// if p3 = 105 then
51765: LD_VAR 0 3
51769: PUSH
51770: LD_INT 105
51772: EQUAL
51773: IFFALSE 51783
// sSun := true ;
51775: LD_ADDR_EXP 36
51779: PUSH
51780: LD_INT 1
51782: ST_TO_ADDR
// if p3 = 106 then
51783: LD_VAR 0 3
51787: PUSH
51788: LD_INT 106
51790: EQUAL
51791: IFFALSE 51801
// sTiger := true ;
51793: LD_ADDR_EXP 32
51797: PUSH
51798: LD_INT 1
51800: ST_TO_ADDR
// if p3 = 107 then
51801: LD_VAR 0 3
51805: PUSH
51806: LD_INT 107
51808: EQUAL
51809: IFFALSE 51819
// sBomb := true ;
51811: LD_ADDR_EXP 33
51815: PUSH
51816: LD_INT 1
51818: ST_TO_ADDR
// if p3 = 108 then
51819: LD_VAR 0 3
51823: PUSH
51824: LD_INT 108
51826: EQUAL
51827: IFFALSE 51837
// sWound := true ;
51829: LD_ADDR_EXP 41
51833: PUSH
51834: LD_INT 1
51836: ST_TO_ADDR
// if p3 = 109 then
51837: LD_VAR 0 3
51841: PUSH
51842: LD_INT 109
51844: EQUAL
51845: IFFALSE 51855
// sBetray := true ;
51847: LD_ADDR_EXP 45
51851: PUSH
51852: LD_INT 1
51854: ST_TO_ADDR
// if p3 = 110 then
51855: LD_VAR 0 3
51859: PUSH
51860: LD_INT 110
51862: EQUAL
51863: IFFALSE 51873
// sContamin := true ;
51865: LD_ADDR_EXP 46
51869: PUSH
51870: LD_INT 1
51872: ST_TO_ADDR
// if p3 = 111 then
51873: LD_VAR 0 3
51877: PUSH
51878: LD_INT 111
51880: EQUAL
51881: IFFALSE 51891
// sOil := true ;
51883: LD_ADDR_EXP 48
51887: PUSH
51888: LD_INT 1
51890: ST_TO_ADDR
// if p3 = 112 then
51891: LD_VAR 0 3
51895: PUSH
51896: LD_INT 112
51898: EQUAL
51899: IFFALSE 51909
// sStu := true ;
51901: LD_ADDR_EXP 52
51905: PUSH
51906: LD_INT 1
51908: ST_TO_ADDR
// if p3 = 113 then
51909: LD_VAR 0 3
51913: PUSH
51914: LD_INT 113
51916: EQUAL
51917: IFFALSE 51927
// sBazooka := true ;
51919: LD_ADDR_EXP 55
51923: PUSH
51924: LD_INT 1
51926: ST_TO_ADDR
// if p3 = 114 then
51927: LD_VAR 0 3
51931: PUSH
51932: LD_INT 114
51934: EQUAL
51935: IFFALSE 51945
// sMortar := true ;
51937: LD_ADDR_EXP 56
51941: PUSH
51942: LD_INT 1
51944: ST_TO_ADDR
// if p3 = 115 then
51945: LD_VAR 0 3
51949: PUSH
51950: LD_INT 115
51952: EQUAL
51953: IFFALSE 51963
// sRanger := true ;
51955: LD_ADDR_EXP 66
51959: PUSH
51960: LD_INT 1
51962: ST_TO_ADDR
// if p3 = 116 then
51963: LD_VAR 0 3
51967: PUSH
51968: LD_INT 116
51970: EQUAL
51971: IFFALSE 51981
// sComputer := true ;
51973: LD_ADDR_EXP 67
51977: PUSH
51978: LD_INT 1
51980: ST_TO_ADDR
// if p3 = 117 then
51981: LD_VAR 0 3
51985: PUSH
51986: LD_INT 117
51988: EQUAL
51989: IFFALSE 51999
// s30 := true ;
51991: LD_ADDR_EXP 68
51995: PUSH
51996: LD_INT 1
51998: ST_TO_ADDR
// if p3 = 118 then
51999: LD_VAR 0 3
52003: PUSH
52004: LD_INT 118
52006: EQUAL
52007: IFFALSE 52017
// s60 := true ;
52009: LD_ADDR_EXP 69
52013: PUSH
52014: LD_INT 1
52016: ST_TO_ADDR
// end ; if p2 = hack_mode then
52017: LD_VAR 0 2
52021: PUSH
52022: LD_INT 101
52024: EQUAL
52025: IFFALSE 52153
// begin case p3 of 1 :
52027: LD_VAR 0 3
52031: PUSH
52032: LD_INT 1
52034: DOUBLE
52035: EQUAL
52036: IFTRUE 52040
52038: GO 52047
52040: POP
// hHackUnlimitedResources ; 2 :
52041: CALL 64416 0 0
52045: GO 52153
52047: LD_INT 2
52049: DOUBLE
52050: EQUAL
52051: IFTRUE 52055
52053: GO 52062
52055: POP
// hHackSetLevel10 ; 3 :
52056: CALL 64549 0 0
52060: GO 52153
52062: LD_INT 3
52064: DOUBLE
52065: EQUAL
52066: IFTRUE 52070
52068: GO 52077
52070: POP
// hHackSetLevel10YourUnits ; 4 :
52071: CALL 64634 0 0
52075: GO 52153
52077: LD_INT 4
52079: DOUBLE
52080: EQUAL
52081: IFTRUE 52085
52083: GO 52092
52085: POP
// hHackInvincible ; 5 :
52086: CALL 65082 0 0
52090: GO 52153
52092: LD_INT 5
52094: DOUBLE
52095: EQUAL
52096: IFTRUE 52100
52098: GO 52107
52100: POP
// hHackInvisible ; 6 :
52101: CALL 65193 0 0
52105: GO 52153
52107: LD_INT 6
52109: DOUBLE
52110: EQUAL
52111: IFTRUE 52115
52113: GO 52122
52115: POP
// hHackChangeYourSide ; 7 :
52116: CALL 65250 0 0
52120: GO 52153
52122: LD_INT 7
52124: DOUBLE
52125: EQUAL
52126: IFTRUE 52130
52128: GO 52137
52130: POP
// hHackChangeUnitSide ; 8 :
52131: CALL 65292 0 0
52135: GO 52153
52137: LD_INT 8
52139: DOUBLE
52140: EQUAL
52141: IFTRUE 52145
52143: GO 52152
52145: POP
// hHackFog ; end ;
52146: CALL 65393 0 0
52150: GO 52153
52152: POP
// end ; if p2 = game_save_mode then
52153: LD_VAR 0 2
52157: PUSH
52158: LD_INT 102
52160: EQUAL
52161: IFFALSE 52218
// begin if p3 = 1 then
52163: LD_VAR 0 3
52167: PUSH
52168: LD_INT 1
52170: EQUAL
52171: IFFALSE 52183
// globalGameSaveCounter := p4 ;
52173: LD_ADDR_EXP 12
52177: PUSH
52178: LD_VAR 0 4
52182: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
52183: LD_VAR 0 3
52187: PUSH
52188: LD_INT 2
52190: EQUAL
52191: IFFALSE 52199
52193: PUSH
52194: LD_EXP 12
52198: AND
52199: IFFALSE 52218
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52201: LD_STRING setGameSaveCounter(
52203: PUSH
52204: LD_EXP 12
52208: STR
52209: PUSH
52210: LD_STRING )
52212: STR
52213: PPUSH
52214: CALL_OW 559
// end ; end ;
52218: LD_VAR 0 7
52222: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
52223: LD_INT 0
52225: PPUSH
// streamModeActive := false ;
52226: LD_ADDR_EXP 13
52230: PUSH
52231: LD_INT 0
52233: ST_TO_ADDR
// normalCounter := 36 ;
52234: LD_ADDR_EXP 14
52238: PUSH
52239: LD_INT 36
52241: ST_TO_ADDR
// hardcoreCounter := 18 ;
52242: LD_ADDR_EXP 15
52246: PUSH
52247: LD_INT 18
52249: ST_TO_ADDR
// sRocket := false ;
52250: LD_ADDR_EXP 18
52254: PUSH
52255: LD_INT 0
52257: ST_TO_ADDR
// sSpeed := false ;
52258: LD_ADDR_EXP 17
52262: PUSH
52263: LD_INT 0
52265: ST_TO_ADDR
// sEngine := false ;
52266: LD_ADDR_EXP 19
52270: PUSH
52271: LD_INT 0
52273: ST_TO_ADDR
// sSpec := false ;
52274: LD_ADDR_EXP 16
52278: PUSH
52279: LD_INT 0
52281: ST_TO_ADDR
// sLevel := false ;
52282: LD_ADDR_EXP 20
52286: PUSH
52287: LD_INT 0
52289: ST_TO_ADDR
// sArmoury := false ;
52290: LD_ADDR_EXP 21
52294: PUSH
52295: LD_INT 0
52297: ST_TO_ADDR
// sRadar := false ;
52298: LD_ADDR_EXP 22
52302: PUSH
52303: LD_INT 0
52305: ST_TO_ADDR
// sBunker := false ;
52306: LD_ADDR_EXP 23
52310: PUSH
52311: LD_INT 0
52313: ST_TO_ADDR
// sHack := false ;
52314: LD_ADDR_EXP 24
52318: PUSH
52319: LD_INT 0
52321: ST_TO_ADDR
// sFire := false ;
52322: LD_ADDR_EXP 25
52326: PUSH
52327: LD_INT 0
52329: ST_TO_ADDR
// sRefresh := false ;
52330: LD_ADDR_EXP 26
52334: PUSH
52335: LD_INT 0
52337: ST_TO_ADDR
// sExp := false ;
52338: LD_ADDR_EXP 27
52342: PUSH
52343: LD_INT 0
52345: ST_TO_ADDR
// sDepot := false ;
52346: LD_ADDR_EXP 28
52350: PUSH
52351: LD_INT 0
52353: ST_TO_ADDR
// sFlag := false ;
52354: LD_ADDR_EXP 29
52358: PUSH
52359: LD_INT 0
52361: ST_TO_ADDR
// sKamikadze := false ;
52362: LD_ADDR_EXP 37
52366: PUSH
52367: LD_INT 0
52369: ST_TO_ADDR
// sTroll := false ;
52370: LD_ADDR_EXP 38
52374: PUSH
52375: LD_INT 0
52377: ST_TO_ADDR
// sSlow := false ;
52378: LD_ADDR_EXP 39
52382: PUSH
52383: LD_INT 0
52385: ST_TO_ADDR
// sLack := false ;
52386: LD_ADDR_EXP 40
52390: PUSH
52391: LD_INT 0
52393: ST_TO_ADDR
// sTank := false ;
52394: LD_ADDR_EXP 42
52398: PUSH
52399: LD_INT 0
52401: ST_TO_ADDR
// sRemote := false ;
52402: LD_ADDR_EXP 43
52406: PUSH
52407: LD_INT 0
52409: ST_TO_ADDR
// sPowell := false ;
52410: LD_ADDR_EXP 44
52414: PUSH
52415: LD_INT 0
52417: ST_TO_ADDR
// sTeleport := false ;
52418: LD_ADDR_EXP 47
52422: PUSH
52423: LD_INT 0
52425: ST_TO_ADDR
// sOilTower := false ;
52426: LD_ADDR_EXP 49
52430: PUSH
52431: LD_INT 0
52433: ST_TO_ADDR
// sShovel := false ;
52434: LD_ADDR_EXP 50
52438: PUSH
52439: LD_INT 0
52441: ST_TO_ADDR
// sSheik := false ;
52442: LD_ADDR_EXP 51
52446: PUSH
52447: LD_INT 0
52449: ST_TO_ADDR
// sEarthquake := false ;
52450: LD_ADDR_EXP 53
52454: PUSH
52455: LD_INT 0
52457: ST_TO_ADDR
// sAI := false ;
52458: LD_ADDR_EXP 54
52462: PUSH
52463: LD_INT 0
52465: ST_TO_ADDR
// sCargo := false ;
52466: LD_ADDR_EXP 57
52470: PUSH
52471: LD_INT 0
52473: ST_TO_ADDR
// sDLaser := false ;
52474: LD_ADDR_EXP 58
52478: PUSH
52479: LD_INT 0
52481: ST_TO_ADDR
// sExchange := false ;
52482: LD_ADDR_EXP 59
52486: PUSH
52487: LD_INT 0
52489: ST_TO_ADDR
// sFac := false ;
52490: LD_ADDR_EXP 60
52494: PUSH
52495: LD_INT 0
52497: ST_TO_ADDR
// sPower := false ;
52498: LD_ADDR_EXP 61
52502: PUSH
52503: LD_INT 0
52505: ST_TO_ADDR
// sRandom := false ;
52506: LD_ADDR_EXP 62
52510: PUSH
52511: LD_INT 0
52513: ST_TO_ADDR
// sShield := false ;
52514: LD_ADDR_EXP 63
52518: PUSH
52519: LD_INT 0
52521: ST_TO_ADDR
// sTime := false ;
52522: LD_ADDR_EXP 64
52526: PUSH
52527: LD_INT 0
52529: ST_TO_ADDR
// sTools := false ;
52530: LD_ADDR_EXP 65
52534: PUSH
52535: LD_INT 0
52537: ST_TO_ADDR
// sSold := false ;
52538: LD_ADDR_EXP 30
52542: PUSH
52543: LD_INT 0
52545: ST_TO_ADDR
// sDiff := false ;
52546: LD_ADDR_EXP 31
52550: PUSH
52551: LD_INT 0
52553: ST_TO_ADDR
// sFog := false ;
52554: LD_ADDR_EXP 34
52558: PUSH
52559: LD_INT 0
52561: ST_TO_ADDR
// sReset := false ;
52562: LD_ADDR_EXP 35
52566: PUSH
52567: LD_INT 0
52569: ST_TO_ADDR
// sSun := false ;
52570: LD_ADDR_EXP 36
52574: PUSH
52575: LD_INT 0
52577: ST_TO_ADDR
// sTiger := false ;
52578: LD_ADDR_EXP 32
52582: PUSH
52583: LD_INT 0
52585: ST_TO_ADDR
// sBomb := false ;
52586: LD_ADDR_EXP 33
52590: PUSH
52591: LD_INT 0
52593: ST_TO_ADDR
// sWound := false ;
52594: LD_ADDR_EXP 41
52598: PUSH
52599: LD_INT 0
52601: ST_TO_ADDR
// sBetray := false ;
52602: LD_ADDR_EXP 45
52606: PUSH
52607: LD_INT 0
52609: ST_TO_ADDR
// sContamin := false ;
52610: LD_ADDR_EXP 46
52614: PUSH
52615: LD_INT 0
52617: ST_TO_ADDR
// sOil := false ;
52618: LD_ADDR_EXP 48
52622: PUSH
52623: LD_INT 0
52625: ST_TO_ADDR
// sStu := false ;
52626: LD_ADDR_EXP 52
52630: PUSH
52631: LD_INT 0
52633: ST_TO_ADDR
// sBazooka := false ;
52634: LD_ADDR_EXP 55
52638: PUSH
52639: LD_INT 0
52641: ST_TO_ADDR
// sMortar := false ;
52642: LD_ADDR_EXP 56
52646: PUSH
52647: LD_INT 0
52649: ST_TO_ADDR
// sRanger := false ;
52650: LD_ADDR_EXP 66
52654: PUSH
52655: LD_INT 0
52657: ST_TO_ADDR
// sComputer := false ;
52658: LD_ADDR_EXP 67
52662: PUSH
52663: LD_INT 0
52665: ST_TO_ADDR
// s30 := false ;
52666: LD_ADDR_EXP 68
52670: PUSH
52671: LD_INT 0
52673: ST_TO_ADDR
// s60 := false ;
52674: LD_ADDR_EXP 69
52678: PUSH
52679: LD_INT 0
52681: ST_TO_ADDR
// end ;
52682: LD_VAR 0 1
52686: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52687: LD_INT 0
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
// result := [ ] ;
52696: LD_ADDR_VAR 0 2
52700: PUSH
52701: EMPTY
52702: ST_TO_ADDR
// if campaign_id = 1 then
52703: LD_OWVAR 69
52707: PUSH
52708: LD_INT 1
52710: EQUAL
52711: IFFALSE 55877
// begin case mission_number of 1 :
52713: LD_OWVAR 70
52717: PUSH
52718: LD_INT 1
52720: DOUBLE
52721: EQUAL
52722: IFTRUE 52726
52724: GO 52802
52726: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52727: LD_ADDR_VAR 0 2
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 4
52737: PUSH
52738: LD_INT 11
52740: PUSH
52741: LD_INT 12
52743: PUSH
52744: LD_INT 15
52746: PUSH
52747: LD_INT 16
52749: PUSH
52750: LD_INT 22
52752: PUSH
52753: LD_INT 23
52755: PUSH
52756: LD_INT 26
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 101
52772: PUSH
52773: LD_INT 102
52775: PUSH
52776: LD_INT 106
52778: PUSH
52779: LD_INT 116
52781: PUSH
52782: LD_INT 117
52784: PUSH
52785: LD_INT 118
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: ST_TO_ADDR
52800: GO 55875
52802: LD_INT 2
52804: DOUBLE
52805: EQUAL
52806: IFTRUE 52810
52808: GO 52894
52810: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52811: LD_ADDR_VAR 0 2
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 4
52821: PUSH
52822: LD_INT 11
52824: PUSH
52825: LD_INT 12
52827: PUSH
52828: LD_INT 15
52830: PUSH
52831: LD_INT 16
52833: PUSH
52834: LD_INT 22
52836: PUSH
52837: LD_INT 23
52839: PUSH
52840: LD_INT 26
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 101
52856: PUSH
52857: LD_INT 102
52859: PUSH
52860: LD_INT 105
52862: PUSH
52863: LD_INT 106
52865: PUSH
52866: LD_INT 108
52868: PUSH
52869: LD_INT 116
52871: PUSH
52872: LD_INT 117
52874: PUSH
52875: LD_INT 118
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: ST_TO_ADDR
52892: GO 55875
52894: LD_INT 3
52896: DOUBLE
52897: EQUAL
52898: IFTRUE 52902
52900: GO 52990
52902: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52903: LD_ADDR_VAR 0 2
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 4
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: LD_INT 11
52919: PUSH
52920: LD_INT 12
52922: PUSH
52923: LD_INT 15
52925: PUSH
52926: LD_INT 16
52928: PUSH
52929: LD_INT 22
52931: PUSH
52932: LD_INT 26
52934: PUSH
52935: LD_INT 36
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 101
52952: PUSH
52953: LD_INT 102
52955: PUSH
52956: LD_INT 105
52958: PUSH
52959: LD_INT 106
52961: PUSH
52962: LD_INT 108
52964: PUSH
52965: LD_INT 116
52967: PUSH
52968: LD_INT 117
52970: PUSH
52971: LD_INT 118
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: ST_TO_ADDR
52988: GO 55875
52990: LD_INT 4
52992: DOUBLE
52993: EQUAL
52994: IFTRUE 52998
52996: GO 53094
52998: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52999: LD_ADDR_VAR 0 2
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 4
53009: PUSH
53010: LD_INT 5
53012: PUSH
53013: LD_INT 8
53015: PUSH
53016: LD_INT 11
53018: PUSH
53019: LD_INT 12
53021: PUSH
53022: LD_INT 15
53024: PUSH
53025: LD_INT 16
53027: PUSH
53028: LD_INT 22
53030: PUSH
53031: LD_INT 23
53033: PUSH
53034: LD_INT 26
53036: PUSH
53037: LD_INT 36
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 101
53056: PUSH
53057: LD_INT 102
53059: PUSH
53060: LD_INT 105
53062: PUSH
53063: LD_INT 106
53065: PUSH
53066: LD_INT 108
53068: PUSH
53069: LD_INT 116
53071: PUSH
53072: LD_INT 117
53074: PUSH
53075: LD_INT 118
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: ST_TO_ADDR
53092: GO 55875
53094: LD_INT 5
53096: DOUBLE
53097: EQUAL
53098: IFTRUE 53102
53100: GO 53214
53102: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53103: LD_ADDR_VAR 0 2
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: LD_INT 5
53116: PUSH
53117: LD_INT 6
53119: PUSH
53120: LD_INT 8
53122: PUSH
53123: LD_INT 11
53125: PUSH
53126: LD_INT 12
53128: PUSH
53129: LD_INT 15
53131: PUSH
53132: LD_INT 16
53134: PUSH
53135: LD_INT 22
53137: PUSH
53138: LD_INT 23
53140: PUSH
53141: LD_INT 25
53143: PUSH
53144: LD_INT 26
53146: PUSH
53147: LD_INT 36
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 101
53168: PUSH
53169: LD_INT 102
53171: PUSH
53172: LD_INT 105
53174: PUSH
53175: LD_INT 106
53177: PUSH
53178: LD_INT 108
53180: PUSH
53181: LD_INT 109
53183: PUSH
53184: LD_INT 112
53186: PUSH
53187: LD_INT 116
53189: PUSH
53190: LD_INT 117
53192: PUSH
53193: LD_INT 118
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: ST_TO_ADDR
53212: GO 55875
53214: LD_INT 6
53216: DOUBLE
53217: EQUAL
53218: IFTRUE 53222
53220: GO 53354
53222: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53223: LD_ADDR_VAR 0 2
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 4
53233: PUSH
53234: LD_INT 5
53236: PUSH
53237: LD_INT 6
53239: PUSH
53240: LD_INT 8
53242: PUSH
53243: LD_INT 11
53245: PUSH
53246: LD_INT 12
53248: PUSH
53249: LD_INT 15
53251: PUSH
53252: LD_INT 16
53254: PUSH
53255: LD_INT 20
53257: PUSH
53258: LD_INT 21
53260: PUSH
53261: LD_INT 22
53263: PUSH
53264: LD_INT 23
53266: PUSH
53267: LD_INT 25
53269: PUSH
53270: LD_INT 26
53272: PUSH
53273: LD_INT 30
53275: PUSH
53276: LD_INT 31
53278: PUSH
53279: LD_INT 32
53281: PUSH
53282: LD_INT 36
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 101
53308: PUSH
53309: LD_INT 102
53311: PUSH
53312: LD_INT 105
53314: PUSH
53315: LD_INT 106
53317: PUSH
53318: LD_INT 108
53320: PUSH
53321: LD_INT 109
53323: PUSH
53324: LD_INT 112
53326: PUSH
53327: LD_INT 116
53329: PUSH
53330: LD_INT 117
53332: PUSH
53333: LD_INT 118
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: ST_TO_ADDR
53352: GO 55875
53354: LD_INT 7
53356: DOUBLE
53357: EQUAL
53358: IFTRUE 53362
53360: GO 53474
53362: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53363: LD_ADDR_VAR 0 2
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 4
53373: PUSH
53374: LD_INT 5
53376: PUSH
53377: LD_INT 7
53379: PUSH
53380: LD_INT 11
53382: PUSH
53383: LD_INT 12
53385: PUSH
53386: LD_INT 15
53388: PUSH
53389: LD_INT 16
53391: PUSH
53392: LD_INT 20
53394: PUSH
53395: LD_INT 21
53397: PUSH
53398: LD_INT 22
53400: PUSH
53401: LD_INT 23
53403: PUSH
53404: LD_INT 25
53406: PUSH
53407: LD_INT 26
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 101
53428: PUSH
53429: LD_INT 102
53431: PUSH
53432: LD_INT 103
53434: PUSH
53435: LD_INT 105
53437: PUSH
53438: LD_INT 106
53440: PUSH
53441: LD_INT 108
53443: PUSH
53444: LD_INT 112
53446: PUSH
53447: LD_INT 116
53449: PUSH
53450: LD_INT 117
53452: PUSH
53453: LD_INT 118
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: ST_TO_ADDR
53472: GO 55875
53474: LD_INT 8
53476: DOUBLE
53477: EQUAL
53478: IFTRUE 53482
53480: GO 53622
53482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53483: LD_ADDR_VAR 0 2
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 4
53493: PUSH
53494: LD_INT 5
53496: PUSH
53497: LD_INT 6
53499: PUSH
53500: LD_INT 7
53502: PUSH
53503: LD_INT 8
53505: PUSH
53506: LD_INT 11
53508: PUSH
53509: LD_INT 12
53511: PUSH
53512: LD_INT 15
53514: PUSH
53515: LD_INT 16
53517: PUSH
53518: LD_INT 20
53520: PUSH
53521: LD_INT 21
53523: PUSH
53524: LD_INT 22
53526: PUSH
53527: LD_INT 23
53529: PUSH
53530: LD_INT 25
53532: PUSH
53533: LD_INT 26
53535: PUSH
53536: LD_INT 30
53538: PUSH
53539: LD_INT 31
53541: PUSH
53542: LD_INT 32
53544: PUSH
53545: LD_INT 36
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 101
53572: PUSH
53573: LD_INT 102
53575: PUSH
53576: LD_INT 103
53578: PUSH
53579: LD_INT 105
53581: PUSH
53582: LD_INT 106
53584: PUSH
53585: LD_INT 108
53587: PUSH
53588: LD_INT 109
53590: PUSH
53591: LD_INT 112
53593: PUSH
53594: LD_INT 116
53596: PUSH
53597: LD_INT 117
53599: PUSH
53600: LD_INT 118
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: ST_TO_ADDR
53620: GO 55875
53622: LD_INT 9
53624: DOUBLE
53625: EQUAL
53626: IFTRUE 53630
53628: GO 53778
53630: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53631: LD_ADDR_VAR 0 2
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 4
53641: PUSH
53642: LD_INT 5
53644: PUSH
53645: LD_INT 6
53647: PUSH
53648: LD_INT 7
53650: PUSH
53651: LD_INT 8
53653: PUSH
53654: LD_INT 11
53656: PUSH
53657: LD_INT 12
53659: PUSH
53660: LD_INT 15
53662: PUSH
53663: LD_INT 16
53665: PUSH
53666: LD_INT 20
53668: PUSH
53669: LD_INT 21
53671: PUSH
53672: LD_INT 22
53674: PUSH
53675: LD_INT 23
53677: PUSH
53678: LD_INT 25
53680: PUSH
53681: LD_INT 26
53683: PUSH
53684: LD_INT 28
53686: PUSH
53687: LD_INT 30
53689: PUSH
53690: LD_INT 31
53692: PUSH
53693: LD_INT 32
53695: PUSH
53696: LD_INT 36
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 101
53724: PUSH
53725: LD_INT 102
53727: PUSH
53728: LD_INT 103
53730: PUSH
53731: LD_INT 105
53733: PUSH
53734: LD_INT 106
53736: PUSH
53737: LD_INT 108
53739: PUSH
53740: LD_INT 109
53742: PUSH
53743: LD_INT 112
53745: PUSH
53746: LD_INT 114
53748: PUSH
53749: LD_INT 116
53751: PUSH
53752: LD_INT 117
53754: PUSH
53755: LD_INT 118
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: ST_TO_ADDR
53776: GO 55875
53778: LD_INT 10
53780: DOUBLE
53781: EQUAL
53782: IFTRUE 53786
53784: GO 53982
53786: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53787: LD_ADDR_VAR 0 2
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 4
53797: PUSH
53798: LD_INT 5
53800: PUSH
53801: LD_INT 6
53803: PUSH
53804: LD_INT 7
53806: PUSH
53807: LD_INT 8
53809: PUSH
53810: LD_INT 9
53812: PUSH
53813: LD_INT 10
53815: PUSH
53816: LD_INT 11
53818: PUSH
53819: LD_INT 12
53821: PUSH
53822: LD_INT 13
53824: PUSH
53825: LD_INT 14
53827: PUSH
53828: LD_INT 15
53830: PUSH
53831: LD_INT 16
53833: PUSH
53834: LD_INT 17
53836: PUSH
53837: LD_INT 18
53839: PUSH
53840: LD_INT 19
53842: PUSH
53843: LD_INT 20
53845: PUSH
53846: LD_INT 21
53848: PUSH
53849: LD_INT 22
53851: PUSH
53852: LD_INT 23
53854: PUSH
53855: LD_INT 24
53857: PUSH
53858: LD_INT 25
53860: PUSH
53861: LD_INT 26
53863: PUSH
53864: LD_INT 28
53866: PUSH
53867: LD_INT 30
53869: PUSH
53870: LD_INT 31
53872: PUSH
53873: LD_INT 32
53875: PUSH
53876: LD_INT 36
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 101
53912: PUSH
53913: LD_INT 102
53915: PUSH
53916: LD_INT 103
53918: PUSH
53919: LD_INT 104
53921: PUSH
53922: LD_INT 105
53924: PUSH
53925: LD_INT 106
53927: PUSH
53928: LD_INT 107
53930: PUSH
53931: LD_INT 108
53933: PUSH
53934: LD_INT 109
53936: PUSH
53937: LD_INT 110
53939: PUSH
53940: LD_INT 111
53942: PUSH
53943: LD_INT 112
53945: PUSH
53946: LD_INT 114
53948: PUSH
53949: LD_INT 116
53951: PUSH
53952: LD_INT 117
53954: PUSH
53955: LD_INT 118
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: ST_TO_ADDR
53980: GO 55875
53982: LD_INT 11
53984: DOUBLE
53985: EQUAL
53986: IFTRUE 53990
53988: GO 54194
53990: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53991: LD_ADDR_VAR 0 2
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: LD_INT 4
54004: PUSH
54005: LD_INT 5
54007: PUSH
54008: LD_INT 6
54010: PUSH
54011: LD_INT 7
54013: PUSH
54014: LD_INT 8
54016: PUSH
54017: LD_INT 9
54019: PUSH
54020: LD_INT 10
54022: PUSH
54023: LD_INT 11
54025: PUSH
54026: LD_INT 12
54028: PUSH
54029: LD_INT 13
54031: PUSH
54032: LD_INT 14
54034: PUSH
54035: LD_INT 15
54037: PUSH
54038: LD_INT 16
54040: PUSH
54041: LD_INT 17
54043: PUSH
54044: LD_INT 18
54046: PUSH
54047: LD_INT 19
54049: PUSH
54050: LD_INT 20
54052: PUSH
54053: LD_INT 21
54055: PUSH
54056: LD_INT 22
54058: PUSH
54059: LD_INT 23
54061: PUSH
54062: LD_INT 24
54064: PUSH
54065: LD_INT 25
54067: PUSH
54068: LD_INT 26
54070: PUSH
54071: LD_INT 28
54073: PUSH
54074: LD_INT 30
54076: PUSH
54077: LD_INT 31
54079: PUSH
54080: LD_INT 32
54082: PUSH
54083: LD_INT 34
54085: PUSH
54086: LD_INT 36
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 101
54124: PUSH
54125: LD_INT 102
54127: PUSH
54128: LD_INT 103
54130: PUSH
54131: LD_INT 104
54133: PUSH
54134: LD_INT 105
54136: PUSH
54137: LD_INT 106
54139: PUSH
54140: LD_INT 107
54142: PUSH
54143: LD_INT 108
54145: PUSH
54146: LD_INT 109
54148: PUSH
54149: LD_INT 110
54151: PUSH
54152: LD_INT 111
54154: PUSH
54155: LD_INT 112
54157: PUSH
54158: LD_INT 114
54160: PUSH
54161: LD_INT 116
54163: PUSH
54164: LD_INT 117
54166: PUSH
54167: LD_INT 118
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: ST_TO_ADDR
54192: GO 55875
54194: LD_INT 12
54196: DOUBLE
54197: EQUAL
54198: IFTRUE 54202
54200: GO 54422
54202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54203: LD_ADDR_VAR 0 2
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: LD_INT 4
54219: PUSH
54220: LD_INT 5
54222: PUSH
54223: LD_INT 6
54225: PUSH
54226: LD_INT 7
54228: PUSH
54229: LD_INT 8
54231: PUSH
54232: LD_INT 9
54234: PUSH
54235: LD_INT 10
54237: PUSH
54238: LD_INT 11
54240: PUSH
54241: LD_INT 12
54243: PUSH
54244: LD_INT 13
54246: PUSH
54247: LD_INT 14
54249: PUSH
54250: LD_INT 15
54252: PUSH
54253: LD_INT 16
54255: PUSH
54256: LD_INT 17
54258: PUSH
54259: LD_INT 18
54261: PUSH
54262: LD_INT 19
54264: PUSH
54265: LD_INT 20
54267: PUSH
54268: LD_INT 21
54270: PUSH
54271: LD_INT 22
54273: PUSH
54274: LD_INT 23
54276: PUSH
54277: LD_INT 24
54279: PUSH
54280: LD_INT 25
54282: PUSH
54283: LD_INT 26
54285: PUSH
54286: LD_INT 27
54288: PUSH
54289: LD_INT 28
54291: PUSH
54292: LD_INT 30
54294: PUSH
54295: LD_INT 31
54297: PUSH
54298: LD_INT 32
54300: PUSH
54301: LD_INT 33
54303: PUSH
54304: LD_INT 34
54306: PUSH
54307: LD_INT 36
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 101
54348: PUSH
54349: LD_INT 102
54351: PUSH
54352: LD_INT 103
54354: PUSH
54355: LD_INT 104
54357: PUSH
54358: LD_INT 105
54360: PUSH
54361: LD_INT 106
54363: PUSH
54364: LD_INT 107
54366: PUSH
54367: LD_INT 108
54369: PUSH
54370: LD_INT 109
54372: PUSH
54373: LD_INT 110
54375: PUSH
54376: LD_INT 111
54378: PUSH
54379: LD_INT 112
54381: PUSH
54382: LD_INT 113
54384: PUSH
54385: LD_INT 114
54387: PUSH
54388: LD_INT 116
54390: PUSH
54391: LD_INT 117
54393: PUSH
54394: LD_INT 118
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: ST_TO_ADDR
54420: GO 55875
54422: LD_INT 13
54424: DOUBLE
54425: EQUAL
54426: IFTRUE 54430
54428: GO 54638
54430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54431: LD_ADDR_VAR 0 2
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 3
54444: PUSH
54445: LD_INT 4
54447: PUSH
54448: LD_INT 5
54450: PUSH
54451: LD_INT 8
54453: PUSH
54454: LD_INT 9
54456: PUSH
54457: LD_INT 10
54459: PUSH
54460: LD_INT 11
54462: PUSH
54463: LD_INT 12
54465: PUSH
54466: LD_INT 14
54468: PUSH
54469: LD_INT 15
54471: PUSH
54472: LD_INT 16
54474: PUSH
54475: LD_INT 17
54477: PUSH
54478: LD_INT 18
54480: PUSH
54481: LD_INT 19
54483: PUSH
54484: LD_INT 20
54486: PUSH
54487: LD_INT 21
54489: PUSH
54490: LD_INT 22
54492: PUSH
54493: LD_INT 23
54495: PUSH
54496: LD_INT 24
54498: PUSH
54499: LD_INT 25
54501: PUSH
54502: LD_INT 26
54504: PUSH
54505: LD_INT 27
54507: PUSH
54508: LD_INT 28
54510: PUSH
54511: LD_INT 30
54513: PUSH
54514: LD_INT 31
54516: PUSH
54517: LD_INT 32
54519: PUSH
54520: LD_INT 33
54522: PUSH
54523: LD_INT 34
54525: PUSH
54526: LD_INT 36
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 101
54564: PUSH
54565: LD_INT 102
54567: PUSH
54568: LD_INT 103
54570: PUSH
54571: LD_INT 104
54573: PUSH
54574: LD_INT 105
54576: PUSH
54577: LD_INT 106
54579: PUSH
54580: LD_INT 107
54582: PUSH
54583: LD_INT 108
54585: PUSH
54586: LD_INT 109
54588: PUSH
54589: LD_INT 110
54591: PUSH
54592: LD_INT 111
54594: PUSH
54595: LD_INT 112
54597: PUSH
54598: LD_INT 113
54600: PUSH
54601: LD_INT 114
54603: PUSH
54604: LD_INT 116
54606: PUSH
54607: LD_INT 117
54609: PUSH
54610: LD_INT 118
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: ST_TO_ADDR
54636: GO 55875
54638: LD_INT 14
54640: DOUBLE
54641: EQUAL
54642: IFTRUE 54646
54644: GO 54870
54646: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54647: LD_ADDR_VAR 0 2
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: LD_INT 4
54663: PUSH
54664: LD_INT 5
54666: PUSH
54667: LD_INT 6
54669: PUSH
54670: LD_INT 7
54672: PUSH
54673: LD_INT 8
54675: PUSH
54676: LD_INT 9
54678: PUSH
54679: LD_INT 10
54681: PUSH
54682: LD_INT 11
54684: PUSH
54685: LD_INT 12
54687: PUSH
54688: LD_INT 13
54690: PUSH
54691: LD_INT 14
54693: PUSH
54694: LD_INT 15
54696: PUSH
54697: LD_INT 16
54699: PUSH
54700: LD_INT 17
54702: PUSH
54703: LD_INT 18
54705: PUSH
54706: LD_INT 19
54708: PUSH
54709: LD_INT 20
54711: PUSH
54712: LD_INT 21
54714: PUSH
54715: LD_INT 22
54717: PUSH
54718: LD_INT 23
54720: PUSH
54721: LD_INT 24
54723: PUSH
54724: LD_INT 25
54726: PUSH
54727: LD_INT 26
54729: PUSH
54730: LD_INT 27
54732: PUSH
54733: LD_INT 28
54735: PUSH
54736: LD_INT 29
54738: PUSH
54739: LD_INT 30
54741: PUSH
54742: LD_INT 31
54744: PUSH
54745: LD_INT 32
54747: PUSH
54748: LD_INT 33
54750: PUSH
54751: LD_INT 34
54753: PUSH
54754: LD_INT 36
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 101
54796: PUSH
54797: LD_INT 102
54799: PUSH
54800: LD_INT 103
54802: PUSH
54803: LD_INT 104
54805: PUSH
54806: LD_INT 105
54808: PUSH
54809: LD_INT 106
54811: PUSH
54812: LD_INT 107
54814: PUSH
54815: LD_INT 108
54817: PUSH
54818: LD_INT 109
54820: PUSH
54821: LD_INT 110
54823: PUSH
54824: LD_INT 111
54826: PUSH
54827: LD_INT 112
54829: PUSH
54830: LD_INT 113
54832: PUSH
54833: LD_INT 114
54835: PUSH
54836: LD_INT 116
54838: PUSH
54839: LD_INT 117
54841: PUSH
54842: LD_INT 118
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: ST_TO_ADDR
54868: GO 55875
54870: LD_INT 15
54872: DOUBLE
54873: EQUAL
54874: IFTRUE 54878
54876: GO 55102
54878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54879: LD_ADDR_VAR 0 2
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 4
54895: PUSH
54896: LD_INT 5
54898: PUSH
54899: LD_INT 6
54901: PUSH
54902: LD_INT 7
54904: PUSH
54905: LD_INT 8
54907: PUSH
54908: LD_INT 9
54910: PUSH
54911: LD_INT 10
54913: PUSH
54914: LD_INT 11
54916: PUSH
54917: LD_INT 12
54919: PUSH
54920: LD_INT 13
54922: PUSH
54923: LD_INT 14
54925: PUSH
54926: LD_INT 15
54928: PUSH
54929: LD_INT 16
54931: PUSH
54932: LD_INT 17
54934: PUSH
54935: LD_INT 18
54937: PUSH
54938: LD_INT 19
54940: PUSH
54941: LD_INT 20
54943: PUSH
54944: LD_INT 21
54946: PUSH
54947: LD_INT 22
54949: PUSH
54950: LD_INT 23
54952: PUSH
54953: LD_INT 24
54955: PUSH
54956: LD_INT 25
54958: PUSH
54959: LD_INT 26
54961: PUSH
54962: LD_INT 27
54964: PUSH
54965: LD_INT 28
54967: PUSH
54968: LD_INT 29
54970: PUSH
54971: LD_INT 30
54973: PUSH
54974: LD_INT 31
54976: PUSH
54977: LD_INT 32
54979: PUSH
54980: LD_INT 33
54982: PUSH
54983: LD_INT 34
54985: PUSH
54986: LD_INT 36
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 101
55028: PUSH
55029: LD_INT 102
55031: PUSH
55032: LD_INT 103
55034: PUSH
55035: LD_INT 104
55037: PUSH
55038: LD_INT 105
55040: PUSH
55041: LD_INT 106
55043: PUSH
55044: LD_INT 107
55046: PUSH
55047: LD_INT 108
55049: PUSH
55050: LD_INT 109
55052: PUSH
55053: LD_INT 110
55055: PUSH
55056: LD_INT 111
55058: PUSH
55059: LD_INT 112
55061: PUSH
55062: LD_INT 113
55064: PUSH
55065: LD_INT 114
55067: PUSH
55068: LD_INT 116
55070: PUSH
55071: LD_INT 117
55073: PUSH
55074: LD_INT 118
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: ST_TO_ADDR
55100: GO 55875
55102: LD_INT 16
55104: DOUBLE
55105: EQUAL
55106: IFTRUE 55110
55108: GO 55246
55110: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55111: LD_ADDR_VAR 0 2
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 4
55121: PUSH
55122: LD_INT 5
55124: PUSH
55125: LD_INT 7
55127: PUSH
55128: LD_INT 11
55130: PUSH
55131: LD_INT 12
55133: PUSH
55134: LD_INT 15
55136: PUSH
55137: LD_INT 16
55139: PUSH
55140: LD_INT 20
55142: PUSH
55143: LD_INT 21
55145: PUSH
55146: LD_INT 22
55148: PUSH
55149: LD_INT 23
55151: PUSH
55152: LD_INT 25
55154: PUSH
55155: LD_INT 26
55157: PUSH
55158: LD_INT 30
55160: PUSH
55161: LD_INT 31
55163: PUSH
55164: LD_INT 32
55166: PUSH
55167: LD_INT 33
55169: PUSH
55170: LD_INT 34
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 101
55196: PUSH
55197: LD_INT 102
55199: PUSH
55200: LD_INT 103
55202: PUSH
55203: LD_INT 106
55205: PUSH
55206: LD_INT 108
55208: PUSH
55209: LD_INT 112
55211: PUSH
55212: LD_INT 113
55214: PUSH
55215: LD_INT 114
55217: PUSH
55218: LD_INT 116
55220: PUSH
55221: LD_INT 117
55223: PUSH
55224: LD_INT 118
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: ST_TO_ADDR
55244: GO 55875
55246: LD_INT 17
55248: DOUBLE
55249: EQUAL
55250: IFTRUE 55254
55252: GO 55478
55254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55255: LD_ADDR_VAR 0 2
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 4
55271: PUSH
55272: LD_INT 5
55274: PUSH
55275: LD_INT 6
55277: PUSH
55278: LD_INT 7
55280: PUSH
55281: LD_INT 8
55283: PUSH
55284: LD_INT 9
55286: PUSH
55287: LD_INT 10
55289: PUSH
55290: LD_INT 11
55292: PUSH
55293: LD_INT 12
55295: PUSH
55296: LD_INT 13
55298: PUSH
55299: LD_INT 14
55301: PUSH
55302: LD_INT 15
55304: PUSH
55305: LD_INT 16
55307: PUSH
55308: LD_INT 17
55310: PUSH
55311: LD_INT 18
55313: PUSH
55314: LD_INT 19
55316: PUSH
55317: LD_INT 20
55319: PUSH
55320: LD_INT 21
55322: PUSH
55323: LD_INT 22
55325: PUSH
55326: LD_INT 23
55328: PUSH
55329: LD_INT 24
55331: PUSH
55332: LD_INT 25
55334: PUSH
55335: LD_INT 26
55337: PUSH
55338: LD_INT 27
55340: PUSH
55341: LD_INT 28
55343: PUSH
55344: LD_INT 29
55346: PUSH
55347: LD_INT 30
55349: PUSH
55350: LD_INT 31
55352: PUSH
55353: LD_INT 32
55355: PUSH
55356: LD_INT 33
55358: PUSH
55359: LD_INT 34
55361: PUSH
55362: LD_INT 36
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 101
55404: PUSH
55405: LD_INT 102
55407: PUSH
55408: LD_INT 103
55410: PUSH
55411: LD_INT 104
55413: PUSH
55414: LD_INT 105
55416: PUSH
55417: LD_INT 106
55419: PUSH
55420: LD_INT 107
55422: PUSH
55423: LD_INT 108
55425: PUSH
55426: LD_INT 109
55428: PUSH
55429: LD_INT 110
55431: PUSH
55432: LD_INT 111
55434: PUSH
55435: LD_INT 112
55437: PUSH
55438: LD_INT 113
55440: PUSH
55441: LD_INT 114
55443: PUSH
55444: LD_INT 116
55446: PUSH
55447: LD_INT 117
55449: PUSH
55450: LD_INT 118
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: ST_TO_ADDR
55476: GO 55875
55478: LD_INT 18
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55486
55484: GO 55634
55486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55487: LD_ADDR_VAR 0 2
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 4
55497: PUSH
55498: LD_INT 5
55500: PUSH
55501: LD_INT 7
55503: PUSH
55504: LD_INT 11
55506: PUSH
55507: LD_INT 12
55509: PUSH
55510: LD_INT 15
55512: PUSH
55513: LD_INT 16
55515: PUSH
55516: LD_INT 20
55518: PUSH
55519: LD_INT 21
55521: PUSH
55522: LD_INT 22
55524: PUSH
55525: LD_INT 23
55527: PUSH
55528: LD_INT 25
55530: PUSH
55531: LD_INT 26
55533: PUSH
55534: LD_INT 30
55536: PUSH
55537: LD_INT 31
55539: PUSH
55540: LD_INT 32
55542: PUSH
55543: LD_INT 33
55545: PUSH
55546: LD_INT 34
55548: PUSH
55549: LD_INT 35
55551: PUSH
55552: LD_INT 36
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 101
55580: PUSH
55581: LD_INT 102
55583: PUSH
55584: LD_INT 103
55586: PUSH
55587: LD_INT 106
55589: PUSH
55590: LD_INT 108
55592: PUSH
55593: LD_INT 112
55595: PUSH
55596: LD_INT 113
55598: PUSH
55599: LD_INT 114
55601: PUSH
55602: LD_INT 115
55604: PUSH
55605: LD_INT 116
55607: PUSH
55608: LD_INT 117
55610: PUSH
55611: LD_INT 118
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: ST_TO_ADDR
55632: GO 55875
55634: LD_INT 19
55636: DOUBLE
55637: EQUAL
55638: IFTRUE 55642
55640: GO 55874
55642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55643: LD_ADDR_VAR 0 2
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 4
55659: PUSH
55660: LD_INT 5
55662: PUSH
55663: LD_INT 6
55665: PUSH
55666: LD_INT 7
55668: PUSH
55669: LD_INT 8
55671: PUSH
55672: LD_INT 9
55674: PUSH
55675: LD_INT 10
55677: PUSH
55678: LD_INT 11
55680: PUSH
55681: LD_INT 12
55683: PUSH
55684: LD_INT 13
55686: PUSH
55687: LD_INT 14
55689: PUSH
55690: LD_INT 15
55692: PUSH
55693: LD_INT 16
55695: PUSH
55696: LD_INT 17
55698: PUSH
55699: LD_INT 18
55701: PUSH
55702: LD_INT 19
55704: PUSH
55705: LD_INT 20
55707: PUSH
55708: LD_INT 21
55710: PUSH
55711: LD_INT 22
55713: PUSH
55714: LD_INT 23
55716: PUSH
55717: LD_INT 24
55719: PUSH
55720: LD_INT 25
55722: PUSH
55723: LD_INT 26
55725: PUSH
55726: LD_INT 27
55728: PUSH
55729: LD_INT 28
55731: PUSH
55732: LD_INT 29
55734: PUSH
55735: LD_INT 30
55737: PUSH
55738: LD_INT 31
55740: PUSH
55741: LD_INT 32
55743: PUSH
55744: LD_INT 33
55746: PUSH
55747: LD_INT 34
55749: PUSH
55750: LD_INT 35
55752: PUSH
55753: LD_INT 36
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 101
55796: PUSH
55797: LD_INT 102
55799: PUSH
55800: LD_INT 103
55802: PUSH
55803: LD_INT 104
55805: PUSH
55806: LD_INT 105
55808: PUSH
55809: LD_INT 106
55811: PUSH
55812: LD_INT 107
55814: PUSH
55815: LD_INT 108
55817: PUSH
55818: LD_INT 109
55820: PUSH
55821: LD_INT 110
55823: PUSH
55824: LD_INT 111
55826: PUSH
55827: LD_INT 112
55829: PUSH
55830: LD_INT 113
55832: PUSH
55833: LD_INT 114
55835: PUSH
55836: LD_INT 115
55838: PUSH
55839: LD_INT 116
55841: PUSH
55842: LD_INT 117
55844: PUSH
55845: LD_INT 118
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: ST_TO_ADDR
55872: GO 55875
55874: POP
// end else
55875: GO 56106
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55877: LD_ADDR_VAR 0 2
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: LD_INT 4
55893: PUSH
55894: LD_INT 5
55896: PUSH
55897: LD_INT 6
55899: PUSH
55900: LD_INT 7
55902: PUSH
55903: LD_INT 8
55905: PUSH
55906: LD_INT 9
55908: PUSH
55909: LD_INT 10
55911: PUSH
55912: LD_INT 11
55914: PUSH
55915: LD_INT 12
55917: PUSH
55918: LD_INT 13
55920: PUSH
55921: LD_INT 14
55923: PUSH
55924: LD_INT 15
55926: PUSH
55927: LD_INT 16
55929: PUSH
55930: LD_INT 17
55932: PUSH
55933: LD_INT 18
55935: PUSH
55936: LD_INT 19
55938: PUSH
55939: LD_INT 20
55941: PUSH
55942: LD_INT 21
55944: PUSH
55945: LD_INT 22
55947: PUSH
55948: LD_INT 23
55950: PUSH
55951: LD_INT 24
55953: PUSH
55954: LD_INT 25
55956: PUSH
55957: LD_INT 26
55959: PUSH
55960: LD_INT 27
55962: PUSH
55963: LD_INT 28
55965: PUSH
55966: LD_INT 29
55968: PUSH
55969: LD_INT 30
55971: PUSH
55972: LD_INT 31
55974: PUSH
55975: LD_INT 32
55977: PUSH
55978: LD_INT 33
55980: PUSH
55981: LD_INT 34
55983: PUSH
55984: LD_INT 35
55986: PUSH
55987: LD_INT 36
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 101
56030: PUSH
56031: LD_INT 102
56033: PUSH
56034: LD_INT 103
56036: PUSH
56037: LD_INT 104
56039: PUSH
56040: LD_INT 105
56042: PUSH
56043: LD_INT 106
56045: PUSH
56046: LD_INT 107
56048: PUSH
56049: LD_INT 108
56051: PUSH
56052: LD_INT 109
56054: PUSH
56055: LD_INT 110
56057: PUSH
56058: LD_INT 111
56060: PUSH
56061: LD_INT 112
56063: PUSH
56064: LD_INT 113
56066: PUSH
56067: LD_INT 114
56069: PUSH
56070: LD_INT 115
56072: PUSH
56073: LD_INT 116
56075: PUSH
56076: LD_INT 117
56078: PUSH
56079: LD_INT 118
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// if result then
56106: LD_VAR 0 2
56110: IFFALSE 56896
// begin normal :=  ;
56112: LD_ADDR_VAR 0 5
56116: PUSH
56117: LD_STRING 
56119: ST_TO_ADDR
// hardcore :=  ;
56120: LD_ADDR_VAR 0 6
56124: PUSH
56125: LD_STRING 
56127: ST_TO_ADDR
// active :=  ;
56128: LD_ADDR_VAR 0 7
56132: PUSH
56133: LD_STRING 
56135: ST_TO_ADDR
// for i = 1 to normalCounter do
56136: LD_ADDR_VAR 0 8
56140: PUSH
56141: DOUBLE
56142: LD_INT 1
56144: DEC
56145: ST_TO_ADDR
56146: LD_EXP 14
56150: PUSH
56151: FOR_TO
56152: IFFALSE 56253
// begin tmp := 0 ;
56154: LD_ADDR_VAR 0 3
56158: PUSH
56159: LD_STRING 0
56161: ST_TO_ADDR
// if result [ 1 ] then
56162: LD_VAR 0 2
56166: PUSH
56167: LD_INT 1
56169: ARRAY
56170: IFFALSE 56235
// if result [ 1 ] [ 1 ] = i then
56172: LD_VAR 0 2
56176: PUSH
56177: LD_INT 1
56179: ARRAY
56180: PUSH
56181: LD_INT 1
56183: ARRAY
56184: PUSH
56185: LD_VAR 0 8
56189: EQUAL
56190: IFFALSE 56235
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56192: LD_ADDR_VAR 0 2
56196: PUSH
56197: LD_VAR 0 2
56201: PPUSH
56202: LD_INT 1
56204: PPUSH
56205: LD_VAR 0 2
56209: PUSH
56210: LD_INT 1
56212: ARRAY
56213: PPUSH
56214: LD_INT 1
56216: PPUSH
56217: CALL_OW 3
56221: PPUSH
56222: CALL_OW 1
56226: ST_TO_ADDR
// tmp := 1 ;
56227: LD_ADDR_VAR 0 3
56231: PUSH
56232: LD_STRING 1
56234: ST_TO_ADDR
// end ; normal := normal & tmp ;
56235: LD_ADDR_VAR 0 5
56239: PUSH
56240: LD_VAR 0 5
56244: PUSH
56245: LD_VAR 0 3
56249: STR
56250: ST_TO_ADDR
// end ;
56251: GO 56151
56253: POP
56254: POP
// for i = 1 to hardcoreCounter do
56255: LD_ADDR_VAR 0 8
56259: PUSH
56260: DOUBLE
56261: LD_INT 1
56263: DEC
56264: ST_TO_ADDR
56265: LD_EXP 15
56269: PUSH
56270: FOR_TO
56271: IFFALSE 56376
// begin tmp := 0 ;
56273: LD_ADDR_VAR 0 3
56277: PUSH
56278: LD_STRING 0
56280: ST_TO_ADDR
// if result [ 2 ] then
56281: LD_VAR 0 2
56285: PUSH
56286: LD_INT 2
56288: ARRAY
56289: IFFALSE 56358
// if result [ 2 ] [ 1 ] = 100 + i then
56291: LD_VAR 0 2
56295: PUSH
56296: LD_INT 2
56298: ARRAY
56299: PUSH
56300: LD_INT 1
56302: ARRAY
56303: PUSH
56304: LD_INT 100
56306: PUSH
56307: LD_VAR 0 8
56311: PLUS
56312: EQUAL
56313: IFFALSE 56358
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56315: LD_ADDR_VAR 0 2
56319: PUSH
56320: LD_VAR 0 2
56324: PPUSH
56325: LD_INT 2
56327: PPUSH
56328: LD_VAR 0 2
56332: PUSH
56333: LD_INT 2
56335: ARRAY
56336: PPUSH
56337: LD_INT 1
56339: PPUSH
56340: CALL_OW 3
56344: PPUSH
56345: CALL_OW 1
56349: ST_TO_ADDR
// tmp := 1 ;
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: LD_STRING 1
56357: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56358: LD_ADDR_VAR 0 6
56362: PUSH
56363: LD_VAR 0 6
56367: PUSH
56368: LD_VAR 0 3
56372: STR
56373: ST_TO_ADDR
// end ;
56374: GO 56270
56376: POP
56377: POP
// if isGameLoad then
56378: LD_VAR 0 1
56382: IFFALSE 56857
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56384: LD_ADDR_VAR 0 4
56388: PUSH
56389: LD_EXP 18
56393: PUSH
56394: LD_EXP 17
56398: PUSH
56399: LD_EXP 19
56403: PUSH
56404: LD_EXP 16
56408: PUSH
56409: LD_EXP 20
56413: PUSH
56414: LD_EXP 21
56418: PUSH
56419: LD_EXP 22
56423: PUSH
56424: LD_EXP 23
56428: PUSH
56429: LD_EXP 24
56433: PUSH
56434: LD_EXP 25
56438: PUSH
56439: LD_EXP 26
56443: PUSH
56444: LD_EXP 27
56448: PUSH
56449: LD_EXP 28
56453: PUSH
56454: LD_EXP 29
56458: PUSH
56459: LD_EXP 37
56463: PUSH
56464: LD_EXP 38
56468: PUSH
56469: LD_EXP 39
56473: PUSH
56474: LD_EXP 40
56478: PUSH
56479: LD_EXP 42
56483: PUSH
56484: LD_EXP 43
56488: PUSH
56489: LD_EXP 44
56493: PUSH
56494: LD_EXP 47
56498: PUSH
56499: LD_EXP 49
56503: PUSH
56504: LD_EXP 50
56508: PUSH
56509: LD_EXP 51
56513: PUSH
56514: LD_EXP 53
56518: PUSH
56519: LD_EXP 54
56523: PUSH
56524: LD_EXP 57
56528: PUSH
56529: LD_EXP 58
56533: PUSH
56534: LD_EXP 59
56538: PUSH
56539: LD_EXP 60
56543: PUSH
56544: LD_EXP 61
56548: PUSH
56549: LD_EXP 62
56553: PUSH
56554: LD_EXP 63
56558: PUSH
56559: LD_EXP 64
56563: PUSH
56564: LD_EXP 65
56568: PUSH
56569: LD_EXP 30
56573: PUSH
56574: LD_EXP 31
56578: PUSH
56579: LD_EXP 34
56583: PUSH
56584: LD_EXP 35
56588: PUSH
56589: LD_EXP 36
56593: PUSH
56594: LD_EXP 32
56598: PUSH
56599: LD_EXP 33
56603: PUSH
56604: LD_EXP 41
56608: PUSH
56609: LD_EXP 45
56613: PUSH
56614: LD_EXP 46
56618: PUSH
56619: LD_EXP 48
56623: PUSH
56624: LD_EXP 52
56628: PUSH
56629: LD_EXP 55
56633: PUSH
56634: LD_EXP 56
56638: PUSH
56639: LD_EXP 66
56643: PUSH
56644: LD_EXP 67
56648: PUSH
56649: LD_EXP 68
56653: PUSH
56654: LD_EXP 69
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// tmp :=  ;
56715: LD_ADDR_VAR 0 3
56719: PUSH
56720: LD_STRING 
56722: ST_TO_ADDR
// for i = 1 to normalCounter do
56723: LD_ADDR_VAR 0 8
56727: PUSH
56728: DOUBLE
56729: LD_INT 1
56731: DEC
56732: ST_TO_ADDR
56733: LD_EXP 14
56737: PUSH
56738: FOR_TO
56739: IFFALSE 56775
// begin if flags [ i ] then
56741: LD_VAR 0 4
56745: PUSH
56746: LD_VAR 0 8
56750: ARRAY
56751: IFFALSE 56773
// tmp := tmp & i & ; ;
56753: LD_ADDR_VAR 0 3
56757: PUSH
56758: LD_VAR 0 3
56762: PUSH
56763: LD_VAR 0 8
56767: STR
56768: PUSH
56769: LD_STRING ;
56771: STR
56772: ST_TO_ADDR
// end ;
56773: GO 56738
56775: POP
56776: POP
// for i = 1 to hardcoreCounter do
56777: LD_ADDR_VAR 0 8
56781: PUSH
56782: DOUBLE
56783: LD_INT 1
56785: DEC
56786: ST_TO_ADDR
56787: LD_EXP 15
56791: PUSH
56792: FOR_TO
56793: IFFALSE 56839
// begin if flags [ normalCounter + i ] then
56795: LD_VAR 0 4
56799: PUSH
56800: LD_EXP 14
56804: PUSH
56805: LD_VAR 0 8
56809: PLUS
56810: ARRAY
56811: IFFALSE 56837
// tmp := tmp & ( 100 + i ) & ; ;
56813: LD_ADDR_VAR 0 3
56817: PUSH
56818: LD_VAR 0 3
56822: PUSH
56823: LD_INT 100
56825: PUSH
56826: LD_VAR 0 8
56830: PLUS
56831: STR
56832: PUSH
56833: LD_STRING ;
56835: STR
56836: ST_TO_ADDR
// end ;
56837: GO 56792
56839: POP
56840: POP
// if tmp then
56841: LD_VAR 0 3
56845: IFFALSE 56857
// active := tmp ;
56847: LD_ADDR_VAR 0 7
56851: PUSH
56852: LD_VAR 0 3
56856: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56857: LD_STRING getStreamItemsFromMission("
56859: PUSH
56860: LD_VAR 0 5
56864: STR
56865: PUSH
56866: LD_STRING ","
56868: STR
56869: PUSH
56870: LD_VAR 0 6
56874: STR
56875: PUSH
56876: LD_STRING ","
56878: STR
56879: PUSH
56880: LD_VAR 0 7
56884: STR
56885: PUSH
56886: LD_STRING ")
56888: STR
56889: PPUSH
56890: CALL_OW 559
// end else
56894: GO 56903
// ToLua ( getStreamItemsFromMission("","","") ) ;
56896: LD_STRING getStreamItemsFromMission("","","")
56898: PPUSH
56899: CALL_OW 559
// end ;
56903: LD_VAR 0 2
56907: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56908: LD_EXP 13
56912: IFFALSE 56920
56914: PUSH
56915: LD_EXP 18
56919: AND
56920: IFFALSE 57044
56922: GO 56924
56924: DISABLE
56925: LD_INT 0
56927: PPUSH
56928: PPUSH
// begin enable ;
56929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56930: LD_ADDR_VAR 0 2
56934: PUSH
56935: LD_INT 22
56937: PUSH
56938: LD_OWVAR 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 34
56952: PUSH
56953: LD_INT 7
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 34
56962: PUSH
56963: LD_INT 45
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 34
56972: PUSH
56973: LD_INT 28
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 34
56982: PUSH
56983: LD_INT 47
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PPUSH
57001: CALL_OW 69
57005: ST_TO_ADDR
// if not tmp then
57006: LD_VAR 0 2
57010: NOT
57011: IFFALSE 57015
// exit ;
57013: GO 57044
// for i in tmp do
57015: LD_ADDR_VAR 0 1
57019: PUSH
57020: LD_VAR 0 2
57024: PUSH
57025: FOR_IN
57026: IFFALSE 57042
// begin SetLives ( i , 0 ) ;
57028: LD_VAR 0 1
57032: PPUSH
57033: LD_INT 0
57035: PPUSH
57036: CALL_OW 234
// end ;
57040: GO 57025
57042: POP
57043: POP
// end ;
57044: PPOPN 2
57046: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57047: LD_EXP 13
57051: IFFALSE 57059
57053: PUSH
57054: LD_EXP 19
57058: AND
57059: IFFALSE 57143
57061: GO 57063
57063: DISABLE
57064: LD_INT 0
57066: PPUSH
57067: PPUSH
// begin enable ;
57068: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57069: LD_ADDR_VAR 0 2
57073: PUSH
57074: LD_INT 22
57076: PUSH
57077: LD_OWVAR 2
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 32
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PPUSH
57100: CALL_OW 69
57104: ST_TO_ADDR
// if not tmp then
57105: LD_VAR 0 2
57109: NOT
57110: IFFALSE 57114
// exit ;
57112: GO 57143
// for i in tmp do
57114: LD_ADDR_VAR 0 1
57118: PUSH
57119: LD_VAR 0 2
57123: PUSH
57124: FOR_IN
57125: IFFALSE 57141
// begin SetLives ( i , 0 ) ;
57127: LD_VAR 0 1
57131: PPUSH
57132: LD_INT 0
57134: PPUSH
57135: CALL_OW 234
// end ;
57139: GO 57124
57141: POP
57142: POP
// end ;
57143: PPOPN 2
57145: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57146: LD_EXP 13
57150: IFFALSE 57158
57152: PUSH
57153: LD_EXP 16
57157: AND
57158: IFFALSE 57251
57160: GO 57162
57162: DISABLE
57163: LD_INT 0
57165: PPUSH
// begin enable ;
57166: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57167: LD_ADDR_VAR 0 1
57171: PUSH
57172: LD_INT 22
57174: PUSH
57175: LD_OWVAR 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 25
57189: PUSH
57190: LD_INT 5
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 25
57199: PUSH
57200: LD_INT 9
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 25
57209: PUSH
57210: LD_INT 8
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PPUSH
57227: CALL_OW 69
57231: PUSH
57232: FOR_IN
57233: IFFALSE 57249
// begin SetClass ( i , 1 ) ;
57235: LD_VAR 0 1
57239: PPUSH
57240: LD_INT 1
57242: PPUSH
57243: CALL_OW 336
// end ;
57247: GO 57232
57249: POP
57250: POP
// end ;
57251: PPOPN 1
57253: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57254: LD_EXP 13
57258: IFFALSE 57266
57260: PUSH
57261: LD_EXP 17
57265: AND
57266: IFFALSE 57278
57268: PUSH
57269: LD_OWVAR 65
57273: PUSH
57274: LD_INT 7
57276: LESS
57277: AND
57278: IFFALSE 57292
57280: GO 57282
57282: DISABLE
// begin enable ;
57283: ENABLE
// game_speed := 7 ;
57284: LD_ADDR_OWVAR 65
57288: PUSH
57289: LD_INT 7
57291: ST_TO_ADDR
// end ;
57292: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57293: LD_EXP 13
57297: IFFALSE 57305
57299: PUSH
57300: LD_EXP 20
57304: AND
57305: IFFALSE 57507
57307: GO 57309
57309: DISABLE
57310: LD_INT 0
57312: PPUSH
57313: PPUSH
57314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57315: LD_ADDR_VAR 0 3
57319: PUSH
57320: LD_INT 81
57322: PUSH
57323: LD_OWVAR 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 21
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PPUSH
57346: CALL_OW 69
57350: ST_TO_ADDR
// if not tmp then
57351: LD_VAR 0 3
57355: NOT
57356: IFFALSE 57360
// exit ;
57358: GO 57507
// if tmp > 5 then
57360: LD_VAR 0 3
57364: PUSH
57365: LD_INT 5
57367: GREATER
57368: IFFALSE 57380
// k := 5 else
57370: LD_ADDR_VAR 0 2
57374: PUSH
57375: LD_INT 5
57377: ST_TO_ADDR
57378: GO 57390
// k := tmp ;
57380: LD_ADDR_VAR 0 2
57384: PUSH
57385: LD_VAR 0 3
57389: ST_TO_ADDR
// for i := 1 to k do
57390: LD_ADDR_VAR 0 1
57394: PUSH
57395: DOUBLE
57396: LD_INT 1
57398: DEC
57399: ST_TO_ADDR
57400: LD_VAR 0 2
57404: PUSH
57405: FOR_TO
57406: IFFALSE 57505
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57408: LD_VAR 0 3
57412: PUSH
57413: LD_VAR 0 1
57417: ARRAY
57418: PPUSH
57419: LD_VAR 0 1
57423: PUSH
57424: LD_INT 4
57426: MOD
57427: PUSH
57428: LD_INT 1
57430: PLUS
57431: PPUSH
57432: CALL_OW 259
57436: PUSH
57437: LD_INT 10
57439: LESS
57440: IFFALSE 57503
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57442: LD_VAR 0 3
57446: PUSH
57447: LD_VAR 0 1
57451: ARRAY
57452: PPUSH
57453: LD_VAR 0 1
57457: PUSH
57458: LD_INT 4
57460: MOD
57461: PUSH
57462: LD_INT 1
57464: PLUS
57465: PPUSH
57466: LD_VAR 0 3
57470: PUSH
57471: LD_VAR 0 1
57475: ARRAY
57476: PPUSH
57477: LD_VAR 0 1
57481: PUSH
57482: LD_INT 4
57484: MOD
57485: PUSH
57486: LD_INT 1
57488: PLUS
57489: PPUSH
57490: CALL_OW 259
57494: PUSH
57495: LD_INT 1
57497: PLUS
57498: PPUSH
57499: CALL_OW 237
57503: GO 57405
57505: POP
57506: POP
// end ;
57507: PPOPN 3
57509: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57510: LD_EXP 13
57514: IFFALSE 57522
57516: PUSH
57517: LD_EXP 21
57521: AND
57522: IFFALSE 57542
57524: GO 57526
57526: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57527: LD_INT 4
57529: PPUSH
57530: LD_OWVAR 2
57534: PPUSH
57535: LD_INT 0
57537: PPUSH
57538: CALL_OW 324
57542: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57543: LD_EXP 13
57547: IFFALSE 57555
57549: PUSH
57550: LD_EXP 50
57554: AND
57555: IFFALSE 57575
57557: GO 57559
57559: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57560: LD_INT 19
57562: PPUSH
57563: LD_OWVAR 2
57567: PPUSH
57568: LD_INT 0
57570: PPUSH
57571: CALL_OW 324
57575: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57576: LD_EXP 13
57580: IFFALSE 57588
57582: PUSH
57583: LD_EXP 22
57587: AND
57588: IFFALSE 57690
57590: GO 57592
57592: DISABLE
57593: LD_INT 0
57595: PPUSH
57596: PPUSH
// begin enable ;
57597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57598: LD_ADDR_VAR 0 2
57602: PUSH
57603: LD_INT 22
57605: PUSH
57606: LD_OWVAR 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 34
57620: PUSH
57621: LD_INT 11
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 34
57630: PUSH
57631: LD_INT 30
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PPUSH
57647: CALL_OW 69
57651: ST_TO_ADDR
// if not tmp then
57652: LD_VAR 0 2
57656: NOT
57657: IFFALSE 57661
// exit ;
57659: GO 57690
// for i in tmp do
57661: LD_ADDR_VAR 0 1
57665: PUSH
57666: LD_VAR 0 2
57670: PUSH
57671: FOR_IN
57672: IFFALSE 57688
// begin SetLives ( i , 0 ) ;
57674: LD_VAR 0 1
57678: PPUSH
57679: LD_INT 0
57681: PPUSH
57682: CALL_OW 234
// end ;
57686: GO 57671
57688: POP
57689: POP
// end ;
57690: PPOPN 2
57692: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57693: LD_EXP 13
57697: IFFALSE 57705
57699: PUSH
57700: LD_EXP 23
57704: AND
57705: IFFALSE 57725
57707: GO 57709
57709: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57710: LD_INT 32
57712: PPUSH
57713: LD_OWVAR 2
57717: PPUSH
57718: LD_INT 0
57720: PPUSH
57721: CALL_OW 324
57725: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57726: LD_EXP 13
57730: IFFALSE 57738
57732: PUSH
57733: LD_EXP 24
57737: AND
57738: IFFALSE 57921
57740: GO 57742
57742: DISABLE
57743: LD_INT 0
57745: PPUSH
57746: PPUSH
57747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57748: LD_ADDR_VAR 0 2
57752: PUSH
57753: LD_INT 22
57755: PUSH
57756: LD_OWVAR 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 33
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PPUSH
57779: CALL_OW 69
57783: ST_TO_ADDR
// if not tmp then
57784: LD_VAR 0 2
57788: NOT
57789: IFFALSE 57793
// exit ;
57791: GO 57921
// side := 0 ;
57793: LD_ADDR_VAR 0 3
57797: PUSH
57798: LD_INT 0
57800: ST_TO_ADDR
// for i := 1 to 8 do
57801: LD_ADDR_VAR 0 1
57805: PUSH
57806: DOUBLE
57807: LD_INT 1
57809: DEC
57810: ST_TO_ADDR
57811: LD_INT 8
57813: PUSH
57814: FOR_TO
57815: IFFALSE 57865
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57817: LD_OWVAR 2
57821: PUSH
57822: LD_VAR 0 1
57826: NONEQUAL
57827: IFFALSE 57849
57829: PUSH
57830: LD_OWVAR 2
57834: PPUSH
57835: LD_VAR 0 1
57839: PPUSH
57840: CALL_OW 81
57844: PUSH
57845: LD_INT 2
57847: EQUAL
57848: AND
57849: IFFALSE 57863
// begin side := i ;
57851: LD_ADDR_VAR 0 3
57855: PUSH
57856: LD_VAR 0 1
57860: ST_TO_ADDR
// break ;
57861: GO 57865
// end ;
57863: GO 57814
57865: POP
57866: POP
// if not side then
57867: LD_VAR 0 3
57871: NOT
57872: IFFALSE 57876
// exit ;
57874: GO 57921
// for i := 1 to tmp do
57876: LD_ADDR_VAR 0 1
57880: PUSH
57881: DOUBLE
57882: LD_INT 1
57884: DEC
57885: ST_TO_ADDR
57886: LD_VAR 0 2
57890: PUSH
57891: FOR_TO
57892: IFFALSE 57919
// if Prob ( 60 ) then
57894: LD_INT 60
57896: PPUSH
57897: CALL_OW 13
57901: IFFALSE 57917
// SetSide ( i , side ) ;
57903: LD_VAR 0 1
57907: PPUSH
57908: LD_VAR 0 3
57912: PPUSH
57913: CALL_OW 235
57917: GO 57891
57919: POP
57920: POP
// end ;
57921: PPOPN 3
57923: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57924: LD_EXP 13
57928: IFFALSE 57936
57930: PUSH
57931: LD_EXP 26
57935: AND
57936: IFFALSE 58055
57938: GO 57940
57940: DISABLE
57941: LD_INT 0
57943: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57944: LD_ADDR_VAR 0 1
57948: PUSH
57949: LD_INT 22
57951: PUSH
57952: LD_OWVAR 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 21
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: LD_INT 23
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: PPUSH
57993: CALL_OW 69
57997: PUSH
57998: FOR_IN
57999: IFFALSE 58053
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58001: LD_VAR 0 1
58005: PPUSH
58006: CALL_OW 257
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: LD_INT 4
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: IN
58029: IFFALSE 58051
// SetClass ( un , rand ( 1 , 4 ) ) ;
58031: LD_VAR 0 1
58035: PPUSH
58036: LD_INT 1
58038: PPUSH
58039: LD_INT 4
58041: PPUSH
58042: CALL_OW 12
58046: PPUSH
58047: CALL_OW 336
58051: GO 57998
58053: POP
58054: POP
// end ;
58055: PPOPN 1
58057: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58058: LD_EXP 13
58062: IFFALSE 58070
58064: PUSH
58065: LD_EXP 25
58069: AND
58070: IFFALSE 58149
58072: GO 58074
58074: DISABLE
58075: LD_INT 0
58077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58078: LD_ADDR_VAR 0 1
58082: PUSH
58083: LD_INT 22
58085: PUSH
58086: LD_OWVAR 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 21
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PPUSH
58109: CALL_OW 69
58113: ST_TO_ADDR
// if not tmp then
58114: LD_VAR 0 1
58118: NOT
58119: IFFALSE 58123
// exit ;
58121: GO 58149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58123: LD_VAR 0 1
58127: PUSH
58128: LD_INT 1
58130: PPUSH
58131: LD_VAR 0 1
58135: PPUSH
58136: CALL_OW 12
58140: ARRAY
58141: PPUSH
58142: LD_INT 100
58144: PPUSH
58145: CALL_OW 234
// end ;
58149: PPOPN 1
58151: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58152: LD_EXP 13
58156: IFFALSE 58164
58158: PUSH
58159: LD_EXP 27
58163: AND
58164: IFFALSE 58262
58166: GO 58168
58168: DISABLE
58169: LD_INT 0
58171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58172: LD_ADDR_VAR 0 1
58176: PUSH
58177: LD_INT 22
58179: PUSH
58180: LD_OWVAR 2
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 21
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PPUSH
58203: CALL_OW 69
58207: ST_TO_ADDR
// if not tmp then
58208: LD_VAR 0 1
58212: NOT
58213: IFFALSE 58217
// exit ;
58215: GO 58262
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58217: LD_VAR 0 1
58221: PUSH
58222: LD_INT 1
58224: PPUSH
58225: LD_VAR 0 1
58229: PPUSH
58230: CALL_OW 12
58234: ARRAY
58235: PPUSH
58236: LD_INT 1
58238: PPUSH
58239: LD_INT 4
58241: PPUSH
58242: CALL_OW 12
58246: PPUSH
58247: LD_INT 3000
58249: PPUSH
58250: LD_INT 9000
58252: PPUSH
58253: CALL_OW 12
58257: PPUSH
58258: CALL_OW 492
// end ;
58262: PPOPN 1
58264: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58265: LD_EXP 13
58269: IFFALSE 58277
58271: PUSH
58272: LD_EXP 28
58276: AND
58277: IFFALSE 58297
58279: GO 58281
58281: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58282: LD_INT 1
58284: PPUSH
58285: LD_OWVAR 2
58289: PPUSH
58290: LD_INT 0
58292: PPUSH
58293: CALL_OW 324
58297: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58298: LD_EXP 13
58302: IFFALSE 58310
58304: PUSH
58305: LD_EXP 29
58309: AND
58310: IFFALSE 58393
58312: GO 58314
58314: DISABLE
58315: LD_INT 0
58317: PPUSH
58318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58319: LD_ADDR_VAR 0 2
58323: PUSH
58324: LD_INT 22
58326: PUSH
58327: LD_OWVAR 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 21
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PPUSH
58350: CALL_OW 69
58354: ST_TO_ADDR
// if not tmp then
58355: LD_VAR 0 2
58359: NOT
58360: IFFALSE 58364
// exit ;
58362: GO 58393
// for i in tmp do
58364: LD_ADDR_VAR 0 1
58368: PUSH
58369: LD_VAR 0 2
58373: PUSH
58374: FOR_IN
58375: IFFALSE 58391
// SetBLevel ( i , 10 ) ;
58377: LD_VAR 0 1
58381: PPUSH
58382: LD_INT 10
58384: PPUSH
58385: CALL_OW 241
58389: GO 58374
58391: POP
58392: POP
// end ;
58393: PPOPN 2
58395: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58396: LD_EXP 13
58400: IFFALSE 58408
58402: PUSH
58403: LD_EXP 30
58407: AND
58408: IFFALSE 58519
58410: GO 58412
58412: DISABLE
58413: LD_INT 0
58415: PPUSH
58416: PPUSH
58417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58418: LD_ADDR_VAR 0 3
58422: PUSH
58423: LD_INT 22
58425: PUSH
58426: LD_OWVAR 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 25
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PPUSH
58449: CALL_OW 69
58453: ST_TO_ADDR
// if not tmp then
58454: LD_VAR 0 3
58458: NOT
58459: IFFALSE 58463
// exit ;
58461: GO 58519
// un := tmp [ rand ( 1 , tmp ) ] ;
58463: LD_ADDR_VAR 0 2
58467: PUSH
58468: LD_VAR 0 3
58472: PUSH
58473: LD_INT 1
58475: PPUSH
58476: LD_VAR 0 3
58480: PPUSH
58481: CALL_OW 12
58485: ARRAY
58486: ST_TO_ADDR
// if Crawls ( un ) then
58487: LD_VAR 0 2
58491: PPUSH
58492: CALL_OW 318
58496: IFFALSE 58507
// ComWalk ( un ) ;
58498: LD_VAR 0 2
58502: PPUSH
58503: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58507: LD_VAR 0 2
58511: PPUSH
58512: LD_INT 5
58514: PPUSH
58515: CALL_OW 336
// end ;
58519: PPOPN 3
58521: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58522: LD_EXP 13
58526: IFFALSE 58534
58528: PUSH
58529: LD_EXP 31
58533: AND
58534: IFFALSE 58546
58536: PUSH
58537: LD_OWVAR 67
58541: PUSH
58542: LD_INT 4
58544: LESS
58545: AND
58546: IFFALSE 58565
58548: GO 58550
58550: DISABLE
// begin Difficulty := Difficulty + 1 ;
58551: LD_ADDR_OWVAR 67
58555: PUSH
58556: LD_OWVAR 67
58560: PUSH
58561: LD_INT 1
58563: PLUS
58564: ST_TO_ADDR
// end ;
58565: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58566: LD_EXP 13
58570: IFFALSE 58578
58572: PUSH
58573: LD_EXP 32
58577: AND
58578: IFFALSE 58681
58580: GO 58582
58582: DISABLE
58583: LD_INT 0
58585: PPUSH
// begin for i := 1 to 5 do
58586: LD_ADDR_VAR 0 1
58590: PUSH
58591: DOUBLE
58592: LD_INT 1
58594: DEC
58595: ST_TO_ADDR
58596: LD_INT 5
58598: PUSH
58599: FOR_TO
58600: IFFALSE 58679
// begin uc_nation := nation_nature ;
58602: LD_ADDR_OWVAR 21
58606: PUSH
58607: LD_INT 0
58609: ST_TO_ADDR
// uc_side := 0 ;
58610: LD_ADDR_OWVAR 20
58614: PUSH
58615: LD_INT 0
58617: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58618: LD_ADDR_OWVAR 29
58622: PUSH
58623: LD_INT 12
58625: PUSH
58626: LD_INT 12
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: ST_TO_ADDR
// hc_agressivity := 20 ;
58633: LD_ADDR_OWVAR 35
58637: PUSH
58638: LD_INT 20
58640: ST_TO_ADDR
// hc_class := class_tiger ;
58641: LD_ADDR_OWVAR 28
58645: PUSH
58646: LD_INT 14
58648: ST_TO_ADDR
// hc_gallery :=  ;
58649: LD_ADDR_OWVAR 33
58653: PUSH
58654: LD_STRING 
58656: ST_TO_ADDR
// hc_name :=  ;
58657: LD_ADDR_OWVAR 26
58661: PUSH
58662: LD_STRING 
58664: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58665: CALL_OW 44
58669: PPUSH
58670: LD_INT 0
58672: PPUSH
58673: CALL_OW 51
// end ;
58677: GO 58599
58679: POP
58680: POP
// end ;
58681: PPOPN 1
58683: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58684: LD_EXP 13
58688: IFFALSE 58696
58690: PUSH
58691: LD_EXP 33
58695: AND
58696: IFFALSE 58705
58698: GO 58700
58700: DISABLE
// StreamSibBomb ;
58701: CALL 58706 0 0
58705: END
// export function StreamSibBomb ; var i , x , y ; begin
58706: LD_INT 0
58708: PPUSH
58709: PPUSH
58710: PPUSH
58711: PPUSH
// result := false ;
58712: LD_ADDR_VAR 0 1
58716: PUSH
58717: LD_INT 0
58719: ST_TO_ADDR
// for i := 1 to 16 do
58720: LD_ADDR_VAR 0 2
58724: PUSH
58725: DOUBLE
58726: LD_INT 1
58728: DEC
58729: ST_TO_ADDR
58730: LD_INT 16
58732: PUSH
58733: FOR_TO
58734: IFFALSE 58933
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58736: LD_ADDR_VAR 0 3
58740: PUSH
58741: LD_INT 10
58743: PUSH
58744: LD_INT 20
58746: PUSH
58747: LD_INT 30
58749: PUSH
58750: LD_INT 40
58752: PUSH
58753: LD_INT 50
58755: PUSH
58756: LD_INT 60
58758: PUSH
58759: LD_INT 70
58761: PUSH
58762: LD_INT 80
58764: PUSH
58765: LD_INT 90
58767: PUSH
58768: LD_INT 100
58770: PUSH
58771: LD_INT 110
58773: PUSH
58774: LD_INT 120
58776: PUSH
58777: LD_INT 130
58779: PUSH
58780: LD_INT 140
58782: PUSH
58783: LD_INT 150
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: PPUSH
58806: LD_INT 15
58808: PPUSH
58809: CALL_OW 12
58813: ARRAY
58814: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58815: LD_ADDR_VAR 0 4
58819: PUSH
58820: LD_INT 10
58822: PUSH
58823: LD_INT 20
58825: PUSH
58826: LD_INT 30
58828: PUSH
58829: LD_INT 40
58831: PUSH
58832: LD_INT 50
58834: PUSH
58835: LD_INT 60
58837: PUSH
58838: LD_INT 70
58840: PUSH
58841: LD_INT 80
58843: PUSH
58844: LD_INT 90
58846: PUSH
58847: LD_INT 100
58849: PUSH
58850: LD_INT 110
58852: PUSH
58853: LD_INT 120
58855: PUSH
58856: LD_INT 130
58858: PUSH
58859: LD_INT 140
58861: PUSH
58862: LD_INT 150
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PPUSH
58885: LD_INT 15
58887: PPUSH
58888: CALL_OW 12
58892: ARRAY
58893: ST_TO_ADDR
// if ValidHex ( x , y ) then
58894: LD_VAR 0 3
58898: PPUSH
58899: LD_VAR 0 4
58903: PPUSH
58904: CALL_OW 488
58908: IFFALSE 58931
// begin result := [ x , y ] ;
58910: LD_ADDR_VAR 0 1
58914: PUSH
58915: LD_VAR 0 3
58919: PUSH
58920: LD_VAR 0 4
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// break ;
58929: GO 58933
// end ; end ;
58931: GO 58733
58933: POP
58934: POP
// if result then
58935: LD_VAR 0 1
58939: IFFALSE 58999
// begin ToLua ( playSibBomb() ) ;
58941: LD_STRING playSibBomb()
58943: PPUSH
58944: CALL_OW 559
// wait ( 0 0$14 ) ;
58948: LD_INT 490
58950: PPUSH
58951: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58955: LD_VAR 0 1
58959: PUSH
58960: LD_INT 1
58962: ARRAY
58963: PPUSH
58964: LD_VAR 0 1
58968: PUSH
58969: LD_INT 2
58971: ARRAY
58972: PPUSH
58973: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58977: LD_VAR 0 1
58981: PUSH
58982: LD_INT 1
58984: ARRAY
58985: PPUSH
58986: LD_VAR 0 1
58990: PUSH
58991: LD_INT 2
58993: ARRAY
58994: PPUSH
58995: CALL_OW 429
// end ; end ;
58999: LD_VAR 0 1
59003: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59004: LD_EXP 13
59008: IFFALSE 59016
59010: PUSH
59011: LD_EXP 35
59015: AND
59016: IFFALSE 59028
59018: GO 59020
59020: DISABLE
// YouLost (  ) ;
59021: LD_STRING 
59023: PPUSH
59024: CALL_OW 104
59028: END
// every 0 0$1 trigger StreamModeActive and sFog do
59029: LD_EXP 13
59033: IFFALSE 59041
59035: PUSH
59036: LD_EXP 34
59040: AND
59041: IFFALSE 59055
59043: GO 59045
59045: DISABLE
// FogOff ( your_side ) ;
59046: LD_OWVAR 2
59050: PPUSH
59051: CALL_OW 344
59055: END
// every 0 0$1 trigger StreamModeActive and sSun do
59056: LD_EXP 13
59060: IFFALSE 59068
59062: PUSH
59063: LD_EXP 36
59067: AND
59068: IFFALSE 59096
59070: GO 59072
59072: DISABLE
// begin solar_recharge_percent := 0 ;
59073: LD_ADDR_OWVAR 79
59077: PUSH
59078: LD_INT 0
59080: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59081: LD_INT 10500
59083: PPUSH
59084: CALL_OW 67
// solar_recharge_percent := 100 ;
59088: LD_ADDR_OWVAR 79
59092: PUSH
59093: LD_INT 100
59095: ST_TO_ADDR
// end ;
59096: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59097: LD_EXP 13
59101: IFFALSE 59109
59103: PUSH
59104: LD_EXP 37
59108: AND
59109: IFFALSE 59348
59111: GO 59113
59113: DISABLE
59114: LD_INT 0
59116: PPUSH
59117: PPUSH
59118: PPUSH
// begin tmp := [ ] ;
59119: LD_ADDR_VAR 0 3
59123: PUSH
59124: EMPTY
59125: ST_TO_ADDR
// for i := 1 to 6 do
59126: LD_ADDR_VAR 0 1
59130: PUSH
59131: DOUBLE
59132: LD_INT 1
59134: DEC
59135: ST_TO_ADDR
59136: LD_INT 6
59138: PUSH
59139: FOR_TO
59140: IFFALSE 59245
// begin uc_nation := nation_nature ;
59142: LD_ADDR_OWVAR 21
59146: PUSH
59147: LD_INT 0
59149: ST_TO_ADDR
// uc_side := 0 ;
59150: LD_ADDR_OWVAR 20
59154: PUSH
59155: LD_INT 0
59157: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59158: LD_ADDR_OWVAR 29
59162: PUSH
59163: LD_INT 12
59165: PUSH
59166: LD_INT 12
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: ST_TO_ADDR
// hc_agressivity := 20 ;
59173: LD_ADDR_OWVAR 35
59177: PUSH
59178: LD_INT 20
59180: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59181: LD_ADDR_OWVAR 28
59185: PUSH
59186: LD_INT 17
59188: ST_TO_ADDR
// hc_gallery :=  ;
59189: LD_ADDR_OWVAR 33
59193: PUSH
59194: LD_STRING 
59196: ST_TO_ADDR
// hc_name :=  ;
59197: LD_ADDR_OWVAR 26
59201: PUSH
59202: LD_STRING 
59204: ST_TO_ADDR
// un := CreateHuman ;
59205: LD_ADDR_VAR 0 2
59209: PUSH
59210: CALL_OW 44
59214: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59215: LD_VAR 0 2
59219: PPUSH
59220: LD_INT 1
59222: PPUSH
59223: CALL_OW 51
// tmp := tmp ^ un ;
59227: LD_ADDR_VAR 0 3
59231: PUSH
59232: LD_VAR 0 3
59236: PUSH
59237: LD_VAR 0 2
59241: ADD
59242: ST_TO_ADDR
// end ;
59243: GO 59139
59245: POP
59246: POP
// repeat wait ( 0 0$1 ) ;
59247: LD_INT 35
59249: PPUSH
59250: CALL_OW 67
// for un in tmp do
59254: LD_ADDR_VAR 0 2
59258: PUSH
59259: LD_VAR 0 3
59263: PUSH
59264: FOR_IN
59265: IFFALSE 59339
// begin if IsDead ( un ) then
59267: LD_VAR 0 2
59271: PPUSH
59272: CALL_OW 301
59276: IFFALSE 59296
// begin tmp := tmp diff un ;
59278: LD_ADDR_VAR 0 3
59282: PUSH
59283: LD_VAR 0 3
59287: PUSH
59288: LD_VAR 0 2
59292: DIFF
59293: ST_TO_ADDR
// continue ;
59294: GO 59264
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59296: LD_VAR 0 2
59300: PPUSH
59301: LD_INT 3
59303: PUSH
59304: LD_INT 22
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PPUSH
59318: CALL_OW 69
59322: PPUSH
59323: LD_VAR 0 2
59327: PPUSH
59328: CALL_OW 74
59332: PPUSH
59333: CALL_OW 115
// end ;
59337: GO 59264
59339: POP
59340: POP
// until not tmp ;
59341: LD_VAR 0 3
59345: NOT
59346: IFFALSE 59247
// end ;
59348: PPOPN 3
59350: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59351: LD_EXP 13
59355: IFFALSE 59363
59357: PUSH
59358: LD_EXP 38
59362: AND
59363: IFFALSE 59417
59365: GO 59367
59367: DISABLE
// begin ToLua ( displayTroll(); ) ;
59368: LD_STRING displayTroll();
59370: PPUSH
59371: CALL_OW 559
// wait ( 3 3$00 ) ;
59375: LD_INT 6300
59377: PPUSH
59378: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59382: LD_STRING hideTroll();
59384: PPUSH
59385: CALL_OW 559
// wait ( 1 1$00 ) ;
59389: LD_INT 2100
59391: PPUSH
59392: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59396: LD_STRING displayTroll();
59398: PPUSH
59399: CALL_OW 559
// wait ( 1 1$00 ) ;
59403: LD_INT 2100
59405: PPUSH
59406: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59410: LD_STRING hideTroll();
59412: PPUSH
59413: CALL_OW 559
// end ;
59417: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59418: LD_EXP 13
59422: IFFALSE 59430
59424: PUSH
59425: LD_EXP 39
59429: AND
59430: IFFALSE 59493
59432: GO 59434
59434: DISABLE
59435: LD_INT 0
59437: PPUSH
// begin p := 0 ;
59438: LD_ADDR_VAR 0 1
59442: PUSH
59443: LD_INT 0
59445: ST_TO_ADDR
// repeat game_speed := 1 ;
59446: LD_ADDR_OWVAR 65
59450: PUSH
59451: LD_INT 1
59453: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59454: LD_INT 35
59456: PPUSH
59457: CALL_OW 67
// p := p + 1 ;
59461: LD_ADDR_VAR 0 1
59465: PUSH
59466: LD_VAR 0 1
59470: PUSH
59471: LD_INT 1
59473: PLUS
59474: ST_TO_ADDR
// until p >= 60 ;
59475: LD_VAR 0 1
59479: PUSH
59480: LD_INT 60
59482: GREATEREQUAL
59483: IFFALSE 59446
// game_speed := 4 ;
59485: LD_ADDR_OWVAR 65
59489: PUSH
59490: LD_INT 4
59492: ST_TO_ADDR
// end ;
59493: PPOPN 1
59495: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59496: LD_EXP 13
59500: IFFALSE 59508
59502: PUSH
59503: LD_EXP 40
59507: AND
59508: IFFALSE 59654
59510: GO 59512
59512: DISABLE
59513: LD_INT 0
59515: PPUSH
59516: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59517: LD_ADDR_VAR 0 1
59521: PUSH
59522: LD_INT 22
59524: PUSH
59525: LD_OWVAR 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: LD_INT 30
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 30
59549: PUSH
59550: LD_INT 1
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PPUSH
59566: CALL_OW 69
59570: ST_TO_ADDR
// if not depot then
59571: LD_VAR 0 1
59575: NOT
59576: IFFALSE 59580
// exit ;
59578: GO 59654
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59580: LD_ADDR_VAR 0 2
59584: PUSH
59585: LD_VAR 0 1
59589: PUSH
59590: LD_INT 1
59592: PPUSH
59593: LD_VAR 0 1
59597: PPUSH
59598: CALL_OW 12
59602: ARRAY
59603: PPUSH
59604: CALL_OW 274
59608: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59609: LD_VAR 0 2
59613: PPUSH
59614: LD_INT 1
59616: PPUSH
59617: LD_INT 0
59619: PPUSH
59620: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59624: LD_VAR 0 2
59628: PPUSH
59629: LD_INT 2
59631: PPUSH
59632: LD_INT 0
59634: PPUSH
59635: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59639: LD_VAR 0 2
59643: PPUSH
59644: LD_INT 3
59646: PPUSH
59647: LD_INT 0
59649: PPUSH
59650: CALL_OW 277
// end ;
59654: PPOPN 2
59656: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59657: LD_EXP 13
59661: IFFALSE 59669
59663: PUSH
59664: LD_EXP 41
59668: AND
59669: IFFALSE 59766
59671: GO 59673
59673: DISABLE
59674: LD_INT 0
59676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59677: LD_ADDR_VAR 0 1
59681: PUSH
59682: LD_INT 22
59684: PUSH
59685: LD_OWVAR 2
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 21
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 23
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: LIST
59725: PPUSH
59726: CALL_OW 69
59730: ST_TO_ADDR
// if not tmp then
59731: LD_VAR 0 1
59735: NOT
59736: IFFALSE 59740
// exit ;
59738: GO 59766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59740: LD_VAR 0 1
59744: PUSH
59745: LD_INT 1
59747: PPUSH
59748: LD_VAR 0 1
59752: PPUSH
59753: CALL_OW 12
59757: ARRAY
59758: PPUSH
59759: LD_INT 200
59761: PPUSH
59762: CALL_OW 234
// end ;
59766: PPOPN 1
59768: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59769: LD_EXP 13
59773: IFFALSE 59781
59775: PUSH
59776: LD_EXP 42
59780: AND
59781: IFFALSE 59860
59783: GO 59785
59785: DISABLE
59786: LD_INT 0
59788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59789: LD_ADDR_VAR 0 1
59793: PUSH
59794: LD_INT 22
59796: PUSH
59797: LD_OWVAR 2
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 21
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PPUSH
59820: CALL_OW 69
59824: ST_TO_ADDR
// if not tmp then
59825: LD_VAR 0 1
59829: NOT
59830: IFFALSE 59834
// exit ;
59832: GO 59860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59834: LD_VAR 0 1
59838: PUSH
59839: LD_INT 1
59841: PPUSH
59842: LD_VAR 0 1
59846: PPUSH
59847: CALL_OW 12
59851: ARRAY
59852: PPUSH
59853: LD_INT 60
59855: PPUSH
59856: CALL_OW 234
// end ;
59860: PPOPN 1
59862: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59863: LD_EXP 13
59867: IFFALSE 59875
59869: PUSH
59870: LD_EXP 43
59874: AND
59875: IFFALSE 59974
59877: GO 59879
59879: DISABLE
59880: LD_INT 0
59882: PPUSH
59883: PPUSH
// begin enable ;
59884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59885: LD_ADDR_VAR 0 1
59889: PUSH
59890: LD_INT 22
59892: PUSH
59893: LD_OWVAR 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 61
59904: PUSH
59905: EMPTY
59906: LIST
59907: PUSH
59908: LD_INT 33
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: PPUSH
59923: CALL_OW 69
59927: ST_TO_ADDR
// if not tmp then
59928: LD_VAR 0 1
59932: NOT
59933: IFFALSE 59937
// exit ;
59935: GO 59974
// for i in tmp do
59937: LD_ADDR_VAR 0 2
59941: PUSH
59942: LD_VAR 0 1
59946: PUSH
59947: FOR_IN
59948: IFFALSE 59972
// if IsControledBy ( i ) then
59950: LD_VAR 0 2
59954: PPUSH
59955: CALL_OW 312
59959: IFFALSE 59970
// ComUnlink ( i ) ;
59961: LD_VAR 0 2
59965: PPUSH
59966: CALL_OW 136
59970: GO 59947
59972: POP
59973: POP
// end ;
59974: PPOPN 2
59976: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59977: LD_EXP 13
59981: IFFALSE 59989
59983: PUSH
59984: LD_EXP 44
59988: AND
59989: IFFALSE 60129
59991: GO 59993
59993: DISABLE
59994: LD_INT 0
59996: PPUSH
59997: PPUSH
// begin ToLua ( displayPowell(); ) ;
59998: LD_STRING displayPowell();
60000: PPUSH
60001: CALL_OW 559
// uc_side := 0 ;
60005: LD_ADDR_OWVAR 20
60009: PUSH
60010: LD_INT 0
60012: ST_TO_ADDR
// uc_nation := 2 ;
60013: LD_ADDR_OWVAR 21
60017: PUSH
60018: LD_INT 2
60020: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60021: LD_ADDR_OWVAR 37
60025: PUSH
60026: LD_INT 14
60028: ST_TO_ADDR
// vc_engine := engine_siberite ;
60029: LD_ADDR_OWVAR 39
60033: PUSH
60034: LD_INT 3
60036: ST_TO_ADDR
// vc_control := control_apeman ;
60037: LD_ADDR_OWVAR 38
60041: PUSH
60042: LD_INT 5
60044: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60045: LD_ADDR_OWVAR 40
60049: PUSH
60050: LD_INT 29
60052: ST_TO_ADDR
// un := CreateVehicle ;
60053: LD_ADDR_VAR 0 2
60057: PUSH
60058: CALL_OW 45
60062: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60063: LD_VAR 0 2
60067: PPUSH
60068: LD_INT 1
60070: PPUSH
60071: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60075: LD_INT 35
60077: PPUSH
60078: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60082: LD_VAR 0 2
60086: PPUSH
60087: LD_INT 22
60089: PUSH
60090: LD_OWVAR 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PPUSH
60099: CALL_OW 69
60103: PPUSH
60104: LD_VAR 0 2
60108: PPUSH
60109: CALL_OW 74
60113: PPUSH
60114: CALL_OW 115
// until IsDead ( un ) ;
60118: LD_VAR 0 2
60122: PPUSH
60123: CALL_OW 301
60127: IFFALSE 60075
// end ;
60129: PPOPN 2
60131: END
// every 0 0$1 trigger StreamModeActive and sStu do
60132: LD_EXP 13
60136: IFFALSE 60144
60138: PUSH
60139: LD_EXP 52
60143: AND
60144: IFFALSE 60160
60146: GO 60148
60148: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60149: LD_STRING displayStucuk();
60151: PPUSH
60152: CALL_OW 559
// ResetFog ;
60156: CALL_OW 335
// end ;
60160: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60161: LD_EXP 13
60165: IFFALSE 60173
60167: PUSH
60168: LD_EXP 45
60172: AND
60173: IFFALSE 60314
60175: GO 60177
60177: DISABLE
60178: LD_INT 0
60180: PPUSH
60181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60182: LD_ADDR_VAR 0 2
60186: PUSH
60187: LD_INT 22
60189: PUSH
60190: LD_OWVAR 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 21
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PPUSH
60213: CALL_OW 69
60217: ST_TO_ADDR
// if not tmp then
60218: LD_VAR 0 2
60222: NOT
60223: IFFALSE 60227
// exit ;
60225: GO 60314
// un := tmp [ rand ( 1 , tmp ) ] ;
60227: LD_ADDR_VAR 0 1
60231: PUSH
60232: LD_VAR 0 2
60236: PUSH
60237: LD_INT 1
60239: PPUSH
60240: LD_VAR 0 2
60244: PPUSH
60245: CALL_OW 12
60249: ARRAY
60250: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60251: LD_VAR 0 1
60255: PPUSH
60256: LD_INT 0
60258: PPUSH
60259: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60263: LD_VAR 0 1
60267: PPUSH
60268: LD_OWVAR 3
60272: PUSH
60273: LD_VAR 0 1
60277: DIFF
60278: PPUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 74
60288: PPUSH
60289: CALL_OW 115
// wait ( 0 0$20 ) ;
60293: LD_INT 700
60295: PPUSH
60296: CALL_OW 67
// SetSide ( un , your_side ) ;
60300: LD_VAR 0 1
60304: PPUSH
60305: LD_OWVAR 2
60309: PPUSH
60310: CALL_OW 235
// end ;
60314: PPOPN 2
60316: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60317: LD_EXP 13
60321: IFFALSE 60329
60323: PUSH
60324: LD_EXP 46
60328: AND
60329: IFFALSE 60435
60331: GO 60333
60333: DISABLE
60334: LD_INT 0
60336: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60337: LD_ADDR_VAR 0 1
60341: PUSH
60342: LD_INT 22
60344: PUSH
60345: LD_OWVAR 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: LD_INT 30
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 30
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PPUSH
60386: CALL_OW 69
60390: ST_TO_ADDR
// if not depot then
60391: LD_VAR 0 1
60395: NOT
60396: IFFALSE 60400
// exit ;
60398: GO 60435
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60400: LD_VAR 0 1
60404: PUSH
60405: LD_INT 1
60407: ARRAY
60408: PPUSH
60409: CALL_OW 250
60413: PPUSH
60414: LD_VAR 0 1
60418: PUSH
60419: LD_INT 1
60421: ARRAY
60422: PPUSH
60423: CALL_OW 251
60427: PPUSH
60428: LD_INT 70
60430: PPUSH
60431: CALL_OW 495
// end ;
60435: PPOPN 1
60437: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60438: LD_EXP 13
60442: IFFALSE 60450
60444: PUSH
60445: LD_EXP 47
60449: AND
60450: IFFALSE 60661
60452: GO 60454
60454: DISABLE
60455: LD_INT 0
60457: PPUSH
60458: PPUSH
60459: PPUSH
60460: PPUSH
60461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60462: LD_ADDR_VAR 0 5
60466: PUSH
60467: LD_INT 22
60469: PUSH
60470: LD_OWVAR 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 21
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PPUSH
60493: CALL_OW 69
60497: ST_TO_ADDR
// if not tmp then
60498: LD_VAR 0 5
60502: NOT
60503: IFFALSE 60507
// exit ;
60505: GO 60661
// for i in tmp do
60507: LD_ADDR_VAR 0 1
60511: PUSH
60512: LD_VAR 0 5
60516: PUSH
60517: FOR_IN
60518: IFFALSE 60659
// begin d := rand ( 0 , 5 ) ;
60520: LD_ADDR_VAR 0 4
60524: PUSH
60525: LD_INT 0
60527: PPUSH
60528: LD_INT 5
60530: PPUSH
60531: CALL_OW 12
60535: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60536: LD_ADDR_VAR 0 2
60540: PUSH
60541: LD_VAR 0 1
60545: PPUSH
60546: CALL_OW 250
60550: PPUSH
60551: LD_VAR 0 4
60555: PPUSH
60556: LD_INT 3
60558: PPUSH
60559: LD_INT 12
60561: PPUSH
60562: CALL_OW 12
60566: PPUSH
60567: CALL_OW 272
60571: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60572: LD_ADDR_VAR 0 3
60576: PUSH
60577: LD_VAR 0 1
60581: PPUSH
60582: CALL_OW 251
60586: PPUSH
60587: LD_VAR 0 4
60591: PPUSH
60592: LD_INT 3
60594: PPUSH
60595: LD_INT 12
60597: PPUSH
60598: CALL_OW 12
60602: PPUSH
60603: CALL_OW 273
60607: ST_TO_ADDR
// if ValidHex ( x , y ) then
60608: LD_VAR 0 2
60612: PPUSH
60613: LD_VAR 0 3
60617: PPUSH
60618: CALL_OW 488
60622: IFFALSE 60657
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60624: LD_VAR 0 1
60628: PPUSH
60629: LD_VAR 0 2
60633: PPUSH
60634: LD_VAR 0 3
60638: PPUSH
60639: LD_INT 3
60641: PPUSH
60642: LD_INT 6
60644: PPUSH
60645: CALL_OW 12
60649: PPUSH
60650: LD_INT 1
60652: PPUSH
60653: CALL_OW 483
// end ;
60657: GO 60517
60659: POP
60660: POP
// end ;
60661: PPOPN 5
60663: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60664: LD_EXP 13
60668: IFFALSE 60676
60670: PUSH
60671: LD_EXP 48
60675: AND
60676: IFFALSE 60770
60678: GO 60680
60680: DISABLE
60681: LD_INT 0
60683: PPUSH
60684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60685: LD_ADDR_VAR 0 2
60689: PUSH
60690: LD_INT 22
60692: PUSH
60693: LD_OWVAR 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 32
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 21
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: LIST
60726: PPUSH
60727: CALL_OW 69
60731: ST_TO_ADDR
// if not tmp then
60732: LD_VAR 0 2
60736: NOT
60737: IFFALSE 60741
// exit ;
60739: GO 60770
// for i in tmp do
60741: LD_ADDR_VAR 0 1
60745: PUSH
60746: LD_VAR 0 2
60750: PUSH
60751: FOR_IN
60752: IFFALSE 60768
// SetFuel ( i , 0 ) ;
60754: LD_VAR 0 1
60758: PPUSH
60759: LD_INT 0
60761: PPUSH
60762: CALL_OW 240
60766: GO 60751
60768: POP
60769: POP
// end ;
60770: PPOPN 2
60772: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60773: LD_EXP 13
60777: IFFALSE 60785
60779: PUSH
60780: LD_EXP 49
60784: AND
60785: IFFALSE 60851
60787: GO 60789
60789: DISABLE
60790: LD_INT 0
60792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60793: LD_ADDR_VAR 0 1
60797: PUSH
60798: LD_INT 22
60800: PUSH
60801: LD_OWVAR 2
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 30
60812: PUSH
60813: LD_INT 29
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PPUSH
60824: CALL_OW 69
60828: ST_TO_ADDR
// if not tmp then
60829: LD_VAR 0 1
60833: NOT
60834: IFFALSE 60838
// exit ;
60836: GO 60851
// DestroyUnit ( tmp [ 1 ] ) ;
60838: LD_VAR 0 1
60842: PUSH
60843: LD_INT 1
60845: ARRAY
60846: PPUSH
60847: CALL_OW 65
// end ;
60851: PPOPN 1
60853: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60854: LD_EXP 13
60858: IFFALSE 60866
60860: PUSH
60861: LD_EXP 51
60865: AND
60866: IFFALSE 60995
60868: GO 60870
60870: DISABLE
60871: LD_INT 0
60873: PPUSH
// begin uc_side := 0 ;
60874: LD_ADDR_OWVAR 20
60878: PUSH
60879: LD_INT 0
60881: ST_TO_ADDR
// uc_nation := nation_arabian ;
60882: LD_ADDR_OWVAR 21
60886: PUSH
60887: LD_INT 2
60889: ST_TO_ADDR
// hc_gallery :=  ;
60890: LD_ADDR_OWVAR 33
60894: PUSH
60895: LD_STRING 
60897: ST_TO_ADDR
// hc_name :=  ;
60898: LD_ADDR_OWVAR 26
60902: PUSH
60903: LD_STRING 
60905: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60906: LD_INT 1
60908: PPUSH
60909: LD_INT 11
60911: PPUSH
60912: LD_INT 10
60914: PPUSH
60915: CALL_OW 380
// un := CreateHuman ;
60919: LD_ADDR_VAR 0 1
60923: PUSH
60924: CALL_OW 44
60928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60929: LD_VAR 0 1
60933: PPUSH
60934: LD_INT 1
60936: PPUSH
60937: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60941: LD_INT 35
60943: PPUSH
60944: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60948: LD_VAR 0 1
60952: PPUSH
60953: LD_INT 22
60955: PUSH
60956: LD_OWVAR 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PPUSH
60965: CALL_OW 69
60969: PPUSH
60970: LD_VAR 0 1
60974: PPUSH
60975: CALL_OW 74
60979: PPUSH
60980: CALL_OW 115
// until IsDead ( un ) ;
60984: LD_VAR 0 1
60988: PPUSH
60989: CALL_OW 301
60993: IFFALSE 60941
// end ;
60995: PPOPN 1
60997: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60998: LD_EXP 13
61002: IFFALSE 61010
61004: PUSH
61005: LD_EXP 53
61009: AND
61010: IFFALSE 61022
61012: GO 61014
61014: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61015: LD_STRING earthquake(getX(game), 0, 32)
61017: PPUSH
61018: CALL_OW 559
61022: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61023: LD_EXP 13
61027: IFFALSE 61035
61029: PUSH
61030: LD_EXP 54
61034: AND
61035: IFFALSE 61126
61037: GO 61039
61039: DISABLE
61040: LD_INT 0
61042: PPUSH
// begin enable ;
61043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61044: LD_ADDR_VAR 0 1
61048: PUSH
61049: LD_INT 22
61051: PUSH
61052: LD_OWVAR 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 21
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 33
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: PPUSH
61086: CALL_OW 69
61090: ST_TO_ADDR
// if not tmp then
61091: LD_VAR 0 1
61095: NOT
61096: IFFALSE 61100
// exit ;
61098: GO 61126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61100: LD_VAR 0 1
61104: PUSH
61105: LD_INT 1
61107: PPUSH
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL_OW 12
61117: ARRAY
61118: PPUSH
61119: LD_INT 1
61121: PPUSH
61122: CALL_OW 234
// end ;
61126: PPOPN 1
61128: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61129: LD_EXP 13
61133: IFFALSE 61141
61135: PUSH
61136: LD_EXP 55
61140: AND
61141: IFFALSE 61282
61143: GO 61145
61145: DISABLE
61146: LD_INT 0
61148: PPUSH
61149: PPUSH
61150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61151: LD_ADDR_VAR 0 3
61155: PUSH
61156: LD_INT 22
61158: PUSH
61159: LD_OWVAR 2
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 25
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PPUSH
61182: CALL_OW 69
61186: ST_TO_ADDR
// if not tmp then
61187: LD_VAR 0 3
61191: NOT
61192: IFFALSE 61196
// exit ;
61194: GO 61282
// un := tmp [ rand ( 1 , tmp ) ] ;
61196: LD_ADDR_VAR 0 2
61200: PUSH
61201: LD_VAR 0 3
61205: PUSH
61206: LD_INT 1
61208: PPUSH
61209: LD_VAR 0 3
61213: PPUSH
61214: CALL_OW 12
61218: ARRAY
61219: ST_TO_ADDR
// if Crawls ( un ) then
61220: LD_VAR 0 2
61224: PPUSH
61225: CALL_OW 318
61229: IFFALSE 61240
// ComWalk ( un ) ;
61231: LD_VAR 0 2
61235: PPUSH
61236: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61240: LD_VAR 0 2
61244: PPUSH
61245: LD_INT 9
61247: PPUSH
61248: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61252: LD_INT 28
61254: PPUSH
61255: LD_OWVAR 2
61259: PPUSH
61260: LD_INT 2
61262: PPUSH
61263: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61267: LD_INT 29
61269: PPUSH
61270: LD_OWVAR 2
61274: PPUSH
61275: LD_INT 2
61277: PPUSH
61278: CALL_OW 322
// end ;
61282: PPOPN 3
61284: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61285: LD_EXP 13
61289: IFFALSE 61297
61291: PUSH
61292: LD_EXP 56
61296: AND
61297: IFFALSE 61408
61299: GO 61301
61301: DISABLE
61302: LD_INT 0
61304: PPUSH
61305: PPUSH
61306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61307: LD_ADDR_VAR 0 3
61311: PUSH
61312: LD_INT 22
61314: PUSH
61315: LD_OWVAR 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 25
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PPUSH
61338: CALL_OW 69
61342: ST_TO_ADDR
// if not tmp then
61343: LD_VAR 0 3
61347: NOT
61348: IFFALSE 61352
// exit ;
61350: GO 61408
// un := tmp [ rand ( 1 , tmp ) ] ;
61352: LD_ADDR_VAR 0 2
61356: PUSH
61357: LD_VAR 0 3
61361: PUSH
61362: LD_INT 1
61364: PPUSH
61365: LD_VAR 0 3
61369: PPUSH
61370: CALL_OW 12
61374: ARRAY
61375: ST_TO_ADDR
// if Crawls ( un ) then
61376: LD_VAR 0 2
61380: PPUSH
61381: CALL_OW 318
61385: IFFALSE 61396
// ComWalk ( un ) ;
61387: LD_VAR 0 2
61391: PPUSH
61392: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61396: LD_VAR 0 2
61400: PPUSH
61401: LD_INT 8
61403: PPUSH
61404: CALL_OW 336
// end ;
61408: PPOPN 3
61410: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61411: LD_EXP 13
61415: IFFALSE 61423
61417: PUSH
61418: LD_EXP 57
61422: AND
61423: IFFALSE 61567
61425: GO 61427
61427: DISABLE
61428: LD_INT 0
61430: PPUSH
61431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61432: LD_ADDR_VAR 0 2
61436: PUSH
61437: LD_INT 22
61439: PUSH
61440: LD_OWVAR 2
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 21
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: LD_INT 34
61464: PUSH
61465: LD_INT 12
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 34
61474: PUSH
61475: LD_INT 51
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 34
61484: PUSH
61485: LD_INT 32
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: PPUSH
61503: CALL_OW 69
61507: ST_TO_ADDR
// if not tmp then
61508: LD_VAR 0 2
61512: NOT
61513: IFFALSE 61517
// exit ;
61515: GO 61567
// for i in tmp do
61517: LD_ADDR_VAR 0 1
61521: PUSH
61522: LD_VAR 0 2
61526: PUSH
61527: FOR_IN
61528: IFFALSE 61565
// if GetCargo ( i , mat_artifact ) = 0 then
61530: LD_VAR 0 1
61534: PPUSH
61535: LD_INT 4
61537: PPUSH
61538: CALL_OW 289
61542: PUSH
61543: LD_INT 0
61545: EQUAL
61546: IFFALSE 61563
// SetCargo ( i , mat_siberit , 100 ) ;
61548: LD_VAR 0 1
61552: PPUSH
61553: LD_INT 3
61555: PPUSH
61556: LD_INT 100
61558: PPUSH
61559: CALL_OW 290
61563: GO 61527
61565: POP
61566: POP
// end ;
61567: PPOPN 2
61569: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61570: LD_EXP 13
61574: IFFALSE 61582
61576: PUSH
61577: LD_EXP 58
61581: AND
61582: IFFALSE 61765
61584: GO 61586
61586: DISABLE
61587: LD_INT 0
61589: PPUSH
61590: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61591: LD_ADDR_VAR 0 2
61595: PUSH
61596: LD_INT 22
61598: PUSH
61599: LD_OWVAR 2
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PPUSH
61608: CALL_OW 69
61612: ST_TO_ADDR
// if not tmp then
61613: LD_VAR 0 2
61617: NOT
61618: IFFALSE 61622
// exit ;
61620: GO 61765
// for i := 1 to 2 do
61622: LD_ADDR_VAR 0 1
61626: PUSH
61627: DOUBLE
61628: LD_INT 1
61630: DEC
61631: ST_TO_ADDR
61632: LD_INT 2
61634: PUSH
61635: FOR_TO
61636: IFFALSE 61763
// begin uc_side := your_side ;
61638: LD_ADDR_OWVAR 20
61642: PUSH
61643: LD_OWVAR 2
61647: ST_TO_ADDR
// uc_nation := nation_american ;
61648: LD_ADDR_OWVAR 21
61652: PUSH
61653: LD_INT 1
61655: ST_TO_ADDR
// vc_chassis := us_morphling ;
61656: LD_ADDR_OWVAR 37
61660: PUSH
61661: LD_INT 5
61663: ST_TO_ADDR
// vc_engine := engine_siberite ;
61664: LD_ADDR_OWVAR 39
61668: PUSH
61669: LD_INT 3
61671: ST_TO_ADDR
// vc_control := control_computer ;
61672: LD_ADDR_OWVAR 38
61676: PUSH
61677: LD_INT 3
61679: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61680: LD_ADDR_OWVAR 40
61684: PUSH
61685: LD_INT 10
61687: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61688: LD_VAR 0 2
61692: PUSH
61693: LD_INT 1
61695: ARRAY
61696: PPUSH
61697: CALL_OW 310
61701: NOT
61702: IFFALSE 61749
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61704: CALL_OW 45
61708: PPUSH
61709: LD_VAR 0 2
61713: PUSH
61714: LD_INT 1
61716: ARRAY
61717: PPUSH
61718: CALL_OW 250
61722: PPUSH
61723: LD_VAR 0 2
61727: PUSH
61728: LD_INT 1
61730: ARRAY
61731: PPUSH
61732: CALL_OW 251
61736: PPUSH
61737: LD_INT 12
61739: PPUSH
61740: LD_INT 1
61742: PPUSH
61743: CALL_OW 50
61747: GO 61761
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61749: CALL_OW 45
61753: PPUSH
61754: LD_INT 1
61756: PPUSH
61757: CALL_OW 51
// end ;
61761: GO 61635
61763: POP
61764: POP
// end ;
61765: PPOPN 2
61767: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61768: LD_EXP 13
61772: IFFALSE 61780
61774: PUSH
61775: LD_EXP 59
61779: AND
61780: IFFALSE 62002
61782: GO 61784
61784: DISABLE
61785: LD_INT 0
61787: PPUSH
61788: PPUSH
61789: PPUSH
61790: PPUSH
61791: PPUSH
61792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61793: LD_ADDR_VAR 0 6
61797: PUSH
61798: LD_INT 22
61800: PUSH
61801: LD_OWVAR 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 21
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: PUSH
61823: LD_INT 23
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: PPUSH
61842: CALL_OW 69
61846: ST_TO_ADDR
// if not tmp then
61847: LD_VAR 0 6
61851: NOT
61852: IFFALSE 61856
// exit ;
61854: GO 62002
// s1 := rand ( 1 , 4 ) ;
61856: LD_ADDR_VAR 0 2
61860: PUSH
61861: LD_INT 1
61863: PPUSH
61864: LD_INT 4
61866: PPUSH
61867: CALL_OW 12
61871: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61872: LD_ADDR_VAR 0 4
61876: PUSH
61877: LD_VAR 0 6
61881: PUSH
61882: LD_INT 1
61884: ARRAY
61885: PPUSH
61886: LD_VAR 0 2
61890: PPUSH
61891: CALL_OW 259
61895: ST_TO_ADDR
// if s1 = 1 then
61896: LD_VAR 0 2
61900: PUSH
61901: LD_INT 1
61903: EQUAL
61904: IFFALSE 61924
// s2 := rand ( 2 , 4 ) else
61906: LD_ADDR_VAR 0 3
61910: PUSH
61911: LD_INT 2
61913: PPUSH
61914: LD_INT 4
61916: PPUSH
61917: CALL_OW 12
61921: ST_TO_ADDR
61922: GO 61932
// s2 := 1 ;
61924: LD_ADDR_VAR 0 3
61928: PUSH
61929: LD_INT 1
61931: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61932: LD_ADDR_VAR 0 5
61936: PUSH
61937: LD_VAR 0 6
61941: PUSH
61942: LD_INT 1
61944: ARRAY
61945: PPUSH
61946: LD_VAR 0 3
61950: PPUSH
61951: CALL_OW 259
61955: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61956: LD_VAR 0 6
61960: PUSH
61961: LD_INT 1
61963: ARRAY
61964: PPUSH
61965: LD_VAR 0 2
61969: PPUSH
61970: LD_VAR 0 5
61974: PPUSH
61975: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61979: LD_VAR 0 6
61983: PUSH
61984: LD_INT 1
61986: ARRAY
61987: PPUSH
61988: LD_VAR 0 3
61992: PPUSH
61993: LD_VAR 0 4
61997: PPUSH
61998: CALL_OW 237
// end ;
62002: PPOPN 6
62004: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62005: LD_EXP 13
62009: IFFALSE 62017
62011: PUSH
62012: LD_EXP 60
62016: AND
62017: IFFALSE 62096
62019: GO 62021
62021: DISABLE
62022: LD_INT 0
62024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62025: LD_ADDR_VAR 0 1
62029: PUSH
62030: LD_INT 22
62032: PUSH
62033: LD_OWVAR 2
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 30
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PPUSH
62056: CALL_OW 69
62060: ST_TO_ADDR
// if not tmp then
62061: LD_VAR 0 1
62065: NOT
62066: IFFALSE 62070
// exit ;
62068: GO 62096
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62070: LD_VAR 0 1
62074: PUSH
62075: LD_INT 1
62077: PPUSH
62078: LD_VAR 0 1
62082: PPUSH
62083: CALL_OW 12
62087: ARRAY
62088: PPUSH
62089: LD_INT 1
62091: PPUSH
62092: CALL_OW 234
// end ;
62096: PPOPN 1
62098: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62099: LD_EXP 13
62103: IFFALSE 62111
62105: PUSH
62106: LD_EXP 61
62110: AND
62111: IFFALSE 62223
62113: GO 62115
62115: DISABLE
62116: LD_INT 0
62118: PPUSH
62119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62120: LD_ADDR_VAR 0 2
62124: PUSH
62125: LD_INT 22
62127: PUSH
62128: LD_OWVAR 2
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 30
62142: PUSH
62143: LD_INT 27
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 30
62152: PUSH
62153: LD_INT 26
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 30
62162: PUSH
62163: LD_INT 28
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PPUSH
62180: CALL_OW 69
62184: ST_TO_ADDR
// if not tmp then
62185: LD_VAR 0 2
62189: NOT
62190: IFFALSE 62194
// exit ;
62192: GO 62223
// for i in tmp do
62194: LD_ADDR_VAR 0 1
62198: PUSH
62199: LD_VAR 0 2
62203: PUSH
62204: FOR_IN
62205: IFFALSE 62221
// SetLives ( i , 1 ) ;
62207: LD_VAR 0 1
62211: PPUSH
62212: LD_INT 1
62214: PPUSH
62215: CALL_OW 234
62219: GO 62204
62221: POP
62222: POP
// end ;
62223: PPOPN 2
62225: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62226: LD_EXP 13
62230: IFFALSE 62238
62232: PUSH
62233: LD_EXP 62
62237: AND
62238: IFFALSE 62525
62240: GO 62242
62242: DISABLE
62243: LD_INT 0
62245: PPUSH
62246: PPUSH
62247: PPUSH
// begin i := rand ( 1 , 7 ) ;
62248: LD_ADDR_VAR 0 1
62252: PUSH
62253: LD_INT 1
62255: PPUSH
62256: LD_INT 7
62258: PPUSH
62259: CALL_OW 12
62263: ST_TO_ADDR
// case i of 1 :
62264: LD_VAR 0 1
62268: PUSH
62269: LD_INT 1
62271: DOUBLE
62272: EQUAL
62273: IFTRUE 62277
62275: GO 62287
62277: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62278: LD_STRING earthquake(getX(game), 0, 32)
62280: PPUSH
62281: CALL_OW 559
62285: GO 62525
62287: LD_INT 2
62289: DOUBLE
62290: EQUAL
62291: IFTRUE 62295
62293: GO 62309
62295: POP
// begin ToLua ( displayStucuk(); ) ;
62296: LD_STRING displayStucuk();
62298: PPUSH
62299: CALL_OW 559
// ResetFog ;
62303: CALL_OW 335
// end ; 3 :
62307: GO 62525
62309: LD_INT 3
62311: DOUBLE
62312: EQUAL
62313: IFTRUE 62317
62315: GO 62421
62317: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62318: LD_ADDR_VAR 0 2
62322: PUSH
62323: LD_INT 22
62325: PUSH
62326: LD_OWVAR 2
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 25
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PPUSH
62349: CALL_OW 69
62353: ST_TO_ADDR
// if not tmp then
62354: LD_VAR 0 2
62358: NOT
62359: IFFALSE 62363
// exit ;
62361: GO 62525
// un := tmp [ rand ( 1 , tmp ) ] ;
62363: LD_ADDR_VAR 0 3
62367: PUSH
62368: LD_VAR 0 2
62372: PUSH
62373: LD_INT 1
62375: PPUSH
62376: LD_VAR 0 2
62380: PPUSH
62381: CALL_OW 12
62385: ARRAY
62386: ST_TO_ADDR
// if Crawls ( un ) then
62387: LD_VAR 0 3
62391: PPUSH
62392: CALL_OW 318
62396: IFFALSE 62407
// ComWalk ( un ) ;
62398: LD_VAR 0 3
62402: PPUSH
62403: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62407: LD_VAR 0 3
62411: PPUSH
62412: LD_INT 8
62414: PPUSH
62415: CALL_OW 336
// end ; 4 :
62419: GO 62525
62421: LD_INT 4
62423: DOUBLE
62424: EQUAL
62425: IFTRUE 62429
62427: GO 62503
62429: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62430: LD_ADDR_VAR 0 2
62434: PUSH
62435: LD_INT 22
62437: PUSH
62438: LD_OWVAR 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 30
62449: PUSH
62450: LD_INT 29
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PPUSH
62461: CALL_OW 69
62465: ST_TO_ADDR
// if not tmp then
62466: LD_VAR 0 2
62470: NOT
62471: IFFALSE 62475
// exit ;
62473: GO 62525
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62475: LD_VAR 0 2
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PPUSH
62484: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62488: LD_VAR 0 2
62492: PUSH
62493: LD_INT 1
62495: ARRAY
62496: PPUSH
62497: CALL_OW 65
// end ; 5 .. 7 :
62501: GO 62525
62503: LD_INT 5
62505: DOUBLE
62506: GREATEREQUAL
62507: IFFALSE 62515
62509: LD_INT 7
62511: DOUBLE
62512: LESSEQUAL
62513: IFTRUE 62517
62515: GO 62524
62517: POP
// StreamSibBomb ; end ;
62518: CALL 58706 0 0
62522: GO 62525
62524: POP
// end ;
62525: PPOPN 3
62527: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62528: LD_EXP 13
62532: IFFALSE 62540
62534: PUSH
62535: LD_EXP 63
62539: AND
62540: IFFALSE 62696
62542: GO 62544
62544: DISABLE
62545: LD_INT 0
62547: PPUSH
62548: PPUSH
62549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62550: LD_ADDR_VAR 0 2
62554: PUSH
62555: LD_INT 81
62557: PUSH
62558: LD_OWVAR 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: LD_INT 21
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 21
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PPUSH
62599: CALL_OW 69
62603: ST_TO_ADDR
// if not tmp then
62604: LD_VAR 0 2
62608: NOT
62609: IFFALSE 62613
// exit ;
62611: GO 62696
// p := 0 ;
62613: LD_ADDR_VAR 0 3
62617: PUSH
62618: LD_INT 0
62620: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62621: LD_INT 35
62623: PPUSH
62624: CALL_OW 67
// p := p + 1 ;
62628: LD_ADDR_VAR 0 3
62632: PUSH
62633: LD_VAR 0 3
62637: PUSH
62638: LD_INT 1
62640: PLUS
62641: ST_TO_ADDR
// for i in tmp do
62642: LD_ADDR_VAR 0 1
62646: PUSH
62647: LD_VAR 0 2
62651: PUSH
62652: FOR_IN
62653: IFFALSE 62684
// if GetLives ( i ) < 1000 then
62655: LD_VAR 0 1
62659: PPUSH
62660: CALL_OW 256
62664: PUSH
62665: LD_INT 1000
62667: LESS
62668: IFFALSE 62682
// SetLives ( i , 1000 ) ;
62670: LD_VAR 0 1
62674: PPUSH
62675: LD_INT 1000
62677: PPUSH
62678: CALL_OW 234
62682: GO 62652
62684: POP
62685: POP
// until p > 20 ;
62686: LD_VAR 0 3
62690: PUSH
62691: LD_INT 20
62693: GREATER
62694: IFFALSE 62621
// end ;
62696: PPOPN 3
62698: END
// every 0 0$1 trigger StreamModeActive and sTime do
62699: LD_EXP 13
62703: IFFALSE 62711
62705: PUSH
62706: LD_EXP 64
62710: AND
62711: IFFALSE 62746
62713: GO 62715
62715: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62716: LD_INT 28
62718: PPUSH
62719: LD_OWVAR 2
62723: PPUSH
62724: LD_INT 2
62726: PPUSH
62727: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62731: LD_INT 30
62733: PPUSH
62734: LD_OWVAR 2
62738: PPUSH
62739: LD_INT 2
62741: PPUSH
62742: CALL_OW 322
// end ;
62746: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62747: LD_EXP 13
62751: IFFALSE 62759
62753: PUSH
62754: LD_EXP 65
62758: AND
62759: IFFALSE 62880
62761: GO 62763
62763: DISABLE
62764: LD_INT 0
62766: PPUSH
62767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62768: LD_ADDR_VAR 0 2
62772: PUSH
62773: LD_INT 22
62775: PUSH
62776: LD_OWVAR 2
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 21
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: LD_INT 23
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: PPUSH
62817: CALL_OW 69
62821: ST_TO_ADDR
// if not tmp then
62822: LD_VAR 0 2
62826: NOT
62827: IFFALSE 62831
// exit ;
62829: GO 62880
// for i in tmp do
62831: LD_ADDR_VAR 0 1
62835: PUSH
62836: LD_VAR 0 2
62840: PUSH
62841: FOR_IN
62842: IFFALSE 62878
// begin if Crawls ( i ) then
62844: LD_VAR 0 1
62848: PPUSH
62849: CALL_OW 318
62853: IFFALSE 62864
// ComWalk ( i ) ;
62855: LD_VAR 0 1
62859: PPUSH
62860: CALL_OW 138
// SetClass ( i , 2 ) ;
62864: LD_VAR 0 1
62868: PPUSH
62869: LD_INT 2
62871: PPUSH
62872: CALL_OW 336
// end ;
62876: GO 62841
62878: POP
62879: POP
// end ;
62880: PPOPN 2
62882: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62883: LD_EXP 13
62887: IFFALSE 62895
62889: PUSH
62890: LD_EXP 66
62894: AND
62895: IFFALSE 63185
62897: GO 62899
62899: DISABLE
62900: LD_INT 0
62902: PPUSH
62903: PPUSH
62904: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62905: LD_OWVAR 2
62909: PPUSH
62910: LD_INT 9
62912: PPUSH
62913: LD_INT 1
62915: PPUSH
62916: LD_INT 1
62918: PPUSH
62919: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62923: LD_INT 9
62925: PPUSH
62926: LD_OWVAR 2
62930: PPUSH
62931: CALL_OW 343
// uc_side := 9 ;
62935: LD_ADDR_OWVAR 20
62939: PUSH
62940: LD_INT 9
62942: ST_TO_ADDR
// uc_nation := 2 ;
62943: LD_ADDR_OWVAR 21
62947: PUSH
62948: LD_INT 2
62950: ST_TO_ADDR
// hc_name := Dark Warrior ;
62951: LD_ADDR_OWVAR 26
62955: PUSH
62956: LD_STRING Dark Warrior
62958: ST_TO_ADDR
// hc_gallery :=  ;
62959: LD_ADDR_OWVAR 33
62963: PUSH
62964: LD_STRING 
62966: ST_TO_ADDR
// hc_noskilllimit := true ;
62967: LD_ADDR_OWVAR 76
62971: PUSH
62972: LD_INT 1
62974: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62975: LD_ADDR_OWVAR 31
62979: PUSH
62980: LD_INT 30
62982: PUSH
62983: LD_INT 30
62985: PUSH
62986: LD_INT 30
62988: PUSH
62989: LD_INT 30
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: ST_TO_ADDR
// un := CreateHuman ;
62998: LD_ADDR_VAR 0 3
63002: PUSH
63003: CALL_OW 44
63007: ST_TO_ADDR
// hc_noskilllimit := false ;
63008: LD_ADDR_OWVAR 76
63012: PUSH
63013: LD_INT 0
63015: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63016: LD_VAR 0 3
63020: PPUSH
63021: LD_INT 1
63023: PPUSH
63024: CALL_OW 51
// ToLua ( playRanger() ) ;
63028: LD_STRING playRanger()
63030: PPUSH
63031: CALL_OW 559
// p := 0 ;
63035: LD_ADDR_VAR 0 2
63039: PUSH
63040: LD_INT 0
63042: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63043: LD_INT 35
63045: PPUSH
63046: CALL_OW 67
// p := p + 1 ;
63050: LD_ADDR_VAR 0 2
63054: PUSH
63055: LD_VAR 0 2
63059: PUSH
63060: LD_INT 1
63062: PLUS
63063: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63064: LD_VAR 0 3
63068: PPUSH
63069: CALL_OW 256
63073: PUSH
63074: LD_INT 1000
63076: LESS
63077: IFFALSE 63091
// SetLives ( un , 1000 ) ;
63079: LD_VAR 0 3
63083: PPUSH
63084: LD_INT 1000
63086: PPUSH
63087: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63091: LD_VAR 0 3
63095: PPUSH
63096: LD_INT 81
63098: PUSH
63099: LD_OWVAR 2
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 91
63110: PUSH
63111: LD_VAR 0 3
63115: PUSH
63116: LD_INT 30
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PPUSH
63128: CALL_OW 69
63132: PPUSH
63133: LD_VAR 0 3
63137: PPUSH
63138: CALL_OW 74
63142: PPUSH
63143: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63147: LD_VAR 0 2
63151: PUSH
63152: LD_INT 80
63154: GREATER
63155: IFTRUE 63168
63157: PUSH
63158: LD_VAR 0 3
63162: PPUSH
63163: CALL_OW 301
63167: OR
63168: IFFALSE 63043
// if un then
63170: LD_VAR 0 3
63174: IFFALSE 63185
// RemoveUnit ( un ) ;
63176: LD_VAR 0 3
63180: PPUSH
63181: CALL_OW 64
// end ;
63185: PPOPN 3
63187: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63188: LD_EXP 67
63192: IFFALSE 63308
63194: GO 63196
63196: DISABLE
63197: LD_INT 0
63199: PPUSH
63200: PPUSH
63201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63202: LD_ADDR_VAR 0 2
63206: PUSH
63207: LD_INT 81
63209: PUSH
63210: LD_OWVAR 2
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 21
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PPUSH
63233: CALL_OW 69
63237: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63238: LD_STRING playComputer()
63240: PPUSH
63241: CALL_OW 559
// if not tmp then
63245: LD_VAR 0 2
63249: NOT
63250: IFFALSE 63254
// exit ;
63252: GO 63308
// for i in tmp do
63254: LD_ADDR_VAR 0 1
63258: PUSH
63259: LD_VAR 0 2
63263: PUSH
63264: FOR_IN
63265: IFFALSE 63306
// for j := 1 to 4 do
63267: LD_ADDR_VAR 0 3
63271: PUSH
63272: DOUBLE
63273: LD_INT 1
63275: DEC
63276: ST_TO_ADDR
63277: LD_INT 4
63279: PUSH
63280: FOR_TO
63281: IFFALSE 63302
// SetSkill ( i , j , 10 ) ;
63283: LD_VAR 0 1
63287: PPUSH
63288: LD_VAR 0 3
63292: PPUSH
63293: LD_INT 10
63295: PPUSH
63296: CALL_OW 237
63300: GO 63280
63302: POP
63303: POP
63304: GO 63264
63306: POP
63307: POP
// end ;
63308: PPOPN 3
63310: END
// every 0 0$1 trigger s30 do var i , tmp ;
63311: LD_EXP 68
63315: IFFALSE 63384
63317: GO 63319
63319: DISABLE
63320: LD_INT 0
63322: PPUSH
63323: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63324: LD_ADDR_VAR 0 2
63328: PUSH
63329: LD_INT 22
63331: PUSH
63332: LD_OWVAR 2
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PPUSH
63341: CALL_OW 69
63345: ST_TO_ADDR
// if not tmp then
63346: LD_VAR 0 2
63350: NOT
63351: IFFALSE 63355
// exit ;
63353: GO 63384
// for i in tmp do
63355: LD_ADDR_VAR 0 1
63359: PUSH
63360: LD_VAR 0 2
63364: PUSH
63365: FOR_IN
63366: IFFALSE 63382
// SetLives ( i , 300 ) ;
63368: LD_VAR 0 1
63372: PPUSH
63373: LD_INT 300
63375: PPUSH
63376: CALL_OW 234
63380: GO 63365
63382: POP
63383: POP
// end ;
63384: PPOPN 2
63386: END
// every 0 0$1 trigger s60 do var i , tmp ;
63387: LD_EXP 69
63391: IFFALSE 63460
63393: GO 63395
63395: DISABLE
63396: LD_INT 0
63398: PPUSH
63399: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63400: LD_ADDR_VAR 0 2
63404: PUSH
63405: LD_INT 22
63407: PUSH
63408: LD_OWVAR 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PPUSH
63417: CALL_OW 69
63421: ST_TO_ADDR
// if not tmp then
63422: LD_VAR 0 2
63426: NOT
63427: IFFALSE 63431
// exit ;
63429: GO 63460
// for i in tmp do
63431: LD_ADDR_VAR 0 1
63435: PUSH
63436: LD_VAR 0 2
63440: PUSH
63441: FOR_IN
63442: IFFALSE 63458
// SetLives ( i , 600 ) ;
63444: LD_VAR 0 1
63448: PPUSH
63449: LD_INT 600
63451: PPUSH
63452: CALL_OW 234
63456: GO 63441
63458: POP
63459: POP
// end ;
63460: PPOPN 2
63462: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63463: LD_INT 0
63465: PPUSH
// case cmd of 301 :
63466: LD_VAR 0 1
63470: PUSH
63471: LD_INT 301
63473: DOUBLE
63474: EQUAL
63475: IFTRUE 63479
63477: GO 63511
63479: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63480: LD_VAR 0 6
63484: PPUSH
63485: LD_VAR 0 7
63489: PPUSH
63490: LD_VAR 0 8
63494: PPUSH
63495: LD_VAR 0 4
63499: PPUSH
63500: LD_VAR 0 5
63504: PPUSH
63505: CALL 64724 0 5
63509: GO 63632
63511: LD_INT 302
63513: DOUBLE
63514: EQUAL
63515: IFTRUE 63519
63517: GO 63556
63519: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63520: LD_VAR 0 6
63524: PPUSH
63525: LD_VAR 0 7
63529: PPUSH
63530: LD_VAR 0 8
63534: PPUSH
63535: LD_VAR 0 9
63539: PPUSH
63540: LD_VAR 0 4
63544: PPUSH
63545: LD_VAR 0 5
63549: PPUSH
63550: CALL 64815 0 6
63554: GO 63632
63556: LD_INT 303
63558: DOUBLE
63559: EQUAL
63560: IFTRUE 63564
63562: GO 63601
63564: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63565: LD_VAR 0 6
63569: PPUSH
63570: LD_VAR 0 7
63574: PPUSH
63575: LD_VAR 0 8
63579: PPUSH
63580: LD_VAR 0 9
63584: PPUSH
63585: LD_VAR 0 4
63589: PPUSH
63590: LD_VAR 0 5
63594: PPUSH
63595: CALL 63637 0 6
63599: GO 63632
63601: LD_INT 304
63603: DOUBLE
63604: EQUAL
63605: IFTRUE 63609
63607: GO 63631
63609: POP
// hHackTeleport ( unit , x , y ) ; end ;
63610: LD_VAR 0 2
63614: PPUSH
63615: LD_VAR 0 4
63619: PPUSH
63620: LD_VAR 0 5
63624: PPUSH
63625: CALL 65408 0 3
63629: GO 63632
63631: POP
// end ;
63632: LD_VAR 0 12
63636: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63637: LD_INT 0
63639: PPUSH
63640: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63641: LD_VAR 0 1
63645: PUSH
63646: LD_INT 1
63648: LESS
63649: IFTRUE 63661
63651: PUSH
63652: LD_VAR 0 1
63656: PUSH
63657: LD_INT 3
63659: GREATER
63660: OR
63661: IFTRUE 63679
63663: PUSH
63664: LD_VAR 0 5
63668: PPUSH
63669: LD_VAR 0 6
63673: PPUSH
63674: CALL_OW 428
63678: OR
63679: IFFALSE 63683
// exit ;
63681: GO 64411
// uc_side := your_side ;
63683: LD_ADDR_OWVAR 20
63687: PUSH
63688: LD_OWVAR 2
63692: ST_TO_ADDR
// uc_nation := nation ;
63693: LD_ADDR_OWVAR 21
63697: PUSH
63698: LD_VAR 0 1
63702: ST_TO_ADDR
// bc_level = 1 ;
63703: LD_ADDR_OWVAR 43
63707: PUSH
63708: LD_INT 1
63710: ST_TO_ADDR
// case btype of 1 :
63711: LD_VAR 0 2
63715: PUSH
63716: LD_INT 1
63718: DOUBLE
63719: EQUAL
63720: IFTRUE 63724
63722: GO 63735
63724: POP
// bc_type := b_depot ; 2 :
63725: LD_ADDR_OWVAR 42
63729: PUSH
63730: LD_INT 0
63732: ST_TO_ADDR
63733: GO 64355
63735: LD_INT 2
63737: DOUBLE
63738: EQUAL
63739: IFTRUE 63743
63741: GO 63754
63743: POP
// bc_type := b_warehouse ; 3 :
63744: LD_ADDR_OWVAR 42
63748: PUSH
63749: LD_INT 1
63751: ST_TO_ADDR
63752: GO 64355
63754: LD_INT 3
63756: DOUBLE
63757: EQUAL
63758: IFTRUE 63762
63760: GO 63773
63762: POP
// bc_type := b_lab ; 4 .. 9 :
63763: LD_ADDR_OWVAR 42
63767: PUSH
63768: LD_INT 6
63770: ST_TO_ADDR
63771: GO 64355
63773: LD_INT 4
63775: DOUBLE
63776: GREATEREQUAL
63777: IFFALSE 63785
63779: LD_INT 9
63781: DOUBLE
63782: LESSEQUAL
63783: IFTRUE 63787
63785: GO 63847
63787: POP
// begin bc_type := b_lab_half ;
63788: LD_ADDR_OWVAR 42
63792: PUSH
63793: LD_INT 7
63795: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63796: LD_ADDR_OWVAR 44
63800: PUSH
63801: LD_INT 10
63803: PUSH
63804: LD_INT 11
63806: PUSH
63807: LD_INT 12
63809: PUSH
63810: LD_INT 15
63812: PUSH
63813: LD_INT 14
63815: PUSH
63816: LD_INT 13
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: PUSH
63827: LD_VAR 0 2
63831: PUSH
63832: LD_INT 3
63834: MINUS
63835: ARRAY
63836: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63837: LD_ADDR_OWVAR 45
63841: PUSH
63842: LD_INT 9
63844: ST_TO_ADDR
// end ; 10 .. 13 :
63845: GO 64355
63847: LD_INT 10
63849: DOUBLE
63850: GREATEREQUAL
63851: IFFALSE 63859
63853: LD_INT 13
63855: DOUBLE
63856: LESSEQUAL
63857: IFTRUE 63861
63859: GO 63938
63861: POP
// begin bc_type := b_lab_full ;
63862: LD_ADDR_OWVAR 42
63866: PUSH
63867: LD_INT 8
63869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63870: LD_ADDR_OWVAR 44
63874: PUSH
63875: LD_INT 10
63877: PUSH
63878: LD_INT 12
63880: PUSH
63881: LD_INT 14
63883: PUSH
63884: LD_INT 13
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: LD_INT 9
63900: MINUS
63901: ARRAY
63902: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63903: LD_ADDR_OWVAR 45
63907: PUSH
63908: LD_INT 11
63910: PUSH
63911: LD_INT 15
63913: PUSH
63914: LD_INT 12
63916: PUSH
63917: LD_INT 15
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: PUSH
63926: LD_VAR 0 2
63930: PUSH
63931: LD_INT 9
63933: MINUS
63934: ARRAY
63935: ST_TO_ADDR
// end ; 14 :
63936: GO 64355
63938: LD_INT 14
63940: DOUBLE
63941: EQUAL
63942: IFTRUE 63946
63944: GO 63957
63946: POP
// bc_type := b_workshop ; 15 :
63947: LD_ADDR_OWVAR 42
63951: PUSH
63952: LD_INT 2
63954: ST_TO_ADDR
63955: GO 64355
63957: LD_INT 15
63959: DOUBLE
63960: EQUAL
63961: IFTRUE 63965
63963: GO 63976
63965: POP
// bc_type := b_factory ; 16 :
63966: LD_ADDR_OWVAR 42
63970: PUSH
63971: LD_INT 3
63973: ST_TO_ADDR
63974: GO 64355
63976: LD_INT 16
63978: DOUBLE
63979: EQUAL
63980: IFTRUE 63984
63982: GO 63995
63984: POP
// bc_type := b_ext_gun ; 17 :
63985: LD_ADDR_OWVAR 42
63989: PUSH
63990: LD_INT 17
63992: ST_TO_ADDR
63993: GO 64355
63995: LD_INT 17
63997: DOUBLE
63998: EQUAL
63999: IFTRUE 64003
64001: GO 64031
64003: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64004: LD_ADDR_OWVAR 42
64008: PUSH
64009: LD_INT 19
64011: PUSH
64012: LD_INT 23
64014: PUSH
64015: LD_INT 19
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: PUSH
64023: LD_VAR 0 1
64027: ARRAY
64028: ST_TO_ADDR
64029: GO 64355
64031: LD_INT 18
64033: DOUBLE
64034: EQUAL
64035: IFTRUE 64039
64037: GO 64050
64039: POP
// bc_type := b_ext_radar ; 19 :
64040: LD_ADDR_OWVAR 42
64044: PUSH
64045: LD_INT 20
64047: ST_TO_ADDR
64048: GO 64355
64050: LD_INT 19
64052: DOUBLE
64053: EQUAL
64054: IFTRUE 64058
64056: GO 64069
64058: POP
// bc_type := b_ext_radio ; 20 :
64059: LD_ADDR_OWVAR 42
64063: PUSH
64064: LD_INT 22
64066: ST_TO_ADDR
64067: GO 64355
64069: LD_INT 20
64071: DOUBLE
64072: EQUAL
64073: IFTRUE 64077
64075: GO 64088
64077: POP
// bc_type := b_ext_siberium ; 21 :
64078: LD_ADDR_OWVAR 42
64082: PUSH
64083: LD_INT 21
64085: ST_TO_ADDR
64086: GO 64355
64088: LD_INT 21
64090: DOUBLE
64091: EQUAL
64092: IFTRUE 64096
64094: GO 64107
64096: POP
// bc_type := b_ext_computer ; 22 :
64097: LD_ADDR_OWVAR 42
64101: PUSH
64102: LD_INT 24
64104: ST_TO_ADDR
64105: GO 64355
64107: LD_INT 22
64109: DOUBLE
64110: EQUAL
64111: IFTRUE 64115
64113: GO 64126
64115: POP
// bc_type := b_ext_track ; 23 :
64116: LD_ADDR_OWVAR 42
64120: PUSH
64121: LD_INT 16
64123: ST_TO_ADDR
64124: GO 64355
64126: LD_INT 23
64128: DOUBLE
64129: EQUAL
64130: IFTRUE 64134
64132: GO 64145
64134: POP
// bc_type := b_ext_laser ; 24 :
64135: LD_ADDR_OWVAR 42
64139: PUSH
64140: LD_INT 25
64142: ST_TO_ADDR
64143: GO 64355
64145: LD_INT 24
64147: DOUBLE
64148: EQUAL
64149: IFTRUE 64153
64151: GO 64164
64153: POP
// bc_type := b_control_tower ; 25 :
64154: LD_ADDR_OWVAR 42
64158: PUSH
64159: LD_INT 36
64161: ST_TO_ADDR
64162: GO 64355
64164: LD_INT 25
64166: DOUBLE
64167: EQUAL
64168: IFTRUE 64172
64170: GO 64183
64172: POP
// bc_type := b_breastwork ; 26 :
64173: LD_ADDR_OWVAR 42
64177: PUSH
64178: LD_INT 31
64180: ST_TO_ADDR
64181: GO 64355
64183: LD_INT 26
64185: DOUBLE
64186: EQUAL
64187: IFTRUE 64191
64189: GO 64202
64191: POP
// bc_type := b_bunker ; 27 :
64192: LD_ADDR_OWVAR 42
64196: PUSH
64197: LD_INT 32
64199: ST_TO_ADDR
64200: GO 64355
64202: LD_INT 27
64204: DOUBLE
64205: EQUAL
64206: IFTRUE 64210
64208: GO 64221
64210: POP
// bc_type := b_turret ; 28 :
64211: LD_ADDR_OWVAR 42
64215: PUSH
64216: LD_INT 33
64218: ST_TO_ADDR
64219: GO 64355
64221: LD_INT 28
64223: DOUBLE
64224: EQUAL
64225: IFTRUE 64229
64227: GO 64240
64229: POP
// bc_type := b_armoury ; 29 :
64230: LD_ADDR_OWVAR 42
64234: PUSH
64235: LD_INT 4
64237: ST_TO_ADDR
64238: GO 64355
64240: LD_INT 29
64242: DOUBLE
64243: EQUAL
64244: IFTRUE 64248
64246: GO 64259
64248: POP
// bc_type := b_barracks ; 30 :
64249: LD_ADDR_OWVAR 42
64253: PUSH
64254: LD_INT 5
64256: ST_TO_ADDR
64257: GO 64355
64259: LD_INT 30
64261: DOUBLE
64262: EQUAL
64263: IFTRUE 64267
64265: GO 64278
64267: POP
// bc_type := b_solar_power ; 31 :
64268: LD_ADDR_OWVAR 42
64272: PUSH
64273: LD_INT 27
64275: ST_TO_ADDR
64276: GO 64355
64278: LD_INT 31
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64286
64284: GO 64297
64286: POP
// bc_type := b_oil_power ; 32 :
64287: LD_ADDR_OWVAR 42
64291: PUSH
64292: LD_INT 26
64294: ST_TO_ADDR
64295: GO 64355
64297: LD_INT 32
64299: DOUBLE
64300: EQUAL
64301: IFTRUE 64305
64303: GO 64316
64305: POP
// bc_type := b_siberite_power ; 33 :
64306: LD_ADDR_OWVAR 42
64310: PUSH
64311: LD_INT 28
64313: ST_TO_ADDR
64314: GO 64355
64316: LD_INT 33
64318: DOUBLE
64319: EQUAL
64320: IFTRUE 64324
64322: GO 64335
64324: POP
// bc_type := b_oil_mine ; 34 :
64325: LD_ADDR_OWVAR 42
64329: PUSH
64330: LD_INT 29
64332: ST_TO_ADDR
64333: GO 64355
64335: LD_INT 34
64337: DOUBLE
64338: EQUAL
64339: IFTRUE 64343
64341: GO 64354
64343: POP
// bc_type := b_siberite_mine ; end ;
64344: LD_ADDR_OWVAR 42
64348: PUSH
64349: LD_INT 30
64351: ST_TO_ADDR
64352: GO 64355
64354: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64355: LD_ADDR_VAR 0 8
64359: PUSH
64360: LD_VAR 0 5
64364: PPUSH
64365: LD_VAR 0 6
64369: PPUSH
64370: LD_VAR 0 3
64374: PPUSH
64375: CALL_OW 47
64379: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64380: LD_OWVAR 42
64384: PUSH
64385: LD_INT 32
64387: PUSH
64388: LD_INT 33
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: IN
64395: IFFALSE 64411
// PlaceWeaponTurret ( b , weapon ) ;
64397: LD_VAR 0 8
64401: PPUSH
64402: LD_VAR 0 4
64406: PPUSH
64407: CALL_OW 431
// end ;
64411: LD_VAR 0 7
64415: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64416: LD_INT 0
64418: PPUSH
64419: PPUSH
64420: PPUSH
64421: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64422: LD_ADDR_VAR 0 4
64426: PUSH
64427: LD_INT 22
64429: PUSH
64430: LD_OWVAR 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: LD_INT 30
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 30
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PPUSH
64471: CALL_OW 69
64475: ST_TO_ADDR
// if not tmp then
64476: LD_VAR 0 4
64480: NOT
64481: IFFALSE 64485
// exit ;
64483: GO 64544
// for i in tmp do
64485: LD_ADDR_VAR 0 2
64489: PUSH
64490: LD_VAR 0 4
64494: PUSH
64495: FOR_IN
64496: IFFALSE 64542
// for j = 1 to 3 do
64498: LD_ADDR_VAR 0 3
64502: PUSH
64503: DOUBLE
64504: LD_INT 1
64506: DEC
64507: ST_TO_ADDR
64508: LD_INT 3
64510: PUSH
64511: FOR_TO
64512: IFFALSE 64538
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64514: LD_VAR 0 2
64518: PPUSH
64519: CALL_OW 274
64523: PPUSH
64524: LD_VAR 0 3
64528: PPUSH
64529: LD_INT 99999
64531: PPUSH
64532: CALL_OW 277
64536: GO 64511
64538: POP
64539: POP
64540: GO 64495
64542: POP
64543: POP
// end ;
64544: LD_VAR 0 1
64548: RET
// export function hHackSetLevel10 ; var i , j ; begin
64549: LD_INT 0
64551: PPUSH
64552: PPUSH
64553: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64554: LD_ADDR_VAR 0 2
64558: PUSH
64559: LD_INT 21
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PPUSH
64569: CALL_OW 69
64573: PUSH
64574: FOR_IN
64575: IFFALSE 64627
// if IsSelected ( i ) then
64577: LD_VAR 0 2
64581: PPUSH
64582: CALL_OW 306
64586: IFFALSE 64625
// begin for j := 1 to 4 do
64588: LD_ADDR_VAR 0 3
64592: PUSH
64593: DOUBLE
64594: LD_INT 1
64596: DEC
64597: ST_TO_ADDR
64598: LD_INT 4
64600: PUSH
64601: FOR_TO
64602: IFFALSE 64623
// SetSkill ( i , j , 10 ) ;
64604: LD_VAR 0 2
64608: PPUSH
64609: LD_VAR 0 3
64613: PPUSH
64614: LD_INT 10
64616: PPUSH
64617: CALL_OW 237
64621: GO 64601
64623: POP
64624: POP
// end ;
64625: GO 64574
64627: POP
64628: POP
// end ;
64629: LD_VAR 0 1
64633: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64634: LD_INT 0
64636: PPUSH
64637: PPUSH
64638: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64639: LD_ADDR_VAR 0 2
64643: PUSH
64644: LD_INT 22
64646: PUSH
64647: LD_OWVAR 2
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 21
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PPUSH
64670: CALL_OW 69
64674: PUSH
64675: FOR_IN
64676: IFFALSE 64717
// begin for j := 1 to 4 do
64678: LD_ADDR_VAR 0 3
64682: PUSH
64683: DOUBLE
64684: LD_INT 1
64686: DEC
64687: ST_TO_ADDR
64688: LD_INT 4
64690: PUSH
64691: FOR_TO
64692: IFFALSE 64713
// SetSkill ( i , j , 10 ) ;
64694: LD_VAR 0 2
64698: PPUSH
64699: LD_VAR 0 3
64703: PPUSH
64704: LD_INT 10
64706: PPUSH
64707: CALL_OW 237
64711: GO 64691
64713: POP
64714: POP
// end ;
64715: GO 64675
64717: POP
64718: POP
// end ;
64719: LD_VAR 0 1
64723: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64724: LD_INT 0
64726: PPUSH
// uc_side := your_side ;
64727: LD_ADDR_OWVAR 20
64731: PUSH
64732: LD_OWVAR 2
64736: ST_TO_ADDR
// uc_nation := nation ;
64737: LD_ADDR_OWVAR 21
64741: PUSH
64742: LD_VAR 0 1
64746: ST_TO_ADDR
// InitHc ;
64747: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64751: LD_INT 0
64753: PPUSH
64754: LD_VAR 0 2
64758: PPUSH
64759: LD_VAR 0 3
64763: PPUSH
64764: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64768: LD_VAR 0 4
64772: PPUSH
64773: LD_VAR 0 5
64777: PPUSH
64778: CALL_OW 428
64782: PUSH
64783: LD_INT 0
64785: EQUAL
64786: IFFALSE 64810
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64788: CALL_OW 44
64792: PPUSH
64793: LD_VAR 0 4
64797: PPUSH
64798: LD_VAR 0 5
64802: PPUSH
64803: LD_INT 1
64805: PPUSH
64806: CALL_OW 48
// end ;
64810: LD_VAR 0 6
64814: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64815: LD_INT 0
64817: PPUSH
64818: PPUSH
// uc_side := your_side ;
64819: LD_ADDR_OWVAR 20
64823: PUSH
64824: LD_OWVAR 2
64828: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64829: LD_VAR 0 1
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: LD_INT 3
64842: PUSH
64843: LD_INT 4
64845: PUSH
64846: LD_INT 5
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: IN
64856: IFFALSE 64868
// uc_nation := nation_american else
64858: LD_ADDR_OWVAR 21
64862: PUSH
64863: LD_INT 1
64865: ST_TO_ADDR
64866: GO 64911
// if chassis in [ 11 , 12 , 13 , 14 ] then
64868: LD_VAR 0 1
64872: PUSH
64873: LD_INT 11
64875: PUSH
64876: LD_INT 12
64878: PUSH
64879: LD_INT 13
64881: PUSH
64882: LD_INT 14
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: IN
64891: IFFALSE 64903
// uc_nation := nation_arabian else
64893: LD_ADDR_OWVAR 21
64897: PUSH
64898: LD_INT 2
64900: ST_TO_ADDR
64901: GO 64911
// uc_nation := nation_russian ;
64903: LD_ADDR_OWVAR 21
64907: PUSH
64908: LD_INT 3
64910: ST_TO_ADDR
// vc_chassis := chassis ;
64911: LD_ADDR_OWVAR 37
64915: PUSH
64916: LD_VAR 0 1
64920: ST_TO_ADDR
// vc_engine := engine ;
64921: LD_ADDR_OWVAR 39
64925: PUSH
64926: LD_VAR 0 2
64930: ST_TO_ADDR
// vc_control := control ;
64931: LD_ADDR_OWVAR 38
64935: PUSH
64936: LD_VAR 0 3
64940: ST_TO_ADDR
// vc_weapon := weapon ;
64941: LD_ADDR_OWVAR 40
64945: PUSH
64946: LD_VAR 0 4
64950: ST_TO_ADDR
// un := CreateVehicle ;
64951: LD_ADDR_VAR 0 8
64955: PUSH
64956: CALL_OW 45
64960: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64961: LD_VAR 0 8
64965: PPUSH
64966: LD_INT 0
64968: PPUSH
64969: LD_INT 5
64971: PPUSH
64972: CALL_OW 12
64976: PPUSH
64977: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64981: LD_VAR 0 8
64985: PPUSH
64986: LD_VAR 0 5
64990: PPUSH
64991: LD_VAR 0 6
64995: PPUSH
64996: LD_INT 1
64998: PPUSH
64999: CALL_OW 48
// end ;
65003: LD_VAR 0 7
65007: RET
// export hInvincible ; every 1 do
65008: GO 65010
65010: DISABLE
// hInvincible := [ ] ;
65011: LD_ADDR_EXP 70
65015: PUSH
65016: EMPTY
65017: ST_TO_ADDR
65018: END
// every 10 do var i ;
65019: GO 65021
65021: DISABLE
65022: LD_INT 0
65024: PPUSH
// begin enable ;
65025: ENABLE
// if not hInvincible then
65026: LD_EXP 70
65030: NOT
65031: IFFALSE 65035
// exit ;
65033: GO 65079
// for i in hInvincible do
65035: LD_ADDR_VAR 0 1
65039: PUSH
65040: LD_EXP 70
65044: PUSH
65045: FOR_IN
65046: IFFALSE 65077
// if GetLives ( i ) < 1000 then
65048: LD_VAR 0 1
65052: PPUSH
65053: CALL_OW 256
65057: PUSH
65058: LD_INT 1000
65060: LESS
65061: IFFALSE 65075
// SetLives ( i , 1000 ) ;
65063: LD_VAR 0 1
65067: PPUSH
65068: LD_INT 1000
65070: PPUSH
65071: CALL_OW 234
65075: GO 65045
65077: POP
65078: POP
// end ;
65079: PPOPN 1
65081: END
// export function hHackInvincible ; var i ; begin
65082: LD_INT 0
65084: PPUSH
65085: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65086: LD_ADDR_VAR 0 2
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 21
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 21
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: LIST
65118: PPUSH
65119: CALL_OW 69
65123: PUSH
65124: FOR_IN
65125: IFFALSE 65186
// if IsSelected ( i ) then
65127: LD_VAR 0 2
65131: PPUSH
65132: CALL_OW 306
65136: IFFALSE 65184
// begin if i in hInvincible then
65138: LD_VAR 0 2
65142: PUSH
65143: LD_EXP 70
65147: IN
65148: IFFALSE 65168
// hInvincible := hInvincible diff i else
65150: LD_ADDR_EXP 70
65154: PUSH
65155: LD_EXP 70
65159: PUSH
65160: LD_VAR 0 2
65164: DIFF
65165: ST_TO_ADDR
65166: GO 65184
// hInvincible := hInvincible union i ;
65168: LD_ADDR_EXP 70
65172: PUSH
65173: LD_EXP 70
65177: PUSH
65178: LD_VAR 0 2
65182: UNION
65183: ST_TO_ADDR
// end ;
65184: GO 65124
65186: POP
65187: POP
// end ;
65188: LD_VAR 0 1
65192: RET
// export function hHackInvisible ; var i , j ; begin
65193: LD_INT 0
65195: PPUSH
65196: PPUSH
65197: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65198: LD_ADDR_VAR 0 2
65202: PUSH
65203: LD_INT 21
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PPUSH
65213: CALL_OW 69
65217: PUSH
65218: FOR_IN
65219: IFFALSE 65243
// if IsSelected ( i ) then
65221: LD_VAR 0 2
65225: PPUSH
65226: CALL_OW 306
65230: IFFALSE 65241
// ComForceInvisible ( i ) ;
65232: LD_VAR 0 2
65236: PPUSH
65237: CALL_OW 496
65241: GO 65218
65243: POP
65244: POP
// end ;
65245: LD_VAR 0 1
65249: RET
// export function hHackChangeYourSide ; begin
65250: LD_INT 0
65252: PPUSH
// if your_side = 8 then
65253: LD_OWVAR 2
65257: PUSH
65258: LD_INT 8
65260: EQUAL
65261: IFFALSE 65273
// your_side := 0 else
65263: LD_ADDR_OWVAR 2
65267: PUSH
65268: LD_INT 0
65270: ST_TO_ADDR
65271: GO 65287
// your_side := your_side + 1 ;
65273: LD_ADDR_OWVAR 2
65277: PUSH
65278: LD_OWVAR 2
65282: PUSH
65283: LD_INT 1
65285: PLUS
65286: ST_TO_ADDR
// end ;
65287: LD_VAR 0 1
65291: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65292: LD_INT 0
65294: PPUSH
65295: PPUSH
65296: PPUSH
// for i in all_units do
65297: LD_ADDR_VAR 0 2
65301: PUSH
65302: LD_OWVAR 3
65306: PUSH
65307: FOR_IN
65308: IFFALSE 65386
// if IsSelected ( i ) then
65310: LD_VAR 0 2
65314: PPUSH
65315: CALL_OW 306
65319: IFFALSE 65384
// begin j := GetSide ( i ) ;
65321: LD_ADDR_VAR 0 3
65325: PUSH
65326: LD_VAR 0 2
65330: PPUSH
65331: CALL_OW 255
65335: ST_TO_ADDR
// if j = 8 then
65336: LD_VAR 0 3
65340: PUSH
65341: LD_INT 8
65343: EQUAL
65344: IFFALSE 65356
// j := 0 else
65346: LD_ADDR_VAR 0 3
65350: PUSH
65351: LD_INT 0
65353: ST_TO_ADDR
65354: GO 65370
// j := j + 1 ;
65356: LD_ADDR_VAR 0 3
65360: PUSH
65361: LD_VAR 0 3
65365: PUSH
65366: LD_INT 1
65368: PLUS
65369: ST_TO_ADDR
// SetSide ( i , j ) ;
65370: LD_VAR 0 2
65374: PPUSH
65375: LD_VAR 0 3
65379: PPUSH
65380: CALL_OW 235
// end ;
65384: GO 65307
65386: POP
65387: POP
// end ;
65388: LD_VAR 0 1
65392: RET
// export function hHackFog ; begin
65393: LD_INT 0
65395: PPUSH
// FogOff ( true ) ;
65396: LD_INT 1
65398: PPUSH
65399: CALL_OW 344
// end ;
65403: LD_VAR 0 1
65407: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65408: LD_INT 0
65410: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65411: LD_VAR 0 1
65415: PPUSH
65416: LD_VAR 0 2
65420: PPUSH
65421: LD_VAR 0 3
65425: PPUSH
65426: LD_INT 1
65428: PPUSH
65429: LD_INT 1
65431: PPUSH
65432: CALL_OW 483
// CenterOnXY ( x , y ) ;
65436: LD_VAR 0 2
65440: PPUSH
65441: LD_VAR 0 3
65445: PPUSH
65446: CALL_OW 84
// end ;
65450: LD_VAR 0 4
65454: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65455: LD_INT 0
65457: PPUSH
65458: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65459: LD_VAR 0 1
65463: NOT
65464: IFTRUE 65483
65466: PUSH
65467: LD_VAR 0 2
65471: PPUSH
65472: LD_VAR 0 3
65476: PPUSH
65477: CALL_OW 488
65481: NOT
65482: OR
65483: IFTRUE 65518
65485: PUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL_OW 266
65495: PUSH
65496: LD_INT 3
65498: NONEQUAL
65499: IFFALSE 65517
65501: PUSH
65502: LD_VAR 0 1
65506: PPUSH
65507: CALL_OW 247
65511: PUSH
65512: LD_INT 1
65514: EQUAL
65515: NOT
65516: AND
65517: OR
65518: IFFALSE 65522
// exit ;
65520: GO 65804
// if GetType ( factory ) = unit_human then
65522: LD_VAR 0 1
65526: PPUSH
65527: CALL_OW 247
65531: PUSH
65532: LD_INT 1
65534: EQUAL
65535: IFFALSE 65552
// factory := IsInUnit ( factory ) ;
65537: LD_ADDR_VAR 0 1
65541: PUSH
65542: LD_VAR 0 1
65546: PPUSH
65547: CALL_OW 310
65551: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65552: LD_VAR 0 1
65556: PPUSH
65557: CALL_OW 266
65561: PUSH
65562: LD_INT 3
65564: NONEQUAL
65565: IFFALSE 65569
// exit ;
65567: GO 65804
// for i := 1 to Count ( factoryWaypoints ) do
65569: LD_ADDR_VAR 0 5
65573: PUSH
65574: DOUBLE
65575: LD_INT 1
65577: DEC
65578: ST_TO_ADDR
65579: LD_EXP 71
65583: PPUSH
65584: CALL 2764 0 1
65588: PUSH
65589: FOR_TO
65590: IFFALSE 65752
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65592: LD_VAR 0 2
65596: PPUSH
65597: LD_VAR 0 3
65601: PPUSH
65602: CALL_OW 428
65606: PUSH
65607: LD_EXP 71
65611: PUSH
65612: LD_VAR 0 5
65616: ARRAY
65617: PUSH
65618: LD_INT 2
65620: ARRAY
65621: EQUAL
65622: IFFALSE 65654
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65624: LD_ADDR_EXP 71
65628: PUSH
65629: LD_EXP 71
65633: PPUSH
65634: LD_VAR 0 5
65638: PPUSH
65639: CALL_OW 3
65643: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65644: CALL 65809 0 0
// exit ;
65648: POP
65649: POP
65650: GO 65804
// end else
65652: GO 65750
// if factory = factoryWaypoints [ i ] [ 2 ] then
65654: LD_VAR 0 1
65658: PUSH
65659: LD_EXP 71
65663: PUSH
65664: LD_VAR 0 5
65668: ARRAY
65669: PUSH
65670: LD_INT 2
65672: ARRAY
65673: EQUAL
65674: IFFALSE 65750
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65676: LD_ADDR_EXP 71
65680: PUSH
65681: LD_EXP 71
65685: PPUSH
65686: LD_VAR 0 5
65690: PPUSH
65691: CALL_OW 3
65695: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65696: LD_ADDR_EXP 71
65700: PUSH
65701: LD_EXP 71
65705: PPUSH
65706: LD_VAR 0 1
65710: PPUSH
65711: CALL_OW 255
65715: PUSH
65716: LD_VAR 0 1
65720: PUSH
65721: LD_VAR 0 2
65725: PUSH
65726: LD_VAR 0 3
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: PPUSH
65737: CALL 38740 0 2
65741: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65742: CALL 65809 0 0
// exit ;
65746: POP
65747: POP
65748: GO 65804
// end ; end ;
65750: GO 65589
65752: POP
65753: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65754: LD_ADDR_EXP 71
65758: PUSH
65759: LD_EXP 71
65763: PPUSH
65764: LD_VAR 0 1
65768: PPUSH
65769: CALL_OW 255
65773: PUSH
65774: LD_VAR 0 1
65778: PUSH
65779: LD_VAR 0 2
65783: PUSH
65784: LD_VAR 0 3
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: PPUSH
65795: CALL 38740 0 2
65799: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65800: CALL 65809 0 0
// end ;
65804: LD_VAR 0 4
65808: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65809: LD_INT 0
65811: PPUSH
65812: PPUSH
65813: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65814: LD_STRING resetFactoryWaypoint();
65816: PPUSH
65817: CALL_OW 559
// if factoryWaypoints then
65821: LD_EXP 71
65825: IFFALSE 65946
// begin list := factoryWaypoints ;
65827: LD_ADDR_VAR 0 3
65831: PUSH
65832: LD_EXP 71
65836: ST_TO_ADDR
// for i := 1 to list do
65837: LD_ADDR_VAR 0 2
65841: PUSH
65842: DOUBLE
65843: LD_INT 1
65845: DEC
65846: ST_TO_ADDR
65847: LD_VAR 0 3
65851: PUSH
65852: FOR_TO
65853: IFFALSE 65944
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65855: LD_STRING setFactoryWaypointXY(
65857: PUSH
65858: LD_VAR 0 3
65862: PUSH
65863: LD_VAR 0 2
65867: ARRAY
65868: PUSH
65869: LD_INT 1
65871: ARRAY
65872: STR
65873: PUSH
65874: LD_STRING ,
65876: STR
65877: PUSH
65878: LD_VAR 0 3
65882: PUSH
65883: LD_VAR 0 2
65887: ARRAY
65888: PUSH
65889: LD_INT 2
65891: ARRAY
65892: STR
65893: PUSH
65894: LD_STRING ,
65896: STR
65897: PUSH
65898: LD_VAR 0 3
65902: PUSH
65903: LD_VAR 0 2
65907: ARRAY
65908: PUSH
65909: LD_INT 3
65911: ARRAY
65912: STR
65913: PUSH
65914: LD_STRING ,
65916: STR
65917: PUSH
65918: LD_VAR 0 3
65922: PUSH
65923: LD_VAR 0 2
65927: ARRAY
65928: PUSH
65929: LD_INT 4
65931: ARRAY
65932: STR
65933: PUSH
65934: LD_STRING )
65936: STR
65937: PPUSH
65938: CALL_OW 559
65942: GO 65852
65944: POP
65945: POP
// end ; end ;
65946: LD_VAR 0 1
65950: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65951: LD_INT 0
65953: PPUSH
// if HexInfo ( x , y ) = warehouse then
65954: LD_VAR 0 2
65958: PPUSH
65959: LD_VAR 0 3
65963: PPUSH
65964: CALL_OW 428
65968: PUSH
65969: LD_VAR 0 1
65973: EQUAL
65974: IFFALSE 66001
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65976: LD_ADDR_EXP 73
65980: PUSH
65981: LD_EXP 73
65985: PPUSH
65986: LD_VAR 0 1
65990: PPUSH
65991: LD_INT 0
65993: PPUSH
65994: CALL_OW 1
65998: ST_TO_ADDR
65999: GO 66052
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66001: LD_ADDR_EXP 73
66005: PUSH
66006: LD_EXP 73
66010: PPUSH
66011: LD_VAR 0 1
66015: PPUSH
66016: LD_VAR 0 1
66020: PPUSH
66021: CALL_OW 255
66025: PUSH
66026: LD_VAR 0 1
66030: PUSH
66031: LD_VAR 0 2
66035: PUSH
66036: LD_VAR 0 3
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: PPUSH
66047: CALL_OW 1
66051: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66052: CALL 66061 0 0
// end ;
66056: LD_VAR 0 4
66060: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66061: LD_INT 0
66063: PPUSH
66064: PPUSH
66065: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66066: LD_STRING resetWarehouseGatheringPoints();
66068: PPUSH
66069: CALL_OW 559
// if warehouseGatheringPoints then
66073: LD_EXP 73
66077: IFFALSE 66203
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66079: LD_ADDR_VAR 0 3
66083: PUSH
66084: LD_EXP 73
66088: PPUSH
66089: CALL 42674 0 1
66093: ST_TO_ADDR
// for i := 1 to list do
66094: LD_ADDR_VAR 0 2
66098: PUSH
66099: DOUBLE
66100: LD_INT 1
66102: DEC
66103: ST_TO_ADDR
66104: LD_VAR 0 3
66108: PUSH
66109: FOR_TO
66110: IFFALSE 66201
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66112: LD_STRING setWarehouseGatheringPointXY(
66114: PUSH
66115: LD_VAR 0 3
66119: PUSH
66120: LD_VAR 0 2
66124: ARRAY
66125: PUSH
66126: LD_INT 1
66128: ARRAY
66129: STR
66130: PUSH
66131: LD_STRING ,
66133: STR
66134: PUSH
66135: LD_VAR 0 3
66139: PUSH
66140: LD_VAR 0 2
66144: ARRAY
66145: PUSH
66146: LD_INT 2
66148: ARRAY
66149: STR
66150: PUSH
66151: LD_STRING ,
66153: STR
66154: PUSH
66155: LD_VAR 0 3
66159: PUSH
66160: LD_VAR 0 2
66164: ARRAY
66165: PUSH
66166: LD_INT 3
66168: ARRAY
66169: STR
66170: PUSH
66171: LD_STRING ,
66173: STR
66174: PUSH
66175: LD_VAR 0 3
66179: PUSH
66180: LD_VAR 0 2
66184: ARRAY
66185: PUSH
66186: LD_INT 4
66188: ARRAY
66189: STR
66190: PUSH
66191: LD_STRING )
66193: STR
66194: PPUSH
66195: CALL_OW 559
66199: GO 66109
66201: POP
66202: POP
// end ; end ;
66203: LD_VAR 0 1
66207: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66208: LD_EXP 73
66212: IFFALSE 66907
66214: GO 66216
66216: DISABLE
66217: LD_INT 0
66219: PPUSH
66220: PPUSH
66221: PPUSH
66222: PPUSH
66223: PPUSH
66224: PPUSH
66225: PPUSH
66226: PPUSH
66227: PPUSH
// begin enable ;
66228: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66229: LD_ADDR_VAR 0 3
66233: PUSH
66234: LD_EXP 73
66238: PPUSH
66239: CALL 42674 0 1
66243: ST_TO_ADDR
// if not list then
66244: LD_VAR 0 3
66248: NOT
66249: IFFALSE 66253
// exit ;
66251: GO 66907
// for i := 1 to list do
66253: LD_ADDR_VAR 0 1
66257: PUSH
66258: DOUBLE
66259: LD_INT 1
66261: DEC
66262: ST_TO_ADDR
66263: LD_VAR 0 3
66267: PUSH
66268: FOR_TO
66269: IFFALSE 66905
// begin depot := list [ i ] [ 2 ] ;
66271: LD_ADDR_VAR 0 8
66275: PUSH
66276: LD_VAR 0 3
66280: PUSH
66281: LD_VAR 0 1
66285: ARRAY
66286: PUSH
66287: LD_INT 2
66289: ARRAY
66290: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66291: LD_ADDR_VAR 0 5
66295: PUSH
66296: LD_VAR 0 3
66300: PUSH
66301: LD_VAR 0 1
66305: ARRAY
66306: PUSH
66307: LD_INT 1
66309: ARRAY
66310: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66311: LD_VAR 0 8
66315: PPUSH
66316: CALL_OW 301
66320: IFTRUE 66339
66322: PUSH
66323: LD_VAR 0 5
66327: PUSH
66328: LD_VAR 0 8
66332: PPUSH
66333: CALL_OW 255
66337: NONEQUAL
66338: OR
66339: IFFALSE 66368
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66341: LD_ADDR_EXP 73
66345: PUSH
66346: LD_EXP 73
66350: PPUSH
66351: LD_VAR 0 8
66355: PPUSH
66356: LD_INT 0
66358: PPUSH
66359: CALL_OW 1
66363: ST_TO_ADDR
// exit ;
66364: POP
66365: POP
66366: GO 66907
// end ; x := list [ i ] [ 3 ] ;
66368: LD_ADDR_VAR 0 6
66372: PUSH
66373: LD_VAR 0 3
66377: PUSH
66378: LD_VAR 0 1
66382: ARRAY
66383: PUSH
66384: LD_INT 3
66386: ARRAY
66387: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66388: LD_ADDR_VAR 0 7
66392: PUSH
66393: LD_VAR 0 3
66397: PUSH
66398: LD_VAR 0 1
66402: ARRAY
66403: PUSH
66404: LD_INT 4
66406: ARRAY
66407: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
66408: LD_ADDR_VAR 0 9
66412: PUSH
66413: LD_VAR 0 6
66417: PPUSH
66418: LD_VAR 0 7
66422: PPUSH
66423: LD_INT 16
66425: PPUSH
66426: CALL 41248 0 3
66430: ST_TO_ADDR
// if not cratesNearbyPoint then
66431: LD_VAR 0 9
66435: NOT
66436: IFFALSE 66442
// exit ;
66438: POP
66439: POP
66440: GO 66907
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66442: LD_ADDR_VAR 0 4
66446: PUSH
66447: LD_INT 22
66449: PUSH
66450: LD_VAR 0 5
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: LD_INT 60
66464: PUSH
66465: EMPTY
66466: LIST
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 91
66474: PUSH
66475: LD_VAR 0 8
66479: PUSH
66480: LD_INT 6
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: LD_INT 25
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 25
66503: PUSH
66504: LD_INT 16
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: PPUSH
66522: CALL_OW 69
66526: PUSH
66527: LD_VAR 0 8
66531: PPUSH
66532: CALL_OW 313
66536: PPUSH
66537: LD_INT 3
66539: PUSH
66540: LD_INT 60
66542: PUSH
66543: EMPTY
66544: LIST
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: LD_INT 25
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 25
66565: PUSH
66566: LD_INT 16
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PPUSH
66582: CALL_OW 72
66586: UNION
66587: ST_TO_ADDR
// if tmp then
66588: LD_VAR 0 4
66592: IFFALSE 66672
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66594: LD_ADDR_VAR 0 4
66598: PUSH
66599: LD_VAR 0 4
66603: PPUSH
66604: LD_INT 3
66606: PPUSH
66607: CALL 39055 0 2
66611: ST_TO_ADDR
// for j in tmp do
66612: LD_ADDR_VAR 0 2
66616: PUSH
66617: LD_VAR 0 4
66621: PUSH
66622: FOR_IN
66623: IFFALSE 66666
// begin if IsInUnit ( j ) then
66625: LD_VAR 0 2
66629: PPUSH
66630: CALL_OW 310
66634: IFFALSE 66645
// ComExit ( j ) ;
66636: LD_VAR 0 2
66640: PPUSH
66641: CALL 39138 0 1
// AddComCollect ( j , x , y ) ;
66645: LD_VAR 0 2
66649: PPUSH
66650: LD_VAR 0 6
66654: PPUSH
66655: LD_VAR 0 7
66659: PPUSH
66660: CALL_OW 177
// end ;
66664: GO 66622
66666: POP
66667: POP
// exit ;
66668: POP
66669: POP
66670: GO 66907
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66672: LD_ADDR_VAR 0 4
66676: PUSH
66677: LD_INT 22
66679: PUSH
66680: LD_VAR 0 5
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 91
66691: PUSH
66692: LD_VAR 0 8
66696: PUSH
66697: LD_INT 8
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 34
66710: PUSH
66711: LD_INT 12
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 34
66720: PUSH
66721: LD_INT 51
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 34
66730: PUSH
66731: LD_INT 32
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 34
66740: PUSH
66741: LD_INT 89
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: PPUSH
66760: CALL_OW 69
66764: ST_TO_ADDR
// if tmp then
66765: LD_VAR 0 4
66769: IFFALSE 66903
// begin for j in tmp do
66771: LD_ADDR_VAR 0 2
66775: PUSH
66776: LD_VAR 0 4
66780: PUSH
66781: FOR_IN
66782: IFFALSE 66901
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66784: LD_VAR 0 2
66788: PPUSH
66789: CALL_OW 262
66793: PUSH
66794: LD_INT 3
66796: EQUAL
66797: IFTRUE 66814
66799: PUSH
66800: LD_VAR 0 2
66804: PPUSH
66805: CALL_OW 261
66809: PUSH
66810: LD_INT 20
66812: GREATER
66813: OR
66814: IFFALSE 66828
66816: PUSH
66817: LD_VAR 0 2
66821: PPUSH
66822: CALL_OW 314
66826: NOT
66827: AND
66828: IFFALSE 66858
66830: PUSH
66831: LD_VAR 0 2
66835: PPUSH
66836: CALL_OW 263
66840: PUSH
66841: LD_INT 1
66843: NONEQUAL
66844: IFTRUE 66857
66846: PUSH
66847: LD_VAR 0 2
66851: PPUSH
66852: CALL_OW 311
66856: OR
66857: AND
66858: IFFALSE 66899
// begin ComCollect ( j , x , y ) ;
66860: LD_VAR 0 2
66864: PPUSH
66865: LD_VAR 0 6
66869: PPUSH
66870: LD_VAR 0 7
66874: PPUSH
66875: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66879: LD_VAR 0 2
66883: PPUSH
66884: LD_VAR 0 8
66888: PPUSH
66889: CALL_OW 172
// exit ;
66893: POP
66894: POP
66895: POP
66896: POP
66897: GO 66907
// end ;
66899: GO 66781
66901: POP
66902: POP
// end ; end ;
66903: GO 66268
66905: POP
66906: POP
// end ;
66907: PPOPN 9
66909: END
