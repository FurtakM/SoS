// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: IFTRUE 247
 240: PUSH
 241: LD_VAR 0 2
 245: NOT
 246: OR
 247: IFFALSE 251
// exit ;
 249: GO 360
// result := 0 ;
 251: LD_ADDR_VAR 0 3
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// for i in tmp do
 259: LD_ADDR_VAR 0 4
 263: PUSH
 264: LD_VAR 0 6
 268: PUSH
 269: FOR_IN
 270: IFFALSE 358
// for j := 1 to 2 do
 272: LD_ADDR_VAR 0 5
 276: PUSH
 277: DOUBLE
 278: LD_INT 1
 280: DEC
 281: ST_TO_ADDR
 282: LD_INT 2
 284: PUSH
 285: FOR_TO
 286: IFFALSE 354
// if GetLabKind ( i , j ) in kinds then
 288: LD_VAR 0 4
 292: PPUSH
 293: LD_VAR 0 5
 297: PPUSH
 298: CALL_OW 268
 302: PUSH
 303: LD_VAR 0 2
 307: IN
 308: IFFALSE 352
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 310: LD_ADDR_VAR 0 2
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_VAR 0 4
 324: PPUSH
 325: LD_VAR 0 5
 329: PPUSH
 330: CALL_OW 268
 334: DIFF
 335: ST_TO_ADDR
// result := result + 1 ;
 336: LD_ADDR_VAR 0 3
 340: PUSH
 341: LD_VAR 0 3
 345: PUSH
 346: LD_INT 1
 348: PLUS
 349: ST_TO_ADDR
// continue ;
 350: GO 285
// end ;
 352: GO 285
 354: POP
 355: POP
 356: GO 269
 358: POP
 359: POP
// end ;
 360: LD_VAR 0 3
 364: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 365: LD_ADDR_OWVAR 47
 369: PUSH
 370: LD_VAR 0 11
 374: ST_TO_ADDR
// end ;
 375: PPOPN 11
 377: END
// export Omar ; every 0 0$1 do
 378: GO 380
 380: DISABLE
// begin uc_side := 1 ;
 381: LD_ADDR_OWVAR 20
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// uc_nation := 2 ;
 389: LD_ADDR_OWVAR 21
 393: PUSH
 394: LD_INT 2
 396: ST_TO_ADDR
// hc_class := class_desert_warior ;
 397: LD_ADDR_OWVAR 28
 401: PUSH
 402: LD_INT 11
 404: ST_TO_ADDR
// hc_sex := sex_male ;
 405: LD_ADDR_OWVAR 27
 409: PUSH
 410: LD_INT 1
 412: ST_TO_ADDR
// hc_name := Omar ;
 413: LD_ADDR_OWVAR 26
 417: PUSH
 418: LD_STRING Omar
 420: ST_TO_ADDR
// Omar := CreateHuman ;
 421: LD_ADDR_EXP 1
 425: PUSH
 426: CALL_OW 44
 430: ST_TO_ADDR
// SetTag ( Omar , 500 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 500
 438: PPUSH
 439: CALL_OW 109
// PlaceUnitXY ( Omar , 27 , 27 , false ) ;
 443: LD_EXP 1
 447: PPUSH
 448: LD_INT 27
 450: PPUSH
 451: LD_INT 27
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 48
// end ;
 461: END
// every 0 0$1 do var i ;
 462: GO 464
 464: DISABLE
 465: LD_INT 0
 467: PPUSH
// begin for i := 1 to 3 do
 468: LD_ADDR_VAR 0 1
 472: PUSH
 473: DOUBLE
 474: LD_INT 1
 476: DEC
 477: ST_TO_ADDR
 478: LD_INT 3
 480: PUSH
 481: FOR_TO
 482: IFFALSE 513
// AddComAttackPlace ( ar1 , 59 + ( ( i - 1 ) * 2 ) , 74 ) ;
 484: LD_INT 67
 486: PPUSH
 487: LD_INT 59
 489: PUSH
 490: LD_VAR 0 1
 494: PUSH
 495: LD_INT 1
 497: MINUS
 498: PUSH
 499: LD_INT 2
 501: MUL
 502: PLUS
 503: PPUSH
 504: LD_INT 74
 506: PPUSH
 507: CALL_OW 176
 511: GO 481
 513: POP
 514: POP
// end ; end_of_file
 515: PPOPN 1
 517: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
// if exist_mode then
 522: LD_VAR 0 2
 526: IFFALSE 572
// begin unit := CreateCharacter ( prefix & ident ) ;
 528: LD_ADDR_VAR 0 5
 532: PUSH
 533: LD_VAR 0 3
 537: PUSH
 538: LD_VAR 0 1
 542: STR
 543: PPUSH
 544: CALL_OW 34
 548: ST_TO_ADDR
// if unit then
 549: LD_VAR 0 5
 553: IFFALSE 570
// DeleteCharacters ( prefix & ident ) ;
 555: LD_VAR 0 3
 559: PUSH
 560: LD_VAR 0 1
 564: STR
 565: PPUSH
 566: CALL_OW 40
// end else
 570: GO 587
// unit := NewCharacter ( ident ) ;
 572: LD_ADDR_VAR 0 5
 576: PUSH
 577: LD_VAR 0 1
 581: PPUSH
 582: CALL_OW 25
 586: ST_TO_ADDR
// result := unit ;
 587: LD_ADDR_VAR 0 4
 591: PUSH
 592: LD_VAR 0 5
 596: ST_TO_ADDR
// end ;
 597: LD_VAR 0 4
 601: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
// if exist_mode then
 606: LD_VAR 0 2
 610: IFFALSE 635
// unit := CreateCharacter ( prefix & ident ) else
 612: LD_ADDR_VAR 0 5
 616: PUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_VAR 0 1
 626: STR
 627: PPUSH
 628: CALL_OW 34
 632: ST_TO_ADDR
 633: GO 650
// unit := NewCharacter ( ident ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_VAR 0 1
 644: PPUSH
 645: CALL_OW 25
 649: ST_TO_ADDR
// result := unit ;
 650: LD_ADDR_VAR 0 4
 654: PUSH
 655: LD_VAR 0 5
 659: ST_TO_ADDR
// end ;
 660: LD_VAR 0 4
 664: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
// if not side or not nation then
 669: LD_VAR 0 1
 673: NOT
 674: IFTRUE 683
 676: PUSH
 677: LD_VAR 0 2
 681: NOT
 682: OR
 683: IFFALSE 687
// exit ;
 685: GO 1457
// case nation of nation_american :
 687: LD_VAR 0 2
 691: PUSH
 692: LD_INT 1
 694: DOUBLE
 695: EQUAL
 696: IFTRUE 700
 698: GO 914
 700: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 701: LD_ADDR_VAR 0 4
 705: PUSH
 706: LD_INT 35
 708: PUSH
 709: LD_INT 45
 711: PUSH
 712: LD_INT 46
 714: PUSH
 715: LD_INT 47
 717: PUSH
 718: LD_INT 82
 720: PUSH
 721: LD_INT 83
 723: PUSH
 724: LD_INT 84
 726: PUSH
 727: LD_INT 85
 729: PUSH
 730: LD_INT 86
 732: PUSH
 733: LD_INT 1
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: LD_INT 6
 741: PUSH
 742: LD_INT 15
 744: PUSH
 745: LD_INT 16
 747: PUSH
 748: LD_INT 7
 750: PUSH
 751: LD_INT 12
 753: PUSH
 754: LD_INT 13
 756: PUSH
 757: LD_INT 10
 759: PUSH
 760: LD_INT 14
 762: PUSH
 763: LD_INT 20
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 22
 771: PUSH
 772: LD_INT 25
 774: PUSH
 775: LD_INT 32
 777: PUSH
 778: LD_INT 27
 780: PUSH
 781: LD_INT 36
 783: PUSH
 784: LD_INT 69
 786: PUSH
 787: LD_INT 39
 789: PUSH
 790: LD_INT 34
 792: PUSH
 793: LD_INT 40
 795: PUSH
 796: LD_INT 48
 798: PUSH
 799: LD_INT 49
 801: PUSH
 802: LD_INT 50
 804: PUSH
 805: LD_INT 51
 807: PUSH
 808: LD_INT 52
 810: PUSH
 811: LD_INT 53
 813: PUSH
 814: LD_INT 54
 816: PUSH
 817: LD_INT 55
 819: PUSH
 820: LD_INT 56
 822: PUSH
 823: LD_INT 57
 825: PUSH
 826: LD_INT 58
 828: PUSH
 829: LD_INT 59
 831: PUSH
 832: LD_INT 60
 834: PUSH
 835: LD_INT 61
 837: PUSH
 838: LD_INT 62
 840: PUSH
 841: LD_INT 80
 843: PUSH
 844: LD_INT 82
 846: PUSH
 847: LD_INT 83
 849: PUSH
 850: LD_INT 84
 852: PUSH
 853: LD_INT 85
 855: PUSH
 856: LD_INT 86
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: ST_TO_ADDR
 912: GO 1379
 914: LD_INT 2
 916: DOUBLE
 917: EQUAL
 918: IFTRUE 922
 920: GO 1148
 922: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: LD_INT 35
 930: PUSH
 931: LD_INT 45
 933: PUSH
 934: LD_INT 46
 936: PUSH
 937: LD_INT 47
 939: PUSH
 940: LD_INT 82
 942: PUSH
 943: LD_INT 83
 945: PUSH
 946: LD_INT 84
 948: PUSH
 949: LD_INT 85
 951: PUSH
 952: LD_INT 87
 954: PUSH
 955: LD_INT 70
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: LD_INT 11
 963: PUSH
 964: LD_INT 3
 966: PUSH
 967: LD_INT 4
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 6
 975: PUSH
 976: LD_INT 15
 978: PUSH
 979: LD_INT 18
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 17
 987: PUSH
 988: LD_INT 8
 990: PUSH
 991: LD_INT 20
 993: PUSH
 994: LD_INT 21
 996: PUSH
 997: LD_INT 22
 999: PUSH
1000: LD_INT 72
1002: PUSH
1003: LD_INT 26
1005: PUSH
1006: LD_INT 69
1008: PUSH
1009: LD_INT 39
1011: PUSH
1012: LD_INT 40
1014: PUSH
1015: LD_INT 41
1017: PUSH
1018: LD_INT 42
1020: PUSH
1021: LD_INT 43
1023: PUSH
1024: LD_INT 48
1026: PUSH
1027: LD_INT 49
1029: PUSH
1030: LD_INT 50
1032: PUSH
1033: LD_INT 51
1035: PUSH
1036: LD_INT 52
1038: PUSH
1039: LD_INT 53
1041: PUSH
1042: LD_INT 54
1044: PUSH
1045: LD_INT 55
1047: PUSH
1048: LD_INT 56
1050: PUSH
1051: LD_INT 60
1053: PUSH
1054: LD_INT 61
1056: PUSH
1057: LD_INT 62
1059: PUSH
1060: LD_INT 66
1062: PUSH
1063: LD_INT 67
1065: PUSH
1066: LD_INT 68
1068: PUSH
1069: LD_INT 81
1071: PUSH
1072: LD_INT 82
1074: PUSH
1075: LD_INT 83
1077: PUSH
1078: LD_INT 84
1080: PUSH
1081: LD_INT 85
1083: PUSH
1084: LD_INT 87
1086: PUSH
1087: LD_INT 88
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: ST_TO_ADDR
1146: GO 1379
1148: LD_INT 3
1150: DOUBLE
1151: EQUAL
1152: IFTRUE 1156
1154: GO 1378
1156: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_INT 46
1164: PUSH
1165: LD_INT 47
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 2
1173: PUSH
1174: LD_INT 82
1176: PUSH
1177: LD_INT 83
1179: PUSH
1180: LD_INT 84
1182: PUSH
1183: LD_INT 85
1185: PUSH
1186: LD_INT 86
1188: PUSH
1189: LD_INT 11
1191: PUSH
1192: LD_INT 9
1194: PUSH
1195: LD_INT 20
1197: PUSH
1198: LD_INT 19
1200: PUSH
1201: LD_INT 21
1203: PUSH
1204: LD_INT 24
1206: PUSH
1207: LD_INT 22
1209: PUSH
1210: LD_INT 25
1212: PUSH
1213: LD_INT 28
1215: PUSH
1216: LD_INT 29
1218: PUSH
1219: LD_INT 30
1221: PUSH
1222: LD_INT 31
1224: PUSH
1225: LD_INT 37
1227: PUSH
1228: LD_INT 38
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: LD_INT 27
1236: PUSH
1237: LD_INT 33
1239: PUSH
1240: LD_INT 69
1242: PUSH
1243: LD_INT 39
1245: PUSH
1246: LD_INT 34
1248: PUSH
1249: LD_INT 40
1251: PUSH
1252: LD_INT 71
1254: PUSH
1255: LD_INT 23
1257: PUSH
1258: LD_INT 44
1260: PUSH
1261: LD_INT 48
1263: PUSH
1264: LD_INT 49
1266: PUSH
1267: LD_INT 50
1269: PUSH
1270: LD_INT 51
1272: PUSH
1273: LD_INT 52
1275: PUSH
1276: LD_INT 53
1278: PUSH
1279: LD_INT 54
1281: PUSH
1282: LD_INT 55
1284: PUSH
1285: LD_INT 56
1287: PUSH
1288: LD_INT 57
1290: PUSH
1291: LD_INT 58
1293: PUSH
1294: LD_INT 59
1296: PUSH
1297: LD_INT 63
1299: PUSH
1300: LD_INT 64
1302: PUSH
1303: LD_INT 65
1305: PUSH
1306: LD_INT 82
1308: PUSH
1309: LD_INT 83
1311: PUSH
1312: LD_INT 84
1314: PUSH
1315: LD_INT 85
1317: PUSH
1318: LD_INT 86
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: ST_TO_ADDR
1376: GO 1379
1378: POP
// if state > - 1 and state < 3 then
1379: LD_VAR 0 3
1383: PUSH
1384: LD_INT 1
1386: NEG
1387: GREATER
1388: IFFALSE 1400
1390: PUSH
1391: LD_VAR 0 3
1395: PUSH
1396: LD_INT 3
1398: LESS
1399: AND
1400: IFFALSE 1457
// for i in result do
1402: LD_ADDR_VAR 0 5
1406: PUSH
1407: LD_VAR 0 4
1411: PUSH
1412: FOR_IN
1413: IFFALSE 1455
// if GetTech ( i , side ) <> state then
1415: LD_VAR 0 5
1419: PPUSH
1420: LD_VAR 0 1
1424: PPUSH
1425: CALL_OW 321
1429: PUSH
1430: LD_VAR 0 3
1434: NONEQUAL
1435: IFFALSE 1453
// result := result diff i ;
1437: LD_ADDR_VAR 0 4
1441: PUSH
1442: LD_VAR 0 4
1446: PUSH
1447: LD_VAR 0 5
1451: DIFF
1452: ST_TO_ADDR
1453: GO 1412
1455: POP
1456: POP
// end ;
1457: LD_VAR 0 4
1461: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1462: LD_INT 0
1464: PPUSH
1465: PPUSH
1466: PPUSH
// result := true ;
1467: LD_ADDR_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1475: LD_ADDR_VAR 0 5
1479: PUSH
1480: LD_VAR 0 2
1484: PPUSH
1485: CALL_OW 480
1489: ST_TO_ADDR
// if not tmp then
1490: LD_VAR 0 5
1494: NOT
1495: IFFALSE 1499
// exit ;
1497: GO 1548
// for i in tmp do
1499: LD_ADDR_VAR 0 4
1503: PUSH
1504: LD_VAR 0 5
1508: PUSH
1509: FOR_IN
1510: IFFALSE 1546
// if GetTech ( i , side ) <> state_researched then
1512: LD_VAR 0 4
1516: PPUSH
1517: LD_VAR 0 1
1521: PPUSH
1522: CALL_OW 321
1526: PUSH
1527: LD_INT 2
1529: NONEQUAL
1530: IFFALSE 1544
// begin result := false ;
1532: LD_ADDR_VAR 0 3
1536: PUSH
1537: LD_INT 0
1539: ST_TO_ADDR
// exit ;
1540: POP
1541: POP
1542: GO 1548
// end ;
1544: GO 1509
1546: POP
1547: POP
// end ;
1548: LD_VAR 0 3
1552: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1553: LD_INT 0
1555: PPUSH
1556: PPUSH
1557: PPUSH
1558: PPUSH
1559: PPUSH
1560: PPUSH
1561: PPUSH
1562: PPUSH
1563: PPUSH
1564: PPUSH
1565: PPUSH
1566: PPUSH
1567: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1568: LD_VAR 0 1
1572: NOT
1573: IFTRUE 1590
1575: PUSH
1576: LD_VAR 0 1
1580: PPUSH
1581: CALL_OW 257
1585: PUSH
1586: LD_INT 9
1588: NONEQUAL
1589: OR
1590: IFFALSE 1594
// exit ;
1592: GO 2173
// side := GetSide ( unit ) ;
1594: LD_ADDR_VAR 0 9
1598: PUSH
1599: LD_VAR 0 1
1603: PPUSH
1604: CALL_OW 255
1608: ST_TO_ADDR
// tech_space := tech_spacanom ;
1609: LD_ADDR_VAR 0 12
1613: PUSH
1614: LD_INT 29
1616: ST_TO_ADDR
// tech_time := tech_taurad ;
1617: LD_ADDR_VAR 0 13
1621: PUSH
1622: LD_INT 28
1624: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1625: LD_ADDR_VAR 0 11
1629: PUSH
1630: LD_VAR 0 1
1634: PPUSH
1635: CALL_OW 310
1639: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1640: LD_VAR 0 11
1644: PPUSH
1645: CALL_OW 247
1649: PUSH
1650: LD_INT 2
1652: EQUAL
1653: IFFALSE 1657
// exit ;
1655: GO 2173
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1657: LD_ADDR_VAR 0 8
1661: PUSH
1662: LD_INT 81
1664: PUSH
1665: LD_VAR 0 9
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 3
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 3
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: EMPTY
1692: LIST
1693: LIST
1694: PPUSH
1695: CALL_OW 69
1699: ST_TO_ADDR
// if not tmp then
1700: LD_VAR 0 8
1704: NOT
1705: IFFALSE 1709
// exit ;
1707: GO 2173
// if in_unit then
1709: LD_VAR 0 11
1713: IFFALSE 1737
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1715: LD_ADDR_VAR 0 10
1719: PUSH
1720: LD_VAR 0 8
1724: PPUSH
1725: LD_VAR 0 11
1729: PPUSH
1730: CALL_OW 74
1734: ST_TO_ADDR
1735: GO 1757
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1737: LD_ADDR_VAR 0 10
1741: PUSH
1742: LD_VAR 0 8
1746: PPUSH
1747: LD_VAR 0 1
1751: PPUSH
1752: CALL_OW 74
1756: ST_TO_ADDR
// if not enemy then
1757: LD_VAR 0 10
1761: NOT
1762: IFFALSE 1766
// exit ;
1764: GO 2173
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1766: LD_VAR 0 11
1770: IFFALSE 1792
1772: PUSH
1773: LD_VAR 0 11
1777: PPUSH
1778: LD_VAR 0 10
1782: PPUSH
1783: CALL_OW 296
1787: PUSH
1788: LD_INT 13
1790: GREATER
1791: AND
1792: IFTRUE 1814
1794: PUSH
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_VAR 0 10
1804: PPUSH
1805: CALL_OW 296
1809: PUSH
1810: LD_INT 12
1812: GREATER
1813: OR
1814: IFFALSE 1818
// exit ;
1816: GO 2173
// missile := [ 1 ] ;
1818: LD_ADDR_VAR 0 14
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: EMPTY
1827: LIST
1828: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1829: LD_VAR 0 9
1833: PPUSH
1834: LD_VAR 0 12
1838: PPUSH
1839: CALL_OW 325
1843: IFFALSE 1872
// missile := Replace ( missile , missile + 1 , 2 ) ;
1845: LD_ADDR_VAR 0 14
1849: PUSH
1850: LD_VAR 0 14
1854: PPUSH
1855: LD_VAR 0 14
1859: PUSH
1860: LD_INT 1
1862: PLUS
1863: PPUSH
1864: LD_INT 2
1866: PPUSH
1867: CALL_OW 1
1871: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1872: LD_VAR 0 9
1876: PPUSH
1877: LD_VAR 0 13
1881: PPUSH
1882: CALL_OW 325
1886: IFFALSE 1910
1888: PUSH
1889: LD_VAR 0 10
1893: PPUSH
1894: CALL_OW 255
1898: PPUSH
1899: LD_VAR 0 13
1903: PPUSH
1904: CALL_OW 325
1908: NOT
1909: AND
1910: IFFALSE 1939
// missile := Replace ( missile , missile + 1 , 3 ) ;
1912: LD_ADDR_VAR 0 14
1916: PUSH
1917: LD_VAR 0 14
1921: PPUSH
1922: LD_VAR 0 14
1926: PUSH
1927: LD_INT 1
1929: PLUS
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: CALL_OW 1
1938: ST_TO_ADDR
// if missile < 2 then
1939: LD_VAR 0 14
1943: PUSH
1944: LD_INT 2
1946: LESS
1947: IFFALSE 1951
// exit ;
1949: GO 2173
// x := GetX ( enemy ) ;
1951: LD_ADDR_VAR 0 4
1955: PUSH
1956: LD_VAR 0 10
1960: PPUSH
1961: CALL_OW 250
1965: ST_TO_ADDR
// y := GetY ( enemy ) ;
1966: LD_ADDR_VAR 0 5
1970: PUSH
1971: LD_VAR 0 10
1975: PPUSH
1976: CALL_OW 251
1980: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1981: LD_ADDR_VAR 0 6
1985: PUSH
1986: LD_VAR 0 4
1990: PUSH
1991: LD_INT 1
1993: NEG
1994: PPUSH
1995: LD_INT 1
1997: PPUSH
1998: CALL_OW 12
2002: PLUS
2003: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2004: LD_ADDR_VAR 0 7
2008: PUSH
2009: LD_VAR 0 5
2013: PUSH
2014: LD_INT 1
2016: NEG
2017: PPUSH
2018: LD_INT 1
2020: PPUSH
2021: CALL_OW 12
2025: PLUS
2026: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2027: LD_VAR 0 6
2031: PPUSH
2032: LD_VAR 0 7
2036: PPUSH
2037: CALL_OW 488
2041: NOT
2042: IFFALSE 2064
// begin _x := x ;
2044: LD_ADDR_VAR 0 6
2048: PUSH
2049: LD_VAR 0 4
2053: ST_TO_ADDR
// _y := y ;
2054: LD_ADDR_VAR 0 7
2058: PUSH
2059: LD_VAR 0 5
2063: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2064: LD_ADDR_VAR 0 3
2068: PUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_VAR 0 14
2076: PPUSH
2077: CALL_OW 12
2081: ST_TO_ADDR
// case i of 1 :
2082: LD_VAR 0 3
2086: PUSH
2087: LD_INT 1
2089: DOUBLE
2090: EQUAL
2091: IFTRUE 2095
2093: GO 2112
2095: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2096: LD_VAR 0 1
2100: PPUSH
2101: LD_VAR 0 10
2105: PPUSH
2106: CALL_OW 115
2110: GO 2173
2112: LD_INT 2
2114: DOUBLE
2115: EQUAL
2116: IFTRUE 2120
2118: GO 2142
2120: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2121: LD_VAR 0 1
2125: PPUSH
2126: LD_VAR 0 6
2130: PPUSH
2131: LD_VAR 0 7
2135: PPUSH
2136: CALL_OW 153
2140: GO 2173
2142: LD_INT 3
2144: DOUBLE
2145: EQUAL
2146: IFTRUE 2150
2148: GO 2172
2150: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_VAR 0 6
2160: PPUSH
2161: LD_VAR 0 7
2165: PPUSH
2166: CALL_OW 154
2170: GO 2173
2172: POP
// end ;
2173: LD_VAR 0 2
2177: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2178: LD_INT 0
2180: PPUSH
2181: PPUSH
2182: PPUSH
2183: PPUSH
2184: PPUSH
2185: PPUSH
// if not unit or not building then
2186: LD_VAR 0 1
2190: NOT
2191: IFTRUE 2200
2193: PUSH
2194: LD_VAR 0 2
2198: NOT
2199: OR
2200: IFFALSE 2204
// exit ;
2202: GO 2362
// x := GetX ( building ) ;
2204: LD_ADDR_VAR 0 5
2208: PUSH
2209: LD_VAR 0 2
2213: PPUSH
2214: CALL_OW 250
2218: ST_TO_ADDR
// y := GetY ( building ) ;
2219: LD_ADDR_VAR 0 6
2223: PUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: CALL_OW 251
2233: ST_TO_ADDR
// for i := 0 to 5 do
2234: LD_ADDR_VAR 0 4
2238: PUSH
2239: DOUBLE
2240: LD_INT 0
2242: DEC
2243: ST_TO_ADDR
2244: LD_INT 5
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2360
// begin _x := ShiftX ( x , i , 3 ) ;
2250: LD_ADDR_VAR 0 7
2254: PUSH
2255: LD_VAR 0 5
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: LD_INT 3
2267: PPUSH
2268: CALL_OW 272
2272: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2273: LD_ADDR_VAR 0 8
2277: PUSH
2278: LD_VAR 0 6
2282: PPUSH
2283: LD_VAR 0 4
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: CALL_OW 273
2295: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2296: LD_VAR 0 7
2300: PPUSH
2301: LD_VAR 0 8
2305: PPUSH
2306: CALL_OW 488
2310: NOT
2311: IFFALSE 2315
// continue ;
2313: GO 2247
// if HexInfo ( _x , _y ) = 0 then
2315: LD_VAR 0 7
2319: PPUSH
2320: LD_VAR 0 8
2324: PPUSH
2325: CALL_OW 428
2329: PUSH
2330: LD_INT 0
2332: EQUAL
2333: IFFALSE 2358
// begin ComMoveXY ( unit , _x , _y ) ;
2335: LD_VAR 0 1
2339: PPUSH
2340: LD_VAR 0 7
2344: PPUSH
2345: LD_VAR 0 8
2349: PPUSH
2350: CALL_OW 111
// exit ;
2354: POP
2355: POP
2356: GO 2362
// end ; end ;
2358: GO 2247
2360: POP
2361: POP
// end ;
2362: LD_VAR 0 3
2366: RET
// export function ScanBase ( side , base_area ) ; begin
2367: LD_INT 0
2369: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2370: LD_ADDR_VAR 0 3
2374: PUSH
2375: LD_VAR 0 2
2379: PPUSH
2380: LD_INT 81
2382: PUSH
2383: LD_VAR 0 1
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PPUSH
2392: CALL_OW 70
2396: ST_TO_ADDR
// end ;
2397: LD_VAR 0 3
2401: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2402: LD_INT 0
2404: PPUSH
2405: PPUSH
2406: PPUSH
2407: PPUSH
// result := false ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_INT 0
2415: ST_TO_ADDR
// side := GetSide ( unit ) ;
2416: LD_ADDR_VAR 0 3
2420: PUSH
2421: LD_VAR 0 1
2425: PPUSH
2426: CALL_OW 255
2430: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2431: LD_ADDR_VAR 0 4
2435: PUSH
2436: LD_VAR 0 1
2440: PPUSH
2441: CALL_OW 248
2445: ST_TO_ADDR
// case nat of 1 :
2446: LD_VAR 0 4
2450: PUSH
2451: LD_INT 1
2453: DOUBLE
2454: EQUAL
2455: IFTRUE 2459
2457: GO 2470
2459: POP
// tech := tech_lassight ; 2 :
2460: LD_ADDR_VAR 0 5
2464: PUSH
2465: LD_INT 12
2467: ST_TO_ADDR
2468: GO 2509
2470: LD_INT 2
2472: DOUBLE
2473: EQUAL
2474: IFTRUE 2478
2476: GO 2489
2478: POP
// tech := tech_mortar ; 3 :
2479: LD_ADDR_VAR 0 5
2483: PUSH
2484: LD_INT 41
2486: ST_TO_ADDR
2487: GO 2509
2489: LD_INT 3
2491: DOUBLE
2492: EQUAL
2493: IFTRUE 2497
2495: GO 2508
2497: POP
// tech := tech_bazooka ; end ;
2498: LD_ADDR_VAR 0 5
2502: PUSH
2503: LD_INT 44
2505: ST_TO_ADDR
2506: GO 2509
2508: POP
// if Researched ( side , tech ) then
2509: LD_VAR 0 3
2513: PPUSH
2514: LD_VAR 0 5
2518: PPUSH
2519: CALL_OW 325
2523: IFFALSE 2550
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 5
2532: PUSH
2533: LD_INT 8
2535: PUSH
2536: LD_INT 9
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: LD_VAR 0 4
2548: ARRAY
2549: ST_TO_ADDR
// end ;
2550: LD_VAR 0 2
2554: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2555: LD_INT 0
2557: PPUSH
2558: PPUSH
2559: PPUSH
// if not mines then
2560: LD_VAR 0 2
2564: NOT
2565: IFFALSE 2569
// exit ;
2567: GO 2713
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2569: LD_ADDR_VAR 0 5
2573: PUSH
2574: LD_INT 81
2576: PUSH
2577: LD_VAR 0 1
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: LD_INT 21
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL_OW 69
2611: ST_TO_ADDR
// for i in mines do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_VAR 0 2
2621: PUSH
2622: FOR_IN
2623: IFFALSE 2711
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2625: LD_VAR 0 4
2629: PUSH
2630: LD_INT 1
2632: ARRAY
2633: PPUSH
2634: LD_VAR 0 4
2638: PUSH
2639: LD_INT 2
2641: ARRAY
2642: PPUSH
2643: CALL_OW 458
2647: NOT
2648: IFFALSE 2652
// continue ;
2650: GO 2622
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2652: LD_VAR 0 4
2656: PUSH
2657: LD_INT 1
2659: ARRAY
2660: PPUSH
2661: LD_VAR 0 4
2665: PUSH
2666: LD_INT 2
2668: ARRAY
2669: PPUSH
2670: CALL_OW 428
2674: PUSH
2675: LD_VAR 0 5
2679: IN
2680: IFFALSE 2709
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2682: LD_VAR 0 4
2686: PUSH
2687: LD_INT 1
2689: ARRAY
2690: PPUSH
2691: LD_VAR 0 4
2695: PUSH
2696: LD_INT 2
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 1
2704: PPUSH
2705: CALL_OW 456
// end ;
2709: GO 2622
2711: POP
2712: POP
// end ;
2713: LD_VAR 0 3
2717: RET
// export function Count ( array ) ; begin
2718: LD_INT 0
2720: PPUSH
// result := array + 0 ;
2721: LD_ADDR_VAR 0 2
2725: PUSH
2726: LD_VAR 0 1
2730: PUSH
2731: LD_INT 0
2733: PLUS
2734: ST_TO_ADDR
// end ;
2735: LD_VAR 0 2
2739: RET
// export function IsEmpty ( building ) ; begin
2740: LD_INT 0
2742: PPUSH
// if not building then
2743: LD_VAR 0 1
2747: NOT
2748: IFFALSE 2752
// exit ;
2750: GO 2795
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2752: LD_ADDR_VAR 0 2
2756: PUSH
2757: LD_VAR 0 1
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 1
2769: PPUSH
2770: CALL_OW 255
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 58
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: IN
2794: ST_TO_ADDR
// end ;
2795: LD_VAR 0 2
2799: RET
// export function IsNotFull ( building ) ; var places ; begin
2800: LD_INT 0
2802: PPUSH
2803: PPUSH
// if not building then
2804: LD_VAR 0 1
2808: NOT
2809: IFFALSE 2813
// exit ;
2811: GO 2841
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2813: LD_ADDR_VAR 0 2
2817: PUSH
2818: LD_VAR 0 1
2822: PPUSH
2823: LD_INT 3
2825: PUSH
2826: LD_INT 62
2828: PUSH
2829: EMPTY
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PPUSH
2836: CALL_OW 72
2840: ST_TO_ADDR
// end ;
2841: LD_VAR 0 2
2845: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2846: LD_INT 0
2848: PPUSH
2849: PPUSH
2850: PPUSH
2851: PPUSH
// tmp := [ ] ;
2852: LD_ADDR_VAR 0 3
2856: PUSH
2857: EMPTY
2858: ST_TO_ADDR
// list := [ ] ;
2859: LD_ADDR_VAR 0 5
2863: PUSH
2864: EMPTY
2865: ST_TO_ADDR
// for i = 16 to 25 do
2866: LD_ADDR_VAR 0 4
2870: PUSH
2871: DOUBLE
2872: LD_INT 16
2874: DEC
2875: ST_TO_ADDR
2876: LD_INT 25
2878: PUSH
2879: FOR_TO
2880: IFFALSE 2953
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: LD_VAR 0 3
2891: PUSH
2892: LD_INT 22
2894: PUSH
2895: LD_VAR 0 1
2899: PPUSH
2900: CALL_OW 255
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 91
2911: PUSH
2912: LD_VAR 0 1
2916: PUSH
2917: LD_INT 6
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_VAR 0 4
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: PPUSH
2945: CALL_OW 69
2949: ADD
2950: ST_TO_ADDR
2951: GO 2879
2953: POP
2954: POP
// for i = 1 to tmp do
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_VAR 0 3
2969: PUSH
2970: FOR_TO
2971: IFFALSE 3059
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2973: LD_ADDR_VAR 0 5
2977: PUSH
2978: LD_VAR 0 5
2982: PUSH
2983: LD_VAR 0 3
2987: PUSH
2988: LD_VAR 0 4
2992: ARRAY
2993: PPUSH
2994: CALL_OW 266
2998: PUSH
2999: LD_VAR 0 3
3003: PUSH
3004: LD_VAR 0 4
3008: ARRAY
3009: PPUSH
3010: CALL_OW 250
3014: PUSH
3015: LD_VAR 0 3
3019: PUSH
3020: LD_VAR 0 4
3024: ARRAY
3025: PPUSH
3026: CALL_OW 251
3030: PUSH
3031: LD_VAR 0 3
3035: PUSH
3036: LD_VAR 0 4
3040: ARRAY
3041: PPUSH
3042: CALL_OW 254
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: ADD
3056: ST_TO_ADDR
3057: GO 2970
3059: POP
3060: POP
// result := list ;
3061: LD_ADDR_VAR 0 2
3065: PUSH
3066: LD_VAR 0 5
3070: ST_TO_ADDR
// end ;
3071: LD_VAR 0 2
3075: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3076: LD_INT 0
3078: PPUSH
3079: PPUSH
3080: PPUSH
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
// if not factory then
3085: LD_VAR 0 1
3089: NOT
3090: IFFALSE 3094
// exit ;
3092: GO 3697
// if control = control_apeman then
3094: LD_VAR 0 4
3098: PUSH
3099: LD_INT 5
3101: EQUAL
3102: IFFALSE 3211
// begin tmp := UnitsInside ( factory ) ;
3104: LD_ADDR_VAR 0 8
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: CALL_OW 313
3118: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3119: LD_VAR 0 8
3123: PPUSH
3124: LD_INT 25
3126: PUSH
3127: LD_INT 12
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 72
3138: NOT
3139: IFFALSE 3149
// control := control_manual ;
3141: LD_ADDR_VAR 0 4
3145: PUSH
3146: LD_INT 1
3148: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3149: LD_ADDR_VAR 0 8
3153: PUSH
3154: LD_VAR 0 1
3158: PPUSH
3159: CALL 2846 0 1
3163: ST_TO_ADDR
// if tmp then
3164: LD_VAR 0 8
3168: IFFALSE 3211
// begin for i in tmp do
3170: LD_ADDR_VAR 0 7
3174: PUSH
3175: LD_VAR 0 8
3179: PUSH
3180: FOR_IN
3181: IFFALSE 3209
// if i [ 1 ] = b_ext_radio then
3183: LD_VAR 0 7
3187: PUSH
3188: LD_INT 1
3190: ARRAY
3191: PUSH
3192: LD_INT 22
3194: EQUAL
3195: IFFALSE 3207
// begin control := control_remote ;
3197: LD_ADDR_VAR 0 4
3201: PUSH
3202: LD_INT 2
3204: ST_TO_ADDR
// break ;
3205: GO 3209
// end ;
3207: GO 3180
3209: POP
3210: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3211: LD_VAR 0 1
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: LD_VAR 0 3
3225: PPUSH
3226: LD_VAR 0 4
3230: PPUSH
3231: LD_VAR 0 5
3235: PPUSH
3236: CALL_OW 448
3240: IFFALSE 3275
// begin result := [ chassis , engine , control , weapon ] ;
3242: LD_ADDR_VAR 0 6
3246: PUSH
3247: LD_VAR 0 2
3251: PUSH
3252: LD_VAR 0 3
3256: PUSH
3257: LD_VAR 0 4
3261: PUSH
3262: LD_VAR 0 5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// exit ;
3273: GO 3697
// end ; _chassis := AvailableChassisList ( factory ) ;
3275: LD_ADDR_VAR 0 9
3279: PUSH
3280: LD_VAR 0 1
3284: PPUSH
3285: CALL_OW 475
3289: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3290: LD_ADDR_VAR 0 11
3294: PUSH
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 476
3304: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3305: LD_ADDR_VAR 0 12
3309: PUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: CALL_OW 477
3319: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3320: LD_ADDR_VAR 0 10
3324: PUSH
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 478
3334: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3335: LD_VAR 0 9
3339: NOT
3340: IFTRUE 3349
3342: PUSH
3343: LD_VAR 0 11
3347: NOT
3348: OR
3349: IFTRUE 3358
3351: PUSH
3352: LD_VAR 0 12
3356: NOT
3357: OR
3358: IFTRUE 3367
3360: PUSH
3361: LD_VAR 0 10
3365: NOT
3366: OR
3367: IFFALSE 3402
// begin result := [ chassis , engine , control , weapon ] ;
3369: LD_ADDR_VAR 0 6
3373: PUSH
3374: LD_VAR 0 2
3378: PUSH
3379: LD_VAR 0 3
3383: PUSH
3384: LD_VAR 0 4
3388: PUSH
3389: LD_VAR 0 5
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: ST_TO_ADDR
// exit ;
3400: GO 3697
// end ; if not chassis in _chassis then
3402: LD_VAR 0 2
3406: PUSH
3407: LD_VAR 0 9
3411: IN
3412: NOT
3413: IFFALSE 3439
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3415: LD_ADDR_VAR 0 2
3419: PUSH
3420: LD_VAR 0 9
3424: PUSH
3425: LD_INT 1
3427: PPUSH
3428: LD_VAR 0 9
3432: PPUSH
3433: CALL_OW 12
3437: ARRAY
3438: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3439: LD_VAR 0 2
3443: PPUSH
3444: LD_VAR 0 3
3448: PPUSH
3449: CALL 3702 0 2
3453: NOT
3454: IFFALSE 3515
// repeat engine := _engine [ 1 ] ;
3456: LD_ADDR_VAR 0 3
3460: PUSH
3461: LD_VAR 0 11
3465: PUSH
3466: LD_INT 1
3468: ARRAY
3469: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3470: LD_ADDR_VAR 0 11
3474: PUSH
3475: LD_VAR 0 11
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: CALL_OW 3
3487: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3488: LD_VAR 0 2
3492: PPUSH
3493: LD_VAR 0 3
3497: PPUSH
3498: CALL 3702 0 2
3502: IFTRUE 3513
3504: PUSH
3505: LD_VAR 0 11
3509: PUSH
3510: EMPTY
3511: EQUAL
3512: OR
3513: IFFALSE 3456
// if not control in _control then
3515: LD_VAR 0 4
3519: PUSH
3520: LD_VAR 0 12
3524: IN
3525: NOT
3526: IFFALSE 3552
// control := _control [ rand ( 1 , _control ) ] ;
3528: LD_ADDR_VAR 0 4
3532: PUSH
3533: LD_VAR 0 12
3537: PUSH
3538: LD_INT 1
3540: PPUSH
3541: LD_VAR 0 12
3545: PPUSH
3546: CALL_OW 12
3550: ARRAY
3551: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3552: LD_VAR 0 2
3556: PPUSH
3557: LD_VAR 0 5
3561: PPUSH
3562: CALL 3924 0 2
3566: NOT
3567: IFFALSE 3628
// repeat weapon := _weapon [ 1 ] ;
3569: LD_ADDR_VAR 0 5
3573: PUSH
3574: LD_VAR 0 10
3578: PUSH
3579: LD_INT 1
3581: ARRAY
3582: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3583: LD_ADDR_VAR 0 10
3587: PUSH
3588: LD_VAR 0 10
3592: PPUSH
3593: LD_INT 1
3595: PPUSH
3596: CALL_OW 3
3600: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3601: LD_VAR 0 2
3605: PPUSH
3606: LD_VAR 0 5
3610: PPUSH
3611: CALL 3924 0 2
3615: IFTRUE 3626
3617: PUSH
3618: LD_VAR 0 10
3622: PUSH
3623: EMPTY
3624: EQUAL
3625: OR
3626: IFFALSE 3569
// result := [ ] ;
3628: LD_ADDR_VAR 0 6
3632: PUSH
3633: EMPTY
3634: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_VAR 0 2
3644: PPUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 4
3654: PPUSH
3655: LD_VAR 0 5
3659: PPUSH
3660: CALL_OW 448
3664: IFFALSE 3697
// result := [ chassis , engine , control , weapon ] ;
3666: LD_ADDR_VAR 0 6
3670: PUSH
3671: LD_VAR 0 2
3675: PUSH
3676: LD_VAR 0 3
3680: PUSH
3681: LD_VAR 0 4
3685: PUSH
3686: LD_VAR 0 5
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: ST_TO_ADDR
// end ;
3697: LD_VAR 0 6
3701: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3702: LD_INT 0
3704: PPUSH
// if not chassis or not engine then
3705: LD_VAR 0 1
3709: NOT
3710: IFTRUE 3719
3712: PUSH
3713: LD_VAR 0 2
3717: NOT
3718: OR
3719: IFFALSE 3723
// exit ;
3721: GO 3919
// case engine of engine_solar :
3723: LD_VAR 0 2
3727: PUSH
3728: LD_INT 2
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3774
3736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: LD_INT 11
3744: PUSH
3745: LD_INT 12
3747: PUSH
3748: LD_INT 13
3750: PUSH
3751: LD_INT 14
3753: PUSH
3754: LD_INT 1
3756: PUSH
3757: LD_INT 2
3759: PUSH
3760: LD_INT 3
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: ST_TO_ADDR
3772: GO 3903
3774: LD_INT 1
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3844
3782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 11
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: LD_INT 13
3796: PUSH
3797: LD_INT 14
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 23
3820: PUSH
3821: LD_INT 22
3823: PUSH
3824: LD_INT 24
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: ST_TO_ADDR
3842: GO 3903
3844: LD_INT 3
3846: DOUBLE
3847: EQUAL
3848: IFTRUE 3852
3850: GO 3902
3852: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_INT 13
3860: PUSH
3861: LD_INT 14
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: LD_INT 3
3869: PUSH
3870: LD_INT 4
3872: PUSH
3873: LD_INT 5
3875: PUSH
3876: LD_INT 21
3878: PUSH
3879: LD_INT 22
3881: PUSH
3882: LD_INT 23
3884: PUSH
3885: LD_INT 24
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: ST_TO_ADDR
3900: GO 3903
3902: POP
// result := ( chassis in result ) ;
3903: LD_ADDR_VAR 0 3
3907: PUSH
3908: LD_VAR 0 1
3912: PUSH
3913: LD_VAR 0 3
3917: IN
3918: ST_TO_ADDR
// end ;
3919: LD_VAR 0 3
3923: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3924: LD_INT 0
3926: PPUSH
// if not chassis or not weapon then
3927: LD_VAR 0 1
3931: NOT
3932: IFTRUE 3941
3934: PUSH
3935: LD_VAR 0 2
3939: NOT
3940: OR
3941: IFFALSE 3945
// exit ;
3943: GO 5005
// case weapon of us_machine_gun :
3945: LD_VAR 0 2
3949: PUSH
3950: LD_INT 2
3952: DOUBLE
3953: EQUAL
3954: IFTRUE 3958
3956: GO 3988
3958: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: LD_INT 1
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: LD_INT 3
3972: PUSH
3973: LD_INT 4
3975: PUSH
3976: LD_INT 5
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: ST_TO_ADDR
3986: GO 4989
3988: LD_INT 3
3990: DOUBLE
3991: EQUAL
3992: IFTRUE 3996
3994: GO 4026
3996: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 1
4004: PUSH
4005: LD_INT 2
4007: PUSH
4008: LD_INT 3
4010: PUSH
4011: LD_INT 4
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: ST_TO_ADDR
4024: GO 4989
4026: LD_INT 11
4028: DOUBLE
4029: EQUAL
4030: IFTRUE 4034
4032: GO 4064
4034: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_INT 1
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: LD_INT 4
4051: PUSH
4052: LD_INT 5
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: ST_TO_ADDR
4062: GO 4989
4064: LD_INT 4
4066: DOUBLE
4067: EQUAL
4068: IFTRUE 4072
4070: GO 4098
4072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4073: LD_ADDR_VAR 0 3
4077: PUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: LD_INT 4
4086: PUSH
4087: LD_INT 5
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: ST_TO_ADDR
4096: GO 4989
4098: LD_INT 5
4100: DOUBLE
4101: EQUAL
4102: IFTRUE 4106
4104: GO 4132
4106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4107: LD_ADDR_VAR 0 3
4111: PUSH
4112: LD_INT 2
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: LD_INT 4
4120: PUSH
4121: LD_INT 5
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: ST_TO_ADDR
4130: GO 4989
4132: LD_INT 9
4134: DOUBLE
4135: EQUAL
4136: IFTRUE 4140
4138: GO 4166
4140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4141: LD_ADDR_VAR 0 3
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: LD_INT 5
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: ST_TO_ADDR
4164: GO 4989
4166: LD_INT 7
4168: DOUBLE
4169: EQUAL
4170: IFTRUE 4174
4172: GO 4200
4174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: LD_INT 2
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: LD_INT 5
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: ST_TO_ADDR
4198: GO 4989
4200: LD_INT 12
4202: DOUBLE
4203: EQUAL
4204: IFTRUE 4208
4206: GO 4234
4208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 3
4219: PUSH
4220: LD_INT 4
4222: PUSH
4223: LD_INT 5
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: ST_TO_ADDR
4232: GO 4989
4234: LD_INT 13
4236: DOUBLE
4237: EQUAL
4238: IFTRUE 4242
4240: GO 4268
4242: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4243: LD_ADDR_VAR 0 3
4247: PUSH
4248: LD_INT 2
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 4
4256: PUSH
4257: LD_INT 5
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: ST_TO_ADDR
4266: GO 4989
4268: LD_INT 14
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4294
4276: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4277: LD_ADDR_VAR 0 3
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: LD_INT 5
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: ST_TO_ADDR
4292: GO 4989
4294: LD_INT 6
4296: DOUBLE
4297: EQUAL
4298: IFTRUE 4302
4300: GO 4320
4302: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: LD_INT 5
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: ST_TO_ADDR
4318: GO 4989
4320: LD_INT 10
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4346
4328: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4329: LD_ADDR_VAR 0 3
4333: PUSH
4334: LD_INT 4
4336: PUSH
4337: LD_INT 5
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: ST_TO_ADDR
4344: GO 4989
4346: LD_INT 22
4348: DOUBLE
4349: EQUAL
4350: IFTRUE 4354
4352: GO 4380
4354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: LD_INT 11
4362: PUSH
4363: LD_INT 12
4365: PUSH
4366: LD_INT 13
4368: PUSH
4369: LD_INT 14
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: ST_TO_ADDR
4378: GO 4989
4380: LD_INT 23
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4414
4388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_INT 11
4396: PUSH
4397: LD_INT 12
4399: PUSH
4400: LD_INT 13
4402: PUSH
4403: LD_INT 14
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: ST_TO_ADDR
4412: GO 4989
4414: LD_INT 24
4416: DOUBLE
4417: EQUAL
4418: IFTRUE 4422
4420: GO 4448
4422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4423: LD_ADDR_VAR 0 3
4427: PUSH
4428: LD_INT 11
4430: PUSH
4431: LD_INT 12
4433: PUSH
4434: LD_INT 13
4436: PUSH
4437: LD_INT 14
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: ST_TO_ADDR
4446: GO 4989
4448: LD_INT 30
4450: DOUBLE
4451: EQUAL
4452: IFTRUE 4456
4454: GO 4482
4456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4457: LD_ADDR_VAR 0 3
4461: PUSH
4462: LD_INT 11
4464: PUSH
4465: LD_INT 12
4467: PUSH
4468: LD_INT 13
4470: PUSH
4471: LD_INT 14
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
4480: GO 4989
4482: LD_INT 25
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4508
4490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_INT 13
4498: PUSH
4499: LD_INT 14
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: ST_TO_ADDR
4506: GO 4989
4508: LD_INT 27
4510: DOUBLE
4511: EQUAL
4512: IFTRUE 4516
4514: GO 4534
4516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4517: LD_ADDR_VAR 0 3
4521: PUSH
4522: LD_INT 13
4524: PUSH
4525: LD_INT 14
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: ST_TO_ADDR
4532: GO 4989
4534: LD_INT 92
4536: DOUBLE
4537: EQUAL
4538: IFTRUE 4542
4540: GO 4568
4542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4543: LD_ADDR_VAR 0 3
4547: PUSH
4548: LD_INT 11
4550: PUSH
4551: LD_INT 12
4553: PUSH
4554: LD_INT 13
4556: PUSH
4557: LD_INT 14
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: ST_TO_ADDR
4566: GO 4989
4568: LD_INT 28
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4594
4576: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: LD_INT 13
4584: PUSH
4585: LD_INT 14
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: ST_TO_ADDR
4592: GO 4989
4594: LD_INT 29
4596: DOUBLE
4597: EQUAL
4598: IFTRUE 4602
4600: GO 4620
4602: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4603: LD_ADDR_VAR 0 3
4607: PUSH
4608: LD_INT 13
4610: PUSH
4611: LD_INT 14
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: ST_TO_ADDR
4618: GO 4989
4620: LD_INT 31
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4628
4626: GO 4646
4628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4629: LD_ADDR_VAR 0 3
4633: PUSH
4634: LD_INT 13
4636: PUSH
4637: LD_INT 14
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: ST_TO_ADDR
4644: GO 4989
4646: LD_INT 26
4648: DOUBLE
4649: EQUAL
4650: IFTRUE 4654
4652: GO 4672
4654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4655: LD_ADDR_VAR 0 3
4659: PUSH
4660: LD_INT 13
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: ST_TO_ADDR
4670: GO 4989
4672: LD_INT 42
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4680
4678: GO 4706
4680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4681: LD_ADDR_VAR 0 3
4685: PUSH
4686: LD_INT 21
4688: PUSH
4689: LD_INT 22
4691: PUSH
4692: LD_INT 23
4694: PUSH
4695: LD_INT 24
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: ST_TO_ADDR
4704: GO 4989
4706: LD_INT 43
4708: DOUBLE
4709: EQUAL
4710: IFTRUE 4714
4712: GO 4740
4714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4715: LD_ADDR_VAR 0 3
4719: PUSH
4720: LD_INT 21
4722: PUSH
4723: LD_INT 22
4725: PUSH
4726: LD_INT 23
4728: PUSH
4729: LD_INT 24
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: ST_TO_ADDR
4738: GO 4989
4740: LD_INT 44
4742: DOUBLE
4743: EQUAL
4744: IFTRUE 4748
4746: GO 4774
4748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: LD_INT 21
4756: PUSH
4757: LD_INT 22
4759: PUSH
4760: LD_INT 23
4762: PUSH
4763: LD_INT 24
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: ST_TO_ADDR
4772: GO 4989
4774: LD_INT 45
4776: DOUBLE
4777: EQUAL
4778: IFTRUE 4782
4780: GO 4808
4782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: LD_INT 21
4790: PUSH
4791: LD_INT 22
4793: PUSH
4794: LD_INT 23
4796: PUSH
4797: LD_INT 24
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: ST_TO_ADDR
4806: GO 4989
4808: LD_INT 49
4810: DOUBLE
4811: EQUAL
4812: IFTRUE 4816
4814: GO 4842
4816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4817: LD_ADDR_VAR 0 3
4821: PUSH
4822: LD_INT 21
4824: PUSH
4825: LD_INT 22
4827: PUSH
4828: LD_INT 23
4830: PUSH
4831: LD_INT 24
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
4840: GO 4989
4842: LD_INT 51
4844: DOUBLE
4845: EQUAL
4846: IFTRUE 4850
4848: GO 4876
4850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4851: LD_ADDR_VAR 0 3
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 22
4861: PUSH
4862: LD_INT 23
4864: PUSH
4865: LD_INT 24
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: ST_TO_ADDR
4874: GO 4989
4876: LD_INT 52
4878: DOUBLE
4879: EQUAL
4880: IFTRUE 4884
4882: GO 4910
4884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4885: LD_ADDR_VAR 0 3
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: LD_INT 22
4895: PUSH
4896: LD_INT 23
4898: PUSH
4899: LD_INT 24
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
4908: GO 4989
4910: LD_INT 53
4912: DOUBLE
4913: EQUAL
4914: IFTRUE 4918
4916: GO 4936
4918: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4919: LD_ADDR_VAR 0 3
4923: PUSH
4924: LD_INT 23
4926: PUSH
4927: LD_INT 24
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
4934: GO 4989
4936: LD_INT 46
4938: DOUBLE
4939: EQUAL
4940: IFTRUE 4944
4942: GO 4962
4944: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4945: LD_ADDR_VAR 0 3
4949: PUSH
4950: LD_INT 23
4952: PUSH
4953: LD_INT 24
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: ST_TO_ADDR
4960: GO 4989
4962: LD_INT 47
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4970
4968: GO 4988
4970: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 23
4978: PUSH
4979: LD_INT 24
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: ST_TO_ADDR
4986: GO 4989
4988: POP
// result := ( chassis in result ) ;
4989: LD_ADDR_VAR 0 3
4993: PUSH
4994: LD_VAR 0 1
4998: PUSH
4999: LD_VAR 0 3
5003: IN
5004: ST_TO_ADDR
// end ;
5005: LD_VAR 0 3
5009: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5010: LD_INT 0
5012: PPUSH
5013: PPUSH
5014: PPUSH
5015: PPUSH
5016: PPUSH
5017: PPUSH
5018: PPUSH
// result := array ;
5019: LD_ADDR_VAR 0 5
5023: PUSH
5024: LD_VAR 0 1
5028: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5029: LD_VAR 0 1
5033: NOT
5034: IFTRUE 5043
5036: PUSH
5037: LD_VAR 0 2
5041: NOT
5042: OR
5043: IFTRUE 5052
5045: PUSH
5046: LD_VAR 0 3
5050: NOT
5051: OR
5052: IFTRUE 5066
5054: PUSH
5055: LD_VAR 0 2
5059: PUSH
5060: LD_VAR 0 1
5064: GREATER
5065: OR
5066: IFTRUE 5080
5068: PUSH
5069: LD_VAR 0 3
5073: PUSH
5074: LD_VAR 0 1
5078: GREATER
5079: OR
5080: IFFALSE 5084
// exit ;
5082: GO 5380
// if direction then
5084: LD_VAR 0 4
5088: IFFALSE 5152
// begin d := 1 ;
5090: LD_ADDR_VAR 0 9
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
// if i_from > i_to then
5098: LD_VAR 0 2
5102: PUSH
5103: LD_VAR 0 3
5107: GREATER
5108: IFFALSE 5134
// length := ( array - i_from ) + i_to else
5110: LD_ADDR_VAR 0 11
5114: PUSH
5115: LD_VAR 0 1
5119: PUSH
5120: LD_VAR 0 2
5124: MINUS
5125: PUSH
5126: LD_VAR 0 3
5130: PLUS
5131: ST_TO_ADDR
5132: GO 5150
// length := i_to - i_from ;
5134: LD_ADDR_VAR 0 11
5138: PUSH
5139: LD_VAR 0 3
5143: PUSH
5144: LD_VAR 0 2
5148: MINUS
5149: ST_TO_ADDR
// end else
5150: GO 5213
// begin d := - 1 ;
5152: LD_ADDR_VAR 0 9
5156: PUSH
5157: LD_INT 1
5159: NEG
5160: ST_TO_ADDR
// if i_from > i_to then
5161: LD_VAR 0 2
5165: PUSH
5166: LD_VAR 0 3
5170: GREATER
5171: IFFALSE 5191
// length := i_from - i_to else
5173: LD_ADDR_VAR 0 11
5177: PUSH
5178: LD_VAR 0 2
5182: PUSH
5183: LD_VAR 0 3
5187: MINUS
5188: ST_TO_ADDR
5189: GO 5213
// length := ( array - i_to ) + i_from ;
5191: LD_ADDR_VAR 0 11
5195: PUSH
5196: LD_VAR 0 1
5200: PUSH
5201: LD_VAR 0 3
5205: MINUS
5206: PUSH
5207: LD_VAR 0 2
5211: PLUS
5212: ST_TO_ADDR
// end ; if not length then
5213: LD_VAR 0 11
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5380
// tmp := array ;
5222: LD_ADDR_VAR 0 10
5226: PUSH
5227: LD_VAR 0 1
5231: ST_TO_ADDR
// for i = 1 to length do
5232: LD_ADDR_VAR 0 6
5236: PUSH
5237: DOUBLE
5238: LD_INT 1
5240: DEC
5241: ST_TO_ADDR
5242: LD_VAR 0 11
5246: PUSH
5247: FOR_TO
5248: IFFALSE 5368
// begin for j = 1 to array do
5250: LD_ADDR_VAR 0 7
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_VAR 0 1
5264: PUSH
5265: FOR_TO
5266: IFFALSE 5354
// begin k := j + d ;
5268: LD_ADDR_VAR 0 8
5272: PUSH
5273: LD_VAR 0 7
5277: PUSH
5278: LD_VAR 0 9
5282: PLUS
5283: ST_TO_ADDR
// if k > array then
5284: LD_VAR 0 8
5288: PUSH
5289: LD_VAR 0 1
5293: GREATER
5294: IFFALSE 5304
// k := 1 ;
5296: LD_ADDR_VAR 0 8
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// if not k then
5304: LD_VAR 0 8
5308: NOT
5309: IFFALSE 5321
// k := array ;
5311: LD_ADDR_VAR 0 8
5315: PUSH
5316: LD_VAR 0 1
5320: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5321: LD_ADDR_VAR 0 10
5325: PUSH
5326: LD_VAR 0 10
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: LD_VAR 0 1
5340: PUSH
5341: LD_VAR 0 7
5345: ARRAY
5346: PPUSH
5347: CALL_OW 1
5351: ST_TO_ADDR
// end ;
5352: GO 5265
5354: POP
5355: POP
// array := tmp ;
5356: LD_ADDR_VAR 0 1
5360: PUSH
5361: LD_VAR 0 10
5365: ST_TO_ADDR
// end ;
5366: GO 5247
5368: POP
5369: POP
// result := array ;
5370: LD_ADDR_VAR 0 5
5374: PUSH
5375: LD_VAR 0 1
5379: ST_TO_ADDR
// end ;
5380: LD_VAR 0 5
5384: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5385: LD_INT 0
5387: PPUSH
5388: PPUSH
// result := 0 ;
5389: LD_ADDR_VAR 0 3
5393: PUSH
5394: LD_INT 0
5396: ST_TO_ADDR
// if not array or not value in array then
5397: LD_VAR 0 1
5401: NOT
5402: IFTRUE 5417
5404: PUSH
5405: LD_VAR 0 2
5409: PUSH
5410: LD_VAR 0 1
5414: IN
5415: NOT
5416: OR
5417: IFFALSE 5421
// exit ;
5419: GO 5475
// for i = 1 to array do
5421: LD_ADDR_VAR 0 4
5425: PUSH
5426: DOUBLE
5427: LD_INT 1
5429: DEC
5430: ST_TO_ADDR
5431: LD_VAR 0 1
5435: PUSH
5436: FOR_TO
5437: IFFALSE 5473
// if value = array [ i ] then
5439: LD_VAR 0 2
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: LD_VAR 0 4
5453: ARRAY
5454: EQUAL
5455: IFFALSE 5471
// begin result := i ;
5457: LD_ADDR_VAR 0 3
5461: PUSH
5462: LD_VAR 0 4
5466: ST_TO_ADDR
// exit ;
5467: POP
5468: POP
5469: GO 5475
// end ;
5471: GO 5436
5473: POP
5474: POP
// end ;
5475: LD_VAR 0 3
5479: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5480: LD_INT 0
5482: PPUSH
// vc_chassis := chassis ;
5483: LD_ADDR_OWVAR 37
5487: PUSH
5488: LD_VAR 0 1
5492: ST_TO_ADDR
// vc_engine := engine ;
5493: LD_ADDR_OWVAR 39
5497: PUSH
5498: LD_VAR 0 2
5502: ST_TO_ADDR
// vc_control := control ;
5503: LD_ADDR_OWVAR 38
5507: PUSH
5508: LD_VAR 0 3
5512: ST_TO_ADDR
// vc_weapon := weapon ;
5513: LD_ADDR_OWVAR 40
5517: PUSH
5518: LD_VAR 0 4
5522: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5523: LD_ADDR_OWVAR 41
5527: PUSH
5528: LD_VAR 0 5
5532: ST_TO_ADDR
// end ;
5533: LD_VAR 0 6
5537: RET
// export function WantPlant ( unit ) ; var task ; begin
5538: LD_INT 0
5540: PPUSH
5541: PPUSH
// result := false ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_INT 0
5549: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5550: LD_ADDR_VAR 0 3
5554: PUSH
5555: LD_VAR 0 1
5559: PPUSH
5560: CALL_OW 437
5564: ST_TO_ADDR
// if task then
5565: LD_VAR 0 3
5569: IFFALSE 5597
// if task [ 1 ] [ 1 ] = p then
5571: LD_VAR 0 3
5575: PUSH
5576: LD_INT 1
5578: ARRAY
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PUSH
5584: LD_STRING p
5586: EQUAL
5587: IFFALSE 5597
// result := true ;
5589: LD_ADDR_VAR 0 2
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// end ;
5597: LD_VAR 0 2
5601: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5602: LD_INT 0
5604: PPUSH
5605: PPUSH
5606: PPUSH
5607: PPUSH
// if pos < 1 then
5608: LD_VAR 0 2
5612: PUSH
5613: LD_INT 1
5615: LESS
5616: IFFALSE 5620
// exit ;
5618: GO 5923
// if pos = 1 then
5620: LD_VAR 0 2
5624: PUSH
5625: LD_INT 1
5627: EQUAL
5628: IFFALSE 5661
// result := Replace ( arr , pos [ 1 ] , value ) else
5630: LD_ADDR_VAR 0 4
5634: PUSH
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_VAR 0 2
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 3
5653: PPUSH
5654: CALL_OW 1
5658: ST_TO_ADDR
5659: GO 5923
// begin tmp := arr ;
5661: LD_ADDR_VAR 0 6
5665: PUSH
5666: LD_VAR 0 1
5670: ST_TO_ADDR
// s_arr := [ tmp ] ;
5671: LD_ADDR_VAR 0 7
5675: PUSH
5676: LD_VAR 0 6
5680: PUSH
5681: EMPTY
5682: LIST
5683: ST_TO_ADDR
// for i = 1 to pos - 1 do
5684: LD_ADDR_VAR 0 5
5688: PUSH
5689: DOUBLE
5690: LD_INT 1
5692: DEC
5693: ST_TO_ADDR
5694: LD_VAR 0 2
5698: PUSH
5699: LD_INT 1
5701: MINUS
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5749
// begin tmp := tmp [ pos [ i ] ] ;
5706: LD_ADDR_VAR 0 6
5710: PUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_VAR 0 2
5720: PUSH
5721: LD_VAR 0 5
5725: ARRAY
5726: ARRAY
5727: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5728: LD_ADDR_VAR 0 7
5732: PUSH
5733: LD_VAR 0 7
5737: PUSH
5738: LD_VAR 0 6
5742: PUSH
5743: EMPTY
5744: LIST
5745: ADD
5746: ST_TO_ADDR
// end ;
5747: GO 5703
5749: POP
5750: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_VAR 0 6
5760: PPUSH
5761: LD_VAR 0 2
5765: PUSH
5766: LD_VAR 0 2
5770: ARRAY
5771: PPUSH
5772: LD_VAR 0 3
5776: PPUSH
5777: CALL_OW 1
5781: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5782: LD_ADDR_VAR 0 7
5786: PUSH
5787: LD_VAR 0 7
5791: PPUSH
5792: LD_VAR 0 7
5796: PPUSH
5797: LD_VAR 0 6
5801: PPUSH
5802: CALL_OW 1
5806: ST_TO_ADDR
// for i = s_arr downto 2 do
5807: LD_ADDR_VAR 0 5
5811: PUSH
5812: DOUBLE
5813: LD_VAR 0 7
5817: INC
5818: ST_TO_ADDR
5819: LD_INT 2
5821: PUSH
5822: FOR_DOWNTO
5823: IFFALSE 5907
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5825: LD_ADDR_VAR 0 6
5829: PUSH
5830: LD_VAR 0 7
5834: PUSH
5835: LD_VAR 0 5
5839: PUSH
5840: LD_INT 1
5842: MINUS
5843: ARRAY
5844: PPUSH
5845: LD_VAR 0 2
5849: PUSH
5850: LD_VAR 0 5
5854: PUSH
5855: LD_INT 1
5857: MINUS
5858: ARRAY
5859: PPUSH
5860: LD_VAR 0 7
5864: PUSH
5865: LD_VAR 0 5
5869: ARRAY
5870: PPUSH
5871: CALL_OW 1
5875: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5876: LD_ADDR_VAR 0 7
5880: PUSH
5881: LD_VAR 0 7
5885: PPUSH
5886: LD_VAR 0 5
5890: PUSH
5891: LD_INT 1
5893: MINUS
5894: PPUSH
5895: LD_VAR 0 6
5899: PPUSH
5900: CALL_OW 1
5904: ST_TO_ADDR
// end ;
5905: GO 5822
5907: POP
5908: POP
// result := s_arr [ 1 ] ;
5909: LD_ADDR_VAR 0 4
5913: PUSH
5914: LD_VAR 0 7
5918: PUSH
5919: LD_INT 1
5921: ARRAY
5922: ST_TO_ADDR
// end ; end ;
5923: LD_VAR 0 4
5927: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5928: LD_INT 0
5930: PPUSH
5931: PPUSH
// if not list then
5932: LD_VAR 0 1
5936: NOT
5937: IFFALSE 5941
// exit ;
5939: GO 6032
// i := list [ pos1 ] ;
5941: LD_ADDR_VAR 0 5
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: LD_VAR 0 2
5955: ARRAY
5956: ST_TO_ADDR
// if not i then
5957: LD_VAR 0 5
5961: NOT
5962: IFFALSE 5966
// exit ;
5964: GO 6032
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5966: LD_ADDR_VAR 0 1
5970: PUSH
5971: LD_VAR 0 1
5975: PPUSH
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_VAR 0 1
5985: PUSH
5986: LD_VAR 0 3
5990: ARRAY
5991: PPUSH
5992: CALL_OW 1
5996: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5997: LD_ADDR_VAR 0 1
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_VAR 0 3
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 1
6021: ST_TO_ADDR
// result := list ;
6022: LD_ADDR_VAR 0 4
6026: PUSH
6027: LD_VAR 0 1
6031: ST_TO_ADDR
// end ;
6032: LD_VAR 0 4
6036: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6037: LD_INT 0
6039: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6040: LD_ADDR_VAR 0 5
6044: PUSH
6045: LD_VAR 0 1
6049: PPUSH
6050: CALL_OW 250
6054: PPUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 251
6064: PPUSH
6065: LD_VAR 0 2
6069: PPUSH
6070: LD_VAR 0 3
6074: PPUSH
6075: LD_VAR 0 4
6079: PPUSH
6080: CALL 6462 0 5
6084: ST_TO_ADDR
// end ;
6085: LD_VAR 0 5
6089: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6090: LD_INT 0
6092: PPUSH
6093: PPUSH
6094: PPUSH
6095: PPUSH
// if not list or not unit then
6096: LD_VAR 0 2
6100: NOT
6101: IFTRUE 6110
6103: PUSH
6104: LD_VAR 0 1
6108: NOT
6109: OR
6110: IFFALSE 6114
// exit ;
6112: GO 6457
// result := [ ] ;
6114: LD_ADDR_VAR 0 5
6118: PUSH
6119: EMPTY
6120: ST_TO_ADDR
// for i in list do
6121: LD_ADDR_VAR 0 6
6125: PUSH
6126: LD_VAR 0 2
6130: PUSH
6131: FOR_IN
6132: IFFALSE 6350
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6134: LD_ADDR_VAR 0 8
6138: PUSH
6139: LD_VAR 0 1
6143: PPUSH
6144: LD_VAR 0 6
6148: PUSH
6149: LD_INT 1
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 6
6157: PUSH
6158: LD_INT 2
6160: ARRAY
6161: PPUSH
6162: CALL_OW 297
6166: ST_TO_ADDR
// if not Count ( result ) then
6167: LD_VAR 0 5
6171: PPUSH
6172: CALL 2718 0 1
6176: NOT
6177: IFFALSE 6210
// begin result := Join ( result , [ i , tmp ] ) ;
6179: LD_ADDR_VAR 0 5
6183: PUSH
6184: LD_VAR 0 5
6188: PPUSH
6189: LD_VAR 0 6
6193: PUSH
6194: LD_VAR 0 8
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PPUSH
6203: CALL 38650 0 2
6207: ST_TO_ADDR
// continue ;
6208: GO 6131
// end ; if result [ result ] [ 2 ] <= tmp then
6210: LD_VAR 0 5
6214: PUSH
6215: LD_VAR 0 5
6219: ARRAY
6220: PUSH
6221: LD_INT 2
6223: ARRAY
6224: PUSH
6225: LD_VAR 0 8
6229: LESSEQUAL
6230: IFFALSE 6263
// result := Join ( result , [ i , tmp ] ) else
6232: LD_ADDR_VAR 0 5
6236: PUSH
6237: LD_VAR 0 5
6241: PPUSH
6242: LD_VAR 0 6
6246: PUSH
6247: LD_VAR 0 8
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL 38650 0 2
6260: ST_TO_ADDR
6261: GO 6348
// begin for j := 1 to Count ( result ) do
6263: LD_ADDR_VAR 0 7
6267: PUSH
6268: DOUBLE
6269: LD_INT 1
6271: DEC
6272: ST_TO_ADDR
6273: LD_VAR 0 5
6277: PPUSH
6278: CALL 2718 0 1
6282: PUSH
6283: FOR_TO
6284: IFFALSE 6346
// begin if tmp < result [ j ] [ 2 ] then
6286: LD_VAR 0 8
6290: PUSH
6291: LD_VAR 0 5
6295: PUSH
6296: LD_VAR 0 7
6300: ARRAY
6301: PUSH
6302: LD_INT 2
6304: ARRAY
6305: LESS
6306: IFFALSE 6344
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6308: LD_ADDR_VAR 0 5
6312: PUSH
6313: LD_VAR 0 5
6317: PPUSH
6318: LD_VAR 0 7
6322: PPUSH
6323: LD_VAR 0 6
6327: PUSH
6328: LD_VAR 0 8
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PPUSH
6337: CALL_OW 2
6341: ST_TO_ADDR
// break ;
6342: GO 6346
// end ; end ;
6344: GO 6283
6346: POP
6347: POP
// end ; end ;
6348: GO 6131
6350: POP
6351: POP
// if result and not asc then
6352: LD_VAR 0 5
6356: IFFALSE 6365
6358: PUSH
6359: LD_VAR 0 3
6363: NOT
6364: AND
6365: IFFALSE 6382
// result := ReverseArray ( result ) ;
6367: LD_ADDR_VAR 0 5
6371: PUSH
6372: LD_VAR 0 5
6376: PPUSH
6377: CALL 33740 0 1
6381: ST_TO_ADDR
// tmp := [ ] ;
6382: LD_ADDR_VAR 0 8
6386: PUSH
6387: EMPTY
6388: ST_TO_ADDR
// if mode then
6389: LD_VAR 0 4
6393: IFFALSE 6457
// begin for i := 1 to result do
6395: LD_ADDR_VAR 0 6
6399: PUSH
6400: DOUBLE
6401: LD_INT 1
6403: DEC
6404: ST_TO_ADDR
6405: LD_VAR 0 5
6409: PUSH
6410: FOR_TO
6411: IFFALSE 6445
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6413: LD_ADDR_VAR 0 8
6417: PUSH
6418: LD_VAR 0 8
6422: PPUSH
6423: LD_VAR 0 5
6427: PUSH
6428: LD_VAR 0 6
6432: ARRAY
6433: PUSH
6434: LD_INT 1
6436: ARRAY
6437: PPUSH
6438: CALL 38650 0 2
6442: ST_TO_ADDR
6443: GO 6410
6445: POP
6446: POP
// result := tmp ;
6447: LD_ADDR_VAR 0 5
6451: PUSH
6452: LD_VAR 0 8
6456: ST_TO_ADDR
// end ; end ;
6457: LD_VAR 0 5
6461: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6462: LD_INT 0
6464: PPUSH
6465: PPUSH
6466: PPUSH
6467: PPUSH
// if not list then
6468: LD_VAR 0 3
6472: NOT
6473: IFFALSE 6477
// exit ;
6475: GO 6867
// result := [ ] ;
6477: LD_ADDR_VAR 0 6
6481: PUSH
6482: EMPTY
6483: ST_TO_ADDR
// for i in list do
6484: LD_ADDR_VAR 0 7
6488: PUSH
6489: LD_VAR 0 3
6493: PUSH
6494: FOR_IN
6495: IFFALSE 6697
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6497: LD_ADDR_VAR 0 9
6501: PUSH
6502: LD_VAR 0 7
6506: PPUSH
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_VAR 0 2
6516: PPUSH
6517: CALL_OW 297
6521: ST_TO_ADDR
// if not result then
6522: LD_VAR 0 6
6526: NOT
6527: IFFALSE 6553
// result := [ [ i , tmp ] ] else
6529: LD_ADDR_VAR 0 6
6533: PUSH
6534: LD_VAR 0 7
6538: PUSH
6539: LD_VAR 0 9
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: ST_TO_ADDR
6551: GO 6695
// begin if result [ result ] [ 2 ] <= tmp then
6553: LD_VAR 0 6
6557: PUSH
6558: LD_VAR 0 6
6562: ARRAY
6563: PUSH
6564: LD_INT 2
6566: ARRAY
6567: PUSH
6568: LD_VAR 0 9
6572: LESSEQUAL
6573: IFFALSE 6615
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6575: LD_ADDR_VAR 0 6
6579: PUSH
6580: LD_VAR 0 6
6584: PPUSH
6585: LD_VAR 0 6
6589: PUSH
6590: LD_INT 1
6592: PLUS
6593: PPUSH
6594: LD_VAR 0 7
6598: PUSH
6599: LD_VAR 0 9
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 2
6612: ST_TO_ADDR
6613: GO 6695
// for j := 1 to result do
6615: LD_ADDR_VAR 0 8
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_VAR 0 6
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6693
// begin if tmp < result [ j ] [ 2 ] then
6633: LD_VAR 0 9
6637: PUSH
6638: LD_VAR 0 6
6642: PUSH
6643: LD_VAR 0 8
6647: ARRAY
6648: PUSH
6649: LD_INT 2
6651: ARRAY
6652: LESS
6653: IFFALSE 6691
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6655: LD_ADDR_VAR 0 6
6659: PUSH
6660: LD_VAR 0 6
6664: PPUSH
6665: LD_VAR 0 8
6669: PPUSH
6670: LD_VAR 0 7
6674: PUSH
6675: LD_VAR 0 9
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PPUSH
6684: CALL_OW 2
6688: ST_TO_ADDR
// break ;
6689: GO 6693
// end ; end ;
6691: GO 6630
6693: POP
6694: POP
// end ; end ;
6695: GO 6494
6697: POP
6698: POP
// if result and not asc then
6699: LD_VAR 0 6
6703: IFFALSE 6712
6705: PUSH
6706: LD_VAR 0 4
6710: NOT
6711: AND
6712: IFFALSE 6787
// begin tmp := result ;
6714: LD_ADDR_VAR 0 9
6718: PUSH
6719: LD_VAR 0 6
6723: ST_TO_ADDR
// for i = tmp downto 1 do
6724: LD_ADDR_VAR 0 7
6728: PUSH
6729: DOUBLE
6730: LD_VAR 0 9
6734: INC
6735: ST_TO_ADDR
6736: LD_INT 1
6738: PUSH
6739: FOR_DOWNTO
6740: IFFALSE 6785
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6742: LD_ADDR_VAR 0 6
6746: PUSH
6747: LD_VAR 0 6
6751: PPUSH
6752: LD_VAR 0 9
6756: PUSH
6757: LD_VAR 0 7
6761: MINUS
6762: PUSH
6763: LD_INT 1
6765: PLUS
6766: PPUSH
6767: LD_VAR 0 9
6771: PUSH
6772: LD_VAR 0 7
6776: ARRAY
6777: PPUSH
6778: CALL_OW 1
6782: ST_TO_ADDR
6783: GO 6739
6785: POP
6786: POP
// end ; tmp := [ ] ;
6787: LD_ADDR_VAR 0 9
6791: PUSH
6792: EMPTY
6793: ST_TO_ADDR
// if mode then
6794: LD_VAR 0 5
6798: IFFALSE 6867
// begin for i = 1 to result do
6800: LD_ADDR_VAR 0 7
6804: PUSH
6805: DOUBLE
6806: LD_INT 1
6808: DEC
6809: ST_TO_ADDR
6810: LD_VAR 0 6
6814: PUSH
6815: FOR_TO
6816: IFFALSE 6855
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6818: LD_ADDR_VAR 0 9
6822: PUSH
6823: LD_VAR 0 9
6827: PPUSH
6828: LD_VAR 0 7
6832: PPUSH
6833: LD_VAR 0 6
6837: PUSH
6838: LD_VAR 0 7
6842: ARRAY
6843: PUSH
6844: LD_INT 1
6846: ARRAY
6847: PPUSH
6848: CALL_OW 1
6852: ST_TO_ADDR
6853: GO 6815
6855: POP
6856: POP
// result := tmp ;
6857: LD_ADDR_VAR 0 6
6861: PUSH
6862: LD_VAR 0 9
6866: ST_TO_ADDR
// end ; end ;
6867: LD_VAR 0 6
6871: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6872: LD_INT 0
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6880: LD_ADDR_VAR 0 5
6884: PUSH
6885: LD_INT 0
6887: PUSH
6888: LD_INT 0
6890: PUSH
6891: LD_INT 0
6893: PUSH
6894: EMPTY
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: ST_TO_ADDR
// if not x or not y then
6902: LD_VAR 0 2
6906: NOT
6907: IFTRUE 6916
6909: PUSH
6910: LD_VAR 0 3
6914: NOT
6915: OR
6916: IFFALSE 6920
// exit ;
6918: GO 8576
// if not range then
6920: LD_VAR 0 4
6924: NOT
6925: IFFALSE 6935
// range := 10 ;
6927: LD_ADDR_VAR 0 4
6931: PUSH
6932: LD_INT 10
6934: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6935: LD_ADDR_VAR 0 8
6939: PUSH
6940: LD_INT 81
6942: PUSH
6943: LD_VAR 0 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 92
6954: PUSH
6955: LD_VAR 0 2
6959: PUSH
6960: LD_VAR 0 3
6964: PUSH
6965: LD_VAR 0 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 3
6978: PUSH
6979: LD_INT 21
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: PPUSH
6998: CALL_OW 69
7002: ST_TO_ADDR
// if not tmp then
7003: LD_VAR 0 8
7007: NOT
7008: IFFALSE 7012
// exit ;
7010: GO 8576
// for i in tmp do
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_VAR 0 8
7021: PUSH
7022: FOR_IN
7023: IFFALSE 8551
// begin points := [ 0 , 0 , 0 ] ;
7025: LD_ADDR_VAR 0 9
7029: PUSH
7030: LD_INT 0
7032: PUSH
7033: LD_INT 0
7035: PUSH
7036: LD_INT 0
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: ST_TO_ADDR
// bpoints := 1 ;
7044: LD_ADDR_VAR 0 10
7048: PUSH
7049: LD_INT 1
7051: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7052: LD_VAR 0 6
7056: PPUSH
7057: CALL_OW 247
7061: PUSH
7062: LD_INT 1
7064: DOUBLE
7065: EQUAL
7066: IFTRUE 7070
7068: GO 7652
7070: POP
// begin if GetClass ( i ) = 1 then
7071: LD_VAR 0 6
7075: PPUSH
7076: CALL_OW 257
7080: PUSH
7081: LD_INT 1
7083: EQUAL
7084: IFFALSE 7105
// points := [ 10 , 5 , 3 ] ;
7086: LD_ADDR_VAR 0 9
7090: PUSH
7091: LD_INT 10
7093: PUSH
7094: LD_INT 5
7096: PUSH
7097: LD_INT 3
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7105: LD_VAR 0 6
7109: PPUSH
7110: CALL_OW 257
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: LD_INT 4
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: IN
7129: IFFALSE 7150
// points := [ 3 , 2 , 1 ] ;
7131: LD_ADDR_VAR 0 9
7135: PUSH
7136: LD_INT 3
7138: PUSH
7139: LD_INT 2
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7150: LD_VAR 0 6
7154: PPUSH
7155: CALL_OW 257
7159: PUSH
7160: LD_INT 5
7162: EQUAL
7163: IFFALSE 7184
// points := [ 130 , 5 , 2 ] ;
7165: LD_ADDR_VAR 0 9
7169: PUSH
7170: LD_INT 130
7172: PUSH
7173: LD_INT 5
7175: PUSH
7176: LD_INT 2
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7184: LD_VAR 0 6
7188: PPUSH
7189: CALL_OW 257
7193: PUSH
7194: LD_INT 8
7196: EQUAL
7197: IFFALSE 7218
// points := [ 35 , 35 , 30 ] ;
7199: LD_ADDR_VAR 0 9
7203: PUSH
7204: LD_INT 35
7206: PUSH
7207: LD_INT 35
7209: PUSH
7210: LD_INT 30
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7218: LD_VAR 0 6
7222: PPUSH
7223: CALL_OW 257
7227: PUSH
7228: LD_INT 9
7230: EQUAL
7231: IFFALSE 7252
// points := [ 20 , 55 , 40 ] ;
7233: LD_ADDR_VAR 0 9
7237: PUSH
7238: LD_INT 20
7240: PUSH
7241: LD_INT 55
7243: PUSH
7244: LD_INT 40
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7252: LD_VAR 0 6
7256: PPUSH
7257: CALL_OW 257
7261: PUSH
7262: LD_INT 12
7264: PUSH
7265: LD_INT 16
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: IN
7272: IFFALSE 7293
// points := [ 5 , 3 , 2 ] ;
7274: LD_ADDR_VAR 0 9
7278: PUSH
7279: LD_INT 5
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 2
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7293: LD_VAR 0 6
7297: PPUSH
7298: CALL_OW 257
7302: PUSH
7303: LD_INT 17
7305: EQUAL
7306: IFFALSE 7327
// points := [ 100 , 50 , 75 ] ;
7308: LD_ADDR_VAR 0 9
7312: PUSH
7313: LD_INT 100
7315: PUSH
7316: LD_INT 50
7318: PUSH
7319: LD_INT 75
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7327: LD_VAR 0 6
7331: PPUSH
7332: CALL_OW 257
7336: PUSH
7337: LD_INT 15
7339: EQUAL
7340: IFFALSE 7361
// points := [ 10 , 5 , 3 ] ;
7342: LD_ADDR_VAR 0 9
7346: PUSH
7347: LD_INT 10
7349: PUSH
7350: LD_INT 5
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7361: LD_VAR 0 6
7365: PPUSH
7366: CALL_OW 257
7370: PUSH
7371: LD_INT 14
7373: EQUAL
7374: IFFALSE 7395
// points := [ 10 , 0 , 0 ] ;
7376: LD_ADDR_VAR 0 9
7380: PUSH
7381: LD_INT 10
7383: PUSH
7384: LD_INT 0
7386: PUSH
7387: LD_INT 0
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7395: LD_VAR 0 6
7399: PPUSH
7400: CALL_OW 257
7404: PUSH
7405: LD_INT 11
7407: EQUAL
7408: IFFALSE 7429
// points := [ 30 , 10 , 5 ] ;
7410: LD_ADDR_VAR 0 9
7414: PUSH
7415: LD_INT 30
7417: PUSH
7418: LD_INT 10
7420: PUSH
7421: LD_INT 5
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7429: LD_VAR 0 1
7433: PPUSH
7434: LD_INT 5
7436: PPUSH
7437: CALL_OW 321
7441: PUSH
7442: LD_INT 2
7444: EQUAL
7445: IFFALSE 7462
// bpoints := bpoints * 1.8 ;
7447: LD_ADDR_VAR 0 10
7451: PUSH
7452: LD_VAR 0 10
7456: PUSH
7457: LD_REAL  1.80000000000000E+0000
7460: MUL
7461: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7462: LD_VAR 0 6
7466: PPUSH
7467: CALL_OW 257
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: LD_INT 2
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: LD_INT 4
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: IN
7490: IFFALSE 7510
7492: PUSH
7493: LD_VAR 0 1
7497: PPUSH
7498: LD_INT 51
7500: PPUSH
7501: CALL_OW 321
7505: PUSH
7506: LD_INT 2
7508: EQUAL
7509: AND
7510: IFFALSE 7527
// bpoints := bpoints * 1.2 ;
7512: LD_ADDR_VAR 0 10
7516: PUSH
7517: LD_VAR 0 10
7521: PUSH
7522: LD_REAL  1.20000000000000E+0000
7525: MUL
7526: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7527: LD_VAR 0 6
7531: PPUSH
7532: CALL_OW 257
7536: PUSH
7537: LD_INT 5
7539: PUSH
7540: LD_INT 7
7542: PUSH
7543: LD_INT 9
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: IN
7551: IFFALSE 7571
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: LD_INT 52
7561: PPUSH
7562: CALL_OW 321
7566: PUSH
7567: LD_INT 2
7569: EQUAL
7570: AND
7571: IFFALSE 7588
// bpoints := bpoints * 1.5 ;
7573: LD_ADDR_VAR 0 10
7577: PUSH
7578: LD_VAR 0 10
7582: PUSH
7583: LD_REAL  1.50000000000000E+0000
7586: MUL
7587: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7588: LD_VAR 0 1
7592: PPUSH
7593: LD_INT 66
7595: PPUSH
7596: CALL_OW 321
7600: PUSH
7601: LD_INT 2
7603: EQUAL
7604: IFFALSE 7621
// bpoints := bpoints * 1.1 ;
7606: LD_ADDR_VAR 0 10
7610: PUSH
7611: LD_VAR 0 10
7615: PUSH
7616: LD_REAL  1.10000000000000E+0000
7619: MUL
7620: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7621: LD_ADDR_VAR 0 10
7625: PUSH
7626: LD_VAR 0 10
7630: PUSH
7631: LD_VAR 0 6
7635: PPUSH
7636: LD_INT 1
7638: PPUSH
7639: CALL_OW 259
7643: PUSH
7644: LD_REAL  1.15000000000000E+0000
7647: MUL
7648: MUL
7649: ST_TO_ADDR
// end ; unit_vehicle :
7650: GO 8480
7652: LD_INT 2
7654: DOUBLE
7655: EQUAL
7656: IFTRUE 7660
7658: GO 8468
7660: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7661: LD_VAR 0 6
7665: PPUSH
7666: CALL_OW 264
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: LD_INT 42
7676: PUSH
7677: LD_INT 24
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: IN
7685: IFFALSE 7706
// points := [ 25 , 5 , 3 ] ;
7687: LD_ADDR_VAR 0 9
7691: PUSH
7692: LD_INT 25
7694: PUSH
7695: LD_INT 5
7697: PUSH
7698: LD_INT 3
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7706: LD_VAR 0 6
7710: PPUSH
7711: CALL_OW 264
7715: PUSH
7716: LD_INT 4
7718: PUSH
7719: LD_INT 43
7721: PUSH
7722: LD_INT 25
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: LIST
7729: IN
7730: IFFALSE 7751
// points := [ 40 , 15 , 5 ] ;
7732: LD_ADDR_VAR 0 9
7736: PUSH
7737: LD_INT 40
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: LD_INT 5
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7751: LD_VAR 0 6
7755: PPUSH
7756: CALL_OW 264
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: LD_INT 23
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: IN
7771: IFFALSE 7792
// points := [ 7 , 25 , 8 ] ;
7773: LD_ADDR_VAR 0 9
7777: PUSH
7778: LD_INT 7
7780: PUSH
7781: LD_INT 25
7783: PUSH
7784: LD_INT 8
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7792: LD_VAR 0 6
7796: PPUSH
7797: CALL_OW 264
7801: PUSH
7802: LD_INT 5
7804: PUSH
7805: LD_INT 27
7807: PUSH
7808: LD_INT 44
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: IN
7816: IFFALSE 7837
// points := [ 14 , 50 , 16 ] ;
7818: LD_ADDR_VAR 0 9
7822: PUSH
7823: LD_INT 14
7825: PUSH
7826: LD_INT 50
7828: PUSH
7829: LD_INT 16
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7837: LD_VAR 0 6
7841: PPUSH
7842: CALL_OW 264
7846: PUSH
7847: LD_INT 6
7849: PUSH
7850: LD_INT 46
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: IN
7857: IFFALSE 7878
// points := [ 32 , 120 , 70 ] ;
7859: LD_ADDR_VAR 0 9
7863: PUSH
7864: LD_INT 32
7866: PUSH
7867: LD_INT 120
7869: PUSH
7870: LD_INT 70
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7878: LD_VAR 0 6
7882: PPUSH
7883: CALL_OW 264
7887: PUSH
7888: LD_INT 7
7890: PUSH
7891: LD_INT 28
7893: PUSH
7894: LD_INT 45
7896: PUSH
7897: LD_INT 92
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: IN
7906: IFFALSE 7927
// points := [ 35 , 20 , 45 ] ;
7908: LD_ADDR_VAR 0 9
7912: PUSH
7913: LD_INT 35
7915: PUSH
7916: LD_INT 20
7918: PUSH
7919: LD_INT 45
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7927: LD_VAR 0 6
7931: PPUSH
7932: CALL_OW 264
7936: PUSH
7937: LD_INT 47
7939: PUSH
7940: EMPTY
7941: LIST
7942: IN
7943: IFFALSE 7964
// points := [ 67 , 45 , 75 ] ;
7945: LD_ADDR_VAR 0 9
7949: PUSH
7950: LD_INT 67
7952: PUSH
7953: LD_INT 45
7955: PUSH
7956: LD_INT 75
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7964: LD_VAR 0 6
7968: PPUSH
7969: CALL_OW 264
7973: PUSH
7974: LD_INT 26
7976: PUSH
7977: EMPTY
7978: LIST
7979: IN
7980: IFFALSE 8001
// points := [ 120 , 30 , 80 ] ;
7982: LD_ADDR_VAR 0 9
7986: PUSH
7987: LD_INT 120
7989: PUSH
7990: LD_INT 30
7992: PUSH
7993: LD_INT 80
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 264
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: EMPTY
8015: LIST
8016: IN
8017: IFFALSE 8038
// points := [ 40 , 1 , 1 ] ;
8019: LD_ADDR_VAR 0 9
8023: PUSH
8024: LD_INT 40
8026: PUSH
8027: LD_INT 1
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8038: LD_VAR 0 6
8042: PPUSH
8043: CALL_OW 264
8047: PUSH
8048: LD_INT 29
8050: PUSH
8051: EMPTY
8052: LIST
8053: IN
8054: IFFALSE 8075
// points := [ 70 , 200 , 400 ] ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_INT 70
8063: PUSH
8064: LD_INT 200
8066: PUSH
8067: LD_INT 400
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8075: LD_VAR 0 6
8079: PPUSH
8080: CALL_OW 264
8084: PUSH
8085: LD_INT 14
8087: PUSH
8088: LD_INT 53
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: IN
8095: IFFALSE 8116
// points := [ 40 , 10 , 20 ] ;
8097: LD_ADDR_VAR 0 9
8101: PUSH
8102: LD_INT 40
8104: PUSH
8105: LD_INT 10
8107: PUSH
8108: LD_INT 20
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8116: LD_VAR 0 6
8120: PPUSH
8121: CALL_OW 264
8125: PUSH
8126: LD_INT 9
8128: PUSH
8129: EMPTY
8130: LIST
8131: IN
8132: IFFALSE 8153
// points := [ 5 , 70 , 20 ] ;
8134: LD_ADDR_VAR 0 9
8138: PUSH
8139: LD_INT 5
8141: PUSH
8142: LD_INT 70
8144: PUSH
8145: LD_INT 20
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8153: LD_VAR 0 6
8157: PPUSH
8158: CALL_OW 264
8162: PUSH
8163: LD_INT 10
8165: PUSH
8166: EMPTY
8167: LIST
8168: IN
8169: IFFALSE 8190
// points := [ 35 , 110 , 70 ] ;
8171: LD_ADDR_VAR 0 9
8175: PUSH
8176: LD_INT 35
8178: PUSH
8179: LD_INT 110
8181: PUSH
8182: LD_INT 70
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8190: LD_VAR 0 6
8194: PPUSH
8195: CALL_OW 265
8199: PUSH
8200: LD_INT 25
8202: EQUAL
8203: IFFALSE 8224
// points := [ 80 , 65 , 100 ] ;
8205: LD_ADDR_VAR 0 9
8209: PUSH
8210: LD_INT 80
8212: PUSH
8213: LD_INT 65
8215: PUSH
8216: LD_INT 100
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8224: LD_VAR 0 6
8228: PPUSH
8229: CALL_OW 263
8233: PUSH
8234: LD_INT 1
8236: EQUAL
8237: IFFALSE 8272
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8239: LD_ADDR_VAR 0 10
8243: PUSH
8244: LD_VAR 0 10
8248: PUSH
8249: LD_VAR 0 6
8253: PPUSH
8254: CALL_OW 311
8258: PPUSH
8259: LD_INT 3
8261: PPUSH
8262: CALL_OW 259
8266: PUSH
8267: LD_INT 4
8269: MUL
8270: MUL
8271: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8272: LD_VAR 0 6
8276: PPUSH
8277: CALL_OW 263
8281: PUSH
8282: LD_INT 2
8284: EQUAL
8285: IFFALSE 8336
// begin j := IsControledBy ( i ) ;
8287: LD_ADDR_VAR 0 7
8291: PUSH
8292: LD_VAR 0 6
8296: PPUSH
8297: CALL_OW 312
8301: ST_TO_ADDR
// if j then
8302: LD_VAR 0 7
8306: IFFALSE 8336
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8308: LD_ADDR_VAR 0 10
8312: PUSH
8313: LD_VAR 0 10
8317: PUSH
8318: LD_VAR 0 7
8322: PPUSH
8323: LD_INT 3
8325: PPUSH
8326: CALL_OW 259
8330: PUSH
8331: LD_INT 3
8333: MUL
8334: MUL
8335: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8336: LD_VAR 0 6
8340: PPUSH
8341: CALL_OW 264
8345: PUSH
8346: LD_INT 5
8348: PUSH
8349: LD_INT 6
8351: PUSH
8352: LD_INT 46
8354: PUSH
8355: LD_INT 44
8357: PUSH
8358: LD_INT 47
8360: PUSH
8361: LD_INT 45
8363: PUSH
8364: LD_INT 28
8366: PUSH
8367: LD_INT 7
8369: PUSH
8370: LD_INT 27
8372: PUSH
8373: LD_INT 29
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: IN
8388: IFFALSE 8408
8390: PUSH
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_INT 52
8398: PPUSH
8399: CALL_OW 321
8403: PUSH
8404: LD_INT 2
8406: EQUAL
8407: AND
8408: IFFALSE 8425
// bpoints := bpoints * 1.2 ;
8410: LD_ADDR_VAR 0 10
8414: PUSH
8415: LD_VAR 0 10
8419: PUSH
8420: LD_REAL  1.20000000000000E+0000
8423: MUL
8424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8425: LD_VAR 0 6
8429: PPUSH
8430: CALL_OW 264
8434: PUSH
8435: LD_INT 6
8437: PUSH
8438: LD_INT 46
8440: PUSH
8441: LD_INT 47
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: IN
8449: IFFALSE 8466
// bpoints := bpoints * 1.2 ;
8451: LD_ADDR_VAR 0 10
8455: PUSH
8456: LD_VAR 0 10
8460: PUSH
8461: LD_REAL  1.20000000000000E+0000
8464: MUL
8465: ST_TO_ADDR
// end ; unit_building :
8466: GO 8480
8468: LD_INT 3
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8479
8476: POP
// ; end ;
8477: GO 8480
8479: POP
// for j = 1 to 3 do
8480: LD_ADDR_VAR 0 7
8484: PUSH
8485: DOUBLE
8486: LD_INT 1
8488: DEC
8489: ST_TO_ADDR
8490: LD_INT 3
8492: PUSH
8493: FOR_TO
8494: IFFALSE 8547
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8496: LD_ADDR_VAR 0 5
8500: PUSH
8501: LD_VAR 0 5
8505: PPUSH
8506: LD_VAR 0 7
8510: PPUSH
8511: LD_VAR 0 5
8515: PUSH
8516: LD_VAR 0 7
8520: ARRAY
8521: PUSH
8522: LD_VAR 0 9
8526: PUSH
8527: LD_VAR 0 7
8531: ARRAY
8532: PUSH
8533: LD_VAR 0 10
8537: MUL
8538: PLUS
8539: PPUSH
8540: CALL_OW 1
8544: ST_TO_ADDR
8545: GO 8493
8547: POP
8548: POP
// end ;
8549: GO 7022
8551: POP
8552: POP
// result := Replace ( result , 4 , tmp ) ;
8553: LD_ADDR_VAR 0 5
8557: PUSH
8558: LD_VAR 0 5
8562: PPUSH
8563: LD_INT 4
8565: PPUSH
8566: LD_VAR 0 8
8570: PPUSH
8571: CALL_OW 1
8575: ST_TO_ADDR
// end ;
8576: LD_VAR 0 5
8580: RET
// export function DangerAtRange ( unit , range ) ; begin
8581: LD_INT 0
8583: PPUSH
// if not unit then
8584: LD_VAR 0 1
8588: NOT
8589: IFFALSE 8593
// exit ;
8591: GO 8638
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8593: LD_ADDR_VAR 0 3
8597: PUSH
8598: LD_VAR 0 1
8602: PPUSH
8603: CALL_OW 255
8607: PPUSH
8608: LD_VAR 0 1
8612: PPUSH
8613: CALL_OW 250
8617: PPUSH
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 251
8627: PPUSH
8628: LD_VAR 0 2
8632: PPUSH
8633: CALL 6872 0 4
8637: ST_TO_ADDR
// end ;
8638: LD_VAR 0 3
8642: RET
// export function DangerInArea ( side , area ) ; begin
8643: LD_INT 0
8645: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8646: LD_ADDR_VAR 0 3
8650: PUSH
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_INT 81
8658: PUSH
8659: LD_VAR 0 1
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 70
8672: ST_TO_ADDR
// end ;
8673: LD_VAR 0 3
8677: RET
// export function IsExtension ( b ) ; begin
8678: LD_INT 0
8680: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8681: LD_ADDR_VAR 0 2
8685: PUSH
8686: LD_VAR 0 1
8690: PUSH
8691: LD_INT 23
8693: PUSH
8694: LD_INT 20
8696: PUSH
8697: LD_INT 22
8699: PUSH
8700: LD_INT 17
8702: PUSH
8703: LD_INT 24
8705: PUSH
8706: LD_INT 21
8708: PUSH
8709: LD_INT 19
8711: PUSH
8712: LD_INT 16
8714: PUSH
8715: LD_INT 25
8717: PUSH
8718: LD_INT 18
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: IN
8733: ST_TO_ADDR
// end ;
8734: LD_VAR 0 2
8738: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8739: LD_INT 0
8741: PPUSH
8742: PPUSH
8743: PPUSH
// result := [ ] ;
8744: LD_ADDR_VAR 0 4
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8751: LD_ADDR_VAR 0 5
8755: PUSH
8756: LD_VAR 0 2
8760: PPUSH
8761: LD_INT 21
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 70
8775: ST_TO_ADDR
// if not tmp then
8776: LD_VAR 0 5
8780: NOT
8781: IFFALSE 8785
// exit ;
8783: GO 8849
// if checkLink then
8785: LD_VAR 0 3
8789: IFFALSE 8839
// begin for i in tmp do
8791: LD_ADDR_VAR 0 6
8795: PUSH
8796: LD_VAR 0 5
8800: PUSH
8801: FOR_IN
8802: IFFALSE 8837
// if GetBase ( i ) <> base then
8804: LD_VAR 0 6
8808: PPUSH
8809: CALL_OW 274
8813: PUSH
8814: LD_VAR 0 1
8818: NONEQUAL
8819: IFFALSE 8835
// ComLinkToBase ( base , i ) ;
8821: LD_VAR 0 1
8825: PPUSH
8826: LD_VAR 0 6
8830: PPUSH
8831: CALL_OW 169
8835: GO 8801
8837: POP
8838: POP
// end ; result := tmp ;
8839: LD_ADDR_VAR 0 4
8843: PUSH
8844: LD_VAR 0 5
8848: ST_TO_ADDR
// end ;
8849: LD_VAR 0 4
8853: RET
// export function ComComplete ( units , b ) ; var i ; begin
8854: LD_INT 0
8856: PPUSH
8857: PPUSH
// if not units then
8858: LD_VAR 0 1
8862: NOT
8863: IFFALSE 8867
// exit ;
8865: GO 8957
// for i in units do
8867: LD_ADDR_VAR 0 4
8871: PUSH
8872: LD_VAR 0 1
8876: PUSH
8877: FOR_IN
8878: IFFALSE 8955
// if BuildingStatus ( b ) = bs_build then
8880: LD_VAR 0 2
8884: PPUSH
8885: CALL_OW 461
8889: PUSH
8890: LD_INT 1
8892: EQUAL
8893: IFFALSE 8953
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8895: LD_VAR 0 4
8899: PPUSH
8900: LD_STRING h
8902: PUSH
8903: LD_VAR 0 2
8907: PPUSH
8908: CALL_OW 250
8912: PUSH
8913: LD_VAR 0 2
8917: PPUSH
8918: CALL_OW 251
8922: PUSH
8923: LD_VAR 0 2
8927: PUSH
8928: LD_INT 0
8930: PUSH
8931: LD_INT 0
8933: PUSH
8934: LD_INT 0
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: PPUSH
8949: CALL_OW 446
8953: GO 8877
8955: POP
8956: POP
// end ;
8957: LD_VAR 0 3
8961: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8962: LD_INT 0
8964: PPUSH
8965: PPUSH
8966: PPUSH
8967: PPUSH
8968: PPUSH
8969: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8970: LD_VAR 0 1
8974: NOT
8975: IFTRUE 8992
8977: PUSH
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 263
8987: PUSH
8988: LD_INT 2
8990: NONEQUAL
8991: OR
8992: IFFALSE 8996
// exit ;
8994: GO 9312
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8996: LD_ADDR_VAR 0 6
9000: PUSH
9001: LD_INT 22
9003: PUSH
9004: LD_VAR 0 1
9008: PPUSH
9009: CALL_OW 255
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 2
9020: PUSH
9021: LD_INT 30
9023: PUSH
9024: LD_INT 36
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 34
9033: PUSH
9034: LD_INT 31
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 69
9054: ST_TO_ADDR
// if not tmp then
9055: LD_VAR 0 6
9059: NOT
9060: IFFALSE 9064
// exit ;
9062: GO 9312
// result := [ ] ;
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: EMPTY
9070: ST_TO_ADDR
// for i in tmp do
9071: LD_ADDR_VAR 0 3
9075: PUSH
9076: LD_VAR 0 6
9080: PUSH
9081: FOR_IN
9082: IFFALSE 9153
// begin t := UnitsInside ( i ) ;
9084: LD_ADDR_VAR 0 4
9088: PUSH
9089: LD_VAR 0 3
9093: PPUSH
9094: CALL_OW 313
9098: ST_TO_ADDR
// if t then
9099: LD_VAR 0 4
9103: IFFALSE 9151
// for j in t do
9105: LD_ADDR_VAR 0 7
9109: PUSH
9110: LD_VAR 0 4
9114: PUSH
9115: FOR_IN
9116: IFFALSE 9149
// result := Replace ( result , result + 1 , j ) ;
9118: LD_ADDR_VAR 0 2
9122: PUSH
9123: LD_VAR 0 2
9127: PPUSH
9128: LD_VAR 0 2
9132: PUSH
9133: LD_INT 1
9135: PLUS
9136: PPUSH
9137: LD_VAR 0 7
9141: PPUSH
9142: CALL_OW 1
9146: ST_TO_ADDR
9147: GO 9115
9149: POP
9150: POP
// end ;
9151: GO 9081
9153: POP
9154: POP
// if not result then
9155: LD_VAR 0 2
9159: NOT
9160: IFFALSE 9164
// exit ;
9162: GO 9312
// mech := result [ 1 ] ;
9164: LD_ADDR_VAR 0 5
9168: PUSH
9169: LD_VAR 0 2
9173: PUSH
9174: LD_INT 1
9176: ARRAY
9177: ST_TO_ADDR
// if result > 1 then
9178: LD_VAR 0 2
9182: PUSH
9183: LD_INT 1
9185: GREATER
9186: IFFALSE 9298
// begin for i = 2 to result do
9188: LD_ADDR_VAR 0 3
9192: PUSH
9193: DOUBLE
9194: LD_INT 2
9196: DEC
9197: ST_TO_ADDR
9198: LD_VAR 0 2
9202: PUSH
9203: FOR_TO
9204: IFFALSE 9296
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9206: LD_ADDR_VAR 0 4
9210: PUSH
9211: LD_VAR 0 2
9215: PUSH
9216: LD_VAR 0 3
9220: ARRAY
9221: PPUSH
9222: LD_INT 3
9224: PPUSH
9225: CALL_OW 259
9229: PUSH
9230: LD_VAR 0 2
9234: PUSH
9235: LD_VAR 0 3
9239: ARRAY
9240: PPUSH
9241: CALL_OW 432
9245: MINUS
9246: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9247: LD_VAR 0 4
9251: PUSH
9252: LD_VAR 0 5
9256: PPUSH
9257: LD_INT 3
9259: PPUSH
9260: CALL_OW 259
9264: PUSH
9265: LD_VAR 0 5
9269: PPUSH
9270: CALL_OW 432
9274: MINUS
9275: GREATEREQUAL
9276: IFFALSE 9294
// mech := result [ i ] ;
9278: LD_ADDR_VAR 0 5
9282: PUSH
9283: LD_VAR 0 2
9287: PUSH
9288: LD_VAR 0 3
9292: ARRAY
9293: ST_TO_ADDR
// end ;
9294: GO 9203
9296: POP
9297: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9298: LD_VAR 0 1
9302: PPUSH
9303: LD_VAR 0 5
9307: PPUSH
9308: CALL_OW 135
// end ;
9312: LD_VAR 0 2
9316: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9317: LD_INT 0
9319: PPUSH
9320: PPUSH
9321: PPUSH
9322: PPUSH
9323: PPUSH
9324: PPUSH
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
9329: PPUSH
9330: PPUSH
9331: PPUSH
// result := [ ] ;
9332: LD_ADDR_VAR 0 7
9336: PUSH
9337: EMPTY
9338: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9339: LD_VAR 0 1
9343: PPUSH
9344: CALL_OW 266
9348: PUSH
9349: LD_INT 0
9351: PUSH
9352: LD_INT 1
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: IN
9359: NOT
9360: IFFALSE 9364
// exit ;
9362: GO 11004
// if name then
9364: LD_VAR 0 3
9368: IFFALSE 9384
// SetBName ( base_dep , name ) ;
9370: LD_VAR 0 1
9374: PPUSH
9375: LD_VAR 0 3
9379: PPUSH
9380: CALL_OW 500
// base := GetBase ( base_dep ) ;
9384: LD_ADDR_VAR 0 15
9388: PUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 274
9398: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9399: LD_ADDR_VAR 0 16
9403: PUSH
9404: LD_VAR 0 1
9408: PPUSH
9409: CALL_OW 255
9413: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9414: LD_ADDR_VAR 0 17
9418: PUSH
9419: LD_VAR 0 1
9423: PPUSH
9424: CALL_OW 248
9428: ST_TO_ADDR
// if sources then
9429: LD_VAR 0 5
9433: IFFALSE 9480
// for i = 1 to 3 do
9435: LD_ADDR_VAR 0 8
9439: PUSH
9440: DOUBLE
9441: LD_INT 1
9443: DEC
9444: ST_TO_ADDR
9445: LD_INT 3
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9478
// AddResourceType ( base , i , sources [ i ] ) ;
9451: LD_VAR 0 15
9455: PPUSH
9456: LD_VAR 0 8
9460: PPUSH
9461: LD_VAR 0 5
9465: PUSH
9466: LD_VAR 0 8
9470: ARRAY
9471: PPUSH
9472: CALL_OW 276
9476: GO 9448
9478: POP
9479: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9480: LD_ADDR_VAR 0 18
9484: PUSH
9485: LD_VAR 0 15
9489: PPUSH
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_INT 1
9497: PPUSH
9498: CALL 8739 0 3
9502: ST_TO_ADDR
// InitHc ;
9503: CALL_OW 19
// InitUc ;
9507: CALL_OW 18
// uc_side := side ;
9511: LD_ADDR_OWVAR 20
9515: PUSH
9516: LD_VAR 0 16
9520: ST_TO_ADDR
// uc_nation := nation ;
9521: LD_ADDR_OWVAR 21
9525: PUSH
9526: LD_VAR 0 17
9530: ST_TO_ADDR
// if buildings then
9531: LD_VAR 0 18
9535: IFFALSE 10863
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9537: LD_ADDR_VAR 0 19
9541: PUSH
9542: LD_VAR 0 18
9546: PPUSH
9547: LD_INT 2
9549: PUSH
9550: LD_INT 30
9552: PUSH
9553: LD_INT 29
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 30
9562: PUSH
9563: LD_INT 30
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 72
9579: ST_TO_ADDR
// if tmp then
9580: LD_VAR 0 19
9584: IFFALSE 9632
// for i in tmp do
9586: LD_ADDR_VAR 0 8
9590: PUSH
9591: LD_VAR 0 19
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9630
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9599: LD_VAR 0 8
9603: PPUSH
9604: CALL_OW 250
9608: PPUSH
9609: LD_VAR 0 8
9613: PPUSH
9614: CALL_OW 251
9618: PPUSH
9619: LD_VAR 0 16
9623: PPUSH
9624: CALL_OW 441
9628: GO 9596
9630: POP
9631: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9632: LD_VAR 0 18
9636: PPUSH
9637: LD_INT 2
9639: PUSH
9640: LD_INT 30
9642: PUSH
9643: LD_INT 32
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 30
9652: PUSH
9653: LD_INT 33
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 72
9669: IFFALSE 9757
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9671: LD_ADDR_VAR 0 8
9675: PUSH
9676: LD_VAR 0 18
9680: PPUSH
9681: LD_INT 2
9683: PUSH
9684: LD_INT 30
9686: PUSH
9687: LD_INT 32
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 30
9696: PUSH
9697: LD_INT 33
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL_OW 72
9713: PUSH
9714: FOR_IN
9715: IFFALSE 9755
// begin if not GetBWeapon ( i ) then
9717: LD_VAR 0 8
9721: PPUSH
9722: CALL_OW 269
9726: NOT
9727: IFFALSE 9753
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9729: LD_VAR 0 8
9733: PPUSH
9734: LD_VAR 0 8
9738: PPUSH
9739: LD_VAR 0 2
9743: PPUSH
9744: CALL 11009 0 2
9748: PPUSH
9749: CALL_OW 431
// end ;
9753: GO 9714
9755: POP
9756: POP
// end ; for i = 1 to personel do
9757: LD_ADDR_VAR 0 8
9761: PUSH
9762: DOUBLE
9763: LD_INT 1
9765: DEC
9766: ST_TO_ADDR
9767: LD_VAR 0 6
9771: PUSH
9772: FOR_TO
9773: IFFALSE 10843
// begin if i > 4 then
9775: LD_VAR 0 8
9779: PUSH
9780: LD_INT 4
9782: GREATER
9783: IFFALSE 9787
// break ;
9785: GO 10843
// case i of 1 :
9787: LD_VAR 0 8
9791: PUSH
9792: LD_INT 1
9794: DOUBLE
9795: EQUAL
9796: IFTRUE 9800
9798: GO 9880
9800: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9801: LD_ADDR_VAR 0 12
9805: PUSH
9806: LD_VAR 0 18
9810: PPUSH
9811: LD_INT 22
9813: PUSH
9814: LD_VAR 0 16
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 58
9825: PUSH
9826: EMPTY
9827: LIST
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: LD_INT 30
9834: PUSH
9835: LD_INT 32
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 4
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 30
9854: PUSH
9855: LD_INT 5
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 72
9877: ST_TO_ADDR
9878: GO 10102
9880: LD_INT 2
9882: DOUBLE
9883: EQUAL
9884: IFTRUE 9888
9886: GO 9950
9888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9889: LD_ADDR_VAR 0 12
9893: PUSH
9894: LD_VAR 0 18
9898: PPUSH
9899: LD_INT 22
9901: PUSH
9902: LD_VAR 0 16
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 30
9916: PUSH
9917: LD_INT 0
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 30
9926: PUSH
9927: LD_INT 1
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: CALL_OW 72
9947: ST_TO_ADDR
9948: GO 10102
9950: LD_INT 3
9952: DOUBLE
9953: EQUAL
9954: IFTRUE 9958
9956: GO 10020
9958: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9959: LD_ADDR_VAR 0 12
9963: PUSH
9964: LD_VAR 0 18
9968: PPUSH
9969: LD_INT 22
9971: PUSH
9972: LD_VAR 0 16
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: LD_INT 30
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 3
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: CALL_OW 72
10017: ST_TO_ADDR
10018: GO 10102
10020: LD_INT 4
10022: DOUBLE
10023: EQUAL
10024: IFTRUE 10028
10026: GO 10101
10028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10029: LD_ADDR_VAR 0 12
10033: PUSH
10034: LD_VAR 0 18
10038: PPUSH
10039: LD_INT 22
10041: PUSH
10042: LD_VAR 0 16
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: LD_INT 30
10056: PUSH
10057: LD_INT 6
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 30
10066: PUSH
10067: LD_INT 7
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: LD_INT 30
10076: PUSH
10077: LD_INT 8
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PPUSH
10094: CALL_OW 72
10098: ST_TO_ADDR
10099: GO 10102
10101: POP
// if i = 1 then
10102: LD_VAR 0 8
10106: PUSH
10107: LD_INT 1
10109: EQUAL
10110: IFFALSE 10221
// begin tmp := [ ] ;
10112: LD_ADDR_VAR 0 19
10116: PUSH
10117: EMPTY
10118: ST_TO_ADDR
// for j in f do
10119: LD_ADDR_VAR 0 9
10123: PUSH
10124: LD_VAR 0 12
10128: PUSH
10129: FOR_IN
10130: IFFALSE 10203
// if GetBType ( j ) = b_bunker then
10132: LD_VAR 0 9
10136: PPUSH
10137: CALL_OW 266
10141: PUSH
10142: LD_INT 32
10144: EQUAL
10145: IFFALSE 10172
// tmp := Insert ( tmp , 1 , j ) else
10147: LD_ADDR_VAR 0 19
10151: PUSH
10152: LD_VAR 0 19
10156: PPUSH
10157: LD_INT 1
10159: PPUSH
10160: LD_VAR 0 9
10164: PPUSH
10165: CALL_OW 2
10169: ST_TO_ADDR
10170: GO 10201
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10172: LD_ADDR_VAR 0 19
10176: PUSH
10177: LD_VAR 0 19
10181: PPUSH
10182: LD_VAR 0 19
10186: PUSH
10187: LD_INT 1
10189: PLUS
10190: PPUSH
10191: LD_VAR 0 9
10195: PPUSH
10196: CALL_OW 2
10200: ST_TO_ADDR
10201: GO 10129
10203: POP
10204: POP
// if tmp then
10205: LD_VAR 0 19
10209: IFFALSE 10221
// f := tmp ;
10211: LD_ADDR_VAR 0 12
10215: PUSH
10216: LD_VAR 0 19
10220: ST_TO_ADDR
// end ; x := personel [ i ] ;
10221: LD_ADDR_VAR 0 13
10225: PUSH
10226: LD_VAR 0 6
10230: PUSH
10231: LD_VAR 0 8
10235: ARRAY
10236: ST_TO_ADDR
// if x = - 1 then
10237: LD_VAR 0 13
10241: PUSH
10242: LD_INT 1
10244: NEG
10245: EQUAL
10246: IFFALSE 10457
// begin for j in f do
10248: LD_ADDR_VAR 0 9
10252: PUSH
10253: LD_VAR 0 12
10257: PUSH
10258: FOR_IN
10259: IFFALSE 10453
// repeat InitHc ;
10261: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10265: LD_VAR 0 9
10269: PPUSH
10270: CALL_OW 266
10274: PUSH
10275: LD_INT 5
10277: EQUAL
10278: IFFALSE 10348
// begin if UnitsInside ( j ) < 3 then
10280: LD_VAR 0 9
10284: PPUSH
10285: CALL_OW 313
10289: PUSH
10290: LD_INT 3
10292: LESS
10293: IFFALSE 10329
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10295: LD_INT 0
10297: PPUSH
10298: LD_INT 5
10300: PUSH
10301: LD_INT 8
10303: PUSH
10304: LD_INT 9
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: PUSH
10312: LD_VAR 0 17
10316: ARRAY
10317: PPUSH
10318: LD_VAR 0 4
10322: PPUSH
10323: CALL_OW 380
10327: GO 10346
// PrepareHuman ( false , i , skill ) ;
10329: LD_INT 0
10331: PPUSH
10332: LD_VAR 0 8
10336: PPUSH
10337: LD_VAR 0 4
10341: PPUSH
10342: CALL_OW 380
// end else
10346: GO 10365
// PrepareHuman ( false , i , skill ) ;
10348: LD_INT 0
10350: PPUSH
10351: LD_VAR 0 8
10355: PPUSH
10356: LD_VAR 0 4
10360: PPUSH
10361: CALL_OW 380
// un := CreateHuman ;
10365: LD_ADDR_VAR 0 14
10369: PUSH
10370: CALL_OW 44
10374: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10375: LD_ADDR_VAR 0 7
10379: PUSH
10380: LD_VAR 0 7
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: LD_VAR 0 14
10392: PPUSH
10393: CALL_OW 2
10397: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10398: LD_VAR 0 14
10402: PPUSH
10403: LD_VAR 0 9
10407: PPUSH
10408: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10412: LD_VAR 0 9
10416: PPUSH
10417: CALL_OW 313
10421: PUSH
10422: LD_INT 6
10424: EQUAL
10425: IFTRUE 10449
10427: PUSH
10428: LD_VAR 0 9
10432: PPUSH
10433: CALL_OW 266
10437: PUSH
10438: LD_INT 32
10440: PUSH
10441: LD_INT 31
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: IN
10448: OR
10449: IFFALSE 10261
10451: GO 10258
10453: POP
10454: POP
// end else
10455: GO 10841
// for j = 1 to x do
10457: LD_ADDR_VAR 0 9
10461: PUSH
10462: DOUBLE
10463: LD_INT 1
10465: DEC
10466: ST_TO_ADDR
10467: LD_VAR 0 13
10471: PUSH
10472: FOR_TO
10473: IFFALSE 10839
// begin InitHc ;
10475: CALL_OW 19
// if not f then
10479: LD_VAR 0 12
10483: NOT
10484: IFFALSE 10573
// begin PrepareHuman ( false , i , skill ) ;
10486: LD_INT 0
10488: PPUSH
10489: LD_VAR 0 8
10493: PPUSH
10494: LD_VAR 0 4
10498: PPUSH
10499: CALL_OW 380
// un := CreateHuman ;
10503: LD_ADDR_VAR 0 14
10507: PUSH
10508: CALL_OW 44
10512: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10513: LD_ADDR_VAR 0 7
10517: PUSH
10518: LD_VAR 0 7
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: LD_VAR 0 14
10530: PPUSH
10531: CALL_OW 2
10535: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10536: LD_VAR 0 14
10540: PPUSH
10541: LD_VAR 0 1
10545: PPUSH
10546: CALL_OW 250
10550: PPUSH
10551: LD_VAR 0 1
10555: PPUSH
10556: CALL_OW 251
10560: PPUSH
10561: LD_INT 10
10563: PPUSH
10564: LD_INT 0
10566: PPUSH
10567: CALL_OW 50
// continue ;
10571: GO 10472
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10573: LD_VAR 0 12
10577: PUSH
10578: LD_INT 1
10580: ARRAY
10581: PPUSH
10582: CALL_OW 313
10586: IFFALSE 10614
10588: PUSH
10589: LD_VAR 0 12
10593: PUSH
10594: LD_INT 1
10596: ARRAY
10597: PPUSH
10598: CALL_OW 266
10602: PUSH
10603: LD_INT 32
10605: PUSH
10606: LD_INT 31
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: IN
10613: AND
10614: IFTRUE 10635
10616: PUSH
10617: LD_VAR 0 12
10621: PUSH
10622: LD_INT 1
10624: ARRAY
10625: PPUSH
10626: CALL_OW 313
10630: PUSH
10631: LD_INT 6
10633: EQUAL
10634: OR
10635: IFFALSE 10655
// f := Delete ( f , 1 ) ;
10637: LD_ADDR_VAR 0 12
10641: PUSH
10642: LD_VAR 0 12
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 3
10654: ST_TO_ADDR
// if not f then
10655: LD_VAR 0 12
10659: NOT
10660: IFFALSE 10678
// begin x := x + 2 ;
10662: LD_ADDR_VAR 0 13
10666: PUSH
10667: LD_VAR 0 13
10671: PUSH
10672: LD_INT 2
10674: PLUS
10675: ST_TO_ADDR
// continue ;
10676: GO 10472
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10678: LD_VAR 0 12
10682: PUSH
10683: LD_INT 1
10685: ARRAY
10686: PPUSH
10687: CALL_OW 266
10691: PUSH
10692: LD_INT 5
10694: EQUAL
10695: IFFALSE 10769
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10697: LD_VAR 0 12
10701: PUSH
10702: LD_INT 1
10704: ARRAY
10705: PPUSH
10706: CALL_OW 313
10710: PUSH
10711: LD_INT 3
10713: LESS
10714: IFFALSE 10750
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10716: LD_INT 0
10718: PPUSH
10719: LD_INT 5
10721: PUSH
10722: LD_INT 8
10724: PUSH
10725: LD_INT 9
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_VAR 0 17
10737: ARRAY
10738: PPUSH
10739: LD_VAR 0 4
10743: PPUSH
10744: CALL_OW 380
10748: GO 10767
// PrepareHuman ( false , i , skill ) ;
10750: LD_INT 0
10752: PPUSH
10753: LD_VAR 0 8
10757: PPUSH
10758: LD_VAR 0 4
10762: PPUSH
10763: CALL_OW 380
// end else
10767: GO 10786
// PrepareHuman ( false , i , skill ) ;
10769: LD_INT 0
10771: PPUSH
10772: LD_VAR 0 8
10776: PPUSH
10777: LD_VAR 0 4
10781: PPUSH
10782: CALL_OW 380
// un := CreateHuman ;
10786: LD_ADDR_VAR 0 14
10790: PUSH
10791: CALL_OW 44
10795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10796: LD_ADDR_VAR 0 7
10800: PUSH
10801: LD_VAR 0 7
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: LD_VAR 0 14
10813: PPUSH
10814: CALL_OW 2
10818: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10819: LD_VAR 0 14
10823: PPUSH
10824: LD_VAR 0 12
10828: PUSH
10829: LD_INT 1
10831: ARRAY
10832: PPUSH
10833: CALL_OW 52
// end ;
10837: GO 10472
10839: POP
10840: POP
// end ;
10841: GO 9772
10843: POP
10844: POP
// result := result ^ buildings ;
10845: LD_ADDR_VAR 0 7
10849: PUSH
10850: LD_VAR 0 7
10854: PUSH
10855: LD_VAR 0 18
10859: ADD
10860: ST_TO_ADDR
// end else
10861: GO 11004
// begin for i = 1 to personel do
10863: LD_ADDR_VAR 0 8
10867: PUSH
10868: DOUBLE
10869: LD_INT 1
10871: DEC
10872: ST_TO_ADDR
10873: LD_VAR 0 6
10877: PUSH
10878: FOR_TO
10879: IFFALSE 11002
// begin if i > 4 then
10881: LD_VAR 0 8
10885: PUSH
10886: LD_INT 4
10888: GREATER
10889: IFFALSE 10893
// break ;
10891: GO 11002
// x := personel [ i ] ;
10893: LD_ADDR_VAR 0 13
10897: PUSH
10898: LD_VAR 0 6
10902: PUSH
10903: LD_VAR 0 8
10907: ARRAY
10908: ST_TO_ADDR
// if x = - 1 then
10909: LD_VAR 0 13
10913: PUSH
10914: LD_INT 1
10916: NEG
10917: EQUAL
10918: IFFALSE 10922
// continue ;
10920: GO 10878
// PrepareHuman ( false , i , skill ) ;
10922: LD_INT 0
10924: PPUSH
10925: LD_VAR 0 8
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: CALL_OW 380
// un := CreateHuman ;
10939: LD_ADDR_VAR 0 14
10943: PUSH
10944: CALL_OW 44
10948: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10949: LD_VAR 0 14
10953: PPUSH
10954: LD_VAR 0 1
10958: PPUSH
10959: CALL_OW 250
10963: PPUSH
10964: LD_VAR 0 1
10968: PPUSH
10969: CALL_OW 251
10973: PPUSH
10974: LD_INT 10
10976: PPUSH
10977: LD_INT 0
10979: PPUSH
10980: CALL_OW 50
// result := result ^ un ;
10984: LD_ADDR_VAR 0 7
10988: PUSH
10989: LD_VAR 0 7
10993: PUSH
10994: LD_VAR 0 14
10998: ADD
10999: ST_TO_ADDR
// end ;
11000: GO 10878
11002: POP
11003: POP
// end ; end ;
11004: LD_VAR 0 7
11008: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11009: LD_INT 0
11011: PPUSH
11012: PPUSH
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
11022: PPUSH
11023: PPUSH
11024: PPUSH
11025: PPUSH
11026: PPUSH
// result := false ;
11027: LD_ADDR_VAR 0 3
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11035: LD_VAR 0 1
11039: NOT
11040: IFTRUE 11065
11042: PUSH
11043: LD_VAR 0 1
11047: PPUSH
11048: CALL_OW 266
11052: PUSH
11053: LD_INT 32
11055: PUSH
11056: LD_INT 33
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: IN
11063: NOT
11064: OR
11065: IFFALSE 11069
// exit ;
11067: GO 12204
// nat := GetNation ( tower ) ;
11069: LD_ADDR_VAR 0 12
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 248
11083: ST_TO_ADDR
// side := GetSide ( tower ) ;
11084: LD_ADDR_VAR 0 16
11088: PUSH
11089: LD_VAR 0 1
11093: PPUSH
11094: CALL_OW 255
11098: ST_TO_ADDR
// x := GetX ( tower ) ;
11099: LD_ADDR_VAR 0 10
11103: PUSH
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 250
11113: ST_TO_ADDR
// y := GetY ( tower ) ;
11114: LD_ADDR_VAR 0 11
11118: PUSH
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 251
11128: ST_TO_ADDR
// if not x or not y then
11129: LD_VAR 0 10
11133: NOT
11134: IFTRUE 11143
11136: PUSH
11137: LD_VAR 0 11
11141: NOT
11142: OR
11143: IFFALSE 11147
// exit ;
11145: GO 12204
// weapon := 0 ;
11147: LD_ADDR_VAR 0 18
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// fac_list := [ ] ;
11155: LD_ADDR_VAR 0 17
11159: PUSH
11160: EMPTY
11161: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11162: LD_ADDR_VAR 0 6
11166: PUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 274
11176: PPUSH
11177: LD_VAR 0 2
11181: PPUSH
11182: LD_INT 0
11184: PPUSH
11185: CALL 8739 0 3
11189: PPUSH
11190: LD_INT 30
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 72
11204: ST_TO_ADDR
// if not factories then
11205: LD_VAR 0 6
11209: NOT
11210: IFFALSE 11214
// exit ;
11212: GO 12204
// for i in factories do
11214: LD_ADDR_VAR 0 8
11218: PUSH
11219: LD_VAR 0 6
11223: PUSH
11224: FOR_IN
11225: IFFALSE 11250
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11227: LD_ADDR_VAR 0 17
11231: PUSH
11232: LD_VAR 0 17
11236: PUSH
11237: LD_VAR 0 8
11241: PPUSH
11242: CALL_OW 478
11246: UNION
11247: ST_TO_ADDR
11248: GO 11224
11250: POP
11251: POP
// if not fac_list then
11252: LD_VAR 0 17
11256: NOT
11257: IFFALSE 11261
// exit ;
11259: GO 12204
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11261: LD_ADDR_VAR 0 5
11265: PUSH
11266: LD_INT 4
11268: PUSH
11269: LD_INT 5
11271: PUSH
11272: LD_INT 9
11274: PUSH
11275: LD_INT 10
11277: PUSH
11278: LD_INT 6
11280: PUSH
11281: LD_INT 7
11283: PUSH
11284: LD_INT 11
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 27
11298: PUSH
11299: LD_INT 28
11301: PUSH
11302: LD_INT 26
11304: PUSH
11305: LD_INT 30
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 43
11316: PUSH
11317: LD_INT 44
11319: PUSH
11320: LD_INT 46
11322: PUSH
11323: LD_INT 45
11325: PUSH
11326: LD_INT 47
11328: PUSH
11329: LD_INT 49
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: LD_VAR 0 12
11349: ARRAY
11350: ST_TO_ADDR
// list := list isect fac_list ;
11351: LD_ADDR_VAR 0 5
11355: PUSH
11356: LD_VAR 0 5
11360: PUSH
11361: LD_VAR 0 17
11365: ISECT
11366: ST_TO_ADDR
// if not list then
11367: LD_VAR 0 5
11371: NOT
11372: IFFALSE 11376
// exit ;
11374: GO 12204
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11376: LD_VAR 0 12
11380: PUSH
11381: LD_INT 3
11383: EQUAL
11384: IFFALSE 11396
11386: PUSH
11387: LD_INT 49
11389: PUSH
11390: LD_VAR 0 5
11394: IN
11395: AND
11396: IFFALSE 11416
11398: PUSH
11399: LD_INT 31
11401: PPUSH
11402: LD_VAR 0 16
11406: PPUSH
11407: CALL_OW 321
11411: PUSH
11412: LD_INT 2
11414: EQUAL
11415: AND
11416: IFFALSE 11476
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11418: LD_INT 22
11420: PUSH
11421: LD_VAR 0 16
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 35
11432: PUSH
11433: LD_INT 49
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 91
11442: PUSH
11443: LD_VAR 0 1
11447: PUSH
11448: LD_INT 10
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 69
11465: NOT
11466: IFFALSE 11476
// weapon := ru_time_lapser ;
11468: LD_ADDR_VAR 0 18
11472: PUSH
11473: LD_INT 49
11475: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11476: LD_VAR 0 12
11480: PUSH
11481: LD_INT 1
11483: PUSH
11484: LD_INT 2
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: IN
11491: IFFALSE 11515
11493: PUSH
11494: LD_INT 11
11496: PUSH
11497: LD_VAR 0 5
11501: IN
11502: IFTRUE 11514
11504: PUSH
11505: LD_INT 30
11507: PUSH
11508: LD_VAR 0 5
11512: IN
11513: OR
11514: AND
11515: IFFALSE 11535
11517: PUSH
11518: LD_INT 6
11520: PPUSH
11521: LD_VAR 0 16
11525: PPUSH
11526: CALL_OW 321
11530: PUSH
11531: LD_INT 2
11533: EQUAL
11534: AND
11535: IFFALSE 11702
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11537: LD_INT 22
11539: PUSH
11540: LD_VAR 0 16
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 35
11554: PUSH
11555: LD_INT 11
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 35
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 91
11579: PUSH
11580: LD_VAR 0 1
11584: PUSH
11585: LD_INT 18
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: PPUSH
11598: CALL_OW 69
11602: NOT
11603: IFFALSE 11679
11605: PUSH
11606: LD_INT 22
11608: PUSH
11609: LD_VAR 0 16
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 2
11620: PUSH
11621: LD_INT 30
11623: PUSH
11624: LD_INT 32
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 30
11633: PUSH
11634: LD_INT 33
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 91
11648: PUSH
11649: LD_VAR 0 1
11653: PUSH
11654: LD_INT 12
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: PPUSH
11670: CALL_OW 69
11674: PUSH
11675: LD_INT 2
11677: GREATER
11678: AND
11679: IFFALSE 11702
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11681: LD_ADDR_VAR 0 18
11685: PUSH
11686: LD_INT 11
11688: PUSH
11689: LD_INT 30
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_VAR 0 12
11700: ARRAY
11701: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11702: LD_VAR 0 18
11706: NOT
11707: IFFALSE 11727
11709: PUSH
11710: LD_INT 40
11712: PPUSH
11713: LD_VAR 0 16
11717: PPUSH
11718: CALL_OW 321
11722: PUSH
11723: LD_INT 2
11725: EQUAL
11726: AND
11727: IFFALSE 11763
11729: PUSH
11730: LD_INT 7
11732: PUSH
11733: LD_VAR 0 5
11737: IN
11738: IFTRUE 11750
11740: PUSH
11741: LD_INT 28
11743: PUSH
11744: LD_VAR 0 5
11748: IN
11749: OR
11750: IFTRUE 11762
11752: PUSH
11753: LD_INT 45
11755: PUSH
11756: LD_VAR 0 5
11760: IN
11761: OR
11762: AND
11763: IFFALSE 12017
// begin hex := GetHexInfo ( x , y ) ;
11765: LD_ADDR_VAR 0 4
11769: PUSH
11770: LD_VAR 0 10
11774: PPUSH
11775: LD_VAR 0 11
11779: PPUSH
11780: CALL_OW 546
11784: ST_TO_ADDR
// if hex [ 1 ] then
11785: LD_VAR 0 4
11789: PUSH
11790: LD_INT 1
11792: ARRAY
11793: IFFALSE 11797
// exit ;
11795: GO 12204
// height := hex [ 2 ] ;
11797: LD_ADDR_VAR 0 15
11801: PUSH
11802: LD_VAR 0 4
11806: PUSH
11807: LD_INT 2
11809: ARRAY
11810: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11811: LD_ADDR_VAR 0 14
11815: PUSH
11816: LD_INT 0
11818: PUSH
11819: LD_INT 2
11821: PUSH
11822: LD_INT 3
11824: PUSH
11825: LD_INT 5
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: ST_TO_ADDR
// for i in tmp do
11834: LD_ADDR_VAR 0 8
11838: PUSH
11839: LD_VAR 0 14
11843: PUSH
11844: FOR_IN
11845: IFFALSE 12015
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11847: LD_ADDR_VAR 0 9
11851: PUSH
11852: LD_VAR 0 10
11856: PPUSH
11857: LD_VAR 0 8
11861: PPUSH
11862: LD_INT 5
11864: PPUSH
11865: CALL_OW 272
11869: PUSH
11870: LD_VAR 0 11
11874: PPUSH
11875: LD_VAR 0 8
11879: PPUSH
11880: LD_INT 5
11882: PPUSH
11883: CALL_OW 273
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11892: LD_VAR 0 9
11896: PUSH
11897: LD_INT 1
11899: ARRAY
11900: PPUSH
11901: LD_VAR 0 9
11905: PUSH
11906: LD_INT 2
11908: ARRAY
11909: PPUSH
11910: CALL_OW 488
11914: IFFALSE 12013
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11916: LD_ADDR_VAR 0 4
11920: PUSH
11921: LD_VAR 0 9
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: LD_VAR 0 9
11934: PUSH
11935: LD_INT 2
11937: ARRAY
11938: PPUSH
11939: CALL_OW 546
11943: ST_TO_ADDR
// if hex [ 1 ] then
11944: LD_VAR 0 4
11948: PUSH
11949: LD_INT 1
11951: ARRAY
11952: IFFALSE 11956
// continue ;
11954: GO 11844
// h := hex [ 2 ] ;
11956: LD_ADDR_VAR 0 13
11960: PUSH
11961: LD_VAR 0 4
11965: PUSH
11966: LD_INT 2
11968: ARRAY
11969: ST_TO_ADDR
// if h + 7 < height then
11970: LD_VAR 0 13
11974: PUSH
11975: LD_INT 7
11977: PLUS
11978: PUSH
11979: LD_VAR 0 15
11983: LESS
11984: IFFALSE 12013
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11986: LD_ADDR_VAR 0 18
11990: PUSH
11991: LD_INT 7
11993: PUSH
11994: LD_INT 28
11996: PUSH
11997: LD_INT 45
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PUSH
12005: LD_VAR 0 12
12009: ARRAY
12010: ST_TO_ADDR
// break ;
12011: GO 12015
// end ; end ; end ;
12013: GO 11844
12015: POP
12016: POP
// end ; if not weapon then
12017: LD_VAR 0 18
12021: NOT
12022: IFFALSE 12082
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12024: LD_ADDR_VAR 0 5
12028: PUSH
12029: LD_VAR 0 5
12033: PUSH
12034: LD_INT 11
12036: PUSH
12037: LD_INT 30
12039: PUSH
12040: LD_INT 49
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: DIFF
12048: ST_TO_ADDR
// if not list then
12049: LD_VAR 0 5
12053: NOT
12054: IFFALSE 12058
// exit ;
12056: GO 12204
// weapon := list [ rand ( 1 , list ) ] ;
12058: LD_ADDR_VAR 0 18
12062: PUSH
12063: LD_VAR 0 5
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 5
12075: PPUSH
12076: CALL_OW 12
12080: ARRAY
12081: ST_TO_ADDR
// end ; if weapon then
12082: LD_VAR 0 18
12086: IFFALSE 12204
// begin tmp := CostOfWeapon ( weapon ) ;
12088: LD_ADDR_VAR 0 14
12092: PUSH
12093: LD_VAR 0 18
12097: PPUSH
12098: CALL_OW 451
12102: ST_TO_ADDR
// j := GetBase ( tower ) ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 274
12117: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12118: LD_VAR 0 9
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: CALL_OW 275
12130: PUSH
12131: LD_VAR 0 14
12135: PUSH
12136: LD_INT 1
12138: ARRAY
12139: GREATEREQUAL
12140: IFFALSE 12166
12142: PUSH
12143: LD_VAR 0 9
12147: PPUSH
12148: LD_INT 2
12150: PPUSH
12151: CALL_OW 275
12155: PUSH
12156: LD_VAR 0 14
12160: PUSH
12161: LD_INT 2
12163: ARRAY
12164: GREATEREQUAL
12165: AND
12166: IFFALSE 12192
12168: PUSH
12169: LD_VAR 0 9
12173: PPUSH
12174: LD_INT 3
12176: PPUSH
12177: CALL_OW 275
12181: PUSH
12182: LD_VAR 0 14
12186: PUSH
12187: LD_INT 3
12189: ARRAY
12190: GREATEREQUAL
12191: AND
12192: IFFALSE 12204
// result := weapon ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 18
12203: ST_TO_ADDR
// end ; end ;
12204: LD_VAR 0 3
12208: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12209: LD_INT 0
12211: PPUSH
12212: PPUSH
// result := true ;
12213: LD_ADDR_VAR 0 3
12217: PUSH
12218: LD_INT 1
12220: ST_TO_ADDR
// if array1 = array2 then
12221: LD_VAR 0 1
12225: PUSH
12226: LD_VAR 0 2
12230: EQUAL
12231: IFFALSE 12291
// begin for i = 1 to array1 do
12233: LD_ADDR_VAR 0 4
12237: PUSH
12238: DOUBLE
12239: LD_INT 1
12241: DEC
12242: ST_TO_ADDR
12243: LD_VAR 0 1
12247: PUSH
12248: FOR_TO
12249: IFFALSE 12287
// if array1 [ i ] <> array2 [ i ] then
12251: LD_VAR 0 1
12255: PUSH
12256: LD_VAR 0 4
12260: ARRAY
12261: PUSH
12262: LD_VAR 0 2
12266: PUSH
12267: LD_VAR 0 4
12271: ARRAY
12272: NONEQUAL
12273: IFFALSE 12285
// begin result := false ;
12275: LD_ADDR_VAR 0 3
12279: PUSH
12280: LD_INT 0
12282: ST_TO_ADDR
// break ;
12283: GO 12287
// end ;
12285: GO 12248
12287: POP
12288: POP
// end else
12289: GO 12299
// result := false ;
12291: LD_ADDR_VAR 0 3
12295: PUSH
12296: LD_INT 0
12298: ST_TO_ADDR
// end ;
12299: LD_VAR 0 3
12303: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12304: LD_INT 0
12306: PPUSH
12307: PPUSH
// if not array1 or not array2 then
12308: LD_VAR 0 1
12312: NOT
12313: IFTRUE 12322
12315: PUSH
12316: LD_VAR 0 2
12320: NOT
12321: OR
12322: IFFALSE 12326
// exit ;
12324: GO 12390
// result := true ;
12326: LD_ADDR_VAR 0 3
12330: PUSH
12331: LD_INT 1
12333: ST_TO_ADDR
// for i = 1 to array1 do
12334: LD_ADDR_VAR 0 4
12338: PUSH
12339: DOUBLE
12340: LD_INT 1
12342: DEC
12343: ST_TO_ADDR
12344: LD_VAR 0 1
12348: PUSH
12349: FOR_TO
12350: IFFALSE 12388
// if array1 [ i ] <> array2 [ i ] then
12352: LD_VAR 0 1
12356: PUSH
12357: LD_VAR 0 4
12361: ARRAY
12362: PUSH
12363: LD_VAR 0 2
12367: PUSH
12368: LD_VAR 0 4
12372: ARRAY
12373: NONEQUAL
12374: IFFALSE 12386
// begin result := false ;
12376: LD_ADDR_VAR 0 3
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// break ;
12384: GO 12388
// end ;
12386: GO 12349
12388: POP
12389: POP
// end ;
12390: LD_VAR 0 3
12394: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12395: LD_INT 0
12397: PPUSH
12398: PPUSH
12399: PPUSH
// pom := GetBase ( fac ) ;
12400: LD_ADDR_VAR 0 5
12404: PUSH
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 274
12414: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12415: LD_ADDR_VAR 0 4
12419: PUSH
12420: LD_VAR 0 2
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: LD_VAR 0 2
12433: PUSH
12434: LD_INT 2
12436: ARRAY
12437: PPUSH
12438: LD_VAR 0 2
12442: PUSH
12443: LD_INT 3
12445: ARRAY
12446: PPUSH
12447: LD_VAR 0 2
12451: PUSH
12452: LD_INT 4
12454: ARRAY
12455: PPUSH
12456: CALL_OW 449
12460: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12461: LD_ADDR_VAR 0 3
12465: PUSH
12466: LD_VAR 0 5
12470: PPUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 275
12478: PUSH
12479: LD_VAR 0 4
12483: PUSH
12484: LD_INT 1
12486: ARRAY
12487: GREATEREQUAL
12488: IFFALSE 12514
12490: PUSH
12491: LD_VAR 0 5
12495: PPUSH
12496: LD_INT 2
12498: PPUSH
12499: CALL_OW 275
12503: PUSH
12504: LD_VAR 0 4
12508: PUSH
12509: LD_INT 2
12511: ARRAY
12512: GREATEREQUAL
12513: AND
12514: IFFALSE 12540
12516: PUSH
12517: LD_VAR 0 5
12521: PPUSH
12522: LD_INT 3
12524: PPUSH
12525: CALL_OW 275
12529: PUSH
12530: LD_VAR 0 4
12534: PUSH
12535: LD_INT 3
12537: ARRAY
12538: GREATEREQUAL
12539: AND
12540: ST_TO_ADDR
// end ;
12541: LD_VAR 0 3
12545: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12546: LD_INT 0
12548: PPUSH
12549: PPUSH
12550: PPUSH
12551: PPUSH
// pom := GetBase ( building ) ;
12552: LD_ADDR_VAR 0 3
12556: PUSH
12557: LD_VAR 0 1
12561: PPUSH
12562: CALL_OW 274
12566: ST_TO_ADDR
// if not pom then
12567: LD_VAR 0 3
12571: NOT
12572: IFFALSE 12576
// exit ;
12574: GO 12750
// btype := GetBType ( building ) ;
12576: LD_ADDR_VAR 0 5
12580: PUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: CALL_OW 266
12590: ST_TO_ADDR
// if btype = b_armoury then
12591: LD_VAR 0 5
12595: PUSH
12596: LD_INT 4
12598: EQUAL
12599: IFFALSE 12609
// btype := b_barracks ;
12601: LD_ADDR_VAR 0 5
12605: PUSH
12606: LD_INT 5
12608: ST_TO_ADDR
// if btype = b_depot then
12609: LD_VAR 0 5
12613: PUSH
12614: LD_INT 0
12616: EQUAL
12617: IFFALSE 12627
// btype := b_warehouse ;
12619: LD_ADDR_VAR 0 5
12623: PUSH
12624: LD_INT 1
12626: ST_TO_ADDR
// if btype = b_workshop then
12627: LD_VAR 0 5
12631: PUSH
12632: LD_INT 2
12634: EQUAL
12635: IFFALSE 12645
// btype := b_factory ;
12637: LD_ADDR_VAR 0 5
12641: PUSH
12642: LD_INT 3
12644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12645: LD_ADDR_VAR 0 4
12649: PUSH
12650: LD_VAR 0 5
12654: PPUSH
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 248
12664: PPUSH
12665: CALL_OW 450
12669: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12670: LD_ADDR_VAR 0 2
12674: PUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: CALL_OW 275
12687: PUSH
12688: LD_VAR 0 4
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: GREATEREQUAL
12697: IFFALSE 12723
12699: PUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 2
12707: PPUSH
12708: CALL_OW 275
12712: PUSH
12713: LD_VAR 0 4
12717: PUSH
12718: LD_INT 2
12720: ARRAY
12721: GREATEREQUAL
12722: AND
12723: IFFALSE 12749
12725: PUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 3
12733: PPUSH
12734: CALL_OW 275
12738: PUSH
12739: LD_VAR 0 4
12743: PUSH
12744: LD_INT 3
12746: ARRAY
12747: GREATEREQUAL
12748: AND
12749: ST_TO_ADDR
// end ;
12750: LD_VAR 0 2
12754: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
12759: PPUSH
// pom := GetBase ( building ) ;
12760: LD_ADDR_VAR 0 4
12764: PUSH
12765: LD_VAR 0 1
12769: PPUSH
12770: CALL_OW 274
12774: ST_TO_ADDR
// if not pom then
12775: LD_VAR 0 4
12779: NOT
12780: IFFALSE 12784
// exit ;
12782: GO 12889
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12784: LD_ADDR_VAR 0 5
12788: PUSH
12789: LD_VAR 0 2
12793: PPUSH
12794: LD_VAR 0 1
12798: PPUSH
12799: CALL_OW 248
12803: PPUSH
12804: CALL_OW 450
12808: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12809: LD_ADDR_VAR 0 3
12813: PUSH
12814: LD_VAR 0 4
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 275
12826: PUSH
12827: LD_VAR 0 5
12831: PUSH
12832: LD_INT 1
12834: ARRAY
12835: GREATEREQUAL
12836: IFFALSE 12862
12838: PUSH
12839: LD_VAR 0 4
12843: PPUSH
12844: LD_INT 2
12846: PPUSH
12847: CALL_OW 275
12851: PUSH
12852: LD_VAR 0 5
12856: PUSH
12857: LD_INT 2
12859: ARRAY
12860: GREATEREQUAL
12861: AND
12862: IFFALSE 12888
12864: PUSH
12865: LD_VAR 0 4
12869: PPUSH
12870: LD_INT 3
12872: PPUSH
12873: CALL_OW 275
12877: PUSH
12878: LD_VAR 0 5
12882: PUSH
12883: LD_INT 3
12885: ARRAY
12886: GREATEREQUAL
12887: AND
12888: ST_TO_ADDR
// end ;
12889: LD_VAR 0 3
12893: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12894: LD_INT 0
12896: PPUSH
12897: PPUSH
12898: PPUSH
12899: PPUSH
12900: PPUSH
12901: PPUSH
12902: PPUSH
12903: PPUSH
12904: PPUSH
12905: PPUSH
12906: PPUSH
// result := false ;
12907: LD_ADDR_VAR 0 8
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12915: LD_VAR 0 5
12919: NOT
12920: IFTRUE 12929
12922: PUSH
12923: LD_VAR 0 1
12927: NOT
12928: OR
12929: IFTRUE 12938
12931: PUSH
12932: LD_VAR 0 2
12936: NOT
12937: OR
12938: IFTRUE 12947
12940: PUSH
12941: LD_VAR 0 3
12945: NOT
12946: OR
12947: IFFALSE 12951
// exit ;
12949: GO 13777
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12951: LD_ADDR_VAR 0 14
12955: PUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: LD_VAR 0 2
12965: PPUSH
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_VAR 0 4
12975: PPUSH
12976: LD_VAR 0 5
12980: PUSH
12981: LD_INT 1
12983: ARRAY
12984: PPUSH
12985: CALL_OW 248
12989: PPUSH
12990: LD_INT 0
12992: PPUSH
12993: CALL 15058 0 6
12997: ST_TO_ADDR
// if not hexes then
12998: LD_VAR 0 14
13002: NOT
13003: IFFALSE 13007
// exit ;
13005: GO 13777
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13007: LD_ADDR_VAR 0 17
13011: PUSH
13012: LD_VAR 0 5
13016: PPUSH
13017: LD_INT 22
13019: PUSH
13020: LD_VAR 0 13
13024: PPUSH
13025: CALL_OW 255
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: LD_INT 30
13039: PUSH
13040: LD_INT 0
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 1
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PPUSH
13066: CALL_OW 72
13070: ST_TO_ADDR
// for i = 1 to hexes do
13071: LD_ADDR_VAR 0 9
13075: PUSH
13076: DOUBLE
13077: LD_INT 1
13079: DEC
13080: ST_TO_ADDR
13081: LD_VAR 0 14
13085: PUSH
13086: FOR_TO
13087: IFFALSE 13775
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13089: LD_ADDR_VAR 0 13
13093: PUSH
13094: LD_VAR 0 14
13098: PUSH
13099: LD_VAR 0 9
13103: ARRAY
13104: PUSH
13105: LD_INT 1
13107: ARRAY
13108: PPUSH
13109: LD_VAR 0 14
13113: PUSH
13114: LD_VAR 0 9
13118: ARRAY
13119: PUSH
13120: LD_INT 2
13122: ARRAY
13123: PPUSH
13124: CALL_OW 428
13128: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13129: LD_VAR 0 14
13133: PUSH
13134: LD_VAR 0 9
13138: ARRAY
13139: PUSH
13140: LD_INT 1
13142: ARRAY
13143: PPUSH
13144: LD_VAR 0 14
13148: PUSH
13149: LD_VAR 0 9
13153: ARRAY
13154: PUSH
13155: LD_INT 2
13157: ARRAY
13158: PPUSH
13159: CALL_OW 351
13163: IFTRUE 13202
13165: PUSH
13166: LD_VAR 0 14
13170: PUSH
13171: LD_VAR 0 9
13175: ARRAY
13176: PUSH
13177: LD_INT 1
13179: ARRAY
13180: PPUSH
13181: LD_VAR 0 14
13185: PUSH
13186: LD_VAR 0 9
13190: ARRAY
13191: PUSH
13192: LD_INT 2
13194: ARRAY
13195: PPUSH
13196: CALL_OW 488
13200: NOT
13201: OR
13202: IFTRUE 13219
13204: PUSH
13205: LD_VAR 0 13
13209: PPUSH
13210: CALL_OW 247
13214: PUSH
13215: LD_INT 3
13217: EQUAL
13218: OR
13219: IFFALSE 13225
// exit ;
13221: POP
13222: POP
13223: GO 13777
// if not tmp then
13225: LD_VAR 0 13
13229: NOT
13230: IFFALSE 13234
// continue ;
13232: GO 13086
// result := true ;
13234: LD_ADDR_VAR 0 8
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13242: LD_VAR 0 6
13246: IFFALSE 13263
13248: PUSH
13249: LD_VAR 0 13
13253: PPUSH
13254: CALL_OW 247
13258: PUSH
13259: LD_INT 2
13261: EQUAL
13262: AND
13263: IFFALSE 13280
13265: PUSH
13266: LD_VAR 0 13
13270: PPUSH
13271: CALL_OW 263
13275: PUSH
13276: LD_INT 1
13278: EQUAL
13279: AND
13280: IFFALSE 13444
// begin if IsDrivenBy ( tmp ) then
13282: LD_VAR 0 13
13286: PPUSH
13287: CALL_OW 311
13291: IFFALSE 13295
// continue ;
13293: GO 13086
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13295: LD_VAR 0 6
13299: PPUSH
13300: LD_INT 3
13302: PUSH
13303: LD_INT 60
13305: PUSH
13306: EMPTY
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: LD_INT 55
13318: PUSH
13319: EMPTY
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PPUSH
13330: CALL_OW 72
13334: IFFALSE 13442
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13336: LD_ADDR_VAR 0 18
13340: PUSH
13341: LD_VAR 0 6
13345: PPUSH
13346: LD_INT 3
13348: PUSH
13349: LD_INT 60
13351: PUSH
13352: EMPTY
13353: LIST
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 3
13361: PUSH
13362: LD_INT 55
13364: PUSH
13365: EMPTY
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 72
13380: PUSH
13381: LD_INT 1
13383: ARRAY
13384: ST_TO_ADDR
// if IsInUnit ( driver ) then
13385: LD_VAR 0 18
13389: PPUSH
13390: CALL_OW 310
13394: IFFALSE 13405
// ComExit ( driver ) ;
13396: LD_VAR 0 18
13400: PPUSH
13401: CALL 39048 0 1
// AddComEnterUnit ( driver , tmp ) ;
13405: LD_VAR 0 18
13409: PPUSH
13410: LD_VAR 0 13
13414: PPUSH
13415: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13419: LD_VAR 0 18
13423: PPUSH
13424: LD_VAR 0 7
13428: PPUSH
13429: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13433: LD_VAR 0 18
13437: PPUSH
13438: CALL_OW 181
// end ; continue ;
13442: GO 13086
// end ; if not cleaners or not tmp in cleaners then
13444: LD_VAR 0 6
13448: NOT
13449: IFTRUE 13464
13451: PUSH
13452: LD_VAR 0 13
13456: PUSH
13457: LD_VAR 0 6
13461: IN
13462: NOT
13463: OR
13464: IFFALSE 13773
// begin if dep then
13466: LD_VAR 0 17
13470: IFFALSE 13606
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13472: LD_ADDR_VAR 0 16
13476: PUSH
13477: LD_VAR 0 17
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: CALL_OW 250
13490: PPUSH
13491: LD_VAR 0 17
13495: PUSH
13496: LD_INT 1
13498: ARRAY
13499: PPUSH
13500: CALL_OW 254
13504: PPUSH
13505: LD_INT 5
13507: PPUSH
13508: CALL_OW 272
13512: PUSH
13513: LD_VAR 0 17
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PPUSH
13522: CALL_OW 251
13526: PPUSH
13527: LD_VAR 0 17
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: CALL_OW 254
13540: PPUSH
13541: LD_INT 5
13543: PPUSH
13544: CALL_OW 273
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13553: LD_VAR 0 16
13557: PUSH
13558: LD_INT 1
13560: ARRAY
13561: PPUSH
13562: LD_VAR 0 16
13566: PUSH
13567: LD_INT 2
13569: ARRAY
13570: PPUSH
13571: CALL_OW 488
13575: IFFALSE 13606
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13577: LD_VAR 0 13
13581: PPUSH
13582: LD_VAR 0 16
13586: PUSH
13587: LD_INT 1
13589: ARRAY
13590: PPUSH
13591: LD_VAR 0 16
13595: PUSH
13596: LD_INT 2
13598: ARRAY
13599: PPUSH
13600: CALL_OW 111
// continue ;
13604: GO 13086
// end ; end ; r := GetDir ( tmp ) ;
13606: LD_ADDR_VAR 0 15
13610: PUSH
13611: LD_VAR 0 13
13615: PPUSH
13616: CALL_OW 254
13620: ST_TO_ADDR
// if r = 5 then
13621: LD_VAR 0 15
13625: PUSH
13626: LD_INT 5
13628: EQUAL
13629: IFFALSE 13639
// r := 0 ;
13631: LD_ADDR_VAR 0 15
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// for j = r to 5 do
13639: LD_ADDR_VAR 0 10
13643: PUSH
13644: DOUBLE
13645: LD_VAR 0 15
13649: DEC
13650: ST_TO_ADDR
13651: LD_INT 5
13653: PUSH
13654: FOR_TO
13655: IFFALSE 13771
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13657: LD_ADDR_VAR 0 11
13661: PUSH
13662: LD_VAR 0 13
13666: PPUSH
13667: CALL_OW 250
13671: PPUSH
13672: LD_VAR 0 10
13676: PPUSH
13677: LD_INT 2
13679: PPUSH
13680: CALL_OW 272
13684: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13685: LD_ADDR_VAR 0 12
13689: PUSH
13690: LD_VAR 0 13
13694: PPUSH
13695: CALL_OW 251
13699: PPUSH
13700: LD_VAR 0 10
13704: PPUSH
13705: LD_INT 2
13707: PPUSH
13708: CALL_OW 273
13712: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13713: LD_VAR 0 11
13717: PPUSH
13718: LD_VAR 0 12
13722: PPUSH
13723: CALL_OW 488
13727: IFFALSE 13746
13729: PUSH
13730: LD_VAR 0 11
13734: PPUSH
13735: LD_VAR 0 12
13739: PPUSH
13740: CALL_OW 428
13744: NOT
13745: AND
13746: IFFALSE 13769
// begin ComMoveXY ( tmp , _x , _y ) ;
13748: LD_VAR 0 13
13752: PPUSH
13753: LD_VAR 0 11
13757: PPUSH
13758: LD_VAR 0 12
13762: PPUSH
13763: CALL_OW 111
// break ;
13767: GO 13771
// end ; end ;
13769: GO 13654
13771: POP
13772: POP
// end ; end ;
13773: GO 13086
13775: POP
13776: POP
// end ;
13777: LD_VAR 0 8
13781: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13782: LD_INT 0
13784: PPUSH
// result := true ;
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: LD_INT 1
13792: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13793: LD_VAR 0 2
13797: PUSH
13798: LD_INT 24
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13812
13804: LD_INT 33
13806: DOUBLE
13807: EQUAL
13808: IFTRUE 13812
13810: GO 13837
13812: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13813: LD_ADDR_VAR 0 3
13817: PUSH
13818: LD_INT 32
13820: PPUSH
13821: LD_VAR 0 1
13825: PPUSH
13826: CALL_OW 321
13830: PUSH
13831: LD_INT 2
13833: EQUAL
13834: ST_TO_ADDR
13835: GO 14153
13837: LD_INT 20
13839: DOUBLE
13840: EQUAL
13841: IFTRUE 13845
13843: GO 13870
13845: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13846: LD_ADDR_VAR 0 3
13850: PUSH
13851: LD_INT 6
13853: PPUSH
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 321
13863: PUSH
13864: LD_INT 2
13866: EQUAL
13867: ST_TO_ADDR
13868: GO 14153
13870: LD_INT 22
13872: DOUBLE
13873: EQUAL
13874: IFTRUE 13884
13876: LD_INT 36
13878: DOUBLE
13879: EQUAL
13880: IFTRUE 13884
13882: GO 13909
13884: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13885: LD_ADDR_VAR 0 3
13889: PUSH
13890: LD_INT 15
13892: PPUSH
13893: LD_VAR 0 1
13897: PPUSH
13898: CALL_OW 321
13902: PUSH
13903: LD_INT 2
13905: EQUAL
13906: ST_TO_ADDR
13907: GO 14153
13909: LD_INT 30
13911: DOUBLE
13912: EQUAL
13913: IFTRUE 13917
13915: GO 13942
13917: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13918: LD_ADDR_VAR 0 3
13922: PUSH
13923: LD_INT 20
13925: PPUSH
13926: LD_VAR 0 1
13930: PPUSH
13931: CALL_OW 321
13935: PUSH
13936: LD_INT 2
13938: EQUAL
13939: ST_TO_ADDR
13940: GO 14153
13942: LD_INT 28
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13956
13948: LD_INT 21
13950: DOUBLE
13951: EQUAL
13952: IFTRUE 13956
13954: GO 13981
13956: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13957: LD_ADDR_VAR 0 3
13961: PUSH
13962: LD_INT 21
13964: PPUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 321
13974: PUSH
13975: LD_INT 2
13977: EQUAL
13978: ST_TO_ADDR
13979: GO 14153
13981: LD_INT 16
13983: DOUBLE
13984: EQUAL
13985: IFTRUE 13989
13987: GO 14014
13989: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13990: LD_ADDR_VAR 0 3
13994: PUSH
13995: LD_INT 84
13997: PPUSH
13998: LD_VAR 0 1
14002: PPUSH
14003: CALL_OW 321
14007: PUSH
14008: LD_INT 2
14010: EQUAL
14011: ST_TO_ADDR
14012: GO 14153
14014: LD_INT 19
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14028
14020: LD_INT 23
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14053
14028: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 83
14036: PPUSH
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 321
14046: PUSH
14047: LD_INT 2
14049: EQUAL
14050: ST_TO_ADDR
14051: GO 14153
14053: LD_INT 17
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14086
14061: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14062: LD_ADDR_VAR 0 3
14066: PUSH
14067: LD_INT 39
14069: PPUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 321
14079: PUSH
14080: LD_INT 2
14082: EQUAL
14083: ST_TO_ADDR
14084: GO 14153
14086: LD_INT 18
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14094
14092: GO 14119
14094: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: LD_INT 40
14102: PPUSH
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 321
14112: PUSH
14113: LD_INT 2
14115: EQUAL
14116: ST_TO_ADDR
14117: GO 14153
14119: LD_INT 27
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14152
14127: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14128: LD_ADDR_VAR 0 3
14132: PUSH
14133: LD_INT 35
14135: PPUSH
14136: LD_VAR 0 1
14140: PPUSH
14141: CALL_OW 321
14145: PUSH
14146: LD_INT 2
14148: EQUAL
14149: ST_TO_ADDR
14150: GO 14153
14152: POP
// end ;
14153: LD_VAR 0 3
14157: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14158: LD_INT 0
14160: PPUSH
14161: PPUSH
14162: PPUSH
14163: PPUSH
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
14168: PPUSH
14169: PPUSH
14170: PPUSH
// result := false ;
14171: LD_ADDR_VAR 0 6
14175: PUSH
14176: LD_INT 0
14178: ST_TO_ADDR
// if btype = b_depot then
14179: LD_VAR 0 2
14183: PUSH
14184: LD_INT 0
14186: EQUAL
14187: IFFALSE 14199
// begin result := true ;
14189: LD_ADDR_VAR 0 6
14193: PUSH
14194: LD_INT 1
14196: ST_TO_ADDR
// exit ;
14197: GO 15053
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14199: LD_VAR 0 1
14203: NOT
14204: IFTRUE 14229
14206: PUSH
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 266
14216: PUSH
14217: LD_INT 0
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: IN
14227: NOT
14228: OR
14229: IFTRUE 14238
14231: PUSH
14232: LD_VAR 0 2
14236: NOT
14237: OR
14238: IFTRUE 14274
14240: PUSH
14241: LD_VAR 0 5
14245: PUSH
14246: LD_INT 0
14248: PUSH
14249: LD_INT 1
14251: PUSH
14252: LD_INT 2
14254: PUSH
14255: LD_INT 3
14257: PUSH
14258: LD_INT 4
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: IN
14272: NOT
14273: OR
14274: IFTRUE 14293
14276: PUSH
14277: LD_VAR 0 3
14281: PPUSH
14282: LD_VAR 0 4
14286: PPUSH
14287: CALL_OW 488
14291: NOT
14292: OR
14293: IFFALSE 14297
// exit ;
14295: GO 15053
// side := GetSide ( depot ) ;
14297: LD_ADDR_VAR 0 9
14301: PUSH
14302: LD_VAR 0 1
14306: PPUSH
14307: CALL_OW 255
14311: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14312: LD_VAR 0 9
14316: PPUSH
14317: LD_VAR 0 2
14321: PPUSH
14322: CALL 13782 0 2
14326: NOT
14327: IFFALSE 14331
// exit ;
14329: GO 15053
// pom := GetBase ( depot ) ;
14331: LD_ADDR_VAR 0 10
14335: PUSH
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 274
14345: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14346: LD_ADDR_VAR 0 11
14350: PUSH
14351: LD_VAR 0 2
14355: PPUSH
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 248
14365: PPUSH
14366: CALL_OW 450
14370: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14371: LD_VAR 0 10
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 275
14383: PUSH
14384: LD_VAR 0 11
14388: PUSH
14389: LD_INT 1
14391: ARRAY
14392: GREATEREQUAL
14393: IFFALSE 14419
14395: PUSH
14396: LD_VAR 0 10
14400: PPUSH
14401: LD_INT 2
14403: PPUSH
14404: CALL_OW 275
14408: PUSH
14409: LD_VAR 0 11
14413: PUSH
14414: LD_INT 2
14416: ARRAY
14417: GREATEREQUAL
14418: AND
14419: IFFALSE 14445
14421: PUSH
14422: LD_VAR 0 10
14426: PPUSH
14427: LD_INT 3
14429: PPUSH
14430: CALL_OW 275
14434: PUSH
14435: LD_VAR 0 11
14439: PUSH
14440: LD_INT 3
14442: ARRAY
14443: GREATEREQUAL
14444: AND
14445: NOT
14446: IFFALSE 14450
// exit ;
14448: GO 15053
// if GetBType ( depot ) = b_depot then
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 266
14459: PUSH
14460: LD_INT 0
14462: EQUAL
14463: IFFALSE 14475
// dist := 28 else
14465: LD_ADDR_VAR 0 14
14469: PUSH
14470: LD_INT 28
14472: ST_TO_ADDR
14473: GO 14483
// dist := 36 ;
14475: LD_ADDR_VAR 0 14
14479: PUSH
14480: LD_INT 36
14482: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14483: LD_VAR 0 1
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: LD_VAR 0 4
14497: PPUSH
14498: CALL_OW 297
14502: PUSH
14503: LD_VAR 0 14
14507: GREATER
14508: IFFALSE 14512
// exit ;
14510: GO 15053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14512: LD_ADDR_VAR 0 12
14516: PUSH
14517: LD_VAR 0 2
14521: PPUSH
14522: LD_VAR 0 3
14526: PPUSH
14527: LD_VAR 0 4
14531: PPUSH
14532: LD_VAR 0 5
14536: PPUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL_OW 248
14546: PPUSH
14547: LD_INT 0
14549: PPUSH
14550: CALL 15058 0 6
14554: ST_TO_ADDR
// if not hexes then
14555: LD_VAR 0 12
14559: NOT
14560: IFFALSE 14564
// exit ;
14562: GO 15053
// hex := GetHexInfo ( x , y ) ;
14564: LD_ADDR_VAR 0 15
14568: PUSH
14569: LD_VAR 0 3
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 546
14583: ST_TO_ADDR
// if hex [ 1 ] then
14584: LD_VAR 0 15
14588: PUSH
14589: LD_INT 1
14591: ARRAY
14592: IFFALSE 14596
// exit ;
14594: GO 15053
// height := hex [ 2 ] ;
14596: LD_ADDR_VAR 0 13
14600: PUSH
14601: LD_VAR 0 15
14605: PUSH
14606: LD_INT 2
14608: ARRAY
14609: ST_TO_ADDR
// for i = 1 to hexes do
14610: LD_ADDR_VAR 0 7
14614: PUSH
14615: DOUBLE
14616: LD_INT 1
14618: DEC
14619: ST_TO_ADDR
14620: LD_VAR 0 12
14624: PUSH
14625: FOR_TO
14626: IFFALSE 14970
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14628: LD_VAR 0 12
14632: PUSH
14633: LD_VAR 0 7
14637: ARRAY
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: LD_VAR 0 12
14647: PUSH
14648: LD_VAR 0 7
14652: ARRAY
14653: PUSH
14654: LD_INT 2
14656: ARRAY
14657: PPUSH
14658: CALL_OW 488
14662: NOT
14663: IFTRUE 14705
14665: PUSH
14666: LD_VAR 0 12
14670: PUSH
14671: LD_VAR 0 7
14675: ARRAY
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: LD_VAR 0 12
14685: PUSH
14686: LD_VAR 0 7
14690: ARRAY
14691: PUSH
14692: LD_INT 2
14694: ARRAY
14695: PPUSH
14696: CALL_OW 428
14700: PUSH
14701: LD_INT 0
14703: GREATER
14704: OR
14705: IFTRUE 14743
14707: PUSH
14708: LD_VAR 0 12
14712: PUSH
14713: LD_VAR 0 7
14717: ARRAY
14718: PUSH
14719: LD_INT 1
14721: ARRAY
14722: PPUSH
14723: LD_VAR 0 12
14727: PUSH
14728: LD_VAR 0 7
14732: ARRAY
14733: PUSH
14734: LD_INT 2
14736: ARRAY
14737: PPUSH
14738: CALL_OW 351
14742: OR
14743: IFFALSE 14749
// exit ;
14745: POP
14746: POP
14747: GO 15053
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14749: LD_ADDR_VAR 0 8
14753: PUSH
14754: LD_VAR 0 12
14758: PUSH
14759: LD_VAR 0 7
14763: ARRAY
14764: PUSH
14765: LD_INT 1
14767: ARRAY
14768: PPUSH
14769: LD_VAR 0 12
14773: PUSH
14774: LD_VAR 0 7
14778: ARRAY
14779: PUSH
14780: LD_INT 2
14782: ARRAY
14783: PPUSH
14784: CALL_OW 546
14788: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14789: LD_VAR 0 8
14793: PUSH
14794: LD_INT 1
14796: ARRAY
14797: IFTRUE 14819
14799: PUSH
14800: LD_VAR 0 8
14804: PUSH
14805: LD_INT 2
14807: ARRAY
14808: PUSH
14809: LD_VAR 0 13
14813: PUSH
14814: LD_INT 2
14816: PLUS
14817: GREATER
14818: OR
14819: IFTRUE 14841
14821: PUSH
14822: LD_VAR 0 8
14826: PUSH
14827: LD_INT 2
14829: ARRAY
14830: PUSH
14831: LD_VAR 0 13
14835: PUSH
14836: LD_INT 2
14838: MINUS
14839: LESS
14840: OR
14841: IFTRUE 14909
14843: PUSH
14844: LD_VAR 0 8
14848: PUSH
14849: LD_INT 3
14851: ARRAY
14852: PUSH
14853: LD_INT 0
14855: PUSH
14856: LD_INT 8
14858: PUSH
14859: LD_INT 9
14861: PUSH
14862: LD_INT 10
14864: PUSH
14865: LD_INT 11
14867: PUSH
14868: LD_INT 12
14870: PUSH
14871: LD_INT 13
14873: PUSH
14874: LD_INT 16
14876: PUSH
14877: LD_INT 17
14879: PUSH
14880: LD_INT 18
14882: PUSH
14883: LD_INT 19
14885: PUSH
14886: LD_INT 20
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: IN
14907: NOT
14908: OR
14909: IFTRUE 14922
14911: PUSH
14912: LD_VAR 0 8
14916: PUSH
14917: LD_INT 5
14919: ARRAY
14920: NOT
14921: OR
14922: IFTRUE 14962
14924: PUSH
14925: LD_VAR 0 8
14929: PUSH
14930: LD_INT 6
14932: ARRAY
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: LD_INT 2
14939: PUSH
14940: LD_INT 7
14942: PUSH
14943: LD_INT 9
14945: PUSH
14946: LD_INT 10
14948: PUSH
14949: LD_INT 11
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: IN
14960: NOT
14961: OR
14962: IFFALSE 14968
// exit ;
14964: POP
14965: POP
14966: GO 15053
// end ;
14968: GO 14625
14970: POP
14971: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14972: LD_VAR 0 9
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: LD_VAR 0 4
14986: PPUSH
14987: LD_INT 20
14989: PPUSH
14990: CALL 6872 0 4
14994: PUSH
14995: LD_INT 4
14997: ARRAY
14998: IFFALSE 15002
// exit ;
15000: GO 15053
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15002: LD_VAR 0 2
15006: PUSH
15007: LD_INT 29
15009: PUSH
15010: LD_INT 30
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: IN
15017: IFFALSE 15041
15019: PUSH
15020: LD_VAR 0 3
15024: PPUSH
15025: LD_VAR 0 4
15029: PPUSH
15030: LD_VAR 0 9
15034: PPUSH
15035: CALL_OW 440
15039: NOT
15040: AND
15041: IFFALSE 15045
// exit ;
15043: GO 15053
// result := true ;
15045: LD_ADDR_VAR 0 6
15049: PUSH
15050: LD_INT 1
15052: ST_TO_ADDR
// end ;
15053: LD_VAR 0 6
15057: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15058: LD_INT 0
15060: PPUSH
15061: PPUSH
15062: PPUSH
15063: PPUSH
15064: PPUSH
15065: PPUSH
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
15071: PPUSH
15072: PPUSH
15073: PPUSH
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// result = [ ] ;
15118: LD_ADDR_VAR 0 7
15122: PUSH
15123: EMPTY
15124: ST_TO_ADDR
// temp_list = [ ] ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: EMPTY
15131: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15132: LD_VAR 0 4
15136: PUSH
15137: LD_INT 0
15139: PUSH
15140: LD_INT 1
15142: PUSH
15143: LD_INT 2
15145: PUSH
15146: LD_INT 3
15148: PUSH
15149: LD_INT 4
15151: PUSH
15152: LD_INT 5
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: IN
15163: NOT
15164: IFTRUE 15207
15166: PUSH
15167: LD_VAR 0 1
15171: PUSH
15172: LD_INT 0
15174: PUSH
15175: LD_INT 1
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: IN
15182: IFFALSE 15206
15184: PUSH
15185: LD_VAR 0 5
15189: PUSH
15190: LD_INT 1
15192: PUSH
15193: LD_INT 2
15195: PUSH
15196: LD_INT 3
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: IN
15204: NOT
15205: AND
15206: OR
15207: IFFALSE 15211
// exit ;
15209: GO 33610
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15211: LD_VAR 0 1
15215: PUSH
15216: LD_INT 6
15218: PUSH
15219: LD_INT 7
15221: PUSH
15222: LD_INT 8
15224: PUSH
15225: LD_INT 13
15227: PUSH
15228: LD_INT 12
15230: PUSH
15231: LD_INT 15
15233: PUSH
15234: LD_INT 11
15236: PUSH
15237: LD_INT 14
15239: PUSH
15240: LD_INT 10
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: IN
15254: IFFALSE 15264
// btype = b_lab ;
15256: LD_ADDR_VAR 0 1
15260: PUSH
15261: LD_INT 6
15263: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15264: LD_VAR 0 6
15268: PUSH
15269: LD_INT 0
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: IN
15283: NOT
15284: IFTRUE 15352
15286: PUSH
15287: LD_VAR 0 1
15291: PUSH
15292: LD_INT 0
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: LD_INT 6
15306: PUSH
15307: LD_INT 36
15309: PUSH
15310: LD_INT 4
15312: PUSH
15313: LD_INT 5
15315: PUSH
15316: LD_INT 31
15318: PUSH
15319: LD_INT 32
15321: PUSH
15322: LD_INT 33
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: IN
15338: NOT
15339: IFFALSE 15351
15341: PUSH
15342: LD_VAR 0 6
15346: PUSH
15347: LD_INT 1
15349: EQUAL
15350: AND
15351: OR
15352: IFTRUE 15384
15354: PUSH
15355: LD_VAR 0 1
15359: PUSH
15360: LD_INT 2
15362: PUSH
15363: LD_INT 3
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: IN
15370: NOT
15371: IFFALSE 15383
15373: PUSH
15374: LD_VAR 0 6
15378: PUSH
15379: LD_INT 2
15381: EQUAL
15382: AND
15383: OR
15384: IFFALSE 15394
// mode = 0 ;
15386: LD_ADDR_VAR 0 6
15390: PUSH
15391: LD_INT 0
15393: ST_TO_ADDR
// case mode of 0 :
15394: LD_VAR 0 6
15398: PUSH
15399: LD_INT 0
15401: DOUBLE
15402: EQUAL
15403: IFTRUE 15407
15405: GO 26860
15407: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15408: LD_ADDR_VAR 0 11
15412: PUSH
15413: LD_INT 0
15415: PUSH
15416: LD_INT 0
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: LD_INT 1
15428: NEG
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 1
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 1
15466: NEG
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 1
15477: NEG
15478: PUSH
15479: LD_INT 1
15481: NEG
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 1
15489: NEG
15490: PUSH
15491: LD_INT 2
15493: NEG
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 0
15501: PUSH
15502: LD_INT 2
15504: NEG
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 1
15512: PUSH
15513: LD_INT 1
15515: NEG
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: LD_INT 2
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 0
15533: PUSH
15534: LD_INT 2
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 1
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 0
15564: PUSH
15565: LD_INT 3
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 1
15574: NEG
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15601: LD_ADDR_VAR 0 12
15605: PUSH
15606: LD_INT 0
15608: PUSH
15609: LD_INT 0
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 0
15618: PUSH
15619: LD_INT 1
15621: NEG
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: LD_INT 0
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 0
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 1
15659: NEG
15660: PUSH
15661: LD_INT 0
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 1
15670: NEG
15671: PUSH
15672: LD_INT 1
15674: NEG
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: LD_INT 1
15685: NEG
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 2
15693: PUSH
15694: LD_INT 0
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 1
15713: NEG
15714: PUSH
15715: LD_INT 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 2
15724: NEG
15725: PUSH
15726: LD_INT 0
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 2
15735: NEG
15736: PUSH
15737: LD_INT 1
15739: NEG
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 2
15747: NEG
15748: PUSH
15749: LD_INT 1
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 3
15758: NEG
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 3
15769: NEG
15770: PUSH
15771: LD_INT 1
15773: NEG
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15797: LD_ADDR_VAR 0 13
15801: PUSH
15802: LD_INT 0
15804: PUSH
15805: LD_INT 0
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 0
15814: PUSH
15815: LD_INT 1
15817: NEG
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: LD_INT 0
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 0
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 1
15855: NEG
15856: PUSH
15857: LD_INT 0
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 1
15866: NEG
15867: PUSH
15868: LD_INT 1
15870: NEG
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 1
15878: NEG
15879: PUSH
15880: LD_INT 2
15882: NEG
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 2
15920: NEG
15921: PUSH
15922: LD_INT 1
15924: NEG
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 2
15932: NEG
15933: PUSH
15934: LD_INT 2
15936: NEG
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 2
15944: NEG
15945: PUSH
15946: LD_INT 3
15948: NEG
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 3
15956: NEG
15957: PUSH
15958: LD_INT 2
15960: NEG
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 3
15968: NEG
15969: PUSH
15970: LD_INT 3
15972: NEG
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15996: LD_ADDR_VAR 0 14
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: LD_INT 1
16016: NEG
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: LD_INT 0
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 0
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 1
16054: NEG
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 1
16065: NEG
16066: PUSH
16067: LD_INT 1
16069: NEG
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 1
16077: NEG
16078: PUSH
16079: LD_INT 2
16081: NEG
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: LD_INT 2
16092: NEG
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 1
16100: PUSH
16101: LD_INT 1
16103: NEG
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 0
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 1
16131: NEG
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: LD_INT 3
16146: NEG
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: LD_INT 3
16157: NEG
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 1
16165: PUSH
16166: LD_INT 2
16168: NEG
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16192: LD_ADDR_VAR 0 15
16196: PUSH
16197: LD_INT 0
16199: PUSH
16200: LD_INT 0
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: LD_INT 1
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: NEG
16251: PUSH
16252: LD_INT 0
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 1
16261: NEG
16262: PUSH
16263: LD_INT 1
16265: NEG
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 1
16276: NEG
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: LD_INT 0
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 2
16315: NEG
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 2
16326: NEG
16327: PUSH
16328: LD_INT 1
16330: NEG
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: LD_INT 1
16341: NEG
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 3
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 3
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16385: LD_ADDR_VAR 0 16
16389: PUSH
16390: LD_INT 0
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: LD_INT 1
16405: NEG
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 1
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: LD_INT 1
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: NEG
16444: PUSH
16445: LD_INT 0
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: NEG
16455: PUSH
16456: LD_INT 1
16458: NEG
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: NEG
16467: PUSH
16468: LD_INT 2
16470: NEG
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 2
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: LD_INT 2
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: NEG
16509: PUSH
16510: LD_INT 1
16512: NEG
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 2
16520: NEG
16521: PUSH
16522: LD_INT 2
16524: NEG
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 3
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16578: LD_ADDR_VAR 0 17
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: LD_INT 0
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 0
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 1
16606: PUSH
16607: LD_INT 0
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 1
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 0
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 1
16636: NEG
16637: PUSH
16638: LD_INT 0
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 1
16647: NEG
16648: PUSH
16649: LD_INT 1
16651: NEG
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: NEG
16660: PUSH
16661: LD_INT 2
16663: NEG
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 0
16671: PUSH
16672: LD_INT 2
16674: NEG
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: LD_INT 1
16685: NEG
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: PUSH
16694: LD_INT 0
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 2
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 2
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 0
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 1
16743: NEG
16744: PUSH
16745: LD_INT 1
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 2
16754: NEG
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 2
16765: NEG
16766: PUSH
16767: LD_INT 1
16769: NEG
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 2
16777: NEG
16778: PUSH
16779: LD_INT 2
16781: NEG
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16808: LD_ADDR_VAR 0 18
16812: PUSH
16813: LD_INT 0
16815: PUSH
16816: LD_INT 0
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 0
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: LD_INT 0
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 0
16856: PUSH
16857: LD_INT 1
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 1
16866: NEG
16867: PUSH
16868: LD_INT 0
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: NEG
16878: PUSH
16879: LD_INT 1
16881: NEG
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 1
16889: NEG
16890: PUSH
16891: LD_INT 2
16893: NEG
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 0
16901: PUSH
16902: LD_INT 2
16904: NEG
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: LD_INT 1
16915: NEG
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: LD_INT 0
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 2
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 1
16973: NEG
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 2
16984: NEG
16985: PUSH
16986: LD_INT 0
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 2
16995: NEG
16996: PUSH
16997: LD_INT 1
16999: NEG
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 2
17007: NEG
17008: PUSH
17009: LD_INT 2
17011: NEG
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17038: LD_ADDR_VAR 0 19
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: LD_INT 0
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 0
17055: PUSH
17056: LD_INT 1
17058: NEG
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: LD_INT 0
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 0
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 1
17096: NEG
17097: PUSH
17098: LD_INT 0
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 1
17107: NEG
17108: PUSH
17109: LD_INT 1
17111: NEG
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 1
17119: NEG
17120: PUSH
17121: LD_INT 2
17123: NEG
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 0
17131: PUSH
17132: LD_INT 2
17134: NEG
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: LD_INT 1
17145: NEG
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: LD_INT 0
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: LD_INT 2
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 1
17203: NEG
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 2
17214: NEG
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 2
17225: NEG
17226: PUSH
17227: LD_INT 1
17229: NEG
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 2
17237: NEG
17238: PUSH
17239: LD_INT 2
17241: NEG
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17268: LD_ADDR_VAR 0 20
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: LD_INT 0
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 0
17285: PUSH
17286: LD_INT 1
17288: NEG
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 1
17296: PUSH
17297: LD_INT 0
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 0
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: LD_INT 0
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 1
17337: NEG
17338: PUSH
17339: LD_INT 1
17341: NEG
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 1
17349: NEG
17350: PUSH
17351: LD_INT 2
17353: NEG
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: LD_INT 2
17364: NEG
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: LD_INT 1
17375: NEG
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: LD_INT 0
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 2
17403: PUSH
17404: LD_INT 2
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 1
17433: NEG
17434: PUSH
17435: LD_INT 1
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 2
17444: NEG
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: LD_INT 1
17459: NEG
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 2
17467: NEG
17468: PUSH
17469: LD_INT 2
17471: NEG
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17498: LD_ADDR_VAR 0 21
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: LD_INT 0
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 0
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: NEG
17557: PUSH
17558: LD_INT 0
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 1
17567: NEG
17568: PUSH
17569: LD_INT 1
17571: NEG
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: NEG
17580: PUSH
17581: LD_INT 2
17583: NEG
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: LD_INT 2
17594: NEG
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: LD_INT 1
17605: NEG
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 2
17674: NEG
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 2
17697: NEG
17698: PUSH
17699: LD_INT 2
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17728: LD_ADDR_VAR 0 22
17732: PUSH
17733: LD_INT 0
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: LD_INT 1
17748: NEG
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 1
17786: NEG
17787: PUSH
17788: LD_INT 0
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 1
17797: NEG
17798: PUSH
17799: LD_INT 1
17801: NEG
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: NEG
17810: PUSH
17811: LD_INT 2
17813: NEG
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 0
17821: PUSH
17822: LD_INT 2
17824: NEG
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 1
17835: NEG
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 2
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 1
17893: NEG
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: LD_INT 1
17919: NEG
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 2
17927: NEG
17928: PUSH
17929: LD_INT 2
17931: NEG
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17958: LD_ADDR_VAR 0 23
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 0
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: LD_INT 1
17978: NEG
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 0
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: NEG
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 1
18027: NEG
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: LD_INT 2
18043: NEG
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 2
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 2
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 2
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 2
18134: NEG
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 2
18157: NEG
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: NEG
18170: PUSH
18171: LD_INT 3
18173: NEG
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: LD_INT 3
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: LD_INT 2
18196: NEG
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: LD_INT 1
18207: NEG
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18238: LD_ADDR_VAR 0 24
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: NEG
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: LD_INT 2
18323: NEG
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 0
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 2
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: LD_INT 2
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: LD_INT 2
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: NEG
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: NEG
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: NEG
18438: PUSH
18439: LD_INT 2
18441: NEG
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 2
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 3
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18514: LD_ADDR_VAR 0 25
18518: PUSH
18519: LD_INT 0
18521: PUSH
18522: LD_INT 0
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 0
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: NEG
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 1
18595: NEG
18596: PUSH
18597: LD_INT 2
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: LD_INT 2
18610: NEG
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: NEG
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 2
18701: NEG
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 2
18713: NEG
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 3
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 3
18735: PUSH
18736: LD_INT 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 3
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: LD_INT 3
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18788: LD_ADDR_VAR 0 26
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: NEG
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 1
18857: NEG
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: LD_INT 2
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: LD_INT 2
18884: NEG
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 2
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 2
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 2
18964: NEG
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 2
18975: NEG
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: NEG
18988: PUSH
18989: LD_INT 2
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: LD_INT 3
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19064: LD_ADDR_VAR 0 27
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: LD_INT 1
19084: NEG
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: NEG
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: NEG
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: LD_INT 2
19149: NEG
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 2
19160: NEG
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: NEG
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: NEG
19241: PUSH
19242: LD_INT 0
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 2
19251: NEG
19252: PUSH
19253: LD_INT 1
19255: NEG
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 2
19263: NEG
19264: PUSH
19265: LD_INT 2
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: NEG
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 3
19297: NEG
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 3
19309: NEG
19310: PUSH
19311: LD_INT 2
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19344: LD_ADDR_VAR 0 28
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: LD_INT 0
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: LD_INT 1
19364: NEG
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 1
19402: NEG
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: LD_INT 1
19417: NEG
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 1
19425: NEG
19426: PUSH
19427: LD_INT 2
19429: NEG
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 0
19437: PUSH
19438: LD_INT 2
19440: NEG
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: LD_INT 1
19451: NEG
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 2
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 1
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: LD_INT 2
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 1
19509: NEG
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 2
19520: NEG
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 2
19543: NEG
19544: PUSH
19545: LD_INT 2
19547: NEG
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: LD_INT 3
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: LD_INT 3
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 3
19579: NEG
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 3
19591: NEG
19592: PUSH
19593: LD_INT 2
19595: NEG
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19626: LD_ADDR_VAR 0 29
19630: PUSH
19631: LD_INT 0
19633: PUSH
19634: LD_INT 0
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: LD_INT 1
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: NEG
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: NEG
19708: PUSH
19709: LD_INT 2
19711: NEG
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: LD_INT 2
19722: NEG
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 2
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 2
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 2
19792: NEG
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 2
19804: NEG
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: LD_INT 3
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: LD_INT 3
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 3
19870: NEG
19871: PUSH
19872: LD_INT 2
19874: NEG
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19905: LD_ADDR_VAR 0 30
19909: PUSH
19910: LD_INT 0
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: LD_INT 0
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: NEG
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: LD_INT 2
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: LD_INT 1
20012: NEG
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: NEG
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: LD_INT 3
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 3
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 2
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 2
20137: NEG
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 3
20148: NEG
20149: PUSH
20150: LD_INT 1
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20183: LD_ADDR_VAR 0 31
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: LD_INT 2
20268: NEG
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: LD_INT 1
20279: NEG
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 1
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: LD_INT 2
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 2
20348: NEG
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: LD_INT 2
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: LD_INT 3
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 3
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 3
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 3
20426: NEG
20427: PUSH
20428: LD_INT 2
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20461: LD_ADDR_VAR 0 32
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: LD_INT 1
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: LD_INT 1
20534: NEG
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 1
20542: NEG
20543: PUSH
20544: LD_INT 2
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: LD_INT 2
20557: NEG
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: LD_INT 1
20568: NEG
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: NEG
20639: PUSH
20640: LD_INT 1
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: LD_INT 3
20654: NEG
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: LD_INT 2
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 3
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: LD_INT 3
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 2
20693: NEG
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 3
20704: NEG
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20739: LD_ADDR_VAR 0 33
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 1
20797: NEG
20798: PUSH
20799: LD_INT 0
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: NEG
20809: PUSH
20810: LD_INT 1
20812: NEG
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: NEG
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 2
20917: NEG
20918: PUSH
20919: LD_INT 2
20921: NEG
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 2
20929: NEG
20930: PUSH
20931: LD_INT 3
20933: NEG
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 3
20952: PUSH
20953: LD_INT 1
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: LD_INT 3
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 1
20972: NEG
20973: PUSH
20974: LD_INT 2
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 3
20983: NEG
20984: PUSH
20985: LD_INT 2
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21018: LD_ADDR_VAR 0 34
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: LD_INT 0
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 0
21066: PUSH
21067: LD_INT 1
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 1
21076: NEG
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: LD_INT 2
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 2
21114: NEG
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 2
21174: NEG
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: NEG
21198: PUSH
21199: LD_INT 2
21201: NEG
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: NEG
21210: PUSH
21211: LD_INT 3
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: LD_INT 2
21224: NEG
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 2
21252: NEG
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 3
21263: NEG
21264: PUSH
21265: LD_INT 1
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21298: LD_ADDR_VAR 0 35
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: LD_INT 0
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: LD_INT 1
21318: NEG
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 1
21326: PUSH
21327: LD_INT 0
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: NEG
21368: PUSH
21369: LD_INT 1
21371: NEG
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 2
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 2
21389: NEG
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21410: LD_ADDR_VAR 0 36
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: LD_INT 1
21430: NEG
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 0
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 1
21479: NEG
21480: PUSH
21481: LD_INT 1
21483: NEG
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: LD_INT 2
21495: NEG
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 2
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21522: LD_ADDR_VAR 0 37
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: LD_INT 1
21595: NEG
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: LD_INT 1
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21634: LD_ADDR_VAR 0 38
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: NEG
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21746: LD_ADDR_VAR 0 39
21750: PUSH
21751: LD_INT 0
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: LD_INT 0
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 2
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21858: LD_ADDR_VAR 0 40
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 1
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: NEG
21928: PUSH
21929: LD_INT 1
21931: NEG
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21970: LD_ADDR_VAR 0 41
21974: PUSH
21975: LD_INT 0
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 1
22028: NEG
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: LD_INT 2
22055: NEG
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 2
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 2
22125: NEG
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 2
22136: NEG
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 2
22148: NEG
22149: PUSH
22150: LD_INT 2
22152: NEG
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: LD_INT 3
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 3
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 3
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 2
22233: NEG
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 3
22244: NEG
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 3
22255: NEG
22256: PUSH
22257: LD_INT 1
22259: NEG
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 3
22267: NEG
22268: PUSH
22269: LD_INT 2
22271: NEG
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 3
22279: NEG
22280: PUSH
22281: LD_INT 3
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22320: LD_ADDR_VAR 0 42
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 1
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 1
22401: NEG
22402: PUSH
22403: LD_INT 2
22405: NEG
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: LD_INT 2
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: LD_INT 2
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: NEG
22476: PUSH
22477: LD_INT 1
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 2
22486: NEG
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 2
22498: NEG
22499: PUSH
22500: LD_INT 2
22502: NEG
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: LD_INT 3
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: LD_INT 3
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: LD_INT 3
22537: NEG
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 2
22548: NEG
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 3
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 3
22566: PUSH
22567: LD_INT 3
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 2
22576: PUSH
22577: LD_INT 3
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: LD_INT 3
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 3
22617: NEG
22618: PUSH
22619: LD_INT 2
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 3
22629: NEG
22630: PUSH
22631: LD_INT 3
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22670: LD_ADDR_VAR 0 43
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: LD_INT 2
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: LD_INT 2
22766: NEG
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 2
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: NEG
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 2
22847: NEG
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: LD_INT 3
22863: NEG
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 0
22871: PUSH
22872: LD_INT 3
22874: NEG
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: LD_INT 1
22896: NEG
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 3
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 3
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 3
22966: NEG
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 3
22977: NEG
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23018: LD_ADDR_VAR 0 44
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: LD_INT 0
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: LD_INT 1
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 0
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: NEG
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: LD_INT 2
23103: NEG
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 2
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: LD_INT 1
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: NEG
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: NEG
23197: PUSH
23198: LD_INT 2
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 2
23208: NEG
23209: PUSH
23210: LD_INT 3
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 3
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: LD_INT 3
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 3
23292: NEG
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 3
23303: NEG
23304: PUSH
23305: LD_INT 1
23307: NEG
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 3
23315: NEG
23316: PUSH
23317: LD_INT 2
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 3
23327: NEG
23328: PUSH
23329: LD_INT 3
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23368: LD_ADDR_VAR 0 45
23372: PUSH
23373: LD_INT 0
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: LD_INT 0
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 2
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: LD_INT 2
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 2
23534: NEG
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: NEG
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: NEG
23559: PUSH
23560: LD_INT 3
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: LD_INT 3
23574: NEG
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 0
23582: PUSH
23583: LD_INT 3
23585: NEG
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 2
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 3
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 3
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: LD_INT 3
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 3
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: LD_INT 3
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 3
23665: NEG
23666: PUSH
23667: LD_INT 2
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 3
23677: NEG
23678: PUSH
23679: LD_INT 3
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23718: LD_ADDR_VAR 0 46
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: LD_INT 2
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 2
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: LD_INT 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: LD_INT 2
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 2
23884: NEG
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 2
23895: NEG
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: LD_INT 3
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 3
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 2
23933: NEG
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 2
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 3
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 3
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: LD_INT 2
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 2
24003: NEG
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 3
24014: NEG
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 3
24025: NEG
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24066: LD_ADDR_VAR 0 47
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 2
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 2
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24217: LD_ADDR_VAR 0 48
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24364: LD_ADDR_VAR 0 49
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: LD_INT 1
24384: NEG
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 0
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24508: LD_ADDR_VAR 0 50
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24652: LD_ADDR_VAR 0 51
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: LD_INT 2
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 2
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 2
24764: NEG
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24799: LD_ADDR_VAR 0 52
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 1
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: NEG
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24950: LD_ADDR_VAR 0 53
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 2
25126: NEG
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: LD_INT 2
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25180: LD_ADDR_VAR 0 54
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 2
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: LD_INT 2
25383: NEG
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25410: LD_ADDR_VAR 0 55
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: LD_INT 2
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 2
25586: NEG
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: NEG
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25640: LD_ADDR_VAR 0 56
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: NEG
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: LD_INT 2
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 2
25839: NEG
25840: PUSH
25841: LD_INT 2
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25870: LD_ADDR_VAR 0 57
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: NEG
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 2
26057: NEG
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26100: LD_ADDR_VAR 0 58
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 2
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 2
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 2
26276: NEG
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26330: LD_ADDR_VAR 0 59
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26418: LD_ADDR_VAR 0 60
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26506: LD_ADDR_VAR 0 61
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26594: LD_ADDR_VAR 0 62
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26682: LD_ADDR_VAR 0 63
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26770: LD_ADDR_VAR 0 64
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: ST_TO_ADDR
// end ; 1 :
26858: GO 32755
26860: LD_INT 1
26862: DOUBLE
26863: EQUAL
26864: IFTRUE 26868
26866: GO 29491
26868: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26869: LD_ADDR_VAR 0 11
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: LD_INT 3
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 3
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26913: LD_ADDR_VAR 0 12
26917: PUSH
26918: LD_INT 2
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26954: LD_ADDR_VAR 0 13
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26994: LD_ADDR_VAR 0 14
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 3
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27035: LD_ADDR_VAR 0 15
27039: PUSH
27040: LD_INT 2
27042: NEG
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 3
27053: NEG
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 3
27064: NEG
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: LIST
27078: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27079: LD_ADDR_VAR 0 16
27083: PUSH
27084: LD_INT 2
27086: NEG
27087: PUSH
27088: LD_INT 3
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 3
27098: NEG
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 3
27110: NEG
27111: PUSH
27112: LD_INT 3
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27125: LD_ADDR_VAR 0 17
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: LD_INT 3
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: LD_INT 3
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27169: LD_ADDR_VAR 0 18
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 3
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27210: LD_ADDR_VAR 0 19
27214: PUSH
27215: LD_INT 3
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27250: LD_ADDR_VAR 0 20
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27291: LD_ADDR_VAR 0 21
27295: PUSH
27296: LD_INT 2
27298: NEG
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 3
27309: NEG
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 3
27320: NEG
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27335: LD_ADDR_VAR 0 22
27339: PUSH
27340: LD_INT 2
27342: NEG
27343: PUSH
27344: LD_INT 3
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 3
27354: NEG
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 3
27366: NEG
27367: PUSH
27368: LD_INT 3
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27381: LD_ADDR_VAR 0 23
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 3
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 4
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: LIST
27424: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27425: LD_ADDR_VAR 0 24
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 3
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 4
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: LIST
27465: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27466: LD_ADDR_VAR 0 25
27470: PUSH
27471: LD_INT 3
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 4
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: LD_INT 4
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27506: LD_ADDR_VAR 0 26
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 3
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 4
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: LD_INT 3
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: LIST
27546: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27547: LD_ADDR_VAR 0 27
27551: PUSH
27552: LD_INT 3
27554: NEG
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 3
27565: NEG
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 4
27576: NEG
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27591: LD_ADDR_VAR 0 28
27595: PUSH
27596: LD_INT 3
27598: NEG
27599: PUSH
27600: LD_INT 3
27602: NEG
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 3
27610: NEG
27611: PUSH
27612: LD_INT 4
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 4
27622: NEG
27623: PUSH
27624: LD_INT 3
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27637: LD_ADDR_VAR 0 29
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: LD_INT 3
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: LD_INT 3
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: LD_INT 4
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 4
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: LD_INT 3
27704: NEG
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: LD_INT 5
27716: NEG
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 5
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 4
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: NEG
27747: PUSH
27748: LD_INT 6
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 6
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 5
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27792: LD_ADDR_VAR 0 30
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 3
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 4
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 4
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 5
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 5
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 5
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 6
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 6
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27935: LD_ADDR_VAR 0 31
27939: PUSH
27940: LD_INT 3
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 4
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 4
27982: PUSH
27983: LD_INT 4
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: LD_INT 4
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 5
28002: PUSH
28003: LD_INT 4
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 5
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 4
28022: PUSH
28023: LD_INT 5
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 6
28032: PUSH
28033: LD_INT 5
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 6
28042: PUSH
28043: LD_INT 6
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 5
28052: PUSH
28053: LD_INT 6
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28074: LD_ADDR_VAR 0 32
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: LD_INT 3
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 3
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 4
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: LD_INT 4
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: LD_INT 3
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 5
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 5
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: LD_INT 4
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: LD_INT 6
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 6
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: LD_INT 5
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28217: LD_ADDR_VAR 0 33
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 3
28235: NEG
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 3
28246: NEG
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 3
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 4
28269: NEG
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 4
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 4
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 5
28303: NEG
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 5
28314: NEG
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 5
28326: NEG
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 6
28337: NEG
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 6
28348: NEG
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28372: LD_ADDR_VAR 0 34
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: LD_INT 3
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 3
28391: NEG
28392: PUSH
28393: LD_INT 2
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 3
28403: NEG
28404: PUSH
28405: LD_INT 3
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 3
28415: NEG
28416: PUSH
28417: LD_INT 4
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 4
28427: NEG
28428: PUSH
28429: LD_INT 3
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 4
28439: NEG
28440: PUSH
28441: LD_INT 4
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 4
28451: NEG
28452: PUSH
28453: LD_INT 5
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 5
28463: NEG
28464: PUSH
28465: LD_INT 4
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 5
28475: NEG
28476: PUSH
28477: LD_INT 5
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 5
28487: NEG
28488: PUSH
28489: LD_INT 6
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 6
28499: NEG
28500: PUSH
28501: LD_INT 5
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 6
28511: NEG
28512: PUSH
28513: LD_INT 6
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28535: LD_ADDR_VAR 0 41
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 3
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28579: LD_ADDR_VAR 0 42
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28620: LD_ADDR_VAR 0 43
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 3
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28660: LD_ADDR_VAR 0 44
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28701: LD_ADDR_VAR 0 45
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 3
28730: NEG
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28745: LD_ADDR_VAR 0 46
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: LD_INT 2
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: LD_INT 3
28768: NEG
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 3
28776: NEG
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28791: LD_ADDR_VAR 0 47
28795: PUSH
28796: LD_INT 2
28798: NEG
28799: PUSH
28800: LD_INT 3
28802: NEG
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: LD_INT 3
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28824: LD_ADDR_VAR 0 48
28828: PUSH
28829: LD_INT 1
28831: PUSH
28832: LD_INT 2
28834: NEG
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28855: LD_ADDR_VAR 0 49
28859: PUSH
28860: LD_INT 3
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 3
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28884: LD_ADDR_VAR 0 50
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28913: LD_ADDR_VAR 0 51
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28944: LD_ADDR_VAR 0 52
28948: PUSH
28949: LD_INT 3
28951: NEG
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 3
28963: NEG
28964: PUSH
28965: LD_INT 2
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28977: LD_ADDR_VAR 0 53
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: LD_INT 3
28988: NEG
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: LD_INT 3
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29021: LD_ADDR_VAR 0 54
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 3
29039: PUSH
29040: LD_INT 0
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: LIST
29061: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29062: LD_ADDR_VAR 0 55
29066: PUSH
29067: LD_INT 3
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: LD_INT 3
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29102: LD_ADDR_VAR 0 56
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 3
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29143: LD_ADDR_VAR 0 57
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: NEG
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 3
29172: NEG
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29187: LD_ADDR_VAR 0 58
29191: PUSH
29192: LD_INT 2
29194: NEG
29195: PUSH
29196: LD_INT 3
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 3
29206: NEG
29207: PUSH
29208: LD_INT 2
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: NEG
29219: PUSH
29220: LD_INT 3
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29233: LD_ADDR_VAR 0 59
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 2
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: LD_INT 2
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: LD_INT 1
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29277: LD_ADDR_VAR 0 60
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29318: LD_ADDR_VAR 0 61
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29358: LD_ADDR_VAR 0 62
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29399: LD_ADDR_VAR 0 63
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: LIST
29442: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29443: LD_ADDR_VAR 0 64
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: LD_INT 2
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: ST_TO_ADDR
// end ; 2 :
29489: GO 32755
29491: LD_INT 2
29493: DOUBLE
29494: EQUAL
29495: IFTRUE 29499
29497: GO 32754
29499: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29500: LD_ADDR_VAR 0 29
29504: PUSH
29505: LD_INT 4
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 4
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 5
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 5
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 4
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 3
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: LD_INT 1
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 3
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 5
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 4
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 4
29630: PUSH
29631: LD_INT 4
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: LD_INT 4
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: LD_INT 3
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 2
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 4
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: LD_INT 4
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: LD_INT 4
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 3
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 4
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 5
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 5
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 4
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 5
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 3
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 3
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 3
29828: NEG
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 4
29839: NEG
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 4
29850: NEG
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 4
29862: NEG
29863: PUSH
29864: LD_INT 2
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 4
29885: NEG
29886: PUSH
29887: LD_INT 4
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 4
29897: NEG
29898: PUSH
29899: LD_INT 5
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 3
29909: NEG
29910: PUSH
29911: LD_INT 4
29913: NEG
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 3
29921: NEG
29922: PUSH
29923: LD_INT 3
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 4
29933: NEG
29934: PUSH
29935: LD_INT 3
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 5
29945: NEG
29946: PUSH
29947: LD_INT 4
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 5
29957: NEG
29958: PUSH
29959: LD_INT 5
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 3
29969: NEG
29970: PUSH
29971: LD_INT 5
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 5
29981: NEG
29982: PUSH
29983: LD_INT 3
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30038: LD_ADDR_VAR 0 30
30042: PUSH
30043: LD_INT 4
30045: PUSH
30046: LD_INT 4
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 4
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 5
30065: PUSH
30066: LD_INT 4
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 5
30075: PUSH
30076: LD_INT 5
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 4
30085: PUSH
30086: LD_INT 5
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: LD_INT 4
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 5
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: LD_INT 5
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 3
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: LD_INT 4
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: LD_INT 4
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: LD_INT 3
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 4
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 4
30228: NEG
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 4
30239: NEG
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 3
30251: NEG
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 3
30262: NEG
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 4
30273: NEG
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 5
30284: NEG
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 5
30295: NEG
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 5
30307: NEG
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 3
30319: NEG
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 3
30330: NEG
30331: PUSH
30332: LD_INT 3
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 3
30342: NEG
30343: PUSH
30344: LD_INT 4
30346: NEG
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 2
30354: NEG
30355: PUSH
30356: LD_INT 3
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 2
30366: NEG
30367: PUSH
30368: LD_INT 2
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 4
30390: NEG
30391: PUSH
30392: LD_INT 3
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 4
30402: NEG
30403: PUSH
30404: LD_INT 4
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: LD_INT 4
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 4
30426: NEG
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: LD_INT 4
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 5
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 4
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 3
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 3
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: NEG
30494: PUSH
30495: LD_INT 4
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: LD_INT 5
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: LD_INT 3
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: LD_INT 5
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30585: LD_ADDR_VAR 0 31
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 5
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 5
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: LD_INT 4
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 3
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 2
30664: PUSH
30665: LD_INT 5
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 3
30685: NEG
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: NEG
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 2
30708: NEG
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 3
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 4
30741: NEG
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 4
30752: NEG
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 4
30764: NEG
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: NEG
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 4
30787: NEG
30788: PUSH
30789: LD_INT 4
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 4
30799: NEG
30800: PUSH
30801: LD_INT 5
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: NEG
30812: PUSH
30813: LD_INT 4
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: NEG
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 4
30835: NEG
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 5
30847: NEG
30848: PUSH
30849: LD_INT 4
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 5
30859: NEG
30860: PUSH
30861: LD_INT 5
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: LD_INT 5
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 5
30883: NEG
30884: PUSH
30885: LD_INT 3
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 4
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: PUSH
30918: LD_INT 3
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: LD_INT 2
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: LD_INT 2
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: LD_INT 3
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 4
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: LD_INT 4
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 4
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 4
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 5
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 4
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: LD_INT 2
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 5
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31135: LD_ADDR_VAR 0 32
31139: PUSH
31140: LD_INT 4
31142: NEG
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 4
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 3
31165: NEG
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 3
31176: NEG
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 4
31187: NEG
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 5
31198: NEG
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 5
31209: NEG
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 5
31221: NEG
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 3
31233: NEG
31234: PUSH
31235: LD_INT 2
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: LD_INT 3
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 3
31256: NEG
31257: PUSH
31258: LD_INT 4
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: LD_INT 3
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: NEG
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 4
31304: NEG
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 4
31316: NEG
31317: PUSH
31318: LD_INT 4
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 2
31328: NEG
31329: PUSH
31330: LD_INT 4
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 4
31340: NEG
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: LD_INT 5
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 4
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 3
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 3
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 4
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 5
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: LD_INT 3
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: LD_INT 5
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 4
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 4
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 4
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 4
31547: PUSH
31548: LD_INT 4
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 4
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 5
31567: PUSH
31568: LD_INT 4
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 5
31577: PUSH
31578: LD_INT 5
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 4
31587: PUSH
31588: LD_INT 5
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 3
31597: PUSH
31598: LD_INT 4
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 3
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 5
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: LD_INT 5
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31682: LD_ADDR_VAR 0 33
31686: PUSH
31687: LD_INT 4
31689: NEG
31690: PUSH
31691: LD_INT 4
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 4
31701: NEG
31702: PUSH
31703: LD_INT 5
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 3
31713: NEG
31714: PUSH
31715: LD_INT 4
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: NEG
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 4
31737: NEG
31738: PUSH
31739: LD_INT 3
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 5
31749: NEG
31750: PUSH
31751: LD_INT 4
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 5
31761: NEG
31762: PUSH
31763: LD_INT 5
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 3
31773: NEG
31774: PUSH
31775: LD_INT 5
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 5
31785: NEG
31786: PUSH
31787: LD_INT 3
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 3
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 4
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 3
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 4
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: LD_INT 4
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 4
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 4
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 5
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 5
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 4
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 3
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 5
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 3
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: PUSH
32013: LD_INT 3
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 4
32022: PUSH
32023: LD_INT 4
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 4
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 4
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 4
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: LD_INT 4
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: LD_INT 5
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 1
32132: NEG
32133: PUSH
32134: LD_INT 4
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: LD_INT 5
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32220: LD_ADDR_VAR 0 34
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 4
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 5
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 4
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 3
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: LD_INT 3
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 4
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 5
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 3
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: NEG
32318: PUSH
32319: LD_INT 5
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 2
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 4
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 4
32422: PUSH
32423: LD_INT 4
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 5
32442: PUSH
32443: LD_INT 4
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 5
32452: PUSH
32453: LD_INT 5
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: LD_INT 5
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: LD_INT 4
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 5
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: LD_INT 5
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 3
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 4
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 4
32605: NEG
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 4
32616: NEG
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 3
32628: NEG
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 3
32639: NEG
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 4
32650: NEG
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 5
32661: NEG
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 5
32672: NEG
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 5
32684: NEG
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 3
32696: NEG
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: ST_TO_ADDR
// end ; end ;
32752: GO 32755
32754: POP
// case btype of b_depot , b_warehouse :
32755: LD_VAR 0 1
32759: PUSH
32760: LD_INT 0
32762: DOUBLE
32763: EQUAL
32764: IFTRUE 32774
32766: LD_INT 1
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32975
32774: POP
// case nation of nation_american :
32775: LD_VAR 0 5
32779: PUSH
32780: LD_INT 1
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32844
32788: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32789: LD_ADDR_VAR 0 9
32793: PUSH
32794: LD_VAR 0 11
32798: PUSH
32799: LD_VAR 0 12
32803: PUSH
32804: LD_VAR 0 13
32808: PUSH
32809: LD_VAR 0 14
32813: PUSH
32814: LD_VAR 0 15
32818: PUSH
32819: LD_VAR 0 16
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: PUSH
32832: LD_VAR 0 4
32836: PUSH
32837: LD_INT 1
32839: PLUS
32840: ARRAY
32841: ST_TO_ADDR
32842: GO 32973
32844: LD_INT 2
32846: DOUBLE
32847: EQUAL
32848: IFTRUE 32852
32850: GO 32908
32852: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32853: LD_ADDR_VAR 0 9
32857: PUSH
32858: LD_VAR 0 17
32862: PUSH
32863: LD_VAR 0 18
32867: PUSH
32868: LD_VAR 0 19
32872: PUSH
32873: LD_VAR 0 20
32877: PUSH
32878: LD_VAR 0 21
32882: PUSH
32883: LD_VAR 0 22
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: PUSH
32896: LD_VAR 0 4
32900: PUSH
32901: LD_INT 1
32903: PLUS
32904: ARRAY
32905: ST_TO_ADDR
32906: GO 32973
32908: LD_INT 3
32910: DOUBLE
32911: EQUAL
32912: IFTRUE 32916
32914: GO 32972
32916: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32917: LD_ADDR_VAR 0 9
32921: PUSH
32922: LD_VAR 0 23
32926: PUSH
32927: LD_VAR 0 24
32931: PUSH
32932: LD_VAR 0 25
32936: PUSH
32937: LD_VAR 0 26
32941: PUSH
32942: LD_VAR 0 27
32946: PUSH
32947: LD_VAR 0 28
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: PUSH
32960: LD_VAR 0 4
32964: PUSH
32965: LD_INT 1
32967: PLUS
32968: ARRAY
32969: ST_TO_ADDR
32970: GO 32973
32972: POP
32973: GO 33528
32975: LD_INT 2
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32989
32981: LD_INT 3
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33045
32989: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32990: LD_ADDR_VAR 0 9
32994: PUSH
32995: LD_VAR 0 29
32999: PUSH
33000: LD_VAR 0 30
33004: PUSH
33005: LD_VAR 0 31
33009: PUSH
33010: LD_VAR 0 32
33014: PUSH
33015: LD_VAR 0 33
33019: PUSH
33020: LD_VAR 0 34
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: PUSH
33033: LD_VAR 0 4
33037: PUSH
33038: LD_INT 1
33040: PLUS
33041: ARRAY
33042: ST_TO_ADDR
33043: GO 33528
33045: LD_INT 16
33047: DOUBLE
33048: EQUAL
33049: IFTRUE 33107
33051: LD_INT 17
33053: DOUBLE
33054: EQUAL
33055: IFTRUE 33107
33057: LD_INT 18
33059: DOUBLE
33060: EQUAL
33061: IFTRUE 33107
33063: LD_INT 19
33065: DOUBLE
33066: EQUAL
33067: IFTRUE 33107
33069: LD_INT 22
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33107
33075: LD_INT 20
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33107
33081: LD_INT 21
33083: DOUBLE
33084: EQUAL
33085: IFTRUE 33107
33087: LD_INT 23
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33107
33093: LD_INT 24
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33107
33099: LD_INT 25
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33163
33107: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33108: LD_ADDR_VAR 0 9
33112: PUSH
33113: LD_VAR 0 35
33117: PUSH
33118: LD_VAR 0 36
33122: PUSH
33123: LD_VAR 0 37
33127: PUSH
33128: LD_VAR 0 38
33132: PUSH
33133: LD_VAR 0 39
33137: PUSH
33138: LD_VAR 0 40
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: PUSH
33151: LD_VAR 0 4
33155: PUSH
33156: LD_INT 1
33158: PLUS
33159: ARRAY
33160: ST_TO_ADDR
33161: GO 33528
33163: LD_INT 6
33165: DOUBLE
33166: EQUAL
33167: IFTRUE 33219
33169: LD_INT 7
33171: DOUBLE
33172: EQUAL
33173: IFTRUE 33219
33175: LD_INT 8
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33219
33181: LD_INT 13
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33219
33187: LD_INT 12
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33219
33193: LD_INT 15
33195: DOUBLE
33196: EQUAL
33197: IFTRUE 33219
33199: LD_INT 11
33201: DOUBLE
33202: EQUAL
33203: IFTRUE 33219
33205: LD_INT 14
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33219
33211: LD_INT 10
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33275
33219: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33220: LD_ADDR_VAR 0 9
33224: PUSH
33225: LD_VAR 0 41
33229: PUSH
33230: LD_VAR 0 42
33234: PUSH
33235: LD_VAR 0 43
33239: PUSH
33240: LD_VAR 0 44
33244: PUSH
33245: LD_VAR 0 45
33249: PUSH
33250: LD_VAR 0 46
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: PUSH
33263: LD_VAR 0 4
33267: PUSH
33268: LD_INT 1
33270: PLUS
33271: ARRAY
33272: ST_TO_ADDR
33273: GO 33528
33275: LD_INT 36
33277: DOUBLE
33278: EQUAL
33279: IFTRUE 33283
33281: GO 33339
33283: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33284: LD_ADDR_VAR 0 9
33288: PUSH
33289: LD_VAR 0 47
33293: PUSH
33294: LD_VAR 0 48
33298: PUSH
33299: LD_VAR 0 49
33303: PUSH
33304: LD_VAR 0 50
33308: PUSH
33309: LD_VAR 0 51
33313: PUSH
33314: LD_VAR 0 52
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: PUSH
33327: LD_VAR 0 4
33331: PUSH
33332: LD_INT 1
33334: PLUS
33335: ARRAY
33336: ST_TO_ADDR
33337: GO 33528
33339: LD_INT 4
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33365
33345: LD_INT 5
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33365
33351: LD_INT 34
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33365
33357: LD_INT 37
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33421
33365: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33366: LD_ADDR_VAR 0 9
33370: PUSH
33371: LD_VAR 0 53
33375: PUSH
33376: LD_VAR 0 54
33380: PUSH
33381: LD_VAR 0 55
33385: PUSH
33386: LD_VAR 0 56
33390: PUSH
33391: LD_VAR 0 57
33395: PUSH
33396: LD_VAR 0 58
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: PUSH
33409: LD_VAR 0 4
33413: PUSH
33414: LD_INT 1
33416: PLUS
33417: ARRAY
33418: ST_TO_ADDR
33419: GO 33528
33421: LD_INT 31
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33471
33427: LD_INT 32
33429: DOUBLE
33430: EQUAL
33431: IFTRUE 33471
33433: LD_INT 33
33435: DOUBLE
33436: EQUAL
33437: IFTRUE 33471
33439: LD_INT 27
33441: DOUBLE
33442: EQUAL
33443: IFTRUE 33471
33445: LD_INT 26
33447: DOUBLE
33448: EQUAL
33449: IFTRUE 33471
33451: LD_INT 28
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33471
33457: LD_INT 29
33459: DOUBLE
33460: EQUAL
33461: IFTRUE 33471
33463: LD_INT 30
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33527
33471: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33472: LD_ADDR_VAR 0 9
33476: PUSH
33477: LD_VAR 0 59
33481: PUSH
33482: LD_VAR 0 60
33486: PUSH
33487: LD_VAR 0 61
33491: PUSH
33492: LD_VAR 0 62
33496: PUSH
33497: LD_VAR 0 63
33501: PUSH
33502: LD_VAR 0 64
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: PUSH
33515: LD_VAR 0 4
33519: PUSH
33520: LD_INT 1
33522: PLUS
33523: ARRAY
33524: ST_TO_ADDR
33525: GO 33528
33527: POP
// temp_list2 = [ ] ;
33528: LD_ADDR_VAR 0 10
33532: PUSH
33533: EMPTY
33534: ST_TO_ADDR
// for i in temp_list do
33535: LD_ADDR_VAR 0 8
33539: PUSH
33540: LD_VAR 0 9
33544: PUSH
33545: FOR_IN
33546: IFFALSE 33598
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33548: LD_ADDR_VAR 0 10
33552: PUSH
33553: LD_VAR 0 10
33557: PUSH
33558: LD_VAR 0 8
33562: PUSH
33563: LD_INT 1
33565: ARRAY
33566: PUSH
33567: LD_VAR 0 2
33571: PLUS
33572: PUSH
33573: LD_VAR 0 8
33577: PUSH
33578: LD_INT 2
33580: ARRAY
33581: PUSH
33582: LD_VAR 0 3
33586: PLUS
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: ADD
33595: ST_TO_ADDR
33596: GO 33545
33598: POP
33599: POP
// result = temp_list2 ;
33600: LD_ADDR_VAR 0 7
33604: PUSH
33605: LD_VAR 0 10
33609: ST_TO_ADDR
// end ;
33610: LD_VAR 0 7
33614: RET
// export function EnemyInRange ( unit , dist ) ; begin
33615: LD_INT 0
33617: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33618: LD_ADDR_VAR 0 3
33622: PUSH
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 255
33632: PPUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 250
33642: PPUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 251
33652: PPUSH
33653: LD_VAR 0 2
33657: PPUSH
33658: CALL 6872 0 4
33662: PUSH
33663: LD_INT 4
33665: ARRAY
33666: ST_TO_ADDR
// end ;
33667: LD_VAR 0 3
33671: RET
// export function PlayerSeeMe ( unit ) ; begin
33672: LD_INT 0
33674: PPUSH
// result := See ( your_side , unit ) ;
33675: LD_ADDR_VAR 0 2
33679: PUSH
33680: LD_OWVAR 2
33684: PPUSH
33685: LD_VAR 0 1
33689: PPUSH
33690: CALL_OW 292
33694: ST_TO_ADDR
// end ;
33695: LD_VAR 0 2
33699: RET
// export function ReverseDir ( unit ) ; begin
33700: LD_INT 0
33702: PPUSH
// if not unit then
33703: LD_VAR 0 1
33707: NOT
33708: IFFALSE 33712
// exit ;
33710: GO 33735
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33712: LD_ADDR_VAR 0 2
33716: PUSH
33717: LD_VAR 0 1
33721: PPUSH
33722: CALL_OW 254
33726: PUSH
33727: LD_INT 3
33729: PLUS
33730: PUSH
33731: LD_INT 6
33733: MOD
33734: ST_TO_ADDR
// end ;
33735: LD_VAR 0 2
33739: RET
// export function ReverseArray ( array ) ; var i ; begin
33740: LD_INT 0
33742: PPUSH
33743: PPUSH
// if not array then
33744: LD_VAR 0 1
33748: NOT
33749: IFFALSE 33753
// exit ;
33751: GO 33808
// result := [ ] ;
33753: LD_ADDR_VAR 0 2
33757: PUSH
33758: EMPTY
33759: ST_TO_ADDR
// for i := array downto 1 do
33760: LD_ADDR_VAR 0 3
33764: PUSH
33765: DOUBLE
33766: LD_VAR 0 1
33770: INC
33771: ST_TO_ADDR
33772: LD_INT 1
33774: PUSH
33775: FOR_DOWNTO
33776: IFFALSE 33806
// result := Join ( result , array [ i ] ) ;
33778: LD_ADDR_VAR 0 2
33782: PUSH
33783: LD_VAR 0 2
33787: PPUSH
33788: LD_VAR 0 1
33792: PUSH
33793: LD_VAR 0 3
33797: ARRAY
33798: PPUSH
33799: CALL 38650 0 2
33803: ST_TO_ADDR
33804: GO 33775
33806: POP
33807: POP
// end ;
33808: LD_VAR 0 2
33812: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
33819: PPUSH
33820: PPUSH
// if not unit or not hexes then
33821: LD_VAR 0 1
33825: NOT
33826: IFTRUE 33835
33828: PUSH
33829: LD_VAR 0 2
33833: NOT
33834: OR
33835: IFFALSE 33839
// exit ;
33837: GO 33962
// dist := 9999 ;
33839: LD_ADDR_VAR 0 5
33843: PUSH
33844: LD_INT 9999
33846: ST_TO_ADDR
// for i = 1 to hexes do
33847: LD_ADDR_VAR 0 4
33851: PUSH
33852: DOUBLE
33853: LD_INT 1
33855: DEC
33856: ST_TO_ADDR
33857: LD_VAR 0 2
33861: PUSH
33862: FOR_TO
33863: IFFALSE 33950
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33865: LD_ADDR_VAR 0 6
33869: PUSH
33870: LD_VAR 0 1
33874: PPUSH
33875: LD_VAR 0 2
33879: PUSH
33880: LD_VAR 0 4
33884: ARRAY
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: PPUSH
33890: LD_VAR 0 2
33894: PUSH
33895: LD_VAR 0 4
33899: ARRAY
33900: PUSH
33901: LD_INT 2
33903: ARRAY
33904: PPUSH
33905: CALL_OW 297
33909: ST_TO_ADDR
// if tdist < dist then
33910: LD_VAR 0 6
33914: PUSH
33915: LD_VAR 0 5
33919: LESS
33920: IFFALSE 33948
// begin hex := hexes [ i ] ;
33922: LD_ADDR_VAR 0 8
33926: PUSH
33927: LD_VAR 0 2
33931: PUSH
33932: LD_VAR 0 4
33936: ARRAY
33937: ST_TO_ADDR
// dist := tdist ;
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: LD_VAR 0 6
33947: ST_TO_ADDR
// end ; end ;
33948: GO 33862
33950: POP
33951: POP
// result := hex ;
33952: LD_ADDR_VAR 0 3
33956: PUSH
33957: LD_VAR 0 8
33961: ST_TO_ADDR
// end ;
33962: LD_VAR 0 3
33966: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33967: LD_INT 0
33969: PPUSH
33970: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33971: LD_VAR 0 1
33975: NOT
33976: IFTRUE 34015
33978: PUSH
33979: LD_VAR 0 1
33983: PUSH
33984: LD_INT 21
33986: PUSH
33987: LD_INT 2
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 23
33996: PUSH
33997: LD_INT 2
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PPUSH
34008: CALL_OW 69
34012: IN
34013: NOT
34014: OR
34015: IFFALSE 34019
// exit ;
34017: GO 34066
// for i = 1 to 3 do
34019: LD_ADDR_VAR 0 3
34023: PUSH
34024: DOUBLE
34025: LD_INT 1
34027: DEC
34028: ST_TO_ADDR
34029: LD_INT 3
34031: PUSH
34032: FOR_TO
34033: IFFALSE 34064
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34035: LD_VAR 0 1
34039: PPUSH
34040: CALL_OW 250
34044: PPUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 251
34054: PPUSH
34055: LD_INT 1
34057: PPUSH
34058: CALL_OW 453
34062: GO 34032
34064: POP
34065: POP
// end ;
34066: LD_VAR 0 2
34070: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34071: LD_INT 0
34073: PPUSH
34074: PPUSH
34075: PPUSH
34076: PPUSH
34077: PPUSH
34078: PPUSH
// if not unit or not enemy_unit then
34079: LD_VAR 0 1
34083: NOT
34084: IFTRUE 34093
34086: PUSH
34087: LD_VAR 0 2
34091: NOT
34092: OR
34093: IFFALSE 34097
// exit ;
34095: GO 34568
// if GetLives ( i ) < 250 then
34097: LD_VAR 0 4
34101: PPUSH
34102: CALL_OW 256
34106: PUSH
34107: LD_INT 250
34109: LESS
34110: IFFALSE 34123
// begin ComAutodestruct ( i ) ;
34112: LD_VAR 0 4
34116: PPUSH
34117: CALL 33967 0 1
// exit ;
34121: GO 34568
// end ; x := GetX ( enemy_unit ) ;
34123: LD_ADDR_VAR 0 7
34127: PUSH
34128: LD_VAR 0 2
34132: PPUSH
34133: CALL_OW 250
34137: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34138: LD_ADDR_VAR 0 8
34142: PUSH
34143: LD_VAR 0 2
34147: PPUSH
34148: CALL_OW 251
34152: ST_TO_ADDR
// if not x or not y then
34153: LD_VAR 0 7
34157: NOT
34158: IFTRUE 34167
34160: PUSH
34161: LD_VAR 0 8
34165: NOT
34166: OR
34167: IFFALSE 34171
// exit ;
34169: GO 34568
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34171: LD_ADDR_VAR 0 6
34175: PUSH
34176: LD_VAR 0 7
34180: PPUSH
34181: LD_INT 0
34183: PPUSH
34184: LD_INT 4
34186: PPUSH
34187: CALL_OW 272
34191: PUSH
34192: LD_VAR 0 8
34196: PPUSH
34197: LD_INT 0
34199: PPUSH
34200: LD_INT 4
34202: PPUSH
34203: CALL_OW 273
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_VAR 0 7
34216: PPUSH
34217: LD_INT 1
34219: PPUSH
34220: LD_INT 4
34222: PPUSH
34223: CALL_OW 272
34227: PUSH
34228: LD_VAR 0 8
34232: PPUSH
34233: LD_INT 1
34235: PPUSH
34236: LD_INT 4
34238: PPUSH
34239: CALL_OW 273
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_VAR 0 7
34252: PPUSH
34253: LD_INT 2
34255: PPUSH
34256: LD_INT 4
34258: PPUSH
34259: CALL_OW 272
34263: PUSH
34264: LD_VAR 0 8
34268: PPUSH
34269: LD_INT 2
34271: PPUSH
34272: LD_INT 4
34274: PPUSH
34275: CALL_OW 273
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_VAR 0 7
34288: PPUSH
34289: LD_INT 3
34291: PPUSH
34292: LD_INT 4
34294: PPUSH
34295: CALL_OW 272
34299: PUSH
34300: LD_VAR 0 8
34304: PPUSH
34305: LD_INT 3
34307: PPUSH
34308: LD_INT 4
34310: PPUSH
34311: CALL_OW 273
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_VAR 0 7
34324: PPUSH
34325: LD_INT 4
34327: PPUSH
34328: LD_INT 4
34330: PPUSH
34331: CALL_OW 272
34335: PUSH
34336: LD_VAR 0 8
34340: PPUSH
34341: LD_INT 4
34343: PPUSH
34344: LD_INT 4
34346: PPUSH
34347: CALL_OW 273
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_VAR 0 7
34360: PPUSH
34361: LD_INT 5
34363: PPUSH
34364: LD_INT 4
34366: PPUSH
34367: CALL_OW 272
34371: PUSH
34372: LD_VAR 0 8
34376: PPUSH
34377: LD_INT 5
34379: PPUSH
34380: LD_INT 4
34382: PPUSH
34383: CALL_OW 273
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: ST_TO_ADDR
// for i = tmp downto 1 do
34400: LD_ADDR_VAR 0 4
34404: PUSH
34405: DOUBLE
34406: LD_VAR 0 6
34410: INC
34411: ST_TO_ADDR
34412: LD_INT 1
34414: PUSH
34415: FOR_DOWNTO
34416: IFFALSE 34519
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34418: LD_VAR 0 6
34422: PUSH
34423: LD_VAR 0 4
34427: ARRAY
34428: PUSH
34429: LD_INT 1
34431: ARRAY
34432: PPUSH
34433: LD_VAR 0 6
34437: PUSH
34438: LD_VAR 0 4
34442: ARRAY
34443: PUSH
34444: LD_INT 2
34446: ARRAY
34447: PPUSH
34448: CALL_OW 488
34452: NOT
34453: IFTRUE 34495
34455: PUSH
34456: LD_VAR 0 6
34460: PUSH
34461: LD_VAR 0 4
34465: ARRAY
34466: PUSH
34467: LD_INT 1
34469: ARRAY
34470: PPUSH
34471: LD_VAR 0 6
34475: PUSH
34476: LD_VAR 0 4
34480: ARRAY
34481: PUSH
34482: LD_INT 2
34484: ARRAY
34485: PPUSH
34486: CALL_OW 428
34490: PUSH
34491: LD_INT 0
34493: NONEQUAL
34494: OR
34495: IFFALSE 34517
// tmp := Delete ( tmp , i ) ;
34497: LD_ADDR_VAR 0 6
34501: PUSH
34502: LD_VAR 0 6
34506: PPUSH
34507: LD_VAR 0 4
34511: PPUSH
34512: CALL_OW 3
34516: ST_TO_ADDR
34517: GO 34415
34519: POP
34520: POP
// j := GetClosestHex ( unit , tmp ) ;
34521: LD_ADDR_VAR 0 5
34525: PUSH
34526: LD_VAR 0 1
34530: PPUSH
34531: LD_VAR 0 6
34535: PPUSH
34536: CALL 33813 0 2
34540: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_VAR 0 5
34550: PUSH
34551: LD_INT 1
34553: ARRAY
34554: PPUSH
34555: LD_VAR 0 5
34559: PUSH
34560: LD_INT 2
34562: ARRAY
34563: PPUSH
34564: CALL_OW 111
// end ;
34568: LD_VAR 0 3
34572: RET
// export function PrepareApemanSoldier ( ) ; begin
34573: LD_INT 0
34575: PPUSH
// uc_nation := 0 ;
34576: LD_ADDR_OWVAR 21
34580: PUSH
34581: LD_INT 0
34583: ST_TO_ADDR
// hc_sex := sex_male ;
34584: LD_ADDR_OWVAR 27
34588: PUSH
34589: LD_INT 1
34591: ST_TO_ADDR
// hc_name :=  ;
34592: LD_ADDR_OWVAR 26
34596: PUSH
34597: LD_STRING 
34599: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34600: LD_ADDR_OWVAR 28
34604: PUSH
34605: LD_INT 15
34607: ST_TO_ADDR
// hc_gallery :=  ;
34608: LD_ADDR_OWVAR 33
34612: PUSH
34613: LD_STRING 
34615: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34616: LD_ADDR_OWVAR 31
34620: PUSH
34621: LD_INT 0
34623: PPUSH
34624: LD_INT 3
34626: PPUSH
34627: CALL_OW 12
34631: PUSH
34632: LD_INT 0
34634: PPUSH
34635: LD_INT 3
34637: PPUSH
34638: CALL_OW 12
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34655: LD_ADDR_OWVAR 29
34659: PUSH
34660: LD_INT 12
34662: PUSH
34663: LD_INT 12
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: ST_TO_ADDR
// end ;
34670: LD_VAR 0 1
34674: RET
// export function PrepareApemanEngineer ( ) ; begin
34675: LD_INT 0
34677: PPUSH
// uc_nation := 0 ;
34678: LD_ADDR_OWVAR 21
34682: PUSH
34683: LD_INT 0
34685: ST_TO_ADDR
// hc_sex := sex_male ;
34686: LD_ADDR_OWVAR 27
34690: PUSH
34691: LD_INT 1
34693: ST_TO_ADDR
// hc_name :=  ;
34694: LD_ADDR_OWVAR 26
34698: PUSH
34699: LD_STRING 
34701: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34702: LD_ADDR_OWVAR 28
34706: PUSH
34707: LD_INT 16
34709: ST_TO_ADDR
// hc_gallery :=  ;
34710: LD_ADDR_OWVAR 33
34714: PUSH
34715: LD_STRING 
34717: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34718: LD_ADDR_OWVAR 31
34722: PUSH
34723: LD_INT 0
34725: PPUSH
34726: LD_INT 3
34728: PPUSH
34729: CALL_OW 12
34733: PUSH
34734: LD_INT 0
34736: PPUSH
34737: LD_INT 3
34739: PPUSH
34740: CALL_OW 12
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34757: LD_ADDR_OWVAR 29
34761: PUSH
34762: LD_INT 12
34764: PUSH
34765: LD_INT 12
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: ST_TO_ADDR
// end ;
34772: LD_VAR 0 1
34776: RET
// export function PrepareApeman ( agressivity ) ; begin
34777: LD_INT 0
34779: PPUSH
// uc_side := 0 ;
34780: LD_ADDR_OWVAR 20
34784: PUSH
34785: LD_INT 0
34787: ST_TO_ADDR
// uc_nation := 0 ;
34788: LD_ADDR_OWVAR 21
34792: PUSH
34793: LD_INT 0
34795: ST_TO_ADDR
// hc_sex := sex_male ;
34796: LD_ADDR_OWVAR 27
34800: PUSH
34801: LD_INT 1
34803: ST_TO_ADDR
// hc_class := class_apeman ;
34804: LD_ADDR_OWVAR 28
34808: PUSH
34809: LD_INT 12
34811: ST_TO_ADDR
// hc_gallery :=  ;
34812: LD_ADDR_OWVAR 33
34816: PUSH
34817: LD_STRING 
34819: ST_TO_ADDR
// hc_name :=  ;
34820: LD_ADDR_OWVAR 26
34824: PUSH
34825: LD_STRING 
34827: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34828: LD_ADDR_OWVAR 29
34832: PUSH
34833: LD_INT 12
34835: PUSH
34836: LD_INT 12
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: ST_TO_ADDR
// if agressivity = 0 then
34843: LD_VAR 0 1
34847: PUSH
34848: LD_INT 0
34850: EQUAL
34851: IFFALSE 34863
// hc_agressivity := 0 else
34853: LD_ADDR_OWVAR 35
34857: PUSH
34858: LD_INT 0
34860: ST_TO_ADDR
34861: GO 34884
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34863: LD_ADDR_OWVAR 35
34867: PUSH
34868: LD_VAR 0 1
34872: NEG
34873: PPUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 12
34883: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34884: LD_ADDR_OWVAR 31
34888: PUSH
34889: LD_INT 0
34891: PPUSH
34892: LD_INT 3
34894: PPUSH
34895: CALL_OW 12
34899: PUSH
34900: LD_INT 0
34902: PPUSH
34903: LD_INT 3
34905: PPUSH
34906: CALL_OW 12
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: ST_TO_ADDR
// end ;
34923: LD_VAR 0 2
34927: RET
// export function PrepareTiger ( agressivity ) ; begin
34928: LD_INT 0
34930: PPUSH
// uc_side := 0 ;
34931: LD_ADDR_OWVAR 20
34935: PUSH
34936: LD_INT 0
34938: ST_TO_ADDR
// uc_nation := 0 ;
34939: LD_ADDR_OWVAR 21
34943: PUSH
34944: LD_INT 0
34946: ST_TO_ADDR
// InitHc ;
34947: CALL_OW 19
// hc_class := class_tiger ;
34951: LD_ADDR_OWVAR 28
34955: PUSH
34956: LD_INT 14
34958: ST_TO_ADDR
// hc_gallery :=  ;
34959: LD_ADDR_OWVAR 33
34963: PUSH
34964: LD_STRING 
34966: ST_TO_ADDR
// hc_name :=  ;
34967: LD_ADDR_OWVAR 26
34971: PUSH
34972: LD_STRING 
34974: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34975: LD_ADDR_OWVAR 35
34979: PUSH
34980: LD_VAR 0 1
34984: NEG
34985: PPUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 12
34995: ST_TO_ADDR
// end ;
34996: LD_VAR 0 2
35000: RET
// export function PrepareEnchidna ( ) ; begin
35001: LD_INT 0
35003: PPUSH
// uc_side := 0 ;
35004: LD_ADDR_OWVAR 20
35008: PUSH
35009: LD_INT 0
35011: ST_TO_ADDR
// uc_nation := 0 ;
35012: LD_ADDR_OWVAR 21
35016: PUSH
35017: LD_INT 0
35019: ST_TO_ADDR
// InitHc ;
35020: CALL_OW 19
// hc_class := class_baggie ;
35024: LD_ADDR_OWVAR 28
35028: PUSH
35029: LD_INT 13
35031: ST_TO_ADDR
// hc_gallery :=  ;
35032: LD_ADDR_OWVAR 33
35036: PUSH
35037: LD_STRING 
35039: ST_TO_ADDR
// hc_name :=  ;
35040: LD_ADDR_OWVAR 26
35044: PUSH
35045: LD_STRING 
35047: ST_TO_ADDR
// end ;
35048: LD_VAR 0 1
35052: RET
// export function PrepareFrog ( ) ; begin
35053: LD_INT 0
35055: PPUSH
// uc_side := 0 ;
35056: LD_ADDR_OWVAR 20
35060: PUSH
35061: LD_INT 0
35063: ST_TO_ADDR
// uc_nation := 0 ;
35064: LD_ADDR_OWVAR 21
35068: PUSH
35069: LD_INT 0
35071: ST_TO_ADDR
// InitHc ;
35072: CALL_OW 19
// hc_class := class_frog ;
35076: LD_ADDR_OWVAR 28
35080: PUSH
35081: LD_INT 19
35083: ST_TO_ADDR
// hc_gallery :=  ;
35084: LD_ADDR_OWVAR 33
35088: PUSH
35089: LD_STRING 
35091: ST_TO_ADDR
// hc_name :=  ;
35092: LD_ADDR_OWVAR 26
35096: PUSH
35097: LD_STRING 
35099: ST_TO_ADDR
// end ;
35100: LD_VAR 0 1
35104: RET
// export function PrepareFish ( ) ; begin
35105: LD_INT 0
35107: PPUSH
// uc_side := 0 ;
35108: LD_ADDR_OWVAR 20
35112: PUSH
35113: LD_INT 0
35115: ST_TO_ADDR
// uc_nation := 0 ;
35116: LD_ADDR_OWVAR 21
35120: PUSH
35121: LD_INT 0
35123: ST_TO_ADDR
// InitHc ;
35124: CALL_OW 19
// hc_class := class_fish ;
35128: LD_ADDR_OWVAR 28
35132: PUSH
35133: LD_INT 20
35135: ST_TO_ADDR
// hc_gallery :=  ;
35136: LD_ADDR_OWVAR 33
35140: PUSH
35141: LD_STRING 
35143: ST_TO_ADDR
// hc_name :=  ;
35144: LD_ADDR_OWVAR 26
35148: PUSH
35149: LD_STRING 
35151: ST_TO_ADDR
// end ;
35152: LD_VAR 0 1
35156: RET
// export function PrepareBird ( ) ; begin
35157: LD_INT 0
35159: PPUSH
// uc_side := 0 ;
35160: LD_ADDR_OWVAR 20
35164: PUSH
35165: LD_INT 0
35167: ST_TO_ADDR
// uc_nation := 0 ;
35168: LD_ADDR_OWVAR 21
35172: PUSH
35173: LD_INT 0
35175: ST_TO_ADDR
// InitHc ;
35176: CALL_OW 19
// hc_class := class_phororhacos ;
35180: LD_ADDR_OWVAR 28
35184: PUSH
35185: LD_INT 18
35187: ST_TO_ADDR
// hc_gallery :=  ;
35188: LD_ADDR_OWVAR 33
35192: PUSH
35193: LD_STRING 
35195: ST_TO_ADDR
// hc_name :=  ;
35196: LD_ADDR_OWVAR 26
35200: PUSH
35201: LD_STRING 
35203: ST_TO_ADDR
// end ;
35204: LD_VAR 0 1
35208: RET
// export function PrepareHorse ( ) ; begin
35209: LD_INT 0
35211: PPUSH
// uc_side := 0 ;
35212: LD_ADDR_OWVAR 20
35216: PUSH
35217: LD_INT 0
35219: ST_TO_ADDR
// uc_nation := 0 ;
35220: LD_ADDR_OWVAR 21
35224: PUSH
35225: LD_INT 0
35227: ST_TO_ADDR
// InitHc ;
35228: CALL_OW 19
// hc_class := class_horse ;
35232: LD_ADDR_OWVAR 28
35236: PUSH
35237: LD_INT 21
35239: ST_TO_ADDR
// hc_gallery :=  ;
35240: LD_ADDR_OWVAR 33
35244: PUSH
35245: LD_STRING 
35247: ST_TO_ADDR
// hc_name :=  ;
35248: LD_ADDR_OWVAR 26
35252: PUSH
35253: LD_STRING 
35255: ST_TO_ADDR
// end ;
35256: LD_VAR 0 1
35260: RET
// export function PrepareMastodont ( ) ; begin
35261: LD_INT 0
35263: PPUSH
// uc_side := 0 ;
35264: LD_ADDR_OWVAR 20
35268: PUSH
35269: LD_INT 0
35271: ST_TO_ADDR
// uc_nation := 0 ;
35272: LD_ADDR_OWVAR 21
35276: PUSH
35277: LD_INT 0
35279: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35280: LD_ADDR_OWVAR 37
35284: PUSH
35285: LD_INT 31
35287: ST_TO_ADDR
// vc_control := control_rider ;
35288: LD_ADDR_OWVAR 38
35292: PUSH
35293: LD_INT 4
35295: ST_TO_ADDR
// end ;
35296: LD_VAR 0 1
35300: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35301: LD_INT 0
35303: PPUSH
35304: PPUSH
35305: PPUSH
// uc_side = 0 ;
35306: LD_ADDR_OWVAR 20
35310: PUSH
35311: LD_INT 0
35313: ST_TO_ADDR
// uc_nation = 0 ;
35314: LD_ADDR_OWVAR 21
35318: PUSH
35319: LD_INT 0
35321: ST_TO_ADDR
// InitHc_All ( ) ;
35322: CALL_OW 584
// InitVc ;
35326: CALL_OW 20
// if mastodonts then
35330: LD_VAR 0 6
35334: IFFALSE 35401
// for i = 1 to mastodonts do
35336: LD_ADDR_VAR 0 11
35340: PUSH
35341: DOUBLE
35342: LD_INT 1
35344: DEC
35345: ST_TO_ADDR
35346: LD_VAR 0 6
35350: PUSH
35351: FOR_TO
35352: IFFALSE 35399
// begin vc_chassis := 31 ;
35354: LD_ADDR_OWVAR 37
35358: PUSH
35359: LD_INT 31
35361: ST_TO_ADDR
// vc_control := control_rider ;
35362: LD_ADDR_OWVAR 38
35366: PUSH
35367: LD_INT 4
35369: ST_TO_ADDR
// animal := CreateVehicle ;
35370: LD_ADDR_VAR 0 12
35374: PUSH
35375: CALL_OW 45
35379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35380: LD_VAR 0 12
35384: PPUSH
35385: LD_VAR 0 8
35389: PPUSH
35390: LD_INT 0
35392: PPUSH
35393: CALL 37543 0 3
// end ;
35397: GO 35351
35399: POP
35400: POP
// if horses then
35401: LD_VAR 0 5
35405: IFFALSE 35472
// for i = 1 to horses do
35407: LD_ADDR_VAR 0 11
35411: PUSH
35412: DOUBLE
35413: LD_INT 1
35415: DEC
35416: ST_TO_ADDR
35417: LD_VAR 0 5
35421: PUSH
35422: FOR_TO
35423: IFFALSE 35470
// begin hc_class := 21 ;
35425: LD_ADDR_OWVAR 28
35429: PUSH
35430: LD_INT 21
35432: ST_TO_ADDR
// hc_gallery :=  ;
35433: LD_ADDR_OWVAR 33
35437: PUSH
35438: LD_STRING 
35440: ST_TO_ADDR
// animal := CreateHuman ;
35441: LD_ADDR_VAR 0 12
35445: PUSH
35446: CALL_OW 44
35450: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35451: LD_VAR 0 12
35455: PPUSH
35456: LD_VAR 0 8
35460: PPUSH
35461: LD_INT 0
35463: PPUSH
35464: CALL 37543 0 3
// end ;
35468: GO 35422
35470: POP
35471: POP
// if birds then
35472: LD_VAR 0 1
35476: IFFALSE 35543
// for i = 1 to birds do
35478: LD_ADDR_VAR 0 11
35482: PUSH
35483: DOUBLE
35484: LD_INT 1
35486: DEC
35487: ST_TO_ADDR
35488: LD_VAR 0 1
35492: PUSH
35493: FOR_TO
35494: IFFALSE 35541
// begin hc_class := 18 ;
35496: LD_ADDR_OWVAR 28
35500: PUSH
35501: LD_INT 18
35503: ST_TO_ADDR
// hc_gallery =  ;
35504: LD_ADDR_OWVAR 33
35508: PUSH
35509: LD_STRING 
35511: ST_TO_ADDR
// animal := CreateHuman ;
35512: LD_ADDR_VAR 0 12
35516: PUSH
35517: CALL_OW 44
35521: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35522: LD_VAR 0 12
35526: PPUSH
35527: LD_VAR 0 8
35531: PPUSH
35532: LD_INT 0
35534: PPUSH
35535: CALL 37543 0 3
// end ;
35539: GO 35493
35541: POP
35542: POP
// if tigers then
35543: LD_VAR 0 2
35547: IFFALSE 35631
// for i = 1 to tigers do
35549: LD_ADDR_VAR 0 11
35553: PUSH
35554: DOUBLE
35555: LD_INT 1
35557: DEC
35558: ST_TO_ADDR
35559: LD_VAR 0 2
35563: PUSH
35564: FOR_TO
35565: IFFALSE 35629
// begin hc_class = class_tiger ;
35567: LD_ADDR_OWVAR 28
35571: PUSH
35572: LD_INT 14
35574: ST_TO_ADDR
// hc_gallery =  ;
35575: LD_ADDR_OWVAR 33
35579: PUSH
35580: LD_STRING 
35582: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35583: LD_ADDR_OWVAR 35
35587: PUSH
35588: LD_INT 7
35590: NEG
35591: PPUSH
35592: LD_INT 7
35594: PPUSH
35595: CALL_OW 12
35599: ST_TO_ADDR
// animal := CreateHuman ;
35600: LD_ADDR_VAR 0 12
35604: PUSH
35605: CALL_OW 44
35609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35610: LD_VAR 0 12
35614: PPUSH
35615: LD_VAR 0 8
35619: PPUSH
35620: LD_INT 0
35622: PPUSH
35623: CALL 37543 0 3
// end ;
35627: GO 35564
35629: POP
35630: POP
// if apemans then
35631: LD_VAR 0 3
35635: IFFALSE 35758
// for i = 1 to apemans do
35637: LD_ADDR_VAR 0 11
35641: PUSH
35642: DOUBLE
35643: LD_INT 1
35645: DEC
35646: ST_TO_ADDR
35647: LD_VAR 0 3
35651: PUSH
35652: FOR_TO
35653: IFFALSE 35756
// begin hc_class = class_apeman ;
35655: LD_ADDR_OWVAR 28
35659: PUSH
35660: LD_INT 12
35662: ST_TO_ADDR
// hc_gallery =  ;
35663: LD_ADDR_OWVAR 33
35667: PUSH
35668: LD_STRING 
35670: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35671: LD_ADDR_OWVAR 35
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PPUSH
35680: LD_INT 2
35682: PPUSH
35683: CALL_OW 12
35687: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35688: LD_ADDR_OWVAR 31
35692: PUSH
35693: LD_INT 1
35695: PPUSH
35696: LD_INT 3
35698: PPUSH
35699: CALL_OW 12
35703: PUSH
35704: LD_INT 1
35706: PPUSH
35707: LD_INT 3
35709: PPUSH
35710: CALL_OW 12
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
// animal := CreateHuman ;
35727: LD_ADDR_VAR 0 12
35731: PUSH
35732: CALL_OW 44
35736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35737: LD_VAR 0 12
35741: PPUSH
35742: LD_VAR 0 8
35746: PPUSH
35747: LD_INT 0
35749: PPUSH
35750: CALL 37543 0 3
// end ;
35754: GO 35652
35756: POP
35757: POP
// if enchidnas then
35758: LD_VAR 0 4
35762: IFFALSE 35829
// for i = 1 to enchidnas do
35764: LD_ADDR_VAR 0 11
35768: PUSH
35769: DOUBLE
35770: LD_INT 1
35772: DEC
35773: ST_TO_ADDR
35774: LD_VAR 0 4
35778: PUSH
35779: FOR_TO
35780: IFFALSE 35827
// begin hc_class = 13 ;
35782: LD_ADDR_OWVAR 28
35786: PUSH
35787: LD_INT 13
35789: ST_TO_ADDR
// hc_gallery =  ;
35790: LD_ADDR_OWVAR 33
35794: PUSH
35795: LD_STRING 
35797: ST_TO_ADDR
// animal := CreateHuman ;
35798: LD_ADDR_VAR 0 12
35802: PUSH
35803: CALL_OW 44
35807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35808: LD_VAR 0 12
35812: PPUSH
35813: LD_VAR 0 8
35817: PPUSH
35818: LD_INT 0
35820: PPUSH
35821: CALL 37543 0 3
// end ;
35825: GO 35779
35827: POP
35828: POP
// if fishes then
35829: LD_VAR 0 7
35833: IFFALSE 35900
// for i = 1 to fishes do
35835: LD_ADDR_VAR 0 11
35839: PUSH
35840: DOUBLE
35841: LD_INT 1
35843: DEC
35844: ST_TO_ADDR
35845: LD_VAR 0 7
35849: PUSH
35850: FOR_TO
35851: IFFALSE 35898
// begin hc_class = 20 ;
35853: LD_ADDR_OWVAR 28
35857: PUSH
35858: LD_INT 20
35860: ST_TO_ADDR
// hc_gallery =  ;
35861: LD_ADDR_OWVAR 33
35865: PUSH
35866: LD_STRING 
35868: ST_TO_ADDR
// animal := CreateHuman ;
35869: LD_ADDR_VAR 0 12
35873: PUSH
35874: CALL_OW 44
35878: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35879: LD_VAR 0 12
35883: PPUSH
35884: LD_VAR 0 9
35888: PPUSH
35889: LD_INT 0
35891: PPUSH
35892: CALL 37543 0 3
// end ;
35896: GO 35850
35898: POP
35899: POP
// end ;
35900: LD_VAR 0 10
35904: RET
// export function WantHeal ( sci , unit ) ; begin
35905: LD_INT 0
35907: PPUSH
// if GetTaskList ( sci ) > 0 then
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 437
35917: PUSH
35918: LD_INT 0
35920: GREATER
35921: IFFALSE 35993
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 437
35932: PUSH
35933: LD_INT 1
35935: ARRAY
35936: PUSH
35937: LD_INT 1
35939: ARRAY
35940: PUSH
35941: LD_STRING l
35943: EQUAL
35944: IFFALSE 35971
35946: PUSH
35947: LD_VAR 0 1
35951: PPUSH
35952: CALL_OW 437
35956: PUSH
35957: LD_INT 1
35959: ARRAY
35960: PUSH
35961: LD_INT 4
35963: ARRAY
35964: PUSH
35965: LD_VAR 0 2
35969: EQUAL
35970: AND
35971: IFFALSE 35983
// result := true else
35973: LD_ADDR_VAR 0 3
35977: PUSH
35978: LD_INT 1
35980: ST_TO_ADDR
35981: GO 35991
// result := false ;
35983: LD_ADDR_VAR 0 3
35987: PUSH
35988: LD_INT 0
35990: ST_TO_ADDR
// end else
35991: GO 36001
// result := false ;
35993: LD_ADDR_VAR 0 3
35997: PUSH
35998: LD_INT 0
36000: ST_TO_ADDR
// end ;
36001: LD_VAR 0 3
36005: RET
// export function HealTarget ( sci ) ; begin
36006: LD_INT 0
36008: PPUSH
// if not sci then
36009: LD_VAR 0 1
36013: NOT
36014: IFFALSE 36018
// exit ;
36016: GO 36083
// result := 0 ;
36018: LD_ADDR_VAR 0 2
36022: PUSH
36023: LD_INT 0
36025: ST_TO_ADDR
// if GetTaskList ( sci ) then
36026: LD_VAR 0 1
36030: PPUSH
36031: CALL_OW 437
36035: IFFALSE 36083
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 437
36046: PUSH
36047: LD_INT 1
36049: ARRAY
36050: PUSH
36051: LD_INT 1
36053: ARRAY
36054: PUSH
36055: LD_STRING l
36057: EQUAL
36058: IFFALSE 36083
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36060: LD_ADDR_VAR 0 2
36064: PUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: CALL_OW 437
36074: PUSH
36075: LD_INT 1
36077: ARRAY
36078: PUSH
36079: LD_INT 4
36081: ARRAY
36082: ST_TO_ADDR
// end ;
36083: LD_VAR 0 2
36087: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36088: LD_INT 0
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
// if not base_units then
36094: LD_VAR 0 1
36098: NOT
36099: IFFALSE 36103
// exit ;
36101: GO 36190
// result := false ;
36103: LD_ADDR_VAR 0 2
36107: PUSH
36108: LD_INT 0
36110: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36111: LD_ADDR_VAR 0 5
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: LD_INT 21
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PPUSH
36131: CALL_OW 72
36135: ST_TO_ADDR
// if not tmp then
36136: LD_VAR 0 5
36140: NOT
36141: IFFALSE 36145
// exit ;
36143: GO 36190
// for i in tmp do
36145: LD_ADDR_VAR 0 3
36149: PUSH
36150: LD_VAR 0 5
36154: PUSH
36155: FOR_IN
36156: IFFALSE 36188
// begin result := EnemyInRange ( i , 22 ) ;
36158: LD_ADDR_VAR 0 2
36162: PUSH
36163: LD_VAR 0 3
36167: PPUSH
36168: LD_INT 22
36170: PPUSH
36171: CALL 33615 0 2
36175: ST_TO_ADDR
// if result then
36176: LD_VAR 0 2
36180: IFFALSE 36186
// exit ;
36182: POP
36183: POP
36184: GO 36190
// end ;
36186: GO 36155
36188: POP
36189: POP
// end ;
36190: LD_VAR 0 2
36194: RET
// export function FilterByTag ( units , tag ) ; begin
36195: LD_INT 0
36197: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36198: LD_ADDR_VAR 0 3
36202: PUSH
36203: LD_VAR 0 1
36207: PPUSH
36208: LD_INT 120
36210: PUSH
36211: LD_VAR 0 2
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PPUSH
36220: CALL_OW 72
36224: ST_TO_ADDR
// end ;
36225: LD_VAR 0 3
36229: RET
// export function IsDriver ( un ) ; begin
36230: LD_INT 0
36232: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36233: LD_ADDR_VAR 0 2
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: LD_INT 55
36245: PUSH
36246: EMPTY
36247: LIST
36248: PPUSH
36249: CALL_OW 69
36253: IN
36254: ST_TO_ADDR
// end ;
36255: LD_VAR 0 2
36259: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36260: LD_INT 0
36262: PPUSH
36263: PPUSH
// list := [ ] ;
36264: LD_ADDR_VAR 0 5
36268: PUSH
36269: EMPTY
36270: ST_TO_ADDR
// case d of 0 :
36271: LD_VAR 0 3
36275: PUSH
36276: LD_INT 0
36278: DOUBLE
36279: EQUAL
36280: IFTRUE 36284
36282: GO 36417
36284: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: LD_VAR 0 1
36294: PUSH
36295: LD_INT 4
36297: MINUS
36298: PUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_INT 4
36306: MINUS
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: PUSH
36316: LD_VAR 0 1
36320: PUSH
36321: LD_INT 3
36323: MINUS
36324: PUSH
36325: LD_VAR 0 2
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: PUSH
36338: LD_VAR 0 1
36342: PUSH
36343: LD_INT 4
36345: PLUS
36346: PUSH
36347: LD_VAR 0 2
36351: PUSH
36352: LD_INT 4
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: PUSH
36360: LD_VAR 0 1
36364: PUSH
36365: LD_INT 3
36367: PLUS
36368: PUSH
36369: LD_VAR 0 2
36373: PUSH
36374: LD_INT 3
36376: PLUS
36377: PUSH
36378: LD_INT 5
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: PUSH
36386: LD_VAR 0 1
36390: PUSH
36391: LD_VAR 0 2
36395: PUSH
36396: LD_INT 4
36398: PLUS
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
// end ; 1 :
36415: GO 37115
36417: LD_INT 1
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36425
36423: GO 36558
36425: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36426: LD_ADDR_VAR 0 5
36430: PUSH
36431: LD_VAR 0 1
36435: PUSH
36436: LD_VAR 0 2
36440: PUSH
36441: LD_INT 4
36443: MINUS
36444: PUSH
36445: LD_INT 3
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: PUSH
36453: LD_VAR 0 1
36457: PUSH
36458: LD_INT 3
36460: MINUS
36461: PUSH
36462: LD_VAR 0 2
36466: PUSH
36467: LD_INT 3
36469: MINUS
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: PUSH
36479: LD_VAR 0 1
36483: PUSH
36484: LD_INT 4
36486: MINUS
36487: PUSH
36488: LD_VAR 0 2
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PUSH
36501: LD_VAR 0 1
36505: PUSH
36506: LD_VAR 0 2
36510: PUSH
36511: LD_INT 3
36513: PLUS
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: PUSH
36523: LD_VAR 0 1
36527: PUSH
36528: LD_INT 4
36530: PLUS
36531: PUSH
36532: LD_VAR 0 2
36536: PUSH
36537: LD_INT 4
36539: PLUS
36540: PUSH
36541: LD_INT 5
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// end ; 2 :
36556: GO 37115
36558: LD_INT 2
36560: DOUBLE
36561: EQUAL
36562: IFTRUE 36566
36564: GO 36695
36566: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36567: LD_ADDR_VAR 0 5
36571: PUSH
36572: LD_VAR 0 1
36576: PUSH
36577: LD_VAR 0 2
36581: PUSH
36582: LD_INT 3
36584: MINUS
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: PUSH
36594: LD_VAR 0 1
36598: PUSH
36599: LD_INT 4
36601: PLUS
36602: PUSH
36603: LD_VAR 0 2
36607: PUSH
36608: LD_INT 4
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: PUSH
36616: LD_VAR 0 1
36620: PUSH
36621: LD_VAR 0 2
36625: PUSH
36626: LD_INT 4
36628: PLUS
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: PUSH
36638: LD_VAR 0 1
36642: PUSH
36643: LD_INT 3
36645: MINUS
36646: PUSH
36647: LD_VAR 0 2
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: PUSH
36660: LD_VAR 0 1
36664: PUSH
36665: LD_INT 4
36667: MINUS
36668: PUSH
36669: LD_VAR 0 2
36673: PUSH
36674: LD_INT 4
36676: MINUS
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// end ; 3 :
36693: GO 37115
36695: LD_INT 3
36697: DOUBLE
36698: EQUAL
36699: IFTRUE 36703
36701: GO 36836
36703: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36704: LD_ADDR_VAR 0 5
36708: PUSH
36709: LD_VAR 0 1
36713: PUSH
36714: LD_INT 3
36716: PLUS
36717: PUSH
36718: LD_VAR 0 2
36722: PUSH
36723: LD_INT 4
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: PUSH
36731: LD_VAR 0 1
36735: PUSH
36736: LD_INT 4
36738: PLUS
36739: PUSH
36740: LD_VAR 0 2
36744: PUSH
36745: LD_INT 4
36747: PLUS
36748: PUSH
36749: LD_INT 5
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: PUSH
36757: LD_VAR 0 1
36761: PUSH
36762: LD_INT 4
36764: MINUS
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: PUSH
36779: LD_VAR 0 1
36783: PUSH
36784: LD_VAR 0 2
36788: PUSH
36789: LD_INT 4
36791: MINUS
36792: PUSH
36793: LD_INT 3
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: PUSH
36801: LD_VAR 0 1
36805: PUSH
36806: LD_INT 3
36808: MINUS
36809: PUSH
36810: LD_VAR 0 2
36814: PUSH
36815: LD_INT 3
36817: MINUS
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// end ; 4 :
36834: GO 37115
36836: LD_INT 4
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 36977
36844: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36845: LD_ADDR_VAR 0 5
36849: PUSH
36850: LD_VAR 0 1
36854: PUSH
36855: LD_VAR 0 2
36859: PUSH
36860: LD_INT 4
36862: PLUS
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: PUSH
36872: LD_VAR 0 1
36876: PUSH
36877: LD_INT 3
36879: PLUS
36880: PUSH
36881: LD_VAR 0 2
36885: PUSH
36886: LD_INT 3
36888: PLUS
36889: PUSH
36890: LD_INT 5
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: PUSH
36898: LD_VAR 0 1
36902: PUSH
36903: LD_INT 4
36905: PLUS
36906: PUSH
36907: LD_VAR 0 2
36911: PUSH
36912: LD_INT 4
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: PUSH
36920: LD_VAR 0 1
36924: PUSH
36925: LD_VAR 0 2
36929: PUSH
36930: LD_INT 3
36932: MINUS
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: PUSH
36942: LD_VAR 0 1
36946: PUSH
36947: LD_INT 4
36949: MINUS
36950: PUSH
36951: LD_VAR 0 2
36955: PUSH
36956: LD_INT 4
36958: MINUS
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// end ; 5 :
36975: GO 37115
36977: LD_INT 5
36979: DOUBLE
36980: EQUAL
36981: IFTRUE 36985
36983: GO 37114
36985: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36986: LD_ADDR_VAR 0 5
36990: PUSH
36991: LD_VAR 0 1
36995: PUSH
36996: LD_INT 4
36998: MINUS
36999: PUSH
37000: LD_VAR 0 2
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: PUSH
37013: LD_VAR 0 1
37017: PUSH
37018: LD_VAR 0 2
37022: PUSH
37023: LD_INT 4
37025: MINUS
37026: PUSH
37027: LD_INT 3
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: PUSH
37035: LD_VAR 0 1
37039: PUSH
37040: LD_INT 4
37042: PLUS
37043: PUSH
37044: LD_VAR 0 2
37048: PUSH
37049: LD_INT 4
37051: PLUS
37052: PUSH
37053: LD_INT 5
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: PUSH
37061: LD_VAR 0 1
37065: PUSH
37066: LD_INT 3
37068: PLUS
37069: PUSH
37070: LD_VAR 0 2
37074: PUSH
37075: LD_INT 4
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: PUSH
37083: LD_VAR 0 1
37087: PUSH
37088: LD_VAR 0 2
37092: PUSH
37093: LD_INT 3
37095: PLUS
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// end ; end ;
37112: GO 37115
37114: POP
// result := list ;
37115: LD_ADDR_VAR 0 4
37119: PUSH
37120: LD_VAR 0 5
37124: ST_TO_ADDR
// end ;
37125: LD_VAR 0 4
37129: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37130: LD_INT 0
37132: PPUSH
37133: PPUSH
37134: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37135: LD_VAR 0 1
37139: NOT
37140: IFTRUE 37168
37142: PUSH
37143: LD_VAR 0 2
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 3
37156: PUSH
37157: LD_INT 4
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: IN
37166: NOT
37167: OR
37168: IFFALSE 37172
// exit ;
37170: GO 37255
// tmp := [ ] ;
37172: LD_ADDR_VAR 0 5
37176: PUSH
37177: EMPTY
37178: ST_TO_ADDR
// for i in units do
37179: LD_ADDR_VAR 0 4
37183: PUSH
37184: LD_VAR 0 1
37188: PUSH
37189: FOR_IN
37190: IFFALSE 37224
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37192: LD_ADDR_VAR 0 5
37196: PUSH
37197: LD_VAR 0 5
37201: PPUSH
37202: LD_VAR 0 4
37206: PPUSH
37207: LD_VAR 0 2
37211: PPUSH
37212: CALL_OW 259
37216: PPUSH
37217: CALL 38650 0 2
37221: ST_TO_ADDR
37222: GO 37189
37224: POP
37225: POP
// if not tmp then
37226: LD_VAR 0 5
37230: NOT
37231: IFFALSE 37235
// exit ;
37233: GO 37255
// result := SortListByListDesc ( units , tmp ) ;
37235: LD_ADDR_VAR 0 3
37239: PUSH
37240: LD_VAR 0 1
37244: PPUSH
37245: LD_VAR 0 5
37249: PPUSH
37250: CALL_OW 77
37254: ST_TO_ADDR
// end ;
37255: LD_VAR 0 3
37259: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37260: LD_INT 0
37262: PPUSH
37263: PPUSH
37264: PPUSH
// result := false ;
37265: LD_ADDR_VAR 0 3
37269: PUSH
37270: LD_INT 0
37272: ST_TO_ADDR
// if not building then
37273: LD_VAR 0 2
37277: NOT
37278: IFFALSE 37282
// exit ;
37280: GO 37426
// x := GetX ( building ) ;
37282: LD_ADDR_VAR 0 4
37286: PUSH
37287: LD_VAR 0 2
37291: PPUSH
37292: CALL_OW 250
37296: ST_TO_ADDR
// y := GetY ( building ) ;
37297: LD_ADDR_VAR 0 5
37301: PUSH
37302: LD_VAR 0 2
37306: PPUSH
37307: CALL_OW 251
37311: ST_TO_ADDR
// if not x or not y then
37312: LD_VAR 0 4
37316: NOT
37317: IFTRUE 37326
37319: PUSH
37320: LD_VAR 0 5
37324: NOT
37325: OR
37326: IFFALSE 37330
// exit ;
37328: GO 37426
// if GetTaskList ( unit ) then
37330: LD_VAR 0 1
37334: PPUSH
37335: CALL_OW 437
37339: IFFALSE 37426
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37341: LD_STRING e
37343: PUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: CALL_OW 437
37353: PUSH
37354: LD_INT 1
37356: ARRAY
37357: PUSH
37358: LD_INT 1
37360: ARRAY
37361: EQUAL
37362: IFFALSE 37389
37364: PUSH
37365: LD_VAR 0 4
37369: PUSH
37370: LD_VAR 0 1
37374: PPUSH
37375: CALL_OW 437
37379: PUSH
37380: LD_INT 1
37382: ARRAY
37383: PUSH
37384: LD_INT 2
37386: ARRAY
37387: EQUAL
37388: AND
37389: IFFALSE 37416
37391: PUSH
37392: LD_VAR 0 5
37396: PUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 437
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PUSH
37411: LD_INT 3
37413: ARRAY
37414: EQUAL
37415: AND
37416: IFFALSE 37426
// result := true end ;
37418: LD_ADDR_VAR 0 3
37422: PUSH
37423: LD_INT 1
37425: ST_TO_ADDR
// end ;
37426: LD_VAR 0 3
37430: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37431: LD_INT 0
37433: PPUSH
// result := false ;
37434: LD_ADDR_VAR 0 4
37438: PUSH
37439: LD_INT 0
37441: ST_TO_ADDR
// if GetTaskList ( unit ) then
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 437
37451: IFFALSE 37538
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37453: LD_STRING M
37455: PUSH
37456: LD_VAR 0 1
37460: PPUSH
37461: CALL_OW 437
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: EQUAL
37474: IFFALSE 37501
37476: PUSH
37477: LD_VAR 0 2
37481: PUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 437
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: PUSH
37496: LD_INT 2
37498: ARRAY
37499: EQUAL
37500: AND
37501: IFFALSE 37528
37503: PUSH
37504: LD_VAR 0 3
37508: PUSH
37509: LD_VAR 0 1
37513: PPUSH
37514: CALL_OW 437
37518: PUSH
37519: LD_INT 1
37521: ARRAY
37522: PUSH
37523: LD_INT 3
37525: ARRAY
37526: EQUAL
37527: AND
37528: IFFALSE 37538
// result := true ;
37530: LD_ADDR_VAR 0 4
37534: PUSH
37535: LD_INT 1
37537: ST_TO_ADDR
// end ; end ;
37538: LD_VAR 0 4
37542: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37543: LD_INT 0
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
// if not unit or not area then
37549: LD_VAR 0 1
37553: NOT
37554: IFTRUE 37563
37556: PUSH
37557: LD_VAR 0 2
37561: NOT
37562: OR
37563: IFFALSE 37567
// exit ;
37565: GO 37743
// tmp := AreaToList ( area , i ) ;
37567: LD_ADDR_VAR 0 6
37571: PUSH
37572: LD_VAR 0 2
37576: PPUSH
37577: LD_VAR 0 5
37581: PPUSH
37582: CALL_OW 517
37586: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37587: LD_ADDR_VAR 0 5
37591: PUSH
37592: DOUBLE
37593: LD_INT 1
37595: DEC
37596: ST_TO_ADDR
37597: LD_VAR 0 6
37601: PUSH
37602: LD_INT 1
37604: ARRAY
37605: PUSH
37606: FOR_TO
37607: IFFALSE 37741
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37609: LD_ADDR_VAR 0 7
37613: PUSH
37614: LD_VAR 0 6
37618: PUSH
37619: LD_INT 1
37621: ARRAY
37622: PUSH
37623: LD_VAR 0 5
37627: ARRAY
37628: PUSH
37629: LD_VAR 0 6
37633: PUSH
37634: LD_INT 2
37636: ARRAY
37637: PUSH
37638: LD_VAR 0 5
37642: ARRAY
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37648: LD_INT 92
37650: PUSH
37651: LD_VAR 0 7
37655: PUSH
37656: LD_INT 1
37658: ARRAY
37659: PUSH
37660: LD_VAR 0 7
37664: PUSH
37665: LD_INT 2
37667: ARRAY
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: PPUSH
37678: CALL_OW 69
37682: PUSH
37683: LD_INT 0
37685: EQUAL
37686: IFFALSE 37739
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37688: LD_VAR 0 1
37692: PPUSH
37693: LD_VAR 0 7
37697: PUSH
37698: LD_INT 1
37700: ARRAY
37701: PPUSH
37702: LD_VAR 0 7
37706: PUSH
37707: LD_INT 2
37709: ARRAY
37710: PPUSH
37711: LD_VAR 0 3
37715: PPUSH
37716: CALL_OW 48
// result := IsPlaced ( unit ) ;
37720: LD_ADDR_VAR 0 4
37724: PUSH
37725: LD_VAR 0 1
37729: PPUSH
37730: CALL_OW 305
37734: ST_TO_ADDR
// exit ;
37735: POP
37736: POP
37737: GO 37743
// end ; end ;
37739: GO 37606
37741: POP
37742: POP
// end ;
37743: LD_VAR 0 4
37747: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37748: LD_INT 0
37750: PPUSH
37751: PPUSH
37752: PPUSH
// if not side or side > 8 then
37753: LD_VAR 0 1
37757: NOT
37758: IFTRUE 37770
37760: PUSH
37761: LD_VAR 0 1
37765: PUSH
37766: LD_INT 8
37768: GREATER
37769: OR
37770: IFFALSE 37774
// exit ;
37772: GO 37961
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37774: LD_ADDR_VAR 0 4
37778: PUSH
37779: LD_INT 22
37781: PUSH
37782: LD_VAR 0 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 21
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PPUSH
37805: CALL_OW 69
37809: ST_TO_ADDR
// if not tmp then
37810: LD_VAR 0 4
37814: NOT
37815: IFFALSE 37819
// exit ;
37817: GO 37961
// enable_addtolog := true ;
37819: LD_ADDR_OWVAR 81
37823: PUSH
37824: LD_INT 1
37826: ST_TO_ADDR
// AddToLog ( [ ) ;
37827: LD_STRING [
37829: PPUSH
37830: CALL_OW 561
// for i in tmp do
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_VAR 0 4
37843: PUSH
37844: FOR_IN
37845: IFFALSE 37952
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37847: LD_STRING [
37849: PUSH
37850: LD_VAR 0 3
37854: PPUSH
37855: CALL_OW 266
37859: STR
37860: PUSH
37861: LD_STRING , 
37863: STR
37864: PUSH
37865: LD_VAR 0 3
37869: PPUSH
37870: CALL_OW 250
37874: STR
37875: PUSH
37876: LD_STRING , 
37878: STR
37879: PUSH
37880: LD_VAR 0 3
37884: PPUSH
37885: CALL_OW 251
37889: STR
37890: PUSH
37891: LD_STRING , 
37893: STR
37894: PUSH
37895: LD_VAR 0 3
37899: PPUSH
37900: CALL_OW 254
37904: STR
37905: PUSH
37906: LD_STRING , 
37908: STR
37909: PUSH
37910: LD_VAR 0 3
37914: PPUSH
37915: LD_INT 1
37917: PPUSH
37918: CALL_OW 268
37922: STR
37923: PUSH
37924: LD_STRING , 
37926: STR
37927: PUSH
37928: LD_VAR 0 3
37932: PPUSH
37933: LD_INT 2
37935: PPUSH
37936: CALL_OW 268
37940: STR
37941: PUSH
37942: LD_STRING ],
37944: STR
37945: PPUSH
37946: CALL_OW 561
// end ;
37950: GO 37844
37952: POP
37953: POP
// AddToLog ( ]; ) ;
37954: LD_STRING ];
37956: PPUSH
37957: CALL_OW 561
// end ;
37961: LD_VAR 0 2
37965: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37966: LD_INT 0
37968: PPUSH
37969: PPUSH
37970: PPUSH
37971: PPUSH
37972: PPUSH
// if not area or not rate or not max then
37973: LD_VAR 0 1
37977: NOT
37978: IFTRUE 37987
37980: PUSH
37981: LD_VAR 0 2
37985: NOT
37986: OR
37987: IFTRUE 37996
37989: PUSH
37990: LD_VAR 0 4
37994: NOT
37995: OR
37996: IFFALSE 38000
// exit ;
37998: GO 38189
// while 1 do
38000: LD_INT 1
38002: IFFALSE 38189
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38004: LD_ADDR_VAR 0 9
38008: PUSH
38009: LD_VAR 0 1
38013: PPUSH
38014: LD_INT 1
38016: PPUSH
38017: CALL_OW 287
38021: PUSH
38022: LD_INT 10
38024: MUL
38025: ST_TO_ADDR
// r := rate / 10 ;
38026: LD_ADDR_VAR 0 7
38030: PUSH
38031: LD_VAR 0 2
38035: PUSH
38036: LD_INT 10
38038: DIVREAL
38039: ST_TO_ADDR
// time := 1 1$00 ;
38040: LD_ADDR_VAR 0 8
38044: PUSH
38045: LD_INT 2100
38047: ST_TO_ADDR
// if amount < min then
38048: LD_VAR 0 9
38052: PUSH
38053: LD_VAR 0 3
38057: LESS
38058: IFFALSE 38076
// r := r * 2 else
38060: LD_ADDR_VAR 0 7
38064: PUSH
38065: LD_VAR 0 7
38069: PUSH
38070: LD_INT 2
38072: MUL
38073: ST_TO_ADDR
38074: GO 38102
// if amount > max then
38076: LD_VAR 0 9
38080: PUSH
38081: LD_VAR 0 4
38085: GREATER
38086: IFFALSE 38102
// r := r / 2 ;
38088: LD_ADDR_VAR 0 7
38092: PUSH
38093: LD_VAR 0 7
38097: PUSH
38098: LD_INT 2
38100: DIVREAL
38101: ST_TO_ADDR
// time := time / r ;
38102: LD_ADDR_VAR 0 8
38106: PUSH
38107: LD_VAR 0 8
38111: PUSH
38112: LD_VAR 0 7
38116: DIVREAL
38117: ST_TO_ADDR
// if time < 0 then
38118: LD_VAR 0 8
38122: PUSH
38123: LD_INT 0
38125: LESS
38126: IFFALSE 38143
// time := time * - 1 ;
38128: LD_ADDR_VAR 0 8
38132: PUSH
38133: LD_VAR 0 8
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: MUL
38142: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38143: LD_VAR 0 8
38147: PUSH
38148: LD_INT 35
38150: PPUSH
38151: LD_INT 875
38153: PPUSH
38154: CALL_OW 12
38158: PLUS
38159: PPUSH
38160: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38164: LD_INT 1
38166: PPUSH
38167: LD_INT 5
38169: PPUSH
38170: CALL_OW 12
38174: PPUSH
38175: LD_VAR 0 1
38179: PPUSH
38180: LD_INT 1
38182: PPUSH
38183: CALL_OW 55
// end ;
38187: GO 38000
// end ;
38189: LD_VAR 0 5
38193: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38194: LD_INT 0
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
// if not turrets or not factories then
38204: LD_VAR 0 1
38208: NOT
38209: IFTRUE 38218
38211: PUSH
38212: LD_VAR 0 2
38216: NOT
38217: OR
38218: IFFALSE 38222
// exit ;
38220: GO 38529
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38222: LD_ADDR_VAR 0 10
38226: PUSH
38227: LD_INT 5
38229: PUSH
38230: LD_INT 6
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: LD_INT 4
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: LD_INT 5
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 24
38264: PUSH
38265: LD_INT 25
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 23
38274: PUSH
38275: LD_INT 27
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 42
38288: PUSH
38289: LD_INT 43
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 44
38298: PUSH
38299: LD_INT 46
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 45
38308: PUSH
38309: LD_INT 47
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// result := [ ] ;
38326: LD_ADDR_VAR 0 3
38330: PUSH
38331: EMPTY
38332: ST_TO_ADDR
// for i in turrets do
38333: LD_ADDR_VAR 0 4
38337: PUSH
38338: LD_VAR 0 1
38342: PUSH
38343: FOR_IN
38344: IFFALSE 38527
// begin nat := GetNation ( i ) ;
38346: LD_ADDR_VAR 0 7
38350: PUSH
38351: LD_VAR 0 4
38355: PPUSH
38356: CALL_OW 248
38360: ST_TO_ADDR
// weapon := 0 ;
38361: LD_ADDR_VAR 0 8
38365: PUSH
38366: LD_INT 0
38368: ST_TO_ADDR
// if not nat then
38369: LD_VAR 0 7
38373: NOT
38374: IFFALSE 38378
// continue ;
38376: GO 38343
// for j in list [ nat ] do
38378: LD_ADDR_VAR 0 5
38382: PUSH
38383: LD_VAR 0 10
38387: PUSH
38388: LD_VAR 0 7
38392: ARRAY
38393: PUSH
38394: FOR_IN
38395: IFFALSE 38436
// if GetBWeapon ( i ) = j [ 1 ] then
38397: LD_VAR 0 4
38401: PPUSH
38402: CALL_OW 269
38406: PUSH
38407: LD_VAR 0 5
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: EQUAL
38416: IFFALSE 38434
// begin weapon := j [ 2 ] ;
38418: LD_ADDR_VAR 0 8
38422: PUSH
38423: LD_VAR 0 5
38427: PUSH
38428: LD_INT 2
38430: ARRAY
38431: ST_TO_ADDR
// break ;
38432: GO 38436
// end ;
38434: GO 38394
38436: POP
38437: POP
// if not weapon then
38438: LD_VAR 0 8
38442: NOT
38443: IFFALSE 38447
// continue ;
38445: GO 38343
// for k in factories do
38447: LD_ADDR_VAR 0 6
38451: PUSH
38452: LD_VAR 0 2
38456: PUSH
38457: FOR_IN
38458: IFFALSE 38523
// begin weapons := AvailableWeaponList ( k ) ;
38460: LD_ADDR_VAR 0 9
38464: PUSH
38465: LD_VAR 0 6
38469: PPUSH
38470: CALL_OW 478
38474: ST_TO_ADDR
// if not weapons then
38475: LD_VAR 0 9
38479: NOT
38480: IFFALSE 38484
// continue ;
38482: GO 38457
// if weapon in weapons then
38484: LD_VAR 0 8
38488: PUSH
38489: LD_VAR 0 9
38493: IN
38494: IFFALSE 38521
// begin result := [ i , weapon ] ;
38496: LD_ADDR_VAR 0 3
38500: PUSH
38501: LD_VAR 0 4
38505: PUSH
38506: LD_VAR 0 8
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// exit ;
38515: POP
38516: POP
38517: POP
38518: POP
38519: GO 38529
// end ; end ;
38521: GO 38457
38523: POP
38524: POP
// end ;
38525: GO 38343
38527: POP
38528: POP
// end ;
38529: LD_VAR 0 3
38533: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38534: LD_INT 0
38536: PPUSH
// if not side or side > 8 then
38537: LD_VAR 0 3
38541: NOT
38542: IFTRUE 38554
38544: PUSH
38545: LD_VAR 0 3
38549: PUSH
38550: LD_INT 8
38552: GREATER
38553: OR
38554: IFFALSE 38558
// exit ;
38556: GO 38617
// if not range then
38558: LD_VAR 0 4
38562: NOT
38563: IFFALSE 38574
// range := - 12 ;
38565: LD_ADDR_VAR 0 4
38569: PUSH
38570: LD_INT 12
38572: NEG
38573: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38574: LD_VAR 0 1
38578: PPUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_VAR 0 3
38588: PPUSH
38589: LD_VAR 0 4
38593: PPUSH
38594: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_VAR 0 2
38607: PPUSH
38608: LD_VAR 0 3
38612: PPUSH
38613: CALL_OW 331
// end ;
38617: LD_VAR 0 5
38621: RET
// export function Video ( mode ) ; begin
38622: LD_INT 0
38624: PPUSH
// ingame_video = mode ;
38625: LD_ADDR_OWVAR 52
38629: PUSH
38630: LD_VAR 0 1
38634: ST_TO_ADDR
// interface_hidden = mode ;
38635: LD_ADDR_OWVAR 54
38639: PUSH
38640: LD_VAR 0 1
38644: ST_TO_ADDR
// end ;
38645: LD_VAR 0 2
38649: RET
// export function Join ( array , element ) ; begin
38650: LD_INT 0
38652: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_VAR 0 1
38662: PPUSH
38663: LD_VAR 0 1
38667: PUSH
38668: LD_INT 1
38670: PLUS
38671: PPUSH
38672: LD_VAR 0 2
38676: PPUSH
38677: CALL_OW 1
38681: ST_TO_ADDR
// end ;
38682: LD_VAR 0 3
38686: RET
// export function JoinUnion ( array , element ) ; begin
38687: LD_INT 0
38689: PPUSH
// result := array union element ;
38690: LD_ADDR_VAR 0 3
38694: PUSH
38695: LD_VAR 0 1
38699: PUSH
38700: LD_VAR 0 2
38704: UNION
38705: ST_TO_ADDR
// end ;
38706: LD_VAR 0 3
38710: RET
// export function GetBehemoths ( side ) ; begin
38711: LD_INT 0
38713: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38714: LD_ADDR_VAR 0 2
38718: PUSH
38719: LD_INT 22
38721: PUSH
38722: LD_VAR 0 1
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 31
38733: PUSH
38734: LD_INT 25
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PPUSH
38745: CALL_OW 69
38749: ST_TO_ADDR
// end ;
38750: LD_VAR 0 2
38754: RET
// export function Shuffle ( array ) ; var i , index ; begin
38755: LD_INT 0
38757: PPUSH
38758: PPUSH
38759: PPUSH
// result := [ ] ;
38760: LD_ADDR_VAR 0 2
38764: PUSH
38765: EMPTY
38766: ST_TO_ADDR
// if not array then
38767: LD_VAR 0 1
38771: NOT
38772: IFFALSE 38776
// exit ;
38774: GO 38875
// Randomize ;
38776: CALL_OW 10
// for i = array downto 1 do
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: DOUBLE
38786: LD_VAR 0 1
38790: INC
38791: ST_TO_ADDR
38792: LD_INT 1
38794: PUSH
38795: FOR_DOWNTO
38796: IFFALSE 38873
// begin index := rand ( 1 , array ) ;
38798: LD_ADDR_VAR 0 4
38802: PUSH
38803: LD_INT 1
38805: PPUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL_OW 12
38815: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38816: LD_ADDR_VAR 0 2
38820: PUSH
38821: LD_VAR 0 2
38825: PPUSH
38826: LD_VAR 0 2
38830: PUSH
38831: LD_INT 1
38833: PLUS
38834: PPUSH
38835: LD_VAR 0 1
38839: PUSH
38840: LD_VAR 0 4
38844: ARRAY
38845: PPUSH
38846: CALL_OW 2
38850: ST_TO_ADDR
// array := Delete ( array , index ) ;
38851: LD_ADDR_VAR 0 1
38855: PUSH
38856: LD_VAR 0 1
38860: PPUSH
38861: LD_VAR 0 4
38865: PPUSH
38866: CALL_OW 3
38870: ST_TO_ADDR
// end ;
38871: GO 38795
38873: POP
38874: POP
// end ;
38875: LD_VAR 0 2
38879: RET
// export function GetBaseMaterials ( base ) ; begin
38880: LD_INT 0
38882: PPUSH
// result := [ 0 , 0 , 0 ] ;
38883: LD_ADDR_VAR 0 2
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// if not base then
38902: LD_VAR 0 1
38906: NOT
38907: IFFALSE 38911
// exit ;
38909: GO 38960
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38911: LD_ADDR_VAR 0 2
38915: PUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: LD_INT 1
38923: PPUSH
38924: CALL_OW 275
38928: PUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: LD_INT 2
38936: PPUSH
38937: CALL_OW 275
38941: PUSH
38942: LD_VAR 0 1
38946: PPUSH
38947: LD_INT 3
38949: PPUSH
38950: CALL_OW 275
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: ST_TO_ADDR
// end ;
38960: LD_VAR 0 2
38964: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38965: LD_INT 0
38967: PPUSH
38968: PPUSH
// result := array ;
38969: LD_ADDR_VAR 0 3
38973: PUSH
38974: LD_VAR 0 1
38978: ST_TO_ADDR
// if size >= result then
38979: LD_VAR 0 2
38983: PUSH
38984: LD_VAR 0 3
38988: GREATEREQUAL
38989: IFFALSE 38993
// exit ;
38991: GO 39043
// if size then
38993: LD_VAR 0 2
38997: IFFALSE 39043
// for i := array downto size do
38999: LD_ADDR_VAR 0 4
39003: PUSH
39004: DOUBLE
39005: LD_VAR 0 1
39009: INC
39010: ST_TO_ADDR
39011: LD_VAR 0 2
39015: PUSH
39016: FOR_DOWNTO
39017: IFFALSE 39041
// result := Delete ( result , result ) ;
39019: LD_ADDR_VAR 0 3
39023: PUSH
39024: LD_VAR 0 3
39028: PPUSH
39029: LD_VAR 0 3
39033: PPUSH
39034: CALL_OW 3
39038: ST_TO_ADDR
39039: GO 39016
39041: POP
39042: POP
// end ;
39043: LD_VAR 0 3
39047: RET
// export function ComExit ( unit ) ; var tmp ; begin
39048: LD_INT 0
39050: PPUSH
39051: PPUSH
// if not IsInUnit ( unit ) then
39052: LD_VAR 0 1
39056: PPUSH
39057: CALL_OW 310
39061: NOT
39062: IFFALSE 39066
// exit ;
39064: GO 39126
// tmp := IsInUnit ( unit ) ;
39066: LD_ADDR_VAR 0 3
39070: PUSH
39071: LD_VAR 0 1
39075: PPUSH
39076: CALL_OW 310
39080: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39081: LD_VAR 0 3
39085: PPUSH
39086: CALL_OW 247
39090: PUSH
39091: LD_INT 2
39093: EQUAL
39094: IFFALSE 39107
// ComExitVehicle ( unit ) else
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 121
39105: GO 39116
// ComExitBuilding ( unit ) ;
39107: LD_VAR 0 1
39111: PPUSH
39112: CALL_OW 122
// result := tmp ;
39116: LD_ADDR_VAR 0 2
39120: PUSH
39121: LD_VAR 0 3
39125: ST_TO_ADDR
// end ;
39126: LD_VAR 0 2
39130: RET
// export function ComExitAll ( units ) ; var i ; begin
39131: LD_INT 0
39133: PPUSH
39134: PPUSH
// if not units then
39135: LD_VAR 0 1
39139: NOT
39140: IFFALSE 39144
// exit ;
39142: GO 39170
// for i in units do
39144: LD_ADDR_VAR 0 3
39148: PUSH
39149: LD_VAR 0 1
39153: PUSH
39154: FOR_IN
39155: IFFALSE 39168
// ComExit ( i ) ;
39157: LD_VAR 0 3
39161: PPUSH
39162: CALL 39048 0 1
39166: GO 39154
39168: POP
39169: POP
// end ;
39170: LD_VAR 0 2
39174: RET
// export function ResetHc ; begin
39175: LD_INT 0
39177: PPUSH
// InitHc ;
39178: CALL_OW 19
// hc_importance := 0 ;
39182: LD_ADDR_OWVAR 32
39186: PUSH
39187: LD_INT 0
39189: ST_TO_ADDR
// end ;
39190: LD_VAR 0 1
39194: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39195: LD_INT 0
39197: PPUSH
39198: PPUSH
39199: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39200: LD_ADDR_VAR 0 6
39204: PUSH
39205: LD_VAR 0 1
39209: PUSH
39210: LD_VAR 0 3
39214: PLUS
39215: PUSH
39216: LD_INT 2
39218: DIV
39219: ST_TO_ADDR
// if _x < 0 then
39220: LD_VAR 0 6
39224: PUSH
39225: LD_INT 0
39227: LESS
39228: IFFALSE 39245
// _x := _x * - 1 ;
39230: LD_ADDR_VAR 0 6
39234: PUSH
39235: LD_VAR 0 6
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: MUL
39244: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39245: LD_ADDR_VAR 0 7
39249: PUSH
39250: LD_VAR 0 2
39254: PUSH
39255: LD_VAR 0 4
39259: PLUS
39260: PUSH
39261: LD_INT 2
39263: DIV
39264: ST_TO_ADDR
// if _y < 0 then
39265: LD_VAR 0 7
39269: PUSH
39270: LD_INT 0
39272: LESS
39273: IFFALSE 39290
// _y := _y * - 1 ;
39275: LD_ADDR_VAR 0 7
39279: PUSH
39280: LD_VAR 0 7
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: MUL
39289: ST_TO_ADDR
// result := [ _x , _y ] ;
39290: LD_ADDR_VAR 0 5
39294: PUSH
39295: LD_VAR 0 6
39299: PUSH
39300: LD_VAR 0 7
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: ST_TO_ADDR
// end ;
39309: LD_VAR 0 5
39313: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39314: LD_INT 0
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
// task := GetTaskList ( unit ) ;
39320: LD_ADDR_VAR 0 7
39324: PUSH
39325: LD_VAR 0 1
39329: PPUSH
39330: CALL_OW 437
39334: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39335: LD_VAR 0 7
39339: NOT
39340: IFFALSE 39359
39342: PUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: LD_VAR 0 2
39352: PPUSH
39353: CALL_OW 308
39357: NOT
39358: AND
39359: IFFALSE 39363
// exit ;
39361: GO 39481
// if IsInArea ( unit , area ) then
39363: LD_VAR 0 1
39367: PPUSH
39368: LD_VAR 0 2
39372: PPUSH
39373: CALL_OW 308
39377: IFFALSE 39395
// begin ComMoveToArea ( unit , goAway ) ;
39379: LD_VAR 0 1
39383: PPUSH
39384: LD_VAR 0 3
39388: PPUSH
39389: CALL_OW 113
// exit ;
39393: GO 39481
// end ; if task [ 1 ] [ 1 ] <> M then
39395: LD_VAR 0 7
39399: PUSH
39400: LD_INT 1
39402: ARRAY
39403: PUSH
39404: LD_INT 1
39406: ARRAY
39407: PUSH
39408: LD_STRING M
39410: NONEQUAL
39411: IFFALSE 39415
// exit ;
39413: GO 39481
// x := task [ 1 ] [ 2 ] ;
39415: LD_ADDR_VAR 0 5
39419: PUSH
39420: LD_VAR 0 7
39424: PUSH
39425: LD_INT 1
39427: ARRAY
39428: PUSH
39429: LD_INT 2
39431: ARRAY
39432: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39433: LD_ADDR_VAR 0 6
39437: PUSH
39438: LD_VAR 0 7
39442: PUSH
39443: LD_INT 1
39445: ARRAY
39446: PUSH
39447: LD_INT 3
39449: ARRAY
39450: ST_TO_ADDR
// if InArea ( x , y , area ) then
39451: LD_VAR 0 5
39455: PPUSH
39456: LD_VAR 0 6
39460: PPUSH
39461: LD_VAR 0 2
39465: PPUSH
39466: CALL_OW 309
39470: IFFALSE 39481
// ComStop ( unit ) ;
39472: LD_VAR 0 1
39476: PPUSH
39477: CALL_OW 141
// end ;
39481: LD_VAR 0 4
39485: RET
// export function Abs ( value ) ; begin
39486: LD_INT 0
39488: PPUSH
// result := value ;
39489: LD_ADDR_VAR 0 2
39493: PUSH
39494: LD_VAR 0 1
39498: ST_TO_ADDR
// if value < 0 then
39499: LD_VAR 0 1
39503: PUSH
39504: LD_INT 0
39506: LESS
39507: IFFALSE 39524
// result := value * - 1 ;
39509: LD_ADDR_VAR 0 2
39513: PUSH
39514: LD_VAR 0 1
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: MUL
39523: ST_TO_ADDR
// end ;
39524: LD_VAR 0 2
39528: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39529: LD_INT 0
39531: PPUSH
39532: PPUSH
39533: PPUSH
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
// if not unit or not building then
39539: LD_VAR 0 1
39543: NOT
39544: IFTRUE 39553
39546: PUSH
39547: LD_VAR 0 2
39551: NOT
39552: OR
39553: IFFALSE 39557
// exit ;
39555: GO 39785
// x := GetX ( building ) ;
39557: LD_ADDR_VAR 0 4
39561: PUSH
39562: LD_VAR 0 2
39566: PPUSH
39567: CALL_OW 250
39571: ST_TO_ADDR
// y := GetY ( building ) ;
39572: LD_ADDR_VAR 0 6
39576: PUSH
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL_OW 251
39586: ST_TO_ADDR
// d := GetDir ( building ) ;
39587: LD_ADDR_VAR 0 8
39591: PUSH
39592: LD_VAR 0 2
39596: PPUSH
39597: CALL_OW 254
39601: ST_TO_ADDR
// r := 4 ;
39602: LD_ADDR_VAR 0 9
39606: PUSH
39607: LD_INT 4
39609: ST_TO_ADDR
// for i := 1 to 5 do
39610: LD_ADDR_VAR 0 10
39614: PUSH
39615: DOUBLE
39616: LD_INT 1
39618: DEC
39619: ST_TO_ADDR
39620: LD_INT 5
39622: PUSH
39623: FOR_TO
39624: IFFALSE 39783
// begin _x := ShiftX ( x , d , r + i ) ;
39626: LD_ADDR_VAR 0 5
39630: PUSH
39631: LD_VAR 0 4
39635: PPUSH
39636: LD_VAR 0 8
39640: PPUSH
39641: LD_VAR 0 9
39645: PUSH
39646: LD_VAR 0 10
39650: PLUS
39651: PPUSH
39652: CALL_OW 272
39656: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39657: LD_ADDR_VAR 0 7
39661: PUSH
39662: LD_VAR 0 6
39666: PPUSH
39667: LD_VAR 0 8
39671: PPUSH
39672: LD_VAR 0 9
39676: PUSH
39677: LD_VAR 0 10
39681: PLUS
39682: PPUSH
39683: CALL_OW 273
39687: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39688: LD_VAR 0 5
39692: PPUSH
39693: LD_VAR 0 7
39697: PPUSH
39698: CALL_OW 488
39702: IFFALSE 39737
39704: PUSH
39705: LD_VAR 0 5
39709: PPUSH
39710: LD_VAR 0 7
39714: PPUSH
39715: CALL_OW 428
39719: PPUSH
39720: CALL_OW 247
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: IN
39735: NOT
39736: AND
39737: IFFALSE 39781
// begin ComMoveXY ( unit , _x , _y ) ;
39739: LD_VAR 0 1
39743: PPUSH
39744: LD_VAR 0 5
39748: PPUSH
39749: LD_VAR 0 7
39753: PPUSH
39754: CALL_OW 111
// result := [ _x , _y ] ;
39758: LD_ADDR_VAR 0 3
39762: PUSH
39763: LD_VAR 0 5
39767: PUSH
39768: LD_VAR 0 7
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// exit ;
39777: POP
39778: POP
39779: GO 39785
// end ; end ;
39781: GO 39623
39783: POP
39784: POP
// end ;
39785: LD_VAR 0 3
39789: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39790: LD_INT 0
39792: PPUSH
39793: PPUSH
39794: PPUSH
// result := 0 ;
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_INT 0
39802: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39803: LD_VAR 0 1
39807: PUSH
39808: LD_INT 0
39810: LESS
39811: IFTRUE 39823
39813: PUSH
39814: LD_VAR 0 1
39818: PUSH
39819: LD_INT 8
39821: GREATER
39822: OR
39823: IFTRUE 39835
39825: PUSH
39826: LD_VAR 0 2
39830: PUSH
39831: LD_INT 0
39833: LESS
39834: OR
39835: IFTRUE 39847
39837: PUSH
39838: LD_VAR 0 2
39842: PUSH
39843: LD_INT 8
39845: GREATER
39846: OR
39847: IFFALSE 39851
// exit ;
39849: GO 39926
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39851: LD_ADDR_VAR 0 4
39855: PUSH
39856: LD_INT 22
39858: PUSH
39859: LD_VAR 0 2
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PPUSH
39868: CALL_OW 69
39872: PUSH
39873: FOR_IN
39874: IFFALSE 39924
// begin un := UnitShoot ( i ) ;
39876: LD_ADDR_VAR 0 5
39880: PUSH
39881: LD_VAR 0 4
39885: PPUSH
39886: CALL_OW 504
39890: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39891: LD_VAR 0 5
39895: PPUSH
39896: CALL_OW 255
39900: PUSH
39901: LD_VAR 0 1
39905: EQUAL
39906: IFFALSE 39922
// begin result := un ;
39908: LD_ADDR_VAR 0 3
39912: PUSH
39913: LD_VAR 0 5
39917: ST_TO_ADDR
// exit ;
39918: POP
39919: POP
39920: GO 39926
// end ; end ;
39922: GO 39873
39924: POP
39925: POP
// end ;
39926: LD_VAR 0 3
39930: RET
// export function GetCargoBay ( units ) ; begin
39931: LD_INT 0
39933: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39934: LD_ADDR_VAR 0 2
39938: PUSH
39939: LD_VAR 0 1
39943: PPUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 34
39949: PUSH
39950: LD_INT 12
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 34
39959: PUSH
39960: LD_INT 51
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 34
39969: PUSH
39970: LD_INT 32
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 34
39979: PUSH
39980: LD_INT 89
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: PPUSH
39994: CALL_OW 72
39998: ST_TO_ADDR
// end ;
39999: LD_VAR 0 2
40003: RET
// export function Negate ( value ) ; begin
40004: LD_INT 0
40006: PPUSH
// result := not value ;
40007: LD_ADDR_VAR 0 2
40011: PUSH
40012: LD_VAR 0 1
40016: NOT
40017: ST_TO_ADDR
// end ;
40018: LD_VAR 0 2
40022: RET
// export function Inc ( value ) ; begin
40023: LD_INT 0
40025: PPUSH
// result := value + 1 ;
40026: LD_ADDR_VAR 0 2
40030: PUSH
40031: LD_VAR 0 1
40035: PUSH
40036: LD_INT 1
40038: PLUS
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 2
40044: RET
// export function Dec ( value ) ; begin
40045: LD_INT 0
40047: PPUSH
// result := value - 1 ;
40048: LD_ADDR_VAR 0 2
40052: PUSH
40053: LD_VAR 0 1
40057: PUSH
40058: LD_INT 1
40060: MINUS
40061: ST_TO_ADDR
// end ;
40062: LD_VAR 0 2
40066: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40067: LD_INT 0
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40077: LD_VAR 0 1
40081: PPUSH
40082: LD_VAR 0 2
40086: PPUSH
40087: CALL_OW 488
40091: NOT
40092: IFTRUE 40111
40094: PUSH
40095: LD_VAR 0 3
40099: PPUSH
40100: LD_VAR 0 4
40104: PPUSH
40105: CALL_OW 488
40109: NOT
40110: OR
40111: IFFALSE 40124
// begin result := - 1 ;
40113: LD_ADDR_VAR 0 5
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: ST_TO_ADDR
// exit ;
40122: GO 40359
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40124: LD_ADDR_VAR 0 12
40128: PUSH
40129: LD_VAR 0 1
40133: PPUSH
40134: LD_VAR 0 2
40138: PPUSH
40139: LD_VAR 0 3
40143: PPUSH
40144: LD_VAR 0 4
40148: PPUSH
40149: CALL 39195 0 4
40153: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40154: LD_ADDR_VAR 0 11
40158: PUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: LD_VAR 0 2
40168: PPUSH
40169: LD_VAR 0 12
40173: PUSH
40174: LD_INT 1
40176: ARRAY
40177: PPUSH
40178: LD_VAR 0 12
40182: PUSH
40183: LD_INT 2
40185: ARRAY
40186: PPUSH
40187: CALL_OW 298
40191: ST_TO_ADDR
// distance := 9999 ;
40192: LD_ADDR_VAR 0 10
40196: PUSH
40197: LD_INT 9999
40199: ST_TO_ADDR
// for i := 0 to 5 do
40200: LD_ADDR_VAR 0 6
40204: PUSH
40205: DOUBLE
40206: LD_INT 0
40208: DEC
40209: ST_TO_ADDR
40210: LD_INT 5
40212: PUSH
40213: FOR_TO
40214: IFFALSE 40357
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40216: LD_ADDR_VAR 0 7
40220: PUSH
40221: LD_VAR 0 1
40225: PPUSH
40226: LD_VAR 0 6
40230: PPUSH
40231: LD_VAR 0 11
40235: PPUSH
40236: CALL_OW 272
40240: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40241: LD_ADDR_VAR 0 8
40245: PUSH
40246: LD_VAR 0 2
40250: PPUSH
40251: LD_VAR 0 6
40255: PPUSH
40256: LD_VAR 0 11
40260: PPUSH
40261: CALL_OW 273
40265: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40266: LD_VAR 0 7
40270: PPUSH
40271: LD_VAR 0 8
40275: PPUSH
40276: CALL_OW 488
40280: NOT
40281: IFFALSE 40285
// continue ;
40283: GO 40213
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40285: LD_ADDR_VAR 0 9
40289: PUSH
40290: LD_VAR 0 12
40294: PUSH
40295: LD_INT 1
40297: ARRAY
40298: PPUSH
40299: LD_VAR 0 12
40303: PUSH
40304: LD_INT 2
40306: ARRAY
40307: PPUSH
40308: LD_VAR 0 7
40312: PPUSH
40313: LD_VAR 0 8
40317: PPUSH
40318: CALL_OW 298
40322: ST_TO_ADDR
// if tmp < distance then
40323: LD_VAR 0 9
40327: PUSH
40328: LD_VAR 0 10
40332: LESS
40333: IFFALSE 40355
// begin result := i ;
40335: LD_ADDR_VAR 0 5
40339: PUSH
40340: LD_VAR 0 6
40344: ST_TO_ADDR
// distance := tmp ;
40345: LD_ADDR_VAR 0 10
40349: PUSH
40350: LD_VAR 0 9
40354: ST_TO_ADDR
// end ; end ;
40355: GO 40213
40357: POP
40358: POP
// end ;
40359: LD_VAR 0 5
40363: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40364: LD_INT 0
40366: PPUSH
40367: PPUSH
// if not driver or not IsInUnit ( driver ) then
40368: LD_VAR 0 1
40372: NOT
40373: IFTRUE 40387
40375: PUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 310
40385: NOT
40386: OR
40387: IFFALSE 40391
// exit ;
40389: GO 40481
// vehicle := IsInUnit ( driver ) ;
40391: LD_ADDR_VAR 0 3
40395: PUSH
40396: LD_VAR 0 1
40400: PPUSH
40401: CALL_OW 310
40405: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40406: LD_VAR 0 1
40410: PPUSH
40411: LD_STRING \
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: PUSH
40441: LD_STRING E
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_VAR 0 3
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PPUSH
40477: CALL_OW 446
// end ;
40481: LD_VAR 0 2
40485: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40486: LD_INT 0
40488: PPUSH
40489: PPUSH
// if not driver or not IsInUnit ( driver ) then
40490: LD_VAR 0 1
40494: NOT
40495: IFTRUE 40509
40497: PUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 310
40507: NOT
40508: OR
40509: IFFALSE 40513
// exit ;
40511: GO 40603
// vehicle := IsInUnit ( driver ) ;
40513: LD_ADDR_VAR 0 3
40517: PUSH
40518: LD_VAR 0 1
40522: PPUSH
40523: CALL_OW 310
40527: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40528: LD_VAR 0 1
40532: PPUSH
40533: LD_STRING \
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: PUSH
40563: LD_STRING E
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_VAR 0 3
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PPUSH
40599: CALL_OW 447
// end ;
40603: LD_VAR 0 2
40607: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40608: LD_INT 0
40610: PPUSH
40611: PPUSH
40612: PPUSH
// tmp := [ ] ;
40613: LD_ADDR_VAR 0 5
40617: PUSH
40618: EMPTY
40619: ST_TO_ADDR
// for i in units do
40620: LD_ADDR_VAR 0 4
40624: PUSH
40625: LD_VAR 0 1
40629: PUSH
40630: FOR_IN
40631: IFFALSE 40669
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40633: LD_ADDR_VAR 0 5
40637: PUSH
40638: LD_VAR 0 5
40642: PPUSH
40643: LD_VAR 0 5
40647: PUSH
40648: LD_INT 1
40650: PLUS
40651: PPUSH
40652: LD_VAR 0 4
40656: PPUSH
40657: CALL_OW 256
40661: PPUSH
40662: CALL_OW 2
40666: ST_TO_ADDR
40667: GO 40630
40669: POP
40670: POP
// if not tmp then
40671: LD_VAR 0 5
40675: NOT
40676: IFFALSE 40680
// exit ;
40678: GO 40728
// if asc then
40680: LD_VAR 0 2
40684: IFFALSE 40708
// result := SortListByListAsc ( units , tmp ) else
40686: LD_ADDR_VAR 0 3
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: LD_VAR 0 5
40700: PPUSH
40701: CALL_OW 76
40705: ST_TO_ADDR
40706: GO 40728
// result := SortListByListDesc ( units , tmp ) ;
40708: LD_ADDR_VAR 0 3
40712: PUSH
40713: LD_VAR 0 1
40717: PPUSH
40718: LD_VAR 0 5
40722: PPUSH
40723: CALL_OW 77
40727: ST_TO_ADDR
// end ;
40728: LD_VAR 0 3
40732: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40733: LD_INT 0
40735: PPUSH
40736: PPUSH
// task := GetTaskList ( mech ) ;
40737: LD_ADDR_VAR 0 4
40741: PUSH
40742: LD_VAR 0 1
40746: PPUSH
40747: CALL_OW 437
40751: ST_TO_ADDR
// if not task then
40752: LD_VAR 0 4
40756: NOT
40757: IFFALSE 40761
// exit ;
40759: GO 40805
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40761: LD_ADDR_VAR 0 3
40765: PUSH
40766: LD_VAR 0 4
40770: PUSH
40771: LD_INT 1
40773: ARRAY
40774: PUSH
40775: LD_INT 1
40777: ARRAY
40778: PUSH
40779: LD_STRING r
40781: EQUAL
40782: IFFALSE 40804
40784: PUSH
40785: LD_VAR 0 4
40789: PUSH
40790: LD_INT 1
40792: ARRAY
40793: PUSH
40794: LD_INT 4
40796: ARRAY
40797: PUSH
40798: LD_VAR 0 2
40802: EQUAL
40803: AND
40804: ST_TO_ADDR
// end ;
40805: LD_VAR 0 3
40809: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40810: LD_INT 0
40812: PPUSH
// SetDir ( unit , d ) ;
40813: LD_VAR 0 1
40817: PPUSH
40818: LD_VAR 0 4
40822: PPUSH
40823: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40827: LD_ADDR_VAR 0 6
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: LD_VAR 0 2
40841: PPUSH
40842: LD_VAR 0 3
40846: PPUSH
40847: LD_VAR 0 5
40851: PPUSH
40852: CALL_OW 48
40856: ST_TO_ADDR
// end ;
40857: LD_VAR 0 6
40861: RET
// export function ToNaturalNumber ( number ) ; begin
40862: LD_INT 0
40864: PPUSH
// result := number div 1 ;
40865: LD_ADDR_VAR 0 2
40869: PUSH
40870: LD_VAR 0 1
40874: PUSH
40875: LD_INT 1
40877: DIV
40878: ST_TO_ADDR
// if number < 0 then
40879: LD_VAR 0 1
40883: PUSH
40884: LD_INT 0
40886: LESS
40887: IFFALSE 40897
// result := 0 ;
40889: LD_ADDR_VAR 0 2
40893: PUSH
40894: LD_INT 0
40896: ST_TO_ADDR
// end ;
40897: LD_VAR 0 2
40901: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40902: LD_INT 0
40904: PPUSH
40905: PPUSH
40906: PPUSH
// if not buildings then
40907: LD_VAR 0 1
40911: NOT
40912: IFFALSE 40916
// exit ;
40914: GO 41031
// tmp := [ ] ;
40916: LD_ADDR_VAR 0 5
40920: PUSH
40921: EMPTY
40922: ST_TO_ADDR
// for b in buildings do
40923: LD_ADDR_VAR 0 4
40927: PUSH
40928: LD_VAR 0 1
40932: PUSH
40933: FOR_IN
40934: IFFALSE 40972
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
40936: LD_ADDR_VAR 0 5
40940: PUSH
40941: LD_VAR 0 5
40945: PPUSH
40946: LD_VAR 0 5
40950: PUSH
40951: LD_INT 1
40953: PLUS
40954: PPUSH
40955: LD_VAR 0 4
40959: PPUSH
40960: CALL_OW 266
40964: PPUSH
40965: CALL_OW 1
40969: ST_TO_ADDR
40970: GO 40933
40972: POP
40973: POP
// if not tmp then
40974: LD_VAR 0 5
40978: NOT
40979: IFFALSE 40983
// exit ;
40981: GO 41031
// if asc then
40983: LD_VAR 0 2
40987: IFFALSE 41011
// result := SortListByListAsc ( buildings , tmp ) else
40989: LD_ADDR_VAR 0 3
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: LD_VAR 0 5
41003: PPUSH
41004: CALL_OW 76
41008: ST_TO_ADDR
41009: GO 41031
// result := SortListByListDesc ( buildings , tmp ) ;
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: LD_VAR 0 5
41025: PPUSH
41026: CALL_OW 77
41030: ST_TO_ADDR
// end ;
41031: LD_VAR 0 3
41035: RET
// export function SortByClass ( units , class ) ; var un ; begin
41036: LD_INT 0
41038: PPUSH
41039: PPUSH
// if not units or not class then
41040: LD_VAR 0 1
41044: NOT
41045: IFTRUE 41054
41047: PUSH
41048: LD_VAR 0 2
41052: NOT
41053: OR
41054: IFFALSE 41058
// exit ;
41056: GO 41153
// result := [ ] ;
41058: LD_ADDR_VAR 0 3
41062: PUSH
41063: EMPTY
41064: ST_TO_ADDR
// for un in units do
41065: LD_ADDR_VAR 0 4
41069: PUSH
41070: LD_VAR 0 1
41074: PUSH
41075: FOR_IN
41076: IFFALSE 41151
// if GetClass ( un ) = class then
41078: LD_VAR 0 4
41082: PPUSH
41083: CALL_OW 257
41087: PUSH
41088: LD_VAR 0 2
41092: EQUAL
41093: IFFALSE 41120
// result := Insert ( result , 1 , un ) else
41095: LD_ADDR_VAR 0 3
41099: PUSH
41100: LD_VAR 0 3
41104: PPUSH
41105: LD_INT 1
41107: PPUSH
41108: LD_VAR 0 4
41112: PPUSH
41113: CALL_OW 2
41117: ST_TO_ADDR
41118: GO 41149
// result := Replace ( result , result + 1 , un ) ;
41120: LD_ADDR_VAR 0 3
41124: PUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 3
41134: PUSH
41135: LD_INT 1
41137: PLUS
41138: PPUSH
41139: LD_VAR 0 4
41143: PPUSH
41144: CALL_OW 1
41148: ST_TO_ADDR
41149: GO 41075
41151: POP
41152: POP
// end ;
41153: LD_VAR 0 3
41157: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41158: LD_INT 0
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
41164: PPUSH
41165: PPUSH
41166: PPUSH
// result := [ ] ;
41167: LD_ADDR_VAR 0 4
41171: PUSH
41172: EMPTY
41173: ST_TO_ADDR
// if x - r < 0 then
41174: LD_VAR 0 1
41178: PUSH
41179: LD_VAR 0 3
41183: MINUS
41184: PUSH
41185: LD_INT 0
41187: LESS
41188: IFFALSE 41200
// min_x := 0 else
41190: LD_ADDR_VAR 0 8
41194: PUSH
41195: LD_INT 0
41197: ST_TO_ADDR
41198: GO 41216
// min_x := x - r ;
41200: LD_ADDR_VAR 0 8
41204: PUSH
41205: LD_VAR 0 1
41209: PUSH
41210: LD_VAR 0 3
41214: MINUS
41215: ST_TO_ADDR
// if y - r < 0 then
41216: LD_VAR 0 2
41220: PUSH
41221: LD_VAR 0 3
41225: MINUS
41226: PUSH
41227: LD_INT 0
41229: LESS
41230: IFFALSE 41242
// min_y := 0 else
41232: LD_ADDR_VAR 0 7
41236: PUSH
41237: LD_INT 0
41239: ST_TO_ADDR
41240: GO 41258
// min_y := y - r ;
41242: LD_ADDR_VAR 0 7
41246: PUSH
41247: LD_VAR 0 2
41251: PUSH
41252: LD_VAR 0 3
41256: MINUS
41257: ST_TO_ADDR
// max_x := x + r ;
41258: LD_ADDR_VAR 0 9
41262: PUSH
41263: LD_VAR 0 1
41267: PUSH
41268: LD_VAR 0 3
41272: PLUS
41273: ST_TO_ADDR
// max_y := y + r ;
41274: LD_ADDR_VAR 0 10
41278: PUSH
41279: LD_VAR 0 2
41283: PUSH
41284: LD_VAR 0 3
41288: PLUS
41289: ST_TO_ADDR
// for _x = min_x to max_x do
41290: LD_ADDR_VAR 0 5
41294: PUSH
41295: DOUBLE
41296: LD_VAR 0 8
41300: DEC
41301: ST_TO_ADDR
41302: LD_VAR 0 9
41306: PUSH
41307: FOR_TO
41308: IFFALSE 41409
// for _y = min_y to max_y do
41310: LD_ADDR_VAR 0 6
41314: PUSH
41315: DOUBLE
41316: LD_VAR 0 7
41320: DEC
41321: ST_TO_ADDR
41322: LD_VAR 0 10
41326: PUSH
41327: FOR_TO
41328: IFFALSE 41405
// begin if not ValidHex ( _x , _y ) then
41330: LD_VAR 0 5
41334: PPUSH
41335: LD_VAR 0 6
41339: PPUSH
41340: CALL_OW 488
41344: NOT
41345: IFFALSE 41349
// continue ;
41347: GO 41327
// if GetResourceTypeXY ( _x , _y ) then
41349: LD_VAR 0 5
41353: PPUSH
41354: LD_VAR 0 6
41358: PPUSH
41359: CALL_OW 283
41363: IFFALSE 41403
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41365: LD_ADDR_VAR 0 4
41369: PUSH
41370: LD_VAR 0 4
41374: PPUSH
41375: LD_VAR 0 4
41379: PUSH
41380: LD_INT 1
41382: PLUS
41383: PPUSH
41384: LD_VAR 0 5
41388: PUSH
41389: LD_VAR 0 6
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PPUSH
41398: CALL_OW 1
41402: ST_TO_ADDR
// end ;
41403: GO 41327
41405: POP
41406: POP
41407: GO 41307
41409: POP
41410: POP
// end ;
41411: LD_VAR 0 4
41415: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41416: LD_INT 0
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
41425: PPUSH
// if not units then
41426: LD_VAR 0 1
41430: NOT
41431: IFFALSE 41435
// exit ;
41433: GO 41967
// result := UnitFilter ( units , [ f_ok ] ) ;
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: LD_INT 50
41447: PUSH
41448: EMPTY
41449: LIST
41450: PPUSH
41451: CALL_OW 72
41455: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41456: LD_ADDR_VAR 0 8
41460: PUSH
41461: LD_VAR 0 1
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: PPUSH
41470: CALL_OW 255
41474: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41475: LD_ADDR_VAR 0 10
41479: PUSH
41480: LD_INT 29
41482: PUSH
41483: LD_INT 91
41485: PUSH
41486: LD_INT 49
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: LIST
41493: ST_TO_ADDR
// if not result then
41494: LD_VAR 0 3
41498: NOT
41499: IFFALSE 41503
// exit ;
41501: GO 41967
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41503: LD_ADDR_VAR 0 5
41507: PUSH
41508: LD_INT 81
41510: PUSH
41511: LD_VAR 0 8
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PPUSH
41520: CALL_OW 69
41524: ST_TO_ADDR
// for i in result do
41525: LD_ADDR_VAR 0 4
41529: PUSH
41530: LD_VAR 0 3
41534: PUSH
41535: FOR_IN
41536: IFFALSE 41965
// begin tag := GetTag ( i ) + 1 ;
41538: LD_ADDR_VAR 0 9
41542: PUSH
41543: LD_VAR 0 4
41547: PPUSH
41548: CALL_OW 110
41552: PUSH
41553: LD_INT 1
41555: PLUS
41556: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41557: LD_ADDR_VAR 0 7
41561: PUSH
41562: LD_VAR 0 4
41566: PPUSH
41567: CALL_OW 250
41571: PPUSH
41572: LD_VAR 0 4
41576: PPUSH
41577: CALL_OW 251
41581: PPUSH
41582: LD_INT 4
41584: PPUSH
41585: CALL 41158 0 3
41589: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41590: LD_VAR 0 4
41594: PPUSH
41595: CALL_OW 247
41599: PUSH
41600: LD_INT 2
41602: EQUAL
41603: IFFALSE 41615
41605: PUSH
41606: LD_VAR 0 7
41610: PUSH
41611: LD_INT 2
41613: GREATER
41614: AND
41615: IFFALSE 41635
41617: PUSH
41618: LD_VAR 0 4
41622: PPUSH
41623: CALL_OW 264
41627: PUSH
41628: LD_VAR 0 10
41632: IN
41633: NOT
41634: AND
41635: IFFALSE 41674
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41637: LD_VAR 0 4
41641: PPUSH
41642: LD_VAR 0 7
41646: PUSH
41647: LD_INT 1
41649: ARRAY
41650: PUSH
41651: LD_INT 1
41653: ARRAY
41654: PPUSH
41655: LD_VAR 0 7
41659: PUSH
41660: LD_INT 1
41662: ARRAY
41663: PUSH
41664: LD_INT 2
41666: ARRAY
41667: PPUSH
41668: CALL_OW 116
41672: GO 41963
// if path > tag then
41674: LD_VAR 0 2
41678: PUSH
41679: LD_VAR 0 9
41683: GREATER
41684: IFFALSE 41892
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41686: LD_ADDR_VAR 0 6
41690: PUSH
41691: LD_VAR 0 5
41695: PPUSH
41696: LD_INT 91
41698: PUSH
41699: LD_VAR 0 4
41703: PUSH
41704: LD_INT 8
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: PPUSH
41712: CALL_OW 72
41716: ST_TO_ADDR
// if nearEnemy then
41717: LD_VAR 0 6
41721: IFFALSE 41790
// begin if GetWeapon ( i ) = ru_time_lapser then
41723: LD_VAR 0 4
41727: PPUSH
41728: CALL_OW 264
41732: PUSH
41733: LD_INT 49
41735: EQUAL
41736: IFFALSE 41764
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41738: LD_VAR 0 4
41742: PPUSH
41743: LD_VAR 0 6
41747: PPUSH
41748: LD_VAR 0 4
41752: PPUSH
41753: CALL_OW 74
41757: PPUSH
41758: CALL_OW 112
41762: GO 41788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41764: LD_VAR 0 4
41768: PPUSH
41769: LD_VAR 0 6
41773: PPUSH
41774: LD_VAR 0 4
41778: PPUSH
41779: CALL_OW 74
41783: PPUSH
41784: CALL 43048 0 2
// end else
41788: GO 41890
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41790: LD_VAR 0 4
41794: PPUSH
41795: LD_VAR 0 2
41799: PUSH
41800: LD_VAR 0 9
41804: ARRAY
41805: PUSH
41806: LD_INT 1
41808: ARRAY
41809: PPUSH
41810: LD_VAR 0 2
41814: PUSH
41815: LD_VAR 0 9
41819: ARRAY
41820: PUSH
41821: LD_INT 2
41823: ARRAY
41824: PPUSH
41825: CALL_OW 297
41829: PUSH
41830: LD_INT 6
41832: GREATER
41833: IFFALSE 41876
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41835: LD_VAR 0 4
41839: PPUSH
41840: LD_VAR 0 2
41844: PUSH
41845: LD_VAR 0 9
41849: ARRAY
41850: PUSH
41851: LD_INT 1
41853: ARRAY
41854: PPUSH
41855: LD_VAR 0 2
41859: PUSH
41860: LD_VAR 0 9
41864: ARRAY
41865: PUSH
41866: LD_INT 2
41868: ARRAY
41869: PPUSH
41870: CALL_OW 114
41874: GO 41890
// SetTag ( i , tag ) ;
41876: LD_VAR 0 4
41880: PPUSH
41881: LD_VAR 0 9
41885: PPUSH
41886: CALL_OW 109
// end else
41890: GO 41963
// if enemy then
41892: LD_VAR 0 5
41896: IFFALSE 41963
// begin if GetWeapon ( i ) = ru_time_lapser then
41898: LD_VAR 0 4
41902: PPUSH
41903: CALL_OW 264
41907: PUSH
41908: LD_INT 49
41910: EQUAL
41911: IFFALSE 41939
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41913: LD_VAR 0 4
41917: PPUSH
41918: LD_VAR 0 5
41922: PPUSH
41923: LD_VAR 0 4
41927: PPUSH
41928: CALL_OW 74
41932: PPUSH
41933: CALL_OW 112
41937: GO 41963
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41939: LD_VAR 0 4
41943: PPUSH
41944: LD_VAR 0 5
41948: PPUSH
41949: LD_VAR 0 4
41953: PPUSH
41954: CALL_OW 74
41958: PPUSH
41959: CALL 43048 0 2
// end ; end ;
41963: GO 41535
41965: POP
41966: POP
// end ;
41967: LD_VAR 0 3
41971: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41972: LD_INT 0
41974: PPUSH
41975: PPUSH
41976: PPUSH
// if not unit or IsInUnit ( unit ) then
41977: LD_VAR 0 1
41981: NOT
41982: IFTRUE 41995
41984: PUSH
41985: LD_VAR 0 1
41989: PPUSH
41990: CALL_OW 310
41994: OR
41995: IFFALSE 41999
// exit ;
41997: GO 42090
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41999: LD_ADDR_VAR 0 4
42003: PUSH
42004: LD_VAR 0 1
42008: PPUSH
42009: CALL_OW 250
42013: PPUSH
42014: LD_VAR 0 2
42018: PPUSH
42019: LD_INT 1
42021: PPUSH
42022: CALL_OW 272
42026: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42027: LD_ADDR_VAR 0 5
42031: PUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 251
42041: PPUSH
42042: LD_VAR 0 2
42046: PPUSH
42047: LD_INT 1
42049: PPUSH
42050: CALL_OW 273
42054: ST_TO_ADDR
// if ValidHex ( x , y ) then
42055: LD_VAR 0 4
42059: PPUSH
42060: LD_VAR 0 5
42064: PPUSH
42065: CALL_OW 488
42069: IFFALSE 42090
// ComTurnXY ( unit , x , y ) ;
42071: LD_VAR 0 1
42075: PPUSH
42076: LD_VAR 0 4
42080: PPUSH
42081: LD_VAR 0 5
42085: PPUSH
42086: CALL_OW 118
// end ;
42090: LD_VAR 0 3
42094: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42095: LD_INT 0
42097: PPUSH
42098: PPUSH
// result := false ;
42099: LD_ADDR_VAR 0 3
42103: PUSH
42104: LD_INT 0
42106: ST_TO_ADDR
// if not units then
42107: LD_VAR 0 2
42111: NOT
42112: IFFALSE 42116
// exit ;
42114: GO 42161
// for i in units do
42116: LD_ADDR_VAR 0 4
42120: PUSH
42121: LD_VAR 0 2
42125: PUSH
42126: FOR_IN
42127: IFFALSE 42159
// if See ( side , i ) then
42129: LD_VAR 0 1
42133: PPUSH
42134: LD_VAR 0 4
42138: PPUSH
42139: CALL_OW 292
42143: IFFALSE 42157
// begin result := true ;
42145: LD_ADDR_VAR 0 3
42149: PUSH
42150: LD_INT 1
42152: ST_TO_ADDR
// exit ;
42153: POP
42154: POP
42155: GO 42161
// end ;
42157: GO 42126
42159: POP
42160: POP
// end ;
42161: LD_VAR 0 3
42165: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42166: LD_INT 0
42168: PPUSH
42169: PPUSH
42170: PPUSH
42171: PPUSH
// if not unit or not points then
42172: LD_VAR 0 1
42176: NOT
42177: IFTRUE 42186
42179: PUSH
42180: LD_VAR 0 2
42184: NOT
42185: OR
42186: IFFALSE 42190
// exit ;
42188: GO 42280
// dist := 99999 ;
42190: LD_ADDR_VAR 0 5
42194: PUSH
42195: LD_INT 99999
42197: ST_TO_ADDR
// for i in points do
42198: LD_ADDR_VAR 0 4
42202: PUSH
42203: LD_VAR 0 2
42207: PUSH
42208: FOR_IN
42209: IFFALSE 42278
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42211: LD_ADDR_VAR 0 6
42215: PUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: LD_VAR 0 4
42225: PUSH
42226: LD_INT 1
42228: ARRAY
42229: PPUSH
42230: LD_VAR 0 4
42234: PUSH
42235: LD_INT 2
42237: ARRAY
42238: PPUSH
42239: CALL_OW 297
42243: ST_TO_ADDR
// if tmpDist < dist then
42244: LD_VAR 0 6
42248: PUSH
42249: LD_VAR 0 5
42253: LESS
42254: IFFALSE 42276
// begin result := i ;
42256: LD_ADDR_VAR 0 3
42260: PUSH
42261: LD_VAR 0 4
42265: ST_TO_ADDR
// dist := tmpDist ;
42266: LD_ADDR_VAR 0 5
42270: PUSH
42271: LD_VAR 0 6
42275: ST_TO_ADDR
// end ; end ;
42276: GO 42208
42278: POP
42279: POP
// end ;
42280: LD_VAR 0 3
42284: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42285: LD_INT 0
42287: PPUSH
// uc_side := side ;
42288: LD_ADDR_OWVAR 20
42292: PUSH
42293: LD_VAR 0 1
42297: ST_TO_ADDR
// uc_nation := 3 ;
42298: LD_ADDR_OWVAR 21
42302: PUSH
42303: LD_INT 3
42305: ST_TO_ADDR
// vc_chassis := 25 ;
42306: LD_ADDR_OWVAR 37
42310: PUSH
42311: LD_INT 25
42313: ST_TO_ADDR
// vc_engine := engine_siberite ;
42314: LD_ADDR_OWVAR 39
42318: PUSH
42319: LD_INT 3
42321: ST_TO_ADDR
// vc_control := control_computer ;
42322: LD_ADDR_OWVAR 38
42326: PUSH
42327: LD_INT 3
42329: ST_TO_ADDR
// vc_weapon := 59 ;
42330: LD_ADDR_OWVAR 40
42334: PUSH
42335: LD_INT 59
42337: ST_TO_ADDR
// result := CreateVehicle ;
42338: LD_ADDR_VAR 0 5
42342: PUSH
42343: CALL_OW 45
42347: ST_TO_ADDR
// SetDir ( result , d ) ;
42348: LD_VAR 0 5
42352: PPUSH
42353: LD_VAR 0 4
42357: PPUSH
42358: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42362: LD_VAR 0 5
42366: PPUSH
42367: LD_VAR 0 2
42371: PPUSH
42372: LD_VAR 0 3
42376: PPUSH
42377: LD_INT 0
42379: PPUSH
42380: CALL_OW 48
// end ;
42384: LD_VAR 0 5
42388: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42389: LD_INT 0
42391: PPUSH
42392: PPUSH
42393: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42394: LD_ADDR_VAR 0 2
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42417: LD_VAR 0 1
42421: NOT
42422: IFTRUE 42455
42424: PUSH
42425: LD_VAR 0 1
42429: PPUSH
42430: CALL_OW 264
42434: PUSH
42435: LD_INT 12
42437: PUSH
42438: LD_INT 51
42440: PUSH
42441: LD_INT 32
42443: PUSH
42444: LD_INT 89
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: IN
42453: NOT
42454: OR
42455: IFFALSE 42459
// exit ;
42457: GO 42557
// for i := 1 to 3 do
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: DOUBLE
42465: LD_INT 1
42467: DEC
42468: ST_TO_ADDR
42469: LD_INT 3
42471: PUSH
42472: FOR_TO
42473: IFFALSE 42555
// begin tmp := GetCargo ( cargo , i ) ;
42475: LD_ADDR_VAR 0 4
42479: PUSH
42480: LD_VAR 0 1
42484: PPUSH
42485: LD_VAR 0 3
42489: PPUSH
42490: CALL_OW 289
42494: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42495: LD_ADDR_VAR 0 2
42499: PUSH
42500: LD_VAR 0 2
42504: PPUSH
42505: LD_VAR 0 3
42509: PPUSH
42510: LD_VAR 0 4
42514: PPUSH
42515: CALL_OW 1
42519: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42520: LD_ADDR_VAR 0 2
42524: PUSH
42525: LD_VAR 0 2
42529: PPUSH
42530: LD_INT 4
42532: PPUSH
42533: LD_VAR 0 2
42537: PUSH
42538: LD_INT 4
42540: ARRAY
42541: PUSH
42542: LD_VAR 0 4
42546: PLUS
42547: PPUSH
42548: CALL_OW 1
42552: ST_TO_ADDR
// end ;
42553: GO 42472
42555: POP
42556: POP
// end ;
42557: LD_VAR 0 2
42561: RET
// export function Length ( array ) ; begin
42562: LD_INT 0
42564: PPUSH
// result := array + 0 ;
42565: LD_ADDR_VAR 0 2
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: LD_INT 0
42577: PLUS
42578: ST_TO_ADDR
// end ;
42579: LD_VAR 0 2
42583: RET
// export function PrepareArray ( array ) ; begin
42584: LD_INT 0
42586: PPUSH
// result := array diff 0 ;
42587: LD_ADDR_VAR 0 2
42591: PUSH
42592: LD_VAR 0 1
42596: PUSH
42597: LD_INT 0
42599: DIFF
42600: ST_TO_ADDR
// if not result [ 1 ] then
42601: LD_VAR 0 2
42605: PUSH
42606: LD_INT 1
42608: ARRAY
42609: NOT
42610: IFFALSE 42630
// result := Delete ( result , 1 ) ;
42612: LD_ADDR_VAR 0 2
42616: PUSH
42617: LD_VAR 0 2
42621: PPUSH
42622: LD_INT 1
42624: PPUSH
42625: CALL_OW 3
42629: ST_TO_ADDR
// end ;
42630: LD_VAR 0 2
42634: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
// sibRocketRange := 25 ;
42641: LD_ADDR_VAR 0 6
42645: PUSH
42646: LD_INT 25
42648: ST_TO_ADDR
// result := false ;
42649: LD_ADDR_VAR 0 4
42653: PUSH
42654: LD_INT 0
42656: ST_TO_ADDR
// for i := 0 to 5 do
42657: LD_ADDR_VAR 0 5
42661: PUSH
42662: DOUBLE
42663: LD_INT 0
42665: DEC
42666: ST_TO_ADDR
42667: LD_INT 5
42669: PUSH
42670: FOR_TO
42671: IFFALSE 42738
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42673: LD_VAR 0 1
42677: PPUSH
42678: LD_VAR 0 5
42682: PPUSH
42683: LD_VAR 0 6
42687: PPUSH
42688: CALL_OW 272
42692: PPUSH
42693: LD_VAR 0 2
42697: PPUSH
42698: LD_VAR 0 5
42702: PPUSH
42703: LD_VAR 0 6
42707: PPUSH
42708: CALL_OW 273
42712: PPUSH
42713: LD_VAR 0 3
42717: PPUSH
42718: CALL_OW 309
42722: IFFALSE 42736
// begin result := true ;
42724: LD_ADDR_VAR 0 4
42728: PUSH
42729: LD_INT 1
42731: ST_TO_ADDR
// exit ;
42732: POP
42733: POP
42734: GO 42740
// end ;
42736: GO 42670
42738: POP
42739: POP
// end ;
42740: LD_VAR 0 4
42744: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42745: LD_INT 0
42747: PPUSH
42748: PPUSH
42749: PPUSH
// if btype = b_depot then
42750: LD_VAR 0 2
42754: PUSH
42755: LD_INT 0
42757: EQUAL
42758: IFFALSE 42770
// begin result := true ;
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: LD_INT 1
42767: ST_TO_ADDR
// exit ;
42768: GO 42890
// end ; pom := GetBase ( depot ) ;
42770: LD_ADDR_VAR 0 4
42774: PUSH
42775: LD_VAR 0 1
42779: PPUSH
42780: CALL_OW 274
42784: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42785: LD_ADDR_VAR 0 5
42789: PUSH
42790: LD_VAR 0 2
42794: PPUSH
42795: LD_VAR 0 1
42799: PPUSH
42800: CALL_OW 248
42804: PPUSH
42805: CALL_OW 450
42809: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42810: LD_ADDR_VAR 0 3
42814: PUSH
42815: LD_VAR 0 4
42819: PPUSH
42820: LD_INT 1
42822: PPUSH
42823: CALL_OW 275
42827: PUSH
42828: LD_VAR 0 5
42832: PUSH
42833: LD_INT 1
42835: ARRAY
42836: GREATEREQUAL
42837: IFFALSE 42863
42839: PUSH
42840: LD_VAR 0 4
42844: PPUSH
42845: LD_INT 2
42847: PPUSH
42848: CALL_OW 275
42852: PUSH
42853: LD_VAR 0 5
42857: PUSH
42858: LD_INT 2
42860: ARRAY
42861: GREATEREQUAL
42862: AND
42863: IFFALSE 42889
42865: PUSH
42866: LD_VAR 0 4
42870: PPUSH
42871: LD_INT 3
42873: PPUSH
42874: CALL_OW 275
42878: PUSH
42879: LD_VAR 0 5
42883: PUSH
42884: LD_INT 3
42886: ARRAY
42887: GREATEREQUAL
42888: AND
42889: ST_TO_ADDR
// end ;
42890: LD_VAR 0 3
42894: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42895: LD_INT 0
42897: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42898: LD_VAR 0 1
42902: PPUSH
42903: LD_VAR 0 2
42907: PPUSH
42908: LD_INT 0
42910: PPUSH
42911: LD_INT 0
42913: PPUSH
42914: LD_INT 1
42916: PPUSH
42917: LD_INT 0
42919: PPUSH
42920: CALL_OW 587
// end ;
42924: LD_VAR 0 3
42928: RET
// export function CenterOnNow ( unit ) ; begin
42929: LD_INT 0
42931: PPUSH
// result := IsInUnit ( unit ) ;
42932: LD_ADDR_VAR 0 2
42936: PUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 310
42946: ST_TO_ADDR
// if not result then
42947: LD_VAR 0 2
42951: NOT
42952: IFFALSE 42964
// result := unit ;
42954: LD_ADDR_VAR 0 2
42958: PUSH
42959: LD_VAR 0 1
42963: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 87
// end ;
42973: LD_VAR 0 2
42977: RET
// export function ComMoveHex ( unit , hex ) ; begin
42978: LD_INT 0
42980: PPUSH
// if not hex then
42981: LD_VAR 0 2
42985: NOT
42986: IFFALSE 42990
// exit ;
42988: GO 43043
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42990: LD_VAR 0 2
42994: PUSH
42995: LD_INT 1
42997: ARRAY
42998: PPUSH
42999: LD_VAR 0 2
43003: PUSH
43004: LD_INT 2
43006: ARRAY
43007: PPUSH
43008: CALL_OW 428
43012: IFFALSE 43016
// exit ;
43014: GO 43043
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43016: LD_VAR 0 1
43020: PPUSH
43021: LD_VAR 0 2
43025: PUSH
43026: LD_INT 1
43028: ARRAY
43029: PPUSH
43030: LD_VAR 0 2
43034: PUSH
43035: LD_INT 2
43037: ARRAY
43038: PPUSH
43039: CALL_OW 111
// end ;
43043: LD_VAR 0 3
43047: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43048: LD_INT 0
43050: PPUSH
43051: PPUSH
43052: PPUSH
// if not unit or not enemy then
43053: LD_VAR 0 1
43057: NOT
43058: IFTRUE 43067
43060: PUSH
43061: LD_VAR 0 2
43065: NOT
43066: OR
43067: IFFALSE 43071
// exit ;
43069: GO 43197
// x := GetX ( enemy ) ;
43071: LD_ADDR_VAR 0 4
43075: PUSH
43076: LD_VAR 0 2
43080: PPUSH
43081: CALL_OW 250
43085: ST_TO_ADDR
// y := GetY ( enemy ) ;
43086: LD_ADDR_VAR 0 5
43090: PUSH
43091: LD_VAR 0 2
43095: PPUSH
43096: CALL_OW 251
43100: ST_TO_ADDR
// if ValidHex ( x , y ) then
43101: LD_VAR 0 4
43105: PPUSH
43106: LD_VAR 0 5
43110: PPUSH
43111: CALL_OW 488
43115: IFFALSE 43197
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43117: LD_VAR 0 2
43121: PPUSH
43122: CALL_OW 247
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: IN
43137: IFTRUE 43160
43139: PUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: CALL_OW 255
43149: PPUSH
43150: LD_VAR 0 2
43154: PPUSH
43155: CALL_OW 292
43159: OR
43160: IFFALSE 43178
// ComAttackUnit ( unit , enemy ) else
43162: LD_VAR 0 1
43166: PPUSH
43167: LD_VAR 0 2
43171: PPUSH
43172: CALL_OW 115
43176: GO 43197
// ComAgressiveMove ( unit , x , y ) ;
43178: LD_VAR 0 1
43182: PPUSH
43183: LD_VAR 0 4
43187: PPUSH
43188: LD_VAR 0 5
43192: PPUSH
43193: CALL_OW 114
// end ;
43197: LD_VAR 0 3
43201: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43202: LD_INT 0
43204: PPUSH
43205: PPUSH
43206: PPUSH
// list := AreaToList ( area , 0 ) ;
43207: LD_ADDR_VAR 0 5
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: LD_INT 0
43219: PPUSH
43220: CALL_OW 517
43224: ST_TO_ADDR
// if not list then
43225: LD_VAR 0 5
43229: NOT
43230: IFFALSE 43234
// exit ;
43232: GO 43364
// if all then
43234: LD_VAR 0 2
43238: IFFALSE 43326
// begin for i := 1 to list [ 1 ] do
43240: LD_ADDR_VAR 0 4
43244: PUSH
43245: DOUBLE
43246: LD_INT 1
43248: DEC
43249: ST_TO_ADDR
43250: LD_VAR 0 5
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: PUSH
43259: FOR_TO
43260: IFFALSE 43322
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43262: LD_ADDR_VAR 0 3
43266: PUSH
43267: LD_VAR 0 3
43271: PPUSH
43272: LD_VAR 0 3
43276: PUSH
43277: LD_INT 1
43279: PLUS
43280: PPUSH
43281: LD_VAR 0 5
43285: PUSH
43286: LD_INT 1
43288: ARRAY
43289: PUSH
43290: LD_VAR 0 4
43294: ARRAY
43295: PUSH
43296: LD_VAR 0 5
43300: PUSH
43301: LD_INT 2
43303: ARRAY
43304: PUSH
43305: LD_VAR 0 4
43309: ARRAY
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PPUSH
43315: CALL_OW 1
43319: ST_TO_ADDR
43320: GO 43259
43322: POP
43323: POP
// exit ;
43324: GO 43364
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_VAR 0 5
43335: PUSH
43336: LD_INT 1
43338: ARRAY
43339: PUSH
43340: LD_INT 1
43342: ARRAY
43343: PUSH
43344: LD_VAR 0 5
43348: PUSH
43349: LD_INT 2
43351: ARRAY
43352: PUSH
43353: LD_INT 1
43355: ARRAY
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: ST_TO_ADDR
// end ;
43364: LD_VAR 0 3
43368: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43369: LD_INT 0
43371: PPUSH
43372: PPUSH
// list := AreaToList ( area , 0 ) ;
43373: LD_ADDR_VAR 0 4
43377: PUSH
43378: LD_VAR 0 1
43382: PPUSH
43383: LD_INT 0
43385: PPUSH
43386: CALL_OW 517
43390: ST_TO_ADDR
// if not list then
43391: LD_VAR 0 4
43395: NOT
43396: IFFALSE 43400
// exit ;
43398: GO 43441
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43400: LD_ADDR_VAR 0 3
43404: PUSH
43405: LD_VAR 0 4
43409: PUSH
43410: LD_INT 1
43412: ARRAY
43413: PUSH
43414: LD_INT 1
43416: ARRAY
43417: PUSH
43418: LD_VAR 0 4
43422: PUSH
43423: LD_INT 2
43425: ARRAY
43426: PUSH
43427: LD_INT 1
43429: ARRAY
43430: PUSH
43431: LD_VAR 0 2
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: ST_TO_ADDR
// end ;
43441: LD_VAR 0 3
43445: RET
// export function First ( array ) ; begin
43446: LD_INT 0
43448: PPUSH
// if not array then
43449: LD_VAR 0 1
43453: NOT
43454: IFFALSE 43458
// exit ;
43456: GO 43472
// result := array [ 1 ] ;
43458: LD_ADDR_VAR 0 2
43462: PUSH
43463: LD_VAR 0 1
43467: PUSH
43468: LD_INT 1
43470: ARRAY
43471: ST_TO_ADDR
// end ;
43472: LD_VAR 0 2
43476: RET
// export function Last ( array ) ; begin
43477: LD_INT 0
43479: PPUSH
// if not array then
43480: LD_VAR 0 1
43484: NOT
43485: IFFALSE 43489
// exit ;
43487: GO 43505
// result := array [ array ] ;
43489: LD_ADDR_VAR 0 2
43493: PUSH
43494: LD_VAR 0 1
43498: PUSH
43499: LD_VAR 0 1
43503: ARRAY
43504: ST_TO_ADDR
// end ;
43505: LD_VAR 0 2
43509: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43510: LD_INT 0
43512: PPUSH
43513: PPUSH
// result := [ ] ;
43514: LD_ADDR_VAR 0 5
43518: PUSH
43519: EMPTY
43520: ST_TO_ADDR
// if not array then
43521: LD_VAR 0 1
43525: NOT
43526: IFFALSE 43530
// exit ;
43528: GO 43642
// for i := 1 to array do
43530: LD_ADDR_VAR 0 6
43534: PUSH
43535: DOUBLE
43536: LD_INT 1
43538: DEC
43539: ST_TO_ADDR
43540: LD_VAR 0 1
43544: PUSH
43545: FOR_TO
43546: IFFALSE 43640
// if array [ i ] [ index ] = value then
43548: LD_VAR 0 1
43552: PUSH
43553: LD_VAR 0 6
43557: ARRAY
43558: PUSH
43559: LD_VAR 0 2
43563: ARRAY
43564: PUSH
43565: LD_VAR 0 3
43569: EQUAL
43570: IFFALSE 43638
// begin if indexColumn then
43572: LD_VAR 0 4
43576: IFFALSE 43612
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43578: LD_ADDR_VAR 0 5
43582: PUSH
43583: LD_VAR 0 5
43587: PPUSH
43588: LD_VAR 0 1
43592: PUSH
43593: LD_VAR 0 6
43597: ARRAY
43598: PUSH
43599: LD_VAR 0 4
43603: ARRAY
43604: PPUSH
43605: CALL 38650 0 2
43609: ST_TO_ADDR
43610: GO 43638
// result := Join ( result , array [ i ] ) ;
43612: LD_ADDR_VAR 0 5
43616: PUSH
43617: LD_VAR 0 5
43621: PPUSH
43622: LD_VAR 0 1
43626: PUSH
43627: LD_VAR 0 6
43631: ARRAY
43632: PPUSH
43633: CALL 38650 0 2
43637: ST_TO_ADDR
// end ;
43638: GO 43545
43640: POP
43641: POP
// end ;
43642: LD_VAR 0 5
43646: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43647: LD_INT 0
43649: PPUSH
// if not vehicles or not parkingPoint then
43650: LD_VAR 0 1
43654: NOT
43655: IFTRUE 43664
43657: PUSH
43658: LD_VAR 0 2
43662: NOT
43663: OR
43664: IFFALSE 43668
// exit ;
43666: GO 43766
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43668: LD_ADDR_VAR 0 1
43672: PUSH
43673: LD_VAR 0 1
43677: PPUSH
43678: LD_INT 50
43680: PUSH
43681: EMPTY
43682: LIST
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: LD_INT 92
43689: PUSH
43690: LD_VAR 0 2
43694: PUSH
43695: LD_INT 1
43697: ARRAY
43698: PUSH
43699: LD_VAR 0 2
43703: PUSH
43704: LD_INT 2
43706: ARRAY
43707: PUSH
43708: LD_INT 8
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PPUSH
43725: CALL_OW 72
43729: ST_TO_ADDR
// if not vehicles then
43730: LD_VAR 0 1
43734: NOT
43735: IFFALSE 43739
// exit ;
43737: GO 43766
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43739: LD_VAR 0 1
43743: PPUSH
43744: LD_VAR 0 2
43748: PUSH
43749: LD_INT 1
43751: ARRAY
43752: PPUSH
43753: LD_VAR 0 2
43757: PUSH
43758: LD_INT 2
43760: ARRAY
43761: PPUSH
43762: CALL_OW 111
// end ;
43766: LD_VAR 0 3
43770: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43771: LD_INT 0
43773: PPUSH
43774: PPUSH
43775: PPUSH
// if not side or not area then
43776: LD_VAR 0 1
43780: NOT
43781: IFTRUE 43790
43783: PUSH
43784: LD_VAR 0 2
43788: NOT
43789: OR
43790: IFFALSE 43794
// exit ;
43792: GO 43913
// tmp := AreaToList ( area , 0 ) ;
43794: LD_ADDR_VAR 0 5
43798: PUSH
43799: LD_VAR 0 2
43803: PPUSH
43804: LD_INT 0
43806: PPUSH
43807: CALL_OW 517
43811: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43812: LD_ADDR_VAR 0 4
43816: PUSH
43817: DOUBLE
43818: LD_INT 1
43820: DEC
43821: ST_TO_ADDR
43822: LD_VAR 0 5
43826: PUSH
43827: LD_INT 1
43829: ARRAY
43830: PUSH
43831: FOR_TO
43832: IFFALSE 43911
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43834: LD_VAR 0 5
43838: PUSH
43839: LD_INT 1
43841: ARRAY
43842: PUSH
43843: LD_VAR 0 4
43847: ARRAY
43848: PPUSH
43849: LD_VAR 0 5
43853: PUSH
43854: LD_INT 2
43856: ARRAY
43857: PUSH
43858: LD_VAR 0 4
43862: ARRAY
43863: PPUSH
43864: CALL_OW 351
43868: IFFALSE 43909
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43870: LD_VAR 0 5
43874: PUSH
43875: LD_INT 1
43877: ARRAY
43878: PUSH
43879: LD_VAR 0 4
43883: ARRAY
43884: PPUSH
43885: LD_VAR 0 5
43889: PUSH
43890: LD_INT 2
43892: ARRAY
43893: PUSH
43894: LD_VAR 0 4
43898: ARRAY
43899: PPUSH
43900: LD_VAR 0 1
43904: PPUSH
43905: CALL_OW 244
// end ;
43909: GO 43831
43911: POP
43912: POP
// end ;
43913: LD_VAR 0 3
43917: RET
// export function UniqueArray ( array ) ; var i ; begin
43918: LD_INT 0
43920: PPUSH
43921: PPUSH
// result := [ ] ;
43922: LD_ADDR_VAR 0 2
43926: PUSH
43927: EMPTY
43928: ST_TO_ADDR
// if not array then
43929: LD_VAR 0 1
43933: NOT
43934: IFFALSE 43938
// exit ;
43936: GO 43999
// for i := 1 to array do
43938: LD_ADDR_VAR 0 3
43942: PUSH
43943: DOUBLE
43944: LD_INT 1
43946: DEC
43947: ST_TO_ADDR
43948: LD_VAR 0 1
43952: PUSH
43953: FOR_TO
43954: IFFALSE 43997
// if not array [ i ] in result then
43956: LD_VAR 0 1
43960: PUSH
43961: LD_VAR 0 3
43965: ARRAY
43966: PUSH
43967: LD_VAR 0 2
43971: IN
43972: NOT
43973: IFFALSE 43995
// result := Join ( result , i ) ;
43975: LD_ADDR_VAR 0 2
43979: PUSH
43980: LD_VAR 0 2
43984: PPUSH
43985: LD_VAR 0 3
43989: PPUSH
43990: CALL 38650 0 2
43994: ST_TO_ADDR
43995: GO 43953
43997: POP
43998: POP
// end ; end_of_file
43999: LD_VAR 0 2
44003: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44004: LD_VAR 0 1
44008: PPUSH
44009: LD_VAR 0 2
44013: PPUSH
44014: LD_VAR 0 3
44018: PPUSH
44019: LD_VAR 0 4
44023: PPUSH
44024: LD_VAR 0 5
44028: PPUSH
44029: LD_VAR 0 6
44033: PPUSH
44034: CALL 49824 0 6
// end ;
44038: PPOPN 6
44040: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44041: LD_INT 0
44043: PPUSH
// begin if not units then
44044: LD_VAR 0 1
44048: NOT
44049: IFFALSE 44053
// exit ;
44051: GO 44053
// end ;
44053: PPOPN 7
44055: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44056: CALL 49711 0 0
// end ; end_of_file
44060: PPOPN 1
44062: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
44063: LD_VAR 0 1
44067: PUSH
44068: LD_INT 200
44070: DOUBLE
44071: GREATEREQUAL
44072: IFFALSE 44080
44074: LD_INT 299
44076: DOUBLE
44077: LESSEQUAL
44078: IFTRUE 44082
44080: GO 44114
44082: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
44083: LD_VAR 0 1
44087: PPUSH
44088: LD_VAR 0 2
44092: PPUSH
44093: LD_VAR 0 3
44097: PPUSH
44098: LD_VAR 0 4
44102: PPUSH
44103: LD_VAR 0 5
44107: PPUSH
44108: CALL 44895 0 5
44112: GO 44191
44114: LD_INT 300
44116: DOUBLE
44117: GREATEREQUAL
44118: IFFALSE 44126
44120: LD_INT 399
44122: DOUBLE
44123: LESSEQUAL
44124: IFTRUE 44128
44126: GO 44190
44128: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
44129: LD_VAR 0 1
44133: PPUSH
44134: LD_VAR 0 2
44138: PPUSH
44139: LD_VAR 0 3
44143: PPUSH
44144: LD_VAR 0 4
44148: PPUSH
44149: LD_VAR 0 5
44153: PPUSH
44154: LD_VAR 0 6
44158: PPUSH
44159: LD_VAR 0 7
44163: PPUSH
44164: LD_VAR 0 8
44168: PPUSH
44169: LD_VAR 0 9
44173: PPUSH
44174: LD_VAR 0 10
44178: PPUSH
44179: LD_VAR 0 11
44183: PPUSH
44184: CALL 62284 0 11
44188: GO 44191
44190: POP
// end ;
44191: PPOPN 11
44193: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
44194: LD_VAR 0 1
44198: PPUSH
44199: LD_VAR 0 2
44203: PPUSH
44204: LD_VAR 0 3
44208: PPUSH
44209: LD_VAR 0 4
44213: PPUSH
44214: LD_VAR 0 5
44218: PPUSH
44219: CALL 44276 0 5
// end ; end_of_file
44223: PPOPN 5
44225: END
// export function SOS_UnitDestroyed ( un ) ; begin
44226: LD_INT 0
44228: PPUSH
// ComRadiation ( un ) ;
44229: LD_VAR 0 1
44233: PPUSH
44234: CALL 45315 0 1
// end ;
44238: LD_VAR 0 2
44242: RET
// export function SOS_UnitKamikazed ( un ) ; begin
44243: LD_INT 0
44245: PPUSH
// ComRadiation ( un ) ;
44246: LD_VAR 0 1
44250: PPUSH
44251: CALL 45315 0 1
// end ;
44255: LD_VAR 0 2
44259: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44260: LD_INT 0
44262: PPUSH
// end ;
44263: LD_VAR 0 4
44267: RET
// export function SOS_Command ( cmd ) ; begin
44268: LD_INT 0
44270: PPUSH
// end ;
44271: LD_VAR 0 2
44275: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44276: LD_INT 0
44278: PPUSH
// end ;
44279: LD_VAR 0 6
44283: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
44284: LD_INT 0
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
// if not vehicle or not factory then
44290: LD_VAR 0 1
44294: NOT
44295: IFTRUE 44304
44297: PUSH
44298: LD_VAR 0 2
44302: NOT
44303: OR
44304: IFFALSE 44308
// exit ;
44306: GO 44890
// if not factoryWaypoints then
44308: LD_EXP 71
44312: NOT
44313: IFFALSE 44317
// exit ;
44315: GO 44890
// for i := 1 to Count ( factoryWaypoints ) do
44317: LD_ADDR_VAR 0 4
44321: PUSH
44322: DOUBLE
44323: LD_INT 1
44325: DEC
44326: ST_TO_ADDR
44327: LD_EXP 71
44331: PPUSH
44332: CALL 2718 0 1
44336: PUSH
44337: FOR_TO
44338: IFFALSE 44888
// if factoryWaypoints [ i ] [ 2 ] = factory then
44340: LD_EXP 71
44344: PUSH
44345: LD_VAR 0 4
44349: ARRAY
44350: PUSH
44351: LD_INT 2
44353: ARRAY
44354: PUSH
44355: LD_VAR 0 2
44359: EQUAL
44360: IFFALSE 44886
// begin if GetControl ( vehicle ) = control_manual then
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 263
44371: PUSH
44372: LD_INT 1
44374: EQUAL
44375: IFFALSE 44739
// begin driver := IsDrivenBy ( vehicle ) ;
44377: LD_ADDR_VAR 0 5
44381: PUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL_OW 311
44391: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
44392: LD_VAR 0 5
44396: PUSH
44397: LD_EXP 72
44401: IN
44402: IFTRUE 44416
44404: PUSH
44405: LD_VAR 0 1
44409: PUSH
44410: LD_EXP 72
44414: IN
44415: OR
44416: IFFALSE 44422
// exit ;
44418: POP
44419: POP
44420: GO 44890
// if not HasTask ( driver ) then
44422: LD_VAR 0 5
44426: PPUSH
44427: CALL_OW 314
44431: NOT
44432: IFFALSE 44737
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
44434: LD_ADDR_EXP 72
44438: PUSH
44439: LD_EXP 72
44443: PPUSH
44444: LD_VAR 0 5
44448: PPUSH
44449: CALL 38650 0 2
44453: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
44454: LD_ADDR_EXP 72
44458: PUSH
44459: LD_EXP 72
44463: PPUSH
44464: LD_VAR 0 1
44468: PPUSH
44469: CALL 38650 0 2
44473: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44474: LD_ADDR_VAR 0 6
44478: PUSH
44479: LD_EXP 71
44483: PUSH
44484: LD_VAR 0 4
44488: ARRAY
44489: PUSH
44490: LD_INT 3
44492: ARRAY
44493: PPUSH
44494: LD_EXP 71
44498: PUSH
44499: LD_VAR 0 4
44503: ARRAY
44504: PUSH
44505: LD_INT 4
44507: ARRAY
44508: PPUSH
44509: CALL_OW 428
44513: ST_TO_ADDR
// if hex then
44514: LD_VAR 0 6
44518: IFFALSE 44536
// ComMoveUnit ( driver , hex ) else
44520: LD_VAR 0 5
44524: PPUSH
44525: LD_VAR 0 6
44529: PPUSH
44530: CALL_OW 112
44534: GO 44620
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
44536: LD_VAR 0 1
44540: PPUSH
44541: LD_EXP 71
44545: PUSH
44546: LD_VAR 0 4
44550: ARRAY
44551: PUSH
44552: LD_INT 3
44554: ARRAY
44555: PPUSH
44556: LD_EXP 71
44560: PUSH
44561: LD_VAR 0 4
44565: ARRAY
44566: PUSH
44567: LD_INT 4
44569: ARRAY
44570: PPUSH
44571: CALL_OW 297
44575: PUSH
44576: LD_INT 0
44578: GREATER
44579: IFFALSE 44620
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44581: LD_VAR 0 5
44585: PPUSH
44586: LD_EXP 71
44590: PUSH
44591: LD_VAR 0 4
44595: ARRAY
44596: PUSH
44597: LD_INT 3
44599: ARRAY
44600: PPUSH
44601: LD_EXP 71
44605: PUSH
44606: LD_VAR 0 4
44610: ARRAY
44611: PUSH
44612: LD_INT 4
44614: ARRAY
44615: PPUSH
44616: CALL_OW 111
// AddComExitVehicle ( driver ) ;
44620: LD_VAR 0 5
44624: PPUSH
44625: CALL_OW 181
// if Multiplayer then
44629: LD_OWVAR 4
44633: IFFALSE 44682
// begin repeat wait ( 10 ) ;
44635: LD_INT 10
44637: PPUSH
44638: CALL_OW 67
// until not IsInUnit ( driver ) ;
44642: LD_VAR 0 5
44646: PPUSH
44647: CALL_OW 310
44651: NOT
44652: IFFALSE 44635
// if not HasTask ( driver ) then
44654: LD_VAR 0 5
44658: PPUSH
44659: CALL_OW 314
44663: NOT
44664: IFFALSE 44680
// ComEnterUnit ( driver , factory ) ;
44666: LD_VAR 0 5
44670: PPUSH
44671: LD_VAR 0 2
44675: PPUSH
44676: CALL_OW 120
// end else
44680: GO 44696
// AddComEnterUnit ( driver , factory ) ;
44682: LD_VAR 0 5
44686: PPUSH
44687: LD_VAR 0 2
44691: PPUSH
44692: CALL_OW 180
// wait ( 0 0$1 ) ;
44696: LD_INT 35
44698: PPUSH
44699: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
44703: LD_ADDR_EXP 72
44707: PUSH
44708: LD_EXP 72
44712: PUSH
44713: LD_VAR 0 5
44717: DIFF
44718: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
44719: LD_ADDR_EXP 72
44723: PUSH
44724: LD_EXP 72
44728: PUSH
44729: LD_VAR 0 1
44733: DIFF
44734: ST_TO_ADDR
// break ;
44735: GO 44888
// end ; end else
44737: GO 44886
// if GetControl ( vehicle ) = control_remote then
44739: LD_VAR 0 1
44743: PPUSH
44744: CALL_OW 263
44748: PUSH
44749: LD_INT 2
44751: EQUAL
44752: IFFALSE 44838
// begin wait ( 0 0$2 ) ;
44754: LD_INT 70
44756: PPUSH
44757: CALL_OW 67
// repeat wait ( 10 ) ;
44761: LD_INT 10
44763: PPUSH
44764: CALL_OW 67
// Connect ( vehicle ) ;
44768: LD_VAR 0 1
44772: PPUSH
44773: CALL 8962 0 1
// until IsControledBy ( vehicle ) ;
44777: LD_VAR 0 1
44781: PPUSH
44782: CALL_OW 312
44786: IFFALSE 44761
// wait ( 10 ) ;
44788: LD_INT 10
44790: PPUSH
44791: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44795: LD_VAR 0 1
44799: PPUSH
44800: LD_EXP 71
44804: PUSH
44805: LD_VAR 0 4
44809: ARRAY
44810: PUSH
44811: LD_INT 3
44813: ARRAY
44814: PPUSH
44815: LD_EXP 71
44819: PUSH
44820: LD_VAR 0 4
44824: ARRAY
44825: PUSH
44826: LD_INT 4
44828: ARRAY
44829: PPUSH
44830: CALL_OW 111
// break ;
44834: GO 44888
// end else
44836: GO 44886
// begin wait ( 0 0$3 ) ;
44838: LD_INT 105
44840: PPUSH
44841: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44845: LD_VAR 0 1
44849: PPUSH
44850: LD_EXP 71
44854: PUSH
44855: LD_VAR 0 4
44859: ARRAY
44860: PUSH
44861: LD_INT 3
44863: ARRAY
44864: PPUSH
44865: LD_EXP 71
44869: PUSH
44870: LD_VAR 0 4
44874: ARRAY
44875: PUSH
44876: LD_INT 4
44878: ARRAY
44879: PPUSH
44880: CALL_OW 111
// break ;
44884: GO 44888
// end ; end ;
44886: GO 44337
44888: POP
44889: POP
// end ;
44890: LD_VAR 0 3
44894: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44895: LD_INT 0
44897: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44898: LD_VAR 0 1
44902: PUSH
44903: LD_INT 250
44905: EQUAL
44906: IFFALSE 44923
44908: PUSH
44909: LD_VAR 0 2
44913: PPUSH
44914: CALL_OW 264
44918: PUSH
44919: LD_INT 81
44921: EQUAL
44922: AND
44923: IFFALSE 44944
// MinerPlaceMine ( unit , x , y ) ;
44925: LD_VAR 0 2
44929: PPUSH
44930: LD_VAR 0 4
44934: PPUSH
44935: LD_VAR 0 5
44939: PPUSH
44940: CALL 48076 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44944: LD_VAR 0 1
44948: PUSH
44949: LD_INT 251
44951: EQUAL
44952: IFFALSE 44969
44954: PUSH
44955: LD_VAR 0 2
44959: PPUSH
44960: CALL_OW 264
44964: PUSH
44965: LD_INT 81
44967: EQUAL
44968: AND
44969: IFFALSE 44990
// MinerDetonateMine ( unit , x , y ) ;
44971: LD_VAR 0 2
44975: PPUSH
44976: LD_VAR 0 4
44980: PPUSH
44981: LD_VAR 0 5
44985: PPUSH
44986: CALL 48355 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44990: LD_VAR 0 1
44994: PUSH
44995: LD_INT 252
44997: EQUAL
44998: IFFALSE 45015
45000: PUSH
45001: LD_VAR 0 2
45005: PPUSH
45006: CALL_OW 264
45010: PUSH
45011: LD_INT 81
45013: EQUAL
45014: AND
45015: IFFALSE 45036
// MinerCreateMinefield ( unit , x , y ) ;
45017: LD_VAR 0 2
45021: PPUSH
45022: LD_VAR 0 4
45026: PPUSH
45027: LD_VAR 0 5
45031: PPUSH
45032: CALL 48774 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
45036: LD_VAR 0 1
45040: PUSH
45041: LD_INT 253
45043: EQUAL
45044: IFFALSE 45061
45046: PUSH
45047: LD_VAR 0 2
45051: PPUSH
45052: CALL_OW 257
45056: PUSH
45057: LD_INT 5
45059: EQUAL
45060: AND
45061: IFFALSE 45082
// ComBinocular ( unit , x , y ) ;
45063: LD_VAR 0 2
45067: PPUSH
45068: LD_VAR 0 4
45072: PPUSH
45073: LD_VAR 0 5
45077: PPUSH
45078: CALL 49149 0 3
// if selectedUnit then
45082: LD_VAR 0 3
45086: IFFALSE 45146
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
45088: LD_VAR 0 1
45092: PUSH
45093: LD_INT 254
45095: EQUAL
45096: IFFALSE 45113
45098: PUSH
45099: LD_VAR 0 2
45103: PPUSH
45104: CALL_OW 264
45108: PUSH
45109: LD_INT 99
45111: EQUAL
45112: AND
45113: IFFALSE 45130
45115: PUSH
45116: LD_VAR 0 3
45120: PPUSH
45121: CALL_OW 263
45125: PUSH
45126: LD_INT 3
45128: EQUAL
45129: AND
45130: IFFALSE 45146
// HackDestroyVehicle ( unit , selectedUnit ) ;
45132: LD_VAR 0 2
45136: PPUSH
45137: LD_VAR 0 3
45141: PPUSH
45142: CALL 47436 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
45146: LD_VAR 0 1
45150: PUSH
45151: LD_INT 255
45153: EQUAL
45154: IFFALSE 45178
45156: PUSH
45157: LD_VAR 0 2
45161: PPUSH
45162: CALL_OW 264
45166: PUSH
45167: LD_INT 14
45169: PUSH
45170: LD_INT 53
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: IN
45177: AND
45178: IFFALSE 45196
45180: PUSH
45181: LD_VAR 0 4
45185: PPUSH
45186: LD_VAR 0 5
45190: PPUSH
45191: CALL_OW 488
45195: AND
45196: IFFALSE 45220
// CutTreeXYR ( unit , x , y , 12 ) ;
45198: LD_VAR 0 2
45202: PPUSH
45203: LD_VAR 0 4
45207: PPUSH
45208: LD_VAR 0 5
45212: PPUSH
45213: LD_INT 12
45215: PPUSH
45216: CALL 45411 0 4
// if cmd = 256 then
45220: LD_VAR 0 1
45224: PUSH
45225: LD_INT 256
45227: EQUAL
45228: IFFALSE 45249
// SetFactoryWaypoint ( unit , x , y ) ;
45230: LD_VAR 0 2
45234: PPUSH
45235: LD_VAR 0 4
45239: PPUSH
45240: LD_VAR 0 5
45244: PPUSH
45245: CALL 64276 0 3
// if cmd = 257 then
45249: LD_VAR 0 1
45253: PUSH
45254: LD_INT 257
45256: EQUAL
45257: IFFALSE 45278
// SetWarehouseGatheringPoint ( unit , x , y ) ;
45259: LD_VAR 0 2
45263: PPUSH
45264: LD_VAR 0 4
45268: PPUSH
45269: LD_VAR 0 5
45273: PPUSH
45274: CALL 64772 0 3
// if cmd = 258 then
45278: LD_VAR 0 1
45282: PUSH
45283: LD_INT 258
45285: EQUAL
45286: IFFALSE 45310
// BurnTreeXYR ( unit , x , y , 8 ) ;
45288: LD_VAR 0 2
45292: PPUSH
45293: LD_VAR 0 4
45297: PPUSH
45298: LD_VAR 0 5
45302: PPUSH
45303: LD_INT 8
45305: PPUSH
45306: CALL 45811 0 4
// end ;
45310: LD_VAR 0 6
45314: RET
// export function ComRadiation ( un ) ; var eff ; begin
45315: LD_INT 0
45317: PPUSH
45318: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
45319: LD_VAR 0 1
45323: PPUSH
45324: CALL_OW 264
45328: PUSH
45329: LD_INT 91
45331: NONEQUAL
45332: IFFALSE 45336
// exit ;
45334: GO 45406
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45336: LD_INT 68
45338: PPUSH
45339: LD_VAR 0 1
45343: PPUSH
45344: CALL_OW 255
45348: PPUSH
45349: CALL_OW 321
45353: PUSH
45354: LD_INT 2
45356: EQUAL
45357: IFFALSE 45369
// eff := 50 else
45359: LD_ADDR_VAR 0 3
45363: PUSH
45364: LD_INT 50
45366: ST_TO_ADDR
45367: GO 45377
// eff := 25 ;
45369: LD_ADDR_VAR 0 3
45373: PUSH
45374: LD_INT 25
45376: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45377: LD_VAR 0 1
45381: PPUSH
45382: CALL_OW 250
45386: PPUSH
45387: LD_VAR 0 1
45391: PPUSH
45392: CALL_OW 251
45396: PPUSH
45397: LD_VAR 0 3
45401: PPUSH
45402: CALL_OW 495
// end ;
45406: LD_VAR 0 2
45410: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45411: LD_INT 0
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
45422: LD_VAR 0 1
45426: PPUSH
45427: CALL_OW 302
45431: NOT
45432: IFTRUE 45451
45434: PUSH
45435: LD_VAR 0 2
45439: PPUSH
45440: LD_VAR 0 3
45444: PPUSH
45445: CALL_OW 488
45449: NOT
45450: OR
45451: IFTRUE 45460
45453: PUSH
45454: LD_VAR 0 4
45458: NOT
45459: OR
45460: IFFALSE 45464
// exit ;
45462: GO 45806
// list := [ ] ;
45464: LD_ADDR_VAR 0 13
45468: PUSH
45469: EMPTY
45470: ST_TO_ADDR
// if x - r < 0 then
45471: LD_VAR 0 2
45475: PUSH
45476: LD_VAR 0 4
45480: MINUS
45481: PUSH
45482: LD_INT 0
45484: LESS
45485: IFFALSE 45497
// min_x := 0 else
45487: LD_ADDR_VAR 0 7
45491: PUSH
45492: LD_INT 0
45494: ST_TO_ADDR
45495: GO 45513
// min_x := x - r ;
45497: LD_ADDR_VAR 0 7
45501: PUSH
45502: LD_VAR 0 2
45506: PUSH
45507: LD_VAR 0 4
45511: MINUS
45512: ST_TO_ADDR
// if y - r < 0 then
45513: LD_VAR 0 3
45517: PUSH
45518: LD_VAR 0 4
45522: MINUS
45523: PUSH
45524: LD_INT 0
45526: LESS
45527: IFFALSE 45539
// min_y := 0 else
45529: LD_ADDR_VAR 0 8
45533: PUSH
45534: LD_INT 0
45536: ST_TO_ADDR
45537: GO 45555
// min_y := y - r ;
45539: LD_ADDR_VAR 0 8
45543: PUSH
45544: LD_VAR 0 3
45548: PUSH
45549: LD_VAR 0 4
45553: MINUS
45554: ST_TO_ADDR
// max_x := x + r ;
45555: LD_ADDR_VAR 0 9
45559: PUSH
45560: LD_VAR 0 2
45564: PUSH
45565: LD_VAR 0 4
45569: PLUS
45570: ST_TO_ADDR
// max_y := y + r ;
45571: LD_ADDR_VAR 0 10
45575: PUSH
45576: LD_VAR 0 3
45580: PUSH
45581: LD_VAR 0 4
45585: PLUS
45586: ST_TO_ADDR
// for _x = min_x to max_x do
45587: LD_ADDR_VAR 0 11
45591: PUSH
45592: DOUBLE
45593: LD_VAR 0 7
45597: DEC
45598: ST_TO_ADDR
45599: LD_VAR 0 9
45603: PUSH
45604: FOR_TO
45605: IFFALSE 45724
// for _y = min_y to max_y do
45607: LD_ADDR_VAR 0 12
45611: PUSH
45612: DOUBLE
45613: LD_VAR 0 8
45617: DEC
45618: ST_TO_ADDR
45619: LD_VAR 0 10
45623: PUSH
45624: FOR_TO
45625: IFFALSE 45720
// begin if not ValidHex ( _x , _y ) then
45627: LD_VAR 0 11
45631: PPUSH
45632: LD_VAR 0 12
45636: PPUSH
45637: CALL_OW 488
45641: NOT
45642: IFFALSE 45646
// continue ;
45644: GO 45624
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45646: LD_VAR 0 11
45650: PPUSH
45651: LD_VAR 0 12
45655: PPUSH
45656: CALL_OW 351
45660: IFFALSE 45678
45662: PUSH
45663: LD_VAR 0 11
45667: PPUSH
45668: LD_VAR 0 12
45672: PPUSH
45673: CALL_OW 554
45677: AND
45678: IFFALSE 45718
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45680: LD_ADDR_VAR 0 13
45684: PUSH
45685: LD_VAR 0 13
45689: PPUSH
45690: LD_VAR 0 13
45694: PUSH
45695: LD_INT 1
45697: PLUS
45698: PPUSH
45699: LD_VAR 0 11
45703: PUSH
45704: LD_VAR 0 12
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PPUSH
45713: CALL_OW 2
45717: ST_TO_ADDR
// end ;
45718: GO 45624
45720: POP
45721: POP
45722: GO 45604
45724: POP
45725: POP
// if not list then
45726: LD_VAR 0 13
45730: NOT
45731: IFFALSE 45735
// exit ;
45733: GO 45806
// for i in list do
45735: LD_ADDR_VAR 0 6
45739: PUSH
45740: LD_VAR 0 13
45744: PUSH
45745: FOR_IN
45746: IFFALSE 45804
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45748: LD_VAR 0 1
45752: PPUSH
45753: LD_STRING M
45755: PUSH
45756: LD_VAR 0 6
45760: PUSH
45761: LD_INT 1
45763: ARRAY
45764: PUSH
45765: LD_VAR 0 6
45769: PUSH
45770: LD_INT 2
45772: ARRAY
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: PPUSH
45798: CALL_OW 447
45802: GO 45745
45804: POP
45805: POP
// end ;
45806: LD_VAR 0 5
45810: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
45811: LD_INT 0
45813: PPUSH
45814: PPUSH
45815: PPUSH
45816: PPUSH
45817: PPUSH
45818: PPUSH
45819: PPUSH
45820: PPUSH
45821: PPUSH
45822: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
45823: LD_VAR 0 1
45827: PPUSH
45828: CALL_OW 302
45832: NOT
45833: IFTRUE 45852
45835: PUSH
45836: LD_VAR 0 2
45840: PPUSH
45841: LD_VAR 0 3
45845: PPUSH
45846: CALL_OW 488
45850: NOT
45851: OR
45852: IFTRUE 45861
45854: PUSH
45855: LD_VAR 0 4
45859: NOT
45860: OR
45861: IFFALSE 45865
// exit ;
45863: GO 46382
// list := [ ] ;
45865: LD_ADDR_VAR 0 13
45869: PUSH
45870: EMPTY
45871: ST_TO_ADDR
// if x - r < 0 then
45872: LD_VAR 0 2
45876: PUSH
45877: LD_VAR 0 4
45881: MINUS
45882: PUSH
45883: LD_INT 0
45885: LESS
45886: IFFALSE 45898
// min_x := 0 else
45888: LD_ADDR_VAR 0 7
45892: PUSH
45893: LD_INT 0
45895: ST_TO_ADDR
45896: GO 45914
// min_x := x - r ;
45898: LD_ADDR_VAR 0 7
45902: PUSH
45903: LD_VAR 0 2
45907: PUSH
45908: LD_VAR 0 4
45912: MINUS
45913: ST_TO_ADDR
// if y - r < 0 then
45914: LD_VAR 0 3
45918: PUSH
45919: LD_VAR 0 4
45923: MINUS
45924: PUSH
45925: LD_INT 0
45927: LESS
45928: IFFALSE 45940
// min_y := 0 else
45930: LD_ADDR_VAR 0 8
45934: PUSH
45935: LD_INT 0
45937: ST_TO_ADDR
45938: GO 45956
// min_y := y - r ;
45940: LD_ADDR_VAR 0 8
45944: PUSH
45945: LD_VAR 0 3
45949: PUSH
45950: LD_VAR 0 4
45954: MINUS
45955: ST_TO_ADDR
// max_x := x + r ;
45956: LD_ADDR_VAR 0 9
45960: PUSH
45961: LD_VAR 0 2
45965: PUSH
45966: LD_VAR 0 4
45970: PLUS
45971: ST_TO_ADDR
// max_y := y + r ;
45972: LD_ADDR_VAR 0 10
45976: PUSH
45977: LD_VAR 0 3
45981: PUSH
45982: LD_VAR 0 4
45986: PLUS
45987: ST_TO_ADDR
// for _x = min_x to max_x do
45988: LD_ADDR_VAR 0 11
45992: PUSH
45993: DOUBLE
45994: LD_VAR 0 7
45998: DEC
45999: ST_TO_ADDR
46000: LD_VAR 0 9
46004: PUSH
46005: FOR_TO
46006: IFFALSE 46125
// for _y = min_y to max_y do
46008: LD_ADDR_VAR 0 12
46012: PUSH
46013: DOUBLE
46014: LD_VAR 0 8
46018: DEC
46019: ST_TO_ADDR
46020: LD_VAR 0 10
46024: PUSH
46025: FOR_TO
46026: IFFALSE 46121
// begin if not ValidHex ( _x , _y ) then
46028: LD_VAR 0 11
46032: PPUSH
46033: LD_VAR 0 12
46037: PPUSH
46038: CALL_OW 488
46042: NOT
46043: IFFALSE 46047
// continue ;
46045: GO 46025
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46047: LD_VAR 0 11
46051: PPUSH
46052: LD_VAR 0 12
46056: PPUSH
46057: CALL_OW 351
46061: IFFALSE 46079
46063: PUSH
46064: LD_VAR 0 11
46068: PPUSH
46069: LD_VAR 0 12
46073: PPUSH
46074: CALL_OW 554
46078: AND
46079: IFFALSE 46119
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46081: LD_ADDR_VAR 0 13
46085: PUSH
46086: LD_VAR 0 13
46090: PPUSH
46091: LD_VAR 0 13
46095: PUSH
46096: LD_INT 1
46098: PLUS
46099: PPUSH
46100: LD_VAR 0 11
46104: PUSH
46105: LD_VAR 0 12
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PPUSH
46114: CALL_OW 2
46118: ST_TO_ADDR
// end ;
46119: GO 46025
46121: POP
46122: POP
46123: GO 46005
46125: POP
46126: POP
// if not list then
46127: LD_VAR 0 13
46131: NOT
46132: IFFALSE 46136
// exit ;
46134: GO 46382
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
46136: LD_ADDR_VAR 0 13
46140: PUSH
46141: LD_VAR 0 1
46145: PPUSH
46146: LD_VAR 0 13
46150: PPUSH
46151: LD_INT 1
46153: PPUSH
46154: LD_INT 1
46156: PPUSH
46157: CALL 6090 0 4
46161: ST_TO_ADDR
// ComStop ( flame ) ;
46162: LD_VAR 0 1
46166: PPUSH
46167: CALL_OW 141
// for i in list do
46171: LD_ADDR_VAR 0 6
46175: PUSH
46176: LD_VAR 0 13
46180: PUSH
46181: FOR_IN
46182: IFFALSE 46213
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
46184: LD_VAR 0 1
46188: PPUSH
46189: LD_VAR 0 6
46193: PUSH
46194: LD_INT 1
46196: ARRAY
46197: PPUSH
46198: LD_VAR 0 6
46202: PUSH
46203: LD_INT 2
46205: ARRAY
46206: PPUSH
46207: CALL_OW 176
46211: GO 46181
46213: POP
46214: POP
// repeat wait ( 0 0$1 ) ;
46215: LD_INT 35
46217: PPUSH
46218: CALL_OW 67
// task := GetTaskList ( flame ) ;
46222: LD_ADDR_VAR 0 14
46226: PUSH
46227: LD_VAR 0 1
46231: PPUSH
46232: CALL_OW 437
46236: ST_TO_ADDR
// if not task then
46237: LD_VAR 0 14
46241: NOT
46242: IFFALSE 46246
// exit ;
46244: GO 46382
// if task [ 1 ] [ 1 ] <> | then
46246: LD_VAR 0 14
46250: PUSH
46251: LD_INT 1
46253: ARRAY
46254: PUSH
46255: LD_INT 1
46257: ARRAY
46258: PUSH
46259: LD_STRING |
46261: NONEQUAL
46262: IFFALSE 46266
// exit ;
46264: GO 46382
// _x := task [ 1 ] [ 2 ] ;
46266: LD_ADDR_VAR 0 11
46270: PUSH
46271: LD_VAR 0 14
46275: PUSH
46276: LD_INT 1
46278: ARRAY
46279: PUSH
46280: LD_INT 2
46282: ARRAY
46283: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
46284: LD_ADDR_VAR 0 12
46288: PUSH
46289: LD_VAR 0 14
46293: PUSH
46294: LD_INT 1
46296: ARRAY
46297: PUSH
46298: LD_INT 3
46300: ARRAY
46301: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
46302: LD_VAR 0 11
46306: PPUSH
46307: LD_VAR 0 12
46311: PPUSH
46312: CALL_OW 351
46316: NOT
46317: IFTRUE 46336
46319: PUSH
46320: LD_VAR 0 11
46324: PPUSH
46325: LD_VAR 0 12
46329: PPUSH
46330: CALL_OW 554
46334: NOT
46335: OR
46336: IFFALSE 46370
// begin task := Delete ( task , 1 ) ;
46338: LD_ADDR_VAR 0 14
46342: PUSH
46343: LD_VAR 0 14
46347: PPUSH
46348: LD_INT 1
46350: PPUSH
46351: CALL_OW 3
46355: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
46356: LD_VAR 0 1
46360: PPUSH
46361: LD_VAR 0 14
46365: PPUSH
46366: CALL_OW 446
// end ; until not HasTask ( flame ) ;
46370: LD_VAR 0 1
46374: PPUSH
46375: CALL_OW 314
46379: NOT
46380: IFFALSE 46215
// end ;
46382: LD_VAR 0 5
46386: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46387: LD_EXP 2
46391: NOT
46392: IFFALSE 46442
46394: GO 46396
46396: DISABLE
// begin initHack := true ;
46397: LD_ADDR_EXP 2
46401: PUSH
46402: LD_INT 1
46404: ST_TO_ADDR
// hackTanks := [ ] ;
46405: LD_ADDR_EXP 3
46409: PUSH
46410: EMPTY
46411: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46412: LD_ADDR_EXP 4
46416: PUSH
46417: EMPTY
46418: ST_TO_ADDR
// hackLimit := 3 ;
46419: LD_ADDR_EXP 5
46423: PUSH
46424: LD_INT 3
46426: ST_TO_ADDR
// hackDist := 12 ;
46427: LD_ADDR_EXP 6
46431: PUSH
46432: LD_INT 12
46434: ST_TO_ADDR
// hackCounter := [ ] ;
46435: LD_ADDR_EXP 7
46439: PUSH
46440: EMPTY
46441: ST_TO_ADDR
// end ;
46442: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46443: LD_EXP 2
46447: IFFALSE 46465
46449: PUSH
46450: LD_INT 34
46452: PUSH
46453: LD_INT 99
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PPUSH
46460: CALL_OW 69
46464: AND
46465: IFFALSE 46718
46467: GO 46469
46469: DISABLE
46470: LD_INT 0
46472: PPUSH
46473: PPUSH
// begin enable ;
46474: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46475: LD_ADDR_VAR 0 1
46479: PUSH
46480: LD_INT 34
46482: PUSH
46483: LD_INT 99
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PPUSH
46490: CALL_OW 69
46494: PUSH
46495: FOR_IN
46496: IFFALSE 46716
// begin if not i in hackTanks then
46498: LD_VAR 0 1
46502: PUSH
46503: LD_EXP 3
46507: IN
46508: NOT
46509: IFFALSE 46592
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
46511: LD_ADDR_EXP 3
46515: PUSH
46516: LD_EXP 3
46520: PPUSH
46521: LD_EXP 3
46525: PUSH
46526: LD_INT 1
46528: PLUS
46529: PPUSH
46530: LD_VAR 0 1
46534: PPUSH
46535: CALL_OW 1
46539: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
46540: LD_ADDR_EXP 4
46544: PUSH
46545: LD_EXP 4
46549: PPUSH
46550: LD_EXP 4
46554: PUSH
46555: LD_INT 1
46557: PLUS
46558: PPUSH
46559: EMPTY
46560: PPUSH
46561: CALL_OW 1
46565: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
46566: LD_ADDR_EXP 7
46570: PUSH
46571: LD_EXP 7
46575: PPUSH
46576: LD_EXP 7
46580: PUSH
46581: LD_INT 1
46583: PLUS
46584: PPUSH
46585: EMPTY
46586: PPUSH
46587: CALL_OW 1
46591: ST_TO_ADDR
// end ; if not IsOk ( i ) then
46592: LD_VAR 0 1
46596: PPUSH
46597: CALL_OW 302
46601: NOT
46602: IFFALSE 46615
// begin HackUnlinkAll ( i ) ;
46604: LD_VAR 0 1
46608: PPUSH
46609: CALL 46721 0 1
// continue ;
46613: GO 46495
// end ; HackCheckCapturedStatus ( i ) ;
46615: LD_VAR 0 1
46619: PPUSH
46620: CALL 47166 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
46624: LD_ADDR_VAR 0 2
46628: PUSH
46629: LD_INT 81
46631: PUSH
46632: LD_VAR 0 1
46636: PPUSH
46637: CALL_OW 255
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 33
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 91
46658: PUSH
46659: LD_VAR 0 1
46663: PUSH
46664: LD_EXP 6
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 50
46676: PUSH
46677: EMPTY
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: PPUSH
46686: CALL_OW 69
46690: ST_TO_ADDR
// if not tmp then
46691: LD_VAR 0 2
46695: NOT
46696: IFFALSE 46700
// continue ;
46698: GO 46495
// HackLink ( i , tmp ) ;
46700: LD_VAR 0 1
46704: PPUSH
46705: LD_VAR 0 2
46709: PPUSH
46710: CALL 46857 0 2
// end ;
46714: GO 46495
46716: POP
46717: POP
// end ;
46718: PPOPN 2
46720: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
46721: LD_INT 0
46723: PPUSH
46724: PPUSH
46725: PPUSH
// if not hack in hackTanks then
46726: LD_VAR 0 1
46730: PUSH
46731: LD_EXP 3
46735: IN
46736: NOT
46737: IFFALSE 46741
// exit ;
46739: GO 46852
// index := GetElementIndex ( hackTanks , hack ) ;
46741: LD_ADDR_VAR 0 4
46745: PUSH
46746: LD_EXP 3
46750: PPUSH
46751: LD_VAR 0 1
46755: PPUSH
46756: CALL 5385 0 2
46760: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
46761: LD_EXP 4
46765: PUSH
46766: LD_VAR 0 4
46770: ARRAY
46771: IFFALSE 46852
// begin for i in hackTanksCaptured [ index ] do
46773: LD_ADDR_VAR 0 3
46777: PUSH
46778: LD_EXP 4
46782: PUSH
46783: LD_VAR 0 4
46787: ARRAY
46788: PUSH
46789: FOR_IN
46790: IFFALSE 46816
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
46792: LD_VAR 0 3
46796: PUSH
46797: LD_INT 1
46799: ARRAY
46800: PPUSH
46801: LD_VAR 0 3
46805: PUSH
46806: LD_INT 2
46808: ARRAY
46809: PPUSH
46810: CALL_OW 235
46814: GO 46789
46816: POP
46817: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
46818: LD_ADDR_EXP 4
46822: PUSH
46823: LD_EXP 4
46827: PPUSH
46828: LD_VAR 0 4
46832: PPUSH
46833: EMPTY
46834: PPUSH
46835: CALL_OW 1
46839: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
46840: LD_VAR 0 1
46844: PPUSH
46845: LD_INT 0
46847: PPUSH
46848: CALL_OW 505
// end ; end ;
46852: LD_VAR 0 2
46856: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
46857: LD_INT 0
46859: PPUSH
46860: PPUSH
46861: PPUSH
// if not hack in hackTanks or not vehicles then
46862: LD_VAR 0 1
46866: PUSH
46867: LD_EXP 3
46871: IN
46872: NOT
46873: IFTRUE 46882
46875: PUSH
46876: LD_VAR 0 2
46880: NOT
46881: OR
46882: IFFALSE 46886
// exit ;
46884: GO 47161
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
46886: LD_ADDR_VAR 0 2
46890: PUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: LD_VAR 0 2
46900: PPUSH
46901: LD_INT 1
46903: PPUSH
46904: LD_INT 1
46906: PPUSH
46907: CALL 6037 0 4
46911: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
46912: LD_ADDR_VAR 0 5
46916: PUSH
46917: LD_EXP 3
46921: PPUSH
46922: LD_VAR 0 1
46926: PPUSH
46927: CALL 5385 0 2
46931: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
46932: LD_EXP 4
46936: PUSH
46937: LD_VAR 0 5
46941: ARRAY
46942: PUSH
46943: LD_EXP 5
46947: LESS
46948: IFFALSE 47137
// begin for i := 1 to vehicles do
46950: LD_ADDR_VAR 0 4
46954: PUSH
46955: DOUBLE
46956: LD_INT 1
46958: DEC
46959: ST_TO_ADDR
46960: LD_VAR 0 2
46964: PUSH
46965: FOR_TO
46966: IFFALSE 47135
// begin if hackTanksCaptured [ index ] = hackLimit then
46968: LD_EXP 4
46972: PUSH
46973: LD_VAR 0 5
46977: ARRAY
46978: PUSH
46979: LD_EXP 5
46983: EQUAL
46984: IFFALSE 46988
// break ;
46986: GO 47135
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
46988: LD_ADDR_EXP 7
46992: PUSH
46993: LD_EXP 7
46997: PPUSH
46998: LD_VAR 0 5
47002: PPUSH
47003: LD_EXP 7
47007: PUSH
47008: LD_VAR 0 5
47012: ARRAY
47013: PUSH
47014: LD_INT 1
47016: PLUS
47017: PPUSH
47018: CALL_OW 1
47022: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47023: LD_ADDR_EXP 4
47027: PUSH
47028: LD_EXP 4
47032: PPUSH
47033: LD_VAR 0 5
47037: PUSH
47038: LD_EXP 4
47042: PUSH
47043: LD_VAR 0 5
47047: ARRAY
47048: PUSH
47049: LD_INT 1
47051: PLUS
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PPUSH
47057: LD_VAR 0 2
47061: PUSH
47062: LD_VAR 0 4
47066: ARRAY
47067: PUSH
47068: LD_VAR 0 2
47072: PUSH
47073: LD_VAR 0 4
47077: ARRAY
47078: PPUSH
47079: CALL_OW 255
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PPUSH
47088: CALL 5602 0 3
47092: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47093: LD_VAR 0 2
47097: PUSH
47098: LD_VAR 0 4
47102: ARRAY
47103: PPUSH
47104: LD_VAR 0 1
47108: PPUSH
47109: CALL_OW 255
47113: PPUSH
47114: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47118: LD_VAR 0 2
47122: PUSH
47123: LD_VAR 0 4
47127: ARRAY
47128: PPUSH
47129: CALL_OW 141
// end ;
47133: GO 46965
47135: POP
47136: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47137: LD_VAR 0 1
47141: PPUSH
47142: LD_EXP 4
47146: PUSH
47147: LD_VAR 0 5
47151: ARRAY
47152: PUSH
47153: LD_INT 0
47155: PLUS
47156: PPUSH
47157: CALL_OW 505
// end ;
47161: LD_VAR 0 3
47165: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47166: LD_INT 0
47168: PPUSH
47169: PPUSH
47170: PPUSH
47171: PPUSH
// if not hack in hackTanks then
47172: LD_VAR 0 1
47176: PUSH
47177: LD_EXP 3
47181: IN
47182: NOT
47183: IFFALSE 47187
// exit ;
47185: GO 47431
// index := GetElementIndex ( hackTanks , hack ) ;
47187: LD_ADDR_VAR 0 4
47191: PUSH
47192: LD_EXP 3
47196: PPUSH
47197: LD_VAR 0 1
47201: PPUSH
47202: CALL 5385 0 2
47206: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47207: LD_ADDR_VAR 0 3
47211: PUSH
47212: DOUBLE
47213: LD_EXP 4
47217: PUSH
47218: LD_VAR 0 4
47222: ARRAY
47223: INC
47224: ST_TO_ADDR
47225: LD_INT 1
47227: PUSH
47228: FOR_DOWNTO
47229: IFFALSE 47405
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47231: LD_ADDR_VAR 0 5
47235: PUSH
47236: LD_EXP 4
47240: PUSH
47241: LD_VAR 0 4
47245: ARRAY
47246: PUSH
47247: LD_VAR 0 3
47251: ARRAY
47252: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47253: LD_VAR 0 5
47257: PUSH
47258: LD_INT 1
47260: ARRAY
47261: PPUSH
47262: CALL_OW 302
47266: NOT
47267: IFTRUE 47295
47269: PUSH
47270: LD_VAR 0 5
47274: PUSH
47275: LD_INT 1
47277: ARRAY
47278: PPUSH
47279: CALL_OW 255
47283: PUSH
47284: LD_VAR 0 1
47288: PPUSH
47289: CALL_OW 255
47293: NONEQUAL
47294: OR
47295: IFFALSE 47403
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47297: LD_VAR 0 5
47301: PUSH
47302: LD_INT 1
47304: ARRAY
47305: PPUSH
47306: CALL_OW 305
47310: IFFALSE 47338
47312: PUSH
47313: LD_VAR 0 5
47317: PUSH
47318: LD_INT 1
47320: ARRAY
47321: PPUSH
47322: CALL_OW 255
47326: PUSH
47327: LD_VAR 0 1
47331: PPUSH
47332: CALL_OW 255
47336: EQUAL
47337: AND
47338: IFFALSE 47362
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47340: LD_VAR 0 5
47344: PUSH
47345: LD_INT 1
47347: ARRAY
47348: PPUSH
47349: LD_VAR 0 5
47353: PUSH
47354: LD_INT 2
47356: ARRAY
47357: PPUSH
47358: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47362: LD_ADDR_EXP 4
47366: PUSH
47367: LD_EXP 4
47371: PPUSH
47372: LD_VAR 0 4
47376: PPUSH
47377: LD_EXP 4
47381: PUSH
47382: LD_VAR 0 4
47386: ARRAY
47387: PPUSH
47388: LD_VAR 0 3
47392: PPUSH
47393: CALL_OW 3
47397: PPUSH
47398: CALL_OW 1
47402: ST_TO_ADDR
// end ; end ;
47403: GO 47228
47405: POP
47406: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47407: LD_VAR 0 1
47411: PPUSH
47412: LD_EXP 4
47416: PUSH
47417: LD_VAR 0 4
47421: ARRAY
47422: PUSH
47423: LD_INT 0
47425: PLUS
47426: PPUSH
47427: CALL_OW 505
// end ;
47431: LD_VAR 0 2
47435: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47436: LD_INT 0
47438: PPUSH
47439: PPUSH
47440: PPUSH
47441: PPUSH
// if not hack in hackTanks then
47442: LD_VAR 0 1
47446: PUSH
47447: LD_EXP 3
47451: IN
47452: NOT
47453: IFFALSE 47457
// exit ;
47455: GO 47542
// index := GetElementIndex ( hackTanks , hack ) ;
47457: LD_ADDR_VAR 0 5
47461: PUSH
47462: LD_EXP 3
47466: PPUSH
47467: LD_VAR 0 1
47471: PPUSH
47472: CALL 5385 0 2
47476: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47477: LD_ADDR_VAR 0 4
47481: PUSH
47482: DOUBLE
47483: LD_INT 1
47485: DEC
47486: ST_TO_ADDR
47487: LD_EXP 4
47491: PUSH
47492: LD_VAR 0 5
47496: ARRAY
47497: PUSH
47498: FOR_TO
47499: IFFALSE 47540
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47501: LD_EXP 4
47505: PUSH
47506: LD_VAR 0 5
47510: ARRAY
47511: PUSH
47512: LD_VAR 0 4
47516: ARRAY
47517: PUSH
47518: LD_INT 1
47520: ARRAY
47521: PUSH
47522: LD_VAR 0 2
47526: EQUAL
47527: IFFALSE 47538
// KillUnit ( vehicle ) ;
47529: LD_VAR 0 2
47533: PPUSH
47534: CALL_OW 66
47538: GO 47498
47540: POP
47541: POP
// end ;
47542: LD_VAR 0 3
47546: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
47547: LD_EXP 8
47551: NOT
47552: IFFALSE 47587
47554: GO 47556
47556: DISABLE
// begin initMiner := true ;
47557: LD_ADDR_EXP 8
47561: PUSH
47562: LD_INT 1
47564: ST_TO_ADDR
// minersList := [ ] ;
47565: LD_ADDR_EXP 9
47569: PUSH
47570: EMPTY
47571: ST_TO_ADDR
// minerMinesList := [ ] ;
47572: LD_ADDR_EXP 10
47576: PUSH
47577: EMPTY
47578: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
47579: LD_ADDR_EXP 11
47583: PUSH
47584: LD_INT 5
47586: ST_TO_ADDR
// end ;
47587: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
47588: LD_EXP 8
47592: IFFALSE 47610
47594: PUSH
47595: LD_INT 34
47597: PUSH
47598: LD_INT 81
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PPUSH
47605: CALL_OW 69
47609: AND
47610: IFFALSE 48073
47612: GO 47614
47614: DISABLE
47615: LD_INT 0
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
// begin enable ;
47621: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
47622: LD_ADDR_VAR 0 1
47626: PUSH
47627: LD_INT 34
47629: PUSH
47630: LD_INT 81
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PPUSH
47637: CALL_OW 69
47641: PUSH
47642: FOR_IN
47643: IFFALSE 47715
// begin if not i in minersList then
47645: LD_VAR 0 1
47649: PUSH
47650: LD_EXP 9
47654: IN
47655: NOT
47656: IFFALSE 47713
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
47658: LD_ADDR_EXP 9
47662: PUSH
47663: LD_EXP 9
47667: PPUSH
47668: LD_EXP 9
47672: PUSH
47673: LD_INT 1
47675: PLUS
47676: PPUSH
47677: LD_VAR 0 1
47681: PPUSH
47682: CALL_OW 1
47686: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
47687: LD_ADDR_EXP 10
47691: PUSH
47692: LD_EXP 10
47696: PPUSH
47697: LD_EXP 10
47701: PUSH
47702: LD_INT 1
47704: PLUS
47705: PPUSH
47706: EMPTY
47707: PPUSH
47708: CALL_OW 1
47712: ST_TO_ADDR
// end end ;
47713: GO 47642
47715: POP
47716: POP
// for i := minerMinesList downto 1 do
47717: LD_ADDR_VAR 0 1
47721: PUSH
47722: DOUBLE
47723: LD_EXP 10
47727: INC
47728: ST_TO_ADDR
47729: LD_INT 1
47731: PUSH
47732: FOR_DOWNTO
47733: IFFALSE 48071
// begin if IsLive ( minersList [ i ] ) then
47735: LD_EXP 9
47739: PUSH
47740: LD_VAR 0 1
47744: ARRAY
47745: PPUSH
47746: CALL_OW 300
47750: IFFALSE 47778
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
47752: LD_EXP 9
47756: PUSH
47757: LD_VAR 0 1
47761: ARRAY
47762: PPUSH
47763: LD_EXP 10
47767: PUSH
47768: LD_VAR 0 1
47772: ARRAY
47773: PPUSH
47774: CALL_OW 505
// if not minerMinesList [ i ] then
47778: LD_EXP 10
47782: PUSH
47783: LD_VAR 0 1
47787: ARRAY
47788: NOT
47789: IFFALSE 47793
// continue ;
47791: GO 47732
// for j := minerMinesList [ i ] downto 1 do
47793: LD_ADDR_VAR 0 2
47797: PUSH
47798: DOUBLE
47799: LD_EXP 10
47803: PUSH
47804: LD_VAR 0 1
47808: ARRAY
47809: INC
47810: ST_TO_ADDR
47811: LD_INT 1
47813: PUSH
47814: FOR_DOWNTO
47815: IFFALSE 48067
// begin side := GetSide ( minersList [ i ] ) ;
47817: LD_ADDR_VAR 0 3
47821: PUSH
47822: LD_EXP 9
47826: PUSH
47827: LD_VAR 0 1
47831: ARRAY
47832: PPUSH
47833: CALL_OW 255
47837: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
47838: LD_ADDR_VAR 0 4
47842: PUSH
47843: LD_EXP 10
47847: PUSH
47848: LD_VAR 0 1
47852: ARRAY
47853: PUSH
47854: LD_VAR 0 2
47858: ARRAY
47859: PUSH
47860: LD_INT 1
47862: ARRAY
47863: PPUSH
47864: LD_EXP 10
47868: PUSH
47869: LD_VAR 0 1
47873: ARRAY
47874: PUSH
47875: LD_VAR 0 2
47879: ARRAY
47880: PUSH
47881: LD_INT 2
47883: ARRAY
47884: PPUSH
47885: CALL_OW 428
47889: ST_TO_ADDR
// if not tmp then
47890: LD_VAR 0 4
47894: NOT
47895: IFFALSE 47899
// continue ;
47897: GO 47814
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
47899: LD_VAR 0 4
47903: PUSH
47904: LD_INT 81
47906: PUSH
47907: LD_VAR 0 3
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PPUSH
47916: CALL_OW 69
47920: IN
47921: IFFALSE 47971
47923: PUSH
47924: LD_EXP 10
47928: PUSH
47929: LD_VAR 0 1
47933: ARRAY
47934: PUSH
47935: LD_VAR 0 2
47939: ARRAY
47940: PUSH
47941: LD_INT 1
47943: ARRAY
47944: PPUSH
47945: LD_EXP 10
47949: PUSH
47950: LD_VAR 0 1
47954: ARRAY
47955: PUSH
47956: LD_VAR 0 2
47960: ARRAY
47961: PUSH
47962: LD_INT 2
47964: ARRAY
47965: PPUSH
47966: CALL_OW 458
47970: AND
47971: IFFALSE 48065
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
47973: LD_EXP 10
47977: PUSH
47978: LD_VAR 0 1
47982: ARRAY
47983: PUSH
47984: LD_VAR 0 2
47988: ARRAY
47989: PUSH
47990: LD_INT 1
47992: ARRAY
47993: PPUSH
47994: LD_EXP 10
47998: PUSH
47999: LD_VAR 0 1
48003: ARRAY
48004: PUSH
48005: LD_VAR 0 2
48009: ARRAY
48010: PUSH
48011: LD_INT 2
48013: ARRAY
48014: PPUSH
48015: LD_VAR 0 3
48019: PPUSH
48020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48024: LD_ADDR_EXP 10
48028: PUSH
48029: LD_EXP 10
48033: PPUSH
48034: LD_VAR 0 1
48038: PPUSH
48039: LD_EXP 10
48043: PUSH
48044: LD_VAR 0 1
48048: ARRAY
48049: PPUSH
48050: LD_VAR 0 2
48054: PPUSH
48055: CALL_OW 3
48059: PPUSH
48060: CALL_OW 1
48064: ST_TO_ADDR
// end ; end ;
48065: GO 47814
48067: POP
48068: POP
// end ;
48069: GO 47732
48071: POP
48072: POP
// end ;
48073: PPOPN 4
48075: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48076: LD_INT 0
48078: PPUSH
48079: PPUSH
// result := false ;
48080: LD_ADDR_VAR 0 4
48084: PUSH
48085: LD_INT 0
48087: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48088: LD_VAR 0 1
48092: PPUSH
48093: CALL_OW 264
48097: PUSH
48098: LD_INT 81
48100: EQUAL
48101: NOT
48102: IFFALSE 48106
// exit ;
48104: GO 48350
// index := GetElementIndex ( minersList , unit ) ;
48106: LD_ADDR_VAR 0 5
48110: PUSH
48111: LD_EXP 9
48115: PPUSH
48116: LD_VAR 0 1
48120: PPUSH
48121: CALL 5385 0 2
48125: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48126: LD_EXP 10
48130: PUSH
48131: LD_VAR 0 5
48135: ARRAY
48136: PUSH
48137: LD_EXP 11
48141: GREATEREQUAL
48142: IFFALSE 48146
// exit ;
48144: GO 48350
// ComMoveXY ( unit , x , y ) ;
48146: LD_VAR 0 1
48150: PPUSH
48151: LD_VAR 0 2
48155: PPUSH
48156: LD_VAR 0 3
48160: PPUSH
48161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48165: LD_INT 35
48167: PPUSH
48168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48172: LD_VAR 0 1
48176: PPUSH
48177: LD_VAR 0 2
48181: PPUSH
48182: LD_VAR 0 3
48186: PPUSH
48187: CALL 37431 0 3
48191: NOT
48192: IFFALSE 48205
48194: PUSH
48195: LD_VAR 0 1
48199: PPUSH
48200: CALL_OW 314
48204: AND
48205: IFFALSE 48209
// exit ;
48207: GO 48350
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48209: LD_VAR 0 2
48213: PPUSH
48214: LD_VAR 0 3
48218: PPUSH
48219: CALL_OW 428
48223: PUSH
48224: LD_VAR 0 1
48228: EQUAL
48229: IFFALSE 48243
48231: PUSH
48232: LD_VAR 0 1
48236: PPUSH
48237: CALL_OW 314
48241: NOT
48242: AND
48243: IFFALSE 48165
// PlaySoundXY ( x , y , PlantMine ) ;
48245: LD_VAR 0 2
48249: PPUSH
48250: LD_VAR 0 3
48254: PPUSH
48255: LD_STRING PlantMine
48257: PPUSH
48258: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48262: LD_VAR 0 2
48266: PPUSH
48267: LD_VAR 0 3
48271: PPUSH
48272: LD_VAR 0 1
48276: PPUSH
48277: CALL_OW 255
48281: PPUSH
48282: LD_INT 0
48284: PPUSH
48285: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48289: LD_ADDR_EXP 10
48293: PUSH
48294: LD_EXP 10
48298: PPUSH
48299: LD_VAR 0 5
48303: PUSH
48304: LD_EXP 10
48308: PUSH
48309: LD_VAR 0 5
48313: ARRAY
48314: PUSH
48315: LD_INT 1
48317: PLUS
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PPUSH
48323: LD_VAR 0 2
48327: PUSH
48328: LD_VAR 0 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PPUSH
48337: CALL 5602 0 3
48341: ST_TO_ADDR
// result := true ;
48342: LD_ADDR_VAR 0 4
48346: PUSH
48347: LD_INT 1
48349: ST_TO_ADDR
// end ;
48350: LD_VAR 0 4
48354: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48355: LD_INT 0
48357: PPUSH
48358: PPUSH
48359: PPUSH
// if not unit in minersList then
48360: LD_VAR 0 1
48364: PUSH
48365: LD_EXP 9
48369: IN
48370: NOT
48371: IFFALSE 48375
// exit ;
48373: GO 48769
// index := GetElementIndex ( minersList , unit ) ;
48375: LD_ADDR_VAR 0 6
48379: PUSH
48380: LD_EXP 9
48384: PPUSH
48385: LD_VAR 0 1
48389: PPUSH
48390: CALL 5385 0 2
48394: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48395: LD_ADDR_VAR 0 5
48399: PUSH
48400: DOUBLE
48401: LD_EXP 10
48405: PUSH
48406: LD_VAR 0 6
48410: ARRAY
48411: INC
48412: ST_TO_ADDR
48413: LD_INT 1
48415: PUSH
48416: FOR_DOWNTO
48417: IFFALSE 48580
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48419: LD_EXP 10
48423: PUSH
48424: LD_VAR 0 6
48428: ARRAY
48429: PUSH
48430: LD_VAR 0 5
48434: ARRAY
48435: PUSH
48436: LD_INT 1
48438: ARRAY
48439: PUSH
48440: LD_VAR 0 2
48444: EQUAL
48445: IFFALSE 48475
48447: PUSH
48448: LD_EXP 10
48452: PUSH
48453: LD_VAR 0 6
48457: ARRAY
48458: PUSH
48459: LD_VAR 0 5
48463: ARRAY
48464: PUSH
48465: LD_INT 2
48467: ARRAY
48468: PUSH
48469: LD_VAR 0 3
48473: EQUAL
48474: AND
48475: IFFALSE 48578
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48477: LD_EXP 10
48481: PUSH
48482: LD_VAR 0 6
48486: ARRAY
48487: PUSH
48488: LD_VAR 0 5
48492: ARRAY
48493: PUSH
48494: LD_INT 1
48496: ARRAY
48497: PPUSH
48498: LD_EXP 10
48502: PUSH
48503: LD_VAR 0 6
48507: ARRAY
48508: PUSH
48509: LD_VAR 0 5
48513: ARRAY
48514: PUSH
48515: LD_INT 2
48517: ARRAY
48518: PPUSH
48519: LD_VAR 0 1
48523: PPUSH
48524: CALL_OW 255
48528: PPUSH
48529: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48533: LD_ADDR_EXP 10
48537: PUSH
48538: LD_EXP 10
48542: PPUSH
48543: LD_VAR 0 6
48547: PPUSH
48548: LD_EXP 10
48552: PUSH
48553: LD_VAR 0 6
48557: ARRAY
48558: PPUSH
48559: LD_VAR 0 5
48563: PPUSH
48564: CALL_OW 3
48568: PPUSH
48569: CALL_OW 1
48573: ST_TO_ADDR
// exit ;
48574: POP
48575: POP
48576: GO 48769
// end ; end ;
48578: GO 48416
48580: POP
48581: POP
// for i := minerMinesList [ index ] downto 1 do
48582: LD_ADDR_VAR 0 5
48586: PUSH
48587: DOUBLE
48588: LD_EXP 10
48592: PUSH
48593: LD_VAR 0 6
48597: ARRAY
48598: INC
48599: ST_TO_ADDR
48600: LD_INT 1
48602: PUSH
48603: FOR_DOWNTO
48604: IFFALSE 48767
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
48606: LD_EXP 10
48610: PUSH
48611: LD_VAR 0 6
48615: ARRAY
48616: PUSH
48617: LD_VAR 0 5
48621: ARRAY
48622: PUSH
48623: LD_INT 1
48625: ARRAY
48626: PPUSH
48627: LD_EXP 10
48631: PUSH
48632: LD_VAR 0 6
48636: ARRAY
48637: PUSH
48638: LD_VAR 0 5
48642: ARRAY
48643: PUSH
48644: LD_INT 2
48646: ARRAY
48647: PPUSH
48648: LD_VAR 0 2
48652: PPUSH
48653: LD_VAR 0 3
48657: PPUSH
48658: CALL_OW 298
48662: PUSH
48663: LD_INT 6
48665: LESS
48666: IFFALSE 48765
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48668: LD_EXP 10
48672: PUSH
48673: LD_VAR 0 6
48677: ARRAY
48678: PUSH
48679: LD_VAR 0 5
48683: ARRAY
48684: PUSH
48685: LD_INT 1
48687: ARRAY
48688: PPUSH
48689: LD_EXP 10
48693: PUSH
48694: LD_VAR 0 6
48698: ARRAY
48699: PUSH
48700: LD_VAR 0 5
48704: ARRAY
48705: PUSH
48706: LD_INT 2
48708: ARRAY
48709: PPUSH
48710: LD_VAR 0 1
48714: PPUSH
48715: CALL_OW 255
48719: PPUSH
48720: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48724: LD_ADDR_EXP 10
48728: PUSH
48729: LD_EXP 10
48733: PPUSH
48734: LD_VAR 0 6
48738: PPUSH
48739: LD_EXP 10
48743: PUSH
48744: LD_VAR 0 6
48748: ARRAY
48749: PPUSH
48750: LD_VAR 0 5
48754: PPUSH
48755: CALL_OW 3
48759: PPUSH
48760: CALL_OW 1
48764: ST_TO_ADDR
// end ; end ;
48765: GO 48603
48767: POP
48768: POP
// end ;
48769: LD_VAR 0 4
48773: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
48774: LD_INT 0
48776: PPUSH
48777: PPUSH
48778: PPUSH
48779: PPUSH
48780: PPUSH
48781: PPUSH
48782: PPUSH
48783: PPUSH
48784: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
48785: LD_VAR 0 1
48789: PPUSH
48790: CALL_OW 264
48794: PUSH
48795: LD_INT 81
48797: EQUAL
48798: NOT
48799: IFTRUE 48814
48801: PUSH
48802: LD_VAR 0 1
48806: PUSH
48807: LD_EXP 9
48811: IN
48812: NOT
48813: OR
48814: IFFALSE 48818
// exit ;
48816: GO 49144
// index := GetElementIndex ( minersList , unit ) ;
48818: LD_ADDR_VAR 0 6
48822: PUSH
48823: LD_EXP 9
48827: PPUSH
48828: LD_VAR 0 1
48832: PPUSH
48833: CALL 5385 0 2
48837: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
48838: LD_ADDR_VAR 0 8
48842: PUSH
48843: LD_EXP 11
48847: PUSH
48848: LD_EXP 10
48852: PUSH
48853: LD_VAR 0 6
48857: ARRAY
48858: MINUS
48859: ST_TO_ADDR
// if not minesFreeAmount then
48860: LD_VAR 0 8
48864: NOT
48865: IFFALSE 48869
// exit ;
48867: GO 49144
// tmp := [ ] ;
48869: LD_ADDR_VAR 0 7
48873: PUSH
48874: EMPTY
48875: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
48876: LD_ADDR_VAR 0 5
48880: PUSH
48881: DOUBLE
48882: LD_INT 1
48884: DEC
48885: ST_TO_ADDR
48886: LD_VAR 0 8
48890: PUSH
48891: FOR_TO
48892: IFFALSE 49091
// begin _d := rand ( 0 , 5 ) ;
48894: LD_ADDR_VAR 0 11
48898: PUSH
48899: LD_INT 0
48901: PPUSH
48902: LD_INT 5
48904: PPUSH
48905: CALL_OW 12
48909: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
48910: LD_ADDR_VAR 0 12
48914: PUSH
48915: LD_INT 2
48917: PPUSH
48918: LD_INT 6
48920: PPUSH
48921: CALL_OW 12
48925: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
48926: LD_ADDR_VAR 0 9
48930: PUSH
48931: LD_VAR 0 2
48935: PPUSH
48936: LD_VAR 0 11
48940: PPUSH
48941: LD_VAR 0 12
48945: PPUSH
48946: CALL_OW 272
48950: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
48951: LD_ADDR_VAR 0 10
48955: PUSH
48956: LD_VAR 0 3
48960: PPUSH
48961: LD_VAR 0 11
48965: PPUSH
48966: LD_VAR 0 12
48970: PPUSH
48971: CALL_OW 273
48975: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
48976: LD_VAR 0 9
48980: PPUSH
48981: LD_VAR 0 10
48985: PPUSH
48986: CALL_OW 488
48990: IFFALSE 49014
48992: PUSH
48993: LD_VAR 0 9
48997: PUSH
48998: LD_VAR 0 10
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_VAR 0 7
49011: IN
49012: NOT
49013: AND
49014: IFFALSE 49033
49016: PUSH
49017: LD_VAR 0 9
49021: PPUSH
49022: LD_VAR 0 10
49026: PPUSH
49027: CALL_OW 458
49031: NOT
49032: AND
49033: IFFALSE 49075
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49035: LD_ADDR_VAR 0 7
49039: PUSH
49040: LD_VAR 0 7
49044: PPUSH
49045: LD_VAR 0 7
49049: PUSH
49050: LD_INT 1
49052: PLUS
49053: PPUSH
49054: LD_VAR 0 9
49058: PUSH
49059: LD_VAR 0 10
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PPUSH
49068: CALL_OW 1
49072: ST_TO_ADDR
49073: GO 49089
// i := i - 1 ;
49075: LD_ADDR_VAR 0 5
49079: PUSH
49080: LD_VAR 0 5
49084: PUSH
49085: LD_INT 1
49087: MINUS
49088: ST_TO_ADDR
// end ;
49089: GO 48891
49091: POP
49092: POP
// for i in tmp do
49093: LD_ADDR_VAR 0 5
49097: PUSH
49098: LD_VAR 0 7
49102: PUSH
49103: FOR_IN
49104: IFFALSE 49142
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49106: LD_VAR 0 1
49110: PPUSH
49111: LD_VAR 0 5
49115: PUSH
49116: LD_INT 1
49118: ARRAY
49119: PPUSH
49120: LD_VAR 0 5
49124: PUSH
49125: LD_INT 2
49127: ARRAY
49128: PPUSH
49129: CALL 48076 0 3
49133: NOT
49134: IFFALSE 49140
// exit ;
49136: POP
49137: POP
49138: GO 49144
49140: GO 49103
49142: POP
49143: POP
// end ;
49144: LD_VAR 0 4
49148: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
49149: LD_INT 0
49151: PPUSH
49152: PPUSH
49153: PPUSH
49154: PPUSH
49155: PPUSH
49156: PPUSH
49157: PPUSH
49158: PPUSH
49159: PPUSH
// if GetClass ( unit ) <> class_sniper then
49160: LD_VAR 0 1
49164: PPUSH
49165: CALL_OW 257
49169: PUSH
49170: LD_INT 5
49172: NONEQUAL
49173: IFFALSE 49177
// exit ;
49175: GO 49647
// dist := 8 ;
49177: LD_ADDR_VAR 0 5
49181: PUSH
49182: LD_INT 8
49184: ST_TO_ADDR
// viewRange := 12 ;
49185: LD_ADDR_VAR 0 8
49189: PUSH
49190: LD_INT 12
49192: ST_TO_ADDR
// side := GetSide ( unit ) ;
49193: LD_ADDR_VAR 0 6
49197: PUSH
49198: LD_VAR 0 1
49202: PPUSH
49203: CALL_OW 255
49207: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49208: LD_INT 61
49210: PPUSH
49211: LD_VAR 0 6
49215: PPUSH
49216: CALL_OW 321
49220: PUSH
49221: LD_INT 2
49223: EQUAL
49224: IFFALSE 49234
// viewRange := 16 ;
49226: LD_ADDR_VAR 0 8
49230: PUSH
49231: LD_INT 16
49233: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49234: LD_VAR 0 1
49238: PPUSH
49239: LD_VAR 0 2
49243: PPUSH
49244: LD_VAR 0 3
49248: PPUSH
49249: CALL_OW 297
49253: PUSH
49254: LD_VAR 0 5
49258: GREATER
49259: IFFALSE 49338
// begin ComMoveXY ( unit , x , y ) ;
49261: LD_VAR 0 1
49265: PPUSH
49266: LD_VAR 0 2
49270: PPUSH
49271: LD_VAR 0 3
49275: PPUSH
49276: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49280: LD_INT 35
49282: PPUSH
49283: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49287: LD_VAR 0 1
49291: PPUSH
49292: LD_VAR 0 2
49296: PPUSH
49297: LD_VAR 0 3
49301: PPUSH
49302: CALL 37431 0 3
49306: NOT
49307: IFFALSE 49311
// exit ;
49309: GO 49647
// until GetDistUnitXY ( unit , x , y ) < dist ;
49311: LD_VAR 0 1
49315: PPUSH
49316: LD_VAR 0 2
49320: PPUSH
49321: LD_VAR 0 3
49325: PPUSH
49326: CALL_OW 297
49330: PUSH
49331: LD_VAR 0 5
49335: LESS
49336: IFFALSE 49280
// end ; ComTurnXY ( unit , x , y ) ;
49338: LD_VAR 0 1
49342: PPUSH
49343: LD_VAR 0 2
49347: PPUSH
49348: LD_VAR 0 3
49352: PPUSH
49353: CALL_OW 118
// repeat if Multiplayer then
49357: LD_OWVAR 4
49361: IFFALSE 49372
// wait ( 35 ) else
49363: LD_INT 35
49365: PPUSH
49366: CALL_OW 67
49370: GO 49379
// wait ( 5 ) ;
49372: LD_INT 5
49374: PPUSH
49375: CALL_OW 67
// _d := GetDir ( unit ) ;
49379: LD_ADDR_VAR 0 11
49383: PUSH
49384: LD_VAR 0 1
49388: PPUSH
49389: CALL_OW 254
49393: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
49394: LD_ADDR_VAR 0 7
49398: PUSH
49399: LD_VAR 0 1
49403: PPUSH
49404: CALL_OW 250
49408: PPUSH
49409: LD_VAR 0 1
49413: PPUSH
49414: CALL_OW 251
49418: PPUSH
49419: LD_VAR 0 2
49423: PPUSH
49424: LD_VAR 0 3
49428: PPUSH
49429: CALL 40067 0 4
49433: ST_TO_ADDR
// until dir = _d ;
49434: LD_VAR 0 7
49438: PUSH
49439: LD_VAR 0 11
49443: EQUAL
49444: IFFALSE 49357
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
49446: LD_ADDR_VAR 0 9
49450: PUSH
49451: LD_VAR 0 1
49455: PPUSH
49456: CALL_OW 250
49460: PPUSH
49461: LD_VAR 0 7
49465: PPUSH
49466: LD_VAR 0 5
49470: PPUSH
49471: CALL_OW 272
49475: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
49476: LD_ADDR_VAR 0 10
49480: PUSH
49481: LD_VAR 0 1
49485: PPUSH
49486: CALL_OW 251
49490: PPUSH
49491: LD_VAR 0 7
49495: PPUSH
49496: LD_VAR 0 5
49500: PPUSH
49501: CALL_OW 273
49505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49506: LD_VAR 0 9
49510: PPUSH
49511: LD_VAR 0 10
49515: PPUSH
49516: CALL_OW 488
49520: NOT
49521: IFFALSE 49525
// exit ;
49523: GO 49647
// ComAnimCustom ( unit , 1 ) ;
49525: LD_VAR 0 1
49529: PPUSH
49530: LD_INT 1
49532: PPUSH
49533: CALL_OW 592
// p := 0 ;
49537: LD_ADDR_VAR 0 12
49541: PUSH
49542: LD_INT 0
49544: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49545: LD_VAR 0 9
49549: PPUSH
49550: LD_VAR 0 10
49554: PPUSH
49555: LD_VAR 0 6
49559: PPUSH
49560: LD_VAR 0 8
49564: PPUSH
49565: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
49569: LD_INT 35
49571: PPUSH
49572: CALL_OW 67
// p := Inc ( p ) ;
49576: LD_ADDR_VAR 0 12
49580: PUSH
49581: LD_VAR 0 12
49585: PPUSH
49586: CALL 40023 0 1
49590: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
49591: LD_VAR 0 12
49595: PUSH
49596: LD_INT 3
49598: EQUAL
49599: IFTRUE 49613
49601: PUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 302
49611: NOT
49612: OR
49613: IFTRUE 49626
49615: PUSH
49616: LD_VAR 0 1
49620: PPUSH
49621: CALL_OW 301
49625: OR
49626: IFFALSE 49569
// RemoveSeeing ( _x , _y , side ) ;
49628: LD_VAR 0 9
49632: PPUSH
49633: LD_VAR 0 10
49637: PPUSH
49638: LD_VAR 0 6
49642: PPUSH
49643: CALL_OW 331
// end ; end_of_file
49647: LD_VAR 0 4
49651: RET
// export globalGameSaveCounter ; every 0 0$1 do
49652: GO 49654
49654: DISABLE
// begin enable ;
49655: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49656: LD_STRING updateTimer(
49658: PUSH
49659: LD_OWVAR 1
49663: STR
49664: PUSH
49665: LD_STRING );
49667: STR
49668: PPUSH
49669: CALL_OW 559
// end ;
49673: END
// every 0 0$1 do
49674: GO 49676
49676: DISABLE
// begin globalGameSaveCounter := 0 ;
49677: LD_ADDR_EXP 12
49681: PUSH
49682: LD_INT 0
49684: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
49685: LD_STRING setGameSaveCounter(0)
49687: PPUSH
49688: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
49692: LD_STRING initStreamRollete();
49694: PPUSH
49695: CALL_OW 559
// InitStreamMode ;
49699: CALL 51044 0 0
// DefineStreamItems ( false ) ;
49703: LD_INT 0
49705: PPUSH
49706: CALL 51508 0 1
// end ;
49710: END
// export function SOS_MapStart ( ) ; begin
49711: LD_INT 0
49713: PPUSH
// if streamModeActive then
49714: LD_EXP 13
49718: IFFALSE 49727
// DefineStreamItems ( true ) ;
49720: LD_INT 1
49722: PPUSH
49723: CALL 51508 0 1
// UpdateLuaVariables ( ) ;
49727: CALL 49744 0 0
// UpdateFactoryWaypoints ( ) ;
49731: CALL 64630 0 0
// UpdateWarehouseGatheringPoints ( ) ;
49735: CALL 64882 0 0
// end ;
49739: LD_VAR 0 1
49743: RET
// function UpdateLuaVariables ( ) ; begin
49744: LD_INT 0
49746: PPUSH
// if globalGameSaveCounter then
49747: LD_EXP 12
49751: IFFALSE 49785
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
49753: LD_ADDR_EXP 12
49757: PUSH
49758: LD_EXP 12
49762: PPUSH
49763: CALL 40023 0 1
49767: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49768: LD_STRING setGameSaveCounter(
49770: PUSH
49771: LD_EXP 12
49775: STR
49776: PUSH
49777: LD_STRING )
49779: STR
49780: PPUSH
49781: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
49785: LD_STRING setGameDifficulty(
49787: PUSH
49788: LD_OWVAR 67
49792: STR
49793: PUSH
49794: LD_STRING )
49796: STR
49797: PPUSH
49798: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
49802: LD_STRING displayDifficulty(
49804: PUSH
49805: LD_OWVAR 67
49809: STR
49810: PUSH
49811: LD_STRING )
49813: STR
49814: PPUSH
49815: CALL_OW 559
// end ;
49819: LD_VAR 0 1
49823: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49824: LD_INT 0
49826: PPUSH
// if p2 = stream_mode then
49827: LD_VAR 0 2
49831: PUSH
49832: LD_INT 100
49834: EQUAL
49835: IFFALSE 50838
// begin if not StreamModeActive then
49837: LD_EXP 13
49841: NOT
49842: IFFALSE 49852
// StreamModeActive := true ;
49844: LD_ADDR_EXP 13
49848: PUSH
49849: LD_INT 1
49851: ST_TO_ADDR
// if p3 = 0 then
49852: LD_VAR 0 3
49856: PUSH
49857: LD_INT 0
49859: EQUAL
49860: IFFALSE 49866
// InitStreamMode ;
49862: CALL 51044 0 0
// if p3 = 1 then
49866: LD_VAR 0 3
49870: PUSH
49871: LD_INT 1
49873: EQUAL
49874: IFFALSE 49884
// sRocket := true ;
49876: LD_ADDR_EXP 18
49880: PUSH
49881: LD_INT 1
49883: ST_TO_ADDR
// if p3 = 2 then
49884: LD_VAR 0 3
49888: PUSH
49889: LD_INT 2
49891: EQUAL
49892: IFFALSE 49902
// sSpeed := true ;
49894: LD_ADDR_EXP 17
49898: PUSH
49899: LD_INT 1
49901: ST_TO_ADDR
// if p3 = 3 then
49902: LD_VAR 0 3
49906: PUSH
49907: LD_INT 3
49909: EQUAL
49910: IFFALSE 49920
// sEngine := true ;
49912: LD_ADDR_EXP 19
49916: PUSH
49917: LD_INT 1
49919: ST_TO_ADDR
// if p3 = 4 then
49920: LD_VAR 0 3
49924: PUSH
49925: LD_INT 4
49927: EQUAL
49928: IFFALSE 49938
// sSpec := true ;
49930: LD_ADDR_EXP 16
49934: PUSH
49935: LD_INT 1
49937: ST_TO_ADDR
// if p3 = 5 then
49938: LD_VAR 0 3
49942: PUSH
49943: LD_INT 5
49945: EQUAL
49946: IFFALSE 49956
// sLevel := true ;
49948: LD_ADDR_EXP 20
49952: PUSH
49953: LD_INT 1
49955: ST_TO_ADDR
// if p3 = 6 then
49956: LD_VAR 0 3
49960: PUSH
49961: LD_INT 6
49963: EQUAL
49964: IFFALSE 49974
// sArmoury := true ;
49966: LD_ADDR_EXP 21
49970: PUSH
49971: LD_INT 1
49973: ST_TO_ADDR
// if p3 = 7 then
49974: LD_VAR 0 3
49978: PUSH
49979: LD_INT 7
49981: EQUAL
49982: IFFALSE 49992
// sRadar := true ;
49984: LD_ADDR_EXP 22
49988: PUSH
49989: LD_INT 1
49991: ST_TO_ADDR
// if p3 = 8 then
49992: LD_VAR 0 3
49996: PUSH
49997: LD_INT 8
49999: EQUAL
50000: IFFALSE 50010
// sBunker := true ;
50002: LD_ADDR_EXP 23
50006: PUSH
50007: LD_INT 1
50009: ST_TO_ADDR
// if p3 = 9 then
50010: LD_VAR 0 3
50014: PUSH
50015: LD_INT 9
50017: EQUAL
50018: IFFALSE 50028
// sHack := true ;
50020: LD_ADDR_EXP 24
50024: PUSH
50025: LD_INT 1
50027: ST_TO_ADDR
// if p3 = 10 then
50028: LD_VAR 0 3
50032: PUSH
50033: LD_INT 10
50035: EQUAL
50036: IFFALSE 50046
// sFire := true ;
50038: LD_ADDR_EXP 25
50042: PUSH
50043: LD_INT 1
50045: ST_TO_ADDR
// if p3 = 11 then
50046: LD_VAR 0 3
50050: PUSH
50051: LD_INT 11
50053: EQUAL
50054: IFFALSE 50064
// sRefresh := true ;
50056: LD_ADDR_EXP 26
50060: PUSH
50061: LD_INT 1
50063: ST_TO_ADDR
// if p3 = 12 then
50064: LD_VAR 0 3
50068: PUSH
50069: LD_INT 12
50071: EQUAL
50072: IFFALSE 50082
// sExp := true ;
50074: LD_ADDR_EXP 27
50078: PUSH
50079: LD_INT 1
50081: ST_TO_ADDR
// if p3 = 13 then
50082: LD_VAR 0 3
50086: PUSH
50087: LD_INT 13
50089: EQUAL
50090: IFFALSE 50100
// sDepot := true ;
50092: LD_ADDR_EXP 28
50096: PUSH
50097: LD_INT 1
50099: ST_TO_ADDR
// if p3 = 14 then
50100: LD_VAR 0 3
50104: PUSH
50105: LD_INT 14
50107: EQUAL
50108: IFFALSE 50118
// sFlag := true ;
50110: LD_ADDR_EXP 29
50114: PUSH
50115: LD_INT 1
50117: ST_TO_ADDR
// if p3 = 15 then
50118: LD_VAR 0 3
50122: PUSH
50123: LD_INT 15
50125: EQUAL
50126: IFFALSE 50136
// sKamikadze := true ;
50128: LD_ADDR_EXP 37
50132: PUSH
50133: LD_INT 1
50135: ST_TO_ADDR
// if p3 = 16 then
50136: LD_VAR 0 3
50140: PUSH
50141: LD_INT 16
50143: EQUAL
50144: IFFALSE 50154
// sTroll := true ;
50146: LD_ADDR_EXP 38
50150: PUSH
50151: LD_INT 1
50153: ST_TO_ADDR
// if p3 = 17 then
50154: LD_VAR 0 3
50158: PUSH
50159: LD_INT 17
50161: EQUAL
50162: IFFALSE 50172
// sSlow := true ;
50164: LD_ADDR_EXP 39
50168: PUSH
50169: LD_INT 1
50171: ST_TO_ADDR
// if p3 = 18 then
50172: LD_VAR 0 3
50176: PUSH
50177: LD_INT 18
50179: EQUAL
50180: IFFALSE 50190
// sLack := true ;
50182: LD_ADDR_EXP 40
50186: PUSH
50187: LD_INT 1
50189: ST_TO_ADDR
// if p3 = 19 then
50190: LD_VAR 0 3
50194: PUSH
50195: LD_INT 19
50197: EQUAL
50198: IFFALSE 50208
// sTank := true ;
50200: LD_ADDR_EXP 42
50204: PUSH
50205: LD_INT 1
50207: ST_TO_ADDR
// if p3 = 20 then
50208: LD_VAR 0 3
50212: PUSH
50213: LD_INT 20
50215: EQUAL
50216: IFFALSE 50226
// sRemote := true ;
50218: LD_ADDR_EXP 43
50222: PUSH
50223: LD_INT 1
50225: ST_TO_ADDR
// if p3 = 21 then
50226: LD_VAR 0 3
50230: PUSH
50231: LD_INT 21
50233: EQUAL
50234: IFFALSE 50244
// sPowell := true ;
50236: LD_ADDR_EXP 44
50240: PUSH
50241: LD_INT 1
50243: ST_TO_ADDR
// if p3 = 22 then
50244: LD_VAR 0 3
50248: PUSH
50249: LD_INT 22
50251: EQUAL
50252: IFFALSE 50262
// sTeleport := true ;
50254: LD_ADDR_EXP 47
50258: PUSH
50259: LD_INT 1
50261: ST_TO_ADDR
// if p3 = 23 then
50262: LD_VAR 0 3
50266: PUSH
50267: LD_INT 23
50269: EQUAL
50270: IFFALSE 50280
// sOilTower := true ;
50272: LD_ADDR_EXP 49
50276: PUSH
50277: LD_INT 1
50279: ST_TO_ADDR
// if p3 = 24 then
50280: LD_VAR 0 3
50284: PUSH
50285: LD_INT 24
50287: EQUAL
50288: IFFALSE 50298
// sShovel := true ;
50290: LD_ADDR_EXP 50
50294: PUSH
50295: LD_INT 1
50297: ST_TO_ADDR
// if p3 = 25 then
50298: LD_VAR 0 3
50302: PUSH
50303: LD_INT 25
50305: EQUAL
50306: IFFALSE 50316
// sSheik := true ;
50308: LD_ADDR_EXP 51
50312: PUSH
50313: LD_INT 1
50315: ST_TO_ADDR
// if p3 = 26 then
50316: LD_VAR 0 3
50320: PUSH
50321: LD_INT 26
50323: EQUAL
50324: IFFALSE 50334
// sEarthquake := true ;
50326: LD_ADDR_EXP 53
50330: PUSH
50331: LD_INT 1
50333: ST_TO_ADDR
// if p3 = 27 then
50334: LD_VAR 0 3
50338: PUSH
50339: LD_INT 27
50341: EQUAL
50342: IFFALSE 50352
// sAI := true ;
50344: LD_ADDR_EXP 54
50348: PUSH
50349: LD_INT 1
50351: ST_TO_ADDR
// if p3 = 28 then
50352: LD_VAR 0 3
50356: PUSH
50357: LD_INT 28
50359: EQUAL
50360: IFFALSE 50370
// sCargo := true ;
50362: LD_ADDR_EXP 57
50366: PUSH
50367: LD_INT 1
50369: ST_TO_ADDR
// if p3 = 29 then
50370: LD_VAR 0 3
50374: PUSH
50375: LD_INT 29
50377: EQUAL
50378: IFFALSE 50388
// sDLaser := true ;
50380: LD_ADDR_EXP 58
50384: PUSH
50385: LD_INT 1
50387: ST_TO_ADDR
// if p3 = 30 then
50388: LD_VAR 0 3
50392: PUSH
50393: LD_INT 30
50395: EQUAL
50396: IFFALSE 50406
// sExchange := true ;
50398: LD_ADDR_EXP 59
50402: PUSH
50403: LD_INT 1
50405: ST_TO_ADDR
// if p3 = 31 then
50406: LD_VAR 0 3
50410: PUSH
50411: LD_INT 31
50413: EQUAL
50414: IFFALSE 50424
// sFac := true ;
50416: LD_ADDR_EXP 60
50420: PUSH
50421: LD_INT 1
50423: ST_TO_ADDR
// if p3 = 32 then
50424: LD_VAR 0 3
50428: PUSH
50429: LD_INT 32
50431: EQUAL
50432: IFFALSE 50442
// sPower := true ;
50434: LD_ADDR_EXP 61
50438: PUSH
50439: LD_INT 1
50441: ST_TO_ADDR
// if p3 = 33 then
50442: LD_VAR 0 3
50446: PUSH
50447: LD_INT 33
50449: EQUAL
50450: IFFALSE 50460
// sRandom := true ;
50452: LD_ADDR_EXP 62
50456: PUSH
50457: LD_INT 1
50459: ST_TO_ADDR
// if p3 = 34 then
50460: LD_VAR 0 3
50464: PUSH
50465: LD_INT 34
50467: EQUAL
50468: IFFALSE 50478
// sShield := true ;
50470: LD_ADDR_EXP 63
50474: PUSH
50475: LD_INT 1
50477: ST_TO_ADDR
// if p3 = 35 then
50478: LD_VAR 0 3
50482: PUSH
50483: LD_INT 35
50485: EQUAL
50486: IFFALSE 50496
// sTime := true ;
50488: LD_ADDR_EXP 64
50492: PUSH
50493: LD_INT 1
50495: ST_TO_ADDR
// if p3 = 36 then
50496: LD_VAR 0 3
50500: PUSH
50501: LD_INT 36
50503: EQUAL
50504: IFFALSE 50514
// sTools := true ;
50506: LD_ADDR_EXP 65
50510: PUSH
50511: LD_INT 1
50513: ST_TO_ADDR
// if p3 = 101 then
50514: LD_VAR 0 3
50518: PUSH
50519: LD_INT 101
50521: EQUAL
50522: IFFALSE 50532
// sSold := true ;
50524: LD_ADDR_EXP 30
50528: PUSH
50529: LD_INT 1
50531: ST_TO_ADDR
// if p3 = 102 then
50532: LD_VAR 0 3
50536: PUSH
50537: LD_INT 102
50539: EQUAL
50540: IFFALSE 50550
// sDiff := true ;
50542: LD_ADDR_EXP 31
50546: PUSH
50547: LD_INT 1
50549: ST_TO_ADDR
// if p3 = 103 then
50550: LD_VAR 0 3
50554: PUSH
50555: LD_INT 103
50557: EQUAL
50558: IFFALSE 50568
// sFog := true ;
50560: LD_ADDR_EXP 34
50564: PUSH
50565: LD_INT 1
50567: ST_TO_ADDR
// if p3 = 104 then
50568: LD_VAR 0 3
50572: PUSH
50573: LD_INT 104
50575: EQUAL
50576: IFFALSE 50586
// sReset := true ;
50578: LD_ADDR_EXP 35
50582: PUSH
50583: LD_INT 1
50585: ST_TO_ADDR
// if p3 = 105 then
50586: LD_VAR 0 3
50590: PUSH
50591: LD_INT 105
50593: EQUAL
50594: IFFALSE 50604
// sSun := true ;
50596: LD_ADDR_EXP 36
50600: PUSH
50601: LD_INT 1
50603: ST_TO_ADDR
// if p3 = 106 then
50604: LD_VAR 0 3
50608: PUSH
50609: LD_INT 106
50611: EQUAL
50612: IFFALSE 50622
// sTiger := true ;
50614: LD_ADDR_EXP 32
50618: PUSH
50619: LD_INT 1
50621: ST_TO_ADDR
// if p3 = 107 then
50622: LD_VAR 0 3
50626: PUSH
50627: LD_INT 107
50629: EQUAL
50630: IFFALSE 50640
// sBomb := true ;
50632: LD_ADDR_EXP 33
50636: PUSH
50637: LD_INT 1
50639: ST_TO_ADDR
// if p3 = 108 then
50640: LD_VAR 0 3
50644: PUSH
50645: LD_INT 108
50647: EQUAL
50648: IFFALSE 50658
// sWound := true ;
50650: LD_ADDR_EXP 41
50654: PUSH
50655: LD_INT 1
50657: ST_TO_ADDR
// if p3 = 109 then
50658: LD_VAR 0 3
50662: PUSH
50663: LD_INT 109
50665: EQUAL
50666: IFFALSE 50676
// sBetray := true ;
50668: LD_ADDR_EXP 45
50672: PUSH
50673: LD_INT 1
50675: ST_TO_ADDR
// if p3 = 110 then
50676: LD_VAR 0 3
50680: PUSH
50681: LD_INT 110
50683: EQUAL
50684: IFFALSE 50694
// sContamin := true ;
50686: LD_ADDR_EXP 46
50690: PUSH
50691: LD_INT 1
50693: ST_TO_ADDR
// if p3 = 111 then
50694: LD_VAR 0 3
50698: PUSH
50699: LD_INT 111
50701: EQUAL
50702: IFFALSE 50712
// sOil := true ;
50704: LD_ADDR_EXP 48
50708: PUSH
50709: LD_INT 1
50711: ST_TO_ADDR
// if p3 = 112 then
50712: LD_VAR 0 3
50716: PUSH
50717: LD_INT 112
50719: EQUAL
50720: IFFALSE 50730
// sStu := true ;
50722: LD_ADDR_EXP 52
50726: PUSH
50727: LD_INT 1
50729: ST_TO_ADDR
// if p3 = 113 then
50730: LD_VAR 0 3
50734: PUSH
50735: LD_INT 113
50737: EQUAL
50738: IFFALSE 50748
// sBazooka := true ;
50740: LD_ADDR_EXP 55
50744: PUSH
50745: LD_INT 1
50747: ST_TO_ADDR
// if p3 = 114 then
50748: LD_VAR 0 3
50752: PUSH
50753: LD_INT 114
50755: EQUAL
50756: IFFALSE 50766
// sMortar := true ;
50758: LD_ADDR_EXP 56
50762: PUSH
50763: LD_INT 1
50765: ST_TO_ADDR
// if p3 = 115 then
50766: LD_VAR 0 3
50770: PUSH
50771: LD_INT 115
50773: EQUAL
50774: IFFALSE 50784
// sRanger := true ;
50776: LD_ADDR_EXP 66
50780: PUSH
50781: LD_INT 1
50783: ST_TO_ADDR
// if p3 = 116 then
50784: LD_VAR 0 3
50788: PUSH
50789: LD_INT 116
50791: EQUAL
50792: IFFALSE 50802
// sComputer := true ;
50794: LD_ADDR_EXP 67
50798: PUSH
50799: LD_INT 1
50801: ST_TO_ADDR
// if p3 = 117 then
50802: LD_VAR 0 3
50806: PUSH
50807: LD_INT 117
50809: EQUAL
50810: IFFALSE 50820
// s30 := true ;
50812: LD_ADDR_EXP 68
50816: PUSH
50817: LD_INT 1
50819: ST_TO_ADDR
// if p3 = 118 then
50820: LD_VAR 0 3
50824: PUSH
50825: LD_INT 118
50827: EQUAL
50828: IFFALSE 50838
// s60 := true ;
50830: LD_ADDR_EXP 69
50834: PUSH
50835: LD_INT 1
50837: ST_TO_ADDR
// end ; if p2 = hack_mode then
50838: LD_VAR 0 2
50842: PUSH
50843: LD_INT 101
50845: EQUAL
50846: IFFALSE 50974
// begin case p3 of 1 :
50848: LD_VAR 0 3
50852: PUSH
50853: LD_INT 1
50855: DOUBLE
50856: EQUAL
50857: IFTRUE 50861
50859: GO 50868
50861: POP
// hHackUnlimitedResources ; 2 :
50862: CALL 63237 0 0
50866: GO 50974
50868: LD_INT 2
50870: DOUBLE
50871: EQUAL
50872: IFTRUE 50876
50874: GO 50883
50876: POP
// hHackSetLevel10 ; 3 :
50877: CALL 63370 0 0
50881: GO 50974
50883: LD_INT 3
50885: DOUBLE
50886: EQUAL
50887: IFTRUE 50891
50889: GO 50898
50891: POP
// hHackSetLevel10YourUnits ; 4 :
50892: CALL 63455 0 0
50896: GO 50974
50898: LD_INT 4
50900: DOUBLE
50901: EQUAL
50902: IFTRUE 50906
50904: GO 50913
50906: POP
// hHackInvincible ; 5 :
50907: CALL 63903 0 0
50911: GO 50974
50913: LD_INT 5
50915: DOUBLE
50916: EQUAL
50917: IFTRUE 50921
50919: GO 50928
50921: POP
// hHackInvisible ; 6 :
50922: CALL 64014 0 0
50926: GO 50974
50928: LD_INT 6
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50936
50934: GO 50943
50936: POP
// hHackChangeYourSide ; 7 :
50937: CALL 64071 0 0
50941: GO 50974
50943: LD_INT 7
50945: DOUBLE
50946: EQUAL
50947: IFTRUE 50951
50949: GO 50958
50951: POP
// hHackChangeUnitSide ; 8 :
50952: CALL 64113 0 0
50956: GO 50974
50958: LD_INT 8
50960: DOUBLE
50961: EQUAL
50962: IFTRUE 50966
50964: GO 50973
50966: POP
// hHackFog ; end ;
50967: CALL 64214 0 0
50971: GO 50974
50973: POP
// end ; if p2 = game_save_mode then
50974: LD_VAR 0 2
50978: PUSH
50979: LD_INT 102
50981: EQUAL
50982: IFFALSE 51039
// begin if p3 = 1 then
50984: LD_VAR 0 3
50988: PUSH
50989: LD_INT 1
50991: EQUAL
50992: IFFALSE 51004
// globalGameSaveCounter := p4 ;
50994: LD_ADDR_EXP 12
50998: PUSH
50999: LD_VAR 0 4
51003: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51004: LD_VAR 0 3
51008: PUSH
51009: LD_INT 2
51011: EQUAL
51012: IFFALSE 51020
51014: PUSH
51015: LD_EXP 12
51019: AND
51020: IFFALSE 51039
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51022: LD_STRING setGameSaveCounter(
51024: PUSH
51025: LD_EXP 12
51029: STR
51030: PUSH
51031: LD_STRING )
51033: STR
51034: PPUSH
51035: CALL_OW 559
// end ; end ;
51039: LD_VAR 0 7
51043: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51044: LD_INT 0
51046: PPUSH
// streamModeActive := false ;
51047: LD_ADDR_EXP 13
51051: PUSH
51052: LD_INT 0
51054: ST_TO_ADDR
// normalCounter := 36 ;
51055: LD_ADDR_EXP 14
51059: PUSH
51060: LD_INT 36
51062: ST_TO_ADDR
// hardcoreCounter := 18 ;
51063: LD_ADDR_EXP 15
51067: PUSH
51068: LD_INT 18
51070: ST_TO_ADDR
// sRocket := false ;
51071: LD_ADDR_EXP 18
51075: PUSH
51076: LD_INT 0
51078: ST_TO_ADDR
// sSpeed := false ;
51079: LD_ADDR_EXP 17
51083: PUSH
51084: LD_INT 0
51086: ST_TO_ADDR
// sEngine := false ;
51087: LD_ADDR_EXP 19
51091: PUSH
51092: LD_INT 0
51094: ST_TO_ADDR
// sSpec := false ;
51095: LD_ADDR_EXP 16
51099: PUSH
51100: LD_INT 0
51102: ST_TO_ADDR
// sLevel := false ;
51103: LD_ADDR_EXP 20
51107: PUSH
51108: LD_INT 0
51110: ST_TO_ADDR
// sArmoury := false ;
51111: LD_ADDR_EXP 21
51115: PUSH
51116: LD_INT 0
51118: ST_TO_ADDR
// sRadar := false ;
51119: LD_ADDR_EXP 22
51123: PUSH
51124: LD_INT 0
51126: ST_TO_ADDR
// sBunker := false ;
51127: LD_ADDR_EXP 23
51131: PUSH
51132: LD_INT 0
51134: ST_TO_ADDR
// sHack := false ;
51135: LD_ADDR_EXP 24
51139: PUSH
51140: LD_INT 0
51142: ST_TO_ADDR
// sFire := false ;
51143: LD_ADDR_EXP 25
51147: PUSH
51148: LD_INT 0
51150: ST_TO_ADDR
// sRefresh := false ;
51151: LD_ADDR_EXP 26
51155: PUSH
51156: LD_INT 0
51158: ST_TO_ADDR
// sExp := false ;
51159: LD_ADDR_EXP 27
51163: PUSH
51164: LD_INT 0
51166: ST_TO_ADDR
// sDepot := false ;
51167: LD_ADDR_EXP 28
51171: PUSH
51172: LD_INT 0
51174: ST_TO_ADDR
// sFlag := false ;
51175: LD_ADDR_EXP 29
51179: PUSH
51180: LD_INT 0
51182: ST_TO_ADDR
// sKamikadze := false ;
51183: LD_ADDR_EXP 37
51187: PUSH
51188: LD_INT 0
51190: ST_TO_ADDR
// sTroll := false ;
51191: LD_ADDR_EXP 38
51195: PUSH
51196: LD_INT 0
51198: ST_TO_ADDR
// sSlow := false ;
51199: LD_ADDR_EXP 39
51203: PUSH
51204: LD_INT 0
51206: ST_TO_ADDR
// sLack := false ;
51207: LD_ADDR_EXP 40
51211: PUSH
51212: LD_INT 0
51214: ST_TO_ADDR
// sTank := false ;
51215: LD_ADDR_EXP 42
51219: PUSH
51220: LD_INT 0
51222: ST_TO_ADDR
// sRemote := false ;
51223: LD_ADDR_EXP 43
51227: PUSH
51228: LD_INT 0
51230: ST_TO_ADDR
// sPowell := false ;
51231: LD_ADDR_EXP 44
51235: PUSH
51236: LD_INT 0
51238: ST_TO_ADDR
// sTeleport := false ;
51239: LD_ADDR_EXP 47
51243: PUSH
51244: LD_INT 0
51246: ST_TO_ADDR
// sOilTower := false ;
51247: LD_ADDR_EXP 49
51251: PUSH
51252: LD_INT 0
51254: ST_TO_ADDR
// sShovel := false ;
51255: LD_ADDR_EXP 50
51259: PUSH
51260: LD_INT 0
51262: ST_TO_ADDR
// sSheik := false ;
51263: LD_ADDR_EXP 51
51267: PUSH
51268: LD_INT 0
51270: ST_TO_ADDR
// sEarthquake := false ;
51271: LD_ADDR_EXP 53
51275: PUSH
51276: LD_INT 0
51278: ST_TO_ADDR
// sAI := false ;
51279: LD_ADDR_EXP 54
51283: PUSH
51284: LD_INT 0
51286: ST_TO_ADDR
// sCargo := false ;
51287: LD_ADDR_EXP 57
51291: PUSH
51292: LD_INT 0
51294: ST_TO_ADDR
// sDLaser := false ;
51295: LD_ADDR_EXP 58
51299: PUSH
51300: LD_INT 0
51302: ST_TO_ADDR
// sExchange := false ;
51303: LD_ADDR_EXP 59
51307: PUSH
51308: LD_INT 0
51310: ST_TO_ADDR
// sFac := false ;
51311: LD_ADDR_EXP 60
51315: PUSH
51316: LD_INT 0
51318: ST_TO_ADDR
// sPower := false ;
51319: LD_ADDR_EXP 61
51323: PUSH
51324: LD_INT 0
51326: ST_TO_ADDR
// sRandom := false ;
51327: LD_ADDR_EXP 62
51331: PUSH
51332: LD_INT 0
51334: ST_TO_ADDR
// sShield := false ;
51335: LD_ADDR_EXP 63
51339: PUSH
51340: LD_INT 0
51342: ST_TO_ADDR
// sTime := false ;
51343: LD_ADDR_EXP 64
51347: PUSH
51348: LD_INT 0
51350: ST_TO_ADDR
// sTools := false ;
51351: LD_ADDR_EXP 65
51355: PUSH
51356: LD_INT 0
51358: ST_TO_ADDR
// sSold := false ;
51359: LD_ADDR_EXP 30
51363: PUSH
51364: LD_INT 0
51366: ST_TO_ADDR
// sDiff := false ;
51367: LD_ADDR_EXP 31
51371: PUSH
51372: LD_INT 0
51374: ST_TO_ADDR
// sFog := false ;
51375: LD_ADDR_EXP 34
51379: PUSH
51380: LD_INT 0
51382: ST_TO_ADDR
// sReset := false ;
51383: LD_ADDR_EXP 35
51387: PUSH
51388: LD_INT 0
51390: ST_TO_ADDR
// sSun := false ;
51391: LD_ADDR_EXP 36
51395: PUSH
51396: LD_INT 0
51398: ST_TO_ADDR
// sTiger := false ;
51399: LD_ADDR_EXP 32
51403: PUSH
51404: LD_INT 0
51406: ST_TO_ADDR
// sBomb := false ;
51407: LD_ADDR_EXP 33
51411: PUSH
51412: LD_INT 0
51414: ST_TO_ADDR
// sWound := false ;
51415: LD_ADDR_EXP 41
51419: PUSH
51420: LD_INT 0
51422: ST_TO_ADDR
// sBetray := false ;
51423: LD_ADDR_EXP 45
51427: PUSH
51428: LD_INT 0
51430: ST_TO_ADDR
// sContamin := false ;
51431: LD_ADDR_EXP 46
51435: PUSH
51436: LD_INT 0
51438: ST_TO_ADDR
// sOil := false ;
51439: LD_ADDR_EXP 48
51443: PUSH
51444: LD_INT 0
51446: ST_TO_ADDR
// sStu := false ;
51447: LD_ADDR_EXP 52
51451: PUSH
51452: LD_INT 0
51454: ST_TO_ADDR
// sBazooka := false ;
51455: LD_ADDR_EXP 55
51459: PUSH
51460: LD_INT 0
51462: ST_TO_ADDR
// sMortar := false ;
51463: LD_ADDR_EXP 56
51467: PUSH
51468: LD_INT 0
51470: ST_TO_ADDR
// sRanger := false ;
51471: LD_ADDR_EXP 66
51475: PUSH
51476: LD_INT 0
51478: ST_TO_ADDR
// sComputer := false ;
51479: LD_ADDR_EXP 67
51483: PUSH
51484: LD_INT 0
51486: ST_TO_ADDR
// s30 := false ;
51487: LD_ADDR_EXP 68
51491: PUSH
51492: LD_INT 0
51494: ST_TO_ADDR
// s60 := false ;
51495: LD_ADDR_EXP 69
51499: PUSH
51500: LD_INT 0
51502: ST_TO_ADDR
// end ;
51503: LD_VAR 0 1
51507: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51508: LD_INT 0
51510: PPUSH
51511: PPUSH
51512: PPUSH
51513: PPUSH
51514: PPUSH
51515: PPUSH
51516: PPUSH
// result := [ ] ;
51517: LD_ADDR_VAR 0 2
51521: PUSH
51522: EMPTY
51523: ST_TO_ADDR
// if campaign_id = 1 then
51524: LD_OWVAR 69
51528: PUSH
51529: LD_INT 1
51531: EQUAL
51532: IFFALSE 54698
// begin case mission_number of 1 :
51534: LD_OWVAR 70
51538: PUSH
51539: LD_INT 1
51541: DOUBLE
51542: EQUAL
51543: IFTRUE 51547
51545: GO 51623
51547: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51548: LD_ADDR_VAR 0 2
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: LD_INT 4
51558: PUSH
51559: LD_INT 11
51561: PUSH
51562: LD_INT 12
51564: PUSH
51565: LD_INT 15
51567: PUSH
51568: LD_INT 16
51570: PUSH
51571: LD_INT 22
51573: PUSH
51574: LD_INT 23
51576: PUSH
51577: LD_INT 26
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 101
51593: PUSH
51594: LD_INT 102
51596: PUSH
51597: LD_INT 106
51599: PUSH
51600: LD_INT 116
51602: PUSH
51603: LD_INT 117
51605: PUSH
51606: LD_INT 118
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: ST_TO_ADDR
51621: GO 54696
51623: LD_INT 2
51625: DOUBLE
51626: EQUAL
51627: IFTRUE 51631
51629: GO 51715
51631: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51632: LD_ADDR_VAR 0 2
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 4
51642: PUSH
51643: LD_INT 11
51645: PUSH
51646: LD_INT 12
51648: PUSH
51649: LD_INT 15
51651: PUSH
51652: LD_INT 16
51654: PUSH
51655: LD_INT 22
51657: PUSH
51658: LD_INT 23
51660: PUSH
51661: LD_INT 26
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 101
51677: PUSH
51678: LD_INT 102
51680: PUSH
51681: LD_INT 105
51683: PUSH
51684: LD_INT 106
51686: PUSH
51687: LD_INT 108
51689: PUSH
51690: LD_INT 116
51692: PUSH
51693: LD_INT 117
51695: PUSH
51696: LD_INT 118
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: ST_TO_ADDR
51713: GO 54696
51715: LD_INT 3
51717: DOUBLE
51718: EQUAL
51719: IFTRUE 51723
51721: GO 51811
51723: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
51724: LD_ADDR_VAR 0 2
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 4
51734: PUSH
51735: LD_INT 5
51737: PUSH
51738: LD_INT 11
51740: PUSH
51741: LD_INT 12
51743: PUSH
51744: LD_INT 15
51746: PUSH
51747: LD_INT 16
51749: PUSH
51750: LD_INT 22
51752: PUSH
51753: LD_INT 26
51755: PUSH
51756: LD_INT 36
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 101
51773: PUSH
51774: LD_INT 102
51776: PUSH
51777: LD_INT 105
51779: PUSH
51780: LD_INT 106
51782: PUSH
51783: LD_INT 108
51785: PUSH
51786: LD_INT 116
51788: PUSH
51789: LD_INT 117
51791: PUSH
51792: LD_INT 118
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: ST_TO_ADDR
51809: GO 54696
51811: LD_INT 4
51813: DOUBLE
51814: EQUAL
51815: IFTRUE 51819
51817: GO 51915
51819: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51820: LD_ADDR_VAR 0 2
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 4
51830: PUSH
51831: LD_INT 5
51833: PUSH
51834: LD_INT 8
51836: PUSH
51837: LD_INT 11
51839: PUSH
51840: LD_INT 12
51842: PUSH
51843: LD_INT 15
51845: PUSH
51846: LD_INT 16
51848: PUSH
51849: LD_INT 22
51851: PUSH
51852: LD_INT 23
51854: PUSH
51855: LD_INT 26
51857: PUSH
51858: LD_INT 36
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 101
51877: PUSH
51878: LD_INT 102
51880: PUSH
51881: LD_INT 105
51883: PUSH
51884: LD_INT 106
51886: PUSH
51887: LD_INT 108
51889: PUSH
51890: LD_INT 116
51892: PUSH
51893: LD_INT 117
51895: PUSH
51896: LD_INT 118
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: ST_TO_ADDR
51913: GO 54696
51915: LD_INT 5
51917: DOUBLE
51918: EQUAL
51919: IFTRUE 51923
51921: GO 52035
51923: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51924: LD_ADDR_VAR 0 2
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 4
51934: PUSH
51935: LD_INT 5
51937: PUSH
51938: LD_INT 6
51940: PUSH
51941: LD_INT 8
51943: PUSH
51944: LD_INT 11
51946: PUSH
51947: LD_INT 12
51949: PUSH
51950: LD_INT 15
51952: PUSH
51953: LD_INT 16
51955: PUSH
51956: LD_INT 22
51958: PUSH
51959: LD_INT 23
51961: PUSH
51962: LD_INT 25
51964: PUSH
51965: LD_INT 26
51967: PUSH
51968: LD_INT 36
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 101
51989: PUSH
51990: LD_INT 102
51992: PUSH
51993: LD_INT 105
51995: PUSH
51996: LD_INT 106
51998: PUSH
51999: LD_INT 108
52001: PUSH
52002: LD_INT 109
52004: PUSH
52005: LD_INT 112
52007: PUSH
52008: LD_INT 116
52010: PUSH
52011: LD_INT 117
52013: PUSH
52014: LD_INT 118
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: ST_TO_ADDR
52033: GO 54696
52035: LD_INT 6
52037: DOUBLE
52038: EQUAL
52039: IFTRUE 52043
52041: GO 52175
52043: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52044: LD_ADDR_VAR 0 2
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: LD_INT 4
52054: PUSH
52055: LD_INT 5
52057: PUSH
52058: LD_INT 6
52060: PUSH
52061: LD_INT 8
52063: PUSH
52064: LD_INT 11
52066: PUSH
52067: LD_INT 12
52069: PUSH
52070: LD_INT 15
52072: PUSH
52073: LD_INT 16
52075: PUSH
52076: LD_INT 20
52078: PUSH
52079: LD_INT 21
52081: PUSH
52082: LD_INT 22
52084: PUSH
52085: LD_INT 23
52087: PUSH
52088: LD_INT 25
52090: PUSH
52091: LD_INT 26
52093: PUSH
52094: LD_INT 30
52096: PUSH
52097: LD_INT 31
52099: PUSH
52100: LD_INT 32
52102: PUSH
52103: LD_INT 36
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 101
52129: PUSH
52130: LD_INT 102
52132: PUSH
52133: LD_INT 105
52135: PUSH
52136: LD_INT 106
52138: PUSH
52139: LD_INT 108
52141: PUSH
52142: LD_INT 109
52144: PUSH
52145: LD_INT 112
52147: PUSH
52148: LD_INT 116
52150: PUSH
52151: LD_INT 117
52153: PUSH
52154: LD_INT 118
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: ST_TO_ADDR
52173: GO 54696
52175: LD_INT 7
52177: DOUBLE
52178: EQUAL
52179: IFTRUE 52183
52181: GO 52295
52183: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52184: LD_ADDR_VAR 0 2
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 4
52194: PUSH
52195: LD_INT 5
52197: PUSH
52198: LD_INT 7
52200: PUSH
52201: LD_INT 11
52203: PUSH
52204: LD_INT 12
52206: PUSH
52207: LD_INT 15
52209: PUSH
52210: LD_INT 16
52212: PUSH
52213: LD_INT 20
52215: PUSH
52216: LD_INT 21
52218: PUSH
52219: LD_INT 22
52221: PUSH
52222: LD_INT 23
52224: PUSH
52225: LD_INT 25
52227: PUSH
52228: LD_INT 26
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 101
52249: PUSH
52250: LD_INT 102
52252: PUSH
52253: LD_INT 103
52255: PUSH
52256: LD_INT 105
52258: PUSH
52259: LD_INT 106
52261: PUSH
52262: LD_INT 108
52264: PUSH
52265: LD_INT 112
52267: PUSH
52268: LD_INT 116
52270: PUSH
52271: LD_INT 117
52273: PUSH
52274: LD_INT 118
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: ST_TO_ADDR
52293: GO 54696
52295: LD_INT 8
52297: DOUBLE
52298: EQUAL
52299: IFTRUE 52303
52301: GO 52443
52303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52304: LD_ADDR_VAR 0 2
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 4
52314: PUSH
52315: LD_INT 5
52317: PUSH
52318: LD_INT 6
52320: PUSH
52321: LD_INT 7
52323: PUSH
52324: LD_INT 8
52326: PUSH
52327: LD_INT 11
52329: PUSH
52330: LD_INT 12
52332: PUSH
52333: LD_INT 15
52335: PUSH
52336: LD_INT 16
52338: PUSH
52339: LD_INT 20
52341: PUSH
52342: LD_INT 21
52344: PUSH
52345: LD_INT 22
52347: PUSH
52348: LD_INT 23
52350: PUSH
52351: LD_INT 25
52353: PUSH
52354: LD_INT 26
52356: PUSH
52357: LD_INT 30
52359: PUSH
52360: LD_INT 31
52362: PUSH
52363: LD_INT 32
52365: PUSH
52366: LD_INT 36
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 101
52393: PUSH
52394: LD_INT 102
52396: PUSH
52397: LD_INT 103
52399: PUSH
52400: LD_INT 105
52402: PUSH
52403: LD_INT 106
52405: PUSH
52406: LD_INT 108
52408: PUSH
52409: LD_INT 109
52411: PUSH
52412: LD_INT 112
52414: PUSH
52415: LD_INT 116
52417: PUSH
52418: LD_INT 117
52420: PUSH
52421: LD_INT 118
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: ST_TO_ADDR
52441: GO 54696
52443: LD_INT 9
52445: DOUBLE
52446: EQUAL
52447: IFTRUE 52451
52449: GO 52599
52451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52452: LD_ADDR_VAR 0 2
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: LD_INT 4
52462: PUSH
52463: LD_INT 5
52465: PUSH
52466: LD_INT 6
52468: PUSH
52469: LD_INT 7
52471: PUSH
52472: LD_INT 8
52474: PUSH
52475: LD_INT 11
52477: PUSH
52478: LD_INT 12
52480: PUSH
52481: LD_INT 15
52483: PUSH
52484: LD_INT 16
52486: PUSH
52487: LD_INT 20
52489: PUSH
52490: LD_INT 21
52492: PUSH
52493: LD_INT 22
52495: PUSH
52496: LD_INT 23
52498: PUSH
52499: LD_INT 25
52501: PUSH
52502: LD_INT 26
52504: PUSH
52505: LD_INT 28
52507: PUSH
52508: LD_INT 30
52510: PUSH
52511: LD_INT 31
52513: PUSH
52514: LD_INT 32
52516: PUSH
52517: LD_INT 36
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 101
52545: PUSH
52546: LD_INT 102
52548: PUSH
52549: LD_INT 103
52551: PUSH
52552: LD_INT 105
52554: PUSH
52555: LD_INT 106
52557: PUSH
52558: LD_INT 108
52560: PUSH
52561: LD_INT 109
52563: PUSH
52564: LD_INT 112
52566: PUSH
52567: LD_INT 114
52569: PUSH
52570: LD_INT 116
52572: PUSH
52573: LD_INT 117
52575: PUSH
52576: LD_INT 118
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: ST_TO_ADDR
52597: GO 54696
52599: LD_INT 10
52601: DOUBLE
52602: EQUAL
52603: IFTRUE 52607
52605: GO 52803
52607: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52608: LD_ADDR_VAR 0 2
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: LD_INT 5
52621: PUSH
52622: LD_INT 6
52624: PUSH
52625: LD_INT 7
52627: PUSH
52628: LD_INT 8
52630: PUSH
52631: LD_INT 9
52633: PUSH
52634: LD_INT 10
52636: PUSH
52637: LD_INT 11
52639: PUSH
52640: LD_INT 12
52642: PUSH
52643: LD_INT 13
52645: PUSH
52646: LD_INT 14
52648: PUSH
52649: LD_INT 15
52651: PUSH
52652: LD_INT 16
52654: PUSH
52655: LD_INT 17
52657: PUSH
52658: LD_INT 18
52660: PUSH
52661: LD_INT 19
52663: PUSH
52664: LD_INT 20
52666: PUSH
52667: LD_INT 21
52669: PUSH
52670: LD_INT 22
52672: PUSH
52673: LD_INT 23
52675: PUSH
52676: LD_INT 24
52678: PUSH
52679: LD_INT 25
52681: PUSH
52682: LD_INT 26
52684: PUSH
52685: LD_INT 28
52687: PUSH
52688: LD_INT 30
52690: PUSH
52691: LD_INT 31
52693: PUSH
52694: LD_INT 32
52696: PUSH
52697: LD_INT 36
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 101
52733: PUSH
52734: LD_INT 102
52736: PUSH
52737: LD_INT 103
52739: PUSH
52740: LD_INT 104
52742: PUSH
52743: LD_INT 105
52745: PUSH
52746: LD_INT 106
52748: PUSH
52749: LD_INT 107
52751: PUSH
52752: LD_INT 108
52754: PUSH
52755: LD_INT 109
52757: PUSH
52758: LD_INT 110
52760: PUSH
52761: LD_INT 111
52763: PUSH
52764: LD_INT 112
52766: PUSH
52767: LD_INT 114
52769: PUSH
52770: LD_INT 116
52772: PUSH
52773: LD_INT 117
52775: PUSH
52776: LD_INT 118
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: ST_TO_ADDR
52801: GO 54696
52803: LD_INT 11
52805: DOUBLE
52806: EQUAL
52807: IFTRUE 52811
52809: GO 53015
52811: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52812: LD_ADDR_VAR 0 2
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: LD_INT 4
52825: PUSH
52826: LD_INT 5
52828: PUSH
52829: LD_INT 6
52831: PUSH
52832: LD_INT 7
52834: PUSH
52835: LD_INT 8
52837: PUSH
52838: LD_INT 9
52840: PUSH
52841: LD_INT 10
52843: PUSH
52844: LD_INT 11
52846: PUSH
52847: LD_INT 12
52849: PUSH
52850: LD_INT 13
52852: PUSH
52853: LD_INT 14
52855: PUSH
52856: LD_INT 15
52858: PUSH
52859: LD_INT 16
52861: PUSH
52862: LD_INT 17
52864: PUSH
52865: LD_INT 18
52867: PUSH
52868: LD_INT 19
52870: PUSH
52871: LD_INT 20
52873: PUSH
52874: LD_INT 21
52876: PUSH
52877: LD_INT 22
52879: PUSH
52880: LD_INT 23
52882: PUSH
52883: LD_INT 24
52885: PUSH
52886: LD_INT 25
52888: PUSH
52889: LD_INT 26
52891: PUSH
52892: LD_INT 28
52894: PUSH
52895: LD_INT 30
52897: PUSH
52898: LD_INT 31
52900: PUSH
52901: LD_INT 32
52903: PUSH
52904: LD_INT 34
52906: PUSH
52907: LD_INT 36
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 101
52945: PUSH
52946: LD_INT 102
52948: PUSH
52949: LD_INT 103
52951: PUSH
52952: LD_INT 104
52954: PUSH
52955: LD_INT 105
52957: PUSH
52958: LD_INT 106
52960: PUSH
52961: LD_INT 107
52963: PUSH
52964: LD_INT 108
52966: PUSH
52967: LD_INT 109
52969: PUSH
52970: LD_INT 110
52972: PUSH
52973: LD_INT 111
52975: PUSH
52976: LD_INT 112
52978: PUSH
52979: LD_INT 114
52981: PUSH
52982: LD_INT 116
52984: PUSH
52985: LD_INT 117
52987: PUSH
52988: LD_INT 118
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: ST_TO_ADDR
53013: GO 54696
53015: LD_INT 12
53017: DOUBLE
53018: EQUAL
53019: IFTRUE 53023
53021: GO 53243
53023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53024: LD_ADDR_VAR 0 2
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: LD_INT 4
53040: PUSH
53041: LD_INT 5
53043: PUSH
53044: LD_INT 6
53046: PUSH
53047: LD_INT 7
53049: PUSH
53050: LD_INT 8
53052: PUSH
53053: LD_INT 9
53055: PUSH
53056: LD_INT 10
53058: PUSH
53059: LD_INT 11
53061: PUSH
53062: LD_INT 12
53064: PUSH
53065: LD_INT 13
53067: PUSH
53068: LD_INT 14
53070: PUSH
53071: LD_INT 15
53073: PUSH
53074: LD_INT 16
53076: PUSH
53077: LD_INT 17
53079: PUSH
53080: LD_INT 18
53082: PUSH
53083: LD_INT 19
53085: PUSH
53086: LD_INT 20
53088: PUSH
53089: LD_INT 21
53091: PUSH
53092: LD_INT 22
53094: PUSH
53095: LD_INT 23
53097: PUSH
53098: LD_INT 24
53100: PUSH
53101: LD_INT 25
53103: PUSH
53104: LD_INT 26
53106: PUSH
53107: LD_INT 27
53109: PUSH
53110: LD_INT 28
53112: PUSH
53113: LD_INT 30
53115: PUSH
53116: LD_INT 31
53118: PUSH
53119: LD_INT 32
53121: PUSH
53122: LD_INT 33
53124: PUSH
53125: LD_INT 34
53127: PUSH
53128: LD_INT 36
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 101
53169: PUSH
53170: LD_INT 102
53172: PUSH
53173: LD_INT 103
53175: PUSH
53176: LD_INT 104
53178: PUSH
53179: LD_INT 105
53181: PUSH
53182: LD_INT 106
53184: PUSH
53185: LD_INT 107
53187: PUSH
53188: LD_INT 108
53190: PUSH
53191: LD_INT 109
53193: PUSH
53194: LD_INT 110
53196: PUSH
53197: LD_INT 111
53199: PUSH
53200: LD_INT 112
53202: PUSH
53203: LD_INT 113
53205: PUSH
53206: LD_INT 114
53208: PUSH
53209: LD_INT 116
53211: PUSH
53212: LD_INT 117
53214: PUSH
53215: LD_INT 118
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: ST_TO_ADDR
53241: GO 54696
53243: LD_INT 13
53245: DOUBLE
53246: EQUAL
53247: IFTRUE 53251
53249: GO 53459
53251: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53252: LD_ADDR_VAR 0 2
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 3
53265: PUSH
53266: LD_INT 4
53268: PUSH
53269: LD_INT 5
53271: PUSH
53272: LD_INT 8
53274: PUSH
53275: LD_INT 9
53277: PUSH
53278: LD_INT 10
53280: PUSH
53281: LD_INT 11
53283: PUSH
53284: LD_INT 12
53286: PUSH
53287: LD_INT 14
53289: PUSH
53290: LD_INT 15
53292: PUSH
53293: LD_INT 16
53295: PUSH
53296: LD_INT 17
53298: PUSH
53299: LD_INT 18
53301: PUSH
53302: LD_INT 19
53304: PUSH
53305: LD_INT 20
53307: PUSH
53308: LD_INT 21
53310: PUSH
53311: LD_INT 22
53313: PUSH
53314: LD_INT 23
53316: PUSH
53317: LD_INT 24
53319: PUSH
53320: LD_INT 25
53322: PUSH
53323: LD_INT 26
53325: PUSH
53326: LD_INT 27
53328: PUSH
53329: LD_INT 28
53331: PUSH
53332: LD_INT 30
53334: PUSH
53335: LD_INT 31
53337: PUSH
53338: LD_INT 32
53340: PUSH
53341: LD_INT 33
53343: PUSH
53344: LD_INT 34
53346: PUSH
53347: LD_INT 36
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 101
53385: PUSH
53386: LD_INT 102
53388: PUSH
53389: LD_INT 103
53391: PUSH
53392: LD_INT 104
53394: PUSH
53395: LD_INT 105
53397: PUSH
53398: LD_INT 106
53400: PUSH
53401: LD_INT 107
53403: PUSH
53404: LD_INT 108
53406: PUSH
53407: LD_INT 109
53409: PUSH
53410: LD_INT 110
53412: PUSH
53413: LD_INT 111
53415: PUSH
53416: LD_INT 112
53418: PUSH
53419: LD_INT 113
53421: PUSH
53422: LD_INT 114
53424: PUSH
53425: LD_INT 116
53427: PUSH
53428: LD_INT 117
53430: PUSH
53431: LD_INT 118
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: ST_TO_ADDR
53457: GO 54696
53459: LD_INT 14
53461: DOUBLE
53462: EQUAL
53463: IFTRUE 53467
53465: GO 53691
53467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53468: LD_ADDR_VAR 0 2
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: LD_INT 5
53487: PUSH
53488: LD_INT 6
53490: PUSH
53491: LD_INT 7
53493: PUSH
53494: LD_INT 8
53496: PUSH
53497: LD_INT 9
53499: PUSH
53500: LD_INT 10
53502: PUSH
53503: LD_INT 11
53505: PUSH
53506: LD_INT 12
53508: PUSH
53509: LD_INT 13
53511: PUSH
53512: LD_INT 14
53514: PUSH
53515: LD_INT 15
53517: PUSH
53518: LD_INT 16
53520: PUSH
53521: LD_INT 17
53523: PUSH
53524: LD_INT 18
53526: PUSH
53527: LD_INT 19
53529: PUSH
53530: LD_INT 20
53532: PUSH
53533: LD_INT 21
53535: PUSH
53536: LD_INT 22
53538: PUSH
53539: LD_INT 23
53541: PUSH
53542: LD_INT 24
53544: PUSH
53545: LD_INT 25
53547: PUSH
53548: LD_INT 26
53550: PUSH
53551: LD_INT 27
53553: PUSH
53554: LD_INT 28
53556: PUSH
53557: LD_INT 29
53559: PUSH
53560: LD_INT 30
53562: PUSH
53563: LD_INT 31
53565: PUSH
53566: LD_INT 32
53568: PUSH
53569: LD_INT 33
53571: PUSH
53572: LD_INT 34
53574: PUSH
53575: LD_INT 36
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 101
53617: PUSH
53618: LD_INT 102
53620: PUSH
53621: LD_INT 103
53623: PUSH
53624: LD_INT 104
53626: PUSH
53627: LD_INT 105
53629: PUSH
53630: LD_INT 106
53632: PUSH
53633: LD_INT 107
53635: PUSH
53636: LD_INT 108
53638: PUSH
53639: LD_INT 109
53641: PUSH
53642: LD_INT 110
53644: PUSH
53645: LD_INT 111
53647: PUSH
53648: LD_INT 112
53650: PUSH
53651: LD_INT 113
53653: PUSH
53654: LD_INT 114
53656: PUSH
53657: LD_INT 116
53659: PUSH
53660: LD_INT 117
53662: PUSH
53663: LD_INT 118
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: ST_TO_ADDR
53689: GO 54696
53691: LD_INT 15
53693: DOUBLE
53694: EQUAL
53695: IFTRUE 53699
53697: GO 53923
53699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
53700: LD_ADDR_VAR 0 2
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 4
53716: PUSH
53717: LD_INT 5
53719: PUSH
53720: LD_INT 6
53722: PUSH
53723: LD_INT 7
53725: PUSH
53726: LD_INT 8
53728: PUSH
53729: LD_INT 9
53731: PUSH
53732: LD_INT 10
53734: PUSH
53735: LD_INT 11
53737: PUSH
53738: LD_INT 12
53740: PUSH
53741: LD_INT 13
53743: PUSH
53744: LD_INT 14
53746: PUSH
53747: LD_INT 15
53749: PUSH
53750: LD_INT 16
53752: PUSH
53753: LD_INT 17
53755: PUSH
53756: LD_INT 18
53758: PUSH
53759: LD_INT 19
53761: PUSH
53762: LD_INT 20
53764: PUSH
53765: LD_INT 21
53767: PUSH
53768: LD_INT 22
53770: PUSH
53771: LD_INT 23
53773: PUSH
53774: LD_INT 24
53776: PUSH
53777: LD_INT 25
53779: PUSH
53780: LD_INT 26
53782: PUSH
53783: LD_INT 27
53785: PUSH
53786: LD_INT 28
53788: PUSH
53789: LD_INT 29
53791: PUSH
53792: LD_INT 30
53794: PUSH
53795: LD_INT 31
53797: PUSH
53798: LD_INT 32
53800: PUSH
53801: LD_INT 33
53803: PUSH
53804: LD_INT 34
53806: PUSH
53807: LD_INT 36
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 101
53849: PUSH
53850: LD_INT 102
53852: PUSH
53853: LD_INT 103
53855: PUSH
53856: LD_INT 104
53858: PUSH
53859: LD_INT 105
53861: PUSH
53862: LD_INT 106
53864: PUSH
53865: LD_INT 107
53867: PUSH
53868: LD_INT 108
53870: PUSH
53871: LD_INT 109
53873: PUSH
53874: LD_INT 110
53876: PUSH
53877: LD_INT 111
53879: PUSH
53880: LD_INT 112
53882: PUSH
53883: LD_INT 113
53885: PUSH
53886: LD_INT 114
53888: PUSH
53889: LD_INT 116
53891: PUSH
53892: LD_INT 117
53894: PUSH
53895: LD_INT 118
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: ST_TO_ADDR
53921: GO 54696
53923: LD_INT 16
53925: DOUBLE
53926: EQUAL
53927: IFTRUE 53931
53929: GO 54067
53931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53932: LD_ADDR_VAR 0 2
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: LD_INT 5
53945: PUSH
53946: LD_INT 7
53948: PUSH
53949: LD_INT 11
53951: PUSH
53952: LD_INT 12
53954: PUSH
53955: LD_INT 15
53957: PUSH
53958: LD_INT 16
53960: PUSH
53961: LD_INT 20
53963: PUSH
53964: LD_INT 21
53966: PUSH
53967: LD_INT 22
53969: PUSH
53970: LD_INT 23
53972: PUSH
53973: LD_INT 25
53975: PUSH
53976: LD_INT 26
53978: PUSH
53979: LD_INT 30
53981: PUSH
53982: LD_INT 31
53984: PUSH
53985: LD_INT 32
53987: PUSH
53988: LD_INT 33
53990: PUSH
53991: LD_INT 34
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 101
54017: PUSH
54018: LD_INT 102
54020: PUSH
54021: LD_INT 103
54023: PUSH
54024: LD_INT 106
54026: PUSH
54027: LD_INT 108
54029: PUSH
54030: LD_INT 112
54032: PUSH
54033: LD_INT 113
54035: PUSH
54036: LD_INT 114
54038: PUSH
54039: LD_INT 116
54041: PUSH
54042: LD_INT 117
54044: PUSH
54045: LD_INT 118
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: ST_TO_ADDR
54065: GO 54696
54067: LD_INT 17
54069: DOUBLE
54070: EQUAL
54071: IFTRUE 54075
54073: GO 54299
54075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54076: LD_ADDR_VAR 0 2
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: LD_INT 4
54092: PUSH
54093: LD_INT 5
54095: PUSH
54096: LD_INT 6
54098: PUSH
54099: LD_INT 7
54101: PUSH
54102: LD_INT 8
54104: PUSH
54105: LD_INT 9
54107: PUSH
54108: LD_INT 10
54110: PUSH
54111: LD_INT 11
54113: PUSH
54114: LD_INT 12
54116: PUSH
54117: LD_INT 13
54119: PUSH
54120: LD_INT 14
54122: PUSH
54123: LD_INT 15
54125: PUSH
54126: LD_INT 16
54128: PUSH
54129: LD_INT 17
54131: PUSH
54132: LD_INT 18
54134: PUSH
54135: LD_INT 19
54137: PUSH
54138: LD_INT 20
54140: PUSH
54141: LD_INT 21
54143: PUSH
54144: LD_INT 22
54146: PUSH
54147: LD_INT 23
54149: PUSH
54150: LD_INT 24
54152: PUSH
54153: LD_INT 25
54155: PUSH
54156: LD_INT 26
54158: PUSH
54159: LD_INT 27
54161: PUSH
54162: LD_INT 28
54164: PUSH
54165: LD_INT 29
54167: PUSH
54168: LD_INT 30
54170: PUSH
54171: LD_INT 31
54173: PUSH
54174: LD_INT 32
54176: PUSH
54177: LD_INT 33
54179: PUSH
54180: LD_INT 34
54182: PUSH
54183: LD_INT 36
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 101
54225: PUSH
54226: LD_INT 102
54228: PUSH
54229: LD_INT 103
54231: PUSH
54232: LD_INT 104
54234: PUSH
54235: LD_INT 105
54237: PUSH
54238: LD_INT 106
54240: PUSH
54241: LD_INT 107
54243: PUSH
54244: LD_INT 108
54246: PUSH
54247: LD_INT 109
54249: PUSH
54250: LD_INT 110
54252: PUSH
54253: LD_INT 111
54255: PUSH
54256: LD_INT 112
54258: PUSH
54259: LD_INT 113
54261: PUSH
54262: LD_INT 114
54264: PUSH
54265: LD_INT 116
54267: PUSH
54268: LD_INT 117
54270: PUSH
54271: LD_INT 118
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: ST_TO_ADDR
54297: GO 54696
54299: LD_INT 18
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54307
54305: GO 54455
54307: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54308: LD_ADDR_VAR 0 2
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 4
54318: PUSH
54319: LD_INT 5
54321: PUSH
54322: LD_INT 7
54324: PUSH
54325: LD_INT 11
54327: PUSH
54328: LD_INT 12
54330: PUSH
54331: LD_INT 15
54333: PUSH
54334: LD_INT 16
54336: PUSH
54337: LD_INT 20
54339: PUSH
54340: LD_INT 21
54342: PUSH
54343: LD_INT 22
54345: PUSH
54346: LD_INT 23
54348: PUSH
54349: LD_INT 25
54351: PUSH
54352: LD_INT 26
54354: PUSH
54355: LD_INT 30
54357: PUSH
54358: LD_INT 31
54360: PUSH
54361: LD_INT 32
54363: PUSH
54364: LD_INT 33
54366: PUSH
54367: LD_INT 34
54369: PUSH
54370: LD_INT 35
54372: PUSH
54373: LD_INT 36
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 101
54401: PUSH
54402: LD_INT 102
54404: PUSH
54405: LD_INT 103
54407: PUSH
54408: LD_INT 106
54410: PUSH
54411: LD_INT 108
54413: PUSH
54414: LD_INT 112
54416: PUSH
54417: LD_INT 113
54419: PUSH
54420: LD_INT 114
54422: PUSH
54423: LD_INT 115
54425: PUSH
54426: LD_INT 116
54428: PUSH
54429: LD_INT 117
54431: PUSH
54432: LD_INT 118
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: ST_TO_ADDR
54453: GO 54696
54455: LD_INT 19
54457: DOUBLE
54458: EQUAL
54459: IFTRUE 54463
54461: GO 54695
54463: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54464: LD_ADDR_VAR 0 2
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 4
54480: PUSH
54481: LD_INT 5
54483: PUSH
54484: LD_INT 6
54486: PUSH
54487: LD_INT 7
54489: PUSH
54490: LD_INT 8
54492: PUSH
54493: LD_INT 9
54495: PUSH
54496: LD_INT 10
54498: PUSH
54499: LD_INT 11
54501: PUSH
54502: LD_INT 12
54504: PUSH
54505: LD_INT 13
54507: PUSH
54508: LD_INT 14
54510: PUSH
54511: LD_INT 15
54513: PUSH
54514: LD_INT 16
54516: PUSH
54517: LD_INT 17
54519: PUSH
54520: LD_INT 18
54522: PUSH
54523: LD_INT 19
54525: PUSH
54526: LD_INT 20
54528: PUSH
54529: LD_INT 21
54531: PUSH
54532: LD_INT 22
54534: PUSH
54535: LD_INT 23
54537: PUSH
54538: LD_INT 24
54540: PUSH
54541: LD_INT 25
54543: PUSH
54544: LD_INT 26
54546: PUSH
54547: LD_INT 27
54549: PUSH
54550: LD_INT 28
54552: PUSH
54553: LD_INT 29
54555: PUSH
54556: LD_INT 30
54558: PUSH
54559: LD_INT 31
54561: PUSH
54562: LD_INT 32
54564: PUSH
54565: LD_INT 33
54567: PUSH
54568: LD_INT 34
54570: PUSH
54571: LD_INT 35
54573: PUSH
54574: LD_INT 36
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 101
54617: PUSH
54618: LD_INT 102
54620: PUSH
54621: LD_INT 103
54623: PUSH
54624: LD_INT 104
54626: PUSH
54627: LD_INT 105
54629: PUSH
54630: LD_INT 106
54632: PUSH
54633: LD_INT 107
54635: PUSH
54636: LD_INT 108
54638: PUSH
54639: LD_INT 109
54641: PUSH
54642: LD_INT 110
54644: PUSH
54645: LD_INT 111
54647: PUSH
54648: LD_INT 112
54650: PUSH
54651: LD_INT 113
54653: PUSH
54654: LD_INT 114
54656: PUSH
54657: LD_INT 115
54659: PUSH
54660: LD_INT 116
54662: PUSH
54663: LD_INT 117
54665: PUSH
54666: LD_INT 118
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: ST_TO_ADDR
54693: GO 54696
54695: POP
// end else
54696: GO 54927
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
54698: LD_ADDR_VAR 0 2
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: LD_INT 4
54714: PUSH
54715: LD_INT 5
54717: PUSH
54718: LD_INT 6
54720: PUSH
54721: LD_INT 7
54723: PUSH
54724: LD_INT 8
54726: PUSH
54727: LD_INT 9
54729: PUSH
54730: LD_INT 10
54732: PUSH
54733: LD_INT 11
54735: PUSH
54736: LD_INT 12
54738: PUSH
54739: LD_INT 13
54741: PUSH
54742: LD_INT 14
54744: PUSH
54745: LD_INT 15
54747: PUSH
54748: LD_INT 16
54750: PUSH
54751: LD_INT 17
54753: PUSH
54754: LD_INT 18
54756: PUSH
54757: LD_INT 19
54759: PUSH
54760: LD_INT 20
54762: PUSH
54763: LD_INT 21
54765: PUSH
54766: LD_INT 22
54768: PUSH
54769: LD_INT 23
54771: PUSH
54772: LD_INT 24
54774: PUSH
54775: LD_INT 25
54777: PUSH
54778: LD_INT 26
54780: PUSH
54781: LD_INT 27
54783: PUSH
54784: LD_INT 28
54786: PUSH
54787: LD_INT 29
54789: PUSH
54790: LD_INT 30
54792: PUSH
54793: LD_INT 31
54795: PUSH
54796: LD_INT 32
54798: PUSH
54799: LD_INT 33
54801: PUSH
54802: LD_INT 34
54804: PUSH
54805: LD_INT 35
54807: PUSH
54808: LD_INT 36
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 101
54851: PUSH
54852: LD_INT 102
54854: PUSH
54855: LD_INT 103
54857: PUSH
54858: LD_INT 104
54860: PUSH
54861: LD_INT 105
54863: PUSH
54864: LD_INT 106
54866: PUSH
54867: LD_INT 107
54869: PUSH
54870: LD_INT 108
54872: PUSH
54873: LD_INT 109
54875: PUSH
54876: LD_INT 110
54878: PUSH
54879: LD_INT 111
54881: PUSH
54882: LD_INT 112
54884: PUSH
54885: LD_INT 113
54887: PUSH
54888: LD_INT 114
54890: PUSH
54891: LD_INT 115
54893: PUSH
54894: LD_INT 116
54896: PUSH
54897: LD_INT 117
54899: PUSH
54900: LD_INT 118
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// if result then
54927: LD_VAR 0 2
54931: IFFALSE 55717
// begin normal :=  ;
54933: LD_ADDR_VAR 0 5
54937: PUSH
54938: LD_STRING 
54940: ST_TO_ADDR
// hardcore :=  ;
54941: LD_ADDR_VAR 0 6
54945: PUSH
54946: LD_STRING 
54948: ST_TO_ADDR
// active :=  ;
54949: LD_ADDR_VAR 0 7
54953: PUSH
54954: LD_STRING 
54956: ST_TO_ADDR
// for i = 1 to normalCounter do
54957: LD_ADDR_VAR 0 8
54961: PUSH
54962: DOUBLE
54963: LD_INT 1
54965: DEC
54966: ST_TO_ADDR
54967: LD_EXP 14
54971: PUSH
54972: FOR_TO
54973: IFFALSE 55074
// begin tmp := 0 ;
54975: LD_ADDR_VAR 0 3
54979: PUSH
54980: LD_STRING 0
54982: ST_TO_ADDR
// if result [ 1 ] then
54983: LD_VAR 0 2
54987: PUSH
54988: LD_INT 1
54990: ARRAY
54991: IFFALSE 55056
// if result [ 1 ] [ 1 ] = i then
54993: LD_VAR 0 2
54997: PUSH
54998: LD_INT 1
55000: ARRAY
55001: PUSH
55002: LD_INT 1
55004: ARRAY
55005: PUSH
55006: LD_VAR 0 8
55010: EQUAL
55011: IFFALSE 55056
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55013: LD_ADDR_VAR 0 2
55017: PUSH
55018: LD_VAR 0 2
55022: PPUSH
55023: LD_INT 1
55025: PPUSH
55026: LD_VAR 0 2
55030: PUSH
55031: LD_INT 1
55033: ARRAY
55034: PPUSH
55035: LD_INT 1
55037: PPUSH
55038: CALL_OW 3
55042: PPUSH
55043: CALL_OW 1
55047: ST_TO_ADDR
// tmp := 1 ;
55048: LD_ADDR_VAR 0 3
55052: PUSH
55053: LD_STRING 1
55055: ST_TO_ADDR
// end ; normal := normal & tmp ;
55056: LD_ADDR_VAR 0 5
55060: PUSH
55061: LD_VAR 0 5
55065: PUSH
55066: LD_VAR 0 3
55070: STR
55071: ST_TO_ADDR
// end ;
55072: GO 54972
55074: POP
55075: POP
// for i = 1 to hardcoreCounter do
55076: LD_ADDR_VAR 0 8
55080: PUSH
55081: DOUBLE
55082: LD_INT 1
55084: DEC
55085: ST_TO_ADDR
55086: LD_EXP 15
55090: PUSH
55091: FOR_TO
55092: IFFALSE 55197
// begin tmp := 0 ;
55094: LD_ADDR_VAR 0 3
55098: PUSH
55099: LD_STRING 0
55101: ST_TO_ADDR
// if result [ 2 ] then
55102: LD_VAR 0 2
55106: PUSH
55107: LD_INT 2
55109: ARRAY
55110: IFFALSE 55179
// if result [ 2 ] [ 1 ] = 100 + i then
55112: LD_VAR 0 2
55116: PUSH
55117: LD_INT 2
55119: ARRAY
55120: PUSH
55121: LD_INT 1
55123: ARRAY
55124: PUSH
55125: LD_INT 100
55127: PUSH
55128: LD_VAR 0 8
55132: PLUS
55133: EQUAL
55134: IFFALSE 55179
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55136: LD_ADDR_VAR 0 2
55140: PUSH
55141: LD_VAR 0 2
55145: PPUSH
55146: LD_INT 2
55148: PPUSH
55149: LD_VAR 0 2
55153: PUSH
55154: LD_INT 2
55156: ARRAY
55157: PPUSH
55158: LD_INT 1
55160: PPUSH
55161: CALL_OW 3
55165: PPUSH
55166: CALL_OW 1
55170: ST_TO_ADDR
// tmp := 1 ;
55171: LD_ADDR_VAR 0 3
55175: PUSH
55176: LD_STRING 1
55178: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55179: LD_ADDR_VAR 0 6
55183: PUSH
55184: LD_VAR 0 6
55188: PUSH
55189: LD_VAR 0 3
55193: STR
55194: ST_TO_ADDR
// end ;
55195: GO 55091
55197: POP
55198: POP
// if isGameLoad then
55199: LD_VAR 0 1
55203: IFFALSE 55678
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55205: LD_ADDR_VAR 0 4
55209: PUSH
55210: LD_EXP 18
55214: PUSH
55215: LD_EXP 17
55219: PUSH
55220: LD_EXP 19
55224: PUSH
55225: LD_EXP 16
55229: PUSH
55230: LD_EXP 20
55234: PUSH
55235: LD_EXP 21
55239: PUSH
55240: LD_EXP 22
55244: PUSH
55245: LD_EXP 23
55249: PUSH
55250: LD_EXP 24
55254: PUSH
55255: LD_EXP 25
55259: PUSH
55260: LD_EXP 26
55264: PUSH
55265: LD_EXP 27
55269: PUSH
55270: LD_EXP 28
55274: PUSH
55275: LD_EXP 29
55279: PUSH
55280: LD_EXP 37
55284: PUSH
55285: LD_EXP 38
55289: PUSH
55290: LD_EXP 39
55294: PUSH
55295: LD_EXP 40
55299: PUSH
55300: LD_EXP 42
55304: PUSH
55305: LD_EXP 43
55309: PUSH
55310: LD_EXP 44
55314: PUSH
55315: LD_EXP 47
55319: PUSH
55320: LD_EXP 49
55324: PUSH
55325: LD_EXP 50
55329: PUSH
55330: LD_EXP 51
55334: PUSH
55335: LD_EXP 53
55339: PUSH
55340: LD_EXP 54
55344: PUSH
55345: LD_EXP 57
55349: PUSH
55350: LD_EXP 58
55354: PUSH
55355: LD_EXP 59
55359: PUSH
55360: LD_EXP 60
55364: PUSH
55365: LD_EXP 61
55369: PUSH
55370: LD_EXP 62
55374: PUSH
55375: LD_EXP 63
55379: PUSH
55380: LD_EXP 64
55384: PUSH
55385: LD_EXP 65
55389: PUSH
55390: LD_EXP 30
55394: PUSH
55395: LD_EXP 31
55399: PUSH
55400: LD_EXP 34
55404: PUSH
55405: LD_EXP 35
55409: PUSH
55410: LD_EXP 36
55414: PUSH
55415: LD_EXP 32
55419: PUSH
55420: LD_EXP 33
55424: PUSH
55425: LD_EXP 41
55429: PUSH
55430: LD_EXP 45
55434: PUSH
55435: LD_EXP 46
55439: PUSH
55440: LD_EXP 48
55444: PUSH
55445: LD_EXP 52
55449: PUSH
55450: LD_EXP 55
55454: PUSH
55455: LD_EXP 56
55459: PUSH
55460: LD_EXP 66
55464: PUSH
55465: LD_EXP 67
55469: PUSH
55470: LD_EXP 68
55474: PUSH
55475: LD_EXP 69
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// tmp :=  ;
55536: LD_ADDR_VAR 0 3
55540: PUSH
55541: LD_STRING 
55543: ST_TO_ADDR
// for i = 1 to normalCounter do
55544: LD_ADDR_VAR 0 8
55548: PUSH
55549: DOUBLE
55550: LD_INT 1
55552: DEC
55553: ST_TO_ADDR
55554: LD_EXP 14
55558: PUSH
55559: FOR_TO
55560: IFFALSE 55596
// begin if flags [ i ] then
55562: LD_VAR 0 4
55566: PUSH
55567: LD_VAR 0 8
55571: ARRAY
55572: IFFALSE 55594
// tmp := tmp & i & ; ;
55574: LD_ADDR_VAR 0 3
55578: PUSH
55579: LD_VAR 0 3
55583: PUSH
55584: LD_VAR 0 8
55588: STR
55589: PUSH
55590: LD_STRING ;
55592: STR
55593: ST_TO_ADDR
// end ;
55594: GO 55559
55596: POP
55597: POP
// for i = 1 to hardcoreCounter do
55598: LD_ADDR_VAR 0 8
55602: PUSH
55603: DOUBLE
55604: LD_INT 1
55606: DEC
55607: ST_TO_ADDR
55608: LD_EXP 15
55612: PUSH
55613: FOR_TO
55614: IFFALSE 55660
// begin if flags [ normalCounter + i ] then
55616: LD_VAR 0 4
55620: PUSH
55621: LD_EXP 14
55625: PUSH
55626: LD_VAR 0 8
55630: PLUS
55631: ARRAY
55632: IFFALSE 55658
// tmp := tmp & ( 100 + i ) & ; ;
55634: LD_ADDR_VAR 0 3
55638: PUSH
55639: LD_VAR 0 3
55643: PUSH
55644: LD_INT 100
55646: PUSH
55647: LD_VAR 0 8
55651: PLUS
55652: STR
55653: PUSH
55654: LD_STRING ;
55656: STR
55657: ST_TO_ADDR
// end ;
55658: GO 55613
55660: POP
55661: POP
// if tmp then
55662: LD_VAR 0 3
55666: IFFALSE 55678
// active := tmp ;
55668: LD_ADDR_VAR 0 7
55672: PUSH
55673: LD_VAR 0 3
55677: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
55678: LD_STRING getStreamItemsFromMission("
55680: PUSH
55681: LD_VAR 0 5
55685: STR
55686: PUSH
55687: LD_STRING ","
55689: STR
55690: PUSH
55691: LD_VAR 0 6
55695: STR
55696: PUSH
55697: LD_STRING ","
55699: STR
55700: PUSH
55701: LD_VAR 0 7
55705: STR
55706: PUSH
55707: LD_STRING ")
55709: STR
55710: PPUSH
55711: CALL_OW 559
// end else
55715: GO 55724
// ToLua ( getStreamItemsFromMission("","","") ) ;
55717: LD_STRING getStreamItemsFromMission("","","")
55719: PPUSH
55720: CALL_OW 559
// end ;
55724: LD_VAR 0 2
55728: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55729: LD_EXP 13
55733: IFFALSE 55741
55735: PUSH
55736: LD_EXP 18
55740: AND
55741: IFFALSE 55865
55743: GO 55745
55745: DISABLE
55746: LD_INT 0
55748: PPUSH
55749: PPUSH
// begin enable ;
55750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55751: LD_ADDR_VAR 0 2
55755: PUSH
55756: LD_INT 22
55758: PUSH
55759: LD_OWVAR 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: LD_INT 34
55773: PUSH
55774: LD_INT 7
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 34
55783: PUSH
55784: LD_INT 45
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 34
55793: PUSH
55794: LD_INT 28
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 34
55803: PUSH
55804: LD_INT 47
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PPUSH
55822: CALL_OW 69
55826: ST_TO_ADDR
// if not tmp then
55827: LD_VAR 0 2
55831: NOT
55832: IFFALSE 55836
// exit ;
55834: GO 55865
// for i in tmp do
55836: LD_ADDR_VAR 0 1
55840: PUSH
55841: LD_VAR 0 2
55845: PUSH
55846: FOR_IN
55847: IFFALSE 55863
// begin SetLives ( i , 0 ) ;
55849: LD_VAR 0 1
55853: PPUSH
55854: LD_INT 0
55856: PPUSH
55857: CALL_OW 234
// end ;
55861: GO 55846
55863: POP
55864: POP
// end ;
55865: PPOPN 2
55867: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55868: LD_EXP 13
55872: IFFALSE 55880
55874: PUSH
55875: LD_EXP 19
55879: AND
55880: IFFALSE 55964
55882: GO 55884
55884: DISABLE
55885: LD_INT 0
55887: PPUSH
55888: PPUSH
// begin enable ;
55889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55890: LD_ADDR_VAR 0 2
55894: PUSH
55895: LD_INT 22
55897: PUSH
55898: LD_OWVAR 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 32
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PPUSH
55921: CALL_OW 69
55925: ST_TO_ADDR
// if not tmp then
55926: LD_VAR 0 2
55930: NOT
55931: IFFALSE 55935
// exit ;
55933: GO 55964
// for i in tmp do
55935: LD_ADDR_VAR 0 1
55939: PUSH
55940: LD_VAR 0 2
55944: PUSH
55945: FOR_IN
55946: IFFALSE 55962
// begin SetLives ( i , 0 ) ;
55948: LD_VAR 0 1
55952: PPUSH
55953: LD_INT 0
55955: PPUSH
55956: CALL_OW 234
// end ;
55960: GO 55945
55962: POP
55963: POP
// end ;
55964: PPOPN 2
55966: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55967: LD_EXP 13
55971: IFFALSE 55979
55973: PUSH
55974: LD_EXP 16
55978: AND
55979: IFFALSE 56072
55981: GO 55983
55983: DISABLE
55984: LD_INT 0
55986: PPUSH
// begin enable ;
55987: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55988: LD_ADDR_VAR 0 1
55992: PUSH
55993: LD_INT 22
55995: PUSH
55996: LD_OWVAR 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 25
56010: PUSH
56011: LD_INT 5
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 25
56020: PUSH
56021: LD_INT 9
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 25
56030: PUSH
56031: LD_INT 8
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PPUSH
56048: CALL_OW 69
56052: PUSH
56053: FOR_IN
56054: IFFALSE 56070
// begin SetClass ( i , 1 ) ;
56056: LD_VAR 0 1
56060: PPUSH
56061: LD_INT 1
56063: PPUSH
56064: CALL_OW 336
// end ;
56068: GO 56053
56070: POP
56071: POP
// end ;
56072: PPOPN 1
56074: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56075: LD_EXP 13
56079: IFFALSE 56087
56081: PUSH
56082: LD_EXP 17
56086: AND
56087: IFFALSE 56099
56089: PUSH
56090: LD_OWVAR 65
56094: PUSH
56095: LD_INT 7
56097: LESS
56098: AND
56099: IFFALSE 56113
56101: GO 56103
56103: DISABLE
// begin enable ;
56104: ENABLE
// game_speed := 7 ;
56105: LD_ADDR_OWVAR 65
56109: PUSH
56110: LD_INT 7
56112: ST_TO_ADDR
// end ;
56113: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56114: LD_EXP 13
56118: IFFALSE 56126
56120: PUSH
56121: LD_EXP 20
56125: AND
56126: IFFALSE 56328
56128: GO 56130
56130: DISABLE
56131: LD_INT 0
56133: PPUSH
56134: PPUSH
56135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56136: LD_ADDR_VAR 0 3
56140: PUSH
56141: LD_INT 81
56143: PUSH
56144: LD_OWVAR 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 21
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PPUSH
56167: CALL_OW 69
56171: ST_TO_ADDR
// if not tmp then
56172: LD_VAR 0 3
56176: NOT
56177: IFFALSE 56181
// exit ;
56179: GO 56328
// if tmp > 5 then
56181: LD_VAR 0 3
56185: PUSH
56186: LD_INT 5
56188: GREATER
56189: IFFALSE 56201
// k := 5 else
56191: LD_ADDR_VAR 0 2
56195: PUSH
56196: LD_INT 5
56198: ST_TO_ADDR
56199: GO 56211
// k := tmp ;
56201: LD_ADDR_VAR 0 2
56205: PUSH
56206: LD_VAR 0 3
56210: ST_TO_ADDR
// for i := 1 to k do
56211: LD_ADDR_VAR 0 1
56215: PUSH
56216: DOUBLE
56217: LD_INT 1
56219: DEC
56220: ST_TO_ADDR
56221: LD_VAR 0 2
56225: PUSH
56226: FOR_TO
56227: IFFALSE 56326
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56229: LD_VAR 0 3
56233: PUSH
56234: LD_VAR 0 1
56238: ARRAY
56239: PPUSH
56240: LD_VAR 0 1
56244: PUSH
56245: LD_INT 4
56247: MOD
56248: PUSH
56249: LD_INT 1
56251: PLUS
56252: PPUSH
56253: CALL_OW 259
56257: PUSH
56258: LD_INT 10
56260: LESS
56261: IFFALSE 56324
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56263: LD_VAR 0 3
56267: PUSH
56268: LD_VAR 0 1
56272: ARRAY
56273: PPUSH
56274: LD_VAR 0 1
56278: PUSH
56279: LD_INT 4
56281: MOD
56282: PUSH
56283: LD_INT 1
56285: PLUS
56286: PPUSH
56287: LD_VAR 0 3
56291: PUSH
56292: LD_VAR 0 1
56296: ARRAY
56297: PPUSH
56298: LD_VAR 0 1
56302: PUSH
56303: LD_INT 4
56305: MOD
56306: PUSH
56307: LD_INT 1
56309: PLUS
56310: PPUSH
56311: CALL_OW 259
56315: PUSH
56316: LD_INT 1
56318: PLUS
56319: PPUSH
56320: CALL_OW 237
56324: GO 56226
56326: POP
56327: POP
// end ;
56328: PPOPN 3
56330: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56331: LD_EXP 13
56335: IFFALSE 56343
56337: PUSH
56338: LD_EXP 21
56342: AND
56343: IFFALSE 56363
56345: GO 56347
56347: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56348: LD_INT 4
56350: PPUSH
56351: LD_OWVAR 2
56355: PPUSH
56356: LD_INT 0
56358: PPUSH
56359: CALL_OW 324
56363: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56364: LD_EXP 13
56368: IFFALSE 56376
56370: PUSH
56371: LD_EXP 50
56375: AND
56376: IFFALSE 56396
56378: GO 56380
56380: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56381: LD_INT 19
56383: PPUSH
56384: LD_OWVAR 2
56388: PPUSH
56389: LD_INT 0
56391: PPUSH
56392: CALL_OW 324
56396: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56397: LD_EXP 13
56401: IFFALSE 56409
56403: PUSH
56404: LD_EXP 22
56408: AND
56409: IFFALSE 56511
56411: GO 56413
56413: DISABLE
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
// begin enable ;
56418: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56419: LD_ADDR_VAR 0 2
56423: PUSH
56424: LD_INT 22
56426: PUSH
56427: LD_OWVAR 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: LD_INT 34
56441: PUSH
56442: LD_INT 11
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 34
56451: PUSH
56452: LD_INT 30
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PPUSH
56468: CALL_OW 69
56472: ST_TO_ADDR
// if not tmp then
56473: LD_VAR 0 2
56477: NOT
56478: IFFALSE 56482
// exit ;
56480: GO 56511
// for i in tmp do
56482: LD_ADDR_VAR 0 1
56486: PUSH
56487: LD_VAR 0 2
56491: PUSH
56492: FOR_IN
56493: IFFALSE 56509
// begin SetLives ( i , 0 ) ;
56495: LD_VAR 0 1
56499: PPUSH
56500: LD_INT 0
56502: PPUSH
56503: CALL_OW 234
// end ;
56507: GO 56492
56509: POP
56510: POP
// end ;
56511: PPOPN 2
56513: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56514: LD_EXP 13
56518: IFFALSE 56526
56520: PUSH
56521: LD_EXP 23
56525: AND
56526: IFFALSE 56546
56528: GO 56530
56530: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56531: LD_INT 32
56533: PPUSH
56534: LD_OWVAR 2
56538: PPUSH
56539: LD_INT 0
56541: PPUSH
56542: CALL_OW 324
56546: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56547: LD_EXP 13
56551: IFFALSE 56559
56553: PUSH
56554: LD_EXP 24
56558: AND
56559: IFFALSE 56742
56561: GO 56563
56563: DISABLE
56564: LD_INT 0
56566: PPUSH
56567: PPUSH
56568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56569: LD_ADDR_VAR 0 2
56573: PUSH
56574: LD_INT 22
56576: PUSH
56577: LD_OWVAR 2
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 33
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PPUSH
56600: CALL_OW 69
56604: ST_TO_ADDR
// if not tmp then
56605: LD_VAR 0 2
56609: NOT
56610: IFFALSE 56614
// exit ;
56612: GO 56742
// side := 0 ;
56614: LD_ADDR_VAR 0 3
56618: PUSH
56619: LD_INT 0
56621: ST_TO_ADDR
// for i := 1 to 8 do
56622: LD_ADDR_VAR 0 1
56626: PUSH
56627: DOUBLE
56628: LD_INT 1
56630: DEC
56631: ST_TO_ADDR
56632: LD_INT 8
56634: PUSH
56635: FOR_TO
56636: IFFALSE 56686
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56638: LD_OWVAR 2
56642: PUSH
56643: LD_VAR 0 1
56647: NONEQUAL
56648: IFFALSE 56670
56650: PUSH
56651: LD_OWVAR 2
56655: PPUSH
56656: LD_VAR 0 1
56660: PPUSH
56661: CALL_OW 81
56665: PUSH
56666: LD_INT 2
56668: EQUAL
56669: AND
56670: IFFALSE 56684
// begin side := i ;
56672: LD_ADDR_VAR 0 3
56676: PUSH
56677: LD_VAR 0 1
56681: ST_TO_ADDR
// break ;
56682: GO 56686
// end ;
56684: GO 56635
56686: POP
56687: POP
// if not side then
56688: LD_VAR 0 3
56692: NOT
56693: IFFALSE 56697
// exit ;
56695: GO 56742
// for i := 1 to tmp do
56697: LD_ADDR_VAR 0 1
56701: PUSH
56702: DOUBLE
56703: LD_INT 1
56705: DEC
56706: ST_TO_ADDR
56707: LD_VAR 0 2
56711: PUSH
56712: FOR_TO
56713: IFFALSE 56740
// if Prob ( 60 ) then
56715: LD_INT 60
56717: PPUSH
56718: CALL_OW 13
56722: IFFALSE 56738
// SetSide ( i , side ) ;
56724: LD_VAR 0 1
56728: PPUSH
56729: LD_VAR 0 3
56733: PPUSH
56734: CALL_OW 235
56738: GO 56712
56740: POP
56741: POP
// end ;
56742: PPOPN 3
56744: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56745: LD_EXP 13
56749: IFFALSE 56757
56751: PUSH
56752: LD_EXP 26
56756: AND
56757: IFFALSE 56876
56759: GO 56761
56761: DISABLE
56762: LD_INT 0
56764: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56765: LD_ADDR_VAR 0 1
56769: PUSH
56770: LD_INT 22
56772: PUSH
56773: LD_OWVAR 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 21
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: LD_INT 23
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: PPUSH
56814: CALL_OW 69
56818: PUSH
56819: FOR_IN
56820: IFFALSE 56874
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56822: LD_VAR 0 1
56826: PPUSH
56827: CALL_OW 257
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: IN
56850: IFFALSE 56872
// SetClass ( un , rand ( 1 , 4 ) ) ;
56852: LD_VAR 0 1
56856: PPUSH
56857: LD_INT 1
56859: PPUSH
56860: LD_INT 4
56862: PPUSH
56863: CALL_OW 12
56867: PPUSH
56868: CALL_OW 336
56872: GO 56819
56874: POP
56875: POP
// end ;
56876: PPOPN 1
56878: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56879: LD_EXP 13
56883: IFFALSE 56891
56885: PUSH
56886: LD_EXP 25
56890: AND
56891: IFFALSE 56970
56893: GO 56895
56895: DISABLE
56896: LD_INT 0
56898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56899: LD_ADDR_VAR 0 1
56903: PUSH
56904: LD_INT 22
56906: PUSH
56907: LD_OWVAR 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 21
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PPUSH
56930: CALL_OW 69
56934: ST_TO_ADDR
// if not tmp then
56935: LD_VAR 0 1
56939: NOT
56940: IFFALSE 56944
// exit ;
56942: GO 56970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56944: LD_VAR 0 1
56948: PUSH
56949: LD_INT 1
56951: PPUSH
56952: LD_VAR 0 1
56956: PPUSH
56957: CALL_OW 12
56961: ARRAY
56962: PPUSH
56963: LD_INT 100
56965: PPUSH
56966: CALL_OW 234
// end ;
56970: PPOPN 1
56972: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56973: LD_EXP 13
56977: IFFALSE 56985
56979: PUSH
56980: LD_EXP 27
56984: AND
56985: IFFALSE 57083
56987: GO 56989
56989: DISABLE
56990: LD_INT 0
56992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56993: LD_ADDR_VAR 0 1
56997: PUSH
56998: LD_INT 22
57000: PUSH
57001: LD_OWVAR 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 21
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PPUSH
57024: CALL_OW 69
57028: ST_TO_ADDR
// if not tmp then
57029: LD_VAR 0 1
57033: NOT
57034: IFFALSE 57038
// exit ;
57036: GO 57083
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57038: LD_VAR 0 1
57042: PUSH
57043: LD_INT 1
57045: PPUSH
57046: LD_VAR 0 1
57050: PPUSH
57051: CALL_OW 12
57055: ARRAY
57056: PPUSH
57057: LD_INT 1
57059: PPUSH
57060: LD_INT 4
57062: PPUSH
57063: CALL_OW 12
57067: PPUSH
57068: LD_INT 3000
57070: PPUSH
57071: LD_INT 9000
57073: PPUSH
57074: CALL_OW 12
57078: PPUSH
57079: CALL_OW 492
// end ;
57083: PPOPN 1
57085: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57086: LD_EXP 13
57090: IFFALSE 57098
57092: PUSH
57093: LD_EXP 28
57097: AND
57098: IFFALSE 57118
57100: GO 57102
57102: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57103: LD_INT 1
57105: PPUSH
57106: LD_OWVAR 2
57110: PPUSH
57111: LD_INT 0
57113: PPUSH
57114: CALL_OW 324
57118: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57119: LD_EXP 13
57123: IFFALSE 57131
57125: PUSH
57126: LD_EXP 29
57130: AND
57131: IFFALSE 57214
57133: GO 57135
57135: DISABLE
57136: LD_INT 0
57138: PPUSH
57139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57140: LD_ADDR_VAR 0 2
57144: PUSH
57145: LD_INT 22
57147: PUSH
57148: LD_OWVAR 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 21
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PPUSH
57171: CALL_OW 69
57175: ST_TO_ADDR
// if not tmp then
57176: LD_VAR 0 2
57180: NOT
57181: IFFALSE 57185
// exit ;
57183: GO 57214
// for i in tmp do
57185: LD_ADDR_VAR 0 1
57189: PUSH
57190: LD_VAR 0 2
57194: PUSH
57195: FOR_IN
57196: IFFALSE 57212
// SetBLevel ( i , 10 ) ;
57198: LD_VAR 0 1
57202: PPUSH
57203: LD_INT 10
57205: PPUSH
57206: CALL_OW 241
57210: GO 57195
57212: POP
57213: POP
// end ;
57214: PPOPN 2
57216: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57217: LD_EXP 13
57221: IFFALSE 57229
57223: PUSH
57224: LD_EXP 30
57228: AND
57229: IFFALSE 57340
57231: GO 57233
57233: DISABLE
57234: LD_INT 0
57236: PPUSH
57237: PPUSH
57238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57239: LD_ADDR_VAR 0 3
57243: PUSH
57244: LD_INT 22
57246: PUSH
57247: LD_OWVAR 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 25
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PPUSH
57270: CALL_OW 69
57274: ST_TO_ADDR
// if not tmp then
57275: LD_VAR 0 3
57279: NOT
57280: IFFALSE 57284
// exit ;
57282: GO 57340
// un := tmp [ rand ( 1 , tmp ) ] ;
57284: LD_ADDR_VAR 0 2
57288: PUSH
57289: LD_VAR 0 3
57293: PUSH
57294: LD_INT 1
57296: PPUSH
57297: LD_VAR 0 3
57301: PPUSH
57302: CALL_OW 12
57306: ARRAY
57307: ST_TO_ADDR
// if Crawls ( un ) then
57308: LD_VAR 0 2
57312: PPUSH
57313: CALL_OW 318
57317: IFFALSE 57328
// ComWalk ( un ) ;
57319: LD_VAR 0 2
57323: PPUSH
57324: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57328: LD_VAR 0 2
57332: PPUSH
57333: LD_INT 5
57335: PPUSH
57336: CALL_OW 336
// end ;
57340: PPOPN 3
57342: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57343: LD_EXP 13
57347: IFFALSE 57355
57349: PUSH
57350: LD_EXP 31
57354: AND
57355: IFFALSE 57367
57357: PUSH
57358: LD_OWVAR 67
57362: PUSH
57363: LD_INT 4
57365: LESS
57366: AND
57367: IFFALSE 57386
57369: GO 57371
57371: DISABLE
// begin Difficulty := Difficulty + 1 ;
57372: LD_ADDR_OWVAR 67
57376: PUSH
57377: LD_OWVAR 67
57381: PUSH
57382: LD_INT 1
57384: PLUS
57385: ST_TO_ADDR
// end ;
57386: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57387: LD_EXP 13
57391: IFFALSE 57399
57393: PUSH
57394: LD_EXP 32
57398: AND
57399: IFFALSE 57502
57401: GO 57403
57403: DISABLE
57404: LD_INT 0
57406: PPUSH
// begin for i := 1 to 5 do
57407: LD_ADDR_VAR 0 1
57411: PUSH
57412: DOUBLE
57413: LD_INT 1
57415: DEC
57416: ST_TO_ADDR
57417: LD_INT 5
57419: PUSH
57420: FOR_TO
57421: IFFALSE 57500
// begin uc_nation := nation_nature ;
57423: LD_ADDR_OWVAR 21
57427: PUSH
57428: LD_INT 0
57430: ST_TO_ADDR
// uc_side := 0 ;
57431: LD_ADDR_OWVAR 20
57435: PUSH
57436: LD_INT 0
57438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57439: LD_ADDR_OWVAR 29
57443: PUSH
57444: LD_INT 12
57446: PUSH
57447: LD_INT 12
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// hc_agressivity := 20 ;
57454: LD_ADDR_OWVAR 35
57458: PUSH
57459: LD_INT 20
57461: ST_TO_ADDR
// hc_class := class_tiger ;
57462: LD_ADDR_OWVAR 28
57466: PUSH
57467: LD_INT 14
57469: ST_TO_ADDR
// hc_gallery :=  ;
57470: LD_ADDR_OWVAR 33
57474: PUSH
57475: LD_STRING 
57477: ST_TO_ADDR
// hc_name :=  ;
57478: LD_ADDR_OWVAR 26
57482: PUSH
57483: LD_STRING 
57485: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57486: CALL_OW 44
57490: PPUSH
57491: LD_INT 0
57493: PPUSH
57494: CALL_OW 51
// end ;
57498: GO 57420
57500: POP
57501: POP
// end ;
57502: PPOPN 1
57504: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57505: LD_EXP 13
57509: IFFALSE 57517
57511: PUSH
57512: LD_EXP 33
57516: AND
57517: IFFALSE 57526
57519: GO 57521
57521: DISABLE
// StreamSibBomb ;
57522: CALL 57527 0 0
57526: END
// export function StreamSibBomb ; var i , x , y ; begin
57527: LD_INT 0
57529: PPUSH
57530: PPUSH
57531: PPUSH
57532: PPUSH
// result := false ;
57533: LD_ADDR_VAR 0 1
57537: PUSH
57538: LD_INT 0
57540: ST_TO_ADDR
// for i := 1 to 16 do
57541: LD_ADDR_VAR 0 2
57545: PUSH
57546: DOUBLE
57547: LD_INT 1
57549: DEC
57550: ST_TO_ADDR
57551: LD_INT 16
57553: PUSH
57554: FOR_TO
57555: IFFALSE 57754
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57557: LD_ADDR_VAR 0 3
57561: PUSH
57562: LD_INT 10
57564: PUSH
57565: LD_INT 20
57567: PUSH
57568: LD_INT 30
57570: PUSH
57571: LD_INT 40
57573: PUSH
57574: LD_INT 50
57576: PUSH
57577: LD_INT 60
57579: PUSH
57580: LD_INT 70
57582: PUSH
57583: LD_INT 80
57585: PUSH
57586: LD_INT 90
57588: PUSH
57589: LD_INT 100
57591: PUSH
57592: LD_INT 110
57594: PUSH
57595: LD_INT 120
57597: PUSH
57598: LD_INT 130
57600: PUSH
57601: LD_INT 140
57603: PUSH
57604: LD_INT 150
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PPUSH
57627: LD_INT 15
57629: PPUSH
57630: CALL_OW 12
57634: ARRAY
57635: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57636: LD_ADDR_VAR 0 4
57640: PUSH
57641: LD_INT 10
57643: PUSH
57644: LD_INT 20
57646: PUSH
57647: LD_INT 30
57649: PUSH
57650: LD_INT 40
57652: PUSH
57653: LD_INT 50
57655: PUSH
57656: LD_INT 60
57658: PUSH
57659: LD_INT 70
57661: PUSH
57662: LD_INT 80
57664: PUSH
57665: LD_INT 90
57667: PUSH
57668: LD_INT 100
57670: PUSH
57671: LD_INT 110
57673: PUSH
57674: LD_INT 120
57676: PUSH
57677: LD_INT 130
57679: PUSH
57680: LD_INT 140
57682: PUSH
57683: LD_INT 150
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PPUSH
57706: LD_INT 15
57708: PPUSH
57709: CALL_OW 12
57713: ARRAY
57714: ST_TO_ADDR
// if ValidHex ( x , y ) then
57715: LD_VAR 0 3
57719: PPUSH
57720: LD_VAR 0 4
57724: PPUSH
57725: CALL_OW 488
57729: IFFALSE 57752
// begin result := [ x , y ] ;
57731: LD_ADDR_VAR 0 1
57735: PUSH
57736: LD_VAR 0 3
57740: PUSH
57741: LD_VAR 0 4
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// break ;
57750: GO 57754
// end ; end ;
57752: GO 57554
57754: POP
57755: POP
// if result then
57756: LD_VAR 0 1
57760: IFFALSE 57820
// begin ToLua ( playSibBomb() ) ;
57762: LD_STRING playSibBomb()
57764: PPUSH
57765: CALL_OW 559
// wait ( 0 0$14 ) ;
57769: LD_INT 490
57771: PPUSH
57772: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57776: LD_VAR 0 1
57780: PUSH
57781: LD_INT 1
57783: ARRAY
57784: PPUSH
57785: LD_VAR 0 1
57789: PUSH
57790: LD_INT 2
57792: ARRAY
57793: PPUSH
57794: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57798: LD_VAR 0 1
57802: PUSH
57803: LD_INT 1
57805: ARRAY
57806: PPUSH
57807: LD_VAR 0 1
57811: PUSH
57812: LD_INT 2
57814: ARRAY
57815: PPUSH
57816: CALL_OW 429
// end ; end ;
57820: LD_VAR 0 1
57824: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57825: LD_EXP 13
57829: IFFALSE 57837
57831: PUSH
57832: LD_EXP 35
57836: AND
57837: IFFALSE 57849
57839: GO 57841
57841: DISABLE
// YouLost (  ) ;
57842: LD_STRING 
57844: PPUSH
57845: CALL_OW 104
57849: END
// every 0 0$1 trigger StreamModeActive and sFog do
57850: LD_EXP 13
57854: IFFALSE 57862
57856: PUSH
57857: LD_EXP 34
57861: AND
57862: IFFALSE 57876
57864: GO 57866
57866: DISABLE
// FogOff ( your_side ) ;
57867: LD_OWVAR 2
57871: PPUSH
57872: CALL_OW 344
57876: END
// every 0 0$1 trigger StreamModeActive and sSun do
57877: LD_EXP 13
57881: IFFALSE 57889
57883: PUSH
57884: LD_EXP 36
57888: AND
57889: IFFALSE 57917
57891: GO 57893
57893: DISABLE
// begin solar_recharge_percent := 0 ;
57894: LD_ADDR_OWVAR 79
57898: PUSH
57899: LD_INT 0
57901: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57902: LD_INT 10500
57904: PPUSH
57905: CALL_OW 67
// solar_recharge_percent := 100 ;
57909: LD_ADDR_OWVAR 79
57913: PUSH
57914: LD_INT 100
57916: ST_TO_ADDR
// end ;
57917: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57918: LD_EXP 13
57922: IFFALSE 57930
57924: PUSH
57925: LD_EXP 37
57929: AND
57930: IFFALSE 58169
57932: GO 57934
57934: DISABLE
57935: LD_INT 0
57937: PPUSH
57938: PPUSH
57939: PPUSH
// begin tmp := [ ] ;
57940: LD_ADDR_VAR 0 3
57944: PUSH
57945: EMPTY
57946: ST_TO_ADDR
// for i := 1 to 6 do
57947: LD_ADDR_VAR 0 1
57951: PUSH
57952: DOUBLE
57953: LD_INT 1
57955: DEC
57956: ST_TO_ADDR
57957: LD_INT 6
57959: PUSH
57960: FOR_TO
57961: IFFALSE 58066
// begin uc_nation := nation_nature ;
57963: LD_ADDR_OWVAR 21
57967: PUSH
57968: LD_INT 0
57970: ST_TO_ADDR
// uc_side := 0 ;
57971: LD_ADDR_OWVAR 20
57975: PUSH
57976: LD_INT 0
57978: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57979: LD_ADDR_OWVAR 29
57983: PUSH
57984: LD_INT 12
57986: PUSH
57987: LD_INT 12
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: ST_TO_ADDR
// hc_agressivity := 20 ;
57994: LD_ADDR_OWVAR 35
57998: PUSH
57999: LD_INT 20
58001: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58002: LD_ADDR_OWVAR 28
58006: PUSH
58007: LD_INT 17
58009: ST_TO_ADDR
// hc_gallery :=  ;
58010: LD_ADDR_OWVAR 33
58014: PUSH
58015: LD_STRING 
58017: ST_TO_ADDR
// hc_name :=  ;
58018: LD_ADDR_OWVAR 26
58022: PUSH
58023: LD_STRING 
58025: ST_TO_ADDR
// un := CreateHuman ;
58026: LD_ADDR_VAR 0 2
58030: PUSH
58031: CALL_OW 44
58035: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58036: LD_VAR 0 2
58040: PPUSH
58041: LD_INT 1
58043: PPUSH
58044: CALL_OW 51
// tmp := tmp ^ un ;
58048: LD_ADDR_VAR 0 3
58052: PUSH
58053: LD_VAR 0 3
58057: PUSH
58058: LD_VAR 0 2
58062: ADD
58063: ST_TO_ADDR
// end ;
58064: GO 57960
58066: POP
58067: POP
// repeat wait ( 0 0$1 ) ;
58068: LD_INT 35
58070: PPUSH
58071: CALL_OW 67
// for un in tmp do
58075: LD_ADDR_VAR 0 2
58079: PUSH
58080: LD_VAR 0 3
58084: PUSH
58085: FOR_IN
58086: IFFALSE 58160
// begin if IsDead ( un ) then
58088: LD_VAR 0 2
58092: PPUSH
58093: CALL_OW 301
58097: IFFALSE 58117
// begin tmp := tmp diff un ;
58099: LD_ADDR_VAR 0 3
58103: PUSH
58104: LD_VAR 0 3
58108: PUSH
58109: LD_VAR 0 2
58113: DIFF
58114: ST_TO_ADDR
// continue ;
58115: GO 58085
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58117: LD_VAR 0 2
58121: PPUSH
58122: LD_INT 3
58124: PUSH
58125: LD_INT 22
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PPUSH
58139: CALL_OW 69
58143: PPUSH
58144: LD_VAR 0 2
58148: PPUSH
58149: CALL_OW 74
58153: PPUSH
58154: CALL_OW 115
// end ;
58158: GO 58085
58160: POP
58161: POP
// until not tmp ;
58162: LD_VAR 0 3
58166: NOT
58167: IFFALSE 58068
// end ;
58169: PPOPN 3
58171: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58172: LD_EXP 13
58176: IFFALSE 58184
58178: PUSH
58179: LD_EXP 38
58183: AND
58184: IFFALSE 58238
58186: GO 58188
58188: DISABLE
// begin ToLua ( displayTroll(); ) ;
58189: LD_STRING displayTroll();
58191: PPUSH
58192: CALL_OW 559
// wait ( 3 3$00 ) ;
58196: LD_INT 6300
58198: PPUSH
58199: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58203: LD_STRING hideTroll();
58205: PPUSH
58206: CALL_OW 559
// wait ( 1 1$00 ) ;
58210: LD_INT 2100
58212: PPUSH
58213: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58217: LD_STRING displayTroll();
58219: PPUSH
58220: CALL_OW 559
// wait ( 1 1$00 ) ;
58224: LD_INT 2100
58226: PPUSH
58227: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58231: LD_STRING hideTroll();
58233: PPUSH
58234: CALL_OW 559
// end ;
58238: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58239: LD_EXP 13
58243: IFFALSE 58251
58245: PUSH
58246: LD_EXP 39
58250: AND
58251: IFFALSE 58314
58253: GO 58255
58255: DISABLE
58256: LD_INT 0
58258: PPUSH
// begin p := 0 ;
58259: LD_ADDR_VAR 0 1
58263: PUSH
58264: LD_INT 0
58266: ST_TO_ADDR
// repeat game_speed := 1 ;
58267: LD_ADDR_OWVAR 65
58271: PUSH
58272: LD_INT 1
58274: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58275: LD_INT 35
58277: PPUSH
58278: CALL_OW 67
// p := p + 1 ;
58282: LD_ADDR_VAR 0 1
58286: PUSH
58287: LD_VAR 0 1
58291: PUSH
58292: LD_INT 1
58294: PLUS
58295: ST_TO_ADDR
// until p >= 60 ;
58296: LD_VAR 0 1
58300: PUSH
58301: LD_INT 60
58303: GREATEREQUAL
58304: IFFALSE 58267
// game_speed := 4 ;
58306: LD_ADDR_OWVAR 65
58310: PUSH
58311: LD_INT 4
58313: ST_TO_ADDR
// end ;
58314: PPOPN 1
58316: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58317: LD_EXP 13
58321: IFFALSE 58329
58323: PUSH
58324: LD_EXP 40
58328: AND
58329: IFFALSE 58475
58331: GO 58333
58333: DISABLE
58334: LD_INT 0
58336: PPUSH
58337: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58338: LD_ADDR_VAR 0 1
58342: PUSH
58343: LD_INT 22
58345: PUSH
58346: LD_OWVAR 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: LD_INT 30
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 30
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PPUSH
58387: CALL_OW 69
58391: ST_TO_ADDR
// if not depot then
58392: LD_VAR 0 1
58396: NOT
58397: IFFALSE 58401
// exit ;
58399: GO 58475
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58401: LD_ADDR_VAR 0 2
58405: PUSH
58406: LD_VAR 0 1
58410: PUSH
58411: LD_INT 1
58413: PPUSH
58414: LD_VAR 0 1
58418: PPUSH
58419: CALL_OW 12
58423: ARRAY
58424: PPUSH
58425: CALL_OW 274
58429: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58430: LD_VAR 0 2
58434: PPUSH
58435: LD_INT 1
58437: PPUSH
58438: LD_INT 0
58440: PPUSH
58441: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58445: LD_VAR 0 2
58449: PPUSH
58450: LD_INT 2
58452: PPUSH
58453: LD_INT 0
58455: PPUSH
58456: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58460: LD_VAR 0 2
58464: PPUSH
58465: LD_INT 3
58467: PPUSH
58468: LD_INT 0
58470: PPUSH
58471: CALL_OW 277
// end ;
58475: PPOPN 2
58477: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58478: LD_EXP 13
58482: IFFALSE 58490
58484: PUSH
58485: LD_EXP 41
58489: AND
58490: IFFALSE 58587
58492: GO 58494
58494: DISABLE
58495: LD_INT 0
58497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58498: LD_ADDR_VAR 0 1
58502: PUSH
58503: LD_INT 22
58505: PUSH
58506: LD_OWVAR 2
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 21
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 23
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: PPUSH
58547: CALL_OW 69
58551: ST_TO_ADDR
// if not tmp then
58552: LD_VAR 0 1
58556: NOT
58557: IFFALSE 58561
// exit ;
58559: GO 58587
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58561: LD_VAR 0 1
58565: PUSH
58566: LD_INT 1
58568: PPUSH
58569: LD_VAR 0 1
58573: PPUSH
58574: CALL_OW 12
58578: ARRAY
58579: PPUSH
58580: LD_INT 200
58582: PPUSH
58583: CALL_OW 234
// end ;
58587: PPOPN 1
58589: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58590: LD_EXP 13
58594: IFFALSE 58602
58596: PUSH
58597: LD_EXP 42
58601: AND
58602: IFFALSE 58681
58604: GO 58606
58606: DISABLE
58607: LD_INT 0
58609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58610: LD_ADDR_VAR 0 1
58614: PUSH
58615: LD_INT 22
58617: PUSH
58618: LD_OWVAR 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 21
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PPUSH
58641: CALL_OW 69
58645: ST_TO_ADDR
// if not tmp then
58646: LD_VAR 0 1
58650: NOT
58651: IFFALSE 58655
// exit ;
58653: GO 58681
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58655: LD_VAR 0 1
58659: PUSH
58660: LD_INT 1
58662: PPUSH
58663: LD_VAR 0 1
58667: PPUSH
58668: CALL_OW 12
58672: ARRAY
58673: PPUSH
58674: LD_INT 60
58676: PPUSH
58677: CALL_OW 234
// end ;
58681: PPOPN 1
58683: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58684: LD_EXP 13
58688: IFFALSE 58696
58690: PUSH
58691: LD_EXP 43
58695: AND
58696: IFFALSE 58795
58698: GO 58700
58700: DISABLE
58701: LD_INT 0
58703: PPUSH
58704: PPUSH
// begin enable ;
58705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58706: LD_ADDR_VAR 0 1
58710: PUSH
58711: LD_INT 22
58713: PUSH
58714: LD_OWVAR 2
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 61
58725: PUSH
58726: EMPTY
58727: LIST
58728: PUSH
58729: LD_INT 33
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: PPUSH
58744: CALL_OW 69
58748: ST_TO_ADDR
// if not tmp then
58749: LD_VAR 0 1
58753: NOT
58754: IFFALSE 58758
// exit ;
58756: GO 58795
// for i in tmp do
58758: LD_ADDR_VAR 0 2
58762: PUSH
58763: LD_VAR 0 1
58767: PUSH
58768: FOR_IN
58769: IFFALSE 58793
// if IsControledBy ( i ) then
58771: LD_VAR 0 2
58775: PPUSH
58776: CALL_OW 312
58780: IFFALSE 58791
// ComUnlink ( i ) ;
58782: LD_VAR 0 2
58786: PPUSH
58787: CALL_OW 136
58791: GO 58768
58793: POP
58794: POP
// end ;
58795: PPOPN 2
58797: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58798: LD_EXP 13
58802: IFFALSE 58810
58804: PUSH
58805: LD_EXP 44
58809: AND
58810: IFFALSE 58950
58812: GO 58814
58814: DISABLE
58815: LD_INT 0
58817: PPUSH
58818: PPUSH
// begin ToLua ( displayPowell(); ) ;
58819: LD_STRING displayPowell();
58821: PPUSH
58822: CALL_OW 559
// uc_side := 0 ;
58826: LD_ADDR_OWVAR 20
58830: PUSH
58831: LD_INT 0
58833: ST_TO_ADDR
// uc_nation := 2 ;
58834: LD_ADDR_OWVAR 21
58838: PUSH
58839: LD_INT 2
58841: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58842: LD_ADDR_OWVAR 37
58846: PUSH
58847: LD_INT 14
58849: ST_TO_ADDR
// vc_engine := engine_siberite ;
58850: LD_ADDR_OWVAR 39
58854: PUSH
58855: LD_INT 3
58857: ST_TO_ADDR
// vc_control := control_apeman ;
58858: LD_ADDR_OWVAR 38
58862: PUSH
58863: LD_INT 5
58865: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58866: LD_ADDR_OWVAR 40
58870: PUSH
58871: LD_INT 29
58873: ST_TO_ADDR
// un := CreateVehicle ;
58874: LD_ADDR_VAR 0 2
58878: PUSH
58879: CALL_OW 45
58883: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58884: LD_VAR 0 2
58888: PPUSH
58889: LD_INT 1
58891: PPUSH
58892: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58896: LD_INT 35
58898: PPUSH
58899: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58903: LD_VAR 0 2
58907: PPUSH
58908: LD_INT 22
58910: PUSH
58911: LD_OWVAR 2
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PPUSH
58920: CALL_OW 69
58924: PPUSH
58925: LD_VAR 0 2
58929: PPUSH
58930: CALL_OW 74
58934: PPUSH
58935: CALL_OW 115
// until IsDead ( un ) ;
58939: LD_VAR 0 2
58943: PPUSH
58944: CALL_OW 301
58948: IFFALSE 58896
// end ;
58950: PPOPN 2
58952: END
// every 0 0$1 trigger StreamModeActive and sStu do
58953: LD_EXP 13
58957: IFFALSE 58965
58959: PUSH
58960: LD_EXP 52
58964: AND
58965: IFFALSE 58981
58967: GO 58969
58969: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58970: LD_STRING displayStucuk();
58972: PPUSH
58973: CALL_OW 559
// ResetFog ;
58977: CALL_OW 335
// end ;
58981: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58982: LD_EXP 13
58986: IFFALSE 58994
58988: PUSH
58989: LD_EXP 45
58993: AND
58994: IFFALSE 59135
58996: GO 58998
58998: DISABLE
58999: LD_INT 0
59001: PPUSH
59002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59003: LD_ADDR_VAR 0 2
59007: PUSH
59008: LD_INT 22
59010: PUSH
59011: LD_OWVAR 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 21
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PPUSH
59034: CALL_OW 69
59038: ST_TO_ADDR
// if not tmp then
59039: LD_VAR 0 2
59043: NOT
59044: IFFALSE 59048
// exit ;
59046: GO 59135
// un := tmp [ rand ( 1 , tmp ) ] ;
59048: LD_ADDR_VAR 0 1
59052: PUSH
59053: LD_VAR 0 2
59057: PUSH
59058: LD_INT 1
59060: PPUSH
59061: LD_VAR 0 2
59065: PPUSH
59066: CALL_OW 12
59070: ARRAY
59071: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59072: LD_VAR 0 1
59076: PPUSH
59077: LD_INT 0
59079: PPUSH
59080: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59084: LD_VAR 0 1
59088: PPUSH
59089: LD_OWVAR 3
59093: PUSH
59094: LD_VAR 0 1
59098: DIFF
59099: PPUSH
59100: LD_VAR 0 1
59104: PPUSH
59105: CALL_OW 74
59109: PPUSH
59110: CALL_OW 115
// wait ( 0 0$20 ) ;
59114: LD_INT 700
59116: PPUSH
59117: CALL_OW 67
// SetSide ( un , your_side ) ;
59121: LD_VAR 0 1
59125: PPUSH
59126: LD_OWVAR 2
59130: PPUSH
59131: CALL_OW 235
// end ;
59135: PPOPN 2
59137: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59138: LD_EXP 13
59142: IFFALSE 59150
59144: PUSH
59145: LD_EXP 46
59149: AND
59150: IFFALSE 59256
59152: GO 59154
59154: DISABLE
59155: LD_INT 0
59157: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59158: LD_ADDR_VAR 0 1
59162: PUSH
59163: LD_INT 22
59165: PUSH
59166: LD_OWVAR 2
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 30
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 30
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PPUSH
59207: CALL_OW 69
59211: ST_TO_ADDR
// if not depot then
59212: LD_VAR 0 1
59216: NOT
59217: IFFALSE 59221
// exit ;
59219: GO 59256
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59221: LD_VAR 0 1
59225: PUSH
59226: LD_INT 1
59228: ARRAY
59229: PPUSH
59230: CALL_OW 250
59234: PPUSH
59235: LD_VAR 0 1
59239: PUSH
59240: LD_INT 1
59242: ARRAY
59243: PPUSH
59244: CALL_OW 251
59248: PPUSH
59249: LD_INT 70
59251: PPUSH
59252: CALL_OW 495
// end ;
59256: PPOPN 1
59258: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59259: LD_EXP 13
59263: IFFALSE 59271
59265: PUSH
59266: LD_EXP 47
59270: AND
59271: IFFALSE 59482
59273: GO 59275
59275: DISABLE
59276: LD_INT 0
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
59282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59283: LD_ADDR_VAR 0 5
59287: PUSH
59288: LD_INT 22
59290: PUSH
59291: LD_OWVAR 2
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 21
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PPUSH
59314: CALL_OW 69
59318: ST_TO_ADDR
// if not tmp then
59319: LD_VAR 0 5
59323: NOT
59324: IFFALSE 59328
// exit ;
59326: GO 59482
// for i in tmp do
59328: LD_ADDR_VAR 0 1
59332: PUSH
59333: LD_VAR 0 5
59337: PUSH
59338: FOR_IN
59339: IFFALSE 59480
// begin d := rand ( 0 , 5 ) ;
59341: LD_ADDR_VAR 0 4
59345: PUSH
59346: LD_INT 0
59348: PPUSH
59349: LD_INT 5
59351: PPUSH
59352: CALL_OW 12
59356: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59357: LD_ADDR_VAR 0 2
59361: PUSH
59362: LD_VAR 0 1
59366: PPUSH
59367: CALL_OW 250
59371: PPUSH
59372: LD_VAR 0 4
59376: PPUSH
59377: LD_INT 3
59379: PPUSH
59380: LD_INT 12
59382: PPUSH
59383: CALL_OW 12
59387: PPUSH
59388: CALL_OW 272
59392: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59393: LD_ADDR_VAR 0 3
59397: PUSH
59398: LD_VAR 0 1
59402: PPUSH
59403: CALL_OW 251
59407: PPUSH
59408: LD_VAR 0 4
59412: PPUSH
59413: LD_INT 3
59415: PPUSH
59416: LD_INT 12
59418: PPUSH
59419: CALL_OW 12
59423: PPUSH
59424: CALL_OW 273
59428: ST_TO_ADDR
// if ValidHex ( x , y ) then
59429: LD_VAR 0 2
59433: PPUSH
59434: LD_VAR 0 3
59438: PPUSH
59439: CALL_OW 488
59443: IFFALSE 59478
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59445: LD_VAR 0 1
59449: PPUSH
59450: LD_VAR 0 2
59454: PPUSH
59455: LD_VAR 0 3
59459: PPUSH
59460: LD_INT 3
59462: PPUSH
59463: LD_INT 6
59465: PPUSH
59466: CALL_OW 12
59470: PPUSH
59471: LD_INT 1
59473: PPUSH
59474: CALL_OW 483
// end ;
59478: GO 59338
59480: POP
59481: POP
// end ;
59482: PPOPN 5
59484: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59485: LD_EXP 13
59489: IFFALSE 59497
59491: PUSH
59492: LD_EXP 48
59496: AND
59497: IFFALSE 59591
59499: GO 59501
59501: DISABLE
59502: LD_INT 0
59504: PPUSH
59505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59506: LD_ADDR_VAR 0 2
59510: PUSH
59511: LD_INT 22
59513: PUSH
59514: LD_OWVAR 2
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 32
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 21
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: PPUSH
59548: CALL_OW 69
59552: ST_TO_ADDR
// if not tmp then
59553: LD_VAR 0 2
59557: NOT
59558: IFFALSE 59562
// exit ;
59560: GO 59591
// for i in tmp do
59562: LD_ADDR_VAR 0 1
59566: PUSH
59567: LD_VAR 0 2
59571: PUSH
59572: FOR_IN
59573: IFFALSE 59589
// SetFuel ( i , 0 ) ;
59575: LD_VAR 0 1
59579: PPUSH
59580: LD_INT 0
59582: PPUSH
59583: CALL_OW 240
59587: GO 59572
59589: POP
59590: POP
// end ;
59591: PPOPN 2
59593: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59594: LD_EXP 13
59598: IFFALSE 59606
59600: PUSH
59601: LD_EXP 49
59605: AND
59606: IFFALSE 59672
59608: GO 59610
59610: DISABLE
59611: LD_INT 0
59613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59614: LD_ADDR_VAR 0 1
59618: PUSH
59619: LD_INT 22
59621: PUSH
59622: LD_OWVAR 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 30
59633: PUSH
59634: LD_INT 29
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PPUSH
59645: CALL_OW 69
59649: ST_TO_ADDR
// if not tmp then
59650: LD_VAR 0 1
59654: NOT
59655: IFFALSE 59659
// exit ;
59657: GO 59672
// DestroyUnit ( tmp [ 1 ] ) ;
59659: LD_VAR 0 1
59663: PUSH
59664: LD_INT 1
59666: ARRAY
59667: PPUSH
59668: CALL_OW 65
// end ;
59672: PPOPN 1
59674: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59675: LD_EXP 13
59679: IFFALSE 59687
59681: PUSH
59682: LD_EXP 51
59686: AND
59687: IFFALSE 59816
59689: GO 59691
59691: DISABLE
59692: LD_INT 0
59694: PPUSH
// begin uc_side := 0 ;
59695: LD_ADDR_OWVAR 20
59699: PUSH
59700: LD_INT 0
59702: ST_TO_ADDR
// uc_nation := nation_arabian ;
59703: LD_ADDR_OWVAR 21
59707: PUSH
59708: LD_INT 2
59710: ST_TO_ADDR
// hc_gallery :=  ;
59711: LD_ADDR_OWVAR 33
59715: PUSH
59716: LD_STRING 
59718: ST_TO_ADDR
// hc_name :=  ;
59719: LD_ADDR_OWVAR 26
59723: PUSH
59724: LD_STRING 
59726: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59727: LD_INT 1
59729: PPUSH
59730: LD_INT 11
59732: PPUSH
59733: LD_INT 10
59735: PPUSH
59736: CALL_OW 380
// un := CreateHuman ;
59740: LD_ADDR_VAR 0 1
59744: PUSH
59745: CALL_OW 44
59749: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59750: LD_VAR 0 1
59754: PPUSH
59755: LD_INT 1
59757: PPUSH
59758: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59762: LD_INT 35
59764: PPUSH
59765: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59769: LD_VAR 0 1
59773: PPUSH
59774: LD_INT 22
59776: PUSH
59777: LD_OWVAR 2
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PPUSH
59786: CALL_OW 69
59790: PPUSH
59791: LD_VAR 0 1
59795: PPUSH
59796: CALL_OW 74
59800: PPUSH
59801: CALL_OW 115
// until IsDead ( un ) ;
59805: LD_VAR 0 1
59809: PPUSH
59810: CALL_OW 301
59814: IFFALSE 59762
// end ;
59816: PPOPN 1
59818: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59819: LD_EXP 13
59823: IFFALSE 59831
59825: PUSH
59826: LD_EXP 53
59830: AND
59831: IFFALSE 59843
59833: GO 59835
59835: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59836: LD_STRING earthquake(getX(game), 0, 32)
59838: PPUSH
59839: CALL_OW 559
59843: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59844: LD_EXP 13
59848: IFFALSE 59856
59850: PUSH
59851: LD_EXP 54
59855: AND
59856: IFFALSE 59947
59858: GO 59860
59860: DISABLE
59861: LD_INT 0
59863: PPUSH
// begin enable ;
59864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59865: LD_ADDR_VAR 0 1
59869: PUSH
59870: LD_INT 22
59872: PUSH
59873: LD_OWVAR 2
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 21
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 33
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: PPUSH
59907: CALL_OW 69
59911: ST_TO_ADDR
// if not tmp then
59912: LD_VAR 0 1
59916: NOT
59917: IFFALSE 59921
// exit ;
59919: GO 59947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59921: LD_VAR 0 1
59925: PUSH
59926: LD_INT 1
59928: PPUSH
59929: LD_VAR 0 1
59933: PPUSH
59934: CALL_OW 12
59938: ARRAY
59939: PPUSH
59940: LD_INT 1
59942: PPUSH
59943: CALL_OW 234
// end ;
59947: PPOPN 1
59949: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59950: LD_EXP 13
59954: IFFALSE 59962
59956: PUSH
59957: LD_EXP 55
59961: AND
59962: IFFALSE 60103
59964: GO 59966
59966: DISABLE
59967: LD_INT 0
59969: PPUSH
59970: PPUSH
59971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59972: LD_ADDR_VAR 0 3
59976: PUSH
59977: LD_INT 22
59979: PUSH
59980: LD_OWVAR 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 25
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PPUSH
60003: CALL_OW 69
60007: ST_TO_ADDR
// if not tmp then
60008: LD_VAR 0 3
60012: NOT
60013: IFFALSE 60017
// exit ;
60015: GO 60103
// un := tmp [ rand ( 1 , tmp ) ] ;
60017: LD_ADDR_VAR 0 2
60021: PUSH
60022: LD_VAR 0 3
60026: PUSH
60027: LD_INT 1
60029: PPUSH
60030: LD_VAR 0 3
60034: PPUSH
60035: CALL_OW 12
60039: ARRAY
60040: ST_TO_ADDR
// if Crawls ( un ) then
60041: LD_VAR 0 2
60045: PPUSH
60046: CALL_OW 318
60050: IFFALSE 60061
// ComWalk ( un ) ;
60052: LD_VAR 0 2
60056: PPUSH
60057: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60061: LD_VAR 0 2
60065: PPUSH
60066: LD_INT 9
60068: PPUSH
60069: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60073: LD_INT 28
60075: PPUSH
60076: LD_OWVAR 2
60080: PPUSH
60081: LD_INT 2
60083: PPUSH
60084: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60088: LD_INT 29
60090: PPUSH
60091: LD_OWVAR 2
60095: PPUSH
60096: LD_INT 2
60098: PPUSH
60099: CALL_OW 322
// end ;
60103: PPOPN 3
60105: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60106: LD_EXP 13
60110: IFFALSE 60118
60112: PUSH
60113: LD_EXP 56
60117: AND
60118: IFFALSE 60229
60120: GO 60122
60122: DISABLE
60123: LD_INT 0
60125: PPUSH
60126: PPUSH
60127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60128: LD_ADDR_VAR 0 3
60132: PUSH
60133: LD_INT 22
60135: PUSH
60136: LD_OWVAR 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 25
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PPUSH
60159: CALL_OW 69
60163: ST_TO_ADDR
// if not tmp then
60164: LD_VAR 0 3
60168: NOT
60169: IFFALSE 60173
// exit ;
60171: GO 60229
// un := tmp [ rand ( 1 , tmp ) ] ;
60173: LD_ADDR_VAR 0 2
60177: PUSH
60178: LD_VAR 0 3
60182: PUSH
60183: LD_INT 1
60185: PPUSH
60186: LD_VAR 0 3
60190: PPUSH
60191: CALL_OW 12
60195: ARRAY
60196: ST_TO_ADDR
// if Crawls ( un ) then
60197: LD_VAR 0 2
60201: PPUSH
60202: CALL_OW 318
60206: IFFALSE 60217
// ComWalk ( un ) ;
60208: LD_VAR 0 2
60212: PPUSH
60213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60217: LD_VAR 0 2
60221: PPUSH
60222: LD_INT 8
60224: PPUSH
60225: CALL_OW 336
// end ;
60229: PPOPN 3
60231: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60232: LD_EXP 13
60236: IFFALSE 60244
60238: PUSH
60239: LD_EXP 57
60243: AND
60244: IFFALSE 60388
60246: GO 60248
60248: DISABLE
60249: LD_INT 0
60251: PPUSH
60252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60253: LD_ADDR_VAR 0 2
60257: PUSH
60258: LD_INT 22
60260: PUSH
60261: LD_OWVAR 2
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 21
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 34
60285: PUSH
60286: LD_INT 12
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 34
60295: PUSH
60296: LD_INT 51
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 34
60305: PUSH
60306: LD_INT 32
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: PPUSH
60324: CALL_OW 69
60328: ST_TO_ADDR
// if not tmp then
60329: LD_VAR 0 2
60333: NOT
60334: IFFALSE 60338
// exit ;
60336: GO 60388
// for i in tmp do
60338: LD_ADDR_VAR 0 1
60342: PUSH
60343: LD_VAR 0 2
60347: PUSH
60348: FOR_IN
60349: IFFALSE 60386
// if GetCargo ( i , mat_artifact ) = 0 then
60351: LD_VAR 0 1
60355: PPUSH
60356: LD_INT 4
60358: PPUSH
60359: CALL_OW 289
60363: PUSH
60364: LD_INT 0
60366: EQUAL
60367: IFFALSE 60384
// SetCargo ( i , mat_siberit , 100 ) ;
60369: LD_VAR 0 1
60373: PPUSH
60374: LD_INT 3
60376: PPUSH
60377: LD_INT 100
60379: PPUSH
60380: CALL_OW 290
60384: GO 60348
60386: POP
60387: POP
// end ;
60388: PPOPN 2
60390: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60391: LD_EXP 13
60395: IFFALSE 60403
60397: PUSH
60398: LD_EXP 58
60402: AND
60403: IFFALSE 60586
60405: GO 60407
60407: DISABLE
60408: LD_INT 0
60410: PPUSH
60411: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60412: LD_ADDR_VAR 0 2
60416: PUSH
60417: LD_INT 22
60419: PUSH
60420: LD_OWVAR 2
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PPUSH
60429: CALL_OW 69
60433: ST_TO_ADDR
// if not tmp then
60434: LD_VAR 0 2
60438: NOT
60439: IFFALSE 60443
// exit ;
60441: GO 60586
// for i := 1 to 2 do
60443: LD_ADDR_VAR 0 1
60447: PUSH
60448: DOUBLE
60449: LD_INT 1
60451: DEC
60452: ST_TO_ADDR
60453: LD_INT 2
60455: PUSH
60456: FOR_TO
60457: IFFALSE 60584
// begin uc_side := your_side ;
60459: LD_ADDR_OWVAR 20
60463: PUSH
60464: LD_OWVAR 2
60468: ST_TO_ADDR
// uc_nation := nation_american ;
60469: LD_ADDR_OWVAR 21
60473: PUSH
60474: LD_INT 1
60476: ST_TO_ADDR
// vc_chassis := us_morphling ;
60477: LD_ADDR_OWVAR 37
60481: PUSH
60482: LD_INT 5
60484: ST_TO_ADDR
// vc_engine := engine_siberite ;
60485: LD_ADDR_OWVAR 39
60489: PUSH
60490: LD_INT 3
60492: ST_TO_ADDR
// vc_control := control_computer ;
60493: LD_ADDR_OWVAR 38
60497: PUSH
60498: LD_INT 3
60500: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60501: LD_ADDR_OWVAR 40
60505: PUSH
60506: LD_INT 10
60508: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60509: LD_VAR 0 2
60513: PUSH
60514: LD_INT 1
60516: ARRAY
60517: PPUSH
60518: CALL_OW 310
60522: NOT
60523: IFFALSE 60570
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60525: CALL_OW 45
60529: PPUSH
60530: LD_VAR 0 2
60534: PUSH
60535: LD_INT 1
60537: ARRAY
60538: PPUSH
60539: CALL_OW 250
60543: PPUSH
60544: LD_VAR 0 2
60548: PUSH
60549: LD_INT 1
60551: ARRAY
60552: PPUSH
60553: CALL_OW 251
60557: PPUSH
60558: LD_INT 12
60560: PPUSH
60561: LD_INT 1
60563: PPUSH
60564: CALL_OW 50
60568: GO 60582
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60570: CALL_OW 45
60574: PPUSH
60575: LD_INT 1
60577: PPUSH
60578: CALL_OW 51
// end ;
60582: GO 60456
60584: POP
60585: POP
// end ;
60586: PPOPN 2
60588: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60589: LD_EXP 13
60593: IFFALSE 60601
60595: PUSH
60596: LD_EXP 59
60600: AND
60601: IFFALSE 60823
60603: GO 60605
60605: DISABLE
60606: LD_INT 0
60608: PPUSH
60609: PPUSH
60610: PPUSH
60611: PPUSH
60612: PPUSH
60613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60614: LD_ADDR_VAR 0 6
60618: PUSH
60619: LD_INT 22
60621: PUSH
60622: LD_OWVAR 2
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 21
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 3
60643: PUSH
60644: LD_INT 23
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: PPUSH
60663: CALL_OW 69
60667: ST_TO_ADDR
// if not tmp then
60668: LD_VAR 0 6
60672: NOT
60673: IFFALSE 60677
// exit ;
60675: GO 60823
// s1 := rand ( 1 , 4 ) ;
60677: LD_ADDR_VAR 0 2
60681: PUSH
60682: LD_INT 1
60684: PPUSH
60685: LD_INT 4
60687: PPUSH
60688: CALL_OW 12
60692: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60693: LD_ADDR_VAR 0 4
60697: PUSH
60698: LD_VAR 0 6
60702: PUSH
60703: LD_INT 1
60705: ARRAY
60706: PPUSH
60707: LD_VAR 0 2
60711: PPUSH
60712: CALL_OW 259
60716: ST_TO_ADDR
// if s1 = 1 then
60717: LD_VAR 0 2
60721: PUSH
60722: LD_INT 1
60724: EQUAL
60725: IFFALSE 60745
// s2 := rand ( 2 , 4 ) else
60727: LD_ADDR_VAR 0 3
60731: PUSH
60732: LD_INT 2
60734: PPUSH
60735: LD_INT 4
60737: PPUSH
60738: CALL_OW 12
60742: ST_TO_ADDR
60743: GO 60753
// s2 := 1 ;
60745: LD_ADDR_VAR 0 3
60749: PUSH
60750: LD_INT 1
60752: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60753: LD_ADDR_VAR 0 5
60757: PUSH
60758: LD_VAR 0 6
60762: PUSH
60763: LD_INT 1
60765: ARRAY
60766: PPUSH
60767: LD_VAR 0 3
60771: PPUSH
60772: CALL_OW 259
60776: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60777: LD_VAR 0 6
60781: PUSH
60782: LD_INT 1
60784: ARRAY
60785: PPUSH
60786: LD_VAR 0 2
60790: PPUSH
60791: LD_VAR 0 5
60795: PPUSH
60796: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60800: LD_VAR 0 6
60804: PUSH
60805: LD_INT 1
60807: ARRAY
60808: PPUSH
60809: LD_VAR 0 3
60813: PPUSH
60814: LD_VAR 0 4
60818: PPUSH
60819: CALL_OW 237
// end ;
60823: PPOPN 6
60825: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60826: LD_EXP 13
60830: IFFALSE 60838
60832: PUSH
60833: LD_EXP 60
60837: AND
60838: IFFALSE 60917
60840: GO 60842
60842: DISABLE
60843: LD_INT 0
60845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60846: LD_ADDR_VAR 0 1
60850: PUSH
60851: LD_INT 22
60853: PUSH
60854: LD_OWVAR 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 30
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PPUSH
60877: CALL_OW 69
60881: ST_TO_ADDR
// if not tmp then
60882: LD_VAR 0 1
60886: NOT
60887: IFFALSE 60891
// exit ;
60889: GO 60917
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60891: LD_VAR 0 1
60895: PUSH
60896: LD_INT 1
60898: PPUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: CALL_OW 12
60908: ARRAY
60909: PPUSH
60910: LD_INT 1
60912: PPUSH
60913: CALL_OW 234
// end ;
60917: PPOPN 1
60919: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60920: LD_EXP 13
60924: IFFALSE 60932
60926: PUSH
60927: LD_EXP 61
60931: AND
60932: IFFALSE 61044
60934: GO 60936
60936: DISABLE
60937: LD_INT 0
60939: PPUSH
60940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60941: LD_ADDR_VAR 0 2
60945: PUSH
60946: LD_INT 22
60948: PUSH
60949: LD_OWVAR 2
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 30
60963: PUSH
60964: LD_INT 27
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 30
60973: PUSH
60974: LD_INT 26
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 30
60983: PUSH
60984: LD_INT 28
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PPUSH
61001: CALL_OW 69
61005: ST_TO_ADDR
// if not tmp then
61006: LD_VAR 0 2
61010: NOT
61011: IFFALSE 61015
// exit ;
61013: GO 61044
// for i in tmp do
61015: LD_ADDR_VAR 0 1
61019: PUSH
61020: LD_VAR 0 2
61024: PUSH
61025: FOR_IN
61026: IFFALSE 61042
// SetLives ( i , 1 ) ;
61028: LD_VAR 0 1
61032: PPUSH
61033: LD_INT 1
61035: PPUSH
61036: CALL_OW 234
61040: GO 61025
61042: POP
61043: POP
// end ;
61044: PPOPN 2
61046: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61047: LD_EXP 13
61051: IFFALSE 61059
61053: PUSH
61054: LD_EXP 62
61058: AND
61059: IFFALSE 61346
61061: GO 61063
61063: DISABLE
61064: LD_INT 0
61066: PPUSH
61067: PPUSH
61068: PPUSH
// begin i := rand ( 1 , 7 ) ;
61069: LD_ADDR_VAR 0 1
61073: PUSH
61074: LD_INT 1
61076: PPUSH
61077: LD_INT 7
61079: PPUSH
61080: CALL_OW 12
61084: ST_TO_ADDR
// case i of 1 :
61085: LD_VAR 0 1
61089: PUSH
61090: LD_INT 1
61092: DOUBLE
61093: EQUAL
61094: IFTRUE 61098
61096: GO 61108
61098: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61099: LD_STRING earthquake(getX(game), 0, 32)
61101: PPUSH
61102: CALL_OW 559
61106: GO 61346
61108: LD_INT 2
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61116
61114: GO 61130
61116: POP
// begin ToLua ( displayStucuk(); ) ;
61117: LD_STRING displayStucuk();
61119: PPUSH
61120: CALL_OW 559
// ResetFog ;
61124: CALL_OW 335
// end ; 3 :
61128: GO 61346
61130: LD_INT 3
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61138
61136: GO 61242
61138: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61139: LD_ADDR_VAR 0 2
61143: PUSH
61144: LD_INT 22
61146: PUSH
61147: LD_OWVAR 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 25
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PPUSH
61170: CALL_OW 69
61174: ST_TO_ADDR
// if not tmp then
61175: LD_VAR 0 2
61179: NOT
61180: IFFALSE 61184
// exit ;
61182: GO 61346
// un := tmp [ rand ( 1 , tmp ) ] ;
61184: LD_ADDR_VAR 0 3
61188: PUSH
61189: LD_VAR 0 2
61193: PUSH
61194: LD_INT 1
61196: PPUSH
61197: LD_VAR 0 2
61201: PPUSH
61202: CALL_OW 12
61206: ARRAY
61207: ST_TO_ADDR
// if Crawls ( un ) then
61208: LD_VAR 0 3
61212: PPUSH
61213: CALL_OW 318
61217: IFFALSE 61228
// ComWalk ( un ) ;
61219: LD_VAR 0 3
61223: PPUSH
61224: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61228: LD_VAR 0 3
61232: PPUSH
61233: LD_INT 8
61235: PPUSH
61236: CALL_OW 336
// end ; 4 :
61240: GO 61346
61242: LD_INT 4
61244: DOUBLE
61245: EQUAL
61246: IFTRUE 61250
61248: GO 61324
61250: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61251: LD_ADDR_VAR 0 2
61255: PUSH
61256: LD_INT 22
61258: PUSH
61259: LD_OWVAR 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 30
61270: PUSH
61271: LD_INT 29
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PPUSH
61282: CALL_OW 69
61286: ST_TO_ADDR
// if not tmp then
61287: LD_VAR 0 2
61291: NOT
61292: IFFALSE 61296
// exit ;
61294: GO 61346
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61296: LD_VAR 0 2
61300: PUSH
61301: LD_INT 1
61303: ARRAY
61304: PPUSH
61305: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61309: LD_VAR 0 2
61313: PUSH
61314: LD_INT 1
61316: ARRAY
61317: PPUSH
61318: CALL_OW 65
// end ; 5 .. 7 :
61322: GO 61346
61324: LD_INT 5
61326: DOUBLE
61327: GREATEREQUAL
61328: IFFALSE 61336
61330: LD_INT 7
61332: DOUBLE
61333: LESSEQUAL
61334: IFTRUE 61338
61336: GO 61345
61338: POP
// StreamSibBomb ; end ;
61339: CALL 57527 0 0
61343: GO 61346
61345: POP
// end ;
61346: PPOPN 3
61348: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61349: LD_EXP 13
61353: IFFALSE 61361
61355: PUSH
61356: LD_EXP 63
61360: AND
61361: IFFALSE 61517
61363: GO 61365
61365: DISABLE
61366: LD_INT 0
61368: PPUSH
61369: PPUSH
61370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61371: LD_ADDR_VAR 0 2
61375: PUSH
61376: LD_INT 81
61378: PUSH
61379: LD_OWVAR 2
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: LD_INT 21
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 21
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PPUSH
61420: CALL_OW 69
61424: ST_TO_ADDR
// if not tmp then
61425: LD_VAR 0 2
61429: NOT
61430: IFFALSE 61434
// exit ;
61432: GO 61517
// p := 0 ;
61434: LD_ADDR_VAR 0 3
61438: PUSH
61439: LD_INT 0
61441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61442: LD_INT 35
61444: PPUSH
61445: CALL_OW 67
// p := p + 1 ;
61449: LD_ADDR_VAR 0 3
61453: PUSH
61454: LD_VAR 0 3
61458: PUSH
61459: LD_INT 1
61461: PLUS
61462: ST_TO_ADDR
// for i in tmp do
61463: LD_ADDR_VAR 0 1
61467: PUSH
61468: LD_VAR 0 2
61472: PUSH
61473: FOR_IN
61474: IFFALSE 61505
// if GetLives ( i ) < 1000 then
61476: LD_VAR 0 1
61480: PPUSH
61481: CALL_OW 256
61485: PUSH
61486: LD_INT 1000
61488: LESS
61489: IFFALSE 61503
// SetLives ( i , 1000 ) ;
61491: LD_VAR 0 1
61495: PPUSH
61496: LD_INT 1000
61498: PPUSH
61499: CALL_OW 234
61503: GO 61473
61505: POP
61506: POP
// until p > 20 ;
61507: LD_VAR 0 3
61511: PUSH
61512: LD_INT 20
61514: GREATER
61515: IFFALSE 61442
// end ;
61517: PPOPN 3
61519: END
// every 0 0$1 trigger StreamModeActive and sTime do
61520: LD_EXP 13
61524: IFFALSE 61532
61526: PUSH
61527: LD_EXP 64
61531: AND
61532: IFFALSE 61567
61534: GO 61536
61536: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61537: LD_INT 28
61539: PPUSH
61540: LD_OWVAR 2
61544: PPUSH
61545: LD_INT 2
61547: PPUSH
61548: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61552: LD_INT 30
61554: PPUSH
61555: LD_OWVAR 2
61559: PPUSH
61560: LD_INT 2
61562: PPUSH
61563: CALL_OW 322
// end ;
61567: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61568: LD_EXP 13
61572: IFFALSE 61580
61574: PUSH
61575: LD_EXP 65
61579: AND
61580: IFFALSE 61701
61582: GO 61584
61584: DISABLE
61585: LD_INT 0
61587: PPUSH
61588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61589: LD_ADDR_VAR 0 2
61593: PUSH
61594: LD_INT 22
61596: PUSH
61597: LD_OWVAR 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 21
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: LD_INT 23
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: PPUSH
61638: CALL_OW 69
61642: ST_TO_ADDR
// if not tmp then
61643: LD_VAR 0 2
61647: NOT
61648: IFFALSE 61652
// exit ;
61650: GO 61701
// for i in tmp do
61652: LD_ADDR_VAR 0 1
61656: PUSH
61657: LD_VAR 0 2
61661: PUSH
61662: FOR_IN
61663: IFFALSE 61699
// begin if Crawls ( i ) then
61665: LD_VAR 0 1
61669: PPUSH
61670: CALL_OW 318
61674: IFFALSE 61685
// ComWalk ( i ) ;
61676: LD_VAR 0 1
61680: PPUSH
61681: CALL_OW 138
// SetClass ( i , 2 ) ;
61685: LD_VAR 0 1
61689: PPUSH
61690: LD_INT 2
61692: PPUSH
61693: CALL_OW 336
// end ;
61697: GO 61662
61699: POP
61700: POP
// end ;
61701: PPOPN 2
61703: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61704: LD_EXP 13
61708: IFFALSE 61716
61710: PUSH
61711: LD_EXP 66
61715: AND
61716: IFFALSE 62006
61718: GO 61720
61720: DISABLE
61721: LD_INT 0
61723: PPUSH
61724: PPUSH
61725: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61726: LD_OWVAR 2
61730: PPUSH
61731: LD_INT 9
61733: PPUSH
61734: LD_INT 1
61736: PPUSH
61737: LD_INT 1
61739: PPUSH
61740: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61744: LD_INT 9
61746: PPUSH
61747: LD_OWVAR 2
61751: PPUSH
61752: CALL_OW 343
// uc_side := 9 ;
61756: LD_ADDR_OWVAR 20
61760: PUSH
61761: LD_INT 9
61763: ST_TO_ADDR
// uc_nation := 2 ;
61764: LD_ADDR_OWVAR 21
61768: PUSH
61769: LD_INT 2
61771: ST_TO_ADDR
// hc_name := Dark Warrior ;
61772: LD_ADDR_OWVAR 26
61776: PUSH
61777: LD_STRING Dark Warrior
61779: ST_TO_ADDR
// hc_gallery :=  ;
61780: LD_ADDR_OWVAR 33
61784: PUSH
61785: LD_STRING 
61787: ST_TO_ADDR
// hc_noskilllimit := true ;
61788: LD_ADDR_OWVAR 76
61792: PUSH
61793: LD_INT 1
61795: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61796: LD_ADDR_OWVAR 31
61800: PUSH
61801: LD_INT 30
61803: PUSH
61804: LD_INT 30
61806: PUSH
61807: LD_INT 30
61809: PUSH
61810: LD_INT 30
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// un := CreateHuman ;
61819: LD_ADDR_VAR 0 3
61823: PUSH
61824: CALL_OW 44
61828: ST_TO_ADDR
// hc_noskilllimit := false ;
61829: LD_ADDR_OWVAR 76
61833: PUSH
61834: LD_INT 0
61836: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61837: LD_VAR 0 3
61841: PPUSH
61842: LD_INT 1
61844: PPUSH
61845: CALL_OW 51
// ToLua ( playRanger() ) ;
61849: LD_STRING playRanger()
61851: PPUSH
61852: CALL_OW 559
// p := 0 ;
61856: LD_ADDR_VAR 0 2
61860: PUSH
61861: LD_INT 0
61863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61864: LD_INT 35
61866: PPUSH
61867: CALL_OW 67
// p := p + 1 ;
61871: LD_ADDR_VAR 0 2
61875: PUSH
61876: LD_VAR 0 2
61880: PUSH
61881: LD_INT 1
61883: PLUS
61884: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61885: LD_VAR 0 3
61889: PPUSH
61890: CALL_OW 256
61894: PUSH
61895: LD_INT 1000
61897: LESS
61898: IFFALSE 61912
// SetLives ( un , 1000 ) ;
61900: LD_VAR 0 3
61904: PPUSH
61905: LD_INT 1000
61907: PPUSH
61908: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61912: LD_VAR 0 3
61916: PPUSH
61917: LD_INT 81
61919: PUSH
61920: LD_OWVAR 2
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 91
61931: PUSH
61932: LD_VAR 0 3
61936: PUSH
61937: LD_INT 30
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PPUSH
61949: CALL_OW 69
61953: PPUSH
61954: LD_VAR 0 3
61958: PPUSH
61959: CALL_OW 74
61963: PPUSH
61964: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61968: LD_VAR 0 2
61972: PUSH
61973: LD_INT 80
61975: GREATER
61976: IFTRUE 61989
61978: PUSH
61979: LD_VAR 0 3
61983: PPUSH
61984: CALL_OW 301
61988: OR
61989: IFFALSE 61864
// if un then
61991: LD_VAR 0 3
61995: IFFALSE 62006
// RemoveUnit ( un ) ;
61997: LD_VAR 0 3
62001: PPUSH
62002: CALL_OW 64
// end ;
62006: PPOPN 3
62008: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62009: LD_EXP 67
62013: IFFALSE 62129
62015: GO 62017
62017: DISABLE
62018: LD_INT 0
62020: PPUSH
62021: PPUSH
62022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62023: LD_ADDR_VAR 0 2
62027: PUSH
62028: LD_INT 81
62030: PUSH
62031: LD_OWVAR 2
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 21
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PPUSH
62054: CALL_OW 69
62058: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62059: LD_STRING playComputer()
62061: PPUSH
62062: CALL_OW 559
// if not tmp then
62066: LD_VAR 0 2
62070: NOT
62071: IFFALSE 62075
// exit ;
62073: GO 62129
// for i in tmp do
62075: LD_ADDR_VAR 0 1
62079: PUSH
62080: LD_VAR 0 2
62084: PUSH
62085: FOR_IN
62086: IFFALSE 62127
// for j := 1 to 4 do
62088: LD_ADDR_VAR 0 3
62092: PUSH
62093: DOUBLE
62094: LD_INT 1
62096: DEC
62097: ST_TO_ADDR
62098: LD_INT 4
62100: PUSH
62101: FOR_TO
62102: IFFALSE 62123
// SetSkill ( i , j , 10 ) ;
62104: LD_VAR 0 1
62108: PPUSH
62109: LD_VAR 0 3
62113: PPUSH
62114: LD_INT 10
62116: PPUSH
62117: CALL_OW 237
62121: GO 62101
62123: POP
62124: POP
62125: GO 62085
62127: POP
62128: POP
// end ;
62129: PPOPN 3
62131: END
// every 0 0$1 trigger s30 do var i , tmp ;
62132: LD_EXP 68
62136: IFFALSE 62205
62138: GO 62140
62140: DISABLE
62141: LD_INT 0
62143: PPUSH
62144: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62145: LD_ADDR_VAR 0 2
62149: PUSH
62150: LD_INT 22
62152: PUSH
62153: LD_OWVAR 2
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PPUSH
62162: CALL_OW 69
62166: ST_TO_ADDR
// if not tmp then
62167: LD_VAR 0 2
62171: NOT
62172: IFFALSE 62176
// exit ;
62174: GO 62205
// for i in tmp do
62176: LD_ADDR_VAR 0 1
62180: PUSH
62181: LD_VAR 0 2
62185: PUSH
62186: FOR_IN
62187: IFFALSE 62203
// SetLives ( i , 300 ) ;
62189: LD_VAR 0 1
62193: PPUSH
62194: LD_INT 300
62196: PPUSH
62197: CALL_OW 234
62201: GO 62186
62203: POP
62204: POP
// end ;
62205: PPOPN 2
62207: END
// every 0 0$1 trigger s60 do var i , tmp ;
62208: LD_EXP 69
62212: IFFALSE 62281
62214: GO 62216
62216: DISABLE
62217: LD_INT 0
62219: PPUSH
62220: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62221: LD_ADDR_VAR 0 2
62225: PUSH
62226: LD_INT 22
62228: PUSH
62229: LD_OWVAR 2
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PPUSH
62238: CALL_OW 69
62242: ST_TO_ADDR
// if not tmp then
62243: LD_VAR 0 2
62247: NOT
62248: IFFALSE 62252
// exit ;
62250: GO 62281
// for i in tmp do
62252: LD_ADDR_VAR 0 1
62256: PUSH
62257: LD_VAR 0 2
62261: PUSH
62262: FOR_IN
62263: IFFALSE 62279
// SetLives ( i , 600 ) ;
62265: LD_VAR 0 1
62269: PPUSH
62270: LD_INT 600
62272: PPUSH
62273: CALL_OW 234
62277: GO 62262
62279: POP
62280: POP
// end ;
62281: PPOPN 2
62283: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62284: LD_INT 0
62286: PPUSH
// case cmd of 301 :
62287: LD_VAR 0 1
62291: PUSH
62292: LD_INT 301
62294: DOUBLE
62295: EQUAL
62296: IFTRUE 62300
62298: GO 62332
62300: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62301: LD_VAR 0 6
62305: PPUSH
62306: LD_VAR 0 7
62310: PPUSH
62311: LD_VAR 0 8
62315: PPUSH
62316: LD_VAR 0 4
62320: PPUSH
62321: LD_VAR 0 5
62325: PPUSH
62326: CALL 63545 0 5
62330: GO 62453
62332: LD_INT 302
62334: DOUBLE
62335: EQUAL
62336: IFTRUE 62340
62338: GO 62377
62340: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62341: LD_VAR 0 6
62345: PPUSH
62346: LD_VAR 0 7
62350: PPUSH
62351: LD_VAR 0 8
62355: PPUSH
62356: LD_VAR 0 9
62360: PPUSH
62361: LD_VAR 0 4
62365: PPUSH
62366: LD_VAR 0 5
62370: PPUSH
62371: CALL 63636 0 6
62375: GO 62453
62377: LD_INT 303
62379: DOUBLE
62380: EQUAL
62381: IFTRUE 62385
62383: GO 62422
62385: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62386: LD_VAR 0 6
62390: PPUSH
62391: LD_VAR 0 7
62395: PPUSH
62396: LD_VAR 0 8
62400: PPUSH
62401: LD_VAR 0 9
62405: PPUSH
62406: LD_VAR 0 4
62410: PPUSH
62411: LD_VAR 0 5
62415: PPUSH
62416: CALL 62458 0 6
62420: GO 62453
62422: LD_INT 304
62424: DOUBLE
62425: EQUAL
62426: IFTRUE 62430
62428: GO 62452
62430: POP
// hHackTeleport ( unit , x , y ) ; end ;
62431: LD_VAR 0 2
62435: PPUSH
62436: LD_VAR 0 4
62440: PPUSH
62441: LD_VAR 0 5
62445: PPUSH
62446: CALL 64229 0 3
62450: GO 62453
62452: POP
// end ;
62453: LD_VAR 0 12
62457: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62458: LD_INT 0
62460: PPUSH
62461: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62462: LD_VAR 0 1
62466: PUSH
62467: LD_INT 1
62469: LESS
62470: IFTRUE 62482
62472: PUSH
62473: LD_VAR 0 1
62477: PUSH
62478: LD_INT 3
62480: GREATER
62481: OR
62482: IFTRUE 62500
62484: PUSH
62485: LD_VAR 0 5
62489: PPUSH
62490: LD_VAR 0 6
62494: PPUSH
62495: CALL_OW 428
62499: OR
62500: IFFALSE 62504
// exit ;
62502: GO 63232
// uc_side := your_side ;
62504: LD_ADDR_OWVAR 20
62508: PUSH
62509: LD_OWVAR 2
62513: ST_TO_ADDR
// uc_nation := nation ;
62514: LD_ADDR_OWVAR 21
62518: PUSH
62519: LD_VAR 0 1
62523: ST_TO_ADDR
// bc_level = 1 ;
62524: LD_ADDR_OWVAR 43
62528: PUSH
62529: LD_INT 1
62531: ST_TO_ADDR
// case btype of 1 :
62532: LD_VAR 0 2
62536: PUSH
62537: LD_INT 1
62539: DOUBLE
62540: EQUAL
62541: IFTRUE 62545
62543: GO 62556
62545: POP
// bc_type := b_depot ; 2 :
62546: LD_ADDR_OWVAR 42
62550: PUSH
62551: LD_INT 0
62553: ST_TO_ADDR
62554: GO 63176
62556: LD_INT 2
62558: DOUBLE
62559: EQUAL
62560: IFTRUE 62564
62562: GO 62575
62564: POP
// bc_type := b_warehouse ; 3 :
62565: LD_ADDR_OWVAR 42
62569: PUSH
62570: LD_INT 1
62572: ST_TO_ADDR
62573: GO 63176
62575: LD_INT 3
62577: DOUBLE
62578: EQUAL
62579: IFTRUE 62583
62581: GO 62594
62583: POP
// bc_type := b_lab ; 4 .. 9 :
62584: LD_ADDR_OWVAR 42
62588: PUSH
62589: LD_INT 6
62591: ST_TO_ADDR
62592: GO 63176
62594: LD_INT 4
62596: DOUBLE
62597: GREATEREQUAL
62598: IFFALSE 62606
62600: LD_INT 9
62602: DOUBLE
62603: LESSEQUAL
62604: IFTRUE 62608
62606: GO 62668
62608: POP
// begin bc_type := b_lab_half ;
62609: LD_ADDR_OWVAR 42
62613: PUSH
62614: LD_INT 7
62616: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62617: LD_ADDR_OWVAR 44
62621: PUSH
62622: LD_INT 10
62624: PUSH
62625: LD_INT 11
62627: PUSH
62628: LD_INT 12
62630: PUSH
62631: LD_INT 15
62633: PUSH
62634: LD_INT 14
62636: PUSH
62637: LD_INT 13
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: PUSH
62648: LD_VAR 0 2
62652: PUSH
62653: LD_INT 3
62655: MINUS
62656: ARRAY
62657: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
62658: LD_ADDR_OWVAR 45
62662: PUSH
62663: LD_INT 9
62665: ST_TO_ADDR
// end ; 10 .. 13 :
62666: GO 63176
62668: LD_INT 10
62670: DOUBLE
62671: GREATEREQUAL
62672: IFFALSE 62680
62674: LD_INT 13
62676: DOUBLE
62677: LESSEQUAL
62678: IFTRUE 62682
62680: GO 62759
62682: POP
// begin bc_type := b_lab_full ;
62683: LD_ADDR_OWVAR 42
62687: PUSH
62688: LD_INT 8
62690: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62691: LD_ADDR_OWVAR 44
62695: PUSH
62696: LD_INT 10
62698: PUSH
62699: LD_INT 12
62701: PUSH
62702: LD_INT 14
62704: PUSH
62705: LD_INT 13
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: PUSH
62714: LD_VAR 0 2
62718: PUSH
62719: LD_INT 9
62721: MINUS
62722: ARRAY
62723: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62724: LD_ADDR_OWVAR 45
62728: PUSH
62729: LD_INT 11
62731: PUSH
62732: LD_INT 15
62734: PUSH
62735: LD_INT 12
62737: PUSH
62738: LD_INT 15
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: PUSH
62747: LD_VAR 0 2
62751: PUSH
62752: LD_INT 9
62754: MINUS
62755: ARRAY
62756: ST_TO_ADDR
// end ; 14 :
62757: GO 63176
62759: LD_INT 14
62761: DOUBLE
62762: EQUAL
62763: IFTRUE 62767
62765: GO 62778
62767: POP
// bc_type := b_workshop ; 15 :
62768: LD_ADDR_OWVAR 42
62772: PUSH
62773: LD_INT 2
62775: ST_TO_ADDR
62776: GO 63176
62778: LD_INT 15
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62786
62784: GO 62797
62786: POP
// bc_type := b_factory ; 16 :
62787: LD_ADDR_OWVAR 42
62791: PUSH
62792: LD_INT 3
62794: ST_TO_ADDR
62795: GO 63176
62797: LD_INT 16
62799: DOUBLE
62800: EQUAL
62801: IFTRUE 62805
62803: GO 62816
62805: POP
// bc_type := b_ext_gun ; 17 :
62806: LD_ADDR_OWVAR 42
62810: PUSH
62811: LD_INT 17
62813: ST_TO_ADDR
62814: GO 63176
62816: LD_INT 17
62818: DOUBLE
62819: EQUAL
62820: IFTRUE 62824
62822: GO 62852
62824: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62825: LD_ADDR_OWVAR 42
62829: PUSH
62830: LD_INT 19
62832: PUSH
62833: LD_INT 23
62835: PUSH
62836: LD_INT 19
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: PUSH
62844: LD_VAR 0 1
62848: ARRAY
62849: ST_TO_ADDR
62850: GO 63176
62852: LD_INT 18
62854: DOUBLE
62855: EQUAL
62856: IFTRUE 62860
62858: GO 62871
62860: POP
// bc_type := b_ext_radar ; 19 :
62861: LD_ADDR_OWVAR 42
62865: PUSH
62866: LD_INT 20
62868: ST_TO_ADDR
62869: GO 63176
62871: LD_INT 19
62873: DOUBLE
62874: EQUAL
62875: IFTRUE 62879
62877: GO 62890
62879: POP
// bc_type := b_ext_radio ; 20 :
62880: LD_ADDR_OWVAR 42
62884: PUSH
62885: LD_INT 22
62887: ST_TO_ADDR
62888: GO 63176
62890: LD_INT 20
62892: DOUBLE
62893: EQUAL
62894: IFTRUE 62898
62896: GO 62909
62898: POP
// bc_type := b_ext_siberium ; 21 :
62899: LD_ADDR_OWVAR 42
62903: PUSH
62904: LD_INT 21
62906: ST_TO_ADDR
62907: GO 63176
62909: LD_INT 21
62911: DOUBLE
62912: EQUAL
62913: IFTRUE 62917
62915: GO 62928
62917: POP
// bc_type := b_ext_computer ; 22 :
62918: LD_ADDR_OWVAR 42
62922: PUSH
62923: LD_INT 24
62925: ST_TO_ADDR
62926: GO 63176
62928: LD_INT 22
62930: DOUBLE
62931: EQUAL
62932: IFTRUE 62936
62934: GO 62947
62936: POP
// bc_type := b_ext_track ; 23 :
62937: LD_ADDR_OWVAR 42
62941: PUSH
62942: LD_INT 16
62944: ST_TO_ADDR
62945: GO 63176
62947: LD_INT 23
62949: DOUBLE
62950: EQUAL
62951: IFTRUE 62955
62953: GO 62966
62955: POP
// bc_type := b_ext_laser ; 24 :
62956: LD_ADDR_OWVAR 42
62960: PUSH
62961: LD_INT 25
62963: ST_TO_ADDR
62964: GO 63176
62966: LD_INT 24
62968: DOUBLE
62969: EQUAL
62970: IFTRUE 62974
62972: GO 62985
62974: POP
// bc_type := b_control_tower ; 25 :
62975: LD_ADDR_OWVAR 42
62979: PUSH
62980: LD_INT 36
62982: ST_TO_ADDR
62983: GO 63176
62985: LD_INT 25
62987: DOUBLE
62988: EQUAL
62989: IFTRUE 62993
62991: GO 63004
62993: POP
// bc_type := b_breastwork ; 26 :
62994: LD_ADDR_OWVAR 42
62998: PUSH
62999: LD_INT 31
63001: ST_TO_ADDR
63002: GO 63176
63004: LD_INT 26
63006: DOUBLE
63007: EQUAL
63008: IFTRUE 63012
63010: GO 63023
63012: POP
// bc_type := b_bunker ; 27 :
63013: LD_ADDR_OWVAR 42
63017: PUSH
63018: LD_INT 32
63020: ST_TO_ADDR
63021: GO 63176
63023: LD_INT 27
63025: DOUBLE
63026: EQUAL
63027: IFTRUE 63031
63029: GO 63042
63031: POP
// bc_type := b_turret ; 28 :
63032: LD_ADDR_OWVAR 42
63036: PUSH
63037: LD_INT 33
63039: ST_TO_ADDR
63040: GO 63176
63042: LD_INT 28
63044: DOUBLE
63045: EQUAL
63046: IFTRUE 63050
63048: GO 63061
63050: POP
// bc_type := b_armoury ; 29 :
63051: LD_ADDR_OWVAR 42
63055: PUSH
63056: LD_INT 4
63058: ST_TO_ADDR
63059: GO 63176
63061: LD_INT 29
63063: DOUBLE
63064: EQUAL
63065: IFTRUE 63069
63067: GO 63080
63069: POP
// bc_type := b_barracks ; 30 :
63070: LD_ADDR_OWVAR 42
63074: PUSH
63075: LD_INT 5
63077: ST_TO_ADDR
63078: GO 63176
63080: LD_INT 30
63082: DOUBLE
63083: EQUAL
63084: IFTRUE 63088
63086: GO 63099
63088: POP
// bc_type := b_solar_power ; 31 :
63089: LD_ADDR_OWVAR 42
63093: PUSH
63094: LD_INT 27
63096: ST_TO_ADDR
63097: GO 63176
63099: LD_INT 31
63101: DOUBLE
63102: EQUAL
63103: IFTRUE 63107
63105: GO 63118
63107: POP
// bc_type := b_oil_power ; 32 :
63108: LD_ADDR_OWVAR 42
63112: PUSH
63113: LD_INT 26
63115: ST_TO_ADDR
63116: GO 63176
63118: LD_INT 32
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63126
63124: GO 63137
63126: POP
// bc_type := b_siberite_power ; 33 :
63127: LD_ADDR_OWVAR 42
63131: PUSH
63132: LD_INT 28
63134: ST_TO_ADDR
63135: GO 63176
63137: LD_INT 33
63139: DOUBLE
63140: EQUAL
63141: IFTRUE 63145
63143: GO 63156
63145: POP
// bc_type := b_oil_mine ; 34 :
63146: LD_ADDR_OWVAR 42
63150: PUSH
63151: LD_INT 29
63153: ST_TO_ADDR
63154: GO 63176
63156: LD_INT 34
63158: DOUBLE
63159: EQUAL
63160: IFTRUE 63164
63162: GO 63175
63164: POP
// bc_type := b_siberite_mine ; end ;
63165: LD_ADDR_OWVAR 42
63169: PUSH
63170: LD_INT 30
63172: ST_TO_ADDR
63173: GO 63176
63175: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63176: LD_ADDR_VAR 0 8
63180: PUSH
63181: LD_VAR 0 5
63185: PPUSH
63186: LD_VAR 0 6
63190: PPUSH
63191: LD_VAR 0 3
63195: PPUSH
63196: CALL_OW 47
63200: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63201: LD_OWVAR 42
63205: PUSH
63206: LD_INT 32
63208: PUSH
63209: LD_INT 33
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: IN
63216: IFFALSE 63232
// PlaceWeaponTurret ( b , weapon ) ;
63218: LD_VAR 0 8
63222: PPUSH
63223: LD_VAR 0 4
63227: PPUSH
63228: CALL_OW 431
// end ;
63232: LD_VAR 0 7
63236: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63237: LD_INT 0
63239: PPUSH
63240: PPUSH
63241: PPUSH
63242: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_INT 22
63250: PUSH
63251: LD_OWVAR 2
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: LD_INT 30
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 30
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PPUSH
63292: CALL_OW 69
63296: ST_TO_ADDR
// if not tmp then
63297: LD_VAR 0 4
63301: NOT
63302: IFFALSE 63306
// exit ;
63304: GO 63365
// for i in tmp do
63306: LD_ADDR_VAR 0 2
63310: PUSH
63311: LD_VAR 0 4
63315: PUSH
63316: FOR_IN
63317: IFFALSE 63363
// for j = 1 to 3 do
63319: LD_ADDR_VAR 0 3
63323: PUSH
63324: DOUBLE
63325: LD_INT 1
63327: DEC
63328: ST_TO_ADDR
63329: LD_INT 3
63331: PUSH
63332: FOR_TO
63333: IFFALSE 63359
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63335: LD_VAR 0 2
63339: PPUSH
63340: CALL_OW 274
63344: PPUSH
63345: LD_VAR 0 3
63349: PPUSH
63350: LD_INT 99999
63352: PPUSH
63353: CALL_OW 277
63357: GO 63332
63359: POP
63360: POP
63361: GO 63316
63363: POP
63364: POP
// end ;
63365: LD_VAR 0 1
63369: RET
// export function hHackSetLevel10 ; var i , j ; begin
63370: LD_INT 0
63372: PPUSH
63373: PPUSH
63374: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63375: LD_ADDR_VAR 0 2
63379: PUSH
63380: LD_INT 21
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PPUSH
63390: CALL_OW 69
63394: PUSH
63395: FOR_IN
63396: IFFALSE 63448
// if IsSelected ( i ) then
63398: LD_VAR 0 2
63402: PPUSH
63403: CALL_OW 306
63407: IFFALSE 63446
// begin for j := 1 to 4 do
63409: LD_ADDR_VAR 0 3
63413: PUSH
63414: DOUBLE
63415: LD_INT 1
63417: DEC
63418: ST_TO_ADDR
63419: LD_INT 4
63421: PUSH
63422: FOR_TO
63423: IFFALSE 63444
// SetSkill ( i , j , 10 ) ;
63425: LD_VAR 0 2
63429: PPUSH
63430: LD_VAR 0 3
63434: PPUSH
63435: LD_INT 10
63437: PPUSH
63438: CALL_OW 237
63442: GO 63422
63444: POP
63445: POP
// end ;
63446: GO 63395
63448: POP
63449: POP
// end ;
63450: LD_VAR 0 1
63454: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63455: LD_INT 0
63457: PPUSH
63458: PPUSH
63459: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63460: LD_ADDR_VAR 0 2
63464: PUSH
63465: LD_INT 22
63467: PUSH
63468: LD_OWVAR 2
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 21
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PPUSH
63491: CALL_OW 69
63495: PUSH
63496: FOR_IN
63497: IFFALSE 63538
// begin for j := 1 to 4 do
63499: LD_ADDR_VAR 0 3
63503: PUSH
63504: DOUBLE
63505: LD_INT 1
63507: DEC
63508: ST_TO_ADDR
63509: LD_INT 4
63511: PUSH
63512: FOR_TO
63513: IFFALSE 63534
// SetSkill ( i , j , 10 ) ;
63515: LD_VAR 0 2
63519: PPUSH
63520: LD_VAR 0 3
63524: PPUSH
63525: LD_INT 10
63527: PPUSH
63528: CALL_OW 237
63532: GO 63512
63534: POP
63535: POP
// end ;
63536: GO 63496
63538: POP
63539: POP
// end ;
63540: LD_VAR 0 1
63544: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63545: LD_INT 0
63547: PPUSH
// uc_side := your_side ;
63548: LD_ADDR_OWVAR 20
63552: PUSH
63553: LD_OWVAR 2
63557: ST_TO_ADDR
// uc_nation := nation ;
63558: LD_ADDR_OWVAR 21
63562: PUSH
63563: LD_VAR 0 1
63567: ST_TO_ADDR
// InitHc ;
63568: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63572: LD_INT 0
63574: PPUSH
63575: LD_VAR 0 2
63579: PPUSH
63580: LD_VAR 0 3
63584: PPUSH
63585: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63589: LD_VAR 0 4
63593: PPUSH
63594: LD_VAR 0 5
63598: PPUSH
63599: CALL_OW 428
63603: PUSH
63604: LD_INT 0
63606: EQUAL
63607: IFFALSE 63631
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63609: CALL_OW 44
63613: PPUSH
63614: LD_VAR 0 4
63618: PPUSH
63619: LD_VAR 0 5
63623: PPUSH
63624: LD_INT 1
63626: PPUSH
63627: CALL_OW 48
// end ;
63631: LD_VAR 0 6
63635: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63636: LD_INT 0
63638: PPUSH
63639: PPUSH
// uc_side := your_side ;
63640: LD_ADDR_OWVAR 20
63644: PUSH
63645: LD_OWVAR 2
63649: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63650: LD_VAR 0 1
63654: PUSH
63655: LD_INT 1
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: LD_INT 4
63666: PUSH
63667: LD_INT 5
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: IN
63677: IFFALSE 63689
// uc_nation := nation_american else
63679: LD_ADDR_OWVAR 21
63683: PUSH
63684: LD_INT 1
63686: ST_TO_ADDR
63687: GO 63732
// if chassis in [ 11 , 12 , 13 , 14 ] then
63689: LD_VAR 0 1
63693: PUSH
63694: LD_INT 11
63696: PUSH
63697: LD_INT 12
63699: PUSH
63700: LD_INT 13
63702: PUSH
63703: LD_INT 14
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: IN
63712: IFFALSE 63724
// uc_nation := nation_arabian else
63714: LD_ADDR_OWVAR 21
63718: PUSH
63719: LD_INT 2
63721: ST_TO_ADDR
63722: GO 63732
// uc_nation := nation_russian ;
63724: LD_ADDR_OWVAR 21
63728: PUSH
63729: LD_INT 3
63731: ST_TO_ADDR
// vc_chassis := chassis ;
63732: LD_ADDR_OWVAR 37
63736: PUSH
63737: LD_VAR 0 1
63741: ST_TO_ADDR
// vc_engine := engine ;
63742: LD_ADDR_OWVAR 39
63746: PUSH
63747: LD_VAR 0 2
63751: ST_TO_ADDR
// vc_control := control ;
63752: LD_ADDR_OWVAR 38
63756: PUSH
63757: LD_VAR 0 3
63761: ST_TO_ADDR
// vc_weapon := weapon ;
63762: LD_ADDR_OWVAR 40
63766: PUSH
63767: LD_VAR 0 4
63771: ST_TO_ADDR
// un := CreateVehicle ;
63772: LD_ADDR_VAR 0 8
63776: PUSH
63777: CALL_OW 45
63781: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63782: LD_VAR 0 8
63786: PPUSH
63787: LD_INT 0
63789: PPUSH
63790: LD_INT 5
63792: PPUSH
63793: CALL_OW 12
63797: PPUSH
63798: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63802: LD_VAR 0 8
63806: PPUSH
63807: LD_VAR 0 5
63811: PPUSH
63812: LD_VAR 0 6
63816: PPUSH
63817: LD_INT 1
63819: PPUSH
63820: CALL_OW 48
// end ;
63824: LD_VAR 0 7
63828: RET
// export hInvincible ; every 1 do
63829: GO 63831
63831: DISABLE
// hInvincible := [ ] ;
63832: LD_ADDR_EXP 70
63836: PUSH
63837: EMPTY
63838: ST_TO_ADDR
63839: END
// every 10 do var i ;
63840: GO 63842
63842: DISABLE
63843: LD_INT 0
63845: PPUSH
// begin enable ;
63846: ENABLE
// if not hInvincible then
63847: LD_EXP 70
63851: NOT
63852: IFFALSE 63856
// exit ;
63854: GO 63900
// for i in hInvincible do
63856: LD_ADDR_VAR 0 1
63860: PUSH
63861: LD_EXP 70
63865: PUSH
63866: FOR_IN
63867: IFFALSE 63898
// if GetLives ( i ) < 1000 then
63869: LD_VAR 0 1
63873: PPUSH
63874: CALL_OW 256
63878: PUSH
63879: LD_INT 1000
63881: LESS
63882: IFFALSE 63896
// SetLives ( i , 1000 ) ;
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_INT 1000
63891: PPUSH
63892: CALL_OW 234
63896: GO 63866
63898: POP
63899: POP
// end ;
63900: PPOPN 1
63902: END
// export function hHackInvincible ; var i ; begin
63903: LD_INT 0
63905: PPUSH
63906: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63907: LD_ADDR_VAR 0 2
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: LD_INT 21
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 21
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: PPUSH
63940: CALL_OW 69
63944: PUSH
63945: FOR_IN
63946: IFFALSE 64007
// if IsSelected ( i ) then
63948: LD_VAR 0 2
63952: PPUSH
63953: CALL_OW 306
63957: IFFALSE 64005
// begin if i in hInvincible then
63959: LD_VAR 0 2
63963: PUSH
63964: LD_EXP 70
63968: IN
63969: IFFALSE 63989
// hInvincible := hInvincible diff i else
63971: LD_ADDR_EXP 70
63975: PUSH
63976: LD_EXP 70
63980: PUSH
63981: LD_VAR 0 2
63985: DIFF
63986: ST_TO_ADDR
63987: GO 64005
// hInvincible := hInvincible union i ;
63989: LD_ADDR_EXP 70
63993: PUSH
63994: LD_EXP 70
63998: PUSH
63999: LD_VAR 0 2
64003: UNION
64004: ST_TO_ADDR
// end ;
64005: GO 63945
64007: POP
64008: POP
// end ;
64009: LD_VAR 0 1
64013: RET
// export function hHackInvisible ; var i , j ; begin
64014: LD_INT 0
64016: PPUSH
64017: PPUSH
64018: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64019: LD_ADDR_VAR 0 2
64023: PUSH
64024: LD_INT 21
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PPUSH
64034: CALL_OW 69
64038: PUSH
64039: FOR_IN
64040: IFFALSE 64064
// if IsSelected ( i ) then
64042: LD_VAR 0 2
64046: PPUSH
64047: CALL_OW 306
64051: IFFALSE 64062
// ComForceInvisible ( i ) ;
64053: LD_VAR 0 2
64057: PPUSH
64058: CALL_OW 496
64062: GO 64039
64064: POP
64065: POP
// end ;
64066: LD_VAR 0 1
64070: RET
// export function hHackChangeYourSide ; begin
64071: LD_INT 0
64073: PPUSH
// if your_side = 8 then
64074: LD_OWVAR 2
64078: PUSH
64079: LD_INT 8
64081: EQUAL
64082: IFFALSE 64094
// your_side := 0 else
64084: LD_ADDR_OWVAR 2
64088: PUSH
64089: LD_INT 0
64091: ST_TO_ADDR
64092: GO 64108
// your_side := your_side + 1 ;
64094: LD_ADDR_OWVAR 2
64098: PUSH
64099: LD_OWVAR 2
64103: PUSH
64104: LD_INT 1
64106: PLUS
64107: ST_TO_ADDR
// end ;
64108: LD_VAR 0 1
64112: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64113: LD_INT 0
64115: PPUSH
64116: PPUSH
64117: PPUSH
// for i in all_units do
64118: LD_ADDR_VAR 0 2
64122: PUSH
64123: LD_OWVAR 3
64127: PUSH
64128: FOR_IN
64129: IFFALSE 64207
// if IsSelected ( i ) then
64131: LD_VAR 0 2
64135: PPUSH
64136: CALL_OW 306
64140: IFFALSE 64205
// begin j := GetSide ( i ) ;
64142: LD_ADDR_VAR 0 3
64146: PUSH
64147: LD_VAR 0 2
64151: PPUSH
64152: CALL_OW 255
64156: ST_TO_ADDR
// if j = 8 then
64157: LD_VAR 0 3
64161: PUSH
64162: LD_INT 8
64164: EQUAL
64165: IFFALSE 64177
// j := 0 else
64167: LD_ADDR_VAR 0 3
64171: PUSH
64172: LD_INT 0
64174: ST_TO_ADDR
64175: GO 64191
// j := j + 1 ;
64177: LD_ADDR_VAR 0 3
64181: PUSH
64182: LD_VAR 0 3
64186: PUSH
64187: LD_INT 1
64189: PLUS
64190: ST_TO_ADDR
// SetSide ( i , j ) ;
64191: LD_VAR 0 2
64195: PPUSH
64196: LD_VAR 0 3
64200: PPUSH
64201: CALL_OW 235
// end ;
64205: GO 64128
64207: POP
64208: POP
// end ;
64209: LD_VAR 0 1
64213: RET
// export function hHackFog ; begin
64214: LD_INT 0
64216: PPUSH
// FogOff ( true ) ;
64217: LD_INT 1
64219: PPUSH
64220: CALL_OW 344
// end ;
64224: LD_VAR 0 1
64228: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64229: LD_INT 0
64231: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64232: LD_VAR 0 1
64236: PPUSH
64237: LD_VAR 0 2
64241: PPUSH
64242: LD_VAR 0 3
64246: PPUSH
64247: LD_INT 1
64249: PPUSH
64250: LD_INT 1
64252: PPUSH
64253: CALL_OW 483
// CenterOnXY ( x , y ) ;
64257: LD_VAR 0 2
64261: PPUSH
64262: LD_VAR 0 3
64266: PPUSH
64267: CALL_OW 84
// end ;
64271: LD_VAR 0 4
64275: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64276: LD_INT 0
64278: PPUSH
64279: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64280: LD_VAR 0 1
64284: NOT
64285: IFTRUE 64304
64287: PUSH
64288: LD_VAR 0 2
64292: PPUSH
64293: LD_VAR 0 3
64297: PPUSH
64298: CALL_OW 488
64302: NOT
64303: OR
64304: IFTRUE 64339
64306: PUSH
64307: LD_VAR 0 1
64311: PPUSH
64312: CALL_OW 266
64316: PUSH
64317: LD_INT 3
64319: NONEQUAL
64320: IFFALSE 64338
64322: PUSH
64323: LD_VAR 0 1
64327: PPUSH
64328: CALL_OW 247
64332: PUSH
64333: LD_INT 1
64335: EQUAL
64336: NOT
64337: AND
64338: OR
64339: IFFALSE 64343
// exit ;
64341: GO 64625
// if GetType ( factory ) = unit_human then
64343: LD_VAR 0 1
64347: PPUSH
64348: CALL_OW 247
64352: PUSH
64353: LD_INT 1
64355: EQUAL
64356: IFFALSE 64373
// factory := IsInUnit ( factory ) ;
64358: LD_ADDR_VAR 0 1
64362: PUSH
64363: LD_VAR 0 1
64367: PPUSH
64368: CALL_OW 310
64372: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64373: LD_VAR 0 1
64377: PPUSH
64378: CALL_OW 266
64382: PUSH
64383: LD_INT 3
64385: NONEQUAL
64386: IFFALSE 64390
// exit ;
64388: GO 64625
// for i := 1 to Count ( factoryWaypoints ) do
64390: LD_ADDR_VAR 0 5
64394: PUSH
64395: DOUBLE
64396: LD_INT 1
64398: DEC
64399: ST_TO_ADDR
64400: LD_EXP 71
64404: PPUSH
64405: CALL 2718 0 1
64409: PUSH
64410: FOR_TO
64411: IFFALSE 64573
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64413: LD_VAR 0 2
64417: PPUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: CALL_OW 428
64427: PUSH
64428: LD_EXP 71
64432: PUSH
64433: LD_VAR 0 5
64437: ARRAY
64438: PUSH
64439: LD_INT 2
64441: ARRAY
64442: EQUAL
64443: IFFALSE 64475
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64445: LD_ADDR_EXP 71
64449: PUSH
64450: LD_EXP 71
64454: PPUSH
64455: LD_VAR 0 5
64459: PPUSH
64460: CALL_OW 3
64464: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64465: CALL 64630 0 0
// exit ;
64469: POP
64470: POP
64471: GO 64625
// end else
64473: GO 64571
// if factory = factoryWaypoints [ i ] [ 2 ] then
64475: LD_VAR 0 1
64479: PUSH
64480: LD_EXP 71
64484: PUSH
64485: LD_VAR 0 5
64489: ARRAY
64490: PUSH
64491: LD_INT 2
64493: ARRAY
64494: EQUAL
64495: IFFALSE 64571
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64497: LD_ADDR_EXP 71
64501: PUSH
64502: LD_EXP 71
64506: PPUSH
64507: LD_VAR 0 5
64511: PPUSH
64512: CALL_OW 3
64516: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64517: LD_ADDR_EXP 71
64521: PUSH
64522: LD_EXP 71
64526: PPUSH
64527: LD_VAR 0 1
64531: PPUSH
64532: CALL_OW 255
64536: PUSH
64537: LD_VAR 0 1
64541: PUSH
64542: LD_VAR 0 2
64546: PUSH
64547: LD_VAR 0 3
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: PPUSH
64558: CALL 38650 0 2
64562: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64563: CALL 64630 0 0
// exit ;
64567: POP
64568: POP
64569: GO 64625
// end ; end ;
64571: GO 64410
64573: POP
64574: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64575: LD_ADDR_EXP 71
64579: PUSH
64580: LD_EXP 71
64584: PPUSH
64585: LD_VAR 0 1
64589: PPUSH
64590: CALL_OW 255
64594: PUSH
64595: LD_VAR 0 1
64599: PUSH
64600: LD_VAR 0 2
64604: PUSH
64605: LD_VAR 0 3
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: PPUSH
64616: CALL 38650 0 2
64620: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64621: CALL 64630 0 0
// end ;
64625: LD_VAR 0 4
64629: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64630: LD_INT 0
64632: PPUSH
64633: PPUSH
64634: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64635: LD_STRING resetFactoryWaypoint();
64637: PPUSH
64638: CALL_OW 559
// if factoryWaypoints then
64642: LD_EXP 71
64646: IFFALSE 64767
// begin list := factoryWaypoints ;
64648: LD_ADDR_VAR 0 3
64652: PUSH
64653: LD_EXP 71
64657: ST_TO_ADDR
// for i := 1 to list do
64658: LD_ADDR_VAR 0 2
64662: PUSH
64663: DOUBLE
64664: LD_INT 1
64666: DEC
64667: ST_TO_ADDR
64668: LD_VAR 0 3
64672: PUSH
64673: FOR_TO
64674: IFFALSE 64765
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64676: LD_STRING setFactoryWaypointXY(
64678: PUSH
64679: LD_VAR 0 3
64683: PUSH
64684: LD_VAR 0 2
64688: ARRAY
64689: PUSH
64690: LD_INT 1
64692: ARRAY
64693: STR
64694: PUSH
64695: LD_STRING ,
64697: STR
64698: PUSH
64699: LD_VAR 0 3
64703: PUSH
64704: LD_VAR 0 2
64708: ARRAY
64709: PUSH
64710: LD_INT 2
64712: ARRAY
64713: STR
64714: PUSH
64715: LD_STRING ,
64717: STR
64718: PUSH
64719: LD_VAR 0 3
64723: PUSH
64724: LD_VAR 0 2
64728: ARRAY
64729: PUSH
64730: LD_INT 3
64732: ARRAY
64733: STR
64734: PUSH
64735: LD_STRING ,
64737: STR
64738: PUSH
64739: LD_VAR 0 3
64743: PUSH
64744: LD_VAR 0 2
64748: ARRAY
64749: PUSH
64750: LD_INT 4
64752: ARRAY
64753: STR
64754: PUSH
64755: LD_STRING )
64757: STR
64758: PPUSH
64759: CALL_OW 559
64763: GO 64673
64765: POP
64766: POP
// end ; end ;
64767: LD_VAR 0 1
64771: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64772: LD_INT 0
64774: PPUSH
// if HexInfo ( x , y ) = warehouse then
64775: LD_VAR 0 2
64779: PPUSH
64780: LD_VAR 0 3
64784: PPUSH
64785: CALL_OW 428
64789: PUSH
64790: LD_VAR 0 1
64794: EQUAL
64795: IFFALSE 64822
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64797: LD_ADDR_EXP 73
64801: PUSH
64802: LD_EXP 73
64806: PPUSH
64807: LD_VAR 0 1
64811: PPUSH
64812: LD_INT 0
64814: PPUSH
64815: CALL_OW 1
64819: ST_TO_ADDR
64820: GO 64873
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64822: LD_ADDR_EXP 73
64826: PUSH
64827: LD_EXP 73
64831: PPUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: LD_VAR 0 1
64841: PPUSH
64842: CALL_OW 255
64846: PUSH
64847: LD_VAR 0 1
64851: PUSH
64852: LD_VAR 0 2
64856: PUSH
64857: LD_VAR 0 3
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: PPUSH
64868: CALL_OW 1
64872: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64873: CALL 64882 0 0
// end ;
64877: LD_VAR 0 4
64881: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64882: LD_INT 0
64884: PPUSH
64885: PPUSH
64886: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64887: LD_STRING resetWarehouseGatheringPoints();
64889: PPUSH
64890: CALL_OW 559
// if warehouseGatheringPoints then
64894: LD_EXP 73
64898: IFFALSE 65024
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64900: LD_ADDR_VAR 0 3
64904: PUSH
64905: LD_EXP 73
64909: PPUSH
64910: CALL 42584 0 1
64914: ST_TO_ADDR
// for i := 1 to list do
64915: LD_ADDR_VAR 0 2
64919: PUSH
64920: DOUBLE
64921: LD_INT 1
64923: DEC
64924: ST_TO_ADDR
64925: LD_VAR 0 3
64929: PUSH
64930: FOR_TO
64931: IFFALSE 65022
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64933: LD_STRING setWarehouseGatheringPointXY(
64935: PUSH
64936: LD_VAR 0 3
64940: PUSH
64941: LD_VAR 0 2
64945: ARRAY
64946: PUSH
64947: LD_INT 1
64949: ARRAY
64950: STR
64951: PUSH
64952: LD_STRING ,
64954: STR
64955: PUSH
64956: LD_VAR 0 3
64960: PUSH
64961: LD_VAR 0 2
64965: ARRAY
64966: PUSH
64967: LD_INT 2
64969: ARRAY
64970: STR
64971: PUSH
64972: LD_STRING ,
64974: STR
64975: PUSH
64976: LD_VAR 0 3
64980: PUSH
64981: LD_VAR 0 2
64985: ARRAY
64986: PUSH
64987: LD_INT 3
64989: ARRAY
64990: STR
64991: PUSH
64992: LD_STRING ,
64994: STR
64995: PUSH
64996: LD_VAR 0 3
65000: PUSH
65001: LD_VAR 0 2
65005: ARRAY
65006: PUSH
65007: LD_INT 4
65009: ARRAY
65010: STR
65011: PUSH
65012: LD_STRING )
65014: STR
65015: PPUSH
65016: CALL_OW 559
65020: GO 64930
65022: POP
65023: POP
// end ; end ;
65024: LD_VAR 0 1
65028: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65029: LD_EXP 73
65033: IFFALSE 65728
65035: GO 65037
65037: DISABLE
65038: LD_INT 0
65040: PPUSH
65041: PPUSH
65042: PPUSH
65043: PPUSH
65044: PPUSH
65045: PPUSH
65046: PPUSH
65047: PPUSH
65048: PPUSH
// begin enable ;
65049: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65050: LD_ADDR_VAR 0 3
65054: PUSH
65055: LD_EXP 73
65059: PPUSH
65060: CALL 42584 0 1
65064: ST_TO_ADDR
// if not list then
65065: LD_VAR 0 3
65069: NOT
65070: IFFALSE 65074
// exit ;
65072: GO 65728
// for i := 1 to list do
65074: LD_ADDR_VAR 0 1
65078: PUSH
65079: DOUBLE
65080: LD_INT 1
65082: DEC
65083: ST_TO_ADDR
65084: LD_VAR 0 3
65088: PUSH
65089: FOR_TO
65090: IFFALSE 65726
// begin depot := list [ i ] [ 2 ] ;
65092: LD_ADDR_VAR 0 8
65096: PUSH
65097: LD_VAR 0 3
65101: PUSH
65102: LD_VAR 0 1
65106: ARRAY
65107: PUSH
65108: LD_INT 2
65110: ARRAY
65111: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65112: LD_ADDR_VAR 0 5
65116: PUSH
65117: LD_VAR 0 3
65121: PUSH
65122: LD_VAR 0 1
65126: ARRAY
65127: PUSH
65128: LD_INT 1
65130: ARRAY
65131: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65132: LD_VAR 0 8
65136: PPUSH
65137: CALL_OW 301
65141: IFTRUE 65160
65143: PUSH
65144: LD_VAR 0 5
65148: PUSH
65149: LD_VAR 0 8
65153: PPUSH
65154: CALL_OW 255
65158: NONEQUAL
65159: OR
65160: IFFALSE 65189
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65162: LD_ADDR_EXP 73
65166: PUSH
65167: LD_EXP 73
65171: PPUSH
65172: LD_VAR 0 8
65176: PPUSH
65177: LD_INT 0
65179: PPUSH
65180: CALL_OW 1
65184: ST_TO_ADDR
// exit ;
65185: POP
65186: POP
65187: GO 65728
// end ; x := list [ i ] [ 3 ] ;
65189: LD_ADDR_VAR 0 6
65193: PUSH
65194: LD_VAR 0 3
65198: PUSH
65199: LD_VAR 0 1
65203: ARRAY
65204: PUSH
65205: LD_INT 3
65207: ARRAY
65208: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65209: LD_ADDR_VAR 0 7
65213: PUSH
65214: LD_VAR 0 3
65218: PUSH
65219: LD_VAR 0 1
65223: ARRAY
65224: PUSH
65225: LD_INT 4
65227: ARRAY
65228: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65229: LD_ADDR_VAR 0 9
65233: PUSH
65234: LD_VAR 0 6
65238: PPUSH
65239: LD_VAR 0 7
65243: PPUSH
65244: LD_INT 16
65246: PPUSH
65247: CALL 41158 0 3
65251: ST_TO_ADDR
// if not cratesNearbyPoint then
65252: LD_VAR 0 9
65256: NOT
65257: IFFALSE 65263
// exit ;
65259: POP
65260: POP
65261: GO 65728
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65263: LD_ADDR_VAR 0 4
65267: PUSH
65268: LD_INT 22
65270: PUSH
65271: LD_VAR 0 5
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: PUSH
65283: LD_INT 60
65285: PUSH
65286: EMPTY
65287: LIST
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 91
65295: PUSH
65296: LD_VAR 0 8
65300: PUSH
65301: LD_INT 6
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: LD_INT 25
65314: PUSH
65315: LD_INT 2
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 25
65324: PUSH
65325: LD_INT 16
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: PPUSH
65343: CALL_OW 69
65347: PUSH
65348: LD_VAR 0 8
65352: PPUSH
65353: CALL_OW 313
65357: PPUSH
65358: LD_INT 3
65360: PUSH
65361: LD_INT 60
65363: PUSH
65364: EMPTY
65365: LIST
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 2
65373: PUSH
65374: LD_INT 25
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 25
65386: PUSH
65387: LD_INT 16
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PPUSH
65403: CALL_OW 72
65407: UNION
65408: ST_TO_ADDR
// if tmp then
65409: LD_VAR 0 4
65413: IFFALSE 65493
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65415: LD_ADDR_VAR 0 4
65419: PUSH
65420: LD_VAR 0 4
65424: PPUSH
65425: LD_INT 3
65427: PPUSH
65428: CALL 38965 0 2
65432: ST_TO_ADDR
// for j in tmp do
65433: LD_ADDR_VAR 0 2
65437: PUSH
65438: LD_VAR 0 4
65442: PUSH
65443: FOR_IN
65444: IFFALSE 65487
// begin if IsInUnit ( j ) then
65446: LD_VAR 0 2
65450: PPUSH
65451: CALL_OW 310
65455: IFFALSE 65466
// ComExit ( j ) ;
65457: LD_VAR 0 2
65461: PPUSH
65462: CALL 39048 0 1
// AddComCollect ( j , x , y ) ;
65466: LD_VAR 0 2
65470: PPUSH
65471: LD_VAR 0 6
65475: PPUSH
65476: LD_VAR 0 7
65480: PPUSH
65481: CALL_OW 177
// end ;
65485: GO 65443
65487: POP
65488: POP
// exit ;
65489: POP
65490: POP
65491: GO 65728
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65493: LD_ADDR_VAR 0 4
65497: PUSH
65498: LD_INT 22
65500: PUSH
65501: LD_VAR 0 5
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 91
65512: PUSH
65513: LD_VAR 0 8
65517: PUSH
65518: LD_INT 8
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 2
65528: PUSH
65529: LD_INT 34
65531: PUSH
65532: LD_INT 12
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 34
65541: PUSH
65542: LD_INT 51
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 34
65551: PUSH
65552: LD_INT 32
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 34
65561: PUSH
65562: LD_INT 89
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PPUSH
65581: CALL_OW 69
65585: ST_TO_ADDR
// if tmp then
65586: LD_VAR 0 4
65590: IFFALSE 65724
// begin for j in tmp do
65592: LD_ADDR_VAR 0 2
65596: PUSH
65597: LD_VAR 0 4
65601: PUSH
65602: FOR_IN
65603: IFFALSE 65722
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65605: LD_VAR 0 2
65609: PPUSH
65610: CALL_OW 262
65614: PUSH
65615: LD_INT 3
65617: EQUAL
65618: IFTRUE 65635
65620: PUSH
65621: LD_VAR 0 2
65625: PPUSH
65626: CALL_OW 261
65630: PUSH
65631: LD_INT 20
65633: GREATER
65634: OR
65635: IFFALSE 65649
65637: PUSH
65638: LD_VAR 0 2
65642: PPUSH
65643: CALL_OW 314
65647: NOT
65648: AND
65649: IFFALSE 65679
65651: PUSH
65652: LD_VAR 0 2
65656: PPUSH
65657: CALL_OW 263
65661: PUSH
65662: LD_INT 1
65664: NONEQUAL
65665: IFTRUE 65678
65667: PUSH
65668: LD_VAR 0 2
65672: PPUSH
65673: CALL_OW 311
65677: OR
65678: AND
65679: IFFALSE 65720
// begin ComCollect ( j , x , y ) ;
65681: LD_VAR 0 2
65685: PPUSH
65686: LD_VAR 0 6
65690: PPUSH
65691: LD_VAR 0 7
65695: PPUSH
65696: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65700: LD_VAR 0 2
65704: PPUSH
65705: LD_VAR 0 8
65709: PPUSH
65710: CALL_OW 172
// exit ;
65714: POP
65715: POP
65716: POP
65717: POP
65718: GO 65728
// end ;
65720: GO 65602
65722: POP
65723: POP
// end ; end ;
65724: GO 65089
65726: POP
65727: POP
// end ;
65728: PPOPN 9
65730: END
