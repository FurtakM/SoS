// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: PUSH
 239: LD_VAR 0 2
 243: NOT
 244: OR
 245: IFFALSE 249
// exit ;
 247: GO 358
// result := 0 ;
 249: LD_ADDR_VAR 0 3
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// for i in tmp do
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_IN
 268: IFFALSE 356
// for j := 1 to 2 do
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 2
 282: PUSH
 283: FOR_TO
 284: IFFALSE 352
// if GetLabKind ( i , j ) in kinds then
 286: LD_VAR 0 4
 290: PPUSH
 291: LD_VAR 0 5
 295: PPUSH
 296: CALL_OW 268
 300: PUSH
 301: LD_VAR 0 2
 305: IN
 306: IFFALSE 350
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 308: LD_ADDR_VAR 0 2
 312: PUSH
 313: LD_VAR 0 2
 317: PUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: LD_VAR 0 5
 327: PPUSH
 328: CALL_OW 268
 332: DIFF
 333: ST_TO_ADDR
// result := result + 1 ;
 334: LD_ADDR_VAR 0 3
 338: PUSH
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: ST_TO_ADDR
// continue ;
 348: GO 283
// end ;
 350: GO 283
 352: POP
 353: POP
 354: GO 267
 356: POP
 357: POP
// end ;
 358: LD_VAR 0 3
 362: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 363: LD_ADDR_OWVAR 47
 367: PUSH
 368: LD_VAR 0 11
 372: ST_TO_ADDR
// end ;
 373: PPOPN 11
 375: END
// export Omar ; every 0 0$1 do
 376: GO 378
 378: DISABLE
// begin uc_side := 1 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// uc_nation := 2 ;
 387: LD_ADDR_OWVAR 21
 391: PUSH
 392: LD_INT 2
 394: ST_TO_ADDR
// hc_class := class_desert_warior ;
 395: LD_ADDR_OWVAR 28
 399: PUSH
 400: LD_INT 11
 402: ST_TO_ADDR
// hc_sex := sex_male ;
 403: LD_ADDR_OWVAR 27
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// hc_name := Omar ;
 411: LD_ADDR_OWVAR 26
 415: PUSH
 416: LD_STRING Omar
 418: ST_TO_ADDR
// Omar := CreateHuman ;
 419: LD_ADDR_EXP 1
 423: PUSH
 424: CALL_OW 44
 428: ST_TO_ADDR
// SetTag ( Omar , 500 ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_INT 500
 436: PPUSH
 437: CALL_OW 109
// PlaceUnitXY ( Omar , 27 , 27 , false ) ;
 441: LD_EXP 1
 445: PPUSH
 446: LD_INT 27
 448: PPUSH
 449: LD_INT 27
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// end ;
 459: END
// every 0 0$1 do var i ;
 460: GO 462
 462: DISABLE
 463: LD_INT 0
 465: PPUSH
// begin for i := 1 to 3 do
 466: LD_ADDR_VAR 0 1
 470: PUSH
 471: DOUBLE
 472: LD_INT 1
 474: DEC
 475: ST_TO_ADDR
 476: LD_INT 3
 478: PUSH
 479: FOR_TO
 480: IFFALSE 511
// AddComAttackPlace ( ar1 , 59 + ( ( i - 1 ) * 2 ) , 74 ) ;
 482: LD_INT 67
 484: PPUSH
 485: LD_INT 59
 487: PUSH
 488: LD_VAR 0 1
 492: PUSH
 493: LD_INT 1
 495: MINUS
 496: PUSH
 497: LD_INT 2
 499: MUL
 500: PLUS
 501: PPUSH
 502: LD_INT 74
 504: PPUSH
 505: CALL_OW 176
 509: GO 479
 511: POP
 512: POP
// end ; end_of_file
 513: PPOPN 1
 515: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 516: LD_INT 0
 518: PPUSH
 519: PPUSH
// if exist_mode then
 520: LD_VAR 0 2
 524: IFFALSE 570
// begin unit := CreateCharacter ( prefix & ident ) ;
 526: LD_ADDR_VAR 0 5
 530: PUSH
 531: LD_VAR 0 3
 535: PUSH
 536: LD_VAR 0 1
 540: STR
 541: PPUSH
 542: CALL_OW 34
 546: ST_TO_ADDR
// if unit then
 547: LD_VAR 0 5
 551: IFFALSE 568
// DeleteCharacters ( prefix & ident ) ;
 553: LD_VAR 0 3
 557: PUSH
 558: LD_VAR 0 1
 562: STR
 563: PPUSH
 564: CALL_OW 40
// end else
 568: GO 585
// unit := NewCharacter ( ident ) ;
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 25
 584: ST_TO_ADDR
// result := unit ;
 585: LD_ADDR_VAR 0 4
 589: PUSH
 590: LD_VAR 0 5
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 4
 599: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
// if not side or not nation then
 604: LD_VAR 0 1
 608: NOT
 609: PUSH
 610: LD_VAR 0 2
 614: NOT
 615: OR
 616: IFFALSE 620
// exit ;
 618: GO 1388
// case nation of nation_american :
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 1
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 847
 633: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 634: LD_ADDR_VAR 0 4
 638: PUSH
 639: LD_INT 35
 641: PUSH
 642: LD_INT 45
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 82
 653: PUSH
 654: LD_INT 83
 656: PUSH
 657: LD_INT 84
 659: PUSH
 660: LD_INT 85
 662: PUSH
 663: LD_INT 86
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: LD_INT 2
 671: PUSH
 672: LD_INT 6
 674: PUSH
 675: LD_INT 15
 677: PUSH
 678: LD_INT 16
 680: PUSH
 681: LD_INT 7
 683: PUSH
 684: LD_INT 12
 686: PUSH
 687: LD_INT 13
 689: PUSH
 690: LD_INT 10
 692: PUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 20
 698: PUSH
 699: LD_INT 21
 701: PUSH
 702: LD_INT 22
 704: PUSH
 705: LD_INT 25
 707: PUSH
 708: LD_INT 32
 710: PUSH
 711: LD_INT 27
 713: PUSH
 714: LD_INT 36
 716: PUSH
 717: LD_INT 69
 719: PUSH
 720: LD_INT 39
 722: PUSH
 723: LD_INT 34
 725: PUSH
 726: LD_INT 40
 728: PUSH
 729: LD_INT 48
 731: PUSH
 732: LD_INT 49
 734: PUSH
 735: LD_INT 50
 737: PUSH
 738: LD_INT 51
 740: PUSH
 741: LD_INT 52
 743: PUSH
 744: LD_INT 53
 746: PUSH
 747: LD_INT 54
 749: PUSH
 750: LD_INT 55
 752: PUSH
 753: LD_INT 56
 755: PUSH
 756: LD_INT 57
 758: PUSH
 759: LD_INT 58
 761: PUSH
 762: LD_INT 59
 764: PUSH
 765: LD_INT 60
 767: PUSH
 768: LD_INT 61
 770: PUSH
 771: LD_INT 62
 773: PUSH
 774: LD_INT 80
 776: PUSH
 777: LD_INT 82
 779: PUSH
 780: LD_INT 83
 782: PUSH
 783: LD_INT 84
 785: PUSH
 786: LD_INT 85
 788: PUSH
 789: LD_INT 86
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: ST_TO_ADDR
 845: GO 1312
 847: LD_INT 2
 849: DOUBLE
 850: EQUAL
 851: IFTRUE 855
 853: GO 1081
 855: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 856: LD_ADDR_VAR 0 4
 860: PUSH
 861: LD_INT 35
 863: PUSH
 864: LD_INT 45
 866: PUSH
 867: LD_INT 46
 869: PUSH
 870: LD_INT 47
 872: PUSH
 873: LD_INT 82
 875: PUSH
 876: LD_INT 83
 878: PUSH
 879: LD_INT 84
 881: PUSH
 882: LD_INT 85
 884: PUSH
 885: LD_INT 87
 887: PUSH
 888: LD_INT 70
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: LD_INT 11
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: LD_INT 4
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 6
 908: PUSH
 909: LD_INT 15
 911: PUSH
 912: LD_INT 18
 914: PUSH
 915: LD_INT 7
 917: PUSH
 918: LD_INT 17
 920: PUSH
 921: LD_INT 8
 923: PUSH
 924: LD_INT 20
 926: PUSH
 927: LD_INT 21
 929: PUSH
 930: LD_INT 22
 932: PUSH
 933: LD_INT 72
 935: PUSH
 936: LD_INT 26
 938: PUSH
 939: LD_INT 69
 941: PUSH
 942: LD_INT 39
 944: PUSH
 945: LD_INT 40
 947: PUSH
 948: LD_INT 41
 950: PUSH
 951: LD_INT 42
 953: PUSH
 954: LD_INT 43
 956: PUSH
 957: LD_INT 48
 959: PUSH
 960: LD_INT 49
 962: PUSH
 963: LD_INT 50
 965: PUSH
 966: LD_INT 51
 968: PUSH
 969: LD_INT 52
 971: PUSH
 972: LD_INT 53
 974: PUSH
 975: LD_INT 54
 977: PUSH
 978: LD_INT 55
 980: PUSH
 981: LD_INT 56
 983: PUSH
 984: LD_INT 60
 986: PUSH
 987: LD_INT 61
 989: PUSH
 990: LD_INT 62
 992: PUSH
 993: LD_INT 66
 995: PUSH
 996: LD_INT 67
 998: PUSH
 999: LD_INT 68
1001: PUSH
1002: LD_INT 81
1004: PUSH
1005: LD_INT 82
1007: PUSH
1008: LD_INT 83
1010: PUSH
1011: LD_INT 84
1013: PUSH
1014: LD_INT 85
1016: PUSH
1017: LD_INT 87
1019: PUSH
1020: LD_INT 88
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: ST_TO_ADDR
1079: GO 1312
1081: LD_INT 3
1083: DOUBLE
1084: EQUAL
1085: IFTRUE 1089
1087: GO 1311
1089: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: LD_INT 46
1097: PUSH
1098: LD_INT 47
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 2
1106: PUSH
1107: LD_INT 82
1109: PUSH
1110: LD_INT 83
1112: PUSH
1113: LD_INT 84
1115: PUSH
1116: LD_INT 85
1118: PUSH
1119: LD_INT 86
1121: PUSH
1122: LD_INT 11
1124: PUSH
1125: LD_INT 9
1127: PUSH
1128: LD_INT 20
1130: PUSH
1131: LD_INT 19
1133: PUSH
1134: LD_INT 21
1136: PUSH
1137: LD_INT 24
1139: PUSH
1140: LD_INT 22
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 28
1148: PUSH
1149: LD_INT 29
1151: PUSH
1152: LD_INT 30
1154: PUSH
1155: LD_INT 31
1157: PUSH
1158: LD_INT 37
1160: PUSH
1161: LD_INT 38
1163: PUSH
1164: LD_INT 32
1166: PUSH
1167: LD_INT 27
1169: PUSH
1170: LD_INT 33
1172: PUSH
1173: LD_INT 69
1175: PUSH
1176: LD_INT 39
1178: PUSH
1179: LD_INT 34
1181: PUSH
1182: LD_INT 40
1184: PUSH
1185: LD_INT 71
1187: PUSH
1188: LD_INT 23
1190: PUSH
1191: LD_INT 44
1193: PUSH
1194: LD_INT 48
1196: PUSH
1197: LD_INT 49
1199: PUSH
1200: LD_INT 50
1202: PUSH
1203: LD_INT 51
1205: PUSH
1206: LD_INT 52
1208: PUSH
1209: LD_INT 53
1211: PUSH
1212: LD_INT 54
1214: PUSH
1215: LD_INT 55
1217: PUSH
1218: LD_INT 56
1220: PUSH
1221: LD_INT 57
1223: PUSH
1224: LD_INT 58
1226: PUSH
1227: LD_INT 59
1229: PUSH
1230: LD_INT 63
1232: PUSH
1233: LD_INT 64
1235: PUSH
1236: LD_INT 65
1238: PUSH
1239: LD_INT 82
1241: PUSH
1242: LD_INT 83
1244: PUSH
1245: LD_INT 84
1247: PUSH
1248: LD_INT 85
1250: PUSH
1251: LD_INT 86
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
1309: GO 1312
1311: POP
// if state > - 1 and state < 3 then
1312: LD_VAR 0 3
1316: PUSH
1317: LD_INT 1
1319: NEG
1320: GREATER
1321: PUSH
1322: LD_VAR 0 3
1326: PUSH
1327: LD_INT 3
1329: LESS
1330: AND
1331: IFFALSE 1388
// for i in result do
1333: LD_ADDR_VAR 0 5
1337: PUSH
1338: LD_VAR 0 4
1342: PUSH
1343: FOR_IN
1344: IFFALSE 1386
// if GetTech ( i , side ) <> state then
1346: LD_VAR 0 5
1350: PPUSH
1351: LD_VAR 0 1
1355: PPUSH
1356: CALL_OW 321
1360: PUSH
1361: LD_VAR 0 3
1365: NONEQUAL
1366: IFFALSE 1384
// result := result diff i ;
1368: LD_ADDR_VAR 0 4
1372: PUSH
1373: LD_VAR 0 4
1377: PUSH
1378: LD_VAR 0 5
1382: DIFF
1383: ST_TO_ADDR
1384: GO 1343
1386: POP
1387: POP
// end ;
1388: LD_VAR 0 4
1392: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// result := true ;
1398: LD_ADDR_VAR 0 3
1402: PUSH
1403: LD_INT 1
1405: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1406: LD_ADDR_VAR 0 5
1410: PUSH
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 480
1420: ST_TO_ADDR
// if not tmp then
1421: LD_VAR 0 5
1425: NOT
1426: IFFALSE 1430
// exit ;
1428: GO 1479
// for i in tmp do
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1477
// if GetTech ( i , side ) <> state_researched then
1443: LD_VAR 0 4
1447: PPUSH
1448: LD_VAR 0 1
1452: PPUSH
1453: CALL_OW 321
1457: PUSH
1458: LD_INT 2
1460: NONEQUAL
1461: IFFALSE 1475
// begin result := false ;
1463: LD_ADDR_VAR 0 3
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// exit ;
1471: POP
1472: POP
1473: GO 1479
// end ;
1475: GO 1440
1477: POP
1478: POP
// end ;
1479: LD_VAR 0 3
1483: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1484: LD_INT 0
1486: PPUSH
1487: PPUSH
1488: PPUSH
1489: PPUSH
1490: PPUSH
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
1498: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1499: LD_VAR 0 1
1503: NOT
1504: PUSH
1505: LD_VAR 0 1
1509: PPUSH
1510: CALL_OW 257
1514: PUSH
1515: LD_INT 9
1517: NONEQUAL
1518: OR
1519: IFFALSE 1523
// exit ;
1521: GO 2096
// side := GetSide ( unit ) ;
1523: LD_ADDR_VAR 0 9
1527: PUSH
1528: LD_VAR 0 1
1532: PPUSH
1533: CALL_OW 255
1537: ST_TO_ADDR
// tech_space := tech_spacanom ;
1538: LD_ADDR_VAR 0 12
1542: PUSH
1543: LD_INT 29
1545: ST_TO_ADDR
// tech_time := tech_taurad ;
1546: LD_ADDR_VAR 0 13
1550: PUSH
1551: LD_INT 28
1553: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1554: LD_ADDR_VAR 0 11
1558: PUSH
1559: LD_VAR 0 1
1563: PPUSH
1564: CALL_OW 310
1568: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1569: LD_VAR 0 11
1573: PPUSH
1574: CALL_OW 247
1578: PUSH
1579: LD_INT 2
1581: EQUAL
1582: IFFALSE 1586
// exit ;
1584: GO 2096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1586: LD_ADDR_VAR 0 8
1590: PUSH
1591: LD_INT 81
1593: PUSH
1594: LD_VAR 0 9
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 3
1605: PUSH
1606: LD_INT 21
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 69
1628: ST_TO_ADDR
// if not tmp then
1629: LD_VAR 0 8
1633: NOT
1634: IFFALSE 1638
// exit ;
1636: GO 2096
// if in_unit then
1638: LD_VAR 0 11
1642: IFFALSE 1666
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1644: LD_ADDR_VAR 0 10
1648: PUSH
1649: LD_VAR 0 8
1653: PPUSH
1654: LD_VAR 0 11
1658: PPUSH
1659: CALL_OW 74
1663: ST_TO_ADDR
1664: GO 1686
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1666: LD_ADDR_VAR 0 10
1670: PUSH
1671: LD_VAR 0 8
1675: PPUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: CALL_OW 74
1685: ST_TO_ADDR
// if not enemy then
1686: LD_VAR 0 10
1690: NOT
1691: IFFALSE 1695
// exit ;
1693: GO 2096
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1695: LD_VAR 0 11
1699: PUSH
1700: LD_VAR 0 11
1704: PPUSH
1705: LD_VAR 0 10
1709: PPUSH
1710: CALL_OW 296
1714: PUSH
1715: LD_INT 13
1717: GREATER
1718: AND
1719: PUSH
1720: LD_VAR 0 1
1724: PPUSH
1725: LD_VAR 0 10
1729: PPUSH
1730: CALL_OW 296
1734: PUSH
1735: LD_INT 12
1737: GREATER
1738: OR
1739: IFFALSE 1743
// exit ;
1741: GO 2096
// missile := [ 1 ] ;
1743: LD_ADDR_VAR 0 14
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: EMPTY
1752: LIST
1753: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1754: LD_VAR 0 9
1758: PPUSH
1759: LD_VAR 0 12
1763: PPUSH
1764: CALL_OW 325
1768: IFFALSE 1797
// missile := Replace ( missile , missile + 1 , 2 ) ;
1770: LD_ADDR_VAR 0 14
1774: PUSH
1775: LD_VAR 0 14
1779: PPUSH
1780: LD_VAR 0 14
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: PPUSH
1789: LD_INT 2
1791: PPUSH
1792: CALL_OW 1
1796: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1797: LD_VAR 0 9
1801: PPUSH
1802: LD_VAR 0 13
1806: PPUSH
1807: CALL_OW 325
1811: PUSH
1812: LD_VAR 0 10
1816: PPUSH
1817: CALL_OW 255
1821: PPUSH
1822: LD_VAR 0 13
1826: PPUSH
1827: CALL_OW 325
1831: NOT
1832: AND
1833: IFFALSE 1862
// missile := Replace ( missile , missile + 1 , 3 ) ;
1835: LD_ADDR_VAR 0 14
1839: PUSH
1840: LD_VAR 0 14
1844: PPUSH
1845: LD_VAR 0 14
1849: PUSH
1850: LD_INT 1
1852: PLUS
1853: PPUSH
1854: LD_INT 3
1856: PPUSH
1857: CALL_OW 1
1861: ST_TO_ADDR
// if missile < 2 then
1862: LD_VAR 0 14
1866: PUSH
1867: LD_INT 2
1869: LESS
1870: IFFALSE 1874
// exit ;
1872: GO 2096
// x := GetX ( enemy ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_VAR 0 10
1883: PPUSH
1884: CALL_OW 250
1888: ST_TO_ADDR
// y := GetY ( enemy ) ;
1889: LD_ADDR_VAR 0 5
1893: PUSH
1894: LD_VAR 0 10
1898: PPUSH
1899: CALL_OW 251
1903: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1904: LD_ADDR_VAR 0 6
1908: PUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: NEG
1917: PPUSH
1918: LD_INT 1
1920: PPUSH
1921: CALL_OW 12
1925: PLUS
1926: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1927: LD_ADDR_VAR 0 7
1931: PUSH
1932: LD_VAR 0 5
1936: PUSH
1937: LD_INT 1
1939: NEG
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 12
1948: PLUS
1949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1950: LD_VAR 0 6
1954: PPUSH
1955: LD_VAR 0 7
1959: PPUSH
1960: CALL_OW 488
1964: NOT
1965: IFFALSE 1987
// begin _x := x ;
1967: LD_ADDR_VAR 0 6
1971: PUSH
1972: LD_VAR 0 4
1976: ST_TO_ADDR
// _y := y ;
1977: LD_ADDR_VAR 0 7
1981: PUSH
1982: LD_VAR 0 5
1986: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_VAR 0 14
1999: PPUSH
2000: CALL_OW 12
2004: ST_TO_ADDR
// case i of 1 :
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 1
2012: DOUBLE
2013: EQUAL
2014: IFTRUE 2018
2016: GO 2035
2018: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2019: LD_VAR 0 1
2023: PPUSH
2024: LD_VAR 0 10
2028: PPUSH
2029: CALL_OW 115
2033: GO 2096
2035: LD_INT 2
2037: DOUBLE
2038: EQUAL
2039: IFTRUE 2043
2041: GO 2065
2043: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_VAR 0 6
2053: PPUSH
2054: LD_VAR 0 7
2058: PPUSH
2059: CALL_OW 153
2063: GO 2096
2065: LD_INT 3
2067: DOUBLE
2068: EQUAL
2069: IFTRUE 2073
2071: GO 2095
2073: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2074: LD_VAR 0 1
2078: PPUSH
2079: LD_VAR 0 6
2083: PPUSH
2084: LD_VAR 0 7
2088: PPUSH
2089: CALL_OW 154
2093: GO 2096
2095: POP
// end ;
2096: LD_VAR 0 2
2100: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
// if not unit or not building then
2109: LD_VAR 0 1
2113: NOT
2114: PUSH
2115: LD_VAR 0 2
2119: NOT
2120: OR
2121: IFFALSE 2125
// exit ;
2123: GO 2283
// x := GetX ( building ) ;
2125: LD_ADDR_VAR 0 5
2129: PUSH
2130: LD_VAR 0 2
2134: PPUSH
2135: CALL_OW 250
2139: ST_TO_ADDR
// y := GetY ( building ) ;
2140: LD_ADDR_VAR 0 6
2144: PUSH
2145: LD_VAR 0 2
2149: PPUSH
2150: CALL_OW 251
2154: ST_TO_ADDR
// for i = 0 to 5 do
2155: LD_ADDR_VAR 0 4
2159: PUSH
2160: DOUBLE
2161: LD_INT 0
2163: DEC
2164: ST_TO_ADDR
2165: LD_INT 5
2167: PUSH
2168: FOR_TO
2169: IFFALSE 2281
// begin _x := ShiftX ( x , i , 3 ) ;
2171: LD_ADDR_VAR 0 7
2175: PUSH
2176: LD_VAR 0 5
2180: PPUSH
2181: LD_VAR 0 4
2185: PPUSH
2186: LD_INT 3
2188: PPUSH
2189: CALL_OW 272
2193: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: LD_VAR 0 6
2203: PPUSH
2204: LD_VAR 0 4
2208: PPUSH
2209: LD_INT 3
2211: PPUSH
2212: CALL_OW 273
2216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2217: LD_VAR 0 7
2221: PPUSH
2222: LD_VAR 0 8
2226: PPUSH
2227: CALL_OW 488
2231: NOT
2232: IFFALSE 2236
// continue ;
2234: GO 2168
// if HexInfo ( _x , _y ) = 0 then
2236: LD_VAR 0 7
2240: PPUSH
2241: LD_VAR 0 8
2245: PPUSH
2246: CALL_OW 428
2250: PUSH
2251: LD_INT 0
2253: EQUAL
2254: IFFALSE 2279
// begin ComMoveXY ( unit , _x , _y ) ;
2256: LD_VAR 0 1
2260: PPUSH
2261: LD_VAR 0 7
2265: PPUSH
2266: LD_VAR 0 8
2270: PPUSH
2271: CALL_OW 111
// exit ;
2275: POP
2276: POP
2277: GO 2283
// end ; end ;
2279: GO 2168
2281: POP
2282: POP
// end ;
2283: LD_VAR 0 3
2287: RET
// export function ScanBase ( side , base_area ) ; begin
2288: LD_INT 0
2290: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 2
2300: PPUSH
2301: LD_INT 81
2303: PUSH
2304: LD_VAR 0 1
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL_OW 70
2317: ST_TO_ADDR
// end ;
2318: LD_VAR 0 3
2322: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2323: LD_INT 0
2325: PPUSH
2326: PPUSH
2327: PPUSH
2328: PPUSH
// result := false ;
2329: LD_ADDR_VAR 0 2
2333: PUSH
2334: LD_INT 0
2336: ST_TO_ADDR
// side := GetSide ( unit ) ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_VAR 0 1
2346: PPUSH
2347: CALL_OW 255
2351: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2352: LD_ADDR_VAR 0 4
2356: PUSH
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 248
2366: ST_TO_ADDR
// case nat of 1 :
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: DOUBLE
2375: EQUAL
2376: IFTRUE 2380
2378: GO 2391
2380: POP
// tech := tech_lassight ; 2 :
2381: LD_ADDR_VAR 0 5
2385: PUSH
2386: LD_INT 12
2388: ST_TO_ADDR
2389: GO 2430
2391: LD_INT 2
2393: DOUBLE
2394: EQUAL
2395: IFTRUE 2399
2397: GO 2410
2399: POP
// tech := tech_mortar ; 3 :
2400: LD_ADDR_VAR 0 5
2404: PUSH
2405: LD_INT 41
2407: ST_TO_ADDR
2408: GO 2430
2410: LD_INT 3
2412: DOUBLE
2413: EQUAL
2414: IFTRUE 2418
2416: GO 2429
2418: POP
// tech := tech_bazooka ; end ;
2419: LD_ADDR_VAR 0 5
2423: PUSH
2424: LD_INT 44
2426: ST_TO_ADDR
2427: GO 2430
2429: POP
// if Researched ( side , tech ) then
2430: LD_VAR 0 3
2434: PPUSH
2435: LD_VAR 0 5
2439: PPUSH
2440: CALL_OW 325
2444: IFFALSE 2471
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 8
2456: PUSH
2457: LD_INT 9
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_VAR 0 4
2469: ARRAY
2470: ST_TO_ADDR
// end ;
2471: LD_VAR 0 2
2475: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
2480: PPUSH
// if not mines then
2481: LD_VAR 0 2
2485: NOT
2486: IFFALSE 2490
// exit ;
2488: GO 2634
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 81
2497: PUSH
2498: LD_VAR 0 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 3
2509: PUSH
2510: LD_INT 21
2512: PUSH
2513: LD_INT 3
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: ST_TO_ADDR
// for i in mines do
2533: LD_ADDR_VAR 0 4
2537: PUSH
2538: LD_VAR 0 2
2542: PUSH
2543: FOR_IN
2544: IFFALSE 2632
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2546: LD_VAR 0 4
2550: PUSH
2551: LD_INT 1
2553: ARRAY
2554: PPUSH
2555: LD_VAR 0 4
2559: PUSH
2560: LD_INT 2
2562: ARRAY
2563: PPUSH
2564: CALL_OW 458
2568: NOT
2569: IFFALSE 2573
// continue ;
2571: GO 2543
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2573: LD_VAR 0 4
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 4
2586: PUSH
2587: LD_INT 2
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: PUSH
2596: LD_VAR 0 5
2600: IN
2601: IFFALSE 2630
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2603: LD_VAR 0 4
2607: PUSH
2608: LD_INT 1
2610: ARRAY
2611: PPUSH
2612: LD_VAR 0 4
2616: PUSH
2617: LD_INT 2
2619: ARRAY
2620: PPUSH
2621: LD_VAR 0 1
2625: PPUSH
2626: CALL_OW 456
// end ;
2630: GO 2543
2632: POP
2633: POP
// end ;
2634: LD_VAR 0 3
2638: RET
// export function Count ( array ) ; begin
2639: LD_INT 0
2641: PPUSH
// result := array + 0 ;
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_VAR 0 1
2651: PUSH
2652: LD_INT 0
2654: PLUS
2655: ST_TO_ADDR
// end ;
2656: LD_VAR 0 2
2660: RET
// export function IsEmpty ( building ) ; begin
2661: LD_INT 0
2663: PPUSH
// if not building then
2664: LD_VAR 0 1
2668: NOT
2669: IFFALSE 2673
// exit ;
2671: GO 2716
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2673: LD_ADDR_VAR 0 2
2677: PUSH
2678: LD_VAR 0 1
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_VAR 0 1
2690: PPUSH
2691: CALL_OW 255
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 58
2702: PUSH
2703: EMPTY
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 69
2714: IN
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 2
2720: RET
// export function IsNotFull ( building ) ; var places ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
// if not building then
2725: LD_VAR 0 1
2729: NOT
2730: IFFALSE 2734
// exit ;
2732: GO 2762
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2734: LD_ADDR_VAR 0 2
2738: PUSH
2739: LD_VAR 0 1
2743: PPUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 62
2749: PUSH
2750: EMPTY
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 72
2761: ST_TO_ADDR
// end ;
2762: LD_VAR 0 2
2766: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2767: LD_INT 0
2769: PPUSH
2770: PPUSH
2771: PPUSH
2772: PPUSH
// tmp := [ ] ;
2773: LD_ADDR_VAR 0 3
2777: PUSH
2778: EMPTY
2779: ST_TO_ADDR
// list := [ ] ;
2780: LD_ADDR_VAR 0 5
2784: PUSH
2785: EMPTY
2786: ST_TO_ADDR
// for i = 16 to 25 do
2787: LD_ADDR_VAR 0 4
2791: PUSH
2792: DOUBLE
2793: LD_INT 16
2795: DEC
2796: ST_TO_ADDR
2797: LD_INT 25
2799: PUSH
2800: FOR_TO
2801: IFFALSE 2874
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 22
2815: PUSH
2816: LD_VAR 0 1
2820: PPUSH
2821: CALL_OW 255
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 91
2832: PUSH
2833: LD_VAR 0 1
2837: PUSH
2838: LD_INT 6
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 30
2848: PUSH
2849: LD_VAR 0 4
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: PUSH
2863: EMPTY
2864: LIST
2865: PPUSH
2866: CALL_OW 69
2870: ADD
2871: ST_TO_ADDR
2872: GO 2800
2874: POP
2875: POP
// for i = 1 to tmp do
2876: LD_ADDR_VAR 0 4
2880: PUSH
2881: DOUBLE
2882: LD_INT 1
2884: DEC
2885: ST_TO_ADDR
2886: LD_VAR 0 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2980
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2894: LD_ADDR_VAR 0 5
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: LD_VAR 0 3
2908: PUSH
2909: LD_VAR 0 4
2913: ARRAY
2914: PPUSH
2915: CALL_OW 266
2919: PUSH
2920: LD_VAR 0 3
2924: PUSH
2925: LD_VAR 0 4
2929: ARRAY
2930: PPUSH
2931: CALL_OW 250
2935: PUSH
2936: LD_VAR 0 3
2940: PUSH
2941: LD_VAR 0 4
2945: ARRAY
2946: PPUSH
2947: CALL_OW 251
2951: PUSH
2952: LD_VAR 0 3
2956: PUSH
2957: LD_VAR 0 4
2961: ARRAY
2962: PPUSH
2963: CALL_OW 254
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: ADD
2977: ST_TO_ADDR
2978: GO 2891
2980: POP
2981: POP
// result := list ;
2982: LD_ADDR_VAR 0 2
2986: PUSH
2987: LD_VAR 0 5
2991: ST_TO_ADDR
// end ;
2992: LD_VAR 0 2
2996: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2997: LD_INT 0
2999: PPUSH
3000: PPUSH
3001: PPUSH
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
// if not factory then
3006: LD_VAR 0 1
3010: NOT
3011: IFFALSE 3015
// exit ;
3013: GO 3608
// if control = control_apeman then
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 5
3022: EQUAL
3023: IFFALSE 3132
// begin tmp := UnitsInside ( factory ) ;
3025: LD_ADDR_VAR 0 8
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 313
3039: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3040: LD_VAR 0 8
3044: PPUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 12
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 72
3059: NOT
3060: IFFALSE 3070
// control := control_manual ;
3062: LD_ADDR_VAR 0 4
3066: PUSH
3067: LD_INT 1
3069: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3070: LD_ADDR_VAR 0 8
3074: PUSH
3075: LD_VAR 0 1
3079: PPUSH
3080: CALL 2767 0 1
3084: ST_TO_ADDR
// if tmp then
3085: LD_VAR 0 8
3089: IFFALSE 3132
// begin for i in tmp do
3091: LD_ADDR_VAR 0 7
3095: PUSH
3096: LD_VAR 0 8
3100: PUSH
3101: FOR_IN
3102: IFFALSE 3130
// if i [ 1 ] = b_ext_radio then
3104: LD_VAR 0 7
3108: PUSH
3109: LD_INT 1
3111: ARRAY
3112: PUSH
3113: LD_INT 22
3115: EQUAL
3116: IFFALSE 3128
// begin control := control_remote ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 2
3125: ST_TO_ADDR
// break ;
3126: GO 3130
// end ;
3128: GO 3101
3130: POP
3131: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3132: LD_VAR 0 1
3136: PPUSH
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_VAR 0 3
3146: PPUSH
3147: LD_VAR 0 4
3151: PPUSH
3152: LD_VAR 0 5
3156: PPUSH
3157: CALL_OW 448
3161: IFFALSE 3196
// begin result := [ chassis , engine , control , weapon ] ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 2
3172: PUSH
3173: LD_VAR 0 3
3177: PUSH
3178: LD_VAR 0 4
3182: PUSH
3183: LD_VAR 0 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: ST_TO_ADDR
// exit ;
3194: GO 3608
// end ; _chassis := AvailableChassisList ( factory ) ;
3196: LD_ADDR_VAR 0 9
3200: PUSH
3201: LD_VAR 0 1
3205: PPUSH
3206: CALL_OW 475
3210: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3211: LD_ADDR_VAR 0 11
3215: PUSH
3216: LD_VAR 0 1
3220: PPUSH
3221: CALL_OW 476
3225: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3226: LD_ADDR_VAR 0 12
3230: PUSH
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 477
3240: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3241: LD_ADDR_VAR 0 10
3245: PUSH
3246: LD_VAR 0 1
3250: PPUSH
3251: CALL_OW 478
3255: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3256: LD_VAR 0 9
3260: NOT
3261: PUSH
3262: LD_VAR 0 11
3266: NOT
3267: OR
3268: PUSH
3269: LD_VAR 0 12
3273: NOT
3274: OR
3275: PUSH
3276: LD_VAR 0 10
3280: NOT
3281: OR
3282: IFFALSE 3317
// begin result := [ chassis , engine , control , weapon ] ;
3284: LD_ADDR_VAR 0 6
3288: PUSH
3289: LD_VAR 0 2
3293: PUSH
3294: LD_VAR 0 3
3298: PUSH
3299: LD_VAR 0 4
3303: PUSH
3304: LD_VAR 0 5
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: ST_TO_ADDR
// exit ;
3315: GO 3608
// end ; if not chassis in _chassis then
3317: LD_VAR 0 2
3321: PUSH
3322: LD_VAR 0 9
3326: IN
3327: NOT
3328: IFFALSE 3354
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: LD_VAR 0 9
3339: PUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_VAR 0 9
3347: PPUSH
3348: CALL_OW 12
3352: ARRAY
3353: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3354: LD_VAR 0 2
3358: PPUSH
3359: LD_VAR 0 3
3363: PPUSH
3364: CALL 3613 0 2
3368: NOT
3369: IFFALSE 3428
// repeat engine := _engine [ 1 ] ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: LD_VAR 0 11
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3385: LD_ADDR_VAR 0 11
3389: PUSH
3390: LD_VAR 0 11
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 3
3402: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3403: LD_VAR 0 2
3407: PPUSH
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL 3613 0 2
3417: PUSH
3418: LD_VAR 0 11
3422: PUSH
3423: EMPTY
3424: EQUAL
3425: OR
3426: IFFALSE 3371
// if not control in _control then
3428: LD_VAR 0 4
3432: PUSH
3433: LD_VAR 0 12
3437: IN
3438: NOT
3439: IFFALSE 3465
// control := _control [ rand ( 1 , _control ) ] ;
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: LD_VAR 0 12
3450: PUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_VAR 0 12
3458: PPUSH
3459: CALL_OW 12
3463: ARRAY
3464: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3465: LD_VAR 0 2
3469: PPUSH
3470: LD_VAR 0 5
3474: PPUSH
3475: CALL 3833 0 2
3479: NOT
3480: IFFALSE 3539
// repeat weapon := _weapon [ 1 ] ;
3482: LD_ADDR_VAR 0 5
3486: PUSH
3487: LD_VAR 0 10
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3496: LD_ADDR_VAR 0 10
3500: PUSH
3501: LD_VAR 0 10
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 3
3513: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: CALL 3833 0 2
3528: PUSH
3529: LD_VAR 0 10
3533: PUSH
3534: EMPTY
3535: EQUAL
3536: OR
3537: IFFALSE 3482
// result := [ ] ;
3539: LD_ADDR_VAR 0 6
3543: PUSH
3544: EMPTY
3545: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_VAR 0 2
3555: PPUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: LD_VAR 0 4
3565: PPUSH
3566: LD_VAR 0 5
3570: PPUSH
3571: CALL_OW 448
3575: IFFALSE 3608
// result := [ chassis , engine , control , weapon ] ;
3577: LD_ADDR_VAR 0 6
3581: PUSH
3582: LD_VAR 0 2
3586: PUSH
3587: LD_VAR 0 3
3591: PUSH
3592: LD_VAR 0 4
3596: PUSH
3597: LD_VAR 0 5
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: ST_TO_ADDR
// end ;
3608: LD_VAR 0 6
3612: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3613: LD_INT 0
3615: PPUSH
// if not chassis or not engine then
3616: LD_VAR 0 1
3620: NOT
3621: PUSH
3622: LD_VAR 0 2
3626: NOT
3627: OR
3628: IFFALSE 3632
// exit ;
3630: GO 3828
// case engine of engine_solar :
3632: LD_VAR 0 2
3636: PUSH
3637: LD_INT 2
3639: DOUBLE
3640: EQUAL
3641: IFTRUE 3645
3643: GO 3683
3645: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3646: LD_ADDR_VAR 0 3
3650: PUSH
3651: LD_INT 11
3653: PUSH
3654: LD_INT 12
3656: PUSH
3657: LD_INT 13
3659: PUSH
3660: LD_INT 14
3662: PUSH
3663: LD_INT 1
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 3
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: ST_TO_ADDR
3681: GO 3812
3683: LD_INT 1
3685: DOUBLE
3686: EQUAL
3687: IFTRUE 3691
3689: GO 3753
3691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3692: LD_ADDR_VAR 0 3
3696: PUSH
3697: LD_INT 11
3699: PUSH
3700: LD_INT 12
3702: PUSH
3703: LD_INT 13
3705: PUSH
3706: LD_INT 14
3708: PUSH
3709: LD_INT 1
3711: PUSH
3712: LD_INT 2
3714: PUSH
3715: LD_INT 3
3717: PUSH
3718: LD_INT 4
3720: PUSH
3721: LD_INT 5
3723: PUSH
3724: LD_INT 21
3726: PUSH
3727: LD_INT 23
3729: PUSH
3730: LD_INT 22
3732: PUSH
3733: LD_INT 24
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: ST_TO_ADDR
3751: GO 3812
3753: LD_INT 3
3755: DOUBLE
3756: EQUAL
3757: IFTRUE 3761
3759: GO 3811
3761: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_INT 13
3769: PUSH
3770: LD_INT 14
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: LD_INT 3
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: LD_INT 5
3784: PUSH
3785: LD_INT 21
3787: PUSH
3788: LD_INT 22
3790: PUSH
3791: LD_INT 23
3793: PUSH
3794: LD_INT 24
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: ST_TO_ADDR
3809: GO 3812
3811: POP
// result := ( chassis in result ) ;
3812: LD_ADDR_VAR 0 3
3816: PUSH
3817: LD_VAR 0 1
3821: PUSH
3822: LD_VAR 0 3
3826: IN
3827: ST_TO_ADDR
// end ;
3828: LD_VAR 0 3
3832: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3833: LD_INT 0
3835: PPUSH
// if not chassis or not weapon then
3836: LD_VAR 0 1
3840: NOT
3841: PUSH
3842: LD_VAR 0 2
3846: NOT
3847: OR
3848: IFFALSE 3852
// exit ;
3850: GO 4912
// case weapon of us_machine_gun :
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 2
3859: DOUBLE
3860: EQUAL
3861: IFTRUE 3865
3863: GO 3895
3865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_INT 2
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: ST_TO_ADDR
3893: GO 4896
3895: LD_INT 3
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 3933
3903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 3
3917: PUSH
3918: LD_INT 4
3920: PUSH
3921: LD_INT 5
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: ST_TO_ADDR
3931: GO 4896
3933: LD_INT 11
3935: DOUBLE
3936: EQUAL
3937: IFTRUE 3941
3939: GO 3971
3941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3942: LD_ADDR_VAR 0 3
3946: PUSH
3947: LD_INT 1
3949: PUSH
3950: LD_INT 2
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_INT 4
3958: PUSH
3959: LD_INT 5
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: ST_TO_ADDR
3969: GO 4896
3971: LD_INT 4
3973: DOUBLE
3974: EQUAL
3975: IFTRUE 3979
3977: GO 4005
3979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_INT 2
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: LD_INT 4
3993: PUSH
3994: LD_INT 5
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: ST_TO_ADDR
4003: GO 4896
4005: LD_INT 5
4007: DOUBLE
4008: EQUAL
4009: IFTRUE 4013
4011: GO 4039
4013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4014: LD_ADDR_VAR 0 3
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: LD_INT 3
4024: PUSH
4025: LD_INT 4
4027: PUSH
4028: LD_INT 5
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: ST_TO_ADDR
4037: GO 4896
4039: LD_INT 9
4041: DOUBLE
4042: EQUAL
4043: IFTRUE 4047
4045: GO 4073
4047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: LD_INT 4
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: ST_TO_ADDR
4071: GO 4896
4073: LD_INT 7
4075: DOUBLE
4076: EQUAL
4077: IFTRUE 4081
4079: GO 4107
4081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: LD_INT 2
4089: PUSH
4090: LD_INT 3
4092: PUSH
4093: LD_INT 4
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: ST_TO_ADDR
4105: GO 4896
4107: LD_INT 12
4109: DOUBLE
4110: EQUAL
4111: IFTRUE 4115
4113: GO 4141
4115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 2
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: LD_INT 5
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
4139: GO 4896
4141: LD_INT 13
4143: DOUBLE
4144: EQUAL
4145: IFTRUE 4149
4147: GO 4175
4149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: ST_TO_ADDR
4173: GO 4896
4175: LD_INT 14
4177: DOUBLE
4178: EQUAL
4179: IFTRUE 4183
4181: GO 4201
4183: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: LD_INT 4
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: ST_TO_ADDR
4199: GO 4896
4201: LD_INT 6
4203: DOUBLE
4204: EQUAL
4205: IFTRUE 4209
4207: GO 4227
4209: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: LD_INT 5
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: ST_TO_ADDR
4225: GO 4896
4227: LD_INT 10
4229: DOUBLE
4230: EQUAL
4231: IFTRUE 4235
4233: GO 4253
4235: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 5
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
4251: GO 4896
4253: LD_INT 22
4255: DOUBLE
4256: EQUAL
4257: IFTRUE 4261
4259: GO 4287
4261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: LD_INT 11
4269: PUSH
4270: LD_INT 12
4272: PUSH
4273: LD_INT 13
4275: PUSH
4276: LD_INT 14
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: ST_TO_ADDR
4285: GO 4896
4287: LD_INT 23
4289: DOUBLE
4290: EQUAL
4291: IFTRUE 4295
4293: GO 4321
4295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: LD_INT 11
4303: PUSH
4304: LD_INT 12
4306: PUSH
4307: LD_INT 13
4309: PUSH
4310: LD_INT 14
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: ST_TO_ADDR
4319: GO 4896
4321: LD_INT 24
4323: DOUBLE
4324: EQUAL
4325: IFTRUE 4329
4327: GO 4355
4329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: LD_INT 11
4337: PUSH
4338: LD_INT 12
4340: PUSH
4341: LD_INT 13
4343: PUSH
4344: LD_INT 14
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: ST_TO_ADDR
4353: GO 4896
4355: LD_INT 30
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4389
4363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: LD_INT 11
4371: PUSH
4372: LD_INT 12
4374: PUSH
4375: LD_INT 13
4377: PUSH
4378: LD_INT 14
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: ST_TO_ADDR
4387: GO 4896
4389: LD_INT 25
4391: DOUBLE
4392: EQUAL
4393: IFTRUE 4397
4395: GO 4415
4397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4398: LD_ADDR_VAR 0 3
4402: PUSH
4403: LD_INT 13
4405: PUSH
4406: LD_INT 14
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: ST_TO_ADDR
4413: GO 4896
4415: LD_INT 27
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4441
4423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 13
4431: PUSH
4432: LD_INT 14
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: ST_TO_ADDR
4439: GO 4896
4441: LD_INT 92
4443: DOUBLE
4444: EQUAL
4445: IFTRUE 4449
4447: GO 4475
4449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4450: LD_ADDR_VAR 0 3
4454: PUSH
4455: LD_INT 11
4457: PUSH
4458: LD_INT 12
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: LD_INT 14
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: ST_TO_ADDR
4473: GO 4896
4475: LD_INT 28
4477: DOUBLE
4478: EQUAL
4479: IFTRUE 4483
4481: GO 4501
4483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: LD_INT 13
4491: PUSH
4492: LD_INT 14
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: ST_TO_ADDR
4499: GO 4896
4501: LD_INT 29
4503: DOUBLE
4504: EQUAL
4505: IFTRUE 4509
4507: GO 4527
4509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4510: LD_ADDR_VAR 0 3
4514: PUSH
4515: LD_INT 13
4517: PUSH
4518: LD_INT 14
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: ST_TO_ADDR
4525: GO 4896
4527: LD_INT 31
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4553
4535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 13
4543: PUSH
4544: LD_INT 14
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: ST_TO_ADDR
4551: GO 4896
4553: LD_INT 26
4555: DOUBLE
4556: EQUAL
4557: IFTRUE 4561
4559: GO 4579
4561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 13
4569: PUSH
4570: LD_INT 14
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: ST_TO_ADDR
4577: GO 4896
4579: LD_INT 42
4581: DOUBLE
4582: EQUAL
4583: IFTRUE 4587
4585: GO 4613
4587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_INT 21
4595: PUSH
4596: LD_INT 22
4598: PUSH
4599: LD_INT 23
4601: PUSH
4602: LD_INT 24
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: ST_TO_ADDR
4611: GO 4896
4613: LD_INT 43
4615: DOUBLE
4616: EQUAL
4617: IFTRUE 4621
4619: GO 4647
4621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_INT 21
4629: PUSH
4630: LD_INT 22
4632: PUSH
4633: LD_INT 23
4635: PUSH
4636: LD_INT 24
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
4645: GO 4896
4647: LD_INT 44
4649: DOUBLE
4650: EQUAL
4651: IFTRUE 4655
4653: GO 4681
4655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: LD_INT 21
4663: PUSH
4664: LD_INT 22
4666: PUSH
4667: LD_INT 23
4669: PUSH
4670: LD_INT 24
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: ST_TO_ADDR
4679: GO 4896
4681: LD_INT 45
4683: DOUBLE
4684: EQUAL
4685: IFTRUE 4689
4687: GO 4715
4689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: LD_INT 21
4697: PUSH
4698: LD_INT 22
4700: PUSH
4701: LD_INT 23
4703: PUSH
4704: LD_INT 24
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: ST_TO_ADDR
4713: GO 4896
4715: LD_INT 49
4717: DOUBLE
4718: EQUAL
4719: IFTRUE 4723
4721: GO 4749
4723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4724: LD_ADDR_VAR 0 3
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 22
4734: PUSH
4735: LD_INT 23
4737: PUSH
4738: LD_INT 24
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 4896
4749: LD_INT 51
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 23
4771: PUSH
4772: LD_INT 24
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 4896
4783: LD_INT 52
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 23
4805: PUSH
4806: LD_INT 24
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 4896
4817: LD_INT 53
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4843
4825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 23
4833: PUSH
4834: LD_INT 24
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: ST_TO_ADDR
4841: GO 4896
4843: LD_INT 46
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4851
4849: GO 4869
4851: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4852: LD_ADDR_VAR 0 3
4856: PUSH
4857: LD_INT 23
4859: PUSH
4860: LD_INT 24
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: ST_TO_ADDR
4867: GO 4896
4869: LD_INT 47
4871: DOUBLE
4872: EQUAL
4873: IFTRUE 4877
4875: GO 4895
4877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4878: LD_ADDR_VAR 0 3
4882: PUSH
4883: LD_INT 23
4885: PUSH
4886: LD_INT 24
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: ST_TO_ADDR
4893: GO 4896
4895: POP
// result := ( chassis in result ) ;
4896: LD_ADDR_VAR 0 3
4900: PUSH
4901: LD_VAR 0 1
4905: PUSH
4906: LD_VAR 0 3
4910: IN
4911: ST_TO_ADDR
// end ;
4912: LD_VAR 0 3
4916: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4917: LD_INT 0
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
// result := array ;
4926: LD_ADDR_VAR 0 5
4930: PUSH
4931: LD_VAR 0 1
4935: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4936: LD_VAR 0 1
4940: NOT
4941: PUSH
4942: LD_VAR 0 2
4946: NOT
4947: OR
4948: PUSH
4949: LD_VAR 0 3
4953: NOT
4954: OR
4955: PUSH
4956: LD_VAR 0 2
4960: PUSH
4961: LD_VAR 0 1
4965: GREATER
4966: OR
4967: PUSH
4968: LD_VAR 0 3
4972: PUSH
4973: LD_VAR 0 1
4977: GREATER
4978: OR
4979: IFFALSE 4983
// exit ;
4981: GO 5279
// if direction then
4983: LD_VAR 0 4
4987: IFFALSE 5051
// begin d := 1 ;
4989: LD_ADDR_VAR 0 9
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// if i_from > i_to then
4997: LD_VAR 0 2
5001: PUSH
5002: LD_VAR 0 3
5006: GREATER
5007: IFFALSE 5033
// length := ( array - i_from ) + i_to else
5009: LD_ADDR_VAR 0 11
5013: PUSH
5014: LD_VAR 0 1
5018: PUSH
5019: LD_VAR 0 2
5023: MINUS
5024: PUSH
5025: LD_VAR 0 3
5029: PLUS
5030: ST_TO_ADDR
5031: GO 5049
// length := i_to - i_from ;
5033: LD_ADDR_VAR 0 11
5037: PUSH
5038: LD_VAR 0 3
5042: PUSH
5043: LD_VAR 0 2
5047: MINUS
5048: ST_TO_ADDR
// end else
5049: GO 5112
// begin d := - 1 ;
5051: LD_ADDR_VAR 0 9
5055: PUSH
5056: LD_INT 1
5058: NEG
5059: ST_TO_ADDR
// if i_from > i_to then
5060: LD_VAR 0 2
5064: PUSH
5065: LD_VAR 0 3
5069: GREATER
5070: IFFALSE 5090
// length := i_from - i_to else
5072: LD_ADDR_VAR 0 11
5076: PUSH
5077: LD_VAR 0 2
5081: PUSH
5082: LD_VAR 0 3
5086: MINUS
5087: ST_TO_ADDR
5088: GO 5112
// length := ( array - i_to ) + i_from ;
5090: LD_ADDR_VAR 0 11
5094: PUSH
5095: LD_VAR 0 1
5099: PUSH
5100: LD_VAR 0 3
5104: MINUS
5105: PUSH
5106: LD_VAR 0 2
5110: PLUS
5111: ST_TO_ADDR
// end ; if not length then
5112: LD_VAR 0 11
5116: NOT
5117: IFFALSE 5121
// exit ;
5119: GO 5279
// tmp := array ;
5121: LD_ADDR_VAR 0 10
5125: PUSH
5126: LD_VAR 0 1
5130: ST_TO_ADDR
// for i = 1 to length do
5131: LD_ADDR_VAR 0 6
5135: PUSH
5136: DOUBLE
5137: LD_INT 1
5139: DEC
5140: ST_TO_ADDR
5141: LD_VAR 0 11
5145: PUSH
5146: FOR_TO
5147: IFFALSE 5267
// begin for j = 1 to array do
5149: LD_ADDR_VAR 0 7
5153: PUSH
5154: DOUBLE
5155: LD_INT 1
5157: DEC
5158: ST_TO_ADDR
5159: LD_VAR 0 1
5163: PUSH
5164: FOR_TO
5165: IFFALSE 5253
// begin k := j + d ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_VAR 0 7
5176: PUSH
5177: LD_VAR 0 9
5181: PLUS
5182: ST_TO_ADDR
// if k > array then
5183: LD_VAR 0 8
5187: PUSH
5188: LD_VAR 0 1
5192: GREATER
5193: IFFALSE 5203
// k := 1 ;
5195: LD_ADDR_VAR 0 8
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if not k then
5203: LD_VAR 0 8
5207: NOT
5208: IFFALSE 5220
// k := array ;
5210: LD_ADDR_VAR 0 8
5214: PUSH
5215: LD_VAR 0 1
5219: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5220: LD_ADDR_VAR 0 10
5224: PUSH
5225: LD_VAR 0 10
5229: PPUSH
5230: LD_VAR 0 8
5234: PPUSH
5235: LD_VAR 0 1
5239: PUSH
5240: LD_VAR 0 7
5244: ARRAY
5245: PPUSH
5246: CALL_OW 1
5250: ST_TO_ADDR
// end ;
5251: GO 5164
5253: POP
5254: POP
// array := tmp ;
5255: LD_ADDR_VAR 0 1
5259: PUSH
5260: LD_VAR 0 10
5264: ST_TO_ADDR
// end ;
5265: GO 5146
5267: POP
5268: POP
// result := array ;
5269: LD_ADDR_VAR 0 5
5273: PUSH
5274: LD_VAR 0 1
5278: ST_TO_ADDR
// end ;
5279: LD_VAR 0 5
5283: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5284: LD_INT 0
5286: PPUSH
5287: PPUSH
// result := 0 ;
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_INT 0
5295: ST_TO_ADDR
// if not array or not value in array then
5296: LD_VAR 0 1
5300: NOT
5301: PUSH
5302: LD_VAR 0 2
5306: PUSH
5307: LD_VAR 0 1
5311: IN
5312: NOT
5313: OR
5314: IFFALSE 5318
// exit ;
5316: GO 5372
// for i = 1 to array do
5318: LD_ADDR_VAR 0 4
5322: PUSH
5323: DOUBLE
5324: LD_INT 1
5326: DEC
5327: ST_TO_ADDR
5328: LD_VAR 0 1
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5370
// if value = array [ i ] then
5336: LD_VAR 0 2
5340: PUSH
5341: LD_VAR 0 1
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: EQUAL
5352: IFFALSE 5368
// begin result := i ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_VAR 0 4
5363: ST_TO_ADDR
// exit ;
5364: POP
5365: POP
5366: GO 5372
// end ;
5368: GO 5333
5370: POP
5371: POP
// end ;
5372: LD_VAR 0 3
5376: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5377: LD_INT 0
5379: PPUSH
// vc_chassis := chassis ;
5380: LD_ADDR_OWVAR 37
5384: PUSH
5385: LD_VAR 0 1
5389: ST_TO_ADDR
// vc_engine := engine ;
5390: LD_ADDR_OWVAR 39
5394: PUSH
5395: LD_VAR 0 2
5399: ST_TO_ADDR
// vc_control := control ;
5400: LD_ADDR_OWVAR 38
5404: PUSH
5405: LD_VAR 0 3
5409: ST_TO_ADDR
// vc_weapon := weapon ;
5410: LD_ADDR_OWVAR 40
5414: PUSH
5415: LD_VAR 0 4
5419: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5420: LD_ADDR_OWVAR 41
5424: PUSH
5425: LD_VAR 0 5
5429: ST_TO_ADDR
// end ;
5430: LD_VAR 0 6
5434: RET
// export function WantPlant ( unit ) ; var task ; begin
5435: LD_INT 0
5437: PPUSH
5438: PPUSH
// result := false ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 0
5446: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5447: LD_ADDR_VAR 0 3
5451: PUSH
5452: LD_VAR 0 1
5456: PPUSH
5457: CALL_OW 437
5461: ST_TO_ADDR
// if task then
5462: LD_VAR 0 3
5466: IFFALSE 5494
// if task [ 1 ] [ 1 ] = p then
5468: LD_VAR 0 3
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PUSH
5481: LD_STRING p
5483: EQUAL
5484: IFFALSE 5494
// result := true ;
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: LD_INT 1
5493: ST_TO_ADDR
// end ;
5494: LD_VAR 0 2
5498: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5499: LD_INT 0
5501: PPUSH
5502: PPUSH
5503: PPUSH
5504: PPUSH
// if pos < 1 then
5505: LD_VAR 0 2
5509: PUSH
5510: LD_INT 1
5512: LESS
5513: IFFALSE 5517
// exit ;
5515: GO 5820
// if pos = 1 then
5517: LD_VAR 0 2
5521: PUSH
5522: LD_INT 1
5524: EQUAL
5525: IFFALSE 5558
// result := Replace ( arr , pos [ 1 ] , value ) else
5527: LD_ADDR_VAR 0 4
5531: PUSH
5532: LD_VAR 0 1
5536: PPUSH
5537: LD_VAR 0 2
5541: PUSH
5542: LD_INT 1
5544: ARRAY
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: CALL_OW 1
5555: ST_TO_ADDR
5556: GO 5820
// begin tmp := arr ;
5558: LD_ADDR_VAR 0 6
5562: PUSH
5563: LD_VAR 0 1
5567: ST_TO_ADDR
// s_arr := [ tmp ] ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: ST_TO_ADDR
// for i = 1 to pos - 1 do
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: DOUBLE
5587: LD_INT 1
5589: DEC
5590: ST_TO_ADDR
5591: LD_VAR 0 2
5595: PUSH
5596: LD_INT 1
5598: MINUS
5599: PUSH
5600: FOR_TO
5601: IFFALSE 5646
// begin tmp := tmp [ pos [ i ] ] ;
5603: LD_ADDR_VAR 0 6
5607: PUSH
5608: LD_VAR 0 6
5612: PUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 5
5622: ARRAY
5623: ARRAY
5624: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5625: LD_ADDR_VAR 0 7
5629: PUSH
5630: LD_VAR 0 7
5634: PUSH
5635: LD_VAR 0 6
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
// end ;
5644: GO 5600
5646: POP
5647: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5648: LD_ADDR_VAR 0 6
5652: PUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: LD_VAR 0 2
5662: PUSH
5663: LD_VAR 0 2
5667: ARRAY
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 1
5678: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5679: LD_ADDR_VAR 0 7
5683: PUSH
5684: LD_VAR 0 7
5688: PPUSH
5689: LD_VAR 0 7
5693: PPUSH
5694: LD_VAR 0 6
5698: PPUSH
5699: CALL_OW 1
5703: ST_TO_ADDR
// for i = s_arr downto 2 do
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: DOUBLE
5710: LD_VAR 0 7
5714: INC
5715: ST_TO_ADDR
5716: LD_INT 2
5718: PUSH
5719: FOR_DOWNTO
5720: IFFALSE 5804
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5722: LD_ADDR_VAR 0 6
5726: PUSH
5727: LD_VAR 0 7
5731: PUSH
5732: LD_VAR 0 5
5736: PUSH
5737: LD_INT 1
5739: MINUS
5740: ARRAY
5741: PPUSH
5742: LD_VAR 0 2
5746: PUSH
5747: LD_VAR 0 5
5751: PUSH
5752: LD_INT 1
5754: MINUS
5755: ARRAY
5756: PPUSH
5757: LD_VAR 0 7
5761: PUSH
5762: LD_VAR 0 5
5766: ARRAY
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5773: LD_ADDR_VAR 0 7
5777: PUSH
5778: LD_VAR 0 7
5782: PPUSH
5783: LD_VAR 0 5
5787: PUSH
5788: LD_INT 1
5790: MINUS
5791: PPUSH
5792: LD_VAR 0 6
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// end ;
5802: GO 5719
5804: POP
5805: POP
// result := s_arr [ 1 ] ;
5806: LD_ADDR_VAR 0 4
5810: PUSH
5811: LD_VAR 0 7
5815: PUSH
5816: LD_INT 1
5818: ARRAY
5819: ST_TO_ADDR
// end ; end ;
5820: LD_VAR 0 4
5824: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5825: LD_INT 0
5827: PPUSH
5828: PPUSH
// if not list then
5829: LD_VAR 0 1
5833: NOT
5834: IFFALSE 5838
// exit ;
5836: GO 5929
// i := list [ pos1 ] ;
5838: LD_ADDR_VAR 0 5
5842: PUSH
5843: LD_VAR 0 1
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: ST_TO_ADDR
// if not i then
5854: LD_VAR 0 5
5858: NOT
5859: IFFALSE 5863
// exit ;
5861: GO 5929
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5863: LD_ADDR_VAR 0 1
5867: PUSH
5868: LD_VAR 0 1
5872: PPUSH
5873: LD_VAR 0 2
5877: PPUSH
5878: LD_VAR 0 1
5882: PUSH
5883: LD_VAR 0 3
5887: ARRAY
5888: PPUSH
5889: CALL_OW 1
5893: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5894: LD_ADDR_VAR 0 1
5898: PUSH
5899: LD_VAR 0 1
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: LD_VAR 0 5
5913: PPUSH
5914: CALL_OW 1
5918: ST_TO_ADDR
// result := list ;
5919: LD_ADDR_VAR 0 4
5923: PUSH
5924: LD_VAR 0 1
5928: ST_TO_ADDR
// end ;
5929: LD_VAR 0 4
5933: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5934: LD_INT 0
5936: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5937: LD_ADDR_VAR 0 5
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 250
5951: PPUSH
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 251
5961: PPUSH
5962: LD_VAR 0 2
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: LD_VAR 0 4
5976: PPUSH
5977: CALL 6355 0 5
5981: ST_TO_ADDR
// end ;
5982: LD_VAR 0 5
5986: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
5987: LD_INT 0
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
// if not list or not unit then
5993: LD_VAR 0 2
5997: NOT
5998: PUSH
5999: LD_VAR 0 1
6003: NOT
6004: OR
6005: IFFALSE 6009
// exit ;
6007: GO 6350
// result := [ ] ;
6009: LD_ADDR_VAR 0 5
6013: PUSH
6014: EMPTY
6015: ST_TO_ADDR
// for i in list do
6016: LD_ADDR_VAR 0 6
6020: PUSH
6021: LD_VAR 0 2
6025: PUSH
6026: FOR_IN
6027: IFFALSE 6245
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6029: LD_ADDR_VAR 0 8
6033: PUSH
6034: LD_VAR 0 1
6038: PPUSH
6039: LD_VAR 0 6
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: LD_VAR 0 6
6052: PUSH
6053: LD_INT 2
6055: ARRAY
6056: PPUSH
6057: CALL_OW 297
6061: ST_TO_ADDR
// if not Count ( result ) then
6062: LD_VAR 0 5
6066: PPUSH
6067: CALL 2639 0 1
6071: NOT
6072: IFFALSE 6105
// begin result := Join ( result , [ i , tmp ] ) ;
6074: LD_ADDR_VAR 0 5
6078: PUSH
6079: LD_VAR 0 5
6083: PPUSH
6084: LD_VAR 0 6
6088: PUSH
6089: LD_VAR 0 8
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PPUSH
6098: CALL 38248 0 2
6102: ST_TO_ADDR
// continue ;
6103: GO 6026
// end ; if result [ result ] [ 2 ] <= tmp then
6105: LD_VAR 0 5
6109: PUSH
6110: LD_VAR 0 5
6114: ARRAY
6115: PUSH
6116: LD_INT 2
6118: ARRAY
6119: PUSH
6120: LD_VAR 0 8
6124: LESSEQUAL
6125: IFFALSE 6158
// result := Join ( result , [ i , tmp ] ) else
6127: LD_ADDR_VAR 0 5
6131: PUSH
6132: LD_VAR 0 5
6136: PPUSH
6137: LD_VAR 0 6
6141: PUSH
6142: LD_VAR 0 8
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PPUSH
6151: CALL 38248 0 2
6155: ST_TO_ADDR
6156: GO 6243
// begin for j := 1 to Count ( result ) do
6158: LD_ADDR_VAR 0 7
6162: PUSH
6163: DOUBLE
6164: LD_INT 1
6166: DEC
6167: ST_TO_ADDR
6168: LD_VAR 0 5
6172: PPUSH
6173: CALL 2639 0 1
6177: PUSH
6178: FOR_TO
6179: IFFALSE 6241
// begin if tmp < result [ j ] [ 2 ] then
6181: LD_VAR 0 8
6185: PUSH
6186: LD_VAR 0 5
6190: PUSH
6191: LD_VAR 0 7
6195: ARRAY
6196: PUSH
6197: LD_INT 2
6199: ARRAY
6200: LESS
6201: IFFALSE 6239
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6203: LD_ADDR_VAR 0 5
6207: PUSH
6208: LD_VAR 0 5
6212: PPUSH
6213: LD_VAR 0 7
6217: PPUSH
6218: LD_VAR 0 6
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 2
6236: ST_TO_ADDR
// break ;
6237: GO 6241
// end ; end ;
6239: GO 6178
6241: POP
6242: POP
// end ; end ;
6243: GO 6026
6245: POP
6246: POP
// if result and not asc then
6247: LD_VAR 0 5
6251: PUSH
6252: LD_VAR 0 3
6256: NOT
6257: AND
6258: IFFALSE 6275
// result := ReverseArray ( result ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: CALL 33515 0 1
6274: ST_TO_ADDR
// tmp := [ ] ;
6275: LD_ADDR_VAR 0 8
6279: PUSH
6280: EMPTY
6281: ST_TO_ADDR
// if mode then
6282: LD_VAR 0 4
6286: IFFALSE 6350
// begin for i := 1 to result do
6288: LD_ADDR_VAR 0 6
6292: PUSH
6293: DOUBLE
6294: LD_INT 1
6296: DEC
6297: ST_TO_ADDR
6298: LD_VAR 0 5
6302: PUSH
6303: FOR_TO
6304: IFFALSE 6338
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6306: LD_ADDR_VAR 0 8
6310: PUSH
6311: LD_VAR 0 8
6315: PPUSH
6316: LD_VAR 0 5
6320: PUSH
6321: LD_VAR 0 6
6325: ARRAY
6326: PUSH
6327: LD_INT 1
6329: ARRAY
6330: PPUSH
6331: CALL 38248 0 2
6335: ST_TO_ADDR
6336: GO 6303
6338: POP
6339: POP
// result := tmp ;
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: LD_VAR 0 8
6349: ST_TO_ADDR
// end ; end ;
6350: LD_VAR 0 5
6354: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6355: LD_INT 0
6357: PPUSH
6358: PPUSH
6359: PPUSH
6360: PPUSH
// if not list then
6361: LD_VAR 0 3
6365: NOT
6366: IFFALSE 6370
// exit ;
6368: GO 6758
// result := [ ] ;
6370: LD_ADDR_VAR 0 6
6374: PUSH
6375: EMPTY
6376: ST_TO_ADDR
// for i in list do
6377: LD_ADDR_VAR 0 7
6381: PUSH
6382: LD_VAR 0 3
6386: PUSH
6387: FOR_IN
6388: IFFALSE 6590
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6390: LD_ADDR_VAR 0 9
6394: PUSH
6395: LD_VAR 0 7
6399: PPUSH
6400: LD_VAR 0 1
6404: PPUSH
6405: LD_VAR 0 2
6409: PPUSH
6410: CALL_OW 297
6414: ST_TO_ADDR
// if not result then
6415: LD_VAR 0 6
6419: NOT
6420: IFFALSE 6446
// result := [ [ i , tmp ] ] else
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_VAR 0 7
6431: PUSH
6432: LD_VAR 0 9
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: EMPTY
6442: LIST
6443: ST_TO_ADDR
6444: GO 6588
// begin if result [ result ] [ 2 ] <= tmp then
6446: LD_VAR 0 6
6450: PUSH
6451: LD_VAR 0 6
6455: ARRAY
6456: PUSH
6457: LD_INT 2
6459: ARRAY
6460: PUSH
6461: LD_VAR 0 9
6465: LESSEQUAL
6466: IFFALSE 6508
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6468: LD_ADDR_VAR 0 6
6472: PUSH
6473: LD_VAR 0 6
6477: PPUSH
6478: LD_VAR 0 6
6482: PUSH
6483: LD_INT 1
6485: PLUS
6486: PPUSH
6487: LD_VAR 0 7
6491: PUSH
6492: LD_VAR 0 9
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PPUSH
6501: CALL_OW 2
6505: ST_TO_ADDR
6506: GO 6588
// for j := 1 to result do
6508: LD_ADDR_VAR 0 8
6512: PUSH
6513: DOUBLE
6514: LD_INT 1
6516: DEC
6517: ST_TO_ADDR
6518: LD_VAR 0 6
6522: PUSH
6523: FOR_TO
6524: IFFALSE 6586
// begin if tmp < result [ j ] [ 2 ] then
6526: LD_VAR 0 9
6530: PUSH
6531: LD_VAR 0 6
6535: PUSH
6536: LD_VAR 0 8
6540: ARRAY
6541: PUSH
6542: LD_INT 2
6544: ARRAY
6545: LESS
6546: IFFALSE 6584
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6548: LD_ADDR_VAR 0 6
6552: PUSH
6553: LD_VAR 0 6
6557: PPUSH
6558: LD_VAR 0 8
6562: PPUSH
6563: LD_VAR 0 7
6567: PUSH
6568: LD_VAR 0 9
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 2
6581: ST_TO_ADDR
// break ;
6582: GO 6586
// end ; end ;
6584: GO 6523
6586: POP
6587: POP
// end ; end ;
6588: GO 6387
6590: POP
6591: POP
// if result and not asc then
6592: LD_VAR 0 6
6596: PUSH
6597: LD_VAR 0 4
6601: NOT
6602: AND
6603: IFFALSE 6678
// begin tmp := result ;
6605: LD_ADDR_VAR 0 9
6609: PUSH
6610: LD_VAR 0 6
6614: ST_TO_ADDR
// for i = tmp downto 1 do
6615: LD_ADDR_VAR 0 7
6619: PUSH
6620: DOUBLE
6621: LD_VAR 0 9
6625: INC
6626: ST_TO_ADDR
6627: LD_INT 1
6629: PUSH
6630: FOR_DOWNTO
6631: IFFALSE 6676
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6633: LD_ADDR_VAR 0 6
6637: PUSH
6638: LD_VAR 0 6
6642: PPUSH
6643: LD_VAR 0 9
6647: PUSH
6648: LD_VAR 0 7
6652: MINUS
6653: PUSH
6654: LD_INT 1
6656: PLUS
6657: PPUSH
6658: LD_VAR 0 9
6662: PUSH
6663: LD_VAR 0 7
6667: ARRAY
6668: PPUSH
6669: CALL_OW 1
6673: ST_TO_ADDR
6674: GO 6630
6676: POP
6677: POP
// end ; tmp := [ ] ;
6678: LD_ADDR_VAR 0 9
6682: PUSH
6683: EMPTY
6684: ST_TO_ADDR
// if mode then
6685: LD_VAR 0 5
6689: IFFALSE 6758
// begin for i = 1 to result do
6691: LD_ADDR_VAR 0 7
6695: PUSH
6696: DOUBLE
6697: LD_INT 1
6699: DEC
6700: ST_TO_ADDR
6701: LD_VAR 0 6
6705: PUSH
6706: FOR_TO
6707: IFFALSE 6746
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6709: LD_ADDR_VAR 0 9
6713: PUSH
6714: LD_VAR 0 9
6718: PPUSH
6719: LD_VAR 0 7
6723: PPUSH
6724: LD_VAR 0 6
6728: PUSH
6729: LD_VAR 0 7
6733: ARRAY
6734: PUSH
6735: LD_INT 1
6737: ARRAY
6738: PPUSH
6739: CALL_OW 1
6743: ST_TO_ADDR
6744: GO 6706
6746: POP
6747: POP
// result := tmp ;
6748: LD_ADDR_VAR 0 6
6752: PUSH
6753: LD_VAR 0 9
6757: ST_TO_ADDR
// end ; end ;
6758: LD_VAR 0 6
6762: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6763: LD_INT 0
6765: PPUSH
6766: PPUSH
6767: PPUSH
6768: PPUSH
6769: PPUSH
6770: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6771: LD_ADDR_VAR 0 5
6775: PUSH
6776: LD_INT 0
6778: PUSH
6779: LD_INT 0
6781: PUSH
6782: LD_INT 0
6784: PUSH
6785: EMPTY
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: ST_TO_ADDR
// if not x or not y then
6793: LD_VAR 0 2
6797: NOT
6798: PUSH
6799: LD_VAR 0 3
6803: NOT
6804: OR
6805: IFFALSE 6809
// exit ;
6807: GO 8459
// if not range then
6809: LD_VAR 0 4
6813: NOT
6814: IFFALSE 6824
// range := 10 ;
6816: LD_ADDR_VAR 0 4
6820: PUSH
6821: LD_INT 10
6823: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6824: LD_ADDR_VAR 0 8
6828: PUSH
6829: LD_INT 81
6831: PUSH
6832: LD_VAR 0 1
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 92
6843: PUSH
6844: LD_VAR 0 2
6848: PUSH
6849: LD_VAR 0 3
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 3
6867: PUSH
6868: LD_INT 21
6870: PUSH
6871: LD_INT 3
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: PPUSH
6887: CALL_OW 69
6891: ST_TO_ADDR
// if not tmp then
6892: LD_VAR 0 8
6896: NOT
6897: IFFALSE 6901
// exit ;
6899: GO 8459
// for i in tmp do
6901: LD_ADDR_VAR 0 6
6905: PUSH
6906: LD_VAR 0 8
6910: PUSH
6911: FOR_IN
6912: IFFALSE 8434
// begin points := [ 0 , 0 , 0 ] ;
6914: LD_ADDR_VAR 0 9
6918: PUSH
6919: LD_INT 0
6921: PUSH
6922: LD_INT 0
6924: PUSH
6925: LD_INT 0
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: ST_TO_ADDR
// bpoints := 1 ;
6933: LD_ADDR_VAR 0 10
6937: PUSH
6938: LD_INT 1
6940: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6941: LD_VAR 0 6
6945: PPUSH
6946: CALL_OW 247
6950: PUSH
6951: LD_INT 1
6953: DOUBLE
6954: EQUAL
6955: IFTRUE 6959
6957: GO 7537
6959: POP
// begin if GetClass ( i ) = 1 then
6960: LD_VAR 0 6
6964: PPUSH
6965: CALL_OW 257
6969: PUSH
6970: LD_INT 1
6972: EQUAL
6973: IFFALSE 6994
// points := [ 10 , 5 , 3 ] ;
6975: LD_ADDR_VAR 0 9
6979: PUSH
6980: LD_INT 10
6982: PUSH
6983: LD_INT 5
6985: PUSH
6986: LD_INT 3
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6994: LD_VAR 0 6
6998: PPUSH
6999: CALL_OW 257
7003: PUSH
7004: LD_INT 2
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: LD_INT 4
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: IN
7018: IFFALSE 7039
// points := [ 3 , 2 , 1 ] ;
7020: LD_ADDR_VAR 0 9
7024: PUSH
7025: LD_INT 3
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 1
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7039: LD_VAR 0 6
7043: PPUSH
7044: CALL_OW 257
7048: PUSH
7049: LD_INT 5
7051: EQUAL
7052: IFFALSE 7073
// points := [ 130 , 5 , 2 ] ;
7054: LD_ADDR_VAR 0 9
7058: PUSH
7059: LD_INT 130
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: LD_INT 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7073: LD_VAR 0 6
7077: PPUSH
7078: CALL_OW 257
7082: PUSH
7083: LD_INT 8
7085: EQUAL
7086: IFFALSE 7107
// points := [ 35 , 35 , 30 ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: LD_INT 35
7095: PUSH
7096: LD_INT 35
7098: PUSH
7099: LD_INT 30
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7107: LD_VAR 0 6
7111: PPUSH
7112: CALL_OW 257
7116: PUSH
7117: LD_INT 9
7119: EQUAL
7120: IFFALSE 7141
// points := [ 20 , 55 , 40 ] ;
7122: LD_ADDR_VAR 0 9
7126: PUSH
7127: LD_INT 20
7129: PUSH
7130: LD_INT 55
7132: PUSH
7133: LD_INT 40
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7141: LD_VAR 0 6
7145: PPUSH
7146: CALL_OW 257
7150: PUSH
7151: LD_INT 12
7153: PUSH
7154: LD_INT 16
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: IN
7161: IFFALSE 7182
// points := [ 5 , 3 , 2 ] ;
7163: LD_ADDR_VAR 0 9
7167: PUSH
7168: LD_INT 5
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 2
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7182: LD_VAR 0 6
7186: PPUSH
7187: CALL_OW 257
7191: PUSH
7192: LD_INT 17
7194: EQUAL
7195: IFFALSE 7216
// points := [ 100 , 50 , 75 ] ;
7197: LD_ADDR_VAR 0 9
7201: PUSH
7202: LD_INT 100
7204: PUSH
7205: LD_INT 50
7207: PUSH
7208: LD_INT 75
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7216: LD_VAR 0 6
7220: PPUSH
7221: CALL_OW 257
7225: PUSH
7226: LD_INT 15
7228: EQUAL
7229: IFFALSE 7250
// points := [ 10 , 5 , 3 ] ;
7231: LD_ADDR_VAR 0 9
7235: PUSH
7236: LD_INT 10
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: LIST
7249: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7250: LD_VAR 0 6
7254: PPUSH
7255: CALL_OW 257
7259: PUSH
7260: LD_INT 14
7262: EQUAL
7263: IFFALSE 7284
// points := [ 10 , 0 , 0 ] ;
7265: LD_ADDR_VAR 0 9
7269: PUSH
7270: LD_INT 10
7272: PUSH
7273: LD_INT 0
7275: PUSH
7276: LD_INT 0
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7284: LD_VAR 0 6
7288: PPUSH
7289: CALL_OW 257
7293: PUSH
7294: LD_INT 11
7296: EQUAL
7297: IFFALSE 7318
// points := [ 30 , 10 , 5 ] ;
7299: LD_ADDR_VAR 0 9
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 10
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7318: LD_VAR 0 1
7322: PPUSH
7323: LD_INT 5
7325: PPUSH
7326: CALL_OW 321
7330: PUSH
7331: LD_INT 2
7333: EQUAL
7334: IFFALSE 7351
// bpoints := bpoints * 1.8 ;
7336: LD_ADDR_VAR 0 10
7340: PUSH
7341: LD_VAR 0 10
7345: PUSH
7346: LD_REAL  1.80000000000000E+0000
7349: MUL
7350: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7351: LD_VAR 0 6
7355: PPUSH
7356: CALL_OW 257
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: LD_INT 2
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: IN
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_INT 51
7387: PPUSH
7388: CALL_OW 321
7392: PUSH
7393: LD_INT 2
7395: EQUAL
7396: AND
7397: IFFALSE 7414
// bpoints := bpoints * 1.2 ;
7399: LD_ADDR_VAR 0 10
7403: PUSH
7404: LD_VAR 0 10
7408: PUSH
7409: LD_REAL  1.20000000000000E+0000
7412: MUL
7413: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7414: LD_VAR 0 6
7418: PPUSH
7419: CALL_OW 257
7423: PUSH
7424: LD_INT 5
7426: PUSH
7427: LD_INT 7
7429: PUSH
7430: LD_INT 9
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: IN
7438: PUSH
7439: LD_VAR 0 1
7443: PPUSH
7444: LD_INT 52
7446: PPUSH
7447: CALL_OW 321
7451: PUSH
7452: LD_INT 2
7454: EQUAL
7455: AND
7456: IFFALSE 7473
// bpoints := bpoints * 1.5 ;
7458: LD_ADDR_VAR 0 10
7462: PUSH
7463: LD_VAR 0 10
7467: PUSH
7468: LD_REAL  1.50000000000000E+0000
7471: MUL
7472: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7473: LD_VAR 0 1
7477: PPUSH
7478: LD_INT 66
7480: PPUSH
7481: CALL_OW 321
7485: PUSH
7486: LD_INT 2
7488: EQUAL
7489: IFFALSE 7506
// bpoints := bpoints * 1.1 ;
7491: LD_ADDR_VAR 0 10
7495: PUSH
7496: LD_VAR 0 10
7500: PUSH
7501: LD_REAL  1.10000000000000E+0000
7504: MUL
7505: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7506: LD_ADDR_VAR 0 10
7510: PUSH
7511: LD_VAR 0 10
7515: PUSH
7516: LD_VAR 0 6
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: CALL_OW 259
7528: PUSH
7529: LD_REAL  1.15000000000000E+0000
7532: MUL
7533: MUL
7534: ST_TO_ADDR
// end ; unit_vehicle :
7535: GO 8363
7537: LD_INT 2
7539: DOUBLE
7540: EQUAL
7541: IFTRUE 7545
7543: GO 8351
7545: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7546: LD_VAR 0 6
7550: PPUSH
7551: CALL_OW 264
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: LD_INT 42
7561: PUSH
7562: LD_INT 24
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: IN
7570: IFFALSE 7591
// points := [ 25 , 5 , 3 ] ;
7572: LD_ADDR_VAR 0 9
7576: PUSH
7577: LD_INT 25
7579: PUSH
7580: LD_INT 5
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 264
7600: PUSH
7601: LD_INT 4
7603: PUSH
7604: LD_INT 43
7606: PUSH
7607: LD_INT 25
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: IN
7615: IFFALSE 7636
// points := [ 40 , 15 , 5 ] ;
7617: LD_ADDR_VAR 0 9
7621: PUSH
7622: LD_INT 40
7624: PUSH
7625: LD_INT 15
7627: PUSH
7628: LD_INT 5
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7636: LD_VAR 0 6
7640: PPUSH
7641: CALL_OW 264
7645: PUSH
7646: LD_INT 3
7648: PUSH
7649: LD_INT 23
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: IN
7656: IFFALSE 7677
// points := [ 7 , 25 , 8 ] ;
7658: LD_ADDR_VAR 0 9
7662: PUSH
7663: LD_INT 7
7665: PUSH
7666: LD_INT 25
7668: PUSH
7669: LD_INT 8
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7677: LD_VAR 0 6
7681: PPUSH
7682: CALL_OW 264
7686: PUSH
7687: LD_INT 5
7689: PUSH
7690: LD_INT 27
7692: PUSH
7693: LD_INT 44
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: IN
7701: IFFALSE 7722
// points := [ 14 , 50 , 16 ] ;
7703: LD_ADDR_VAR 0 9
7707: PUSH
7708: LD_INT 14
7710: PUSH
7711: LD_INT 50
7713: PUSH
7714: LD_INT 16
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7722: LD_VAR 0 6
7726: PPUSH
7727: CALL_OW 264
7731: PUSH
7732: LD_INT 6
7734: PUSH
7735: LD_INT 46
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: IN
7742: IFFALSE 7763
// points := [ 32 , 120 , 70 ] ;
7744: LD_ADDR_VAR 0 9
7748: PUSH
7749: LD_INT 32
7751: PUSH
7752: LD_INT 120
7754: PUSH
7755: LD_INT 70
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7763: LD_VAR 0 6
7767: PPUSH
7768: CALL_OW 264
7772: PUSH
7773: LD_INT 7
7775: PUSH
7776: LD_INT 28
7778: PUSH
7779: LD_INT 45
7781: PUSH
7782: LD_INT 92
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: IN
7791: IFFALSE 7812
// points := [ 35 , 20 , 45 ] ;
7793: LD_ADDR_VAR 0 9
7797: PUSH
7798: LD_INT 35
7800: PUSH
7801: LD_INT 20
7803: PUSH
7804: LD_INT 45
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7812: LD_VAR 0 6
7816: PPUSH
7817: CALL_OW 264
7821: PUSH
7822: LD_INT 47
7824: PUSH
7825: EMPTY
7826: LIST
7827: IN
7828: IFFALSE 7849
// points := [ 67 , 45 , 75 ] ;
7830: LD_ADDR_VAR 0 9
7834: PUSH
7835: LD_INT 67
7837: PUSH
7838: LD_INT 45
7840: PUSH
7841: LD_INT 75
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7849: LD_VAR 0 6
7853: PPUSH
7854: CALL_OW 264
7858: PUSH
7859: LD_INT 26
7861: PUSH
7862: EMPTY
7863: LIST
7864: IN
7865: IFFALSE 7886
// points := [ 120 , 30 , 80 ] ;
7867: LD_ADDR_VAR 0 9
7871: PUSH
7872: LD_INT 120
7874: PUSH
7875: LD_INT 30
7877: PUSH
7878: LD_INT 80
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7886: LD_VAR 0 6
7890: PPUSH
7891: CALL_OW 264
7895: PUSH
7896: LD_INT 22
7898: PUSH
7899: EMPTY
7900: LIST
7901: IN
7902: IFFALSE 7923
// points := [ 40 , 1 , 1 ] ;
7904: LD_ADDR_VAR 0 9
7908: PUSH
7909: LD_INT 40
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: LIST
7922: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7923: LD_VAR 0 6
7927: PPUSH
7928: CALL_OW 264
7932: PUSH
7933: LD_INT 29
7935: PUSH
7936: EMPTY
7937: LIST
7938: IN
7939: IFFALSE 7960
// points := [ 70 , 200 , 400 ] ;
7941: LD_ADDR_VAR 0 9
7945: PUSH
7946: LD_INT 70
7948: PUSH
7949: LD_INT 200
7951: PUSH
7952: LD_INT 400
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7960: LD_VAR 0 6
7964: PPUSH
7965: CALL_OW 264
7969: PUSH
7970: LD_INT 14
7972: PUSH
7973: LD_INT 53
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: IN
7980: IFFALSE 8001
// points := [ 40 , 10 , 20 ] ;
7982: LD_ADDR_VAR 0 9
7986: PUSH
7987: LD_INT 40
7989: PUSH
7990: LD_INT 10
7992: PUSH
7993: LD_INT 20
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 264
8010: PUSH
8011: LD_INT 9
8013: PUSH
8014: EMPTY
8015: LIST
8016: IN
8017: IFFALSE 8038
// points := [ 5 , 70 , 20 ] ;
8019: LD_ADDR_VAR 0 9
8023: PUSH
8024: LD_INT 5
8026: PUSH
8027: LD_INT 70
8029: PUSH
8030: LD_INT 20
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8038: LD_VAR 0 6
8042: PPUSH
8043: CALL_OW 264
8047: PUSH
8048: LD_INT 10
8050: PUSH
8051: EMPTY
8052: LIST
8053: IN
8054: IFFALSE 8075
// points := [ 35 , 110 , 70 ] ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_INT 35
8063: PUSH
8064: LD_INT 110
8066: PUSH
8067: LD_INT 70
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8075: LD_VAR 0 6
8079: PPUSH
8080: CALL_OW 265
8084: PUSH
8085: LD_INT 25
8087: EQUAL
8088: IFFALSE 8109
// points := [ 80 , 65 , 100 ] ;
8090: LD_ADDR_VAR 0 9
8094: PUSH
8095: LD_INT 80
8097: PUSH
8098: LD_INT 65
8100: PUSH
8101: LD_INT 100
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8109: LD_VAR 0 6
8113: PPUSH
8114: CALL_OW 263
8118: PUSH
8119: LD_INT 1
8121: EQUAL
8122: IFFALSE 8157
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8124: LD_ADDR_VAR 0 10
8128: PUSH
8129: LD_VAR 0 10
8133: PUSH
8134: LD_VAR 0 6
8138: PPUSH
8139: CALL_OW 311
8143: PPUSH
8144: LD_INT 3
8146: PPUSH
8147: CALL_OW 259
8151: PUSH
8152: LD_INT 4
8154: MUL
8155: MUL
8156: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8157: LD_VAR 0 6
8161: PPUSH
8162: CALL_OW 263
8166: PUSH
8167: LD_INT 2
8169: EQUAL
8170: IFFALSE 8221
// begin j := IsControledBy ( i ) ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_VAR 0 6
8181: PPUSH
8182: CALL_OW 312
8186: ST_TO_ADDR
// if j then
8187: LD_VAR 0 7
8191: IFFALSE 8221
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8193: LD_ADDR_VAR 0 10
8197: PUSH
8198: LD_VAR 0 10
8202: PUSH
8203: LD_VAR 0 7
8207: PPUSH
8208: LD_INT 3
8210: PPUSH
8211: CALL_OW 259
8215: PUSH
8216: LD_INT 3
8218: MUL
8219: MUL
8220: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8221: LD_VAR 0 6
8225: PPUSH
8226: CALL_OW 264
8230: PUSH
8231: LD_INT 5
8233: PUSH
8234: LD_INT 6
8236: PUSH
8237: LD_INT 46
8239: PUSH
8240: LD_INT 44
8242: PUSH
8243: LD_INT 47
8245: PUSH
8246: LD_INT 45
8248: PUSH
8249: LD_INT 28
8251: PUSH
8252: LD_INT 7
8254: PUSH
8255: LD_INT 27
8257: PUSH
8258: LD_INT 29
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: IN
8273: PUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: LD_INT 52
8281: PPUSH
8282: CALL_OW 321
8286: PUSH
8287: LD_INT 2
8289: EQUAL
8290: AND
8291: IFFALSE 8308
// bpoints := bpoints * 1.2 ;
8293: LD_ADDR_VAR 0 10
8297: PUSH
8298: LD_VAR 0 10
8302: PUSH
8303: LD_REAL  1.20000000000000E+0000
8306: MUL
8307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8308: LD_VAR 0 6
8312: PPUSH
8313: CALL_OW 264
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 46
8323: PUSH
8324: LD_INT 47
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: LIST
8331: IN
8332: IFFALSE 8349
// bpoints := bpoints * 1.2 ;
8334: LD_ADDR_VAR 0 10
8338: PUSH
8339: LD_VAR 0 10
8343: PUSH
8344: LD_REAL  1.20000000000000E+0000
8347: MUL
8348: ST_TO_ADDR
// end ; unit_building :
8349: GO 8363
8351: LD_INT 3
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8362
8359: POP
// ; end ;
8360: GO 8363
8362: POP
// for j = 1 to 3 do
8363: LD_ADDR_VAR 0 7
8367: PUSH
8368: DOUBLE
8369: LD_INT 1
8371: DEC
8372: ST_TO_ADDR
8373: LD_INT 3
8375: PUSH
8376: FOR_TO
8377: IFFALSE 8430
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8379: LD_ADDR_VAR 0 5
8383: PUSH
8384: LD_VAR 0 5
8388: PPUSH
8389: LD_VAR 0 7
8393: PPUSH
8394: LD_VAR 0 5
8398: PUSH
8399: LD_VAR 0 7
8403: ARRAY
8404: PUSH
8405: LD_VAR 0 9
8409: PUSH
8410: LD_VAR 0 7
8414: ARRAY
8415: PUSH
8416: LD_VAR 0 10
8420: MUL
8421: PLUS
8422: PPUSH
8423: CALL_OW 1
8427: ST_TO_ADDR
8428: GO 8376
8430: POP
8431: POP
// end ;
8432: GO 6911
8434: POP
8435: POP
// result := Replace ( result , 4 , tmp ) ;
8436: LD_ADDR_VAR 0 5
8440: PUSH
8441: LD_VAR 0 5
8445: PPUSH
8446: LD_INT 4
8448: PPUSH
8449: LD_VAR 0 8
8453: PPUSH
8454: CALL_OW 1
8458: ST_TO_ADDR
// end ;
8459: LD_VAR 0 5
8463: RET
// export function DangerAtRange ( unit , range ) ; begin
8464: LD_INT 0
8466: PPUSH
// if not unit then
8467: LD_VAR 0 1
8471: NOT
8472: IFFALSE 8476
// exit ;
8474: GO 8521
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8476: LD_ADDR_VAR 0 3
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 255
8490: PPUSH
8491: LD_VAR 0 1
8495: PPUSH
8496: CALL_OW 250
8500: PPUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 251
8510: PPUSH
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL 6763 0 4
8520: ST_TO_ADDR
// end ;
8521: LD_VAR 0 3
8525: RET
// export function DangerInArea ( side , area ) ; begin
8526: LD_INT 0
8528: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8529: LD_ADDR_VAR 0 3
8533: PUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: LD_INT 81
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 70
8555: ST_TO_ADDR
// end ;
8556: LD_VAR 0 3
8560: RET
// export function IsExtension ( b ) ; begin
8561: LD_INT 0
8563: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_VAR 0 1
8573: PUSH
8574: LD_INT 23
8576: PUSH
8577: LD_INT 20
8579: PUSH
8580: LD_INT 22
8582: PUSH
8583: LD_INT 17
8585: PUSH
8586: LD_INT 24
8588: PUSH
8589: LD_INT 21
8591: PUSH
8592: LD_INT 19
8594: PUSH
8595: LD_INT 16
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 18
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: IN
8616: ST_TO_ADDR
// end ;
8617: LD_VAR 0 2
8621: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
8626: PPUSH
// result := [ ] ;
8627: LD_ADDR_VAR 0 4
8631: PUSH
8632: EMPTY
8633: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8634: LD_ADDR_VAR 0 5
8638: PUSH
8639: LD_VAR 0 2
8643: PPUSH
8644: LD_INT 21
8646: PUSH
8647: LD_INT 3
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 70
8658: ST_TO_ADDR
// if not tmp then
8659: LD_VAR 0 5
8663: NOT
8664: IFFALSE 8668
// exit ;
8666: GO 8732
// if checkLink then
8668: LD_VAR 0 3
8672: IFFALSE 8722
// begin for i in tmp do
8674: LD_ADDR_VAR 0 6
8678: PUSH
8679: LD_VAR 0 5
8683: PUSH
8684: FOR_IN
8685: IFFALSE 8720
// if GetBase ( i ) <> base then
8687: LD_VAR 0 6
8691: PPUSH
8692: CALL_OW 274
8696: PUSH
8697: LD_VAR 0 1
8701: NONEQUAL
8702: IFFALSE 8718
// ComLinkToBase ( base , i ) ;
8704: LD_VAR 0 1
8708: PPUSH
8709: LD_VAR 0 6
8713: PPUSH
8714: CALL_OW 169
8718: GO 8684
8720: POP
8721: POP
// end ; result := tmp ;
8722: LD_ADDR_VAR 0 4
8726: PUSH
8727: LD_VAR 0 5
8731: ST_TO_ADDR
// end ;
8732: LD_VAR 0 4
8736: RET
// export function ComComplete ( units , b ) ; var i ; begin
8737: LD_INT 0
8739: PPUSH
8740: PPUSH
// if not units then
8741: LD_VAR 0 1
8745: NOT
8746: IFFALSE 8750
// exit ;
8748: GO 8840
// for i in units do
8750: LD_ADDR_VAR 0 4
8754: PUSH
8755: LD_VAR 0 1
8759: PUSH
8760: FOR_IN
8761: IFFALSE 8838
// if BuildingStatus ( b ) = bs_build then
8763: LD_VAR 0 2
8767: PPUSH
8768: CALL_OW 461
8772: PUSH
8773: LD_INT 1
8775: EQUAL
8776: IFFALSE 8836
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8778: LD_VAR 0 4
8782: PPUSH
8783: LD_STRING h
8785: PUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 250
8795: PUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 251
8805: PUSH
8806: LD_VAR 0 2
8810: PUSH
8811: LD_INT 0
8813: PUSH
8814: LD_INT 0
8816: PUSH
8817: LD_INT 0
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: PPUSH
8832: CALL_OW 446
8836: GO 8760
8838: POP
8839: POP
// end ;
8840: LD_VAR 0 3
8844: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8853: LD_VAR 0 1
8857: NOT
8858: PUSH
8859: LD_VAR 0 1
8863: PPUSH
8864: CALL_OW 263
8868: PUSH
8869: LD_INT 2
8871: NONEQUAL
8872: OR
8873: IFFALSE 8877
// exit ;
8875: GO 9193
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8877: LD_ADDR_VAR 0 6
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 255
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: LD_INT 30
8904: PUSH
8905: LD_INT 36
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 34
8914: PUSH
8915: LD_INT 31
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: ST_TO_ADDR
// if not tmp then
8936: LD_VAR 0 6
8940: NOT
8941: IFFALSE 8945
// exit ;
8943: GO 9193
// result := [ ] ;
8945: LD_ADDR_VAR 0 2
8949: PUSH
8950: EMPTY
8951: ST_TO_ADDR
// for i in tmp do
8952: LD_ADDR_VAR 0 3
8956: PUSH
8957: LD_VAR 0 6
8961: PUSH
8962: FOR_IN
8963: IFFALSE 9034
// begin t := UnitsInside ( i ) ;
8965: LD_ADDR_VAR 0 4
8969: PUSH
8970: LD_VAR 0 3
8974: PPUSH
8975: CALL_OW 313
8979: ST_TO_ADDR
// if t then
8980: LD_VAR 0 4
8984: IFFALSE 9032
// for j in t do
8986: LD_ADDR_VAR 0 7
8990: PUSH
8991: LD_VAR 0 4
8995: PUSH
8996: FOR_IN
8997: IFFALSE 9030
// result := Replace ( result , result + 1 , j ) ;
8999: LD_ADDR_VAR 0 2
9003: PUSH
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: PLUS
9017: PPUSH
9018: LD_VAR 0 7
9022: PPUSH
9023: CALL_OW 1
9027: ST_TO_ADDR
9028: GO 8996
9030: POP
9031: POP
// end ;
9032: GO 8962
9034: POP
9035: POP
// if not result then
9036: LD_VAR 0 2
9040: NOT
9041: IFFALSE 9045
// exit ;
9043: GO 9193
// mech := result [ 1 ] ;
9045: LD_ADDR_VAR 0 5
9049: PUSH
9050: LD_VAR 0 2
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: ST_TO_ADDR
// if result > 1 then
9059: LD_VAR 0 2
9063: PUSH
9064: LD_INT 1
9066: GREATER
9067: IFFALSE 9179
// begin for i = 2 to result do
9069: LD_ADDR_VAR 0 3
9073: PUSH
9074: DOUBLE
9075: LD_INT 2
9077: DEC
9078: ST_TO_ADDR
9079: LD_VAR 0 2
9083: PUSH
9084: FOR_TO
9085: IFFALSE 9177
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9087: LD_ADDR_VAR 0 4
9091: PUSH
9092: LD_VAR 0 2
9096: PUSH
9097: LD_VAR 0 3
9101: ARRAY
9102: PPUSH
9103: LD_INT 3
9105: PPUSH
9106: CALL_OW 259
9110: PUSH
9111: LD_VAR 0 2
9115: PUSH
9116: LD_VAR 0 3
9120: ARRAY
9121: PPUSH
9122: CALL_OW 432
9126: MINUS
9127: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9128: LD_VAR 0 4
9132: PUSH
9133: LD_VAR 0 5
9137: PPUSH
9138: LD_INT 3
9140: PPUSH
9141: CALL_OW 259
9145: PUSH
9146: LD_VAR 0 5
9150: PPUSH
9151: CALL_OW 432
9155: MINUS
9156: GREATEREQUAL
9157: IFFALSE 9175
// mech := result [ i ] ;
9159: LD_ADDR_VAR 0 5
9163: PUSH
9164: LD_VAR 0 2
9168: PUSH
9169: LD_VAR 0 3
9173: ARRAY
9174: ST_TO_ADDR
// end ;
9175: GO 9084
9177: POP
9178: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9179: LD_VAR 0 1
9183: PPUSH
9184: LD_VAR 0 5
9188: PPUSH
9189: CALL_OW 135
// end ;
9193: LD_VAR 0 2
9197: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9198: LD_INT 0
9200: PPUSH
9201: PPUSH
9202: PPUSH
9203: PPUSH
9204: PPUSH
9205: PPUSH
9206: PPUSH
9207: PPUSH
9208: PPUSH
9209: PPUSH
9210: PPUSH
9211: PPUSH
9212: PPUSH
// result := [ ] ;
9213: LD_ADDR_VAR 0 7
9217: PUSH
9218: EMPTY
9219: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9220: LD_VAR 0 1
9224: PPUSH
9225: CALL_OW 266
9229: PUSH
9230: LD_INT 0
9232: PUSH
9233: LD_INT 1
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: IN
9240: NOT
9241: IFFALSE 9245
// exit ;
9243: GO 10879
// if name then
9245: LD_VAR 0 3
9249: IFFALSE 9265
// SetBName ( base_dep , name ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: CALL_OW 500
// base := GetBase ( base_dep ) ;
9265: LD_ADDR_VAR 0 15
9269: PUSH
9270: LD_VAR 0 1
9274: PPUSH
9275: CALL_OW 274
9279: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9280: LD_ADDR_VAR 0 16
9284: PUSH
9285: LD_VAR 0 1
9289: PPUSH
9290: CALL_OW 255
9294: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9295: LD_ADDR_VAR 0 17
9299: PUSH
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL_OW 248
9309: ST_TO_ADDR
// if sources then
9310: LD_VAR 0 5
9314: IFFALSE 9361
// for i = 1 to 3 do
9316: LD_ADDR_VAR 0 8
9320: PUSH
9321: DOUBLE
9322: LD_INT 1
9324: DEC
9325: ST_TO_ADDR
9326: LD_INT 3
9328: PUSH
9329: FOR_TO
9330: IFFALSE 9359
// AddResourceType ( base , i , sources [ i ] ) ;
9332: LD_VAR 0 15
9336: PPUSH
9337: LD_VAR 0 8
9341: PPUSH
9342: LD_VAR 0 5
9346: PUSH
9347: LD_VAR 0 8
9351: ARRAY
9352: PPUSH
9353: CALL_OW 276
9357: GO 9329
9359: POP
9360: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9361: LD_ADDR_VAR 0 18
9365: PUSH
9366: LD_VAR 0 15
9370: PPUSH
9371: LD_VAR 0 2
9375: PPUSH
9376: LD_INT 1
9378: PPUSH
9379: CALL 8622 0 3
9383: ST_TO_ADDR
// InitHc ;
9384: CALL_OW 19
// InitUc ;
9388: CALL_OW 18
// uc_side := side ;
9392: LD_ADDR_OWVAR 20
9396: PUSH
9397: LD_VAR 0 16
9401: ST_TO_ADDR
// uc_nation := nation ;
9402: LD_ADDR_OWVAR 21
9406: PUSH
9407: LD_VAR 0 17
9411: ST_TO_ADDR
// if buildings then
9412: LD_VAR 0 18
9416: IFFALSE 10738
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9418: LD_ADDR_VAR 0 19
9422: PUSH
9423: LD_VAR 0 18
9427: PPUSH
9428: LD_INT 2
9430: PUSH
9431: LD_INT 30
9433: PUSH
9434: LD_INT 29
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 30
9443: PUSH
9444: LD_INT 30
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: PPUSH
9456: CALL_OW 72
9460: ST_TO_ADDR
// if tmp then
9461: LD_VAR 0 19
9465: IFFALSE 9513
// for i in tmp do
9467: LD_ADDR_VAR 0 8
9471: PUSH
9472: LD_VAR 0 19
9476: PUSH
9477: FOR_IN
9478: IFFALSE 9511
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9480: LD_VAR 0 8
9484: PPUSH
9485: CALL_OW 250
9489: PPUSH
9490: LD_VAR 0 8
9494: PPUSH
9495: CALL_OW 251
9499: PPUSH
9500: LD_VAR 0 16
9504: PPUSH
9505: CALL_OW 441
9509: GO 9477
9511: POP
9512: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9513: LD_VAR 0 18
9517: PPUSH
9518: LD_INT 2
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: LD_INT 32
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 30
9533: PUSH
9534: LD_INT 33
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 72
9550: IFFALSE 9638
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9552: LD_ADDR_VAR 0 8
9556: PUSH
9557: LD_VAR 0 18
9561: PPUSH
9562: LD_INT 2
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 32
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 30
9577: PUSH
9578: LD_INT 33
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 72
9594: PUSH
9595: FOR_IN
9596: IFFALSE 9636
// begin if not GetBWeapon ( i ) then
9598: LD_VAR 0 8
9602: PPUSH
9603: CALL_OW 269
9607: NOT
9608: IFFALSE 9634
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9610: LD_VAR 0 8
9614: PPUSH
9615: LD_VAR 0 8
9619: PPUSH
9620: LD_VAR 0 2
9624: PPUSH
9625: CALL 10884 0 2
9629: PPUSH
9630: CALL_OW 431
// end ;
9634: GO 9595
9636: POP
9637: POP
// end ; for i = 1 to personel do
9638: LD_ADDR_VAR 0 8
9642: PUSH
9643: DOUBLE
9644: LD_INT 1
9646: DEC
9647: ST_TO_ADDR
9648: LD_VAR 0 6
9652: PUSH
9653: FOR_TO
9654: IFFALSE 10718
// begin if i > 4 then
9656: LD_VAR 0 8
9660: PUSH
9661: LD_INT 4
9663: GREATER
9664: IFFALSE 9668
// break ;
9666: GO 10718
// case i of 1 :
9668: LD_VAR 0 8
9672: PUSH
9673: LD_INT 1
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9761
9681: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9682: LD_ADDR_VAR 0 12
9686: PUSH
9687: LD_VAR 0 18
9691: PPUSH
9692: LD_INT 22
9694: PUSH
9695: LD_VAR 0 16
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 58
9706: PUSH
9707: EMPTY
9708: LIST
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: LD_INT 30
9715: PUSH
9716: LD_INT 32
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 30
9725: PUSH
9726: LD_INT 4
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 30
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 72
9758: ST_TO_ADDR
9759: GO 9983
9761: LD_INT 2
9763: DOUBLE
9764: EQUAL
9765: IFTRUE 9769
9767: GO 9831
9769: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9770: LD_ADDR_VAR 0 12
9774: PUSH
9775: LD_VAR 0 18
9779: PPUSH
9780: LD_INT 22
9782: PUSH
9783: LD_VAR 0 16
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 30
9797: PUSH
9798: LD_INT 0
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 30
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PPUSH
9824: CALL_OW 72
9828: ST_TO_ADDR
9829: GO 9983
9831: LD_INT 3
9833: DOUBLE
9834: EQUAL
9835: IFTRUE 9839
9837: GO 9901
9839: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9840: LD_ADDR_VAR 0 12
9844: PUSH
9845: LD_VAR 0 18
9849: PPUSH
9850: LD_INT 22
9852: PUSH
9853: LD_VAR 0 16
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: LD_INT 30
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 30
9877: PUSH
9878: LD_INT 3
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 72
9898: ST_TO_ADDR
9899: GO 9983
9901: LD_INT 4
9903: DOUBLE
9904: EQUAL
9905: IFTRUE 9909
9907: GO 9982
9909: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9910: LD_ADDR_VAR 0 12
9914: PUSH
9915: LD_VAR 0 18
9919: PPUSH
9920: LD_INT 22
9922: PUSH
9923: LD_VAR 0 16
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 2
9934: PUSH
9935: LD_INT 30
9937: PUSH
9938: LD_INT 6
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 30
9947: PUSH
9948: LD_INT 7
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 30
9957: PUSH
9958: LD_INT 8
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 72
9979: ST_TO_ADDR
9980: GO 9983
9982: POP
// if i = 1 then
9983: LD_VAR 0 8
9987: PUSH
9988: LD_INT 1
9990: EQUAL
9991: IFFALSE 10102
// begin tmp := [ ] ;
9993: LD_ADDR_VAR 0 19
9997: PUSH
9998: EMPTY
9999: ST_TO_ADDR
// for j in f do
10000: LD_ADDR_VAR 0 9
10004: PUSH
10005: LD_VAR 0 12
10009: PUSH
10010: FOR_IN
10011: IFFALSE 10084
// if GetBType ( j ) = b_bunker then
10013: LD_VAR 0 9
10017: PPUSH
10018: CALL_OW 266
10022: PUSH
10023: LD_INT 32
10025: EQUAL
10026: IFFALSE 10053
// tmp := Insert ( tmp , 1 , j ) else
10028: LD_ADDR_VAR 0 19
10032: PUSH
10033: LD_VAR 0 19
10037: PPUSH
10038: LD_INT 1
10040: PPUSH
10041: LD_VAR 0 9
10045: PPUSH
10046: CALL_OW 2
10050: ST_TO_ADDR
10051: GO 10082
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10053: LD_ADDR_VAR 0 19
10057: PUSH
10058: LD_VAR 0 19
10062: PPUSH
10063: LD_VAR 0 19
10067: PUSH
10068: LD_INT 1
10070: PLUS
10071: PPUSH
10072: LD_VAR 0 9
10076: PPUSH
10077: CALL_OW 2
10081: ST_TO_ADDR
10082: GO 10010
10084: POP
10085: POP
// if tmp then
10086: LD_VAR 0 19
10090: IFFALSE 10102
// f := tmp ;
10092: LD_ADDR_VAR 0 12
10096: PUSH
10097: LD_VAR 0 19
10101: ST_TO_ADDR
// end ; x := personel [ i ] ;
10102: LD_ADDR_VAR 0 13
10106: PUSH
10107: LD_VAR 0 6
10111: PUSH
10112: LD_VAR 0 8
10116: ARRAY
10117: ST_TO_ADDR
// if x = - 1 then
10118: LD_VAR 0 13
10122: PUSH
10123: LD_INT 1
10125: NEG
10126: EQUAL
10127: IFFALSE 10336
// begin for j in f do
10129: LD_ADDR_VAR 0 9
10133: PUSH
10134: LD_VAR 0 12
10138: PUSH
10139: FOR_IN
10140: IFFALSE 10332
// repeat InitHc ;
10142: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10146: LD_VAR 0 9
10150: PPUSH
10151: CALL_OW 266
10155: PUSH
10156: LD_INT 5
10158: EQUAL
10159: IFFALSE 10229
// begin if UnitsInside ( j ) < 3 then
10161: LD_VAR 0 9
10165: PPUSH
10166: CALL_OW 313
10170: PUSH
10171: LD_INT 3
10173: LESS
10174: IFFALSE 10210
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10176: LD_INT 0
10178: PPUSH
10179: LD_INT 5
10181: PUSH
10182: LD_INT 8
10184: PUSH
10185: LD_INT 9
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_VAR 0 17
10197: ARRAY
10198: PPUSH
10199: LD_VAR 0 4
10203: PPUSH
10204: CALL_OW 380
10208: GO 10227
// PrepareHuman ( false , i , skill ) ;
10210: LD_INT 0
10212: PPUSH
10213: LD_VAR 0 8
10217: PPUSH
10218: LD_VAR 0 4
10222: PPUSH
10223: CALL_OW 380
// end else
10227: GO 10246
// PrepareHuman ( false , i , skill ) ;
10229: LD_INT 0
10231: PPUSH
10232: LD_VAR 0 8
10236: PPUSH
10237: LD_VAR 0 4
10241: PPUSH
10242: CALL_OW 380
// un := CreateHuman ;
10246: LD_ADDR_VAR 0 14
10250: PUSH
10251: CALL_OW 44
10255: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10256: LD_ADDR_VAR 0 7
10260: PUSH
10261: LD_VAR 0 7
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: LD_VAR 0 14
10273: PPUSH
10274: CALL_OW 2
10278: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10279: LD_VAR 0 14
10283: PPUSH
10284: LD_VAR 0 9
10288: PPUSH
10289: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10293: LD_VAR 0 9
10297: PPUSH
10298: CALL_OW 313
10302: PUSH
10303: LD_INT 6
10305: EQUAL
10306: PUSH
10307: LD_VAR 0 9
10311: PPUSH
10312: CALL_OW 266
10316: PUSH
10317: LD_INT 32
10319: PUSH
10320: LD_INT 31
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: IN
10327: OR
10328: IFFALSE 10142
10330: GO 10139
10332: POP
10333: POP
// end else
10334: GO 10716
// for j = 1 to x do
10336: LD_ADDR_VAR 0 9
10340: PUSH
10341: DOUBLE
10342: LD_INT 1
10344: DEC
10345: ST_TO_ADDR
10346: LD_VAR 0 13
10350: PUSH
10351: FOR_TO
10352: IFFALSE 10714
// begin InitHc ;
10354: CALL_OW 19
// if not f then
10358: LD_VAR 0 12
10362: NOT
10363: IFFALSE 10452
// begin PrepareHuman ( false , i , skill ) ;
10365: LD_INT 0
10367: PPUSH
10368: LD_VAR 0 8
10372: PPUSH
10373: LD_VAR 0 4
10377: PPUSH
10378: CALL_OW 380
// un := CreateHuman ;
10382: LD_ADDR_VAR 0 14
10386: PUSH
10387: CALL_OW 44
10391: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10392: LD_ADDR_VAR 0 7
10396: PUSH
10397: LD_VAR 0 7
10401: PPUSH
10402: LD_INT 1
10404: PPUSH
10405: LD_VAR 0 14
10409: PPUSH
10410: CALL_OW 2
10414: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10415: LD_VAR 0 14
10419: PPUSH
10420: LD_VAR 0 1
10424: PPUSH
10425: CALL_OW 250
10429: PPUSH
10430: LD_VAR 0 1
10434: PPUSH
10435: CALL_OW 251
10439: PPUSH
10440: LD_INT 10
10442: PPUSH
10443: LD_INT 0
10445: PPUSH
10446: CALL_OW 50
// continue ;
10450: GO 10351
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10452: LD_VAR 0 12
10456: PUSH
10457: LD_INT 1
10459: ARRAY
10460: PPUSH
10461: CALL_OW 313
10465: PUSH
10466: LD_VAR 0 12
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PPUSH
10475: CALL_OW 266
10479: PUSH
10480: LD_INT 32
10482: PUSH
10483: LD_INT 31
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: IN
10490: AND
10491: PUSH
10492: LD_VAR 0 12
10496: PUSH
10497: LD_INT 1
10499: ARRAY
10500: PPUSH
10501: CALL_OW 313
10505: PUSH
10506: LD_INT 6
10508: EQUAL
10509: OR
10510: IFFALSE 10530
// f := Delete ( f , 1 ) ;
10512: LD_ADDR_VAR 0 12
10516: PUSH
10517: LD_VAR 0 12
10521: PPUSH
10522: LD_INT 1
10524: PPUSH
10525: CALL_OW 3
10529: ST_TO_ADDR
// if not f then
10530: LD_VAR 0 12
10534: NOT
10535: IFFALSE 10553
// begin x := x + 2 ;
10537: LD_ADDR_VAR 0 13
10541: PUSH
10542: LD_VAR 0 13
10546: PUSH
10547: LD_INT 2
10549: PLUS
10550: ST_TO_ADDR
// continue ;
10551: GO 10351
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10553: LD_VAR 0 12
10557: PUSH
10558: LD_INT 1
10560: ARRAY
10561: PPUSH
10562: CALL_OW 266
10566: PUSH
10567: LD_INT 5
10569: EQUAL
10570: IFFALSE 10644
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10572: LD_VAR 0 12
10576: PUSH
10577: LD_INT 1
10579: ARRAY
10580: PPUSH
10581: CALL_OW 313
10585: PUSH
10586: LD_INT 3
10588: LESS
10589: IFFALSE 10625
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10591: LD_INT 0
10593: PPUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 8
10599: PUSH
10600: LD_INT 9
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: PUSH
10608: LD_VAR 0 17
10612: ARRAY
10613: PPUSH
10614: LD_VAR 0 4
10618: PPUSH
10619: CALL_OW 380
10623: GO 10642
// PrepareHuman ( false , i , skill ) ;
10625: LD_INT 0
10627: PPUSH
10628: LD_VAR 0 8
10632: PPUSH
10633: LD_VAR 0 4
10637: PPUSH
10638: CALL_OW 380
// end else
10642: GO 10661
// PrepareHuman ( false , i , skill ) ;
10644: LD_INT 0
10646: PPUSH
10647: LD_VAR 0 8
10651: PPUSH
10652: LD_VAR 0 4
10656: PPUSH
10657: CALL_OW 380
// un := CreateHuman ;
10661: LD_ADDR_VAR 0 14
10665: PUSH
10666: CALL_OW 44
10670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10671: LD_ADDR_VAR 0 7
10675: PUSH
10676: LD_VAR 0 7
10680: PPUSH
10681: LD_INT 1
10683: PPUSH
10684: LD_VAR 0 14
10688: PPUSH
10689: CALL_OW 2
10693: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10694: LD_VAR 0 14
10698: PPUSH
10699: LD_VAR 0 12
10703: PUSH
10704: LD_INT 1
10706: ARRAY
10707: PPUSH
10708: CALL_OW 52
// end ;
10712: GO 10351
10714: POP
10715: POP
// end ;
10716: GO 9653
10718: POP
10719: POP
// result := result ^ buildings ;
10720: LD_ADDR_VAR 0 7
10724: PUSH
10725: LD_VAR 0 7
10729: PUSH
10730: LD_VAR 0 18
10734: ADD
10735: ST_TO_ADDR
// end else
10736: GO 10879
// begin for i = 1 to personel do
10738: LD_ADDR_VAR 0 8
10742: PUSH
10743: DOUBLE
10744: LD_INT 1
10746: DEC
10747: ST_TO_ADDR
10748: LD_VAR 0 6
10752: PUSH
10753: FOR_TO
10754: IFFALSE 10877
// begin if i > 4 then
10756: LD_VAR 0 8
10760: PUSH
10761: LD_INT 4
10763: GREATER
10764: IFFALSE 10768
// break ;
10766: GO 10877
// x := personel [ i ] ;
10768: LD_ADDR_VAR 0 13
10772: PUSH
10773: LD_VAR 0 6
10777: PUSH
10778: LD_VAR 0 8
10782: ARRAY
10783: ST_TO_ADDR
// if x = - 1 then
10784: LD_VAR 0 13
10788: PUSH
10789: LD_INT 1
10791: NEG
10792: EQUAL
10793: IFFALSE 10797
// continue ;
10795: GO 10753
// PrepareHuman ( false , i , skill ) ;
10797: LD_INT 0
10799: PPUSH
10800: LD_VAR 0 8
10804: PPUSH
10805: LD_VAR 0 4
10809: PPUSH
10810: CALL_OW 380
// un := CreateHuman ;
10814: LD_ADDR_VAR 0 14
10818: PUSH
10819: CALL_OW 44
10823: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10824: LD_VAR 0 14
10828: PPUSH
10829: LD_VAR 0 1
10833: PPUSH
10834: CALL_OW 250
10838: PPUSH
10839: LD_VAR 0 1
10843: PPUSH
10844: CALL_OW 251
10848: PPUSH
10849: LD_INT 10
10851: PPUSH
10852: LD_INT 0
10854: PPUSH
10855: CALL_OW 50
// result := result ^ un ;
10859: LD_ADDR_VAR 0 7
10863: PUSH
10864: LD_VAR 0 7
10868: PUSH
10869: LD_VAR 0 14
10873: ADD
10874: ST_TO_ADDR
// end ;
10875: GO 10753
10877: POP
10878: POP
// end ; end ;
10879: LD_VAR 0 7
10883: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10884: LD_INT 0
10886: PPUSH
10887: PPUSH
10888: PPUSH
10889: PPUSH
10890: PPUSH
10891: PPUSH
10892: PPUSH
10893: PPUSH
10894: PPUSH
10895: PPUSH
10896: PPUSH
10897: PPUSH
10898: PPUSH
10899: PPUSH
10900: PPUSH
10901: PPUSH
// result := false ;
10902: LD_ADDR_VAR 0 3
10906: PUSH
10907: LD_INT 0
10909: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10910: LD_VAR 0 1
10914: NOT
10915: PUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: CALL_OW 266
10925: PUSH
10926: LD_INT 32
10928: PUSH
10929: LD_INT 33
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: IN
10936: NOT
10937: OR
10938: IFFALSE 10942
// exit ;
10940: GO 12051
// nat := GetNation ( tower ) ;
10942: LD_ADDR_VAR 0 12
10946: PUSH
10947: LD_VAR 0 1
10951: PPUSH
10952: CALL_OW 248
10956: ST_TO_ADDR
// side := GetSide ( tower ) ;
10957: LD_ADDR_VAR 0 16
10961: PUSH
10962: LD_VAR 0 1
10966: PPUSH
10967: CALL_OW 255
10971: ST_TO_ADDR
// x := GetX ( tower ) ;
10972: LD_ADDR_VAR 0 10
10976: PUSH
10977: LD_VAR 0 1
10981: PPUSH
10982: CALL_OW 250
10986: ST_TO_ADDR
// y := GetY ( tower ) ;
10987: LD_ADDR_VAR 0 11
10991: PUSH
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 251
11001: ST_TO_ADDR
// if not x or not y then
11002: LD_VAR 0 10
11006: NOT
11007: PUSH
11008: LD_VAR 0 11
11012: NOT
11013: OR
11014: IFFALSE 11018
// exit ;
11016: GO 12051
// weapon := 0 ;
11018: LD_ADDR_VAR 0 18
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// fac_list := [ ] ;
11026: LD_ADDR_VAR 0 17
11030: PUSH
11031: EMPTY
11032: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11033: LD_ADDR_VAR 0 6
11037: PUSH
11038: LD_VAR 0 1
11042: PPUSH
11043: CALL_OW 274
11047: PPUSH
11048: LD_VAR 0 2
11052: PPUSH
11053: LD_INT 0
11055: PPUSH
11056: CALL 8622 0 3
11060: PPUSH
11061: LD_INT 30
11063: PUSH
11064: LD_INT 3
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PPUSH
11071: CALL_OW 72
11075: ST_TO_ADDR
// if not factories then
11076: LD_VAR 0 6
11080: NOT
11081: IFFALSE 11085
// exit ;
11083: GO 12051
// for i in factories do
11085: LD_ADDR_VAR 0 8
11089: PUSH
11090: LD_VAR 0 6
11094: PUSH
11095: FOR_IN
11096: IFFALSE 11121
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11098: LD_ADDR_VAR 0 17
11102: PUSH
11103: LD_VAR 0 17
11107: PUSH
11108: LD_VAR 0 8
11112: PPUSH
11113: CALL_OW 478
11117: UNION
11118: ST_TO_ADDR
11119: GO 11095
11121: POP
11122: POP
// if not fac_list then
11123: LD_VAR 0 17
11127: NOT
11128: IFFALSE 11132
// exit ;
11130: GO 12051
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11132: LD_ADDR_VAR 0 5
11136: PUSH
11137: LD_INT 4
11139: PUSH
11140: LD_INT 5
11142: PUSH
11143: LD_INT 9
11145: PUSH
11146: LD_INT 10
11148: PUSH
11149: LD_INT 6
11151: PUSH
11152: LD_INT 7
11154: PUSH
11155: LD_INT 11
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 27
11169: PUSH
11170: LD_INT 28
11172: PUSH
11173: LD_INT 26
11175: PUSH
11176: LD_INT 30
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 43
11187: PUSH
11188: LD_INT 44
11190: PUSH
11191: LD_INT 46
11193: PUSH
11194: LD_INT 45
11196: PUSH
11197: LD_INT 47
11199: PUSH
11200: LD_INT 49
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: PUSH
11216: LD_VAR 0 12
11220: ARRAY
11221: ST_TO_ADDR
// list := list isect fac_list ;
11222: LD_ADDR_VAR 0 5
11226: PUSH
11227: LD_VAR 0 5
11231: PUSH
11232: LD_VAR 0 17
11236: ISECT
11237: ST_TO_ADDR
// if not list then
11238: LD_VAR 0 5
11242: NOT
11243: IFFALSE 11247
// exit ;
11245: GO 12051
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11247: LD_VAR 0 12
11251: PUSH
11252: LD_INT 3
11254: EQUAL
11255: PUSH
11256: LD_INT 49
11258: PUSH
11259: LD_VAR 0 5
11263: IN
11264: AND
11265: PUSH
11266: LD_INT 31
11268: PPUSH
11269: LD_VAR 0 16
11273: PPUSH
11274: CALL_OW 321
11278: PUSH
11279: LD_INT 2
11281: EQUAL
11282: AND
11283: IFFALSE 11343
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11285: LD_INT 22
11287: PUSH
11288: LD_VAR 0 16
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 35
11299: PUSH
11300: LD_INT 49
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 91
11309: PUSH
11310: LD_VAR 0 1
11314: PUSH
11315: LD_INT 10
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: NOT
11333: IFFALSE 11343
// weapon := ru_time_lapser ;
11335: LD_ADDR_VAR 0 18
11339: PUSH
11340: LD_INT 49
11342: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11343: LD_VAR 0 12
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: IN
11358: PUSH
11359: LD_INT 11
11361: PUSH
11362: LD_VAR 0 5
11366: IN
11367: PUSH
11368: LD_INT 30
11370: PUSH
11371: LD_VAR 0 5
11375: IN
11376: OR
11377: AND
11378: PUSH
11379: LD_INT 6
11381: PPUSH
11382: LD_VAR 0 16
11386: PPUSH
11387: CALL_OW 321
11391: PUSH
11392: LD_INT 2
11394: EQUAL
11395: AND
11396: IFFALSE 11561
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11398: LD_INT 22
11400: PUSH
11401: LD_VAR 0 16
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 2
11412: PUSH
11413: LD_INT 35
11415: PUSH
11416: LD_INT 11
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 35
11425: PUSH
11426: LD_INT 30
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 91
11440: PUSH
11441: LD_VAR 0 1
11445: PUSH
11446: LD_INT 18
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: NOT
11464: PUSH
11465: LD_INT 22
11467: PUSH
11468: LD_VAR 0 16
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 2
11479: PUSH
11480: LD_INT 30
11482: PUSH
11483: LD_INT 32
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 30
11492: PUSH
11493: LD_INT 33
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 91
11507: PUSH
11508: LD_VAR 0 1
11512: PUSH
11513: LD_INT 12
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: PPUSH
11529: CALL_OW 69
11533: PUSH
11534: LD_INT 2
11536: GREATER
11537: AND
11538: IFFALSE 11561
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11540: LD_ADDR_VAR 0 18
11544: PUSH
11545: LD_INT 11
11547: PUSH
11548: LD_INT 30
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_VAR 0 12
11559: ARRAY
11560: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11561: LD_VAR 0 18
11565: NOT
11566: PUSH
11567: LD_INT 40
11569: PPUSH
11570: LD_VAR 0 16
11574: PPUSH
11575: CALL_OW 321
11579: PUSH
11580: LD_INT 2
11582: EQUAL
11583: AND
11584: PUSH
11585: LD_INT 7
11587: PUSH
11588: LD_VAR 0 5
11592: IN
11593: PUSH
11594: LD_INT 28
11596: PUSH
11597: LD_VAR 0 5
11601: IN
11602: OR
11603: PUSH
11604: LD_INT 45
11606: PUSH
11607: LD_VAR 0 5
11611: IN
11612: OR
11613: AND
11614: IFFALSE 11868
// begin hex := GetHexInfo ( x , y ) ;
11616: LD_ADDR_VAR 0 4
11620: PUSH
11621: LD_VAR 0 10
11625: PPUSH
11626: LD_VAR 0 11
11630: PPUSH
11631: CALL_OW 546
11635: ST_TO_ADDR
// if hex [ 1 ] then
11636: LD_VAR 0 4
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: IFFALSE 11648
// exit ;
11646: GO 12051
// height := hex [ 2 ] ;
11648: LD_ADDR_VAR 0 15
11652: PUSH
11653: LD_VAR 0 4
11657: PUSH
11658: LD_INT 2
11660: ARRAY
11661: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11662: LD_ADDR_VAR 0 14
11666: PUSH
11667: LD_INT 0
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: LD_INT 5
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: ST_TO_ADDR
// for i in tmp do
11685: LD_ADDR_VAR 0 8
11689: PUSH
11690: LD_VAR 0 14
11694: PUSH
11695: FOR_IN
11696: IFFALSE 11866
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11698: LD_ADDR_VAR 0 9
11702: PUSH
11703: LD_VAR 0 10
11707: PPUSH
11708: LD_VAR 0 8
11712: PPUSH
11713: LD_INT 5
11715: PPUSH
11716: CALL_OW 272
11720: PUSH
11721: LD_VAR 0 11
11725: PPUSH
11726: LD_VAR 0 8
11730: PPUSH
11731: LD_INT 5
11733: PPUSH
11734: CALL_OW 273
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11743: LD_VAR 0 9
11747: PUSH
11748: LD_INT 1
11750: ARRAY
11751: PPUSH
11752: LD_VAR 0 9
11756: PUSH
11757: LD_INT 2
11759: ARRAY
11760: PPUSH
11761: CALL_OW 488
11765: IFFALSE 11864
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11767: LD_ADDR_VAR 0 4
11771: PUSH
11772: LD_VAR 0 9
11776: PUSH
11777: LD_INT 1
11779: ARRAY
11780: PPUSH
11781: LD_VAR 0 9
11785: PUSH
11786: LD_INT 2
11788: ARRAY
11789: PPUSH
11790: CALL_OW 546
11794: ST_TO_ADDR
// if hex [ 1 ] then
11795: LD_VAR 0 4
11799: PUSH
11800: LD_INT 1
11802: ARRAY
11803: IFFALSE 11807
// continue ;
11805: GO 11695
// h := hex [ 2 ] ;
11807: LD_ADDR_VAR 0 13
11811: PUSH
11812: LD_VAR 0 4
11816: PUSH
11817: LD_INT 2
11819: ARRAY
11820: ST_TO_ADDR
// if h + 7 < height then
11821: LD_VAR 0 13
11825: PUSH
11826: LD_INT 7
11828: PLUS
11829: PUSH
11830: LD_VAR 0 15
11834: LESS
11835: IFFALSE 11864
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11837: LD_ADDR_VAR 0 18
11841: PUSH
11842: LD_INT 7
11844: PUSH
11845: LD_INT 28
11847: PUSH
11848: LD_INT 45
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: LD_VAR 0 12
11860: ARRAY
11861: ST_TO_ADDR
// break ;
11862: GO 11866
// end ; end ; end ;
11864: GO 11695
11866: POP
11867: POP
// end ; if not weapon then
11868: LD_VAR 0 18
11872: NOT
11873: IFFALSE 11933
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11875: LD_ADDR_VAR 0 5
11879: PUSH
11880: LD_VAR 0 5
11884: PUSH
11885: LD_INT 11
11887: PUSH
11888: LD_INT 30
11890: PUSH
11891: LD_INT 49
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: DIFF
11899: ST_TO_ADDR
// if not list then
11900: LD_VAR 0 5
11904: NOT
11905: IFFALSE 11909
// exit ;
11907: GO 12051
// weapon := list [ rand ( 1 , list ) ] ;
11909: LD_ADDR_VAR 0 18
11913: PUSH
11914: LD_VAR 0 5
11918: PUSH
11919: LD_INT 1
11921: PPUSH
11922: LD_VAR 0 5
11926: PPUSH
11927: CALL_OW 12
11931: ARRAY
11932: ST_TO_ADDR
// end ; if weapon then
11933: LD_VAR 0 18
11937: IFFALSE 12051
// begin tmp := CostOfWeapon ( weapon ) ;
11939: LD_ADDR_VAR 0 14
11943: PUSH
11944: LD_VAR 0 18
11948: PPUSH
11949: CALL_OW 451
11953: ST_TO_ADDR
// j := GetBase ( tower ) ;
11954: LD_ADDR_VAR 0 9
11958: PUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 274
11968: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11969: LD_VAR 0 9
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 275
11981: PUSH
11982: LD_VAR 0 14
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: GREATEREQUAL
11991: PUSH
11992: LD_VAR 0 9
11996: PPUSH
11997: LD_INT 2
11999: PPUSH
12000: CALL_OW 275
12004: PUSH
12005: LD_VAR 0 14
12009: PUSH
12010: LD_INT 2
12012: ARRAY
12013: GREATEREQUAL
12014: AND
12015: PUSH
12016: LD_VAR 0 9
12020: PPUSH
12021: LD_INT 3
12023: PPUSH
12024: CALL_OW 275
12028: PUSH
12029: LD_VAR 0 14
12033: PUSH
12034: LD_INT 3
12036: ARRAY
12037: GREATEREQUAL
12038: AND
12039: IFFALSE 12051
// result := weapon ;
12041: LD_ADDR_VAR 0 3
12045: PUSH
12046: LD_VAR 0 18
12050: ST_TO_ADDR
// end ; end ;
12051: LD_VAR 0 3
12055: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12056: LD_INT 0
12058: PPUSH
12059: PPUSH
// result := true ;
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// if array1 = array2 then
12068: LD_VAR 0 1
12072: PUSH
12073: LD_VAR 0 2
12077: EQUAL
12078: IFFALSE 12138
// begin for i = 1 to array1 do
12080: LD_ADDR_VAR 0 4
12084: PUSH
12085: DOUBLE
12086: LD_INT 1
12088: DEC
12089: ST_TO_ADDR
12090: LD_VAR 0 1
12094: PUSH
12095: FOR_TO
12096: IFFALSE 12134
// if array1 [ i ] <> array2 [ i ] then
12098: LD_VAR 0 1
12102: PUSH
12103: LD_VAR 0 4
12107: ARRAY
12108: PUSH
12109: LD_VAR 0 2
12113: PUSH
12114: LD_VAR 0 4
12118: ARRAY
12119: NONEQUAL
12120: IFFALSE 12132
// begin result := false ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// break ;
12130: GO 12134
// end ;
12132: GO 12095
12134: POP
12135: POP
// end else
12136: GO 12146
// result := false ;
12138: LD_ADDR_VAR 0 3
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// end ;
12146: LD_VAR 0 3
12150: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12151: LD_INT 0
12153: PPUSH
12154: PPUSH
// if not array1 or not array2 then
12155: LD_VAR 0 1
12159: NOT
12160: PUSH
12161: LD_VAR 0 2
12165: NOT
12166: OR
12167: IFFALSE 12171
// exit ;
12169: GO 12235
// result := true ;
12171: LD_ADDR_VAR 0 3
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// for i = 1 to array1 do
12179: LD_ADDR_VAR 0 4
12183: PUSH
12184: DOUBLE
12185: LD_INT 1
12187: DEC
12188: ST_TO_ADDR
12189: LD_VAR 0 1
12193: PUSH
12194: FOR_TO
12195: IFFALSE 12233
// if array1 [ i ] <> array2 [ i ] then
12197: LD_VAR 0 1
12201: PUSH
12202: LD_VAR 0 4
12206: ARRAY
12207: PUSH
12208: LD_VAR 0 2
12212: PUSH
12213: LD_VAR 0 4
12217: ARRAY
12218: NONEQUAL
12219: IFFALSE 12231
// begin result := false ;
12221: LD_ADDR_VAR 0 3
12225: PUSH
12226: LD_INT 0
12228: ST_TO_ADDR
// break ;
12229: GO 12233
// end ;
12231: GO 12194
12233: POP
12234: POP
// end ;
12235: LD_VAR 0 3
12239: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12240: LD_INT 0
12242: PPUSH
12243: PPUSH
12244: PPUSH
// pom := GetBase ( fac ) ;
12245: LD_ADDR_VAR 0 5
12249: PUSH
12250: LD_VAR 0 1
12254: PPUSH
12255: CALL_OW 274
12259: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12260: LD_ADDR_VAR 0 4
12264: PUSH
12265: LD_VAR 0 2
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_VAR 0 2
12278: PUSH
12279: LD_INT 2
12281: ARRAY
12282: PPUSH
12283: LD_VAR 0 2
12287: PUSH
12288: LD_INT 3
12290: ARRAY
12291: PPUSH
12292: LD_VAR 0 2
12296: PUSH
12297: LD_INT 4
12299: ARRAY
12300: PPUSH
12301: CALL_OW 449
12305: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12306: LD_ADDR_VAR 0 3
12310: PUSH
12311: LD_VAR 0 5
12315: PPUSH
12316: LD_INT 1
12318: PPUSH
12319: CALL_OW 275
12323: PUSH
12324: LD_VAR 0 4
12328: PUSH
12329: LD_INT 1
12331: ARRAY
12332: GREATEREQUAL
12333: PUSH
12334: LD_VAR 0 5
12338: PPUSH
12339: LD_INT 2
12341: PPUSH
12342: CALL_OW 275
12346: PUSH
12347: LD_VAR 0 4
12351: PUSH
12352: LD_INT 2
12354: ARRAY
12355: GREATEREQUAL
12356: AND
12357: PUSH
12358: LD_VAR 0 5
12362: PPUSH
12363: LD_INT 3
12365: PPUSH
12366: CALL_OW 275
12370: PUSH
12371: LD_VAR 0 4
12375: PUSH
12376: LD_INT 3
12378: ARRAY
12379: GREATEREQUAL
12380: AND
12381: ST_TO_ADDR
// end ;
12382: LD_VAR 0 3
12386: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12387: LD_INT 0
12389: PPUSH
12390: PPUSH
12391: PPUSH
12392: PPUSH
// pom := GetBase ( building ) ;
12393: LD_ADDR_VAR 0 3
12397: PUSH
12398: LD_VAR 0 1
12402: PPUSH
12403: CALL_OW 274
12407: ST_TO_ADDR
// if not pom then
12408: LD_VAR 0 3
12412: NOT
12413: IFFALSE 12417
// exit ;
12415: GO 12587
// btype := GetBType ( building ) ;
12417: LD_ADDR_VAR 0 5
12421: PUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 266
12431: ST_TO_ADDR
// if btype = b_armoury then
12432: LD_VAR 0 5
12436: PUSH
12437: LD_INT 4
12439: EQUAL
12440: IFFALSE 12450
// btype := b_barracks ;
12442: LD_ADDR_VAR 0 5
12446: PUSH
12447: LD_INT 5
12449: ST_TO_ADDR
// if btype = b_depot then
12450: LD_VAR 0 5
12454: PUSH
12455: LD_INT 0
12457: EQUAL
12458: IFFALSE 12468
// btype := b_warehouse ;
12460: LD_ADDR_VAR 0 5
12464: PUSH
12465: LD_INT 1
12467: ST_TO_ADDR
// if btype = b_workshop then
12468: LD_VAR 0 5
12472: PUSH
12473: LD_INT 2
12475: EQUAL
12476: IFFALSE 12486
// btype := b_factory ;
12478: LD_ADDR_VAR 0 5
12482: PUSH
12483: LD_INT 3
12485: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12486: LD_ADDR_VAR 0 4
12490: PUSH
12491: LD_VAR 0 5
12495: PPUSH
12496: LD_VAR 0 1
12500: PPUSH
12501: CALL_OW 248
12505: PPUSH
12506: CALL_OW 450
12510: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12511: LD_ADDR_VAR 0 2
12515: PUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 275
12528: PUSH
12529: LD_VAR 0 4
12533: PUSH
12534: LD_INT 1
12536: ARRAY
12537: GREATEREQUAL
12538: PUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 2
12546: PPUSH
12547: CALL_OW 275
12551: PUSH
12552: LD_VAR 0 4
12556: PUSH
12557: LD_INT 2
12559: ARRAY
12560: GREATEREQUAL
12561: AND
12562: PUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: LD_INT 3
12570: PPUSH
12571: CALL_OW 275
12575: PUSH
12576: LD_VAR 0 4
12580: PUSH
12581: LD_INT 3
12583: ARRAY
12584: GREATEREQUAL
12585: AND
12586: ST_TO_ADDR
// end ;
12587: LD_VAR 0 2
12591: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12592: LD_INT 0
12594: PPUSH
12595: PPUSH
12596: PPUSH
// pom := GetBase ( building ) ;
12597: LD_ADDR_VAR 0 4
12601: PUSH
12602: LD_VAR 0 1
12606: PPUSH
12607: CALL_OW 274
12611: ST_TO_ADDR
// if not pom then
12612: LD_VAR 0 4
12616: NOT
12617: IFFALSE 12621
// exit ;
12619: GO 12722
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12621: LD_ADDR_VAR 0 5
12625: PUSH
12626: LD_VAR 0 2
12630: PPUSH
12631: LD_VAR 0 1
12635: PPUSH
12636: CALL_OW 248
12640: PPUSH
12641: CALL_OW 450
12645: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_VAR 0 4
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 275
12663: PUSH
12664: LD_VAR 0 5
12668: PUSH
12669: LD_INT 1
12671: ARRAY
12672: GREATEREQUAL
12673: PUSH
12674: LD_VAR 0 4
12678: PPUSH
12679: LD_INT 2
12681: PPUSH
12682: CALL_OW 275
12686: PUSH
12687: LD_VAR 0 5
12691: PUSH
12692: LD_INT 2
12694: ARRAY
12695: GREATEREQUAL
12696: AND
12697: PUSH
12698: LD_VAR 0 4
12702: PPUSH
12703: LD_INT 3
12705: PPUSH
12706: CALL_OW 275
12710: PUSH
12711: LD_VAR 0 5
12715: PUSH
12716: LD_INT 3
12718: ARRAY
12719: GREATEREQUAL
12720: AND
12721: ST_TO_ADDR
// end ;
12722: LD_VAR 0 3
12726: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12727: LD_INT 0
12729: PPUSH
12730: PPUSH
12731: PPUSH
12732: PPUSH
12733: PPUSH
12734: PPUSH
12735: PPUSH
12736: PPUSH
12737: PPUSH
12738: PPUSH
12739: PPUSH
// result := false ;
12740: LD_ADDR_VAR 0 8
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12748: LD_VAR 0 5
12752: NOT
12753: PUSH
12754: LD_VAR 0 1
12758: NOT
12759: OR
12760: PUSH
12761: LD_VAR 0 2
12765: NOT
12766: OR
12767: PUSH
12768: LD_VAR 0 3
12772: NOT
12773: OR
12774: IFFALSE 12778
// exit ;
12776: GO 13592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12778: LD_ADDR_VAR 0 14
12782: PUSH
12783: LD_VAR 0 1
12787: PPUSH
12788: LD_VAR 0 2
12792: PPUSH
12793: LD_VAR 0 3
12797: PPUSH
12798: LD_VAR 0 4
12802: PPUSH
12803: LD_VAR 0 5
12807: PUSH
12808: LD_INT 1
12810: ARRAY
12811: PPUSH
12812: CALL_OW 248
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL 14845 0 6
12824: ST_TO_ADDR
// if not hexes then
12825: LD_VAR 0 14
12829: NOT
12830: IFFALSE 12834
// exit ;
12832: GO 13592
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12834: LD_ADDR_VAR 0 17
12838: PUSH
12839: LD_VAR 0 5
12843: PPUSH
12844: LD_INT 22
12846: PUSH
12847: LD_VAR 0 13
12851: PPUSH
12852: CALL_OW 255
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 2
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 0
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 30
12876: PUSH
12877: LD_INT 1
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 72
12897: ST_TO_ADDR
// for i = 1 to hexes do
12898: LD_ADDR_VAR 0 9
12902: PUSH
12903: DOUBLE
12904: LD_INT 1
12906: DEC
12907: ST_TO_ADDR
12908: LD_VAR 0 14
12912: PUSH
12913: FOR_TO
12914: IFFALSE 13590
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12916: LD_ADDR_VAR 0 13
12920: PUSH
12921: LD_VAR 0 14
12925: PUSH
12926: LD_VAR 0 9
12930: ARRAY
12931: PUSH
12932: LD_INT 1
12934: ARRAY
12935: PPUSH
12936: LD_VAR 0 14
12940: PUSH
12941: LD_VAR 0 9
12945: ARRAY
12946: PUSH
12947: LD_INT 2
12949: ARRAY
12950: PPUSH
12951: CALL_OW 428
12955: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12956: LD_VAR 0 14
12960: PUSH
12961: LD_VAR 0 9
12965: ARRAY
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PPUSH
12971: LD_VAR 0 14
12975: PUSH
12976: LD_VAR 0 9
12980: ARRAY
12981: PUSH
12982: LD_INT 2
12984: ARRAY
12985: PPUSH
12986: CALL_OW 351
12990: PUSH
12991: LD_VAR 0 14
12995: PUSH
12996: LD_VAR 0 9
13000: ARRAY
13001: PUSH
13002: LD_INT 1
13004: ARRAY
13005: PPUSH
13006: LD_VAR 0 14
13010: PUSH
13011: LD_VAR 0 9
13015: ARRAY
13016: PUSH
13017: LD_INT 2
13019: ARRAY
13020: PPUSH
13021: CALL_OW 488
13025: NOT
13026: OR
13027: PUSH
13028: LD_VAR 0 13
13032: PPUSH
13033: CALL_OW 247
13037: PUSH
13038: LD_INT 3
13040: EQUAL
13041: OR
13042: IFFALSE 13048
// exit ;
13044: POP
13045: POP
13046: GO 13592
// if not tmp then
13048: LD_VAR 0 13
13052: NOT
13053: IFFALSE 13057
// continue ;
13055: GO 12913
// result := true ;
13057: LD_ADDR_VAR 0 8
13061: PUSH
13062: LD_INT 1
13064: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13065: LD_VAR 0 6
13069: PUSH
13070: LD_VAR 0 13
13074: PPUSH
13075: CALL_OW 247
13079: PUSH
13080: LD_INT 2
13082: EQUAL
13083: AND
13084: PUSH
13085: LD_VAR 0 13
13089: PPUSH
13090: CALL_OW 263
13094: PUSH
13095: LD_INT 1
13097: EQUAL
13098: AND
13099: IFFALSE 13263
// begin if IsDrivenBy ( tmp ) then
13101: LD_VAR 0 13
13105: PPUSH
13106: CALL_OW 311
13110: IFFALSE 13114
// continue ;
13112: GO 12913
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13114: LD_VAR 0 6
13118: PPUSH
13119: LD_INT 3
13121: PUSH
13122: LD_INT 60
13124: PUSH
13125: EMPTY
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 3
13134: PUSH
13135: LD_INT 55
13137: PUSH
13138: EMPTY
13139: LIST
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PPUSH
13149: CALL_OW 72
13153: IFFALSE 13261
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13155: LD_ADDR_VAR 0 18
13159: PUSH
13160: LD_VAR 0 6
13164: PPUSH
13165: LD_INT 3
13167: PUSH
13168: LD_INT 60
13170: PUSH
13171: EMPTY
13172: LIST
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 3
13180: PUSH
13181: LD_INT 55
13183: PUSH
13184: EMPTY
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PPUSH
13195: CALL_OW 72
13199: PUSH
13200: LD_INT 1
13202: ARRAY
13203: ST_TO_ADDR
// if IsInUnit ( driver ) then
13204: LD_VAR 0 18
13208: PPUSH
13209: CALL_OW 310
13213: IFFALSE 13224
// ComExit ( driver ) ;
13215: LD_VAR 0 18
13219: PPUSH
13220: CALL 38646 0 1
// AddComEnterUnit ( driver , tmp ) ;
13224: LD_VAR 0 18
13228: PPUSH
13229: LD_VAR 0 13
13233: PPUSH
13234: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13238: LD_VAR 0 18
13242: PPUSH
13243: LD_VAR 0 7
13247: PPUSH
13248: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13252: LD_VAR 0 18
13256: PPUSH
13257: CALL_OW 181
// end ; continue ;
13261: GO 12913
// end ; if not cleaners or not tmp in cleaners then
13263: LD_VAR 0 6
13267: NOT
13268: PUSH
13269: LD_VAR 0 13
13273: PUSH
13274: LD_VAR 0 6
13278: IN
13279: NOT
13280: OR
13281: IFFALSE 13588
// begin if dep then
13283: LD_VAR 0 17
13287: IFFALSE 13423
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13289: LD_ADDR_VAR 0 16
13293: PUSH
13294: LD_VAR 0 17
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: CALL_OW 250
13307: PPUSH
13308: LD_VAR 0 17
13312: PUSH
13313: LD_INT 1
13315: ARRAY
13316: PPUSH
13317: CALL_OW 254
13321: PPUSH
13322: LD_INT 5
13324: PPUSH
13325: CALL_OW 272
13329: PUSH
13330: LD_VAR 0 17
13334: PUSH
13335: LD_INT 1
13337: ARRAY
13338: PPUSH
13339: CALL_OW 251
13343: PPUSH
13344: LD_VAR 0 17
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: CALL_OW 254
13357: PPUSH
13358: LD_INT 5
13360: PPUSH
13361: CALL_OW 273
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13370: LD_VAR 0 16
13374: PUSH
13375: LD_INT 1
13377: ARRAY
13378: PPUSH
13379: LD_VAR 0 16
13383: PUSH
13384: LD_INT 2
13386: ARRAY
13387: PPUSH
13388: CALL_OW 488
13392: IFFALSE 13423
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13394: LD_VAR 0 13
13398: PPUSH
13399: LD_VAR 0 16
13403: PUSH
13404: LD_INT 1
13406: ARRAY
13407: PPUSH
13408: LD_VAR 0 16
13412: PUSH
13413: LD_INT 2
13415: ARRAY
13416: PPUSH
13417: CALL_OW 111
// continue ;
13421: GO 12913
// end ; end ; r := GetDir ( tmp ) ;
13423: LD_ADDR_VAR 0 15
13427: PUSH
13428: LD_VAR 0 13
13432: PPUSH
13433: CALL_OW 254
13437: ST_TO_ADDR
// if r = 5 then
13438: LD_VAR 0 15
13442: PUSH
13443: LD_INT 5
13445: EQUAL
13446: IFFALSE 13456
// r := 0 ;
13448: LD_ADDR_VAR 0 15
13452: PUSH
13453: LD_INT 0
13455: ST_TO_ADDR
// for j = r to 5 do
13456: LD_ADDR_VAR 0 10
13460: PUSH
13461: DOUBLE
13462: LD_VAR 0 15
13466: DEC
13467: ST_TO_ADDR
13468: LD_INT 5
13470: PUSH
13471: FOR_TO
13472: IFFALSE 13586
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13474: LD_ADDR_VAR 0 11
13478: PUSH
13479: LD_VAR 0 13
13483: PPUSH
13484: CALL_OW 250
13488: PPUSH
13489: LD_VAR 0 10
13493: PPUSH
13494: LD_INT 2
13496: PPUSH
13497: CALL_OW 272
13501: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13502: LD_ADDR_VAR 0 12
13506: PUSH
13507: LD_VAR 0 13
13511: PPUSH
13512: CALL_OW 251
13516: PPUSH
13517: LD_VAR 0 10
13521: PPUSH
13522: LD_INT 2
13524: PPUSH
13525: CALL_OW 273
13529: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13530: LD_VAR 0 11
13534: PPUSH
13535: LD_VAR 0 12
13539: PPUSH
13540: CALL_OW 488
13544: PUSH
13545: LD_VAR 0 11
13549: PPUSH
13550: LD_VAR 0 12
13554: PPUSH
13555: CALL_OW 428
13559: NOT
13560: AND
13561: IFFALSE 13584
// begin ComMoveXY ( tmp , _x , _y ) ;
13563: LD_VAR 0 13
13567: PPUSH
13568: LD_VAR 0 11
13572: PPUSH
13573: LD_VAR 0 12
13577: PPUSH
13578: CALL_OW 111
// break ;
13582: GO 13586
// end ; end ;
13584: GO 13471
13586: POP
13587: POP
// end ; end ;
13588: GO 12913
13590: POP
13591: POP
// end ;
13592: LD_VAR 0 8
13596: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13597: LD_INT 0
13599: PPUSH
// result := true ;
13600: LD_ADDR_VAR 0 3
13604: PUSH
13605: LD_INT 1
13607: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13608: LD_VAR 0 2
13612: PUSH
13613: LD_INT 24
13615: DOUBLE
13616: EQUAL
13617: IFTRUE 13627
13619: LD_INT 33
13621: DOUBLE
13622: EQUAL
13623: IFTRUE 13627
13625: GO 13652
13627: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13628: LD_ADDR_VAR 0 3
13632: PUSH
13633: LD_INT 32
13635: PPUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 321
13645: PUSH
13646: LD_INT 2
13648: EQUAL
13649: ST_TO_ADDR
13650: GO 13968
13652: LD_INT 20
13654: DOUBLE
13655: EQUAL
13656: IFTRUE 13660
13658: GO 13685
13660: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: LD_INT 6
13668: PPUSH
13669: LD_VAR 0 1
13673: PPUSH
13674: CALL_OW 321
13678: PUSH
13679: LD_INT 2
13681: EQUAL
13682: ST_TO_ADDR
13683: GO 13968
13685: LD_INT 22
13687: DOUBLE
13688: EQUAL
13689: IFTRUE 13699
13691: LD_INT 36
13693: DOUBLE
13694: EQUAL
13695: IFTRUE 13699
13697: GO 13724
13699: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 15
13707: PPUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 321
13717: PUSH
13718: LD_INT 2
13720: EQUAL
13721: ST_TO_ADDR
13722: GO 13968
13724: LD_INT 30
13726: DOUBLE
13727: EQUAL
13728: IFTRUE 13732
13730: GO 13757
13732: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: LD_INT 20
13740: PPUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 321
13750: PUSH
13751: LD_INT 2
13753: EQUAL
13754: ST_TO_ADDR
13755: GO 13968
13757: LD_INT 28
13759: DOUBLE
13760: EQUAL
13761: IFTRUE 13771
13763: LD_INT 21
13765: DOUBLE
13766: EQUAL
13767: IFTRUE 13771
13769: GO 13796
13771: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13772: LD_ADDR_VAR 0 3
13776: PUSH
13777: LD_INT 21
13779: PPUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: CALL_OW 321
13789: PUSH
13790: LD_INT 2
13792: EQUAL
13793: ST_TO_ADDR
13794: GO 13968
13796: LD_INT 16
13798: DOUBLE
13799: EQUAL
13800: IFTRUE 13804
13802: GO 13829
13804: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13805: LD_ADDR_VAR 0 3
13809: PUSH
13810: LD_INT 84
13812: PPUSH
13813: LD_VAR 0 1
13817: PPUSH
13818: CALL_OW 321
13822: PUSH
13823: LD_INT 2
13825: EQUAL
13826: ST_TO_ADDR
13827: GO 13968
13829: LD_INT 19
13831: DOUBLE
13832: EQUAL
13833: IFTRUE 13843
13835: LD_INT 23
13837: DOUBLE
13838: EQUAL
13839: IFTRUE 13843
13841: GO 13868
13843: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13844: LD_ADDR_VAR 0 3
13848: PUSH
13849: LD_INT 83
13851: PPUSH
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 321
13861: PUSH
13862: LD_INT 2
13864: EQUAL
13865: ST_TO_ADDR
13866: GO 13968
13868: LD_INT 17
13870: DOUBLE
13871: EQUAL
13872: IFTRUE 13876
13874: GO 13901
13876: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13877: LD_ADDR_VAR 0 3
13881: PUSH
13882: LD_INT 39
13884: PPUSH
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL_OW 321
13894: PUSH
13895: LD_INT 2
13897: EQUAL
13898: ST_TO_ADDR
13899: GO 13968
13901: LD_INT 18
13903: DOUBLE
13904: EQUAL
13905: IFTRUE 13909
13907: GO 13934
13909: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13910: LD_ADDR_VAR 0 3
13914: PUSH
13915: LD_INT 40
13917: PPUSH
13918: LD_VAR 0 1
13922: PPUSH
13923: CALL_OW 321
13927: PUSH
13928: LD_INT 2
13930: EQUAL
13931: ST_TO_ADDR
13932: GO 13968
13934: LD_INT 27
13936: DOUBLE
13937: EQUAL
13938: IFTRUE 13942
13940: GO 13967
13942: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13943: LD_ADDR_VAR 0 3
13947: PUSH
13948: LD_INT 35
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 321
13960: PUSH
13961: LD_INT 2
13963: EQUAL
13964: ST_TO_ADDR
13965: GO 13968
13967: POP
// end ;
13968: LD_VAR 0 3
13972: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13973: LD_INT 0
13975: PPUSH
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
13982: PPUSH
13983: PPUSH
13984: PPUSH
13985: PPUSH
// result := false ;
13986: LD_ADDR_VAR 0 6
13990: PUSH
13991: LD_INT 0
13993: ST_TO_ADDR
// if btype = b_depot then
13994: LD_VAR 0 2
13998: PUSH
13999: LD_INT 0
14001: EQUAL
14002: IFFALSE 14014
// begin result := true ;
14004: LD_ADDR_VAR 0 6
14008: PUSH
14009: LD_INT 1
14011: ST_TO_ADDR
// exit ;
14012: GO 14840
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14014: LD_VAR 0 1
14018: NOT
14019: PUSH
14020: LD_VAR 0 1
14024: PPUSH
14025: CALL_OW 266
14029: PUSH
14030: LD_INT 0
14032: PUSH
14033: LD_INT 1
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: IN
14040: NOT
14041: OR
14042: PUSH
14043: LD_VAR 0 2
14047: NOT
14048: OR
14049: PUSH
14050: LD_VAR 0 5
14054: PUSH
14055: LD_INT 0
14057: PUSH
14058: LD_INT 1
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 3
14066: PUSH
14067: LD_INT 4
14069: PUSH
14070: LD_INT 5
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: IN
14081: NOT
14082: OR
14083: PUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_VAR 0 4
14093: PPUSH
14094: CALL_OW 488
14098: NOT
14099: OR
14100: IFFALSE 14104
// exit ;
14102: GO 14840
// side := GetSide ( depot ) ;
14104: LD_ADDR_VAR 0 9
14108: PUSH
14109: LD_VAR 0 1
14113: PPUSH
14114: CALL_OW 255
14118: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14119: LD_VAR 0 9
14123: PPUSH
14124: LD_VAR 0 2
14128: PPUSH
14129: CALL 13597 0 2
14133: NOT
14134: IFFALSE 14138
// exit ;
14136: GO 14840
// pom := GetBase ( depot ) ;
14138: LD_ADDR_VAR 0 10
14142: PUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 274
14152: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14153: LD_ADDR_VAR 0 11
14157: PUSH
14158: LD_VAR 0 2
14162: PPUSH
14163: LD_VAR 0 1
14167: PPUSH
14168: CALL_OW 248
14172: PPUSH
14173: CALL_OW 450
14177: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14178: LD_VAR 0 10
14182: PPUSH
14183: LD_INT 1
14185: PPUSH
14186: CALL_OW 275
14190: PUSH
14191: LD_VAR 0 11
14195: PUSH
14196: LD_INT 1
14198: ARRAY
14199: GREATEREQUAL
14200: PUSH
14201: LD_VAR 0 10
14205: PPUSH
14206: LD_INT 2
14208: PPUSH
14209: CALL_OW 275
14213: PUSH
14214: LD_VAR 0 11
14218: PUSH
14219: LD_INT 2
14221: ARRAY
14222: GREATEREQUAL
14223: AND
14224: PUSH
14225: LD_VAR 0 10
14229: PPUSH
14230: LD_INT 3
14232: PPUSH
14233: CALL_OW 275
14237: PUSH
14238: LD_VAR 0 11
14242: PUSH
14243: LD_INT 3
14245: ARRAY
14246: GREATEREQUAL
14247: AND
14248: NOT
14249: IFFALSE 14253
// exit ;
14251: GO 14840
// if GetBType ( depot ) = b_depot then
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 266
14262: PUSH
14263: LD_INT 0
14265: EQUAL
14266: IFFALSE 14278
// dist := 28 else
14268: LD_ADDR_VAR 0 14
14272: PUSH
14273: LD_INT 28
14275: ST_TO_ADDR
14276: GO 14286
// dist := 36 ;
14278: LD_ADDR_VAR 0 14
14282: PUSH
14283: LD_INT 36
14285: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14286: LD_VAR 0 1
14290: PPUSH
14291: LD_VAR 0 3
14295: PPUSH
14296: LD_VAR 0 4
14300: PPUSH
14301: CALL_OW 297
14305: PUSH
14306: LD_VAR 0 14
14310: GREATER
14311: IFFALSE 14315
// exit ;
14313: GO 14840
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14315: LD_ADDR_VAR 0 12
14319: PUSH
14320: LD_VAR 0 2
14324: PPUSH
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_VAR 0 4
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 248
14349: PPUSH
14350: LD_INT 0
14352: PPUSH
14353: CALL 14845 0 6
14357: ST_TO_ADDR
// if not hexes then
14358: LD_VAR 0 12
14362: NOT
14363: IFFALSE 14367
// exit ;
14365: GO 14840
// hex := GetHexInfo ( x , y ) ;
14367: LD_ADDR_VAR 0 15
14371: PUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: LD_VAR 0 4
14381: PPUSH
14382: CALL_OW 546
14386: ST_TO_ADDR
// if hex [ 1 ] then
14387: LD_VAR 0 15
14391: PUSH
14392: LD_INT 1
14394: ARRAY
14395: IFFALSE 14399
// exit ;
14397: GO 14840
// height := hex [ 2 ] ;
14399: LD_ADDR_VAR 0 13
14403: PUSH
14404: LD_VAR 0 15
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: ST_TO_ADDR
// for i = 1 to hexes do
14413: LD_ADDR_VAR 0 7
14417: PUSH
14418: DOUBLE
14419: LD_INT 1
14421: DEC
14422: ST_TO_ADDR
14423: LD_VAR 0 12
14427: PUSH
14428: FOR_TO
14429: IFFALSE 14759
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14431: LD_VAR 0 12
14435: PUSH
14436: LD_VAR 0 7
14440: ARRAY
14441: PUSH
14442: LD_INT 1
14444: ARRAY
14445: PPUSH
14446: LD_VAR 0 12
14450: PUSH
14451: LD_VAR 0 7
14455: ARRAY
14456: PUSH
14457: LD_INT 2
14459: ARRAY
14460: PPUSH
14461: CALL_OW 488
14465: NOT
14466: PUSH
14467: LD_VAR 0 12
14471: PUSH
14472: LD_VAR 0 7
14476: ARRAY
14477: PUSH
14478: LD_INT 1
14480: ARRAY
14481: PPUSH
14482: LD_VAR 0 12
14486: PUSH
14487: LD_VAR 0 7
14491: ARRAY
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: PPUSH
14497: CALL_OW 428
14501: PUSH
14502: LD_INT 0
14504: GREATER
14505: OR
14506: PUSH
14507: LD_VAR 0 12
14511: PUSH
14512: LD_VAR 0 7
14516: ARRAY
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: LD_VAR 0 12
14526: PUSH
14527: LD_VAR 0 7
14531: ARRAY
14532: PUSH
14533: LD_INT 2
14535: ARRAY
14536: PPUSH
14537: CALL_OW 351
14541: OR
14542: IFFALSE 14548
// exit ;
14544: POP
14545: POP
14546: GO 14840
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14548: LD_ADDR_VAR 0 8
14552: PUSH
14553: LD_VAR 0 12
14557: PUSH
14558: LD_VAR 0 7
14562: ARRAY
14563: PUSH
14564: LD_INT 1
14566: ARRAY
14567: PPUSH
14568: LD_VAR 0 12
14572: PUSH
14573: LD_VAR 0 7
14577: ARRAY
14578: PUSH
14579: LD_INT 2
14581: ARRAY
14582: PPUSH
14583: CALL_OW 546
14587: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14588: LD_VAR 0 8
14592: PUSH
14593: LD_INT 1
14595: ARRAY
14596: PUSH
14597: LD_VAR 0 8
14601: PUSH
14602: LD_INT 2
14604: ARRAY
14605: PUSH
14606: LD_VAR 0 13
14610: PUSH
14611: LD_INT 2
14613: PLUS
14614: GREATER
14615: OR
14616: PUSH
14617: LD_VAR 0 8
14621: PUSH
14622: LD_INT 2
14624: ARRAY
14625: PUSH
14626: LD_VAR 0 13
14630: PUSH
14631: LD_INT 2
14633: MINUS
14634: LESS
14635: OR
14636: PUSH
14637: LD_VAR 0 8
14641: PUSH
14642: LD_INT 3
14644: ARRAY
14645: PUSH
14646: LD_INT 0
14648: PUSH
14649: LD_INT 8
14651: PUSH
14652: LD_INT 9
14654: PUSH
14655: LD_INT 10
14657: PUSH
14658: LD_INT 11
14660: PUSH
14661: LD_INT 12
14663: PUSH
14664: LD_INT 13
14666: PUSH
14667: LD_INT 16
14669: PUSH
14670: LD_INT 17
14672: PUSH
14673: LD_INT 18
14675: PUSH
14676: LD_INT 19
14678: PUSH
14679: LD_INT 20
14681: PUSH
14682: LD_INT 21
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: IN
14700: NOT
14701: OR
14702: PUSH
14703: LD_VAR 0 8
14707: PUSH
14708: LD_INT 5
14710: ARRAY
14711: NOT
14712: OR
14713: PUSH
14714: LD_VAR 0 8
14718: PUSH
14719: LD_INT 6
14721: ARRAY
14722: PUSH
14723: LD_INT 1
14725: PUSH
14726: LD_INT 2
14728: PUSH
14729: LD_INT 7
14731: PUSH
14732: LD_INT 9
14734: PUSH
14735: LD_INT 10
14737: PUSH
14738: LD_INT 11
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: IN
14749: NOT
14750: OR
14751: IFFALSE 14757
// exit ;
14753: POP
14754: POP
14755: GO 14840
// end ;
14757: GO 14428
14759: POP
14760: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14761: LD_VAR 0 9
14765: PPUSH
14766: LD_VAR 0 3
14770: PPUSH
14771: LD_VAR 0 4
14775: PPUSH
14776: LD_INT 20
14778: PPUSH
14779: CALL 6763 0 4
14783: PUSH
14784: LD_INT 4
14786: ARRAY
14787: IFFALSE 14791
// exit ;
14789: GO 14840
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14791: LD_VAR 0 2
14795: PUSH
14796: LD_INT 29
14798: PUSH
14799: LD_INT 30
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: IN
14806: PUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_VAR 0 4
14816: PPUSH
14817: LD_VAR 0 9
14821: PPUSH
14822: CALL_OW 440
14826: NOT
14827: AND
14828: IFFALSE 14832
// exit ;
14830: GO 14840
// result := true ;
14832: LD_ADDR_VAR 0 6
14836: PUSH
14837: LD_INT 1
14839: ST_TO_ADDR
// end ;
14840: LD_VAR 0 6
14844: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
14855: PPUSH
14856: PPUSH
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
14866: PPUSH
14867: PPUSH
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
14873: PPUSH
14874: PPUSH
14875: PPUSH
14876: PPUSH
14877: PPUSH
14878: PPUSH
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
14883: PPUSH
14884: PPUSH
14885: PPUSH
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
14891: PPUSH
14892: PPUSH
14893: PPUSH
14894: PPUSH
14895: PPUSH
14896: PPUSH
14897: PPUSH
14898: PPUSH
14899: PPUSH
14900: PPUSH
14901: PPUSH
14902: PPUSH
14903: PPUSH
14904: PPUSH
// result = [ ] ;
14905: LD_ADDR_VAR 0 7
14909: PUSH
14910: EMPTY
14911: ST_TO_ADDR
// temp_list = [ ] ;
14912: LD_ADDR_VAR 0 9
14916: PUSH
14917: EMPTY
14918: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14919: LD_VAR 0 4
14923: PUSH
14924: LD_INT 0
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: LD_INT 3
14935: PUSH
14936: LD_INT 4
14938: PUSH
14939: LD_INT 5
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: IN
14950: NOT
14951: PUSH
14952: LD_VAR 0 1
14956: PUSH
14957: LD_INT 0
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: IN
14967: PUSH
14968: LD_VAR 0 5
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: LD_INT 2
14978: PUSH
14979: LD_INT 3
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: IN
14987: NOT
14988: AND
14989: OR
14990: IFFALSE 14994
// exit ;
14992: GO 33385
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14994: LD_VAR 0 1
14998: PUSH
14999: LD_INT 6
15001: PUSH
15002: LD_INT 7
15004: PUSH
15005: LD_INT 8
15007: PUSH
15008: LD_INT 13
15010: PUSH
15011: LD_INT 12
15013: PUSH
15014: LD_INT 15
15016: PUSH
15017: LD_INT 11
15019: PUSH
15020: LD_INT 14
15022: PUSH
15023: LD_INT 10
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: IN
15037: IFFALSE 15047
// btype = b_lab ;
15039: LD_ADDR_VAR 0 1
15043: PUSH
15044: LD_INT 6
15046: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15047: LD_VAR 0 6
15051: PUSH
15052: LD_INT 0
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: IN
15066: NOT
15067: PUSH
15068: LD_VAR 0 1
15072: PUSH
15073: LD_INT 0
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 3
15084: PUSH
15085: LD_INT 6
15087: PUSH
15088: LD_INT 36
15090: PUSH
15091: LD_INT 4
15093: PUSH
15094: LD_INT 5
15096: PUSH
15097: LD_INT 31
15099: PUSH
15100: LD_INT 32
15102: PUSH
15103: LD_INT 33
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: IN
15119: NOT
15120: PUSH
15121: LD_VAR 0 6
15125: PUSH
15126: LD_INT 1
15128: EQUAL
15129: AND
15130: OR
15131: PUSH
15132: LD_VAR 0 1
15136: PUSH
15137: LD_INT 2
15139: PUSH
15140: LD_INT 3
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: IN
15147: NOT
15148: PUSH
15149: LD_VAR 0 6
15153: PUSH
15154: LD_INT 2
15156: EQUAL
15157: AND
15158: OR
15159: IFFALSE 15169
// mode = 0 ;
15161: LD_ADDR_VAR 0 6
15165: PUSH
15166: LD_INT 0
15168: ST_TO_ADDR
// case mode of 0 :
15169: LD_VAR 0 6
15173: PUSH
15174: LD_INT 0
15176: DOUBLE
15177: EQUAL
15178: IFTRUE 15182
15180: GO 26635
15182: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15183: LD_ADDR_VAR 0 11
15187: PUSH
15188: LD_INT 0
15190: PUSH
15191: LD_INT 0
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: LD_INT 1
15203: NEG
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 1
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 0
15231: PUSH
15232: LD_INT 1
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 1
15241: NEG
15242: PUSH
15243: LD_INT 0
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 1
15252: NEG
15253: PUSH
15254: LD_INT 1
15256: NEG
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 1
15264: NEG
15265: PUSH
15266: LD_INT 2
15268: NEG
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: LD_INT 2
15279: NEG
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 1
15287: PUSH
15288: LD_INT 1
15290: NEG
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 1
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 0
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 1
15318: NEG
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: LD_INT 3
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 0
15339: PUSH
15340: LD_INT 3
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 1
15349: NEG
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15376: LD_ADDR_VAR 0 12
15380: PUSH
15381: LD_INT 0
15383: PUSH
15384: LD_INT 0
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 0
15393: PUSH
15394: LD_INT 1
15396: NEG
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: LD_INT 1
15404: PUSH
15405: LD_INT 0
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: LD_INT 1
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 0
15424: PUSH
15425: LD_INT 1
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 1
15434: NEG
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 1
15445: NEG
15446: PUSH
15447: LD_INT 1
15449: NEG
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: LD_INT 1
15460: NEG
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: LD_INT 0
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 2
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 1
15488: NEG
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 2
15499: NEG
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 2
15510: NEG
15511: PUSH
15512: LD_INT 1
15514: NEG
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 2
15522: NEG
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 3
15533: NEG
15534: PUSH
15535: LD_INT 0
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 3
15544: NEG
15545: PUSH
15546: LD_INT 1
15548: NEG
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15572: LD_ADDR_VAR 0 13
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 0
15589: PUSH
15590: LD_INT 1
15592: NEG
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 1
15600: PUSH
15601: LD_INT 0
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 0
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 1
15630: NEG
15631: PUSH
15632: LD_INT 0
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 1
15641: NEG
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 1
15653: NEG
15654: PUSH
15655: LD_INT 2
15657: NEG
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: LD_INT 2
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 2
15695: NEG
15696: PUSH
15697: LD_INT 1
15699: NEG
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 2
15707: NEG
15708: PUSH
15709: LD_INT 2
15711: NEG
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 2
15719: NEG
15720: PUSH
15721: LD_INT 3
15723: NEG
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 3
15731: NEG
15732: PUSH
15733: LD_INT 2
15735: NEG
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 3
15743: NEG
15744: PUSH
15745: LD_INT 3
15747: NEG
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15771: LD_ADDR_VAR 0 14
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: LD_INT 0
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 0
15788: PUSH
15789: LD_INT 1
15791: NEG
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 1
15799: PUSH
15800: LD_INT 0
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: LD_INT 1
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 0
15819: PUSH
15820: LD_INT 1
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 1
15829: NEG
15830: PUSH
15831: LD_INT 0
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 1
15840: NEG
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 1
15852: NEG
15853: PUSH
15854: LD_INT 2
15856: NEG
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 0
15864: PUSH
15865: LD_INT 2
15867: NEG
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: LD_INT 1
15878: NEG
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 0
15896: PUSH
15897: LD_INT 2
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 1
15906: NEG
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 1
15917: NEG
15918: PUSH
15919: LD_INT 3
15921: NEG
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 0
15929: PUSH
15930: LD_INT 3
15932: NEG
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 1
15940: PUSH
15941: LD_INT 2
15943: NEG
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15967: LD_ADDR_VAR 0 15
15971: PUSH
15972: LD_INT 0
15974: PUSH
15975: LD_INT 0
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: LD_INT 1
15987: NEG
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 1
15995: PUSH
15996: LD_INT 0
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 1
16005: PUSH
16006: LD_INT 1
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: LD_INT 1
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 1
16025: NEG
16026: PUSH
16027: LD_INT 0
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 1
16036: NEG
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: LD_INT 1
16051: NEG
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: LD_INT 0
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: NEG
16080: PUSH
16081: LD_INT 1
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 2
16090: NEG
16091: PUSH
16092: LD_INT 0
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 2
16101: NEG
16102: PUSH
16103: LD_INT 1
16105: NEG
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 2
16113: PUSH
16114: LD_INT 1
16116: NEG
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 3
16124: PUSH
16125: LD_INT 0
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 3
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16160: LD_ADDR_VAR 0 16
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: LD_INT 1
16180: NEG
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 0
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 1
16218: NEG
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 1
16229: NEG
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 1
16241: NEG
16242: PUSH
16243: LD_INT 2
16245: NEG
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: LD_INT 2
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 2
16283: NEG
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 2
16295: NEG
16296: PUSH
16297: LD_INT 2
16299: NEG
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 3
16307: PUSH
16308: LD_INT 2
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 3
16317: PUSH
16318: LD_INT 3
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16353: LD_ADDR_VAR 0 17
16357: PUSH
16358: LD_INT 0
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 0
16370: PUSH
16371: LD_INT 1
16373: NEG
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 1
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 1
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 0
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: NEG
16412: PUSH
16413: LD_INT 0
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 1
16422: NEG
16423: PUSH
16424: LD_INT 1
16426: NEG
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: NEG
16435: PUSH
16436: LD_INT 2
16438: NEG
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 0
16446: PUSH
16447: LD_INT 2
16449: NEG
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: LD_INT 1
16460: NEG
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 0
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 2
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: LD_INT 2
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 1
16518: NEG
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 2
16529: NEG
16530: PUSH
16531: LD_INT 0
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 2
16540: NEG
16541: PUSH
16542: LD_INT 1
16544: NEG
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 2
16552: NEG
16553: PUSH
16554: LD_INT 2
16556: NEG
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16583: LD_ADDR_VAR 0 18
16587: PUSH
16588: LD_INT 0
16590: PUSH
16591: LD_INT 0
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 0
16600: PUSH
16601: LD_INT 1
16603: NEG
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 1
16611: PUSH
16612: LD_INT 0
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 0
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 1
16641: NEG
16642: PUSH
16643: LD_INT 0
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 1
16652: NEG
16653: PUSH
16654: LD_INT 1
16656: NEG
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 1
16664: NEG
16665: PUSH
16666: LD_INT 2
16668: NEG
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 0
16676: PUSH
16677: LD_INT 2
16679: NEG
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: LD_INT 1
16690: NEG
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 2
16698: PUSH
16699: LD_INT 0
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 2
16708: PUSH
16709: LD_INT 1
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 2
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 1
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 0
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 1
16748: NEG
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 2
16759: NEG
16760: PUSH
16761: LD_INT 0
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 2
16770: NEG
16771: PUSH
16772: LD_INT 1
16774: NEG
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 2
16782: NEG
16783: PUSH
16784: LD_INT 2
16786: NEG
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16813: LD_ADDR_VAR 0 19
16817: PUSH
16818: LD_INT 0
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 0
16830: PUSH
16831: LD_INT 1
16833: NEG
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 0
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 1
16871: NEG
16872: PUSH
16873: LD_INT 0
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 1
16882: NEG
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: NEG
16895: PUSH
16896: LD_INT 2
16898: NEG
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 0
16906: PUSH
16907: LD_INT 2
16909: NEG
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 2
16938: PUSH
16939: LD_INT 1
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 2
16948: PUSH
16949: LD_INT 2
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 1
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 0
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 2
16989: NEG
16990: PUSH
16991: LD_INT 0
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 2
17000: NEG
17001: PUSH
17002: LD_INT 1
17004: NEG
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 2
17012: NEG
17013: PUSH
17014: LD_INT 2
17016: NEG
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17043: LD_ADDR_VAR 0 20
17047: PUSH
17048: LD_INT 0
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 0
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 1
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 0
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: NEG
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 1
17112: NEG
17113: PUSH
17114: LD_INT 1
17116: NEG
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: LD_INT 2
17128: NEG
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: LD_INT 2
17139: NEG
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 2
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 2
17178: PUSH
17179: LD_INT 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 1
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 0
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: NEG
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 2
17219: NEG
17220: PUSH
17221: LD_INT 0
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 2
17230: NEG
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 2
17242: NEG
17243: PUSH
17244: LD_INT 2
17246: NEG
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17273: LD_ADDR_VAR 0 21
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 1
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 0
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 1
17331: NEG
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 1
17342: NEG
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 1
17354: NEG
17355: PUSH
17356: LD_INT 2
17358: NEG
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: LD_INT 2
17369: NEG
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: LD_INT 1
17380: NEG
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 2
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 2
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 1
17418: PUSH
17419: LD_INT 2
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 2
17449: NEG
17450: PUSH
17451: LD_INT 0
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 2
17460: NEG
17461: PUSH
17462: LD_INT 1
17464: NEG
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 2
17472: NEG
17473: PUSH
17474: LD_INT 2
17476: NEG
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17503: LD_ADDR_VAR 0 22
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: NEG
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 2
17588: NEG
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: LD_INT 2
17599: NEG
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 2
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 2
17679: NEG
17680: PUSH
17681: LD_INT 0
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: NEG
17691: PUSH
17692: LD_INT 1
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: NEG
17703: PUSH
17704: LD_INT 2
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17733: LD_ADDR_VAR 0 23
17737: PUSH
17738: LD_INT 0
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 0
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: NEG
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: LD_INT 2
17818: NEG
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: LD_INT 2
17829: NEG
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 2
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 2
17868: PUSH
17869: LD_INT 2
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: LD_INT 2
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: NEG
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: NEG
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: NEG
17933: PUSH
17934: LD_INT 2
17936: NEG
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 2
17944: NEG
17945: PUSH
17946: LD_INT 3
17948: NEG
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: NEG
17957: PUSH
17958: LD_INT 3
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: LD_INT 2
17971: NEG
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: LD_INT 1
17982: NEG
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18013: LD_ADDR_VAR 0 24
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: LD_INT 1
18033: NEG
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 1
18071: NEG
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 1
18082: NEG
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: LD_INT 2
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 2
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 2
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 2
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: LD_INT 2
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 2
18189: NEG
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: NEG
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: LD_INT 2
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: LD_INT 2
18227: NEG
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 3
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18289: LD_ADDR_VAR 0 25
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: LD_INT 0
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: LD_INT 1
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 0
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: NEG
18348: PUSH
18349: LD_INT 0
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 1
18358: NEG
18359: PUSH
18360: LD_INT 1
18362: NEG
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: LD_INT 2
18374: NEG
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: LD_INT 2
18385: NEG
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 1
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 1
18454: NEG
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 2
18465: NEG
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 2
18476: NEG
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 2
18488: NEG
18489: PUSH
18490: LD_INT 2
18492: NEG
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: LD_INT 1
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 3
18510: PUSH
18511: LD_INT 2
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 2
18520: PUSH
18521: LD_INT 3
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: LD_INT 3
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18563: LD_ADDR_VAR 0 26
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: NEG
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: LD_INT 2
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: LD_INT 2
18659: NEG
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: NEG
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: NEG
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: NEG
18763: PUSH
18764: LD_INT 2
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: LD_INT 3
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: LD_INT 2
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 2
18805: NEG
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18839: LD_ADDR_VAR 0 27
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 1
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 0
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: NEG
18921: PUSH
18922: LD_INT 2
18924: NEG
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 2
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 1
19004: NEG
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: NEG
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 2
19026: NEG
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: NEG
19039: PUSH
19040: LD_INT 2
19042: NEG
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 1
19050: NEG
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: NEG
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 3
19072: NEG
19073: PUSH
19074: LD_INT 1
19076: NEG
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 3
19084: NEG
19085: PUSH
19086: LD_INT 2
19088: NEG
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19119: LD_ADDR_VAR 0 28
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: LD_INT 1
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: NEG
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 2
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 2
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 2
19254: PUSH
19255: LD_INT 2
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 2
19318: NEG
19319: PUSH
19320: LD_INT 2
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 2
19330: NEG
19331: PUSH
19332: LD_INT 3
19334: NEG
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 3
19346: NEG
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 3
19354: NEG
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 3
19366: NEG
19367: PUSH
19368: LD_INT 2
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19401: LD_ADDR_VAR 0 29
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 0
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: NEG
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: NEG
19471: PUSH
19472: LD_INT 1
19474: NEG
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: LD_INT 2
19486: NEG
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: LD_INT 2
19497: NEG
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 1
19508: NEG
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: NEG
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: LD_INT 2
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: LD_INT 3
19595: NEG
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 1
19606: NEG
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 3
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: LD_INT 3
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: NEG
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 3
19645: NEG
19646: PUSH
19647: LD_INT 2
19649: NEG
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19680: LD_ADDR_VAR 0 30
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 0
19697: PUSH
19698: LD_INT 1
19700: NEG
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 1
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: LD_INT 1
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 2
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 2
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 1
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: NEG
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 2
19857: NEG
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 3
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 3
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 3
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: NEG
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 3
19923: NEG
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19958: LD_ADDR_VAR 0 31
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 0
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 1
20027: NEG
20028: PUSH
20029: LD_INT 1
20031: NEG
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: LD_INT 2
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 2
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 2
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: LD_INT 2
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: NEG
20124: PUSH
20125: LD_INT 1
20127: NEG
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 2
20135: NEG
20136: PUSH
20137: LD_INT 2
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 2
20147: NEG
20148: PUSH
20149: LD_INT 3
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 3
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: PUSH
20181: LD_INT 3
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 3
20201: NEG
20202: PUSH
20203: LD_INT 2
20205: NEG
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20236: LD_ADDR_VAR 0 32
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: LD_INT 1
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 1
20294: NEG
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: NEG
20306: PUSH
20307: LD_INT 1
20309: NEG
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: NEG
20318: PUSH
20319: LD_INT 2
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: LD_INT 2
20332: NEG
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 2
20413: NEG
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: LD_INT 3
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: LD_INT 2
20440: NEG
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 3
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: LD_INT 3
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: LD_INT 1
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 3
20479: NEG
20480: PUSH
20481: LD_INT 1
20483: NEG
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20514: LD_ADDR_VAR 0 33
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 1
20534: NEG
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: NEG
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: LD_INT 2
20599: NEG
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: PUSH
20608: LD_INT 1
20610: NEG
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 2
20669: NEG
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: NEG
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 2
20692: NEG
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 3
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 3
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: LD_INT 3
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: LD_INT 2
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 3
20758: NEG
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20793: LD_ADDR_VAR 0 34
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: LD_INT 1
20813: NEG
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: LD_INT 2
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 0
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 2
20949: NEG
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: NEG
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 2
20976: NEG
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: LD_INT 3
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 3
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: LD_INT 3
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 2
21027: NEG
21028: PUSH
21029: LD_INT 1
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 3
21038: NEG
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21073: LD_ADDR_VAR 0 35
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 2
21154: PUSH
21155: LD_INT 1
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 2
21164: NEG
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21185: LD_ADDR_VAR 0 36
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21297: LD_ADDR_VAR 0 37
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: LD_INT 1
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 1
21355: NEG
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: LD_INT 1
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21409: LD_ADDR_VAR 0 38
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: NEG
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21521: LD_ADDR_VAR 0 39
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 0
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: LD_INT 0
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: LD_INT 1
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 0
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 1
21579: NEG
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: LD_INT 2
21606: NEG
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21633: LD_ADDR_VAR 0 40
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 0
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 1
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 0
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: LD_INT 1
21706: NEG
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21745: LD_ADDR_VAR 0 41
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: LD_INT 1
21765: NEG
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: LD_INT 1
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: LD_INT 1
21818: NEG
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: LD_INT 2
21830: NEG
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 2
21900: NEG
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 2
21911: NEG
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 2
21923: NEG
21924: PUSH
21925: LD_INT 2
21927: NEG
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: LD_INT 3
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 2
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 3
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 3
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 3
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: LD_INT 3
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: NEG
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 3
22019: NEG
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 3
22030: NEG
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 3
22042: NEG
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 3
22054: NEG
22055: PUSH
22056: LD_INT 3
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22095: LD_ADDR_VAR 0 42
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: LD_INT 2
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 1
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 2
22261: NEG
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: LD_INT 2
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 2
22285: NEG
22286: PUSH
22287: LD_INT 3
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: LD_INT 3
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 0
22309: PUSH
22310: LD_INT 3
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: LD_INT 2
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 3
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 3
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: LD_INT 3
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: LD_INT 3
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 3
22392: NEG
22393: PUSH
22394: LD_INT 2
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 3
22404: NEG
22405: PUSH
22406: LD_INT 3
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22445: LD_ADDR_VAR 0 43
22449: PUSH
22450: LD_INT 0
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 0
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: LD_INT 2
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: LD_INT 2
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: NEG
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: NEG
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: LD_INT 3
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 3
22649: NEG
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: LD_INT 2
22660: NEG
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 3
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 3
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: LD_INT 3
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 3
22741: NEG
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 3
22752: NEG
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22793: LD_ADDR_VAR 0 44
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 0
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 1
22874: NEG
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 2
22959: NEG
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 2
22971: NEG
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 2
22983: NEG
22984: PUSH
22985: LD_INT 3
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 3
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 2
23056: NEG
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 3
23067: NEG
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 3
23078: NEG
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 3
23090: NEG
23091: PUSH
23092: LD_INT 2
23094: NEG
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 3
23102: NEG
23103: PUSH
23104: LD_INT 3
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23143: LD_ADDR_VAR 0 45
23147: PUSH
23148: LD_INT 0
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 1
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 2
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 1
23298: NEG
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 2
23321: NEG
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 3
23337: NEG
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: NEG
23346: PUSH
23347: LD_INT 3
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 3
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 2
23371: NEG
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 3
23379: PUSH
23380: LD_INT 2
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 3
23389: PUSH
23390: LD_INT 3
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 3
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: LD_INT 3
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 3
23440: NEG
23441: PUSH
23442: LD_INT 2
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 3
23452: NEG
23453: PUSH
23454: LD_INT 3
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23493: LD_ADDR_VAR 0 46
23497: PUSH
23498: LD_INT 0
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 1
23551: NEG
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: NEG
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 2
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 2
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 2
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 2
23670: NEG
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: LD_INT 3
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: LD_INT 3
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 3
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 3
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: LD_INT 3
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 2
23778: NEG
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 3
23789: NEG
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 3
23800: NEG
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23841: LD_ADDR_VAR 0 47
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: LD_INT 2
23926: NEG
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 2
23937: NEG
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 2
23956: NEG
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 2
23968: NEG
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23992: LD_ADDR_VAR 0 48
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 1
24073: NEG
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24139: LD_ADDR_VAR 0 49
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 1
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24283: LD_ADDR_VAR 0 50
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24427: LD_ADDR_VAR 0 51
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: NEG
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 2
24550: NEG
24551: PUSH
24552: LD_INT 1
24554: NEG
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24574: LD_ADDR_VAR 0 52
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: LD_INT 2
24659: NEG
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: LD_INT 2
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24725: LD_ADDR_VAR 0 53
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: NEG
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 2
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: LD_INT 2
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: NEG
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 2
24912: NEG
24913: PUSH
24914: LD_INT 1
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: LD_INT 2
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24955: LD_ADDR_VAR 0 54
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: LD_INT 2
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: LD_INT 2
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: NEG
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 2
25154: NEG
25155: PUSH
25156: LD_INT 2
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25185: LD_ADDR_VAR 0 55
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 1
25243: NEG
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: NEG
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 2
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 2
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: NEG
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: NEG
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25415: LD_ADDR_VAR 0 56
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: LD_INT 2
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 2
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 2
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: NEG
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 2
25614: NEG
25615: PUSH
25616: LD_INT 2
25618: NEG
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25645: LD_ADDR_VAR 0 57
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 2
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 2
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: LD_INT 2
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25875: LD_ADDR_VAR 0 58
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 2
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: LD_INT 2
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26105: LD_ADDR_VAR 0 59
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26193: LD_ADDR_VAR 0 60
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26281: LD_ADDR_VAR 0 61
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26369: LD_ADDR_VAR 0 62
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26457: LD_ADDR_VAR 0 63
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26545: LD_ADDR_VAR 0 64
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: ST_TO_ADDR
// end ; 1 :
26633: GO 32530
26635: LD_INT 1
26637: DOUBLE
26638: EQUAL
26639: IFTRUE 26643
26641: GO 29266
26643: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26644: LD_ADDR_VAR 0 11
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 3
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: PUSH
26675: LD_INT 2
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: LIST
26687: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26688: LD_ADDR_VAR 0 12
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 3
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 3
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26729: LD_ADDR_VAR 0 13
26733: PUSH
26734: LD_INT 3
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 3
26746: PUSH
26747: LD_INT 3
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 3
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26769: LD_ADDR_VAR 0 14
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26810: LD_ADDR_VAR 0 15
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 3
26828: NEG
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 3
26839: NEG
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26854: LD_ADDR_VAR 0 16
26858: PUSH
26859: LD_INT 2
26861: NEG
26862: PUSH
26863: LD_INT 3
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 3
26873: NEG
26874: PUSH
26875: LD_INT 2
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 3
26885: NEG
26886: PUSH
26887: LD_INT 3
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: LIST
26899: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26900: LD_ADDR_VAR 0 17
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 3
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 3
26922: NEG
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: LIST
26943: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26944: LD_ADDR_VAR 0 18
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 3
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 3
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26985: LD_ADDR_VAR 0 19
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: LD_INT 2
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 3
27002: PUSH
27003: LD_INT 3
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 2
27012: PUSH
27013: LD_INT 3
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27025: LD_ADDR_VAR 0 20
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 3
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 3
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: LIST
27065: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27066: LD_ADDR_VAR 0 21
27070: PUSH
27071: LD_INT 2
27073: NEG
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 3
27084: NEG
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 3
27095: NEG
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27110: LD_ADDR_VAR 0 22
27114: PUSH
27115: LD_INT 2
27117: NEG
27118: PUSH
27119: LD_INT 3
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 3
27129: NEG
27130: PUSH
27131: LD_INT 2
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 3
27141: NEG
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27156: LD_ADDR_VAR 0 23
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 3
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 4
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: LD_INT 3
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27200: LD_ADDR_VAR 0 24
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 3
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 4
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27241: LD_ADDR_VAR 0 25
27245: PUSH
27246: LD_INT 3
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 4
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 3
27268: PUSH
27269: LD_INT 4
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27281: LD_ADDR_VAR 0 26
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: LD_INT 3
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 4
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27322: LD_ADDR_VAR 0 27
27326: PUSH
27327: LD_INT 3
27329: NEG
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 3
27340: NEG
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 4
27351: NEG
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27366: LD_ADDR_VAR 0 28
27370: PUSH
27371: LD_INT 3
27373: NEG
27374: PUSH
27375: LD_INT 3
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 3
27385: NEG
27386: PUSH
27387: LD_INT 4
27389: NEG
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 4
27397: NEG
27398: PUSH
27399: LD_INT 3
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27412: LD_ADDR_VAR 0 29
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 3
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: LD_INT 3
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: LD_INT 4
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 4
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: LD_INT 3
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 5
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 5
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: LD_INT 4
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: LD_INT 6
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 6
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: LD_INT 5
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27567: LD_ADDR_VAR 0 30
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 3
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 4
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 4
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 4
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 5
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 5
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 5
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 6
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 6
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27710: LD_ADDR_VAR 0 31
27714: PUSH
27715: LD_INT 3
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: LD_INT 3
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 2
27737: PUSH
27738: LD_INT 3
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 4
27747: PUSH
27748: LD_INT 3
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 4
27757: PUSH
27758: LD_INT 4
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 3
27767: PUSH
27768: LD_INT 4
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 5
27777: PUSH
27778: LD_INT 4
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 5
27787: PUSH
27788: LD_INT 5
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 4
27797: PUSH
27798: LD_INT 5
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 6
27807: PUSH
27808: LD_INT 5
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 6
27817: PUSH
27818: LD_INT 6
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 5
27827: PUSH
27828: LD_INT 6
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27849: LD_ADDR_VAR 0 32
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 3
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: LD_INT 4
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 4
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: LD_INT 3
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 5
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 5
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: LD_INT 4
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 6
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 6
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 5
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27992: LD_ADDR_VAR 0 33
27996: PUSH
27997: LD_INT 2
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 3
28010: NEG
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: NEG
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 3
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 4
28044: NEG
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 4
28055: NEG
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 4
28067: NEG
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 5
28078: NEG
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 5
28089: NEG
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 5
28101: NEG
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 6
28112: NEG
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 6
28123: NEG
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28147: LD_ADDR_VAR 0 34
28151: PUSH
28152: LD_INT 2
28154: NEG
28155: PUSH
28156: LD_INT 3
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 3
28166: NEG
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 3
28178: NEG
28179: PUSH
28180: LD_INT 3
28182: NEG
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 3
28190: NEG
28191: PUSH
28192: LD_INT 4
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 4
28202: NEG
28203: PUSH
28204: LD_INT 3
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 4
28214: NEG
28215: PUSH
28216: LD_INT 4
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 4
28226: NEG
28227: PUSH
28228: LD_INT 5
28230: NEG
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 5
28238: NEG
28239: PUSH
28240: LD_INT 4
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 5
28250: NEG
28251: PUSH
28252: LD_INT 5
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 5
28262: NEG
28263: PUSH
28264: LD_INT 6
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 6
28274: NEG
28275: PUSH
28276: LD_INT 5
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 6
28286: NEG
28287: PUSH
28288: LD_INT 6
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28310: LD_ADDR_VAR 0 41
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: NEG
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28354: LD_ADDR_VAR 0 42
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28395: LD_ADDR_VAR 0 43
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 3
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28435: LD_ADDR_VAR 0 44
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28476: LD_ADDR_VAR 0 45
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28520: LD_ADDR_VAR 0 46
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: LD_INT 2
28531: NEG
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 2
28539: NEG
28540: PUSH
28541: LD_INT 3
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 3
28551: NEG
28552: PUSH
28553: LD_INT 2
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28566: LD_ADDR_VAR 0 47
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: LD_INT 3
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 3
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28599: LD_ADDR_VAR 0 48
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28630: LD_ADDR_VAR 0 49
28634: PUSH
28635: LD_INT 3
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28659: LD_ADDR_VAR 0 50
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 3
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: LD_INT 3
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28688: LD_ADDR_VAR 0 51
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 2
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28719: LD_ADDR_VAR 0 52
28723: PUSH
28724: LD_INT 3
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 3
28738: NEG
28739: PUSH
28740: LD_INT 2
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28752: LD_ADDR_VAR 0 53
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 3
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 3
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: LD_INT 2
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28796: LD_ADDR_VAR 0 54
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 3
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28837: LD_ADDR_VAR 0 55
28841: PUSH
28842: LD_INT 3
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 3
28854: PUSH
28855: LD_INT 3
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 2
28864: PUSH
28865: LD_INT 3
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: LIST
28876: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28877: LD_ADDR_VAR 0 56
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 3
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28918: LD_ADDR_VAR 0 57
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 3
28936: NEG
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 3
28947: NEG
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28962: LD_ADDR_VAR 0 58
28966: PUSH
28967: LD_INT 2
28969: NEG
28970: PUSH
28971: LD_INT 3
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 3
28981: NEG
28982: PUSH
28983: LD_INT 2
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 3
28993: NEG
28994: PUSH
28995: LD_INT 3
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29008: LD_ADDR_VAR 0 59
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29052: LD_ADDR_VAR 0 60
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29093: LD_ADDR_VAR 0 61
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29133: LD_ADDR_VAR 0 62
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29174: LD_ADDR_VAR 0 63
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: NEG
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 2
29203: NEG
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29218: LD_ADDR_VAR 0 64
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 2
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// end ; 2 :
29264: GO 32530
29266: LD_INT 2
29268: DOUBLE
29269: EQUAL
29270: IFTRUE 29274
29272: GO 32529
29274: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29275: LD_ADDR_VAR 0 29
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 4
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 5
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 5
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 4
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 2
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 5
29365: PUSH
29366: LD_INT 2
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 4
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 4
29405: PUSH
29406: LD_INT 4
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: LD_INT 4
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 4
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: LD_INT 4
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: LD_INT 4
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 4
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 5
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 5
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: LD_INT 4
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: LD_INT 5
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: NEG
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 3
29558: NEG
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 3
29569: NEG
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 4
29614: NEG
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 4
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 4
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 2
29649: NEG
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 4
29660: NEG
29661: PUSH
29662: LD_INT 4
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 4
29672: NEG
29673: PUSH
29674: LD_INT 5
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 3
29684: NEG
29685: PUSH
29686: LD_INT 4
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: LD_INT 3
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 4
29708: NEG
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 5
29720: NEG
29721: PUSH
29722: LD_INT 4
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 5
29732: NEG
29733: PUSH
29734: LD_INT 5
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: NEG
29745: PUSH
29746: LD_INT 5
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 5
29756: NEG
29757: PUSH
29758: LD_INT 3
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29813: LD_ADDR_VAR 0 30
29817: PUSH
29818: LD_INT 4
29820: PUSH
29821: LD_INT 4
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 4
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 5
29840: PUSH
29841: LD_INT 4
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 5
29850: PUSH
29851: LD_INT 5
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 4
29860: PUSH
29861: LD_INT 5
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: LD_INT 4
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 5
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 5
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: LD_INT 4
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: LD_INT 4
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: LD_INT 4
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 2
29992: NEG
29993: PUSH
29994: LD_INT 2
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 4
30003: NEG
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 4
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 3
30026: NEG
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 3
30037: NEG
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 4
30048: NEG
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 5
30059: NEG
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 5
30070: NEG
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 5
30082: NEG
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 3
30094: NEG
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 3
30105: NEG
30106: PUSH
30107: LD_INT 3
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: LD_INT 4
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: LD_INT 3
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 3
30153: NEG
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 4
30165: NEG
30166: PUSH
30167: LD_INT 3
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 4
30177: NEG
30178: PUSH
30179: LD_INT 4
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 2
30189: NEG
30190: PUSH
30191: LD_INT 4
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 4
30201: NEG
30202: PUSH
30203: LD_INT 2
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: LD_INT 4
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: LD_INT 5
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: LD_INT 4
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 3
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 4
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 5
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: LD_INT 3
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 2
30303: NEG
30304: PUSH
30305: LD_INT 5
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30360: LD_ADDR_VAR 0 31
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 4
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 5
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 5
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 4
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 1
30428: NEG
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 5
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: NEG
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: NEG
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 2
30483: NEG
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 4
30516: NEG
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 4
30527: NEG
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 4
30539: NEG
30540: PUSH
30541: LD_INT 2
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 2
30551: NEG
30552: PUSH
30553: LD_INT 2
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: LD_INT 4
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: LD_INT 5
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: LD_INT 4
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 3
30598: NEG
30599: PUSH
30600: LD_INT 3
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 4
30610: NEG
30611: PUSH
30612: LD_INT 3
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 5
30622: NEG
30623: PUSH
30624: LD_INT 4
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 5
30634: NEG
30635: PUSH
30636: LD_INT 5
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 3
30646: NEG
30647: PUSH
30648: LD_INT 5
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 5
30658: NEG
30659: PUSH
30660: LD_INT 3
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 3
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: LD_INT 4
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: LD_INT 3
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 4
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: LD_INT 4
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 4
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 4
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 5
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 5
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 4
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 3
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 5
30855: PUSH
30856: LD_INT 2
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30910: LD_ADDR_VAR 0 32
30914: PUSH
30915: LD_INT 4
30917: NEG
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 4
30962: NEG
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 5
30973: NEG
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 5
30984: NEG
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 5
30996: NEG
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 3
31019: NEG
31020: PUSH
31021: LD_INT 3
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: LD_INT 4
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: LD_INT 3
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: NEG
31056: PUSH
31057: LD_INT 2
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 3
31067: NEG
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 4
31079: NEG
31080: PUSH
31081: LD_INT 3
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 4
31091: NEG
31092: PUSH
31093: LD_INT 4
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: LD_INT 4
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: NEG
31116: PUSH
31117: LD_INT 2
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 4
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 5
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 4
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 3
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: LD_INT 4
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: LD_INT 5
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 3
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 5
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 3
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 4
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 4
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 4
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 4
31322: PUSH
31323: LD_INT 4
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 4
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 5
31342: PUSH
31343: LD_INT 4
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 5
31352: PUSH
31353: LD_INT 5
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 4
31362: PUSH
31363: LD_INT 5
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 3
31372: PUSH
31373: LD_INT 4
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 5
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 3
31402: PUSH
31403: LD_INT 5
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31457: LD_ADDR_VAR 0 33
31461: PUSH
31462: LD_INT 4
31464: NEG
31465: PUSH
31466: LD_INT 4
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 4
31476: NEG
31477: PUSH
31478: LD_INT 5
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 4
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 3
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 4
31512: NEG
31513: PUSH
31514: LD_INT 3
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 5
31524: NEG
31525: PUSH
31526: LD_INT 4
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 5
31536: NEG
31537: PUSH
31538: LD_INT 5
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: LD_INT 5
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 5
31560: NEG
31561: PUSH
31562: LD_INT 3
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 4
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: LD_INT 3
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 3
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 4
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 4
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 4
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 4
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 5
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 5
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 4
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 2
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 5
31757: PUSH
31758: LD_INT 2
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 4
31787: PUSH
31788: LD_INT 3
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 4
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 3
31807: PUSH
31808: LD_INT 4
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: LD_INT 3
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 4
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 4
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 4
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: LD_INT 3
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 4
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 5
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 5
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 4
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: LD_INT 5
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31995: LD_ADDR_VAR 0 34
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: LD_INT 4
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 5
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: LD_INT 4
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: LD_INT 3
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: LD_INT 4
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: LD_INT 5
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 3
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 2
32092: NEG
32093: PUSH
32094: LD_INT 5
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 4
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 4
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 4
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 4
32197: PUSH
32198: LD_INT 4
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 4
32207: PUSH
32208: LD_INT 3
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 5
32217: PUSH
32218: LD_INT 4
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 5
32227: PUSH
32228: LD_INT 5
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 4
32237: PUSH
32238: LD_INT 5
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 3
32247: PUSH
32248: LD_INT 4
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: LD_INT 3
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 5
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 3
32277: PUSH
32278: LD_INT 5
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 3
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: LD_INT 2
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: LD_INT 4
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: LD_INT 4
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: LD_INT 3
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 4
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 2
32369: NEG
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 4
32380: NEG
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 4
32391: NEG
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 3
32414: NEG
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 4
32425: NEG
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 5
32436: NEG
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 5
32447: NEG
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 5
32459: NEG
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 3
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// end ; end ;
32527: GO 32530
32529: POP
// case btype of b_depot , b_warehouse :
32530: LD_VAR 0 1
32534: PUSH
32535: LD_INT 0
32537: DOUBLE
32538: EQUAL
32539: IFTRUE 32549
32541: LD_INT 1
32543: DOUBLE
32544: EQUAL
32545: IFTRUE 32549
32547: GO 32750
32549: POP
// case nation of nation_american :
32550: LD_VAR 0 5
32554: PUSH
32555: LD_INT 1
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32619
32563: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32564: LD_ADDR_VAR 0 9
32568: PUSH
32569: LD_VAR 0 11
32573: PUSH
32574: LD_VAR 0 12
32578: PUSH
32579: LD_VAR 0 13
32583: PUSH
32584: LD_VAR 0 14
32588: PUSH
32589: LD_VAR 0 15
32593: PUSH
32594: LD_VAR 0 16
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: PUSH
32607: LD_VAR 0 4
32611: PUSH
32612: LD_INT 1
32614: PLUS
32615: ARRAY
32616: ST_TO_ADDR
32617: GO 32748
32619: LD_INT 2
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32683
32627: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32628: LD_ADDR_VAR 0 9
32632: PUSH
32633: LD_VAR 0 17
32637: PUSH
32638: LD_VAR 0 18
32642: PUSH
32643: LD_VAR 0 19
32647: PUSH
32648: LD_VAR 0 20
32652: PUSH
32653: LD_VAR 0 21
32657: PUSH
32658: LD_VAR 0 22
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: PUSH
32671: LD_VAR 0 4
32675: PUSH
32676: LD_INT 1
32678: PLUS
32679: ARRAY
32680: ST_TO_ADDR
32681: GO 32748
32683: LD_INT 3
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32691
32689: GO 32747
32691: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32692: LD_ADDR_VAR 0 9
32696: PUSH
32697: LD_VAR 0 23
32701: PUSH
32702: LD_VAR 0 24
32706: PUSH
32707: LD_VAR 0 25
32711: PUSH
32712: LD_VAR 0 26
32716: PUSH
32717: LD_VAR 0 27
32721: PUSH
32722: LD_VAR 0 28
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: LD_VAR 0 4
32739: PUSH
32740: LD_INT 1
32742: PLUS
32743: ARRAY
32744: ST_TO_ADDR
32745: GO 32748
32747: POP
32748: GO 33303
32750: LD_INT 2
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32764
32756: LD_INT 3
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32820
32764: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32765: LD_ADDR_VAR 0 9
32769: PUSH
32770: LD_VAR 0 29
32774: PUSH
32775: LD_VAR 0 30
32779: PUSH
32780: LD_VAR 0 31
32784: PUSH
32785: LD_VAR 0 32
32789: PUSH
32790: LD_VAR 0 33
32794: PUSH
32795: LD_VAR 0 34
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: PUSH
32808: LD_VAR 0 4
32812: PUSH
32813: LD_INT 1
32815: PLUS
32816: ARRAY
32817: ST_TO_ADDR
32818: GO 33303
32820: LD_INT 16
32822: DOUBLE
32823: EQUAL
32824: IFTRUE 32882
32826: LD_INT 17
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32882
32832: LD_INT 18
32834: DOUBLE
32835: EQUAL
32836: IFTRUE 32882
32838: LD_INT 19
32840: DOUBLE
32841: EQUAL
32842: IFTRUE 32882
32844: LD_INT 22
32846: DOUBLE
32847: EQUAL
32848: IFTRUE 32882
32850: LD_INT 20
32852: DOUBLE
32853: EQUAL
32854: IFTRUE 32882
32856: LD_INT 21
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32882
32862: LD_INT 23
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32882
32868: LD_INT 24
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32882
32874: LD_INT 25
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32938
32882: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32883: LD_ADDR_VAR 0 9
32887: PUSH
32888: LD_VAR 0 35
32892: PUSH
32893: LD_VAR 0 36
32897: PUSH
32898: LD_VAR 0 37
32902: PUSH
32903: LD_VAR 0 38
32907: PUSH
32908: LD_VAR 0 39
32912: PUSH
32913: LD_VAR 0 40
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: PUSH
32926: LD_VAR 0 4
32930: PUSH
32931: LD_INT 1
32933: PLUS
32934: ARRAY
32935: ST_TO_ADDR
32936: GO 33303
32938: LD_INT 6
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32994
32944: LD_INT 7
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32994
32950: LD_INT 8
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32994
32956: LD_INT 13
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32994
32962: LD_INT 12
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32994
32968: LD_INT 15
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32994
32974: LD_INT 11
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32994
32980: LD_INT 14
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32994
32986: LD_INT 10
32988: DOUBLE
32989: EQUAL
32990: IFTRUE 32994
32992: GO 33050
32994: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32995: LD_ADDR_VAR 0 9
32999: PUSH
33000: LD_VAR 0 41
33004: PUSH
33005: LD_VAR 0 42
33009: PUSH
33010: LD_VAR 0 43
33014: PUSH
33015: LD_VAR 0 44
33019: PUSH
33020: LD_VAR 0 45
33024: PUSH
33025: LD_VAR 0 46
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: PUSH
33038: LD_VAR 0 4
33042: PUSH
33043: LD_INT 1
33045: PLUS
33046: ARRAY
33047: ST_TO_ADDR
33048: GO 33303
33050: LD_INT 36
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33114
33058: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33059: LD_ADDR_VAR 0 9
33063: PUSH
33064: LD_VAR 0 47
33068: PUSH
33069: LD_VAR 0 48
33073: PUSH
33074: LD_VAR 0 49
33078: PUSH
33079: LD_VAR 0 50
33083: PUSH
33084: LD_VAR 0 51
33088: PUSH
33089: LD_VAR 0 52
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: PUSH
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 1
33109: PLUS
33110: ARRAY
33111: ST_TO_ADDR
33112: GO 33303
33114: LD_INT 4
33116: DOUBLE
33117: EQUAL
33118: IFTRUE 33140
33120: LD_INT 5
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33140
33126: LD_INT 34
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33140
33132: LD_INT 37
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33196
33140: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33141: LD_ADDR_VAR 0 9
33145: PUSH
33146: LD_VAR 0 53
33150: PUSH
33151: LD_VAR 0 54
33155: PUSH
33156: LD_VAR 0 55
33160: PUSH
33161: LD_VAR 0 56
33165: PUSH
33166: LD_VAR 0 57
33170: PUSH
33171: LD_VAR 0 58
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: PUSH
33184: LD_VAR 0 4
33188: PUSH
33189: LD_INT 1
33191: PLUS
33192: ARRAY
33193: ST_TO_ADDR
33194: GO 33303
33196: LD_INT 31
33198: DOUBLE
33199: EQUAL
33200: IFTRUE 33246
33202: LD_INT 32
33204: DOUBLE
33205: EQUAL
33206: IFTRUE 33246
33208: LD_INT 33
33210: DOUBLE
33211: EQUAL
33212: IFTRUE 33246
33214: LD_INT 27
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33246
33220: LD_INT 26
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33246
33226: LD_INT 28
33228: DOUBLE
33229: EQUAL
33230: IFTRUE 33246
33232: LD_INT 29
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33246
33238: LD_INT 30
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33302
33246: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33247: LD_ADDR_VAR 0 9
33251: PUSH
33252: LD_VAR 0 59
33256: PUSH
33257: LD_VAR 0 60
33261: PUSH
33262: LD_VAR 0 61
33266: PUSH
33267: LD_VAR 0 62
33271: PUSH
33272: LD_VAR 0 63
33276: PUSH
33277: LD_VAR 0 64
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: PUSH
33290: LD_VAR 0 4
33294: PUSH
33295: LD_INT 1
33297: PLUS
33298: ARRAY
33299: ST_TO_ADDR
33300: GO 33303
33302: POP
// temp_list2 = [ ] ;
33303: LD_ADDR_VAR 0 10
33307: PUSH
33308: EMPTY
33309: ST_TO_ADDR
// for i in temp_list do
33310: LD_ADDR_VAR 0 8
33314: PUSH
33315: LD_VAR 0 9
33319: PUSH
33320: FOR_IN
33321: IFFALSE 33373
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33323: LD_ADDR_VAR 0 10
33327: PUSH
33328: LD_VAR 0 10
33332: PUSH
33333: LD_VAR 0 8
33337: PUSH
33338: LD_INT 1
33340: ARRAY
33341: PUSH
33342: LD_VAR 0 2
33346: PLUS
33347: PUSH
33348: LD_VAR 0 8
33352: PUSH
33353: LD_INT 2
33355: ARRAY
33356: PUSH
33357: LD_VAR 0 3
33361: PLUS
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: EMPTY
33368: LIST
33369: ADD
33370: ST_TO_ADDR
33371: GO 33320
33373: POP
33374: POP
// result = temp_list2 ;
33375: LD_ADDR_VAR 0 7
33379: PUSH
33380: LD_VAR 0 10
33384: ST_TO_ADDR
// end ;
33385: LD_VAR 0 7
33389: RET
// export function EnemyInRange ( unit , dist ) ; begin
33390: LD_INT 0
33392: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: CALL_OW 255
33407: PPUSH
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL_OW 250
33417: PPUSH
33418: LD_VAR 0 1
33422: PPUSH
33423: CALL_OW 251
33427: PPUSH
33428: LD_VAR 0 2
33432: PPUSH
33433: CALL 6763 0 4
33437: PUSH
33438: LD_INT 4
33440: ARRAY
33441: ST_TO_ADDR
// end ;
33442: LD_VAR 0 3
33446: RET
// export function PlayerSeeMe ( unit ) ; begin
33447: LD_INT 0
33449: PPUSH
// result := See ( your_side , unit ) ;
33450: LD_ADDR_VAR 0 2
33454: PUSH
33455: LD_OWVAR 2
33459: PPUSH
33460: LD_VAR 0 1
33464: PPUSH
33465: CALL_OW 292
33469: ST_TO_ADDR
// end ;
33470: LD_VAR 0 2
33474: RET
// export function ReverseDir ( unit ) ; begin
33475: LD_INT 0
33477: PPUSH
// if not unit then
33478: LD_VAR 0 1
33482: NOT
33483: IFFALSE 33487
// exit ;
33485: GO 33510
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33487: LD_ADDR_VAR 0 2
33491: PUSH
33492: LD_VAR 0 1
33496: PPUSH
33497: CALL_OW 254
33501: PUSH
33502: LD_INT 3
33504: PLUS
33505: PUSH
33506: LD_INT 6
33508: MOD
33509: ST_TO_ADDR
// end ;
33510: LD_VAR 0 2
33514: RET
// export function ReverseArray ( array ) ; var i ; begin
33515: LD_INT 0
33517: PPUSH
33518: PPUSH
// if not array then
33519: LD_VAR 0 1
33523: NOT
33524: IFFALSE 33528
// exit ;
33526: GO 33583
// result := [ ] ;
33528: LD_ADDR_VAR 0 2
33532: PUSH
33533: EMPTY
33534: ST_TO_ADDR
// for i := array downto 1 do
33535: LD_ADDR_VAR 0 3
33539: PUSH
33540: DOUBLE
33541: LD_VAR 0 1
33545: INC
33546: ST_TO_ADDR
33547: LD_INT 1
33549: PUSH
33550: FOR_DOWNTO
33551: IFFALSE 33581
// result := Join ( result , array [ i ] ) ;
33553: LD_ADDR_VAR 0 2
33557: PUSH
33558: LD_VAR 0 2
33562: PPUSH
33563: LD_VAR 0 1
33567: PUSH
33568: LD_VAR 0 3
33572: ARRAY
33573: PPUSH
33574: CALL 38248 0 2
33578: ST_TO_ADDR
33579: GO 33550
33581: POP
33582: POP
// end ;
33583: LD_VAR 0 2
33587: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33588: LD_INT 0
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
// if not unit or not hexes then
33596: LD_VAR 0 1
33600: NOT
33601: PUSH
33602: LD_VAR 0 2
33606: NOT
33607: OR
33608: IFFALSE 33612
// exit ;
33610: GO 33735
// dist := 9999 ;
33612: LD_ADDR_VAR 0 5
33616: PUSH
33617: LD_INT 9999
33619: ST_TO_ADDR
// for i = 1 to hexes do
33620: LD_ADDR_VAR 0 4
33624: PUSH
33625: DOUBLE
33626: LD_INT 1
33628: DEC
33629: ST_TO_ADDR
33630: LD_VAR 0 2
33634: PUSH
33635: FOR_TO
33636: IFFALSE 33723
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33638: LD_ADDR_VAR 0 6
33642: PUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: LD_VAR 0 2
33652: PUSH
33653: LD_VAR 0 4
33657: ARRAY
33658: PUSH
33659: LD_INT 1
33661: ARRAY
33662: PPUSH
33663: LD_VAR 0 2
33667: PUSH
33668: LD_VAR 0 4
33672: ARRAY
33673: PUSH
33674: LD_INT 2
33676: ARRAY
33677: PPUSH
33678: CALL_OW 297
33682: ST_TO_ADDR
// if tdist < dist then
33683: LD_VAR 0 6
33687: PUSH
33688: LD_VAR 0 5
33692: LESS
33693: IFFALSE 33721
// begin hex := hexes [ i ] ;
33695: LD_ADDR_VAR 0 8
33699: PUSH
33700: LD_VAR 0 2
33704: PUSH
33705: LD_VAR 0 4
33709: ARRAY
33710: ST_TO_ADDR
// dist := tdist ;
33711: LD_ADDR_VAR 0 5
33715: PUSH
33716: LD_VAR 0 6
33720: ST_TO_ADDR
// end ; end ;
33721: GO 33635
33723: POP
33724: POP
// result := hex ;
33725: LD_ADDR_VAR 0 3
33729: PUSH
33730: LD_VAR 0 8
33734: ST_TO_ADDR
// end ;
33735: LD_VAR 0 3
33739: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33740: LD_INT 0
33742: PPUSH
33743: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33744: LD_VAR 0 1
33748: NOT
33749: PUSH
33750: LD_VAR 0 1
33754: PUSH
33755: LD_INT 21
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 23
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PPUSH
33779: CALL_OW 69
33783: IN
33784: NOT
33785: OR
33786: IFFALSE 33790
// exit ;
33788: GO 33837
// for i = 1 to 3 do
33790: LD_ADDR_VAR 0 3
33794: PUSH
33795: DOUBLE
33796: LD_INT 1
33798: DEC
33799: ST_TO_ADDR
33800: LD_INT 3
33802: PUSH
33803: FOR_TO
33804: IFFALSE 33835
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 250
33815: PPUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 251
33825: PPUSH
33826: LD_INT 1
33828: PPUSH
33829: CALL_OW 453
33833: GO 33803
33835: POP
33836: POP
// end ;
33837: LD_VAR 0 2
33841: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33842: LD_INT 0
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
// if not unit or not enemy_unit then
33850: LD_VAR 0 1
33854: NOT
33855: PUSH
33856: LD_VAR 0 2
33860: NOT
33861: OR
33862: IFFALSE 33866
// exit ;
33864: GO 34333
// if GetLives ( i ) < 250 then
33866: LD_VAR 0 4
33870: PPUSH
33871: CALL_OW 256
33875: PUSH
33876: LD_INT 250
33878: LESS
33879: IFFALSE 33892
// begin ComAutodestruct ( i ) ;
33881: LD_VAR 0 4
33885: PPUSH
33886: CALL 33740 0 1
// exit ;
33890: GO 34333
// end ; x := GetX ( enemy_unit ) ;
33892: LD_ADDR_VAR 0 7
33896: PUSH
33897: LD_VAR 0 2
33901: PPUSH
33902: CALL_OW 250
33906: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33907: LD_ADDR_VAR 0 8
33911: PUSH
33912: LD_VAR 0 2
33916: PPUSH
33917: CALL_OW 251
33921: ST_TO_ADDR
// if not x or not y then
33922: LD_VAR 0 7
33926: NOT
33927: PUSH
33928: LD_VAR 0 8
33932: NOT
33933: OR
33934: IFFALSE 33938
// exit ;
33936: GO 34333
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33938: LD_ADDR_VAR 0 6
33942: PUSH
33943: LD_VAR 0 7
33947: PPUSH
33948: LD_INT 0
33950: PPUSH
33951: LD_INT 4
33953: PPUSH
33954: CALL_OW 272
33958: PUSH
33959: LD_VAR 0 8
33963: PPUSH
33964: LD_INT 0
33966: PPUSH
33967: LD_INT 4
33969: PPUSH
33970: CALL_OW 273
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_VAR 0 7
33983: PPUSH
33984: LD_INT 1
33986: PPUSH
33987: LD_INT 4
33989: PPUSH
33990: CALL_OW 272
33994: PUSH
33995: LD_VAR 0 8
33999: PPUSH
34000: LD_INT 1
34002: PPUSH
34003: LD_INT 4
34005: PPUSH
34006: CALL_OW 273
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_VAR 0 7
34019: PPUSH
34020: LD_INT 2
34022: PPUSH
34023: LD_INT 4
34025: PPUSH
34026: CALL_OW 272
34030: PUSH
34031: LD_VAR 0 8
34035: PPUSH
34036: LD_INT 2
34038: PPUSH
34039: LD_INT 4
34041: PPUSH
34042: CALL_OW 273
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_VAR 0 7
34055: PPUSH
34056: LD_INT 3
34058: PPUSH
34059: LD_INT 4
34061: PPUSH
34062: CALL_OW 272
34066: PUSH
34067: LD_VAR 0 8
34071: PPUSH
34072: LD_INT 3
34074: PPUSH
34075: LD_INT 4
34077: PPUSH
34078: CALL_OW 273
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_VAR 0 7
34091: PPUSH
34092: LD_INT 4
34094: PPUSH
34095: LD_INT 4
34097: PPUSH
34098: CALL_OW 272
34102: PUSH
34103: LD_VAR 0 8
34107: PPUSH
34108: LD_INT 4
34110: PPUSH
34111: LD_INT 4
34113: PPUSH
34114: CALL_OW 273
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_VAR 0 7
34127: PPUSH
34128: LD_INT 5
34130: PPUSH
34131: LD_INT 4
34133: PPUSH
34134: CALL_OW 272
34138: PUSH
34139: LD_VAR 0 8
34143: PPUSH
34144: LD_INT 5
34146: PPUSH
34147: LD_INT 4
34149: PPUSH
34150: CALL_OW 273
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
// for i = tmp downto 1 do
34167: LD_ADDR_VAR 0 4
34171: PUSH
34172: DOUBLE
34173: LD_VAR 0 6
34177: INC
34178: ST_TO_ADDR
34179: LD_INT 1
34181: PUSH
34182: FOR_DOWNTO
34183: IFFALSE 34284
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34185: LD_VAR 0 6
34189: PUSH
34190: LD_VAR 0 4
34194: ARRAY
34195: PUSH
34196: LD_INT 1
34198: ARRAY
34199: PPUSH
34200: LD_VAR 0 6
34204: PUSH
34205: LD_VAR 0 4
34209: ARRAY
34210: PUSH
34211: LD_INT 2
34213: ARRAY
34214: PPUSH
34215: CALL_OW 488
34219: NOT
34220: PUSH
34221: LD_VAR 0 6
34225: PUSH
34226: LD_VAR 0 4
34230: ARRAY
34231: PUSH
34232: LD_INT 1
34234: ARRAY
34235: PPUSH
34236: LD_VAR 0 6
34240: PUSH
34241: LD_VAR 0 4
34245: ARRAY
34246: PUSH
34247: LD_INT 2
34249: ARRAY
34250: PPUSH
34251: CALL_OW 428
34255: PUSH
34256: LD_INT 0
34258: NONEQUAL
34259: OR
34260: IFFALSE 34282
// tmp := Delete ( tmp , i ) ;
34262: LD_ADDR_VAR 0 6
34266: PUSH
34267: LD_VAR 0 6
34271: PPUSH
34272: LD_VAR 0 4
34276: PPUSH
34277: CALL_OW 3
34281: ST_TO_ADDR
34282: GO 34182
34284: POP
34285: POP
// j := GetClosestHex ( unit , tmp ) ;
34286: LD_ADDR_VAR 0 5
34290: PUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: LD_VAR 0 6
34300: PPUSH
34301: CALL 33588 0 2
34305: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34306: LD_VAR 0 1
34310: PPUSH
34311: LD_VAR 0 5
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: PPUSH
34320: LD_VAR 0 5
34324: PUSH
34325: LD_INT 2
34327: ARRAY
34328: PPUSH
34329: CALL_OW 111
// end ;
34333: LD_VAR 0 3
34337: RET
// export function PrepareApemanSoldier ( ) ; begin
34338: LD_INT 0
34340: PPUSH
// uc_nation := 0 ;
34341: LD_ADDR_OWVAR 21
34345: PUSH
34346: LD_INT 0
34348: ST_TO_ADDR
// hc_sex := sex_male ;
34349: LD_ADDR_OWVAR 27
34353: PUSH
34354: LD_INT 1
34356: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34357: LD_ADDR_OWVAR 28
34361: PUSH
34362: LD_INT 15
34364: ST_TO_ADDR
// hc_gallery :=  ;
34365: LD_ADDR_OWVAR 33
34369: PUSH
34370: LD_STRING 
34372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34373: LD_ADDR_OWVAR 31
34377: PUSH
34378: LD_INT 0
34380: PPUSH
34381: LD_INT 3
34383: PPUSH
34384: CALL_OW 12
34388: PUSH
34389: LD_INT 0
34391: PPUSH
34392: LD_INT 3
34394: PPUSH
34395: CALL_OW 12
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: ST_TO_ADDR
// end ;
34412: LD_VAR 0 1
34416: RET
// export function PrepareApemanEngineer ( ) ; begin
34417: LD_INT 0
34419: PPUSH
// uc_nation := 0 ;
34420: LD_ADDR_OWVAR 21
34424: PUSH
34425: LD_INT 0
34427: ST_TO_ADDR
// hc_sex := sex_male ;
34428: LD_ADDR_OWVAR 27
34432: PUSH
34433: LD_INT 1
34435: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34436: LD_ADDR_OWVAR 28
34440: PUSH
34441: LD_INT 16
34443: ST_TO_ADDR
// hc_gallery :=  ;
34444: LD_ADDR_OWVAR 33
34448: PUSH
34449: LD_STRING 
34451: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34452: LD_ADDR_OWVAR 31
34456: PUSH
34457: LD_INT 0
34459: PPUSH
34460: LD_INT 3
34462: PPUSH
34463: CALL_OW 12
34467: PUSH
34468: LD_INT 0
34470: PPUSH
34471: LD_INT 3
34473: PPUSH
34474: CALL_OW 12
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
// end ;
34491: LD_VAR 0 1
34495: RET
// export function PrepareApeman ( agressivity ) ; begin
34496: LD_INT 0
34498: PPUSH
// uc_side := 0 ;
34499: LD_ADDR_OWVAR 20
34503: PUSH
34504: LD_INT 0
34506: ST_TO_ADDR
// uc_nation := 0 ;
34507: LD_ADDR_OWVAR 21
34511: PUSH
34512: LD_INT 0
34514: ST_TO_ADDR
// hc_sex := sex_male ;
34515: LD_ADDR_OWVAR 27
34519: PUSH
34520: LD_INT 1
34522: ST_TO_ADDR
// hc_class := class_apeman ;
34523: LD_ADDR_OWVAR 28
34527: PUSH
34528: LD_INT 12
34530: ST_TO_ADDR
// hc_gallery :=  ;
34531: LD_ADDR_OWVAR 33
34535: PUSH
34536: LD_STRING 
34538: ST_TO_ADDR
// if agressivity = 0 then
34539: LD_VAR 0 1
34543: PUSH
34544: LD_INT 0
34546: EQUAL
34547: IFFALSE 34559
// hc_agressivity := 0 else
34549: LD_ADDR_OWVAR 35
34553: PUSH
34554: LD_INT 0
34556: ST_TO_ADDR
34557: GO 34580
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34559: LD_ADDR_OWVAR 35
34563: PUSH
34564: LD_VAR 0 1
34568: NEG
34569: PPUSH
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 12
34579: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34580: LD_ADDR_OWVAR 31
34584: PUSH
34585: LD_INT 0
34587: PPUSH
34588: LD_INT 3
34590: PPUSH
34591: CALL_OW 12
34595: PUSH
34596: LD_INT 0
34598: PPUSH
34599: LD_INT 3
34601: PPUSH
34602: CALL_OW 12
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: ST_TO_ADDR
// end ;
34619: LD_VAR 0 2
34623: RET
// export function PrepareTiger ( agressivity ) ; begin
34624: LD_INT 0
34626: PPUSH
// uc_side := 0 ;
34627: LD_ADDR_OWVAR 20
34631: PUSH
34632: LD_INT 0
34634: ST_TO_ADDR
// uc_nation := 0 ;
34635: LD_ADDR_OWVAR 21
34639: PUSH
34640: LD_INT 0
34642: ST_TO_ADDR
// hc_class := class_tiger ;
34643: LD_ADDR_OWVAR 28
34647: PUSH
34648: LD_INT 14
34650: ST_TO_ADDR
// hc_gallery :=  ;
34651: LD_ADDR_OWVAR 33
34655: PUSH
34656: LD_STRING 
34658: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34659: LD_ADDR_OWVAR 35
34663: PUSH
34664: LD_VAR 0 1
34668: NEG
34669: PPUSH
34670: LD_VAR 0 1
34674: PPUSH
34675: CALL_OW 12
34679: ST_TO_ADDR
// end ;
34680: LD_VAR 0 2
34684: RET
// export function PrepareEnchidna ( ) ; begin
34685: LD_INT 0
34687: PPUSH
// uc_side := 0 ;
34688: LD_ADDR_OWVAR 20
34692: PUSH
34693: LD_INT 0
34695: ST_TO_ADDR
// uc_nation := 0 ;
34696: LD_ADDR_OWVAR 21
34700: PUSH
34701: LD_INT 0
34703: ST_TO_ADDR
// hc_class := class_baggie ;
34704: LD_ADDR_OWVAR 28
34708: PUSH
34709: LD_INT 13
34711: ST_TO_ADDR
// hc_gallery :=  ;
34712: LD_ADDR_OWVAR 33
34716: PUSH
34717: LD_STRING 
34719: ST_TO_ADDR
// end ;
34720: LD_VAR 0 1
34724: RET
// export function PrepareFrog ( ) ; begin
34725: LD_INT 0
34727: PPUSH
// uc_side := 0 ;
34728: LD_ADDR_OWVAR 20
34732: PUSH
34733: LD_INT 0
34735: ST_TO_ADDR
// uc_nation := 0 ;
34736: LD_ADDR_OWVAR 21
34740: PUSH
34741: LD_INT 0
34743: ST_TO_ADDR
// hc_class := class_frog ;
34744: LD_ADDR_OWVAR 28
34748: PUSH
34749: LD_INT 19
34751: ST_TO_ADDR
// hc_gallery :=  ;
34752: LD_ADDR_OWVAR 33
34756: PUSH
34757: LD_STRING 
34759: ST_TO_ADDR
// end ;
34760: LD_VAR 0 1
34764: RET
// export function PrepareFish ( ) ; begin
34765: LD_INT 0
34767: PPUSH
// uc_side := 0 ;
34768: LD_ADDR_OWVAR 20
34772: PUSH
34773: LD_INT 0
34775: ST_TO_ADDR
// uc_nation := 0 ;
34776: LD_ADDR_OWVAR 21
34780: PUSH
34781: LD_INT 0
34783: ST_TO_ADDR
// hc_class := class_fish ;
34784: LD_ADDR_OWVAR 28
34788: PUSH
34789: LD_INT 20
34791: ST_TO_ADDR
// hc_gallery :=  ;
34792: LD_ADDR_OWVAR 33
34796: PUSH
34797: LD_STRING 
34799: ST_TO_ADDR
// end ;
34800: LD_VAR 0 1
34804: RET
// export function PrepareBird ( ) ; begin
34805: LD_INT 0
34807: PPUSH
// uc_side := 0 ;
34808: LD_ADDR_OWVAR 20
34812: PUSH
34813: LD_INT 0
34815: ST_TO_ADDR
// uc_nation := 0 ;
34816: LD_ADDR_OWVAR 21
34820: PUSH
34821: LD_INT 0
34823: ST_TO_ADDR
// hc_class := class_phororhacos ;
34824: LD_ADDR_OWVAR 28
34828: PUSH
34829: LD_INT 18
34831: ST_TO_ADDR
// hc_gallery :=  ;
34832: LD_ADDR_OWVAR 33
34836: PUSH
34837: LD_STRING 
34839: ST_TO_ADDR
// end ;
34840: LD_VAR 0 1
34844: RET
// export function PrepareHorse ( ) ; begin
34845: LD_INT 0
34847: PPUSH
// uc_side := 0 ;
34848: LD_ADDR_OWVAR 20
34852: PUSH
34853: LD_INT 0
34855: ST_TO_ADDR
// uc_nation := 0 ;
34856: LD_ADDR_OWVAR 21
34860: PUSH
34861: LD_INT 0
34863: ST_TO_ADDR
// hc_class := class_horse ;
34864: LD_ADDR_OWVAR 28
34868: PUSH
34869: LD_INT 21
34871: ST_TO_ADDR
// hc_gallery :=  ;
34872: LD_ADDR_OWVAR 33
34876: PUSH
34877: LD_STRING 
34879: ST_TO_ADDR
// end ;
34880: LD_VAR 0 1
34884: RET
// export function PrepareMastodont ( ) ; begin
34885: LD_INT 0
34887: PPUSH
// uc_side := 0 ;
34888: LD_ADDR_OWVAR 20
34892: PUSH
34893: LD_INT 0
34895: ST_TO_ADDR
// uc_nation := 0 ;
34896: LD_ADDR_OWVAR 21
34900: PUSH
34901: LD_INT 0
34903: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34904: LD_ADDR_OWVAR 37
34908: PUSH
34909: LD_INT 31
34911: ST_TO_ADDR
// vc_control := control_rider ;
34912: LD_ADDR_OWVAR 38
34916: PUSH
34917: LD_INT 4
34919: ST_TO_ADDR
// end ;
34920: LD_VAR 0 1
34924: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34925: LD_INT 0
34927: PPUSH
34928: PPUSH
34929: PPUSH
// uc_side = 0 ;
34930: LD_ADDR_OWVAR 20
34934: PUSH
34935: LD_INT 0
34937: ST_TO_ADDR
// uc_nation = 0 ;
34938: LD_ADDR_OWVAR 21
34942: PUSH
34943: LD_INT 0
34945: ST_TO_ADDR
// InitHc_All ( ) ;
34946: CALL_OW 584
// InitVc ;
34950: CALL_OW 20
// if mastodonts then
34954: LD_VAR 0 6
34958: IFFALSE 35025
// for i = 1 to mastodonts do
34960: LD_ADDR_VAR 0 11
34964: PUSH
34965: DOUBLE
34966: LD_INT 1
34968: DEC
34969: ST_TO_ADDR
34970: LD_VAR 0 6
34974: PUSH
34975: FOR_TO
34976: IFFALSE 35023
// begin vc_chassis := 31 ;
34978: LD_ADDR_OWVAR 37
34982: PUSH
34983: LD_INT 31
34985: ST_TO_ADDR
// vc_control := control_rider ;
34986: LD_ADDR_OWVAR 38
34990: PUSH
34991: LD_INT 4
34993: ST_TO_ADDR
// animal := CreateVehicle ;
34994: LD_ADDR_VAR 0 12
34998: PUSH
34999: CALL_OW 45
35003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35004: LD_VAR 0 12
35008: PPUSH
35009: LD_VAR 0 8
35013: PPUSH
35014: LD_INT 0
35016: PPUSH
35017: CALL 37153 0 3
// end ;
35021: GO 34975
35023: POP
35024: POP
// if horses then
35025: LD_VAR 0 5
35029: IFFALSE 35096
// for i = 1 to horses do
35031: LD_ADDR_VAR 0 11
35035: PUSH
35036: DOUBLE
35037: LD_INT 1
35039: DEC
35040: ST_TO_ADDR
35041: LD_VAR 0 5
35045: PUSH
35046: FOR_TO
35047: IFFALSE 35094
// begin hc_class := 21 ;
35049: LD_ADDR_OWVAR 28
35053: PUSH
35054: LD_INT 21
35056: ST_TO_ADDR
// hc_gallery :=  ;
35057: LD_ADDR_OWVAR 33
35061: PUSH
35062: LD_STRING 
35064: ST_TO_ADDR
// animal := CreateHuman ;
35065: LD_ADDR_VAR 0 12
35069: PUSH
35070: CALL_OW 44
35074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35075: LD_VAR 0 12
35079: PPUSH
35080: LD_VAR 0 8
35084: PPUSH
35085: LD_INT 0
35087: PPUSH
35088: CALL 37153 0 3
// end ;
35092: GO 35046
35094: POP
35095: POP
// if birds then
35096: LD_VAR 0 1
35100: IFFALSE 35167
// for i = 1 to birds do
35102: LD_ADDR_VAR 0 11
35106: PUSH
35107: DOUBLE
35108: LD_INT 1
35110: DEC
35111: ST_TO_ADDR
35112: LD_VAR 0 1
35116: PUSH
35117: FOR_TO
35118: IFFALSE 35165
// begin hc_class := 18 ;
35120: LD_ADDR_OWVAR 28
35124: PUSH
35125: LD_INT 18
35127: ST_TO_ADDR
// hc_gallery =  ;
35128: LD_ADDR_OWVAR 33
35132: PUSH
35133: LD_STRING 
35135: ST_TO_ADDR
// animal := CreateHuman ;
35136: LD_ADDR_VAR 0 12
35140: PUSH
35141: CALL_OW 44
35145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35146: LD_VAR 0 12
35150: PPUSH
35151: LD_VAR 0 8
35155: PPUSH
35156: LD_INT 0
35158: PPUSH
35159: CALL 37153 0 3
// end ;
35163: GO 35117
35165: POP
35166: POP
// if tigers then
35167: LD_VAR 0 2
35171: IFFALSE 35255
// for i = 1 to tigers do
35173: LD_ADDR_VAR 0 11
35177: PUSH
35178: DOUBLE
35179: LD_INT 1
35181: DEC
35182: ST_TO_ADDR
35183: LD_VAR 0 2
35187: PUSH
35188: FOR_TO
35189: IFFALSE 35253
// begin hc_class = class_tiger ;
35191: LD_ADDR_OWVAR 28
35195: PUSH
35196: LD_INT 14
35198: ST_TO_ADDR
// hc_gallery =  ;
35199: LD_ADDR_OWVAR 33
35203: PUSH
35204: LD_STRING 
35206: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35207: LD_ADDR_OWVAR 35
35211: PUSH
35212: LD_INT 7
35214: NEG
35215: PPUSH
35216: LD_INT 7
35218: PPUSH
35219: CALL_OW 12
35223: ST_TO_ADDR
// animal := CreateHuman ;
35224: LD_ADDR_VAR 0 12
35228: PUSH
35229: CALL_OW 44
35233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35234: LD_VAR 0 12
35238: PPUSH
35239: LD_VAR 0 8
35243: PPUSH
35244: LD_INT 0
35246: PPUSH
35247: CALL 37153 0 3
// end ;
35251: GO 35188
35253: POP
35254: POP
// if apemans then
35255: LD_VAR 0 3
35259: IFFALSE 35382
// for i = 1 to apemans do
35261: LD_ADDR_VAR 0 11
35265: PUSH
35266: DOUBLE
35267: LD_INT 1
35269: DEC
35270: ST_TO_ADDR
35271: LD_VAR 0 3
35275: PUSH
35276: FOR_TO
35277: IFFALSE 35380
// begin hc_class = class_apeman ;
35279: LD_ADDR_OWVAR 28
35283: PUSH
35284: LD_INT 12
35286: ST_TO_ADDR
// hc_gallery =  ;
35287: LD_ADDR_OWVAR 33
35291: PUSH
35292: LD_STRING 
35294: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35295: LD_ADDR_OWVAR 35
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PPUSH
35304: LD_INT 2
35306: PPUSH
35307: CALL_OW 12
35311: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35312: LD_ADDR_OWVAR 31
35316: PUSH
35317: LD_INT 1
35319: PPUSH
35320: LD_INT 3
35322: PPUSH
35323: CALL_OW 12
35327: PUSH
35328: LD_INT 1
35330: PPUSH
35331: LD_INT 3
35333: PPUSH
35334: CALL_OW 12
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// animal := CreateHuman ;
35351: LD_ADDR_VAR 0 12
35355: PUSH
35356: CALL_OW 44
35360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35361: LD_VAR 0 12
35365: PPUSH
35366: LD_VAR 0 8
35370: PPUSH
35371: LD_INT 0
35373: PPUSH
35374: CALL 37153 0 3
// end ;
35378: GO 35276
35380: POP
35381: POP
// if enchidnas then
35382: LD_VAR 0 4
35386: IFFALSE 35453
// for i = 1 to enchidnas do
35388: LD_ADDR_VAR 0 11
35392: PUSH
35393: DOUBLE
35394: LD_INT 1
35396: DEC
35397: ST_TO_ADDR
35398: LD_VAR 0 4
35402: PUSH
35403: FOR_TO
35404: IFFALSE 35451
// begin hc_class = 13 ;
35406: LD_ADDR_OWVAR 28
35410: PUSH
35411: LD_INT 13
35413: ST_TO_ADDR
// hc_gallery =  ;
35414: LD_ADDR_OWVAR 33
35418: PUSH
35419: LD_STRING 
35421: ST_TO_ADDR
// animal := CreateHuman ;
35422: LD_ADDR_VAR 0 12
35426: PUSH
35427: CALL_OW 44
35431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35432: LD_VAR 0 12
35436: PPUSH
35437: LD_VAR 0 8
35441: PPUSH
35442: LD_INT 0
35444: PPUSH
35445: CALL 37153 0 3
// end ;
35449: GO 35403
35451: POP
35452: POP
// if fishes then
35453: LD_VAR 0 7
35457: IFFALSE 35524
// for i = 1 to fishes do
35459: LD_ADDR_VAR 0 11
35463: PUSH
35464: DOUBLE
35465: LD_INT 1
35467: DEC
35468: ST_TO_ADDR
35469: LD_VAR 0 7
35473: PUSH
35474: FOR_TO
35475: IFFALSE 35522
// begin hc_class = 20 ;
35477: LD_ADDR_OWVAR 28
35481: PUSH
35482: LD_INT 20
35484: ST_TO_ADDR
// hc_gallery =  ;
35485: LD_ADDR_OWVAR 33
35489: PUSH
35490: LD_STRING 
35492: ST_TO_ADDR
// animal := CreateHuman ;
35493: LD_ADDR_VAR 0 12
35497: PUSH
35498: CALL_OW 44
35502: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35503: LD_VAR 0 12
35507: PPUSH
35508: LD_VAR 0 9
35512: PPUSH
35513: LD_INT 0
35515: PPUSH
35516: CALL 37153 0 3
// end ;
35520: GO 35474
35522: POP
35523: POP
// end ;
35524: LD_VAR 0 10
35528: RET
// export function WantHeal ( sci , unit ) ; begin
35529: LD_INT 0
35531: PPUSH
// if GetTaskList ( sci ) > 0 then
35532: LD_VAR 0 1
35536: PPUSH
35537: CALL_OW 437
35541: PUSH
35542: LD_INT 0
35544: GREATER
35545: IFFALSE 35615
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 437
35556: PUSH
35557: LD_INT 1
35559: ARRAY
35560: PUSH
35561: LD_INT 1
35563: ARRAY
35564: PUSH
35565: LD_STRING l
35567: EQUAL
35568: PUSH
35569: LD_VAR 0 1
35573: PPUSH
35574: CALL_OW 437
35578: PUSH
35579: LD_INT 1
35581: ARRAY
35582: PUSH
35583: LD_INT 4
35585: ARRAY
35586: PUSH
35587: LD_VAR 0 2
35591: EQUAL
35592: AND
35593: IFFALSE 35605
// result := true else
35595: LD_ADDR_VAR 0 3
35599: PUSH
35600: LD_INT 1
35602: ST_TO_ADDR
35603: GO 35613
// result := false ;
35605: LD_ADDR_VAR 0 3
35609: PUSH
35610: LD_INT 0
35612: ST_TO_ADDR
// end else
35613: GO 35623
// result := false ;
35615: LD_ADDR_VAR 0 3
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// end ;
35623: LD_VAR 0 3
35627: RET
// export function HealTarget ( sci ) ; begin
35628: LD_INT 0
35630: PPUSH
// if not sci then
35631: LD_VAR 0 1
35635: NOT
35636: IFFALSE 35640
// exit ;
35638: GO 35705
// result := 0 ;
35640: LD_ADDR_VAR 0 2
35644: PUSH
35645: LD_INT 0
35647: ST_TO_ADDR
// if GetTaskList ( sci ) then
35648: LD_VAR 0 1
35652: PPUSH
35653: CALL_OW 437
35657: IFFALSE 35705
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35659: LD_VAR 0 1
35663: PPUSH
35664: CALL_OW 437
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: PUSH
35673: LD_INT 1
35675: ARRAY
35676: PUSH
35677: LD_STRING l
35679: EQUAL
35680: IFFALSE 35705
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35682: LD_ADDR_VAR 0 2
35686: PUSH
35687: LD_VAR 0 1
35691: PPUSH
35692: CALL_OW 437
35696: PUSH
35697: LD_INT 1
35699: ARRAY
35700: PUSH
35701: LD_INT 4
35703: ARRAY
35704: ST_TO_ADDR
// end ;
35705: LD_VAR 0 2
35709: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35710: LD_INT 0
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
// if not base_units then
35716: LD_VAR 0 1
35720: NOT
35721: IFFALSE 35725
// exit ;
35723: GO 35812
// result := false ;
35725: LD_ADDR_VAR 0 2
35729: PUSH
35730: LD_INT 0
35732: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35733: LD_ADDR_VAR 0 5
35737: PUSH
35738: LD_VAR 0 1
35742: PPUSH
35743: LD_INT 21
35745: PUSH
35746: LD_INT 3
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PPUSH
35753: CALL_OW 72
35757: ST_TO_ADDR
// if not tmp then
35758: LD_VAR 0 5
35762: NOT
35763: IFFALSE 35767
// exit ;
35765: GO 35812
// for i in tmp do
35767: LD_ADDR_VAR 0 3
35771: PUSH
35772: LD_VAR 0 5
35776: PUSH
35777: FOR_IN
35778: IFFALSE 35810
// begin result := EnemyInRange ( i , 22 ) ;
35780: LD_ADDR_VAR 0 2
35784: PUSH
35785: LD_VAR 0 3
35789: PPUSH
35790: LD_INT 22
35792: PPUSH
35793: CALL 33390 0 2
35797: ST_TO_ADDR
// if result then
35798: LD_VAR 0 2
35802: IFFALSE 35808
// exit ;
35804: POP
35805: POP
35806: GO 35812
// end ;
35808: GO 35777
35810: POP
35811: POP
// end ;
35812: LD_VAR 0 2
35816: RET
// export function FilterByTag ( units , tag ) ; begin
35817: LD_INT 0
35819: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35820: LD_ADDR_VAR 0 3
35824: PUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: LD_INT 120
35832: PUSH
35833: LD_VAR 0 2
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PPUSH
35842: CALL_OW 72
35846: ST_TO_ADDR
// end ;
35847: LD_VAR 0 3
35851: RET
// export function IsDriver ( un ) ; begin
35852: LD_INT 0
35854: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35855: LD_ADDR_VAR 0 2
35859: PUSH
35860: LD_VAR 0 1
35864: PUSH
35865: LD_INT 55
35867: PUSH
35868: EMPTY
35869: LIST
35870: PPUSH
35871: CALL_OW 69
35875: IN
35876: ST_TO_ADDR
// end ;
35877: LD_VAR 0 2
35881: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35882: LD_INT 0
35884: PPUSH
35885: PPUSH
// list := [ ] ;
35886: LD_ADDR_VAR 0 5
35890: PUSH
35891: EMPTY
35892: ST_TO_ADDR
// case d of 0 :
35893: LD_VAR 0 3
35897: PUSH
35898: LD_INT 0
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 36039
35906: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35907: LD_ADDR_VAR 0 5
35911: PUSH
35912: LD_VAR 0 1
35916: PUSH
35917: LD_INT 4
35919: MINUS
35920: PUSH
35921: LD_VAR 0 2
35925: PUSH
35926: LD_INT 4
35928: MINUS
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: PUSH
35938: LD_VAR 0 1
35942: PUSH
35943: LD_INT 3
35945: MINUS
35946: PUSH
35947: LD_VAR 0 2
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: PUSH
35960: LD_VAR 0 1
35964: PUSH
35965: LD_INT 4
35967: PLUS
35968: PUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_INT 4
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: PUSH
35982: LD_VAR 0 1
35986: PUSH
35987: LD_INT 3
35989: PLUS
35990: PUSH
35991: LD_VAR 0 2
35995: PUSH
35996: LD_INT 3
35998: PLUS
35999: PUSH
36000: LD_INT 5
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: PUSH
36008: LD_VAR 0 1
36012: PUSH
36013: LD_VAR 0 2
36017: PUSH
36018: LD_INT 4
36020: PLUS
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// end ; 1 :
36037: GO 36737
36039: LD_INT 1
36041: DOUBLE
36042: EQUAL
36043: IFTRUE 36047
36045: GO 36180
36047: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36048: LD_ADDR_VAR 0 5
36052: PUSH
36053: LD_VAR 0 1
36057: PUSH
36058: LD_VAR 0 2
36062: PUSH
36063: LD_INT 4
36065: MINUS
36066: PUSH
36067: LD_INT 3
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: PUSH
36075: LD_VAR 0 1
36079: PUSH
36080: LD_INT 3
36082: MINUS
36083: PUSH
36084: LD_VAR 0 2
36088: PUSH
36089: LD_INT 3
36091: MINUS
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: PUSH
36101: LD_VAR 0 1
36105: PUSH
36106: LD_INT 4
36108: MINUS
36109: PUSH
36110: LD_VAR 0 2
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_VAR 0 1
36127: PUSH
36128: LD_VAR 0 2
36132: PUSH
36133: LD_INT 3
36135: PLUS
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: PUSH
36145: LD_VAR 0 1
36149: PUSH
36150: LD_INT 4
36152: PLUS
36153: PUSH
36154: LD_VAR 0 2
36158: PUSH
36159: LD_INT 4
36161: PLUS
36162: PUSH
36163: LD_INT 5
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// end ; 2 :
36178: GO 36737
36180: LD_INT 2
36182: DOUBLE
36183: EQUAL
36184: IFTRUE 36188
36186: GO 36317
36188: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36189: LD_ADDR_VAR 0 5
36193: PUSH
36194: LD_VAR 0 1
36198: PUSH
36199: LD_VAR 0 2
36203: PUSH
36204: LD_INT 3
36206: MINUS
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: PUSH
36216: LD_VAR 0 1
36220: PUSH
36221: LD_INT 4
36223: PLUS
36224: PUSH
36225: LD_VAR 0 2
36229: PUSH
36230: LD_INT 4
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: LD_VAR 0 2
36247: PUSH
36248: LD_INT 4
36250: PLUS
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: PUSH
36260: LD_VAR 0 1
36264: PUSH
36265: LD_INT 3
36267: MINUS
36268: PUSH
36269: LD_VAR 0 2
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: PUSH
36282: LD_VAR 0 1
36286: PUSH
36287: LD_INT 4
36289: MINUS
36290: PUSH
36291: LD_VAR 0 2
36295: PUSH
36296: LD_INT 4
36298: MINUS
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: ST_TO_ADDR
// end ; 3 :
36315: GO 36737
36317: LD_INT 3
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36325
36323: GO 36458
36325: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36326: LD_ADDR_VAR 0 5
36330: PUSH
36331: LD_VAR 0 1
36335: PUSH
36336: LD_INT 3
36338: PLUS
36339: PUSH
36340: LD_VAR 0 2
36344: PUSH
36345: LD_INT 4
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: PUSH
36353: LD_VAR 0 1
36357: PUSH
36358: LD_INT 4
36360: PLUS
36361: PUSH
36362: LD_VAR 0 2
36366: PUSH
36367: LD_INT 4
36369: PLUS
36370: PUSH
36371: LD_INT 5
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: PUSH
36379: LD_VAR 0 1
36383: PUSH
36384: LD_INT 4
36386: MINUS
36387: PUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: PUSH
36401: LD_VAR 0 1
36405: PUSH
36406: LD_VAR 0 2
36410: PUSH
36411: LD_INT 4
36413: MINUS
36414: PUSH
36415: LD_INT 3
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: LIST
36422: PUSH
36423: LD_VAR 0 1
36427: PUSH
36428: LD_INT 3
36430: MINUS
36431: PUSH
36432: LD_VAR 0 2
36436: PUSH
36437: LD_INT 3
36439: MINUS
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// end ; 4 :
36456: GO 36737
36458: LD_INT 4
36460: DOUBLE
36461: EQUAL
36462: IFTRUE 36466
36464: GO 36599
36466: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36467: LD_ADDR_VAR 0 5
36471: PUSH
36472: LD_VAR 0 1
36476: PUSH
36477: LD_VAR 0 2
36481: PUSH
36482: LD_INT 4
36484: PLUS
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: LD_VAR 0 1
36498: PUSH
36499: LD_INT 3
36501: PLUS
36502: PUSH
36503: LD_VAR 0 2
36507: PUSH
36508: LD_INT 3
36510: PLUS
36511: PUSH
36512: LD_INT 5
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: PUSH
36520: LD_VAR 0 1
36524: PUSH
36525: LD_INT 4
36527: PLUS
36528: PUSH
36529: LD_VAR 0 2
36533: PUSH
36534: LD_INT 4
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: PUSH
36542: LD_VAR 0 1
36546: PUSH
36547: LD_VAR 0 2
36551: PUSH
36552: LD_INT 3
36554: MINUS
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: PUSH
36564: LD_VAR 0 1
36568: PUSH
36569: LD_INT 4
36571: MINUS
36572: PUSH
36573: LD_VAR 0 2
36577: PUSH
36578: LD_INT 4
36580: MINUS
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: ST_TO_ADDR
// end ; 5 :
36597: GO 36737
36599: LD_INT 5
36601: DOUBLE
36602: EQUAL
36603: IFTRUE 36607
36605: GO 36736
36607: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36608: LD_ADDR_VAR 0 5
36612: PUSH
36613: LD_VAR 0 1
36617: PUSH
36618: LD_INT 4
36620: MINUS
36621: PUSH
36622: LD_VAR 0 2
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: PUSH
36635: LD_VAR 0 1
36639: PUSH
36640: LD_VAR 0 2
36644: PUSH
36645: LD_INT 4
36647: MINUS
36648: PUSH
36649: LD_INT 3
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: PUSH
36657: LD_VAR 0 1
36661: PUSH
36662: LD_INT 4
36664: PLUS
36665: PUSH
36666: LD_VAR 0 2
36670: PUSH
36671: LD_INT 4
36673: PLUS
36674: PUSH
36675: LD_INT 5
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: PUSH
36683: LD_VAR 0 1
36687: PUSH
36688: LD_INT 3
36690: PLUS
36691: PUSH
36692: LD_VAR 0 2
36696: PUSH
36697: LD_INT 4
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: PUSH
36705: LD_VAR 0 1
36709: PUSH
36710: LD_VAR 0 2
36714: PUSH
36715: LD_INT 3
36717: PLUS
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: ST_TO_ADDR
// end ; end ;
36734: GO 36737
36736: POP
// result := list ;
36737: LD_ADDR_VAR 0 4
36741: PUSH
36742: LD_VAR 0 5
36746: ST_TO_ADDR
// end ;
36747: LD_VAR 0 4
36751: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36752: LD_INT 0
36754: PPUSH
36755: PPUSH
36756: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36757: LD_VAR 0 1
36761: NOT
36762: PUSH
36763: LD_VAR 0 2
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: LD_INT 3
36776: PUSH
36777: LD_INT 4
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: IN
36786: NOT
36787: OR
36788: IFFALSE 36792
// exit ;
36790: GO 36875
// tmp := [ ] ;
36792: LD_ADDR_VAR 0 5
36796: PUSH
36797: EMPTY
36798: ST_TO_ADDR
// for i in units do
36799: LD_ADDR_VAR 0 4
36803: PUSH
36804: LD_VAR 0 1
36808: PUSH
36809: FOR_IN
36810: IFFALSE 36844
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36812: LD_ADDR_VAR 0 5
36816: PUSH
36817: LD_VAR 0 5
36821: PPUSH
36822: LD_VAR 0 4
36826: PPUSH
36827: LD_VAR 0 2
36831: PPUSH
36832: CALL_OW 259
36836: PPUSH
36837: CALL 38248 0 2
36841: ST_TO_ADDR
36842: GO 36809
36844: POP
36845: POP
// if not tmp then
36846: LD_VAR 0 5
36850: NOT
36851: IFFALSE 36855
// exit ;
36853: GO 36875
// result := SortListByListDesc ( units , tmp ) ;
36855: LD_ADDR_VAR 0 3
36859: PUSH
36860: LD_VAR 0 1
36864: PPUSH
36865: LD_VAR 0 5
36869: PPUSH
36870: CALL_OW 77
36874: ST_TO_ADDR
// end ;
36875: LD_VAR 0 3
36879: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36880: LD_INT 0
36882: PPUSH
36883: PPUSH
36884: PPUSH
// result := false ;
36885: LD_ADDR_VAR 0 3
36889: PUSH
36890: LD_INT 0
36892: ST_TO_ADDR
// if not building then
36893: LD_VAR 0 2
36897: NOT
36898: IFFALSE 36902
// exit ;
36900: GO 37040
// x := GetX ( building ) ;
36902: LD_ADDR_VAR 0 4
36906: PUSH
36907: LD_VAR 0 2
36911: PPUSH
36912: CALL_OW 250
36916: ST_TO_ADDR
// y := GetY ( building ) ;
36917: LD_ADDR_VAR 0 5
36921: PUSH
36922: LD_VAR 0 2
36926: PPUSH
36927: CALL_OW 251
36931: ST_TO_ADDR
// if not x or not y then
36932: LD_VAR 0 4
36936: NOT
36937: PUSH
36938: LD_VAR 0 5
36942: NOT
36943: OR
36944: IFFALSE 36948
// exit ;
36946: GO 37040
// if GetTaskList ( unit ) then
36948: LD_VAR 0 1
36952: PPUSH
36953: CALL_OW 437
36957: IFFALSE 37040
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36959: LD_STRING e
36961: PUSH
36962: LD_VAR 0 1
36966: PPUSH
36967: CALL_OW 437
36971: PUSH
36972: LD_INT 1
36974: ARRAY
36975: PUSH
36976: LD_INT 1
36978: ARRAY
36979: EQUAL
36980: PUSH
36981: LD_VAR 0 4
36985: PUSH
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL_OW 437
36995: PUSH
36996: LD_INT 1
36998: ARRAY
36999: PUSH
37000: LD_INT 2
37002: ARRAY
37003: EQUAL
37004: AND
37005: PUSH
37006: LD_VAR 0 5
37010: PUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 437
37020: PUSH
37021: LD_INT 1
37023: ARRAY
37024: PUSH
37025: LD_INT 3
37027: ARRAY
37028: EQUAL
37029: AND
37030: IFFALSE 37040
// result := true end ;
37032: LD_ADDR_VAR 0 3
37036: PUSH
37037: LD_INT 1
37039: ST_TO_ADDR
// end ;
37040: LD_VAR 0 3
37044: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37045: LD_INT 0
37047: PPUSH
// result := false ;
37048: LD_ADDR_VAR 0 4
37052: PUSH
37053: LD_INT 0
37055: ST_TO_ADDR
// if GetTaskList ( unit ) then
37056: LD_VAR 0 1
37060: PPUSH
37061: CALL_OW 437
37065: IFFALSE 37148
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37067: LD_STRING M
37069: PUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL_OW 437
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: PUSH
37084: LD_INT 1
37086: ARRAY
37087: EQUAL
37088: PUSH
37089: LD_VAR 0 2
37093: PUSH
37094: LD_VAR 0 1
37098: PPUSH
37099: CALL_OW 437
37103: PUSH
37104: LD_INT 1
37106: ARRAY
37107: PUSH
37108: LD_INT 2
37110: ARRAY
37111: EQUAL
37112: AND
37113: PUSH
37114: LD_VAR 0 3
37118: PUSH
37119: LD_VAR 0 1
37123: PPUSH
37124: CALL_OW 437
37128: PUSH
37129: LD_INT 1
37131: ARRAY
37132: PUSH
37133: LD_INT 3
37135: ARRAY
37136: EQUAL
37137: AND
37138: IFFALSE 37148
// result := true ;
37140: LD_ADDR_VAR 0 4
37144: PUSH
37145: LD_INT 1
37147: ST_TO_ADDR
// end ; end ;
37148: LD_VAR 0 4
37152: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37153: LD_INT 0
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
// if not unit or not area then
37159: LD_VAR 0 1
37163: NOT
37164: PUSH
37165: LD_VAR 0 2
37169: NOT
37170: OR
37171: IFFALSE 37175
// exit ;
37173: GO 37351
// tmp := AreaToList ( area , i ) ;
37175: LD_ADDR_VAR 0 6
37179: PUSH
37180: LD_VAR 0 2
37184: PPUSH
37185: LD_VAR 0 5
37189: PPUSH
37190: CALL_OW 517
37194: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37195: LD_ADDR_VAR 0 5
37199: PUSH
37200: DOUBLE
37201: LD_INT 1
37203: DEC
37204: ST_TO_ADDR
37205: LD_VAR 0 6
37209: PUSH
37210: LD_INT 1
37212: ARRAY
37213: PUSH
37214: FOR_TO
37215: IFFALSE 37349
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37217: LD_ADDR_VAR 0 7
37221: PUSH
37222: LD_VAR 0 6
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: PUSH
37231: LD_VAR 0 5
37235: ARRAY
37236: PUSH
37237: LD_VAR 0 6
37241: PUSH
37242: LD_INT 2
37244: ARRAY
37245: PUSH
37246: LD_VAR 0 5
37250: ARRAY
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37256: LD_INT 92
37258: PUSH
37259: LD_VAR 0 7
37263: PUSH
37264: LD_INT 1
37266: ARRAY
37267: PUSH
37268: LD_VAR 0 7
37272: PUSH
37273: LD_INT 2
37275: ARRAY
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL_OW 69
37290: PUSH
37291: LD_INT 0
37293: EQUAL
37294: IFFALSE 37347
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37296: LD_VAR 0 1
37300: PPUSH
37301: LD_VAR 0 7
37305: PUSH
37306: LD_INT 1
37308: ARRAY
37309: PPUSH
37310: LD_VAR 0 7
37314: PUSH
37315: LD_INT 2
37317: ARRAY
37318: PPUSH
37319: LD_VAR 0 3
37323: PPUSH
37324: CALL_OW 48
// result := IsPlaced ( unit ) ;
37328: LD_ADDR_VAR 0 4
37332: PUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 305
37342: ST_TO_ADDR
// exit ;
37343: POP
37344: POP
37345: GO 37351
// end ; end ;
37347: GO 37214
37349: POP
37350: POP
// end ;
37351: LD_VAR 0 4
37355: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37356: LD_INT 0
37358: PPUSH
37359: PPUSH
37360: PPUSH
// if not side or side > 8 then
37361: LD_VAR 0 1
37365: NOT
37366: PUSH
37367: LD_VAR 0 1
37371: PUSH
37372: LD_INT 8
37374: GREATER
37375: OR
37376: IFFALSE 37380
// exit ;
37378: GO 37567
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37380: LD_ADDR_VAR 0 4
37384: PUSH
37385: LD_INT 22
37387: PUSH
37388: LD_VAR 0 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 21
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PPUSH
37411: CALL_OW 69
37415: ST_TO_ADDR
// if not tmp then
37416: LD_VAR 0 4
37420: NOT
37421: IFFALSE 37425
// exit ;
37423: GO 37567
// enable_addtolog := true ;
37425: LD_ADDR_OWVAR 81
37429: PUSH
37430: LD_INT 1
37432: ST_TO_ADDR
// AddToLog ( [ ) ;
37433: LD_STRING [
37435: PPUSH
37436: CALL_OW 561
// for i in tmp do
37440: LD_ADDR_VAR 0 3
37444: PUSH
37445: LD_VAR 0 4
37449: PUSH
37450: FOR_IN
37451: IFFALSE 37558
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37453: LD_STRING [
37455: PUSH
37456: LD_VAR 0 3
37460: PPUSH
37461: CALL_OW 266
37465: STR
37466: PUSH
37467: LD_STRING , 
37469: STR
37470: PUSH
37471: LD_VAR 0 3
37475: PPUSH
37476: CALL_OW 250
37480: STR
37481: PUSH
37482: LD_STRING , 
37484: STR
37485: PUSH
37486: LD_VAR 0 3
37490: PPUSH
37491: CALL_OW 251
37495: STR
37496: PUSH
37497: LD_STRING , 
37499: STR
37500: PUSH
37501: LD_VAR 0 3
37505: PPUSH
37506: CALL_OW 254
37510: STR
37511: PUSH
37512: LD_STRING , 
37514: STR
37515: PUSH
37516: LD_VAR 0 3
37520: PPUSH
37521: LD_INT 1
37523: PPUSH
37524: CALL_OW 268
37528: STR
37529: PUSH
37530: LD_STRING , 
37532: STR
37533: PUSH
37534: LD_VAR 0 3
37538: PPUSH
37539: LD_INT 2
37541: PPUSH
37542: CALL_OW 268
37546: STR
37547: PUSH
37548: LD_STRING ],
37550: STR
37551: PPUSH
37552: CALL_OW 561
// end ;
37556: GO 37450
37558: POP
37559: POP
// AddToLog ( ]; ) ;
37560: LD_STRING ];
37562: PPUSH
37563: CALL_OW 561
// end ;
37567: LD_VAR 0 2
37571: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37572: LD_INT 0
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
// if not area or not rate or not max then
37579: LD_VAR 0 1
37583: NOT
37584: PUSH
37585: LD_VAR 0 2
37589: NOT
37590: OR
37591: PUSH
37592: LD_VAR 0 4
37596: NOT
37597: OR
37598: IFFALSE 37602
// exit ;
37600: GO 37791
// while 1 do
37602: LD_INT 1
37604: IFFALSE 37791
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37606: LD_ADDR_VAR 0 9
37610: PUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: LD_INT 1
37618: PPUSH
37619: CALL_OW 287
37623: PUSH
37624: LD_INT 10
37626: MUL
37627: ST_TO_ADDR
// r := rate / 10 ;
37628: LD_ADDR_VAR 0 7
37632: PUSH
37633: LD_VAR 0 2
37637: PUSH
37638: LD_INT 10
37640: DIVREAL
37641: ST_TO_ADDR
// time := 1 1$00 ;
37642: LD_ADDR_VAR 0 8
37646: PUSH
37647: LD_INT 2100
37649: ST_TO_ADDR
// if amount < min then
37650: LD_VAR 0 9
37654: PUSH
37655: LD_VAR 0 3
37659: LESS
37660: IFFALSE 37678
// r := r * 2 else
37662: LD_ADDR_VAR 0 7
37666: PUSH
37667: LD_VAR 0 7
37671: PUSH
37672: LD_INT 2
37674: MUL
37675: ST_TO_ADDR
37676: GO 37704
// if amount > max then
37678: LD_VAR 0 9
37682: PUSH
37683: LD_VAR 0 4
37687: GREATER
37688: IFFALSE 37704
// r := r / 2 ;
37690: LD_ADDR_VAR 0 7
37694: PUSH
37695: LD_VAR 0 7
37699: PUSH
37700: LD_INT 2
37702: DIVREAL
37703: ST_TO_ADDR
// time := time / r ;
37704: LD_ADDR_VAR 0 8
37708: PUSH
37709: LD_VAR 0 8
37713: PUSH
37714: LD_VAR 0 7
37718: DIVREAL
37719: ST_TO_ADDR
// if time < 0 then
37720: LD_VAR 0 8
37724: PUSH
37725: LD_INT 0
37727: LESS
37728: IFFALSE 37745
// time := time * - 1 ;
37730: LD_ADDR_VAR 0 8
37734: PUSH
37735: LD_VAR 0 8
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: MUL
37744: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37745: LD_VAR 0 8
37749: PUSH
37750: LD_INT 35
37752: PPUSH
37753: LD_INT 875
37755: PPUSH
37756: CALL_OW 12
37760: PLUS
37761: PPUSH
37762: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37766: LD_INT 1
37768: PPUSH
37769: LD_INT 5
37771: PPUSH
37772: CALL_OW 12
37776: PPUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: LD_INT 1
37784: PPUSH
37785: CALL_OW 55
// end ;
37789: GO 37602
// end ;
37791: LD_VAR 0 5
37795: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37796: LD_INT 0
37798: PPUSH
37799: PPUSH
37800: PPUSH
37801: PPUSH
37802: PPUSH
37803: PPUSH
37804: PPUSH
37805: PPUSH
// if not turrets or not factories then
37806: LD_VAR 0 1
37810: NOT
37811: PUSH
37812: LD_VAR 0 2
37816: NOT
37817: OR
37818: IFFALSE 37822
// exit ;
37820: GO 38129
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37822: LD_ADDR_VAR 0 10
37826: PUSH
37827: LD_INT 5
37829: PUSH
37830: LD_INT 6
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 4
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: LD_INT 5
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 24
37864: PUSH
37865: LD_INT 25
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 23
37874: PUSH
37875: LD_INT 27
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 42
37888: PUSH
37889: LD_INT 43
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 44
37898: PUSH
37899: LD_INT 46
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 45
37908: PUSH
37909: LD_INT 47
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// result := [ ] ;
37926: LD_ADDR_VAR 0 3
37930: PUSH
37931: EMPTY
37932: ST_TO_ADDR
// for i in turrets do
37933: LD_ADDR_VAR 0 4
37937: PUSH
37938: LD_VAR 0 1
37942: PUSH
37943: FOR_IN
37944: IFFALSE 38127
// begin nat := GetNation ( i ) ;
37946: LD_ADDR_VAR 0 7
37950: PUSH
37951: LD_VAR 0 4
37955: PPUSH
37956: CALL_OW 248
37960: ST_TO_ADDR
// weapon := 0 ;
37961: LD_ADDR_VAR 0 8
37965: PUSH
37966: LD_INT 0
37968: ST_TO_ADDR
// if not nat then
37969: LD_VAR 0 7
37973: NOT
37974: IFFALSE 37978
// continue ;
37976: GO 37943
// for j in list [ nat ] do
37978: LD_ADDR_VAR 0 5
37982: PUSH
37983: LD_VAR 0 10
37987: PUSH
37988: LD_VAR 0 7
37992: ARRAY
37993: PUSH
37994: FOR_IN
37995: IFFALSE 38036
// if GetBWeapon ( i ) = j [ 1 ] then
37997: LD_VAR 0 4
38001: PPUSH
38002: CALL_OW 269
38006: PUSH
38007: LD_VAR 0 5
38011: PUSH
38012: LD_INT 1
38014: ARRAY
38015: EQUAL
38016: IFFALSE 38034
// begin weapon := j [ 2 ] ;
38018: LD_ADDR_VAR 0 8
38022: PUSH
38023: LD_VAR 0 5
38027: PUSH
38028: LD_INT 2
38030: ARRAY
38031: ST_TO_ADDR
// break ;
38032: GO 38036
// end ;
38034: GO 37994
38036: POP
38037: POP
// if not weapon then
38038: LD_VAR 0 8
38042: NOT
38043: IFFALSE 38047
// continue ;
38045: GO 37943
// for k in factories do
38047: LD_ADDR_VAR 0 6
38051: PUSH
38052: LD_VAR 0 2
38056: PUSH
38057: FOR_IN
38058: IFFALSE 38123
// begin weapons := AvailableWeaponList ( k ) ;
38060: LD_ADDR_VAR 0 9
38064: PUSH
38065: LD_VAR 0 6
38069: PPUSH
38070: CALL_OW 478
38074: ST_TO_ADDR
// if not weapons then
38075: LD_VAR 0 9
38079: NOT
38080: IFFALSE 38084
// continue ;
38082: GO 38057
// if weapon in weapons then
38084: LD_VAR 0 8
38088: PUSH
38089: LD_VAR 0 9
38093: IN
38094: IFFALSE 38121
// begin result := [ i , weapon ] ;
38096: LD_ADDR_VAR 0 3
38100: PUSH
38101: LD_VAR 0 4
38105: PUSH
38106: LD_VAR 0 8
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// exit ;
38115: POP
38116: POP
38117: POP
38118: POP
38119: GO 38129
// end ; end ;
38121: GO 38057
38123: POP
38124: POP
// end ;
38125: GO 37943
38127: POP
38128: POP
// end ;
38129: LD_VAR 0 3
38133: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38134: LD_INT 0
38136: PPUSH
// if not side or side > 8 then
38137: LD_VAR 0 3
38141: NOT
38142: PUSH
38143: LD_VAR 0 3
38147: PUSH
38148: LD_INT 8
38150: GREATER
38151: OR
38152: IFFALSE 38156
// exit ;
38154: GO 38215
// if not range then
38156: LD_VAR 0 4
38160: NOT
38161: IFFALSE 38172
// range := - 12 ;
38163: LD_ADDR_VAR 0 4
38167: PUSH
38168: LD_INT 12
38170: NEG
38171: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38172: LD_VAR 0 1
38176: PPUSH
38177: LD_VAR 0 2
38181: PPUSH
38182: LD_VAR 0 3
38186: PPUSH
38187: LD_VAR 0 4
38191: PPUSH
38192: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38196: LD_VAR 0 1
38200: PPUSH
38201: LD_VAR 0 2
38205: PPUSH
38206: LD_VAR 0 3
38210: PPUSH
38211: CALL_OW 331
// end ;
38215: LD_VAR 0 5
38219: RET
// export function Video ( mode ) ; begin
38220: LD_INT 0
38222: PPUSH
// ingame_video = mode ;
38223: LD_ADDR_OWVAR 52
38227: PUSH
38228: LD_VAR 0 1
38232: ST_TO_ADDR
// interface_hidden = mode ;
38233: LD_ADDR_OWVAR 54
38237: PUSH
38238: LD_VAR 0 1
38242: ST_TO_ADDR
// end ;
38243: LD_VAR 0 2
38247: RET
// export function Join ( array , element ) ; begin
38248: LD_INT 0
38250: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38251: LD_ADDR_VAR 0 3
38255: PUSH
38256: LD_VAR 0 1
38260: PPUSH
38261: LD_VAR 0 1
38265: PUSH
38266: LD_INT 1
38268: PLUS
38269: PPUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: CALL_OW 1
38279: ST_TO_ADDR
// end ;
38280: LD_VAR 0 3
38284: RET
// export function JoinUnion ( array , element ) ; begin
38285: LD_INT 0
38287: PPUSH
// result := array union element ;
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: LD_VAR 0 1
38297: PUSH
38298: LD_VAR 0 2
38302: UNION
38303: ST_TO_ADDR
// end ;
38304: LD_VAR 0 3
38308: RET
// export function GetBehemoths ( side ) ; begin
38309: LD_INT 0
38311: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38312: LD_ADDR_VAR 0 2
38316: PUSH
38317: LD_INT 22
38319: PUSH
38320: LD_VAR 0 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 31
38331: PUSH
38332: LD_INT 25
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PPUSH
38343: CALL_OW 69
38347: ST_TO_ADDR
// end ;
38348: LD_VAR 0 2
38352: RET
// export function Shuffle ( array ) ; var i , index ; begin
38353: LD_INT 0
38355: PPUSH
38356: PPUSH
38357: PPUSH
// result := [ ] ;
38358: LD_ADDR_VAR 0 2
38362: PUSH
38363: EMPTY
38364: ST_TO_ADDR
// if not array then
38365: LD_VAR 0 1
38369: NOT
38370: IFFALSE 38374
// exit ;
38372: GO 38473
// Randomize ;
38374: CALL_OW 10
// for i = array downto 1 do
38378: LD_ADDR_VAR 0 3
38382: PUSH
38383: DOUBLE
38384: LD_VAR 0 1
38388: INC
38389: ST_TO_ADDR
38390: LD_INT 1
38392: PUSH
38393: FOR_DOWNTO
38394: IFFALSE 38471
// begin index := rand ( 1 , array ) ;
38396: LD_ADDR_VAR 0 4
38400: PUSH
38401: LD_INT 1
38403: PPUSH
38404: LD_VAR 0 1
38408: PPUSH
38409: CALL_OW 12
38413: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38414: LD_ADDR_VAR 0 2
38418: PUSH
38419: LD_VAR 0 2
38423: PPUSH
38424: LD_VAR 0 2
38428: PUSH
38429: LD_INT 1
38431: PLUS
38432: PPUSH
38433: LD_VAR 0 1
38437: PUSH
38438: LD_VAR 0 4
38442: ARRAY
38443: PPUSH
38444: CALL_OW 2
38448: ST_TO_ADDR
// array := Delete ( array , index ) ;
38449: LD_ADDR_VAR 0 1
38453: PUSH
38454: LD_VAR 0 1
38458: PPUSH
38459: LD_VAR 0 4
38463: PPUSH
38464: CALL_OW 3
38468: ST_TO_ADDR
// end ;
38469: GO 38393
38471: POP
38472: POP
// end ;
38473: LD_VAR 0 2
38477: RET
// export function GetBaseMaterials ( base ) ; begin
38478: LD_INT 0
38480: PPUSH
// result := [ 0 , 0 , 0 ] ;
38481: LD_ADDR_VAR 0 2
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// if not base then
38500: LD_VAR 0 1
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 38558
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38509: LD_ADDR_VAR 0 2
38513: PUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: LD_INT 1
38521: PPUSH
38522: CALL_OW 275
38526: PUSH
38527: LD_VAR 0 1
38531: PPUSH
38532: LD_INT 2
38534: PPUSH
38535: CALL_OW 275
38539: PUSH
38540: LD_VAR 0 1
38544: PPUSH
38545: LD_INT 3
38547: PPUSH
38548: CALL_OW 275
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// end ;
38558: LD_VAR 0 2
38562: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38563: LD_INT 0
38565: PPUSH
38566: PPUSH
// result := array ;
38567: LD_ADDR_VAR 0 3
38571: PUSH
38572: LD_VAR 0 1
38576: ST_TO_ADDR
// if size >= result then
38577: LD_VAR 0 2
38581: PUSH
38582: LD_VAR 0 3
38586: GREATEREQUAL
38587: IFFALSE 38591
// exit ;
38589: GO 38641
// if size then
38591: LD_VAR 0 2
38595: IFFALSE 38641
// for i := array downto size do
38597: LD_ADDR_VAR 0 4
38601: PUSH
38602: DOUBLE
38603: LD_VAR 0 1
38607: INC
38608: ST_TO_ADDR
38609: LD_VAR 0 2
38613: PUSH
38614: FOR_DOWNTO
38615: IFFALSE 38639
// result := Delete ( result , result ) ;
38617: LD_ADDR_VAR 0 3
38621: PUSH
38622: LD_VAR 0 3
38626: PPUSH
38627: LD_VAR 0 3
38631: PPUSH
38632: CALL_OW 3
38636: ST_TO_ADDR
38637: GO 38614
38639: POP
38640: POP
// end ;
38641: LD_VAR 0 3
38645: RET
// export function ComExit ( unit ) ; var tmp ; begin
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
// if not IsInUnit ( unit ) then
38650: LD_VAR 0 1
38654: PPUSH
38655: CALL_OW 310
38659: NOT
38660: IFFALSE 38664
// exit ;
38662: GO 38724
// tmp := IsInUnit ( unit ) ;
38664: LD_ADDR_VAR 0 3
38668: PUSH
38669: LD_VAR 0 1
38673: PPUSH
38674: CALL_OW 310
38678: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38679: LD_VAR 0 3
38683: PPUSH
38684: CALL_OW 247
38688: PUSH
38689: LD_INT 2
38691: EQUAL
38692: IFFALSE 38705
// ComExitVehicle ( unit ) else
38694: LD_VAR 0 1
38698: PPUSH
38699: CALL_OW 121
38703: GO 38714
// ComExitBuilding ( unit ) ;
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 122
// result := tmp ;
38714: LD_ADDR_VAR 0 2
38718: PUSH
38719: LD_VAR 0 3
38723: ST_TO_ADDR
// end ;
38724: LD_VAR 0 2
38728: RET
// export function ComExitAll ( units ) ; var i ; begin
38729: LD_INT 0
38731: PPUSH
38732: PPUSH
// if not units then
38733: LD_VAR 0 1
38737: NOT
38738: IFFALSE 38742
// exit ;
38740: GO 38768
// for i in units do
38742: LD_ADDR_VAR 0 3
38746: PUSH
38747: LD_VAR 0 1
38751: PUSH
38752: FOR_IN
38753: IFFALSE 38766
// ComExit ( i ) ;
38755: LD_VAR 0 3
38759: PPUSH
38760: CALL 38646 0 1
38764: GO 38752
38766: POP
38767: POP
// end ;
38768: LD_VAR 0 2
38772: RET
// export function ResetHc ; begin
38773: LD_INT 0
38775: PPUSH
// InitHc ;
38776: CALL_OW 19
// hc_importance := 0 ;
38780: LD_ADDR_OWVAR 32
38784: PUSH
38785: LD_INT 0
38787: ST_TO_ADDR
// end ;
38788: LD_VAR 0 1
38792: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38793: LD_INT 0
38795: PPUSH
38796: PPUSH
38797: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38798: LD_ADDR_VAR 0 6
38802: PUSH
38803: LD_VAR 0 1
38807: PUSH
38808: LD_VAR 0 3
38812: PLUS
38813: PUSH
38814: LD_INT 2
38816: DIV
38817: ST_TO_ADDR
// if _x < 0 then
38818: LD_VAR 0 6
38822: PUSH
38823: LD_INT 0
38825: LESS
38826: IFFALSE 38843
// _x := _x * - 1 ;
38828: LD_ADDR_VAR 0 6
38832: PUSH
38833: LD_VAR 0 6
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: MUL
38842: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38843: LD_ADDR_VAR 0 7
38847: PUSH
38848: LD_VAR 0 2
38852: PUSH
38853: LD_VAR 0 4
38857: PLUS
38858: PUSH
38859: LD_INT 2
38861: DIV
38862: ST_TO_ADDR
// if _y < 0 then
38863: LD_VAR 0 7
38867: PUSH
38868: LD_INT 0
38870: LESS
38871: IFFALSE 38888
// _y := _y * - 1 ;
38873: LD_ADDR_VAR 0 7
38877: PUSH
38878: LD_VAR 0 7
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: MUL
38887: ST_TO_ADDR
// result := [ _x , _y ] ;
38888: LD_ADDR_VAR 0 5
38892: PUSH
38893: LD_VAR 0 6
38897: PUSH
38898: LD_VAR 0 7
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// end ;
38907: LD_VAR 0 5
38911: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
// task := GetTaskList ( unit ) ;
38918: LD_ADDR_VAR 0 7
38922: PUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 437
38932: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38933: LD_VAR 0 7
38937: NOT
38938: PUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: LD_VAR 0 2
38948: PPUSH
38949: CALL_OW 308
38953: NOT
38954: AND
38955: IFFALSE 38959
// exit ;
38957: GO 39077
// if IsInArea ( unit , area ) then
38959: LD_VAR 0 1
38963: PPUSH
38964: LD_VAR 0 2
38968: PPUSH
38969: CALL_OW 308
38973: IFFALSE 38991
// begin ComMoveToArea ( unit , goAway ) ;
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_VAR 0 3
38984: PPUSH
38985: CALL_OW 113
// exit ;
38989: GO 39077
// end ; if task [ 1 ] [ 1 ] <> M then
38991: LD_VAR 0 7
38995: PUSH
38996: LD_INT 1
38998: ARRAY
38999: PUSH
39000: LD_INT 1
39002: ARRAY
39003: PUSH
39004: LD_STRING M
39006: NONEQUAL
39007: IFFALSE 39011
// exit ;
39009: GO 39077
// x := task [ 1 ] [ 2 ] ;
39011: LD_ADDR_VAR 0 5
39015: PUSH
39016: LD_VAR 0 7
39020: PUSH
39021: LD_INT 1
39023: ARRAY
39024: PUSH
39025: LD_INT 2
39027: ARRAY
39028: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39029: LD_ADDR_VAR 0 6
39033: PUSH
39034: LD_VAR 0 7
39038: PUSH
39039: LD_INT 1
39041: ARRAY
39042: PUSH
39043: LD_INT 3
39045: ARRAY
39046: ST_TO_ADDR
// if InArea ( x , y , area ) then
39047: LD_VAR 0 5
39051: PPUSH
39052: LD_VAR 0 6
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: CALL_OW 309
39066: IFFALSE 39077
// ComStop ( unit ) ;
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 141
// end ;
39077: LD_VAR 0 4
39081: RET
// export function Abs ( value ) ; begin
39082: LD_INT 0
39084: PPUSH
// result := value ;
39085: LD_ADDR_VAR 0 2
39089: PUSH
39090: LD_VAR 0 1
39094: ST_TO_ADDR
// if value < 0 then
39095: LD_VAR 0 1
39099: PUSH
39100: LD_INT 0
39102: LESS
39103: IFFALSE 39120
// result := value * - 1 ;
39105: LD_ADDR_VAR 0 2
39109: PUSH
39110: LD_VAR 0 1
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: MUL
39119: ST_TO_ADDR
// end ;
39120: LD_VAR 0 2
39124: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39125: LD_INT 0
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
39132: PPUSH
39133: PPUSH
39134: PPUSH
// if not unit or not building then
39135: LD_VAR 0 1
39139: NOT
39140: PUSH
39141: LD_VAR 0 2
39145: NOT
39146: OR
39147: IFFALSE 39151
// exit ;
39149: GO 39377
// x := GetX ( building ) ;
39151: LD_ADDR_VAR 0 4
39155: PUSH
39156: LD_VAR 0 2
39160: PPUSH
39161: CALL_OW 250
39165: ST_TO_ADDR
// y := GetY ( building ) ;
39166: LD_ADDR_VAR 0 6
39170: PUSH
39171: LD_VAR 0 2
39175: PPUSH
39176: CALL_OW 251
39180: ST_TO_ADDR
// d := GetDir ( building ) ;
39181: LD_ADDR_VAR 0 8
39185: PUSH
39186: LD_VAR 0 2
39190: PPUSH
39191: CALL_OW 254
39195: ST_TO_ADDR
// r := 4 ;
39196: LD_ADDR_VAR 0 9
39200: PUSH
39201: LD_INT 4
39203: ST_TO_ADDR
// for i := 1 to 5 do
39204: LD_ADDR_VAR 0 10
39208: PUSH
39209: DOUBLE
39210: LD_INT 1
39212: DEC
39213: ST_TO_ADDR
39214: LD_INT 5
39216: PUSH
39217: FOR_TO
39218: IFFALSE 39375
// begin _x := ShiftX ( x , d , r + i ) ;
39220: LD_ADDR_VAR 0 5
39224: PUSH
39225: LD_VAR 0 4
39229: PPUSH
39230: LD_VAR 0 8
39234: PPUSH
39235: LD_VAR 0 9
39239: PUSH
39240: LD_VAR 0 10
39244: PLUS
39245: PPUSH
39246: CALL_OW 272
39250: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39251: LD_ADDR_VAR 0 7
39255: PUSH
39256: LD_VAR 0 6
39260: PPUSH
39261: LD_VAR 0 8
39265: PPUSH
39266: LD_VAR 0 9
39270: PUSH
39271: LD_VAR 0 10
39275: PLUS
39276: PPUSH
39277: CALL_OW 273
39281: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39282: LD_VAR 0 5
39286: PPUSH
39287: LD_VAR 0 7
39291: PPUSH
39292: CALL_OW 488
39296: PUSH
39297: LD_VAR 0 5
39301: PPUSH
39302: LD_VAR 0 7
39306: PPUSH
39307: CALL_OW 428
39311: PPUSH
39312: CALL_OW 247
39316: PUSH
39317: LD_INT 3
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: IN
39327: NOT
39328: AND
39329: IFFALSE 39373
// begin ComMoveXY ( unit , _x , _y ) ;
39331: LD_VAR 0 1
39335: PPUSH
39336: LD_VAR 0 5
39340: PPUSH
39341: LD_VAR 0 7
39345: PPUSH
39346: CALL_OW 111
// result := [ _x , _y ] ;
39350: LD_ADDR_VAR 0 3
39354: PUSH
39355: LD_VAR 0 5
39359: PUSH
39360: LD_VAR 0 7
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: ST_TO_ADDR
// exit ;
39369: POP
39370: POP
39371: GO 39377
// end ; end ;
39373: GO 39217
39375: POP
39376: POP
// end ;
39377: LD_VAR 0 3
39381: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39382: LD_INT 0
39384: PPUSH
39385: PPUSH
39386: PPUSH
// result := 0 ;
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_INT 0
39394: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39395: LD_VAR 0 1
39399: PUSH
39400: LD_INT 0
39402: LESS
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_INT 8
39411: GREATER
39412: OR
39413: PUSH
39414: LD_VAR 0 2
39418: PUSH
39419: LD_INT 0
39421: LESS
39422: OR
39423: PUSH
39424: LD_VAR 0 2
39428: PUSH
39429: LD_INT 8
39431: GREATER
39432: OR
39433: IFFALSE 39437
// exit ;
39435: GO 39512
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39437: LD_ADDR_VAR 0 4
39441: PUSH
39442: LD_INT 22
39444: PUSH
39445: LD_VAR 0 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PPUSH
39454: CALL_OW 69
39458: PUSH
39459: FOR_IN
39460: IFFALSE 39510
// begin un := UnitShoot ( i ) ;
39462: LD_ADDR_VAR 0 5
39466: PUSH
39467: LD_VAR 0 4
39471: PPUSH
39472: CALL_OW 504
39476: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39477: LD_VAR 0 5
39481: PPUSH
39482: CALL_OW 255
39486: PUSH
39487: LD_VAR 0 1
39491: EQUAL
39492: IFFALSE 39508
// begin result := un ;
39494: LD_ADDR_VAR 0 3
39498: PUSH
39499: LD_VAR 0 5
39503: ST_TO_ADDR
// exit ;
39504: POP
39505: POP
39506: GO 39512
// end ; end ;
39508: GO 39459
39510: POP
39511: POP
// end ;
39512: LD_VAR 0 3
39516: RET
// export function GetCargoBay ( units ) ; begin
39517: LD_INT 0
39519: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39520: LD_ADDR_VAR 0 2
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 34
39535: PUSH
39536: LD_INT 12
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 34
39545: PUSH
39546: LD_INT 51
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 34
39555: PUSH
39556: LD_INT 32
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 34
39565: PUSH
39566: LD_INT 89
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: PPUSH
39580: CALL_OW 72
39584: ST_TO_ADDR
// end ;
39585: LD_VAR 0 2
39589: RET
// export function Negate ( value ) ; begin
39590: LD_INT 0
39592: PPUSH
// result := not value ;
39593: LD_ADDR_VAR 0 2
39597: PUSH
39598: LD_VAR 0 1
39602: NOT
39603: ST_TO_ADDR
// end ;
39604: LD_VAR 0 2
39608: RET
// export function Inc ( value ) ; begin
39609: LD_INT 0
39611: PPUSH
// result := value + 1 ;
39612: LD_ADDR_VAR 0 2
39616: PUSH
39617: LD_VAR 0 1
39621: PUSH
39622: LD_INT 1
39624: PLUS
39625: ST_TO_ADDR
// end ;
39626: LD_VAR 0 2
39630: RET
// export function Dec ( value ) ; begin
39631: LD_INT 0
39633: PPUSH
// result := value - 1 ;
39634: LD_ADDR_VAR 0 2
39638: PUSH
39639: LD_VAR 0 1
39643: PUSH
39644: LD_INT 1
39646: MINUS
39647: ST_TO_ADDR
// end ;
39648: LD_VAR 0 2
39652: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39653: LD_INT 0
39655: PPUSH
39656: PPUSH
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39663: LD_VAR 0 1
39667: PPUSH
39668: LD_VAR 0 2
39672: PPUSH
39673: CALL_OW 488
39677: NOT
39678: PUSH
39679: LD_VAR 0 3
39683: PPUSH
39684: LD_VAR 0 4
39688: PPUSH
39689: CALL_OW 488
39693: NOT
39694: OR
39695: IFFALSE 39708
// begin result := - 1 ;
39697: LD_ADDR_VAR 0 5
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: ST_TO_ADDR
// exit ;
39706: GO 39943
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39708: LD_ADDR_VAR 0 12
39712: PUSH
39713: LD_VAR 0 1
39717: PPUSH
39718: LD_VAR 0 2
39722: PPUSH
39723: LD_VAR 0 3
39727: PPUSH
39728: LD_VAR 0 4
39732: PPUSH
39733: CALL 38793 0 4
39737: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39738: LD_ADDR_VAR 0 11
39742: PUSH
39743: LD_VAR 0 1
39747: PPUSH
39748: LD_VAR 0 2
39752: PPUSH
39753: LD_VAR 0 12
39757: PUSH
39758: LD_INT 1
39760: ARRAY
39761: PPUSH
39762: LD_VAR 0 12
39766: PUSH
39767: LD_INT 2
39769: ARRAY
39770: PPUSH
39771: CALL_OW 298
39775: ST_TO_ADDR
// distance := 9999 ;
39776: LD_ADDR_VAR 0 10
39780: PUSH
39781: LD_INT 9999
39783: ST_TO_ADDR
// for i := 0 to 5 do
39784: LD_ADDR_VAR 0 6
39788: PUSH
39789: DOUBLE
39790: LD_INT 0
39792: DEC
39793: ST_TO_ADDR
39794: LD_INT 5
39796: PUSH
39797: FOR_TO
39798: IFFALSE 39941
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39800: LD_ADDR_VAR 0 7
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: LD_VAR 0 6
39814: PPUSH
39815: LD_VAR 0 11
39819: PPUSH
39820: CALL_OW 272
39824: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39825: LD_ADDR_VAR 0 8
39829: PUSH
39830: LD_VAR 0 2
39834: PPUSH
39835: LD_VAR 0 6
39839: PPUSH
39840: LD_VAR 0 11
39844: PPUSH
39845: CALL_OW 273
39849: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39850: LD_VAR 0 7
39854: PPUSH
39855: LD_VAR 0 8
39859: PPUSH
39860: CALL_OW 488
39864: NOT
39865: IFFALSE 39869
// continue ;
39867: GO 39797
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39869: LD_ADDR_VAR 0 9
39873: PUSH
39874: LD_VAR 0 12
39878: PUSH
39879: LD_INT 1
39881: ARRAY
39882: PPUSH
39883: LD_VAR 0 12
39887: PUSH
39888: LD_INT 2
39890: ARRAY
39891: PPUSH
39892: LD_VAR 0 7
39896: PPUSH
39897: LD_VAR 0 8
39901: PPUSH
39902: CALL_OW 298
39906: ST_TO_ADDR
// if tmp < distance then
39907: LD_VAR 0 9
39911: PUSH
39912: LD_VAR 0 10
39916: LESS
39917: IFFALSE 39939
// begin result := i ;
39919: LD_ADDR_VAR 0 5
39923: PUSH
39924: LD_VAR 0 6
39928: ST_TO_ADDR
// distance := tmp ;
39929: LD_ADDR_VAR 0 10
39933: PUSH
39934: LD_VAR 0 9
39938: ST_TO_ADDR
// end ; end ;
39939: GO 39797
39941: POP
39942: POP
// end ;
39943: LD_VAR 0 5
39947: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39948: LD_INT 0
39950: PPUSH
39951: PPUSH
// if not driver or not IsInUnit ( driver ) then
39952: LD_VAR 0 1
39956: NOT
39957: PUSH
39958: LD_VAR 0 1
39962: PPUSH
39963: CALL_OW 310
39967: NOT
39968: OR
39969: IFFALSE 39973
// exit ;
39971: GO 40063
// vehicle := IsInUnit ( driver ) ;
39973: LD_ADDR_VAR 0 3
39977: PUSH
39978: LD_VAR 0 1
39982: PPUSH
39983: CALL_OW 310
39987: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39988: LD_VAR 0 1
39992: PPUSH
39993: LD_STRING \
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: PUSH
40023: LD_STRING E
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_VAR 0 3
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PPUSH
40059: CALL_OW 446
// end ;
40063: LD_VAR 0 2
40067: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40068: LD_INT 0
40070: PPUSH
40071: PPUSH
// if not driver or not IsInUnit ( driver ) then
40072: LD_VAR 0 1
40076: NOT
40077: PUSH
40078: LD_VAR 0 1
40082: PPUSH
40083: CALL_OW 310
40087: NOT
40088: OR
40089: IFFALSE 40093
// exit ;
40091: GO 40183
// vehicle := IsInUnit ( driver ) ;
40093: LD_ADDR_VAR 0 3
40097: PUSH
40098: LD_VAR 0 1
40102: PPUSH
40103: CALL_OW 310
40107: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40108: LD_VAR 0 1
40112: PPUSH
40113: LD_STRING \
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: PUSH
40143: LD_STRING E
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_VAR 0 3
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PPUSH
40179: CALL_OW 447
// end ;
40183: LD_VAR 0 2
40187: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40188: LD_INT 0
40190: PPUSH
40191: PPUSH
40192: PPUSH
// tmp := [ ] ;
40193: LD_ADDR_VAR 0 5
40197: PUSH
40198: EMPTY
40199: ST_TO_ADDR
// for i in units do
40200: LD_ADDR_VAR 0 4
40204: PUSH
40205: LD_VAR 0 1
40209: PUSH
40210: FOR_IN
40211: IFFALSE 40249
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40213: LD_ADDR_VAR 0 5
40217: PUSH
40218: LD_VAR 0 5
40222: PPUSH
40223: LD_VAR 0 5
40227: PUSH
40228: LD_INT 1
40230: PLUS
40231: PPUSH
40232: LD_VAR 0 4
40236: PPUSH
40237: CALL_OW 256
40241: PPUSH
40242: CALL_OW 2
40246: ST_TO_ADDR
40247: GO 40210
40249: POP
40250: POP
// if not tmp then
40251: LD_VAR 0 5
40255: NOT
40256: IFFALSE 40260
// exit ;
40258: GO 40308
// if asc then
40260: LD_VAR 0 2
40264: IFFALSE 40288
// result := SortListByListAsc ( units , tmp ) else
40266: LD_ADDR_VAR 0 3
40270: PUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: LD_VAR 0 5
40280: PPUSH
40281: CALL_OW 76
40285: ST_TO_ADDR
40286: GO 40308
// result := SortListByListDesc ( units , tmp ) ;
40288: LD_ADDR_VAR 0 3
40292: PUSH
40293: LD_VAR 0 1
40297: PPUSH
40298: LD_VAR 0 5
40302: PPUSH
40303: CALL_OW 77
40307: ST_TO_ADDR
// end ;
40308: LD_VAR 0 3
40312: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40313: LD_INT 0
40315: PPUSH
40316: PPUSH
// task := GetTaskList ( mech ) ;
40317: LD_ADDR_VAR 0 4
40321: PUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 437
40331: ST_TO_ADDR
// if not task then
40332: LD_VAR 0 4
40336: NOT
40337: IFFALSE 40341
// exit ;
40339: GO 40383
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_VAR 0 4
40350: PUSH
40351: LD_INT 1
40353: ARRAY
40354: PUSH
40355: LD_INT 1
40357: ARRAY
40358: PUSH
40359: LD_STRING r
40361: EQUAL
40362: PUSH
40363: LD_VAR 0 4
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: PUSH
40372: LD_INT 4
40374: ARRAY
40375: PUSH
40376: LD_VAR 0 2
40380: EQUAL
40381: AND
40382: ST_TO_ADDR
// end ;
40383: LD_VAR 0 3
40387: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40388: LD_INT 0
40390: PPUSH
// SetDir ( unit , d ) ;
40391: LD_VAR 0 1
40395: PPUSH
40396: LD_VAR 0 4
40400: PPUSH
40401: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40405: LD_VAR 0 1
40409: PPUSH
40410: LD_VAR 0 2
40414: PPUSH
40415: LD_VAR 0 3
40419: PPUSH
40420: LD_VAR 0 5
40424: PPUSH
40425: CALL_OW 48
// end ;
40429: LD_VAR 0 6
40433: RET
// export function ToNaturalNumber ( number ) ; begin
40434: LD_INT 0
40436: PPUSH
// result := number div 1 ;
40437: LD_ADDR_VAR 0 2
40441: PUSH
40442: LD_VAR 0 1
40446: PUSH
40447: LD_INT 1
40449: DIV
40450: ST_TO_ADDR
// if number < 0 then
40451: LD_VAR 0 1
40455: PUSH
40456: LD_INT 0
40458: LESS
40459: IFFALSE 40469
// result := 0 ;
40461: LD_ADDR_VAR 0 2
40465: PUSH
40466: LD_INT 0
40468: ST_TO_ADDR
// end ;
40469: LD_VAR 0 2
40473: RET
// export function SortByClass ( units , class ) ; var un ; begin
40474: LD_INT 0
40476: PPUSH
40477: PPUSH
// if not units or not class then
40478: LD_VAR 0 1
40482: NOT
40483: PUSH
40484: LD_VAR 0 2
40488: NOT
40489: OR
40490: IFFALSE 40494
// exit ;
40492: GO 40589
// result := [ ] ;
40494: LD_ADDR_VAR 0 3
40498: PUSH
40499: EMPTY
40500: ST_TO_ADDR
// for un in units do
40501: LD_ADDR_VAR 0 4
40505: PUSH
40506: LD_VAR 0 1
40510: PUSH
40511: FOR_IN
40512: IFFALSE 40587
// if GetClass ( un ) = class then
40514: LD_VAR 0 4
40518: PPUSH
40519: CALL_OW 257
40523: PUSH
40524: LD_VAR 0 2
40528: EQUAL
40529: IFFALSE 40556
// result := Insert ( result , 1 , un ) else
40531: LD_ADDR_VAR 0 3
40535: PUSH
40536: LD_VAR 0 3
40540: PPUSH
40541: LD_INT 1
40543: PPUSH
40544: LD_VAR 0 4
40548: PPUSH
40549: CALL_OW 2
40553: ST_TO_ADDR
40554: GO 40585
// result := Replace ( result , result + 1 , un ) ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_VAR 0 3
40565: PPUSH
40566: LD_VAR 0 3
40570: PUSH
40571: LD_INT 1
40573: PLUS
40574: PPUSH
40575: LD_VAR 0 4
40579: PPUSH
40580: CALL_OW 1
40584: ST_TO_ADDR
40585: GO 40511
40587: POP
40588: POP
// end ;
40589: LD_VAR 0 3
40593: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40594: LD_INT 0
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
// result := [ ] ;
40603: LD_ADDR_VAR 0 4
40607: PUSH
40608: EMPTY
40609: ST_TO_ADDR
// if x - r < 0 then
40610: LD_VAR 0 1
40614: PUSH
40615: LD_VAR 0 3
40619: MINUS
40620: PUSH
40621: LD_INT 0
40623: LESS
40624: IFFALSE 40636
// min_x := 0 else
40626: LD_ADDR_VAR 0 8
40630: PUSH
40631: LD_INT 0
40633: ST_TO_ADDR
40634: GO 40652
// min_x := x - r ;
40636: LD_ADDR_VAR 0 8
40640: PUSH
40641: LD_VAR 0 1
40645: PUSH
40646: LD_VAR 0 3
40650: MINUS
40651: ST_TO_ADDR
// if y - r < 0 then
40652: LD_VAR 0 2
40656: PUSH
40657: LD_VAR 0 3
40661: MINUS
40662: PUSH
40663: LD_INT 0
40665: LESS
40666: IFFALSE 40678
// min_y := 0 else
40668: LD_ADDR_VAR 0 7
40672: PUSH
40673: LD_INT 0
40675: ST_TO_ADDR
40676: GO 40694
// min_y := y - r ;
40678: LD_ADDR_VAR 0 7
40682: PUSH
40683: LD_VAR 0 2
40687: PUSH
40688: LD_VAR 0 3
40692: MINUS
40693: ST_TO_ADDR
// max_x := x + r ;
40694: LD_ADDR_VAR 0 9
40698: PUSH
40699: LD_VAR 0 1
40703: PUSH
40704: LD_VAR 0 3
40708: PLUS
40709: ST_TO_ADDR
// max_y := y + r ;
40710: LD_ADDR_VAR 0 10
40714: PUSH
40715: LD_VAR 0 2
40719: PUSH
40720: LD_VAR 0 3
40724: PLUS
40725: ST_TO_ADDR
// for _x = min_x to max_x do
40726: LD_ADDR_VAR 0 5
40730: PUSH
40731: DOUBLE
40732: LD_VAR 0 8
40736: DEC
40737: ST_TO_ADDR
40738: LD_VAR 0 9
40742: PUSH
40743: FOR_TO
40744: IFFALSE 40845
// for _y = min_y to max_y do
40746: LD_ADDR_VAR 0 6
40750: PUSH
40751: DOUBLE
40752: LD_VAR 0 7
40756: DEC
40757: ST_TO_ADDR
40758: LD_VAR 0 10
40762: PUSH
40763: FOR_TO
40764: IFFALSE 40841
// begin if not ValidHex ( _x , _y ) then
40766: LD_VAR 0 5
40770: PPUSH
40771: LD_VAR 0 6
40775: PPUSH
40776: CALL_OW 488
40780: NOT
40781: IFFALSE 40785
// continue ;
40783: GO 40763
// if GetResourceTypeXY ( _x , _y ) then
40785: LD_VAR 0 5
40789: PPUSH
40790: LD_VAR 0 6
40794: PPUSH
40795: CALL_OW 283
40799: IFFALSE 40839
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40801: LD_ADDR_VAR 0 4
40805: PUSH
40806: LD_VAR 0 4
40810: PPUSH
40811: LD_VAR 0 4
40815: PUSH
40816: LD_INT 1
40818: PLUS
40819: PPUSH
40820: LD_VAR 0 5
40824: PUSH
40825: LD_VAR 0 6
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PPUSH
40834: CALL_OW 1
40838: ST_TO_ADDR
// end ;
40839: GO 40763
40841: POP
40842: POP
40843: GO 40743
40845: POP
40846: POP
// end ;
40847: LD_VAR 0 4
40851: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40852: LD_INT 0
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
// if not units then
40862: LD_VAR 0 1
40866: NOT
40867: IFFALSE 40871
// exit ;
40869: GO 41399
// result := UnitFilter ( units , [ f_ok ] ) ;
40871: LD_ADDR_VAR 0 3
40875: PUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: LD_INT 50
40883: PUSH
40884: EMPTY
40885: LIST
40886: PPUSH
40887: CALL_OW 72
40891: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40892: LD_ADDR_VAR 0 8
40896: PUSH
40897: LD_VAR 0 1
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PPUSH
40906: CALL_OW 255
40910: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40911: LD_ADDR_VAR 0 10
40915: PUSH
40916: LD_INT 29
40918: PUSH
40919: LD_INT 91
40921: PUSH
40922: LD_INT 49
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: ST_TO_ADDR
// if not result then
40930: LD_VAR 0 3
40934: NOT
40935: IFFALSE 40939
// exit ;
40937: GO 41399
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40939: LD_ADDR_VAR 0 5
40943: PUSH
40944: LD_INT 81
40946: PUSH
40947: LD_VAR 0 8
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PPUSH
40956: CALL_OW 69
40960: ST_TO_ADDR
// for i in result do
40961: LD_ADDR_VAR 0 4
40965: PUSH
40966: LD_VAR 0 3
40970: PUSH
40971: FOR_IN
40972: IFFALSE 41397
// begin tag := GetTag ( i ) + 1 ;
40974: LD_ADDR_VAR 0 9
40978: PUSH
40979: LD_VAR 0 4
40983: PPUSH
40984: CALL_OW 110
40988: PUSH
40989: LD_INT 1
40991: PLUS
40992: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
40993: LD_ADDR_VAR 0 7
40997: PUSH
40998: LD_VAR 0 4
41002: PPUSH
41003: CALL_OW 250
41007: PPUSH
41008: LD_VAR 0 4
41012: PPUSH
41013: CALL_OW 251
41017: PPUSH
41018: LD_INT 4
41020: PPUSH
41021: CALL 40594 0 3
41025: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41026: LD_VAR 0 4
41030: PPUSH
41031: CALL_OW 247
41035: PUSH
41036: LD_INT 2
41038: EQUAL
41039: PUSH
41040: LD_VAR 0 7
41044: PUSH
41045: LD_INT 2
41047: GREATER
41048: AND
41049: PUSH
41050: LD_VAR 0 4
41054: PPUSH
41055: CALL_OW 264
41059: PUSH
41060: LD_VAR 0 10
41064: IN
41065: NOT
41066: AND
41067: IFFALSE 41106
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41069: LD_VAR 0 4
41073: PPUSH
41074: LD_VAR 0 7
41078: PUSH
41079: LD_INT 1
41081: ARRAY
41082: PUSH
41083: LD_INT 1
41085: ARRAY
41086: PPUSH
41087: LD_VAR 0 7
41091: PUSH
41092: LD_INT 1
41094: ARRAY
41095: PUSH
41096: LD_INT 2
41098: ARRAY
41099: PPUSH
41100: CALL_OW 116
41104: GO 41395
// if path > tag then
41106: LD_VAR 0 2
41110: PUSH
41111: LD_VAR 0 9
41115: GREATER
41116: IFFALSE 41324
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41118: LD_ADDR_VAR 0 6
41122: PUSH
41123: LD_VAR 0 5
41127: PPUSH
41128: LD_INT 91
41130: PUSH
41131: LD_VAR 0 4
41135: PUSH
41136: LD_INT 8
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: PPUSH
41144: CALL_OW 72
41148: ST_TO_ADDR
// if nearEnemy then
41149: LD_VAR 0 6
41153: IFFALSE 41222
// begin if GetWeapon ( i ) = ru_time_lapser then
41155: LD_VAR 0 4
41159: PPUSH
41160: CALL_OW 264
41164: PUSH
41165: LD_INT 49
41167: EQUAL
41168: IFFALSE 41196
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41170: LD_VAR 0 4
41174: PPUSH
41175: LD_VAR 0 6
41179: PPUSH
41180: LD_VAR 0 4
41184: PPUSH
41185: CALL_OW 74
41189: PPUSH
41190: CALL_OW 112
41194: GO 41220
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41196: LD_VAR 0 4
41200: PPUSH
41201: LD_VAR 0 6
41205: PPUSH
41206: LD_VAR 0 4
41210: PPUSH
41211: CALL_OW 74
41215: PPUSH
41216: CALL 42470 0 2
// end else
41220: GO 41322
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41222: LD_VAR 0 4
41226: PPUSH
41227: LD_VAR 0 2
41231: PUSH
41232: LD_VAR 0 9
41236: ARRAY
41237: PUSH
41238: LD_INT 1
41240: ARRAY
41241: PPUSH
41242: LD_VAR 0 2
41246: PUSH
41247: LD_VAR 0 9
41251: ARRAY
41252: PUSH
41253: LD_INT 2
41255: ARRAY
41256: PPUSH
41257: CALL_OW 297
41261: PUSH
41262: LD_INT 6
41264: GREATER
41265: IFFALSE 41308
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41267: LD_VAR 0 4
41271: PPUSH
41272: LD_VAR 0 2
41276: PUSH
41277: LD_VAR 0 9
41281: ARRAY
41282: PUSH
41283: LD_INT 1
41285: ARRAY
41286: PPUSH
41287: LD_VAR 0 2
41291: PUSH
41292: LD_VAR 0 9
41296: ARRAY
41297: PUSH
41298: LD_INT 2
41300: ARRAY
41301: PPUSH
41302: CALL_OW 114
41306: GO 41322
// SetTag ( i , tag ) ;
41308: LD_VAR 0 4
41312: PPUSH
41313: LD_VAR 0 9
41317: PPUSH
41318: CALL_OW 109
// end else
41322: GO 41395
// if enemy then
41324: LD_VAR 0 5
41328: IFFALSE 41395
// begin if GetWeapon ( i ) = ru_time_lapser then
41330: LD_VAR 0 4
41334: PPUSH
41335: CALL_OW 264
41339: PUSH
41340: LD_INT 49
41342: EQUAL
41343: IFFALSE 41371
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41345: LD_VAR 0 4
41349: PPUSH
41350: LD_VAR 0 5
41354: PPUSH
41355: LD_VAR 0 4
41359: PPUSH
41360: CALL_OW 74
41364: PPUSH
41365: CALL_OW 112
41369: GO 41395
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41371: LD_VAR 0 4
41375: PPUSH
41376: LD_VAR 0 5
41380: PPUSH
41381: LD_VAR 0 4
41385: PPUSH
41386: CALL_OW 74
41390: PPUSH
41391: CALL 42470 0 2
// end ; end ;
41395: GO 40971
41397: POP
41398: POP
// end ;
41399: LD_VAR 0 3
41403: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41404: LD_INT 0
41406: PPUSH
41407: PPUSH
41408: PPUSH
// if not unit or IsInUnit ( unit ) then
41409: LD_VAR 0 1
41413: NOT
41414: PUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: CALL_OW 310
41424: OR
41425: IFFALSE 41429
// exit ;
41427: GO 41520
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41429: LD_ADDR_VAR 0 4
41433: PUSH
41434: LD_VAR 0 1
41438: PPUSH
41439: CALL_OW 250
41443: PPUSH
41444: LD_VAR 0 2
41448: PPUSH
41449: LD_INT 1
41451: PPUSH
41452: CALL_OW 272
41456: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41457: LD_ADDR_VAR 0 5
41461: PUSH
41462: LD_VAR 0 1
41466: PPUSH
41467: CALL_OW 251
41471: PPUSH
41472: LD_VAR 0 2
41476: PPUSH
41477: LD_INT 1
41479: PPUSH
41480: CALL_OW 273
41484: ST_TO_ADDR
// if ValidHex ( x , y ) then
41485: LD_VAR 0 4
41489: PPUSH
41490: LD_VAR 0 5
41494: PPUSH
41495: CALL_OW 488
41499: IFFALSE 41520
// ComTurnXY ( unit , x , y ) ;
41501: LD_VAR 0 1
41505: PPUSH
41506: LD_VAR 0 4
41510: PPUSH
41511: LD_VAR 0 5
41515: PPUSH
41516: CALL_OW 118
// end ;
41520: LD_VAR 0 3
41524: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41525: LD_INT 0
41527: PPUSH
41528: PPUSH
// result := false ;
41529: LD_ADDR_VAR 0 3
41533: PUSH
41534: LD_INT 0
41536: ST_TO_ADDR
// if not units then
41537: LD_VAR 0 2
41541: NOT
41542: IFFALSE 41546
// exit ;
41544: GO 41591
// for i in units do
41546: LD_ADDR_VAR 0 4
41550: PUSH
41551: LD_VAR 0 2
41555: PUSH
41556: FOR_IN
41557: IFFALSE 41589
// if See ( side , i ) then
41559: LD_VAR 0 1
41563: PPUSH
41564: LD_VAR 0 4
41568: PPUSH
41569: CALL_OW 292
41573: IFFALSE 41587
// begin result := true ;
41575: LD_ADDR_VAR 0 3
41579: PUSH
41580: LD_INT 1
41582: ST_TO_ADDR
// exit ;
41583: POP
41584: POP
41585: GO 41591
// end ;
41587: GO 41556
41589: POP
41590: POP
// end ;
41591: LD_VAR 0 3
41595: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41596: LD_INT 0
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
// if not unit or not points then
41602: LD_VAR 0 1
41606: NOT
41607: PUSH
41608: LD_VAR 0 2
41612: NOT
41613: OR
41614: IFFALSE 41618
// exit ;
41616: GO 41708
// dist := 99999 ;
41618: LD_ADDR_VAR 0 5
41622: PUSH
41623: LD_INT 99999
41625: ST_TO_ADDR
// for i in points do
41626: LD_ADDR_VAR 0 4
41630: PUSH
41631: LD_VAR 0 2
41635: PUSH
41636: FOR_IN
41637: IFFALSE 41706
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41639: LD_ADDR_VAR 0 6
41643: PUSH
41644: LD_VAR 0 1
41648: PPUSH
41649: LD_VAR 0 4
41653: PUSH
41654: LD_INT 1
41656: ARRAY
41657: PPUSH
41658: LD_VAR 0 4
41662: PUSH
41663: LD_INT 2
41665: ARRAY
41666: PPUSH
41667: CALL_OW 297
41671: ST_TO_ADDR
// if tmpDist < dist then
41672: LD_VAR 0 6
41676: PUSH
41677: LD_VAR 0 5
41681: LESS
41682: IFFALSE 41704
// begin result := i ;
41684: LD_ADDR_VAR 0 3
41688: PUSH
41689: LD_VAR 0 4
41693: ST_TO_ADDR
// dist := tmpDist ;
41694: LD_ADDR_VAR 0 5
41698: PUSH
41699: LD_VAR 0 6
41703: ST_TO_ADDR
// end ; end ;
41704: GO 41636
41706: POP
41707: POP
// end ;
41708: LD_VAR 0 3
41712: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41713: LD_INT 0
41715: PPUSH
// uc_side := side ;
41716: LD_ADDR_OWVAR 20
41720: PUSH
41721: LD_VAR 0 1
41725: ST_TO_ADDR
// uc_nation := 3 ;
41726: LD_ADDR_OWVAR 21
41730: PUSH
41731: LD_INT 3
41733: ST_TO_ADDR
// vc_chassis := 25 ;
41734: LD_ADDR_OWVAR 37
41738: PUSH
41739: LD_INT 25
41741: ST_TO_ADDR
// vc_engine := engine_siberite ;
41742: LD_ADDR_OWVAR 39
41746: PUSH
41747: LD_INT 3
41749: ST_TO_ADDR
// vc_control := control_computer ;
41750: LD_ADDR_OWVAR 38
41754: PUSH
41755: LD_INT 3
41757: ST_TO_ADDR
// vc_weapon := 59 ;
41758: LD_ADDR_OWVAR 40
41762: PUSH
41763: LD_INT 59
41765: ST_TO_ADDR
// result := CreateVehicle ;
41766: LD_ADDR_VAR 0 5
41770: PUSH
41771: CALL_OW 45
41775: ST_TO_ADDR
// SetDir ( result , d ) ;
41776: LD_VAR 0 5
41780: PPUSH
41781: LD_VAR 0 4
41785: PPUSH
41786: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41790: LD_VAR 0 5
41794: PPUSH
41795: LD_VAR 0 2
41799: PPUSH
41800: LD_VAR 0 3
41804: PPUSH
41805: LD_INT 0
41807: PPUSH
41808: CALL_OW 48
// end ;
41812: LD_VAR 0 5
41816: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41817: LD_INT 0
41819: PPUSH
41820: PPUSH
41821: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41822: LD_ADDR_VAR 0 2
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41845: LD_VAR 0 1
41849: NOT
41850: PUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 264
41860: PUSH
41861: LD_INT 12
41863: PUSH
41864: LD_INT 51
41866: PUSH
41867: LD_INT 32
41869: PUSH
41870: LD_INT 89
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: IN
41879: NOT
41880: OR
41881: IFFALSE 41885
// exit ;
41883: GO 41983
// for i := 1 to 3 do
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: DOUBLE
41891: LD_INT 1
41893: DEC
41894: ST_TO_ADDR
41895: LD_INT 3
41897: PUSH
41898: FOR_TO
41899: IFFALSE 41981
// begin tmp := GetCargo ( cargo , i ) ;
41901: LD_ADDR_VAR 0 4
41905: PUSH
41906: LD_VAR 0 1
41910: PPUSH
41911: LD_VAR 0 3
41915: PPUSH
41916: CALL_OW 289
41920: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41921: LD_ADDR_VAR 0 2
41925: PUSH
41926: LD_VAR 0 2
41930: PPUSH
41931: LD_VAR 0 3
41935: PPUSH
41936: LD_VAR 0 4
41940: PPUSH
41941: CALL_OW 1
41945: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41946: LD_ADDR_VAR 0 2
41950: PUSH
41951: LD_VAR 0 2
41955: PPUSH
41956: LD_INT 4
41958: PPUSH
41959: LD_VAR 0 2
41963: PUSH
41964: LD_INT 4
41966: ARRAY
41967: PUSH
41968: LD_VAR 0 4
41972: PLUS
41973: PPUSH
41974: CALL_OW 1
41978: ST_TO_ADDR
// end ;
41979: GO 41898
41981: POP
41982: POP
// end ;
41983: LD_VAR 0 2
41987: RET
// export function Length ( array ) ; begin
41988: LD_INT 0
41990: PPUSH
// result := array + 0 ;
41991: LD_ADDR_VAR 0 2
41995: PUSH
41996: LD_VAR 0 1
42000: PUSH
42001: LD_INT 0
42003: PLUS
42004: ST_TO_ADDR
// end ;
42005: LD_VAR 0 2
42009: RET
// export function PrepareArray ( array ) ; begin
42010: LD_INT 0
42012: PPUSH
// result := array diff 0 ;
42013: LD_ADDR_VAR 0 2
42017: PUSH
42018: LD_VAR 0 1
42022: PUSH
42023: LD_INT 0
42025: DIFF
42026: ST_TO_ADDR
// if not result [ 1 ] then
42027: LD_VAR 0 2
42031: PUSH
42032: LD_INT 1
42034: ARRAY
42035: NOT
42036: IFFALSE 42056
// result := Delete ( result , 1 ) ;
42038: LD_ADDR_VAR 0 2
42042: PUSH
42043: LD_VAR 0 2
42047: PPUSH
42048: LD_INT 1
42050: PPUSH
42051: CALL_OW 3
42055: ST_TO_ADDR
// end ;
42056: LD_VAR 0 2
42060: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42061: LD_INT 0
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
// sibRocketRange := 25 ;
42067: LD_ADDR_VAR 0 6
42071: PUSH
42072: LD_INT 25
42074: ST_TO_ADDR
// result := false ;
42075: LD_ADDR_VAR 0 4
42079: PUSH
42080: LD_INT 0
42082: ST_TO_ADDR
// for i := 0 to 5 do
42083: LD_ADDR_VAR 0 5
42087: PUSH
42088: DOUBLE
42089: LD_INT 0
42091: DEC
42092: ST_TO_ADDR
42093: LD_INT 5
42095: PUSH
42096: FOR_TO
42097: IFFALSE 42164
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42099: LD_VAR 0 1
42103: PPUSH
42104: LD_VAR 0 5
42108: PPUSH
42109: LD_VAR 0 6
42113: PPUSH
42114: CALL_OW 272
42118: PPUSH
42119: LD_VAR 0 2
42123: PPUSH
42124: LD_VAR 0 5
42128: PPUSH
42129: LD_VAR 0 6
42133: PPUSH
42134: CALL_OW 273
42138: PPUSH
42139: LD_VAR 0 3
42143: PPUSH
42144: CALL_OW 309
42148: IFFALSE 42162
// begin result := true ;
42150: LD_ADDR_VAR 0 4
42154: PUSH
42155: LD_INT 1
42157: ST_TO_ADDR
// exit ;
42158: POP
42159: POP
42160: GO 42166
// end ;
42162: GO 42096
42164: POP
42165: POP
// end ;
42166: LD_VAR 0 4
42170: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42171: LD_INT 0
42173: PPUSH
42174: PPUSH
42175: PPUSH
// if btype = b_depot then
42176: LD_VAR 0 2
42180: PUSH
42181: LD_INT 0
42183: EQUAL
42184: IFFALSE 42196
// begin result := true ;
42186: LD_ADDR_VAR 0 3
42190: PUSH
42191: LD_INT 1
42193: ST_TO_ADDR
// exit ;
42194: GO 42312
// end ; pom := GetBase ( depot ) ;
42196: LD_ADDR_VAR 0 4
42200: PUSH
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 274
42210: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42211: LD_ADDR_VAR 0 5
42215: PUSH
42216: LD_VAR 0 2
42220: PPUSH
42221: LD_VAR 0 1
42225: PPUSH
42226: CALL_OW 248
42230: PPUSH
42231: CALL_OW 450
42235: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42236: LD_ADDR_VAR 0 3
42240: PUSH
42241: LD_VAR 0 4
42245: PPUSH
42246: LD_INT 1
42248: PPUSH
42249: CALL_OW 275
42253: PUSH
42254: LD_VAR 0 5
42258: PUSH
42259: LD_INT 1
42261: ARRAY
42262: GREATEREQUAL
42263: PUSH
42264: LD_VAR 0 4
42268: PPUSH
42269: LD_INT 2
42271: PPUSH
42272: CALL_OW 275
42276: PUSH
42277: LD_VAR 0 5
42281: PUSH
42282: LD_INT 2
42284: ARRAY
42285: GREATEREQUAL
42286: AND
42287: PUSH
42288: LD_VAR 0 4
42292: PPUSH
42293: LD_INT 3
42295: PPUSH
42296: CALL_OW 275
42300: PUSH
42301: LD_VAR 0 5
42305: PUSH
42306: LD_INT 3
42308: ARRAY
42309: GREATEREQUAL
42310: AND
42311: ST_TO_ADDR
// end ;
42312: LD_VAR 0 3
42316: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42317: LD_INT 0
42319: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42320: LD_VAR 0 1
42324: PPUSH
42325: LD_VAR 0 2
42329: PPUSH
42330: LD_INT 0
42332: PPUSH
42333: LD_INT 0
42335: PPUSH
42336: LD_INT 1
42338: PPUSH
42339: LD_INT 0
42341: PPUSH
42342: CALL_OW 587
// end ;
42346: LD_VAR 0 3
42350: RET
// export function CenterOnNow ( unit ) ; begin
42351: LD_INT 0
42353: PPUSH
// result := IsInUnit ( unit ) ;
42354: LD_ADDR_VAR 0 2
42358: PUSH
42359: LD_VAR 0 1
42363: PPUSH
42364: CALL_OW 310
42368: ST_TO_ADDR
// if not result then
42369: LD_VAR 0 2
42373: NOT
42374: IFFALSE 42386
// result := unit ;
42376: LD_ADDR_VAR 0 2
42380: PUSH
42381: LD_VAR 0 1
42385: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42386: LD_VAR 0 1
42390: PPUSH
42391: CALL_OW 87
// end ;
42395: LD_VAR 0 2
42399: RET
// export function ComMoveHex ( unit , hex ) ; begin
42400: LD_INT 0
42402: PPUSH
// if not hex then
42403: LD_VAR 0 2
42407: NOT
42408: IFFALSE 42412
// exit ;
42410: GO 42465
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42412: LD_VAR 0 2
42416: PUSH
42417: LD_INT 1
42419: ARRAY
42420: PPUSH
42421: LD_VAR 0 2
42425: PUSH
42426: LD_INT 2
42428: ARRAY
42429: PPUSH
42430: CALL_OW 428
42434: IFFALSE 42438
// exit ;
42436: GO 42465
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_VAR 0 2
42447: PUSH
42448: LD_INT 1
42450: ARRAY
42451: PPUSH
42452: LD_VAR 0 2
42456: PUSH
42457: LD_INT 2
42459: ARRAY
42460: PPUSH
42461: CALL_OW 111
// end ;
42465: LD_VAR 0 3
42469: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42470: LD_INT 0
42472: PPUSH
42473: PPUSH
42474: PPUSH
// if not unit or not enemy then
42475: LD_VAR 0 1
42479: NOT
42480: PUSH
42481: LD_VAR 0 2
42485: NOT
42486: OR
42487: IFFALSE 42491
// exit ;
42489: GO 42615
// x := GetX ( enemy ) ;
42491: LD_ADDR_VAR 0 4
42495: PUSH
42496: LD_VAR 0 2
42500: PPUSH
42501: CALL_OW 250
42505: ST_TO_ADDR
// y := GetY ( enemy ) ;
42506: LD_ADDR_VAR 0 5
42510: PUSH
42511: LD_VAR 0 2
42515: PPUSH
42516: CALL_OW 251
42520: ST_TO_ADDR
// if ValidHex ( x , y ) then
42521: LD_VAR 0 4
42525: PPUSH
42526: LD_VAR 0 5
42530: PPUSH
42531: CALL_OW 488
42535: IFFALSE 42615
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42537: LD_VAR 0 2
42541: PPUSH
42542: CALL_OW 247
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: IN
42557: PUSH
42558: LD_VAR 0 1
42562: PPUSH
42563: CALL_OW 255
42567: PPUSH
42568: LD_VAR 0 2
42572: PPUSH
42573: CALL_OW 292
42577: OR
42578: IFFALSE 42596
// ComAttackUnit ( unit , enemy ) else
42580: LD_VAR 0 1
42584: PPUSH
42585: LD_VAR 0 2
42589: PPUSH
42590: CALL_OW 115
42594: GO 42615
// ComAgressiveMove ( unit , x , y ) ;
42596: LD_VAR 0 1
42600: PPUSH
42601: LD_VAR 0 4
42605: PPUSH
42606: LD_VAR 0 5
42610: PPUSH
42611: CALL_OW 114
// end ;
42615: LD_VAR 0 3
42619: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
42620: LD_INT 0
42622: PPUSH
42623: PPUSH
42624: PPUSH
// list := AreaToList ( area , 0 ) ;
42625: LD_ADDR_VAR 0 5
42629: PUSH
42630: LD_VAR 0 1
42634: PPUSH
42635: LD_INT 0
42637: PPUSH
42638: CALL_OW 517
42642: ST_TO_ADDR
// if not list then
42643: LD_VAR 0 5
42647: NOT
42648: IFFALSE 42652
// exit ;
42650: GO 42782
// if all then
42652: LD_VAR 0 2
42656: IFFALSE 42744
// begin for i := 1 to list [ 1 ] do
42658: LD_ADDR_VAR 0 4
42662: PUSH
42663: DOUBLE
42664: LD_INT 1
42666: DEC
42667: ST_TO_ADDR
42668: LD_VAR 0 5
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: PUSH
42677: FOR_TO
42678: IFFALSE 42740
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_VAR 0 3
42689: PPUSH
42690: LD_VAR 0 3
42694: PUSH
42695: LD_INT 1
42697: PLUS
42698: PPUSH
42699: LD_VAR 0 5
42703: PUSH
42704: LD_INT 1
42706: ARRAY
42707: PUSH
42708: LD_VAR 0 4
42712: ARRAY
42713: PUSH
42714: LD_VAR 0 5
42718: PUSH
42719: LD_INT 2
42721: ARRAY
42722: PUSH
42723: LD_VAR 0 4
42727: ARRAY
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PPUSH
42733: CALL_OW 1
42737: ST_TO_ADDR
42738: GO 42677
42740: POP
42741: POP
// exit ;
42742: GO 42782
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
42744: LD_ADDR_VAR 0 3
42748: PUSH
42749: LD_VAR 0 5
42753: PUSH
42754: LD_INT 1
42756: ARRAY
42757: PUSH
42758: LD_INT 1
42760: ARRAY
42761: PUSH
42762: LD_VAR 0 5
42766: PUSH
42767: LD_INT 2
42769: ARRAY
42770: PUSH
42771: LD_INT 1
42773: ARRAY
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: ST_TO_ADDR
// end ;
42782: LD_VAR 0 3
42786: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
42787: LD_INT 0
42789: PPUSH
42790: PPUSH
// list := AreaToList ( area , 0 ) ;
42791: LD_ADDR_VAR 0 4
42795: PUSH
42796: LD_VAR 0 1
42800: PPUSH
42801: LD_INT 0
42803: PPUSH
42804: CALL_OW 517
42808: ST_TO_ADDR
// if not list then
42809: LD_VAR 0 4
42813: NOT
42814: IFFALSE 42818
// exit ;
42816: GO 42859
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
42818: LD_ADDR_VAR 0 3
42822: PUSH
42823: LD_VAR 0 4
42827: PUSH
42828: LD_INT 1
42830: ARRAY
42831: PUSH
42832: LD_INT 1
42834: ARRAY
42835: PUSH
42836: LD_VAR 0 4
42840: PUSH
42841: LD_INT 2
42843: ARRAY
42844: PUSH
42845: LD_INT 1
42847: ARRAY
42848: PUSH
42849: LD_VAR 0 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: ST_TO_ADDR
// end ;
42859: LD_VAR 0 3
42863: RET
// export function First ( array ) ; begin
42864: LD_INT 0
42866: PPUSH
// if not array then
42867: LD_VAR 0 1
42871: NOT
42872: IFFALSE 42876
// exit ;
42874: GO 42890
// result := array [ 1 ] ;
42876: LD_ADDR_VAR 0 2
42880: PUSH
42881: LD_VAR 0 1
42885: PUSH
42886: LD_INT 1
42888: ARRAY
42889: ST_TO_ADDR
// end ;
42890: LD_VAR 0 2
42894: RET
// export function Last ( array ) ; begin
42895: LD_INT 0
42897: PPUSH
// if not array then
42898: LD_VAR 0 1
42902: NOT
42903: IFFALSE 42907
// exit ;
42905: GO 42923
// result := array [ array ] ;
42907: LD_ADDR_VAR 0 2
42911: PUSH
42912: LD_VAR 0 1
42916: PUSH
42917: LD_VAR 0 1
42921: ARRAY
42922: ST_TO_ADDR
// end ;
42923: LD_VAR 0 2
42927: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
42928: LD_INT 0
42930: PPUSH
42931: PPUSH
// result := [ ] ;
42932: LD_ADDR_VAR 0 5
42936: PUSH
42937: EMPTY
42938: ST_TO_ADDR
// if not array then
42939: LD_VAR 0 1
42943: NOT
42944: IFFALSE 42948
// exit ;
42946: GO 43060
// for i := 1 to array do
42948: LD_ADDR_VAR 0 6
42952: PUSH
42953: DOUBLE
42954: LD_INT 1
42956: DEC
42957: ST_TO_ADDR
42958: LD_VAR 0 1
42962: PUSH
42963: FOR_TO
42964: IFFALSE 43058
// if array [ i ] [ index ] = value then
42966: LD_VAR 0 1
42970: PUSH
42971: LD_VAR 0 6
42975: ARRAY
42976: PUSH
42977: LD_VAR 0 2
42981: ARRAY
42982: PUSH
42983: LD_VAR 0 3
42987: EQUAL
42988: IFFALSE 43056
// begin if indexColumn then
42990: LD_VAR 0 4
42994: IFFALSE 43030
// result := Join ( result , array [ i ] [ indexColumn ] ) else
42996: LD_ADDR_VAR 0 5
43000: PUSH
43001: LD_VAR 0 5
43005: PPUSH
43006: LD_VAR 0 1
43010: PUSH
43011: LD_VAR 0 6
43015: ARRAY
43016: PUSH
43017: LD_VAR 0 4
43021: ARRAY
43022: PPUSH
43023: CALL 38248 0 2
43027: ST_TO_ADDR
43028: GO 43056
// result := Join ( result , array [ i ] ) ;
43030: LD_ADDR_VAR 0 5
43034: PUSH
43035: LD_VAR 0 5
43039: PPUSH
43040: LD_VAR 0 1
43044: PUSH
43045: LD_VAR 0 6
43049: ARRAY
43050: PPUSH
43051: CALL 38248 0 2
43055: ST_TO_ADDR
// end ;
43056: GO 42963
43058: POP
43059: POP
// end ;
43060: LD_VAR 0 5
43064: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43065: LD_INT 0
43067: PPUSH
// if not vehicles or not parkingPoint then
43068: LD_VAR 0 1
43072: NOT
43073: PUSH
43074: LD_VAR 0 2
43078: NOT
43079: OR
43080: IFFALSE 43084
// exit ;
43082: GO 43182
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43084: LD_ADDR_VAR 0 1
43088: PUSH
43089: LD_VAR 0 1
43093: PPUSH
43094: LD_INT 50
43096: PUSH
43097: EMPTY
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: LD_INT 92
43105: PUSH
43106: LD_VAR 0 2
43110: PUSH
43111: LD_INT 1
43113: ARRAY
43114: PUSH
43115: LD_VAR 0 2
43119: PUSH
43120: LD_INT 2
43122: ARRAY
43123: PUSH
43124: LD_INT 8
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PPUSH
43141: CALL_OW 72
43145: ST_TO_ADDR
// if not vehicles then
43146: LD_VAR 0 1
43150: NOT
43151: IFFALSE 43155
// exit ;
43153: GO 43182
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43155: LD_VAR 0 1
43159: PPUSH
43160: LD_VAR 0 2
43164: PUSH
43165: LD_INT 1
43167: ARRAY
43168: PPUSH
43169: LD_VAR 0 2
43173: PUSH
43174: LD_INT 2
43176: ARRAY
43177: PPUSH
43178: CALL_OW 111
// end ;
43182: LD_VAR 0 3
43186: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43187: LD_INT 0
43189: PPUSH
43190: PPUSH
43191: PPUSH
// if not side or not area then
43192: LD_VAR 0 1
43196: NOT
43197: PUSH
43198: LD_VAR 0 2
43202: NOT
43203: OR
43204: IFFALSE 43208
// exit ;
43206: GO 43327
// tmp := AreaToList ( area , 0 ) ;
43208: LD_ADDR_VAR 0 5
43212: PUSH
43213: LD_VAR 0 2
43217: PPUSH
43218: LD_INT 0
43220: PPUSH
43221: CALL_OW 517
43225: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43226: LD_ADDR_VAR 0 4
43230: PUSH
43231: DOUBLE
43232: LD_INT 1
43234: DEC
43235: ST_TO_ADDR
43236: LD_VAR 0 5
43240: PUSH
43241: LD_INT 1
43243: ARRAY
43244: PUSH
43245: FOR_TO
43246: IFFALSE 43325
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43248: LD_VAR 0 5
43252: PUSH
43253: LD_INT 1
43255: ARRAY
43256: PUSH
43257: LD_VAR 0 4
43261: ARRAY
43262: PPUSH
43263: LD_VAR 0 5
43267: PUSH
43268: LD_INT 2
43270: ARRAY
43271: PUSH
43272: LD_VAR 0 4
43276: ARRAY
43277: PPUSH
43278: CALL_OW 351
43282: IFFALSE 43323
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43284: LD_VAR 0 5
43288: PUSH
43289: LD_INT 1
43291: ARRAY
43292: PUSH
43293: LD_VAR 0 4
43297: ARRAY
43298: PPUSH
43299: LD_VAR 0 5
43303: PUSH
43304: LD_INT 2
43306: ARRAY
43307: PUSH
43308: LD_VAR 0 4
43312: ARRAY
43313: PPUSH
43314: LD_VAR 0 1
43318: PPUSH
43319: CALL_OW 244
// end ;
43323: GO 43245
43325: POP
43326: POP
// end ; end_of_file
43327: LD_VAR 0 3
43331: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
43332: LD_VAR 0 1
43336: PPUSH
43337: LD_VAR 0 2
43341: PPUSH
43342: LD_VAR 0 3
43346: PPUSH
43347: LD_VAR 0 4
43351: PPUSH
43352: LD_VAR 0 5
43356: PPUSH
43357: LD_VAR 0 6
43361: PPUSH
43362: CALL 49010 0 6
// end ;
43366: PPOPN 6
43368: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
43369: LD_INT 0
43371: PPUSH
// begin if not units then
43372: LD_VAR 0 1
43376: NOT
43377: IFFALSE 43381
// exit ;
43379: GO 43381
// end ;
43381: PPOPN 7
43383: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
43384: CALL 48897 0 0
// end ; end_of_file
43388: PPOPN 1
43390: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
43391: LD_VAR 0 1
43395: PUSH
43396: LD_INT 200
43398: DOUBLE
43399: GREATEREQUAL
43400: IFFALSE 43408
43402: LD_INT 299
43404: DOUBLE
43405: LESSEQUAL
43406: IFTRUE 43410
43408: GO 43442
43410: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
43411: LD_VAR 0 1
43415: PPUSH
43416: LD_VAR 0 2
43420: PPUSH
43421: LD_VAR 0 3
43425: PPUSH
43426: LD_VAR 0 4
43430: PPUSH
43431: LD_VAR 0 5
43435: PPUSH
43436: CALL 44139 0 5
43440: GO 43519
43442: LD_INT 300
43444: DOUBLE
43445: GREATEREQUAL
43446: IFFALSE 43454
43448: LD_INT 399
43450: DOUBLE
43451: LESSEQUAL
43452: IFTRUE 43456
43454: GO 43518
43456: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
43457: LD_VAR 0 1
43461: PPUSH
43462: LD_VAR 0 2
43466: PPUSH
43467: LD_VAR 0 3
43471: PPUSH
43472: LD_VAR 0 4
43476: PPUSH
43477: LD_VAR 0 5
43481: PPUSH
43482: LD_VAR 0 6
43486: PPUSH
43487: LD_VAR 0 7
43491: PPUSH
43492: LD_VAR 0 8
43496: PPUSH
43497: LD_VAR 0 9
43501: PPUSH
43502: LD_VAR 0 10
43506: PPUSH
43507: LD_VAR 0 11
43511: PPUSH
43512: CALL 61358 0 11
43516: GO 43519
43518: POP
// end ;
43519: PPOPN 11
43521: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
43522: LD_VAR 0 1
43526: PPUSH
43527: LD_VAR 0 2
43531: PPUSH
43532: LD_VAR 0 3
43536: PPUSH
43537: LD_VAR 0 4
43541: PPUSH
43542: LD_VAR 0 5
43546: PPUSH
43547: CALL 43604 0 5
// end ; end_of_file
43551: PPOPN 5
43553: END
// export function SOS_UnitDestroyed ( un ) ; begin
43554: LD_INT 0
43556: PPUSH
// ComRadiation ( un ) ;
43557: LD_VAR 0 1
43561: PPUSH
43562: CALL 44543 0 1
// end ;
43566: LD_VAR 0 2
43570: RET
// export function SOS_UnitKamikazed ( un ) ; begin
43571: LD_INT 0
43573: PPUSH
// ComRadiation ( un ) ;
43574: LD_VAR 0 1
43578: PPUSH
43579: CALL 44543 0 1
// end ;
43583: LD_VAR 0 2
43587: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43588: LD_INT 0
43590: PPUSH
// end ;
43591: LD_VAR 0 4
43595: RET
// export function SOS_Command ( cmd ) ; begin
43596: LD_INT 0
43598: PPUSH
// end ;
43599: LD_VAR 0 2
43603: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43604: LD_INT 0
43606: PPUSH
// end ;
43607: LD_VAR 0 6
43611: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
43612: LD_INT 0
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
// if not vehicle or not factory then
43619: LD_VAR 0 1
43623: NOT
43624: PUSH
43625: LD_VAR 0 2
43629: NOT
43630: OR
43631: IFFALSE 43635
// exit ;
43633: GO 44134
// if not factoryWaypoints then
43635: LD_EXP 71
43639: NOT
43640: IFFALSE 43644
// exit ;
43642: GO 44134
// for i := 1 to Count ( factoryWaypoints ) do
43644: LD_ADDR_VAR 0 4
43648: PUSH
43649: DOUBLE
43650: LD_INT 1
43652: DEC
43653: ST_TO_ADDR
43654: LD_EXP 71
43658: PPUSH
43659: CALL 2639 0 1
43663: PUSH
43664: FOR_TO
43665: IFFALSE 44132
// if factoryWaypoints [ i ] [ 2 ] = factory then
43667: LD_EXP 71
43671: PUSH
43672: LD_VAR 0 4
43676: ARRAY
43677: PUSH
43678: LD_INT 2
43680: ARRAY
43681: PUSH
43682: LD_VAR 0 2
43686: EQUAL
43687: IFFALSE 44130
// begin if GetControl ( vehicle ) = control_manual then
43689: LD_VAR 0 1
43693: PPUSH
43694: CALL_OW 263
43698: PUSH
43699: LD_INT 1
43701: EQUAL
43702: IFFALSE 44013
// begin driver := IsDrivenBy ( vehicle ) ;
43704: LD_ADDR_VAR 0 6
43708: PUSH
43709: LD_VAR 0 1
43713: PPUSH
43714: CALL_OW 311
43718: ST_TO_ADDR
// tag := GetTag ( driver ) ;
43719: LD_ADDR_VAR 0 5
43723: PUSH
43724: LD_VAR 0 6
43728: PPUSH
43729: CALL_OW 110
43733: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
43734: LD_VAR 0 5
43738: PUSH
43739: LD_INT 501
43741: EQUAL
43742: PUSH
43743: LD_VAR 0 1
43747: PPUSH
43748: CALL_OW 110
43752: PUSH
43753: LD_INT 501
43755: EQUAL
43756: OR
43757: IFFALSE 43763
// exit ;
43759: POP
43760: POP
43761: GO 44134
// if not HasTask ( driver ) then
43763: LD_VAR 0 6
43767: PPUSH
43768: CALL_OW 314
43772: NOT
43773: IFFALSE 44011
// begin SetTag ( driver , tDriver ) ;
43775: LD_VAR 0 6
43779: PPUSH
43780: LD_INT 501
43782: PPUSH
43783: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
43787: LD_VAR 0 1
43791: PPUSH
43792: LD_INT 501
43794: PPUSH
43795: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
43799: LD_ADDR_VAR 0 7
43803: PUSH
43804: LD_EXP 71
43808: PUSH
43809: LD_VAR 0 4
43813: ARRAY
43814: PUSH
43815: LD_INT 3
43817: ARRAY
43818: PPUSH
43819: LD_EXP 71
43823: PUSH
43824: LD_VAR 0 4
43828: ARRAY
43829: PUSH
43830: LD_INT 4
43832: ARRAY
43833: PPUSH
43834: CALL_OW 428
43838: ST_TO_ADDR
// if hex then
43839: LD_VAR 0 7
43843: IFFALSE 43861
// ComMoveUnit ( driver , hex ) else
43845: LD_VAR 0 6
43849: PPUSH
43850: LD_VAR 0 7
43854: PPUSH
43855: CALL_OW 112
43859: GO 43900
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
43861: LD_VAR 0 6
43865: PPUSH
43866: LD_EXP 71
43870: PUSH
43871: LD_VAR 0 4
43875: ARRAY
43876: PUSH
43877: LD_INT 3
43879: ARRAY
43880: PPUSH
43881: LD_EXP 71
43885: PUSH
43886: LD_VAR 0 4
43890: ARRAY
43891: PUSH
43892: LD_INT 4
43894: ARRAY
43895: PPUSH
43896: CALL_OW 111
// AddComExitVehicle ( driver ) ;
43900: LD_VAR 0 6
43904: PPUSH
43905: CALL_OW 181
// if Multiplayer then
43909: LD_OWVAR 4
43913: IFFALSE 43962
// begin repeat wait ( 10 ) ;
43915: LD_INT 10
43917: PPUSH
43918: CALL_OW 67
// until not IsInUnit ( driver ) ;
43922: LD_VAR 0 6
43926: PPUSH
43927: CALL_OW 310
43931: NOT
43932: IFFALSE 43915
// if not HasTask ( driver ) then
43934: LD_VAR 0 6
43938: PPUSH
43939: CALL_OW 314
43943: NOT
43944: IFFALSE 43960
// ComEnterUnit ( driver , factory ) ;
43946: LD_VAR 0 6
43950: PPUSH
43951: LD_VAR 0 2
43955: PPUSH
43956: CALL_OW 120
// end else
43960: GO 43976
// AddComEnterUnit ( driver , factory ) ;
43962: LD_VAR 0 6
43966: PPUSH
43967: LD_VAR 0 2
43971: PPUSH
43972: CALL_OW 180
// wait ( 0 0$1 ) ;
43976: LD_INT 35
43978: PPUSH
43979: CALL_OW 67
// SetTag ( driver , tag ) ;
43983: LD_VAR 0 6
43987: PPUSH
43988: LD_VAR 0 5
43992: PPUSH
43993: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
43997: LD_VAR 0 1
44001: PPUSH
44002: LD_INT 0
44004: PPUSH
44005: CALL_OW 109
// break ;
44009: GO 44132
// end ; end else
44011: GO 44130
// if GetControl ( vehicle ) = control_remote then
44013: LD_VAR 0 1
44017: PPUSH
44018: CALL_OW 263
44022: PUSH
44023: LD_INT 2
44025: EQUAL
44026: IFFALSE 44089
// begin wait ( 0 0$2 ) ;
44028: LD_INT 70
44030: PPUSH
44031: CALL_OW 67
// if Connect ( vehicle ) then
44035: LD_VAR 0 1
44039: PPUSH
44040: CALL 8845 0 1
44044: IFFALSE 44085
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44046: LD_VAR 0 1
44050: PPUSH
44051: LD_EXP 71
44055: PUSH
44056: LD_VAR 0 4
44060: ARRAY
44061: PUSH
44062: LD_INT 3
44064: ARRAY
44065: PPUSH
44066: LD_EXP 71
44070: PUSH
44071: LD_VAR 0 4
44075: ARRAY
44076: PUSH
44077: LD_INT 4
44079: ARRAY
44080: PPUSH
44081: CALL_OW 171
// break ;
44085: GO 44132
// end else
44087: GO 44130
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44089: LD_VAR 0 1
44093: PPUSH
44094: LD_EXP 71
44098: PUSH
44099: LD_VAR 0 4
44103: ARRAY
44104: PUSH
44105: LD_INT 3
44107: ARRAY
44108: PPUSH
44109: LD_EXP 71
44113: PUSH
44114: LD_VAR 0 4
44118: ARRAY
44119: PUSH
44120: LD_INT 4
44122: ARRAY
44123: PPUSH
44124: CALL_OW 171
// break ;
44128: GO 44132
// end ; end ;
44130: GO 43664
44132: POP
44133: POP
// end ;
44134: LD_VAR 0 3
44138: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44139: LD_INT 0
44141: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44142: LD_VAR 0 1
44146: PUSH
44147: LD_INT 250
44149: EQUAL
44150: PUSH
44151: LD_VAR 0 2
44155: PPUSH
44156: CALL_OW 264
44160: PUSH
44161: LD_INT 81
44163: EQUAL
44164: AND
44165: IFFALSE 44186
// MinerPlaceMine ( unit , x , y ) ;
44167: LD_VAR 0 2
44171: PPUSH
44172: LD_VAR 0 4
44176: PPUSH
44177: LD_VAR 0 5
44181: PPUSH
44182: CALL 47278 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44186: LD_VAR 0 1
44190: PUSH
44191: LD_INT 251
44193: EQUAL
44194: PUSH
44195: LD_VAR 0 2
44199: PPUSH
44200: CALL_OW 264
44204: PUSH
44205: LD_INT 81
44207: EQUAL
44208: AND
44209: IFFALSE 44230
// MinerDetonateMine ( unit , x , y ) ;
44211: LD_VAR 0 2
44215: PPUSH
44216: LD_VAR 0 4
44220: PPUSH
44221: LD_VAR 0 5
44225: PPUSH
44226: CALL 47553 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44230: LD_VAR 0 1
44234: PUSH
44235: LD_INT 252
44237: EQUAL
44238: PUSH
44239: LD_VAR 0 2
44243: PPUSH
44244: CALL_OW 264
44248: PUSH
44249: LD_INT 81
44251: EQUAL
44252: AND
44253: IFFALSE 44274
// MinerCreateMinefield ( unit , x , y ) ;
44255: LD_VAR 0 2
44259: PPUSH
44260: LD_VAR 0 4
44264: PPUSH
44265: LD_VAR 0 5
44269: PPUSH
44270: CALL 47970 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44274: LD_VAR 0 1
44278: PUSH
44279: LD_INT 253
44281: EQUAL
44282: PUSH
44283: LD_VAR 0 2
44287: PPUSH
44288: CALL_OW 257
44292: PUSH
44293: LD_INT 5
44295: EQUAL
44296: AND
44297: IFFALSE 44318
// ComBinocular ( unit , x , y ) ;
44299: LD_VAR 0 2
44303: PPUSH
44304: LD_VAR 0 4
44308: PPUSH
44309: LD_VAR 0 5
44313: PPUSH
44314: CALL 48339 0 3
// if selectedUnit then
44318: LD_VAR 0 3
44322: IFFALSE 44378
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44324: LD_VAR 0 1
44328: PUSH
44329: LD_INT 254
44331: EQUAL
44332: PUSH
44333: LD_VAR 0 2
44337: PPUSH
44338: CALL_OW 264
44342: PUSH
44343: LD_INT 99
44345: EQUAL
44346: AND
44347: PUSH
44348: LD_VAR 0 3
44352: PPUSH
44353: CALL_OW 263
44357: PUSH
44358: LD_INT 3
44360: EQUAL
44361: AND
44362: IFFALSE 44378
// HackDestroyVehicle ( unit , selectedUnit ) ;
44364: LD_VAR 0 2
44368: PPUSH
44369: LD_VAR 0 3
44373: PPUSH
44374: CALL 46642 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44378: LD_VAR 0 1
44382: PUSH
44383: LD_INT 255
44385: EQUAL
44386: PUSH
44387: LD_VAR 0 2
44391: PPUSH
44392: CALL_OW 264
44396: PUSH
44397: LD_INT 14
44399: PUSH
44400: LD_INT 53
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: IN
44407: AND
44408: PUSH
44409: LD_VAR 0 4
44413: PPUSH
44414: LD_VAR 0 5
44418: PPUSH
44419: CALL_OW 488
44423: AND
44424: IFFALSE 44448
// CutTreeXYR ( unit , x , y , 12 ) ;
44426: LD_VAR 0 2
44430: PPUSH
44431: LD_VAR 0 4
44435: PPUSH
44436: LD_VAR 0 5
44440: PPUSH
44441: LD_INT 12
44443: PPUSH
44444: CALL 44639 0 4
// if cmd = 256 then
44448: LD_VAR 0 1
44452: PUSH
44453: LD_INT 256
44455: EQUAL
44456: IFFALSE 44477
// SetFactoryWaypoint ( unit , x , y ) ;
44458: LD_VAR 0 2
44462: PPUSH
44463: LD_VAR 0 4
44467: PPUSH
44468: LD_VAR 0 5
44472: PPUSH
44473: CALL 63346 0 3
// if cmd = 257 then
44477: LD_VAR 0 1
44481: PUSH
44482: LD_INT 257
44484: EQUAL
44485: IFFALSE 44506
// SetWarehouseGatheringPoint ( unit , x , y ) ;
44487: LD_VAR 0 2
44491: PPUSH
44492: LD_VAR 0 4
44496: PPUSH
44497: LD_VAR 0 5
44501: PPUSH
44502: CALL 63836 0 3
// if cmd = 258 then
44506: LD_VAR 0 1
44510: PUSH
44511: LD_INT 258
44513: EQUAL
44514: IFFALSE 44538
// BurnTreeXYR ( unit , x , y , 8 ) ;
44516: LD_VAR 0 2
44520: PPUSH
44521: LD_VAR 0 4
44525: PPUSH
44526: LD_VAR 0 5
44530: PPUSH
44531: LD_INT 8
44533: PPUSH
44534: CALL 45033 0 4
// end ;
44538: LD_VAR 0 6
44542: RET
// export function ComRadiation ( un ) ; var eff ; begin
44543: LD_INT 0
44545: PPUSH
44546: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
44547: LD_VAR 0 1
44551: PPUSH
44552: CALL_OW 264
44556: PUSH
44557: LD_INT 91
44559: NONEQUAL
44560: IFFALSE 44564
// exit ;
44562: GO 44634
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44564: LD_INT 68
44566: PPUSH
44567: LD_VAR 0 1
44571: PPUSH
44572: CALL_OW 255
44576: PPUSH
44577: CALL_OW 321
44581: PUSH
44582: LD_INT 2
44584: EQUAL
44585: IFFALSE 44597
// eff := 70 else
44587: LD_ADDR_VAR 0 3
44591: PUSH
44592: LD_INT 70
44594: ST_TO_ADDR
44595: GO 44605
// eff := 30 ;
44597: LD_ADDR_VAR 0 3
44601: PUSH
44602: LD_INT 30
44604: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44605: LD_VAR 0 1
44609: PPUSH
44610: CALL_OW 250
44614: PPUSH
44615: LD_VAR 0 1
44619: PPUSH
44620: CALL_OW 251
44624: PPUSH
44625: LD_VAR 0 3
44629: PPUSH
44630: CALL_OW 495
// end ;
44634: LD_VAR 0 2
44638: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44639: LD_INT 0
44641: PPUSH
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
44650: LD_VAR 0 1
44654: PPUSH
44655: CALL_OW 302
44659: NOT
44660: PUSH
44661: LD_VAR 0 2
44665: PPUSH
44666: LD_VAR 0 3
44670: PPUSH
44671: CALL_OW 488
44675: NOT
44676: OR
44677: PUSH
44678: LD_VAR 0 4
44682: NOT
44683: OR
44684: IFFALSE 44688
// exit ;
44686: GO 45028
// list := [ ] ;
44688: LD_ADDR_VAR 0 13
44692: PUSH
44693: EMPTY
44694: ST_TO_ADDR
// if x - r < 0 then
44695: LD_VAR 0 2
44699: PUSH
44700: LD_VAR 0 4
44704: MINUS
44705: PUSH
44706: LD_INT 0
44708: LESS
44709: IFFALSE 44721
// min_x := 0 else
44711: LD_ADDR_VAR 0 7
44715: PUSH
44716: LD_INT 0
44718: ST_TO_ADDR
44719: GO 44737
// min_x := x - r ;
44721: LD_ADDR_VAR 0 7
44725: PUSH
44726: LD_VAR 0 2
44730: PUSH
44731: LD_VAR 0 4
44735: MINUS
44736: ST_TO_ADDR
// if y - r < 0 then
44737: LD_VAR 0 3
44741: PUSH
44742: LD_VAR 0 4
44746: MINUS
44747: PUSH
44748: LD_INT 0
44750: LESS
44751: IFFALSE 44763
// min_y := 0 else
44753: LD_ADDR_VAR 0 8
44757: PUSH
44758: LD_INT 0
44760: ST_TO_ADDR
44761: GO 44779
// min_y := y - r ;
44763: LD_ADDR_VAR 0 8
44767: PUSH
44768: LD_VAR 0 3
44772: PUSH
44773: LD_VAR 0 4
44777: MINUS
44778: ST_TO_ADDR
// max_x := x + r ;
44779: LD_ADDR_VAR 0 9
44783: PUSH
44784: LD_VAR 0 2
44788: PUSH
44789: LD_VAR 0 4
44793: PLUS
44794: ST_TO_ADDR
// max_y := y + r ;
44795: LD_ADDR_VAR 0 10
44799: PUSH
44800: LD_VAR 0 3
44804: PUSH
44805: LD_VAR 0 4
44809: PLUS
44810: ST_TO_ADDR
// for _x = min_x to max_x do
44811: LD_ADDR_VAR 0 11
44815: PUSH
44816: DOUBLE
44817: LD_VAR 0 7
44821: DEC
44822: ST_TO_ADDR
44823: LD_VAR 0 9
44827: PUSH
44828: FOR_TO
44829: IFFALSE 44946
// for _y = min_y to max_y do
44831: LD_ADDR_VAR 0 12
44835: PUSH
44836: DOUBLE
44837: LD_VAR 0 8
44841: DEC
44842: ST_TO_ADDR
44843: LD_VAR 0 10
44847: PUSH
44848: FOR_TO
44849: IFFALSE 44942
// begin if not ValidHex ( _x , _y ) then
44851: LD_VAR 0 11
44855: PPUSH
44856: LD_VAR 0 12
44860: PPUSH
44861: CALL_OW 488
44865: NOT
44866: IFFALSE 44870
// continue ;
44868: GO 44848
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44870: LD_VAR 0 11
44874: PPUSH
44875: LD_VAR 0 12
44879: PPUSH
44880: CALL_OW 351
44884: PUSH
44885: LD_VAR 0 11
44889: PPUSH
44890: LD_VAR 0 12
44894: PPUSH
44895: CALL_OW 554
44899: AND
44900: IFFALSE 44940
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44902: LD_ADDR_VAR 0 13
44906: PUSH
44907: LD_VAR 0 13
44911: PPUSH
44912: LD_VAR 0 13
44916: PUSH
44917: LD_INT 1
44919: PLUS
44920: PPUSH
44921: LD_VAR 0 11
44925: PUSH
44926: LD_VAR 0 12
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PPUSH
44935: CALL_OW 2
44939: ST_TO_ADDR
// end ;
44940: GO 44848
44942: POP
44943: POP
44944: GO 44828
44946: POP
44947: POP
// if not list then
44948: LD_VAR 0 13
44952: NOT
44953: IFFALSE 44957
// exit ;
44955: GO 45028
// for i in list do
44957: LD_ADDR_VAR 0 6
44961: PUSH
44962: LD_VAR 0 13
44966: PUSH
44967: FOR_IN
44968: IFFALSE 45026
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
44970: LD_VAR 0 1
44974: PPUSH
44975: LD_STRING M
44977: PUSH
44978: LD_VAR 0 6
44982: PUSH
44983: LD_INT 1
44985: ARRAY
44986: PUSH
44987: LD_VAR 0 6
44991: PUSH
44992: LD_INT 2
44994: ARRAY
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: PPUSH
45020: CALL_OW 447
45024: GO 44967
45026: POP
45027: POP
// end ;
45028: LD_VAR 0 5
45032: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
45033: LD_INT 0
45035: PPUSH
45036: PPUSH
45037: PPUSH
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
45044: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 302
45054: NOT
45055: PUSH
45056: LD_VAR 0 2
45060: PPUSH
45061: LD_VAR 0 3
45065: PPUSH
45066: CALL_OW 488
45070: NOT
45071: OR
45072: PUSH
45073: LD_VAR 0 4
45077: NOT
45078: OR
45079: IFFALSE 45083
// exit ;
45081: GO 45596
// list := [ ] ;
45083: LD_ADDR_VAR 0 13
45087: PUSH
45088: EMPTY
45089: ST_TO_ADDR
// if x - r < 0 then
45090: LD_VAR 0 2
45094: PUSH
45095: LD_VAR 0 4
45099: MINUS
45100: PUSH
45101: LD_INT 0
45103: LESS
45104: IFFALSE 45116
// min_x := 0 else
45106: LD_ADDR_VAR 0 7
45110: PUSH
45111: LD_INT 0
45113: ST_TO_ADDR
45114: GO 45132
// min_x := x - r ;
45116: LD_ADDR_VAR 0 7
45120: PUSH
45121: LD_VAR 0 2
45125: PUSH
45126: LD_VAR 0 4
45130: MINUS
45131: ST_TO_ADDR
// if y - r < 0 then
45132: LD_VAR 0 3
45136: PUSH
45137: LD_VAR 0 4
45141: MINUS
45142: PUSH
45143: LD_INT 0
45145: LESS
45146: IFFALSE 45158
// min_y := 0 else
45148: LD_ADDR_VAR 0 8
45152: PUSH
45153: LD_INT 0
45155: ST_TO_ADDR
45156: GO 45174
// min_y := y - r ;
45158: LD_ADDR_VAR 0 8
45162: PUSH
45163: LD_VAR 0 3
45167: PUSH
45168: LD_VAR 0 4
45172: MINUS
45173: ST_TO_ADDR
// max_x := x + r ;
45174: LD_ADDR_VAR 0 9
45178: PUSH
45179: LD_VAR 0 2
45183: PUSH
45184: LD_VAR 0 4
45188: PLUS
45189: ST_TO_ADDR
// max_y := y + r ;
45190: LD_ADDR_VAR 0 10
45194: PUSH
45195: LD_VAR 0 3
45199: PUSH
45200: LD_VAR 0 4
45204: PLUS
45205: ST_TO_ADDR
// for _x = min_x to max_x do
45206: LD_ADDR_VAR 0 11
45210: PUSH
45211: DOUBLE
45212: LD_VAR 0 7
45216: DEC
45217: ST_TO_ADDR
45218: LD_VAR 0 9
45222: PUSH
45223: FOR_TO
45224: IFFALSE 45341
// for _y = min_y to max_y do
45226: LD_ADDR_VAR 0 12
45230: PUSH
45231: DOUBLE
45232: LD_VAR 0 8
45236: DEC
45237: ST_TO_ADDR
45238: LD_VAR 0 10
45242: PUSH
45243: FOR_TO
45244: IFFALSE 45337
// begin if not ValidHex ( _x , _y ) then
45246: LD_VAR 0 11
45250: PPUSH
45251: LD_VAR 0 12
45255: PPUSH
45256: CALL_OW 488
45260: NOT
45261: IFFALSE 45265
// continue ;
45263: GO 45243
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45265: LD_VAR 0 11
45269: PPUSH
45270: LD_VAR 0 12
45274: PPUSH
45275: CALL_OW 351
45279: PUSH
45280: LD_VAR 0 11
45284: PPUSH
45285: LD_VAR 0 12
45289: PPUSH
45290: CALL_OW 554
45294: AND
45295: IFFALSE 45335
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45297: LD_ADDR_VAR 0 13
45301: PUSH
45302: LD_VAR 0 13
45306: PPUSH
45307: LD_VAR 0 13
45311: PUSH
45312: LD_INT 1
45314: PLUS
45315: PPUSH
45316: LD_VAR 0 11
45320: PUSH
45321: LD_VAR 0 12
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PPUSH
45330: CALL_OW 2
45334: ST_TO_ADDR
// end ;
45335: GO 45243
45337: POP
45338: POP
45339: GO 45223
45341: POP
45342: POP
// if not list then
45343: LD_VAR 0 13
45347: NOT
45348: IFFALSE 45352
// exit ;
45350: GO 45596
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
45352: LD_ADDR_VAR 0 13
45356: PUSH
45357: LD_VAR 0 1
45361: PPUSH
45362: LD_VAR 0 13
45366: PPUSH
45367: LD_INT 1
45369: PPUSH
45370: LD_INT 1
45372: PPUSH
45373: CALL 5987 0 4
45377: ST_TO_ADDR
// ComStop ( flame ) ;
45378: LD_VAR 0 1
45382: PPUSH
45383: CALL_OW 141
// for i in list do
45387: LD_ADDR_VAR 0 6
45391: PUSH
45392: LD_VAR 0 13
45396: PUSH
45397: FOR_IN
45398: IFFALSE 45429
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
45400: LD_VAR 0 1
45404: PPUSH
45405: LD_VAR 0 6
45409: PUSH
45410: LD_INT 1
45412: ARRAY
45413: PPUSH
45414: LD_VAR 0 6
45418: PUSH
45419: LD_INT 2
45421: ARRAY
45422: PPUSH
45423: CALL_OW 176
45427: GO 45397
45429: POP
45430: POP
// repeat wait ( 0 0$1 ) ;
45431: LD_INT 35
45433: PPUSH
45434: CALL_OW 67
// task := GetTaskList ( flame ) ;
45438: LD_ADDR_VAR 0 14
45442: PUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 437
45452: ST_TO_ADDR
// if not task then
45453: LD_VAR 0 14
45457: NOT
45458: IFFALSE 45462
// exit ;
45460: GO 45596
// if task [ 1 ] [ 1 ] <> | then
45462: LD_VAR 0 14
45466: PUSH
45467: LD_INT 1
45469: ARRAY
45470: PUSH
45471: LD_INT 1
45473: ARRAY
45474: PUSH
45475: LD_STRING |
45477: NONEQUAL
45478: IFFALSE 45482
// exit ;
45480: GO 45596
// _x := task [ 1 ] [ 2 ] ;
45482: LD_ADDR_VAR 0 11
45486: PUSH
45487: LD_VAR 0 14
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: PUSH
45496: LD_INT 2
45498: ARRAY
45499: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
45500: LD_ADDR_VAR 0 12
45504: PUSH
45505: LD_VAR 0 14
45509: PUSH
45510: LD_INT 1
45512: ARRAY
45513: PUSH
45514: LD_INT 3
45516: ARRAY
45517: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
45518: LD_VAR 0 11
45522: PPUSH
45523: LD_VAR 0 12
45527: PPUSH
45528: CALL_OW 351
45532: NOT
45533: PUSH
45534: LD_VAR 0 11
45538: PPUSH
45539: LD_VAR 0 12
45543: PPUSH
45544: CALL_OW 554
45548: NOT
45549: OR
45550: IFFALSE 45584
// begin task := Delete ( task , 1 ) ;
45552: LD_ADDR_VAR 0 14
45556: PUSH
45557: LD_VAR 0 14
45561: PPUSH
45562: LD_INT 1
45564: PPUSH
45565: CALL_OW 3
45569: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
45570: LD_VAR 0 1
45574: PPUSH
45575: LD_VAR 0 14
45579: PPUSH
45580: CALL_OW 446
// end ; until not HasTask ( flame ) ;
45584: LD_VAR 0 1
45588: PPUSH
45589: CALL_OW 314
45593: NOT
45594: IFFALSE 45431
// end ;
45596: LD_VAR 0 5
45600: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45601: LD_EXP 2
45605: NOT
45606: IFFALSE 45656
45608: GO 45610
45610: DISABLE
// begin initHack := true ;
45611: LD_ADDR_EXP 2
45615: PUSH
45616: LD_INT 1
45618: ST_TO_ADDR
// hackTanks := [ ] ;
45619: LD_ADDR_EXP 3
45623: PUSH
45624: EMPTY
45625: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45626: LD_ADDR_EXP 4
45630: PUSH
45631: EMPTY
45632: ST_TO_ADDR
// hackLimit := 3 ;
45633: LD_ADDR_EXP 5
45637: PUSH
45638: LD_INT 3
45640: ST_TO_ADDR
// hackDist := 12 ;
45641: LD_ADDR_EXP 6
45645: PUSH
45646: LD_INT 12
45648: ST_TO_ADDR
// hackCounter := [ ] ;
45649: LD_ADDR_EXP 7
45653: PUSH
45654: EMPTY
45655: ST_TO_ADDR
// end ;
45656: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45657: LD_EXP 2
45661: PUSH
45662: LD_INT 34
45664: PUSH
45665: LD_INT 99
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PPUSH
45672: CALL_OW 69
45676: AND
45677: IFFALSE 45930
45679: GO 45681
45681: DISABLE
45682: LD_INT 0
45684: PPUSH
45685: PPUSH
// begin enable ;
45686: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45687: LD_ADDR_VAR 0 1
45691: PUSH
45692: LD_INT 34
45694: PUSH
45695: LD_INT 99
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PPUSH
45702: CALL_OW 69
45706: PUSH
45707: FOR_IN
45708: IFFALSE 45928
// begin if not i in hackTanks then
45710: LD_VAR 0 1
45714: PUSH
45715: LD_EXP 3
45719: IN
45720: NOT
45721: IFFALSE 45804
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45723: LD_ADDR_EXP 3
45727: PUSH
45728: LD_EXP 3
45732: PPUSH
45733: LD_EXP 3
45737: PUSH
45738: LD_INT 1
45740: PLUS
45741: PPUSH
45742: LD_VAR 0 1
45746: PPUSH
45747: CALL_OW 1
45751: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45752: LD_ADDR_EXP 4
45756: PUSH
45757: LD_EXP 4
45761: PPUSH
45762: LD_EXP 4
45766: PUSH
45767: LD_INT 1
45769: PLUS
45770: PPUSH
45771: EMPTY
45772: PPUSH
45773: CALL_OW 1
45777: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45778: LD_ADDR_EXP 7
45782: PUSH
45783: LD_EXP 7
45787: PPUSH
45788: LD_EXP 7
45792: PUSH
45793: LD_INT 1
45795: PLUS
45796: PPUSH
45797: EMPTY
45798: PPUSH
45799: CALL_OW 1
45803: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45804: LD_VAR 0 1
45808: PPUSH
45809: CALL_OW 302
45813: NOT
45814: IFFALSE 45827
// begin HackUnlinkAll ( i ) ;
45816: LD_VAR 0 1
45820: PPUSH
45821: CALL 45933 0 1
// continue ;
45825: GO 45707
// end ; HackCheckCapturedStatus ( i ) ;
45827: LD_VAR 0 1
45831: PPUSH
45832: CALL 46376 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45836: LD_ADDR_VAR 0 2
45840: PUSH
45841: LD_INT 81
45843: PUSH
45844: LD_VAR 0 1
45848: PPUSH
45849: CALL_OW 255
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 33
45860: PUSH
45861: LD_INT 3
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 91
45870: PUSH
45871: LD_VAR 0 1
45875: PUSH
45876: LD_EXP 6
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 50
45888: PUSH
45889: EMPTY
45890: LIST
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: PPUSH
45898: CALL_OW 69
45902: ST_TO_ADDR
// if not tmp then
45903: LD_VAR 0 2
45907: NOT
45908: IFFALSE 45912
// continue ;
45910: GO 45707
// HackLink ( i , tmp ) ;
45912: LD_VAR 0 1
45916: PPUSH
45917: LD_VAR 0 2
45921: PPUSH
45922: CALL 46069 0 2
// end ;
45926: GO 45707
45928: POP
45929: POP
// end ;
45930: PPOPN 2
45932: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45933: LD_INT 0
45935: PPUSH
45936: PPUSH
45937: PPUSH
// if not hack in hackTanks then
45938: LD_VAR 0 1
45942: PUSH
45943: LD_EXP 3
45947: IN
45948: NOT
45949: IFFALSE 45953
// exit ;
45951: GO 46064
// index := GetElementIndex ( hackTanks , hack ) ;
45953: LD_ADDR_VAR 0 4
45957: PUSH
45958: LD_EXP 3
45962: PPUSH
45963: LD_VAR 0 1
45967: PPUSH
45968: CALL 5284 0 2
45972: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
45973: LD_EXP 4
45977: PUSH
45978: LD_VAR 0 4
45982: ARRAY
45983: IFFALSE 46064
// begin for i in hackTanksCaptured [ index ] do
45985: LD_ADDR_VAR 0 3
45989: PUSH
45990: LD_EXP 4
45994: PUSH
45995: LD_VAR 0 4
45999: ARRAY
46000: PUSH
46001: FOR_IN
46002: IFFALSE 46028
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
46004: LD_VAR 0 3
46008: PUSH
46009: LD_INT 1
46011: ARRAY
46012: PPUSH
46013: LD_VAR 0 3
46017: PUSH
46018: LD_INT 2
46020: ARRAY
46021: PPUSH
46022: CALL_OW 235
46026: GO 46001
46028: POP
46029: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
46030: LD_ADDR_EXP 4
46034: PUSH
46035: LD_EXP 4
46039: PPUSH
46040: LD_VAR 0 4
46044: PPUSH
46045: EMPTY
46046: PPUSH
46047: CALL_OW 1
46051: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
46052: LD_VAR 0 1
46056: PPUSH
46057: LD_INT 0
46059: PPUSH
46060: CALL_OW 505
// end ; end ;
46064: LD_VAR 0 2
46068: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
46069: LD_INT 0
46071: PPUSH
46072: PPUSH
46073: PPUSH
// if not hack in hackTanks or not vehicles then
46074: LD_VAR 0 1
46078: PUSH
46079: LD_EXP 3
46083: IN
46084: NOT
46085: PUSH
46086: LD_VAR 0 2
46090: NOT
46091: OR
46092: IFFALSE 46096
// exit ;
46094: GO 46371
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
46096: LD_ADDR_VAR 0 2
46100: PUSH
46101: LD_VAR 0 1
46105: PPUSH
46106: LD_VAR 0 2
46110: PPUSH
46111: LD_INT 1
46113: PPUSH
46114: LD_INT 1
46116: PPUSH
46117: CALL 5934 0 4
46121: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
46122: LD_ADDR_VAR 0 5
46126: PUSH
46127: LD_EXP 3
46131: PPUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: CALL 5284 0 2
46141: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
46142: LD_EXP 4
46146: PUSH
46147: LD_VAR 0 5
46151: ARRAY
46152: PUSH
46153: LD_EXP 5
46157: LESS
46158: IFFALSE 46347
// begin for i := 1 to vehicles do
46160: LD_ADDR_VAR 0 4
46164: PUSH
46165: DOUBLE
46166: LD_INT 1
46168: DEC
46169: ST_TO_ADDR
46170: LD_VAR 0 2
46174: PUSH
46175: FOR_TO
46176: IFFALSE 46345
// begin if hackTanksCaptured [ index ] = hackLimit then
46178: LD_EXP 4
46182: PUSH
46183: LD_VAR 0 5
46187: ARRAY
46188: PUSH
46189: LD_EXP 5
46193: EQUAL
46194: IFFALSE 46198
// break ;
46196: GO 46345
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
46198: LD_ADDR_EXP 7
46202: PUSH
46203: LD_EXP 7
46207: PPUSH
46208: LD_VAR 0 5
46212: PPUSH
46213: LD_EXP 7
46217: PUSH
46218: LD_VAR 0 5
46222: ARRAY
46223: PUSH
46224: LD_INT 1
46226: PLUS
46227: PPUSH
46228: CALL_OW 1
46232: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
46233: LD_ADDR_EXP 4
46237: PUSH
46238: LD_EXP 4
46242: PPUSH
46243: LD_VAR 0 5
46247: PUSH
46248: LD_EXP 4
46252: PUSH
46253: LD_VAR 0 5
46257: ARRAY
46258: PUSH
46259: LD_INT 1
46261: PLUS
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PPUSH
46267: LD_VAR 0 2
46271: PUSH
46272: LD_VAR 0 4
46276: ARRAY
46277: PUSH
46278: LD_VAR 0 2
46282: PUSH
46283: LD_VAR 0 4
46287: ARRAY
46288: PPUSH
46289: CALL_OW 255
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PPUSH
46298: CALL 5499 0 3
46302: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
46303: LD_VAR 0 2
46307: PUSH
46308: LD_VAR 0 4
46312: ARRAY
46313: PPUSH
46314: LD_VAR 0 1
46318: PPUSH
46319: CALL_OW 255
46323: PPUSH
46324: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46328: LD_VAR 0 2
46332: PUSH
46333: LD_VAR 0 4
46337: ARRAY
46338: PPUSH
46339: CALL_OW 141
// end ;
46343: GO 46175
46345: POP
46346: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46347: LD_VAR 0 1
46351: PPUSH
46352: LD_EXP 4
46356: PUSH
46357: LD_VAR 0 5
46361: ARRAY
46362: PUSH
46363: LD_INT 0
46365: PLUS
46366: PPUSH
46367: CALL_OW 505
// end ;
46371: LD_VAR 0 3
46375: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46376: LD_INT 0
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
// if not hack in hackTanks then
46382: LD_VAR 0 1
46386: PUSH
46387: LD_EXP 3
46391: IN
46392: NOT
46393: IFFALSE 46397
// exit ;
46395: GO 46637
// index := GetElementIndex ( hackTanks , hack ) ;
46397: LD_ADDR_VAR 0 4
46401: PUSH
46402: LD_EXP 3
46406: PPUSH
46407: LD_VAR 0 1
46411: PPUSH
46412: CALL 5284 0 2
46416: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46417: LD_ADDR_VAR 0 3
46421: PUSH
46422: DOUBLE
46423: LD_EXP 4
46427: PUSH
46428: LD_VAR 0 4
46432: ARRAY
46433: INC
46434: ST_TO_ADDR
46435: LD_INT 1
46437: PUSH
46438: FOR_DOWNTO
46439: IFFALSE 46611
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46441: LD_ADDR_VAR 0 5
46445: PUSH
46446: LD_EXP 4
46450: PUSH
46451: LD_VAR 0 4
46455: ARRAY
46456: PUSH
46457: LD_VAR 0 3
46461: ARRAY
46462: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46463: LD_VAR 0 5
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: PPUSH
46472: CALL_OW 302
46476: NOT
46477: PUSH
46478: LD_VAR 0 5
46482: PUSH
46483: LD_INT 1
46485: ARRAY
46486: PPUSH
46487: CALL_OW 255
46491: PUSH
46492: LD_VAR 0 1
46496: PPUSH
46497: CALL_OW 255
46501: NONEQUAL
46502: OR
46503: IFFALSE 46609
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46505: LD_VAR 0 5
46509: PUSH
46510: LD_INT 1
46512: ARRAY
46513: PPUSH
46514: CALL_OW 305
46518: PUSH
46519: LD_VAR 0 5
46523: PUSH
46524: LD_INT 1
46526: ARRAY
46527: PPUSH
46528: CALL_OW 255
46532: PUSH
46533: LD_VAR 0 1
46537: PPUSH
46538: CALL_OW 255
46542: EQUAL
46543: AND
46544: IFFALSE 46568
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46546: LD_VAR 0 5
46550: PUSH
46551: LD_INT 1
46553: ARRAY
46554: PPUSH
46555: LD_VAR 0 5
46559: PUSH
46560: LD_INT 2
46562: ARRAY
46563: PPUSH
46564: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46568: LD_ADDR_EXP 4
46572: PUSH
46573: LD_EXP 4
46577: PPUSH
46578: LD_VAR 0 4
46582: PPUSH
46583: LD_EXP 4
46587: PUSH
46588: LD_VAR 0 4
46592: ARRAY
46593: PPUSH
46594: LD_VAR 0 3
46598: PPUSH
46599: CALL_OW 3
46603: PPUSH
46604: CALL_OW 1
46608: ST_TO_ADDR
// end ; end ;
46609: GO 46438
46611: POP
46612: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46613: LD_VAR 0 1
46617: PPUSH
46618: LD_EXP 4
46622: PUSH
46623: LD_VAR 0 4
46627: ARRAY
46628: PUSH
46629: LD_INT 0
46631: PLUS
46632: PPUSH
46633: CALL_OW 505
// end ;
46637: LD_VAR 0 2
46641: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46642: LD_INT 0
46644: PPUSH
46645: PPUSH
46646: PPUSH
46647: PPUSH
// if not hack in hackTanks then
46648: LD_VAR 0 1
46652: PUSH
46653: LD_EXP 3
46657: IN
46658: NOT
46659: IFFALSE 46663
// exit ;
46661: GO 46748
// index := GetElementIndex ( hackTanks , hack ) ;
46663: LD_ADDR_VAR 0 5
46667: PUSH
46668: LD_EXP 3
46672: PPUSH
46673: LD_VAR 0 1
46677: PPUSH
46678: CALL 5284 0 2
46682: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46683: LD_ADDR_VAR 0 4
46687: PUSH
46688: DOUBLE
46689: LD_INT 1
46691: DEC
46692: ST_TO_ADDR
46693: LD_EXP 4
46697: PUSH
46698: LD_VAR 0 5
46702: ARRAY
46703: PUSH
46704: FOR_TO
46705: IFFALSE 46746
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46707: LD_EXP 4
46711: PUSH
46712: LD_VAR 0 5
46716: ARRAY
46717: PUSH
46718: LD_VAR 0 4
46722: ARRAY
46723: PUSH
46724: LD_INT 1
46726: ARRAY
46727: PUSH
46728: LD_VAR 0 2
46732: EQUAL
46733: IFFALSE 46744
// KillUnit ( vehicle ) ;
46735: LD_VAR 0 2
46739: PPUSH
46740: CALL_OW 66
46744: GO 46704
46746: POP
46747: POP
// end ;
46748: LD_VAR 0 3
46752: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46753: LD_EXP 8
46757: NOT
46758: IFFALSE 46793
46760: GO 46762
46762: DISABLE
// begin initMiner := true ;
46763: LD_ADDR_EXP 8
46767: PUSH
46768: LD_INT 1
46770: ST_TO_ADDR
// minersList := [ ] ;
46771: LD_ADDR_EXP 9
46775: PUSH
46776: EMPTY
46777: ST_TO_ADDR
// minerMinesList := [ ] ;
46778: LD_ADDR_EXP 10
46782: PUSH
46783: EMPTY
46784: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46785: LD_ADDR_EXP 11
46789: PUSH
46790: LD_INT 5
46792: ST_TO_ADDR
// end ;
46793: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46794: LD_EXP 8
46798: PUSH
46799: LD_INT 34
46801: PUSH
46802: LD_INT 81
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PPUSH
46809: CALL_OW 69
46813: AND
46814: IFFALSE 47275
46816: GO 46818
46818: DISABLE
46819: LD_INT 0
46821: PPUSH
46822: PPUSH
46823: PPUSH
46824: PPUSH
// begin enable ;
46825: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46826: LD_ADDR_VAR 0 1
46830: PUSH
46831: LD_INT 34
46833: PUSH
46834: LD_INT 81
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PPUSH
46841: CALL_OW 69
46845: PUSH
46846: FOR_IN
46847: IFFALSE 46919
// begin if not i in minersList then
46849: LD_VAR 0 1
46853: PUSH
46854: LD_EXP 9
46858: IN
46859: NOT
46860: IFFALSE 46917
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46862: LD_ADDR_EXP 9
46866: PUSH
46867: LD_EXP 9
46871: PPUSH
46872: LD_EXP 9
46876: PUSH
46877: LD_INT 1
46879: PLUS
46880: PPUSH
46881: LD_VAR 0 1
46885: PPUSH
46886: CALL_OW 1
46890: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46891: LD_ADDR_EXP 10
46895: PUSH
46896: LD_EXP 10
46900: PPUSH
46901: LD_EXP 10
46905: PUSH
46906: LD_INT 1
46908: PLUS
46909: PPUSH
46910: EMPTY
46911: PPUSH
46912: CALL_OW 1
46916: ST_TO_ADDR
// end end ;
46917: GO 46846
46919: POP
46920: POP
// for i := minerMinesList downto 1 do
46921: LD_ADDR_VAR 0 1
46925: PUSH
46926: DOUBLE
46927: LD_EXP 10
46931: INC
46932: ST_TO_ADDR
46933: LD_INT 1
46935: PUSH
46936: FOR_DOWNTO
46937: IFFALSE 47273
// begin if IsLive ( minersList [ i ] ) then
46939: LD_EXP 9
46943: PUSH
46944: LD_VAR 0 1
46948: ARRAY
46949: PPUSH
46950: CALL_OW 300
46954: IFFALSE 46982
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
46956: LD_EXP 9
46960: PUSH
46961: LD_VAR 0 1
46965: ARRAY
46966: PPUSH
46967: LD_EXP 10
46971: PUSH
46972: LD_VAR 0 1
46976: ARRAY
46977: PPUSH
46978: CALL_OW 505
// if not minerMinesList [ i ] then
46982: LD_EXP 10
46986: PUSH
46987: LD_VAR 0 1
46991: ARRAY
46992: NOT
46993: IFFALSE 46997
// continue ;
46995: GO 46936
// for j := minerMinesList [ i ] downto 1 do
46997: LD_ADDR_VAR 0 2
47001: PUSH
47002: DOUBLE
47003: LD_EXP 10
47007: PUSH
47008: LD_VAR 0 1
47012: ARRAY
47013: INC
47014: ST_TO_ADDR
47015: LD_INT 1
47017: PUSH
47018: FOR_DOWNTO
47019: IFFALSE 47269
// begin side := GetSide ( minersList [ i ] ) ;
47021: LD_ADDR_VAR 0 3
47025: PUSH
47026: LD_EXP 9
47030: PUSH
47031: LD_VAR 0 1
47035: ARRAY
47036: PPUSH
47037: CALL_OW 255
47041: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
47042: LD_ADDR_VAR 0 4
47046: PUSH
47047: LD_EXP 10
47051: PUSH
47052: LD_VAR 0 1
47056: ARRAY
47057: PUSH
47058: LD_VAR 0 2
47062: ARRAY
47063: PUSH
47064: LD_INT 1
47066: ARRAY
47067: PPUSH
47068: LD_EXP 10
47072: PUSH
47073: LD_VAR 0 1
47077: ARRAY
47078: PUSH
47079: LD_VAR 0 2
47083: ARRAY
47084: PUSH
47085: LD_INT 2
47087: ARRAY
47088: PPUSH
47089: CALL_OW 428
47093: ST_TO_ADDR
// if not tmp then
47094: LD_VAR 0 4
47098: NOT
47099: IFFALSE 47103
// continue ;
47101: GO 47018
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
47103: LD_VAR 0 4
47107: PUSH
47108: LD_INT 81
47110: PUSH
47111: LD_VAR 0 3
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PPUSH
47120: CALL_OW 69
47124: IN
47125: PUSH
47126: LD_EXP 10
47130: PUSH
47131: LD_VAR 0 1
47135: ARRAY
47136: PUSH
47137: LD_VAR 0 2
47141: ARRAY
47142: PUSH
47143: LD_INT 1
47145: ARRAY
47146: PPUSH
47147: LD_EXP 10
47151: PUSH
47152: LD_VAR 0 1
47156: ARRAY
47157: PUSH
47158: LD_VAR 0 2
47162: ARRAY
47163: PUSH
47164: LD_INT 2
47166: ARRAY
47167: PPUSH
47168: CALL_OW 458
47172: AND
47173: IFFALSE 47267
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
47175: LD_EXP 10
47179: PUSH
47180: LD_VAR 0 1
47184: ARRAY
47185: PUSH
47186: LD_VAR 0 2
47190: ARRAY
47191: PUSH
47192: LD_INT 1
47194: ARRAY
47195: PPUSH
47196: LD_EXP 10
47200: PUSH
47201: LD_VAR 0 1
47205: ARRAY
47206: PUSH
47207: LD_VAR 0 2
47211: ARRAY
47212: PUSH
47213: LD_INT 2
47215: ARRAY
47216: PPUSH
47217: LD_VAR 0 3
47221: PPUSH
47222: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
47226: LD_ADDR_EXP 10
47230: PUSH
47231: LD_EXP 10
47235: PPUSH
47236: LD_VAR 0 1
47240: PPUSH
47241: LD_EXP 10
47245: PUSH
47246: LD_VAR 0 1
47250: ARRAY
47251: PPUSH
47252: LD_VAR 0 2
47256: PPUSH
47257: CALL_OW 3
47261: PPUSH
47262: CALL_OW 1
47266: ST_TO_ADDR
// end ; end ;
47267: GO 47018
47269: POP
47270: POP
// end ;
47271: GO 46936
47273: POP
47274: POP
// end ;
47275: PPOPN 4
47277: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
47278: LD_INT 0
47280: PPUSH
47281: PPUSH
// result := false ;
47282: LD_ADDR_VAR 0 4
47286: PUSH
47287: LD_INT 0
47289: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
47290: LD_VAR 0 1
47294: PPUSH
47295: CALL_OW 264
47299: PUSH
47300: LD_INT 81
47302: EQUAL
47303: NOT
47304: IFFALSE 47308
// exit ;
47306: GO 47548
// index := GetElementIndex ( minersList , unit ) ;
47308: LD_ADDR_VAR 0 5
47312: PUSH
47313: LD_EXP 9
47317: PPUSH
47318: LD_VAR 0 1
47322: PPUSH
47323: CALL 5284 0 2
47327: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47328: LD_EXP 10
47332: PUSH
47333: LD_VAR 0 5
47337: ARRAY
47338: PUSH
47339: LD_EXP 11
47343: GREATEREQUAL
47344: IFFALSE 47348
// exit ;
47346: GO 47548
// ComMoveXY ( unit , x , y ) ;
47348: LD_VAR 0 1
47352: PPUSH
47353: LD_VAR 0 2
47357: PPUSH
47358: LD_VAR 0 3
47362: PPUSH
47363: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47367: LD_INT 35
47369: PPUSH
47370: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47374: LD_VAR 0 1
47378: PPUSH
47379: LD_VAR 0 2
47383: PPUSH
47384: LD_VAR 0 3
47388: PPUSH
47389: CALL 37045 0 3
47393: NOT
47394: PUSH
47395: LD_VAR 0 1
47399: PPUSH
47400: CALL_OW 314
47404: AND
47405: IFFALSE 47409
// exit ;
47407: GO 47548
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47409: LD_VAR 0 2
47413: PPUSH
47414: LD_VAR 0 3
47418: PPUSH
47419: CALL_OW 428
47423: PUSH
47424: LD_VAR 0 1
47428: EQUAL
47429: PUSH
47430: LD_VAR 0 1
47434: PPUSH
47435: CALL_OW 314
47439: NOT
47440: AND
47441: IFFALSE 47367
// PlaySoundXY ( x , y , PlantMine ) ;
47443: LD_VAR 0 2
47447: PPUSH
47448: LD_VAR 0 3
47452: PPUSH
47453: LD_STRING PlantMine
47455: PPUSH
47456: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47460: LD_VAR 0 2
47464: PPUSH
47465: LD_VAR 0 3
47469: PPUSH
47470: LD_VAR 0 1
47474: PPUSH
47475: CALL_OW 255
47479: PPUSH
47480: LD_INT 0
47482: PPUSH
47483: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47487: LD_ADDR_EXP 10
47491: PUSH
47492: LD_EXP 10
47496: PPUSH
47497: LD_VAR 0 5
47501: PUSH
47502: LD_EXP 10
47506: PUSH
47507: LD_VAR 0 5
47511: ARRAY
47512: PUSH
47513: LD_INT 1
47515: PLUS
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PPUSH
47521: LD_VAR 0 2
47525: PUSH
47526: LD_VAR 0 3
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PPUSH
47535: CALL 5499 0 3
47539: ST_TO_ADDR
// result := true ;
47540: LD_ADDR_VAR 0 4
47544: PUSH
47545: LD_INT 1
47547: ST_TO_ADDR
// end ;
47548: LD_VAR 0 4
47552: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47553: LD_INT 0
47555: PPUSH
47556: PPUSH
47557: PPUSH
// if not unit in minersList then
47558: LD_VAR 0 1
47562: PUSH
47563: LD_EXP 9
47567: IN
47568: NOT
47569: IFFALSE 47573
// exit ;
47571: GO 47965
// index := GetElementIndex ( minersList , unit ) ;
47573: LD_ADDR_VAR 0 6
47577: PUSH
47578: LD_EXP 9
47582: PPUSH
47583: LD_VAR 0 1
47587: PPUSH
47588: CALL 5284 0 2
47592: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47593: LD_ADDR_VAR 0 5
47597: PUSH
47598: DOUBLE
47599: LD_EXP 10
47603: PUSH
47604: LD_VAR 0 6
47608: ARRAY
47609: INC
47610: ST_TO_ADDR
47611: LD_INT 1
47613: PUSH
47614: FOR_DOWNTO
47615: IFFALSE 47776
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47617: LD_EXP 10
47621: PUSH
47622: LD_VAR 0 6
47626: ARRAY
47627: PUSH
47628: LD_VAR 0 5
47632: ARRAY
47633: PUSH
47634: LD_INT 1
47636: ARRAY
47637: PUSH
47638: LD_VAR 0 2
47642: EQUAL
47643: PUSH
47644: LD_EXP 10
47648: PUSH
47649: LD_VAR 0 6
47653: ARRAY
47654: PUSH
47655: LD_VAR 0 5
47659: ARRAY
47660: PUSH
47661: LD_INT 2
47663: ARRAY
47664: PUSH
47665: LD_VAR 0 3
47669: EQUAL
47670: AND
47671: IFFALSE 47774
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47673: LD_EXP 10
47677: PUSH
47678: LD_VAR 0 6
47682: ARRAY
47683: PUSH
47684: LD_VAR 0 5
47688: ARRAY
47689: PUSH
47690: LD_INT 1
47692: ARRAY
47693: PPUSH
47694: LD_EXP 10
47698: PUSH
47699: LD_VAR 0 6
47703: ARRAY
47704: PUSH
47705: LD_VAR 0 5
47709: ARRAY
47710: PUSH
47711: LD_INT 2
47713: ARRAY
47714: PPUSH
47715: LD_VAR 0 1
47719: PPUSH
47720: CALL_OW 255
47724: PPUSH
47725: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47729: LD_ADDR_EXP 10
47733: PUSH
47734: LD_EXP 10
47738: PPUSH
47739: LD_VAR 0 6
47743: PPUSH
47744: LD_EXP 10
47748: PUSH
47749: LD_VAR 0 6
47753: ARRAY
47754: PPUSH
47755: LD_VAR 0 5
47759: PPUSH
47760: CALL_OW 3
47764: PPUSH
47765: CALL_OW 1
47769: ST_TO_ADDR
// exit ;
47770: POP
47771: POP
47772: GO 47965
// end ; end ;
47774: GO 47614
47776: POP
47777: POP
// for i := minerMinesList [ index ] downto 1 do
47778: LD_ADDR_VAR 0 5
47782: PUSH
47783: DOUBLE
47784: LD_EXP 10
47788: PUSH
47789: LD_VAR 0 6
47793: ARRAY
47794: INC
47795: ST_TO_ADDR
47796: LD_INT 1
47798: PUSH
47799: FOR_DOWNTO
47800: IFFALSE 47963
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47802: LD_EXP 10
47806: PUSH
47807: LD_VAR 0 6
47811: ARRAY
47812: PUSH
47813: LD_VAR 0 5
47817: ARRAY
47818: PUSH
47819: LD_INT 1
47821: ARRAY
47822: PPUSH
47823: LD_EXP 10
47827: PUSH
47828: LD_VAR 0 6
47832: ARRAY
47833: PUSH
47834: LD_VAR 0 5
47838: ARRAY
47839: PUSH
47840: LD_INT 2
47842: ARRAY
47843: PPUSH
47844: LD_VAR 0 2
47848: PPUSH
47849: LD_VAR 0 3
47853: PPUSH
47854: CALL_OW 298
47858: PUSH
47859: LD_INT 6
47861: LESS
47862: IFFALSE 47961
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47864: LD_EXP 10
47868: PUSH
47869: LD_VAR 0 6
47873: ARRAY
47874: PUSH
47875: LD_VAR 0 5
47879: ARRAY
47880: PUSH
47881: LD_INT 1
47883: ARRAY
47884: PPUSH
47885: LD_EXP 10
47889: PUSH
47890: LD_VAR 0 6
47894: ARRAY
47895: PUSH
47896: LD_VAR 0 5
47900: ARRAY
47901: PUSH
47902: LD_INT 2
47904: ARRAY
47905: PPUSH
47906: LD_VAR 0 1
47910: PPUSH
47911: CALL_OW 255
47915: PPUSH
47916: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47920: LD_ADDR_EXP 10
47924: PUSH
47925: LD_EXP 10
47929: PPUSH
47930: LD_VAR 0 6
47934: PPUSH
47935: LD_EXP 10
47939: PUSH
47940: LD_VAR 0 6
47944: ARRAY
47945: PPUSH
47946: LD_VAR 0 5
47950: PPUSH
47951: CALL_OW 3
47955: PPUSH
47956: CALL_OW 1
47960: ST_TO_ADDR
// end ; end ;
47961: GO 47799
47963: POP
47964: POP
// end ;
47965: LD_VAR 0 4
47969: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
47970: LD_INT 0
47972: PPUSH
47973: PPUSH
47974: PPUSH
47975: PPUSH
47976: PPUSH
47977: PPUSH
47978: PPUSH
47979: PPUSH
47980: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
47981: LD_VAR 0 1
47985: PPUSH
47986: CALL_OW 264
47990: PUSH
47991: LD_INT 81
47993: EQUAL
47994: NOT
47995: PUSH
47996: LD_VAR 0 1
48000: PUSH
48001: LD_EXP 9
48005: IN
48006: NOT
48007: OR
48008: IFFALSE 48012
// exit ;
48010: GO 48334
// index := GetElementIndex ( minersList , unit ) ;
48012: LD_ADDR_VAR 0 6
48016: PUSH
48017: LD_EXP 9
48021: PPUSH
48022: LD_VAR 0 1
48026: PPUSH
48027: CALL 5284 0 2
48031: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
48032: LD_ADDR_VAR 0 8
48036: PUSH
48037: LD_EXP 11
48041: PUSH
48042: LD_EXP 10
48046: PUSH
48047: LD_VAR 0 6
48051: ARRAY
48052: MINUS
48053: ST_TO_ADDR
// if not minesFreeAmount then
48054: LD_VAR 0 8
48058: NOT
48059: IFFALSE 48063
// exit ;
48061: GO 48334
// tmp := [ ] ;
48063: LD_ADDR_VAR 0 7
48067: PUSH
48068: EMPTY
48069: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
48070: LD_ADDR_VAR 0 5
48074: PUSH
48075: DOUBLE
48076: LD_INT 1
48078: DEC
48079: ST_TO_ADDR
48080: LD_VAR 0 8
48084: PUSH
48085: FOR_TO
48086: IFFALSE 48281
// begin _d := rand ( 0 , 5 ) ;
48088: LD_ADDR_VAR 0 11
48092: PUSH
48093: LD_INT 0
48095: PPUSH
48096: LD_INT 5
48098: PPUSH
48099: CALL_OW 12
48103: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
48104: LD_ADDR_VAR 0 12
48108: PUSH
48109: LD_INT 2
48111: PPUSH
48112: LD_INT 6
48114: PPUSH
48115: CALL_OW 12
48119: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
48120: LD_ADDR_VAR 0 9
48124: PUSH
48125: LD_VAR 0 2
48129: PPUSH
48130: LD_VAR 0 11
48134: PPUSH
48135: LD_VAR 0 12
48139: PPUSH
48140: CALL_OW 272
48144: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
48145: LD_ADDR_VAR 0 10
48149: PUSH
48150: LD_VAR 0 3
48154: PPUSH
48155: LD_VAR 0 11
48159: PPUSH
48160: LD_VAR 0 12
48164: PPUSH
48165: CALL_OW 273
48169: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
48170: LD_VAR 0 9
48174: PPUSH
48175: LD_VAR 0 10
48179: PPUSH
48180: CALL_OW 488
48184: PUSH
48185: LD_VAR 0 9
48189: PUSH
48190: LD_VAR 0 10
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_VAR 0 7
48203: IN
48204: NOT
48205: AND
48206: PUSH
48207: LD_VAR 0 9
48211: PPUSH
48212: LD_VAR 0 10
48216: PPUSH
48217: CALL_OW 458
48221: NOT
48222: AND
48223: IFFALSE 48265
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
48225: LD_ADDR_VAR 0 7
48229: PUSH
48230: LD_VAR 0 7
48234: PPUSH
48235: LD_VAR 0 7
48239: PUSH
48240: LD_INT 1
48242: PLUS
48243: PPUSH
48244: LD_VAR 0 9
48248: PUSH
48249: LD_VAR 0 10
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PPUSH
48258: CALL_OW 1
48262: ST_TO_ADDR
48263: GO 48279
// i := i - 1 ;
48265: LD_ADDR_VAR 0 5
48269: PUSH
48270: LD_VAR 0 5
48274: PUSH
48275: LD_INT 1
48277: MINUS
48278: ST_TO_ADDR
// end ;
48279: GO 48085
48281: POP
48282: POP
// for i in tmp do
48283: LD_ADDR_VAR 0 5
48287: PUSH
48288: LD_VAR 0 7
48292: PUSH
48293: FOR_IN
48294: IFFALSE 48332
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48296: LD_VAR 0 1
48300: PPUSH
48301: LD_VAR 0 5
48305: PUSH
48306: LD_INT 1
48308: ARRAY
48309: PPUSH
48310: LD_VAR 0 5
48314: PUSH
48315: LD_INT 2
48317: ARRAY
48318: PPUSH
48319: CALL 47278 0 3
48323: NOT
48324: IFFALSE 48330
// exit ;
48326: POP
48327: POP
48328: GO 48334
48330: GO 48293
48332: POP
48333: POP
// end ;
48334: LD_VAR 0 4
48338: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
48339: LD_INT 0
48341: PPUSH
48342: PPUSH
48343: PPUSH
48344: PPUSH
48345: PPUSH
48346: PPUSH
48347: PPUSH
48348: PPUSH
48349: PPUSH
// if GetClass ( unit ) <> class_sniper then
48350: LD_VAR 0 1
48354: PPUSH
48355: CALL_OW 257
48359: PUSH
48360: LD_INT 5
48362: NONEQUAL
48363: IFFALSE 48367
// exit ;
48365: GO 48833
// dist := 8 ;
48367: LD_ADDR_VAR 0 5
48371: PUSH
48372: LD_INT 8
48374: ST_TO_ADDR
// viewRange := 12 ;
48375: LD_ADDR_VAR 0 8
48379: PUSH
48380: LD_INT 12
48382: ST_TO_ADDR
// side := GetSide ( unit ) ;
48383: LD_ADDR_VAR 0 6
48387: PUSH
48388: LD_VAR 0 1
48392: PPUSH
48393: CALL_OW 255
48397: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48398: LD_INT 61
48400: PPUSH
48401: LD_VAR 0 6
48405: PPUSH
48406: CALL_OW 321
48410: PUSH
48411: LD_INT 2
48413: EQUAL
48414: IFFALSE 48424
// viewRange := 16 ;
48416: LD_ADDR_VAR 0 8
48420: PUSH
48421: LD_INT 16
48423: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48424: LD_VAR 0 1
48428: PPUSH
48429: LD_VAR 0 2
48433: PPUSH
48434: LD_VAR 0 3
48438: PPUSH
48439: CALL_OW 297
48443: PUSH
48444: LD_VAR 0 5
48448: GREATER
48449: IFFALSE 48528
// begin ComMoveXY ( unit , x , y ) ;
48451: LD_VAR 0 1
48455: PPUSH
48456: LD_VAR 0 2
48460: PPUSH
48461: LD_VAR 0 3
48465: PPUSH
48466: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48470: LD_INT 35
48472: PPUSH
48473: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48477: LD_VAR 0 1
48481: PPUSH
48482: LD_VAR 0 2
48486: PPUSH
48487: LD_VAR 0 3
48491: PPUSH
48492: CALL 37045 0 3
48496: NOT
48497: IFFALSE 48501
// exit ;
48499: GO 48833
// until GetDistUnitXY ( unit , x , y ) < dist ;
48501: LD_VAR 0 1
48505: PPUSH
48506: LD_VAR 0 2
48510: PPUSH
48511: LD_VAR 0 3
48515: PPUSH
48516: CALL_OW 297
48520: PUSH
48521: LD_VAR 0 5
48525: LESS
48526: IFFALSE 48470
// end ; ComTurnXY ( unit , x , y ) ;
48528: LD_VAR 0 1
48532: PPUSH
48533: LD_VAR 0 2
48537: PPUSH
48538: LD_VAR 0 3
48542: PPUSH
48543: CALL_OW 118
// repeat if Multiplayer then
48547: LD_OWVAR 4
48551: IFFALSE 48562
// wait ( 35 ) else
48553: LD_INT 35
48555: PPUSH
48556: CALL_OW 67
48560: GO 48569
// wait ( 5 ) ;
48562: LD_INT 5
48564: PPUSH
48565: CALL_OW 67
// _d := GetDir ( unit ) ;
48569: LD_ADDR_VAR 0 11
48573: PUSH
48574: LD_VAR 0 1
48578: PPUSH
48579: CALL_OW 254
48583: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
48584: LD_ADDR_VAR 0 7
48588: PUSH
48589: LD_VAR 0 1
48593: PPUSH
48594: CALL_OW 250
48598: PPUSH
48599: LD_VAR 0 1
48603: PPUSH
48604: CALL_OW 251
48608: PPUSH
48609: LD_VAR 0 2
48613: PPUSH
48614: LD_VAR 0 3
48618: PPUSH
48619: CALL 39653 0 4
48623: ST_TO_ADDR
// until dir = _d ;
48624: LD_VAR 0 7
48628: PUSH
48629: LD_VAR 0 11
48633: EQUAL
48634: IFFALSE 48547
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
48636: LD_ADDR_VAR 0 9
48640: PUSH
48641: LD_VAR 0 1
48645: PPUSH
48646: CALL_OW 250
48650: PPUSH
48651: LD_VAR 0 7
48655: PPUSH
48656: LD_VAR 0 5
48660: PPUSH
48661: CALL_OW 272
48665: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
48666: LD_ADDR_VAR 0 10
48670: PUSH
48671: LD_VAR 0 1
48675: PPUSH
48676: CALL_OW 251
48680: PPUSH
48681: LD_VAR 0 7
48685: PPUSH
48686: LD_VAR 0 5
48690: PPUSH
48691: CALL_OW 273
48695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48696: LD_VAR 0 9
48700: PPUSH
48701: LD_VAR 0 10
48705: PPUSH
48706: CALL_OW 488
48710: NOT
48711: IFFALSE 48715
// exit ;
48713: GO 48833
// ComAnimCustom ( unit , 1 ) ;
48715: LD_VAR 0 1
48719: PPUSH
48720: LD_INT 1
48722: PPUSH
48723: CALL_OW 592
// p := 0 ;
48727: LD_ADDR_VAR 0 12
48731: PUSH
48732: LD_INT 0
48734: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48735: LD_VAR 0 9
48739: PPUSH
48740: LD_VAR 0 10
48744: PPUSH
48745: LD_VAR 0 6
48749: PPUSH
48750: LD_VAR 0 8
48754: PPUSH
48755: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
48759: LD_INT 35
48761: PPUSH
48762: CALL_OW 67
// p := Inc ( p ) ;
48766: LD_ADDR_VAR 0 12
48770: PUSH
48771: LD_VAR 0 12
48775: PPUSH
48776: CALL 39609 0 1
48780: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
48781: LD_VAR 0 12
48785: PUSH
48786: LD_INT 3
48788: EQUAL
48789: PUSH
48790: LD_VAR 0 1
48794: PPUSH
48795: CALL_OW 302
48799: NOT
48800: OR
48801: PUSH
48802: LD_VAR 0 1
48806: PPUSH
48807: CALL_OW 301
48811: OR
48812: IFFALSE 48759
// RemoveSeeing ( _x , _y , side ) ;
48814: LD_VAR 0 9
48818: PPUSH
48819: LD_VAR 0 10
48823: PPUSH
48824: LD_VAR 0 6
48828: PPUSH
48829: CALL_OW 331
// end ; end_of_file
48833: LD_VAR 0 4
48837: RET
// export globalGameSaveCounter ; every 0 0$1 do
48838: GO 48840
48840: DISABLE
// begin enable ;
48841: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48842: LD_STRING updateTimer(
48844: PUSH
48845: LD_OWVAR 1
48849: STR
48850: PUSH
48851: LD_STRING );
48853: STR
48854: PPUSH
48855: CALL_OW 559
// end ;
48859: END
// every 0 0$1 do
48860: GO 48862
48862: DISABLE
// begin globalGameSaveCounter := 0 ;
48863: LD_ADDR_EXP 12
48867: PUSH
48868: LD_INT 0
48870: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
48871: LD_STRING setGameSaveCounter(0)
48873: PPUSH
48874: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
48878: LD_STRING initStreamRollete();
48880: PPUSH
48881: CALL_OW 559
// InitStreamMode ;
48885: CALL 50228 0 0
// DefineStreamItems ( false ) ;
48889: LD_INT 0
48891: PPUSH
48892: CALL 50692 0 1
// end ;
48896: END
// export function SOS_MapStart ( ) ; begin
48897: LD_INT 0
48899: PPUSH
// if streamModeActive then
48900: LD_EXP 13
48904: IFFALSE 48913
// DefineStreamItems ( true ) ;
48906: LD_INT 1
48908: PPUSH
48909: CALL 50692 0 1
// UpdateLuaVariables ( ) ;
48913: CALL 48930 0 0
// UpdateFactoryWaypoints ( ) ;
48917: CALL 63694 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48921: CALL 63946 0 0
// end ;
48925: LD_VAR 0 1
48929: RET
// function UpdateLuaVariables ( ) ; begin
48930: LD_INT 0
48932: PPUSH
// if globalGameSaveCounter then
48933: LD_EXP 12
48937: IFFALSE 48971
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48939: LD_ADDR_EXP 12
48943: PUSH
48944: LD_EXP 12
48948: PPUSH
48949: CALL 39609 0 1
48953: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48954: LD_STRING setGameSaveCounter(
48956: PUSH
48957: LD_EXP 12
48961: STR
48962: PUSH
48963: LD_STRING )
48965: STR
48966: PPUSH
48967: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48971: LD_STRING setGameDifficulty(
48973: PUSH
48974: LD_OWVAR 67
48978: STR
48979: PUSH
48980: LD_STRING )
48982: STR
48983: PPUSH
48984: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
48988: LD_STRING displayDifficulty(
48990: PUSH
48991: LD_OWVAR 67
48995: STR
48996: PUSH
48997: LD_STRING )
48999: STR
49000: PPUSH
49001: CALL_OW 559
// end ;
49005: LD_VAR 0 1
49009: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49010: LD_INT 0
49012: PPUSH
// if p2 = stream_mode then
49013: LD_VAR 0 2
49017: PUSH
49018: LD_INT 100
49020: EQUAL
49021: IFFALSE 50024
// begin if not StreamModeActive then
49023: LD_EXP 13
49027: NOT
49028: IFFALSE 49038
// StreamModeActive := true ;
49030: LD_ADDR_EXP 13
49034: PUSH
49035: LD_INT 1
49037: ST_TO_ADDR
// if p3 = 0 then
49038: LD_VAR 0 3
49042: PUSH
49043: LD_INT 0
49045: EQUAL
49046: IFFALSE 49052
// InitStreamMode ;
49048: CALL 50228 0 0
// if p3 = 1 then
49052: LD_VAR 0 3
49056: PUSH
49057: LD_INT 1
49059: EQUAL
49060: IFFALSE 49070
// sRocket := true ;
49062: LD_ADDR_EXP 18
49066: PUSH
49067: LD_INT 1
49069: ST_TO_ADDR
// if p3 = 2 then
49070: LD_VAR 0 3
49074: PUSH
49075: LD_INT 2
49077: EQUAL
49078: IFFALSE 49088
// sSpeed := true ;
49080: LD_ADDR_EXP 17
49084: PUSH
49085: LD_INT 1
49087: ST_TO_ADDR
// if p3 = 3 then
49088: LD_VAR 0 3
49092: PUSH
49093: LD_INT 3
49095: EQUAL
49096: IFFALSE 49106
// sEngine := true ;
49098: LD_ADDR_EXP 19
49102: PUSH
49103: LD_INT 1
49105: ST_TO_ADDR
// if p3 = 4 then
49106: LD_VAR 0 3
49110: PUSH
49111: LD_INT 4
49113: EQUAL
49114: IFFALSE 49124
// sSpec := true ;
49116: LD_ADDR_EXP 16
49120: PUSH
49121: LD_INT 1
49123: ST_TO_ADDR
// if p3 = 5 then
49124: LD_VAR 0 3
49128: PUSH
49129: LD_INT 5
49131: EQUAL
49132: IFFALSE 49142
// sLevel := true ;
49134: LD_ADDR_EXP 20
49138: PUSH
49139: LD_INT 1
49141: ST_TO_ADDR
// if p3 = 6 then
49142: LD_VAR 0 3
49146: PUSH
49147: LD_INT 6
49149: EQUAL
49150: IFFALSE 49160
// sArmoury := true ;
49152: LD_ADDR_EXP 21
49156: PUSH
49157: LD_INT 1
49159: ST_TO_ADDR
// if p3 = 7 then
49160: LD_VAR 0 3
49164: PUSH
49165: LD_INT 7
49167: EQUAL
49168: IFFALSE 49178
// sRadar := true ;
49170: LD_ADDR_EXP 22
49174: PUSH
49175: LD_INT 1
49177: ST_TO_ADDR
// if p3 = 8 then
49178: LD_VAR 0 3
49182: PUSH
49183: LD_INT 8
49185: EQUAL
49186: IFFALSE 49196
// sBunker := true ;
49188: LD_ADDR_EXP 23
49192: PUSH
49193: LD_INT 1
49195: ST_TO_ADDR
// if p3 = 9 then
49196: LD_VAR 0 3
49200: PUSH
49201: LD_INT 9
49203: EQUAL
49204: IFFALSE 49214
// sHack := true ;
49206: LD_ADDR_EXP 24
49210: PUSH
49211: LD_INT 1
49213: ST_TO_ADDR
// if p3 = 10 then
49214: LD_VAR 0 3
49218: PUSH
49219: LD_INT 10
49221: EQUAL
49222: IFFALSE 49232
// sFire := true ;
49224: LD_ADDR_EXP 25
49228: PUSH
49229: LD_INT 1
49231: ST_TO_ADDR
// if p3 = 11 then
49232: LD_VAR 0 3
49236: PUSH
49237: LD_INT 11
49239: EQUAL
49240: IFFALSE 49250
// sRefresh := true ;
49242: LD_ADDR_EXP 26
49246: PUSH
49247: LD_INT 1
49249: ST_TO_ADDR
// if p3 = 12 then
49250: LD_VAR 0 3
49254: PUSH
49255: LD_INT 12
49257: EQUAL
49258: IFFALSE 49268
// sExp := true ;
49260: LD_ADDR_EXP 27
49264: PUSH
49265: LD_INT 1
49267: ST_TO_ADDR
// if p3 = 13 then
49268: LD_VAR 0 3
49272: PUSH
49273: LD_INT 13
49275: EQUAL
49276: IFFALSE 49286
// sDepot := true ;
49278: LD_ADDR_EXP 28
49282: PUSH
49283: LD_INT 1
49285: ST_TO_ADDR
// if p3 = 14 then
49286: LD_VAR 0 3
49290: PUSH
49291: LD_INT 14
49293: EQUAL
49294: IFFALSE 49304
// sFlag := true ;
49296: LD_ADDR_EXP 29
49300: PUSH
49301: LD_INT 1
49303: ST_TO_ADDR
// if p3 = 15 then
49304: LD_VAR 0 3
49308: PUSH
49309: LD_INT 15
49311: EQUAL
49312: IFFALSE 49322
// sKamikadze := true ;
49314: LD_ADDR_EXP 37
49318: PUSH
49319: LD_INT 1
49321: ST_TO_ADDR
// if p3 = 16 then
49322: LD_VAR 0 3
49326: PUSH
49327: LD_INT 16
49329: EQUAL
49330: IFFALSE 49340
// sTroll := true ;
49332: LD_ADDR_EXP 38
49336: PUSH
49337: LD_INT 1
49339: ST_TO_ADDR
// if p3 = 17 then
49340: LD_VAR 0 3
49344: PUSH
49345: LD_INT 17
49347: EQUAL
49348: IFFALSE 49358
// sSlow := true ;
49350: LD_ADDR_EXP 39
49354: PUSH
49355: LD_INT 1
49357: ST_TO_ADDR
// if p3 = 18 then
49358: LD_VAR 0 3
49362: PUSH
49363: LD_INT 18
49365: EQUAL
49366: IFFALSE 49376
// sLack := true ;
49368: LD_ADDR_EXP 40
49372: PUSH
49373: LD_INT 1
49375: ST_TO_ADDR
// if p3 = 19 then
49376: LD_VAR 0 3
49380: PUSH
49381: LD_INT 19
49383: EQUAL
49384: IFFALSE 49394
// sTank := true ;
49386: LD_ADDR_EXP 42
49390: PUSH
49391: LD_INT 1
49393: ST_TO_ADDR
// if p3 = 20 then
49394: LD_VAR 0 3
49398: PUSH
49399: LD_INT 20
49401: EQUAL
49402: IFFALSE 49412
// sRemote := true ;
49404: LD_ADDR_EXP 43
49408: PUSH
49409: LD_INT 1
49411: ST_TO_ADDR
// if p3 = 21 then
49412: LD_VAR 0 3
49416: PUSH
49417: LD_INT 21
49419: EQUAL
49420: IFFALSE 49430
// sPowell := true ;
49422: LD_ADDR_EXP 44
49426: PUSH
49427: LD_INT 1
49429: ST_TO_ADDR
// if p3 = 22 then
49430: LD_VAR 0 3
49434: PUSH
49435: LD_INT 22
49437: EQUAL
49438: IFFALSE 49448
// sTeleport := true ;
49440: LD_ADDR_EXP 47
49444: PUSH
49445: LD_INT 1
49447: ST_TO_ADDR
// if p3 = 23 then
49448: LD_VAR 0 3
49452: PUSH
49453: LD_INT 23
49455: EQUAL
49456: IFFALSE 49466
// sOilTower := true ;
49458: LD_ADDR_EXP 49
49462: PUSH
49463: LD_INT 1
49465: ST_TO_ADDR
// if p3 = 24 then
49466: LD_VAR 0 3
49470: PUSH
49471: LD_INT 24
49473: EQUAL
49474: IFFALSE 49484
// sShovel := true ;
49476: LD_ADDR_EXP 50
49480: PUSH
49481: LD_INT 1
49483: ST_TO_ADDR
// if p3 = 25 then
49484: LD_VAR 0 3
49488: PUSH
49489: LD_INT 25
49491: EQUAL
49492: IFFALSE 49502
// sSheik := true ;
49494: LD_ADDR_EXP 51
49498: PUSH
49499: LD_INT 1
49501: ST_TO_ADDR
// if p3 = 26 then
49502: LD_VAR 0 3
49506: PUSH
49507: LD_INT 26
49509: EQUAL
49510: IFFALSE 49520
// sEarthquake := true ;
49512: LD_ADDR_EXP 53
49516: PUSH
49517: LD_INT 1
49519: ST_TO_ADDR
// if p3 = 27 then
49520: LD_VAR 0 3
49524: PUSH
49525: LD_INT 27
49527: EQUAL
49528: IFFALSE 49538
// sAI := true ;
49530: LD_ADDR_EXP 54
49534: PUSH
49535: LD_INT 1
49537: ST_TO_ADDR
// if p3 = 28 then
49538: LD_VAR 0 3
49542: PUSH
49543: LD_INT 28
49545: EQUAL
49546: IFFALSE 49556
// sCargo := true ;
49548: LD_ADDR_EXP 57
49552: PUSH
49553: LD_INT 1
49555: ST_TO_ADDR
// if p3 = 29 then
49556: LD_VAR 0 3
49560: PUSH
49561: LD_INT 29
49563: EQUAL
49564: IFFALSE 49574
// sDLaser := true ;
49566: LD_ADDR_EXP 58
49570: PUSH
49571: LD_INT 1
49573: ST_TO_ADDR
// if p3 = 30 then
49574: LD_VAR 0 3
49578: PUSH
49579: LD_INT 30
49581: EQUAL
49582: IFFALSE 49592
// sExchange := true ;
49584: LD_ADDR_EXP 59
49588: PUSH
49589: LD_INT 1
49591: ST_TO_ADDR
// if p3 = 31 then
49592: LD_VAR 0 3
49596: PUSH
49597: LD_INT 31
49599: EQUAL
49600: IFFALSE 49610
// sFac := true ;
49602: LD_ADDR_EXP 60
49606: PUSH
49607: LD_INT 1
49609: ST_TO_ADDR
// if p3 = 32 then
49610: LD_VAR 0 3
49614: PUSH
49615: LD_INT 32
49617: EQUAL
49618: IFFALSE 49628
// sPower := true ;
49620: LD_ADDR_EXP 61
49624: PUSH
49625: LD_INT 1
49627: ST_TO_ADDR
// if p3 = 33 then
49628: LD_VAR 0 3
49632: PUSH
49633: LD_INT 33
49635: EQUAL
49636: IFFALSE 49646
// sRandom := true ;
49638: LD_ADDR_EXP 62
49642: PUSH
49643: LD_INT 1
49645: ST_TO_ADDR
// if p3 = 34 then
49646: LD_VAR 0 3
49650: PUSH
49651: LD_INT 34
49653: EQUAL
49654: IFFALSE 49664
// sShield := true ;
49656: LD_ADDR_EXP 63
49660: PUSH
49661: LD_INT 1
49663: ST_TO_ADDR
// if p3 = 35 then
49664: LD_VAR 0 3
49668: PUSH
49669: LD_INT 35
49671: EQUAL
49672: IFFALSE 49682
// sTime := true ;
49674: LD_ADDR_EXP 64
49678: PUSH
49679: LD_INT 1
49681: ST_TO_ADDR
// if p3 = 36 then
49682: LD_VAR 0 3
49686: PUSH
49687: LD_INT 36
49689: EQUAL
49690: IFFALSE 49700
// sTools := true ;
49692: LD_ADDR_EXP 65
49696: PUSH
49697: LD_INT 1
49699: ST_TO_ADDR
// if p3 = 101 then
49700: LD_VAR 0 3
49704: PUSH
49705: LD_INT 101
49707: EQUAL
49708: IFFALSE 49718
// sSold := true ;
49710: LD_ADDR_EXP 30
49714: PUSH
49715: LD_INT 1
49717: ST_TO_ADDR
// if p3 = 102 then
49718: LD_VAR 0 3
49722: PUSH
49723: LD_INT 102
49725: EQUAL
49726: IFFALSE 49736
// sDiff := true ;
49728: LD_ADDR_EXP 31
49732: PUSH
49733: LD_INT 1
49735: ST_TO_ADDR
// if p3 = 103 then
49736: LD_VAR 0 3
49740: PUSH
49741: LD_INT 103
49743: EQUAL
49744: IFFALSE 49754
// sFog := true ;
49746: LD_ADDR_EXP 34
49750: PUSH
49751: LD_INT 1
49753: ST_TO_ADDR
// if p3 = 104 then
49754: LD_VAR 0 3
49758: PUSH
49759: LD_INT 104
49761: EQUAL
49762: IFFALSE 49772
// sReset := true ;
49764: LD_ADDR_EXP 35
49768: PUSH
49769: LD_INT 1
49771: ST_TO_ADDR
// if p3 = 105 then
49772: LD_VAR 0 3
49776: PUSH
49777: LD_INT 105
49779: EQUAL
49780: IFFALSE 49790
// sSun := true ;
49782: LD_ADDR_EXP 36
49786: PUSH
49787: LD_INT 1
49789: ST_TO_ADDR
// if p3 = 106 then
49790: LD_VAR 0 3
49794: PUSH
49795: LD_INT 106
49797: EQUAL
49798: IFFALSE 49808
// sTiger := true ;
49800: LD_ADDR_EXP 32
49804: PUSH
49805: LD_INT 1
49807: ST_TO_ADDR
// if p3 = 107 then
49808: LD_VAR 0 3
49812: PUSH
49813: LD_INT 107
49815: EQUAL
49816: IFFALSE 49826
// sBomb := true ;
49818: LD_ADDR_EXP 33
49822: PUSH
49823: LD_INT 1
49825: ST_TO_ADDR
// if p3 = 108 then
49826: LD_VAR 0 3
49830: PUSH
49831: LD_INT 108
49833: EQUAL
49834: IFFALSE 49844
// sWound := true ;
49836: LD_ADDR_EXP 41
49840: PUSH
49841: LD_INT 1
49843: ST_TO_ADDR
// if p3 = 109 then
49844: LD_VAR 0 3
49848: PUSH
49849: LD_INT 109
49851: EQUAL
49852: IFFALSE 49862
// sBetray := true ;
49854: LD_ADDR_EXP 45
49858: PUSH
49859: LD_INT 1
49861: ST_TO_ADDR
// if p3 = 110 then
49862: LD_VAR 0 3
49866: PUSH
49867: LD_INT 110
49869: EQUAL
49870: IFFALSE 49880
// sContamin := true ;
49872: LD_ADDR_EXP 46
49876: PUSH
49877: LD_INT 1
49879: ST_TO_ADDR
// if p3 = 111 then
49880: LD_VAR 0 3
49884: PUSH
49885: LD_INT 111
49887: EQUAL
49888: IFFALSE 49898
// sOil := true ;
49890: LD_ADDR_EXP 48
49894: PUSH
49895: LD_INT 1
49897: ST_TO_ADDR
// if p3 = 112 then
49898: LD_VAR 0 3
49902: PUSH
49903: LD_INT 112
49905: EQUAL
49906: IFFALSE 49916
// sStu := true ;
49908: LD_ADDR_EXP 52
49912: PUSH
49913: LD_INT 1
49915: ST_TO_ADDR
// if p3 = 113 then
49916: LD_VAR 0 3
49920: PUSH
49921: LD_INT 113
49923: EQUAL
49924: IFFALSE 49934
// sBazooka := true ;
49926: LD_ADDR_EXP 55
49930: PUSH
49931: LD_INT 1
49933: ST_TO_ADDR
// if p3 = 114 then
49934: LD_VAR 0 3
49938: PUSH
49939: LD_INT 114
49941: EQUAL
49942: IFFALSE 49952
// sMortar := true ;
49944: LD_ADDR_EXP 56
49948: PUSH
49949: LD_INT 1
49951: ST_TO_ADDR
// if p3 = 115 then
49952: LD_VAR 0 3
49956: PUSH
49957: LD_INT 115
49959: EQUAL
49960: IFFALSE 49970
// sRanger := true ;
49962: LD_ADDR_EXP 66
49966: PUSH
49967: LD_INT 1
49969: ST_TO_ADDR
// if p3 = 116 then
49970: LD_VAR 0 3
49974: PUSH
49975: LD_INT 116
49977: EQUAL
49978: IFFALSE 49988
// sComputer := true ;
49980: LD_ADDR_EXP 67
49984: PUSH
49985: LD_INT 1
49987: ST_TO_ADDR
// if p3 = 117 then
49988: LD_VAR 0 3
49992: PUSH
49993: LD_INT 117
49995: EQUAL
49996: IFFALSE 50006
// s30 := true ;
49998: LD_ADDR_EXP 68
50002: PUSH
50003: LD_INT 1
50005: ST_TO_ADDR
// if p3 = 118 then
50006: LD_VAR 0 3
50010: PUSH
50011: LD_INT 118
50013: EQUAL
50014: IFFALSE 50024
// s60 := true ;
50016: LD_ADDR_EXP 69
50020: PUSH
50021: LD_INT 1
50023: ST_TO_ADDR
// end ; if p2 = hack_mode then
50024: LD_VAR 0 2
50028: PUSH
50029: LD_INT 101
50031: EQUAL
50032: IFFALSE 50160
// begin case p3 of 1 :
50034: LD_VAR 0 3
50038: PUSH
50039: LD_INT 1
50041: DOUBLE
50042: EQUAL
50043: IFTRUE 50047
50045: GO 50054
50047: POP
// hHackUnlimitedResources ; 2 :
50048: CALL 62307 0 0
50052: GO 50160
50054: LD_INT 2
50056: DOUBLE
50057: EQUAL
50058: IFTRUE 50062
50060: GO 50069
50062: POP
// hHackSetLevel10 ; 3 :
50063: CALL 62440 0 0
50067: GO 50160
50069: LD_INT 3
50071: DOUBLE
50072: EQUAL
50073: IFTRUE 50077
50075: GO 50084
50077: POP
// hHackSetLevel10YourUnits ; 4 :
50078: CALL 62525 0 0
50082: GO 50160
50084: LD_INT 4
50086: DOUBLE
50087: EQUAL
50088: IFTRUE 50092
50090: GO 50099
50092: POP
// hHackInvincible ; 5 :
50093: CALL 62973 0 0
50097: GO 50160
50099: LD_INT 5
50101: DOUBLE
50102: EQUAL
50103: IFTRUE 50107
50105: GO 50114
50107: POP
// hHackInvisible ; 6 :
50108: CALL 63084 0 0
50112: GO 50160
50114: LD_INT 6
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 50129
50122: POP
// hHackChangeYourSide ; 7 :
50123: CALL 63141 0 0
50127: GO 50160
50129: LD_INT 7
50131: DOUBLE
50132: EQUAL
50133: IFTRUE 50137
50135: GO 50144
50137: POP
// hHackChangeUnitSide ; 8 :
50138: CALL 63183 0 0
50142: GO 50160
50144: LD_INT 8
50146: DOUBLE
50147: EQUAL
50148: IFTRUE 50152
50150: GO 50159
50152: POP
// hHackFog ; end ;
50153: CALL 63284 0 0
50157: GO 50160
50159: POP
// end ; if p2 = game_save_mode then
50160: LD_VAR 0 2
50164: PUSH
50165: LD_INT 102
50167: EQUAL
50168: IFFALSE 50223
// begin if p3 = 1 then
50170: LD_VAR 0 3
50174: PUSH
50175: LD_INT 1
50177: EQUAL
50178: IFFALSE 50190
// globalGameSaveCounter := p4 ;
50180: LD_ADDR_EXP 12
50184: PUSH
50185: LD_VAR 0 4
50189: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
50190: LD_VAR 0 3
50194: PUSH
50195: LD_INT 2
50197: EQUAL
50198: PUSH
50199: LD_EXP 12
50203: AND
50204: IFFALSE 50223
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50206: LD_STRING setGameSaveCounter(
50208: PUSH
50209: LD_EXP 12
50213: STR
50214: PUSH
50215: LD_STRING )
50217: STR
50218: PPUSH
50219: CALL_OW 559
// end ; end ;
50223: LD_VAR 0 7
50227: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
50228: LD_INT 0
50230: PPUSH
// streamModeActive := false ;
50231: LD_ADDR_EXP 13
50235: PUSH
50236: LD_INT 0
50238: ST_TO_ADDR
// normalCounter := 36 ;
50239: LD_ADDR_EXP 14
50243: PUSH
50244: LD_INT 36
50246: ST_TO_ADDR
// hardcoreCounter := 18 ;
50247: LD_ADDR_EXP 15
50251: PUSH
50252: LD_INT 18
50254: ST_TO_ADDR
// sRocket := false ;
50255: LD_ADDR_EXP 18
50259: PUSH
50260: LD_INT 0
50262: ST_TO_ADDR
// sSpeed := false ;
50263: LD_ADDR_EXP 17
50267: PUSH
50268: LD_INT 0
50270: ST_TO_ADDR
// sEngine := false ;
50271: LD_ADDR_EXP 19
50275: PUSH
50276: LD_INT 0
50278: ST_TO_ADDR
// sSpec := false ;
50279: LD_ADDR_EXP 16
50283: PUSH
50284: LD_INT 0
50286: ST_TO_ADDR
// sLevel := false ;
50287: LD_ADDR_EXP 20
50291: PUSH
50292: LD_INT 0
50294: ST_TO_ADDR
// sArmoury := false ;
50295: LD_ADDR_EXP 21
50299: PUSH
50300: LD_INT 0
50302: ST_TO_ADDR
// sRadar := false ;
50303: LD_ADDR_EXP 22
50307: PUSH
50308: LD_INT 0
50310: ST_TO_ADDR
// sBunker := false ;
50311: LD_ADDR_EXP 23
50315: PUSH
50316: LD_INT 0
50318: ST_TO_ADDR
// sHack := false ;
50319: LD_ADDR_EXP 24
50323: PUSH
50324: LD_INT 0
50326: ST_TO_ADDR
// sFire := false ;
50327: LD_ADDR_EXP 25
50331: PUSH
50332: LD_INT 0
50334: ST_TO_ADDR
// sRefresh := false ;
50335: LD_ADDR_EXP 26
50339: PUSH
50340: LD_INT 0
50342: ST_TO_ADDR
// sExp := false ;
50343: LD_ADDR_EXP 27
50347: PUSH
50348: LD_INT 0
50350: ST_TO_ADDR
// sDepot := false ;
50351: LD_ADDR_EXP 28
50355: PUSH
50356: LD_INT 0
50358: ST_TO_ADDR
// sFlag := false ;
50359: LD_ADDR_EXP 29
50363: PUSH
50364: LD_INT 0
50366: ST_TO_ADDR
// sKamikadze := false ;
50367: LD_ADDR_EXP 37
50371: PUSH
50372: LD_INT 0
50374: ST_TO_ADDR
// sTroll := false ;
50375: LD_ADDR_EXP 38
50379: PUSH
50380: LD_INT 0
50382: ST_TO_ADDR
// sSlow := false ;
50383: LD_ADDR_EXP 39
50387: PUSH
50388: LD_INT 0
50390: ST_TO_ADDR
// sLack := false ;
50391: LD_ADDR_EXP 40
50395: PUSH
50396: LD_INT 0
50398: ST_TO_ADDR
// sTank := false ;
50399: LD_ADDR_EXP 42
50403: PUSH
50404: LD_INT 0
50406: ST_TO_ADDR
// sRemote := false ;
50407: LD_ADDR_EXP 43
50411: PUSH
50412: LD_INT 0
50414: ST_TO_ADDR
// sPowell := false ;
50415: LD_ADDR_EXP 44
50419: PUSH
50420: LD_INT 0
50422: ST_TO_ADDR
// sTeleport := false ;
50423: LD_ADDR_EXP 47
50427: PUSH
50428: LD_INT 0
50430: ST_TO_ADDR
// sOilTower := false ;
50431: LD_ADDR_EXP 49
50435: PUSH
50436: LD_INT 0
50438: ST_TO_ADDR
// sShovel := false ;
50439: LD_ADDR_EXP 50
50443: PUSH
50444: LD_INT 0
50446: ST_TO_ADDR
// sSheik := false ;
50447: LD_ADDR_EXP 51
50451: PUSH
50452: LD_INT 0
50454: ST_TO_ADDR
// sEarthquake := false ;
50455: LD_ADDR_EXP 53
50459: PUSH
50460: LD_INT 0
50462: ST_TO_ADDR
// sAI := false ;
50463: LD_ADDR_EXP 54
50467: PUSH
50468: LD_INT 0
50470: ST_TO_ADDR
// sCargo := false ;
50471: LD_ADDR_EXP 57
50475: PUSH
50476: LD_INT 0
50478: ST_TO_ADDR
// sDLaser := false ;
50479: LD_ADDR_EXP 58
50483: PUSH
50484: LD_INT 0
50486: ST_TO_ADDR
// sExchange := false ;
50487: LD_ADDR_EXP 59
50491: PUSH
50492: LD_INT 0
50494: ST_TO_ADDR
// sFac := false ;
50495: LD_ADDR_EXP 60
50499: PUSH
50500: LD_INT 0
50502: ST_TO_ADDR
// sPower := false ;
50503: LD_ADDR_EXP 61
50507: PUSH
50508: LD_INT 0
50510: ST_TO_ADDR
// sRandom := false ;
50511: LD_ADDR_EXP 62
50515: PUSH
50516: LD_INT 0
50518: ST_TO_ADDR
// sShield := false ;
50519: LD_ADDR_EXP 63
50523: PUSH
50524: LD_INT 0
50526: ST_TO_ADDR
// sTime := false ;
50527: LD_ADDR_EXP 64
50531: PUSH
50532: LD_INT 0
50534: ST_TO_ADDR
// sTools := false ;
50535: LD_ADDR_EXP 65
50539: PUSH
50540: LD_INT 0
50542: ST_TO_ADDR
// sSold := false ;
50543: LD_ADDR_EXP 30
50547: PUSH
50548: LD_INT 0
50550: ST_TO_ADDR
// sDiff := false ;
50551: LD_ADDR_EXP 31
50555: PUSH
50556: LD_INT 0
50558: ST_TO_ADDR
// sFog := false ;
50559: LD_ADDR_EXP 34
50563: PUSH
50564: LD_INT 0
50566: ST_TO_ADDR
// sReset := false ;
50567: LD_ADDR_EXP 35
50571: PUSH
50572: LD_INT 0
50574: ST_TO_ADDR
// sSun := false ;
50575: LD_ADDR_EXP 36
50579: PUSH
50580: LD_INT 0
50582: ST_TO_ADDR
// sTiger := false ;
50583: LD_ADDR_EXP 32
50587: PUSH
50588: LD_INT 0
50590: ST_TO_ADDR
// sBomb := false ;
50591: LD_ADDR_EXP 33
50595: PUSH
50596: LD_INT 0
50598: ST_TO_ADDR
// sWound := false ;
50599: LD_ADDR_EXP 41
50603: PUSH
50604: LD_INT 0
50606: ST_TO_ADDR
// sBetray := false ;
50607: LD_ADDR_EXP 45
50611: PUSH
50612: LD_INT 0
50614: ST_TO_ADDR
// sContamin := false ;
50615: LD_ADDR_EXP 46
50619: PUSH
50620: LD_INT 0
50622: ST_TO_ADDR
// sOil := false ;
50623: LD_ADDR_EXP 48
50627: PUSH
50628: LD_INT 0
50630: ST_TO_ADDR
// sStu := false ;
50631: LD_ADDR_EXP 52
50635: PUSH
50636: LD_INT 0
50638: ST_TO_ADDR
// sBazooka := false ;
50639: LD_ADDR_EXP 55
50643: PUSH
50644: LD_INT 0
50646: ST_TO_ADDR
// sMortar := false ;
50647: LD_ADDR_EXP 56
50651: PUSH
50652: LD_INT 0
50654: ST_TO_ADDR
// sRanger := false ;
50655: LD_ADDR_EXP 66
50659: PUSH
50660: LD_INT 0
50662: ST_TO_ADDR
// sComputer := false ;
50663: LD_ADDR_EXP 67
50667: PUSH
50668: LD_INT 0
50670: ST_TO_ADDR
// s30 := false ;
50671: LD_ADDR_EXP 68
50675: PUSH
50676: LD_INT 0
50678: ST_TO_ADDR
// s60 := false ;
50679: LD_ADDR_EXP 69
50683: PUSH
50684: LD_INT 0
50686: ST_TO_ADDR
// end ;
50687: LD_VAR 0 1
50691: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50692: LD_INT 0
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
// result := [ ] ;
50701: LD_ADDR_VAR 0 2
50705: PUSH
50706: EMPTY
50707: ST_TO_ADDR
// if campaign_id = 1 then
50708: LD_OWVAR 69
50712: PUSH
50713: LD_INT 1
50715: EQUAL
50716: IFFALSE 53882
// begin case mission_number of 1 :
50718: LD_OWVAR 70
50722: PUSH
50723: LD_INT 1
50725: DOUBLE
50726: EQUAL
50727: IFTRUE 50731
50729: GO 50807
50731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50732: LD_ADDR_VAR 0 2
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 4
50742: PUSH
50743: LD_INT 11
50745: PUSH
50746: LD_INT 12
50748: PUSH
50749: LD_INT 15
50751: PUSH
50752: LD_INT 16
50754: PUSH
50755: LD_INT 22
50757: PUSH
50758: LD_INT 23
50760: PUSH
50761: LD_INT 26
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 101
50777: PUSH
50778: LD_INT 102
50780: PUSH
50781: LD_INT 106
50783: PUSH
50784: LD_INT 116
50786: PUSH
50787: LD_INT 117
50789: PUSH
50790: LD_INT 118
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: ST_TO_ADDR
50805: GO 53880
50807: LD_INT 2
50809: DOUBLE
50810: EQUAL
50811: IFTRUE 50815
50813: GO 50899
50815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50816: LD_ADDR_VAR 0 2
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 4
50826: PUSH
50827: LD_INT 11
50829: PUSH
50830: LD_INT 12
50832: PUSH
50833: LD_INT 15
50835: PUSH
50836: LD_INT 16
50838: PUSH
50839: LD_INT 22
50841: PUSH
50842: LD_INT 23
50844: PUSH
50845: LD_INT 26
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 101
50861: PUSH
50862: LD_INT 102
50864: PUSH
50865: LD_INT 105
50867: PUSH
50868: LD_INT 106
50870: PUSH
50871: LD_INT 108
50873: PUSH
50874: LD_INT 116
50876: PUSH
50877: LD_INT 117
50879: PUSH
50880: LD_INT 118
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: ST_TO_ADDR
50897: GO 53880
50899: LD_INT 3
50901: DOUBLE
50902: EQUAL
50903: IFTRUE 50907
50905: GO 50995
50907: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50908: LD_ADDR_VAR 0 2
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 4
50918: PUSH
50919: LD_INT 5
50921: PUSH
50922: LD_INT 11
50924: PUSH
50925: LD_INT 12
50927: PUSH
50928: LD_INT 15
50930: PUSH
50931: LD_INT 16
50933: PUSH
50934: LD_INT 22
50936: PUSH
50937: LD_INT 26
50939: PUSH
50940: LD_INT 36
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 101
50957: PUSH
50958: LD_INT 102
50960: PUSH
50961: LD_INT 105
50963: PUSH
50964: LD_INT 106
50966: PUSH
50967: LD_INT 108
50969: PUSH
50970: LD_INT 116
50972: PUSH
50973: LD_INT 117
50975: PUSH
50976: LD_INT 118
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: ST_TO_ADDR
50993: GO 53880
50995: LD_INT 4
50997: DOUBLE
50998: EQUAL
50999: IFTRUE 51003
51001: GO 51099
51003: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51004: LD_ADDR_VAR 0 2
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: LD_INT 4
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: LD_INT 8
51020: PUSH
51021: LD_INT 11
51023: PUSH
51024: LD_INT 12
51026: PUSH
51027: LD_INT 15
51029: PUSH
51030: LD_INT 16
51032: PUSH
51033: LD_INT 22
51035: PUSH
51036: LD_INT 23
51038: PUSH
51039: LD_INT 26
51041: PUSH
51042: LD_INT 36
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 101
51061: PUSH
51062: LD_INT 102
51064: PUSH
51065: LD_INT 105
51067: PUSH
51068: LD_INT 106
51070: PUSH
51071: LD_INT 108
51073: PUSH
51074: LD_INT 116
51076: PUSH
51077: LD_INT 117
51079: PUSH
51080: LD_INT 118
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: ST_TO_ADDR
51097: GO 53880
51099: LD_INT 5
51101: DOUBLE
51102: EQUAL
51103: IFTRUE 51107
51105: GO 51219
51107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51108: LD_ADDR_VAR 0 2
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 4
51118: PUSH
51119: LD_INT 5
51121: PUSH
51122: LD_INT 6
51124: PUSH
51125: LD_INT 8
51127: PUSH
51128: LD_INT 11
51130: PUSH
51131: LD_INT 12
51133: PUSH
51134: LD_INT 15
51136: PUSH
51137: LD_INT 16
51139: PUSH
51140: LD_INT 22
51142: PUSH
51143: LD_INT 23
51145: PUSH
51146: LD_INT 25
51148: PUSH
51149: LD_INT 26
51151: PUSH
51152: LD_INT 36
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 101
51173: PUSH
51174: LD_INT 102
51176: PUSH
51177: LD_INT 105
51179: PUSH
51180: LD_INT 106
51182: PUSH
51183: LD_INT 108
51185: PUSH
51186: LD_INT 109
51188: PUSH
51189: LD_INT 112
51191: PUSH
51192: LD_INT 116
51194: PUSH
51195: LD_INT 117
51197: PUSH
51198: LD_INT 118
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: ST_TO_ADDR
51217: GO 53880
51219: LD_INT 6
51221: DOUBLE
51222: EQUAL
51223: IFTRUE 51227
51225: GO 51359
51227: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
51228: LD_ADDR_VAR 0 2
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 4
51238: PUSH
51239: LD_INT 5
51241: PUSH
51242: LD_INT 6
51244: PUSH
51245: LD_INT 8
51247: PUSH
51248: LD_INT 11
51250: PUSH
51251: LD_INT 12
51253: PUSH
51254: LD_INT 15
51256: PUSH
51257: LD_INT 16
51259: PUSH
51260: LD_INT 20
51262: PUSH
51263: LD_INT 21
51265: PUSH
51266: LD_INT 22
51268: PUSH
51269: LD_INT 23
51271: PUSH
51272: LD_INT 25
51274: PUSH
51275: LD_INT 26
51277: PUSH
51278: LD_INT 30
51280: PUSH
51281: LD_INT 31
51283: PUSH
51284: LD_INT 32
51286: PUSH
51287: LD_INT 36
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 101
51313: PUSH
51314: LD_INT 102
51316: PUSH
51317: LD_INT 105
51319: PUSH
51320: LD_INT 106
51322: PUSH
51323: LD_INT 108
51325: PUSH
51326: LD_INT 109
51328: PUSH
51329: LD_INT 112
51331: PUSH
51332: LD_INT 116
51334: PUSH
51335: LD_INT 117
51337: PUSH
51338: LD_INT 118
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: ST_TO_ADDR
51357: GO 53880
51359: LD_INT 7
51361: DOUBLE
51362: EQUAL
51363: IFTRUE 51367
51365: GO 51479
51367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51368: LD_ADDR_VAR 0 2
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: LD_INT 5
51381: PUSH
51382: LD_INT 7
51384: PUSH
51385: LD_INT 11
51387: PUSH
51388: LD_INT 12
51390: PUSH
51391: LD_INT 15
51393: PUSH
51394: LD_INT 16
51396: PUSH
51397: LD_INT 20
51399: PUSH
51400: LD_INT 21
51402: PUSH
51403: LD_INT 22
51405: PUSH
51406: LD_INT 23
51408: PUSH
51409: LD_INT 25
51411: PUSH
51412: LD_INT 26
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 101
51433: PUSH
51434: LD_INT 102
51436: PUSH
51437: LD_INT 103
51439: PUSH
51440: LD_INT 105
51442: PUSH
51443: LD_INT 106
51445: PUSH
51446: LD_INT 108
51448: PUSH
51449: LD_INT 112
51451: PUSH
51452: LD_INT 116
51454: PUSH
51455: LD_INT 117
51457: PUSH
51458: LD_INT 118
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: ST_TO_ADDR
51477: GO 53880
51479: LD_INT 8
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51487
51485: GO 51627
51487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51488: LD_ADDR_VAR 0 2
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 4
51498: PUSH
51499: LD_INT 5
51501: PUSH
51502: LD_INT 6
51504: PUSH
51505: LD_INT 7
51507: PUSH
51508: LD_INT 8
51510: PUSH
51511: LD_INT 11
51513: PUSH
51514: LD_INT 12
51516: PUSH
51517: LD_INT 15
51519: PUSH
51520: LD_INT 16
51522: PUSH
51523: LD_INT 20
51525: PUSH
51526: LD_INT 21
51528: PUSH
51529: LD_INT 22
51531: PUSH
51532: LD_INT 23
51534: PUSH
51535: LD_INT 25
51537: PUSH
51538: LD_INT 26
51540: PUSH
51541: LD_INT 30
51543: PUSH
51544: LD_INT 31
51546: PUSH
51547: LD_INT 32
51549: PUSH
51550: LD_INT 36
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 101
51577: PUSH
51578: LD_INT 102
51580: PUSH
51581: LD_INT 103
51583: PUSH
51584: LD_INT 105
51586: PUSH
51587: LD_INT 106
51589: PUSH
51590: LD_INT 108
51592: PUSH
51593: LD_INT 109
51595: PUSH
51596: LD_INT 112
51598: PUSH
51599: LD_INT 116
51601: PUSH
51602: LD_INT 117
51604: PUSH
51605: LD_INT 118
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: ST_TO_ADDR
51625: GO 53880
51627: LD_INT 9
51629: DOUBLE
51630: EQUAL
51631: IFTRUE 51635
51633: GO 51783
51635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51636: LD_ADDR_VAR 0 2
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 4
51646: PUSH
51647: LD_INT 5
51649: PUSH
51650: LD_INT 6
51652: PUSH
51653: LD_INT 7
51655: PUSH
51656: LD_INT 8
51658: PUSH
51659: LD_INT 11
51661: PUSH
51662: LD_INT 12
51664: PUSH
51665: LD_INT 15
51667: PUSH
51668: LD_INT 16
51670: PUSH
51671: LD_INT 20
51673: PUSH
51674: LD_INT 21
51676: PUSH
51677: LD_INT 22
51679: PUSH
51680: LD_INT 23
51682: PUSH
51683: LD_INT 25
51685: PUSH
51686: LD_INT 26
51688: PUSH
51689: LD_INT 28
51691: PUSH
51692: LD_INT 30
51694: PUSH
51695: LD_INT 31
51697: PUSH
51698: LD_INT 32
51700: PUSH
51701: LD_INT 36
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 101
51729: PUSH
51730: LD_INT 102
51732: PUSH
51733: LD_INT 103
51735: PUSH
51736: LD_INT 105
51738: PUSH
51739: LD_INT 106
51741: PUSH
51742: LD_INT 108
51744: PUSH
51745: LD_INT 109
51747: PUSH
51748: LD_INT 112
51750: PUSH
51751: LD_INT 114
51753: PUSH
51754: LD_INT 116
51756: PUSH
51757: LD_INT 117
51759: PUSH
51760: LD_INT 118
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: ST_TO_ADDR
51781: GO 53880
51783: LD_INT 10
51785: DOUBLE
51786: EQUAL
51787: IFTRUE 51791
51789: GO 51987
51791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51792: LD_ADDR_VAR 0 2
51796: PUSH
51797: LD_INT 2
51799: PUSH
51800: LD_INT 4
51802: PUSH
51803: LD_INT 5
51805: PUSH
51806: LD_INT 6
51808: PUSH
51809: LD_INT 7
51811: PUSH
51812: LD_INT 8
51814: PUSH
51815: LD_INT 9
51817: PUSH
51818: LD_INT 10
51820: PUSH
51821: LD_INT 11
51823: PUSH
51824: LD_INT 12
51826: PUSH
51827: LD_INT 13
51829: PUSH
51830: LD_INT 14
51832: PUSH
51833: LD_INT 15
51835: PUSH
51836: LD_INT 16
51838: PUSH
51839: LD_INT 17
51841: PUSH
51842: LD_INT 18
51844: PUSH
51845: LD_INT 19
51847: PUSH
51848: LD_INT 20
51850: PUSH
51851: LD_INT 21
51853: PUSH
51854: LD_INT 22
51856: PUSH
51857: LD_INT 23
51859: PUSH
51860: LD_INT 24
51862: PUSH
51863: LD_INT 25
51865: PUSH
51866: LD_INT 26
51868: PUSH
51869: LD_INT 28
51871: PUSH
51872: LD_INT 30
51874: PUSH
51875: LD_INT 31
51877: PUSH
51878: LD_INT 32
51880: PUSH
51881: LD_INT 36
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 101
51917: PUSH
51918: LD_INT 102
51920: PUSH
51921: LD_INT 103
51923: PUSH
51924: LD_INT 104
51926: PUSH
51927: LD_INT 105
51929: PUSH
51930: LD_INT 106
51932: PUSH
51933: LD_INT 107
51935: PUSH
51936: LD_INT 108
51938: PUSH
51939: LD_INT 109
51941: PUSH
51942: LD_INT 110
51944: PUSH
51945: LD_INT 111
51947: PUSH
51948: LD_INT 112
51950: PUSH
51951: LD_INT 114
51953: PUSH
51954: LD_INT 116
51956: PUSH
51957: LD_INT 117
51959: PUSH
51960: LD_INT 118
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: ST_TO_ADDR
51985: GO 53880
51987: LD_INT 11
51989: DOUBLE
51990: EQUAL
51991: IFTRUE 51995
51993: GO 52199
51995: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51996: LD_ADDR_VAR 0 2
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: LD_INT 5
52012: PUSH
52013: LD_INT 6
52015: PUSH
52016: LD_INT 7
52018: PUSH
52019: LD_INT 8
52021: PUSH
52022: LD_INT 9
52024: PUSH
52025: LD_INT 10
52027: PUSH
52028: LD_INT 11
52030: PUSH
52031: LD_INT 12
52033: PUSH
52034: LD_INT 13
52036: PUSH
52037: LD_INT 14
52039: PUSH
52040: LD_INT 15
52042: PUSH
52043: LD_INT 16
52045: PUSH
52046: LD_INT 17
52048: PUSH
52049: LD_INT 18
52051: PUSH
52052: LD_INT 19
52054: PUSH
52055: LD_INT 20
52057: PUSH
52058: LD_INT 21
52060: PUSH
52061: LD_INT 22
52063: PUSH
52064: LD_INT 23
52066: PUSH
52067: LD_INT 24
52069: PUSH
52070: LD_INT 25
52072: PUSH
52073: LD_INT 26
52075: PUSH
52076: LD_INT 28
52078: PUSH
52079: LD_INT 30
52081: PUSH
52082: LD_INT 31
52084: PUSH
52085: LD_INT 32
52087: PUSH
52088: LD_INT 34
52090: PUSH
52091: LD_INT 36
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 101
52129: PUSH
52130: LD_INT 102
52132: PUSH
52133: LD_INT 103
52135: PUSH
52136: LD_INT 104
52138: PUSH
52139: LD_INT 105
52141: PUSH
52142: LD_INT 106
52144: PUSH
52145: LD_INT 107
52147: PUSH
52148: LD_INT 108
52150: PUSH
52151: LD_INT 109
52153: PUSH
52154: LD_INT 110
52156: PUSH
52157: LD_INT 111
52159: PUSH
52160: LD_INT 112
52162: PUSH
52163: LD_INT 114
52165: PUSH
52166: LD_INT 116
52168: PUSH
52169: LD_INT 117
52171: PUSH
52172: LD_INT 118
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: ST_TO_ADDR
52197: GO 53880
52199: LD_INT 12
52201: DOUBLE
52202: EQUAL
52203: IFTRUE 52207
52205: GO 52427
52207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
52208: LD_ADDR_VAR 0 2
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 4
52224: PUSH
52225: LD_INT 5
52227: PUSH
52228: LD_INT 6
52230: PUSH
52231: LD_INT 7
52233: PUSH
52234: LD_INT 8
52236: PUSH
52237: LD_INT 9
52239: PUSH
52240: LD_INT 10
52242: PUSH
52243: LD_INT 11
52245: PUSH
52246: LD_INT 12
52248: PUSH
52249: LD_INT 13
52251: PUSH
52252: LD_INT 14
52254: PUSH
52255: LD_INT 15
52257: PUSH
52258: LD_INT 16
52260: PUSH
52261: LD_INT 17
52263: PUSH
52264: LD_INT 18
52266: PUSH
52267: LD_INT 19
52269: PUSH
52270: LD_INT 20
52272: PUSH
52273: LD_INT 21
52275: PUSH
52276: LD_INT 22
52278: PUSH
52279: LD_INT 23
52281: PUSH
52282: LD_INT 24
52284: PUSH
52285: LD_INT 25
52287: PUSH
52288: LD_INT 26
52290: PUSH
52291: LD_INT 27
52293: PUSH
52294: LD_INT 28
52296: PUSH
52297: LD_INT 30
52299: PUSH
52300: LD_INT 31
52302: PUSH
52303: LD_INT 32
52305: PUSH
52306: LD_INT 33
52308: PUSH
52309: LD_INT 34
52311: PUSH
52312: LD_INT 36
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 101
52353: PUSH
52354: LD_INT 102
52356: PUSH
52357: LD_INT 103
52359: PUSH
52360: LD_INT 104
52362: PUSH
52363: LD_INT 105
52365: PUSH
52366: LD_INT 106
52368: PUSH
52369: LD_INT 107
52371: PUSH
52372: LD_INT 108
52374: PUSH
52375: LD_INT 109
52377: PUSH
52378: LD_INT 110
52380: PUSH
52381: LD_INT 111
52383: PUSH
52384: LD_INT 112
52386: PUSH
52387: LD_INT 113
52389: PUSH
52390: LD_INT 114
52392: PUSH
52393: LD_INT 116
52395: PUSH
52396: LD_INT 117
52398: PUSH
52399: LD_INT 118
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: ST_TO_ADDR
52425: GO 53880
52427: LD_INT 13
52429: DOUBLE
52430: EQUAL
52431: IFTRUE 52435
52433: GO 52643
52435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52436: LD_ADDR_VAR 0 2
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: LD_INT 4
52452: PUSH
52453: LD_INT 5
52455: PUSH
52456: LD_INT 8
52458: PUSH
52459: LD_INT 9
52461: PUSH
52462: LD_INT 10
52464: PUSH
52465: LD_INT 11
52467: PUSH
52468: LD_INT 12
52470: PUSH
52471: LD_INT 14
52473: PUSH
52474: LD_INT 15
52476: PUSH
52477: LD_INT 16
52479: PUSH
52480: LD_INT 17
52482: PUSH
52483: LD_INT 18
52485: PUSH
52486: LD_INT 19
52488: PUSH
52489: LD_INT 20
52491: PUSH
52492: LD_INT 21
52494: PUSH
52495: LD_INT 22
52497: PUSH
52498: LD_INT 23
52500: PUSH
52501: LD_INT 24
52503: PUSH
52504: LD_INT 25
52506: PUSH
52507: LD_INT 26
52509: PUSH
52510: LD_INT 27
52512: PUSH
52513: LD_INT 28
52515: PUSH
52516: LD_INT 30
52518: PUSH
52519: LD_INT 31
52521: PUSH
52522: LD_INT 32
52524: PUSH
52525: LD_INT 33
52527: PUSH
52528: LD_INT 34
52530: PUSH
52531: LD_INT 36
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 101
52569: PUSH
52570: LD_INT 102
52572: PUSH
52573: LD_INT 103
52575: PUSH
52576: LD_INT 104
52578: PUSH
52579: LD_INT 105
52581: PUSH
52582: LD_INT 106
52584: PUSH
52585: LD_INT 107
52587: PUSH
52588: LD_INT 108
52590: PUSH
52591: LD_INT 109
52593: PUSH
52594: LD_INT 110
52596: PUSH
52597: LD_INT 111
52599: PUSH
52600: LD_INT 112
52602: PUSH
52603: LD_INT 113
52605: PUSH
52606: LD_INT 114
52608: PUSH
52609: LD_INT 116
52611: PUSH
52612: LD_INT 117
52614: PUSH
52615: LD_INT 118
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: ST_TO_ADDR
52641: GO 53880
52643: LD_INT 14
52645: DOUBLE
52646: EQUAL
52647: IFTRUE 52651
52649: GO 52875
52651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52652: LD_ADDR_VAR 0 2
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: LD_INT 4
52668: PUSH
52669: LD_INT 5
52671: PUSH
52672: LD_INT 6
52674: PUSH
52675: LD_INT 7
52677: PUSH
52678: LD_INT 8
52680: PUSH
52681: LD_INT 9
52683: PUSH
52684: LD_INT 10
52686: PUSH
52687: LD_INT 11
52689: PUSH
52690: LD_INT 12
52692: PUSH
52693: LD_INT 13
52695: PUSH
52696: LD_INT 14
52698: PUSH
52699: LD_INT 15
52701: PUSH
52702: LD_INT 16
52704: PUSH
52705: LD_INT 17
52707: PUSH
52708: LD_INT 18
52710: PUSH
52711: LD_INT 19
52713: PUSH
52714: LD_INT 20
52716: PUSH
52717: LD_INT 21
52719: PUSH
52720: LD_INT 22
52722: PUSH
52723: LD_INT 23
52725: PUSH
52726: LD_INT 24
52728: PUSH
52729: LD_INT 25
52731: PUSH
52732: LD_INT 26
52734: PUSH
52735: LD_INT 27
52737: PUSH
52738: LD_INT 28
52740: PUSH
52741: LD_INT 29
52743: PUSH
52744: LD_INT 30
52746: PUSH
52747: LD_INT 31
52749: PUSH
52750: LD_INT 32
52752: PUSH
52753: LD_INT 33
52755: PUSH
52756: LD_INT 34
52758: PUSH
52759: LD_INT 36
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 101
52801: PUSH
52802: LD_INT 102
52804: PUSH
52805: LD_INT 103
52807: PUSH
52808: LD_INT 104
52810: PUSH
52811: LD_INT 105
52813: PUSH
52814: LD_INT 106
52816: PUSH
52817: LD_INT 107
52819: PUSH
52820: LD_INT 108
52822: PUSH
52823: LD_INT 109
52825: PUSH
52826: LD_INT 110
52828: PUSH
52829: LD_INT 111
52831: PUSH
52832: LD_INT 112
52834: PUSH
52835: LD_INT 113
52837: PUSH
52838: LD_INT 114
52840: PUSH
52841: LD_INT 116
52843: PUSH
52844: LD_INT 117
52846: PUSH
52847: LD_INT 118
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: ST_TO_ADDR
52873: GO 53880
52875: LD_INT 15
52877: DOUBLE
52878: EQUAL
52879: IFTRUE 52883
52881: GO 53107
52883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52884: LD_ADDR_VAR 0 2
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 4
52900: PUSH
52901: LD_INT 5
52903: PUSH
52904: LD_INT 6
52906: PUSH
52907: LD_INT 7
52909: PUSH
52910: LD_INT 8
52912: PUSH
52913: LD_INT 9
52915: PUSH
52916: LD_INT 10
52918: PUSH
52919: LD_INT 11
52921: PUSH
52922: LD_INT 12
52924: PUSH
52925: LD_INT 13
52927: PUSH
52928: LD_INT 14
52930: PUSH
52931: LD_INT 15
52933: PUSH
52934: LD_INT 16
52936: PUSH
52937: LD_INT 17
52939: PUSH
52940: LD_INT 18
52942: PUSH
52943: LD_INT 19
52945: PUSH
52946: LD_INT 20
52948: PUSH
52949: LD_INT 21
52951: PUSH
52952: LD_INT 22
52954: PUSH
52955: LD_INT 23
52957: PUSH
52958: LD_INT 24
52960: PUSH
52961: LD_INT 25
52963: PUSH
52964: LD_INT 26
52966: PUSH
52967: LD_INT 27
52969: PUSH
52970: LD_INT 28
52972: PUSH
52973: LD_INT 29
52975: PUSH
52976: LD_INT 30
52978: PUSH
52979: LD_INT 31
52981: PUSH
52982: LD_INT 32
52984: PUSH
52985: LD_INT 33
52987: PUSH
52988: LD_INT 34
52990: PUSH
52991: LD_INT 36
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 101
53033: PUSH
53034: LD_INT 102
53036: PUSH
53037: LD_INT 103
53039: PUSH
53040: LD_INT 104
53042: PUSH
53043: LD_INT 105
53045: PUSH
53046: LD_INT 106
53048: PUSH
53049: LD_INT 107
53051: PUSH
53052: LD_INT 108
53054: PUSH
53055: LD_INT 109
53057: PUSH
53058: LD_INT 110
53060: PUSH
53061: LD_INT 111
53063: PUSH
53064: LD_INT 112
53066: PUSH
53067: LD_INT 113
53069: PUSH
53070: LD_INT 114
53072: PUSH
53073: LD_INT 116
53075: PUSH
53076: LD_INT 117
53078: PUSH
53079: LD_INT 118
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: ST_TO_ADDR
53105: GO 53880
53107: LD_INT 16
53109: DOUBLE
53110: EQUAL
53111: IFTRUE 53115
53113: GO 53251
53115: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53116: LD_ADDR_VAR 0 2
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 4
53126: PUSH
53127: LD_INT 5
53129: PUSH
53130: LD_INT 7
53132: PUSH
53133: LD_INT 11
53135: PUSH
53136: LD_INT 12
53138: PUSH
53139: LD_INT 15
53141: PUSH
53142: LD_INT 16
53144: PUSH
53145: LD_INT 20
53147: PUSH
53148: LD_INT 21
53150: PUSH
53151: LD_INT 22
53153: PUSH
53154: LD_INT 23
53156: PUSH
53157: LD_INT 25
53159: PUSH
53160: LD_INT 26
53162: PUSH
53163: LD_INT 30
53165: PUSH
53166: LD_INT 31
53168: PUSH
53169: LD_INT 32
53171: PUSH
53172: LD_INT 33
53174: PUSH
53175: LD_INT 34
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 101
53201: PUSH
53202: LD_INT 102
53204: PUSH
53205: LD_INT 103
53207: PUSH
53208: LD_INT 106
53210: PUSH
53211: LD_INT 108
53213: PUSH
53214: LD_INT 112
53216: PUSH
53217: LD_INT 113
53219: PUSH
53220: LD_INT 114
53222: PUSH
53223: LD_INT 116
53225: PUSH
53226: LD_INT 117
53228: PUSH
53229: LD_INT 118
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: ST_TO_ADDR
53249: GO 53880
53251: LD_INT 17
53253: DOUBLE
53254: EQUAL
53255: IFTRUE 53259
53257: GO 53483
53259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53260: LD_ADDR_VAR 0 2
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: LD_INT 4
53276: PUSH
53277: LD_INT 5
53279: PUSH
53280: LD_INT 6
53282: PUSH
53283: LD_INT 7
53285: PUSH
53286: LD_INT 8
53288: PUSH
53289: LD_INT 9
53291: PUSH
53292: LD_INT 10
53294: PUSH
53295: LD_INT 11
53297: PUSH
53298: LD_INT 12
53300: PUSH
53301: LD_INT 13
53303: PUSH
53304: LD_INT 14
53306: PUSH
53307: LD_INT 15
53309: PUSH
53310: LD_INT 16
53312: PUSH
53313: LD_INT 17
53315: PUSH
53316: LD_INT 18
53318: PUSH
53319: LD_INT 19
53321: PUSH
53322: LD_INT 20
53324: PUSH
53325: LD_INT 21
53327: PUSH
53328: LD_INT 22
53330: PUSH
53331: LD_INT 23
53333: PUSH
53334: LD_INT 24
53336: PUSH
53337: LD_INT 25
53339: PUSH
53340: LD_INT 26
53342: PUSH
53343: LD_INT 27
53345: PUSH
53346: LD_INT 28
53348: PUSH
53349: LD_INT 29
53351: PUSH
53352: LD_INT 30
53354: PUSH
53355: LD_INT 31
53357: PUSH
53358: LD_INT 32
53360: PUSH
53361: LD_INT 33
53363: PUSH
53364: LD_INT 34
53366: PUSH
53367: LD_INT 36
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 101
53409: PUSH
53410: LD_INT 102
53412: PUSH
53413: LD_INT 103
53415: PUSH
53416: LD_INT 104
53418: PUSH
53419: LD_INT 105
53421: PUSH
53422: LD_INT 106
53424: PUSH
53425: LD_INT 107
53427: PUSH
53428: LD_INT 108
53430: PUSH
53431: LD_INT 109
53433: PUSH
53434: LD_INT 110
53436: PUSH
53437: LD_INT 111
53439: PUSH
53440: LD_INT 112
53442: PUSH
53443: LD_INT 113
53445: PUSH
53446: LD_INT 114
53448: PUSH
53449: LD_INT 116
53451: PUSH
53452: LD_INT 117
53454: PUSH
53455: LD_INT 118
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: ST_TO_ADDR
53481: GO 53880
53483: LD_INT 18
53485: DOUBLE
53486: EQUAL
53487: IFTRUE 53491
53489: GO 53639
53491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53492: LD_ADDR_VAR 0 2
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: LD_INT 4
53502: PUSH
53503: LD_INT 5
53505: PUSH
53506: LD_INT 7
53508: PUSH
53509: LD_INT 11
53511: PUSH
53512: LD_INT 12
53514: PUSH
53515: LD_INT 15
53517: PUSH
53518: LD_INT 16
53520: PUSH
53521: LD_INT 20
53523: PUSH
53524: LD_INT 21
53526: PUSH
53527: LD_INT 22
53529: PUSH
53530: LD_INT 23
53532: PUSH
53533: LD_INT 25
53535: PUSH
53536: LD_INT 26
53538: PUSH
53539: LD_INT 30
53541: PUSH
53542: LD_INT 31
53544: PUSH
53545: LD_INT 32
53547: PUSH
53548: LD_INT 33
53550: PUSH
53551: LD_INT 34
53553: PUSH
53554: LD_INT 35
53556: PUSH
53557: LD_INT 36
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 101
53585: PUSH
53586: LD_INT 102
53588: PUSH
53589: LD_INT 103
53591: PUSH
53592: LD_INT 106
53594: PUSH
53595: LD_INT 108
53597: PUSH
53598: LD_INT 112
53600: PUSH
53601: LD_INT 113
53603: PUSH
53604: LD_INT 114
53606: PUSH
53607: LD_INT 115
53609: PUSH
53610: LD_INT 116
53612: PUSH
53613: LD_INT 117
53615: PUSH
53616: LD_INT 118
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: ST_TO_ADDR
53637: GO 53880
53639: LD_INT 19
53641: DOUBLE
53642: EQUAL
53643: IFTRUE 53647
53645: GO 53879
53647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53648: LD_ADDR_VAR 0 2
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: LD_INT 5
53667: PUSH
53668: LD_INT 6
53670: PUSH
53671: LD_INT 7
53673: PUSH
53674: LD_INT 8
53676: PUSH
53677: LD_INT 9
53679: PUSH
53680: LD_INT 10
53682: PUSH
53683: LD_INT 11
53685: PUSH
53686: LD_INT 12
53688: PUSH
53689: LD_INT 13
53691: PUSH
53692: LD_INT 14
53694: PUSH
53695: LD_INT 15
53697: PUSH
53698: LD_INT 16
53700: PUSH
53701: LD_INT 17
53703: PUSH
53704: LD_INT 18
53706: PUSH
53707: LD_INT 19
53709: PUSH
53710: LD_INT 20
53712: PUSH
53713: LD_INT 21
53715: PUSH
53716: LD_INT 22
53718: PUSH
53719: LD_INT 23
53721: PUSH
53722: LD_INT 24
53724: PUSH
53725: LD_INT 25
53727: PUSH
53728: LD_INT 26
53730: PUSH
53731: LD_INT 27
53733: PUSH
53734: LD_INT 28
53736: PUSH
53737: LD_INT 29
53739: PUSH
53740: LD_INT 30
53742: PUSH
53743: LD_INT 31
53745: PUSH
53746: LD_INT 32
53748: PUSH
53749: LD_INT 33
53751: PUSH
53752: LD_INT 34
53754: PUSH
53755: LD_INT 35
53757: PUSH
53758: LD_INT 36
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 101
53801: PUSH
53802: LD_INT 102
53804: PUSH
53805: LD_INT 103
53807: PUSH
53808: LD_INT 104
53810: PUSH
53811: LD_INT 105
53813: PUSH
53814: LD_INT 106
53816: PUSH
53817: LD_INT 107
53819: PUSH
53820: LD_INT 108
53822: PUSH
53823: LD_INT 109
53825: PUSH
53826: LD_INT 110
53828: PUSH
53829: LD_INT 111
53831: PUSH
53832: LD_INT 112
53834: PUSH
53835: LD_INT 113
53837: PUSH
53838: LD_INT 114
53840: PUSH
53841: LD_INT 115
53843: PUSH
53844: LD_INT 116
53846: PUSH
53847: LD_INT 117
53849: PUSH
53850: LD_INT 118
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: ST_TO_ADDR
53877: GO 53880
53879: POP
// end else
53880: GO 54111
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53882: LD_ADDR_VAR 0 2
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: LD_INT 6
53904: PUSH
53905: LD_INT 7
53907: PUSH
53908: LD_INT 8
53910: PUSH
53911: LD_INT 9
53913: PUSH
53914: LD_INT 10
53916: PUSH
53917: LD_INT 11
53919: PUSH
53920: LD_INT 12
53922: PUSH
53923: LD_INT 13
53925: PUSH
53926: LD_INT 14
53928: PUSH
53929: LD_INT 15
53931: PUSH
53932: LD_INT 16
53934: PUSH
53935: LD_INT 17
53937: PUSH
53938: LD_INT 18
53940: PUSH
53941: LD_INT 19
53943: PUSH
53944: LD_INT 20
53946: PUSH
53947: LD_INT 21
53949: PUSH
53950: LD_INT 22
53952: PUSH
53953: LD_INT 23
53955: PUSH
53956: LD_INT 24
53958: PUSH
53959: LD_INT 25
53961: PUSH
53962: LD_INT 26
53964: PUSH
53965: LD_INT 27
53967: PUSH
53968: LD_INT 28
53970: PUSH
53971: LD_INT 29
53973: PUSH
53974: LD_INT 30
53976: PUSH
53977: LD_INT 31
53979: PUSH
53980: LD_INT 32
53982: PUSH
53983: LD_INT 33
53985: PUSH
53986: LD_INT 34
53988: PUSH
53989: LD_INT 35
53991: PUSH
53992: LD_INT 36
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 101
54035: PUSH
54036: LD_INT 102
54038: PUSH
54039: LD_INT 103
54041: PUSH
54042: LD_INT 104
54044: PUSH
54045: LD_INT 105
54047: PUSH
54048: LD_INT 106
54050: PUSH
54051: LD_INT 107
54053: PUSH
54054: LD_INT 108
54056: PUSH
54057: LD_INT 109
54059: PUSH
54060: LD_INT 110
54062: PUSH
54063: LD_INT 111
54065: PUSH
54066: LD_INT 112
54068: PUSH
54069: LD_INT 113
54071: PUSH
54072: LD_INT 114
54074: PUSH
54075: LD_INT 115
54077: PUSH
54078: LD_INT 116
54080: PUSH
54081: LD_INT 117
54083: PUSH
54084: LD_INT 118
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// if result then
54111: LD_VAR 0 2
54115: IFFALSE 54901
// begin normal :=  ;
54117: LD_ADDR_VAR 0 5
54121: PUSH
54122: LD_STRING 
54124: ST_TO_ADDR
// hardcore :=  ;
54125: LD_ADDR_VAR 0 6
54129: PUSH
54130: LD_STRING 
54132: ST_TO_ADDR
// active :=  ;
54133: LD_ADDR_VAR 0 7
54137: PUSH
54138: LD_STRING 
54140: ST_TO_ADDR
// for i = 1 to normalCounter do
54141: LD_ADDR_VAR 0 8
54145: PUSH
54146: DOUBLE
54147: LD_INT 1
54149: DEC
54150: ST_TO_ADDR
54151: LD_EXP 14
54155: PUSH
54156: FOR_TO
54157: IFFALSE 54258
// begin tmp := 0 ;
54159: LD_ADDR_VAR 0 3
54163: PUSH
54164: LD_STRING 0
54166: ST_TO_ADDR
// if result [ 1 ] then
54167: LD_VAR 0 2
54171: PUSH
54172: LD_INT 1
54174: ARRAY
54175: IFFALSE 54240
// if result [ 1 ] [ 1 ] = i then
54177: LD_VAR 0 2
54181: PUSH
54182: LD_INT 1
54184: ARRAY
54185: PUSH
54186: LD_INT 1
54188: ARRAY
54189: PUSH
54190: LD_VAR 0 8
54194: EQUAL
54195: IFFALSE 54240
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
54197: LD_ADDR_VAR 0 2
54201: PUSH
54202: LD_VAR 0 2
54206: PPUSH
54207: LD_INT 1
54209: PPUSH
54210: LD_VAR 0 2
54214: PUSH
54215: LD_INT 1
54217: ARRAY
54218: PPUSH
54219: LD_INT 1
54221: PPUSH
54222: CALL_OW 3
54226: PPUSH
54227: CALL_OW 1
54231: ST_TO_ADDR
// tmp := 1 ;
54232: LD_ADDR_VAR 0 3
54236: PUSH
54237: LD_STRING 1
54239: ST_TO_ADDR
// end ; normal := normal & tmp ;
54240: LD_ADDR_VAR 0 5
54244: PUSH
54245: LD_VAR 0 5
54249: PUSH
54250: LD_VAR 0 3
54254: STR
54255: ST_TO_ADDR
// end ;
54256: GO 54156
54258: POP
54259: POP
// for i = 1 to hardcoreCounter do
54260: LD_ADDR_VAR 0 8
54264: PUSH
54265: DOUBLE
54266: LD_INT 1
54268: DEC
54269: ST_TO_ADDR
54270: LD_EXP 15
54274: PUSH
54275: FOR_TO
54276: IFFALSE 54381
// begin tmp := 0 ;
54278: LD_ADDR_VAR 0 3
54282: PUSH
54283: LD_STRING 0
54285: ST_TO_ADDR
// if result [ 2 ] then
54286: LD_VAR 0 2
54290: PUSH
54291: LD_INT 2
54293: ARRAY
54294: IFFALSE 54363
// if result [ 2 ] [ 1 ] = 100 + i then
54296: LD_VAR 0 2
54300: PUSH
54301: LD_INT 2
54303: ARRAY
54304: PUSH
54305: LD_INT 1
54307: ARRAY
54308: PUSH
54309: LD_INT 100
54311: PUSH
54312: LD_VAR 0 8
54316: PLUS
54317: EQUAL
54318: IFFALSE 54363
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54320: LD_ADDR_VAR 0 2
54324: PUSH
54325: LD_VAR 0 2
54329: PPUSH
54330: LD_INT 2
54332: PPUSH
54333: LD_VAR 0 2
54337: PUSH
54338: LD_INT 2
54340: ARRAY
54341: PPUSH
54342: LD_INT 1
54344: PPUSH
54345: CALL_OW 3
54349: PPUSH
54350: CALL_OW 1
54354: ST_TO_ADDR
// tmp := 1 ;
54355: LD_ADDR_VAR 0 3
54359: PUSH
54360: LD_STRING 1
54362: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54363: LD_ADDR_VAR 0 6
54367: PUSH
54368: LD_VAR 0 6
54372: PUSH
54373: LD_VAR 0 3
54377: STR
54378: ST_TO_ADDR
// end ;
54379: GO 54275
54381: POP
54382: POP
// if isGameLoad then
54383: LD_VAR 0 1
54387: IFFALSE 54862
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54389: LD_ADDR_VAR 0 4
54393: PUSH
54394: LD_EXP 18
54398: PUSH
54399: LD_EXP 17
54403: PUSH
54404: LD_EXP 19
54408: PUSH
54409: LD_EXP 16
54413: PUSH
54414: LD_EXP 20
54418: PUSH
54419: LD_EXP 21
54423: PUSH
54424: LD_EXP 22
54428: PUSH
54429: LD_EXP 23
54433: PUSH
54434: LD_EXP 24
54438: PUSH
54439: LD_EXP 25
54443: PUSH
54444: LD_EXP 26
54448: PUSH
54449: LD_EXP 27
54453: PUSH
54454: LD_EXP 28
54458: PUSH
54459: LD_EXP 29
54463: PUSH
54464: LD_EXP 37
54468: PUSH
54469: LD_EXP 38
54473: PUSH
54474: LD_EXP 39
54478: PUSH
54479: LD_EXP 40
54483: PUSH
54484: LD_EXP 42
54488: PUSH
54489: LD_EXP 43
54493: PUSH
54494: LD_EXP 44
54498: PUSH
54499: LD_EXP 47
54503: PUSH
54504: LD_EXP 49
54508: PUSH
54509: LD_EXP 50
54513: PUSH
54514: LD_EXP 51
54518: PUSH
54519: LD_EXP 53
54523: PUSH
54524: LD_EXP 54
54528: PUSH
54529: LD_EXP 57
54533: PUSH
54534: LD_EXP 58
54538: PUSH
54539: LD_EXP 59
54543: PUSH
54544: LD_EXP 60
54548: PUSH
54549: LD_EXP 61
54553: PUSH
54554: LD_EXP 62
54558: PUSH
54559: LD_EXP 63
54563: PUSH
54564: LD_EXP 64
54568: PUSH
54569: LD_EXP 65
54573: PUSH
54574: LD_EXP 30
54578: PUSH
54579: LD_EXP 31
54583: PUSH
54584: LD_EXP 34
54588: PUSH
54589: LD_EXP 35
54593: PUSH
54594: LD_EXP 36
54598: PUSH
54599: LD_EXP 32
54603: PUSH
54604: LD_EXP 33
54608: PUSH
54609: LD_EXP 41
54613: PUSH
54614: LD_EXP 45
54618: PUSH
54619: LD_EXP 46
54623: PUSH
54624: LD_EXP 48
54628: PUSH
54629: LD_EXP 52
54633: PUSH
54634: LD_EXP 55
54638: PUSH
54639: LD_EXP 56
54643: PUSH
54644: LD_EXP 66
54648: PUSH
54649: LD_EXP 67
54653: PUSH
54654: LD_EXP 68
54658: PUSH
54659: LD_EXP 69
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: ST_TO_ADDR
// tmp :=  ;
54720: LD_ADDR_VAR 0 3
54724: PUSH
54725: LD_STRING 
54727: ST_TO_ADDR
// for i = 1 to normalCounter do
54728: LD_ADDR_VAR 0 8
54732: PUSH
54733: DOUBLE
54734: LD_INT 1
54736: DEC
54737: ST_TO_ADDR
54738: LD_EXP 14
54742: PUSH
54743: FOR_TO
54744: IFFALSE 54780
// begin if flags [ i ] then
54746: LD_VAR 0 4
54750: PUSH
54751: LD_VAR 0 8
54755: ARRAY
54756: IFFALSE 54778
// tmp := tmp & i & ; ;
54758: LD_ADDR_VAR 0 3
54762: PUSH
54763: LD_VAR 0 3
54767: PUSH
54768: LD_VAR 0 8
54772: STR
54773: PUSH
54774: LD_STRING ;
54776: STR
54777: ST_TO_ADDR
// end ;
54778: GO 54743
54780: POP
54781: POP
// for i = 1 to hardcoreCounter do
54782: LD_ADDR_VAR 0 8
54786: PUSH
54787: DOUBLE
54788: LD_INT 1
54790: DEC
54791: ST_TO_ADDR
54792: LD_EXP 15
54796: PUSH
54797: FOR_TO
54798: IFFALSE 54844
// begin if flags [ normalCounter + i ] then
54800: LD_VAR 0 4
54804: PUSH
54805: LD_EXP 14
54809: PUSH
54810: LD_VAR 0 8
54814: PLUS
54815: ARRAY
54816: IFFALSE 54842
// tmp := tmp & ( 100 + i ) & ; ;
54818: LD_ADDR_VAR 0 3
54822: PUSH
54823: LD_VAR 0 3
54827: PUSH
54828: LD_INT 100
54830: PUSH
54831: LD_VAR 0 8
54835: PLUS
54836: STR
54837: PUSH
54838: LD_STRING ;
54840: STR
54841: ST_TO_ADDR
// end ;
54842: GO 54797
54844: POP
54845: POP
// if tmp then
54846: LD_VAR 0 3
54850: IFFALSE 54862
// active := tmp ;
54852: LD_ADDR_VAR 0 7
54856: PUSH
54857: LD_VAR 0 3
54861: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54862: LD_STRING getStreamItemsFromMission("
54864: PUSH
54865: LD_VAR 0 5
54869: STR
54870: PUSH
54871: LD_STRING ","
54873: STR
54874: PUSH
54875: LD_VAR 0 6
54879: STR
54880: PUSH
54881: LD_STRING ","
54883: STR
54884: PUSH
54885: LD_VAR 0 7
54889: STR
54890: PUSH
54891: LD_STRING ")
54893: STR
54894: PPUSH
54895: CALL_OW 559
// end else
54899: GO 54908
// ToLua ( getStreamItemsFromMission("","","") ) ;
54901: LD_STRING getStreamItemsFromMission("","","")
54903: PPUSH
54904: CALL_OW 559
// end ;
54908: LD_VAR 0 2
54912: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54913: LD_EXP 13
54917: PUSH
54918: LD_EXP 18
54922: AND
54923: IFFALSE 55047
54925: GO 54927
54927: DISABLE
54928: LD_INT 0
54930: PPUSH
54931: PPUSH
// begin enable ;
54932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54933: LD_ADDR_VAR 0 2
54937: PUSH
54938: LD_INT 22
54940: PUSH
54941: LD_OWVAR 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 34
54955: PUSH
54956: LD_INT 7
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 34
54965: PUSH
54966: LD_INT 45
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 34
54975: PUSH
54976: LD_INT 28
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 34
54985: PUSH
54986: LD_INT 47
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PPUSH
55004: CALL_OW 69
55008: ST_TO_ADDR
// if not tmp then
55009: LD_VAR 0 2
55013: NOT
55014: IFFALSE 55018
// exit ;
55016: GO 55047
// for i in tmp do
55018: LD_ADDR_VAR 0 1
55022: PUSH
55023: LD_VAR 0 2
55027: PUSH
55028: FOR_IN
55029: IFFALSE 55045
// begin SetLives ( i , 0 ) ;
55031: LD_VAR 0 1
55035: PPUSH
55036: LD_INT 0
55038: PPUSH
55039: CALL_OW 234
// end ;
55043: GO 55028
55045: POP
55046: POP
// end ;
55047: PPOPN 2
55049: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55050: LD_EXP 13
55054: PUSH
55055: LD_EXP 19
55059: AND
55060: IFFALSE 55144
55062: GO 55064
55064: DISABLE
55065: LD_INT 0
55067: PPUSH
55068: PPUSH
// begin enable ;
55069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55070: LD_ADDR_VAR 0 2
55074: PUSH
55075: LD_INT 22
55077: PUSH
55078: LD_OWVAR 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 32
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PPUSH
55101: CALL_OW 69
55105: ST_TO_ADDR
// if not tmp then
55106: LD_VAR 0 2
55110: NOT
55111: IFFALSE 55115
// exit ;
55113: GO 55144
// for i in tmp do
55115: LD_ADDR_VAR 0 1
55119: PUSH
55120: LD_VAR 0 2
55124: PUSH
55125: FOR_IN
55126: IFFALSE 55142
// begin SetLives ( i , 0 ) ;
55128: LD_VAR 0 1
55132: PPUSH
55133: LD_INT 0
55135: PPUSH
55136: CALL_OW 234
// end ;
55140: GO 55125
55142: POP
55143: POP
// end ;
55144: PPOPN 2
55146: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55147: LD_EXP 13
55151: PUSH
55152: LD_EXP 16
55156: AND
55157: IFFALSE 55250
55159: GO 55161
55161: DISABLE
55162: LD_INT 0
55164: PPUSH
// begin enable ;
55165: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55166: LD_ADDR_VAR 0 1
55170: PUSH
55171: LD_INT 22
55173: PUSH
55174: LD_OWVAR 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 25
55188: PUSH
55189: LD_INT 5
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 25
55198: PUSH
55199: LD_INT 9
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 25
55208: PUSH
55209: LD_INT 8
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PPUSH
55226: CALL_OW 69
55230: PUSH
55231: FOR_IN
55232: IFFALSE 55248
// begin SetClass ( i , 1 ) ;
55234: LD_VAR 0 1
55238: PPUSH
55239: LD_INT 1
55241: PPUSH
55242: CALL_OW 336
// end ;
55246: GO 55231
55248: POP
55249: POP
// end ;
55250: PPOPN 1
55252: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55253: LD_EXP 13
55257: PUSH
55258: LD_EXP 17
55262: AND
55263: PUSH
55264: LD_OWVAR 65
55268: PUSH
55269: LD_INT 7
55271: LESS
55272: AND
55273: IFFALSE 55287
55275: GO 55277
55277: DISABLE
// begin enable ;
55278: ENABLE
// game_speed := 7 ;
55279: LD_ADDR_OWVAR 65
55283: PUSH
55284: LD_INT 7
55286: ST_TO_ADDR
// end ;
55287: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55288: LD_EXP 13
55292: PUSH
55293: LD_EXP 20
55297: AND
55298: IFFALSE 55500
55300: GO 55302
55302: DISABLE
55303: LD_INT 0
55305: PPUSH
55306: PPUSH
55307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55308: LD_ADDR_VAR 0 3
55312: PUSH
55313: LD_INT 81
55315: PUSH
55316: LD_OWVAR 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 21
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PPUSH
55339: CALL_OW 69
55343: ST_TO_ADDR
// if not tmp then
55344: LD_VAR 0 3
55348: NOT
55349: IFFALSE 55353
// exit ;
55351: GO 55500
// if tmp > 5 then
55353: LD_VAR 0 3
55357: PUSH
55358: LD_INT 5
55360: GREATER
55361: IFFALSE 55373
// k := 5 else
55363: LD_ADDR_VAR 0 2
55367: PUSH
55368: LD_INT 5
55370: ST_TO_ADDR
55371: GO 55383
// k := tmp ;
55373: LD_ADDR_VAR 0 2
55377: PUSH
55378: LD_VAR 0 3
55382: ST_TO_ADDR
// for i := 1 to k do
55383: LD_ADDR_VAR 0 1
55387: PUSH
55388: DOUBLE
55389: LD_INT 1
55391: DEC
55392: ST_TO_ADDR
55393: LD_VAR 0 2
55397: PUSH
55398: FOR_TO
55399: IFFALSE 55498
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55401: LD_VAR 0 3
55405: PUSH
55406: LD_VAR 0 1
55410: ARRAY
55411: PPUSH
55412: LD_VAR 0 1
55416: PUSH
55417: LD_INT 4
55419: MOD
55420: PUSH
55421: LD_INT 1
55423: PLUS
55424: PPUSH
55425: CALL_OW 259
55429: PUSH
55430: LD_INT 10
55432: LESS
55433: IFFALSE 55496
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55435: LD_VAR 0 3
55439: PUSH
55440: LD_VAR 0 1
55444: ARRAY
55445: PPUSH
55446: LD_VAR 0 1
55450: PUSH
55451: LD_INT 4
55453: MOD
55454: PUSH
55455: LD_INT 1
55457: PLUS
55458: PPUSH
55459: LD_VAR 0 3
55463: PUSH
55464: LD_VAR 0 1
55468: ARRAY
55469: PPUSH
55470: LD_VAR 0 1
55474: PUSH
55475: LD_INT 4
55477: MOD
55478: PUSH
55479: LD_INT 1
55481: PLUS
55482: PPUSH
55483: CALL_OW 259
55487: PUSH
55488: LD_INT 1
55490: PLUS
55491: PPUSH
55492: CALL_OW 237
55496: GO 55398
55498: POP
55499: POP
// end ;
55500: PPOPN 3
55502: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55503: LD_EXP 13
55507: PUSH
55508: LD_EXP 21
55512: AND
55513: IFFALSE 55533
55515: GO 55517
55517: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55518: LD_INT 4
55520: PPUSH
55521: LD_OWVAR 2
55525: PPUSH
55526: LD_INT 0
55528: PPUSH
55529: CALL_OW 324
55533: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55534: LD_EXP 13
55538: PUSH
55539: LD_EXP 50
55543: AND
55544: IFFALSE 55564
55546: GO 55548
55548: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55549: LD_INT 19
55551: PPUSH
55552: LD_OWVAR 2
55556: PPUSH
55557: LD_INT 0
55559: PPUSH
55560: CALL_OW 324
55564: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55565: LD_EXP 13
55569: PUSH
55570: LD_EXP 22
55574: AND
55575: IFFALSE 55677
55577: GO 55579
55579: DISABLE
55580: LD_INT 0
55582: PPUSH
55583: PPUSH
// begin enable ;
55584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55585: LD_ADDR_VAR 0 2
55589: PUSH
55590: LD_INT 22
55592: PUSH
55593: LD_OWVAR 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: LD_INT 34
55607: PUSH
55608: LD_INT 11
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 34
55617: PUSH
55618: LD_INT 30
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PPUSH
55634: CALL_OW 69
55638: ST_TO_ADDR
// if not tmp then
55639: LD_VAR 0 2
55643: NOT
55644: IFFALSE 55648
// exit ;
55646: GO 55677
// for i in tmp do
55648: LD_ADDR_VAR 0 1
55652: PUSH
55653: LD_VAR 0 2
55657: PUSH
55658: FOR_IN
55659: IFFALSE 55675
// begin SetLives ( i , 0 ) ;
55661: LD_VAR 0 1
55665: PPUSH
55666: LD_INT 0
55668: PPUSH
55669: CALL_OW 234
// end ;
55673: GO 55658
55675: POP
55676: POP
// end ;
55677: PPOPN 2
55679: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55680: LD_EXP 13
55684: PUSH
55685: LD_EXP 23
55689: AND
55690: IFFALSE 55710
55692: GO 55694
55694: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55695: LD_INT 32
55697: PPUSH
55698: LD_OWVAR 2
55702: PPUSH
55703: LD_INT 0
55705: PPUSH
55706: CALL_OW 324
55710: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55711: LD_EXP 13
55715: PUSH
55716: LD_EXP 24
55720: AND
55721: IFFALSE 55902
55723: GO 55725
55725: DISABLE
55726: LD_INT 0
55728: PPUSH
55729: PPUSH
55730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55731: LD_ADDR_VAR 0 2
55735: PUSH
55736: LD_INT 22
55738: PUSH
55739: LD_OWVAR 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 33
55750: PUSH
55751: LD_INT 3
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PPUSH
55762: CALL_OW 69
55766: ST_TO_ADDR
// if not tmp then
55767: LD_VAR 0 2
55771: NOT
55772: IFFALSE 55776
// exit ;
55774: GO 55902
// side := 0 ;
55776: LD_ADDR_VAR 0 3
55780: PUSH
55781: LD_INT 0
55783: ST_TO_ADDR
// for i := 1 to 8 do
55784: LD_ADDR_VAR 0 1
55788: PUSH
55789: DOUBLE
55790: LD_INT 1
55792: DEC
55793: ST_TO_ADDR
55794: LD_INT 8
55796: PUSH
55797: FOR_TO
55798: IFFALSE 55846
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55800: LD_OWVAR 2
55804: PUSH
55805: LD_VAR 0 1
55809: NONEQUAL
55810: PUSH
55811: LD_OWVAR 2
55815: PPUSH
55816: LD_VAR 0 1
55820: PPUSH
55821: CALL_OW 81
55825: PUSH
55826: LD_INT 2
55828: EQUAL
55829: AND
55830: IFFALSE 55844
// begin side := i ;
55832: LD_ADDR_VAR 0 3
55836: PUSH
55837: LD_VAR 0 1
55841: ST_TO_ADDR
// break ;
55842: GO 55846
// end ;
55844: GO 55797
55846: POP
55847: POP
// if not side then
55848: LD_VAR 0 3
55852: NOT
55853: IFFALSE 55857
// exit ;
55855: GO 55902
// for i := 1 to tmp do
55857: LD_ADDR_VAR 0 1
55861: PUSH
55862: DOUBLE
55863: LD_INT 1
55865: DEC
55866: ST_TO_ADDR
55867: LD_VAR 0 2
55871: PUSH
55872: FOR_TO
55873: IFFALSE 55900
// if Prob ( 60 ) then
55875: LD_INT 60
55877: PPUSH
55878: CALL_OW 13
55882: IFFALSE 55898
// SetSide ( i , side ) ;
55884: LD_VAR 0 1
55888: PPUSH
55889: LD_VAR 0 3
55893: PPUSH
55894: CALL_OW 235
55898: GO 55872
55900: POP
55901: POP
// end ;
55902: PPOPN 3
55904: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55905: LD_EXP 13
55909: PUSH
55910: LD_EXP 26
55914: AND
55915: IFFALSE 56034
55917: GO 55919
55919: DISABLE
55920: LD_INT 0
55922: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55923: LD_ADDR_VAR 0 1
55927: PUSH
55928: LD_INT 22
55930: PUSH
55931: LD_OWVAR 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 21
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 23
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: PPUSH
55972: CALL_OW 69
55976: PUSH
55977: FOR_IN
55978: IFFALSE 56032
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55980: LD_VAR 0 1
55984: PPUSH
55985: CALL_OW 257
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: LD_INT 4
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: IN
56008: IFFALSE 56030
// SetClass ( un , rand ( 1 , 4 ) ) ;
56010: LD_VAR 0 1
56014: PPUSH
56015: LD_INT 1
56017: PPUSH
56018: LD_INT 4
56020: PPUSH
56021: CALL_OW 12
56025: PPUSH
56026: CALL_OW 336
56030: GO 55977
56032: POP
56033: POP
// end ;
56034: PPOPN 1
56036: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56037: LD_EXP 13
56041: PUSH
56042: LD_EXP 25
56046: AND
56047: IFFALSE 56126
56049: GO 56051
56051: DISABLE
56052: LD_INT 0
56054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56055: LD_ADDR_VAR 0 1
56059: PUSH
56060: LD_INT 22
56062: PUSH
56063: LD_OWVAR 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 21
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PPUSH
56086: CALL_OW 69
56090: ST_TO_ADDR
// if not tmp then
56091: LD_VAR 0 1
56095: NOT
56096: IFFALSE 56100
// exit ;
56098: GO 56126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56100: LD_VAR 0 1
56104: PUSH
56105: LD_INT 1
56107: PPUSH
56108: LD_VAR 0 1
56112: PPUSH
56113: CALL_OW 12
56117: ARRAY
56118: PPUSH
56119: LD_INT 100
56121: PPUSH
56122: CALL_OW 234
// end ;
56126: PPOPN 1
56128: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56129: LD_EXP 13
56133: PUSH
56134: LD_EXP 27
56138: AND
56139: IFFALSE 56237
56141: GO 56143
56143: DISABLE
56144: LD_INT 0
56146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56147: LD_ADDR_VAR 0 1
56151: PUSH
56152: LD_INT 22
56154: PUSH
56155: LD_OWVAR 2
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 21
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PPUSH
56178: CALL_OW 69
56182: ST_TO_ADDR
// if not tmp then
56183: LD_VAR 0 1
56187: NOT
56188: IFFALSE 56192
// exit ;
56190: GO 56237
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56192: LD_VAR 0 1
56196: PUSH
56197: LD_INT 1
56199: PPUSH
56200: LD_VAR 0 1
56204: PPUSH
56205: CALL_OW 12
56209: ARRAY
56210: PPUSH
56211: LD_INT 1
56213: PPUSH
56214: LD_INT 4
56216: PPUSH
56217: CALL_OW 12
56221: PPUSH
56222: LD_INT 3000
56224: PPUSH
56225: LD_INT 9000
56227: PPUSH
56228: CALL_OW 12
56232: PPUSH
56233: CALL_OW 492
// end ;
56237: PPOPN 1
56239: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56240: LD_EXP 13
56244: PUSH
56245: LD_EXP 28
56249: AND
56250: IFFALSE 56270
56252: GO 56254
56254: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56255: LD_INT 1
56257: PPUSH
56258: LD_OWVAR 2
56262: PPUSH
56263: LD_INT 0
56265: PPUSH
56266: CALL_OW 324
56270: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56271: LD_EXP 13
56275: PUSH
56276: LD_EXP 29
56280: AND
56281: IFFALSE 56364
56283: GO 56285
56285: DISABLE
56286: LD_INT 0
56288: PPUSH
56289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56290: LD_ADDR_VAR 0 2
56294: PUSH
56295: LD_INT 22
56297: PUSH
56298: LD_OWVAR 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 21
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PPUSH
56321: CALL_OW 69
56325: ST_TO_ADDR
// if not tmp then
56326: LD_VAR 0 2
56330: NOT
56331: IFFALSE 56335
// exit ;
56333: GO 56364
// for i in tmp do
56335: LD_ADDR_VAR 0 1
56339: PUSH
56340: LD_VAR 0 2
56344: PUSH
56345: FOR_IN
56346: IFFALSE 56362
// SetBLevel ( i , 10 ) ;
56348: LD_VAR 0 1
56352: PPUSH
56353: LD_INT 10
56355: PPUSH
56356: CALL_OW 241
56360: GO 56345
56362: POP
56363: POP
// end ;
56364: PPOPN 2
56366: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56367: LD_EXP 13
56371: PUSH
56372: LD_EXP 30
56376: AND
56377: IFFALSE 56488
56379: GO 56381
56381: DISABLE
56382: LD_INT 0
56384: PPUSH
56385: PPUSH
56386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56387: LD_ADDR_VAR 0 3
56391: PUSH
56392: LD_INT 22
56394: PUSH
56395: LD_OWVAR 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 25
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PPUSH
56418: CALL_OW 69
56422: ST_TO_ADDR
// if not tmp then
56423: LD_VAR 0 3
56427: NOT
56428: IFFALSE 56432
// exit ;
56430: GO 56488
// un := tmp [ rand ( 1 , tmp ) ] ;
56432: LD_ADDR_VAR 0 2
56436: PUSH
56437: LD_VAR 0 3
56441: PUSH
56442: LD_INT 1
56444: PPUSH
56445: LD_VAR 0 3
56449: PPUSH
56450: CALL_OW 12
56454: ARRAY
56455: ST_TO_ADDR
// if Crawls ( un ) then
56456: LD_VAR 0 2
56460: PPUSH
56461: CALL_OW 318
56465: IFFALSE 56476
// ComWalk ( un ) ;
56467: LD_VAR 0 2
56471: PPUSH
56472: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56476: LD_VAR 0 2
56480: PPUSH
56481: LD_INT 5
56483: PPUSH
56484: CALL_OW 336
// end ;
56488: PPOPN 3
56490: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56491: LD_EXP 13
56495: PUSH
56496: LD_EXP 31
56500: AND
56501: PUSH
56502: LD_OWVAR 67
56506: PUSH
56507: LD_INT 4
56509: LESS
56510: AND
56511: IFFALSE 56530
56513: GO 56515
56515: DISABLE
// begin Difficulty := Difficulty + 1 ;
56516: LD_ADDR_OWVAR 67
56520: PUSH
56521: LD_OWVAR 67
56525: PUSH
56526: LD_INT 1
56528: PLUS
56529: ST_TO_ADDR
// end ;
56530: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56531: LD_EXP 13
56535: PUSH
56536: LD_EXP 32
56540: AND
56541: IFFALSE 56644
56543: GO 56545
56545: DISABLE
56546: LD_INT 0
56548: PPUSH
// begin for i := 1 to 5 do
56549: LD_ADDR_VAR 0 1
56553: PUSH
56554: DOUBLE
56555: LD_INT 1
56557: DEC
56558: ST_TO_ADDR
56559: LD_INT 5
56561: PUSH
56562: FOR_TO
56563: IFFALSE 56642
// begin uc_nation := nation_nature ;
56565: LD_ADDR_OWVAR 21
56569: PUSH
56570: LD_INT 0
56572: ST_TO_ADDR
// uc_side := 0 ;
56573: LD_ADDR_OWVAR 20
56577: PUSH
56578: LD_INT 0
56580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56581: LD_ADDR_OWVAR 29
56585: PUSH
56586: LD_INT 12
56588: PUSH
56589: LD_INT 12
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// hc_agressivity := 20 ;
56596: LD_ADDR_OWVAR 35
56600: PUSH
56601: LD_INT 20
56603: ST_TO_ADDR
// hc_class := class_tiger ;
56604: LD_ADDR_OWVAR 28
56608: PUSH
56609: LD_INT 14
56611: ST_TO_ADDR
// hc_gallery :=  ;
56612: LD_ADDR_OWVAR 33
56616: PUSH
56617: LD_STRING 
56619: ST_TO_ADDR
// hc_name :=  ;
56620: LD_ADDR_OWVAR 26
56624: PUSH
56625: LD_STRING 
56627: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56628: CALL_OW 44
56632: PPUSH
56633: LD_INT 0
56635: PPUSH
56636: CALL_OW 51
// end ;
56640: GO 56562
56642: POP
56643: POP
// end ;
56644: PPOPN 1
56646: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56647: LD_EXP 13
56651: PUSH
56652: LD_EXP 33
56656: AND
56657: IFFALSE 56666
56659: GO 56661
56661: DISABLE
// StreamSibBomb ;
56662: CALL 56667 0 0
56666: END
// export function StreamSibBomb ; var i , x , y ; begin
56667: LD_INT 0
56669: PPUSH
56670: PPUSH
56671: PPUSH
56672: PPUSH
// result := false ;
56673: LD_ADDR_VAR 0 1
56677: PUSH
56678: LD_INT 0
56680: ST_TO_ADDR
// for i := 1 to 16 do
56681: LD_ADDR_VAR 0 2
56685: PUSH
56686: DOUBLE
56687: LD_INT 1
56689: DEC
56690: ST_TO_ADDR
56691: LD_INT 16
56693: PUSH
56694: FOR_TO
56695: IFFALSE 56894
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56697: LD_ADDR_VAR 0 3
56701: PUSH
56702: LD_INT 10
56704: PUSH
56705: LD_INT 20
56707: PUSH
56708: LD_INT 30
56710: PUSH
56711: LD_INT 40
56713: PUSH
56714: LD_INT 50
56716: PUSH
56717: LD_INT 60
56719: PUSH
56720: LD_INT 70
56722: PUSH
56723: LD_INT 80
56725: PUSH
56726: LD_INT 90
56728: PUSH
56729: LD_INT 100
56731: PUSH
56732: LD_INT 110
56734: PUSH
56735: LD_INT 120
56737: PUSH
56738: LD_INT 130
56740: PUSH
56741: LD_INT 140
56743: PUSH
56744: LD_INT 150
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PPUSH
56767: LD_INT 15
56769: PPUSH
56770: CALL_OW 12
56774: ARRAY
56775: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56776: LD_ADDR_VAR 0 4
56780: PUSH
56781: LD_INT 10
56783: PUSH
56784: LD_INT 20
56786: PUSH
56787: LD_INT 30
56789: PUSH
56790: LD_INT 40
56792: PUSH
56793: LD_INT 50
56795: PUSH
56796: LD_INT 60
56798: PUSH
56799: LD_INT 70
56801: PUSH
56802: LD_INT 80
56804: PUSH
56805: LD_INT 90
56807: PUSH
56808: LD_INT 100
56810: PUSH
56811: LD_INT 110
56813: PUSH
56814: LD_INT 120
56816: PUSH
56817: LD_INT 130
56819: PUSH
56820: LD_INT 140
56822: PUSH
56823: LD_INT 150
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PPUSH
56846: LD_INT 15
56848: PPUSH
56849: CALL_OW 12
56853: ARRAY
56854: ST_TO_ADDR
// if ValidHex ( x , y ) then
56855: LD_VAR 0 3
56859: PPUSH
56860: LD_VAR 0 4
56864: PPUSH
56865: CALL_OW 488
56869: IFFALSE 56892
// begin result := [ x , y ] ;
56871: LD_ADDR_VAR 0 1
56875: PUSH
56876: LD_VAR 0 3
56880: PUSH
56881: LD_VAR 0 4
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// break ;
56890: GO 56894
// end ; end ;
56892: GO 56694
56894: POP
56895: POP
// if result then
56896: LD_VAR 0 1
56900: IFFALSE 56960
// begin ToLua ( playSibBomb() ) ;
56902: LD_STRING playSibBomb()
56904: PPUSH
56905: CALL_OW 559
// wait ( 0 0$14 ) ;
56909: LD_INT 490
56911: PPUSH
56912: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56916: LD_VAR 0 1
56920: PUSH
56921: LD_INT 1
56923: ARRAY
56924: PPUSH
56925: LD_VAR 0 1
56929: PUSH
56930: LD_INT 2
56932: ARRAY
56933: PPUSH
56934: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56938: LD_VAR 0 1
56942: PUSH
56943: LD_INT 1
56945: ARRAY
56946: PPUSH
56947: LD_VAR 0 1
56951: PUSH
56952: LD_INT 2
56954: ARRAY
56955: PPUSH
56956: CALL_OW 429
// end ; end ;
56960: LD_VAR 0 1
56964: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56965: LD_EXP 13
56969: PUSH
56970: LD_EXP 35
56974: AND
56975: IFFALSE 56987
56977: GO 56979
56979: DISABLE
// YouLost (  ) ;
56980: LD_STRING 
56982: PPUSH
56983: CALL_OW 104
56987: END
// every 0 0$1 trigger StreamModeActive and sFog do
56988: LD_EXP 13
56992: PUSH
56993: LD_EXP 34
56997: AND
56998: IFFALSE 57012
57000: GO 57002
57002: DISABLE
// FogOff ( your_side ) ;
57003: LD_OWVAR 2
57007: PPUSH
57008: CALL_OW 344
57012: END
// every 0 0$1 trigger StreamModeActive and sSun do
57013: LD_EXP 13
57017: PUSH
57018: LD_EXP 36
57022: AND
57023: IFFALSE 57051
57025: GO 57027
57027: DISABLE
// begin solar_recharge_percent := 0 ;
57028: LD_ADDR_OWVAR 79
57032: PUSH
57033: LD_INT 0
57035: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57036: LD_INT 10500
57038: PPUSH
57039: CALL_OW 67
// solar_recharge_percent := 100 ;
57043: LD_ADDR_OWVAR 79
57047: PUSH
57048: LD_INT 100
57050: ST_TO_ADDR
// end ;
57051: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57052: LD_EXP 13
57056: PUSH
57057: LD_EXP 37
57061: AND
57062: IFFALSE 57301
57064: GO 57066
57066: DISABLE
57067: LD_INT 0
57069: PPUSH
57070: PPUSH
57071: PPUSH
// begin tmp := [ ] ;
57072: LD_ADDR_VAR 0 3
57076: PUSH
57077: EMPTY
57078: ST_TO_ADDR
// for i := 1 to 6 do
57079: LD_ADDR_VAR 0 1
57083: PUSH
57084: DOUBLE
57085: LD_INT 1
57087: DEC
57088: ST_TO_ADDR
57089: LD_INT 6
57091: PUSH
57092: FOR_TO
57093: IFFALSE 57198
// begin uc_nation := nation_nature ;
57095: LD_ADDR_OWVAR 21
57099: PUSH
57100: LD_INT 0
57102: ST_TO_ADDR
// uc_side := 0 ;
57103: LD_ADDR_OWVAR 20
57107: PUSH
57108: LD_INT 0
57110: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57111: LD_ADDR_OWVAR 29
57115: PUSH
57116: LD_INT 12
57118: PUSH
57119: LD_INT 12
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// hc_agressivity := 20 ;
57126: LD_ADDR_OWVAR 35
57130: PUSH
57131: LD_INT 20
57133: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57134: LD_ADDR_OWVAR 28
57138: PUSH
57139: LD_INT 17
57141: ST_TO_ADDR
// hc_gallery :=  ;
57142: LD_ADDR_OWVAR 33
57146: PUSH
57147: LD_STRING 
57149: ST_TO_ADDR
// hc_name :=  ;
57150: LD_ADDR_OWVAR 26
57154: PUSH
57155: LD_STRING 
57157: ST_TO_ADDR
// un := CreateHuman ;
57158: LD_ADDR_VAR 0 2
57162: PUSH
57163: CALL_OW 44
57167: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57168: LD_VAR 0 2
57172: PPUSH
57173: LD_INT 1
57175: PPUSH
57176: CALL_OW 51
// tmp := tmp ^ un ;
57180: LD_ADDR_VAR 0 3
57184: PUSH
57185: LD_VAR 0 3
57189: PUSH
57190: LD_VAR 0 2
57194: ADD
57195: ST_TO_ADDR
// end ;
57196: GO 57092
57198: POP
57199: POP
// repeat wait ( 0 0$1 ) ;
57200: LD_INT 35
57202: PPUSH
57203: CALL_OW 67
// for un in tmp do
57207: LD_ADDR_VAR 0 2
57211: PUSH
57212: LD_VAR 0 3
57216: PUSH
57217: FOR_IN
57218: IFFALSE 57292
// begin if IsDead ( un ) then
57220: LD_VAR 0 2
57224: PPUSH
57225: CALL_OW 301
57229: IFFALSE 57249
// begin tmp := tmp diff un ;
57231: LD_ADDR_VAR 0 3
57235: PUSH
57236: LD_VAR 0 3
57240: PUSH
57241: LD_VAR 0 2
57245: DIFF
57246: ST_TO_ADDR
// continue ;
57247: GO 57217
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57249: LD_VAR 0 2
57253: PPUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 22
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PPUSH
57271: CALL_OW 69
57275: PPUSH
57276: LD_VAR 0 2
57280: PPUSH
57281: CALL_OW 74
57285: PPUSH
57286: CALL_OW 115
// end ;
57290: GO 57217
57292: POP
57293: POP
// until not tmp ;
57294: LD_VAR 0 3
57298: NOT
57299: IFFALSE 57200
// end ;
57301: PPOPN 3
57303: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57304: LD_EXP 13
57308: PUSH
57309: LD_EXP 38
57313: AND
57314: IFFALSE 57368
57316: GO 57318
57318: DISABLE
// begin ToLua ( displayTroll(); ) ;
57319: LD_STRING displayTroll();
57321: PPUSH
57322: CALL_OW 559
// wait ( 3 3$00 ) ;
57326: LD_INT 6300
57328: PPUSH
57329: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57333: LD_STRING hideTroll();
57335: PPUSH
57336: CALL_OW 559
// wait ( 1 1$00 ) ;
57340: LD_INT 2100
57342: PPUSH
57343: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57347: LD_STRING displayTroll();
57349: PPUSH
57350: CALL_OW 559
// wait ( 1 1$00 ) ;
57354: LD_INT 2100
57356: PPUSH
57357: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57361: LD_STRING hideTroll();
57363: PPUSH
57364: CALL_OW 559
// end ;
57368: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57369: LD_EXP 13
57373: PUSH
57374: LD_EXP 39
57378: AND
57379: IFFALSE 57442
57381: GO 57383
57383: DISABLE
57384: LD_INT 0
57386: PPUSH
// begin p := 0 ;
57387: LD_ADDR_VAR 0 1
57391: PUSH
57392: LD_INT 0
57394: ST_TO_ADDR
// repeat game_speed := 1 ;
57395: LD_ADDR_OWVAR 65
57399: PUSH
57400: LD_INT 1
57402: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57403: LD_INT 35
57405: PPUSH
57406: CALL_OW 67
// p := p + 1 ;
57410: LD_ADDR_VAR 0 1
57414: PUSH
57415: LD_VAR 0 1
57419: PUSH
57420: LD_INT 1
57422: PLUS
57423: ST_TO_ADDR
// until p >= 60 ;
57424: LD_VAR 0 1
57428: PUSH
57429: LD_INT 60
57431: GREATEREQUAL
57432: IFFALSE 57395
// game_speed := 4 ;
57434: LD_ADDR_OWVAR 65
57438: PUSH
57439: LD_INT 4
57441: ST_TO_ADDR
// end ;
57442: PPOPN 1
57444: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57445: LD_EXP 13
57449: PUSH
57450: LD_EXP 40
57454: AND
57455: IFFALSE 57601
57457: GO 57459
57459: DISABLE
57460: LD_INT 0
57462: PPUSH
57463: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57464: LD_ADDR_VAR 0 1
57468: PUSH
57469: LD_INT 22
57471: PUSH
57472: LD_OWVAR 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 30
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 30
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PPUSH
57513: CALL_OW 69
57517: ST_TO_ADDR
// if not depot then
57518: LD_VAR 0 1
57522: NOT
57523: IFFALSE 57527
// exit ;
57525: GO 57601
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57527: LD_ADDR_VAR 0 2
57531: PUSH
57532: LD_VAR 0 1
57536: PUSH
57537: LD_INT 1
57539: PPUSH
57540: LD_VAR 0 1
57544: PPUSH
57545: CALL_OW 12
57549: ARRAY
57550: PPUSH
57551: CALL_OW 274
57555: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57556: LD_VAR 0 2
57560: PPUSH
57561: LD_INT 1
57563: PPUSH
57564: LD_INT 0
57566: PPUSH
57567: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57571: LD_VAR 0 2
57575: PPUSH
57576: LD_INT 2
57578: PPUSH
57579: LD_INT 0
57581: PPUSH
57582: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57586: LD_VAR 0 2
57590: PPUSH
57591: LD_INT 3
57593: PPUSH
57594: LD_INT 0
57596: PPUSH
57597: CALL_OW 277
// end ;
57601: PPOPN 2
57603: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57604: LD_EXP 13
57608: PUSH
57609: LD_EXP 41
57613: AND
57614: IFFALSE 57711
57616: GO 57618
57618: DISABLE
57619: LD_INT 0
57621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57622: LD_ADDR_VAR 0 1
57626: PUSH
57627: LD_INT 22
57629: PUSH
57630: LD_OWVAR 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 21
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: PUSH
57652: LD_INT 23
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: PPUSH
57671: CALL_OW 69
57675: ST_TO_ADDR
// if not tmp then
57676: LD_VAR 0 1
57680: NOT
57681: IFFALSE 57685
// exit ;
57683: GO 57711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57685: LD_VAR 0 1
57689: PUSH
57690: LD_INT 1
57692: PPUSH
57693: LD_VAR 0 1
57697: PPUSH
57698: CALL_OW 12
57702: ARRAY
57703: PPUSH
57704: LD_INT 200
57706: PPUSH
57707: CALL_OW 234
// end ;
57711: PPOPN 1
57713: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57714: LD_EXP 13
57718: PUSH
57719: LD_EXP 42
57723: AND
57724: IFFALSE 57803
57726: GO 57728
57728: DISABLE
57729: LD_INT 0
57731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57732: LD_ADDR_VAR 0 1
57736: PUSH
57737: LD_INT 22
57739: PUSH
57740: LD_OWVAR 2
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 21
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PPUSH
57763: CALL_OW 69
57767: ST_TO_ADDR
// if not tmp then
57768: LD_VAR 0 1
57772: NOT
57773: IFFALSE 57777
// exit ;
57775: GO 57803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57777: LD_VAR 0 1
57781: PUSH
57782: LD_INT 1
57784: PPUSH
57785: LD_VAR 0 1
57789: PPUSH
57790: CALL_OW 12
57794: ARRAY
57795: PPUSH
57796: LD_INT 60
57798: PPUSH
57799: CALL_OW 234
// end ;
57803: PPOPN 1
57805: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57806: LD_EXP 13
57810: PUSH
57811: LD_EXP 43
57815: AND
57816: IFFALSE 57915
57818: GO 57820
57820: DISABLE
57821: LD_INT 0
57823: PPUSH
57824: PPUSH
// begin enable ;
57825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57826: LD_ADDR_VAR 0 1
57830: PUSH
57831: LD_INT 22
57833: PUSH
57834: LD_OWVAR 2
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 61
57845: PUSH
57846: EMPTY
57847: LIST
57848: PUSH
57849: LD_INT 33
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: PPUSH
57864: CALL_OW 69
57868: ST_TO_ADDR
// if not tmp then
57869: LD_VAR 0 1
57873: NOT
57874: IFFALSE 57878
// exit ;
57876: GO 57915
// for i in tmp do
57878: LD_ADDR_VAR 0 2
57882: PUSH
57883: LD_VAR 0 1
57887: PUSH
57888: FOR_IN
57889: IFFALSE 57913
// if IsControledBy ( i ) then
57891: LD_VAR 0 2
57895: PPUSH
57896: CALL_OW 312
57900: IFFALSE 57911
// ComUnlink ( i ) ;
57902: LD_VAR 0 2
57906: PPUSH
57907: CALL_OW 136
57911: GO 57888
57913: POP
57914: POP
// end ;
57915: PPOPN 2
57917: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57918: LD_EXP 13
57922: PUSH
57923: LD_EXP 44
57927: AND
57928: IFFALSE 58068
57930: GO 57932
57932: DISABLE
57933: LD_INT 0
57935: PPUSH
57936: PPUSH
// begin ToLua ( displayPowell(); ) ;
57937: LD_STRING displayPowell();
57939: PPUSH
57940: CALL_OW 559
// uc_side := 0 ;
57944: LD_ADDR_OWVAR 20
57948: PUSH
57949: LD_INT 0
57951: ST_TO_ADDR
// uc_nation := 2 ;
57952: LD_ADDR_OWVAR 21
57956: PUSH
57957: LD_INT 2
57959: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57960: LD_ADDR_OWVAR 37
57964: PUSH
57965: LD_INT 14
57967: ST_TO_ADDR
// vc_engine := engine_siberite ;
57968: LD_ADDR_OWVAR 39
57972: PUSH
57973: LD_INT 3
57975: ST_TO_ADDR
// vc_control := control_apeman ;
57976: LD_ADDR_OWVAR 38
57980: PUSH
57981: LD_INT 5
57983: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57984: LD_ADDR_OWVAR 40
57988: PUSH
57989: LD_INT 29
57991: ST_TO_ADDR
// un := CreateVehicle ;
57992: LD_ADDR_VAR 0 2
57996: PUSH
57997: CALL_OW 45
58001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58002: LD_VAR 0 2
58006: PPUSH
58007: LD_INT 1
58009: PPUSH
58010: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58014: LD_INT 35
58016: PPUSH
58017: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58021: LD_VAR 0 2
58025: PPUSH
58026: LD_INT 22
58028: PUSH
58029: LD_OWVAR 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PPUSH
58038: CALL_OW 69
58042: PPUSH
58043: LD_VAR 0 2
58047: PPUSH
58048: CALL_OW 74
58052: PPUSH
58053: CALL_OW 115
// until IsDead ( un ) ;
58057: LD_VAR 0 2
58061: PPUSH
58062: CALL_OW 301
58066: IFFALSE 58014
// end ;
58068: PPOPN 2
58070: END
// every 0 0$1 trigger StreamModeActive and sStu do
58071: LD_EXP 13
58075: PUSH
58076: LD_EXP 52
58080: AND
58081: IFFALSE 58097
58083: GO 58085
58085: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58086: LD_STRING displayStucuk();
58088: PPUSH
58089: CALL_OW 559
// ResetFog ;
58093: CALL_OW 335
// end ;
58097: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58098: LD_EXP 13
58102: PUSH
58103: LD_EXP 45
58107: AND
58108: IFFALSE 58249
58110: GO 58112
58112: DISABLE
58113: LD_INT 0
58115: PPUSH
58116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58117: LD_ADDR_VAR 0 2
58121: PUSH
58122: LD_INT 22
58124: PUSH
58125: LD_OWVAR 2
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 21
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PPUSH
58148: CALL_OW 69
58152: ST_TO_ADDR
// if not tmp then
58153: LD_VAR 0 2
58157: NOT
58158: IFFALSE 58162
// exit ;
58160: GO 58249
// un := tmp [ rand ( 1 , tmp ) ] ;
58162: LD_ADDR_VAR 0 1
58166: PUSH
58167: LD_VAR 0 2
58171: PUSH
58172: LD_INT 1
58174: PPUSH
58175: LD_VAR 0 2
58179: PPUSH
58180: CALL_OW 12
58184: ARRAY
58185: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58186: LD_VAR 0 1
58190: PPUSH
58191: LD_INT 0
58193: PPUSH
58194: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58198: LD_VAR 0 1
58202: PPUSH
58203: LD_OWVAR 3
58207: PUSH
58208: LD_VAR 0 1
58212: DIFF
58213: PPUSH
58214: LD_VAR 0 1
58218: PPUSH
58219: CALL_OW 74
58223: PPUSH
58224: CALL_OW 115
// wait ( 0 0$20 ) ;
58228: LD_INT 700
58230: PPUSH
58231: CALL_OW 67
// SetSide ( un , your_side ) ;
58235: LD_VAR 0 1
58239: PPUSH
58240: LD_OWVAR 2
58244: PPUSH
58245: CALL_OW 235
// end ;
58249: PPOPN 2
58251: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58252: LD_EXP 13
58256: PUSH
58257: LD_EXP 46
58261: AND
58262: IFFALSE 58368
58264: GO 58266
58266: DISABLE
58267: LD_INT 0
58269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58270: LD_ADDR_VAR 0 1
58274: PUSH
58275: LD_INT 22
58277: PUSH
58278: LD_OWVAR 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 30
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 30
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PPUSH
58319: CALL_OW 69
58323: ST_TO_ADDR
// if not depot then
58324: LD_VAR 0 1
58328: NOT
58329: IFFALSE 58333
// exit ;
58331: GO 58368
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58333: LD_VAR 0 1
58337: PUSH
58338: LD_INT 1
58340: ARRAY
58341: PPUSH
58342: CALL_OW 250
58346: PPUSH
58347: LD_VAR 0 1
58351: PUSH
58352: LD_INT 1
58354: ARRAY
58355: PPUSH
58356: CALL_OW 251
58360: PPUSH
58361: LD_INT 70
58363: PPUSH
58364: CALL_OW 495
// end ;
58368: PPOPN 1
58370: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58371: LD_EXP 13
58375: PUSH
58376: LD_EXP 47
58380: AND
58381: IFFALSE 58592
58383: GO 58385
58385: DISABLE
58386: LD_INT 0
58388: PPUSH
58389: PPUSH
58390: PPUSH
58391: PPUSH
58392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58393: LD_ADDR_VAR 0 5
58397: PUSH
58398: LD_INT 22
58400: PUSH
58401: LD_OWVAR 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 21
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PPUSH
58424: CALL_OW 69
58428: ST_TO_ADDR
// if not tmp then
58429: LD_VAR 0 5
58433: NOT
58434: IFFALSE 58438
// exit ;
58436: GO 58592
// for i in tmp do
58438: LD_ADDR_VAR 0 1
58442: PUSH
58443: LD_VAR 0 5
58447: PUSH
58448: FOR_IN
58449: IFFALSE 58590
// begin d := rand ( 0 , 5 ) ;
58451: LD_ADDR_VAR 0 4
58455: PUSH
58456: LD_INT 0
58458: PPUSH
58459: LD_INT 5
58461: PPUSH
58462: CALL_OW 12
58466: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58467: LD_ADDR_VAR 0 2
58471: PUSH
58472: LD_VAR 0 1
58476: PPUSH
58477: CALL_OW 250
58481: PPUSH
58482: LD_VAR 0 4
58486: PPUSH
58487: LD_INT 3
58489: PPUSH
58490: LD_INT 12
58492: PPUSH
58493: CALL_OW 12
58497: PPUSH
58498: CALL_OW 272
58502: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58503: LD_ADDR_VAR 0 3
58507: PUSH
58508: LD_VAR 0 1
58512: PPUSH
58513: CALL_OW 251
58517: PPUSH
58518: LD_VAR 0 4
58522: PPUSH
58523: LD_INT 3
58525: PPUSH
58526: LD_INT 12
58528: PPUSH
58529: CALL_OW 12
58533: PPUSH
58534: CALL_OW 273
58538: ST_TO_ADDR
// if ValidHex ( x , y ) then
58539: LD_VAR 0 2
58543: PPUSH
58544: LD_VAR 0 3
58548: PPUSH
58549: CALL_OW 488
58553: IFFALSE 58588
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58555: LD_VAR 0 1
58559: PPUSH
58560: LD_VAR 0 2
58564: PPUSH
58565: LD_VAR 0 3
58569: PPUSH
58570: LD_INT 3
58572: PPUSH
58573: LD_INT 6
58575: PPUSH
58576: CALL_OW 12
58580: PPUSH
58581: LD_INT 1
58583: PPUSH
58584: CALL_OW 483
// end ;
58588: GO 58448
58590: POP
58591: POP
// end ;
58592: PPOPN 5
58594: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58595: LD_EXP 13
58599: PUSH
58600: LD_EXP 48
58604: AND
58605: IFFALSE 58699
58607: GO 58609
58609: DISABLE
58610: LD_INT 0
58612: PPUSH
58613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58614: LD_ADDR_VAR 0 2
58618: PUSH
58619: LD_INT 22
58621: PUSH
58622: LD_OWVAR 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 32
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 21
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: PPUSH
58656: CALL_OW 69
58660: ST_TO_ADDR
// if not tmp then
58661: LD_VAR 0 2
58665: NOT
58666: IFFALSE 58670
// exit ;
58668: GO 58699
// for i in tmp do
58670: LD_ADDR_VAR 0 1
58674: PUSH
58675: LD_VAR 0 2
58679: PUSH
58680: FOR_IN
58681: IFFALSE 58697
// SetFuel ( i , 0 ) ;
58683: LD_VAR 0 1
58687: PPUSH
58688: LD_INT 0
58690: PPUSH
58691: CALL_OW 240
58695: GO 58680
58697: POP
58698: POP
// end ;
58699: PPOPN 2
58701: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58702: LD_EXP 13
58706: PUSH
58707: LD_EXP 49
58711: AND
58712: IFFALSE 58778
58714: GO 58716
58716: DISABLE
58717: LD_INT 0
58719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58720: LD_ADDR_VAR 0 1
58724: PUSH
58725: LD_INT 22
58727: PUSH
58728: LD_OWVAR 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 30
58739: PUSH
58740: LD_INT 29
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PPUSH
58751: CALL_OW 69
58755: ST_TO_ADDR
// if not tmp then
58756: LD_VAR 0 1
58760: NOT
58761: IFFALSE 58765
// exit ;
58763: GO 58778
// DestroyUnit ( tmp [ 1 ] ) ;
58765: LD_VAR 0 1
58769: PUSH
58770: LD_INT 1
58772: ARRAY
58773: PPUSH
58774: CALL_OW 65
// end ;
58778: PPOPN 1
58780: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58781: LD_EXP 13
58785: PUSH
58786: LD_EXP 51
58790: AND
58791: IFFALSE 58920
58793: GO 58795
58795: DISABLE
58796: LD_INT 0
58798: PPUSH
// begin uc_side := 0 ;
58799: LD_ADDR_OWVAR 20
58803: PUSH
58804: LD_INT 0
58806: ST_TO_ADDR
// uc_nation := nation_arabian ;
58807: LD_ADDR_OWVAR 21
58811: PUSH
58812: LD_INT 2
58814: ST_TO_ADDR
// hc_gallery :=  ;
58815: LD_ADDR_OWVAR 33
58819: PUSH
58820: LD_STRING 
58822: ST_TO_ADDR
// hc_name :=  ;
58823: LD_ADDR_OWVAR 26
58827: PUSH
58828: LD_STRING 
58830: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58831: LD_INT 1
58833: PPUSH
58834: LD_INT 11
58836: PPUSH
58837: LD_INT 10
58839: PPUSH
58840: CALL_OW 380
// un := CreateHuman ;
58844: LD_ADDR_VAR 0 1
58848: PUSH
58849: CALL_OW 44
58853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58854: LD_VAR 0 1
58858: PPUSH
58859: LD_INT 1
58861: PPUSH
58862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58866: LD_INT 35
58868: PPUSH
58869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58873: LD_VAR 0 1
58877: PPUSH
58878: LD_INT 22
58880: PUSH
58881: LD_OWVAR 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PPUSH
58890: CALL_OW 69
58894: PPUSH
58895: LD_VAR 0 1
58899: PPUSH
58900: CALL_OW 74
58904: PPUSH
58905: CALL_OW 115
// until IsDead ( un ) ;
58909: LD_VAR 0 1
58913: PPUSH
58914: CALL_OW 301
58918: IFFALSE 58866
// end ;
58920: PPOPN 1
58922: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58923: LD_EXP 13
58927: PUSH
58928: LD_EXP 53
58932: AND
58933: IFFALSE 58945
58935: GO 58937
58937: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58938: LD_STRING earthquake(getX(game), 0, 32)
58940: PPUSH
58941: CALL_OW 559
58945: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58946: LD_EXP 13
58950: PUSH
58951: LD_EXP 54
58955: AND
58956: IFFALSE 59047
58958: GO 58960
58960: DISABLE
58961: LD_INT 0
58963: PPUSH
// begin enable ;
58964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58965: LD_ADDR_VAR 0 1
58969: PUSH
58970: LD_INT 22
58972: PUSH
58973: LD_OWVAR 2
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 21
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 33
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: PPUSH
59007: CALL_OW 69
59011: ST_TO_ADDR
// if not tmp then
59012: LD_VAR 0 1
59016: NOT
59017: IFFALSE 59021
// exit ;
59019: GO 59047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59021: LD_VAR 0 1
59025: PUSH
59026: LD_INT 1
59028: PPUSH
59029: LD_VAR 0 1
59033: PPUSH
59034: CALL_OW 12
59038: ARRAY
59039: PPUSH
59040: LD_INT 1
59042: PPUSH
59043: CALL_OW 234
// end ;
59047: PPOPN 1
59049: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59050: LD_EXP 13
59054: PUSH
59055: LD_EXP 55
59059: AND
59060: IFFALSE 59201
59062: GO 59064
59064: DISABLE
59065: LD_INT 0
59067: PPUSH
59068: PPUSH
59069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59070: LD_ADDR_VAR 0 3
59074: PUSH
59075: LD_INT 22
59077: PUSH
59078: LD_OWVAR 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 25
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PPUSH
59101: CALL_OW 69
59105: ST_TO_ADDR
// if not tmp then
59106: LD_VAR 0 3
59110: NOT
59111: IFFALSE 59115
// exit ;
59113: GO 59201
// un := tmp [ rand ( 1 , tmp ) ] ;
59115: LD_ADDR_VAR 0 2
59119: PUSH
59120: LD_VAR 0 3
59124: PUSH
59125: LD_INT 1
59127: PPUSH
59128: LD_VAR 0 3
59132: PPUSH
59133: CALL_OW 12
59137: ARRAY
59138: ST_TO_ADDR
// if Crawls ( un ) then
59139: LD_VAR 0 2
59143: PPUSH
59144: CALL_OW 318
59148: IFFALSE 59159
// ComWalk ( un ) ;
59150: LD_VAR 0 2
59154: PPUSH
59155: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59159: LD_VAR 0 2
59163: PPUSH
59164: LD_INT 9
59166: PPUSH
59167: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59171: LD_INT 28
59173: PPUSH
59174: LD_OWVAR 2
59178: PPUSH
59179: LD_INT 2
59181: PPUSH
59182: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59186: LD_INT 29
59188: PPUSH
59189: LD_OWVAR 2
59193: PPUSH
59194: LD_INT 2
59196: PPUSH
59197: CALL_OW 322
// end ;
59201: PPOPN 3
59203: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59204: LD_EXP 13
59208: PUSH
59209: LD_EXP 56
59213: AND
59214: IFFALSE 59325
59216: GO 59218
59218: DISABLE
59219: LD_INT 0
59221: PPUSH
59222: PPUSH
59223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59224: LD_ADDR_VAR 0 3
59228: PUSH
59229: LD_INT 22
59231: PUSH
59232: LD_OWVAR 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 25
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PPUSH
59255: CALL_OW 69
59259: ST_TO_ADDR
// if not tmp then
59260: LD_VAR 0 3
59264: NOT
59265: IFFALSE 59269
// exit ;
59267: GO 59325
// un := tmp [ rand ( 1 , tmp ) ] ;
59269: LD_ADDR_VAR 0 2
59273: PUSH
59274: LD_VAR 0 3
59278: PUSH
59279: LD_INT 1
59281: PPUSH
59282: LD_VAR 0 3
59286: PPUSH
59287: CALL_OW 12
59291: ARRAY
59292: ST_TO_ADDR
// if Crawls ( un ) then
59293: LD_VAR 0 2
59297: PPUSH
59298: CALL_OW 318
59302: IFFALSE 59313
// ComWalk ( un ) ;
59304: LD_VAR 0 2
59308: PPUSH
59309: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59313: LD_VAR 0 2
59317: PPUSH
59318: LD_INT 8
59320: PPUSH
59321: CALL_OW 336
// end ;
59325: PPOPN 3
59327: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59328: LD_EXP 13
59332: PUSH
59333: LD_EXP 57
59337: AND
59338: IFFALSE 59482
59340: GO 59342
59342: DISABLE
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59347: LD_ADDR_VAR 0 2
59351: PUSH
59352: LD_INT 22
59354: PUSH
59355: LD_OWVAR 2
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 21
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: LD_INT 34
59379: PUSH
59380: LD_INT 12
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 34
59389: PUSH
59390: LD_INT 51
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 34
59399: PUSH
59400: LD_INT 32
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: PPUSH
59418: CALL_OW 69
59422: ST_TO_ADDR
// if not tmp then
59423: LD_VAR 0 2
59427: NOT
59428: IFFALSE 59432
// exit ;
59430: GO 59482
// for i in tmp do
59432: LD_ADDR_VAR 0 1
59436: PUSH
59437: LD_VAR 0 2
59441: PUSH
59442: FOR_IN
59443: IFFALSE 59480
// if GetCargo ( i , mat_artifact ) = 0 then
59445: LD_VAR 0 1
59449: PPUSH
59450: LD_INT 4
59452: PPUSH
59453: CALL_OW 289
59457: PUSH
59458: LD_INT 0
59460: EQUAL
59461: IFFALSE 59478
// SetCargo ( i , mat_siberit , 100 ) ;
59463: LD_VAR 0 1
59467: PPUSH
59468: LD_INT 3
59470: PPUSH
59471: LD_INT 100
59473: PPUSH
59474: CALL_OW 290
59478: GO 59442
59480: POP
59481: POP
// end ;
59482: PPOPN 2
59484: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59485: LD_EXP 13
59489: PUSH
59490: LD_EXP 58
59494: AND
59495: IFFALSE 59678
59497: GO 59499
59499: DISABLE
59500: LD_INT 0
59502: PPUSH
59503: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59504: LD_ADDR_VAR 0 2
59508: PUSH
59509: LD_INT 22
59511: PUSH
59512: LD_OWVAR 2
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PPUSH
59521: CALL_OW 69
59525: ST_TO_ADDR
// if not tmp then
59526: LD_VAR 0 2
59530: NOT
59531: IFFALSE 59535
// exit ;
59533: GO 59678
// for i := 1 to 2 do
59535: LD_ADDR_VAR 0 1
59539: PUSH
59540: DOUBLE
59541: LD_INT 1
59543: DEC
59544: ST_TO_ADDR
59545: LD_INT 2
59547: PUSH
59548: FOR_TO
59549: IFFALSE 59676
// begin uc_side := your_side ;
59551: LD_ADDR_OWVAR 20
59555: PUSH
59556: LD_OWVAR 2
59560: ST_TO_ADDR
// uc_nation := nation_american ;
59561: LD_ADDR_OWVAR 21
59565: PUSH
59566: LD_INT 1
59568: ST_TO_ADDR
// vc_chassis := us_morphling ;
59569: LD_ADDR_OWVAR 37
59573: PUSH
59574: LD_INT 5
59576: ST_TO_ADDR
// vc_engine := engine_siberite ;
59577: LD_ADDR_OWVAR 39
59581: PUSH
59582: LD_INT 3
59584: ST_TO_ADDR
// vc_control := control_computer ;
59585: LD_ADDR_OWVAR 38
59589: PUSH
59590: LD_INT 3
59592: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59593: LD_ADDR_OWVAR 40
59597: PUSH
59598: LD_INT 10
59600: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59601: LD_VAR 0 2
59605: PUSH
59606: LD_INT 1
59608: ARRAY
59609: PPUSH
59610: CALL_OW 310
59614: NOT
59615: IFFALSE 59662
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59617: CALL_OW 45
59621: PPUSH
59622: LD_VAR 0 2
59626: PUSH
59627: LD_INT 1
59629: ARRAY
59630: PPUSH
59631: CALL_OW 250
59635: PPUSH
59636: LD_VAR 0 2
59640: PUSH
59641: LD_INT 1
59643: ARRAY
59644: PPUSH
59645: CALL_OW 251
59649: PPUSH
59650: LD_INT 12
59652: PPUSH
59653: LD_INT 1
59655: PPUSH
59656: CALL_OW 50
59660: GO 59674
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59662: CALL_OW 45
59666: PPUSH
59667: LD_INT 1
59669: PPUSH
59670: CALL_OW 51
// end ;
59674: GO 59548
59676: POP
59677: POP
// end ;
59678: PPOPN 2
59680: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59681: LD_EXP 13
59685: PUSH
59686: LD_EXP 59
59690: AND
59691: IFFALSE 59913
59693: GO 59695
59695: DISABLE
59696: LD_INT 0
59698: PPUSH
59699: PPUSH
59700: PPUSH
59701: PPUSH
59702: PPUSH
59703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59704: LD_ADDR_VAR 0 6
59708: PUSH
59709: LD_INT 22
59711: PUSH
59712: LD_OWVAR 2
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 21
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: LD_INT 23
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: PPUSH
59753: CALL_OW 69
59757: ST_TO_ADDR
// if not tmp then
59758: LD_VAR 0 6
59762: NOT
59763: IFFALSE 59767
// exit ;
59765: GO 59913
// s1 := rand ( 1 , 4 ) ;
59767: LD_ADDR_VAR 0 2
59771: PUSH
59772: LD_INT 1
59774: PPUSH
59775: LD_INT 4
59777: PPUSH
59778: CALL_OW 12
59782: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59783: LD_ADDR_VAR 0 4
59787: PUSH
59788: LD_VAR 0 6
59792: PUSH
59793: LD_INT 1
59795: ARRAY
59796: PPUSH
59797: LD_VAR 0 2
59801: PPUSH
59802: CALL_OW 259
59806: ST_TO_ADDR
// if s1 = 1 then
59807: LD_VAR 0 2
59811: PUSH
59812: LD_INT 1
59814: EQUAL
59815: IFFALSE 59835
// s2 := rand ( 2 , 4 ) else
59817: LD_ADDR_VAR 0 3
59821: PUSH
59822: LD_INT 2
59824: PPUSH
59825: LD_INT 4
59827: PPUSH
59828: CALL_OW 12
59832: ST_TO_ADDR
59833: GO 59843
// s2 := 1 ;
59835: LD_ADDR_VAR 0 3
59839: PUSH
59840: LD_INT 1
59842: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59843: LD_ADDR_VAR 0 5
59847: PUSH
59848: LD_VAR 0 6
59852: PUSH
59853: LD_INT 1
59855: ARRAY
59856: PPUSH
59857: LD_VAR 0 3
59861: PPUSH
59862: CALL_OW 259
59866: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59867: LD_VAR 0 6
59871: PUSH
59872: LD_INT 1
59874: ARRAY
59875: PPUSH
59876: LD_VAR 0 2
59880: PPUSH
59881: LD_VAR 0 5
59885: PPUSH
59886: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59890: LD_VAR 0 6
59894: PUSH
59895: LD_INT 1
59897: ARRAY
59898: PPUSH
59899: LD_VAR 0 3
59903: PPUSH
59904: LD_VAR 0 4
59908: PPUSH
59909: CALL_OW 237
// end ;
59913: PPOPN 6
59915: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59916: LD_EXP 13
59920: PUSH
59921: LD_EXP 60
59925: AND
59926: IFFALSE 60005
59928: GO 59930
59930: DISABLE
59931: LD_INT 0
59933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59934: LD_ADDR_VAR 0 1
59938: PUSH
59939: LD_INT 22
59941: PUSH
59942: LD_OWVAR 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 30
59953: PUSH
59954: LD_INT 3
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PPUSH
59965: CALL_OW 69
59969: ST_TO_ADDR
// if not tmp then
59970: LD_VAR 0 1
59974: NOT
59975: IFFALSE 59979
// exit ;
59977: GO 60005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59979: LD_VAR 0 1
59983: PUSH
59984: LD_INT 1
59986: PPUSH
59987: LD_VAR 0 1
59991: PPUSH
59992: CALL_OW 12
59996: ARRAY
59997: PPUSH
59998: LD_INT 1
60000: PPUSH
60001: CALL_OW 234
// end ;
60005: PPOPN 1
60007: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60008: LD_EXP 13
60012: PUSH
60013: LD_EXP 61
60017: AND
60018: IFFALSE 60130
60020: GO 60022
60022: DISABLE
60023: LD_INT 0
60025: PPUSH
60026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60027: LD_ADDR_VAR 0 2
60031: PUSH
60032: LD_INT 22
60034: PUSH
60035: LD_OWVAR 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 30
60049: PUSH
60050: LD_INT 27
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 30
60059: PUSH
60060: LD_INT 26
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 30
60069: PUSH
60070: LD_INT 28
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PPUSH
60087: CALL_OW 69
60091: ST_TO_ADDR
// if not tmp then
60092: LD_VAR 0 2
60096: NOT
60097: IFFALSE 60101
// exit ;
60099: GO 60130
// for i in tmp do
60101: LD_ADDR_VAR 0 1
60105: PUSH
60106: LD_VAR 0 2
60110: PUSH
60111: FOR_IN
60112: IFFALSE 60128
// SetLives ( i , 1 ) ;
60114: LD_VAR 0 1
60118: PPUSH
60119: LD_INT 1
60121: PPUSH
60122: CALL_OW 234
60126: GO 60111
60128: POP
60129: POP
// end ;
60130: PPOPN 2
60132: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60133: LD_EXP 13
60137: PUSH
60138: LD_EXP 62
60142: AND
60143: IFFALSE 60430
60145: GO 60147
60147: DISABLE
60148: LD_INT 0
60150: PPUSH
60151: PPUSH
60152: PPUSH
// begin i := rand ( 1 , 7 ) ;
60153: LD_ADDR_VAR 0 1
60157: PUSH
60158: LD_INT 1
60160: PPUSH
60161: LD_INT 7
60163: PPUSH
60164: CALL_OW 12
60168: ST_TO_ADDR
// case i of 1 :
60169: LD_VAR 0 1
60173: PUSH
60174: LD_INT 1
60176: DOUBLE
60177: EQUAL
60178: IFTRUE 60182
60180: GO 60192
60182: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60183: LD_STRING earthquake(getX(game), 0, 32)
60185: PPUSH
60186: CALL_OW 559
60190: GO 60430
60192: LD_INT 2
60194: DOUBLE
60195: EQUAL
60196: IFTRUE 60200
60198: GO 60214
60200: POP
// begin ToLua ( displayStucuk(); ) ;
60201: LD_STRING displayStucuk();
60203: PPUSH
60204: CALL_OW 559
// ResetFog ;
60208: CALL_OW 335
// end ; 3 :
60212: GO 60430
60214: LD_INT 3
60216: DOUBLE
60217: EQUAL
60218: IFTRUE 60222
60220: GO 60326
60222: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60223: LD_ADDR_VAR 0 2
60227: PUSH
60228: LD_INT 22
60230: PUSH
60231: LD_OWVAR 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 25
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PPUSH
60254: CALL_OW 69
60258: ST_TO_ADDR
// if not tmp then
60259: LD_VAR 0 2
60263: NOT
60264: IFFALSE 60268
// exit ;
60266: GO 60430
// un := tmp [ rand ( 1 , tmp ) ] ;
60268: LD_ADDR_VAR 0 3
60272: PUSH
60273: LD_VAR 0 2
60277: PUSH
60278: LD_INT 1
60280: PPUSH
60281: LD_VAR 0 2
60285: PPUSH
60286: CALL_OW 12
60290: ARRAY
60291: ST_TO_ADDR
// if Crawls ( un ) then
60292: LD_VAR 0 3
60296: PPUSH
60297: CALL_OW 318
60301: IFFALSE 60312
// ComWalk ( un ) ;
60303: LD_VAR 0 3
60307: PPUSH
60308: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60312: LD_VAR 0 3
60316: PPUSH
60317: LD_INT 8
60319: PPUSH
60320: CALL_OW 336
// end ; 4 :
60324: GO 60430
60326: LD_INT 4
60328: DOUBLE
60329: EQUAL
60330: IFTRUE 60334
60332: GO 60408
60334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60335: LD_ADDR_VAR 0 2
60339: PUSH
60340: LD_INT 22
60342: PUSH
60343: LD_OWVAR 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 30
60354: PUSH
60355: LD_INT 29
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PPUSH
60366: CALL_OW 69
60370: ST_TO_ADDR
// if not tmp then
60371: LD_VAR 0 2
60375: NOT
60376: IFFALSE 60380
// exit ;
60378: GO 60430
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60380: LD_VAR 0 2
60384: PUSH
60385: LD_INT 1
60387: ARRAY
60388: PPUSH
60389: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60393: LD_VAR 0 2
60397: PUSH
60398: LD_INT 1
60400: ARRAY
60401: PPUSH
60402: CALL_OW 65
// end ; 5 .. 7 :
60406: GO 60430
60408: LD_INT 5
60410: DOUBLE
60411: GREATEREQUAL
60412: IFFALSE 60420
60414: LD_INT 7
60416: DOUBLE
60417: LESSEQUAL
60418: IFTRUE 60422
60420: GO 60429
60422: POP
// StreamSibBomb ; end ;
60423: CALL 56667 0 0
60427: GO 60430
60429: POP
// end ;
60430: PPOPN 3
60432: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60433: LD_EXP 13
60437: PUSH
60438: LD_EXP 63
60442: AND
60443: IFFALSE 60599
60445: GO 60447
60447: DISABLE
60448: LD_INT 0
60450: PPUSH
60451: PPUSH
60452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60453: LD_ADDR_VAR 0 2
60457: PUSH
60458: LD_INT 81
60460: PUSH
60461: LD_OWVAR 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 21
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 21
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PPUSH
60502: CALL_OW 69
60506: ST_TO_ADDR
// if not tmp then
60507: LD_VAR 0 2
60511: NOT
60512: IFFALSE 60516
// exit ;
60514: GO 60599
// p := 0 ;
60516: LD_ADDR_VAR 0 3
60520: PUSH
60521: LD_INT 0
60523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60524: LD_INT 35
60526: PPUSH
60527: CALL_OW 67
// p := p + 1 ;
60531: LD_ADDR_VAR 0 3
60535: PUSH
60536: LD_VAR 0 3
60540: PUSH
60541: LD_INT 1
60543: PLUS
60544: ST_TO_ADDR
// for i in tmp do
60545: LD_ADDR_VAR 0 1
60549: PUSH
60550: LD_VAR 0 2
60554: PUSH
60555: FOR_IN
60556: IFFALSE 60587
// if GetLives ( i ) < 1000 then
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 256
60567: PUSH
60568: LD_INT 1000
60570: LESS
60571: IFFALSE 60585
// SetLives ( i , 1000 ) ;
60573: LD_VAR 0 1
60577: PPUSH
60578: LD_INT 1000
60580: PPUSH
60581: CALL_OW 234
60585: GO 60555
60587: POP
60588: POP
// until p > 20 ;
60589: LD_VAR 0 3
60593: PUSH
60594: LD_INT 20
60596: GREATER
60597: IFFALSE 60524
// end ;
60599: PPOPN 3
60601: END
// every 0 0$1 trigger StreamModeActive and sTime do
60602: LD_EXP 13
60606: PUSH
60607: LD_EXP 64
60611: AND
60612: IFFALSE 60647
60614: GO 60616
60616: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60617: LD_INT 28
60619: PPUSH
60620: LD_OWVAR 2
60624: PPUSH
60625: LD_INT 2
60627: PPUSH
60628: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60632: LD_INT 30
60634: PPUSH
60635: LD_OWVAR 2
60639: PPUSH
60640: LD_INT 2
60642: PPUSH
60643: CALL_OW 322
// end ;
60647: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60648: LD_EXP 13
60652: PUSH
60653: LD_EXP 65
60657: AND
60658: IFFALSE 60779
60660: GO 60662
60662: DISABLE
60663: LD_INT 0
60665: PPUSH
60666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60667: LD_ADDR_VAR 0 2
60671: PUSH
60672: LD_INT 22
60674: PUSH
60675: LD_OWVAR 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 21
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: LD_INT 23
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: PPUSH
60716: CALL_OW 69
60720: ST_TO_ADDR
// if not tmp then
60721: LD_VAR 0 2
60725: NOT
60726: IFFALSE 60730
// exit ;
60728: GO 60779
// for i in tmp do
60730: LD_ADDR_VAR 0 1
60734: PUSH
60735: LD_VAR 0 2
60739: PUSH
60740: FOR_IN
60741: IFFALSE 60777
// begin if Crawls ( i ) then
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 318
60752: IFFALSE 60763
// ComWalk ( i ) ;
60754: LD_VAR 0 1
60758: PPUSH
60759: CALL_OW 138
// SetClass ( i , 2 ) ;
60763: LD_VAR 0 1
60767: PPUSH
60768: LD_INT 2
60770: PPUSH
60771: CALL_OW 336
// end ;
60775: GO 60740
60777: POP
60778: POP
// end ;
60779: PPOPN 2
60781: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60782: LD_EXP 13
60786: PUSH
60787: LD_EXP 66
60791: AND
60792: IFFALSE 61080
60794: GO 60796
60796: DISABLE
60797: LD_INT 0
60799: PPUSH
60800: PPUSH
60801: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60802: LD_OWVAR 2
60806: PPUSH
60807: LD_INT 9
60809: PPUSH
60810: LD_INT 1
60812: PPUSH
60813: LD_INT 1
60815: PPUSH
60816: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60820: LD_INT 9
60822: PPUSH
60823: LD_OWVAR 2
60827: PPUSH
60828: CALL_OW 343
// uc_side := 9 ;
60832: LD_ADDR_OWVAR 20
60836: PUSH
60837: LD_INT 9
60839: ST_TO_ADDR
// uc_nation := 2 ;
60840: LD_ADDR_OWVAR 21
60844: PUSH
60845: LD_INT 2
60847: ST_TO_ADDR
// hc_name := Dark Warrior ;
60848: LD_ADDR_OWVAR 26
60852: PUSH
60853: LD_STRING Dark Warrior
60855: ST_TO_ADDR
// hc_gallery :=  ;
60856: LD_ADDR_OWVAR 33
60860: PUSH
60861: LD_STRING 
60863: ST_TO_ADDR
// hc_noskilllimit := true ;
60864: LD_ADDR_OWVAR 76
60868: PUSH
60869: LD_INT 1
60871: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60872: LD_ADDR_OWVAR 31
60876: PUSH
60877: LD_INT 30
60879: PUSH
60880: LD_INT 30
60882: PUSH
60883: LD_INT 30
60885: PUSH
60886: LD_INT 30
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: ST_TO_ADDR
// un := CreateHuman ;
60895: LD_ADDR_VAR 0 3
60899: PUSH
60900: CALL_OW 44
60904: ST_TO_ADDR
// hc_noskilllimit := false ;
60905: LD_ADDR_OWVAR 76
60909: PUSH
60910: LD_INT 0
60912: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60913: LD_VAR 0 3
60917: PPUSH
60918: LD_INT 1
60920: PPUSH
60921: CALL_OW 51
// ToLua ( playRanger() ) ;
60925: LD_STRING playRanger()
60927: PPUSH
60928: CALL_OW 559
// p := 0 ;
60932: LD_ADDR_VAR 0 2
60936: PUSH
60937: LD_INT 0
60939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60940: LD_INT 35
60942: PPUSH
60943: CALL_OW 67
// p := p + 1 ;
60947: LD_ADDR_VAR 0 2
60951: PUSH
60952: LD_VAR 0 2
60956: PUSH
60957: LD_INT 1
60959: PLUS
60960: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60961: LD_VAR 0 3
60965: PPUSH
60966: CALL_OW 256
60970: PUSH
60971: LD_INT 1000
60973: LESS
60974: IFFALSE 60988
// SetLives ( un , 1000 ) ;
60976: LD_VAR 0 3
60980: PPUSH
60981: LD_INT 1000
60983: PPUSH
60984: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60988: LD_VAR 0 3
60992: PPUSH
60993: LD_INT 81
60995: PUSH
60996: LD_OWVAR 2
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 91
61007: PUSH
61008: LD_VAR 0 3
61012: PUSH
61013: LD_INT 30
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: LIST
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PPUSH
61025: CALL_OW 69
61029: PPUSH
61030: LD_VAR 0 3
61034: PPUSH
61035: CALL_OW 74
61039: PPUSH
61040: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61044: LD_VAR 0 2
61048: PUSH
61049: LD_INT 80
61051: GREATER
61052: PUSH
61053: LD_VAR 0 3
61057: PPUSH
61058: CALL_OW 301
61062: OR
61063: IFFALSE 60940
// if un then
61065: LD_VAR 0 3
61069: IFFALSE 61080
// RemoveUnit ( un ) ;
61071: LD_VAR 0 3
61075: PPUSH
61076: CALL_OW 64
// end ;
61080: PPOPN 3
61082: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
61083: LD_EXP 67
61087: IFFALSE 61203
61089: GO 61091
61091: DISABLE
61092: LD_INT 0
61094: PPUSH
61095: PPUSH
61096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61097: LD_ADDR_VAR 0 2
61101: PUSH
61102: LD_INT 81
61104: PUSH
61105: LD_OWVAR 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 21
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PPUSH
61128: CALL_OW 69
61132: ST_TO_ADDR
// ToLua ( playComputer() ) ;
61133: LD_STRING playComputer()
61135: PPUSH
61136: CALL_OW 559
// if not tmp then
61140: LD_VAR 0 2
61144: NOT
61145: IFFALSE 61149
// exit ;
61147: GO 61203
// for i in tmp do
61149: LD_ADDR_VAR 0 1
61153: PUSH
61154: LD_VAR 0 2
61158: PUSH
61159: FOR_IN
61160: IFFALSE 61201
// for j := 1 to 4 do
61162: LD_ADDR_VAR 0 3
61166: PUSH
61167: DOUBLE
61168: LD_INT 1
61170: DEC
61171: ST_TO_ADDR
61172: LD_INT 4
61174: PUSH
61175: FOR_TO
61176: IFFALSE 61197
// SetSkill ( i , j , 10 ) ;
61178: LD_VAR 0 1
61182: PPUSH
61183: LD_VAR 0 3
61187: PPUSH
61188: LD_INT 10
61190: PPUSH
61191: CALL_OW 237
61195: GO 61175
61197: POP
61198: POP
61199: GO 61159
61201: POP
61202: POP
// end ;
61203: PPOPN 3
61205: END
// every 0 0$1 trigger s30 do var i , tmp ;
61206: LD_EXP 68
61210: IFFALSE 61279
61212: GO 61214
61214: DISABLE
61215: LD_INT 0
61217: PPUSH
61218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61219: LD_ADDR_VAR 0 2
61223: PUSH
61224: LD_INT 22
61226: PUSH
61227: LD_OWVAR 2
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PPUSH
61236: CALL_OW 69
61240: ST_TO_ADDR
// if not tmp then
61241: LD_VAR 0 2
61245: NOT
61246: IFFALSE 61250
// exit ;
61248: GO 61279
// for i in tmp do
61250: LD_ADDR_VAR 0 1
61254: PUSH
61255: LD_VAR 0 2
61259: PUSH
61260: FOR_IN
61261: IFFALSE 61277
// SetLives ( i , 300 ) ;
61263: LD_VAR 0 1
61267: PPUSH
61268: LD_INT 300
61270: PPUSH
61271: CALL_OW 234
61275: GO 61260
61277: POP
61278: POP
// end ;
61279: PPOPN 2
61281: END
// every 0 0$1 trigger s60 do var i , tmp ;
61282: LD_EXP 69
61286: IFFALSE 61355
61288: GO 61290
61290: DISABLE
61291: LD_INT 0
61293: PPUSH
61294: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61295: LD_ADDR_VAR 0 2
61299: PUSH
61300: LD_INT 22
61302: PUSH
61303: LD_OWVAR 2
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PPUSH
61312: CALL_OW 69
61316: ST_TO_ADDR
// if not tmp then
61317: LD_VAR 0 2
61321: NOT
61322: IFFALSE 61326
// exit ;
61324: GO 61355
// for i in tmp do
61326: LD_ADDR_VAR 0 1
61330: PUSH
61331: LD_VAR 0 2
61335: PUSH
61336: FOR_IN
61337: IFFALSE 61353
// SetLives ( i , 600 ) ;
61339: LD_VAR 0 1
61343: PPUSH
61344: LD_INT 600
61346: PPUSH
61347: CALL_OW 234
61351: GO 61336
61353: POP
61354: POP
// end ;
61355: PPOPN 2
61357: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61358: LD_INT 0
61360: PPUSH
// case cmd of 301 :
61361: LD_VAR 0 1
61365: PUSH
61366: LD_INT 301
61368: DOUBLE
61369: EQUAL
61370: IFTRUE 61374
61372: GO 61406
61374: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61375: LD_VAR 0 6
61379: PPUSH
61380: LD_VAR 0 7
61384: PPUSH
61385: LD_VAR 0 8
61389: PPUSH
61390: LD_VAR 0 4
61394: PPUSH
61395: LD_VAR 0 5
61399: PPUSH
61400: CALL 62615 0 5
61404: GO 61527
61406: LD_INT 302
61408: DOUBLE
61409: EQUAL
61410: IFTRUE 61414
61412: GO 61451
61414: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61415: LD_VAR 0 6
61419: PPUSH
61420: LD_VAR 0 7
61424: PPUSH
61425: LD_VAR 0 8
61429: PPUSH
61430: LD_VAR 0 9
61434: PPUSH
61435: LD_VAR 0 4
61439: PPUSH
61440: LD_VAR 0 5
61444: PPUSH
61445: CALL 62706 0 6
61449: GO 61527
61451: LD_INT 303
61453: DOUBLE
61454: EQUAL
61455: IFTRUE 61459
61457: GO 61496
61459: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61460: LD_VAR 0 6
61464: PPUSH
61465: LD_VAR 0 7
61469: PPUSH
61470: LD_VAR 0 8
61474: PPUSH
61475: LD_VAR 0 9
61479: PPUSH
61480: LD_VAR 0 4
61484: PPUSH
61485: LD_VAR 0 5
61489: PPUSH
61490: CALL 61532 0 6
61494: GO 61527
61496: LD_INT 304
61498: DOUBLE
61499: EQUAL
61500: IFTRUE 61504
61502: GO 61526
61504: POP
// hHackTeleport ( unit , x , y ) ; end ;
61505: LD_VAR 0 2
61509: PPUSH
61510: LD_VAR 0 4
61514: PPUSH
61515: LD_VAR 0 5
61519: PPUSH
61520: CALL 63299 0 3
61524: GO 61527
61526: POP
// end ;
61527: LD_VAR 0 12
61531: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61532: LD_INT 0
61534: PPUSH
61535: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61536: LD_VAR 0 1
61540: PUSH
61541: LD_INT 1
61543: LESS
61544: PUSH
61545: LD_VAR 0 1
61549: PUSH
61550: LD_INT 3
61552: GREATER
61553: OR
61554: PUSH
61555: LD_VAR 0 5
61559: PPUSH
61560: LD_VAR 0 6
61564: PPUSH
61565: CALL_OW 428
61569: OR
61570: IFFALSE 61574
// exit ;
61572: GO 62302
// uc_side := your_side ;
61574: LD_ADDR_OWVAR 20
61578: PUSH
61579: LD_OWVAR 2
61583: ST_TO_ADDR
// uc_nation := nation ;
61584: LD_ADDR_OWVAR 21
61588: PUSH
61589: LD_VAR 0 1
61593: ST_TO_ADDR
// bc_level = 1 ;
61594: LD_ADDR_OWVAR 43
61598: PUSH
61599: LD_INT 1
61601: ST_TO_ADDR
// case btype of 1 :
61602: LD_VAR 0 2
61606: PUSH
61607: LD_INT 1
61609: DOUBLE
61610: EQUAL
61611: IFTRUE 61615
61613: GO 61626
61615: POP
// bc_type := b_depot ; 2 :
61616: LD_ADDR_OWVAR 42
61620: PUSH
61621: LD_INT 0
61623: ST_TO_ADDR
61624: GO 62246
61626: LD_INT 2
61628: DOUBLE
61629: EQUAL
61630: IFTRUE 61634
61632: GO 61645
61634: POP
// bc_type := b_warehouse ; 3 :
61635: LD_ADDR_OWVAR 42
61639: PUSH
61640: LD_INT 1
61642: ST_TO_ADDR
61643: GO 62246
61645: LD_INT 3
61647: DOUBLE
61648: EQUAL
61649: IFTRUE 61653
61651: GO 61664
61653: POP
// bc_type := b_lab ; 4 .. 9 :
61654: LD_ADDR_OWVAR 42
61658: PUSH
61659: LD_INT 6
61661: ST_TO_ADDR
61662: GO 62246
61664: LD_INT 4
61666: DOUBLE
61667: GREATEREQUAL
61668: IFFALSE 61676
61670: LD_INT 9
61672: DOUBLE
61673: LESSEQUAL
61674: IFTRUE 61678
61676: GO 61738
61678: POP
// begin bc_type := b_lab_half ;
61679: LD_ADDR_OWVAR 42
61683: PUSH
61684: LD_INT 7
61686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61687: LD_ADDR_OWVAR 44
61691: PUSH
61692: LD_INT 10
61694: PUSH
61695: LD_INT 11
61697: PUSH
61698: LD_INT 12
61700: PUSH
61701: LD_INT 15
61703: PUSH
61704: LD_INT 14
61706: PUSH
61707: LD_INT 13
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: PUSH
61718: LD_VAR 0 2
61722: PUSH
61723: LD_INT 3
61725: MINUS
61726: ARRAY
61727: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
61728: LD_ADDR_OWVAR 45
61732: PUSH
61733: LD_INT 9
61735: ST_TO_ADDR
// end ; 10 .. 13 :
61736: GO 62246
61738: LD_INT 10
61740: DOUBLE
61741: GREATEREQUAL
61742: IFFALSE 61750
61744: LD_INT 13
61746: DOUBLE
61747: LESSEQUAL
61748: IFTRUE 61752
61750: GO 61829
61752: POP
// begin bc_type := b_lab_full ;
61753: LD_ADDR_OWVAR 42
61757: PUSH
61758: LD_INT 8
61760: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61761: LD_ADDR_OWVAR 44
61765: PUSH
61766: LD_INT 10
61768: PUSH
61769: LD_INT 12
61771: PUSH
61772: LD_INT 14
61774: PUSH
61775: LD_INT 13
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: PUSH
61784: LD_VAR 0 2
61788: PUSH
61789: LD_INT 9
61791: MINUS
61792: ARRAY
61793: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61794: LD_ADDR_OWVAR 45
61798: PUSH
61799: LD_INT 11
61801: PUSH
61802: LD_INT 15
61804: PUSH
61805: LD_INT 12
61807: PUSH
61808: LD_INT 15
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: PUSH
61817: LD_VAR 0 2
61821: PUSH
61822: LD_INT 9
61824: MINUS
61825: ARRAY
61826: ST_TO_ADDR
// end ; 14 :
61827: GO 62246
61829: LD_INT 14
61831: DOUBLE
61832: EQUAL
61833: IFTRUE 61837
61835: GO 61848
61837: POP
// bc_type := b_workshop ; 15 :
61838: LD_ADDR_OWVAR 42
61842: PUSH
61843: LD_INT 2
61845: ST_TO_ADDR
61846: GO 62246
61848: LD_INT 15
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61856
61854: GO 61867
61856: POP
// bc_type := b_factory ; 16 :
61857: LD_ADDR_OWVAR 42
61861: PUSH
61862: LD_INT 3
61864: ST_TO_ADDR
61865: GO 62246
61867: LD_INT 16
61869: DOUBLE
61870: EQUAL
61871: IFTRUE 61875
61873: GO 61886
61875: POP
// bc_type := b_ext_gun ; 17 :
61876: LD_ADDR_OWVAR 42
61880: PUSH
61881: LD_INT 17
61883: ST_TO_ADDR
61884: GO 62246
61886: LD_INT 17
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61894
61892: GO 61922
61894: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61895: LD_ADDR_OWVAR 42
61899: PUSH
61900: LD_INT 19
61902: PUSH
61903: LD_INT 23
61905: PUSH
61906: LD_INT 19
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: PUSH
61914: LD_VAR 0 1
61918: ARRAY
61919: ST_TO_ADDR
61920: GO 62246
61922: LD_INT 18
61924: DOUBLE
61925: EQUAL
61926: IFTRUE 61930
61928: GO 61941
61930: POP
// bc_type := b_ext_radar ; 19 :
61931: LD_ADDR_OWVAR 42
61935: PUSH
61936: LD_INT 20
61938: ST_TO_ADDR
61939: GO 62246
61941: LD_INT 19
61943: DOUBLE
61944: EQUAL
61945: IFTRUE 61949
61947: GO 61960
61949: POP
// bc_type := b_ext_radio ; 20 :
61950: LD_ADDR_OWVAR 42
61954: PUSH
61955: LD_INT 22
61957: ST_TO_ADDR
61958: GO 62246
61960: LD_INT 20
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61968
61966: GO 61979
61968: POP
// bc_type := b_ext_siberium ; 21 :
61969: LD_ADDR_OWVAR 42
61973: PUSH
61974: LD_INT 21
61976: ST_TO_ADDR
61977: GO 62246
61979: LD_INT 21
61981: DOUBLE
61982: EQUAL
61983: IFTRUE 61987
61985: GO 61998
61987: POP
// bc_type := b_ext_computer ; 22 :
61988: LD_ADDR_OWVAR 42
61992: PUSH
61993: LD_INT 24
61995: ST_TO_ADDR
61996: GO 62246
61998: LD_INT 22
62000: DOUBLE
62001: EQUAL
62002: IFTRUE 62006
62004: GO 62017
62006: POP
// bc_type := b_ext_track ; 23 :
62007: LD_ADDR_OWVAR 42
62011: PUSH
62012: LD_INT 16
62014: ST_TO_ADDR
62015: GO 62246
62017: LD_INT 23
62019: DOUBLE
62020: EQUAL
62021: IFTRUE 62025
62023: GO 62036
62025: POP
// bc_type := b_ext_laser ; 24 :
62026: LD_ADDR_OWVAR 42
62030: PUSH
62031: LD_INT 25
62033: ST_TO_ADDR
62034: GO 62246
62036: LD_INT 24
62038: DOUBLE
62039: EQUAL
62040: IFTRUE 62044
62042: GO 62055
62044: POP
// bc_type := b_control_tower ; 25 :
62045: LD_ADDR_OWVAR 42
62049: PUSH
62050: LD_INT 36
62052: ST_TO_ADDR
62053: GO 62246
62055: LD_INT 25
62057: DOUBLE
62058: EQUAL
62059: IFTRUE 62063
62061: GO 62074
62063: POP
// bc_type := b_breastwork ; 26 :
62064: LD_ADDR_OWVAR 42
62068: PUSH
62069: LD_INT 31
62071: ST_TO_ADDR
62072: GO 62246
62074: LD_INT 26
62076: DOUBLE
62077: EQUAL
62078: IFTRUE 62082
62080: GO 62093
62082: POP
// bc_type := b_bunker ; 27 :
62083: LD_ADDR_OWVAR 42
62087: PUSH
62088: LD_INT 32
62090: ST_TO_ADDR
62091: GO 62246
62093: LD_INT 27
62095: DOUBLE
62096: EQUAL
62097: IFTRUE 62101
62099: GO 62112
62101: POP
// bc_type := b_turret ; 28 :
62102: LD_ADDR_OWVAR 42
62106: PUSH
62107: LD_INT 33
62109: ST_TO_ADDR
62110: GO 62246
62112: LD_INT 28
62114: DOUBLE
62115: EQUAL
62116: IFTRUE 62120
62118: GO 62131
62120: POP
// bc_type := b_armoury ; 29 :
62121: LD_ADDR_OWVAR 42
62125: PUSH
62126: LD_INT 4
62128: ST_TO_ADDR
62129: GO 62246
62131: LD_INT 29
62133: DOUBLE
62134: EQUAL
62135: IFTRUE 62139
62137: GO 62150
62139: POP
// bc_type := b_barracks ; 30 :
62140: LD_ADDR_OWVAR 42
62144: PUSH
62145: LD_INT 5
62147: ST_TO_ADDR
62148: GO 62246
62150: LD_INT 30
62152: DOUBLE
62153: EQUAL
62154: IFTRUE 62158
62156: GO 62169
62158: POP
// bc_type := b_solar_power ; 31 :
62159: LD_ADDR_OWVAR 42
62163: PUSH
62164: LD_INT 27
62166: ST_TO_ADDR
62167: GO 62246
62169: LD_INT 31
62171: DOUBLE
62172: EQUAL
62173: IFTRUE 62177
62175: GO 62188
62177: POP
// bc_type := b_oil_power ; 32 :
62178: LD_ADDR_OWVAR 42
62182: PUSH
62183: LD_INT 26
62185: ST_TO_ADDR
62186: GO 62246
62188: LD_INT 32
62190: DOUBLE
62191: EQUAL
62192: IFTRUE 62196
62194: GO 62207
62196: POP
// bc_type := b_siberite_power ; 33 :
62197: LD_ADDR_OWVAR 42
62201: PUSH
62202: LD_INT 28
62204: ST_TO_ADDR
62205: GO 62246
62207: LD_INT 33
62209: DOUBLE
62210: EQUAL
62211: IFTRUE 62215
62213: GO 62226
62215: POP
// bc_type := b_oil_mine ; 34 :
62216: LD_ADDR_OWVAR 42
62220: PUSH
62221: LD_INT 29
62223: ST_TO_ADDR
62224: GO 62246
62226: LD_INT 34
62228: DOUBLE
62229: EQUAL
62230: IFTRUE 62234
62232: GO 62245
62234: POP
// bc_type := b_siberite_mine ; end ;
62235: LD_ADDR_OWVAR 42
62239: PUSH
62240: LD_INT 30
62242: ST_TO_ADDR
62243: GO 62246
62245: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62246: LD_ADDR_VAR 0 8
62250: PUSH
62251: LD_VAR 0 5
62255: PPUSH
62256: LD_VAR 0 6
62260: PPUSH
62261: LD_VAR 0 3
62265: PPUSH
62266: CALL_OW 47
62270: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62271: LD_OWVAR 42
62275: PUSH
62276: LD_INT 32
62278: PUSH
62279: LD_INT 33
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: IN
62286: IFFALSE 62302
// PlaceWeaponTurret ( b , weapon ) ;
62288: LD_VAR 0 8
62292: PPUSH
62293: LD_VAR 0 4
62297: PPUSH
62298: CALL_OW 431
// end ;
62302: LD_VAR 0 7
62306: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
62311: PPUSH
62312: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62313: LD_ADDR_VAR 0 4
62317: PUSH
62318: LD_INT 22
62320: PUSH
62321: LD_OWVAR 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: PUSH
62333: LD_INT 30
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 30
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PPUSH
62362: CALL_OW 69
62366: ST_TO_ADDR
// if not tmp then
62367: LD_VAR 0 4
62371: NOT
62372: IFFALSE 62376
// exit ;
62374: GO 62435
// for i in tmp do
62376: LD_ADDR_VAR 0 2
62380: PUSH
62381: LD_VAR 0 4
62385: PUSH
62386: FOR_IN
62387: IFFALSE 62433
// for j = 1 to 3 do
62389: LD_ADDR_VAR 0 3
62393: PUSH
62394: DOUBLE
62395: LD_INT 1
62397: DEC
62398: ST_TO_ADDR
62399: LD_INT 3
62401: PUSH
62402: FOR_TO
62403: IFFALSE 62429
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62405: LD_VAR 0 2
62409: PPUSH
62410: CALL_OW 274
62414: PPUSH
62415: LD_VAR 0 3
62419: PPUSH
62420: LD_INT 99999
62422: PPUSH
62423: CALL_OW 277
62427: GO 62402
62429: POP
62430: POP
62431: GO 62386
62433: POP
62434: POP
// end ;
62435: LD_VAR 0 1
62439: RET
// export function hHackSetLevel10 ; var i , j ; begin
62440: LD_INT 0
62442: PPUSH
62443: PPUSH
62444: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62445: LD_ADDR_VAR 0 2
62449: PUSH
62450: LD_INT 21
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PPUSH
62460: CALL_OW 69
62464: PUSH
62465: FOR_IN
62466: IFFALSE 62518
// if IsSelected ( i ) then
62468: LD_VAR 0 2
62472: PPUSH
62473: CALL_OW 306
62477: IFFALSE 62516
// begin for j := 1 to 4 do
62479: LD_ADDR_VAR 0 3
62483: PUSH
62484: DOUBLE
62485: LD_INT 1
62487: DEC
62488: ST_TO_ADDR
62489: LD_INT 4
62491: PUSH
62492: FOR_TO
62493: IFFALSE 62514
// SetSkill ( i , j , 10 ) ;
62495: LD_VAR 0 2
62499: PPUSH
62500: LD_VAR 0 3
62504: PPUSH
62505: LD_INT 10
62507: PPUSH
62508: CALL_OW 237
62512: GO 62492
62514: POP
62515: POP
// end ;
62516: GO 62465
62518: POP
62519: POP
// end ;
62520: LD_VAR 0 1
62524: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62525: LD_INT 0
62527: PPUSH
62528: PPUSH
62529: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62530: LD_ADDR_VAR 0 2
62534: PUSH
62535: LD_INT 22
62537: PUSH
62538: LD_OWVAR 2
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 21
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PPUSH
62561: CALL_OW 69
62565: PUSH
62566: FOR_IN
62567: IFFALSE 62608
// begin for j := 1 to 4 do
62569: LD_ADDR_VAR 0 3
62573: PUSH
62574: DOUBLE
62575: LD_INT 1
62577: DEC
62578: ST_TO_ADDR
62579: LD_INT 4
62581: PUSH
62582: FOR_TO
62583: IFFALSE 62604
// SetSkill ( i , j , 10 ) ;
62585: LD_VAR 0 2
62589: PPUSH
62590: LD_VAR 0 3
62594: PPUSH
62595: LD_INT 10
62597: PPUSH
62598: CALL_OW 237
62602: GO 62582
62604: POP
62605: POP
// end ;
62606: GO 62566
62608: POP
62609: POP
// end ;
62610: LD_VAR 0 1
62614: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62615: LD_INT 0
62617: PPUSH
// uc_side := your_side ;
62618: LD_ADDR_OWVAR 20
62622: PUSH
62623: LD_OWVAR 2
62627: ST_TO_ADDR
// uc_nation := nation ;
62628: LD_ADDR_OWVAR 21
62632: PUSH
62633: LD_VAR 0 1
62637: ST_TO_ADDR
// InitHc ;
62638: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62642: LD_INT 0
62644: PPUSH
62645: LD_VAR 0 2
62649: PPUSH
62650: LD_VAR 0 3
62654: PPUSH
62655: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62659: LD_VAR 0 4
62663: PPUSH
62664: LD_VAR 0 5
62668: PPUSH
62669: CALL_OW 428
62673: PUSH
62674: LD_INT 0
62676: EQUAL
62677: IFFALSE 62701
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62679: CALL_OW 44
62683: PPUSH
62684: LD_VAR 0 4
62688: PPUSH
62689: LD_VAR 0 5
62693: PPUSH
62694: LD_INT 1
62696: PPUSH
62697: CALL_OW 48
// end ;
62701: LD_VAR 0 6
62705: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62706: LD_INT 0
62708: PPUSH
62709: PPUSH
// uc_side := your_side ;
62710: LD_ADDR_OWVAR 20
62714: PUSH
62715: LD_OWVAR 2
62719: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62720: LD_VAR 0 1
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: LD_INT 4
62736: PUSH
62737: LD_INT 5
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: IN
62747: IFFALSE 62759
// uc_nation := nation_american else
62749: LD_ADDR_OWVAR 21
62753: PUSH
62754: LD_INT 1
62756: ST_TO_ADDR
62757: GO 62802
// if chassis in [ 11 , 12 , 13 , 14 ] then
62759: LD_VAR 0 1
62763: PUSH
62764: LD_INT 11
62766: PUSH
62767: LD_INT 12
62769: PUSH
62770: LD_INT 13
62772: PUSH
62773: LD_INT 14
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: IN
62782: IFFALSE 62794
// uc_nation := nation_arabian else
62784: LD_ADDR_OWVAR 21
62788: PUSH
62789: LD_INT 2
62791: ST_TO_ADDR
62792: GO 62802
// uc_nation := nation_russian ;
62794: LD_ADDR_OWVAR 21
62798: PUSH
62799: LD_INT 3
62801: ST_TO_ADDR
// vc_chassis := chassis ;
62802: LD_ADDR_OWVAR 37
62806: PUSH
62807: LD_VAR 0 1
62811: ST_TO_ADDR
// vc_engine := engine ;
62812: LD_ADDR_OWVAR 39
62816: PUSH
62817: LD_VAR 0 2
62821: ST_TO_ADDR
// vc_control := control ;
62822: LD_ADDR_OWVAR 38
62826: PUSH
62827: LD_VAR 0 3
62831: ST_TO_ADDR
// vc_weapon := weapon ;
62832: LD_ADDR_OWVAR 40
62836: PUSH
62837: LD_VAR 0 4
62841: ST_TO_ADDR
// un := CreateVehicle ;
62842: LD_ADDR_VAR 0 8
62846: PUSH
62847: CALL_OW 45
62851: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62852: LD_VAR 0 8
62856: PPUSH
62857: LD_INT 0
62859: PPUSH
62860: LD_INT 5
62862: PPUSH
62863: CALL_OW 12
62867: PPUSH
62868: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62872: LD_VAR 0 8
62876: PPUSH
62877: LD_VAR 0 5
62881: PPUSH
62882: LD_VAR 0 6
62886: PPUSH
62887: LD_INT 1
62889: PPUSH
62890: CALL_OW 48
// end ;
62894: LD_VAR 0 7
62898: RET
// export hInvincible ; every 1 do
62899: GO 62901
62901: DISABLE
// hInvincible := [ ] ;
62902: LD_ADDR_EXP 70
62906: PUSH
62907: EMPTY
62908: ST_TO_ADDR
62909: END
// every 10 do var i ;
62910: GO 62912
62912: DISABLE
62913: LD_INT 0
62915: PPUSH
// begin enable ;
62916: ENABLE
// if not hInvincible then
62917: LD_EXP 70
62921: NOT
62922: IFFALSE 62926
// exit ;
62924: GO 62970
// for i in hInvincible do
62926: LD_ADDR_VAR 0 1
62930: PUSH
62931: LD_EXP 70
62935: PUSH
62936: FOR_IN
62937: IFFALSE 62968
// if GetLives ( i ) < 1000 then
62939: LD_VAR 0 1
62943: PPUSH
62944: CALL_OW 256
62948: PUSH
62949: LD_INT 1000
62951: LESS
62952: IFFALSE 62966
// SetLives ( i , 1000 ) ;
62954: LD_VAR 0 1
62958: PPUSH
62959: LD_INT 1000
62961: PPUSH
62962: CALL_OW 234
62966: GO 62936
62968: POP
62969: POP
// end ;
62970: PPOPN 1
62972: END
// export function hHackInvincible ; var i ; begin
62973: LD_INT 0
62975: PPUSH
62976: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62977: LD_ADDR_VAR 0 2
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: LD_INT 21
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 21
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: PPUSH
63010: CALL_OW 69
63014: PUSH
63015: FOR_IN
63016: IFFALSE 63077
// if IsSelected ( i ) then
63018: LD_VAR 0 2
63022: PPUSH
63023: CALL_OW 306
63027: IFFALSE 63075
// begin if i in hInvincible then
63029: LD_VAR 0 2
63033: PUSH
63034: LD_EXP 70
63038: IN
63039: IFFALSE 63059
// hInvincible := hInvincible diff i else
63041: LD_ADDR_EXP 70
63045: PUSH
63046: LD_EXP 70
63050: PUSH
63051: LD_VAR 0 2
63055: DIFF
63056: ST_TO_ADDR
63057: GO 63075
// hInvincible := hInvincible union i ;
63059: LD_ADDR_EXP 70
63063: PUSH
63064: LD_EXP 70
63068: PUSH
63069: LD_VAR 0 2
63073: UNION
63074: ST_TO_ADDR
// end ;
63075: GO 63015
63077: POP
63078: POP
// end ;
63079: LD_VAR 0 1
63083: RET
// export function hHackInvisible ; var i , j ; begin
63084: LD_INT 0
63086: PPUSH
63087: PPUSH
63088: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63089: LD_ADDR_VAR 0 2
63093: PUSH
63094: LD_INT 21
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PPUSH
63104: CALL_OW 69
63108: PUSH
63109: FOR_IN
63110: IFFALSE 63134
// if IsSelected ( i ) then
63112: LD_VAR 0 2
63116: PPUSH
63117: CALL_OW 306
63121: IFFALSE 63132
// ComForceInvisible ( i ) ;
63123: LD_VAR 0 2
63127: PPUSH
63128: CALL_OW 496
63132: GO 63109
63134: POP
63135: POP
// end ;
63136: LD_VAR 0 1
63140: RET
// export function hHackChangeYourSide ; begin
63141: LD_INT 0
63143: PPUSH
// if your_side = 8 then
63144: LD_OWVAR 2
63148: PUSH
63149: LD_INT 8
63151: EQUAL
63152: IFFALSE 63164
// your_side := 0 else
63154: LD_ADDR_OWVAR 2
63158: PUSH
63159: LD_INT 0
63161: ST_TO_ADDR
63162: GO 63178
// your_side := your_side + 1 ;
63164: LD_ADDR_OWVAR 2
63168: PUSH
63169: LD_OWVAR 2
63173: PUSH
63174: LD_INT 1
63176: PLUS
63177: ST_TO_ADDR
// end ;
63178: LD_VAR 0 1
63182: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63183: LD_INT 0
63185: PPUSH
63186: PPUSH
63187: PPUSH
// for i in all_units do
63188: LD_ADDR_VAR 0 2
63192: PUSH
63193: LD_OWVAR 3
63197: PUSH
63198: FOR_IN
63199: IFFALSE 63277
// if IsSelected ( i ) then
63201: LD_VAR 0 2
63205: PPUSH
63206: CALL_OW 306
63210: IFFALSE 63275
// begin j := GetSide ( i ) ;
63212: LD_ADDR_VAR 0 3
63216: PUSH
63217: LD_VAR 0 2
63221: PPUSH
63222: CALL_OW 255
63226: ST_TO_ADDR
// if j = 8 then
63227: LD_VAR 0 3
63231: PUSH
63232: LD_INT 8
63234: EQUAL
63235: IFFALSE 63247
// j := 0 else
63237: LD_ADDR_VAR 0 3
63241: PUSH
63242: LD_INT 0
63244: ST_TO_ADDR
63245: GO 63261
// j := j + 1 ;
63247: LD_ADDR_VAR 0 3
63251: PUSH
63252: LD_VAR 0 3
63256: PUSH
63257: LD_INT 1
63259: PLUS
63260: ST_TO_ADDR
// SetSide ( i , j ) ;
63261: LD_VAR 0 2
63265: PPUSH
63266: LD_VAR 0 3
63270: PPUSH
63271: CALL_OW 235
// end ;
63275: GO 63198
63277: POP
63278: POP
// end ;
63279: LD_VAR 0 1
63283: RET
// export function hHackFog ; begin
63284: LD_INT 0
63286: PPUSH
// FogOff ( true ) ;
63287: LD_INT 1
63289: PPUSH
63290: CALL_OW 344
// end ;
63294: LD_VAR 0 1
63298: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63299: LD_INT 0
63301: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63302: LD_VAR 0 1
63306: PPUSH
63307: LD_VAR 0 2
63311: PPUSH
63312: LD_VAR 0 3
63316: PPUSH
63317: LD_INT 1
63319: PPUSH
63320: LD_INT 1
63322: PPUSH
63323: CALL_OW 483
// CenterOnXY ( x , y ) ;
63327: LD_VAR 0 2
63331: PPUSH
63332: LD_VAR 0 3
63336: PPUSH
63337: CALL_OW 84
// end ;
63341: LD_VAR 0 4
63345: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63346: LD_INT 0
63348: PPUSH
63349: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63350: LD_VAR 0 1
63354: NOT
63355: PUSH
63356: LD_VAR 0 2
63360: PPUSH
63361: LD_VAR 0 3
63365: PPUSH
63366: CALL_OW 488
63370: NOT
63371: OR
63372: PUSH
63373: LD_VAR 0 1
63377: PPUSH
63378: CALL_OW 266
63382: PUSH
63383: LD_INT 3
63385: NONEQUAL
63386: PUSH
63387: LD_VAR 0 1
63391: PPUSH
63392: CALL_OW 247
63396: PUSH
63397: LD_INT 1
63399: EQUAL
63400: NOT
63401: AND
63402: OR
63403: IFFALSE 63407
// exit ;
63405: GO 63689
// if GetType ( factory ) = unit_human then
63407: LD_VAR 0 1
63411: PPUSH
63412: CALL_OW 247
63416: PUSH
63417: LD_INT 1
63419: EQUAL
63420: IFFALSE 63437
// factory := IsInUnit ( factory ) ;
63422: LD_ADDR_VAR 0 1
63426: PUSH
63427: LD_VAR 0 1
63431: PPUSH
63432: CALL_OW 310
63436: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63437: LD_VAR 0 1
63441: PPUSH
63442: CALL_OW 266
63446: PUSH
63447: LD_INT 3
63449: NONEQUAL
63450: IFFALSE 63454
// exit ;
63452: GO 63689
// for i := 1 to Count ( factoryWaypoints ) do
63454: LD_ADDR_VAR 0 5
63458: PUSH
63459: DOUBLE
63460: LD_INT 1
63462: DEC
63463: ST_TO_ADDR
63464: LD_EXP 71
63468: PPUSH
63469: CALL 2639 0 1
63473: PUSH
63474: FOR_TO
63475: IFFALSE 63637
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63477: LD_VAR 0 2
63481: PPUSH
63482: LD_VAR 0 3
63486: PPUSH
63487: CALL_OW 428
63491: PUSH
63492: LD_EXP 71
63496: PUSH
63497: LD_VAR 0 5
63501: ARRAY
63502: PUSH
63503: LD_INT 2
63505: ARRAY
63506: EQUAL
63507: IFFALSE 63539
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63509: LD_ADDR_EXP 71
63513: PUSH
63514: LD_EXP 71
63518: PPUSH
63519: LD_VAR 0 5
63523: PPUSH
63524: CALL_OW 3
63528: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63529: CALL 63694 0 0
// exit ;
63533: POP
63534: POP
63535: GO 63689
// end else
63537: GO 63635
// if factory = factoryWaypoints [ i ] [ 2 ] then
63539: LD_VAR 0 1
63543: PUSH
63544: LD_EXP 71
63548: PUSH
63549: LD_VAR 0 5
63553: ARRAY
63554: PUSH
63555: LD_INT 2
63557: ARRAY
63558: EQUAL
63559: IFFALSE 63635
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63561: LD_ADDR_EXP 71
63565: PUSH
63566: LD_EXP 71
63570: PPUSH
63571: LD_VAR 0 5
63575: PPUSH
63576: CALL_OW 3
63580: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63581: LD_ADDR_EXP 71
63585: PUSH
63586: LD_EXP 71
63590: PPUSH
63591: LD_VAR 0 1
63595: PPUSH
63596: CALL_OW 255
63600: PUSH
63601: LD_VAR 0 1
63605: PUSH
63606: LD_VAR 0 2
63610: PUSH
63611: LD_VAR 0 3
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: PPUSH
63622: CALL 38248 0 2
63626: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63627: CALL 63694 0 0
// exit ;
63631: POP
63632: POP
63633: GO 63689
// end ; end ;
63635: GO 63474
63637: POP
63638: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63639: LD_ADDR_EXP 71
63643: PUSH
63644: LD_EXP 71
63648: PPUSH
63649: LD_VAR 0 1
63653: PPUSH
63654: CALL_OW 255
63658: PUSH
63659: LD_VAR 0 1
63663: PUSH
63664: LD_VAR 0 2
63668: PUSH
63669: LD_VAR 0 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: PPUSH
63680: CALL 38248 0 2
63684: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63685: CALL 63694 0 0
// end ;
63689: LD_VAR 0 4
63693: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63694: LD_INT 0
63696: PPUSH
63697: PPUSH
63698: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63699: LD_STRING resetFactoryWaypoint();
63701: PPUSH
63702: CALL_OW 559
// if factoryWaypoints then
63706: LD_EXP 71
63710: IFFALSE 63831
// begin list := factoryWaypoints ;
63712: LD_ADDR_VAR 0 3
63716: PUSH
63717: LD_EXP 71
63721: ST_TO_ADDR
// for i := 1 to list do
63722: LD_ADDR_VAR 0 2
63726: PUSH
63727: DOUBLE
63728: LD_INT 1
63730: DEC
63731: ST_TO_ADDR
63732: LD_VAR 0 3
63736: PUSH
63737: FOR_TO
63738: IFFALSE 63829
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63740: LD_STRING setFactoryWaypointXY(
63742: PUSH
63743: LD_VAR 0 3
63747: PUSH
63748: LD_VAR 0 2
63752: ARRAY
63753: PUSH
63754: LD_INT 1
63756: ARRAY
63757: STR
63758: PUSH
63759: LD_STRING ,
63761: STR
63762: PUSH
63763: LD_VAR 0 3
63767: PUSH
63768: LD_VAR 0 2
63772: ARRAY
63773: PUSH
63774: LD_INT 2
63776: ARRAY
63777: STR
63778: PUSH
63779: LD_STRING ,
63781: STR
63782: PUSH
63783: LD_VAR 0 3
63787: PUSH
63788: LD_VAR 0 2
63792: ARRAY
63793: PUSH
63794: LD_INT 3
63796: ARRAY
63797: STR
63798: PUSH
63799: LD_STRING ,
63801: STR
63802: PUSH
63803: LD_VAR 0 3
63807: PUSH
63808: LD_VAR 0 2
63812: ARRAY
63813: PUSH
63814: LD_INT 4
63816: ARRAY
63817: STR
63818: PUSH
63819: LD_STRING )
63821: STR
63822: PPUSH
63823: CALL_OW 559
63827: GO 63737
63829: POP
63830: POP
// end ; end ;
63831: LD_VAR 0 1
63835: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63836: LD_INT 0
63838: PPUSH
// if HexInfo ( x , y ) = warehouse then
63839: LD_VAR 0 2
63843: PPUSH
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL_OW 428
63853: PUSH
63854: LD_VAR 0 1
63858: EQUAL
63859: IFFALSE 63886
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63861: LD_ADDR_EXP 72
63865: PUSH
63866: LD_EXP 72
63870: PPUSH
63871: LD_VAR 0 1
63875: PPUSH
63876: LD_INT 0
63878: PPUSH
63879: CALL_OW 1
63883: ST_TO_ADDR
63884: GO 63937
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63886: LD_ADDR_EXP 72
63890: PUSH
63891: LD_EXP 72
63895: PPUSH
63896: LD_VAR 0 1
63900: PPUSH
63901: LD_VAR 0 1
63905: PPUSH
63906: CALL_OW 255
63910: PUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_VAR 0 3
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: PPUSH
63932: CALL_OW 1
63936: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63937: CALL 63946 0 0
// end ;
63941: LD_VAR 0 4
63945: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63946: LD_INT 0
63948: PPUSH
63949: PPUSH
63950: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63951: LD_STRING resetWarehouseGatheringPoints();
63953: PPUSH
63954: CALL_OW 559
// if warehouseGatheringPoints then
63958: LD_EXP 72
63962: IFFALSE 64088
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63964: LD_ADDR_VAR 0 3
63968: PUSH
63969: LD_EXP 72
63973: PPUSH
63974: CALL 42010 0 1
63978: ST_TO_ADDR
// for i := 1 to list do
63979: LD_ADDR_VAR 0 2
63983: PUSH
63984: DOUBLE
63985: LD_INT 1
63987: DEC
63988: ST_TO_ADDR
63989: LD_VAR 0 3
63993: PUSH
63994: FOR_TO
63995: IFFALSE 64086
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63997: LD_STRING setWarehouseGatheringPointXY(
63999: PUSH
64000: LD_VAR 0 3
64004: PUSH
64005: LD_VAR 0 2
64009: ARRAY
64010: PUSH
64011: LD_INT 1
64013: ARRAY
64014: STR
64015: PUSH
64016: LD_STRING ,
64018: STR
64019: PUSH
64020: LD_VAR 0 3
64024: PUSH
64025: LD_VAR 0 2
64029: ARRAY
64030: PUSH
64031: LD_INT 2
64033: ARRAY
64034: STR
64035: PUSH
64036: LD_STRING ,
64038: STR
64039: PUSH
64040: LD_VAR 0 3
64044: PUSH
64045: LD_VAR 0 2
64049: ARRAY
64050: PUSH
64051: LD_INT 3
64053: ARRAY
64054: STR
64055: PUSH
64056: LD_STRING ,
64058: STR
64059: PUSH
64060: LD_VAR 0 3
64064: PUSH
64065: LD_VAR 0 2
64069: ARRAY
64070: PUSH
64071: LD_INT 4
64073: ARRAY
64074: STR
64075: PUSH
64076: LD_STRING )
64078: STR
64079: PPUSH
64080: CALL_OW 559
64084: GO 63994
64086: POP
64087: POP
// end ; end ;
64088: LD_VAR 0 1
64092: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
64093: LD_EXP 72
64097: IFFALSE 64782
64099: GO 64101
64101: DISABLE
64102: LD_INT 0
64104: PPUSH
64105: PPUSH
64106: PPUSH
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
64111: PPUSH
64112: PPUSH
// begin enable ;
64113: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_EXP 72
64123: PPUSH
64124: CALL 42010 0 1
64128: ST_TO_ADDR
// if not list then
64129: LD_VAR 0 3
64133: NOT
64134: IFFALSE 64138
// exit ;
64136: GO 64782
// for i := 1 to list do
64138: LD_ADDR_VAR 0 1
64142: PUSH
64143: DOUBLE
64144: LD_INT 1
64146: DEC
64147: ST_TO_ADDR
64148: LD_VAR 0 3
64152: PUSH
64153: FOR_TO
64154: IFFALSE 64780
// begin depot := list [ i ] [ 2 ] ;
64156: LD_ADDR_VAR 0 8
64160: PUSH
64161: LD_VAR 0 3
64165: PUSH
64166: LD_VAR 0 1
64170: ARRAY
64171: PUSH
64172: LD_INT 2
64174: ARRAY
64175: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
64176: LD_ADDR_VAR 0 5
64180: PUSH
64181: LD_VAR 0 3
64185: PUSH
64186: LD_VAR 0 1
64190: ARRAY
64191: PUSH
64192: LD_INT 1
64194: ARRAY
64195: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
64196: LD_VAR 0 8
64200: PPUSH
64201: CALL_OW 301
64205: PUSH
64206: LD_VAR 0 5
64210: PUSH
64211: LD_VAR 0 8
64215: PPUSH
64216: CALL_OW 255
64220: NONEQUAL
64221: OR
64222: IFFALSE 64251
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
64224: LD_ADDR_EXP 72
64228: PUSH
64229: LD_EXP 72
64233: PPUSH
64234: LD_VAR 0 8
64238: PPUSH
64239: LD_INT 0
64241: PPUSH
64242: CALL_OW 1
64246: ST_TO_ADDR
// exit ;
64247: POP
64248: POP
64249: GO 64782
// end ; x := list [ i ] [ 3 ] ;
64251: LD_ADDR_VAR 0 6
64255: PUSH
64256: LD_VAR 0 3
64260: PUSH
64261: LD_VAR 0 1
64265: ARRAY
64266: PUSH
64267: LD_INT 3
64269: ARRAY
64270: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
64271: LD_ADDR_VAR 0 7
64275: PUSH
64276: LD_VAR 0 3
64280: PUSH
64281: LD_VAR 0 1
64285: ARRAY
64286: PUSH
64287: LD_INT 4
64289: ARRAY
64290: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
64291: LD_ADDR_VAR 0 9
64295: PUSH
64296: LD_VAR 0 6
64300: PPUSH
64301: LD_VAR 0 7
64305: PPUSH
64306: LD_INT 16
64308: PPUSH
64309: CALL 40594 0 3
64313: ST_TO_ADDR
// if not cratesNearbyPoint then
64314: LD_VAR 0 9
64318: NOT
64319: IFFALSE 64325
// exit ;
64321: POP
64322: POP
64323: GO 64782
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
64325: LD_ADDR_VAR 0 4
64329: PUSH
64330: LD_INT 22
64332: PUSH
64333: LD_VAR 0 5
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 3
64344: PUSH
64345: LD_INT 60
64347: PUSH
64348: EMPTY
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 91
64357: PUSH
64358: LD_VAR 0 8
64362: PUSH
64363: LD_INT 6
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: LD_INT 25
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 25
64386: PUSH
64387: LD_INT 16
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: PPUSH
64405: CALL_OW 69
64409: PUSH
64410: LD_VAR 0 8
64414: PPUSH
64415: CALL_OW 313
64419: PPUSH
64420: LD_INT 3
64422: PUSH
64423: LD_INT 60
64425: PUSH
64426: EMPTY
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: LD_INT 25
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 25
64448: PUSH
64449: LD_INT 16
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PPUSH
64465: CALL_OW 72
64469: UNION
64470: ST_TO_ADDR
// if tmp then
64471: LD_VAR 0 4
64475: IFFALSE 64555
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64477: LD_ADDR_VAR 0 4
64481: PUSH
64482: LD_VAR 0 4
64486: PPUSH
64487: LD_INT 3
64489: PPUSH
64490: CALL 38563 0 2
64494: ST_TO_ADDR
// for j in tmp do
64495: LD_ADDR_VAR 0 2
64499: PUSH
64500: LD_VAR 0 4
64504: PUSH
64505: FOR_IN
64506: IFFALSE 64549
// begin if IsInUnit ( j ) then
64508: LD_VAR 0 2
64512: PPUSH
64513: CALL_OW 310
64517: IFFALSE 64528
// ComExit ( j ) ;
64519: LD_VAR 0 2
64523: PPUSH
64524: CALL 38646 0 1
// AddComCollect ( j , x , y ) ;
64528: LD_VAR 0 2
64532: PPUSH
64533: LD_VAR 0 6
64537: PPUSH
64538: LD_VAR 0 7
64542: PPUSH
64543: CALL_OW 177
// end ;
64547: GO 64505
64549: POP
64550: POP
// exit ;
64551: POP
64552: POP
64553: GO 64782
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64555: LD_ADDR_VAR 0 4
64559: PUSH
64560: LD_INT 22
64562: PUSH
64563: LD_VAR 0 5
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 91
64574: PUSH
64575: LD_VAR 0 8
64579: PUSH
64580: LD_INT 8
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: LD_INT 34
64593: PUSH
64594: LD_INT 12
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 34
64603: PUSH
64604: LD_INT 51
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 34
64613: PUSH
64614: LD_INT 32
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 34
64623: PUSH
64624: LD_INT 89
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: LIST
64642: PPUSH
64643: CALL_OW 69
64647: ST_TO_ADDR
// if tmp then
64648: LD_VAR 0 4
64652: IFFALSE 64778
// begin for j in tmp do
64654: LD_ADDR_VAR 0 2
64658: PUSH
64659: LD_VAR 0 4
64663: PUSH
64664: FOR_IN
64665: IFFALSE 64776
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64667: LD_VAR 0 2
64671: PPUSH
64672: CALL_OW 262
64676: PUSH
64677: LD_INT 3
64679: EQUAL
64680: PUSH
64681: LD_VAR 0 2
64685: PPUSH
64686: CALL_OW 261
64690: PUSH
64691: LD_INT 20
64693: GREATER
64694: OR
64695: PUSH
64696: LD_VAR 0 2
64700: PPUSH
64701: CALL_OW 314
64705: NOT
64706: AND
64707: PUSH
64708: LD_VAR 0 2
64712: PPUSH
64713: CALL_OW 263
64717: PUSH
64718: LD_INT 1
64720: NONEQUAL
64721: PUSH
64722: LD_VAR 0 2
64726: PPUSH
64727: CALL_OW 311
64731: OR
64732: AND
64733: IFFALSE 64774
// begin ComCollect ( j , x , y ) ;
64735: LD_VAR 0 2
64739: PPUSH
64740: LD_VAR 0 6
64744: PPUSH
64745: LD_VAR 0 7
64749: PPUSH
64750: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64754: LD_VAR 0 2
64758: PPUSH
64759: LD_VAR 0 8
64763: PPUSH
64764: CALL_OW 172
// exit ;
64768: POP
64769: POP
64770: POP
64771: POP
64772: GO 64782
// end ;
64774: GO 64664
64776: POP
64777: POP
// end ; end ;
64778: GO 64153
64780: POP
64781: POP
// end ;
64782: PPOPN 9
64784: END
