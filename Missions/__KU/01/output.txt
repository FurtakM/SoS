// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: IFTRUE 247
 240: PUSH
 241: LD_VAR 0 2
 245: NOT
 246: OR
 247: IFFALSE 251
// exit ;
 249: GO 360
// result := 0 ;
 251: LD_ADDR_VAR 0 3
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// for i in tmp do
 259: LD_ADDR_VAR 0 4
 263: PUSH
 264: LD_VAR 0 6
 268: PUSH
 269: FOR_IN
 270: IFFALSE 358
// for j := 1 to 2 do
 272: LD_ADDR_VAR 0 5
 276: PUSH
 277: DOUBLE
 278: LD_INT 1
 280: DEC
 281: ST_TO_ADDR
 282: LD_INT 2
 284: PUSH
 285: FOR_TO
 286: IFFALSE 354
// if GetLabKind ( i , j ) in kinds then
 288: LD_VAR 0 4
 292: PPUSH
 293: LD_VAR 0 5
 297: PPUSH
 298: CALL_OW 268
 302: PUSH
 303: LD_VAR 0 2
 307: IN
 308: IFFALSE 352
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 310: LD_ADDR_VAR 0 2
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_VAR 0 4
 324: PPUSH
 325: LD_VAR 0 5
 329: PPUSH
 330: CALL_OW 268
 334: DIFF
 335: ST_TO_ADDR
// result := result + 1 ;
 336: LD_ADDR_VAR 0 3
 340: PUSH
 341: LD_VAR 0 3
 345: PUSH
 346: LD_INT 1
 348: PLUS
 349: ST_TO_ADDR
// continue ;
 350: GO 285
// end ;
 352: GO 285
 354: POP
 355: POP
 356: GO 269
 358: POP
 359: POP
// end ;
 360: LD_VAR 0 3
 364: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 365: LD_ADDR_OWVAR 47
 369: PUSH
 370: LD_VAR 0 11
 374: ST_TO_ADDR
// end ;
 375: PPOPN 11
 377: END
// export Omar ; every 0 0$1 do
 378: GO 380
 380: DISABLE
// begin uc_side := 1 ;
 381: LD_ADDR_OWVAR 20
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// uc_nation := 2 ;
 389: LD_ADDR_OWVAR 21
 393: PUSH
 394: LD_INT 2
 396: ST_TO_ADDR
// hc_class := class_desert_warior ;
 397: LD_ADDR_OWVAR 28
 401: PUSH
 402: LD_INT 11
 404: ST_TO_ADDR
// hc_sex := sex_male ;
 405: LD_ADDR_OWVAR 27
 409: PUSH
 410: LD_INT 1
 412: ST_TO_ADDR
// hc_name := Omar ;
 413: LD_ADDR_OWVAR 26
 417: PUSH
 418: LD_STRING Omar
 420: ST_TO_ADDR
// Omar := CreateHuman ;
 421: LD_ADDR_EXP 1
 425: PUSH
 426: CALL_OW 44
 430: ST_TO_ADDR
// SetTag ( Omar , 500 ) ;
 431: LD_EXP 1
 435: PPUSH
 436: LD_INT 500
 438: PPUSH
 439: CALL_OW 109
// PlaceUnitXY ( Omar , 27 , 27 , false ) ;
 443: LD_EXP 1
 447: PPUSH
 448: LD_INT 27
 450: PPUSH
 451: LD_INT 27
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 48
// end ;
 461: END
// every 0 0$1 do var i ;
 462: GO 464
 464: DISABLE
 465: LD_INT 0
 467: PPUSH
// begin for i := 1 to 3 do
 468: LD_ADDR_VAR 0 1
 472: PUSH
 473: DOUBLE
 474: LD_INT 1
 476: DEC
 477: ST_TO_ADDR
 478: LD_INT 3
 480: PUSH
 481: FOR_TO
 482: IFFALSE 513
// AddComAttackPlace ( ar1 , 59 + ( ( i - 1 ) * 2 ) , 74 ) ;
 484: LD_INT 67
 486: PPUSH
 487: LD_INT 59
 489: PUSH
 490: LD_VAR 0 1
 494: PUSH
 495: LD_INT 1
 497: MINUS
 498: PUSH
 499: LD_INT 2
 501: MUL
 502: PLUS
 503: PPUSH
 504: LD_INT 74
 506: PPUSH
 507: CALL_OW 176
 511: GO 481
 513: POP
 514: POP
// end ; end_of_file
 515: PPOPN 1
 517: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
// if exist_mode then
 522: LD_VAR 0 2
 526: IFFALSE 572
// begin unit := CreateCharacter ( prefix & ident ) ;
 528: LD_ADDR_VAR 0 5
 532: PUSH
 533: LD_VAR 0 3
 537: PUSH
 538: LD_VAR 0 1
 542: STR
 543: PPUSH
 544: CALL_OW 34
 548: ST_TO_ADDR
// if unit then
 549: LD_VAR 0 5
 553: IFFALSE 570
// DeleteCharacters ( prefix & ident ) ;
 555: LD_VAR 0 3
 559: PUSH
 560: LD_VAR 0 1
 564: STR
 565: PPUSH
 566: CALL_OW 40
// end else
 570: GO 587
// unit := NewCharacter ( ident ) ;
 572: LD_ADDR_VAR 0 5
 576: PUSH
 577: LD_VAR 0 1
 581: PPUSH
 582: CALL_OW 25
 586: ST_TO_ADDR
// result := unit ;
 587: LD_ADDR_VAR 0 4
 591: PUSH
 592: LD_VAR 0 5
 596: ST_TO_ADDR
// end ;
 597: LD_VAR 0 4
 601: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
// if exist_mode then
 606: LD_VAR 0 2
 610: IFFALSE 635
// unit := CreateCharacter ( prefix & ident ) else
 612: LD_ADDR_VAR 0 5
 616: PUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_VAR 0 1
 626: STR
 627: PPUSH
 628: CALL_OW 34
 632: ST_TO_ADDR
 633: GO 650
// unit := NewCharacter ( ident ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_VAR 0 1
 644: PPUSH
 645: CALL_OW 25
 649: ST_TO_ADDR
// result := unit ;
 650: LD_ADDR_VAR 0 4
 654: PUSH
 655: LD_VAR 0 5
 659: ST_TO_ADDR
// end ;
 660: LD_VAR 0 4
 664: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 665: LD_INT 0
 667: PPUSH
 668: PPUSH
// if not side or not nation then
 669: LD_VAR 0 1
 673: NOT
 674: IFTRUE 683
 676: PUSH
 677: LD_VAR 0 2
 681: NOT
 682: OR
 683: IFFALSE 687
// exit ;
 685: GO 1481
// case nation of nation_american :
 687: LD_VAR 0 2
 691: PUSH
 692: LD_INT 1
 694: DOUBLE
 695: EQUAL
 696: IFTRUE 700
 698: GO 922
 700: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
 701: LD_ADDR_VAR 0 4
 705: PUSH
 706: LD_INT 35
 708: PUSH
 709: LD_INT 45
 711: PUSH
 712: LD_INT 46
 714: PUSH
 715: LD_INT 47
 717: PUSH
 718: LD_INT 82
 720: PUSH
 721: LD_INT 83
 723: PUSH
 724: LD_INT 84
 726: PUSH
 727: LD_INT 85
 729: PUSH
 730: LD_INT 86
 732: PUSH
 733: LD_INT 1
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: LD_INT 6
 741: PUSH
 742: LD_INT 15
 744: PUSH
 745: LD_INT 16
 747: PUSH
 748: LD_INT 7
 750: PUSH
 751: LD_INT 12
 753: PUSH
 754: LD_INT 13
 756: PUSH
 757: LD_INT 10
 759: PUSH
 760: LD_INT 14
 762: PUSH
 763: LD_INT 20
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 22
 771: PUSH
 772: LD_INT 25
 774: PUSH
 775: LD_INT 32
 777: PUSH
 778: LD_INT 27
 780: PUSH
 781: LD_INT 36
 783: PUSH
 784: LD_INT 69
 786: PUSH
 787: LD_INT 39
 789: PUSH
 790: LD_INT 34
 792: PUSH
 793: LD_INT 40
 795: PUSH
 796: LD_INT 48
 798: PUSH
 799: LD_INT 49
 801: PUSH
 802: LD_INT 50
 804: PUSH
 805: LD_INT 51
 807: PUSH
 808: LD_INT 52
 810: PUSH
 811: LD_INT 53
 813: PUSH
 814: LD_INT 54
 816: PUSH
 817: LD_INT 55
 819: PUSH
 820: LD_INT 56
 822: PUSH
 823: LD_INT 57
 825: PUSH
 826: LD_INT 58
 828: PUSH
 829: LD_INT 59
 831: PUSH
 832: LD_INT 60
 834: PUSH
 835: LD_INT 61
 837: PUSH
 838: LD_INT 62
 840: PUSH
 841: LD_INT 80
 843: PUSH
 844: LD_INT 82
 846: PUSH
 847: LD_INT 83
 849: PUSH
 850: LD_INT 84
 852: PUSH
 853: LD_INT 85
 855: PUSH
 856: LD_INT 86
 858: PUSH
 859: LD_INT 90
 861: PUSH
 862: LD_INT 93
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: ST_TO_ADDR
 920: GO 1403
 922: LD_INT 2
 924: DOUBLE
 925: EQUAL
 926: IFTRUE 930
 928: GO 1164
 930: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
 931: LD_ADDR_VAR 0 4
 935: PUSH
 936: LD_INT 35
 938: PUSH
 939: LD_INT 45
 941: PUSH
 942: LD_INT 46
 944: PUSH
 945: LD_INT 47
 947: PUSH
 948: LD_INT 82
 950: PUSH
 951: LD_INT 83
 953: PUSH
 954: LD_INT 84
 956: PUSH
 957: LD_INT 85
 959: PUSH
 960: LD_INT 87
 962: PUSH
 963: LD_INT 70
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: LD_INT 11
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 4
 977: PUSH
 978: LD_INT 5
 980: PUSH
 981: LD_INT 6
 983: PUSH
 984: LD_INT 15
 986: PUSH
 987: LD_INT 18
 989: PUSH
 990: LD_INT 7
 992: PUSH
 993: LD_INT 17
 995: PUSH
 996: LD_INT 8
 998: PUSH
 999: LD_INT 20
1001: PUSH
1002: LD_INT 21
1004: PUSH
1005: LD_INT 22
1007: PUSH
1008: LD_INT 72
1010: PUSH
1011: LD_INT 26
1013: PUSH
1014: LD_INT 69
1016: PUSH
1017: LD_INT 39
1019: PUSH
1020: LD_INT 40
1022: PUSH
1023: LD_INT 41
1025: PUSH
1026: LD_INT 42
1028: PUSH
1029: LD_INT 43
1031: PUSH
1032: LD_INT 48
1034: PUSH
1035: LD_INT 49
1037: PUSH
1038: LD_INT 50
1040: PUSH
1041: LD_INT 51
1043: PUSH
1044: LD_INT 52
1046: PUSH
1047: LD_INT 53
1049: PUSH
1050: LD_INT 54
1052: PUSH
1053: LD_INT 55
1055: PUSH
1056: LD_INT 56
1058: PUSH
1059: LD_INT 60
1061: PUSH
1062: LD_INT 61
1064: PUSH
1065: LD_INT 62
1067: PUSH
1068: LD_INT 66
1070: PUSH
1071: LD_INT 67
1073: PUSH
1074: LD_INT 68
1076: PUSH
1077: LD_INT 81
1079: PUSH
1080: LD_INT 82
1082: PUSH
1083: LD_INT 83
1085: PUSH
1086: LD_INT 84
1088: PUSH
1089: LD_INT 85
1091: PUSH
1092: LD_INT 87
1094: PUSH
1095: LD_INT 88
1097: PUSH
1098: LD_INT 92
1100: PUSH
1101: LD_INT 94
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: ST_TO_ADDR
1162: GO 1403
1164: LD_INT 3
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1402
1172: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: LD_INT 46
1180: PUSH
1181: LD_INT 47
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: LD_INT 82
1192: PUSH
1193: LD_INT 83
1195: PUSH
1196: LD_INT 84
1198: PUSH
1199: LD_INT 85
1201: PUSH
1202: LD_INT 86
1204: PUSH
1205: LD_INT 11
1207: PUSH
1208: LD_INT 9
1210: PUSH
1211: LD_INT 20
1213: PUSH
1214: LD_INT 19
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 24
1222: PUSH
1223: LD_INT 22
1225: PUSH
1226: LD_INT 25
1228: PUSH
1229: LD_INT 28
1231: PUSH
1232: LD_INT 29
1234: PUSH
1235: LD_INT 30
1237: PUSH
1238: LD_INT 31
1240: PUSH
1241: LD_INT 37
1243: PUSH
1244: LD_INT 38
1246: PUSH
1247: LD_INT 32
1249: PUSH
1250: LD_INT 27
1252: PUSH
1253: LD_INT 33
1255: PUSH
1256: LD_INT 69
1258: PUSH
1259: LD_INT 39
1261: PUSH
1262: LD_INT 34
1264: PUSH
1265: LD_INT 40
1267: PUSH
1268: LD_INT 71
1270: PUSH
1271: LD_INT 23
1273: PUSH
1274: LD_INT 44
1276: PUSH
1277: LD_INT 48
1279: PUSH
1280: LD_INT 49
1282: PUSH
1283: LD_INT 50
1285: PUSH
1286: LD_INT 51
1288: PUSH
1289: LD_INT 52
1291: PUSH
1292: LD_INT 53
1294: PUSH
1295: LD_INT 54
1297: PUSH
1298: LD_INT 55
1300: PUSH
1301: LD_INT 56
1303: PUSH
1304: LD_INT 57
1306: PUSH
1307: LD_INT 58
1309: PUSH
1310: LD_INT 59
1312: PUSH
1313: LD_INT 63
1315: PUSH
1316: LD_INT 64
1318: PUSH
1319: LD_INT 65
1321: PUSH
1322: LD_INT 82
1324: PUSH
1325: LD_INT 83
1327: PUSH
1328: LD_INT 84
1330: PUSH
1331: LD_INT 85
1333: PUSH
1334: LD_INT 86
1336: PUSH
1337: LD_INT 89
1339: PUSH
1340: LD_INT 91
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: ST_TO_ADDR
1400: GO 1403
1402: POP
// if state > - 1 and state < 3 then
1403: LD_VAR 0 3
1407: PUSH
1408: LD_INT 1
1410: NEG
1411: GREATER
1412: IFFALSE 1424
1414: PUSH
1415: LD_VAR 0 3
1419: PUSH
1420: LD_INT 3
1422: LESS
1423: AND
1424: IFFALSE 1481
// for i in result do
1426: LD_ADDR_VAR 0 5
1430: PUSH
1431: LD_VAR 0 4
1435: PUSH
1436: FOR_IN
1437: IFFALSE 1479
// if GetTech ( i , side ) <> state then
1439: LD_VAR 0 5
1443: PPUSH
1444: LD_VAR 0 1
1448: PPUSH
1449: CALL_OW 321
1453: PUSH
1454: LD_VAR 0 3
1458: NONEQUAL
1459: IFFALSE 1477
// result := result diff i ;
1461: LD_ADDR_VAR 0 4
1465: PUSH
1466: LD_VAR 0 4
1470: PUSH
1471: LD_VAR 0 5
1475: DIFF
1476: ST_TO_ADDR
1477: GO 1436
1479: POP
1480: POP
// end ;
1481: LD_VAR 0 4
1485: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
1490: PPUSH
// result := true ;
1491: LD_ADDR_VAR 0 3
1495: PUSH
1496: LD_INT 1
1498: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1499: LD_ADDR_VAR 0 5
1503: PUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 480
1513: ST_TO_ADDR
// if not tmp then
1514: LD_VAR 0 5
1518: NOT
1519: IFFALSE 1523
// exit ;
1521: GO 1572
// for i in tmp do
1523: LD_ADDR_VAR 0 4
1527: PUSH
1528: LD_VAR 0 5
1532: PUSH
1533: FOR_IN
1534: IFFALSE 1570
// if GetTech ( i , side ) <> state_researched then
1536: LD_VAR 0 4
1540: PPUSH
1541: LD_VAR 0 1
1545: PPUSH
1546: CALL_OW 321
1550: PUSH
1551: LD_INT 2
1553: NONEQUAL
1554: IFFALSE 1568
// begin result := false ;
1556: LD_ADDR_VAR 0 3
1560: PUSH
1561: LD_INT 0
1563: ST_TO_ADDR
// exit ;
1564: POP
1565: POP
1566: GO 1572
// end ;
1568: GO 1533
1570: POP
1571: POP
// end ;
1572: LD_VAR 0 3
1576: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1577: LD_INT 0
1579: PPUSH
1580: PPUSH
1581: PPUSH
1582: PPUSH
1583: PPUSH
1584: PPUSH
1585: PPUSH
1586: PPUSH
1587: PPUSH
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1592: LD_VAR 0 1
1596: NOT
1597: IFTRUE 1614
1599: PUSH
1600: LD_VAR 0 1
1604: PPUSH
1605: CALL_OW 257
1609: PUSH
1610: LD_INT 9
1612: NONEQUAL
1613: OR
1614: IFFALSE 1618
// exit ;
1616: GO 2197
// side := GetSide ( unit ) ;
1618: LD_ADDR_VAR 0 9
1622: PUSH
1623: LD_VAR 0 1
1627: PPUSH
1628: CALL_OW 255
1632: ST_TO_ADDR
// tech_space := tech_spacanom ;
1633: LD_ADDR_VAR 0 12
1637: PUSH
1638: LD_INT 29
1640: ST_TO_ADDR
// tech_time := tech_taurad ;
1641: LD_ADDR_VAR 0 13
1645: PUSH
1646: LD_INT 28
1648: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1649: LD_ADDR_VAR 0 11
1653: PUSH
1654: LD_VAR 0 1
1658: PPUSH
1659: CALL_OW 310
1663: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1664: LD_VAR 0 11
1668: PPUSH
1669: CALL_OW 247
1673: PUSH
1674: LD_INT 2
1676: EQUAL
1677: IFFALSE 1681
// exit ;
1679: GO 2197
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1681: LD_ADDR_VAR 0 8
1685: PUSH
1686: LD_INT 81
1688: PUSH
1689: LD_VAR 0 9
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 21
1703: PUSH
1704: LD_INT 3
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: ST_TO_ADDR
// if not tmp then
1724: LD_VAR 0 8
1728: NOT
1729: IFFALSE 1733
// exit ;
1731: GO 2197
// if in_unit then
1733: LD_VAR 0 11
1737: IFFALSE 1761
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1739: LD_ADDR_VAR 0 10
1743: PUSH
1744: LD_VAR 0 8
1748: PPUSH
1749: LD_VAR 0 11
1753: PPUSH
1754: CALL_OW 74
1758: ST_TO_ADDR
1759: GO 1781
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1761: LD_ADDR_VAR 0 10
1765: PUSH
1766: LD_VAR 0 8
1770: PPUSH
1771: LD_VAR 0 1
1775: PPUSH
1776: CALL_OW 74
1780: ST_TO_ADDR
// if not enemy then
1781: LD_VAR 0 10
1785: NOT
1786: IFFALSE 1790
// exit ;
1788: GO 2197
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1790: LD_VAR 0 11
1794: IFFALSE 1816
1796: PUSH
1797: LD_VAR 0 11
1801: PPUSH
1802: LD_VAR 0 10
1806: PPUSH
1807: CALL_OW 296
1811: PUSH
1812: LD_INT 13
1814: GREATER
1815: AND
1816: IFTRUE 1838
1818: PUSH
1819: LD_VAR 0 1
1823: PPUSH
1824: LD_VAR 0 10
1828: PPUSH
1829: CALL_OW 296
1833: PUSH
1834: LD_INT 12
1836: GREATER
1837: OR
1838: IFFALSE 1842
// exit ;
1840: GO 2197
// missile := [ 1 ] ;
1842: LD_ADDR_VAR 0 14
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: EMPTY
1851: LIST
1852: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1853: LD_VAR 0 9
1857: PPUSH
1858: LD_VAR 0 12
1862: PPUSH
1863: CALL_OW 325
1867: IFFALSE 1896
// missile := Replace ( missile , missile + 1 , 2 ) ;
1869: LD_ADDR_VAR 0 14
1873: PUSH
1874: LD_VAR 0 14
1878: PPUSH
1879: LD_VAR 0 14
1883: PUSH
1884: LD_INT 1
1886: PLUS
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: CALL_OW 1
1895: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1896: LD_VAR 0 9
1900: PPUSH
1901: LD_VAR 0 13
1905: PPUSH
1906: CALL_OW 325
1910: IFFALSE 1934
1912: PUSH
1913: LD_VAR 0 10
1917: PPUSH
1918: CALL_OW 255
1922: PPUSH
1923: LD_VAR 0 13
1927: PPUSH
1928: CALL_OW 325
1932: NOT
1933: AND
1934: IFFALSE 1963
// missile := Replace ( missile , missile + 1 , 3 ) ;
1936: LD_ADDR_VAR 0 14
1940: PUSH
1941: LD_VAR 0 14
1945: PPUSH
1946: LD_VAR 0 14
1950: PUSH
1951: LD_INT 1
1953: PLUS
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 1
1962: ST_TO_ADDR
// if missile < 2 then
1963: LD_VAR 0 14
1967: PUSH
1968: LD_INT 2
1970: LESS
1971: IFFALSE 1975
// exit ;
1973: GO 2197
// x := GetX ( enemy ) ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: LD_VAR 0 10
1984: PPUSH
1985: CALL_OW 250
1989: ST_TO_ADDR
// y := GetY ( enemy ) ;
1990: LD_ADDR_VAR 0 5
1994: PUSH
1995: LD_VAR 0 10
1999: PPUSH
2000: CALL_OW 251
2004: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2005: LD_ADDR_VAR 0 6
2009: PUSH
2010: LD_VAR 0 4
2014: PUSH
2015: LD_INT 1
2017: NEG
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL_OW 12
2026: PLUS
2027: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2028: LD_ADDR_VAR 0 7
2032: PUSH
2033: LD_VAR 0 5
2037: PUSH
2038: LD_INT 1
2040: NEG
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: CALL_OW 12
2049: PLUS
2050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2051: LD_VAR 0 6
2055: PPUSH
2056: LD_VAR 0 7
2060: PPUSH
2061: CALL_OW 488
2065: NOT
2066: IFFALSE 2088
// begin _x := x ;
2068: LD_ADDR_VAR 0 6
2072: PUSH
2073: LD_VAR 0 4
2077: ST_TO_ADDR
// _y := y ;
2078: LD_ADDR_VAR 0 7
2082: PUSH
2083: LD_VAR 0 5
2087: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2088: LD_ADDR_VAR 0 3
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_VAR 0 14
2100: PPUSH
2101: CALL_OW 12
2105: ST_TO_ADDR
// case i of 1 :
2106: LD_VAR 0 3
2110: PUSH
2111: LD_INT 1
2113: DOUBLE
2114: EQUAL
2115: IFTRUE 2119
2117: GO 2136
2119: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2120: LD_VAR 0 1
2124: PPUSH
2125: LD_VAR 0 10
2129: PPUSH
2130: CALL_OW 115
2134: GO 2197
2136: LD_INT 2
2138: DOUBLE
2139: EQUAL
2140: IFTRUE 2144
2142: GO 2166
2144: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2145: LD_VAR 0 1
2149: PPUSH
2150: LD_VAR 0 6
2154: PPUSH
2155: LD_VAR 0 7
2159: PPUSH
2160: CALL_OW 153
2164: GO 2197
2166: LD_INT 3
2168: DOUBLE
2169: EQUAL
2170: IFTRUE 2174
2172: GO 2196
2174: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2175: LD_VAR 0 1
2179: PPUSH
2180: LD_VAR 0 6
2184: PPUSH
2185: LD_VAR 0 7
2189: PPUSH
2190: CALL_OW 154
2194: GO 2197
2196: POP
// end ;
2197: LD_VAR 0 2
2201: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2202: LD_INT 0
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
// if not unit or not building then
2210: LD_VAR 0 1
2214: NOT
2215: IFTRUE 2224
2217: PUSH
2218: LD_VAR 0 2
2222: NOT
2223: OR
2224: IFFALSE 2228
// exit ;
2226: GO 2386
// x := GetX ( building ) ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 250
2242: ST_TO_ADDR
// y := GetY ( building ) ;
2243: LD_ADDR_VAR 0 6
2247: PUSH
2248: LD_VAR 0 2
2252: PPUSH
2253: CALL_OW 251
2257: ST_TO_ADDR
// for i := 0 to 5 do
2258: LD_ADDR_VAR 0 4
2262: PUSH
2263: DOUBLE
2264: LD_INT 0
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 5
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2384
// begin _x := ShiftX ( x , i , 3 ) ;
2274: LD_ADDR_VAR 0 7
2278: PUSH
2279: LD_VAR 0 5
2283: PPUSH
2284: LD_VAR 0 4
2288: PPUSH
2289: LD_INT 3
2291: PPUSH
2292: CALL_OW 272
2296: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2297: LD_ADDR_VAR 0 8
2301: PUSH
2302: LD_VAR 0 6
2306: PPUSH
2307: LD_VAR 0 4
2311: PPUSH
2312: LD_INT 3
2314: PPUSH
2315: CALL_OW 273
2319: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2320: LD_VAR 0 7
2324: PPUSH
2325: LD_VAR 0 8
2329: PPUSH
2330: CALL_OW 488
2334: NOT
2335: IFFALSE 2339
// continue ;
2337: GO 2271
// if HexInfo ( _x , _y ) = 0 then
2339: LD_VAR 0 7
2343: PPUSH
2344: LD_VAR 0 8
2348: PPUSH
2349: CALL_OW 428
2353: PUSH
2354: LD_INT 0
2356: EQUAL
2357: IFFALSE 2382
// begin ComMoveXY ( unit , _x , _y ) ;
2359: LD_VAR 0 1
2363: PPUSH
2364: LD_VAR 0 7
2368: PPUSH
2369: LD_VAR 0 8
2373: PPUSH
2374: CALL_OW 111
// exit ;
2378: POP
2379: POP
2380: GO 2386
// end ; end ;
2382: GO 2271
2384: POP
2385: POP
// end ;
2386: LD_VAR 0 3
2390: RET
// export function ScanBase ( side , base_area ) ; begin
2391: LD_INT 0
2393: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2394: LD_ADDR_VAR 0 3
2398: PUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_INT 81
2406: PUSH
2407: LD_VAR 0 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PPUSH
2416: CALL_OW 70
2420: ST_TO_ADDR
// end ;
2421: LD_VAR 0 3
2425: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2426: LD_INT 0
2428: PPUSH
2429: PPUSH
2430: PPUSH
2431: PPUSH
// result := false ;
2432: LD_ADDR_VAR 0 2
2436: PUSH
2437: LD_INT 0
2439: ST_TO_ADDR
// side := GetSide ( unit ) ;
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: LD_VAR 0 1
2449: PPUSH
2450: CALL_OW 255
2454: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2455: LD_ADDR_VAR 0 4
2459: PUSH
2460: LD_VAR 0 1
2464: PPUSH
2465: CALL_OW 248
2469: ST_TO_ADDR
// case nat of 1 :
2470: LD_VAR 0 4
2474: PUSH
2475: LD_INT 1
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2494
2483: POP
// tech := tech_lassight ; 2 :
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 12
2491: ST_TO_ADDR
2492: GO 2533
2494: LD_INT 2
2496: DOUBLE
2497: EQUAL
2498: IFTRUE 2502
2500: GO 2513
2502: POP
// tech := tech_mortar ; 3 :
2503: LD_ADDR_VAR 0 5
2507: PUSH
2508: LD_INT 41
2510: ST_TO_ADDR
2511: GO 2533
2513: LD_INT 3
2515: DOUBLE
2516: EQUAL
2517: IFTRUE 2521
2519: GO 2532
2521: POP
// tech := tech_bazooka ; end ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 44
2529: ST_TO_ADDR
2530: GO 2533
2532: POP
// if Researched ( side , tech ) then
2533: LD_VAR 0 3
2537: PPUSH
2538: LD_VAR 0 5
2542: PPUSH
2543: CALL_OW 325
2547: IFFALSE 2574
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: LD_INT 5
2556: PUSH
2557: LD_INT 8
2559: PUSH
2560: LD_INT 9
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: LIST
2567: PUSH
2568: LD_VAR 0 4
2572: ARRAY
2573: ST_TO_ADDR
// end ;
2574: LD_VAR 0 2
2578: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2579: LD_INT 0
2581: PPUSH
2582: PPUSH
2583: PPUSH
// if not mines then
2584: LD_VAR 0 2
2588: NOT
2589: IFFALSE 2593
// exit ;
2591: GO 2737
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2593: LD_ADDR_VAR 0 5
2597: PUSH
2598: LD_INT 81
2600: PUSH
2601: LD_VAR 0 1
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 3
2612: PUSH
2613: LD_INT 21
2615: PUSH
2616: LD_INT 3
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PPUSH
2631: CALL_OW 69
2635: ST_TO_ADDR
// for i in mines do
2636: LD_ADDR_VAR 0 4
2640: PUSH
2641: LD_VAR 0 2
2645: PUSH
2646: FOR_IN
2647: IFFALSE 2735
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: LD_VAR 0 4
2662: PUSH
2663: LD_INT 2
2665: ARRAY
2666: PPUSH
2667: CALL_OW 458
2671: NOT
2672: IFFALSE 2676
// continue ;
2674: GO 2646
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2676: LD_VAR 0 4
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: LD_VAR 0 4
2689: PUSH
2690: LD_INT 2
2692: ARRAY
2693: PPUSH
2694: CALL_OW 428
2698: PUSH
2699: LD_VAR 0 5
2703: IN
2704: IFFALSE 2733
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2706: LD_VAR 0 4
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: PPUSH
2715: LD_VAR 0 4
2719: PUSH
2720: LD_INT 2
2722: ARRAY
2723: PPUSH
2724: LD_VAR 0 1
2728: PPUSH
2729: CALL_OW 456
// end ;
2733: GO 2646
2735: POP
2736: POP
// end ;
2737: LD_VAR 0 3
2741: RET
// export function Count ( array ) ; begin
2742: LD_INT 0
2744: PPUSH
// result := array + 0 ;
2745: LD_ADDR_VAR 0 2
2749: PUSH
2750: LD_VAR 0 1
2754: PUSH
2755: LD_INT 0
2757: PLUS
2758: ST_TO_ADDR
// end ;
2759: LD_VAR 0 2
2763: RET
// export function IsEmpty ( building ) ; begin
2764: LD_INT 0
2766: PPUSH
// if not building then
2767: LD_VAR 0 1
2771: NOT
2772: IFFALSE 2776
// exit ;
2774: GO 2819
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2776: LD_ADDR_VAR 0 2
2780: PUSH
2781: LD_VAR 0 1
2785: PUSH
2786: LD_INT 22
2788: PUSH
2789: LD_VAR 0 1
2793: PPUSH
2794: CALL_OW 255
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 58
2805: PUSH
2806: EMPTY
2807: LIST
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PPUSH
2813: CALL_OW 69
2817: IN
2818: ST_TO_ADDR
// end ;
2819: LD_VAR 0 2
2823: RET
// export function IsNotFull ( building ) ; var places ; begin
2824: LD_INT 0
2826: PPUSH
2827: PPUSH
// if not building then
2828: LD_VAR 0 1
2832: NOT
2833: IFFALSE 2837
// exit ;
2835: GO 2865
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2837: LD_ADDR_VAR 0 2
2841: PUSH
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_INT 3
2849: PUSH
2850: LD_INT 62
2852: PUSH
2853: EMPTY
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 72
2864: ST_TO_ADDR
// end ;
2865: LD_VAR 0 2
2869: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2870: LD_INT 0
2872: PPUSH
2873: PPUSH
2874: PPUSH
2875: PPUSH
// tmp := [ ] ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: EMPTY
2882: ST_TO_ADDR
// list := [ ] ;
2883: LD_ADDR_VAR 0 5
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// for i = 16 to 25 do
2890: LD_ADDR_VAR 0 4
2894: PUSH
2895: DOUBLE
2896: LD_INT 16
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 25
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2977
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2906: LD_ADDR_VAR 0 3
2910: PUSH
2911: LD_VAR 0 3
2915: PUSH
2916: LD_INT 22
2918: PUSH
2919: LD_VAR 0 1
2923: PPUSH
2924: CALL_OW 255
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PUSH
2933: LD_INT 91
2935: PUSH
2936: LD_VAR 0 1
2940: PUSH
2941: LD_INT 6
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_INT 30
2951: PUSH
2952: LD_VAR 0 4
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: PUSH
2966: EMPTY
2967: LIST
2968: PPUSH
2969: CALL_OW 69
2973: ADD
2974: ST_TO_ADDR
2975: GO 2903
2977: POP
2978: POP
// for i = 1 to tmp do
2979: LD_ADDR_VAR 0 4
2983: PUSH
2984: DOUBLE
2985: LD_INT 1
2987: DEC
2988: ST_TO_ADDR
2989: LD_VAR 0 3
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3083
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2997: LD_ADDR_VAR 0 5
3001: PUSH
3002: LD_VAR 0 5
3006: PUSH
3007: LD_VAR 0 3
3011: PUSH
3012: LD_VAR 0 4
3016: ARRAY
3017: PPUSH
3018: CALL_OW 266
3022: PUSH
3023: LD_VAR 0 3
3027: PUSH
3028: LD_VAR 0 4
3032: ARRAY
3033: PPUSH
3034: CALL_OW 250
3038: PUSH
3039: LD_VAR 0 3
3043: PUSH
3044: LD_VAR 0 4
3048: ARRAY
3049: PPUSH
3050: CALL_OW 251
3054: PUSH
3055: LD_VAR 0 3
3059: PUSH
3060: LD_VAR 0 4
3064: ARRAY
3065: PPUSH
3066: CALL_OW 254
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: EMPTY
3078: LIST
3079: ADD
3080: ST_TO_ADDR
3081: GO 2994
3083: POP
3084: POP
// result := list ;
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: LD_VAR 0 5
3094: ST_TO_ADDR
// end ;
3095: LD_VAR 0 2
3099: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3100: LD_INT 0
3102: PPUSH
3103: PPUSH
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
// if not factory then
3109: LD_VAR 0 1
3113: NOT
3114: IFFALSE 3118
// exit ;
3116: GO 3721
// if control = control_apeman then
3118: LD_VAR 0 4
3122: PUSH
3123: LD_INT 5
3125: EQUAL
3126: IFFALSE 3235
// begin tmp := UnitsInside ( factory ) ;
3128: LD_ADDR_VAR 0 8
3132: PUSH
3133: LD_VAR 0 1
3137: PPUSH
3138: CALL_OW 313
3142: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3143: LD_VAR 0 8
3147: PPUSH
3148: LD_INT 25
3150: PUSH
3151: LD_INT 12
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 72
3162: NOT
3163: IFFALSE 3173
// control := control_manual ;
3165: LD_ADDR_VAR 0 4
3169: PUSH
3170: LD_INT 1
3172: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3173: LD_ADDR_VAR 0 8
3177: PUSH
3178: LD_VAR 0 1
3182: PPUSH
3183: CALL 2870 0 1
3187: ST_TO_ADDR
// if tmp then
3188: LD_VAR 0 8
3192: IFFALSE 3235
// begin for i in tmp do
3194: LD_ADDR_VAR 0 7
3198: PUSH
3199: LD_VAR 0 8
3203: PUSH
3204: FOR_IN
3205: IFFALSE 3233
// if i [ 1 ] = b_ext_radio then
3207: LD_VAR 0 7
3211: PUSH
3212: LD_INT 1
3214: ARRAY
3215: PUSH
3216: LD_INT 22
3218: EQUAL
3219: IFFALSE 3231
// begin control := control_remote ;
3221: LD_ADDR_VAR 0 4
3225: PUSH
3226: LD_INT 2
3228: ST_TO_ADDR
// break ;
3229: GO 3233
// end ;
3231: GO 3204
3233: POP
3234: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3235: LD_VAR 0 1
3239: PPUSH
3240: LD_VAR 0 2
3244: PPUSH
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_VAR 0 4
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: CALL_OW 448
3264: IFFALSE 3299
// begin result := [ chassis , engine , control , weapon ] ;
3266: LD_ADDR_VAR 0 6
3270: PUSH
3271: LD_VAR 0 2
3275: PUSH
3276: LD_VAR 0 3
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 5
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: ST_TO_ADDR
// exit ;
3297: GO 3721
// end ; _chassis := AvailableChassisList ( factory ) ;
3299: LD_ADDR_VAR 0 9
3303: PUSH
3304: LD_VAR 0 1
3308: PPUSH
3309: CALL_OW 475
3313: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3314: LD_ADDR_VAR 0 11
3318: PUSH
3319: LD_VAR 0 1
3323: PPUSH
3324: CALL_OW 476
3328: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3329: LD_ADDR_VAR 0 12
3333: PUSH
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 477
3343: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3344: LD_ADDR_VAR 0 10
3348: PUSH
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 478
3358: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3359: LD_VAR 0 9
3363: NOT
3364: IFTRUE 3373
3366: PUSH
3367: LD_VAR 0 11
3371: NOT
3372: OR
3373: IFTRUE 3382
3375: PUSH
3376: LD_VAR 0 12
3380: NOT
3381: OR
3382: IFTRUE 3391
3384: PUSH
3385: LD_VAR 0 10
3389: NOT
3390: OR
3391: IFFALSE 3426
// begin result := [ chassis , engine , control , weapon ] ;
3393: LD_ADDR_VAR 0 6
3397: PUSH
3398: LD_VAR 0 2
3402: PUSH
3403: LD_VAR 0 3
3407: PUSH
3408: LD_VAR 0 4
3412: PUSH
3413: LD_VAR 0 5
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: ST_TO_ADDR
// exit ;
3424: GO 3721
// end ; if not chassis in _chassis then
3426: LD_VAR 0 2
3430: PUSH
3431: LD_VAR 0 9
3435: IN
3436: NOT
3437: IFFALSE 3463
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: LD_VAR 0 9
3448: PUSH
3449: LD_INT 1
3451: PPUSH
3452: LD_VAR 0 9
3456: PPUSH
3457: CALL_OW 12
3461: ARRAY
3462: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3463: LD_VAR 0 2
3467: PPUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: CALL 3726 0 2
3477: NOT
3478: IFFALSE 3539
// repeat engine := _engine [ 1 ] ;
3480: LD_ADDR_VAR 0 3
3484: PUSH
3485: LD_VAR 0 11
3489: PUSH
3490: LD_INT 1
3492: ARRAY
3493: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3494: LD_ADDR_VAR 0 11
3498: PUSH
3499: LD_VAR 0 11
3503: PPUSH
3504: LD_INT 1
3506: PPUSH
3507: CALL_OW 3
3511: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3512: LD_VAR 0 2
3516: PPUSH
3517: LD_VAR 0 3
3521: PPUSH
3522: CALL 3726 0 2
3526: IFTRUE 3537
3528: PUSH
3529: LD_VAR 0 11
3533: PUSH
3534: EMPTY
3535: EQUAL
3536: OR
3537: IFFALSE 3480
// if not control in _control then
3539: LD_VAR 0 4
3543: PUSH
3544: LD_VAR 0 12
3548: IN
3549: NOT
3550: IFFALSE 3576
// control := _control [ rand ( 1 , _control ) ] ;
3552: LD_ADDR_VAR 0 4
3556: PUSH
3557: LD_VAR 0 12
3561: PUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_VAR 0 12
3569: PPUSH
3570: CALL_OW 12
3574: ARRAY
3575: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3576: LD_VAR 0 2
3580: PPUSH
3581: LD_VAR 0 5
3585: PPUSH
3586: CALL 3948 0 2
3590: NOT
3591: IFFALSE 3652
// repeat weapon := _weapon [ 1 ] ;
3593: LD_ADDR_VAR 0 5
3597: PUSH
3598: LD_VAR 0 10
3602: PUSH
3603: LD_INT 1
3605: ARRAY
3606: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3607: LD_ADDR_VAR 0 10
3611: PUSH
3612: LD_VAR 0 10
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: CALL_OW 3
3624: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3625: LD_VAR 0 2
3629: PPUSH
3630: LD_VAR 0 5
3634: PPUSH
3635: CALL 3948 0 2
3639: IFTRUE 3650
3641: PUSH
3642: LD_VAR 0 10
3646: PUSH
3647: EMPTY
3648: EQUAL
3649: OR
3650: IFFALSE 3593
// result := [ ] ;
3652: LD_ADDR_VAR 0 6
3656: PUSH
3657: EMPTY
3658: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3659: LD_VAR 0 1
3663: PPUSH
3664: LD_VAR 0 2
3668: PPUSH
3669: LD_VAR 0 3
3673: PPUSH
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_VAR 0 5
3683: PPUSH
3684: CALL_OW 448
3688: IFFALSE 3721
// result := [ chassis , engine , control , weapon ] ;
3690: LD_ADDR_VAR 0 6
3694: PUSH
3695: LD_VAR 0 2
3699: PUSH
3700: LD_VAR 0 3
3704: PUSH
3705: LD_VAR 0 4
3709: PUSH
3710: LD_VAR 0 5
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: ST_TO_ADDR
// end ;
3721: LD_VAR 0 6
3725: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3726: LD_INT 0
3728: PPUSH
// if not chassis or not engine then
3729: LD_VAR 0 1
3733: NOT
3734: IFTRUE 3743
3736: PUSH
3737: LD_VAR 0 2
3741: NOT
3742: OR
3743: IFFALSE 3747
// exit ;
3745: GO 3943
// case engine of engine_solar :
3747: LD_VAR 0 2
3751: PUSH
3752: LD_INT 2
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3760
3758: GO 3798
3760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: LD_INT 11
3768: PUSH
3769: LD_INT 12
3771: PUSH
3772: LD_INT 13
3774: PUSH
3775: LD_INT 14
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: ST_TO_ADDR
3796: GO 3927
3798: LD_INT 1
3800: DOUBLE
3801: EQUAL
3802: IFTRUE 3806
3804: GO 3868
3806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3807: LD_ADDR_VAR 0 3
3811: PUSH
3812: LD_INT 11
3814: PUSH
3815: LD_INT 12
3817: PUSH
3818: LD_INT 13
3820: PUSH
3821: LD_INT 14
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: LD_INT 21
3841: PUSH
3842: LD_INT 23
3844: PUSH
3845: LD_INT 22
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: ST_TO_ADDR
3866: GO 3927
3868: LD_INT 3
3870: DOUBLE
3871: EQUAL
3872: IFTRUE 3876
3874: GO 3926
3876: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3877: LD_ADDR_VAR 0 3
3881: PUSH
3882: LD_INT 13
3884: PUSH
3885: LD_INT 14
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: LD_INT 3
3893: PUSH
3894: LD_INT 4
3896: PUSH
3897: LD_INT 5
3899: PUSH
3900: LD_INT 21
3902: PUSH
3903: LD_INT 22
3905: PUSH
3906: LD_INT 23
3908: PUSH
3909: LD_INT 24
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: ST_TO_ADDR
3924: GO 3927
3926: POP
// result := ( chassis in result ) ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: LD_VAR 0 1
3936: PUSH
3937: LD_VAR 0 3
3941: IN
3942: ST_TO_ADDR
// end ;
3943: LD_VAR 0 3
3947: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3948: LD_INT 0
3950: PPUSH
// if not chassis or not weapon then
3951: LD_VAR 0 1
3955: NOT
3956: IFTRUE 3965
3958: PUSH
3959: LD_VAR 0 2
3963: NOT
3964: OR
3965: IFFALSE 3969
// exit ;
3967: GO 5029
// case weapon of us_machine_gun :
3969: LD_VAR 0 2
3973: PUSH
3974: LD_INT 2
3976: DOUBLE
3977: EQUAL
3978: IFTRUE 3982
3980: GO 4012
3982: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: LD_INT 1
3990: PUSH
3991: LD_INT 2
3993: PUSH
3994: LD_INT 3
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: ST_TO_ADDR
4010: GO 5013
4012: LD_INT 3
4014: DOUBLE
4015: EQUAL
4016: IFTRUE 4020
4018: GO 4050
4020: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_INT 1
4028: PUSH
4029: LD_INT 2
4031: PUSH
4032: LD_INT 3
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: LD_INT 5
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: ST_TO_ADDR
4048: GO 5013
4050: LD_INT 11
4052: DOUBLE
4053: EQUAL
4054: IFTRUE 4058
4056: GO 4088
4058: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 1
4066: PUSH
4067: LD_INT 2
4069: PUSH
4070: LD_INT 3
4072: PUSH
4073: LD_INT 4
4075: PUSH
4076: LD_INT 5
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: ST_TO_ADDR
4086: GO 5013
4088: LD_INT 4
4090: DOUBLE
4091: EQUAL
4092: IFTRUE 4096
4094: GO 4122
4096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: LD_INT 2
4104: PUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: ST_TO_ADDR
4120: GO 5013
4122: LD_INT 5
4124: DOUBLE
4125: EQUAL
4126: IFTRUE 4130
4128: GO 4156
4130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4131: LD_ADDR_VAR 0 3
4135: PUSH
4136: LD_INT 2
4138: PUSH
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 5013
4156: LD_INT 9
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4190
4164: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_INT 2
4172: PUSH
4173: LD_INT 3
4175: PUSH
4176: LD_INT 4
4178: PUSH
4179: LD_INT 5
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: ST_TO_ADDR
4188: GO 5013
4190: LD_INT 7
4192: DOUBLE
4193: EQUAL
4194: IFTRUE 4198
4196: GO 4224
4198: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4199: LD_ADDR_VAR 0 3
4203: PUSH
4204: LD_INT 2
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 4
4212: PUSH
4213: LD_INT 5
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: ST_TO_ADDR
4222: GO 5013
4224: LD_INT 12
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4258
4232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4233: LD_ADDR_VAR 0 3
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 3
4243: PUSH
4244: LD_INT 4
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: ST_TO_ADDR
4256: GO 5013
4258: LD_INT 13
4260: DOUBLE
4261: EQUAL
4262: IFTRUE 4266
4264: GO 4292
4266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4267: LD_ADDR_VAR 0 3
4271: PUSH
4272: LD_INT 2
4274: PUSH
4275: LD_INT 3
4277: PUSH
4278: LD_INT 4
4280: PUSH
4281: LD_INT 5
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: ST_TO_ADDR
4290: GO 5013
4292: LD_INT 14
4294: DOUBLE
4295: EQUAL
4296: IFTRUE 4300
4298: GO 4318
4300: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: LD_INT 4
4308: PUSH
4309: LD_INT 5
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: ST_TO_ADDR
4316: GO 5013
4318: LD_INT 6
4320: DOUBLE
4321: EQUAL
4322: IFTRUE 4326
4324: GO 4344
4326: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4327: LD_ADDR_VAR 0 3
4331: PUSH
4332: LD_INT 4
4334: PUSH
4335: LD_INT 5
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: ST_TO_ADDR
4342: GO 5013
4344: LD_INT 10
4346: DOUBLE
4347: EQUAL
4348: IFTRUE 4352
4350: GO 4370
4352: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4353: LD_ADDR_VAR 0 3
4357: PUSH
4358: LD_INT 4
4360: PUSH
4361: LD_INT 5
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: ST_TO_ADDR
4368: GO 5013
4370: LD_INT 22
4372: DOUBLE
4373: EQUAL
4374: IFTRUE 4378
4376: GO 4404
4378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_INT 11
4386: PUSH
4387: LD_INT 12
4389: PUSH
4390: LD_INT 13
4392: PUSH
4393: LD_INT 14
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: ST_TO_ADDR
4402: GO 5013
4404: LD_INT 23
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4438
4412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4413: LD_ADDR_VAR 0 3
4417: PUSH
4418: LD_INT 11
4420: PUSH
4421: LD_INT 12
4423: PUSH
4424: LD_INT 13
4426: PUSH
4427: LD_INT 14
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: ST_TO_ADDR
4436: GO 5013
4438: LD_INT 24
4440: DOUBLE
4441: EQUAL
4442: IFTRUE 4446
4444: GO 4472
4446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4447: LD_ADDR_VAR 0 3
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 12
4457: PUSH
4458: LD_INT 13
4460: PUSH
4461: LD_INT 14
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: ST_TO_ADDR
4470: GO 5013
4472: LD_INT 30
4474: DOUBLE
4475: EQUAL
4476: IFTRUE 4480
4478: GO 4506
4480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_INT 11
4488: PUSH
4489: LD_INT 12
4491: PUSH
4492: LD_INT 13
4494: PUSH
4495: LD_INT 14
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: ST_TO_ADDR
4504: GO 5013
4506: LD_INT 25
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4532
4514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: LD_INT 13
4522: PUSH
4523: LD_INT 14
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
4530: GO 5013
4532: LD_INT 27
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4558
4540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: ST_TO_ADDR
4556: GO 5013
4558: LD_INT 92
4560: DOUBLE
4561: EQUAL
4562: IFTRUE 4566
4564: GO 4592
4566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: LD_INT 11
4574: PUSH
4575: LD_INT 12
4577: PUSH
4578: LD_INT 13
4580: PUSH
4581: LD_INT 14
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: ST_TO_ADDR
4590: GO 5013
4592: LD_INT 28
4594: DOUBLE
4595: EQUAL
4596: IFTRUE 4600
4598: GO 4618
4600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_INT 13
4608: PUSH
4609: LD_INT 14
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: ST_TO_ADDR
4616: GO 5013
4618: LD_INT 29
4620: DOUBLE
4621: EQUAL
4622: IFTRUE 4626
4624: GO 4644
4626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4627: LD_ADDR_VAR 0 3
4631: PUSH
4632: LD_INT 13
4634: PUSH
4635: LD_INT 14
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: ST_TO_ADDR
4642: GO 5013
4644: LD_INT 31
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4652
4650: GO 4670
4652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 13
4660: PUSH
4661: LD_INT 14
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: ST_TO_ADDR
4668: GO 5013
4670: LD_INT 26
4672: DOUBLE
4673: EQUAL
4674: IFTRUE 4678
4676: GO 4696
4678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4679: LD_ADDR_VAR 0 3
4683: PUSH
4684: LD_INT 13
4686: PUSH
4687: LD_INT 14
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 5013
4696: LD_INT 42
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4730
4704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_INT 21
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 23
4718: PUSH
4719: LD_INT 24
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
4728: GO 5013
4730: LD_INT 43
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4764
4738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4739: LD_ADDR_VAR 0 3
4743: PUSH
4744: LD_INT 21
4746: PUSH
4747: LD_INT 22
4749: PUSH
4750: LD_INT 23
4752: PUSH
4753: LD_INT 24
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: ST_TO_ADDR
4762: GO 5013
4764: LD_INT 44
4766: DOUBLE
4767: EQUAL
4768: IFTRUE 4772
4770: GO 4798
4772: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_INT 21
4780: PUSH
4781: LD_INT 22
4783: PUSH
4784: LD_INT 23
4786: PUSH
4787: LD_INT 24
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: ST_TO_ADDR
4796: GO 5013
4798: LD_INT 45
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4806
4804: GO 4832
4806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: LD_INT 21
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_INT 23
4820: PUSH
4821: LD_INT 24
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ST_TO_ADDR
4830: GO 5013
4832: LD_INT 49
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4866
4840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 22
4851: PUSH
4852: LD_INT 23
4854: PUSH
4855: LD_INT 24
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: ST_TO_ADDR
4864: GO 5013
4866: LD_INT 51
4868: DOUBLE
4869: EQUAL
4870: IFTRUE 4874
4872: GO 4900
4874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4875: LD_ADDR_VAR 0 3
4879: PUSH
4880: LD_INT 21
4882: PUSH
4883: LD_INT 22
4885: PUSH
4886: LD_INT 23
4888: PUSH
4889: LD_INT 24
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: ST_TO_ADDR
4898: GO 5013
4900: LD_INT 52
4902: DOUBLE
4903: EQUAL
4904: IFTRUE 4908
4906: GO 4934
4908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4909: LD_ADDR_VAR 0 3
4913: PUSH
4914: LD_INT 21
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 23
4922: PUSH
4923: LD_INT 24
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
4932: GO 5013
4934: LD_INT 53
4936: DOUBLE
4937: EQUAL
4938: IFTRUE 4942
4940: GO 4960
4942: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4943: LD_ADDR_VAR 0 3
4947: PUSH
4948: LD_INT 23
4950: PUSH
4951: LD_INT 24
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: ST_TO_ADDR
4958: GO 5013
4960: LD_INT 46
4962: DOUBLE
4963: EQUAL
4964: IFTRUE 4968
4966: GO 4986
4968: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4969: LD_ADDR_VAR 0 3
4973: PUSH
4974: LD_INT 23
4976: PUSH
4977: LD_INT 24
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: ST_TO_ADDR
4984: GO 5013
4986: LD_INT 47
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 4994
4992: GO 5012
4994: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_INT 23
5002: PUSH
5003: LD_INT 24
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: ST_TO_ADDR
5010: GO 5013
5012: POP
// result := ( chassis in result ) ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: LD_VAR 0 1
5022: PUSH
5023: LD_VAR 0 3
5027: IN
5028: ST_TO_ADDR
// end ;
5029: LD_VAR 0 3
5033: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5034: LD_INT 0
5036: PPUSH
5037: PPUSH
5038: PPUSH
5039: PPUSH
5040: PPUSH
5041: PPUSH
5042: PPUSH
// result := array ;
5043: LD_ADDR_VAR 0 5
5047: PUSH
5048: LD_VAR 0 1
5052: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5053: LD_VAR 0 1
5057: NOT
5058: IFTRUE 5067
5060: PUSH
5061: LD_VAR 0 2
5065: NOT
5066: OR
5067: IFTRUE 5076
5069: PUSH
5070: LD_VAR 0 3
5074: NOT
5075: OR
5076: IFTRUE 5090
5078: PUSH
5079: LD_VAR 0 2
5083: PUSH
5084: LD_VAR 0 1
5088: GREATER
5089: OR
5090: IFTRUE 5104
5092: PUSH
5093: LD_VAR 0 3
5097: PUSH
5098: LD_VAR 0 1
5102: GREATER
5103: OR
5104: IFFALSE 5108
// exit ;
5106: GO 5404
// if direction then
5108: LD_VAR 0 4
5112: IFFALSE 5176
// begin d := 1 ;
5114: LD_ADDR_VAR 0 9
5118: PUSH
5119: LD_INT 1
5121: ST_TO_ADDR
// if i_from > i_to then
5122: LD_VAR 0 2
5126: PUSH
5127: LD_VAR 0 3
5131: GREATER
5132: IFFALSE 5158
// length := ( array - i_from ) + i_to else
5134: LD_ADDR_VAR 0 11
5138: PUSH
5139: LD_VAR 0 1
5143: PUSH
5144: LD_VAR 0 2
5148: MINUS
5149: PUSH
5150: LD_VAR 0 3
5154: PLUS
5155: ST_TO_ADDR
5156: GO 5174
// length := i_to - i_from ;
5158: LD_ADDR_VAR 0 11
5162: PUSH
5163: LD_VAR 0 3
5167: PUSH
5168: LD_VAR 0 2
5172: MINUS
5173: ST_TO_ADDR
// end else
5174: GO 5237
// begin d := - 1 ;
5176: LD_ADDR_VAR 0 9
5180: PUSH
5181: LD_INT 1
5183: NEG
5184: ST_TO_ADDR
// if i_from > i_to then
5185: LD_VAR 0 2
5189: PUSH
5190: LD_VAR 0 3
5194: GREATER
5195: IFFALSE 5215
// length := i_from - i_to else
5197: LD_ADDR_VAR 0 11
5201: PUSH
5202: LD_VAR 0 2
5206: PUSH
5207: LD_VAR 0 3
5211: MINUS
5212: ST_TO_ADDR
5213: GO 5237
// length := ( array - i_to ) + i_from ;
5215: LD_ADDR_VAR 0 11
5219: PUSH
5220: LD_VAR 0 1
5224: PUSH
5225: LD_VAR 0 3
5229: MINUS
5230: PUSH
5231: LD_VAR 0 2
5235: PLUS
5236: ST_TO_ADDR
// end ; if not length then
5237: LD_VAR 0 11
5241: NOT
5242: IFFALSE 5246
// exit ;
5244: GO 5404
// tmp := array ;
5246: LD_ADDR_VAR 0 10
5250: PUSH
5251: LD_VAR 0 1
5255: ST_TO_ADDR
// for i = 1 to length do
5256: LD_ADDR_VAR 0 6
5260: PUSH
5261: DOUBLE
5262: LD_INT 1
5264: DEC
5265: ST_TO_ADDR
5266: LD_VAR 0 11
5270: PUSH
5271: FOR_TO
5272: IFFALSE 5392
// begin for j = 1 to array do
5274: LD_ADDR_VAR 0 7
5278: PUSH
5279: DOUBLE
5280: LD_INT 1
5282: DEC
5283: ST_TO_ADDR
5284: LD_VAR 0 1
5288: PUSH
5289: FOR_TO
5290: IFFALSE 5378
// begin k := j + d ;
5292: LD_ADDR_VAR 0 8
5296: PUSH
5297: LD_VAR 0 7
5301: PUSH
5302: LD_VAR 0 9
5306: PLUS
5307: ST_TO_ADDR
// if k > array then
5308: LD_VAR 0 8
5312: PUSH
5313: LD_VAR 0 1
5317: GREATER
5318: IFFALSE 5328
// k := 1 ;
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if not k then
5328: LD_VAR 0 8
5332: NOT
5333: IFFALSE 5345
// k := array ;
5335: LD_ADDR_VAR 0 8
5339: PUSH
5340: LD_VAR 0 1
5344: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5345: LD_ADDR_VAR 0 10
5349: PUSH
5350: LD_VAR 0 10
5354: PPUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 1
5364: PUSH
5365: LD_VAR 0 7
5369: ARRAY
5370: PPUSH
5371: CALL_OW 1
5375: ST_TO_ADDR
// end ;
5376: GO 5289
5378: POP
5379: POP
// array := tmp ;
5380: LD_ADDR_VAR 0 1
5384: PUSH
5385: LD_VAR 0 10
5389: ST_TO_ADDR
// end ;
5390: GO 5271
5392: POP
5393: POP
// result := array ;
5394: LD_ADDR_VAR 0 5
5398: PUSH
5399: LD_VAR 0 1
5403: ST_TO_ADDR
// end ;
5404: LD_VAR 0 5
5408: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5409: LD_INT 0
5411: PPUSH
5412: PPUSH
// result := 0 ;
5413: LD_ADDR_VAR 0 3
5417: PUSH
5418: LD_INT 0
5420: ST_TO_ADDR
// if not array or not value in array then
5421: LD_VAR 0 1
5425: NOT
5426: IFTRUE 5441
5428: PUSH
5429: LD_VAR 0 2
5433: PUSH
5434: LD_VAR 0 1
5438: IN
5439: NOT
5440: OR
5441: IFFALSE 5445
// exit ;
5443: GO 5499
// for i = 1 to array do
5445: LD_ADDR_VAR 0 4
5449: PUSH
5450: DOUBLE
5451: LD_INT 1
5453: DEC
5454: ST_TO_ADDR
5455: LD_VAR 0 1
5459: PUSH
5460: FOR_TO
5461: IFFALSE 5497
// if value = array [ i ] then
5463: LD_VAR 0 2
5467: PUSH
5468: LD_VAR 0 1
5472: PUSH
5473: LD_VAR 0 4
5477: ARRAY
5478: EQUAL
5479: IFFALSE 5495
// begin result := i ;
5481: LD_ADDR_VAR 0 3
5485: PUSH
5486: LD_VAR 0 4
5490: ST_TO_ADDR
// exit ;
5491: POP
5492: POP
5493: GO 5499
// end ;
5495: GO 5460
5497: POP
5498: POP
// end ;
5499: LD_VAR 0 3
5503: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5504: LD_INT 0
5506: PPUSH
// vc_chassis := chassis ;
5507: LD_ADDR_OWVAR 37
5511: PUSH
5512: LD_VAR 0 1
5516: ST_TO_ADDR
// vc_engine := engine ;
5517: LD_ADDR_OWVAR 39
5521: PUSH
5522: LD_VAR 0 2
5526: ST_TO_ADDR
// vc_control := control ;
5527: LD_ADDR_OWVAR 38
5531: PUSH
5532: LD_VAR 0 3
5536: ST_TO_ADDR
// vc_weapon := weapon ;
5537: LD_ADDR_OWVAR 40
5541: PUSH
5542: LD_VAR 0 4
5546: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5547: LD_ADDR_OWVAR 41
5551: PUSH
5552: LD_VAR 0 5
5556: ST_TO_ADDR
// end ;
5557: LD_VAR 0 6
5561: RET
// export function WantPlant ( unit ) ; var task ; begin
5562: LD_INT 0
5564: PPUSH
5565: PPUSH
// result := false ;
5566: LD_ADDR_VAR 0 2
5570: PUSH
5571: LD_INT 0
5573: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5574: LD_ADDR_VAR 0 3
5578: PUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 437
5588: ST_TO_ADDR
// if task then
5589: LD_VAR 0 3
5593: IFFALSE 5621
// if task [ 1 ] [ 1 ] = p then
5595: LD_VAR 0 3
5599: PUSH
5600: LD_INT 1
5602: ARRAY
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PUSH
5608: LD_STRING p
5610: EQUAL
5611: IFFALSE 5621
// result := true ;
5613: LD_ADDR_VAR 0 2
5617: PUSH
5618: LD_INT 1
5620: ST_TO_ADDR
// end ;
5621: LD_VAR 0 2
5625: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5626: LD_INT 0
5628: PPUSH
5629: PPUSH
5630: PPUSH
5631: PPUSH
// if pos < 1 then
5632: LD_VAR 0 2
5636: PUSH
5637: LD_INT 1
5639: LESS
5640: IFFALSE 5644
// exit ;
5642: GO 5947
// if pos = 1 then
5644: LD_VAR 0 2
5648: PUSH
5649: LD_INT 1
5651: EQUAL
5652: IFFALSE 5685
// result := Replace ( arr , pos [ 1 ] , value ) else
5654: LD_ADDR_VAR 0 4
5658: PUSH
5659: LD_VAR 0 1
5663: PPUSH
5664: LD_VAR 0 2
5668: PUSH
5669: LD_INT 1
5671: ARRAY
5672: PPUSH
5673: LD_VAR 0 3
5677: PPUSH
5678: CALL_OW 1
5682: ST_TO_ADDR
5683: GO 5947
// begin tmp := arr ;
5685: LD_ADDR_VAR 0 6
5689: PUSH
5690: LD_VAR 0 1
5694: ST_TO_ADDR
// s_arr := [ tmp ] ;
5695: LD_ADDR_VAR 0 7
5699: PUSH
5700: LD_VAR 0 6
5704: PUSH
5705: EMPTY
5706: LIST
5707: ST_TO_ADDR
// for i = 1 to pos - 1 do
5708: LD_ADDR_VAR 0 5
5712: PUSH
5713: DOUBLE
5714: LD_INT 1
5716: DEC
5717: ST_TO_ADDR
5718: LD_VAR 0 2
5722: PUSH
5723: LD_INT 1
5725: MINUS
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5773
// begin tmp := tmp [ pos [ i ] ] ;
5730: LD_ADDR_VAR 0 6
5734: PUSH
5735: LD_VAR 0 6
5739: PUSH
5740: LD_VAR 0 2
5744: PUSH
5745: LD_VAR 0 5
5749: ARRAY
5750: ARRAY
5751: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: LD_VAR 0 7
5761: PUSH
5762: LD_VAR 0 6
5766: PUSH
5767: EMPTY
5768: LIST
5769: ADD
5770: ST_TO_ADDR
// end ;
5771: GO 5727
5773: POP
5774: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5775: LD_ADDR_VAR 0 6
5779: PUSH
5780: LD_VAR 0 6
5784: PPUSH
5785: LD_VAR 0 2
5789: PUSH
5790: LD_VAR 0 2
5794: ARRAY
5795: PPUSH
5796: LD_VAR 0 3
5800: PPUSH
5801: CALL_OW 1
5805: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5806: LD_ADDR_VAR 0 7
5810: PUSH
5811: LD_VAR 0 7
5815: PPUSH
5816: LD_VAR 0 7
5820: PPUSH
5821: LD_VAR 0 6
5825: PPUSH
5826: CALL_OW 1
5830: ST_TO_ADDR
// for i = s_arr downto 2 do
5831: LD_ADDR_VAR 0 5
5835: PUSH
5836: DOUBLE
5837: LD_VAR 0 7
5841: INC
5842: ST_TO_ADDR
5843: LD_INT 2
5845: PUSH
5846: FOR_DOWNTO
5847: IFFALSE 5931
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5849: LD_ADDR_VAR 0 6
5853: PUSH
5854: LD_VAR 0 7
5858: PUSH
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 1
5866: MINUS
5867: ARRAY
5868: PPUSH
5869: LD_VAR 0 2
5873: PUSH
5874: LD_VAR 0 5
5878: PUSH
5879: LD_INT 1
5881: MINUS
5882: ARRAY
5883: PPUSH
5884: LD_VAR 0 7
5888: PUSH
5889: LD_VAR 0 5
5893: ARRAY
5894: PPUSH
5895: CALL_OW 1
5899: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5900: LD_ADDR_VAR 0 7
5904: PUSH
5905: LD_VAR 0 7
5909: PPUSH
5910: LD_VAR 0 5
5914: PUSH
5915: LD_INT 1
5917: MINUS
5918: PPUSH
5919: LD_VAR 0 6
5923: PPUSH
5924: CALL_OW 1
5928: ST_TO_ADDR
// end ;
5929: GO 5846
5931: POP
5932: POP
// result := s_arr [ 1 ] ;
5933: LD_ADDR_VAR 0 4
5937: PUSH
5938: LD_VAR 0 7
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: ST_TO_ADDR
// end ; end ;
5947: LD_VAR 0 4
5951: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5952: LD_INT 0
5954: PPUSH
5955: PPUSH
// if not list then
5956: LD_VAR 0 1
5960: NOT
5961: IFFALSE 5965
// exit ;
5963: GO 6056
// i := list [ pos1 ] ;
5965: LD_ADDR_VAR 0 5
5969: PUSH
5970: LD_VAR 0 1
5974: PUSH
5975: LD_VAR 0 2
5979: ARRAY
5980: ST_TO_ADDR
// if not i then
5981: LD_VAR 0 5
5985: NOT
5986: IFFALSE 5990
// exit ;
5988: GO 6056
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: LD_VAR 0 2
6004: PPUSH
6005: LD_VAR 0 1
6009: PUSH
6010: LD_VAR 0 3
6014: ARRAY
6015: PPUSH
6016: CALL_OW 1
6020: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6021: LD_ADDR_VAR 0 1
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: LD_VAR 0 3
6035: PPUSH
6036: LD_VAR 0 5
6040: PPUSH
6041: CALL_OW 1
6045: ST_TO_ADDR
// result := list ;
6046: LD_ADDR_VAR 0 4
6050: PUSH
6051: LD_VAR 0 1
6055: ST_TO_ADDR
// end ;
6056: LD_VAR 0 4
6060: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6061: LD_INT 0
6063: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_VAR 0 1
6073: PPUSH
6074: CALL_OW 250
6078: PPUSH
6079: LD_VAR 0 1
6083: PPUSH
6084: CALL_OW 251
6088: PPUSH
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_VAR 0 3
6098: PPUSH
6099: LD_VAR 0 4
6103: PPUSH
6104: CALL 6486 0 5
6108: ST_TO_ADDR
// end ;
6109: LD_VAR 0 5
6113: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6114: LD_INT 0
6116: PPUSH
6117: PPUSH
6118: PPUSH
6119: PPUSH
// if not list or not unit then
6120: LD_VAR 0 2
6124: NOT
6125: IFTRUE 6134
6127: PUSH
6128: LD_VAR 0 1
6132: NOT
6133: OR
6134: IFFALSE 6138
// exit ;
6136: GO 6481
// result := [ ] ;
6138: LD_ADDR_VAR 0 5
6142: PUSH
6143: EMPTY
6144: ST_TO_ADDR
// for i in list do
6145: LD_ADDR_VAR 0 6
6149: PUSH
6150: LD_VAR 0 2
6154: PUSH
6155: FOR_IN
6156: IFFALSE 6374
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6158: LD_ADDR_VAR 0 8
6162: PUSH
6163: LD_VAR 0 1
6167: PPUSH
6168: LD_VAR 0 6
6172: PUSH
6173: LD_INT 1
6175: ARRAY
6176: PPUSH
6177: LD_VAR 0 6
6181: PUSH
6182: LD_INT 2
6184: ARRAY
6185: PPUSH
6186: CALL_OW 297
6190: ST_TO_ADDR
// if not Count ( result ) then
6191: LD_VAR 0 5
6195: PPUSH
6196: CALL 2742 0 1
6200: NOT
6201: IFFALSE 6234
// begin result := Join ( result , [ i , tmp ] ) ;
6203: LD_ADDR_VAR 0 5
6207: PUSH
6208: LD_VAR 0 5
6212: PPUSH
6213: LD_VAR 0 6
6217: PUSH
6218: LD_VAR 0 8
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PPUSH
6227: CALL 38674 0 2
6231: ST_TO_ADDR
// continue ;
6232: GO 6155
// end ; if result [ result ] [ 2 ] <= tmp then
6234: LD_VAR 0 5
6238: PUSH
6239: LD_VAR 0 5
6243: ARRAY
6244: PUSH
6245: LD_INT 2
6247: ARRAY
6248: PUSH
6249: LD_VAR 0 8
6253: LESSEQUAL
6254: IFFALSE 6287
// result := Join ( result , [ i , tmp ] ) else
6256: LD_ADDR_VAR 0 5
6260: PUSH
6261: LD_VAR 0 5
6265: PPUSH
6266: LD_VAR 0 6
6270: PUSH
6271: LD_VAR 0 8
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PPUSH
6280: CALL 38674 0 2
6284: ST_TO_ADDR
6285: GO 6372
// begin for j := 1 to Count ( result ) do
6287: LD_ADDR_VAR 0 7
6291: PUSH
6292: DOUBLE
6293: LD_INT 1
6295: DEC
6296: ST_TO_ADDR
6297: LD_VAR 0 5
6301: PPUSH
6302: CALL 2742 0 1
6306: PUSH
6307: FOR_TO
6308: IFFALSE 6370
// begin if tmp < result [ j ] [ 2 ] then
6310: LD_VAR 0 8
6314: PUSH
6315: LD_VAR 0 5
6319: PUSH
6320: LD_VAR 0 7
6324: ARRAY
6325: PUSH
6326: LD_INT 2
6328: ARRAY
6329: LESS
6330: IFFALSE 6368
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6332: LD_ADDR_VAR 0 5
6336: PUSH
6337: LD_VAR 0 5
6341: PPUSH
6342: LD_VAR 0 7
6346: PPUSH
6347: LD_VAR 0 6
6351: PUSH
6352: LD_VAR 0 8
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PPUSH
6361: CALL_OW 2
6365: ST_TO_ADDR
// break ;
6366: GO 6370
// end ; end ;
6368: GO 6307
6370: POP
6371: POP
// end ; end ;
6372: GO 6155
6374: POP
6375: POP
// if result and not asc then
6376: LD_VAR 0 5
6380: IFFALSE 6389
6382: PUSH
6383: LD_VAR 0 3
6387: NOT
6388: AND
6389: IFFALSE 6406
// result := ReverseArray ( result ) ;
6391: LD_ADDR_VAR 0 5
6395: PUSH
6396: LD_VAR 0 5
6400: PPUSH
6401: CALL 33764 0 1
6405: ST_TO_ADDR
// tmp := [ ] ;
6406: LD_ADDR_VAR 0 8
6410: PUSH
6411: EMPTY
6412: ST_TO_ADDR
// if mode then
6413: LD_VAR 0 4
6417: IFFALSE 6481
// begin for i := 1 to result do
6419: LD_ADDR_VAR 0 6
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 5
6433: PUSH
6434: FOR_TO
6435: IFFALSE 6469
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6437: LD_ADDR_VAR 0 8
6441: PUSH
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_VAR 0 5
6451: PUSH
6452: LD_VAR 0 6
6456: ARRAY
6457: PUSH
6458: LD_INT 1
6460: ARRAY
6461: PPUSH
6462: CALL 38674 0 2
6466: ST_TO_ADDR
6467: GO 6434
6469: POP
6470: POP
// result := tmp ;
6471: LD_ADDR_VAR 0 5
6475: PUSH
6476: LD_VAR 0 8
6480: ST_TO_ADDR
// end ; end ;
6481: LD_VAR 0 5
6485: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// if not list then
6492: LD_VAR 0 3
6496: NOT
6497: IFFALSE 6501
// exit ;
6499: GO 6891
// result := [ ] ;
6501: LD_ADDR_VAR 0 6
6505: PUSH
6506: EMPTY
6507: ST_TO_ADDR
// for i in list do
6508: LD_ADDR_VAR 0 7
6512: PUSH
6513: LD_VAR 0 3
6517: PUSH
6518: FOR_IN
6519: IFFALSE 6721
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6521: LD_ADDR_VAR 0 9
6525: PUSH
6526: LD_VAR 0 7
6530: PPUSH
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_VAR 0 2
6540: PPUSH
6541: CALL_OW 297
6545: ST_TO_ADDR
// if not result then
6546: LD_VAR 0 6
6550: NOT
6551: IFFALSE 6577
// result := [ [ i , tmp ] ] else
6553: LD_ADDR_VAR 0 6
6557: PUSH
6558: LD_VAR 0 7
6562: PUSH
6563: LD_VAR 0 9
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: EMPTY
6573: LIST
6574: ST_TO_ADDR
6575: GO 6719
// begin if result [ result ] [ 2 ] <= tmp then
6577: LD_VAR 0 6
6581: PUSH
6582: LD_VAR 0 6
6586: ARRAY
6587: PUSH
6588: LD_INT 2
6590: ARRAY
6591: PUSH
6592: LD_VAR 0 9
6596: LESSEQUAL
6597: IFFALSE 6639
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6599: LD_ADDR_VAR 0 6
6603: PUSH
6604: LD_VAR 0 6
6608: PPUSH
6609: LD_VAR 0 6
6613: PUSH
6614: LD_INT 1
6616: PLUS
6617: PPUSH
6618: LD_VAR 0 7
6622: PUSH
6623: LD_VAR 0 9
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PPUSH
6632: CALL_OW 2
6636: ST_TO_ADDR
6637: GO 6719
// for j := 1 to result do
6639: LD_ADDR_VAR 0 8
6643: PUSH
6644: DOUBLE
6645: LD_INT 1
6647: DEC
6648: ST_TO_ADDR
6649: LD_VAR 0 6
6653: PUSH
6654: FOR_TO
6655: IFFALSE 6717
// begin if tmp < result [ j ] [ 2 ] then
6657: LD_VAR 0 9
6661: PUSH
6662: LD_VAR 0 6
6666: PUSH
6667: LD_VAR 0 8
6671: ARRAY
6672: PUSH
6673: LD_INT 2
6675: ARRAY
6676: LESS
6677: IFFALSE 6715
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6679: LD_ADDR_VAR 0 6
6683: PUSH
6684: LD_VAR 0 6
6688: PPUSH
6689: LD_VAR 0 8
6693: PPUSH
6694: LD_VAR 0 7
6698: PUSH
6699: LD_VAR 0 9
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PPUSH
6708: CALL_OW 2
6712: ST_TO_ADDR
// break ;
6713: GO 6717
// end ; end ;
6715: GO 6654
6717: POP
6718: POP
// end ; end ;
6719: GO 6518
6721: POP
6722: POP
// if result and not asc then
6723: LD_VAR 0 6
6727: IFFALSE 6736
6729: PUSH
6730: LD_VAR 0 4
6734: NOT
6735: AND
6736: IFFALSE 6811
// begin tmp := result ;
6738: LD_ADDR_VAR 0 9
6742: PUSH
6743: LD_VAR 0 6
6747: ST_TO_ADDR
// for i = tmp downto 1 do
6748: LD_ADDR_VAR 0 7
6752: PUSH
6753: DOUBLE
6754: LD_VAR 0 9
6758: INC
6759: ST_TO_ADDR
6760: LD_INT 1
6762: PUSH
6763: FOR_DOWNTO
6764: IFFALSE 6809
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6766: LD_ADDR_VAR 0 6
6770: PUSH
6771: LD_VAR 0 6
6775: PPUSH
6776: LD_VAR 0 9
6780: PUSH
6781: LD_VAR 0 7
6785: MINUS
6786: PUSH
6787: LD_INT 1
6789: PLUS
6790: PPUSH
6791: LD_VAR 0 9
6795: PUSH
6796: LD_VAR 0 7
6800: ARRAY
6801: PPUSH
6802: CALL_OW 1
6806: ST_TO_ADDR
6807: GO 6763
6809: POP
6810: POP
// end ; tmp := [ ] ;
6811: LD_ADDR_VAR 0 9
6815: PUSH
6816: EMPTY
6817: ST_TO_ADDR
// if mode then
6818: LD_VAR 0 5
6822: IFFALSE 6891
// begin for i = 1 to result do
6824: LD_ADDR_VAR 0 7
6828: PUSH
6829: DOUBLE
6830: LD_INT 1
6832: DEC
6833: ST_TO_ADDR
6834: LD_VAR 0 6
6838: PUSH
6839: FOR_TO
6840: IFFALSE 6879
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6842: LD_ADDR_VAR 0 9
6846: PUSH
6847: LD_VAR 0 9
6851: PPUSH
6852: LD_VAR 0 7
6856: PPUSH
6857: LD_VAR 0 6
6861: PUSH
6862: LD_VAR 0 7
6866: ARRAY
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PPUSH
6872: CALL_OW 1
6876: ST_TO_ADDR
6877: GO 6839
6879: POP
6880: POP
// result := tmp ;
6881: LD_ADDR_VAR 0 6
6885: PUSH
6886: LD_VAR 0 9
6890: ST_TO_ADDR
// end ; end ;
6891: LD_VAR 0 6
6895: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6904: LD_ADDR_VAR 0 5
6908: PUSH
6909: LD_INT 0
6911: PUSH
6912: LD_INT 0
6914: PUSH
6915: LD_INT 0
6917: PUSH
6918: EMPTY
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: ST_TO_ADDR
// if not x or not y then
6926: LD_VAR 0 2
6930: NOT
6931: IFTRUE 6940
6933: PUSH
6934: LD_VAR 0 3
6938: NOT
6939: OR
6940: IFFALSE 6944
// exit ;
6942: GO 8600
// if not range then
6944: LD_VAR 0 4
6948: NOT
6949: IFFALSE 6959
// range := 10 ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: LD_INT 10
6958: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6959: LD_ADDR_VAR 0 8
6963: PUSH
6964: LD_INT 81
6966: PUSH
6967: LD_VAR 0 1
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 92
6978: PUSH
6979: LD_VAR 0 2
6983: PUSH
6984: LD_VAR 0 3
6988: PUSH
6989: LD_VAR 0 4
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 3
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 69
7026: ST_TO_ADDR
// if not tmp then
7027: LD_VAR 0 8
7031: NOT
7032: IFFALSE 7036
// exit ;
7034: GO 8600
// for i in tmp do
7036: LD_ADDR_VAR 0 6
7040: PUSH
7041: LD_VAR 0 8
7045: PUSH
7046: FOR_IN
7047: IFFALSE 8575
// begin points := [ 0 , 0 , 0 ] ;
7049: LD_ADDR_VAR 0 9
7053: PUSH
7054: LD_INT 0
7056: PUSH
7057: LD_INT 0
7059: PUSH
7060: LD_INT 0
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: ST_TO_ADDR
// bpoints := 1 ;
7068: LD_ADDR_VAR 0 10
7072: PUSH
7073: LD_INT 1
7075: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7076: LD_VAR 0 6
7080: PPUSH
7081: CALL_OW 247
7085: PUSH
7086: LD_INT 1
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7676
7094: POP
// begin if GetClass ( i ) = 1 then
7095: LD_VAR 0 6
7099: PPUSH
7100: CALL_OW 257
7104: PUSH
7105: LD_INT 1
7107: EQUAL
7108: IFFALSE 7129
// points := [ 10 , 5 , 3 ] ;
7110: LD_ADDR_VAR 0 9
7114: PUSH
7115: LD_INT 10
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 3
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7129: LD_VAR 0 6
7133: PPUSH
7134: CALL_OW 257
7138: PUSH
7139: LD_INT 2
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: LD_INT 4
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: IN
7153: IFFALSE 7174
// points := [ 3 , 2 , 1 ] ;
7155: LD_ADDR_VAR 0 9
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: LD_INT 2
7165: PUSH
7166: LD_INT 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7174: LD_VAR 0 6
7178: PPUSH
7179: CALL_OW 257
7183: PUSH
7184: LD_INT 5
7186: EQUAL
7187: IFFALSE 7208
// points := [ 130 , 5 , 2 ] ;
7189: LD_ADDR_VAR 0 9
7193: PUSH
7194: LD_INT 130
7196: PUSH
7197: LD_INT 5
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7208: LD_VAR 0 6
7212: PPUSH
7213: CALL_OW 257
7217: PUSH
7218: LD_INT 8
7220: EQUAL
7221: IFFALSE 7242
// points := [ 35 , 35 , 30 ] ;
7223: LD_ADDR_VAR 0 9
7227: PUSH
7228: LD_INT 35
7230: PUSH
7231: LD_INT 35
7233: PUSH
7234: LD_INT 30
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7242: LD_VAR 0 6
7246: PPUSH
7247: CALL_OW 257
7251: PUSH
7252: LD_INT 9
7254: EQUAL
7255: IFFALSE 7276
// points := [ 20 , 55 , 40 ] ;
7257: LD_ADDR_VAR 0 9
7261: PUSH
7262: LD_INT 20
7264: PUSH
7265: LD_INT 55
7267: PUSH
7268: LD_INT 40
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7276: LD_VAR 0 6
7280: PPUSH
7281: CALL_OW 257
7285: PUSH
7286: LD_INT 12
7288: PUSH
7289: LD_INT 16
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: IN
7296: IFFALSE 7317
// points := [ 5 , 3 , 2 ] ;
7298: LD_ADDR_VAR 0 9
7302: PUSH
7303: LD_INT 5
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: LD_INT 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7317: LD_VAR 0 6
7321: PPUSH
7322: CALL_OW 257
7326: PUSH
7327: LD_INT 17
7329: EQUAL
7330: IFFALSE 7351
// points := [ 100 , 50 , 75 ] ;
7332: LD_ADDR_VAR 0 9
7336: PUSH
7337: LD_INT 100
7339: PUSH
7340: LD_INT 50
7342: PUSH
7343: LD_INT 75
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7351: LD_VAR 0 6
7355: PPUSH
7356: CALL_OW 257
7360: PUSH
7361: LD_INT 15
7363: EQUAL
7364: IFFALSE 7385
// points := [ 10 , 5 , 3 ] ;
7366: LD_ADDR_VAR 0 9
7370: PUSH
7371: LD_INT 10
7373: PUSH
7374: LD_INT 5
7376: PUSH
7377: LD_INT 3
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7385: LD_VAR 0 6
7389: PPUSH
7390: CALL_OW 257
7394: PUSH
7395: LD_INT 14
7397: EQUAL
7398: IFFALSE 7419
// points := [ 10 , 0 , 0 ] ;
7400: LD_ADDR_VAR 0 9
7404: PUSH
7405: LD_INT 10
7407: PUSH
7408: LD_INT 0
7410: PUSH
7411: LD_INT 0
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7419: LD_VAR 0 6
7423: PPUSH
7424: CALL_OW 257
7428: PUSH
7429: LD_INT 11
7431: EQUAL
7432: IFFALSE 7453
// points := [ 30 , 10 , 5 ] ;
7434: LD_ADDR_VAR 0 9
7438: PUSH
7439: LD_INT 30
7441: PUSH
7442: LD_INT 10
7444: PUSH
7445: LD_INT 5
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7453: LD_VAR 0 1
7457: PPUSH
7458: LD_INT 5
7460: PPUSH
7461: CALL_OW 321
7465: PUSH
7466: LD_INT 2
7468: EQUAL
7469: IFFALSE 7486
// bpoints := bpoints * 1.8 ;
7471: LD_ADDR_VAR 0 10
7475: PUSH
7476: LD_VAR 0 10
7480: PUSH
7481: LD_REAL  1.80000000000000E+0000
7484: MUL
7485: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7486: LD_VAR 0 6
7490: PPUSH
7491: CALL_OW 257
7495: PUSH
7496: LD_INT 1
7498: PUSH
7499: LD_INT 2
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: IN
7514: IFFALSE 7534
7516: PUSH
7517: LD_VAR 0 1
7521: PPUSH
7522: LD_INT 51
7524: PPUSH
7525: CALL_OW 321
7529: PUSH
7530: LD_INT 2
7532: EQUAL
7533: AND
7534: IFFALSE 7551
// bpoints := bpoints * 1.2 ;
7536: LD_ADDR_VAR 0 10
7540: PUSH
7541: LD_VAR 0 10
7545: PUSH
7546: LD_REAL  1.20000000000000E+0000
7549: MUL
7550: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7551: LD_VAR 0 6
7555: PPUSH
7556: CALL_OW 257
7560: PUSH
7561: LD_INT 5
7563: PUSH
7564: LD_INT 7
7566: PUSH
7567: LD_INT 9
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: IN
7575: IFFALSE 7595
7577: PUSH
7578: LD_VAR 0 1
7582: PPUSH
7583: LD_INT 52
7585: PPUSH
7586: CALL_OW 321
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: AND
7595: IFFALSE 7612
// bpoints := bpoints * 1.5 ;
7597: LD_ADDR_VAR 0 10
7601: PUSH
7602: LD_VAR 0 10
7606: PUSH
7607: LD_REAL  1.50000000000000E+0000
7610: MUL
7611: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_INT 66
7619: PPUSH
7620: CALL_OW 321
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: IFFALSE 7645
// bpoints := bpoints * 1.1 ;
7630: LD_ADDR_VAR 0 10
7634: PUSH
7635: LD_VAR 0 10
7639: PUSH
7640: LD_REAL  1.10000000000000E+0000
7643: MUL
7644: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7645: LD_ADDR_VAR 0 10
7649: PUSH
7650: LD_VAR 0 10
7654: PUSH
7655: LD_VAR 0 6
7659: PPUSH
7660: LD_INT 1
7662: PPUSH
7663: CALL_OW 259
7667: PUSH
7668: LD_REAL  1.15000000000000E+0000
7671: MUL
7672: MUL
7673: ST_TO_ADDR
// end ; unit_vehicle :
7674: GO 8504
7676: LD_INT 2
7678: DOUBLE
7679: EQUAL
7680: IFTRUE 7684
7682: GO 8492
7684: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7685: LD_VAR 0 6
7689: PPUSH
7690: CALL_OW 264
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 42
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: IN
7709: IFFALSE 7730
// points := [ 25 , 5 , 3 ] ;
7711: LD_ADDR_VAR 0 9
7715: PUSH
7716: LD_INT 25
7718: PUSH
7719: LD_INT 5
7721: PUSH
7722: LD_INT 3
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: LIST
7729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7730: LD_VAR 0 6
7734: PPUSH
7735: CALL_OW 264
7739: PUSH
7740: LD_INT 4
7742: PUSH
7743: LD_INT 43
7745: PUSH
7746: LD_INT 25
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: IN
7754: IFFALSE 7775
// points := [ 40 , 15 , 5 ] ;
7756: LD_ADDR_VAR 0 9
7760: PUSH
7761: LD_INT 40
7763: PUSH
7764: LD_INT 15
7766: PUSH
7767: LD_INT 5
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7775: LD_VAR 0 6
7779: PPUSH
7780: CALL_OW 264
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 23
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: IN
7795: IFFALSE 7816
// points := [ 7 , 25 , 8 ] ;
7797: LD_ADDR_VAR 0 9
7801: PUSH
7802: LD_INT 7
7804: PUSH
7805: LD_INT 25
7807: PUSH
7808: LD_INT 8
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7816: LD_VAR 0 6
7820: PPUSH
7821: CALL_OW 264
7825: PUSH
7826: LD_INT 5
7828: PUSH
7829: LD_INT 27
7831: PUSH
7832: LD_INT 44
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: IN
7840: IFFALSE 7861
// points := [ 14 , 50 , 16 ] ;
7842: LD_ADDR_VAR 0 9
7846: PUSH
7847: LD_INT 14
7849: PUSH
7850: LD_INT 50
7852: PUSH
7853: LD_INT 16
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7861: LD_VAR 0 6
7865: PPUSH
7866: CALL_OW 264
7870: PUSH
7871: LD_INT 6
7873: PUSH
7874: LD_INT 46
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: IN
7881: IFFALSE 7902
// points := [ 32 , 120 , 70 ] ;
7883: LD_ADDR_VAR 0 9
7887: PUSH
7888: LD_INT 32
7890: PUSH
7891: LD_INT 120
7893: PUSH
7894: LD_INT 70
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7902: LD_VAR 0 6
7906: PPUSH
7907: CALL_OW 264
7911: PUSH
7912: LD_INT 7
7914: PUSH
7915: LD_INT 28
7917: PUSH
7918: LD_INT 45
7920: PUSH
7921: LD_INT 92
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: IN
7930: IFFALSE 7951
// points := [ 35 , 20 , 45 ] ;
7932: LD_ADDR_VAR 0 9
7936: PUSH
7937: LD_INT 35
7939: PUSH
7940: LD_INT 20
7942: PUSH
7943: LD_INT 45
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7951: LD_VAR 0 6
7955: PPUSH
7956: CALL_OW 264
7960: PUSH
7961: LD_INT 47
7963: PUSH
7964: EMPTY
7965: LIST
7966: IN
7967: IFFALSE 7988
// points := [ 67 , 45 , 75 ] ;
7969: LD_ADDR_VAR 0 9
7973: PUSH
7974: LD_INT 67
7976: PUSH
7977: LD_INT 45
7979: PUSH
7980: LD_INT 75
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7988: LD_VAR 0 6
7992: PPUSH
7993: CALL_OW 264
7997: PUSH
7998: LD_INT 26
8000: PUSH
8001: EMPTY
8002: LIST
8003: IN
8004: IFFALSE 8025
// points := [ 120 , 30 , 80 ] ;
8006: LD_ADDR_VAR 0 9
8010: PUSH
8011: LD_INT 120
8013: PUSH
8014: LD_INT 30
8016: PUSH
8017: LD_INT 80
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8025: LD_VAR 0 6
8029: PPUSH
8030: CALL_OW 264
8034: PUSH
8035: LD_INT 22
8037: PUSH
8038: EMPTY
8039: LIST
8040: IN
8041: IFFALSE 8062
// points := [ 40 , 1 , 1 ] ;
8043: LD_ADDR_VAR 0 9
8047: PUSH
8048: LD_INT 40
8050: PUSH
8051: LD_INT 1
8053: PUSH
8054: LD_INT 1
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 264
8071: PUSH
8072: LD_INT 29
8074: PUSH
8075: EMPTY
8076: LIST
8077: IN
8078: IFFALSE 8099
// points := [ 70 , 200 , 400 ] ;
8080: LD_ADDR_VAR 0 9
8084: PUSH
8085: LD_INT 70
8087: PUSH
8088: LD_INT 200
8090: PUSH
8091: LD_INT 400
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8099: LD_VAR 0 6
8103: PPUSH
8104: CALL_OW 264
8108: PUSH
8109: LD_INT 14
8111: PUSH
8112: LD_INT 53
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: IN
8119: IFFALSE 8140
// points := [ 40 , 10 , 20 ] ;
8121: LD_ADDR_VAR 0 9
8125: PUSH
8126: LD_INT 40
8128: PUSH
8129: LD_INT 10
8131: PUSH
8132: LD_INT 20
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8140: LD_VAR 0 6
8144: PPUSH
8145: CALL_OW 264
8149: PUSH
8150: LD_INT 9
8152: PUSH
8153: EMPTY
8154: LIST
8155: IN
8156: IFFALSE 8177
// points := [ 5 , 70 , 20 ] ;
8158: LD_ADDR_VAR 0 9
8162: PUSH
8163: LD_INT 5
8165: PUSH
8166: LD_INT 70
8168: PUSH
8169: LD_INT 20
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8177: LD_VAR 0 6
8181: PPUSH
8182: CALL_OW 264
8186: PUSH
8187: LD_INT 10
8189: PUSH
8190: EMPTY
8191: LIST
8192: IN
8193: IFFALSE 8214
// points := [ 35 , 110 , 70 ] ;
8195: LD_ADDR_VAR 0 9
8199: PUSH
8200: LD_INT 35
8202: PUSH
8203: LD_INT 110
8205: PUSH
8206: LD_INT 70
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: LIST
8213: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8214: LD_VAR 0 6
8218: PPUSH
8219: CALL_OW 265
8223: PUSH
8224: LD_INT 25
8226: EQUAL
8227: IFFALSE 8248
// points := [ 80 , 65 , 100 ] ;
8229: LD_ADDR_VAR 0 9
8233: PUSH
8234: LD_INT 80
8236: PUSH
8237: LD_INT 65
8239: PUSH
8240: LD_INT 100
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8248: LD_VAR 0 6
8252: PPUSH
8253: CALL_OW 263
8257: PUSH
8258: LD_INT 1
8260: EQUAL
8261: IFFALSE 8296
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8263: LD_ADDR_VAR 0 10
8267: PUSH
8268: LD_VAR 0 10
8272: PUSH
8273: LD_VAR 0 6
8277: PPUSH
8278: CALL_OW 311
8282: PPUSH
8283: LD_INT 3
8285: PPUSH
8286: CALL_OW 259
8290: PUSH
8291: LD_INT 4
8293: MUL
8294: MUL
8295: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8296: LD_VAR 0 6
8300: PPUSH
8301: CALL_OW 263
8305: PUSH
8306: LD_INT 2
8308: EQUAL
8309: IFFALSE 8360
// begin j := IsControledBy ( i ) ;
8311: LD_ADDR_VAR 0 7
8315: PUSH
8316: LD_VAR 0 6
8320: PPUSH
8321: CALL_OW 312
8325: ST_TO_ADDR
// if j then
8326: LD_VAR 0 7
8330: IFFALSE 8360
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8332: LD_ADDR_VAR 0 10
8336: PUSH
8337: LD_VAR 0 10
8341: PUSH
8342: LD_VAR 0 7
8346: PPUSH
8347: LD_INT 3
8349: PPUSH
8350: CALL_OW 259
8354: PUSH
8355: LD_INT 3
8357: MUL
8358: MUL
8359: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8360: LD_VAR 0 6
8364: PPUSH
8365: CALL_OW 264
8369: PUSH
8370: LD_INT 5
8372: PUSH
8373: LD_INT 6
8375: PUSH
8376: LD_INT 46
8378: PUSH
8379: LD_INT 44
8381: PUSH
8382: LD_INT 47
8384: PUSH
8385: LD_INT 45
8387: PUSH
8388: LD_INT 28
8390: PUSH
8391: LD_INT 7
8393: PUSH
8394: LD_INT 27
8396: PUSH
8397: LD_INT 29
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: IN
8412: IFFALSE 8432
8414: PUSH
8415: LD_VAR 0 1
8419: PPUSH
8420: LD_INT 52
8422: PPUSH
8423: CALL_OW 321
8427: PUSH
8428: LD_INT 2
8430: EQUAL
8431: AND
8432: IFFALSE 8449
// bpoints := bpoints * 1.2 ;
8434: LD_ADDR_VAR 0 10
8438: PUSH
8439: LD_VAR 0 10
8443: PUSH
8444: LD_REAL  1.20000000000000E+0000
8447: MUL
8448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8449: LD_VAR 0 6
8453: PPUSH
8454: CALL_OW 264
8458: PUSH
8459: LD_INT 6
8461: PUSH
8462: LD_INT 46
8464: PUSH
8465: LD_INT 47
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: IN
8473: IFFALSE 8490
// bpoints := bpoints * 1.2 ;
8475: LD_ADDR_VAR 0 10
8479: PUSH
8480: LD_VAR 0 10
8484: PUSH
8485: LD_REAL  1.20000000000000E+0000
8488: MUL
8489: ST_TO_ADDR
// end ; unit_building :
8490: GO 8504
8492: LD_INT 3
8494: DOUBLE
8495: EQUAL
8496: IFTRUE 8500
8498: GO 8503
8500: POP
// ; end ;
8501: GO 8504
8503: POP
// for j = 1 to 3 do
8504: LD_ADDR_VAR 0 7
8508: PUSH
8509: DOUBLE
8510: LD_INT 1
8512: DEC
8513: ST_TO_ADDR
8514: LD_INT 3
8516: PUSH
8517: FOR_TO
8518: IFFALSE 8571
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8520: LD_ADDR_VAR 0 5
8524: PUSH
8525: LD_VAR 0 5
8529: PPUSH
8530: LD_VAR 0 7
8534: PPUSH
8535: LD_VAR 0 5
8539: PUSH
8540: LD_VAR 0 7
8544: ARRAY
8545: PUSH
8546: LD_VAR 0 9
8550: PUSH
8551: LD_VAR 0 7
8555: ARRAY
8556: PUSH
8557: LD_VAR 0 10
8561: MUL
8562: PLUS
8563: PPUSH
8564: CALL_OW 1
8568: ST_TO_ADDR
8569: GO 8517
8571: POP
8572: POP
// end ;
8573: GO 7046
8575: POP
8576: POP
// result := Replace ( result , 4 , tmp ) ;
8577: LD_ADDR_VAR 0 5
8581: PUSH
8582: LD_VAR 0 5
8586: PPUSH
8587: LD_INT 4
8589: PPUSH
8590: LD_VAR 0 8
8594: PPUSH
8595: CALL_OW 1
8599: ST_TO_ADDR
// end ;
8600: LD_VAR 0 5
8604: RET
// export function DangerAtRange ( unit , range ) ; begin
8605: LD_INT 0
8607: PPUSH
// if not unit then
8608: LD_VAR 0 1
8612: NOT
8613: IFFALSE 8617
// exit ;
8615: GO 8662
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8617: LD_ADDR_VAR 0 3
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 255
8631: PPUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 250
8641: PPUSH
8642: LD_VAR 0 1
8646: PPUSH
8647: CALL_OW 251
8651: PPUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL 6896 0 4
8661: ST_TO_ADDR
// end ;
8662: LD_VAR 0 3
8666: RET
// export function DangerInArea ( side , area ) ; begin
8667: LD_INT 0
8669: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8670: LD_ADDR_VAR 0 3
8674: PUSH
8675: LD_VAR 0 2
8679: PPUSH
8680: LD_INT 81
8682: PUSH
8683: LD_VAR 0 1
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 70
8696: ST_TO_ADDR
// end ;
8697: LD_VAR 0 3
8701: RET
// export function IsExtension ( b ) ; begin
8702: LD_INT 0
8704: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8705: LD_ADDR_VAR 0 2
8709: PUSH
8710: LD_VAR 0 1
8714: PUSH
8715: LD_INT 23
8717: PUSH
8718: LD_INT 20
8720: PUSH
8721: LD_INT 22
8723: PUSH
8724: LD_INT 17
8726: PUSH
8727: LD_INT 24
8729: PUSH
8730: LD_INT 21
8732: PUSH
8733: LD_INT 19
8735: PUSH
8736: LD_INT 16
8738: PUSH
8739: LD_INT 25
8741: PUSH
8742: LD_INT 18
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: IN
8757: ST_TO_ADDR
// end ;
8758: LD_VAR 0 2
8762: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8763: LD_INT 0
8765: PPUSH
8766: PPUSH
8767: PPUSH
// result := [ ] ;
8768: LD_ADDR_VAR 0 4
8772: PUSH
8773: EMPTY
8774: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8775: LD_ADDR_VAR 0 5
8779: PUSH
8780: LD_VAR 0 2
8784: PPUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PPUSH
8795: CALL_OW 70
8799: ST_TO_ADDR
// if not tmp then
8800: LD_VAR 0 5
8804: NOT
8805: IFFALSE 8809
// exit ;
8807: GO 8873
// if checkLink then
8809: LD_VAR 0 3
8813: IFFALSE 8863
// begin for i in tmp do
8815: LD_ADDR_VAR 0 6
8819: PUSH
8820: LD_VAR 0 5
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8861
// if GetBase ( i ) <> base then
8828: LD_VAR 0 6
8832: PPUSH
8833: CALL_OW 274
8837: PUSH
8838: LD_VAR 0 1
8842: NONEQUAL
8843: IFFALSE 8859
// ComLinkToBase ( base , i ) ;
8845: LD_VAR 0 1
8849: PPUSH
8850: LD_VAR 0 6
8854: PPUSH
8855: CALL_OW 169
8859: GO 8825
8861: POP
8862: POP
// end ; result := tmp ;
8863: LD_ADDR_VAR 0 4
8867: PUSH
8868: LD_VAR 0 5
8872: ST_TO_ADDR
// end ;
8873: LD_VAR 0 4
8877: RET
// export function ComComplete ( units , b ) ; var i ; begin
8878: LD_INT 0
8880: PPUSH
8881: PPUSH
// if not units then
8882: LD_VAR 0 1
8886: NOT
8887: IFFALSE 8891
// exit ;
8889: GO 8981
// for i in units do
8891: LD_ADDR_VAR 0 4
8895: PUSH
8896: LD_VAR 0 1
8900: PUSH
8901: FOR_IN
8902: IFFALSE 8979
// if BuildingStatus ( b ) = bs_build then
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 461
8913: PUSH
8914: LD_INT 1
8916: EQUAL
8917: IFFALSE 8977
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8919: LD_VAR 0 4
8923: PPUSH
8924: LD_STRING h
8926: PUSH
8927: LD_VAR 0 2
8931: PPUSH
8932: CALL_OW 250
8936: PUSH
8937: LD_VAR 0 2
8941: PPUSH
8942: CALL_OW 251
8946: PUSH
8947: LD_VAR 0 2
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: LD_INT 0
8957: PUSH
8958: LD_INT 0
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: PPUSH
8973: CALL_OW 446
8977: GO 8901
8979: POP
8980: POP
// end ;
8981: LD_VAR 0 3
8985: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8986: LD_INT 0
8988: PPUSH
8989: PPUSH
8990: PPUSH
8991: PPUSH
8992: PPUSH
8993: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8994: LD_VAR 0 1
8998: NOT
8999: IFTRUE 9016
9001: PUSH
9002: LD_VAR 0 1
9006: PPUSH
9007: CALL_OW 263
9011: PUSH
9012: LD_INT 2
9014: NONEQUAL
9015: OR
9016: IFFALSE 9020
// exit ;
9018: GO 9336
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9020: LD_ADDR_VAR 0 6
9024: PUSH
9025: LD_INT 22
9027: PUSH
9028: LD_VAR 0 1
9032: PPUSH
9033: CALL_OW 255
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 30
9047: PUSH
9048: LD_INT 36
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_INT 34
9057: PUSH
9058: LD_INT 31
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PPUSH
9074: CALL_OW 69
9078: ST_TO_ADDR
// if not tmp then
9079: LD_VAR 0 6
9083: NOT
9084: IFFALSE 9088
// exit ;
9086: GO 9336
// result := [ ] ;
9088: LD_ADDR_VAR 0 2
9092: PUSH
9093: EMPTY
9094: ST_TO_ADDR
// for i in tmp do
9095: LD_ADDR_VAR 0 3
9099: PUSH
9100: LD_VAR 0 6
9104: PUSH
9105: FOR_IN
9106: IFFALSE 9177
// begin t := UnitsInside ( i ) ;
9108: LD_ADDR_VAR 0 4
9112: PUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: CALL_OW 313
9122: ST_TO_ADDR
// if t then
9123: LD_VAR 0 4
9127: IFFALSE 9175
// for j in t do
9129: LD_ADDR_VAR 0 7
9133: PUSH
9134: LD_VAR 0 4
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9173
// result := Replace ( result , result + 1 , j ) ;
9142: LD_ADDR_VAR 0 2
9146: PUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: LD_VAR 0 2
9156: PUSH
9157: LD_INT 1
9159: PLUS
9160: PPUSH
9161: LD_VAR 0 7
9165: PPUSH
9166: CALL_OW 1
9170: ST_TO_ADDR
9171: GO 9139
9173: POP
9174: POP
// end ;
9175: GO 9105
9177: POP
9178: POP
// if not result then
9179: LD_VAR 0 2
9183: NOT
9184: IFFALSE 9188
// exit ;
9186: GO 9336
// mech := result [ 1 ] ;
9188: LD_ADDR_VAR 0 5
9192: PUSH
9193: LD_VAR 0 2
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: ST_TO_ADDR
// if result > 1 then
9202: LD_VAR 0 2
9206: PUSH
9207: LD_INT 1
9209: GREATER
9210: IFFALSE 9322
// begin for i = 2 to result do
9212: LD_ADDR_VAR 0 3
9216: PUSH
9217: DOUBLE
9218: LD_INT 2
9220: DEC
9221: ST_TO_ADDR
9222: LD_VAR 0 2
9226: PUSH
9227: FOR_TO
9228: IFFALSE 9320
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9230: LD_ADDR_VAR 0 4
9234: PUSH
9235: LD_VAR 0 2
9239: PUSH
9240: LD_VAR 0 3
9244: ARRAY
9245: PPUSH
9246: LD_INT 3
9248: PPUSH
9249: CALL_OW 259
9253: PUSH
9254: LD_VAR 0 2
9258: PUSH
9259: LD_VAR 0 3
9263: ARRAY
9264: PPUSH
9265: CALL_OW 432
9269: MINUS
9270: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9271: LD_VAR 0 4
9275: PUSH
9276: LD_VAR 0 5
9280: PPUSH
9281: LD_INT 3
9283: PPUSH
9284: CALL_OW 259
9288: PUSH
9289: LD_VAR 0 5
9293: PPUSH
9294: CALL_OW 432
9298: MINUS
9299: GREATEREQUAL
9300: IFFALSE 9318
// mech := result [ i ] ;
9302: LD_ADDR_VAR 0 5
9306: PUSH
9307: LD_VAR 0 2
9311: PUSH
9312: LD_VAR 0 3
9316: ARRAY
9317: ST_TO_ADDR
// end ;
9318: GO 9227
9320: POP
9321: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9322: LD_VAR 0 1
9326: PPUSH
9327: LD_VAR 0 5
9331: PPUSH
9332: CALL_OW 135
// end ;
9336: LD_VAR 0 2
9340: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9341: LD_INT 0
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
9347: PPUSH
9348: PPUSH
9349: PPUSH
9350: PPUSH
9351: PPUSH
9352: PPUSH
9353: PPUSH
9354: PPUSH
9355: PPUSH
// result := [ ] ;
9356: LD_ADDR_VAR 0 7
9360: PUSH
9361: EMPTY
9362: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 266
9372: PUSH
9373: LD_INT 0
9375: PUSH
9376: LD_INT 1
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: IN
9383: NOT
9384: IFFALSE 9388
// exit ;
9386: GO 11028
// if name then
9388: LD_VAR 0 3
9392: IFFALSE 9408
// SetBName ( base_dep , name ) ;
9394: LD_VAR 0 1
9398: PPUSH
9399: LD_VAR 0 3
9403: PPUSH
9404: CALL_OW 500
// base := GetBase ( base_dep ) ;
9408: LD_ADDR_VAR 0 15
9412: PUSH
9413: LD_VAR 0 1
9417: PPUSH
9418: CALL_OW 274
9422: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9423: LD_ADDR_VAR 0 16
9427: PUSH
9428: LD_VAR 0 1
9432: PPUSH
9433: CALL_OW 255
9437: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9438: LD_ADDR_VAR 0 17
9442: PUSH
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 248
9452: ST_TO_ADDR
// if sources then
9453: LD_VAR 0 5
9457: IFFALSE 9504
// for i = 1 to 3 do
9459: LD_ADDR_VAR 0 8
9463: PUSH
9464: DOUBLE
9465: LD_INT 1
9467: DEC
9468: ST_TO_ADDR
9469: LD_INT 3
9471: PUSH
9472: FOR_TO
9473: IFFALSE 9502
// AddResourceType ( base , i , sources [ i ] ) ;
9475: LD_VAR 0 15
9479: PPUSH
9480: LD_VAR 0 8
9484: PPUSH
9485: LD_VAR 0 5
9489: PUSH
9490: LD_VAR 0 8
9494: ARRAY
9495: PPUSH
9496: CALL_OW 276
9500: GO 9472
9502: POP
9503: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9504: LD_ADDR_VAR 0 18
9508: PUSH
9509: LD_VAR 0 15
9513: PPUSH
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_INT 1
9521: PPUSH
9522: CALL 8763 0 3
9526: ST_TO_ADDR
// InitHc ;
9527: CALL_OW 19
// InitUc ;
9531: CALL_OW 18
// uc_side := side ;
9535: LD_ADDR_OWVAR 20
9539: PUSH
9540: LD_VAR 0 16
9544: ST_TO_ADDR
// uc_nation := nation ;
9545: LD_ADDR_OWVAR 21
9549: PUSH
9550: LD_VAR 0 17
9554: ST_TO_ADDR
// if buildings then
9555: LD_VAR 0 18
9559: IFFALSE 10887
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9561: LD_ADDR_VAR 0 19
9565: PUSH
9566: LD_VAR 0 18
9570: PPUSH
9571: LD_INT 2
9573: PUSH
9574: LD_INT 30
9576: PUSH
9577: LD_INT 29
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 30
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: PPUSH
9599: CALL_OW 72
9603: ST_TO_ADDR
// if tmp then
9604: LD_VAR 0 19
9608: IFFALSE 9656
// for i in tmp do
9610: LD_ADDR_VAR 0 8
9614: PUSH
9615: LD_VAR 0 19
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9654
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9623: LD_VAR 0 8
9627: PPUSH
9628: CALL_OW 250
9632: PPUSH
9633: LD_VAR 0 8
9637: PPUSH
9638: CALL_OW 251
9642: PPUSH
9643: LD_VAR 0 16
9647: PPUSH
9648: CALL_OW 441
9652: GO 9620
9654: POP
9655: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9656: LD_VAR 0 18
9660: PPUSH
9661: LD_INT 2
9663: PUSH
9664: LD_INT 30
9666: PUSH
9667: LD_INT 32
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 33
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: PPUSH
9689: CALL_OW 72
9693: IFFALSE 9781
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9695: LD_ADDR_VAR 0 8
9699: PUSH
9700: LD_VAR 0 18
9704: PPUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 32
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 33
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 72
9737: PUSH
9738: FOR_IN
9739: IFFALSE 9779
// begin if not GetBWeapon ( i ) then
9741: LD_VAR 0 8
9745: PPUSH
9746: CALL_OW 269
9750: NOT
9751: IFFALSE 9777
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9753: LD_VAR 0 8
9757: PPUSH
9758: LD_VAR 0 8
9762: PPUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: CALL 11033 0 2
9772: PPUSH
9773: CALL_OW 431
// end ;
9777: GO 9738
9779: POP
9780: POP
// end ; for i = 1 to personel do
9781: LD_ADDR_VAR 0 8
9785: PUSH
9786: DOUBLE
9787: LD_INT 1
9789: DEC
9790: ST_TO_ADDR
9791: LD_VAR 0 6
9795: PUSH
9796: FOR_TO
9797: IFFALSE 10867
// begin if i > 4 then
9799: LD_VAR 0 8
9803: PUSH
9804: LD_INT 4
9806: GREATER
9807: IFFALSE 9811
// break ;
9809: GO 10867
// case i of 1 :
9811: LD_VAR 0 8
9815: PUSH
9816: LD_INT 1
9818: DOUBLE
9819: EQUAL
9820: IFTRUE 9824
9822: GO 9904
9824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9825: LD_ADDR_VAR 0 12
9829: PUSH
9830: LD_VAR 0 18
9834: PPUSH
9835: LD_INT 22
9837: PUSH
9838: LD_VAR 0 16
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 58
9849: PUSH
9850: EMPTY
9851: LIST
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 30
9858: PUSH
9859: LD_INT 32
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 30
9868: PUSH
9869: LD_INT 4
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 30
9878: PUSH
9879: LD_INT 5
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: PPUSH
9897: CALL_OW 72
9901: ST_TO_ADDR
9902: GO 10126
9904: LD_INT 2
9906: DOUBLE
9907: EQUAL
9908: IFTRUE 9912
9910: GO 9974
9912: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9913: LD_ADDR_VAR 0 12
9917: PUSH
9918: LD_VAR 0 18
9922: PPUSH
9923: LD_INT 22
9925: PUSH
9926: LD_VAR 0 16
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 2
9937: PUSH
9938: LD_INT 30
9940: PUSH
9941: LD_INT 0
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 30
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PPUSH
9967: CALL_OW 72
9971: ST_TO_ADDR
9972: GO 10126
9974: LD_INT 3
9976: DOUBLE
9977: EQUAL
9978: IFTRUE 9982
9980: GO 10044
9982: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9983: LD_ADDR_VAR 0 12
9987: PUSH
9988: LD_VAR 0 18
9992: PPUSH
9993: LD_INT 22
9995: PUSH
9996: LD_VAR 0 16
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 2
10007: PUSH
10008: LD_INT 30
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 30
10020: PUSH
10021: LD_INT 3
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 72
10041: ST_TO_ADDR
10042: GO 10126
10044: LD_INT 4
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10125
10052: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10053: LD_ADDR_VAR 0 12
10057: PUSH
10058: LD_VAR 0 18
10062: PPUSH
10063: LD_INT 22
10065: PUSH
10066: LD_VAR 0 16
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 2
10077: PUSH
10078: LD_INT 30
10080: PUSH
10081: LD_INT 6
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 30
10090: PUSH
10091: LD_INT 7
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 30
10100: PUSH
10101: LD_INT 8
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PPUSH
10118: CALL_OW 72
10122: ST_TO_ADDR
10123: GO 10126
10125: POP
// if i = 1 then
10126: LD_VAR 0 8
10130: PUSH
10131: LD_INT 1
10133: EQUAL
10134: IFFALSE 10245
// begin tmp := [ ] ;
10136: LD_ADDR_VAR 0 19
10140: PUSH
10141: EMPTY
10142: ST_TO_ADDR
// for j in f do
10143: LD_ADDR_VAR 0 9
10147: PUSH
10148: LD_VAR 0 12
10152: PUSH
10153: FOR_IN
10154: IFFALSE 10227
// if GetBType ( j ) = b_bunker then
10156: LD_VAR 0 9
10160: PPUSH
10161: CALL_OW 266
10165: PUSH
10166: LD_INT 32
10168: EQUAL
10169: IFFALSE 10196
// tmp := Insert ( tmp , 1 , j ) else
10171: LD_ADDR_VAR 0 19
10175: PUSH
10176: LD_VAR 0 19
10180: PPUSH
10181: LD_INT 1
10183: PPUSH
10184: LD_VAR 0 9
10188: PPUSH
10189: CALL_OW 2
10193: ST_TO_ADDR
10194: GO 10225
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10196: LD_ADDR_VAR 0 19
10200: PUSH
10201: LD_VAR 0 19
10205: PPUSH
10206: LD_VAR 0 19
10210: PUSH
10211: LD_INT 1
10213: PLUS
10214: PPUSH
10215: LD_VAR 0 9
10219: PPUSH
10220: CALL_OW 2
10224: ST_TO_ADDR
10225: GO 10153
10227: POP
10228: POP
// if tmp then
10229: LD_VAR 0 19
10233: IFFALSE 10245
// f := tmp ;
10235: LD_ADDR_VAR 0 12
10239: PUSH
10240: LD_VAR 0 19
10244: ST_TO_ADDR
// end ; x := personel [ i ] ;
10245: LD_ADDR_VAR 0 13
10249: PUSH
10250: LD_VAR 0 6
10254: PUSH
10255: LD_VAR 0 8
10259: ARRAY
10260: ST_TO_ADDR
// if x = - 1 then
10261: LD_VAR 0 13
10265: PUSH
10266: LD_INT 1
10268: NEG
10269: EQUAL
10270: IFFALSE 10481
// begin for j in f do
10272: LD_ADDR_VAR 0 9
10276: PUSH
10277: LD_VAR 0 12
10281: PUSH
10282: FOR_IN
10283: IFFALSE 10477
// repeat InitHc ;
10285: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10289: LD_VAR 0 9
10293: PPUSH
10294: CALL_OW 266
10298: PUSH
10299: LD_INT 5
10301: EQUAL
10302: IFFALSE 10372
// begin if UnitsInside ( j ) < 3 then
10304: LD_VAR 0 9
10308: PPUSH
10309: CALL_OW 313
10313: PUSH
10314: LD_INT 3
10316: LESS
10317: IFFALSE 10353
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10319: LD_INT 0
10321: PPUSH
10322: LD_INT 5
10324: PUSH
10325: LD_INT 8
10327: PUSH
10328: LD_INT 9
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: LD_VAR 0 17
10340: ARRAY
10341: PPUSH
10342: LD_VAR 0 4
10346: PPUSH
10347: CALL_OW 380
10351: GO 10370
// PrepareHuman ( false , i , skill ) ;
10353: LD_INT 0
10355: PPUSH
10356: LD_VAR 0 8
10360: PPUSH
10361: LD_VAR 0 4
10365: PPUSH
10366: CALL_OW 380
// end else
10370: GO 10389
// PrepareHuman ( false , i , skill ) ;
10372: LD_INT 0
10374: PPUSH
10375: LD_VAR 0 8
10379: PPUSH
10380: LD_VAR 0 4
10384: PPUSH
10385: CALL_OW 380
// un := CreateHuman ;
10389: LD_ADDR_VAR 0 14
10393: PUSH
10394: CALL_OW 44
10398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10399: LD_ADDR_VAR 0 7
10403: PUSH
10404: LD_VAR 0 7
10408: PPUSH
10409: LD_INT 1
10411: PPUSH
10412: LD_VAR 0 14
10416: PPUSH
10417: CALL_OW 2
10421: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10422: LD_VAR 0 14
10426: PPUSH
10427: LD_VAR 0 9
10431: PPUSH
10432: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10436: LD_VAR 0 9
10440: PPUSH
10441: CALL_OW 313
10445: PUSH
10446: LD_INT 6
10448: EQUAL
10449: IFTRUE 10473
10451: PUSH
10452: LD_VAR 0 9
10456: PPUSH
10457: CALL_OW 266
10461: PUSH
10462: LD_INT 32
10464: PUSH
10465: LD_INT 31
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: IN
10472: OR
10473: IFFALSE 10285
10475: GO 10282
10477: POP
10478: POP
// end else
10479: GO 10865
// for j = 1 to x do
10481: LD_ADDR_VAR 0 9
10485: PUSH
10486: DOUBLE
10487: LD_INT 1
10489: DEC
10490: ST_TO_ADDR
10491: LD_VAR 0 13
10495: PUSH
10496: FOR_TO
10497: IFFALSE 10863
// begin InitHc ;
10499: CALL_OW 19
// if not f then
10503: LD_VAR 0 12
10507: NOT
10508: IFFALSE 10597
// begin PrepareHuman ( false , i , skill ) ;
10510: LD_INT 0
10512: PPUSH
10513: LD_VAR 0 8
10517: PPUSH
10518: LD_VAR 0 4
10522: PPUSH
10523: CALL_OW 380
// un := CreateHuman ;
10527: LD_ADDR_VAR 0 14
10531: PUSH
10532: CALL_OW 44
10536: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10537: LD_ADDR_VAR 0 7
10541: PUSH
10542: LD_VAR 0 7
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: LD_VAR 0 14
10554: PPUSH
10555: CALL_OW 2
10559: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10560: LD_VAR 0 14
10564: PPUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 250
10574: PPUSH
10575: LD_VAR 0 1
10579: PPUSH
10580: CALL_OW 251
10584: PPUSH
10585: LD_INT 10
10587: PPUSH
10588: LD_INT 0
10590: PPUSH
10591: CALL_OW 50
// continue ;
10595: GO 10496
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10597: LD_VAR 0 12
10601: PUSH
10602: LD_INT 1
10604: ARRAY
10605: PPUSH
10606: CALL_OW 313
10610: IFFALSE 10638
10612: PUSH
10613: LD_VAR 0 12
10617: PUSH
10618: LD_INT 1
10620: ARRAY
10621: PPUSH
10622: CALL_OW 266
10626: PUSH
10627: LD_INT 32
10629: PUSH
10630: LD_INT 31
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: IN
10637: AND
10638: IFTRUE 10659
10640: PUSH
10641: LD_VAR 0 12
10645: PUSH
10646: LD_INT 1
10648: ARRAY
10649: PPUSH
10650: CALL_OW 313
10654: PUSH
10655: LD_INT 6
10657: EQUAL
10658: OR
10659: IFFALSE 10679
// f := Delete ( f , 1 ) ;
10661: LD_ADDR_VAR 0 12
10665: PUSH
10666: LD_VAR 0 12
10670: PPUSH
10671: LD_INT 1
10673: PPUSH
10674: CALL_OW 3
10678: ST_TO_ADDR
// if not f then
10679: LD_VAR 0 12
10683: NOT
10684: IFFALSE 10702
// begin x := x + 2 ;
10686: LD_ADDR_VAR 0 13
10690: PUSH
10691: LD_VAR 0 13
10695: PUSH
10696: LD_INT 2
10698: PLUS
10699: ST_TO_ADDR
// continue ;
10700: GO 10496
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10702: LD_VAR 0 12
10706: PUSH
10707: LD_INT 1
10709: ARRAY
10710: PPUSH
10711: CALL_OW 266
10715: PUSH
10716: LD_INT 5
10718: EQUAL
10719: IFFALSE 10793
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10721: LD_VAR 0 12
10725: PUSH
10726: LD_INT 1
10728: ARRAY
10729: PPUSH
10730: CALL_OW 313
10734: PUSH
10735: LD_INT 3
10737: LESS
10738: IFFALSE 10774
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10740: LD_INT 0
10742: PPUSH
10743: LD_INT 5
10745: PUSH
10746: LD_INT 8
10748: PUSH
10749: LD_INT 9
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: PUSH
10757: LD_VAR 0 17
10761: ARRAY
10762: PPUSH
10763: LD_VAR 0 4
10767: PPUSH
10768: CALL_OW 380
10772: GO 10791
// PrepareHuman ( false , i , skill ) ;
10774: LD_INT 0
10776: PPUSH
10777: LD_VAR 0 8
10781: PPUSH
10782: LD_VAR 0 4
10786: PPUSH
10787: CALL_OW 380
// end else
10791: GO 10810
// PrepareHuman ( false , i , skill ) ;
10793: LD_INT 0
10795: PPUSH
10796: LD_VAR 0 8
10800: PPUSH
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 380
// un := CreateHuman ;
10810: LD_ADDR_VAR 0 14
10814: PUSH
10815: CALL_OW 44
10819: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10820: LD_ADDR_VAR 0 7
10824: PUSH
10825: LD_VAR 0 7
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: LD_VAR 0 14
10837: PPUSH
10838: CALL_OW 2
10842: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10843: LD_VAR 0 14
10847: PPUSH
10848: LD_VAR 0 12
10852: PUSH
10853: LD_INT 1
10855: ARRAY
10856: PPUSH
10857: CALL_OW 52
// end ;
10861: GO 10496
10863: POP
10864: POP
// end ;
10865: GO 9796
10867: POP
10868: POP
// result := result ^ buildings ;
10869: LD_ADDR_VAR 0 7
10873: PUSH
10874: LD_VAR 0 7
10878: PUSH
10879: LD_VAR 0 18
10883: ADD
10884: ST_TO_ADDR
// end else
10885: GO 11028
// begin for i = 1 to personel do
10887: LD_ADDR_VAR 0 8
10891: PUSH
10892: DOUBLE
10893: LD_INT 1
10895: DEC
10896: ST_TO_ADDR
10897: LD_VAR 0 6
10901: PUSH
10902: FOR_TO
10903: IFFALSE 11026
// begin if i > 4 then
10905: LD_VAR 0 8
10909: PUSH
10910: LD_INT 4
10912: GREATER
10913: IFFALSE 10917
// break ;
10915: GO 11026
// x := personel [ i ] ;
10917: LD_ADDR_VAR 0 13
10921: PUSH
10922: LD_VAR 0 6
10926: PUSH
10927: LD_VAR 0 8
10931: ARRAY
10932: ST_TO_ADDR
// if x = - 1 then
10933: LD_VAR 0 13
10937: PUSH
10938: LD_INT 1
10940: NEG
10941: EQUAL
10942: IFFALSE 10946
// continue ;
10944: GO 10902
// PrepareHuman ( false , i , skill ) ;
10946: LD_INT 0
10948: PPUSH
10949: LD_VAR 0 8
10953: PPUSH
10954: LD_VAR 0 4
10958: PPUSH
10959: CALL_OW 380
// un := CreateHuman ;
10963: LD_ADDR_VAR 0 14
10967: PUSH
10968: CALL_OW 44
10972: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10973: LD_VAR 0 14
10977: PPUSH
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 250
10987: PPUSH
10988: LD_VAR 0 1
10992: PPUSH
10993: CALL_OW 251
10997: PPUSH
10998: LD_INT 10
11000: PPUSH
11001: LD_INT 0
11003: PPUSH
11004: CALL_OW 50
// result := result ^ un ;
11008: LD_ADDR_VAR 0 7
11012: PUSH
11013: LD_VAR 0 7
11017: PUSH
11018: LD_VAR 0 14
11022: ADD
11023: ST_TO_ADDR
// end ;
11024: GO 10902
11026: POP
11027: POP
// end ; end ;
11028: LD_VAR 0 7
11032: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11033: LD_INT 0
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
11039: PPUSH
11040: PPUSH
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
11048: PPUSH
11049: PPUSH
11050: PPUSH
// result := false ;
11051: LD_ADDR_VAR 0 3
11055: PUSH
11056: LD_INT 0
11058: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11059: LD_VAR 0 1
11063: NOT
11064: IFTRUE 11089
11066: PUSH
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 266
11076: PUSH
11077: LD_INT 32
11079: PUSH
11080: LD_INT 33
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: IN
11087: NOT
11088: OR
11089: IFFALSE 11093
// exit ;
11091: GO 12228
// nat := GetNation ( tower ) ;
11093: LD_ADDR_VAR 0 12
11097: PUSH
11098: LD_VAR 0 1
11102: PPUSH
11103: CALL_OW 248
11107: ST_TO_ADDR
// side := GetSide ( tower ) ;
11108: LD_ADDR_VAR 0 16
11112: PUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: CALL_OW 255
11122: ST_TO_ADDR
// x := GetX ( tower ) ;
11123: LD_ADDR_VAR 0 10
11127: PUSH
11128: LD_VAR 0 1
11132: PPUSH
11133: CALL_OW 250
11137: ST_TO_ADDR
// y := GetY ( tower ) ;
11138: LD_ADDR_VAR 0 11
11142: PUSH
11143: LD_VAR 0 1
11147: PPUSH
11148: CALL_OW 251
11152: ST_TO_ADDR
// if not x or not y then
11153: LD_VAR 0 10
11157: NOT
11158: IFTRUE 11167
11160: PUSH
11161: LD_VAR 0 11
11165: NOT
11166: OR
11167: IFFALSE 11171
// exit ;
11169: GO 12228
// weapon := 0 ;
11171: LD_ADDR_VAR 0 18
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// fac_list := [ ] ;
11179: LD_ADDR_VAR 0 17
11183: PUSH
11184: EMPTY
11185: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11186: LD_ADDR_VAR 0 6
11190: PUSH
11191: LD_VAR 0 1
11195: PPUSH
11196: CALL_OW 274
11200: PPUSH
11201: LD_VAR 0 2
11205: PPUSH
11206: LD_INT 0
11208: PPUSH
11209: CALL 8763 0 3
11213: PPUSH
11214: LD_INT 30
11216: PUSH
11217: LD_INT 3
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 72
11228: ST_TO_ADDR
// if not factories then
11229: LD_VAR 0 6
11233: NOT
11234: IFFALSE 11238
// exit ;
11236: GO 12228
// for i in factories do
11238: LD_ADDR_VAR 0 8
11242: PUSH
11243: LD_VAR 0 6
11247: PUSH
11248: FOR_IN
11249: IFFALSE 11274
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11251: LD_ADDR_VAR 0 17
11255: PUSH
11256: LD_VAR 0 17
11260: PUSH
11261: LD_VAR 0 8
11265: PPUSH
11266: CALL_OW 478
11270: UNION
11271: ST_TO_ADDR
11272: GO 11248
11274: POP
11275: POP
// if not fac_list then
11276: LD_VAR 0 17
11280: NOT
11281: IFFALSE 11285
// exit ;
11283: GO 12228
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11285: LD_ADDR_VAR 0 5
11289: PUSH
11290: LD_INT 4
11292: PUSH
11293: LD_INT 5
11295: PUSH
11296: LD_INT 9
11298: PUSH
11299: LD_INT 10
11301: PUSH
11302: LD_INT 6
11304: PUSH
11305: LD_INT 7
11307: PUSH
11308: LD_INT 11
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 27
11322: PUSH
11323: LD_INT 28
11325: PUSH
11326: LD_INT 26
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 43
11340: PUSH
11341: LD_INT 44
11343: PUSH
11344: LD_INT 46
11346: PUSH
11347: LD_INT 45
11349: PUSH
11350: LD_INT 47
11352: PUSH
11353: LD_INT 49
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: LD_VAR 0 12
11373: ARRAY
11374: ST_TO_ADDR
// list := list isect fac_list ;
11375: LD_ADDR_VAR 0 5
11379: PUSH
11380: LD_VAR 0 5
11384: PUSH
11385: LD_VAR 0 17
11389: ISECT
11390: ST_TO_ADDR
// if not list then
11391: LD_VAR 0 5
11395: NOT
11396: IFFALSE 11400
// exit ;
11398: GO 12228
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11400: LD_VAR 0 12
11404: PUSH
11405: LD_INT 3
11407: EQUAL
11408: IFFALSE 11420
11410: PUSH
11411: LD_INT 49
11413: PUSH
11414: LD_VAR 0 5
11418: IN
11419: AND
11420: IFFALSE 11440
11422: PUSH
11423: LD_INT 31
11425: PPUSH
11426: LD_VAR 0 16
11430: PPUSH
11431: CALL_OW 321
11435: PUSH
11436: LD_INT 2
11438: EQUAL
11439: AND
11440: IFFALSE 11500
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11442: LD_INT 22
11444: PUSH
11445: LD_VAR 0 16
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 35
11456: PUSH
11457: LD_INT 49
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 91
11466: PUSH
11467: LD_VAR 0 1
11471: PUSH
11472: LD_INT 10
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: PPUSH
11485: CALL_OW 69
11489: NOT
11490: IFFALSE 11500
// weapon := ru_time_lapser ;
11492: LD_ADDR_VAR 0 18
11496: PUSH
11497: LD_INT 49
11499: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11500: LD_VAR 0 12
11504: PUSH
11505: LD_INT 1
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: IN
11515: IFFALSE 11539
11517: PUSH
11518: LD_INT 11
11520: PUSH
11521: LD_VAR 0 5
11525: IN
11526: IFTRUE 11538
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_VAR 0 5
11536: IN
11537: OR
11538: AND
11539: IFFALSE 11559
11541: PUSH
11542: LD_INT 6
11544: PPUSH
11545: LD_VAR 0 16
11549: PPUSH
11550: CALL_OW 321
11554: PUSH
11555: LD_INT 2
11557: EQUAL
11558: AND
11559: IFFALSE 11726
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11561: LD_INT 22
11563: PUSH
11564: LD_VAR 0 16
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 2
11575: PUSH
11576: LD_INT 35
11578: PUSH
11579: LD_INT 11
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 35
11588: PUSH
11589: LD_INT 30
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 91
11603: PUSH
11604: LD_VAR 0 1
11608: PUSH
11609: LD_INT 18
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 69
11626: NOT
11627: IFFALSE 11703
11629: PUSH
11630: LD_INT 22
11632: PUSH
11633: LD_VAR 0 16
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: LD_INT 30
11647: PUSH
11648: LD_INT 32
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 30
11657: PUSH
11658: LD_INT 33
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 91
11672: PUSH
11673: LD_VAR 0 1
11677: PUSH
11678: LD_INT 12
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: EMPTY
11692: LIST
11693: PPUSH
11694: CALL_OW 69
11698: PUSH
11699: LD_INT 2
11701: GREATER
11702: AND
11703: IFFALSE 11726
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11705: LD_ADDR_VAR 0 18
11709: PUSH
11710: LD_INT 11
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_VAR 0 12
11724: ARRAY
11725: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11726: LD_VAR 0 18
11730: NOT
11731: IFFALSE 11751
11733: PUSH
11734: LD_INT 40
11736: PPUSH
11737: LD_VAR 0 16
11741: PPUSH
11742: CALL_OW 321
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: AND
11751: IFFALSE 11787
11753: PUSH
11754: LD_INT 7
11756: PUSH
11757: LD_VAR 0 5
11761: IN
11762: IFTRUE 11774
11764: PUSH
11765: LD_INT 28
11767: PUSH
11768: LD_VAR 0 5
11772: IN
11773: OR
11774: IFTRUE 11786
11776: PUSH
11777: LD_INT 45
11779: PUSH
11780: LD_VAR 0 5
11784: IN
11785: OR
11786: AND
11787: IFFALSE 12041
// begin hex := GetHexInfo ( x , y ) ;
11789: LD_ADDR_VAR 0 4
11793: PUSH
11794: LD_VAR 0 10
11798: PPUSH
11799: LD_VAR 0 11
11803: PPUSH
11804: CALL_OW 546
11808: ST_TO_ADDR
// if hex [ 1 ] then
11809: LD_VAR 0 4
11813: PUSH
11814: LD_INT 1
11816: ARRAY
11817: IFFALSE 11821
// exit ;
11819: GO 12228
// height := hex [ 2 ] ;
11821: LD_ADDR_VAR 0 15
11825: PUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 2
11833: ARRAY
11834: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11835: LD_ADDR_VAR 0 14
11839: PUSH
11840: LD_INT 0
11842: PUSH
11843: LD_INT 2
11845: PUSH
11846: LD_INT 3
11848: PUSH
11849: LD_INT 5
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: ST_TO_ADDR
// for i in tmp do
11858: LD_ADDR_VAR 0 8
11862: PUSH
11863: LD_VAR 0 14
11867: PUSH
11868: FOR_IN
11869: IFFALSE 12039
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11871: LD_ADDR_VAR 0 9
11875: PUSH
11876: LD_VAR 0 10
11880: PPUSH
11881: LD_VAR 0 8
11885: PPUSH
11886: LD_INT 5
11888: PPUSH
11889: CALL_OW 272
11893: PUSH
11894: LD_VAR 0 11
11898: PPUSH
11899: LD_VAR 0 8
11903: PPUSH
11904: LD_INT 5
11906: PPUSH
11907: CALL_OW 273
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11916: LD_VAR 0 9
11920: PUSH
11921: LD_INT 1
11923: ARRAY
11924: PPUSH
11925: LD_VAR 0 9
11929: PUSH
11930: LD_INT 2
11932: ARRAY
11933: PPUSH
11934: CALL_OW 488
11938: IFFALSE 12037
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11940: LD_ADDR_VAR 0 4
11944: PUSH
11945: LD_VAR 0 9
11949: PUSH
11950: LD_INT 1
11952: ARRAY
11953: PPUSH
11954: LD_VAR 0 9
11958: PUSH
11959: LD_INT 2
11961: ARRAY
11962: PPUSH
11963: CALL_OW 546
11967: ST_TO_ADDR
// if hex [ 1 ] then
11968: LD_VAR 0 4
11972: PUSH
11973: LD_INT 1
11975: ARRAY
11976: IFFALSE 11980
// continue ;
11978: GO 11868
// h := hex [ 2 ] ;
11980: LD_ADDR_VAR 0 13
11984: PUSH
11985: LD_VAR 0 4
11989: PUSH
11990: LD_INT 2
11992: ARRAY
11993: ST_TO_ADDR
// if h + 7 < height then
11994: LD_VAR 0 13
11998: PUSH
11999: LD_INT 7
12001: PLUS
12002: PUSH
12003: LD_VAR 0 15
12007: LESS
12008: IFFALSE 12037
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12010: LD_ADDR_VAR 0 18
12014: PUSH
12015: LD_INT 7
12017: PUSH
12018: LD_INT 28
12020: PUSH
12021: LD_INT 45
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: LD_VAR 0 12
12033: ARRAY
12034: ST_TO_ADDR
// break ;
12035: GO 12039
// end ; end ; end ;
12037: GO 11868
12039: POP
12040: POP
// end ; if not weapon then
12041: LD_VAR 0 18
12045: NOT
12046: IFFALSE 12106
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12048: LD_ADDR_VAR 0 5
12052: PUSH
12053: LD_VAR 0 5
12057: PUSH
12058: LD_INT 11
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 49
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: LIST
12071: DIFF
12072: ST_TO_ADDR
// if not list then
12073: LD_VAR 0 5
12077: NOT
12078: IFFALSE 12082
// exit ;
12080: GO 12228
// weapon := list [ rand ( 1 , list ) ] ;
12082: LD_ADDR_VAR 0 18
12086: PUSH
12087: LD_VAR 0 5
12091: PUSH
12092: LD_INT 1
12094: PPUSH
12095: LD_VAR 0 5
12099: PPUSH
12100: CALL_OW 12
12104: ARRAY
12105: ST_TO_ADDR
// end ; if weapon then
12106: LD_VAR 0 18
12110: IFFALSE 12228
// begin tmp := CostOfWeapon ( weapon ) ;
12112: LD_ADDR_VAR 0 14
12116: PUSH
12117: LD_VAR 0 18
12121: PPUSH
12122: CALL_OW 451
12126: ST_TO_ADDR
// j := GetBase ( tower ) ;
12127: LD_ADDR_VAR 0 9
12131: PUSH
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 274
12141: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12142: LD_VAR 0 9
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 275
12154: PUSH
12155: LD_VAR 0 14
12159: PUSH
12160: LD_INT 1
12162: ARRAY
12163: GREATEREQUAL
12164: IFFALSE 12190
12166: PUSH
12167: LD_VAR 0 9
12171: PPUSH
12172: LD_INT 2
12174: PPUSH
12175: CALL_OW 275
12179: PUSH
12180: LD_VAR 0 14
12184: PUSH
12185: LD_INT 2
12187: ARRAY
12188: GREATEREQUAL
12189: AND
12190: IFFALSE 12216
12192: PUSH
12193: LD_VAR 0 9
12197: PPUSH
12198: LD_INT 3
12200: PPUSH
12201: CALL_OW 275
12205: PUSH
12206: LD_VAR 0 14
12210: PUSH
12211: LD_INT 3
12213: ARRAY
12214: GREATEREQUAL
12215: AND
12216: IFFALSE 12228
// result := weapon ;
12218: LD_ADDR_VAR 0 3
12222: PUSH
12223: LD_VAR 0 18
12227: ST_TO_ADDR
// end ; end ;
12228: LD_VAR 0 3
12232: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
// result := true ;
12237: LD_ADDR_VAR 0 3
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if array1 = array2 then
12245: LD_VAR 0 1
12249: PUSH
12250: LD_VAR 0 2
12254: EQUAL
12255: IFFALSE 12315
// begin for i = 1 to array1 do
12257: LD_ADDR_VAR 0 4
12261: PUSH
12262: DOUBLE
12263: LD_INT 1
12265: DEC
12266: ST_TO_ADDR
12267: LD_VAR 0 1
12271: PUSH
12272: FOR_TO
12273: IFFALSE 12311
// if array1 [ i ] <> array2 [ i ] then
12275: LD_VAR 0 1
12279: PUSH
12280: LD_VAR 0 4
12284: ARRAY
12285: PUSH
12286: LD_VAR 0 2
12290: PUSH
12291: LD_VAR 0 4
12295: ARRAY
12296: NONEQUAL
12297: IFFALSE 12309
// begin result := false ;
12299: LD_ADDR_VAR 0 3
12303: PUSH
12304: LD_INT 0
12306: ST_TO_ADDR
// break ;
12307: GO 12311
// end ;
12309: GO 12272
12311: POP
12312: POP
// end else
12313: GO 12323
// result := false ;
12315: LD_ADDR_VAR 0 3
12319: PUSH
12320: LD_INT 0
12322: ST_TO_ADDR
// end ;
12323: LD_VAR 0 3
12327: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
// if not array1 or not array2 then
12332: LD_VAR 0 1
12336: NOT
12337: IFTRUE 12346
12339: PUSH
12340: LD_VAR 0 2
12344: NOT
12345: OR
12346: IFFALSE 12350
// exit ;
12348: GO 12414
// result := true ;
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// for i = 1 to array1 do
12358: LD_ADDR_VAR 0 4
12362: PUSH
12363: DOUBLE
12364: LD_INT 1
12366: DEC
12367: ST_TO_ADDR
12368: LD_VAR 0 1
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12412
// if array1 [ i ] <> array2 [ i ] then
12376: LD_VAR 0 1
12380: PUSH
12381: LD_VAR 0 4
12385: ARRAY
12386: PUSH
12387: LD_VAR 0 2
12391: PUSH
12392: LD_VAR 0 4
12396: ARRAY
12397: NONEQUAL
12398: IFFALSE 12410
// begin result := false ;
12400: LD_ADDR_VAR 0 3
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// break ;
12408: GO 12412
// end ;
12410: GO 12373
12412: POP
12413: POP
// end ;
12414: LD_VAR 0 3
12418: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12419: LD_INT 0
12421: PPUSH
12422: PPUSH
12423: PPUSH
// pom := GetBase ( fac ) ;
12424: LD_ADDR_VAR 0 5
12428: PUSH
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 274
12438: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12439: LD_ADDR_VAR 0 4
12443: PUSH
12444: LD_VAR 0 2
12448: PUSH
12449: LD_INT 1
12451: ARRAY
12452: PPUSH
12453: LD_VAR 0 2
12457: PUSH
12458: LD_INT 2
12460: ARRAY
12461: PPUSH
12462: LD_VAR 0 2
12466: PUSH
12467: LD_INT 3
12469: ARRAY
12470: PPUSH
12471: LD_VAR 0 2
12475: PUSH
12476: LD_INT 4
12478: ARRAY
12479: PPUSH
12480: CALL_OW 449
12484: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12485: LD_ADDR_VAR 0 3
12489: PUSH
12490: LD_VAR 0 5
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 275
12502: PUSH
12503: LD_VAR 0 4
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: GREATEREQUAL
12512: IFFALSE 12538
12514: PUSH
12515: LD_VAR 0 5
12519: PPUSH
12520: LD_INT 2
12522: PPUSH
12523: CALL_OW 275
12527: PUSH
12528: LD_VAR 0 4
12532: PUSH
12533: LD_INT 2
12535: ARRAY
12536: GREATEREQUAL
12537: AND
12538: IFFALSE 12564
12540: PUSH
12541: LD_VAR 0 5
12545: PPUSH
12546: LD_INT 3
12548: PPUSH
12549: CALL_OW 275
12553: PUSH
12554: LD_VAR 0 4
12558: PUSH
12559: LD_INT 3
12561: ARRAY
12562: GREATEREQUAL
12563: AND
12564: ST_TO_ADDR
// end ;
12565: LD_VAR 0 3
12569: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12570: LD_INT 0
12572: PPUSH
12573: PPUSH
12574: PPUSH
12575: PPUSH
// pom := GetBase ( building ) ;
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: CALL_OW 274
12590: ST_TO_ADDR
// if not pom then
12591: LD_VAR 0 3
12595: NOT
12596: IFFALSE 12600
// exit ;
12598: GO 12774
// btype := GetBType ( building ) ;
12600: LD_ADDR_VAR 0 5
12604: PUSH
12605: LD_VAR 0 1
12609: PPUSH
12610: CALL_OW 266
12614: ST_TO_ADDR
// if btype = b_armoury then
12615: LD_VAR 0 5
12619: PUSH
12620: LD_INT 4
12622: EQUAL
12623: IFFALSE 12633
// btype := b_barracks ;
12625: LD_ADDR_VAR 0 5
12629: PUSH
12630: LD_INT 5
12632: ST_TO_ADDR
// if btype = b_depot then
12633: LD_VAR 0 5
12637: PUSH
12638: LD_INT 0
12640: EQUAL
12641: IFFALSE 12651
// btype := b_warehouse ;
12643: LD_ADDR_VAR 0 5
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
// if btype = b_workshop then
12651: LD_VAR 0 5
12655: PUSH
12656: LD_INT 2
12658: EQUAL
12659: IFFALSE 12669
// btype := b_factory ;
12661: LD_ADDR_VAR 0 5
12665: PUSH
12666: LD_INT 3
12668: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12669: LD_ADDR_VAR 0 4
12673: PUSH
12674: LD_VAR 0 5
12678: PPUSH
12679: LD_VAR 0 1
12683: PPUSH
12684: CALL_OW 248
12688: PPUSH
12689: CALL_OW 450
12693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 275
12711: PUSH
12712: LD_VAR 0 4
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: GREATEREQUAL
12721: IFFALSE 12747
12723: PUSH
12724: LD_VAR 0 3
12728: PPUSH
12729: LD_INT 2
12731: PPUSH
12732: CALL_OW 275
12736: PUSH
12737: LD_VAR 0 4
12741: PUSH
12742: LD_INT 2
12744: ARRAY
12745: GREATEREQUAL
12746: AND
12747: IFFALSE 12773
12749: PUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: LD_INT 3
12757: PPUSH
12758: CALL_OW 275
12762: PUSH
12763: LD_VAR 0 4
12767: PUSH
12768: LD_INT 3
12770: ARRAY
12771: GREATEREQUAL
12772: AND
12773: ST_TO_ADDR
// end ;
12774: LD_VAR 0 2
12778: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12779: LD_INT 0
12781: PPUSH
12782: PPUSH
12783: PPUSH
// pom := GetBase ( building ) ;
12784: LD_ADDR_VAR 0 4
12788: PUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 274
12798: ST_TO_ADDR
// if not pom then
12799: LD_VAR 0 4
12803: NOT
12804: IFFALSE 12808
// exit ;
12806: GO 12913
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12808: LD_ADDR_VAR 0 5
12812: PUSH
12813: LD_VAR 0 2
12817: PPUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 248
12827: PPUSH
12828: CALL_OW 450
12832: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12833: LD_ADDR_VAR 0 3
12837: PUSH
12838: LD_VAR 0 4
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 275
12850: PUSH
12851: LD_VAR 0 5
12855: PUSH
12856: LD_INT 1
12858: ARRAY
12859: GREATEREQUAL
12860: IFFALSE 12886
12862: PUSH
12863: LD_VAR 0 4
12867: PPUSH
12868: LD_INT 2
12870: PPUSH
12871: CALL_OW 275
12875: PUSH
12876: LD_VAR 0 5
12880: PUSH
12881: LD_INT 2
12883: ARRAY
12884: GREATEREQUAL
12885: AND
12886: IFFALSE 12912
12888: PUSH
12889: LD_VAR 0 4
12893: PPUSH
12894: LD_INT 3
12896: PPUSH
12897: CALL_OW 275
12901: PUSH
12902: LD_VAR 0 5
12906: PUSH
12907: LD_INT 3
12909: ARRAY
12910: GREATEREQUAL
12911: AND
12912: ST_TO_ADDR
// end ;
12913: LD_VAR 0 3
12917: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12918: LD_INT 0
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
12929: PPUSH
12930: PPUSH
// result := false ;
12931: LD_ADDR_VAR 0 8
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12939: LD_VAR 0 5
12943: NOT
12944: IFTRUE 12953
12946: PUSH
12947: LD_VAR 0 1
12951: NOT
12952: OR
12953: IFTRUE 12962
12955: PUSH
12956: LD_VAR 0 2
12960: NOT
12961: OR
12962: IFTRUE 12971
12964: PUSH
12965: LD_VAR 0 3
12969: NOT
12970: OR
12971: IFFALSE 12975
// exit ;
12973: GO 13801
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12975: LD_ADDR_VAR 0 14
12979: PUSH
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_VAR 0 2
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_VAR 0 4
12999: PPUSH
13000: LD_VAR 0 5
13004: PUSH
13005: LD_INT 1
13007: ARRAY
13008: PPUSH
13009: CALL_OW 248
13013: PPUSH
13014: LD_INT 0
13016: PPUSH
13017: CALL 15082 0 6
13021: ST_TO_ADDR
// if not hexes then
13022: LD_VAR 0 14
13026: NOT
13027: IFFALSE 13031
// exit ;
13029: GO 13801
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13031: LD_ADDR_VAR 0 17
13035: PUSH
13036: LD_VAR 0 5
13040: PPUSH
13041: LD_INT 22
13043: PUSH
13044: LD_VAR 0 13
13048: PPUSH
13049: CALL_OW 255
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 30
13063: PUSH
13064: LD_INT 0
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 30
13073: PUSH
13074: LD_INT 1
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PPUSH
13090: CALL_OW 72
13094: ST_TO_ADDR
// for i = 1 to hexes do
13095: LD_ADDR_VAR 0 9
13099: PUSH
13100: DOUBLE
13101: LD_INT 1
13103: DEC
13104: ST_TO_ADDR
13105: LD_VAR 0 14
13109: PUSH
13110: FOR_TO
13111: IFFALSE 13799
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13113: LD_ADDR_VAR 0 13
13117: PUSH
13118: LD_VAR 0 14
13122: PUSH
13123: LD_VAR 0 9
13127: ARRAY
13128: PUSH
13129: LD_INT 1
13131: ARRAY
13132: PPUSH
13133: LD_VAR 0 14
13137: PUSH
13138: LD_VAR 0 9
13142: ARRAY
13143: PUSH
13144: LD_INT 2
13146: ARRAY
13147: PPUSH
13148: CALL_OW 428
13152: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13153: LD_VAR 0 14
13157: PUSH
13158: LD_VAR 0 9
13162: ARRAY
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 14
13172: PUSH
13173: LD_VAR 0 9
13177: ARRAY
13178: PUSH
13179: LD_INT 2
13181: ARRAY
13182: PPUSH
13183: CALL_OW 351
13187: IFTRUE 13226
13189: PUSH
13190: LD_VAR 0 14
13194: PUSH
13195: LD_VAR 0 9
13199: ARRAY
13200: PUSH
13201: LD_INT 1
13203: ARRAY
13204: PPUSH
13205: LD_VAR 0 14
13209: PUSH
13210: LD_VAR 0 9
13214: ARRAY
13215: PUSH
13216: LD_INT 2
13218: ARRAY
13219: PPUSH
13220: CALL_OW 488
13224: NOT
13225: OR
13226: IFTRUE 13243
13228: PUSH
13229: LD_VAR 0 13
13233: PPUSH
13234: CALL_OW 247
13238: PUSH
13239: LD_INT 3
13241: EQUAL
13242: OR
13243: IFFALSE 13249
// exit ;
13245: POP
13246: POP
13247: GO 13801
// if not tmp then
13249: LD_VAR 0 13
13253: NOT
13254: IFFALSE 13258
// continue ;
13256: GO 13110
// result := true ;
13258: LD_ADDR_VAR 0 8
13262: PUSH
13263: LD_INT 1
13265: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13266: LD_VAR 0 6
13270: IFFALSE 13287
13272: PUSH
13273: LD_VAR 0 13
13277: PPUSH
13278: CALL_OW 247
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13304
13289: PUSH
13290: LD_VAR 0 13
13294: PPUSH
13295: CALL_OW 263
13299: PUSH
13300: LD_INT 1
13302: EQUAL
13303: AND
13304: IFFALSE 13468
// begin if IsDrivenBy ( tmp ) then
13306: LD_VAR 0 13
13310: PPUSH
13311: CALL_OW 311
13315: IFFALSE 13319
// continue ;
13317: GO 13110
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13319: LD_VAR 0 6
13323: PPUSH
13324: LD_INT 3
13326: PUSH
13327: LD_INT 60
13329: PUSH
13330: EMPTY
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 3
13339: PUSH
13340: LD_INT 55
13342: PUSH
13343: EMPTY
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PPUSH
13354: CALL_OW 72
13358: IFFALSE 13466
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13360: LD_ADDR_VAR 0 18
13364: PUSH
13365: LD_VAR 0 6
13369: PPUSH
13370: LD_INT 3
13372: PUSH
13373: LD_INT 60
13375: PUSH
13376: EMPTY
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 3
13385: PUSH
13386: LD_INT 55
13388: PUSH
13389: EMPTY
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 72
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: ST_TO_ADDR
// if IsInUnit ( driver ) then
13409: LD_VAR 0 18
13413: PPUSH
13414: CALL_OW 310
13418: IFFALSE 13429
// ComExit ( driver ) ;
13420: LD_VAR 0 18
13424: PPUSH
13425: CALL 39072 0 1
// AddComEnterUnit ( driver , tmp ) ;
13429: LD_VAR 0 18
13433: PPUSH
13434: LD_VAR 0 13
13438: PPUSH
13439: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13443: LD_VAR 0 18
13447: PPUSH
13448: LD_VAR 0 7
13452: PPUSH
13453: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13457: LD_VAR 0 18
13461: PPUSH
13462: CALL_OW 181
// end ; continue ;
13466: GO 13110
// end ; if not cleaners or not tmp in cleaners then
13468: LD_VAR 0 6
13472: NOT
13473: IFTRUE 13488
13475: PUSH
13476: LD_VAR 0 13
13480: PUSH
13481: LD_VAR 0 6
13485: IN
13486: NOT
13487: OR
13488: IFFALSE 13797
// begin if dep then
13490: LD_VAR 0 17
13494: IFFALSE 13630
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13496: LD_ADDR_VAR 0 16
13500: PUSH
13501: LD_VAR 0 17
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: CALL_OW 250
13514: PPUSH
13515: LD_VAR 0 17
13519: PUSH
13520: LD_INT 1
13522: ARRAY
13523: PPUSH
13524: CALL_OW 254
13528: PPUSH
13529: LD_INT 5
13531: PPUSH
13532: CALL_OW 272
13536: PUSH
13537: LD_VAR 0 17
13541: PUSH
13542: LD_INT 1
13544: ARRAY
13545: PPUSH
13546: CALL_OW 251
13550: PPUSH
13551: LD_VAR 0 17
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: CALL_OW 254
13564: PPUSH
13565: LD_INT 5
13567: PPUSH
13568: CALL_OW 273
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13577: LD_VAR 0 16
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: LD_VAR 0 16
13590: PUSH
13591: LD_INT 2
13593: ARRAY
13594: PPUSH
13595: CALL_OW 488
13599: IFFALSE 13630
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13601: LD_VAR 0 13
13605: PPUSH
13606: LD_VAR 0 16
13610: PUSH
13611: LD_INT 1
13613: ARRAY
13614: PPUSH
13615: LD_VAR 0 16
13619: PUSH
13620: LD_INT 2
13622: ARRAY
13623: PPUSH
13624: CALL_OW 111
// continue ;
13628: GO 13110
// end ; end ; r := GetDir ( tmp ) ;
13630: LD_ADDR_VAR 0 15
13634: PUSH
13635: LD_VAR 0 13
13639: PPUSH
13640: CALL_OW 254
13644: ST_TO_ADDR
// if r = 5 then
13645: LD_VAR 0 15
13649: PUSH
13650: LD_INT 5
13652: EQUAL
13653: IFFALSE 13663
// r := 0 ;
13655: LD_ADDR_VAR 0 15
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// for j = r to 5 do
13663: LD_ADDR_VAR 0 10
13667: PUSH
13668: DOUBLE
13669: LD_VAR 0 15
13673: DEC
13674: ST_TO_ADDR
13675: LD_INT 5
13677: PUSH
13678: FOR_TO
13679: IFFALSE 13795
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13681: LD_ADDR_VAR 0 11
13685: PUSH
13686: LD_VAR 0 13
13690: PPUSH
13691: CALL_OW 250
13695: PPUSH
13696: LD_VAR 0 10
13700: PPUSH
13701: LD_INT 2
13703: PPUSH
13704: CALL_OW 272
13708: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13709: LD_ADDR_VAR 0 12
13713: PUSH
13714: LD_VAR 0 13
13718: PPUSH
13719: CALL_OW 251
13723: PPUSH
13724: LD_VAR 0 10
13728: PPUSH
13729: LD_INT 2
13731: PPUSH
13732: CALL_OW 273
13736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13737: LD_VAR 0 11
13741: PPUSH
13742: LD_VAR 0 12
13746: PPUSH
13747: CALL_OW 488
13751: IFFALSE 13770
13753: PUSH
13754: LD_VAR 0 11
13758: PPUSH
13759: LD_VAR 0 12
13763: PPUSH
13764: CALL_OW 428
13768: NOT
13769: AND
13770: IFFALSE 13793
// begin ComMoveXY ( tmp , _x , _y ) ;
13772: LD_VAR 0 13
13776: PPUSH
13777: LD_VAR 0 11
13781: PPUSH
13782: LD_VAR 0 12
13786: PPUSH
13787: CALL_OW 111
// break ;
13791: GO 13795
// end ; end ;
13793: GO 13678
13795: POP
13796: POP
// end ; end ;
13797: GO 13110
13799: POP
13800: POP
// end ;
13801: LD_VAR 0 8
13805: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13806: LD_INT 0
13808: PPUSH
// result := true ;
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13817: LD_VAR 0 2
13821: PUSH
13822: LD_INT 24
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13836
13828: LD_INT 33
13830: DOUBLE
13831: EQUAL
13832: IFTRUE 13836
13834: GO 13861
13836: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_INT 32
13844: PPUSH
13845: LD_VAR 0 1
13849: PPUSH
13850: CALL_OW 321
13854: PUSH
13855: LD_INT 2
13857: EQUAL
13858: ST_TO_ADDR
13859: GO 14177
13861: LD_INT 20
13863: DOUBLE
13864: EQUAL
13865: IFTRUE 13869
13867: GO 13894
13869: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13870: LD_ADDR_VAR 0 3
13874: PUSH
13875: LD_INT 6
13877: PPUSH
13878: LD_VAR 0 1
13882: PPUSH
13883: CALL_OW 321
13887: PUSH
13888: LD_INT 2
13890: EQUAL
13891: ST_TO_ADDR
13892: GO 14177
13894: LD_INT 22
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13908
13900: LD_INT 36
13902: DOUBLE
13903: EQUAL
13904: IFTRUE 13908
13906: GO 13933
13908: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13909: LD_ADDR_VAR 0 3
13913: PUSH
13914: LD_INT 15
13916: PPUSH
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL_OW 321
13926: PUSH
13927: LD_INT 2
13929: EQUAL
13930: ST_TO_ADDR
13931: GO 14177
13933: LD_INT 30
13935: DOUBLE
13936: EQUAL
13937: IFTRUE 13941
13939: GO 13966
13941: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: LD_INT 20
13949: PPUSH
13950: LD_VAR 0 1
13954: PPUSH
13955: CALL_OW 321
13959: PUSH
13960: LD_INT 2
13962: EQUAL
13963: ST_TO_ADDR
13964: GO 14177
13966: LD_INT 28
13968: DOUBLE
13969: EQUAL
13970: IFTRUE 13980
13972: LD_INT 21
13974: DOUBLE
13975: EQUAL
13976: IFTRUE 13980
13978: GO 14005
13980: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13981: LD_ADDR_VAR 0 3
13985: PUSH
13986: LD_INT 21
13988: PPUSH
13989: LD_VAR 0 1
13993: PPUSH
13994: CALL_OW 321
13998: PUSH
13999: LD_INT 2
14001: EQUAL
14002: ST_TO_ADDR
14003: GO 14177
14005: LD_INT 16
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14038
14013: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 84
14021: PPUSH
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 321
14031: PUSH
14032: LD_INT 2
14034: EQUAL
14035: ST_TO_ADDR
14036: GO 14177
14038: LD_INT 19
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14052
14044: LD_INT 23
14046: DOUBLE
14047: EQUAL
14048: IFTRUE 14052
14050: GO 14077
14052: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14053: LD_ADDR_VAR 0 3
14057: PUSH
14058: LD_INT 83
14060: PPUSH
14061: LD_VAR 0 1
14065: PPUSH
14066: CALL_OW 321
14070: PUSH
14071: LD_INT 2
14073: EQUAL
14074: ST_TO_ADDR
14075: GO 14177
14077: LD_INT 17
14079: DOUBLE
14080: EQUAL
14081: IFTRUE 14085
14083: GO 14110
14085: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14086: LD_ADDR_VAR 0 3
14090: PUSH
14091: LD_INT 39
14093: PPUSH
14094: LD_VAR 0 1
14098: PPUSH
14099: CALL_OW 321
14103: PUSH
14104: LD_INT 2
14106: EQUAL
14107: ST_TO_ADDR
14108: GO 14177
14110: LD_INT 18
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14143
14118: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_INT 40
14126: PPUSH
14127: LD_VAR 0 1
14131: PPUSH
14132: CALL_OW 321
14136: PUSH
14137: LD_INT 2
14139: EQUAL
14140: ST_TO_ADDR
14141: GO 14177
14143: LD_INT 27
14145: DOUBLE
14146: EQUAL
14147: IFTRUE 14151
14149: GO 14176
14151: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14152: LD_ADDR_VAR 0 3
14156: PUSH
14157: LD_INT 35
14159: PPUSH
14160: LD_VAR 0 1
14164: PPUSH
14165: CALL_OW 321
14169: PUSH
14170: LD_INT 2
14172: EQUAL
14173: ST_TO_ADDR
14174: GO 14177
14176: POP
// end ;
14177: LD_VAR 0 3
14181: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
14189: PPUSH
14190: PPUSH
14191: PPUSH
14192: PPUSH
14193: PPUSH
14194: PPUSH
// result := false ;
14195: LD_ADDR_VAR 0 6
14199: PUSH
14200: LD_INT 0
14202: ST_TO_ADDR
// if btype = b_depot then
14203: LD_VAR 0 2
14207: PUSH
14208: LD_INT 0
14210: EQUAL
14211: IFFALSE 14223
// begin result := true ;
14213: LD_ADDR_VAR 0 6
14217: PUSH
14218: LD_INT 1
14220: ST_TO_ADDR
// exit ;
14221: GO 15077
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14223: LD_VAR 0 1
14227: NOT
14228: IFTRUE 14253
14230: PUSH
14231: LD_VAR 0 1
14235: PPUSH
14236: CALL_OW 266
14240: PUSH
14241: LD_INT 0
14243: PUSH
14244: LD_INT 1
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: IN
14251: NOT
14252: OR
14253: IFTRUE 14262
14255: PUSH
14256: LD_VAR 0 2
14260: NOT
14261: OR
14262: IFTRUE 14298
14264: PUSH
14265: LD_VAR 0 5
14269: PUSH
14270: LD_INT 0
14272: PUSH
14273: LD_INT 1
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: LD_INT 4
14284: PUSH
14285: LD_INT 5
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: IN
14296: NOT
14297: OR
14298: IFTRUE 14317
14300: PUSH
14301: LD_VAR 0 3
14305: PPUSH
14306: LD_VAR 0 4
14310: PPUSH
14311: CALL_OW 488
14315: NOT
14316: OR
14317: IFFALSE 14321
// exit ;
14319: GO 15077
// side := GetSide ( depot ) ;
14321: LD_ADDR_VAR 0 9
14325: PUSH
14326: LD_VAR 0 1
14330: PPUSH
14331: CALL_OW 255
14335: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14336: LD_VAR 0 9
14340: PPUSH
14341: LD_VAR 0 2
14345: PPUSH
14346: CALL 13806 0 2
14350: NOT
14351: IFFALSE 14355
// exit ;
14353: GO 15077
// pom := GetBase ( depot ) ;
14355: LD_ADDR_VAR 0 10
14359: PUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 274
14369: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14370: LD_ADDR_VAR 0 11
14374: PUSH
14375: LD_VAR 0 2
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 248
14389: PPUSH
14390: CALL_OW 450
14394: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14395: LD_VAR 0 10
14399: PPUSH
14400: LD_INT 1
14402: PPUSH
14403: CALL_OW 275
14407: PUSH
14408: LD_VAR 0 11
14412: PUSH
14413: LD_INT 1
14415: ARRAY
14416: GREATEREQUAL
14417: IFFALSE 14443
14419: PUSH
14420: LD_VAR 0 10
14424: PPUSH
14425: LD_INT 2
14427: PPUSH
14428: CALL_OW 275
14432: PUSH
14433: LD_VAR 0 11
14437: PUSH
14438: LD_INT 2
14440: ARRAY
14441: GREATEREQUAL
14442: AND
14443: IFFALSE 14469
14445: PUSH
14446: LD_VAR 0 10
14450: PPUSH
14451: LD_INT 3
14453: PPUSH
14454: CALL_OW 275
14458: PUSH
14459: LD_VAR 0 11
14463: PUSH
14464: LD_INT 3
14466: ARRAY
14467: GREATEREQUAL
14468: AND
14469: NOT
14470: IFFALSE 14474
// exit ;
14472: GO 15077
// if GetBType ( depot ) = b_depot then
14474: LD_VAR 0 1
14478: PPUSH
14479: CALL_OW 266
14483: PUSH
14484: LD_INT 0
14486: EQUAL
14487: IFFALSE 14499
// dist := 28 else
14489: LD_ADDR_VAR 0 14
14493: PUSH
14494: LD_INT 28
14496: ST_TO_ADDR
14497: GO 14507
// dist := 36 ;
14499: LD_ADDR_VAR 0 14
14503: PUSH
14504: LD_INT 36
14506: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14507: LD_VAR 0 1
14511: PPUSH
14512: LD_VAR 0 3
14516: PPUSH
14517: LD_VAR 0 4
14521: PPUSH
14522: CALL_OW 297
14526: PUSH
14527: LD_VAR 0 14
14531: GREATER
14532: IFFALSE 14536
// exit ;
14534: GO 15077
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14536: LD_ADDR_VAR 0 12
14540: PUSH
14541: LD_VAR 0 2
14545: PPUSH
14546: LD_VAR 0 3
14550: PPUSH
14551: LD_VAR 0 4
14555: PPUSH
14556: LD_VAR 0 5
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 248
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL 15082 0 6
14578: ST_TO_ADDR
// if not hexes then
14579: LD_VAR 0 12
14583: NOT
14584: IFFALSE 14588
// exit ;
14586: GO 15077
// hex := GetHexInfo ( x , y ) ;
14588: LD_ADDR_VAR 0 15
14592: PUSH
14593: LD_VAR 0 3
14597: PPUSH
14598: LD_VAR 0 4
14602: PPUSH
14603: CALL_OW 546
14607: ST_TO_ADDR
// if hex [ 1 ] then
14608: LD_VAR 0 15
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: IFFALSE 14620
// exit ;
14618: GO 15077
// height := hex [ 2 ] ;
14620: LD_ADDR_VAR 0 13
14624: PUSH
14625: LD_VAR 0 15
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: ST_TO_ADDR
// for i = 1 to hexes do
14634: LD_ADDR_VAR 0 7
14638: PUSH
14639: DOUBLE
14640: LD_INT 1
14642: DEC
14643: ST_TO_ADDR
14644: LD_VAR 0 12
14648: PUSH
14649: FOR_TO
14650: IFFALSE 14994
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14652: LD_VAR 0 12
14656: PUSH
14657: LD_VAR 0 7
14661: ARRAY
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: PPUSH
14667: LD_VAR 0 12
14671: PUSH
14672: LD_VAR 0 7
14676: ARRAY
14677: PUSH
14678: LD_INT 2
14680: ARRAY
14681: PPUSH
14682: CALL_OW 488
14686: NOT
14687: IFTRUE 14729
14689: PUSH
14690: LD_VAR 0 12
14694: PUSH
14695: LD_VAR 0 7
14699: ARRAY
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PPUSH
14705: LD_VAR 0 12
14709: PUSH
14710: LD_VAR 0 7
14714: ARRAY
14715: PUSH
14716: LD_INT 2
14718: ARRAY
14719: PPUSH
14720: CALL_OW 428
14724: PUSH
14725: LD_INT 0
14727: GREATER
14728: OR
14729: IFTRUE 14767
14731: PUSH
14732: LD_VAR 0 12
14736: PUSH
14737: LD_VAR 0 7
14741: ARRAY
14742: PUSH
14743: LD_INT 1
14745: ARRAY
14746: PPUSH
14747: LD_VAR 0 12
14751: PUSH
14752: LD_VAR 0 7
14756: ARRAY
14757: PUSH
14758: LD_INT 2
14760: ARRAY
14761: PPUSH
14762: CALL_OW 351
14766: OR
14767: IFFALSE 14773
// exit ;
14769: POP
14770: POP
14771: GO 15077
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14773: LD_ADDR_VAR 0 8
14777: PUSH
14778: LD_VAR 0 12
14782: PUSH
14783: LD_VAR 0 7
14787: ARRAY
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: LD_VAR 0 12
14797: PUSH
14798: LD_VAR 0 7
14802: ARRAY
14803: PUSH
14804: LD_INT 2
14806: ARRAY
14807: PPUSH
14808: CALL_OW 546
14812: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14813: LD_VAR 0 8
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: IFTRUE 14843
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_INT 2
14831: ARRAY
14832: PUSH
14833: LD_VAR 0 13
14837: PUSH
14838: LD_INT 2
14840: PLUS
14841: GREATER
14842: OR
14843: IFTRUE 14865
14845: PUSH
14846: LD_VAR 0 8
14850: PUSH
14851: LD_INT 2
14853: ARRAY
14854: PUSH
14855: LD_VAR 0 13
14859: PUSH
14860: LD_INT 2
14862: MINUS
14863: LESS
14864: OR
14865: IFTRUE 14933
14867: PUSH
14868: LD_VAR 0 8
14872: PUSH
14873: LD_INT 3
14875: ARRAY
14876: PUSH
14877: LD_INT 0
14879: PUSH
14880: LD_INT 8
14882: PUSH
14883: LD_INT 9
14885: PUSH
14886: LD_INT 10
14888: PUSH
14889: LD_INT 11
14891: PUSH
14892: LD_INT 12
14894: PUSH
14895: LD_INT 13
14897: PUSH
14898: LD_INT 16
14900: PUSH
14901: LD_INT 17
14903: PUSH
14904: LD_INT 18
14906: PUSH
14907: LD_INT 19
14909: PUSH
14910: LD_INT 20
14912: PUSH
14913: LD_INT 21
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: IN
14931: NOT
14932: OR
14933: IFTRUE 14946
14935: PUSH
14936: LD_VAR 0 8
14940: PUSH
14941: LD_INT 5
14943: ARRAY
14944: NOT
14945: OR
14946: IFTRUE 14986
14948: PUSH
14949: LD_VAR 0 8
14953: PUSH
14954: LD_INT 6
14956: ARRAY
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 7
14966: PUSH
14967: LD_INT 9
14969: PUSH
14970: LD_INT 10
14972: PUSH
14973: LD_INT 11
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: IN
14984: NOT
14985: OR
14986: IFFALSE 14992
// exit ;
14988: POP
14989: POP
14990: GO 15077
// end ;
14992: GO 14649
14994: POP
14995: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14996: LD_VAR 0 9
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_INT 20
15013: PPUSH
15014: CALL 6896 0 4
15018: PUSH
15019: LD_INT 4
15021: ARRAY
15022: IFFALSE 15026
// exit ;
15024: GO 15077
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15026: LD_VAR 0 2
15030: PUSH
15031: LD_INT 29
15033: PUSH
15034: LD_INT 30
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: IN
15041: IFFALSE 15065
15043: PUSH
15044: LD_VAR 0 3
15048: PPUSH
15049: LD_VAR 0 4
15053: PPUSH
15054: LD_VAR 0 9
15058: PPUSH
15059: CALL_OW 440
15063: NOT
15064: AND
15065: IFFALSE 15069
// exit ;
15067: GO 15077
// result := true ;
15069: LD_ADDR_VAR 0 6
15073: PUSH
15074: LD_INT 1
15076: ST_TO_ADDR
// end ;
15077: LD_VAR 0 6
15081: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15082: LD_INT 0
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
15132: PPUSH
15133: PPUSH
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
// result = [ ] ;
15142: LD_ADDR_VAR 0 7
15146: PUSH
15147: EMPTY
15148: ST_TO_ADDR
// temp_list = [ ] ;
15149: LD_ADDR_VAR 0 9
15153: PUSH
15154: EMPTY
15155: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15156: LD_VAR 0 4
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 4
15175: PUSH
15176: LD_INT 5
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: IN
15187: NOT
15188: IFTRUE 15231
15190: PUSH
15191: LD_VAR 0 1
15195: PUSH
15196: LD_INT 0
15198: PUSH
15199: LD_INT 1
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: IN
15206: IFFALSE 15230
15208: PUSH
15209: LD_VAR 0 5
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: LD_INT 2
15219: PUSH
15220: LD_INT 3
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: IN
15228: NOT
15229: AND
15230: OR
15231: IFFALSE 15235
// exit ;
15233: GO 33634
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15235: LD_VAR 0 1
15239: PUSH
15240: LD_INT 6
15242: PUSH
15243: LD_INT 7
15245: PUSH
15246: LD_INT 8
15248: PUSH
15249: LD_INT 13
15251: PUSH
15252: LD_INT 12
15254: PUSH
15255: LD_INT 15
15257: PUSH
15258: LD_INT 11
15260: PUSH
15261: LD_INT 14
15263: PUSH
15264: LD_INT 10
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: IN
15278: IFFALSE 15288
// btype = b_lab ;
15280: LD_ADDR_VAR 0 1
15284: PUSH
15285: LD_INT 6
15287: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15288: LD_VAR 0 6
15292: PUSH
15293: LD_INT 0
15295: PUSH
15296: LD_INT 1
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: IN
15307: NOT
15308: IFTRUE 15376
15310: PUSH
15311: LD_VAR 0 1
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 3
15327: PUSH
15328: LD_INT 6
15330: PUSH
15331: LD_INT 36
15333: PUSH
15334: LD_INT 4
15336: PUSH
15337: LD_INT 5
15339: PUSH
15340: LD_INT 31
15342: PUSH
15343: LD_INT 32
15345: PUSH
15346: LD_INT 33
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: IN
15362: NOT
15363: IFFALSE 15375
15365: PUSH
15366: LD_VAR 0 6
15370: PUSH
15371: LD_INT 1
15373: EQUAL
15374: AND
15375: OR
15376: IFTRUE 15408
15378: PUSH
15379: LD_VAR 0 1
15383: PUSH
15384: LD_INT 2
15386: PUSH
15387: LD_INT 3
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: IN
15394: NOT
15395: IFFALSE 15407
15397: PUSH
15398: LD_VAR 0 6
15402: PUSH
15403: LD_INT 2
15405: EQUAL
15406: AND
15407: OR
15408: IFFALSE 15418
// mode = 0 ;
15410: LD_ADDR_VAR 0 6
15414: PUSH
15415: LD_INT 0
15417: ST_TO_ADDR
// case mode of 0 :
15418: LD_VAR 0 6
15422: PUSH
15423: LD_INT 0
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15431
15429: GO 26884
15431: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15432: LD_ADDR_VAR 0 11
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: LD_INT 0
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 0
15449: PUSH
15450: LD_INT 1
15452: NEG
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: LD_INT 0
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: LD_INT 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 0
15480: PUSH
15481: LD_INT 1
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 1
15490: NEG
15491: PUSH
15492: LD_INT 0
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 1
15501: NEG
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 1
15513: NEG
15514: PUSH
15515: LD_INT 2
15517: NEG
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 0
15525: PUSH
15526: LD_INT 2
15528: NEG
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: LD_INT 1
15539: NEG
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 0
15557: PUSH
15558: LD_INT 2
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 1
15567: NEG
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 3
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 0
15588: PUSH
15589: LD_INT 3
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 1
15598: NEG
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15625: LD_ADDR_VAR 0 12
15629: PUSH
15630: LD_INT 0
15632: PUSH
15633: LD_INT 0
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 0
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: LD_INT 0
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 1
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 1
15683: NEG
15684: PUSH
15685: LD_INT 0
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 1
15694: NEG
15695: PUSH
15696: LD_INT 1
15698: NEG
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: LD_INT 1
15709: NEG
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 2
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 1
15737: NEG
15738: PUSH
15739: LD_INT 1
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 2
15748: NEG
15749: PUSH
15750: LD_INT 0
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 2
15759: NEG
15760: PUSH
15761: LD_INT 1
15763: NEG
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 2
15771: NEG
15772: PUSH
15773: LD_INT 1
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 3
15782: NEG
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 3
15793: NEG
15794: PUSH
15795: LD_INT 1
15797: NEG
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15821: LD_ADDR_VAR 0 13
15825: PUSH
15826: LD_INT 0
15828: PUSH
15829: LD_INT 0
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 0
15838: PUSH
15839: LD_INT 1
15841: NEG
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 1
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 0
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 1
15879: NEG
15880: PUSH
15881: LD_INT 0
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 1
15890: NEG
15891: PUSH
15892: LD_INT 1
15894: NEG
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 1
15902: NEG
15903: PUSH
15904: LD_INT 2
15906: NEG
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 2
15924: PUSH
15925: LD_INT 2
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: LD_INT 1
15934: PUSH
15935: LD_INT 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 2
15944: NEG
15945: PUSH
15946: LD_INT 1
15948: NEG
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 2
15956: NEG
15957: PUSH
15958: LD_INT 2
15960: NEG
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 2
15968: NEG
15969: PUSH
15970: LD_INT 3
15972: NEG
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 3
15980: NEG
15981: PUSH
15982: LD_INT 2
15984: NEG
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 3
15992: NEG
15993: PUSH
15994: LD_INT 3
15996: NEG
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16020: LD_ADDR_VAR 0 14
16024: PUSH
16025: LD_INT 0
16027: PUSH
16028: LD_INT 0
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 0
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 1
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 1
16078: NEG
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: NEG
16090: PUSH
16091: LD_INT 1
16093: NEG
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 1
16101: NEG
16102: PUSH
16103: LD_INT 2
16105: NEG
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: LD_INT 2
16116: NEG
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: LD_INT 1
16127: NEG
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: LD_INT 2
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: LD_INT 2
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 1
16155: NEG
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 1
16166: NEG
16167: PUSH
16168: LD_INT 3
16170: NEG
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: LD_INT 3
16181: NEG
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: LD_INT 2
16192: NEG
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16216: LD_ADDR_VAR 0 15
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 0
16233: PUSH
16234: LD_INT 1
16236: NEG
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: LD_INT 0
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: LD_INT 1
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 1
16274: NEG
16275: PUSH
16276: LD_INT 0
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 1
16285: NEG
16286: PUSH
16287: LD_INT 1
16289: NEG
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: LD_INT 1
16300: NEG
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 2
16308: PUSH
16309: LD_INT 0
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 1
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 1
16328: NEG
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 2
16339: NEG
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 2
16350: NEG
16351: PUSH
16352: LD_INT 1
16354: NEG
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 2
16362: PUSH
16363: LD_INT 1
16365: NEG
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 3
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 3
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16409: LD_ADDR_VAR 0 16
16413: PUSH
16414: LD_INT 0
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 0
16426: PUSH
16427: LD_INT 1
16429: NEG
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 1
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 0
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 1
16467: NEG
16468: PUSH
16469: LD_INT 0
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 1
16478: NEG
16479: PUSH
16480: LD_INT 1
16482: NEG
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 1
16490: NEG
16491: PUSH
16492: LD_INT 2
16494: NEG
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 2
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: LD_INT 2
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 2
16532: NEG
16533: PUSH
16534: LD_INT 1
16536: NEG
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 2
16544: NEG
16545: PUSH
16546: LD_INT 2
16548: NEG
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 3
16556: PUSH
16557: LD_INT 2
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 3
16566: PUSH
16567: LD_INT 3
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16602: LD_ADDR_VAR 0 17
16606: PUSH
16607: LD_INT 0
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 0
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: LD_INT 0
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 0
16650: PUSH
16651: LD_INT 1
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 1
16660: NEG
16661: PUSH
16662: LD_INT 0
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 1
16671: NEG
16672: PUSH
16673: LD_INT 1
16675: NEG
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 1
16683: NEG
16684: PUSH
16685: LD_INT 2
16687: NEG
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 0
16695: PUSH
16696: LD_INT 2
16698: NEG
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: LD_INT 1
16709: NEG
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 0
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 2
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 2
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 1
16747: PUSH
16748: LD_INT 2
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 1
16767: NEG
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 2
16778: NEG
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 2
16789: NEG
16790: PUSH
16791: LD_INT 1
16793: NEG
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 2
16801: NEG
16802: PUSH
16803: LD_INT 2
16805: NEG
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16832: LD_ADDR_VAR 0 18
16836: PUSH
16837: LD_INT 0
16839: PUSH
16840: LD_INT 0
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 1
16852: NEG
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: LD_INT 0
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 0
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: LD_INT 0
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 1
16901: NEG
16902: PUSH
16903: LD_INT 1
16905: NEG
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 1
16913: NEG
16914: PUSH
16915: LD_INT 2
16917: NEG
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 0
16925: PUSH
16926: LD_INT 2
16928: NEG
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: LD_INT 1
16939: NEG
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 2
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 2
16957: PUSH
16958: LD_INT 1
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: LD_INT 2
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 1
16997: NEG
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 2
17008: NEG
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 2
17019: NEG
17020: PUSH
17021: LD_INT 1
17023: NEG
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 2
17031: NEG
17032: PUSH
17033: LD_INT 2
17035: NEG
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17062: LD_ADDR_VAR 0 19
17066: PUSH
17067: LD_INT 0
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: LD_INT 1
17082: NEG
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 0
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: NEG
17121: PUSH
17122: LD_INT 0
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 1
17131: NEG
17132: PUSH
17133: LD_INT 1
17135: NEG
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: NEG
17144: PUSH
17145: LD_INT 2
17147: NEG
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 0
17155: PUSH
17156: LD_INT 2
17158: NEG
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: LD_INT 1
17169: NEG
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 2
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: LD_INT 2
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 1
17227: NEG
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 2
17238: NEG
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 2
17249: NEG
17250: PUSH
17251: LD_INT 1
17253: NEG
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: LD_INT 2
17265: NEG
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17292: LD_ADDR_VAR 0 20
17296: PUSH
17297: LD_INT 0
17299: PUSH
17300: LD_INT 0
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: LD_INT 1
17312: NEG
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 1
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 0
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 1
17350: NEG
17351: PUSH
17352: LD_INT 0
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 1
17373: NEG
17374: PUSH
17375: LD_INT 2
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 0
17385: PUSH
17386: LD_INT 2
17388: NEG
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: LD_INT 1
17399: NEG
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 2
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 2
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 2
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 1
17437: PUSH
17438: LD_INT 2
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 2
17468: NEG
17469: PUSH
17470: LD_INT 0
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: NEG
17480: PUSH
17481: LD_INT 1
17483: NEG
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 2
17491: NEG
17492: PUSH
17493: LD_INT 2
17495: NEG
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17522: LD_ADDR_VAR 0 21
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 0
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 1
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 1
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 0
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 1
17580: NEG
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 1
17591: NEG
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: NEG
17604: PUSH
17605: LD_INT 2
17607: NEG
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 0
17615: PUSH
17616: LD_INT 2
17618: NEG
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 2
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 2
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: LD_INT 2
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: NEG
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 2
17698: NEG
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 2
17709: NEG
17710: PUSH
17711: LD_INT 1
17713: NEG
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 2
17721: NEG
17722: PUSH
17723: LD_INT 2
17725: NEG
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17752: LD_ADDR_VAR 0 22
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 1
17821: NEG
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 2
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 2
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: NEG
17940: PUSH
17941: LD_INT 1
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 2
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17982: LD_ADDR_VAR 0 23
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 1
18040: NEG
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: LD_INT 2
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 2
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 2
18158: NEG
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: NEG
18170: PUSH
18171: LD_INT 1
18173: NEG
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 2
18181: NEG
18182: PUSH
18183: LD_INT 2
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: NEG
18194: PUSH
18195: LD_INT 3
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: NEG
18206: PUSH
18207: LD_INT 3
18209: NEG
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: LD_INT 2
18220: NEG
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 1
18231: NEG
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18262: LD_ADDR_VAR 0 24
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: LD_INT 1
18282: NEG
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: LD_INT 0
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 0
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 1
18320: NEG
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: LD_INT 2
18358: NEG
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: NEG
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 2
18438: NEG
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 2
18449: NEG
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 2
18461: NEG
18462: PUSH
18463: LD_INT 2
18465: NEG
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: LD_INT 2
18476: NEG
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: LD_INT 1
18487: NEG
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 3
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 3
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18538: LD_ADDR_VAR 0 25
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: NEG
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 2
18714: NEG
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 2
18725: NEG
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 2
18737: NEG
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: LD_INT 3
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: LD_INT 3
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18812: LD_ADDR_VAR 0 26
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: LD_INT 0
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 0
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: NEG
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: NEG
18894: PUSH
18895: LD_INT 2
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: LD_INT 2
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 1
18919: NEG
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: LD_INT 0
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 2
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: LD_INT 2
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: LD_INT 2
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 1
18977: NEG
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 2
18988: NEG
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 2
18999: NEG
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 2
19011: NEG
19012: PUSH
19013: LD_INT 2
19015: NEG
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: LD_INT 3
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19088: LD_ADDR_VAR 0 27
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 1
19146: NEG
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 1
19157: NEG
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: LD_INT 2
19173: NEG
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: LD_INT 2
19184: NEG
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 1
19195: NEG
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 2
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 2
19264: NEG
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: LD_INT 1
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: LD_INT 2
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 3
19321: NEG
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 3
19333: NEG
19334: PUSH
19335: LD_INT 2
19337: NEG
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19368: LD_ADDR_VAR 0 28
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 0
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: NEG
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: LD_INT 1
19475: NEG
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 2
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: LD_INT 2
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: LD_INT 3
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: LD_INT 3
19595: NEG
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 3
19603: NEG
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 3
19615: NEG
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19650: LD_ADDR_VAR 0 29
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: LD_INT 1
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: NEG
19732: PUSH
19733: LD_INT 2
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: LD_INT 2
19746: NEG
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: NEG
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 2
19840: NEG
19841: PUSH
19842: LD_INT 3
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 3
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: LD_INT 3
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 3
19894: NEG
19895: PUSH
19896: LD_INT 2
19898: NEG
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19929: LD_ADDR_VAR 0 30
19933: PUSH
19934: LD_INT 0
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 1
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 1
19998: NEG
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: LD_INT 2
20014: NEG
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: LD_INT 2
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 2
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 2
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 1
20084: NEG
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 2
20106: NEG
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: NEG
20119: PUSH
20120: LD_INT 3
20122: NEG
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 2
20133: NEG
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 3
20141: PUSH
20142: LD_INT 2
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: LD_INT 3
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 2
20161: NEG
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 3
20172: NEG
20173: PUSH
20174: LD_INT 1
20176: NEG
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20207: LD_ADDR_VAR 0 31
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 0
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 1
20265: NEG
20266: PUSH
20267: LD_INT 0
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: LD_INT 2
20292: NEG
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 2
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: NEG
20385: PUSH
20386: LD_INT 2
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 2
20396: NEG
20397: PUSH
20398: LD_INT 3
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: LD_INT 3
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 3
20450: NEG
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20485: LD_ADDR_VAR 0 32
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: LD_INT 2
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 2
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 2
20610: PUSH
20611: LD_INT 2
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: LD_INT 2
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: LD_INT 2
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: NEG
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 2
20662: NEG
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: LD_INT 3
20678: NEG
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 3
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 3
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 3
20728: NEG
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20763: LD_ADDR_VAR 0 33
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 1
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 2
20918: NEG
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 2
20929: NEG
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: NEG
20942: PUSH
20943: LD_INT 2
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: NEG
20954: PUSH
20955: LD_INT 3
20957: NEG
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 1
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 3
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: NEG
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 3
21007: NEG
21008: PUSH
21009: LD_INT 2
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21042: LD_ADDR_VAR 0 34
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: NEG
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: LD_INT 2
21127: NEG
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: LD_INT 2
21138: NEG
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: NEG
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: NEG
21210: PUSH
21211: LD_INT 1
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 2
21221: NEG
21222: PUSH
21223: LD_INT 2
21225: NEG
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: LD_INT 3
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 3
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 3
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 3
21287: NEG
21288: PUSH
21289: LD_INT 1
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21322: LD_ADDR_VAR 0 35
21326: PUSH
21327: LD_INT 0
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: NEG
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: NEG
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 1
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 2
21413: NEG
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21434: LD_ADDR_VAR 0 36
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: LD_INT 2
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21546: LD_ADDR_VAR 0 37
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 1
21638: NEG
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21658: LD_ADDR_VAR 0 38
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: LD_INT 1
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: NEG
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21770: LD_ADDR_VAR 0 39
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: LD_INT 1
21790: NEG
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 1
21808: PUSH
21809: LD_INT 1
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 1
21839: NEG
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: NEG
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21882: LD_ADDR_VAR 0 40
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: LD_INT 0
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: LD_INT 1
21902: NEG
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 1
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21994: LD_ADDR_VAR 0 41
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 1
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: NEG
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 2
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: NEG
22173: PUSH
22174: LD_INT 2
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 2
22184: NEG
22185: PUSH
22186: LD_INT 3
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 3
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 3
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: NEG
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 3
22268: NEG
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 3
22279: NEG
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 3
22291: NEG
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 3
22303: NEG
22304: PUSH
22305: LD_INT 3
22307: NEG
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22344: LD_ADDR_VAR 0 42
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: NEG
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 2
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 1
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 2
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 1
22479: PUSH
22480: LD_INT 2
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 2
22522: NEG
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: NEG
22535: PUSH
22536: LD_INT 3
22538: NEG
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: LD_INT 3
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: LD_INT 3
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 2
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 3
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: LD_INT 3
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: LD_INT 3
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 3
22641: NEG
22642: PUSH
22643: LD_INT 2
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 3
22653: NEG
22654: PUSH
22655: LD_INT 3
22657: NEG
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22694: LD_ADDR_VAR 0 43
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: LD_INT 0
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: LD_INT 0
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: LD_INT 2
22779: NEG
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 2
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 2
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 2
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: NEG
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 2
22871: NEG
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: LD_INT 3
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 3
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 3
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: LD_INT 3
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: NEG
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 2
22979: NEG
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 3
22990: NEG
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 3
23001: NEG
23002: PUSH
23003: LD_INT 1
23005: NEG
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23042: LD_ADDR_VAR 0 44
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: LD_INT 0
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 0
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: LD_INT 2
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 2
23197: NEG
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 2
23208: NEG
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: LD_INT 3
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 3
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 3
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 3
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 3
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 2
23295: PUSH
23296: LD_INT 3
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 3
23316: NEG
23317: PUSH
23318: LD_INT 0
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 3
23327: NEG
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 3
23339: NEG
23340: PUSH
23341: LD_INT 2
23343: NEG
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 3
23351: NEG
23352: PUSH
23353: LD_INT 3
23355: NEG
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23392: LD_ADDR_VAR 0 45
23396: PUSH
23397: LD_INT 0
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 1
23461: NEG
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: NEG
23474: PUSH
23475: LD_INT 2
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 2
23488: NEG
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 2
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 2
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: NEG
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 2
23582: NEG
23583: PUSH
23584: LD_INT 3
23586: NEG
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: LD_INT 3
23598: NEG
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: LD_INT 3
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 3
23628: PUSH
23629: LD_INT 2
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 3
23638: PUSH
23639: LD_INT 3
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 1
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: LD_INT 3
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 3
23689: NEG
23690: PUSH
23691: LD_INT 2
23693: NEG
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 3
23701: NEG
23702: PUSH
23703: LD_INT 3
23705: NEG
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23742: LD_ADDR_VAR 0 46
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 2
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 2
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 2
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: NEG
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: LD_INT 3
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: LD_INT 3
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: LD_INT 2
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 2
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 3
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 3
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 3
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: NEG
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 3
24038: NEG
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 3
24049: NEG
24050: PUSH
24051: LD_INT 1
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24090: LD_ADDR_VAR 0 47
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 2
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 2
24205: NEG
24206: PUSH
24207: LD_INT 1
24209: NEG
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 2
24217: NEG
24218: PUSH
24219: LD_INT 2
24221: NEG
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24241: LD_ADDR_VAR 0 48
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 1
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: NEG
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: LD_INT 0
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24388: LD_ADDR_VAR 0 49
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: LD_INT 1
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24532: LD_ADDR_VAR 0 50
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24676: LD_ADDR_VAR 0 51
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: LD_INT 1
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: LD_INT 2
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 2
24788: NEG
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24823: LD_ADDR_VAR 0 52
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: LD_INT 2
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: NEG
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: NEG
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 2
24950: NEG
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24974: LD_ADDR_VAR 0 53
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 1
25032: NEG
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 2
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: NEG
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: NEG
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: LD_INT 2
25177: NEG
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25204: LD_ADDR_VAR 0 54
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25434: LD_ADDR_VAR 0 55
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 2
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 2
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25664: LD_ADDR_VAR 0 56
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 2
25840: NEG
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25894: LD_ADDR_VAR 0 57
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26124: LD_ADDR_VAR 0 58
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 2
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26354: LD_ADDR_VAR 0 59
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26442: LD_ADDR_VAR 0 60
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26530: LD_ADDR_VAR 0 61
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26618: LD_ADDR_VAR 0 62
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26706: LD_ADDR_VAR 0 63
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26794: LD_ADDR_VAR 0 64
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: ST_TO_ADDR
// end ; 1 :
26882: GO 32779
26884: LD_INT 1
26886: DOUBLE
26887: EQUAL
26888: IFTRUE 26892
26890: GO 29515
26892: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26893: LD_ADDR_VAR 0 11
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: LD_INT 3
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 3
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: LD_INT 2
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26937: LD_ADDR_VAR 0 12
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 3
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26978: LD_ADDR_VAR 0 13
26982: PUSH
26983: LD_INT 3
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 3
26995: PUSH
26996: LD_INT 3
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 3
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27018: LD_ADDR_VAR 0 14
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: LD_INT 2
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27059: LD_ADDR_VAR 0 15
27063: PUSH
27064: LD_INT 2
27066: NEG
27067: PUSH
27068: LD_INT 1
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 3
27077: NEG
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 3
27088: NEG
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27103: LD_ADDR_VAR 0 16
27107: PUSH
27108: LD_INT 2
27110: NEG
27111: PUSH
27112: LD_INT 3
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 3
27122: NEG
27123: PUSH
27124: LD_INT 2
27126: NEG
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 3
27134: NEG
27135: PUSH
27136: LD_INT 3
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27149: LD_ADDR_VAR 0 17
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: LD_INT 3
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 3
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 2
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: LIST
27192: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27193: LD_ADDR_VAR 0 18
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 3
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27234: LD_ADDR_VAR 0 19
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: LD_INT 3
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: LD_INT 3
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27274: LD_ADDR_VAR 0 20
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 3
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27315: LD_ADDR_VAR 0 21
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 3
27333: NEG
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 3
27344: NEG
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27359: LD_ADDR_VAR 0 22
27363: PUSH
27364: LD_INT 2
27366: NEG
27367: PUSH
27368: LD_INT 3
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 3
27378: NEG
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 3
27390: NEG
27391: PUSH
27392: LD_INT 3
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27405: LD_ADDR_VAR 0 23
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: LD_INT 3
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 4
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: LD_INT 3
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27449: LD_ADDR_VAR 0 24
27453: PUSH
27454: LD_INT 3
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 4
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27490: LD_ADDR_VAR 0 25
27494: PUSH
27495: LD_INT 3
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 4
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 3
27517: PUSH
27518: LD_INT 4
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27530: LD_ADDR_VAR 0 26
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 3
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 4
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 3
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27571: LD_ADDR_VAR 0 27
27575: PUSH
27576: LD_INT 3
27578: NEG
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 3
27589: NEG
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 4
27600: NEG
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27615: LD_ADDR_VAR 0 28
27619: PUSH
27620: LD_INT 3
27622: NEG
27623: PUSH
27624: LD_INT 3
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 3
27634: NEG
27635: PUSH
27636: LD_INT 4
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 4
27646: NEG
27647: PUSH
27648: LD_INT 3
27650: NEG
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27661: LD_ADDR_VAR 0 29
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 3
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 3
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 2
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 4
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 4
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: LD_INT 3
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: LD_INT 5
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 5
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: LD_INT 4
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: LD_INT 6
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: LD_INT 6
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 5
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27816: LD_ADDR_VAR 0 30
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 3
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 3
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 4
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 4
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 4
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 5
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 5
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 5
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 6
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 6
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27959: LD_ADDR_VAR 0 31
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 3
27976: PUSH
27977: LD_INT 3
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 4
27996: PUSH
27997: LD_INT 3
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 4
28006: PUSH
28007: LD_INT 4
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 3
28016: PUSH
28017: LD_INT 4
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 5
28026: PUSH
28027: LD_INT 4
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 5
28036: PUSH
28037: LD_INT 5
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 4
28046: PUSH
28047: LD_INT 5
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 6
28056: PUSH
28057: LD_INT 5
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 6
28066: PUSH
28067: LD_INT 6
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 5
28076: PUSH
28077: LD_INT 6
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28098: LD_ADDR_VAR 0 32
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: LD_INT 4
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: LD_INT 4
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PUSH
28158: LD_INT 3
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: LD_INT 5
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 5
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: LD_INT 4
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 6
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 6
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: LD_INT 5
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28241: LD_ADDR_VAR 0 33
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 3
28259: NEG
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 3
28270: NEG
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 4
28293: NEG
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 4
28304: NEG
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 4
28316: NEG
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 5
28327: NEG
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 5
28338: NEG
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 5
28350: NEG
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 6
28361: NEG
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 6
28372: NEG
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28396: LD_ADDR_VAR 0 34
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 3
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 3
28415: NEG
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 3
28427: NEG
28428: PUSH
28429: LD_INT 3
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 3
28439: NEG
28440: PUSH
28441: LD_INT 4
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 4
28451: NEG
28452: PUSH
28453: LD_INT 3
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 4
28463: NEG
28464: PUSH
28465: LD_INT 4
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 4
28475: NEG
28476: PUSH
28477: LD_INT 5
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 5
28487: NEG
28488: PUSH
28489: LD_INT 4
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 5
28499: NEG
28500: PUSH
28501: LD_INT 5
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 5
28511: NEG
28512: PUSH
28513: LD_INT 6
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 6
28523: NEG
28524: PUSH
28525: LD_INT 5
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 6
28535: NEG
28536: PUSH
28537: LD_INT 6
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28559: LD_ADDR_VAR 0 41
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: LD_INT 3
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: LD_INT 2
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28603: LD_ADDR_VAR 0 42
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 3
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28644: LD_ADDR_VAR 0 43
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 3
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 3
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: LIST
28683: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28684: LD_ADDR_VAR 0 44
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28725: LD_ADDR_VAR 0 45
28729: PUSH
28730: LD_INT 2
28732: NEG
28733: PUSH
28734: LD_INT 0
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 3
28754: NEG
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28769: LD_ADDR_VAR 0 46
28773: PUSH
28774: LD_INT 2
28776: NEG
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: LD_INT 3
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 3
28800: NEG
28801: PUSH
28802: LD_INT 2
28804: NEG
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28815: LD_ADDR_VAR 0 47
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: LD_INT 3
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: PUSH
28836: LD_INT 3
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28848: LD_ADDR_VAR 0 48
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: LD_INT 2
28858: NEG
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 2
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28879: LD_ADDR_VAR 0 49
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28908: LD_ADDR_VAR 0 50
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: LD_INT 3
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28937: LD_ADDR_VAR 0 51
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 2
28955: NEG
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28968: LD_ADDR_VAR 0 52
28972: PUSH
28973: LD_INT 3
28975: NEG
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 3
28987: NEG
28988: PUSH
28989: LD_INT 2
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29001: LD_ADDR_VAR 0 53
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 3
29012: NEG
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 3
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29045: LD_ADDR_VAR 0 54
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 3
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29086: LD_ADDR_VAR 0 55
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 3
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29126: LD_ADDR_VAR 0 56
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 3
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29167: LD_ADDR_VAR 0 57
29171: PUSH
29172: LD_INT 2
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29211: LD_ADDR_VAR 0 58
29215: PUSH
29216: LD_INT 2
29218: NEG
29219: PUSH
29220: LD_INT 3
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 3
29230: NEG
29231: PUSH
29232: LD_INT 2
29234: NEG
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 3
29242: NEG
29243: PUSH
29244: LD_INT 3
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29257: LD_ADDR_VAR 0 59
29261: PUSH
29262: LD_INT 1
29264: NEG
29265: PUSH
29266: LD_INT 2
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29301: LD_ADDR_VAR 0 60
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: LIST
29341: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29342: LD_ADDR_VAR 0 61
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29382: LD_ADDR_VAR 0 62
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: LD_INT 2
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29423: LD_ADDR_VAR 0 63
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29467: LD_ADDR_VAR 0 64
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 2
29486: NEG
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 2
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: ST_TO_ADDR
// end ; 2 :
29513: GO 32779
29515: LD_INT 2
29517: DOUBLE
29518: EQUAL
29519: IFTRUE 29523
29521: GO 32778
29523: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29524: LD_ADDR_VAR 0 29
29528: PUSH
29529: LD_INT 4
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 4
29541: PUSH
29542: LD_INT 1
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 5
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 5
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 4
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 3
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 5
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 3
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 3
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 4
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 4
29654: PUSH
29655: LD_INT 4
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 3
29664: PUSH
29665: LD_INT 4
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 4
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: LD_INT 4
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 4
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 4
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: LD_INT 5
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: LD_INT 5
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 5
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 3
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 4
29863: NEG
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 4
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 4
29886: NEG
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 4
29909: NEG
29910: PUSH
29911: LD_INT 4
29913: NEG
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 4
29921: NEG
29922: PUSH
29923: LD_INT 5
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: NEG
29934: PUSH
29935: LD_INT 4
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 3
29945: NEG
29946: PUSH
29947: LD_INT 3
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 4
29957: NEG
29958: PUSH
29959: LD_INT 3
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 5
29969: NEG
29970: PUSH
29971: LD_INT 4
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 5
29981: NEG
29982: PUSH
29983: LD_INT 5
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 3
29993: NEG
29994: PUSH
29995: LD_INT 5
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 5
30005: NEG
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30062: LD_ADDR_VAR 0 30
30066: PUSH
30067: LD_INT 4
30069: PUSH
30070: LD_INT 4
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 4
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 5
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: LD_INT 5
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 4
30109: PUSH
30110: LD_INT 5
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: LD_INT 3
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 5
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: LD_INT 5
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: LD_INT 4
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 4
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 4
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 2
30241: NEG
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 4
30252: NEG
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 4
30263: NEG
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: NEG
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 4
30297: NEG
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 5
30308: NEG
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 5
30319: NEG
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 5
30331: NEG
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 3
30354: NEG
30355: PUSH
30356: LD_INT 3
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: LD_INT 4
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 2
30378: NEG
30379: PUSH
30380: LD_INT 3
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: LD_INT 2
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 3
30402: NEG
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 4
30414: NEG
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 4
30426: NEG
30427: PUSH
30428: LD_INT 4
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 4
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 4
30450: NEG
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: LD_INT 4
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 5
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: LD_INT 4
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: LD_INT 4
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: PUSH
30531: LD_INT 5
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: PUSH
30542: LD_INT 3
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 2
30552: NEG
30553: PUSH
30554: LD_INT 5
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30609: LD_ADDR_VAR 0 31
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: LD_INT 3
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 5
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: LD_INT 5
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: LD_INT 4
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 3
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: LD_INT 5
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: LD_INT 3
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 3
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 4
30765: NEG
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 4
30776: NEG
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 4
30788: NEG
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 2
30800: NEG
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 4
30811: NEG
30812: PUSH
30813: LD_INT 4
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 4
30823: NEG
30824: PUSH
30825: LD_INT 5
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: LD_INT 4
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: LD_INT 3
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 4
30859: NEG
30860: PUSH
30861: LD_INT 3
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 5
30871: NEG
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 5
30883: NEG
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 3
30895: NEG
30896: PUSH
30897: LD_INT 5
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 5
30907: NEG
30908: PUSH
30909: LD_INT 3
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: LD_INT 4
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: LD_INT 2
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: LD_INT 2
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 4
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 4
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 4
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 4
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 5
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 5
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 4
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 3
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 5
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31159: LD_ADDR_VAR 0 32
31163: PUSH
31164: LD_INT 4
31166: NEG
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 4
31177: NEG
31178: PUSH
31179: LD_INT 1
31181: NEG
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 3
31189: NEG
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 4
31211: NEG
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 5
31222: NEG
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 5
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 5
31245: NEG
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: NEG
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 3
31268: NEG
31269: PUSH
31270: LD_INT 3
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: NEG
31281: PUSH
31282: LD_INT 4
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: NEG
31293: PUSH
31294: LD_INT 3
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 3
31316: NEG
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 4
31328: NEG
31329: PUSH
31330: LD_INT 3
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 4
31340: NEG
31341: PUSH
31342: LD_INT 4
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: LD_INT 4
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 4
31364: NEG
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 4
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: LD_INT 5
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 4
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 4
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: LD_INT 5
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: LD_INT 3
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: LD_INT 5
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 4
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 4
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 4
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 4
31571: PUSH
31572: LD_INT 4
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 4
31581: PUSH
31582: LD_INT 3
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 5
31591: PUSH
31592: LD_INT 4
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 5
31601: PUSH
31602: LD_INT 5
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 4
31611: PUSH
31612: LD_INT 5
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: LD_INT 4
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: LD_INT 3
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 5
31641: PUSH
31642: LD_INT 3
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 5
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31706: LD_ADDR_VAR 0 33
31710: PUSH
31711: LD_INT 4
31713: NEG
31714: PUSH
31715: LD_INT 4
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 4
31725: NEG
31726: PUSH
31727: LD_INT 5
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 3
31737: NEG
31738: PUSH
31739: LD_INT 4
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 3
31749: NEG
31750: PUSH
31751: LD_INT 3
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 4
31761: NEG
31762: PUSH
31763: LD_INT 3
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 5
31773: NEG
31774: PUSH
31775: LD_INT 4
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 5
31785: NEG
31786: PUSH
31787: LD_INT 5
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: LD_INT 5
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 5
31809: NEG
31810: PUSH
31811: LD_INT 3
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: LD_INT 3
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: LD_INT 4
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: LD_INT 3
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: LD_INT 3
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: LD_INT 4
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: LD_INT 4
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 4
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 5
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 5
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 4
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 4
32046: PUSH
32047: LD_INT 4
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: PUSH
32057: LD_INT 4
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 4
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: LD_INT 4
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 4
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 5
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 5
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 4
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 5
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32244: LD_ADDR_VAR 0 34
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: LD_INT 4
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 5
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: LD_INT 4
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: LD_INT 3
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 3
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: LD_INT 4
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: LD_INT 5
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: LD_INT 5
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 3
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 4
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 4
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 3
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 4
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 4
32446: PUSH
32447: LD_INT 4
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 5
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: LD_INT 5
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 4
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 3
32496: PUSH
32497: LD_INT 4
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 3
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 5
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 5
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 3
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 4
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 4
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 2
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: LD_INT 4
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 4
32629: NEG
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 4
32640: NEG
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 3
32663: NEG
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 4
32674: NEG
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 5
32685: NEG
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 5
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 5
32708: NEG
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 3
32720: NEG
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: ST_TO_ADDR
// end ; end ;
32776: GO 32779
32778: POP
// case btype of b_depot , b_warehouse :
32779: LD_VAR 0 1
32783: PUSH
32784: LD_INT 0
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32798
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32999
32798: POP
// case nation of nation_american :
32799: LD_VAR 0 5
32803: PUSH
32804: LD_INT 1
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32868
32812: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32813: LD_ADDR_VAR 0 9
32817: PUSH
32818: LD_VAR 0 11
32822: PUSH
32823: LD_VAR 0 12
32827: PUSH
32828: LD_VAR 0 13
32832: PUSH
32833: LD_VAR 0 14
32837: PUSH
32838: LD_VAR 0 15
32842: PUSH
32843: LD_VAR 0 16
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: PUSH
32856: LD_VAR 0 4
32860: PUSH
32861: LD_INT 1
32863: PLUS
32864: ARRAY
32865: ST_TO_ADDR
32866: GO 32997
32868: LD_INT 2
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32876
32874: GO 32932
32876: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32877: LD_ADDR_VAR 0 9
32881: PUSH
32882: LD_VAR 0 17
32886: PUSH
32887: LD_VAR 0 18
32891: PUSH
32892: LD_VAR 0 19
32896: PUSH
32897: LD_VAR 0 20
32901: PUSH
32902: LD_VAR 0 21
32906: PUSH
32907: LD_VAR 0 22
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: PUSH
32920: LD_VAR 0 4
32924: PUSH
32925: LD_INT 1
32927: PLUS
32928: ARRAY
32929: ST_TO_ADDR
32930: GO 32997
32932: LD_INT 3
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32996
32940: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32941: LD_ADDR_VAR 0 9
32945: PUSH
32946: LD_VAR 0 23
32950: PUSH
32951: LD_VAR 0 24
32955: PUSH
32956: LD_VAR 0 25
32960: PUSH
32961: LD_VAR 0 26
32965: PUSH
32966: LD_VAR 0 27
32970: PUSH
32971: LD_VAR 0 28
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: PUSH
32984: LD_VAR 0 4
32988: PUSH
32989: LD_INT 1
32991: PLUS
32992: ARRAY
32993: ST_TO_ADDR
32994: GO 32997
32996: POP
32997: GO 33552
32999: LD_INT 2
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33013
33005: LD_INT 3
33007: DOUBLE
33008: EQUAL
33009: IFTRUE 33013
33011: GO 33069
33013: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33014: LD_ADDR_VAR 0 9
33018: PUSH
33019: LD_VAR 0 29
33023: PUSH
33024: LD_VAR 0 30
33028: PUSH
33029: LD_VAR 0 31
33033: PUSH
33034: LD_VAR 0 32
33038: PUSH
33039: LD_VAR 0 33
33043: PUSH
33044: LD_VAR 0 34
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: PUSH
33057: LD_VAR 0 4
33061: PUSH
33062: LD_INT 1
33064: PLUS
33065: ARRAY
33066: ST_TO_ADDR
33067: GO 33552
33069: LD_INT 16
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33131
33075: LD_INT 17
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33131
33081: LD_INT 18
33083: DOUBLE
33084: EQUAL
33085: IFTRUE 33131
33087: LD_INT 19
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33131
33093: LD_INT 22
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33131
33099: LD_INT 20
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33131
33105: LD_INT 21
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33131
33111: LD_INT 23
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33131
33117: LD_INT 24
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33131
33123: LD_INT 25
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33187
33131: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33132: LD_ADDR_VAR 0 9
33136: PUSH
33137: LD_VAR 0 35
33141: PUSH
33142: LD_VAR 0 36
33146: PUSH
33147: LD_VAR 0 37
33151: PUSH
33152: LD_VAR 0 38
33156: PUSH
33157: LD_VAR 0 39
33161: PUSH
33162: LD_VAR 0 40
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: PUSH
33175: LD_VAR 0 4
33179: PUSH
33180: LD_INT 1
33182: PLUS
33183: ARRAY
33184: ST_TO_ADDR
33185: GO 33552
33187: LD_INT 6
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33243
33193: LD_INT 7
33195: DOUBLE
33196: EQUAL
33197: IFTRUE 33243
33199: LD_INT 8
33201: DOUBLE
33202: EQUAL
33203: IFTRUE 33243
33205: LD_INT 13
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33243
33211: LD_INT 12
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33243
33217: LD_INT 15
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33243
33223: LD_INT 11
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33243
33229: LD_INT 14
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33243
33235: LD_INT 10
33237: DOUBLE
33238: EQUAL
33239: IFTRUE 33243
33241: GO 33299
33243: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33244: LD_ADDR_VAR 0 9
33248: PUSH
33249: LD_VAR 0 41
33253: PUSH
33254: LD_VAR 0 42
33258: PUSH
33259: LD_VAR 0 43
33263: PUSH
33264: LD_VAR 0 44
33268: PUSH
33269: LD_VAR 0 45
33273: PUSH
33274: LD_VAR 0 46
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: PUSH
33287: LD_VAR 0 4
33291: PUSH
33292: LD_INT 1
33294: PLUS
33295: ARRAY
33296: ST_TO_ADDR
33297: GO 33552
33299: LD_INT 36
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33363
33307: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33308: LD_ADDR_VAR 0 9
33312: PUSH
33313: LD_VAR 0 47
33317: PUSH
33318: LD_VAR 0 48
33322: PUSH
33323: LD_VAR 0 49
33327: PUSH
33328: LD_VAR 0 50
33332: PUSH
33333: LD_VAR 0 51
33337: PUSH
33338: LD_VAR 0 52
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: PUSH
33351: LD_VAR 0 4
33355: PUSH
33356: LD_INT 1
33358: PLUS
33359: ARRAY
33360: ST_TO_ADDR
33361: GO 33552
33363: LD_INT 4
33365: DOUBLE
33366: EQUAL
33367: IFTRUE 33389
33369: LD_INT 5
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33389
33375: LD_INT 34
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33389
33381: LD_INT 37
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33445
33389: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33390: LD_ADDR_VAR 0 9
33394: PUSH
33395: LD_VAR 0 53
33399: PUSH
33400: LD_VAR 0 54
33404: PUSH
33405: LD_VAR 0 55
33409: PUSH
33410: LD_VAR 0 56
33414: PUSH
33415: LD_VAR 0 57
33419: PUSH
33420: LD_VAR 0 58
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: PUSH
33433: LD_VAR 0 4
33437: PUSH
33438: LD_INT 1
33440: PLUS
33441: ARRAY
33442: ST_TO_ADDR
33443: GO 33552
33445: LD_INT 31
33447: DOUBLE
33448: EQUAL
33449: IFTRUE 33495
33451: LD_INT 32
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33495
33457: LD_INT 33
33459: DOUBLE
33460: EQUAL
33461: IFTRUE 33495
33463: LD_INT 27
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33495
33469: LD_INT 26
33471: DOUBLE
33472: EQUAL
33473: IFTRUE 33495
33475: LD_INT 28
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33495
33481: LD_INT 29
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33495
33487: LD_INT 30
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33495
33493: GO 33551
33495: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33496: LD_ADDR_VAR 0 9
33500: PUSH
33501: LD_VAR 0 59
33505: PUSH
33506: LD_VAR 0 60
33510: PUSH
33511: LD_VAR 0 61
33515: PUSH
33516: LD_VAR 0 62
33520: PUSH
33521: LD_VAR 0 63
33525: PUSH
33526: LD_VAR 0 64
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: PUSH
33539: LD_VAR 0 4
33543: PUSH
33544: LD_INT 1
33546: PLUS
33547: ARRAY
33548: ST_TO_ADDR
33549: GO 33552
33551: POP
// temp_list2 = [ ] ;
33552: LD_ADDR_VAR 0 10
33556: PUSH
33557: EMPTY
33558: ST_TO_ADDR
// for i in temp_list do
33559: LD_ADDR_VAR 0 8
33563: PUSH
33564: LD_VAR 0 9
33568: PUSH
33569: FOR_IN
33570: IFFALSE 33622
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33572: LD_ADDR_VAR 0 10
33576: PUSH
33577: LD_VAR 0 10
33581: PUSH
33582: LD_VAR 0 8
33586: PUSH
33587: LD_INT 1
33589: ARRAY
33590: PUSH
33591: LD_VAR 0 2
33595: PLUS
33596: PUSH
33597: LD_VAR 0 8
33601: PUSH
33602: LD_INT 2
33604: ARRAY
33605: PUSH
33606: LD_VAR 0 3
33610: PLUS
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: EMPTY
33617: LIST
33618: ADD
33619: ST_TO_ADDR
33620: GO 33569
33622: POP
33623: POP
// result = temp_list2 ;
33624: LD_ADDR_VAR 0 7
33628: PUSH
33629: LD_VAR 0 10
33633: ST_TO_ADDR
// end ;
33634: LD_VAR 0 7
33638: RET
// export function EnemyInRange ( unit , dist ) ; begin
33639: LD_INT 0
33641: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33642: LD_ADDR_VAR 0 3
33646: PUSH
33647: LD_VAR 0 1
33651: PPUSH
33652: CALL_OW 255
33656: PPUSH
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL_OW 250
33666: PPUSH
33667: LD_VAR 0 1
33671: PPUSH
33672: CALL_OW 251
33676: PPUSH
33677: LD_VAR 0 2
33681: PPUSH
33682: CALL 6896 0 4
33686: PUSH
33687: LD_INT 4
33689: ARRAY
33690: ST_TO_ADDR
// end ;
33691: LD_VAR 0 3
33695: RET
// export function PlayerSeeMe ( unit ) ; begin
33696: LD_INT 0
33698: PPUSH
// result := See ( your_side , unit ) ;
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_OWVAR 2
33708: PPUSH
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL_OW 292
33718: ST_TO_ADDR
// end ;
33719: LD_VAR 0 2
33723: RET
// export function ReverseDir ( unit ) ; begin
33724: LD_INT 0
33726: PPUSH
// if not unit then
33727: LD_VAR 0 1
33731: NOT
33732: IFFALSE 33736
// exit ;
33734: GO 33759
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33736: LD_ADDR_VAR 0 2
33740: PUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 254
33750: PUSH
33751: LD_INT 3
33753: PLUS
33754: PUSH
33755: LD_INT 6
33757: MOD
33758: ST_TO_ADDR
// end ;
33759: LD_VAR 0 2
33763: RET
// export function ReverseArray ( array ) ; var i ; begin
33764: LD_INT 0
33766: PPUSH
33767: PPUSH
// if not array then
33768: LD_VAR 0 1
33772: NOT
33773: IFFALSE 33777
// exit ;
33775: GO 33832
// result := [ ] ;
33777: LD_ADDR_VAR 0 2
33781: PUSH
33782: EMPTY
33783: ST_TO_ADDR
// for i := array downto 1 do
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: DOUBLE
33790: LD_VAR 0 1
33794: INC
33795: ST_TO_ADDR
33796: LD_INT 1
33798: PUSH
33799: FOR_DOWNTO
33800: IFFALSE 33830
// result := Join ( result , array [ i ] ) ;
33802: LD_ADDR_VAR 0 2
33806: PUSH
33807: LD_VAR 0 2
33811: PPUSH
33812: LD_VAR 0 1
33816: PUSH
33817: LD_VAR 0 3
33821: ARRAY
33822: PPUSH
33823: CALL 38674 0 2
33827: ST_TO_ADDR
33828: GO 33799
33830: POP
33831: POP
// end ;
33832: LD_VAR 0 2
33836: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33837: LD_INT 0
33839: PPUSH
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
// if not unit or not hexes then
33845: LD_VAR 0 1
33849: NOT
33850: IFTRUE 33859
33852: PUSH
33853: LD_VAR 0 2
33857: NOT
33858: OR
33859: IFFALSE 33863
// exit ;
33861: GO 33986
// dist := 9999 ;
33863: LD_ADDR_VAR 0 5
33867: PUSH
33868: LD_INT 9999
33870: ST_TO_ADDR
// for i = 1 to hexes do
33871: LD_ADDR_VAR 0 4
33875: PUSH
33876: DOUBLE
33877: LD_INT 1
33879: DEC
33880: ST_TO_ADDR
33881: LD_VAR 0 2
33885: PUSH
33886: FOR_TO
33887: IFFALSE 33974
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33889: LD_ADDR_VAR 0 6
33893: PUSH
33894: LD_VAR 0 1
33898: PPUSH
33899: LD_VAR 0 2
33903: PUSH
33904: LD_VAR 0 4
33908: ARRAY
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PPUSH
33914: LD_VAR 0 2
33918: PUSH
33919: LD_VAR 0 4
33923: ARRAY
33924: PUSH
33925: LD_INT 2
33927: ARRAY
33928: PPUSH
33929: CALL_OW 297
33933: ST_TO_ADDR
// if tdist < dist then
33934: LD_VAR 0 6
33938: PUSH
33939: LD_VAR 0 5
33943: LESS
33944: IFFALSE 33972
// begin hex := hexes [ i ] ;
33946: LD_ADDR_VAR 0 8
33950: PUSH
33951: LD_VAR 0 2
33955: PUSH
33956: LD_VAR 0 4
33960: ARRAY
33961: ST_TO_ADDR
// dist := tdist ;
33962: LD_ADDR_VAR 0 5
33966: PUSH
33967: LD_VAR 0 6
33971: ST_TO_ADDR
// end ; end ;
33972: GO 33886
33974: POP
33975: POP
// result := hex ;
33976: LD_ADDR_VAR 0 3
33980: PUSH
33981: LD_VAR 0 8
33985: ST_TO_ADDR
// end ;
33986: LD_VAR 0 3
33990: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33991: LD_INT 0
33993: PPUSH
33994: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33995: LD_VAR 0 1
33999: NOT
34000: IFTRUE 34039
34002: PUSH
34003: LD_VAR 0 1
34007: PUSH
34008: LD_INT 21
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 23
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PPUSH
34032: CALL_OW 69
34036: IN
34037: NOT
34038: OR
34039: IFFALSE 34043
// exit ;
34041: GO 34090
// for i = 1 to 3 do
34043: LD_ADDR_VAR 0 3
34047: PUSH
34048: DOUBLE
34049: LD_INT 1
34051: DEC
34052: ST_TO_ADDR
34053: LD_INT 3
34055: PUSH
34056: FOR_TO
34057: IFFALSE 34088
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34059: LD_VAR 0 1
34063: PPUSH
34064: CALL_OW 250
34068: PPUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: CALL_OW 251
34078: PPUSH
34079: LD_INT 1
34081: PPUSH
34082: CALL_OW 453
34086: GO 34056
34088: POP
34089: POP
// end ;
34090: LD_VAR 0 2
34094: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34095: LD_INT 0
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
// if not unit or not enemy_unit then
34103: LD_VAR 0 1
34107: NOT
34108: IFTRUE 34117
34110: PUSH
34111: LD_VAR 0 2
34115: NOT
34116: OR
34117: IFFALSE 34121
// exit ;
34119: GO 34592
// if GetLives ( i ) < 250 then
34121: LD_VAR 0 4
34125: PPUSH
34126: CALL_OW 256
34130: PUSH
34131: LD_INT 250
34133: LESS
34134: IFFALSE 34147
// begin ComAutodestruct ( i ) ;
34136: LD_VAR 0 4
34140: PPUSH
34141: CALL 33991 0 1
// exit ;
34145: GO 34592
// end ; x := GetX ( enemy_unit ) ;
34147: LD_ADDR_VAR 0 7
34151: PUSH
34152: LD_VAR 0 2
34156: PPUSH
34157: CALL_OW 250
34161: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34162: LD_ADDR_VAR 0 8
34166: PUSH
34167: LD_VAR 0 2
34171: PPUSH
34172: CALL_OW 251
34176: ST_TO_ADDR
// if not x or not y then
34177: LD_VAR 0 7
34181: NOT
34182: IFTRUE 34191
34184: PUSH
34185: LD_VAR 0 8
34189: NOT
34190: OR
34191: IFFALSE 34195
// exit ;
34193: GO 34592
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34195: LD_ADDR_VAR 0 6
34199: PUSH
34200: LD_VAR 0 7
34204: PPUSH
34205: LD_INT 0
34207: PPUSH
34208: LD_INT 4
34210: PPUSH
34211: CALL_OW 272
34215: PUSH
34216: LD_VAR 0 8
34220: PPUSH
34221: LD_INT 0
34223: PPUSH
34224: LD_INT 4
34226: PPUSH
34227: CALL_OW 273
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_VAR 0 7
34240: PPUSH
34241: LD_INT 1
34243: PPUSH
34244: LD_INT 4
34246: PPUSH
34247: CALL_OW 272
34251: PUSH
34252: LD_VAR 0 8
34256: PPUSH
34257: LD_INT 1
34259: PPUSH
34260: LD_INT 4
34262: PPUSH
34263: CALL_OW 273
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_VAR 0 7
34276: PPUSH
34277: LD_INT 2
34279: PPUSH
34280: LD_INT 4
34282: PPUSH
34283: CALL_OW 272
34287: PUSH
34288: LD_VAR 0 8
34292: PPUSH
34293: LD_INT 2
34295: PPUSH
34296: LD_INT 4
34298: PPUSH
34299: CALL_OW 273
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_VAR 0 7
34312: PPUSH
34313: LD_INT 3
34315: PPUSH
34316: LD_INT 4
34318: PPUSH
34319: CALL_OW 272
34323: PUSH
34324: LD_VAR 0 8
34328: PPUSH
34329: LD_INT 3
34331: PPUSH
34332: LD_INT 4
34334: PPUSH
34335: CALL_OW 273
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_VAR 0 7
34348: PPUSH
34349: LD_INT 4
34351: PPUSH
34352: LD_INT 4
34354: PPUSH
34355: CALL_OW 272
34359: PUSH
34360: LD_VAR 0 8
34364: PPUSH
34365: LD_INT 4
34367: PPUSH
34368: LD_INT 4
34370: PPUSH
34371: CALL_OW 273
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_VAR 0 7
34384: PPUSH
34385: LD_INT 5
34387: PPUSH
34388: LD_INT 4
34390: PPUSH
34391: CALL_OW 272
34395: PUSH
34396: LD_VAR 0 8
34400: PPUSH
34401: LD_INT 5
34403: PPUSH
34404: LD_INT 4
34406: PPUSH
34407: CALL_OW 273
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: ST_TO_ADDR
// for i = tmp downto 1 do
34424: LD_ADDR_VAR 0 4
34428: PUSH
34429: DOUBLE
34430: LD_VAR 0 6
34434: INC
34435: ST_TO_ADDR
34436: LD_INT 1
34438: PUSH
34439: FOR_DOWNTO
34440: IFFALSE 34543
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34442: LD_VAR 0 6
34446: PUSH
34447: LD_VAR 0 4
34451: ARRAY
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PPUSH
34457: LD_VAR 0 6
34461: PUSH
34462: LD_VAR 0 4
34466: ARRAY
34467: PUSH
34468: LD_INT 2
34470: ARRAY
34471: PPUSH
34472: CALL_OW 488
34476: NOT
34477: IFTRUE 34519
34479: PUSH
34480: LD_VAR 0 6
34484: PUSH
34485: LD_VAR 0 4
34489: ARRAY
34490: PUSH
34491: LD_INT 1
34493: ARRAY
34494: PPUSH
34495: LD_VAR 0 6
34499: PUSH
34500: LD_VAR 0 4
34504: ARRAY
34505: PUSH
34506: LD_INT 2
34508: ARRAY
34509: PPUSH
34510: CALL_OW 428
34514: PUSH
34515: LD_INT 0
34517: NONEQUAL
34518: OR
34519: IFFALSE 34541
// tmp := Delete ( tmp , i ) ;
34521: LD_ADDR_VAR 0 6
34525: PUSH
34526: LD_VAR 0 6
34530: PPUSH
34531: LD_VAR 0 4
34535: PPUSH
34536: CALL_OW 3
34540: ST_TO_ADDR
34541: GO 34439
34543: POP
34544: POP
// j := GetClosestHex ( unit , tmp ) ;
34545: LD_ADDR_VAR 0 5
34549: PUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: LD_VAR 0 6
34559: PPUSH
34560: CALL 33837 0 2
34564: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34565: LD_VAR 0 1
34569: PPUSH
34570: LD_VAR 0 5
34574: PUSH
34575: LD_INT 1
34577: ARRAY
34578: PPUSH
34579: LD_VAR 0 5
34583: PUSH
34584: LD_INT 2
34586: ARRAY
34587: PPUSH
34588: CALL_OW 111
// end ;
34592: LD_VAR 0 3
34596: RET
// export function PrepareApemanSoldier ( ) ; begin
34597: LD_INT 0
34599: PPUSH
// uc_nation := 0 ;
34600: LD_ADDR_OWVAR 21
34604: PUSH
34605: LD_INT 0
34607: ST_TO_ADDR
// hc_sex := sex_male ;
34608: LD_ADDR_OWVAR 27
34612: PUSH
34613: LD_INT 1
34615: ST_TO_ADDR
// hc_name :=  ;
34616: LD_ADDR_OWVAR 26
34620: PUSH
34621: LD_STRING 
34623: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34624: LD_ADDR_OWVAR 28
34628: PUSH
34629: LD_INT 15
34631: ST_TO_ADDR
// hc_gallery :=  ;
34632: LD_ADDR_OWVAR 33
34636: PUSH
34637: LD_STRING 
34639: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34640: LD_ADDR_OWVAR 31
34644: PUSH
34645: LD_INT 0
34647: PPUSH
34648: LD_INT 3
34650: PPUSH
34651: CALL_OW 12
34655: PUSH
34656: LD_INT 0
34658: PPUSH
34659: LD_INT 3
34661: PPUSH
34662: CALL_OW 12
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34679: LD_ADDR_OWVAR 29
34683: PUSH
34684: LD_INT 12
34686: PUSH
34687: LD_INT 12
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: ST_TO_ADDR
// end ;
34694: LD_VAR 0 1
34698: RET
// export function PrepareApemanEngineer ( ) ; begin
34699: LD_INT 0
34701: PPUSH
// uc_nation := 0 ;
34702: LD_ADDR_OWVAR 21
34706: PUSH
34707: LD_INT 0
34709: ST_TO_ADDR
// hc_sex := sex_male ;
34710: LD_ADDR_OWVAR 27
34714: PUSH
34715: LD_INT 1
34717: ST_TO_ADDR
// hc_name :=  ;
34718: LD_ADDR_OWVAR 26
34722: PUSH
34723: LD_STRING 
34725: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34726: LD_ADDR_OWVAR 28
34730: PUSH
34731: LD_INT 16
34733: ST_TO_ADDR
// hc_gallery :=  ;
34734: LD_ADDR_OWVAR 33
34738: PUSH
34739: LD_STRING 
34741: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34742: LD_ADDR_OWVAR 31
34746: PUSH
34747: LD_INT 0
34749: PPUSH
34750: LD_INT 3
34752: PPUSH
34753: CALL_OW 12
34757: PUSH
34758: LD_INT 0
34760: PPUSH
34761: LD_INT 3
34763: PPUSH
34764: CALL_OW 12
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34781: LD_ADDR_OWVAR 29
34785: PUSH
34786: LD_INT 12
34788: PUSH
34789: LD_INT 12
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// end ;
34796: LD_VAR 0 1
34800: RET
// export function PrepareApeman ( agressivity ) ; begin
34801: LD_INT 0
34803: PPUSH
// uc_side := 0 ;
34804: LD_ADDR_OWVAR 20
34808: PUSH
34809: LD_INT 0
34811: ST_TO_ADDR
// uc_nation := 0 ;
34812: LD_ADDR_OWVAR 21
34816: PUSH
34817: LD_INT 0
34819: ST_TO_ADDR
// hc_sex := sex_male ;
34820: LD_ADDR_OWVAR 27
34824: PUSH
34825: LD_INT 1
34827: ST_TO_ADDR
// hc_class := class_apeman ;
34828: LD_ADDR_OWVAR 28
34832: PUSH
34833: LD_INT 12
34835: ST_TO_ADDR
// hc_gallery :=  ;
34836: LD_ADDR_OWVAR 33
34840: PUSH
34841: LD_STRING 
34843: ST_TO_ADDR
// hc_name :=  ;
34844: LD_ADDR_OWVAR 26
34848: PUSH
34849: LD_STRING 
34851: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34852: LD_ADDR_OWVAR 29
34856: PUSH
34857: LD_INT 12
34859: PUSH
34860: LD_INT 12
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// if agressivity = 0 then
34867: LD_VAR 0 1
34871: PUSH
34872: LD_INT 0
34874: EQUAL
34875: IFFALSE 34887
// hc_agressivity := 0 else
34877: LD_ADDR_OWVAR 35
34881: PUSH
34882: LD_INT 0
34884: ST_TO_ADDR
34885: GO 34908
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34887: LD_ADDR_OWVAR 35
34891: PUSH
34892: LD_VAR 0 1
34896: NEG
34897: PPUSH
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL_OW 12
34907: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34908: LD_ADDR_OWVAR 31
34912: PUSH
34913: LD_INT 0
34915: PPUSH
34916: LD_INT 3
34918: PPUSH
34919: CALL_OW 12
34923: PUSH
34924: LD_INT 0
34926: PPUSH
34927: LD_INT 3
34929: PPUSH
34930: CALL_OW 12
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: ST_TO_ADDR
// end ;
34947: LD_VAR 0 2
34951: RET
// export function PrepareTiger ( agressivity ) ; begin
34952: LD_INT 0
34954: PPUSH
// uc_side := 0 ;
34955: LD_ADDR_OWVAR 20
34959: PUSH
34960: LD_INT 0
34962: ST_TO_ADDR
// uc_nation := 0 ;
34963: LD_ADDR_OWVAR 21
34967: PUSH
34968: LD_INT 0
34970: ST_TO_ADDR
// InitHc ;
34971: CALL_OW 19
// hc_class := class_tiger ;
34975: LD_ADDR_OWVAR 28
34979: PUSH
34980: LD_INT 14
34982: ST_TO_ADDR
// hc_gallery :=  ;
34983: LD_ADDR_OWVAR 33
34987: PUSH
34988: LD_STRING 
34990: ST_TO_ADDR
// hc_name :=  ;
34991: LD_ADDR_OWVAR 26
34995: PUSH
34996: LD_STRING 
34998: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34999: LD_ADDR_OWVAR 35
35003: PUSH
35004: LD_VAR 0 1
35008: NEG
35009: PPUSH
35010: LD_VAR 0 1
35014: PPUSH
35015: CALL_OW 12
35019: ST_TO_ADDR
// end ;
35020: LD_VAR 0 2
35024: RET
// export function PrepareEnchidna ( ) ; begin
35025: LD_INT 0
35027: PPUSH
// uc_side := 0 ;
35028: LD_ADDR_OWVAR 20
35032: PUSH
35033: LD_INT 0
35035: ST_TO_ADDR
// uc_nation := 0 ;
35036: LD_ADDR_OWVAR 21
35040: PUSH
35041: LD_INT 0
35043: ST_TO_ADDR
// InitHc ;
35044: CALL_OW 19
// hc_class := class_baggie ;
35048: LD_ADDR_OWVAR 28
35052: PUSH
35053: LD_INT 13
35055: ST_TO_ADDR
// hc_gallery :=  ;
35056: LD_ADDR_OWVAR 33
35060: PUSH
35061: LD_STRING 
35063: ST_TO_ADDR
// hc_name :=  ;
35064: LD_ADDR_OWVAR 26
35068: PUSH
35069: LD_STRING 
35071: ST_TO_ADDR
// end ;
35072: LD_VAR 0 1
35076: RET
// export function PrepareFrog ( ) ; begin
35077: LD_INT 0
35079: PPUSH
// uc_side := 0 ;
35080: LD_ADDR_OWVAR 20
35084: PUSH
35085: LD_INT 0
35087: ST_TO_ADDR
// uc_nation := 0 ;
35088: LD_ADDR_OWVAR 21
35092: PUSH
35093: LD_INT 0
35095: ST_TO_ADDR
// InitHc ;
35096: CALL_OW 19
// hc_class := class_frog ;
35100: LD_ADDR_OWVAR 28
35104: PUSH
35105: LD_INT 19
35107: ST_TO_ADDR
// hc_gallery :=  ;
35108: LD_ADDR_OWVAR 33
35112: PUSH
35113: LD_STRING 
35115: ST_TO_ADDR
// hc_name :=  ;
35116: LD_ADDR_OWVAR 26
35120: PUSH
35121: LD_STRING 
35123: ST_TO_ADDR
// end ;
35124: LD_VAR 0 1
35128: RET
// export function PrepareFish ( ) ; begin
35129: LD_INT 0
35131: PPUSH
// uc_side := 0 ;
35132: LD_ADDR_OWVAR 20
35136: PUSH
35137: LD_INT 0
35139: ST_TO_ADDR
// uc_nation := 0 ;
35140: LD_ADDR_OWVAR 21
35144: PUSH
35145: LD_INT 0
35147: ST_TO_ADDR
// InitHc ;
35148: CALL_OW 19
// hc_class := class_fish ;
35152: LD_ADDR_OWVAR 28
35156: PUSH
35157: LD_INT 20
35159: ST_TO_ADDR
// hc_gallery :=  ;
35160: LD_ADDR_OWVAR 33
35164: PUSH
35165: LD_STRING 
35167: ST_TO_ADDR
// hc_name :=  ;
35168: LD_ADDR_OWVAR 26
35172: PUSH
35173: LD_STRING 
35175: ST_TO_ADDR
// end ;
35176: LD_VAR 0 1
35180: RET
// export function PrepareBird ( ) ; begin
35181: LD_INT 0
35183: PPUSH
// uc_side := 0 ;
35184: LD_ADDR_OWVAR 20
35188: PUSH
35189: LD_INT 0
35191: ST_TO_ADDR
// uc_nation := 0 ;
35192: LD_ADDR_OWVAR 21
35196: PUSH
35197: LD_INT 0
35199: ST_TO_ADDR
// InitHc ;
35200: CALL_OW 19
// hc_class := class_phororhacos ;
35204: LD_ADDR_OWVAR 28
35208: PUSH
35209: LD_INT 18
35211: ST_TO_ADDR
// hc_gallery :=  ;
35212: LD_ADDR_OWVAR 33
35216: PUSH
35217: LD_STRING 
35219: ST_TO_ADDR
// hc_name :=  ;
35220: LD_ADDR_OWVAR 26
35224: PUSH
35225: LD_STRING 
35227: ST_TO_ADDR
// end ;
35228: LD_VAR 0 1
35232: RET
// export function PrepareHorse ( ) ; begin
35233: LD_INT 0
35235: PPUSH
// uc_side := 0 ;
35236: LD_ADDR_OWVAR 20
35240: PUSH
35241: LD_INT 0
35243: ST_TO_ADDR
// uc_nation := 0 ;
35244: LD_ADDR_OWVAR 21
35248: PUSH
35249: LD_INT 0
35251: ST_TO_ADDR
// InitHc ;
35252: CALL_OW 19
// hc_class := class_horse ;
35256: LD_ADDR_OWVAR 28
35260: PUSH
35261: LD_INT 21
35263: ST_TO_ADDR
// hc_gallery :=  ;
35264: LD_ADDR_OWVAR 33
35268: PUSH
35269: LD_STRING 
35271: ST_TO_ADDR
// hc_name :=  ;
35272: LD_ADDR_OWVAR 26
35276: PUSH
35277: LD_STRING 
35279: ST_TO_ADDR
// end ;
35280: LD_VAR 0 1
35284: RET
// export function PrepareMastodont ( ) ; begin
35285: LD_INT 0
35287: PPUSH
// uc_side := 0 ;
35288: LD_ADDR_OWVAR 20
35292: PUSH
35293: LD_INT 0
35295: ST_TO_ADDR
// uc_nation := 0 ;
35296: LD_ADDR_OWVAR 21
35300: PUSH
35301: LD_INT 0
35303: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35304: LD_ADDR_OWVAR 37
35308: PUSH
35309: LD_INT 31
35311: ST_TO_ADDR
// vc_control := control_rider ;
35312: LD_ADDR_OWVAR 38
35316: PUSH
35317: LD_INT 4
35319: ST_TO_ADDR
// end ;
35320: LD_VAR 0 1
35324: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35325: LD_INT 0
35327: PPUSH
35328: PPUSH
35329: PPUSH
// uc_side = 0 ;
35330: LD_ADDR_OWVAR 20
35334: PUSH
35335: LD_INT 0
35337: ST_TO_ADDR
// uc_nation = 0 ;
35338: LD_ADDR_OWVAR 21
35342: PUSH
35343: LD_INT 0
35345: ST_TO_ADDR
// InitHc_All ( ) ;
35346: CALL_OW 584
// InitVc ;
35350: CALL_OW 20
// if mastodonts then
35354: LD_VAR 0 6
35358: IFFALSE 35425
// for i = 1 to mastodonts do
35360: LD_ADDR_VAR 0 11
35364: PUSH
35365: DOUBLE
35366: LD_INT 1
35368: DEC
35369: ST_TO_ADDR
35370: LD_VAR 0 6
35374: PUSH
35375: FOR_TO
35376: IFFALSE 35423
// begin vc_chassis := 31 ;
35378: LD_ADDR_OWVAR 37
35382: PUSH
35383: LD_INT 31
35385: ST_TO_ADDR
// vc_control := control_rider ;
35386: LD_ADDR_OWVAR 38
35390: PUSH
35391: LD_INT 4
35393: ST_TO_ADDR
// animal := CreateVehicle ;
35394: LD_ADDR_VAR 0 12
35398: PUSH
35399: CALL_OW 45
35403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35404: LD_VAR 0 12
35408: PPUSH
35409: LD_VAR 0 8
35413: PPUSH
35414: LD_INT 0
35416: PPUSH
35417: CALL 37567 0 3
// end ;
35421: GO 35375
35423: POP
35424: POP
// if horses then
35425: LD_VAR 0 5
35429: IFFALSE 35496
// for i = 1 to horses do
35431: LD_ADDR_VAR 0 11
35435: PUSH
35436: DOUBLE
35437: LD_INT 1
35439: DEC
35440: ST_TO_ADDR
35441: LD_VAR 0 5
35445: PUSH
35446: FOR_TO
35447: IFFALSE 35494
// begin hc_class := 21 ;
35449: LD_ADDR_OWVAR 28
35453: PUSH
35454: LD_INT 21
35456: ST_TO_ADDR
// hc_gallery :=  ;
35457: LD_ADDR_OWVAR 33
35461: PUSH
35462: LD_STRING 
35464: ST_TO_ADDR
// animal := CreateHuman ;
35465: LD_ADDR_VAR 0 12
35469: PUSH
35470: CALL_OW 44
35474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35475: LD_VAR 0 12
35479: PPUSH
35480: LD_VAR 0 8
35484: PPUSH
35485: LD_INT 0
35487: PPUSH
35488: CALL 37567 0 3
// end ;
35492: GO 35446
35494: POP
35495: POP
// if birds then
35496: LD_VAR 0 1
35500: IFFALSE 35567
// for i = 1 to birds do
35502: LD_ADDR_VAR 0 11
35506: PUSH
35507: DOUBLE
35508: LD_INT 1
35510: DEC
35511: ST_TO_ADDR
35512: LD_VAR 0 1
35516: PUSH
35517: FOR_TO
35518: IFFALSE 35565
// begin hc_class := 18 ;
35520: LD_ADDR_OWVAR 28
35524: PUSH
35525: LD_INT 18
35527: ST_TO_ADDR
// hc_gallery =  ;
35528: LD_ADDR_OWVAR 33
35532: PUSH
35533: LD_STRING 
35535: ST_TO_ADDR
// animal := CreateHuman ;
35536: LD_ADDR_VAR 0 12
35540: PUSH
35541: CALL_OW 44
35545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35546: LD_VAR 0 12
35550: PPUSH
35551: LD_VAR 0 8
35555: PPUSH
35556: LD_INT 0
35558: PPUSH
35559: CALL 37567 0 3
// end ;
35563: GO 35517
35565: POP
35566: POP
// if tigers then
35567: LD_VAR 0 2
35571: IFFALSE 35655
// for i = 1 to tigers do
35573: LD_ADDR_VAR 0 11
35577: PUSH
35578: DOUBLE
35579: LD_INT 1
35581: DEC
35582: ST_TO_ADDR
35583: LD_VAR 0 2
35587: PUSH
35588: FOR_TO
35589: IFFALSE 35653
// begin hc_class = class_tiger ;
35591: LD_ADDR_OWVAR 28
35595: PUSH
35596: LD_INT 14
35598: ST_TO_ADDR
// hc_gallery =  ;
35599: LD_ADDR_OWVAR 33
35603: PUSH
35604: LD_STRING 
35606: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35607: LD_ADDR_OWVAR 35
35611: PUSH
35612: LD_INT 7
35614: NEG
35615: PPUSH
35616: LD_INT 7
35618: PPUSH
35619: CALL_OW 12
35623: ST_TO_ADDR
// animal := CreateHuman ;
35624: LD_ADDR_VAR 0 12
35628: PUSH
35629: CALL_OW 44
35633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35634: LD_VAR 0 12
35638: PPUSH
35639: LD_VAR 0 8
35643: PPUSH
35644: LD_INT 0
35646: PPUSH
35647: CALL 37567 0 3
// end ;
35651: GO 35588
35653: POP
35654: POP
// if apemans then
35655: LD_VAR 0 3
35659: IFFALSE 35782
// for i = 1 to apemans do
35661: LD_ADDR_VAR 0 11
35665: PUSH
35666: DOUBLE
35667: LD_INT 1
35669: DEC
35670: ST_TO_ADDR
35671: LD_VAR 0 3
35675: PUSH
35676: FOR_TO
35677: IFFALSE 35780
// begin hc_class = class_apeman ;
35679: LD_ADDR_OWVAR 28
35683: PUSH
35684: LD_INT 12
35686: ST_TO_ADDR
// hc_gallery =  ;
35687: LD_ADDR_OWVAR 33
35691: PUSH
35692: LD_STRING 
35694: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35695: LD_ADDR_OWVAR 35
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PPUSH
35704: LD_INT 2
35706: PPUSH
35707: CALL_OW 12
35711: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35712: LD_ADDR_OWVAR 31
35716: PUSH
35717: LD_INT 1
35719: PPUSH
35720: LD_INT 3
35722: PPUSH
35723: CALL_OW 12
35727: PUSH
35728: LD_INT 1
35730: PPUSH
35731: LD_INT 3
35733: PPUSH
35734: CALL_OW 12
35738: PUSH
35739: LD_INT 0
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: ST_TO_ADDR
// animal := CreateHuman ;
35751: LD_ADDR_VAR 0 12
35755: PUSH
35756: CALL_OW 44
35760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35761: LD_VAR 0 12
35765: PPUSH
35766: LD_VAR 0 8
35770: PPUSH
35771: LD_INT 0
35773: PPUSH
35774: CALL 37567 0 3
// end ;
35778: GO 35676
35780: POP
35781: POP
// if enchidnas then
35782: LD_VAR 0 4
35786: IFFALSE 35853
// for i = 1 to enchidnas do
35788: LD_ADDR_VAR 0 11
35792: PUSH
35793: DOUBLE
35794: LD_INT 1
35796: DEC
35797: ST_TO_ADDR
35798: LD_VAR 0 4
35802: PUSH
35803: FOR_TO
35804: IFFALSE 35851
// begin hc_class = 13 ;
35806: LD_ADDR_OWVAR 28
35810: PUSH
35811: LD_INT 13
35813: ST_TO_ADDR
// hc_gallery =  ;
35814: LD_ADDR_OWVAR 33
35818: PUSH
35819: LD_STRING 
35821: ST_TO_ADDR
// animal := CreateHuman ;
35822: LD_ADDR_VAR 0 12
35826: PUSH
35827: CALL_OW 44
35831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35832: LD_VAR 0 12
35836: PPUSH
35837: LD_VAR 0 8
35841: PPUSH
35842: LD_INT 0
35844: PPUSH
35845: CALL 37567 0 3
// end ;
35849: GO 35803
35851: POP
35852: POP
// if fishes then
35853: LD_VAR 0 7
35857: IFFALSE 35924
// for i = 1 to fishes do
35859: LD_ADDR_VAR 0 11
35863: PUSH
35864: DOUBLE
35865: LD_INT 1
35867: DEC
35868: ST_TO_ADDR
35869: LD_VAR 0 7
35873: PUSH
35874: FOR_TO
35875: IFFALSE 35922
// begin hc_class = 20 ;
35877: LD_ADDR_OWVAR 28
35881: PUSH
35882: LD_INT 20
35884: ST_TO_ADDR
// hc_gallery =  ;
35885: LD_ADDR_OWVAR 33
35889: PUSH
35890: LD_STRING 
35892: ST_TO_ADDR
// animal := CreateHuman ;
35893: LD_ADDR_VAR 0 12
35897: PUSH
35898: CALL_OW 44
35902: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35903: LD_VAR 0 12
35907: PPUSH
35908: LD_VAR 0 9
35912: PPUSH
35913: LD_INT 0
35915: PPUSH
35916: CALL 37567 0 3
// end ;
35920: GO 35874
35922: POP
35923: POP
// end ;
35924: LD_VAR 0 10
35928: RET
// export function WantHeal ( sci , unit ) ; begin
35929: LD_INT 0
35931: PPUSH
// if GetTaskList ( sci ) > 0 then
35932: LD_VAR 0 1
35936: PPUSH
35937: CALL_OW 437
35941: PUSH
35942: LD_INT 0
35944: GREATER
35945: IFFALSE 36017
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35947: LD_VAR 0 1
35951: PPUSH
35952: CALL_OW 437
35956: PUSH
35957: LD_INT 1
35959: ARRAY
35960: PUSH
35961: LD_INT 1
35963: ARRAY
35964: PUSH
35965: LD_STRING l
35967: EQUAL
35968: IFFALSE 35995
35970: PUSH
35971: LD_VAR 0 1
35975: PPUSH
35976: CALL_OW 437
35980: PUSH
35981: LD_INT 1
35983: ARRAY
35984: PUSH
35985: LD_INT 4
35987: ARRAY
35988: PUSH
35989: LD_VAR 0 2
35993: EQUAL
35994: AND
35995: IFFALSE 36007
// result := true else
35997: LD_ADDR_VAR 0 3
36001: PUSH
36002: LD_INT 1
36004: ST_TO_ADDR
36005: GO 36015
// result := false ;
36007: LD_ADDR_VAR 0 3
36011: PUSH
36012: LD_INT 0
36014: ST_TO_ADDR
// end else
36015: GO 36025
// result := false ;
36017: LD_ADDR_VAR 0 3
36021: PUSH
36022: LD_INT 0
36024: ST_TO_ADDR
// end ;
36025: LD_VAR 0 3
36029: RET
// export function HealTarget ( sci ) ; begin
36030: LD_INT 0
36032: PPUSH
// if not sci then
36033: LD_VAR 0 1
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36107
// result := 0 ;
36042: LD_ADDR_VAR 0 2
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// if GetTaskList ( sci ) then
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 437
36059: IFFALSE 36107
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 437
36070: PUSH
36071: LD_INT 1
36073: ARRAY
36074: PUSH
36075: LD_INT 1
36077: ARRAY
36078: PUSH
36079: LD_STRING l
36081: EQUAL
36082: IFFALSE 36107
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36084: LD_ADDR_VAR 0 2
36088: PUSH
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 437
36098: PUSH
36099: LD_INT 1
36101: ARRAY
36102: PUSH
36103: LD_INT 4
36105: ARRAY
36106: ST_TO_ADDR
// end ;
36107: LD_VAR 0 2
36111: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36112: LD_INT 0
36114: PPUSH
36115: PPUSH
36116: PPUSH
36117: PPUSH
// if not base_units then
36118: LD_VAR 0 1
36122: NOT
36123: IFFALSE 36127
// exit ;
36125: GO 36214
// result := false ;
36127: LD_ADDR_VAR 0 2
36131: PUSH
36132: LD_INT 0
36134: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36135: LD_ADDR_VAR 0 5
36139: PUSH
36140: LD_VAR 0 1
36144: PPUSH
36145: LD_INT 21
36147: PUSH
36148: LD_INT 3
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PPUSH
36155: CALL_OW 72
36159: ST_TO_ADDR
// if not tmp then
36160: LD_VAR 0 5
36164: NOT
36165: IFFALSE 36169
// exit ;
36167: GO 36214
// for i in tmp do
36169: LD_ADDR_VAR 0 3
36173: PUSH
36174: LD_VAR 0 5
36178: PUSH
36179: FOR_IN
36180: IFFALSE 36212
// begin result := EnemyInRange ( i , 22 ) ;
36182: LD_ADDR_VAR 0 2
36186: PUSH
36187: LD_VAR 0 3
36191: PPUSH
36192: LD_INT 22
36194: PPUSH
36195: CALL 33639 0 2
36199: ST_TO_ADDR
// if result then
36200: LD_VAR 0 2
36204: IFFALSE 36210
// exit ;
36206: POP
36207: POP
36208: GO 36214
// end ;
36210: GO 36179
36212: POP
36213: POP
// end ;
36214: LD_VAR 0 2
36218: RET
// export function FilterByTag ( units , tag ) ; begin
36219: LD_INT 0
36221: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36222: LD_ADDR_VAR 0 3
36226: PUSH
36227: LD_VAR 0 1
36231: PPUSH
36232: LD_INT 120
36234: PUSH
36235: LD_VAR 0 2
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PPUSH
36244: CALL_OW 72
36248: ST_TO_ADDR
// end ;
36249: LD_VAR 0 3
36253: RET
// export function IsDriver ( un ) ; begin
36254: LD_INT 0
36256: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36257: LD_ADDR_VAR 0 2
36261: PUSH
36262: LD_VAR 0 1
36266: PUSH
36267: LD_INT 55
36269: PUSH
36270: EMPTY
36271: LIST
36272: PPUSH
36273: CALL_OW 69
36277: IN
36278: ST_TO_ADDR
// end ;
36279: LD_VAR 0 2
36283: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36284: LD_INT 0
36286: PPUSH
36287: PPUSH
// list := [ ] ;
36288: LD_ADDR_VAR 0 5
36292: PUSH
36293: EMPTY
36294: ST_TO_ADDR
// case d of 0 :
36295: LD_VAR 0 3
36299: PUSH
36300: LD_INT 0
36302: DOUBLE
36303: EQUAL
36304: IFTRUE 36308
36306: GO 36441
36308: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36309: LD_ADDR_VAR 0 5
36313: PUSH
36314: LD_VAR 0 1
36318: PUSH
36319: LD_INT 4
36321: MINUS
36322: PUSH
36323: LD_VAR 0 2
36327: PUSH
36328: LD_INT 4
36330: MINUS
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: PUSH
36340: LD_VAR 0 1
36344: PUSH
36345: LD_INT 3
36347: MINUS
36348: PUSH
36349: LD_VAR 0 2
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: PUSH
36362: LD_VAR 0 1
36366: PUSH
36367: LD_INT 4
36369: PLUS
36370: PUSH
36371: LD_VAR 0 2
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: PUSH
36384: LD_VAR 0 1
36388: PUSH
36389: LD_INT 3
36391: PLUS
36392: PUSH
36393: LD_VAR 0 2
36397: PUSH
36398: LD_INT 3
36400: PLUS
36401: PUSH
36402: LD_INT 5
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: PUSH
36410: LD_VAR 0 1
36414: PUSH
36415: LD_VAR 0 2
36419: PUSH
36420: LD_INT 4
36422: PLUS
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// end ; 1 :
36439: GO 37139
36441: LD_INT 1
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36449
36447: GO 36582
36449: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36450: LD_ADDR_VAR 0 5
36454: PUSH
36455: LD_VAR 0 1
36459: PUSH
36460: LD_VAR 0 2
36464: PUSH
36465: LD_INT 4
36467: MINUS
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: PUSH
36477: LD_VAR 0 1
36481: PUSH
36482: LD_INT 3
36484: MINUS
36485: PUSH
36486: LD_VAR 0 2
36490: PUSH
36491: LD_INT 3
36493: MINUS
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: PUSH
36503: LD_VAR 0 1
36507: PUSH
36508: LD_INT 4
36510: MINUS
36511: PUSH
36512: LD_VAR 0 2
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: PUSH
36525: LD_VAR 0 1
36529: PUSH
36530: LD_VAR 0 2
36534: PUSH
36535: LD_INT 3
36537: PLUS
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: PUSH
36547: LD_VAR 0 1
36551: PUSH
36552: LD_INT 4
36554: PLUS
36555: PUSH
36556: LD_VAR 0 2
36560: PUSH
36561: LD_INT 4
36563: PLUS
36564: PUSH
36565: LD_INT 5
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: ST_TO_ADDR
// end ; 2 :
36580: GO 37139
36582: LD_INT 2
36584: DOUBLE
36585: EQUAL
36586: IFTRUE 36590
36588: GO 36719
36590: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36591: LD_ADDR_VAR 0 5
36595: PUSH
36596: LD_VAR 0 1
36600: PUSH
36601: LD_VAR 0 2
36605: PUSH
36606: LD_INT 3
36608: MINUS
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: PUSH
36618: LD_VAR 0 1
36622: PUSH
36623: LD_INT 4
36625: PLUS
36626: PUSH
36627: LD_VAR 0 2
36631: PUSH
36632: LD_INT 4
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: PUSH
36640: LD_VAR 0 1
36644: PUSH
36645: LD_VAR 0 2
36649: PUSH
36650: LD_INT 4
36652: PLUS
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: PUSH
36662: LD_VAR 0 1
36666: PUSH
36667: LD_INT 3
36669: MINUS
36670: PUSH
36671: LD_VAR 0 2
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: PUSH
36684: LD_VAR 0 1
36688: PUSH
36689: LD_INT 4
36691: MINUS
36692: PUSH
36693: LD_VAR 0 2
36697: PUSH
36698: LD_INT 4
36700: MINUS
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// end ; 3 :
36717: GO 37139
36719: LD_INT 3
36721: DOUBLE
36722: EQUAL
36723: IFTRUE 36727
36725: GO 36860
36727: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36728: LD_ADDR_VAR 0 5
36732: PUSH
36733: LD_VAR 0 1
36737: PUSH
36738: LD_INT 3
36740: PLUS
36741: PUSH
36742: LD_VAR 0 2
36746: PUSH
36747: LD_INT 4
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: PUSH
36755: LD_VAR 0 1
36759: PUSH
36760: LD_INT 4
36762: PLUS
36763: PUSH
36764: LD_VAR 0 2
36768: PUSH
36769: LD_INT 4
36771: PLUS
36772: PUSH
36773: LD_INT 5
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: PUSH
36781: LD_VAR 0 1
36785: PUSH
36786: LD_INT 4
36788: MINUS
36789: PUSH
36790: LD_VAR 0 2
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: PUSH
36803: LD_VAR 0 1
36807: PUSH
36808: LD_VAR 0 2
36812: PUSH
36813: LD_INT 4
36815: MINUS
36816: PUSH
36817: LD_INT 3
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: PUSH
36825: LD_VAR 0 1
36829: PUSH
36830: LD_INT 3
36832: MINUS
36833: PUSH
36834: LD_VAR 0 2
36838: PUSH
36839: LD_INT 3
36841: MINUS
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: ST_TO_ADDR
// end ; 4 :
36858: GO 37139
36860: LD_INT 4
36862: DOUBLE
36863: EQUAL
36864: IFTRUE 36868
36866: GO 37001
36868: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36869: LD_ADDR_VAR 0 5
36873: PUSH
36874: LD_VAR 0 1
36878: PUSH
36879: LD_VAR 0 2
36883: PUSH
36884: LD_INT 4
36886: PLUS
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: PUSH
36896: LD_VAR 0 1
36900: PUSH
36901: LD_INT 3
36903: PLUS
36904: PUSH
36905: LD_VAR 0 2
36909: PUSH
36910: LD_INT 3
36912: PLUS
36913: PUSH
36914: LD_INT 5
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: PUSH
36922: LD_VAR 0 1
36926: PUSH
36927: LD_INT 4
36929: PLUS
36930: PUSH
36931: LD_VAR 0 2
36935: PUSH
36936: LD_INT 4
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: PUSH
36944: LD_VAR 0 1
36948: PUSH
36949: LD_VAR 0 2
36953: PUSH
36954: LD_INT 3
36956: MINUS
36957: PUSH
36958: LD_INT 3
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: PUSH
36966: LD_VAR 0 1
36970: PUSH
36971: LD_INT 4
36973: MINUS
36974: PUSH
36975: LD_VAR 0 2
36979: PUSH
36980: LD_INT 4
36982: MINUS
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// end ; 5 :
36999: GO 37139
37001: LD_INT 5
37003: DOUBLE
37004: EQUAL
37005: IFTRUE 37009
37007: GO 37138
37009: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37010: LD_ADDR_VAR 0 5
37014: PUSH
37015: LD_VAR 0 1
37019: PUSH
37020: LD_INT 4
37022: MINUS
37023: PUSH
37024: LD_VAR 0 2
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: PUSH
37037: LD_VAR 0 1
37041: PUSH
37042: LD_VAR 0 2
37046: PUSH
37047: LD_INT 4
37049: MINUS
37050: PUSH
37051: LD_INT 3
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: PUSH
37059: LD_VAR 0 1
37063: PUSH
37064: LD_INT 4
37066: PLUS
37067: PUSH
37068: LD_VAR 0 2
37072: PUSH
37073: LD_INT 4
37075: PLUS
37076: PUSH
37077: LD_INT 5
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: PUSH
37085: LD_VAR 0 1
37089: PUSH
37090: LD_INT 3
37092: PLUS
37093: PUSH
37094: LD_VAR 0 2
37098: PUSH
37099: LD_INT 4
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: PUSH
37107: LD_VAR 0 1
37111: PUSH
37112: LD_VAR 0 2
37116: PUSH
37117: LD_INT 3
37119: PLUS
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// end ; end ;
37136: GO 37139
37138: POP
// result := list ;
37139: LD_ADDR_VAR 0 4
37143: PUSH
37144: LD_VAR 0 5
37148: ST_TO_ADDR
// end ;
37149: LD_VAR 0 4
37153: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
37158: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37159: LD_VAR 0 1
37163: NOT
37164: IFTRUE 37192
37166: PUSH
37167: LD_VAR 0 2
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: LD_INT 3
37180: PUSH
37181: LD_INT 4
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: IN
37190: NOT
37191: OR
37192: IFFALSE 37196
// exit ;
37194: GO 37279
// tmp := [ ] ;
37196: LD_ADDR_VAR 0 5
37200: PUSH
37201: EMPTY
37202: ST_TO_ADDR
// for i in units do
37203: LD_ADDR_VAR 0 4
37207: PUSH
37208: LD_VAR 0 1
37212: PUSH
37213: FOR_IN
37214: IFFALSE 37248
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37216: LD_ADDR_VAR 0 5
37220: PUSH
37221: LD_VAR 0 5
37225: PPUSH
37226: LD_VAR 0 4
37230: PPUSH
37231: LD_VAR 0 2
37235: PPUSH
37236: CALL_OW 259
37240: PPUSH
37241: CALL 38674 0 2
37245: ST_TO_ADDR
37246: GO 37213
37248: POP
37249: POP
// if not tmp then
37250: LD_VAR 0 5
37254: NOT
37255: IFFALSE 37259
// exit ;
37257: GO 37279
// result := SortListByListDesc ( units , tmp ) ;
37259: LD_ADDR_VAR 0 3
37263: PUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: LD_VAR 0 5
37273: PPUSH
37274: CALL_OW 77
37278: ST_TO_ADDR
// end ;
37279: LD_VAR 0 3
37283: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37284: LD_INT 0
37286: PPUSH
37287: PPUSH
37288: PPUSH
// result := false ;
37289: LD_ADDR_VAR 0 3
37293: PUSH
37294: LD_INT 0
37296: ST_TO_ADDR
// if not building then
37297: LD_VAR 0 2
37301: NOT
37302: IFFALSE 37306
// exit ;
37304: GO 37450
// x := GetX ( building ) ;
37306: LD_ADDR_VAR 0 4
37310: PUSH
37311: LD_VAR 0 2
37315: PPUSH
37316: CALL_OW 250
37320: ST_TO_ADDR
// y := GetY ( building ) ;
37321: LD_ADDR_VAR 0 5
37325: PUSH
37326: LD_VAR 0 2
37330: PPUSH
37331: CALL_OW 251
37335: ST_TO_ADDR
// if not x or not y then
37336: LD_VAR 0 4
37340: NOT
37341: IFTRUE 37350
37343: PUSH
37344: LD_VAR 0 5
37348: NOT
37349: OR
37350: IFFALSE 37354
// exit ;
37352: GO 37450
// if GetTaskList ( unit ) then
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 437
37363: IFFALSE 37450
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37365: LD_STRING e
37367: PUSH
37368: LD_VAR 0 1
37372: PPUSH
37373: CALL_OW 437
37377: PUSH
37378: LD_INT 1
37380: ARRAY
37381: PUSH
37382: LD_INT 1
37384: ARRAY
37385: EQUAL
37386: IFFALSE 37413
37388: PUSH
37389: LD_VAR 0 4
37393: PUSH
37394: LD_VAR 0 1
37398: PPUSH
37399: CALL_OW 437
37403: PUSH
37404: LD_INT 1
37406: ARRAY
37407: PUSH
37408: LD_INT 2
37410: ARRAY
37411: EQUAL
37412: AND
37413: IFFALSE 37440
37415: PUSH
37416: LD_VAR 0 5
37420: PUSH
37421: LD_VAR 0 1
37425: PPUSH
37426: CALL_OW 437
37430: PUSH
37431: LD_INT 1
37433: ARRAY
37434: PUSH
37435: LD_INT 3
37437: ARRAY
37438: EQUAL
37439: AND
37440: IFFALSE 37450
// result := true end ;
37442: LD_ADDR_VAR 0 3
37446: PUSH
37447: LD_INT 1
37449: ST_TO_ADDR
// end ;
37450: LD_VAR 0 3
37454: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37455: LD_INT 0
37457: PPUSH
// result := false ;
37458: LD_ADDR_VAR 0 4
37462: PUSH
37463: LD_INT 0
37465: ST_TO_ADDR
// if GetTaskList ( unit ) then
37466: LD_VAR 0 1
37470: PPUSH
37471: CALL_OW 437
37475: IFFALSE 37562
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37477: LD_STRING M
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 437
37489: PUSH
37490: LD_INT 1
37492: ARRAY
37493: PUSH
37494: LD_INT 1
37496: ARRAY
37497: EQUAL
37498: IFFALSE 37525
37500: PUSH
37501: LD_VAR 0 2
37505: PUSH
37506: LD_VAR 0 1
37510: PPUSH
37511: CALL_OW 437
37515: PUSH
37516: LD_INT 1
37518: ARRAY
37519: PUSH
37520: LD_INT 2
37522: ARRAY
37523: EQUAL
37524: AND
37525: IFFALSE 37552
37527: PUSH
37528: LD_VAR 0 3
37532: PUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 437
37542: PUSH
37543: LD_INT 1
37545: ARRAY
37546: PUSH
37547: LD_INT 3
37549: ARRAY
37550: EQUAL
37551: AND
37552: IFFALSE 37562
// result := true ;
37554: LD_ADDR_VAR 0 4
37558: PUSH
37559: LD_INT 1
37561: ST_TO_ADDR
// end ; end ;
37562: LD_VAR 0 4
37566: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37567: LD_INT 0
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
// if not unit or not area then
37573: LD_VAR 0 1
37577: NOT
37578: IFTRUE 37587
37580: PUSH
37581: LD_VAR 0 2
37585: NOT
37586: OR
37587: IFFALSE 37591
// exit ;
37589: GO 37767
// tmp := AreaToList ( area , i ) ;
37591: LD_ADDR_VAR 0 6
37595: PUSH
37596: LD_VAR 0 2
37600: PPUSH
37601: LD_VAR 0 5
37605: PPUSH
37606: CALL_OW 517
37610: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37611: LD_ADDR_VAR 0 5
37615: PUSH
37616: DOUBLE
37617: LD_INT 1
37619: DEC
37620: ST_TO_ADDR
37621: LD_VAR 0 6
37625: PUSH
37626: LD_INT 1
37628: ARRAY
37629: PUSH
37630: FOR_TO
37631: IFFALSE 37765
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37633: LD_ADDR_VAR 0 7
37637: PUSH
37638: LD_VAR 0 6
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PUSH
37647: LD_VAR 0 5
37651: ARRAY
37652: PUSH
37653: LD_VAR 0 6
37657: PUSH
37658: LD_INT 2
37660: ARRAY
37661: PUSH
37662: LD_VAR 0 5
37666: ARRAY
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37672: LD_INT 92
37674: PUSH
37675: LD_VAR 0 7
37679: PUSH
37680: LD_INT 1
37682: ARRAY
37683: PUSH
37684: LD_VAR 0 7
37688: PUSH
37689: LD_INT 2
37691: ARRAY
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: PPUSH
37702: CALL_OW 69
37706: PUSH
37707: LD_INT 0
37709: EQUAL
37710: IFFALSE 37763
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37712: LD_VAR 0 1
37716: PPUSH
37717: LD_VAR 0 7
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PPUSH
37726: LD_VAR 0 7
37730: PUSH
37731: LD_INT 2
37733: ARRAY
37734: PPUSH
37735: LD_VAR 0 3
37739: PPUSH
37740: CALL_OW 48
// result := IsPlaced ( unit ) ;
37744: LD_ADDR_VAR 0 4
37748: PUSH
37749: LD_VAR 0 1
37753: PPUSH
37754: CALL_OW 305
37758: ST_TO_ADDR
// exit ;
37759: POP
37760: POP
37761: GO 37767
// end ; end ;
37763: GO 37630
37765: POP
37766: POP
// end ;
37767: LD_VAR 0 4
37771: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37772: LD_INT 0
37774: PPUSH
37775: PPUSH
37776: PPUSH
// if not side or side > 8 then
37777: LD_VAR 0 1
37781: NOT
37782: IFTRUE 37794
37784: PUSH
37785: LD_VAR 0 1
37789: PUSH
37790: LD_INT 8
37792: GREATER
37793: OR
37794: IFFALSE 37798
// exit ;
37796: GO 37985
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37798: LD_ADDR_VAR 0 4
37802: PUSH
37803: LD_INT 22
37805: PUSH
37806: LD_VAR 0 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 21
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PPUSH
37829: CALL_OW 69
37833: ST_TO_ADDR
// if not tmp then
37834: LD_VAR 0 4
37838: NOT
37839: IFFALSE 37843
// exit ;
37841: GO 37985
// enable_addtolog := true ;
37843: LD_ADDR_OWVAR 81
37847: PUSH
37848: LD_INT 1
37850: ST_TO_ADDR
// AddToLog ( [ ) ;
37851: LD_STRING [
37853: PPUSH
37854: CALL_OW 561
// for i in tmp do
37858: LD_ADDR_VAR 0 3
37862: PUSH
37863: LD_VAR 0 4
37867: PUSH
37868: FOR_IN
37869: IFFALSE 37976
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37871: LD_STRING [
37873: PUSH
37874: LD_VAR 0 3
37878: PPUSH
37879: CALL_OW 266
37883: STR
37884: PUSH
37885: LD_STRING , 
37887: STR
37888: PUSH
37889: LD_VAR 0 3
37893: PPUSH
37894: CALL_OW 250
37898: STR
37899: PUSH
37900: LD_STRING , 
37902: STR
37903: PUSH
37904: LD_VAR 0 3
37908: PPUSH
37909: CALL_OW 251
37913: STR
37914: PUSH
37915: LD_STRING , 
37917: STR
37918: PUSH
37919: LD_VAR 0 3
37923: PPUSH
37924: CALL_OW 254
37928: STR
37929: PUSH
37930: LD_STRING , 
37932: STR
37933: PUSH
37934: LD_VAR 0 3
37938: PPUSH
37939: LD_INT 1
37941: PPUSH
37942: CALL_OW 268
37946: STR
37947: PUSH
37948: LD_STRING , 
37950: STR
37951: PUSH
37952: LD_VAR 0 3
37956: PPUSH
37957: LD_INT 2
37959: PPUSH
37960: CALL_OW 268
37964: STR
37965: PUSH
37966: LD_STRING ],
37968: STR
37969: PPUSH
37970: CALL_OW 561
// end ;
37974: GO 37868
37976: POP
37977: POP
// AddToLog ( ]; ) ;
37978: LD_STRING ];
37980: PPUSH
37981: CALL_OW 561
// end ;
37985: LD_VAR 0 2
37989: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
// if not area or not rate or not max then
37997: LD_VAR 0 1
38001: NOT
38002: IFTRUE 38011
38004: PUSH
38005: LD_VAR 0 2
38009: NOT
38010: OR
38011: IFTRUE 38020
38013: PUSH
38014: LD_VAR 0 4
38018: NOT
38019: OR
38020: IFFALSE 38024
// exit ;
38022: GO 38213
// while 1 do
38024: LD_INT 1
38026: IFFALSE 38213
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38028: LD_ADDR_VAR 0 9
38032: PUSH
38033: LD_VAR 0 1
38037: PPUSH
38038: LD_INT 1
38040: PPUSH
38041: CALL_OW 287
38045: PUSH
38046: LD_INT 10
38048: MUL
38049: ST_TO_ADDR
// r := rate / 10 ;
38050: LD_ADDR_VAR 0 7
38054: PUSH
38055: LD_VAR 0 2
38059: PUSH
38060: LD_INT 10
38062: DIVREAL
38063: ST_TO_ADDR
// time := 1 1$00 ;
38064: LD_ADDR_VAR 0 8
38068: PUSH
38069: LD_INT 2100
38071: ST_TO_ADDR
// if amount < min then
38072: LD_VAR 0 9
38076: PUSH
38077: LD_VAR 0 3
38081: LESS
38082: IFFALSE 38100
// r := r * 2 else
38084: LD_ADDR_VAR 0 7
38088: PUSH
38089: LD_VAR 0 7
38093: PUSH
38094: LD_INT 2
38096: MUL
38097: ST_TO_ADDR
38098: GO 38126
// if amount > max then
38100: LD_VAR 0 9
38104: PUSH
38105: LD_VAR 0 4
38109: GREATER
38110: IFFALSE 38126
// r := r / 2 ;
38112: LD_ADDR_VAR 0 7
38116: PUSH
38117: LD_VAR 0 7
38121: PUSH
38122: LD_INT 2
38124: DIVREAL
38125: ST_TO_ADDR
// time := time / r ;
38126: LD_ADDR_VAR 0 8
38130: PUSH
38131: LD_VAR 0 8
38135: PUSH
38136: LD_VAR 0 7
38140: DIVREAL
38141: ST_TO_ADDR
// if time < 0 then
38142: LD_VAR 0 8
38146: PUSH
38147: LD_INT 0
38149: LESS
38150: IFFALSE 38167
// time := time * - 1 ;
38152: LD_ADDR_VAR 0 8
38156: PUSH
38157: LD_VAR 0 8
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: MUL
38166: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38167: LD_VAR 0 8
38171: PUSH
38172: LD_INT 35
38174: PPUSH
38175: LD_INT 875
38177: PPUSH
38178: CALL_OW 12
38182: PLUS
38183: PPUSH
38184: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38188: LD_INT 1
38190: PPUSH
38191: LD_INT 5
38193: PPUSH
38194: CALL_OW 12
38198: PPUSH
38199: LD_VAR 0 1
38203: PPUSH
38204: LD_INT 1
38206: PPUSH
38207: CALL_OW 55
// end ;
38211: GO 38024
// end ;
38213: LD_VAR 0 5
38217: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38218: LD_INT 0
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
// if not turrets or not factories then
38228: LD_VAR 0 1
38232: NOT
38233: IFTRUE 38242
38235: PUSH
38236: LD_VAR 0 2
38240: NOT
38241: OR
38242: IFFALSE 38246
// exit ;
38244: GO 38553
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38246: LD_ADDR_VAR 0 10
38250: PUSH
38251: LD_INT 5
38253: PUSH
38254: LD_INT 6
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: LD_INT 4
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: LD_INT 5
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 24
38288: PUSH
38289: LD_INT 25
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 23
38298: PUSH
38299: LD_INT 27
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 42
38312: PUSH
38313: LD_INT 43
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 44
38322: PUSH
38323: LD_INT 46
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 45
38332: PUSH
38333: LD_INT 47
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: ST_TO_ADDR
// result := [ ] ;
38350: LD_ADDR_VAR 0 3
38354: PUSH
38355: EMPTY
38356: ST_TO_ADDR
// for i in turrets do
38357: LD_ADDR_VAR 0 4
38361: PUSH
38362: LD_VAR 0 1
38366: PUSH
38367: FOR_IN
38368: IFFALSE 38551
// begin nat := GetNation ( i ) ;
38370: LD_ADDR_VAR 0 7
38374: PUSH
38375: LD_VAR 0 4
38379: PPUSH
38380: CALL_OW 248
38384: ST_TO_ADDR
// weapon := 0 ;
38385: LD_ADDR_VAR 0 8
38389: PUSH
38390: LD_INT 0
38392: ST_TO_ADDR
// if not nat then
38393: LD_VAR 0 7
38397: NOT
38398: IFFALSE 38402
// continue ;
38400: GO 38367
// for j in list [ nat ] do
38402: LD_ADDR_VAR 0 5
38406: PUSH
38407: LD_VAR 0 10
38411: PUSH
38412: LD_VAR 0 7
38416: ARRAY
38417: PUSH
38418: FOR_IN
38419: IFFALSE 38460
// if GetBWeapon ( i ) = j [ 1 ] then
38421: LD_VAR 0 4
38425: PPUSH
38426: CALL_OW 269
38430: PUSH
38431: LD_VAR 0 5
38435: PUSH
38436: LD_INT 1
38438: ARRAY
38439: EQUAL
38440: IFFALSE 38458
// begin weapon := j [ 2 ] ;
38442: LD_ADDR_VAR 0 8
38446: PUSH
38447: LD_VAR 0 5
38451: PUSH
38452: LD_INT 2
38454: ARRAY
38455: ST_TO_ADDR
// break ;
38456: GO 38460
// end ;
38458: GO 38418
38460: POP
38461: POP
// if not weapon then
38462: LD_VAR 0 8
38466: NOT
38467: IFFALSE 38471
// continue ;
38469: GO 38367
// for k in factories do
38471: LD_ADDR_VAR 0 6
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: FOR_IN
38482: IFFALSE 38547
// begin weapons := AvailableWeaponList ( k ) ;
38484: LD_ADDR_VAR 0 9
38488: PUSH
38489: LD_VAR 0 6
38493: PPUSH
38494: CALL_OW 478
38498: ST_TO_ADDR
// if not weapons then
38499: LD_VAR 0 9
38503: NOT
38504: IFFALSE 38508
// continue ;
38506: GO 38481
// if weapon in weapons then
38508: LD_VAR 0 8
38512: PUSH
38513: LD_VAR 0 9
38517: IN
38518: IFFALSE 38545
// begin result := [ i , weapon ] ;
38520: LD_ADDR_VAR 0 3
38524: PUSH
38525: LD_VAR 0 4
38529: PUSH
38530: LD_VAR 0 8
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// exit ;
38539: POP
38540: POP
38541: POP
38542: POP
38543: GO 38553
// end ; end ;
38545: GO 38481
38547: POP
38548: POP
// end ;
38549: GO 38367
38551: POP
38552: POP
// end ;
38553: LD_VAR 0 3
38557: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38558: LD_INT 0
38560: PPUSH
// if not side or side > 8 then
38561: LD_VAR 0 3
38565: NOT
38566: IFTRUE 38578
38568: PUSH
38569: LD_VAR 0 3
38573: PUSH
38574: LD_INT 8
38576: GREATER
38577: OR
38578: IFFALSE 38582
// exit ;
38580: GO 38641
// if not range then
38582: LD_VAR 0 4
38586: NOT
38587: IFFALSE 38598
// range := - 12 ;
38589: LD_ADDR_VAR 0 4
38593: PUSH
38594: LD_INT 12
38596: NEG
38597: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_VAR 0 2
38607: PPUSH
38608: LD_VAR 0 3
38612: PPUSH
38613: LD_VAR 0 4
38617: PPUSH
38618: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38622: LD_VAR 0 1
38626: PPUSH
38627: LD_VAR 0 2
38631: PPUSH
38632: LD_VAR 0 3
38636: PPUSH
38637: CALL_OW 331
// end ;
38641: LD_VAR 0 5
38645: RET
// export function Video ( mode ) ; begin
38646: LD_INT 0
38648: PPUSH
// ingame_video = mode ;
38649: LD_ADDR_OWVAR 52
38653: PUSH
38654: LD_VAR 0 1
38658: ST_TO_ADDR
// interface_hidden = mode ;
38659: LD_ADDR_OWVAR 54
38663: PUSH
38664: LD_VAR 0 1
38668: ST_TO_ADDR
// end ;
38669: LD_VAR 0 2
38673: RET
// export function Join ( array , element ) ; begin
38674: LD_INT 0
38676: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38677: LD_ADDR_VAR 0 3
38681: PUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: LD_VAR 0 1
38691: PUSH
38692: LD_INT 1
38694: PLUS
38695: PPUSH
38696: LD_VAR 0 2
38700: PPUSH
38701: CALL_OW 1
38705: ST_TO_ADDR
// end ;
38706: LD_VAR 0 3
38710: RET
// export function JoinUnion ( array , element ) ; begin
38711: LD_INT 0
38713: PPUSH
// result := array union element ;
38714: LD_ADDR_VAR 0 3
38718: PUSH
38719: LD_VAR 0 1
38723: PUSH
38724: LD_VAR 0 2
38728: UNION
38729: ST_TO_ADDR
// end ;
38730: LD_VAR 0 3
38734: RET
// export function GetBehemoths ( side ) ; begin
38735: LD_INT 0
38737: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38738: LD_ADDR_VAR 0 2
38742: PUSH
38743: LD_INT 22
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 31
38757: PUSH
38758: LD_INT 25
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PPUSH
38769: CALL_OW 69
38773: ST_TO_ADDR
// end ;
38774: LD_VAR 0 2
38778: RET
// export function Shuffle ( array ) ; var i , index ; begin
38779: LD_INT 0
38781: PPUSH
38782: PPUSH
38783: PPUSH
// result := [ ] ;
38784: LD_ADDR_VAR 0 2
38788: PUSH
38789: EMPTY
38790: ST_TO_ADDR
// if not array then
38791: LD_VAR 0 1
38795: NOT
38796: IFFALSE 38800
// exit ;
38798: GO 38899
// Randomize ;
38800: CALL_OW 10
// for i = array downto 1 do
38804: LD_ADDR_VAR 0 3
38808: PUSH
38809: DOUBLE
38810: LD_VAR 0 1
38814: INC
38815: ST_TO_ADDR
38816: LD_INT 1
38818: PUSH
38819: FOR_DOWNTO
38820: IFFALSE 38897
// begin index := rand ( 1 , array ) ;
38822: LD_ADDR_VAR 0 4
38826: PUSH
38827: LD_INT 1
38829: PPUSH
38830: LD_VAR 0 1
38834: PPUSH
38835: CALL_OW 12
38839: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38840: LD_ADDR_VAR 0 2
38844: PUSH
38845: LD_VAR 0 2
38849: PPUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_INT 1
38857: PLUS
38858: PPUSH
38859: LD_VAR 0 1
38863: PUSH
38864: LD_VAR 0 4
38868: ARRAY
38869: PPUSH
38870: CALL_OW 2
38874: ST_TO_ADDR
// array := Delete ( array , index ) ;
38875: LD_ADDR_VAR 0 1
38879: PUSH
38880: LD_VAR 0 1
38884: PPUSH
38885: LD_VAR 0 4
38889: PPUSH
38890: CALL_OW 3
38894: ST_TO_ADDR
// end ;
38895: GO 38819
38897: POP
38898: POP
// end ;
38899: LD_VAR 0 2
38903: RET
// export function GetBaseMaterials ( base ) ; begin
38904: LD_INT 0
38906: PPUSH
// result := [ 0 , 0 , 0 ] ;
38907: LD_ADDR_VAR 0 2
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// if not base then
38926: LD_VAR 0 1
38930: NOT
38931: IFFALSE 38935
// exit ;
38933: GO 38984
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38935: LD_ADDR_VAR 0 2
38939: PUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: LD_INT 1
38947: PPUSH
38948: CALL_OW 275
38952: PUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: LD_INT 2
38960: PPUSH
38961: CALL_OW 275
38965: PUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: LD_INT 3
38973: PPUSH
38974: CALL_OW 275
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// end ;
38984: LD_VAR 0 2
38988: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38989: LD_INT 0
38991: PPUSH
38992: PPUSH
// result := array ;
38993: LD_ADDR_VAR 0 3
38997: PUSH
38998: LD_VAR 0 1
39002: ST_TO_ADDR
// if size >= result then
39003: LD_VAR 0 2
39007: PUSH
39008: LD_VAR 0 3
39012: GREATEREQUAL
39013: IFFALSE 39017
// exit ;
39015: GO 39067
// if size then
39017: LD_VAR 0 2
39021: IFFALSE 39067
// for i := array downto size do
39023: LD_ADDR_VAR 0 4
39027: PUSH
39028: DOUBLE
39029: LD_VAR 0 1
39033: INC
39034: ST_TO_ADDR
39035: LD_VAR 0 2
39039: PUSH
39040: FOR_DOWNTO
39041: IFFALSE 39065
// result := Delete ( result , result ) ;
39043: LD_ADDR_VAR 0 3
39047: PUSH
39048: LD_VAR 0 3
39052: PPUSH
39053: LD_VAR 0 3
39057: PPUSH
39058: CALL_OW 3
39062: ST_TO_ADDR
39063: GO 39040
39065: POP
39066: POP
// end ;
39067: LD_VAR 0 3
39071: RET
// export function ComExit ( unit ) ; var tmp ; begin
39072: LD_INT 0
39074: PPUSH
39075: PPUSH
// if not IsInUnit ( unit ) then
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 310
39085: NOT
39086: IFFALSE 39090
// exit ;
39088: GO 39150
// tmp := IsInUnit ( unit ) ;
39090: LD_ADDR_VAR 0 3
39094: PUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 310
39104: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39105: LD_VAR 0 3
39109: PPUSH
39110: CALL_OW 247
39114: PUSH
39115: LD_INT 2
39117: EQUAL
39118: IFFALSE 39131
// ComExitVehicle ( unit ) else
39120: LD_VAR 0 1
39124: PPUSH
39125: CALL_OW 121
39129: GO 39140
// ComExitBuilding ( unit ) ;
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 122
// result := tmp ;
39140: LD_ADDR_VAR 0 2
39144: PUSH
39145: LD_VAR 0 3
39149: ST_TO_ADDR
// end ;
39150: LD_VAR 0 2
39154: RET
// export function ComExitAll ( units ) ; var i ; begin
39155: LD_INT 0
39157: PPUSH
39158: PPUSH
// if not units then
39159: LD_VAR 0 1
39163: NOT
39164: IFFALSE 39168
// exit ;
39166: GO 39194
// for i in units do
39168: LD_ADDR_VAR 0 3
39172: PUSH
39173: LD_VAR 0 1
39177: PUSH
39178: FOR_IN
39179: IFFALSE 39192
// ComExit ( i ) ;
39181: LD_VAR 0 3
39185: PPUSH
39186: CALL 39072 0 1
39190: GO 39178
39192: POP
39193: POP
// end ;
39194: LD_VAR 0 2
39198: RET
// export function ResetHc ; begin
39199: LD_INT 0
39201: PPUSH
// InitHc ;
39202: CALL_OW 19
// hc_importance := 0 ;
39206: LD_ADDR_OWVAR 32
39210: PUSH
39211: LD_INT 0
39213: ST_TO_ADDR
// end ;
39214: LD_VAR 0 1
39218: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39219: LD_INT 0
39221: PPUSH
39222: PPUSH
39223: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39224: LD_ADDR_VAR 0 6
39228: PUSH
39229: LD_VAR 0 1
39233: PUSH
39234: LD_VAR 0 3
39238: PLUS
39239: PUSH
39240: LD_INT 2
39242: DIV
39243: ST_TO_ADDR
// if _x < 0 then
39244: LD_VAR 0 6
39248: PUSH
39249: LD_INT 0
39251: LESS
39252: IFFALSE 39269
// _x := _x * - 1 ;
39254: LD_ADDR_VAR 0 6
39258: PUSH
39259: LD_VAR 0 6
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: MUL
39268: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39269: LD_ADDR_VAR 0 7
39273: PUSH
39274: LD_VAR 0 2
39278: PUSH
39279: LD_VAR 0 4
39283: PLUS
39284: PUSH
39285: LD_INT 2
39287: DIV
39288: ST_TO_ADDR
// if _y < 0 then
39289: LD_VAR 0 7
39293: PUSH
39294: LD_INT 0
39296: LESS
39297: IFFALSE 39314
// _y := _y * - 1 ;
39299: LD_ADDR_VAR 0 7
39303: PUSH
39304: LD_VAR 0 7
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: MUL
39313: ST_TO_ADDR
// result := [ _x , _y ] ;
39314: LD_ADDR_VAR 0 5
39318: PUSH
39319: LD_VAR 0 6
39323: PUSH
39324: LD_VAR 0 7
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// end ;
39333: LD_VAR 0 5
39337: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39338: LD_INT 0
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
// task := GetTaskList ( unit ) ;
39344: LD_ADDR_VAR 0 7
39348: PUSH
39349: LD_VAR 0 1
39353: PPUSH
39354: CALL_OW 437
39358: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39359: LD_VAR 0 7
39363: NOT
39364: IFFALSE 39383
39366: PUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: LD_VAR 0 2
39376: PPUSH
39377: CALL_OW 308
39381: NOT
39382: AND
39383: IFFALSE 39387
// exit ;
39385: GO 39505
// if IsInArea ( unit , area ) then
39387: LD_VAR 0 1
39391: PPUSH
39392: LD_VAR 0 2
39396: PPUSH
39397: CALL_OW 308
39401: IFFALSE 39419
// begin ComMoveToArea ( unit , goAway ) ;
39403: LD_VAR 0 1
39407: PPUSH
39408: LD_VAR 0 3
39412: PPUSH
39413: CALL_OW 113
// exit ;
39417: GO 39505
// end ; if task [ 1 ] [ 1 ] <> M then
39419: LD_VAR 0 7
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: PUSH
39428: LD_INT 1
39430: ARRAY
39431: PUSH
39432: LD_STRING M
39434: NONEQUAL
39435: IFFALSE 39439
// exit ;
39437: GO 39505
// x := task [ 1 ] [ 2 ] ;
39439: LD_ADDR_VAR 0 5
39443: PUSH
39444: LD_VAR 0 7
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: PUSH
39453: LD_INT 2
39455: ARRAY
39456: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39457: LD_ADDR_VAR 0 6
39461: PUSH
39462: LD_VAR 0 7
39466: PUSH
39467: LD_INT 1
39469: ARRAY
39470: PUSH
39471: LD_INT 3
39473: ARRAY
39474: ST_TO_ADDR
// if InArea ( x , y , area ) then
39475: LD_VAR 0 5
39479: PPUSH
39480: LD_VAR 0 6
39484: PPUSH
39485: LD_VAR 0 2
39489: PPUSH
39490: CALL_OW 309
39494: IFFALSE 39505
// ComStop ( unit ) ;
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 141
// end ;
39505: LD_VAR 0 4
39509: RET
// export function Abs ( value ) ; begin
39510: LD_INT 0
39512: PPUSH
// result := value ;
39513: LD_ADDR_VAR 0 2
39517: PUSH
39518: LD_VAR 0 1
39522: ST_TO_ADDR
// if value < 0 then
39523: LD_VAR 0 1
39527: PUSH
39528: LD_INT 0
39530: LESS
39531: IFFALSE 39548
// result := value * - 1 ;
39533: LD_ADDR_VAR 0 2
39537: PUSH
39538: LD_VAR 0 1
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: MUL
39547: ST_TO_ADDR
// end ;
39548: LD_VAR 0 2
39552: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39553: LD_INT 0
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
// if not unit or not building then
39563: LD_VAR 0 1
39567: NOT
39568: IFTRUE 39577
39570: PUSH
39571: LD_VAR 0 2
39575: NOT
39576: OR
39577: IFFALSE 39581
// exit ;
39579: GO 39809
// x := GetX ( building ) ;
39581: LD_ADDR_VAR 0 4
39585: PUSH
39586: LD_VAR 0 2
39590: PPUSH
39591: CALL_OW 250
39595: ST_TO_ADDR
// y := GetY ( building ) ;
39596: LD_ADDR_VAR 0 6
39600: PUSH
39601: LD_VAR 0 2
39605: PPUSH
39606: CALL_OW 251
39610: ST_TO_ADDR
// d := GetDir ( building ) ;
39611: LD_ADDR_VAR 0 8
39615: PUSH
39616: LD_VAR 0 2
39620: PPUSH
39621: CALL_OW 254
39625: ST_TO_ADDR
// r := 4 ;
39626: LD_ADDR_VAR 0 9
39630: PUSH
39631: LD_INT 4
39633: ST_TO_ADDR
// for i := 1 to 5 do
39634: LD_ADDR_VAR 0 10
39638: PUSH
39639: DOUBLE
39640: LD_INT 1
39642: DEC
39643: ST_TO_ADDR
39644: LD_INT 5
39646: PUSH
39647: FOR_TO
39648: IFFALSE 39807
// begin _x := ShiftX ( x , d , r + i ) ;
39650: LD_ADDR_VAR 0 5
39654: PUSH
39655: LD_VAR 0 4
39659: PPUSH
39660: LD_VAR 0 8
39664: PPUSH
39665: LD_VAR 0 9
39669: PUSH
39670: LD_VAR 0 10
39674: PLUS
39675: PPUSH
39676: CALL_OW 272
39680: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39681: LD_ADDR_VAR 0 7
39685: PUSH
39686: LD_VAR 0 6
39690: PPUSH
39691: LD_VAR 0 8
39695: PPUSH
39696: LD_VAR 0 9
39700: PUSH
39701: LD_VAR 0 10
39705: PLUS
39706: PPUSH
39707: CALL_OW 273
39711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39712: LD_VAR 0 5
39716: PPUSH
39717: LD_VAR 0 7
39721: PPUSH
39722: CALL_OW 488
39726: IFFALSE 39761
39728: PUSH
39729: LD_VAR 0 5
39733: PPUSH
39734: LD_VAR 0 7
39738: PPUSH
39739: CALL_OW 428
39743: PPUSH
39744: CALL_OW 247
39748: PUSH
39749: LD_INT 3
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: IN
39759: NOT
39760: AND
39761: IFFALSE 39805
// begin ComMoveXY ( unit , _x , _y ) ;
39763: LD_VAR 0 1
39767: PPUSH
39768: LD_VAR 0 5
39772: PPUSH
39773: LD_VAR 0 7
39777: PPUSH
39778: CALL_OW 111
// result := [ _x , _y ] ;
39782: LD_ADDR_VAR 0 3
39786: PUSH
39787: LD_VAR 0 5
39791: PUSH
39792: LD_VAR 0 7
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: ST_TO_ADDR
// exit ;
39801: POP
39802: POP
39803: GO 39809
// end ; end ;
39805: GO 39647
39807: POP
39808: POP
// end ;
39809: LD_VAR 0 3
39813: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
39818: PPUSH
// result := 0 ;
39819: LD_ADDR_VAR 0 3
39823: PUSH
39824: LD_INT 0
39826: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39827: LD_VAR 0 1
39831: PUSH
39832: LD_INT 0
39834: LESS
39835: IFTRUE 39847
39837: PUSH
39838: LD_VAR 0 1
39842: PUSH
39843: LD_INT 8
39845: GREATER
39846: OR
39847: IFTRUE 39859
39849: PUSH
39850: LD_VAR 0 2
39854: PUSH
39855: LD_INT 0
39857: LESS
39858: OR
39859: IFTRUE 39871
39861: PUSH
39862: LD_VAR 0 2
39866: PUSH
39867: LD_INT 8
39869: GREATER
39870: OR
39871: IFFALSE 39875
// exit ;
39873: GO 39950
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39875: LD_ADDR_VAR 0 4
39879: PUSH
39880: LD_INT 22
39882: PUSH
39883: LD_VAR 0 2
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PPUSH
39892: CALL_OW 69
39896: PUSH
39897: FOR_IN
39898: IFFALSE 39948
// begin un := UnitShoot ( i ) ;
39900: LD_ADDR_VAR 0 5
39904: PUSH
39905: LD_VAR 0 4
39909: PPUSH
39910: CALL_OW 504
39914: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39915: LD_VAR 0 5
39919: PPUSH
39920: CALL_OW 255
39924: PUSH
39925: LD_VAR 0 1
39929: EQUAL
39930: IFFALSE 39946
// begin result := un ;
39932: LD_ADDR_VAR 0 3
39936: PUSH
39937: LD_VAR 0 5
39941: ST_TO_ADDR
// exit ;
39942: POP
39943: POP
39944: GO 39950
// end ; end ;
39946: GO 39897
39948: POP
39949: POP
// end ;
39950: LD_VAR 0 3
39954: RET
// export function GetCargoBay ( units ) ; begin
39955: LD_INT 0
39957: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39958: LD_ADDR_VAR 0 2
39962: PUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 34
39973: PUSH
39974: LD_INT 12
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 34
39983: PUSH
39984: LD_INT 51
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 34
39993: PUSH
39994: LD_INT 32
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 34
40003: PUSH
40004: LD_INT 89
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: PPUSH
40018: CALL_OW 72
40022: ST_TO_ADDR
// end ;
40023: LD_VAR 0 2
40027: RET
// export function Negate ( value ) ; begin
40028: LD_INT 0
40030: PPUSH
// result := not value ;
40031: LD_ADDR_VAR 0 2
40035: PUSH
40036: LD_VAR 0 1
40040: NOT
40041: ST_TO_ADDR
// end ;
40042: LD_VAR 0 2
40046: RET
// export function Inc ( value ) ; begin
40047: LD_INT 0
40049: PPUSH
// result := value + 1 ;
40050: LD_ADDR_VAR 0 2
40054: PUSH
40055: LD_VAR 0 1
40059: PUSH
40060: LD_INT 1
40062: PLUS
40063: ST_TO_ADDR
// end ;
40064: LD_VAR 0 2
40068: RET
// export function Dec ( value ) ; begin
40069: LD_INT 0
40071: PPUSH
// result := value - 1 ;
40072: LD_ADDR_VAR 0 2
40076: PUSH
40077: LD_VAR 0 1
40081: PUSH
40082: LD_INT 1
40084: MINUS
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 2
40090: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40091: LD_INT 0
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
40100: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40101: LD_VAR 0 1
40105: PPUSH
40106: LD_VAR 0 2
40110: PPUSH
40111: CALL_OW 488
40115: NOT
40116: IFTRUE 40135
40118: PUSH
40119: LD_VAR 0 3
40123: PPUSH
40124: LD_VAR 0 4
40128: PPUSH
40129: CALL_OW 488
40133: NOT
40134: OR
40135: IFFALSE 40148
// begin result := - 1 ;
40137: LD_ADDR_VAR 0 5
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: ST_TO_ADDR
// exit ;
40146: GO 40383
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40148: LD_ADDR_VAR 0 12
40152: PUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: LD_VAR 0 2
40162: PPUSH
40163: LD_VAR 0 3
40167: PPUSH
40168: LD_VAR 0 4
40172: PPUSH
40173: CALL 39219 0 4
40177: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40178: LD_ADDR_VAR 0 11
40182: PUSH
40183: LD_VAR 0 1
40187: PPUSH
40188: LD_VAR 0 2
40192: PPUSH
40193: LD_VAR 0 12
40197: PUSH
40198: LD_INT 1
40200: ARRAY
40201: PPUSH
40202: LD_VAR 0 12
40206: PUSH
40207: LD_INT 2
40209: ARRAY
40210: PPUSH
40211: CALL_OW 298
40215: ST_TO_ADDR
// distance := 9999 ;
40216: LD_ADDR_VAR 0 10
40220: PUSH
40221: LD_INT 9999
40223: ST_TO_ADDR
// for i := 0 to 5 do
40224: LD_ADDR_VAR 0 6
40228: PUSH
40229: DOUBLE
40230: LD_INT 0
40232: DEC
40233: ST_TO_ADDR
40234: LD_INT 5
40236: PUSH
40237: FOR_TO
40238: IFFALSE 40381
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40240: LD_ADDR_VAR 0 7
40244: PUSH
40245: LD_VAR 0 1
40249: PPUSH
40250: LD_VAR 0 6
40254: PPUSH
40255: LD_VAR 0 11
40259: PPUSH
40260: CALL_OW 272
40264: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40265: LD_ADDR_VAR 0 8
40269: PUSH
40270: LD_VAR 0 2
40274: PPUSH
40275: LD_VAR 0 6
40279: PPUSH
40280: LD_VAR 0 11
40284: PPUSH
40285: CALL_OW 273
40289: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40290: LD_VAR 0 7
40294: PPUSH
40295: LD_VAR 0 8
40299: PPUSH
40300: CALL_OW 488
40304: NOT
40305: IFFALSE 40309
// continue ;
40307: GO 40237
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40309: LD_ADDR_VAR 0 9
40313: PUSH
40314: LD_VAR 0 12
40318: PUSH
40319: LD_INT 1
40321: ARRAY
40322: PPUSH
40323: LD_VAR 0 12
40327: PUSH
40328: LD_INT 2
40330: ARRAY
40331: PPUSH
40332: LD_VAR 0 7
40336: PPUSH
40337: LD_VAR 0 8
40341: PPUSH
40342: CALL_OW 298
40346: ST_TO_ADDR
// if tmp < distance then
40347: LD_VAR 0 9
40351: PUSH
40352: LD_VAR 0 10
40356: LESS
40357: IFFALSE 40379
// begin result := i ;
40359: LD_ADDR_VAR 0 5
40363: PUSH
40364: LD_VAR 0 6
40368: ST_TO_ADDR
// distance := tmp ;
40369: LD_ADDR_VAR 0 10
40373: PUSH
40374: LD_VAR 0 9
40378: ST_TO_ADDR
// end ; end ;
40379: GO 40237
40381: POP
40382: POP
// end ;
40383: LD_VAR 0 5
40387: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40388: LD_INT 0
40390: PPUSH
40391: PPUSH
// if not driver or not IsInUnit ( driver ) then
40392: LD_VAR 0 1
40396: NOT
40397: IFTRUE 40411
40399: PUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: CALL_OW 310
40409: NOT
40410: OR
40411: IFFALSE 40415
// exit ;
40413: GO 40505
// vehicle := IsInUnit ( driver ) ;
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_VAR 0 1
40424: PPUSH
40425: CALL_OW 310
40429: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40430: LD_VAR 0 1
40434: PPUSH
40435: LD_STRING \
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: PUSH
40465: LD_STRING E
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_VAR 0 3
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PPUSH
40501: CALL_OW 446
// end ;
40505: LD_VAR 0 2
40509: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40510: LD_INT 0
40512: PPUSH
40513: PPUSH
// if not driver or not IsInUnit ( driver ) then
40514: LD_VAR 0 1
40518: NOT
40519: IFTRUE 40533
40521: PUSH
40522: LD_VAR 0 1
40526: PPUSH
40527: CALL_OW 310
40531: NOT
40532: OR
40533: IFFALSE 40537
// exit ;
40535: GO 40627
// vehicle := IsInUnit ( driver ) ;
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_VAR 0 1
40546: PPUSH
40547: CALL_OW 310
40551: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40552: LD_VAR 0 1
40556: PPUSH
40557: LD_STRING \
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: PUSH
40587: LD_STRING E
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_VAR 0 3
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PPUSH
40623: CALL_OW 447
// end ;
40627: LD_VAR 0 2
40631: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40632: LD_INT 0
40634: PPUSH
40635: PPUSH
40636: PPUSH
// tmp := [ ] ;
40637: LD_ADDR_VAR 0 5
40641: PUSH
40642: EMPTY
40643: ST_TO_ADDR
// for i in units do
40644: LD_ADDR_VAR 0 4
40648: PUSH
40649: LD_VAR 0 1
40653: PUSH
40654: FOR_IN
40655: IFFALSE 40693
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40657: LD_ADDR_VAR 0 5
40661: PUSH
40662: LD_VAR 0 5
40666: PPUSH
40667: LD_VAR 0 5
40671: PUSH
40672: LD_INT 1
40674: PLUS
40675: PPUSH
40676: LD_VAR 0 4
40680: PPUSH
40681: CALL_OW 256
40685: PPUSH
40686: CALL_OW 2
40690: ST_TO_ADDR
40691: GO 40654
40693: POP
40694: POP
// if not tmp then
40695: LD_VAR 0 5
40699: NOT
40700: IFFALSE 40704
// exit ;
40702: GO 40752
// if asc then
40704: LD_VAR 0 2
40708: IFFALSE 40732
// result := SortListByListAsc ( units , tmp ) else
40710: LD_ADDR_VAR 0 3
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: LD_VAR 0 5
40724: PPUSH
40725: CALL_OW 76
40729: ST_TO_ADDR
40730: GO 40752
// result := SortListByListDesc ( units , tmp ) ;
40732: LD_ADDR_VAR 0 3
40736: PUSH
40737: LD_VAR 0 1
40741: PPUSH
40742: LD_VAR 0 5
40746: PPUSH
40747: CALL_OW 77
40751: ST_TO_ADDR
// end ;
40752: LD_VAR 0 3
40756: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40757: LD_INT 0
40759: PPUSH
40760: PPUSH
// task := GetTaskList ( mech ) ;
40761: LD_ADDR_VAR 0 4
40765: PUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: CALL_OW 437
40775: ST_TO_ADDR
// if not task then
40776: LD_VAR 0 4
40780: NOT
40781: IFFALSE 40785
// exit ;
40783: GO 40829
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40785: LD_ADDR_VAR 0 3
40789: PUSH
40790: LD_VAR 0 4
40794: PUSH
40795: LD_INT 1
40797: ARRAY
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PUSH
40803: LD_STRING r
40805: EQUAL
40806: IFFALSE 40828
40808: PUSH
40809: LD_VAR 0 4
40813: PUSH
40814: LD_INT 1
40816: ARRAY
40817: PUSH
40818: LD_INT 4
40820: ARRAY
40821: PUSH
40822: LD_VAR 0 2
40826: EQUAL
40827: AND
40828: ST_TO_ADDR
// end ;
40829: LD_VAR 0 3
40833: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40834: LD_INT 0
40836: PPUSH
// SetDir ( unit , d ) ;
40837: LD_VAR 0 1
40841: PPUSH
40842: LD_VAR 0 4
40846: PPUSH
40847: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40851: LD_ADDR_VAR 0 6
40855: PUSH
40856: LD_VAR 0 1
40860: PPUSH
40861: LD_VAR 0 2
40865: PPUSH
40866: LD_VAR 0 3
40870: PPUSH
40871: LD_VAR 0 5
40875: PPUSH
40876: CALL_OW 48
40880: ST_TO_ADDR
// end ;
40881: LD_VAR 0 6
40885: RET
// export function ToNaturalNumber ( number ) ; begin
40886: LD_INT 0
40888: PPUSH
// result := number div 1 ;
40889: LD_ADDR_VAR 0 2
40893: PUSH
40894: LD_VAR 0 1
40898: PUSH
40899: LD_INT 1
40901: DIV
40902: ST_TO_ADDR
// if number < 0 then
40903: LD_VAR 0 1
40907: PUSH
40908: LD_INT 0
40910: LESS
40911: IFFALSE 40921
// result := 0 ;
40913: LD_ADDR_VAR 0 2
40917: PUSH
40918: LD_INT 0
40920: ST_TO_ADDR
// end ;
40921: LD_VAR 0 2
40925: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40926: LD_INT 0
40928: PPUSH
40929: PPUSH
40930: PPUSH
// if not buildings then
40931: LD_VAR 0 1
40935: NOT
40936: IFFALSE 40940
// exit ;
40938: GO 41055
// tmp := [ ] ;
40940: LD_ADDR_VAR 0 5
40944: PUSH
40945: EMPTY
40946: ST_TO_ADDR
// for b in buildings do
40947: LD_ADDR_VAR 0 4
40951: PUSH
40952: LD_VAR 0 1
40956: PUSH
40957: FOR_IN
40958: IFFALSE 40996
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
40960: LD_ADDR_VAR 0 5
40964: PUSH
40965: LD_VAR 0 5
40969: PPUSH
40970: LD_VAR 0 5
40974: PUSH
40975: LD_INT 1
40977: PLUS
40978: PPUSH
40979: LD_VAR 0 4
40983: PPUSH
40984: CALL_OW 266
40988: PPUSH
40989: CALL_OW 1
40993: ST_TO_ADDR
40994: GO 40957
40996: POP
40997: POP
// if not tmp then
40998: LD_VAR 0 5
41002: NOT
41003: IFFALSE 41007
// exit ;
41005: GO 41055
// if asc then
41007: LD_VAR 0 2
41011: IFFALSE 41035
// result := SortListByListAsc ( buildings , tmp ) else
41013: LD_ADDR_VAR 0 3
41017: PUSH
41018: LD_VAR 0 1
41022: PPUSH
41023: LD_VAR 0 5
41027: PPUSH
41028: CALL_OW 76
41032: ST_TO_ADDR
41033: GO 41055
// result := SortListByListDesc ( buildings , tmp ) ;
41035: LD_ADDR_VAR 0 3
41039: PUSH
41040: LD_VAR 0 1
41044: PPUSH
41045: LD_VAR 0 5
41049: PPUSH
41050: CALL_OW 77
41054: ST_TO_ADDR
// end ;
41055: LD_VAR 0 3
41059: RET
// export function SortByClass ( units , class ) ; var un ; begin
41060: LD_INT 0
41062: PPUSH
41063: PPUSH
// if not units or not class then
41064: LD_VAR 0 1
41068: NOT
41069: IFTRUE 41078
41071: PUSH
41072: LD_VAR 0 2
41076: NOT
41077: OR
41078: IFFALSE 41082
// exit ;
41080: GO 41177
// result := [ ] ;
41082: LD_ADDR_VAR 0 3
41086: PUSH
41087: EMPTY
41088: ST_TO_ADDR
// for un in units do
41089: LD_ADDR_VAR 0 4
41093: PUSH
41094: LD_VAR 0 1
41098: PUSH
41099: FOR_IN
41100: IFFALSE 41175
// if GetClass ( un ) = class then
41102: LD_VAR 0 4
41106: PPUSH
41107: CALL_OW 257
41111: PUSH
41112: LD_VAR 0 2
41116: EQUAL
41117: IFFALSE 41144
// result := Insert ( result , 1 , un ) else
41119: LD_ADDR_VAR 0 3
41123: PUSH
41124: LD_VAR 0 3
41128: PPUSH
41129: LD_INT 1
41131: PPUSH
41132: LD_VAR 0 4
41136: PPUSH
41137: CALL_OW 2
41141: ST_TO_ADDR
41142: GO 41173
// result := Replace ( result , result + 1 , un ) ;
41144: LD_ADDR_VAR 0 3
41148: PUSH
41149: LD_VAR 0 3
41153: PPUSH
41154: LD_VAR 0 3
41158: PUSH
41159: LD_INT 1
41161: PLUS
41162: PPUSH
41163: LD_VAR 0 4
41167: PPUSH
41168: CALL_OW 1
41172: ST_TO_ADDR
41173: GO 41099
41175: POP
41176: POP
// end ;
41177: LD_VAR 0 3
41181: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41182: LD_INT 0
41184: PPUSH
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
41190: PPUSH
// result := [ ] ;
41191: LD_ADDR_VAR 0 4
41195: PUSH
41196: EMPTY
41197: ST_TO_ADDR
// if x - r < 0 then
41198: LD_VAR 0 1
41202: PUSH
41203: LD_VAR 0 3
41207: MINUS
41208: PUSH
41209: LD_INT 0
41211: LESS
41212: IFFALSE 41224
// min_x := 0 else
41214: LD_ADDR_VAR 0 8
41218: PUSH
41219: LD_INT 0
41221: ST_TO_ADDR
41222: GO 41240
// min_x := x - r ;
41224: LD_ADDR_VAR 0 8
41228: PUSH
41229: LD_VAR 0 1
41233: PUSH
41234: LD_VAR 0 3
41238: MINUS
41239: ST_TO_ADDR
// if y - r < 0 then
41240: LD_VAR 0 2
41244: PUSH
41245: LD_VAR 0 3
41249: MINUS
41250: PUSH
41251: LD_INT 0
41253: LESS
41254: IFFALSE 41266
// min_y := 0 else
41256: LD_ADDR_VAR 0 7
41260: PUSH
41261: LD_INT 0
41263: ST_TO_ADDR
41264: GO 41282
// min_y := y - r ;
41266: LD_ADDR_VAR 0 7
41270: PUSH
41271: LD_VAR 0 2
41275: PUSH
41276: LD_VAR 0 3
41280: MINUS
41281: ST_TO_ADDR
// max_x := x + r ;
41282: LD_ADDR_VAR 0 9
41286: PUSH
41287: LD_VAR 0 1
41291: PUSH
41292: LD_VAR 0 3
41296: PLUS
41297: ST_TO_ADDR
// max_y := y + r ;
41298: LD_ADDR_VAR 0 10
41302: PUSH
41303: LD_VAR 0 2
41307: PUSH
41308: LD_VAR 0 3
41312: PLUS
41313: ST_TO_ADDR
// for _x = min_x to max_x do
41314: LD_ADDR_VAR 0 5
41318: PUSH
41319: DOUBLE
41320: LD_VAR 0 8
41324: DEC
41325: ST_TO_ADDR
41326: LD_VAR 0 9
41330: PUSH
41331: FOR_TO
41332: IFFALSE 41433
// for _y = min_y to max_y do
41334: LD_ADDR_VAR 0 6
41338: PUSH
41339: DOUBLE
41340: LD_VAR 0 7
41344: DEC
41345: ST_TO_ADDR
41346: LD_VAR 0 10
41350: PUSH
41351: FOR_TO
41352: IFFALSE 41429
// begin if not ValidHex ( _x , _y ) then
41354: LD_VAR 0 5
41358: PPUSH
41359: LD_VAR 0 6
41363: PPUSH
41364: CALL_OW 488
41368: NOT
41369: IFFALSE 41373
// continue ;
41371: GO 41351
// if GetResourceTypeXY ( _x , _y ) then
41373: LD_VAR 0 5
41377: PPUSH
41378: LD_VAR 0 6
41382: PPUSH
41383: CALL_OW 283
41387: IFFALSE 41427
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41389: LD_ADDR_VAR 0 4
41393: PUSH
41394: LD_VAR 0 4
41398: PPUSH
41399: LD_VAR 0 4
41403: PUSH
41404: LD_INT 1
41406: PLUS
41407: PPUSH
41408: LD_VAR 0 5
41412: PUSH
41413: LD_VAR 0 6
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PPUSH
41422: CALL_OW 1
41426: ST_TO_ADDR
// end ;
41427: GO 41351
41429: POP
41430: POP
41431: GO 41331
41433: POP
41434: POP
// end ;
41435: LD_VAR 0 4
41439: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41440: LD_INT 0
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
// if not units then
41450: LD_VAR 0 1
41454: NOT
41455: IFFALSE 41459
// exit ;
41457: GO 41991
// result := UnitFilter ( units , [ f_ok ] ) ;
41459: LD_ADDR_VAR 0 3
41463: PUSH
41464: LD_VAR 0 1
41468: PPUSH
41469: LD_INT 50
41471: PUSH
41472: EMPTY
41473: LIST
41474: PPUSH
41475: CALL_OW 72
41479: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41480: LD_ADDR_VAR 0 8
41484: PUSH
41485: LD_VAR 0 1
41489: PUSH
41490: LD_INT 1
41492: ARRAY
41493: PPUSH
41494: CALL_OW 255
41498: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41499: LD_ADDR_VAR 0 10
41503: PUSH
41504: LD_INT 29
41506: PUSH
41507: LD_INT 91
41509: PUSH
41510: LD_INT 49
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: ST_TO_ADDR
// if not result then
41518: LD_VAR 0 3
41522: NOT
41523: IFFALSE 41527
// exit ;
41525: GO 41991
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: LD_INT 81
41534: PUSH
41535: LD_VAR 0 8
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PPUSH
41544: CALL_OW 69
41548: ST_TO_ADDR
// for i in result do
41549: LD_ADDR_VAR 0 4
41553: PUSH
41554: LD_VAR 0 3
41558: PUSH
41559: FOR_IN
41560: IFFALSE 41989
// begin tag := GetTag ( i ) + 1 ;
41562: LD_ADDR_VAR 0 9
41566: PUSH
41567: LD_VAR 0 4
41571: PPUSH
41572: CALL_OW 110
41576: PUSH
41577: LD_INT 1
41579: PLUS
41580: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41581: LD_ADDR_VAR 0 7
41585: PUSH
41586: LD_VAR 0 4
41590: PPUSH
41591: CALL_OW 250
41595: PPUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: CALL_OW 251
41605: PPUSH
41606: LD_INT 4
41608: PPUSH
41609: CALL 41182 0 3
41613: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41614: LD_VAR 0 4
41618: PPUSH
41619: CALL_OW 247
41623: PUSH
41624: LD_INT 2
41626: EQUAL
41627: IFFALSE 41639
41629: PUSH
41630: LD_VAR 0 7
41634: PUSH
41635: LD_INT 2
41637: GREATER
41638: AND
41639: IFFALSE 41659
41641: PUSH
41642: LD_VAR 0 4
41646: PPUSH
41647: CALL_OW 264
41651: PUSH
41652: LD_VAR 0 10
41656: IN
41657: NOT
41658: AND
41659: IFFALSE 41698
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41661: LD_VAR 0 4
41665: PPUSH
41666: LD_VAR 0 7
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PUSH
41675: LD_INT 1
41677: ARRAY
41678: PPUSH
41679: LD_VAR 0 7
41683: PUSH
41684: LD_INT 1
41686: ARRAY
41687: PUSH
41688: LD_INT 2
41690: ARRAY
41691: PPUSH
41692: CALL_OW 116
41696: GO 41987
// if path > tag then
41698: LD_VAR 0 2
41702: PUSH
41703: LD_VAR 0 9
41707: GREATER
41708: IFFALSE 41916
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41710: LD_ADDR_VAR 0 6
41714: PUSH
41715: LD_VAR 0 5
41719: PPUSH
41720: LD_INT 91
41722: PUSH
41723: LD_VAR 0 4
41727: PUSH
41728: LD_INT 8
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: PPUSH
41736: CALL_OW 72
41740: ST_TO_ADDR
// if nearEnemy then
41741: LD_VAR 0 6
41745: IFFALSE 41814
// begin if GetWeapon ( i ) = ru_time_lapser then
41747: LD_VAR 0 4
41751: PPUSH
41752: CALL_OW 264
41756: PUSH
41757: LD_INT 49
41759: EQUAL
41760: IFFALSE 41788
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41762: LD_VAR 0 4
41766: PPUSH
41767: LD_VAR 0 6
41771: PPUSH
41772: LD_VAR 0 4
41776: PPUSH
41777: CALL_OW 74
41781: PPUSH
41782: CALL_OW 112
41786: GO 41812
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41788: LD_VAR 0 4
41792: PPUSH
41793: LD_VAR 0 6
41797: PPUSH
41798: LD_VAR 0 4
41802: PPUSH
41803: CALL_OW 74
41807: PPUSH
41808: CALL 43072 0 2
// end else
41812: GO 41914
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41814: LD_VAR 0 4
41818: PPUSH
41819: LD_VAR 0 2
41823: PUSH
41824: LD_VAR 0 9
41828: ARRAY
41829: PUSH
41830: LD_INT 1
41832: ARRAY
41833: PPUSH
41834: LD_VAR 0 2
41838: PUSH
41839: LD_VAR 0 9
41843: ARRAY
41844: PUSH
41845: LD_INT 2
41847: ARRAY
41848: PPUSH
41849: CALL_OW 297
41853: PUSH
41854: LD_INT 6
41856: GREATER
41857: IFFALSE 41900
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41859: LD_VAR 0 4
41863: PPUSH
41864: LD_VAR 0 2
41868: PUSH
41869: LD_VAR 0 9
41873: ARRAY
41874: PUSH
41875: LD_INT 1
41877: ARRAY
41878: PPUSH
41879: LD_VAR 0 2
41883: PUSH
41884: LD_VAR 0 9
41888: ARRAY
41889: PUSH
41890: LD_INT 2
41892: ARRAY
41893: PPUSH
41894: CALL_OW 114
41898: GO 41914
// SetTag ( i , tag ) ;
41900: LD_VAR 0 4
41904: PPUSH
41905: LD_VAR 0 9
41909: PPUSH
41910: CALL_OW 109
// end else
41914: GO 41987
// if enemy then
41916: LD_VAR 0 5
41920: IFFALSE 41987
// begin if GetWeapon ( i ) = ru_time_lapser then
41922: LD_VAR 0 4
41926: PPUSH
41927: CALL_OW 264
41931: PUSH
41932: LD_INT 49
41934: EQUAL
41935: IFFALSE 41963
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41937: LD_VAR 0 4
41941: PPUSH
41942: LD_VAR 0 5
41946: PPUSH
41947: LD_VAR 0 4
41951: PPUSH
41952: CALL_OW 74
41956: PPUSH
41957: CALL_OW 112
41961: GO 41987
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41963: LD_VAR 0 4
41967: PPUSH
41968: LD_VAR 0 5
41972: PPUSH
41973: LD_VAR 0 4
41977: PPUSH
41978: CALL_OW 74
41982: PPUSH
41983: CALL 43072 0 2
// end ; end ;
41987: GO 41559
41989: POP
41990: POP
// end ;
41991: LD_VAR 0 3
41995: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41996: LD_INT 0
41998: PPUSH
41999: PPUSH
42000: PPUSH
// if not unit or IsInUnit ( unit ) then
42001: LD_VAR 0 1
42005: NOT
42006: IFTRUE 42019
42008: PUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: CALL_OW 310
42018: OR
42019: IFFALSE 42023
// exit ;
42021: GO 42114
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42023: LD_ADDR_VAR 0 4
42027: PUSH
42028: LD_VAR 0 1
42032: PPUSH
42033: CALL_OW 250
42037: PPUSH
42038: LD_VAR 0 2
42042: PPUSH
42043: LD_INT 1
42045: PPUSH
42046: CALL_OW 272
42050: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42051: LD_ADDR_VAR 0 5
42055: PUSH
42056: LD_VAR 0 1
42060: PPUSH
42061: CALL_OW 251
42065: PPUSH
42066: LD_VAR 0 2
42070: PPUSH
42071: LD_INT 1
42073: PPUSH
42074: CALL_OW 273
42078: ST_TO_ADDR
// if ValidHex ( x , y ) then
42079: LD_VAR 0 4
42083: PPUSH
42084: LD_VAR 0 5
42088: PPUSH
42089: CALL_OW 488
42093: IFFALSE 42114
// ComTurnXY ( unit , x , y ) ;
42095: LD_VAR 0 1
42099: PPUSH
42100: LD_VAR 0 4
42104: PPUSH
42105: LD_VAR 0 5
42109: PPUSH
42110: CALL_OW 118
// end ;
42114: LD_VAR 0 3
42118: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42119: LD_INT 0
42121: PPUSH
42122: PPUSH
// result := false ;
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: LD_INT 0
42130: ST_TO_ADDR
// if not units then
42131: LD_VAR 0 2
42135: NOT
42136: IFFALSE 42140
// exit ;
42138: GO 42185
// for i in units do
42140: LD_ADDR_VAR 0 4
42144: PUSH
42145: LD_VAR 0 2
42149: PUSH
42150: FOR_IN
42151: IFFALSE 42183
// if See ( side , i ) then
42153: LD_VAR 0 1
42157: PPUSH
42158: LD_VAR 0 4
42162: PPUSH
42163: CALL_OW 292
42167: IFFALSE 42181
// begin result := true ;
42169: LD_ADDR_VAR 0 3
42173: PUSH
42174: LD_INT 1
42176: ST_TO_ADDR
// exit ;
42177: POP
42178: POP
42179: GO 42185
// end ;
42181: GO 42150
42183: POP
42184: POP
// end ;
42185: LD_VAR 0 3
42189: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42190: LD_INT 0
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
// if not unit or not points then
42196: LD_VAR 0 1
42200: NOT
42201: IFTRUE 42210
42203: PUSH
42204: LD_VAR 0 2
42208: NOT
42209: OR
42210: IFFALSE 42214
// exit ;
42212: GO 42304
// dist := 99999 ;
42214: LD_ADDR_VAR 0 5
42218: PUSH
42219: LD_INT 99999
42221: ST_TO_ADDR
// for i in points do
42222: LD_ADDR_VAR 0 4
42226: PUSH
42227: LD_VAR 0 2
42231: PUSH
42232: FOR_IN
42233: IFFALSE 42302
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42235: LD_ADDR_VAR 0 6
42239: PUSH
42240: LD_VAR 0 1
42244: PPUSH
42245: LD_VAR 0 4
42249: PUSH
42250: LD_INT 1
42252: ARRAY
42253: PPUSH
42254: LD_VAR 0 4
42258: PUSH
42259: LD_INT 2
42261: ARRAY
42262: PPUSH
42263: CALL_OW 297
42267: ST_TO_ADDR
// if tmpDist < dist then
42268: LD_VAR 0 6
42272: PUSH
42273: LD_VAR 0 5
42277: LESS
42278: IFFALSE 42300
// begin result := i ;
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_VAR 0 4
42289: ST_TO_ADDR
// dist := tmpDist ;
42290: LD_ADDR_VAR 0 5
42294: PUSH
42295: LD_VAR 0 6
42299: ST_TO_ADDR
// end ; end ;
42300: GO 42232
42302: POP
42303: POP
// end ;
42304: LD_VAR 0 3
42308: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42309: LD_INT 0
42311: PPUSH
// uc_side := side ;
42312: LD_ADDR_OWVAR 20
42316: PUSH
42317: LD_VAR 0 1
42321: ST_TO_ADDR
// uc_nation := 3 ;
42322: LD_ADDR_OWVAR 21
42326: PUSH
42327: LD_INT 3
42329: ST_TO_ADDR
// vc_chassis := 25 ;
42330: LD_ADDR_OWVAR 37
42334: PUSH
42335: LD_INT 25
42337: ST_TO_ADDR
// vc_engine := engine_siberite ;
42338: LD_ADDR_OWVAR 39
42342: PUSH
42343: LD_INT 3
42345: ST_TO_ADDR
// vc_control := control_computer ;
42346: LD_ADDR_OWVAR 38
42350: PUSH
42351: LD_INT 3
42353: ST_TO_ADDR
// vc_weapon := 59 ;
42354: LD_ADDR_OWVAR 40
42358: PUSH
42359: LD_INT 59
42361: ST_TO_ADDR
// result := CreateVehicle ;
42362: LD_ADDR_VAR 0 5
42366: PUSH
42367: CALL_OW 45
42371: ST_TO_ADDR
// SetDir ( result , d ) ;
42372: LD_VAR 0 5
42376: PPUSH
42377: LD_VAR 0 4
42381: PPUSH
42382: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42386: LD_VAR 0 5
42390: PPUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: LD_VAR 0 3
42400: PPUSH
42401: LD_INT 0
42403: PPUSH
42404: CALL_OW 48
// end ;
42408: LD_VAR 0 5
42412: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42413: LD_INT 0
42415: PPUSH
42416: PPUSH
42417: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42418: LD_ADDR_VAR 0 2
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42441: LD_VAR 0 1
42445: NOT
42446: IFTRUE 42479
42448: PUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 264
42458: PUSH
42459: LD_INT 12
42461: PUSH
42462: LD_INT 51
42464: PUSH
42465: LD_INT 32
42467: PUSH
42468: LD_INT 89
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: IN
42477: NOT
42478: OR
42479: IFFALSE 42483
// exit ;
42481: GO 42581
// for i := 1 to 3 do
42483: LD_ADDR_VAR 0 3
42487: PUSH
42488: DOUBLE
42489: LD_INT 1
42491: DEC
42492: ST_TO_ADDR
42493: LD_INT 3
42495: PUSH
42496: FOR_TO
42497: IFFALSE 42579
// begin tmp := GetCargo ( cargo , i ) ;
42499: LD_ADDR_VAR 0 4
42503: PUSH
42504: LD_VAR 0 1
42508: PPUSH
42509: LD_VAR 0 3
42513: PPUSH
42514: CALL_OW 289
42518: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42519: LD_ADDR_VAR 0 2
42523: PUSH
42524: LD_VAR 0 2
42528: PPUSH
42529: LD_VAR 0 3
42533: PPUSH
42534: LD_VAR 0 4
42538: PPUSH
42539: CALL_OW 1
42543: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42544: LD_ADDR_VAR 0 2
42548: PUSH
42549: LD_VAR 0 2
42553: PPUSH
42554: LD_INT 4
42556: PPUSH
42557: LD_VAR 0 2
42561: PUSH
42562: LD_INT 4
42564: ARRAY
42565: PUSH
42566: LD_VAR 0 4
42570: PLUS
42571: PPUSH
42572: CALL_OW 1
42576: ST_TO_ADDR
// end ;
42577: GO 42496
42579: POP
42580: POP
// end ;
42581: LD_VAR 0 2
42585: RET
// export function Length ( array ) ; begin
42586: LD_INT 0
42588: PPUSH
// result := array + 0 ;
42589: LD_ADDR_VAR 0 2
42593: PUSH
42594: LD_VAR 0 1
42598: PUSH
42599: LD_INT 0
42601: PLUS
42602: ST_TO_ADDR
// end ;
42603: LD_VAR 0 2
42607: RET
// export function PrepareArray ( array ) ; begin
42608: LD_INT 0
42610: PPUSH
// result := array diff 0 ;
42611: LD_ADDR_VAR 0 2
42615: PUSH
42616: LD_VAR 0 1
42620: PUSH
42621: LD_INT 0
42623: DIFF
42624: ST_TO_ADDR
// if not result [ 1 ] then
42625: LD_VAR 0 2
42629: PUSH
42630: LD_INT 1
42632: ARRAY
42633: NOT
42634: IFFALSE 42654
// result := Delete ( result , 1 ) ;
42636: LD_ADDR_VAR 0 2
42640: PUSH
42641: LD_VAR 0 2
42645: PPUSH
42646: LD_INT 1
42648: PPUSH
42649: CALL_OW 3
42653: ST_TO_ADDR
// end ;
42654: LD_VAR 0 2
42658: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42659: LD_INT 0
42661: PPUSH
42662: PPUSH
42663: PPUSH
42664: PPUSH
// sibRocketRange := 25 ;
42665: LD_ADDR_VAR 0 6
42669: PUSH
42670: LD_INT 25
42672: ST_TO_ADDR
// result := false ;
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: LD_INT 0
42680: ST_TO_ADDR
// for i := 0 to 5 do
42681: LD_ADDR_VAR 0 5
42685: PUSH
42686: DOUBLE
42687: LD_INT 0
42689: DEC
42690: ST_TO_ADDR
42691: LD_INT 5
42693: PUSH
42694: FOR_TO
42695: IFFALSE 42762
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42697: LD_VAR 0 1
42701: PPUSH
42702: LD_VAR 0 5
42706: PPUSH
42707: LD_VAR 0 6
42711: PPUSH
42712: CALL_OW 272
42716: PPUSH
42717: LD_VAR 0 2
42721: PPUSH
42722: LD_VAR 0 5
42726: PPUSH
42727: LD_VAR 0 6
42731: PPUSH
42732: CALL_OW 273
42736: PPUSH
42737: LD_VAR 0 3
42741: PPUSH
42742: CALL_OW 309
42746: IFFALSE 42760
// begin result := true ;
42748: LD_ADDR_VAR 0 4
42752: PUSH
42753: LD_INT 1
42755: ST_TO_ADDR
// exit ;
42756: POP
42757: POP
42758: GO 42764
// end ;
42760: GO 42694
42762: POP
42763: POP
// end ;
42764: LD_VAR 0 4
42768: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42769: LD_INT 0
42771: PPUSH
42772: PPUSH
42773: PPUSH
// if btype = b_depot then
42774: LD_VAR 0 2
42778: PUSH
42779: LD_INT 0
42781: EQUAL
42782: IFFALSE 42794
// begin result := true ;
42784: LD_ADDR_VAR 0 3
42788: PUSH
42789: LD_INT 1
42791: ST_TO_ADDR
// exit ;
42792: GO 42914
// end ; pom := GetBase ( depot ) ;
42794: LD_ADDR_VAR 0 4
42798: PUSH
42799: LD_VAR 0 1
42803: PPUSH
42804: CALL_OW 274
42808: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42809: LD_ADDR_VAR 0 5
42813: PUSH
42814: LD_VAR 0 2
42818: PPUSH
42819: LD_VAR 0 1
42823: PPUSH
42824: CALL_OW 248
42828: PPUSH
42829: CALL_OW 450
42833: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42834: LD_ADDR_VAR 0 3
42838: PUSH
42839: LD_VAR 0 4
42843: PPUSH
42844: LD_INT 1
42846: PPUSH
42847: CALL_OW 275
42851: PUSH
42852: LD_VAR 0 5
42856: PUSH
42857: LD_INT 1
42859: ARRAY
42860: GREATEREQUAL
42861: IFFALSE 42887
42863: PUSH
42864: LD_VAR 0 4
42868: PPUSH
42869: LD_INT 2
42871: PPUSH
42872: CALL_OW 275
42876: PUSH
42877: LD_VAR 0 5
42881: PUSH
42882: LD_INT 2
42884: ARRAY
42885: GREATEREQUAL
42886: AND
42887: IFFALSE 42913
42889: PUSH
42890: LD_VAR 0 4
42894: PPUSH
42895: LD_INT 3
42897: PPUSH
42898: CALL_OW 275
42902: PUSH
42903: LD_VAR 0 5
42907: PUSH
42908: LD_INT 3
42910: ARRAY
42911: GREATEREQUAL
42912: AND
42913: ST_TO_ADDR
// end ;
42914: LD_VAR 0 3
42918: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42919: LD_INT 0
42921: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42922: LD_VAR 0 1
42926: PPUSH
42927: LD_VAR 0 2
42931: PPUSH
42932: LD_INT 0
42934: PPUSH
42935: LD_INT 0
42937: PPUSH
42938: LD_INT 1
42940: PPUSH
42941: LD_INT 0
42943: PPUSH
42944: CALL_OW 587
// end ;
42948: LD_VAR 0 3
42952: RET
// export function CenterOnNow ( unit ) ; begin
42953: LD_INT 0
42955: PPUSH
// result := IsInUnit ( unit ) ;
42956: LD_ADDR_VAR 0 2
42960: PUSH
42961: LD_VAR 0 1
42965: PPUSH
42966: CALL_OW 310
42970: ST_TO_ADDR
// if not result then
42971: LD_VAR 0 2
42975: NOT
42976: IFFALSE 42988
// result := unit ;
42978: LD_ADDR_VAR 0 2
42982: PUSH
42983: LD_VAR 0 1
42987: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42988: LD_VAR 0 1
42992: PPUSH
42993: CALL_OW 87
// end ;
42997: LD_VAR 0 2
43001: RET
// export function ComMoveHex ( unit , hex ) ; begin
43002: LD_INT 0
43004: PPUSH
// if not hex then
43005: LD_VAR 0 2
43009: NOT
43010: IFFALSE 43014
// exit ;
43012: GO 43067
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43014: LD_VAR 0 2
43018: PUSH
43019: LD_INT 1
43021: ARRAY
43022: PPUSH
43023: LD_VAR 0 2
43027: PUSH
43028: LD_INT 2
43030: ARRAY
43031: PPUSH
43032: CALL_OW 428
43036: IFFALSE 43040
// exit ;
43038: GO 43067
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43040: LD_VAR 0 1
43044: PPUSH
43045: LD_VAR 0 2
43049: PUSH
43050: LD_INT 1
43052: ARRAY
43053: PPUSH
43054: LD_VAR 0 2
43058: PUSH
43059: LD_INT 2
43061: ARRAY
43062: PPUSH
43063: CALL_OW 111
// end ;
43067: LD_VAR 0 3
43071: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43072: LD_INT 0
43074: PPUSH
43075: PPUSH
43076: PPUSH
// if not unit or not enemy then
43077: LD_VAR 0 1
43081: NOT
43082: IFTRUE 43091
43084: PUSH
43085: LD_VAR 0 2
43089: NOT
43090: OR
43091: IFFALSE 43095
// exit ;
43093: GO 43221
// x := GetX ( enemy ) ;
43095: LD_ADDR_VAR 0 4
43099: PUSH
43100: LD_VAR 0 2
43104: PPUSH
43105: CALL_OW 250
43109: ST_TO_ADDR
// y := GetY ( enemy ) ;
43110: LD_ADDR_VAR 0 5
43114: PUSH
43115: LD_VAR 0 2
43119: PPUSH
43120: CALL_OW 251
43124: ST_TO_ADDR
// if ValidHex ( x , y ) then
43125: LD_VAR 0 4
43129: PPUSH
43130: LD_VAR 0 5
43134: PPUSH
43135: CALL_OW 488
43139: IFFALSE 43221
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43141: LD_VAR 0 2
43145: PPUSH
43146: CALL_OW 247
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: IN
43161: IFTRUE 43184
43163: PUSH
43164: LD_VAR 0 1
43168: PPUSH
43169: CALL_OW 255
43173: PPUSH
43174: LD_VAR 0 2
43178: PPUSH
43179: CALL_OW 292
43183: OR
43184: IFFALSE 43202
// ComAttackUnit ( unit , enemy ) else
43186: LD_VAR 0 1
43190: PPUSH
43191: LD_VAR 0 2
43195: PPUSH
43196: CALL_OW 115
43200: GO 43221
// ComAgressiveMove ( unit , x , y ) ;
43202: LD_VAR 0 1
43206: PPUSH
43207: LD_VAR 0 4
43211: PPUSH
43212: LD_VAR 0 5
43216: PPUSH
43217: CALL_OW 114
// end ;
43221: LD_VAR 0 3
43225: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43226: LD_INT 0
43228: PPUSH
43229: PPUSH
43230: PPUSH
// list := AreaToList ( area , 0 ) ;
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: LD_INT 0
43243: PPUSH
43244: CALL_OW 517
43248: ST_TO_ADDR
// if not list then
43249: LD_VAR 0 5
43253: NOT
43254: IFFALSE 43258
// exit ;
43256: GO 43388
// if all then
43258: LD_VAR 0 2
43262: IFFALSE 43350
// begin for i := 1 to list [ 1 ] do
43264: LD_ADDR_VAR 0 4
43268: PUSH
43269: DOUBLE
43270: LD_INT 1
43272: DEC
43273: ST_TO_ADDR
43274: LD_VAR 0 5
43278: PUSH
43279: LD_INT 1
43281: ARRAY
43282: PUSH
43283: FOR_TO
43284: IFFALSE 43346
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: LD_VAR 0 3
43295: PPUSH
43296: LD_VAR 0 3
43300: PUSH
43301: LD_INT 1
43303: PLUS
43304: PPUSH
43305: LD_VAR 0 5
43309: PUSH
43310: LD_INT 1
43312: ARRAY
43313: PUSH
43314: LD_VAR 0 4
43318: ARRAY
43319: PUSH
43320: LD_VAR 0 5
43324: PUSH
43325: LD_INT 2
43327: ARRAY
43328: PUSH
43329: LD_VAR 0 4
43333: ARRAY
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PPUSH
43339: CALL_OW 1
43343: ST_TO_ADDR
43344: GO 43283
43346: POP
43347: POP
// exit ;
43348: GO 43388
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_VAR 0 5
43359: PUSH
43360: LD_INT 1
43362: ARRAY
43363: PUSH
43364: LD_INT 1
43366: ARRAY
43367: PUSH
43368: LD_VAR 0 5
43372: PUSH
43373: LD_INT 2
43375: ARRAY
43376: PUSH
43377: LD_INT 1
43379: ARRAY
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: ST_TO_ADDR
// end ;
43388: LD_VAR 0 3
43392: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43393: LD_INT 0
43395: PPUSH
43396: PPUSH
// list := AreaToList ( area , 0 ) ;
43397: LD_ADDR_VAR 0 4
43401: PUSH
43402: LD_VAR 0 1
43406: PPUSH
43407: LD_INT 0
43409: PPUSH
43410: CALL_OW 517
43414: ST_TO_ADDR
// if not list then
43415: LD_VAR 0 4
43419: NOT
43420: IFFALSE 43424
// exit ;
43422: GO 43465
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43424: LD_ADDR_VAR 0 3
43428: PUSH
43429: LD_VAR 0 4
43433: PUSH
43434: LD_INT 1
43436: ARRAY
43437: PUSH
43438: LD_INT 1
43440: ARRAY
43441: PUSH
43442: LD_VAR 0 4
43446: PUSH
43447: LD_INT 2
43449: ARRAY
43450: PUSH
43451: LD_INT 1
43453: ARRAY
43454: PUSH
43455: LD_VAR 0 2
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: ST_TO_ADDR
// end ;
43465: LD_VAR 0 3
43469: RET
// export function First ( array ) ; begin
43470: LD_INT 0
43472: PPUSH
// if not array then
43473: LD_VAR 0 1
43477: NOT
43478: IFFALSE 43482
// exit ;
43480: GO 43496
// result := array [ 1 ] ;
43482: LD_ADDR_VAR 0 2
43486: PUSH
43487: LD_VAR 0 1
43491: PUSH
43492: LD_INT 1
43494: ARRAY
43495: ST_TO_ADDR
// end ;
43496: LD_VAR 0 2
43500: RET
// export function Last ( array ) ; begin
43501: LD_INT 0
43503: PPUSH
// if not array then
43504: LD_VAR 0 1
43508: NOT
43509: IFFALSE 43513
// exit ;
43511: GO 43529
// result := array [ array ] ;
43513: LD_ADDR_VAR 0 2
43517: PUSH
43518: LD_VAR 0 1
43522: PUSH
43523: LD_VAR 0 1
43527: ARRAY
43528: ST_TO_ADDR
// end ;
43529: LD_VAR 0 2
43533: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43534: LD_INT 0
43536: PPUSH
43537: PPUSH
// result := [ ] ;
43538: LD_ADDR_VAR 0 5
43542: PUSH
43543: EMPTY
43544: ST_TO_ADDR
// if not array then
43545: LD_VAR 0 1
43549: NOT
43550: IFFALSE 43554
// exit ;
43552: GO 43666
// for i := 1 to array do
43554: LD_ADDR_VAR 0 6
43558: PUSH
43559: DOUBLE
43560: LD_INT 1
43562: DEC
43563: ST_TO_ADDR
43564: LD_VAR 0 1
43568: PUSH
43569: FOR_TO
43570: IFFALSE 43664
// if array [ i ] [ index ] = value then
43572: LD_VAR 0 1
43576: PUSH
43577: LD_VAR 0 6
43581: ARRAY
43582: PUSH
43583: LD_VAR 0 2
43587: ARRAY
43588: PUSH
43589: LD_VAR 0 3
43593: EQUAL
43594: IFFALSE 43662
// begin if indexColumn then
43596: LD_VAR 0 4
43600: IFFALSE 43636
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43602: LD_ADDR_VAR 0 5
43606: PUSH
43607: LD_VAR 0 5
43611: PPUSH
43612: LD_VAR 0 1
43616: PUSH
43617: LD_VAR 0 6
43621: ARRAY
43622: PUSH
43623: LD_VAR 0 4
43627: ARRAY
43628: PPUSH
43629: CALL 38674 0 2
43633: ST_TO_ADDR
43634: GO 43662
// result := Join ( result , array [ i ] ) ;
43636: LD_ADDR_VAR 0 5
43640: PUSH
43641: LD_VAR 0 5
43645: PPUSH
43646: LD_VAR 0 1
43650: PUSH
43651: LD_VAR 0 6
43655: ARRAY
43656: PPUSH
43657: CALL 38674 0 2
43661: ST_TO_ADDR
// end ;
43662: GO 43569
43664: POP
43665: POP
// end ;
43666: LD_VAR 0 5
43670: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43671: LD_INT 0
43673: PPUSH
// if not vehicles or not parkingPoint then
43674: LD_VAR 0 1
43678: NOT
43679: IFTRUE 43688
43681: PUSH
43682: LD_VAR 0 2
43686: NOT
43687: OR
43688: IFFALSE 43692
// exit ;
43690: GO 43790
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43692: LD_ADDR_VAR 0 1
43696: PUSH
43697: LD_VAR 0 1
43701: PPUSH
43702: LD_INT 50
43704: PUSH
43705: EMPTY
43706: LIST
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 92
43713: PUSH
43714: LD_VAR 0 2
43718: PUSH
43719: LD_INT 1
43721: ARRAY
43722: PUSH
43723: LD_VAR 0 2
43727: PUSH
43728: LD_INT 2
43730: ARRAY
43731: PUSH
43732: LD_INT 8
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PPUSH
43749: CALL_OW 72
43753: ST_TO_ADDR
// if not vehicles then
43754: LD_VAR 0 1
43758: NOT
43759: IFFALSE 43763
// exit ;
43761: GO 43790
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43763: LD_VAR 0 1
43767: PPUSH
43768: LD_VAR 0 2
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: PPUSH
43777: LD_VAR 0 2
43781: PUSH
43782: LD_INT 2
43784: ARRAY
43785: PPUSH
43786: CALL_OW 111
// end ;
43790: LD_VAR 0 3
43794: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43795: LD_INT 0
43797: PPUSH
43798: PPUSH
43799: PPUSH
// if not side or not area then
43800: LD_VAR 0 1
43804: NOT
43805: IFTRUE 43814
43807: PUSH
43808: LD_VAR 0 2
43812: NOT
43813: OR
43814: IFFALSE 43818
// exit ;
43816: GO 43937
// tmp := AreaToList ( area , 0 ) ;
43818: LD_ADDR_VAR 0 5
43822: PUSH
43823: LD_VAR 0 2
43827: PPUSH
43828: LD_INT 0
43830: PPUSH
43831: CALL_OW 517
43835: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43836: LD_ADDR_VAR 0 4
43840: PUSH
43841: DOUBLE
43842: LD_INT 1
43844: DEC
43845: ST_TO_ADDR
43846: LD_VAR 0 5
43850: PUSH
43851: LD_INT 1
43853: ARRAY
43854: PUSH
43855: FOR_TO
43856: IFFALSE 43935
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43858: LD_VAR 0 5
43862: PUSH
43863: LD_INT 1
43865: ARRAY
43866: PUSH
43867: LD_VAR 0 4
43871: ARRAY
43872: PPUSH
43873: LD_VAR 0 5
43877: PUSH
43878: LD_INT 2
43880: ARRAY
43881: PUSH
43882: LD_VAR 0 4
43886: ARRAY
43887: PPUSH
43888: CALL_OW 351
43892: IFFALSE 43933
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43894: LD_VAR 0 5
43898: PUSH
43899: LD_INT 1
43901: ARRAY
43902: PUSH
43903: LD_VAR 0 4
43907: ARRAY
43908: PPUSH
43909: LD_VAR 0 5
43913: PUSH
43914: LD_INT 2
43916: ARRAY
43917: PUSH
43918: LD_VAR 0 4
43922: ARRAY
43923: PPUSH
43924: LD_VAR 0 1
43928: PPUSH
43929: CALL_OW 244
// end ;
43933: GO 43855
43935: POP
43936: POP
// end ;
43937: LD_VAR 0 3
43941: RET
// export function UniqueArray ( array ) ; var i ; begin
43942: LD_INT 0
43944: PPUSH
43945: PPUSH
// result := [ ] ;
43946: LD_ADDR_VAR 0 2
43950: PUSH
43951: EMPTY
43952: ST_TO_ADDR
// if not array then
43953: LD_VAR 0 1
43957: NOT
43958: IFFALSE 43962
// exit ;
43960: GO 44023
// for i := 1 to array do
43962: LD_ADDR_VAR 0 3
43966: PUSH
43967: DOUBLE
43968: LD_INT 1
43970: DEC
43971: ST_TO_ADDR
43972: LD_VAR 0 1
43976: PUSH
43977: FOR_TO
43978: IFFALSE 44021
// if not array [ i ] in result then
43980: LD_VAR 0 1
43984: PUSH
43985: LD_VAR 0 3
43989: ARRAY
43990: PUSH
43991: LD_VAR 0 2
43995: IN
43996: NOT
43997: IFFALSE 44019
// result := Join ( result , i ) ;
43999: LD_ADDR_VAR 0 2
44003: PUSH
44004: LD_VAR 0 2
44008: PPUSH
44009: LD_VAR 0 3
44013: PPUSH
44014: CALL 38674 0 2
44018: ST_TO_ADDR
44019: GO 43977
44021: POP
44022: POP
// end ; end_of_file
44023: LD_VAR 0 2
44027: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44028: LD_VAR 0 1
44032: PPUSH
44033: LD_VAR 0 2
44037: PPUSH
44038: LD_VAR 0 3
44042: PPUSH
44043: LD_VAR 0 4
44047: PPUSH
44048: LD_VAR 0 5
44052: PPUSH
44053: LD_VAR 0 6
44057: PPUSH
44058: CALL 50659 0 6
// end ;
44062: PPOPN 6
44064: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44065: LD_INT 0
44067: PPUSH
// begin if not units then
44068: LD_VAR 0 1
44072: NOT
44073: IFFALSE 44077
// exit ;
44075: GO 44111
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
44077: LD_VAR 0 1
44081: PPUSH
44082: LD_VAR 0 2
44086: PPUSH
44087: LD_VAR 0 3
44091: PPUSH
44092: LD_VAR 0 4
44096: PPUSH
44097: LD_VAR 0 5
44101: PPUSH
44102: LD_VAR 0 6
44106: PPUSH
44107: CALL 50460 0 6
// end ;
44111: PPOPN 7
44113: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44114: CALL 50546 0 0
// end ; end_of_file
44118: PPOPN 1
44120: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
44121: LD_VAR 0 1
44125: PUSH
44126: LD_INT 200
44128: DOUBLE
44129: GREATEREQUAL
44130: IFFALSE 44138
44132: LD_INT 299
44134: DOUBLE
44135: LESSEQUAL
44136: IFTRUE 44140
44138: GO 44172
44140: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
44141: LD_VAR 0 1
44145: PPUSH
44146: LD_VAR 0 2
44150: PPUSH
44151: LD_VAR 0 3
44155: PPUSH
44156: LD_VAR 0 4
44160: PPUSH
44161: LD_VAR 0 5
44165: PPUSH
44166: CALL 44953 0 5
44170: GO 44249
44172: LD_INT 300
44174: DOUBLE
44175: GREATEREQUAL
44176: IFFALSE 44184
44178: LD_INT 399
44180: DOUBLE
44181: LESSEQUAL
44182: IFTRUE 44186
44184: GO 44248
44186: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
44187: LD_VAR 0 1
44191: PPUSH
44192: LD_VAR 0 2
44196: PPUSH
44197: LD_VAR 0 3
44201: PPUSH
44202: LD_VAR 0 4
44206: PPUSH
44207: LD_VAR 0 5
44211: PPUSH
44212: LD_VAR 0 6
44216: PPUSH
44217: LD_VAR 0 7
44221: PPUSH
44222: LD_VAR 0 8
44226: PPUSH
44227: LD_VAR 0 9
44231: PPUSH
44232: LD_VAR 0 10
44236: PPUSH
44237: LD_VAR 0 11
44241: PPUSH
44242: CALL 63119 0 11
44246: GO 44249
44248: POP
// end ;
44249: PPOPN 11
44251: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
44252: LD_VAR 0 1
44256: PPUSH
44257: LD_VAR 0 2
44261: PPUSH
44262: LD_VAR 0 3
44266: PPUSH
44267: LD_VAR 0 4
44271: PPUSH
44272: LD_VAR 0 5
44276: PPUSH
44277: CALL 44334 0 5
// end ; end_of_file
44281: PPOPN 5
44283: END
// export function SOS_UnitDestroyed ( un ) ; begin
44284: LD_INT 0
44286: PPUSH
// ComRadiation ( un ) ;
44287: LD_VAR 0 1
44291: PPUSH
44292: CALL 45373 0 1
// end ;
44296: LD_VAR 0 2
44300: RET
// export function SOS_UnitKamikazed ( un ) ; begin
44301: LD_INT 0
44303: PPUSH
// ComRadiation ( un ) ;
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL 45373 0 1
// end ;
44313: LD_VAR 0 2
44317: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44318: LD_INT 0
44320: PPUSH
// end ;
44321: LD_VAR 0 4
44325: RET
// export function SOS_Command ( cmd ) ; begin
44326: LD_INT 0
44328: PPUSH
// end ;
44329: LD_VAR 0 2
44333: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44334: LD_INT 0
44336: PPUSH
// end ;
44337: LD_VAR 0 6
44341: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
44342: LD_INT 0
44344: PPUSH
44345: PPUSH
44346: PPUSH
44347: PPUSH
// if not vehicle or not factory then
44348: LD_VAR 0 1
44352: NOT
44353: IFTRUE 44362
44355: PUSH
44356: LD_VAR 0 2
44360: NOT
44361: OR
44362: IFFALSE 44366
// exit ;
44364: GO 44948
// if not factoryWaypoints then
44366: LD_EXP 71
44370: NOT
44371: IFFALSE 44375
// exit ;
44373: GO 44948
// for i := 1 to Count ( factoryWaypoints ) do
44375: LD_ADDR_VAR 0 4
44379: PUSH
44380: DOUBLE
44381: LD_INT 1
44383: DEC
44384: ST_TO_ADDR
44385: LD_EXP 71
44389: PPUSH
44390: CALL 2742 0 1
44394: PUSH
44395: FOR_TO
44396: IFFALSE 44946
// if factoryWaypoints [ i ] [ 2 ] = factory then
44398: LD_EXP 71
44402: PUSH
44403: LD_VAR 0 4
44407: ARRAY
44408: PUSH
44409: LD_INT 2
44411: ARRAY
44412: PUSH
44413: LD_VAR 0 2
44417: EQUAL
44418: IFFALSE 44944
// begin if GetControl ( vehicle ) = control_manual then
44420: LD_VAR 0 1
44424: PPUSH
44425: CALL_OW 263
44429: PUSH
44430: LD_INT 1
44432: EQUAL
44433: IFFALSE 44797
// begin driver := IsDrivenBy ( vehicle ) ;
44435: LD_ADDR_VAR 0 5
44439: PUSH
44440: LD_VAR 0 1
44444: PPUSH
44445: CALL_OW 311
44449: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
44450: LD_VAR 0 5
44454: PUSH
44455: LD_EXP 72
44459: IN
44460: IFTRUE 44474
44462: PUSH
44463: LD_VAR 0 1
44467: PUSH
44468: LD_EXP 72
44472: IN
44473: OR
44474: IFFALSE 44480
// exit ;
44476: POP
44477: POP
44478: GO 44948
// if not HasTask ( driver ) then
44480: LD_VAR 0 5
44484: PPUSH
44485: CALL_OW 314
44489: NOT
44490: IFFALSE 44795
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
44492: LD_ADDR_EXP 72
44496: PUSH
44497: LD_EXP 72
44501: PPUSH
44502: LD_VAR 0 5
44506: PPUSH
44507: CALL 38674 0 2
44511: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
44512: LD_ADDR_EXP 72
44516: PUSH
44517: LD_EXP 72
44521: PPUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: CALL 38674 0 2
44531: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44532: LD_ADDR_VAR 0 6
44536: PUSH
44537: LD_EXP 71
44541: PUSH
44542: LD_VAR 0 4
44546: ARRAY
44547: PUSH
44548: LD_INT 3
44550: ARRAY
44551: PPUSH
44552: LD_EXP 71
44556: PUSH
44557: LD_VAR 0 4
44561: ARRAY
44562: PUSH
44563: LD_INT 4
44565: ARRAY
44566: PPUSH
44567: CALL_OW 428
44571: ST_TO_ADDR
// if hex then
44572: LD_VAR 0 6
44576: IFFALSE 44594
// ComMoveUnit ( driver , hex ) else
44578: LD_VAR 0 5
44582: PPUSH
44583: LD_VAR 0 6
44587: PPUSH
44588: CALL_OW 112
44592: GO 44678
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
44594: LD_VAR 0 1
44598: PPUSH
44599: LD_EXP 71
44603: PUSH
44604: LD_VAR 0 4
44608: ARRAY
44609: PUSH
44610: LD_INT 3
44612: ARRAY
44613: PPUSH
44614: LD_EXP 71
44618: PUSH
44619: LD_VAR 0 4
44623: ARRAY
44624: PUSH
44625: LD_INT 4
44627: ARRAY
44628: PPUSH
44629: CALL_OW 297
44633: PUSH
44634: LD_INT 0
44636: GREATER
44637: IFFALSE 44678
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44639: LD_VAR 0 5
44643: PPUSH
44644: LD_EXP 71
44648: PUSH
44649: LD_VAR 0 4
44653: ARRAY
44654: PUSH
44655: LD_INT 3
44657: ARRAY
44658: PPUSH
44659: LD_EXP 71
44663: PUSH
44664: LD_VAR 0 4
44668: ARRAY
44669: PUSH
44670: LD_INT 4
44672: ARRAY
44673: PPUSH
44674: CALL_OW 111
// AddComExitVehicle ( driver ) ;
44678: LD_VAR 0 5
44682: PPUSH
44683: CALL_OW 181
// if Multiplayer then
44687: LD_OWVAR 4
44691: IFFALSE 44740
// begin repeat wait ( 10 ) ;
44693: LD_INT 10
44695: PPUSH
44696: CALL_OW 67
// until not IsInUnit ( driver ) ;
44700: LD_VAR 0 5
44704: PPUSH
44705: CALL_OW 310
44709: NOT
44710: IFFALSE 44693
// if not HasTask ( driver ) then
44712: LD_VAR 0 5
44716: PPUSH
44717: CALL_OW 314
44721: NOT
44722: IFFALSE 44738
// ComEnterUnit ( driver , factory ) ;
44724: LD_VAR 0 5
44728: PPUSH
44729: LD_VAR 0 2
44733: PPUSH
44734: CALL_OW 120
// end else
44738: GO 44754
// AddComEnterUnit ( driver , factory ) ;
44740: LD_VAR 0 5
44744: PPUSH
44745: LD_VAR 0 2
44749: PPUSH
44750: CALL_OW 180
// wait ( 0 0$1 ) ;
44754: LD_INT 35
44756: PPUSH
44757: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
44761: LD_ADDR_EXP 72
44765: PUSH
44766: LD_EXP 72
44770: PUSH
44771: LD_VAR 0 5
44775: DIFF
44776: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
44777: LD_ADDR_EXP 72
44781: PUSH
44782: LD_EXP 72
44786: PUSH
44787: LD_VAR 0 1
44791: DIFF
44792: ST_TO_ADDR
// break ;
44793: GO 44946
// end ; end else
44795: GO 44944
// if GetControl ( vehicle ) = control_remote then
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL_OW 263
44806: PUSH
44807: LD_INT 2
44809: EQUAL
44810: IFFALSE 44896
// begin wait ( 0 0$2 ) ;
44812: LD_INT 70
44814: PPUSH
44815: CALL_OW 67
// repeat wait ( 10 ) ;
44819: LD_INT 10
44821: PPUSH
44822: CALL_OW 67
// Connect ( vehicle ) ;
44826: LD_VAR 0 1
44830: PPUSH
44831: CALL 8986 0 1
// until IsControledBy ( vehicle ) ;
44835: LD_VAR 0 1
44839: PPUSH
44840: CALL_OW 312
44844: IFFALSE 44819
// wait ( 10 ) ;
44846: LD_INT 10
44848: PPUSH
44849: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44853: LD_VAR 0 1
44857: PPUSH
44858: LD_EXP 71
44862: PUSH
44863: LD_VAR 0 4
44867: ARRAY
44868: PUSH
44869: LD_INT 3
44871: ARRAY
44872: PPUSH
44873: LD_EXP 71
44877: PUSH
44878: LD_VAR 0 4
44882: ARRAY
44883: PUSH
44884: LD_INT 4
44886: ARRAY
44887: PPUSH
44888: CALL_OW 111
// break ;
44892: GO 44946
// end else
44894: GO 44944
// begin wait ( 0 0$3 ) ;
44896: LD_INT 105
44898: PPUSH
44899: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
44903: LD_VAR 0 1
44907: PPUSH
44908: LD_EXP 71
44912: PUSH
44913: LD_VAR 0 4
44917: ARRAY
44918: PUSH
44919: LD_INT 3
44921: ARRAY
44922: PPUSH
44923: LD_EXP 71
44927: PUSH
44928: LD_VAR 0 4
44932: ARRAY
44933: PUSH
44934: LD_INT 4
44936: ARRAY
44937: PPUSH
44938: CALL_OW 111
// break ;
44942: GO 44946
// end ; end ;
44944: GO 44395
44946: POP
44947: POP
// end ;
44948: LD_VAR 0 3
44952: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44953: LD_INT 0
44955: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44956: LD_VAR 0 1
44960: PUSH
44961: LD_INT 250
44963: EQUAL
44964: IFFALSE 44981
44966: PUSH
44967: LD_VAR 0 2
44971: PPUSH
44972: CALL_OW 264
44976: PUSH
44977: LD_INT 81
44979: EQUAL
44980: AND
44981: IFFALSE 45002
// MinerPlaceMine ( unit , x , y ) ;
44983: LD_VAR 0 2
44987: PPUSH
44988: LD_VAR 0 4
44992: PPUSH
44993: LD_VAR 0 5
44997: PPUSH
44998: CALL 48134 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
45002: LD_VAR 0 1
45006: PUSH
45007: LD_INT 251
45009: EQUAL
45010: IFFALSE 45027
45012: PUSH
45013: LD_VAR 0 2
45017: PPUSH
45018: CALL_OW 264
45022: PUSH
45023: LD_INT 81
45025: EQUAL
45026: AND
45027: IFFALSE 45048
// MinerDetonateMine ( unit , x , y ) ;
45029: LD_VAR 0 2
45033: PPUSH
45034: LD_VAR 0 4
45038: PPUSH
45039: LD_VAR 0 5
45043: PPUSH
45044: CALL 48413 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
45048: LD_VAR 0 1
45052: PUSH
45053: LD_INT 252
45055: EQUAL
45056: IFFALSE 45073
45058: PUSH
45059: LD_VAR 0 2
45063: PPUSH
45064: CALL_OW 264
45068: PUSH
45069: LD_INT 81
45071: EQUAL
45072: AND
45073: IFFALSE 45094
// MinerCreateMinefield ( unit , x , y ) ;
45075: LD_VAR 0 2
45079: PPUSH
45080: LD_VAR 0 4
45084: PPUSH
45085: LD_VAR 0 5
45089: PPUSH
45090: CALL 48832 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
45094: LD_VAR 0 1
45098: PUSH
45099: LD_INT 253
45101: EQUAL
45102: IFFALSE 45119
45104: PUSH
45105: LD_VAR 0 2
45109: PPUSH
45110: CALL_OW 257
45114: PUSH
45115: LD_INT 5
45117: EQUAL
45118: AND
45119: IFFALSE 45140
// ComBinocular ( unit , x , y ) ;
45121: LD_VAR 0 2
45125: PPUSH
45126: LD_VAR 0 4
45130: PPUSH
45131: LD_VAR 0 5
45135: PPUSH
45136: CALL 49207 0 3
// if selectedUnit then
45140: LD_VAR 0 3
45144: IFFALSE 45204
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
45146: LD_VAR 0 1
45150: PUSH
45151: LD_INT 254
45153: EQUAL
45154: IFFALSE 45171
45156: PUSH
45157: LD_VAR 0 2
45161: PPUSH
45162: CALL_OW 264
45166: PUSH
45167: LD_INT 99
45169: EQUAL
45170: AND
45171: IFFALSE 45188
45173: PUSH
45174: LD_VAR 0 3
45178: PPUSH
45179: CALL_OW 263
45183: PUSH
45184: LD_INT 3
45186: EQUAL
45187: AND
45188: IFFALSE 45204
// HackDestroyVehicle ( unit , selectedUnit ) ;
45190: LD_VAR 0 2
45194: PPUSH
45195: LD_VAR 0 3
45199: PPUSH
45200: CALL 47494 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
45204: LD_VAR 0 1
45208: PUSH
45209: LD_INT 255
45211: EQUAL
45212: IFFALSE 45236
45214: PUSH
45215: LD_VAR 0 2
45219: PPUSH
45220: CALL_OW 264
45224: PUSH
45225: LD_INT 14
45227: PUSH
45228: LD_INT 53
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: IN
45235: AND
45236: IFFALSE 45254
45238: PUSH
45239: LD_VAR 0 4
45243: PPUSH
45244: LD_VAR 0 5
45248: PPUSH
45249: CALL_OW 488
45253: AND
45254: IFFALSE 45278
// CutTreeXYR ( unit , x , y , 12 ) ;
45256: LD_VAR 0 2
45260: PPUSH
45261: LD_VAR 0 4
45265: PPUSH
45266: LD_VAR 0 5
45270: PPUSH
45271: LD_INT 12
45273: PPUSH
45274: CALL 45469 0 4
// if cmd = 256 then
45278: LD_VAR 0 1
45282: PUSH
45283: LD_INT 256
45285: EQUAL
45286: IFFALSE 45307
// SetFactoryWaypoint ( unit , x , y ) ;
45288: LD_VAR 0 2
45292: PPUSH
45293: LD_VAR 0 4
45297: PPUSH
45298: LD_VAR 0 5
45302: PPUSH
45303: CALL 65111 0 3
// if cmd = 257 then
45307: LD_VAR 0 1
45311: PUSH
45312: LD_INT 257
45314: EQUAL
45315: IFFALSE 45336
// SetWarehouseGatheringPoint ( unit , x , y ) ;
45317: LD_VAR 0 2
45321: PPUSH
45322: LD_VAR 0 4
45326: PPUSH
45327: LD_VAR 0 5
45331: PPUSH
45332: CALL 65607 0 3
// if cmd = 258 then
45336: LD_VAR 0 1
45340: PUSH
45341: LD_INT 258
45343: EQUAL
45344: IFFALSE 45368
// BurnTreeXYR ( unit , x , y , 8 ) ;
45346: LD_VAR 0 2
45350: PPUSH
45351: LD_VAR 0 4
45355: PPUSH
45356: LD_VAR 0 5
45360: PPUSH
45361: LD_INT 8
45363: PPUSH
45364: CALL 45869 0 4
// end ;
45368: LD_VAR 0 6
45372: RET
// export function ComRadiation ( un ) ; var eff ; begin
45373: LD_INT 0
45375: PPUSH
45376: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
45377: LD_VAR 0 1
45381: PPUSH
45382: CALL_OW 264
45386: PUSH
45387: LD_INT 91
45389: NONEQUAL
45390: IFFALSE 45394
// exit ;
45392: GO 45464
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45394: LD_INT 68
45396: PPUSH
45397: LD_VAR 0 1
45401: PPUSH
45402: CALL_OW 255
45406: PPUSH
45407: CALL_OW 321
45411: PUSH
45412: LD_INT 2
45414: EQUAL
45415: IFFALSE 45427
// eff := 50 else
45417: LD_ADDR_VAR 0 3
45421: PUSH
45422: LD_INT 50
45424: ST_TO_ADDR
45425: GO 45435
// eff := 25 ;
45427: LD_ADDR_VAR 0 3
45431: PUSH
45432: LD_INT 25
45434: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45435: LD_VAR 0 1
45439: PPUSH
45440: CALL_OW 250
45444: PPUSH
45445: LD_VAR 0 1
45449: PPUSH
45450: CALL_OW 251
45454: PPUSH
45455: LD_VAR 0 3
45459: PPUSH
45460: CALL_OW 495
// end ;
45464: LD_VAR 0 2
45468: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45469: LD_INT 0
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
45480: LD_VAR 0 1
45484: PPUSH
45485: CALL_OW 302
45489: NOT
45490: IFTRUE 45509
45492: PUSH
45493: LD_VAR 0 2
45497: PPUSH
45498: LD_VAR 0 3
45502: PPUSH
45503: CALL_OW 488
45507: NOT
45508: OR
45509: IFTRUE 45518
45511: PUSH
45512: LD_VAR 0 4
45516: NOT
45517: OR
45518: IFFALSE 45522
// exit ;
45520: GO 45864
// list := [ ] ;
45522: LD_ADDR_VAR 0 13
45526: PUSH
45527: EMPTY
45528: ST_TO_ADDR
// if x - r < 0 then
45529: LD_VAR 0 2
45533: PUSH
45534: LD_VAR 0 4
45538: MINUS
45539: PUSH
45540: LD_INT 0
45542: LESS
45543: IFFALSE 45555
// min_x := 0 else
45545: LD_ADDR_VAR 0 7
45549: PUSH
45550: LD_INT 0
45552: ST_TO_ADDR
45553: GO 45571
// min_x := x - r ;
45555: LD_ADDR_VAR 0 7
45559: PUSH
45560: LD_VAR 0 2
45564: PUSH
45565: LD_VAR 0 4
45569: MINUS
45570: ST_TO_ADDR
// if y - r < 0 then
45571: LD_VAR 0 3
45575: PUSH
45576: LD_VAR 0 4
45580: MINUS
45581: PUSH
45582: LD_INT 0
45584: LESS
45585: IFFALSE 45597
// min_y := 0 else
45587: LD_ADDR_VAR 0 8
45591: PUSH
45592: LD_INT 0
45594: ST_TO_ADDR
45595: GO 45613
// min_y := y - r ;
45597: LD_ADDR_VAR 0 8
45601: PUSH
45602: LD_VAR 0 3
45606: PUSH
45607: LD_VAR 0 4
45611: MINUS
45612: ST_TO_ADDR
// max_x := x + r ;
45613: LD_ADDR_VAR 0 9
45617: PUSH
45618: LD_VAR 0 2
45622: PUSH
45623: LD_VAR 0 4
45627: PLUS
45628: ST_TO_ADDR
// max_y := y + r ;
45629: LD_ADDR_VAR 0 10
45633: PUSH
45634: LD_VAR 0 3
45638: PUSH
45639: LD_VAR 0 4
45643: PLUS
45644: ST_TO_ADDR
// for _x = min_x to max_x do
45645: LD_ADDR_VAR 0 11
45649: PUSH
45650: DOUBLE
45651: LD_VAR 0 7
45655: DEC
45656: ST_TO_ADDR
45657: LD_VAR 0 9
45661: PUSH
45662: FOR_TO
45663: IFFALSE 45782
// for _y = min_y to max_y do
45665: LD_ADDR_VAR 0 12
45669: PUSH
45670: DOUBLE
45671: LD_VAR 0 8
45675: DEC
45676: ST_TO_ADDR
45677: LD_VAR 0 10
45681: PUSH
45682: FOR_TO
45683: IFFALSE 45778
// begin if not ValidHex ( _x , _y ) then
45685: LD_VAR 0 11
45689: PPUSH
45690: LD_VAR 0 12
45694: PPUSH
45695: CALL_OW 488
45699: NOT
45700: IFFALSE 45704
// continue ;
45702: GO 45682
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45704: LD_VAR 0 11
45708: PPUSH
45709: LD_VAR 0 12
45713: PPUSH
45714: CALL_OW 351
45718: IFFALSE 45736
45720: PUSH
45721: LD_VAR 0 11
45725: PPUSH
45726: LD_VAR 0 12
45730: PPUSH
45731: CALL_OW 554
45735: AND
45736: IFFALSE 45776
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45738: LD_ADDR_VAR 0 13
45742: PUSH
45743: LD_VAR 0 13
45747: PPUSH
45748: LD_VAR 0 13
45752: PUSH
45753: LD_INT 1
45755: PLUS
45756: PPUSH
45757: LD_VAR 0 11
45761: PUSH
45762: LD_VAR 0 12
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PPUSH
45771: CALL_OW 2
45775: ST_TO_ADDR
// end ;
45776: GO 45682
45778: POP
45779: POP
45780: GO 45662
45782: POP
45783: POP
// if not list then
45784: LD_VAR 0 13
45788: NOT
45789: IFFALSE 45793
// exit ;
45791: GO 45864
// for i in list do
45793: LD_ADDR_VAR 0 6
45797: PUSH
45798: LD_VAR 0 13
45802: PUSH
45803: FOR_IN
45804: IFFALSE 45862
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45806: LD_VAR 0 1
45810: PPUSH
45811: LD_STRING M
45813: PUSH
45814: LD_VAR 0 6
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PUSH
45823: LD_VAR 0 6
45827: PUSH
45828: LD_INT 2
45830: ARRAY
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: PPUSH
45856: CALL_OW 447
45860: GO 45803
45862: POP
45863: POP
// end ;
45864: LD_VAR 0 5
45868: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
45869: LD_INT 0
45871: PPUSH
45872: PPUSH
45873: PPUSH
45874: PPUSH
45875: PPUSH
45876: PPUSH
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
45881: LD_VAR 0 1
45885: PPUSH
45886: CALL_OW 302
45890: NOT
45891: IFTRUE 45910
45893: PUSH
45894: LD_VAR 0 2
45898: PPUSH
45899: LD_VAR 0 3
45903: PPUSH
45904: CALL_OW 488
45908: NOT
45909: OR
45910: IFTRUE 45919
45912: PUSH
45913: LD_VAR 0 4
45917: NOT
45918: OR
45919: IFFALSE 45923
// exit ;
45921: GO 46440
// list := [ ] ;
45923: LD_ADDR_VAR 0 13
45927: PUSH
45928: EMPTY
45929: ST_TO_ADDR
// if x - r < 0 then
45930: LD_VAR 0 2
45934: PUSH
45935: LD_VAR 0 4
45939: MINUS
45940: PUSH
45941: LD_INT 0
45943: LESS
45944: IFFALSE 45956
// min_x := 0 else
45946: LD_ADDR_VAR 0 7
45950: PUSH
45951: LD_INT 0
45953: ST_TO_ADDR
45954: GO 45972
// min_x := x - r ;
45956: LD_ADDR_VAR 0 7
45960: PUSH
45961: LD_VAR 0 2
45965: PUSH
45966: LD_VAR 0 4
45970: MINUS
45971: ST_TO_ADDR
// if y - r < 0 then
45972: LD_VAR 0 3
45976: PUSH
45977: LD_VAR 0 4
45981: MINUS
45982: PUSH
45983: LD_INT 0
45985: LESS
45986: IFFALSE 45998
// min_y := 0 else
45988: LD_ADDR_VAR 0 8
45992: PUSH
45993: LD_INT 0
45995: ST_TO_ADDR
45996: GO 46014
// min_y := y - r ;
45998: LD_ADDR_VAR 0 8
46002: PUSH
46003: LD_VAR 0 3
46007: PUSH
46008: LD_VAR 0 4
46012: MINUS
46013: ST_TO_ADDR
// max_x := x + r ;
46014: LD_ADDR_VAR 0 9
46018: PUSH
46019: LD_VAR 0 2
46023: PUSH
46024: LD_VAR 0 4
46028: PLUS
46029: ST_TO_ADDR
// max_y := y + r ;
46030: LD_ADDR_VAR 0 10
46034: PUSH
46035: LD_VAR 0 3
46039: PUSH
46040: LD_VAR 0 4
46044: PLUS
46045: ST_TO_ADDR
// for _x = min_x to max_x do
46046: LD_ADDR_VAR 0 11
46050: PUSH
46051: DOUBLE
46052: LD_VAR 0 7
46056: DEC
46057: ST_TO_ADDR
46058: LD_VAR 0 9
46062: PUSH
46063: FOR_TO
46064: IFFALSE 46183
// for _y = min_y to max_y do
46066: LD_ADDR_VAR 0 12
46070: PUSH
46071: DOUBLE
46072: LD_VAR 0 8
46076: DEC
46077: ST_TO_ADDR
46078: LD_VAR 0 10
46082: PUSH
46083: FOR_TO
46084: IFFALSE 46179
// begin if not ValidHex ( _x , _y ) then
46086: LD_VAR 0 11
46090: PPUSH
46091: LD_VAR 0 12
46095: PPUSH
46096: CALL_OW 488
46100: NOT
46101: IFFALSE 46105
// continue ;
46103: GO 46083
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46105: LD_VAR 0 11
46109: PPUSH
46110: LD_VAR 0 12
46114: PPUSH
46115: CALL_OW 351
46119: IFFALSE 46137
46121: PUSH
46122: LD_VAR 0 11
46126: PPUSH
46127: LD_VAR 0 12
46131: PPUSH
46132: CALL_OW 554
46136: AND
46137: IFFALSE 46177
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46139: LD_ADDR_VAR 0 13
46143: PUSH
46144: LD_VAR 0 13
46148: PPUSH
46149: LD_VAR 0 13
46153: PUSH
46154: LD_INT 1
46156: PLUS
46157: PPUSH
46158: LD_VAR 0 11
46162: PUSH
46163: LD_VAR 0 12
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PPUSH
46172: CALL_OW 2
46176: ST_TO_ADDR
// end ;
46177: GO 46083
46179: POP
46180: POP
46181: GO 46063
46183: POP
46184: POP
// if not list then
46185: LD_VAR 0 13
46189: NOT
46190: IFFALSE 46194
// exit ;
46192: GO 46440
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
46194: LD_ADDR_VAR 0 13
46198: PUSH
46199: LD_VAR 0 1
46203: PPUSH
46204: LD_VAR 0 13
46208: PPUSH
46209: LD_INT 1
46211: PPUSH
46212: LD_INT 1
46214: PPUSH
46215: CALL 6114 0 4
46219: ST_TO_ADDR
// ComStop ( flame ) ;
46220: LD_VAR 0 1
46224: PPUSH
46225: CALL_OW 141
// for i in list do
46229: LD_ADDR_VAR 0 6
46233: PUSH
46234: LD_VAR 0 13
46238: PUSH
46239: FOR_IN
46240: IFFALSE 46271
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
46242: LD_VAR 0 1
46246: PPUSH
46247: LD_VAR 0 6
46251: PUSH
46252: LD_INT 1
46254: ARRAY
46255: PPUSH
46256: LD_VAR 0 6
46260: PUSH
46261: LD_INT 2
46263: ARRAY
46264: PPUSH
46265: CALL_OW 176
46269: GO 46239
46271: POP
46272: POP
// repeat wait ( 0 0$1 ) ;
46273: LD_INT 35
46275: PPUSH
46276: CALL_OW 67
// task := GetTaskList ( flame ) ;
46280: LD_ADDR_VAR 0 14
46284: PUSH
46285: LD_VAR 0 1
46289: PPUSH
46290: CALL_OW 437
46294: ST_TO_ADDR
// if not task then
46295: LD_VAR 0 14
46299: NOT
46300: IFFALSE 46304
// exit ;
46302: GO 46440
// if task [ 1 ] [ 1 ] <> | then
46304: LD_VAR 0 14
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PUSH
46313: LD_INT 1
46315: ARRAY
46316: PUSH
46317: LD_STRING |
46319: NONEQUAL
46320: IFFALSE 46324
// exit ;
46322: GO 46440
// _x := task [ 1 ] [ 2 ] ;
46324: LD_ADDR_VAR 0 11
46328: PUSH
46329: LD_VAR 0 14
46333: PUSH
46334: LD_INT 1
46336: ARRAY
46337: PUSH
46338: LD_INT 2
46340: ARRAY
46341: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
46342: LD_ADDR_VAR 0 12
46346: PUSH
46347: LD_VAR 0 14
46351: PUSH
46352: LD_INT 1
46354: ARRAY
46355: PUSH
46356: LD_INT 3
46358: ARRAY
46359: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
46360: LD_VAR 0 11
46364: PPUSH
46365: LD_VAR 0 12
46369: PPUSH
46370: CALL_OW 351
46374: NOT
46375: IFTRUE 46394
46377: PUSH
46378: LD_VAR 0 11
46382: PPUSH
46383: LD_VAR 0 12
46387: PPUSH
46388: CALL_OW 554
46392: NOT
46393: OR
46394: IFFALSE 46428
// begin task := Delete ( task , 1 ) ;
46396: LD_ADDR_VAR 0 14
46400: PUSH
46401: LD_VAR 0 14
46405: PPUSH
46406: LD_INT 1
46408: PPUSH
46409: CALL_OW 3
46413: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
46414: LD_VAR 0 1
46418: PPUSH
46419: LD_VAR 0 14
46423: PPUSH
46424: CALL_OW 446
// end ; until not HasTask ( flame ) ;
46428: LD_VAR 0 1
46432: PPUSH
46433: CALL_OW 314
46437: NOT
46438: IFFALSE 46273
// end ;
46440: LD_VAR 0 5
46444: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46445: LD_EXP 2
46449: NOT
46450: IFFALSE 46500
46452: GO 46454
46454: DISABLE
// begin initHack := true ;
46455: LD_ADDR_EXP 2
46459: PUSH
46460: LD_INT 1
46462: ST_TO_ADDR
// hackTanks := [ ] ;
46463: LD_ADDR_EXP 3
46467: PUSH
46468: EMPTY
46469: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46470: LD_ADDR_EXP 4
46474: PUSH
46475: EMPTY
46476: ST_TO_ADDR
// hackLimit := 3 ;
46477: LD_ADDR_EXP 5
46481: PUSH
46482: LD_INT 3
46484: ST_TO_ADDR
// hackDist := 12 ;
46485: LD_ADDR_EXP 6
46489: PUSH
46490: LD_INT 12
46492: ST_TO_ADDR
// hackCounter := [ ] ;
46493: LD_ADDR_EXP 7
46497: PUSH
46498: EMPTY
46499: ST_TO_ADDR
// end ;
46500: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46501: LD_EXP 2
46505: IFFALSE 46523
46507: PUSH
46508: LD_INT 34
46510: PUSH
46511: LD_INT 99
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PPUSH
46518: CALL_OW 69
46522: AND
46523: IFFALSE 46776
46525: GO 46527
46527: DISABLE
46528: LD_INT 0
46530: PPUSH
46531: PPUSH
// begin enable ;
46532: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46533: LD_ADDR_VAR 0 1
46537: PUSH
46538: LD_INT 34
46540: PUSH
46541: LD_INT 99
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PPUSH
46548: CALL_OW 69
46552: PUSH
46553: FOR_IN
46554: IFFALSE 46774
// begin if not i in hackTanks then
46556: LD_VAR 0 1
46560: PUSH
46561: LD_EXP 3
46565: IN
46566: NOT
46567: IFFALSE 46650
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
46569: LD_ADDR_EXP 3
46573: PUSH
46574: LD_EXP 3
46578: PPUSH
46579: LD_EXP 3
46583: PUSH
46584: LD_INT 1
46586: PLUS
46587: PPUSH
46588: LD_VAR 0 1
46592: PPUSH
46593: CALL_OW 1
46597: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
46598: LD_ADDR_EXP 4
46602: PUSH
46603: LD_EXP 4
46607: PPUSH
46608: LD_EXP 4
46612: PUSH
46613: LD_INT 1
46615: PLUS
46616: PPUSH
46617: EMPTY
46618: PPUSH
46619: CALL_OW 1
46623: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
46624: LD_ADDR_EXP 7
46628: PUSH
46629: LD_EXP 7
46633: PPUSH
46634: LD_EXP 7
46638: PUSH
46639: LD_INT 1
46641: PLUS
46642: PPUSH
46643: EMPTY
46644: PPUSH
46645: CALL_OW 1
46649: ST_TO_ADDR
// end ; if not IsOk ( i ) then
46650: LD_VAR 0 1
46654: PPUSH
46655: CALL_OW 302
46659: NOT
46660: IFFALSE 46673
// begin HackUnlinkAll ( i ) ;
46662: LD_VAR 0 1
46666: PPUSH
46667: CALL 46779 0 1
// continue ;
46671: GO 46553
// end ; HackCheckCapturedStatus ( i ) ;
46673: LD_VAR 0 1
46677: PPUSH
46678: CALL 47224 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
46682: LD_ADDR_VAR 0 2
46686: PUSH
46687: LD_INT 81
46689: PUSH
46690: LD_VAR 0 1
46694: PPUSH
46695: CALL_OW 255
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 33
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 91
46716: PUSH
46717: LD_VAR 0 1
46721: PUSH
46722: LD_EXP 6
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 50
46734: PUSH
46735: EMPTY
46736: LIST
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: PPUSH
46744: CALL_OW 69
46748: ST_TO_ADDR
// if not tmp then
46749: LD_VAR 0 2
46753: NOT
46754: IFFALSE 46758
// continue ;
46756: GO 46553
// HackLink ( i , tmp ) ;
46758: LD_VAR 0 1
46762: PPUSH
46763: LD_VAR 0 2
46767: PPUSH
46768: CALL 46915 0 2
// end ;
46772: GO 46553
46774: POP
46775: POP
// end ;
46776: PPOPN 2
46778: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
46779: LD_INT 0
46781: PPUSH
46782: PPUSH
46783: PPUSH
// if not hack in hackTanks then
46784: LD_VAR 0 1
46788: PUSH
46789: LD_EXP 3
46793: IN
46794: NOT
46795: IFFALSE 46799
// exit ;
46797: GO 46910
// index := GetElementIndex ( hackTanks , hack ) ;
46799: LD_ADDR_VAR 0 4
46803: PUSH
46804: LD_EXP 3
46808: PPUSH
46809: LD_VAR 0 1
46813: PPUSH
46814: CALL 5409 0 2
46818: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
46819: LD_EXP 4
46823: PUSH
46824: LD_VAR 0 4
46828: ARRAY
46829: IFFALSE 46910
// begin for i in hackTanksCaptured [ index ] do
46831: LD_ADDR_VAR 0 3
46835: PUSH
46836: LD_EXP 4
46840: PUSH
46841: LD_VAR 0 4
46845: ARRAY
46846: PUSH
46847: FOR_IN
46848: IFFALSE 46874
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
46850: LD_VAR 0 3
46854: PUSH
46855: LD_INT 1
46857: ARRAY
46858: PPUSH
46859: LD_VAR 0 3
46863: PUSH
46864: LD_INT 2
46866: ARRAY
46867: PPUSH
46868: CALL_OW 235
46872: GO 46847
46874: POP
46875: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
46876: LD_ADDR_EXP 4
46880: PUSH
46881: LD_EXP 4
46885: PPUSH
46886: LD_VAR 0 4
46890: PPUSH
46891: EMPTY
46892: PPUSH
46893: CALL_OW 1
46897: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
46898: LD_VAR 0 1
46902: PPUSH
46903: LD_INT 0
46905: PPUSH
46906: CALL_OW 505
// end ; end ;
46910: LD_VAR 0 2
46914: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
46915: LD_INT 0
46917: PPUSH
46918: PPUSH
46919: PPUSH
// if not hack in hackTanks or not vehicles then
46920: LD_VAR 0 1
46924: PUSH
46925: LD_EXP 3
46929: IN
46930: NOT
46931: IFTRUE 46940
46933: PUSH
46934: LD_VAR 0 2
46938: NOT
46939: OR
46940: IFFALSE 46944
// exit ;
46942: GO 47219
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
46944: LD_ADDR_VAR 0 2
46948: PUSH
46949: LD_VAR 0 1
46953: PPUSH
46954: LD_VAR 0 2
46958: PPUSH
46959: LD_INT 1
46961: PPUSH
46962: LD_INT 1
46964: PPUSH
46965: CALL 6061 0 4
46969: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
46970: LD_ADDR_VAR 0 5
46974: PUSH
46975: LD_EXP 3
46979: PPUSH
46980: LD_VAR 0 1
46984: PPUSH
46985: CALL 5409 0 2
46989: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
46990: LD_EXP 4
46994: PUSH
46995: LD_VAR 0 5
46999: ARRAY
47000: PUSH
47001: LD_EXP 5
47005: LESS
47006: IFFALSE 47195
// begin for i := 1 to vehicles do
47008: LD_ADDR_VAR 0 4
47012: PUSH
47013: DOUBLE
47014: LD_INT 1
47016: DEC
47017: ST_TO_ADDR
47018: LD_VAR 0 2
47022: PUSH
47023: FOR_TO
47024: IFFALSE 47193
// begin if hackTanksCaptured [ index ] = hackLimit then
47026: LD_EXP 4
47030: PUSH
47031: LD_VAR 0 5
47035: ARRAY
47036: PUSH
47037: LD_EXP 5
47041: EQUAL
47042: IFFALSE 47046
// break ;
47044: GO 47193
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47046: LD_ADDR_EXP 7
47050: PUSH
47051: LD_EXP 7
47055: PPUSH
47056: LD_VAR 0 5
47060: PPUSH
47061: LD_EXP 7
47065: PUSH
47066: LD_VAR 0 5
47070: ARRAY
47071: PUSH
47072: LD_INT 1
47074: PLUS
47075: PPUSH
47076: CALL_OW 1
47080: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47081: LD_ADDR_EXP 4
47085: PUSH
47086: LD_EXP 4
47090: PPUSH
47091: LD_VAR 0 5
47095: PUSH
47096: LD_EXP 4
47100: PUSH
47101: LD_VAR 0 5
47105: ARRAY
47106: PUSH
47107: LD_INT 1
47109: PLUS
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PPUSH
47115: LD_VAR 0 2
47119: PUSH
47120: LD_VAR 0 4
47124: ARRAY
47125: PUSH
47126: LD_VAR 0 2
47130: PUSH
47131: LD_VAR 0 4
47135: ARRAY
47136: PPUSH
47137: CALL_OW 255
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PPUSH
47146: CALL 5626 0 3
47150: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47151: LD_VAR 0 2
47155: PUSH
47156: LD_VAR 0 4
47160: ARRAY
47161: PPUSH
47162: LD_VAR 0 1
47166: PPUSH
47167: CALL_OW 255
47171: PPUSH
47172: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47176: LD_VAR 0 2
47180: PUSH
47181: LD_VAR 0 4
47185: ARRAY
47186: PPUSH
47187: CALL_OW 141
// end ;
47191: GO 47023
47193: POP
47194: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47195: LD_VAR 0 1
47199: PPUSH
47200: LD_EXP 4
47204: PUSH
47205: LD_VAR 0 5
47209: ARRAY
47210: PUSH
47211: LD_INT 0
47213: PLUS
47214: PPUSH
47215: CALL_OW 505
// end ;
47219: LD_VAR 0 3
47223: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47224: LD_INT 0
47226: PPUSH
47227: PPUSH
47228: PPUSH
47229: PPUSH
// if not hack in hackTanks then
47230: LD_VAR 0 1
47234: PUSH
47235: LD_EXP 3
47239: IN
47240: NOT
47241: IFFALSE 47245
// exit ;
47243: GO 47489
// index := GetElementIndex ( hackTanks , hack ) ;
47245: LD_ADDR_VAR 0 4
47249: PUSH
47250: LD_EXP 3
47254: PPUSH
47255: LD_VAR 0 1
47259: PPUSH
47260: CALL 5409 0 2
47264: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47265: LD_ADDR_VAR 0 3
47269: PUSH
47270: DOUBLE
47271: LD_EXP 4
47275: PUSH
47276: LD_VAR 0 4
47280: ARRAY
47281: INC
47282: ST_TO_ADDR
47283: LD_INT 1
47285: PUSH
47286: FOR_DOWNTO
47287: IFFALSE 47463
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47289: LD_ADDR_VAR 0 5
47293: PUSH
47294: LD_EXP 4
47298: PUSH
47299: LD_VAR 0 4
47303: ARRAY
47304: PUSH
47305: LD_VAR 0 3
47309: ARRAY
47310: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47311: LD_VAR 0 5
47315: PUSH
47316: LD_INT 1
47318: ARRAY
47319: PPUSH
47320: CALL_OW 302
47324: NOT
47325: IFTRUE 47353
47327: PUSH
47328: LD_VAR 0 5
47332: PUSH
47333: LD_INT 1
47335: ARRAY
47336: PPUSH
47337: CALL_OW 255
47341: PUSH
47342: LD_VAR 0 1
47346: PPUSH
47347: CALL_OW 255
47351: NONEQUAL
47352: OR
47353: IFFALSE 47461
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47355: LD_VAR 0 5
47359: PUSH
47360: LD_INT 1
47362: ARRAY
47363: PPUSH
47364: CALL_OW 305
47368: IFFALSE 47396
47370: PUSH
47371: LD_VAR 0 5
47375: PUSH
47376: LD_INT 1
47378: ARRAY
47379: PPUSH
47380: CALL_OW 255
47384: PUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: CALL_OW 255
47394: EQUAL
47395: AND
47396: IFFALSE 47420
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47398: LD_VAR 0 5
47402: PUSH
47403: LD_INT 1
47405: ARRAY
47406: PPUSH
47407: LD_VAR 0 5
47411: PUSH
47412: LD_INT 2
47414: ARRAY
47415: PPUSH
47416: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47420: LD_ADDR_EXP 4
47424: PUSH
47425: LD_EXP 4
47429: PPUSH
47430: LD_VAR 0 4
47434: PPUSH
47435: LD_EXP 4
47439: PUSH
47440: LD_VAR 0 4
47444: ARRAY
47445: PPUSH
47446: LD_VAR 0 3
47450: PPUSH
47451: CALL_OW 3
47455: PPUSH
47456: CALL_OW 1
47460: ST_TO_ADDR
// end ; end ;
47461: GO 47286
47463: POP
47464: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47465: LD_VAR 0 1
47469: PPUSH
47470: LD_EXP 4
47474: PUSH
47475: LD_VAR 0 4
47479: ARRAY
47480: PUSH
47481: LD_INT 0
47483: PLUS
47484: PPUSH
47485: CALL_OW 505
// end ;
47489: LD_VAR 0 2
47493: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47494: LD_INT 0
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
// if not hack in hackTanks then
47500: LD_VAR 0 1
47504: PUSH
47505: LD_EXP 3
47509: IN
47510: NOT
47511: IFFALSE 47515
// exit ;
47513: GO 47600
// index := GetElementIndex ( hackTanks , hack ) ;
47515: LD_ADDR_VAR 0 5
47519: PUSH
47520: LD_EXP 3
47524: PPUSH
47525: LD_VAR 0 1
47529: PPUSH
47530: CALL 5409 0 2
47534: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47535: LD_ADDR_VAR 0 4
47539: PUSH
47540: DOUBLE
47541: LD_INT 1
47543: DEC
47544: ST_TO_ADDR
47545: LD_EXP 4
47549: PUSH
47550: LD_VAR 0 5
47554: ARRAY
47555: PUSH
47556: FOR_TO
47557: IFFALSE 47598
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47559: LD_EXP 4
47563: PUSH
47564: LD_VAR 0 5
47568: ARRAY
47569: PUSH
47570: LD_VAR 0 4
47574: ARRAY
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: PUSH
47580: LD_VAR 0 2
47584: EQUAL
47585: IFFALSE 47596
// KillUnit ( vehicle ) ;
47587: LD_VAR 0 2
47591: PPUSH
47592: CALL_OW 66
47596: GO 47556
47598: POP
47599: POP
// end ;
47600: LD_VAR 0 3
47604: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
47605: LD_EXP 8
47609: NOT
47610: IFFALSE 47645
47612: GO 47614
47614: DISABLE
// begin initMiner := true ;
47615: LD_ADDR_EXP 8
47619: PUSH
47620: LD_INT 1
47622: ST_TO_ADDR
// minersList := [ ] ;
47623: LD_ADDR_EXP 9
47627: PUSH
47628: EMPTY
47629: ST_TO_ADDR
// minerMinesList := [ ] ;
47630: LD_ADDR_EXP 10
47634: PUSH
47635: EMPTY
47636: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
47637: LD_ADDR_EXP 11
47641: PUSH
47642: LD_INT 5
47644: ST_TO_ADDR
// end ;
47645: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
47646: LD_EXP 8
47650: IFFALSE 47668
47652: PUSH
47653: LD_INT 34
47655: PUSH
47656: LD_INT 81
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PPUSH
47663: CALL_OW 69
47667: AND
47668: IFFALSE 48131
47670: GO 47672
47672: DISABLE
47673: LD_INT 0
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
// begin enable ;
47679: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
47680: LD_ADDR_VAR 0 1
47684: PUSH
47685: LD_INT 34
47687: PUSH
47688: LD_INT 81
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PPUSH
47695: CALL_OW 69
47699: PUSH
47700: FOR_IN
47701: IFFALSE 47773
// begin if not i in minersList then
47703: LD_VAR 0 1
47707: PUSH
47708: LD_EXP 9
47712: IN
47713: NOT
47714: IFFALSE 47771
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
47716: LD_ADDR_EXP 9
47720: PUSH
47721: LD_EXP 9
47725: PPUSH
47726: LD_EXP 9
47730: PUSH
47731: LD_INT 1
47733: PLUS
47734: PPUSH
47735: LD_VAR 0 1
47739: PPUSH
47740: CALL_OW 1
47744: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
47745: LD_ADDR_EXP 10
47749: PUSH
47750: LD_EXP 10
47754: PPUSH
47755: LD_EXP 10
47759: PUSH
47760: LD_INT 1
47762: PLUS
47763: PPUSH
47764: EMPTY
47765: PPUSH
47766: CALL_OW 1
47770: ST_TO_ADDR
// end end ;
47771: GO 47700
47773: POP
47774: POP
// for i := minerMinesList downto 1 do
47775: LD_ADDR_VAR 0 1
47779: PUSH
47780: DOUBLE
47781: LD_EXP 10
47785: INC
47786: ST_TO_ADDR
47787: LD_INT 1
47789: PUSH
47790: FOR_DOWNTO
47791: IFFALSE 48129
// begin if IsLive ( minersList [ i ] ) then
47793: LD_EXP 9
47797: PUSH
47798: LD_VAR 0 1
47802: ARRAY
47803: PPUSH
47804: CALL_OW 300
47808: IFFALSE 47836
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
47810: LD_EXP 9
47814: PUSH
47815: LD_VAR 0 1
47819: ARRAY
47820: PPUSH
47821: LD_EXP 10
47825: PUSH
47826: LD_VAR 0 1
47830: ARRAY
47831: PPUSH
47832: CALL_OW 505
// if not minerMinesList [ i ] then
47836: LD_EXP 10
47840: PUSH
47841: LD_VAR 0 1
47845: ARRAY
47846: NOT
47847: IFFALSE 47851
// continue ;
47849: GO 47790
// for j := minerMinesList [ i ] downto 1 do
47851: LD_ADDR_VAR 0 2
47855: PUSH
47856: DOUBLE
47857: LD_EXP 10
47861: PUSH
47862: LD_VAR 0 1
47866: ARRAY
47867: INC
47868: ST_TO_ADDR
47869: LD_INT 1
47871: PUSH
47872: FOR_DOWNTO
47873: IFFALSE 48125
// begin side := GetSide ( minersList [ i ] ) ;
47875: LD_ADDR_VAR 0 3
47879: PUSH
47880: LD_EXP 9
47884: PUSH
47885: LD_VAR 0 1
47889: ARRAY
47890: PPUSH
47891: CALL_OW 255
47895: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
47896: LD_ADDR_VAR 0 4
47900: PUSH
47901: LD_EXP 10
47905: PUSH
47906: LD_VAR 0 1
47910: ARRAY
47911: PUSH
47912: LD_VAR 0 2
47916: ARRAY
47917: PUSH
47918: LD_INT 1
47920: ARRAY
47921: PPUSH
47922: LD_EXP 10
47926: PUSH
47927: LD_VAR 0 1
47931: ARRAY
47932: PUSH
47933: LD_VAR 0 2
47937: ARRAY
47938: PUSH
47939: LD_INT 2
47941: ARRAY
47942: PPUSH
47943: CALL_OW 428
47947: ST_TO_ADDR
// if not tmp then
47948: LD_VAR 0 4
47952: NOT
47953: IFFALSE 47957
// continue ;
47955: GO 47872
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
47957: LD_VAR 0 4
47961: PUSH
47962: LD_INT 81
47964: PUSH
47965: LD_VAR 0 3
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PPUSH
47974: CALL_OW 69
47978: IN
47979: IFFALSE 48029
47981: PUSH
47982: LD_EXP 10
47986: PUSH
47987: LD_VAR 0 1
47991: ARRAY
47992: PUSH
47993: LD_VAR 0 2
47997: ARRAY
47998: PUSH
47999: LD_INT 1
48001: ARRAY
48002: PPUSH
48003: LD_EXP 10
48007: PUSH
48008: LD_VAR 0 1
48012: ARRAY
48013: PUSH
48014: LD_VAR 0 2
48018: ARRAY
48019: PUSH
48020: LD_INT 2
48022: ARRAY
48023: PPUSH
48024: CALL_OW 458
48028: AND
48029: IFFALSE 48123
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48031: LD_EXP 10
48035: PUSH
48036: LD_VAR 0 1
48040: ARRAY
48041: PUSH
48042: LD_VAR 0 2
48046: ARRAY
48047: PUSH
48048: LD_INT 1
48050: ARRAY
48051: PPUSH
48052: LD_EXP 10
48056: PUSH
48057: LD_VAR 0 1
48061: ARRAY
48062: PUSH
48063: LD_VAR 0 2
48067: ARRAY
48068: PUSH
48069: LD_INT 2
48071: ARRAY
48072: PPUSH
48073: LD_VAR 0 3
48077: PPUSH
48078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48082: LD_ADDR_EXP 10
48086: PUSH
48087: LD_EXP 10
48091: PPUSH
48092: LD_VAR 0 1
48096: PPUSH
48097: LD_EXP 10
48101: PUSH
48102: LD_VAR 0 1
48106: ARRAY
48107: PPUSH
48108: LD_VAR 0 2
48112: PPUSH
48113: CALL_OW 3
48117: PPUSH
48118: CALL_OW 1
48122: ST_TO_ADDR
// end ; end ;
48123: GO 47872
48125: POP
48126: POP
// end ;
48127: GO 47790
48129: POP
48130: POP
// end ;
48131: PPOPN 4
48133: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48134: LD_INT 0
48136: PPUSH
48137: PPUSH
// result := false ;
48138: LD_ADDR_VAR 0 4
48142: PUSH
48143: LD_INT 0
48145: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48146: LD_VAR 0 1
48150: PPUSH
48151: CALL_OW 264
48155: PUSH
48156: LD_INT 81
48158: EQUAL
48159: NOT
48160: IFFALSE 48164
// exit ;
48162: GO 48408
// index := GetElementIndex ( minersList , unit ) ;
48164: LD_ADDR_VAR 0 5
48168: PUSH
48169: LD_EXP 9
48173: PPUSH
48174: LD_VAR 0 1
48178: PPUSH
48179: CALL 5409 0 2
48183: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48184: LD_EXP 10
48188: PUSH
48189: LD_VAR 0 5
48193: ARRAY
48194: PUSH
48195: LD_EXP 11
48199: GREATEREQUAL
48200: IFFALSE 48204
// exit ;
48202: GO 48408
// ComMoveXY ( unit , x , y ) ;
48204: LD_VAR 0 1
48208: PPUSH
48209: LD_VAR 0 2
48213: PPUSH
48214: LD_VAR 0 3
48218: PPUSH
48219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48223: LD_INT 35
48225: PPUSH
48226: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48230: LD_VAR 0 1
48234: PPUSH
48235: LD_VAR 0 2
48239: PPUSH
48240: LD_VAR 0 3
48244: PPUSH
48245: CALL 37455 0 3
48249: NOT
48250: IFFALSE 48263
48252: PUSH
48253: LD_VAR 0 1
48257: PPUSH
48258: CALL_OW 314
48262: AND
48263: IFFALSE 48267
// exit ;
48265: GO 48408
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48267: LD_VAR 0 2
48271: PPUSH
48272: LD_VAR 0 3
48276: PPUSH
48277: CALL_OW 428
48281: PUSH
48282: LD_VAR 0 1
48286: EQUAL
48287: IFFALSE 48301
48289: PUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: CALL_OW 314
48299: NOT
48300: AND
48301: IFFALSE 48223
// PlaySoundXY ( x , y , PlantMine ) ;
48303: LD_VAR 0 2
48307: PPUSH
48308: LD_VAR 0 3
48312: PPUSH
48313: LD_STRING PlantMine
48315: PPUSH
48316: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48320: LD_VAR 0 2
48324: PPUSH
48325: LD_VAR 0 3
48329: PPUSH
48330: LD_VAR 0 1
48334: PPUSH
48335: CALL_OW 255
48339: PPUSH
48340: LD_INT 0
48342: PPUSH
48343: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48347: LD_ADDR_EXP 10
48351: PUSH
48352: LD_EXP 10
48356: PPUSH
48357: LD_VAR 0 5
48361: PUSH
48362: LD_EXP 10
48366: PUSH
48367: LD_VAR 0 5
48371: ARRAY
48372: PUSH
48373: LD_INT 1
48375: PLUS
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PPUSH
48381: LD_VAR 0 2
48385: PUSH
48386: LD_VAR 0 3
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PPUSH
48395: CALL 5626 0 3
48399: ST_TO_ADDR
// result := true ;
48400: LD_ADDR_VAR 0 4
48404: PUSH
48405: LD_INT 1
48407: ST_TO_ADDR
// end ;
48408: LD_VAR 0 4
48412: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48413: LD_INT 0
48415: PPUSH
48416: PPUSH
48417: PPUSH
// if not unit in minersList then
48418: LD_VAR 0 1
48422: PUSH
48423: LD_EXP 9
48427: IN
48428: NOT
48429: IFFALSE 48433
// exit ;
48431: GO 48827
// index := GetElementIndex ( minersList , unit ) ;
48433: LD_ADDR_VAR 0 6
48437: PUSH
48438: LD_EXP 9
48442: PPUSH
48443: LD_VAR 0 1
48447: PPUSH
48448: CALL 5409 0 2
48452: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48453: LD_ADDR_VAR 0 5
48457: PUSH
48458: DOUBLE
48459: LD_EXP 10
48463: PUSH
48464: LD_VAR 0 6
48468: ARRAY
48469: INC
48470: ST_TO_ADDR
48471: LD_INT 1
48473: PUSH
48474: FOR_DOWNTO
48475: IFFALSE 48638
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48477: LD_EXP 10
48481: PUSH
48482: LD_VAR 0 6
48486: ARRAY
48487: PUSH
48488: LD_VAR 0 5
48492: ARRAY
48493: PUSH
48494: LD_INT 1
48496: ARRAY
48497: PUSH
48498: LD_VAR 0 2
48502: EQUAL
48503: IFFALSE 48533
48505: PUSH
48506: LD_EXP 10
48510: PUSH
48511: LD_VAR 0 6
48515: ARRAY
48516: PUSH
48517: LD_VAR 0 5
48521: ARRAY
48522: PUSH
48523: LD_INT 2
48525: ARRAY
48526: PUSH
48527: LD_VAR 0 3
48531: EQUAL
48532: AND
48533: IFFALSE 48636
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48535: LD_EXP 10
48539: PUSH
48540: LD_VAR 0 6
48544: ARRAY
48545: PUSH
48546: LD_VAR 0 5
48550: ARRAY
48551: PUSH
48552: LD_INT 1
48554: ARRAY
48555: PPUSH
48556: LD_EXP 10
48560: PUSH
48561: LD_VAR 0 6
48565: ARRAY
48566: PUSH
48567: LD_VAR 0 5
48571: ARRAY
48572: PUSH
48573: LD_INT 2
48575: ARRAY
48576: PPUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: CALL_OW 255
48586: PPUSH
48587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48591: LD_ADDR_EXP 10
48595: PUSH
48596: LD_EXP 10
48600: PPUSH
48601: LD_VAR 0 6
48605: PPUSH
48606: LD_EXP 10
48610: PUSH
48611: LD_VAR 0 6
48615: ARRAY
48616: PPUSH
48617: LD_VAR 0 5
48621: PPUSH
48622: CALL_OW 3
48626: PPUSH
48627: CALL_OW 1
48631: ST_TO_ADDR
// exit ;
48632: POP
48633: POP
48634: GO 48827
// end ; end ;
48636: GO 48474
48638: POP
48639: POP
// for i := minerMinesList [ index ] downto 1 do
48640: LD_ADDR_VAR 0 5
48644: PUSH
48645: DOUBLE
48646: LD_EXP 10
48650: PUSH
48651: LD_VAR 0 6
48655: ARRAY
48656: INC
48657: ST_TO_ADDR
48658: LD_INT 1
48660: PUSH
48661: FOR_DOWNTO
48662: IFFALSE 48825
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
48664: LD_EXP 10
48668: PUSH
48669: LD_VAR 0 6
48673: ARRAY
48674: PUSH
48675: LD_VAR 0 5
48679: ARRAY
48680: PUSH
48681: LD_INT 1
48683: ARRAY
48684: PPUSH
48685: LD_EXP 10
48689: PUSH
48690: LD_VAR 0 6
48694: ARRAY
48695: PUSH
48696: LD_VAR 0 5
48700: ARRAY
48701: PUSH
48702: LD_INT 2
48704: ARRAY
48705: PPUSH
48706: LD_VAR 0 2
48710: PPUSH
48711: LD_VAR 0 3
48715: PPUSH
48716: CALL_OW 298
48720: PUSH
48721: LD_INT 6
48723: LESS
48724: IFFALSE 48823
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48726: LD_EXP 10
48730: PUSH
48731: LD_VAR 0 6
48735: ARRAY
48736: PUSH
48737: LD_VAR 0 5
48741: ARRAY
48742: PUSH
48743: LD_INT 1
48745: ARRAY
48746: PPUSH
48747: LD_EXP 10
48751: PUSH
48752: LD_VAR 0 6
48756: ARRAY
48757: PUSH
48758: LD_VAR 0 5
48762: ARRAY
48763: PUSH
48764: LD_INT 2
48766: ARRAY
48767: PPUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: CALL_OW 255
48777: PPUSH
48778: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48782: LD_ADDR_EXP 10
48786: PUSH
48787: LD_EXP 10
48791: PPUSH
48792: LD_VAR 0 6
48796: PPUSH
48797: LD_EXP 10
48801: PUSH
48802: LD_VAR 0 6
48806: ARRAY
48807: PPUSH
48808: LD_VAR 0 5
48812: PPUSH
48813: CALL_OW 3
48817: PPUSH
48818: CALL_OW 1
48822: ST_TO_ADDR
// end ; end ;
48823: GO 48661
48825: POP
48826: POP
// end ;
48827: LD_VAR 0 4
48831: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
48832: LD_INT 0
48834: PPUSH
48835: PPUSH
48836: PPUSH
48837: PPUSH
48838: PPUSH
48839: PPUSH
48840: PPUSH
48841: PPUSH
48842: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
48843: LD_VAR 0 1
48847: PPUSH
48848: CALL_OW 264
48852: PUSH
48853: LD_INT 81
48855: EQUAL
48856: NOT
48857: IFTRUE 48872
48859: PUSH
48860: LD_VAR 0 1
48864: PUSH
48865: LD_EXP 9
48869: IN
48870: NOT
48871: OR
48872: IFFALSE 48876
// exit ;
48874: GO 49202
// index := GetElementIndex ( minersList , unit ) ;
48876: LD_ADDR_VAR 0 6
48880: PUSH
48881: LD_EXP 9
48885: PPUSH
48886: LD_VAR 0 1
48890: PPUSH
48891: CALL 5409 0 2
48895: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
48896: LD_ADDR_VAR 0 8
48900: PUSH
48901: LD_EXP 11
48905: PUSH
48906: LD_EXP 10
48910: PUSH
48911: LD_VAR 0 6
48915: ARRAY
48916: MINUS
48917: ST_TO_ADDR
// if not minesFreeAmount then
48918: LD_VAR 0 8
48922: NOT
48923: IFFALSE 48927
// exit ;
48925: GO 49202
// tmp := [ ] ;
48927: LD_ADDR_VAR 0 7
48931: PUSH
48932: EMPTY
48933: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
48934: LD_ADDR_VAR 0 5
48938: PUSH
48939: DOUBLE
48940: LD_INT 1
48942: DEC
48943: ST_TO_ADDR
48944: LD_VAR 0 8
48948: PUSH
48949: FOR_TO
48950: IFFALSE 49149
// begin _d := rand ( 0 , 5 ) ;
48952: LD_ADDR_VAR 0 11
48956: PUSH
48957: LD_INT 0
48959: PPUSH
48960: LD_INT 5
48962: PPUSH
48963: CALL_OW 12
48967: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
48968: LD_ADDR_VAR 0 12
48972: PUSH
48973: LD_INT 2
48975: PPUSH
48976: LD_INT 6
48978: PPUSH
48979: CALL_OW 12
48983: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
48984: LD_ADDR_VAR 0 9
48988: PUSH
48989: LD_VAR 0 2
48993: PPUSH
48994: LD_VAR 0 11
48998: PPUSH
48999: LD_VAR 0 12
49003: PPUSH
49004: CALL_OW 272
49008: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49009: LD_ADDR_VAR 0 10
49013: PUSH
49014: LD_VAR 0 3
49018: PPUSH
49019: LD_VAR 0 11
49023: PPUSH
49024: LD_VAR 0 12
49028: PPUSH
49029: CALL_OW 273
49033: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49034: LD_VAR 0 9
49038: PPUSH
49039: LD_VAR 0 10
49043: PPUSH
49044: CALL_OW 488
49048: IFFALSE 49072
49050: PUSH
49051: LD_VAR 0 9
49055: PUSH
49056: LD_VAR 0 10
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_VAR 0 7
49069: IN
49070: NOT
49071: AND
49072: IFFALSE 49091
49074: PUSH
49075: LD_VAR 0 9
49079: PPUSH
49080: LD_VAR 0 10
49084: PPUSH
49085: CALL_OW 458
49089: NOT
49090: AND
49091: IFFALSE 49133
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49093: LD_ADDR_VAR 0 7
49097: PUSH
49098: LD_VAR 0 7
49102: PPUSH
49103: LD_VAR 0 7
49107: PUSH
49108: LD_INT 1
49110: PLUS
49111: PPUSH
49112: LD_VAR 0 9
49116: PUSH
49117: LD_VAR 0 10
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PPUSH
49126: CALL_OW 1
49130: ST_TO_ADDR
49131: GO 49147
// i := i - 1 ;
49133: LD_ADDR_VAR 0 5
49137: PUSH
49138: LD_VAR 0 5
49142: PUSH
49143: LD_INT 1
49145: MINUS
49146: ST_TO_ADDR
// end ;
49147: GO 48949
49149: POP
49150: POP
// for i in tmp do
49151: LD_ADDR_VAR 0 5
49155: PUSH
49156: LD_VAR 0 7
49160: PUSH
49161: FOR_IN
49162: IFFALSE 49200
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49164: LD_VAR 0 1
49168: PPUSH
49169: LD_VAR 0 5
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: PPUSH
49178: LD_VAR 0 5
49182: PUSH
49183: LD_INT 2
49185: ARRAY
49186: PPUSH
49187: CALL 48134 0 3
49191: NOT
49192: IFFALSE 49198
// exit ;
49194: POP
49195: POP
49196: GO 49202
49198: GO 49161
49200: POP
49201: POP
// end ;
49202: LD_VAR 0 4
49206: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
49207: LD_INT 0
49209: PPUSH
49210: PPUSH
49211: PPUSH
49212: PPUSH
49213: PPUSH
49214: PPUSH
49215: PPUSH
49216: PPUSH
49217: PPUSH
// if GetClass ( unit ) <> class_sniper then
49218: LD_VAR 0 1
49222: PPUSH
49223: CALL_OW 257
49227: PUSH
49228: LD_INT 5
49230: NONEQUAL
49231: IFFALSE 49235
// exit ;
49233: GO 49705
// dist := 8 ;
49235: LD_ADDR_VAR 0 5
49239: PUSH
49240: LD_INT 8
49242: ST_TO_ADDR
// viewRange := 12 ;
49243: LD_ADDR_VAR 0 8
49247: PUSH
49248: LD_INT 12
49250: ST_TO_ADDR
// side := GetSide ( unit ) ;
49251: LD_ADDR_VAR 0 6
49255: PUSH
49256: LD_VAR 0 1
49260: PPUSH
49261: CALL_OW 255
49265: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49266: LD_INT 61
49268: PPUSH
49269: LD_VAR 0 6
49273: PPUSH
49274: CALL_OW 321
49278: PUSH
49279: LD_INT 2
49281: EQUAL
49282: IFFALSE 49292
// viewRange := 16 ;
49284: LD_ADDR_VAR 0 8
49288: PUSH
49289: LD_INT 16
49291: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49292: LD_VAR 0 1
49296: PPUSH
49297: LD_VAR 0 2
49301: PPUSH
49302: LD_VAR 0 3
49306: PPUSH
49307: CALL_OW 297
49311: PUSH
49312: LD_VAR 0 5
49316: GREATER
49317: IFFALSE 49396
// begin ComMoveXY ( unit , x , y ) ;
49319: LD_VAR 0 1
49323: PPUSH
49324: LD_VAR 0 2
49328: PPUSH
49329: LD_VAR 0 3
49333: PPUSH
49334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49338: LD_INT 35
49340: PPUSH
49341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49345: LD_VAR 0 1
49349: PPUSH
49350: LD_VAR 0 2
49354: PPUSH
49355: LD_VAR 0 3
49359: PPUSH
49360: CALL 37455 0 3
49364: NOT
49365: IFFALSE 49369
// exit ;
49367: GO 49705
// until GetDistUnitXY ( unit , x , y ) < dist ;
49369: LD_VAR 0 1
49373: PPUSH
49374: LD_VAR 0 2
49378: PPUSH
49379: LD_VAR 0 3
49383: PPUSH
49384: CALL_OW 297
49388: PUSH
49389: LD_VAR 0 5
49393: LESS
49394: IFFALSE 49338
// end ; ComTurnXY ( unit , x , y ) ;
49396: LD_VAR 0 1
49400: PPUSH
49401: LD_VAR 0 2
49405: PPUSH
49406: LD_VAR 0 3
49410: PPUSH
49411: CALL_OW 118
// repeat if Multiplayer then
49415: LD_OWVAR 4
49419: IFFALSE 49430
// wait ( 35 ) else
49421: LD_INT 35
49423: PPUSH
49424: CALL_OW 67
49428: GO 49437
// wait ( 5 ) ;
49430: LD_INT 5
49432: PPUSH
49433: CALL_OW 67
// _d := GetDir ( unit ) ;
49437: LD_ADDR_VAR 0 11
49441: PUSH
49442: LD_VAR 0 1
49446: PPUSH
49447: CALL_OW 254
49451: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
49452: LD_ADDR_VAR 0 7
49456: PUSH
49457: LD_VAR 0 1
49461: PPUSH
49462: CALL_OW 250
49466: PPUSH
49467: LD_VAR 0 1
49471: PPUSH
49472: CALL_OW 251
49476: PPUSH
49477: LD_VAR 0 2
49481: PPUSH
49482: LD_VAR 0 3
49486: PPUSH
49487: CALL 40091 0 4
49491: ST_TO_ADDR
// until dir = _d ;
49492: LD_VAR 0 7
49496: PUSH
49497: LD_VAR 0 11
49501: EQUAL
49502: IFFALSE 49415
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
49504: LD_ADDR_VAR 0 9
49508: PUSH
49509: LD_VAR 0 1
49513: PPUSH
49514: CALL_OW 250
49518: PPUSH
49519: LD_VAR 0 7
49523: PPUSH
49524: LD_VAR 0 5
49528: PPUSH
49529: CALL_OW 272
49533: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
49534: LD_ADDR_VAR 0 10
49538: PUSH
49539: LD_VAR 0 1
49543: PPUSH
49544: CALL_OW 251
49548: PPUSH
49549: LD_VAR 0 7
49553: PPUSH
49554: LD_VAR 0 5
49558: PPUSH
49559: CALL_OW 273
49563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49564: LD_VAR 0 9
49568: PPUSH
49569: LD_VAR 0 10
49573: PPUSH
49574: CALL_OW 488
49578: NOT
49579: IFFALSE 49583
// exit ;
49581: GO 49705
// ComAnimCustom ( unit , 1 ) ;
49583: LD_VAR 0 1
49587: PPUSH
49588: LD_INT 1
49590: PPUSH
49591: CALL_OW 592
// p := 0 ;
49595: LD_ADDR_VAR 0 12
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49603: LD_VAR 0 9
49607: PPUSH
49608: LD_VAR 0 10
49612: PPUSH
49613: LD_VAR 0 6
49617: PPUSH
49618: LD_VAR 0 8
49622: PPUSH
49623: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
49627: LD_INT 35
49629: PPUSH
49630: CALL_OW 67
// p := Inc ( p ) ;
49634: LD_ADDR_VAR 0 12
49638: PUSH
49639: LD_VAR 0 12
49643: PPUSH
49644: CALL 40047 0 1
49648: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
49649: LD_VAR 0 12
49653: PUSH
49654: LD_INT 3
49656: EQUAL
49657: IFTRUE 49671
49659: PUSH
49660: LD_VAR 0 1
49664: PPUSH
49665: CALL_OW 302
49669: NOT
49670: OR
49671: IFTRUE 49684
49673: PUSH
49674: LD_VAR 0 1
49678: PPUSH
49679: CALL_OW 301
49683: OR
49684: IFFALSE 49627
// RemoveSeeing ( _x , _y , side ) ;
49686: LD_VAR 0 9
49690: PPUSH
49691: LD_VAR 0 10
49695: PPUSH
49696: LD_VAR 0 6
49700: PPUSH
49701: CALL_OW 331
// end ;
49705: LD_VAR 0 4
49709: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
49710: LD_INT 0
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
49719: PPUSH
49720: PPUSH
49721: PPUSH
49722: PPUSH
// if not unit then
49723: LD_VAR 0 1
49727: NOT
49728: IFFALSE 49732
// exit ;
49730: GO 50003
// side := GetSide ( unit ) ;
49732: LD_ADDR_VAR 0 3
49736: PUSH
49737: LD_VAR 0 1
49741: PPUSH
49742: CALL_OW 255
49746: ST_TO_ADDR
// x := GetX ( unit ) ;
49747: LD_ADDR_VAR 0 5
49751: PUSH
49752: LD_VAR 0 1
49756: PPUSH
49757: CALL_OW 250
49761: ST_TO_ADDR
// y := GetY ( unit ) ;
49762: LD_ADDR_VAR 0 6
49766: PUSH
49767: LD_VAR 0 1
49771: PPUSH
49772: CALL_OW 251
49776: ST_TO_ADDR
// r := 8 ;
49777: LD_ADDR_VAR 0 4
49781: PUSH
49782: LD_INT 8
49784: ST_TO_ADDR
// if x - r < 0 then
49785: LD_VAR 0 5
49789: PUSH
49790: LD_VAR 0 4
49794: MINUS
49795: PUSH
49796: LD_INT 0
49798: LESS
49799: IFFALSE 49811
// min_x := 0 else
49801: LD_ADDR_VAR 0 7
49805: PUSH
49806: LD_INT 0
49808: ST_TO_ADDR
49809: GO 49827
// min_x := x - r ;
49811: LD_ADDR_VAR 0 7
49815: PUSH
49816: LD_VAR 0 5
49820: PUSH
49821: LD_VAR 0 4
49825: MINUS
49826: ST_TO_ADDR
// if y - r < 0 then
49827: LD_VAR 0 6
49831: PUSH
49832: LD_VAR 0 4
49836: MINUS
49837: PUSH
49838: LD_INT 0
49840: LESS
49841: IFFALSE 49853
// min_y := 0 else
49843: LD_ADDR_VAR 0 8
49847: PUSH
49848: LD_INT 0
49850: ST_TO_ADDR
49851: GO 49869
// min_y := y - r ;
49853: LD_ADDR_VAR 0 8
49857: PUSH
49858: LD_VAR 0 6
49862: PUSH
49863: LD_VAR 0 4
49867: MINUS
49868: ST_TO_ADDR
// max_x := x + r ;
49869: LD_ADDR_VAR 0 9
49873: PUSH
49874: LD_VAR 0 5
49878: PUSH
49879: LD_VAR 0 4
49883: PLUS
49884: ST_TO_ADDR
// max_y := y + r ;
49885: LD_ADDR_VAR 0 10
49889: PUSH
49890: LD_VAR 0 6
49894: PUSH
49895: LD_VAR 0 4
49899: PLUS
49900: ST_TO_ADDR
// for _x = min_x to max_x do
49901: LD_ADDR_VAR 0 11
49905: PUSH
49906: DOUBLE
49907: LD_VAR 0 7
49911: DEC
49912: ST_TO_ADDR
49913: LD_VAR 0 9
49917: PUSH
49918: FOR_TO
49919: IFFALSE 50001
// for _y = min_y to max_y do
49921: LD_ADDR_VAR 0 12
49925: PUSH
49926: DOUBLE
49927: LD_VAR 0 8
49931: DEC
49932: ST_TO_ADDR
49933: LD_VAR 0 10
49937: PUSH
49938: FOR_TO
49939: IFFALSE 49997
// begin if not ValidHex ( _x , _y ) then
49941: LD_VAR 0 11
49945: PPUSH
49946: LD_VAR 0 12
49950: PPUSH
49951: CALL_OW 488
49955: NOT
49956: IFFALSE 49960
// continue ;
49958: GO 49938
// if MineAtPos ( _x , _y ) then
49960: LD_VAR 0 11
49964: PPUSH
49965: LD_VAR 0 12
49969: PPUSH
49970: CALL_OW 458
49974: IFFALSE 49995
// ViewMineAtPos ( _x , _y , side ) ;
49976: LD_VAR 0 11
49980: PPUSH
49981: LD_VAR 0 12
49985: PPUSH
49986: LD_VAR 0 3
49990: PPUSH
49991: CALL_OW 457
// end ;
49995: GO 49938
49997: POP
49998: POP
49999: GO 49918
50001: POP
50002: POP
// end ;
50003: LD_VAR 0 2
50007: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
50008: LD_INT 0
50010: PPUSH
50011: PPUSH
50012: PPUSH
50013: PPUSH
50014: PPUSH
50015: PPUSH
// if not units then
50016: LD_VAR 0 1
50020: NOT
50021: IFFALSE 50025
// exit ;
50023: GO 50455
// scaners := [ ] ;
50025: LD_ADDR_VAR 0 6
50029: PUSH
50030: EMPTY
50031: ST_TO_ADDR
// for i in units do
50032: LD_ADDR_VAR 0 3
50036: PUSH
50037: LD_VAR 0 1
50041: PUSH
50042: FOR_IN
50043: IFFALSE 50200
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
50045: LD_VAR 0 3
50049: PPUSH
50050: CALL_OW 264
50054: PUSH
50055: LD_INT 11
50057: NONEQUAL
50058: IFTRUE 50072
50060: PUSH
50061: LD_VAR 0 3
50065: PPUSH
50066: CALL_OW 302
50070: NOT
50071: OR
50072: IFTRUE 50089
50074: PUSH
50075: LD_VAR 0 3
50079: PPUSH
50080: CALL_OW 110
50084: PUSH
50085: LD_INT 502
50087: EQUAL
50088: OR
50089: IFFALSE 50093
// continue ;
50091: GO 50042
// ComStop ( i ) ;
50093: LD_VAR 0 3
50097: PPUSH
50098: CALL_OW 141
// x := GetX ( i ) ;
50102: LD_ADDR_VAR 0 4
50106: PUSH
50107: LD_VAR 0 3
50111: PPUSH
50112: CALL_OW 250
50116: ST_TO_ADDR
// y := GetY ( i ) ;
50117: LD_ADDR_VAR 0 5
50121: PUSH
50122: LD_VAR 0 3
50126: PPUSH
50127: CALL_OW 251
50131: ST_TO_ADDR
// if GetSide ( i ) = your_side then
50132: LD_VAR 0 3
50136: PPUSH
50137: CALL_OW 255
50141: PUSH
50142: LD_OWVAR 2
50146: EQUAL
50147: IFFALSE 50166
// PlaySoundXY ( x , y , mineDetector ) ;
50149: LD_VAR 0 4
50153: PPUSH
50154: LD_VAR 0 5
50158: PPUSH
50159: LD_STRING mineDetector
50161: PPUSH
50162: CALL_OW 366
// scaners := Join ( scaners , i ) ;
50166: LD_ADDR_VAR 0 6
50170: PUSH
50171: LD_VAR 0 6
50175: PPUSH
50176: LD_VAR 0 3
50180: PPUSH
50181: CALL 38674 0 2
50185: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
50186: LD_VAR 0 3
50190: PPUSH
50191: LD_INT 502
50193: PPUSH
50194: CALL_OW 109
// end ;
50198: GO 50042
50200: POP
50201: POP
// if not scaners then
50202: LD_VAR 0 6
50206: NOT
50207: IFFALSE 50211
// exit ;
50209: GO 50455
// wait ( 3 ) ;
50211: LD_INT 3
50213: PPUSH
50214: CALL_OW 67
// timer := 6 ;
50218: LD_ADDR_VAR 0 7
50222: PUSH
50223: LD_INT 6
50225: ST_TO_ADDR
// repeat for i in scaners do
50226: LD_ADDR_VAR 0 3
50230: PUSH
50231: LD_VAR 0 6
50235: PUSH
50236: FOR_IN
50237: IFFALSE 50353
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
50239: LD_VAR 0 3
50243: PPUSH
50244: CALL_OW 302
50248: NOT
50249: IFTRUE 50262
50251: PUSH
50252: LD_VAR 0 3
50256: PPUSH
50257: CALL_OW 314
50261: OR
50262: IFTRUE 50293
50264: PUSH
50265: LD_VAR 0 3
50269: PPUSH
50270: CALL_OW 263
50274: PUSH
50275: LD_INT 1
50277: EQUAL
50278: IFFALSE 50292
50280: PUSH
50281: LD_VAR 0 3
50285: PPUSH
50286: CALL_OW 311
50290: NOT
50291: AND
50292: OR
50293: IFFALSE 50337
// begin SetUnitDisplayNumber ( i , 0 ) ;
50295: LD_VAR 0 3
50299: PPUSH
50300: LD_INT 0
50302: PPUSH
50303: CALL_OW 505
// SetTag ( i , 0 ) ;
50307: LD_VAR 0 3
50311: PPUSH
50312: LD_INT 0
50314: PPUSH
50315: CALL_OW 109
// scaners := scaners diff i ;
50319: LD_ADDR_VAR 0 6
50323: PUSH
50324: LD_VAR 0 6
50328: PUSH
50329: LD_VAR 0 3
50333: DIFF
50334: ST_TO_ADDR
// continue ;
50335: GO 50236
// end ; SetUnitDisplayNumber ( i , timer ) ;
50337: LD_VAR 0 3
50341: PPUSH
50342: LD_VAR 0 7
50346: PPUSH
50347: CALL_OW 505
// end ;
50351: GO 50236
50353: POP
50354: POP
// if not scaners then
50355: LD_VAR 0 6
50359: NOT
50360: IFFALSE 50364
// exit ;
50362: GO 50455
// timer := Dec ( timer ) ;
50364: LD_ADDR_VAR 0 7
50368: PUSH
50369: LD_VAR 0 7
50373: PPUSH
50374: CALL 40069 0 1
50378: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50379: LD_INT 35
50381: PPUSH
50382: CALL_OW 67
// until timer = 0 ;
50386: LD_VAR 0 7
50390: PUSH
50391: LD_INT 0
50393: EQUAL
50394: IFFALSE 50226
// if not scaners then
50396: LD_VAR 0 6
50400: NOT
50401: IFFALSE 50405
// exit ;
50403: GO 50455
// for i in scaners do
50405: LD_ADDR_VAR 0 3
50409: PUSH
50410: LD_VAR 0 6
50414: PUSH
50415: FOR_IN
50416: IFFALSE 50453
// begin SetUnitDisplayNumber ( i , 0 ) ;
50418: LD_VAR 0 3
50422: PPUSH
50423: LD_INT 0
50425: PPUSH
50426: CALL_OW 505
// SetTag ( i , 0 ) ;
50430: LD_VAR 0 3
50434: PPUSH
50435: LD_INT 0
50437: PPUSH
50438: CALL_OW 109
// RevealDetectorMine ( i ) ;
50442: LD_VAR 0 3
50446: PPUSH
50447: CALL 49710 0 1
// end ;
50451: GO 50415
50453: POP
50454: POP
// end ;
50455: LD_VAR 0 2
50459: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
50460: LD_INT 0
50462: PPUSH
// if p1 = mine_detector_mode then
50463: LD_VAR 0 2
50467: PUSH
50468: LD_INT 103
50470: EQUAL
50471: IFFALSE 50482
// DetectMine ( units ) ;
50473: LD_VAR 0 1
50477: PPUSH
50478: CALL 50008 0 1
// end ; end_of_file
50482: LD_VAR 0 7
50486: RET
// export globalGameSaveCounter ; every 0 0$1 do
50487: GO 50489
50489: DISABLE
// begin enable ;
50490: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50491: LD_STRING updateTimer(
50493: PUSH
50494: LD_OWVAR 1
50498: STR
50499: PUSH
50500: LD_STRING );
50502: STR
50503: PPUSH
50504: CALL_OW 559
// end ;
50508: END
// every 0 0$1 do
50509: GO 50511
50511: DISABLE
// begin globalGameSaveCounter := 0 ;
50512: LD_ADDR_EXP 12
50516: PUSH
50517: LD_INT 0
50519: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50520: LD_STRING setGameSaveCounter(0)
50522: PPUSH
50523: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50527: LD_STRING initStreamRollete();
50529: PPUSH
50530: CALL_OW 559
// InitStreamMode ;
50534: CALL 51879 0 0
// DefineStreamItems ( false ) ;
50538: LD_INT 0
50540: PPUSH
50541: CALL 52343 0 1
// end ;
50545: END
// export function SOS_MapStart ( ) ; begin
50546: LD_INT 0
50548: PPUSH
// if streamModeActive then
50549: LD_EXP 13
50553: IFFALSE 50562
// DefineStreamItems ( true ) ;
50555: LD_INT 1
50557: PPUSH
50558: CALL 52343 0 1
// UpdateLuaVariables ( ) ;
50562: CALL 50579 0 0
// UpdateFactoryWaypoints ( ) ;
50566: CALL 65465 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50570: CALL 65717 0 0
// end ;
50574: LD_VAR 0 1
50578: RET
// function UpdateLuaVariables ( ) ; begin
50579: LD_INT 0
50581: PPUSH
// if globalGameSaveCounter then
50582: LD_EXP 12
50586: IFFALSE 50620
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50588: LD_ADDR_EXP 12
50592: PUSH
50593: LD_EXP 12
50597: PPUSH
50598: CALL 40047 0 1
50602: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50603: LD_STRING setGameSaveCounter(
50605: PUSH
50606: LD_EXP 12
50610: STR
50611: PUSH
50612: LD_STRING )
50614: STR
50615: PPUSH
50616: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50620: LD_STRING setGameDifficulty(
50622: PUSH
50623: LD_OWVAR 67
50627: STR
50628: PUSH
50629: LD_STRING )
50631: STR
50632: PPUSH
50633: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
50637: LD_STRING displayDifficulty(
50639: PUSH
50640: LD_OWVAR 67
50644: STR
50645: PUSH
50646: LD_STRING )
50648: STR
50649: PPUSH
50650: CALL_OW 559
// end ;
50654: LD_VAR 0 1
50658: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50659: LD_INT 0
50661: PPUSH
// if p2 = stream_mode then
50662: LD_VAR 0 2
50666: PUSH
50667: LD_INT 100
50669: EQUAL
50670: IFFALSE 51673
// begin if not StreamModeActive then
50672: LD_EXP 13
50676: NOT
50677: IFFALSE 50687
// StreamModeActive := true ;
50679: LD_ADDR_EXP 13
50683: PUSH
50684: LD_INT 1
50686: ST_TO_ADDR
// if p3 = 0 then
50687: LD_VAR 0 3
50691: PUSH
50692: LD_INT 0
50694: EQUAL
50695: IFFALSE 50701
// InitStreamMode ;
50697: CALL 51879 0 0
// if p3 = 1 then
50701: LD_VAR 0 3
50705: PUSH
50706: LD_INT 1
50708: EQUAL
50709: IFFALSE 50719
// sRocket := true ;
50711: LD_ADDR_EXP 18
50715: PUSH
50716: LD_INT 1
50718: ST_TO_ADDR
// if p3 = 2 then
50719: LD_VAR 0 3
50723: PUSH
50724: LD_INT 2
50726: EQUAL
50727: IFFALSE 50737
// sSpeed := true ;
50729: LD_ADDR_EXP 17
50733: PUSH
50734: LD_INT 1
50736: ST_TO_ADDR
// if p3 = 3 then
50737: LD_VAR 0 3
50741: PUSH
50742: LD_INT 3
50744: EQUAL
50745: IFFALSE 50755
// sEngine := true ;
50747: LD_ADDR_EXP 19
50751: PUSH
50752: LD_INT 1
50754: ST_TO_ADDR
// if p3 = 4 then
50755: LD_VAR 0 3
50759: PUSH
50760: LD_INT 4
50762: EQUAL
50763: IFFALSE 50773
// sSpec := true ;
50765: LD_ADDR_EXP 16
50769: PUSH
50770: LD_INT 1
50772: ST_TO_ADDR
// if p3 = 5 then
50773: LD_VAR 0 3
50777: PUSH
50778: LD_INT 5
50780: EQUAL
50781: IFFALSE 50791
// sLevel := true ;
50783: LD_ADDR_EXP 20
50787: PUSH
50788: LD_INT 1
50790: ST_TO_ADDR
// if p3 = 6 then
50791: LD_VAR 0 3
50795: PUSH
50796: LD_INT 6
50798: EQUAL
50799: IFFALSE 50809
// sArmoury := true ;
50801: LD_ADDR_EXP 21
50805: PUSH
50806: LD_INT 1
50808: ST_TO_ADDR
// if p3 = 7 then
50809: LD_VAR 0 3
50813: PUSH
50814: LD_INT 7
50816: EQUAL
50817: IFFALSE 50827
// sRadar := true ;
50819: LD_ADDR_EXP 22
50823: PUSH
50824: LD_INT 1
50826: ST_TO_ADDR
// if p3 = 8 then
50827: LD_VAR 0 3
50831: PUSH
50832: LD_INT 8
50834: EQUAL
50835: IFFALSE 50845
// sBunker := true ;
50837: LD_ADDR_EXP 23
50841: PUSH
50842: LD_INT 1
50844: ST_TO_ADDR
// if p3 = 9 then
50845: LD_VAR 0 3
50849: PUSH
50850: LD_INT 9
50852: EQUAL
50853: IFFALSE 50863
// sHack := true ;
50855: LD_ADDR_EXP 24
50859: PUSH
50860: LD_INT 1
50862: ST_TO_ADDR
// if p3 = 10 then
50863: LD_VAR 0 3
50867: PUSH
50868: LD_INT 10
50870: EQUAL
50871: IFFALSE 50881
// sFire := true ;
50873: LD_ADDR_EXP 25
50877: PUSH
50878: LD_INT 1
50880: ST_TO_ADDR
// if p3 = 11 then
50881: LD_VAR 0 3
50885: PUSH
50886: LD_INT 11
50888: EQUAL
50889: IFFALSE 50899
// sRefresh := true ;
50891: LD_ADDR_EXP 26
50895: PUSH
50896: LD_INT 1
50898: ST_TO_ADDR
// if p3 = 12 then
50899: LD_VAR 0 3
50903: PUSH
50904: LD_INT 12
50906: EQUAL
50907: IFFALSE 50917
// sExp := true ;
50909: LD_ADDR_EXP 27
50913: PUSH
50914: LD_INT 1
50916: ST_TO_ADDR
// if p3 = 13 then
50917: LD_VAR 0 3
50921: PUSH
50922: LD_INT 13
50924: EQUAL
50925: IFFALSE 50935
// sDepot := true ;
50927: LD_ADDR_EXP 28
50931: PUSH
50932: LD_INT 1
50934: ST_TO_ADDR
// if p3 = 14 then
50935: LD_VAR 0 3
50939: PUSH
50940: LD_INT 14
50942: EQUAL
50943: IFFALSE 50953
// sFlag := true ;
50945: LD_ADDR_EXP 29
50949: PUSH
50950: LD_INT 1
50952: ST_TO_ADDR
// if p3 = 15 then
50953: LD_VAR 0 3
50957: PUSH
50958: LD_INT 15
50960: EQUAL
50961: IFFALSE 50971
// sKamikadze := true ;
50963: LD_ADDR_EXP 37
50967: PUSH
50968: LD_INT 1
50970: ST_TO_ADDR
// if p3 = 16 then
50971: LD_VAR 0 3
50975: PUSH
50976: LD_INT 16
50978: EQUAL
50979: IFFALSE 50989
// sTroll := true ;
50981: LD_ADDR_EXP 38
50985: PUSH
50986: LD_INT 1
50988: ST_TO_ADDR
// if p3 = 17 then
50989: LD_VAR 0 3
50993: PUSH
50994: LD_INT 17
50996: EQUAL
50997: IFFALSE 51007
// sSlow := true ;
50999: LD_ADDR_EXP 39
51003: PUSH
51004: LD_INT 1
51006: ST_TO_ADDR
// if p3 = 18 then
51007: LD_VAR 0 3
51011: PUSH
51012: LD_INT 18
51014: EQUAL
51015: IFFALSE 51025
// sLack := true ;
51017: LD_ADDR_EXP 40
51021: PUSH
51022: LD_INT 1
51024: ST_TO_ADDR
// if p3 = 19 then
51025: LD_VAR 0 3
51029: PUSH
51030: LD_INT 19
51032: EQUAL
51033: IFFALSE 51043
// sTank := true ;
51035: LD_ADDR_EXP 42
51039: PUSH
51040: LD_INT 1
51042: ST_TO_ADDR
// if p3 = 20 then
51043: LD_VAR 0 3
51047: PUSH
51048: LD_INT 20
51050: EQUAL
51051: IFFALSE 51061
// sRemote := true ;
51053: LD_ADDR_EXP 43
51057: PUSH
51058: LD_INT 1
51060: ST_TO_ADDR
// if p3 = 21 then
51061: LD_VAR 0 3
51065: PUSH
51066: LD_INT 21
51068: EQUAL
51069: IFFALSE 51079
// sPowell := true ;
51071: LD_ADDR_EXP 44
51075: PUSH
51076: LD_INT 1
51078: ST_TO_ADDR
// if p3 = 22 then
51079: LD_VAR 0 3
51083: PUSH
51084: LD_INT 22
51086: EQUAL
51087: IFFALSE 51097
// sTeleport := true ;
51089: LD_ADDR_EXP 47
51093: PUSH
51094: LD_INT 1
51096: ST_TO_ADDR
// if p3 = 23 then
51097: LD_VAR 0 3
51101: PUSH
51102: LD_INT 23
51104: EQUAL
51105: IFFALSE 51115
// sOilTower := true ;
51107: LD_ADDR_EXP 49
51111: PUSH
51112: LD_INT 1
51114: ST_TO_ADDR
// if p3 = 24 then
51115: LD_VAR 0 3
51119: PUSH
51120: LD_INT 24
51122: EQUAL
51123: IFFALSE 51133
// sShovel := true ;
51125: LD_ADDR_EXP 50
51129: PUSH
51130: LD_INT 1
51132: ST_TO_ADDR
// if p3 = 25 then
51133: LD_VAR 0 3
51137: PUSH
51138: LD_INT 25
51140: EQUAL
51141: IFFALSE 51151
// sSheik := true ;
51143: LD_ADDR_EXP 51
51147: PUSH
51148: LD_INT 1
51150: ST_TO_ADDR
// if p3 = 26 then
51151: LD_VAR 0 3
51155: PUSH
51156: LD_INT 26
51158: EQUAL
51159: IFFALSE 51169
// sEarthquake := true ;
51161: LD_ADDR_EXP 53
51165: PUSH
51166: LD_INT 1
51168: ST_TO_ADDR
// if p3 = 27 then
51169: LD_VAR 0 3
51173: PUSH
51174: LD_INT 27
51176: EQUAL
51177: IFFALSE 51187
// sAI := true ;
51179: LD_ADDR_EXP 54
51183: PUSH
51184: LD_INT 1
51186: ST_TO_ADDR
// if p3 = 28 then
51187: LD_VAR 0 3
51191: PUSH
51192: LD_INT 28
51194: EQUAL
51195: IFFALSE 51205
// sCargo := true ;
51197: LD_ADDR_EXP 57
51201: PUSH
51202: LD_INT 1
51204: ST_TO_ADDR
// if p3 = 29 then
51205: LD_VAR 0 3
51209: PUSH
51210: LD_INT 29
51212: EQUAL
51213: IFFALSE 51223
// sDLaser := true ;
51215: LD_ADDR_EXP 58
51219: PUSH
51220: LD_INT 1
51222: ST_TO_ADDR
// if p3 = 30 then
51223: LD_VAR 0 3
51227: PUSH
51228: LD_INT 30
51230: EQUAL
51231: IFFALSE 51241
// sExchange := true ;
51233: LD_ADDR_EXP 59
51237: PUSH
51238: LD_INT 1
51240: ST_TO_ADDR
// if p3 = 31 then
51241: LD_VAR 0 3
51245: PUSH
51246: LD_INT 31
51248: EQUAL
51249: IFFALSE 51259
// sFac := true ;
51251: LD_ADDR_EXP 60
51255: PUSH
51256: LD_INT 1
51258: ST_TO_ADDR
// if p3 = 32 then
51259: LD_VAR 0 3
51263: PUSH
51264: LD_INT 32
51266: EQUAL
51267: IFFALSE 51277
// sPower := true ;
51269: LD_ADDR_EXP 61
51273: PUSH
51274: LD_INT 1
51276: ST_TO_ADDR
// if p3 = 33 then
51277: LD_VAR 0 3
51281: PUSH
51282: LD_INT 33
51284: EQUAL
51285: IFFALSE 51295
// sRandom := true ;
51287: LD_ADDR_EXP 62
51291: PUSH
51292: LD_INT 1
51294: ST_TO_ADDR
// if p3 = 34 then
51295: LD_VAR 0 3
51299: PUSH
51300: LD_INT 34
51302: EQUAL
51303: IFFALSE 51313
// sShield := true ;
51305: LD_ADDR_EXP 63
51309: PUSH
51310: LD_INT 1
51312: ST_TO_ADDR
// if p3 = 35 then
51313: LD_VAR 0 3
51317: PUSH
51318: LD_INT 35
51320: EQUAL
51321: IFFALSE 51331
// sTime := true ;
51323: LD_ADDR_EXP 64
51327: PUSH
51328: LD_INT 1
51330: ST_TO_ADDR
// if p3 = 36 then
51331: LD_VAR 0 3
51335: PUSH
51336: LD_INT 36
51338: EQUAL
51339: IFFALSE 51349
// sTools := true ;
51341: LD_ADDR_EXP 65
51345: PUSH
51346: LD_INT 1
51348: ST_TO_ADDR
// if p3 = 101 then
51349: LD_VAR 0 3
51353: PUSH
51354: LD_INT 101
51356: EQUAL
51357: IFFALSE 51367
// sSold := true ;
51359: LD_ADDR_EXP 30
51363: PUSH
51364: LD_INT 1
51366: ST_TO_ADDR
// if p3 = 102 then
51367: LD_VAR 0 3
51371: PUSH
51372: LD_INT 102
51374: EQUAL
51375: IFFALSE 51385
// sDiff := true ;
51377: LD_ADDR_EXP 31
51381: PUSH
51382: LD_INT 1
51384: ST_TO_ADDR
// if p3 = 103 then
51385: LD_VAR 0 3
51389: PUSH
51390: LD_INT 103
51392: EQUAL
51393: IFFALSE 51403
// sFog := true ;
51395: LD_ADDR_EXP 34
51399: PUSH
51400: LD_INT 1
51402: ST_TO_ADDR
// if p3 = 104 then
51403: LD_VAR 0 3
51407: PUSH
51408: LD_INT 104
51410: EQUAL
51411: IFFALSE 51421
// sReset := true ;
51413: LD_ADDR_EXP 35
51417: PUSH
51418: LD_INT 1
51420: ST_TO_ADDR
// if p3 = 105 then
51421: LD_VAR 0 3
51425: PUSH
51426: LD_INT 105
51428: EQUAL
51429: IFFALSE 51439
// sSun := true ;
51431: LD_ADDR_EXP 36
51435: PUSH
51436: LD_INT 1
51438: ST_TO_ADDR
// if p3 = 106 then
51439: LD_VAR 0 3
51443: PUSH
51444: LD_INT 106
51446: EQUAL
51447: IFFALSE 51457
// sTiger := true ;
51449: LD_ADDR_EXP 32
51453: PUSH
51454: LD_INT 1
51456: ST_TO_ADDR
// if p3 = 107 then
51457: LD_VAR 0 3
51461: PUSH
51462: LD_INT 107
51464: EQUAL
51465: IFFALSE 51475
// sBomb := true ;
51467: LD_ADDR_EXP 33
51471: PUSH
51472: LD_INT 1
51474: ST_TO_ADDR
// if p3 = 108 then
51475: LD_VAR 0 3
51479: PUSH
51480: LD_INT 108
51482: EQUAL
51483: IFFALSE 51493
// sWound := true ;
51485: LD_ADDR_EXP 41
51489: PUSH
51490: LD_INT 1
51492: ST_TO_ADDR
// if p3 = 109 then
51493: LD_VAR 0 3
51497: PUSH
51498: LD_INT 109
51500: EQUAL
51501: IFFALSE 51511
// sBetray := true ;
51503: LD_ADDR_EXP 45
51507: PUSH
51508: LD_INT 1
51510: ST_TO_ADDR
// if p3 = 110 then
51511: LD_VAR 0 3
51515: PUSH
51516: LD_INT 110
51518: EQUAL
51519: IFFALSE 51529
// sContamin := true ;
51521: LD_ADDR_EXP 46
51525: PUSH
51526: LD_INT 1
51528: ST_TO_ADDR
// if p3 = 111 then
51529: LD_VAR 0 3
51533: PUSH
51534: LD_INT 111
51536: EQUAL
51537: IFFALSE 51547
// sOil := true ;
51539: LD_ADDR_EXP 48
51543: PUSH
51544: LD_INT 1
51546: ST_TO_ADDR
// if p3 = 112 then
51547: LD_VAR 0 3
51551: PUSH
51552: LD_INT 112
51554: EQUAL
51555: IFFALSE 51565
// sStu := true ;
51557: LD_ADDR_EXP 52
51561: PUSH
51562: LD_INT 1
51564: ST_TO_ADDR
// if p3 = 113 then
51565: LD_VAR 0 3
51569: PUSH
51570: LD_INT 113
51572: EQUAL
51573: IFFALSE 51583
// sBazooka := true ;
51575: LD_ADDR_EXP 55
51579: PUSH
51580: LD_INT 1
51582: ST_TO_ADDR
// if p3 = 114 then
51583: LD_VAR 0 3
51587: PUSH
51588: LD_INT 114
51590: EQUAL
51591: IFFALSE 51601
// sMortar := true ;
51593: LD_ADDR_EXP 56
51597: PUSH
51598: LD_INT 1
51600: ST_TO_ADDR
// if p3 = 115 then
51601: LD_VAR 0 3
51605: PUSH
51606: LD_INT 115
51608: EQUAL
51609: IFFALSE 51619
// sRanger := true ;
51611: LD_ADDR_EXP 66
51615: PUSH
51616: LD_INT 1
51618: ST_TO_ADDR
// if p3 = 116 then
51619: LD_VAR 0 3
51623: PUSH
51624: LD_INT 116
51626: EQUAL
51627: IFFALSE 51637
// sComputer := true ;
51629: LD_ADDR_EXP 67
51633: PUSH
51634: LD_INT 1
51636: ST_TO_ADDR
// if p3 = 117 then
51637: LD_VAR 0 3
51641: PUSH
51642: LD_INT 117
51644: EQUAL
51645: IFFALSE 51655
// s30 := true ;
51647: LD_ADDR_EXP 68
51651: PUSH
51652: LD_INT 1
51654: ST_TO_ADDR
// if p3 = 118 then
51655: LD_VAR 0 3
51659: PUSH
51660: LD_INT 118
51662: EQUAL
51663: IFFALSE 51673
// s60 := true ;
51665: LD_ADDR_EXP 69
51669: PUSH
51670: LD_INT 1
51672: ST_TO_ADDR
// end ; if p2 = hack_mode then
51673: LD_VAR 0 2
51677: PUSH
51678: LD_INT 101
51680: EQUAL
51681: IFFALSE 51809
// begin case p3 of 1 :
51683: LD_VAR 0 3
51687: PUSH
51688: LD_INT 1
51690: DOUBLE
51691: EQUAL
51692: IFTRUE 51696
51694: GO 51703
51696: POP
// hHackUnlimitedResources ; 2 :
51697: CALL 64072 0 0
51701: GO 51809
51703: LD_INT 2
51705: DOUBLE
51706: EQUAL
51707: IFTRUE 51711
51709: GO 51718
51711: POP
// hHackSetLevel10 ; 3 :
51712: CALL 64205 0 0
51716: GO 51809
51718: LD_INT 3
51720: DOUBLE
51721: EQUAL
51722: IFTRUE 51726
51724: GO 51733
51726: POP
// hHackSetLevel10YourUnits ; 4 :
51727: CALL 64290 0 0
51731: GO 51809
51733: LD_INT 4
51735: DOUBLE
51736: EQUAL
51737: IFTRUE 51741
51739: GO 51748
51741: POP
// hHackInvincible ; 5 :
51742: CALL 64738 0 0
51746: GO 51809
51748: LD_INT 5
51750: DOUBLE
51751: EQUAL
51752: IFTRUE 51756
51754: GO 51763
51756: POP
// hHackInvisible ; 6 :
51757: CALL 64849 0 0
51761: GO 51809
51763: LD_INT 6
51765: DOUBLE
51766: EQUAL
51767: IFTRUE 51771
51769: GO 51778
51771: POP
// hHackChangeYourSide ; 7 :
51772: CALL 64906 0 0
51776: GO 51809
51778: LD_INT 7
51780: DOUBLE
51781: EQUAL
51782: IFTRUE 51786
51784: GO 51793
51786: POP
// hHackChangeUnitSide ; 8 :
51787: CALL 64948 0 0
51791: GO 51809
51793: LD_INT 8
51795: DOUBLE
51796: EQUAL
51797: IFTRUE 51801
51799: GO 51808
51801: POP
// hHackFog ; end ;
51802: CALL 65049 0 0
51806: GO 51809
51808: POP
// end ; if p2 = game_save_mode then
51809: LD_VAR 0 2
51813: PUSH
51814: LD_INT 102
51816: EQUAL
51817: IFFALSE 51874
// begin if p3 = 1 then
51819: LD_VAR 0 3
51823: PUSH
51824: LD_INT 1
51826: EQUAL
51827: IFFALSE 51839
// globalGameSaveCounter := p4 ;
51829: LD_ADDR_EXP 12
51833: PUSH
51834: LD_VAR 0 4
51838: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51839: LD_VAR 0 3
51843: PUSH
51844: LD_INT 2
51846: EQUAL
51847: IFFALSE 51855
51849: PUSH
51850: LD_EXP 12
51854: AND
51855: IFFALSE 51874
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51857: LD_STRING setGameSaveCounter(
51859: PUSH
51860: LD_EXP 12
51864: STR
51865: PUSH
51866: LD_STRING )
51868: STR
51869: PPUSH
51870: CALL_OW 559
// end ; end ;
51874: LD_VAR 0 7
51878: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51879: LD_INT 0
51881: PPUSH
// streamModeActive := false ;
51882: LD_ADDR_EXP 13
51886: PUSH
51887: LD_INT 0
51889: ST_TO_ADDR
// normalCounter := 36 ;
51890: LD_ADDR_EXP 14
51894: PUSH
51895: LD_INT 36
51897: ST_TO_ADDR
// hardcoreCounter := 18 ;
51898: LD_ADDR_EXP 15
51902: PUSH
51903: LD_INT 18
51905: ST_TO_ADDR
// sRocket := false ;
51906: LD_ADDR_EXP 18
51910: PUSH
51911: LD_INT 0
51913: ST_TO_ADDR
// sSpeed := false ;
51914: LD_ADDR_EXP 17
51918: PUSH
51919: LD_INT 0
51921: ST_TO_ADDR
// sEngine := false ;
51922: LD_ADDR_EXP 19
51926: PUSH
51927: LD_INT 0
51929: ST_TO_ADDR
// sSpec := false ;
51930: LD_ADDR_EXP 16
51934: PUSH
51935: LD_INT 0
51937: ST_TO_ADDR
// sLevel := false ;
51938: LD_ADDR_EXP 20
51942: PUSH
51943: LD_INT 0
51945: ST_TO_ADDR
// sArmoury := false ;
51946: LD_ADDR_EXP 21
51950: PUSH
51951: LD_INT 0
51953: ST_TO_ADDR
// sRadar := false ;
51954: LD_ADDR_EXP 22
51958: PUSH
51959: LD_INT 0
51961: ST_TO_ADDR
// sBunker := false ;
51962: LD_ADDR_EXP 23
51966: PUSH
51967: LD_INT 0
51969: ST_TO_ADDR
// sHack := false ;
51970: LD_ADDR_EXP 24
51974: PUSH
51975: LD_INT 0
51977: ST_TO_ADDR
// sFire := false ;
51978: LD_ADDR_EXP 25
51982: PUSH
51983: LD_INT 0
51985: ST_TO_ADDR
// sRefresh := false ;
51986: LD_ADDR_EXP 26
51990: PUSH
51991: LD_INT 0
51993: ST_TO_ADDR
// sExp := false ;
51994: LD_ADDR_EXP 27
51998: PUSH
51999: LD_INT 0
52001: ST_TO_ADDR
// sDepot := false ;
52002: LD_ADDR_EXP 28
52006: PUSH
52007: LD_INT 0
52009: ST_TO_ADDR
// sFlag := false ;
52010: LD_ADDR_EXP 29
52014: PUSH
52015: LD_INT 0
52017: ST_TO_ADDR
// sKamikadze := false ;
52018: LD_ADDR_EXP 37
52022: PUSH
52023: LD_INT 0
52025: ST_TO_ADDR
// sTroll := false ;
52026: LD_ADDR_EXP 38
52030: PUSH
52031: LD_INT 0
52033: ST_TO_ADDR
// sSlow := false ;
52034: LD_ADDR_EXP 39
52038: PUSH
52039: LD_INT 0
52041: ST_TO_ADDR
// sLack := false ;
52042: LD_ADDR_EXP 40
52046: PUSH
52047: LD_INT 0
52049: ST_TO_ADDR
// sTank := false ;
52050: LD_ADDR_EXP 42
52054: PUSH
52055: LD_INT 0
52057: ST_TO_ADDR
// sRemote := false ;
52058: LD_ADDR_EXP 43
52062: PUSH
52063: LD_INT 0
52065: ST_TO_ADDR
// sPowell := false ;
52066: LD_ADDR_EXP 44
52070: PUSH
52071: LD_INT 0
52073: ST_TO_ADDR
// sTeleport := false ;
52074: LD_ADDR_EXP 47
52078: PUSH
52079: LD_INT 0
52081: ST_TO_ADDR
// sOilTower := false ;
52082: LD_ADDR_EXP 49
52086: PUSH
52087: LD_INT 0
52089: ST_TO_ADDR
// sShovel := false ;
52090: LD_ADDR_EXP 50
52094: PUSH
52095: LD_INT 0
52097: ST_TO_ADDR
// sSheik := false ;
52098: LD_ADDR_EXP 51
52102: PUSH
52103: LD_INT 0
52105: ST_TO_ADDR
// sEarthquake := false ;
52106: LD_ADDR_EXP 53
52110: PUSH
52111: LD_INT 0
52113: ST_TO_ADDR
// sAI := false ;
52114: LD_ADDR_EXP 54
52118: PUSH
52119: LD_INT 0
52121: ST_TO_ADDR
// sCargo := false ;
52122: LD_ADDR_EXP 57
52126: PUSH
52127: LD_INT 0
52129: ST_TO_ADDR
// sDLaser := false ;
52130: LD_ADDR_EXP 58
52134: PUSH
52135: LD_INT 0
52137: ST_TO_ADDR
// sExchange := false ;
52138: LD_ADDR_EXP 59
52142: PUSH
52143: LD_INT 0
52145: ST_TO_ADDR
// sFac := false ;
52146: LD_ADDR_EXP 60
52150: PUSH
52151: LD_INT 0
52153: ST_TO_ADDR
// sPower := false ;
52154: LD_ADDR_EXP 61
52158: PUSH
52159: LD_INT 0
52161: ST_TO_ADDR
// sRandom := false ;
52162: LD_ADDR_EXP 62
52166: PUSH
52167: LD_INT 0
52169: ST_TO_ADDR
// sShield := false ;
52170: LD_ADDR_EXP 63
52174: PUSH
52175: LD_INT 0
52177: ST_TO_ADDR
// sTime := false ;
52178: LD_ADDR_EXP 64
52182: PUSH
52183: LD_INT 0
52185: ST_TO_ADDR
// sTools := false ;
52186: LD_ADDR_EXP 65
52190: PUSH
52191: LD_INT 0
52193: ST_TO_ADDR
// sSold := false ;
52194: LD_ADDR_EXP 30
52198: PUSH
52199: LD_INT 0
52201: ST_TO_ADDR
// sDiff := false ;
52202: LD_ADDR_EXP 31
52206: PUSH
52207: LD_INT 0
52209: ST_TO_ADDR
// sFog := false ;
52210: LD_ADDR_EXP 34
52214: PUSH
52215: LD_INT 0
52217: ST_TO_ADDR
// sReset := false ;
52218: LD_ADDR_EXP 35
52222: PUSH
52223: LD_INT 0
52225: ST_TO_ADDR
// sSun := false ;
52226: LD_ADDR_EXP 36
52230: PUSH
52231: LD_INT 0
52233: ST_TO_ADDR
// sTiger := false ;
52234: LD_ADDR_EXP 32
52238: PUSH
52239: LD_INT 0
52241: ST_TO_ADDR
// sBomb := false ;
52242: LD_ADDR_EXP 33
52246: PUSH
52247: LD_INT 0
52249: ST_TO_ADDR
// sWound := false ;
52250: LD_ADDR_EXP 41
52254: PUSH
52255: LD_INT 0
52257: ST_TO_ADDR
// sBetray := false ;
52258: LD_ADDR_EXP 45
52262: PUSH
52263: LD_INT 0
52265: ST_TO_ADDR
// sContamin := false ;
52266: LD_ADDR_EXP 46
52270: PUSH
52271: LD_INT 0
52273: ST_TO_ADDR
// sOil := false ;
52274: LD_ADDR_EXP 48
52278: PUSH
52279: LD_INT 0
52281: ST_TO_ADDR
// sStu := false ;
52282: LD_ADDR_EXP 52
52286: PUSH
52287: LD_INT 0
52289: ST_TO_ADDR
// sBazooka := false ;
52290: LD_ADDR_EXP 55
52294: PUSH
52295: LD_INT 0
52297: ST_TO_ADDR
// sMortar := false ;
52298: LD_ADDR_EXP 56
52302: PUSH
52303: LD_INT 0
52305: ST_TO_ADDR
// sRanger := false ;
52306: LD_ADDR_EXP 66
52310: PUSH
52311: LD_INT 0
52313: ST_TO_ADDR
// sComputer := false ;
52314: LD_ADDR_EXP 67
52318: PUSH
52319: LD_INT 0
52321: ST_TO_ADDR
// s30 := false ;
52322: LD_ADDR_EXP 68
52326: PUSH
52327: LD_INT 0
52329: ST_TO_ADDR
// s60 := false ;
52330: LD_ADDR_EXP 69
52334: PUSH
52335: LD_INT 0
52337: ST_TO_ADDR
// end ;
52338: LD_VAR 0 1
52342: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52343: LD_INT 0
52345: PPUSH
52346: PPUSH
52347: PPUSH
52348: PPUSH
52349: PPUSH
52350: PPUSH
52351: PPUSH
// result := [ ] ;
52352: LD_ADDR_VAR 0 2
52356: PUSH
52357: EMPTY
52358: ST_TO_ADDR
// if campaign_id = 1 then
52359: LD_OWVAR 69
52363: PUSH
52364: LD_INT 1
52366: EQUAL
52367: IFFALSE 55533
// begin case mission_number of 1 :
52369: LD_OWVAR 70
52373: PUSH
52374: LD_INT 1
52376: DOUBLE
52377: EQUAL
52378: IFTRUE 52382
52380: GO 52458
52382: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52383: LD_ADDR_VAR 0 2
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 4
52393: PUSH
52394: LD_INT 11
52396: PUSH
52397: LD_INT 12
52399: PUSH
52400: LD_INT 15
52402: PUSH
52403: LD_INT 16
52405: PUSH
52406: LD_INT 22
52408: PUSH
52409: LD_INT 23
52411: PUSH
52412: LD_INT 26
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 101
52428: PUSH
52429: LD_INT 102
52431: PUSH
52432: LD_INT 106
52434: PUSH
52435: LD_INT 116
52437: PUSH
52438: LD_INT 117
52440: PUSH
52441: LD_INT 118
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: ST_TO_ADDR
52456: GO 55531
52458: LD_INT 2
52460: DOUBLE
52461: EQUAL
52462: IFTRUE 52466
52464: GO 52550
52466: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52467: LD_ADDR_VAR 0 2
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 4
52477: PUSH
52478: LD_INT 11
52480: PUSH
52481: LD_INT 12
52483: PUSH
52484: LD_INT 15
52486: PUSH
52487: LD_INT 16
52489: PUSH
52490: LD_INT 22
52492: PUSH
52493: LD_INT 23
52495: PUSH
52496: LD_INT 26
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 101
52512: PUSH
52513: LD_INT 102
52515: PUSH
52516: LD_INT 105
52518: PUSH
52519: LD_INT 106
52521: PUSH
52522: LD_INT 108
52524: PUSH
52525: LD_INT 116
52527: PUSH
52528: LD_INT 117
52530: PUSH
52531: LD_INT 118
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: ST_TO_ADDR
52548: GO 55531
52550: LD_INT 3
52552: DOUBLE
52553: EQUAL
52554: IFTRUE 52558
52556: GO 52646
52558: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52559: LD_ADDR_VAR 0 2
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 4
52569: PUSH
52570: LD_INT 5
52572: PUSH
52573: LD_INT 11
52575: PUSH
52576: LD_INT 12
52578: PUSH
52579: LD_INT 15
52581: PUSH
52582: LD_INT 16
52584: PUSH
52585: LD_INT 22
52587: PUSH
52588: LD_INT 26
52590: PUSH
52591: LD_INT 36
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 101
52608: PUSH
52609: LD_INT 102
52611: PUSH
52612: LD_INT 105
52614: PUSH
52615: LD_INT 106
52617: PUSH
52618: LD_INT 108
52620: PUSH
52621: LD_INT 116
52623: PUSH
52624: LD_INT 117
52626: PUSH
52627: LD_INT 118
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: ST_TO_ADDR
52644: GO 55531
52646: LD_INT 4
52648: DOUBLE
52649: EQUAL
52650: IFTRUE 52654
52652: GO 52750
52654: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52655: LD_ADDR_VAR 0 2
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: LD_INT 5
52668: PUSH
52669: LD_INT 8
52671: PUSH
52672: LD_INT 11
52674: PUSH
52675: LD_INT 12
52677: PUSH
52678: LD_INT 15
52680: PUSH
52681: LD_INT 16
52683: PUSH
52684: LD_INT 22
52686: PUSH
52687: LD_INT 23
52689: PUSH
52690: LD_INT 26
52692: PUSH
52693: LD_INT 36
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 101
52712: PUSH
52713: LD_INT 102
52715: PUSH
52716: LD_INT 105
52718: PUSH
52719: LD_INT 106
52721: PUSH
52722: LD_INT 108
52724: PUSH
52725: LD_INT 116
52727: PUSH
52728: LD_INT 117
52730: PUSH
52731: LD_INT 118
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: ST_TO_ADDR
52748: GO 55531
52750: LD_INT 5
52752: DOUBLE
52753: EQUAL
52754: IFTRUE 52758
52756: GO 52870
52758: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52759: LD_ADDR_VAR 0 2
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: LD_INT 5
52772: PUSH
52773: LD_INT 6
52775: PUSH
52776: LD_INT 8
52778: PUSH
52779: LD_INT 11
52781: PUSH
52782: LD_INT 12
52784: PUSH
52785: LD_INT 15
52787: PUSH
52788: LD_INT 16
52790: PUSH
52791: LD_INT 22
52793: PUSH
52794: LD_INT 23
52796: PUSH
52797: LD_INT 25
52799: PUSH
52800: LD_INT 26
52802: PUSH
52803: LD_INT 36
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 101
52824: PUSH
52825: LD_INT 102
52827: PUSH
52828: LD_INT 105
52830: PUSH
52831: LD_INT 106
52833: PUSH
52834: LD_INT 108
52836: PUSH
52837: LD_INT 109
52839: PUSH
52840: LD_INT 112
52842: PUSH
52843: LD_INT 116
52845: PUSH
52846: LD_INT 117
52848: PUSH
52849: LD_INT 118
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: ST_TO_ADDR
52868: GO 55531
52870: LD_INT 6
52872: DOUBLE
52873: EQUAL
52874: IFTRUE 52878
52876: GO 53010
52878: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52879: LD_ADDR_VAR 0 2
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 4
52889: PUSH
52890: LD_INT 5
52892: PUSH
52893: LD_INT 6
52895: PUSH
52896: LD_INT 8
52898: PUSH
52899: LD_INT 11
52901: PUSH
52902: LD_INT 12
52904: PUSH
52905: LD_INT 15
52907: PUSH
52908: LD_INT 16
52910: PUSH
52911: LD_INT 20
52913: PUSH
52914: LD_INT 21
52916: PUSH
52917: LD_INT 22
52919: PUSH
52920: LD_INT 23
52922: PUSH
52923: LD_INT 25
52925: PUSH
52926: LD_INT 26
52928: PUSH
52929: LD_INT 30
52931: PUSH
52932: LD_INT 31
52934: PUSH
52935: LD_INT 32
52937: PUSH
52938: LD_INT 36
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 101
52964: PUSH
52965: LD_INT 102
52967: PUSH
52968: LD_INT 105
52970: PUSH
52971: LD_INT 106
52973: PUSH
52974: LD_INT 108
52976: PUSH
52977: LD_INT 109
52979: PUSH
52980: LD_INT 112
52982: PUSH
52983: LD_INT 116
52985: PUSH
52986: LD_INT 117
52988: PUSH
52989: LD_INT 118
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: ST_TO_ADDR
53008: GO 55531
53010: LD_INT 7
53012: DOUBLE
53013: EQUAL
53014: IFTRUE 53018
53016: GO 53130
53018: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53019: LD_ADDR_VAR 0 2
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 4
53029: PUSH
53030: LD_INT 5
53032: PUSH
53033: LD_INT 7
53035: PUSH
53036: LD_INT 11
53038: PUSH
53039: LD_INT 12
53041: PUSH
53042: LD_INT 15
53044: PUSH
53045: LD_INT 16
53047: PUSH
53048: LD_INT 20
53050: PUSH
53051: LD_INT 21
53053: PUSH
53054: LD_INT 22
53056: PUSH
53057: LD_INT 23
53059: PUSH
53060: LD_INT 25
53062: PUSH
53063: LD_INT 26
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 101
53084: PUSH
53085: LD_INT 102
53087: PUSH
53088: LD_INT 103
53090: PUSH
53091: LD_INT 105
53093: PUSH
53094: LD_INT 106
53096: PUSH
53097: LD_INT 108
53099: PUSH
53100: LD_INT 112
53102: PUSH
53103: LD_INT 116
53105: PUSH
53106: LD_INT 117
53108: PUSH
53109: LD_INT 118
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: ST_TO_ADDR
53128: GO 55531
53130: LD_INT 8
53132: DOUBLE
53133: EQUAL
53134: IFTRUE 53138
53136: GO 53278
53138: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53139: LD_ADDR_VAR 0 2
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 4
53149: PUSH
53150: LD_INT 5
53152: PUSH
53153: LD_INT 6
53155: PUSH
53156: LD_INT 7
53158: PUSH
53159: LD_INT 8
53161: PUSH
53162: LD_INT 11
53164: PUSH
53165: LD_INT 12
53167: PUSH
53168: LD_INT 15
53170: PUSH
53171: LD_INT 16
53173: PUSH
53174: LD_INT 20
53176: PUSH
53177: LD_INT 21
53179: PUSH
53180: LD_INT 22
53182: PUSH
53183: LD_INT 23
53185: PUSH
53186: LD_INT 25
53188: PUSH
53189: LD_INT 26
53191: PUSH
53192: LD_INT 30
53194: PUSH
53195: LD_INT 31
53197: PUSH
53198: LD_INT 32
53200: PUSH
53201: LD_INT 36
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 101
53228: PUSH
53229: LD_INT 102
53231: PUSH
53232: LD_INT 103
53234: PUSH
53235: LD_INT 105
53237: PUSH
53238: LD_INT 106
53240: PUSH
53241: LD_INT 108
53243: PUSH
53244: LD_INT 109
53246: PUSH
53247: LD_INT 112
53249: PUSH
53250: LD_INT 116
53252: PUSH
53253: LD_INT 117
53255: PUSH
53256: LD_INT 118
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: ST_TO_ADDR
53276: GO 55531
53278: LD_INT 9
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53434
53286: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53287: LD_ADDR_VAR 0 2
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: LD_INT 5
53300: PUSH
53301: LD_INT 6
53303: PUSH
53304: LD_INT 7
53306: PUSH
53307: LD_INT 8
53309: PUSH
53310: LD_INT 11
53312: PUSH
53313: LD_INT 12
53315: PUSH
53316: LD_INT 15
53318: PUSH
53319: LD_INT 16
53321: PUSH
53322: LD_INT 20
53324: PUSH
53325: LD_INT 21
53327: PUSH
53328: LD_INT 22
53330: PUSH
53331: LD_INT 23
53333: PUSH
53334: LD_INT 25
53336: PUSH
53337: LD_INT 26
53339: PUSH
53340: LD_INT 28
53342: PUSH
53343: LD_INT 30
53345: PUSH
53346: LD_INT 31
53348: PUSH
53349: LD_INT 32
53351: PUSH
53352: LD_INT 36
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 101
53380: PUSH
53381: LD_INT 102
53383: PUSH
53384: LD_INT 103
53386: PUSH
53387: LD_INT 105
53389: PUSH
53390: LD_INT 106
53392: PUSH
53393: LD_INT 108
53395: PUSH
53396: LD_INT 109
53398: PUSH
53399: LD_INT 112
53401: PUSH
53402: LD_INT 114
53404: PUSH
53405: LD_INT 116
53407: PUSH
53408: LD_INT 117
53410: PUSH
53411: LD_INT 118
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: ST_TO_ADDR
53432: GO 55531
53434: LD_INT 10
53436: DOUBLE
53437: EQUAL
53438: IFTRUE 53442
53440: GO 53638
53442: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53443: LD_ADDR_VAR 0 2
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 4
53453: PUSH
53454: LD_INT 5
53456: PUSH
53457: LD_INT 6
53459: PUSH
53460: LD_INT 7
53462: PUSH
53463: LD_INT 8
53465: PUSH
53466: LD_INT 9
53468: PUSH
53469: LD_INT 10
53471: PUSH
53472: LD_INT 11
53474: PUSH
53475: LD_INT 12
53477: PUSH
53478: LD_INT 13
53480: PUSH
53481: LD_INT 14
53483: PUSH
53484: LD_INT 15
53486: PUSH
53487: LD_INT 16
53489: PUSH
53490: LD_INT 17
53492: PUSH
53493: LD_INT 18
53495: PUSH
53496: LD_INT 19
53498: PUSH
53499: LD_INT 20
53501: PUSH
53502: LD_INT 21
53504: PUSH
53505: LD_INT 22
53507: PUSH
53508: LD_INT 23
53510: PUSH
53511: LD_INT 24
53513: PUSH
53514: LD_INT 25
53516: PUSH
53517: LD_INT 26
53519: PUSH
53520: LD_INT 28
53522: PUSH
53523: LD_INT 30
53525: PUSH
53526: LD_INT 31
53528: PUSH
53529: LD_INT 32
53531: PUSH
53532: LD_INT 36
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 101
53568: PUSH
53569: LD_INT 102
53571: PUSH
53572: LD_INT 103
53574: PUSH
53575: LD_INT 104
53577: PUSH
53578: LD_INT 105
53580: PUSH
53581: LD_INT 106
53583: PUSH
53584: LD_INT 107
53586: PUSH
53587: LD_INT 108
53589: PUSH
53590: LD_INT 109
53592: PUSH
53593: LD_INT 110
53595: PUSH
53596: LD_INT 111
53598: PUSH
53599: LD_INT 112
53601: PUSH
53602: LD_INT 114
53604: PUSH
53605: LD_INT 116
53607: PUSH
53608: LD_INT 117
53610: PUSH
53611: LD_INT 118
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: ST_TO_ADDR
53636: GO 55531
53638: LD_INT 11
53640: DOUBLE
53641: EQUAL
53642: IFTRUE 53646
53644: GO 53850
53646: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53647: LD_ADDR_VAR 0 2
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: LD_INT 5
53663: PUSH
53664: LD_INT 6
53666: PUSH
53667: LD_INT 7
53669: PUSH
53670: LD_INT 8
53672: PUSH
53673: LD_INT 9
53675: PUSH
53676: LD_INT 10
53678: PUSH
53679: LD_INT 11
53681: PUSH
53682: LD_INT 12
53684: PUSH
53685: LD_INT 13
53687: PUSH
53688: LD_INT 14
53690: PUSH
53691: LD_INT 15
53693: PUSH
53694: LD_INT 16
53696: PUSH
53697: LD_INT 17
53699: PUSH
53700: LD_INT 18
53702: PUSH
53703: LD_INT 19
53705: PUSH
53706: LD_INT 20
53708: PUSH
53709: LD_INT 21
53711: PUSH
53712: LD_INT 22
53714: PUSH
53715: LD_INT 23
53717: PUSH
53718: LD_INT 24
53720: PUSH
53721: LD_INT 25
53723: PUSH
53724: LD_INT 26
53726: PUSH
53727: LD_INT 28
53729: PUSH
53730: LD_INT 30
53732: PUSH
53733: LD_INT 31
53735: PUSH
53736: LD_INT 32
53738: PUSH
53739: LD_INT 34
53741: PUSH
53742: LD_INT 36
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 101
53780: PUSH
53781: LD_INT 102
53783: PUSH
53784: LD_INT 103
53786: PUSH
53787: LD_INT 104
53789: PUSH
53790: LD_INT 105
53792: PUSH
53793: LD_INT 106
53795: PUSH
53796: LD_INT 107
53798: PUSH
53799: LD_INT 108
53801: PUSH
53802: LD_INT 109
53804: PUSH
53805: LD_INT 110
53807: PUSH
53808: LD_INT 111
53810: PUSH
53811: LD_INT 112
53813: PUSH
53814: LD_INT 114
53816: PUSH
53817: LD_INT 116
53819: PUSH
53820: LD_INT 117
53822: PUSH
53823: LD_INT 118
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: ST_TO_ADDR
53848: GO 55531
53850: LD_INT 12
53852: DOUBLE
53853: EQUAL
53854: IFTRUE 53858
53856: GO 54078
53858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53859: LD_ADDR_VAR 0 2
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 4
53875: PUSH
53876: LD_INT 5
53878: PUSH
53879: LD_INT 6
53881: PUSH
53882: LD_INT 7
53884: PUSH
53885: LD_INT 8
53887: PUSH
53888: LD_INT 9
53890: PUSH
53891: LD_INT 10
53893: PUSH
53894: LD_INT 11
53896: PUSH
53897: LD_INT 12
53899: PUSH
53900: LD_INT 13
53902: PUSH
53903: LD_INT 14
53905: PUSH
53906: LD_INT 15
53908: PUSH
53909: LD_INT 16
53911: PUSH
53912: LD_INT 17
53914: PUSH
53915: LD_INT 18
53917: PUSH
53918: LD_INT 19
53920: PUSH
53921: LD_INT 20
53923: PUSH
53924: LD_INT 21
53926: PUSH
53927: LD_INT 22
53929: PUSH
53930: LD_INT 23
53932: PUSH
53933: LD_INT 24
53935: PUSH
53936: LD_INT 25
53938: PUSH
53939: LD_INT 26
53941: PUSH
53942: LD_INT 27
53944: PUSH
53945: LD_INT 28
53947: PUSH
53948: LD_INT 30
53950: PUSH
53951: LD_INT 31
53953: PUSH
53954: LD_INT 32
53956: PUSH
53957: LD_INT 33
53959: PUSH
53960: LD_INT 34
53962: PUSH
53963: LD_INT 36
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 101
54004: PUSH
54005: LD_INT 102
54007: PUSH
54008: LD_INT 103
54010: PUSH
54011: LD_INT 104
54013: PUSH
54014: LD_INT 105
54016: PUSH
54017: LD_INT 106
54019: PUSH
54020: LD_INT 107
54022: PUSH
54023: LD_INT 108
54025: PUSH
54026: LD_INT 109
54028: PUSH
54029: LD_INT 110
54031: PUSH
54032: LD_INT 111
54034: PUSH
54035: LD_INT 112
54037: PUSH
54038: LD_INT 113
54040: PUSH
54041: LD_INT 114
54043: PUSH
54044: LD_INT 116
54046: PUSH
54047: LD_INT 117
54049: PUSH
54050: LD_INT 118
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: ST_TO_ADDR
54076: GO 55531
54078: LD_INT 13
54080: DOUBLE
54081: EQUAL
54082: IFTRUE 54086
54084: GO 54294
54086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54087: LD_ADDR_VAR 0 2
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 4
54103: PUSH
54104: LD_INT 5
54106: PUSH
54107: LD_INT 8
54109: PUSH
54110: LD_INT 9
54112: PUSH
54113: LD_INT 10
54115: PUSH
54116: LD_INT 11
54118: PUSH
54119: LD_INT 12
54121: PUSH
54122: LD_INT 14
54124: PUSH
54125: LD_INT 15
54127: PUSH
54128: LD_INT 16
54130: PUSH
54131: LD_INT 17
54133: PUSH
54134: LD_INT 18
54136: PUSH
54137: LD_INT 19
54139: PUSH
54140: LD_INT 20
54142: PUSH
54143: LD_INT 21
54145: PUSH
54146: LD_INT 22
54148: PUSH
54149: LD_INT 23
54151: PUSH
54152: LD_INT 24
54154: PUSH
54155: LD_INT 25
54157: PUSH
54158: LD_INT 26
54160: PUSH
54161: LD_INT 27
54163: PUSH
54164: LD_INT 28
54166: PUSH
54167: LD_INT 30
54169: PUSH
54170: LD_INT 31
54172: PUSH
54173: LD_INT 32
54175: PUSH
54176: LD_INT 33
54178: PUSH
54179: LD_INT 34
54181: PUSH
54182: LD_INT 36
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 101
54220: PUSH
54221: LD_INT 102
54223: PUSH
54224: LD_INT 103
54226: PUSH
54227: LD_INT 104
54229: PUSH
54230: LD_INT 105
54232: PUSH
54233: LD_INT 106
54235: PUSH
54236: LD_INT 107
54238: PUSH
54239: LD_INT 108
54241: PUSH
54242: LD_INT 109
54244: PUSH
54245: LD_INT 110
54247: PUSH
54248: LD_INT 111
54250: PUSH
54251: LD_INT 112
54253: PUSH
54254: LD_INT 113
54256: PUSH
54257: LD_INT 114
54259: PUSH
54260: LD_INT 116
54262: PUSH
54263: LD_INT 117
54265: PUSH
54266: LD_INT 118
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: ST_TO_ADDR
54292: GO 55531
54294: LD_INT 14
54296: DOUBLE
54297: EQUAL
54298: IFTRUE 54302
54300: GO 54526
54302: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54303: LD_ADDR_VAR 0 2
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: LD_INT 4
54319: PUSH
54320: LD_INT 5
54322: PUSH
54323: LD_INT 6
54325: PUSH
54326: LD_INT 7
54328: PUSH
54329: LD_INT 8
54331: PUSH
54332: LD_INT 9
54334: PUSH
54335: LD_INT 10
54337: PUSH
54338: LD_INT 11
54340: PUSH
54341: LD_INT 12
54343: PUSH
54344: LD_INT 13
54346: PUSH
54347: LD_INT 14
54349: PUSH
54350: LD_INT 15
54352: PUSH
54353: LD_INT 16
54355: PUSH
54356: LD_INT 17
54358: PUSH
54359: LD_INT 18
54361: PUSH
54362: LD_INT 19
54364: PUSH
54365: LD_INT 20
54367: PUSH
54368: LD_INT 21
54370: PUSH
54371: LD_INT 22
54373: PUSH
54374: LD_INT 23
54376: PUSH
54377: LD_INT 24
54379: PUSH
54380: LD_INT 25
54382: PUSH
54383: LD_INT 26
54385: PUSH
54386: LD_INT 27
54388: PUSH
54389: LD_INT 28
54391: PUSH
54392: LD_INT 29
54394: PUSH
54395: LD_INT 30
54397: PUSH
54398: LD_INT 31
54400: PUSH
54401: LD_INT 32
54403: PUSH
54404: LD_INT 33
54406: PUSH
54407: LD_INT 34
54409: PUSH
54410: LD_INT 36
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 101
54452: PUSH
54453: LD_INT 102
54455: PUSH
54456: LD_INT 103
54458: PUSH
54459: LD_INT 104
54461: PUSH
54462: LD_INT 105
54464: PUSH
54465: LD_INT 106
54467: PUSH
54468: LD_INT 107
54470: PUSH
54471: LD_INT 108
54473: PUSH
54474: LD_INT 109
54476: PUSH
54477: LD_INT 110
54479: PUSH
54480: LD_INT 111
54482: PUSH
54483: LD_INT 112
54485: PUSH
54486: LD_INT 113
54488: PUSH
54489: LD_INT 114
54491: PUSH
54492: LD_INT 116
54494: PUSH
54495: LD_INT 117
54497: PUSH
54498: LD_INT 118
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: ST_TO_ADDR
54524: GO 55531
54526: LD_INT 15
54528: DOUBLE
54529: EQUAL
54530: IFTRUE 54534
54532: GO 54758
54534: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54535: LD_ADDR_VAR 0 2
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 4
54551: PUSH
54552: LD_INT 5
54554: PUSH
54555: LD_INT 6
54557: PUSH
54558: LD_INT 7
54560: PUSH
54561: LD_INT 8
54563: PUSH
54564: LD_INT 9
54566: PUSH
54567: LD_INT 10
54569: PUSH
54570: LD_INT 11
54572: PUSH
54573: LD_INT 12
54575: PUSH
54576: LD_INT 13
54578: PUSH
54579: LD_INT 14
54581: PUSH
54582: LD_INT 15
54584: PUSH
54585: LD_INT 16
54587: PUSH
54588: LD_INT 17
54590: PUSH
54591: LD_INT 18
54593: PUSH
54594: LD_INT 19
54596: PUSH
54597: LD_INT 20
54599: PUSH
54600: LD_INT 21
54602: PUSH
54603: LD_INT 22
54605: PUSH
54606: LD_INT 23
54608: PUSH
54609: LD_INT 24
54611: PUSH
54612: LD_INT 25
54614: PUSH
54615: LD_INT 26
54617: PUSH
54618: LD_INT 27
54620: PUSH
54621: LD_INT 28
54623: PUSH
54624: LD_INT 29
54626: PUSH
54627: LD_INT 30
54629: PUSH
54630: LD_INT 31
54632: PUSH
54633: LD_INT 32
54635: PUSH
54636: LD_INT 33
54638: PUSH
54639: LD_INT 34
54641: PUSH
54642: LD_INT 36
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 101
54684: PUSH
54685: LD_INT 102
54687: PUSH
54688: LD_INT 103
54690: PUSH
54691: LD_INT 104
54693: PUSH
54694: LD_INT 105
54696: PUSH
54697: LD_INT 106
54699: PUSH
54700: LD_INT 107
54702: PUSH
54703: LD_INT 108
54705: PUSH
54706: LD_INT 109
54708: PUSH
54709: LD_INT 110
54711: PUSH
54712: LD_INT 111
54714: PUSH
54715: LD_INT 112
54717: PUSH
54718: LD_INT 113
54720: PUSH
54721: LD_INT 114
54723: PUSH
54724: LD_INT 116
54726: PUSH
54727: LD_INT 117
54729: PUSH
54730: LD_INT 118
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: ST_TO_ADDR
54756: GO 55531
54758: LD_INT 16
54760: DOUBLE
54761: EQUAL
54762: IFTRUE 54766
54764: GO 54902
54766: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54767: LD_ADDR_VAR 0 2
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 4
54777: PUSH
54778: LD_INT 5
54780: PUSH
54781: LD_INT 7
54783: PUSH
54784: LD_INT 11
54786: PUSH
54787: LD_INT 12
54789: PUSH
54790: LD_INT 15
54792: PUSH
54793: LD_INT 16
54795: PUSH
54796: LD_INT 20
54798: PUSH
54799: LD_INT 21
54801: PUSH
54802: LD_INT 22
54804: PUSH
54805: LD_INT 23
54807: PUSH
54808: LD_INT 25
54810: PUSH
54811: LD_INT 26
54813: PUSH
54814: LD_INT 30
54816: PUSH
54817: LD_INT 31
54819: PUSH
54820: LD_INT 32
54822: PUSH
54823: LD_INT 33
54825: PUSH
54826: LD_INT 34
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 101
54852: PUSH
54853: LD_INT 102
54855: PUSH
54856: LD_INT 103
54858: PUSH
54859: LD_INT 106
54861: PUSH
54862: LD_INT 108
54864: PUSH
54865: LD_INT 112
54867: PUSH
54868: LD_INT 113
54870: PUSH
54871: LD_INT 114
54873: PUSH
54874: LD_INT 116
54876: PUSH
54877: LD_INT 117
54879: PUSH
54880: LD_INT 118
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: ST_TO_ADDR
54900: GO 55531
54902: LD_INT 17
54904: DOUBLE
54905: EQUAL
54906: IFTRUE 54910
54908: GO 55134
54910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54911: LD_ADDR_VAR 0 2
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: LD_INT 4
54927: PUSH
54928: LD_INT 5
54930: PUSH
54931: LD_INT 6
54933: PUSH
54934: LD_INT 7
54936: PUSH
54937: LD_INT 8
54939: PUSH
54940: LD_INT 9
54942: PUSH
54943: LD_INT 10
54945: PUSH
54946: LD_INT 11
54948: PUSH
54949: LD_INT 12
54951: PUSH
54952: LD_INT 13
54954: PUSH
54955: LD_INT 14
54957: PUSH
54958: LD_INT 15
54960: PUSH
54961: LD_INT 16
54963: PUSH
54964: LD_INT 17
54966: PUSH
54967: LD_INT 18
54969: PUSH
54970: LD_INT 19
54972: PUSH
54973: LD_INT 20
54975: PUSH
54976: LD_INT 21
54978: PUSH
54979: LD_INT 22
54981: PUSH
54982: LD_INT 23
54984: PUSH
54985: LD_INT 24
54987: PUSH
54988: LD_INT 25
54990: PUSH
54991: LD_INT 26
54993: PUSH
54994: LD_INT 27
54996: PUSH
54997: LD_INT 28
54999: PUSH
55000: LD_INT 29
55002: PUSH
55003: LD_INT 30
55005: PUSH
55006: LD_INT 31
55008: PUSH
55009: LD_INT 32
55011: PUSH
55012: LD_INT 33
55014: PUSH
55015: LD_INT 34
55017: PUSH
55018: LD_INT 36
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 101
55060: PUSH
55061: LD_INT 102
55063: PUSH
55064: LD_INT 103
55066: PUSH
55067: LD_INT 104
55069: PUSH
55070: LD_INT 105
55072: PUSH
55073: LD_INT 106
55075: PUSH
55076: LD_INT 107
55078: PUSH
55079: LD_INT 108
55081: PUSH
55082: LD_INT 109
55084: PUSH
55085: LD_INT 110
55087: PUSH
55088: LD_INT 111
55090: PUSH
55091: LD_INT 112
55093: PUSH
55094: LD_INT 113
55096: PUSH
55097: LD_INT 114
55099: PUSH
55100: LD_INT 116
55102: PUSH
55103: LD_INT 117
55105: PUSH
55106: LD_INT 118
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: ST_TO_ADDR
55132: GO 55531
55134: LD_INT 18
55136: DOUBLE
55137: EQUAL
55138: IFTRUE 55142
55140: GO 55290
55142: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55143: LD_ADDR_VAR 0 2
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 4
55153: PUSH
55154: LD_INT 5
55156: PUSH
55157: LD_INT 7
55159: PUSH
55160: LD_INT 11
55162: PUSH
55163: LD_INT 12
55165: PUSH
55166: LD_INT 15
55168: PUSH
55169: LD_INT 16
55171: PUSH
55172: LD_INT 20
55174: PUSH
55175: LD_INT 21
55177: PUSH
55178: LD_INT 22
55180: PUSH
55181: LD_INT 23
55183: PUSH
55184: LD_INT 25
55186: PUSH
55187: LD_INT 26
55189: PUSH
55190: LD_INT 30
55192: PUSH
55193: LD_INT 31
55195: PUSH
55196: LD_INT 32
55198: PUSH
55199: LD_INT 33
55201: PUSH
55202: LD_INT 34
55204: PUSH
55205: LD_INT 35
55207: PUSH
55208: LD_INT 36
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 101
55236: PUSH
55237: LD_INT 102
55239: PUSH
55240: LD_INT 103
55242: PUSH
55243: LD_INT 106
55245: PUSH
55246: LD_INT 108
55248: PUSH
55249: LD_INT 112
55251: PUSH
55252: LD_INT 113
55254: PUSH
55255: LD_INT 114
55257: PUSH
55258: LD_INT 115
55260: PUSH
55261: LD_INT 116
55263: PUSH
55264: LD_INT 117
55266: PUSH
55267: LD_INT 118
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: ST_TO_ADDR
55288: GO 55531
55290: LD_INT 19
55292: DOUBLE
55293: EQUAL
55294: IFTRUE 55298
55296: GO 55530
55298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55299: LD_ADDR_VAR 0 2
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: LD_INT 4
55315: PUSH
55316: LD_INT 5
55318: PUSH
55319: LD_INT 6
55321: PUSH
55322: LD_INT 7
55324: PUSH
55325: LD_INT 8
55327: PUSH
55328: LD_INT 9
55330: PUSH
55331: LD_INT 10
55333: PUSH
55334: LD_INT 11
55336: PUSH
55337: LD_INT 12
55339: PUSH
55340: LD_INT 13
55342: PUSH
55343: LD_INT 14
55345: PUSH
55346: LD_INT 15
55348: PUSH
55349: LD_INT 16
55351: PUSH
55352: LD_INT 17
55354: PUSH
55355: LD_INT 18
55357: PUSH
55358: LD_INT 19
55360: PUSH
55361: LD_INT 20
55363: PUSH
55364: LD_INT 21
55366: PUSH
55367: LD_INT 22
55369: PUSH
55370: LD_INT 23
55372: PUSH
55373: LD_INT 24
55375: PUSH
55376: LD_INT 25
55378: PUSH
55379: LD_INT 26
55381: PUSH
55382: LD_INT 27
55384: PUSH
55385: LD_INT 28
55387: PUSH
55388: LD_INT 29
55390: PUSH
55391: LD_INT 30
55393: PUSH
55394: LD_INT 31
55396: PUSH
55397: LD_INT 32
55399: PUSH
55400: LD_INT 33
55402: PUSH
55403: LD_INT 34
55405: PUSH
55406: LD_INT 35
55408: PUSH
55409: LD_INT 36
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 101
55452: PUSH
55453: LD_INT 102
55455: PUSH
55456: LD_INT 103
55458: PUSH
55459: LD_INT 104
55461: PUSH
55462: LD_INT 105
55464: PUSH
55465: LD_INT 106
55467: PUSH
55468: LD_INT 107
55470: PUSH
55471: LD_INT 108
55473: PUSH
55474: LD_INT 109
55476: PUSH
55477: LD_INT 110
55479: PUSH
55480: LD_INT 111
55482: PUSH
55483: LD_INT 112
55485: PUSH
55486: LD_INT 113
55488: PUSH
55489: LD_INT 114
55491: PUSH
55492: LD_INT 115
55494: PUSH
55495: LD_INT 116
55497: PUSH
55498: LD_INT 117
55500: PUSH
55501: LD_INT 118
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: ST_TO_ADDR
55528: GO 55531
55530: POP
// end else
55531: GO 55762
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55533: LD_ADDR_VAR 0 2
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: LD_INT 3
55546: PUSH
55547: LD_INT 4
55549: PUSH
55550: LD_INT 5
55552: PUSH
55553: LD_INT 6
55555: PUSH
55556: LD_INT 7
55558: PUSH
55559: LD_INT 8
55561: PUSH
55562: LD_INT 9
55564: PUSH
55565: LD_INT 10
55567: PUSH
55568: LD_INT 11
55570: PUSH
55571: LD_INT 12
55573: PUSH
55574: LD_INT 13
55576: PUSH
55577: LD_INT 14
55579: PUSH
55580: LD_INT 15
55582: PUSH
55583: LD_INT 16
55585: PUSH
55586: LD_INT 17
55588: PUSH
55589: LD_INT 18
55591: PUSH
55592: LD_INT 19
55594: PUSH
55595: LD_INT 20
55597: PUSH
55598: LD_INT 21
55600: PUSH
55601: LD_INT 22
55603: PUSH
55604: LD_INT 23
55606: PUSH
55607: LD_INT 24
55609: PUSH
55610: LD_INT 25
55612: PUSH
55613: LD_INT 26
55615: PUSH
55616: LD_INT 27
55618: PUSH
55619: LD_INT 28
55621: PUSH
55622: LD_INT 29
55624: PUSH
55625: LD_INT 30
55627: PUSH
55628: LD_INT 31
55630: PUSH
55631: LD_INT 32
55633: PUSH
55634: LD_INT 33
55636: PUSH
55637: LD_INT 34
55639: PUSH
55640: LD_INT 35
55642: PUSH
55643: LD_INT 36
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 101
55686: PUSH
55687: LD_INT 102
55689: PUSH
55690: LD_INT 103
55692: PUSH
55693: LD_INT 104
55695: PUSH
55696: LD_INT 105
55698: PUSH
55699: LD_INT 106
55701: PUSH
55702: LD_INT 107
55704: PUSH
55705: LD_INT 108
55707: PUSH
55708: LD_INT 109
55710: PUSH
55711: LD_INT 110
55713: PUSH
55714: LD_INT 111
55716: PUSH
55717: LD_INT 112
55719: PUSH
55720: LD_INT 113
55722: PUSH
55723: LD_INT 114
55725: PUSH
55726: LD_INT 115
55728: PUSH
55729: LD_INT 116
55731: PUSH
55732: LD_INT 117
55734: PUSH
55735: LD_INT 118
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// if result then
55762: LD_VAR 0 2
55766: IFFALSE 56552
// begin normal :=  ;
55768: LD_ADDR_VAR 0 5
55772: PUSH
55773: LD_STRING 
55775: ST_TO_ADDR
// hardcore :=  ;
55776: LD_ADDR_VAR 0 6
55780: PUSH
55781: LD_STRING 
55783: ST_TO_ADDR
// active :=  ;
55784: LD_ADDR_VAR 0 7
55788: PUSH
55789: LD_STRING 
55791: ST_TO_ADDR
// for i = 1 to normalCounter do
55792: LD_ADDR_VAR 0 8
55796: PUSH
55797: DOUBLE
55798: LD_INT 1
55800: DEC
55801: ST_TO_ADDR
55802: LD_EXP 14
55806: PUSH
55807: FOR_TO
55808: IFFALSE 55909
// begin tmp := 0 ;
55810: LD_ADDR_VAR 0 3
55814: PUSH
55815: LD_STRING 0
55817: ST_TO_ADDR
// if result [ 1 ] then
55818: LD_VAR 0 2
55822: PUSH
55823: LD_INT 1
55825: ARRAY
55826: IFFALSE 55891
// if result [ 1 ] [ 1 ] = i then
55828: LD_VAR 0 2
55832: PUSH
55833: LD_INT 1
55835: ARRAY
55836: PUSH
55837: LD_INT 1
55839: ARRAY
55840: PUSH
55841: LD_VAR 0 8
55845: EQUAL
55846: IFFALSE 55891
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55848: LD_ADDR_VAR 0 2
55852: PUSH
55853: LD_VAR 0 2
55857: PPUSH
55858: LD_INT 1
55860: PPUSH
55861: LD_VAR 0 2
55865: PUSH
55866: LD_INT 1
55868: ARRAY
55869: PPUSH
55870: LD_INT 1
55872: PPUSH
55873: CALL_OW 3
55877: PPUSH
55878: CALL_OW 1
55882: ST_TO_ADDR
// tmp := 1 ;
55883: LD_ADDR_VAR 0 3
55887: PUSH
55888: LD_STRING 1
55890: ST_TO_ADDR
// end ; normal := normal & tmp ;
55891: LD_ADDR_VAR 0 5
55895: PUSH
55896: LD_VAR 0 5
55900: PUSH
55901: LD_VAR 0 3
55905: STR
55906: ST_TO_ADDR
// end ;
55907: GO 55807
55909: POP
55910: POP
// for i = 1 to hardcoreCounter do
55911: LD_ADDR_VAR 0 8
55915: PUSH
55916: DOUBLE
55917: LD_INT 1
55919: DEC
55920: ST_TO_ADDR
55921: LD_EXP 15
55925: PUSH
55926: FOR_TO
55927: IFFALSE 56032
// begin tmp := 0 ;
55929: LD_ADDR_VAR 0 3
55933: PUSH
55934: LD_STRING 0
55936: ST_TO_ADDR
// if result [ 2 ] then
55937: LD_VAR 0 2
55941: PUSH
55942: LD_INT 2
55944: ARRAY
55945: IFFALSE 56014
// if result [ 2 ] [ 1 ] = 100 + i then
55947: LD_VAR 0 2
55951: PUSH
55952: LD_INT 2
55954: ARRAY
55955: PUSH
55956: LD_INT 1
55958: ARRAY
55959: PUSH
55960: LD_INT 100
55962: PUSH
55963: LD_VAR 0 8
55967: PLUS
55968: EQUAL
55969: IFFALSE 56014
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55971: LD_ADDR_VAR 0 2
55975: PUSH
55976: LD_VAR 0 2
55980: PPUSH
55981: LD_INT 2
55983: PPUSH
55984: LD_VAR 0 2
55988: PUSH
55989: LD_INT 2
55991: ARRAY
55992: PPUSH
55993: LD_INT 1
55995: PPUSH
55996: CALL_OW 3
56000: PPUSH
56001: CALL_OW 1
56005: ST_TO_ADDR
// tmp := 1 ;
56006: LD_ADDR_VAR 0 3
56010: PUSH
56011: LD_STRING 1
56013: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56014: LD_ADDR_VAR 0 6
56018: PUSH
56019: LD_VAR 0 6
56023: PUSH
56024: LD_VAR 0 3
56028: STR
56029: ST_TO_ADDR
// end ;
56030: GO 55926
56032: POP
56033: POP
// if isGameLoad then
56034: LD_VAR 0 1
56038: IFFALSE 56513
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56040: LD_ADDR_VAR 0 4
56044: PUSH
56045: LD_EXP 18
56049: PUSH
56050: LD_EXP 17
56054: PUSH
56055: LD_EXP 19
56059: PUSH
56060: LD_EXP 16
56064: PUSH
56065: LD_EXP 20
56069: PUSH
56070: LD_EXP 21
56074: PUSH
56075: LD_EXP 22
56079: PUSH
56080: LD_EXP 23
56084: PUSH
56085: LD_EXP 24
56089: PUSH
56090: LD_EXP 25
56094: PUSH
56095: LD_EXP 26
56099: PUSH
56100: LD_EXP 27
56104: PUSH
56105: LD_EXP 28
56109: PUSH
56110: LD_EXP 29
56114: PUSH
56115: LD_EXP 37
56119: PUSH
56120: LD_EXP 38
56124: PUSH
56125: LD_EXP 39
56129: PUSH
56130: LD_EXP 40
56134: PUSH
56135: LD_EXP 42
56139: PUSH
56140: LD_EXP 43
56144: PUSH
56145: LD_EXP 44
56149: PUSH
56150: LD_EXP 47
56154: PUSH
56155: LD_EXP 49
56159: PUSH
56160: LD_EXP 50
56164: PUSH
56165: LD_EXP 51
56169: PUSH
56170: LD_EXP 53
56174: PUSH
56175: LD_EXP 54
56179: PUSH
56180: LD_EXP 57
56184: PUSH
56185: LD_EXP 58
56189: PUSH
56190: LD_EXP 59
56194: PUSH
56195: LD_EXP 60
56199: PUSH
56200: LD_EXP 61
56204: PUSH
56205: LD_EXP 62
56209: PUSH
56210: LD_EXP 63
56214: PUSH
56215: LD_EXP 64
56219: PUSH
56220: LD_EXP 65
56224: PUSH
56225: LD_EXP 30
56229: PUSH
56230: LD_EXP 31
56234: PUSH
56235: LD_EXP 34
56239: PUSH
56240: LD_EXP 35
56244: PUSH
56245: LD_EXP 36
56249: PUSH
56250: LD_EXP 32
56254: PUSH
56255: LD_EXP 33
56259: PUSH
56260: LD_EXP 41
56264: PUSH
56265: LD_EXP 45
56269: PUSH
56270: LD_EXP 46
56274: PUSH
56275: LD_EXP 48
56279: PUSH
56280: LD_EXP 52
56284: PUSH
56285: LD_EXP 55
56289: PUSH
56290: LD_EXP 56
56294: PUSH
56295: LD_EXP 66
56299: PUSH
56300: LD_EXP 67
56304: PUSH
56305: LD_EXP 68
56309: PUSH
56310: LD_EXP 69
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// tmp :=  ;
56371: LD_ADDR_VAR 0 3
56375: PUSH
56376: LD_STRING 
56378: ST_TO_ADDR
// for i = 1 to normalCounter do
56379: LD_ADDR_VAR 0 8
56383: PUSH
56384: DOUBLE
56385: LD_INT 1
56387: DEC
56388: ST_TO_ADDR
56389: LD_EXP 14
56393: PUSH
56394: FOR_TO
56395: IFFALSE 56431
// begin if flags [ i ] then
56397: LD_VAR 0 4
56401: PUSH
56402: LD_VAR 0 8
56406: ARRAY
56407: IFFALSE 56429
// tmp := tmp & i & ; ;
56409: LD_ADDR_VAR 0 3
56413: PUSH
56414: LD_VAR 0 3
56418: PUSH
56419: LD_VAR 0 8
56423: STR
56424: PUSH
56425: LD_STRING ;
56427: STR
56428: ST_TO_ADDR
// end ;
56429: GO 56394
56431: POP
56432: POP
// for i = 1 to hardcoreCounter do
56433: LD_ADDR_VAR 0 8
56437: PUSH
56438: DOUBLE
56439: LD_INT 1
56441: DEC
56442: ST_TO_ADDR
56443: LD_EXP 15
56447: PUSH
56448: FOR_TO
56449: IFFALSE 56495
// begin if flags [ normalCounter + i ] then
56451: LD_VAR 0 4
56455: PUSH
56456: LD_EXP 14
56460: PUSH
56461: LD_VAR 0 8
56465: PLUS
56466: ARRAY
56467: IFFALSE 56493
// tmp := tmp & ( 100 + i ) & ; ;
56469: LD_ADDR_VAR 0 3
56473: PUSH
56474: LD_VAR 0 3
56478: PUSH
56479: LD_INT 100
56481: PUSH
56482: LD_VAR 0 8
56486: PLUS
56487: STR
56488: PUSH
56489: LD_STRING ;
56491: STR
56492: ST_TO_ADDR
// end ;
56493: GO 56448
56495: POP
56496: POP
// if tmp then
56497: LD_VAR 0 3
56501: IFFALSE 56513
// active := tmp ;
56503: LD_ADDR_VAR 0 7
56507: PUSH
56508: LD_VAR 0 3
56512: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56513: LD_STRING getStreamItemsFromMission("
56515: PUSH
56516: LD_VAR 0 5
56520: STR
56521: PUSH
56522: LD_STRING ","
56524: STR
56525: PUSH
56526: LD_VAR 0 6
56530: STR
56531: PUSH
56532: LD_STRING ","
56534: STR
56535: PUSH
56536: LD_VAR 0 7
56540: STR
56541: PUSH
56542: LD_STRING ")
56544: STR
56545: PPUSH
56546: CALL_OW 559
// end else
56550: GO 56559
// ToLua ( getStreamItemsFromMission("","","") ) ;
56552: LD_STRING getStreamItemsFromMission("","","")
56554: PPUSH
56555: CALL_OW 559
// end ;
56559: LD_VAR 0 2
56563: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56564: LD_EXP 13
56568: IFFALSE 56576
56570: PUSH
56571: LD_EXP 18
56575: AND
56576: IFFALSE 56700
56578: GO 56580
56580: DISABLE
56581: LD_INT 0
56583: PPUSH
56584: PPUSH
// begin enable ;
56585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56586: LD_ADDR_VAR 0 2
56590: PUSH
56591: LD_INT 22
56593: PUSH
56594: LD_OWVAR 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 34
56608: PUSH
56609: LD_INT 7
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 34
56618: PUSH
56619: LD_INT 45
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 34
56628: PUSH
56629: LD_INT 28
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 34
56638: PUSH
56639: LD_INT 47
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PPUSH
56657: CALL_OW 69
56661: ST_TO_ADDR
// if not tmp then
56662: LD_VAR 0 2
56666: NOT
56667: IFFALSE 56671
// exit ;
56669: GO 56700
// for i in tmp do
56671: LD_ADDR_VAR 0 1
56675: PUSH
56676: LD_VAR 0 2
56680: PUSH
56681: FOR_IN
56682: IFFALSE 56698
// begin SetLives ( i , 0 ) ;
56684: LD_VAR 0 1
56688: PPUSH
56689: LD_INT 0
56691: PPUSH
56692: CALL_OW 234
// end ;
56696: GO 56681
56698: POP
56699: POP
// end ;
56700: PPOPN 2
56702: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56703: LD_EXP 13
56707: IFFALSE 56715
56709: PUSH
56710: LD_EXP 19
56714: AND
56715: IFFALSE 56799
56717: GO 56719
56719: DISABLE
56720: LD_INT 0
56722: PPUSH
56723: PPUSH
// begin enable ;
56724: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56725: LD_ADDR_VAR 0 2
56729: PUSH
56730: LD_INT 22
56732: PUSH
56733: LD_OWVAR 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 32
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PPUSH
56756: CALL_OW 69
56760: ST_TO_ADDR
// if not tmp then
56761: LD_VAR 0 2
56765: NOT
56766: IFFALSE 56770
// exit ;
56768: GO 56799
// for i in tmp do
56770: LD_ADDR_VAR 0 1
56774: PUSH
56775: LD_VAR 0 2
56779: PUSH
56780: FOR_IN
56781: IFFALSE 56797
// begin SetLives ( i , 0 ) ;
56783: LD_VAR 0 1
56787: PPUSH
56788: LD_INT 0
56790: PPUSH
56791: CALL_OW 234
// end ;
56795: GO 56780
56797: POP
56798: POP
// end ;
56799: PPOPN 2
56801: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56802: LD_EXP 13
56806: IFFALSE 56814
56808: PUSH
56809: LD_EXP 16
56813: AND
56814: IFFALSE 56907
56816: GO 56818
56818: DISABLE
56819: LD_INT 0
56821: PPUSH
// begin enable ;
56822: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56823: LD_ADDR_VAR 0 1
56827: PUSH
56828: LD_INT 22
56830: PUSH
56831: LD_OWVAR 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: LD_INT 25
56845: PUSH
56846: LD_INT 5
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 25
56855: PUSH
56856: LD_INT 9
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 25
56865: PUSH
56866: LD_INT 8
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PPUSH
56883: CALL_OW 69
56887: PUSH
56888: FOR_IN
56889: IFFALSE 56905
// begin SetClass ( i , 1 ) ;
56891: LD_VAR 0 1
56895: PPUSH
56896: LD_INT 1
56898: PPUSH
56899: CALL_OW 336
// end ;
56903: GO 56888
56905: POP
56906: POP
// end ;
56907: PPOPN 1
56909: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56910: LD_EXP 13
56914: IFFALSE 56922
56916: PUSH
56917: LD_EXP 17
56921: AND
56922: IFFALSE 56934
56924: PUSH
56925: LD_OWVAR 65
56929: PUSH
56930: LD_INT 7
56932: LESS
56933: AND
56934: IFFALSE 56948
56936: GO 56938
56938: DISABLE
// begin enable ;
56939: ENABLE
// game_speed := 7 ;
56940: LD_ADDR_OWVAR 65
56944: PUSH
56945: LD_INT 7
56947: ST_TO_ADDR
// end ;
56948: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56949: LD_EXP 13
56953: IFFALSE 56961
56955: PUSH
56956: LD_EXP 20
56960: AND
56961: IFFALSE 57163
56963: GO 56965
56965: DISABLE
56966: LD_INT 0
56968: PPUSH
56969: PPUSH
56970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56971: LD_ADDR_VAR 0 3
56975: PUSH
56976: LD_INT 81
56978: PUSH
56979: LD_OWVAR 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 21
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PPUSH
57002: CALL_OW 69
57006: ST_TO_ADDR
// if not tmp then
57007: LD_VAR 0 3
57011: NOT
57012: IFFALSE 57016
// exit ;
57014: GO 57163
// if tmp > 5 then
57016: LD_VAR 0 3
57020: PUSH
57021: LD_INT 5
57023: GREATER
57024: IFFALSE 57036
// k := 5 else
57026: LD_ADDR_VAR 0 2
57030: PUSH
57031: LD_INT 5
57033: ST_TO_ADDR
57034: GO 57046
// k := tmp ;
57036: LD_ADDR_VAR 0 2
57040: PUSH
57041: LD_VAR 0 3
57045: ST_TO_ADDR
// for i := 1 to k do
57046: LD_ADDR_VAR 0 1
57050: PUSH
57051: DOUBLE
57052: LD_INT 1
57054: DEC
57055: ST_TO_ADDR
57056: LD_VAR 0 2
57060: PUSH
57061: FOR_TO
57062: IFFALSE 57161
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57064: LD_VAR 0 3
57068: PUSH
57069: LD_VAR 0 1
57073: ARRAY
57074: PPUSH
57075: LD_VAR 0 1
57079: PUSH
57080: LD_INT 4
57082: MOD
57083: PUSH
57084: LD_INT 1
57086: PLUS
57087: PPUSH
57088: CALL_OW 259
57092: PUSH
57093: LD_INT 10
57095: LESS
57096: IFFALSE 57159
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57098: LD_VAR 0 3
57102: PUSH
57103: LD_VAR 0 1
57107: ARRAY
57108: PPUSH
57109: LD_VAR 0 1
57113: PUSH
57114: LD_INT 4
57116: MOD
57117: PUSH
57118: LD_INT 1
57120: PLUS
57121: PPUSH
57122: LD_VAR 0 3
57126: PUSH
57127: LD_VAR 0 1
57131: ARRAY
57132: PPUSH
57133: LD_VAR 0 1
57137: PUSH
57138: LD_INT 4
57140: MOD
57141: PUSH
57142: LD_INT 1
57144: PLUS
57145: PPUSH
57146: CALL_OW 259
57150: PUSH
57151: LD_INT 1
57153: PLUS
57154: PPUSH
57155: CALL_OW 237
57159: GO 57061
57161: POP
57162: POP
// end ;
57163: PPOPN 3
57165: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57166: LD_EXP 13
57170: IFFALSE 57178
57172: PUSH
57173: LD_EXP 21
57177: AND
57178: IFFALSE 57198
57180: GO 57182
57182: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57183: LD_INT 4
57185: PPUSH
57186: LD_OWVAR 2
57190: PPUSH
57191: LD_INT 0
57193: PPUSH
57194: CALL_OW 324
57198: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57199: LD_EXP 13
57203: IFFALSE 57211
57205: PUSH
57206: LD_EXP 50
57210: AND
57211: IFFALSE 57231
57213: GO 57215
57215: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57216: LD_INT 19
57218: PPUSH
57219: LD_OWVAR 2
57223: PPUSH
57224: LD_INT 0
57226: PPUSH
57227: CALL_OW 324
57231: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57232: LD_EXP 13
57236: IFFALSE 57244
57238: PUSH
57239: LD_EXP 22
57243: AND
57244: IFFALSE 57346
57246: GO 57248
57248: DISABLE
57249: LD_INT 0
57251: PPUSH
57252: PPUSH
// begin enable ;
57253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57254: LD_ADDR_VAR 0 2
57258: PUSH
57259: LD_INT 22
57261: PUSH
57262: LD_OWVAR 2
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 34
57276: PUSH
57277: LD_INT 11
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 34
57286: PUSH
57287: LD_INT 30
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PPUSH
57303: CALL_OW 69
57307: ST_TO_ADDR
// if not tmp then
57308: LD_VAR 0 2
57312: NOT
57313: IFFALSE 57317
// exit ;
57315: GO 57346
// for i in tmp do
57317: LD_ADDR_VAR 0 1
57321: PUSH
57322: LD_VAR 0 2
57326: PUSH
57327: FOR_IN
57328: IFFALSE 57344
// begin SetLives ( i , 0 ) ;
57330: LD_VAR 0 1
57334: PPUSH
57335: LD_INT 0
57337: PPUSH
57338: CALL_OW 234
// end ;
57342: GO 57327
57344: POP
57345: POP
// end ;
57346: PPOPN 2
57348: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57349: LD_EXP 13
57353: IFFALSE 57361
57355: PUSH
57356: LD_EXP 23
57360: AND
57361: IFFALSE 57381
57363: GO 57365
57365: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57366: LD_INT 32
57368: PPUSH
57369: LD_OWVAR 2
57373: PPUSH
57374: LD_INT 0
57376: PPUSH
57377: CALL_OW 324
57381: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57382: LD_EXP 13
57386: IFFALSE 57394
57388: PUSH
57389: LD_EXP 24
57393: AND
57394: IFFALSE 57577
57396: GO 57398
57398: DISABLE
57399: LD_INT 0
57401: PPUSH
57402: PPUSH
57403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57404: LD_ADDR_VAR 0 2
57408: PUSH
57409: LD_INT 22
57411: PUSH
57412: LD_OWVAR 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 33
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PPUSH
57435: CALL_OW 69
57439: ST_TO_ADDR
// if not tmp then
57440: LD_VAR 0 2
57444: NOT
57445: IFFALSE 57449
// exit ;
57447: GO 57577
// side := 0 ;
57449: LD_ADDR_VAR 0 3
57453: PUSH
57454: LD_INT 0
57456: ST_TO_ADDR
// for i := 1 to 8 do
57457: LD_ADDR_VAR 0 1
57461: PUSH
57462: DOUBLE
57463: LD_INT 1
57465: DEC
57466: ST_TO_ADDR
57467: LD_INT 8
57469: PUSH
57470: FOR_TO
57471: IFFALSE 57521
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57473: LD_OWVAR 2
57477: PUSH
57478: LD_VAR 0 1
57482: NONEQUAL
57483: IFFALSE 57505
57485: PUSH
57486: LD_OWVAR 2
57490: PPUSH
57491: LD_VAR 0 1
57495: PPUSH
57496: CALL_OW 81
57500: PUSH
57501: LD_INT 2
57503: EQUAL
57504: AND
57505: IFFALSE 57519
// begin side := i ;
57507: LD_ADDR_VAR 0 3
57511: PUSH
57512: LD_VAR 0 1
57516: ST_TO_ADDR
// break ;
57517: GO 57521
// end ;
57519: GO 57470
57521: POP
57522: POP
// if not side then
57523: LD_VAR 0 3
57527: NOT
57528: IFFALSE 57532
// exit ;
57530: GO 57577
// for i := 1 to tmp do
57532: LD_ADDR_VAR 0 1
57536: PUSH
57537: DOUBLE
57538: LD_INT 1
57540: DEC
57541: ST_TO_ADDR
57542: LD_VAR 0 2
57546: PUSH
57547: FOR_TO
57548: IFFALSE 57575
// if Prob ( 60 ) then
57550: LD_INT 60
57552: PPUSH
57553: CALL_OW 13
57557: IFFALSE 57573
// SetSide ( i , side ) ;
57559: LD_VAR 0 1
57563: PPUSH
57564: LD_VAR 0 3
57568: PPUSH
57569: CALL_OW 235
57573: GO 57547
57575: POP
57576: POP
// end ;
57577: PPOPN 3
57579: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57580: LD_EXP 13
57584: IFFALSE 57592
57586: PUSH
57587: LD_EXP 26
57591: AND
57592: IFFALSE 57711
57594: GO 57596
57596: DISABLE
57597: LD_INT 0
57599: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57600: LD_ADDR_VAR 0 1
57604: PUSH
57605: LD_INT 22
57607: PUSH
57608: LD_OWVAR 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 21
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: PUSH
57630: LD_INT 23
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: PPUSH
57649: CALL_OW 69
57653: PUSH
57654: FOR_IN
57655: IFFALSE 57709
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57657: LD_VAR 0 1
57661: PPUSH
57662: CALL_OW 257
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: LD_INT 4
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: IN
57685: IFFALSE 57707
// SetClass ( un , rand ( 1 , 4 ) ) ;
57687: LD_VAR 0 1
57691: PPUSH
57692: LD_INT 1
57694: PPUSH
57695: LD_INT 4
57697: PPUSH
57698: CALL_OW 12
57702: PPUSH
57703: CALL_OW 336
57707: GO 57654
57709: POP
57710: POP
// end ;
57711: PPOPN 1
57713: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57714: LD_EXP 13
57718: IFFALSE 57726
57720: PUSH
57721: LD_EXP 25
57725: AND
57726: IFFALSE 57805
57728: GO 57730
57730: DISABLE
57731: LD_INT 0
57733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57734: LD_ADDR_VAR 0 1
57738: PUSH
57739: LD_INT 22
57741: PUSH
57742: LD_OWVAR 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 21
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PPUSH
57765: CALL_OW 69
57769: ST_TO_ADDR
// if not tmp then
57770: LD_VAR 0 1
57774: NOT
57775: IFFALSE 57779
// exit ;
57777: GO 57805
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57779: LD_VAR 0 1
57783: PUSH
57784: LD_INT 1
57786: PPUSH
57787: LD_VAR 0 1
57791: PPUSH
57792: CALL_OW 12
57796: ARRAY
57797: PPUSH
57798: LD_INT 100
57800: PPUSH
57801: CALL_OW 234
// end ;
57805: PPOPN 1
57807: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57808: LD_EXP 13
57812: IFFALSE 57820
57814: PUSH
57815: LD_EXP 27
57819: AND
57820: IFFALSE 57918
57822: GO 57824
57824: DISABLE
57825: LD_INT 0
57827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57828: LD_ADDR_VAR 0 1
57832: PUSH
57833: LD_INT 22
57835: PUSH
57836: LD_OWVAR 2
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 21
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PPUSH
57859: CALL_OW 69
57863: ST_TO_ADDR
// if not tmp then
57864: LD_VAR 0 1
57868: NOT
57869: IFFALSE 57873
// exit ;
57871: GO 57918
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57873: LD_VAR 0 1
57877: PUSH
57878: LD_INT 1
57880: PPUSH
57881: LD_VAR 0 1
57885: PPUSH
57886: CALL_OW 12
57890: ARRAY
57891: PPUSH
57892: LD_INT 1
57894: PPUSH
57895: LD_INT 4
57897: PPUSH
57898: CALL_OW 12
57902: PPUSH
57903: LD_INT 3000
57905: PPUSH
57906: LD_INT 9000
57908: PPUSH
57909: CALL_OW 12
57913: PPUSH
57914: CALL_OW 492
// end ;
57918: PPOPN 1
57920: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57921: LD_EXP 13
57925: IFFALSE 57933
57927: PUSH
57928: LD_EXP 28
57932: AND
57933: IFFALSE 57953
57935: GO 57937
57937: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57938: LD_INT 1
57940: PPUSH
57941: LD_OWVAR 2
57945: PPUSH
57946: LD_INT 0
57948: PPUSH
57949: CALL_OW 324
57953: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57954: LD_EXP 13
57958: IFFALSE 57966
57960: PUSH
57961: LD_EXP 29
57965: AND
57966: IFFALSE 58049
57968: GO 57970
57970: DISABLE
57971: LD_INT 0
57973: PPUSH
57974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57975: LD_ADDR_VAR 0 2
57979: PUSH
57980: LD_INT 22
57982: PUSH
57983: LD_OWVAR 2
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 21
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PPUSH
58006: CALL_OW 69
58010: ST_TO_ADDR
// if not tmp then
58011: LD_VAR 0 2
58015: NOT
58016: IFFALSE 58020
// exit ;
58018: GO 58049
// for i in tmp do
58020: LD_ADDR_VAR 0 1
58024: PUSH
58025: LD_VAR 0 2
58029: PUSH
58030: FOR_IN
58031: IFFALSE 58047
// SetBLevel ( i , 10 ) ;
58033: LD_VAR 0 1
58037: PPUSH
58038: LD_INT 10
58040: PPUSH
58041: CALL_OW 241
58045: GO 58030
58047: POP
58048: POP
// end ;
58049: PPOPN 2
58051: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58052: LD_EXP 13
58056: IFFALSE 58064
58058: PUSH
58059: LD_EXP 30
58063: AND
58064: IFFALSE 58175
58066: GO 58068
58068: DISABLE
58069: LD_INT 0
58071: PPUSH
58072: PPUSH
58073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58074: LD_ADDR_VAR 0 3
58078: PUSH
58079: LD_INT 22
58081: PUSH
58082: LD_OWVAR 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 25
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PPUSH
58105: CALL_OW 69
58109: ST_TO_ADDR
// if not tmp then
58110: LD_VAR 0 3
58114: NOT
58115: IFFALSE 58119
// exit ;
58117: GO 58175
// un := tmp [ rand ( 1 , tmp ) ] ;
58119: LD_ADDR_VAR 0 2
58123: PUSH
58124: LD_VAR 0 3
58128: PUSH
58129: LD_INT 1
58131: PPUSH
58132: LD_VAR 0 3
58136: PPUSH
58137: CALL_OW 12
58141: ARRAY
58142: ST_TO_ADDR
// if Crawls ( un ) then
58143: LD_VAR 0 2
58147: PPUSH
58148: CALL_OW 318
58152: IFFALSE 58163
// ComWalk ( un ) ;
58154: LD_VAR 0 2
58158: PPUSH
58159: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58163: LD_VAR 0 2
58167: PPUSH
58168: LD_INT 5
58170: PPUSH
58171: CALL_OW 336
// end ;
58175: PPOPN 3
58177: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58178: LD_EXP 13
58182: IFFALSE 58190
58184: PUSH
58185: LD_EXP 31
58189: AND
58190: IFFALSE 58202
58192: PUSH
58193: LD_OWVAR 67
58197: PUSH
58198: LD_INT 4
58200: LESS
58201: AND
58202: IFFALSE 58221
58204: GO 58206
58206: DISABLE
// begin Difficulty := Difficulty + 1 ;
58207: LD_ADDR_OWVAR 67
58211: PUSH
58212: LD_OWVAR 67
58216: PUSH
58217: LD_INT 1
58219: PLUS
58220: ST_TO_ADDR
// end ;
58221: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58222: LD_EXP 13
58226: IFFALSE 58234
58228: PUSH
58229: LD_EXP 32
58233: AND
58234: IFFALSE 58337
58236: GO 58238
58238: DISABLE
58239: LD_INT 0
58241: PPUSH
// begin for i := 1 to 5 do
58242: LD_ADDR_VAR 0 1
58246: PUSH
58247: DOUBLE
58248: LD_INT 1
58250: DEC
58251: ST_TO_ADDR
58252: LD_INT 5
58254: PUSH
58255: FOR_TO
58256: IFFALSE 58335
// begin uc_nation := nation_nature ;
58258: LD_ADDR_OWVAR 21
58262: PUSH
58263: LD_INT 0
58265: ST_TO_ADDR
// uc_side := 0 ;
58266: LD_ADDR_OWVAR 20
58270: PUSH
58271: LD_INT 0
58273: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58274: LD_ADDR_OWVAR 29
58278: PUSH
58279: LD_INT 12
58281: PUSH
58282: LD_INT 12
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: ST_TO_ADDR
// hc_agressivity := 20 ;
58289: LD_ADDR_OWVAR 35
58293: PUSH
58294: LD_INT 20
58296: ST_TO_ADDR
// hc_class := class_tiger ;
58297: LD_ADDR_OWVAR 28
58301: PUSH
58302: LD_INT 14
58304: ST_TO_ADDR
// hc_gallery :=  ;
58305: LD_ADDR_OWVAR 33
58309: PUSH
58310: LD_STRING 
58312: ST_TO_ADDR
// hc_name :=  ;
58313: LD_ADDR_OWVAR 26
58317: PUSH
58318: LD_STRING 
58320: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58321: CALL_OW 44
58325: PPUSH
58326: LD_INT 0
58328: PPUSH
58329: CALL_OW 51
// end ;
58333: GO 58255
58335: POP
58336: POP
// end ;
58337: PPOPN 1
58339: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58340: LD_EXP 13
58344: IFFALSE 58352
58346: PUSH
58347: LD_EXP 33
58351: AND
58352: IFFALSE 58361
58354: GO 58356
58356: DISABLE
// StreamSibBomb ;
58357: CALL 58362 0 0
58361: END
// export function StreamSibBomb ; var i , x , y ; begin
58362: LD_INT 0
58364: PPUSH
58365: PPUSH
58366: PPUSH
58367: PPUSH
// result := false ;
58368: LD_ADDR_VAR 0 1
58372: PUSH
58373: LD_INT 0
58375: ST_TO_ADDR
// for i := 1 to 16 do
58376: LD_ADDR_VAR 0 2
58380: PUSH
58381: DOUBLE
58382: LD_INT 1
58384: DEC
58385: ST_TO_ADDR
58386: LD_INT 16
58388: PUSH
58389: FOR_TO
58390: IFFALSE 58589
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58392: LD_ADDR_VAR 0 3
58396: PUSH
58397: LD_INT 10
58399: PUSH
58400: LD_INT 20
58402: PUSH
58403: LD_INT 30
58405: PUSH
58406: LD_INT 40
58408: PUSH
58409: LD_INT 50
58411: PUSH
58412: LD_INT 60
58414: PUSH
58415: LD_INT 70
58417: PUSH
58418: LD_INT 80
58420: PUSH
58421: LD_INT 90
58423: PUSH
58424: LD_INT 100
58426: PUSH
58427: LD_INT 110
58429: PUSH
58430: LD_INT 120
58432: PUSH
58433: LD_INT 130
58435: PUSH
58436: LD_INT 140
58438: PUSH
58439: LD_INT 150
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PPUSH
58462: LD_INT 15
58464: PPUSH
58465: CALL_OW 12
58469: ARRAY
58470: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58471: LD_ADDR_VAR 0 4
58475: PUSH
58476: LD_INT 10
58478: PUSH
58479: LD_INT 20
58481: PUSH
58482: LD_INT 30
58484: PUSH
58485: LD_INT 40
58487: PUSH
58488: LD_INT 50
58490: PUSH
58491: LD_INT 60
58493: PUSH
58494: LD_INT 70
58496: PUSH
58497: LD_INT 80
58499: PUSH
58500: LD_INT 90
58502: PUSH
58503: LD_INT 100
58505: PUSH
58506: LD_INT 110
58508: PUSH
58509: LD_INT 120
58511: PUSH
58512: LD_INT 130
58514: PUSH
58515: LD_INT 140
58517: PUSH
58518: LD_INT 150
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PPUSH
58541: LD_INT 15
58543: PPUSH
58544: CALL_OW 12
58548: ARRAY
58549: ST_TO_ADDR
// if ValidHex ( x , y ) then
58550: LD_VAR 0 3
58554: PPUSH
58555: LD_VAR 0 4
58559: PPUSH
58560: CALL_OW 488
58564: IFFALSE 58587
// begin result := [ x , y ] ;
58566: LD_ADDR_VAR 0 1
58570: PUSH
58571: LD_VAR 0 3
58575: PUSH
58576: LD_VAR 0 4
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: ST_TO_ADDR
// break ;
58585: GO 58589
// end ; end ;
58587: GO 58389
58589: POP
58590: POP
// if result then
58591: LD_VAR 0 1
58595: IFFALSE 58655
// begin ToLua ( playSibBomb() ) ;
58597: LD_STRING playSibBomb()
58599: PPUSH
58600: CALL_OW 559
// wait ( 0 0$14 ) ;
58604: LD_INT 490
58606: PPUSH
58607: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58611: LD_VAR 0 1
58615: PUSH
58616: LD_INT 1
58618: ARRAY
58619: PPUSH
58620: LD_VAR 0 1
58624: PUSH
58625: LD_INT 2
58627: ARRAY
58628: PPUSH
58629: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58633: LD_VAR 0 1
58637: PUSH
58638: LD_INT 1
58640: ARRAY
58641: PPUSH
58642: LD_VAR 0 1
58646: PUSH
58647: LD_INT 2
58649: ARRAY
58650: PPUSH
58651: CALL_OW 429
// end ; end ;
58655: LD_VAR 0 1
58659: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58660: LD_EXP 13
58664: IFFALSE 58672
58666: PUSH
58667: LD_EXP 35
58671: AND
58672: IFFALSE 58684
58674: GO 58676
58676: DISABLE
// YouLost (  ) ;
58677: LD_STRING 
58679: PPUSH
58680: CALL_OW 104
58684: END
// every 0 0$1 trigger StreamModeActive and sFog do
58685: LD_EXP 13
58689: IFFALSE 58697
58691: PUSH
58692: LD_EXP 34
58696: AND
58697: IFFALSE 58711
58699: GO 58701
58701: DISABLE
// FogOff ( your_side ) ;
58702: LD_OWVAR 2
58706: PPUSH
58707: CALL_OW 344
58711: END
// every 0 0$1 trigger StreamModeActive and sSun do
58712: LD_EXP 13
58716: IFFALSE 58724
58718: PUSH
58719: LD_EXP 36
58723: AND
58724: IFFALSE 58752
58726: GO 58728
58728: DISABLE
// begin solar_recharge_percent := 0 ;
58729: LD_ADDR_OWVAR 79
58733: PUSH
58734: LD_INT 0
58736: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58737: LD_INT 10500
58739: PPUSH
58740: CALL_OW 67
// solar_recharge_percent := 100 ;
58744: LD_ADDR_OWVAR 79
58748: PUSH
58749: LD_INT 100
58751: ST_TO_ADDR
// end ;
58752: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58753: LD_EXP 13
58757: IFFALSE 58765
58759: PUSH
58760: LD_EXP 37
58764: AND
58765: IFFALSE 59004
58767: GO 58769
58769: DISABLE
58770: LD_INT 0
58772: PPUSH
58773: PPUSH
58774: PPUSH
// begin tmp := [ ] ;
58775: LD_ADDR_VAR 0 3
58779: PUSH
58780: EMPTY
58781: ST_TO_ADDR
// for i := 1 to 6 do
58782: LD_ADDR_VAR 0 1
58786: PUSH
58787: DOUBLE
58788: LD_INT 1
58790: DEC
58791: ST_TO_ADDR
58792: LD_INT 6
58794: PUSH
58795: FOR_TO
58796: IFFALSE 58901
// begin uc_nation := nation_nature ;
58798: LD_ADDR_OWVAR 21
58802: PUSH
58803: LD_INT 0
58805: ST_TO_ADDR
// uc_side := 0 ;
58806: LD_ADDR_OWVAR 20
58810: PUSH
58811: LD_INT 0
58813: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58814: LD_ADDR_OWVAR 29
58818: PUSH
58819: LD_INT 12
58821: PUSH
58822: LD_INT 12
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// hc_agressivity := 20 ;
58829: LD_ADDR_OWVAR 35
58833: PUSH
58834: LD_INT 20
58836: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58837: LD_ADDR_OWVAR 28
58841: PUSH
58842: LD_INT 17
58844: ST_TO_ADDR
// hc_gallery :=  ;
58845: LD_ADDR_OWVAR 33
58849: PUSH
58850: LD_STRING 
58852: ST_TO_ADDR
// hc_name :=  ;
58853: LD_ADDR_OWVAR 26
58857: PUSH
58858: LD_STRING 
58860: ST_TO_ADDR
// un := CreateHuman ;
58861: LD_ADDR_VAR 0 2
58865: PUSH
58866: CALL_OW 44
58870: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58871: LD_VAR 0 2
58875: PPUSH
58876: LD_INT 1
58878: PPUSH
58879: CALL_OW 51
// tmp := tmp ^ un ;
58883: LD_ADDR_VAR 0 3
58887: PUSH
58888: LD_VAR 0 3
58892: PUSH
58893: LD_VAR 0 2
58897: ADD
58898: ST_TO_ADDR
// end ;
58899: GO 58795
58901: POP
58902: POP
// repeat wait ( 0 0$1 ) ;
58903: LD_INT 35
58905: PPUSH
58906: CALL_OW 67
// for un in tmp do
58910: LD_ADDR_VAR 0 2
58914: PUSH
58915: LD_VAR 0 3
58919: PUSH
58920: FOR_IN
58921: IFFALSE 58995
// begin if IsDead ( un ) then
58923: LD_VAR 0 2
58927: PPUSH
58928: CALL_OW 301
58932: IFFALSE 58952
// begin tmp := tmp diff un ;
58934: LD_ADDR_VAR 0 3
58938: PUSH
58939: LD_VAR 0 3
58943: PUSH
58944: LD_VAR 0 2
58948: DIFF
58949: ST_TO_ADDR
// continue ;
58950: GO 58920
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58952: LD_VAR 0 2
58956: PPUSH
58957: LD_INT 3
58959: PUSH
58960: LD_INT 22
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PPUSH
58974: CALL_OW 69
58978: PPUSH
58979: LD_VAR 0 2
58983: PPUSH
58984: CALL_OW 74
58988: PPUSH
58989: CALL_OW 115
// end ;
58993: GO 58920
58995: POP
58996: POP
// until not tmp ;
58997: LD_VAR 0 3
59001: NOT
59002: IFFALSE 58903
// end ;
59004: PPOPN 3
59006: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59007: LD_EXP 13
59011: IFFALSE 59019
59013: PUSH
59014: LD_EXP 38
59018: AND
59019: IFFALSE 59073
59021: GO 59023
59023: DISABLE
// begin ToLua ( displayTroll(); ) ;
59024: LD_STRING displayTroll();
59026: PPUSH
59027: CALL_OW 559
// wait ( 3 3$00 ) ;
59031: LD_INT 6300
59033: PPUSH
59034: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59038: LD_STRING hideTroll();
59040: PPUSH
59041: CALL_OW 559
// wait ( 1 1$00 ) ;
59045: LD_INT 2100
59047: PPUSH
59048: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59052: LD_STRING displayTroll();
59054: PPUSH
59055: CALL_OW 559
// wait ( 1 1$00 ) ;
59059: LD_INT 2100
59061: PPUSH
59062: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59066: LD_STRING hideTroll();
59068: PPUSH
59069: CALL_OW 559
// end ;
59073: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59074: LD_EXP 13
59078: IFFALSE 59086
59080: PUSH
59081: LD_EXP 39
59085: AND
59086: IFFALSE 59149
59088: GO 59090
59090: DISABLE
59091: LD_INT 0
59093: PPUSH
// begin p := 0 ;
59094: LD_ADDR_VAR 0 1
59098: PUSH
59099: LD_INT 0
59101: ST_TO_ADDR
// repeat game_speed := 1 ;
59102: LD_ADDR_OWVAR 65
59106: PUSH
59107: LD_INT 1
59109: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59110: LD_INT 35
59112: PPUSH
59113: CALL_OW 67
// p := p + 1 ;
59117: LD_ADDR_VAR 0 1
59121: PUSH
59122: LD_VAR 0 1
59126: PUSH
59127: LD_INT 1
59129: PLUS
59130: ST_TO_ADDR
// until p >= 60 ;
59131: LD_VAR 0 1
59135: PUSH
59136: LD_INT 60
59138: GREATEREQUAL
59139: IFFALSE 59102
// game_speed := 4 ;
59141: LD_ADDR_OWVAR 65
59145: PUSH
59146: LD_INT 4
59148: ST_TO_ADDR
// end ;
59149: PPOPN 1
59151: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59152: LD_EXP 13
59156: IFFALSE 59164
59158: PUSH
59159: LD_EXP 40
59163: AND
59164: IFFALSE 59310
59166: GO 59168
59168: DISABLE
59169: LD_INT 0
59171: PPUSH
59172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59173: LD_ADDR_VAR 0 1
59177: PUSH
59178: LD_INT 22
59180: PUSH
59181: LD_OWVAR 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 30
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 30
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PPUSH
59222: CALL_OW 69
59226: ST_TO_ADDR
// if not depot then
59227: LD_VAR 0 1
59231: NOT
59232: IFFALSE 59236
// exit ;
59234: GO 59310
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59236: LD_ADDR_VAR 0 2
59240: PUSH
59241: LD_VAR 0 1
59245: PUSH
59246: LD_INT 1
59248: PPUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 12
59258: ARRAY
59259: PPUSH
59260: CALL_OW 274
59264: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59265: LD_VAR 0 2
59269: PPUSH
59270: LD_INT 1
59272: PPUSH
59273: LD_INT 0
59275: PPUSH
59276: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59280: LD_VAR 0 2
59284: PPUSH
59285: LD_INT 2
59287: PPUSH
59288: LD_INT 0
59290: PPUSH
59291: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59295: LD_VAR 0 2
59299: PPUSH
59300: LD_INT 3
59302: PPUSH
59303: LD_INT 0
59305: PPUSH
59306: CALL_OW 277
// end ;
59310: PPOPN 2
59312: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59313: LD_EXP 13
59317: IFFALSE 59325
59319: PUSH
59320: LD_EXP 41
59324: AND
59325: IFFALSE 59422
59327: GO 59329
59329: DISABLE
59330: LD_INT 0
59332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59333: LD_ADDR_VAR 0 1
59337: PUSH
59338: LD_INT 22
59340: PUSH
59341: LD_OWVAR 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 21
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: LD_INT 23
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: PPUSH
59382: CALL_OW 69
59386: ST_TO_ADDR
// if not tmp then
59387: LD_VAR 0 1
59391: NOT
59392: IFFALSE 59396
// exit ;
59394: GO 59422
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 1
59403: PPUSH
59404: LD_VAR 0 1
59408: PPUSH
59409: CALL_OW 12
59413: ARRAY
59414: PPUSH
59415: LD_INT 200
59417: PPUSH
59418: CALL_OW 234
// end ;
59422: PPOPN 1
59424: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59425: LD_EXP 13
59429: IFFALSE 59437
59431: PUSH
59432: LD_EXP 42
59436: AND
59437: IFFALSE 59516
59439: GO 59441
59441: DISABLE
59442: LD_INT 0
59444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59445: LD_ADDR_VAR 0 1
59449: PUSH
59450: LD_INT 22
59452: PUSH
59453: LD_OWVAR 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 21
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PPUSH
59476: CALL_OW 69
59480: ST_TO_ADDR
// if not tmp then
59481: LD_VAR 0 1
59485: NOT
59486: IFFALSE 59490
// exit ;
59488: GO 59516
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59490: LD_VAR 0 1
59494: PUSH
59495: LD_INT 1
59497: PPUSH
59498: LD_VAR 0 1
59502: PPUSH
59503: CALL_OW 12
59507: ARRAY
59508: PPUSH
59509: LD_INT 60
59511: PPUSH
59512: CALL_OW 234
// end ;
59516: PPOPN 1
59518: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59519: LD_EXP 13
59523: IFFALSE 59531
59525: PUSH
59526: LD_EXP 43
59530: AND
59531: IFFALSE 59630
59533: GO 59535
59535: DISABLE
59536: LD_INT 0
59538: PPUSH
59539: PPUSH
// begin enable ;
59540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59541: LD_ADDR_VAR 0 1
59545: PUSH
59546: LD_INT 22
59548: PUSH
59549: LD_OWVAR 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 61
59560: PUSH
59561: EMPTY
59562: LIST
59563: PUSH
59564: LD_INT 33
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: PPUSH
59579: CALL_OW 69
59583: ST_TO_ADDR
// if not tmp then
59584: LD_VAR 0 1
59588: NOT
59589: IFFALSE 59593
// exit ;
59591: GO 59630
// for i in tmp do
59593: LD_ADDR_VAR 0 2
59597: PUSH
59598: LD_VAR 0 1
59602: PUSH
59603: FOR_IN
59604: IFFALSE 59628
// if IsControledBy ( i ) then
59606: LD_VAR 0 2
59610: PPUSH
59611: CALL_OW 312
59615: IFFALSE 59626
// ComUnlink ( i ) ;
59617: LD_VAR 0 2
59621: PPUSH
59622: CALL_OW 136
59626: GO 59603
59628: POP
59629: POP
// end ;
59630: PPOPN 2
59632: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59633: LD_EXP 13
59637: IFFALSE 59645
59639: PUSH
59640: LD_EXP 44
59644: AND
59645: IFFALSE 59785
59647: GO 59649
59649: DISABLE
59650: LD_INT 0
59652: PPUSH
59653: PPUSH
// begin ToLua ( displayPowell(); ) ;
59654: LD_STRING displayPowell();
59656: PPUSH
59657: CALL_OW 559
// uc_side := 0 ;
59661: LD_ADDR_OWVAR 20
59665: PUSH
59666: LD_INT 0
59668: ST_TO_ADDR
// uc_nation := 2 ;
59669: LD_ADDR_OWVAR 21
59673: PUSH
59674: LD_INT 2
59676: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59677: LD_ADDR_OWVAR 37
59681: PUSH
59682: LD_INT 14
59684: ST_TO_ADDR
// vc_engine := engine_siberite ;
59685: LD_ADDR_OWVAR 39
59689: PUSH
59690: LD_INT 3
59692: ST_TO_ADDR
// vc_control := control_apeman ;
59693: LD_ADDR_OWVAR 38
59697: PUSH
59698: LD_INT 5
59700: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59701: LD_ADDR_OWVAR 40
59705: PUSH
59706: LD_INT 29
59708: ST_TO_ADDR
// un := CreateVehicle ;
59709: LD_ADDR_VAR 0 2
59713: PUSH
59714: CALL_OW 45
59718: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59719: LD_VAR 0 2
59723: PPUSH
59724: LD_INT 1
59726: PPUSH
59727: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59731: LD_INT 35
59733: PPUSH
59734: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59738: LD_VAR 0 2
59742: PPUSH
59743: LD_INT 22
59745: PUSH
59746: LD_OWVAR 2
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PPUSH
59755: CALL_OW 69
59759: PPUSH
59760: LD_VAR 0 2
59764: PPUSH
59765: CALL_OW 74
59769: PPUSH
59770: CALL_OW 115
// until IsDead ( un ) ;
59774: LD_VAR 0 2
59778: PPUSH
59779: CALL_OW 301
59783: IFFALSE 59731
// end ;
59785: PPOPN 2
59787: END
// every 0 0$1 trigger StreamModeActive and sStu do
59788: LD_EXP 13
59792: IFFALSE 59800
59794: PUSH
59795: LD_EXP 52
59799: AND
59800: IFFALSE 59816
59802: GO 59804
59804: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59805: LD_STRING displayStucuk();
59807: PPUSH
59808: CALL_OW 559
// ResetFog ;
59812: CALL_OW 335
// end ;
59816: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59817: LD_EXP 13
59821: IFFALSE 59829
59823: PUSH
59824: LD_EXP 45
59828: AND
59829: IFFALSE 59970
59831: GO 59833
59833: DISABLE
59834: LD_INT 0
59836: PPUSH
59837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59838: LD_ADDR_VAR 0 2
59842: PUSH
59843: LD_INT 22
59845: PUSH
59846: LD_OWVAR 2
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 21
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PPUSH
59869: CALL_OW 69
59873: ST_TO_ADDR
// if not tmp then
59874: LD_VAR 0 2
59878: NOT
59879: IFFALSE 59883
// exit ;
59881: GO 59970
// un := tmp [ rand ( 1 , tmp ) ] ;
59883: LD_ADDR_VAR 0 1
59887: PUSH
59888: LD_VAR 0 2
59892: PUSH
59893: LD_INT 1
59895: PPUSH
59896: LD_VAR 0 2
59900: PPUSH
59901: CALL_OW 12
59905: ARRAY
59906: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59907: LD_VAR 0 1
59911: PPUSH
59912: LD_INT 0
59914: PPUSH
59915: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59919: LD_VAR 0 1
59923: PPUSH
59924: LD_OWVAR 3
59928: PUSH
59929: LD_VAR 0 1
59933: DIFF
59934: PPUSH
59935: LD_VAR 0 1
59939: PPUSH
59940: CALL_OW 74
59944: PPUSH
59945: CALL_OW 115
// wait ( 0 0$20 ) ;
59949: LD_INT 700
59951: PPUSH
59952: CALL_OW 67
// SetSide ( un , your_side ) ;
59956: LD_VAR 0 1
59960: PPUSH
59961: LD_OWVAR 2
59965: PPUSH
59966: CALL_OW 235
// end ;
59970: PPOPN 2
59972: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59973: LD_EXP 13
59977: IFFALSE 59985
59979: PUSH
59980: LD_EXP 46
59984: AND
59985: IFFALSE 60091
59987: GO 59989
59989: DISABLE
59990: LD_INT 0
59992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59993: LD_ADDR_VAR 0 1
59997: PUSH
59998: LD_INT 22
60000: PUSH
60001: LD_OWVAR 2
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 30
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 30
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PPUSH
60042: CALL_OW 69
60046: ST_TO_ADDR
// if not depot then
60047: LD_VAR 0 1
60051: NOT
60052: IFFALSE 60056
// exit ;
60054: GO 60091
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60056: LD_VAR 0 1
60060: PUSH
60061: LD_INT 1
60063: ARRAY
60064: PPUSH
60065: CALL_OW 250
60069: PPUSH
60070: LD_VAR 0 1
60074: PUSH
60075: LD_INT 1
60077: ARRAY
60078: PPUSH
60079: CALL_OW 251
60083: PPUSH
60084: LD_INT 70
60086: PPUSH
60087: CALL_OW 495
// end ;
60091: PPOPN 1
60093: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60094: LD_EXP 13
60098: IFFALSE 60106
60100: PUSH
60101: LD_EXP 47
60105: AND
60106: IFFALSE 60317
60108: GO 60110
60110: DISABLE
60111: LD_INT 0
60113: PPUSH
60114: PPUSH
60115: PPUSH
60116: PPUSH
60117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60118: LD_ADDR_VAR 0 5
60122: PUSH
60123: LD_INT 22
60125: PUSH
60126: LD_OWVAR 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 21
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PPUSH
60149: CALL_OW 69
60153: ST_TO_ADDR
// if not tmp then
60154: LD_VAR 0 5
60158: NOT
60159: IFFALSE 60163
// exit ;
60161: GO 60317
// for i in tmp do
60163: LD_ADDR_VAR 0 1
60167: PUSH
60168: LD_VAR 0 5
60172: PUSH
60173: FOR_IN
60174: IFFALSE 60315
// begin d := rand ( 0 , 5 ) ;
60176: LD_ADDR_VAR 0 4
60180: PUSH
60181: LD_INT 0
60183: PPUSH
60184: LD_INT 5
60186: PPUSH
60187: CALL_OW 12
60191: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60192: LD_ADDR_VAR 0 2
60196: PUSH
60197: LD_VAR 0 1
60201: PPUSH
60202: CALL_OW 250
60206: PPUSH
60207: LD_VAR 0 4
60211: PPUSH
60212: LD_INT 3
60214: PPUSH
60215: LD_INT 12
60217: PPUSH
60218: CALL_OW 12
60222: PPUSH
60223: CALL_OW 272
60227: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60228: LD_ADDR_VAR 0 3
60232: PUSH
60233: LD_VAR 0 1
60237: PPUSH
60238: CALL_OW 251
60242: PPUSH
60243: LD_VAR 0 4
60247: PPUSH
60248: LD_INT 3
60250: PPUSH
60251: LD_INT 12
60253: PPUSH
60254: CALL_OW 12
60258: PPUSH
60259: CALL_OW 273
60263: ST_TO_ADDR
// if ValidHex ( x , y ) then
60264: LD_VAR 0 2
60268: PPUSH
60269: LD_VAR 0 3
60273: PPUSH
60274: CALL_OW 488
60278: IFFALSE 60313
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_VAR 0 2
60289: PPUSH
60290: LD_VAR 0 3
60294: PPUSH
60295: LD_INT 3
60297: PPUSH
60298: LD_INT 6
60300: PPUSH
60301: CALL_OW 12
60305: PPUSH
60306: LD_INT 1
60308: PPUSH
60309: CALL_OW 483
// end ;
60313: GO 60173
60315: POP
60316: POP
// end ;
60317: PPOPN 5
60319: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60320: LD_EXP 13
60324: IFFALSE 60332
60326: PUSH
60327: LD_EXP 48
60331: AND
60332: IFFALSE 60426
60334: GO 60336
60336: DISABLE
60337: LD_INT 0
60339: PPUSH
60340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60341: LD_ADDR_VAR 0 2
60345: PUSH
60346: LD_INT 22
60348: PUSH
60349: LD_OWVAR 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 32
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 21
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: PPUSH
60383: CALL_OW 69
60387: ST_TO_ADDR
// if not tmp then
60388: LD_VAR 0 2
60392: NOT
60393: IFFALSE 60397
// exit ;
60395: GO 60426
// for i in tmp do
60397: LD_ADDR_VAR 0 1
60401: PUSH
60402: LD_VAR 0 2
60406: PUSH
60407: FOR_IN
60408: IFFALSE 60424
// SetFuel ( i , 0 ) ;
60410: LD_VAR 0 1
60414: PPUSH
60415: LD_INT 0
60417: PPUSH
60418: CALL_OW 240
60422: GO 60407
60424: POP
60425: POP
// end ;
60426: PPOPN 2
60428: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60429: LD_EXP 13
60433: IFFALSE 60441
60435: PUSH
60436: LD_EXP 49
60440: AND
60441: IFFALSE 60507
60443: GO 60445
60445: DISABLE
60446: LD_INT 0
60448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60449: LD_ADDR_VAR 0 1
60453: PUSH
60454: LD_INT 22
60456: PUSH
60457: LD_OWVAR 2
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 30
60468: PUSH
60469: LD_INT 29
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PPUSH
60480: CALL_OW 69
60484: ST_TO_ADDR
// if not tmp then
60485: LD_VAR 0 1
60489: NOT
60490: IFFALSE 60494
// exit ;
60492: GO 60507
// DestroyUnit ( tmp [ 1 ] ) ;
60494: LD_VAR 0 1
60498: PUSH
60499: LD_INT 1
60501: ARRAY
60502: PPUSH
60503: CALL_OW 65
// end ;
60507: PPOPN 1
60509: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60510: LD_EXP 13
60514: IFFALSE 60522
60516: PUSH
60517: LD_EXP 51
60521: AND
60522: IFFALSE 60651
60524: GO 60526
60526: DISABLE
60527: LD_INT 0
60529: PPUSH
// begin uc_side := 0 ;
60530: LD_ADDR_OWVAR 20
60534: PUSH
60535: LD_INT 0
60537: ST_TO_ADDR
// uc_nation := nation_arabian ;
60538: LD_ADDR_OWVAR 21
60542: PUSH
60543: LD_INT 2
60545: ST_TO_ADDR
// hc_gallery :=  ;
60546: LD_ADDR_OWVAR 33
60550: PUSH
60551: LD_STRING 
60553: ST_TO_ADDR
// hc_name :=  ;
60554: LD_ADDR_OWVAR 26
60558: PUSH
60559: LD_STRING 
60561: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60562: LD_INT 1
60564: PPUSH
60565: LD_INT 11
60567: PPUSH
60568: LD_INT 10
60570: PPUSH
60571: CALL_OW 380
// un := CreateHuman ;
60575: LD_ADDR_VAR 0 1
60579: PUSH
60580: CALL_OW 44
60584: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60585: LD_VAR 0 1
60589: PPUSH
60590: LD_INT 1
60592: PPUSH
60593: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60597: LD_INT 35
60599: PPUSH
60600: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60604: LD_VAR 0 1
60608: PPUSH
60609: LD_INT 22
60611: PUSH
60612: LD_OWVAR 2
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PPUSH
60621: CALL_OW 69
60625: PPUSH
60626: LD_VAR 0 1
60630: PPUSH
60631: CALL_OW 74
60635: PPUSH
60636: CALL_OW 115
// until IsDead ( un ) ;
60640: LD_VAR 0 1
60644: PPUSH
60645: CALL_OW 301
60649: IFFALSE 60597
// end ;
60651: PPOPN 1
60653: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60654: LD_EXP 13
60658: IFFALSE 60666
60660: PUSH
60661: LD_EXP 53
60665: AND
60666: IFFALSE 60678
60668: GO 60670
60670: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60671: LD_STRING earthquake(getX(game), 0, 32)
60673: PPUSH
60674: CALL_OW 559
60678: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60679: LD_EXP 13
60683: IFFALSE 60691
60685: PUSH
60686: LD_EXP 54
60690: AND
60691: IFFALSE 60782
60693: GO 60695
60695: DISABLE
60696: LD_INT 0
60698: PPUSH
// begin enable ;
60699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60700: LD_ADDR_VAR 0 1
60704: PUSH
60705: LD_INT 22
60707: PUSH
60708: LD_OWVAR 2
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 21
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 33
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: PPUSH
60742: CALL_OW 69
60746: ST_TO_ADDR
// if not tmp then
60747: LD_VAR 0 1
60751: NOT
60752: IFFALSE 60756
// exit ;
60754: GO 60782
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60756: LD_VAR 0 1
60760: PUSH
60761: LD_INT 1
60763: PPUSH
60764: LD_VAR 0 1
60768: PPUSH
60769: CALL_OW 12
60773: ARRAY
60774: PPUSH
60775: LD_INT 1
60777: PPUSH
60778: CALL_OW 234
// end ;
60782: PPOPN 1
60784: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60785: LD_EXP 13
60789: IFFALSE 60797
60791: PUSH
60792: LD_EXP 55
60796: AND
60797: IFFALSE 60938
60799: GO 60801
60801: DISABLE
60802: LD_INT 0
60804: PPUSH
60805: PPUSH
60806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60807: LD_ADDR_VAR 0 3
60811: PUSH
60812: LD_INT 22
60814: PUSH
60815: LD_OWVAR 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 25
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PPUSH
60838: CALL_OW 69
60842: ST_TO_ADDR
// if not tmp then
60843: LD_VAR 0 3
60847: NOT
60848: IFFALSE 60852
// exit ;
60850: GO 60938
// un := tmp [ rand ( 1 , tmp ) ] ;
60852: LD_ADDR_VAR 0 2
60856: PUSH
60857: LD_VAR 0 3
60861: PUSH
60862: LD_INT 1
60864: PPUSH
60865: LD_VAR 0 3
60869: PPUSH
60870: CALL_OW 12
60874: ARRAY
60875: ST_TO_ADDR
// if Crawls ( un ) then
60876: LD_VAR 0 2
60880: PPUSH
60881: CALL_OW 318
60885: IFFALSE 60896
// ComWalk ( un ) ;
60887: LD_VAR 0 2
60891: PPUSH
60892: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60896: LD_VAR 0 2
60900: PPUSH
60901: LD_INT 9
60903: PPUSH
60904: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60908: LD_INT 28
60910: PPUSH
60911: LD_OWVAR 2
60915: PPUSH
60916: LD_INT 2
60918: PPUSH
60919: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60923: LD_INT 29
60925: PPUSH
60926: LD_OWVAR 2
60930: PPUSH
60931: LD_INT 2
60933: PPUSH
60934: CALL_OW 322
// end ;
60938: PPOPN 3
60940: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60941: LD_EXP 13
60945: IFFALSE 60953
60947: PUSH
60948: LD_EXP 56
60952: AND
60953: IFFALSE 61064
60955: GO 60957
60957: DISABLE
60958: LD_INT 0
60960: PPUSH
60961: PPUSH
60962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60963: LD_ADDR_VAR 0 3
60967: PUSH
60968: LD_INT 22
60970: PUSH
60971: LD_OWVAR 2
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 25
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PPUSH
60994: CALL_OW 69
60998: ST_TO_ADDR
// if not tmp then
60999: LD_VAR 0 3
61003: NOT
61004: IFFALSE 61008
// exit ;
61006: GO 61064
// un := tmp [ rand ( 1 , tmp ) ] ;
61008: LD_ADDR_VAR 0 2
61012: PUSH
61013: LD_VAR 0 3
61017: PUSH
61018: LD_INT 1
61020: PPUSH
61021: LD_VAR 0 3
61025: PPUSH
61026: CALL_OW 12
61030: ARRAY
61031: ST_TO_ADDR
// if Crawls ( un ) then
61032: LD_VAR 0 2
61036: PPUSH
61037: CALL_OW 318
61041: IFFALSE 61052
// ComWalk ( un ) ;
61043: LD_VAR 0 2
61047: PPUSH
61048: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61052: LD_VAR 0 2
61056: PPUSH
61057: LD_INT 8
61059: PPUSH
61060: CALL_OW 336
// end ;
61064: PPOPN 3
61066: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61067: LD_EXP 13
61071: IFFALSE 61079
61073: PUSH
61074: LD_EXP 57
61078: AND
61079: IFFALSE 61223
61081: GO 61083
61083: DISABLE
61084: LD_INT 0
61086: PPUSH
61087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61088: LD_ADDR_VAR 0 2
61092: PUSH
61093: LD_INT 22
61095: PUSH
61096: LD_OWVAR 2
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 21
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 34
61120: PUSH
61121: LD_INT 12
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 34
61130: PUSH
61131: LD_INT 51
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 34
61140: PUSH
61141: LD_INT 32
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: PPUSH
61159: CALL_OW 69
61163: ST_TO_ADDR
// if not tmp then
61164: LD_VAR 0 2
61168: NOT
61169: IFFALSE 61173
// exit ;
61171: GO 61223
// for i in tmp do
61173: LD_ADDR_VAR 0 1
61177: PUSH
61178: LD_VAR 0 2
61182: PUSH
61183: FOR_IN
61184: IFFALSE 61221
// if GetCargo ( i , mat_artifact ) = 0 then
61186: LD_VAR 0 1
61190: PPUSH
61191: LD_INT 4
61193: PPUSH
61194: CALL_OW 289
61198: PUSH
61199: LD_INT 0
61201: EQUAL
61202: IFFALSE 61219
// SetCargo ( i , mat_siberit , 100 ) ;
61204: LD_VAR 0 1
61208: PPUSH
61209: LD_INT 3
61211: PPUSH
61212: LD_INT 100
61214: PPUSH
61215: CALL_OW 290
61219: GO 61183
61221: POP
61222: POP
// end ;
61223: PPOPN 2
61225: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61226: LD_EXP 13
61230: IFFALSE 61238
61232: PUSH
61233: LD_EXP 58
61237: AND
61238: IFFALSE 61421
61240: GO 61242
61242: DISABLE
61243: LD_INT 0
61245: PPUSH
61246: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61247: LD_ADDR_VAR 0 2
61251: PUSH
61252: LD_INT 22
61254: PUSH
61255: LD_OWVAR 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PPUSH
61264: CALL_OW 69
61268: ST_TO_ADDR
// if not tmp then
61269: LD_VAR 0 2
61273: NOT
61274: IFFALSE 61278
// exit ;
61276: GO 61421
// for i := 1 to 2 do
61278: LD_ADDR_VAR 0 1
61282: PUSH
61283: DOUBLE
61284: LD_INT 1
61286: DEC
61287: ST_TO_ADDR
61288: LD_INT 2
61290: PUSH
61291: FOR_TO
61292: IFFALSE 61419
// begin uc_side := your_side ;
61294: LD_ADDR_OWVAR 20
61298: PUSH
61299: LD_OWVAR 2
61303: ST_TO_ADDR
// uc_nation := nation_american ;
61304: LD_ADDR_OWVAR 21
61308: PUSH
61309: LD_INT 1
61311: ST_TO_ADDR
// vc_chassis := us_morphling ;
61312: LD_ADDR_OWVAR 37
61316: PUSH
61317: LD_INT 5
61319: ST_TO_ADDR
// vc_engine := engine_siberite ;
61320: LD_ADDR_OWVAR 39
61324: PUSH
61325: LD_INT 3
61327: ST_TO_ADDR
// vc_control := control_computer ;
61328: LD_ADDR_OWVAR 38
61332: PUSH
61333: LD_INT 3
61335: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61336: LD_ADDR_OWVAR 40
61340: PUSH
61341: LD_INT 10
61343: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61344: LD_VAR 0 2
61348: PUSH
61349: LD_INT 1
61351: ARRAY
61352: PPUSH
61353: CALL_OW 310
61357: NOT
61358: IFFALSE 61405
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61360: CALL_OW 45
61364: PPUSH
61365: LD_VAR 0 2
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PPUSH
61374: CALL_OW 250
61378: PPUSH
61379: LD_VAR 0 2
61383: PUSH
61384: LD_INT 1
61386: ARRAY
61387: PPUSH
61388: CALL_OW 251
61392: PPUSH
61393: LD_INT 12
61395: PPUSH
61396: LD_INT 1
61398: PPUSH
61399: CALL_OW 50
61403: GO 61417
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61405: CALL_OW 45
61409: PPUSH
61410: LD_INT 1
61412: PPUSH
61413: CALL_OW 51
// end ;
61417: GO 61291
61419: POP
61420: POP
// end ;
61421: PPOPN 2
61423: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61424: LD_EXP 13
61428: IFFALSE 61436
61430: PUSH
61431: LD_EXP 59
61435: AND
61436: IFFALSE 61658
61438: GO 61440
61440: DISABLE
61441: LD_INT 0
61443: PPUSH
61444: PPUSH
61445: PPUSH
61446: PPUSH
61447: PPUSH
61448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61449: LD_ADDR_VAR 0 6
61453: PUSH
61454: LD_INT 22
61456: PUSH
61457: LD_OWVAR 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 21
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: LD_INT 23
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: LIST
61497: PPUSH
61498: CALL_OW 69
61502: ST_TO_ADDR
// if not tmp then
61503: LD_VAR 0 6
61507: NOT
61508: IFFALSE 61512
// exit ;
61510: GO 61658
// s1 := rand ( 1 , 4 ) ;
61512: LD_ADDR_VAR 0 2
61516: PUSH
61517: LD_INT 1
61519: PPUSH
61520: LD_INT 4
61522: PPUSH
61523: CALL_OW 12
61527: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61528: LD_ADDR_VAR 0 4
61532: PUSH
61533: LD_VAR 0 6
61537: PUSH
61538: LD_INT 1
61540: ARRAY
61541: PPUSH
61542: LD_VAR 0 2
61546: PPUSH
61547: CALL_OW 259
61551: ST_TO_ADDR
// if s1 = 1 then
61552: LD_VAR 0 2
61556: PUSH
61557: LD_INT 1
61559: EQUAL
61560: IFFALSE 61580
// s2 := rand ( 2 , 4 ) else
61562: LD_ADDR_VAR 0 3
61566: PUSH
61567: LD_INT 2
61569: PPUSH
61570: LD_INT 4
61572: PPUSH
61573: CALL_OW 12
61577: ST_TO_ADDR
61578: GO 61588
// s2 := 1 ;
61580: LD_ADDR_VAR 0 3
61584: PUSH
61585: LD_INT 1
61587: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61588: LD_ADDR_VAR 0 5
61592: PUSH
61593: LD_VAR 0 6
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: PPUSH
61602: LD_VAR 0 3
61606: PPUSH
61607: CALL_OW 259
61611: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61612: LD_VAR 0 6
61616: PUSH
61617: LD_INT 1
61619: ARRAY
61620: PPUSH
61621: LD_VAR 0 2
61625: PPUSH
61626: LD_VAR 0 5
61630: PPUSH
61631: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61635: LD_VAR 0 6
61639: PUSH
61640: LD_INT 1
61642: ARRAY
61643: PPUSH
61644: LD_VAR 0 3
61648: PPUSH
61649: LD_VAR 0 4
61653: PPUSH
61654: CALL_OW 237
// end ;
61658: PPOPN 6
61660: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61661: LD_EXP 13
61665: IFFALSE 61673
61667: PUSH
61668: LD_EXP 60
61672: AND
61673: IFFALSE 61752
61675: GO 61677
61677: DISABLE
61678: LD_INT 0
61680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61681: LD_ADDR_VAR 0 1
61685: PUSH
61686: LD_INT 22
61688: PUSH
61689: LD_OWVAR 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 30
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PPUSH
61712: CALL_OW 69
61716: ST_TO_ADDR
// if not tmp then
61717: LD_VAR 0 1
61721: NOT
61722: IFFALSE 61726
// exit ;
61724: GO 61752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61726: LD_VAR 0 1
61730: PUSH
61731: LD_INT 1
61733: PPUSH
61734: LD_VAR 0 1
61738: PPUSH
61739: CALL_OW 12
61743: ARRAY
61744: PPUSH
61745: LD_INT 1
61747: PPUSH
61748: CALL_OW 234
// end ;
61752: PPOPN 1
61754: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61755: LD_EXP 13
61759: IFFALSE 61767
61761: PUSH
61762: LD_EXP 61
61766: AND
61767: IFFALSE 61879
61769: GO 61771
61771: DISABLE
61772: LD_INT 0
61774: PPUSH
61775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61776: LD_ADDR_VAR 0 2
61780: PUSH
61781: LD_INT 22
61783: PUSH
61784: LD_OWVAR 2
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 30
61798: PUSH
61799: LD_INT 27
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 30
61808: PUSH
61809: LD_INT 26
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 30
61818: PUSH
61819: LD_INT 28
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PPUSH
61836: CALL_OW 69
61840: ST_TO_ADDR
// if not tmp then
61841: LD_VAR 0 2
61845: NOT
61846: IFFALSE 61850
// exit ;
61848: GO 61879
// for i in tmp do
61850: LD_ADDR_VAR 0 1
61854: PUSH
61855: LD_VAR 0 2
61859: PUSH
61860: FOR_IN
61861: IFFALSE 61877
// SetLives ( i , 1 ) ;
61863: LD_VAR 0 1
61867: PPUSH
61868: LD_INT 1
61870: PPUSH
61871: CALL_OW 234
61875: GO 61860
61877: POP
61878: POP
// end ;
61879: PPOPN 2
61881: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61882: LD_EXP 13
61886: IFFALSE 61894
61888: PUSH
61889: LD_EXP 62
61893: AND
61894: IFFALSE 62181
61896: GO 61898
61898: DISABLE
61899: LD_INT 0
61901: PPUSH
61902: PPUSH
61903: PPUSH
// begin i := rand ( 1 , 7 ) ;
61904: LD_ADDR_VAR 0 1
61908: PUSH
61909: LD_INT 1
61911: PPUSH
61912: LD_INT 7
61914: PPUSH
61915: CALL_OW 12
61919: ST_TO_ADDR
// case i of 1 :
61920: LD_VAR 0 1
61924: PUSH
61925: LD_INT 1
61927: DOUBLE
61928: EQUAL
61929: IFTRUE 61933
61931: GO 61943
61933: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61934: LD_STRING earthquake(getX(game), 0, 32)
61936: PPUSH
61937: CALL_OW 559
61941: GO 62181
61943: LD_INT 2
61945: DOUBLE
61946: EQUAL
61947: IFTRUE 61951
61949: GO 61965
61951: POP
// begin ToLua ( displayStucuk(); ) ;
61952: LD_STRING displayStucuk();
61954: PPUSH
61955: CALL_OW 559
// ResetFog ;
61959: CALL_OW 335
// end ; 3 :
61963: GO 62181
61965: LD_INT 3
61967: DOUBLE
61968: EQUAL
61969: IFTRUE 61973
61971: GO 62077
61973: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61974: LD_ADDR_VAR 0 2
61978: PUSH
61979: LD_INT 22
61981: PUSH
61982: LD_OWVAR 2
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 25
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PPUSH
62005: CALL_OW 69
62009: ST_TO_ADDR
// if not tmp then
62010: LD_VAR 0 2
62014: NOT
62015: IFFALSE 62019
// exit ;
62017: GO 62181
// un := tmp [ rand ( 1 , tmp ) ] ;
62019: LD_ADDR_VAR 0 3
62023: PUSH
62024: LD_VAR 0 2
62028: PUSH
62029: LD_INT 1
62031: PPUSH
62032: LD_VAR 0 2
62036: PPUSH
62037: CALL_OW 12
62041: ARRAY
62042: ST_TO_ADDR
// if Crawls ( un ) then
62043: LD_VAR 0 3
62047: PPUSH
62048: CALL_OW 318
62052: IFFALSE 62063
// ComWalk ( un ) ;
62054: LD_VAR 0 3
62058: PPUSH
62059: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62063: LD_VAR 0 3
62067: PPUSH
62068: LD_INT 8
62070: PPUSH
62071: CALL_OW 336
// end ; 4 :
62075: GO 62181
62077: LD_INT 4
62079: DOUBLE
62080: EQUAL
62081: IFTRUE 62085
62083: GO 62159
62085: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62086: LD_ADDR_VAR 0 2
62090: PUSH
62091: LD_INT 22
62093: PUSH
62094: LD_OWVAR 2
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 30
62105: PUSH
62106: LD_INT 29
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PPUSH
62117: CALL_OW 69
62121: ST_TO_ADDR
// if not tmp then
62122: LD_VAR 0 2
62126: NOT
62127: IFFALSE 62131
// exit ;
62129: GO 62181
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62131: LD_VAR 0 2
62135: PUSH
62136: LD_INT 1
62138: ARRAY
62139: PPUSH
62140: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62144: LD_VAR 0 2
62148: PUSH
62149: LD_INT 1
62151: ARRAY
62152: PPUSH
62153: CALL_OW 65
// end ; 5 .. 7 :
62157: GO 62181
62159: LD_INT 5
62161: DOUBLE
62162: GREATEREQUAL
62163: IFFALSE 62171
62165: LD_INT 7
62167: DOUBLE
62168: LESSEQUAL
62169: IFTRUE 62173
62171: GO 62180
62173: POP
// StreamSibBomb ; end ;
62174: CALL 58362 0 0
62178: GO 62181
62180: POP
// end ;
62181: PPOPN 3
62183: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62184: LD_EXP 13
62188: IFFALSE 62196
62190: PUSH
62191: LD_EXP 63
62195: AND
62196: IFFALSE 62352
62198: GO 62200
62200: DISABLE
62201: LD_INT 0
62203: PPUSH
62204: PPUSH
62205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62206: LD_ADDR_VAR 0 2
62210: PUSH
62211: LD_INT 81
62213: PUSH
62214: LD_OWVAR 2
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: LD_INT 21
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 21
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PPUSH
62255: CALL_OW 69
62259: ST_TO_ADDR
// if not tmp then
62260: LD_VAR 0 2
62264: NOT
62265: IFFALSE 62269
// exit ;
62267: GO 62352
// p := 0 ;
62269: LD_ADDR_VAR 0 3
62273: PUSH
62274: LD_INT 0
62276: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62277: LD_INT 35
62279: PPUSH
62280: CALL_OW 67
// p := p + 1 ;
62284: LD_ADDR_VAR 0 3
62288: PUSH
62289: LD_VAR 0 3
62293: PUSH
62294: LD_INT 1
62296: PLUS
62297: ST_TO_ADDR
// for i in tmp do
62298: LD_ADDR_VAR 0 1
62302: PUSH
62303: LD_VAR 0 2
62307: PUSH
62308: FOR_IN
62309: IFFALSE 62340
// if GetLives ( i ) < 1000 then
62311: LD_VAR 0 1
62315: PPUSH
62316: CALL_OW 256
62320: PUSH
62321: LD_INT 1000
62323: LESS
62324: IFFALSE 62338
// SetLives ( i , 1000 ) ;
62326: LD_VAR 0 1
62330: PPUSH
62331: LD_INT 1000
62333: PPUSH
62334: CALL_OW 234
62338: GO 62308
62340: POP
62341: POP
// until p > 20 ;
62342: LD_VAR 0 3
62346: PUSH
62347: LD_INT 20
62349: GREATER
62350: IFFALSE 62277
// end ;
62352: PPOPN 3
62354: END
// every 0 0$1 trigger StreamModeActive and sTime do
62355: LD_EXP 13
62359: IFFALSE 62367
62361: PUSH
62362: LD_EXP 64
62366: AND
62367: IFFALSE 62402
62369: GO 62371
62371: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62372: LD_INT 28
62374: PPUSH
62375: LD_OWVAR 2
62379: PPUSH
62380: LD_INT 2
62382: PPUSH
62383: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62387: LD_INT 30
62389: PPUSH
62390: LD_OWVAR 2
62394: PPUSH
62395: LD_INT 2
62397: PPUSH
62398: CALL_OW 322
// end ;
62402: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62403: LD_EXP 13
62407: IFFALSE 62415
62409: PUSH
62410: LD_EXP 65
62414: AND
62415: IFFALSE 62536
62417: GO 62419
62419: DISABLE
62420: LD_INT 0
62422: PPUSH
62423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62424: LD_ADDR_VAR 0 2
62428: PUSH
62429: LD_INT 22
62431: PUSH
62432: LD_OWVAR 2
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 21
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: LD_INT 23
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: PPUSH
62473: CALL_OW 69
62477: ST_TO_ADDR
// if not tmp then
62478: LD_VAR 0 2
62482: NOT
62483: IFFALSE 62487
// exit ;
62485: GO 62536
// for i in tmp do
62487: LD_ADDR_VAR 0 1
62491: PUSH
62492: LD_VAR 0 2
62496: PUSH
62497: FOR_IN
62498: IFFALSE 62534
// begin if Crawls ( i ) then
62500: LD_VAR 0 1
62504: PPUSH
62505: CALL_OW 318
62509: IFFALSE 62520
// ComWalk ( i ) ;
62511: LD_VAR 0 1
62515: PPUSH
62516: CALL_OW 138
// SetClass ( i , 2 ) ;
62520: LD_VAR 0 1
62524: PPUSH
62525: LD_INT 2
62527: PPUSH
62528: CALL_OW 336
// end ;
62532: GO 62497
62534: POP
62535: POP
// end ;
62536: PPOPN 2
62538: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62539: LD_EXP 13
62543: IFFALSE 62551
62545: PUSH
62546: LD_EXP 66
62550: AND
62551: IFFALSE 62841
62553: GO 62555
62555: DISABLE
62556: LD_INT 0
62558: PPUSH
62559: PPUSH
62560: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62561: LD_OWVAR 2
62565: PPUSH
62566: LD_INT 9
62568: PPUSH
62569: LD_INT 1
62571: PPUSH
62572: LD_INT 1
62574: PPUSH
62575: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62579: LD_INT 9
62581: PPUSH
62582: LD_OWVAR 2
62586: PPUSH
62587: CALL_OW 343
// uc_side := 9 ;
62591: LD_ADDR_OWVAR 20
62595: PUSH
62596: LD_INT 9
62598: ST_TO_ADDR
// uc_nation := 2 ;
62599: LD_ADDR_OWVAR 21
62603: PUSH
62604: LD_INT 2
62606: ST_TO_ADDR
// hc_name := Dark Warrior ;
62607: LD_ADDR_OWVAR 26
62611: PUSH
62612: LD_STRING Dark Warrior
62614: ST_TO_ADDR
// hc_gallery :=  ;
62615: LD_ADDR_OWVAR 33
62619: PUSH
62620: LD_STRING 
62622: ST_TO_ADDR
// hc_noskilllimit := true ;
62623: LD_ADDR_OWVAR 76
62627: PUSH
62628: LD_INT 1
62630: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62631: LD_ADDR_OWVAR 31
62635: PUSH
62636: LD_INT 30
62638: PUSH
62639: LD_INT 30
62641: PUSH
62642: LD_INT 30
62644: PUSH
62645: LD_INT 30
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: ST_TO_ADDR
// un := CreateHuman ;
62654: LD_ADDR_VAR 0 3
62658: PUSH
62659: CALL_OW 44
62663: ST_TO_ADDR
// hc_noskilllimit := false ;
62664: LD_ADDR_OWVAR 76
62668: PUSH
62669: LD_INT 0
62671: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62672: LD_VAR 0 3
62676: PPUSH
62677: LD_INT 1
62679: PPUSH
62680: CALL_OW 51
// ToLua ( playRanger() ) ;
62684: LD_STRING playRanger()
62686: PPUSH
62687: CALL_OW 559
// p := 0 ;
62691: LD_ADDR_VAR 0 2
62695: PUSH
62696: LD_INT 0
62698: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62699: LD_INT 35
62701: PPUSH
62702: CALL_OW 67
// p := p + 1 ;
62706: LD_ADDR_VAR 0 2
62710: PUSH
62711: LD_VAR 0 2
62715: PUSH
62716: LD_INT 1
62718: PLUS
62719: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62720: LD_VAR 0 3
62724: PPUSH
62725: CALL_OW 256
62729: PUSH
62730: LD_INT 1000
62732: LESS
62733: IFFALSE 62747
// SetLives ( un , 1000 ) ;
62735: LD_VAR 0 3
62739: PPUSH
62740: LD_INT 1000
62742: PPUSH
62743: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62747: LD_VAR 0 3
62751: PPUSH
62752: LD_INT 81
62754: PUSH
62755: LD_OWVAR 2
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 91
62766: PUSH
62767: LD_VAR 0 3
62771: PUSH
62772: LD_INT 30
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PPUSH
62784: CALL_OW 69
62788: PPUSH
62789: LD_VAR 0 3
62793: PPUSH
62794: CALL_OW 74
62798: PPUSH
62799: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62803: LD_VAR 0 2
62807: PUSH
62808: LD_INT 80
62810: GREATER
62811: IFTRUE 62824
62813: PUSH
62814: LD_VAR 0 3
62818: PPUSH
62819: CALL_OW 301
62823: OR
62824: IFFALSE 62699
// if un then
62826: LD_VAR 0 3
62830: IFFALSE 62841
// RemoveUnit ( un ) ;
62832: LD_VAR 0 3
62836: PPUSH
62837: CALL_OW 64
// end ;
62841: PPOPN 3
62843: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62844: LD_EXP 67
62848: IFFALSE 62964
62850: GO 62852
62852: DISABLE
62853: LD_INT 0
62855: PPUSH
62856: PPUSH
62857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62858: LD_ADDR_VAR 0 2
62862: PUSH
62863: LD_INT 81
62865: PUSH
62866: LD_OWVAR 2
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 21
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PPUSH
62889: CALL_OW 69
62893: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62894: LD_STRING playComputer()
62896: PPUSH
62897: CALL_OW 559
// if not tmp then
62901: LD_VAR 0 2
62905: NOT
62906: IFFALSE 62910
// exit ;
62908: GO 62964
// for i in tmp do
62910: LD_ADDR_VAR 0 1
62914: PUSH
62915: LD_VAR 0 2
62919: PUSH
62920: FOR_IN
62921: IFFALSE 62962
// for j := 1 to 4 do
62923: LD_ADDR_VAR 0 3
62927: PUSH
62928: DOUBLE
62929: LD_INT 1
62931: DEC
62932: ST_TO_ADDR
62933: LD_INT 4
62935: PUSH
62936: FOR_TO
62937: IFFALSE 62958
// SetSkill ( i , j , 10 ) ;
62939: LD_VAR 0 1
62943: PPUSH
62944: LD_VAR 0 3
62948: PPUSH
62949: LD_INT 10
62951: PPUSH
62952: CALL_OW 237
62956: GO 62936
62958: POP
62959: POP
62960: GO 62920
62962: POP
62963: POP
// end ;
62964: PPOPN 3
62966: END
// every 0 0$1 trigger s30 do var i , tmp ;
62967: LD_EXP 68
62971: IFFALSE 63040
62973: GO 62975
62975: DISABLE
62976: LD_INT 0
62978: PPUSH
62979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62980: LD_ADDR_VAR 0 2
62984: PUSH
62985: LD_INT 22
62987: PUSH
62988: LD_OWVAR 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PPUSH
62997: CALL_OW 69
63001: ST_TO_ADDR
// if not tmp then
63002: LD_VAR 0 2
63006: NOT
63007: IFFALSE 63011
// exit ;
63009: GO 63040
// for i in tmp do
63011: LD_ADDR_VAR 0 1
63015: PUSH
63016: LD_VAR 0 2
63020: PUSH
63021: FOR_IN
63022: IFFALSE 63038
// SetLives ( i , 300 ) ;
63024: LD_VAR 0 1
63028: PPUSH
63029: LD_INT 300
63031: PPUSH
63032: CALL_OW 234
63036: GO 63021
63038: POP
63039: POP
// end ;
63040: PPOPN 2
63042: END
// every 0 0$1 trigger s60 do var i , tmp ;
63043: LD_EXP 69
63047: IFFALSE 63116
63049: GO 63051
63051: DISABLE
63052: LD_INT 0
63054: PPUSH
63055: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63056: LD_ADDR_VAR 0 2
63060: PUSH
63061: LD_INT 22
63063: PUSH
63064: LD_OWVAR 2
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PPUSH
63073: CALL_OW 69
63077: ST_TO_ADDR
// if not tmp then
63078: LD_VAR 0 2
63082: NOT
63083: IFFALSE 63087
// exit ;
63085: GO 63116
// for i in tmp do
63087: LD_ADDR_VAR 0 1
63091: PUSH
63092: LD_VAR 0 2
63096: PUSH
63097: FOR_IN
63098: IFFALSE 63114
// SetLives ( i , 600 ) ;
63100: LD_VAR 0 1
63104: PPUSH
63105: LD_INT 600
63107: PPUSH
63108: CALL_OW 234
63112: GO 63097
63114: POP
63115: POP
// end ;
63116: PPOPN 2
63118: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63119: LD_INT 0
63121: PPUSH
// case cmd of 301 :
63122: LD_VAR 0 1
63126: PUSH
63127: LD_INT 301
63129: DOUBLE
63130: EQUAL
63131: IFTRUE 63135
63133: GO 63167
63135: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63136: LD_VAR 0 6
63140: PPUSH
63141: LD_VAR 0 7
63145: PPUSH
63146: LD_VAR 0 8
63150: PPUSH
63151: LD_VAR 0 4
63155: PPUSH
63156: LD_VAR 0 5
63160: PPUSH
63161: CALL 64380 0 5
63165: GO 63288
63167: LD_INT 302
63169: DOUBLE
63170: EQUAL
63171: IFTRUE 63175
63173: GO 63212
63175: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63176: LD_VAR 0 6
63180: PPUSH
63181: LD_VAR 0 7
63185: PPUSH
63186: LD_VAR 0 8
63190: PPUSH
63191: LD_VAR 0 9
63195: PPUSH
63196: LD_VAR 0 4
63200: PPUSH
63201: LD_VAR 0 5
63205: PPUSH
63206: CALL 64471 0 6
63210: GO 63288
63212: LD_INT 303
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63220
63218: GO 63257
63220: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63221: LD_VAR 0 6
63225: PPUSH
63226: LD_VAR 0 7
63230: PPUSH
63231: LD_VAR 0 8
63235: PPUSH
63236: LD_VAR 0 9
63240: PPUSH
63241: LD_VAR 0 4
63245: PPUSH
63246: LD_VAR 0 5
63250: PPUSH
63251: CALL 63293 0 6
63255: GO 63288
63257: LD_INT 304
63259: DOUBLE
63260: EQUAL
63261: IFTRUE 63265
63263: GO 63287
63265: POP
// hHackTeleport ( unit , x , y ) ; end ;
63266: LD_VAR 0 2
63270: PPUSH
63271: LD_VAR 0 4
63275: PPUSH
63276: LD_VAR 0 5
63280: PPUSH
63281: CALL 65064 0 3
63285: GO 63288
63287: POP
// end ;
63288: LD_VAR 0 12
63292: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63293: LD_INT 0
63295: PPUSH
63296: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63297: LD_VAR 0 1
63301: PUSH
63302: LD_INT 1
63304: LESS
63305: IFTRUE 63317
63307: PUSH
63308: LD_VAR 0 1
63312: PUSH
63313: LD_INT 3
63315: GREATER
63316: OR
63317: IFTRUE 63335
63319: PUSH
63320: LD_VAR 0 5
63324: PPUSH
63325: LD_VAR 0 6
63329: PPUSH
63330: CALL_OW 428
63334: OR
63335: IFFALSE 63339
// exit ;
63337: GO 64067
// uc_side := your_side ;
63339: LD_ADDR_OWVAR 20
63343: PUSH
63344: LD_OWVAR 2
63348: ST_TO_ADDR
// uc_nation := nation ;
63349: LD_ADDR_OWVAR 21
63353: PUSH
63354: LD_VAR 0 1
63358: ST_TO_ADDR
// bc_level = 1 ;
63359: LD_ADDR_OWVAR 43
63363: PUSH
63364: LD_INT 1
63366: ST_TO_ADDR
// case btype of 1 :
63367: LD_VAR 0 2
63371: PUSH
63372: LD_INT 1
63374: DOUBLE
63375: EQUAL
63376: IFTRUE 63380
63378: GO 63391
63380: POP
// bc_type := b_depot ; 2 :
63381: LD_ADDR_OWVAR 42
63385: PUSH
63386: LD_INT 0
63388: ST_TO_ADDR
63389: GO 64011
63391: LD_INT 2
63393: DOUBLE
63394: EQUAL
63395: IFTRUE 63399
63397: GO 63410
63399: POP
// bc_type := b_warehouse ; 3 :
63400: LD_ADDR_OWVAR 42
63404: PUSH
63405: LD_INT 1
63407: ST_TO_ADDR
63408: GO 64011
63410: LD_INT 3
63412: DOUBLE
63413: EQUAL
63414: IFTRUE 63418
63416: GO 63429
63418: POP
// bc_type := b_lab ; 4 .. 9 :
63419: LD_ADDR_OWVAR 42
63423: PUSH
63424: LD_INT 6
63426: ST_TO_ADDR
63427: GO 64011
63429: LD_INT 4
63431: DOUBLE
63432: GREATEREQUAL
63433: IFFALSE 63441
63435: LD_INT 9
63437: DOUBLE
63438: LESSEQUAL
63439: IFTRUE 63443
63441: GO 63503
63443: POP
// begin bc_type := b_lab_half ;
63444: LD_ADDR_OWVAR 42
63448: PUSH
63449: LD_INT 7
63451: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63452: LD_ADDR_OWVAR 44
63456: PUSH
63457: LD_INT 10
63459: PUSH
63460: LD_INT 11
63462: PUSH
63463: LD_INT 12
63465: PUSH
63466: LD_INT 15
63468: PUSH
63469: LD_INT 14
63471: PUSH
63472: LD_INT 13
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: PUSH
63483: LD_VAR 0 2
63487: PUSH
63488: LD_INT 3
63490: MINUS
63491: ARRAY
63492: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63493: LD_ADDR_OWVAR 45
63497: PUSH
63498: LD_INT 9
63500: ST_TO_ADDR
// end ; 10 .. 13 :
63501: GO 64011
63503: LD_INT 10
63505: DOUBLE
63506: GREATEREQUAL
63507: IFFALSE 63515
63509: LD_INT 13
63511: DOUBLE
63512: LESSEQUAL
63513: IFTRUE 63517
63515: GO 63594
63517: POP
// begin bc_type := b_lab_full ;
63518: LD_ADDR_OWVAR 42
63522: PUSH
63523: LD_INT 8
63525: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63526: LD_ADDR_OWVAR 44
63530: PUSH
63531: LD_INT 10
63533: PUSH
63534: LD_INT 12
63536: PUSH
63537: LD_INT 14
63539: PUSH
63540: LD_INT 13
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: PUSH
63549: LD_VAR 0 2
63553: PUSH
63554: LD_INT 9
63556: MINUS
63557: ARRAY
63558: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63559: LD_ADDR_OWVAR 45
63563: PUSH
63564: LD_INT 11
63566: PUSH
63567: LD_INT 15
63569: PUSH
63570: LD_INT 12
63572: PUSH
63573: LD_INT 15
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: PUSH
63582: LD_VAR 0 2
63586: PUSH
63587: LD_INT 9
63589: MINUS
63590: ARRAY
63591: ST_TO_ADDR
// end ; 14 :
63592: GO 64011
63594: LD_INT 14
63596: DOUBLE
63597: EQUAL
63598: IFTRUE 63602
63600: GO 63613
63602: POP
// bc_type := b_workshop ; 15 :
63603: LD_ADDR_OWVAR 42
63607: PUSH
63608: LD_INT 2
63610: ST_TO_ADDR
63611: GO 64011
63613: LD_INT 15
63615: DOUBLE
63616: EQUAL
63617: IFTRUE 63621
63619: GO 63632
63621: POP
// bc_type := b_factory ; 16 :
63622: LD_ADDR_OWVAR 42
63626: PUSH
63627: LD_INT 3
63629: ST_TO_ADDR
63630: GO 64011
63632: LD_INT 16
63634: DOUBLE
63635: EQUAL
63636: IFTRUE 63640
63638: GO 63651
63640: POP
// bc_type := b_ext_gun ; 17 :
63641: LD_ADDR_OWVAR 42
63645: PUSH
63646: LD_INT 17
63648: ST_TO_ADDR
63649: GO 64011
63651: LD_INT 17
63653: DOUBLE
63654: EQUAL
63655: IFTRUE 63659
63657: GO 63687
63659: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63660: LD_ADDR_OWVAR 42
63664: PUSH
63665: LD_INT 19
63667: PUSH
63668: LD_INT 23
63670: PUSH
63671: LD_INT 19
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 1
63683: ARRAY
63684: ST_TO_ADDR
63685: GO 64011
63687: LD_INT 18
63689: DOUBLE
63690: EQUAL
63691: IFTRUE 63695
63693: GO 63706
63695: POP
// bc_type := b_ext_radar ; 19 :
63696: LD_ADDR_OWVAR 42
63700: PUSH
63701: LD_INT 20
63703: ST_TO_ADDR
63704: GO 64011
63706: LD_INT 19
63708: DOUBLE
63709: EQUAL
63710: IFTRUE 63714
63712: GO 63725
63714: POP
// bc_type := b_ext_radio ; 20 :
63715: LD_ADDR_OWVAR 42
63719: PUSH
63720: LD_INT 22
63722: ST_TO_ADDR
63723: GO 64011
63725: LD_INT 20
63727: DOUBLE
63728: EQUAL
63729: IFTRUE 63733
63731: GO 63744
63733: POP
// bc_type := b_ext_siberium ; 21 :
63734: LD_ADDR_OWVAR 42
63738: PUSH
63739: LD_INT 21
63741: ST_TO_ADDR
63742: GO 64011
63744: LD_INT 21
63746: DOUBLE
63747: EQUAL
63748: IFTRUE 63752
63750: GO 63763
63752: POP
// bc_type := b_ext_computer ; 22 :
63753: LD_ADDR_OWVAR 42
63757: PUSH
63758: LD_INT 24
63760: ST_TO_ADDR
63761: GO 64011
63763: LD_INT 22
63765: DOUBLE
63766: EQUAL
63767: IFTRUE 63771
63769: GO 63782
63771: POP
// bc_type := b_ext_track ; 23 :
63772: LD_ADDR_OWVAR 42
63776: PUSH
63777: LD_INT 16
63779: ST_TO_ADDR
63780: GO 64011
63782: LD_INT 23
63784: DOUBLE
63785: EQUAL
63786: IFTRUE 63790
63788: GO 63801
63790: POP
// bc_type := b_ext_laser ; 24 :
63791: LD_ADDR_OWVAR 42
63795: PUSH
63796: LD_INT 25
63798: ST_TO_ADDR
63799: GO 64011
63801: LD_INT 24
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63809
63807: GO 63820
63809: POP
// bc_type := b_control_tower ; 25 :
63810: LD_ADDR_OWVAR 42
63814: PUSH
63815: LD_INT 36
63817: ST_TO_ADDR
63818: GO 64011
63820: LD_INT 25
63822: DOUBLE
63823: EQUAL
63824: IFTRUE 63828
63826: GO 63839
63828: POP
// bc_type := b_breastwork ; 26 :
63829: LD_ADDR_OWVAR 42
63833: PUSH
63834: LD_INT 31
63836: ST_TO_ADDR
63837: GO 64011
63839: LD_INT 26
63841: DOUBLE
63842: EQUAL
63843: IFTRUE 63847
63845: GO 63858
63847: POP
// bc_type := b_bunker ; 27 :
63848: LD_ADDR_OWVAR 42
63852: PUSH
63853: LD_INT 32
63855: ST_TO_ADDR
63856: GO 64011
63858: LD_INT 27
63860: DOUBLE
63861: EQUAL
63862: IFTRUE 63866
63864: GO 63877
63866: POP
// bc_type := b_turret ; 28 :
63867: LD_ADDR_OWVAR 42
63871: PUSH
63872: LD_INT 33
63874: ST_TO_ADDR
63875: GO 64011
63877: LD_INT 28
63879: DOUBLE
63880: EQUAL
63881: IFTRUE 63885
63883: GO 63896
63885: POP
// bc_type := b_armoury ; 29 :
63886: LD_ADDR_OWVAR 42
63890: PUSH
63891: LD_INT 4
63893: ST_TO_ADDR
63894: GO 64011
63896: LD_INT 29
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63904
63902: GO 63915
63904: POP
// bc_type := b_barracks ; 30 :
63905: LD_ADDR_OWVAR 42
63909: PUSH
63910: LD_INT 5
63912: ST_TO_ADDR
63913: GO 64011
63915: LD_INT 30
63917: DOUBLE
63918: EQUAL
63919: IFTRUE 63923
63921: GO 63934
63923: POP
// bc_type := b_solar_power ; 31 :
63924: LD_ADDR_OWVAR 42
63928: PUSH
63929: LD_INT 27
63931: ST_TO_ADDR
63932: GO 64011
63934: LD_INT 31
63936: DOUBLE
63937: EQUAL
63938: IFTRUE 63942
63940: GO 63953
63942: POP
// bc_type := b_oil_power ; 32 :
63943: LD_ADDR_OWVAR 42
63947: PUSH
63948: LD_INT 26
63950: ST_TO_ADDR
63951: GO 64011
63953: LD_INT 32
63955: DOUBLE
63956: EQUAL
63957: IFTRUE 63961
63959: GO 63972
63961: POP
// bc_type := b_siberite_power ; 33 :
63962: LD_ADDR_OWVAR 42
63966: PUSH
63967: LD_INT 28
63969: ST_TO_ADDR
63970: GO 64011
63972: LD_INT 33
63974: DOUBLE
63975: EQUAL
63976: IFTRUE 63980
63978: GO 63991
63980: POP
// bc_type := b_oil_mine ; 34 :
63981: LD_ADDR_OWVAR 42
63985: PUSH
63986: LD_INT 29
63988: ST_TO_ADDR
63989: GO 64011
63991: LD_INT 34
63993: DOUBLE
63994: EQUAL
63995: IFTRUE 63999
63997: GO 64010
63999: POP
// bc_type := b_siberite_mine ; end ;
64000: LD_ADDR_OWVAR 42
64004: PUSH
64005: LD_INT 30
64007: ST_TO_ADDR
64008: GO 64011
64010: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64011: LD_ADDR_VAR 0 8
64015: PUSH
64016: LD_VAR 0 5
64020: PPUSH
64021: LD_VAR 0 6
64025: PPUSH
64026: LD_VAR 0 3
64030: PPUSH
64031: CALL_OW 47
64035: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64036: LD_OWVAR 42
64040: PUSH
64041: LD_INT 32
64043: PUSH
64044: LD_INT 33
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: IN
64051: IFFALSE 64067
// PlaceWeaponTurret ( b , weapon ) ;
64053: LD_VAR 0 8
64057: PPUSH
64058: LD_VAR 0 4
64062: PPUSH
64063: CALL_OW 431
// end ;
64067: LD_VAR 0 7
64071: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64072: LD_INT 0
64074: PPUSH
64075: PPUSH
64076: PPUSH
64077: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64078: LD_ADDR_VAR 0 4
64082: PUSH
64083: LD_INT 22
64085: PUSH
64086: LD_OWVAR 2
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: LD_INT 30
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 30
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PPUSH
64127: CALL_OW 69
64131: ST_TO_ADDR
// if not tmp then
64132: LD_VAR 0 4
64136: NOT
64137: IFFALSE 64141
// exit ;
64139: GO 64200
// for i in tmp do
64141: LD_ADDR_VAR 0 2
64145: PUSH
64146: LD_VAR 0 4
64150: PUSH
64151: FOR_IN
64152: IFFALSE 64198
// for j = 1 to 3 do
64154: LD_ADDR_VAR 0 3
64158: PUSH
64159: DOUBLE
64160: LD_INT 1
64162: DEC
64163: ST_TO_ADDR
64164: LD_INT 3
64166: PUSH
64167: FOR_TO
64168: IFFALSE 64194
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64170: LD_VAR 0 2
64174: PPUSH
64175: CALL_OW 274
64179: PPUSH
64180: LD_VAR 0 3
64184: PPUSH
64185: LD_INT 99999
64187: PPUSH
64188: CALL_OW 277
64192: GO 64167
64194: POP
64195: POP
64196: GO 64151
64198: POP
64199: POP
// end ;
64200: LD_VAR 0 1
64204: RET
// export function hHackSetLevel10 ; var i , j ; begin
64205: LD_INT 0
64207: PPUSH
64208: PPUSH
64209: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64210: LD_ADDR_VAR 0 2
64214: PUSH
64215: LD_INT 21
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PPUSH
64225: CALL_OW 69
64229: PUSH
64230: FOR_IN
64231: IFFALSE 64283
// if IsSelected ( i ) then
64233: LD_VAR 0 2
64237: PPUSH
64238: CALL_OW 306
64242: IFFALSE 64281
// begin for j := 1 to 4 do
64244: LD_ADDR_VAR 0 3
64248: PUSH
64249: DOUBLE
64250: LD_INT 1
64252: DEC
64253: ST_TO_ADDR
64254: LD_INT 4
64256: PUSH
64257: FOR_TO
64258: IFFALSE 64279
// SetSkill ( i , j , 10 ) ;
64260: LD_VAR 0 2
64264: PPUSH
64265: LD_VAR 0 3
64269: PPUSH
64270: LD_INT 10
64272: PPUSH
64273: CALL_OW 237
64277: GO 64257
64279: POP
64280: POP
// end ;
64281: GO 64230
64283: POP
64284: POP
// end ;
64285: LD_VAR 0 1
64289: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64290: LD_INT 0
64292: PPUSH
64293: PPUSH
64294: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64295: LD_ADDR_VAR 0 2
64299: PUSH
64300: LD_INT 22
64302: PUSH
64303: LD_OWVAR 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 21
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PPUSH
64326: CALL_OW 69
64330: PUSH
64331: FOR_IN
64332: IFFALSE 64373
// begin for j := 1 to 4 do
64334: LD_ADDR_VAR 0 3
64338: PUSH
64339: DOUBLE
64340: LD_INT 1
64342: DEC
64343: ST_TO_ADDR
64344: LD_INT 4
64346: PUSH
64347: FOR_TO
64348: IFFALSE 64369
// SetSkill ( i , j , 10 ) ;
64350: LD_VAR 0 2
64354: PPUSH
64355: LD_VAR 0 3
64359: PPUSH
64360: LD_INT 10
64362: PPUSH
64363: CALL_OW 237
64367: GO 64347
64369: POP
64370: POP
// end ;
64371: GO 64331
64373: POP
64374: POP
// end ;
64375: LD_VAR 0 1
64379: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64380: LD_INT 0
64382: PPUSH
// uc_side := your_side ;
64383: LD_ADDR_OWVAR 20
64387: PUSH
64388: LD_OWVAR 2
64392: ST_TO_ADDR
// uc_nation := nation ;
64393: LD_ADDR_OWVAR 21
64397: PUSH
64398: LD_VAR 0 1
64402: ST_TO_ADDR
// InitHc ;
64403: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64407: LD_INT 0
64409: PPUSH
64410: LD_VAR 0 2
64414: PPUSH
64415: LD_VAR 0 3
64419: PPUSH
64420: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64424: LD_VAR 0 4
64428: PPUSH
64429: LD_VAR 0 5
64433: PPUSH
64434: CALL_OW 428
64438: PUSH
64439: LD_INT 0
64441: EQUAL
64442: IFFALSE 64466
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64444: CALL_OW 44
64448: PPUSH
64449: LD_VAR 0 4
64453: PPUSH
64454: LD_VAR 0 5
64458: PPUSH
64459: LD_INT 1
64461: PPUSH
64462: CALL_OW 48
// end ;
64466: LD_VAR 0 6
64470: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64471: LD_INT 0
64473: PPUSH
64474: PPUSH
// uc_side := your_side ;
64475: LD_ADDR_OWVAR 20
64479: PUSH
64480: LD_OWVAR 2
64484: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64485: LD_VAR 0 1
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: LD_INT 3
64498: PUSH
64499: LD_INT 4
64501: PUSH
64502: LD_INT 5
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: IN
64512: IFFALSE 64524
// uc_nation := nation_american else
64514: LD_ADDR_OWVAR 21
64518: PUSH
64519: LD_INT 1
64521: ST_TO_ADDR
64522: GO 64567
// if chassis in [ 11 , 12 , 13 , 14 ] then
64524: LD_VAR 0 1
64528: PUSH
64529: LD_INT 11
64531: PUSH
64532: LD_INT 12
64534: PUSH
64535: LD_INT 13
64537: PUSH
64538: LD_INT 14
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: IN
64547: IFFALSE 64559
// uc_nation := nation_arabian else
64549: LD_ADDR_OWVAR 21
64553: PUSH
64554: LD_INT 2
64556: ST_TO_ADDR
64557: GO 64567
// uc_nation := nation_russian ;
64559: LD_ADDR_OWVAR 21
64563: PUSH
64564: LD_INT 3
64566: ST_TO_ADDR
// vc_chassis := chassis ;
64567: LD_ADDR_OWVAR 37
64571: PUSH
64572: LD_VAR 0 1
64576: ST_TO_ADDR
// vc_engine := engine ;
64577: LD_ADDR_OWVAR 39
64581: PUSH
64582: LD_VAR 0 2
64586: ST_TO_ADDR
// vc_control := control ;
64587: LD_ADDR_OWVAR 38
64591: PUSH
64592: LD_VAR 0 3
64596: ST_TO_ADDR
// vc_weapon := weapon ;
64597: LD_ADDR_OWVAR 40
64601: PUSH
64602: LD_VAR 0 4
64606: ST_TO_ADDR
// un := CreateVehicle ;
64607: LD_ADDR_VAR 0 8
64611: PUSH
64612: CALL_OW 45
64616: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64617: LD_VAR 0 8
64621: PPUSH
64622: LD_INT 0
64624: PPUSH
64625: LD_INT 5
64627: PPUSH
64628: CALL_OW 12
64632: PPUSH
64633: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64637: LD_VAR 0 8
64641: PPUSH
64642: LD_VAR 0 5
64646: PPUSH
64647: LD_VAR 0 6
64651: PPUSH
64652: LD_INT 1
64654: PPUSH
64655: CALL_OW 48
// end ;
64659: LD_VAR 0 7
64663: RET
// export hInvincible ; every 1 do
64664: GO 64666
64666: DISABLE
// hInvincible := [ ] ;
64667: LD_ADDR_EXP 70
64671: PUSH
64672: EMPTY
64673: ST_TO_ADDR
64674: END
// every 10 do var i ;
64675: GO 64677
64677: DISABLE
64678: LD_INT 0
64680: PPUSH
// begin enable ;
64681: ENABLE
// if not hInvincible then
64682: LD_EXP 70
64686: NOT
64687: IFFALSE 64691
// exit ;
64689: GO 64735
// for i in hInvincible do
64691: LD_ADDR_VAR 0 1
64695: PUSH
64696: LD_EXP 70
64700: PUSH
64701: FOR_IN
64702: IFFALSE 64733
// if GetLives ( i ) < 1000 then
64704: LD_VAR 0 1
64708: PPUSH
64709: CALL_OW 256
64713: PUSH
64714: LD_INT 1000
64716: LESS
64717: IFFALSE 64731
// SetLives ( i , 1000 ) ;
64719: LD_VAR 0 1
64723: PPUSH
64724: LD_INT 1000
64726: PPUSH
64727: CALL_OW 234
64731: GO 64701
64733: POP
64734: POP
// end ;
64735: PPOPN 1
64737: END
// export function hHackInvincible ; var i ; begin
64738: LD_INT 0
64740: PPUSH
64741: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64742: LD_ADDR_VAR 0 2
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: LD_INT 21
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 21
64762: PUSH
64763: LD_INT 2
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: PPUSH
64775: CALL_OW 69
64779: PUSH
64780: FOR_IN
64781: IFFALSE 64842
// if IsSelected ( i ) then
64783: LD_VAR 0 2
64787: PPUSH
64788: CALL_OW 306
64792: IFFALSE 64840
// begin if i in hInvincible then
64794: LD_VAR 0 2
64798: PUSH
64799: LD_EXP 70
64803: IN
64804: IFFALSE 64824
// hInvincible := hInvincible diff i else
64806: LD_ADDR_EXP 70
64810: PUSH
64811: LD_EXP 70
64815: PUSH
64816: LD_VAR 0 2
64820: DIFF
64821: ST_TO_ADDR
64822: GO 64840
// hInvincible := hInvincible union i ;
64824: LD_ADDR_EXP 70
64828: PUSH
64829: LD_EXP 70
64833: PUSH
64834: LD_VAR 0 2
64838: UNION
64839: ST_TO_ADDR
// end ;
64840: GO 64780
64842: POP
64843: POP
// end ;
64844: LD_VAR 0 1
64848: RET
// export function hHackInvisible ; var i , j ; begin
64849: LD_INT 0
64851: PPUSH
64852: PPUSH
64853: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64854: LD_ADDR_VAR 0 2
64858: PUSH
64859: LD_INT 21
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PPUSH
64869: CALL_OW 69
64873: PUSH
64874: FOR_IN
64875: IFFALSE 64899
// if IsSelected ( i ) then
64877: LD_VAR 0 2
64881: PPUSH
64882: CALL_OW 306
64886: IFFALSE 64897
// ComForceInvisible ( i ) ;
64888: LD_VAR 0 2
64892: PPUSH
64893: CALL_OW 496
64897: GO 64874
64899: POP
64900: POP
// end ;
64901: LD_VAR 0 1
64905: RET
// export function hHackChangeYourSide ; begin
64906: LD_INT 0
64908: PPUSH
// if your_side = 8 then
64909: LD_OWVAR 2
64913: PUSH
64914: LD_INT 8
64916: EQUAL
64917: IFFALSE 64929
// your_side := 0 else
64919: LD_ADDR_OWVAR 2
64923: PUSH
64924: LD_INT 0
64926: ST_TO_ADDR
64927: GO 64943
// your_side := your_side + 1 ;
64929: LD_ADDR_OWVAR 2
64933: PUSH
64934: LD_OWVAR 2
64938: PUSH
64939: LD_INT 1
64941: PLUS
64942: ST_TO_ADDR
// end ;
64943: LD_VAR 0 1
64947: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64948: LD_INT 0
64950: PPUSH
64951: PPUSH
64952: PPUSH
// for i in all_units do
64953: LD_ADDR_VAR 0 2
64957: PUSH
64958: LD_OWVAR 3
64962: PUSH
64963: FOR_IN
64964: IFFALSE 65042
// if IsSelected ( i ) then
64966: LD_VAR 0 2
64970: PPUSH
64971: CALL_OW 306
64975: IFFALSE 65040
// begin j := GetSide ( i ) ;
64977: LD_ADDR_VAR 0 3
64981: PUSH
64982: LD_VAR 0 2
64986: PPUSH
64987: CALL_OW 255
64991: ST_TO_ADDR
// if j = 8 then
64992: LD_VAR 0 3
64996: PUSH
64997: LD_INT 8
64999: EQUAL
65000: IFFALSE 65012
// j := 0 else
65002: LD_ADDR_VAR 0 3
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
65010: GO 65026
// j := j + 1 ;
65012: LD_ADDR_VAR 0 3
65016: PUSH
65017: LD_VAR 0 3
65021: PUSH
65022: LD_INT 1
65024: PLUS
65025: ST_TO_ADDR
// SetSide ( i , j ) ;
65026: LD_VAR 0 2
65030: PPUSH
65031: LD_VAR 0 3
65035: PPUSH
65036: CALL_OW 235
// end ;
65040: GO 64963
65042: POP
65043: POP
// end ;
65044: LD_VAR 0 1
65048: RET
// export function hHackFog ; begin
65049: LD_INT 0
65051: PPUSH
// FogOff ( true ) ;
65052: LD_INT 1
65054: PPUSH
65055: CALL_OW 344
// end ;
65059: LD_VAR 0 1
65063: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65064: LD_INT 0
65066: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65067: LD_VAR 0 1
65071: PPUSH
65072: LD_VAR 0 2
65076: PPUSH
65077: LD_VAR 0 3
65081: PPUSH
65082: LD_INT 1
65084: PPUSH
65085: LD_INT 1
65087: PPUSH
65088: CALL_OW 483
// CenterOnXY ( x , y ) ;
65092: LD_VAR 0 2
65096: PPUSH
65097: LD_VAR 0 3
65101: PPUSH
65102: CALL_OW 84
// end ;
65106: LD_VAR 0 4
65110: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65111: LD_INT 0
65113: PPUSH
65114: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65115: LD_VAR 0 1
65119: NOT
65120: IFTRUE 65139
65122: PUSH
65123: LD_VAR 0 2
65127: PPUSH
65128: LD_VAR 0 3
65132: PPUSH
65133: CALL_OW 488
65137: NOT
65138: OR
65139: IFTRUE 65174
65141: PUSH
65142: LD_VAR 0 1
65146: PPUSH
65147: CALL_OW 266
65151: PUSH
65152: LD_INT 3
65154: NONEQUAL
65155: IFFALSE 65173
65157: PUSH
65158: LD_VAR 0 1
65162: PPUSH
65163: CALL_OW 247
65167: PUSH
65168: LD_INT 1
65170: EQUAL
65171: NOT
65172: AND
65173: OR
65174: IFFALSE 65178
// exit ;
65176: GO 65460
// if GetType ( factory ) = unit_human then
65178: LD_VAR 0 1
65182: PPUSH
65183: CALL_OW 247
65187: PUSH
65188: LD_INT 1
65190: EQUAL
65191: IFFALSE 65208
// factory := IsInUnit ( factory ) ;
65193: LD_ADDR_VAR 0 1
65197: PUSH
65198: LD_VAR 0 1
65202: PPUSH
65203: CALL_OW 310
65207: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65208: LD_VAR 0 1
65212: PPUSH
65213: CALL_OW 266
65217: PUSH
65218: LD_INT 3
65220: NONEQUAL
65221: IFFALSE 65225
// exit ;
65223: GO 65460
// for i := 1 to Count ( factoryWaypoints ) do
65225: LD_ADDR_VAR 0 5
65229: PUSH
65230: DOUBLE
65231: LD_INT 1
65233: DEC
65234: ST_TO_ADDR
65235: LD_EXP 71
65239: PPUSH
65240: CALL 2742 0 1
65244: PUSH
65245: FOR_TO
65246: IFFALSE 65408
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65248: LD_VAR 0 2
65252: PPUSH
65253: LD_VAR 0 3
65257: PPUSH
65258: CALL_OW 428
65262: PUSH
65263: LD_EXP 71
65267: PUSH
65268: LD_VAR 0 5
65272: ARRAY
65273: PUSH
65274: LD_INT 2
65276: ARRAY
65277: EQUAL
65278: IFFALSE 65310
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65280: LD_ADDR_EXP 71
65284: PUSH
65285: LD_EXP 71
65289: PPUSH
65290: LD_VAR 0 5
65294: PPUSH
65295: CALL_OW 3
65299: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65300: CALL 65465 0 0
// exit ;
65304: POP
65305: POP
65306: GO 65460
// end else
65308: GO 65406
// if factory = factoryWaypoints [ i ] [ 2 ] then
65310: LD_VAR 0 1
65314: PUSH
65315: LD_EXP 71
65319: PUSH
65320: LD_VAR 0 5
65324: ARRAY
65325: PUSH
65326: LD_INT 2
65328: ARRAY
65329: EQUAL
65330: IFFALSE 65406
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65332: LD_ADDR_EXP 71
65336: PUSH
65337: LD_EXP 71
65341: PPUSH
65342: LD_VAR 0 5
65346: PPUSH
65347: CALL_OW 3
65351: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65352: LD_ADDR_EXP 71
65356: PUSH
65357: LD_EXP 71
65361: PPUSH
65362: LD_VAR 0 1
65366: PPUSH
65367: CALL_OW 255
65371: PUSH
65372: LD_VAR 0 1
65376: PUSH
65377: LD_VAR 0 2
65381: PUSH
65382: LD_VAR 0 3
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: PPUSH
65393: CALL 38674 0 2
65397: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65398: CALL 65465 0 0
// exit ;
65402: POP
65403: POP
65404: GO 65460
// end ; end ;
65406: GO 65245
65408: POP
65409: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65410: LD_ADDR_EXP 71
65414: PUSH
65415: LD_EXP 71
65419: PPUSH
65420: LD_VAR 0 1
65424: PPUSH
65425: CALL_OW 255
65429: PUSH
65430: LD_VAR 0 1
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: LD_VAR 0 3
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: PPUSH
65451: CALL 38674 0 2
65455: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65456: CALL 65465 0 0
// end ;
65460: LD_VAR 0 4
65464: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65465: LD_INT 0
65467: PPUSH
65468: PPUSH
65469: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65470: LD_STRING resetFactoryWaypoint();
65472: PPUSH
65473: CALL_OW 559
// if factoryWaypoints then
65477: LD_EXP 71
65481: IFFALSE 65602
// begin list := factoryWaypoints ;
65483: LD_ADDR_VAR 0 3
65487: PUSH
65488: LD_EXP 71
65492: ST_TO_ADDR
// for i := 1 to list do
65493: LD_ADDR_VAR 0 2
65497: PUSH
65498: DOUBLE
65499: LD_INT 1
65501: DEC
65502: ST_TO_ADDR
65503: LD_VAR 0 3
65507: PUSH
65508: FOR_TO
65509: IFFALSE 65600
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65511: LD_STRING setFactoryWaypointXY(
65513: PUSH
65514: LD_VAR 0 3
65518: PUSH
65519: LD_VAR 0 2
65523: ARRAY
65524: PUSH
65525: LD_INT 1
65527: ARRAY
65528: STR
65529: PUSH
65530: LD_STRING ,
65532: STR
65533: PUSH
65534: LD_VAR 0 3
65538: PUSH
65539: LD_VAR 0 2
65543: ARRAY
65544: PUSH
65545: LD_INT 2
65547: ARRAY
65548: STR
65549: PUSH
65550: LD_STRING ,
65552: STR
65553: PUSH
65554: LD_VAR 0 3
65558: PUSH
65559: LD_VAR 0 2
65563: ARRAY
65564: PUSH
65565: LD_INT 3
65567: ARRAY
65568: STR
65569: PUSH
65570: LD_STRING ,
65572: STR
65573: PUSH
65574: LD_VAR 0 3
65578: PUSH
65579: LD_VAR 0 2
65583: ARRAY
65584: PUSH
65585: LD_INT 4
65587: ARRAY
65588: STR
65589: PUSH
65590: LD_STRING )
65592: STR
65593: PPUSH
65594: CALL_OW 559
65598: GO 65508
65600: POP
65601: POP
// end ; end ;
65602: LD_VAR 0 1
65606: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65607: LD_INT 0
65609: PPUSH
// if HexInfo ( x , y ) = warehouse then
65610: LD_VAR 0 2
65614: PPUSH
65615: LD_VAR 0 3
65619: PPUSH
65620: CALL_OW 428
65624: PUSH
65625: LD_VAR 0 1
65629: EQUAL
65630: IFFALSE 65657
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65632: LD_ADDR_EXP 73
65636: PUSH
65637: LD_EXP 73
65641: PPUSH
65642: LD_VAR 0 1
65646: PPUSH
65647: LD_INT 0
65649: PPUSH
65650: CALL_OW 1
65654: ST_TO_ADDR
65655: GO 65708
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65657: LD_ADDR_EXP 73
65661: PUSH
65662: LD_EXP 73
65666: PPUSH
65667: LD_VAR 0 1
65671: PPUSH
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 255
65681: PUSH
65682: LD_VAR 0 1
65686: PUSH
65687: LD_VAR 0 2
65691: PUSH
65692: LD_VAR 0 3
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: PPUSH
65703: CALL_OW 1
65707: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65708: CALL 65717 0 0
// end ;
65712: LD_VAR 0 4
65716: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65717: LD_INT 0
65719: PPUSH
65720: PPUSH
65721: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65722: LD_STRING resetWarehouseGatheringPoints();
65724: PPUSH
65725: CALL_OW 559
// if warehouseGatheringPoints then
65729: LD_EXP 73
65733: IFFALSE 65859
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_EXP 73
65744: PPUSH
65745: CALL 42608 0 1
65749: ST_TO_ADDR
// for i := 1 to list do
65750: LD_ADDR_VAR 0 2
65754: PUSH
65755: DOUBLE
65756: LD_INT 1
65758: DEC
65759: ST_TO_ADDR
65760: LD_VAR 0 3
65764: PUSH
65765: FOR_TO
65766: IFFALSE 65857
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65768: LD_STRING setWarehouseGatheringPointXY(
65770: PUSH
65771: LD_VAR 0 3
65775: PUSH
65776: LD_VAR 0 2
65780: ARRAY
65781: PUSH
65782: LD_INT 1
65784: ARRAY
65785: STR
65786: PUSH
65787: LD_STRING ,
65789: STR
65790: PUSH
65791: LD_VAR 0 3
65795: PUSH
65796: LD_VAR 0 2
65800: ARRAY
65801: PUSH
65802: LD_INT 2
65804: ARRAY
65805: STR
65806: PUSH
65807: LD_STRING ,
65809: STR
65810: PUSH
65811: LD_VAR 0 3
65815: PUSH
65816: LD_VAR 0 2
65820: ARRAY
65821: PUSH
65822: LD_INT 3
65824: ARRAY
65825: STR
65826: PUSH
65827: LD_STRING ,
65829: STR
65830: PUSH
65831: LD_VAR 0 3
65835: PUSH
65836: LD_VAR 0 2
65840: ARRAY
65841: PUSH
65842: LD_INT 4
65844: ARRAY
65845: STR
65846: PUSH
65847: LD_STRING )
65849: STR
65850: PPUSH
65851: CALL_OW 559
65855: GO 65765
65857: POP
65858: POP
// end ; end ;
65859: LD_VAR 0 1
65863: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65864: LD_EXP 73
65868: IFFALSE 66563
65870: GO 65872
65872: DISABLE
65873: LD_INT 0
65875: PPUSH
65876: PPUSH
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
// begin enable ;
65884: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65885: LD_ADDR_VAR 0 3
65889: PUSH
65890: LD_EXP 73
65894: PPUSH
65895: CALL 42608 0 1
65899: ST_TO_ADDR
// if not list then
65900: LD_VAR 0 3
65904: NOT
65905: IFFALSE 65909
// exit ;
65907: GO 66563
// for i := 1 to list do
65909: LD_ADDR_VAR 0 1
65913: PUSH
65914: DOUBLE
65915: LD_INT 1
65917: DEC
65918: ST_TO_ADDR
65919: LD_VAR 0 3
65923: PUSH
65924: FOR_TO
65925: IFFALSE 66561
// begin depot := list [ i ] [ 2 ] ;
65927: LD_ADDR_VAR 0 8
65931: PUSH
65932: LD_VAR 0 3
65936: PUSH
65937: LD_VAR 0 1
65941: ARRAY
65942: PUSH
65943: LD_INT 2
65945: ARRAY
65946: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65947: LD_ADDR_VAR 0 5
65951: PUSH
65952: LD_VAR 0 3
65956: PUSH
65957: LD_VAR 0 1
65961: ARRAY
65962: PUSH
65963: LD_INT 1
65965: ARRAY
65966: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65967: LD_VAR 0 8
65971: PPUSH
65972: CALL_OW 301
65976: IFTRUE 65995
65978: PUSH
65979: LD_VAR 0 5
65983: PUSH
65984: LD_VAR 0 8
65988: PPUSH
65989: CALL_OW 255
65993: NONEQUAL
65994: OR
65995: IFFALSE 66024
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65997: LD_ADDR_EXP 73
66001: PUSH
66002: LD_EXP 73
66006: PPUSH
66007: LD_VAR 0 8
66011: PPUSH
66012: LD_INT 0
66014: PPUSH
66015: CALL_OW 1
66019: ST_TO_ADDR
// exit ;
66020: POP
66021: POP
66022: GO 66563
// end ; x := list [ i ] [ 3 ] ;
66024: LD_ADDR_VAR 0 6
66028: PUSH
66029: LD_VAR 0 3
66033: PUSH
66034: LD_VAR 0 1
66038: ARRAY
66039: PUSH
66040: LD_INT 3
66042: ARRAY
66043: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66044: LD_ADDR_VAR 0 7
66048: PUSH
66049: LD_VAR 0 3
66053: PUSH
66054: LD_VAR 0 1
66058: ARRAY
66059: PUSH
66060: LD_INT 4
66062: ARRAY
66063: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
66064: LD_ADDR_VAR 0 9
66068: PUSH
66069: LD_VAR 0 6
66073: PPUSH
66074: LD_VAR 0 7
66078: PPUSH
66079: LD_INT 16
66081: PPUSH
66082: CALL 41182 0 3
66086: ST_TO_ADDR
// if not cratesNearbyPoint then
66087: LD_VAR 0 9
66091: NOT
66092: IFFALSE 66098
// exit ;
66094: POP
66095: POP
66096: GO 66563
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66098: LD_ADDR_VAR 0 4
66102: PUSH
66103: LD_INT 22
66105: PUSH
66106: LD_VAR 0 5
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 3
66117: PUSH
66118: LD_INT 60
66120: PUSH
66121: EMPTY
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 91
66130: PUSH
66131: LD_VAR 0 8
66135: PUSH
66136: LD_INT 6
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: LD_INT 25
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 25
66159: PUSH
66160: LD_INT 16
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: PPUSH
66178: CALL_OW 69
66182: PUSH
66183: LD_VAR 0 8
66187: PPUSH
66188: CALL_OW 313
66192: PPUSH
66193: LD_INT 3
66195: PUSH
66196: LD_INT 60
66198: PUSH
66199: EMPTY
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 25
66211: PUSH
66212: LD_INT 2
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 25
66221: PUSH
66222: LD_INT 16
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PPUSH
66238: CALL_OW 72
66242: UNION
66243: ST_TO_ADDR
// if tmp then
66244: LD_VAR 0 4
66248: IFFALSE 66328
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66250: LD_ADDR_VAR 0 4
66254: PUSH
66255: LD_VAR 0 4
66259: PPUSH
66260: LD_INT 3
66262: PPUSH
66263: CALL 38989 0 2
66267: ST_TO_ADDR
// for j in tmp do
66268: LD_ADDR_VAR 0 2
66272: PUSH
66273: LD_VAR 0 4
66277: PUSH
66278: FOR_IN
66279: IFFALSE 66322
// begin if IsInUnit ( j ) then
66281: LD_VAR 0 2
66285: PPUSH
66286: CALL_OW 310
66290: IFFALSE 66301
// ComExit ( j ) ;
66292: LD_VAR 0 2
66296: PPUSH
66297: CALL 39072 0 1
// AddComCollect ( j , x , y ) ;
66301: LD_VAR 0 2
66305: PPUSH
66306: LD_VAR 0 6
66310: PPUSH
66311: LD_VAR 0 7
66315: PPUSH
66316: CALL_OW 177
// end ;
66320: GO 66278
66322: POP
66323: POP
// exit ;
66324: POP
66325: POP
66326: GO 66563
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66328: LD_ADDR_VAR 0 4
66332: PUSH
66333: LD_INT 22
66335: PUSH
66336: LD_VAR 0 5
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 91
66347: PUSH
66348: LD_VAR 0 8
66352: PUSH
66353: LD_INT 8
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: LD_INT 34
66366: PUSH
66367: LD_INT 12
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 34
66376: PUSH
66377: LD_INT 51
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 34
66386: PUSH
66387: LD_INT 32
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 34
66396: PUSH
66397: LD_INT 89
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: LIST
66415: PPUSH
66416: CALL_OW 69
66420: ST_TO_ADDR
// if tmp then
66421: LD_VAR 0 4
66425: IFFALSE 66559
// begin for j in tmp do
66427: LD_ADDR_VAR 0 2
66431: PUSH
66432: LD_VAR 0 4
66436: PUSH
66437: FOR_IN
66438: IFFALSE 66557
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66440: LD_VAR 0 2
66444: PPUSH
66445: CALL_OW 262
66449: PUSH
66450: LD_INT 3
66452: EQUAL
66453: IFTRUE 66470
66455: PUSH
66456: LD_VAR 0 2
66460: PPUSH
66461: CALL_OW 261
66465: PUSH
66466: LD_INT 20
66468: GREATER
66469: OR
66470: IFFALSE 66484
66472: PUSH
66473: LD_VAR 0 2
66477: PPUSH
66478: CALL_OW 314
66482: NOT
66483: AND
66484: IFFALSE 66514
66486: PUSH
66487: LD_VAR 0 2
66491: PPUSH
66492: CALL_OW 263
66496: PUSH
66497: LD_INT 1
66499: NONEQUAL
66500: IFTRUE 66513
66502: PUSH
66503: LD_VAR 0 2
66507: PPUSH
66508: CALL_OW 311
66512: OR
66513: AND
66514: IFFALSE 66555
// begin ComCollect ( j , x , y ) ;
66516: LD_VAR 0 2
66520: PPUSH
66521: LD_VAR 0 6
66525: PPUSH
66526: LD_VAR 0 7
66530: PPUSH
66531: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66535: LD_VAR 0 2
66539: PPUSH
66540: LD_VAR 0 8
66544: PPUSH
66545: CALL_OW 172
// exit ;
66549: POP
66550: POP
66551: POP
66552: POP
66553: GO 66563
// end ;
66555: GO 66437
66557: POP
66558: POP
// end ; end ;
66559: GO 65924
66561: POP
66562: POP
// end ;
66563: PPOPN 9
66565: END
